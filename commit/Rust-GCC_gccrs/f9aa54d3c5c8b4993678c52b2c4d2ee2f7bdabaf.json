{"sha": "f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlhYTU0ZDNjNWM4YjQ5OTM2NzhjNTJiMmM0ZDJlZTJmN2JkYWJhZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-03-11T03:07:59Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-03-11T03:07:59Z"}, "message": "re PR c++/30274 (bool bit-field: wrong increment and decremenet)\n\n\tPR c++/30274\n\t* cp-tree.h (unlowered_expr_type): New function.\n\t* typeck.c (is_bitfield_expr_with_lowered_type): Handle\n\tCOMPOUND_EXPR, MODIFY_EXPR, and SAVE_EXPR.\n\t(unlowered_expr_type): New function.\n\t(build_unary_op): Disallow predecrements of bool bitfields.\n\t* call.c (build_conditional_expr): Use unlowered_expr_type.\n\t* pt.c (type_unification_real): Likewise.\n\tPR c++/30274\n\t* g++.dg/expr/bitfield3.C: New test.\n\t* g++.dg/expr/bitfield4.C: Likewise.\n\t* g++.dg/expr/bitfield5.C: Likewise.\n\t* g++.dg/expr/bitfield6.C: Likewise.\n\nFrom-SVN: r122813", "tree": {"sha": "db5f9072513ff237834cbce6b263a110d6ef3658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db5f9072513ff237834cbce6b263a110d6ef3658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/comments", "author": null, "committer": null, "parents": [{"sha": "eae920410eba880ef056809d8dea2393233b4d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae920410eba880ef056809d8dea2393233b4d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae920410eba880ef056809d8dea2393233b4d58"}], "stats": {"total": 145, "additions": 125, "deletions": 20}, "files": [{"sha": "2f9b251c56278c0ec5a8e801f59ef27d1f4ffafa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "patch": "@@ -1,3 +1,14 @@\n+2007-03-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/30274\n+\t* cp-tree.h (unlowered_expr_type): New function.\n+\t* typeck.c (is_bitfield_expr_with_lowered_type): Handle\n+\tCOMPOUND_EXPR, MODIFY_EXPR, and SAVE_EXPR.\n+\t(unlowered_expr_type): New function.\n+\t(build_unary_op): Disallow predecrements of bool bitfields.\n+\t* call.c (build_conditional_expr): Use unlowered_expr_type.\n+\t* pt.c (type_unification_real): Likewise.\n+\n 2007-03-09  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR c++/20599"}, {"sha": "637671bc1bcba87f683807fb1bbebda41a9f97cc", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "patch": "@@ -3250,12 +3250,8 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3)\n      array-to-pointer (_conv.array_), and function-to-pointer\n      (_conv.func_) standard conversions are performed on the second\n      and third operands.  */\n-  arg2_type = is_bitfield_expr_with_lowered_type (arg2);\n-  if (!arg2_type)\n-    arg2_type = TREE_TYPE (arg2);\n-  arg3_type = is_bitfield_expr_with_lowered_type (arg3);\n-  if (!arg3_type)\n-    arg3_type = TREE_TYPE (arg3);\n+  arg2_type = unlowered_expr_type (arg2);\n+  arg3_type = unlowered_expr_type (arg3);\n   if (VOID_TYPE_P (arg2_type) || VOID_TYPE_P (arg3_type))\n     {\n       /* Do the conversions.  We don't these for `void' type arguments"}, {"sha": "2632137eb26bb4c58d3b9c417744e947f426da38", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "patch": "@@ -4645,6 +4645,7 @@ extern tree cxx_sizeof_or_alignof_type\t\t(tree, enum tree_code, bool);\n #define cxx_sizeof_nowarn(T) cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, false)\n extern tree inline_conversion\t\t\t(tree);\n extern tree is_bitfield_expr_with_lowered_type  (tree);\n+extern tree unlowered_expr_type                 (tree);\n extern tree decay_conversion\t\t\t(tree);\n extern tree build_class_member_access_expr      (tree, tree, tree, bool);\n extern tree finish_class_member_access_expr     (tree, tree, bool);"}, {"sha": "f947da2b0facd4ff7a4c355fb4f77864b1880be0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "patch": "@@ -11260,7 +11260,7 @@ type_unification_real (tree tparms,\n \t\treturn 1;\n \t      continue;\n \t    }\n-\t  arg = TREE_TYPE (arg);\n+\t  arg = unlowered_expr_type (arg);\n \t  if (arg == error_mark_node)\n \t    return 1;\n \t}"}, {"sha": "e8f1a183fc940bc399543bb9e65336b061df6183", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "patch": "@@ -1418,23 +1418,52 @@ invalid_nonstatic_memfn_p (tree expr)\n tree\n is_bitfield_expr_with_lowered_type (tree exp)\n {\n-  tree field;\n-\n-  if (TREE_CODE (exp) == COND_EXPR)\n+  switch (TREE_CODE (exp))\n     {\n+    case COND_EXPR:\n       if (!is_bitfield_expr_with_lowered_type (TREE_OPERAND (exp, 1)))\n \treturn NULL_TREE;\n       return is_bitfield_expr_with_lowered_type (TREE_OPERAND (exp, 2));\n+\n+    case COMPOUND_EXPR:\n+      return is_bitfield_expr_with_lowered_type (TREE_OPERAND (exp, 1));\n+\n+    case MODIFY_EXPR:\n+    case SAVE_EXPR:\n+      return is_bitfield_expr_with_lowered_type (TREE_OPERAND (exp, 0));\n+\n+    case COMPONENT_REF:\n+      {\n+\ttree field;\n+\t\n+\tfield = TREE_OPERAND (exp, 1);\n+\tif (TREE_CODE (field) != FIELD_DECL || !DECL_C_BIT_FIELD (field))\n+\t  return NULL_TREE;\n+\tif (same_type_ignoring_top_level_qualifiers_p\n+\t    (TREE_TYPE (exp), DECL_BIT_FIELD_TYPE (field)))\n+\t  return NULL_TREE;\n+\treturn DECL_BIT_FIELD_TYPE (field);\n+      }\n+\n+    default:\n+      return NULL_TREE;\n     }\n-  if (TREE_CODE (exp) != COMPONENT_REF)\n-    return NULL_TREE;\n-  field = TREE_OPERAND (exp, 1);\n-  if (TREE_CODE (field) != FIELD_DECL || !DECL_C_BIT_FIELD (field))\n-    return NULL_TREE;\n-  if (same_type_ignoring_top_level_qualifiers_p\n-      (TREE_TYPE (exp), DECL_BIT_FIELD_TYPE (field)))\n-    return NULL_TREE;\n-  return DECL_BIT_FIELD_TYPE (field);\n+}\n+\n+/* Like is_bitfield_with_lowered_type, except that if EXP is not a\n+   bitfield with a lowered type, the type of EXP is returned, rather\n+   than NULL_TREE.  */\n+\n+tree\n+unlowered_expr_type (tree exp)\n+{\n+  tree type;\n+\n+  type = is_bitfield_expr_with_lowered_type (exp);\n+  if (!type)\n+    type = TREE_TYPE (exp);\n+\n+  return type;\n }\n \n /* Perform the conversions in [expr] that apply when an lvalue appears\n@@ -4217,8 +4246,11 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \n       {\n \ttree inc;\n+\ttree declared_type;\n \ttree result_type = TREE_TYPE (arg);\n \n+\tdeclared_type = unlowered_expr_type (arg);\n+\n \targ = get_unwidened (arg, 0);\n \targtype = TREE_TYPE (arg);\n \n@@ -4296,7 +4328,7 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \t  return error_mark_node;\n \n \t/* Forbid using -- on `bool'.  */\n-\tif (same_type_p (TREE_TYPE (arg), boolean_type_node))\n+\tif (same_type_p (declared_type, boolean_type_node))\n \t  {\n \t    if (code == POSTDECREMENT_EXPR || code == PREDECREMENT_EXPR)\n \t      {"}, {"sha": "edc908c5b9faa39e548ec17edb400cadc3eea73a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "patch": "@@ -1,5 +1,11 @@\n 2007-03-10  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/30274\n+\t* g++.dg/expr/bitfield3.C: New test.\n+\t* g++.dg/expr/bitfield4.C: Likewise.\n+\t* g++.dg/expr/bitfield5.C: Likewise.\n+\t* g++.dg/expr/bitfield6.C: Likewise.\n+\n \tPR c++/30924\n \t* g++.dg/template/array18.C: New test.\n "}, {"sha": "7b856e9e8b872601857cf200a7ff6c2c435326e9", "filename": "gcc/testsuite/g++.dg/expr/bitfield3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield3.C?ref=f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/30274\n+\n+struct S {\n+  bool x : 4;\n+};\n+\n+S s;\n+\n+void f() {\n+  s.x--; // { dg-error \"bool\" }\n+  --s.x; // { dg-error \"bool\" }\n+}"}, {"sha": "d824964e18790482b03ae44767b6fcceb617db21", "filename": "gcc/testsuite/g++.dg/expr/bitfield4.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield4.C?ref=f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/30274\n+// { dg-do link }\n+\n+struct S {\n+  bool x : 4;\n+};\n+\n+S s;\n+\n+template <typename T>\n+void f(T);\n+\n+template <>\n+void f(bool) {} \n+\n+int main() {\n+  f(s.x++);\n+  f(++s.x);\n+}"}, {"sha": "3d18e159cc0636e6488be4cce1e4880812aec26e", "filename": "gcc/testsuite/g++.dg/expr/bitfield5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield5.C?ref=f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/30274\n+// { dg-do run }\n+\n+struct S {\n+  bool x : 4;\n+};\n+\n+S s;\n+\n+int main() {\n+  s.x++;\n+  if (s.x != 1)\n+    return 1;\n+  ++s.x;\n+  if (s.x != 1)\n+    return 2;\n+}"}, {"sha": "6f6d559a38e28209bbc335e2a160da6556932e04", "filename": "gcc/testsuite/g++.dg/expr/bitfield6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fbitfield6.C?ref=f9aa54d3c5c8b4993678c52b2c4d2ee2f7bdabaf", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/30274\n+\n+struct S {\n+  bool x : 4;\n+};\n+\n+S s;\n+\n+void f() {\n+  ++s.x = false;\n+}"}]}