{"sha": "18e1f2bd67da8877099783f42634d8692bd80ec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThlMWYyYmQ2N2RhODg3NzA5OTc4M2Y0MjYzNGQ4NjkyYmQ4MGVjOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-31T00:48:17Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-31T00:48:17Z"}, "message": "HACKING, [...]: Fix spelling errors.\n\n\t* HACKING, gnu/gcj/xlib/Pixmap.java, gnu/gcj/xlib/XException.java,\n\tgnu/java/rmi/rmic/RMIC.java, java/awt/Window.java,\n\tjava/awt/AWTEvent.java, java/io/ByteArrayOutputStream.java,\n\tjava/io/CharConversionException.java,\n\tjava/io/PipedInputStream.java, java/io/PipedReader.java,\n\tjava/io/PrintWriter.java, java/io/WriteAbortedException.java,\n\tjava/io/natFileWin32.cc, java/lang/Class.h,\n\tjava/lang/natClassLoader.cc, java/lang/natObject.cc,\n\tjava/lang/Package.java, java/net/BindException.java,\n\tjava/net/ConnectException.java, java/net/ProtocolException.java,\n\tjava/net/SocketException.java,\n\tjava/net/UnknownServiceException.java,\n\tjava/security/cert/X509Certificate.java,\n\tjava/security/interfaces/DSAKey.java,\n\tjava/security/SecureRandom.java, java/security/SignedObject.java,\n\tjava/sql/DatabaseMetaData.java,\n\tjava/text/DecimalFormatSymbols.java,\n\tjava/util/jar/Attributes.java, java/util/jar/JarEntry.java,\n\tjava/util/jar/JarInputStream.java,\n\tjava/util/jar/JarOutputStream.java, java/util/Calendar.java,\n\tjava/util/Collections.java, java/util/GregorianCalendar.java,\n\tjava/util/HashMap.java, java/util/List.java,\n\tjava/util/Properties.java, java/util/Timer.java,\n\tjava/util/Vector.java, java/util/WeakHashMap.java,\n\tjavax/naming/NamingException.java,\n\ttestsuite/libjava.lang/Thread_Wait.java,\n\torg/xml/sax/helpers/DefaultHandler.java,\n\torg/xml/sax/HandlerBase.java, org/xml/sax/SAXParseException.java,\n\tChangeLog, acinclude.m4, aclocal.m4, posix-threads.cc: Fix\n\tspelling errors.\n\t* configure: Regenerate.\n\nFrom-SVN: r46665", "tree": {"sha": "5308302766b87f978a067f91b79c6b91b4198025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5308302766b87f978a067f91b79c6b91b4198025"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18e1f2bd67da8877099783f42634d8692bd80ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e1f2bd67da8877099783f42634d8692bd80ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e1f2bd67da8877099783f42634d8692bd80ec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e1f2bd67da8877099783f42634d8692bd80ec9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffc5527fa5cbb518a4bc564b87b8376f5206787f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc5527fa5cbb518a4bc564b87b8376f5206787f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffc5527fa5cbb518a4bc564b87b8376f5206787f"}], "stats": {"total": 218, "additions": 126, "deletions": 92}, "files": [{"sha": "cb12f6a4cad2b25c969b54bcd5d06ba023788abf", "filename": "libjava/ChangeLog", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -1,3 +1,37 @@\n+2001-10-31  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* HACKING, gnu/gcj/xlib/Pixmap.java, gnu/gcj/xlib/XException.java,\n+\tgnu/java/rmi/rmic/RMIC.java, java/awt/Window.java,\n+\tjava/awt/AWTEvent.java, java/io/ByteArrayOutputStream.java,\n+\tjava/io/CharConversionException.java,\n+\tjava/io/PipedInputStream.java, java/io/PipedReader.java,\n+\tjava/io/PrintWriter.java, java/io/WriteAbortedException.java,\n+\tjava/io/natFileWin32.cc, java/lang/Class.h,\n+\tjava/lang/natClassLoader.cc, java/lang/natObject.cc,\n+\tjava/lang/Package.java, java/net/BindException.java,\n+\tjava/net/ConnectException.java, java/net/ProtocolException.java,\n+\tjava/net/SocketException.java,\n+\tjava/net/UnknownServiceException.java,\n+\tjava/security/cert/X509Certificate.java,\n+\tjava/security/interfaces/DSAKey.java,\n+\tjava/security/SecureRandom.java, java/security/SignedObject.java,\n+\tjava/sql/DatabaseMetaData.java,\n+\tjava/text/DecimalFormatSymbols.java,\n+\tjava/util/jar/Attributes.java, java/util/jar/JarEntry.java,\n+\tjava/util/jar/JarInputStream.java,\n+\tjava/util/jar/JarOutputStream.java, java/util/Calendar.java,\n+\tjava/util/Collections.java, java/util/GregorianCalendar.java,\n+\tjava/util/HashMap.java, java/util/List.java,\n+\tjava/util/Properties.java, java/util/Timer.java,\n+\tjava/util/Vector.java, java/util/WeakHashMap.java,\n+\tjavax/naming/NamingException.java,\n+\ttestsuite/libjava.lang/Thread_Wait.java,\n+\torg/xml/sax/helpers/DefaultHandler.java,\n+\torg/xml/sax/HandlerBase.java, org/xml/sax/SAXParseException.java,\n+\tChangeLog, acinclude.m4, aclocal.m4, posix-threads.cc: Fix\n+\tspelling errors.\n+\t* configure: Regenerate.\n+\n 2001-10-30  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* jni.cc (JNI_CreateJavaVM): Call _Jv_CreateJavaVM. Don't call\n@@ -1236,7 +1270,7 @@ Tue Oct 23 23:52:18 2001  Anthony Green  <green@redhat.com>\n \tof _Jv_AttachCurrentThread.\n \t* gnu/gcj/runtime/FirstThread.java (FirstThread): Now extends Thread.\n \t(run): New method. Take care of looking up main class manifest\n-\tattribute and calling forName if neccessary. Then call call_main.\n+\tattribute and calling forName if necessary. Then call call_main.\n \t(call_main): New native method.\n \t* gnu/gcj/runtime/natFirstThread.cc (call_main): New function, code\n \trelocated from prims.cc. Look up and call main method.\n@@ -1784,7 +1818,7 @@ Tue Oct 23 23:52:18 2001  Anthony Green  <green@redhat.com>\n \t    Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* java/lang/natClass.cc (_Jv_IsAssignableFrom): Ensure that ancestors\n-\ttable index is within allowed bounds. Ensure that we dont try to access\n+\ttable index is within allowed bounds. Ensure that we don't try to access\n \tclass itable at a negative offset. Avoid an ancestor table lookup if\n \tsource is a primitive type class.\n \t(isInstance): Remove redundant isPrimitive() check.\n@@ -4788,7 +4822,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t* java/awt/Toolkit.java (systemEventQueue): Removed.\n \t(getDefaultToolkit): Default to \"gnu.awt.gtk.GtkToolkit\".\n \t* java/awt/Window.java (getToolkit): Don't call super.\n-\t* java/awt/image/BufferedImage.java: Fix definate assignment errors.\n+\t* java/awt/image/BufferedImage.java: Fix definite assignment errors.\n \t* java/awt/peer/ContainerPeer.java (insets): Remove unused method.\n \t* gnu/awt/gtk/GtkComponentPeer.java: New file.\n \t* gnu/awt/gtk/GtkContainerPeer.java: New file.\n@@ -5419,7 +5453,7 @@ Sat Aug 19 11:00:53 2000  Anthony Green  <green@redhat.com>\n \t* java/awt/image/BufferedImage.java: New file.\n \t* java/awt/image/RasterOp.java: New file.\n \t* java/awt/peer/ComponentPeer.java (getGraphicsConfiguration):\n-\tMore powerfull replacement for getColorModel().\n+\tMore powerful replacement for getColorModel().\n \t(getColorModel) Removed.\n \t(setEventMask) New method.\n \t* Makefile.am: Added new files."}, {"sha": "3f96b6f452996e559c1c11c1349d6fd90305b7fb", "filename": "libjava/HACKING", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2FHACKING", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2FHACKING", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FHACKING?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -40,7 +40,7 @@ Yup, you need the magic libgcj automake ;-)\n \n <ftp://ftp.freesoftware.com/.0/sourceware/java/automake-gcj-1.4.tar.gz>\n \n-Install that (dont worry, it should still work for other projects), add your\n+Install that (don't worry, it should still work for other projects), add your\n files to the Makefile.am, then just type \"automake\" and it will regenerate the\n Makefile.in. Easy!\n "}, {"sha": "a2034fccf8f2d045aade4432cc775e78dc315e70", "filename": "libjava/acinclude.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Facinclude.m4?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -9,7 +9,7 @@ AC_ARG_ENABLE(multilib,\n   *)   AC_MSG_ERROR(bad value ${enableval} for multilib option) ;;\n  esac], [multilib=yes])dnl\n \n-dnl We may get other options which we dont document:\n+dnl We may get other options which we don't document:\n dnl --with-target-subdir, --with-multisrctop, --with-multisubdir\n \n # When building with srcdir == objdir, links to the source files will\n@@ -61,7 +61,7 @@ version=0.0.7\n dnl Still use \"libjava\" here to placate dejagnu.\n AM_INIT_AUTOMAKE(libjava, $version)\n \n-# AC_CHECK_TOOL does AC_REQUIRE (AC_CANONICAL_BUILD).  If we dont\n+# AC_CHECK_TOOL does AC_REQUIRE (AC_CANONICAL_BUILD).  If we don't\n # run it explicitly here, it will be run implicitly before\n # LIBGCJ_CONFIGURE, which doesn't work because that means that it will\n # be run before AC_CANONICAL_HOST.\n@@ -80,7 +80,7 @@ AM_MAINTAINER_MODE\n # need to use $(EXEEXT).  Moreover, the test for EXEEXT normally\n # fails, because we are probably configuring with a cross compiler\n # which cant create executables.  So we include AC_EXEEXT to keep\n-# automake happy, but we dont execute it, since we dont care about\n+# automake happy, but we don't execute it, since we don't care about\n # the result.\n if false; then\n   # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands"}, {"sha": "406fa89d7ae8aaa554cc89796fe627bcb97ec1af", "filename": "libjava/aclocal.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Faclocal.m4?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -21,7 +21,7 @@ AC_ARG_ENABLE(multilib,\n   *)   AC_MSG_ERROR(bad value ${enableval} for multilib option) ;;\n  esac], [multilib=yes])dnl\n \n-dnl We may get other options which we dont document:\n+dnl We may get other options which we don't document:\n dnl --with-target-subdir, --with-multisrctop, --with-multisubdir\n \n # When building with srcdir == objdir, links to the source files will\n@@ -73,7 +73,7 @@ version=0.0.7\n dnl Still use \"libjava\" here to placate dejagnu.\n AM_INIT_AUTOMAKE(libjava, $version)\n \n-# AC_CHECK_TOOL does AC_REQUIRE (AC_CANONICAL_BUILD).  If we dont\n+# AC_CHECK_TOOL does AC_REQUIRE (AC_CANONICAL_BUILD).  If we don't\n # run it explicitly here, it will be run implicitly before\n # LIBGCJ_CONFIGURE, which doesn't work because that means that it will\n # be run before AC_CANONICAL_HOST.\n@@ -92,7 +92,7 @@ AM_MAINTAINER_MODE\n # need to use $(EXEEXT).  Moreover, the test for EXEEXT normally\n # fails, because we are probably configuring with a cross compiler\n # which cant create executables.  So we include AC_EXEEXT to keep\n-# automake happy, but we dont execute it, since we dont care about\n+# automake happy, but we don't execute it, since we don't care about\n # the result.\n if false; then\n   # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands"}, {"sha": "06c782ff37dc00f7fa451c61e8e6cc24e404fc2d", "filename": "libjava/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -1364,7 +1364,7 @@ fi\n \n \n \n-# AC_CHECK_TOOL does AC_REQUIRE (AC_CANONICAL_BUILD).  If we dont\n+# AC_CHECK_TOOL does AC_REQUIRE (AC_CANONICAL_BUILD).  If we don't\n # run it explicitly here, it will be run implicitly before\n # LIBGCJ_CONFIGURE, which doesn't work because that means that it will\n # be run before AC_CANONICAL_HOST.\n@@ -1613,7 +1613,7 @@ fi\n # need to use $(EXEEXT).  Moreover, the test for EXEEXT normally\n # fails, because we are probably configuring with a cross compiler\n # which cant create executables.  So we include AC_EXEEXT to keep\n-# automake happy, but we dont execute it, since we dont care about\n+# automake happy, but we don't execute it, since we don't care about\n # the result.\n if false; then\n   # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands"}, {"sha": "a514d95d52b876f91eebffaadf5f2c76f73b1234", "filename": "libjava/gnu/gcj/xlib/Pixmap.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fgnu%2Fgcj%2Fxlib%2FPixmap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fgnu%2Fgcj%2Fxlib%2FPixmap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FPixmap.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -24,7 +24,7 @@ public Pixmap(XImage image, Screen screen)\n     \n     /* FIXME: don't create a new GC all the time.  This might actually\n     not be as bad as initially believed.  The GC cache of Xlib makes\n-    this opertation less costly. */\n+    this operation less costly. */\n     GC gc = new GC(this);\n     \n     gc.putImage(image, 0, 0, 0, 0, image.getWidth(), image.getHeight());"}, {"sha": "32adfc14697a5f00883faddf33284ffa351ed011", "filename": "libjava/gnu/gcj/xlib/XException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fgnu%2Fgcj%2Fxlib%2FXException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fgnu%2Fgcj%2Fxlib%2FXException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FXException.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -9,7 +9,7 @@\n package gnu.gcj.xlib;\n \n /**\n- * Runtime exception that occured during an Xlib opertation. \n+ * Runtime exception that occurred during an Xlib operation. \n  *\n  * @author Rolf W. Rasmussen <rolfwr@ii.uib.no>\n  */"}, {"sha": "1ad0ffb65a1016deed89aeb94ae1ac92f4570e21", "filename": "libjava/gnu/java/rmi/rmic/RMIC.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fgnu%2Fjava%2Frmi%2Frmic%2FRMIC.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fgnu%2Fjava%2Frmi%2Frmic%2FRMIC.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Frmic%2FRMIC.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -647,7 +647,7 @@ private void generateSkel() throws IOException {\n \n \tout.println();\n \n-\t// getOpertions method\n+\t// getOperations method\n \tout.print(\"public java.rmi.server.Operation[] getOperations() {\");\n \tctrl.indent();\n \tout.print(\"return ((java.rmi.server.Operation[]) operations.clone());\");"}, {"sha": "0717f6dda4c8bf40f002461fc2340e967d0af565", "filename": "libjava/java/awt/AWTEvent.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fawt%2FAWTEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fawt%2FAWTEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FAWTEvent.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -17,7 +17,7 @@\n \n /**\n  * AWTEvent is the root event class for all AWT events in the JDK 1.1 event \n- * model. It supercedes the Event class from JDK 1.0.\n+ * model. It supersedes the Event class from JDK 1.0.\n  */\n \n public abstract class AWTEvent extends java.util.EventObject"}, {"sha": "ef661bd959981388bf3d8278feed2493a43ca380", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -143,7 +143,7 @@ public void show ()\n     \n     super.show ();\n \n-    // FIXME: Is this call neccessary or do we assume the peer takes care of \n+    // FIXME: Is this call necessary or do we assume the peer takes care of \n     // it?\n     // this.toFront();\n   }"}, {"sha": "65a98ae40db7ff190057cb0059ea4578e0a00f75", "filename": "libjava/java/io/ByteArrayOutputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FByteArrayOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FByteArrayOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FByteArrayOutputStream.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -186,7 +186,7 @@ public String toString (int hibyte)\n     return new String (buf, 0, count, hibyte);\n   }\n \n-  // Resize buffer to accomodate new bytes.\n+  // Resize buffer to accommodate new bytes.\n   private void resize (int add)\n   {\n     if (count + add >= buf.length)"}, {"sha": "b4fe77a6d571776067485f7c321bc2ec93656c4e", "filename": "libjava/java/io/CharConversionException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FCharConversionException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FCharConversionException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FCharConversionException.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -33,7 +33,7 @@\n  */\n \n /**\n-  * This exception is thrown to indicate that a problem occured with\n+  * This exception is thrown to indicate that a problem occurred with\n   * an attempted character conversion.\n   *\n   * @version 0.0"}, {"sha": "5f2bf6fb711744eb7d289301aa1a2e068f14df1d", "filename": "libjava/java/io/PipedInputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FPipedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FPipedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedInputStream.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -194,7 +194,7 @@ synchronized void receive(byte[] buf, int offset, int len)\n \telse\n \t  copylen = Math.min (len, buffer.length - in);\n \n-\t// Copy bytes until the pipe is filled, wrapping if neccessary.\n+\t// Copy bytes until the pipe is filled, wrapping if necessary.\n \tSystem.arraycopy(buf, bufpos, buffer, in, copylen);\n \tlen -= copylen;\n \tbufpos += copylen;"}, {"sha": "48c18ab0ae52aca8ddd1f7ea9f4ad45649379e47", "filename": "libjava/java/io/PipedReader.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FPipedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FPipedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedReader.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -181,7 +181,7 @@ void receive(char[] buf, int offset, int len)\n \t  else\n \t    copylen = Math.min (len, buffer.length - in);\n \n-\t  // Copy chars until the pipe is filled, wrapping if neccessary.\n+\t  // Copy chars until the pipe is filled, wrapping if necessary.\n \t  System.arraycopy(buf, bufpos, buffer, in, copylen);\n \t  len -= copylen;\n \t  bufpos += copylen;"}, {"sha": "3a4f73f768c2d8ea37ed7c6ea1ecd76618f8c19d", "filename": "libjava/java/io/PrintWriter.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FPrintWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FPrintWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPrintWriter.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -57,7 +57,7 @@ public class PrintWriter extends Writer\n   private boolean autoflush;\n \n   /**\n-   * This boolean indicates whether or not an error has ever occured\n+   * This boolean indicates whether or not an error has ever occurred\n    * on this stream.\n    */\n   private boolean error;"}, {"sha": "f73d59023588427a1f7ae6d61998fc4bc0a739b9", "filename": "libjava/java/io/WriteAbortedException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FWriteAbortedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FWriteAbortedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FWriteAbortedException.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -1,4 +1,4 @@\n-/* WriteAbortedException.java -- An exception occured while writing a \n+/* WriteAbortedException.java -- An exception occurred while writing a \n    serialization stream\n    Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n "}, {"sha": "7e731267386cff45b29d41a8d5dadc601691d728", "filename": "libjava/java/io/natFileWin32.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileWin32.cc?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -84,7 +84,7 @@ java::io::File::attr (jint query)\n   if (query == LENGTH)\n     return ((long long)info.nFileSizeHigh) << 32 | (unsigned long long)info.nFileSizeLow;\n   else {\n-    // FIXME? This is somewhat compiler dependant (the LL constant suffix)\n+    // FIXME? This is somewhat compiler dependent (the LL constant suffix)\n     // The file time as return by windows is the number of 100-nanosecond intervals since January 1, 1601\n     return (((((long long)info.ftLastWriteTime.dwHighDateTime) << 32) | ((unsigned long long)info.ftLastWriteTime.dwLowDateTime)) - 116444736000000000LL) / 10000LL;\n   }"}, {"sha": "f84f363df5ec1b775ed14c8bdb3985028df294ef", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -305,7 +305,7 @@ class java::lang::Class : public java::lang::Object\n   friend jshort _Jv_FindIIndex (jclass *, jshort *, jshort);\n \n   // Return array class corresponding to element type KLASS, creating it if\n-  // neccessary.\n+  // necessary.\n   inline friend jclass\n   _Jv_GetArrayClass (jclass klass, java::lang::ClassLoader *loader)\n   {"}, {"sha": "e7ca66876fabf264105ad74d04838e3854a22322", "filename": "libjava/java/lang/Package.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Flang%2FPackage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Flang%2FPackage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FPackage.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -39,7 +39,7 @@\n  * <a href=\"http://java.sun.com/products/jdk/1.3/docs/guide/versioning/spec/VersioningSpecification.html\">Product Versioning Specification</a>.\n  * It also allows packages to be sealed with respect to the originating URL.\n  * <p>\n- * The most usefull method is the <code>isCompatibleWith()</code> method that\n+ * The most useful method is the <code>isCompatibleWith()</code> method that\n  * compares a desired version of a specification with the version of the\n  * specification as implemented by a package. A package is considered\n  * compatible with another version if the version of the specification is"}, {"sha": "d94055e1cf0e40df19a5d1cea42c531cc1e777df", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -657,7 +657,7 @@ _Jv_NewArrayClass (jclass element, java::lang::ClassLoader *loader,\n   array_class->interface_count = sizeof interfaces / sizeof interfaces[0];\n \n   // Since all array classes have the same interface dispatch table, we can \n-  // cache one and reuse it. It is not neccessary to synchronize this.\n+  // cache one and reuse it. It is not necessary to synchronize this.\n   if (!array_idt)\n     {\n       _Jv_PrepareConstantTimeTables (array_class);"}, {"sha": "816268c4f37e9a09e2c11b83e0394d9515fabe28", "filename": "libjava/java/lang/natObject.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Flang%2FnatObject.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Flang%2FnatObject.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatObject.cc?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -746,7 +746,7 @@ heavy_lock_obj_finalization_proc (void *obj, void *cd)\n       // heavy lock.  Unlink it and, if necessary, register a finalizer\n       // to destroy sync_info.\n       unlink_heavy(addr, he);\n-      hl -> address = 0; \t// Dont destroy it again.\n+      hl -> address = 0; \t// Don't destroy it again.\n       release_set(&(he -> address), he_address);\n #     if defined (_Jv_HaveCondDestroy) || defined (_Jv_HaveMutexDestroy)\n         // Make sure lock is not held and then destroy condvar and mutex."}, {"sha": "7fb5cfdd094f98495cd111426577b6b683c8ce29", "filename": "libjava/java/net/BindException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fnet%2FBindException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fnet%2FBindException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FBindException.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -1,4 +1,4 @@\n-/* BindException.java -- An exception occured while binding to a socket\n+/* BindException.java -- An exception occurred while binding to a socket\n    Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -33,7 +33,7 @@\n  */\n \n /**\n-  * This exception indicates that an error occured while attempting to bind\n+  * This exception indicates that an error occurred while attempting to bind\n   * socket to a particular port.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)"}, {"sha": "fc234a576a48d479802580ca9b3402acf6df401b", "filename": "libjava/java/net/ConnectException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fnet%2FConnectException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fnet%2FConnectException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FConnectException.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -1,4 +1,4 @@\n-/* ConnectException.java -- An exception occured while connecting to a host\n+/* ConnectException.java -- An exception occurred while connecting to a host\n    Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -34,7 +34,7 @@\n  */\n \n /**\n-  * This exception indicates that an error occured while attempting to\n+  * This exception indicates that an error occurred while attempting to\n   * connect to a remote host.  Often this indicates that the remote host\n   * refused the connection (ie, is not listening on the target socket).\n   *"}, {"sha": "9c921e6e7271fe436895d63708e7cd864d2f60da", "filename": "libjava/java/net/ProtocolException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fnet%2FProtocolException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fnet%2FProtocolException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FProtocolException.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -1,4 +1,4 @@\n-/* ProtocolException.java -- A low level protocol error occured\n+/* ProtocolException.java -- A low level protocol error occurred\n    Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -34,7 +34,7 @@\n \n /**\n   * This exception indicates that some sort of low level protocol\n-  * exception occured.  Look in the descriptive message (if any) for\n+  * exception occurred.  Look in the descriptive message (if any) for\n   * details on what went wrong\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)"}, {"sha": "3520d4b92c17b6d2c0c94d28cfc33ede5379cb66", "filename": "libjava/java/net/SocketException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fnet%2FSocketException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fnet%2FSocketException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketException.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -1,4 +1,4 @@\n-/* SocketException.java -- An exception occured while performing a socket op\n+/* SocketException.java -- An exception occurred while performing a socket op\n    Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -31,7 +31,7 @@\n  */\n \n /**\n-  * This exception indicates that a generic error occured related to an\n+  * This exception indicates that a generic error occurred related to an\n   * operation on a socket.  Check the descriptive message (if any) for\n   * details on the nature of this error\n   *"}, {"sha": "b890d2bc0e0461a9a6e9c5c30d77b20344730c68", "filename": "libjava/java/net/UnknownServiceException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fnet%2FUnknownServiceException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fnet%2FUnknownServiceException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FUnknownServiceException.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -1,4 +1,4 @@\n-/* UnknownServiceException.java -- A service error occured\n+/* UnknownServiceException.java -- A service error occurred\n    Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath."}, {"sha": "00fdca260924aa1227a7d7845634bfdb09e36ff9", "filename": "libjava/java/security/SecureRandom.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fsecurity%2FSecureRandom.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fsecurity%2FSecureRandom.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureRandom.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -55,7 +55,7 @@ public class SecureRandom extends Random\n      It is not seeded and should be seeded using setSeed or else\n      on the first call to getnextBytes it will force a seed.\n \n-     It is maintained for backwards compatability and programs\n+     It is maintained for backwards compatibility and programs\n      should use getInstance.\n    */\n   public SecureRandom()\n@@ -115,7 +115,7 @@ public SecureRandom()\n      It is seeded with the passed function and is useful if the user\n      has access to hardware random device (like a radiation detector).\n \n-     It is maintained for backwards compatability and programs\n+     It is maintained for backwards compatibility and programs\n      should use getInstance.\n \n      @param seed Seed bytes for class"}, {"sha": "40aeba794a707269b561023e7cd8f68bf48cadd5", "filename": "libjava/java/security/SignedObject.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fsecurity%2FSignedObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fsecurity%2FSignedObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSignedObject.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -80,7 +80,7 @@ public final class SignedObject implements Serializable\n      @param signingKey the key to sign with\n      @param signingEngine the signature engine to use\n \n-     @throws IOException serialization error occured\n+     @throws IOException serialization error occurred\n      @throws InvalidKeyException invalid key\n      @throws SignatureException signing error\n    */\n@@ -108,8 +108,8 @@ public SignedObject(Serializable object, PrivateKey signingKey,\n \n      @return the encapsulated object\n \n-     @throws IOException de-serialization error occured\n-     @throws ClassNotFoundException de-serialization error occured\n+     @throws IOException de-serialization error occurred\n+     @throws ClassNotFoundException de-serialization error occurred\n    */\n   public Object getObject() throws IOException, ClassNotFoundException\n   {"}, {"sha": "db51964656b43bc8bc35942cdc06b81e3053db51", "filename": "libjava/java/security/cert/X509Certificate.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fsecurity%2Fcert%2FX509Certificate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fsecurity%2Fcert%2FX509Certificate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FX509Certificate.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -288,7 +288,7 @@ Returns the subject (subject distinguished name) of the\n \n      @return the DER encoded tbsCertificate\n \n-     @throws CertificateEncodingException if encoding error occured\n+     @throws CertificateEncodingException if encoding error occurred\n   */\n   public abstract byte[] getTBSCertificate() throws CertificateEncodingException;\n "}, {"sha": "06fdec15d349b7df9d68c94673e66d96c52532b7", "filename": "libjava/java/security/interfaces/DSAKey.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -1,4 +1,4 @@\n-/* DSAKey.java -- Interface for Digital Signature Algorith key\n+/* DSAKey.java -- Interface for Digital Signature Algorithm key\n    Copyright (C) 1998 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath."}, {"sha": "2340d31338b960479c5e2257644efb6555b243d7", "filename": "libjava/java/sql/DatabaseMetaData.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -47,7 +47,7 @@\n public static final int bestRowNotPseudo = 1;\n \n /**\n-  * The best row identifer is a pseudo-column.\n+  * The best row identifier is a pseudo-column.\n   */\n public static final int bestRowPseudo = 2;\n \n@@ -58,12 +58,12 @@\n public static final int bestRowTemporary = 0;\n \n /**\n-  * The best row identifer is valid to the end of the transaction.\n+  * The best row identifier is valid to the end of the transaction.\n   */\n public static final int bestRowTransaction = 1;\n \n /**\n-  * The best row identifer is valid to the end of the session.\n+  * The best row identifier is valid to the end of the session.\n   */\n public static final int bestRowSession = 2;\n \n@@ -2696,7 +2696,7 @@\n   * <li>TYPE_SCEHM - The schema name, which may be <code>null</code>.\n   * <li>TYPE_NAME - The user defined data type name.\n   * <li>CLASS_NAME - The Java class name this type maps to.\n-  * <li>DATA_TYPE - A type identifer from <code>Types</code> for this type.\n+  * <li>DATA_TYPE - A type identifier from <code>Types</code> for this type.\n   * This will be one of <code>JAVA_OBJECT</code>, <code>STRUCT</code>, or\n   * <code>DISTINCT</code>.\n   * <li>REMARKS - Comments about this data type.\n@@ -2708,7 +2708,7 @@\n   * @param schema The schema to retrieve information from, or the empty string\n   * to return entities not associated with a schema.\n   * @param typePattern The type name pattern to match.\n-  * @param types The type identifer patterns (from <code>Types</code>) to\n+  * @param types The type identifier patterns (from <code>Types</code>) to\n   * match.\n   *\n   * @return A <code>ResultSet</code> with the requested type information"}, {"sha": "7bdae5d6b2937860a470a059b10f7cbf1fe71075", "filename": "libjava/java/text/DecimalFormatSymbols.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -476,7 +476,7 @@ public void setPerMill (char perMill)\n   }\n \n   /**\n-   * This method sets the charcter used to represen the digit zero.\n+   * This method sets the character used to represent the digit zero.\n    *\n    * @param zeroDigit The character used to represent the digit zero.\n    */"}, {"sha": "a807a361623f545d6afb6fea6b2b085c1f039ef3", "filename": "libjava/java/util/Calendar.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FCalendar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FCalendar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCalendar.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -445,7 +445,7 @@ public static synchronized Calendar getInstance(TimeZone zone, Locale locale)\n   }\n \n   /**\n-   * Gets the set of locales for which a Calendar is availiable.\n+   * Gets the set of locales for which a Calendar is available.\n    * @exception MissingResourceException if locale data couldn't be found.\n    * @return the set of locales.\n    */\n@@ -682,7 +682,7 @@ protected void complete()\n    * Compares the given calendar with this.  \n    * @param o the object to that we should compare.\n    * @return true, if the given object is a calendar, that represents\n-   * the same time (but doesn't neccessary have the same fields).\n+   * the same time (but doesn't necessary have the same fields).\n    */\n   public boolean equals(Object o)\n   {\n@@ -892,7 +892,7 @@ public int getMinimalDaysInFirstWeek()\n \n   /**\n    * Gets the actual minimum value that is allowed for the specified field.\n-   * This value is dependant on the values of the other fields.\n+   * This value is dependent on the values of the other fields.\n    * @param field the time field. One of the time field constants.\n    * @return the actual minimum value.\n    * @since jdk1.2\n@@ -902,7 +902,7 @@ public int getMinimalDaysInFirstWeek()\n \n   /**\n    * Gets the actual maximum value that is allowed for the specified field.\n-   * This value is dependant on the values of the other fields.\n+   * This value is dependent on the values of the other fields.\n    * @param field the time field. One of the time field constants.\n    * @return the actual maximum value.  \n    * @since jdk1.2"}, {"sha": "8e77a8024760a57f59ab79c5f2c1bfd5226ae8eb", "filename": "libjava/java/util/Collections.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FCollections.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FCollections.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCollections.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -538,7 +538,7 @@ public static void shuffle(List l)\n \n   /** Cache a single Random object for use by shuffle(List). This improves\n     * performance as well as ensuring that sequential calls to shuffle() will\n-    * not result in the same shuffle order occuring: the resolution of \n+    * not result in the same shuffle order occurring: the resolution of \n     * System.currentTimeMillis() is not sufficient to guarantee a unique seed.\n     */\n   private static Random defaultRandom = null;"}, {"sha": "f2141e0c599249ae210023a261bafabe66423a5f", "filename": "libjava/java/util/GregorianCalendar.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FGregorianCalendar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FGregorianCalendar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FGregorianCalendar.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -216,7 +216,7 @@ public boolean isLeapYear(int year)\n    * Get the linear time in milliseconds since the epoch.  If you\n    * specify a nonpositive year it is interpreted as BC as\n    * following: 0 is 1 BC, -1 is 2 BC and so on.  The date is\n-   * interpreted as gregorian if the change occured before that date.\n+   * interpreted as gregorian if the change occurred before that date.\n    *\n    * @param year the year of the date.\n    * @param dayOfYear the day of year of the date; 1 based.\n@@ -627,7 +627,7 @@ protected synchronized void computeFields()\n    * Compares the given calender with this.  \n    * @param o the object to that we should compare.\n    * @return true, if the given object is a calendar, that represents\n-   * the same time (but doesn't neccessary have the same fields).\n+   * the same time (but doesn't necessary have the same fields).\n    * @XXX Should we check if time zones, locale, cutover etc. are equal?\n    */\n   public boolean equals(Object o)\n@@ -973,7 +973,7 @@ public int getLeastMaximum(int field)\n \n   /**\n    * Gets the actual minimum value that is allowed for the specified field.\n-   * This value is dependant on the values of the other fields.  Note that\n+   * This value is dependent on the values of the other fields.  Note that\n    * this calls <code>complete()</code> if not enough fields are set.  This\n    * can have ugly side effects.\n    * @param field the time field. One of the time field constants.\n@@ -1001,7 +1001,7 @@ public int getActualMinimum(int field)\n \n   /**\n    * Gets the actual maximum value that is allowed for the specified field.\n-   * This value is dependant on the values of the other fields.  Note that\n+   * This value is dependent on the values of the other fields.  Note that\n    * this calls <code>complete()</code> if not enough fields are set.  This\n    * can have ugly side effects.\n    * @param field the time field. One of the time field constants."}, {"sha": "3b351058a95929057eb75babac6af4348772216e", "filename": "libjava/java/util/HashMap.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FHashMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FHashMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FHashMap.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -505,7 +505,7 @@ public boolean contains(Object o)\n       public boolean remove(Object o)\n       {\n         // Test against the size of the HashMap to determine if anything\n-        // really got removed. This is neccessary because the return value of\n+        // really got removed. This is necessary because the return value of\n         // HashMap.remove() is ambiguous in the null case.\n         int oldsize = size;\n         HashMap.this.remove(o);"}, {"sha": "f2ee49cd2606a1b662bd08ffe06af60b3be1cc5d", "filename": "libjava/java/util/List.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FList.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -288,7 +288,7 @@ public interface List extends Collection\n   Object remove(int index);\n \n   /**\n-   * Remove the first occurence of an object from this list (optional\n+   * Remove the first occurrence of an object from this list (optional\n    * operation). That is, remove the first element e such that\n    * <code>o == null ? e == null : o.equals(e)</code>.\n    *"}, {"sha": "ee39a01b5303f90c5f807ee9c428ad5bce0eaa2c", "filename": "libjava/java/util/Properties.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FProperties.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FProperties.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FProperties.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -125,7 +125,7 @@ public Properties(Properties defaults)\n    * </pre>\n    *\n    * @param in the input stream\n-   * @exception IOException if an error occured when reading\n+   * @exception IOException if an error occurred when reading\n    * from the input.  */\n   public void load(InputStream inStream) throws IOException\n   {"}, {"sha": "32c0bea3b3f7dec1d985f4497ed971cd5c1febe8", "filename": "libjava/java/util/Timer.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FTimer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FTimer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FTimer.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -39,8 +39,8 @@\n  * scheduling guarantees more or less that the task will be executed at a\n  * specific time, but if there is ever a delay in execution then the period\n  * between successive executions will be shorter. The first method of\n- * repeated scheduling is prefered for repeated tasks in response to user\n- * interaction, the second method of repeated scheduling is prefered for tasks\n+ * repeated scheduling is preferred for repeated tasks in response to user\n+ * interaction, the second method of repeated scheduling is preferred for tasks\n  * that act like alarms.\n  * <p>\n  * The Timer keeps a binary heap as a task priority queue which means that\n@@ -65,7 +65,7 @@\n     /** Default size of this queue */\n     private final int DEFAULT_SIZE = 32;\n \n-    /** Wheter to return null when there is nothing in the queue */\n+    /** Whether to return null when there is nothing in the queue */\n     private boolean nullOnEmpty;\n \n     /**\n@@ -375,7 +375,7 @@ public void run()\n   private boolean canceled;\n \n   /**\n-   * Creates a new Timer with a non deamon Thread as Scheduler, with normal\n+   * Creates a new Timer with a non daemon Thread as Scheduler, with normal\n    * priority and a default name.\n    */\n   public Timer()\n@@ -384,7 +384,7 @@ public Timer()\n   }\n \n   /**\n-   * Creates a new Timer with a deamon Thread as scheduler if deamon is true,\n+   * Creates a new Timer with a daemon Thread as scheduler if daemon is true,\n    * with normal priority and a default name.\n    */\n   public Timer(boolean daemon)\n@@ -393,7 +393,7 @@ public Timer(boolean daemon)\n   }\n \n   /**\n-   * Creates a new Timer with a deamon Thread as scheduler if deamon is true,\n+   * Creates a new Timer with a daemon Thread as scheduler if daemon is true,\n    * with the priority given and a default name.\n    */\n   private Timer(boolean daemon, int priority)\n@@ -402,7 +402,7 @@ private Timer(boolean daemon, int priority)\n   }\n \n   /**\n-   * Creates a new Timer with a deamon Thread as scheduler if deamon is true,\n+   * Creates a new Timer with a daemon Thread as scheduler if daemon is true,\n    * with the priority and name given.E\n    */\n   private Timer(boolean daemon, int priority, String name)"}, {"sha": "cef84e51e720dc6aa08f50d90ffb25da4d4e5de9", "filename": "libjava/java/util/Vector.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FVector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FVector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FVector.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -32,7 +32,7 @@\n /**\n  * the <b>Vector</b> classes implements growable arrays of Objects.\n  * You can access elements in a Vector with an index, just as you\n- * can in a built in array, but Vectors can grow and shrink to accomodate\n+ * can in a built in array, but Vectors can grow and shrink to accommodate\n  * more or fewer objects.  \n  *\n  * Vectors try to mantain efficiency in growing by having a\n@@ -244,12 +244,12 @@ public boolean isEmpty()\n \n   /**\n    * Searches the vector starting at <b>index</b> for object <b>elem</b>\n-   * and returns the index of the first occurence of this Object.  If\n+   * and returns the index of the first occurrence of this Object.  If\n    * the object is not found, -1 is returned\n    *\n    * @param e The Object to search for\n    * @param index Start searching at this index\n-   * @returns The index of the first occurence of <b>elem</b>, or -1\n+   * @returns The index of the first occurrence of <b>elem</b>, or -1\n    * if it is not found\n    */\n   public synchronized int indexOf(Object e, int index)\n@@ -263,11 +263,11 @@ public synchronized int indexOf(Object e, int index)\n   }\n \n   /**\n-   * Returns the first occurence of <b>elem</b> in the Vector, or -1 if\n+   * Returns the first occurrence of <b>elem</b> in the Vector, or -1 if\n    * <b>elem</b> is not found.\n    *\n    * @param elem The object to search for\n-   * @returns The index of the first occurence of <b>elem</b> or -1 if \n+   * @returns The index of the first occurrence of <b>elem</b> or -1 if \n    * not found\n    */\n   public int indexOf(Object elem)\n@@ -287,7 +287,7 @@ public boolean contains(Object elem)\n   }\n \n   /**\n-   * Returns the index of the first occurence of <b>elem</b>, when searching\n+   * Returns the index of the first occurrence of <b>elem</b>, when searching\n    * backwards from <b>index</b>.  If the object does not occur in this Vector,\n    * -1 is returned.\n    *\n@@ -465,7 +465,7 @@ public synchronized void addElement(Object obj)\n   }\n \n   /**\n-   * Removes the first occurence of the given object from the Vector.\n+   * Removes the first occurrence of the given object from the Vector.\n    * If such a remove was performed (the object was found), true is returned.\n    * If there was no such object, false is returned.\n    *"}, {"sha": "6f39d46810873377d04e7137f740373cab76fd8c", "filename": "libjava/java/util/WeakHashMap.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FWeakHashMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2FWeakHashMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FWeakHashMap.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -615,7 +615,7 @@ private void internalRemove(WeakBucket bucket)\n       {\n \tWeakBucket prev = buckets[slot];\n \t/* This may throw a NullPointerException.  It shouldn't but if\n-\t * a race condition occured (two threads removing the same\n+\t * a race condition occurred (two threads removing the same\n \t * bucket at the same time) it may happen.  <br>\n \t * But with race condition many much worse things may happen\n \t * anyway."}, {"sha": "ce1c9abaa2c6ece094e2fb1cadecd7cc2c029aee", "filename": "libjava/java/util/jar/Attributes.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2Fjar%2FAttributes.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2Fjar%2FAttributes.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fjar%2FAttributes.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -45,7 +45,7 @@\n  * manipulating the Attributes more or less type safe.\n  * <p>\n  * Most of the methods are wrappers to implement the Map interface. The really\n- * usefull and often used methods are <code>getValue(Name)</code> and\n+ * useful and often used methods are <code>getValue(Name)</code> and\n  * <code>getValue(String)</code>. If you actually want to set attributes you\n  * may want to use the <code>putValue(String, String)</code> method\n  * (sorry there is no public type safe <code>putValue(Name, String)</code>"}, {"sha": "fa27169d57143a533e153e70de07b07087e52f6c", "filename": "libjava/java/util/jar/JarEntry.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2Fjar%2FJarEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2Fjar%2FJarEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fjar%2FJarEntry.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -46,7 +46,7 @@\n \n public class JarEntry extends ZipEntry\n {\n-  // (Packge local) fields\n+  // (Package local) fields\n \n   Attributes attr;\n   Certificate certs[];"}, {"sha": "f077f1be6e98a13804a6bf9c50c4cb48ebbc2770", "filename": "libjava/java/util/jar/JarInputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2Fjar%2FJarInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2Fjar%2FJarInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fjar%2FJarInputStream.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -75,7 +75,7 @@ public JarInputStream(InputStream in) throws IOException\n    * tries to verify all the entry signatures while reading.\n    *\n    * @param in InputStream to read the jar from\n-   * @param verify wheter or not to verify the manifest entries\n+   * @param verify whether or not to verify the manifest entries\n    * @exception IOException when an error occurs when opening or reading\n    */\n   public JarInputStream(InputStream in, boolean verify) throws IOException"}, {"sha": "c073819f54acc151bb859d4aafeedcbeac8faa6a", "filename": "libjava/java/util/jar/JarOutputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2Fjar%2FJarOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjava%2Futil%2Fjar%2FJarOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fjar%2FJarOutputStream.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -93,7 +93,7 @@ private void writeManifest(Manifest manifest) throws IOException\n    * This implementation just calls <code>super.putNextEntre()</code>.\n    *\n    * @param entry The information for the next entry\n-   * @exception IOException when some unexpected I/O exception occured\n+   * @exception IOException when some unexpected I/O exception occurred\n    */\n   public void putNextEntry(ZipEntry entry) throws IOException\n   {"}, {"sha": "08f2e6b82f9ce6d13bcabbd8e828042891949766", "filename": "libjava/javax/naming/NamingException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjavax%2Fnaming%2FNamingException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fjavax%2Fnaming%2FNamingException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FNamingException.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -36,7 +36,7 @@\n  * <code>NamingException</code>), the part of the <code>Name</code> that\n  * could be resolved (including the <code>Object</code> it resolved to)\n  * and the part of the <code>Name</code> that could not be resolved when\n- * the exception occured.\n+ * the exception occurred.\n  *\n  * @since 1.3\n  * @author Anthony Green (green@redhat.com)"}, {"sha": "34a8f7675d9c138e803732e2c15217e365d78ed3", "filename": "libjava/org/xml/sax/HandlerBase.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Forg%2Fxml%2Fsax%2FHandlerBase.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Forg%2Fxml%2Fsax%2FHandlerBase.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FHandlerBase.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -58,7 +58,7 @@\n      * in a subclass to do special translations such as catalog lookups\r\n      * or URI redirection.</p>\r\n      *\r\n-     * @param publicId The public identifer, or null if none is\r\n+     * @param publicId The public identifier, or null if none is\r\n      *                 available.\r\n      * @param systemId The system identifier provided in the XML \r\n      *                 document.\r"}, {"sha": "a5dcc06f0fb00362bb0f8ad997028f9da1459eeb", "filename": "libjava/org/xml/sax/SAXParseException.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Forg%2Fxml%2Fsax%2FSAXParseException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Forg%2Fxml%2Fsax%2FSAXParseException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FSAXParseException.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -100,9 +100,9 @@ public SAXParseException (String message, Locator locator,\n      * fully before creating the exception.</p>\r\n      *\r\n      * @param message The error or warning message.\r\n-     * @param publicId The public identifer of the entity that generated\r\n+     * @param publicId The public identifier of the entity that generated\r\n      *                 the error or warning.\r\n-     * @param systemId The system identifer of the entity that generated\r\n+     * @param systemId The system identifier of the entity that generated\r\n      *                 the error or warning.\r\n      * @param lineNumber The line number of the end of the text that\r\n      *                   caused the error or warning.\r\n@@ -130,9 +130,9 @@ public SAXParseException (String message, String publicId, String systemId,\n      *\r\n      * @param message The error or warning message, or null to use\r\n      *                the message from the embedded exception.\r\n-     * @param publicId The public identifer of the entity that generated\r\n+     * @param publicId The public identifier of the entity that generated\r\n      *                 the error or warning.\r\n-     * @param systemId The system identifer of the entity that generated\r\n+     * @param systemId The system identifier of the entity that generated\r\n      *                 the error or warning.\r\n      * @param lineNumber The line number of the end of the text that\r\n      *                   caused the error or warning.\r"}, {"sha": "957d44d882e37d2ce624c32870b49128232372cb", "filename": "libjava/org/xml/sax/helpers/DefaultHandler.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FDefaultHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FDefaultHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FDefaultHandler.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -71,7 +71,7 @@\n      * in a subclass to do special translations such as catalog lookups\r\n      * or URI redirection.</p>\r\n      *\r\n-     * @param publicId The public identifer, or null if none is\r\n+     * @param publicId The public identifier, or null if none is\r\n      *                 available.\r\n      * @param systemId The system identifier provided in the XML \r\n      *                 document.\r"}, {"sha": "f068fbab53debb733e9214932fa6c8a37d7ea403", "filename": "libjava/posix-threads.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fposix-threads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Fposix-threads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix-threads.cc?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -161,7 +161,7 @@ _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu,\n   mu->owner = self;\n   mu->count = count;\n \n-  // If we were interrupted, or if a timeout occured, remove ourself from\n+  // If we were interrupted, or if a timeout occurred, remove ourself from\n   // the cv wait list now. (If we were notified normally, notify() will have\n   // already taken care of this)\n   if (r == ETIMEDOUT || interrupted)"}, {"sha": "a6492821b4b3a1bad42419791debb6e2aadaf902", "filename": "libjava/testsuite/libjava.lang/Thread_Wait.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e1f2bd67da8877099783f42634d8692bd80ec9/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_Wait.java?ref=18e1f2bd67da8877099783f42634d8692bd80ec9", "patch": "@@ -20,7 +20,7 @@ public Thread_Wait()\n     }\n     catch (Exception x)\n     {\n-      System.out.println(\"exception occured: \" + x);\n+      System.out.println(\"exception occurred: \" + x);\n     }\n \n     synchronized (this)\n@@ -41,7 +41,7 @@ public void run()\n       }\n       catch (Exception x)\n       {\n-        System.out.println(\"exception occured: \" + x);\n+        System.out.println(\"exception occurred: \" + x);\n       }\n     }    \n     System.out.println (\"thread notified okay\");"}]}