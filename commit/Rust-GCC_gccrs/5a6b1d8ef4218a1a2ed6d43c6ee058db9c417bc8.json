{"sha": "5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE2YjFkOGVmNDIxOGExYTJlZDZkNDNjNmVlMDU4ZGI5YzQxN2JjOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-30T08:16:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-30T08:16:45Z"}, "message": "openmp: Handle non-static data members in allocate clause and other C++ allocate fixes\n\nThis allows specification of non-static data members in allocate clause like it\ncan be specified in other privatization clauses and adds a new testcase that covers\nalso handling of that clause in templates.\n\n2020-10-30  Jakub Jelinek  <jakub@redhat.com>\n\n\t* semantics.c (finish_omp_clauses) <case OMP_CLAUSE_ALLOCATE>: Handle\n\tnon-static members in methods.\n\t* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_ALLOCATE.\n\n\t* c-c++-common/gomp/allocate-1.c (qux): Add another test.\n\t* g++.dg/gomp/allocate-1.C: New test.", "tree": {"sha": "cb6feb912772a61d80a954d525c48a08da8aa7c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb6feb912772a61d80a954d525c48a08da8aa7c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "973574465ca250ed9af5c229a8a3a6b05fde9ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973574465ca250ed9af5c229a8a3a6b05fde9ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973574465ca250ed9af5c229a8a3a6b05fde9ca0"}], "stats": {"total": 130, "additions": 117, "deletions": 13}, "files": [{"sha": "aa162d2a4f9f9f858db1ae8c32a24ff780b93899", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8", "patch": "@@ -17390,6 +17390,7 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \t  case OMP_CLAUSE_IS_DEVICE_PTR:\n \t  case OMP_CLAUSE_INCLUSIVE:\n \t  case OMP_CLAUSE_EXCLUSIVE:\n+\t  case OMP_CLAUSE_ALLOCATE:\n \t    /* tsubst_expr on SCOPE_REF results in returning\n \t       finish_non_static_data_member result.  Undo that here.  */\n \t    if (TREE_CODE (OMP_CLAUSE_DECL (oc)) == SCOPE_REF"}, {"sha": "352ebe03436f23e574e748570c6dc724e79038b7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8", "patch": "@@ -7200,15 +7200,21 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  break;\n \n \tcase OMP_CLAUSE_ALLOCATE:\n-\t  t = OMP_CLAUSE_DECL (c);\n+\t  t = omp_clause_decl_field (OMP_CLAUSE_DECL (c));\n+\t  if (t)\n+\t    omp_note_field_privatization (t, OMP_CLAUSE_DECL (c));\n+\t  else\n+\t    t = OMP_CLAUSE_DECL (c);\n \t  if (t == current_class_ptr)\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%<this%> not allowed in %<allocate%> clause\");\n \t      remove = true;\n \t      break;\n \t    }\n-\t  if (!VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n+\t  if (!VAR_P (t)\n+\t      && TREE_CODE (t) != PARM_DECL\n+\t      && TREE_CODE (t) != FIELD_DECL)\n \t    {\n \t      if (processing_template_decl && TREE_CODE (t) != OVERLOAD)\n \t\tbreak;\n@@ -7232,17 +7238,18 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      bitmap_set_bit (&aligned_head, DECL_UID (t));\n \t      allocate_seen = true;\n \t    }\n-\t  t = OMP_CLAUSE_ALLOCATE_ALLOCATOR (c);\n-\t  if (error_operand_p (t))\n+\t  tree allocator;\n+\t  allocator = OMP_CLAUSE_ALLOCATE_ALLOCATOR (c);\n+\t  if (error_operand_p (allocator))\n \t    {\n \t      remove = true;\n \t      break;\n \t    }\n-\t  if (t == NULL_TREE)\n-\t    break;\n+\t  if (allocator == NULL_TREE)\n+\t    goto handle_field_decl;\n \t  tree allocatort;\n-\t  allocatort = TYPE_MAIN_VARIANT (TREE_TYPE (t));\n-\t  if (!type_dependent_expression_p (t)\n+\t  allocatort = TYPE_MAIN_VARIANT (TREE_TYPE (allocator));\n+\t  if (!type_dependent_expression_p (allocator)\n \t      && (TREE_CODE (allocatort) != ENUMERAL_TYPE\n \t\t  || TYPE_NAME (allocatort) == NULL_TREE\n \t\t  || TREE_CODE (TYPE_NAME (allocatort)) != TYPE_DECL\n@@ -7254,17 +7261,17 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%<allocate%> clause allocator expression has \"\n \t\t\t\"type %qT rather than %<omp_allocator_handle_t%>\",\n-\t\t\tTREE_TYPE (t));\n+\t\t\tTREE_TYPE (allocator));\n \t      remove = true;\n \t    }\n \t  else\n \t    {\n-\t      t = mark_rvalue_use (t);\n+\t      allocator = mark_rvalue_use (allocator);\n \t      if (!processing_template_decl)\n-\t\tt = maybe_constant_value (t);\n-\t      OMP_CLAUSE_ALLOCATE_ALLOCATOR (c) = t;\n+\t\tallocator = maybe_constant_value (allocator);\n+\t      OMP_CLAUSE_ALLOCATE_ALLOCATOR (c) = allocator;\n \t    }\n-\t  break;\n+\t  goto handle_field_decl;\n \n \tcase OMP_CLAUSE_DEPEND:\n \t  t = OMP_CLAUSE_DECL (c);"}, {"sha": "5630dac333427228bd3d7c0d80a9cd5301a1ad64", "filename": "gcc/testsuite/c-c++-common/gomp/allocate-1.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-1.c?ref=5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8", "patch": "@@ -74,3 +74,11 @@ foo (int x, int z)\n     r += bar (x, &r, 0);\n   #pragma omp taskwait\n }\n+\n+void\n+qux (const omp_allocator_handle_t h)\n+{\n+  int x = 0;\n+  #pragma omp parallel firstprivate (x) allocate (h: x)\n+  x = 1;\n+}"}, {"sha": "e70c65e3d2b0ed3e83f2f69e2d1bf232de4e40ee", "filename": "gcc/testsuite/g++.dg/gomp/allocate-1.C", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fallocate-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fallocate-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fallocate-1.C?ref=5a6b1d8ef4218a1a2ed6d43c6ee058db9c417bc8", "patch": "@@ -0,0 +1,88 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-std=c++11\" }\n+\n+typedef enum omp_allocator_handle_t\n+#if __cplusplus >= 201103L\n+: __UINTPTR_TYPE__\n+#endif\n+{\n+  omp_null_allocator = 0,\n+  omp_default_mem_alloc = 1,\n+  omp_large_cap_mem_alloc = 2,\n+  omp_const_mem_alloc = 3,\n+  omp_high_bw_mem_alloc = 4,\n+  omp_low_lat_mem_alloc = 5,\n+  omp_cgroup_mem_alloc = 6,\n+  omp_pteam_mem_alloc = 7,\n+  omp_thread_mem_alloc = 8,\n+  __omp_allocator_handle_t_max__ = __UINTPTR_MAX__\n+} omp_allocator_handle_t;\n+\n+namespace N1\n+{\n+  using ::omp_allocator_handle_t;\n+  void\n+  foo (const omp_allocator_handle_t h)\n+  {\n+    int x = 0;\n+    #pragma omp parallel allocate (h: x) private (x)\n+    x = 1;\n+  }\n+}\n+\n+namespace N2\n+{\n+  typedef enum omp_allocator_handle_t { my = 0 } omp_allocator_handle_t;\n+  void\n+  foo (omp_allocator_handle_t h)\n+  {\n+    int x = 0;\n+    #pragma omp parallel allocate (h: x) private (x) // { dg-error \"'allocate' clause allocator expression has type 'N2::omp_allocator_handle_t' rather than 'omp_allocator_handle_t'\" }\n+    x = 1;\n+  }\n+}\n+\n+struct S\n+{\n+  void foo ()\n+  {\n+    #pragma omp parallel allocate (omp_default_mem_alloc:s) firstprivate (s)\n+    s++;\n+  }\n+  int s;\n+};\n+\n+template <typename T>\n+struct U\n+{\n+  int foo ()\n+  {\n+    #pragma omp parallel allocate (omp_default_mem_alloc:s) firstprivate (s)\n+    s++;\n+    return 1;\n+  }\n+  T s;\n+};\n+\n+template <typename T>\n+int foo (T t)\n+{\n+  int x = 0;\n+  #pragma omp parallel firstprivate (x) allocate (t: x)\n+  x = 1;\n+  return 0;\n+}\n+\n+template <typename T>\n+int bar (T t)\n+{\n+  int x = 0;\n+  #pragma omp parallel firstprivate (x) allocate (t: x)\t// { dg-error \"'allocate' clause allocator expression has type 'int' rather than 'omp_allocator_handle_t'\" }\n+  x = 1;\n+  return 0;\n+}\n+\n+omp_allocator_handle_t h;\n+int a = foo (h);\n+int b = bar (0);\n+int c = U<int> ().foo ();"}]}