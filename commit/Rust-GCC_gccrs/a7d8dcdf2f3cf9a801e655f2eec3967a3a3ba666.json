{"sha": "a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkOGRjZGYyZjNjZjlhODAxZTY1NWYyZWVjMzk2N2EzYTNiYTY2Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-14T15:24:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-14T15:38:39Z"}, "message": "Fix dangling references in thunks at -O0\n\nWhen a thunk cannot be emitted in assembly directly, expand_thunk\ngenerates regular GIMPLE code but unconditionally forces a tail\ncall to the target of the thunk.  That's theoretically OK because\nthe thunk essentially forwards its parameters to the target, but\nin practice the RTL expander can spill parameters passed by reference\non the stack in assign_parm_setup_reg.\n\ngcc/ChangeLog:\n\t* cgraphunit.c (cgraph_node::expand_thunk): Make sure to set\n\tcfun->tail_call_marked when forcing a tail call.\n\t* function.c (assign_parm_setup_reg): Always use a register to\n\tload a parameter passed by reference if cfun->tail_call_marked.\n\ngcc/testsuite/ChangeLog:\n\t* gnat.dg/thunk1.adb: New test.\n\t* gnat.dg/thunk1_pkg1.ads: New helper.\n\t* gnat.dg/thunk1_pkg2.ads: Likewise.\n\t* gnat.dg/thunk1_pkg2.adb: Likewise.", "tree": {"sha": "c8845d0fd0b213f1143e93ca46b864115f920cfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8845d0fd0b213f1143e93ca46b864115f920cfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/comments", "author": null, "committer": null, "parents": [{"sha": "863e8d53eb2940e2c8850e632afe427e164f53cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863e8d53eb2940e2c8850e632afe427e164f53cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863e8d53eb2940e2c8850e632afe427e164f53cf"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "bedb6e2eea1519f8f588d1a605c8162982aac175", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666", "patch": "@@ -2171,7 +2171,10 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \t\t}\n \t    }\n \t  else\n-\t    gimple_call_set_tail (call, true);\n+\t    {\n+\t      gimple_call_set_tail (call, true);\n+\t      cfun->tail_call_marked = true;\n+\t    }\n \n \t  /* Build return value.  */\n \t  if (!DECL_BY_REFERENCE (resdecl))\n@@ -2184,6 +2187,7 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       else\n \t{\n \t  gimple_call_set_tail (call, true);\n+\t  cfun->tail_call_marked = true;\n \t  remove_edge (single_succ_edge (bb));\n \t}\n "}, {"sha": "c4c9930d7251a4578e3508175569e86a0f7cf36d", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666", "patch": "@@ -3322,13 +3322,15 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n   else\n     emit_move_insn (parmreg, validated_mem);\n \n-  /* If we were passed a pointer but the actual value can safely live\n-     in a register, retrieve it and use it directly.  */\n+  /* If we were passed a pointer but the actual value can live in a register,\n+     retrieve it and use it directly.  Note that we cannot use nominal_mode,\n+     because it will have been set to Pmode above, we must use the actual mode\n+     of the parameter instead.  */\n   if (data->arg.pass_by_reference && TYPE_MODE (TREE_TYPE (parm)) != BLKmode)\n     {\n-      /* We can't use nominal_mode, because it will have been set to\n-\t Pmode above.  We must use the actual mode of the parm.  */\n-      if (use_register_for_decl (parm))\n+      /* Use a stack slot for debugging purposes, except if a tail call is\n+\t involved because this would create a dangling reference.  */\n+      if (use_register_for_decl (parm) || cfun->tail_call_marked)\n \t{\n \t  parmreg = gen_reg_rtx (TYPE_MODE (TREE_TYPE (parm)));\n \t  mark_user_reg (parmreg);"}, {"sha": "278e023bbbcb7c0eae6e2cda7a6a06f59fd5df3e", "filename": "gcc/testsuite/gnat.dg/thunk1.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1.adb?ref=a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do run }\n+\n+with Thunk1_Pkg1; use Thunk1_Pkg1;\n+\n+procedure Thunk1 is\n+  D: Derived;\n+begin\n+  D.Op (\"Message\");\n+end;"}, {"sha": "edb3eac04b3bfc2f0c4f8dcb4ff439cedf161e0b", "filename": "gcc/testsuite/gnat.dg/thunk1_pkg1.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1_pkg1.ads?ref=a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666", "patch": "@@ -0,0 +1,7 @@\n+with Thunk1_Pkg2; use Thunk1_Pkg2;\n+\n+package Thunk1_Pkg1 is\n+\n+  type Derived is new Ext with null record;\n+\n+end Thunk1_Pkg1;"}, {"sha": "71ad45d19a5858324c9aa6e80e198d2d8f33553e", "filename": "gcc/testsuite/gnat.dg/thunk1_pkg2.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1_pkg2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1_pkg2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1_pkg2.adb?ref=a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666", "patch": "@@ -0,0 +1,10 @@\n+package body Thunk1_Pkg2 is\n+\n+  procedure Op (This : in out Ext; S : String) is\n+  begin\n+    if S /= \"Message\" then\n+      raise Program_Error;\n+    end if;\n+  end;\n+\n+end Thunk1_Pkg2;"}, {"sha": "82a48d500aa15e2841122ed065a1348a477552d1", "filename": "gcc/testsuite/gnat.dg/thunk1_pkg2.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk1_pkg2.ads?ref=a7d8dcdf2f3cf9a801e655f2eec3967a3a3ba666", "patch": "@@ -0,0 +1,14 @@\n+package Thunk1_Pkg2 is\n+\n+  type Root is tagged record\n+    I : Integer;\n+  end record;\n+\n+  type Iface is interface;\n+  procedure Op (This : in out Iface; S : String) is abstract;\n+\n+  type Ext is new Root and Iface with null record;\n+\n+  procedure Op (This : in out Ext; S : String);\n+\n+end Thunk1_Pkg2;"}]}