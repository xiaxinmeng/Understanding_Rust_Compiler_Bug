{"sha": "a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdjNDhjOGVjNTVkNDgyZTk1ZGRkZDg0MGE5YmRkMGZiZmFkOWUzMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-01T21:23:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-01T21:23:07Z"}, "message": "Test whether libgcc or kernel defines __sync_bool_compare_and_swap_4.\n\nFrom-SVN: r169504", "tree": {"sha": "8a6b7bdf2b2fc6e41472c4ee699757979c05301d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a6b7bdf2b2fc6e41472c4ee699757979c05301d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33/comments", "author": null, "committer": null, "parents": [{"sha": "56490b740618d572e9a4cd205b058db8d5831eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56490b740618d572e9a4cd205b058db8d5831eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56490b740618d572e9a4cd205b058db8d5831eb9"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "382362beb40c81e42cdb2a1b1ccd508dcce3c757", "filename": "libgo/config.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33", "patch": "@@ -39,6 +39,10 @@\n /* Define to 1 if you have the `strsignal' function. */\n #undef HAVE_STRSIGNAL\n \n+/* Define to 1 if the compiler provides the __sync_bool_compare_and_swap\n+   function for uint32 */\n+#undef HAVE_SYNC_BOOL_COMPARE_AND_SWAP_4\n+\n /* Define to 1 if you have the <syscall.h> header file. */\n #undef HAVE_SYSCALL_H\n "}, {"sha": "ad4cc25810a2adec2c1d7a3de99895d541d1da59", "filename": "libgo/configure", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33", "patch": "@@ -14099,6 +14099,34 @@ fi\n done\n \n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __sync_bool_compare_and_swap_4\" >&5\n+$as_echo_n \"checking for __sync_bool_compare_and_swap_4... \" >&6; }\n+if test \"${libgo_cv_func___sync_bool_compare_and_swap_4+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+typedef unsigned int uint32  __attribute__ ((mode (SI)));\n+uint32 i;\n+int main() { return __sync_bool_compare_and_swap (&i, 0, 1); }\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  libgo_cv_func___sync_bool_compare_and_swap_4=yes\n+else\n+  libgo_cv_func___sync_bool_compare_and_swap_4=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_func___sync_bool_compare_and_swap_4\" >&5\n+$as_echo \"$libgo_cv_func___sync_bool_compare_and_swap_4\" >&6; }\n+if test \"$libgo_cv_func___sync_bool_compare_and_swap_4\" = \"yes\"; then\n+  $as_echo \"#define HAVE_SYNC_BOOL_COMPARE_AND_SWAP_4 1\" >>confdefs.h\n+\n+fi\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether compiler supports -minline-all-stringops\" >&5\n $as_echo_n \"checking whether compiler supports -minline-all-stringops... \" >&6; }\n if test \"${libgo_cv_c_stringops+set}\" = set; then :"}, {"sha": "6cd04d2609c9861a1e46a76aff0f3d8ba2076bbe", "filename": "libgo/configure.ac", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33", "patch": "@@ -332,6 +332,20 @@ AC_CHECK_HEADERS(sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/user.h sys/ut\n AM_CONDITIONAL(HAVE_SYS_MMAN_H, test \"$ac_cv_header_sys_mman_h\" = yes)\n AC_CHECK_FUNCS(srandom random strsignal)\n \n+AC_CACHE_CHECK([for __sync_bool_compare_and_swap_4],\n+[libgo_cv_func___sync_bool_compare_and_swap_4],\n+[AC_LINK_IFELSE([\n+typedef unsigned int uint32  __attribute__ ((mode (SI)));\n+uint32 i;\n+int main() { return __sync_bool_compare_and_swap (&i, 0, 1); }\n+],\n+[libgo_cv_func___sync_bool_compare_and_swap_4=yes],\n+[libgo_cv_func___sync_bool_compare_and_swap_4=no])])\n+if test \"$libgo_cv_func___sync_bool_compare_and_swap_4\" = \"yes\"; then\n+  AC_DEFINE(HAVE_SYNC_BOOL_COMPARE_AND_SWAP_4, 1,\n+    [Define to 1 if the compiler provides the __sync_bool_compare_and_swap function for uint32])\n+fi\n+\n dnl For x86 we want to use the -minline-all-stringops option to avoid\n dnl forcing a stack split when calling memcpy and friends.\n AC_CACHE_CHECK([whether compiler supports -minline-all-stringops],"}, {"sha": "b600754f64c1673fd5a33225a2993267692282c0", "filename": "libgo/runtime/thread.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33/libgo%2Fruntime%2Fthread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33/libgo%2Fruntime%2Fthread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fthread.c?ref=a7c48c8ec55d482e95dddd840a9bdd0fbfad9e33", "patch": "@@ -77,7 +77,7 @@ runtime_destroylock(Lock *l)\n \tsem_destroy(&l->sem);\n }\n \n-#ifndef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n+#ifndef HAVE_SYNC_BOOL_COMPARE_AND_SWAP_4\n \n // For targets which don't have the required sync support.  Really\n // this should be provided by gcc itself.  FIXME."}]}