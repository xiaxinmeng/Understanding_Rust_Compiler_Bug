{"sha": "861d669e3d66091b304d687c0f9239399983f5d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYxZDY2OWUzZDY2MDkxYjMwNGQ2ODdjMGY5MjM5Mzk5OTgzZjVkOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-11-15T14:03:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T14:03:56Z"}, "message": "re PR ada/15604 (Ambiguous aggregate -- Accepts invalid)\n\n2005-11-14  Ed Schonberg  <schonberg@adacore.com>\n\t    Javier Miranda  <miranda@adacore.com>\n\n\tPR ada/15604\n\n\t* sem_type.adb (Covers): In an inlined body, a composite type matches\n\ta private type whose full view is a composite type.\n\t(Interface_Present_In_Ancestor): Protect the frontend against\n\tpreviously detected errors to ensure that its compilation\n\twith assertions enabled gives the same output that its\n\tcompilation without assertions.\n\t(Interface_Present_In_Ancestor): Add support for private types.\n\tChange name In_Actual to In_Generic_Actual (clean up)\n\t(Disambiguate): New predicate In_Actual, to recognize expressions that\n\tappear in the renaming declaration generated for generic actuals, and\n\twhich must be resolved in the outer context.\n\nFrom-SVN: r107006", "tree": {"sha": "f1297c052e447c252c738d80a1cf090fd7011c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1297c052e447c252c738d80a1cf090fd7011c7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/861d669e3d66091b304d687c0f9239399983f5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861d669e3d66091b304d687c0f9239399983f5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861d669e3d66091b304d687c0f9239399983f5d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861d669e3d66091b304d687c0f9239399983f5d8/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ebe37436fec61ab771979afb0d0b2300c65b699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ebe37436fec61ab771979afb0d0b2300c65b699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ebe37436fec61ab771979afb0d0b2300c65b699"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "94c4c5c060e2c7a0ea4689e4cf2a744419137a03", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 73, "deletions": 7, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d669e3d66091b304d687c0f9239399983f5d8/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d669e3d66091b304d687c0f9239399983f5d8/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=861d669e3d66091b304d687c0f9239399983f5d8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -913,7 +913,10 @@ package body Sem_Type is\n                               and then\n                                 Designated_Type (T1) = Designated_Type (T2))\n                    or else (T1 = Any_Access\n-                              and then Is_Access_Type (Underlying_Type (T2))))\n+                              and then Is_Access_Type (Underlying_Type (T2)))\n+                   or else (T2 = Any_Composite\n+                              and then\n+                                Is_Composite_Type (Underlying_Type (T1))))\n       then\n          return True;\n \n@@ -979,6 +982,13 @@ package body Sem_Type is\n       --  Determine whether one of the candidates is an operation inherited by\n       --  a type that is derived from an actual in an instantiation.\n \n+      function In_Generic_Actual (Exp : Node_Id) return Boolean;\n+      --  Determine whether the expression is part of a generic actual. At\n+      --  the time the actual is resolved the scope is already that of the\n+      --  instance, but conceptually the resolution of the actual takes place\n+      --  in the enclosing context, and no special disambiguation rules should\n+      --  be applied.\n+\n       function Is_Actual_Subprogram (S : Entity_Id) return Boolean;\n       --  Determine whether a subprogram is an actual in an enclosing instance.\n       --  An overloading between such a subprogram and one declared outside the\n@@ -1009,6 +1019,34 @@ package body Sem_Type is\n       --  pathology in the other direction with calls whose multiple overloaded\n       --  actuals make them truly unresolvable.\n \n+      ------------------------\n+      --  In_Generic_Actual --\n+      ------------------------\n+\n+      function In_Generic_Actual (Exp : Node_Id) return Boolean is\n+         Par : constant Node_Id := Parent (Exp);\n+\n+      begin\n+         if No (Par) then\n+            return False;\n+\n+         elsif Nkind (Par) in N_Declaration then\n+            if Nkind (Par) = N_Object_Declaration\n+              or else Nkind (Par) = N_Object_Renaming_Declaration\n+            then\n+               return Present (Corresponding_Generic_Association (Par));\n+            else\n+               return False;\n+            end if;\n+\n+         elsif Nkind (Par) in N_Statement_Other_Than_Procedure_Call then\n+            return False;\n+\n+         else\n+            return In_Generic_Actual (Parent (Par));\n+         end if;\n+      end In_Generic_Actual;\n+\n       ---------------------------\n       -- Inherited_From_Actual --\n       ---------------------------\n@@ -1372,7 +1410,9 @@ package body Sem_Type is\n          --  case the resolution was to the explicit declaration in the\n          --  generic, and remains so in the instance.\n \n-         elsif In_Instance then\n+         elsif In_Instance\n+           and then not In_Generic_Actual (N)\n+         then\n             if Nkind (N) = N_Function_Call\n               or else Nkind (N) = N_Procedure_Call_Statement\n             then\n@@ -1801,7 +1841,16 @@ package body Sem_Type is\n             return True;\n          end if;\n \n-         E := Typ;\n+         --  Handle private types\n+\n+         if Present (Full_View (Typ))\n+           and then not Is_Concurrent_Type (Full_View (Typ))\n+         then\n+            E := Full_View (Typ);\n+         else\n+            E := Typ;\n+         end if;\n+\n          loop\n             if Present (Abstract_Interfaces (E))\n               and then Present (Abstract_Interfaces (E))\n@@ -1819,7 +1868,12 @@ package body Sem_Type is\n                end loop;\n             end if;\n \n-            exit when Etype (E) = E;\n+            exit when Etype (E) = E\n+\n+               --  Handle private types\n+\n+               or else (Present (Full_View (Etype (E)))\n+                         and then Full_View (Etype (E)) = E);\n \n             --  Check if the current type is a direct derivation of the\n             --  interface\n@@ -1828,14 +1882,20 @@ package body Sem_Type is\n                return True;\n             end if;\n \n-            --  Climb to the immediate ancestor\n+            --  Climb to the immediate ancestor handling private types\n \n-            E := Etype (E);\n+            if Present (Full_View (Etype (E))) then\n+               E := Full_View (Etype (E));\n+            else\n+               E := Etype (E);\n+            end if;\n          end loop;\n \n          return False;\n       end Iface_Present_In_Ancestor;\n \n+   --  Start of processing for Interface_Present_In_Ancestor\n+\n    begin\n       if Is_Access_Type (Typ) then\n          Target_Typ := Etype (Directly_Designated_Type (Typ));\n@@ -1879,6 +1939,12 @@ package body Sem_Type is\n       if Ekind (Target_Typ) = E_Incomplete_Type then\n          pragma Assert (Present (Non_Limited_View (Target_Typ)));\n          Target_Typ := Non_Limited_View (Target_Typ);\n+\n+         --  Protect the frontend against previously detected errors\n+\n+         if Ekind (Target_Typ) = E_Incomplete_Type then\n+            return False;\n+         end if;\n       end if;\n \n       return Iface_Present_In_Ancestor (Target_Typ);"}]}