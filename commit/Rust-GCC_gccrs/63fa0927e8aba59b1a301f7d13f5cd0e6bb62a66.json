{"sha": "63fa0927e8aba59b1a301f7d13f5cd0e6bb62a66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNmYTA5MjdlOGFiYTU5YjFhMzAxZjdkMTNmNWNkMGU2YmI2MmE2Ng==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-22T15:07:25Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-22T15:43:25Z"}, "message": "c++: Shrink lambda-expr\n\nI noticed the default capture mode and the discriminator both used\nints.  That seems excessive.  This shrinks them to 8 bits and 16 bits\nrespectively.  I suppose the discriminator could use the remaining 24\nbits of an int allocation unit, if we're worried about more that 64K\nlambdas per function.  I know, users are strange :)  On a 64 bit system\nthis saves 64 bits, because we also had 32 bits of padding added.\n\n\tgcc/cp/\n\t* cp-tree.h (struct tree_lambda_expr): Shrink\n\tdefault_capture_mode & discriminator.", "tree": {"sha": "050b1f2f42aaeb43645d0ea6eaeb3d7acd29ce4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/050b1f2f42aaeb43645d0ea6eaeb3d7acd29ce4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63fa0927e8aba59b1a301f7d13f5cd0e6bb62a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63fa0927e8aba59b1a301f7d13f5cd0e6bb62a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63fa0927e8aba59b1a301f7d13f5cd0e6bb62a66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63fa0927e8aba59b1a301f7d13f5cd0e6bb62a66/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d96339d26e31f06707fe234040bde45b6de70b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d96339d26e31f06707fe234040bde45b6de70b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d96339d26e31f06707fe234040bde45b6de70b"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "d43c53ae29af656a113fc1bb06019586b6affcd0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63fa0927e8aba59b1a301f7d13f5cd0e6bb62a66/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63fa0927e8aba59b1a301f7d13f5cd0e6bb62a66/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=63fa0927e8aba59b1a301f7d13f5cd0e6bb62a66", "patch": "@@ -1442,8 +1442,8 @@ struct GTY (()) tree_lambda_expr\n   tree extra_scope;\n   vec<tree, va_gc> *pending_proxies;\n   location_t locus;\n-  enum cp_lambda_default_capture_mode_type default_capture_mode;\n-  int discriminator;\n+  enum cp_lambda_default_capture_mode_type default_capture_mode : 8;\n+  short int discriminator;\n };\n \n /* Non-zero if this template specialization has access violations that"}]}