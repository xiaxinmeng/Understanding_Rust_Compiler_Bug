{"sha": "7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3YjhiZmU1NWY4NTk4ZjJmYTBmODQyZmI3Zjk1MDYwYzQ1ZmEzNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-12T08:59:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-12T08:59:05Z"}, "message": "acinclude.m4 (LIBGFOR_CHECK_ATTRIBUTE_VISIBILITY): New.\n\n        * acinclude.m4 (LIBGFOR_CHECK_ATTRIBUTE_VISIBILITY): New.\n        (LIBGFOR_CHECK_ATTRIBUTE_DLLEXPORT): New.\n        (LIBGFOR_CHECK_ATTRIBUTE_ALIAS): New.\n        * configure.ac: Use them.\n        * configure, config.h.in, aclocal.m4: Rebuild.\n        * libgfortran.h (prefix): Remove.\n        (PREFIX, IPREFIX): New.\n        (sym_rename, sym_rename1, sym_rename2): New.\n        (internal_proto, export_proto, export_proto_np): New.\n        (iexport_proto, iexport): New.\n        (iexport_data_proto, iexport_data): New.\n        * intrinsics/abort.c, intrinsics/args.c, intrinsics/associated.c,\n        intrinsics/cpu_time.c, intrinsics/cshift0.c,\n        intrinsics/date_and_time.c, intrinsics/env.c, intrinsics/eoshift0.c,\n        intrinsics/eoshift2.c, intrinsics/etime.c, intrinsics/exit.c,\n        intrinsics/flush.c, intrinsics/fnum.c, intrinsics/getXid.c,\n        intrinsics/getcwd.c, intrinsics/ishftc.c, intrinsics/mvbits.c,\n        intrinsics/pack_generic.c, intrinsics/rand.c, intrinsics/random.c,\n        intrinsics/reshape_generic.c, intrinsics/size.c,\n        intrinsics/spread_generic.c, intrinsics/stat.c,\n        intrinsics/string_intrinsics.c, intrinsics/system.c,\n        intrinsics/system_clock.c, intrinsics/transpose_generic.c,\n        intrinsics/umask.c, intrinsics/unlink.c, intrinsics/unpack_generic.c,\n        io/backspace.c, io/close.c, io/endfile.c, io/inquire.c, io/io.h,\n        io/open.c, io/rewind.c, io/transfer.c, libgfortran.h, m4/cshift1.m4,\n        m4/dotprod.m4, m4/dotprodc.m4, m4/dotprodl.m4, m4/eoshift1.m4,\n        m4/eoshift3.m4, m4/exponent.m4, m4/fraction.m4, m4/iforeach.m4,\n        m4/ifunction.m4, m4/matmul.m4, m4/matmull.m4, m4/nearest.m4,\n        m4/pow.m4, m4/reshape.m4, m4/set_exponent.m4, m4/shape.m4,\n        m4/transpose.m4, runtime/environ.c, runtime/error.c,\n        runtime/in_pack_generic.c, runtime/in_unpack_generic.c,\n        runtime/main.c, runtime/memory.c, runtime/pause.c, runtime/select.c,\n        runtime/stop.c: Use them to mark symbols internal or external.\n        * generated/*: Rebuild.\n\nFrom-SVN: r92045", "tree": {"sha": "cb0ecd2cd7b8c21d4d1c38261b5b7116e8dd2782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb0ecd2cd7b8c21d4d1c38261b5b7116e8dd2782"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/comments", "author": null, "committer": null, "parents": [{"sha": "c431e4997fcca052667b780341ddf4df5f6eb55c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c431e4997fcca052667b780341ddf4df5f6eb55c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c431e4997fcca052667b780341ddf4df5f6eb55c"}], "stats": {"total": 2796, "additions": 2040, "deletions": 756}, "files": [{"sha": "83084aad13a0299e3065a8622e9d27a38730d7a4", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -1,3 +1,40 @@\n+2004-12-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* acinclude.m4 (LIBGFOR_CHECK_ATTRIBUTE_VISIBILITY): New.\n+\t(LIBGFOR_CHECK_ATTRIBUTE_DLLEXPORT): New.\n+\t(LIBGFOR_CHECK_ATTRIBUTE_ALIAS): New.\n+\t* configure.ac: Use them.\n+\t* configure, config.h.in, aclocal.m4: Rebuild.\n+\t* libgfortran.h (prefix): Remove.\n+\t(PREFIX, IPREFIX): New.\n+\t(sym_rename, sym_rename1, sym_rename2): New.\n+\t(internal_proto, export_proto, export_proto_np): New.\n+\t(iexport_proto, iexport): New.\n+\t(iexport_data_proto, iexport_data): New.\n+\t* intrinsics/abort.c, intrinsics/args.c, intrinsics/associated.c,\n+\tintrinsics/cpu_time.c, intrinsics/cshift0.c,\n+\tintrinsics/date_and_time.c, intrinsics/env.c, intrinsics/eoshift0.c,\n+\tintrinsics/eoshift2.c, intrinsics/etime.c, intrinsics/exit.c,\n+\tintrinsics/flush.c, intrinsics/fnum.c, intrinsics/getXid.c,\n+\tintrinsics/getcwd.c, intrinsics/ishftc.c, intrinsics/mvbits.c,\n+\tintrinsics/pack_generic.c, intrinsics/rand.c, intrinsics/random.c,\n+\tintrinsics/reshape_generic.c, intrinsics/size.c,\n+\tintrinsics/spread_generic.c, intrinsics/stat.c,\n+\tintrinsics/string_intrinsics.c, intrinsics/system.c,\n+\tintrinsics/system_clock.c, intrinsics/transpose_generic.c,\n+\tintrinsics/umask.c, intrinsics/unlink.c, intrinsics/unpack_generic.c,\n+\tio/backspace.c, io/close.c, io/endfile.c, io/inquire.c, io/io.h,\n+\tio/open.c, io/rewind.c, io/transfer.c, libgfortran.h, m4/cshift1.m4,\n+\tm4/dotprod.m4, m4/dotprodc.m4, m4/dotprodl.m4, m4/eoshift1.m4,\n+\tm4/eoshift3.m4, m4/exponent.m4, m4/fraction.m4, m4/iforeach.m4,\n+\tm4/ifunction.m4, m4/matmul.m4, m4/matmull.m4, m4/nearest.m4,\n+\tm4/pow.m4, m4/reshape.m4, m4/set_exponent.m4, m4/shape.m4,\n+\tm4/transpose.m4, runtime/environ.c, runtime/error.c,\n+\truntime/in_pack_generic.c, runtime/in_unpack_generic.c,\n+\truntime/main.c, runtime/memory.c, runtime/pause.c, runtime/select.c,\n+\truntime/stop.c: Use them to mark symbols internal or external.\n+\t* generated/*: Rebuild.\n+\n 2004-12-09  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR bootstrap/18895"}, {"sha": "2dc8f85e16b6019c0c8d6fccd8ecbbe5ec913909", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -102,3 +102,49 @@ else\n       [Define to 1 if the target is ILP32.])\n   fi\n   ])\n+\n+dnl Check whether the target supports hidden visibility.\n+AC_DEFUN([LIBGFOR_CHECK_ATTRIBUTE_VISIBILITY], [\n+  AC_CACHE_CHECK([whether the target supports hidden visibility],\n+\t\t have_attribute_visibility, [\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -Werror\"\n+  AC_TRY_COMPILE([void __attribute__((visibility(\"hidden\"))) foo(void) { }],\n+\t\t [], have_attribute_visibility=yes,\n+\t\t have_attribute_visibility=no)\n+  CFLAGS=\"$save_CFLAGS\"])\n+  if test $have_attribute_visibility = yes; then\n+    AC_DEFINE(HAVE_ATTRIBUTE_VISIBILITY, 1,\n+      [Define to 1 if the target supports __attribute__((visibility(...))).])\n+  fi])\n+\n+dnl Check whether the target supports dllexport\n+AC_DEFUN([LIBGFOR_CHECK_ATTRIBUTE_DLLEXPORT], [\n+  AC_CACHE_CHECK([whether the target supports dllexport],\n+\t\t have_attribute_dllexport, [\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -Werror\"\n+  AC_TRY_COMPILE([void __attribute__((dllexport)) foo(void) { }],\n+\t\t [], have_attribute_dllexport=yes,\n+\t\t have_attribute_dllexport=no)\n+  CFLAGS=\"$save_CFLAGS\"])\n+  if test $have_attribute_dllexport = yes; then\n+    AC_DEFINE(HAVE_ATTRIBUTE_DLLEXPORT, 1,\n+      [Define to 1 if the target supports __attribute__((dllexport)).])\n+  fi])\n+\n+dnl Check whether the target supports symbol aliases.\n+AC_DEFUN([LIBGFOR_CHECK_ATTRIBUTE_ALIAS], [\n+  AC_CACHE_CHECK([whether the target supports symbol aliases],\n+\t\t have_attribute_alias, [\n+  AC_TRY_LINK([\n+#define ULP\tSTR1(__USER_LABEL_PREFIX__)\n+#define STR1(x)\tSTR2(x)\n+#define STR2(x)\t#x\n+void foo(void) { }\n+extern void bar(void) __attribute__((alias(ULP \"foo\")));],\n+    [bar();], have_attribute_alias=yes, have_attribute_alias=no)])\n+  if test $have_attribute_alias = yes; then\n+    AC_DEFINE(HAVE_ATTRIBUTE_ALIAS, 1,\n+      [Define to 1 if the target supports __attribute__((alias(...))).])\n+  fi])"}, {"sha": "b858c4ef01b17b09a40e472fe4bca453beeb4dd0", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -15,6 +15,15 @@\n /* libm includes atanf */\n #undef HAVE_ATANF\n \n+/* Define to 1 if the target supports __attribute__((alias(...))). */\n+#undef HAVE_ATTRIBUTE_ALIAS\n+\n+/* Define to 1 if the target supports __attribute__((dllexport)). */\n+#undef HAVE_ATTRIBUTE_DLLEXPORT\n+\n+/* Define to 1 if the target supports __attribute__((visibility(...))). */\n+#undef HAVE_ATTRIBUTE_VISIBILITY\n+\n /* libm includes ceilf */\n #undef HAVE_CEILF\n "}, {"sha": "0a5c3f1344a3e836c761b439e3e837948115caf8", "filename": "libgfortran/configure", "status": "modified", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -11291,6 +11291,211 @@ _ACEOF\n   fi\n \n \n+# Check out attribute support.\n+\n+  echo \"$as_me:$LINENO: checking whether the target supports hidden visibility\" >&5\n+echo $ECHO_N \"checking whether the target supports hidden visibility... $ECHO_C\" >&6\n+if test \"${have_attribute_visibility+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -Werror\"\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+void __attribute__((visibility(\"hidden\"))) foo(void) { }\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  have_attribute_visibility=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+have_attribute_visibility=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+  CFLAGS=\"$save_CFLAGS\"\n+fi\n+echo \"$as_me:$LINENO: result: $have_attribute_visibility\" >&5\n+echo \"${ECHO_T}$have_attribute_visibility\" >&6\n+  if test $have_attribute_visibility = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_ATTRIBUTE_VISIBILITY 1\n+_ACEOF\n+\n+  fi\n+\n+  echo \"$as_me:$LINENO: checking whether the target supports dllexport\" >&5\n+echo $ECHO_N \"checking whether the target supports dllexport... $ECHO_C\" >&6\n+if test \"${have_attribute_dllexport+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -Werror\"\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+void __attribute__((dllexport)) foo(void) { }\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  have_attribute_dllexport=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+have_attribute_dllexport=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+  CFLAGS=\"$save_CFLAGS\"\n+fi\n+echo \"$as_me:$LINENO: result: $have_attribute_dllexport\" >&5\n+echo \"${ECHO_T}$have_attribute_dllexport\" >&6\n+  if test $have_attribute_dllexport = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_ATTRIBUTE_DLLEXPORT 1\n+_ACEOF\n+\n+  fi\n+\n+  echo \"$as_me:$LINENO: checking whether the target supports symbol aliases\" >&5\n+echo $ECHO_N \"checking whether the target supports symbol aliases... $ECHO_C\" >&6\n+if test \"${have_attribute_alias+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+#define ULP\tSTR1(__USER_LABEL_PREFIX__)\n+#define STR1(x)\tSTR2(x)\n+#define STR2(x)\t#x\n+void foo(void) { }\n+extern void bar(void) __attribute__((alias(ULP \"foo\")));\n+int\n+main ()\n+{\n+bar();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  have_attribute_alias=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+have_attribute_alias=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: $have_attribute_alias\" >&5\n+echo \"${ECHO_T}$have_attribute_alias\" >&6\n+  if test $have_attribute_alias = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_ATTRIBUTE_ALIAS 1\n+_ACEOF\n+\n+  fi\n+\n cat >confcache <<\\_ACEOF\n # This file is a shell script that caches the results of configure\n # tests run on this system so they can be shared between configure"}, {"sha": "ab55097198892613e0a84c38452e313d26edbd0c", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -234,6 +234,11 @@ LIBGFOR_GETTIMEOFDAY\n # have C99 integer types at all.\n LIBGFOR_TARGET_ILP32\n \n+# Check out attribute support.\n+LIBGFOR_CHECK_ATTRIBUTE_VISIBILITY\n+LIBGFOR_CHECK_ATTRIBUTE_DLLEXPORT\n+LIBGFOR_CHECK_ATTRIBUTE_ALIAS\n+\n AC_CACHE_SAVE\n \n if test ${multilib} = yes; then"}, {"sha": "3c81520ae4994da9b6616cd1c1839b6f2b8978b1", "filename": "libgfortran/generated/all_l4.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fall_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fall_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __all_l4 (gfc_array_l4 *, gfc_array_l4 *, index_type *);\n+export_proto_np(__all_l4);\n+\n void\n-__all_l4 (gfc_array_l4 * retarray, gfc_array_l4 *array, index_type *pdim)\n+__all_l4 (gfc_array_l4 *retarray, gfc_array_l4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];"}, {"sha": "c7a8df01b5d073c9affbab1dcece7d4dceb2e973", "filename": "libgfortran/generated/all_l8.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fall_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fall_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __all_l8 (gfc_array_l8 *, gfc_array_l8 *, index_type *);\n+export_proto_np(__all_l8);\n+\n void\n-__all_l8 (gfc_array_l8 * retarray, gfc_array_l8 *array, index_type *pdim)\n+__all_l8 (gfc_array_l8 *retarray, gfc_array_l8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];"}, {"sha": "da3f2b7295d16cdd9240498dda0ea666d390b2aa", "filename": "libgfortran/generated/any_l4.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fany_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fany_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __any_l4 (gfc_array_l4 *, gfc_array_l4 *, index_type *);\n+export_proto_np(__any_l4);\n+\n void\n-__any_l4 (gfc_array_l4 * retarray, gfc_array_l4 *array, index_type *pdim)\n+__any_l4 (gfc_array_l4 *retarray, gfc_array_l4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];"}, {"sha": "8258db932b9d35eaeeb8ffbeac58c35829eb1833", "filename": "libgfortran/generated/any_l8.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fany_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fany_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __any_l8 (gfc_array_l8 *, gfc_array_l8 *, index_type *);\n+export_proto_np(__any_l8);\n+\n void\n-__any_l8 (gfc_array_l8 * retarray, gfc_array_l8 *array, index_type *pdim)\n+__any_l8 (gfc_array_l8 *retarray, gfc_array_l8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];"}, {"sha": "0e3e29816474f625e5c44ce282ca5c0049c11581", "filename": "libgfortran/generated/count_4_l4.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcount_4_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcount_4_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __count_4_l4 (gfc_array_i4 *, gfc_array_l4 *, index_type *);\n+export_proto_np(__count_4_l4);\n+\n void\n-__count_4_l4 (gfc_array_i4 * retarray, gfc_array_l4 *array, index_type *pdim)\n+__count_4_l4 (gfc_array_i4 *retarray, gfc_array_l4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];"}, {"sha": "7e9a376960cb9ced53853eab51741b047550f6df", "filename": "libgfortran/generated/count_4_l8.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcount_4_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcount_4_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __count_4_l8 (gfc_array_i4 *, gfc_array_l8 *, index_type *);\n+export_proto_np(__count_4_l8);\n+\n void\n-__count_4_l8 (gfc_array_i4 * retarray, gfc_array_l8 *array, index_type *pdim)\n+__count_4_l8 (gfc_array_i4 *retarray, gfc_array_l8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];"}, {"sha": "c23895b660102cd3cc89deafafce24d39fc2b6c5", "filename": "libgfortran/generated/count_8_l4.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcount_8_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcount_8_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __count_8_l4 (gfc_array_i8 *, gfc_array_l4 *, index_type *);\n+export_proto_np(__count_8_l4);\n+\n void\n-__count_8_l4 (gfc_array_i8 * retarray, gfc_array_l4 *array, index_type *pdim)\n+__count_8_l4 (gfc_array_i8 *retarray, gfc_array_l4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];"}, {"sha": "1535af405614c0c1850e72ab558cc1e84c0af5f6", "filename": "libgfortran/generated/count_8_l8.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcount_8_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcount_8_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __count_8_l8 (gfc_array_i8 *, gfc_array_l8 *, index_type *);\n+export_proto_np(__count_8_l8);\n+\n void\n-__count_8_l8 (gfc_array_i8 * retarray, gfc_array_l8 *array, index_type *pdim)\n+__count_8_l8 (gfc_array_i8 *retarray, gfc_array_l8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];"}, {"sha": "9293eaeb209dcc66360723043900dc63fe084b07", "filename": "libgfortran/generated/cshift1_4.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,9 +25,15 @@ Boston, MA 02111-1307, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n+void __cshift1_4 (const gfc_array_char * ret,\n+\t\t\t     const gfc_array_char * array,\n+\t\t\t     const gfc_array_i4 * h, const GFC_INTEGER_4 * pwhich);\n+export_proto_np(__cshift1_4);\n+\n void\n-__cshift1_4 (const gfc_array_char * ret, const gfc_array_char * array,\n-    const gfc_array_i4 * h, const GFC_INTEGER_4 * pwhich)\n+__cshift1_4 (const gfc_array_char * ret,\n+\t\t\tconst gfc_array_char * array,\n+\t\t\tconst gfc_array_i4 * h, const GFC_INTEGER_4 * pwhich)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS - 1];\n@@ -41,7 +47,7 @@ __cshift1_4 (const gfc_array_char * ret, const gfc_array_char * array,\n   index_type soffset;\n   const char *sptr;\n   const char *src;\n-  /* h.* indicates the shift array.  */\n+  /* h.* indicates the  array.  */\n   index_type hstride[GFC_MAX_DIMENSIONS - 1];\n   index_type hstride0;\n   const GFC_INTEGER_4 *hptr;\n@@ -70,7 +76,7 @@ __cshift1_4 (const gfc_array_char * ret, const gfc_array_char * array,\n   size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n \n-/* Initialized for avoiding compiler warnings.  */\n+  /* Initialized for avoiding compiler warnings.  */\n   roffset = size;\n   soffset = size;\n   len = 0;\n@@ -115,7 +121,7 @@ __cshift1_4 (const gfc_array_char * ret, const gfc_array_char * array,\n \n   while (rptr)\n     {\n-      /* Do the shift for this dimension.  */\n+      /* Do the  for this dimension.  */\n       sh = *hptr;\n       sh = (div (sh, len)).rem;\n       if (sh < 0)\n@@ -167,4 +173,3 @@ __cshift1_4 (const gfc_array_char * ret, const gfc_array_char * array,\n         }\n     }\n }\n-"}, {"sha": "803984f045b93e1a835babee1f08548b7287255b", "filename": "libgfortran/generated/cshift1_8.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fcshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,9 +25,15 @@ Boston, MA 02111-1307, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n+void __cshift1_8 (const gfc_array_char * ret,\n+\t\t\t     const gfc_array_char * array,\n+\t\t\t     const gfc_array_i8 * h, const GFC_INTEGER_8 * pwhich);\n+export_proto_np(__cshift1_8);\n+\n void\n-__cshift1_8 (const gfc_array_char * ret, const gfc_array_char * array,\n-    const gfc_array_i8 * h, const GFC_INTEGER_8 * pwhich)\n+__cshift1_8 (const gfc_array_char * ret,\n+\t\t\tconst gfc_array_char * array,\n+\t\t\tconst gfc_array_i8 * h, const GFC_INTEGER_8 * pwhich)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS - 1];\n@@ -41,7 +47,7 @@ __cshift1_8 (const gfc_array_char * ret, const gfc_array_char * array,\n   index_type soffset;\n   const char *sptr;\n   const char *src;\n-  /* h.* indicates the shift array.  */\n+  /* h.* indicates the  array.  */\n   index_type hstride[GFC_MAX_DIMENSIONS - 1];\n   index_type hstride0;\n   const GFC_INTEGER_8 *hptr;\n@@ -70,7 +76,7 @@ __cshift1_8 (const gfc_array_char * ret, const gfc_array_char * array,\n   size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n \n-/* Initialized for avoiding compiler warnings.  */\n+  /* Initialized for avoiding compiler warnings.  */\n   roffset = size;\n   soffset = size;\n   len = 0;\n@@ -115,7 +121,7 @@ __cshift1_8 (const gfc_array_char * ret, const gfc_array_char * array,\n \n   while (rptr)\n     {\n-      /* Do the shift for this dimension.  */\n+      /* Do the  for this dimension.  */\n       sh = *hptr;\n       sh = (div (sh, len)).rem;\n       if (sh < 0)\n@@ -167,4 +173,3 @@ __cshift1_8 (const gfc_array_char * ret, const gfc_array_char * array,\n         }\n     }\n }\n-"}, {"sha": "ff60a23601ccc2a65aa7a7d1179bf4be8b5b2436", "filename": "libgfortran/generated/dotprod_c4.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_c4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,9 @@ Boston, MA 02111-1307, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n \n+extern GFC_COMPLEX_4 __dot_product_c4 (gfc_array_c4 * a, gfc_array_c4 * b);\n+export_proto_np(__dot_product_c4);\n+\n /* Both parameters will already have been converted to the result type.  */\n GFC_COMPLEX_4\n __dot_product_c4 (gfc_array_c4 * a, gfc_array_c4 * b)\n@@ -64,4 +67,3 @@ __dot_product_c4 (gfc_array_c4 * a, gfc_array_c4 * b)\n \n   return res;\n }\n-"}, {"sha": "cf22c377cf624099b390eb621b0031c72e0dce31", "filename": "libgfortran/generated/dotprod_c8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_c8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,9 @@ Boston, MA 02111-1307, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n \n+extern GFC_COMPLEX_8 __dot_product_c8 (gfc_array_c8 * a, gfc_array_c8 * b);\n+export_proto_np(__dot_product_c8);\n+\n /* Both parameters will already have been converted to the result type.  */\n GFC_COMPLEX_8\n __dot_product_c8 (gfc_array_c8 * a, gfc_array_c8 * b)\n@@ -64,4 +67,3 @@ __dot_product_c8 (gfc_array_c8 * a, gfc_array_c8 * b)\n \n   return res;\n }\n-"}, {"sha": "c0d67264c41acde2b32074ea0077e8381d1c1de1", "filename": "libgfortran/generated/dotprod_i4.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,6 +26,9 @@ Boston, MA 02111-1307, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n \n+extern GFC_INTEGER_4 __dot_product_i4 (gfc_array_i4 * a, gfc_array_i4 * b);\n+export_proto_np(__dot_product_i4);\n+\n /* Both parameters will already have been converted to the result type.  */\n GFC_INTEGER_4\n __dot_product_i4 (gfc_array_i4 * a, gfc_array_i4 * b)\n@@ -61,4 +64,3 @@ __dot_product_i4 (gfc_array_i4 * a, gfc_array_i4 * b)\n \n   return res;\n }\n-"}, {"sha": "57224318f671f52d336dd84f4a87c3972e97d931", "filename": "libgfortran/generated/dotprod_i8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,6 +26,9 @@ Boston, MA 02111-1307, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n \n+extern GFC_INTEGER_8 __dot_product_i8 (gfc_array_i8 * a, gfc_array_i8 * b);\n+export_proto_np(__dot_product_i8);\n+\n /* Both parameters will already have been converted to the result type.  */\n GFC_INTEGER_8\n __dot_product_i8 (gfc_array_i8 * a, gfc_array_i8 * b)\n@@ -61,4 +64,3 @@ __dot_product_i8 (gfc_array_i8 * a, gfc_array_i8 * b)\n \n   return res;\n }\n-"}, {"sha": "6248c9c5b2f27a5da50ceebd22bb48475bccf948", "filename": "libgfortran/generated/dotprod_l4.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_l4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,6 +24,9 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+extern GFC_LOGICAL_4 __dot_product_l4 (gfc_array_l4 *, gfc_array_l4 *);\n+export_proto_np(__dot_product_l4);\n+\n GFC_LOGICAL_4\n __dot_product_l4 (gfc_array_l4 * a, gfc_array_l4 * b)\n {\n@@ -71,4 +74,3 @@ __dot_product_l4 (gfc_array_l4 * a, gfc_array_l4 * b)\n \n   return 0;\n }\n-"}, {"sha": "708628883ada2cf93bfcdb913fa0330dd73a225d", "filename": "libgfortran/generated/dotprod_l8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_l8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,6 +24,9 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+extern GFC_LOGICAL_8 __dot_product_l8 (gfc_array_l4 *, gfc_array_l4 *);\n+export_proto_np(__dot_product_l8);\n+\n GFC_LOGICAL_8\n __dot_product_l8 (gfc_array_l4 * a, gfc_array_l4 * b)\n {\n@@ -71,4 +74,3 @@ __dot_product_l8 (gfc_array_l4 * a, gfc_array_l4 * b)\n \n   return 0;\n }\n-"}, {"sha": "801e43e808dd60235233810d637b2556c0ad6b40", "filename": "libgfortran/generated/dotprod_r4.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,6 +26,9 @@ Boston, MA 02111-1307, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n \n+extern GFC_REAL_4 __dot_product_r4 (gfc_array_r4 * a, gfc_array_r4 * b);\n+export_proto_np(__dot_product_r4);\n+\n /* Both parameters will already have been converted to the result type.  */\n GFC_REAL_4\n __dot_product_r4 (gfc_array_r4 * a, gfc_array_r4 * b)\n@@ -61,4 +64,3 @@ __dot_product_r4 (gfc_array_r4 * a, gfc_array_r4 * b)\n \n   return res;\n }\n-"}, {"sha": "edde2b2a69b4f197bc76067352ebba5dea6050ac", "filename": "libgfortran/generated/dotprod_r8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fdotprod_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fdotprod_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,6 +26,9 @@ Boston, MA 02111-1307, USA.  */\n \n typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n \n+extern GFC_REAL_8 __dot_product_r8 (gfc_array_r8 * a, gfc_array_r8 * b);\n+export_proto_np(__dot_product_r8);\n+\n /* Both parameters will already have been converted to the result type.  */\n GFC_REAL_8\n __dot_product_r8 (gfc_array_r8 * a, gfc_array_r8 * b)\n@@ -61,4 +64,3 @@ __dot_product_r8 (gfc_array_r8 * a, gfc_array_r8 * b)\n \n   return res;\n }\n-"}, {"sha": "aaccb54c0075946862dfe6ad8f74cdaf999eb58a", "filename": "libgfortran/generated/eoshift1_4.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Feoshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Feoshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -28,9 +28,17 @@ Boston, MA 02111-1307, USA.  */\n static const char zeros[16] =\n   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n \n+extern void __eoshift1_4 (const gfc_array_char *,\n+\t\t\t\t     const gfc_array_char *,\n+\t\t\t\t     const gfc_array_i4 *, const char *,\n+\t\t\t\t     const GFC_INTEGER_4 *);\n+export_proto_np(__eoshift1_4);\n+\n void\n-__eoshift1_4 (const gfc_array_char * ret, const gfc_array_char * array,\n-    const gfc_array_i4 * h, const char * pbound, const GFC_INTEGER_4 * pwhich)\n+__eoshift1_4 (const gfc_array_char *ret,\n+\t\t\t const gfc_array_char *array,\n+\t\t\t const gfc_array_i4 *h, const char *pbound,\n+\t\t\t const GFC_INTEGER_4 *pwhich)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS - 1];\n@@ -175,4 +183,3 @@ __eoshift1_4 (const gfc_array_char * ret, const gfc_array_char * array,\n         }\n     }\n }\n-"}, {"sha": "3f37eb8f1876700930a3bb0d4c874a4b6996d876", "filename": "libgfortran/generated/eoshift1_8.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Feoshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Feoshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -28,9 +28,17 @@ Boston, MA 02111-1307, USA.  */\n static const char zeros[16] =\n   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n \n+extern void __eoshift1_8 (const gfc_array_char *,\n+\t\t\t\t     const gfc_array_char *,\n+\t\t\t\t     const gfc_array_i8 *, const char *,\n+\t\t\t\t     const GFC_INTEGER_8 *);\n+export_proto_np(__eoshift1_8);\n+\n void\n-__eoshift1_8 (const gfc_array_char * ret, const gfc_array_char * array,\n-    const gfc_array_i8 * h, const char * pbound, const GFC_INTEGER_8 * pwhich)\n+__eoshift1_8 (const gfc_array_char *ret,\n+\t\t\t const gfc_array_char *array,\n+\t\t\t const gfc_array_i8 *h, const char *pbound,\n+\t\t\t const GFC_INTEGER_8 *pwhich)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS - 1];\n@@ -175,4 +183,3 @@ __eoshift1_8 (const gfc_array_char * ret, const gfc_array_char * array,\n         }\n     }\n }\n-"}, {"sha": "7609b2e127d50d4f1b973411b118e59bd4b4bdbf", "filename": "libgfortran/generated/eoshift3_4.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Feoshift3_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Feoshift3_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -28,9 +28,15 @@ Boston, MA 02111-1307, USA.  */\n static const char zeros[16] =\n   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n \n+extern void __eoshift3_4 (gfc_array_char *, gfc_array_char *,\n+\t\t\t\t     gfc_array_i4 *, const gfc_array_char *,\n+\t\t\t\t     GFC_INTEGER_4 *);\n+export_proto_np(__eoshift3_4);\n+\n void\n-__eoshift3_4 (gfc_array_char * ret, gfc_array_char * array,\n-    gfc_array_i4 * h, const gfc_array_char * bound, GFC_INTEGER_4 * pwhich)\n+__eoshift3_4 (gfc_array_char *ret, gfc_array_char *array,\n+\t\t\t gfc_array_i4 *h, const gfc_array_char *bound,\n+\t\t\t GFC_INTEGER_4 *pwhich)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS - 1];\n@@ -190,4 +196,3 @@ __eoshift3_4 (gfc_array_char * ret, gfc_array_char * array,\n         }\n     }\n }\n-"}, {"sha": "3274bcec7ad33783728a65fcf8a8c475091dcfb7", "filename": "libgfortran/generated/eoshift3_8.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Feoshift3_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Feoshift3_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -28,9 +28,15 @@ Boston, MA 02111-1307, USA.  */\n static const char zeros[16] =\n   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n \n+extern void __eoshift3_8 (gfc_array_char *, gfc_array_char *,\n+\t\t\t\t     gfc_array_i8 *, const gfc_array_char *,\n+\t\t\t\t     GFC_INTEGER_8 *);\n+export_proto_np(__eoshift3_8);\n+\n void\n-__eoshift3_8 (gfc_array_char * ret, gfc_array_char * array,\n-    gfc_array_i8 * h, const gfc_array_char * bound, GFC_INTEGER_8 * pwhich)\n+__eoshift3_8 (gfc_array_char *ret, gfc_array_char *array,\n+\t\t\t gfc_array_i8 *h, const gfc_array_char *bound,\n+\t\t\t GFC_INTEGER_8 *pwhich)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS - 1];\n@@ -190,4 +196,3 @@ __eoshift3_8 (gfc_array_char * ret, gfc_array_char * array,\n         }\n     }\n }\n-"}, {"sha": "70c376c952bef74e36b0cdcdf68f13168d80a945", "filename": "libgfortran/generated/exponent_r4.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fexponent_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fexponent_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fexponent_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,8 +22,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+extern GFC_INTEGER_4 exponent_r4 (GFC_REAL_4 s);\n+export_proto(exponent_r4);\n+\n GFC_INTEGER_4\n-prefix(exponent_r4) (GFC_REAL_4 s)\n+exponent_r4 (GFC_REAL_4 s)\n {\n   int ret;\n   frexpf (s, &ret);"}, {"sha": "9d5492017a408df8213187ac352443b20c37199d", "filename": "libgfortran/generated/exponent_r8.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fexponent_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fexponent_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fexponent_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,8 +22,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+extern GFC_INTEGER_4 exponent_r8 (GFC_REAL_8 s);\n+export_proto(exponent_r8);\n+\n GFC_INTEGER_4\n-prefix(exponent_r8) (GFC_REAL_8 s)\n+exponent_r8 (GFC_REAL_8 s)\n {\n   int ret;\n   frexp (s, &ret);"}, {"sha": "273239a96d4f9f52ba00fa0c03ee0a306ed77b57", "filename": "libgfortran/generated/fraction_r4.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Ffraction_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Ffraction_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffraction_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,8 +22,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+extern GFC_REAL_4 fraction_r4 (GFC_REAL_4 s);\n+export_proto(fraction_r4);\n+\n GFC_REAL_4\n-prefix(fraction_r4) (GFC_REAL_4 s)\n+fraction_r4 (GFC_REAL_4 s)\n {\n   int dummy_exp;\n   return frexpf (s, &dummy_exp);"}, {"sha": "b7600bfd604b1c7a3de5cc857f5223f58eea997d", "filename": "libgfortran/generated/fraction_r8.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Ffraction_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Ffraction_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffraction_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,8 +22,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+extern GFC_REAL_8 fraction_r8 (GFC_REAL_8 s);\n+export_proto(fraction_r8);\n+\n GFC_REAL_8\n-prefix(fraction_r8) (GFC_REAL_8 s)\n+fraction_r8 (GFC_REAL_8 s)\n {\n   int dummy_exp;\n   return frexp (s, &dummy_exp);"}, {"sha": "a05a3219fba8f7ea4ecbdb76f65f8eb5cb6af613", "filename": "libgfortran/generated/matmul_c4.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -37,6 +37,9 @@ Boston, MA 02111-1307, USA.  */\n          C(I,J) = C(I,J)+A(I,K)*B(K,J)\n */\n \n+extern void __matmul_c4 (gfc_array_c4 * retarray, gfc_array_c4 * a, gfc_array_c4 * b);\n+export_proto_np(__matmul_c4);\n+\n void\n __matmul_c4 (gfc_array_c4 * retarray, gfc_array_c4 * a, gfc_array_c4 * b)\n {"}, {"sha": "42833b9f6c184a7c3f39d297160bd3121ea3ef1c", "filename": "libgfortran/generated/matmul_c8.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -37,6 +37,9 @@ Boston, MA 02111-1307, USA.  */\n          C(I,J) = C(I,J)+A(I,K)*B(K,J)\n */\n \n+extern void __matmul_c8 (gfc_array_c8 * retarray, gfc_array_c8 * a, gfc_array_c8 * b);\n+export_proto_np(__matmul_c8);\n+\n void\n __matmul_c8 (gfc_array_c8 * retarray, gfc_array_c8 * a, gfc_array_c8 * b)\n {"}, {"sha": "de8a9199d71c2aed1bd050eb0f5d57da7cd5ab90", "filename": "libgfortran/generated/matmul_i4.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -37,6 +37,9 @@ Boston, MA 02111-1307, USA.  */\n          C(I,J) = C(I,J)+A(I,K)*B(K,J)\n */\n \n+extern void __matmul_i4 (gfc_array_i4 * retarray, gfc_array_i4 * a, gfc_array_i4 * b);\n+export_proto_np(__matmul_i4);\n+\n void\n __matmul_i4 (gfc_array_i4 * retarray, gfc_array_i4 * a, gfc_array_i4 * b)\n {"}, {"sha": "b4831e22bd9bfeffe917e6c31eaf33efa36e9967", "filename": "libgfortran/generated/matmul_i8.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -37,6 +37,9 @@ Boston, MA 02111-1307, USA.  */\n          C(I,J) = C(I,J)+A(I,K)*B(K,J)\n */\n \n+extern void __matmul_i8 (gfc_array_i8 * retarray, gfc_array_i8 * a, gfc_array_i8 * b);\n+export_proto_np(__matmul_i8);\n+\n void\n __matmul_i8 (gfc_array_i8 * retarray, gfc_array_i8 * a, gfc_array_i8 * b)\n {"}, {"sha": "491392b7d951f5f4e7ae1d43e772086b789ba5ee", "filename": "libgfortran/generated/matmul_l4.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,6 +26,10 @@ Boston, MA 02111-1307, USA.  */\n \n /* Dimensions: retarray(x,y) a(x, count) b(count,y).\n    Either a or b can be rank 1.  In this case x or y is 1.  */\n+\n+extern void __matmul_l4 (gfc_array_l4 *, gfc_array_l4 *, gfc_array_l4 *);\n+export_proto_np(__matmul_l4);\n+\n void\n __matmul_l4 (gfc_array_l4 * retarray, gfc_array_l4 * a, gfc_array_l4 * b)\n {"}, {"sha": "2a479e7bbd43addda45f59836295095eebebe174", "filename": "libgfortran/generated/matmul_l8.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,6 +26,10 @@ Boston, MA 02111-1307, USA.  */\n \n /* Dimensions: retarray(x,y) a(x, count) b(count,y).\n    Either a or b can be rank 1.  In this case x or y is 1.  */\n+\n+extern void __matmul_l8 (gfc_array_l8 *, gfc_array_l4 *, gfc_array_l4 *);\n+export_proto_np(__matmul_l8);\n+\n void\n __matmul_l8 (gfc_array_l8 * retarray, gfc_array_l4 * a, gfc_array_l4 * b)\n {"}, {"sha": "b12a8a4871904f385fcd4f781562fb36ba31b290", "filename": "libgfortran/generated/matmul_r4.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -37,6 +37,9 @@ Boston, MA 02111-1307, USA.  */\n          C(I,J) = C(I,J)+A(I,K)*B(K,J)\n */\n \n+extern void __matmul_r4 (gfc_array_r4 * retarray, gfc_array_r4 * a, gfc_array_r4 * b);\n+export_proto_np(__matmul_r4);\n+\n void\n __matmul_r4 (gfc_array_r4 * retarray, gfc_array_r4 * a, gfc_array_r4 * b)\n {"}, {"sha": "b0c45c0726ad88b36b4165dee4d6c6bdf43c7daf", "filename": "libgfortran/generated/matmul_r8.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmatmul_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -37,6 +37,9 @@ Boston, MA 02111-1307, USA.  */\n          C(I,J) = C(I,J)+A(I,K)*B(K,J)\n */\n \n+extern void __matmul_r8 (gfc_array_r8 * retarray, gfc_array_r8 * a, gfc_array_r8 * b);\n+export_proto_np(__matmul_r8);\n+\n void\n __matmul_r8 (gfc_array_r8 * retarray, gfc_array_r8 * a, gfc_array_r8 * b)\n {"}, {"sha": "aa7d42841f6349384d1d91c2225048796f7d28d0", "filename": "libgfortran/generated/maxloc0_4_i4.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __maxloc0_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array);\n+export_proto_np(__maxloc0_4_i4);\n+\n void\n __maxloc0_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array)\n {\n@@ -117,6 +121,10 @@ __maxloc0_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array)\n   }\n }\n \n+\n+extern void __mmaxloc0_4_i4 (gfc_array_i4 *, gfc_array_i4 *, gfc_array_l4 *);\n+export_proto_np(__mmaxloc0_4_i4);\n+\n void\n __mmaxloc0_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, gfc_array_l4 * mask)\n {"}, {"sha": "100910eec09dbd5a851ba00c79ce54331d918358", "filename": "libgfortran/generated/maxloc0_4_i8.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __maxloc0_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array);\n+export_proto_np(__maxloc0_4_i8);\n+\n void\n __maxloc0_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array)\n {\n@@ -117,6 +121,10 @@ __maxloc0_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array)\n   }\n }\n \n+\n+extern void __mmaxloc0_4_i8 (gfc_array_i4 *, gfc_array_i8 *, gfc_array_l4 *);\n+export_proto_np(__mmaxloc0_4_i8);\n+\n void\n __mmaxloc0_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array, gfc_array_l4 * mask)\n {"}, {"sha": "0b75c05aa3f92b26118fd4e621412beabb17f715", "filename": "libgfortran/generated/maxloc0_4_r4.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __maxloc0_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array);\n+export_proto_np(__maxloc0_4_r4);\n+\n void\n __maxloc0_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array)\n {\n@@ -117,6 +121,10 @@ __maxloc0_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array)\n   }\n }\n \n+\n+extern void __mmaxloc0_4_r4 (gfc_array_i4 *, gfc_array_r4 *, gfc_array_l4 *);\n+export_proto_np(__mmaxloc0_4_r4);\n+\n void\n __mmaxloc0_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array, gfc_array_l4 * mask)\n {"}, {"sha": "1463d8062ce7c929cfcafc1c54f9f3344b014978", "filename": "libgfortran/generated/maxloc0_4_r8.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __maxloc0_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array);\n+export_proto_np(__maxloc0_4_r8);\n+\n void\n __maxloc0_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array)\n {\n@@ -117,6 +121,10 @@ __maxloc0_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array)\n   }\n }\n \n+\n+extern void __mmaxloc0_4_r8 (gfc_array_i4 *, gfc_array_r8 *, gfc_array_l4 *);\n+export_proto_np(__mmaxloc0_4_r8);\n+\n void\n __mmaxloc0_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array, gfc_array_l4 * mask)\n {"}, {"sha": "822ddd06d346847eaffba2ff054bbb697c382f73", "filename": "libgfortran/generated/maxloc0_8_i4.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __maxloc0_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array);\n+export_proto_np(__maxloc0_8_i4);\n+\n void\n __maxloc0_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array)\n {\n@@ -117,6 +121,10 @@ __maxloc0_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array)\n   }\n }\n \n+\n+extern void __mmaxloc0_8_i4 (gfc_array_i8 *, gfc_array_i4 *, gfc_array_l4 *);\n+export_proto_np(__mmaxloc0_8_i4);\n+\n void\n __mmaxloc0_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array, gfc_array_l4 * mask)\n {"}, {"sha": "8a4ed813fb800c91741cf51dbb389fd976b91f3a", "filename": "libgfortran/generated/maxloc0_8_i8.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __maxloc0_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array);\n+export_proto_np(__maxloc0_8_i8);\n+\n void\n __maxloc0_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array)\n {\n@@ -117,6 +121,10 @@ __maxloc0_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array)\n   }\n }\n \n+\n+extern void __mmaxloc0_8_i8 (gfc_array_i8 *, gfc_array_i8 *, gfc_array_l4 *);\n+export_proto_np(__mmaxloc0_8_i8);\n+\n void\n __mmaxloc0_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, gfc_array_l4 * mask)\n {"}, {"sha": "73a3e2d75b17805aca9552c7ce28298ab9243e24", "filename": "libgfortran/generated/maxloc0_8_r4.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __maxloc0_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array);\n+export_proto_np(__maxloc0_8_r4);\n+\n void\n __maxloc0_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array)\n {\n@@ -117,6 +121,10 @@ __maxloc0_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array)\n   }\n }\n \n+\n+extern void __mmaxloc0_8_r4 (gfc_array_i8 *, gfc_array_r4 *, gfc_array_l4 *);\n+export_proto_np(__mmaxloc0_8_r4);\n+\n void\n __mmaxloc0_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array, gfc_array_l4 * mask)\n {"}, {"sha": "cc3e8d5dc2e87c255f4b6dd38c13fef705d1f008", "filename": "libgfortran/generated/maxloc0_8_r8.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __maxloc0_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array);\n+export_proto_np(__maxloc0_8_r8);\n+\n void\n __maxloc0_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array)\n {\n@@ -117,6 +121,10 @@ __maxloc0_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array)\n   }\n }\n \n+\n+extern void __mmaxloc0_8_r8 (gfc_array_i8 *, gfc_array_r8 *, gfc_array_l4 *);\n+export_proto_np(__mmaxloc0_8_r8);\n+\n void\n __mmaxloc0_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array, gfc_array_l4 * mask)\n {"}, {"sha": "7905c017934a1e73483673f83dfd14d2bd0ecb62", "filename": "libgfortran/generated/maxloc1_4_i4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxloc1_4_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *);\n+export_proto_np(__maxloc1_4_i4);\n+\n void\n-__maxloc1_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n+__maxloc1_4_i4 (gfc_array_i4 *retarray, gfc_array_i4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __maxloc1_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxloc1_4_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxloc1_4_i4);\n+\n void\n __mmaxloc1_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "a08cb037b53e4005dff35dc5dad90e9e7c6dad9b", "filename": "libgfortran/generated/maxloc1_4_i8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxloc1_4_i8 (gfc_array_i4 *, gfc_array_i8 *, index_type *);\n+export_proto_np(__maxloc1_4_i8);\n+\n void\n-__maxloc1_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array, index_type *pdim)\n+__maxloc1_4_i8 (gfc_array_i4 *retarray, gfc_array_i8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __maxloc1_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxloc1_4_i8 (gfc_array_i4 *, gfc_array_i8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxloc1_4_i8);\n+\n void\n __mmaxloc1_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "5c5c3af2cc00ff06aae5f820b15ca56e3b1bf8fa", "filename": "libgfortran/generated/maxloc1_4_r4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxloc1_4_r4 (gfc_array_i4 *, gfc_array_r4 *, index_type *);\n+export_proto_np(__maxloc1_4_r4);\n+\n void\n-__maxloc1_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array, index_type *pdim)\n+__maxloc1_4_r4 (gfc_array_i4 *retarray, gfc_array_r4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __maxloc1_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxloc1_4_r4 (gfc_array_i4 *, gfc_array_r4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxloc1_4_r4);\n+\n void\n __mmaxloc1_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "665c5b5dcaf303d49e98143bb7a308006f6cc59e", "filename": "libgfortran/generated/maxloc1_4_r8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxloc1_4_r8 (gfc_array_i4 *, gfc_array_r8 *, index_type *);\n+export_proto_np(__maxloc1_4_r8);\n+\n void\n-__maxloc1_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array, index_type *pdim)\n+__maxloc1_4_r8 (gfc_array_i4 *retarray, gfc_array_r8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __maxloc1_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxloc1_4_r8 (gfc_array_i4 *, gfc_array_r8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxloc1_4_r8);\n+\n void\n __mmaxloc1_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "dc11e701bb5536fe89015dd8bcd9f37a99cc0bee", "filename": "libgfortran/generated/maxloc1_8_i4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxloc1_8_i4 (gfc_array_i8 *, gfc_array_i4 *, index_type *);\n+export_proto_np(__maxloc1_8_i4);\n+\n void\n-__maxloc1_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array, index_type *pdim)\n+__maxloc1_8_i4 (gfc_array_i8 *retarray, gfc_array_i4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __maxloc1_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxloc1_8_i4 (gfc_array_i8 *, gfc_array_i4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxloc1_8_i4);\n+\n void\n __mmaxloc1_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "68dd21f049198c8d78b79ca36e219bd908dbe5ac", "filename": "libgfortran/generated/maxloc1_8_i8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxloc1_8_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *);\n+export_proto_np(__maxloc1_8_i8);\n+\n void\n-__maxloc1_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n+__maxloc1_8_i8 (gfc_array_i8 *retarray, gfc_array_i8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __maxloc1_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxloc1_8_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxloc1_8_i8);\n+\n void\n __mmaxloc1_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "adeac9a35a5a23302760c287edee3b63d4ac78c8", "filename": "libgfortran/generated/maxloc1_8_r4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxloc1_8_r4 (gfc_array_i8 *, gfc_array_r4 *, index_type *);\n+export_proto_np(__maxloc1_8_r4);\n+\n void\n-__maxloc1_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array, index_type *pdim)\n+__maxloc1_8_r4 (gfc_array_i8 *retarray, gfc_array_r4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __maxloc1_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxloc1_8_r4 (gfc_array_i8 *, gfc_array_r4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxloc1_8_r4);\n+\n void\n __mmaxloc1_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "82e754c36e434e13718c20bb5992959fd675b530", "filename": "libgfortran/generated/maxloc1_8_r8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxloc1_8_r8 (gfc_array_i8 *, gfc_array_r8 *, index_type *);\n+export_proto_np(__maxloc1_8_r8);\n+\n void\n-__maxloc1_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array, index_type *pdim)\n+__maxloc1_8_r8 (gfc_array_i8 *retarray, gfc_array_r8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __maxloc1_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxloc1_8_r8 (gfc_array_i8 *, gfc_array_r8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxloc1_8_r8);\n+\n void\n __mmaxloc1_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "f24735c796b56b268834d26fe8e2448524d83da6", "filename": "libgfortran/generated/maxval_i4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,8 +25,12 @@ Boston, MA 02111-1307, USA.  */\n #include <float.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxval_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *);\n+export_proto_np(__maxval_i4);\n+\n void\n-__maxval_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n+__maxval_i4 (gfc_array_i4 *retarray, gfc_array_i4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -146,6 +150,11 @@ __maxval_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxval_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxval_i4);\n+\n void\n __mmaxval_i4 (gfc_array_i4 * retarray, gfc_array_i4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "e9ef4ecb330a26981afc01d64beb8818566fc503", "filename": "libgfortran/generated/maxval_i8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,8 +25,12 @@ Boston, MA 02111-1307, USA.  */\n #include <float.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxval_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *);\n+export_proto_np(__maxval_i8);\n+\n void\n-__maxval_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n+__maxval_i8 (gfc_array_i8 *retarray, gfc_array_i8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -146,6 +150,11 @@ __maxval_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxval_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxval_i8);\n+\n void\n __mmaxval_i8 (gfc_array_i8 * retarray, gfc_array_i8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "7339490bc5a7902417b1a560c61ab6b699e812a4", "filename": "libgfortran/generated/maxval_r4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,8 +25,12 @@ Boston, MA 02111-1307, USA.  */\n #include <float.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxval_r4 (gfc_array_r4 *, gfc_array_r4 *, index_type *);\n+export_proto_np(__maxval_r4);\n+\n void\n-__maxval_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n+__maxval_r4 (gfc_array_r4 *retarray, gfc_array_r4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -146,6 +150,11 @@ __maxval_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxval_r4 (gfc_array_r4 *, gfc_array_r4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxval_r4);\n+\n void\n __mmaxval_r4 (gfc_array_r4 * retarray, gfc_array_r4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "cbc1fc9ca61884c3e550185c8723d0ffbbf92c94", "filename": "libgfortran/generated/maxval_r8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fmaxval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,8 +25,12 @@ Boston, MA 02111-1307, USA.  */\n #include <float.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __maxval_r8 (gfc_array_r8 *, gfc_array_r8 *, index_type *);\n+export_proto_np(__maxval_r8);\n+\n void\n-__maxval_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n+__maxval_r8 (gfc_array_r8 *retarray, gfc_array_r8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -146,6 +150,11 @@ __maxval_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mmaxval_r8 (gfc_array_r8 *, gfc_array_r8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mmaxval_r8);\n+\n void\n __mmaxval_r8 (gfc_array_r8 * retarray, gfc_array_r8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "c377498aeb8c19d1d0175da8ea5fdde58893c11f", "filename": "libgfortran/generated/minloc0_4_i4.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __minloc0_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array);\n+export_proto_np(__minloc0_4_i4);\n+\n void\n __minloc0_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array)\n {\n@@ -117,6 +121,10 @@ __minloc0_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array)\n   }\n }\n \n+\n+extern void __mminloc0_4_i4 (gfc_array_i4 *, gfc_array_i4 *, gfc_array_l4 *);\n+export_proto_np(__mminloc0_4_i4);\n+\n void\n __mminloc0_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, gfc_array_l4 * mask)\n {"}, {"sha": "56fd2618109e503973009d416cae8965b26f6f09", "filename": "libgfortran/generated/minloc0_4_i8.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __minloc0_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array);\n+export_proto_np(__minloc0_4_i8);\n+\n void\n __minloc0_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array)\n {\n@@ -117,6 +121,10 @@ __minloc0_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array)\n   }\n }\n \n+\n+extern void __mminloc0_4_i8 (gfc_array_i4 *, gfc_array_i8 *, gfc_array_l4 *);\n+export_proto_np(__mminloc0_4_i8);\n+\n void\n __mminloc0_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array, gfc_array_l4 * mask)\n {"}, {"sha": "30b5b1ddde133b9a7973c97c55f8844a77439842", "filename": "libgfortran/generated/minloc0_4_r4.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __minloc0_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array);\n+export_proto_np(__minloc0_4_r4);\n+\n void\n __minloc0_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array)\n {\n@@ -117,6 +121,10 @@ __minloc0_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array)\n   }\n }\n \n+\n+extern void __mminloc0_4_r4 (gfc_array_i4 *, gfc_array_r4 *, gfc_array_l4 *);\n+export_proto_np(__mminloc0_4_r4);\n+\n void\n __mminloc0_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array, gfc_array_l4 * mask)\n {"}, {"sha": "8a4267d653a60e052c7b937f51e0d932305635e4", "filename": "libgfortran/generated/minloc0_4_r8.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __minloc0_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array);\n+export_proto_np(__minloc0_4_r8);\n+\n void\n __minloc0_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array)\n {\n@@ -117,6 +121,10 @@ __minloc0_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array)\n   }\n }\n \n+\n+extern void __mminloc0_4_r8 (gfc_array_i4 *, gfc_array_r8 *, gfc_array_l4 *);\n+export_proto_np(__mminloc0_4_r8);\n+\n void\n __mminloc0_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array, gfc_array_l4 * mask)\n {"}, {"sha": "6d7cb9c4d633417a4ba728b6f1e3ceaac4c37cc2", "filename": "libgfortran/generated/minloc0_8_i4.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __minloc0_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array);\n+export_proto_np(__minloc0_8_i4);\n+\n void\n __minloc0_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array)\n {\n@@ -117,6 +121,10 @@ __minloc0_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array)\n   }\n }\n \n+\n+extern void __mminloc0_8_i4 (gfc_array_i8 *, gfc_array_i4 *, gfc_array_l4 *);\n+export_proto_np(__mminloc0_8_i4);\n+\n void\n __mminloc0_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array, gfc_array_l4 * mask)\n {"}, {"sha": "87d6705ae4ab9a23f5230ee7784f53b1d08ca1d1", "filename": "libgfortran/generated/minloc0_8_i8.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __minloc0_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array);\n+export_proto_np(__minloc0_8_i8);\n+\n void\n __minloc0_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array)\n {\n@@ -117,6 +121,10 @@ __minloc0_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array)\n   }\n }\n \n+\n+extern void __mminloc0_8_i8 (gfc_array_i8 *, gfc_array_i8 *, gfc_array_l4 *);\n+export_proto_np(__mminloc0_8_i8);\n+\n void\n __mminloc0_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, gfc_array_l4 * mask)\n {"}, {"sha": "660a763477964aeafc1501cd2ed2ded5cc77160f", "filename": "libgfortran/generated/minloc0_8_r4.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __minloc0_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array);\n+export_proto_np(__minloc0_8_r4);\n+\n void\n __minloc0_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array)\n {\n@@ -117,6 +121,10 @@ __minloc0_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array)\n   }\n }\n \n+\n+extern void __mminloc0_8_r4 (gfc_array_i8 *, gfc_array_r4 *, gfc_array_l4 *);\n+export_proto_np(__mminloc0_8_r4);\n+\n void\n __mminloc0_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array, gfc_array_l4 * mask)\n {"}, {"sha": "b8c83035ab5c2cada78b72e2cb72acc925c1779f", "filename": "libgfortran/generated/minloc0_8_r8.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+\n+extern void __minloc0_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array);\n+export_proto_np(__minloc0_8_r8);\n+\n void\n __minloc0_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array)\n {\n@@ -117,6 +121,10 @@ __minloc0_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array)\n   }\n }\n \n+\n+extern void __mminloc0_8_r8 (gfc_array_i8 *, gfc_array_r8 *, gfc_array_l4 *);\n+export_proto_np(__mminloc0_8_r8);\n+\n void\n __mminloc0_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array, gfc_array_l4 * mask)\n {"}, {"sha": "eaf4212cd265c95b838727395aa5f08260726a94", "filename": "libgfortran/generated/minloc1_4_i4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minloc1_4_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *);\n+export_proto_np(__minloc1_4_i4);\n+\n void\n-__minloc1_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n+__minloc1_4_i4 (gfc_array_i4 *retarray, gfc_array_i4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __minloc1_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminloc1_4_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminloc1_4_i4);\n+\n void\n __mminloc1_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "0ea3802a5ab5a9335ee5a2c494aae85caa3c3c7a", "filename": "libgfortran/generated/minloc1_4_i8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minloc1_4_i8 (gfc_array_i4 *, gfc_array_i8 *, index_type *);\n+export_proto_np(__minloc1_4_i8);\n+\n void\n-__minloc1_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array, index_type *pdim)\n+__minloc1_4_i8 (gfc_array_i4 *retarray, gfc_array_i8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __minloc1_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminloc1_4_i8 (gfc_array_i4 *, gfc_array_i8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminloc1_4_i8);\n+\n void\n __mminloc1_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "3336f0fbfb41081002ad22cce82064269bd1cd75", "filename": "libgfortran/generated/minloc1_4_r4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minloc1_4_r4 (gfc_array_i4 *, gfc_array_r4 *, index_type *);\n+export_proto_np(__minloc1_4_r4);\n+\n void\n-__minloc1_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array, index_type *pdim)\n+__minloc1_4_r4 (gfc_array_i4 *retarray, gfc_array_r4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __minloc1_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminloc1_4_r4 (gfc_array_i4 *, gfc_array_r4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminloc1_4_r4);\n+\n void\n __mminloc1_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "bb59dccd77d2337792ac8c4d2f022677c7e45f22", "filename": "libgfortran/generated/minloc1_4_r8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minloc1_4_r8 (gfc_array_i4 *, gfc_array_r8 *, index_type *);\n+export_proto_np(__minloc1_4_r8);\n+\n void\n-__minloc1_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array, index_type *pdim)\n+__minloc1_4_r8 (gfc_array_i4 *retarray, gfc_array_r8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __minloc1_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminloc1_4_r8 (gfc_array_i4 *, gfc_array_r8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminloc1_4_r8);\n+\n void\n __mminloc1_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "c30f656a1adbeff3f8acb582a13fbfbfe19e9929", "filename": "libgfortran/generated/minloc1_8_i4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minloc1_8_i4 (gfc_array_i8 *, gfc_array_i4 *, index_type *);\n+export_proto_np(__minloc1_8_i4);\n+\n void\n-__minloc1_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array, index_type *pdim)\n+__minloc1_8_i4 (gfc_array_i8 *retarray, gfc_array_i4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __minloc1_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminloc1_8_i4 (gfc_array_i8 *, gfc_array_i4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminloc1_8_i4);\n+\n void\n __mminloc1_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "4d3e34ad1a9daa5e250e817d7737366152a271b4", "filename": "libgfortran/generated/minloc1_8_i8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minloc1_8_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *);\n+export_proto_np(__minloc1_8_i8);\n+\n void\n-__minloc1_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n+__minloc1_8_i8 (gfc_array_i8 *retarray, gfc_array_i8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __minloc1_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminloc1_8_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminloc1_8_i8);\n+\n void\n __mminloc1_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "e5c1a59bf1081019806c94b2edd24298f9eba7cd", "filename": "libgfortran/generated/minloc1_8_r4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minloc1_8_r4 (gfc_array_i8 *, gfc_array_r4 *, index_type *);\n+export_proto_np(__minloc1_8_r4);\n+\n void\n-__minloc1_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array, index_type *pdim)\n+__minloc1_8_r4 (gfc_array_i8 *retarray, gfc_array_r4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __minloc1_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminloc1_8_r4 (gfc_array_i8 *, gfc_array_r4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminloc1_8_r4);\n+\n void\n __mminloc1_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "ff7ebb913f23dea8bd4862556673f44fdfd54aca", "filename": "libgfortran/generated/minloc1_8_r8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,8 +26,12 @@ Boston, MA 02111-1307, USA.  */\n #include <limits.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minloc1_8_r8 (gfc_array_i8 *, gfc_array_r8 *, index_type *);\n+export_proto_np(__minloc1_8_r8);\n+\n void\n-__minloc1_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array, index_type *pdim)\n+__minloc1_8_r8 (gfc_array_i8 *retarray, gfc_array_r8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -152,6 +156,11 @@ __minloc1_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminloc1_8_r8 (gfc_array_i8 *, gfc_array_r8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminloc1_8_r8);\n+\n void\n __mminloc1_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "23b832621578aa7d23c19680e41c2aed19600a72", "filename": "libgfortran/generated/minval_i4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,8 +25,12 @@ Boston, MA 02111-1307, USA.  */\n #include <float.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minval_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *);\n+export_proto_np(__minval_i4);\n+\n void\n-__minval_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n+__minval_i4 (gfc_array_i4 *retarray, gfc_array_i4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -146,6 +150,11 @@ __minval_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminval_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminval_i4);\n+\n void\n __mminval_i4 (gfc_array_i4 * retarray, gfc_array_i4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "149ba7a1871d528ad2e7fcd5e198a45d7e5d0ab7", "filename": "libgfortran/generated/minval_i8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,8 +25,12 @@ Boston, MA 02111-1307, USA.  */\n #include <float.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minval_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *);\n+export_proto_np(__minval_i8);\n+\n void\n-__minval_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n+__minval_i8 (gfc_array_i8 *retarray, gfc_array_i8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -146,6 +150,11 @@ __minval_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminval_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminval_i8);\n+\n void\n __mminval_i8 (gfc_array_i8 * retarray, gfc_array_i8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "3a4b13df1783d7f8d467095ae3985eef77a9ee1d", "filename": "libgfortran/generated/minval_r4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,8 +25,12 @@ Boston, MA 02111-1307, USA.  */\n #include <float.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minval_r4 (gfc_array_r4 *, gfc_array_r4 *, index_type *);\n+export_proto_np(__minval_r4);\n+\n void\n-__minval_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n+__minval_r4 (gfc_array_r4 *retarray, gfc_array_r4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -146,6 +150,11 @@ __minval_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminval_r4 (gfc_array_r4 *, gfc_array_r4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminval_r4);\n+\n void\n __mminval_r4 (gfc_array_r4 * retarray, gfc_array_r4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "e30c43145809369a26bf1b54c1f7deb1b8b4ea8d", "filename": "libgfortran/generated/minval_r8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fminval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,8 +25,12 @@ Boston, MA 02111-1307, USA.  */\n #include <float.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __minval_r8 (gfc_array_r8 *, gfc_array_r8 *, index_type *);\n+export_proto_np(__minval_r8);\n+\n void\n-__minval_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n+__minval_r8 (gfc_array_r8 *retarray, gfc_array_r8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -146,6 +150,11 @@ __minval_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mminval_r8 (gfc_array_r8 *, gfc_array_r8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mminval_r8);\n+\n void\n __mminval_r8 (gfc_array_r8 * retarray, gfc_array_r8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "d92efab2a62363fad1318d1fd536283e71f955bf", "filename": "libgfortran/generated/nearest_r4.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fnearest_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fnearest_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnearest_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -23,8 +23,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+extern GFC_REAL_4 nearest_r4 (GFC_REAL_4 s, GFC_REAL_4 dir);\n+export_proto(nearest_r4);\n+\n GFC_REAL_4\n-prefix(nearest_r4) (GFC_REAL_4 s, GFC_REAL_4 dir)\n+nearest_r4 (GFC_REAL_4 s, GFC_REAL_4 dir)\n {\n   dir = copysignf (__builtin_inff (), dir);\n   if (FLT_EVAL_METHOD != 0)"}, {"sha": "7dd6838f89e55c53537fcf32690180d175468222", "filename": "libgfortran/generated/nearest_r8.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fnearest_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fnearest_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnearest_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -23,8 +23,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+extern GFC_REAL_8 nearest_r8 (GFC_REAL_8 s, GFC_REAL_8 dir);\n+export_proto(nearest_r8);\n+\n GFC_REAL_8\n-prefix(nearest_r8) (GFC_REAL_8 s, GFC_REAL_8 dir)\n+nearest_r8 (GFC_REAL_8 s, GFC_REAL_8 dir)\n {\n   dir = copysign (__builtin_inf (), dir);\n   if (FLT_EVAL_METHOD != 0)"}, {"sha": "8aa3bf57ebb067a7e1eb19fffff057ed78aebe89", "filename": "libgfortran/generated/pow_c4_i4.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_c4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_c4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_c4_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_COMPLEX_4 pow_c4_i4 (GFC_COMPLEX_4 a, GFC_INTEGER_4 b);\n+export_proto(pow_c4_i4);\n+\n GFC_COMPLEX_4\n-prefix(pow_c4_i4) (GFC_COMPLEX_4 a, GFC_INTEGER_4 b)\n+pow_c4_i4 (GFC_COMPLEX_4 a, GFC_INTEGER_4 b)\n {\n   GFC_COMPLEX_4 pow, x;\n   GFC_INTEGER_4 n, u;"}, {"sha": "007c2774c8a5ae84385010ac292418a41112456b", "filename": "libgfortran/generated/pow_c4_i8.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_c4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_c4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_c4_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_COMPLEX_4 pow_c4_i8 (GFC_COMPLEX_4 a, GFC_INTEGER_8 b);\n+export_proto(pow_c4_i8);\n+\n GFC_COMPLEX_4\n-prefix(pow_c4_i8) (GFC_COMPLEX_4 a, GFC_INTEGER_8 b)\n+pow_c4_i8 (GFC_COMPLEX_4 a, GFC_INTEGER_8 b)\n {\n   GFC_COMPLEX_4 pow, x;\n   GFC_INTEGER_8 n, u;"}, {"sha": "d8bc9fa44e2dd0d7230f8d9ca2f20628e1e4cd09", "filename": "libgfortran/generated/pow_c8_i4.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_c8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_c8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_c8_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_COMPLEX_8 pow_c8_i4 (GFC_COMPLEX_8 a, GFC_INTEGER_4 b);\n+export_proto(pow_c8_i4);\n+\n GFC_COMPLEX_8\n-prefix(pow_c8_i4) (GFC_COMPLEX_8 a, GFC_INTEGER_4 b)\n+pow_c8_i4 (GFC_COMPLEX_8 a, GFC_INTEGER_4 b)\n {\n   GFC_COMPLEX_8 pow, x;\n   GFC_INTEGER_4 n, u;"}, {"sha": "f0e8b3887f45a2f7ec8c1a7f02c5d7d1d46736f5", "filename": "libgfortran/generated/pow_c8_i8.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_c8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_c8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_c8_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_COMPLEX_8 pow_c8_i8 (GFC_COMPLEX_8 a, GFC_INTEGER_8 b);\n+export_proto(pow_c8_i8);\n+\n GFC_COMPLEX_8\n-prefix(pow_c8_i8) (GFC_COMPLEX_8 a, GFC_INTEGER_8 b)\n+pow_c8_i8 (GFC_COMPLEX_8 a, GFC_INTEGER_8 b)\n {\n   GFC_COMPLEX_8 pow, x;\n   GFC_INTEGER_8 n, u;"}, {"sha": "9b2d15301d8fff00eeba6c2b35aed0f438d83d35", "filename": "libgfortran/generated/pow_i4_i4.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_i4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_i4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_i4_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_INTEGER_4 pow_i4_i4 (GFC_INTEGER_4 a, GFC_INTEGER_4 b);\n+export_proto(pow_i4_i4);\n+\n GFC_INTEGER_4\n-prefix(pow_i4_i4) (GFC_INTEGER_4 a, GFC_INTEGER_4 b)\n+pow_i4_i4 (GFC_INTEGER_4 a, GFC_INTEGER_4 b)\n {\n   GFC_INTEGER_4 pow, x;\n   GFC_INTEGER_4 n, u;"}, {"sha": "a721a6b03d0bd9a1fda9158af3bdc3bec9113b91", "filename": "libgfortran/generated/pow_i4_i8.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_i4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_i4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_i4_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_INTEGER_4 pow_i4_i8 (GFC_INTEGER_4 a, GFC_INTEGER_8 b);\n+export_proto(pow_i4_i8);\n+\n GFC_INTEGER_4\n-prefix(pow_i4_i8) (GFC_INTEGER_4 a, GFC_INTEGER_8 b)\n+pow_i4_i8 (GFC_INTEGER_4 a, GFC_INTEGER_8 b)\n {\n   GFC_INTEGER_4 pow, x;\n   GFC_INTEGER_8 n, u;"}, {"sha": "5e0d4527efbca1ad95e3f9fcc733a010fc7231ba", "filename": "libgfortran/generated/pow_i8_i4.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_i8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_i8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_i8_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_INTEGER_8 pow_i8_i4 (GFC_INTEGER_8 a, GFC_INTEGER_4 b);\n+export_proto(pow_i8_i4);\n+\n GFC_INTEGER_8\n-prefix(pow_i8_i4) (GFC_INTEGER_8 a, GFC_INTEGER_4 b)\n+pow_i8_i4 (GFC_INTEGER_8 a, GFC_INTEGER_4 b)\n {\n   GFC_INTEGER_8 pow, x;\n   GFC_INTEGER_4 n, u;"}, {"sha": "2269051d8826c8179de0a2481a67cef74599b7f1", "filename": "libgfortran/generated/pow_i8_i8.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_i8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_i8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_i8_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_INTEGER_8 pow_i8_i8 (GFC_INTEGER_8 a, GFC_INTEGER_8 b);\n+export_proto(pow_i8_i8);\n+\n GFC_INTEGER_8\n-prefix(pow_i8_i8) (GFC_INTEGER_8 a, GFC_INTEGER_8 b)\n+pow_i8_i8 (GFC_INTEGER_8 a, GFC_INTEGER_8 b)\n {\n   GFC_INTEGER_8 pow, x;\n   GFC_INTEGER_8 n, u;"}, {"sha": "51524fef90d454362199214cd27a9ccf5b262dea", "filename": "libgfortran/generated/pow_r4_i4.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_r4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_r4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_r4_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_REAL_4 pow_r4_i4 (GFC_REAL_4 a, GFC_INTEGER_4 b);\n+export_proto(pow_r4_i4);\n+\n GFC_REAL_4\n-prefix(pow_r4_i4) (GFC_REAL_4 a, GFC_INTEGER_4 b)\n+pow_r4_i4 (GFC_REAL_4 a, GFC_INTEGER_4 b)\n {\n   GFC_REAL_4 pow, x;\n   GFC_INTEGER_4 n, u;"}, {"sha": "2e0a71b591e8eda0075ac290ecbc9e1834edd220", "filename": "libgfortran/generated/pow_r4_i8.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_r4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_r4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_r4_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_REAL_4 pow_r4_i8 (GFC_REAL_4 a, GFC_INTEGER_8 b);\n+export_proto(pow_r4_i8);\n+\n GFC_REAL_4\n-prefix(pow_r4_i8) (GFC_REAL_4 a, GFC_INTEGER_8 b)\n+pow_r4_i8 (GFC_REAL_4 a, GFC_INTEGER_8 b)\n {\n   GFC_REAL_4 pow, x;\n   GFC_INTEGER_8 n, u;"}, {"sha": "d07b57135dd08e7e5efda5e56f8be3aef7af9a0b", "filename": "libgfortran/generated/pow_r8_i4.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_r8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_r8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_r8_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_REAL_8 pow_r8_i4 (GFC_REAL_8 a, GFC_INTEGER_4 b);\n+export_proto(pow_r8_i4);\n+\n GFC_REAL_8\n-prefix(pow_r8_i4) (GFC_REAL_8 a, GFC_INTEGER_4 b)\n+pow_r8_i4 (GFC_REAL_8 a, GFC_INTEGER_4 b)\n {\n   GFC_REAL_8 pow, x;\n   GFC_INTEGER_4 n, u;"}, {"sha": "e922eef8b4580583dd215b213e41e1e6c3c65691", "filename": "libgfortran/generated/pow_r8_i8.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_r8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fpow_r8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_r8_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,13 +22,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+GFC_REAL_8 pow_r8_i8 (GFC_REAL_8 a, GFC_INTEGER_8 b);\n+export_proto(pow_r8_i8);\n+\n GFC_REAL_8\n-prefix(pow_r8_i8) (GFC_REAL_8 a, GFC_INTEGER_8 b)\n+pow_r8_i8 (GFC_REAL_8 a, GFC_INTEGER_8 b)\n {\n   GFC_REAL_8 pow, x;\n   GFC_INTEGER_8 n, u;"}, {"sha": "f8fcdcb2da10f93a327eb0ac10d40413970a94bb", "filename": "libgfortran/generated/product_c4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __product_c4 (gfc_array_c4 *, gfc_array_c4 *, index_type *);\n+export_proto_np(__product_c4);\n+\n void\n-__product_c4 (gfc_array_c4 * retarray, gfc_array_c4 *array, index_type *pdim)\n+__product_c4 (gfc_array_c4 *retarray, gfc_array_c4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __product_c4 (gfc_array_c4 * retarray, gfc_array_c4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mproduct_c4 (gfc_array_c4 *, gfc_array_c4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mproduct_c4);\n+\n void\n __mproduct_c4 (gfc_array_c4 * retarray, gfc_array_c4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "4e54c68fcf0256088029e133c80d396de158e907", "filename": "libgfortran/generated/product_c8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __product_c8 (gfc_array_c8 *, gfc_array_c8 *, index_type *);\n+export_proto_np(__product_c8);\n+\n void\n-__product_c8 (gfc_array_c8 * retarray, gfc_array_c8 *array, index_type *pdim)\n+__product_c8 (gfc_array_c8 *retarray, gfc_array_c8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __product_c8 (gfc_array_c8 * retarray, gfc_array_c8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mproduct_c8 (gfc_array_c8 *, gfc_array_c8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mproduct_c8);\n+\n void\n __mproduct_c8 (gfc_array_c8 * retarray, gfc_array_c8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "386fbf9b02e5e75e31bdaf89b7e44301153fc39c", "filename": "libgfortran/generated/product_i4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __product_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *);\n+export_proto_np(__product_i4);\n+\n void\n-__product_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n+__product_i4 (gfc_array_i4 *retarray, gfc_array_i4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __product_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mproduct_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mproduct_i4);\n+\n void\n __mproduct_i4 (gfc_array_i4 * retarray, gfc_array_i4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "0e5ac66ca2d138c876389d4a0828856fa739243b", "filename": "libgfortran/generated/product_i8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __product_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *);\n+export_proto_np(__product_i8);\n+\n void\n-__product_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n+__product_i8 (gfc_array_i8 *retarray, gfc_array_i8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __product_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mproduct_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mproduct_i8);\n+\n void\n __mproduct_i8 (gfc_array_i8 * retarray, gfc_array_i8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "cf38879d3f21389beb7692d40b9a2ce82ad91785", "filename": "libgfortran/generated/product_r4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __product_r4 (gfc_array_r4 *, gfc_array_r4 *, index_type *);\n+export_proto_np(__product_r4);\n+\n void\n-__product_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n+__product_r4 (gfc_array_r4 *retarray, gfc_array_r4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __product_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mproduct_r4 (gfc_array_r4 *, gfc_array_r4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mproduct_r4);\n+\n void\n __mproduct_r4 (gfc_array_r4 * retarray, gfc_array_r4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "adba0bc286b85b4ca06c68a4567cb39122a247ee", "filename": "libgfortran/generated/product_r8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fproduct_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __product_r8 (gfc_array_r8 *, gfc_array_r8 *, index_type *);\n+export_proto_np(__product_r8);\n+\n void\n-__product_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n+__product_r8 (gfc_array_r8 *retarray, gfc_array_r8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __product_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __mproduct_r8 (gfc_array_r8 *, gfc_array_r8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__mproduct_r8);\n+\n void\n __mproduct_r8 (gfc_array_r8 * retarray, gfc_array_r8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "70c32358b34882ec3b77e7cb22941bf14839bdc4", "filename": "libgfortran/generated/reshape_i4.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Freshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Freshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -28,6 +28,11 @@ typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n /* The shape parameter is ignored. We can currently deduce the shape from the\n    return array.  */\n+\n+extern void __reshape_4 (gfc_array_i4 *, gfc_array_i4 *, shape_type *,\n+\t\t\t\t    gfc_array_i4 *, shape_type *);\n+extern_proto_np(__reshape_4);\n+\n void\n __reshape_4 (gfc_array_i4 * ret, gfc_array_i4 * source, shape_type * shape,\n                       gfc_array_i4 * pad, shape_type * order)\n@@ -222,4 +227,3 @@ __reshape_4 (gfc_array_i4 * ret, gfc_array_i4 * source, shape_type * shape,\n         }\n     }\n }\n-"}, {"sha": "af76e254d7d256fe0972298abadaff0bda993192", "filename": "libgfortran/generated/reshape_i8.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Freshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Freshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -28,6 +28,11 @@ typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n \n /* The shape parameter is ignored. We can currently deduce the shape from the\n    return array.  */\n+\n+extern void __reshape_8 (gfc_array_i8 *, gfc_array_i8 *, shape_type *,\n+\t\t\t\t    gfc_array_i8 *, shape_type *);\n+extern_proto_np(__reshape_8);\n+\n void\n __reshape_8 (gfc_array_i8 * ret, gfc_array_i8 * source, shape_type * shape,\n                       gfc_array_i8 * pad, shape_type * order)\n@@ -222,4 +227,3 @@ __reshape_8 (gfc_array_i8 * ret, gfc_array_i8 * source, shape_type * shape,\n         }\n     }\n }\n-"}, {"sha": "9763ef6916d018ac005b80f08ef82d2eed025a52", "filename": "libgfortran/generated/set_exponent_r4.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fset_exponent_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fset_exponent_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fset_exponent_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,8 +22,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+extern GFC_REAL_4 set_exponent_r4 (GFC_REAL_4 s, GFC_INTEGER_4 i);\n+export_proto(set_exponent_r4);\n+\n GFC_REAL_4\n-prefix(set_exponent_r4) (GFC_REAL_4 s, GFC_INTEGER_4 i)\n+set_exponent_r4 (GFC_REAL_4 s, GFC_INTEGER_4 i)\n {\n   int dummy_exp;\n   return scalbnf (frexpf (s, &dummy_exp), i);"}, {"sha": "91b0e71fd6c3678c4261f3da89a121932c979d1e", "filename": "libgfortran/generated/set_exponent_r8.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fset_exponent_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fset_exponent_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fset_exponent_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -22,8 +22,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n \n+extern GFC_REAL_8 set_exponent_r8 (GFC_REAL_8 s, GFC_INTEGER_4 i);\n+export_proto(set_exponent_r8);\n+\n GFC_REAL_8\n-prefix(set_exponent_r8) (GFC_REAL_8 s, GFC_INTEGER_4 i)\n+set_exponent_r8 (GFC_REAL_8 s, GFC_INTEGER_4 i)\n {\n   int dummy_exp;\n   return scalbn (frexp (s, &dummy_exp), i);"}, {"sha": "855ccc06b8754219aec2b74084c1df91a2a923f2", "filename": "libgfortran/generated/shape_i4.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,6 +24,9 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+extern void __shape_4 (gfc_array_i4 * ret, const gfc_array_i4 * array);\n+export_proto_np(__shape_4);\n+\n void\n __shape_4 (gfc_array_i4 * ret, const gfc_array_i4 * array)\n {\n@@ -40,4 +43,3 @@ __shape_4 (gfc_array_i4 * ret, const gfc_array_i4 * array)\n         array->dim[n].ubound + 1 - array->dim[n].lbound;\n     }\n }\n-"}, {"sha": "0dc92f03c3524c451b6005fd37c872db0cd8662d", "filename": "libgfortran/generated/shape_i8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,6 +24,9 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+extern void __shape_8 (gfc_array_i8 * ret, const gfc_array_i8 * array);\n+export_proto_np(__shape_8);\n+\n void\n __shape_8 (gfc_array_i8 * ret, const gfc_array_i8 * array)\n {\n@@ -40,4 +43,3 @@ __shape_8 (gfc_array_i8 * ret, const gfc_array_i8 * array)\n         array->dim[n].ubound + 1 - array->dim[n].lbound;\n     }\n }\n-"}, {"sha": "a4af04ada232aa056c20de9b9f5e0108be018f01", "filename": "libgfortran/generated/sum_c4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __sum_c4 (gfc_array_c4 *, gfc_array_c4 *, index_type *);\n+export_proto_np(__sum_c4);\n+\n void\n-__sum_c4 (gfc_array_c4 * retarray, gfc_array_c4 *array, index_type *pdim)\n+__sum_c4 (gfc_array_c4 *retarray, gfc_array_c4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __sum_c4 (gfc_array_c4 * retarray, gfc_array_c4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __msum_c4 (gfc_array_c4 *, gfc_array_c4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__msum_c4);\n+\n void\n __msum_c4 (gfc_array_c4 * retarray, gfc_array_c4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "f421e80166eec5f3a38d79e5b1ebeb5622369324", "filename": "libgfortran/generated/sum_c8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __sum_c8 (gfc_array_c8 *, gfc_array_c8 *, index_type *);\n+export_proto_np(__sum_c8);\n+\n void\n-__sum_c8 (gfc_array_c8 * retarray, gfc_array_c8 *array, index_type *pdim)\n+__sum_c8 (gfc_array_c8 *retarray, gfc_array_c8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __sum_c8 (gfc_array_c8 * retarray, gfc_array_c8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __msum_c8 (gfc_array_c8 *, gfc_array_c8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__msum_c8);\n+\n void\n __msum_c8 (gfc_array_c8 * retarray, gfc_array_c8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "55b000d83fcfd42f7a4cadf6712145ae3bd7f513", "filename": "libgfortran/generated/sum_i4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __sum_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *);\n+export_proto_np(__sum_i4);\n+\n void\n-__sum_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n+__sum_i4 (gfc_array_i4 *retarray, gfc_array_i4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __sum_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __msum_i4 (gfc_array_i4 *, gfc_array_i4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__msum_i4);\n+\n void\n __msum_i4 (gfc_array_i4 * retarray, gfc_array_i4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "d72bd1287082e849b694b9a9a48582ba0c2637f1", "filename": "libgfortran/generated/sum_i8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __sum_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *);\n+export_proto_np(__sum_i8);\n+\n void\n-__sum_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n+__sum_i8 (gfc_array_i8 *retarray, gfc_array_i8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __sum_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __msum_i8 (gfc_array_i8 *, gfc_array_i8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__msum_i8);\n+\n void\n __msum_i8 (gfc_array_i8 * retarray, gfc_array_i8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "dcb81554e0c47e362c186a682fa96a2147ac2624", "filename": "libgfortran/generated/sum_r4.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __sum_r4 (gfc_array_r4 *, gfc_array_r4 *, index_type *);\n+export_proto_np(__sum_r4);\n+\n void\n-__sum_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n+__sum_r4 (gfc_array_r4 *retarray, gfc_array_r4 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __sum_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __msum_r4 (gfc_array_r4 *, gfc_array_r4 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__msum_r4);\n+\n void\n __msum_r4 (gfc_array_r4 * retarray, gfc_array_r4 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "3a6ea96f2d5a3942571ebe4494e769ce59bf1bcd", "filename": "libgfortran/generated/sum_r8.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Fsum_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,12 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+\n+extern void __sum_r8 (gfc_array_r8 *, gfc_array_r8 *, index_type *);\n+export_proto_np(__sum_r8);\n+\n void\n-__sum_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n+__sum_r8 (gfc_array_r8 *retarray, gfc_array_r8 *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -144,6 +148,11 @@ __sum_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n     }\n }\n \n+\n+extern void __msum_r8 (gfc_array_r8 *, gfc_array_r8 *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(__msum_r8);\n+\n void\n __msum_r8 (gfc_array_r8 * retarray, gfc_array_r8 * array, index_type *pdim, gfc_array_l4 * mask)\n {"}, {"sha": "24ae8a8878cb20ff11c726c1ee9225190ed5af32", "filename": "libgfortran/generated/transpose_i4.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Ftranspose_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Ftranspose_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i4.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -23,6 +23,9 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+extern void __transpose_4 (gfc_array_i4 * ret, gfc_array_i4 * source);\n+export_proto_np(__transpose_4);\n+\n void\n __transpose_4 (gfc_array_i4 * ret, gfc_array_i4 * source)\n {"}, {"sha": "67ef0ddffaac03b9885f2b2465a2fb02697339ac", "filename": "libgfortran/generated/transpose_i8.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Ftranspose_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fgenerated%2Ftranspose_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i8.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -23,6 +23,9 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+extern void __transpose_8 (gfc_array_i8 * ret, gfc_array_i8 * source);\n+export_proto_np(__transpose_8);\n+\n void\n __transpose_8 (gfc_array_i8 * ret, gfc_array_i8 * source)\n {"}, {"sha": "8ab86ba4af54b1aced7800c74bb84284a6016ebc", "filename": "libgfortran/intrinsics/abort.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fabort.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fabort.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fabort.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -21,11 +21,10 @@ Boston, MA 02111-1307, USA.  */\n #include <stdlib.h>\n #include \"libgfortran.h\"\n \n+void PREFIX(abort) (void);\n+export_proto_np(PREFIX(abort));\n \n-void prefix(abort) (void);\n-\n-void prefix(abort) ()\n+void PREFIX(abort) (void)\n {\n   abort ();\n }\n-"}, {"sha": "f674281262316fefb432cdaa1546a7119daf4f24", "filename": "libgfortran/intrinsics/args.c", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fargs.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -28,8 +28,11 @@ Boston, MA 02111-1307, USA.  */\n \n /* Get a commandline argument.  */\n \n+extern void getarg_i4 (GFC_INTEGER_4 *, char *, gfc_charlen_type);\n+iexport_proto(getarg_i4);\n+\n void \n-prefix(getarg_i4) (GFC_INTEGER_4 *pos, char  *val, gfc_charlen_type val_len)\n+getarg_i4 (GFC_INTEGER_4 *pos, char  *val, gfc_charlen_type val_len)\n {\n   int argc;\n   int arglen;\n@@ -50,24 +53,29 @@ prefix(getarg_i4) (GFC_INTEGER_4 *pos, char  *val, gfc_charlen_type val_len)\n       memcpy (val, argv[*pos], arglen);\n     }\n }\n+iexport(getarg_i4);\n \n \n /* INTEGER*8 wrapper of getarg.  */\n \n+extern void getarg_i8 (GFC_INTEGER_8 *, char *, gfc_charlen_type);\n+export_proto (getarg_i8);\n+\n void \n-prefix(getarg_i8) (GFC_INTEGER_8 *pos, char  *val, gfc_charlen_type val_len)\n+getarg_i8 (GFC_INTEGER_8 *pos, char  *val, gfc_charlen_type val_len)\n {\n-  GFC_INTEGER_4 pos4;\n-\n-  pos4 = (GFC_INTEGER_4) *pos;\n-  prefix(getarg_i4) (&pos4, val, val_len);\n+  GFC_INTEGER_4 pos4 = (GFC_INTEGER_4) *pos;\n+  getarg_i4 (&pos4, val, val_len);\n }\n \n \n /* Return the number of commandline arguments.  */\n \n+extern GFC_INTEGER_4 iargc (void);\n+export_proto(iargc);\n+\n GFC_INTEGER_4\n-prefix(iargc) (void)\n+iargc (void)\n {\n   int argc;\n   char **argv;\n@@ -96,14 +104,16 @@ prefix(iargc) (void)\n #define GFC_GC_FAILURE 42\n \n \n+extern void get_command_argument_i4 (GFC_INTEGER_4 *, char *, GFC_INTEGER_4 *,\n+\t\t\t\t     GFC_INTEGER_4 *, gfc_charlen_type);\n+iexport_proto(get_command_argument_i4);\n+\n /* Get a single commandline argument.  */\n \n void\n-prefix(get_command_argument_i4) (GFC_INTEGER_4 *number, \n-\t\t\t\t char *value, \n-\t\t\t\t GFC_INTEGER_4 *length, \n-\t\t\t\t GFC_INTEGER_4 *status, \n-\t\t\t\t gfc_charlen_type value_len)\n+get_command_argument_i4 (GFC_INTEGER_4 *number, char *value, \n+\t\t\t GFC_INTEGER_4 *length, GFC_INTEGER_4 *status, \n+\t\t\t gfc_charlen_type value_len)\n {\n   int argc, arglen = 0, stat_flag = GFC_GC_SUCCESS;\n   char **argv;\n@@ -146,24 +156,26 @@ prefix(get_command_argument_i4) (GFC_INTEGER_4 *number,\n   if (status != NULL)\n     *status = stat_flag;\n }\n+iexport(get_command_argument_i4);\n \n \n /* INTEGER*8 wrapper for get_command_argument.  */\n \n+extern void get_command_argument_i8 (GFC_INTEGER_8 *, char *, GFC_INTEGER_8 *, \n+\t\t\t\t     GFC_INTEGER_8 *, gfc_charlen_type);\n+export_proto(get_command_argument_i8);\n+\n void\n-prefix(get_command_argument_i8) (GFC_INTEGER_8 *number, \n-\t\t\t\t char *value, \n-\t\t\t\t GFC_INTEGER_8 *length, \n-\t\t\t\t GFC_INTEGER_8 *status, \n-\t\t\t\t gfc_charlen_type value_len)\n+get_command_argument_i8 (GFC_INTEGER_8 *number, char *value, \n+\t\t\t GFC_INTEGER_8 *length, GFC_INTEGER_8 *status, \n+\t\t\t gfc_charlen_type value_len)\n {\n   GFC_INTEGER_4 number4;\n   GFC_INTEGER_4 length4;\n   GFC_INTEGER_4 status4;\n \n   number4 = (GFC_INTEGER_4) *number;\n-  prefix (get_command_argument_i4) (&number4, value, &length4, &status4,\n-\t\t\t\t    value_len);\n+  get_command_argument_i4 (&number4, value, &length4, &status4, value_len);\n   if (length)\n     *length = length4;\n   if (status)\n@@ -173,11 +185,13 @@ prefix(get_command_argument_i8) (GFC_INTEGER_8 *number,\n \n /* Return the whole commandline.  */\n \n+extern void get_command_i4 (char *, GFC_INTEGER_4 *, GFC_INTEGER_4 *,\n+\t\t\t    gfc_charlen_type);\n+iexport_proto(get_command_i4);\n+\n void\n-prefix(get_command_i4) (char *command, \n-\t\t\tGFC_INTEGER_4 *length, \n-\t\t\tGFC_INTEGER_4 *status,\n-\t\t\tgfc_charlen_type command_len)\n+get_command_i4 (char *command, GFC_INTEGER_4 *length, GFC_INTEGER_4 *status,\n+\t\tgfc_charlen_type command_len)\n {\n   int i, argc, arglen, thisarg;\n   int stat_flag = GFC_GC_SUCCESS;\n@@ -229,20 +243,23 @@ prefix(get_command_i4) (char *command,\n   if (status != NULL)\n     *status = stat_flag;\n }\n+iexport(get_command_i4);\n \n \n /* INTEGER*8 wrapper for get_command.  */\n \n+extern void get_command_i8 (char *, GFC_INTEGER_8 *, GFC_INTEGER_8 *,\n+\t\t\t    gfc_charlen_type);\n+export_proto(get_command_i8);\n+\n void\n-prefix(get_command_i8) (char *command, \n-\t\t\tGFC_INTEGER_8 *length, \n-\t\t\tGFC_INTEGER_8 *status,\n-\t\t\tgfc_charlen_type command_len)\n+get_command_i8 (char *command, GFC_INTEGER_8 *length, GFC_INTEGER_8 *status,\n+\t\tgfc_charlen_type command_len)\n {\n   GFC_INTEGER_4 length4;\n   GFC_INTEGER_4 status4;\n \n-  prefix (get_command_i4) (command, &length4, &status4, command_len);\n+  get_command_i4 (command, &length4, &status4, command_len);\n   if (length)\n     *length = length4;\n   if (status)"}, {"sha": "012ffc11b3711e8351ef107040a924336650d638", "filename": "libgfortran/intrinsics/associated.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fassociated.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fassociated.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fassociated.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -21,8 +21,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"libgfortran.h\"\n \n-#define associated prefix(associated)\n-\n+extern GFC_LOGICAL_4 associated (const gfc_array_void *,\n+\t\t\t\t const gfc_array_void *);\n+export_proto(associated);\n \n GFC_LOGICAL_4\n associated (const gfc_array_void *pointer, const gfc_array_void *target)"}, {"sha": "58f22534b94d6f7574f1e987c62a57ad34c33e8d", "filename": "libgfortran/intrinsics/cpu_time.c", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fcpu_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fcpu_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcpu_time.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -101,29 +101,43 @@ __cpu_time_1 (long *sec, long *usec)\n #endif  /* HAVE_GETRUSAGE */\n }\n \n-#undef CPU_TIME\n-#define CPU_TIME(KIND)\t\t\t\t\t\t\\\n-void prefix(cpu_time_##KIND) (GFC_REAL_##KIND *__time)\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  long sec, usec;\t\t\t\t\t\t\\\n-  __cpu_time_1 (&sec, &usec);\t\t\t\t\t\\\n-  *__time = (GFC_REAL_##KIND) sec +\t\t\t\t\\\n-\t\t((GFC_REAL_##KIND) usec) * 1.e-6;\t\t\\\n+extern void cpu_time_4 (GFC_REAL_4 *);\n+iexport_proto(cpu_time_4);\n+\n+void cpu_time_4 (GFC_REAL_4 *time)\n+{\n+  long sec, usec;\n+  __cpu_time_1 (&sec, &usec);\n+  *time = sec + usec * (GFC_REAL_4)1.e-6;\n }\n+iexport(cpu_time_4);\n \n-CPU_TIME(4)\n-CPU_TIME(8)\n+extern void cpu_time_8 (GFC_REAL_8 *);\n+export_proto(cpu_time_8);\n+\n+void cpu_time_8 (GFC_REAL_8 *time)\n+{\n+  long sec, usec;\n+  __cpu_time_1 (&sec, &usec);\n+  *time = sec + usec * (GFC_REAL_8)1.e-6;\n+}\n+\n+extern void second_sub (GFC_REAL_4 *);\n+export_proto(second_sub);\n \n void\n-prefix(second_sub) (GFC_REAL_4 *s)\n+second_sub (GFC_REAL_4 *s)\n {\n-  prefix(cpu_time_4)(s);\n+  cpu_time_4 (s);\n }\n \n+extern GFC_REAL_4 second (void);\n+export_proto(second);\n+\n GFC_REAL_4\n-prefix(second) (void)\n+second (void)\n {\n   GFC_REAL_4 s;\n-  prefix(cpu_time_4)(&s);\n+  cpu_time_4 (&s);\n   return s;\n }"}, {"sha": "9fd87855634c6511182b985474fed563cbd7c7a8", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -238,13 +238,20 @@ __cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n }\n \n \n+extern void __cshift0_4 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t const GFC_INTEGER_4 *, const GFC_INTEGER_4 *);\n+export_proto_np(__cshift0_4);\n+\n void\n __cshift0_4 (gfc_array_char * ret, const gfc_array_char * array,\n     const GFC_INTEGER_4 * pshift, const GFC_INTEGER_4 * pdim)\n {\n   __cshift0 (ret, array, *pshift, pdim ? *pdim : 1);\n }\n \n+extern void __cshift0_8 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t const GFC_INTEGER_8 *, const GFC_INTEGER_8 *);\n+export_proto_np(__cshift0_8);\n \n void\n __cshift0_8 (gfc_array_char * ret, const gfc_array_char * array,"}, {"sha": "67679f897a2fb9d632e313119260cefd4489d1d5", "filename": "libgfortran/intrinsics/date_and_time.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fdate_and_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fdate_and_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fdate_and_time.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -121,6 +121,10 @@ Boston, MA 02111-1307, USA.  */\n      be to use ftime.\n */\n \n+extern void date_and_time (char *, char *, char *, gfc_array_i4 *,\n+\t\t\t   GFC_INTEGER_4, GFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(date_and_time);\n+\n void\n date_and_time (char *__date,\n \t       char *__time,"}, {"sha": "d116f1ccaa7b9ae407747b3496f0ba17202fd749", "filename": "libgfortran/intrinsics/env.c", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fenv.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -28,13 +28,14 @@ Boston, MA 02111-1307, USA.  */\n \n \n /* GETENV (NAME, VALUE), g77 intrinsic for retrieving the value of\n- an environment variable. The name of the variable is specified in\n- NAME, and the result is stored into VALUE.  */\n+   an environment variable. The name of the variable is specified in\n+   NAME, and the result is stored into VALUE.  */\n+\n+void PREFIX(getenv) (char *, char *, gfc_charlen_type, gfc_charlen_type);\n+export_proto_np(PREFIX(getenv));\n \n void \n-prefix(getenv) (char * name, \n-\t\tchar * value, \n-\t\tgfc_charlen_type name_len, \n+PREFIX(getenv) (char * name, char * value, gfc_charlen_type name_len, \n \t\tgfc_charlen_type value_len)\n {\n   char *name_nt;\n@@ -89,16 +90,16 @@ prefix(getenv) (char * name,\n /* Processor-specific failure code.  */\n #define GFC_FAILURE 42\n \n+extern void get_environment_variable_i4 (char *, char *, GFC_INTEGER_4 *,\n+\t\t\t\t\t GFC_INTEGER_4 *, GFC_LOGICAL_4 *,\n+\t\t\t\t\t gfc_charlen_type, gfc_charlen_type);\n+iexport_proto(get_environment_variable_i4);\n+\n void\n-prefix(get_environment_variable_i4) \n-  (\n-   char *name,\n-   char *value,\n-   GFC_INTEGER_4 *length,\n-   GFC_INTEGER_4 *status,\n-   GFC_LOGICAL_4 *trim_name,\n-   gfc_charlen_type name_len,\n-   gfc_charlen_type value_len)\n+get_environment_variable_i4 (char *name, char *value, GFC_INTEGER_4 *length,\n+\t\t\t     GFC_INTEGER_4 *status, GFC_LOGICAL_4 *trim_name,\n+\t\t\t     gfc_charlen_type name_len,\n+\t\t\t     gfc_charlen_type value_len)\n {\n   int stat = GFC_SUCCESS, res_len = 0;\n   char *name_nt;\n@@ -159,29 +160,30 @@ prefix(get_environment_variable_i4)\n   if (length != NULL)\n     *length = res_len;\n }\n+iexport(get_environment_variable_i4);\n \n \n /* INTEGER*8 wrapper for get_environment_variable.  */\n \n+extern void get_environment_variable_i8 (char *, char *, GFC_INTEGER_8 *,\n+\t\t\t\t\t GFC_INTEGER_8 *, GFC_LOGICAL_8 *,\n+\t\t\t\t\t gfc_charlen_type, gfc_charlen_type);\n+export_proto(get_environment_variable_i8);\n+\n void\n-prefix(get_environment_variable_i8)\n-  (\n-   char *name,\n-   char *value,\n-   GFC_INTEGER_8 *length,\n-   GFC_INTEGER_8 *status,\n-   GFC_LOGICAL_8 *trim_name,\n-   gfc_charlen_type name_len,\n-   gfc_charlen_type value_len)\n+get_environment_variable_i8 (char *name, char *value, GFC_INTEGER_8 *length,\n+\t\t\t     GFC_INTEGER_8 *status, GFC_LOGICAL_8 *trim_name,\n+\t\t\t     gfc_charlen_type name_len,\n+\t\t\t     gfc_charlen_type value_len)\n {\n   GFC_INTEGER_4 length4, status4;\n   GFC_LOGICAL_4 trim_name4;\n \n   if (trim_name)\n     trim_name4 = *trim_name;\n \n-  prefix (get_environment_variable_i4) (name, value, &length4, &status4, \n-\t\t\t\t\t&trim_name4, name_len, value_len);\n+  get_environment_variable_i4 (name, value, &length4, &status4, \n+\t\t\t       &trim_name4, name_len, value_len);\n \n   if (length)\n     *length = length4;"}, {"sha": "df749a4072c8be693810d251d078a50ff32c7712", "filename": "libgfortran/intrinsics/eoshift0.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Feoshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Feoshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift0.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -187,6 +187,10 @@ __eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n     }\n }\n \n+extern void __eoshift0_4 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t  const GFC_INTEGER_4 *, const char *,\n+\t\t\t  const GFC_INTEGER_4 *);\n+export_proto_np(__eoshift0_4);\n \n void\n __eoshift0_4 (gfc_array_char * ret, const gfc_array_char * array,\n@@ -196,6 +200,10 @@ __eoshift0_4 (gfc_array_char * ret, const gfc_array_char * array,\n   __eoshift0 (ret, array, *pshift, pbound, pdim ? *pdim : 1);\n }\n \n+extern void __eoshift0_8 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t  const GFC_INTEGER_8 *, const char *,\n+\t\t\t  const GFC_INTEGER_8 *);\n+export_proto_np(__eoshift0_8);\n \n void\n __eoshift0_8 (gfc_array_char * ret, const gfc_array_char * array,"}, {"sha": "388486d203c69cb0711d3ad8e9208389f5002cfc", "filename": "libgfortran/intrinsics/eoshift2.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Feoshift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Feoshift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift2.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -203,6 +203,10 @@ __eoshift2 (gfc_array_char * ret, const gfc_array_char * array,\n     }\n }\n \n+extern void __eoshift2_4 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t  const GFC_INTEGER_4 *, const gfc_array_char *,\n+\t\t\t  const GFC_INTEGER_4 *);\n+export_proto_np(__eoshift2_4);\n \n void\n __eoshift2_4 (gfc_array_char * ret, const gfc_array_char * array,\n@@ -212,6 +216,10 @@ __eoshift2_4 (gfc_array_char * ret, const gfc_array_char * array,\n   __eoshift2 (ret, array, *pshift, bound, pdim ? *pdim : 1);\n }\n \n+extern void __eoshift2_8 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t  const GFC_INTEGER_8 *, const gfc_array_char *,\n+\t\t\t  const GFC_INTEGER_8 *);\n+export_proto_np(__eoshift2_8);\n \n void\n __eoshift2_8 (gfc_array_char * ret, const gfc_array_char * array,"}, {"sha": "9a8f976a55d8ada6e4e33d2c611fc06267acdaa1", "filename": "libgfortran/intrinsics/etime.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fetime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fetime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fetime.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -30,8 +30,11 @@ Boston, MA 02111-1307, USA.  */\n #include <sys/resource.h>\n #endif\n \n+extern void etime_sub (gfc_array_r4 *t, GFC_REAL_4 *result);\n+iexport_proto(etime_sub);\n+\n void\n-prefix(etime_sub) (gfc_array_r4 *t, GFC_REAL_4 *result)\n+etime_sub (gfc_array_r4 *t, GFC_REAL_4 *result)\n {\n   GFC_REAL_4 tu, ts, tt, *tp;\n   index_type dim;\n@@ -70,18 +73,25 @@ prefix(etime_sub) (gfc_array_r4 *t, GFC_REAL_4 *result)\n   *tp = ts;\n   *result = tt;\n }\n+iexport(etime_sub);\n+\n+extern GFC_REAL_4 etime (gfc_array_r4 *t);\n+export_proto(etime);\n \n GFC_REAL_4\n-prefix(etime) (gfc_array_r4 *t)\n+etime (gfc_array_r4 *t)\n {\n   GFC_REAL_4 val;\n-  prefix(etime_sub) (t, &val);\n+  etime_sub (t, &val);\n   return val;\n }\n \n /* LAPACK's test programs declares ETIME external, therefore we \n    need this.  */\n \n+extern GFC_REAL_4 etime_ (GFC_REAL_4 *t);\n+export_proto_np(etime_);\n+\n GFC_REAL_4\n etime_ (GFC_REAL_4 *t)\n {\n@@ -94,6 +104,6 @@ etime_ (GFC_REAL_4 *t)\n   desc.dim[0].stride = 1;\n   desc.data = t;\n \n-  prefix(etime_sub) (&desc, &val);\n+  etime_sub (&desc, &val);\n   return val;\n }"}, {"sha": "fcb792e10b015084487d8d8302697dc2c7dd7575", "filename": "libgfortran/intrinsics/exit.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fexit.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -30,18 +30,20 @@ Boston, MA 02111-1307, USA.  */\n /* SUBROUTINE EXIT(STATUS)\n    INTEGER, INTENT(IN), OPTIONAL :: STATUS  */\n \n+extern void exit_i4 (GFC_INTEGER_4 *);\n+export_proto(exit_i4);\n+\n void\n-prefix(exit_i4) (GFC_INTEGER_4 * status)\n+exit_i4 (GFC_INTEGER_4 * status)\n {\n-  if (status == NULL)\n-    exit(0);\n-  exit(*status);\n+  exit (status ? *status : 0);\n }\n \n+extern void exit_i8 (GFC_INTEGER_8 *);\n+export_proto(exit_i8);\n+\n void\n-prefix(exit_i8) (GFC_INTEGER_8 * status)\n+exit_i8 (GFC_INTEGER_8 * status)\n {\n-  if (status == NULL)\n-    exit(0);\n-  exit((int) *status);\n+  exit (status ? *status : 0);\n }"}, {"sha": "3e709094e52248007d594f349688d83d2dbdc1f0", "filename": "libgfortran/intrinsics/flush.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fflush.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fflush.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fflush.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -45,8 +45,11 @@ recursive_flush (gfc_unit *us)\n }\n \n \n+extern void flush_i4 (GFC_INTEGER_4 *);\n+export_proto(flush_i4);\n+\n void\n-prefix(flush_i4) (GFC_INTEGER_4 * unit)\n+flush_i4 (GFC_INTEGER_4 *unit)\n {\n   gfc_unit *us;\n "}, {"sha": "f5594648568c477da47d59dbbbef18971afdb596", "filename": "libgfortran/intrinsics/fnum.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Ffnum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Ffnum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ffnum.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -28,15 +28,20 @@ Boston, MA 02111-1307, USA.  */\n    INTEGER FNUM\n    INTEGER, INTENT(IN), :: UNIT  */\n \n+extern GFC_INTEGER_4 fnum_i4 (GFC_INTEGER_4 *);\n+export_proto(fnum_i4);\n+\n GFC_INTEGER_4\n-prefix(fnum_i4) (GFC_INTEGER_4 * unit)\n+fnum_i4 (GFC_INTEGER_4 *unit)\n {\n   return unit_to_fd (*unit);\n }\n \n+extern GFC_INTEGER_8 fnum_i8 (GFC_INTEGER_8 *);\n+export_proto(fnum_i8);\n \n GFC_INTEGER_8\n-prefix(fnum_i8) (GFC_INTEGER_8 * unit)\n+fnum_i8 (GFC_INTEGER_8 * unit)\n {\n   return unit_to_fd (*unit);\n }"}, {"sha": "4690d149cf828e64b8ee2da542d4ff0f7c1b59a2", "filename": "libgfortran/intrinsics/getXid.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2FgetXid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2FgetXid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2FgetXid.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -30,22 +30,34 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n \n #ifdef HAVE_GETGID\n-GFC_INTEGER_4 prefix(getgid) (void)\n+extern GFC_INTEGER_4 PREFIX(getgid) (void);\n+export_proto_np(PREFIX(getgid));\n+\n+GFC_INTEGER_4\n+PREFIX(getgid) (void)\n {\n-  return (GFC_INTEGER_4) getgid ();\n+  return getgid ();\n }\n #endif\n \n #ifdef HAVE_GETPID\n-GFC_INTEGER_4 prefix(getpid) (void)\n+extern GFC_INTEGER_4 PREFIX(getpid) (void);\n+export_proto_np(PREFIX(getpid));\n+\n+GFC_INTEGER_4\n+PREFIX(getpid) (void)\n {\n-  return (GFC_INTEGER_4) getpid ();\n+  return getpid ();\n }\n #endif\n \n #ifdef HAVE_GETUID\n-GFC_INTEGER_4 prefix(getuid) (void)\n+extern GFC_INTEGER_4 PREFIX(getuid) (void);\n+export_proto_np(PREFIX(getuid));\n+\n+GFC_INTEGER_4\n+PREFIX(getuid) (void)\n {\n-  return (GFC_INTEGER_4) getuid ();\n+  return getuid ();\n }\n #endif"}, {"sha": "318a3a951a5a9d45248f285c77bef4243e109cb5", "filename": "libgfortran/intrinsics/getcwd.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fgetcwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fgetcwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fgetcwd.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -31,9 +31,11 @@ Boston, MA 02111-1307, USA.  */\n \n #include <errno.h>\n \n+extern void getcwd_i4_sub (char *, GFC_INTEGER_4 *, gfc_charlen_type);\n+iexport_proto(getcwd_i4_sub);\n+\n void\n-prefix(getcwd_i4_sub) (char * cwd, GFC_INTEGER_4 * status,\n-\t\t       gfc_charlen_type cwd_len)\n+getcwd_i4_sub (char *cwd, GFC_INTEGER_4 *status, gfc_charlen_type cwd_len)\n {\n   char str[cwd_len + 1], *s;\n   GFC_INTEGER_4 stat;\n@@ -50,22 +52,27 @@ prefix(getcwd_i4_sub) (char * cwd, GFC_INTEGER_4 * status,\n   if (status != NULL) \n     *status = stat;\n }\n+iexport(getcwd_i4_sub);\n+\n+extern void getcwd_i8_sub (char *, GFC_INTEGER_8 *, gfc_charlen_type);\n+export_proto(getcwd_i8_sub);\n \n void\n-prefix(getcwd_i8_sub) (char * cwd, GFC_INTEGER_8 * status,\n-\t\t               gfc_charlen_type cwd_len)\n+getcwd_i8_sub (char *cwd, GFC_INTEGER_8 *status, gfc_charlen_type cwd_len)\n {\n   GFC_INTEGER_4 status4;\n-\n-  prefix (getcwd_i4_sub) (cwd, &status4, cwd_len);\n+  getcwd_i4_sub (cwd, &status4, cwd_len);\n   if (status)\n     *status = status4;\n }\n \n+extern GFC_INTEGER_4 PREFIX(getcwd) (char *, gfc_charlen_type);\n+export_proto_np(PREFIX(getcwd));\n+\n GFC_INTEGER_4\n-prefix(getcwd) (char * cwd, gfc_charlen_type cwd_len)\n+PREFIX(getcwd) (char *cwd, gfc_charlen_type cwd_len)\n {\n   GFC_INTEGER_4 status;\n-  prefix(getcwd_i4_sub) (cwd, &status, cwd_len);\n+  getcwd_i4_sub (cwd, &status, cwd_len);\n   return status;\n }"}, {"sha": "7d5767c91441357fbf1ffefbce3630f17cc3b784", "filename": "libgfortran/intrinsics/ishftc.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fishftc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fishftc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fishftc.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -21,11 +21,8 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"libgfortran.h\"\n \n-#define ishftc4 prefix(ishftc4)\n-GFC_INTEGER_4 ishftc4 (GFC_INTEGER_4, GFC_INTEGER_4, GFC_INTEGER_4);\n-\n-#define ishftc8 prefix(ishftc8)\n-GFC_INTEGER_8 ishftc8 (GFC_INTEGER_8, GFC_INTEGER_8, GFC_INTEGER_8);\n+extern GFC_INTEGER_4 ishftc4 (GFC_INTEGER_4, GFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(ishftc4);\n \n GFC_INTEGER_4\n ishftc4 (GFC_INTEGER_4 i, GFC_INTEGER_4 shift, GFC_INTEGER_4 size)\n@@ -44,6 +41,8 @@ ishftc4 (GFC_INTEGER_4 i, GFC_INTEGER_4 shift, GFC_INTEGER_4 size)\n   return (i & mask) | (bits >> (size - shift)) | ((i << shift) & ~mask);\n }\n \n+extern GFC_INTEGER_8 ishftc8 (GFC_INTEGER_8, GFC_INTEGER_8, GFC_INTEGER_8);\n+export_proto(ishftc8);\n \n GFC_INTEGER_8\n ishftc8 (GFC_INTEGER_8 i, GFC_INTEGER_8 shift, GFC_INTEGER_8 size)"}, {"sha": "140547bf482fb330f80999752bc6526bc60d82b1", "filename": "libgfortran/intrinsics/mvbits.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fmvbits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fmvbits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fmvbits.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -29,6 +29,10 @@ Boston, MA 02111-1307, USA.  */\n /* MVBITS copies LEN bits starting at bit position FROMPOS from FROM\n    into TO, starting at bit position TOPOS.  */\n \n+extern void SUB_NAME (const TYPE *, const GFC_INTEGER_4 *,\n+\t\t      const GFC_INTEGER_4 *, TYPE *, const GFC_INTEGER_4 *);\n+export_proto(SUB_NAME);\n+\n void \n SUB_NAME (const TYPE *from, const GFC_INTEGER_4 *frompos,\n           const GFC_INTEGER_4 *len, TYPE *to, const GFC_INTEGER_4 *topos)\n@@ -46,15 +50,15 @@ SUB_NAME (const TYPE *from, const GFC_INTEGER_4 *frompos,\n #ifndef SUB_NAME\n #  define TYPE GFC_INTEGER_4\n #  define UTYPE GFC_UINTEGER_4\n-#  define SUB_NAME prefix (mvbits_i4)\n+#  define SUB_NAME mvbits_i4\n #  include \"mvbits.c\"\n #  undef SUB_NAME\n #  undef TYPE\n #  undef UTYPE\n \n #  define TYPE GFC_INTEGER_8\n #  define UTYPE GFC_UINTEGER_8\n-#  define SUB_NAME prefix (mvbits_i8)\n+#  define SUB_NAME mvbits_i8\n #  include \"mvbits.c\"\n #  undef SUB_NAME\n #  undef TYPE"}, {"sha": "0332b7957a83bd9a7aa4f85af1d766e0ebda4f4b", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -65,6 +65,10 @@ Boston, MA 02111-1307, USA.  */\n There are two variants of the PACK intrinsic: one, where MASK is\n array valued, and the other one where MASK is scalar.  */\n \n+extern void __pack (gfc_array_char *, const gfc_array_char *,\n+\t\t    const gfc_array_l4 *, const gfc_array_char *);\n+export_proto_np(__pack);\n+\n void\n __pack (gfc_array_char * ret, const gfc_array_char * array,\n \tconst gfc_array_l4 * mask, const gfc_array_char * vector)\n@@ -265,6 +269,10 @@ __pack (gfc_array_char * ret, const gfc_array_char * array,\n     }\n }\n \n+extern void __pack_s (gfc_array_char *ret, const gfc_array_char *array,\n+\t\t      const GFC_LOGICAL_4 *, const gfc_array_char *);\n+export_proto_np(__pack_s);\n+\n void\n __pack_s (gfc_array_char * ret, const gfc_array_char * array,\n \t  const GFC_LOGICAL_4 * mask, const gfc_array_char * vector)"}, {"sha": "7989020fbc48fbb7f6663a8fb9ca9d16b06f036f", "filename": "libgfortran/intrinsics/rand.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Frand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Frand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frand.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -38,19 +38,29 @@ static GFC_UINTEGER_8 rand_seed = 1;\n \n /* Set the seed of the irand generator.  Note 0 is a bad seed.  */\n \n-void\n-prefix(srand) (GFC_INTEGER_4 *i)\n+static void\n+srand_internal (GFC_INTEGER_8 i)\n {\n-  rand_seed = (GFC_UINTEGER_8) (*i != 0) ? *i : 123459876;\n+  rand_seed = i ? i : 123459876;\n }\n \n+extern void PREFIX(srand) (GFC_INTEGER_4 *i);\n+export_proto_np(PREFIX(srand));\n+\n+void\n+PREFIX(srand) (GFC_INTEGER_4 *i)\n+{\n+  srand_internal (*i);\n+}\n \n /* Return an INTEGER in the range [1,GFC_RAND_M-1].  */\n \n+extern GFC_INTEGER_4 irand (GFC_INTEGER_4 *);\n+iexport_proto(irand);\n+\n GFC_INTEGER_4\n-prefix(irand) (GFC_INTEGER_4 *i)\n+irand (GFC_INTEGER_4 *i)\n {\n-  \n   GFC_INTEGER_4 j;\n   if (i)\n     j = *i;\n@@ -66,25 +76,29 @@ prefix(irand) (GFC_INTEGER_4 *i)\n     /* Reset the RN sequence to system-dependent sequence and return the\n        first value.  */\n     case 1:\n-      j = 0;\n-      prefix(srand) (&j);\n+      srand_internal (0);\n       break;\n     \n     /* Seed the RN sequence with j and return the first value.  */\n     default:\n-      prefix(srand) (&j);\n+      srand_internal (j);\n+      break;\n    }\n \n    rand_seed = GFC_RAND_A * rand_seed % GFC_RAND_M;\n \n    return (GFC_INTEGER_4) rand_seed;\n }\n+iexport(irand);\n \n \n /*  Return a random REAL in the range [0,1).  */\n \n+extern GFC_REAL_4 PREFIX(rand) (GFC_INTEGER_4 *i);\n+export_proto_np(PREFIX(rand));\n+\n GFC_REAL_4\n-prefix(rand) (GFC_INTEGER_4 *i)\n+PREFIX(rand) (GFC_INTEGER_4 *i)\n {\n-  return normalize_r4_i4 (prefix(irand) (i) - 1, GFC_RAND_M1 - 1);\n+  return normalize_r4_i4 (irand (i) - 1, GFC_RAND_M1 - 1);\n }"}, {"sha": "0ea60eccac7805c062577f74935961f5d817268b", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -20,6 +20,20 @@ License along with libgfor; see the file COPYING.LIB.  If not,\n write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#include \"libgfortran.h\"\n+\n+extern void random_r4 (GFC_REAL_4 *);\n+iexport_proto(random_r4);\n+\n+extern void random_r8 (GFC_REAL_8 *);\n+iexport_proto(random_r8);\n+\n+extern void arandom_r4 (gfc_array_r4 *);\n+export_proto(arandom_r4);\n+\n+extern void arandom_r8 (gfc_array_r8 *);\n+export_proto(arandom_r8);\n+\n #if 0\n \n /*  The Mersenne Twister code is currently commented out due to\n@@ -45,7 +59,6 @@ Boston, MA 02111-1307, USA.  */\n \tGeneration. ( Early in 1998 ).  */\n \n \n-#include \"config.h\"\n #include <stdio.h>\n #include <stdlib.h>\n #include <sys/types.h>\n@@ -56,8 +69,6 @@ Boston, MA 02111-1307, USA.  */\n #include <unistd.h>\n #endif\n \n-#include \"libgfortran.h\"\n-\n /*Use the 'big' generator by default ( period -> 2**19937 ).  */\n \n #define MT19937\n@@ -89,8 +100,7 @@ static unsigned int seed[N];\n    and also reading and writing of the seed.  */\n \n void\n-random_seed (GFC_INTEGER_4 * size, const gfc_array_i4 * put,\n-\t     const gfc_array_i4 * get)\n+random_seed (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n {\n   /* Initialize the seed in system dependent manner.  */\n   if (get == NULL && put == NULL && size == NULL)\n@@ -167,6 +177,7 @@ random_seed (GFC_INTEGER_4 * size, const gfc_array_i4 * put,\n \tget->data[i * get->dim[0].stride] = seed[i];\n     }\n }\n+iexport(random_seed);\n \n /* Here is the internal routine which generates the random numbers\n    in 'batches' based upon the need for a new batch.\n@@ -197,7 +208,6 @@ random_generate (void)\n \n /* A routine to return a REAL(KIND=4).  */\n \n-#define random_r4 prefix(random_r4)\n void\n random_r4 (GFC_REAL_4 * harv)\n {\n@@ -209,10 +219,10 @@ random_r4 (GFC_REAL_4 * harv)\n   *harv = (GFC_REAL_4) ((GFC_REAL_4) (GFC_UINTEGER_4) seed[i++] /\n \t\t\t(GFC_REAL_4) (~(GFC_UINTEGER_4) 0));\n }\n+iexport(random_r4);\n \n /* A routine to return a REAL(KIND=8).  */\n \n-#define random_r8 prefix(random_r8)\n void\n random_r8 (GFC_REAL_8 * harv)\n {\n@@ -225,12 +235,12 @@ random_r8 (GFC_REAL_8 * harv)\n \t  (GFC_REAL_8) (~(GFC_UINTEGER_8) 0);\n   i += 2;\n }\n+iexport(random_r8);\n \n /* Code to handle arrays will follow here.  */\n \n /* REAL(KIND=4) REAL array.  */\n \n-#define arandom_r4 prefix(arandom_r4)\n void\n arandom_r4 (gfc_array_r4 * harv)\n {\n@@ -304,7 +314,6 @@ arandom_r4 (gfc_array_r4 * harv)\n \n /* REAL(KIND=8) array.  */\n \n-#define arandom_r8 prefix(arandom_r8)\n void\n arandom_r8 (gfc_array_r8 * harv)\n {\n@@ -376,8 +385,8 @@ arandom_r8 (gfc_array_r8 * harv)\n \t}\n     }\n }\n-#endif /* Mersenne Twister code */\n \n+#else\n \n /* George Marsaglia's KISS (Keep It Simple Stupid) random number generator.\n \n@@ -418,9 +427,6 @@ arandom_r8 (gfc_array_r8 * harv)\n \"There is no copyright on the code below.\" included the original\n KISS algorithm.  */\n \n-#include \"config.h\"\n-#include \"libgfortran.h\"\n-\n #define GFC_SL(k, n)\t((k)^((k)<<(n)))\n #define GFC_SR(k, n)\t((k)^((k)>>(n)))\n \n@@ -436,7 +442,6 @@ static GFC_UINTEGER_4 kiss_seed[4] = KISS_DEFAULT_SEED;\n static GFC_UINTEGER_4\n kiss_random_kernel(void)\n {\n-\n   GFC_UINTEGER_4 kiss;\n \n   kiss_seed[0] = 69069 * kiss_seed[0] + 1327217885;\n@@ -446,16 +451,14 @@ kiss_random_kernel(void)\n   kiss = kiss_seed[0] + kiss_seed[1] + (kiss_seed[2] << 16) + kiss_seed[3];\n \n   return kiss;\n-\n }\n \n /*  This function produces a REAL(4) value from the uniform distribution\n     with range [0,1).  */\n \n void\n-prefix(random_r4) (GFC_REAL_4 *x)\n+random_r4 (GFC_REAL_4 *x)\n {\n-\n   GFC_UINTEGER_4 kiss;\n \n   kiss = kiss_random_kernel ();\n@@ -464,26 +467,27 @@ prefix(random_r4) (GFC_REAL_4 *x)\n   kiss_random_kernel ();\n   *x = normalize_r4_i4 (kiss, ~(GFC_UINTEGER_4) 0);\n }\n+iexport(random_r4);\n \n /*  This function produces a REAL(8) value from the uniform distribution\n     with range [0,1).  */\n \n void\n-prefix(random_r8) (GFC_REAL_8 *x)\n+random_r8 (GFC_REAL_8 *x)\n {\n-\n   GFC_UINTEGER_8 kiss;\n \n   kiss = ((GFC_UINTEGER_8)kiss_random_kernel ()) << 32;\n   kiss += kiss_random_kernel ();\n   *x = normalize_r8_i8 (kiss, ~(GFC_UINTEGER_8) 0);\n }\n+iexport(random_r8);\n \n /*  This function fills a REAL(4) array with values from the uniform\n     distribution with range [0,1).  */\n \n void\n-prefix(arandom_r4) (gfc_array_r4 *x)\n+arandom_r4 (gfc_array_r4 *x)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -513,7 +517,7 @@ prefix(arandom_r4) (gfc_array_r4 *x)\n \n   while (dest)\n     {\n-      prefix(random_r4) (dest);\n+      random_r4 (dest);\n \n       /* Advance to the next element.  */\n       dest += stride0;\n@@ -547,7 +551,7 @@ prefix(arandom_r4) (gfc_array_r4 *x)\n     distribution with range [0,1).  */\n \n void\n-prefix(arandom_r8) (gfc_array_r8 *x)\n+arandom_r8 (gfc_array_r8 *x)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -577,7 +581,7 @@ prefix(arandom_r8) (gfc_array_r8 *x)\n \n   while (dest)\n     {\n-      prefix(random_r8) (dest);\n+      random_r8 (dest);\n \n       /* Advance to the next element.  */\n       dest += stride0;\n@@ -607,8 +611,8 @@ prefix(arandom_r8) (gfc_array_r8 *x)\n     }\n }\n \n-/* prefix(random_seed) is used to seed the PRNG with either a default\n-   set of seeds or user specified set of seeds.  prefix(random_seed) \n+/* random_seed is used to seed the PRNG with either a default\n+   set of seeds or user specified set of seeds.  random_seed \n    must be called with no argument or exactly one argument.  */\n \n void\n@@ -666,3 +670,6 @@ random_seed (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n         get->data[i * get->dim[0].stride] = (GFC_INTEGER_4) kiss_seed[i];\n     }\n }\n+iexport(random_seed);\n+\n+#endif /* mersenne twister */"}, {"sha": "aecc6b6469de02b4bc2673d538fb41e50cfaf77d", "filename": "libgfortran/intrinsics/reshape_generic.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Freshape_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Freshape_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Freshape_generic.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -28,6 +28,9 @@ Boston, MA 02111-1307, USA.  */\n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) parray;\n \n+extern void __reshape (parray *, parray *, shape_type *,\n+\t\t       parray *, shape_type *);\n+export_proto_np(__reshape);\n \n /* The shape parameter is ignored. We can currently deduce the shape from the\n    return array.  */"}, {"sha": "b001f3430df576668d09714dd97bc3113e3ff812", "filename": "libgfortran/intrinsics/size.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fsize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fsize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsize.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -21,7 +21,8 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"libgfortran.h\"\n \n-index_type size0 (const array_t * array)\n+index_type\n+size0 (const array_t * array)\n {\n   int n;\n   index_type size;\n@@ -37,9 +38,13 @@ index_type size0 (const array_t * array)\n     }\n   return size;\n }\n+iexport(size0);\n \n-#define size1 prefix(size1)\n-index_type size1 (const array_t * array, index_type dim)\n+extern index_type size1 (const array_t * array, index_type dim);\n+export_proto(size1);\n+\n+index_type\n+size1 (const array_t * array, index_type dim)\n {\n   index_type size;\n "}, {"sha": "0cada54c99f130f4495d50ae416e23a2f39e24bc", "filename": "libgfortran/intrinsics/spread_generic.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fspread_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fspread_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fspread_generic.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,6 +25,10 @@ Boston, MA 02111-1307, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n+extern void __spread (const gfc_array_char *, const gfc_array_char *,\n+\t\t      const index_type *, const index_type *);\n+export_proto_np(__spread);\n+\n void\n __spread (const gfc_array_char * ret, const gfc_array_char * source,\n     const index_type * along, const index_type * pncopies)"}, {"sha": "de4a14736fa0fbff0b1e15a34449ab06b5dce009", "filename": "libgfortran/intrinsics/stat.c", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstat.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -52,9 +52,13 @@ Boston, MA 02111-1307, USA.  */\n    CHARACTER(len=*), INTENT(IN) :: FILE\n    INTEGER, INTENT(OUT), :: SARRAY(13)  */\n \n+extern void stat_i4_sub (char *, gfc_array_i4 *, GFC_INTEGER_4 *,\n+\t\t\t gfc_charlen_type);\n+iexport_proto(stat_i4_sub);\n+\n void\n-prefix(stat_i4_sub) (char * name, gfc_array_i4 * sarray,\n-                     GFC_INTEGER_4 * status,  gfc_charlen_type name_len)\n+stat_i4_sub (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n+\t     gfc_charlen_type name_len)\n {\n   int val;\n   char *str;\n@@ -68,10 +72,10 @@ prefix(stat_i4_sub) (char * name, gfc_array_i4 * sarray,\n \n   /* If the array is too small, abort.  */\n   if (sarray->dim[0].ubound + 1 - sarray->dim[0].lbound < 13)\n-\truntime_error (\"Array size of SARRAY is too small.\");\n+    runtime_error (\"Array size of SARRAY is too small.\");\n \n   if (sarray->dim[0].stride == 0)\n-\tsarray->dim[0].stride = 1;\n+    sarray->dim[0].stride = 1;\n \n   /* Trim trailing spaces from name.  */\n   while (name_len > 0 && name[name_len - 1] == ' ')\n@@ -141,10 +145,15 @@ prefix(stat_i4_sub) (char * name, gfc_array_i4 * sarray,\n   if (status != NULL) \n     *status = (val == 0) ? 0 : errno;\n }\n+iexport(stat_i4_sub);\n+\n+extern void stat_i8_sub (char *, gfc_array_i8 *, GFC_INTEGER_8 *,\n+\t\t\t gfc_charlen_type);\n+iexport_proto(stat_i8_sub);\n \n void\n-prefix(stat_i8_sub) (char * name, gfc_array_i8 * sarray,\n-                     GFC_INTEGER_8 * status, gfc_charlen_type name_len)\n+stat_i8_sub (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n+\t     gfc_charlen_type name_len)\n {\n   int val;\n   char *str;\n@@ -158,10 +167,10 @@ prefix(stat_i8_sub) (char * name, gfc_array_i8 * sarray,\n \n   /* If the array is too small, abort.  */\n   if (sarray->dim[0].ubound + 1 - sarray->dim[0].lbound < 13)\n-\truntime_error (\"Array size of SARRAY is too small.\");\n+    runtime_error (\"Array size of SARRAY is too small.\");\n \n   if (sarray->dim[0].stride == 0)\n-\tsarray->dim[0].stride = 1;\n+    sarray->dim[0].stride = 1;\n \n   /* Trim trailing spaces from name.  */\n   while (name_len > 0 && name[name_len - 1] == ' ')\n@@ -231,25 +240,27 @@ prefix(stat_i8_sub) (char * name, gfc_array_i8 * sarray,\n   if (status != NULL) \n     *status = (val == 0) ? 0 : errno;\n }\n+iexport(stat_i8_sub);\n \n+extern GFC_INTEGER_4 stat_i4 (char *, gfc_array_i4 *, gfc_charlen_type);\n+export_proto(stat_i4);\n \n GFC_INTEGER_4\n-prefix(stat_i4) (char * name, gfc_array_i4 * sarray,\n-                 gfc_charlen_type name_len)\n+stat_i4 (char *name, gfc_array_i4 *sarray, gfc_charlen_type name_len)\n {\n-\n   GFC_INTEGER_4 val;\n-  prefix(stat_i4_sub) (name, sarray, &val, name_len);\n+  stat_i4_sub (name, sarray, &val, name_len);\n   return val;\n }\n \n+extern GFC_INTEGER_8 stat_i8 (char *, gfc_array_i8 *, gfc_charlen_type);\n+export_proto(stat_i8);\n \n GFC_INTEGER_8\n-prefix(stat_i8) (char * name, gfc_array_i8 * sarray,\n-                 gfc_charlen_type name_len)\n+stat_i8 (char *name, gfc_array_i8 *sarray, gfc_charlen_type name_len)\n {\n   GFC_INTEGER_8 val;\n-  prefix(stat_i8_sub) (name, sarray, &val, name_len);\n+  stat_i8_sub (name, sarray, &val, name_len);\n   return val;\n }\n \n@@ -264,9 +275,11 @@ prefix(stat_i8) (char * name, gfc_array_i8 * sarray,\n    INTEGER, INTENT(IN) :: UNIT \n    INTEGER, INTENT(OUT) :: SARRAY(13)  */\n \n+extern void fstat_i4_sub (GFC_INTEGER_4 *, gfc_array_i4 *, GFC_INTEGER_4 *);\n+iexport_proto(fstat_i4_sub);\n+\n void\n-prefix(fstat_i4_sub) (GFC_INTEGER_4 * unit, gfc_array_i4 * sarray,\n-                     GFC_INTEGER_4 * status)\n+fstat_i4_sub (GFC_INTEGER_4 *unit, gfc_array_i4 *sarray, GFC_INTEGER_4 *status)\n {\n   int val;\n   struct stat sb;\n@@ -279,10 +292,10 @@ prefix(fstat_i4_sub) (GFC_INTEGER_4 * unit, gfc_array_i4 * sarray,\n \n   /* If the array is too small, abort.  */\n   if (sarray->dim[0].ubound + 1 - sarray->dim[0].lbound < 13)\n-\truntime_error (\"Array size of SARRAY is too small.\");\n+    runtime_error (\"Array size of SARRAY is too small.\");\n \n   if (sarray->dim[0].stride == 0)\n-\tsarray->dim[0].stride = 1;\n+    sarray->dim[0].stride = 1;\n \n   /* Convert Fortran unit number to C file descriptor.  */\n   val = unit_to_fd (*unit);\n@@ -346,10 +359,13 @@ prefix(fstat_i4_sub) (GFC_INTEGER_4 * unit, gfc_array_i4 * sarray,\n   if (status != NULL) \n     *status = (val == 0) ? 0 : errno;\n }\n+iexport(fstat_i4_sub);\n+\n+extern void fstat_i8_sub (GFC_INTEGER_8 *, gfc_array_i8 *, GFC_INTEGER_8 *);\n+iexport_proto(fstat_i8_sub);\n \n void\n-prefix(fstat_i8_sub) (GFC_INTEGER_8 * unit, gfc_array_i8 * sarray,\n-                     GFC_INTEGER_8 * status)\n+fstat_i8_sub (GFC_INTEGER_8 *unit, gfc_array_i8 *sarray, GFC_INTEGER_8 *status)\n {\n   int val;\n   struct stat sb;\n@@ -362,10 +378,10 @@ prefix(fstat_i8_sub) (GFC_INTEGER_8 * unit, gfc_array_i8 * sarray,\n \n   /* If the array is too small, abort.  */\n   if (sarray->dim[0].ubound + 1 - sarray->dim[0].lbound < 13)\n-\truntime_error (\"Array size of SARRAY is too small.\");\n+    runtime_error (\"Array size of SARRAY is too small.\");\n \n   if (sarray->dim[0].stride == 0)\n-\tsarray->dim[0].stride = 1;\n+    sarray->dim[0].stride = 1;\n \n   /* Convert Fortran unit number to C file descriptor.  */\n   val = unit_to_fd ((int) *unit);\n@@ -429,21 +445,26 @@ prefix(fstat_i8_sub) (GFC_INTEGER_8 * unit, gfc_array_i8 * sarray,\n   if (status != NULL) \n     *status = (val == 0) ? 0 : errno;\n }\n+iexport(fstat_i8_sub);\n \n+extern GFC_INTEGER_4 fstat_i4 (GFC_INTEGER_4 *, gfc_array_i4 *);\n+export_proto(fstat_i4);\n \n GFC_INTEGER_4\n-prefix(fstat_i4) (GFC_INTEGER_4 * unit, gfc_array_i4 * sarray)\n+fstat_i4 (GFC_INTEGER_4 *unit, gfc_array_i4 *sarray)\n {\n   GFC_INTEGER_4 val;\n-  prefix(fstat_i4_sub) (unit, sarray, &val);\n+  fstat_i4_sub (unit, sarray, &val);\n   return val;\n }\n \n+extern GFC_INTEGER_8 fstat_i8 (GFC_INTEGER_8 *, gfc_array_i8 *);\n+export_proto(fstat_i8);\n \n GFC_INTEGER_8\n-prefix(fstat_i8) (GFC_INTEGER_8 * unit, gfc_array_i8 * sarray)\n+fstat_i8 (GFC_INTEGER_8 *unit, gfc_array_i8 *sarray)\n {\n   GFC_INTEGER_8 val;\n-  prefix(fstat_i8_sub) (unit, sarray, &val);\n+  fstat_i8_sub (unit, sarray, &val);\n   return val;\n }"}, {"sha": "f5b5bc141fb86f927ff013590ac0657a1d02099f", "filename": "libgfortran/intrinsics/string_intrinsics.c", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstring_intrinsics.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -35,40 +35,40 @@ Boston, MA 02111-1307, USA.  */\n \n /* String functions.  */\n \n-#define copy_string prefix(copy_string)\n-void copy_string (GFC_INTEGER_4, char *, GFC_INTEGER_4, const char *);\n+extern void copy_string (GFC_INTEGER_4, char *, GFC_INTEGER_4, const char *);\n+export_proto(copy_string);\n \n-#define concat_string prefix(concat_string)\n-void concat_string (GFC_INTEGER_4, char *,\n-\t\t    GFC_INTEGER_4, const char *,\n-\t\t    GFC_INTEGER_4, const char *);\n+extern void concat_string (GFC_INTEGER_4, char *,\n+\t\t\t   GFC_INTEGER_4, const char *,\n+\t\t\t   GFC_INTEGER_4, const char *);\n+export_proto(concat_string);\n \n-#define string_len_trim prefix(string_len_trim)\n-GFC_INTEGER_4 string_len_trim (GFC_INTEGER_4, const char *);\n+extern GFC_INTEGER_4 string_len_trim (GFC_INTEGER_4, const char *);\n+export_proto(string_len_trim);\n \n-#define adjustl prefix(adjustl)\n-void adjustl (char *, GFC_INTEGER_4, const char *);\n+extern void adjustl (char *, GFC_INTEGER_4, const char *);\n+export_proto(adjustl);\n \n-#define adjustr prefix(adjustr)\n-void adjustr (char *, GFC_INTEGER_4, const char *);\n+extern void adjustr (char *, GFC_INTEGER_4, const char *);\n+export_proto(adjustr);\n \n-#define string_index prefix(string_index)\n-GFC_INTEGER_4 string_index (GFC_INTEGER_4, const char *, GFC_INTEGER_4,\n-\t\t\t    const char *, GFC_LOGICAL_4);\n+extern GFC_INTEGER_4 string_index (GFC_INTEGER_4, const char *, GFC_INTEGER_4,\n+\t\t\t\t   const char *, GFC_LOGICAL_4);\n+export_proto(string_index);\n \n-#define string_scan prefix(string_scan)\n-GFC_INTEGER_4 string_scan (GFC_INTEGER_4, const char *, GFC_INTEGER_4,\n-                           const char *, GFC_LOGICAL_4);\n+extern GFC_INTEGER_4 string_scan (GFC_INTEGER_4, const char *, GFC_INTEGER_4,\n+\t\t\t\t  const char *, GFC_LOGICAL_4);\n+export_proto(string_scan);\n \n-#define string_verify prefix(string_verify)\n-GFC_INTEGER_4 string_verify (GFC_INTEGER_4, const char *, GFC_INTEGER_4,\n-                             const char *, GFC_LOGICAL_4);\n+extern GFC_INTEGER_4 string_verify (GFC_INTEGER_4, const char *, GFC_INTEGER_4,\n+\t\t\t\t    const char *, GFC_LOGICAL_4);\n+export_proto(string_verify);\n \n-#define string_trim prefix(string_trim)\n-void string_trim (GFC_INTEGER_4 *, void **, GFC_INTEGER_4, const char *);\n+extern void string_trim (GFC_INTEGER_4 *, void **, GFC_INTEGER_4, const char *);\n+export_proto(string_trim);\n \n-#define string_repeat prefix(string_repeat)\n-void string_repeat (char *, GFC_INTEGER_4, const char *, GFC_INTEGER_4);\n+extern void string_repeat (char *, GFC_INTEGER_4, const char *, GFC_INTEGER_4);\n+export_proto(string_repeat);\n \n /* The two areas may overlap so we use memmove.  */\n \n@@ -136,6 +136,7 @@ compare_string (GFC_INTEGER_4 len1, const char * s1,\n \n   return 0;\n }\n+iexport(compare_string);\n \n \n /* The destination and source should not overlap.  */"}, {"sha": "308717e6fe24640733a5b585697f3032d739a566", "filename": "libgfortran/intrinsics/system.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fsystem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fsystem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsystem.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -39,9 +39,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"libgfortran.h\"\n \n+extern void system_sub (const char *fcmd, GFC_INTEGER_4 * status,\n+\t\t\tgfc_charlen_type cmd_len);\n+iexport_proto(system_sub);\n+\n void\n-prefix(system_sub) (const char * fcmd, GFC_INTEGER_4 * status,\n-\t\t    gfc_charlen_type cmd_len)\n+system_sub (const char *fcmd, GFC_INTEGER_4 *status, gfc_charlen_type cmd_len)\n {\n   char cmd[cmd_len + 1];\n   int stat;\n@@ -53,12 +56,15 @@ prefix(system_sub) (const char * fcmd, GFC_INTEGER_4 * status,\n   if (status)\n     *status = stat;\n }\n+iexport(system_sub);\n+\n+extern GFC_INTEGER_4 PREFIX(system) (const char *, gfc_charlen_type);\n+export_proto_np(PREFIX(system));\n \n GFC_INTEGER_4\n-prefix(system) (char * fcmd, gfc_charlen_type cmd_len)\n+PREFIX(system) (const char *fcmd, gfc_charlen_type cmd_len)\n {\n   GFC_INTEGER_4 stat;\n-\n-  prefix(system_sub) (fcmd, &stat, cmd_len);\n+  system_sub (fcmd, &stat, cmd_len);\n   return stat;\n }"}, {"sha": "b778b0373a3c60ca4d6df40244beda772da8660b", "filename": "libgfortran/intrinsics/system_clock.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fsystem_clock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fsystem_clock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsystem_clock.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -41,14 +41,22 @@ static struct timeval tp0 = {-1, 0};\n static time_t t0 = (time_t) -2;\n #endif\n \n+\n+extern void system_clock_4 (GFC_INTEGER_4 *, GFC_INTEGER_4 *, GFC_INTEGER_4 *);\n+export_proto(system_clock_4);\n+\n+extern void system_clock_8 (GFC_INTEGER_8 *, GFC_INTEGER_8 *, GFC_INTEGER_8 *);\n+export_proto(system_clock_8);\n+\n+\n /* prefix(system_clock_4) is the INTEGER(4) version of the SYSTEM_CLOCK\n    intrinsic subroutine.  It returns the number of clock ticks for the current\n    system time, the number of ticks per second, and the maximum possible value\n    for COUNT.  On the first call to SYSTEM_CLOCK, COUNT is set to zero. */\n \n void\n-prefix(system_clock_4)(GFC_INTEGER_4 *count, GFC_INTEGER_4 *count_rate,\n-\t\t       GFC_INTEGER_4 *count_max)\n+system_clock_4(GFC_INTEGER_4 *count, GFC_INTEGER_4 *count_rate,\n+\t       GFC_INTEGER_4 *count_max)\n {\n   GFC_INTEGER_4 cnt;\n   GFC_INTEGER_4 rate;\n@@ -123,8 +131,8 @@ prefix(system_clock_4)(GFC_INTEGER_4 *count, GFC_INTEGER_4 *count_rate,\n /* INTEGER(8) version of the above routine.  */\n \n void\n-prefix(system_clock_8)(GFC_INTEGER_8 *count, GFC_INTEGER_8 *count_rate,\n-\t\t       GFC_INTEGER_8 *count_max)\n+system_clock_8 (GFC_INTEGER_8 *count, GFC_INTEGER_8 *count_rate,\n+\t        GFC_INTEGER_8 *count_max)\n {\n   GFC_INTEGER_8 cnt;\n   GFC_INTEGER_8 rate;"}, {"sha": "ba3014f07aa2cfeb8f9ff9806a97f1f8ce3669b3", "filename": "libgfortran/intrinsics/transpose_generic.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftranspose_generic.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,6 +25,9 @@ Boston, MA 02111-1307, USA.  */\n #include <assert.h>\n #include \"libgfortran.h\"\n \n+extern void __transpose (gfc_array_char *, gfc_array_char *);\n+export_proto_np(__transpose);\n+\n void\n __transpose (gfc_array_char * ret, gfc_array_char * source)\n {"}, {"sha": "2e8e165a6a35e8ab19c3fb5cdc10698cb667ed44", "filename": "libgfortran/intrinsics/umask.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fumask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Fumask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fumask.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -35,41 +35,51 @@ Boston, MA 02111-1307, USA.  */\n    INTEGER, INTENT(IN) :: MASK\n    INTEGER, INTENT(OUT), OPTIONAL :: OLD  */\n \n+extern void umask_i4_sub (GFC_INTEGER_4 *, GFC_INTEGER_4 *);\n+iexport_proto(umask_i4_sub);\n+\n void\n-prefix(umask_i4_sub) (GFC_INTEGER_4 * mask, GFC_INTEGER_4 * old)\n+umask_i4_sub (GFC_INTEGER_4 *mask, GFC_INTEGER_4 *old)\n {\n-  mode_t val;\n-\n-  val = umask((mode_t) *mask);\n+  mode_t val = umask((mode_t) *mask);\n   if (old != NULL)\n     *old = (GFC_INTEGER_4) val;\n }\n+iexport(umask_i4_sub);\n+\n+extern void umask_i8_sub (GFC_INTEGER_8 *, GFC_INTEGER_8 *);\n+iexport_proto(umask_i8_sub);\n \n void\n-prefix(umask_i8_sub) (GFC_INTEGER_8 * mask, GFC_INTEGER_8 * old)\n+umask_i8_sub (GFC_INTEGER_8 *mask, GFC_INTEGER_8 *old)\n {\n-  mode_t val;\n-\n-  val = umask((mode_t) *mask);\n+  mode_t val = umask((mode_t) *mask);\n   if (old != NULL)\n     *old = (GFC_INTEGER_8) val;\n }\n+iexport(umask_i8_sub);\n \n /* INTEGER FUNCTION UMASK(MASK)\n    INTEGER, INTENT(IN) :: MASK  */\n \n+extern GFC_INTEGER_4 umask_i4 (GFC_INTEGER_4 *);\n+export_proto(umask_i4);\n+\n GFC_INTEGER_4\n-prefix(umask) (GFC_INTEGER_4 * mask)\n+umask_i4 (GFC_INTEGER_4 *mask)\n {\n   GFC_INTEGER_4 old;\n-  prefix(umask_i4_sub) (mask, &old);\n+  umask_i4_sub (mask, &old);\n   return old;\n }\n \n+extern GFC_INTEGER_8 umask_i8 (GFC_INTEGER_8 *);\n+export_proto(umask_i8);\n+\n GFC_INTEGER_8\n-prefix(umask_i8) (GFC_INTEGER_8 * mask)\n+umask_i8 (GFC_INTEGER_8 *mask)\n {\n   GFC_INTEGER_8 old;\n-  prefix(umask_i8_sub) (mask, &old);\n+  umask_i8_sub (mask, &old);\n   return old;\n }"}, {"sha": "b9187068786fe32584769c0a40ef5e9ffb5f6d2f", "filename": "libgfortran/intrinsics/unlink.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Funlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Funlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funlink.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -35,11 +35,13 @@ Boston, MA 02111-1307, USA.  */\n    CHARACTER(LEN= ), INTENT(IN) :: NAME\n    INTEGER, INTENT(OUT), OPTIONAL :: STATUS)  */\n \n+extern void unlink_i4_sub (char *name, GFC_INTEGER_4 *status,\n+\t\t\t   gfc_charlen_type name_len);\n+iexport_proto(unlink_i4_sub);\n+\n void\n-prefix(unlink_i4_sub) (char * name, GFC_INTEGER_4 * status,\n-\t\t       gfc_charlen_type name_len)\n+unlink_i4_sub (char *name, GFC_INTEGER_4 *status, gfc_charlen_type name_len)\n {\n-\n   char *str, *s;\n   GFC_INTEGER_4 stat;\n \n@@ -57,14 +59,17 @@ prefix(unlink_i4_sub) (char * name, GFC_INTEGER_4 * status,\n   if (status != NULL) \n     *status = (stat == 0) ? stat : errno;\n }\n+iexport(unlink_i4_sub);\n \n+extern void unlink_i8_sub (char *name, GFC_INTEGER_8 *status,\n+\t\t\t   gfc_charlen_type name_len);\n+export_proto(unlink_i8_sub);\n \n void\n-prefix(unlink_i8_sub) (char * name, GFC_INTEGER_8 * status,\n-\t\t               gfc_charlen_type name_len)\n+unlink_i8_sub (char *name, GFC_INTEGER_8 *status, gfc_charlen_type name_len)\n {\n   GFC_INTEGER_4 status4;\n-  prefix (unlink_i4_sub) (name, &status4, name_len);\n+  unlink_i4_sub (name, &status4, name_len);\n   if (status)\n     *status = status4;\n }\n@@ -73,10 +78,13 @@ prefix(unlink_i8_sub) (char * name, GFC_INTEGER_8 * status,\n /* INTEGER FUNCTION UNLINK(NAME)\n    CHARACTER(LEN= ), INTENT(IN) :: NAME  */\n \n+extern GFC_INTEGER_4 PREFIX(unlink) (char *, gfc_charlen_type);\n+export_proto_np(PREFIX(unlink));\n+\n GFC_INTEGER_4\n-prefix(unlink) (char * name, gfc_charlen_type name_len)\n+PREFIX(unlink) (char *name, gfc_charlen_type name_len)\n {\n   GFC_INTEGER_4 status;\n-  prefix(unlink_i4_sub) (name, &status, name_len);\n+  unlink_i4_sub (name, &status, name_len);\n   return status;\n }"}, {"sha": "16deea4d48d751a57cc5b5fd6cdfa133384e0e2c", "filename": "libgfortran/intrinsics/unpack_generic.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Funpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fintrinsics%2Funpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funpack_generic.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,6 +25,10 @@ Boston, MA 02111-1307, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n+extern void __unpack1 (const gfc_array_char *, const gfc_array_char *,\n+\t\t       const gfc_array_l4 *, const gfc_array_char *);\n+export_proto_np(__unpack1);\n+\n void\n __unpack1 (const gfc_array_char * ret, const gfc_array_char * vector,\n     const gfc_array_l4 * mask, const gfc_array_char * field)\n@@ -140,6 +144,10 @@ __unpack1 (const gfc_array_char * ret, const gfc_array_char * vector,\n     }\n }\n \n+extern void __unpack0 (const gfc_array_char *, const gfc_array_char *,\n+\t\t       const gfc_array_l4 *, char *);\n+export_proto_np(__unpack0);\n+\n void\n __unpack0 (const gfc_array_char * ret, const gfc_array_char * vector,\n     const gfc_array_l4 * mask, char * field)"}, {"sha": "9cdddb682082dd529165e486b358f8fe0a440bf1", "filename": "libgfortran/io/backspace.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Fbackspace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Fbackspace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fbackspace.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -114,6 +114,9 @@ unformatted_backspace (void)\n }\n \n \n+extern void st_backspace (void);\n+export_proto(st_backspace);\n+\n void\n st_backspace (void)\n {"}, {"sha": "827eea86521fb2bf6321ac46ffebbecffd6de2b7", "filename": "libgfortran/io/close.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Fclose.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Fclose.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fclose.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -33,6 +33,9 @@ static st_option status_opt[] = {\n };\n \n \n+extern void st_close (void);\n+export_proto(st_close);\n+\n void\n st_close (void)\n {"}, {"sha": "76a1c34a04d1026d8758f9b5b12f901e383bd697", "filename": "libgfortran/io/endfile.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Fendfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Fendfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fendfile.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,6 +24,9 @@ Boston, MA 02111-1307, USA.  */\n \n /* endfile.c--  Implement the ENDFILE statement */\n \n+extern void st_endfile (void);\n+export_proto(st_endfile);\n+\n void\n st_endfile (void)\n {"}, {"sha": "290f31c832e8e01d039d8f93d918b5e9ed61368d", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -356,6 +356,9 @@ inquire_via_filename (void)\n /* Library entry point for the INQUIRE statement (non-IOLENGTH\n    form).  */\n \n+extern void st_inquire (void);\n+export_proto(st_inquire);\n+\n void\n st_inquire (void)\n {"}, {"sha": "e4f8f889bc0ca62ffe1549fe8331c941aac3dbd3", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 148, "deletions": 204, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include <setjmp.h>\n #include \"libgfortran.h\"\n+\n #define DEFAULT_TEMPDIR \"/var/tmp\"\n \n /* Basic types used in data transfers.  */\n@@ -44,10 +45,10 @@ typedef struct stream\n {\n   char *(*alloc_w_at) (struct stream *, int *, gfc_offset);\n   char *(*alloc_r_at) (struct stream *, int *, gfc_offset);\n-    try (*sfree) (struct stream *);\n-    try (*close) (struct stream *);\n-    try (*seek) (struct stream *, gfc_offset);\n-    try (*truncate) (struct stream *);\n+  try (*sfree) (struct stream *);\n+  try (*close) (struct stream *);\n+  try (*seek) (struct stream *, gfc_offset);\n+  try (*truncate) (struct stream *);\n }\n stream;\n \n@@ -230,13 +231,11 @@ typedef struct\n }\n st_parameter;\n \n-\n-\n-#define ioparm prefix(ioparm)\n extern st_parameter ioparm;\n+iexport_data_proto(ioparm);\n \n-#define ionml prefix(ionml)\n extern namelist_info * ionml;\n+internal_proto(ionml);\n \n typedef struct\n {\n@@ -311,13 +310,11 @@ typedef struct\n }\n global_t;\n \n-\n-#define g prefix(g)\n extern global_t g;\n+internal_proto(g);\n \n-\n-#define current_unit prefix(current_unit)\n extern gfc_unit *current_unit;\n+internal_proto(current_unit);\n \n /* Format tokens.  Only about half of these can be stored in the\n    format nodes.  */\n@@ -384,283 +381,230 @@ fnode;\n \n /* unix.c */\n \n-#define sys_exit prefix(sys_exit)\n-void sys_exit (int) __attribute__ ((noreturn));\n-\n-#define move_pos_offset prefix(move_pos_offset)\n-int move_pos_offset (stream *, int);\n+extern int move_pos_offset (stream *, int);\n+internal_proto(move_pos_offset);\n \n-#define get_oserror prefix(get_oserror)\n-const char *get_oserror (void);\n+extern int compare_files (stream *, stream *);\n+internal_proto(compare_files);\n \n-#define compare_files prefix(compare_files)\n-int compare_files (stream *, stream *);\n+extern stream *init_error_stream (void);\n+internal_proto(init_error_stream);\n \n-#define init_error_stream prefix(init_error_stream)\n-stream *init_error_stream (void);\n+extern stream *open_external (unit_flags *);\n+internal_proto(open_external);\n \n-#define open_external prefix(open_external)\n-stream *open_external (unit_flags *);\n+extern stream *open_internal (char *, int);\n+internal_proto(open_internal);\n \n-#define open_internal prefix(open_internal)\n-stream *open_internal (char *, int);\n+extern stream *input_stream (void);\n+internal_proto(input_stream);\n \n-#define input_stream prefix(input_stream)\n-stream *input_stream (void);\n+extern stream *output_stream (void);\n+internal_proto(output_stream);\n \n-#define output_stream prefix(output_stream)\n-stream *output_stream (void);\n+extern int compare_file_filename (stream *, const char *, int);\n+internal_proto(compare_file_filename);\n \n-#define compare_file_filename prefix(compare_file_filename)\n-int compare_file_filename (stream *, const char *, int);\n+extern gfc_unit *find_file (void);\n+internal_proto(find_file);\n \n-#define find_file prefix(find_file)\n-gfc_unit *find_file (void);\n+extern int stream_at_bof (stream *);\n+internal_proto(stream_at_bof);\n \n-#define stream_at_bof prefix(stream_at_bof)\n-int stream_at_bof (stream *);\n+extern int stream_at_eof (stream *);\n+internal_proto(stream_at_eof);\n \n-#define stream_at_eof prefix(stream_at_eof)\n-int stream_at_eof (stream *);\n+extern int delete_file (gfc_unit *);\n+internal_proto(delete_file);\n \n-#define delete_file prefix(delete_file)\n-int delete_file (gfc_unit *);\n+extern int file_exists (void);\n+internal_proto(file_exists);\n \n-#define file_exists prefix(file_exists)\n-int file_exists (void);\n+extern const char *inquire_sequential (const char *, int);\n+internal_proto(inquire_sequential);\n \n-#define inquire_sequential prefix(inquire_sequential)\n-const char *inquire_sequential (const char *, int);\n+extern const char *inquire_direct (const char *, int);\n+internal_proto(inquire_direct);\n \n-#define inquire_direct prefix(inquire_direct)\n-const char *inquire_direct (const char *, int);\n+extern const char *inquire_formatted (const char *, int);\n+internal_proto(inquire_formatted);\n \n-#define inquire_formatted prefix(inquire_formatted)\n-const char *inquire_formatted (const char *, int);\n+extern const char *inquire_unformatted (const char *, int);\n+internal_proto(inquire_unformatted);\n \n-#define inquire_unformatted prefix(inquire_unformatted)\n-const char *inquire_unformatted (const char *, int);\n+extern const char *inquire_read (const char *, int);\n+internal_proto(inquire_read);\n \n-#define inquire_read prefix(inquire_read)\n-const char *inquire_read (const char *, int);\n+extern const char *inquire_write (const char *, int);\n+internal_proto(inquire_write);\n \n-#define inquire_write prefix(inquire_write)\n-const char *inquire_write (const char *, int);\n+extern const char *inquire_readwrite (const char *, int);\n+internal_proto(inquire_readwrite);\n \n-#define inquire_readwrite prefix(inquire_readwrite)\n-const char *inquire_readwrite (const char *, int);\n+extern gfc_offset file_length (stream *);\n+internal_proto(file_length);\n \n-#define file_length prefix(file_length)\n-gfc_offset file_length (stream *);\n+extern gfc_offset file_position (stream *);\n+internal_proto(file_position);\n \n-#define file_position prefix(file_position)\n-gfc_offset file_position (stream *);\n+extern int is_seekable (stream *);\n+internal_proto(is_seekable);\n \n-#define is_seekable prefix(is_seekable)\n-int is_seekable (stream *);\n+extern void empty_internal_buffer(stream *);\n+internal_proto(empty_internal_buffer);\n \n-#define empty_internal_buffer prefix(empty_internal_buffer)\n-void empty_internal_buffer(stream *);\n+extern try flush (stream *);\n+internal_proto(flush);\n \n-#define flush prefix(flush)\n-try flush (stream *);\n-\n-#define unit_to_fd prefix(unit_to_fd)\n-int unit_to_fd (int);\n+extern int unit_to_fd (int);\n+internal_proto(unit_to_fd);\n \n /* unit.c */\n \n-#define insert_unit prefix(insert_unix)\n-void insert_unit (gfc_unit *);\n+extern void insert_unit (gfc_unit *);\n+internal_proto(insert_unit);\n \n-#define close_unit prefix(close_unit)\n-int close_unit (gfc_unit *);\n+extern int close_unit (gfc_unit *);\n+internal_proto(close_unit);\n \n-#define is_internal_unit prefix(is_internal_unit)\n-int is_internal_unit (void);\n+extern int is_internal_unit (void);\n+internal_proto(is_internal_unit);\n \n-#define find_unit prefix(find_unit)\n-gfc_unit *find_unit (int);\n+extern gfc_unit *find_unit (int);\n+internal_proto(find_unit);\n \n-#define get_unit prefix(get_unit)\n-gfc_unit *get_unit (int);\n+extern gfc_unit *get_unit (int);\n+internal_proto(get_unit);\n \n /* open.c */\n \n-#define test_endfile prefix(test_endfile)\n-void test_endfile (gfc_unit *);\n+extern void test_endfile (gfc_unit *);\n+internal_proto(test_endfile);\n \n-#define new_unit prefix(new_unit)\n-void new_unit (unit_flags *);\n+extern void new_unit (unit_flags *);\n+internal_proto(new_unit);\n \n /* format.c */\n \n-#define parse_format prefix(parse_format)\n-void parse_format (void);\n+extern void parse_format (void);\n+internal_proto(parse_format);\n \n-#define next_format prefix(next_format)\n-fnode *next_format (void);\n+extern fnode *next_format (void);\n+internal_proto(next_format);\n \n-#define unget_format prefix(unget_format)\n-void unget_format (fnode *);\n+extern void unget_format (fnode *);\n+internal_proto(unget_format);\n \n-#define format_error prefix(format_error)\n-void format_error (fnode *, const char *);\n+extern void format_error (fnode *, const char *);\n+internal_proto(format_error);\n \n-#define free_fnodes prefix(free_fnodes)\n-void free_fnodes (void);\n+extern void free_fnodes (void);\n+internal_proto(free_fnodes);\n \n /* transfer.c */\n \n #define SCRATCH_SIZE 300\n \n-#define scratch prefix(scratch)\n extern char scratch[];\n+internal_proto(scratch);\n \n-#define type_name prefix(type_name)\n-const char *type_name (bt);\n-\n-#define read_block prefix(read_block)\n-void *read_block (int *);\n-\n-#define write_block prefix(write_block)\n-void *write_block (int);\n-\n-#define transfer_integer prefix(transfer_integer)\n-void transfer_integer (void *, int);\n-\n-#define transfer_real prefix(transfer_real)\n-void transfer_real (void *, int);\n+extern const char *type_name (bt);\n+internal_proto(type_name);\n \n-#define transfer_logical prefix(transfer_logical)\n-void transfer_logical (void *, int);\n+extern void *read_block (int *);\n+internal_proto(read_block);\n \n-#define transfer_character prefix(transfer_character)\n-void transfer_character (void *, int);\n+extern void *write_block (int);\n+internal_proto(write_block);\n \n-#define transfer_complex prefix(transfer_complex)\n-void transfer_complex (void *, int);\n-\n-#define next_record prefix(next_record)\n-void next_record (int);\n-\n-#define st_set_nml_var_int prefix(st_set_nml_var_int)\n-void st_set_nml_var_int (void * , char * , int , int );\n-\n-#define st_set_nml_var_float prefix(st_set_nml_var_float)\n-void st_set_nml_var_float (void * , char * , int , int );\n-\n-#define st_set_nml_var_char prefix(st_set_nml_var_char)\n-void st_set_nml_var_char (void * , char * , int , int, gfc_charlen_type);\n-\n-#define st_set_nml_var_complex prefix(st_set_nml_var_complex)\n-void st_set_nml_var_complex (void * , char * , int , int );\n-\n-#define st_set_nml_var_log prefix(st_set_nml_var_log)\n-void st_set_nml_var_log (void * , char * , int , int );\n+extern void next_record (int);\n+internal_proto(next_record);\n \n /* read.c */\n \n-#define set_integer prefix(set_integer)\n-void set_integer (void *, int64_t, int);\n+extern void set_integer (void *, int64_t, int);\n+internal_proto(set_integer);\n \n-#define max_value prefix(max_value)\n-uint64_t max_value (int, int);\n+extern uint64_t max_value (int, int);\n+internal_proto(max_value);\n \n-#define convert_real prefix(convert_real)\n-int convert_real (void *, const char *, int);\n+extern int convert_real (void *, const char *, int);\n+internal_proto(convert_real);\n \n-#define read_a prefix(read_a)\n-void read_a (fnode *, char *, int);\n+extern void read_a (fnode *, char *, int);\n+internal_proto(read_a);\n \n-#define read_f prefix(read_f)\n-void read_f (fnode *, char *, int);\n+extern void read_f (fnode *, char *, int);\n+internal_proto(read_f);\n \n-#define read_l prefix(read_l)\n-void read_l (fnode *, char *, int);\n+extern void read_l (fnode *, char *, int);\n+internal_proto(read_l);\n \n-#define read_x prefix(read_x)\n-void read_x (fnode *);\n+extern void read_x (fnode *);\n+internal_proto(read_x);\n \n-#define read_radix prefix(read_radix)\n-void read_radix (fnode *, char *, int, int);\n+extern void read_radix (fnode *, char *, int, int);\n+internal_proto(read_radix);\n \n-#define read_decimal prefix(read_decimal)\n-void read_decimal (fnode *, char *, int);\n+extern void read_decimal (fnode *, char *, int);\n+internal_proto(read_decimal);\n \n /* list_read.c */\n \n-#define list_formatted_read prefix(list_formatted_read)\n-void list_formatted_read (bt, void *, int);\n+extern void list_formatted_read (bt, void *, int);\n+internal_proto(list_formatted_read);\n \n-#define finish_list_read prefix(finish_list_read)\n-void finish_list_read (void);\n+extern void finish_list_read (void);\n+internal_proto(finish_list_read);\n \n-#define init_at_eol prefix(init_at_eol)\n-void init_at_eol();\n+extern void init_at_eol();\n+internal_proto(init_at_eol);\n \n-#define namelist_read prefix(namelist_read)\n-void namelist_read();\n+extern void namelist_read();\n+internal_proto(namelist_read);\n \n-#define namelist_write prefix(namelist_write)\n-void namelist_write();\n+extern void namelist_write();\n+internal_proto(namelist_write);\n \n /* write.c */\n \n-#define write_a prefix(write_a)\n-void write_a (fnode *, const char *, int);\n-\n-#define write_b prefix(write_b)\n-void write_b (fnode *, const char *, int);\n-\n-#define write_d prefix(write_d)\n-void write_d (fnode *, const char *, int);\n-\n-#define write_e prefix(write_e)\n-void write_e (fnode *, const char *, int);\n-\n-#define write_en prefix(write_en)\n-void write_en (fnode *, const char *, int);\n+extern void write_a (fnode *, const char *, int);\n+internal_proto(write_a);\n \n-#define write_es prefix(write_es)\n-void write_es (fnode *, const char *, int);\n+extern void write_b (fnode *, const char *, int);\n+internal_proto(write_b);\n \n-#define write_f prefix(write_f)\n-void write_f (fnode *, const char *, int);\n+extern void write_d (fnode *, const char *, int);\n+internal_proto(write_d);\n \n-#define write_i prefix(write_i)\n-void write_i (fnode *, const char *, int);\n+extern void write_e (fnode *, const char *, int);\n+internal_proto(write_e);\n \n-#define write_l prefix(write_l)\n-void write_l (fnode *, char *, int);\n+extern void write_en (fnode *, const char *, int);\n+internal_proto(write_en);\n \n-#define write_o prefix(write_o)\n-void write_o (fnode *, const char *, int);\n+extern void write_es (fnode *, const char *, int);\n+internal_proto(write_es);\n \n-#define write_x prefix(write_x)\n-void write_x (fnode *);\n+extern void write_f (fnode *, const char *, int);\n+internal_proto(write_f);\n \n-#define write_z prefix(write_z)\n-void write_z (fnode *, const char *, int);\n+extern void write_i (fnode *, const char *, int);\n+internal_proto(write_i);\n \n-#define list_formatted_write prefix(list_formatted_write)\n-void list_formatted_write (bt, void *, int);\n+extern void write_l (fnode *, char *, int);\n+internal_proto(write_l);\n \n+extern void write_o (fnode *, const char *, int);\n+internal_proto(write_o);\n \n-#define st_open prefix(st_open)\n-#define st_close prefix(st_close)\n-#define st_inquire prefix(st_inquire)\n-#define st_iolength prefix(st_iolength)\n-#define st_iolength_done prefix(st_iolength_done)\n-#define st_rewind prefix(st_rewind)\n-#define st_read prefix(st_read)\n-#define st_read_done prefix(st_read_done)\n-#define st_write prefix(st_write)\n-#define st_write_done prefix(st_write_done)\n-#define st_backspace prefix(st_backspace)\n-#define st_endfile prefix(st_endfile)\n+extern void write_x (fnode *);\n+internal_proto(write_x);\n \n+extern void write_z (fnode *, const char *, int);\n+internal_proto(write_z);\n \n-void __MAIN (void);\n+extern void list_formatted_write (bt, void *, int);\n+internal_proto(list_formatted_write);\n \n #endif"}, {"sha": "f0f8ddf4c0f866243484a68fcb5286d61a6b37bc", "filename": "libgfortran/io/lock.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Flock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Flock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flock.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,9 +24,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"\n #include \"io.h\"\n \n-st_parameter ioparm;\n-namelist_info * ionml;\n-global_t g;\n+st_parameter ioparm = { };\n+iexport_data(ioparm);\n+\n+namelist_info *ionml = 0;\n+global_t g = { };\n \n \n /* library_start()-- Called with a library call is entered.  */\n@@ -37,11 +39,10 @@ library_start (void)\n   if (g.in_library)\n     internal_error (\"Recursive library calls not allowed\");\n \n-/* The in_library flag indicates whether we're currently processing a\n- * library call.  Some calls leave immediately, but READ and WRITE\n- * processing return control to the caller but are still considered to\n- * stay within the library. */\n-\n+  /* The in_library flag indicates whether we're currently processing a\n+     library call.  Some calls leave immediately, but READ and WRITE\n+     processing return control to the caller but are still considered to\n+     stay within the library. */\n   g.in_library = 1;\n \n   if (ioparm.iostat != NULL && ioparm.library_return == LIBRARY_OK)\n@@ -52,7 +53,7 @@ library_start (void)\n \n \n /* library_end()-- Called when a library call is complete in order to\n- * clean up for the next call. */\n+   clean up for the next call. */\n \n void\n library_end (void)"}, {"sha": "6991c38a7030583bc291a4774294fc124573714d", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -410,6 +410,9 @@ already_open (gfc_unit * u, unit_flags * flags)\n \n /* Open file.  */\n \n+extern void st_open (void);\n+export_proto(st_open);\n+\n void\n st_open (void)\n {"}, {"sha": "bfc2bc4bc4baaf0cb8d5a6514909e49f435fc1df", "filename": "libgfortran/io/rewind.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Frewind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Frewind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Frewind.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -1,4 +1,3 @@\n-\n /* Copyright (C) 2002-2003 Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -25,6 +24,9 @@ Boston, MA 02111-1307, USA.  */\n \n /* rewind.c--  Implement the rewind statement */\n \n+extern void st_rewind (void);\n+export_proto(st_rewind);\n+\n void\n st_rewind (void)\n {"}, {"sha": "9822a76e9508f5287dd78f209f144d9d07e6ae2d", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -53,10 +53,25 @@ Boston, MA 02111-1307, USA.  */\n     st_write(), an error inhibits any data from actually being\n     transferred.  */\n \n-gfc_unit *current_unit;\n+extern void transfer_integer (void *, int);\n+export_proto(transfer_integer);\n+\n+extern void transfer_real (void *, int);\n+export_proto(transfer_real);\n+\n+extern void transfer_logical (void *, int);\n+export_proto(transfer_logical);\n+\n+extern void transfer_character (void *, int);\n+export_proto(transfer_character);\n+\n+extern void transfer_complex (void *, int);\n+export_proto(transfer_complex);\n+\n+gfc_unit *current_unit = NULL;\n static int sf_seen_eor = 0;\n \n-char scratch[SCRATCH_SIZE];\n+char scratch[SCRATCH_SIZE] = { };\n static char *line_buffer = NULL;\n \n static unit_advance advance_status;\n@@ -1433,13 +1448,19 @@ iolength_transfer_init (void)\n    it must still be a runtime library call so that we can determine\n    the iolength for dynamic arrays and such.  */\n \n+extern void st_iolength (void);\n+export_proto(st_iolength);\n+\n void\n st_iolength (void)\n {\n   library_start ();\n   iolength_transfer_init ();\n }\n \n+extern void st_iolength_done (void);\n+export_proto(st_iolength_done);\n+\n void\n st_iolength_done (void)\n {\n@@ -1449,6 +1470,9 @@ st_iolength_done (void)\n \n /* The READ statement.  */\n \n+extern void st_read (void);\n+export_proto(st_read);\n+\n void\n st_read (void)\n {\n@@ -1481,6 +1505,8 @@ st_read (void)\n       }\n }\n \n+extern void st_read_done (void);\n+export_proto(st_read_done);\n \n void\n st_read_done (void)\n@@ -1489,6 +1515,8 @@ st_read_done (void)\n   library_end ();\n }\n \n+extern void st_write (void);\n+export_proto(st_write);\n \n void\n st_write (void)\n@@ -1497,6 +1525,8 @@ st_write (void)\n   data_transfer_init (0);\n }\n \n+extern void st_write_done (void);\n+export_proto(st_write_done);\n \n void\n st_write_done (void)\n@@ -1567,6 +1597,21 @@ st_set_nml_var (void * var_addr, char * var_name, int var_name_len,\n     }\n }\n \n+extern void st_set_nml_var_int (void *, char *, int, int);\n+export_proto(st_set_nml_var_int);\n+\n+extern void st_set_nml_var_float (void *, char *, int, int);\n+export_proto(st_set_nml_var_float);\n+\n+extern void st_set_nml_var_char (void *, char *, int, int, gfc_charlen_type);\n+export_proto(st_set_nml_var_char);\n+\n+extern void st_set_nml_var_complex (void *, char *, int, int);\n+export_proto(st_set_nml_var_complex);\n+\n+extern void st_set_nml_var_log (void *, char *, int, int);\n+export_proto(st_set_nml_var_log);\n+\n void\n st_set_nml_var_int (void * var_addr, char * var_name, int var_name_len,\n \t\t    int kind)"}, {"sha": "c259e5655669b262f193da7840e31313d7727299", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 172, "deletions": 130, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -76,10 +76,85 @@ typedef off_t gfc_offset;\n #define __attribute__(x)\n #endif\n \n-/* For a library, a standard prefix is a requirement in order to\n-   partition the namespace.  It's ugly to look at and a pain to type,\n-   so we hide it behind macros.  */\n-#define prefix(x) _gfortran_ ## x\n+/* For a library, a standard prefix is a requirement in order to partition\n+   the namespace.  IPREFIX is for symbols intended to be internal to the\n+   library.  */\n+#define PREFIX(x)\t_gfortran_ ## x\n+#define IPREFIX(x)\t_gfortrani_ ## x\n+\n+/* Magic to rename a symbol at the compiler level.  You continue to refer\n+   to the symbol as OLD in the source, but it'll be named NEW in the asm.  */\n+#define sym_rename(old, new) sym_rename1(old, __USER_LABEL_PREFIX__, new)\n+#define sym_rename1(old, ulp, new) sym_rename2(old, ulp, new)\n+#define sym_rename2(old, ulp, new) extern __typeof(old) old __asm__(#ulp #new)\n+\n+/* There are several classifications of routines:\n+\n+     (1) Symbols used only within the library,\n+     (2) Symbols to be exported from the library,\n+     (3) Symbols to be exported from the library, but\n+\t also used inside the library.\n+\n+   By telling the compiler about these different classifications we can\n+   tightly control the interface seen by the user, and get better code\n+   from the compiler at the same time.\n+\n+   One of the following should be used immediately after the declaration\n+   of each symbol:\n+\n+     internal_proto\tMarks a symbol used only within the library,\n+\t\t\tand adds IPREFIX to the assembly-level symbol\n+\t\t\tname.  The later is important for maintaining\n+\t\t\tthe namespace partition for the static library.\n+\n+     export_proto\tMarks a symbol to be exported, and adds PREFIX\n+\t\t\tto the assembly-level symbol name.\n+\n+     export_proto_np\tMarks a symbol to be exported without adding PREFIX.\n+\n+     iexport_proto\tMarks a function to be exported, but with the \n+\t\t\tunderstanding that it can be used inside as well.\n+\n+     iexport_data_proto\tSimilarly, marks a data symbol to be exported.\n+\t\t\tUnfortunately, some systems can't play the hidden\n+\t\t\tsymbol renaming trick on data symbols, thanks to\n+\t\t\tthe horribleness of COPY relocations.\n+\n+   If iexport_proto or iexport_data_proto is used, you must also use\n+   iexport or iexport_data after the *definition* of the symbol.  */\n+\n+#if defined(HAVE_ATTRIBUTE_VISIBILITY)\n+# define internal_proto(x) \\\n+\tsym_rename(x, IPREFIX (x)) __attribute__((__visibility__(\"hidden\")))\n+#else\n+# define internal_proto(x)\tsym_rename(x, IPREFIX(x))\n+#endif\n+\n+#if defined(HAVE_ATTRIBUTE_VISIBILITY) && defined(HAVE_ATTRIBUTE_ALIAS)\n+# define export_proto(x)\tsym_rename(x, PREFIX(x))\n+# define export_proto_np(x)\textern char swallow_semicolon\n+# define iexport_proto(x)\tinternal_proto(x)\n+# define iexport(x)\t\tiexport1(x, __USER_LABEL_PREFIX__, IPREFIX(x))\n+# define iexport1(x,p,y)\tiexport2(x,p,y)\n+# define iexport2(x,p,y) \\\n+\textern __typeof(x) PREFIX(x) __attribute__((__alias__(#p #y)))\n+/* ??? We're not currently building a dll, and it's wrong to add dllexport\n+   to objects going into a static library archive.  */\n+#elif 0 && defined(HAVE_ATTRIBUTE_DLLEXPORT)\n+# define export_proto_np(x)\textern __typeof(x) x __attribute__((dllexport))\n+# define export_proto(x)    sym_rename(x, PREFIX(x)) __attribute__((dllexport))\n+# define iexport_proto(x)\texport_proto(x)\n+# define iexport(x)\t\textern char swallow_semicolon\n+#else\n+# define export_proto(x)\tsym_rename(x, PREFIX(x))\n+# define export_proto_np(x)\textern char swallow_semicolon\n+# define iexport_proto(x)\texport_proto(x)\n+# define iexport(x)\t\textern char swallow_semicolon\n+#endif\n+\n+/* TODO: detect the case when we *can* hide the symbol.  */\n+#define iexport_data_proto(x)\texport_proto(x)\n+#define iexport_data(x)\t\textern char swallow_semicolon\n \n /* The only reliable way to get the offset of a field in a struct\n    in a system independent way is via this macro.  */\n@@ -129,8 +204,8 @@ typedef size_t index_type;\n typedef GFC_INTEGER_4 gfc_charlen_type;\n \n /* This will be 0 on little-endian machines and one on big-endian machines.  */\n-#define l8_to_l4_offset prefix(l8_to_l4_offset)\n extern int l8_to_l4_offset;\n+internal_proto(l8_to_l4_offset);\n \n #define GFOR_POINTER_L8_TO_L4(p8) \\\n   (l8_to_l4_offset + (GFC_LOGICAL_4 *)(p8))\n@@ -224,8 +299,8 @@ typedef struct\n options_t;\n \n \n-#define options prefix(options)\n extern options_t options;\n+internal_proto(options);\n \n \n /* Structure for statement options.  */\n@@ -265,204 +340,171 @@ error_codes;\n /* The filename and line number don't go inside the globals structure.\n    They are set by the rest of the program and must be linked to.  */\n \n-#define line prefix(line)\n-extern unsigned line;\t\t/* Location of the current libray call (optional).  */\n+/* Location of the current library call (optional).  */\n+extern unsigned line;\n+iexport_data_proto(line);\n \n-#define filename prefix(filename)\n extern char *filename;\n+iexport_data_proto(filename);\n \n /* Avoid conflicting prototypes of alloca() in system headers by using \n    GCC's builtin alloca().  */\n-\n #define gfc_alloca(x)  __builtin_alloca(x)\n \n \n /* main.c */\n \n-#define library_start prefix(library_start)\n-void library_start (void);\n-\n-#define library_end prefix(library_end)\n-void library_end (void);\n+extern void library_start (void);\n+internal_proto(library_start);\n \n-#define set_args prefix(set_args)\n-void set_args (int, char **);\n+extern void library_end (void);\n+internal_proto(library_end);\n \n-#define get_args prefix(get_args)\n-void get_args (int *, char ***);\n+extern void set_args (int, char **);\n+export_proto(set_args);\n \n+extern void get_args (int *, char ***);\n+internal_proto(get_args);\n \n /* error.c */\n-#define itoa prefix(itoa)\n-char *itoa (int64_t);\n-\n-#define xtoa prefix(xtoa)\n-char *xtoa (uint64_t);\n \n-#define os_error prefix(os_error)\n-void os_error (const char *) __attribute__ ((noreturn));\n+extern char *itoa (int64_t);\n+internal_proto(itoa);\n \n-#define show_locus prefix(show_locus)\n-void show_locus (void);\n+extern char *xtoa (uint64_t);\n+internal_proto(xtoa);\n \n-#define runtime_error prefix(runtime_error)\n-void runtime_error (const char *) __attribute__ ((noreturn));\n+extern void os_error (const char *) __attribute__ ((noreturn));\n+internal_proto(os_error);\n \n-#define internal_error prefix(internal_error)\n-void internal_error (const char *) __attribute__ ((noreturn));\n+extern void show_locus (void);\n+internal_proto(show_locus);\n \n-#define get_oserror prefix(get_oserror)\n-const char *get_oserror (void);\n+extern void runtime_error (const char *) __attribute__ ((noreturn));\n+iexport_proto(runtime_error);\n \n-#define write_error prefix(write_error)\n-void write_error (const char *);\n+extern void internal_error (const char *) __attribute__ ((noreturn));\n+internal_proto(internal_error);\n \n-#define sys_exit prefix(sys_exit)\n-void sys_exit (int) __attribute__ ((noreturn));\n+extern const char *get_oserror (void);\n+internal_proto(get_oserror);\n \n-#define st_printf prefix(st_printf)\n-int st_printf (const char *, ...) __attribute__ ((format (printf, 1, 2)));\n+extern void sys_exit (int) __attribute__ ((noreturn));\n+internal_proto(sys_exit);\n \n-#define st_sprintf prefix(st_sprintf)\n-void st_sprintf (char *, const char *, ...) __attribute__ ((format (printf, 2, 3)));\n+extern int st_printf (const char *, ...)\n+  __attribute__ ((format (printf, 1, 2)));\n+internal_proto(st_printf);\n \n-#define translate_error prefix(translate_error)\n-const char *translate_error (int);\n+extern void st_sprintf (char *, const char *, ...)\n+  __attribute__ ((format (printf, 2, 3)));\n+internal_proto(st_sprintf);\n \n-#define generate_error prefix(generate_error)\n-void generate_error (int, const char *);\n+extern const char *translate_error (int);\n+internal_proto(translate_error);\n \n+extern void generate_error (int, const char *);\n+internal_proto(generate_error);\n \n /* memory.c */\n \n-#define memory_init\tprefix(memory_init)\n-void memory_init (void);\n-\n-#define runtime_cleanup\tprefix(runtime_cleanup)\n-void runtime_cleanup (void);\n-\n-#define get_mem\t\tprefix(get_mem)\n-void *get_mem (size_t) __attribute__ ((malloc));\n-\n-#define free_mem\tprefix(free_mem)\n-void free_mem (void *);\n-\n-#define internal_malloc_size\tprefix(internal_malloc_size)\n-void *internal_malloc_size (size_t);\n-\n-#define internal_malloc\tprefix(internal_malloc)\n-void *internal_malloc (GFC_INTEGER_4);\n-\n-#define internal_malloc64 prefix(internal_malloc64)\n-void *internal_malloc64 (GFC_INTEGER_8);\n+extern void *get_mem (size_t) __attribute__ ((malloc));\n+internal_proto(get_mem);\n \n-#define internal_free\tprefix(internal_free)\n-void internal_free (void *);\n+extern void free_mem (void *);\n+internal_proto(free_mem);\n \n-#define allocate\tprefix(allocate)\n-void allocate (void **, GFC_INTEGER_4, GFC_INTEGER_4 *);\n-\n-#define allocate64\tprefix(allocate64)\n-void allocate64 (void **, GFC_INTEGER_8, GFC_INTEGER_4 *);\n-\n-#define deallocate\tprefix(deallocate)\n-void deallocate (void **, GFC_INTEGER_4 *);\n+extern void *internal_malloc_size (size_t);\n+internal_proto(internal_malloc_size);\n \n+extern void internal_free (void *);\n+iexport_proto(internal_free);\n \n /* environ.c */\n \n-#define check_buffered prefix(check_buffered)\n-int check_buffered (int);\n-\n-#define init_variables prefix(init_variables)\n-void init_variables (void);\n+extern int check_buffered (int);\n+internal_proto(check_buffered);\n \n-#define show_variables prefix(show_variables)\n-void show_variables (void);\n+extern void init_variables (void);\n+internal_proto(init_variables);\n \n+extern void show_variables (void);\n+internal_proto(show_variables);\n \n /* string.c */\n \n-#define find_option prefix(find_option)\n-int find_option (const char *, int, st_option *, const char *);\n+extern int find_option (const char *, int, st_option *, const char *);\n+internal_proto(find_option);\n \n-#define fstrlen prefix(fstrlen)\n-int fstrlen (const char *, int);\n+extern int fstrlen (const char *, int);\n+internal_proto(fstrlen);\n \n-#define fstrcpy prefix(fstrcpy)\n-void fstrcpy (char *, int, const char *, int);\n+extern void fstrcpy (char *, int, const char *, int);\n+internal_proto(fstrcpy);\n \n-#define cf_strcpy prefix(cf_strcpy)\n-void cf_strcpy (char *, int, const char *);\n+extern void cf_strcpy (char *, int, const char *);\n+internal_proto(cf_strcpy);\n \n /* io.c */\n \n-#define init_units prefix(init_units)\n-void init_units (void);\n+extern void init_units (void);\n+internal_proto(init_units);\n \n-#define close_units prefix(close_units)\n-void close_units (void);\n+extern void close_units (void);\n+internal_proto(close_units);\n \n /* stop.c */\n-#define stop_numeric prefix(stop_numeric)\n-void stop_numeric (GFC_INTEGER_4);\n+\n+extern void stop_numeric (GFC_INTEGER_4);\n+iexport_proto(stop_numeric);\n \n /* reshape_packed.c */\n-#define reshape_packed prefix(reshape_packed)\n-void reshape_packed (char *, index_type, const char *, index_type,\n-\t\t     const char *, index_type);\n \n-/* Repacking functions.  */\n-#define internal_pack prefix(internal_pack)\n-void *internal_pack (gfc_array_char *);\n+extern void reshape_packed (char *, index_type, const char *, index_type,\n+\t\t\t    const char *, index_type);\n+internal_proto(reshape_packed);\n \n-#define internal_unpack prefix(internal_unpack)\n-void internal_unpack (gfc_array_char *, const void *);\n+/* Repacking functions.  */\n \n-#define internal_pack_4 prefix(internal_pack_4)\n+/* ??? These four aren't currently used by the compiler, though we\n+   certainly could do so.  */\n GFC_INTEGER_4 *internal_pack_4 (gfc_array_i4 *);\n+internal_proto(internal_pack_4);\n \n-#define internal_pack_8 prefix(internal_pack_8)\n GFC_INTEGER_8 *internal_pack_8 (gfc_array_i8 *);\n+internal_proto(internal_pack_8);\n \n-#define internal_unpack_4 prefix(internal_unpack_4)\n-void internal_unpack_4 (gfc_array_i4 *, const GFC_INTEGER_4 *);\n-\n-#define internal_unpack_8 prefix(internal_unpack_8)\n-void internal_unpack_8 (gfc_array_i8 *, const GFC_INTEGER_8 *);\n+extern void internal_unpack_4 (gfc_array_i4 *, const GFC_INTEGER_4 *);\n+internal_proto(internal_unpack_4);\n \n-/* date_and_time.c */\n-\n-#define date_and_time prefix(date_and_time)\n-void date_and_time (char *, char *, char *, gfc_array_i4 *,\n-                   GFC_INTEGER_4, GFC_INTEGER_4, GFC_INTEGER_4);\n+extern void internal_unpack_8 (gfc_array_i8 *, const GFC_INTEGER_8 *);\n+internal_proto(internal_unpack_8);\n \n /* string_intrinsics.c */\n \n-#define compare_string prefix(compare_string)\n-GFC_INTEGER_4 compare_string (GFC_INTEGER_4, const char *,\n-\t\t\t      GFC_INTEGER_4, const char *);\n+extern GFC_INTEGER_4 compare_string (GFC_INTEGER_4, const char *,\n+\t\t\t\t     GFC_INTEGER_4, const char *);\n+iexport_proto(compare_string);\n \n /* random.c */\n \n-#define random_seed prefix(random_seed)\n-void random_seed (GFC_INTEGER_4 * size, gfc_array_i4 * put,\n-\t\t  gfc_array_i4 * get);\n+extern void random_seed (GFC_INTEGER_4 * size, gfc_array_i4 * put,\n+\t\t\t gfc_array_i4 * get);\n+iexport_proto(random_seed);\n \n /* normalize.c */\n \n-#define normalize_r4_i4 prefix(normalize_r4_i4)\n-GFC_REAL_4 normalize_r4_i4 (GFC_UINTEGER_4, GFC_UINTEGER_4);\n+extern GFC_REAL_4 normalize_r4_i4 (GFC_UINTEGER_4, GFC_UINTEGER_4);\n+internal_proto(normalize_r4_i4);\n \n-#define normalize_r8_i8 prefix(normalize_r8_i8)\n-GFC_REAL_8 normalize_r8_i8 (GFC_UINTEGER_8, GFC_UINTEGER_8);\n+extern GFC_REAL_8 normalize_r8_i8 (GFC_UINTEGER_8, GFC_UINTEGER_8);\n+internal_proto(normalize_r8_i8);\n \n /* size.c */\n \n typedef GFC_ARRAY_DESCRIPTOR (GFC_MAX_DIMENSIONS, void) array_t;\n \n-#define size0 prefix(size0)\n-index_type size0 (const array_t * array); \n+extern index_type size0 (const array_t * array); \n+iexport_proto(size0);\n \n #endif  /* LIBGFOR_H  */\n-"}, {"sha": "989f91cfdb620802d5e6355144e99f855f28c426", "filename": "libgfortran/m4/cshift1.m4", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fcshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fcshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcshift1.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -26,9 +26,15 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n+void __cshift1_`'atype_kind (const gfc_array_char * ret,\n+\t\t\t     const gfc_array_char * array,\n+\t\t\t     const atype * h, const atype_name * pwhich);\n+export_proto_np(__cshift1_`'atype_kind);\n+\n void\n-`__cshift1_'atype_kind (const gfc_array_char * ret, const gfc_array_char * array,\n-    const atype * h, const atype_name * pwhich)\n+__cshift1_`'atype_kind (const gfc_array_char * ret,\n+\t\t\tconst gfc_array_char * array,\n+\t\t\tconst atype * h, const atype_name * pwhich)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS - 1];\n@@ -42,7 +48,7 @@ void\n   index_type soffset;\n   const char *sptr;\n   const char *src;\n-`  /* h.* indicates the shift array.  */'\n+  /* h.* indicates the shift array.  */\n   index_type hstride[GFC_MAX_DIMENSIONS - 1];\n   index_type hstride0;\n   const atype_name *hptr;\n@@ -71,7 +77,7 @@ void\n   size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n \n-`/* Initialized for avoiding compiler warnings.  */'\n+  /* Initialized for avoiding compiler warnings.  */\n   roffset = size;\n   soffset = size;\n   len = 0;\n@@ -116,7 +122,7 @@ void\n \n   while (rptr)\n     {\n-`      /* Do the shift for this dimension.  */'\n+      /* Do the shift for this dimension.  */\n       sh = *hptr;\n       sh = (div (sh, len)).rem;\n       if (sh < 0)\n@@ -168,4 +174,3 @@ void\n         }\n     }\n }\n-"}, {"sha": "3e3245c0aac24bc105886bccc0f978ebf7ecf50f", "filename": "libgfortran/m4/dotprod.m4", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fdotprod.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fdotprod.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fdotprod.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,9 +27,12 @@ include(iparm.m4)dnl\n \n typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n \n+extern rtype_name __dot_product_`'rtype_code (rtype * a, rtype * b);\n+export_proto_np(__dot_product_`'rtype_code);\n+\n /* Both parameters will already have been converted to the result type.  */\n rtype_name\n-`__dot_product_'rtype_code (rtype * a, rtype * b)\n+__dot_product_`'rtype_code (rtype * a, rtype * b)\n {\n   rtype_name *pa;\n   rtype_name *pb;\n@@ -63,4 +66,3 @@ sinclude(`dotprod_asm_'rtype_code`.m4')dnl\n \n   return res;\n }\n-"}, {"sha": "38ef7fc0849814bd6dd58481b8cc4e845542349e", "filename": "libgfortran/m4/dotprodc.m4", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fdotprodc.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fdotprodc.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fdotprodc.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -28,9 +28,12 @@ include(iparm.m4)dnl\n \n typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) char_array;\n \n+extern rtype_name __dot_product_`'rtype_code (rtype * a, rtype * b);\n+export_proto_np(__dot_product_`'rtype_code);\n+\n /* Both parameters will already have been converted to the result type.  */\n rtype_name\n-`__dot_product_'rtype_code (rtype * a, rtype * b)\n+__dot_product_`'rtype_code (rtype * a, rtype * b)\n {\n   rtype_name *pa;\n   rtype_name *pb;\n@@ -66,4 +69,3 @@ sinclude(`dotprod_asm_'rtype_code`.m4')dnl\n \n   return res;\n }\n-"}, {"sha": "dc196e0bb1b65f57ee149ce644217ec10980b329", "filename": "libgfortran/m4/dotprodl.m4", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fdotprodl.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fdotprodl.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fdotprodl.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,8 +25,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n+extern rtype_name __dot_product_`'rtype_code (gfc_array_l4 *, gfc_array_l4 *);\n+export_proto_np(__dot_product_`'rtype_code);\n+\n rtype_name\n-`__dot_product_'rtype_code (gfc_array_l4 * a, gfc_array_l4 * b)\n+__dot_product_`'rtype_code (gfc_array_l4 * a, gfc_array_l4 * b)\n {\n   GFC_LOGICAL_4 *pa;\n   GFC_LOGICAL_4 *pb;\n@@ -72,4 +75,3 @@ rtype_name\n \n   return 0;\n }\n-"}, {"sha": "f8ae460b78c4192e01f71acc7ebd3ec08b24f533", "filename": "libgfortran/m4/eoshift1.m4", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Feoshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Feoshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift1.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -29,9 +29,17 @@ include(iparm.m4)dnl\n static const char zeros[16] =\n   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n \n+extern void __eoshift1_`'atype_kind (const gfc_array_char *,\n+\t\t\t\t     const gfc_array_char *,\n+\t\t\t\t     const atype *, const char *,\n+\t\t\t\t     const atype_name *);\n+export_proto_np(__eoshift1_`'atype_kind);\n+\n void\n-`__eoshift1_'atype_kind (const gfc_array_char * ret, const gfc_array_char * array,\n-    const atype * h, const char * pbound, const atype_name * pwhich)\n+__eoshift1_`'atype_kind (const gfc_array_char *ret,\n+\t\t\t const gfc_array_char *array,\n+\t\t\t const atype *h, const char *pbound,\n+\t\t\t const atype_name *pwhich)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS - 1];\n@@ -176,4 +184,3 @@ void\n         }\n     }\n }\n-"}, {"sha": "4e706dc8aa3536d2f883c7473471601ca6b8b119", "filename": "libgfortran/m4/eoshift3.m4", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Feoshift3.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Feoshift3.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift3.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -29,9 +29,15 @@ include(iparm.m4)dnl\n static const char zeros[16] =\n   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n \n+extern void __eoshift3_`'atype_kind (gfc_array_char *, gfc_array_char *,\n+\t\t\t\t     atype *, const gfc_array_char *,\n+\t\t\t\t     atype_name *);\n+export_proto_np(__eoshift3_`'atype_kind);\n+\n void\n-`__eoshift3_'atype_kind (gfc_array_char * ret, gfc_array_char * array,\n-    atype * h, const gfc_array_char * bound, atype_name * pwhich)\n+__eoshift3_`'atype_kind (gfc_array_char *ret, gfc_array_char *array,\n+\t\t\t atype *h, const gfc_array_char *bound,\n+\t\t\t atype_name *pwhich)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS - 1];\n@@ -191,4 +197,3 @@ void\n         }\n     }\n }\n-"}, {"sha": "a0e31e3c84b5c80b9d656965f5bef48bf9133e2a", "filename": "libgfortran/m4/exponent.m4", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fexponent.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fexponent.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fexponent.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -23,8 +23,11 @@ Boston, MA 02111-1307, USA.  */\n \n include(`mtype.m4')dnl\n \n+extern GFC_INTEGER_4 exponent_r`'kind (real_type s);\n+export_proto(exponent_r`'kind);\n+\n GFC_INTEGER_4\n-prefix(exponent_r`'kind) (real_type s)\n+exponent_r`'kind (real_type s)\n {\n   int ret;\n   frexp`'q (s, &ret);"}, {"sha": "dd71865d4d3d0f128881adf3c9969b8695819e4b", "filename": "libgfortran/m4/fraction.m4", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Ffraction.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Ffraction.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Ffraction.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -23,8 +23,11 @@ Boston, MA 02111-1307, USA.  */\n \n include(`mtype.m4')dnl\n \n+extern real_type fraction_r`'kind (real_type s);\n+export_proto(fraction_r`'kind);\n+\n real_type\n-prefix(fraction_r`'kind) (real_type s)\n+fraction_r`'kind (real_type s)\n {\n   int dummy_exp;\n   return frexp`'q (s, &dummy_exp);"}, {"sha": "b67770b4843c7f8f72d788ff641411887655d074", "filename": "libgfortran/m4/iforeach.m4", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fiforeach.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fiforeach.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fiforeach.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -3,7 +3,11 @@ dnl Contains the generic sections of the array functions.\n dnl This file is part of the GNU Fortran 95 Runtime Library (libgfortran)\n dnl Distributed under the GNU LGPL.  See COPYING for details.\n define(START_FOREACH_FUNCTION,\n-`void\n+`\n+extern void `__'name`'rtype_qual`_'atype_code (rtype * retarray, atype *array);\n+export_proto_np(`__'name`'rtype_qual`_'atype_code);\n+\n+void\n `__'name`'rtype_qual`_'atype_code (rtype * retarray, atype *array)\n {\n   index_type count[GFC_MAX_DIMENSIONS];\n@@ -85,7 +89,11 @@ define(FINISH_FOREACH_FUNCTION,\n   }\n }')dnl\n define(START_MASKED_FOREACH_FUNCTION,\n-`void\n+`\n+extern void `__m'name`'rtype_qual`_'atype_code (rtype *, atype *, gfc_array_l4 *);\n+export_proto_np(`__m'name`'rtype_qual`_'atype_code);\n+\n+void\n `__m'name`'rtype_qual`_'atype_code (rtype * retarray, atype *array, gfc_array_l4 * mask)\n {\n   index_type count[GFC_MAX_DIMENSIONS];"}, {"sha": "0a377a58e9f201d87403c8ad374bbab5304713b4", "filename": "libgfortran/m4/ifunction.m4", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fifunction.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fifunction.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifunction.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -18,8 +18,12 @@ dnl Execution should be allowed to continue to the end of the block.\n dnl You should not return or break from the inner loop of the implementation.\n dnl Care should also be taken to avoid using the names defined in iparm.m4\n define(START_ARRAY_FUNCTION,\n-`void\n-`__'name`'rtype_qual`_'atype_code (rtype * retarray, atype *array, index_type *pdim)\n+`\n+extern void `__'name`'rtype_qual`_'atype_code (rtype *, atype *, index_type *);\n+export_proto_np(`__'name`'rtype_qual`_'atype_code);\n+\n+void\n+`__'name`'rtype_qual`_'atype_code (rtype *retarray, atype *array, index_type *pdim)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n@@ -138,7 +142,12 @@ define(FINISH_ARRAY_FUNCTION,\n     }\n }')dnl\n define(START_MASKED_ARRAY_FUNCTION,\n-`void\n+`\n+extern void `__m'name`'rtype_qual`_'atype_code (rtype *, atype *, index_type *,\n+\t\t\t\t\t\tgfc_array_l4 *);\n+export_proto_np(`__m'name`'rtype_qual`_'atype_code);\n+\n+void\n `__m'name`'rtype_qual`_'atype_code (rtype * retarray, atype * array, index_type *pdim, gfc_array_l4 * mask)\n {\n   index_type count[GFC_MAX_DIMENSIONS - 1];"}, {"sha": "ef631d3e5f8fff50706ceaad876ad11d45c3d58b", "filename": "libgfortran/m4/matmul.m4", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fmatmul.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fmatmul.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmul.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -38,6 +38,9 @@ include(iparm.m4)dnl\n          C(I,J) = C(I,J)+A(I,K)*B(K,J)\n */\n \n+extern void `__matmul_'rtype_code (rtype * retarray, rtype * a, rtype * b);\n+export_proto_np(`__matmul_'rtype_code);\n+\n void\n `__matmul_'rtype_code (rtype * retarray, rtype * a, rtype * b)\n {"}, {"sha": "4091ef65f2eac8b7bddf0cb23d71892ccc695744", "filename": "libgfortran/m4/matmull.m4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fmatmull.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fmatmull.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmull.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -27,6 +27,10 @@ include(iparm.m4)dnl\n \n /* Dimensions: retarray(x,y) a(x, count) b(count,y).\n    Either a or b can be rank 1.  In this case x or y is 1.  */\n+\n+extern void `__matmul_'rtype_code (rtype *, gfc_array_l4 *, gfc_array_l4 *);\n+export_proto_np(`__matmul_'rtype_code);\n+\n void\n `__matmul_'rtype_code (rtype * retarray, gfc_array_l4 * a, gfc_array_l4 * b)\n {"}, {"sha": "54b8550e9b1128989a7dc1c2dab6f7dce85e5a22", "filename": "libgfortran/m4/nearest.m4", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fnearest.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fnearest.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fnearest.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,11 @@ Boston, MA 02111-1307, USA.  */\n \n include(`mtype.m4')dnl\n \n+extern real_type nearest_r`'kind (real_type s, real_type dir);\n+export_proto(nearest_r`'kind);\n+\n real_type\n-prefix(nearest_r`'kind) (real_type s, real_type dir)\n+nearest_r`'kind (real_type s, real_type dir)\n {\n   dir = copysign`'q (__builtin_inf`'q (), dir);\n   if (FLT_EVAL_METHOD != 0)"}, {"sha": "724cebe5d5d1863b89c34a114216011471b08360", "filename": "libgfortran/m4/pow.m4", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fpow.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fpow.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fpow.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -23,13 +23,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+/* Use Binary Method to calculate the powi. This is not an optimal but\n    a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n    Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n    of Computer Programming\", 3rd Edition, 1998.  */\n \n+rtype_name `pow_'rtype_code`_'atype_code (rtype_name a, atype_name b);\n+export_proto(pow_`'rtype_code`_'atype_code);\n+\n rtype_name\n-`prefix(pow_'rtype_code`_'atype_code) (rtype_name a, atype_name b)\n+`pow_'rtype_code`_'atype_code (rtype_name a, atype_name b)\n {\n   rtype_name pow, x;\n   atype_name n, u;"}, {"sha": "7355a7a172b0074ef808b9f3b1f4f47575c3f28b", "filename": "libgfortran/m4/reshape.m4", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Freshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Freshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Freshape.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -30,6 +30,11 @@ typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n /* The shape parameter is ignored. We can currently deduce the shape from the\n    return array.  */\n dnl Only the kind (ie size) is used to name the function.\n+\n+extern void `__reshape_'rtype_kind (rtype *, rtype *, shape_type *,\n+\t\t\t\t    rtype *, shape_type *);\n+extern_proto_np(`__reshape_'rtype_kind);\n+\n void\n `__reshape_'rtype_kind (rtype * ret, rtype * source, shape_type * shape,\n                       rtype * pad, shape_type * order)\n@@ -224,4 +229,3 @@ void\n         }\n     }\n }\n-"}, {"sha": "00ea8b0d941188f7622af2d0dc2a32de0cbeeb27", "filename": "libgfortran/m4/set_exponent.m4", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fset_exponent.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fset_exponent.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fset_exponent.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -23,8 +23,11 @@ Boston, MA 02111-1307, USA.  */\n \n include(`mtype.m4')dnl\n \n+extern real_type set_exponent_r`'kind (real_type s, GFC_INTEGER_4 i);\n+export_proto(set_exponent_r`'kind);\n+\n real_type\n-prefix(set_exponent_r`'kind) (real_type s, GFC_INTEGER_4 i)\n+set_exponent_r`'kind (real_type s, GFC_INTEGER_4 i)\n {\n   int dummy_exp;\n   return scalbn`'q (frexp`'q (s, &dummy_exp), i);"}, {"sha": "e10fe0c09865ca99716bd61cbdd40c844dd74154", "filename": "libgfortran/m4/shape.m4", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Fshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fshape.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,6 +25,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n+extern void `__shape_'rtype_kind (rtype * ret, const rtype * array);\n+export_proto_np(`__shape_'rtype_kind);\n+\n void\n `__shape_'rtype_kind (rtype * ret, const rtype * array)\n {\n@@ -41,4 +44,3 @@ void\n         array->dim[n].ubound + 1 - array->dim[n].lbound;\n     }\n }\n-"}, {"sha": "e519b2965adeca6bc5b9e3beeca6efef6d7e86b3", "filename": "libgfortran/m4/transpose.m4", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Ftranspose.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fm4%2Ftranspose.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Ftranspose.m4?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,6 +24,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n+extern void `__transpose_'rtype_kind (rtype * ret, rtype * source);\n+export_proto_np(`__transpose_'rtype_kind);\n+\n void\n `__transpose_'rtype_kind (rtype * ret, rtype * source)\n {"}, {"sha": "02831f14a0e8c6540666cf9dfc4d3f06d6ec3a1b", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n  * but other variables are checked during execution of the user's\n  * program. */\n \n-options_t options;\n+options_t options = { };\n \n extern char **environ;\n "}, {"sha": "2ccaff0676873406845eac581244a328013f1c21", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -48,8 +48,11 @@ Boston, MA 02111-1307, USA.  */\n  * that files that report loci and those that do not can be linked\n  * together without reporting an erroneous position. */\n \n-char *filename;\n-unsigned line;\n+char *filename = 0;\n+iexport_data(filename);\n+\n+unsigned line = 0;\n+iexport_data(line);\n \n static char buffer[32];\t\t/* buffer for integer/ascii conversions */\n \n@@ -332,6 +335,7 @@ runtime_error (const char *message)\n   st_printf (\"Fortran runtime error: %s\\n\", message);\n   sys_exit (2);\n }\n+iexport(runtime_error);\n \n \n /* void internal_error()-- These are this-can't-happen errors"}, {"sha": "7849a58012f642034f122599719c0d83c50f0cf1", "filename": "libgfortran/runtime/in_pack_generic.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fin_pack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fin_pack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_pack_generic.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,6 +25,9 @@ Boston, MA 02111-1307, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n+extern void *internal_pack (gfc_array_char *);\n+export_proto(internal_pack);\n+\n void *\n internal_pack (gfc_array_char * source)\n {"}, {"sha": "313a79f5fa228cc3bc5f266f14977ff944bd8f80", "filename": "libgfortran/runtime/in_unpack_generic.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fin_unpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fin_unpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_unpack_generic.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,6 +25,9 @@ Boston, MA 02111-1307, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n+extern void internal_unpack (gfc_array_char *, const void *);\n+export_proto(internal_unpack);\n+\n void\n internal_unpack (gfc_array_char * d, const void * s)\n {"}, {"sha": "882946c41a01c83235fbc19d29f517263b497862", "filename": "libgfortran/runtime/main.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmain.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -29,12 +29,11 @@ Boston, MA 02111-1307, USA.  */\n /* This is the offset (in bytes) required to cast from logical(8)* to\n    logical(4)*. and still get the same result.  Will be 0 for little-endian\n    machines and 4 for big-endian machines.  */\n-int l8_to_l4_offset;\n+int l8_to_l4_offset = 0;\n \n \n /* Figure out endianness for this machine.  */\n \n-#define detetmine_endianness\tprefix(determine_endianness)\n static void\n determine_endianness (void)\n {\n@@ -95,12 +94,10 @@ init (void)\n   if (argc > 1 && strcmp (argv[1], \"--help\") == 0)\n     show_variables ();\n \n-/*  if (argc > 1 && strcmp(argv[1], \"--resume\") == 0) resume();  */\n+  /* if (argc > 1 && strcmp(argv[1], \"--resume\") == 0) resume();  */\n #endif\n \n-  memory_init ();\n   random_seed(NULL,NULL,NULL);\n-\n }\n \n "}, {"sha": "71bad9f3bd93af778fd8ba2fdb31e6fc1723187b", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -37,7 +37,6 @@ Boston, MA 02111-1307, USA.  */\n    the memory we allocate internally.  We could also use this for user\n    allocated memory (ALLOCATE/DEALLOCATE).  This should be stored in a\n    seperate list.  */\n-#define malloc_t\tprefix(malloc_t)\n typedef struct malloc_t\n {\n   int magic;\n@@ -59,31 +58,25 @@ malloc_t;\n \n /* The root of the circular double linked list for compiler generated\n    malloc calls.  */\n-static malloc_t mem_root;\n-\n-\n-void\n-memory_init (void)\n-{\n-  /* The root should never be used directly, so don't set the magic.  */\n-  mem_root.magic = 0;\n-  mem_root.next = &mem_root;\n-  mem_root.prev = &mem_root;\n-  mem_root.marker = 0;\n-}\n-\n-\n+static malloc_t mem_root = {\n+\t.next = &mem_root,\n+\t.prev = &mem_root\n+};\n+\n+#if 0\n+/* ??? Disabled because, well, it wasn't being called before transforming\n+   it to a destructor, and turning it on causes testsuite failures.  */\n /* Doesn't actually do any cleaning up, just throws an error if something\n    has got out of sync somewhere.  */\n \n-void\n+static void __attribute__((destructor))\n runtime_cleanup (void)\n {\n   /* Make sure all memory we've allocated is freed on exit.  */\n   if (mem_root.next != &mem_root)\n     runtime_error (\"Unfreed memory on program termination\");\n }\n-\n+#endif\n \n \n void *\n@@ -92,13 +85,9 @@ get_mem (size_t n)\n   void *p;\n \n #ifdef GFC_CLEAR_MEMORY\n-  p = (void *) calloc (n, 1);\n+  p = (void *) calloc (1, n);\n #else\n-#define temp malloc\n-#undef malloc\n   p = (void *) malloc (n);\n-#define malloc temp\n-#undef temp\n #endif\n   if (p == NULL)\n     os_error (\"Memory allocation failed\");\n@@ -157,6 +146,8 @@ internal_malloc_size (size_t size)\n   return DATA_POINTER (newmem);\n }\n \n+extern void *internal_malloc (GFC_INTEGER_4);\n+export_proto(internal_malloc);\n \n void *\n internal_malloc (GFC_INTEGER_4 size)\n@@ -170,6 +161,8 @@ internal_malloc (GFC_INTEGER_4 size)\n   return internal_malloc_size ((size_t) size);\n }\n \n+extern void *internal_malloc64 (GFC_INTEGER_8);\n+export_proto(internal_malloc64);\n \n void *\n internal_malloc64 (GFC_INTEGER_8 size)\n@@ -209,6 +202,7 @@ internal_free (void *mem)\n \n   free (m);\n }\n+iexport(internal_free);\n \n \n /* User-allocate, one call for each member of the alloc-list of an\n@@ -244,6 +238,8 @@ allocate_size (void **mem, size_t size, GFC_INTEGER_4 * stat)\n     *stat = 0;\n }\n \n+extern void allocate (void **, GFC_INTEGER_4, GFC_INTEGER_4 *);\n+export_proto(allocate);\n \n void\n allocate (void **mem, GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n@@ -258,6 +254,8 @@ allocate (void **mem, GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n   allocate_size (mem, (size_t) size, stat);\n }\n \n+extern void allocate64 (void **, GFC_INTEGER_8, GFC_INTEGER_4 *);\n+export_proto(allocate64);\n \n void\n allocate64 (void **mem, GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n@@ -276,6 +274,9 @@ allocate64 (void **mem, GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n \n /* User-deallocate; pointer is NULLified. */\n \n+extern void deallocate (void **, GFC_INTEGER_4 *);\n+export_proto(deallocate);\n+\n void\n deallocate (void **mem, GFC_INTEGER_4 * stat)\n {"}, {"sha": "e6d683b70fb96584bfe6c307a9c4418340d31169", "filename": "libgfortran/runtime/pause.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fpause.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fpause.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fpause.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -25,9 +25,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"libgfortran.h\"\n \n-#define pause_numeric prefix(pause_numeric)\n-#define pause_string prefix(pause_string)\n-\n static void\n do_pause (void)\n {\n@@ -42,6 +39,10 @@ do_pause (void)\n }\n \n /* A numeric or blank STOP statement.  */\n+\n+extern void pause_numeric (GFC_INTEGER_4 code);\n+export_proto(pause_numeric);\n+\n void\n pause_numeric (GFC_INTEGER_4 code)\n {\n@@ -55,6 +56,8 @@ pause_numeric (GFC_INTEGER_4 code)\n   do_pause ();\n }\n \n+extern void pause_string (char *string, GFC_INTEGER_4 len);\n+export_proto(pause_string);\n \n void\n pause_string (char *string, GFC_INTEGER_4 len)"}, {"sha": "807845cee583155ebba773dba6d9cfc3eca73491", "filename": "libgfortran/runtime/select.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fselect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fselect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fselect.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -30,15 +30,18 @@ typedef struct\n }\n select_struct;\n \n-\n-#define select_string prefix(select_string)\n+extern void * select_string (select_struct *table, int table_len,\n+\t\t\t     void *default_jump, const char *selector,\n+\t\t\t     int selector_len);\n+export_proto(select_string);\n \n \n /* select_string()-- Given a selector string and a table of\n  * select_struct structures, return the address to jump to. */\n \n-void *select_string (select_struct *table, int table_len, void *default_jump,\n-                    const char *selector, int selector_len)\n+void *\n+select_string (select_struct *table, int table_len, void *default_jump,\n+\t       const char *selector, int selector_len)\n {\n   select_struct *t;\n   int i, low, high, mid;"}, {"sha": "5ae06ec957bedda95df7569c88808da0c43a392a", "filename": "libgfortran/runtime/stop.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fstop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35/libgfortran%2Fruntime%2Fstop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstop.c?ref=7d7b8bfe55f8598f2fa0f842fb7f95060c45fa35", "patch": "@@ -24,8 +24,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"libgfortran.h\"\n \n-#define stop_string prefix(stop_string)\n-\n /* A numeric or blank STOP statement.  */\n void\n stop_numeric (GFC_INTEGER_4 code)\n@@ -39,7 +37,11 @@ stop_numeric (GFC_INTEGER_4 code)\n \n   sys_exit (code);\n }\n+iexport(stop_numeric);\n+\n \n+extern void stop_string (const char *string, GFC_INTEGER_4 len);\n+export_proto(stop_string);\n \n void\n stop_string (const char *string, GFC_INTEGER_4 len)"}]}