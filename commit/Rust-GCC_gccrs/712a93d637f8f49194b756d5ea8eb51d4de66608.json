{"sha": "712a93d637f8f49194b756d5ea8eb51d4de66608", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyYTkzZDYzN2Y4ZjQ5MTk0Yjc1NmQ1ZWE4ZWI1MWQ0ZGU2NjYwOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-12T08:56:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-12T08:56:14Z"}, "message": "re PR tree-optimization/68961 (Test case gcc.target/powerpc/pr60203.c fails since r231674)\n\n2016-07-12  Richard Biener  <rguenther@suse.de>\n\n\tPR rtl-optimization/68961\n\t* fwprop.c (propagate_rtx): Allow SUBREGs of VEC_CONCAT and CONCAT\n\tto simplify to a non-constant.\n\n\t* gcc.target/i386/pr68961.c: New testcase.\n\nFrom-SVN: r238238", "tree": {"sha": "f56347f8c8d0b7fbfa050d2666f224d5c7a5511b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f56347f8c8d0b7fbfa050d2666f224d5c7a5511b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/712a93d637f8f49194b756d5ea8eb51d4de66608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712a93d637f8f49194b756d5ea8eb51d4de66608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712a93d637f8f49194b756d5ea8eb51d4de66608", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712a93d637f8f49194b756d5ea8eb51d4de66608/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c61b47f177e9b8268cb9d3008574c021fd4464c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c61b47f177e9b8268cb9d3008574c021fd4464c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c61b47f177e9b8268cb9d3008574c021fd4464c"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "3c9432a67a7a189aecfc6f68d7692e67dd222e63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712a93d637f8f49194b756d5ea8eb51d4de66608/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712a93d637f8f49194b756d5ea8eb51d4de66608/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=712a93d637f8f49194b756d5ea8eb51d4de66608", "patch": "@@ -1,3 +1,9 @@\n+2016-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/68961\n+\t* fwprop.c (propagate_rtx): Allow SUBREGs of VEC_CONCAT and CONCAT\n+\tto simplify to a non-constant.\n+\n 2016-07-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/71758"}, {"sha": "88cfefbe1ef930c847b85aa3801a8c402930ffce", "filename": "gcc/fwprop.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712a93d637f8f49194b756d5ea8eb51d4de66608/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712a93d637f8f49194b756d5ea8eb51d4de66608/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=712a93d637f8f49194b756d5ea8eb51d4de66608", "patch": "@@ -619,6 +619,15 @@ propagate_rtx_1 (rtx *px, rtx old_rtx, rtx new_rtx, int flags)\n \n   *px = tem;\n \n+  /* Allow replacements that simplify operations on a vector or complex\n+     value to a component.  The most prominent case is\n+     (subreg ([vec_]concat ...)).   */\n+  if (REG_P (tem) && !HARD_REGISTER_P (tem)\n+      && (VECTOR_MODE_P (GET_MODE (new_rtx))\n+\t  || COMPLEX_MODE_P (GET_MODE (new_rtx)))\n+      && GET_MODE (tem) == GET_MODE_INNER (GET_MODE (new_rtx)))\n+    return true;\n+\n   /* The replacement we made so far is valid, if all of the recursive\n      replacements were valid, or we could simplify everything to\n      a constant.  */"}, {"sha": "f524bdac96412581b8a4b919b53ce0364f002d9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712a93d637f8f49194b756d5ea8eb51d4de66608/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712a93d637f8f49194b756d5ea8eb51d4de66608/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=712a93d637f8f49194b756d5ea8eb51d4de66608", "patch": "@@ -1,3 +1,8 @@\n+2016-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/68961\n+\t* gcc.target/i386/pr68961.c: New testcase.\n+\n 2016-07-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/71758"}, {"sha": "ef379c4701a3a5de98cc9f920331911ae5e36548", "filename": "gcc/testsuite/gcc.target/i386/pr68961.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712a93d637f8f49194b756d5ea8eb51d4de66608/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68961.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712a93d637f8f49194b756d5ea8eb51d4de66608/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68961.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68961.c?ref=712a93d637f8f49194b756d5ea8eb51d4de66608", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O3 -fno-vect-cost-model -fdump-tree-slp2-details\" } */\n+\n+struct x { double d[2]; };\n+\n+struct x\n+pack (double a, double aa)\n+{\n+  struct x u;\n+  u.d[0] = a;\n+  u.d[1] = aa;\n+  return u;\n+}\n+\n+/* The function should be optimized to just return as arguments and\n+   result exactly overlap even when previously vectorized.  */\n+\n+/* { dg-final { scan-tree-dump \"basic block vectorized\" \"slp2\" } } */\n+/* { dg-final { scan-assembler-not \"mov\" } } */"}]}