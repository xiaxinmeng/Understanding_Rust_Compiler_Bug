{"sha": "4a389eb62b96bb738c79c339f38aae45ef46ef39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEzODllYjYyYjk2YmI3MzhjNzljMzM5ZjM4YWFlNDVlZjQ2ZWYzOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-08-27T22:00:17Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-08-27T22:00:17Z"}, "message": "Fix folding of VECTOR_CST comparisons\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/71077\n\tPR tree-optimization/68542\n\t* fold-const.c (fold_relational_const): Fix folding of\n\tVECTOR_CST comparisons that have a scalar boolean result type.\n\t(selftest::test_vector_folding): New static function.\n\t(selftest::fold_const_c_tests): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/71077\n\t* gcc.target/i386/pr71077.c: New test.\n\nFrom-SVN: r239798", "tree": {"sha": "d14c018a5485ca5084547adb1f055ef0ddc8f470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d14c018a5485ca5084547adb1f055ef0ddc8f470"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a389eb62b96bb738c79c339f38aae45ef46ef39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a389eb62b96bb738c79c339f38aae45ef46ef39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a389eb62b96bb738c79c339f38aae45ef46ef39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a389eb62b96bb738c79c339f38aae45ef46ef39/comments", "author": null, "committer": null, "parents": [{"sha": "3e13c3b9b88357c0f6aeca0bfb6f678dff52c204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e13c3b9b88357c0f6aeca0bfb6f678dff52c204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e13c3b9b88357c0f6aeca0bfb6f678dff52c204"}], "stats": {"total": 86, "additions": 81, "deletions": 5}, "files": [{"sha": "cb259a07fab7fee7956e1a2a7411df38133fd7ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a389eb62b96bb738c79c339f38aae45ef46ef39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a389eb62b96bb738c79c339f38aae45ef46ef39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a389eb62b96bb738c79c339f38aae45ef46ef39", "patch": "@@ -1,3 +1,12 @@\n+2016-08-27  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR tree-optimization/71077\n+\tPR tree-optimization/68542\n+\t* fold-const.c (fold_relational_const): Fix folding of\n+\tVECTOR_CST comparisons that have a scalar boolean result type.\n+\t(selftest::test_vector_folding): New static function.\n+\t(selftest::fold_const_c_tests): Call it.\n+\n 2016-08-27  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/extend.texi (SPU Built-in Functions): Remove stale"}, {"sha": "bf177b609e5954ba3b83d9a3df1c4ecea04759da", "filename": "gcc/fold-const.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a389eb62b96bb738c79c339f38aae45ef46ef39/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a389eb62b96bb738c79c339f38aae45ef46ef39/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4a389eb62b96bb738c79c339f38aae45ef46ef39", "patch": "@@ -13898,19 +13898,19 @@ fold_relational_const (enum tree_code code, tree type, tree op0, tree op1)\n       if (!VECTOR_TYPE_P (type))\n \t{\n \t  /* Have vector comparison with scalar boolean result.  */\n-\t  bool result = true;\n \t  gcc_assert ((code == EQ_EXPR || code == NE_EXPR)\n \t\t      && VECTOR_CST_NELTS (op0) == VECTOR_CST_NELTS (op1));\n \t  for (unsigned i = 0; i < VECTOR_CST_NELTS (op0); i++)\n \t    {\n \t      tree elem0 = VECTOR_CST_ELT (op0, i);\n \t      tree elem1 = VECTOR_CST_ELT (op1, i);\n \t      tree tmp = fold_relational_const (code, type, elem0, elem1);\n-\t      result &= integer_onep (tmp);\n+\t      if (tmp == NULL_TREE)\n+\t\treturn NULL_TREE;\n+\t      if (integer_zerop (tmp))\n+\t\treturn constant_boolean_node (false, type);\n \t    }\n-\t  if (code == NE_EXPR)\n-\t    result = !result;\n-\t  return constant_boolean_node (result, type);\n+\t  return constant_boolean_node (true, type);\n \t}\n       unsigned count = VECTOR_CST_NELTS (op0);\n       tree *elts =  XALLOCAVEC (tree, count);\n@@ -14518,12 +14518,32 @@ test_arithmetic_folding ()\n \t\t\t\t   x);\n }\n \n+/* Verify that various binary operations on vectors are folded\n+   correctly.  */\n+\n+static void\n+test_vector_folding ()\n+{\n+  tree inner_type = integer_type_node;\n+  tree type = build_vector_type (inner_type, 4);\n+  tree zero = build_zero_cst (type);\n+  tree one = build_one_cst (type);\n+\n+  /* Verify equality tests that return a scalar boolean result.  */\n+  tree res_type = boolean_type_node;\n+  ASSERT_FALSE (integer_nonzerop (fold_build2 (EQ_EXPR, res_type, zero, one)));\n+  ASSERT_TRUE (integer_nonzerop (fold_build2 (EQ_EXPR, res_type, zero, zero)));\n+  ASSERT_TRUE (integer_nonzerop (fold_build2 (NE_EXPR, res_type, zero, one)));\n+  ASSERT_FALSE (integer_nonzerop (fold_build2 (NE_EXPR, res_type, one, one)));\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n fold_const_c_tests ()\n {\n   test_arithmetic_folding ();\n+  test_vector_folding ();\n }\n \n } // namespace selftest"}, {"sha": "344aa203b0fa42453563af87801ace82b2507149", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a389eb62b96bb738c79c339f38aae45ef46ef39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a389eb62b96bb738c79c339f38aae45ef46ef39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a389eb62b96bb738c79c339f38aae45ef46ef39", "patch": "@@ -1,3 +1,8 @@\n+2016-08-27  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR tree-optimization/71077\n+\t* gcc.target/i386/pr71077.c: New test.\n+\n 2016-08-27  Steven G. Kargl <kargl@gcc.gnu.org>\n \n \tPR fortran/77380"}, {"sha": "0637bc990b88bf31020a181ccb4f507a1324264a", "filename": "gcc/testsuite/gcc.target/i386/pr71077.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a389eb62b96bb738c79c339f38aae45ef46ef39/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71077.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a389eb62b96bb738c79c339f38aae45ef46ef39/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71077.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71077.c?ref=4a389eb62b96bb738c79c339f38aae45ef46ef39", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run }  */\n+/* { dg-require-effective-target avx2 }  */\n+/* { dg-options \"-O3 -mavx2\" }  */\n+\n+#include \"avx2-check.h\"\n+\n+typedef unsigned int ui;\n+ui x[32*32];\n+ui y[32];\n+ui z[32];\n+void __attribute__ ((noinline, noclone)) foo (ui n, ui z)\n+{\n+  ui i, b;\n+  ui v;\n+ for (i = 0; i< n; i++)\n+  {\n+    v = y[i];\n+    if (v) {\n+      for (b = 0; b < 32; b++)\n+\tif ((v >> b) & 1)\n+\t  x[i*32 +b] = z;\n+      y[i] = 0;\n+    }\n+  } \n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  int i;\n+  unsigned int val;\n+  for (i = 0; i<32; i++)\n+    {\n+      val = 1U << i;\n+      y[i] = (i & 1)? 0 : val;\n+      z[i] = i;\n+    }\n+  foo (32, 10);\n+  for (i=0; i<1024; i+=66)\n+    if (x[i] != 10)\n+      __builtin_abort ();\n+}"}]}