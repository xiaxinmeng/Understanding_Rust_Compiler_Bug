{"sha": "22f1f4c790759674d47b704e0faa140343e542d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJmMWY0Yzc5MDc1OTY3NGQ0N2I3MDRlMGZhYTE0MDM0M2U1NDJkNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-31T12:18:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-31T12:18:19Z"}, "message": "PR libstdc++/85951 for make_signed/make_unsigned for character types\n\nBecause the wide character types are neither signed integer types nor\nunsigned integer types they need to be transformed to an integral type\nof the correct size and the lowest rank (which is not necessarily the\nunderlying type). Reuse the helpers for enumeration types to select the\ncorrect integer.\n\nThe refactoring of __make_unsigned_selector and __make_signed_selector\nslightly reduces the number of template instantiations and so reduces\nmemory usage.\n\n\tPR libstdc++/85951\n\t* include/std/type_traits [_GLIBCXX_USE_C99_STDINT_TR1]: Do not define\n\tuint_least16_t and uint_least32_t.\n\t(__make_unsigned<wchar_t>): Define unconditionally.\n\t(__make_unsigned_selector<_Tp, true, false>): Remove intermediate\n\ttypedefs.\n\t(__make_unsigned_selector_base): New type to provide helper templates.\n\t(__make_unsigned_selector<_Tp, false, true>): Reimplement using\n\t__make_unsigned_selector_base helpers.\n\t(__make_unsigned<char16_t>, __make_unsigned<char32_t>): Define.\n\t(__make_signed_selector<_Tp, true, false>): Remove intermediate\n\ttypedefs.\n\t(__make_signed<wchar_t>, __make_signed<char16_t>)\n\t(__make_signed<char32_t>)): Define unconditionally.\n\t* testsuite/20_util/make_signed/requirements/typedefs-3.cc: Check\n\twchar_t, char16_t and char32_t are transformed correctly.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n\tdg-error lineno.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-3.cc: Check\n\twchar_t, char16_t and char32_t are transformed correctly.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Adjust\n\tdg-error lineno.\n\nFrom-SVN: r261023", "tree": {"sha": "cd22aba21544238369a50a0a80152a5203283080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd22aba21544238369a50a0a80152a5203283080"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22f1f4c790759674d47b704e0faa140343e542d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f1f4c790759674d47b704e0faa140343e542d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f1f4c790759674d47b704e0faa140343e542d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f1f4c790759674d47b704e0faa140343e542d5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ae39fb2b00b0cfa48a1b62e0a6565daa54a80f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae39fb2b00b0cfa48a1b62e0a6565daa54a80f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae39fb2b00b0cfa48a1b62e0a6565daa54a80f3"}], "stats": {"total": 213, "additions": 150, "deletions": 63}, "files": [{"sha": "8735cacf94105e418f23dc9eb1859001f5eb02be", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=22f1f4c790759674d47b704e0faa140343e542d5", "patch": "@@ -1,3 +1,28 @@\n+2018-05-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/85951\n+\t* include/std/type_traits [_GLIBCXX_USE_C99_STDINT_TR1]: Do not define\n+\tuint_least16_t and uint_least32_t.\n+\t(__make_unsigned<wchar_t>): Define unconditionally.\n+\t(__make_unsigned_selector<_Tp, true, false>): Remove intermediate\n+\ttypedefs.\n+\t(__make_unsigned_selector_base): New type to provide helper templates.\n+\t(__make_unsigned_selector<_Tp, false, true>): Reimplement using\n+\t__make_unsigned_selector_base helpers.\n+\t(__make_unsigned<char16_t>, __make_unsigned<char32_t>): Define.\n+\t(__make_signed_selector<_Tp, true, false>): Remove intermediate\n+\ttypedefs.\n+\t(__make_signed<wchar_t>, __make_signed<char16_t>)\n+\t(__make_signed<char32_t>)): Define unconditionally.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-3.cc: Check\n+\twchar_t, char16_t and char32_t are transformed correctly.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n+\tdg-error lineno.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-3.cc: Check\n+\twchar_t, char16_t and char32_t are transformed correctly.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Adjust\n+\tdg-error lineno.\n+\n 2018-05-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/variant (__erased_dtor): Qualify call to __get."}, {"sha": "4397c484f208180b5e7a63d0bb0089953ac4c4fd", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 93, "deletions": 57, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=22f1f4c790759674d47b704e0faa140343e542d5", "patch": "@@ -37,18 +37,6 @@\n \n #include <bits/c++config.h>\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-# if defined (__UINT_LEAST16_TYPE__) && defined(__UINT_LEAST32_TYPE__)\n-namespace std\n-{\n-  typedef __UINT_LEAST16_TYPE__ uint_least16_t;\n-  typedef __UINT_LEAST32_TYPE__ uint_least32_t;\n-}\n-# else\n-#  include <cstdint>\n-# endif\n-#endif\n-\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -1576,12 +1564,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __make_unsigned<long long>\n     { typedef unsigned long long __type; };\n \n-#if defined(_GLIBCXX_USE_WCHAR_T) && !defined(__WCHAR_UNSIGNED__)\n-  template<>\n-    struct __make_unsigned<wchar_t> : __make_unsigned<__WCHAR_TYPE__>\n-    { };\n-#endif\n-\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n   template<>\n     struct __make_unsigned<__GLIBCXX_TYPE_INT_N_0>\n@@ -1612,36 +1594,77 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     class __make_unsigned_selector<_Tp, true, false>\n     {\n-      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;\n-      typedef typename __unsignedt::__type __unsigned_type;\n-      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;\n+      using __unsigned_type\n+\t= typename __make_unsigned<typename remove_cv<_Tp>::type>::__type;\n \n     public:\n-      typedef typename __cv_unsigned::__type __type;\n+      using __type\n+\t= typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;\n     };\n \n+  class __make_unsigned_selector_base\n+  {\n+  protected:\n+    template<typename...> struct _List { };\n+\n+    template<typename _Tp, typename... _Up>\n+      struct _List<_Tp, _Up...> : _List<_Up...>\n+      { static constexpr size_t __size = sizeof(_Tp); };\n+\n+    template<size_t _Sz, typename _Tp, bool = (_Sz <= _Tp::__size)>\n+      struct __select;\n+\n+    template<size_t _Sz, typename _Uint, typename... _UInts>\n+      struct __select<_Sz, _List<_Uint, _UInts...>, true>\n+      { using __type = _Uint; };\n+\n+    template<size_t _Sz, typename _Uint, typename... _UInts>\n+      struct __select<_Sz, _List<_Uint, _UInts...>, false>\n+      : __select<_Sz, _List<_UInts...>>\n+      { };\n+  };\n+\n+  // Choose unsigned integer type with the smallest rank and same size as _Tp\n   template<typename _Tp>\n     class __make_unsigned_selector<_Tp, false, true>\n+    : __make_unsigned_selector_base\n     {\n       // With -fshort-enums, an enum may be as small as a char.\n-      typedef unsigned char __smallest;\n-      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);\n-      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);\n-      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);\n-      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);\n-      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;\n-      typedef typename __cond3::type __cond3_type;\n-      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;\n-      typedef typename __cond2::type __cond2_type;\n-      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;\n-      typedef typename __cond1::type __cond1_type;\n-\n-      typedef typename conditional<__b0, __smallest, __cond1_type>::type\n-\t__unsigned_type;\n-      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;\n+      using _UInts = _List<unsigned char, unsigned short, unsigned int,\n+\t\t\t   unsigned long, unsigned long long>;\n+\n+      using __unsigned_type = typename __select<sizeof(_Tp), _UInts>::__type;\n \n     public:\n-      typedef typename __cv_unsigned::__type __type;\n+      using __type\n+\t= typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;\n+    };\n+\n+  // wchar_t, char16_t and char32_t are integral types but are neither\n+  // signed integer types not unsigned integer types, so must be\n+  // transformed to the unsigned integer type with the smallest rank.\n+  // Use the partial specialization for enumeration types to do that.\n+#if defined(_GLIBCXX_USE_WCHAR_T)\n+  template<>\n+    struct __make_unsigned<wchar_t>\n+    {\n+      using __type\n+\t= typename __make_unsigned_selector<wchar_t, false, true>::__type;\n+    };\n+#endif\n+\n+  template<>\n+    struct __make_unsigned<char16_t>\n+    {\n+      using __type\n+\t= typename __make_unsigned_selector<char16_t, false, true>::__type;\n+    };\n+\n+  template<>\n+    struct __make_unsigned<char32_t>\n+    {\n+      using __type\n+\t= typename __make_unsigned_selector<char32_t, false, true>::__type;\n     };\n \n   // Given an integral/enum type, return the corresponding unsigned\n@@ -1686,21 +1709,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __make_signed<unsigned long long>\n     { typedef signed long long __type; };\n \n-#if defined(_GLIBCXX_USE_WCHAR_T) && defined(__WCHAR_UNSIGNED__)\n-  template<>\n-    struct __make_signed<wchar_t> : __make_signed<__WCHAR_TYPE__>\n-    { };\n-#endif\n-\n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-  template<>\n-    struct __make_signed<char16_t> : __make_signed<uint_least16_t>\n-    { };\n-  template<>\n-    struct __make_signed<char32_t> : __make_signed<uint_least32_t>\n-    { };\n-#endif\n-\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n   template<>\n     struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_0>\n@@ -1731,14 +1739,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     class __make_signed_selector<_Tp, true, false>\n     {\n-      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;\n-      typedef typename __signedt::__type __signed_type;\n-      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;\n+      using __signed_type\n+\t= typename __make_signed<typename remove_cv<_Tp>::type>::__type;\n \n     public:\n-      typedef typename __cv_signed::__type __type;\n+      using __type\n+\t= typename __match_cv_qualifiers<_Tp, __signed_type>::__type;\n     };\n \n+  // Choose signed integer type with the smallest rank and same size as _Tp\n   template<typename _Tp>\n     class __make_signed_selector<_Tp, false, true>\n     {\n@@ -1748,6 +1757,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __make_signed_selector<__unsigned_type>::__type __type;\n     };\n \n+  // wchar_t, char16_t and char32_t are integral types but are neither\n+  // signed integer types not unsigned integer types, so must be\n+  // transformed to the signed integer type with the smallest rank.\n+  // Use the partial specialization for enumeration types to do that.\n+#if defined(_GLIBCXX_USE_WCHAR_T)\n+  template<>\n+    struct __make_signed<wchar_t>\n+    {\n+      using __type\n+\t= typename __make_signed_selector<wchar_t, false, true>::__type;\n+    };\n+#endif\n+\n+  template<>\n+    struct __make_signed<char16_t>\n+    {\n+      using __type\n+\t= typename __make_signed_selector<char16_t, false, true>::__type;\n+    };\n+\n+  template<>\n+    struct __make_signed<char32_t>\n+    {\n+      using __type\n+\t= typename __make_signed_selector<char32_t, false, true>::__type;\n+    };\n+\n   // Given an integral/enum type, return the corresponding signed\n   // integer type.\n   // Primary template."}, {"sha": "79e0a700d0977d517d8b147138be856b48066322", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-3.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc?ref=22f1f4c790759674d47b704e0faa140343e542d5", "patch": "@@ -59,8 +59,21 @@ using I4 = smallest_rank_t<E4>;\n static_assert(is_same<make_signed<E4>::type,       I4>::value, \"\");\n static_assert(is_same<make_signed<E4 const>::type, I4 const>::value, \"\");\n \n-// PI libstdc++/60333\n+// PR libstdc++/60333\n enum E5 : long long { };\n using I5 = smallest_rank_t<E5>;\n static_assert(is_same<make_signed<E5>::type, I5>::value, \"\");\n static_assert(is_same<make_signed<E5 const>::type, I5 const>::value, \"\");\n+\n+// PR libstdc++/85951\n+using I6 = smallest_rank_t<char16_t>;\n+static_assert(is_same<make_signed<char16_t>::type, I6>::value, \"\");\n+static_assert(is_same<make_signed<char16_t const>::type, I6 const>::value, \"\");\n+using I7 = smallest_rank_t<char32_t>;\n+static_assert(is_same<make_signed<char32_t>::type, I7>::value, \"\");\n+static_assert(is_same<make_signed<char32_t const>::type, I7 const>::value, \"\");\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+using I8 = smallest_rank_t<wchar_t>;\n+static_assert(is_same<make_signed<wchar_t>::type, I8>::value, \"\");\n+static_assert(is_same<make_signed<wchar_t const>::type, I8 const>::value, \"\");\n+#endif"}, {"sha": "13bca19c7e041b2c18b02cba8cd2e80019be1d2d", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=22f1f4c790759674d47b704e0faa140343e542d5", "patch": "@@ -28,7 +28,7 @@ void test01()\n {\n   using std::make_signed;\n \n-  // Negative  tests.\n+  // Negative tests.\n   typedef make_signed<bool>::type     \ttest1_type;\n \n   typedef make_signed<__gnu_test::pod_uint>::type     \ttest2_type;\n@@ -47,4 +47,4 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1757 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1793 }"}, {"sha": "895aa1c59b9d6701eb138d8c4a4e638b69ddc3c1", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-3.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc?ref=22f1f4c790759674d47b704e0faa140343e542d5", "patch": "@@ -59,8 +59,21 @@ using I4 = smallest_rank_t<E4>;\n static_assert(is_same<make_unsigned<E4>::type, I4>::value, \"\");\n static_assert(is_same<make_unsigned<E4 const>::type, I4 const>::value, \"\");\n \n-// PI libstdc++/60333\n+// PR libstdc++/60333\n enum E5 : long long { };\n using I5 = smallest_rank_t<E5>;\n static_assert(is_same<make_unsigned<E5>::type, I5>::value, \"\");\n static_assert(is_same<make_unsigned<E5 const>::type, I5 const>::value, \"\");\n+\n+// PR libstdc++/85951\n+using I6 = smallest_rank_t<char16_t>;\n+static_assert(is_same<make_unsigned<char16_t>::type, I6>::value, \"\");\n+static_assert(is_same<make_unsigned<char16_t const>::type, I6 const>::value, \"\");\n+using I7 = smallest_rank_t<char32_t>;\n+static_assert(is_same<make_unsigned<char32_t>::type, I7>::value, \"\");\n+static_assert(is_same<make_unsigned<char32_t const>::type, I7 const>::value, \"\");\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+using I8 = smallest_rank_t<wchar_t>;\n+static_assert(is_same<make_unsigned<wchar_t>::type, I8>::value, \"\");\n+static_assert(is_same<make_unsigned<wchar_t const>::type, I8 const>::value, \"\");\n+#endif"}, {"sha": "9df01550ea3dba88dd41cf00e14ea1b95763ddf9", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f1f4c790759674d47b704e0faa140343e542d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=22f1f4c790759674d47b704e0faa140343e542d5", "patch": "@@ -28,7 +28,7 @@ void test01()\n {\n   using std::make_unsigned;\n \n-  // Negative  tests.\n+  // Negative tests.\n   typedef make_unsigned<bool>::type     \ttest1_type;\n \n   typedef make_unsigned<__gnu_test::pod_uint>::type     \ttest2_type;\n@@ -47,5 +47,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 41 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1653 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1676 }\n "}]}