{"sha": "c295317dfb5149439fc2ac7d3cf12cfa93ec9db4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5NTMxN2RmYjUxNDk0MzlmYzJhYzdkM2NmMTJjZmE5M2VjOWRiNA==", "commit": {"author": {"name": "Caroline Tice", "email": "ctice@apple.com", "date": "2004-08-10T21:49:49Z"}, "committer": {"name": "Caroline Tice", "email": "ctice@gcc.gnu.org", "date": "2004-08-10T21:49:49Z"}, "message": "Hot/cold partitioning update, sub-patch: fix alignment problems\n\n2004-08-10  Caroline Tice  <ctice@apple.com\n\n        * varasm.c (unlikely_section_label): New global variable.\n        (unlikely_text_section_name): New global variable.\n        (text_section):  Remove alignment statement.\n        (unlikely_text_section): Remove alignment statement; use\n        unlikely_section_label rather than hard-coded string.\n        (assemble_start_function): Initialize unlikely_section_label and\n        unlikely_text_section_name;  make sure cold section is properly\n        aligned at start of function; output unlikely_section_label if\n        appropriate.\n\nFrom-SVN: r85771", "tree": {"sha": "7861811eb99ee68d6ff32f1c445ba46195866433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7861811eb99ee68d6ff32f1c445ba46195866433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c295317dfb5149439fc2ac7d3cf12cfa93ec9db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c295317dfb5149439fc2ac7d3cf12cfa93ec9db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c295317dfb5149439fc2ac7d3cf12cfa93ec9db4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c295317dfb5149439fc2ac7d3cf12cfa93ec9db4/comments", "author": null, "committer": null, "parents": [{"sha": "68f9c5e21e381b28ed2f1d96dedf507af53d4e54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f9c5e21e381b28ed2f1d96dedf507af53d4e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f9c5e21e381b28ed2f1d96dedf507af53d4e54"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "5ac385c421e6dba82c570a7771c6b4f7d2e90911", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c295317dfb5149439fc2ac7d3cf12cfa93ec9db4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c295317dfb5149439fc2ac7d3cf12cfa93ec9db4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c295317dfb5149439fc2ac7d3cf12cfa93ec9db4", "patch": "@@ -1,3 +1,15 @@\n+2004-08-10  Caroline Tice  <ctice@apple.com\n+\n+\t* varasm.c (unlikely_section_label): New global variable.\n+\t(unlikely_text_section_name): New global variable.\n+\t(text_section):  Remove alignment statement.\n+\t(unlikely_text_section): Remove alignment statement; use \n+\tunlikely_section_label rather than hard-coded string.\n+\t(assemble_start_function): Initialize unlikely_section_label and\n+\tunlikely_text_section_name;  make sure cold section is properly\n+\taligned at start of function; output unlikely_section_label if\n+\tappropriate.\n+\n 2004-08-10  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390-protos.h (s390_canonicalize_comparison): Declare."}, {"sha": "908ced5fd0a7fba67dfa1269cd5807caa761129a", "filename": "gcc/varasm.c", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c295317dfb5149439fc2ac7d3cf12cfa93ec9db4/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c295317dfb5149439fc2ac7d3cf12cfa93ec9db4/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c295317dfb5149439fc2ac7d3cf12cfa93ec9db4", "patch": "@@ -106,6 +106,18 @@ tree last_assemble_variable_decl;\n \n bool unlikely_section_label_printed = false;\n \n+/* The following global variable indicates the label name to be put at\n+   the start of the first cold section within each function, when\n+   partitioning basic blocks into hot and cold sections.  */\n+\n+char *unlikely_section_label = NULL;\n+ \n+/* The following global variable indicates the section name to be used\n+   for the current cold section, when partitioning hot and cold basic\n+   blocks into separate sections.  */\n+\n+char *unlikely_text_section_name = NULL;\n+\n /* RTX_UNCHANGING_P in a MEM can mean it is stored into, for initialization.\n    So giving constant the alias set for the type will allow such\n    initializations to appear to conflict with the load of the constant.  We\n@@ -206,7 +218,6 @@ text_section (void)\n     {\n       in_section = in_text;\n       fprintf (asm_out_file, \"%s\\n\", TEXT_SECTION_ASM_OP);\n-      ASM_OUTPUT_ALIGN (asm_out_file, 2);\n     }\n }\n \n@@ -229,13 +240,8 @@ unlikely_text_section (void)\n       \n       if (!unlikely_section_label_printed)\n \t{\n-\t  fprintf (asm_out_file, \"__%s_unlikely_section:\\n\", \n-\t\t   current_function_name ());\n+\t  ASM_OUTPUT_LABEL (asm_out_file, unlikely_section_label);\n \t  unlikely_section_label_printed = true;\n-\n-\t  /* Make sure that we have appropriate alignment for instructions\n-\t     in this section.  */\n-\t  assemble_align (FUNCTION_BOUNDARY);\n \t}\n     }\n }\n@@ -1094,7 +1100,16 @@ assemble_start_function (tree decl, const char *fnname)\n {\n   int align;\n \n+  if (unlikely_text_section_name)\n+    free (unlikely_text_section_name);\n+\n   unlikely_section_label_printed = false;\n+  unlikely_text_section_name = NULL;\n+  \n+  if (unlikely_section_label)\n+    free (unlikely_section_label);\n+  unlikely_section_label = xmalloc ((strlen (fnname) + 18) * sizeof (char));\n+  sprintf (unlikely_section_label, \"%s_unlikely_section\", fnname);\n \n   /* The following code does not need preprocessing in the assembler.  */\n \n@@ -1103,6 +1118,20 @@ assemble_start_function (tree decl, const char *fnname)\n   if (CONSTANT_POOL_BEFORE_FUNCTION)\n     output_constant_pool (fnname, decl);\n \n+  /* Make sure the cold text (code) section is properly aligned.  This\n+     is necessary here in the case where the function has both hot and\n+     cold sections, because we don't want to re-set the alignment when the\n+     section switch happens mid-function.  We don't need to set the hot\n+     section alignment here, because code further down in this function\n+     sets the alignment for whichever section comes first, and if there\n+     is a hot section it is guaranteed to be first.  */\n+\n+  if (flag_reorder_blocks_and_partition)\n+    {\n+      unlikely_text_section ();\n+      assemble_align (FUNCTION_BOUNDARY);\n+    }\n+\n   resolve_unique_section (decl, 0, flag_function_sections);\n   function_section (decl);\n \n@@ -1153,6 +1182,13 @@ assemble_start_function (tree decl, const char *fnname)\n   /* Standard thing is just output label for the function.  */\n   ASM_OUTPUT_LABEL (asm_out_file, fnname);\n #endif /* ASM_DECLARE_FUNCTION_NAME */\n+\n+  if (in_unlikely_text_section ()\n+      && !unlikely_section_label_printed)\n+    {\n+      ASM_OUTPUT_LABEL (asm_out_file, unlikely_section_label);\n+      unlikely_section_label_printed = true;\n+    }\n }\n \n /* Output assembler code associated with defining the size of the"}]}