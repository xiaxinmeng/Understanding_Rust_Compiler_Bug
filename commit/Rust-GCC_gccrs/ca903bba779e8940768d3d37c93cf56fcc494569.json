{"sha": "ca903bba779e8940768d3d37c93cf56fcc494569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E5MDNiYmE3NzllODk0MDc2OGQzZDM3YzkzY2Y1NmZjYzQ5NDU2OQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-17T15:43:18Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-17T15:43:18Z"}, "message": "lib1funcs.asm (init_trampoline): New entry point.\n\n\t* config/sh/lib1funcs.asm (init_trampoline): New entry point.\n\t* sh-protos.h (sh_initialize_trampoline): Declare.\n\t* sh.c (sh_initialize_trampoline): New function.\n\t* sh.h (TRAMPOLINE_SIZE): Only 24 for TARGET_SHMEDIA32.\n\t(TRAMPOLINE_ALIGNMENT): Need cache-line alignment for TARGET_SHMEDIA.\n\t(INITIALIZE_TRAMPOLINE): Call sh_initialize_trampoline.\n\t(TRAMPOLINE_ADJUST_ADDRESS): Not needed for SHcompact.\n\t* sh.md (initialize_trampoline, double_shori): New patterns.\n\t(initialize_trampoline_compact): Likewise.\n\t(shmedia32_initialize_trampoline_big): Remove.\n\t(shmedia32_initialize_trampoline_little): Likewise.\n\nFrom-SVN: r55529", "tree": {"sha": "8fef084fb4b9d7bc1118a7164c0110c39bea38a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fef084fb4b9d7bc1118a7164c0110c39bea38a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca903bba779e8940768d3d37c93cf56fcc494569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca903bba779e8940768d3d37c93cf56fcc494569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca903bba779e8940768d3d37c93cf56fcc494569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca903bba779e8940768d3d37c93cf56fcc494569/comments", "author": null, "committer": null, "parents": [{"sha": "0ac785173d96fc8d058ed817cf9286ddaf6d831a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac785173d96fc8d058ed817cf9286ddaf6d831a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ac785173d96fc8d058ed817cf9286ddaf6d831a"}], "stats": {"total": 365, "additions": 263, "deletions": 102}, "files": [{"sha": "4ec4c5bd5cf407b3cd9d6d7df3c54bd0c6d4c9eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca903bba779e8940768d3d37c93cf56fcc494569", "patch": "@@ -1,4 +1,16 @@\n-Wed Jul 17 14:04:10 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+Wed Jul 17 16:28:53 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* config/sh/lib1funcs.asm (init_trampoline): New entry point.\n+\t* sh-protos.h (sh_initialize_trampoline): Declare.\n+\t* sh.c (sh_initialize_trampoline): New function.\n+\t* sh.h (TRAMPOLINE_SIZE): Only 24 for TARGET_SHMEDIA32.\n+\t(TRAMPOLINE_ALIGNMENT): Need cache-line alignment for TARGET_SHMEDIA.\n+\t(INITIALIZE_TRAMPOLINE): Call sh_initialize_trampoline.\n+\t(TRAMPOLINE_ADJUST_ADDRESS): Not needed for SHcompact.\n+\t* sh.md (initialize_trampoline, double_shori): New patterns.\n+\t(initialize_trampoline_compact): Likewise.\n+\t(shmedia32_initialize_trampoline_big): Remove.\n+\t(shmedia32_initialize_trampoline_little): Likewise.\n \n \t* sh-protos.h (binary_float_operator): Remove declaration.\n \t(sh_expand_unop_v2sf, sh_expand_binop_v2sf): Declare."}, {"sha": "d7071b123214bd27367c99231509f0413acdf563", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=ca903bba779e8940768d3d37c93cf56fcc494569", "patch": "@@ -1821,6 +1821,22 @@ LOCAL(set_fpscr_L1):\n \t.mode\tSHmedia\n \t.section\t.text..SHmedia32,\"ax\"\n \t.align\t2\n+\t.global\tGLOBAL(init_trampoline)\n+GLOBAL(init_trampoline):\n+\tst.l\tr0,8,r2\n+#ifdef __LITTLE_ENDIAN__\n+\tmovi\t9,r20\n+\tshori\t0x402b,r20\n+\tshori\t0xd101,r20\n+\tshori\t0xd002,r20\n+#else\n+\tmovi\t0xffffffffffffd002,r20\n+\tshori\t0xd101,r20\n+\tshori\t0x402b,r20\n+\tshori\t9,r20\n+#endif\n+\tst.q\tr0,0,r20\n+\tst.l\tr0,12,r3\n \t.global\tGLOBAL(ic_invalidate)\n GLOBAL(ic_invalidate):\n \tocbwb\tr0,0"}, {"sha": "9adfb1e16e148811bb951b210080b71c1e9547b9", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=ca903bba779e8940768d3d37c93cf56fcc494569", "patch": "@@ -125,6 +125,7 @@ extern int fldi_ok PARAMS ((void));\n extern int sh_pr_n_sets PARAMS ((void));\n extern int sh_hard_regno_rename_ok PARAMS ((unsigned int, unsigned int));\n extern int sh_cfun_interrupt_handler_p (void);\n+extern void sh_initialize_trampoline (rtx, rtx, rtx);\n \n #ifdef HARD_CONST\n extern void fpscr_set_from_mem PARAMS ((int, HARD_REG_SET));"}, {"sha": "26026b4c93c94b534d33ad92af50b0ce0f84a70f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=ca903bba779e8940768d3d37c93cf56fcc494569", "patch": "@@ -7113,6 +7113,177 @@ sh_strip_name_encoding (str)\n   return str;\n }\n \n+\f\n+/* \n+   On the SH1..SH4, the trampoline looks like\n+   2 0002 D202     \t   \tmov.l\tl2,r2\n+   1 0000 D301     \t\tmov.l\tl1,r3\n+   3 0004 422B     \t\tjmp\t@r2\n+   4 0006 0009     \t\tnop\n+   5 0008 00000000 \tl1:  \t.long   area\n+   6 000c 00000000 \tl2:\t.long   function\n+\n+   SH5 (compact) uses r1 instead of r3 for the static chain.  */\n+\n+\n+/* Emit RTL insns to initialize the variable parts of a trampoline.\n+   FNADDR is an RTX for the address of the function's pure code.\n+   CXT is an RTX for the static chain value for the function.  */\n+\n+void\n+sh_initialize_trampoline (tramp, fnaddr, cxt)\n+     rtx tramp, fnaddr, cxt;\n+{\n+  if (TARGET_SHMEDIA64)\n+    {\n+      rtx tramp_templ;\n+      int fixed_len;\n+\n+      rtx movi1 = GEN_INT (0xcc000010);\n+      rtx shori1 = GEN_INT (0xc8000010);\n+      rtx src, dst;\n+\n+      /* The following trampoline works within a +- 128 KB range for cxt:\n+\t ptb/u cxt,tr1; movi fnaddr >> 48,r0; shori fnaddr >> 32,r0;\n+         shori fnaddr >> 16,r0; shori fnaddr,r0; ptabs/l r0,tr0\n+         gettr tr1,r1; blink tr0,r63  */\n+      /* Address rounding makes it hard to compute the exact bounds of the\n+\t offset for this trampoline, but we have a rather generous offset\n+\t range, so frame_offset should do fine as an upper bound.  */\n+      if (cxt == virtual_stack_vars_rtx && frame_offset < 0x20000)\n+\t{\n+\t  /* ??? could optimize this trampoline initialization\n+\t     by writing DImode words with two insns each.  */\n+\t  rtx mask = force_reg (DImode, GEN_INT (0x3fffc00));\n+\t  rtx insn = gen_rtx_MINUS (DImode, cxt, tramp);\n+\t  insn = gen_rtx_ASHIFT (DImode, insn, GEN_INT (10-2));\n+\t  insn = gen_rtx_AND (DImode, insn, mask);\n+\t  /* Or in ptb/u .,tr1 pattern */\n+\t  insn = gen_rtx_IOR (DImode, insn, gen_int_mode (0xec000010, SImode));\n+\t  insn = force_operand (insn, NULL_RTX);\n+\t  insn = gen_lowpart (SImode, insn);\n+\t  emit_move_insn (gen_rtx_MEM (SImode, tramp), insn);\n+\t  insn = gen_rtx_LSHIFTRT (DImode, fnaddr, GEN_INT (38));\n+\t  insn = gen_rtx_AND (DImode, insn, mask);\n+\t  insn = force_operand (gen_rtx_IOR (DImode, movi1, insn), NULL_RTX);\n+\t  insn = gen_lowpart (SImode, insn);\n+\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 4)), insn);\n+\t  insn = gen_rtx_LSHIFTRT (DImode, fnaddr, GEN_INT (22));\n+\t  insn = gen_rtx_AND (DImode, insn, mask);\n+\t  insn = force_operand (gen_rtx_IOR (DImode, shori1, insn), NULL_RTX);\n+\t  insn = gen_lowpart (SImode, insn);\n+\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 8)), insn);\n+\t  insn = gen_rtx_LSHIFTRT (DImode, fnaddr, GEN_INT (6));\n+\t  insn = gen_rtx_AND (DImode, insn, mask);\n+\t  insn = force_operand (gen_rtx_IOR (DImode, shori1, insn), NULL_RTX);\n+\t  insn = gen_lowpart (SImode, insn);\n+\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 12)),\n+\t\t\t  insn);\n+\t  insn = gen_rtx_ASHIFT (DImode, fnaddr, GEN_INT (10));\n+\t  insn = gen_rtx_AND (DImode, insn, mask);\n+\t  insn = force_operand (gen_rtx_IOR (DImode, shori1, insn), NULL_RTX);\n+\t  insn = gen_lowpart (SImode, insn);\n+\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 16)),\n+\t\t\t  insn);\n+\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 20)),\n+\t\t\t  GEN_INT (0x6bf10600));\n+\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 24)),\n+\t\t\t  GEN_INT (0x4415fc10));\n+\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 28)),\n+\t\t\t  GEN_INT (0x4401fff0));\n+\t  emit_insn (gen_ic_invalidate_line (tramp));\n+\t  return;\n+\t}\n+      tramp_templ = gen_rtx_SYMBOL_REF (Pmode,\"__GCC_nested_trampoline\");\n+      fixed_len = TRAMPOLINE_SIZE - 2 * GET_MODE_SIZE (Pmode);\n+\n+      tramp_templ = gen_datalabel_ref (tramp_templ);\n+      dst = gen_rtx_MEM (BLKmode, tramp);\n+      src = gen_rtx_MEM (BLKmode, tramp_templ);\n+      set_mem_align (dst, 256);\n+      set_mem_align (src, 64);\n+      emit_block_move (dst, src, GEN_INT (fixed_len));\n+\n+      emit_move_insn (gen_rtx_MEM (Pmode, plus_constant (tramp,\tfixed_len)),\n+\t\t      fnaddr);\n+      emit_move_insn (gen_rtx_MEM (Pmode,\n+\t\t\t\t   plus_constant (tramp,\n+\t\t\t\t\t\t  fixed_len\n+\t\t\t\t\t\t  + GET_MODE_SIZE (Pmode))), \n+\t\t      cxt);\n+      emit_insn (gen_ic_invalidate_line (tramp));\n+      return;\n+    }\n+  else if (TARGET_SHMEDIA)\n+    {\n+      /* movi fnaddr >> 16,r1; shori fnaddr,r1; ptabs/l r1,tr0\n+         movi cxt >> 16,r1; shori cxt,r1; blink tr0,r63  */\n+      rtx quad0 = gen_reg_rtx (DImode), cxtload = gen_reg_rtx (DImode);\n+      rtx quad1 = gen_reg_rtx (DImode), quad2 = gen_reg_rtx (DImode);\n+      /* movi 0,r1: 0xcc000010 shori 0,r1: c8000010  concatenated,\n+\t rotated 10 right, and higer 16 bit of every 32 selected.  */\n+      rtx movishori\n+\t= force_reg (V2HImode, (simplify_gen_subreg\n+\t\t\t\t(V2HImode, GEN_INT (0x4330432), SImode, 0)));\n+      rtx ptabs = force_reg (DImode, GEN_INT (0x6bf10600));\n+      rtx blink = force_reg (DImode, GEN_INT (0x4401fff0));\n+\n+      tramp = force_reg (Pmode, tramp);\n+      fnaddr = force_reg (SImode, fnaddr);\n+      cxt = force_reg (SImode, cxt);\n+      emit_insn (gen_mshflo_w_x (gen_rtx_SUBREG (V4HImode, quad0, 0),\n+\t\t\t\t gen_rtx_SUBREG (V2HImode, fnaddr, 0),\n+\t\t\t\t movishori));\n+      emit_insn (gen_rotldi3_mextr (quad0, quad0,\n+\t\t\t\t    GEN_INT (TARGET_LITTLE_ENDIAN ? 24 : 56)));\n+      emit_insn (gen_ashldi3_media (quad0, quad0, GEN_INT (2)));\n+      emit_move_insn (gen_rtx_MEM (DImode, tramp), quad0);\n+      emit_insn (gen_mshflo_w_x (gen_rtx_SUBREG (V4HImode, cxtload, 0),\n+\t\t\t\t gen_rtx_SUBREG (V2HImode, cxt, 0),\n+\t\t\t\t movishori));\n+      emit_insn (gen_rotldi3_mextr (cxtload, cxtload,\n+\t\t\t\t    GEN_INT (TARGET_LITTLE_ENDIAN ? 24 : 56)));\n+      emit_insn (gen_ashldi3_media (cxtload, cxtload, GEN_INT (2)));\n+      if (TARGET_LITTLE_ENDIAN)\n+\t{\n+\t  emit_insn (gen_mshflo_l_di (quad1, ptabs, cxtload));\n+\t  emit_insn (gen_mextr4 (quad2, cxtload, blink));\n+\t}\n+      else\n+\t{\n+\t  emit_insn (gen_mextr4 (quad1, cxtload, ptabs));\n+\t  emit_insn (gen_mshflo_l_di (quad2, blink, cxtload));\n+\t}\n+      emit_move_insn (gen_rtx_MEM (DImode, plus_constant (tramp, 8)), quad1);\n+      emit_move_insn (gen_rtx_MEM (DImode, plus_constant (tramp, 16)), quad2);\n+      emit_insn (gen_ic_invalidate_line (tramp));\n+      return;\n+    }\n+  else if (TARGET_SHCOMPACT)\n+    {\n+      emit_insn (gen_initialize_trampoline (tramp, cxt, fnaddr));\n+      return;\n+    }\n+  emit_move_insn (gen_rtx_MEM (SImode, tramp),\n+\t\t  gen_int_mode (TARGET_LITTLE_ENDIAN ? 0xd301d202 : 0xd202d301,\n+\t\t\t\tSImode));\n+  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 4)),\n+\t\t  gen_int_mode (TARGET_LITTLE_ENDIAN ? 0x0009422b : 0x422b0009,\n+\t\t\t\tSImode));\n+  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 8)),\n+\t\t  cxt);\n+  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 12)),\n+\t\t  fnaddr);\n+  if (TARGET_HARVARD)\n+    {\n+      if (TARGET_USERMODE)\n+\temit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__ic_invalidate\"),\n+\t\t\t   0, VOIDmode, 1, tramp, SImode);\n+      else\n+\temit_insn (gen_ic_invalidate_line (tramp));\n+    }\n+}\n+\n \f\n /* Machine specific built-in functions.  */\n "}, {"sha": "b8ab2cace6243b65e68cc5a54df2b245b3e3edcf", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 6, "deletions": 45, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=ca903bba779e8940768d3d37c93cf56fcc494569", "patch": "@@ -2082,64 +2082,25 @@ while (0)\n    6 000c 00000000 \tl2:\t.long   function  */\n \n /* Length in units of the trampoline for entering a nested function.  */\n-#define TRAMPOLINE_SIZE  (TARGET_SHMEDIA64 ? 40 : TARGET_SH5 ? 32 : 16)\n+#define TRAMPOLINE_SIZE  (TARGET_SHMEDIA64 ? 40 : TARGET_SH5 ? 24 : 16)\n \n /* Alignment required for a trampoline in bits .  */\n #define TRAMPOLINE_ALIGNMENT \\\n-  ((CACHE_LOG < 3 || (TARGET_SMALLCODE && ! TARGET_HARVARD)) ? 32 : 64)\n+  ((CACHE_LOG < 3 || (TARGET_SMALLCODE && ! TARGET_HARVARD)) ? 32 \\\n+   : TARGET_SHMEDIA ? 256 : 64)\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  */\n \n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) do\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_SH5)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      rtx tramp_templ = gen_rtx_SYMBOL_REF (Pmode,\t\t\t\\\n-\t\t\t\t\t    \"__GCC_nested_trampoline\");\t\\\n-      int fixed_len = TRAMPOLINE_SIZE - 2 * GET_MODE_SIZE (Pmode);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      tramp_templ = gen_datalabel_ref (tramp_templ);\t\t\t\\\n-      emit_block_move (gen_rtx_MEM (BLKmode, (TRAMP)),\t\t\t\\\n-\t\t       gen_rtx_MEM (BLKmode, tramp_templ),\t\t\\\n-\t\t       GEN_INT (fixed_len));\t\t\t\t\\\n-      emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP),\t\\\n-\t\t\t\t\t\t\t fixed_len)),\t\\\n-\t\t      (FNADDR));\t\t\t\t\t\\\n-      emit_move_insn (gen_rtx_MEM (Pmode,\t\t\t\t\\\n-\t\t\t\t   plus_constant ((TRAMP),\t\t\\\n-\t\t\t\t\t\t  fixed_len\t\t\\\n-\t\t\t\t\t\t  + GET_MODE_SIZE (Pmode))), \\\n-\t\t      (CXT));\t\t\t\t\t\t\\\n-      emit_insn (gen_ic_invalidate_line (TRAMP));\t\t\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, (TRAMP)),\t\t\t\\\n-                  GEN_INT (trunc_int_for_mode                  \t\t\\\n-                         (TARGET_LITTLE_ENDIAN ? 0xd301d202 : 0xd202d301,\\\n-                          SImode))); \\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant ((TRAMP), 4)),\t\\\n-\t\t  GEN_INT (TARGET_LITTLE_ENDIAN ? 0x0009422b : 0x422b0009));\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant ((TRAMP), 8)),\t\\\n-\t\t  (CXT));\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant ((TRAMP), 12)),\t\\\n-\t\t  (FNADDR));\t\t\t\t\t\t\\\n-  if (TARGET_HARVARD)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TARGET_USERMODE)\t\t\t\t\t\t\\\n-\temit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__ic_invalidate\"),\\\n-\t\t\t   0, VOIDmode, 1, (TRAMP), SImode);\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\temit_insn (gen_ic_invalidate_line (TRAMP));\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n+#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n+  sh_initialize_trampoline ((TRAMP), (FNADDR), (CXT))\n \n /* On SH5, trampolines are SHmedia code, so add 1 to the address.  */\n \n #define TRAMPOLINE_ADJUST_ADDRESS(TRAMP) do\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_SH5)\t\t\t\t\t\t\t\\\n+  if (TARGET_SHMEDIA)\t\t\t\t\t\t\t\\\n     (TRAMP) = expand_simple_binop (Pmode, PLUS, (TRAMP), GEN_INT (1),\t\\\n \t\t\t\t   gen_reg_rtx (Pmode), 0,\t\t\\\n \t\t\t\t   OPTAB_LIB_WIDEN);\t\t\t\\"}, {"sha": "821562536e8d0aea4c0d5f74a3e5ce4b455442ec", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca903bba779e8940768d3d37c93cf56fcc494569/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=ca903bba779e8940768d3d37c93cf56fcc494569", "patch": "@@ -3667,6 +3667,8 @@\n   [(set_attr \"length\" \"8\")\n    (set_attr \"insn_class\" \"cwb\")])\n \n+;; ??? could make arg 0 an offsettable memory operand to allow to save\n+;; an add in the code that calculates the address.\n (define_insn \"ic_invalidate_line_media\"\n   [(unspec_volatile [(match_operand 0 \"register_operand\" \"r\")]\n \t\t    UNSPEC_ICACHE)]\n@@ -3685,6 +3687,37 @@\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n+(define_expand \"initialize_trampoline\"\n+  [(match_operand:SI 0 \"\" \"\")\n+   (match_operand:SI 1 \"\" \"\")\n+   (match_operand:SI 2 \"\" \"\")]\n+  \"TARGET_SHCOMPACT\"\n+  \"\n+{\n+  rtx sfun, tramp;\n+\n+  sfun = force_reg (Pmode, gen_rtx_SYMBOL_REF (Pmode, \\\"__init_trampoline\\\"));\n+  tramp = gen_rtx_REG (SImode, R0_REG);\n+  emit_move_insn (tramp, operands[0]);\n+  emit_move_insn (gen_rtx_REG (SImode, R2_REG), operands[1]);\n+  emit_move_insn (gen_rtx_REG (SImode, R3_REG), operands[2]);\n+\n+  emit_insn (gen_initialize_trampoline_compact (tramp, sfun));\n+  DONE;\n+}\")\n+\n+(define_insn \"initialize_trampoline_compact\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"z\")\n+\t\t     (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (reg:SI R2_REG) (reg:SI R3_REG)]\n+\t\t    UNSPEC_INIT_TRAMP)\n+\n+   (clobber (reg:SI PR_REG))]\n+  \"TARGET_SHCOMPACT\"\n+  \"jsr @%1%#\"\n+  [(set_attr \"type\" \"sfunc\")\n+   (set_attr \"needs_delay_slot\" \"yes\")])\n+\n (define_insn \"movqi_i\"\n   [(set (match_operand:QI 0 \"general_movdst_operand\" \"=r,r,m,r,r,l\")\n \t(match_operand:QI 1 \"general_movsrc_operand\"  \"ri,m,r,t,l,r\"))]\n@@ -7198,62 +7231,6 @@\n   \"jsr @r0%#\"\n   [(set_attr \"needs_delay_slot\" \"yes\")])\n \n-;; ??? could make arg 0 an offsettable memory operand - and do likewise\n-;; for cache invalidation - to allow to save an add in the code that\n-;; calculates the address.\n-(define_insn \"shmedia32_initialize_trampoline_big\"\n-  [(set (mem:BLK (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n-\t(unspec [(match_operand:SI 1 \"arith_reg_operand\" \"r\")\n-\t\t (match_operand:SI 2 \"arith_reg_operand\" \"r\")]\n-\t UNSPEC_INIT_TRAMP))\n-   (clobber (match_scratch:SI 3 \"=&r\"))\n-   (clobber (match_scratch:SI 4 \"=&r\"))]\n-  \"TARGET_SHMEDIA32 && ! TARGET_LITTLE_ENDIAN\"\n-  \"movi 0x433,%3\n-   shori 0x432,%3\n-   mshflo.w %1,%3,%4\n-   mextr7 %4,%4,%4\n-   shlli %4,2,%4\n-   st.q %0,0,%4\n-   mshflo.w %2,%3,%4\n-   shlli %4,10,%4\n-   addi %4,0x10,%4\n-   movi 0x6bf1,%3\n-   shori 0x0600,%3\n-   mextr4 %4,%3,%3\n-   st.q %0,8,%3\n-   shori 0x4401,%4\n-   shori 0xfff0,%4\n-   st.q %0,16,%4\"\n-  [(set_attr \"length\" \"64\")])\n-\n-(define_insn \"shmedia32_initialize_trampoline_little\"\n-  [(set (mem:BLK (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n-\t(unspec [(match_operand:SI 1 \"arith_reg_operand\" \"r\")\n-\t\t (match_operand:SI 2 \"arith_reg_operand\" \"r\")]\n-\t UNSPEC_INIT_TRAMP))\n-   (clobber (match_scratch:SI 3 \"=&r\"))\n-   (clobber (match_scratch:SI 4 \"=&r\"))]\n-  \"TARGET_SHMEDIA32 && TARGET_LITTLE_ENDIAN\"\n-  \"movi 0x433,%3\n-   shori 0x432,%3\n-   mshflo.w %1,%3,%4\n-   mextr3 %4,%4,%4\n-   shlli %4,2,%4\n-   st.q %0,0,%4\n-   mshflo.w %2,%3,%4\n-   shlli %4,10,%4\n-   addi %4,0x10,%4\n-   movi 0x6bf1,%3\n-   shori 0x0600,%3\n-   shori 0x4401,%3\n-   shori 0xfff0,%3\n-   st.l %0,16,%r4\n-   st.l %0,20,%r3\n-   mshfhi.l %3,%4,%4\n-   st.q %0,8,%4\"\n-  [(set_attr \"length\" \"68\")])\n-\n (define_expand \"prologue\"\n   [(const_int 0)]\n   \"\"\n@@ -10263,6 +10240,29 @@\n   \"mshflo.l\t%N2, %N1, %0\"\n   [(set_attr \"type\" \"arith_media\")])\n \n+;; Combiner pattern for trampoline initialization.\n+(define_insn_and_split \"*double_shori\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+\t(ior:DI (ashift:DI (match_operand:DI 1 \"arith_reg_operand\" \"0\")\n+                           (const_int 32))\n+\t\t(match_operand:DI 2 \"const_int_operand\" \"n\")))]\n+  \"TARGET_SHMEDIA\n+   && INTVAL (operands[2]) == trunc_int_for_mode (INTVAL (operands[2]), SImode)\"\n+  \"#\"\n+  \"rtx_equal_p (operands[0], operands[1])\"\n+  [(const_int 0)]\n+  \"\n+{\n+  HOST_WIDE_INT v = INTVAL (operands[2]);\n+\n+  emit_insn (gen_shori_media (operands[0], operands[0],\n+\t     gen_int_mode (INTVAL (operands[2]) >> 16, HImode)));\n+  emit_insn (gen_shori_media (operands[0], operands[0],\n+\t\t\t      gen_int_mode (v, HImode)));\n+  DONE;\n+}\")\n+\n+\n (define_insn \"*mshflo_l_di_x\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n \t(ior:DI (zero_extend:DI (match_operand:SI 1 \"extend_reg_or_0_operand\""}]}