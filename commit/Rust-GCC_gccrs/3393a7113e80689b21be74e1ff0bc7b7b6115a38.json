{"sha": "3393a7113e80689b21be74e1ff0bc7b7b6115a38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM5M2E3MTEzZTgwNjg5YjIxYmU3NGUxZmYwYmM3YjdiNjExNWEzOA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2012-07-31T12:25:04Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2012-07-31T12:25:04Z"}, "message": "re PR tree-optimization/53773 (Vectorizer generates non-canonical multiplies)\n\ngcc:\n\n2012-07-31  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\tPR tree-optimization/53773\n\t* tree-vectorizer.h (struct _loop_vec_info): Add operands_swapped.\n\t(LOOP_VINFO_OPERANDS_SWAPPED): New macro.\n\t* tree-vect-loop.c (new_loop_vec_info): Initialize\n\tLOOP_VINFO_OPERANDS_SWAPPED field.\n\t(destroy_loop_vec_info): Restore canonical form.\n\t(vect_is_slp_reduction): Set LOOP_VINFO_OPERANDS_SWAPPED field.\n\t(vect_is_simple_reduction_1): Likewise.\n\ngcc/testsuite:\n\n2012-07-31  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\tPR tree-optimization/53773\n\t* testsuite/gcc.dg/vect/pr53773.c: New test.\n\nFrom-SVN: r190007", "tree": {"sha": "b5228437c04a0ba87c454b39c628730188352ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5228437c04a0ba87c454b39c628730188352ba0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3393a7113e80689b21be74e1ff0bc7b7b6115a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3393a7113e80689b21be74e1ff0bc7b7b6115a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3393a7113e80689b21be74e1ff0bc7b7b6115a38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3393a7113e80689b21be74e1ff0bc7b7b6115a38/comments", "author": null, "committer": null, "parents": [{"sha": "8c503f0dd33d2521a1a64f5687f2033569a46c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c503f0dd33d2521a1a64f5687f2033569a46c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c503f0dd33d2521a1a64f5687f2033569a46c43"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "0e1a0c57d9f7fda492f1a8132831140fc202831b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3393a7113e80689b21be74e1ff0bc7b7b6115a38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3393a7113e80689b21be74e1ff0bc7b7b6115a38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3393a7113e80689b21be74e1ff0bc7b7b6115a38", "patch": "@@ -1,3 +1,14 @@\n+2012-07-31  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR tree-optimization/53773\n+\t* tree-vectorizer.h (struct _loop_vec_info): Add operands_swapped.\n+\t(LOOP_VINFO_OPERANDS_SWAPPED): New macro.\n+\t* tree-vect-loop.c (new_loop_vec_info): Initialize\n+\tLOOP_VINFO_OPERANDS_SWAPPED field.\n+\t(destroy_loop_vec_info): Restore canonical form.\n+\t(vect_is_slp_reduction): Set LOOP_VINFO_OPERANDS_SWAPPED field.\n+\t(vect_is_simple_reduction_1): Likewise.\n+\n 2012-07-31  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* sched-vis.c (dump_insn_slim): Print print_rtx_head at the"}, {"sha": "c82f1524e179eeb7eb600134b0fc967041f4f554", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3393a7113e80689b21be74e1ff0bc7b7b6115a38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3393a7113e80689b21be74e1ff0bc7b7b6115a38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3393a7113e80689b21be74e1ff0bc7b7b6115a38", "patch": "@@ -1,3 +1,8 @@\n+2012-07-31  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR tree-optimization/53773\n+\t* testsuite/gcc.dg/vect/pr53773.c: New test.\n+\n 2012-07-31  Nick Clifton  <nickc@redhat.com>\n \n \t* gcc.dg/stack-usage-1.c (SIZE): Define for FRV."}, {"sha": "4fde3cbf658bb45e877fbceb1c219e913325181b", "filename": "gcc/testsuite/gcc.dg/vect/pr53773.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3393a7113e80689b21be74e1ff0bc7b7b6115a38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53773.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3393a7113e80689b21be74e1ff0bc7b7b6115a38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53773.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53773.c?ref=3393a7113e80689b21be74e1ff0bc7b7b6115a38", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+int\n+foo (int integral, int decimal, int power_ten)\n+{\n+  while (power_ten > 0)\n+    {\n+      integral *= 10;\n+      decimal *= 10;\n+      power_ten--;\n+    }\n+\n+  return integral+decimal;\n+}\n+\n+/* Two occurrences in annotations, two in code.  */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 10\" 4 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "cdd3def29748559fcd125b25cc8c63c7c977bca7", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3393a7113e80689b21be74e1ff0bc7b7b6115a38/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3393a7113e80689b21be74e1ff0bc7b7b6115a38/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=3393a7113e80689b21be74e1ff0bc7b7b6115a38", "patch": "@@ -853,6 +853,7 @@ new_loop_vec_info (struct loop *loop)\n   LOOP_VINFO_PEELING_HTAB (res) = NULL;\n   LOOP_VINFO_TARGET_COST_DATA (res) = init_cost (loop);\n   LOOP_VINFO_PEELING_FOR_GAPS (res) = false;\n+  LOOP_VINFO_OPERANDS_SWAPPED (res) = false;\n \n   return res;\n }\n@@ -873,6 +874,7 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo, bool clean_stmts)\n   int j;\n   VEC (slp_instance, heap) *slp_instances;\n   slp_instance instance;\n+  bool swapped;\n \n   if (!loop_vinfo)\n     return;\n@@ -881,6 +883,7 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo, bool clean_stmts)\n \n   bbs = LOOP_VINFO_BBS (loop_vinfo);\n   nbbs = loop->num_nodes;\n+  swapped = LOOP_VINFO_OPERANDS_SWAPPED (loop_vinfo);\n \n   if (!clean_stmts)\n     {\n@@ -905,6 +908,22 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo, bool clean_stmts)\n       for (si = gsi_start_bb (bb); !gsi_end_p (si); )\n         {\n           gimple stmt = gsi_stmt (si);\n+\n+\t  /* We may have broken canonical form by moving a constant\n+\t     into RHS1 of a commutative op.  Fix such occurrences.  */\n+\t  if (swapped && is_gimple_assign (stmt))\n+\t    {\n+\t      enum tree_code code = gimple_assign_rhs_code (stmt);\n+\n+\t      if ((code == PLUS_EXPR\n+\t\t   || code == POINTER_PLUS_EXPR\n+\t\t   || code == MULT_EXPR)\n+\t\t  && CONSTANT_CLASS_P (gimple_assign_rhs1 (stmt)))\n+\t\tswap_tree_operands (stmt,\n+\t\t\t\t    gimple_assign_rhs1_ptr (stmt),\n+\t\t\t\t    gimple_assign_rhs2_ptr (stmt));\n+\t    }\n+\n \t  /* Free stmt_vec_info.  */\n \t  free_stmt_vec_info (stmt);\n           gsi_next (&si);\n@@ -1920,6 +1939,9 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n \t \t\t          gimple_assign_rhs1_ptr (next_stmt),\n                                   gimple_assign_rhs2_ptr (next_stmt));\n \t      update_stmt (next_stmt);\n+\n+\t      if (CONSTANT_CLASS_P (gimple_assign_rhs1 (next_stmt)))\n+\t\tLOOP_VINFO_OPERANDS_SWAPPED (loop_info) = true;\n \t    }\n \t  else\n \t    return false;\n@@ -2324,6 +2346,9 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n \n           swap_tree_operands (def_stmt, gimple_assign_rhs1_ptr (def_stmt),\n  \t\t\t      gimple_assign_rhs2_ptr (def_stmt));\n+\n+\t  if (CONSTANT_CLASS_P (gimple_assign_rhs1 (def_stmt)))\n+\t    LOOP_VINFO_OPERANDS_SWAPPED (loop_info) = true;\n         }\n       else\n         {"}, {"sha": "76418386e1a70808d53e00d065486b44c67dca05", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3393a7113e80689b21be74e1ff0bc7b7b6115a38/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3393a7113e80689b21be74e1ff0bc7b7b6115a38/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=3393a7113e80689b21be74e1ff0bc7b7b6115a38", "patch": "@@ -296,6 +296,12 @@ typedef struct _loop_vec_info {\n      this.  */\n   bool peeling_for_gaps;\n \n+  /* Reductions are canonicalized so that the last operand is the reduction\n+     operand.  If this places a constant into RHS1, this decanonicalizes\n+     GIMPLE for other phases, so we must track when this has occurred and\n+     fix it up.  */\n+  bool operands_swapped;\n+\n } *loop_vec_info;\n \n /* Access Functions.  */\n@@ -326,6 +332,7 @@ typedef struct _loop_vec_info {\n #define LOOP_VINFO_PEELING_HTAB(L)         (L)->peeling_htab\n #define LOOP_VINFO_TARGET_COST_DATA(L)     (L)->target_cost_data\n #define LOOP_VINFO_PEELING_FOR_GAPS(L)     (L)->peeling_for_gaps\n+#define LOOP_VINFO_OPERANDS_SWAPPED(L)     (L)->operands_swapped\n \n #define LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT(L) \\\n VEC_length (gimple, (L)->may_misalign_stmts) > 0"}]}