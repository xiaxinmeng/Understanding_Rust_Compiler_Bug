{"sha": "0356699b567f9e97ddb50e55ea623676af9a44d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM1NjY5OWI1NjdmOWU5N2RkYjUwZTU1ZWE2MjM2NzZhZjlhNDRkNA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-11-15T14:03:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T14:03:33Z"}, "message": "sem_eval.adb: Implement d.f flag\n\n2005-11-14  Robert Dewar  <dewar@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_eval.adb: Implement d.f flag\n\t(Subtype_Statically_Match): A generic actual type has unknown\n\tdiscriminants when the corresponding actual has a similar partial view.\n\tIf the routine is called to validate the signature of an inherited\n\toperation in a child instance, the generic actual matches the full view,\n\nFrom-SVN: r107004", "tree": {"sha": "79ffb41352e27bf432af102b49193e2222f5ae6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ffb41352e27bf432af102b49193e2222f5ae6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0356699b567f9e97ddb50e55ea623676af9a44d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0356699b567f9e97ddb50e55ea623676af9a44d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0356699b567f9e97ddb50e55ea623676af9a44d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0356699b567f9e97ddb50e55ea623676af9a44d4/comments", "author": null, "committer": null, "parents": [{"sha": "d4810530b804ead50e2f99757405141278667d3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4810530b804ead50e2f99757405141278667d3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4810530b804ead50e2f99757405141278667d3b"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "d99e042dd5cfed8b946444e222e28e22bb6d92f5", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0356699b567f9e97ddb50e55ea623676af9a44d4/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0356699b567f9e97ddb50e55ea623676af9a44d4/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=0356699b567f9e97ddb50e55ea623676af9a44d4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,6 +32,7 @@ with Elists;   use Elists;\n with Errout;   use Errout;\n with Eval_Fat; use Eval_Fat;\n with Exp_Util; use Exp_Util;\n+with Lib;      use Lib;\n with Nmake;    use Nmake;\n with Nlists;   use Nlists;\n with Opt;      use Opt;\n@@ -4004,11 +4005,21 @@ package body Sem_Eval is\n          return True;\n \n       --  A definite type does not match an indefinite or classwide type\n+      --  However, a generic type with unknown discriminants may be\n+      --  instantiated with a type with no discriminants, and conformance\n+      --  checking on an inherited operation may compare the actual with\n+      --  the subtype that renames it in the instance.\n \n       elsif\n          Has_Unknown_Discriminants (T1) /= Has_Unknown_Discriminants (T2)\n       then\n-         return False;\n+         if Is_Generic_Actual_Type (T1)\n+           and then Etype (T1) = T2\n+         then\n+            return True;\n+         else\n+            return False;\n+         end if;\n \n       --  Array type\n \n@@ -4083,13 +4094,17 @@ package body Sem_Eval is\n    is\n    begin\n       Stat := False;\n+      Fold := False;\n+\n+      if Debug_Flag_Dot_F and then In_Extended_Main_Source_Unit (N) then\n+         return;\n+      end if;\n \n       --  If operand is Any_Type, just propagate to result and do not\n       --  try to fold, this prevents cascaded errors.\n \n       if Etype (Op1) = Any_Type then\n          Set_Etype (N, Any_Type);\n-         Fold := False;\n          return;\n \n       --  If operand raises constraint error, then replace node N with the\n@@ -4099,7 +4114,6 @@ package body Sem_Eval is\n \n       elsif Raises_Constraint_Error (Op1) then\n          Rewrite_In_Raise_CE (N, Op1);\n-         Fold := False;\n          return;\n \n       --  If the operand is not static, then the result is not static, and\n@@ -4118,7 +4132,6 @@ package body Sem_Eval is\n         and then Is_Generic_Type (Etype (Op1))\n       then\n          Check_Non_Static_Context (Op1);\n-         Fold := False;\n          return;\n \n       --  Here we have the case of an operand whose type is OK, which is\n@@ -4145,13 +4158,17 @@ package body Sem_Eval is\n \n    begin\n       Stat := False;\n+      Fold := False;\n+\n+      if Debug_Flag_Dot_F and then In_Extended_Main_Source_Unit (N) then\n+         return;\n+      end if;\n \n       --  If either operand is Any_Type, just propagate to result and\n       --  do not try to fold, this prevents cascaded errors.\n \n       if Etype (Op1) = Any_Type or else Etype (Op2) = Any_Type then\n          Set_Etype (N, Any_Type);\n-         Fold := False;\n          return;\n \n       --  If left operand raises constraint error, then replace node N with\n@@ -4166,7 +4183,6 @@ package body Sem_Eval is\n \n          Rewrite_In_Raise_CE (N, Op1);\n          Set_Is_Static_Expression (N, Rstat);\n-         Fold := False;\n          return;\n \n       --  Similar processing for the case of the right operand. Note that\n@@ -4180,7 +4196,6 @@ package body Sem_Eval is\n \n          Rewrite_In_Raise_CE (N, Op2);\n          Set_Is_Static_Expression (N, Rstat);\n-         Fold := False;\n          return;\n \n       --  Exclude expressions of a generic modular type, as above\n@@ -4189,7 +4204,6 @@ package body Sem_Eval is\n         and then Is_Generic_Type (Etype (Op1))\n       then\n          Check_Non_Static_Context (Op1);\n-         Fold := False;\n          return;\n \n       --  If result is not static, then check non-static contexts on operands"}]}