{"sha": "5a24482e72fb06ef2e93050cdb056002f99bb226", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyNDQ4MmU3MmZiMDZlZjJlOTMwNTBjZGIwNTYwMDJmOTliYjIyNg==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2005-03-14T14:51:25Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2005-03-14T14:51:25Z"}, "message": "re PR c++/4403 (incorrect class becomes a friend in template)\n\n\tPR c++/4403\n\tPR c++/9783, DR433\n\t* name-lookup.c (pushtag): Skip template parameter scope when\n\tscope is ts_global.  Don't push tag into template parameter\n\tscope.\n\t* pt.c (instantiate_class_template): Reorder friend class\n\ttemplate substitution to handle non-dependent friend class\n\tthat hasn't been previously declared.\n\n\t* g++.dg/template/friend34.C: New test.\n\t* g++.dg/template/friend35.C: Likewise.\n\t* g++.old-deja/g++.pt/inherit2.C: Remove XFAIL's.\n\nFrom-SVN: r96432", "tree": {"sha": "ebe96dca1d08f5e123696a21d05cb1a03baaae0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebe96dca1d08f5e123696a21d05cb1a03baaae0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a24482e72fb06ef2e93050cdb056002f99bb226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a24482e72fb06ef2e93050cdb056002f99bb226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a24482e72fb06ef2e93050cdb056002f99bb226", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a24482e72fb06ef2e93050cdb056002f99bb226/comments", "author": null, "committer": null, "parents": [{"sha": "184107932d56261a7786e3086212cfa32db6acd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184107932d56261a7786e3086212cfa32db6acd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/184107932d56261a7786e3086212cfa32db6acd0"}], "stats": {"total": 136, "additions": 116, "deletions": 20}, "files": [{"sha": "0ac2a84379ca7f1adbc6dfb64b8f351dcb8c562a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a24482e72fb06ef2e93050cdb056002f99bb226", "patch": "@@ -1,3 +1,14 @@\n+2005-03-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/4403\n+\tPR c++/9783, DR433\n+\t* name-lookup.c (pushtag): Skip template parameter scope when\n+\tscope is ts_global.  Don't push tag into template parameter\n+\tscope.\n+\t* pt.c (instantiate_class_template): Reorder friend class\n+\ttemplate substitution to handle non-dependent friend class\n+\tthat hasn't been previously declared.\n+\n 2005-03-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tFriend class name lookup 5/n"}, {"sha": "fda7d345b1f80bef050fadbefeb059d99ddb0620", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=5a24482e72fb06ef2e93050cdb056002f99bb226", "patch": "@@ -4571,10 +4571,19 @@ maybe_process_template_type_declaration (tree type, int is_friend,\n   return decl;\n }\n \n-/* Push a tag name NAME for struct/class/union/enum type TYPE.\n-   Normally put it into the inner-most non-sk_cleanup scope,\n-   but if GLOBALIZE is true, put it in the inner-most non-class scope.\n-   The latter is needed for implicit declarations.\n+/* Push a tag name NAME for struct/class/union/enum type TYPE.  In case\n+   that the NAME is a class template, the tag is processed but not pushed.\n+\n+   The pushed scope depend on the SCOPE parameter:\n+   - When SCOPE is TS_CURRENT, put it into the inner-most non-sk_cleanup\n+     scope.\n+   - When SCOPE is TS_GLOBAL, put it in the inner-most non-class and\n+     non-template-parameter scope.  This case is needed for forward\n+     declarations.\n+   - When SCOPE is TS_WITHIN_ENCLOSING_NON_CLASS, this is similar to\n+     TS_GLOBAL case except that names within template-parameter scopes\n+     are not pushed at all.\n+\n    Returns TYPE upon success and ERROR_MARK_NODE otherwise.  */\n \n tree\n@@ -4590,10 +4599,9 @@ pushtag (tree name, tree type, tag_scope scope)\n \t /* Neither are the scopes used to hold template parameters\n \t    for an explicit specialization.  For an ordinary template\n \t    declaration, these scopes are not scopes from the point of\n-\t    view of the language -- but we need a place to stash\n-\t    things that will go in the containing namespace when the\n-\t    template is instantiated.  */\n-\t || (b->kind == sk_template_parms && b->explicit_spec_p)\n+\t    view of the language.  */\n+\t || (b->kind == sk_template_parms\n+\t     && (b->explicit_spec_p || scope == ts_global))\n \t || (b->kind == sk_class\n \t     && (scope != ts_current\n \t\t /* We may be defining a new type in the initializer\n@@ -4666,7 +4674,7 @@ pushtag (tree name, tree type, tag_scope scope)\n \t      else\n \t\tpushdecl_class_level (d);\n \t    }\n-\t  else\n+\t  else if (b->kind != sk_template_parms)\n \t    d = pushdecl_with_scope (d, b);\n \n \t  if (d == error_mark_node)"}, {"sha": "51d32b32a37128168df968143cfe1f6a245419dc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5a24482e72fb06ef2e93050cdb056002f99bb226", "patch": "@@ -5781,11 +5781,13 @@ instantiate_class_template (tree type)\n \n \t      if (TREE_CODE (friend_type) == TEMPLATE_DECL)\n \t\t{\n+\t\t  /* template <class T> friend class C;  */\n \t\t  friend_type = tsubst_friend_class (friend_type, args);\n \t  \t  adjust_processing_template_decl = true;\n \t\t}\n \t      else if (TREE_CODE (friend_type) == UNBOUND_CLASS_TEMPLATE)\n \t\t{\n+\t\t  /* template <class T> friend class C::D;  */\n \t\t  friend_type = tsubst (friend_type, args,\n \t\t\t\t\ttf_error | tf_warning, NULL_TREE);\n \t\t  if (TREE_CODE (friend_type) == TEMPLATE_DECL)\n@@ -5794,6 +5796,15 @@ instantiate_class_template (tree type)\n \t\t}\n \t      else if (TREE_CODE (friend_type) == TYPENAME_TYPE)\n \t\t{\n+\t\t  /* This could be either\n+\n+\t\t       friend class T::C;\n+\n+\t\t     when dependent_type_p is false or\n+\n+\t\t       template <class U> friend class T::C;\n+\n+\t\t     otherwise.  */\n \t\t  friend_type = tsubst (friend_type, args,\n \t\t\t\t\ttf_error | tf_warning, NULL_TREE);\n \t\t  /* Bump processing_template_decl for correct\n@@ -5803,23 +5814,37 @@ instantiate_class_template (tree type)\n \t\t    adjust_processing_template_decl = true;\n \t\t  --processing_template_decl;\n \t\t}\n-\t      else if (uses_template_parms (friend_type))\n-\t\tfriend_type = tsubst (friend_type, args,\n-\t\t\t\t      tf_error | tf_warning, NULL_TREE);\n-\t      else if (CLASSTYPE_USE_TEMPLATE (friend_type))\n-\t\tfriend_type = friend_type;\n-\t      else \n+\t      else if (!CLASSTYPE_USE_TEMPLATE (friend_type)\n+\t\t       && hidden_name_p (TYPE_NAME (friend_type)))\n \t\t{\n+\t\t  /* friend class C;\n+\n+\t\t     where C hasn't been declared yet.  Let's lookup name\n+\t\t     from namespace scope directly, bypassing any name that\n+\t\t     come from dependent base class.  */\n \t\t  tree ns = decl_namespace_context (TYPE_MAIN_DECL (friend_type));\n \n \t\t  /* The call to xref_tag_from_type does injection for friend\n \t\t     classes.  */\n \t\t  push_nested_namespace (ns);\n \t\t  friend_type = \n \t\t    xref_tag_from_type (friend_type, NULL_TREE, \n-\t\t\t\t\t/*tag_scope=*/ts_global);\n+\t\t\t\t\t/*tag_scope=*/ts_current);\n \t\t  pop_nested_namespace (ns);\n \t\t}\n+\t      else if (uses_template_parms (friend_type))\n+\t\t/* friend class C<T>;  */\n+\t\tfriend_type = tsubst (friend_type, args,\n+\t\t\t\t      tf_error | tf_warning, NULL_TREE);\n+\t      /* Otherwise it's\n+\n+\t\t   friend class C;\n+\n+\t\t where C is already declared or\n+\n+\t\t   friend class C<int>;\n+\n+\t         We don't have to do anything in these cases.  */\n \n \t      if (adjust_processing_template_decl)\n \t\t/* Trick make_friend_class into realizing that the friend"}, {"sha": "841c7330a6cb64801fd73a307442f9647ec81b40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a24482e72fb06ef2e93050cdb056002f99bb226", "patch": "@@ -1,3 +1,11 @@\n+2005-03-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/4403\n+\tPR c++/9783, DR433\n+\t* g++.dg/template/friend34.C: New test.\n+\t* g++.dg/template/friend35.C: Likewise.\n+\t* g++.old-deja/g++.pt/inherit2.C: Remove XFAIL's.\n+\n 2005-03-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tFriend class name lookup 5/n"}, {"sha": "555cf358a7dc7895a0565ca9cf2f1f2102825dce", "filename": "gcc/testsuite/g++.dg/template/friend34.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend34.C?ref=5a24482e72fb06ef2e93050cdb056002f99bb226", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+\n+// Origin: mleone@pixar.com\n+//\t   Wolfgang Bangerth <bangerth@ticam.utexas.edu>\n+\n+// PR c++/9783: Forward declaration of class in template.\n+\n+template <typename T>\n+struct C {\n+  void foo (struct X *);\n+};\n+\n+struct X {};\n+\n+template <typename T>\n+void C<T>::foo(struct X *) {}"}, {"sha": "b150ccdab8941987753e9c4cd82b4fca029a185e", "filename": "gcc/testsuite/g++.dg/template/friend35.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend35.C?ref=5a24482e72fb06ef2e93050cdb056002f99bb226", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Origin: Giovanni Bajo <giovannibajo@libero.it>\n+\n+// PR c++/4403: Incorrect friend class chosen during instantiation.\n+\n+template <typename T>\n+struct A\n+{\n+  struct F;\n+};\n+ \n+template <typename T>\n+struct B : A<T>\n+{\n+  friend struct F;\n+private:\n+  int priv;\n+};\n+ \n+struct F\n+{\n+  void func(void)\n+  {\n+    B<int> b;\n+    b.priv = 0;\n+  }\n+};"}, {"sha": "136050d455ad30f9d9d4f98c7f7854f4b2140fdb", "filename": "gcc/testsuite/g++.old-deja/g++.pt/inherit2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finherit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a24482e72fb06ef2e93050cdb056002f99bb226/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finherit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finherit2.C?ref=5a24482e72fb06ef2e93050cdb056002f99bb226", "patch": "@@ -24,8 +24,8 @@ template <class T> class B\n   static T value_AC;\n };\n template <typename T> T B<T>::valueA_AA;\n-template <typename T> T B<T>::valueA_AC;// { dg-error \"\" \"\" { xfail *-*-* } } private - \n-template <typename T> T B<T>::value_AC;\t// { dg-bogus \"\" \"\" { xfail *-*-* } }  - \n+template <typename T> T B<T>::valueA_AC;// { dg-error \"\" \"\" } private - \n+template <typename T> T B<T>::value_AC;\t// { dg-bogus \"\" \"\" }  - \n \n // this one is a friend\n template <class T> struct A<T>::AA\n@@ -41,7 +41,7 @@ template <class T> struct A<T>::AC\n {\n   T M ()\n   {\n-    return B<T>::valueA_AC;\t// { dg-error \"\" \"\" { xfail *-*-* } } within this context - \n+    return B<T>::valueA_AC;\t// { dg-error \"\" \"\" } within this context - \n   }\n };\n \n@@ -50,7 +50,7 @@ struct AC\n {\n   int M ()\n   {\n-    return B<int>::value_AC;\t// { dg-bogus \"\" \"\" { xfail *-*-* } }  - \n+    return B<int>::value_AC;\t// { dg-bogus \"\" \"\" }  - \n   }\n };\n "}]}