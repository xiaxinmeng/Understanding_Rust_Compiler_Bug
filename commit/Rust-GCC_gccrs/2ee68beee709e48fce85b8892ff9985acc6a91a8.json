{"sha": "2ee68beee709e48fce85b8892ff9985acc6a91a8", "node_id": "C_kwDOANBUbNoAKDJlZTY4YmVlZTcwOWU0OGZjZTg1Yjg4OTJmZjk5ODVhY2M2YTkxYTg", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2022-05-17T20:53:24Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2022-05-17T20:53:24Z"}, "message": "Fix register count when not splitting Complex IEEE 128-bit args.\n\nFor ABI_V4, we do not split complex args. This created a problem because\neven though an arg would be passed in two VSX regs, we were only advancing the\nfunction arg counter by one VSX register. Fixed with this patch.\n\n\tPR target/99685\n\ngcc/\n\t* config/rs6000/rs6000-call.cc (rs6000_function_arg_advance_1): Bump\n\tregister count when not splitting IEEE 128-bit Complex.", "tree": {"sha": "34bb3341dddd69eaf31d8d59ded8e57685b61719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34bb3341dddd69eaf31d8d59ded8e57685b61719"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ee68beee709e48fce85b8892ff9985acc6a91a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee68beee709e48fce85b8892ff9985acc6a91a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee68beee709e48fce85b8892ff9985acc6a91a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee68beee709e48fce85b8892ff9985acc6a91a8/comments", "author": null, "committer": null, "parents": [{"sha": "47554478a13f64bff1ee4b9bb0319ae63d42ca52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47554478a13f64bff1ee4b9bb0319ae63d42ca52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47554478a13f64bff1ee4b9bb0319ae63d42ca52"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "551968b0995c321f02a69541772255e3bfa4aca0", "filename": "gcc/config/rs6000/rs6000-call.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee68beee709e48fce85b8892ff9985acc6a91a8/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee68beee709e48fce85b8892ff9985acc6a91a8/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc?ref=2ee68beee709e48fce85b8892ff9985acc6a91a8", "patch": "@@ -1111,6 +1111,12 @@ rs6000_function_arg_advance_1 (CUMULATIVE_ARGS *cum, machine_mode mode,\n \t{\n \t  cum->vregno += n_elts;\n \n+\t  /* If we are not splitting Complex IEEE128 args then account for the\n+\t     fact that they are passed in 2 VSX regs. */\n+\t  if (!targetm.calls.split_complex_arg && type\n+\t      && TREE_CODE (type) == COMPLEX_TYPE && elt_mode == KCmode)\n+\t    cum->vregno++;\n+\n \t  if (!TARGET_ALTIVEC)\n \t    error (\"cannot pass argument in vector register because\"\n \t\t   \" altivec instructions are disabled, use %qs\""}]}