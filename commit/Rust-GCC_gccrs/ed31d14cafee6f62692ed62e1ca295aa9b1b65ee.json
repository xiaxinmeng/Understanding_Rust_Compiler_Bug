{"sha": "ed31d14cafee6f62692ed62e1ca295aa9b1b65ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzMWQxNGNhZmVlNmY2MjY5MmVkNjJlMWNhMjk1YWE5YjFiNjVlZQ==", "commit": {"author": {"name": "Lars Poeschel", "email": "larsi@wh2.tu-dresden.de", "date": "2007-03-29T10:23:27Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2007-03-29T10:23:27Z"}, "message": "fr30.md (movdi): Do not accept immediates as the destination of this insn.\n\n* config/fr30/fr30.md (movdi): Do not accept immediates as the destination of this insn.\n* config/fr30/fr30.c (fr30_move_double): Use emit_move_insn rather than calling gen_rtx_SET directly.\n  Use r0 to hold the value of 'address + 4' rather than a stack based temporary which can be\n  mis-optimized away.\n\nFrom-SVN: r123326", "tree": {"sha": "6df58a06db2d6a8fc546c8708baf17483b6590fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6df58a06db2d6a8fc546c8708baf17483b6590fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed31d14cafee6f62692ed62e1ca295aa9b1b65ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed31d14cafee6f62692ed62e1ca295aa9b1b65ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed31d14cafee6f62692ed62e1ca295aa9b1b65ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed31d14cafee6f62692ed62e1ca295aa9b1b65ee/comments", "author": null, "committer": null, "parents": [{"sha": "833cd70a0c91517672ae309a95519bb2f409d304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833cd70a0c91517672ae309a95519bb2f409d304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833cd70a0c91517672ae309a95519bb2f409d304"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "c0241685640a724dd2790b417c4358b3a6fe732a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed31d14cafee6f62692ed62e1ca295aa9b1b65ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed31d14cafee6f62692ed62e1ca295aa9b1b65ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed31d14cafee6f62692ed62e1ca295aa9b1b65ee", "patch": "@@ -1,3 +1,12 @@\n+2007-03-29  Lars Poeschel <larsi@wh2.tu-dresden.de>\n+\n+\t* config/fr30/fr30.md (movdi): Do not accept immediates as the\n+\tdestination of this insn.\n+\t* config/fr30/fr30.c (fr30_move_double): Use emit_move_insn rather\n+\tthan calling gen_rtx_SET directly.  Use r0 to hold the value of\n+\t'address + 4' rather than a stack based temporary which can be\n+\tmis-optimized away.\n+\t\n 2007-03-29  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (s390_secondary_input_reload_class,"}, {"sha": "9d3558d5d276d5c4c7a7f1cf8d4448920e2feb79", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed31d14cafee6f62692ed62e1ca295aa9b1b65ee/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed31d14cafee6f62692ed62e1ca295aa9b1b65ee/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=ed31d14cafee6f62692ed62e1ca295aa9b1b65ee", "patch": "@@ -1,5 +1,5 @@\n /* FR30 specific functions.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007\n    Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n@@ -890,12 +890,11 @@ fr30_move_double (rtx * operands)\n       rtx src1;\n \n       gcc_assert (GET_CODE (addr) == REG);\n-      \n+\n       src0 = operand_subword (src, 0, TRUE, mode);\n       src1 = operand_subword (src, 1, TRUE, mode);\n-      \n-      emit_insn (gen_rtx_SET (VOIDmode, adjust_address (dest, SImode, 0),\n-\t\t\t      src0));\n+\n+      emit_move_insn (adjust_address (dest, SImode, 0), src0);\n \n       if (REGNO (addr) == STACK_POINTER_REGNUM\n \t  || REGNO (addr) == FRAME_POINTER_REGNUM)\n@@ -905,30 +904,31 @@ fr30_move_double (rtx * operands)\n       else\n \t{\n \t  rtx new_mem;\n-\t  \n+\t  rtx scratch_reg_r0 = gen_rtx_REG (SImode, 0);\n+\n \t  /* We need a scratch register to hold the value of 'address + 4'.\n-\t     We ought to allow gcc to find one for us, but for now, just\n-\t     push one of the source registers.  */\n-\t  emit_insn (gen_movsi_push (src0));\n-\t  emit_insn (gen_movsi_internal (src0, addr));\n-\t  emit_insn (gen_addsi_small_int (src0, src0, GEN_INT (UNITS_PER_WORD)));\n-\t  \n-\t  new_mem = gen_rtx_MEM (SImode, src0);\n+\t     We use r0 for this purpose. It is used for example for long\n+\t     jumps and is already marked to not be used by normal register\n+\t     allocation.  */\n+\t  emit_insn (gen_movsi_internal (scratch_reg_r0, addr));\n+\t  emit_insn (gen_addsi_small_int (scratch_reg_r0, scratch_reg_r0,\n+\t\t\t\t\t  GEN_INT (UNITS_PER_WORD)));\n+\t  new_mem = gen_rtx_MEM (SImode, scratch_reg_r0);\n \t  MEM_COPY_ATTRIBUTES (new_mem, dest);\n-\t  \n-\t  emit_insn (gen_rtx_SET (VOIDmode, new_mem, src1));\n-\t  emit_insn (gen_movsi_pop (src0));\n+\t  emit_move_insn (new_mem, src1);\n+\t  emit_insn (gen_blockage ());\n \t}\n     }\n   else\n     /* This should have been prevented by the constraints on movdi_insn.  */\n     gcc_unreachable ();\n-  \n+\n   val = get_insns ();\n   end_sequence ();\n \n   return val;\n }\n+\n /*}}}*/\n /* Local Variables: */\n /* folded-file: t   */"}, {"sha": "83cad93ed000ff71d532a799b9a4656e4d323b3e", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed31d14cafee6f62692ed62e1ca295aa9b1b65ee/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed31d14cafee6f62692ed62e1ca295aa9b1b65ee/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=ed31d14cafee6f62692ed62e1ca295aa9b1b65ee", "patch": "@@ -1,5 +1,5 @@\n ;; FR30 machine description.\n-;; Copyright (C) 1998, 1999, 2000, 2002, 2004, 2005\n+;; Copyright (C) 1998, 1999, 2000, 2002, 2004, 2005, 2007\n ;; Free Software Foundation, Inc.\n ;; Contributed by Cygnus Solutions.\n \n@@ -380,33 +380,35 @@\n ;; (This code is stolen from the M32R port.)\n \n (define_expand \"movdi\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t(match_operand:DI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+        (match_operand:DI 1 \"general_operand\" \"\"))]\n   \"\"\n   \"\n   /* Everything except mem = const or mem = mem can be done easily.  */\n-  \n+\n   if (GET_CODE (operands[0]) == MEM)\n     operands[1] = force_reg (DImode, operands[1]);\n-  \")\n+  \"\n+)\n \n ;; We use an insn and a split so that we can generate\n ;; RTL rather than text from fr30_move_double().\n \n (define_insn \"*movdi_insn\"\n   [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r,r,m,r\")\n-\t(match_operand:DI 1 \"di_operand\"               \"r,m,r,nF\"))]\n+        (match_operand:DI 1 \"di_operand\"               \"r,m,r,nF\"))]\n   \"register_operand (operands[0], DImode) || register_operand (operands[1], DImode)\"\n   \"#\"\n   [(set_attr \"length\" \"4,8,12,12\")]\n )\n \n (define_split\n   [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"\")\n-\t(match_operand:DI 1 \"di_operand\" \"\"))]\n+        (match_operand:DI 1 \"di_operand\" \"\"))]\n   \"reload_completed\"\n   [(match_dup 2)]\n-  \"operands[2] = fr30_move_double (operands);\")\n+  \"operands[2] = fr30_move_double (operands);\"\n+)\n \n ;;}}}\n ;;{{{ Load & Store Multiple Registers "}]}