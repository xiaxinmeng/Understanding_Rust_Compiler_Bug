{"sha": "20dcff2aec49d4274cf4564186ca11b78c01f4de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBkY2ZmMmFlYzQ5ZDQyNzRjZjQ1NjQxODZjYTExYjc4YzAxZjRkZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-10-11T08:58:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-10-11T08:58:28Z"}, "message": "re PR middle-end/33724 (Type checking error with address-of and ref-all pointer type)\n\n2007-10-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/33724\n\t* tree-cfg.c (one_pointer_to_useless_type_conversion_p): New function.\n\t(verify_gimple_expr): Use it to verify pointer-to types for\n\tADDR_EXPRs.\n\n\t* gcc.dg/pr33724.c: New testcase.\n\nFrom-SVN: r129228", "tree": {"sha": "a22c969c6a1f62a117efed36cbc46f1aa283273e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a22c969c6a1f62a117efed36cbc46f1aa283273e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20dcff2aec49d4274cf4564186ca11b78c01f4de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20dcff2aec49d4274cf4564186ca11b78c01f4de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20dcff2aec49d4274cf4564186ca11b78c01f4de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20dcff2aec49d4274cf4564186ca11b78c01f4de/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31b52b5a21ea72420cc11a9077843ad6cbc059a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b52b5a21ea72420cc11a9077843ad6cbc059a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b52b5a21ea72420cc11a9077843ad6cbc059a2"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "e737cb70229ed052b56c05d8229a57bd337fc77e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dcff2aec49d4274cf4564186ca11b78c01f4de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dcff2aec49d4274cf4564186ca11b78c01f4de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20dcff2aec49d4274cf4564186ca11b78c01f4de", "patch": "@@ -1,3 +1,10 @@\n+2007-10-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/33724\n+\t* tree-cfg.c (one_pointer_to_useless_type_conversion_p): New function.\n+\t(verify_gimple_expr): Use it to verify pointer-to types for\n+\tADDR_EXPRs.\n+\n 2007-10-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/33726"}, {"sha": "efb4ca4f8ec6d8292cd47381c3382cc9b2128a24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dcff2aec49d4274cf4564186ca11b78c01f4de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dcff2aec49d4274cf4564186ca11b78c01f4de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20dcff2aec49d4274cf4564186ca11b78c01f4de", "patch": "@@ -1,3 +1,8 @@\n+2007-10-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/33724\n+\t* gcc.dg/pr33724.c: New testcase.\n+\n 2007-10-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/33726"}, {"sha": "7e8eb5ddd070ad58ae76c6878bb44e943205fd29", "filename": "gcc/testsuite/gcc.dg/pr33724.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dcff2aec49d4274cf4564186ca11b78c01f4de/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33724.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dcff2aec49d4274cf4564186ca11b78c01f4de/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33724.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33724.c?ref=20dcff2aec49d4274cf4564186ca11b78c01f4de", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+/* We ICEd with type-checking enabled.  */\n+\n+struct xt_entry_target {\n+  char name[1];\n+};\n+struct ipt_entry {\n+  unsigned char elems[1];\n+};\n+void match_different(const unsigned char *);\n+int dump_entry(struct xt_entry_target *t)\n+{\n+  return __builtin_strcmp (t->name, \"\");\n+}\n+void is_same(const struct ipt_entry *a)\n+{\n+  match_different(a->elems);\n+}\n+"}, {"sha": "05c69b8ae02533827c8deb5f61ef595d12438b67", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20dcff2aec49d4274cf4564186ca11b78c01f4de/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20dcff2aec49d4274cf4564186ca11b78c01f4de/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=20dcff2aec49d4274cf4564186ca11b78c01f4de", "patch": "@@ -3538,6 +3538,24 @@ verify_gimple_reference (tree expr)\n   return verify_gimple_min_lval (expr);\n }\n \n+/* Returns true if there is one pointer type in TYPE_POINTER_TO (SRC_OBJ)\n+   list of pointer-to types that is trivially convertible to DEST.  */\n+\n+static bool\n+one_pointer_to_useless_type_conversion_p (tree dest, tree src_obj)\n+{\n+  tree src;\n+\n+  if (!TYPE_POINTER_TO (src_obj))\n+    return true;\n+\n+  for (src = TYPE_POINTER_TO (src_obj); src; src = TYPE_NEXT_PTR_TO (src))\n+    if (useless_type_conversion_p (dest, src))\n+      return true;\n+\n+  return false;\n+}\n+\n /* Verify the GIMPLE expression EXPR.  Returns true if there is an\n    error, otherwise false.  */\n \n@@ -3773,14 +3791,11 @@ verify_gimple_expr (tree expr)\n \t    error (\"invalid operand in unary expression\");\n \t    return true;\n \t  }\n-\tif (TYPE_POINTER_TO (TREE_TYPE (op))\n-\t    && !useless_type_conversion_p (type,\n-\t\t\t\t\t   TYPE_POINTER_TO (TREE_TYPE (op)))\n+\tif (!one_pointer_to_useless_type_conversion_p (type, TREE_TYPE (op))\n \t    /* FIXME: a longstanding wart, &a == &a[0].  */\n \t    && (TREE_CODE (TREE_TYPE (op)) != ARRAY_TYPE\n-\t\t|| (TYPE_POINTER_TO (TREE_TYPE (TREE_TYPE (op)))\n-\t\t    && !useless_type_conversion_p (type,\n-\t\t\t  TYPE_POINTER_TO (TREE_TYPE (TREE_TYPE (op)))))))\n+\t\t|| !one_pointer_to_useless_type_conversion_p (type,\n+\t\t      TREE_TYPE (TREE_TYPE (op)))))\n \t  {\n \t    error (\"type mismatch in address expression\");\n \t    debug_generic_stmt (TREE_TYPE (expr));"}]}