{"sha": "f8726f2b03e034a7928323e78fbc87b705c3c388", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg3MjZmMmIwM2UwMzRhNzkyODMyM2U3OGZiYzg3YjcwNWMzYzM4OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T12:36:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T12:36:58Z"}, "message": "[multiple changes]\n\n2011-08-02  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* inline.adb (Add_Inlined_Body): Adjust check for library-level inlined\n\tfunctions to previous change.  Reorganize code slightly.\n\n2011-08-02  Geert Bosch  <bosch@adacore.com>\n\n\t* back_end.ads (Register_Type_Proc): New call back procedure type for\n\tallowing the back end to provide information about available types.\n\t(Register_Back_End_Types): New procedure to register back end types.\n\t* back_end.adb (Register_Back_End_Types): Call the back end to enumerate\n\tavailable types.\n\t* cstand.adb (Back_End_Float_Types): New list for floating point types\n\tsupported by the back end.\n\t(Build_Float_Type): Add extra parameter for Float_Rep_Kind.\n\t(Copy_Float_Type): New procedure to make new copies of predefined types.\n\t(Register_Float_Type): New call back procedure to populate the BEFT list\n\t(Find_Back_End_Float_Type): New procedure to find a BEFT by name\n\t(Create_Back_End_Float_Types): New procedure to populate the BEFT list.\n\t(Create_Float_Types): New procedure to create entities for floating\n\tpoint types predefined in Standard, and put these and any remaining\n\tBEFTs on the Predefined_Float_Types list.\n\t* stand.ads (Predefined_Float_Types): New list for predefined floating\n\tpoint types that do not have declarations in package Standard.\n\nFrom-SVN: r177137", "tree": {"sha": "c4a919db02a75d3f2a5f6a7e7c6835ddca7877dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4a919db02a75d3f2a5f6a7e7c6835ddca7877dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8726f2b03e034a7928323e78fbc87b705c3c388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8726f2b03e034a7928323e78fbc87b705c3c388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8726f2b03e034a7928323e78fbc87b705c3c388", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8726f2b03e034a7928323e78fbc87b705c3c388/comments", "author": null, "committer": null, "parents": [{"sha": "feecad6893547e1610a67df19ec8c87f1908d029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feecad6893547e1610a67df19ec8c87f1908d029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feecad6893547e1610a67df19ec8c87f1908d029"}], "stats": {"total": 359, "additions": 298, "deletions": 61}, "files": [{"sha": "5cd284e941434d6ba6ff7c36afdb6c8ffc158846", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f8726f2b03e034a7928323e78fbc87b705c3c388", "patch": "@@ -1,3 +1,28 @@\n+2011-08-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.adb (Add_Inlined_Body): Adjust check for library-level inlined\n+\tfunctions to previous change.  Reorganize code slightly.\n+\n+2011-08-02  Geert Bosch  <bosch@adacore.com>\n+\n+\t* back_end.ads (Register_Type_Proc): New call back procedure type for\n+\tallowing the back end to provide information about available types.\n+\t(Register_Back_End_Types): New procedure to register back end types.\n+\t* back_end.adb (Register_Back_End_Types): Call the back end to enumerate\n+\tavailable types.\n+\t* cstand.adb (Back_End_Float_Types): New list for floating point types\n+\tsupported by the back end.\n+\t(Build_Float_Type): Add extra parameter for Float_Rep_Kind.\n+\t(Copy_Float_Type): New procedure to make new copies of predefined types.\n+\t(Register_Float_Type): New call back procedure to populate the BEFT list\n+\t(Find_Back_End_Float_Type): New procedure to find a BEFT by name\n+\t(Create_Back_End_Float_Types): New procedure to populate the BEFT list.\n+\t(Create_Float_Types): New procedure to create entities for floating\n+\tpoint types predefined in Standard, and put these and any remaining\n+\tBEFTs on the Predefined_Float_Types list.\n+\t* stand.ads (Predefined_Float_Types): New list for predefined floating\n+\tpoint types that do not have declarations in package Standard.\n+\n 2011-08-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* inline.adb (Get_Code_Unit_Entity): New local function.  Returns the"}, {"sha": "3bcf8488029b500adcc2bda3b116346ceff75ca1", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=f8726f2b03e034a7928323e78fbc87b705c3c388", "patch": "@@ -325,4 +325,16 @@ package body Back_End is\n          Next_Arg := Next_Arg + 1;\n       end loop;\n    end Scan_Compiler_Arguments;\n+\n+   -----------------------------\n+   -- Register_Back_End_Types --\n+   -----------------------------\n+\n+   procedure Register_Back_End_Types (Call_Back : Register_Type_Proc) is\n+      procedure Enumerate_Modes (Call_Back : Register_Type_Proc);\n+      pragma Import (C, Enumerate_Modes, \"enumerate_modes\");\n+\n+   begin\n+      Enumerate_Modes (Call_Back);\n+   end Register_Back_End_Types;\n end Back_End;"}, {"sha": "430f2c9449fb78e9c17b2467e17a84d49bf0c1e9", "filename": "gcc/ada/back_end.ads", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2Fback_end.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2Fback_end.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.ads?ref=f8726f2b03e034a7928323e78fbc87b705c3c388", "patch": "@@ -26,6 +26,8 @@\n --  Call the back end with all the information needed. Also contains other\n --  back-end specific interfaces required by the front end.\n \n+with Einfo; use Einfo;\n+\n package Back_End is\n \n    type Back_End_Mode_Type is (\n@@ -44,6 +46,25 @@ package Back_End is\n    pragma Convention (C, Back_End_Mode_Type);\n    for Back_End_Mode_Type use (0, 1, 2);\n \n+   type C_String is array (0 .. 255) of aliased Character;\n+   pragma Convention (C, C_String);\n+\n+   type Register_Type_Proc is access procedure\n+     (C_Name    : C_String; -- Nul-terminated string with name of type\n+      Digs      : Natural;  -- Nr or digits for floating point, 0 otherwise\n+      Complex   : Boolean;  -- True iff type has real and imaginary parts\n+      Count     : Natural;  -- Number of elements in vector, 0 otherwise\n+      Float_Rep : Float_Rep_Kind; -- Representation used for fpt type\n+      Size      : Positive; -- Size of representation in bits\n+      Alignment : Natural); -- Required alignment in bits\n+   pragma Convention (C, Register_Type_Proc);\n+   --  Call back procedure for Register_Back_End_Types. This is to be used by\n+   --  Create_Standard to create predefined types for all types supported by\n+   --  the back end.\n+\n+   procedure Register_Back_End_Types (Call_Back : Register_Type_Proc);\n+   --  Calls the Call_Back function with information for each supported type.\n+\n    procedure Call_Back_End (Mode : Back_End_Mode_Type);\n    --  Call back end, i.e. make call to driver traversing the tree and\n    --  outputting code. This call is made with all tables locked."}, {"sha": "fe3bf4530bb1c6eb2cd2d0e18805c899b8cdbeee", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 208, "deletions": 40, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=f8726f2b03e034a7928323e78fbc87b705c3c388", "patch": "@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n with Atree;    use Atree;\n+with Back_End; use Back_End;\n with Csets;    use Csets;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n@@ -51,21 +52,37 @@ package body CStand is\n    Staloc : constant Source_Ptr := Standard_ASCII_Location;\n    --  Standard abbreviations used throughout this package\n \n+   Back_End_Float_Types : List_Id := No_List;\n+   --  List used for any floating point supported by the back end. This needs\n+   --  to be at the library level, because the call back procedures retrieving\n+   --  this information are at that level.\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure Build_Float_Type (E : Entity_Id; Siz : Int; Digs : Int);\n+   procedure Build_Float_Type\n+     (E    : Entity_Id;\n+      Siz  : Int;\n+      Rep  : Float_Rep_Kind;\n+      Digs : Int);\n    --  Procedure to build standard predefined float base type. The first\n-   --  parameter is the entity for the type, and the second parameter\n-   --  is the size in bits. The third parameter is the digits value.\n+   --  parameter is the entity for the type, and the second parameter is the\n+   --  size in bits. The third parameter indicates the kind of representation\n+   --  to be used. The fourth parameter is the digits value. Each type\n+   --  is added to the list of predefined floating point types.\n \n    procedure Build_Signed_Integer_Type (E : Entity_Id; Siz : Int);\n    --  Procedure to build standard predefined signed integer subtype. The\n    --  first parameter is the entity for the subtype. The second parameter\n    --  is the size in bits. The corresponding base type is not built by\n    --  this routine but instead must be built by the caller where needed.\n \n+   procedure Copy_Float_Type (To : Entity_Id; From : Entity_Id);\n+   --  Build a floating point type, copying representation details from From.\n+   --  This is used to create predefined floating point types based on\n+   --  available types in the back end.\n+\n    procedure Create_Operators;\n    --  Make entries for each of the predefined operators in Standard\n \n@@ -89,6 +106,12 @@ package body CStand is\n    --  bounds, but do not statically match, since a subtype with constraints\n    --  never matches a subtype with no constraints.\n \n+   function Find_Back_End_Float_Type (Name : String) return Entity_Id;\n+   --  Return the first float type in Back_End_Float_Types with the given name.\n+   --  Names of entities in back end types, are either type names of C\n+   --  predefined types (all lower case), or mode names (upper case).\n+   --  These are not generally valid identifier names.\n+\n    function Identifier_For (S : Standard_Entity_Type) return Node_Id;\n    --  Returns an identifier node with the same name as the defining\n    --  identifier corresponding to the given Standard_Entity_Type value\n@@ -121,6 +144,20 @@ package body CStand is\n    procedure Print_Standard;\n    --  Print representation of package Standard if switch set\n \n+   procedure Register_Float_Type\n+     (Name      : C_String; -- Nul-terminated string with name of type\n+      Digs      : Natural;  -- Nr or digits for floating point, 0 otherwise\n+      Complex   : Boolean;  -- True iff type has real and imaginary parts\n+      Count     : Natural;  -- Number of elements in vector, 0 otherwise\n+      Float_Rep : Float_Rep_Kind; -- Representation used for fpt type\n+      Size      : Positive; -- Size of representation in bits\n+      Alignment : Natural); -- Required alignment in bits\n+   pragma Convention (C, Register_Float_Type);\n+   --  Call back to allow the back end to register available types.\n+   --  This call back currently creates predefined floating point base types\n+   --  for any floating point types reported by the back end, and adds them\n+   --  to the list of predefined float types.\n+\n    procedure Set_Integer_Bounds\n      (Id  : Entity_Id;\n       Typ : Entity_Id;\n@@ -135,21 +172,20 @@ package body CStand is\n    -- Build_Float_Type --\n    ----------------------\n \n-   procedure Build_Float_Type (E : Entity_Id; Siz : Int; Digs : Int) is\n+   procedure Build_Float_Type\n+     (E    : Entity_Id;\n+      Siz  : Int;\n+      Rep  : Float_Rep_Kind;\n+      Digs : Int)\n+   is\n    begin\n       Set_Type_Definition (Parent (E),\n         Make_Floating_Point_Definition (Stloc,\n           Digits_Expression => Make_Integer (UI_From_Int (Digs))));\n \n       Set_Ekind                      (E, E_Floating_Point_Type);\n       Set_Etype                      (E, E);\n-\n-      if AAMP_On_Target then\n-         Set_Float_Rep (E, AAMP);\n-      else\n-         Set_Float_Rep (E, IEEE_Binary);\n-      end if;\n-\n+      Set_Float_Rep (E, Rep);\n       Init_Size                      (E, Siz);\n       Set_Elem_Alignment             (E);\n       Init_Digits_Value              (E, Digs);\n@@ -159,6 +195,21 @@ package body CStand is\n       Set_Size_Known_At_Compile_Time (E);\n    end Build_Float_Type;\n \n+   ------------------------\n+   -- Find_Back_End_Float_Type --\n+   ------------------------\n+\n+   function Find_Back_End_Float_Type (Name : String) return Entity_Id is\n+      N    : Node_Id := First (Back_End_Float_Types);\n+\n+   begin\n+      while Present (N) and then Get_Name_String (Chars (N)) /= Name loop\n+         Next (N);\n+      end loop;\n+\n+      return Entity_Id (N);\n+   end Find_Back_End_Float_Type;\n+\n    -------------------------------\n    -- Build_Signed_Integer_Type --\n    -------------------------------\n@@ -185,6 +236,16 @@ package body CStand is\n       Set_Size_Known_At_Compile_Time (E);\n    end Build_Signed_Integer_Type;\n \n+   ---------------------\n+   -- Copy_Float_Type --\n+   ---------------------\n+\n+   procedure Copy_Float_Type (To : Entity_Id; From : Entity_Id) is\n+   begin\n+      Build_Float_Type (To, UI_To_Int (Esize (From)), Float_Rep (From),\n+                        UI_To_Int (Digits_Value (From)));\n+   end Copy_Float_Type;\n+\n    ----------------------\n    -- Create_Operators --\n    ----------------------\n@@ -306,10 +367,11 @@ package body CStand is\n \n    --  The tree for the package Standard is prefixed to all compilations.\n    --  Several entities required by semantic analysis are denoted by global\n-   --  variables that are initialized to point to the corresponding\n-   --  occurrences in STANDARD. The visible entities of STANDARD are\n-   --  created here. The private entities defined in STANDARD are created\n-   --  by Initialize_Standard in the semantics module.\n+   --  variables that are initialized to point to the corresponding occurrences\n+   --  in Standard. The visible entities of Standard are created here. Special\n+   --  entities maybe created here as well or may be created from the semantics\n+   --  module. By not adding them to the Decls list of Standard they will not\n+   --  be visible to Ada programs.\n \n    procedure Create_Standard is\n       Decl_S : constant List_Id := New_List;\n@@ -330,6 +392,14 @@ package body CStand is\n       procedure Build_Exception (S : Standard_Entity_Type);\n       --  Procedure to declare given entity as an exception\n \n+      procedure Create_Back_End_Float_Types;\n+      --  Initialize the Back_End_Float_Types list by having the back end\n+      --  enumerate all available types and building type entities for them.\n+\n+      procedure Create_Float_Types;\n+      --  Creates entities for all predefined floating point types, and\n+      --  adds these to the Predefined_Float_Types list in package Standard.\n+\n       procedure Pack_String_Type (String_Type : Entity_Id);\n       --  Generate proper tree for pragma Pack that applies to given type, and\n       --  mark type as having the pragma.\n@@ -351,6 +421,78 @@ package body CStand is\n          Append (Decl, Decl_S);\n       end Build_Exception;\n \n+      ---------------------------\n+      -- Create_Back_End_Float_Types --\n+      ---------------------------\n+\n+      procedure Create_Back_End_Float_Types is\n+      begin\n+         Back_End_Float_Types := No_List;\n+         Register_Back_End_Types (Register_Float_Type'Access);\n+      end Create_Back_End_Float_Types;\n+\n+      ------------------------\n+      -- Create_Float_Types --\n+      ------------------------\n+\n+      procedure Create_Float_Types is\n+      begin\n+         --  Create type definition nodes for predefined float types\n+\n+         Copy_Float_Type (Standard_Short_Float,\n+           Find_Back_End_Float_Type (\"float\"));\n+\n+         Copy_Float_Type (Standard_Float, Standard_Short_Float);\n+\n+         Copy_Float_Type (Standard_Long_Float,\n+           Find_Back_End_Float_Type (\"double\"));\n+\n+         Predefined_Float_Types := New_List\n+           (Standard_Short_Float, Standard_Float, Standard_Long_Float);\n+\n+         --  ??? For now, we don't have a good way to tell the widest float\n+         --  type with hardware support. Basically, GCC knows the size of that\n+         --  type, but on x86-64 there often are two or three 128-bit types,\n+         --  one double extended that has 18 decimal digits, a 128-bit quad\n+         --  precision type with 33 digits and possibly a 128-bit decimal float\n+         --  type with 34 digits. As a workaround, we define Long_Long_Float as\n+         --  C's \"long double\" if that type exists and has at most 18 digits,\n+         --  or otherwise the same as Long_Float.\n+\n+         declare\n+            Max_HW_Digs : constant := 18;\n+            LF_Digs     : constant Pos :=\n+                            UI_To_Int (Digits_Value (Standard_Long_Float));\n+            LLF : Entity_Id := Find_Back_End_Float_Type (\"long double\");\n+            N   : Node_Id := First (Back_End_Float_Types);\n+\n+         begin\n+            if Digits_Value (LLF) > Max_HW_Digs then\n+               LLF := Empty;\n+            end if;\n+\n+            while No (LLF) and then Present (N) loop\n+               if UI_To_Int (Digits_Value (N)) in LF_Digs + 1 .. Max_HW_Digs\n+                 and then Machine_Radix_Value (N) = Uint_2\n+               then\n+                  LLF := N;\n+               end if;\n+\n+               Next (N);\n+            end loop;\n+\n+            if No (LLF) then\n+               LLF := Standard_Long_Float;\n+            end if;\n+\n+            Copy_Float_Type (Standard_Long_Long_Float, LLF);\n+\n+            Append (Standard_Long_Long_Float, Predefined_Float_Types);\n+         end;\n+\n+         Append_List (Back_End_Float_Types, To => Predefined_Float_Types);\n+      end Create_Float_Types;\n+\n       ----------------------\n       -- Pack_String_Type --\n       ----------------------\n@@ -431,6 +573,8 @@ package body CStand is\n          Append (Decl, Decl_S);\n       end loop;\n \n+      Create_Back_End_Float_Types;\n+\n       --  Create type definition node for type Boolean. The Size is set to\n       --  1 as required by Ada 95 and current ARG interpretations for Ada/83.\n \n@@ -539,27 +683,7 @@ package body CStand is\n       Create_Unconstrained_Base_Type\n         (Standard_Long_Long_Integer, E_Signed_Integer_Subtype);\n \n-      --  Create type definition nodes for predefined float types\n-\n-      Build_Float_Type\n-        (Standard_Short_Float,\n-         Standard_Short_Float_Size,\n-         Standard_Short_Float_Digits);\n-\n-      Build_Float_Type\n-        (Standard_Float,\n-         Standard_Float_Size,\n-         Standard_Float_Digits);\n-\n-      Build_Float_Type\n-        (Standard_Long_Float,\n-         Standard_Long_Float_Size,\n-         Standard_Long_Float_Digits);\n-\n-      Build_Float_Type\n-        (Standard_Long_Long_Float,\n-         Standard_Long_Long_Float_Size,\n-         Standard_Long_Long_Float_Digits);\n+      Create_Float_Types;\n \n       --  Create type definition node for type Character. Note that we do not\n       --  set the Literals field, since type Character is handled with special\n@@ -1209,10 +1333,7 @@ package body CStand is\n       Set_Defining_Identifier (Decl, Universal_Real);\n       Make_Name (Universal_Real, \"universal_real\");\n       Set_Scope (Universal_Real, Standard_Standard);\n-      Build_Float_Type\n-        (Universal_Real,\n-         Standard_Long_Long_Float_Size,\n-         Standard_Long_Long_Float_Digits);\n+      Copy_Float_Type (Universal_Real, Standard_Long_Long_Float);\n \n       --  Note: universal fixed, unlike universal integer and universal real,\n       --  is never used at runtime, so it does not need to have bounds set.\n@@ -1874,6 +1995,53 @@ package body CStand is\n       P (\"end Standard;\");\n    end Print_Standard;\n \n+   -------------------------\n+   -- Register_Float_Type --\n+   -------------------------\n+\n+   procedure Register_Float_Type\n+     (Name      : C_String;\n+      Digs      : Natural;\n+      Complex   : Boolean;\n+      Count     : Natural;\n+      Float_Rep : Float_Rep_Kind;\n+      Size      : Positive;\n+      Alignment : Natural)\n+   is\n+      Last : Natural := Name'First - 1;\n+\n+   begin\n+      for J in Name'Range loop\n+         if Name (J) = ASCII.NUL then\n+            Last := J - 1;\n+            exit;\n+         end if;\n+      end loop;\n+\n+      if Digs > 0 and then not Complex and then Count = 0 then\n+         declare\n+            Ent   : constant Entity_Id := New_Standard_Entity;\n+            Esize : constant Pos := Pos ((Size + Alignment - 1)\n+                                           / Alignment * Alignment);\n+         begin\n+            Set_Defining_Identifier\n+              (New_Node (N_Full_Type_Declaration, Stloc), Ent);\n+            Make_Name (Ent, String (Name (Name'First .. Last)));\n+            Set_Scope (Ent, Standard_Standard);\n+            Build_Float_Type (Ent, Esize, Float_Rep, Pos (Digs));\n+            Set_RM_Size (Ent, UI_From_Int (Int (Size)));\n+            Set_Alignment (Ent, UI_From_Int (Int (Alignment / 8)));\n+\n+            if No (Back_End_Float_Types) then\n+               Back_End_Float_Types := New_List (Ent);\n+\n+            else\n+               Append (Ent, Back_End_Float_Types);\n+            end if;\n+         end;\n+      end if;\n+   end Register_Float_Type;\n+\n    ----------------------\n    -- Set_Float_Bounds --\n    ----------------------"}, {"sha": "6678057ff02eae9feab698e11d2dd82ac7d6408e", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=f8726f2b03e034a7928323e78fbc87b705c3c388", "patch": "@@ -236,7 +236,6 @@ package body Inline is\n    ----------------------\n \n    procedure Add_Inlined_Body (E : Entity_Id) is\n-      Pack : Entity_Id;\n \n       function Must_Inline return Boolean;\n       --  Inlining is only done if the call statement N is in the main unit,\n@@ -318,35 +317,39 @@ package body Inline is\n       --  no enclosing package to retrieve. In this case, it is the body of\n       --  the function that will have to be loaded.\n \n-      if not Is_Abstract_Subprogram (E) and then not Is_Nested (E)\n+      if not Is_Abstract_Subprogram (E)\n+        and then not Is_Nested (E)\n         and then Convention (E) /= Convention_Protected\n+        and then Must_Inline\n       then\n-         Pack := Get_Code_Unit_Entity (E);\n-\n-         if Must_Inline\n-           and then Ekind (Pack) = E_Package\n-         then\n-            Set_Is_Called (E);\n+         declare\n+            Pack : constant Entity_Id := Get_Code_Unit_Entity (E);\n \n-            if Pack = Standard_Standard then\n+         begin\n+            if Pack = E then\n \n                --  Library-level inlined function. Add function itself to\n                --  list of needed units.\n \n+               Set_Is_Called (E);\n                Inlined_Bodies.Increment_Last;\n                Inlined_Bodies.Table (Inlined_Bodies.Last) := E;\n \n-            elsif Is_Generic_Instance (Pack) then\n-               null;\n+            elsif Ekind (Pack) = E_Package then\n+               Set_Is_Called (E);\n \n-            elsif not Is_Inlined (Pack)\n-              and then not Has_Completion (E)\n-            then\n-               Set_Is_Inlined (Pack);\n-               Inlined_Bodies.Increment_Last;\n-               Inlined_Bodies.Table (Inlined_Bodies.Last) := Pack;\n+               if Is_Generic_Instance (Pack) then\n+                  null;\n+\n+               elsif not Is_Inlined (Pack)\n+                 and then not Has_Completion (E)\n+               then\n+                  Set_Is_Inlined (Pack);\n+                  Inlined_Bodies.Increment_Last;\n+                  Inlined_Bodies.Table (Inlined_Bodies.Last) := Pack;\n+               end if;\n             end if;\n-         end if;\n+         end;\n       end if;\n    end Add_Inlined_Body;\n "}, {"sha": "1c93078f20c3fe48153b8d1759333caeb2a73989", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8726f2b03e034a7928323e78fbc87b705c3c388/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=f8726f2b03e034a7928323e78fbc87b705c3c388", "patch": "@@ -229,9 +229,9 @@ package Stand is\n    type Standard_Entity_Array_Type is array (Standard_Entity_Type) of Node_Id;\n \n    Standard_Entity : Standard_Entity_Array_Type;\n-   --  This array contains pointers to the Defining Identifier nodes\n-   --  for each of the entities defined in Standard_Entities_Type. It\n-   --  is initialized by the Create_Standard procedure.\n+   --  This array contains pointers to the Defining Identifier nodes for\n+   --  each of the visible entities defined in Standard_Entities_Type. It is\n+   --  initialized by the Create_Standard procedure.\n \n    Standard_Package_Node : Node_Id;\n    --  Points to the N_Package_Declaration node for standard. Also\n@@ -343,6 +343,14 @@ package Stand is\n    --  A zero-size subtype of Integer, used as the type of variables used\n    --  to provide the debugger with name encodings for renaming declarations.\n \n+   Predefined_Float_Types : List_Id;\n+   --  Entities for predefined floating point types. These are used by\n+   --  the semantic phase to select appropriate types for floating point\n+   --  declarations. This list is ordered by preference. All types up to\n+   --  Long_Long_Float_Type are considered for plain \"digits N\" declarations,\n+   --  while selection of later types requires a range specification and\n+   --  possibly other attributes or pragmas.\n+\n    --  The entities labeled Any_xxx are used in situations where the full\n    --  characteristics of an entity are not yet known, e.g. Any_Character\n    --  is used to label a character literal before resolution is complete."}]}