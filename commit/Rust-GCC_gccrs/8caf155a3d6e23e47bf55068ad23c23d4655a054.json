{"sha": "8caf155a3d6e23e47bf55068ad23c23d4655a054", "node_id": "C_kwDOANBUbNoAKDhjYWYxNTVhM2Q2ZTIzZTQ3YmY1NTA2OGFkMjNjMjNkNDY1NWEwNTQ", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-11-19T01:38:00Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-11-24T01:19:16Z"}, "message": "i386: Only enable small loop unrolling in backend [PR 107692]\n\nFollowed by the discussion in pr107692, -munroll-only-small-loops\nDoes not turns on/off -funroll-loops, and current check in\npass_rtl_unroll_loops::gate would cause -fno-unroll-loops do not take\neffect. Revert the change about targetm.loop_unroll_adjust and apply\nthe backend option change to strictly follow the rule that\n-funroll-loops takes full control of loop unrolling, and\nmunroll-only-small-loops just change its behavior to unroll small size\nloops.\n\ngcc/ChangeLog:\n\n\tPR target/107692\n\t* common/config/i386/i386-common.cc (ix86_optimization_table):\n\tEnable loop unroll O2, disable -fweb and -frename-registers\n\tby default.\n\t* config/i386/i386-options.cc\n\t(ix86_override_options_after_change):\n\tDisable small loop unroll when funroll-loops enabled, reset\n\tcunroll_grow_size when it is not explicitly enabled.\n\t(ix86_option_override_internal): Call\n\tix86_override_options_after_change instead of calling\n\tix86_recompute_optlev_based_flags and ix86_default_align\n\tseparately.\n\t* config/i386/i386.cc (ix86_loop_unroll_adjust): Adjust unroll\n\tfactor if -munroll-only-small-loops enabled.\n\t* loop-init.cc (pass_rtl_unroll_loops::gate): Do not enable\n\tloop unrolling for -O2-speed.\n\t(pass_rtl_unroll_loops::execute): Rmove\n\ttargetm.loop_unroll_adjust check.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/107692\n\t* gcc.dg/guality/loop-1.c: Remove additional option for ia32.\n\t* gcc.target/i386/pr86270.c: Add -fno-unroll-loops.\n\t* gcc.target/i386/pr93002.c: Likewise.", "tree": {"sha": "ab5220a6baba7b48c7a20c5a5f48f6911b2c988d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab5220a6baba7b48c7a20c5a5f48f6911b2c988d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8caf155a3d6e23e47bf55068ad23c23d4655a054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8caf155a3d6e23e47bf55068ad23c23d4655a054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8caf155a3d6e23e47bf55068ad23c23d4655a054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8caf155a3d6e23e47bf55068ad23c23d4655a054/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8761284fd7862fbd9665237145f3a0d8de79c265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8761284fd7862fbd9665237145f3a0d8de79c265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8761284fd7862fbd9665237145f3a0d8de79c265"}], "stats": {"total": 77, "additions": 49, "deletions": 28}, "files": [{"sha": "660a977b68b499edf4beb3bdafe3196ee157ede0", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=8caf155a3d6e23e47bf55068ad23c23d4655a054", "patch": "@@ -1808,7 +1808,15 @@ static const struct default_options ix86_option_optimization_table[] =\n     /* The STC algorithm produces the smallest code at -Os, for x86.  */\n     { OPT_LEVELS_2_PLUS, OPT_freorder_blocks_algorithm_, NULL,\n       REORDER_BLOCKS_ALGORITHM_STC },\n+\n+    /* Turn on -funroll-loops with -munroll-only-small-loops to enable small\n+       loop unrolling at -O2.  */\n+    { OPT_LEVELS_2_PLUS_SPEED_ONLY, OPT_funroll_loops, NULL, 1 },\n     { OPT_LEVELS_2_PLUS_SPEED_ONLY, OPT_munroll_only_small_loops, NULL, 1 },\n+    /* Turns off -frename-registers and -fweb which are enabled by\n+       funroll-loops.  */\n+    { OPT_LEVELS_ALL, OPT_frename_registers, NULL, 0 },\n+    { OPT_LEVELS_ALL, OPT_fweb, NULL, 0 },\n     /* Turn off -fschedule-insns by default.  It tends to make the\n        problem with not enough registers even worse.  */\n     { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },"}, {"sha": "bc1d36e36a8ca5ad0b2bf307fbd4734d50378170", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=8caf155a3d6e23e47bf55068ad23c23d4655a054", "patch": "@@ -1838,8 +1838,37 @@ ix86_recompute_optlev_based_flags (struct gcc_options *opts,\n void\n ix86_override_options_after_change (void)\n {\n+  /* Default align_* from the processor table.  */\n   ix86_default_align (&global_options);\n+\n   ix86_recompute_optlev_based_flags (&global_options, &global_options_set);\n+\n+  /* Disable unrolling small loops when there's explicit\n+     -f{,no}unroll-loop.  */\n+  if ((OPTION_SET_P (flag_unroll_loops))\n+     || (OPTION_SET_P (flag_unroll_all_loops)\n+\t && flag_unroll_all_loops))\n+    {\n+      if (!OPTION_SET_P (ix86_unroll_only_small_loops))\n+\tix86_unroll_only_small_loops = 0;\n+      /* Re-enable -frename-registers and -fweb if funroll-loops\n+\t enabled.  */\n+      if (!OPTION_SET_P (flag_web))\n+\tflag_web = flag_unroll_loops;\n+      if (!OPTION_SET_P (flag_rename_registers))\n+\tflag_rename_registers = flag_unroll_loops;\n+      /* -fcunroll-grow-size default follws -f[no]-unroll-loops.  */\n+      if (!OPTION_SET_P (flag_cunroll_grow_size))\n+\tflag_cunroll_grow_size = flag_unroll_loops\n+\t\t\t\t || flag_peel_loops\n+\t\t\t\t || optimize >= 3;\n+    }\n+  else\n+    {\n+      if (!OPTION_SET_P (flag_cunroll_grow_size))\n+\tflag_cunroll_grow_size = flag_peel_loops || optimize >= 3;\n+    }\n+\n }\n \n /* Clear stack slot assignments remembered from previous functions.\n@@ -2351,7 +2380,7 @@ ix86_option_override_internal (bool main_args_p,\n \n   set_ix86_tune_features (opts, ix86_tune, opts->x_ix86_dump_tunes);\n \n-  ix86_recompute_optlev_based_flags (opts, opts_set);\n+  ix86_override_options_after_change ();\n \n   ix86_tune_cost = processor_cost_table[ix86_tune];\n   /* TODO: ix86_cost should be chosen at instruction or function granuality\n@@ -2382,9 +2411,6 @@ ix86_option_override_internal (bool main_args_p,\n       || TARGET_64BIT_P (opts->x_ix86_isa_flags))\n     opts->x_ix86_regparm = REGPARM_MAX;\n \n-  /* Default align_* from the processor table.  */\n-  ix86_default_align (opts);\n-\n   /* Provide default for -mbranch-cost= value.  */\n   SET_OPTION_IF_UNSET (opts, opts_set, ix86_branch_cost,\n \t\t       ix86_tune_cost->branch_cost);"}, {"sha": "881cd9f3bb7622f738e553cc49f083ca1c696392", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=8caf155a3d6e23e47bf55068ad23c23d4655a054", "patch": "@@ -23828,20 +23828,12 @@ ix86_loop_unroll_adjust (unsigned nunroll, class loop *loop)\n \n   /* Unroll small size loop when unroll factor is not explicitly\n      specified.  */\n-  if (!(flag_unroll_loops\n-\t|| flag_unroll_all_loops\n-\t|| loop->unroll))\n+  if (ix86_unroll_only_small_loops && !loop->unroll)\n     {\n-      nunroll = 1;\n-\n-      /* Any explicit -f{no-}unroll-{all-}loops turns off\n-\t -munroll-only-small-loops.  */\n-      if (ix86_unroll_only_small_loops\n-\t  && !OPTION_SET_P (flag_unroll_loops)\n-\t  && loop->ninsns <= ix86_cost->small_unroll_ninsns)\n-\tnunroll = ix86_cost->small_unroll_factor;\n-\n-      return nunroll;\n+      if (loop->ninsns <= ix86_cost->small_unroll_ninsns)\n+\treturn MIN (nunroll, ix86_cost->small_unroll_factor);\n+      else\n+\treturn 1;\n     }\n \n   if (!TARGET_ADJUST_UNROLL)"}, {"sha": "f03c077cae1f13aacedace694110c8d9b4f5b177", "filename": "gcc/loop-init.cc", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Floop-init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Floop-init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.cc?ref=8caf155a3d6e23e47bf55068ad23c23d4655a054", "patch": "@@ -565,12 +565,10 @@ class pass_rtl_unroll_loops : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  bool gate (function *fun) final override\n+  bool gate (function *) final override\n     {\n-      return (flag_unroll_loops || flag_unroll_all_loops || cfun->has_unroll\n-\t      || (targetm.loop_unroll_adjust\n-\t\t  && optimize >= 2\n-\t\t  && optimize_function_for_speed_p (fun)));\n+      return (flag_unroll_loops || flag_unroll_all_loops\n+\t      || cfun->has_unroll);\n     }\n \n   unsigned int execute (function *) final override;\n@@ -586,8 +584,7 @@ pass_rtl_unroll_loops::execute (function *fun)\n       if (dump_file)\n \tdf_dump (dump_file);\n \n-      if (flag_unroll_loops\n-\t  || targetm.loop_unroll_adjust)\n+      if (flag_unroll_loops)\n \tflags |= UAP_UNROLL;\n       if (flag_unroll_all_loops)\n \tflags |= UAP_UNROLL_ALL;"}, {"sha": "1b1f6d32271b76a86351fc0c236a6e4acb6d55fd", "filename": "gcc/testsuite/gcc.dg/guality/loop-1.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Floop-1.c?ref=8caf155a3d6e23e47bf55068ad23c23d4655a054", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n /* { dg-options \"-fno-tree-scev-cprop -fno-tree-vectorize -g\" } */\n-/* { dg-additional-options \"-mno-unroll-only-small-loops\" { target ia32 } } */\n-\n \n #include \"../nop.h\"\n "}, {"sha": "98b012caf23c9d3915b2b943193dd6f5e3e63700", "filename": "gcc/testsuite/gcc.target/i386/pr86270.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86270.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86270.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86270.c?ref=8caf155a3d6e23e47bf55068ad23c23d4655a054", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mno-unroll-only-small-loops\" } */\n+/* { dg-options \"-O2 -fno-unroll-loops\" } */\n \n int *a;\n long len;"}, {"sha": "7e2d869e17b3a53c20e6926d1878968204fe5fe1", "filename": "gcc/testsuite/gcc.target/i386/pr93002.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93002.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8caf155a3d6e23e47bf55068ad23c23d4655a054/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93002.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93002.c?ref=8caf155a3d6e23e47bf55068ad23c23d4655a054", "patch": "@@ -1,6 +1,6 @@\n /* PR target/93002 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mno-unroll-only-small-loops\" } */\n+/* { dg-options \"-O2 -fno-unroll-loops\" } */\n /* { dg-final { scan-assembler-not \"cmp\\[^\\n\\r]*-1\" } } */\n \n volatile int sink;"}]}