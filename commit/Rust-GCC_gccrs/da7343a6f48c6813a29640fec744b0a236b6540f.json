{"sha": "da7343a6f48c6813a29640fec744b0a236b6540f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE3MzQzYTZmNDhjNjgxM2EyOTY0MGZlYzc0NGIwYTIzNmI2NTQwZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-10T11:02:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-03-10T11:32:03Z"}, "message": "Fix miscompilation of Ada runtime on 64-bit SPARC\n\nReturning a REGMODE_NATURAL_SIZE of 4 for DFmode in 64-bit mode is\njust asking for trouble because sub-word SUBREGs are always treated\ndifferently than the others, in particular by the register allocator.\n\ngcc/\n\t* config/sparc/sparc.c (sparc_regmode_natural_size): Return 4 for\n\tfloat and vector integer modes only if the mode is not larger.", "tree": {"sha": "e64e9e6be913d8c90467b51b6cf8328562552491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e64e9e6be913d8c90467b51b6cf8328562552491"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da7343a6f48c6813a29640fec744b0a236b6540f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7343a6f48c6813a29640fec744b0a236b6540f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7343a6f48c6813a29640fec744b0a236b6540f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7343a6f48c6813a29640fec744b0a236b6540f/comments", "author": null, "committer": null, "parents": [{"sha": "e7afb82c358855510aa90ae9869663b614a732cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7afb82c358855510aa90ae9869663b614a732cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7afb82c358855510aa90ae9869663b614a732cb"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "f15041720223285a7e2183d1f5bdbaf2ee9bc82e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7343a6f48c6813a29640fec744b0a236b6540f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7343a6f48c6813a29640fec744b0a236b6540f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=da7343a6f48c6813a29640fec744b0a236b6540f", "patch": "@@ -13585,23 +13585,18 @@ sparc_expand_vcond (machine_mode mode, rtx *operands, int ccode, int fcode)\n   emit_insn (gen_rtx_SET (operands[0], bshuf));\n }\n \n-/* On sparc, any mode which naturally allocates into the float\n+/* On the SPARC, any mode which naturally allocates into the single float\n    registers should return 4 here.  */\n \n unsigned int\n sparc_regmode_natural_size (machine_mode mode)\n {\n-  int size = UNITS_PER_WORD;\n+  const enum mode_class cl = GET_MODE_CLASS (mode);\n \n-  if (TARGET_ARCH64)\n-    {\n-      enum mode_class mclass = GET_MODE_CLASS (mode);\n-\n-      if (mclass == MODE_FLOAT || mclass == MODE_VECTOR_INT)\n-\tsize = 4;\n-    }\n+  if ((cl == MODE_FLOAT || cl == MODE_VECTOR_INT) && GET_MODE_SIZE (mode) <= 4)\n+    return 4;\n \n-  return size;\n+  return UNITS_PER_WORD;\n }\n \n /* Implement TARGET_HARD_REGNO_NREGS."}]}