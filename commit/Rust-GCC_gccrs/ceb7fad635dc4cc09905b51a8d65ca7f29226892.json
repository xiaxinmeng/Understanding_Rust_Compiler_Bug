{"sha": "ceb7fad635dc4cc09905b51a8d65ca7f29226892", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ViN2ZhZDYzNWRjNGNjMDk5MDViNTFhOGQ2NWNhN2YyOTIyNjg5Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-04-15T08:42:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-17T08:14:14Z"}, "message": "[Ada] Small cleanup throughout CStand body\n\n2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* cstand.adb (Stloc): Change to a renaming.\n\t(Staloc): Likewise.\n\t(Build_Unsigned_Integer_Type): Remove Nam parameter, use local\n\tconstants and do not call Make_Name.\n\t(Make_Dummy_Index): Use local constants.\n\t(Create_Standard): Pass the name of entities as parameter in\n\tcalls to New_Standard_Entity and remove calls to Make_Name.\n\tAdjust calls to Build_Unsigned_Integer_Type.\n\t(Identifier_For): Use local constant.\n\t(Make_Component): Pass the name of the component as parameter\n\tin call to New_Standard_Entity and remove call to Make_Name.\n\t(Make_Formal): Likewise.  Rename Formal_Name parameter into\n\tNam and use local constant.\n\t(Make_Name): Delete.\n\t(New_Operator): Use local constant.\n\t(New_Standard_Entity): Rename S parameter into Nam and build\n\tthe name here.  Remove call to Make_Name.\n\t(Register_Float_Type): Pass the name of the type as parameter\n\tin call to New_Standard_Entity and remove call to Make_Name.", "tree": {"sha": "5224b1d8292191b5cc44ba56b20fe76b086708b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5224b1d8292191b5cc44ba56b20fe76b086708b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceb7fad635dc4cc09905b51a8d65ca7f29226892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb7fad635dc4cc09905b51a8d65ca7f29226892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb7fad635dc4cc09905b51a8d65ca7f29226892", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb7fad635dc4cc09905b51a8d65ca7f29226892/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb52e9fe481fd7873fe030dada7626c972295afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb52e9fe481fd7873fe030dada7626c972295afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb52e9fe481fd7873fe030dada7626c972295afd"}], "stats": {"total": 187, "additions": 70, "deletions": 117}, "files": [{"sha": "71d40e995706496de9003fee28d5694c94f56c48", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 70, "deletions": 117, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb7fad635dc4cc09905b51a8d65ca7f29226892/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb7fad635dc4cc09905b51a8d65ca7f29226892/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=ceb7fad635dc4cc09905b51a8d65ca7f29226892", "patch": "@@ -48,8 +48,8 @@ with Urealp;   use Urealp;\n \n package body CStand is\n \n-   Stloc  : constant Source_Ptr := Standard_Location;\n-   Staloc : constant Source_Ptr := Standard_ASCII_Location;\n+   Stloc  : Source_Ptr renames Standard_Location;\n+   Staloc : Source_Ptr renames Standard_ASCII_Location;\n    --  Standard abbreviations used throughout this package\n \n    Back_End_Float_Types : Elist_Id := No_Elist;\n@@ -85,14 +85,11 @@ package body CStand is\n    --  is the size in bits. The corresponding base type is not built by\n    --  this routine but instead must be built by the caller where needed.\n \n-   procedure Build_Unsigned_Integer_Type\n-     (Uns : Entity_Id;\n-      Siz : Nat;\n-      Nam : String);\n+   procedure Build_Unsigned_Integer_Type (Uns : Entity_Id; Siz : Nat);\n    --  Procedure to build standard predefined unsigned integer subtype. These\n    --  subtypes are not user visible, but they are used internally. The first\n    --  parameter is the entity for the subtype. The second parameter is the\n-   --  size in bits. The third parameter is an identifying name.\n+   --  size in bits.\n \n    procedure Copy_Float_Type (To : Entity_Id; From : Entity_Id);\n    --  Build a floating point type, copying representation details from From.\n@@ -129,8 +126,8 @@ package body CStand is\n    --  These are not generally valid identifier names.\n \n    function Identifier_For (S : Standard_Entity_Type) return Node_Id;\n-   --  Returns an identifier node with the same name as the defining\n-   --  identifier corresponding to the given Standard_Entity_Type value\n+   --  Returns an identifier node with the same name as the defining identifier\n+   --  corresponding to the given Standard_Entity_Type value.\n \n    procedure Make_Component\n      (Rec : Entity_Id;\n@@ -139,27 +136,22 @@ package body CStand is\n    --  Build a record component with the given type and name, and append to\n    --  the list of components of Rec.\n \n-   function Make_Formal\n-     (Typ         : Entity_Id;\n-      Formal_Name : String) return Entity_Id;\n+   function Make_Formal (Typ : Entity_Id; Nam : String) return Entity_Id;\n    --  Construct entity for subprogram formal with given name and type\n \n    function Make_Integer (V : Uint) return Node_Id;\n    --  Builds integer literal with given value\n \n-   procedure Make_Name (Id : Entity_Id; Nam : String);\n-   --  Make an entry in the names table for Nam, and set as Chars field of Id\n-\n    function New_Operator (Op : Name_Id; Typ : Entity_Id) return Entity_Id;\n    --  Build entity for standard operator with given name and type\n \n    function New_Standard_Entity\n      (New_Node_Kind : Node_Kind := N_Defining_Identifier) return Entity_Id;\n    --  Builds a new entity for Standard\n \n-   function New_Standard_Entity (S : String) return Entity_Id;\n+   function New_Standard_Entity (Nam : String) return Entity_Id;\n    --  Builds a new entity for Standard with Nkind = N_Defining_Identifier,\n-   --  and Chars of this defining identifier set to the given string S.\n+   --  and Chars of this defining identifier set to the given string Nam.\n \n    procedure Print_Standard;\n    --  Print representation of package Standard if switch set\n@@ -268,16 +260,13 @@ package body CStand is\n \n    procedure Build_Unsigned_Integer_Type\n      (Uns : Entity_Id;\n-      Siz : Nat;\n-      Nam : String)\n+      Siz : Nat)\n    is\n-      Decl   : Node_Id;\n-      R_Node : Node_Id;\n+      Decl   : constant Node_Id := New_Node (N_Full_Type_Declaration, Stloc);\n+      R_Node : constant Node_Id := New_Node (N_Range, Stloc);\n \n    begin\n-      Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Uns);\n-      Make_Name (Uns, Nam);\n \n       Set_Ekind                      (Uns, E_Modular_Integer_Type);\n       Set_Scope                      (Uns, Standard_Standard);\n@@ -289,7 +278,6 @@ package body CStand is\n       Set_Size_Known_At_Compile_Time (Uns);\n       Set_Is_Known_Valid             (Uns, True);\n \n-      R_Node := New_Node (N_Range, Stloc);\n       Set_Low_Bound  (R_Node, Make_Integer (Uint_0));\n       Set_High_Bound (R_Node, Make_Integer (Modulus (Uns) - 1));\n       Set_Etype (Low_Bound  (R_Node), Uns);\n@@ -553,20 +541,18 @@ package body CStand is\n       ----------------------\n \n       procedure Make_Dummy_Index (E : Entity_Id) is\n-         Index : Node_Id;\n-         Dummy : List_Id;\n-\n-      begin\n-         Index :=\n+         Index : constant Node_Id :=\n            Make_Range (Sloc (E),\n              Low_Bound  => Make_Integer (Uint_0),\n              High_Bound => Make_Integer (Uint_2 ** Standard_Integer_Size));\n-         Set_Etype (Index, Standard_Integer);\n-         Set_First_Index (E, Index);\n \n          --  Make sure Index is a list as required, so Next_Index is Empty\n \n-         Dummy := New_List (Index);\n+         Dummy : constant List_Id := New_List (Index);\n+\n+      begin\n+         Set_Etype (Index, Standard_Integer);\n+         Set_First_Index (E, Index);\n       end Make_Dummy_Index;\n \n       ----------------------\n@@ -581,6 +567,7 @@ package body CStand is\n                New_List (\n                  Make_Pragma_Argument_Association (Stloc,\n                    Expression => New_Occurrence_Of (String_Type, Stloc))));\n+\n       begin\n          Append (Prag, Decl_S);\n          Record_Rep_Item (String_Type, Prag);\n@@ -601,8 +588,7 @@ package body CStand is\n             --  Defining identifier node\n \n          begin\n-            Ident_Node := New_Standard_Entity;\n-            Make_Name (Ident_Node, S_Name (3 .. S_Name'Length));\n+            Ident_Node := New_Standard_Entity (S_Name (3 .. S_Name'Length));\n             Standard_Entity (S) := Ident_Node;\n          end;\n       end loop;\n@@ -1110,11 +1096,10 @@ package body CStand is\n \n       --  Create semantic phase entities\n \n-      Standard_Void_Type := New_Standard_Entity;\n+      Standard_Void_Type := New_Standard_Entity (\"_void_type\");\n       Set_Ekind       (Standard_Void_Type, E_Void);\n       Set_Etype       (Standard_Void_Type, Standard_Void_Type);\n       Set_Scope       (Standard_Void_Type, Standard_Standard);\n-      Make_Name       (Standard_Void_Type, \"_void_type\");\n \n       --  The type field of packages is set to void\n \n@@ -1124,7 +1109,7 @@ package body CStand is\n       --  Standard_A_String is actually used in generated code, so it has a\n       --  type name that is reasonable, but does not overlap any Ada name.\n \n-      Standard_A_String := New_Standard_Entity;\n+      Standard_A_String := New_Standard_Entity (\"access_string\");\n       Set_Ekind      (Standard_A_String, E_Access_Type);\n       Set_Scope      (Standard_A_String, Standard_Standard);\n       Set_Etype      (Standard_A_String, Standard_A_String);\n@@ -1139,24 +1124,22 @@ package body CStand is\n \n       Set_Directly_Designated_Type\n                      (Standard_A_String, Standard_String);\n-      Make_Name      (Standard_A_String, \"access_string\");\n \n-      Standard_A_Char := New_Standard_Entity;\n+      Standard_A_Char := New_Standard_Entity (\"access_character\");\n       Set_Ekind          (Standard_A_Char, E_Access_Type);\n       Set_Scope          (Standard_A_Char, Standard_Standard);\n       Set_Etype          (Standard_A_Char, Standard_A_String);\n       Init_Size          (Standard_A_Char, System_Address_Size);\n       Set_Elem_Alignment (Standard_A_Char);\n \n       Set_Directly_Designated_Type (Standard_A_Char, Standard_Character);\n-      Make_Name     (Standard_A_Char, \"access_character\");\n \n       --  Standard_Debug_Renaming_Type is used for the special objects created\n       --  to encode the names occurring in renaming declarations for use by the\n       --  debugger (see exp_dbug.adb). The type is a zero-sized subtype of\n       --  Standard.Integer.\n \n-      Standard_Debug_Renaming_Type := New_Standard_Entity;\n+      Standard_Debug_Renaming_Type := New_Standard_Entity (\"_renaming_type\");\n \n       Set_Ekind (Standard_Debug_Renaming_Type, E_Signed_Integer_Subtype);\n       Set_Scope (Standard_Debug_Renaming_Type, Standard_Standard);\n@@ -1171,8 +1154,6 @@ package body CStand is\n       Set_Is_Constrained  (Standard_Debug_Renaming_Type);\n       Set_Has_Size_Clause (Standard_Debug_Renaming_Type);\n \n-      Make_Name           (Standard_Debug_Renaming_Type, \"_renaming_type\");\n-\n       --  Note on type names. The type names for the following special types\n       --  are constructed so that they will look reasonable should they ever\n       --  appear in error messages etc, although in practice the use of the\n@@ -1341,77 +1322,65 @@ package body CStand is\n       --  used internally. They are unsigned types with the same length as\n       --  the correspondingly named signed integer types.\n \n-      Standard_Short_Short_Unsigned := New_Standard_Entity;\n+      Standard_Short_Short_Unsigned\n+        := New_Standard_Entity (\"short_short_unsigned\");\n       Build_Unsigned_Integer_Type\n-        (Standard_Short_Short_Unsigned,\n-         Standard_Short_Short_Integer_Size,\n-         \"short_short_unsigned\");\n+        (Standard_Short_Short_Unsigned, Standard_Short_Short_Integer_Size);\n \n-      Standard_Short_Unsigned := New_Standard_Entity;\n+      Standard_Short_Unsigned := New_Standard_Entity (\"short_unsigned\");\n       Build_Unsigned_Integer_Type\n-        (Standard_Short_Unsigned,\n-         Standard_Short_Integer_Size,\n-         \"short_unsigned\");\n+        (Standard_Short_Unsigned, Standard_Short_Integer_Size);\n \n-      Standard_Unsigned := New_Standard_Entity;\n+      Standard_Unsigned := New_Standard_Entity (\"unsigned\");\n       Build_Unsigned_Integer_Type\n-        (Standard_Unsigned,\n-         Standard_Integer_Size,\n-         \"unsigned\");\n+        (Standard_Unsigned, Standard_Integer_Size);\n \n-      Standard_Long_Unsigned := New_Standard_Entity;\n+      Standard_Long_Unsigned := New_Standard_Entity (\"long_unsigned\");\n       Build_Unsigned_Integer_Type\n-        (Standard_Long_Unsigned,\n-         Standard_Long_Integer_Size,\n-         \"long_unsigned\");\n+        (Standard_Long_Unsigned, Standard_Long_Integer_Size);\n \n-      Standard_Long_Long_Unsigned := New_Standard_Entity;\n+      Standard_Long_Long_Unsigned\n+        := New_Standard_Entity (\"long_long_unsigned\");\n       Build_Unsigned_Integer_Type\n-        (Standard_Long_Long_Unsigned,\n-         Standard_Long_Long_Integer_Size,\n-         \"long_long_unsigned\");\n+        (Standard_Long_Long_Unsigned, Standard_Long_Long_Integer_Size);\n \n       --  Standard_Unsigned_64 is not user visible, but is used internally. It\n       --  is an unsigned type mod 2**64 with 64 bits size.\n \n-      Standard_Unsigned_64 := New_Standard_Entity;\n-      Build_Unsigned_Integer_Type (Standard_Unsigned_64, 64, \"unsigned_64\");\n+      Standard_Unsigned_64 := New_Standard_Entity (\"unsigned_64\");\n+      Build_Unsigned_Integer_Type (Standard_Unsigned_64, 64);\n \n       --  Standard_Address is not user visible, but is used internally. It is\n       --  an unsigned type mod 2**System_Address_Size with System.Address size.\n \n-      Standard_Address := New_Standard_Entity;\n-      Build_Unsigned_Integer_Type\n-        (Standard_Address, System_Address_Size, \"standard_address\");\n+      Standard_Address := New_Standard_Entity (\"standard_address\");\n+      Build_Unsigned_Integer_Type (Standard_Address, System_Address_Size);\n \n       --  Note: universal integer and universal real are constructed as fully\n       --  formed signed numeric types, with parameters corresponding to the\n       --  longest runtime types (Long_Long_Integer and Long_Long_Float). This\n       --  allows Gigi to properly process references to universal types that\n       --  are not folded at compile time.\n \n-      Universal_Integer := New_Standard_Entity;\n+      Universal_Integer := New_Standard_Entity (\"universal_integer\");\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Universal_Integer);\n-      Make_Name (Universal_Integer, \"universal_integer\");\n       Set_Scope (Universal_Integer, Standard_Standard);\n       Build_Signed_Integer_Type\n         (Universal_Integer, Standard_Long_Long_Integer_Size);\n \n-      Universal_Real := New_Standard_Entity;\n+      Universal_Real := New_Standard_Entity (\"universal_real\");\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Universal_Real);\n-      Make_Name (Universal_Real, \"universal_real\");\n       Set_Scope (Universal_Real, Standard_Standard);\n       Copy_Float_Type (Universal_Real, Standard_Long_Long_Float);\n \n       --  Note: universal fixed, unlike universal integer and universal real,\n       --  is never used at runtime, so it does not need to have bounds set.\n \n-      Universal_Fixed := New_Standard_Entity;\n+      Universal_Fixed := New_Standard_Entity (\"universal_fixed\");\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Universal_Fixed);\n-      Make_Name            (Universal_Fixed, \"universal_fixed\");\n       Set_Ekind            (Universal_Fixed, E_Ordinary_Fixed_Point_Type);\n       Set_Etype            (Universal_Fixed, Universal_Fixed);\n       Set_Scope            (Universal_Fixed, Standard_Standard);\n@@ -1502,7 +1471,7 @@ package body CStand is\n       --  known by the run-time. Components of the record are documented in\n       --  the declaration in System.Standard_Library.\n \n-      Standard_Exception_Type := New_Standard_Entity;\n+      Standard_Exception_Type := New_Standard_Entity (\"exception\");\n       Set_Ekind       (Standard_Exception_Type, E_Record_Type);\n       Set_Etype       (Standard_Exception_Type, Standard_Exception_Type);\n       Set_Scope       (Standard_Exception_Type, Standard_Standard);\n@@ -1511,7 +1480,6 @@ package body CStand is\n       Init_Size_Align (Standard_Exception_Type);\n       Set_Size_Known_At_Compile_Time\n                       (Standard_Exception_Type, True);\n-      Make_Name       (Standard_Exception_Type, \"exception\");\n \n       Make_Component\n         (Standard_Exception_Type, Standard_Boolean,   \"Not_Handled_By_Others\");\n@@ -1703,19 +1671,19 @@ package body CStand is\n          Set_Etype (Low_Bound  (Scalar_Range (E)), New_Ent);\n          Set_Etype (High_Bound (Scalar_Range (E)), New_Ent);\n       end if;\n-\n    end Create_Unconstrained_Base_Type;\n \n    --------------------\n    -- Identifier_For --\n    --------------------\n \n    function Identifier_For (S : Standard_Entity_Type) return Node_Id is\n-      Ident_Node : Node_Id;\n+      Ident_Node : constant Node_Id := New_Node (N_Identifier, Stloc);\n+\n    begin\n-      Ident_Node := New_Node (N_Identifier, Stloc);\n       Set_Chars (Ident_Node, Chars (Standard_Entity (S)));\n       Set_Entity (Ident_Node, Standard_Entity (S));\n+\n       return Ident_Node;\n    end Identifier_For;\n \n@@ -1728,37 +1696,29 @@ package body CStand is\n       Typ : Entity_Id;\n       Nam : String)\n    is\n-      Id : constant Entity_Id := New_Standard_Entity;\n+      Id : constant Entity_Id := New_Standard_Entity (Nam);\n \n    begin\n-      Set_Ekind                 (Id, E_Component);\n-      Set_Etype                 (Id, Typ);\n-      Set_Scope                 (Id, Rec);\n-      Init_Component_Location   (Id);\n-\n+      Set_Ekind                     (Id, E_Component);\n+      Set_Etype                     (Id, Typ);\n+      Set_Scope                     (Id, Rec);\n+      Init_Component_Location       (Id);\n       Set_Original_Record_Component (Id, Id);\n-      Make_Name (Id, Nam);\n       Append_Entity (Id, Rec);\n    end Make_Component;\n \n    -----------------\n    -- Make_Formal --\n    -----------------\n \n-   function Make_Formal\n-     (Typ         : Entity_Id;\n-      Formal_Name : String) return Entity_Id\n-   is\n-      Formal : Entity_Id;\n+   function Make_Formal (Typ : Entity_Id; Nam : String) return Entity_Id is\n+      Formal : constant Entity_Id := New_Standard_Entity (Nam);\n \n    begin\n-      Formal := New_Standard_Entity;\n-\n       Set_Ekind     (Formal, E_In_Parameter);\n       Set_Mechanism (Formal, Default_Mechanism);\n       Set_Scope     (Formal, Standard_Standard);\n       Set_Etype     (Formal, Typ);\n-      Make_Name     (Formal, Formal_Name);\n \n       return Formal;\n    end Make_Formal;\n@@ -1769,47 +1729,34 @@ package body CStand is\n \n    function Make_Integer (V : Uint) return Node_Id is\n       N : constant Node_Id := Make_Integer_Literal (Stloc, V);\n+\n    begin\n       Set_Is_Static_Expression (N);\n+\n       return N;\n    end Make_Integer;\n \n-   ---------------\n-   -- Make_Name --\n-   ---------------\n-\n-   procedure Make_Name (Id : Entity_Id; Nam : String) is\n-   begin\n-      for J in 1 .. Nam'Length loop\n-         Name_Buffer (J) := Fold_Lower (Nam (Nam'First + (J - 1)));\n-      end loop;\n-\n-      Name_Len := Nam'Length;\n-      Set_Chars (Id, Name_Find);\n-   end Make_Name;\n-\n    ------------------\n    -- New_Operator --\n    ------------------\n \n    function New_Operator (Op : Name_Id; Typ : Entity_Id) return Entity_Id is\n-      Ident_Node : Entity_Id;\n+      Ident_Node : constant Entity_Id := Make_Defining_Identifier (Stloc, Op);\n \n    begin\n-      Ident_Node := Make_Defining_Identifier (Stloc, Op);\n-\n       Set_Is_Pure    (Ident_Node, True);\n       Set_Ekind      (Ident_Node, E_Operator);\n       Set_Etype      (Ident_Node, Typ);\n       Set_Scope      (Ident_Node, Standard_Standard);\n       Set_Homonym    (Ident_Node, Get_Name_Entity_Id (Op));\n       Set_Convention (Ident_Node, Convention_Intrinsic);\n \n-      Set_Is_Immediately_Visible   (Ident_Node, True);\n-      Set_Is_Intrinsic_Subprogram  (Ident_Node, True);\n+      Set_Is_Immediately_Visible  (Ident_Node, True);\n+      Set_Is_Intrinsic_Subprogram (Ident_Node, True);\n \n       Set_Name_Entity_Id (Op, Ident_Node);\n       Append_Entity (Ident_Node, Standard_Standard);\n+\n       return Ident_Node;\n    end New_Operator;\n \n@@ -1847,10 +1794,17 @@ package body CStand is\n       return E;\n    end New_Standard_Entity;\n \n-   function New_Standard_Entity (S : String) return Entity_Id is\n+   function New_Standard_Entity (Nam : String) return Entity_Id is\n       Ent : constant Entity_Id := New_Standard_Entity;\n+\n    begin\n-      Make_Name (Ent, S);\n+      for J in 1 .. Nam'Length loop\n+         Name_Buffer (J) := Fold_Lower (Nam (Nam'First + (J - 1)));\n+      end loop;\n+\n+      Name_Len := Nam'Length;\n+      Set_Chars (Ent, Name_Find);\n+\n       return Ent;\n    end New_Standard_Entity;\n \n@@ -2085,11 +2039,10 @@ package body CStand is\n       pragma Unreferenced (Precision);\n       --  See Build_Float_Type for the rationale\n \n-      Ent : constant Entity_Id := New_Standard_Entity;\n+      Ent : constant Entity_Id := New_Standard_Entity (Name);\n \n    begin\n       Set_Defining_Identifier (New_Node (N_Full_Type_Declaration, Stloc), Ent);\n-      Make_Name (Ent, Name);\n       Set_Scope (Ent, Standard_Standard);\n       Build_Float_Type\n         (Ent, Pos (Digs), Float_Rep, Int (Size), Int (Alignment / 8));"}]}