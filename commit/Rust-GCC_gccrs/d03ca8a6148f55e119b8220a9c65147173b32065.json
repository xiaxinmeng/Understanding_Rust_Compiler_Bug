{"sha": "d03ca8a6148f55e119b8220a9c65147173b32065", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAzY2E4YTYxNDhmNTVlMTE5YjgyMjBhOWM2NTE0NzE3M2IzMjA2NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-04-29T13:24:51Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-04-29T13:25:39Z"}, "message": "i386: Cleanup comparison predicates.\n\nCCCmode is allowed only with GEU and LTU comparison codes.  Also allow\nCCGZmode for these two codes.  There is no need to check for trivial FP\ncomparison operator, ix86_fp_compare_code_to_integer will return\nUNKNOWN code for unsupported operators.\n\n2021-04-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* config/i386/predicates.md (fcmov_comparison_operator):\n\tDo not check for trivial FP comparison operator.\n\t<case GEU, case LTU>: Allow CCGZmode.\n\t<case GTU, case LEU>: Do not allow CCCmode.\n\t(ix86_comparison_operator) <case GTU, case LEU>: Allow only CCmode.\n\t(ix86_carry_flag_operator): Match only LTU and UNLT code.\n\tDo not check for trivial FP comparison operator.  Allow CCGZmode.", "tree": {"sha": "34f03b9e4ea194fe7cac42bdeacf0a5ebf97e942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34f03b9e4ea194fe7cac42bdeacf0a5ebf97e942"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d03ca8a6148f55e119b8220a9c65147173b32065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03ca8a6148f55e119b8220a9c65147173b32065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d03ca8a6148f55e119b8220a9c65147173b32065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03ca8a6148f55e119b8220a9c65147173b32065/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc14ff611181c274584c7963bc597a6ca50c20a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc14ff611181c274584c7963bc597a6ca50c20a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc14ff611181c274584c7963bc597a6ca50c20a1"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "04a03a70b46ccf686fcfe7cc5b610354bed759f9", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d03ca8a6148f55e119b8220a9c65147173b32065/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d03ca8a6148f55e119b8220a9c65147173b32065/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=d03ca8a6148f55e119b8220a9c65147173b32065", "patch": "@@ -1352,16 +1352,17 @@\n   enum rtx_code code = GET_CODE (op);\n \n   if (inmode == CCFPmode)\n-    {\n-      if (!ix86_trivial_fp_comparison_operator (op, mode))\n-\treturn false;\n-      code = ix86_fp_compare_code_to_integer (code);\n-    }\n+    code = ix86_fp_compare_code_to_integer (code);\n+\n   /* i387 supports just limited amount of conditional codes.  */\n   switch (code)\n     {\n-    case LTU: case GTU: case LEU: case GEU:\n-      if (inmode == CCmode || inmode == CCFPmode || inmode == CCCmode)\n+    case GEU: case LTU:\n+      if (inmode == CCCmode || inmode == CCGZmode)\n+\treturn true;\n+      /* FALLTHRU */\n+    case GTU: case LEU:\n+      if (inmode == CCmode || inmode == CCFPmode)\n \treturn true;\n       return false;\n     case ORDERED: case UNORDERED:\n@@ -1418,11 +1419,11 @@\n \treturn true;\n       return false;\n     case GEU: case LTU:\n-      if (inmode == CCGZmode)\n+      if (inmode == CCCmode || inmode == CCGZmode)\n \treturn true;\n       /* FALLTHRU */\n     case GTU: case LEU:\n-      if (inmode == CCmode || inmode == CCCmode || inmode == CCGZmode)\n+      if (inmode == CCmode)\n \treturn true;\n       return false;\n     case ORDERED: case UNORDERED:\n@@ -1441,20 +1442,14 @@\n ;; Return true if OP is a valid comparison operator\n ;; testing carry flag to be set.\n (define_predicate \"ix86_carry_flag_operator\"\n-  (match_code \"ltu,lt,unlt,gtu,gt,ungt,le,unle,ge,unge,ltgt,uneq\")\n+  (match_code \"ltu,unlt\")\n {\n   machine_mode inmode = GET_MODE (XEXP (op, 0));\n   enum rtx_code code = GET_CODE (op);\n \n   if (inmode == CCFPmode)\n-    {\n-      if (!ix86_trivial_fp_comparison_operator (op, mode))\n-\treturn false;\n-      code = ix86_fp_compare_code_to_integer (code);\n-    }\n-  else if (inmode == CCCmode)\n-   return code == LTU || code == GTU;\n-  else if (inmode != CCmode)\n+    code = ix86_fp_compare_code_to_integer (code);\n+  else if (inmode != CCmode && inmode != CCCmode && inmode != CCGZmode)\n     return false;\n \n   return code == LTU;"}]}