{"sha": "1f400bbb8f014c3259d65d03a119a49589c76348", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY0MDBiYmI4ZjAxNGMzMjU5ZDY1ZDAzYTExOWE0OTU4OWM3NjM0OA==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2005-08-14T06:28:03Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2005-08-14T06:28:03Z"}, "message": "re PR tree-optimization/23320 (ICE in in base_addr_differ_p, at tree-data-ref.c:430)\n\n        PR tree-optimization/23320\n        * tree-data-ref.c (base_addr_differ_p): Add comment. Check\n        data-refs' types instead of base object nullness. Add check for\n        pointer type data-refs before first location comparison. Remove\n        assert.\n\nFrom-SVN: r103076", "tree": {"sha": "0d4d332f3475a4d9960abdcf023f02034f12da11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d4d332f3475a4d9960abdcf023f02034f12da11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f400bbb8f014c3259d65d03a119a49589c76348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f400bbb8f014c3259d65d03a119a49589c76348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f400bbb8f014c3259d65d03a119a49589c76348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f400bbb8f014c3259d65d03a119a49589c76348/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d465f1def2bcd4bfbb3dcfe2a793653b7304ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d465f1def2bcd4bfbb3dcfe2a793653b7304ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d465f1def2bcd4bfbb3dcfe2a793653b7304ed9"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "028dfc748489aeae691ba6a12f6895fc2fb5dc20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f400bbb8f014c3259d65d03a119a49589c76348/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f400bbb8f014c3259d65d03a119a49589c76348/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f400bbb8f014c3259d65d03a119a49589c76348", "patch": "@@ -1,3 +1,11 @@\n+2005-08-14  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/23320\n+\t* tree-data-ref.c (base_addr_differ_p): Add comment. Check \n+\tdata-refs' types instead of base object nullness. Add check for \n+\tpointer type data-refs before first location comparison. Remove \n+\tassert.\n+\n 2005-08-14  Andreas Schwab  <schwab@suse.de>\n \n \t* doc/md.texi (Machine Constraints): Fix misplaced @end table."}, {"sha": "24856eda9563b9381d9ad45804241b76a620e138", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f400bbb8f014c3259d65d03a119a49589c76348/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f400bbb8f014c3259d65d03a119a49589c76348/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=1f400bbb8f014c3259d65d03a119a49589c76348", "patch": "@@ -384,11 +384,18 @@ base_object_differ_p (struct data_reference *a,\n /* Function base_addr_differ_p.\n \n    This is the simplest data dependence test: determines whether the\n-   data references A and B access the same array/region.  Returns\n+   data references DRA and DRB access the same array/region.  Returns\n    false when the property is not computable at compile time.\n-   Otherwise return true, and DIFFER_P will record the result. This\n-   utility will not be necessary when alias_sets_conflict_p will be\n-   less conservative.  */\n+   Otherwise return true, and DIFFER_P will record the result.\n+\n+   The algorithm:   \n+   1. if (both DRA and DRB are represented as arrays)\n+          compare DRA.BASE_OBJECT and DRB.BASE_OBJECT\n+   2. else if (both DRA and DRB are represented as pointers)\n+          try to prove that DRA.FIRST_LOCATION == DRB.FIRST_LOCATION\n+   3. else if (DRA and DRB are represented differently or 2. fails)\n+          only try to prove that the bases are surely different\n+*/\n \n \n static bool\n@@ -409,26 +416,27 @@ base_addr_differ_p (struct data_reference *dra,\n \n   gcc_assert (POINTER_TYPE_P (type_a) &&  POINTER_TYPE_P (type_b));\n   \n-  /* Compare base objects first if possible. If DR_BASE_OBJECT is NULL, it means\n-     that the data-ref is of INDIRECT_REF, and alias analysis will be applied to \n-     reveal the dependence.  */\n-  if (DR_BASE_OBJECT (dra) && DR_BASE_OBJECT (drb))\n+  /* 1. if (both DRA and DRB are represented as arrays)\n+            compare DRA.BASE_OBJECT and DRB.BASE_OBJECT.  */\n+  if (DR_TYPE (dra) == ARRAY_REF_TYPE && DR_TYPE (drb) == ARRAY_REF_TYPE)\n     return base_object_differ_p (dra, drb, differ_p);\n \n+\n+  /* 2. else if (both DRA and DRB are represented as pointers)\n+\t    try to prove that DRA.FIRST_LOCATION == DRB.FIRST_LOCATION.  */\n   /* If base addresses are the same, we check the offsets, since the access of \n      the data-ref is described by {base addr + offset} and its access function,\n      i.e., in order to decide whether the bases of data-refs are the same we \n      compare both base addresses and offsets.  */\n-  if (addr_a == addr_b \n-      || (TREE_CODE (addr_a) == ADDR_EXPR && TREE_CODE (addr_b) == ADDR_EXPR\n-         && TREE_OPERAND (addr_a, 0) == TREE_OPERAND (addr_b, 0)))\n+  if (DR_TYPE (dra) == POINTER_REF_TYPE && DR_TYPE (drb) == POINTER_REF_TYPE\n+      && (addr_a == addr_b \n+\t  || (TREE_CODE (addr_a) == ADDR_EXPR && TREE_CODE (addr_b) == ADDR_EXPR\n+\t      && TREE_OPERAND (addr_a, 0) == TREE_OPERAND (addr_b, 0))))\n     {\n       /* Compare offsets.  */\n       tree offset_a = DR_OFFSET (dra); \n       tree offset_b = DR_OFFSET (drb);\n       \n-      gcc_assert (!DR_BASE_OBJECT (dra) && !DR_BASE_OBJECT (drb));\n-\n       STRIP_NOPS (offset_a);\n       STRIP_NOPS (offset_b);\n \n@@ -445,6 +453,9 @@ base_addr_differ_p (struct data_reference *dra,\n \t}\n     }\n \n+  /*  3. else if (DRA and DRB are represented differently or 2. fails) \n+              only try to prove that the bases are surely different.  */\n+\n   /* Apply alias analysis.  */\n   if (may_alias_p (addr_a, addr_b, dra, drb, &aliased) && !aliased)\n     {"}]}