{"sha": "e55096f0ce036bb3c694c0b3662dc36b149e57bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU1MDk2ZjBjZTAzNmJiM2M2OTRjMGIzNjYyZGMzNmIxNDllNTdiZA==", "commit": {"author": {"name": "Joachim Kuebart", "email": "kuebart@mathematik.uni-ulm.de", "date": "2004-10-11T08:19:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-11T08:19:35Z"}, "message": "pool_allocator.cc (__pool_alloc_base::_M_allocate_chunk): Deal properly with exceptions thrown by ::operator new(size_t).\n\n2004-10-11  Joachim Kuebart  <kuebart@mathematik.uni-ulm.de>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\t* src/pool_allocator.cc (__pool_alloc_base::_M_allocate_chunk):\n\tDeal properly with exceptions thrown by ::operator new(size_t).\n\t* testsuite/ext/pool_allocator/allocate_chunk.cc: New.\n\n\t* include/ext/pool_allocator.h: Include <cstdlib>.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r88872", "tree": {"sha": "1fccc1bbed722203c613963a29a7d6c90b490dd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fccc1bbed722203c613963a29a7d6c90b490dd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e55096f0ce036bb3c694c0b3662dc36b149e57bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55096f0ce036bb3c694c0b3662dc36b149e57bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e55096f0ce036bb3c694c0b3662dc36b149e57bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55096f0ce036bb3c694c0b3662dc36b149e57bd/comments", "author": null, "committer": null, "parents": [{"sha": "d90aed0dc6fd1b91075b9ab284da91bafc4b968b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d90aed0dc6fd1b91075b9ab284da91bafc4b968b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d90aed0dc6fd1b91075b9ab284da91bafc4b968b"}], "stats": {"total": 88, "additions": 81, "deletions": 7}, "files": [{"sha": "f2c29aab2313c313239532b1d74d8ef2656c1188", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55096f0ce036bb3c694c0b3662dc36b149e57bd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55096f0ce036bb3c694c0b3662dc36b149e57bd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e55096f0ce036bb3c694c0b3662dc36b149e57bd", "patch": "@@ -1,3 +1,12 @@\n+2004-10-11  Joachim Kuebart  <kuebart@mathematik.uni-ulm.de>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* src/pool_allocator.cc (__pool_alloc_base::_M_allocate_chunk):\n+\tDeal properly with exceptions thrown by ::operator new(size_t).\n+\t* testsuite/ext/pool_allocator/allocate_chunk.cc: New.\n+\n+\t* include/ext/pool_allocator.h: Include <cstdlib>.\n+\n 2004-10-10  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/functexcept.h: Add guards."}, {"sha": "0f087a03c1e90968319d3b4c15bccbb606e32097", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55096f0ce036bb3c694c0b3662dc36b149e57bd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55096f0ce036bb3c694c0b3662dc36b149e57bd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=e55096f0ce036bb3c694c0b3662dc36b149e57bd", "patch": "@@ -48,6 +48,7 @@\n #define _POOL_ALLOCATOR_H 1\n \n #include <bits/c++config.h>\n+#include <cstdlib>\n #include <new>\n #include <bits/functexcept.h>\n #include <bits/atomicity.h>"}, {"sha": "731cfffa0ea40110a3d42a306d3e0932bd6f6a2a", "filename": "libstdc++-v3/src/pool_allocator.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55096f0ce036bb3c694c0b3662dc36b149e57bd/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55096f0ce036bb3c694c0b3662dc36b149e57bd/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc?ref=e55096f0ce036bb3c694c0b3662dc36b149e57bd", "patch": "@@ -90,8 +90,11 @@ namespace __gnu_cxx\n \t\n \tsize_t __bytes_to_get = (2 * __total_bytes\n \t\t\t\t + _M_round_up(_S_heap_size >> 4));\n-\t_S_start_free = static_cast<char*>(::operator new(__bytes_to_get));\n-\tif (_S_start_free == 0)\n+\ttry\n+\t  {\n+\t    _S_start_free = static_cast<char*>(::operator new(__bytes_to_get));\n+\t  }\n+\tcatch (...)\n \t  {\n \t    // Try to make do with what we have.  That can't hurt.  We\n \t    // do not try smaller requests, since that tends to result\n@@ -111,11 +114,9 @@ namespace __gnu_cxx\n \t\t    // right free list.\n \t\t  }\n \t      }\n-\t    _S_end_free = 0;        // In case of exception.\n-\n-\t    // This should either throw an exception or remedy the situation.\n-\t    // Thus we assume it succeeded.\n-\t    _S_start_free = static_cast<char*>(::operator new(__bytes_to_get));\n+\t    // What we have wasn't enough.  Rethrow.\n+\t    _S_start_free = _S_end_free = 0;   // We have no chunk.\n+\t    __throw_exception_again;\n \t  }\n \t_S_heap_size += __bytes_to_get;\n \t_S_end_free = _S_start_free + __bytes_to_get;"}, {"sha": "ab436212688bce6423bc82a7878d3fc3a467a655", "filename": "libstdc++-v3/testsuite/ext/pool_allocator/allocate_chunk.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55096f0ce036bb3c694c0b3662dc36b149e57bd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fallocate_chunk.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55096f0ce036bb3c694c0b3662dc36b149e57bd/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fallocate_chunk.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fallocate_chunk.cc?ref=e55096f0ce036bb3c694c0b3662dc36b149e57bd", "patch": "@@ -0,0 +1,63 @@\n+// 2004-10-10  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/pool_allocator.h>\n+\n+struct small\n+{\n+  char c[16];\n+};\n+\n+struct big\n+{\n+  char c[64];\n+};\n+\n+void*\n+operator new(size_t n) throw(std::bad_alloc)\n+{\n+  static bool first = true;\n+  if (!first)\n+    throw std::bad_alloc();\n+  first = false;\n+  return std::malloc(n);\n+}\n+\n+// http://gcc.gnu.org/ml/libstdc++/2004-10/msg00098.html\n+void test01()\n+{\n+  using __gnu_cxx::__pool_alloc;\n+\n+  __pool_alloc<big> alloc_big;\n+  alloc_big.allocate(1);\n+\n+  // The constant 20 comes from __pool_alloc_base::_M_refill. See\n+  // also __pool_alloc_base::_M_allocate_chunk.\n+  __pool_alloc<small> alloc_small;\n+  for (int i = 0; i < 20 * sizeof(big) / sizeof(small) + 1; ++i)\n+    alloc_small.allocate(1);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}