{"sha": "14fdc6134e2a667f631cf91941402aaf09ffc24d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRmZGM2MTM0ZTJhNjY3ZjYzMWNmOTE5NDE0MDJhYWYwOWZmYzI0ZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2009-04-02T20:45:26Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2009-04-02T20:45:26Z"}, "message": "[PATCH, committed] Add -save-temps=obj, PR 39293\n\nFrom-SVN: r145470", "tree": {"sha": "a1bf78807a1ba33fc1076ae4a3406af0080a11b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1bf78807a1ba33fc1076ae4a3406af0080a11b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14fdc6134e2a667f631cf91941402aaf09ffc24d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14fdc6134e2a667f631cf91941402aaf09ffc24d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14fdc6134e2a667f631cf91941402aaf09ffc24d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14fdc6134e2a667f631cf91941402aaf09ffc24d/comments", "author": null, "committer": null, "parents": [{"sha": "9fabb197c5515193874df456a3cd1dbcfe741c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fabb197c5515193874df456a3cd1dbcfe741c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fabb197c5515193874df456a3cd1dbcfe741c3c"}], "stats": {"total": 177, "additions": 143, "deletions": 34}, "files": [{"sha": "3c1ed8f11a1112e73d5a3a8ee22e7bd11bd27dcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14fdc6134e2a667f631cf91941402aaf09ffc24d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14fdc6134e2a667f631cf91941402aaf09ffc24d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14fdc6134e2a667f631cf91941402aaf09ffc24d", "patch": "@@ -1,3 +1,19 @@\n+2009-04-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR driver/39293\n+\t* gcc.c (save_temps_flag): Add support for -save-temps=obj.\n+\t(cpp_options): Ditto.\n+\t(default_compilers): Ditto.\n+\t(display_help): Ditto.\n+\t(process_command): Ditto.\n+\t(do_spec_1): Ditto.\n+\t(set_input): Use lbasename instead of duplicate code.\n+\t(save_temps_prefix): New static for -save-temps=obj.\n+\t(save_temps_length): Ditto.\n+\t\n+\t* doc/invoke.texi (-save-temps=obj): Document new variant to\n+\t-save-temps switch.\n+\n 2009-04-02  Jeff Law  <law@redhat.com>\n \n \t* reload1.c (fixup_eh_region_notes): Remove write-only \"trap_count\""}, {"sha": "6680389364d239fd7281bfc02ee0f0f06d82abb9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14fdc6134e2a667f631cf91941402aaf09ffc24d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14fdc6134e2a667f631cf91941402aaf09ffc24d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=14fdc6134e2a667f631cf91941402aaf09ffc24d", "patch": "@@ -315,7 +315,7 @@ Objective-C and Objective-C++ Dialects}.\n -print-multi-directory  -print-multi-lib @gol\n -print-prog-name=@var{program}  -print-search-dirs  -Q @gol\n -print-sysroot -print-sysroot-headers-suffix @gol\n--save-temps  -time}\n+-save-temps -save-temps=cwd -save-temps=obj -time}\n \n @item Optimization Options\n @xref{Optimize Options,,Options that Control Optimization}.\n@@ -5168,6 +5168,7 @@ And for @var{n} over four, @option{-fsched-verbose} also includes\n dependence info.\n \n @item -save-temps\n+@itemx -save-temps=cwd\n @opindex save-temps\n Store the usual ``temporary'' intermediate files permanently; place them\n in the current directory and name them based on the source file.  Thus,\n@@ -5182,6 +5183,39 @@ input source file with the same extension as an intermediate file.\n The corresponding intermediate file may be obtained by renaming the\n source file before using @option{-save-temps}.\n \n+If you invoke GCC in parallel, compiling several different source\n+files that share a common base name in different subdirectories or the\n+same source file compiled for multiple output destinations, it is\n+likely that the different parallel compilers will interfere with each\n+other, and overwrite the temporary files.  For instance:\n+\n+@smallexample\n+gcc -save-temps -o outdir1/foo.o indir1/foo.c&\n+gcc -save-temps -o outdir2/foo.o indir2/foo.c&\n+@end smallexample\n+\n+may result in @file{foo.i} and @file{foo.o} being written to\n+simultaneously by both compilers.\n+\n+@item -save-temps=obj\n+@opindex save-temps=obj\n+Store the usual ``temporary'' intermediate files permanently.  If the\n+@option{-o} option is used, the temporary files are based on the\n+object file.  If the @option{-o} option is not used, the\n+@option{-save-temps=obj} switch behaves like @option{-save-temps}.\n+\n+For example:\n+\n+@smallexample\n+gcc -save-temps=obj -c foo.c\n+gcc -save-temps=obj -c bar.c -o dir/xbar.o\n+gcc -save-temps=obj foobar.c -o dir2/yfoobar\n+@end smallexample\n+\n+would create @file{foo.i}, @file{foo.s}, @file{dir/xbar.i},\n+@file{dir/xbar.s}, @file{dir2/yfoobar.i}, @file{dir2/yfoobar.s}, and\n+@file{dir2/yfoobar.o}.\n+\n @item -time\n @opindex time\n Report the CPU time taken by each subprocess in the compilation"}, {"sha": "c3e6cf5f3e1afdbacfa08b8b133277f5c0b80be4", "filename": "gcc/gcc.c", "status": "modified", "additions": 92, "deletions": 33, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14fdc6134e2a667f631cf91941402aaf09ffc24d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14fdc6134e2a667f631cf91941402aaf09ffc24d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=14fdc6134e2a667f631cf91941402aaf09ffc24d", "patch": "@@ -218,7 +218,15 @@ static const char *target_sysroot_hdrs_suffix = 0;\n /* Nonzero means write \"temp\" files in source directory\n    and use the source file's name in them, and don't delete them.  */\n \n-static int save_temps_flag;\n+static enum save_temps {\n+  SAVE_TEMPS_NONE,\t\t/* no -save-temps */\n+  SAVE_TEMPS_CWD,\t\t/* -save-temps in current directory */\n+  SAVE_TEMPS_OBJ\t\t/* -save-temps in object directory */\n+} save_temps_flag;\n+\n+/* Output file to use to get the object directory for -save-temps=obj  */\n+static char *save_temps_prefix = 0;\n+static size_t save_temps_length = 0;\n \n /* Nonzero means pass multiple source files to the compiler at one time.  */\n \n@@ -393,7 +401,8 @@ or with constant text in a single argument.\n  %i     substitute the name of the input file being processed.\n  %b     substitute the basename of the input file being processed.\n \tThis is the substring up to (and not including) the last period\n-\tand not including the directory.\n+\tand not including the directory unless -save-temps was specified\n+\tto put temporaries in a different location.\t\n  %B\tsame as %b, but include the file suffix (text after the last period).\n  %gSUFFIX\n \tsubstitute a file name that has suffix SUFFIX and is chosen\n@@ -817,7 +826,7 @@ static const char *cpp_unique_options =\n static const char *cpp_options =\n \"%(cpp_unique_options) %1 %{m*} %{std*&ansi&trigraphs} %{W*&pedantic*} %{w}\\\n  %{f*} %{g*:%{!g0:%{g*} %{!fno-working-directory:-fworking-directory}}} %{O*}\\\n- %{undef} %{save-temps:-fpch-preprocess}\";\n+ %{undef} %{save-temps*:-fpch-preprocess}\";\n \n /* This contains cpp options which are not passed when the preprocessor\n    output will be used by another program.  */\n@@ -996,17 +1005,17 @@ static const struct compiler default_compilers[] =\n           %{traditional|ftraditional:\\\n %eGNU C no longer supports -traditional without -E}\\\n        %{!combine:\\\n-\t  %{save-temps|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \\\n-\t\t%(cpp_options) -o %{save-temps:%b.i} %{!save-temps:%g.i} \\n\\\n-\t\t    cc1 -fpreprocessed %{save-temps:%b.i} %{!save-temps:%g.i} \\\n+\t  %{save-temps*|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \\\n+\t\t%(cpp_options) -o %{save-temps*:%b.i} %{!save-temps*:%g.i} \\n\\\n+\t\t    cc1 -fpreprocessed %{save-temps*:%b.i} %{!save-temps*:%g.i} \\\n \t\t\t%(cc1_options)}\\\n-\t  %{!save-temps:%{!traditional-cpp:%{!no-integrated-cpp:\\\n+\t  %{!save-temps*:%{!traditional-cpp:%{!no-integrated-cpp:\\\n \t\tcc1 %(cpp_unique_options) %(cc1_options)}}}\\\n           %{!fsyntax-only:%(invoke_as)}} \\\n       %{combine:\\\n-\t  %{save-temps|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \\\n-\t\t%(cpp_options) -o %{save-temps:%b.i} %{!save-temps:%g.i}}\\\n-\t  %{!save-temps:%{!traditional-cpp:%{!no-integrated-cpp:\\\n+\t  %{save-temps*|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \\\n+\t\t%(cpp_options) -o %{save-temps*:%b.i} %{!save-temps*:%g.i}}\\\n+\t  %{!save-temps*:%{!traditional-cpp:%{!no-integrated-cpp:\\\n \t\tcc1 %(cpp_unique_options) %(cc1_options)}}\\\n                 %{!fsyntax-only:%(invoke_as)}}}}}}\", 0, 1, 1},\n   {\"-\",\n@@ -1018,13 +1027,13 @@ static const struct compiler default_compilers[] =\n       external preprocessor if -save-temps is given.  */\n      \"%{E|M|MM:%(trad_capable_cpp) %(cpp_options) %(cpp_debug_options)}\\\n       %{!E:%{!M:%{!MM:\\\n-\t  %{save-temps|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \\\n-\t\t%(cpp_options) -o %{save-temps:%b.i} %{!save-temps:%g.i} \\n\\\n-\t\t    cc1 -fpreprocessed %{save-temps:%b.i} %{!save-temps:%g.i} \\\n+\t  %{save-temps*|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \\\n+\t\t%(cpp_options) -o %{save-temps*:%b.i} %{!save-temps*:%g.i} \\n\\\n+\t\t    cc1 -fpreprocessed %{save-temps*:%b.i} %{!save-temps*:%g.i} \\\n \t\t\t%(cc1_options)\\\n                         -o %g.s %{!o*:--output-pch=%i.gch}\\\n                         %W{o*:--output-pch=%*}%V}\\\n-\t  %{!save-temps:%{!traditional-cpp:%{!no-integrated-cpp:\\\n+\t  %{!save-temps*:%{!traditional-cpp:%{!no-integrated-cpp:\\\n \t\tcc1 %(cpp_unique_options) %(cc1_options)\\\n                     -o %g.s %{!o*:--output-pch=%i.gch}\\\n                     %W{o*:--output-pch=%*}%V}}}}}}\", 0, 0, 0},\n@@ -3255,6 +3264,7 @@ display_help (void)\n   fputs (_(\"  -Xlinker <arg>           Pass <arg> on to the linker\\n\"), stdout);\n   fputs (_(\"  -combine                 Pass multiple source files to compiler at once\\n\"), stdout);\n   fputs (_(\"  -save-temps              Do not delete intermediate files\\n\"), stdout);\n+  fputs (_(\"  -save-temps=<arg>        Do not delete intermediate files\\n\"), stdout);\n   fputs (_(\"  -pipe                    Use pipes rather than intermediate files\\n\"), stdout);\n   fputs (_(\"  -time                    Time the execution of each subprocess\\n\"), stdout);\n   fputs (_(\"  -specs=<file>            Override built-in specs with the contents of <file>\\n\"), stdout);\n@@ -3789,8 +3799,19 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \tn_infiles++;\n       else if (strcmp (argv[i], \"-save-temps\") == 0)\n \t{\n-\t  save_temps_flag = 1;\n+\t  save_temps_flag = SAVE_TEMPS_CWD;\n+\t  n_switches++;\n+\t}\n+      else if (strncmp (argv[i], \"-save-temps=\", 12) == 0)\n+\t{\n \t  n_switches++;\n+\t  if (strcmp (argv[i]+12, \"cwd\") == 0)\n+\t    save_temps_flag = SAVE_TEMPS_CWD;\n+\t  else if (strcmp (argv[i]+12, \"obj\") == 0\n+\t\t   || strcmp (argv[i]+12, \"object\") == 0)\n+\t    save_temps_flag = SAVE_TEMPS_OBJ;\n+\t  else\n+\t    fatal (\"'%s' is an unknown -save-temps option\", argv[i]);\n \t}\n       else if (strcmp (argv[i], \"-combine\") == 0)\n \t{\n@@ -3965,6 +3986,8 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t      else\n \t\targv[i] = convert_filename (argv[i], ! have_c, 0);\n #endif\n+\t      /* Save the output name in case -save-temps=obj was used.  */\n+\t      save_temps_prefix = xstrdup ((p[1] == 0) ? argv[i + 1] : argv[i] + 1);\n \t      goto normal_switch;\n \n \t    default:\n@@ -4022,6 +4045,25 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t}\n     }\n \n+  /* If -save-temps=obj and -o name, create the prefix to use for %b.\n+     Otherwise just make -save-temps=obj the same as -save-temps=cwd.  */\n+  if (save_temps_flag == SAVE_TEMPS_OBJ && save_temps_prefix != NULL)\n+    {\n+      save_temps_length = strlen (save_temps_prefix);\n+      temp = strrchr (lbasename (save_temps_prefix), '.');\n+      if (temp)\n+\t{\n+\t  save_temps_length -= strlen (temp);\n+\t  save_temps_prefix[save_temps_length] = '\\0';\n+\t}\n+\n+    }\n+  else if (save_temps_prefix != NULL)\n+    {\n+      free (save_temps_prefix);\n+      save_temps_prefix = NULL;\n+    }\n+\n   if (save_temps_flag && use_pipes)\n     {\n       /* -save-temps overrides -pipe, so that temp files are produced */\n@@ -4776,12 +4818,18 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t    fatal (\"spec '%s' invalid\", spec);\n \n \t  case 'b':\n-\t    obstack_grow (&obstack, input_basename, basename_length);\n+\t    if (save_temps_length)\n+\t      obstack_grow (&obstack, save_temps_prefix, save_temps_length);\n+\t    else\n+\t      obstack_grow (&obstack, input_basename, basename_length);\n \t    arg_going = 1;\n \t    break;\n \n \t  case 'B':\n-\t    obstack_grow (&obstack, input_basename, suffixed_basename_length);\n+\t    if (save_temps_length)\n+\t      obstack_grow (&obstack, save_temps_prefix, save_temps_length);\n+\t    else\n+\t      obstack_grow (&obstack, input_basename, suffixed_basename_length);\n \t    arg_going = 1;\n \t    break;\n \n@@ -4927,6 +4975,26 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t    suffix_length += strlen (TARGET_OBJECT_SUFFIX);\n \t\t  }\n \n+\t\t/* If -save-temps=obj and -o were specified, use that for the\n+\t\t   temp file.  */\n+\t\tif (save_temps_length)\n+\t\t  {\n+\t\t    char *tmp;\n+\t\t    temp_filename_length\n+\t\t      = save_temps_length + suffix_length + 1;\n+\t\t    tmp = (char *) alloca (temp_filename_length);\n+\t\t    memcpy (tmp, save_temps_prefix, save_temps_length);\n+\t\t    memcpy (tmp + save_temps_length, suffix, suffix_length);\n+\t\t    tmp[save_temps_length + suffix_length] = '\\0';\n+\t\t    temp_filename = save_string (tmp,\n+\t\t\t\t\t\t temp_filename_length + 1);\n+\t\t    obstack_grow (&obstack, temp_filename,\n+\t\t\t\t  temp_filename_length);\n+\t\t    arg_going = 1;\n+\t\t    delete_this_arg = 0;\n+\t\t    break;\n+\t\t  }\n+\n \t\t/* If the input_filename has the same suffix specified\n \t\t   for the %g, %u, or %U, and -save-temps is specified,\n \t\t   we could end up using that file as an intermediate\n@@ -4938,13 +5006,13 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\tif (save_temps_flag)\n \t\t  {\n \t\t    char *tmp;\n-\t\t    \n-\t\t    temp_filename_length = basename_length + suffix_length;\n-\t\t    tmp = (char *) alloca (temp_filename_length + 1);\n-\t\t    strncpy (tmp, input_basename, basename_length);\n-\t\t    strncpy (tmp + basename_length, suffix, suffix_length);\n-\t\t    tmp[temp_filename_length] = '\\0';\n+\t\t    temp_filename_length = basename_length + suffix_length + 1;\n+\t\t    tmp = (char *) alloca (temp_filename_length);\n+\t\t    memcpy (tmp, input_basename, basename_length);\n+\t\t    memcpy (tmp + basename_length, suffix, suffix_length);\n+\t\t    tmp[basename_length + suffix_length] = '\\0';\n \t\t    temp_filename = tmp;\n+\n \t\t    if (strcmp (temp_filename, input_filename) != 0)\n \t\t      {\n #ifndef HOST_LACKS_INODE_NUMBERS\n@@ -6165,16 +6233,7 @@ set_input (const char *filename)\n \n   input_filename = filename;\n   input_filename_length = strlen (input_filename);\n-\n-  input_basename = input_filename;\n-#ifdef HAVE_DOS_BASED_FILE_SYSTEM\n-  /* Skip drive name so 'x:foo' is handled properly.  */\n-  if (input_basename[1] == ':')\n-    input_basename += 2;\n-#endif\n-  for (p = input_basename; *p; p++)\n-    if (IS_DIR_SEPARATOR (*p))\n-      input_basename = p + 1;\n+  input_basename = lbasename (input_filename);\n \n   /* Find a suffix starting with the last period,\n      and set basename_length to exclude that suffix.  */"}]}