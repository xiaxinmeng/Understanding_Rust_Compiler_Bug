{"sha": "de31f5445b12fd9ab9969dc536d821fe6f0edad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUzMWY1NDQ1YjEyZmQ5YWI5OTY5ZGM1MzZkODIxZmU2ZjBlZGFkMA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-21T11:54:26Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-21T11:54:26Z"}, "message": "c++: conversion to base of vbase in NSDMI [PR80431]\n\nThe delayed processing of conversions to a virtual base in an NSDMI\nassumes the target base type is a (possibly indirect) virtual base of\nthe current class, but the target base type could also be a base of a\nvirtual base, as in the testcase below.  Since such a base isn't a part\nof CLASSTYPE_VBASECLASSES, we end up miscompiling the testcase due to\nthe call to build_base_path (with binfo=NULL_TREE) silently returning\nerror_mark_node.  Fix this by using convert_to_base to build the\nconversion instead.\n\n\tPR c++/80431\n\ngcc/cp/ChangeLog:\n\n\t* tree.c (bot_replace): Use convert_to_base to build the\n\tconversion to the (morally) virtual base.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/nsdmi-virtual1a.C: New test.", "tree": {"sha": "46482082fa351d3e45aeab1f69948b29c7fbc0a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46482082fa351d3e45aeab1f69948b29c7fbc0a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de31f5445b12fd9ab9969dc536d821fe6f0edad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de31f5445b12fd9ab9969dc536d821fe6f0edad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de31f5445b12fd9ab9969dc536d821fe6f0edad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de31f5445b12fd9ab9969dc536d821fe6f0edad0/comments", "author": null, "committer": null, "parents": [{"sha": "644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "297da2b15505d630cd0cf44b7f64201c6491c6c5", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de31f5445b12fd9ab9969dc536d821fe6f0edad0/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de31f5445b12fd9ab9969dc536d821fe6f0edad0/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=de31f5445b12fd9ab9969dc536d821fe6f0edad0", "patch": "@@ -3242,15 +3242,11 @@ bot_replace (tree* t, int* /*walk_subtrees*/, void* data_)\n   else if (TREE_CODE (*t) == CONVERT_EXPR\n \t   && CONVERT_EXPR_VBASE_PATH (*t))\n     {\n-      /* In an NSDMI build_base_path defers building conversions to virtual\n-\t bases, and we handle it here.  */\n-      tree basetype = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (*t)));\n-      vec<tree, va_gc> *vbases = CLASSTYPE_VBASECLASSES (current_class_type);\n-      int i; tree binfo;\n-      FOR_EACH_VEC_SAFE_ELT (vbases, i, binfo)\n-\tif (BINFO_TYPE (binfo) == basetype)\n-\t  break;\n-      *t = build_base_path (PLUS_EXPR, TREE_OPERAND (*t, 0), binfo, true,\n+      /* In an NSDMI build_base_path defers building conversions to morally\n+\t virtual bases, and we handle it here.  */\n+      tree basetype = TREE_TYPE (*t);\n+      *t = convert_to_base (TREE_OPERAND (*t, 0), basetype,\n+\t\t\t    /*check_access=*/false, /*nonnull=*/true,\n \t\t\t    tf_warning_or_error);\n     }\n "}, {"sha": "dc847cc16e54935e740a1cec60f79b2de11b3a8e", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-virtual1a.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de31f5445b12fd9ab9969dc536d821fe6f0edad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-virtual1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de31f5445b12fd9ab9969dc536d821fe6f0edad0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-virtual1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-virtual1a.C?ref=de31f5445b12fd9ab9969dc536d821fe6f0edad0", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/80431\n+// { dg-do run { target c++11 } }\n+\n+// A variant of nsdmi-virtual1.C where A is only a morally virtual base of B.\n+\n+struct A\n+{\n+  A(): i(42) { }\n+  int i;\n+  int f() { return i; }\n+};\n+\n+struct D : A { int pad; };\n+\n+struct B : virtual D\n+{\n+  int j = i + f();\n+  int k = A::i + A::f();\n+};\n+\n+struct C: B { int pad; };\n+\n+int main()\n+{\n+  C c;\n+  if (c.j != 84 || c.k != 84)\n+    __builtin_abort();\n+}"}]}