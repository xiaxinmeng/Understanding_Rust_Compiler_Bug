{"sha": "20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA1MzIyMTBjZDFhOGUwYjNiMmQ2ZWMxYmNhYThjMGU5MjhhZjVjYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-03T02:08:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-03T02:08:28Z"}, "message": "Determine call types even if first call result is not used.\n\nFrom-SVN: r170637", "tree": {"sha": "7d49cdcbb57df867e17ec4561d2c016e94fd556c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d49cdcbb57df867e17ec4561d2c016e94fd556c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca/comments", "author": null, "committer": null, "parents": [{"sha": "4bb9014024c51476b9466e50287c37f917cf0736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bb9014024c51476b9466e50287c37f917cf0736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bb9014024c51476b9466e50287c37f917cf0736"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "28b7ee669bfbb7c306ec32220641c66f898ad59d", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca", "patch": "@@ -7250,6 +7250,9 @@ Builtin_call_expression::do_type()\n void\n Builtin_call_expression::do_determine_type(const Type_context* context)\n {\n+  if (!this->determining_types())\n+    return;\n+\n   this->fn()->determine_type_no_context();\n \n   const Expression_list* args = this->args();\n@@ -8486,6 +8489,9 @@ Call_expression::do_type()\n void\n Call_expression::do_determine_type(const Type_context*)\n {\n+  if (!this->determining_types())\n+    return;\n+\n   this->fn_->determine_type_no_context();\n   Function_type* fntype = this->get_function_type();\n   const Typed_identifier_list* parameters = NULL;\n@@ -8512,6 +8518,21 @@ Call_expression::do_determine_type(const Type_context*)\n     }\n }\n \n+// Called when determining types for a Call_expression.  Return true\n+// if we should go ahead, false if they have already been determined.\n+\n+bool\n+Call_expression::determining_types()\n+{\n+  if (this->types_are_determined_)\n+    return false;\n+  else\n+    {\n+      this->types_are_determined_ = true;\n+      return true;\n+    }\n+}\n+\n // Check types for parameter I.\n \n bool\n@@ -9004,8 +9025,7 @@ Call_result_expression::do_check_types(Gogo*)\n void\n Call_result_expression::do_determine_type(const Type_context*)\n {\n-  if (this->index_ == 0)\n-    this->call_->determine_type_no_context();\n+  this->call_->determine_type_no_context();\n }\n \n // Return the tree."}, {"sha": "b6fc9c012d93296641239aee4c56d59dce1b5665", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca", "patch": "@@ -1161,7 +1161,7 @@ class Call_expression : public Expression\n \t\t  source_location location)\n     : Expression(EXPRESSION_CALL, location),\n       fn_(fn), args_(args), type_(NULL), tree_(NULL), is_varargs_(is_varargs),\n-      is_value_discarded_(false), varargs_are_lowered_(false),\n+      varargs_are_lowered_(false), types_are_determined_(false),\n       is_deferred_(false)\n   { }\n \n@@ -1220,7 +1220,7 @@ class Call_expression : public Expression\n \n   void\n   do_discarding_value()\n-  { this->is_value_discarded_ = true; }\n+  { }\n \n   virtual Type*\n   do_type();\n@@ -1263,6 +1263,11 @@ class Call_expression : public Expression\n   lower_varargs(Gogo*, Named_object* function, Type* varargs_type,\n \t\tsize_t param_count);\n \n+  // Let a builtin expression check whether types have been\n+  // determined.\n+  bool\n+  determining_types();\n+\n  private:\n   bool\n   check_argument_type(int, const Type*, const Type*, source_location, bool);\n@@ -1286,10 +1291,10 @@ class Call_expression : public Expression\n   tree tree_;\n   // True if the last argument is a varargs argument (f(a...)).\n   bool is_varargs_;\n-  // True if the value is being discarded.\n-  bool is_value_discarded_;\n   // True if varargs have already been lowered.\n   bool varargs_are_lowered_;\n+  // True if types have been determined.\n+  bool types_are_determined_;\n   // True if the call is an argument to a defer statement.\n   bool is_deferred_;\n };"}]}