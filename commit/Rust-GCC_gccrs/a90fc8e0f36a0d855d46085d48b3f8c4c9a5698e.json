{"sha": "a90fc8e0f36a0d855d46085d48b3f8c4c9a5698e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkwZmM4ZTBmMzZhMGQ4NTVkNDYwODVkNDhiM2Y4YzRjOWE1Njk4ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-21T23:39:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-21T23:39:26Z"}, "message": "re PR rtl-optimization/16114 (Hang in cse.c (flush_hash_table))\n\n        PR rtl-opt/16114\n        * cse.c (merge_equiv_classes): Also rehash in response to\n        delete_reg_equiv changes.\n        (rehash_using_reg): Don't exclude REGs from rehashing.\n\nFrom-SVN: r83463", "tree": {"sha": "49088fd6a9e8184dc04437a6c07f6a9e4adb6534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49088fd6a9e8184dc04437a6c07f6a9e4adb6534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a90fc8e0f36a0d855d46085d48b3f8c4c9a5698e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a90fc8e0f36a0d855d46085d48b3f8c4c9a5698e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a90fc8e0f36a0d855d46085d48b3f8c4c9a5698e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a90fc8e0f36a0d855d46085d48b3f8c4c9a5698e/comments", "author": null, "committer": null, "parents": [{"sha": "5088b05874bc5a93099751efb19abe213ce2d0d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5088b05874bc5a93099751efb19abe213ce2d0d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5088b05874bc5a93099751efb19abe213ce2d0d1"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "9cc5d53db731c84f4748136e6aa97f08f76319bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90fc8e0f36a0d855d46085d48b3f8c4c9a5698e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90fc8e0f36a0d855d46085d48b3f8c4c9a5698e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a90fc8e0f36a0d855d46085d48b3f8c4c9a5698e", "patch": "@@ -1,3 +1,10 @@\n+2004-06-21  Richard Henderson  <rth@redhat.com>\n+\n+        PR rtl-opt/16114\n+        * cse.c (merge_equiv_classes): Also rehash in response to\n+        delete_reg_equiv changes.\n+        (rehash_using_reg): Don't exclude REGs from rehashing.\n+\n 2004-06-21  Richard Henderson  <rth@redhat.com>\n \n \t* c-common.def (RETURN_STMT): Remove."}, {"sha": "e322ec7fbb8d53674dba7d4f9d19e6afe4a8558f", "filename": "gcc/cse.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90fc8e0f36a0d855d46085d48b3f8c4c9a5698e/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90fc8e0f36a0d855d46085d48b3f8c4c9a5698e/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=a90fc8e0f36a0d855d46085d48b3f8c4c9a5698e", "patch": "@@ -1633,15 +1633,20 @@ merge_equiv_classes (struct table_elt *class1, struct table_elt *class2)\n \t hash code (it also isn't necessary).  */\n       if (REG_P (exp) || exp_equiv_p (exp, exp, 1, 0))\n \t{\n+\t  bool need_rehash = false;\n+\n \t  hash_arg_in_memory = 0;\n \t  hash = HASH (exp, mode);\n \n \t  if (REG_P (exp))\n-\t    delete_reg_equiv (REGNO (exp));\n+\t    {\n+\t      need_rehash = (unsigned) REG_QTY (REGNO (exp)) != REGNO (exp);\n+\t      delete_reg_equiv (REGNO (exp));\n+\t    }\n \n \t  remove_from_table (elt, hash);\n \n-\t  if (insert_regs (exp, class1, 0))\n+\t  if (insert_regs (exp, class1, 0) || need_rehash)\n \t    {\n \t      rehash_using_reg (exp);\n \t      hash = HASH (exp, mode);\n@@ -1914,14 +1919,13 @@ rehash_using_reg (rtx x)\n     return;\n \n   /* Scan all hash chains looking for valid entries that mention X.\n-     If we find one and it is in the wrong hash chain, move it.  We can skip\n-     objects that are registers, since they are handled specially.  */\n+     If we find one and it is in the wrong hash chain, move it.  */\n \n   for (i = 0; i < HASH_SIZE; i++)\n     for (p = table[i]; p; p = next)\n       {\n \tnext = p->next_same_hash;\n-\tif (!REG_P (p->exp) && reg_mentioned_p (x, p->exp)\n+\tif (reg_mentioned_p (x, p->exp)\n \t    && exp_equiv_p (p->exp, p->exp, 1, 0)\n \t    && i != (hash = safe_hash (p->exp, p->mode) & HASH_MASK))\n \t  {"}]}