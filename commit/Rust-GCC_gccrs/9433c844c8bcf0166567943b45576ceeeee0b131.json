{"sha": "9433c844c8bcf0166567943b45576ceeeee0b131", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzM2M4NDRjOGJjZjAxNjY1Njc5NDNiNDU1NzZjZWVlZWUwYjEzMQ==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2021-03-07T20:47:31Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2021-03-09T02:49:47Z"}, "message": "Tighten predicates for p10 ld/cmpi fusion\n\nPR99070 is caused by a fusion pattern matching that the individual\ninstructions do not match when it is split later. In this case the\nld+cmpi patterns were allowing a d-form load address, which the split\ncondition would rightly split, however that left us with something that\ncould not be matched by a ds-form ld instruction, hence the ICE. This\nonly happened if the target cpu was not power10 -- if we were targeting\npower10 then a prefixed pld instruction would get generated because that\ncan handle d-form. However this is not optimal code either.\n\nSo the solution is a new predicate (ds_form_mem_operand) that only\naccepts what we can take as for a ds-form load. Then a small\nmodification of the genfusion.pl script changes the relevant\nld+cmpi patterns to use the new predicate.\n\ngcc/ChangeLog\n\n\tPR target/99070\n\t* config/rs6000/predicates.md (ds_form_mem_operand) New\n\tpredicate.\n\t* config/rs6000/genfusion.pl (gen_ld_cmpi_p10) Use\n\tds_form_mem_operand in ld/lwa patterns.\n\t* config/rs6000/fusion.md: Regenerate file.", "tree": {"sha": "d1bd21491833a82d97d8128f10a8402fc66c752a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1bd21491833a82d97d8128f10a8402fc66c752a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9433c844c8bcf0166567943b45576ceeeee0b131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9433c844c8bcf0166567943b45576ceeeee0b131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9433c844c8bcf0166567943b45576ceeeee0b131", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9433c844c8bcf0166567943b45576ceeeee0b131/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5d3f15a0e04c30d5dbec09b56c14ad923a3e8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d3f15a0e04c30d5dbec09b56c14ad923a3e8da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d3f15a0e04c30d5dbec09b56c14ad923a3e8da"}], "stats": {"total": 204, "additions": 113, "deletions": 91}, "files": [{"sha": "56478fcae1d7ca2056c70d185a27bffa60c4c013", "filename": "gcc/config/rs6000/fusion.md", "status": "modified", "additions": 88, "deletions": 89, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9433c844c8bcf0166567943b45576ceeeee0b131/gcc%2Fconfig%2Frs6000%2Ffusion.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9433c844c8bcf0166567943b45576ceeeee0b131/gcc%2Fconfig%2Frs6000%2Ffusion.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffusion.md?ref=9433c844c8bcf0166567943b45576ceeeee0b131", "patch": "@@ -1,7 +1,6 @@\n-;; -*- buffer-read-only: t -*-\n ;; Generated automatically by genfusion.pl\n \n-;; Copyright (C) 2020 Free Software Foundation, Inc.\n+;; Copyright (C) 2020,2021 Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n ;;\n@@ -23,18 +22,18 @@\n ;; load mode is DI result mode is clobber compare mode is CC extend is none\n (define_insn_and_split \"*ld_cmpdi_cr0_DI_clobber_CC_none\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n-        (compare:CC (match_operand:DI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:DI 3 \"const_m1_to_1_operand\" \"n\")))\n+        (compare:CC (match_operand:DI 1 \"ds_form_mem_operand\" \"m\")\n+                    (match_operand:DI 3 \"const_m1_to_1_operand\" \"n\")))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"ld%X1 %0,%1\\;cmpdi 0,%0,%3\"\n+  \"ld%X1 %0,%1\\;cmpdi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), DImode, NON_PREFIXED_DS))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      DImode, NON_PREFIXED_DS))\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2)\n-        (compare:CC (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CC (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -44,18 +43,18 @@\n ;; load mode is DI result mode is clobber compare mode is CCUNS extend is none\n (define_insn_and_split \"*ld_cmpldi_cr0_DI_clobber_CCUNS_none\"\n   [(set (match_operand:CCUNS 2 \"cc_reg_operand\" \"=x\")\n-        (compare:CCUNS (match_operand:DI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:DI 3 \"const_0_to_1_operand\" \"n\")))\n+        (compare:CCUNS (match_operand:DI 1 \"ds_form_mem_operand\" \"m\")\n+                       (match_operand:DI 3 \"const_0_to_1_operand\" \"n\")))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"ld%X1 %0,%1\\;cmpldi 0,%0,%3\"\n+  \"ld%X1 %0,%1\\;cmpldi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), DImode, NON_PREFIXED_DS))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      DImode, NON_PREFIXED_DS))\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2)\n-        (compare:CCUNS (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CCUNS (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -65,18 +64,18 @@\n ;; load mode is DI result mode is DI compare mode is CC extend is none\n (define_insn_and_split \"*ld_cmpdi_cr0_DI_DI_CC_none\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n-        (compare:CC (match_operand:DI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:DI 3 \"const_m1_to_1_operand\" \"n\")))\n+        (compare:CC (match_operand:DI 1 \"ds_form_mem_operand\" \"m\")\n+                    (match_operand:DI 3 \"const_m1_to_1_operand\" \"n\")))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\") (match_dup 1))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"ld%X1 %0,%1\\;cmpdi 0,%0,%3\"\n+  \"ld%X1 %0,%1\\;cmpdi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), DImode, NON_PREFIXED_DS))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      DImode, NON_PREFIXED_DS))\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2)\n-        (compare:CC (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CC (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -86,18 +85,18 @@\n ;; load mode is DI result mode is DI compare mode is CCUNS extend is none\n (define_insn_and_split \"*ld_cmpldi_cr0_DI_DI_CCUNS_none\"\n   [(set (match_operand:CCUNS 2 \"cc_reg_operand\" \"=x\")\n-        (compare:CCUNS (match_operand:DI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:DI 3 \"const_0_to_1_operand\" \"n\")))\n+        (compare:CCUNS (match_operand:DI 1 \"ds_form_mem_operand\" \"m\")\n+                       (match_operand:DI 3 \"const_0_to_1_operand\" \"n\")))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\") (match_dup 1))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"ld%X1 %0,%1\\;cmpldi 0,%0,%3\"\n+  \"ld%X1 %0,%1\\;cmpldi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), DImode, NON_PREFIXED_DS))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      DImode, NON_PREFIXED_DS))\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2)\n-        (compare:CCUNS (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CCUNS (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -107,18 +106,18 @@\n ;; load mode is SI result mode is clobber compare mode is CC extend is none\n (define_insn_and_split \"*lwa_cmpdi_cr0_SI_clobber_CC_none\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n-        (compare:CC (match_operand:SI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:SI 3 \"const_m1_to_1_operand\" \"n\")))\n+        (compare:CC (match_operand:SI 1 \"ds_form_mem_operand\" \"m\")\n+                    (match_operand:SI 3 \"const_m1_to_1_operand\" \"n\")))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lwa%X1 %0,%1\\;cmpdi 0,%0,%3\"\n+  \"lwa%X1 %0,%1\\;cmpdi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), SImode, NON_PREFIXED_DS))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      SImode, NON_PREFIXED_DS))\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2)\n-        (compare:CC (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CC (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -129,17 +128,17 @@\n (define_insn_and_split \"*lwz_cmpldi_cr0_SI_clobber_CCUNS_none\"\n   [(set (match_operand:CCUNS 2 \"cc_reg_operand\" \"=x\")\n         (compare:CCUNS (match_operand:SI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")))\n+                       (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lwz%X1 %0,%1\\;cmpldi 0,%0,%3\"\n+  \"lwz%X1 %0,%1\\;cmpldi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), SImode, NON_PREFIXED_D))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      SImode, NON_PREFIXED_D))\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2)\n-        (compare:CCUNS (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CCUNS (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -149,18 +148,18 @@\n ;; load mode is SI result mode is SI compare mode is CC extend is none\n (define_insn_and_split \"*lwa_cmpdi_cr0_SI_SI_CC_none\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n-        (compare:CC (match_operand:SI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:SI 3 \"const_m1_to_1_operand\" \"n\")))\n+        (compare:CC (match_operand:SI 1 \"ds_form_mem_operand\" \"m\")\n+                    (match_operand:SI 3 \"const_m1_to_1_operand\" \"n\")))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\") (match_dup 1))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lwa%X1 %0,%1\\;cmpdi 0,%0,%3\"\n+  \"lwa%X1 %0,%1\\;cmpdi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), SImode, NON_PREFIXED_DS))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      SImode, NON_PREFIXED_DS))\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2)\n-        (compare:CC (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CC (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -171,17 +170,17 @@\n (define_insn_and_split \"*lwz_cmpldi_cr0_SI_SI_CCUNS_none\"\n   [(set (match_operand:CCUNS 2 \"cc_reg_operand\" \"=x\")\n         (compare:CCUNS (match_operand:SI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")))\n+                       (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\") (match_dup 1))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lwz%X1 %0,%1\\;cmpldi 0,%0,%3\"\n+  \"lwz%X1 %0,%1\\;cmpldi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), SImode, NON_PREFIXED_D))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      SImode, NON_PREFIXED_D))\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2)\n-        (compare:CCUNS (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CCUNS (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -191,18 +190,18 @@\n ;; load mode is SI result mode is EXTSI compare mode is CC extend is sign\n (define_insn_and_split \"*lwa_cmpdi_cr0_SI_EXTSI_CC_sign\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n-        (compare:CC (match_operand:SI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:SI 3 \"const_m1_to_1_operand\" \"n\")))\n+        (compare:CC (match_operand:SI 1 \"ds_form_mem_operand\" \"m\")\n+                    (match_operand:SI 3 \"const_m1_to_1_operand\" \"n\")))\n    (set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r\") (sign_extend:EXTSI (match_dup 1)))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lwa%X1 %0,%1\\;cmpdi 0,%0,%3\"\n+  \"lwa%X1 %0,%1\\;cmpdi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), SImode, NON_PREFIXED_DS))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      SImode, NON_PREFIXED_DS))\"\n   [(set (match_dup 0) (sign_extend:EXTSI (match_dup 1)))\n    (set (match_dup 2)\n-        (compare:CC (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CC (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -213,17 +212,17 @@\n (define_insn_and_split \"*lwz_cmpldi_cr0_SI_EXTSI_CCUNS_zero\"\n   [(set (match_operand:CCUNS 2 \"cc_reg_operand\" \"=x\")\n         (compare:CCUNS (match_operand:SI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")))\n+                       (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")))\n    (set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r\") (zero_extend:EXTSI (match_dup 1)))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lwz%X1 %0,%1\\;cmpldi 0,%0,%3\"\n+  \"lwz%X1 %0,%1\\;cmpldi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), SImode, NON_PREFIXED_D))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      SImode, NON_PREFIXED_D))\"\n   [(set (match_dup 0) (zero_extend:EXTSI (match_dup 1)))\n    (set (match_dup 2)\n-        (compare:CCUNS (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CCUNS (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -234,17 +233,17 @@\n (define_insn_and_split \"*lha_cmpdi_cr0_HI_clobber_CC_sign\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n         (compare:CC (match_operand:HI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:HI 3 \"const_m1_to_1_operand\" \"n\")))\n+                    (match_operand:HI 3 \"const_m1_to_1_operand\" \"n\")))\n    (clobber (match_scratch:GPR 0 \"=r\"))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lha%X1 %0,%1\\;cmpdi 0,%0,%3\"\n+  \"lha%X1 %0,%1\\;cmpdi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), HImode, NON_PREFIXED_D))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      HImode, NON_PREFIXED_D))\"\n   [(set (match_dup 0) (sign_extend:GPR (match_dup 1)))\n    (set (match_dup 2)\n-        (compare:CC (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CC (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -255,17 +254,17 @@\n (define_insn_and_split \"*lhz_cmpldi_cr0_HI_clobber_CCUNS_zero\"\n   [(set (match_operand:CCUNS 2 \"cc_reg_operand\" \"=x\")\n         (compare:CCUNS (match_operand:HI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:HI 3 \"const_0_to_1_operand\" \"n\")))\n+                       (match_operand:HI 3 \"const_0_to_1_operand\" \"n\")))\n    (clobber (match_scratch:GPR 0 \"=r\"))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lhz%X1 %0,%1\\;cmpldi 0,%0,%3\"\n+  \"lhz%X1 %0,%1\\;cmpldi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), HImode, NON_PREFIXED_D))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      HImode, NON_PREFIXED_D))\"\n   [(set (match_dup 0) (zero_extend:GPR (match_dup 1)))\n    (set (match_dup 2)\n-        (compare:CCUNS (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CCUNS (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -276,17 +275,17 @@\n (define_insn_and_split \"*lha_cmpdi_cr0_HI_EXTHI_CC_sign\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n         (compare:CC (match_operand:HI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:HI 3 \"const_m1_to_1_operand\" \"n\")))\n+                    (match_operand:HI 3 \"const_m1_to_1_operand\" \"n\")))\n    (set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r\") (sign_extend:EXTHI (match_dup 1)))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lha%X1 %0,%1\\;cmpdi 0,%0,%3\"\n+  \"lha%X1 %0,%1\\;cmpdi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), HImode, NON_PREFIXED_D))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      HImode, NON_PREFIXED_D))\"\n   [(set (match_dup 0) (sign_extend:EXTHI (match_dup 1)))\n    (set (match_dup 2)\n-        (compare:CC (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CC (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -297,17 +296,17 @@\n (define_insn_and_split \"*lhz_cmpldi_cr0_HI_EXTHI_CCUNS_zero\"\n   [(set (match_operand:CCUNS 2 \"cc_reg_operand\" \"=x\")\n         (compare:CCUNS (match_operand:HI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:HI 3 \"const_0_to_1_operand\" \"n\")))\n+                       (match_operand:HI 3 \"const_0_to_1_operand\" \"n\")))\n    (set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r\") (zero_extend:EXTHI (match_dup 1)))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lhz%X1 %0,%1\\;cmpldi 0,%0,%3\"\n+  \"lhz%X1 %0,%1\\;cmpldi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), HImode, NON_PREFIXED_D))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      HImode, NON_PREFIXED_D))\"\n   [(set (match_dup 0) (zero_extend:EXTHI (match_dup 1)))\n    (set (match_dup 2)\n-        (compare:CCUNS (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CCUNS (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -318,17 +317,17 @@\n (define_insn_and_split \"*lbz_cmpldi_cr0_QI_clobber_CCUNS_zero\"\n   [(set (match_operand:CCUNS 2 \"cc_reg_operand\" \"=x\")\n         (compare:CCUNS (match_operand:QI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:QI 3 \"const_0_to_1_operand\" \"n\")))\n+                       (match_operand:QI 3 \"const_0_to_1_operand\" \"n\")))\n    (clobber (match_scratch:GPR 0 \"=r\"))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lbz%X1 %0,%1\\;cmpldi 0,%0,%3\"\n+  \"lbz%X1 %0,%1\\;cmpldi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), QImode, NON_PREFIXED_D))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      QImode, NON_PREFIXED_D))\"\n   [(set (match_dup 0) (zero_extend:GPR (match_dup 1)))\n    (set (match_dup 2)\n-        (compare:CCUNS (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CCUNS (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")\n@@ -339,17 +338,17 @@\n (define_insn_and_split \"*lbz_cmpldi_cr0_QI_GPR_CCUNS_zero\"\n   [(set (match_operand:CCUNS 2 \"cc_reg_operand\" \"=x\")\n         (compare:CCUNS (match_operand:QI 1 \"non_update_memory_operand\" \"m\")\n-                 (match_operand:QI 3 \"const_0_to_1_operand\" \"n\")))\n+                       (match_operand:QI 3 \"const_0_to_1_operand\" \"n\")))\n    (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\") (zero_extend:GPR (match_dup 1)))]\n   \"(TARGET_P10_FUSION && TARGET_P10_FUSION_LD_CMPI)\"\n-  \"lbz%X1 %0,%1\\;cmpldi 0,%0,%3\"\n+  \"lbz%X1 %0,%1\\;cmpldi %2,%0,%3\"\n   \"&& reload_completed\n    && (cc_reg_not_cr0_operand (operands[2], CCmode)\n-       || !address_is_non_pfx_d_or_x (XEXP (operands[1],0), QImode, NON_PREFIXED_D))\"\n+       || !address_is_non_pfx_d_or_x (XEXP (operands[1], 0),\n+                                      QImode, NON_PREFIXED_D))\"\n   [(set (match_dup 0) (zero_extend:GPR (match_dup 1)))\n    (set (match_dup 2)\n-        (compare:CCUNS (match_dup 0)\n-\t\t    (match_dup 3)))]\n+        (compare:CCUNS (match_dup 0) (match_dup 3)))]\n   \"\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"cost\" \"8\")"}, {"sha": "c86c7436a627ef6adc29cf6a117db0cc37a3c49e", "filename": "gcc/config/rs6000/genfusion.pl", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9433c844c8bcf0166567943b45576ceeeee0b131/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9433c844c8bcf0166567943b45576ceeeee0b131/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl?ref=9433c844c8bcf0166567943b45576ceeeee0b131", "patch": "@@ -56,7 +56,7 @@ sub mode_to_ldst_char\n sub gen_ld_cmpi_p10\n {\n     my ($lmode, $ldst, $clobbermode, $result, $cmpl, $echr, $constpred,\n-\t$ccmode, $np, $extend, $resultmode);\n+\t$mempred, $ccmode, $np, $extend, $resultmode);\n   LMODE: foreach $lmode ('DI','SI','HI','QI') {\n       $ldst = mode_to_ldst_char($lmode);\n       $clobbermode = $lmode;\n@@ -70,11 +70,13 @@ sub gen_ld_cmpi_p10\n \t$result = \"GPR\" if $result eq \"EXTQI\";\n       CCMODE: foreach $ccmode ('CC','CCUNS') {\n \t  $np = \"NON_PREFIXED_D\";\n+\t  $mempred = \"non_update_memory_operand\";\n \t  if ( $ccmode eq 'CC' ) {\n \t      next CCMODE if $lmode eq 'QI';\n \t      if ( $lmode eq 'DI' || $lmode eq 'SI' ) {\n \t\t  # ld and lwa are both DS-FORM.\n \t\t  $np = \"NON_PREFIXED_DS\";\n+\t\t  $mempred = \"ds_form_mem_operand\";\n \t      }\n \t      $cmpl = \"\";\n \t      $echr = \"a\";\n@@ -83,6 +85,7 @@ sub gen_ld_cmpi_p10\n \t      if ( $lmode eq 'DI' ) {\n \t\t  # ld is DS-form, but lwz is not.\n \t\t  $np = \"NON_PREFIXED_DS\";\n+\t\t  $mempred = \"ds_form_mem_operand\";\n \t      }\n \t      $cmpl = \"l\";\n \t      $echr = \"z\";\n@@ -105,7 +108,7 @@ sub gen_ld_cmpi_p10\n \n \t  print \"(define_insn_and_split \\\"*l${ldst}${echr}_cmp${cmpl}di_cr0_${lmode}_${result}_${ccmode}_${extend}\\\"\\n\";\n \t  print \"  [(set (match_operand:${ccmode} 2 \\\"cc_reg_operand\\\" \\\"=x\\\")\\n\";\n-\t  print \"        (compare:${ccmode} (match_operand:${lmode} 1 \\\"non_update_memory_operand\\\" \\\"m\\\")\\n\";\n+\t  print \"        (compare:${ccmode} (match_operand:${lmode} 1 \\\"${mempred}\\\" \\\"m\\\")\\n\";\n \t  if ($ccmode eq 'CCUNS') { print \"   \"; }\n \t  print \"                    (match_operand:${lmode} 3 \\\"${constpred}\\\" \\\"n\\\")))\\n\";\n \t  if ($result eq 'clobber') {"}, {"sha": "1556514263a2bd7b04609e59e66e454e18426438", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9433c844c8bcf0166567943b45576ceeeee0b131/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9433c844c8bcf0166567943b45576ceeeee0b131/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=9433c844c8bcf0166567943b45576ceeeee0b131", "patch": "@@ -992,6 +992,26 @@\n   return INTVAL (offset) % 4 == 0;\n })\n \n+;; Return 1 if the operand is a memory operand that has a valid address for\n+;; a DS-form instruction. I.e. the address has to be either just a register,\n+;; or register + const where the two low order bits of const are zero.\n+(define_predicate \"ds_form_mem_operand\"\n+  (match_code \"subreg,mem\")\n+{\n+  rtx inner, addr, offset;\n+\n+  inner = op;\n+  if (reload_completed && SUBREG_P (inner))\n+    inner = SUBREG_REG (inner);\n+\n+  if (!any_memory_operand (inner, mode))\n+    return false;\n+\n+  addr = XEXP (inner, 0);\n+\n+  return address_to_insn_form (addr, mode, NON_PREFIXED_DS) == INSN_FORM_DS;\n+})\n+\n ;; Return 1 if the operand, used inside a MEM, is a SYMBOL_REF.\n (define_predicate \"symbol_ref_operand\"\n   (and (match_code \"symbol_ref\")"}]}