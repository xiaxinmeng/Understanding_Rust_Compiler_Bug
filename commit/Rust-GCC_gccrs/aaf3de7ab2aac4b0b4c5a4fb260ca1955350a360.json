{"sha": "aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFmM2RlN2FiMmFhYzRiMGI0YzVhNGZiMjYwY2ExOTU1MzUwYTM2MA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-04-29T16:10:27Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-04-29T16:10:27Z"}, "message": "[AArch64] Fix PR/65770 vstN_lane on bigendian\n\ngcc/:\n\n\t* config/aarch64/aarch64-simd.md (vec_store_lanesoi_lane<mode>,\n\tvec_store_lanesci_lane<mode>, vec_store_lanesxi_lane<mode>):\n\tFlip lane index back at assembly time for bigendian.\n\ngcc/testsuite/:\n\n\t* gcc.target/aarch64/vstN_lane_1.c: New file.\n\nFrom-SVN: r222582", "tree": {"sha": "4a55b5ba8775e74dd0346cc6baae9a5658bb9ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a55b5ba8775e74dd0346cc6baae9a5658bb9ef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360/comments", "author": null, "committer": null, "parents": [{"sha": "952bc7a64cd257de733fddaec64e320f973c6350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952bc7a64cd257de733fddaec64e320f973c6350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952bc7a64cd257de733fddaec64e320f973c6350"}], "stats": {"total": 105, "additions": 102, "deletions": 3}, "files": [{"sha": "aaa06c36a725a7b881bfe91d43e8348effb5b965", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360", "patch": "@@ -1,3 +1,10 @@\n+2015-04-29  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tPR target/65770\n+\t* config/aarch64/aarch64-simd.md (vec_store_lanesoi_lane<mode>,\n+\tvec_store_lanesci_lane<mode>, vec_store_lanesxi_lane<mode>):\n+\tFlip lane index back at assembly time for bigendian.\n+\n 2015-04-29  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* tree.h (OMP_STANDALONE_CLAUSES): New macro."}, {"sha": "b84374443a08a89a7b7c372b1585e128ac8b7fdd", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360", "patch": "@@ -3954,14 +3954,18 @@\n   [(set_attr \"type\" \"neon_store2_2reg<q>\")]\n )\n \n+;; RTL uses GCC vector extension indices, so flip only for assembly.\n (define_insn \"vec_store_lanesoi_lane<mode>\"\n   [(set (match_operand:<V_TWO_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:<V_TWO_ELEM> [(match_operand:OI 1 \"register_operand\" \"w\")\n                     (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n \t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n                    UNSPEC_ST2_LANE))]\n   \"TARGET_SIMD\"\n-  \"st2\\\\t{%S1.<Vetype> - %T1.<Vetype>}[%2], %0\"\n+  {\n+    operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n+    return \"st2\\\\t{%S1.<Vetype> - %T1.<Vetype>}[%2], %0\";\n+  }\n   [(set_attr \"type\" \"neon_store3_one_lane<q>\")]\n )\n \n@@ -4045,14 +4049,18 @@\n   [(set_attr \"type\" \"neon_store3_3reg<q>\")]\n )\n \n+;; RTL uses GCC vector extension indices, so flip only for assembly.\n (define_insn \"vec_store_lanesci_lane<mode>\"\n   [(set (match_operand:<V_THREE_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:<V_THREE_ELEM> [(match_operand:CI 1 \"register_operand\" \"w\")\n                     (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n \t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n                    UNSPEC_ST3_LANE))]\n   \"TARGET_SIMD\"\n-  \"st3\\\\t{%S1.<Vetype> - %U1.<Vetype>}[%2], %0\"\n+  {\n+    operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n+    return \"st3\\\\t{%S1.<Vetype> - %U1.<Vetype>}[%2], %0\";\n+  }\n   [(set_attr \"type\" \"neon_store3_one_lane<q>\")]\n )\n \n@@ -4136,14 +4144,18 @@\n   [(set_attr \"type\" \"neon_store4_4reg<q>\")]\n )\n \n+;; RTL uses GCC vector extension indices, so flip only for assembly.\n (define_insn \"vec_store_lanesxi_lane<mode>\"\n   [(set (match_operand:<V_FOUR_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:<V_FOUR_ELEM> [(match_operand:XI 1 \"register_operand\" \"w\")\n                     (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n \t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n                    UNSPEC_ST4_LANE))]\n   \"TARGET_SIMD\"\n-  \"st4\\\\t{%S1.<Vetype> - %V1.<Vetype>}[%2], %0\"\n+  {\n+    operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n+    return \"st4\\\\t{%S1.<Vetype> - %V1.<Vetype>}[%2], %0\";\n+  }\n   [(set_attr \"type\" \"neon_store4_one_lane<q>\")]\n )\n "}, {"sha": "7ade07c7f1d261d16710446127861eded366693d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360", "patch": "@@ -1,3 +1,8 @@\n+2015-04-29  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tPR target/65770\n+\t* gcc.target/aarch64/vstN_lane_1.c: New file.\n+\n 2015-04-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/64667"}, {"sha": "a695aa1954036ef1c1782b14ddb3c46ec78b5f0b", "filename": "gcc/testsuite/gcc.target/aarch64/vstN_lane_1.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvstN_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvstN_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvstN_lane_1.c?ref=aaf3de7ab2aac4b0b4c5a4fb260ca1955350a360", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+#define VARIANTS(VARIANT, STRUCT)\t\\\n+VARIANT (uint8, , 8, _u8, 6, STRUCT)\t\\\n+VARIANT (uint16, , 4, _u16, 3, STRUCT)\t\\\n+VARIANT (uint32, , 2, _u32, 1, STRUCT)\t\\\n+VARIANT (uint64, , 1, _u64, 0, STRUCT)\t\\\n+VARIANT (int8, , 8, _s8, 5, STRUCT)\t\\\n+VARIANT (int16, , 4, _s16, 2, STRUCT)\t\\\n+VARIANT (int32, , 2, _s32, 0, STRUCT)\t\\\n+VARIANT (int64, , 1, _s64, 0, STRUCT)\t\\\n+VARIANT (poly8, , 8, _p8, 7, STRUCT)\t\\\n+VARIANT (poly16, , 4, _p16, 1, STRUCT)\t\\\n+VARIANT (float32, , 2, _f32, 1, STRUCT)\t\\\n+VARIANT (float64, , 1, _f64, 0, STRUCT)\t\\\n+VARIANT (uint8, q, 16, _u8, 14, STRUCT)\t\\\n+VARIANT (uint16, q, 8, _u16, 4, STRUCT)\t\\\n+VARIANT (uint32, q, 4, _u32, 3, STRUCT)\t\\\n+VARIANT (uint64, q, 2, _u64, 0, STRUCT)\t\\\n+VARIANT (int8, q, 16, _s8, 13, STRUCT)\t\\\n+VARIANT (int16, q, 8, _s16, 6, STRUCT)\t\\\n+VARIANT (int32, q, 4, _s32, 2, STRUCT)\t\\\n+VARIANT (int64, q, 2, _s64, 1, STRUCT)\t\\\n+VARIANT (poly8, q, 16, _p8, 12, STRUCT)\t\\\n+VARIANT (poly16, q, 8, _p16, 5, STRUCT)\t\\\n+VARIANT (float32, q, 4, _f32, 1, STRUCT)\\\n+VARIANT (float64, q, 2, _f64, 0, STRUCT)\n+\n+#define TESTMETH(BASE, Q, ELTS, SUFFIX, LANE, STRUCT)\t\t\t\\\n+int\t\t\t\t\t\t\t\t\t\\\n+test_vst##STRUCT##Q##_lane##SUFFIX (const BASE##_t *data)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  BASE##x##ELTS##x##STRUCT##_t vectors;\t\t\t\t\t\\\n+  for (int i = 0; i < STRUCT; i++, data += ELTS)\t\t\t\\\n+    vectors.val[i] = vld1##Q##SUFFIX (data);\t\t\t\t\\\n+  BASE##_t temp[STRUCT];\t\t\t\t\t\t\\\n+  vst##STRUCT##Q##_lane##SUFFIX (temp, vectors, LANE);\t\t\t\\\n+  for (int i = 0; i < STRUCT; i++)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (temp[i] != vget##Q##_lane##SUFFIX (vectors.val[i], LANE))\t\\\n+\treturn 1;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  return 0;\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* Tests of vst2_lane and vst2q_lane.  */\n+VARIANTS (TESTMETH, 2)\n+/* Tests of vst3_lane and vst3q_lane.  */\n+VARIANTS (TESTMETH, 3)\n+/* Tests of vst4_lane and vst4q_lane.  */\n+VARIANTS (TESTMETH, 4)\n+\n+#define CHECK(BASE, Q, ELTS, SUFFIX, LANE, STRUCT)\t\t\t\\\n+  if (test_vst##STRUCT##Q##_lane##SUFFIX ((const BASE##_t *)orig_data))\t\\\n+    abort ();\n+\n+int\n+main (int argc, char **argv)\n+{\n+  /* Original data for all vector formats.  */\n+  uint64_t orig_data[8] = {0x1234567890abcdefULL, 0x13579bdf02468aceULL,\n+\t\t\t   0x012389ab4567cdefULL, 0xfeeddadacafe0431ULL,\n+\t\t\t   0x1032547698badcfeULL, 0xbadbadbadbad0badULL,\n+\t\t\t   0x0102030405060708ULL, 0x0f0e0d0c0b0a0908ULL};\n+\n+  VARIANTS (CHECK, 2);\n+  VARIANTS (CHECK, 3);\n+  VARIANTS (CHECK, 4);\n+  return 0;\n+}"}]}