{"sha": "f0024bfb228f94e60e06dc32a4983e40a9b90be5", "node_id": "C_kwDOANBUbNoAKGYwMDI0YmZiMjI4Zjk0ZTYwZTA2ZGMzMmE0OTgzZTQwYTliOTBiZTU", "commit": {"author": {"name": "Jinyang He", "email": "hejinyang@loongson.cn", "date": "2022-11-17T06:38:52Z"}, "committer": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-11-18T07:02:27Z"}, "message": "LoongArch: Fix atomic_exchange expanding [PR107713]\n\nWe used to expand atomic_exchange_n(ptr, new, mem_order) for subword types\ninto something like:\n\n    {\n      __typeof__(*ptr) t = atomic_load_n(ptr, mem_order);\n      atomic_compare_exchange_n(ptr, &t, new, true, mem_order, mem_order);\n      return t;\n    }\n\nIt's incorrect because another thread may store a different value into *ptr\nafter atomic_load_n.  Then atomic_compare_exchange_n will not store into\n*ptr, but atomic_exchange_n should always perform the store.\n\ngcc/ChangeLog:\n\n\tPR target/107713\n\t* config/loongarch/sync.md\n\t(atomic_cas_value_exchange_7_<mode>): New define_insn.\n\t(atomic_exchange): Use atomic_cas_value_exchange_7_si instead of\n\tatomic_cas_value_cmp_and_7_si.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/107713\n\t* gcc.target/loongarch/pr107713-1.c: New test.\n\t* gcc.target/loongarch/pr107713-2.c: New test.", "tree": {"sha": "8b7e6f36b177d2de6195c7d3bd2d292c542ba67e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b7e6f36b177d2de6195c7d3bd2d292c542ba67e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0024bfb228f94e60e06dc32a4983e40a9b90be5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0024bfb228f94e60e06dc32a4983e40a9b90be5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0024bfb228f94e60e06dc32a4983e40a9b90be5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0024bfb228f94e60e06dc32a4983e40a9b90be5/comments", "author": {"login": "JinyangHe-Loongson", "id": 125341707, "node_id": "U_kgDOB3iQCw", "avatar_url": "https://avatars.githubusercontent.com/u/125341707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JinyangHe-Loongson", "html_url": "https://github.com/JinyangHe-Loongson", "followers_url": "https://api.github.com/users/JinyangHe-Loongson/followers", "following_url": "https://api.github.com/users/JinyangHe-Loongson/following{/other_user}", "gists_url": "https://api.github.com/users/JinyangHe-Loongson/gists{/gist_id}", "starred_url": "https://api.github.com/users/JinyangHe-Loongson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JinyangHe-Loongson/subscriptions", "organizations_url": "https://api.github.com/users/JinyangHe-Loongson/orgs", "repos_url": "https://api.github.com/users/JinyangHe-Loongson/repos", "events_url": "https://api.github.com/users/JinyangHe-Loongson/events{/privacy}", "received_events_url": "https://api.github.com/users/JinyangHe-Loongson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b3b2f50953c5143d4b14b59d322d8a793f411dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3b2f50953c5143d4b14b59d322d8a793f411dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3b2f50953c5143d4b14b59d322d8a793f411dd"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "45be144243929ed92578e12873fbbbbefbae139e", "filename": "gcc/config/loongarch/sync.md", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0024bfb228f94e60e06dc32a4983e40a9b90be5/gcc%2Fconfig%2Floongarch%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0024bfb228f94e60e06dc32a4983e40a9b90be5/gcc%2Fconfig%2Floongarch%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fsync.md?ref=f0024bfb228f94e60e06dc32a4983e40a9b90be5", "patch": "@@ -448,6 +448,29 @@\n }\n   [(set (attr \"length\") (const_int 32))])\n \n+(define_insn \"atomic_cas_value_exchange_7_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&r\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+ZC\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR [(match_operand:GPR 2 \"reg_or_0_operand\" \"rJ\")\n+\t\t\t      (match_operand:GPR 3 \"reg_or_0_operand\" \"rJ\")\n+\t\t\t      (match_operand:GPR 4 \"reg_or_0_operand\" \"rJ\")\n+\t\t\t      (match_operand:GPR 5 \"reg_or_0_operand\"  \"rJ\")\n+\t\t\t      (match_operand:SI 6 \"const_int_operand\")] ;; model\n+\t UNSPEC_SYNC_EXCHANGE))\n+   (clobber (match_scratch:GPR 7 \"=&r\"))]\n+  \"\"\n+{\n+  return \"%G6\\\\n\\\\t\"\n+\t \"1:\\\\n\\\\t\"\n+\t \"ll.<amo>\\\\t%0,%1\\\\n\\\\t\"\n+\t \"and\\\\t%7,%0,%z3\\\\n\\\\t\"\n+\t \"or%i5\\\\t%7,%7,%5\\\\n\\\\t\"\n+\t \"sc.<amo>\\\\t%7,%1\\\\n\\\\t\"\n+\t \"beqz\\\\t%7,1b\\\\n\\\\t\";\n+}\n+  [(set (attr \"length\") (const_int 20))])\n+\n (define_expand \"atomic_exchange<mode>\"\n   [(set (match_operand:SHORT 0 \"register_operand\")\n \t(unspec_volatile:SHORT\n@@ -459,9 +482,9 @@\n   \"\"\n {\n   union loongarch_gen_fn_ptrs generator;\n-  generator.fn_7 = gen_atomic_cas_value_cmp_and_7_si;\n+  generator.fn_7 = gen_atomic_cas_value_exchange_7_si;\n   loongarch_expand_atomic_qihi (generator, operands[0], operands[1],\n-\t\t\t\toperands[1], operands[2], operands[3]);\n+\t\t\t\tconst0_rtx, operands[2], operands[3]);\n   DONE;\n })\n "}, {"sha": "d1536c95b276d3b40a0b94ebed21b4a28f3f3ca1", "filename": "gcc/testsuite/gcc.target/loongarch/pr107713-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0024bfb228f94e60e06dc32a4983e40a9b90be5/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr107713-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0024bfb228f94e60e06dc32a4983e40a9b90be5/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr107713-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr107713-1.c?ref=f0024bfb228f94e60e06dc32a4983e40a9b90be5", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target pthread } */\n+/* { dg-options \"-pthread\" } */\n+\n+#include <pthread.h>\n+\n+char x, x1, x2;\n+\n+void *\n+work1 (void *)\n+{\n+  for (int i = 0; i < 100; i++)\n+    x1 = __atomic_exchange_n (&x, x1, __ATOMIC_SEQ_CST);\n+  return NULL;\n+}\n+\n+void *\n+work2 (void *)\n+{\n+  for (int i = 0; i < 100; i++)\n+    x2 = __atomic_exchange_n (&x, x2, __ATOMIC_SEQ_CST);\n+  return NULL;\n+}\n+\n+void\n+test (void)\n+{\n+  x = 0;\n+  x1 = 1;\n+  x2 = 2;\n+  pthread_t w1, w2;\n+  if (pthread_create (&w1, NULL, work1, NULL) != 0)\n+    __builtin_abort ();\n+  if (pthread_create (&w2, NULL, work2, NULL) != 0)\n+    __builtin_abort ();\n+  if (pthread_join (w1, NULL) != 0)\n+    __builtin_abort ();\n+  if (pthread_join (w2, NULL) != 0)\n+    __builtin_abort ();\n+  if ((x ^ x1 ^ x2) != 3)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 10000; i++)\n+    test ();\n+}"}, {"sha": "82d44db3d51b95bc295229343965ab3d7241c07e", "filename": "gcc/testsuite/gcc.target/loongarch/pr107713-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0024bfb228f94e60e06dc32a4983e40a9b90be5/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr107713-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0024bfb228f94e60e06dc32a4983e40a9b90be5/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr107713-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr107713-2.c?ref=f0024bfb228f94e60e06dc32a4983e40a9b90be5", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"beq|bne\" 1 } } */\n+\n+char\n+t (char *p, char x)\n+{\n+  return __atomic_exchange_n (p, x, __ATOMIC_RELAXED);\n+}"}]}