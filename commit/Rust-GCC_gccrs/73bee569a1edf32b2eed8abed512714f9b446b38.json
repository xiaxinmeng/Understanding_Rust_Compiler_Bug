{"sha": "73bee569a1edf32b2eed8abed512714f9b446b38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNiZWU1NjlhMWVkZjMyYjJlZWQ4YWJlZDUxMjcxNGY5YjQ0NmIzOA==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1995-12-22T20:10:44Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1995-12-22T20:10:44Z"}, "message": "Initial revision\n\nFrom-SVN: r10828", "tree": {"sha": "2aa1fd589cfcaa15fc7ecfa4bd073b21f3ddc227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aa1fd589cfcaa15fc7ecfa4bd073b21f3ddc227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73bee569a1edf32b2eed8abed512714f9b446b38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bee569a1edf32b2eed8abed512714f9b446b38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73bee569a1edf32b2eed8abed512714f9b446b38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bee569a1edf32b2eed8abed512714f9b446b38/comments", "author": null, "committer": null, "parents": [{"sha": "6277f86d5e3ee256af6abe0fc21e2625ffff0712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6277f86d5e3ee256af6abe0fc21e2625ffff0712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6277f86d5e3ee256af6abe0fc21e2625ffff0712"}], "stats": {"total": 460, "additions": 460, "deletions": 0}, "files": [{"sha": "23e4cf1e0049ce080fcd1afb174181a1d1169f7f", "filename": "gcc/config/i386/dgux.c", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73bee569a1edf32b2eed8abed512714f9b446b38/gcc%2Fconfig%2Fi386%2Fdgux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73bee569a1edf32b2eed8abed512714f9b446b38/gcc%2Fconfig%2Fi386%2Fdgux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.c?ref=73bee569a1edf32b2eed8abed512714f9b446b38", "patch": "@@ -0,0 +1,191 @@\n+/* Subroutines for GNU compiler for Intel 80x86 running DG/ux\n+   Copyright (C) 1993, 1995 Free Software Foundation, Inc.\n+\n+   Currently maintained by (gcc@dg-rtp.dg.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include <time.h>\n+#include \"i386/i386.c\"\n+\n+\n+extern char *version_string;\n+\n+struct option\n+{\n+  char *string;\n+  int *variable;\n+  int on_value;\n+};\n+\n+static int\n+output_option (file, sep, type, name, indent, pos, max)\n+     FILE *file;\n+     char *sep;\n+     char *type;\n+     char *name;\n+     char *indent;\n+     int pos;\n+     int max;\n+{\n+  if (strlen (sep) + strlen (type) + strlen (name) + pos > max)\n+    {\n+      fprintf (file, indent);\n+      return fprintf (file, \"%s%s\", type, name);\n+    }\n+  return pos + fprintf (file, \"%s%s%s\", sep, type, name);\n+}\n+\n+static struct { char *name; int value; } m_options[] = TARGET_SWITCHES;\n+\n+static void\n+output_options (file, f_options, f_len, W_options, W_len,\n+\t\tpos, max, sep, indent, term)\n+     FILE *file;\n+     struct option *f_options;\n+     struct option *W_options;\n+     int f_len, W_len;\n+     int pos;\n+     int max;\n+     char *indent;\n+     char *term;\n+{\n+  register int j;\n+\n+  if (optimize)\n+    pos = output_option (file, sep, \"-O\", \"\", indent, pos, max);\n+  if (write_symbols != NO_DEBUG)\n+    pos = output_option (file, sep, \"-g\", \"\", indent, pos, max);\n+/*  if (flag_traditional)\n+    pos = output_option (file, sep, \"-traditional\", \"\", indent, pos, max);*/\n+  if (profile_flag)\n+    pos = output_option (file, sep, \"-p\", \"\", indent, pos, max);\n+  if (profile_block_flag)\n+    pos = output_option (file, sep, \"-a\", \"\", indent, pos, max);\n+\n+  for (j = 0; j < f_len; j++)\n+    if (*f_options[j].variable == f_options[j].on_value)\n+      pos = output_option (file, sep, \"-f\", f_options[j].string,\n+\t\t\t   indent, pos, max);\n+\n+  for (j = 0; j < W_len; j++)\n+    if (*W_options[j].variable == W_options[j].on_value)\n+      pos = output_option (file, sep, \"-W\", W_options[j].string,\n+\t\t\t   indent, pos, max);\n+\n+  for (j = 0; j < sizeof m_options / sizeof m_options[0]; j++)\n+    if (m_options[j].name[0] != '\\0'\n+\t&& m_options[j].value > 0\n+\t&& ((m_options[j].value & target_flags)\n+\t    == m_options[j].value))\n+      pos = output_option (file, sep, \"-m\", m_options[j].name,\n+\t\t\t   indent, pos, max);\n+\n+  pos = output_option (file, sep, \"-mcpu=\", ix86_cpu_string, indent, pos, max);\n+  pos = output_option (file, sep, \"-march=\", ix86_isa_string, indent, pos, max);\n+  fprintf (file, term);\n+}\n+\n+/* Output to FILE the start of the assembler file.  */\n+\n+void\n+output_file_start (file, f_options, f_len, W_options, W_len)\n+     FILE *file;\n+     struct option *f_options;\n+     struct option *W_options;\n+     int f_len, W_len;\n+{\n+  register int pos;\n+\n+  output_file_directive (file, main_input_filename);\n+  fprintf (file, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n+  /* Switch to the data section so that the coffsem symbol and the\n+     gcc2_compiled. symbol aren't in the text section.  */\n+  data_section ();\n+\n+  pos = fprintf (file, \"\\n// cc1 (%s) arguments:\", VERSION_STRING);\n+  output_options (file, f_options, f_len, W_options, W_len,\n+\t\t  pos, 75, \" \", \"\\n// \", \"\\n\\n\");\n+\n+#ifdef TARGET_IDENTIFY_REVISION\n+  if (TARGET_IDENTIFY_REVISION)\n+    {\n+      char indent[256];\n+\n+      time_t now = time ((time_t *)0);\n+      sprintf (indent, \"]\\\"\\n\\t%s\\t \\\"@(#)%s [\", IDENT_ASM_OP, main_input_filename);\n+      fprintf (file, indent+3);\n+      pos = fprintf (file, \"gcc %s, %.24s,\", VERSION_STRING, ctime (&now));\n+      output_options (file, f_options, f_len, W_options, W_len,\n+\t\t      pos, 150 - strlen (indent), \" \", indent, \"]\\\"\\n\\n\");\n+    }\n+#endif /* TARGET_IDENTIFY_REVISION */\n+}\n+\n+#ifndef CROSS_COMPILE\n+#if defined (_abort_aux) \n+/* Debugging aid to be registered via `atexit'.  See the definition\n+   of abort in dgux.h.  */\n+void\n+abort_aux ()\n+{\n+  extern int insn_;\n+  extern char * file_;\n+  extern int line_;\n+  static int done;\n+  rtx line_note;\n+\n+  if (done++)\n+    return;\n+  if (file_ || line_)\n+    {\n+      if (write_symbols != NO_DEBUG)\n+\t{\n+\t  for (line_note = (rtx) insn_ ; line_note != 0 ; line_note = PREV_INSN (line_note))\n+\t    if (GET_CODE (line_note) == NOTE && NOTE_LINE_NUMBER (line_note) > 0)\n+\t      break;\n+\t  if (line_note != 0)\n+\t    {\n+\t      error_with_file_and_line (NOTE_SOURCE_FILE (line_note),\n+\t\t\t\t\tNOTE_LINE_NUMBER (line_note),\n+\t\t\t\t\t\"Internal gcc abort from %s:%d\",\n+\t\t\t\t\tfile_ ? file_ : \"<nofile>\", line_);\n+\t      if (insn_ && file_ && strcmp (file_, \"toplev.c\"))\n+\t\t{\n+\t\t  error_with_file_and_line (NOTE_SOURCE_FILE (line_note),\n+\t\t\t\t\t    NOTE_LINE_NUMBER (line_note),\n+\t\t\t\t\t    \"The local variable `insn' has the value:\", 0);\n+\t\t  debug_rtx ((rtx) insn_);\n+\t\t}\n+\t    }\n+\t}\n+      if (write_symbols == NO_DEBUG || line_note == 0)\n+\t{\n+\t  error (\"Internal gcc abort from %s:%d\",\n+\t\t file_ ? file_ : \"<nofile>\", line_);\n+\t  if (insn_ && file_ && strcmp (file_, \"toplev.c\"))\n+\t    {\n+\t      error (\"The local variable `insn' has the value:\", 0);\n+\t      debug_rtx ((rtx) insn_);\n+\t    }\n+\t}\n+    }\n+}\n+#endif\n+#endif\n+\n+"}, {"sha": "5b461c49259221f26bb6cd06fc43e6d30f0f6087", "filename": "gcc/config/i386/dgux.h", "status": "added", "additions": 269, "deletions": 0, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73bee569a1edf32b2eed8abed512714f9b446b38/gcc%2Fconfig%2Fi386%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73bee569a1edf32b2eed8abed512714f9b446b38/gcc%2Fconfig%2Fi386%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.h?ref=73bee569a1edf32b2eed8abed512714f9b446b38", "patch": "@@ -0,0 +1,269 @@\n+/* Target definitions for GNU compiler for Intel 80x86 running DG/ux\n+   Copyright (C) 1993, 1995 Free Software Foundation, Inc.\n+\n+   Currently maintained by (gcc@dg-rtp.dg.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* for now, we are just like the sysv4 version with a\n+   few hacks\n+*/\n+\n+#include \"i386/sysv4.h\"\n+\n+#ifndef VERSION_INFO2\n+#define VERSION_INFO2   \"$Revision$\"\n+#endif\n+\n+#ifndef VERSION_STRING\n+#define VERSION_STRING  version_string\n+#endif\n+\n+/* Identify the compiler.  */\n+/* TARGET_VERSION used by toplev.c VERSION_STRING used by -midentify-revision */\n+\n+#undef\tTARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (%s%s, %s)\", \\\n+\t\t\t\tVERSION_INFO1, VERSION_INFO2, __DATE__)\n+#undef  VERSION_INFO1\n+#define VERSION_INFO1 \"ix86 DG/ux, \"\n+\n+/* Augment TARGET_SWITCHES with the MXDB options.  */\n+#define MASK_STANDARD\t\t0x40000000 /* Retain standard information */\n+#define MASK_NOLEGEND\t\t0x20000000 /* Discard legend information */\n+#define MASK_EXTERNAL_LEGEND\t0x10000000 /* Make external legends */\n+#define MASK_IDENTIFY_REVISION  0x08000000 /* Emit 'ident' to .s */\n+#define MASK_WARN_PASS_STRUCT   0x04000000 /* Emit 'ident' to .s */\n+\n+#define TARGET_STANDARD\t\t  (target_flags & MASK_STANDARD)\n+#define TARGET_NOLEGEND\t\t  (target_flags & MASK_NOLEGEND)\n+#define TARGET_EXTERNAL_LEGEND\t  (target_flags & MASK_EXTERNAL_LEGEND)\n+#define TARGET_IDENTIFY_REVISION  (target_flags & MASK_IDENTIFY_REVISION)\n+#define TARGET_WARN_PASS_STRUCT   (target_flags & MASK_WARN_PASS_STRUCT)\n+\n+#undef  SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \\\n+    { \"standard\",\t\t\t MASK_STANDARD },          \\\n+    { \"legend\",\t\t\t\t-MASK_NOLEGEND },          \\\n+    { \"no-legend\",\t\t\t MASK_NOLEGEND },          \\\n+    { \"external-legend\",\t\t MASK_EXTERNAL_LEGEND },   \\\n+    { \"identify-revision\", \t\t MASK_IDENTIFY_REVISION }, \\\n+    { \"warn-passed-structs\", \t\t MASK_WARN_PASS_STRUCT },\n+\n+#undef  DWARF_DEBUGGING_INFO\n+#define DWARF_DEBUGGING_INFO\n+\n+/*\n+  allow -gstabs so that those who have gnu-as installed\n+  can debug c++ programs.\n+*/\n+#undef  DBX_DEBUGGING_INFO\n+#define DBX_DEBUGGING_INFO\n+\n+#define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n+\n+/* Override svr[34].h.  */\n+#undef\tASM_FILE_START\n+#define ASM_FILE_START(FILE) \\\n+  output_file_start (FILE, f_options, sizeof f_options / sizeof f_options[0], \\\n+\t\t     W_options, sizeof W_options / sizeof W_options[0])\n+\n+/* ix86 abi specified type for wchar_t */\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+\n+/* Define this to be nonzero if the character `$' should be allowed\n+   by default in identifier names.  DG/ux does this differently than\n+   standard i386 */\n+\n+#undef  DOLLARS_IN_IDENTIFIERS\n+#define DOLLARS_IN_IDENTIFIERS  1\n+\n+/* Some machines may desire to change what optimizations are performed for\n+   various optimization levels.   This macro, if defined, is executed once\n+   just after the optimization level is determined and before the remainder\n+   of the command options have been parsed.  Values set in this macro are\n+   used as the default values for the other command line options.\n+\n+   LEVEL is the optimization level specified; 2 if -O2 is specified,\n+   1 if -O is specified, and 0 if neither is specified.  */\n+\n+/* This macro used to store 0 in flag_signed_bitfields.\n+   Not only is that misuse of this macro; the whole idea is wrong.\n+\n+   The GNU C dialect makes bitfields signed by default,\n+   regardless of machine type.  Making any machine inconsistent in this\n+   regard is bad for portability.\n+\n+   I chose to make bitfields signed by default because this is consistent\n+   with the way ordinary variables are handled: `int' equals `signed int'.\n+   If there is a good reason to prefer making bitfields unsigned by default,\n+   it cannot have anything to do with the choice of machine.\n+   If the reason is good enough, we should change the convention for all machines.\n+\n+   -- rms, 20 July 1991.  */\n+\n+/*\n+  this really should go into dgux-local.h \n+*/\n+\n+#undef\tOPTIMIZATION_OPTIONS\n+#define OPTIMIZATION_OPTIONS(LEVEL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    extern int flag_signed_bitfields;\t\t\t\\\n+    flag_signed_bitfields = 0;\t\t\t\t\\\n+    abort_helper ();\t\t\t\t\t\\\n+  } while (0)\n+\n+\n+/* The normal location of the `ld' and `as' programs */\n+\n+#undef MD_EXEC_PREFIX\n+#define MD_EXEC_PREFIX \"/usr/bin/\"\n+\n+/* The normal location of the various *crt*.o files is the */\n+\n+#undef MD_STARTFILE_PREFIX\n+#define MD_STARTFILE_PREFIX \"/usr/lib/\"\n+\n+/* Macros to be automatically defined.  \n+   __CLASSIFY_TYPE__ is used in the <varargs.h> and <stdarg.h> header\n+   files with DG/UX revision 5.40 and later.  This allows GNU CC to\n+   operate without installing the header files.  */\n+\n+#undef\tCPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Di386 -D__ix86 -Dunix -DDGUX -D__CLASSIFY_TYPE__=2\\\n+   -Asystem(unix) -Asystem(svr4) -Acpu(i386) -Amachine(i386)\"\n+\n+   /*\n+     If not -ansi, -traditional, or restricting include files to one\n+     specific source target, specify full DG/UX features.\n+   */\n+#undef\tCPP_SPEC\n+#define\tCPP_SPEC \"%{!ansi:%{!traditional:-D__OPEN_NAMESPACE__}}\"\n+\n+/* Assembler support (legends for mxdb).  */\n+#undef\tASM_SPEC\n+#define ASM_SPEC \"\\\n+%{mno-legend:%{mstandard:-Wc,off}}\\\n+%{g:%{!mno-legend:-Wc,-fix-bb,-s\\\"%i\\\"\\\n+%{traditional:,-lc}%{!traditional:,-lansi-c}\\\n+%{mstandard:,-keep-std}\\\n+%{mexternal-legend:,-external}}}\"\n+\n+/* Override svr4.h.  */\n+\n+/* hassey 3/12/94 keep svr4 ASM_FINAL_SPEC allows -pipe to work */\n+\n+/* Linker and library spec's.\n+   -static, -shared, -symbolic, -h* and -z* access AT&T V.4 link options.\n+   -svr4 instructs gcc to place /usr/lib/values-X[cat].o on link the line.\n+   The absense of -msvr4 indicates linking done in a COFF environment and\n+   adds the link script to the link line.  In all environments, the first\n+   and last objects are crtbegin.o and crtend.o.\n+   When the -G link option is used (-shared and -symbolic) a final link is\n+   not being done.  */\n+\n+#undef\tLIB_SPEC\n+#define LIB_SPEC \\\n+\"%{!shared:%{!symbolic:-lc}}\"\n+\n+#undef\tLINK_SPEC\n+#define LINK_SPEC \"%{z*} %{h*} %{V} %{v:%{!V:-V}} \\\n+\t\t   %{static:-dn -Bstatic} \\\n+\t\t   %{shared:-G -dy} \\\n+\t\t   %{symbolic:-Bsymbolic -G -dy} \\\n+\t\t   %{pg:-L/usr/lib/libp}%{p:-L/usr/lib/libp}\"\n+\n+#ifdef CROSS_COMPILE\n+\n+#undef\tSTARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared:%{!symbolic:%{pg:gcrt1.o%s} \t\t\\\n+\t\t\t                      %{!pg:%{p:mcrt1.o%s} \t\\\n+\t\t\t\t\t      %{!p:crt1.o%s}}}} \t\\\n+\t\t\t %{pg:gcrti.o%s}%{!pg:crti.o%s} \t\t\\\n+\t\t\t crtbegin.o%s \t\t\t\t\t\\\n+\t\t\t %{ansi:values-Xc.o%s} \t\t\t\t\\\n+\t\t\t %{!ansi:%{traditional:values-Xt.o%s} \t\t\\\n+\t\t\t         %{!traditional:values-Xa.o%s}}\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend.o%s %{pg:gcrtn.o}%{!pg:crtn.o%s}\"\n+\n+#else\n+\n+#undef\tSTARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared:%{!symbolic:%{pg:gcrt1.o%s} \t\t\\\n+\t\t\t                      %{!pg:%{p:/lib/mcrt1.o%s}\t\\\n+\t\t\t\t\t      %{!p:/lib/crt1.o%s}}} \t\\\n+\t\t\t%{pg:gcrti.o%s}%{!pg:/lib/crti.o%s}} \t\t\\\n+\t\t\tcrtbegin.o%s \t\t\t\t\t\\\n+\t\t\t%{ansi:/lib/values-Xc.o%s} \t\t\t\\\n+\t\t\t%{!ansi:%{traditional:/lib/values-Xt.o%s} \t\\\n+\t\t\t        %{!traditional:/lib/values-Xa.o%s}}\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend.o%s %{pg:gcrtn.o}%{!pg:/lib/crtn.o}\"\n+\n+#endif /* CROSS_COMPILE */\n+\n+#if !defined (no_abort) || defined (CRT_BEGIN) || defined (CRT_END)\n+#undef abort\n+\n+char insn; int insn_; char * file_; int line_;\n+#define abort()\t\t\t\\\n+  (insn_ = (int) insn,\t\t\\\n+   file_ = __FILE__,\t\t\\\n+   line_ = __LINE__,\t\t\\\n+   fancy_abort ())\n+#define abort_helper()\t\t\\\n+  do {\t\t\t\t\\\n+    extern void abort_aux ();\t\\\n+    atexit (abort_aux);\t\t\\\n+  } while (0)\n+#define _abort_aux\n+#endif /* no abort */\n+\n+/* The maximum alignment which the object file format can support.\n+   page alignment would seem to be enough */\n+#undef MAX_OFILE_ALIGNMENT\n+#define MAX_OFILE_ALIGNMENT 0x1000\n+\n+/* Must use data section for relocatable constants when pic.  */\n+#undef SELECT_RTX_SECTION\n+#define SELECT_RTX_SECTION(MODE,RTX)            \\\n+{                                               \\\n+  if (flag_pic && symbolic_operand (RTX))       \\\n+    data_section ();                            \\\n+  else                                          \\\n+    const_section ();                           \\\n+}\n+\n+/* This supplements FUNCTION_ARG's definition in i386.h to check\n+   TARGET_WARN_PASS_STRUCT */\n+\n+#undef  FUNCTION_ARG\n+#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n+((((MODE) == BLKmode && TARGET_WARN_PASS_STRUCT) ? \\\n+    warning (\"argument is a structure\"),0 : 0), \\\n+    (function_arg (&CUM, MODE, TYPE, NAMED)))\n+"}]}