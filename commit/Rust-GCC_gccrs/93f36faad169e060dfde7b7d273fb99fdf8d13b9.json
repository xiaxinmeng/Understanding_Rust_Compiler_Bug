{"sha": "93f36faad169e060dfde7b7d273fb99fdf8d13b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNmMzZmYWFkMTY5ZTA2MGRmZGU3YjdkMjczZmI5OWZkZjhkMTNiOQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@codesourcery.com", "date": "2010-08-20T22:39:58Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@gcc.gnu.org", "date": "2010-08-20T22:39:58Z"}, "message": "pex-common.c (pex_read_err): Set stderr_pipe to -1 if a corresponding stream has been opened.\n\n\t* pex-common.c (pex_read_err): Set stderr_pipe to -1 if a\n\tcorresponding stream has been opened.\n\t(pex_free): Close pipe file descriptors corresponding to child's\n\tstdout and stderr before waiting.\n\nFrom-SVN: r163426", "tree": {"sha": "a57e67974483fcf221523c327577dc6cb1a5e447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a57e67974483fcf221523c327577dc6cb1a5e447"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93f36faad169e060dfde7b7d273fb99fdf8d13b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f36faad169e060dfde7b7d273fb99fdf8d13b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f36faad169e060dfde7b7d273fb99fdf8d13b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f36faad169e060dfde7b7d273fb99fdf8d13b9/comments", "author": null, "committer": null, "parents": [{"sha": "b4d456ffc0f749c78b1b53fb3e296a248ff700dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d456ffc0f749c78b1b53fb3e296a248ff700dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d456ffc0f749c78b1b53fb3e296a248ff700dd"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "f404025a4baae005064f4a90e1fb628489b4cf7e", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f36faad169e060dfde7b7d273fb99fdf8d13b9/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f36faad169e060dfde7b7d273fb99fdf8d13b9/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=93f36faad169e060dfde7b7d273fb99fdf8d13b9", "patch": "@@ -1,3 +1,10 @@\n+2010-08-20  Maciej W. Rozycki  <macro@codesourcery.com>\n+\n+\t* pex-common.c (pex_read_err): Set stderr_pipe to -1 if a\n+\tcorresponding stream has been opened.\n+\t(pex_free): Close pipe file descriptors corresponding to child's\n+\tstdout and stderr before waiting.\n+\n 2010-08-13  Nick Clifton  <nickc@redhat.com>\n \n \t* argv.c (expandargv): Limit the number of times that response"}, {"sha": "b32c54cc683f07760f11c52ed4164a202fea0da2", "filename": "libiberty/pex-common.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f36faad169e060dfde7b7d273fb99fdf8d13b9/libiberty%2Fpex-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f36faad169e060dfde7b7d273fb99fdf8d13b9/libiberty%2Fpex-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-common.c?ref=93f36faad169e060dfde7b7d273fb99fdf8d13b9", "patch": "@@ -505,6 +505,7 @@ pex_read_err (struct pex_obj *obj, int binary)\n   if (o < 0 || o == STDIN_FILE_NO)\n     return NULL;\n   obj->read_err = obj->funcs->fdopenr (obj, o, binary);\n+  obj->stderr_pipe = -1;\n   return obj->read_err;    \n }\n \n@@ -597,8 +598,17 @@ pex_get_times (struct pex_obj *obj, int count, struct pex_time *vector)\n void\n pex_free (struct pex_obj *obj)\n {\n+  /* Close pipe file descriptors corresponding to child's stdout and\n+     stderr so that the child does not hang trying to output something\n+     while we're waiting for it.  */\n   if (obj->next_input >= 0 && obj->next_input != STDIN_FILE_NO)\n     obj->funcs->close (obj, obj->next_input);\n+  if (obj->stderr_pipe >= 0 && obj->stderr_pipe != STDIN_FILE_NO)\n+    obj->funcs->close (obj, obj->stderr_pipe);\n+  if (obj->read_output != NULL)\n+    fclose (obj->read_output);\n+  if (obj->read_err != NULL)\n+    fclose (obj->read_err);\n \n   /* If the caller forgot to wait for the children, we do it here, to\n      avoid zombies.  */\n@@ -619,10 +629,6 @@ pex_free (struct pex_obj *obj)\n     free (obj->status);\n   if (obj->time != NULL)\n     free (obj->time);\n-  if (obj->read_output != NULL)\n-    fclose (obj->read_output);\n-  if (obj->read_err != NULL)\n-    fclose (obj->read_err);\n \n   if (obj->remove_count > 0)\n     {"}]}