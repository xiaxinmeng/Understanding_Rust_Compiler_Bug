{"sha": "bc095846795081196f13f224804c85571ff2f97d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMwOTU4NDY3OTUwODExOTZmMTNmMjI0ODA0Yzg1NTcxZmYyZjk3ZA==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-09-01T07:55:39Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-09-01T07:55:39Z"}, "message": "c-common.h (lookup_interface): Remove prototype.\n\n[gcc/ChangeLog]\n2004-09-01  Ziemowit Laski  <zlaski@apple.com>\n\n\t* c-common.h (lookup_interface): Remove prototype.\n\t(is_class_name): Rename to objc_is_class_name.\n\t(lookup_objc_ivar): Rename to objc_lookup_ivar.\n\t(get_current_scope): Rename to objc_get_current_scope.\n\t* c-decl.c (get_current_scope): Rename to objc_get_current_scope.\n\t* c-parse.in (parmlist_or_identifiers_1): Get rid of unused variable.\n\t(yylexname): Call objc_is_class_name() instead of is_class_name().\n\t* c-typeck.c (build_external_ref): Call objc_lookup_ivar()\n\tinstead of lookup_objc_ivar().\n\t* stub-objc.c (lookup_interface): Remove stub.\n\t(is_class_name): Rename to objc_is_class_name.\n\t(lookup_objc_ivar): Rename to objc_lookup_ivar.\n\n[gcc/objc/ChangeLog]\n2004-09-01  Ziemowit Laski  <zlaski@apple.com>\n\n\t* objc-act.c (lookup_interface): Make function 'static' and add a\n\tlocal prototype.\n\t(objc_check_decl, get_class_reference, objc_declare_alias,\n\tobjc_declare_class, objc_is_object_ptr): Call objc_is_class_name()\n\tinstead of is_class_name().\n\t(get_super_receiver, objc_clear_super_receiver): Call\n\tobjc_get_current_scope() instead of get_current_scope().\n\t(is_class_name): Rename to objc_is_class_name.\n\t(lookup_objc_ivar): Rename to objc_lookup_ivar.\n\nFrom-SVN: r86879", "tree": {"sha": "59f347b95142c9c32da7882258f10dadaaba1512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59f347b95142c9c32da7882258f10dadaaba1512"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc095846795081196f13f224804c85571ff2f97d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc095846795081196f13f224804c85571ff2f97d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc095846795081196f13f224804c85571ff2f97d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc095846795081196f13f224804c85571ff2f97d/comments", "author": null, "committer": null, "parents": [{"sha": "45f366abae43ce0df9e3ef7eae7b8eee96f506ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f366abae43ce0df9e3ef7eae7b8eee96f506ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45f366abae43ce0df9e3ef7eae7b8eee96f506ab"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "66740f4272ef28019fe9b8ed226ccb56667f5ba4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc095846795081196f13f224804c85571ff2f97d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc095846795081196f13f224804c85571ff2f97d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc095846795081196f13f224804c85571ff2f97d", "patch": "@@ -1,3 +1,18 @@\n+2004-09-01  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* c-common.h (lookup_interface): Remove prototype.\n+\t(is_class_name): Rename to objc_is_class_name.\n+\t(lookup_objc_ivar): Rename to objc_lookup_ivar.\n+\t(get_current_scope): Rename to objc_get_current_scope.\n+\t* c-decl.c (get_current_scope): Rename to objc_get_current_scope.\n+\t* c-parse.in (parmlist_or_identifiers_1): Get rid of unused variable.\n+\t(yylexname): Call objc_is_class_name() instead of is_class_name().\n+\t* c-typeck.c (build_external_ref): Call objc_lookup_ivar()\n+\tinstead of lookup_objc_ivar().\n+\t* stub-objc.c (lookup_interface): Remove stub.\n+\t(is_class_name): Rename to objc_is_class_name.\n+\t(lookup_objc_ivar): Rename to objc_lookup_ivar.\n+\n 2004-08-31  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config.gcc (arm*-*-symbianelf*): Do not include t-bpabi."}, {"sha": "6c5f1ba01f40a67c1fd6f8242e2921d97d70de87", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=bc095846795081196f13f224804c85571ff2f97d", "patch": "@@ -897,20 +897,19 @@ extern void c_parse_error (const char *, enum cpp_ttype, tree);\n \n /* The following ObjC/ObjC++ functions are called by the C and/or C++\n    front-ends; they all must have corresponding stubs in stub-objc.c.  */\n-extern tree lookup_interface (tree);\n-extern tree is_class_name (tree);\n+extern tree objc_is_class_name (tree);\n extern tree objc_is_object_ptr (tree);\n extern void objc_check_decl (tree);\n extern int objc_is_reserved_word (tree);\n extern int objc_comptypes (tree, tree, int);\n extern tree objc_message_selector (void);\n-extern tree lookup_objc_ivar (tree);\n+extern tree objc_lookup_ivar (tree);\n extern void objc_clear_super_receiver (void);\n extern int objc_is_public (tree, tree);\n \n /* The following are provided by the C and C++ front-ends, and called by\n    ObjC/ObjC++.  */\n-extern void *get_current_scope (void);\n+extern void *objc_get_current_scope (void);\n extern void objc_mark_locals_volatile (void *);\n \n /* In c-ppoutput.c  */"}, {"sha": "a649c43fa13a152bec9c9f67145b6c7fc8657c3a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=bc095846795081196f13f224804c85571ff2f97d", "patch": "@@ -533,7 +533,7 @@ c_finish_incomplete_decl (tree decl)\n /* The Objective-C front-end often needs to determine the current scope.  */\n \n void *\n-get_current_scope (void)\n+objc_get_current_scope (void)\n {\n   return current_scope;\n }"}, {"sha": "f4d7a04b434446a77a3d845e1589e3eda31ab4d8", "filename": "gcc/c-parse.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=bc095846795081196f13f224804c85571ff2f97d", "patch": "@@ -2601,8 +2601,7 @@ parmlist_or_identifiers:\n parmlist_or_identifiers_1:\n \t  parmlist_1\n \t| identifiers ')'\n-\t\t{ tree t;\n-\t\t  $$ = tree_cons (NULL_TREE, NULL_TREE, $1);\n+\t\t{ $$ = tree_cons (NULL_TREE, NULL_TREE, $1);\n \n \t\t  /* Make sure we have a parmlist after attributes.  */\n \t\t  if ($<ttype>-1 != 0)\n@@ -3516,7 +3515,7 @@ yylexname (void)\n @@ifobjc\n   else\n     {\n-      tree objc_interface_decl = is_class_name (yylval.ttype);\n+      tree objc_interface_decl = objc_is_class_name (yylval.ttype);\n       /* ObjC class names are in the same namespace as variables and\n \t typedefs, and hence are shadowed by local declarations.  */\n       if (objc_interface_decl"}, {"sha": "33c19da6d0a041241b0d9d88ae2351b7b5ae67f3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=bc095846795081196f13f224804c85571ff2f97d", "patch": "@@ -1715,7 +1715,7 @@ build_external_ref (tree id, int fun)\n {\n   tree ref;\n   tree decl = lookup_name (id);\n-  tree objc_ivar = lookup_objc_ivar (id);\n+  tree objc_ivar = objc_lookup_ivar (id);\n \n   if (decl && decl != error_mark_node)\n     {"}, {"sha": "9c66aab3bb1a2473bcede53d72d10686f647d842", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=bc095846795081196f13f224804c85571ff2f97d", "patch": "@@ -1,3 +1,15 @@\n+2004-09-01  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc-act.c (lookup_interface): Make function 'static' and add a\n+\tlocal prototype.\n+\t(objc_check_decl, get_class_reference, objc_declare_alias,\n+\tobjc_declare_class, objc_is_object_ptr): Call objc_is_class_name()\n+\tinstead of is_class_name().\n+\t(get_super_receiver, objc_clear_super_receiver): Call \n+\tobjc_get_current_scope() instead of get_current_scope().\n+\t(is_class_name): Rename to objc_is_class_name.\n+\t(lookup_objc_ivar): Rename to objc_lookup_ivar.\n+\n 2004-08-28  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc-act.c (objc_is_reserved_word): New function."}, {"sha": "798a0bd37b1de36b367802697481cd22b0cae309", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=bc095846795081196f13f224804c85571ff2f97d", "patch": "@@ -132,7 +132,7 @@ static tree build_objc_method_call (int, tree, tree, tree, tree);\n static void generate_strings (void);\n static tree get_proto_encoding (tree);\n static void build_selector_translation_table (void);\n-\n+static tree lookup_interface (tree);\n static tree objc_add_static_instance (tree, tree);\n \n static void build_objc_exception_stuff (void);\n@@ -961,7 +961,7 @@ objc_check_decl (tree decl)\n \n   if (TREE_CODE (type) != RECORD_TYPE)\n     return;\n-  if (TYPE_NAME (type) && (type = is_class_name (TYPE_NAME (type))))\n+  if (TYPE_NAME (type) && (type = objc_is_class_name (TYPE_NAME (type))))\n     error (\"statically allocated instance of Objective-C class `%s'\",\n \t   IDENTIFIER_POINTER (type));\n }\n@@ -2351,7 +2351,7 @@ get_class_reference (tree ident)\n #endif\n   orig_ident = ident;\n \n-  if (!(ident = is_class_name (ident)))\n+  if (!(ident = objc_is_class_name (ident)))\n     {\n       error (\"`%s' is not an Objective-C class name or alias\",\n \t     IDENTIFIER_POINTER (orig_ident));\n@@ -2468,9 +2468,9 @@ objc_declare_alias (tree alias_ident, tree class_ident)\n   }\n #endif /* OBJCPLUS */\n \n-  if (!(underlying_class = is_class_name (class_ident)))\n+  if (!(underlying_class = objc_is_class_name (class_ident)))\n     warning (\"cannot find class `%s'\", IDENTIFIER_POINTER (class_ident));\n-  else if (is_class_name (alias_ident))\n+  else if (objc_is_class_name (alias_ident))\n     warning (\"class `%s' already exists\", IDENTIFIER_POINTER (alias_ident));\n   else\n     alias_chain = tree_cons (underlying_class, alias_ident, alias_chain);\n@@ -2490,7 +2490,7 @@ objc_declare_class (tree ident_list)\n     {\n       tree ident = TREE_VALUE (list);\n \n-      if (! is_class_name (ident))\n+      if (! objc_is_class_name (ident))\n \t{\n \t  tree record = lookup_name (ident);\n \t\n@@ -2510,7 +2510,7 @@ objc_declare_class (tree ident_list)\n }\n \n tree\n-is_class_name (tree ident)\n+objc_is_class_name (tree ident)\n {\n   tree chain;\n \n@@ -2563,10 +2563,10 @@ objc_is_object_ptr (tree type)\n       && (IS_ID (type)\n \t  || TREE_TYPE (type) == TREE_TYPE (objc_class_type)))\n     return type;\n-  return is_class_name (OBJC_TYPE_NAME (TREE_TYPE (type)));\n+  return objc_is_class_name (OBJC_TYPE_NAME (TREE_TYPE (type)));\n }\n \n-tree\n+static tree\n lookup_interface (tree ident)\n {\n   tree chain;\n@@ -6766,7 +6766,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n   CLASS_SUPER_NAME (class) = super_name;\n   CLASS_CLS_METHODS (class) = NULL_TREE;\n \n-  if (! is_class_name (class_name)\n+  if (! objc_is_class_name (class_name)\n       && (decl = lookup_name (class_name)))\n     {\n       error (\"`%s' redeclared as different kind of symbol\",\n@@ -7853,7 +7853,7 @@ get_super_receiver (void)\n \tTREE_USED (UOBJC_SUPER_decl) = 1;\n \tDECL_ARTIFICIAL (UOBJC_SUPER_decl) = 1;\n \n-\tUOBJC_SUPER_scope = get_current_scope ();\n+\tUOBJC_SUPER_scope = objc_get_current_scope ();\n       }\n \n       /* Set receiver to self.  */\n@@ -7951,7 +7951,7 @@ void\n objc_clear_super_receiver (void)\n {\n   if (objc_method_context\n-      && UOBJC_SUPER_scope == get_current_scope ()) {\n+      && UOBJC_SUPER_scope == objc_get_current_scope ()) {\n     UOBJC_SUPER_decl = 0;\n     UOBJC_SUPER_scope = 0;\n   }\n@@ -9053,7 +9053,7 @@ generate_objc_image_info (void)\n /* Look up ID as an instance variable.  */\n \n tree\n-lookup_objc_ivar (tree id)\n+objc_lookup_ivar (tree id)\n {\n   tree decl;\n "}, {"sha": "5df3323ff7681aa8e6d254ae24d17f8cc4854d73", "filename": "gcc/stub-objc.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc095846795081196f13f224804c85571ff2f97d/gcc%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstub-objc.c?ref=bc095846795081196f13f224804c85571ff2f97d", "patch": "@@ -28,13 +28,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"c-common.h\"\n \n tree\n-lookup_interface (tree ARG_UNUSED (arg))\n-{\n-  return 0;\n-}\n-\n-tree\n-is_class_name (tree ARG_UNUSED (arg))\n+objc_is_class_name (tree ARG_UNUSED (arg))\n {\n   return 0;\n }\n@@ -46,7 +40,7 @@ objc_is_object_ptr (tree ARG_UNUSED (arg))\n }\n \n tree\n-lookup_objc_ivar (tree ARG_UNUSED (arg))\n+objc_lookup_ivar (tree ARG_UNUSED (arg))\n {\n   return 0;\n }"}]}