{"sha": "aeba6c285a2b7da7ee090cc51d3e96838b567398", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViYTZjMjg1YTJiN2RhN2VlMDkwY2M1MWQzZTk2ODM4YjU2NzM5OA==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-18T12:06:08Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-18T12:06:08Z"}, "message": "stmt.c (emit_case_bit_tests): Call fold_convert instead of convert.\n\n2005-02-18  James A. Morrison  <phython@gcc.gnu.org>\n\n        * stmt.c (emit_case_bit_tests): Call fold_convert instead of convert.\n        (estimate_case_costs): Don't call convert.\n        * expmed.c (expand_shift): Likewise.\n        (make_tree): Call fold_convert instead of convert.\n\nFrom-SVN: r95224", "tree": {"sha": "fa3567697268e4557c529527a229d4ed643ebfab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa3567697268e4557c529527a229d4ed643ebfab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeba6c285a2b7da7ee090cc51d3e96838b567398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeba6c285a2b7da7ee090cc51d3e96838b567398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeba6c285a2b7da7ee090cc51d3e96838b567398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeba6c285a2b7da7ee090cc51d3e96838b567398/comments", "author": null, "committer": null, "parents": [{"sha": "87bd0274cc73911840adafeb1593e5b592a91a35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87bd0274cc73911840adafeb1593e5b592a91a35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87bd0274cc73911840adafeb1593e5b592a91a35"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "ca5a33b871ca6a5add257309371105f3e5a31a7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeba6c285a2b7da7ee090cc51d3e96838b567398/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeba6c285a2b7da7ee090cc51d3e96838b567398/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aeba6c285a2b7da7ee090cc51d3e96838b567398", "patch": "@@ -1,3 +1,10 @@\n+2005-02-18  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* stmt.c (emit_case_bit_tests): Call fold_convert instead of convert.\n+\t(estimate_case_costs): Don't call convert.\n+\t* expmed.c (expand_shift): Likewise.\n+\t(make_tree): Call fold_convert instead of convert. \n+\n 2005-02-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/19813"}, {"sha": "55eb7d113d59a5732f2480de83a34ae775401469", "filename": "gcc/expmed.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeba6c285a2b7da7ee090cc51d3e96838b567398/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeba6c285a2b7da7ee090cc51d3e96838b567398/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=aeba6c285a2b7da7ee090cc51d3e96838b567398", "patch": "@@ -2231,9 +2231,8 @@ expand_shift (enum tree_code code, enum machine_mode mode, rtx shifted,\n \t      tree type = TREE_TYPE (amount);\n \t      tree new_amount = make_tree (type, op1);\n \t      tree other_amount\n-\t\t= fold (build2 (MINUS_EXPR, type, convert\n-\t\t\t\t(type, build_int_cst\n-\t\t\t\t (NULL_TREE, GET_MODE_BITSIZE (mode))),\n+\t\t= fold (build2 (MINUS_EXPR, type, \n+\t\t\t\tbuild_int_cst (type, GET_MODE_BITSIZE (mode)),\n \t\t\t\tamount));\n \n \t      shifted = force_reg (mode, shifted);\n@@ -4871,40 +4870,36 @@ make_tree (tree type, rtx x)\n \n     case LSHIFTRT:\n       t = lang_hooks.types.unsigned_type (type);\n-      return fold (convert (type,\n-\t\t\t    build2 (RSHIFT_EXPR, t,\n-\t\t\t\t    make_tree (t, XEXP (x, 0)),\n-\t\t\t\t    make_tree (type, XEXP (x, 1)))));\n+      return fold_convert (type, build2 (RSHIFT_EXPR, t,\n+\t\t\t    \t\t make_tree (t, XEXP (x, 0)),\n+\t\t\t\t    \t make_tree (type, XEXP (x, 1))));\n \n     case ASHIFTRT:\n       t = lang_hooks.types.signed_type (type);\n-      return fold (convert (type,\n-\t\t\t    build2 (RSHIFT_EXPR, t,\n-\t\t\t\t    make_tree (t, XEXP (x, 0)),\n-\t\t\t\t    make_tree (type, XEXP (x, 1)))));\n+      return fold_convert (type, build2 (RSHIFT_EXPR, t,\n+\t\t\t\t\t make_tree (t, XEXP (x, 0)),\n+\t\t\t\t    \t make_tree (type, XEXP (x, 1))));\n \n     case DIV:\n       if (TREE_CODE (type) != REAL_TYPE)\n \tt = lang_hooks.types.signed_type (type);\n       else\n \tt = type;\n \n-      return fold (convert (type,\n-\t\t\t    build2 (TRUNC_DIV_EXPR, t,\n-\t\t\t\t    make_tree (t, XEXP (x, 0)),\n-\t\t\t\t    make_tree (t, XEXP (x, 1)))));\n+      return fold_convert (type, build2 (TRUNC_DIV_EXPR, t,\n+\t\t\t\t    \t make_tree (t, XEXP (x, 0)),\n+\t\t\t\t    \t make_tree (t, XEXP (x, 1))));\n     case UDIV:\n       t = lang_hooks.types.unsigned_type (type);\n-      return fold (convert (type,\n-\t\t\t    build2 (TRUNC_DIV_EXPR, t,\n-\t\t\t\t    make_tree (t, XEXP (x, 0)),\n-\t\t\t\t    make_tree (t, XEXP (x, 1)))));\n+      return fold_convert (type, build2 (TRUNC_DIV_EXPR, t,\n+\t\t\t\t    \t make_tree (t, XEXP (x, 0)),\n+\t\t\t\t    \t make_tree (t, XEXP (x, 1))));\n \n     case SIGN_EXTEND:\n     case ZERO_EXTEND:\n       t = lang_hooks.types.type_for_mode (GET_MODE (XEXP (x, 0)),\n \t\t\t\t\t  GET_CODE (x) == ZERO_EXTEND);\n-      return fold (convert (type, make_tree (t, XEXP (x, 0))));\n+      return fold_convert (type, make_tree (t, XEXP (x, 0)));\n \n     default:\n       t = build_decl (VAR_DECL, NULL_TREE, type);"}, {"sha": "a438532b11bb3f0242102e85747b96658dde0463", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeba6c285a2b7da7ee090cc51d3e96838b567398/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeba6c285a2b7da7ee090cc51d3e96838b567398/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=aeba6c285a2b7da7ee090cc51d3e96838b567398", "patch": "@@ -2239,8 +2239,8 @@ emit_case_bit_tests (tree index_type, tree index_expr, tree minval,\n   qsort (test, count, sizeof(*test), case_bit_test_cmp);\n \n   index_expr = fold (build2 (MINUS_EXPR, index_type,\n-\t\t\t     convert (index_type, index_expr),\n-\t\t\t     convert (index_type, minval)));\n+\t\t\t     fold_convert (index_type, index_expr),\n+\t\t\t     fold_convert (index_type, minval)));\n   index = expand_expr (index_expr, NULL_RTX, VOIDmode, 0);\n   do_pending_stack_adjust ();\n \n@@ -2612,8 +2612,7 @@ static int\n estimate_case_costs (case_node_ptr node)\n {\n   tree min_ascii = integer_minus_one_node;\n-  tree max_ascii = convert (TREE_TYPE (node->high),\n-\t\t\t    build_int_cst (NULL_TREE, 127));\n+  tree max_ascii = build_int_cst (TREE_TYPE (node->high), 127);\n   case_node_ptr n;\n   int i;\n "}]}