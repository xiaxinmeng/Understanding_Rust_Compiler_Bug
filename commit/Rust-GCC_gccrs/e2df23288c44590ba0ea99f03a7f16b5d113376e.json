{"sha": "e2df23288c44590ba0ea99f03a7f16b5d113376e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJkZjIzMjg4YzQ0NTkwYmEwZWE5OWYwM2E3ZjE2YjVkMTEzMzc2ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-23T15:54:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-23T15:54:39Z"}, "message": "re PR c++/77739 (internal compiler error: in create_tmp_var, at gimple-expr.c:524)\n\n\tPR c++/77739\n\t* cp-gimplify.c (cp_gimplify_tree) <case VEC_INIT_EXPR>: Pass\n\tfalse as handle_invisiref_parm_p to cp_genericize_tree.\n\t(struct cp_genericize_data): Add handle_invisiref_parm_p field.\n\t(cp_genericize_r): Don't wrap is_invisiref_parm into references\n\tif !wtd->handle_invisiref_parm_p.\n\t(cp_genericize_tree): Add handle_invisiref_parm_p argument,\n\tset wtd.handle_invisiref_parm_p to it.\n\t(cp_genericize): Pass true as handle_invisiref_parm_p to\n\tcp_genericize_tree.  Formatting fix.\n\n\t* g++.dg/cpp1y/pr77739.C: New test.\n\nFrom-SVN: r242766", "tree": {"sha": "5626b56e9d7cf58efbbf43c1fe8f990dbc77e0fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5626b56e9d7cf58efbbf43c1fe8f990dbc77e0fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2df23288c44590ba0ea99f03a7f16b5d113376e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2df23288c44590ba0ea99f03a7f16b5d113376e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2df23288c44590ba0ea99f03a7f16b5d113376e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2df23288c44590ba0ea99f03a7f16b5d113376e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "756316926e5a112e15c800de34e4c2fc501d45be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/756316926e5a112e15c800de34e4c2fc501d45be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/756316926e5a112e15c800de34e4c2fc501d45be"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "66ea957e1b7c5bd1e82580a0191afae83bb66db8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2df23288c44590ba0ea99f03a7f16b5d113376e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2df23288c44590ba0ea99f03a7f16b5d113376e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e2df23288c44590ba0ea99f03a7f16b5d113376e", "patch": "@@ -1,3 +1,16 @@\n+2016-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/77739\n+\t* cp-gimplify.c (cp_gimplify_tree) <case VEC_INIT_EXPR>: Pass\n+\tfalse as handle_invisiref_parm_p to cp_genericize_tree.\n+\t(struct cp_genericize_data): Add handle_invisiref_parm_p field.\n+\t(cp_genericize_r): Don't wrap is_invisiref_parm into references\n+\tif !wtd->handle_invisiref_parm_p.\n+\t(cp_genericize_tree): Add handle_invisiref_parm_p argument,\n+\tset wtd.handle_invisiref_parm_p to it.\n+\t(cp_genericize): Pass true as handle_invisiref_parm_p to\n+\tcp_genericize_tree.  Formatting fix.\n+\n 2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c++/71973"}, {"sha": "0b8f9fcb5f2c411bd5ddfd38a8331364041a980e", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2df23288c44590ba0ea99f03a7f16b5d113376e/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2df23288c44590ba0ea99f03a7f16b5d113376e/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=e2df23288c44590ba0ea99f03a7f16b5d113376e", "patch": "@@ -38,7 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n \n static tree cp_genericize_r (tree *, int *, void *);\n static tree cp_fold_r (tree *, int *, void *);\n-static void cp_genericize_tree (tree*);\n+static void cp_genericize_tree (tree*, bool);\n static tree cp_fold (tree);\n \n /* Local declarations.  */\n@@ -623,7 +623,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t\t\t\t  tf_warning_or_error);\n \thash_set<tree> pset;\n \tcp_walk_tree (expr_p, cp_fold_r, &pset, NULL);\n-\tcp_genericize_tree (expr_p);\n+\tcp_genericize_tree (expr_p, false);\n \tret = GS_OK;\n \tinput_location = loc;\n       }\n@@ -995,6 +995,7 @@ struct cp_genericize_data\n   struct cp_genericize_omp_taskreg *omp_ctx;\n   tree try_block;\n   bool no_sanitize_p;\n+  bool handle_invisiref_parm_p;\n };\n \n /* Perform any pre-gimplification folding of C++ front end trees to\n@@ -1111,7 +1112,7 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n     }\n \n   /* Otherwise, do dereference invisible reference parms.  */\n-  if (is_invisiref_parm (stmt))\n+  if (wtd->handle_invisiref_parm_p && is_invisiref_parm (stmt))\n     {\n       *stmt_p = convert_from_reference (stmt);\n       *walk_subtrees = 0;\n@@ -1511,7 +1512,7 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n /* Lower C++ front end trees to GENERIC in T_P.  */\n \n static void\n-cp_genericize_tree (tree* t_p)\n+cp_genericize_tree (tree* t_p, bool handle_invisiref_parm_p)\n {\n   struct cp_genericize_data wtd;\n \n@@ -1520,6 +1521,7 @@ cp_genericize_tree (tree* t_p)\n   wtd.omp_ctx = NULL;\n   wtd.try_block = NULL_TREE;\n   wtd.no_sanitize_p = false;\n+  wtd.handle_invisiref_parm_p = handle_invisiref_parm_p;\n   cp_walk_tree (t_p, cp_genericize_r, &wtd, NULL);\n   delete wtd.p_set;\n   wtd.bind_expr_stack.release ();\n@@ -1639,12 +1641,12 @@ cp_genericize (tree fndecl)\n   /* Expand all the array notations here.  */\n   if (flag_cilkplus \n       && contains_array_notation_expr (DECL_SAVED_TREE (fndecl)))\n-    DECL_SAVED_TREE (fndecl) = \n-      expand_array_notation_exprs (DECL_SAVED_TREE (fndecl));\n+    DECL_SAVED_TREE (fndecl)\n+      = expand_array_notation_exprs (DECL_SAVED_TREE (fndecl));\n \n   /* We do want to see every occurrence of the parms, so we can't just use\n      walk_tree's hash functionality.  */\n-  cp_genericize_tree (&DECL_SAVED_TREE (fndecl));\n+  cp_genericize_tree (&DECL_SAVED_TREE (fndecl), true);\n \n   if (flag_sanitize & SANITIZE_RETURN\n       && do_ubsan_in_current_function ())"}, {"sha": "ca673eea1da0bc5a0d74ba949e35b0061566dba1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2df23288c44590ba0ea99f03a7f16b5d113376e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2df23288c44590ba0ea99f03a7f16b5d113376e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2df23288c44590ba0ea99f03a7f16b5d113376e", "patch": "@@ -1,3 +1,8 @@\n+2016-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/77739\n+\t* g++.dg/cpp1y/pr77739.C: New test.\n+\n 2016-11-23  Martin Jambor  <mjambor@suse.cz>\n \n \t* c-c++-common/gomp/gridify-1.c: Update scan string."}, {"sha": "96183305a7d3e001af1949f42a03180c6e584882", "filename": "gcc/testsuite/g++.dg/cpp1y/pr77739.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2df23288c44590ba0ea99f03a7f16b5d113376e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77739.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2df23288c44590ba0ea99f03a7f16b5d113376e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77739.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77739.C?ref=e2df23288c44590ba0ea99f03a7f16b5d113376e", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/77739\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  A();\n+  A(const A &);\n+};\n+struct B {\n+  B();\n+  template <typename... Args> auto g(Args &&... p1) {\n+    return [=] { f(p1...); };\n+  }\n+  void f(A, const char *);\n+};\n+B::B() { g(A(), \"\"); }"}]}