{"sha": "f5e336b111def9f729b874fc1af3bddb73a3d612", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlMzM2YjExMWRlZjlmNzI5Yjg3NGZjMWFmM2JkZGI3M2EzZDYxMg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2016-06-16T12:29:29Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2016-06-16T12:29:29Z"}, "message": "[ARC] Use GOTOFFPC relocation for pc-relative accesses.\n\ngcc/\n2016-06-16  Claudiu Zissulescu  <claziss@synopsys.com>\n\t    Joern Rennecke  <joern.rennecke@embecosm.com>\n\n\t* config/arc/arc.c (arc_print_operand_address): Handle pc-relative\n\taddresses.\n\t(arc_needs_pcl_p): Add GOTOFFPC.\n\t(arc_legitimate_pic_addr_p): Likewise.\n\t(arc_output_pic_addr_const): Likewise.\n\t(arc_legitimize_pic_address): Generate a pc-relative address using\n\tGOTOFFPC.\n\t(arc_output_libcall): Use @pcl syntax.\n\t(arc_delegitimize_address_0): Delegitimize ARC_UNSPEC_GOTOFFPC.\n\t* config/arc/arc.md (\"unspec\"): Add ARC_UNSPEC_GOTOFFPC.\n\t(*movsi_insn): Use @pcl syntax.\n\t(doloop_begin_i): Likewise.\n\nCo-Authored-By: Joern Rennecke <joern.rennecke@embecosm.com>\n\nFrom-SVN: r237525", "tree": {"sha": "bda8cadb2a0bdcd4fe4d0b967b880e03a36a1a96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bda8cadb2a0bdcd4fe4d0b967b880e03a36a1a96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5e336b111def9f729b874fc1af3bddb73a3d612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e336b111def9f729b874fc1af3bddb73a3d612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e336b111def9f729b874fc1af3bddb73a3d612", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e336b111def9f729b874fc1af3bddb73a3d612/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f7fa20fdd7f13844868541c57063327bf3bec51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7fa20fdd7f13844868541c57063327bf3bec51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7fa20fdd7f13844868541c57063327bf3bec51"}], "stats": {"total": 75, "additions": 49, "deletions": 26}, "files": [{"sha": "8847e672972219e3d400ac31d0985a940e98b597", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e336b111def9f729b874fc1af3bddb73a3d612/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e336b111def9f729b874fc1af3bddb73a3d612/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5e336b111def9f729b874fc1af3bddb73a3d612", "patch": "@@ -1,3 +1,19 @@\n+2016-06-16  Claudiu Zissulescu  <claziss@synopsys.com>\n+\t    Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* config/arc/arc.c (arc_print_operand_address): Handle pc-relative\n+\taddresses.\n+\t(arc_needs_pcl_p): Add GOTOFFPC.\n+\t(arc_legitimate_pic_addr_p): Likewise.\n+\t(arc_output_pic_addr_const): Likewise.\n+\t(arc_legitimize_pic_address): Generate a pc-relative address using\n+\tGOTOFFPC.\n+\t(arc_output_libcall): Use @pcl syntax.\n+\t(arc_delegitimize_address_0): Delegitimize ARC_UNSPEC_GOTOFFPC.\n+\t* config/arc/arc.md (\"unspec\"): Add ARC_UNSPEC_GOTOFFPC.\n+\t(*movsi_insn): Use @pcl syntax.\n+\t(doloop_begin_i): Likewise.\n+\n 2016-06-16  Martin Liska  <mliska@suse.cz>\n \n \t* predict.def: Define a new predictor."}, {"sha": "c0aa075cddb9da0e1f676db8d53d827e1b822181", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e336b111def9f729b874fc1af3bddb73a3d612/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e336b111def9f729b874fc1af3bddb73a3d612/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=f5e336b111def9f729b874fc1af3bddb73a3d612", "patch": "@@ -3528,7 +3528,8 @@ arc_print_operand_address (FILE *file , rtx addr)\n \t\t || XINT (c, 1) == UNSPEC_TLS_IE))\n \t    || (GET_CODE (c) == PLUS\n \t\t&& GET_CODE (XEXP (c, 0)) == UNSPEC\n-\t\t&& (XINT (XEXP (c, 0), 1) == UNSPEC_TLS_OFF)))\n+\t\t&& (XINT (XEXP (c, 0), 1) == UNSPEC_TLS_OFF\n+\t\t    || XINT (XEXP (c, 0), 1) == ARC_UNSPEC_GOTOFFPC)))\n \t  {\n \t    arc_output_pic_addr_const (file, c, 0);\n \t    break;\n@@ -4636,6 +4637,7 @@ arc_needs_pcl_p (rtx x)\n     switch (XINT (x, 1))\n       {\n       case ARC_UNSPEC_GOT:\n+      case ARC_UNSPEC_GOTOFFPC:\n       case UNSPEC_TLS_GD:\n       case UNSPEC_TLS_IE:\n \treturn true;\n@@ -4698,9 +4700,10 @@ arc_legitimate_pic_addr_p (rtx addr)\n       || XVECLEN (addr, 0) != 1)\n     return false;\n \n-  /* Must be one of @GOT, @GOTOFF, @tlsgd, tlsie.  */\n+  /* Must be one of @GOT, @GOTOFF, @GOTOFFPC, @tlsgd, tlsie.  */\n   if (XINT (addr, 1) != ARC_UNSPEC_GOT\n       && XINT (addr, 1) != ARC_UNSPEC_GOTOFF\n+      && XINT (addr, 1) != ARC_UNSPEC_GOTOFFPC\n       && XINT (addr, 1) != UNSPEC_TLS_GD\n       && XINT (addr, 1) != UNSPEC_TLS_IE)\n     return false;\n@@ -4917,26 +4920,15 @@ arc_legitimize_pic_address (rtx orig, rtx oldx)\n       else if (!flag_pic)\n \treturn orig;\n       else if (CONSTANT_POOL_ADDRESS_P (addr) || SYMBOL_REF_LOCAL_P (addr))\n-\t{\n-\t  /* This symbol may be referenced via a displacement from the\n-\t     PIC base address (@GOTOFF).  */\n+\treturn gen_rtx_CONST (Pmode,\n+\t\t\t      gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr),\n+\t\t\t      ARC_UNSPEC_GOTOFFPC));\n \n-\t  /* FIXME: if we had a way to emit pc-relative adds that\n-\t     don't create a GOT entry, we could do without the use of\n-\t     the gp register.  */\n-\t  crtl->uses_pic_offset_table = 1;\n-\t  pat = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), ARC_UNSPEC_GOTOFF);\n-\t  pat = gen_rtx_CONST (Pmode, pat);\n-\t  pat = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, pat);\n-\t}\n-      else\n-\t{\n-\t  /* This symbol must be referenced via a load from the\n-\t     Global Offset Table (@GOTPC).  */\n-\t  pat = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), ARC_UNSPEC_GOT);\n-\t  pat = gen_rtx_CONST (Pmode, pat);\n-\t  pat = gen_const_mem (Pmode, pat);\n-\t}\n+      /* This symbol must be referenced via a load from the Global\n+\t Offset Table (@GOTPC).  */\n+      pat = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), ARC_UNSPEC_GOT);\n+      pat = gen_rtx_CONST (Pmode, pat);\n+      pat = gen_const_mem (Pmode, pat);\n \n       if (oldx == NULL)\n \toldx = gen_reg_rtx (Pmode);\n@@ -4952,6 +4944,7 @@ arc_legitimize_pic_address (rtx orig, rtx oldx)\n \t  if (GET_CODE (addr) == UNSPEC)\n \t    {\n \t      /* Check that the unspec is one of the ones we generate?  */\n+\t      return orig;\n \t    }\n \t  else\n \t    gcc_assert (GET_CODE (addr) == PLUS);\n@@ -5105,6 +5098,9 @@ arc_output_pic_addr_const (FILE * file, rtx x, int code)\n \tcase ARC_UNSPEC_GOTOFF:\n \t  suffix = \"@gotoff\";\n \t  break;\n+\tcase ARC_UNSPEC_GOTOFFPC:\n+\t  suffix = \"@pcl\",   pcrel = true;\n+\t  break;\n \tcase ARC_UNSPEC_PLT:\n \t  suffix = \"@plt\";\n \t  break;\n@@ -5389,6 +5385,7 @@ arc_legitimate_constant_p (machine_mode mode, rtx x)\n \t  {\n \t  case ARC_UNSPEC_PLT:\n \t  case ARC_UNSPEC_GOTOFF:\n+\t  case ARC_UNSPEC_GOTOFFPC:\n \t  case ARC_UNSPEC_GOT:\n \t  case UNSPEC_TLS_GD:\n \t  case UNSPEC_TLS_IE:\n@@ -7648,7 +7645,7 @@ arc_output_libcall (const char *fname)\n      || (TARGET_MEDIUM_CALLS && arc_ccfsm_cond_exec_p ()))\n     {\n       if (flag_pic)\n-\tsprintf (buf, \"add r12,pcl,@%s-(.&-4)\\n\\tjl%%!%%* [r12]\", fname);\n+\tsprintf (buf, \"add r12,pcl,@%s@pcl\\n\\tjl%%!%%* [r12]\", fname);\n       else\n \tsprintf (buf, \"jl%%! @%s\", fname);\n     }\n@@ -8578,13 +8575,21 @@ arc_legitimize_address (rtx orig_x, rtx oldx, machine_mode mode)\n static rtx\n arc_delegitimize_address_0 (rtx x)\n {\n-  rtx u, gp;\n+  rtx u, gp, p;\n \n   if (GET_CODE (x) == CONST && GET_CODE (u = XEXP (x, 0)) == UNSPEC)\n     {\n-      if (XINT (u, 1) == ARC_UNSPEC_GOT)\n+      if (XINT (u, 1) == ARC_UNSPEC_GOT\n+\t  || XINT (u, 1) == ARC_UNSPEC_GOTOFFPC)\n \treturn XVECEXP (u, 0, 0);\n     }\n+  else if (GET_CODE (x) == CONST && GET_CODE (p = XEXP (x, 0)) == PLUS\n+\t   && GET_CODE (u = XEXP (p, 0)) == UNSPEC\n+\t   && (XINT (u, 1) == ARC_UNSPEC_GOT\n+\t       || XINT (u, 1) == ARC_UNSPEC_GOTOFFPC))\n+    return gen_rtx_CONST\n+\t    (GET_MODE (x),\n+\t     gen_rtx_PLUS (GET_MODE (p), XVECEXP (u, 0, 0), XEXP (p, 1)));\n   else if (GET_CODE (x) == PLUS\n \t   && ((REG_P (gp = XEXP (x, 0))\n \t\t&& REGNO (gp) == PIC_OFFSET_TABLE_REGNUM)"}, {"sha": "1102c53da2606e5c6f95ffc8f73cd9c8767f2e9e", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e336b111def9f729b874fc1af3bddb73a3d612/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e336b111def9f729b874fc1af3bddb73a3d612/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=f5e336b111def9f729b874fc1af3bddb73a3d612", "patch": "@@ -102,6 +102,7 @@\n ;;  UNSPEC_GOT       4        symbol to be rerenced through the GOT\n ;;  UNSPEC_GOTOFF    5        Local symbol.To be referenced relative to the\n ;;                            GOTBASE.(Referenced as @GOTOFF)\n+;;  UNSPEC_GOTOFFPC  6        Local symbol.  To be referenced pc-relative.\n ;;  ----------------------------------------------------------------------------\n \n (define_c_enum \"unspec\" [\n@@ -111,6 +112,7 @@\n   ARC_UNSPEC_PLT\n   ARC_UNSPEC_GOT\n   ARC_UNSPEC_GOTOFF\n+  ARC_UNSPEC_GOTOFFPC\n   UNSPEC_TLS_GD\n   UNSPEC_TLS_LD\n   UNSPEC_TLS_IE\n@@ -725,7 +727,7 @@\n    * return INTVAL (operands[1]) & 0xffffff ? \\\"movbi.cl %0,%1 >> %p1,%p1,8;8\\\" : \\\"movbi.cl %0,%L1 >> 24,24,8;9\\\";\n    mov%? %0,%1\t\t;10\n    add %0,%S1\t\t;11\n-   * return arc_get_unalign () ? \\\"add %0,pcl,%1-.+2\\\" : \\\"add %0,pcl,%1-.\\\";\n+   add %0,pcl,%1@pcl    ;12\n    mov%? %0,%S1%&\t;13\n    mov%? %0,%S1\t\t;14\n    ld%? %0,%1%&\t\t;15\n@@ -5155,7 +5157,7 @@\n \t  /* ??? Can do better for when a scratch register\n \t     is known.  But that would require extra testing.  */\n \t  arc_clear_unalign ();\n-\t  return \".p2align 2\\;push_s r0\\;add r0,pcl,24\\;sr r0,[2]; LP_START\\;add r0,pcl,.L__GCC__LP%1-.+2\\;sr r0,[3]; LP_END\\;pop_s r0\";\n+\t  return \".p2align 2\\;push_s r0\\;add r0,pcl,24\\;sr r0,[2]; LP_START\\;add r0,pcl,.L__GCC__LP%1@pcl\\;sr r0,[3]; LP_END\\;pop_s r0\";\n \t}\n       output_asm_insn ((size < 2048\n \t\t\t? \"lp .L__GCC__LP%1\" : \"sr .L__GCC__LP%1,[3]; LP_END\"),"}]}