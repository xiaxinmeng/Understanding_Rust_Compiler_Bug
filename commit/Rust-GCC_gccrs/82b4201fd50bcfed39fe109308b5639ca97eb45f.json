{"sha": "82b4201fd50bcfed39fe109308b5639ca97eb45f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJiNDIwMWZkNTBiY2ZlZDM5ZmUxMDkzMDhiNTYzOWNhOTdlYjQ1Zg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-03-06T17:47:58Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-03-06T17:47:58Z"}, "message": "tree.h (BUILTIN_EXP10_P, [...]): New macros.\n\n\t* tree.h (BUILTIN_EXP10_P, BUILTIN_EXPONENT_P, BUILTIN_SQRT_P,\n\tBUILTIN_CBRT_P, BUILTIN_ROOT_P): New macros.\n\n\t* builtins.c (fold_builtin_logarithm, fold_builtin): Use new\n\tmacros.\n\t* fold-const.c (fold_mathfn_compare, fold): Likewise.\n\nFrom-SVN: r79023", "tree": {"sha": "824842680cdc4f64bb5553896090ab68f59a879f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/824842680cdc4f64bb5553896090ab68f59a879f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82b4201fd50bcfed39fe109308b5639ca97eb45f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b4201fd50bcfed39fe109308b5639ca97eb45f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b4201fd50bcfed39fe109308b5639ca97eb45f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b4201fd50bcfed39fe109308b5639ca97eb45f/comments", "author": null, "committer": null, "parents": [{"sha": "0c2cc7b37aca08ebab5341b409418c98d583507a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2cc7b37aca08ebab5341b409418c98d583507a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2cc7b37aca08ebab5341b409418c98d583507a"}], "stats": {"total": 86, "additions": 37, "deletions": 49}, "files": [{"sha": "84824f90f8f8f0f630167bbc18ad609d5aea0197", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b4201fd50bcfed39fe109308b5639ca97eb45f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b4201fd50bcfed39fe109308b5639ca97eb45f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82b4201fd50bcfed39fe109308b5639ca97eb45f", "patch": "@@ -1,3 +1,12 @@\n+2004-03-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* tree.h (BUILTIN_EXP10_P, BUILTIN_EXPONENT_P, BUILTIN_SQRT_P,\n+\tBUILTIN_CBRT_P, BUILTIN_ROOT_P): New macros.\n+\n+\t* builtins.c (fold_builtin_logarithm, fold_builtin): Use new\n+\tmacros.\n+\t* fold-const.c (fold_mathfn_compare, fold): Likewise.\n+\n 2004-03-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/14343"}, {"sha": "1eeedd254bc9c5019bdb1360f21078d88a0dbf86", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b4201fd50bcfed39fe109308b5639ca97eb45f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b4201fd50bcfed39fe109308b5639ca97eb45f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=82b4201fd50bcfed39fe109308b5639ca97eb45f", "patch": "@@ -6212,10 +6212,7 @@ fold_builtin_logarithm (tree exp, const REAL_VALUE_TYPE *value)\n \t\t  && (fcode == BUILT_IN_EXP2\n \t\t      || fcode == BUILT_IN_EXP2F\n \t\t      || fcode == BUILT_IN_EXP2L))\n-\t      || (value == &dconst10\n-\t\t  && (fcode == BUILT_IN_EXP10\n-\t\t      || fcode == BUILT_IN_EXP10F\n-\t\t      || fcode == BUILT_IN_EXP10L))))\n+\t      || (value == &dconst10 && (BUILTIN_EXP10_P (fcode)))))\n \treturn convert (type, TREE_VALUE (TREE_OPERAND (arg, 1)));\n \n       /* Optimize logN(func()) for various exponential functions.  We\n@@ -6725,12 +6722,9 @@ fold_builtin (tree exp)\n \t\treturn build_real (type, r);\n \t    }\n \n-\t  /* Optimize sqrt(exp(x)) = exp(x*0.5).  */\n+\t  /* Optimize sqrt(expN(x)) = expN(x*0.5).  */\n \t  fcode = builtin_mathfn_code (arg);\n-\t  if (flag_unsafe_math_optimizations\n-\t      && (fcode == BUILT_IN_EXP\n-\t\t  || fcode == BUILT_IN_EXPF\n-\t\t  || fcode == BUILT_IN_EXPL))\n+\t  if (flag_unsafe_math_optimizations && BUILTIN_EXPONENT_P (fcode))\n \t    {\n \t      tree expfn = TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n \t      arg = fold (build (MULT_EXPR, type,\n@@ -6948,12 +6942,9 @@ fold_builtin (tree exp)\n \t\t}\n \t    }\n \n-\t  /* Optimize pow(exp(x),y) = exp(x*y).  */\n+\t  /* Optimize pow(expN(x),y) = expN(x*y).  */\n \t  fcode = builtin_mathfn_code (arg0);\n-\t  if (flag_unsafe_math_optimizations\n-\t      && (fcode == BUILT_IN_EXP\n-\t\t  || fcode == BUILT_IN_EXPF\n-\t\t  || fcode == BUILT_IN_EXPL))\n+\t  if (flag_unsafe_math_optimizations && BUILTIN_EXPONENT_P (fcode))\n \t    {\n \t      tree expfn = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n \t      tree arg = TREE_VALUE (TREE_OPERAND (arg0, 1));\n@@ -6963,10 +6954,7 @@ fold_builtin (tree exp)\n \t    }\n \n \t  /* Optimize pow(sqrt(x),y) = pow(x,y*0.5).  */\n-\t  if (flag_unsafe_math_optimizations\n-\t      && (fcode == BUILT_IN_SQRT\n-\t\t  || fcode == BUILT_IN_SQRTF\n-\t\t  || fcode == BUILT_IN_SQRTL))\n+\t  if (flag_unsafe_math_optimizations && BUILTIN_SQRT_P (fcode))\n \t    {\n \t      tree narg0 = TREE_VALUE (TREE_OPERAND (arg0, 1));\n \t      tree narg1 = fold (build (MULT_EXPR, type, arg1,"}, {"sha": "9bf3b7a6013261ece35a9c84572a05398e9f93b6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b4201fd50bcfed39fe109308b5639ca97eb45f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b4201fd50bcfed39fe109308b5639ca97eb45f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=82b4201fd50bcfed39fe109308b5639ca97eb45f", "patch": "@@ -4985,9 +4985,7 @@ fold_mathfn_compare (enum built_in_function fcode, enum tree_code code,\n {\n   REAL_VALUE_TYPE c;\n \n-  if (fcode == BUILT_IN_SQRT\n-      || fcode == BUILT_IN_SQRTF\n-      || fcode == BUILT_IN_SQRTL)\n+  if (BUILTIN_SQRT_P (fcode))\n     {\n       tree arg = TREE_VALUE (TREE_OPERAND (arg0, 1));\n       enum machine_mode mode = TYPE_MODE (TREE_TYPE (arg0));\n@@ -6425,9 +6423,7 @@ fold (tree expr)\n \t      enum built_in_function fcode1 = builtin_mathfn_code (arg1);\n \n \t      /* Optimizations of sqrt(...)*sqrt(...).  */\n-\t      if ((fcode0 == BUILT_IN_SQRT && fcode1 == BUILT_IN_SQRT)\n-\t\t  || (fcode0 == BUILT_IN_SQRTF && fcode1 == BUILT_IN_SQRTF)\n-\t\t  || (fcode0 == BUILT_IN_SQRTL && fcode1 == BUILT_IN_SQRTL))\n+\t      if (fcode0 == fcode1 && BUILTIN_SQRT_P (fcode0))\n \t\t{\n \t\t  tree sqrtfn, arg, arglist;\n \t\t  tree arg00 = TREE_VALUE (TREE_OPERAND (arg0, 1));\n@@ -6446,19 +6442,7 @@ fold (tree expr)\n \t\t}\n \n \t      /* Optimize expN(x)*expN(y) as expN(x+y).  */\n-\t      if (fcode0 == fcode1\n-\t\t  && (fcode0 == BUILT_IN_EXP\n-\t\t      || fcode0 == BUILT_IN_EXPF\n-\t\t      || fcode0 == BUILT_IN_EXPL\n-\t\t      || fcode0 == BUILT_IN_EXP2\n-\t\t      || fcode0 == BUILT_IN_EXP2F\n-\t\t      || fcode0 == BUILT_IN_EXP2L\n-\t\t      || fcode0 == BUILT_IN_EXP10\n-\t\t      || fcode0 == BUILT_IN_EXP10F\n-\t\t      || fcode0 == BUILT_IN_EXP10L\n-\t\t      || fcode0 == BUILT_IN_POW10\n-\t\t      || fcode0 == BUILT_IN_POW10F\n-\t\t      || fcode0 == BUILT_IN_POW10L))\n+\t      if (fcode0 == fcode1 && BUILTIN_EXPONENT_P (fcode0))\n \t\t{\n \t\t  tree expfn = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n \t\t  tree arg = build (PLUS_EXPR, type,\n@@ -6791,18 +6775,7 @@ fold (tree expr)\n \t{\n \t  enum built_in_function fcode = builtin_mathfn_code (arg1);\n \t  /* Optimize x/expN(y) into x*expN(-y).  */\n-\t  if (fcode == BUILT_IN_EXP\n-\t      || fcode == BUILT_IN_EXPF\n-\t      || fcode == BUILT_IN_EXPL\n-\t      || fcode == BUILT_IN_EXP2\n-\t      || fcode == BUILT_IN_EXP2F\n-\t      || fcode == BUILT_IN_EXP2L\n-\t      || fcode == BUILT_IN_EXP10\n-\t      || fcode == BUILT_IN_EXP10F\n-\t      || fcode == BUILT_IN_EXP10L\n-\t      || fcode == BUILT_IN_POW10\n-\t      || fcode == BUILT_IN_POW10F\n-\t      || fcode == BUILT_IN_POW10L)\n+\t  if (BUILTIN_EXPONENT_P (fcode))\n \t    {\n \t      tree expfn = TREE_OPERAND (TREE_OPERAND (arg1, 0), 0);\n \t      tree arg = build1 (NEGATE_EXPR, type,"}, {"sha": "0a1e3fb0bd6ae80bb5faad76015658cf62770f59", "filename": "gcc/tree.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b4201fd50bcfed39fe109308b5639ca97eb45f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b4201fd50bcfed39fe109308b5639ca97eb45f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=82b4201fd50bcfed39fe109308b5639ca97eb45f", "patch": "@@ -101,6 +101,24 @@ enum built_in_function\n /* Names for the above.  */\n extern const char *const built_in_names[(int) END_BUILTINS];\n \n+/* Helper macros for math builtins.  */\n+\n+#define BUILTIN_EXP10_P(FN) \\\n+ ((FN) == BUILT_IN_EXP10 || (FN) == BUILT_IN_EXP10F || (FN) == BUILT_IN_EXP10L \\\n+  || (FN) == BUILT_IN_POW10 || (FN) == BUILT_IN_POW10F || (FN) == BUILT_IN_POW10L)\n+\n+#define BUILTIN_EXPONENT_P(FN) (BUILTIN_EXP10_P (FN) \\\n+  || (FN) == BUILT_IN_EXP || (FN) == BUILT_IN_EXPF || (FN) == BUILT_IN_EXPL \\\n+  || (FN) == BUILT_IN_EXP2 || (FN) == BUILT_IN_EXP2F || (FN) == BUILT_IN_EXP2L)\n+\n+#define BUILTIN_SQRT_P(FN) \\\n+ ((FN) == BUILT_IN_SQRT || (FN) == BUILT_IN_SQRTF || (FN) == BUILT_IN_SQRTL)\n+\n+#define BUILTIN_CBRT_P(FN) \\\n+ ((FN) == BUILT_IN_CBRT || (FN) == BUILT_IN_CBRTF || (FN) == BUILT_IN_CBRTL)\n+\n+#define BUILTIN_ROOT_P(FN) (BUILTIN_SQRT_P (FN) || BUILTIN_CBRT_P (FN))\n+\n /* An array of _DECL trees for the above.  */\n extern GTY(()) tree built_in_decls[(int) END_BUILTINS];\n extern GTY(()) tree implicit_built_in_decls[(int) END_BUILTINS];"}]}