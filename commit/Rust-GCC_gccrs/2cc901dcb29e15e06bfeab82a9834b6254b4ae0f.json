{"sha": "2cc901dcb29e15e06bfeab82a9834b6254b4ae0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjOTAxZGNiMjllMTVlMDZiZmVhYjgyYTk4MzRiNjI1NGI0YWUwZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-01-07T08:19:48Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-01-07T08:19:48Z"}, "message": "re PR c/64417 ([SH] FAIL: gcc.c-torture/compile/pr28865.c   -O0  (test for excess errors))\n\n\tPR c/64417\nc/\n\t* c-typeck.c (process_init_element): Disallow initialization of\n\ta flexible array member with a string constant if the structure\n\tis in an array.\ntestsuite/\n\t* gcc.c-torture/compile/pr28865.c: Add dg-errors.\n\t* gcc.dg/pr64417.c: New test.\n\nFrom-SVN: r219278", "tree": {"sha": "ac7198bcaff351ddad9f6145ef4bf9118f191c97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac7198bcaff351ddad9f6145ef4bf9118f191c97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e905f0f4656514d9a6f9112581e463ed64fd74b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e905f0f4656514d9a6f9112581e463ed64fd74b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e905f0f4656514d9a6f9112581e463ed64fd74b"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "357d2c4d376c4488cd5799e0379a604adefbe0e8", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2cc901dcb29e15e06bfeab82a9834b6254b4ae0f", "patch": "@@ -1,3 +1,10 @@\n+2015-01-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64417\n+\t* c-typeck.c (process_init_element): Disallow initialization of\n+\ta flexible array member with a string constant if the structure\n+\tis in an array.\n+\n 2015-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/64344"}, {"sha": "38ba9b8ede626d7d147a56cf5905987299c94d7f", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=2cc901dcb29e15e06bfeab82a9834b6254b4ae0f", "patch": "@@ -8809,6 +8809,33 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t      break;\n \t    }\n \n+\t  /* Error for initialization of a flexible array member with\n+\t     a string constant if the structure is in an array.  E.g.:\n+\t     struct S { int x; char y[]; };\n+\t     struct S s[] = { { 1, \"foo\" } };\n+\t     is invalid.  */\n+\t  if (string_flag\n+\t      && fieldcode == ARRAY_TYPE\n+\t      && constructor_depth > 1\n+\t      && TYPE_SIZE (fieldtype) == NULL_TREE\n+\t      && DECL_CHAIN (constructor_fields) == NULL_TREE)\n+\t    {\n+\t      bool in_array_p = false;\n+\t      for (struct constructor_stack *p = constructor_stack;\n+\t\t   p && p->type; p = p->next)\n+\t\tif (TREE_CODE (p->type) == ARRAY_TYPE)\n+\t\t  {\n+\t\t    in_array_p = true;\n+\t\t    break;\n+\t\t  }\n+\t      if (in_array_p)\n+\t\t{\n+\t\t  error_init (loc, \"initialization of flexible array \"\n+\t\t\t      \"member in a nested context\");\n+\t\t  break;\n+\t\t}\n+\t    }\n+\n \t  /* Accept a string constant to initialize a subarray.  */\n \t  if (value.value != 0\n \t      && fieldcode == ARRAY_TYPE"}, {"sha": "214cfd682c0652a680bd4c1f498fafe690f9686b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2cc901dcb29e15e06bfeab82a9834b6254b4ae0f", "patch": "@@ -1,3 +1,9 @@\n+2015-01-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64417\n+\t* gcc.c-torture/compile/pr28865.c: Add dg-errors.\n+\t* gcc.dg/pr64417.c: New test.\n+\n 2015-01-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/64505"}, {"sha": "ef0eba5492d38467094bfceb5042d63f32018ec8", "filename": "gcc/testsuite/gcc.c-torture/compile/pr28865.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28865.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28865.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28865.c?ref=2cc901dcb29e15e06bfeab82a9834b6254b4ae0f", "patch": "@@ -5,12 +5,12 @@ struct var_len\n };\n \n /* Note - strictly speaking this array declaration is illegal\n-   since each element has a variable length.  GCC allows it\n-   (for the moment) because it is used in existing code, such\n-   as glibc.  */\n+   since each element has a variable length.  We used to allow\n+   this because it was used in existing code.\n+   Since PR64417 we reject this code.  */\n static const struct var_len var_array[] = \n {\n-  { 1, \"Long exposure noise reduction\" },\n-  { 2, \"Shutter/AE lock buttons\" },\n-  { 3, \"Mirror lockup\" }\n+  { 1, \"Long exposure noise reduction\" }, /* { dg-error \"initialization of flexible array member\" } */\n+  { 2, \"Shutter/AE lock buttons\" }, /* { dg-error \"initialization of flexible array member\" } */\n+  { 3, \"Mirror lockup\" } /* { dg-error \"initialization of flexible array member\" } */\n };"}, {"sha": "1e98b22d64134f898ec01783d937d59bb1c71e45", "filename": "gcc/testsuite/gcc.dg/pr64417.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc901dcb29e15e06bfeab82a9834b6254b4ae0f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64417.c?ref=2cc901dcb29e15e06bfeab82a9834b6254b4ae0f", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/64417 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct foo { int x; char y[]; };\n+struct bar { struct foo f; };\n+struct baz { struct bar b; };\n+\n+struct foo a1 = { 1, \"abc\" };\n+struct foo a2 = { 1, { \"abc\" } };\n+struct foo b1[] = { { 1, \"abc\" } }; /* { dg-error \"initialization of flexible array member\" } */\n+struct foo b2[] = { { 1, { \"abc\" } } }; /* { dg-error \"initialization of flexible array member\" } */\n+struct bar c1[] = { { { 1, \"abc\" } } }; /* { dg-error \"initialization of flexible array member\" } */\n+struct bar c2[] = { { { 1, { \"abc\" } } } }; /* { dg-error \"initialization of flexible array member\" } */\n+struct baz d1[] = { { { { 1, \"abc\" } } } }; /* { dg-error \"initialization of flexible array member\" } */\n+struct baz d2[] = { { { { 1, { \"abc\" } } } } }; /* { dg-error \"initialization of flexible array member\" } */"}]}