{"sha": "35fd722b61b9a1603c204b0d493b2a56fd058cde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVmZDcyMmI2MWI5YTE2MDNjMjA0YjBkNDkzYjJhNTZmZDA1OGNkZQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@verizon.net", "date": "2005-07-24T02:24:15Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-07-24T02:24:15Z"}, "message": "write.c (write_float): Revise output of IEEE exceptional values to comply with F95 and F2003 standards.\n\n2005-07-23  Jerry DeLisle  <jvdelisle@verizon.net>\n\n    * io/write.c (write_float): Revise output of IEEE exceptional\n    values to comply with F95 and F2003 standards.\n\nFrom-SVN: r102324", "tree": {"sha": "b5c2c10083bd892859507b8b4697dae1b7b318bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5c2c10083bd892859507b8b4697dae1b7b318bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35fd722b61b9a1603c204b0d493b2a56fd058cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35fd722b61b9a1603c204b0d493b2a56fd058cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35fd722b61b9a1603c204b0d493b2a56fd058cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35fd722b61b9a1603c204b0d493b2a56fd058cde/comments", "author": null, "committer": null, "parents": [{"sha": "70a76cbca81a7b69373170dc86e0ac7d315c99d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a76cbca81a7b69373170dc86e0ac7d315c99d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70a76cbca81a7b69373170dc86e0ac7d315c99d6"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "3e37aacb211056c60927ef8f3bcc30ede9e2004b", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35fd722b61b9a1603c204b0d493b2a56fd058cde/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35fd722b61b9a1603c204b0d493b2a56fd058cde/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=35fd722b61b9a1603c204b0d493b2a56fd058cde", "patch": "@@ -1,3 +1,8 @@\n+2005-07-23  Jerry DeLisle  <jvdelisle@verizon.net>\n+\n+    * io/write.c (write_float): Revise output of IEEE exceptional\n+    values to comply with F95 and F2003 standards.\n+    \n 2005-07-22 Jerry DeLisle <jvdelisle@verizon.net>\n \n \tPR libfortran/22570"}, {"sha": "a702de18a2a9378ed31377a1325b09d0d24657bc", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35fd722b61b9a1603c204b0d493b2a56fd058cde/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35fd722b61b9a1603c204b0d493b2a56fd058cde/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=35fd722b61b9a1603c204b0d493b2a56fd058cde", "patch": "@@ -772,6 +772,11 @@ write_float (fnode *f, const char *source, int len)\n       if (res == 0)\n \t{\n \t  nb =  f->u.real.w;\n+\t  \n+\t  /* If the field width is zero, the processor must select a width \n+\t     not zero.  4 is chosen to allow output of '-Inf' or '+Inf' */\n+\t     \n+\t  if (nb == 0) nb = 4;\n \t  p = write_block (nb);\n \t  if (nb < 3)\n \t    {\n@@ -784,18 +789,43 @@ write_float (fnode *f, const char *source, int len)\n \t  if (res != 0)\n \t    {\n \t      if (signbit(n))\n-\t\tfin = '-';\n+\t        {\n+\t        \n+\t          /* If the sign is negative and the width is 3, there is\n+\t             insufficient room to output '-Inf', so output asterisks */\n+\t             \n+\t          if (nb == 3)\n+\t            {\n+\t              memset (p, '*',nb);\n+\t              return;\n+\t            }\n+\t            \n+\t          /* The negative sign is mandatory */\n+\t            \n+\t          fin = '-';\n+\t\t}    \n \t      else\n-\t\tfin = '+';\n+\t      \n+\t          /* The positive sign is optional, but we output it for\n+\t             consistency */\n+\t             \n+\t\t  fin = '+';\n \n \t      if (nb > 8)\n+\t      \n+\t        /* We have room, so output 'Infinity' */\n+\t        \n \t\tmemcpy(p + nb - 8, \"Infinity\", 8);\n \t      else\n+\t      \n+\t        /* For the case of width equals 8, there is not enough room\n+\t           for the sign and 'Infinity' so we go with 'Inf' */\n+\t            \n \t\tmemcpy(p + nb - 3, \"Inf\", 3);\n \t      if (nb < 9 && nb > 3)\n-\t\tp[nb - 4] = fin;\n+\t\tp[nb - 4] = fin;  /* Put the sign in front of Inf */\n \t      else if (nb > 8)\n-\t\tp[nb - 9] = fin;\n+\t\tp[nb - 9] = fin;  /* Put the sign in front of Infinity */\n \t    }\n \t  else\n \t    memcpy(p + nb - 3, \"NaN\", 3);"}]}