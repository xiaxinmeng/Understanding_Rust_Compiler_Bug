{"sha": "6422c11230e5a3e125e35967100d8fbc665661f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQyMmMxMTIzMGU1YTNlMTI1ZTM1OTY3MTAwZDhmYmM2NjU2NjFmNg==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-04-25T07:36:20Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-04-25T07:36:20Z"}, "message": "re PR libfortran/31299 (Use getpwuid(geteuid()) instead of getlogin() for GETLOG())\n\n\tPR libfortran/31299\n\t* intrinsics/getlog.c: Use getpwuid and geteuid instead of\n\tgetlogin if they are available.\n\t* configure.ac: Add checks for getpwuid and geteuid.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\nFrom-SVN: r124143", "tree": {"sha": "8203328c54bf2042dd9ae6ad2ea9e5d9f9d0cea8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8203328c54bf2042dd9ae6ad2ea9e5d9f9d0cea8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6422c11230e5a3e125e35967100d8fbc665661f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6422c11230e5a3e125e35967100d8fbc665661f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6422c11230e5a3e125e35967100d8fbc665661f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6422c11230e5a3e125e35967100d8fbc665661f6/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78511f8b0d74ae76725549215d50db1676ef3bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78511f8b0d74ae76725549215d50db1676ef3bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78511f8b0d74ae76725549215d50db1676ef3bdd"}], "stats": {"total": 927, "additions": 649, "deletions": 278}, "files": [{"sha": "a884050c97d87623761fc0472603841300fc1240", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6422c11230e5a3e125e35967100d8fbc665661f6/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6422c11230e5a3e125e35967100d8fbc665661f6/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6422c11230e5a3e125e35967100d8fbc665661f6", "patch": "@@ -1,3 +1,12 @@\n+2007-04-25  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/31299\n+\t* intrinsics/getlog.c: Use getpwuid and geteuid instead of\n+\tgetlogin if they are available.\n+\t* configure.ac: Add checks for getpwuid and geteuid.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n 2007-04-25  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* configure: Regenerate using autoconf 2.59.\n@@ -6,7 +15,7 @@\n \n 2007-04-24  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-\tPR fortran/27740\n+\tPR libfortran/27740\n \t* configure.ac: New test to determine if symbol versioning is\n \tsupported.\n \t* Makefile.am: Use result of above test to add appropriate linker"}, {"sha": "205aca30c07e912152e0ea4a21505e86f58e2c20", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6422c11230e5a3e125e35967100d8fbc665661f6/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6422c11230e5a3e125e35967100d8fbc665661f6/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=6422c11230e5a3e125e35967100d8fbc665661f6", "patch": "@@ -381,6 +381,9 @@\n /* Define to 1 if you have the `ftruncate' function. */\n #undef HAVE_FTRUNCATE\n \n+/* libc includes geteuid */\n+#undef HAVE_GETEUID\n+\n /* libc includes getgid */\n #undef HAVE_GETGID\n \n@@ -396,6 +399,9 @@\n /* libc includes getppid */\n #undef HAVE_GETPPID\n \n+/* Define to 1 if you have the `getpwuid' function. */\n+#undef HAVE_GETPWUID\n+\n /* Define to 1 if you have the `getrlimit' function. */\n #undef HAVE_GETRLIMIT\n \n@@ -522,6 +528,9 @@\n /* libm includes powl */\n #undef HAVE_POWL\n \n+/* Define to 1 if you have the <pwd.h> header file. */\n+#undef HAVE_PWD_H\n+\n /* libm includes round */\n #undef HAVE_ROUND\n "}, {"sha": "d7024a228ff5ffb6f0dd48c44c6e7ae5d12f2e91", "filename": "libgfortran/configure", "status": "modified", "additions": 605, "deletions": 270, "changes": 875, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6422c11230e5a3e125e35967100d8fbc665661f6/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6422c11230e5a3e125e35967100d8fbc665661f6/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=6422c11230e5a3e125e35967100d8fbc665661f6"}, {"sha": "ff6ff17d012a27323f1d171f01c0cad1356efd18", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6422c11230e5a3e125e35967100d8fbc665661f6/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6422c11230e5a3e125e35967100d8fbc665661f6/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=6422c11230e5a3e125e35967100d8fbc665661f6", "patch": "@@ -178,7 +178,7 @@ AC_HEADER_TIME\n AC_HAVE_HEADERS(stdlib.h string.h unistd.h signal.h)\n AC_CHECK_HEADERS(time.h sys/time.h sys/times.h sys/resource.h)\n AC_CHECK_HEADERS(sys/types.h sys/stat.h sys/wait.h floatingpoint.h ieeefp.h)\n-AC_CHECK_HEADERS(fenv.h fptrap.h float.h execinfo.h)\n+AC_CHECK_HEADERS(fenv.h fptrap.h float.h execinfo.h pwd.h)\n AC_CHECK_HEADER([complex.h],[AC_DEFINE([HAVE_COMPLEX_H], [1], [complex.h exists])])\n GCC_HEADER_STDINT(gstdint.h)\n \n@@ -191,7 +191,7 @@ AC_CHECK_FUNCS(getrusage times mkstemp strtof strtold snprintf ftruncate chsize)\n AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime clock access fork execl)\n AC_CHECK_FUNCS(wait setmode execvp pipe dup2 close fdopen strcasestr getrlimit)\n-AC_CHECK_FUNCS(gettimeofday stat fstat lstat)\n+AC_CHECK_FUNCS(gettimeofday stat fstat lstat getpwuid)\n \n # Check for glibc backtrace functions\n AC_CHECK_FUNCS(backtrace backtrace_symbols)\n@@ -204,9 +204,9 @@ AC_CHECK_LIB([c],[getgid],[AC_DEFINE([HAVE_GETGID],[1],[libc includes getgid])])\n AC_CHECK_LIB([c],[getpid],[AC_DEFINE([HAVE_GETPID],[1],[libc includes getpid])])\n AC_CHECK_LIB([c],[getppid],[AC_DEFINE([HAVE_GETPPID],[1],[libc includes getppid])])\n AC_CHECK_LIB([c],[getuid],[AC_DEFINE([HAVE_GETUID],[1],[libc includes getuid])])\n+AC_CHECK_LIB([c],[geteuid],[AC_DEFINE([HAVE_GETEUID],[1],[libc includes geteuid])])\n \n # Check for C99 (and other IEEE) math functions\n-# ??? This list seems awful long. Is there a better way to test for these?\n AC_CHECK_LIB([m],[acosf],[AC_DEFINE([HAVE_ACOSF],[1],[libm includes acosf])])\n AC_CHECK_LIB([m],[acos],[AC_DEFINE([HAVE_ACOS],[1],[libm includes acos])])\n AC_CHECK_LIB([m],[acosl],[AC_DEFINE([HAVE_ACOSL],[1],[libm includes acosl])])"}, {"sha": "417b0f28f99e85e6e9d8098404a9d60e987ba43f", "filename": "libgfortran/intrinsics/getlog.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6422c11230e5a3e125e35967100d8fbc665661f6/libgfortran%2Fintrinsics%2Fgetlog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6422c11230e5a3e125e35967100d8fbc665661f6/libgfortran%2Fintrinsics%2Fgetlog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fgetlog.c?ref=6422c11230e5a3e125e35967100d8fbc665661f6", "patch": "@@ -37,7 +37,12 @@ Boston, MA 02110-1301, USA.  */\n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\n #endif\n-\n+#ifdef HAVE_SYS_TYPES_H\n+#include <sys/types.h>\n+#endif\n+#ifdef HAVE_PWD_H\n+#include <pwd.h>\n+#endif\n \n /* Windows32 version */\n #if defined __MINGW32__ && !defined  HAVE_GETLOGIN\n@@ -66,7 +71,6 @@ w32_getlogin (void)\n    process.\n    CHARACTER(len=*), INTENT(OUT) :: LOGIN  */\n \n-#ifdef HAVE_GETLOGIN\n void PREFIX(getlog) (char *, gfc_charlen_type);\n export_proto_np(PREFIX(getlog));\n \n@@ -78,7 +82,22 @@ PREFIX(getlog) (char * login, gfc_charlen_type login_len)\n \n   memset (login, ' ', login_len); /* Blank the string.  */\n \n-  p = getlogin ();\n+#if defined(HAVE_GETPWUID) && defined(HAVE_GETEUID)\n+  {\n+    struct passwd *pw = getpwuid (geteuid ());\n+    if (pw)\n+      p = pw->pw_name;\n+    else\n+      return;\n+  }\n+#else\n+# ifdef HAVE_GETLOGIN\n+  p = getlogin();\n+# else\n+  return;\n+# endif\n+#endif\n+\n   if (p == NULL)\n     return;\n \n@@ -88,4 +107,3 @@ PREFIX(getlog) (char * login, gfc_charlen_type login_len)\n   else\n     memcpy (login, p, p_len);\n }\n-#endif"}]}