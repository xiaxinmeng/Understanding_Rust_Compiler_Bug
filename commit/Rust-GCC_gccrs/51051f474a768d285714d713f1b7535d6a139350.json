{"sha": "51051f474a768d285714d713f1b7535d6a139350", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEwNTFmNDc0YTc2OGQyODU3MTRkNzEzZjFiNzUzNWQ2YTEzOTM1MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-30T15:23:30Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-30T15:23:30Z"}, "message": "[AArch64] Strengthen aarch64_hard_regno_call_part_clobbered\n\nThe aarch64_vector_pcs handling in aarch64_hard_regno_call_part_clobbered\nchecks whether the mode might be bigger than 16 bytes, since on SVE\ntargets the (non-SVE) vector PCS only guarantees that the low 16 bytes\nare preserved.  But for multi-register modes, we should instead test\nwhether each single-register part might be bigger than 16 bytes.\n(The size is always divided evenly between registers.)\n\nThe testcase uses XImode as an example where this helps.\n\n2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_hard_regno_call_part_clobbered):\n\tFor multi-registers modes, test how big each register part is.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/torture/simd-abi-8.c: New test.\n\nFrom-SVN: r276305", "tree": {"sha": "2d51c313466b59810bdc099b5211c548a806233f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d51c313466b59810bdc099b5211c548a806233f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51051f474a768d285714d713f1b7535d6a139350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51051f474a768d285714d713f1b7535d6a139350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51051f474a768d285714d713f1b7535d6a139350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51051f474a768d285714d713f1b7535d6a139350/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4baad9863a5df7ec01b42afecd4170f4d58a1aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4baad9863a5df7ec01b42afecd4170f4d58a1aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4baad9863a5df7ec01b42afecd4170f4d58a1aac"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "830c93ddacbe3bd3114043960630b64ff808e019", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51051f474a768d285714d713f1b7535d6a139350/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51051f474a768d285714d713f1b7535d6a139350/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51051f474a768d285714d713f1b7535d6a139350", "patch": "@@ -1,3 +1,8 @@\n+2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_hard_regno_call_part_clobbered):\n+\tFor multi-registers modes, test how big each register part is.\n+\n 2019-09-30  Nick Clifton  <nickc@redhat.com>\n \n \tPR target/59205"}, {"sha": "29c070d9b99b8aa4782a19737246784363af126b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51051f474a768d285714d713f1b7535d6a139350/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51051f474a768d285714d713f1b7535d6a139350/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=51051f474a768d285714d713f1b7535d6a139350", "patch": "@@ -1890,9 +1890,16 @@ static bool\n aarch64_hard_regno_call_part_clobbered (rtx_insn *insn, unsigned int regno,\n \t\t\t\t\tmachine_mode mode)\n {\n-  bool simd_p = insn && CALL_P (insn) && aarch64_simd_call_p (insn);\n-  return FP_REGNUM_P (regno)\n-\t && maybe_gt (GET_MODE_SIZE (mode), simd_p ? 16 : 8);\n+  if (FP_REGNUM_P (regno))\n+    {\n+      bool simd_p = insn && CALL_P (insn) && aarch64_simd_call_p (insn);\n+      poly_int64 per_register_size = GET_MODE_SIZE (mode);\n+      unsigned int nregs = hard_regno_nregs (regno, mode);\n+      if (nregs > 1)\n+\tper_register_size = exact_div (per_register_size, nregs);\n+      return maybe_gt (per_register_size, simd_p ? 16 : 8);\n+    }\n+  return false;\n }\n \n /* Implement TARGET_RETURN_CALL_WITH_MAX_CLOBBERS.  */"}, {"sha": "2ac61fffaad33bd88fb447ef31ff6f27bc760526", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51051f474a768d285714d713f1b7535d6a139350/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51051f474a768d285714d713f1b7535d6a139350/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51051f474a768d285714d713f1b7535d6a139350", "patch": "@@ -1,3 +1,7 @@\n+2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/torture/simd-abi-8.c: New test.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/Wincompatible-pointer-types-1.c (f1): Expect only one"}, {"sha": "6463f6c50664c648d863b192301ac7be824d8bf2", "filename": "gcc/testsuite/gcc.target/aarch64/torture/simd-abi-8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51051f474a768d285714d713f1b7535d6a139350/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51051f474a768d285714d713f1b7535d6a139350/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftorture%2Fsimd-abi-8.c?ref=51051f474a768d285714d713f1b7535d6a139350", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+#include <arm_neon.h>\n+\n+void __attribute__ ((aarch64_vector_pcs)) f (void);\n+\n+void\n+g (int64x2x4_t *ptr)\n+{\n+  register int64x2x4_t copy asm (\"v8\") = *ptr;\n+  int64x2x4_t save;\n+  asm volatile (\"\" : \"=w\" (save) : \"0\" (copy));\n+  f ();\n+  *ptr = save;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1\\t} 1 } } */"}]}