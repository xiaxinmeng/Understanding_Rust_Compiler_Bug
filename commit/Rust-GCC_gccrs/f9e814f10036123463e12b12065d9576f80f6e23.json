{"sha": "f9e814f10036123463e12b12065d9576f80f6e23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjllODE0ZjEwMDM2MTIzNDYzZTEyYjEyMDY1ZDk1NzZmODBmNmUyMw==", "commit": {"author": {"name": "Theodore Papadopoulo", "email": "Theodore.Papadopoulo@sophia.inria.fr", "date": "1999-04-25T23:35:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-25T23:35:15Z"}, "message": "flags.h (inline_max_insns): Declare.\n\n        * flags.h (inline_max_insns): Declare.\n        * integrate.c (inline_max_insns): New variable.\n        (function_cannot_inline_p): Use it.\n        * toplev.c (main): Add the flag -finline-limit-n.\n        (display_help): Document -finline-limit-n.\n        * invoke.texi: Document -finline-limit-n\n\nFrom-SVN: r26629", "tree": {"sha": "64e64338a1d4d6f1bf4e9f41d6b2be1787684e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64e64338a1d4d6f1bf4e9f41d6b2be1787684e88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9e814f10036123463e12b12065d9576f80f6e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e814f10036123463e12b12065d9576f80f6e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9e814f10036123463e12b12065d9576f80f6e23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e814f10036123463e12b12065d9576f80f6e23/comments", "author": {"login": "papadop", "id": 1387516, "node_id": "MDQ6VXNlcjEzODc1MTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1387516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/papadop", "html_url": "https://github.com/papadop", "followers_url": "https://api.github.com/users/papadop/followers", "following_url": "https://api.github.com/users/papadop/following{/other_user}", "gists_url": "https://api.github.com/users/papadop/gists{/gist_id}", "starred_url": "https://api.github.com/users/papadop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/papadop/subscriptions", "organizations_url": "https://api.github.com/users/papadop/orgs", "repos_url": "https://api.github.com/users/papadop/repos", "events_url": "https://api.github.com/users/papadop/events{/privacy}", "received_events_url": "https://api.github.com/users/papadop/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "947255ed5a4ad0beaaf47901c3b0ecc74892359f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947255ed5a4ad0beaaf47901c3b0ecc74892359f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/947255ed5a4ad0beaaf47901c3b0ecc74892359f"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "2f0546391e44f8a14e7b5fd027fb2d1f1d6da413", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e814f10036123463e12b12065d9576f80f6e23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e814f10036123463e12b12065d9576f80f6e23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9e814f10036123463e12b12065d9576f80f6e23", "patch": "@@ -1,3 +1,12 @@\n+Mon Apr 26 00:28:25 1999  Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n+\n+ \t* flags.h (inline_max_insns): Declare.\n+ \t* integrate.c (inline_max_insns): New variable.\n+ \t(function_cannot_inline_p): Use it.\n+ \t* toplev.c (main): Add the flag -finline-limit-n.\n+ \t(display_help): Document -finline-limit-n.\n+ \t* invoke.texi: Document -finline-limit-n\n+\n Sun Apr 25 23:03:32 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* stmt.c (expand_asm_operands): Reload in-out reg-only memory operands."}, {"sha": "2c0ed409ec2c8ffa05eb44f3a69cf2f53b65a4d8", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e814f10036123463e12b12065d9576f80f6e23/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e814f10036123463e12b12065d9576f80f6e23/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=f9e814f10036123463e12b12065d9576f80f6e23", "patch": "@@ -507,6 +507,10 @@ extern int current_function_is_thunk;\n extern int g_switch_value;\n extern int g_switch_set;\n \n+/* Value of the -finline-limit flag.  */\n+\n+extern int inline_max_insns;\n+\n /* Nonzero if we dump in VCG format, not plain text.  */\n extern int dump_for_graph;\n "}, {"sha": "33a96c40f918132c32094c128909cdf1c14d0e3b", "filename": "gcc/integrate.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e814f10036123463e12b12065d9576f80f6e23/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e814f10036123463e12b12065d9576f80f6e23/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=f9e814f10036123463e12b12065d9576f80f6e23", "patch": "@@ -86,6 +86,16 @@ static void process_reg_param\t\tPROTO((struct inline_remap *, rtx,\n \n void set_decl_abstract_flags\t\tPROTO((tree, int));\n static tree copy_and_set_decl_abstract_origin PROTO((tree));\n+\n+/* The maximum number of instructions accepted for inlining a\n+   function.  Increasing values mean more agressive inlining.\n+   This affects currently only functions explicitly marked as\n+   inline (or methods defined within the class definition for C++).\n+   The default value of 10000 is arbitrary but high to match the\n+   previously unlimited gcc capabilities.  */\n+\n+int inline_max_insns = 10000;\n+\n \f\n /* Returns the Ith entry in the label_map contained in MAP.  If the\n    Ith entry has not yet been set, return a fresh label.  This function\n@@ -116,7 +126,16 @@ function_cannot_inline_p (fndecl)\n {\n   register rtx insn;\n   tree last = tree_last (TYPE_ARG_TYPES (TREE_TYPE (fndecl)));\n-  int max_insns = INTEGRATE_THRESHOLD (fndecl);\n+\n+  /* For functions marked as inline increase the maximum size to\n+     inline_max_insns (-finline-limit-<n>).  For regular functions\n+     use the limit given by INTEGRATE_THRESHOLD.  */\n+\n+  int max_insns = (DECL_INLINE (fndecl))\n+\t\t   ? (inline_max_insns\n+\t\t      + 8 * list_length (DECL_ARGUMENTS (fndecl)))\n+\t\t   : INTEGRATE_THRESHOLD (fndecl);\n+\n   register int ninsns = 0;\n   register tree parms;\n   rtx result;\n@@ -136,7 +155,7 @@ function_cannot_inline_p (fndecl)\n     return current_function_cannot_inline;\n \n   /* If its not even close, don't even look.  */\n-  if (!DECL_INLINE (fndecl) && get_max_uid () > 3 * max_insns)\n+  if (get_max_uid () > 3 * max_insns)\n     return N_(\"function too large to be inline\");\n \n #if 0\n@@ -170,7 +189,7 @@ function_cannot_inline_p (fndecl)\n \treturn N_(\"function with transparent unit parameter cannot be inline\");\n     }\n \n-  if (!DECL_INLINE (fndecl) && get_max_uid () > max_insns)\n+  if (get_max_uid () > max_insns)\n     {\n       for (ninsns = 0, insn = get_first_nonparm_insn ();\n \t   insn && ninsns < max_insns;"}, {"sha": "1ca77e54334335ce7da9178513bac46a7cb16579", "filename": "gcc/invoke.texi", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e814f10036123463e12b12065d9576f80f6e23/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e814f10036123463e12b12065d9576f80f6e23/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=f9e814f10036123463e12b12065d9576f80f6e23", "patch": "@@ -154,7 +154,7 @@ in the following sections.\n -fdelayed-branch   -fexpensive-optimizations\n -ffast-math  -ffloat-store  -fforce-addr  -fforce-mem\n -fdata-sections -ffunction-sections  -fgcse \n--finline-functions -fkeep-inline-functions\n+-finline-functions -finline-limit-@var{n} -fkeep-inline-functions\n -fno-default-inline -fno-defer-pop  -fno-function-cse\n -fno-inline  -fno-peephole  -fomit-frame-pointer -fregmove\n -frerun-cse-after-loop  -frerun-loop-opt -fschedule-insns\n@@ -2302,6 +2302,23 @@ If all calls to a given function are integrated, and the function is\n declared @code{static}, then the function is normally not output as\n assembler code in its own right.\n \n+@item -finline-limit-@var{n}\n+By default, gcc limits the size of functions that can be inlined.  This flag\n+allows the control of this limit for functions that are explicitly marked as\n+inline (ie marked with the inline keyword or defined within the class \n+definition in c++).  @var{n} is the size of functions that can be inlined in \n+number of pseudo instructions (not counting parameter handling).  The default\n+value of n is 10000.  Increasing this value can result in more inlined code at\n+the cost of compilation time and memory consumption.  Decreasing usually makes\n+the compilation faster and less code will be inlined (which presumably \n+means slower programs).  This option is particularly useful for programs that \n+use inlining heavily such as those based on recursive templates with c++.\n+\n+@emph{Note:} pseudo instruction represents, in this particular context, an\n+abstract measurement of function's size.  In no way, it represents a count\n+of assembly instructions and as such its exact meaning might change from one\n+release to an another.\n+\n @item -fkeep-inline-functions\n Even if all calls to a given function are integrated, and the function\n is declared @code{static}, nevertheless output a separate run-time"}, {"sha": "f5e534cb2fc61416abe7e16cf69e0aa175ab3927", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e814f10036123463e12b12065d9576f80f6e23/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e814f10036123463e12b12065d9576f80f6e23/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f9e814f10036123463e12b12065d9576f80f6e23", "patch": "@@ -4488,6 +4488,7 @@ display_help ()\n   printf (\"  -ffixed-<register>      Mark <register> as being unavailable to the compiler\\n\");\n   printf (\"  -fcall-used-<register>  Mark <register> as being corrupted by function calls\\n\");\n   printf (\"  -fcall-saved-<register> Mark <register> as being preserved across functions\\n\");\n+  printf (\"  -finline-limit-<number> Limits the size of inlined functions to <number>\\n\");\n \n   for (i = NUM_ELEM (f_options); i--;)\n     {\n@@ -5062,6 +5063,9 @@ main (argc, argv)\n \n \t      if (found)\n \t\t;\n+\t      else if (!strncmp (p, \"inline-limit-\", 13))\n+\t        inline_max_insns =\n+\t\t  read_integral_parameter (p + 13, p - 2, inline_max_insns);\n #ifdef HAIFA\n #ifdef INSN_SCHEDULING\n \t      else if (!strncmp (p, \"sched-verbose-\",14))"}]}