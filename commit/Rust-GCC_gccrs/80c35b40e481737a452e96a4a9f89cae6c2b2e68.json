{"sha": "80c35b40e481737a452e96a4a9f89cae6c2b2e68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjMzViNDBlNDgxNzM3YTQ1MmU5NmE0YTlmODljYWU2YzJiMmU2OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-01-20T08:13:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-01-20T08:13:50Z"}, "message": "dwarf2out.c (mem_loc_descriptor): Use DW_OP_mod for UMOD instead of MOD...\n\n\t* dwarf2out.c (mem_loc_descriptor): Use DW_OP_mod for UMOD instead\n\tof MOD, handle MOD using DW_OP_{over,over,div,mul,minus}.\n\t(loc_list_from_tree): Don't handle unsigned division.  Handle\n\tsigned modulo using DW_OP_{over,over,div,mul,minus}.\n\t* unwind-dw2.c (execute_stack_op): Handle DW_OP_mod using unsigned\n\tmodulo instead of signed.\n\n\t* gcc.dg/cleanup-13.c: Expect DW_OP_mod to do unsigned modulo instead\n\tof signed, add a few new tests.\n\nFrom-SVN: r156063", "tree": {"sha": "3b76f6fe9d8dc678e83b02a7245e921fce8c9690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b76f6fe9d8dc678e83b02a7245e921fce8c9690"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80c35b40e481737a452e96a4a9f89cae6c2b2e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c35b40e481737a452e96a4a9f89cae6c2b2e68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c35b40e481737a452e96a4a9f89cae6c2b2e68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c35b40e481737a452e96a4a9f89cae6c2b2e68/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "204803dc83d90012ceae0b33a7c469098754da33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204803dc83d90012ceae0b33a7c469098754da33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/204803dc83d90012ceae0b33a7c469098754da33"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "44495403a51e1af992ad4193900e42c148a5dc4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c35b40e481737a452e96a4a9f89cae6c2b2e68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c35b40e481737a452e96a4a9f89cae6c2b2e68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80c35b40e481737a452e96a4a9f89cae6c2b2e68", "patch": "@@ -1,3 +1,12 @@\n+2010-01-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (mem_loc_descriptor): Use DW_OP_mod for UMOD instead\n+\tof MOD, handle MOD using DW_OP_{over,over,div,mul,minus}.\n+\t(loc_list_from_tree): Don't handle unsigned division.  Handle\n+\tsigned modulo using DW_OP_{over,over,div,mul,minus}.\n+\t* unwind-dw2.c (execute_stack_op): Handle DW_OP_mod using unsigned\n+\tmodulo instead of signed.\n+\n 2010-01-20  DJ Delorie  <dj@redhat.com>\n \n \t* config/h8300/h8300.c (F): Add \"in_epilogue\" flag."}, {"sha": "0a6045a4a8719d91e94d64692e8455c53798d170", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c35b40e481737a452e96a4a9f89cae6c2b2e68/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c35b40e481737a452e96a4a9f89cae6c2b2e68/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=80c35b40e481737a452e96a4a9f89cae6c2b2e68", "patch": "@@ -13129,7 +13129,7 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n       op = DW_OP_div;\n       goto do_binop;\n \n-    case MOD:\n+    case UMOD:\n       op = DW_OP_mod;\n       goto do_binop;\n \n@@ -13171,6 +13171,24 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n       add_loc_descr (&mem_loc_result, new_loc_descr (op, 0, 0));\n       break;\n \n+    case MOD:\n+      op0 = mem_loc_descriptor (XEXP (rtl, 0), mode,\n+\t\t\t\tVAR_INIT_STATUS_INITIALIZED);\n+      op1 = mem_loc_descriptor (XEXP (rtl, 1), mode,\n+\t\t\t\tVAR_INIT_STATUS_INITIALIZED);\n+\n+      if (op0 == 0 || op1 == 0)\n+\tbreak;\n+\n+      mem_loc_result = op0;\n+      add_loc_descr (&mem_loc_result, op1);\n+      add_loc_descr (&mem_loc_result, new_loc_descr (DW_OP_over, 0, 0));\n+      add_loc_descr (&mem_loc_result, new_loc_descr (DW_OP_over, 0, 0));\n+      add_loc_descr (&mem_loc_result, new_loc_descr (DW_OP_div, 0, 0));\n+      add_loc_descr (&mem_loc_result, new_loc_descr (DW_OP_mul, 0, 0));\n+      add_loc_descr (&mem_loc_result, new_loc_descr (DW_OP_minus, 0, 0));\n+      break;\n+\n     case NOT:\n       op = DW_OP_not;\n       goto do_unop;\n@@ -13454,7 +13472,6 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n     case SS_TRUNCATE:\n     case US_TRUNCATE:\n     case UDIV:\n-    case UMOD:\n     case UNORDERED:\n     case ORDERED:\n     case UNEQ:\n@@ -14508,6 +14525,8 @@ loc_list_from_tree (tree loc, int want_address)\n     case CEIL_DIV_EXPR:\n     case ROUND_DIV_EXPR:\n     case TRUNC_DIV_EXPR:\n+      if (TYPE_UNSIGNED (TREE_TYPE (loc)))\n+\treturn 0;\n       op = DW_OP_div;\n       goto do_binop;\n \n@@ -14519,8 +14538,25 @@ loc_list_from_tree (tree loc, int want_address)\n     case CEIL_MOD_EXPR:\n     case ROUND_MOD_EXPR:\n     case TRUNC_MOD_EXPR:\n-      op = DW_OP_mod;\n-      goto do_binop;\n+      if (TYPE_UNSIGNED (TREE_TYPE (loc)))\n+\t{\n+\t  op = DW_OP_mod;\n+\t  goto do_binop;\n+\t}\n+      list_ret = loc_list_from_tree (TREE_OPERAND (loc, 0), 0);\n+      list_ret1 = loc_list_from_tree (TREE_OPERAND (loc, 1), 0);\n+      if (list_ret == 0 || list_ret1 == 0)\n+\treturn 0;\n+\n+      add_loc_list (&list_ret, list_ret1);\n+      if (list_ret == 0)\n+\treturn 0;\n+      add_loc_descr_to_each (list_ret, new_loc_descr (DW_OP_over, 0, 0));\n+      add_loc_descr_to_each (list_ret, new_loc_descr (DW_OP_over, 0, 0));\n+      add_loc_descr_to_each (list_ret, new_loc_descr (DW_OP_div, 0, 0));\n+      add_loc_descr_to_each (list_ret, new_loc_descr (DW_OP_mul, 0, 0));\n+      add_loc_descr_to_each (list_ret, new_loc_descr (DW_OP_minus, 0, 0));\n+      break;\n \n     case MULT_EXPR:\n       op = DW_OP_mul;"}, {"sha": "226f13668d6a7dec6a02d4c9d3b19ba3a07d22f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c35b40e481737a452e96a4a9f89cae6c2b2e68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c35b40e481737a452e96a4a9f89cae6c2b2e68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80c35b40e481737a452e96a4a9f89cae6c2b2e68", "patch": "@@ -1,3 +1,8 @@\n+2010-01-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/cleanup-13.c: Expect DW_OP_mod to do unsigned modulo instead\n+\tof signed, add a few new tests.\n+\n 2010-01-19  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42804"}, {"sha": "5a0d4c69f5a8f6a8f214ed990045a2cee414ffbe", "filename": "gcc/testsuite/gcc.dg/cleanup-13.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c35b40e481737a452e96a4a9f89cae6c2b2e68/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c35b40e481737a452e96a4a9f89cae6c2b2e68/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-13.c?ref=80c35b40e481737a452e96a4a9f89cae6c2b2e68", "patch": "@@ -210,9 +210,22 @@ OP_const1s(-123) OP_abs OP_const1u(123) OP_eq ASSERT_TOS_NON0\t\t\\\n OP_lit3 OP_lit6 OP_and OP_lit2 OP_eq ASSERT_TOS_NON0\t\t\t\\\n OP_lit3 OP_lit6 OP_or OP_lit7 OP_eq ASSERT_TOS_NON0\t\t\t\\\n OP_lit17 OP_lit2 OP_minus OP_lit15 OP_eq ASSERT_TOS_NON0\t\t\\\n+/* Divide is signed truncating toward zero.  */\t\t\t\t\\\n OP_const1s(-6) OP_const1s(-2) OP_div OP_lit3 OP_eq ASSERT_TOS_NON0\t\\\n-OP_const1s(-6) OP_const1s(-4) OP_mod OP_const1s(-2)\t\t\t\\\n+OP_const1s(-7) OP_const1s(3) OP_div OP_const1s(-2)\t\t\t\\\n   OP_eq ASSERT_TOS_NON0\t\t\t\t\t\t\t\\\n+/* Modulo is unsigned.  */\t\t\t\t\t\t\\\n+OP_const1s(-6) OP_const1s(-4) OP_mod OP_const1s(-6)\t\t\t\\\n+  OP_eq ASSERT_TOS_NON0\t\t\t\t\t\t\t\\\n+OP_const1s(-6) OP_lit4 OP_mod OP_lit2 OP_eq ASSERT_TOS_NON0\t\t\\\n+OP_lit6 OP_const1s(-4) OP_mod OP_lit6 OP_eq ASSERT_TOS_NON0\t\t\\\n+/* Signed modulo can be implemented using \"over over div mul minus\".  */\\\n+OP_const1s(-6) OP_const1s(-4) OP_over OP_over OP_div OP_mul OP_minus\t\\\n+  OP_const1s(-2) OP_eq ASSERT_TOS_NON0\t\t\t\t\t\\\n+OP_const1s(-7) OP_lit3 OP_over OP_over OP_div OP_mul OP_minus\t\t\\\n+  OP_const1s(-1) OP_eq ASSERT_TOS_NON0\t\t\t\t\t\\\n+OP_lit7 OP_const1s(-3) OP_over OP_over OP_div OP_mul OP_minus\t\t\\\n+  OP_lit1 OP_eq ASSERT_TOS_NON0\t\t\t\t\t\t\\\n OP_lit16 OP_lit31 OP_plus_uconst(1) OP_mul OP_const2u(512)\t\t\\\n   OP_eq ASSERT_TOS_NON0\t\t\t\t\t\t\t\\\n OP_lit5 OP_not OP_lit31 OP_and OP_lit26 OP_eq ASSERT_TOS_NON0\t\t\\"}, {"sha": "3cf3189bb4f407f08f061c78a980f1083b319394", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c35b40e481737a452e96a4a9f89cae6c2b2e68/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c35b40e481737a452e96a4a9f89cae6c2b2e68/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=80c35b40e481737a452e96a4a9f89cae6c2b2e68", "patch": "@@ -1,6 +1,6 @@\n /* DWARF2 exception handling and frame unwind runtime interface routines.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n-   2008, 2009  Free Software Foundation, Inc.\n+   2008, 2009, 2010  Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -765,7 +765,7 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n \t\tresult = second - first;\n \t\tbreak;\n \t      case DW_OP_mod:\n-\t\tresult = (_Unwind_Sword) second % (_Unwind_Sword) first;\n+\t\tresult = second % first;\n \t\tbreak;\n \t      case DW_OP_mul:\n \t\tresult = second * first;"}]}