{"sha": "9ebddeb045135d827eb59bfa822a0b026ea39f04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWViZGRlYjA0NTEzNWQ4MjdlYjU5YmZhODIyYTBiMDI2ZWEzOWYwNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-08-04T00:40:18Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-08-04T00:40:18Z"}, "message": "plugin-nvptx.c: Don't include dlfcn.h.\n\n\t* plugin/plugin-nvptx.c: Don't include dlfcn.h.\n\t(cuda_errlist): Constify.\n\t(errmsg):  Move into ...\n\t(cuda_error): ... here.  Make smaller.\n\t(_XSTR, _STR): Delete.\n\t(cuda_synames): Delete.\n\t(verify_device_library): Delete.\n\t(nvptx_init): Don't call it.\n\nFrom-SVN: r226539", "tree": {"sha": "ef907361297008e9bd56fb6cf66e8c06f712ff3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef907361297008e9bd56fb6cf66e8c06f712ff3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ebddeb045135d827eb59bfa822a0b026ea39f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ebddeb045135d827eb59bfa822a0b026ea39f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ebddeb045135d827eb59bfa822a0b026ea39f04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ebddeb045135d827eb59bfa822a0b026ea39f04/comments", "author": null, "committer": null, "parents": [{"sha": "1f1833cce0c1c0eb9cf6e1f4720b4a80c5d2e430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1833cce0c1c0eb9cf6e1f4720b4a80c5d2e430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1833cce0c1c0eb9cf6e1f4720b4a80c5d2e430"}], "stats": {"total": 101, "additions": 19, "deletions": 82}, "files": [{"sha": "ccdeaa71ffb9bda265461c6f215db5ddcd5b6297", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebddeb045135d827eb59bfa822a0b026ea39f04/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebddeb045135d827eb59bfa822a0b026ea39f04/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9ebddeb045135d827eb59bfa822a0b026ea39f04", "patch": "@@ -1,3 +1,14 @@\n+2015-08-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* plugin/plugin-nvptx.c: Don't include dlfcn.h.\n+\t(cuda_errlist): Constify.\n+\t(errmsg):  Move into ...\n+\t(cuda_error): ... here.  Make smaller.\n+\t(_XSTR, _STR): Delete.\n+\t(cuda_synames): Delete.\n+\t(verify_device_library): Delete.\n+\t(nvptx_init): Don't call it.\n+\n 2015-07-28  Tom de Vries  <tom@codesourcery.com>\n \n \t* testsuite/libgomp.c/uns-outer-4.c: New test."}, {"sha": "d02a3fd4b9c2f7024a175512f03eef9dc31b0f3f", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 8, "deletions": 82, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebddeb045135d827eb59bfa822a0b026ea39f04/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebddeb045135d827eb59bfa822a0b026ea39f04/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=9ebddeb045135d827eb59bfa822a0b026ea39f04", "patch": "@@ -43,16 +43,15 @@\n #include <stdint.h>\n #include <string.h>\n #include <stdio.h>\n-#include <dlfcn.h>\n #include <unistd.h>\n #include <assert.h>\n \n #define\tARRAYSIZE(X) (sizeof (X) / sizeof ((X)[0]))\n \n-static struct\n+static const struct\n {\n   CUresult r;\n-  char *m;\n+  const char *m;\n } cuda_errlist[]=\n {\n   { CUDA_ERROR_INVALID_VALUE, \"invalid value\" },\n@@ -109,22 +108,22 @@ static struct\n   { CUDA_ERROR_UNKNOWN, \"unknown\" }\n };\n \n-static char errmsg[128];\n-\n-static char *\n+static const char *\n cuda_error (CUresult r)\n {\n   int i;\n \n   for (i = 0; i < ARRAYSIZE (cuda_errlist); i++)\n     {\n       if (cuda_errlist[i].r == r)\n-\treturn &cuda_errlist[i].m[0];\n+\treturn cuda_errlist[i].m;\n     }\n \n-  sprintf (&errmsg[0], \"unknown result code: %5d\", r);\n+  static char errmsg[30];\n+\n+  snprintf (errmsg, sizeof (errmsg), \"unknown error code: %d\", r);\n \n-  return &errmsg[0];\n+  return errmsg;\n }\n \n static unsigned int instantiated_devices = 0;\n@@ -353,74 +352,6 @@ static struct ptx_event *ptx_events;\n \n static struct ptx_device **ptx_devices;\n \n-#define _XSTR(s) _STR(s)\n-#define _STR(s) #s\n-\n-static struct _synames\n-{\n-  char *n;\n-} cuda_symnames[] =\n-{\n-  { _XSTR (cuCtxCreate) },\n-  { _XSTR (cuCtxDestroy) },\n-  { _XSTR (cuCtxGetCurrent) },\n-  { _XSTR (cuCtxPushCurrent) },\n-  { _XSTR (cuCtxSynchronize) },\n-  { _XSTR (cuDeviceGet) },\n-  { _XSTR (cuDeviceGetAttribute) },\n-  { _XSTR (cuDeviceGetCount) },\n-  { _XSTR (cuEventCreate) },\n-  { _XSTR (cuEventDestroy) },\n-  { _XSTR (cuEventQuery) },\n-  { _XSTR (cuEventRecord) },\n-  { _XSTR (cuInit) },\n-  { _XSTR (cuLaunchKernel) },\n-  { _XSTR (cuLinkAddData) },\n-  { _XSTR (cuLinkComplete) },\n-  { _XSTR (cuLinkCreate) },\n-  { _XSTR (cuMemAlloc) },\n-  { _XSTR (cuMemAllocHost) },\n-  { _XSTR (cuMemcpy) },\n-  { _XSTR (cuMemcpyDtoH) },\n-  { _XSTR (cuMemcpyDtoHAsync) },\n-  { _XSTR (cuMemcpyHtoD) },\n-  { _XSTR (cuMemcpyHtoDAsync) },\n-  { _XSTR (cuMemFree) },\n-  { _XSTR (cuMemFreeHost) },\n-  { _XSTR (cuMemGetAddressRange) },\n-  { _XSTR (cuMemHostGetDevicePointer) },\n-  { _XSTR (cuMemHostRegister) },\n-  { _XSTR (cuMemHostUnregister) },\n-  { _XSTR (cuModuleGetFunction) },\n-  { _XSTR (cuModuleLoadData) },\n-  { _XSTR (cuStreamDestroy) },\n-  { _XSTR (cuStreamQuery) },\n-  { _XSTR (cuStreamSynchronize) },\n-  { _XSTR (cuStreamWaitEvent) }\n-};\n-\n-static int\n-verify_device_library (void)\n-{\n-  int i;\n-  void *dh, *ds;\n-\n-  dh = dlopen (\"libcuda.so\", RTLD_LAZY);\n-  if (!dh)\n-    return -1;\n-\n-  for (i = 0; i < ARRAYSIZE (cuda_symnames); i++)\n-    {\n-      ds = dlsym (dh, cuda_symnames[i].n);\n-      if (!ds)\n-        return -1;\n-    }\n-\n-  dlclose (dh);\n-\n-  return 0;\n-}\n-\n static inline struct nvptx_thread *\n nvptx_thread (void)\n {\n@@ -601,16 +532,11 @@ static bool\n nvptx_init (void)\n {\n   CUresult r;\n-  int rc;\n   int ndevs;\n \n   if (instantiated_devices != 0)\n     return true;\n \n-  rc = verify_device_library ();\n-  if (rc < 0)\n-    return false;\n-\n   r = cuInit (0);\n   if (r != CUDA_SUCCESS)\n     GOMP_PLUGIN_fatal (\"cuInit error: %s\", cuda_error (r));"}]}