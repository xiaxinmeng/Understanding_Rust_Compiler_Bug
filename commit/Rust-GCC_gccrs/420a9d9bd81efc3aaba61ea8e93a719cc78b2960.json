{"sha": "420a9d9bd81efc3aaba61ea8e93a719cc78b2960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIwYTlkOWJkODFlZmMzYWFiYTYxZWE4ZTkzYTcxOWNjNzhiMjk2MA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-08-03T13:55:28Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-08-03T13:55:28Z"}, "message": "re PR c/67088 (Incorrect location of error on invalid type used in bit-field declaration)\n\n\tPR c/67088\n\t* c-decl.c (check_bitfield_type_and_width): Add location parameter.\n\tUse it.\n\t(grokdeclarator): Pass LOC down to check_bitfield_type_and_width.\n\n\t* gcc.dg/pr67088.c: New test.\n\nFrom-SVN: r226506", "tree": {"sha": "de264df0797b218dd8c4ba0467628218acb2c8f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de264df0797b218dd8c4ba0467628218acb2c8f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/420a9d9bd81efc3aaba61ea8e93a719cc78b2960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420a9d9bd81efc3aaba61ea8e93a719cc78b2960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/420a9d9bd81efc3aaba61ea8e93a719cc78b2960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420a9d9bd81efc3aaba61ea8e93a719cc78b2960/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5030111533de53f866bff85cd045085e717c7bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5030111533de53f866bff85cd045085e717c7bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5030111533de53f866bff85cd045085e717c7bf6"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "d9c80a5a7aad1d603ae78ac4ace6d38a86e28310", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420a9d9bd81efc3aaba61ea8e93a719cc78b2960/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420a9d9bd81efc3aaba61ea8e93a719cc78b2960/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=420a9d9bd81efc3aaba61ea8e93a719cc78b2960", "patch": "@@ -1,3 +1,10 @@\n+2015-08-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/67088\n+\t* c-decl.c (check_bitfield_type_and_width): Add location parameter.\n+\tUse it.\n+\t(grokdeclarator): Pass LOC down to check_bitfield_type_and_width.\n+\n 2015-08-02  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* c-parser.c (c_parser_if_body): Take token_indent_info"}, {"sha": "0d7aa3feb4828100f4ad8981c0d22bd6d5fe8ed1", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420a9d9bd81efc3aaba61ea8e93a719cc78b2960/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420a9d9bd81efc3aaba61ea8e93a719cc78b2960/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=420a9d9bd81efc3aaba61ea8e93a719cc78b2960", "patch": "@@ -5153,8 +5153,10 @@ flexible_array_type_p (tree type)\n \f\n /* Performs sanity checks on the TYPE and WIDTH of the bit-field NAME,\n    replacing with appropriate values if they are invalid.  */\n+\n static void\n-check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n+check_bitfield_type_and_width (location_t loc, tree *type, tree *width,\n+\t\t\t       tree orig_name)\n {\n   tree type_mv;\n   unsigned int max_width;\n@@ -5167,7 +5169,7 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n      field widths.  */\n   if (!INTEGRAL_TYPE_P (TREE_TYPE (*width)))\n     {\n-      error (\"bit-field %qs width not an integer constant\", name);\n+      error_at (loc, \"bit-field %qs width not an integer constant\", name);\n       *width = integer_one_node;\n     }\n   else\n@@ -5176,24 +5178,24 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n \t{\n \t  *width = c_fully_fold (*width, false, NULL);\n \t  if (TREE_CODE (*width) == INTEGER_CST)\n-\t    pedwarn (input_location, OPT_Wpedantic,\n+\t    pedwarn (loc, OPT_Wpedantic,\n \t\t     \"bit-field %qs width not an integer constant expression\",\n \t\t     name);\n \t}\n       if (TREE_CODE (*width) != INTEGER_CST)\n \t{\n-\t  error (\"bit-field %qs width not an integer constant\", name);\n+\t  error_at (loc, \"bit-field %qs width not an integer constant\", name);\n \t  *width = integer_one_node;\n \t}\n       constant_expression_warning (*width);\n       if (tree_int_cst_sgn (*width) < 0)\n \t{\n-\t  error (\"negative width in bit-field %qs\", name);\n+\t  error_at (loc, \"negative width in bit-field %qs\", name);\n \t  *width = integer_one_node;\n \t}\n       else if (integer_zerop (*width) && orig_name)\n \t{\n-\t  error (\"zero width for bit-field %qs\", name);\n+\t  error_at (loc, \"zero width for bit-field %qs\", name);\n \t  *width = integer_one_node;\n \t}\n     }\n@@ -5203,7 +5205,7 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n       && TREE_CODE (*type) != BOOLEAN_TYPE\n       && TREE_CODE (*type) != ENUMERAL_TYPE)\n     {\n-      error (\"bit-field %qs has invalid type\", name);\n+      error_at (loc, \"bit-field %qs has invalid type\", name);\n       *type = unsigned_type_node;\n     }\n \n@@ -5212,14 +5214,14 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n       && type_mv != integer_type_node\n       && type_mv != unsigned_type_node\n       && type_mv != boolean_type_node)\n-    pedwarn_c90 (input_location, OPT_Wpedantic,\n+    pedwarn_c90 (loc, OPT_Wpedantic,\n \t\t \"type of bit-field %qs is a GCC extension\", name);\n \n   max_width = TYPE_PRECISION (*type);\n \n   if (0 < compare_tree_int (*width, max_width))\n     {\n-      error (\"width of %qs exceeds its type\", name);\n+      error_at (loc, \"width of %qs exceeds its type\", name);\n       w = max_width;\n       *width = build_int_cst (integer_type_node, w);\n     }\n@@ -5232,7 +5234,7 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n       if (!lt\n \t  || w < tree_int_cst_min_precision (lt->enum_min, TYPE_SIGN (*type))\n \t  || w < tree_int_cst_min_precision (lt->enum_max, TYPE_SIGN (*type)))\n-\twarning (0, \"%qs is narrower than values of its type\", name);\n+\twarning_at (loc, 0, \"%qs is narrower than values of its type\", name);\n     }\n }\n \n@@ -6224,7 +6226,7 @@ grokdeclarator (const struct c_declarator *declarator,\n   /* Check the type and width of a bit-field.  */\n   if (bitfield)\n     {\n-      check_bitfield_type_and_width (&type, width, name);\n+      check_bitfield_type_and_width (loc, &type, width, name);\n       /* C11 makes it implementation-defined (6.7.2.1#5) whether\n \t atomic types are permitted for bit-fields; we have no code to\n \t make bit-field accesses atomic, so disallow them.  */"}, {"sha": "a403767ef495e51b2396a751ffef9c5930199581", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420a9d9bd81efc3aaba61ea8e93a719cc78b2960/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420a9d9bd81efc3aaba61ea8e93a719cc78b2960/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=420a9d9bd81efc3aaba61ea8e93a719cc78b2960", "patch": "@@ -1,3 +1,8 @@\n+2015-08-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/67088\n+\t* gcc.dg/pr67088.c: New test.\n+\n 2015-08-03  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \tPR target/66731"}, {"sha": "b2f77f5de5ad85817158f5a9ec5c3a2563a07d30", "filename": "gcc/testsuite/gcc.dg/pr67088.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420a9d9bd81efc3aaba61ea8e93a719cc78b2960/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67088.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420a9d9bd81efc3aaba61ea8e93a719cc78b2960/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67088.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67088.c?ref=420a9d9bd81efc3aaba61ea8e93a719cc78b2960", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/67088 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wpedantic -std=c90\" } */\n+\n+enum E { A = 2 };\n+int j;\n+float f;\n+struct S1 {\n+  double b1:1; /* { dg-error \"10:has invalid type\" } */\n+  int b2:j; /* { dg-error \"7:width not an integer constant\" } */\n+  int b3:f; /* { dg-error \"7:width not an integer constant\" } */\n+  int b4:(int) __builtin_log (100); /* { dg-warning \"7:width not an integer constant\" } */\n+  int b5:-2; /* { dg-error \"7:negative width\" } */\n+  int b6:0; /* { dg-error \"7:zero width\" } */\n+  long int b7:32; /* { dg-warning \"12:type of bit-field\" } */\n+  int b8:sizeof (int) * __CHAR_BIT__ * 2; /* { dg-error \"7:width of\" } */\n+  __extension__ enum E b9:1; /* { dg-warning \"24:is narrower\" } */\n+};"}]}