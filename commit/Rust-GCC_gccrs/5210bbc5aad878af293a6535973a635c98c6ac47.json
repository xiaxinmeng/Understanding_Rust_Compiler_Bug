{"sha": "5210bbc5aad878af293a6535973a635c98c6ac47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIxMGJiYzVhYWQ4NzhhZjI5M2E2NTM1OTczYTYzNWM5OGM2YWM0Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-12-16T01:27:23Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-12-16T01:27:23Z"}, "message": "re PR tree-optimization/46939 (http://blog.regehr.org/archives/320 example 6)\n\n\tPR middle-end/46939\n\t* predic.c (predict_paths_leading_to_edge): New function.\n\t(apply_return_prediction): Use it.\n\t(predict_paths_for_bb): Do not special case abnormals.\n\t* gcc.target/i386/pr46939.c: New testcase.\n\nFrom-SVN: r167893", "tree": {"sha": "e41c4607d39b103e09dc0d95fc1780e5e66e11e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e41c4607d39b103e09dc0d95fc1780e5e66e11e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5210bbc5aad878af293a6535973a635c98c6ac47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5210bbc5aad878af293a6535973a635c98c6ac47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5210bbc5aad878af293a6535973a635c98c6ac47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5210bbc5aad878af293a6535973a635c98c6ac47/comments", "author": null, "committer": null, "parents": [{"sha": "7a2d845d3e116031530ae201dfb5e75edf995f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2d845d3e116031530ae201dfb5e75edf995f31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2d845d3e116031530ae201dfb5e75edf995f31"}], "stats": {"total": 166, "additions": 161, "deletions": 5}, "files": [{"sha": "57de984bcc2bb0b539fd6d6fb9dcb70b111c7eee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5210bbc5aad878af293a6535973a635c98c6ac47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5210bbc5aad878af293a6535973a635c98c6ac47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5210bbc5aad878af293a6535973a635c98c6ac47", "patch": "@@ -1,3 +1,10 @@\n+2010-12-16  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/46939\n+\t* predic.c (predict_paths_leading_to_edge): New function.\n+\t(apply_return_prediction): Use it.\n+\t(predict_paths_for_bb): Do not special case abnormals.\n+\n 2010-12-16  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config.gcc (powerpc-*-lynxos*): Don't add lynx.opt to"}, {"sha": "a86708a5935174fa982ffb120b807e60248db29e", "filename": "gcc/predict.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5210bbc5aad878af293a6535973a635c98c6ac47/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5210bbc5aad878af293a6535973a635c98c6ac47/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=5210bbc5aad878af293a6535973a635c98c6ac47", "patch": "@@ -77,6 +77,7 @@ static sreal real_zero, real_one, real_almost_one, real_br_prob_base,\n static void combine_predictions_for_insn (rtx, basic_block);\n static void dump_prediction (FILE *, enum br_predictor, int, basic_block, int);\n static void predict_paths_leading_to (basic_block, enum br_predictor, enum prediction);\n+static void predict_paths_leading_to_edge (edge, enum br_predictor, enum prediction);\n static bool can_predict_insn_p (const_rtx);\n \n /* Information we hold about each branch predictor.\n@@ -1558,8 +1559,8 @@ apply_return_prediction (void)\n       {\n \tpred = return_prediction (PHI_ARG_DEF (phi, i), &direction);\n \tif (pred != PRED_NO_PREDICTION)\n-\t  predict_paths_leading_to (gimple_phi_arg_edge (phi, i)->src, pred,\n-\t\t\t\t    direction);\n+\t  predict_paths_leading_to_edge (gimple_phi_arg_edge (phi, i), pred,\n+\t\t\t\t         direction);\n       }\n }\n \n@@ -1805,16 +1806,16 @@ predict_paths_for_bb (basic_block cur, basic_block bb,\n       edge_iterator ei2;\n       bool found = false;\n \n-      /* Ignore abnormals, we predict them as not taken anyway.  */\n-      if (e->flags & (EDGE_EH | EDGE_FAKE | EDGE_ABNORMAL))\n+      /* Ignore fake edges and eh, we predict them as not taken anyway.  */\n+      if (e->flags & (EDGE_EH | EDGE_FAKE))\n \tcontinue;\n       gcc_assert (bb == cur || dominated_by_p (CDI_POST_DOMINATORS, cur, bb));\n \n       /* See if there is how many edge from e->src that is not abnormal\n \t and does not lead to BB.  */\n       FOR_EACH_EDGE (e2, ei2, e->src->succs)\n \tif (e2 != e\n-\t    && !(e2->flags & (EDGE_EH | EDGE_FAKE | EDGE_ABNORMAL))\n+\t    && !(e2->flags & (EDGE_EH | EDGE_FAKE))\n \t    && !dominated_by_p (CDI_POST_DOMINATORS, e2->dest, bb))\n \t  {\n \t    found = true;\n@@ -1844,6 +1845,31 @@ predict_paths_leading_to (basic_block bb, enum br_predictor pred,\n {\n   predict_paths_for_bb (bb, bb, pred, taken);\n }\n+\n+/* Like predict_paths_leading_to but take edge instead of basic block.  */\n+\n+static void\n+predict_paths_leading_to_edge (edge e, enum br_predictor pred,\n+\t\t\t       enum prediction taken)\n+{\n+  bool has_nonloop_edge = false;\n+  edge_iterator ei;\n+  edge e2;\n+\n+  basic_block bb = e->src;\n+  FOR_EACH_EDGE (e2, ei, bb->succs)\n+    if (e2->dest != e->src && e2->dest != e->dest\n+\t&& !(e->flags & (EDGE_EH | EDGE_FAKE))\n+\t&& !dominated_by_p (CDI_POST_DOMINATORS, e->src, e2->dest))\n+      {\n+\thas_nonloop_edge = true;\n+\tbreak;\n+      }\n+  if (!has_nonloop_edge)\n+    predict_paths_for_bb (bb, bb, pred, taken);\n+  else\n+    predict_edge_def (e, pred, taken);\n+}\n \f\n /* This is used to carry information about basic blocks.  It is\n    attached to the AUX field of the standard CFG block.  */"}, {"sha": "8ca61f499182883b0a8902111e33ca04826d1e2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5210bbc5aad878af293a6535973a635c98c6ac47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5210bbc5aad878af293a6535973a635c98c6ac47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5210bbc5aad878af293a6535973a635c98c6ac47", "patch": "@@ -1,3 +1,8 @@\n+2010-12-16  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/46939\n+\t* gcc.target/i386/pr46939.c: New testcase.\n+\n 2010-12-15  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/46404"}, {"sha": "2f50e37ee017a3012d5f243387ec09ecb3652901", "filename": "gcc/testsuite/gcc.target/i386/pr46939.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5210bbc5aad878af293a6535973a635c98c6ac47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46939.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5210bbc5aad878af293a6535973a635c98c6ac47/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46939.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46939.c?ref=5210bbc5aad878af293a6535973a635c98c6ac47", "patch": "@@ -0,0 +1,118 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+int\n+php_filter_parse_int (char const *str, unsigned int str_len, long *ret)\n+{\n+  long ctx_value;\n+  int sign;\n+  int digit;\n+  char const *end;\n+  int tmp;\n+  char const *tmp___0;\n+  char const *tmp___1;\n+\n+  sign = 0;\n+  digit = 0;\n+  end = str + str_len;\n+  switch ((int) *str)\n+    {\n+    case 45:\n+      sign = 1;\n+    case 43:\n+      str++;\n+    default:;\n+      break;\n+    }\n+  if ((unsigned long) str < (unsigned long) end)\n+    {\n+      if ((int const) *str >= 49)\n+\t{\n+\t  if ((int const) *str <= 57)\n+\t    {\n+\t      if (sign)\n+\t\t{\n+\t\t  tmp = -1;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  tmp = 1;\n+\t\t}\n+\t      tmp___0 = str;\n+\t      str++;\n+\t      ctx_value = (long) (tmp * (int) ((int const) *tmp___0 - 48));\n+\t    }\n+\t  else\n+\t    {\n+\t      return (-1);\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  return (-1);\n+\t}\n+    }\n+  else\n+    {\n+      return (-1);\n+    }\n+  if (end - str > 19)\n+    {\n+      return (-1);\n+    }\n+  while ((unsigned long) str < (unsigned long) end)\n+    {\n+      if ((int const) *str >= 48)\n+\t{\n+\t  if ((int const) *str <= 57)\n+\t    {\n+\t      tmp___1 = str;\n+\t      str++;\n+\t      digit = (int) ((int const) *tmp___1 - 48);\n+\t      if (!sign)\n+\t\t{\n+\t\t  if (ctx_value <=\n+\t\t      (9223372036854775807L - (long) digit) / 10L)\n+\t\t    {\n+\t\t      ctx_value = ctx_value * 10L + (long) digit;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      goto _L;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t_L:\n+\t\t  if (sign)\n+\t\t    {\n+\t\t      if (ctx_value >=\n+\t\t\t  ((-0x7FFFFFFFFFFFFFFF - 1) + (long) digit) / 10L)\n+\t\t\t{\n+\t\t\t  ctx_value = ctx_value * 10L - (long) digit;\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  return (-1);\n+\t\t\t}\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      return (-1);\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      return (-1);\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  return (-1);\n+\t}\n+    }\n+  *ret = ctx_value;\n+  return (1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"idiv\" } } */"}]}