{"sha": "3aaaa103d7be29175917b4c85412d2791e63224d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FhYWExMDNkN2JlMjkxNzU5MTdiNGM4NTQxMmQyNzkxZTYzMjI0ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-06-03T23:13:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-06-03T23:13:10Z"}, "message": "class.c (mark_type_abi_tags): New.\n\n\t* class.c (mark_type_abi_tags): New.\n\t(check_abi_tags): Use it.\n\nFrom-SVN: r199629", "tree": {"sha": "13ba1c4610ca51396feea7cbd848364f442a6dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ba1c4610ca51396feea7cbd848364f442a6dd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aaaa103d7be29175917b4c85412d2791e63224d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aaaa103d7be29175917b4c85412d2791e63224d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aaaa103d7be29175917b4c85412d2791e63224d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aaaa103d7be29175917b4c85412d2791e63224d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25c229379aa6c0bc8cadd913e014dd9be62453f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c229379aa6c0bc8cadd913e014dd9be62453f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25c229379aa6c0bc8cadd913e014dd9be62453f3"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "76c401e089bdcd8fc2980bdbb8d40f0b2c377d07", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aaaa103d7be29175917b4c85412d2791e63224d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aaaa103d7be29175917b4c85412d2791e63224d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3aaaa103d7be29175917b4c85412d2791e63224d", "patch": "@@ -1,3 +1,8 @@\n+2013-05-31  Jason Merrill  <jason@redhat.com>\n+\n+\t* class.c (mark_type_abi_tags): New.\n+\t(check_abi_tags): Use it.\n+\n 2013-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57419"}, {"sha": "40e6d3eed73d19c3825c420b2437cb9ed247f79a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aaaa103d7be29175917b4c85412d2791e63224d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aaaa103d7be29175917b4c85412d2791e63224d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3aaaa103d7be29175917b4c85412d2791e63224d", "patch": "@@ -1354,11 +1354,11 @@ find_abi_tags_r (tree *tp, int */*walk_subtrees*/, void *data)\n   return NULL_TREE;\n }\n \n-/* Check that class T has all the abi tags that subobject SUBOB has, or\n-   warn if not.  */\n+/* Set IDENTIFIER_MARKED on all the ABI tags on T and its (transitively\n+   complete) template arguments.  */\n \n static void\n-check_abi_tags (tree t, tree subob)\n+mark_type_abi_tags (tree t, bool val)\n {\n   tree attributes = lookup_attribute (\"abi_tag\", TYPE_ATTRIBUTES (t));\n   if (attributes)\n@@ -1368,25 +1368,41 @@ check_abi_tags (tree t, tree subob)\n \t{\n \t  tree tag = TREE_VALUE (list);\n \t  tree id = get_identifier (TREE_STRING_POINTER (tag));\n-\t  IDENTIFIER_MARKED (id) = true;\n+\t  IDENTIFIER_MARKED (id) = val;\n+\t}\n+    }\n+\n+  /* Also mark ABI tags from template arguments.  */\n+  if (CLASSTYPE_TEMPLATE_INFO (t))\n+    {\n+      tree args = CLASSTYPE_TI_ARGS (t);\n+      for (int i = 0; i < TMPL_ARGS_DEPTH (args); ++i)\n+\t{\n+\t  tree level = TMPL_ARGS_LEVEL (args, i+1);\n+\t  for (int j = 0; j < TREE_VEC_LENGTH (level); ++j)\n+\t    {\n+\t      tree arg = TREE_VEC_ELT (level, j);\n+\t      if (CLASS_TYPE_P (arg))\n+\t\tmark_type_abi_tags (arg, val);\n+\t    }\n \t}\n     }\n+}\n+\n+/* Check that class T has all the abi tags that subobject SUBOB has, or\n+   warn if not.  */\n+\n+static void\n+check_abi_tags (tree t, tree subob)\n+{\n+  mark_type_abi_tags (t, true);\n \n   tree subtype = TYPE_P (subob) ? subob : TREE_TYPE (subob);\n   struct abi_tag_data data = { t, subob };\n \n   cp_walk_tree_without_duplicates (&subtype, find_abi_tags_r, &data);\n \n-  if (attributes)\n-    {\n-      for (tree list = TREE_VALUE (attributes); list;\n-\t   list = TREE_CHAIN (list))\n-\t{\n-\t  tree tag = TREE_VALUE (list);\n-\t  tree id = get_identifier (TREE_STRING_POINTER (tag));\n-\t  IDENTIFIER_MARKED (id) = false;\n-\t}\n-    }\n+  mark_type_abi_tags (t, false);\n }\n \n /* Run through the base classes of T, updating CANT_HAVE_CONST_CTOR_P,"}, {"sha": "de5580239dd76fbcd216d865e917d07cb5e2685a", "filename": "gcc/testsuite/g++.dg/abi/abi-tag5.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aaaa103d7be29175917b4c85412d2791e63224d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aaaa103d7be29175917b4c85412d2791e63224d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag5.C?ref=3aaaa103d7be29175917b4c85412d2791e63224d", "patch": "@@ -0,0 +1,6 @@\n+// { dg-options -Wabi-tag }\n+\n+struct __attribute__ ((abi_tag (\"foo\"))) A { };\n+template <class T> struct B: T { };\n+\n+B<A> b;"}]}