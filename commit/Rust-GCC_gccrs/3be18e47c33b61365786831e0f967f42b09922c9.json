{"sha": "3be18e47c33b61365786831e0f967f42b09922c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JlMThlNDdjMzNiNjEzNjU3ODY4MzFlMGY5NjdmNDJiMDk5MjJjOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-01-25T20:35:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-01-25T20:35:34Z"}, "message": "Revert\t* trans-mem.c (requires_barrier): Do not instrument thread local\n\tvariables and emit save/restore for them.\n\nFrom-SVN: r183538", "tree": {"sha": "27e1bb53de99cb62583995cbc7df688049897056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27e1bb53de99cb62583995cbc7df688049897056"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3be18e47c33b61365786831e0f967f42b09922c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3be18e47c33b61365786831e0f967f42b09922c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3be18e47c33b61365786831e0f967f42b09922c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3be18e47c33b61365786831e0f967f42b09922c9/comments", "author": null, "committer": null, "parents": [{"sha": "dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf"}], "stats": {"total": 57, "additions": 19, "deletions": 38}, "files": [{"sha": "338e038553f3e26c73adf218fe9bdfb7afced221", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be18e47c33b61365786831e0f967f42b09922c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be18e47c33b61365786831e0f967f42b09922c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3be18e47c33b61365786831e0f967f42b09922c9", "patch": "@@ -1,3 +1,9 @@\n+2012-01-26  Richard Henderson  <rth@redhat.com>\n+\n+\tRevert 2012-01-24 change:\n+\t* trans-mem.c (requires_barrier): Do not instrument thread local\n+\tvariables and emit save/restore for them.\n+\n 2012-01-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/51986"}, {"sha": "83a90fffb6ce299e9a69158ce3d0a94422f35755", "filename": "gcc/testsuite/gcc.dg/tm/threadlocal-1.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fthreadlocal-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fthreadlocal-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fthreadlocal-1.c?ref=dda6ecaea8be6f0dd4a3b7ca5498698702a32ecf", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fgnu-tm -O -fdump-tree-tmedge\" } */\n-__thread int notshared = 0;\n-int shared = 0;\n-\n-int main()\n-{\n-  __transaction_atomic\n-    {\n-      notshared++;\n-      shared++;\n-    }\n-  return notshared + shared;\n-}\n-/* { dg-final { scan-tree-dump-times \"tm_save.\\[0-9_\\]+ = notshared\" 1 \"tmedge\" } } */\n-/* { dg-final { scan-tree-dump-times \"notshared = tm_save\" 1 \"tmedge\" } } */\n-/* { dg-final { cleanup-tree-dump \"tmedge\" } } */"}, {"sha": "de7a913be66bf63e5c634995aaee4e87dcd2add4", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be18e47c33b61365786831e0f967f42b09922c9/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be18e47c33b61365786831e0f967f42b09922c9/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=3be18e47c33b61365786831e0f967f42b09922c9", "patch": "@@ -1,5 +1,5 @@\n /* Passes for transactional memory support.\n-   Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+   Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -1488,18 +1488,7 @@ requires_barrier (basic_block entry_block, tree x, gimple stmt)\n \t}\n \n       if (is_global_var (x))\n-\t{\n-\t  if (DECL_THREAD_LOCAL_P (x))\n-\t    goto thread_local;\n-\t  if (DECL_HAS_VALUE_EXPR_P (x))\n-\t    {\n-\t      tree value = get_base_address (DECL_VALUE_EXPR (x));\n-\n-\t      if (value && DECL_P (value) && DECL_THREAD_LOCAL_P (value))\n-\t\tgoto thread_local;\n-\t    }\n-\t  return !TREE_READONLY (x);\n-\t}\n+\treturn !TREE_READONLY (x);\n       if (/* FIXME: This condition should actually go below in the\n \t     tm_log_add() call, however is_call_clobbered() depends on\n \t     aliasing info which is not available during\n@@ -1509,14 +1498,17 @@ requires_barrier (basic_block entry_block, tree x, gimple stmt)\n \t     lower_sequence_tm altogether.  */\n \t  needs_to_live_in_memory (x))\n \treturn true;\n-    thread_local:\n-      /* For local memory that doesn't escape (aka thread private memory), \n-\t we can either save the value at the beginning of the transaction and\n-\t restore on restart, or call a tm function to dynamically save and\n-\t restore on restart (ITM_L*). */\n-      if (stmt)\n-\ttm_log_add (entry_block, orig, stmt);\n-      return false;\n+      else\n+\t{\n+\t  /* For local memory that doesn't escape (aka thread private\n+\t     memory), we can either save the value at the beginning of\n+\t     the transaction and restore on restart, or call a tm\n+\t     function to dynamically save and restore on restart\n+\t     (ITM_L*).  */\n+\t  if (stmt)\n+\t    tm_log_add (entry_block, orig, stmt);\n+\t  return false;\n+\t}\n \n     default:\n       return false;"}]}