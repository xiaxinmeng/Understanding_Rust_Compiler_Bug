{"sha": "213f5e8accc3e6dad179eafd48c920e524b56be2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzZjVlOGFjY2MzZTZkYWQxNzllYWZkNDhjOTIwZTUyNGI1NmJlMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-07-25T16:46:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-07-25T16:46:34Z"}, "message": "re PR c++/85515 (Bogus suggestions from \"GCC's leaky abstractions\")\n\n\tPR c++/85515\n\t* cp-tree.h (enum cp_tree_index): Add\n\tCPTI_FOR_{RANGE,BEGIN,END}{,_}_IDENTIFIER.\n\t(for_range__identifier, for_begin__identifier, for_end__identifier,\n\tfor_range_identifier, for_begin_identifier, for_end_identifier):\n\tDefine.\n\t* decl.c (initialize_predefined_identifiers): Initialize\n\tfor_{range,begin,end}{,_}_identifier.\n\t* parser.c (build_range_temp): Use for_range__identifier instead of\n\tget_identifier (\"__for_range\").\n\t(cp_convert_range_for): Use for_begin__identifier and\n\tfor_end__identifier instead of get_identifier (\"__for_begin\") and\n\tget_identifier (\"__for_end\").\n\t* semantics.c (finish_for_stmt): Rename \"__for_{range,begin,end} \"\n\tlocal symbols to \"__for_{range,begin,end}\".\n\n\t* g++.dg/pr85515-2.C: Add expected dg-error.\n\t* g++.dg/cpp0x/range-for36.C: New test.\n\nFrom-SVN: r262975", "tree": {"sha": "faf01b02efb3ee21176b6e67d3126676e4e778ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faf01b02efb3ee21176b6e67d3126676e4e778ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/213f5e8accc3e6dad179eafd48c920e524b56be2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213f5e8accc3e6dad179eafd48c920e524b56be2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213f5e8accc3e6dad179eafd48c920e524b56be2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213f5e8accc3e6dad179eafd48c920e524b56be2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c44fa4a6660c4d81891093578d5e9463d6d85b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44fa4a6660c4d81891093578d5e9463d6d85b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c44fa4a6660c4d81891093578d5e9463d6d85b73"}], "stats": {"total": 116, "additions": 108, "deletions": 8}, "files": [{"sha": "51de7d15b2f48e88e888ec6dc9ca186bad9a0a28", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=213f5e8accc3e6dad179eafd48c920e524b56be2", "patch": "@@ -1,3 +1,21 @@\n+2018-07-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/85515\n+\t* cp-tree.h (enum cp_tree_index): Add\n+\tCPTI_FOR_{RANGE,BEGIN,END}{,_}_IDENTIFIER.\n+\t(for_range__identifier, for_begin__identifier, for_end__identifier,\n+\tfor_range_identifier, for_begin_identifier, for_end_identifier):\n+\tDefine.\n+\t* decl.c (initialize_predefined_identifiers): Initialize\n+\tfor_{range,begin,end}{,_}_identifier.\n+\t* parser.c (build_range_temp): Use for_range__identifier instead of\n+\tget_identifier (\"__for_range\").\n+\t(cp_convert_range_for): Use for_begin__identifier and\n+\tfor_end__identifier instead of get_identifier (\"__for_begin\") and\n+\tget_identifier (\"__for_end\").\n+\t* semantics.c (finish_for_stmt): Rename \"__for_{range,begin,end} \"\n+\tlocal symbols to \"__for_{range,begin,end}\".\n+\n 2018-07-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/86569"}, {"sha": "d4b1fa1f0e1e2432c9db0f8e6956854f11926c22", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=213f5e8accc3e6dad179eafd48c920e524b56be2", "patch": "@@ -154,6 +154,12 @@ enum cp_tree_index\n     CPTI_AUTO_IDENTIFIER,\n     CPTI_DECLTYPE_AUTO_IDENTIFIER,\n     CPTI_INIT_LIST_IDENTIFIER,\n+    CPTI_FOR_RANGE__IDENTIFIER,\n+    CPTI_FOR_BEGIN__IDENTIFIER,\n+    CPTI_FOR_END__IDENTIFIER,\n+    CPTI_FOR_RANGE_IDENTIFIER,\n+    CPTI_FOR_BEGIN_IDENTIFIER,\n+    CPTI_FOR_END_IDENTIFIER,\n \n     CPTI_LANG_NAME_C,\n     CPTI_LANG_NAME_CPLUSPLUS,\n@@ -274,6 +280,12 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define auto_identifier\t\t\tcp_global_trees[CPTI_AUTO_IDENTIFIER]\n #define decltype_auto_identifier\tcp_global_trees[CPTI_DECLTYPE_AUTO_IDENTIFIER]\n #define init_list_identifier\t\tcp_global_trees[CPTI_INIT_LIST_IDENTIFIER]\n+#define for_range__identifier\t\tcp_global_trees[CPTI_FOR_RANGE__IDENTIFIER]\n+#define for_begin__identifier\t\tcp_global_trees[CPTI_FOR_BEGIN__IDENTIFIER]\n+#define for_end__identifier\t\tcp_global_trees[CPTI_FOR_END__IDENTIFIER]\n+#define for_range_identifier\t\tcp_global_trees[CPTI_FOR_RANGE_IDENTIFIER]\n+#define for_begin_identifier\t\tcp_global_trees[CPTI_FOR_BEGIN_IDENTIFIER]\n+#define for_end_identifier\t\tcp_global_trees[CPTI_FOR_END_IDENTIFIER]\n #define lang_name_c\t\t\tcp_global_trees[CPTI_LANG_NAME_C]\n #define lang_name_cplusplus\t\tcp_global_trees[CPTI_LANG_NAME_CPLUSPLUS]\n "}, {"sha": "29d9ba78a218bebf3c9b06d1180546367493dc16", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=213f5e8accc3e6dad179eafd48c920e524b56be2", "patch": "@@ -4044,6 +4044,12 @@ initialize_predefined_identifiers (void)\n     {\"auto\", &auto_identifier, cik_normal},\n     {\"decltype(auto)\", &decltype_auto_identifier, cik_normal},\n     {\"initializer_list\", &init_list_identifier, cik_normal},\n+    {\"__for_range \", &for_range__identifier, cik_normal},\n+    {\"__for_begin \", &for_begin__identifier, cik_normal},\n+    {\"__for_end \", &for_end__identifier, cik_normal},\n+    {\"__for_range\", &for_range_identifier, cik_normal},\n+    {\"__for_begin\", &for_begin_identifier, cik_normal},\n+    {\"__for_end\", &for_end_identifier, cik_normal},\n     {NULL, NULL, cik_normal}\n   };\n "}, {"sha": "3344ef37decfa011cd3bc8478a98500b2069b70e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=213f5e8accc3e6dad179eafd48c920e524b56be2", "patch": "@@ -11952,8 +11952,8 @@ build_range_temp (tree range_expr)\n \t\t\t\t  type_uses_auto (range_type));\n \n   /* Create the __range variable.  */\n-  range_temp = build_decl (input_location, VAR_DECL,\n-\t\t\t   get_identifier (\"__for_range\"), range_type);\n+  range_temp = build_decl (input_location, VAR_DECL, for_range__identifier,\n+\t\t\t   range_type);\n   TREE_USED (range_temp) = 1;\n   DECL_ARTIFICIAL (range_temp) = 1;\n \n@@ -12060,8 +12060,8 @@ cp_convert_range_for (tree statement, tree range_decl, tree range_expr,\n     }\n \n   /* The new for initialization statement.  */\n-  begin = build_decl (input_location, VAR_DECL,\n-\t\t      get_identifier (\"__for_begin\"), iter_type);\n+  begin = build_decl (input_location, VAR_DECL, for_begin__identifier,\n+\t\t      iter_type);\n   TREE_USED (begin) = 1;\n   DECL_ARTIFICIAL (begin) = 1;\n   pushdecl (begin);\n@@ -12071,8 +12071,7 @@ cp_convert_range_for (tree statement, tree range_decl, tree range_expr,\n \n   if (cxx_dialect >= cxx17)\n     iter_type = cv_unqualified (TREE_TYPE (end_expr));\n-  end = build_decl (input_location, VAR_DECL,\n-\t\t    get_identifier (\"__for_end\"), iter_type);\n+  end = build_decl (input_location, VAR_DECL, for_end__identifier, iter_type);\n   TREE_USED (end) = 1;\n   DECL_ARTIFICIAL (end) = 1;\n   pushdecl (end);"}, {"sha": "bfdca5024d3128b66a6b9b6a4408871991c03335", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=213f5e8accc3e6dad179eafd48c920e524b56be2", "patch": "@@ -1060,7 +1060,35 @@ finish_for_stmt (tree for_stmt)\n \t\t     : &FOR_SCOPE (for_stmt));\n   tree scope = *scope_ptr;\n   *scope_ptr = NULL;\n+\n+  /* During parsing of the body, range for uses \"__for_{range,begin,end} \"\n+     decl names to make those unaccessible by code in the body.\n+     Change it to ones with underscore instead of space, so that it can\n+     be inspected in the debugger.  */\n+  tree range_for_decl[3] = { NULL_TREE, NULL_TREE, NULL_TREE };\n+  gcc_assert (CPTI_FOR_BEGIN__IDENTIFIER == CPTI_FOR_RANGE__IDENTIFIER + 1\n+\t      && CPTI_FOR_END__IDENTIFIER == CPTI_FOR_RANGE__IDENTIFIER + 2\n+\t      && CPTI_FOR_RANGE_IDENTIFIER == CPTI_FOR_RANGE__IDENTIFIER + 3\n+\t      && CPTI_FOR_BEGIN_IDENTIFIER == CPTI_FOR_BEGIN__IDENTIFIER + 3\n+\t      && CPTI_FOR_END_IDENTIFIER == CPTI_FOR_END__IDENTIFIER + 3);\n+  for (int i = 0; i < 3; i++)\n+    {\n+      tree id = cp_global_trees[CPTI_FOR_RANGE__IDENTIFIER + i];\n+      if (IDENTIFIER_BINDING (id)\n+\t  && IDENTIFIER_BINDING (id)->scope == current_binding_level)\n+\t{\n+\t  range_for_decl[i] = IDENTIFIER_BINDING (id)->value;\n+\t  gcc_assert (VAR_P (range_for_decl[i])\n+\t\t      && DECL_ARTIFICIAL (range_for_decl[i]));\n+\t}\n+    }\n+\n   add_stmt (do_poplevel (scope));\n+\n+  for (int i = 0; i < 3; i++)\n+    if (range_for_decl[i])\n+      DECL_NAME (range_for_decl[i])\n+\t= cp_global_trees[CPTI_FOR_RANGE_IDENTIFIER + i];\n }\n \n /* Begin a range-for-statement.  Returns a new RANGE_FOR_STMT."}, {"sha": "16027a791a2c9a4dfd22c3bf008b0bd52971ccf4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=213f5e8accc3e6dad179eafd48c920e524b56be2", "patch": "@@ -1,3 +1,9 @@\n+2018-07-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/85515\n+\t* g++.dg/pr85515-2.C: Add expected dg-error.\n+\t* g++.dg/cpp0x/range-for36.C: New test.\n+\n 2018-07-25  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/uncached-1.c: New test."}, {"sha": "fdf7f7b27ae6adf6a16d75406d8f53da5e033dd1", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for36.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for36.C?ref=213f5e8accc3e6dad179eafd48c920e524b56be2", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/85515\n+// { dg-do compile { target c++11 } }\n+\n+int a[10];\n+\n+void\n+foo ()\n+{\n+  for (auto &i : a)\n+    if (i != *__for_begin\t\t// { dg-error \"was not declared in this scope\" }\n+\t|| &i == __for_end\t\t// { dg-error \"was not declared in this scope\" }\n+\t|| &__for_range[0] != &a[0])\t// { dg-error \"was not declared in this scope\" }\n+      __builtin_abort ();\n+}\n+\n+template <int N>\n+void\n+bar ()\n+{\n+  for (auto &i : a)\n+    if (i != *__for_begin\t\t// { dg-error \"was not declared in this scope\" }\n+\t|| &i == __for_end\t\t// { dg-error \"was not declared in this scope\" }\n+\t|| &__for_range[0] != &a[0])\t// { dg-error \"was not declared in this scope\" }\n+      __builtin_abort ();\n+}\n+\n+void\n+baz ()\n+{\n+  foo ();\n+  bar <0> ();\n+}"}, {"sha": "2b761bf9b929804a6aae22a34246e051732613df", "filename": "gcc/testsuite/g++.dg/pr85515-2.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85515-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213f5e8accc3e6dad179eafd48c920e524b56be2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85515-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85515-2.C?ref=213f5e8accc3e6dad179eafd48c920e524b56be2", "patch": "@@ -15,8 +15,7 @@ int test_2 ()\n   int sum = 0;\n   for (const auto v: arr) {\n     sum += v;\n-    // TODO: should we issue an error for the following assignment?\n-    __for_begin = __for_end;\n+    __for_begin = __for_end;\t// { dg-error \"was not declared in this scope\" }\n   }\n   return sum;\n }"}]}