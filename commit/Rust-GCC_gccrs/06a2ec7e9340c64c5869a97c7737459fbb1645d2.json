{"sha": "06a2ec7e9340c64c5869a97c7737459fbb1645d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhMmVjN2U5MzQwYzY0YzU4NjlhOTdjNzczNzQ1OWZiYjE2NDVkMg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-22T14:01:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-22T14:01:37Z"}, "message": "Merge #585 #586\n\n585: Add iterate impl_blocks helper r=philberty a=philberty\n\nThis helper will allow use to use mappings to iterate\r\nall impl blocks within the specified crate.\n\n586: Add mappings for trait items r=philberty a=philberty\n\nAdd mappings for trait items that can be used for\r\nquery-based compilation and type checking\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "2ef06337ee3cb31cb58a8c0d4824f0b123196127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ef06337ee3cb31cb58a8c0d4824f0b123196127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06a2ec7e9340c64c5869a97c7737459fbb1645d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+XpBCRBK7hj4Ov3rIwAA1fUIAJP932Qr+RUacFIbnXKPGenJ\nTPuha0FDaMvDVjd/9MPW8BM7StA5/oTUKsi4UY+RxpzGMbwPPLOhFbQtrbPR1td1\nrbSb4ToBDEQOSfwW0AdbL1yxIH+ig8GCilYjkiQuhUhJBXL9iliW9UUnItgln9Wk\nHTLhZUJuteZpiZKeKafCEjygCmifGC6fZWl0Wuxa4QzZSDfjUYFSHe6w72J1QvNK\nMTR4E0hzFDwKjQ6ktGgpw7HfWOTtJOlRmoM6k3nkRsu2XIIxG8ecsHL1wIc5R0p2\n2F6DhXHI5AQu8SkrrhJL6sLV9uY5Ab9RjHrhMJ+0xdWyNTrmVQqlqk4ckWUW614=\n=x6wk\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ef06337ee3cb31cb58a8c0d4824f0b123196127\nparent dd825b9b5d2705023cd3faa20684b881d154a9ba\nparent 1c5fef82c0f525be3386557180a416d681743c4f\nparent 1dc68e40f2d2b9b0d2a208a63f4923be8b12351e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626962497 +0000\ncommitter GitHub <noreply@github.com> 1626962497 +0000\n\nMerge #585 #586\n\n585: Add iterate impl_blocks helper r=philberty a=philberty\n\nThis helper will allow use to use mappings to iterate\r\nall impl blocks within the specified crate.\n\n586: Add mappings for trait items r=philberty a=philberty\n\nAdd mappings for trait items that can be used for\r\nquery-based compilation and type checking\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a2ec7e9340c64c5869a97c7737459fbb1645d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a2ec7e9340c64c5869a97c7737459fbb1645d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a2ec7e9340c64c5869a97c7737459fbb1645d2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd825b9b5d2705023cd3faa20684b881d154a9ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd825b9b5d2705023cd3faa20684b881d154a9ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd825b9b5d2705023cd3faa20684b881d154a9ba"}, {"sha": "1c5fef82c0f525be3386557180a416d681743c4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5fef82c0f525be3386557180a416d681743c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c5fef82c0f525be3386557180a416d681743c4f"}, {"sha": "1dc68e40f2d2b9b0d2a208a63f4923be8b12351e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc68e40f2d2b9b0d2a208a63f4923be8b12351e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc68e40f2d2b9b0d2a208a63f4923be8b12351e"}], "stats": {"total": 84, "additions": 76, "deletions": 8}, "files": [{"sha": "cbc80d305684fe417735bd8f1086348e31e3ed0d", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a2ec7e9340c64c5869a97c7737459fbb1645d2/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a2ec7e9340c64c5869a97c7737459fbb1645d2/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=06a2ec7e9340c64c5869a97c7737459fbb1645d2", "patch": "@@ -364,10 +364,15 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    translated\n+    HIR::TraitItemFunc *trait_item\n       = new HIR::TraitItemFunc (mapping, std::move (decl),\n \t\t\t\tstd::unique_ptr<HIR::Expr> (block_expr),\n \t\t\t\tfunc.get_outer_attrs (), func.get_locus ());\n+    translated = trait_item;\n+    mappings->insert_hir_trait_item (mapping.get_crate_num (),\n+\t\t\t\t     mapping.get_hirid (), translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       trait_item->get_locus ());\n   }\n \n   void visit (AST::TraitItemMethod &method) override\n@@ -428,10 +433,15 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    translated\n+    HIR::TraitItemFunc *trait_item\n       = new HIR::TraitItemFunc (mapping, std::move (decl),\n \t\t\t\tstd::unique_ptr<HIR::Expr> (block_expr),\n \t\t\t\tmethod.get_outer_attrs (), method.get_locus ());\n+    translated = trait_item;\n+    mappings->insert_hir_trait_item (mapping.get_crate_num (),\n+\t\t\t\t     mapping.get_hirid (), translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       trait_item->get_locus ());\n   }\n \n   void visit (AST::TraitItemConst &constant) override\n@@ -447,11 +457,17 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    translated = new HIR::TraitItemConst (mapping, constant.get_identifier (),\n-\t\t\t\t\t  std::unique_ptr<HIR::Type> (type),\n-\t\t\t\t\t  std::unique_ptr<HIR::Expr> (expr),\n-\t\t\t\t\t  constant.get_outer_attrs (),\n-\t\t\t\t\t  constant.get_locus ());\n+    HIR::TraitItemConst *trait_item\n+      = new HIR::TraitItemConst (mapping, constant.get_identifier (),\n+\t\t\t\t std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t std::unique_ptr<HIR::Expr> (expr),\n+\t\t\t\t constant.get_outer_attrs (),\n+\t\t\t\t constant.get_locus ());\n+    translated = trait_item;\n+    mappings->insert_hir_trait_item (mapping.get_crate_num (),\n+\t\t\t\t     mapping.get_hirid (), translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       trait_item->get_locus ());\n   }\n \n   void visit (AST::TraitItemType &type) override\n@@ -463,10 +479,15 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    translated\n+    HIR::TraitItemType *trait_item\n       = new HIR::TraitItemType (mapping, type.get_identifier (),\n \t\t\t\tstd::move (type_param_bounds),\n \t\t\t\ttype.get_outer_attrs (), type.get_locus ());\n+    translated = trait_item;\n+    mappings->insert_hir_trait_item (mapping.get_crate_num (),\n+\t\t\t\t     mapping.get_hirid (), translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       trait_item->get_locus ());\n   }\n \n private:"}, {"sha": "9af77a9600ba0a5c0f7d017a49fcdec331c5985d", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a2ec7e9340c64c5869a97c7737459fbb1645d2/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a2ec7e9340c64c5869a97c7737459fbb1645d2/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=06a2ec7e9340c64c5869a97c7737459fbb1645d2", "patch": "@@ -259,6 +259,30 @@ Mappings::lookup_hir_item (CrateNum crateNum, HirId id)\n   return iy->second;\n }\n \n+void\n+Mappings::insert_hir_trait_item (CrateNum crateNum, HirId id,\n+\t\t\t\t HIR::TraitItem *item)\n+{\n+  rust_assert (lookup_hir_item (crateNum, id) == nullptr);\n+\n+  hirTraitItemMappings[crateNum][id] = item;\n+  nodeIdToHirMappings[crateNum][item->get_mappings ().get_nodeid ()] = id;\n+}\n+\n+HIR::TraitItem *\n+Mappings::lookup_hir_trait_item (CrateNum crateNum, HirId id)\n+{\n+  auto it = hirTraitItemMappings.find (crateNum);\n+  if (it == hirTraitItemMappings.end ())\n+    return nullptr;\n+\n+  auto iy = it->second.find (id);\n+  if (iy == it->second.end ())\n+    return nullptr;\n+\n+  return iy->second;\n+}\n+\n void\n Mappings::insert_hir_impl_block (CrateNum crateNum, HirId id,\n \t\t\t\t HIR::ImplBlock *item)\n@@ -567,5 +591,21 @@ Mappings::iterate_impl_items (\n     }\n }\n \n+void\n+Mappings::iterate_impl_blocks (std::function<bool (HirId, HIR::ImplBlock *)> cb)\n+{\n+  for (auto it = hirImplBlockMappings.begin ();\n+       it != hirImplBlockMappings.end (); it++)\n+    {\n+      for (auto iy = it->second.begin (); iy != it->second.end (); iy++)\n+\t{\n+\t  HirId id = iy->first;\n+\t  HIR::ImplBlock *impl_block = iy->second;\n+\t  if (!cb (id, impl_block))\n+\t    return;\n+\t}\n+    }\n+}\n+\n } // namespace Analysis\n } // namespace Rust"}, {"sha": "3789b57ab695d5b803bf7c7262ad64f7a4119851", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a2ec7e9340c64c5869a97c7737459fbb1645d2/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a2ec7e9340c64c5869a97c7737459fbb1645d2/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=06a2ec7e9340c64c5869a97c7737459fbb1645d2", "patch": "@@ -128,6 +128,10 @@ class Mappings\n   void insert_hir_item (CrateNum crateNum, HirId id, HIR::Item *item);\n   HIR::Item *lookup_hir_item (CrateNum crateNum, HirId id);\n \n+  void insert_hir_trait_item (CrateNum crateNum, HirId id,\n+\t\t\t      HIR::TraitItem *item);\n+  HIR::TraitItem *lookup_hir_trait_item (CrateNum crateNum, HirId id);\n+\n   void insert_hir_impl_block (CrateNum crateNum, HirId id,\n \t\t\t      HIR::ImplBlock *item);\n   HIR::ImplBlock *lookup_hir_impl_block (CrateNum crateNum, HirId id);\n@@ -198,6 +202,8 @@ class Mappings\n   void iterate_impl_items (\n     std::function<bool (HirId, HIR::ImplItem *, HIR::ImplBlock *)> cb);\n \n+  void iterate_impl_blocks (std::function<bool (HirId, HIR::ImplBlock *)> cb);\n+\n   bool is_impl_item (HirId id)\n   {\n     HirId parent_impl_block_id = UNKNOWN_HIRID;\n@@ -232,6 +238,7 @@ class Mappings\n   std::map<CrateNum, std::map<HirId, HIR::SelfParam *> > hirSelfParamMappings;\n   std::map<HirId, HIR::ImplBlock *> hirImplItemsToImplMappings;\n   std::map<CrateNum, std::map<HirId, HIR::ImplBlock *> > hirImplBlockMappings;\n+  std::map<CrateNum, std::map<HirId, HIR::TraitItem *> > hirTraitItemMappings;\n \n   // location info\n   std::map<CrateNum, std::map<NodeId, Location> > locations;"}]}