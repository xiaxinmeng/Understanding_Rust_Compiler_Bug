{"sha": "16948c54b7576fb4b27c59915eac71a0c6bf94f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY5NDhjNTRiNzU3NmZiNGIyN2M1OTkxNWVhYzcxYTBjNmJmOTRmNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-26T14:00:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-26T14:00:12Z"}, "message": "libstdc++: Add some C++20 additions to <chrono>\n\n\t* include/std/chrono (chrono::days, chrono::weeks, chrono::years)\n\t(chrono::months, chrono::sys_days, chrono::local_t)\n\t(chrono::local_time, chrono::local_seconds, chrono::local_days):\n\tDefine for C++20.\n\t(chrono::time_point): Add missing static assert.\n\t* testsuite/20_util/time_point/requirements/duration_neg.cc: New test.\n\t* testsuite/std/time/clock/file/overview.cc: New test.\n\t* testsuite/std/time/clock/file/members.cc: New test.\n\t* testsuite/std/time/syn_c++20.cc: New test.", "tree": {"sha": "2f18be4c5769dc5471c942a31930a7483f863af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f18be4c5769dc5471c942a31930a7483f863af5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16948c54b7576fb4b27c59915eac71a0c6bf94f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16948c54b7576fb4b27c59915eac71a0c6bf94f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16948c54b7576fb4b27c59915eac71a0c6bf94f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16948c54b7576fb4b27c59915eac71a0c6bf94f6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e519d644999d04e0a341cb034f4d954963b1d2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e519d644999d04e0a341cb034f4d954963b1d2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e519d644999d04e0a341cb034f4d954963b1d2d2"}], "stats": {"total": 406, "additions": 386, "deletions": 20}, "files": [{"sha": "2445acb50daae0c38a8e57db6b1a140f2e03666e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=16948c54b7576fb4b27c59915eac71a0c6bf94f6", "patch": "@@ -1,3 +1,15 @@\n+2020-03-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/chrono (chrono::days, chrono::weeks, chrono::years)\n+\t(chrono::months, chrono::sys_days, chrono::local_t)\n+\t(chrono::local_time, chrono::local_seconds, chrono::local_days):\n+\tDefine for C++20.\n+\t(chrono::time_point): Add missing static assert.\n+\t* testsuite/20_util/time_point/requirements/duration_neg.cc: New test.\n+\t* testsuite/std/time/clock/file/overview.cc: New test.\n+\t* testsuite/std/time/clock/file/members.cc: New test.\n+\t* testsuite/std/time/syn_c++20.cc: New test.\n+\n 2020-03-25  Mike Crowe  <mac@mcrowe.com>\n \n \t* testsuite/30_threads/shared_timed_mutex/try_lock_until/1.cc: New"}, {"sha": "514926c5c05b227e6509e63a63902d8704dae420", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=16948c54b7576fb4b27c59915eac71a0c6bf94f6", "patch": "@@ -709,32 +709,49 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n     /// nanoseconds\n-    typedef duration<_GLIBCXX_CHRONO_INT64_T, nano> \t    nanoseconds;\n+    using nanoseconds\t= duration<_GLIBCXX_CHRONO_INT64_T, nano>;\n \n     /// microseconds\n-    typedef duration<_GLIBCXX_CHRONO_INT64_T, micro> \t    microseconds;\n+    using microseconds\t= duration<_GLIBCXX_CHRONO_INT64_T, micro>;\n \n     /// milliseconds\n-    typedef duration<_GLIBCXX_CHRONO_INT64_T, milli> \t    milliseconds;\n+    using milliseconds\t= duration<_GLIBCXX_CHRONO_INT64_T, milli>;\n \n     /// seconds\n-    typedef duration<_GLIBCXX_CHRONO_INT64_T> \t\t    seconds;\n+    using seconds\t= duration<_GLIBCXX_CHRONO_INT64_T>;\n \n     /// minutes\n-    typedef duration<_GLIBCXX_CHRONO_INT64_T, ratio< 60>>   minutes;\n+    using minutes\t= duration<_GLIBCXX_CHRONO_INT64_T, ratio< 60>>;\n \n     /// hours\n-    typedef duration<_GLIBCXX_CHRONO_INT64_T, ratio<3600>>  hours;\n+    using hours\t\t= duration<_GLIBCXX_CHRONO_INT64_T, ratio<3600>>;\n+\n+#if __cplusplus > 201703L\n+    /// days\n+    using days\t\t= duration<_GLIBCXX_CHRONO_INT64_T, ratio<86400>>;\n+\n+    /// weeks\n+    using weeks\t\t= duration<_GLIBCXX_CHRONO_INT64_T, ratio<604800>>;\n+\n+    /// years\n+    using years\t\t= duration<_GLIBCXX_CHRONO_INT64_T, ratio<31556952>>;\n+\n+    /// months\n+    using months\t= duration<_GLIBCXX_CHRONO_INT64_T, ratio<2629746>>;\n+#endif // C++20\n \n #undef _GLIBCXX_CHRONO_INT64_T\n \n     /// time_point\n     template<typename _Clock, typename _Dur>\n       struct time_point\n       {\n-\ttypedef _Clock\t\t\t  \t\t\tclock;\n-\ttypedef _Dur\t\t  \t\t\t\tduration;\n-\ttypedef typename duration::rep\t  \t\t\trep;\n+\tstatic_assert(__is_duration<_Dur>::value,\n+\t    \"duration must be a specialization of std::chrono::duration\");\n+\n+\ttypedef _Clock\t\t\t\t\t\tclock;\n+\ttypedef _Dur\t\t\t\t\t\tduration;\n+\ttypedef typename duration::rep\t\t\t\trep;\n \ttypedef typename duration::period\t\t\tperiod;\n \n \tconstexpr time_point() : __d(duration::zero())\n@@ -790,7 +807,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t   time_point<_Clock, _ToDur>>::type\n       time_point_cast(const time_point<_Clock, _Dur>& __t)\n       {\n-\ttypedef time_point<_Clock, _ToDur> \t\t\t__time_point;\n+\ttypedef time_point<_Clock, _ToDur>\t\t\t__time_point;\n \treturn __time_point(duration_cast<_ToDur>(__t.time_since_epoch()));\n       }\n \n@@ -837,7 +854,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n \ttypedef typename common_type<_Dur1,__dur2>::type\t__ct;\n-\ttypedef time_point<_Clock, __ct> \t\t\t__time_point;\n+\ttypedef time_point<_Clock, __ct>\t\t\t__time_point;\n \treturn __time_point(__lhs.time_since_epoch() + __rhs);\n       }\n \n@@ -851,7 +868,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n \ttypedef typename common_type<__dur1,_Dur2>::type\t__ct;\n-\ttypedef time_point<_Clock, __ct> \t\t\t__time_point;\n+\ttypedef time_point<_Clock, __ct>\t\t\t__time_point;\n \treturn __time_point(__rhs.time_since_epoch() + __lhs);\n       }\n \n@@ -865,7 +882,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n \ttypedef typename common_type<_Dur1,__dur2>::type\t__ct;\n-\ttypedef time_point<_Clock, __ct> \t\t\t__time_point;\n+\ttypedef time_point<_Clock, __ct>\t\t\t__time_point;\n \treturn __time_point(__lhs.time_since_epoch() -__rhs);\n       }\n \n@@ -946,9 +963,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     */\n     struct system_clock\n     {\n-      typedef chrono::nanoseconds     \t\t\t\tduration;\n-      typedef duration::rep    \t\t\t\t\trep;\n-      typedef duration::period \t\t\t\t\tperiod;\n+      typedef chrono::nanoseconds\t\t\t\tduration;\n+      typedef duration::rep\t\t\t\t\trep;\n+      typedef duration::period\t\t\t\t\tperiod;\n       typedef chrono::time_point<system_clock, duration> \ttime_point;\n \n       static_assert(system_clock::duration::min()\n@@ -986,10 +1003,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     */\n     struct steady_clock\n     {\n-      typedef chrono::nanoseconds \t\t\t\tduration;\n-      typedef duration::rep\t  \t\t\t\trep;\n-      typedef duration::period\t  \t\t\t\tperiod;\n-      typedef chrono::time_point<steady_clock, duration> \ttime_point;\n+      typedef chrono::nanoseconds\t\t\t\tduration;\n+      typedef duration::rep\t\t\t\t\trep;\n+      typedef duration::period\t\t\t\t\tperiod;\n+      typedef chrono::time_point<steady_clock, duration>\ttime_point;\n \n       static constexpr bool is_steady = true;\n \n@@ -1014,6 +1031,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Duration>\n       using sys_time = time_point<system_clock, _Duration>;\n     using sys_seconds = sys_time<seconds>;\n+    using sys_days = sys_time<days>;\n \n     using file_clock = ::std::filesystem::__file_clock;\n \n@@ -1027,6 +1045,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<> inline constexpr bool is_clock_v<system_clock> = true;\n     template<> inline constexpr bool is_clock_v<steady_clock> = true;\n     template<> inline constexpr bool is_clock_v<file_clock> = true;\n+\n+    struct local_t { };\n+    template<typename _Duration>\n+      using local_time = time_point<local_t, _Duration>;\n+    using local_seconds = local_time<seconds>;\n+    using local_days = local_time<days>;\n #endif // C++20\n \n     // @}"}, {"sha": "5e3bc7f1a55cdfefbb7156a45b5cfae04f704bd3", "filename": "libstdc++-v3/testsuite/20_util/time_point/requirements/duration_neg.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Frequirements%2Fduration_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Frequirements%2Fduration_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Frequirements%2Fduration_neg.cc?ref=16948c54b7576fb4b27c59915eac71a0c6bf94f6", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <chrono>\n+\n+namespace chrono = std::chrono;\n+\n+// A duration-like type\n+struct durayshun : chrono::seconds\n+{\n+  using duration::duration;\n+  durayshun(chrono::seconds);\n+};\n+\n+chrono::time_point<chrono::system_clock, durayshun> t; // { dg-error \"here\" }\n+// { dg-error \"specialization of std::chrono::duration\" \"\" { target *-*-* } 0 }"}, {"sha": "44ae717a6eefe1d0f67c752453fc65c7fb27eab4", "filename": "libstdc++-v3/testsuite/std/time/clock/file/members.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fclock%2Ffile%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fclock%2Ffile%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fclock%2Ffile%2Fmembers.cc?ref=16948c54b7576fb4b27c59915eac71a0c6bf94f6", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  auto sys_now = std::chrono::system_clock::now();\n+  auto file_now = std::chrono::file_clock::now();\n+  auto d1 = std::chrono::file_clock::to_sys(file_now) - sys_now;\n+  VERIFY( d1 < std::chrono::seconds(1) );\n+  auto d2 = file_now - std::chrono::file_clock::from_sys(sys_now);\n+  VERIFY( d2 == d1 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "3ca530dc2495436374e11ab9e4e2c56ebc1a6ea2", "filename": "libstdc++-v3/testsuite/std/time/clock/file/overview.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fclock%2Ffile%2Foverview.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fclock%2Ffile%2Foverview.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fclock%2Ffile%2Foverview.cc?ref=16948c54b7576fb4b27c59915eac71a0c6bf94f6", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <chrono>\n+\n+using std::chrono::file_clock;\n+\n+// Cpp17Clock requirements:\n+\n+// New type so that is_clock<file_clock> specialization isn't used.\n+struct C : file_clock { };\n+static_assert( std::chrono::is_clock_v<C> );\n+\n+// Cpp17TrivialClock requirements:\n+\n+// A trivial clock's rep must be a numeric type, which is true for\n+// libstdc++ because we use an integral type.\n+static_assert( std::is_integral_v<file_clock::rep> );\n+\n+// We meet the recursive Cpp17TrivialClock requirement by using the same clock:\n+static_assert( std::is_same_v<file_clock::time_point::clock, file_clock> );\n+\n+// chrono::file_clock requirements:\n+\n+static_assert( std::is_signed_v<file_clock::rep> );\n+static_assert( noexcept(file_clock::now()) );"}, {"sha": "5ea7a0f428059807534933124ab2a2a6c2309d20", "filename": "libstdc++-v3/testsuite/std/time/syn_c++20.cc", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fsyn_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fsyn_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fsyn_c%2B%2B20.cc?ref=16948c54b7576fb4b27c59915eac71a0c6bf94f6", "patch": "@@ -0,0 +1,199 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <chrono>\n+\n+#ifndef __cpp_lib_chrono\n+# error \"Feature test macro for chrono is missing in <chrono>\"\n+// FIXME\n+// #elif __cpp_lib_chrono < 201907L\n+// # error \"Feature test macro for chrono has wrong value in <chrono>\"\n+#endif\n+\n+namespace __gnu_test\n+{\n+  // Check for the new additions to <chrono> in C++20\n+\n+  using std::chrono::is_clock;\n+  using std::chrono::is_clock_v;\n+\n+  using std::chrono::days;\n+  using std::chrono::weeks;\n+  using std::chrono::years;\n+  using std::chrono::months;\n+\n+  using std::chrono::sys_time;\n+  using std::chrono::sys_seconds;\n+  using std::chrono::sys_days;\n+\n+  // FIXME\n+#if 0\n+  using std::chrono::utc_clock;\n+  using std::chrono::utc_time;\n+  using std::chrono::utc_seconds;\n+\n+  using std::chrono::leap_second_info;\n+  using std::chrono::get_leap_second_info;\n+\n+  using std::chrono::tai_clock;\n+  using std::chrono::tai_time;\n+  using std::chrono::tai_seconds;\n+\n+  using std::chrono::gps_clock;\n+  using std::chrono::gps_time;\n+  using std::chrono::gps_seconds;\n+#endif\n+\n+  using std::chrono::file_clock;\n+  using std::chrono::file_time;\n+\n+  using std::chrono::local_t;\n+  using std::chrono::local_time;\n+  using std::chrono::local_seconds;\n+  using std::chrono::local_days;\n+\n+  // FIXME\n+#if 0\n+  using std::chrono::clock_time_conversion;\n+  using std::chrono::clock_cast;\n+\n+  using std::chrono::last_spec;\n+\n+  using std::chrono::day;\n+  using std::chrono::month;\n+  using std::chrono::year;\n+  using std::chrono::weekday;\n+  using std::chrono::weekday_indexed;\n+  using std::chrono::weekday_last;\n+  using std::chrono::month_day;\n+  using std::chrono::month_day_last;\n+  using std::chrono::month_weekday;\n+  using std::chrono::month_weekday_last;\n+  using std::chrono::year_month;\n+  using std::chrono::year_month_day;\n+  using std::chrono::year_month_day_last;\n+  using std::chrono::year_month_weekday;\n+  using std::chrono::year_month_weekday_last;\n+  using std::chrono::year_month;\n+  using std::chrono::year_month_day;\n+\n+  using std::chrono::hh_mm_ss;\n+  using std::chrono::is_am;\n+  using std::chrono::is_pm;\n+  using std::chrono::make12;\n+  using std::chrono::make24;\n+\n+  using std::chrono::tzdb;\n+  using std::chrono::tzdb_list;\n+  using std::chrono::get_tzdb;\n+  using std::chrono::get_tzdb_list;\n+  using std::chrono::locate_zone;\n+  using std::chrono::current_zone;\n+\n+  using std::chrono::reload_tzdb;\n+  using std::chrono::remote_version;\n+\n+  using std::chrono::nonexistent_local_time;\n+  using std::chrono::ambiguous_local_time;\n+\n+  using std::chrono::sys_info;\n+  using std::chrono::local_info;\n+\n+  using std::chrono::choose;\n+  using std::chrono::time_zone;\n+\n+  using std::chrono::zoned_traits;\n+  using std::chrono::zoned_time;\n+  using std::chrono::zoned_seconds;\n+\n+  using std::chrono::leap_second;\n+\n+  using std::chrono::time_zone_link;\n+\n+  using std::chrono::local_time_format;\n+\n+  using std::chrono::parse;\n+\n+  using std::chrono::last;\n+  using std::chrono::Sunday;\n+  using std::chrono::Monday;\n+  using std::chrono::Tuesday;\n+  using std::chrono::Wednesday;\n+  using std::chrono::Thursday;\n+  using std::chrono::Friday;\n+  using std::chrono::Saturday;\n+\n+  using std::chrono::January;\n+  using std::chrono::February;\n+  using std::chrono::March;\n+  using std::chrono::April;\n+  using std::chrono::May;\n+  using std::chrono::June;\n+  using std::chrono::July;\n+  using std::chrono::August;\n+  using std::chrono::September;\n+  using std::chrono::October;\n+  using std::chrono::November;\n+  using std::chrono::December;\n+\n+  using std::chrono_literals::operator\"\"d;\n+  using std::chrono_literals::operator\"\"y;\n+#endif\n+\n+  template<typename>\n+    constexpr bool is_duration = false;\n+  template<typename R, typename P>\n+    constexpr bool is_duration<std::chrono::duration<R, P>> = true;\n+\n+  static_assert( is_duration<days> );\n+  static_assert( is_duration<weeks> );\n+  static_assert( is_duration<years> );\n+  static_assert( is_duration<months> );\n+\n+  template<typename D, typename P>\n+    constexpr bool has_period = std::is_same_v<typename D::period, P>;\n+\n+  using std::ratio;\n+  using std::ratio_multiply;\n+  using std::ratio_divide;\n+  using std::chrono::hours;\n+  static_assert( has_period<days, ratio_multiply<ratio<24>, hours::period>> );\n+  static_assert( has_period<weeks, ratio_multiply<ratio<7>, days::period>> );\n+  static_assert( has_period<years,\n+\t\t\t    ratio_multiply<ratio<146097, 400>, days::period>> );\n+  static_assert( has_period<months, ratio_divide<years::period, ratio<12>>> );\n+\n+  template<typename>\n+    constexpr bool is_time_point = false;\n+  template<typename C, typename D>\n+    constexpr bool is_time_point<std::chrono::time_point<C, D>> = true;\n+\n+  static_assert( is_time_point<sys_time<std::chrono::milliseconds>> );\n+  static_assert( is_time_point<sys_seconds> );\n+  static_assert( is_time_point<sys_days> );\n+\n+  static_assert( std::is_class_v<local_t> );\n+  static_assert( is_time_point<local_time<std::chrono::milliseconds>> );\n+  static_assert( is_time_point<local_seconds> );\n+  static_assert( is_time_point<local_days> );\n+\n+  static_assert( std::is_class_v<file_clock> );\n+  static_assert( is_time_point<file_time<std::chrono::milliseconds>> );\n+}"}, {"sha": "f5d449cd42aa67037773260e1191467f0caf9058", "filename": "libstdc++-v3/testsuite/std/time/traits/is_clock.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftraits%2Fis_clock.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16948c54b7576fb4b27c59915eac71a0c6bf94f6/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftraits%2Fis_clock.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftraits%2Fis_clock.cc?ref=16948c54b7576fb4b27c59915eac71a0c6bf94f6", "patch": "@@ -35,9 +35,26 @@ static_assert( chrono::is_clock_v<chrono::steady_clock> );\n static_assert(chrono::is_clock<chrono::file_clock>::value);\n static_assert(chrono::is_clock_v<chrono::file_clock>);\n \n+// Clock<xxx_clock> will not use the specialization of is_clock<xxx_clock>\n+template<typename C> struct Clock : C { };\n+\n+static_assert( chrono::is_clock<Clock<chrono::system_clock>>::value );\n+static_assert( chrono::is_clock_v<Clock<chrono::system_clock>> );\n+\n+static_assert( chrono::is_clock<Clock<chrono::high_resolution_clock>>::value );\n+static_assert( chrono::is_clock_v<Clock<chrono::high_resolution_clock>> );\n+\n+static_assert( chrono::is_clock<Clock<chrono::steady_clock>>::value );\n+static_assert( chrono::is_clock_v<Clock<chrono::steady_clock>> );\n+\n+static_assert(chrono::is_clock<Clock<chrono::file_clock>>::value);\n+static_assert(chrono::is_clock_v<Clock<chrono::file_clock>>);\n+\n static_assert( chrono::is_clock<__gnu_test::slow_clock>::value );\n static_assert( chrono::is_clock_v<__gnu_test::slow_clock> );\n \n+// Negative tests\n+\n static_assert( ! chrono::is_clock<int>::value );\n static_assert( ! chrono::is_clock_v<int> );\n "}]}