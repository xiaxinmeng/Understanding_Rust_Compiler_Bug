{"sha": "c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1NmI4NmI4ZGQzYmU4YTAzNTlhZWNjZjgyODVkYzdiNGIwNjVjOQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2012-11-28T17:42:39Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2012-11-28T17:42:39Z"}, "message": "re PR rtl-optimization/55512 (Various LRA ICEs with inline-asm)\n\n2012-11-28  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/55512\n\t* lra-assigns.c (assign_by_spills): Assigned arbitrary hard regs\n\tto failed reload pseudos instead of changing asm pattern.\n\t* lra-constraints.c (MAX_CONSTRAINT_ITERATION_NUMBER): Increase\n\tvalue.\n\n2012-11-28  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/55512\n\t* gcc.target/i386/pr55512-[1234].c: New tests.\n\nFrom-SVN: r193901", "tree": {"sha": "2f88c081c22debed675f29e747823d688a835fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f88c081c22debed675f29e747823d688a835fff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77e21230ea18da36f75f83b1428d659ecbbbbd9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77e21230ea18da36f75f83b1428d659ecbbbbd9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77e21230ea18da36f75f83b1428d659ecbbbbd9c"}], "stats": {"total": 95, "additions": 88, "deletions": 7}, "files": [{"sha": "5dfe94af58940a4d951db1cc76c1d6de0220c0fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "patch": "@@ -1,3 +1,11 @@\n+2012-11-28  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/55512\n+\t* lra-assigns.c (assign_by_spills): Assigned arbitrary hard regs\n+\tto failed reload pseudos instead of changing asm pattern.\n+\t* lra-constraints.c (MAX_CONSTRAINT_ITERATION_NUMBER): Increase\n+\tvalue.\n+\n 2012-11-28  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n \tPR other/55358\n@@ -121,7 +129,7 @@\n \n \tPR rtl-optimization/55458\n \t* lra-assigns.c: Include rtl-error.h.\n-\t(assign_by_spills): Report about asm inpossible constraints.\n+\t(assign_by_spills): Report about asm impossible constraints.\n \t* Makefile.in (lra-assigns.c): Add $(RTL_ERROR_H).\n \n 2012-11-27  Paolo Bonzini  <pbonzini@redhat.com>"}, {"sha": "b1d18102dc279a4ef21be71c0661cbecec7b55e6", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "patch": "@@ -1220,8 +1220,17 @@ assign_by_spills (void)\n \n \t  bitmap_initialize (&failed_reload_insns, &reg_obstack);\n \t  for (i = 0; i < nfails; i++)\n-\t    bitmap_ior_into (&failed_reload_insns,\n-\t\t\t     &lra_reg_info[sorted_pseudos[i]].insn_bitmap);\n+\t    {\n+\t      regno = sorted_pseudos[i];\n+\t      bitmap_ior_into (&failed_reload_insns,\n+\t\t\t       &lra_reg_info[regno].insn_bitmap);\n+\t      /* Assign an arbitrary hard register of regno class to\n+\t\t avoid further trouble with the asm insns.  */\n+\t      bitmap_clear_bit (&all_spilled_pseudos, regno);\n+\t      assign_hard_regno\n+\t\t(ira_class_hard_regs[regno_allocno_class_array[regno]][0],\n+\t\t regno);\n+\t    }\n \t  EXECUTE_IF_SET_IN_BITMAP (&failed_reload_insns, 0, u, bi)\n \t    {\n \t      insn = lra_insn_recog_data[u]->insn;\n@@ -1230,9 +1239,6 @@ assign_by_spills (void)\n \t\t  asm_p = true;\n \t\t  error_for_asm (insn,\n \t\t\t\t \"%<asm%> operand has impossible constraints\");\n-\t\t  /* Avoid further trouble with this insn.\t*/\n-\t\t  PATTERN (insn) = gen_rtx_USE (VOIDmode, const0_rtx);\n-\t\t  lra_invalidate_insn_data (insn);\n \t\t}\n \t    }\n \t  lra_assert (asm_p);"}, {"sha": "128401f1b92aa19d6a6d7a85bdd4c1f75712f60c", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "patch": "@@ -3184,7 +3184,7 @@ loc_equivalence_change_p (rtx *loc)\n \n /* Maximum allowed number of constraint pass iterations after the last\n    spill pass.\tIt is for preventing LRA cycling in a bug case.\t */\n-#define MAX_CONSTRAINT_ITERATION_NUMBER 15\n+#define MAX_CONSTRAINT_ITERATION_NUMBER 30\n \n /* Maximum number of generated reload insns per an insn.  It is for\n    preventing this pass cycling in a bug case.\t*/"}, {"sha": "d9bde0a1c64176d602d7a567d400a4840c3d2645", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "patch": "@@ -1,3 +1,8 @@\n+2012-11-28  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/55512\n+\t* gcc.target/i386/pr55512-[1234].c: New tests.\n+\n 2012-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/55505"}, {"sha": "de88f60f0de23c62d27cb23dd021509a77423b39", "filename": "gcc/testsuite/gcc.target/i386/pr55512-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-1.c?ref=c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (int x)\n+{\n+  asm goto (\"\" : : \"r\" (x), \"r\" (x + 1), \"r\" (x + 2), \"r\" (x + 3), /* { dg-error \"operand has impossible constraints\" } */\n+\t    \"r\" (x + 4), \"r\" (x + 5), \"r\" (x + 6), \"r\" (x + 7),\n+\t    \"r\" (x + 8), \"r\" (x + 9), \"r\" (x + 10), \"r\" (x + 11),\n+\t    \"r\" (x + 12), \"r\" (x + 13), \"r\" (x + 14), \"r\" (x + 15) : : lab);\n+  __builtin_unreachable ();\n+ lab:\n+  return 0;\n+}"}, {"sha": "eec2a880767e9ab692ae6d414e0adad1d100a815", "filename": "gcc/testsuite/gcc.target/i386/pr55512-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-2.c?ref=c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define __builtin_unreachable() do { } while (0)\n+\n+int\n+foo (int x)\n+{\n+  asm goto (\"\" : : \"r\" (x), \"r\" (x + 1), \"r\" (x + 2), \"r\" (x + 3), /* { dg-error \"operand has impossible constraints\" } */\n+\t    \"r\" (x + 4), \"r\" (x + 5), \"r\" (x + 6), \"r\" (x + 7),\n+\t    \"r\" (x + 8), \"r\" (x + 9), \"r\" (x + 10), \"r\" (x + 11),\n+\t    \"r\" (x + 12), \"r\" (x + 13), \"r\" (x + 14), \"r\" (x + 15) : : lab);\n+  __builtin_unreachable ();\n+ lab:\n+  return 0;\n+}"}, {"sha": "2a351c3bebce3faa59a2041c25b467e9e55240df", "filename": "gcc/testsuite/gcc.target/i386/pr55512-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-3.c?ref=c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+bar (int x)\n+{\n+  asm goto (\"\" : : \"r\" (x), \"r\" (x + 1), \"r\" (x + 2), \"r\" (x + 3), /* { dg-error \"operand has impossible constraints\" } */\n+\t    \"r\" (x + 4), \"r\" (x + 5), \"r\" (x + 6), \"r\" (x + 7),\n+\t    \"r\" (x + 8), \"r\" (x + 9), \"r\" (x + 10), \"r\" (x + 11),\n+\t    \"r\" (x + 12), \"r\" (x + 13), \"r\" (x + 14), \"r\" (x + 15),\n+\t    \"r\" (x + 16) : : lab);\n+  __builtin_unreachable ();\n+ lab:\n+  return 0;\n+}"}, {"sha": "3fcd11c9c379fe0e528a4864a31afa53c398f805", "filename": "gcc/testsuite/gcc.target/i386/pr55512-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c656b86b8dd3be8a0359aeccf8285dc7b4b065c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55512-4.c?ref=c656b86b8dd3be8a0359aeccf8285dc7b4b065c9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define __builtin_unreachable() do { } while (0)\n+\n+int\n+bar (int x)\n+{\n+  asm goto (\"\" : : \"r\" (x), \"r\" (x + 1), \"r\" (x + 2), \"r\" (x + 3), /* { dg-error \"operand has impossible constraints\" } */\n+\t    \"r\" (x + 4), \"r\" (x + 5), \"r\" (x + 6), \"r\" (x + 7),\n+\t    \"r\" (x + 8), \"r\" (x + 9), \"r\" (x + 10), \"r\" (x + 11),\n+\t    \"r\" (x + 12), \"r\" (x + 13), \"r\" (x + 14), \"r\" (x + 15),\n+\t    \"r\" (x + 16) : : lab);\n+  __builtin_unreachable ();\n+ lab:\n+  return 0;\n+}"}]}