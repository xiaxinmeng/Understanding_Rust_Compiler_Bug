{"sha": "5068f5468592fea84a6a9e758bee4f40c4ee58b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA2OGY1NDY4NTkyZmVhODRhNmE5ZTc1OGJlZTRmNDBjNGVlNThiOQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-07-16T00:19:18Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-07-16T00:19:18Z"}, "message": "Makefile.am (bits_headers): Remove slice.h\n\n\t* include/Makefile.am (bits_headers): Remove slice.h\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/slice.h (slice): move to include/bits/slice_array.h\n\t* include/bits/slice.h Remove.\n\t* include/std/std_valarray.h: Don't #include bits/slice.h anymore.\n\t* include/bits/slice_array.h: Comply to official coding styles.\n\t* testsuite/26_numerics/slice.cc: New test.\n:w\n:q\n\nFrom-SVN: r55470", "tree": {"sha": "be75a5950eec8289688e65e8fa08f32e2ba031cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be75a5950eec8289688e65e8fa08f32e2ba031cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5068f5468592fea84a6a9e758bee4f40c4ee58b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5068f5468592fea84a6a9e758bee4f40c4ee58b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5068f5468592fea84a6a9e758bee4f40c4ee58b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5068f5468592fea84a6a9e758bee4f40c4ee58b9/comments", "author": null, "committer": null, "parents": [{"sha": "6d80a8545be028be5d341b98f4619ab09178c2ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d80a8545be028be5d341b98f4619ab09178c2ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d80a8545be028be5d341b98f4619ab09178c2ea"}], "stats": {"total": 640, "additions": 206, "deletions": 434}, "files": [{"sha": "7f6f583290a48a2ac7e4bafbf66b9ea1738ceadd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5068f5468592fea84a6a9e758bee4f40c4ee58b9", "patch": "@@ -1,3 +1,13 @@\n+2002-07-16  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* include/Makefile.am (bits_headers): Remove slice.h\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/slice.h (slice): move to include/bits/slice_array.h\n+\t* include/bits/slice.h Remove.\n+\t* include/std/std_valarray.h: Don't #include bits/slice.h anymore.\n+\t* include/bits/slice_array.h: Comply to official coding styles.\n+\t* testsuite/26_numerics/slice.cc: New test.\n+\n 2002-07-15  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config/os/solaris/solaris2.5/ctype_base.h (ctype_base): Fix"}, {"sha": "db81fc7893993fa6e3b7abdfbee18ded627367a8", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=5068f5468592fea84a6a9e758bee4f40c4ee58b9", "patch": "@@ -62,7 +62,6 @@ bits_headers = \\\n \t${bits_srcdir}/pthread_allocimpl.h \\\n \t${bits_srcdir}/stream_iterator.h \\\n \t${bits_srcdir}/streambuf_iterator.h \\\n-\t${bits_srcdir}/slice.h \\\n \t${bits_srcdir}/slice_array.h \\\n \t${bits_srcdir}/sstream.tcc \\\n \t${bits_srcdir}/stl_algo.h \\"}, {"sha": "b91493deff140a9d3a8fd9600c5d865cbc748f60", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 17, "deletions": 266, "changes": 283, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=5068f5468592fea84a6a9e758bee4f40c4ee58b9", "patch": "@@ -139,308 +139,59 @@ glibcpp_builddir = @glibcpp_builddir@\n \n bits_srcdir = ${glibcpp_srcdir}/include/bits\n bits_builddir = ./bits\n-bits_headers = \\\n-\t${bits_srcdir}/basic_ios.h \\\n-\t${bits_srcdir}/basic_ios.tcc \\\n-\t${bits_srcdir}/basic_string.h \\\n-\t${bits_srcdir}/basic_string.tcc \\\n-\t${bits_srcdir}/boost_concept_check.h \\\n-\t${bits_srcdir}/char_traits.h \\\n-\t${bits_srcdir}/codecvt.h \\\n-\t${bits_srcdir}/concept_check.h \\\n-\t${bits_srcdir}/cpp_type_traits.h \\\n-\t${bits_srcdir}/deque.tcc \\\n-\t${bits_srcdir}/fpos.h \\\n-\t${bits_srcdir}/fstream.tcc \\\n-\t${bits_srcdir}/functexcept.h \\\n-\t${bits_srcdir}/generic_shadow.h \\\n-\t${bits_srcdir}/gslice.h \\\n-\t${bits_srcdir}/gslice_array.h \\\n-\t${bits_srcdir}/indirect_array.h \\\n-\t${bits_srcdir}/ios_base.h \\\n-\t${bits_srcdir}/istream.tcc \\\n-\t${bits_srcdir}/list.tcc \\\n-\t${bits_srcdir}/locale_facets.h \\\n-\t${bits_srcdir}/locale_facets.tcc \\\n-\t${bits_srcdir}/localefwd.h \\\n-\t${bits_srcdir}/mask_array.h \\\n-\t${bits_srcdir}/ostream.tcc \\\n-\t${bits_srcdir}/pthread_allocimpl.h \\\n-\t${bits_srcdir}/stream_iterator.h \\\n-\t${bits_srcdir}/streambuf_iterator.h \\\n-\t${bits_srcdir}/slice.h \\\n-\t${bits_srcdir}/slice_array.h \\\n-\t${bits_srcdir}/sstream.tcc \\\n-\t${bits_srcdir}/stl_algo.h \\\n-\t${bits_srcdir}/stl_algobase.h \\\n-\t${bits_srcdir}/stl_alloc.h \\\n-\t${bits_srcdir}/stl_bvector.h \\\n-\t${bits_srcdir}/stl_construct.h \\\n-\t${bits_srcdir}/stl_deque.h \\\n-\t${bits_srcdir}/stl_function.h \\\n-\t${bits_srcdir}/stl_heap.h \\\n-\t${bits_srcdir}/stl_iterator.h \\\n-\t${bits_srcdir}/stl_iterator_base_funcs.h \\\n-\t${bits_srcdir}/stl_iterator_base_types.h \\\n-\t${bits_srcdir}/stl_list.h \\\n-\t${bits_srcdir}/stl_map.h \\\n-\t${bits_srcdir}/stl_multimap.h \\\n-\t${bits_srcdir}/stl_multiset.h \\\n-\t${bits_srcdir}/stl_numeric.h \\\n-\t${bits_srcdir}/stl_pair.h \\\n-\t${bits_srcdir}/stl_pthread_alloc.h \\\n-\t${bits_srcdir}/stl_queue.h \\\n-\t${bits_srcdir}/stl_raw_storage_iter.h \\\n-\t${bits_srcdir}/stl_relops.h \\\n-\t${bits_srcdir}/stl_set.h \\\n-\t${bits_srcdir}/stl_stack.h \\\n-\t${bits_srcdir}/stl_tempbuf.h \\\n-\t${bits_srcdir}/stl_threads.h \\\n-\t${bits_srcdir}/stl_tree.h \\\n-\t${bits_srcdir}/stl_uninitialized.h \\\n-\t${bits_srcdir}/stl_vector.h \\\n-\t${bits_srcdir}/streambuf.tcc \\\n-\t${bits_srcdir}/stringfwd.h \\\n-\t${bits_srcdir}/type_traits.h \\\n-\t${bits_srcdir}/valarray_array.h \\\n-\t${bits_srcdir}/valarray_array.tcc \\\n-\t${bits_srcdir}/valarray_meta.h \\\n-\t${bits_srcdir}/vector.tcc\n+bits_headers =  \t${bits_srcdir}/basic_ios.h \t${bits_srcdir}/basic_ios.tcc \t${bits_srcdir}/basic_string.h \t${bits_srcdir}/basic_string.tcc \t${bits_srcdir}/boost_concept_check.h \t${bits_srcdir}/char_traits.h \t${bits_srcdir}/codecvt.h \t${bits_srcdir}/concept_check.h \t${bits_srcdir}/cpp_type_traits.h \t${bits_srcdir}/deque.tcc \t${bits_srcdir}/fpos.h \t${bits_srcdir}/fstream.tcc \t${bits_srcdir}/functexcept.h \t${bits_srcdir}/generic_shadow.h \t${bits_srcdir}/gslice.h \t${bits_srcdir}/gslice_array.h \t${bits_srcdir}/indirect_array.h \t${bits_srcdir}/ios_base.h \t${bits_srcdir}/istream.tcc \t${bits_srcdir}/list.tcc \t${bits_srcdir}/locale_facets.h \t${bits_srcdir}/locale_facets.tcc \t${bits_srcdir}/localefwd.h \t${bits_srcdir}/mask_array.h \t${bits_srcdir}/ostream.tcc \t${bits_srcdir}/pthread_allocimpl.h \t${bits_srcdir}/stream_iterator.h \t${bits_srcdir}/streambuf_iterator.h \t${bits_srcdir}/slice_array.h \t${bits_srcdir}/sstream.tcc \t${bits_srcdir}/stl_algo.h \t${bits_srcdir}/stl_algobase.h \t${bits_srcdir}/stl_alloc.h \t${bits_srcdir}/stl_bvector.h \t${bits_srcdir}/stl_construct.h \t${bits_srcdir}/stl_deque.h \t${bits_srcdir}/stl_function.h \t${bits_srcdir}/stl_heap.h \t${bits_srcdir}/stl_iterator.h \t${bits_srcdir}/stl_iterator_base_funcs.h \t${bits_srcdir}/stl_iterator_base_types.h \t${bits_srcdir}/stl_list.h \t${bits_srcdir}/stl_map.h \t${bits_srcdir}/stl_multimap.h \t${bits_srcdir}/stl_multiset.h \t${bits_srcdir}/stl_numeric.h \t${bits_srcdir}/stl_pair.h \t${bits_srcdir}/stl_pthread_alloc.h \t${bits_srcdir}/stl_queue.h \t${bits_srcdir}/stl_raw_storage_iter.h \t${bits_srcdir}/stl_relops.h \t${bits_srcdir}/stl_set.h \t${bits_srcdir}/stl_stack.h \t${bits_srcdir}/stl_tempbuf.h \t${bits_srcdir}/stl_threads.h \t${bits_srcdir}/stl_tree.h \t${bits_srcdir}/stl_uninitialized.h \t${bits_srcdir}/stl_vector.h \t${bits_srcdir}/streambuf.tcc \t${bits_srcdir}/stringfwd.h \t${bits_srcdir}/type_traits.h \t${bits_srcdir}/valarray_array.h \t${bits_srcdir}/valarray_array.tcc \t${bits_srcdir}/valarray_meta.h \t${bits_srcdir}/vector.tcc\n \n \n backward_srcdir = ${glibcpp_srcdir}/include/backward\n backward_builddir = ./backward\n-backward_headers = \\\n-\t${backward_srcdir}/complex.h \\\n-\t${backward_srcdir}/iomanip.h \\\n-\t${backward_srcdir}/istream.h \\\n-\t${backward_srcdir}/ostream.h \\\n-\t${backward_srcdir}/stream.h \\\n-\t${backward_srcdir}/streambuf.h \\\n-\t${backward_srcdir}/algo.h \\\n-\t${backward_srcdir}/algobase.h \\\n-\t${backward_srcdir}/alloc.h \\\n-\t${backward_srcdir}/bvector.h \\\n-\t${backward_srcdir}/defalloc.h \\\n-\t${backward_srcdir}/deque.h \\\n-\t${backward_srcdir}/function.h \\\n-\t${backward_srcdir}/hash_map.h \\\n-\t${backward_srcdir}/hash_set.h \\\n-\t${backward_srcdir}/hashtable.h \\\n-\t${backward_srcdir}/heap.h \\\n-\t${backward_srcdir}/iostream.h \\\n-\t${backward_srcdir}/iterator.h \\\n-\t${backward_srcdir}/list.h \\\n-\t${backward_srcdir}/map.h \\\n-\t${backward_srcdir}/multimap.h \\\n-\t${backward_srcdir}/new.h \\\n-\t${backward_srcdir}/multiset.h \\\n-\t${backward_srcdir}/pair.h \\\n-\t${backward_srcdir}/queue.h \\\n-\t${backward_srcdir}/rope.h \\\n-\t${backward_srcdir}/set.h \\\n-\t${backward_srcdir}/slist.h \\\n-\t${backward_srcdir}/stack.h \\\n-\t${backward_srcdir}/tempbuf.h \\\n-\t${backward_srcdir}/tree.h \\\n-\t${backward_srcdir}/vector.h \\\n-\t${backward_srcdir}/fstream.h \\\n-\t${backward_srcdir}/strstream.h \\\n-\t${backward_srcdir}/backward_warning.h\n+backward_headers =  \t${backward_srcdir}/complex.h \t${backward_srcdir}/iomanip.h \t${backward_srcdir}/istream.h \t${backward_srcdir}/ostream.h \t${backward_srcdir}/stream.h \t${backward_srcdir}/streambuf.h \t${backward_srcdir}/algo.h \t${backward_srcdir}/algobase.h \t${backward_srcdir}/alloc.h \t${backward_srcdir}/bvector.h \t${backward_srcdir}/defalloc.h \t${backward_srcdir}/deque.h \t${backward_srcdir}/function.h \t${backward_srcdir}/hash_map.h \t${backward_srcdir}/hash_set.h \t${backward_srcdir}/hashtable.h \t${backward_srcdir}/heap.h \t${backward_srcdir}/iostream.h \t${backward_srcdir}/iterator.h \t${backward_srcdir}/list.h \t${backward_srcdir}/map.h \t${backward_srcdir}/multimap.h \t${backward_srcdir}/new.h \t${backward_srcdir}/multiset.h \t${backward_srcdir}/pair.h \t${backward_srcdir}/queue.h \t${backward_srcdir}/rope.h \t${backward_srcdir}/set.h \t${backward_srcdir}/slist.h \t${backward_srcdir}/stack.h \t${backward_srcdir}/tempbuf.h \t${backward_srcdir}/tree.h \t${backward_srcdir}/vector.h \t${backward_srcdir}/fstream.h \t${backward_srcdir}/strstream.h \t${backward_srcdir}/backward_warning.h\n \n \n ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n-ext_headers = \\\n-\t${ext_srcdir}/algorithm \\\n-\t${ext_srcdir}/enc_filebuf.h \\\n-\t${ext_srcdir}/stdio_filebuf.h \\\n-\t${ext_srcdir}/functional \\\n-\t${ext_srcdir}/hash_map \\\n-\t${ext_srcdir}/hash_set \\\n-\t${ext_srcdir}/iterator \\\n-\t${ext_srcdir}/memory \\\n-\t${ext_srcdir}/numeric \\\n-\t${ext_srcdir}/rb_tree \\\n-\t${ext_srcdir}/rope \\\n-\t${ext_srcdir}/ropeimpl.h \\\n-\t${ext_srcdir}/slist \\\n-\t${ext_srcdir}/stl_hash_fun.h \\\n-\t${ext_srcdir}/stl_hashtable.h \\\n-\t${ext_srcdir}/stl_rope.h\n+ext_headers =  \t${ext_srcdir}/algorithm \t${ext_srcdir}/enc_filebuf.h \t${ext_srcdir}/stdio_filebuf.h \t${ext_srcdir}/functional \t${ext_srcdir}/hash_map \t${ext_srcdir}/hash_set \t${ext_srcdir}/iterator \t${ext_srcdir}/memory \t${ext_srcdir}/numeric \t${ext_srcdir}/rb_tree \t${ext_srcdir}/rope \t${ext_srcdir}/ropeimpl.h \t${ext_srcdir}/slist \t${ext_srcdir}/stl_hash_fun.h \t${ext_srcdir}/stl_hashtable.h \t${ext_srcdir}/stl_rope.h\n \n \n # This is the common subset of files that all three \"C\" header models use.\n c_base_srcdir = @C_INCLUDE_DIR@\n c_base_builddir = .\n-c_base_headers = \\\n-\t${c_base_srcdir}/std_cassert.h \\\n-\t${c_base_srcdir}/std_cctype.h \\\n-\t${c_base_srcdir}/std_cerrno.h \\\n-\t${c_base_srcdir}/std_cfloat.h \\\n-\t${c_base_srcdir}/std_ciso646.h \\\n-\t${c_base_srcdir}/std_climits.h \\\n-\t${c_base_srcdir}/std_clocale.h \\\n-\t${c_base_srcdir}/std_cmath.h \\\n-\t${c_base_srcdir}/std_csetjmp.h \\\n-\t${c_base_srcdir}/std_csignal.h \\\n-\t${c_base_srcdir}/std_cstdarg.h \\\n-\t${c_base_srcdir}/std_cstddef.h \\\n-\t${c_base_srcdir}/std_cstdio.h \\\n-\t${c_base_srcdir}/std_cstdlib.h \\\n-\t${c_base_srcdir}/std_cstring.h \\\n-\t${c_base_srcdir}/std_ctime.h \\\n-\t${c_base_srcdir}/std_cwchar.h \\\n-\t${c_base_srcdir}/std_cwctype.h \n-\n-c_base_headers_rename = \\\n-\tcassert \\\n-\tcctype \\\n-\tcerrno \\\n-\tcfloat \\\n-\tciso646 \\\n-\tclimits \\\n-\tclocale \\\n-\tcmath \\\n-\tcsetjmp \\\n-\tcsignal \\\n-\tcstdarg \\\n-\tcstddef \\\n-\tcstdio \\\n-\tcstdlib \\\n-\tcstring \\\n-\tctime \\\n-\tcwchar \\\n-\tcwctype \n+c_base_headers =  \t${c_base_srcdir}/std_cassert.h \t${c_base_srcdir}/std_cctype.h \t${c_base_srcdir}/std_cerrno.h \t${c_base_srcdir}/std_cfloat.h \t${c_base_srcdir}/std_ciso646.h \t${c_base_srcdir}/std_climits.h \t${c_base_srcdir}/std_clocale.h \t${c_base_srcdir}/std_cmath.h \t${c_base_srcdir}/std_csetjmp.h \t${c_base_srcdir}/std_csignal.h \t${c_base_srcdir}/std_cstdarg.h \t${c_base_srcdir}/std_cstddef.h \t${c_base_srcdir}/std_cstdio.h \t${c_base_srcdir}/std_cstdlib.h \t${c_base_srcdir}/std_cstring.h \t${c_base_srcdir}/std_ctime.h \t${c_base_srcdir}/std_cwchar.h \t${c_base_srcdir}/std_cwctype.h \n+\n+c_base_headers_rename =  \tcassert \tcctype \tcerrno \tcfloat \tciso646 \tclimits \tclocale \tcmath \tcsetjmp \tcsignal \tcstdarg \tcstddef \tcstdio \tcstdlib \tcstring \tctime \tcwchar \tcwctype \n \n \n # \"C\" compatibility headers.\n c_compatibility_srcdir = ${glibcpp_srcdir}/include/c_compatibility\n c_compatibility_builddir = .\n-c_compatibility_headers = \\\n-\t${c_compatibility_srcdir}/assert.h \\\n-\t${c_compatibility_srcdir}/ctype.h \\\n-\t${c_compatibility_srcdir}/errno.h \\\n-\t${c_compatibility_srcdir}/float.h \\\n-\t${c_compatibility_srcdir}/iso646.h \\\n-\t${c_compatibility_srcdir}/limits.h \\\n-\t${c_compatibility_srcdir}/locale.h \\\n-\t${c_compatibility_srcdir}/math.h \\\n-\t${c_compatibility_srcdir}/setjmp.h \\\n-\t${c_compatibility_srcdir}/signal.h \\\n-\t${c_compatibility_srcdir}/stdarg.h \\\n-\t${c_compatibility_srcdir}/stddef.h \\\n-\t${c_compatibility_srcdir}/stdio.h \\\n-\t${c_compatibility_srcdir}/stdlib.h \\\n-\t${c_compatibility_srcdir}/string.h \\\n-\t${c_compatibility_srcdir}/time.h \\\n-\t${c_compatibility_srcdir}/wchar.h \\\n-\t${c_compatibility_srcdir}/wctype.h \n-\n-@GLIBCPP_C_HEADERS_C_STD_TRUE@c_base_headers_extra = @GLIBCPP_C_HEADERS_C_STD_TRUE@${c_base_srcdir}/cmath.tcc \n+c_compatibility_headers =  \t${c_compatibility_srcdir}/assert.h \t${c_compatibility_srcdir}/ctype.h \t${c_compatibility_srcdir}/errno.h \t${c_compatibility_srcdir}/float.h \t${c_compatibility_srcdir}/iso646.h \t${c_compatibility_srcdir}/limits.h \t${c_compatibility_srcdir}/locale.h \t${c_compatibility_srcdir}/math.h \t${c_compatibility_srcdir}/setjmp.h \t${c_compatibility_srcdir}/signal.h \t${c_compatibility_srcdir}/stdarg.h \t${c_compatibility_srcdir}/stddef.h \t${c_compatibility_srcdir}/stdio.h \t${c_compatibility_srcdir}/stdlib.h \t${c_compatibility_srcdir}/string.h \t${c_compatibility_srcdir}/time.h \t${c_compatibility_srcdir}/wchar.h \t${c_compatibility_srcdir}/wctype.h \n+\n+@GLIBCPP_C_HEADERS_C_STD_TRUE@c_base_headers_extra = ${c_base_srcdir}/cmath.tcc \n @GLIBCPP_C_HEADERS_C_STD_FALSE@c_base_headers_extra = \n-@GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = @GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@${c_compatibility_headers}\n+@GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = ${c_compatibility_headers}\n @GLIBCPP_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n std_srcdir = ${glibcpp_srcdir}/include/std\n std_builddir = .\n-std_headers = \\\n-\t${std_srcdir}/std_algorithm.h \\\n-\t${std_srcdir}/std_bitset.h \\\n-\t${std_srcdir}/std_complex.h \\\n-\t${std_srcdir}/std_deque.h \\\n-\t${std_srcdir}/std_fstream.h \\\n-\t${std_srcdir}/std_functional.h \\\n-\t${std_srcdir}/std_iomanip.h \\\n-\t${std_srcdir}/std_ios.h \\\n-\t${std_srcdir}/std_iosfwd.h \\\n-\t${std_srcdir}/std_iostream.h \\\n-\t${std_srcdir}/std_istream.h \\\n-\t${std_srcdir}/std_iterator.h \\\n-\t${std_srcdir}/std_limits.h \\\n-\t${std_srcdir}/std_list.h \\\n-\t${std_srcdir}/std_locale.h \\\n-\t${std_srcdir}/std_map.h \\\n-\t${std_srcdir}/std_memory.h \\\n-\t${std_srcdir}/std_numeric.h \\\n-\t${std_srcdir}/std_ostream.h \\\n-\t${std_srcdir}/std_queue.h \\\n-\t${std_srcdir}/std_set.h \\\n-\t${std_srcdir}/std_sstream.h \\\n-\t${std_srcdir}/std_stack.h \\\n-\t${std_srcdir}/std_stdexcept.h \\\n-\t${std_srcdir}/std_streambuf.h \\\n-\t${std_srcdir}/std_string.h \\\n-\t${std_srcdir}/std_utility.h \\\n-\t${std_srcdir}/std_valarray.h \\\n-\t${std_srcdir}/std_vector.h\n+std_headers =  \t${std_srcdir}/std_algorithm.h \t${std_srcdir}/std_bitset.h \t${std_srcdir}/std_complex.h \t${std_srcdir}/std_deque.h \t${std_srcdir}/std_fstream.h \t${std_srcdir}/std_functional.h \t${std_srcdir}/std_iomanip.h \t${std_srcdir}/std_ios.h \t${std_srcdir}/std_iosfwd.h \t${std_srcdir}/std_iostream.h \t${std_srcdir}/std_istream.h \t${std_srcdir}/std_iterator.h \t${std_srcdir}/std_limits.h \t${std_srcdir}/std_list.h \t${std_srcdir}/std_locale.h \t${std_srcdir}/std_map.h \t${std_srcdir}/std_memory.h \t${std_srcdir}/std_numeric.h \t${std_srcdir}/std_ostream.h \t${std_srcdir}/std_queue.h \t${std_srcdir}/std_set.h \t${std_srcdir}/std_sstream.h \t${std_srcdir}/std_stack.h \t${std_srcdir}/std_stdexcept.h \t${std_srcdir}/std_streambuf.h \t${std_srcdir}/std_string.h \t${std_srcdir}/std_utility.h \t${std_srcdir}/std_valarray.h \t${std_srcdir}/std_vector.h\n \n # Renamed at build time. \n-std_headers_rename = \\\n-\talgorithm \\\n-\tbitset \\\n-\tcomplex \\\n-\tdeque \\\n-\tfstream \\\n-\tfunctional \\\n-\tiomanip \\\n-\tios \\\n-\tiosfwd \\\n-\tiostream \\\n-\tistream \\\n-\titerator \\\n-\tlimits \\\n-\tlist \\\n-\tlocale \\\n-\tmap \\\n-\tmemory \\\n-\tnumeric \\\n-\tostream \\\n-\tqueue \\\n-\tset \\\n-\tsstream \\\n-\tstack \\\n-\tstdexcept \\\n-\tstreambuf \\\n-\tstring \\\n-\tutility \\\n-\tvalarray \\\n-\tvector\n+std_headers_rename =  \talgorithm \tbitset \tcomplex \tdeque \tfstream \tfunctional \tiomanip \tios \tiosfwd \tiostream \tistream \titerator \tlimits \tlist \tlocale \tmap \tmemory \tnumeric \tostream \tqueue \tset \tsstream \tstack \tstdexcept \tstreambuf \tstring \tutility \tvalarray \tvector\n \n \n target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n target_builddir = ./${target_alias}/bits\n-target_headers = \\\n-\t${target_srcdir}/ctype_base.h \\\n-\t${target_srcdir}/ctype_inline.h \\\n-\t${target_srcdir}/ctype_noninline.h \\\n-\t${target_srcdir}/os_defines.h \\\n-\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n-\t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n+target_headers =  \t${target_srcdir}/ctype_base.h \t${target_srcdir}/ctype_inline.h \t${target_srcdir}/ctype_noninline.h \t${target_srcdir}/os_defines.h \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n \n # These target_headers_extra files are all built with ad hoc naming rules.\n-target_headers_extra = \\\n-\t${target_builddir}/basic_file.h \\\n-\t${target_builddir}/c++config.h \\\n-\t${target_builddir}/c++io.h \\\n-\t${target_builddir}/c++locale.h \\\n-\t${target_builddir}/messages_members.h \\\n-\t${target_builddir}/codecvt_specializations.h\n+target_headers_extra =  \t${target_builddir}/basic_file.h \t${target_builddir}/c++config.h \t${target_builddir}/c++io.h \t${target_builddir}/c++locale.h \t${target_builddir}/messages_members.h \t${target_builddir}/codecvt_specializations.h\n \n \n-thread_target_headers = \\\n-\t${target_builddir}/gthr.h \\\n-\t${target_builddir}/gthr-single.h \\\n-\t${target_builddir}/gthr-posix.h \\\n-\t${target_builddir}/gthr-default.h\n+thread_target_headers =  \t${target_builddir}/gthr.h \t${target_builddir}/gthr-single.h \t${target_builddir}/gthr-posix.h \t${target_builddir}/gthr-default.h\n \n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-allstamps = \\\n-\tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext \\\n-\t${target_builddir}/stamp-target\n+allstamps =  \tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \tstamp-backward stamp-ext \t${target_builddir}/stamp-target\n \n \n # Target includes for threads\n@@ -463,7 +214,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n all: all-redirect\n .SUFFIXES:"}, {"sha": "d3da664f8d1aa31ff08799097f9a0dbf03d00362", "filename": "libstdc++-v3/include/bits/slice.h", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d80a8545be028be5d341b98f4619ab09178c2ea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d80a8545be028be5d341b98f4619ab09178c2ea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice.h?ref=6d80a8545be028be5d341b98f4619ab09178c2ea", "patch": "@@ -1,85 +0,0 @@\n-// The template and inlines for the -*- C++ -*- slice class.\n-\n-// Copyright (C) 1997-1999, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-// Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n-\n-/** @file slice.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_BITS_SLICE_H\n-#define _CPP_BITS_SLICE_H 1\n-\n-#pragma GCC system_header\n-\n-namespace std\n-{\n-\n-class slice\n-{\n-public:\n-    slice ();\n-    slice (size_t, size_t, size_t);\n-\n-    size_t start () const;\n-    size_t size () const;\n-    size_t stride () const;\n-\n-private:\n-    size_t _M_off;                      // offset\n-    size_t _M_sz;\t\t\t// size\n-    size_t _M_st;\t\t\t// stride unit\n-};\n-\n-inline slice::slice () {}\n-\n-inline slice::slice (size_t __o, size_t __d, size_t __s)\n-        : _M_off (__o), _M_sz (__d), _M_st (__s) {}\n-\n-inline size_t\n-slice::start () const\n-  { return _M_off; }\n-\n-inline size_t\n-slice::size () const\n-  { return _M_sz; }\n-\n-inline size_t\n-slice::stride () const\n-  { return _M_st; }\n-\n-} // std::\n-\n-\n-#endif /* _CPP_BITS_SLICE_H */\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "1a80cab21b3c5aef7e8eaeae13a3cdf4c3bf9336", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 117, "deletions": 81, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=5068f5468592fea84a6a9e758bee4f40c4ee58b9", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- slice_array class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,120 +41,156 @@\n \n namespace std\n {\n+  class slice\n+  {\n+  public:\n+    slice();\n+    slice(size_t, size_t, size_t);\n+    \n+    size_t start() const;\n+    size_t size() const;\n+    size_t stride() const;\n     \n-    template<typename _Tp>\n+  private:\n+    size_t _M_off;                      // offset\n+    size_t _M_sz;\t\t\t// size\n+    size_t _M_st;\t\t\t// stride unit\n+  };\n+\n+  // The default constructor constructor is not required to initialize\n+  // data members with any meaningful values, so we choose to do nothing.\n+  inline \n+  slice::slice() {}\n+  \n+  inline \n+  slice::slice(size_t __o, size_t __d, size_t __s)\n+    : _M_off(__o), _M_sz(__d), _M_st(__s) {}\n+  \n+  inline size_t\n+  slice::start() const\n+  { return _M_off; }\n+  \n+  inline size_t\n+  slice::size() const\n+  { return _M_sz; }\n+  \n+  inline size_t\n+  slice::stride() const\n+  { return _M_st; }\n+\n+  template<typename _Tp>\n     class slice_array\n     {\n     public:\n-        typedef _Tp value_type;\n+      typedef _Tp value_type;\n \n       // This constructor is implemented since we need to return a value.\n-      slice_array (const slice_array&);\n+      slice_array(const slice_array&);\n \n       // This operator must be public.  See DR-253.\n-      slice_array& operator= (const slice_array&);\n-\n-        void operator=   (const valarray<_Tp>&) const;\n-        void operator*=  (const valarray<_Tp>&) const;\n-        void operator/=  (const valarray<_Tp>&) const;\n-        void operator%=  (const valarray<_Tp>&) const;\n-        void operator+=  (const valarray<_Tp>&) const;\n-        void operator-=  (const valarray<_Tp>&) const;\n-        void operator^=  (const valarray<_Tp>&) const;\n-        void operator&=  (const valarray<_Tp>&) const;\n-        void operator|=  (const valarray<_Tp>&) const;\n-        void operator<<= (const valarray<_Tp>&) const;\n-        void operator>>= (const valarray<_Tp>&) const;\n-        void operator= (const _Tp &);\n-        //        ~slice_array ();\n-        \n-        template<class _Dom>\n-        void operator=   (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator*=  (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator/=  (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator%=  (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator+=  (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator-=  (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator^=  (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator&=  (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator|=  (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator<<= (const _Expr<_Dom,_Tp>&) const;\n-        template<class _Dom>\n-        void operator>>= (const _Expr<_Dom,_Tp>&) const;\n-        \n+      slice_array& operator=(const slice_array&);\n+\n+      void operator=(const valarray<_Tp>&) const;\n+      void operator*=(const valarray<_Tp>&) const;\n+      void operator/=(const valarray<_Tp>&) const;\n+      void operator%=(const valarray<_Tp>&) const;\n+      void operator+=(const valarray<_Tp>&) const;\n+      void operator-=(const valarray<_Tp>&) const;\n+      void operator^=(const valarray<_Tp>&) const;\n+      void operator&=(const valarray<_Tp>&) const;\n+      void operator|=(const valarray<_Tp>&) const;\n+      void operator<<=(const valarray<_Tp>&) const;\n+      void operator>>=(const valarray<_Tp>&) const;\n+      void operator=(const _Tp &);\n+      //        ~slice_array ();\n+\n+      template<class _Dom>\n+\tvoid operator=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+\tvoid operator*=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+\tvoid operator/=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+\tvoid operator%=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+\tvoid operator+=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+\tvoid operator-=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+\tvoid operator^=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+\tvoid operator&=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+\tvoid operator|=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+\tvoid operator<<=(const _Expr<_Dom,_Tp>&) const;\n+      template<class _Dom>\n+\tvoid operator>>=(const _Expr<_Dom,_Tp>&) const;\n+\n     private:\n-        friend class valarray<_Tp>;\n-        slice_array(_Array<_Tp>, const slice&);\n-        \n-        const size_t     _M_sz;\n-        const size_t     _M_stride;\n-        const _Array<_Tp> _M_array;\n+      friend class valarray<_Tp>;\n+      slice_array(_Array<_Tp>, const slice&);\n+\n+      const size_t     _M_sz;\n+      const size_t     _M_stride;\n+      const _Array<_Tp> _M_array;\n \n-        // not implemented\n-        slice_array ();\n+      // not implemented\n+      slice_array();\n     };\n \n-    template<typename _Tp>\n-    inline slice_array<_Tp>::slice_array (_Array<_Tp> __a, const slice& __s)\n-            : _M_sz (__s.size ()), _M_stride (__s.stride ()),\n-              _M_array (__a.begin () + __s.start ()) {}\n+  template<typename _Tp>\n+    inline \n+    slice_array<_Tp>::slice_array(_Array<_Tp> __a, const slice& __s)\n+      : _M_sz(__s.size()), _M_stride(__s.stride()),\n+\t_M_array(__a.begin() + __s.start()) {}\n \n+  template<typename _Tp>\n+    inline \n+    slice_array<_Tp>::slice_array(const slice_array<_Tp>& a)\n+      : _M_sz(a._M_sz), _M_stride(a._M_stride), _M_array(a._M_array) {}\n     \n-    template<typename _Tp>\n-    inline slice_array<_Tp>::slice_array(const slice_array<_Tp>& a)\n-            : _M_sz(a._M_sz), _M_stride(a._M_stride), _M_array(a._M_array) {}\n-    \n-    //    template<typename _Tp>\n-    //    inline slice_array<_Tp>::~slice_array () {}\n+  //    template<typename _Tp>\n+  //    inline slice_array<_Tp>::~slice_array () {}\n \n   template<typename _Tp>\n-  inline slice_array<_Tp>&\n-  slice_array<_Tp>::operator=(const slice_array<_Tp>& __a)\n-  {\n-    __valarray_copy(_M_array, _M_sz, _M_stride, __a._M_array, __a._M_stride);\n-    return *this;\n-  }\n-\n+    inline slice_array<_Tp>&\n+    slice_array<_Tp>::operator=(const slice_array<_Tp>& __a)\n+    {\n+      __valarray_copy(_M_array, _M_sz, _M_stride, __a._M_array, __a._M_stride);\n+      return *this;\n+    }\n \n-    template<typename _Tp>\n+  template<typename _Tp>\n     inline void\n-    slice_array<_Tp>::operator= (const _Tp& __t) \n-    { __valarray_fill (_M_array, _M_sz, _M_stride, __t); }\n+    slice_array<_Tp>::operator=(const _Tp& __t) \n+    { __valarray_fill(_M_array, _M_sz, _M_stride, __t); }\n     \n-    template<typename _Tp>\n+  template<typename _Tp>\n     inline void\n-    slice_array<_Tp>::operator= (const valarray<_Tp>& __v) const\n+    slice_array<_Tp>::operator=(const valarray<_Tp>& __v) const\n     { __valarray_copy (_Array<_Tp> (__v), _M_array, _M_sz, _M_stride); }\n     \n-    template<typename _Tp>\n-    template<class _Dom>\n+  template<typename _Tp>\n+  template<class _Dom>\n     inline void\n-    slice_array<_Tp>::operator= (const _Expr<_Dom,_Tp>& __e) const\n+    slice_array<_Tp>::operator=(const _Expr<_Dom,_Tp>& __e) const\n     { __valarray_copy (__e, _M_sz, _M_array, _M_stride); }\n \n #undef _DEFINE_VALARRAY_OPERATOR\n-#define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n+#define _DEFINE_VALARRAY_OPERATOR(_Op,_Nname)\t\t\t\t\\\n template<typename _Tp>\t\t\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-slice_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\\\n+slice_array<_Tp>::operator _Op##= (const valarray<_Tp>& __v) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  _Array_augmented_##name (_M_array, _M_sz, _M_stride, _Array<_Tp> (__v));\\\n+  _Array_augmented_##_Name (_M_array, _M_sz, _M_stride, _Array<_Tp> (__v));\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n template<typename _Tp> template<class _Dom>\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-slice_array<_Tp>::operator op##= (const _Expr<_Dom,_Tp>& __e) const\t\\\n+slice_array<_Tp>::operator _Op##= (const _Expr<_Dom,_Tp>& __e) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-    _Array_augmented_##name (_M_array, _M_stride, __e, _M_sz);\t\t\\\n+    _Array_augmented_##_Name (_M_array, _M_stride, __e, _M_sz);\t\t\\\n }\n         \n "}, {"sha": "d7bd7a44959772f64566025a0a4fd97a237e974f", "filename": "libstdc++-v3/include/std/std_valarray.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h?ref=5068f5468592fea84a6a9e758bee4f40c4ee58b9", "patch": "@@ -254,7 +254,6 @@ namespace std\n \n } // std::\n       \n-#include <bits/slice.h>\n #include <bits/slice_array.h>\n #include <bits/gslice.h>\n #include <bits/gslice_array.h>"}, {"sha": "42b2adbaa53398fe1d3e8e63a9d7bf5e2b27b86c", "filename": "libstdc++-v3/testsuite/26_numerics/slice.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5068f5468592fea84a6a9e758bee4f40c4ee58b9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice.cc?ref=5068f5468592fea84a6a9e758bee4f40c4ee58b9", "patch": "@@ -0,0 +1,62 @@\n+// 20020717 gdr\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// Test slice class invariants\n+\n+#include <valarray>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+bool\n+construction(int start, int size, int stride)\n+{\n+  std::slice s(start, size, stride);\n+  return s.start() == start && s.size() == size && s.stride() == stride;\n+}\n+\n+bool\n+copy(int start, int size, int stride)\n+{\n+  std::slice s(start, size, stride);\n+  std::slice t = s;\n+  return t.start() == start && t.size() == size && t.stride() == stride;\n+}\n+\n+bool\n+assignment(int start, int size, int stride)\n+{\n+  std::slice s(start, size, stride);\n+  std::slice t;\n+  t = s;\n+  return t.start() == start && t.size() == size && t.stride() == stride;\n+}\n+\n+\n+int main()\n+{\n+  std::srand(20020717);         using std::rand;\n+  VERIFY(construction(rand(), rand(), rand()));\n+\n+  VERIFY(copy(rand(), rand(), rand()));\n+\n+  VERIFY(assignment(rand(), rand(), rand()));\n+\n+  return 0;\n+}"}]}