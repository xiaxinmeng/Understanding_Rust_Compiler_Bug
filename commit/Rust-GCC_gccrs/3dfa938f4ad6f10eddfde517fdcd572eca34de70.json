{"sha": "3dfa938f4ad6f10eddfde517fdcd572eca34de70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmYTkzOGY0YWQ2ZjEwZWRkZmRlNTE3ZmRjZDU3MmVjYTM0ZGU3MA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-21T20:17:15Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-21T20:17:15Z"}, "message": "auto-inc-dec.c: strengthen various rtx to rtx_insn *\n\ngcc/\n2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n\n\t* auto-inc-dec.c (struct inc_insn): Strengthen field \"insn\" from\n\trtx to rtx_insn *.\n\t(struct mem_insn): Likewise for field \"insn\".\n\t(reg_next_use): Strengthen from rtx * to rtx_insn **.\n\t(reg_next_inc_use): Likewise.\n\t(reg_next_def): Likewise.\n\t(move_dead_notes): Strengthen params \"to_insn\" and \"from_insn\"\n\tfrom rtx to rtx_insn *.\n\t(move_insn_before): Likewise for param \"next_insn\" and local \"insns\".\n\t(attempt_change): Likewise for local \"mov_insn\".\n\t(try_merge): Likewise for param \"last_insn\".\n\t(get_next_ref): Likewise for return type and local \"insn\".\n\tStrengthen param \"next_array\" from rtx * to rtx_insn **.\n\t(parse_add_or_inc): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(find_inc): Likewise for locals \"insn\" and \"other_insn\" (three of\n\tthe latter).\n\t(merge_in_block): Likewise for locals \"insn\", \"curr\",\n\t\"other_insn\".\n\t(pass_inc_dec::execute): Update allocations of the arrays to\n\treflect the stronger types.\n\nFrom-SVN: r214285", "tree": {"sha": "3c71aecbc81743bbfb29fcb0559ebcb8a8183cd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c71aecbc81743bbfb29fcb0559ebcb8a8183cd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dfa938f4ad6f10eddfde517fdcd572eca34de70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfa938f4ad6f10eddfde517fdcd572eca34de70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfa938f4ad6f10eddfde517fdcd572eca34de70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfa938f4ad6f10eddfde517fdcd572eca34de70/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a965f615d5a2661d3aeb115613e931d809deff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a965f615d5a2661d3aeb115613e931d809deff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a965f615d5a2661d3aeb115613e931d809deff6"}], "stats": {"total": 78, "additions": 51, "deletions": 27}, "files": [{"sha": "cf9f4cec4f3a489b682f86579a7a9b6aefd754b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfa938f4ad6f10eddfde517fdcd572eca34de70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfa938f4ad6f10eddfde517fdcd572eca34de70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dfa938f4ad6f10eddfde517fdcd572eca34de70", "patch": "@@ -1,3 +1,27 @@\n+2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* auto-inc-dec.c (struct inc_insn): Strengthen field \"insn\" from\n+\trtx to rtx_insn *.\n+\t(struct mem_insn): Likewise for field \"insn\".\n+\t(reg_next_use): Strengthen from rtx * to rtx_insn **.\n+\t(reg_next_inc_use): Likewise.\n+\t(reg_next_def): Likewise.\n+\t(move_dead_notes): Strengthen params \"to_insn\" and \"from_insn\"\n+\tfrom rtx to rtx_insn *.\n+\t(move_insn_before): Likewise for param \"next_insn\" and local \"insns\".\n+\t(attempt_change): Likewise for local \"mov_insn\".\n+\t(try_merge): Likewise for param \"last_insn\".\n+\t(get_next_ref): Likewise for return type and local \"insn\".\n+\tStrengthen param \"next_array\" from rtx * to rtx_insn **.\n+\t(parse_add_or_inc): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(find_inc): Likewise for locals \"insn\" and \"other_insn\" (three of\n+\tthe latter).\n+\t(merge_in_block): Likewise for locals \"insn\", \"curr\",\n+\t\"other_insn\".\n+\t(pass_inc_dec::execute): Update allocations of the arrays to\n+\treflect the stronger types.\n+\n 2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* asan.c (asan_clear_shadow): Strengthen locals \"insn\", \"insns\""}, {"sha": "0c85abbb01a1baef91dd7fe283eee74354cc72f8", "filename": "gcc/auto-inc-dec.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfa938f4ad6f10eddfde517fdcd572eca34de70/gcc%2Fauto-inc-dec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfa938f4ad6f10eddfde517fdcd572eca34de70/gcc%2Fauto-inc-dec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-inc-dec.c?ref=3dfa938f4ad6f10eddfde517fdcd572eca34de70", "patch": "@@ -295,7 +295,7 @@ init_decision_table (void)\n \n static struct inc_insn\n {\n-  rtx insn;           /* The insn being parsed.  */\n+  rtx_insn *insn;     /* The insn being parsed.  */\n   rtx pat;            /* The pattern of the insn.  */\n   bool reg1_is_const; /* True if reg1 is const, false if reg1 is a reg.  */\n   enum form form;\n@@ -355,7 +355,7 @@ dump_inc_insn (FILE *file)\n \n static struct mem_insn\n {\n-  rtx insn;           /* The insn being parsed.  */\n+  rtx_insn *insn;     /* The insn being parsed.  */\n   rtx pat;            /* The pattern of the insn.  */\n   rtx *mem_loc;       /* The address of the field that holds the mem */\n                       /* that is to be replaced.  */\n@@ -397,9 +397,9 @@ dump_mem_insn (FILE *file)\n    must be compared with the current block.\n */\n \n-static rtx *reg_next_use = NULL;\n-static rtx *reg_next_inc_use = NULL;\n-static rtx *reg_next_def = NULL;\n+static rtx_insn **reg_next_use = NULL;\n+static rtx_insn **reg_next_inc_use = NULL;\n+static rtx_insn **reg_next_def = NULL;\n \n \n /* Move dead note that match PATTERN to TO_INSN from FROM_INSN.  We do\n@@ -408,7 +408,7 @@ static rtx *reg_next_def = NULL;\n    does not appear that there are any other kinds of relevant notes.  */\n \n static void\n-move_dead_notes (rtx to_insn, rtx from_insn, rtx pattern)\n+move_dead_notes (rtx_insn *to_insn, rtx_insn *from_insn, rtx pattern)\n {\n   rtx note;\n   rtx next_note;\n@@ -436,10 +436,10 @@ move_dead_notes (rtx to_insn, rtx from_insn, rtx pattern)\n /* Create a mov insn DEST_REG <- SRC_REG and insert it before\n    NEXT_INSN.  */\n \n-static rtx\n-insert_move_insn_before (rtx next_insn, rtx dest_reg, rtx src_reg)\n+static rtx_insn *\n+insert_move_insn_before (rtx_insn *next_insn, rtx dest_reg, rtx src_reg)\n {\n-  rtx insns;\n+  rtx_insn *insns;\n \n   start_sequence ();\n   emit_move_insn (dest_reg, src_reg);\n@@ -469,7 +469,7 @@ attempt_change (rtx new_addr, rtx inc_reg)\n      handled mov free.  */\n \n   basic_block bb = BLOCK_FOR_INSN (mem_insn.insn);\n-  rtx mov_insn = NULL;\n+  rtx_insn *mov_insn = NULL;\n   int regno;\n   rtx mem = *mem_insn.mem_loc;\n   enum machine_mode mode = GET_MODE (mem);\n@@ -611,7 +611,7 @@ try_merge (void)\n \n   /* The width of the mem being accessed.  */\n   int size = GET_MODE_SIZE (GET_MODE (mem));\n-  rtx last_insn = NULL;\n+  rtx_insn *last_insn = NULL;\n   enum machine_mode reg_mode = GET_MODE (inc_reg);\n \n   switch (inc_insn.form)\n@@ -738,10 +738,10 @@ try_merge (void)\n    NEXT_ARRAY) or defines (if reg_next_def is passed in NEXT_ARRAY)\n    REGNO in BB.  */\n \n-static rtx\n-get_next_ref (int regno, basic_block bb, rtx *next_array)\n+static rtx_insn *\n+get_next_ref (int regno, basic_block bb, rtx_insn **next_array)\n {\n-  rtx insn = next_array[regno];\n+  rtx_insn *insn = next_array[regno];\n \n   /* Lazy about cleaning out the next_arrays.  */\n   if (insn && BLOCK_FOR_INSN (insn) != bb)\n@@ -787,7 +787,7 @@ reverse_inc (void)\n    processed.  */\n \n static bool\n-parse_add_or_inc (rtx insn, bool before_mem)\n+parse_add_or_inc (rtx_insn *insn, bool before_mem)\n {\n   rtx pat = single_set (insn);\n   if (!pat)\n@@ -966,9 +966,9 @@ find_address (rtx *address_of_x)\n static bool\n find_inc (bool first_try)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   basic_block bb = BLOCK_FOR_INSN (mem_insn.insn);\n-  rtx other_insn;\n+  rtx_insn *other_insn;\n   df_ref def;\n \n   /* Make sure this reg appears only once in this insn.  */\n@@ -1038,9 +1038,9 @@ find_inc (bool first_try)\n     {\n       /* Make sure that there is no insn that assigns to inc_insn.res\n \t between the mem_insn and the inc_insn.  */\n-      rtx other_insn = get_next_ref (REGNO (inc_insn.reg_res),\n-\t\t\t\t     BLOCK_FOR_INSN (mem_insn.insn),\n-\t\t\t\t     reg_next_def);\n+      rtx_insn *other_insn = get_next_ref (REGNO (inc_insn.reg_res),\n+\t\t\t\t\t   BLOCK_FOR_INSN (mem_insn.insn),\n+\t\t\t\t\t   reg_next_def);\n       if (other_insn != inc_insn.insn)\n \t{\n \t  if (dump_file)\n@@ -1129,7 +1129,7 @@ find_inc (bool first_try)\n \t then we just abandon this.  */\n \n       int luid = DF_INSN_LUID (inc_insn.insn);\n-      rtx other_insn;\n+      rtx_insn *other_insn;\n \n       /* Make sure this reg appears only once in this insn.  */\n       if (count_occurrences (PATTERN (mem_insn.insn), mem_insn.reg1, 1) != 1)\n@@ -1332,8 +1332,8 @@ find_mem (rtx *address_of_x)\n static void\n merge_in_block (int max_reg, basic_block bb)\n {\n-  rtx insn;\n-  rtx curr;\n+  rtx_insn *insn;\n+  rtx_insn *curr;\n   int success_in_block = 0;\n \n   if (dump_file)\n@@ -1377,7 +1377,7 @@ merge_in_block (int max_reg, basic_block bb)\n \t\t\t clear of c because the inc insn is going to move\n \t\t\t into the mem_insn.insn.  */\n \t\t      int luid = DF_INSN_LUID (mem_insn.insn);\n-\t\t      rtx other_insn\n+\t\t      rtx_insn *other_insn\n \t\t\t= get_next_ref (REGNO (inc_insn.reg1), bb, reg_next_use);\n \n \t\t      if (other_insn && luid > DF_INSN_LUID (other_insn))\n@@ -1513,9 +1513,9 @@ pass_inc_dec::execute (function *fun ATTRIBUTE_UNUSED)\n   df_note_add_problem ();\n   df_analyze ();\n \n-  reg_next_use = XCNEWVEC (rtx, max_reg);\n-  reg_next_inc_use = XCNEWVEC (rtx, max_reg);\n-  reg_next_def = XCNEWVEC (rtx, max_reg);\n+  reg_next_use = XCNEWVEC (rtx_insn *, max_reg);\n+  reg_next_inc_use = XCNEWVEC (rtx_insn *, max_reg);\n+  reg_next_def = XCNEWVEC (rtx_insn *, max_reg);\n   FOR_EACH_BB_FN (bb, fun)\n     merge_in_block (max_reg, bb);\n "}]}