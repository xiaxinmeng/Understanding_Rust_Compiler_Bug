{"sha": "730e15561d35b15a74b45688d40c9639e077dbca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMwZTE1NTYxZDM1YjE1YTc0YjQ1Njg4ZDQwYzk2MzllMDc3ZGJjYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-03-26T01:48:51Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-03-26T01:48:51Z"}, "message": "class.c (add_method): Use memcpy/memmove, not bcopy.\n\n\t* class.c (add_method): Use memcpy/memmove, not bcopy.\n\n\t* decl.c (duplicate_decls): Likewise.\n\nFrom-SVN: r40835", "tree": {"sha": "6b883b48ad099b4300499d50d53577f4236b37ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b883b48ad099b4300499d50d53577f4236b37ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/730e15561d35b15a74b45688d40c9639e077dbca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730e15561d35b15a74b45688d40c9639e077dbca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730e15561d35b15a74b45688d40c9639e077dbca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730e15561d35b15a74b45688d40c9639e077dbca/comments", "author": null, "committer": null, "parents": [{"sha": "eb40d6b94a706837f4fa87106b60fb1aa2aaa4f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb40d6b94a706837f4fa87106b60fb1aa2aaa4f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb40d6b94a706837f4fa87106b60fb1aa2aaa4f4"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "63ce6c9ba60476aebe123420a7384bea083d9539", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730e15561d35b15a74b45688d40c9639e077dbca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730e15561d35b15a74b45688d40c9639e077dbca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=730e15561d35b15a74b45688d40c9639e077dbca", "patch": "@@ -1,3 +1,9 @@\n+2001-03-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (add_method): Use memcpy/memmove, not bcopy.\n+\n+\t* decl.c (duplicate_decls): Likewise.\n+\n 2001-03-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* mangle.c (write_discriminator): Use `_0' for discriminator 1,"}, {"sha": "f99fc3c1cdf2f7e1fa6e5f6ac475d04c8298ca72", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730e15561d35b15a74b45688d40c9639e077dbca/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730e15561d35b15a74b45688d40c9639e077dbca/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=730e15561d35b15a74b45688d40c9639e077dbca", "patch": "@@ -1218,9 +1218,8 @@ add_method (type, method, error_p)\n \t    new_len = len + 1;\n \n \t  new_vec = make_tree_vec (new_len);\n-\t  bcopy ((PTR) &TREE_VEC_ELT (method_vec, 0),\n-\t\t (PTR) &TREE_VEC_ELT (new_vec, 0),\n-\t\t len * sizeof (tree));\n+\t  memcpy (&TREE_VEC_ELT (new_vec, 0), &TREE_VEC_ELT (method_vec, 0),\n+\t\t  len * sizeof (tree));\n \t  len = new_len;\n \t  method_vec = CLASSTYPE_METHOD_VEC (type) = new_vec;\n \t}\n@@ -1257,9 +1256,9 @@ add_method (type, method, error_p)\n \t      /* We know the last slot in the vector is empty\n \t\t because we know that at this point there's room\n \t\t for a new function.  */\n-\t      bcopy ((PTR) &TREE_VEC_ELT (method_vec, slot),\n-\t\t     (PTR) &TREE_VEC_ELT (method_vec, slot + 1),\n-\t\t     (len - slot - 1) * sizeof (tree));\n+\t      memmove (&TREE_VEC_ELT (method_vec, slot + 1),\n+\t\t       &TREE_VEC_ELT (method_vec, slot),\n+\t\t       (len - slot - 1) * sizeof (tree));\n \t      TREE_VEC_ELT (method_vec, slot) = NULL_TREE;\n \t    }\n \t}"}, {"sha": "04d4c4ffc59b6382de332451d48e39b65ff951ea", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730e15561d35b15a74b45688d40c9639e077dbca/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730e15561d35b15a74b45688d40c9639e077dbca/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=730e15561d35b15a74b45688d40c9639e077dbca", "patch": "@@ -3722,9 +3722,9 @@ duplicate_decls (newdecl, olddecl)\n \n       function_size = sizeof (struct tree_decl);\n \n-      bcopy ((char *) newdecl + sizeof (struct tree_common),\n-\t     (char *) olddecl + sizeof (struct tree_common),\n-\t     function_size - sizeof (struct tree_common));\n+      memcpy ((char *) olddecl + sizeof (struct tree_common),\n+\t      (char *) newdecl + sizeof (struct tree_common),\n+\t      function_size - sizeof (struct tree_common));\n \n       if (DECL_TEMPLATE_INSTANTIATION (newdecl))\n \t{\n@@ -3760,10 +3760,10 @@ duplicate_decls (newdecl, olddecl)\n     }\n   else\n     {\n-      bcopy ((char *) newdecl + sizeof (struct tree_common),\n-\t     (char *) olddecl + sizeof (struct tree_common),\n-\t     sizeof (struct tree_decl) - sizeof (struct tree_common)\n-\t     + tree_code_length [(int)TREE_CODE (newdecl)] * sizeof (char *));\n+      memcpy ((char *) olddecl + sizeof (struct tree_common),\n+\t      (char *) newdecl + sizeof (struct tree_common),\n+\t      sizeof (struct tree_decl) - sizeof (struct tree_common)\n+\t      + tree_code_length [(int)TREE_CODE (newdecl)] * sizeof (char *));\n     }\n \n   DECL_UID (olddecl) = olddecl_uid;"}]}