{"sha": "681f5b7cc8e80ef09f4692fac5bf3824e4854d54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxZjViN2NjOGU4MGVmMDlmNDY5MmZhYzViZjM4MjRlNDg1NGQ1NA==", "commit": {"author": {"name": "Yao Qi", "email": "yao.qi@linaro.org", "date": "2017-09-15T15:40:50Z"}, "committer": {"name": "Yao Qi", "email": "qiyao@gcc.gnu.org", "date": "2017-09-15T15:40:50Z"}, "message": "[include] Add macro DISABLE_COPY_AND_ASSIGN\n\nWe have many classes that copy cotr and assignment operator are deleted\nin different projects, gcc, gdb and gold.  So this patch adds a macro\nto do this, and replace these existing mechanical code with macro\nDISABLE_COPY_AND_ASSIGN.\n\nThe patch was posted in gdb-patches,\nhttps://sourceware.org/ml/gdb-patches/2017-07/msg00254.html but we\nthink it is better to put this macro in include/ansidecl.h so that\nother projects can use it too.\n\ninclude:\n\n2017-09-15  Yao Qi  <yao.qi@linaro.org>\n\t    Pedro Alves  <palves@redhat.com>\n\n\t* ansidecl.h (DISABLE_COPY_AND_ASSIGN): New macro.\n\nCo-Authored-By: Pedro Alves <palves@redhat.com>\n\nFrom-SVN: r252823", "tree": {"sha": "dfc46c853b094c05f63c142a46308c2f86a5503d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfc46c853b094c05f63c142a46308c2f86a5503d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/681f5b7cc8e80ef09f4692fac5bf3824e4854d54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681f5b7cc8e80ef09f4692fac5bf3824e4854d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/681f5b7cc8e80ef09f4692fac5bf3824e4854d54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681f5b7cc8e80ef09f4692fac5bf3824e4854d54/comments", "author": null, "committer": null, "parents": [{"sha": "efae2b2f9b70196b6e282a2cebb97b6f00714a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efae2b2f9b70196b6e282a2cebb97b6f00714a36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efae2b2f9b70196b6e282a2cebb97b6f00714a36"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "0221586d778aae85c421916f485fbcc77fb652cb", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681f5b7cc8e80ef09f4692fac5bf3824e4854d54/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681f5b7cc8e80ef09f4692fac5bf3824e4854d54/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=681f5b7cc8e80ef09f4692fac5bf3824e4854d54", "patch": "@@ -1,3 +1,8 @@\n+2017-09-15  Yao Qi  <yao.qi@linaro.org>\n+\t    Pedro Alves  <palves@redhat.com>\n+\n+\t* ansidecl.h (DISABLE_COPY_AND_ASSIGN): New macro.\n+\n 2017-09-12  Jiong Wang  <jiong.wang@arm.com>\n \n \t* dwarf2.def (DW_CFA_AARCH64_negate_ra_state): New DW_CFA_DUP."}, {"sha": "450ce35da4b7f504c4a42086a872ffdf15d08d18", "filename": "include/ansidecl.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681f5b7cc8e80ef09f4692fac5bf3824e4854d54/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681f5b7cc8e80ef09f4692fac5bf3824e4854d54/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=681f5b7cc8e80ef09f4692fac5bf3824e4854d54", "patch": "@@ -360,6 +360,32 @@ So instead we use the macro below and test it against specific values.  */\n # define FINAL\n #endif\n \n+/* A macro to disable the copy constructor and assignment operator.\n+   When building with C++11 and above, the methods are explicitly\n+   deleted, causing a compile-time error if something tries to copy.\n+   For C++03, this just declares the methods, causing a link-time\n+   error if the methods end up called (assuming you don't\n+   define them).  For C++03, for best results, place the macro\n+   under the private: access specifier, like this,\n+\n+   class name_lookup\n+   {\n+     private:\n+       DISABLE_COPY_AND_ASSIGN (name_lookup);\n+   };\n+\n+   so that most attempts at copy are caught at compile-time.  */\n+\n+#if __cplusplus >= 201103\n+#define DISABLE_COPY_AND_ASSIGN(TYPE)\t\t\\\n+  TYPE (const TYPE&) = delete;\t\t\t\\\n+  void operator= (const TYPE &) = delete\n+  #else\n+#define DISABLE_COPY_AND_ASSIGN(TYPE)\t\t\\\n+  TYPE (const TYPE&);\t\t\t\t\\\n+  void operator= (const TYPE &)\n+#endif /* __cplusplus >= 201103 */\n+\n #ifdef __cplusplus\n }\n #endif"}]}