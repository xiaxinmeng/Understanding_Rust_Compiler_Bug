{"sha": "1f96a712d15825c10b61db3febb85b7cd4c245dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5NmE3MTJkMTU4MjVjMTBiNjFkYjNmZWJiODViN2NkNGMyNDVkYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-11-19T14:46:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-11-19T14:46:03Z"}, "message": "backtrace.h (backtrace_syminfo_callback): Add symsize argument.\n\n\t* backtrace.h (backtrace_syminfo_callback): Add symsize argument.\n\t* elf.c (elf_syminfo): Pass 0 or sym->size to the callback as\n\tlast argument.\n\t* btest.c (struct symdata): Add size field.\n\t(callback_three): Add symsize argument.  Copy it to the data->size\n\tfield.\n\t(f23): Set symdata.size to 0.\n\t(test5): Likewise.  If sizeof (int) > 1, lookup address of\n\t((uintptr_t) &global) + 1.  Verify symdata.val and symdata.size\n\tvalues.\n\nFrom-SVN: r205028", "tree": {"sha": "a719603a47f4d7b58bb0a1113198349a988a2ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a719603a47f4d7b58bb0a1113198349a988a2ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f96a712d15825c10b61db3febb85b7cd4c245dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f96a712d15825c10b61db3febb85b7cd4c245dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f96a712d15825c10b61db3febb85b7cd4c245dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f96a712d15825c10b61db3febb85b7cd4c245dc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4effef72de27cd0a9b16f9c6190ab7f97e92a5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4effef72de27cd0a9b16f9c6190ab7f97e92a5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4effef72de27cd0a9b16f9c6190ab7f97e92a5c"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "79ac1178f80ece6553a51a0c06e00efa892dad58", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f96a712d15825c10b61db3febb85b7cd4c245dc/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f96a712d15825c10b61db3febb85b7cd4c245dc/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=1f96a712d15825c10b61db3febb85b7cd4c245dc", "patch": "@@ -1,5 +1,16 @@\n 2013-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* backtrace.h (backtrace_syminfo_callback): Add symsize argument.\n+\t* elf.c (elf_syminfo): Pass 0 or sym->size to the callback as\n+\tlast argument.\n+\t* btest.c (struct symdata): Add size field.\n+\t(callback_three): Add symsize argument.  Copy it to the data->size\n+\tfield.\n+\t(f23): Set symdata.size to 0.\n+\t(test5): Likewise.  If sizeof (int) > 1, lookup address of\n+\t((uintptr_t) &global) + 1.  Verify symdata.val and symdata.size\n+\tvalues.\n+\n \t* atomic.c: Include sys/types.h.\n \n 2013-11-18  Ian Lance Taylor  <iant@google.com>"}, {"sha": "33595cf5139f88c003c9f894a55eab3797480522", "filename": "libbacktrace/backtrace.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f96a712d15825c10b61db3febb85b7cd4c245dc/libbacktrace%2Fbacktrace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f96a712d15825c10b61db3febb85b7cd4c245dc/libbacktrace%2Fbacktrace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fbacktrace.h?ref=1f96a712d15825c10b61db3febb85b7cd4c245dc", "patch": "@@ -169,12 +169,13 @@ extern int backtrace_pcinfo (struct backtrace_state *state, uintptr_t pc,\n /* The type of the callback argument to backtrace_syminfo.  DATA and\n    PC are the arguments passed to backtrace_syminfo.  SYMNAME is the\n    name of the symbol for the corresponding code.  SYMVAL is the\n-   value.  SYMNAME will be NULL if no error occurred but the symbol\n-   could not be found.  */\n+   value and SYMSIZE is the size of the symbol.  SYMNAME will be NULL\n+   if no error occurred but the symbol could not be found.  */\n \n typedef void (*backtrace_syminfo_callback) (void *data, uintptr_t pc,\n \t\t\t\t\t    const char *symname,\n-\t\t\t\t\t    uintptr_t symval);\n+\t\t\t\t\t    uintptr_t symval,\n+\t\t\t\t\t    uintptr_t symsize);\n \n /* Given ADDR, an address or program counter in the current program,\n    call the callback information with the symbol name and value"}, {"sha": "22b08e05030be028c69a3bed38644c60d6e4d9c8", "filename": "libbacktrace/btest.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f96a712d15825c10b61db3febb85b7cd4c245dc/libbacktrace%2Fbtest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f96a712d15825c10b61db3febb85b7cd4c245dc/libbacktrace%2Fbtest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fbtest.c?ref=1f96a712d15825c10b61db3febb85b7cd4c245dc", "patch": "@@ -92,7 +92,7 @@ struct sdata\n struct symdata\n {\n   const char *name;\n-  uintptr_t val;\n+  uintptr_t val, size;\n   int failed;\n };\n \n@@ -238,7 +238,8 @@ error_callback_two (void *vdata, const char *msg, int errnum)\n \n static void\n callback_three (void *vdata, uintptr_t pc ATTRIBUTE_UNUSED,\n-\t\tconst char *symname, uintptr_t symval)\n+\t\tconst char *symname, uintptr_t symval,\n+\t\tuintptr_t symsize)\n {\n   struct symdata *data = (struct symdata *) vdata;\n \n@@ -250,6 +251,7 @@ callback_three (void *vdata, uintptr_t pc ATTRIBUTE_UNUSED,\n       assert (data->name != NULL);\n     }\n   data->val = symval;\n+  data->size = symsize;\n }\n \n /* The backtrace_syminfo error callback function.  */\n@@ -458,6 +460,7 @@ f23 (int f1line, int f2line)\n \n \t  symdata.name = NULL;\n \t  symdata.val = 0;\n+\t  symdata.size = 0;\n \t  symdata.failed = 0;\n \n \t  i = backtrace_syminfo (state, addrs[j], callback_three,\n@@ -605,12 +608,17 @@ test5 (void)\n {\n   struct symdata symdata;\n   int i;\n+  uintptr_t addr = (uintptr_t) &global;\n+\n+  if (sizeof (global) > 1)\n+    addr += 1;\n \n   symdata.name = NULL;\n   symdata.val = 0;\n+  symdata.size = 0;\n   symdata.failed = 0;\n \n-  i = backtrace_syminfo (state, (uintptr_t) &global, callback_three,\n+  i = backtrace_syminfo (state, addr, callback_three,\n \t\t\t error_callback_three, &symdata);\n   if (i == 0)\n     {\n@@ -634,6 +642,22 @@ test5 (void)\n \t\t   symdata.name, \"global\");\n \t  symdata.failed = 1;\n \t}\n+      else if (symdata.val != (uintptr_t) &global)\n+\t{\n+\t  fprintf (stderr,\n+\t\t   \"test5: unexpected syminfo value got %lx expected %lx\\n\",\n+\t\t   (unsigned long) symdata.val,\n+\t\t   (unsigned long) (uintptr_t) &global);\n+\t  symdata.failed = 1;\n+\t}\n+      else if (symdata.size != sizeof (global))\n+\t{\n+\t  fprintf (stderr,\n+\t\t   \"test5: unexpected syminfo size got %lx expected %lx\\n\",\n+\t\t   (unsigned long) symdata.size,\n+\t\t   (unsigned long) sizeof (global));\n+\t  symdata.failed = 1;\n+\t}\n     }\n \n   printf (\"%s: backtrace_syminfo variable\\n\","}, {"sha": "3747c03079c59998faa3adc5409a37b7ca7e7805", "filename": "libbacktrace/elf.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f96a712d15825c10b61db3febb85b7cd4c245dc/libbacktrace%2Felf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f96a712d15825c10b61db3febb85b7cd4c245dc/libbacktrace%2Felf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Felf.c?ref=1f96a712d15825c10b61db3febb85b7cd4c245dc", "patch": "@@ -502,9 +502,9 @@ elf_syminfo (struct backtrace_state *state, uintptr_t addr,\n     }\n \n   if (sym == NULL)\n-    callback (data, addr, NULL, 0);\n+    callback (data, addr, NULL, 0, 0);\n   else\n-    callback (data, addr, sym->name, sym->address);\n+    callback (data, addr, sym->name, sym->address, sym->size);\n }\n \n /* Add the backtrace data for one ELF file.  */"}]}