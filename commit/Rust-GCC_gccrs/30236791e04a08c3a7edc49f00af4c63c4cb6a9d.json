{"sha": "30236791e04a08c3a7edc49f00af4c63c4cb6a9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAyMzY3OTFlMDRhMDhjM2E3ZWRjNDlmMDBhZjRjNjNjNGNiNmE5ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-05T17:03:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-05T17:03:05Z"}, "message": "PR libstdc++/58265 add noexcept to basic_string::assign(basic_string&&)\n\n\tPR libstdc++/58265\n\t* include/bits/basic_string.h [!_GLIBCXX_USE_CXX11_ABI]\n\t(basic_string::assign(basic_string&&)): Add conditional noexcept\n\tdepending on the allocator's is_always_equal property (LWG 2063).\n\t* testsuite/21_strings/basic_string/modifiers/assign/char/\n\tmove_assign.cc: Check for non-throwing exception specification.\n\t* testsuite/21_strings/basic_string/modifiers/assign/wchar_t/\n\tmove_assign.cc: Likewise.\n\nFrom-SVN: r262447", "tree": {"sha": "17f335ab5f2cf676bd0884f260dbc0267d65cd90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17f335ab5f2cf676bd0884f260dbc0267d65cd90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30236791e04a08c3a7edc49f00af4c63c4cb6a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30236791e04a08c3a7edc49f00af4c63c4cb6a9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30236791e04a08c3a7edc49f00af4c63c4cb6a9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30236791e04a08c3a7edc49f00af4c63c4cb6a9d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d2293dbfa03ddc5b0308858412ddded4c832a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99d2293dbfa03ddc5b0308858412ddded4c832a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99d2293dbfa03ddc5b0308858412ddded4c832a8"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "c8b4ce4a6298af63c50ce7274497636b14f19d81", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30236791e04a08c3a7edc49f00af4c63c4cb6a9d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30236791e04a08c3a7edc49f00af4c63c4cb6a9d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=30236791e04a08c3a7edc49f00af4c63c4cb6a9d", "patch": "@@ -1,5 +1,14 @@\n 2018-07-05  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/58265\n+\t* include/bits/basic_string.h [!_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string::assign(basic_string&&)): Add conditional noexcept\n+\tdepending on the allocator's is_always_equal property (LWG 2063).\n+\t* testsuite/21_strings/basic_string/modifiers/assign/char/\n+\tmove_assign.cc: Check for non-throwing exception specification.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/wchar_t/\n+\tmove_assign.cc: Likewise.\n+\n \tPR libstdc++/58265\n \t* include/bits/basic_string.h [!_GLIBCXX_USE_CXX11_ABI]\n \t[_GLIBCXX_FULLY_DYNAMIC_STRING==0] (basic_string::basic_string()):"}, {"sha": "2d1b9dc6c298f4ca2bb33f73789836627fa16284", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30236791e04a08c3a7edc49f00af4c63c4cb6a9d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30236791e04a08c3a7edc49f00af4c63c4cb6a9d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=30236791e04a08c3a7edc49f00af4c63c4cb6a9d", "patch": "@@ -725,7 +725,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  The contents of @a str are moved into this string (without copying).\n        *  @a str is a valid, but unspecified string.\n        **/\n-      // PR 58265, this should be noexcept.\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2063. Contradictory requirements for string move assignment\n       basic_string&\n@@ -4275,9 +4274,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  This function sets this string to the exact contents of @a __str.\n        *  @a __str is a valid, but unspecified string.\n        */\n-      // PR 58265, this should be noexcept.\n       basic_string&\n       assign(basic_string&& __str)\n+      noexcept(allocator_traits<_Alloc>::is_always_equal::value)\n       {\n \tthis->swap(__str);\n \treturn *this;"}, {"sha": "7089fea04c21154527244d3cde44f7c8ba6e34c8", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/assign/char/move_assign.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30236791e04a08c3a7edc49f00af4c63c4cb6a9d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30236791e04a08c3a7edc49f00af4c63c4cb6a9d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2Fmove_assign.cc?ref=30236791e04a08c3a7edc49f00af4c63c4cb6a9d", "patch": "@@ -32,6 +32,9 @@ void test01()\n   a.push_back('1');\n   b.assign(std::move(a));\n   VERIFY( b.size() == 1 && b[0] == '1' && a.size() == 0 );\n+\n+  // True for std::allocator because is_always_equal, but not true in general:\n+  static_assert(noexcept(a.assign(std::move(b))), \"lwg 2063\");\n }\n \n int main()"}, {"sha": "8d394602a9f181319aacfbe625894cee3114d361", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/assign/wchar_t/move_assign.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30236791e04a08c3a7edc49f00af4c63c4cb6a9d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30236791e04a08c3a7edc49f00af4c63c4cb6a9d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2Fmove_assign.cc?ref=30236791e04a08c3a7edc49f00af4c63c4cb6a9d", "patch": "@@ -32,6 +32,9 @@ void test01()\n   a.push_back(L'1');\n   b.assign(std::move(a));\n   VERIFY( b.size() == 1 && b[0] == '1' && a.size() == 0 );\n+\n+  // True for std::allocator because is_always_equal, but not true in general:\n+  static_assert(noexcept(a.assign(std::move(b))), \"lwg 2063\");\n }\n \n int main()"}]}