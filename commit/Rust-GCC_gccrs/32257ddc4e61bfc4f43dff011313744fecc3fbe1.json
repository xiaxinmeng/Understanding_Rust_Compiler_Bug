{"sha": "32257ddc4e61bfc4f43dff011313744fecc3fbe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIyNTdkZGM0ZTYxYmZjNGY0M2RmZjAxMTMxMzc0NGZlY2MzZmJlMQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-04-19T18:23:23Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-04-19T18:23:23Z"}, "message": "sparc.h (GENERAL_OR_I64, [...]): Remove.\n\n\t* config/sparc/sparc.h (GENERAL_OR_I64, REGISTER_MOVE_COST): Remove.\n\t* config/sparc/sparc.c (TARGET_REGISTER_MOVE_COST): Define.\n\t(general_or_i64_p, sparc_register_move_cost): New function.\n\nFrom-SVN: r172732", "tree": {"sha": "050498ca93d8e4ae8565a47bb68e5f5f8f611a79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/050498ca93d8e4ae8565a47bb68e5f5f8f611a79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32257ddc4e61bfc4f43dff011313744fecc3fbe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32257ddc4e61bfc4f43dff011313744fecc3fbe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32257ddc4e61bfc4f43dff011313744fecc3fbe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32257ddc4e61bfc4f43dff011313744fecc3fbe1/comments", "author": null, "committer": null, "parents": [{"sha": "5ad7db5fa38f86e095645296a5c1832fa088aa84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad7db5fa38f86e095645296a5c1832fa088aa84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ad7db5fa38f86e095645296a5c1832fa088aa84"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "c01f2ca8f6f99398e2d2f5a2d2fdbbe1eb141e75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32257ddc4e61bfc4f43dff011313744fecc3fbe1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32257ddc4e61bfc4f43dff011313744fecc3fbe1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32257ddc4e61bfc4f43dff011313744fecc3fbe1", "patch": "@@ -1,3 +1,9 @@\n+2011-04-19  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/sparc/sparc.h (GENERAL_OR_I64, REGISTER_MOVE_COST): Remove.\n+\t* config/sparc/sparc.c (TARGET_REGISTER_MOVE_COST): Define.\n+\t(general_or_i64_p, sparc_register_move_cost): New function.\n+\n 2011-04-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* doc/install.texi (Configuration, --enable-threads): Remove mach."}, {"sha": "03b5e668f7b2f7c7f19eebe80574fe83f6807e8b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32257ddc4e61bfc4f43dff011313744fecc3fbe1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32257ddc4e61bfc4f43dff011313744fecc3fbe1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=32257ddc4e61bfc4f43dff011313744fecc3fbe1", "patch": "@@ -422,6 +422,8 @@ static rtx sparc_tls_get_addr (void);\n static rtx sparc_tls_got (void);\n static const char *get_some_local_dynamic_name (void);\n static int get_some_local_dynamic_name_1 (rtx *, void *);\n+static int sparc_register_move_cost (enum machine_mode,\n+\t\t\t\t     reg_class_t, reg_class_t);\n static bool sparc_rtx_costs (rtx, int, int, int *, bool);\n static rtx sparc_function_value (const_tree, const_tree, bool);\n static rtx sparc_libcall_value (enum machine_mode, const_rtx);\n@@ -560,6 +562,8 @@ static const struct default_options sparc_option_optimization_table[] =\n #define TARGET_RTX_COSTS sparc_rtx_costs\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST sparc_register_move_cost\n \n #undef TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE sparc_promote_function_mode\n@@ -9124,6 +9128,37 @@ sparc_rtx_costs (rtx x, int code, int outer_code, int *total,\n     }\n }\n \n+/* Return true if CLASS is either GENERAL_REGS or I64_REGS.  */\n+\n+static inline bool\n+general_or_i64_p (reg_class_t rclass)\n+{\n+  return (rclass == GENERAL_REGS || rclass == I64_REGS);\n+}\n+\n+/* Implement TARGET_REGISTER_MOVE_COST.  */\n+\n+static int\n+sparc_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t  reg_class_t from, reg_class_t to)\n+{\n+  if ((FP_REG_CLASS_P (from) && general_or_i64_p (to))\n+      || (general_or_i64_p (from) && FP_REG_CLASS_P (to))\n+      || from == FPCC_REGS\n+      || to == FPCC_REGS)  \n+    {\n+      if (sparc_cpu == PROCESSOR_ULTRASPARC\n+\t  || sparc_cpu == PROCESSOR_ULTRASPARC3\n+\t  || sparc_cpu == PROCESSOR_NIAGARA\n+\t  || sparc_cpu == PROCESSOR_NIAGARA2)\n+\treturn 12;\n+\n+      return 6;\n+    }\n+\n+  return 2;\n+}\n+\n /* Emit the sequence of insns SEQ while preserving the registers REG and REG2.\n    This is achieved by means of a manual dynamic stack space allocation in\n    the current frame.  We make the assumption that SEQ doesn't contain any"}, {"sha": "47476509041820fa232676a604678989920ab642", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32257ddc4e61bfc4f43dff011313744fecc3fbe1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32257ddc4e61bfc4f43dff011313744fecc3fbe1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=32257ddc4e61bfc4f43dff011313744fecc3fbe1", "patch": "@@ -1715,18 +1715,6 @@ do {\t\t\t\t\t\t\t\t\t   \\\n #define DITF_CONVERSION_LIBFUNCS\t0\n #define SUN_INTEGER_MULTIPLY_64 \t0\n \n-/* Compute extra cost of moving data between one register class\n-   and another.  */\n-#define GENERAL_OR_I64(C) ((C) == GENERAL_REGS || (C) == I64_REGS)\n-#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\t\\\n-  (((FP_REG_CLASS_P (CLASS1) && GENERAL_OR_I64 (CLASS2)) \\\n-    || (GENERAL_OR_I64 (CLASS1) && FP_REG_CLASS_P (CLASS2)) \\\n-    || (CLASS1) == FPCC_REGS || (CLASS2) == FPCC_REGS)\t\t\\\n-   ? ((sparc_cpu == PROCESSOR_ULTRASPARC \\\n-       || sparc_cpu == PROCESSOR_ULTRASPARC3 \\\n-       || sparc_cpu == PROCESSOR_NIAGARA \\\n-       || sparc_cpu == PROCESSOR_NIAGARA2) ? 12 : 6) : 2)\n-\n /* Provide the cost of a branch.  For pre-v9 processors we use\n    a value of 3 to take into account the potential annulling of\n    the delay slot (which ends up being a bubble in the pipeline slot)"}]}