{"sha": "96bdf9b4035f9628ee214b9d773c313b065e36bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZiZGY5YjQwMzVmOTYyOGVlMjE0YjlkNzczYzMxM2IwNjVlMzZiZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-01-08T01:37:00Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-01-08T01:37:00Z"}, "message": "Makefile.in: Regenerate.\n\n\n\t* Makefile.in: Regenerate.\n\t* Makefile.def (gcc host module) and soft dependency on lto-plugin\n\tand configure dependency on lto-plugin configure.\n\t(lto-plugin module): Remove dependency on GCC; add dependency on\n\tliniberty.\n\n\t* doc/invoke.texi: (-flto, -fuse-linker-plugin): Update defaults\n\tand no longer claim that gold is required for linker plugin.\n\t* configure: Regenerate.\n\t* gcc.c (PLUGIN_COND): New macro.\n\t(LINK_COMMAND_SPEC): Use it.\n\t(main): Default to plugin enabled with HAVE_LTO_PLUGIN is set.\n\t* config.in (HAVE_LTO_PLUGIN): New.\n\t* configure.ac (--with-lto-plugin): New parameter; autodetect\n\tHAVE_LTO_PLUGIN.\n\nFrom-SVN: r168593", "tree": {"sha": "6f419805e71a133ecdcbe5137da91c38f6dab263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f419805e71a133ecdcbe5137da91c38f6dab263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96bdf9b4035f9628ee214b9d773c313b065e36bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96bdf9b4035f9628ee214b9d773c313b065e36bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96bdf9b4035f9628ee214b9d773c313b065e36bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96bdf9b4035f9628ee214b9d773c313b065e36bf/comments", "author": null, "committer": null, "parents": [{"sha": "f35cafc9ff3898a2205a2089f315f19640da1041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35cafc9ff3898a2205a2089f315f19640da1041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f35cafc9ff3898a2205a2089f315f19640da1041"}], "stats": {"total": 158, "additions": 132, "deletions": 26}, "files": [{"sha": "09a03f7ca2e4e24b22ba6b0b893f2914fe4fdfab", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bdf9b4035f9628ee214b9d773c313b065e36bf/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bdf9b4035f9628ee214b9d773c313b065e36bf/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=96bdf9b4035f9628ee214b9d773c313b065e36bf", "patch": "@@ -1,3 +1,11 @@\n+2011-01-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* Makefile.in: Regenerate.\n+\t* Makefile.def (gcc host module) and soft dependency on lto-plugin\n+\tand configure dependency on lto-plugin configure.\n+\t(lto-plugin module): Remove dependency on GCC; add dependency on\n+\tliniberty.\n+\n 2011-01-07  William Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "c563020bdda361307f1b32974d66fb781fc31dbb", "filename": "Makefile.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bdf9b4035f9628ee214b9d773c313b065e36bf/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bdf9b4035f9628ee214b9d773c313b065e36bf/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=96bdf9b4035f9628ee214b9d773c313b065e36bf", "patch": "@@ -321,6 +321,7 @@ dependencies = { module=all-build-fixincludes; on=all-build-libiberty; };\n \n // Host modules specific to gcc.\n dependencies = { module=configure-gcc; on=configure-intl; };\n+dependencies = { module=configure-gcc; on=configure-lto-plugin; };\n dependencies = { module=configure-gcc; on=all-binutils; };\n dependencies = { module=configure-gcc; on=all-gas; };\n dependencies = { module=configure-gcc; on=all-ld; };\n@@ -344,6 +345,7 @@ dependencies = { module=all-gcc; on=all-libcpp; hard=true; };\n dependencies = { module=all-gcc; on=all-libdecnumber; hard=true; };\n dependencies = { module=all-gcc; on=all-libiberty; };\n dependencies = { module=all-gcc; on=all-fixincludes; };\n+dependencies = { module=all-gcc; on=all-lto-plugin; };\n dependencies = { module=info-gcc; on=all-build-libiberty; };\n dependencies = { module=dvi-gcc; on=all-build-libiberty; };\n dependencies = { module=pdf-gcc; on=all-build-libiberty; };\n@@ -360,7 +362,7 @@ dependencies = { module=all-fixincludes; on=all-libiberty; };\n \n dependencies = { module=all-gnattools; on=all-target-libada; };\n \n-dependencies = { module=all-lto-plugin; on=all-gcc; };\n+dependencies = { module=all-lto-plugin; on=all-libiberty; };\n \n dependencies = { module=configure-mpfr; on=all-gmp; };\n dependencies = { module=configure-mpc; on=all-mpfr; };"}, {"sha": "3058344372b93851e4c3c4f4ee1a9163484400b9", "filename": "Makefile.in", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bdf9b4035f9628ee214b9d773c313b065e36bf/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bdf9b4035f9628ee214b9d773c313b065e36bf/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=96bdf9b4035f9628ee214b9d773c313b065e36bf", "patch": "@@ -60260,6 +60260,14 @@ configure-stage3-gcc: maybe-configure-stage3-intl\n configure-stage4-gcc: maybe-configure-stage4-intl\n configure-stageprofile-gcc: maybe-configure-stageprofile-intl\n configure-stagefeedback-gcc: maybe-configure-stagefeedback-intl\n+configure-gcc: maybe-configure-lto-plugin\n+\n+configure-stage1-gcc: maybe-configure-stage1-lto-plugin\n+configure-stage2-gcc: maybe-configure-stage2-lto-plugin\n+configure-stage3-gcc: maybe-configure-stage3-lto-plugin\n+configure-stage4-gcc: maybe-configure-stage4-lto-plugin\n+configure-stageprofile-gcc: maybe-configure-stageprofile-lto-plugin\n+configure-stagefeedback-gcc: maybe-configure-stagefeedback-lto-plugin\n configure-gcc: maybe-all-binutils\n \n configure-stage1-gcc: maybe-all-stage1-binutils\n@@ -60437,6 +60445,14 @@ all-stage4-gcc: maybe-all-stage4-libiberty\n all-stageprofile-gcc: maybe-all-stageprofile-libiberty\n all-stagefeedback-gcc: maybe-all-stagefeedback-libiberty\n all-gcc: maybe-all-fixincludes\n+all-gcc: maybe-all-lto-plugin\n+\n+all-stage1-gcc: maybe-all-stage1-lto-plugin\n+all-stage2-gcc: maybe-all-stage2-lto-plugin\n+all-stage3-gcc: maybe-all-stage3-lto-plugin\n+all-stage4-gcc: maybe-all-stage4-lto-plugin\n+all-stageprofile-gcc: maybe-all-stageprofile-lto-plugin\n+all-stagefeedback-gcc: maybe-all-stagefeedback-lto-plugin\n info-gcc: maybe-all-build-libiberty\n \n info-stage1-gcc: maybe-all-build-libiberty\n@@ -60505,14 +60521,14 @@ all-stageprofile-libcpp: maybe-all-stageprofile-intl\n all-stagefeedback-libcpp: maybe-all-stagefeedback-intl\n all-fixincludes: maybe-all-libiberty\n all-gnattools: maybe-all-target-libada\n-all-lto-plugin: maybe-all-gcc\n-\n-all-stage1-lto-plugin: maybe-all-stage1-gcc\n-all-stage2-lto-plugin: maybe-all-stage2-gcc\n-all-stage3-lto-plugin: maybe-all-stage3-gcc\n-all-stage4-lto-plugin: maybe-all-stage4-gcc\n-all-stageprofile-lto-plugin: maybe-all-stageprofile-gcc\n-all-stagefeedback-lto-plugin: maybe-all-stagefeedback-gcc\n+all-lto-plugin: maybe-all-libiberty\n+\n+all-stage1-lto-plugin: maybe-all-stage1-libiberty\n+all-stage2-lto-plugin: maybe-all-stage2-libiberty\n+all-stage3-lto-plugin: maybe-all-stage3-libiberty\n+all-stage4-lto-plugin: maybe-all-stage4-libiberty\n+all-stageprofile-lto-plugin: maybe-all-stageprofile-libiberty\n+all-stagefeedback-lto-plugin: maybe-all-stagefeedback-libiberty\n configure-mpfr: maybe-all-gmp\n \n configure-stage1-mpfr: maybe-all-stage1-gmp"}, {"sha": "24a4367bdc7ef736e8965b2f1fd02904ae66f673", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96bdf9b4035f9628ee214b9d773c313b065e36bf", "patch": "@@ -1,3 +1,15 @@\n+2011-01-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* doc/invoke.texi: (-flto, -fuse-linker-plugin): Update defaults\n+\tand no longer claim that gold is required for linker plugin.\n+\t* configure: Regenerate.\n+\t* gcc.c (PLUGIN_COND): New macro.\n+\t(LINK_COMMAND_SPEC): Use it.\n+\t(main): Default to plugin enabled with HAVE_LTO_PLUGIN is set.\n+\t* config.in (HAVE_LTO_PLUGIN): New.\n+\t* configure.ac (--with-lto-plugin): New parameter; autodetect\n+\tHAVE_LTO_PLUGIN.\n+\n 2011-01-07  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/46367"}, {"sha": "9df41a1635cf08396bb41479825fc0a6fd21d143", "filename": "gcc/config.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=96bdf9b4035f9628ee214b9d773c313b065e36bf", "patch": "@@ -1142,6 +1142,10 @@\n #undef HAVE_LDFCN_H\n #endif\n \n+/* Define if your linker supports plugin. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_LTO_PLUGIN\n+#endif\n \n /* Define if your linker supports --as-needed and --no-as-needed options. */\n #ifndef USED_FOR_TARGET"}, {"sha": "46c52854dfc4d9e73502f565e9882e147b4ac606", "filename": "gcc/configure", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=96bdf9b4035f9628ee214b9d773c313b065e36bf", "patch": "@@ -23093,6 +23093,29 @@ $as_echo \"#define HAVE_LD_DEMANGLE 1\" >>confdefs.h\n $as_echo \"$gcc_cv_ld_demangle\" >&6; }\n fi\n \n+if test -f ../lto-plugin/Makefile ; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker plugin support\" >&5\n+$as_echo_n \"checking linker plugin support... \" >&6; }\n+  gcc_cv_lto_plugin=no\n+  if test $in_tree_ld = yes -a x\"$ORIGINAL_PLUGIN_LD_FOR_TARGET=\" = x\"$gcc_cv_ld\"; then\n+    if test x\"$ld_is_gold\" = xyes; then\n+      gcc_cv_lto_plugin=yes\n+    elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 21 -o \"$gcc_cv_gld_major_version\" -gt 2; then \\\n+      gcc_cv_lto_plugin=yes\n+    fi\n+  # Check if the linker supports --plugin-opt option\n+  elif $ORIGINAL_PLUGIN_LD_FOR_TARGET --help 2>/dev/null | grep plugin-opt > /dev/null; then\n+    gcc_cv_lto_plugin=yes\n+  fi\n+  if test x\"$gcc_cv_lto_plugin\" = xyes; then\n+\n+$as_echo \"#define HAVE_LTO_PLUGIN 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_lto_plugin\" >&5\n+$as_echo \"$gcc_cv_lto_plugin\" >&6; }\n+fi\n+\n case \"$target\" in\n   # All TARGET_ABI_OSF targets.\n   alpha*-*-osf* | alpha*-*-linux* | alpha*-*-*bsd*)"}, {"sha": "776c71fa3c3a214a5c79ae7536ae4303a5a248e7", "filename": "gcc/configure.ac", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=96bdf9b4035f9628ee214b9d773c313b065e36bf", "patch": "@@ -3149,6 +3149,26 @@ if test x\"$demangler_in_ld\" = xyes; then\n   AC_MSG_RESULT($gcc_cv_ld_demangle)\n fi\n \n+AC_MSG_CHECKING(linker plugin support)\n+gcc_cv_lto_plugin=no\n+if test -f ../lto-plugin/Makefile ; then\n+  if test $in_tree_ld = yes -a x\"$ORIGINAL_PLUGIN_LD_FOR_TARGET=\" = x\"$gcc_cv_ld\"; then\n+    if test x\"$ld_is_gold\" = xyes; then\n+      gcc_cv_lto_plugin=yes\n+    elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 21 -o \"$gcc_cv_gld_major_version\" -gt 2; then \\\n+      gcc_cv_lto_plugin=yes\n+    fi\n+  # Check if the linker supports --plugin-opt option\n+  elif $ORIGINAL_PLUGIN_LD_FOR_TARGET --help 2>/dev/null | grep plugin-opt > /dev/null; then\n+    gcc_cv_lto_plugin=yes\n+  fi\n+fi\n+if test x\"$gcc_cv_lto_plugin\" = xyes; then\n+  AC_DEFINE(HAVE_LTO_PLUGIN, 1,\n+[Define if your linker supports plugin.])\n+fi\n+AC_MSG_RESULT($gcc_cv_lto_plugin)\n+\n case \"$target\" in\n   # All TARGET_ABI_OSF targets.\n   alpha*-*-osf* | alpha*-*-linux* | alpha*-*-*bsd*)"}, {"sha": "800c592d07d9c442b40d977988b6241a3462e2e2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=96bdf9b4035f9628ee214b9d773c313b065e36bf", "patch": "@@ -7587,23 +7587,21 @@ types in separate translation units to be linked together (undefined\n behavior according to ISO C99 6.2.7), a non-fatal diagnostic may be\n issued.  The behavior is still undefined at runtime.\n \n-If object files containing GIMPLE bytecode are stored in a library\n-archive, say @file{libfoo.a}, it is possible to extract and use them\n-in an LTO link if you are using @command{gold} as the linker (which,\n-in turn requires GCC to be configured with @option{--enable-gold}).\n-To enable this feature, use the flag @option{-fuse-linker-plugin} at\n-link-time:\n+If object files containing GIMPLE bytecode are stored in a library archive, say\n+@file{libfoo.a}, it is possible to extract and use them in an LTO link if you\n+are using a linker with linker plugin support.  To enable this feature, use\n+the flag @option{-fuse-linker-plugin} at link-time:\n \n @smallexample\n gcc -o myprog -O2 -flto -fuse-linker-plugin a.o b.o -lfoo\n @end smallexample\n \n-With the linker plugin enabled, @command{gold} will extract the needed\n+With the linker plugin enabled, the linker will extract the needed\n GIMPLE files from @file{libfoo.a} and pass them on to the running GCC\n to make them part of the aggregated GIMPLE image to be optimized.\n \n-If you are not using @command{gold} and/or do not specify\n-@option{-fuse-linker-plugin} then the objects inside @file{libfoo.a}\n+If you are not using a linker with linker plugin support and/or do not \n+enable linker plugin then the objects inside @file{libfoo.a}\n will be extracted and linked as usual, but they will not participate\n in the LTO optimization process.\n \n@@ -7667,13 +7665,20 @@ files in LTO mode (via @option{-flto}).\n Disabled by default.\n \n @item -fuse-linker-plugin\n-Enables the extraction of objects with GIMPLE bytecode information\n-from library archives.  This option relies on features available only\n-in @command{gold}, so to use this you must configure GCC with\n-@option{--enable-gold}.  See @option{-flto} for a description on the\n-effect of this flag and how to use it.\n-\n-Disabled by default.\n+Enables the use of linker plugin during link time optimization.  This option\n+relies on the linker plugin support in linker that is available in @code{gold}\n+or in GNU ld 2.21.51 or newer..\n+\n+This option enables the extraction of object files with GIMPLE bytecode out of\n+library archives. This improves the quality of optimization by exposing more\n+code the the link time optimizer.  This information specify what symbols \n+can be accessed externally (by non-LTO object or during dynamic linking).\n+Resulting code quality improvements on binaries (and shared libaries that do\n+use hidden visibility) is similar to @code{-fwhole-program}.  See\n+@option{-flto} for a description on the effect of this flag and how to use it.\n+\n+Enabled by default when LTO support in GCC is enabled and GCC was compiled\n+with linker supporting plugins (GNU ld or @code{gold}).\n \n @item -fcprop-registers\n @opindex fcprop-registers"}, {"sha": "9532d7efd8bbd488a8b5320220d5d93a8161cce7", "filename": "gcc/gcc.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96bdf9b4035f9628ee214b9d773c313b065e36bf/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=96bdf9b4035f9628ee214b9d773c313b065e36bf", "patch": "@@ -621,6 +621,13 @@ proper position among the other output files.  */\n # endif\n #endif\n \n+/* Conditional to test whether plugin is used or not.  */\n+#ifdef HAVE_LTO_PLUGIN\n+#define PLUGIN_COND \"!fno-use-linker-plugin\"\n+#else\n+#define PLUGIN_COND \"fuse-linker-plugin\"\n+#endif\n+\n \n /* -u* was put back because both BSD and SysV seem to support it.  */\n /* %{static:} simply prevents an error message if the target machine\n@@ -634,7 +641,7 @@ proper position among the other output files.  */\n #define LINK_COMMAND_SPEC \"\\\n %{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n     %(linker) \\\n-    %{fuse-linker-plugin: \\\n+    %{\"PLUGIN_COND\": \\\n     -plugin %(linker_plugin_file) \\\n     -plugin-opt=%(lto_wrapper) \\\n     -plugin-opt=-fresolution=%u.res \\\n@@ -6779,7 +6786,11 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n   if (num_linker_inputs > 0 && !seen_error () && print_subprocess_help < 2)\n     {\n       int tmp = execution_count;\n+#ifdef HAVE_LTO_PLUGIN\n+      const char *fno_use_linker_plugin = \"fno-use-linker-plugin\";\n+#else\n       const char *fuse_linker_plugin = \"fuse-linker-plugin\";\n+#endif\n \n       /* We'll use ld if we can't find collect2.  */\n       if (! strcmp (linker_name_spec, \"collect2\"))\n@@ -6789,8 +6800,13 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t    linker_name_spec = \"ld\";\n \t}\n \n+#ifdef HAVE_LTO_PLUGIN\n+      if (!switch_matches (fno_use_linker_plugin,\n+\t\t\t   fno_use_linker_plugin + strlen (fno_use_linker_plugin), 0))\n+#else\n       if (switch_matches (fuse_linker_plugin,\n \t\t\t  fuse_linker_plugin + strlen (fuse_linker_plugin), 0))\n+#endif\n \t{\n \t  linker_plugin_file_spec = find_a_file (&exec_prefixes,\n \t\t\t\t\t\t LTOPLUGINSONAME, R_OK,"}]}