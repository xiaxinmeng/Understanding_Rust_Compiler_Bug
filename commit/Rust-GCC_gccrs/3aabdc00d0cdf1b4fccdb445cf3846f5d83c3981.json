{"sha": "3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FhYmRjMDBkMGNkZjFiNGZjY2RiNDQ1Y2YzODQ2ZjVkODNjMzk4MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-01-15T11:55:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-01-15T11:55:37Z"}, "message": "expr.c (expand_expr_real_1): Use the expression to set the memory attributes in all cases but clear MEM_EXPR...\n\n\t* expr.c (expand_expr_real_1) <normal_inner_ref>: Use the expression to\n\tset the memory attributes in all cases but clear MEM_EXPR if need be.\n\nFrom-SVN: r219648", "tree": {"sha": "903d2ee38e433bf9d9223bc1d41f49de5d88cf89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/903d2ee38e433bf9d9223bc1d41f49de5d88cf89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981/comments", "author": null, "committer": null, "parents": [{"sha": "04d8b4dcbf9f39a794614845f792f52508f19e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d8b4dcbf9f39a794614845f792f52508f19e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d8b4dcbf9f39a794614845f792f52508f19e7f"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "ad0ce7f94eee4700a47bb22d55af544d53f223b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981", "patch": "@@ -1,3 +1,8 @@\n+2015-01-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.c (expand_expr_real_1) <normal_inner_ref>: Use the expression to\n+\tset the memory attributes in all cases but clear MEM_EXPR if need be.\n+\n 2015-01-15  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/64434"}, {"sha": "eb4bb9b8fee8bf4b191e049ef2455386c438a629", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981", "patch": "@@ -10137,7 +10137,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \ttree tem = get_inner_reference (exp, &bitsize, &bitpos, &offset,\n \t\t\t\t\t&mode1, &unsignedp, &volatilep, true);\n \trtx orig_op0, memloc;\n-\tbool mem_attrs_from_type = false;\n+\tbool clear_mem_expr = false;\n \n \t/* If we got back the original object, something is wrong.  Perhaps\n \t   we are evaluating an expression too early.  In any event, don't\n@@ -10233,7 +10233,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t    memloc = assign_temp (TREE_TYPE (tem), 1, 1);\n \t    emit_move_insn (memloc, op0);\n \t    op0 = memloc;\n-\t    mem_attrs_from_type = true;\n+\t    clear_mem_expr = true;\n \t  }\n \n \tif (offset)\n@@ -10417,17 +10417,17 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \tif (op0 == orig_op0)\n \t  op0 = copy_rtx (op0);\n \n-\t/* If op0 is a temporary because of forcing to memory, pass only the\n-\t   type to set_mem_attributes so that the original expression is never\n-\t   marked as ADDRESSABLE through MEM_EXPR of the temporary.  */\n-\tif (mem_attrs_from_type)\n-\t  set_mem_attributes (op0, type, 0);\n-\telse\n-\t  set_mem_attributes (op0, exp, 0);\n+\tset_mem_attributes (op0, exp, 0);\n \n \tif (REG_P (XEXP (op0, 0)))\n \t  mark_reg_pointer (XEXP (op0, 0), MEM_ALIGN (op0));\n \n+\t/* If op0 is a temporary because the original expressions was forced\n+\t   to memory, clear MEM_EXPR so that the original expression cannot\n+\t   be marked as addressable through MEM_EXPR of the temporary.  */\n+\tif (clear_mem_expr)\n+\t  set_mem_expr (op0, NULL_TREE);\n+\n \tMEM_VOLATILE_P (op0) |= volatilep;\n \tif (mode == mode1 || mode1 == BLKmode || mode1 == tmode\n \t    || modifier == EXPAND_CONST_ADDRESS"}, {"sha": "bd1e6c54633da3b6d8d3c050e2178bb792da58b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981", "patch": "@@ -1,3 +1,8 @@\n+2015-01-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.c (expand_expr_real_1) <normal_inner_ref>: Use the expression to\n+\tset the memory attributes in all cases but clear MEM_EXPR if need be.\n+\n 2015-01-15  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/64415"}, {"sha": "cfe44eb1e657e08803a05c0a02b36fcf8dc83da1", "filename": "gcc/testsuite/gnat.dg/opt47.adb", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981/gcc%2Ftestsuite%2Fgnat.dg%2Fopt47.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981/gcc%2Ftestsuite%2Fgnat.dg%2Fopt47.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt47.adb?ref=3aabdc00d0cdf1b4fccdb445cf3846f5d83c3981", "patch": "@@ -0,0 +1,31 @@\n+-- { dg-do run { target i?86-*-* x86_64-*-* alpha*-*-* ia64-*-* } }\n+-- { dg-options \"-O2\" }\n+\n+with Ada.Characters.Handling;   use Ada.Characters.Handling;\n+with Interfaces;                use Interfaces;\n+with Ada.Unchecked_Conversion;\n+\n+procedure Opt47 is\n+\n+   subtype String4 is String (1 .. 4);\n+   function To_String4 is new Ada.Unchecked_Conversion (Unsigned_32, String4);\n+   type Arr is array (Integer range <>) of Unsigned_32;\n+   Leaf : Arr (1 .. 4) := (1349478766, 1948272498, 1702436946, 1702061409);\n+   Value : Unsigned_32;\n+   Result : String (1 .. 32);\n+   Last : Integer := 0;\n+\n+begin\n+   for I in 1 .. 4 loop\n+      Value := Leaf (I);\n+      for J in reverse String4'Range loop\n+         if Is_Graphic (To_String4 (Value)(J)) then\n+            Last := Last + 1;\n+            Result (Last) := To_String4 (Value)(J);\n+         end if;\n+      end loop;\n+   end loop;\n+   if Result (1) /= 'P' then\n+      raise Program_Error;\n+   end if;\n+end;"}]}