{"sha": "b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5", "node_id": "C_kwDOANBUbNoAKGI3ZThmYjVlNDgyNzlmZmE1ZjQyNGUzZGQwYmIzZGZjYmU2OWY1ZDU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-13T15:16:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:36:55Z"}, "message": "libstdc++: Add container adaptor constructors taking iterators (P1425R4)\n\nThis adds a feature that was recently added to the C++23 working draft.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_queue.h\n\t(__cpp_lib_adaptor_iterator_pair_constructor): Define for C++23, as\n\tper P1425R4.\n\t(queue(InputIterator, InputIterator)): Likewise.\n\t(queue(InputIterator, InputIterator, const Alloc&)): Likewise.\n\t* include/bits/stl_stack.h\n\t(__cpp_lib_adaptor_iterator_pair_constructor): Likewise.\n\t(stack(InputIterator, InputIterator)): Likewise.\n\t(stack(InputIterator, InputIterator, const Alloc&)): Likewise.\n\t* include/std/version (__cpp_lib_adaptor_iterator_pair_constructor):\n\tDefine.\n\t* testsuite/23_containers/queue/cons_from_iters.cc: New test.\n\t* testsuite/23_containers/stack/cons_from_iters.cc: New test.", "tree": {"sha": "0f0453d96969b192623248f0bd9ab17d70658710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f0453d96969b192623248f0bd9ab17d70658710"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ccffeb56b92041991aba923545532087e1977f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccffeb56b92041991aba923545532087e1977f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ccffeb56b92041991aba923545532087e1977f5"}], "stats": {"total": 199, "additions": 199, "deletions": 0}, "files": [{"sha": "ccd1122f848d642391ce86b3ed5320fdd204e814", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5", "patch": "@@ -194,6 +194,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n \tqueue(queue&& __q, const _Alloc& __a)\n \t: c(std::move(__q.c), __a) { }\n+\n+#if __cplusplus > 202002L\n+#define __cpp_lib_adaptor_iterator_pair_constructor 202100L\n+\n+      template<typename _InputIterator,\n+\t       typename = _RequireInputIter<_InputIterator>>\n+\tqueue(_InputIterator __first, _InputIterator __last)\n+\t: c(__first, __last) { }\n+\n+      template<typename _InputIterator, typename _Alloc,\n+\t       typename = _RequireInputIter<_InputIterator>,\n+\t       typename = _Uses<_Alloc>>\n+\tqueue(_InputIterator __first, _InputIterator __last, const _Alloc& __a)\n+\t: c(__first, __last, __a) { }\n+#endif\n #endif\n \n       /**\n@@ -331,6 +346,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename = _RequireAllocator<_Allocator>>\n     queue(_Container, _Allocator)\n     -> queue<typename _Container::value_type, _Container>;\n+\n+#ifdef __cpp_lib_adaptor_iterator_pair_constructor\n+  template<typename _InputIterator,\n+\t   typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename = _RequireInputIter<_InputIterator>>\n+    queue(_InputIterator, _InputIterator) -> queue<_ValT>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    queue(_InputIterator, _InputIterator, _Allocator)\n+    -> queue<_ValT, deque<_ValT, _Allocator>>;\n+#endif\n #endif\n \n   /**"}, {"sha": "af234d6899c238dd89547b6001d5ef8605d91501", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5", "patch": "@@ -170,6 +170,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       stack(_Sequence&& __c)\n       : c(std::move(__c)) { }\n \n+#if __cplusplus > 202002L\n+#define __cpp_lib_adaptor_iterator_pair_constructor 202100L\n+\n+      template<typename _InputIterator,\n+\t       typename = _RequireInputIter<_InputIterator>>\n+\tstack(_InputIterator __first, _InputIterator __last)\n+\t: c(__first, __last) { }\n+#endif\n+\n+\n       template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n \texplicit\n \tstack(const _Alloc& __a)\n@@ -190,6 +200,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc, typename _Requires = _Uses<_Alloc>>\n \tstack(stack&& __q, const _Alloc& __a)\n \t: c(std::move(__q.c), __a) { }\n+\n+#if __cplusplus > 202002L\n+      template<typename _InputIterator, typename _Alloc,\n+\t       typename = _RequireInputIter<_InputIterator>,\n+\t       typename = _Uses<_Alloc>>\n+\tstack(_InputIterator __first, _InputIterator __last, const _Alloc& __a)\n+\t: c(__first, __last, __a) { }\n+#endif\n #endif\n \n       /**\n@@ -303,6 +321,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename = _RequireAllocator<_Allocator>>\n     stack(_Container, _Allocator)\n     -> stack<typename _Container::value_type, _Container>;\n+\n+#ifdef __cpp_lib_adaptor_iterator_pair_constructor\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename = _RequireInputIter<_InputIterator>>\n+    stack(_InputIterator, _InputIterator) -> stack<_ValT>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename _ValT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    stack(_InputIterator, _InputIterator, _Allocator)\n+    -> stack<_ValT, deque<_ValT, _Allocator>>;\n+#endif\n #endif\n \n   /**"}, {"sha": "66b3d1704b78101fa8a47c14396dfa0856e5f215", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5", "patch": "@@ -281,6 +281,7 @@\n \n #if __cplusplus > 202002L\n // c++2b\n+#define __cpp_lib_adaptor_iterator_pair_constructor 202100L\n #define __cpp_lib_invoke_r 202106L\n #define __cpp_lib_is_scoped_enum 202011L\n #define __cpp_lib_string_contains 202011L"}, {"sha": "de0fc310c241c5d288ac20c32800d9a3ecb2c4f1", "filename": "libstdc++-v3/testsuite/23_containers/queue/cons_from_iters.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fcons_from_iters.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fcons_from_iters.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fcons_from_iters.cc?ref=b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <queue>\n+\n+#ifndef __cpp_lib_adaptor_iterator_pair_constructor\n+#error Feature test macro for iterator pair constructors is missing in <queue>\n+#elif __cpp_lib_adaptor_iterator_pair_constructor != 202100L\n+#error Feature test macro for iterator pair constructors has wrong value in <queue>\n+#endif\n+\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void\n+test_p1425r4()\n+{\n+  const int vals[] = { 5, 4, 3, 2, 1, 9 };\n+\n+  std::queue<int> q(std::begin(vals), std::end(vals));\n+  VERIFY( q.size() == std::size(vals) );\n+  VERIFY( q.front() == 5 );\n+  VERIFY( q.back() == 9 );\n+\n+  using Alloc = __gnu_test::uneq_allocator<int>;\n+\n+  struct Queue : std::queue<int, std::deque<int, Alloc>>\n+  {\n+    using queue::queue;\n+\n+    Alloc get_allocator() const { return c.get_allocator(); }\n+  };\n+\n+  Alloc a0, a1(1);\n+  Queue q0(std::next(vals), std::end(vals));\n+  VERIFY( q0.size() == std::size(vals) - 1 );\n+  VERIFY( q0.front() == 4 );\n+  VERIFY( q0.back() == 9 );\n+  VERIFY( q0.get_allocator() == a0 );\n+\n+  Queue q1(std::next(vals, 2), std::end(vals), a1);\n+  VERIFY( q1.size() == std::size(vals) - 2 );\n+  VERIFY( q1.front() == 3 );\n+  VERIFY( q1.back() == 9 );\n+  VERIFY( q1.get_allocator() == a1 );\n+}\n+\n+int main()\n+{\n+  test_p1425r4();\n+}"}, {"sha": "4c648926d629c2a11f09d18b541d942fb0a4c98d", "filename": "libstdc++-v3/testsuite/23_containers/stack/cons_from_iters.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fcons_from_iters.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fcons_from_iters.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fcons_from_iters.cc?ref=b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <stack>\n+\n+#ifndef __cpp_lib_adaptor_iterator_pair_constructor\n+#error Feature test macro for iterator pair constructors is missing in <stack>\n+#elif __cpp_lib_adaptor_iterator_pair_constructor != 202100L\n+#error Feature test macro for iterator pair constructors has wrong value in <stack>\n+#endif\n+\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void\n+test_p1425r4()\n+{\n+  const int vals[] = { 1, 2, 3, 7, 8, 9, 5, 6, 7 };\n+\n+  std::stack<int> s(std::begin(vals), std::end(vals));\n+  VERIFY( s.size() == std::size(vals) );\n+  VERIFY( s.top() == 7 );\n+\n+  using Alloc = __gnu_test::uneq_allocator<int>;\n+\n+  struct Stack : std::stack<int, std::deque<int, Alloc>>\n+  {\n+    using stack::stack;\n+\n+    Alloc get_allocator() const { return c.get_allocator(); }\n+  };\n+\n+  Alloc a0, a1(1);\n+  Stack s0(std::begin(vals), std::end(vals) - 1);\n+  VERIFY( s0.size() == std::size(vals) - 1 );\n+  VERIFY( s0.top() == 6 );\n+  VERIFY( s0.get_allocator() == a0 );\n+\n+  Stack s1(std::begin(vals), std::end(vals) - 2, a1);\n+  VERIFY( s1.size() == std::size(vals) - 2 );\n+  VERIFY( s1.top() == 5 );\n+  VERIFY( s1.get_allocator() == a1 );\n+}\n+\n+int main()\n+{\n+  test_p1425r4();\n+}"}]}