{"sha": "d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJhM2NlNGUzMzc0ZGU1NGIyMzFkOThiZDc4NjEzYzhkYzE4ZDlhNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-06-10T20:21:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-06-10T20:21:35Z"}, "message": "read-md.h (read_rtx_lineno): Rename to...\n\ngcc/\n\t* read-md.h (read_rtx_lineno): Rename to...\n\t(read_md_lineno): ...this.\n\t(read_rtx_filename): Rename to...\n\t(read_md_filename): ...this.\n\t(copy_rtx_ptr_loc): Rename to...\n\t(copy_md_ptr_loc): ...this.\n\t(print_rtx_ptr_loc): Rename to...\n\t(print_md_ptr_loc): ...this.\n\t* read-md.c: Likewise.  Update references after renaming.\n\t(string_obstack): Replace RTL with MD in comment.\n\t(set_rtx_ptr_loc): Rename to...\n\t(set_md_ptr_loc): ...this.\n\t(get_rtx_ptr_loc): Rename to...\n\t(get_md_ptr_loc): ...this.\n\t* genconditions.c: Update references after renaming.\n\t* genemit.c: Likewise.\n\t* genoutput.c: Likewise.\n\t* genpreds.c: Likewise.\n\t* gensupport.c: Likewise.\n\t* read-rtl.c: Likewise.\n\nFrom-SVN: r160571", "tree": {"sha": "43c04315a7c8d22053182e57daa6df240867adeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43c04315a7c8d22053182e57daa6df240867adeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1069247787d6d8c1093b3f9a8ab62c95d1a8501c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1069247787d6d8c1093b3f9a8ab62c95d1a8501c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1069247787d6d8c1093b3f9a8ab62c95d1a8501c"}], "stats": {"total": 165, "additions": 94, "deletions": 71}, "files": [{"sha": "24618045727b82445be09f4846d43298cb12ecf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "patch": "@@ -1,3 +1,26 @@\n+2010-06-10  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* read-md.h (read_rtx_lineno): Rename to...\n+\t(read_md_lineno): ...this.\n+\t(read_rtx_filename): Rename to...\n+\t(read_md_filename): ...this.\n+\t(copy_rtx_ptr_loc): Rename to...\n+\t(copy_md_ptr_loc): ...this.\n+\t(print_rtx_ptr_loc): Rename to...\n+\t(print_md_ptr_loc): ...this.\n+\t* read-md.c: Likewise.  Update references after renaming.\n+\t(string_obstack): Replace RTL with MD in comment.\n+\t(set_rtx_ptr_loc): Rename to...\n+\t(set_md_ptr_loc): ...this.\n+\t(get_rtx_ptr_loc): Rename to...\n+\t(get_md_ptr_loc): ...this.\n+\t* genconditions.c: Update references after renaming.\n+\t* genemit.c: Likewise.\n+\t* genoutput.c: Likewise.\n+\t* genpreds.c: Likewise.\n+\t* gensupport.c: Likewise.\n+\t* read-rtl.c: Likewise.\n+\n 2010-06-10  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* Makefile.in (READ_MD_H): New variable."}, {"sha": "9ac7e83fd095d2d29aa13a23d0b6e850a1454351", "filename": "gcc/genconditions.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "patch": "@@ -117,7 +117,7 @@ write_one_condition (void **slot, void * ARG_UNUSED (dummy))\n   const struct c_test *test = * (const struct c_test **) slot;\n   const char *p;\n \n-  print_rtx_ptr_loc (test->expr);\n+  print_md_ptr_loc (test->expr);\n   fputs (\"  { \\\"\", stdout);\n   for (p = test->expr; *p; p++)\n     {"}, {"sha": "69a3a7d92581f6666f1ae72bb7144fc4f7a8870e", "filename": "gcc/genemit.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "patch": "@@ -399,7 +399,7 @@ gen_insn (rtx insn, int lineno)\n   if (XSTR (insn, 0)[0] == 0 || XSTR (insn, 0)[0] == '*')\n     return;\n \n-  printf (\"/* %s:%d */\\n\", read_rtx_filename, lineno);\n+  printf (\"/* %s:%d */\\n\", read_md_filename, lineno);\n \n   /* Find out how many operands this function has.  */\n   operands = max_operand_vec (insn, 1);\n@@ -514,7 +514,7 @@ gen_expand (rtx expand)\n \n       /* Output the special code to be executed before the sequence\n \t is generated.  */\n-      print_rtx_ptr_loc (XSTR (expand, 3));\n+      print_md_ptr_loc (XSTR (expand, 3));\n       printf (\"%s\\n\", XSTR (expand, 3));\n \n       /* Output code to copy the arguments back out of `operands'\n@@ -643,7 +643,7 @@ gen_split (rtx split)\n \n   if (XSTR (split, 3))\n     {\n-      print_rtx_ptr_loc (XSTR (split, 3));\n+      print_md_ptr_loc (XSTR (split, 3));\n       printf (\"%s\\n\", XSTR (split, 3));\n     }\n \n@@ -888,17 +888,17 @@ from the machine description file `md'.  */\\n\\n\");\n \t  break;\n \n \tcase DEFINE_EXPAND:\n-\t  printf (\"/* %s:%d */\\n\", read_rtx_filename, line_no);\n+\t  printf (\"/* %s:%d */\\n\", read_md_filename, line_no);\n \t  gen_expand (desc);\n \t  break;\n \n \tcase DEFINE_SPLIT:\n-\t  printf (\"/* %s:%d */\\n\", read_rtx_filename, line_no);\n+\t  printf (\"/* %s:%d */\\n\", read_md_filename, line_no);\n \t  gen_split (desc);\n \t  break;\n \n \tcase DEFINE_PEEPHOLE2:\n-\t  printf (\"/* %s:%d */\\n\", read_rtx_filename, line_no);\n+\t  printf (\"/* %s:%d */\\n\", read_md_filename, line_no);\n \t  gen_split (desc);\n \t  break;\n "}, {"sha": "a3ecae40dc37c358b883998eebd9755b7078336d", "filename": "gcc/genoutput.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "patch": "@@ -673,7 +673,7 @@ process_template (struct data *d, const char *template_code)\n       printf (\"output_%d (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)\\n\",\n \t      d->code_number);\n       puts (\"{\");\n-      print_rtx_ptr_loc (template_code);\n+      print_md_ptr_loc (template_code);\n       puts (template_code + 1);\n       puts (\"}\");\n     }\n@@ -861,7 +861,7 @@ gen_insn (rtx insn, int lineno)\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n-  d->filename = read_rtx_filename;\n+  d->filename = read_md_filename;\n   d->lineno = lineno;\n   if (XSTR (insn, 0)[0])\n     d->name = XSTR (insn, 0);\n@@ -906,7 +906,7 @@ gen_peephole (rtx peep, int lineno)\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n-  d->filename = read_rtx_filename;\n+  d->filename = read_md_filename;\n   d->lineno = lineno;\n   d->name = 0;\n \n@@ -945,7 +945,7 @@ gen_expand (rtx insn, int lineno)\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n-  d->filename = read_rtx_filename;\n+  d->filename = read_md_filename;\n   d->lineno = lineno;\n   if (XSTR (insn, 0)[0])\n     d->name = XSTR (insn, 0);\n@@ -990,7 +990,7 @@ gen_split (rtx split, int lineno)\n \n   d->code_number = next_code_number;\n   d->index_number = next_index_number;\n-  d->filename = read_rtx_filename;\n+  d->filename = read_md_filename;\n   d->lineno = lineno;\n   d->name = 0;\n "}, {"sha": "e042427e496f561fe21f772df2881356184cafc6", "filename": "gcc/genpreds.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "patch": "@@ -184,7 +184,7 @@ write_predicate_subfunction (struct pred_data *p)\n   printf (\"static inline int\\n\"\n \t  \"%s_1 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\\n\",\n \t  p->name);\n-  print_rtx_ptr_loc (p->c_block);\n+  print_md_ptr_loc (p->c_block);\n   if (p->c_block[0] == '{')\n     fputs (p->c_block, stdout);\n   else"}, {"sha": "0905ca78cee43d4b57efff940cf77037a9f11f28", "filename": "gcc/gensupport.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "patch": "@@ -230,11 +230,11 @@ process_include (rtx desc, int lineno)\n \n   /* Save old cursor; setup new for the new file.  Note that \"lineno\" the\n      argument to this function is the beginning of the include statement,\n-     while read_rtx_lineno has already been advanced.  */\n-  old_filename = read_rtx_filename;\n-  old_lineno = read_rtx_lineno;\n-  read_rtx_filename = pathname;\n-  read_rtx_lineno = 1;\n+     while read_md_lineno has already been advanced.  */\n+  old_filename = read_md_filename;\n+  old_lineno = read_md_lineno;\n+  read_md_filename = pathname;\n+  read_md_lineno = 1;\n \n   if (include_callback)\n     include_callback (pathname);\n@@ -246,8 +246,8 @@ process_include (rtx desc, int lineno)\n   /* Do not free pathname.  It is attached to the various rtx queue\n      elements.  */\n \n-  read_rtx_filename = old_filename;\n-  read_rtx_lineno = old_lineno;\n+  read_md_filename = old_filename;\n+  read_md_lineno = old_lineno;\n \n   fclose (input_file);\n }\n@@ -260,15 +260,15 @@ process_rtx (rtx desc, int lineno)\n   switch (GET_CODE (desc))\n     {\n     case DEFINE_INSN:\n-      queue_pattern (desc, &define_insn_tail, read_rtx_filename, lineno);\n+      queue_pattern (desc, &define_insn_tail, read_md_filename, lineno);\n       break;\n \n     case DEFINE_COND_EXEC:\n-      queue_pattern (desc, &define_cond_exec_tail, read_rtx_filename, lineno);\n+      queue_pattern (desc, &define_cond_exec_tail, read_md_filename, lineno);\n       break;\n \n     case DEFINE_ATTR:\n-      queue_pattern (desc, &define_attr_tail, read_rtx_filename, lineno);\n+      queue_pattern (desc, &define_attr_tail, read_md_filename, lineno);\n       break;\n \n     case DEFINE_PREDICATE:\n@@ -277,7 +277,7 @@ process_rtx (rtx desc, int lineno)\n     case DEFINE_REGISTER_CONSTRAINT:\n     case DEFINE_MEMORY_CONSTRAINT:\n     case DEFINE_ADDRESS_CONSTRAINT:\n-      queue_pattern (desc, &define_pred_tail, read_rtx_filename, lineno);\n+      queue_pattern (desc, &define_pred_tail, read_md_filename, lineno);\n       break;\n \n     case INCLUDE:\n@@ -309,7 +309,7 @@ process_rtx (rtx desc, int lineno)\n \tsplit_cond = XSTR (desc, 4);\n \tif (split_cond[0] == '&' && split_cond[1] == '&')\n \t  {\n-\t    copy_rtx_ptr_loc (split_cond + 2, split_cond);\n+\t    copy_md_ptr_loc (split_cond + 2, split_cond);\n \t    split_cond = join_c_conditions (XSTR (desc, 2), split_cond + 2);\n \t  }\n \tXSTR (split, 1) = split_cond;\n@@ -323,16 +323,16 @@ process_rtx (rtx desc, int lineno)\n \n \t/* Queue them.  */\n \tinsn_elem\n-\t  = queue_pattern (desc, &define_insn_tail, read_rtx_filename,\n+\t  = queue_pattern (desc, &define_insn_tail, read_md_filename,\n \t\t\t   lineno);\n \tsplit_elem\n-\t  = queue_pattern (split, &other_tail, read_rtx_filename, lineno);\n+\t  = queue_pattern (split, &other_tail, read_md_filename, lineno);\n \tinsn_elem->split = split_elem;\n \tbreak;\n       }\n \n     default:\n-      queue_pattern (desc, &other_tail, read_rtx_filename, lineno);\n+      queue_pattern (desc, &other_tail, read_md_filename, lineno);\n       break;\n     }\n }\n@@ -865,7 +865,7 @@ process_one_cond_exec (struct queue_elem *ce_elem)\n \t  XVECEXP (split, 2, i) = pattern;\n \t}\n       /* Add the new split to the queue.  */\n-      queue_pattern (split, &other_tail, read_rtx_filename,\n+      queue_pattern (split, &other_tail, read_md_filename,\n \t\t     insn_elem->split->lineno);\n     }\n }\n@@ -988,8 +988,8 @@ init_md_reader_args_cb (int argc, char **argv, bool (*parse_opt)(const char *))\n \t\tfatal (\"cannot read standard input twice\");\n \n \t      base_dir = NULL;\n-\t      read_rtx_filename = in_fname = \"<stdin>\";\n-\t      read_rtx_lineno = 1;\n+\t      read_md_filename = in_fname = \"<stdin>\";\n+\t      read_md_lineno = 1;\n \t      input_file = stdin;\n \t      already_read_stdin = true;\n \n@@ -1018,8 +1018,8 @@ init_md_reader_args_cb (int argc, char **argv, bool (*parse_opt)(const char *))\n       else\n \tbase_dir = NULL;\n \n-      read_rtx_filename = in_fname;\n-      read_rtx_lineno = 1;\n+      read_md_filename = in_fname;\n+      read_md_lineno = 1;\n       input_file = fopen (in_fname, \"r\");\n       if (input_file == 0)\n \t{\n@@ -1037,8 +1037,8 @@ init_md_reader_args_cb (int argc, char **argv, bool (*parse_opt)(const char *))\n   if (!in_fname)\n     {\n       base_dir = NULL;\n-      read_rtx_filename = in_fname = \"<stdin>\";\n-      read_rtx_lineno = 1;\n+      read_md_filename = in_fname = \"<stdin>\";\n+      read_md_lineno = 1;\n       input_file = stdin;\n \n       while (read_rtx (input_file, &desc, &lineno))\n@@ -1086,7 +1086,7 @@ read_md_rtx (int *lineno, int *seqnr)\n   elem = *queue;\n   *queue = elem->next;\n   desc = elem->data;\n-  read_rtx_filename = elem->filename;\n+  read_md_filename = elem->filename;\n   *lineno = elem->lineno;\n   *seqnr = sequence_num;\n "}, {"sha": "105b3bcd17d139db85aaf5013a1b66548b4240df", "filename": "gcc/read-md.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fread-md.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fread-md.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.c?ref=d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "patch": "@@ -33,7 +33,7 @@ struct ptr_loc {\n   int lineno;\n };\n \n-/* Obstack used for allocating RTL strings.  */\n+/* Obstack used for allocating MD strings.  */\n struct obstack string_obstack;\n \n /* A table of ptr_locs, hashed on the PTR field.  */\n@@ -45,18 +45,18 @@ static struct obstack ptr_loc_obstack;\n \n /* A hash table of triples (A, B, C), where each of A, B and C is a condition\n    and A is equivalent to \"B && C\".  This is used to keep track of the source\n-   of conditions that are made up of separate rtx strings (such as the split\n+   of conditions that are made up of separate MD strings (such as the split\n    condition of a define_insn_and_split).  */\n static htab_t joined_conditions;\n \n /* An obstack for allocating joined_conditions entries.  */\n static struct obstack joined_conditions_obstack;\n \n /* The current line number for the file.  */\n-int read_rtx_lineno = 1;\n+int read_md_lineno = 1;\n \n /* The filename for error reporting.  */\n-const char *read_rtx_filename = \"<unknown>\";\n+const char *read_md_filename = \"<unknown>\";\n \n /* Return a hash value for the pointer pointed to by DEF.  */\n \n@@ -77,7 +77,7 @@ leading_ptr_eq_p (const void *def1, const void *def2)\n /* Associate PTR with the file position given by FILENAME and LINENO.  */\n \n static void\n-set_rtx_ptr_loc (const void *ptr, const char *filename, int lineno)\n+set_md_ptr_loc (const void *ptr, const char *filename, int lineno)\n {\n   struct ptr_loc *loc;\n \n@@ -93,28 +93,28 @@ set_rtx_ptr_loc (const void *ptr, const char *filename, int lineno)\n    position was set.  */\n \n static const struct ptr_loc *\n-get_rtx_ptr_loc (const void *ptr)\n+get_md_ptr_loc (const void *ptr)\n {\n   return (const struct ptr_loc *) htab_find (ptr_locs, &ptr);\n }\n \n /* Associate NEW_PTR with the same file position as OLD_PTR.  */\n \n void\n-copy_rtx_ptr_loc (const void *new_ptr, const void *old_ptr)\n+copy_md_ptr_loc (const void *new_ptr, const void *old_ptr)\n {\n-  const struct ptr_loc *loc = get_rtx_ptr_loc (old_ptr);\n+  const struct ptr_loc *loc = get_md_ptr_loc (old_ptr);\n   if (loc != 0)\n-    set_rtx_ptr_loc (new_ptr, loc->filename, loc->lineno);\n+    set_md_ptr_loc (new_ptr, loc->filename, loc->lineno);\n }\n \n /* If PTR is associated with a known file position, print a #line\n    directive for it.  */\n \n void\n-print_rtx_ptr_loc (const void *ptr)\n+print_md_ptr_loc (const void *ptr)\n {\n-  const struct ptr_loc *loc = get_rtx_ptr_loc (ptr);\n+  const struct ptr_loc *loc = get_md_ptr_loc (ptr);\n   if (loc != 0)\n     printf (\"#line %d \\\"%s\\\"\\n\", loc->lineno, loc->filename);\n }\n@@ -166,7 +166,7 @@ print_c_condition (const char *cond)\n   else\n     {\n       putc ('\\n', stdout);\n-      print_rtx_ptr_loc (cond);\n+      print_md_ptr_loc (cond);\n       printf (\"(%s)\", cond);\n     }\n }\n@@ -181,7 +181,7 @@ message_with_line (int lineno, const char *msg, ...)\n \n   va_start (ap, msg);\n \n-  fprintf (stderr, \"%s:%d: \", read_rtx_filename, lineno);\n+  fprintf (stderr, \"%s:%d: \", read_md_filename, lineno);\n   vfprintf (stderr, msg, ap);\n   fputc ('\\n', stderr);\n \n@@ -201,7 +201,7 @@ fatal_with_file_and_line (FILE *infile, const char *msg, ...)\n \n   va_start (ap, msg);\n \n-  fprintf (stderr, \"%s:%d: \", read_rtx_filename, read_rtx_lineno);\n+  fprintf (stderr, \"%s:%d: \", read_md_filename, read_md_lineno);\n   vfprintf (stderr, msg, ap);\n   putc ('\\n', stderr);\n \n@@ -218,7 +218,7 @@ fatal_with_file_and_line (FILE *infile, const char *msg, ...)\n   context[i] = '\\0';\n \n   fprintf (stderr, \"%s:%d: following context is `%s'\\n\",\n-\t   read_rtx_filename, read_rtx_lineno, context);\n+\t   read_md_filename, read_md_lineno, context);\n \n   va_end (ap);\n   exit (1);\n@@ -253,7 +253,7 @@ read_skip_spaces (FILE *infile)\n       switch (c)\n \t{\n \tcase '\\n':\n-\t  read_rtx_lineno++;\n+\t  read_md_lineno++;\n \t  break;\n \n \tcase ' ': case '\\t': case '\\f': case '\\r':\n@@ -263,7 +263,7 @@ read_skip_spaces (FILE *infile)\n \t  do\n \t    c = getc (infile);\n \t  while (c != '\\n' && c != EOF);\n-\t  read_rtx_lineno++;\n+\t  read_md_lineno++;\n \t  break;\n \n \tcase '/':\n@@ -277,7 +277,7 @@ read_skip_spaces (FILE *infile)\n \t    while ((c = getc (infile)) && c != EOF)\n \t      {\n \t\tif (c == '\\n')\n-\t\t   read_rtx_lineno++;\n+\t\t   read_md_lineno++;\n \t        else if (prevc == '*' && c == '/')\n \t\t  break;\n \t        prevc = c;\n@@ -303,7 +303,7 @@ read_escape (FILE *infile)\n     {\n       /* Backslash-newline is replaced by nothing, as in C.  */\n     case '\\n':\n-      read_rtx_lineno++;\n+      read_md_lineno++;\n       return;\n \n       /* \\\" \\' \\\\ are replaced by the second character.  */\n@@ -336,7 +336,7 @@ read_escape (FILE *infile)\n       /* pass anything else through, but issue a warning.  */\n     default:\n       fprintf (stderr, \"%s:%d: warning: unrecognized escape \\\\%c\\n\",\n-\t       read_rtx_filename, read_rtx_lineno, c);\n+\t       read_md_filename, read_md_lineno, c);\n       obstack_1grow (&string_obstack, '\\\\');\n       break;\n     }\n@@ -356,7 +356,7 @@ read_quoted_string (FILE *infile)\n     {\n       c = getc (infile); /* Read the string  */\n       if (c == '\\n')\n-\tread_rtx_lineno++;\n+\tread_md_lineno++;\n       else if (c == '\\\\')\n \t{\n \t  read_escape (infile);\n@@ -381,15 +381,15 @@ read_braced_string (FILE *infile)\n {\n   int c;\n   int brace_depth = 1;  /* caller-processed */\n-  unsigned long starting_read_rtx_lineno = read_rtx_lineno;\n+  unsigned long starting_read_md_lineno = read_md_lineno;\n \n   obstack_1grow (&string_obstack, '{');\n   while (brace_depth)\n     {\n       c = getc (infile); /* Read the string  */\n \n       if (c == '\\n')\n-\tread_rtx_lineno++;\n+\tread_md_lineno++;\n       else if (c == '{')\n \tbrace_depth++;\n       else if (c == '}')\n@@ -402,7 +402,7 @@ read_braced_string (FILE *infile)\n       else if (c == EOF)\n \tfatal_with_file_and_line\n \t  (infile, \"missing closing } for opening brace on line %lu\",\n-\t   starting_read_rtx_lineno);\n+\t   starting_read_md_lineno);\n \n       obstack_1grow (&string_obstack, c);\n     }\n@@ -429,7 +429,7 @@ read_string (FILE *infile, int star_if_braced)\n       c = read_skip_spaces (infile);\n     }\n \n-  old_lineno = read_rtx_lineno;\n+  old_lineno = read_md_lineno;\n   if (c == '\"')\n     stringbuf = read_quoted_string (infile);\n   else if (c == '{')\n@@ -448,7 +448,7 @@ read_string (FILE *infile, int star_if_braced)\n \tfatal_expected_char (infile, ')', c);\n     }\n \n-  set_rtx_ptr_loc (stringbuf, read_rtx_filename, old_lineno);\n+  set_md_ptr_loc (stringbuf, read_md_filename, old_lineno);\n   return stringbuf;\n }\n "}, {"sha": "dd492beb1b2f4efcee2d3e513991ce993ec1b6ac", "filename": "gcc/read-md.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fread-md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fread-md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.h?ref=d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "patch": "@@ -21,12 +21,12 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"obstack.h\"\n \n-extern int read_rtx_lineno;\n-extern const char *read_rtx_filename;\n+extern int read_md_lineno;\n+extern const char *read_md_filename;\n extern struct obstack string_obstack;\n \n-extern void copy_rtx_ptr_loc (const void *, const void *);\n-extern void print_rtx_ptr_loc (const void *);\n+extern void copy_md_ptr_loc (const void *, const void *);\n+extern void print_md_ptr_loc (const void *);\n extern const char *join_c_conditions (const char *, const char *);\n extern void print_c_condition (const char *);\n extern void message_with_line (int, const char *, ...) ATTRIBUTE_PRINTF_2;"}, {"sha": "50bb5f1bf3caa6a44217016d11ae5df6af26bed2", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a3ce4e3374de54b231d98bd78613c8dc18d9a4/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=d2a3ce4e3374de54b231d98bd78613c8dc18d9a4", "patch": "@@ -319,7 +319,7 @@ apply_iterator_to_string (const char *string, struct mapping *iterator, int valu\n     {\n       obstack_grow (&string_obstack, base, strlen (base) + 1);\n       copy = XOBFINISH (&string_obstack, char *);\n-      copy_rtx_ptr_loc (copy, string);\n+      copy_md_ptr_loc (copy, string);\n       return copy;\n     }\n   return string;\n@@ -647,7 +647,7 @@ read_name (char *str, FILE *infile)\n   if (p == str)\n     fatal_with_file_and_line (infile, \"missing name or number\");\n   if (c == '\\n')\n-    read_rtx_lineno++;\n+    read_md_lineno++;\n \n   *p = 0;\n \n@@ -999,7 +999,7 @@ read_rtx (FILE *infile, rtx *x, int *lineno)\n \treturn false;\n       ungetc (c, infile);\n \n-      queue_lineno = read_rtx_lineno;\n+      queue_lineno = read_md_lineno;\n       mode_maps = 0;\n       from_file = read_rtx_1 (infile, &mode_maps);\n       if (from_file == 0)\n@@ -1229,14 +1229,14 @@ read_rtx_1 (FILE *infile, struct map_value **mode_maps)\n \t\t  || GET_CODE (return_rtx) == DEFINE_INSN_AND_SPLIT))\n \t    {\n \t      char line_name[20];\n-\t      const char *fn = (read_rtx_filename ? read_rtx_filename : \"rtx\");\n+\t      const char *fn = (read_md_filename ? read_md_filename : \"rtx\");\n \t      const char *slash;\n \t      for (slash = fn; *slash; slash ++)\n \t\tif (*slash == '/' || *slash == '\\\\' || *slash == ':')\n \t\t  fn = slash + 1;\n \t      obstack_1grow (&string_obstack, '*');\n \t      obstack_grow (&string_obstack, fn, strlen (fn));\n-\t      sprintf (line_name, \":%d\", read_rtx_lineno);\n+\t      sprintf (line_name, \":%d\", read_md_lineno);\n \t      obstack_grow (&string_obstack, line_name, strlen (line_name)+1);\n \t      stringbuf = XOBFINISH (&string_obstack, char *);\n \t    }"}]}