{"sha": "2c8f0515bbed378f1e87e1b52e2913d058cbed16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4ZjA1MTViYmVkMzc4ZjFlODdlMWI1MmUyOTEzZDA1OGNiZWQxNg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-08-29T18:37:37Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-29T18:37:37Z"}, "message": "cpperror.c (print_file_and_line): If line is (unsigned int)-1, print just the filename.\n\n\t* cpperror.c (print_file_and_line): If line is (unsigned int)-1,\n\tprint just the filename.\n\t* cpplex.c (_cpp_run_directive): Add additional argument, the\n\tname to give the synthetic buffer.  This defaults to\n\ttranslated \"<command line>\".\n\t* cpplib.c (cpp_define, cpp_undef, cpp_assert, cpp_unassert):\n\tAdjust to match.\n\t(_cpp_define_builtin): New function.\n\t* cppinit.c (initialize_builtins): Use _cpp_define_builtin.\n\t* cpphash.h: Update prototypes.\n\n\t* tradcpp.c (main): Process -D and -U simultaneously, in the\n\torder they appeared on the command line.\n\nFrom-SVN: r36043", "tree": {"sha": "7f03453e92f612da7c6531488d3878a73dbda657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f03453e92f612da7c6531488d3878a73dbda657"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c8f0515bbed378f1e87e1b52e2913d058cbed16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c8f0515bbed378f1e87e1b52e2913d058cbed16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c8f0515bbed378f1e87e1b52e2913d058cbed16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c8f0515bbed378f1e87e1b52e2913d058cbed16/comments", "author": null, "committer": null, "parents": [{"sha": "5c5d1cd68a748299a244a6b9fd7c3fce2f09d582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5d1cd68a748299a244a6b9fd7c3fce2f09d582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5d1cd68a748299a244a6b9fd7c3fce2f09d582"}], "stats": {"total": 91, "additions": 62, "deletions": 29}, "files": [{"sha": "6e84eb6df51fcdf365dcb27228c7712b5d3429b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c8f0515bbed378f1e87e1b52e2913d058cbed16", "patch": "@@ -1,3 +1,19 @@\n+2000-08-29  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpperror.c (print_file_and_line): If line is (unsigned int)-1,\n+\tprint just the filename.\n+\t* cpplex.c (_cpp_run_directive): Add additional argument, the\n+\tname to give the synthetic buffer.  This defaults to\n+\ttranslated \"<command line>\".\n+\t* cpplib.c (cpp_define, cpp_undef, cpp_assert, cpp_unassert):\n+\tAdjust to match.\n+\t(_cpp_define_builtin): New function.\n+\t* cppinit.c (initialize_builtins): Use _cpp_define_builtin.\n+\t* cpphash.h: Update prototypes.\n+\n+\t* tradcpp.c (main): Process -D and -U simultaneously, in the\n+\torder they appeared on the command line.\n+\n 2000-08-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-decl.c (define_label): Call warning_with_file_and_line and"}, {"sha": "a6c7b2dbf3e61985732ca613a743233d55f06a11", "filename": "gcc/cpperror.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=2c8f0515bbed378f1e87e1b52e2913d058cbed16", "patch": "@@ -91,17 +91,15 @@ print_file_and_line (filename, line, column)\n      const char *filename;\n      unsigned int line, column;\n {\n-  if (line == 0)\n-    fputs (_(\"<command line>: \"), stderr);\n+  if (filename == 0 || *filename == '\\0')\n+    filename = \"<stdin>\";\n+\n+  if (line == (unsigned int)-1)\n+    fprintf (stderr, \"%s: \", filename);\n+  else if (column > 0)\n+    fprintf (stderr, \"%s:%u:%u: \", filename, line, column);\n   else\n-    {\n-      if (filename == 0 || *filename == '\\0')\n-\tfilename = \"<stdin>\";\n-      if (column > 0)\n-\tfprintf (stderr, \"%s:%u:%u: \", filename, line, column);\n-      else\n-\tfprintf (stderr, \"%s:%u: \", filename, line);\n-    }\n+    fprintf (stderr, \"%s:%u: \", filename, line);\n }\n \n /* Set up for an error message: print the file and line, bump the error"}, {"sha": "45abb6919751f1faa73e80bd05a1d71d7c07ba69", "filename": "gcc/cpphash.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=2c8f0515bbed378f1e87e1b52e2913d058cbed16", "patch": "@@ -267,7 +267,8 @@ extern int _cpp_equiv_tokens\t\tPARAMS ((const cpp_token *,\n \t\t\t\t\t\t const cpp_token *));\n extern void _cpp_run_directive\t\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t const struct directive *,\n-\t\t\t\t\t\t const char *, size_t));\n+\t\t\t\t\t\t const char *, size_t,\n+\t\t\t\t\t\t const char *));\n extern unsigned int _cpp_get_line\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t unsigned int *));\n extern const cpp_token *_cpp_get_token PARAMS ((cpp_reader *));\n@@ -284,6 +285,8 @@ extern cpp_hashnode *_cpp_parse_assertion PARAMS ((cpp_reader *,\n \t\t\t\t\t\t    struct answer **));\n extern struct answer **_cpp_find_answer\tPARAMS ((cpp_hashnode *,\n \t\t\t\t\t\t const cpp_toklist *));\n+extern void _cpp_define_builtin\t\tPARAMS ((cpp_reader *, const char *));\n+\n extern void _cpp_init_stacks\tPARAMS ((cpp_reader *));\n extern void _cpp_cleanup_stacks\tPARAMS ((cpp_reader *));\n extern void _cpp_init_internal_pragmas PARAMS ((cpp_reader *));"}, {"sha": "fbccfc358ed24bff5cccbb325705e448d3767154", "filename": "gcc/cppinit.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=2c8f0515bbed378f1e87e1b52e2913d058cbed16", "patch": "@@ -610,9 +610,9 @@ initialize_builtins (pfile)\n \n \t  if (b->flags & VERS)\n \t    {\n-\t      /* Allocate enough space for 'name=\"value\"\\0'.  */\n-\t      str = xmalloc (b->len + strlen (version_string) + 4);\n-\t      sprintf (str, \"%s=\\\"%s\\\"\", b->name, version_string);\n+\t      /* Allocate enough space for 'name \"value\"\\n\\0'.  */\n+\t      str = alloca (b->len + strlen (version_string) + 5);\n+\t      sprintf (str, \"%s \\\"%s\\\"\\n\", b->name, version_string);\n \t    }\n \t  else\n \t    {\n@@ -621,13 +621,12 @@ initialize_builtins (pfile)\n \t      else\n \t\tval = b->value;\n \n-\t      /* Allocate enough space for \"name=value\\0\".  */\n-\t      str = xmalloc (b->len + strlen (val) + 2);\n-\t      sprintf(str, \"%s=%s\", b->name, val);\n+\t      /* Allocate enough space for \"name value\\n\\0\".  */\n+\t      str = alloca (b->len + strlen (val) + 3);\n+\t      sprintf(str, \"%s %s\\n\", b->name, val);\n \t    }\n \n-\t  cpp_define (pfile, str);\n-\t  free (str);\n+\t  _cpp_define_builtin (pfile, str);\n \t}\n       else\n \t{"}, {"sha": "37d1de8c4408e7e4e01a610b44498a2addc692f3", "filename": "gcc/cpplex.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=2c8f0515bbed378f1e87e1b52e2913d058cbed16", "patch": "@@ -3565,16 +3565,23 @@ _cpp_skip_rest_of_line (pfile)\n /* Directive handler wrapper used by the command line option\n    processor.  */\n void\n-_cpp_run_directive (pfile, dir, buf, count)\n+_cpp_run_directive (pfile, dir, buf, count, name)\n      cpp_reader *pfile;\n      const struct directive *dir;\n      const char *buf;\n      size_t count;\n+     const char *name;\n {\n   if (cpp_push_buffer (pfile, (const U_CHAR *)buf, count) != NULL)\n     {\n       unsigned int prev_lvl = 0;\n \n+      if (name)\n+\tCPP_BUFFER (pfile)->nominal_fname = name;\n+      else\n+\tCPP_BUFFER (pfile)->nominal_fname = _(\"<command line>\");\n+      CPP_BUFFER (pfile)->lineno = (unsigned int)-1;\n+\n       /* Scan the line now, else prevent_macro_expansion won't work.  */\n       lex_next (pfile, 1);\n       if (! (dir->flags & EXPAND))"}, {"sha": "3273dce4544fd6e8240b5281abd8bd35a02b3c47", "filename": "gcc/cpplib.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=2c8f0515bbed378f1e87e1b52e2913d058cbed16", "patch": "@@ -1410,7 +1410,20 @@ cpp_define (pfile, str)\n       strcpy (&buf[count-4], \" 1\\n\");\n     }\n \n-  _cpp_run_directive (pfile, &dtable[T_DEFINE], buf, count - 1);\n+  _cpp_run_directive (pfile, &dtable[T_DEFINE], buf, count - 1, 0);\n+}\n+\n+/* Slight variant of the above for use by initialize_builtins, which (a)\n+   knows how to set up the buffer itself, (b) needs a different \"filename\"\n+   tag.  */\n+void\n+_cpp_define_builtin (pfile, str)\n+     cpp_reader *pfile;\n+     const char *str;\n+{\n+  _cpp_run_directive (pfile, &dtable[T_DEFINE],\n+\t\t      str, strlen (str),\n+\t\t      _(\"<builtin>\"));\n }\n \n /* Process MACRO as if it appeared as the body of an #undef.  */\n@@ -1419,7 +1432,7 @@ cpp_undef (pfile, macro)\n      cpp_reader *pfile;\n      const char *macro;\n {\n-  _cpp_run_directive (pfile, &dtable[T_UNDEF], macro, strlen (macro));\n+  _cpp_run_directive (pfile, &dtable[T_UNDEF], macro, strlen (macro), 0);\n }\n \n /* Process the string STR as if it appeared as the body of a #assert. */\n@@ -1428,7 +1441,7 @@ cpp_assert (pfile, str)\n      cpp_reader *pfile;\n      const char *str;\n {\n-  _cpp_run_directive (pfile, &dtable[T_ASSERT], str, strlen (str));\n+  _cpp_run_directive (pfile, &dtable[T_ASSERT], str, strlen (str), 0);\n }\n \n /* Process STR as if it appeared as the body of an #unassert. */\n@@ -1437,7 +1450,7 @@ cpp_unassert (pfile, str)\n      cpp_reader *pfile;\n      const char *str;\n {\n-  _cpp_run_directive (pfile, &dtable[T_UNASSERT], str, strlen (str));\n+  _cpp_run_directive (pfile, &dtable[T_UNASSERT], str, strlen (str), 0);\n }  \n \n /* Determine whether the identifier ID, of length LEN, is a defined macro.  */"}, {"sha": "125e2cbe602695de7228526ba1bc119c95e35b08", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8f0515bbed378f1e87e1b52e2913d058cbed16/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=2c8f0515bbed378f1e87e1b52e2913d058cbed16", "patch": "@@ -711,14 +711,11 @@ main (argc, argv)\n      and option processing.  */\n   initialize_builtins ();\n \n-  /* Do defines specified with -D.  */\n+  /* Do defines specified with -D and undefines specified with -U.  */\n   for (i = 1; i < argc; i++)\n     if (pend_defs[i])\n       make_definition ((U_CHAR *)pend_defs[i]);\n-\n-  /* Do undefines specified with -U.  */\n-  for (i = 1; i < argc; i++)\n-    if (pend_undefs[i])\n+    else if (pend_undefs[i])\n       make_undef ((U_CHAR *)pend_undefs[i]);\n \n   /* Unless -fnostdinc,"}]}