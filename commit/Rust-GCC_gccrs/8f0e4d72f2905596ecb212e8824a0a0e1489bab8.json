{"sha": "8f0e4d72f2905596ecb212e8824a0a0e1489bab8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYwZTRkNzJmMjkwNTU5NmVjYjIxMmU4ODI0YTBhMGUxNDg5YmFiOA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2013-08-30T15:28:51Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-30T15:28:51Z"}, "message": "c-pretty-print.h (c_pretty_printer::declaration): Now a virtual member function.\n\nc-family/\n\t* c-pretty-print.h (c_pretty_printer::declaration): Now a virtual\n\tmember function.\n\t(c_pretty_printer::declaration_specifiers): Likewise.\n\t(c_pretty_printer::declarator): Likewise.\n\t(c_pretty_printer::abstract_declarator): Likewise.\n\t(c_pretty_printer::direct_abstract_declarator): Likewise.\n\t(c_pretty_printer::direct_declarator): Likewise.\n\t(c_pretty_printer::function_specifier): Likewise.\n\t(pp_declaration): Adjust.\n\t(pp_declaration_specifiers): Likewise.\n\t(pp_abstract_declarator): Likewise.\n\t(pp_direct_declarator): Likewise.\n\t(pp_function_specifier): Likewise.\n\t(pp_direct_abstract_declarator): Remove as unused.\n\t(pp_c_declaration): Remove.\n\t(pp_c_declaration_specifiers): Likewise.\n\t(pp_c_declarator): Likewise.\n\t(pp_c_direct_declarator): Likewise.\n\t(pp_c_function_specifier): Likewise.\n\t(pp_c_direct_abstract_declarator): Likewise.\n\t* c-pretty-print.c (c_pretty_printer::abstract_declarator): Rename\n\tfrom pp_c_abstract_declarator.  Adjust.\n\t(c_pretty_printer::direct_abstract_declarator):  Rename from\n\tpp_c_direct_abstract_declarator.  Adjust.\n\t(c_pretty_printer::function_specifier): Rename from\n\tpp_c_function_specifier.  Adjust.\n\t(c_pretty_printer::declaration_specifiers): Rename from\n\tpp_c_declaration_specifiers.  Adjust.\n\t(c_pretty_printer::direct_declarator): Rename from\n\tpp_c_direct_declarator.  Adjust.\n\t(c_pretty_printer::declarator): Rename from pp_c_declarator.  Adjust.\n\t(c_pretty_printer::declaration): Rename from pp_c_declaration.  Adjust.\n\t(c_pretty_printer::c_pretty_printer): Do not assign to\n\tdeclaration, declaration_specifiers, declarator,\n\tdirect_declarator, direct_abstract_declarator, function_specifier.\n\ncp/\n\t* cxx-pretty-print.h (cxx_pretty_printer::declaration): Declare as\n\toverrider.\n\t(cxx_pretty_printer::declaration_specifiers): Likewise.\n\t(cxx_pretty_printer::function_specifier): Likewise.\n\t(cxx_pretty_printer::declarator): Likewise.\n\t(cxx_pretty_printer::direct_declarator): Likewise.\n\t(cxx_pretty_printer::abstract_declarator): Likewise.\n\t(cxx_pretty_printer::direct_abstract_declarator): Likewise.\n\t(pp_cxx_declaration): Remove.\n\t* cxx-pretty-print.c (cxx_pretty_printer::function_specifier):\n\tRename from pp_cxx_function_specifier.  Adjust.\n\t(cxx_pretty_printer::declaration_specifiers): Rename from\n\tpp_cxx_decl_specifier_seq.  Adjust.\n\t(cxx_pretty_printer::direct_declarator): Rename from\n\tpp_cxx_direct_declarator.  Adjust.\n\t(cxx_pretty_printer::declarator): Rename from pp_cxx_declarator.\n\tAdjust.\n\t(cxx_pretty_printer::abstract_declarator): Rename from\n\tpp_cxx_abstract_declarator.  Adjust.\n\t(cxx_pretty_printer::direct_abstract_declarator): Rename from\n\tpp_cxx_direct_abstract_declarator.  Adjust.\n\t(cxx_pretty_printer::declaration): Rename from\n\tpp_cxx_declaration.  Adjust.\n\t(cxx_pretty_printer::cxx_pretty_printer): Do not assign to\n\tdeclaration, declaration_specifiers, function_specifier,\n\tdeclarator, direct_declarator, abstract_declarator,\n\tdirect_abstract_declarator.\n\t* error.c (dump_decl): Adjust.\n\nFrom-SVN: r202109", "tree": {"sha": "40b3409f70bac07a020c641005859d39639f0f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40b3409f70bac07a020c641005859d39639f0f47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f0e4d72f2905596ecb212e8824a0a0e1489bab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0e4d72f2905596ecb212e8824a0a0e1489bab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0e4d72f2905596ecb212e8824a0a0e1489bab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc8d7a0f7bbd5d24ba74066ea7d0262f7f732774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc8d7a0f7bbd5d24ba74066ea7d0262f7f732774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc8d7a0f7bbd5d24ba74066ea7d0262f7f732774"}], "stats": {"total": 358, "additions": 204, "deletions": 154}, "files": [{"sha": "c8bf2dffdc1ca4e4e1b404cac1e6acbefc7fdeae", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8f0e4d72f2905596ecb212e8824a0a0e1489bab8", "patch": "@@ -1,3 +1,41 @@\n+2013-08-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-pretty-print.h (c_pretty_printer::declaration): Now a virtual\n+\tmember function.\n+\t(c_pretty_printer::declaration_specifiers): Likewise.\n+\t(c_pretty_printer::declarator): Likewise.\n+\t(c_pretty_printer::abstract_declarator): Likewise.\n+\t(c_pretty_printer::direct_abstract_declarator): Likewise.\n+\t(c_pretty_printer::direct_declarator): Likewise.\n+\t(c_pretty_printer::function_specifier): Likewise.\n+\t(pp_declaration): Adjust.\n+\t(pp_declaration_specifiers): Likewise.\n+\t(pp_abstract_declarator): Likewise.\n+\t(pp_direct_declarator): Likewise.\n+\t(pp_function_specifier): Likewise.\n+\t(pp_direct_abstract_declarator): Remove as unused.\n+\t(pp_c_declaration): Remove.\n+\t(pp_c_declaration_specifiers): Likewise.\n+\t(pp_c_declarator): Likewise.\n+\t(pp_c_direct_declarator): Likewise.\n+\t(pp_c_function_specifier): Likewise.\n+\t(pp_c_direct_abstract_declarator): Likewise.\n+\t* c-pretty-print.c (c_pretty_printer::abstract_declarator): Rename\n+\tfrom pp_c_abstract_declarator.  Adjust.\n+\t(c_pretty_printer::direct_abstract_declarator):  Rename from\n+\tpp_c_direct_abstract_declarator.  Adjust.\n+\t(c_pretty_printer::function_specifier): Rename from\n+\tpp_c_function_specifier.  Adjust.\n+\t(c_pretty_printer::declaration_specifiers): Rename from\n+\tpp_c_declaration_specifiers.  Adjust.\n+\t(c_pretty_printer::direct_declarator): Rename from\n+\tpp_c_direct_declarator.  Adjust.\n+\t(c_pretty_printer::declarator): Rename from pp_c_declarator.  Adjust.\n+\t(c_pretty_printer::declaration): Rename from pp_c_declaration.  Adjust.\n+\t(c_pretty_printer::c_pretty_printer): Do not assign to\n+\tdeclaration, declaration_specifiers, declarator,\n+\tdirect_declarator, direct_abstract_declarator, function_specifier.\n+\n 2013-08-26  Gabriel Dos Reis  <gdre@integrable-solutions.net>\n \n \t* c-pretty-print.h (c_pretty_printer::unary_expression): Now a"}, {"sha": "c50b068c6277dab3cad7611103b76f7079f0492f", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 40, "deletions": 47, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=8f0e4d72f2905596ecb212e8824a0a0e1489bab8", "patch": "@@ -431,7 +431,7 @@ pp_c_type_specifier (c_pretty_printer *pp, tree t)\n   function declarations, this routine prints not just the\n   specifier-qualifier-list of such entities or types of such entities,\n   but also the 'pointer' production part of their declarators.  The\n-  remaining part is done by pp_declarator or pp_c_abstract_declarator.  */\n+  remaining part is done by pp_declarator or pp_abstract_declarator.  */\n \n void\n pp_c_specifier_qualifier_list (c_pretty_printer *pp, tree t)\n@@ -533,18 +533,18 @@ pp_c_parameter_type_list (c_pretty_printer *pp, tree t)\n       pointer\n       pointer(opt) direct-abstract-declarator  */\n \n-static void\n-pp_c_abstract_declarator (c_pretty_printer *pp, tree t)\n+void\n+c_pretty_printer::abstract_declarator (tree t)\n {\n   if (TREE_CODE (t) == POINTER_TYPE)\n     {\n       if (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE\n \t  || TREE_CODE (TREE_TYPE (t)) == FUNCTION_TYPE)\n-\tpp_c_right_paren (pp);\n+\tpp_c_right_paren (this);\n       t = TREE_TYPE (t);\n     }\n \n-  pp_direct_abstract_declarator (pp, t);\n+  direct_abstract_declarator (t);\n }\n \n /* direct-abstract-declarator:\n@@ -554,34 +554,34 @@ pp_c_abstract_declarator (c_pretty_printer *pp, tree t)\n       direct-abstract-declarator(opt) ( parameter-type-list(opt) )  */\n \n void\n-pp_c_direct_abstract_declarator (c_pretty_printer *pp, tree t)\n+c_pretty_printer::direct_abstract_declarator (tree t)\n {\n   switch (TREE_CODE (t))\n     {\n     case POINTER_TYPE:\n-      pp_abstract_declarator (pp, t);\n+      abstract_declarator (t);\n       break;\n \n     case FUNCTION_TYPE:\n-      pp_c_parameter_type_list (pp, t);\n-      pp_direct_abstract_declarator (pp, TREE_TYPE (t));\n+      pp_c_parameter_type_list (this, t);\n+      direct_abstract_declarator (TREE_TYPE (t));\n       break;\n \n     case ARRAY_TYPE:\n-      pp_c_left_bracket (pp);\n+      pp_c_left_bracket (this);\n       if (TYPE_DOMAIN (t) && TYPE_MAX_VALUE (TYPE_DOMAIN (t)))\n \t{\n \t  tree maxval = TYPE_MAX_VALUE (TYPE_DOMAIN (t));\n \t  tree type = TREE_TYPE (maxval);\n \n \t  if (host_integerp (maxval, 0))\n-\t    pp_wide_integer (pp, tree_low_cst (maxval, 0) + 1);\n+\t    pp_wide_integer (this, tree_low_cst (maxval, 0) + 1);\n \t  else\n-\t    pp_expression (pp, fold_build2 (PLUS_EXPR, type, maxval,\n+\t    pp_expression (this, fold_build2 (PLUS_EXPR, type, maxval,\n \t\t\t\t\t    build_int_cst (type, 1)));\n \t}\n-      pp_c_right_bracket (pp);\n-      pp_direct_abstract_declarator (pp, TREE_TYPE (t));\n+      pp_c_right_bracket (this);\n+      direct_abstract_declarator (TREE_TYPE (t));\n       break;\n \n     case IDENTIFIER_NODE:\n@@ -599,7 +599,7 @@ pp_c_direct_abstract_declarator (c_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_unsupported_tree (pp, t);\n+      pp_unsupported_tree (this, t);\n       break;\n     }\n }\n@@ -639,10 +639,10 @@ pp_c_storage_class_specifier (c_pretty_printer *pp, tree t)\n       inline   */\n \n void\n-pp_c_function_specifier (c_pretty_printer *pp, tree t)\n+c_pretty_printer::function_specifier (tree t)\n {\n   if (TREE_CODE (t) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (t))\n-    pp_c_ws_string (pp, \"inline\");\n+    pp_c_ws_string (this, \"inline\");\n }\n \n /* declaration-specifiers:\n@@ -652,11 +652,11 @@ pp_c_function_specifier (c_pretty_printer *pp, tree t)\n       function-specifier declaration-specifiers(opt)  */\n \n void\n-pp_c_declaration_specifiers (c_pretty_printer *pp, tree t)\n+c_pretty_printer::declaration_specifiers (tree t)\n {\n-  pp_storage_class_specifier (pp, t);\n-  pp_function_specifier (pp, t);\n-  pp_c_specifier_qualifier_list (pp, DECL_P (t) ?  TREE_TYPE (t) : t);\n+  pp_storage_class_specifier (this, t);\n+  pp_function_specifier (this, t);\n+  pp_c_specifier_qualifier_list (this, DECL_P (t) ?  TREE_TYPE (t) : t);\n }\n \n /* direct-declarator\n@@ -670,7 +670,7 @@ pp_c_declaration_specifiers (c_pretty_printer *pp, tree t)\n       direct-declarator ( identifier-list(opt) )  */\n \n void\n-pp_c_direct_declarator (c_pretty_printer *pp, tree t)\n+c_pretty_printer::direct_declarator (tree t)\n {\n   switch (TREE_CODE (t))\n     {\n@@ -679,29 +679,29 @@ pp_c_direct_declarator (c_pretty_printer *pp, tree t)\n     case TYPE_DECL:\n     case FIELD_DECL:\n     case LABEL_DECL:\n-      pp_c_space_for_pointer_operator (pp, TREE_TYPE (t));\n-      pp_c_tree_decl_identifier (pp, t);\n+      pp_c_space_for_pointer_operator (this, TREE_TYPE (t));\n+      pp_c_tree_decl_identifier (this, t);\n       break;\n \n     case ARRAY_TYPE:\n     case POINTER_TYPE:\n-      pp_abstract_declarator (pp, TREE_TYPE (t));\n+      abstract_declarator (TREE_TYPE (t));\n       break;\n \n     case FUNCTION_TYPE:\n-      pp_parameter_list (pp, t);\n-      pp_abstract_declarator (pp, TREE_TYPE (t));\n+      pp_parameter_list (this, t);\n+      abstract_declarator (TREE_TYPE (t));\n       break;\n \n     case FUNCTION_DECL:\n-      pp_c_space_for_pointer_operator (pp, TREE_TYPE (TREE_TYPE (t)));\n-      pp_c_tree_decl_identifier (pp, t);\n-      if (pp->flags & pp_c_flag_abstract)\n-\tpp_abstract_declarator (pp, TREE_TYPE (t));\n+      pp_c_space_for_pointer_operator (this, TREE_TYPE (TREE_TYPE (t)));\n+      pp_c_tree_decl_identifier (this, t);\n+      if (flags & pp_c_flag_abstract)\n+\tabstract_declarator (TREE_TYPE (t));\n       else\n \t{\n-\t  pp_parameter_list (pp, t);\n-\t  pp_abstract_declarator (pp, TREE_TYPE (TREE_TYPE (t)));\n+\t  pp_parameter_list (this, t);\n+\t  abstract_declarator (TREE_TYPE (TREE_TYPE (t)));\n \t}\n       break;\n \n@@ -714,7 +714,7 @@ pp_c_direct_declarator (c_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_unsupported_tree (pp, t);\n+      pp_unsupported_tree (this, t);\n       break;\n     }\n }\n@@ -724,7 +724,7 @@ pp_c_direct_declarator (c_pretty_printer *pp, tree t)\n       pointer(opt)  direct-declarator   */\n \n void\n-pp_c_declarator (c_pretty_printer *pp, tree t)\n+c_pretty_printer::declarator (tree t)\n {\n   switch (TREE_CODE (t))\n     {\n@@ -743,12 +743,12 @@ pp_c_declarator (c_pretty_printer *pp, tree t)\n     case FUNCTION_TYPE:\n     case FUNCTION_DECL:\n     case TYPE_DECL:\n-      pp_direct_declarator (pp, t);\n+      pp_direct_declarator (this, t);\n     break;\n \n \n     default:\n-      pp_unsupported_tree (pp, t);\n+      pp_unsupported_tree (this, t);\n       break;\n     }\n }\n@@ -757,10 +757,10 @@ pp_c_declarator (c_pretty_printer *pp, tree t)\n       declaration-specifiers init-declarator-list(opt) ;  */\n \n void\n-pp_c_declaration (c_pretty_printer *pp, tree t)\n+c_pretty_printer::declaration (tree t)\n {\n-  pp_declaration_specifiers (pp, t);\n-  pp_c_init_declarator (pp, t);\n+  declaration_specifiers (t);\n+  pp_c_init_declarator (this, t);\n }\n \n /* Pretty-print ATTRIBUTES using GNU C extension syntax.  */\n@@ -2325,18 +2325,11 @@ c_pretty_printer::c_pretty_printer ()\n {\n   offset_list               = 0;\n   flags\t\t\t= 0;\n-  declaration               = pp_c_declaration;\n-  declaration_specifiers    = pp_c_declaration_specifiers;\n-  declarator                = pp_c_declarator;\n-  direct_declarator         = pp_c_direct_declarator;\n   type_specifier_seq        = pp_c_specifier_qualifier_list;\n-  abstract_declarator       = pp_c_abstract_declarator;\n-  direct_abstract_declarator = pp_c_direct_abstract_declarator;\n   ptr_operator              = pp_c_pointer;\n   parameter_list            = pp_c_parameter_type_list;\n   type_id                   = pp_c_type_id;\n   simple_type_specifier     = pp_c_type_specifier;\n-  function_specifier        = pp_c_function_specifier;\n   storage_class_specifier   = pp_c_storage_class_specifier;\n \n   initializer               = pp_c_initializer;"}, {"sha": "4ab420daea5c19d1536c4e676d494873fde53f1a", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=8f0e4d72f2905596ecb212e8824a0a0e1489bab8", "patch": "@@ -66,6 +66,13 @@ struct c_pretty_printer : pretty_printer\n \n   virtual void statement (tree);\n \n+  virtual void declaration (tree);\n+  virtual void declaration_specifiers (tree);\n+  virtual void function_specifier (tree);\n+  virtual void declarator (tree);\n+  virtual void direct_declarator (tree);\n+  virtual void abstract_declarator (tree);\n+  virtual void direct_abstract_declarator (tree);\n   /* Points to the first element of an array of offset-list.\n      Not used yet.  */\n   int *offset_list;\n@@ -74,18 +81,11 @@ struct c_pretty_printer : pretty_printer\n \n   /* These must be overridden by each of the C and C++ front-end to\n      reflect their understanding of syntactic productions when they differ.  */\n-  c_pretty_print_fn declaration;\n-  c_pretty_print_fn declaration_specifiers;\n-  c_pretty_print_fn declarator;\n-  c_pretty_print_fn abstract_declarator;\n-  c_pretty_print_fn direct_abstract_declarator;\n   c_pretty_print_fn type_specifier_seq;\n-  c_pretty_print_fn direct_declarator;\n   c_pretty_print_fn ptr_operator;\n   c_pretty_print_fn parameter_list;\n   c_pretty_print_fn type_id;\n   c_pretty_print_fn simple_type_specifier;\n-  c_pretty_print_fn function_specifier;\n   c_pretty_print_fn storage_class_specifier;\n   c_pretty_print_fn initializer;\n \n@@ -94,20 +94,18 @@ struct c_pretty_printer : pretty_printer\n #define pp_c_tree_identifier(PPI, ID)              \\\n    pp_c_identifier (PPI, IDENTIFIER_POINTER (ID))\n \n-#define pp_declaration(PP, T)           (PP)->declaration (PP, T)\n+#define pp_declaration(PP, T)           (PP)->declaration (T)\n #define pp_declaration_specifiers(PP, D)         \\\n-   (PP)->declaration_specifiers (PP, D)\n-#define pp_abstract_declarator(PP, D)   (PP)->abstract_declarator (PP, D)\n+   (PP)->declaration_specifiers (D)\n+#define pp_abstract_declarator(PP, D)   (PP)->abstract_declarator (D)\n #define pp_type_specifier_seq(PP, D)    (PP)->type_specifier_seq (PP, D)\n-#define pp_declarator(PP, D)            (PP)->declarator (PP, D)\n-#define pp_direct_declarator(PP, D)     (PP)->direct_declarator (PP, D)\n-#define pp_direct_abstract_declarator(PP, D)      \\\n-   (PP)->direct_abstract_declarator (PP, D)\n+#define pp_declarator(PP, D)            (PP)->declarator (D)\n+#define pp_direct_declarator(PP, D)     (PP)->direct_declarator (D)\n #define pp_ptr_operator(PP, D)          (PP)->ptr_operator (PP, D)\n #define pp_parameter_list(PP, T)        (PP)->parameter_list (PP, T)\n #define pp_type_id(PP, D)               (PP)->type_id (PP, D)\n #define pp_simple_type_specifier(PP, T) (PP)->simple_type_specifier (PP, T)\n-#define pp_function_specifier(PP, D)    (PP)->function_specifier (PP, D)\n+#define pp_function_specifier(PP, D)    (PP)->function_specifier (D)\n #define pp_storage_class_specifier(PP, D)         \\\n   (PP)->storage_class_specifier (PP, D);\n \n@@ -150,14 +148,8 @@ void pp_c_attributes_display (c_pretty_printer *, tree);\n void pp_c_cv_qualifiers (c_pretty_printer *pp, int qualifiers, bool func_type);\n void pp_c_type_qualifier_list (c_pretty_printer *, tree);\n void pp_c_parameter_type_list (c_pretty_printer *, tree);\n-void pp_c_declaration (c_pretty_printer *, tree);\n-void pp_c_declaration_specifiers (c_pretty_printer *, tree);\n-void pp_c_declarator (c_pretty_printer *, tree);\n-void pp_c_direct_declarator (c_pretty_printer *, tree);\n void pp_c_specifier_qualifier_list (c_pretty_printer *, tree);\n-void pp_c_function_specifier (c_pretty_printer *, tree);\n void pp_c_type_id (c_pretty_printer *, tree);\n-void pp_c_direct_abstract_declarator (c_pretty_printer *, tree);\n void pp_c_type_specifier (c_pretty_printer *, tree);\n void pp_c_storage_class_specifier (c_pretty_printer *, tree);\n /* Expressions.  */"}, {"sha": "1e6d62104f8bcea46cabef69aba242b327e112e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8f0e4d72f2905596ecb212e8824a0a0e1489bab8", "patch": "@@ -1,3 +1,34 @@\n+2013-08-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* cxx-pretty-print.h (cxx_pretty_printer::declaration): Declare as\n+\toverrider.\n+\t(cxx_pretty_printer::declaration_specifiers): Likewise.\n+\t(cxx_pretty_printer::function_specifier): Likewise.\n+\t(cxx_pretty_printer::declarator): Likewise.\n+\t(cxx_pretty_printer::direct_declarator): Likewise.\n+\t(cxx_pretty_printer::abstract_declarator): Likewise.\n+\t(cxx_pretty_printer::direct_abstract_declarator): Likewise.\n+\t(pp_cxx_declaration): Remove.\n+\t* cxx-pretty-print.c (cxx_pretty_printer::function_specifier):\n+\tRename from pp_cxx_function_specifier.  Adjust.\n+\t(cxx_pretty_printer::declaration_specifiers): Rename from\n+\tpp_cxx_decl_specifier_seq.  Adjust.\n+\t(cxx_pretty_printer::direct_declarator): Rename from\n+\tpp_cxx_direct_declarator.  Adjust.\n+\t(cxx_pretty_printer::declarator): Rename from pp_cxx_declarator.\n+\tAdjust.\n+\t(cxx_pretty_printer::abstract_declarator): Rename from\n+\tpp_cxx_abstract_declarator.  Adjust.\n+\t(cxx_pretty_printer::direct_abstract_declarator): Rename from\n+\tpp_cxx_direct_abstract_declarator.  Adjust.\n+\t(cxx_pretty_printer::declaration): Rename from\n+\tpp_cxx_declaration.  Adjust.\n+\t(cxx_pretty_printer::cxx_pretty_printer): Do not assign to\n+\tdeclaration, declaration_specifiers, function_specifier,\n+\tdeclarator, direct_declarator, abstract_declarator,\n+\tdirect_abstract_declarator.\n+\t* error.c (dump_decl): Adjust.\n+\n 2013-08-29  Jan Hubicka  <jh@suse.cz>\n \n \tCorrect previous patch to not mark terminate as LEAF."}, {"sha": "4fc9cbc0aa7f26174f156c547137b869c28fa146", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 72, "deletions": 82, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=8f0e4d72f2905596ecb212e8824a0a0e1489bab8", "patch": "@@ -34,10 +34,7 @@ static void pp_cxx_template_argument_list (cxx_pretty_printer *, tree);\n static void pp_cxx_type_specifier_seq (cxx_pretty_printer *, tree);\n static void pp_cxx_ptr_operator (cxx_pretty_printer *, tree);\n static void pp_cxx_type_id (cxx_pretty_printer *, tree);\n-static void pp_cxx_direct_abstract_declarator (cxx_pretty_printer *, tree);\n-static void pp_cxx_declarator (cxx_pretty_printer *, tree);\n static void pp_cxx_parameter_declaration_clause (cxx_pretty_printer *, tree);\n-static void pp_cxx_abstract_declarator (cxx_pretty_printer *, tree);\n static void pp_cxx_template_parameter (cxx_pretty_printer *, tree);\n static void pp_cxx_cast_expression (cxx_pretty_printer *, tree);\n static void pp_cxx_typeid_expression (cxx_pretty_printer *, tree);\n@@ -1180,18 +1177,18 @@ cxx_pretty_printer::expression (tree t)\n       virtual\n       explicit   */\n \n-static void\n-pp_cxx_function_specifier (cxx_pretty_printer *pp, tree t)\n+void\n+cxx_pretty_printer::function_specifier (tree t)\n {\n   switch (TREE_CODE (t))\n     {\n     case FUNCTION_DECL:\n       if (DECL_VIRTUAL_P (t))\n-\tpp_cxx_ws_string (pp, \"virtual\");\n+\tpp_cxx_ws_string (this, \"virtual\");\n       else if (DECL_CONSTRUCTOR_P (t) && DECL_NONCONVERTING_P (t))\n-\tpp_cxx_ws_string (pp, \"explicit\");\n+\tpp_cxx_ws_string (this, \"explicit\");\n       else\n-\tpp_c_function_specifier (pp, t);\n+        c_pretty_printer::function_specifier (t);\n \n     default:\n       break;\n@@ -1208,34 +1205,34 @@ pp_cxx_function_specifier (cxx_pretty_printer *pp, tree t)\n       friend\n       typedef  */\n \n-static void\n-pp_cxx_decl_specifier_seq (cxx_pretty_printer *pp, tree t)\n+void\n+cxx_pretty_printer::declaration_specifiers (tree t)\n {\n   switch (TREE_CODE (t))\n     {\n     case VAR_DECL:\n     case PARM_DECL:\n     case CONST_DECL:\n     case FIELD_DECL:\n-      pp_cxx_storage_class_specifier (pp, t);\n-      pp_cxx_decl_specifier_seq (pp, TREE_TYPE (t));\n+      pp_cxx_storage_class_specifier (this, t);\n+      declaration_specifiers (TREE_TYPE (t));\n       break;\n \n     case TYPE_DECL:\n-      pp_cxx_ws_string (pp, \"typedef\");\n-      pp_cxx_decl_specifier_seq (pp, TREE_TYPE (t));\n+      pp_cxx_ws_string (this, \"typedef\");\n+      declaration_specifiers (TREE_TYPE (t));\n       break;\n \n     case FUNCTION_DECL:\n       /* Constructors don't have return types.  And conversion functions\n \t do not have a type-specifier in their return types.  */\n       if (DECL_CONSTRUCTOR_P (t) || DECL_CONV_FN_P (t))\n-\tpp_cxx_function_specifier (pp, t);\n+\tfunction_specifier (t);\n       else if (DECL_NONSTATIC_MEMBER_FUNCTION_P (t))\n-\tpp_cxx_decl_specifier_seq (pp, TREE_TYPE (TREE_TYPE (t)));\n+\tdeclaration_specifiers (TREE_TYPE (TREE_TYPE (t)));\n       else\n \tdefault:\n-      pp_c_declaration_specifiers (pp, t);\n+        c_pretty_printer::declaration_specifiers (t);\n       break;\n     }\n }\n@@ -1326,7 +1323,7 @@ pp_cxx_type_specifier_seq (cxx_pretty_printer *pp, tree t)\n       if (TYPE_PTRMEMFUNC_P (t))\n \t{\n \t  tree pfm = TYPE_PTRMEMFUNC_FN_TYPE (t);\n-\t  pp_cxx_decl_specifier_seq (pp, TREE_TYPE (TREE_TYPE (pfm)));\n+\t  pp->declaration_specifiers (TREE_TYPE (TREE_TYPE (pfm)));\n \t  pp_cxx_whitespace (pp);\n \t  pp_cxx_ptr_operator (pp, t);\n \t  break;\n@@ -1407,11 +1404,11 @@ pp_cxx_implicit_parameter_type (tree mf)\n static inline void\n pp_cxx_parameter_declaration (cxx_pretty_printer *pp, tree t)\n {\n-  pp_cxx_decl_specifier_seq (pp, t);\n+  pp->declaration_specifiers (t);\n   if (TYPE_P (t))\n-    pp_cxx_abstract_declarator (pp, t);\n+    pp_abstract_declarator (pp, t);\n   else\n-    pp_cxx_declarator (pp, t);\n+    pp_declarator (pp, t);\n }\n \n /* parameter-declaration-clause:\n@@ -1517,8 +1514,8 @@ pp_cxx_exception_specification (cxx_pretty_printer *pp, tree t)\n       direct-declaration [ constant-expression(opt) ]\n       ( declarator )  */\n \n-static void\n-pp_cxx_direct_declarator (cxx_pretty_printer *pp, tree t)\n+void\n+cxx_pretty_printer::direct_declarator (tree t)\n {\n   switch (TREE_CODE (t))\n     {\n@@ -1528,31 +1525,31 @@ pp_cxx_direct_declarator (cxx_pretty_printer *pp, tree t)\n     case FIELD_DECL:\n       if (DECL_NAME (t))\n \t{\n-\t  pp_cxx_space_for_pointer_operator (pp, TREE_TYPE (t));\n+\t  pp_cxx_space_for_pointer_operator (this, TREE_TYPE (t));\n \n \t  if ((TREE_CODE (t) == PARM_DECL && FUNCTION_PARAMETER_PACK_P (t))\n \t      || template_parameter_pack_p (t))\n \t    /* A function parameter pack or non-type template\n \t       parameter pack.  */\n-\t    pp_cxx_ws_string (pp, \"...\");\n+\t    pp_cxx_ws_string (this, \"...\");\n \t\t      \n-\t  pp_id_expression (pp, DECL_NAME (t));\n+\t  id_expression (DECL_NAME (t));\n \t}\n-      pp_cxx_abstract_declarator (pp, TREE_TYPE (t));\n+      abstract_declarator (TREE_TYPE (t));\n       break;\n \n     case FUNCTION_DECL:\n-      pp_cxx_space_for_pointer_operator (pp, TREE_TYPE (TREE_TYPE (t)));\n-      pp_id_expression (pp, t);\n-      pp_cxx_parameter_declaration_clause (pp, t);\n+      pp_cxx_space_for_pointer_operator (this, TREE_TYPE (TREE_TYPE (t)));\n+      expression (t);\n+      pp_cxx_parameter_declaration_clause (this, t);\n \n       if (DECL_NONSTATIC_MEMBER_FUNCTION_P (t))\n \t{\n-\t  pp->padding = pp_before;\n-\t  pp_cxx_cv_qualifier_seq (pp, pp_cxx_implicit_parameter_type (t));\n+\t  padding = pp_before;\n+\t  pp_cxx_cv_qualifier_seq (this, pp_cxx_implicit_parameter_type (t));\n \t}\n \n-      pp_cxx_exception_specification (pp, TREE_TYPE (t));\n+      pp_cxx_exception_specification (this, TREE_TYPE (t));\n       break;\n \n     case TYPENAME_TYPE:\n@@ -1563,7 +1560,7 @@ pp_cxx_direct_declarator (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_direct_declarator (pp, t);\n+      c_pretty_printer::direct_declarator (t);\n       break;\n     }\n }\n@@ -1572,10 +1569,10 @@ pp_cxx_direct_declarator (cxx_pretty_printer *pp, tree t)\n    direct-declarator\n    ptr-operator declarator  */\n \n-static void\n-pp_cxx_declarator (cxx_pretty_printer *pp, tree t)\n+void\n+cxx_pretty_printer::declarator (tree t)\n {\n-  pp_cxx_direct_declarator (pp, t);\n+  direct_declarator (t);\n }\n \n /* ctor-initializer:\n@@ -1624,8 +1621,8 @@ static void\n pp_cxx_function_definition (cxx_pretty_printer *pp, tree t)\n {\n   tree saved_scope = pp->enclosing_scope;\n-  pp_cxx_decl_specifier_seq (pp, t);\n-  pp_cxx_declarator (pp, t);\n+  pp->declaration_specifiers (t);\n+  pp_declarator (pp, t);\n   pp_needs_newline (pp) = true;\n   pp->enclosing_scope = DECL_CONTEXT (t);\n   if (DECL_SAVED_TREE (t))\n@@ -1640,19 +1637,19 @@ pp_cxx_function_definition (cxx_pretty_printer *pp, tree t)\n       ptr-operator abstract-declarator(opt)\n       direct-abstract-declarator  */\n \n-static void\n-pp_cxx_abstract_declarator (cxx_pretty_printer *pp, tree t)\n+void\n+cxx_pretty_printer::abstract_declarator (tree t)\n {\n   if (TYPE_PTRMEM_P (t))\n-    pp_cxx_right_paren (pp);\n+    pp_cxx_right_paren (this);\n   else if (POINTER_TYPE_P (t))\n     {\n       if (TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE\n \t  || TREE_CODE (TREE_TYPE (t)) == FUNCTION_TYPE)\n-\tpp_cxx_right_paren (pp);\n+\tpp_cxx_right_paren (this);\n       t = TREE_TYPE (t);\n     }\n-  pp_cxx_direct_abstract_declarator (pp, t);\n+  direct_abstract_declarator (t);\n }\n \n /* direct-abstract-declarator:\n@@ -1661,30 +1658,30 @@ pp_cxx_abstract_declarator (cxx_pretty_printer *pp, tree t)\n       direct-abstract-declarator(opt) [ constant-expression(opt) ]\n       ( abstract-declarator )  */\n \n-static void\n-pp_cxx_direct_abstract_declarator (cxx_pretty_printer *pp, tree t)\n+void\n+cxx_pretty_printer::direct_abstract_declarator (tree t)\n {\n   switch (TREE_CODE (t))\n     {\n     case REFERENCE_TYPE:\n-      pp_cxx_abstract_declarator (pp, t);\n+      abstract_declarator (t);\n       break;\n \n     case RECORD_TYPE:\n       if (TYPE_PTRMEMFUNC_P (t))\n-\tpp_cxx_direct_abstract_declarator (pp, TYPE_PTRMEMFUNC_FN_TYPE (t));\n+\tdirect_abstract_declarator (TYPE_PTRMEMFUNC_FN_TYPE (t));\n       break;\n \n     case METHOD_TYPE:\n     case FUNCTION_TYPE:\n-      pp_cxx_parameter_declaration_clause (pp, t);\n-      pp_cxx_direct_abstract_declarator (pp, TREE_TYPE (t));\n+      pp_cxx_parameter_declaration_clause (this, t);\n+      direct_abstract_declarator (TREE_TYPE (t));\n       if (TREE_CODE (t) == METHOD_TYPE)\n \t{\n-\t  pp->padding = pp_before;\n-\t  pp_cxx_cv_qualifier_seq (pp, class_of_this_parm (t));\n+\t  padding = pp_before;\n+\t  pp_cxx_cv_qualifier_seq (this, class_of_this_parm (t));\n \t}\n-      pp_cxx_exception_specification (pp, t);\n+      pp_cxx_exception_specification (this, t);\n       break;\n \n     case TYPENAME_TYPE:\n@@ -1695,7 +1692,7 @@ pp_cxx_direct_abstract_declarator (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      pp_c_direct_abstract_declarator (pp, t);\n+      c_pretty_printer::direct_abstract_declarator (t);\n       break;\n     }\n }\n@@ -1797,9 +1794,9 @@ pp_cxx_exception_declaration (cxx_pretty_printer *pp, tree t)\n   t = DECL_EXPR_DECL (t);\n   pp_cxx_type_specifier_seq (pp, t);\n   if (TYPE_P (t))\n-    pp_cxx_abstract_declarator (pp, t);\n+    pp_abstract_declarator (pp, t);\n   else\n-    pp_cxx_declarator (pp, t);\n+    pp_declarator (pp, t);\n }\n \n /* Statements.  */\n@@ -2008,7 +2005,7 @@ cxx_pretty_printer::statement (tree t)\n       break;\n \n     case STATIC_ASSERT:\n-      pp_cxx_declaration (this, t);\n+      declaration (t);\n       break;\n \n     default:\n@@ -2069,7 +2066,7 @@ pp_cxx_namespace_alias_definition (cxx_pretty_printer *pp, tree t)\n static void\n pp_cxx_simple_declaration (cxx_pretty_printer *pp, tree t)\n {\n-  pp_cxx_decl_specifier_seq (pp, t);\n+  pp->declaration_specifiers (t);\n   pp_cxx_init_declarator (pp, t);\n   pp_cxx_semicolon (pp);\n   pp_needs_newline (pp) = true;\n@@ -2209,32 +2206,32 @@ pp_cxx_explicit_instantiation (cxx_pretty_printer *pp, tree t)\n        using-directive\n        static_assert-declaration */\n void\n-pp_cxx_declaration (cxx_pretty_printer *pp, tree t)\n+cxx_pretty_printer::declaration (tree t)\n {\n   if (TREE_CODE (t) == STATIC_ASSERT)\n     {\n-      pp_cxx_ws_string (pp, \"static_assert\");\n-      pp_cxx_left_paren (pp);\n-      pp_expression (pp, STATIC_ASSERT_CONDITION (t));\n-      pp_cxx_separate_with (pp, ',');\n-      pp_expression (pp, STATIC_ASSERT_MESSAGE (t));\n-      pp_cxx_right_paren (pp);\n+      pp_cxx_ws_string (this, \"static_assert\");\n+      pp_cxx_left_paren (this);\n+      expression (STATIC_ASSERT_CONDITION (t));\n+      pp_cxx_separate_with (this, ',');\n+      expression (STATIC_ASSERT_MESSAGE (t));\n+      pp_cxx_right_paren (this);\n     }\n   else if (!DECL_LANG_SPECIFIC (t))\n-    pp_cxx_simple_declaration (pp, t);\n+    pp_cxx_simple_declaration (this, t);\n   else if (DECL_USE_TEMPLATE (t))\n     switch (DECL_USE_TEMPLATE (t))\n       {\n       case 1:\n-\tpp_cxx_template_declaration (pp, t);\n+\tpp_cxx_template_declaration (this, t);\n \tbreak;\n \n       case 2:\n-\tpp_cxx_explicit_specialization (pp, t);\n+\tpp_cxx_explicit_specialization (this, t);\n \tbreak;\n \n       case 3:\n-\tpp_cxx_explicit_instantiation (pp, t);\n+\tpp_cxx_explicit_instantiation (this, t);\n \tbreak;\n \n       default:\n@@ -2244,25 +2241,25 @@ pp_cxx_declaration (cxx_pretty_printer *pp, tree t)\n     {\n     case VAR_DECL:\n     case TYPE_DECL:\n-      pp_cxx_simple_declaration (pp, t);\n+      pp_cxx_simple_declaration (this, t);\n       break;\n \n     case FUNCTION_DECL:\n       if (DECL_SAVED_TREE (t))\n-\tpp_cxx_function_definition (pp, t);\n+\tpp_cxx_function_definition (this, t);\n       else\n-\tpp_cxx_simple_declaration (pp, t);\n+\tpp_cxx_simple_declaration (this, t);\n       break;\n \n     case NAMESPACE_DECL:\n       if (DECL_NAMESPACE_ALIAS (t))\n-\tpp_cxx_namespace_alias_definition (pp, t);\n+\tpp_cxx_namespace_alias_definition (this, t);\n       else\n-\tpp_cxx_original_namespace_definition (pp, t);\n+\tpp_cxx_original_namespace_definition (this, t);\n       break;\n \n     default:\n-      pp_unsupported_tree (pp, t);\n+      pp_unsupported_tree (this, t);\n       break;\n     }\n }\n@@ -2431,15 +2428,8 @@ cxx_pretty_printer::cxx_pretty_printer ()\n {\n   pp_set_line_maximum_length (this, 0);\n \n-  declaration = (pp_fun) pp_cxx_declaration;\n-  declaration_specifiers = (pp_fun) pp_cxx_decl_specifier_seq;\n-  function_specifier = (pp_fun) pp_cxx_function_specifier;\n   type_specifier_seq = (pp_fun) pp_cxx_type_specifier_seq;\n-  declarator = (pp_fun) pp_cxx_declarator;\n-  direct_declarator = (pp_fun) pp_cxx_direct_declarator;\n   parameter_list = (pp_fun) pp_cxx_parameter_declaration_clause;\n   type_id = (pp_fun) pp_cxx_type_id;\n-  abstract_declarator = (pp_fun) pp_cxx_abstract_declarator;\n-  direct_abstract_declarator = (pp_fun) pp_cxx_direct_abstract_declarator;\n   simple_type_specifier = (pp_fun) pp_cxx_simple_type_specifier;\n }"}, {"sha": "c9856b39482b6af84eccdfcc55a79191c03dab06", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=8f0e4d72f2905596ecb212e8824a0a0e1489bab8", "patch": "@@ -43,6 +43,13 @@ struct cxx_pretty_printer : c_pretty_printer\n   void assignment_expression (tree);\n   void expression (tree);\n   void statement (tree);\n+  void declaration (tree);\n+  void declaration_specifiers (tree);\n+  void function_specifier (tree);\n+  void declarator (tree);\n+  void direct_declarator (tree);\n+  void abstract_declarator (tree);\n+  void direct_abstract_declarator (tree);\n \n   /* This is the enclosing scope of the entity being pretty-printed.  */\n   tree enclosing_scope;\n@@ -77,7 +84,6 @@ void pp_cxx_end_template_argument_list (cxx_pretty_printer *);\n void pp_cxx_colon_colon (cxx_pretty_printer *);\n void pp_cxx_separate_with (cxx_pretty_printer *, int);\n \n-void pp_cxx_declaration (cxx_pretty_printer *, tree);\n void pp_cxx_canonical_template_parameter (cxx_pretty_printer *, tree);\n void pp_cxx_trait_expression (cxx_pretty_printer *, tree);\n void pp_cxx_va_arg_expression (cxx_pretty_printer *, tree);"}, {"sha": "cbb86a4874dfbd942f14124cc872f32ecd40711c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0e4d72f2905596ecb212e8824a0a0e1489bab8/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=8f0e4d72f2905596ecb212e8824a0a0e1489bab8", "patch": "@@ -1044,7 +1044,7 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n \n     case NAMESPACE_DECL:\n       if (flags & TFF_DECL_SPECIFIERS)\n-\tpp_cxx_declaration (pp, t);\n+\tpp->declaration (t);\n       else\n \t{\n \t  if (! (flags & TFF_UNQUALIFIED_NAME))\n@@ -1196,7 +1196,7 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n       break;\n \n     case STATIC_ASSERT:\n-      pp_cxx_declaration (pp, t);\n+      pp->declaration (t);\n       break;\n \n     case BASELINK:\n@@ -1209,7 +1209,7 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n \n     case TEMPLATE_TYPE_PARM:\n       if (flags & TFF_DECL_SPECIFIERS)\n-\tpp_cxx_declaration (pp, t);\n+\tpp->declaration (t);\n       else\n \tpp_type_id (pp, t);\n       break;"}]}