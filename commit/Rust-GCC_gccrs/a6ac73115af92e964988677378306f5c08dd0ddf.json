{"sha": "a6ac73115af92e964988677378306f5c08dd0ddf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZhYzczMTE1YWY5MmU5NjQ5ODg2NzczNzgzMDZmNWMwOGRkMGRkZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:42:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:42:03Z"}, "message": "[multiple changes]\n\n2016-04-27  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb: For \"gnat ls -V -P\", recognize switch\n\t--unchecked-shared-lib-imports and set the flag\n\tOpt.Unchecked_Shared_Lib_Imports accordingly.\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pre_Post_Condition_In_Decl_Part):\n\tA generic subprogram is never a primitive operation, and thus\n\ta classwide condition for it is not legal.\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_aggr.adb, sem_dim.adb, sem_dim.ads, einfo.adb: Minor\n\treformatting.\n\nFrom-SVN: r235494", "tree": {"sha": "d6927bc3c480a774a2a1da60a2833673f3729a23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6927bc3c480a774a2a1da60a2833673f3729a23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6ac73115af92e964988677378306f5c08dd0ddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ac73115af92e964988677378306f5c08dd0ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6ac73115af92e964988677378306f5c08dd0ddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ac73115af92e964988677378306f5c08dd0ddf/comments", "author": null, "committer": null, "parents": [{"sha": "888be6b18a697c7f57f2f74fa8dbab058bb819ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888be6b18a697c7f57f2f74fa8dbab058bb819ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888be6b18a697c7f57f2f74fa8dbab058bb819ef"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "1cf844c700a95161ea714efa862d531bbb1d4fb5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a6ac73115af92e964988677378306f5c08dd0ddf", "patch": "@@ -1,3 +1,20 @@\n+2016-04-27  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb: For \"gnat ls -V -P\", recognize switch\n+\t--unchecked-shared-lib-imports and set the flag\n+\tOpt.Unchecked_Shared_Lib_Imports accordingly.\n+\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pre_Post_Condition_In_Decl_Part):\n+\tA generic subprogram is never a primitive operation, and thus\n+\ta classwide condition for it is not legal.\n+\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_aggr.adb, sem_dim.adb, sem_dim.ads, einfo.adb: Minor\n+\treformatting.\n+\n 2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_res.adb (Flag_Effectively_Volatile_Objects): New routine."}, {"sha": "eade226f0428e608c89af463d622cace1b7d1f73", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=a6ac73115af92e964988677378306f5c08dd0ddf", "patch": "@@ -3935,17 +3935,13 @@ package body Einfo is\n \n    procedure Set_Corresponding_Function (Id : E; V : E) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Procedure\n-          and then Rewritten_For_C (V));\n+      pragma Assert (Ekind (Id) = E_Procedure and then Rewritten_For_C (V));\n       Set_Node32 (Id, V);\n    end Set_Corresponding_Function;\n \n    procedure Set_Corresponding_Procedure (Id : E; V : E) is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Function\n-          and then Rewritten_For_C (Id));\n+      pragma Assert (Ekind (Id) = E_Function and then Rewritten_For_C (Id));\n       Set_Node32 (Id, V);\n    end Set_Corresponding_Procedure;\n "}, {"sha": "433ac7d2bb0cac25323f6884713a424bff94c9d9", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=a6ac73115af92e964988677378306f5c08dd0ddf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -983,6 +983,14 @@ begin\n \n                      Remove_Switch (Arg_Num);\n \n+                  --  --unchecked-shared-lib-imports\n+\n+                  elsif Argv.all = \"--unchecked-shared-lib-imports\" then\n+                     Opt.Unchecked_Shared_Lib_Imports := True;\n+                     Remove_Switch (Arg_Num);\n+\n+                  --  gnat list -U\n+\n                   elsif\n                     The_Command = List\n                     and then Argv'Length = 2"}, {"sha": "876521b6d23cd3b04b21895dc8bf805996433bee", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=a6ac73115af92e964988677378306f5c08dd0ddf", "patch": "@@ -2052,8 +2052,8 @@ package body Sem_Aggr is\n                      Set_Parent (Expr, Parent (Expression (Assoc)));\n                      Analyze (Expr);\n \n-                     --  Compute its dimensions now, rather than at the end\n-                     --  of resolution, because in the case of multidimensional\n+                     --  Compute its dimensions now, rather than at the end of\n+                     --  resolution, because in the case of multidimensional\n                      --  aggregates subsequent expansion may lead to spurious\n                      --  errors.\n "}, {"sha": "4a9201570bdffebbeb18ba8e6ebbebd762d6e054", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=a6ac73115af92e964988677378306f5c08dd0ddf", "patch": "@@ -2277,8 +2277,8 @@ package body Sem_Dim is\n    ---------------------------------\n \n    procedure Check_Expression_Dimensions\n-      (Expr : Node_Id;\n-       Typ  : Entity_Id)\n+     (Expr : Node_Id;\n+      Typ  : Entity_Id)\n    is\n    begin\n       if Is_Floating_Point_Type (Etype (Expr)) then"}, {"sha": "44f4e86fced7abddff656e10278f59faf3d8ce6c", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=a6ac73115af92e964988677378306f5c08dd0ddf", "patch": "@@ -165,14 +165,14 @@ package Sem_Dim is\n    --  literal default value in the list of formals Formals.\n \n    procedure Check_Expression_Dimensions\n-      (Expr : Node_Id;\n-       Typ  : Entity_Id);\n-   --  Compute dimensions of a floating-point expression and compare them\n-   --  with the dimensions of a the given type. Used to verify dimensions\n-   --  of the components of a multidimensional array type, for which components\n-   --  are typically themselves arrays. The resolution of such arrays delays\n-   --  the resolution of the ultimate components to a separate phase, which\n-   --  forces this separate dimension verification.\n+     (Expr : Node_Id;\n+      Typ  : Entity_Id);\n+   --  Compute dimensions of a floating-point expression and compare them with\n+   --  the dimensions of a the given type. Used to verify dimensions of the\n+   --  components of a multidimensional array type, for which components are\n+   --  typically themselves arrays. The resolution of such arrays delays the\n+   --  resolution of the ultimate components to a separate phase, which forces\n+   --  this separate dimension verification.\n \n    procedure Copy_Dimensions (From, To : Node_Id);\n    --  Copy dimension vector of node From to node To. Note that To must be a"}, {"sha": "14b53ee3c41bd80ac02cac7b200097f0de91f32c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ac73115af92e964988677378306f5c08dd0ddf/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a6ac73115af92e964988677378306f5c08dd0ddf", "patch": "@@ -23319,11 +23319,12 @@ package body Sem_Prag is\n       if Class_Present (N) then\n \n          --  Verify that a class-wide condition is legal, i.e. the operation is\n-         --  a primitive of a tagged type.\n+         --  a primitive of a tagged type. Note that a generic subprogram is\n+         --  not a primitive operation.\n \n          Disp_Typ := Find_Dispatching_Type (Spec_Id);\n \n-         if No (Disp_Typ) then\n+         if No (Disp_Typ) or else Is_Generic_Subprogram (Spec_Id) then\n             Error_Msg_Name_1 := Original_Aspect_Pragma_Name (N);\n \n             if From_Aspect_Specification (N) then"}]}