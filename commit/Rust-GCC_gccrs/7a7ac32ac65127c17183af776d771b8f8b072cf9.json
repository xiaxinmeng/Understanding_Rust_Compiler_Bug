{"sha": "7a7ac32ac65127c17183af776d771b8f8b072cf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E3YWMzMmFjNjUxMjdjMTcxODNhZjc3NmQ3NzFiOGY4YjA3MmNmOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-05T01:20:00Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-05T01:20:00Z"}, "message": "Remove class cache_map and use ggc hash_maps instead (PR c++/70452)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/70452\n\t* cp-tree.h (class cache_map): Remove.\n\t* constexpr.c (cv_cache): Change type to\n\tGTY((deletable)) hash_map<tree, tree> *.\n\t(maybe_constant_value): Adjust following the change to cv_cache.\n\t(clear_cv_cache): New static function.\n\t(clear_cv_and_fold_caches): Use it.\n\t* cp-gimplify.c (fold_cache): Change type to\n\tGTY((deletable)) hash_map<tree, tree> *.\n\t(clear_fold_cache): Adjust following the change to fold_cache.\n\t(cp_fold): Likewise.\n\nFrom-SVN: r234732", "tree": {"sha": "5d77f7ebc216c41b2915991ee6a8accb5605b126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d77f7ebc216c41b2915991ee6a8accb5605b126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a7ac32ac65127c17183af776d771b8f8b072cf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a7ac32ac65127c17183af776d771b8f8b072cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a7ac32ac65127c17183af776d771b8f8b072cf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a7ac32ac65127c17183af776d771b8f8b072cf9/comments", "author": null, "committer": null, "parents": [{"sha": "cefb34aaf0bfe75719989877320ef071284ea9db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cefb34aaf0bfe75719989877320ef071284ea9db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cefb34aaf0bfe75719989877320ef071284ea9db"}], "stats": {"total": 93, "additions": 43, "deletions": 50}, "files": [{"sha": "77ac83db02fee1ab051e1cac8c7ca581c0272654", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a7ac32ac65127c17183af776d771b8f8b072cf9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a7ac32ac65127c17183af776d771b8f8b072cf9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a7ac32ac65127c17183af776d771b8f8b072cf9", "patch": "@@ -1,3 +1,17 @@\n+2016-04-05  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/70452\n+\t* cp-tree.h (class cache_map): Remove.\n+\t* constexpr.c (cv_cache): Change type to\n+\tGTY((deletable)) hash_map<tree, tree> *.\n+\t(maybe_constant_value): Adjust following the change to cv_cache.\n+\t(clear_cv_cache): New static function.\n+\t(clear_cv_and_fold_caches): Use it.\n+\t* cp-gimplify.c (fold_cache): Change type to\n+\tGTY((deletable)) hash_map<tree, tree> *.\n+\t(clear_fold_cache): Adjust following the change to fold_cache.\n+\t(cp_fold): Likewise.\n+\n 2016-04-02  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/67376"}, {"sha": "0607b08860cf28f24a5f4832ec7a9af1ae235fd7", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a7ac32ac65127c17183af776d771b8f8b072cf9/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a7ac32ac65127c17183af776d771b8f8b072cf9/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7a7ac32ac65127c17183af776d771b8f8b072cf9", "patch": "@@ -4215,7 +4215,7 @@ maybe_constant_value_1 (tree t, tree decl)\n   return r;\n }\n \n-static GTY((cache, deletable)) cache_map cv_cache;\n+static GTY((deletable)) hash_map<tree, tree> *cv_cache;\n \n /* If T is a constant expression, returns its reduced value.\n    Otherwise, if T does not have TREE_CONSTANT set, returns T.\n@@ -4224,21 +4224,32 @@ static GTY((cache, deletable)) cache_map cv_cache;\n tree\n maybe_constant_value (tree t, tree decl)\n {\n-  tree ret = cv_cache.get (t);\n-  if (!ret)\n-    {\n-      ret = maybe_constant_value_1 (t, decl);\n-      cv_cache.put (t, ret);\n-    }\n+  if (cv_cache == NULL)\n+    cv_cache = hash_map<tree, tree>::create_ggc (101);\n+\n+  if (tree *cached = cv_cache->get (t))\n+    return *cached;\n+\n+  tree ret = maybe_constant_value_1 (t, decl);\n+  cv_cache->put (t, ret);\n   return ret;\n }\n \n+/* Dispose of the whole CV_CACHE.  */\n+\n+static void\n+clear_cv_cache (void)\n+{\n+  if (cv_cache != NULL)\n+    cv_cache->empty ();\n+}\n+\n /* Dispose of the whole CV_CACHE and FOLD_CACHE.  */\n \n void\n clear_cv_and_fold_caches (void)\n {\n-  gt_cleare_cache (cv_cache);\n+  clear_cv_cache ();\n   clear_fold_cache ();\n }\n "}, {"sha": "13f7b7ccbd7666e4f9c6c8f5c257a018e909bacb", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a7ac32ac65127c17183af776d771b8f8b072cf9/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a7ac32ac65127c17183af776d771b8f8b072cf9/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=7a7ac32ac65127c17183af776d771b8f8b072cf9", "patch": "@@ -1905,14 +1905,15 @@ c_fully_fold (tree x, bool /*in_init*/, bool */*maybe_const*/)\n   return cp_fold_rvalue (x);\n }\n \n-static GTY((cache, deletable)) cache_map fold_cache;\n+static GTY((deletable)) hash_map<tree, tree> *fold_cache;\n \n /* Dispose of the whole FOLD_CACHE.  */\n \n void\n clear_fold_cache (void)\n {\n-  gt_cleare_cache (fold_cache);\n+  if (fold_cache != NULL)\n+    fold_cache->empty ();\n }\n \n /*  This function tries to fold an expression X.\n@@ -1942,8 +1943,11 @@ cp_fold (tree x)\n   if (DECL_P (x) || CONSTANT_CLASS_P (x))\n     return x;\n \n-  if (tree cached = fold_cache.get (x))\n-    return cached;\n+  if (fold_cache == NULL)\n+    fold_cache = hash_map<tree, tree>::create_ggc (101);\n+\n+  if (tree *cached = fold_cache->get (x))\n+    return *cached;\n \n   code = TREE_CODE (x);\n   switch (code)\n@@ -2298,10 +2302,10 @@ cp_fold (tree x)\n       return org_x;\n     }\n \n-  fold_cache.put (org_x, x);\n+  fold_cache->put (org_x, x);\n   /* Prevent that we try to fold an already folded result again.  */\n   if (x != org_x)\n-    fold_cache.put (x, x);\n+    fold_cache->put (x, x);\n \n   return x;\n }"}, {"sha": "d2bf717ae63bcf87a5ac506735ac3f936c1ecef5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a7ac32ac65127c17183af776d771b8f8b072cf9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a7ac32ac65127c17183af776d771b8f8b072cf9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7a7ac32ac65127c17183af776d771b8f8b072cf9", "patch": "@@ -5525,42 +5525,6 @@ extern cp_parameter_declarator *no_parameters;\n /* True if we saw \"#pragma GCC java_exceptions\".  */\n extern bool pragma_java_exceptions;\n \n-/* Data structure for a mapping from tree to tree that's only used as a cache;\n-   we don't GC-mark trees in the map, and we clear the map when collecting\n-   garbage.  Global variables of this type must be marked\n-   GTY((cache,deletable)) so that the gt_cleare_cache function is called by\n-   ggc_collect but we don't try to load the map pointer from a PCH.\n-\n-   FIXME improve to use keep_cache_entry.  */\n-class cache_map\n-{\n-  /* Use a lazily initialized pointer rather than a map member since a\n-     hash_map can't be constructed in a static initializer.  */\n-  hash_map<tree, tree> *map;\n-\n-public:\n-  tree get (tree key)\n-  {\n-    if (map)\n-      if (tree *slot = map->get (key))\n-\treturn *slot;\n-    return NULL_TREE;\n-  }\n-\n-  bool put (tree key, tree val)\n-  {\n-    if (!map)\n-      map = new hash_map<tree, tree>;\n-    return map->put (key, val);\n-  }\n-\n-  friend inline void gt_cleare_cache (cache_map &cm)\n-  {\n-    if (cm.map)\n-      cm.map->empty();\n-  }\n-};\n-\n /* in call.c */\n extern bool check_dtor_name\t\t\t(tree, tree);\n int magic_varargs_p\t\t\t\t(tree);"}]}