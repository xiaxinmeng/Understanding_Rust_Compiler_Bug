{"sha": "320e32f649fa1c9e4ae6832552c478653d605121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIwZTMyZjY0OWZhMWM5ZTRhZTY4MzI1NTJjNDc4NjUzZDYwNTEyMQ==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-07-17T11:17:28Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-07-17T11:17:28Z"}, "message": "[multiple changes]\n\n2004-07-17  Jeroen Frijters  <jeroen@frijters.net>\n\n\t* java/net/DatagramPacket.java (setAddress): Removed check for\n\tnull address.\n\n2004-07-17  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramSocket.java\n\t(getLocalAddress): Check if socket is bound or not.\n\t* java/net/Socket.java\n\t(getLocalAddrss): Check if socket is bound or not.\n\t(getPort): Return -1 when not connected. Dont check getImpl() for\n\tnull.\n\t(setReuseAddress): Check if socket is closed.\n\t(isConnected): Check if getImpl() returns null.\n\nFrom-SVN: r84864", "tree": {"sha": "e934e1ac095dfb7259f339c2194657fa45f964a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e934e1ac095dfb7259f339c2194657fa45f964a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/320e32f649fa1c9e4ae6832552c478653d605121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320e32f649fa1c9e4ae6832552c478653d605121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320e32f649fa1c9e4ae6832552c478653d605121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320e32f649fa1c9e4ae6832552c478653d605121/comments", "author": null, "committer": null, "parents": [{"sha": "4928181ca2157ee10db623931316a05288822bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4928181ca2157ee10db623931316a05288822bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4928181ca2157ee10db623931316a05288822bb3"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "b73fa4609785b5fe27ab245bc3db6a02fde35e14", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e32f649fa1c9e4ae6832552c478653d605121/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e32f649fa1c9e4ae6832552c478653d605121/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=320e32f649fa1c9e4ae6832552c478653d605121", "patch": "@@ -1,3 +1,19 @@\n+2004-07-17  Jeroen Frijters  <jeroen@frijters.net>\n+\n+\t* java/net/DatagramPacket.java (setAddress): Removed check for\n+\tnull address.\n+\n+2004-07-17  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramSocket.java\n+\t(getLocalAddress): Check if socket is bound or not.\n+\t* java/net/Socket.java\n+\t(getLocalAddrss): Check if socket is bound or not.\n+\t(getPort): Return -1 when not connected. Dont check getImpl() for\n+\tnull.\n+\t(setReuseAddress): Check if socket is closed.\n+\t(isConnected): Check if getImpl() returns null.\n+\n 2004-07-17  Mark Wielaard  <mark@klomp.org>\n \n \t* java/awt/event/InvocationEvent.java (dispatch): Synchronize"}, {"sha": "549a3609a3dcf44b9abe4eb0c37673a79f4659aa", "filename": "libjava/java/net/DatagramPacket.java", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e32f649fa1c9e4ae6832552c478653d605121/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e32f649fa1c9e4ae6832552c478653d605121/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramPacket.java?ref=320e32f649fa1c9e4ae6832552c478653d605121", "patch": "@@ -278,9 +278,6 @@ public synchronized int getLength()\n    */\n   public synchronized void setAddress(InetAddress address)\n   {\n-    if (address == null)\n-      throw new NullPointerException(\"Null address\");\n-\n     this.address = address;\n   }\n "}, {"sha": "d29d122349838aef8d14d5ee54e7b446e0b60a06", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e32f649fa1c9e4ae6832552c478653d605121/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e32f649fa1c9e4ae6832552c478653d605121/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=320e32f649fa1c9e4ae6832552c478653d605121", "patch": "@@ -1,5 +1,6 @@\n /* DatagramSocket.java -- A class to model UDP sockets\n-   Copyright (C) 1998, 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -282,7 +283,7 @@ public int getPort()\n    */\n   public InetAddress getLocalAddress()\n   {\n-    if (isClosed())\n+    if (! isBound())\n       return null;\n \n     InetAddress localAddr;"}, {"sha": "714a958e6aaaa27d418dcda2903f6603816ccf94", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e32f649fa1c9e4ae6832552c478653d605121/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e32f649fa1c9e4ae6832552c478653d605121/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=320e32f649fa1c9e4ae6832552c478653d605121", "patch": "@@ -488,6 +488,9 @@ public InetAddress getInetAddress()\n    */\n   public InetAddress getLocalAddress()\n   {\n+    if (! isBound())\n+      return null;\n+\n     InetAddress addr = null;\n \n     try\n@@ -523,12 +526,11 @@ public InetAddress getLocalAddress()\n   public int getPort()\n   {\n     if (! isConnected())\n-      return 0;\n+      return -1;\n \n     try\n       {\n-\tif (getImpl() != null)\n-\t  return getImpl().getPort();\n+\treturn getImpl().getPort();\n       }\n     catch (SocketException e)\n       {\n@@ -1155,6 +1157,9 @@ public boolean getReuseAddress() throws SocketException\n    */\n   public void setReuseAddress(boolean reuseAddress) throws SocketException\n   {\n+    if (isClosed())\n+      throw new SocketException(\"socket is closed\");\n+\n     getImpl().setOption(SocketOptions.SO_REUSEADDR,\n                         Boolean.valueOf(reuseAddress));\n   }\n@@ -1217,6 +1222,9 @@ public boolean isConnected()\n   {\n     try\n       {\n+\tif (getImpl() == null)\n+\t  return false;\n+\n \treturn getImpl().getInetAddress() != null;\n       }\n     catch (SocketException e)"}]}