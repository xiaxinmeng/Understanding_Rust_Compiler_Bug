{"sha": "3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg4NTUyN2RkZjllYTQ3ZDBlYWI4ZDJjM2E1MDNhOGU4ZTAxZDk3ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-01-24T00:57:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-01-24T00:57:18Z"}, "message": "re PR c++/83921 (GCC rejects constexpr initialization of empty aggregate.)\n\n/cp\n2018-01-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/83921\n\t* decl.c (check_for_uninitialized_const_var): Not static; add\n\tbool and tsubst_flags_t parameters; adjust to be used both in\n\tconstexpr context and not.\n\t* constexpr.c (potential_constant_expression_1): Use the above.\n\t* cp-tree.h (check_for_uninitialized_const_var): Declare.\n\n/testsuite\n2018-01-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/83921\n\t* g++.dg/cpp1y/constexpr-83921-1.C: New.\n\t* g++.dg/cpp1y/constexpr-83921-2.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-83921-3.C: Likewise.\n\t* g++.dg/ext/stmtexpr20.C: Likewise.\n\t* g++.dg/ext/stmtexpr21.C: Likewise.\n\nFrom-SVN: r257009", "tree": {"sha": "641f7b766de5780ead06404f4d066048faaab748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/641f7b766de5780ead06404f4d066048faaab748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/comments", "author": null, "committer": null, "parents": [{"sha": "7a007e4485a266005c8d2a8e8236c7c7e05ed27e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a007e4485a266005c8d2a8e8236c7c7e05ed27e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a007e4485a266005c8d2a8e8236c7c7e05ed27e"}], "stats": {"total": 129, "additions": 103, "deletions": 26}, "files": [{"sha": "bc89041a7daa612a3f24ec775264bab178cfaf1a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "patch": "@@ -1,3 +1,12 @@\n+2018-01-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/83921\n+\t* decl.c (check_for_uninitialized_const_var): Not static; add\n+\tbool and tsubst_flags_t parameters; adjust to be used both in\n+\tconstexpr context and not.\n+\t* constexpr.c (potential_constant_expression_1): Use the above.\n+\t* cp-tree.h (check_for_uninitialized_const_var): Declare.\n+\n 2018-01-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/83947 - ICE with auto declarations."}, {"sha": "4d2ee4a28fca6a6e0a7851725a0a4d9f5dde7214", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "patch": "@@ -5707,13 +5707,9 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\t\t  \"%<thread_local%> in %<constexpr%> context\", tmp);\n \t      return false;\n \t    }\n-\t  else if (!DECL_NONTRIVIALLY_INITIALIZED_P (tmp))\n-\t    {\n-\t      if (flags & tf_error)\n-\t\terror_at (DECL_SOURCE_LOCATION (tmp), \"uninitialized \"\n-\t\t\t  \"variable %qD in %<constexpr%> context\", tmp);\n-\t      return false;\n-\t    }\n+\t  else if (!check_for_uninitialized_const_var\n+\t\t   (tmp, /*constexpr_context_p=*/true, flags))\n+\t    return false;\n \t}\n       return RECUR (tmp, want_rval);\n "}, {"sha": "8983674881d4a9fed3673a82585fc57759b05919", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "patch": "@@ -6221,6 +6221,7 @@ extern tree finish_case_label\t\t\t(location_t, tree, tree);\n extern tree cxx_maybe_build_cleanup\t\t(tree, tsubst_flags_t);\n extern bool check_array_designated_initializer  (constructor_elt *,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT);\n+extern bool check_for_uninitialized_const_var   (tree, bool, tsubst_flags_t);\n \n /* in decl2.c */\n extern void record_mangling\t\t\t(tree, bool);"}, {"sha": "408a1b778305919def12c700a55a3c90ac26c706", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "patch": "@@ -72,7 +72,6 @@ static int check_static_variable_definition (tree, tree);\n static void record_unknown_type (tree, const char *);\n static tree builtin_function_1 (tree, tree, bool);\n static int member_function_or_else (tree, tree, enum overload_flags);\n-static void check_for_uninitialized_const_var (tree);\n static tree local_variable_p_walkfn (tree *, int *, void *);\n static const char *tag_name (enum tag_types);\n static tree lookup_and_check_tag (enum tag_types, tree, tag_scope, bool);\n@@ -5545,10 +5544,14 @@ maybe_commonize_var (tree decl)\n     }\n }\n \n-/* Issue an error message if DECL is an uninitialized const variable.  */\n+/* Issue an error message if DECL is an uninitialized const variable.\n+   CONSTEXPR_CONTEXT_P is true when the function is called in a constexpr\n+   context from potential_constant_expression.  Returns true if all is well,\n+   false otherwise.  */\n \n-static void\n-check_for_uninitialized_const_var (tree decl)\n+bool\n+check_for_uninitialized_const_var (tree decl, bool constexpr_context_p,\n+\t\t\t\t   tsubst_flags_t complain)\n {\n   tree type = strip_array_types (TREE_TYPE (decl));\n \n@@ -5557,26 +5560,38 @@ check_for_uninitialized_const_var (tree decl)\n      7.1.6 */\n   if (VAR_P (decl)\n       && TREE_CODE (type) != REFERENCE_TYPE\n-      && (CP_TYPE_CONST_P (type) || var_in_constexpr_fn (decl))\n-      && !DECL_INITIAL (decl))\n+      && (constexpr_context_p\n+\t  || CP_TYPE_CONST_P (type) || var_in_constexpr_fn (decl))\n+      && !DECL_NONTRIVIALLY_INITIALIZED_P (decl))\n     {\n       tree field = default_init_uninitialized_part (type);\n       if (!field)\n-\treturn;\n+\treturn true;\n \n-      if (CP_TYPE_CONST_P (type))\n-\tpermerror (DECL_SOURCE_LOCATION (decl),\n-\t\t   \"uninitialized const %qD\", decl);\n-      else\n+      if (!constexpr_context_p)\n \t{\n-\t  if (!is_instantiation_of_constexpr (current_function_decl))\n-\t    error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t      \"uninitialized variable %qD in %<constexpr%> function\",\n-\t\t      decl);\n-\t  cp_function_chain->invalid_constexpr = true;\n+\t  if (CP_TYPE_CONST_P (type))\n+\t    {\n+\t      if (complain & tf_error)\n+\t\tpermerror (DECL_SOURCE_LOCATION (decl),\n+\t\t\t   \"uninitialized const %qD\", decl);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (!is_instantiation_of_constexpr (current_function_decl)\n+\t\t  && (complain & tf_error))\n+\t\terror_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\t  \"uninitialized variable %qD in %<constexpr%> \"\n+\t\t\t  \"function\", decl);\n+\t      cp_function_chain->invalid_constexpr = true;\n+\t    }\n \t}\n+      else if (complain & tf_error)\n+\terror_at (DECL_SOURCE_LOCATION (decl),\n+\t\t  \"uninitialized variable %qD in %<constexpr%> context\",\n+\t\t  decl);\n \n-      if (CLASS_TYPE_P (type))\n+      if (CLASS_TYPE_P (type) && (complain & tf_error))\n \t{\n \t  tree defaulted_ctor;\n \n@@ -5591,7 +5606,11 @@ check_for_uninitialized_const_var (tree decl)\n \t\t  \"and the implicitly-defined constructor does not \"\n \t\t  \"initialize %q#D\", field);\n \t}\n+\n+      return false;\n     }\n+\n+  return true;\n }\n \f\n /* Structure holding the current initializer being processed by reshape_init.\n@@ -6252,7 +6271,8 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t  flags |= LOOKUP_ALREADY_DIGESTED;\n \t}\n       else if (!init)\n-\tcheck_for_uninitialized_const_var (decl);\n+\tcheck_for_uninitialized_const_var (decl, /*constexpr_context_p=*/false,\n+\t\t\t\t\t   tf_warning_or_error);\n       /* Do not reshape constructors of vectors (they don't need to be\n \t reshaped.  */\n       else if (BRACE_ENCLOSED_INITIALIZER_P (init))\n@@ -6379,7 +6399,8 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \tdiagnose_uninitialized_cst_or_ref_member (core_type, /*using_new=*/false,\n \t\t\t\t\t\t  /*complain=*/true);\n \n-      check_for_uninitialized_const_var (decl);\n+      check_for_uninitialized_const_var (decl, /*constexpr_context_p=*/false,\n+\t\t\t\t\t tf_warning_or_error);\n     }\n \n   if (init && init != error_mark_node)"}, {"sha": "23fdb9fd30c96d397f8a76ffddcb242991260b2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "patch": "@@ -1,3 +1,12 @@\n+2018-01-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/83921\n+\t* g++.dg/cpp1y/constexpr-83921-1.C: New.\n+\t* g++.dg/cpp1y/constexpr-83921-2.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-83921-3.C: Likewise.\n+\t* g++.dg/ext/stmtexpr20.C: Likewise.\n+\t* g++.dg/ext/stmtexpr21.C: Likewise.\n+\n 2018-01-23  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/83974"}, {"sha": "e4b8d1fc42053c719c25b4d50d83db4536ca3a56", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-83921-1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-1.C?ref=3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/83921\n+// { dg-do compile { target c++14 } }\n+\n+struct Foo { };\n+constexpr void test() { Foo f; }"}, {"sha": "80393fc6ce7cd903e2b618e96bd073f06733151c", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-83921-2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-2.C?ref=3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/83921\n+// { dg-do compile { target c++14 } }\n+\n+struct Foo { Foo() = default; };\n+constexpr void test() { Foo f; }"}, {"sha": "4b1ed5c3a87b5b2d3b57373026e00727279ac886", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-83921-3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-83921-3.C?ref=3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/83921\n+// { dg-do compile { target c++14 } }\n+\n+struct Foo { int m; };\n+constexpr void test() { Foo f; }  // { dg-error \"uninitialized\" }"}, {"sha": "33355e3b990d1f1b80243805332e366546adbab4", "filename": "gcc/testsuite/g++.dg/ext/stmtexpr20.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr20.C?ref=3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/83921\n+// { dg-options \"\" }\n+// { dg-do compile { target c++11 } }\n+\n+struct test { const int *addr; };\n+\n+const test* setup()\n+{\n+  static constexpr test atest =\n+    { ({ int inner = 1; (const int*)(0); }) };\n+\n+  return &atest;\n+}"}, {"sha": "259cb2f19139217370e17679f2b58513346d5cd7", "filename": "gcc/testsuite/g++.dg/ext/stmtexpr21.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr21.C?ref=3885527ddf9ea47d0eab8d2c3a503a8e8e01d97d", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/83921\n+// { dg-options \"\" }\n+// { dg-do compile { target c++11 } }\n+\n+struct test { const int *addr; };\n+\n+const test* setup()\n+{\n+  static constexpr test atest =\n+    { ({ int inner; (const int*)(0); }) };  // { dg-error \"uninitialized\" }\n+\n+  return &atest;\n+}"}]}