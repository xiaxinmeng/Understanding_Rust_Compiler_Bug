{"sha": "74a96dd28c997a55344c201baeed409e9e4ce7af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRhOTZkZDI4Yzk5N2E1NTM0NGMyMDFiYWVlZDQwOWU5ZTRjZTdhZg==", "commit": {"author": {"name": "Vladislav Ivanishin", "email": "vlad@ispras.ru", "date": "2019-05-16T12:36:33Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2019-05-16T12:36:33Z"}, "message": "tree-ssa-uninit: avoid ICE with BIT_AND_EXPR (PR 90394)\n\n2019-05-16  Vladislav Ivanishin  <vlad@ispras.ru>\n\n\tPR tree-optimization/90394\n\t* tree-ssa-uninit.c (is_pred_expr_subset_of): Potentially give false\n\tpositives rather than ICE for cases where (code2 == NE_EXPR\n\t&& code1 == BIT_AND_EXPR).\n\ntestsuite/\n\t* gcc.dg/uninit-pr90394-1-gimple.c: New test.\n\t* gcc.dg/uninit-pr90394.c: New test.\n\nFrom-SVN: r271287", "tree": {"sha": "f3a06302d57d8915faa04cfa381930c2438ad6de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3a06302d57d8915faa04cfa381930c2438ad6de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74a96dd28c997a55344c201baeed409e9e4ce7af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a96dd28c997a55344c201baeed409e9e4ce7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a96dd28c997a55344c201baeed409e9e4ce7af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a96dd28c997a55344c201baeed409e9e4ce7af/comments", "author": {"login": "ivladak", "id": 3601329, "node_id": "MDQ6VXNlcjM2MDEzMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/3601329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivladak", "html_url": "https://github.com/ivladak", "followers_url": "https://api.github.com/users/ivladak/followers", "following_url": "https://api.github.com/users/ivladak/following{/other_user}", "gists_url": "https://api.github.com/users/ivladak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivladak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivladak/subscriptions", "organizations_url": "https://api.github.com/users/ivladak/orgs", "repos_url": "https://api.github.com/users/ivladak/repos", "events_url": "https://api.github.com/users/ivladak/events{/privacy}", "received_events_url": "https://api.github.com/users/ivladak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0bc229dbbe2a109ea39d08ced1bb296c59bcd120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc229dbbe2a109ea39d08ced1bb296c59bcd120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc229dbbe2a109ea39d08ced1bb296c59bcd120"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "df8135bc5fed542499f9dbea9fdfb17ab4a77150", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a96dd28c997a55344c201baeed409e9e4ce7af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a96dd28c997a55344c201baeed409e9e4ce7af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74a96dd28c997a55344c201baeed409e9e4ce7af", "patch": "@@ -1,3 +1,10 @@\n+2019-05-16  Vladislav Ivanishin  <vlad@ispras.ru>\n+\n+\tPR tree-optimization/90394\n+\t* tree-ssa-uninit.c (is_pred_expr_subset_of): Potentially give false\n+\tpositives rather than ICE for cases where (code2 == NE_EXPR\n+\t&& code1 == BIT_AND_EXPR).\n+\n 2019-05-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/90329"}, {"sha": "d7af875cf74f053cef2ad90e10a8cb9d308d5da2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a96dd28c997a55344c201baeed409e9e4ce7af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a96dd28c997a55344c201baeed409e9e4ce7af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74a96dd28c997a55344c201baeed409e9e4ce7af", "patch": "@@ -1,3 +1,9 @@\n+2019-05-16  Vladislav Ivanishin  <vlad@ispras.ru>\n+\n+\tPR tree-optimization/90394\n+\t* gcc.dg/uninit-pr90394-1-gimple.c: New test.\n+\t* gcc.dg/uninit-pr90394.c: New test.\n+\n 2019-05-16  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/90502"}, {"sha": "f8feb6b8967906f44ab4d7d49984d2785dc9a875", "filename": "gcc/testsuite/gcc.dg/uninit-pr90394-1-gimple.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a96dd28c997a55344c201baeed409e9e4ce7af/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr90394-1-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a96dd28c997a55344c201baeed409e9e4ce7af/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr90394-1-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr90394-1-gimple.c?ref=74a96dd28c997a55344c201baeed409e9e4ce7af", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple -O -Wmaybe-uninitialized\" } */\n+\n+unsigned int __GIMPLE (ssa,startwith(\"uninit1\"))\n+foo (unsigned int v)\n+{\n+  /* The warning is not bogus, because (5 & 3) != 0 and therefore if v == 5,\n+     the value of undef is used without being initialized.  */\n+  unsigned int undef;        /* { dg-warning \"may be used uninitialized\" } */\n+  unsigned int _2;\n+  unsigned int _9;\n+  unsigned int _10;\n+  unsigned pred;\n+\n+  __BB(2):\n+  if (v_4(D) != 5u)\n+    goto __BB3;\n+  else\n+    goto __BB4;\n+\n+  /* 'undef' is defined conditionally (under 'v != 5' predicate)  */\n+  __BB(3):\n+  undef_8 = 8u;\n+  goto __BB4;\n+\n+  /* An undef value flows into a phi.  */\n+  __BB(4):\n+  undef_1 = __PHI (__BB2: undef_5(D), __BB3: undef_8);\n+  pred = v_4(D) & 3u;\n+  if (pred != 0u)\n+    goto __BB5;\n+  else\n+    goto __BB6;\n+\n+  /* The phi value is used here (under 'v & 3' predicate).  */\n+  __BB(5):\n+  _9 = undef_1;\n+  goto __BB7;\n+\n+  __BB(6):\n+  _10 = v_4(D);\n+  goto __BB7;\n+\n+  __BB(7):\n+  _2 = __PHI (__BB5: _9, __BB6: _10);\n+  return _2;\n+}"}, {"sha": "16e750d6b33bcf9422f4891a67cb8588183d8d67", "filename": "gcc/testsuite/gcc.dg/uninit-pr90394.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a96dd28c997a55344c201baeed409e9e4ce7af/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr90394.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a96dd28c997a55344c201baeed409e9e4ce7af/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr90394.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr90394.c?ref=74a96dd28c997a55344c201baeed409e9e4ce7af", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fno-tree-fre -Wuninitialized\" } */\n+int pz;\n+int zi;\n+\n+void\n+uk (void)\n+{\n+  int th = 1;\n+  int *gw = &zi;\n+\n+  for (zi = 0; zi < 2; ++zi)\n+    {\n+      int a2 = 0;\n+\n+      for (zi = 0; zi < 1; ++zi)\n+        {\n+          th = a2 * 2;\n+\n+ og:\n+          for (pz = 0; pz < 1; ++pz)\n+            {\n+            }\n+        }\n+\n+      pz = !!*gw ? *gw : pz;\n+      pz = (!!th ? (pz & 1) : 0);\n+      if (pz == 0)\n+        ++a2;\n+    }\n+\n+  goto og;\n+}"}, {"sha": "b89da4017e82cc66620872c4eda8704ef8b38db3", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a96dd28c997a55344c201baeed409e9e4ce7af/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a96dd28c997a55344c201baeed409e9e4ce7af/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=74a96dd28c997a55344c201baeed409e9e4ce7af", "patch": "@@ -1471,7 +1471,7 @@ is_pred_expr_subset_of (pred_info expr1, pred_info expr2)\n   if (code2 == NE_EXPR && code1 == NE_EXPR)\n     return false;\n \n-  if (code2 == NE_EXPR)\n+  if (code2 == NE_EXPR && code1 != BIT_AND_EXPR)\n     return !is_value_included_in (expr2.pred_rhs, expr1.pred_rhs, code1);\n \n   if ((code1 == EQ_EXPR || code1 == BIT_AND_EXPR) && code2 == BIT_AND_EXPR)"}]}