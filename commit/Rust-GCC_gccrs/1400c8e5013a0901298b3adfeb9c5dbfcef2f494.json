{"sha": "1400c8e5013a0901298b3adfeb9c5dbfcef2f494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQwMGM4ZTUwMTNhMDkwMTI5OGIzYWRmZWI5YzVkYmZjZWYyZjQ5NA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "ook@ucw.cz", "date": "2011-05-07T19:43:18Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2011-05-07T19:43:18Z"}, "message": "re PR tree-optimization/48837 (Wrong optimization of recursive function calls)\n\n\tPR tree-optimization/48837\n\t* tree-tailcall.c (tree_optimize_tail_calls_1): Do not mark tailcalls\n\twhen accumulator transformation is performed.\n\n\t* gcc.dg/pr48837.c: New testcase.\n\nFrom-SVN: r173534", "tree": {"sha": "691ff75d958a92205fca691305a1ba3940706a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/691ff75d958a92205fca691305a1ba3940706a5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1400c8e5013a0901298b3adfeb9c5dbfcef2f494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1400c8e5013a0901298b3adfeb9c5dbfcef2f494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1400c8e5013a0901298b3adfeb9c5dbfcef2f494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1400c8e5013a0901298b3adfeb9c5dbfcef2f494/comments", "author": {"login": "rakdver", "id": 20416833, "node_id": "MDQ6VXNlcjIwNDE2ODMz", "avatar_url": "https://avatars.githubusercontent.com/u/20416833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakdver", "html_url": "https://github.com/rakdver", "followers_url": "https://api.github.com/users/rakdver/followers", "following_url": "https://api.github.com/users/rakdver/following{/other_user}", "gists_url": "https://api.github.com/users/rakdver/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakdver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakdver/subscriptions", "organizations_url": "https://api.github.com/users/rakdver/orgs", "repos_url": "https://api.github.com/users/rakdver/repos", "events_url": "https://api.github.com/users/rakdver/events{/privacy}", "received_events_url": "https://api.github.com/users/rakdver/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d0878e70dc34446015c4f2908869ad9e85cab8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d0878e70dc34446015c4f2908869ad9e85cab8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d0878e70dc34446015c4f2908869ad9e85cab8c"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "a3f6a11146388635e40fde8cfab08124ebd2b90e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1400c8e5013a0901298b3adfeb9c5dbfcef2f494/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1400c8e5013a0901298b3adfeb9c5dbfcef2f494/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1400c8e5013a0901298b3adfeb9c5dbfcef2f494", "patch": "@@ -1,3 +1,9 @@\n+2011-05-07  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/48837\n+\t* tree-tailcall.c (tree_optimize_tail_calls_1): Do not mark tailcalls\n+\twhen accumulator transformation is performed.\n+\n 2011-05-06  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.h (ix86_tune_indices): Add X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL."}, {"sha": "735ac689dd3dcd4858ec8e31f311687d769c60dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1400c8e5013a0901298b3adfeb9c5dbfcef2f494/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1400c8e5013a0901298b3adfeb9c5dbfcef2f494/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1400c8e5013a0901298b3adfeb9c5dbfcef2f494", "patch": "@@ -1,3 +1,8 @@\n+2011-05-07  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/48837\n+\t* gcc.dg/pr48837.c: New testcase.\n+\n 2011-05-06  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/constexpr-condition2.C: New."}, {"sha": "ffc65b9dc8c58df688d8eb24bf94f19f1866a566", "filename": "gcc/testsuite/gcc.dg/pr48837.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1400c8e5013a0901298b3adfeb9c5dbfcef2f494/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48837.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1400c8e5013a0901298b3adfeb9c5dbfcef2f494/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48837.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48837.c?ref=1400c8e5013a0901298b3adfeb9c5dbfcef2f494", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/48837 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+void abort (void);\n+\n+__attribute__((noinline))\n+int baz(void)\n+{\n+  return 1;\n+}\n+\n+inline const int *bar(const int *a, const int *b)\n+{\n+ return *a ? a : b;\n+}\n+\n+int foo(int a, int b)\n+{\n+   return a || b ? baz() : foo(*bar(&a, &b), 1) + foo(1, 0);\n+}\n+\n+int main(void)\n+{\n+ if (foo(0, 0) != 2)\n+   abort();\n+\n+ return 0;\n+}\n+"}, {"sha": "6a2308028bb29f6a9b5927758e6c6c9f43fafe82", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1400c8e5013a0901298b3adfeb9c5dbfcef2f494/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1400c8e5013a0901298b3adfeb9c5dbfcef2f494/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=1400c8e5013a0901298b3adfeb9c5dbfcef2f494", "patch": "@@ -1021,6 +1021,14 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t\t\t\t\t     integer_one_node);\n     }\n \n+  if (a_acc || m_acc)\n+    {\n+      /* When the tail call elimination using accumulators is performed,\n+\t statements adding the accumulated value are inserted at all exits.\n+\t This turns all other tail calls to non-tail ones.  */\n+      opt_tailcalls = false;\n+    }\n+\n   for (; tailcalls; tailcalls = next)\n     {\n       next = tailcalls->next;"}]}