{"sha": "f1fc27b6c51b6dab8a3bd61e9006253a2572fa2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFmYzI3YjZjNTFiNmRhYjhhM2JkNjFlOTAwNjI1M2EyNTcyZmEyYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-01-12T20:57:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-01-14T22:17:17Z"}, "message": "c++: Minor refactoring in process_init_constructor_record\n\nThis function had two different local variables for TREE_TYPE (field), one\nof which shadowed a parameter, and wasn't using them consistently.\n\ngcc/cp/ChangeLog:\n\n\t* typeck2.c (process_init_constructor_record): Use fldtype\n\tvariable consistently.", "tree": {"sha": "a2b94e5983254f58d3d9895ae0ab68af9f1ce637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2b94e5983254f58d3d9895ae0ab68af9f1ce637"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1fc27b6c51b6dab8a3bd61e9006253a2572fa2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1fc27b6c51b6dab8a3bd61e9006253a2572fa2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1fc27b6c51b6dab8a3bd61e9006253a2572fa2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1fc27b6c51b6dab8a3bd61e9006253a2572fa2a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "387f6c15d303a8f8da508e419fea10a6ef0e2590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387f6c15d303a8f8da508e419fea10a6ef0e2590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387f6c15d303a8f8da508e419fea10a6ef0e2590"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "9b7059d04c4b2c36c5623a6378587ee6af8f9bb0", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1fc27b6c51b6dab8a3bd61e9006253a2572fa2a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1fc27b6c51b6dab8a3bd61e9006253a2572fa2a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=f1fc27b6c51b6dab8a3bd61e9006253a2572fa2a", "patch": "@@ -1466,7 +1466,6 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n   for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n     {\n       tree next;\n-      tree type;\n \n       if (TREE_CODE (field) != FIELD_DECL\n \t  || (DECL_ARTIFICIAL (field)\n@@ -1477,10 +1476,10 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n \tcontinue;\n \n       /* If this is a bitfield, first convert to the declared type.  */\n-      type = TREE_TYPE (field);\n+      tree fldtype = TREE_TYPE (field);\n       if (DECL_BIT_FIELD_TYPE (field))\n-\ttype = DECL_BIT_FIELD_TYPE (field);\n-      if (type == error_mark_node)\n+\tfldtype = DECL_BIT_FIELD_TYPE (field);\n+      if (fldtype == error_mark_node)\n \treturn PICFLAG_ERRONEOUS;\n \n       next = NULL_TREE;\n@@ -1496,8 +1495,8 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n \t\t\t  || identifier_p (ce->index));\n \t      if (ce->index == field || ce->index == DECL_NAME (field))\n \t\tnext = ce->value;\n-\t      else if (ANON_AGGR_TYPE_P (type)\n-\t\t       && search_anon_aggr (type,\n+\t      else if (ANON_AGGR_TYPE_P (fldtype)\n+\t\t       && search_anon_aggr (fldtype,\n \t\t\t\t\t    TREE_CODE (ce->index) == FIELD_DECL\n \t\t\t\t\t    ? DECL_NAME (ce->index)\n \t\t\t\t\t    : ce->index))\n@@ -1525,7 +1524,7 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n \t  if (ce)\n \t    {\n \t      gcc_assert (ce->value);\n-\t      next = massage_init_elt (type, next, nested, flags, complain);\n+\t      next = massage_init_elt (fldtype, next, nested, flags, complain);\n \t      ++idx;\n \t    }\n \t}\n@@ -1551,15 +1550,14 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n \t      && find_placeholders (next))\n \t    CONSTRUCTOR_PLACEHOLDER_BOUNDARY (init) = 1;\n \t}\n-      else if (type_build_ctor_call (TREE_TYPE (field)))\n+      else if (type_build_ctor_call (fldtype))\n \t{\n \t  /* If this type needs constructors run for\n \t     default-initialization, we can't rely on the back end to do it\n \t     for us, so build up TARGET_EXPRs.  If the type in question is\n \t     a class, just build one up; if it's an array, recurse.  */\n \t  next = build_constructor (init_list_type_node, NULL);\n-\t  next = massage_init_elt (TREE_TYPE (field), next, nested, flags,\n-\t\t\t\t   complain);\n+\t  next = massage_init_elt (fldtype, next, nested, flags, complain);\n \n \t  /* Warn when some struct elements are implicitly initialized.  */\n \t  if ((complain & tf_warning)\n@@ -1570,7 +1568,6 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n \t}\n       else\n \t{\n-\t  const_tree fldtype = TREE_TYPE (field);\n \t  if (TYPE_REF_P (fldtype))\n \t    {\n \t      if (complain & tf_error)\n@@ -1601,7 +1598,7 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n \n \t  if (!zero_init_p (fldtype)\n \t      || skipped < 0)\n-\t    next = build_zero_init (TREE_TYPE (field), /*nelts=*/NULL_TREE,\n+\t    next = build_zero_init (fldtype, /*nelts=*/NULL_TREE,\n \t\t\t\t    /*static_storage_p=*/false);\n \t  else\n \t    {\n@@ -1620,7 +1617,7 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n \tcontinue;\n \n       /* If this is a bitfield, now convert to the lowered type.  */\n-      if (type != TREE_TYPE (field))\n+      if (fldtype != TREE_TYPE (field))\n \tnext = cp_convert_and_check (TREE_TYPE (field), next, complain);\n       picflags |= picflag_from_initializer (next);\n       CONSTRUCTOR_APPEND_ELT (v, field, next);"}]}