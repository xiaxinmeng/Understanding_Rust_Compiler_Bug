{"sha": "98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjY2QxZDdhYjFkOWEwYzk5Y2NlMGQxYzA1ZGRjZGEzNjU5ZGQyNg==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2016-05-11T09:33:13Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2016-05-11T09:33:13Z"}, "message": "re PR middle-end/70807 (fwprop pass ICE with incoming CDI_DOMINATORS)\n\ngcc/\n\n\tPR middle-end/70807\n\t* cfgrtl.h (delete_insn_and_edges): Now return bool.\n\t* cfgrtl.c (delete_insn_and_edges): Likewise.\n\t* config/i386/i386.c (convert_scalars_to_vector): Remove\n\tredundant code.\n\t* cse.c (cse_insn): Compute cse_cfg_altered.\n\t(delete_trivially_dead_insns): Likewise.\n\t(cse_cc_succs): Likewise.\n\t(rest_of_handle_cse): Free dominance info if required.\n\t(rest_of_handle_cse2): Likewise.\n\t(rest_of_handle_cse_after_global_opts): Likewise.\n\ngcc/testsuite/\n\n\tPR middle-end/70807\n\t* gcc.dg/pr70807.c: New test.\n\nFrom-SVN: r236114", "tree": {"sha": "657c8e39976aa859a7d94e2cef8b61ccbd529176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/657c8e39976aa859a7d94e2cef8b61ccbd529176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed29e24b8bae184e7f3f3e92afb57aa8767659be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed29e24b8bae184e7f3f3e92afb57aa8767659be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed29e24b8bae184e7f3f3e92afb57aa8767659be"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "b0d0949a62e2806d61b61b8521bb4dababbb7b62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26", "patch": "@@ -1,3 +1,17 @@\n+2016-05-11  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR middle-end/70807\n+\t* cfgrtl.h (delete_insn_and_edges): Now return bool.\n+\t* cfgrtl.c (delete_insn_and_edges): Likewise.\n+\t* config/i386/i386.c (convert_scalars_to_vector): Remove\n+\tredundant code.\n+\t* cse.c (cse_insn): Compute cse_cfg_altered.\n+\t(delete_trivially_dead_insns): Likewise.\n+\t(cse_cc_succs): Likewise.\n+\t(rest_of_handle_cse): Free dominance info if required.\n+\t(rest_of_handle_cse2): Likewise.\n+\t(rest_of_handle_cse_after_global_opts): Likewise.\n+\n 2016-05-11  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (is_complex_IBM_long_double,"}, {"sha": "3d8ed60c2a0c162d962cf5e540b4f0c745517455", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26", "patch": "@@ -215,9 +215,10 @@ delete_insn (rtx uncast_insn)\n     }\n }\n \n-/* Like delete_insn but also purge dead edges from BB.  */\n+/* Like delete_insn but also purge dead edges from BB.\n+   Return true if any edges are eliminated.  */\n \n-void\n+bool\n delete_insn_and_edges (rtx_insn *insn)\n {\n   bool purge = false;\n@@ -228,7 +229,8 @@ delete_insn_and_edges (rtx_insn *insn)\n     purge = true;\n   delete_insn (insn);\n   if (purge)\n-    purge_dead_edges (BLOCK_FOR_INSN (insn));\n+    return purge_dead_edges (BLOCK_FOR_INSN (insn));\n+  return false;\n }\n \n /* Unlink a chain of insns between START and FINISH, leaving notes"}, {"sha": "d81928a6ebfb33dc23f42b2ea62d65a6cfeb07ba", "filename": "gcc/cfgrtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Fcfgrtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Fcfgrtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.h?ref=98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26", "patch": "@@ -21,7 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_CFGRTL_H\n \n extern void delete_insn (rtx);\n-extern void delete_insn_and_edges (rtx_insn *);\n+extern bool delete_insn_and_edges (rtx_insn *);\n extern void delete_insn_chain (rtx, rtx, bool);\n extern basic_block create_basic_block_structure (rtx_insn *, rtx_insn *,\n \t\t\t\t\t\t rtx_note *, basic_block);"}, {"sha": "9f62089b8b127622c8e962214acf1a78fdef2e41", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26", "patch": "@@ -3969,13 +3969,6 @@ convert_scalars_to_vector ()\n   bitmap_obstack_release (NULL);\n   df_process_deferred_rescans ();\n \n-  /* FIXME: Since the CSE pass may change dominance info, which isn't\n-     expected by the fwprop pass, call free_dominance_info to\n-     invalidate dominance info.  Otherwise, the fwprop pass may crash\n-     when dominance info is changed.  */\n-  if (TARGET_64BIT)\n-    free_dominance_info (CDI_DOMINATORS);\n-\n   /* Conversion means we may have 128bit register spills/fills\n      which require aligned stack.  */\n   if (converted_insns)"}, {"sha": "04e1a8563d7d2daca7773047808cb5809b95ef1c", "filename": "gcc/cse.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26", "patch": "@@ -5505,7 +5505,7 @@ cse_insn (rtx_insn *insn)\n       else if (n_sets == 1 && dest == pc_rtx && src == pc_rtx)\n \t{\n \t  /* One less use of the label this insn used to jump to.  */\n-\t  delete_insn_and_edges (insn);\n+\t  cse_cfg_altered |= delete_insn_and_edges (insn);\n \t  cse_jumps_altered = true;\n \t  /* No more processing for this set.  */\n \t  sets[i].rtl = 0;\n@@ -5516,7 +5516,7 @@ cse_insn (rtx_insn *insn)\n \t{\n \t  if (cfun->can_throw_non_call_exceptions && can_throw_internal (insn))\n \t    cse_cfg_altered = true;\n-\t  delete_insn_and_edges (insn);\n+\t  cse_cfg_altered |= delete_insn_and_edges (insn);\n \t  /* No more processing for this set.  */\n \t  sets[i].rtl = 0;\n \t}\n@@ -5551,7 +5551,7 @@ cse_insn (rtx_insn *insn)\n \t\t  REG_NOTES (new_rtx) = note;\n \t\t}\n \n-\t      delete_insn_and_edges (insn);\n+\t      cse_cfg_altered |= delete_insn_and_edges (insn);\n \t      insn = new_rtx;\n \t    }\n \t  else\n@@ -7131,7 +7131,7 @@ delete_trivially_dead_insns (rtx_insn *insns, int nreg)\n \t      count_reg_usage (insn, counts, NULL_RTX, -1);\n \t      ndead++;\n \t    }\n-\t  delete_insn_and_edges (insn);\n+\t  cse_cfg_altered |= delete_insn_and_edges (insn);\n \t}\n     }\n \n@@ -7427,7 +7427,7 @@ cse_cc_succs (basic_block bb, basic_block orig_bb, rtx cc_reg, rtx cc_src,\n \t\t\t\t    newreg);\n \t}\n \n-      delete_insn_and_edges (insns[i]);\n+      cse_cfg_altered |= delete_insn_and_edges (insns[i]);\n     }\n \n   return mode;\n@@ -7568,6 +7568,9 @@ rest_of_handle_cse (void)\n   else if (tem == 1 || optimize > 1)\n     cleanup_cfg (0);\n \n+  if (cse_cfg_altered && dom_info_available_p (CDI_DOMINATORS))\n+    free_dominance_info (CDI_DOMINATORS);\n+\n   return 0;\n }\n \n@@ -7637,6 +7640,9 @@ rest_of_handle_cse2 (void)\n   else if (tem == 1)\n     cleanup_cfg (0);\n \n+  if (cse_cfg_altered && dom_info_available_p (CDI_DOMINATORS))\n+    free_dominance_info (CDI_DOMINATORS);\n+\n   cse_not_expected = 1;\n   return 0;\n }\n@@ -7695,7 +7701,7 @@ rest_of_handle_cse_after_global_opts (void)\n \n   rebuild_jump_labels (get_insns ());\n   tem = cse_main (get_insns (), max_reg_num ());\n-  purge_all_dead_edges ();\n+  cse_cfg_altered |= purge_all_dead_edges ();\n   delete_trivially_dead_insns (get_insns (), max_reg_num ());\n \n   cse_not_expected = !flag_rerun_cse_after_loop;\n@@ -7711,6 +7717,9 @@ rest_of_handle_cse_after_global_opts (void)\n   else if (tem == 1)\n     cleanup_cfg (0);\n \n+  if (cse_cfg_altered && dom_info_available_p (CDI_DOMINATORS))\n+    free_dominance_info (CDI_DOMINATORS);\n+\n   flag_cse_follow_jumps = save_cfj;\n   return 0;\n }"}, {"sha": "de582b8f3579d825deb4bb8926a4d5471eaf7d24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26", "patch": "@@ -1,3 +1,8 @@\n+2016-05-11  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR middle-end/70807\n+\t* gcc.dg/pr70807.c: New test.\n+\n 2016-05-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/38611"}, {"sha": "9ef2a4d909782a6f82f8cf2e04e2d131684b57e5", "filename": "gcc/testsuite/gcc.dg/pr70807.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70807.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70807.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70807.c?ref=98ccd1d7ab1d9a0c99cce0d1c05ddcda3659dd26", "patch": "@@ -0,0 +1,18 @@\n+/* PR middle-end/70807 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef int INT;\n+int a, b, c, d, e, f;\n+void fn1() {\n+  INT g;\n+  if (d && a)\n+    ;\n+  else if (e && b)\n+    ;\n+  else if (!a && !b && c)\n+    ;\n+  else if (b && d || a && e)\n+    a = 0;\n+  f = g || d;\n+}"}]}