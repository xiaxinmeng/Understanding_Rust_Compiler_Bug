{"sha": "c8a23c29f7e61990d9f3fb36b4dfab8f46efa0ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhMjNjMjlmN2U2MTk5MGQ5ZjNmYjM2YjRkZmFiOGY0NmVmYTBlZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-30T12:06:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-30T12:06:30Z"}, "message": "* gcc-interface/trans.c (gigi): Fix initialization order.\n\nFrom-SVN: r231068", "tree": {"sha": "b249400df9619c47d1d0e2bde3daa24a9d0a68f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b249400df9619c47d1d0e2bde3daa24a9d0a68f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8a23c29f7e61990d9f3fb36b4dfab8f46efa0ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a23c29f7e61990d9f3fb36b4dfab8f46efa0ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a23c29f7e61990d9f3fb36b4dfab8f46efa0ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a23c29f7e61990d9f3fb36b4dfab8f46efa0ef/comments", "author": null, "committer": null, "parents": [{"sha": "4f852a1affeb624889e71701bf80f47a08e02361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f852a1affeb624889e71701bf80f47a08e02361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f852a1affeb624889e71701bf80f47a08e02361"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "ce389d1e76792ac14ed694f8431814d35d73e311", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a23c29f7e61990d9f3fb36b4dfab8f46efa0ef/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a23c29f7e61990d9f3fb36b4dfab8f46efa0ef/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c8a23c29f7e61990d9f3fb36b4dfab8f46efa0ef", "patch": "@@ -1,3 +1,7 @@\n+2015-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gigi): Fix initialization order.\n+\n 2015-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* osint.adb: Add use type clause for CRTL.size_t."}, {"sha": "143d2144dcc39ae63e0e9578ca7acef6f743d6a3", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a23c29f7e61990d9f3fb36b4dfab8f46efa0ef/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a23c29f7e61990d9f3fb36b4dfab8f46efa0ef/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=c8a23c29f7e61990d9f3fb36b4dfab8f46efa0ef", "patch": "@@ -627,8 +627,16 @@ gigi (Node_Id gnat_root,\n \n   main_identifier_node = get_identifier (\"main\");\n \n-  /* Install the builtins we might need, either internally or as\n-     user available facilities for Intrinsic imports.  */\n+  /* If we are using the GCC exception mechanism, let GCC know.  */\n+  if (Back_End_Exceptions ())\n+    gnat_init_gcc_eh ();\n+\n+  /* Initialize the GCC support for FP operations.  */\n+  gnat_init_gcc_fp ();\n+\n+  /* Install the builtins we might need, either internally or as user-available\n+     facilities for Intrinsic imports.  Note that this must be done after the\n+     GCC exception mechanism is initialized.  */\n   gnat_install_builtins ();\n \n   vec_safe_push (gnu_except_ptr_stack, NULL_TREE);\n@@ -641,13 +649,6 @@ gigi (Node_Id gnat_root,\n     targetm.asm_out.output_ident\n       (TREE_STRING_POINTER (gnat_to_gnu (Ident_String (Main_Unit))));\n \n-  /* If we are using the GCC exception mechanism, let GCC know.  */\n-  if (Back_End_Exceptions ())\n-    gnat_init_gcc_eh ();\n-\n-  /* Initialize the GCC support for FP operations.  */\n-  gnat_init_gcc_fp ();\n-\n   /* Force -fno-strict-aliasing if the configuration pragma was seen.  */\n   if (No_Strict_Aliasing_CP)\n     flag_strict_aliasing = 0;"}]}