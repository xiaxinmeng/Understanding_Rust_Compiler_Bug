{"sha": "8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEzOWE0OGU2N2VjOWYxNzg5MDRkMmJiODNhMTdiZDM3Y2U4ZmI1NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-10-04T14:10:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-10-04T14:10:59Z"}, "message": "C: underline parameters in mismatching function calls\n\nIn r253096\n  (\"C++: underline parameters in mismatching function calls\"\n  aka 5d78d423a5f7a1d135c7bb678e82007678d1313c\n    https://gcc.gnu.org/ml/gcc-patches/2017-09/msg01546.html )\nI updated the C++ FE's handling of mismatched types in function calls\nso that it underlines the pertinent param of the callee, rather than\njust the function name.\n\nThe following patch does the same for the C frontend.\n\nGiven e.g. this type mismatch:\n\n  extern int callee (int one, const char *two, float three);\n\n  int caller (int first, int second, float third)\n  {\n    return callee (first, second, third);\n  }\n\nthe C FE currently emits (trunk):\n\n  test.c: In function 'caller':\n  test.c:5:25: warning: passing argument 2 of 'callee' makes pointer from\n  integer without a cast [-Wint-conversion]\n     return callee (first, second, third);\n                           ^~~~~~\n  test.c:1:12: note: expected 'const char *' but argument is of type 'int'\n   extern int callee (int one, const char *two, float three);\n              ^~~~~~\n\nwhereas with this patch the note underlines the pertinent param of\nthe callee:\n\n  test.c: In function 'caller':\n  test.c:5:25: warning: passing argument 2 of 'callee' makes pointer from\n  integer without a cast [-Wint-conversion]\n     return callee (first, second, third);\n                           ^~~~~~\n  test.c:1:41: note: expected 'const char *' but argument is of type 'int'\n   extern int callee (int one, const char *two, float three);\n                               ~~~~~~~~~~~~^~~\n\nmaking the problem more obvious to the user.\n\nAs with the C++ patch, the patch:\n\n(a) updates the locations of the params to cover the range of all\nof their tokens, putting the caret on the first character of the\nparam name (if present), otherwise at the start of the first token\n(doing so requires adding a last_token_location to the c_parser, so\nwe can determine the location of the last consumed token).\n\n(b) updates the \"note\" to use the param location, rather than the\nfndecl location\n\ngcc/c/ChangeLog:\n\t* c-decl.c (push_parm_decl): Store c_parm's location into the\n\tPARAM_DECL.\n\t(build_c_parm): Add \"loc\" param and store it within the c_parm.\n\t* c-parser.c (struct c_parser): Add \"last_token_location\" field.\n\t(c_parser_consume_token): Store location of the token into the\n\tnew field.\n\t(c_parser_declaration_or_fndef): Store params into DECL_ARGUMENTS\n\twhen handling a FUNCTION_DECL, if it doesn't already have them.\n\t(c_parser_parameter_declaration): Generate a location for the\n\tparameter, and pass it to the call to build_c_parm.\n\t* c-tree.h (struct c_parm): Add field \"loc\".\n\t(build_c_parm): Add location_t param.\n\t* c-typeck.c (get_fndecl_argument_location): New function.\n\t(inform_for_arg): New function.\n\t(convert_for_assignment): Use inform_for_arg when dealing with\n\tic_argpass.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/diagnostic-range-bad-called-object.c: Update expected\n\tunderlining for param.\n\t* gcc.dg/param-type-mismatch.c: Update expected results to reflect\n\thighlighting of parameters; add test coverage for trivial\n\tparameter decls, and for callback parameters.\n\t* gcc.dg/pr68533.c: Update location of two errors to reflect\n\tlocation of params.\n\nFrom-SVN: r253411", "tree": {"sha": "5ac29108fd99c55bc4523d0514be93519e27187d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ac29108fd99c55bc4523d0514be93519e27187d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bed8a1e4d6234e7bb1199eaf8f72b9007dc47034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed8a1e4d6234e7bb1199eaf8f72b9007dc47034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed8a1e4d6234e7bb1199eaf8f72b9007dc47034"}], "stats": {"total": 248, "additions": 206, "deletions": 42}, "files": [{"sha": "ae9d63991f062043bc26c3308de9b3b02d222b76", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "patch": "@@ -1,3 +1,22 @@\n+2017-10-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-decl.c (push_parm_decl): Store c_parm's location into the\n+\tPARAM_DECL.\n+\t(build_c_parm): Add \"loc\" param and store it within the c_parm.\n+\t* c-parser.c (struct c_parser): Add \"last_token_location\" field.\n+\t(c_parser_consume_token): Store location of the token into the\n+\tnew field.\n+\t(c_parser_declaration_or_fndef): Store params into DECL_ARGUMENTS\n+\twhen handling a FUNCTION_DECL, if it doesn't already have them.\n+\t(c_parser_parameter_declaration): Generate a location for the\n+\tparameter, and pass it to the call to build_c_parm.\n+\t* c-tree.h (struct c_parm): Add field \"loc\".\n+\t(build_c_parm): Add location_t param.\n+\t* c-typeck.c (get_fndecl_argument_location): New function.\n+\t(inform_for_arg): New function.\n+\t(convert_for_assignment): Use inform_for_arg when dealing with\n+\tic_argpass.\n+\n 2017-09-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-decl.c (grokfield): Use SET_DECL_C_BIT_FIELD here if"}, {"sha": "724d193f01f74a8cb47db3ec8b728603092a2f8c", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "patch": "@@ -5190,6 +5190,8 @@ push_parm_decl (const struct c_parm *parm, tree *expr)\n \n   decl = grokdeclarator (parm->declarator, parm->specs, PARM, false, NULL,\n \t\t\t &attrs, expr, NULL, DEPRECATED_NORMAL);\n+  if (decl && DECL_P (decl))\n+    DECL_SOURCE_LOCATION (decl) = parm->loc;\n   decl_attributes (&decl, attrs, 0);\n \n   decl = pushdecl (decl);\n@@ -9700,12 +9702,14 @@ build_void_list_node (void)\n \n struct c_parm *\n build_c_parm (struct c_declspecs *specs, tree attrs,\n-\t      struct c_declarator *declarator)\n+\t      struct c_declarator *declarator,\n+\t      location_t loc)\n {\n   struct c_parm *ret = XOBNEW (&parser_obstack, struct c_parm);\n   ret->specs = specs;\n   ret->attrs = attrs;\n   ret->declarator = declarator;\n+  ret->loc = loc;\n   return ret;\n }\n "}, {"sha": "1a5e39edf45bb75563f39f24b012b08895f0d56a", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "patch": "@@ -206,6 +206,9 @@ struct GTY(()) c_parser {\n   /* Buffer to hold all the tokens from parsing the vector attribute for the\n      SIMD-enabled functions (formerly known as elemental functions).  */\n   vec <c_token, va_gc> *cilk_simd_fn_tokens;\n+\n+  /* Location of the last consumed token.  */\n+  location_t last_token_location;\n };\n \n /* Return a pointer to the Nth token in PARSERs tokens_buf.  */\n@@ -770,6 +773,7 @@ c_parser_consume_token (c_parser *parser)\n   gcc_assert (parser->tokens[0].type != CPP_EOF);\n   gcc_assert (!parser->in_pragma || parser->tokens[0].type != CPP_PRAGMA_EOL);\n   gcc_assert (parser->error || parser->tokens[0].type != CPP_PRAGMA);\n+  parser->last_token_location = parser->tokens[0].location;\n   if (parser->tokens != &parser->tokens_buf[0])\n     parser->tokens++;\n   else if (parser->tokens_avail == 2)\n@@ -2120,6 +2124,10 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t      tree d = start_decl (declarator, specs, false,\n \t\t\t\t   chainon (postfix_attrs,\n \t\t\t\t\t    all_prefix_attrs));\n+\t      if (d && TREE_CODE (d) == FUNCTION_DECL)\n+\t\tif (declarator->kind == cdk_function)\n+\t\t  if (DECL_ARGUMENTS (d) == NULL_TREE)\n+\t\t    DECL_ARGUMENTS (d) = declarator->u.arg_info->parms;\n \t      if (omp_declare_simd_clauses.exists ()\n \t\t  || !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n \t\t{\n@@ -4039,6 +4047,9 @@ c_parser_parameter_declaration (c_parser *parser, tree attrs)\n       c_parser_skip_to_end_of_parameter (parser);\n       return NULL;\n     }\n+\n+  location_t start_loc = c_parser_peek_token (parser)->location;\n+\n   specs = build_null_declspecs ();\n   if (attrs)\n     {\n@@ -4061,8 +4072,33 @@ c_parser_parameter_declaration (c_parser *parser, tree attrs)\n     }\n   if (c_parser_next_token_is_keyword (parser, RID_ATTRIBUTE))\n     postfix_attrs = c_parser_attributes (parser);\n+\n+  /* Generate a location for the parameter, ranging from the start of the\n+     initial token to the end of the final token.\n+\n+     If we have a identifier, then use it for the caret location, e.g.\n+\n+       extern int callee (int one, int (*two)(int, int), float three);\n+                                   ~~~~~~^~~~~~~~~~~~~~\n+\n+     otherwise, reuse the start location for the caret location e.g.:\n+\n+       extern int callee (int one, int (*)(int, int), float three);\n+                                   ^~~~~~~~~~~~~~~~~\n+  */\n+  location_t end_loc = parser->last_token_location;\n+\n+  /* Find any cdk_id declarator; determine if we have an identifier.  */\n+  c_declarator *id_declarator = declarator;\n+  while (id_declarator && id_declarator->kind != cdk_id)\n+    id_declarator = id_declarator->declarator;\n+  location_t caret_loc = (id_declarator->u.id\n+\t\t\t  ? id_declarator->id_loc\n+\t\t\t  : start_loc);\n+  location_t param_loc = make_location (caret_loc, start_loc, end_loc);\n+\n   return build_c_parm (specs, chainon (postfix_attrs, prefix_attrs),\n-\t\t       declarator);\n+\t\t       declarator, param_loc);\n }\n \n /* Parse a string literal in an asm expression.  It should not be"}, {"sha": "11356476d840b7f8b95351bef82be01d85da86a0", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "patch": "@@ -477,6 +477,8 @@ struct c_parm {\n   tree attrs;\n   /* The declarator.  */\n   struct c_declarator *declarator;\n+  /* The location of the parameter.  */\n+  location_t loc;\n };\n \n /* Used when parsing an enum.  Initialized by start_enum.  */\n@@ -581,7 +583,7 @@ extern void temp_pop_parm_decls (void);\n extern tree xref_tag (enum tree_code, tree);\n extern struct c_typespec parser_xref_tag (location_t, enum tree_code, tree);\n extern struct c_parm *build_c_parm (struct c_declspecs *, tree,\n-\t\t\t\t    struct c_declarator *);\n+\t\t\t\t    struct c_declarator *, location_t);\n extern struct c_declarator *build_attrs_declarator (tree,\n \t\t\t\t\t\t    struct c_declarator *);\n extern struct c_declarator *build_function_declarator (struct c_arg_info *,"}, {"sha": "2a10813190e527ccd5b0932616526cdb2b5ba815", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 51, "deletions": 27, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "patch": "@@ -6180,6 +6180,50 @@ maybe_warn_string_init (location_t loc, tree type, struct c_expr expr)\n \t\t  \"array initialized from parenthesized string constant\");\n }\n \n+/* Attempt to locate the parameter with the given index within FNDECL,\n+   returning DECL_SOURCE_LOCATION (FNDECL) if it can't be found.  */\n+\n+static location_t\n+get_fndecl_argument_location (tree fndecl, int argnum)\n+{\n+  int i;\n+  tree param;\n+\n+  /* Locate param by index within DECL_ARGUMENTS (fndecl).  */\n+  for (i = 0, param = DECL_ARGUMENTS (fndecl);\n+       i < argnum && param;\n+       i++, param = TREE_CHAIN (param))\n+    ;\n+\n+  /* If something went wrong (e.g. if we have a builtin and thus no arguments),\n+     return DECL_SOURCE_LOCATION (FNDECL).  */\n+  if (param == NULL)\n+    return DECL_SOURCE_LOCATION (fndecl);\n+\n+  return DECL_SOURCE_LOCATION (param);\n+}\n+\n+/* Issue a note about a mismatching argument for parameter PARMNUM\n+   to FUNDECL, for types EXPECTED_TYPE and ACTUAL_TYPE.\n+   Attempt to issue the note at the pertinent parameter of the decl;\n+   failing that issue it at the location of FUNDECL; failing that\n+   issue it at PLOC.  */\n+\n+static void\n+inform_for_arg (tree fundecl, location_t ploc, int parmnum,\n+\t\ttree expected_type, tree actual_type)\n+{\n+  location_t loc;\n+  if (fundecl && !DECL_IS_BUILTIN (fundecl))\n+    loc = get_fndecl_argument_location (fundecl, parmnum - 1);\n+  else\n+    loc = ploc;\n+\n+  inform (loc,\n+\t  \"expected %qT but argument is of type %qT\",\n+\t  expected_type, actual_type);\n+}\n+\n /* Convert value RHS to type TYPE as preparation for an assignment to\n    an lvalue of type TYPE.  If ORIGTYPE is not NULL_TREE, it is the\n    original type of RHS; this differs from TREE_TYPE (RHS) for enum\n@@ -6251,10 +6295,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n       {                                                                  \\\n       case ic_argpass:                                                   \\\n         if (pedwarn (PLOC, OPT, AR, parmnum, rname))\t\t\t \\\n-          inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\t         \\\n-\t\t  ? DECL_SOURCE_LOCATION (fundecl) : PLOC,\t\t \\\n-                  \"expected %qT but argument is of type %qT\",            \\\n-                  type, rhstype);                                        \\\n+          inform_for_arg (fundecl, (PLOC), parmnum, type, rhstype);\t\\\n         break;                                                           \\\n       case ic_assign:                                                    \\\n         pedwarn (LOCATION, OPT, AS);                                     \\\n@@ -6280,10 +6321,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n       {                                                                  \\\n       case ic_argpass:                                                   \\\n         if (pedwarn (PLOC, OPT, AR, parmnum, rname, QUALS))\t\t \\\n-          inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\t         \\\n-\t\t  ? DECL_SOURCE_LOCATION (fundecl) : PLOC,\t\t \\\n-                  \"expected %qT but argument is of type %qT\",            \\\n-                  type, rhstype);                                        \\\n+          inform_for_arg (fundecl, (PLOC), parmnum, type, rhstype);\t\\\n         break;                                                           \\\n       case ic_assign:                                                    \\\n         pedwarn (LOCATION, OPT, AS, QUALS);\t\t\t\t \\\n@@ -6309,10 +6347,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n       {                                                                  \\\n       case ic_argpass:                                                   \\\n         if (warning_at (PLOC, OPT, AR, parmnum, rname, QUALS))           \\\n-          inform ((fundecl && !DECL_IS_BUILTIN (fundecl))                \\\n-                  ? DECL_SOURCE_LOCATION (fundecl) : PLOC,               \\\n-                  \"expected %qT but argument is of type %qT\",            \\\n-                  type, rhstype);                                        \\\n+          inform_for_arg (fundecl, (PLOC), parmnum, type, rhstype);      \\\n         break;                                                           \\\n       case ic_assign:                                                    \\\n         warning_at (LOCATION, OPT, AS, QUALS);                           \\\n@@ -6864,10 +6899,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t      if (pedwarn (expr_loc, OPT_Wincompatible_pointer_types,\n \t\t\t   \"passing argument %d of %qE from incompatible \"\n \t\t\t   \"pointer type\", parmnum, rname))\n-\t\tinform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n-\t\t\t? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n-\t\t\t\"expected %qT but argument is of type %qT\",\n-\t\t\ttype, rhstype);\n+\t\tinform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n \t      break;\n \t    case ic_assign:\n \t      pedwarn (location, OPT_Wincompatible_pointer_types,\n@@ -6910,10 +6942,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t    if (pedwarn (expr_loc, OPT_Wint_conversion,\n \t\t\t \"passing argument %d of %qE makes pointer from \"\n \t\t\t \"integer without a cast\", parmnum, rname))\n-\t      inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n-\t\t      ? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n-\t\t      \"expected %qT but argument is of type %qT\",\n-\t\t      type, rhstype);\n+\t      inform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n \t    break;\n \t  case ic_assign:\n \t    pedwarn (location, OPT_Wint_conversion,\n@@ -6944,10 +6973,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t  if (pedwarn (expr_loc, OPT_Wint_conversion,\n \t\t       \"passing argument %d of %qE makes integer from \"\n \t\t       \"pointer without a cast\", parmnum, rname))\n-\t    inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n-\t\t    ? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n-\t\t    \"expected %qT but argument is of type %qT\",\n-\t\t    type, rhstype);\n+\t    inform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n \t  break;\n \tcase ic_assign:\n \t  pedwarn (location, OPT_Wint_conversion,\n@@ -6985,9 +7011,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n     case ic_argpass:\n       error_at (expr_loc, \"incompatible type for argument %d of %qE\", parmnum,\n \t\trname);\n-      inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n-\t      ? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n-\t      \"expected %qT but argument is of type %qT\", type, rhstype);\n+      inform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n       break;\n     case ic_assign:\n       error_at (location, \"incompatible types when assigning to type %qT from \""}, {"sha": "eb9f5b88fe862ae1d9b57fc701a5ace032a09bf9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "patch": "@@ -1,3 +1,13 @@\n+2017-10-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/diagnostic-range-bad-called-object.c: Update expected\n+\tunderlining for param.\n+\t* gcc.dg/param-type-mismatch.c: Update expected results to reflect\n+\thighlighting of parameters; add test coverage for trivial\n+\tparameter decls, and for callback parameters.\n+\t* gcc.dg/pr68533.c: Update location of two errors to reflect\n+\tlocation of params.\n+\n 2017-10-04  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/test-expressions.c (make_test_of_vectors): New function."}, {"sha": "0f7fd2a28569584fa60796c254a506450b2bedb8", "filename": "gcc/testsuite/gcc.dg/diagnostic-range-bad-called-object.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-range-bad-called-object.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-range-bad-called-object.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-range-bad-called-object.c?ref=8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "patch": "@@ -19,6 +19,6 @@ void call_of_non_function_ptr (char **argP, char **argQ)\n    { dg-end-multiline-output \"\" }\n    { dg-begin-multiline-output \"\" }\n  void call_of_non_function_ptr (char **argP, char **argQ)\n-                                       ^~~~\n+                                ~~~~~~~^~~~\n    { dg-end-multiline-output \"\" } */\n }"}, {"sha": "9498a748f308ed8e38ac2f7d38a3a8c18b075c17", "filename": "gcc/testsuite/gcc.dg/param-type-mismatch.c", "status": "modified", "additions": 76, "deletions": 7, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Ftestsuite%2Fgcc.dg%2Fparam-type-mismatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Ftestsuite%2Fgcc.dg%2Fparam-type-mismatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparam-type-mismatch.c?ref=8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "patch": "@@ -1,9 +1,6 @@\n /* { dg-options \"-fdiagnostics-show-caret\" }  */\n \n-/* A collection of calls where argument 2 is of the wrong type.\n-\n-   TODO: we should highlight the second parameter of the callee, rather\n-   than its name.  */\n+/* A collection of calls where argument 2 is of the wrong type.  */\n \n /* decl, with argname.  */\n \n@@ -19,7 +16,7 @@ int test_1 (int first, int second, float third)\n   /* { dg-message \"expected 'const char \\\\*' but argument is of type 'int'\" \"\" { target *-*-* } callee_1 } */\n   /* { dg-begin-multiline-output \"\" }\n  extern int callee_1 (int one, const char *two, float three);\n-            ^~~~~~~~\n+                               ~~~~~~~~~~~~^~~\n      { dg-end-multiline-output \"\" } */\n }\n \n@@ -37,7 +34,7 @@ int test_2 (int first, int second, float third)\n   /* { dg-message \"expected 'const char \\\\*' but argument is of type 'int'\" \"\" { target *-*-* } callee_2 } */\n   /* { dg-begin-multiline-output \"\" }\n  extern int callee_2 (int, const char *, float);\n-            ^~~~~~~~\n+                           ^~~~~~~~~~~~\n      { dg-end-multiline-output \"\" } */\n }\n \n@@ -58,6 +55,78 @@ int test_3 (int first, int second, float third)\n   /* { dg-message \"expected 'const char \\\\*' but argument is of type 'int'\" \"\" { target *-*-* } callee_3 } */\n   /* { dg-begin-multiline-output \"\" }\n  static int callee_3 (int one, const char *two, float three)\n-            ^~~~~~~~\n+                               ~~~~~~~~~~~~^~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Trivial decl, with argname.  */\n+\n+extern int callee_4 (int one, float two, float three); /* { dg-line callee_4 } */\n+\n+int test_4 (int first, const char *second, float third)\n+{\n+  return callee_4 (first, second, third); /* { dg-error \"incompatible type for argument 2 of 'callee_4'\" }  */\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_4 (first, second, third);\n+                           ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-message \"expected 'float' but argument is of type 'const char \\\\*'\" \"\" { target *-*-* } callee_4 } */\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_4 (int one, float two, float three);\n+                               ~~~~~~^~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Trivial decl, without argname.  */\n+\n+extern int callee_5 (int, float, float); /* { dg-line callee_5 } */\n+\n+int test_5 (int first, const char *second, float third)\n+{\n+  return callee_5 (first, second, third); /* { dg-error \"incompatible type for argument 2 of 'callee_5'\" }  */\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_5 (first, second, third);\n+                           ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-message \"expected 'float' but argument is of type 'const char \\\\*'\" \"\" { target *-*-* } callee_5 } */\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_5 (int, float, float);\n+                           ^~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Callback with name.  */\n+\n+extern int callee_6 (int one, int (*two)(int, int), float three); /* { dg-line callee_6 } */\n+\n+int test_6 (int first, int second, float third)\n+{\n+  return callee_6 (first, second, third); /* { dg-warning \"passing argument 2 of 'callee_6' makes pointer from integer without a cast\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_6 (first, second, third);\n+                           ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-message \" expected 'int \\\\(\\\\*\\\\)\\\\(int,  int\\\\)' but argument is of type 'int'\" \"\" { target *-*-* } callee_6 } */\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_6 (int one, int (*two)(int, int), float three);\n+                               ~~~~~~^~~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Callback without name.  */\n+\n+extern int callee_7 (int one, int (*)(int, int), float three); /* { dg-line callee_7 } */\n+\n+int test_7 (int first, int second, float third)\n+{\n+  return callee_7 (first, second, third); /* { dg-warning \"passing argument 2 of 'callee_7' makes pointer from integer without a cast\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_7 (first, second, third);\n+                           ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-message \" expected 'int \\\\(\\\\*\\\\)\\\\(int,  int\\\\)' but argument is of type 'int'\" \"\" { target *-*-* } callee_7 } */\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_7 (int one, int (*)(int, int), float three);\n+                               ^~~~~~~~~~~~~~~~~\n      { dg-end-multiline-output \"\" } */\n }"}, {"sha": "49e67a96168ec99a3bbb324ed7ee1c2dd3682f8f", "filename": "gcc/testsuite/gcc.dg/pr68533.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68533.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8139a48e67ec9f178904d2bb83a17bd37ce8fb54/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68533.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68533.c?ref=8139a48e67ec9f178904d2bb83a17bd37ce8fb54", "patch": "@@ -28,8 +28,8 @@ f2 (\n \n void\n f3 (\n-  const void\n-   )\t\t/* { dg-error \"'void' as only parameter may not be qualified\" } */\n+  const void\t/* { dg-error \"'void' as only parameter may not be qualified\" } */\n+   )\n {\n }\n \n@@ -54,8 +54,8 @@ void\n f6 (\n    int\n    x,\n-   void\n-   )\t\t/* { dg-error \"'void' must be the only parameter\" } */\n+   void\t/* { dg-error \"'void' must be the only parameter\" } */\n+   )\n {\n }\n "}]}