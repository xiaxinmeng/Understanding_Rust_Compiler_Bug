{"sha": "07be2a23729599fd76630d15e26e99d8e29c897e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiZTJhMjM3Mjk1OTlmZDc2NjMwZDE1ZTI2ZTk5ZDhlMjljODk3ZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.phys.columbia.edu", "date": "1998-11-19T19:40:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-11-19T19:40:56Z"}, "message": "c-common.c: Change warning messages to say `comparison is always true' or `comparison is...\n\n        * c-common.c: Change warning messages to say `comparison is\n        always true' or `comparison is always false' instead of the\n        confusing `is always 0', `is always 1'.\n\nFrom-SVN: r23723", "tree": {"sha": "fa266794ce38967b19c4f9ec6bcdd9dc4f2fdb26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa266794ce38967b19c4f9ec6bcdd9dc4f2fdb26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07be2a23729599fd76630d15e26e99d8e29c897e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07be2a23729599fd76630d15e26e99d8e29c897e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07be2a23729599fd76630d15e26e99d8e29c897e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07be2a23729599fd76630d15e26e99d8e29c897e/comments", "author": null, "committer": null, "parents": [{"sha": "74285159e4f348ab625717586a9dfa46ee0c8816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74285159e4f348ab625717586a9dfa46ee0c8816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74285159e4f348ab625717586a9dfa46ee0c8816"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "845216fbf3ae46beeb47f66a2bb7fa8aaa3507c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07be2a23729599fd76630d15e26e99d8e29c897e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07be2a23729599fd76630d15e26e99d8e29c897e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07be2a23729599fd76630d15e26e99d8e29c897e", "patch": "@@ -1,3 +1,9 @@\n+1998-11-19 Zack Weinberg  <zack@rabi.phys.columbia.edu>\n+\n+\t* c-common.c: Change warning messages to say `comparison is\n+\talways true' or `comparison is always false' instead of the\n+\tconfusing `is always 0', `is always 1'.\n+\n Thu Nov 19 19:05:49 1998  Per Bothner  <bothner@cygnus.com>\n \n \t* print-tree.c (print_node):  After printing BLOCK or BIND_EXPR,"}, {"sha": "653af682d70d9ef54f4d4dde2cfb235b1765ce76", "filename": "gcc/c-common.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07be2a23729599fd76630d15e26e99d8e29c897e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07be2a23729599fd76630d15e26e99d8e29c897e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=07be2a23729599fd76630d15e26e99d8e29c897e", "patch": "@@ -2512,18 +2512,18 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t  /* This is the case of (char)x >?< 0x80, which people used to use\n \t     expecting old C compilers to change the 0x80 into -0x80.  */\n \t  if (val == boolean_false_node)\n-\t    warning (\"comparison is always 0 due to limited range of data type\");\n+\t    warning (\"comparison is always false due to limited range of data type\");\n \t  if (val == boolean_true_node)\n-\t    warning (\"comparison is always 1 due to limited range of data type\");\n+\t    warning (\"comparison is always true due to limited range of data type\");\n \t}\n \n       if (!min_lt && unsignedp0 && TREE_CODE (primop0) != INTEGER_CST)\n \t{\n \t  /* This is the case of (unsigned char)x >?< -1 or < 0.  */\n \t  if (val == boolean_false_node)\n-\t    warning (\"comparison is always 0 due to limited range of data type\");\n+\t    warning (\"comparison is always false due to limited range of data type\");\n \t  if (val == boolean_true_node)\n-\t    warning (\"comparison is always 1 due to limited range of data type\");\n+\t    warning (\"comparison is always true due to limited range of data type\");\n \t}\n \n       if (val != 0)\n@@ -2589,7 +2589,7 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t\t  && ! (TREE_CODE (primop0) == INTEGER_CST\n \t\t\t&& ! TREE_OVERFLOW (convert (signed_type (type),\n \t\t\t\t\t\t     primop0))))\n-\t\twarning (\"unsigned value >= 0 is always 1\");\n+\t\twarning (\"comparison of unsigned expression >= 0 is always true\");\n \t      value = boolean_true_node;\n \t      break;\n \n@@ -2598,7 +2598,7 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t\t  && ! (TREE_CODE (primop0) == INTEGER_CST\n \t\t\t&& ! TREE_OVERFLOW (convert (signed_type (type),\n \t\t\t\t\t\t     primop0))))\n-\t\twarning (\"unsigned value < 0 is always 0\");\n+\t\twarning (\"comparison of unsigned expression < 0 is always false\");\n \t      value = boolean_false_node;\n \t      break;\n "}]}