{"sha": "90418208f9263454e7a327fb74ce9e60cab0e944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA0MTgyMDhmOTI2MzQ1NGU3YTMyN2ZiNzRjZTllNjBjYWIwZTk0NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-07-04T07:47:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-07-04T07:47:11Z"}, "message": "repo.c (repo_get_id): Handle the case where a class with virtual bases has a null TYPE_BINFO_VTABLE.\n\n        * repo.c (repo_get_id): Handle the case where a class with virtual\n        bases has a null TYPE_BINFO_VTABLE.\n\n        * parse.y (member_init): Just pass in the type.\n        * init.c (expand_member_init): Handle getting a type.\n\n        * decl.c (finish_function): Warn if a function has no return\n        statement.\n        Suggested by Andrew Koenig.\n        * typeck.c (check_return_expr): Do set current_function_returns_value\n        if we got an error_mark_node.\n\nFrom-SVN: r34863", "tree": {"sha": "f2fb5fe0f2f39a6d019d0aced8f4989911570843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2fb5fe0f2f39a6d019d0aced8f4989911570843"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90418208f9263454e7a327fb74ce9e60cab0e944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90418208f9263454e7a327fb74ce9e60cab0e944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90418208f9263454e7a327fb74ce9e60cab0e944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90418208f9263454e7a327fb74ce9e60cab0e944/comments", "author": null, "committer": null, "parents": [{"sha": "692e9bd5d0c1e0318a69e3d9e8533abd9a985660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692e9bd5d0c1e0318a69e3d9e8533abd9a985660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/692e9bd5d0c1e0318a69e3d9e8533abd9a985660"}], "stats": {"total": 1645, "additions": 859, "deletions": 786}, "files": [{"sha": "c01ed9f159ec64a1a0761272d027849a50ec8716", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -1,3 +1,24 @@\n+2000-07-04  scott snyder  <snyder@fnal.gov>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\t* repo.c (repo_get_id): Handle the case where a class with virtual \n+\tbases has a null TYPE_BINFO_VTABLE.\n+\n+2000-07-04  Kevin Buhr  <buhr@stat.wisc.edu>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\t* parse.y (member_init): Just pass in the type.\n+\t* init.c (expand_member_init): Handle getting a type.\n+\n+2000-07-04  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (finish_function): Warn if a function has no return\n+\tstatement.\n+\tSuggested by Andrew Koenig.\n+\t* typeck.c (check_return_expr): Do set current_function_returns_value\n+\tif we got an error_mark_node.\n+\n 2000-07-03  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl2.c (push_decl_namespace): Push the original namespace."}, {"sha": "2c1b7ed1563a44d575f44f9eb5602015735d268f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -7889,7 +7889,6 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n     rest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n }\n \n-\n /* The old ARM scoping rules injected variables declared in the\n    initialization statement of a for-statement into the surrounding\n    scope.  We support this usage, in order to be backward-compatible.\n@@ -8034,7 +8033,6 @@ destroy_local_var (decl)\n     finish_decl_cleanup (decl, cleanup);\n }\n \n-\n /* Finish processing of a declaration;\n    install its line number and initial value.\n    If the length of an array type is not known before,\n@@ -14484,30 +14482,24 @@ finish_function (flags)\n \tnote_debug_info_needed (ctype);\n #endif\n \n-      returns_null |= can_reach_end;\n-\n-      /* Since we don't normally go through c_expand_return for constructors,\n-\t this normally gets the wrong value.\n-\t Also, named return values have their return codes emitted after\n-\t NOTE_INSN_FUNCTION_END, confusing jump.c.  */\n-      if (DECL_CONSTRUCTOR_P (fndecl)\n-\t  || DECL_NAME (DECL_RESULT (fndecl)) != NULL_TREE)\n-\treturns_null = 0;\n+      if (DECL_NAME (DECL_RESULT (fndecl)))\n+\treturns_value |= can_reach_end;\n+      else\n+\treturns_null |= can_reach_end;\n \n       if (TREE_THIS_VOLATILE (fndecl) && returns_null)\n-\tcp_warning (\"`noreturn' function `%D' does return\", fndecl);\n-      else if ((warn_return_type || pedantic)\n-\t       && returns_null\n+\twarning (\"`noreturn' function does return\");\n+      else if (returns_null\n \t       && TREE_CODE (TREE_TYPE (fntype)) != VOID_TYPE)\n \t{\n-\t  /* If this function returns non-void and control can drop through,\n-\t     complain.  */\n-\t  cp_warning (\"control reaches end of non-void function `%D'\", fndecl);\n+\t  /* Always complain if there's just no return statement.  */\n+\t  if (!returns_value)\n+\t    warning (\"no return statement in function returning non-void\");\n+\t  else if (warn_return_type || pedantic)\n+\t    /* If this function returns non-void and control can drop through,\n+\t       complain.  */\n+\t    warning (\"control reaches end of non-void function\");\n \t}\n-      /* With just -W, complain only if function returns both with\n-\t and without a value.  */\n-      else if (extra_warnings && returns_value && returns_null)\n-\twarning (\"this function may return with or without a value\");\n     }\n   else\n     {"}, {"sha": "18b4b0cc6d09ed98c7421c4013c87e2bed4f8f23", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -1043,7 +1043,12 @@ expand_member_init (exp, name, init)\n \n   type = TYPE_MAIN_VARIANT (TREE_TYPE (exp));\n \n-  if (name && TREE_CODE (name) == TYPE_DECL)\n+  if (name && TYPE_P (name))\n+    {\n+      basetype = name;\n+      name = TYPE_IDENTIFIER (name);\n+    }\n+  else if (name && TREE_CODE (name) == TYPE_DECL)\n     {\n       basetype = TYPE_MAIN_VARIANT (TREE_TYPE (name));\n       name = DECL_NAME (name);"}, {"sha": "3c7aaef1ddf7fa7726ee9a6300751b48213967f8", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 706, "deletions": 709, "changes": 1415, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=90418208f9263454e7a327fb74ce9e60cab0e944"}, {"sha": "91419391fecbc416c3495b90c8be61b58cb5a653", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -930,12 +930,9 @@ member_init:\n \t\t{ $$ = expand_member_init (current_class_ref, $1,\n \t\t\t\t\t   void_type_node); }\n \t| typename_sub '(' nonnull_exprlist ')'\n-\t\t{ $$ = expand_member_init (current_class_ref,\n-\t\t\t\t\t   TYPE_MAIN_DECL ($1),\n-\t\t\t\t\t   $3); }\n+\t\t{ $$ = expand_member_init (current_class_ref, $1, $3); }\n \t| typename_sub LEFT_RIGHT\n-\t\t{ $$ = expand_member_init (current_class_ref,\n-\t\t\t\t\t   TYPE_MAIN_DECL ($1),\n+\t\t{ $$ = expand_member_init (current_class_ref, $1,\n \t\t\t\t\t   void_type_node); }\n         | error\n                 { $$ = NULL_TREE }"}, {"sha": "add13dd099686c44ad53a016d2251548385e45d3", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -97,13 +97,36 @@ repo_get_id (t)\n {\n   if (TYPE_P (t))\n     {\n+      tree vtable;\n+\n       /* If we're not done setting up the class, we may not have set up\n \t the vtable, so going ahead would give the wrong answer.\n          See g++.pt/instantiate4.C.  */\n       if (!COMPLETE_TYPE_P (t) || TYPE_BEING_DEFINED (t))\n \tmy_friendly_abort (981113);\n \n-      t = get_vtbl_decl_for_binfo (TYPE_BINFO (t));\n+      vtable = get_vtbl_decl_for_binfo (TYPE_BINFO (t));\n+\n+      /* If we don't have a primary vtable, try looking for a secondary\n+\t vtable.  */\n+      if (vtable == NULL_TREE && !flag_new_abi\n+\t  && TYPE_USES_VIRTUAL_BASECLASSES (t))\n+\t{\n+\t  tree binfos = BINFO_BASETYPES (TYPE_BINFO (t));\n+\t  int i, n_baselinks = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n+\t  for (i = 0; i < n_baselinks; ++i)\n+\t    {\n+\t      tree base_binfo = TREE_VEC_ELT (binfos, i);\n+\t      if (TREE_VIA_VIRTUAL (base_binfo))\n+\t\t{\n+\t\t  vtable = get_vtbl_decl_for_binfo (base_binfo);\n+\t\t  if (vtable)\n+\t\t    break;\n+\t\t}\n+\t    }\n+\t}\n+\n+      t = vtable;\n       if (t == NULL_TREE)\n \treturn t;\n     }"}, {"sha": "7d9aff6b659b908fa05dab6a0d1ad77c1bb7db66", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -6750,29 +6750,23 @@ check_return_expr (retval)\n     warning (\"function declared `noreturn' has a `return' statement\");\n \n   /* Check for various simple errors.  */\n-  if (retval == error_mark_node)\n-    {\n-      /* If an error occurred, there's nothing to do.  */\n-      current_function_returns_null = 1;\n-      return error_mark_node;\n-    }\n-  else if (dtor_label)\n+  if (dtor_label)\n     {\n       if (retval)\n \terror (\"returning a value from a destructor\");\n       return NULL_TREE;\n     }\n-  else if (in_function_try_handler\n-\t   && DECL_CONSTRUCTOR_P (current_function_decl))\n+  else if (DECL_CONSTRUCTOR_P (current_function_decl))\n     {\n-      /* If a return statement appears in a handler of the\n-         function-try-block of a constructor, the program is ill-formed. */\n-      error (\"cannot return from a handler of a function-try-block of a constructor\");\n-      return error_mark_node;\n+      if (in_function_try_handler)\n+\t/* If a return statement appears in a handler of the\n+\t   function-try-block of a constructor, the program is ill-formed. */\n+\terror (\"cannot return from a handler of a function-try-block of a constructor\");\n+      else if (retval)\n+\t/* You can't return a value from a constructor.  */\n+\terror (\"returning a value from a constructor\");\n+      return NULL_TREE;\n     }\n-  else if (retval && DECL_CONSTRUCTOR_P (current_function_decl))\n-    /* You can't return a value from a constructor.  */\n-    error (\"returning a value from a constructor\");\n \n   /* Under the old ABI, constructors actually always return `this',\n      even though in C++ you can't return a value from a constructor.  */\n@@ -6819,6 +6813,9 @@ check_return_expr (retval)\n     /* Remember that this function can sometimes return without a\n        value.  */\n     current_function_returns_null = 1;\n+  else\n+    /* Remember that this function did return a value.  */\n+    current_function_returns_value = 1;\n \n   /* Only operator new(...) throw(), can return NULL [expr.new/13].  */\n   if ((DECL_OVERLOADED_OPERATOR_P (current_function_decl) == NEW_EXPR\n@@ -6836,8 +6833,8 @@ check_return_expr (retval)\n \n   /* We don't need to do any conversions when there's nothing being\n      returned.  */\n-  if (!retval)\n-    return NULL_TREE;\n+  if (!retval || retval == error_mark_node)\n+    return retval;\n \n   /* Do any required conversions.  */\n   if (retval == result || DECL_CONSTRUCTOR_P (current_function_decl))\n@@ -6858,7 +6855,7 @@ check_return_expr (retval)\n \n       /* If the conversion failed, treat this just like `return;'.  */\n       if (retval == error_mark_node)\n-\treturn NULL_TREE;\n+\treturn retval;\n       /* We can't initialize a register from a AGGR_INIT_EXPR.  */\n       else if (! current_function_returns_struct\n \t       && TREE_CODE (retval) == TARGET_EXPR\n@@ -6873,8 +6870,6 @@ check_return_expr (retval)\n   if (retval && retval != result)\n     retval = build (INIT_EXPR, TREE_TYPE (result), result, retval);\n \n-  /* All done.  Remember that this function did return a value.  */\n-  current_function_returns_value = 1;\n   return retval;\n }\n "}, {"sha": "26b565afd7d7ebcba52211714ca2fe5e5f43099c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/scope1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fscope1.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -5,4 +5,4 @@ int f (int i) {\n     for (int j = i; j; j--)\n       ;\n   return j;\t// error: j should only be in scope inside the body of `for'// ERROR - .*\n-} // ERROR - non-void\n+}"}, {"sha": "095d05a30de5e75e061e4497bde01d55774697ee", "filename": "gcc/testsuite/g++.old-deja/g++.ext/array1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farray1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farray1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farray1.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -12,9 +12,9 @@ protected:\n class ccBgaInspection : public ccInspection\n {\n public:\n-  int reinspect (unsigned long diagFlags);\n+  void reinspect (unsigned long diagFlags);\n };\n-int\n+void\n ccBgaInspection::reinspect (unsigned long diag_flags) \n {\n   ct2d_rigid physTdev;\t\t "}, {"sha": "4f3a09e7c6511d3b84cc30f0aa21876118d4f1df", "filename": "gcc/testsuite/g++.old-deja/g++.ext/array2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farray2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farray2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farray2.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -1,5 +1,5 @@\n // This testcase used to cause a crash on the Alpha.\n-// Special g++ Options: \n+// Special g++ Options: -w\n // Build don't link:\n \n struct A {"}, {"sha": "fb7bd107d90514fc253452c9a67bb63d658328e7", "filename": "gcc/testsuite/g++.old-deja/g++.ext/bound1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fbound1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fbound1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fbound1.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -10,7 +10,7 @@ typedef int (*fptr)(A *);\n typedef void* vptr;\n typedef int (A::*pmf)();\n \n-int foo (A* ap, pmf fp, int A::* ip)\n+void foo (A* ap, pmf fp, int A::* ip)\n {\n   fptr p;\n   vptr q;"}, {"sha": "f3dcd7c9bc494fdc92851236b85e7b6220db40dc", "filename": "gcc/testsuite/g++.old-deja/g++.jason/2371.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2F2371.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2F2371.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2F2371.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -502,7 +502,7 @@ operator<<(ostream& o, const SLS& s)\n SLS gsls;\n const SLS gcsls;\n \n-int foo()\n+void foo()\n {\n     const unsigned SIZE = 20;\n "}, {"sha": "f782ec6c22e5f6add205a2e9415b5bdd361ecc39", "filename": "gcc/testsuite/g++.old-deja/g++.jason/report.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -29,7 +29,7 @@ char ***spp = &sp;\n int foo (int a = (**bar) (s))\n {\n    return doowop<foo>::bar; // ERROR - not a member\n-} // ERROR - non-void\n+}\n \n int foo2 (int (*a)(int) = &foo)\n {"}, {"sha": "b66c43c4aafa27f0531f1439cfc944b380462a35", "filename": "gcc/testsuite/g++.old-deja/g++.jason/tempinst1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftempinst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftempinst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftempinst1.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -8,7 +8,7 @@ struct ostream {\n \n template <class T> class foo;\n \n-template <class T> ostream& operator<< (ostream& ios, foo<T>&obj) { };\n+template <class T> ostream& operator<< (ostream& ios, foo<T>&obj) {return ios;}\n \n template <class T> class foo {\n   friend ostream& operator<<<>(ostream&, foo<T>&);"}, {"sha": "7bb77d220f81085a03572ab8f42ca04ac667c78f", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p11110.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp11110.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp11110.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp11110.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -17,4 +17,4 @@ private:\n \n data* user::data1() const {\n   return (_c.contents (_c.first));\t// ERROR - \n-}                                       // ERROR - control reaches end\n+}"}, {"sha": "3c074768b1d65b859feefb3b1b64a328b15638d5", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p646.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp646.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp646.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp646.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -107,30 +107,30 @@ warn_return_1 ()\n {\n   foo f;\n   printf (\"returning 1\\n\");\n-}\n+}                              // WARNING - no return statement\n \n int\n warn_return_arg (int arg)\n {\n   foo f;\n   printf (\"returning %d\\n\", arg);\n   arg;\n-}\n+}                              // WARNING - no return statement\n \n int\n warn_return_sum (int x, int y)\n {\n   foo f;\n   printf (\"returning %d+%d\\n\", x, y);\n   x + y;\n-}\n+}                              // WARNING - no return statement\n \n foo\n warn_return_foo ()\n {\n   foo f;\n   printf (\"returning foo\\n\");\n-}\n+}                              // WARNING - no return statement\n \n foo\n nowarn_return_named_foo () return f\n@@ -142,7 +142,7 @@ foo\n warn_foo_parm_returns_foo (foo f)\n {\n   f;\n-}\n+}                              // WARNING - no return statement\n \n main ()\n {"}, {"sha": "56cd03693a41c30928dd4921a2be6b951d2b7d51", "filename": "gcc/testsuite/g++.old-deja/g++.other/cleanup2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcleanup2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcleanup2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcleanup2.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -1,5 +1,5 @@\n // Origin: Bryan Scattergood <bryan@fsel.com>\n-// Special g++ Options: -O -fno-exceptions\n+// Special g++ Options: -O -fno-exceptions -w\n \n extern \"C\" void abort();\n "}, {"sha": "88790cb03726ef21ebeaca23c7191c092489aa40", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash3.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -6,7 +6,7 @@ inline void f() {\n   S s;\n }\n \n-int g()\n+void g()\n {\n   for (int i = 0; i < 2; ++i)\n     f();"}, {"sha": "5f51ab485b37190b0d14b45e6510854bfb19c713", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash6.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -6,7 +6,7 @@ struct E\n   int f(int);\n };\n \n-int ha()\n+void ha()\n {\n   enum {X = 0};\n "}, {"sha": "ab46d8f59146f6763624d43cf174d40f536bb250", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash28.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -7,7 +7,7 @@ inline unsigned int asize(ARRY &a)\n   return sizeof(a) / sizeof(a[0]);\n }\n \n-int f(unsigned int n) {\n+void f(unsigned int n) {\n   int x[n];\n \n   asize(x); // ERROR - no matching function"}, {"sha": "40016761841ac337fbc88289b4f41d6c03aa8831", "filename": "gcc/testsuite/g++.old-deja/g++.pt/repo3.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Frepo3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Frepo3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Frepo3.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -0,0 +1,31 @@\n+// Test that we properly generate the vtable and such for C.\n+// Contributed by scott snyder <snyder@fnal.gov>\n+\n+// Build then link:\n+// Special g++ Options: -frepo\n+\n+struct A\n+{\n+  virtual ~A () {}\n+};\n+\n+template <typename T>\n+struct B : virtual public A\n+{\n+  virtual void foo () {}\n+};\n+\n+template <typename T>\n+struct C : virtual public A\n+{\n+};\n+\n+template <typename T>\n+struct D : public B<T>, public C<T>\n+{\n+};\n+\n+main ()\n+{\n+  D<int> x;\n+}"}, {"sha": "41774a3e0c8a80824932b0bee093ca210a36e65c", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename11.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename11.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -10,6 +10,7 @@ template <class T, class U, int I>\n S<T,I>::X f(T, U)\n {\n   S<T, I>::X();\n+  return S<T, I>::X();\n }\n \n template S<int, 3>::X f<int, double, 3>(int, double);"}, {"sha": "f604a5a3573d6c373600a64ce381fa652cfa436f", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb22.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -23,4 +23,4 @@ bool operator==(const MyInt& a, const MyInt& b)\n bool f()\n {\n   return 3 == MyInt();                          // ERROR - ambiguous\n-}                                               // ERROR - no return value\n+}"}, {"sha": "4dfa523f98e5e582b2394e2659ada5f9632839fd", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb69.C", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb69.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90418208f9263454e7a327fb74ce9e60cab0e944/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb69.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb69.C?ref=90418208f9263454e7a327fb74ce9e60cab0e944", "patch": "@@ -1,9 +1,20 @@\n-        #include <iostream.h>\n-        struct foo {\n-                foo(int x) { cerr << \"foo's int constructor (\" << x << \")\\n\"; };\n-        };\n-        struct bar : foo {\n-                typedef int an_int;\n-                bar() : bar::an_int(3) {};  // will call foo::foo(3)\n-        };\n-int main() { bar b; }\n+// Test that g++ complains about referring to a builtin type in a\n+// mem-initializer.\n+// Contributed by Kevin Buhr <buhr@stat.wisc.edu>\n+\n+int r = 0;\n+\n+struct foo {\n+  foo(int x) { r = 1; }\t\t// ERROR - candidate\n+};\t\t\t\t// ERROR - candidate\n+\n+struct bar : foo {\n+  typedef int an_int;\n+  bar() : bar::an_int(3) {}\t// ERROR - not a base\n+};\n+\n+int\n+main() {\n+  bar b;\n+  return r;\n+}"}]}