{"sha": "c43c3af2c5b7340275da609f6bdd2bdc4a787c1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQzYzNhZjJjNWI3MzQwMjc1ZGE2MDlmNmJkZDJiZGM0YTc4N2MxYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-17T14:36:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-17T14:36:37Z"}, "message": "PR libstdc++/90246 Improve text of std::variant exceptions and assertions\n\n\tPR libstdc++/90246\n\t* include/std/variant (holds_alternative, get, get_if): Improve\n\tstatic assertion messages.\n\t(bad_variant_access::bad_variant_access()): Change default message.\n\t(__throw_bad_variant_access(bool)): New overload.\n\t(get): Use new overload.\n\t(visit, visit<R>): Improve exception message.\n\nFrom-SVN: r271326", "tree": {"sha": "c42c58b15c222877e0223a4fd3eb2f1c79dcddbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c42c58b15c222877e0223a4fd3eb2f1c79dcddbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c43c3af2c5b7340275da609f6bdd2bdc4a787c1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c43c3af2c5b7340275da609f6bdd2bdc4a787c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c43c3af2c5b7340275da609f6bdd2bdc4a787c1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c43c3af2c5b7340275da609f6bdd2bdc4a787c1c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac781bc88019eae2bb119d550f587ff4c9ff174d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac781bc88019eae2bb119d550f587ff4c9ff174d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac781bc88019eae2bb119d550f587ff4c9ff174d"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "d310cb0cc5c6b2009c46eb18af5f2ef4120efed6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43c3af2c5b7340275da609f6bdd2bdc4a787c1c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43c3af2c5b7340275da609f6bdd2bdc4a787c1c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c43c3af2c5b7340275da609f6bdd2bdc4a787c1c", "patch": "@@ -1,5 +1,13 @@\n 2019-05-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/90246\n+\t* include/std/variant (holds_alternative, get, get_if): Improve\n+\tstatic assertion messages.\n+\t(bad_variant_access::bad_variant_access()): Change default message.\n+\t(__throw_bad_variant_access(bool)): New overload.\n+\t(get): Use new overload.\n+\t(visit, visit<R>): Improve exception message.\n+\n \t* testsuite/20_util/variant/compile.cc: Fix narrowing test for ILP32\n \ttargets. Add more cases from P0608R3.\n \t* testsuite/20_util/variant/run.cc: Add more cases from P0608R3."}, {"sha": "60472b4c799ff1e939b284613fadc364a30fc36a", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43c3af2c5b7340275da609f6bdd2bdc4a787c1c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43c3af2c5b7340275da609f6bdd2bdc4a787c1c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=c43c3af2c5b7340275da609f6bdd2bdc4a787c1c", "patch": "@@ -1065,15 +1065,15 @@ namespace __variant\n     holds_alternative(const variant<_Types...>& __v) noexcept\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n-\t\t    \"T should occur for exactly once in alternatives\");\n+\t\t    \"T must occur exactly once in alternatives\");\n       return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;\n     }\n \n   template<typename _Tp, typename... _Types>\n     constexpr _Tp& get(variant<_Types...>& __v)\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n-\t\t    \"T should occur for exactly once in alternatives\");\n+\t\t    \"T must occur exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);\n     }\n@@ -1082,7 +1082,7 @@ namespace __variant\n     constexpr _Tp&& get(variant<_Types...>&& __v)\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n-\t\t    \"T should occur for exactly once in alternatives\");\n+\t\t    \"T must occur exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n \tstd::move(__v));\n@@ -1092,7 +1092,7 @@ namespace __variant\n     constexpr const _Tp& get(const variant<_Types...>& __v)\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n-\t\t    \"T should occur for exactly once in alternatives\");\n+\t\t    \"T must occur exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);\n     }\n@@ -1101,7 +1101,7 @@ namespace __variant\n     constexpr const _Tp&& get(const variant<_Types...>&& __v)\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n-\t\t    \"T should occur for exactly once in alternatives\");\n+\t\t    \"T must occur exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n \tstd::move(__v));\n@@ -1139,7 +1139,7 @@ namespace __variant\n     get_if(variant<_Types...>* __ptr) noexcept\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n-\t\t    \"T should occur for exactly once in alternatives\");\n+\t\t    \"T must occur exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n \t  __ptr);\n@@ -1150,7 +1150,7 @@ namespace __variant\n     get_if(const variant<_Types...>* __ptr) noexcept\n     {\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n-\t\t    \"T should occur for exactly once in alternatives\");\n+\t\t    \"T must occur exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n \t  __ptr);\n@@ -1213,22 +1213,34 @@ namespace __variant\n   class bad_variant_access : public exception\n   {\n   public:\n-    bad_variant_access() noexcept : _M_reason(\"Unknown reason\") { }\n+    bad_variant_access() noexcept { }\n+\n     const char* what() const noexcept override\n     { return _M_reason; }\n \n   private:\n-    bad_variant_access(const char* __reason) : _M_reason(__reason) { }\n+    bad_variant_access(const char* __reason) noexcept : _M_reason(__reason) { }\n \n-    const char* _M_reason;\n+    // Must point to a string with static storage duration:\n+    const char* _M_reason = \"bad variant access\";\n \n     friend void __throw_bad_variant_access(const char* __what);\n   };\n \n+  // Must only be called with a string literal\n   inline void\n   __throw_bad_variant_access(const char* __what)\n   { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }\n \n+  inline void\n+  __throw_bad_variant_access(bool __valueless)\n+  {\n+    if (__valueless) [[__unlikely__]]\n+      __throw_bad_variant_access(\"std::get: variant is valueless\");\n+    else\n+      __throw_bad_variant_access(\"std::get: wrong index for variant\");\n+  }\n+\n   template<typename... _Types>\n     class variant\n     : private __detail::__variant::_Variant_base<_Types...>,\n@@ -1592,7 +1604,7 @@ namespace __variant\n       static_assert(_Np < sizeof...(_Types),\n \t\t    \"The index should be in [0, number of alternatives)\");\n       if (__v.index() != _Np)\n-\t__throw_bad_variant_access(\"Unexpected index\");\n+\t__throw_bad_variant_access(__v.valueless_by_exception());\n       return __detail::__variant::__get<_Np>(__v);\n     }\n \n@@ -1603,7 +1615,7 @@ namespace __variant\n       static_assert(_Np < sizeof...(_Types),\n \t\t    \"The index should be in [0, number of alternatives)\");\n       if (__v.index() != _Np)\n-\t__throw_bad_variant_access(\"Unexpected index\");\n+\t__throw_bad_variant_access(__v.valueless_by_exception());\n       return __detail::__variant::__get<_Np>(std::move(__v));\n     }\n \n@@ -1614,7 +1626,7 @@ namespace __variant\n       static_assert(_Np < sizeof...(_Types),\n \t\t    \"The index should be in [0, number of alternatives)\");\n       if (__v.index() != _Np)\n-\t__throw_bad_variant_access(\"Unexpected index\");\n+\t__throw_bad_variant_access(__v.valueless_by_exception());\n       return __detail::__variant::__get<_Np>(__v);\n     }\n \n@@ -1625,7 +1637,7 @@ namespace __variant\n       static_assert(_Np < sizeof...(_Types),\n \t\t    \"The index should be in [0, number of alternatives)\");\n       if (__v.index() != _Np)\n-\t__throw_bad_variant_access(\"Unexpected index\");\n+\t__throw_bad_variant_access(__v.valueless_by_exception());\n       return __detail::__variant::__get<_Np>(std::move(__v));\n     }\n \n@@ -1646,7 +1658,7 @@ namespace __variant\n     visit(_Visitor&& __visitor, _Variants&&... __variants)\n     {\n       if ((__variants.valueless_by_exception() || ...))\n-\t__throw_bad_variant_access(\"Unexpected index\");\n+\t__throw_bad_variant_access(\"std::visit: variant is valueless\");\n \n       using _Result_type = std::invoke_result_t<_Visitor,\n \tdecltype(std::get<0>(std::declval<_Variants>()))...>;\n@@ -1663,7 +1675,7 @@ namespace __variant\n     visit(_Visitor&& __visitor, _Variants&&... __variants)\n     {\n       if ((__variants.valueless_by_exception() || ...))\n-\t__throw_bad_variant_access(\"Unexpected index\");\n+\t__throw_bad_variant_access(\"std::visit<R>: variant is valueless\");\n \n       return std::__do_visit<_Res>(std::forward<_Visitor>(__visitor),\n \t\t\t\t   std::forward<_Variants>(__variants)...);"}]}