{"sha": "24d5b0970a7d07a30430b17b2a837832c3b1b38e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRkNWIwOTcwYTdkMDdhMzA0MzBiMTdiMmE4Mzc4MzJjM2IxYjM4ZQ==", "commit": {"author": {"name": "Xuepeng Guo", "email": "xguo@gcc.gnu.org", "date": "2013-05-30T08:11:30Z"}, "committer": {"name": "Xuepeng Guo", "email": "xguo@gcc.gnu.org", "date": "2013-05-30T08:11:30Z"}, "message": "arm-protos.h: Add and update function protos.\n\ngcc/ChangeLog:\n2013-05-30  Bernd Schmidt  <bernds@codesourcery.com>\n\t    Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\t* config/arm/arm-protos.h: Add and update function protos.\n\t* config/arm/arm.c (use_simple_return_p): New added.\n\t(thumb2_expand_return): Check simple_return flag.\n\t* config/arm/arm.md: Add simple_return and conditional simple_return.\n\t* config/arm/iterators.md: Add iterator for return and simple_return.\n\ngcc/testsuite/ChangeLog:\n2013-05-30  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\t* gcc.dg/shrink-wrap-alloca.c: New added.\n\t* gcc.dg/shrink-wrap-pretend.c: New added.\n\t* gcc.dg/shrink-wrap-sibcall.c: New added.\n\nFrom-SVN: r199439", "tree": {"sha": "7d5df32b06814b7ade77dd32dec02366031c6158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d5df32b06814b7ade77dd32dec02366031c6158"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24d5b0970a7d07a30430b17b2a837832c3b1b38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d5b0970a7d07a30430b17b2a837832c3b1b38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d5b0970a7d07a30430b17b2a837832c3b1b38e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d5b0970a7d07a30430b17b2a837832c3b1b38e/comments", "author": null, "committer": null, "parents": [{"sha": "c1cccc15b70ec9a7afba448343c98c8c3eacf506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1cccc15b70ec9a7afba448343c98c8c3eacf506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1cccc15b70ec9a7afba448343c98c8c3eacf506"}], "stats": {"total": 151, "additions": 136, "deletions": 15}, "files": [{"sha": "6d540e759e41cf0991892488e7b592865fb79d00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24d5b0970a7d07a30430b17b2a837832c3b1b38e", "patch": "@@ -1,3 +1,12 @@\n+2013-05-30  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\t* config/arm/arm-protos.h: Add and update function protos.\n+\t* config/arm/arm.c (use_simple_return_p): New added.\n+\t(thumb2_expand_return): Check simple_return flag.\n+\t* config/arm/arm.md: Add simple_return and conditional simple_return.\n+\t* config/arm/iterators.md: Add iterator for return and simple_return.\n+\n 2013-05-30  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* config/arm/arm.c (arm_add_cfa_adjust_cfa_note): New added."}, {"sha": "04284177c962d52902df9016af9f307f82a433a9", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=24d5b0970a7d07a30430b17b2a837832c3b1b38e", "patch": "@@ -24,12 +24,13 @@\n \n extern enum unwind_info_type arm_except_unwind_info (struct gcc_options *);\n extern int use_return_insn (int, rtx);\n+extern bool use_simple_return_p (void);\n extern enum reg_class arm_regno_class (int);\n extern void arm_load_pic_register (unsigned long);\n extern int arm_volatile_func (void);\n extern void arm_expand_prologue (void);\n extern void arm_expand_epilogue (bool);\n-extern void thumb2_expand_return (void);\n+extern void thumb2_expand_return (bool);\n extern const char *arm_strip_name_encoding (const char *);\n extern void arm_asm_output_labelref (FILE *, const char *);\n extern void thumb2_asm_output_opcode (FILE *);"}, {"sha": "55a512349cca64da023f2fdb09ffbdc1ff4e78a0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=24d5b0970a7d07a30430b17b2a837832c3b1b38e", "patch": "@@ -2169,6 +2169,14 @@ arm_option_override (void)\n                          global_options.x_param_values,\n                          global_options_set.x_param_values);\n \n+  /* Disable shrink-wrap when optimizing function for size, since it tends to\n+     generate additional returns.  */\n+  if (optimize_function_for_size_p (cfun) && TARGET_THUMB2)\n+    flag_shrink_wrap = false;\n+  /* TBD: Dwarf info for apcs frame is not handled yet.  */\n+  if (TARGET_APCS_FRAME)\n+    flag_shrink_wrap = false;\n+\n   /* Register global variables with the garbage collector.  */\n   arm_add_gc_roots ();\n }\n@@ -2518,6 +2526,18 @@ use_return_insn (int iscond, rtx sibling)\n   return 1;\n }\n \n+/* Return TRUE if we should try to use a simple_return insn, i.e. perform\n+   shrink-wrapping if possible.  This is the case if we need to emit a\n+   prologue, which we can test by looking at the offsets.  */\n+bool\n+use_simple_return_p (void)\n+{\n+  arm_stack_offsets *offsets;\n+\n+  offsets = arm_get_frame_offsets ();\n+  return offsets->outgoing_args != 0;\n+}\n+\n /* Return TRUE if int I is a valid immediate ARM constant.  */\n \n int\n@@ -24035,7 +24055,7 @@ thumb1_expand_prologue (void)\n    all we really need to check here is if single register is to be\n    returned, or multiple register return.  */\n void\n-thumb2_expand_return (void)\n+thumb2_expand_return (bool simple_return)\n {\n   int i, num_regs;\n   unsigned long saved_regs_mask;\n@@ -24048,7 +24068,7 @@ thumb2_expand_return (void)\n     if (saved_regs_mask & (1 << i))\n       num_regs++;\n \n-  if (saved_regs_mask)\n+  if (!simple_return && saved_regs_mask)\n     {\n       if (num_regs == 1)\n         {"}, {"sha": "b7db3616cdf974faee36c27fb9d0dabcd296c279", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=24d5b0970a7d07a30430b17b2a837832c3b1b38e", "patch": "@@ -9276,17 +9276,17 @@\n   [(set_attr \"type\" \"call\")]\n )\n \n-(define_expand \"return\"\n-  [(return)]\n+(define_expand \"<return_str>return\"\n+  [(returns)]\n   \"(TARGET_ARM || (TARGET_THUMB2\n                    && ARM_FUNC_TYPE (arm_current_func_type ()) == ARM_FT_NORMAL\n                    && !IS_STACKALIGN (arm_current_func_type ())))\n-    && USE_RETURN_INSN (FALSE)\"\n+    <return_cond_false>\"\n   \"\n   {\n     if (TARGET_THUMB2)\n       {\n-        thumb2_expand_return ();\n+        thumb2_expand_return (<return_simple_p>);\n         DONE;\n       }\n   }\n@@ -9311,42 +9311,44 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"*cond_return\"\n+(define_insn \"*cond_<return_str>return\"\n   [(set (pc)\n         (if_then_else (match_operator 0 \"arm_comparison_operator\"\n \t\t       [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n-                      (return)\n+                      (returns)\n                       (pc)))]\n-  \"TARGET_ARM && USE_RETURN_INSN (TRUE)\"\n+  \"TARGET_ARM  <return_cond_true>\"\n   \"*\n   {\n     if (arm_ccfsm_state == 2)\n       {\n         arm_ccfsm_state += 2;\n         return \\\"\\\";\n       }\n-    return output_return_instruction (operands[0], true, false, false);\n+    return output_return_instruction (operands[0], true, false,\n+\t\t\t\t      <return_simple_p>);\n   }\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"12\")\n    (set_attr \"type\" \"load1\")]\n )\n \n-(define_insn \"*cond_return_inverted\"\n+(define_insn \"*cond_<return_str>return_inverted\"\n   [(set (pc)\n         (if_then_else (match_operator 0 \"arm_comparison_operator\"\n \t\t       [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n                       (pc)\n-\t\t      (return)))]\n-  \"TARGET_ARM && USE_RETURN_INSN (TRUE)\"\n+\t\t      (returns)))]\n+  \"TARGET_ARM <return_cond_true>\"\n   \"*\n   {\n     if (arm_ccfsm_state == 2)\n       {\n         arm_ccfsm_state += 2;\n         return \\\"\\\";\n       }\n-    return output_return_instruction (operands[0], true, true, false);\n+    return output_return_instruction (operands[0], true, true,\n+\t\t\t\t      <return_simple_p>);\n   }\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"12\")"}, {"sha": "d84929f3d1fb9836207b1f79c6f0ddcb39055c07", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=24d5b0970a7d07a30430b17b2a837832c3b1b38e", "patch": "@@ -496,3 +496,11 @@\n (define_int_attr nvrint_variant [(UNSPEC_NVRINTZ \"z\") (UNSPEC_NVRINTP \"p\")\n                                 (UNSPEC_NVRINTA \"a\") (UNSPEC_NVRINTM \"m\")\n                                 (UNSPEC_NVRINTX \"x\") (UNSPEC_NVRINTN \"n\")])\n+;; Both kinds of return insn.\n+(define_code_iterator returns [return simple_return])\n+(define_code_attr return_str [(return \"\") (simple_return \"simple_\")])\n+(define_code_attr return_simple_p [(return \"false\") (simple_return \"true\")])\n+(define_code_attr return_cond_false [(return \" && USE_RETURN_INSN (FALSE)\")\n+                               (simple_return \" && use_simple_return_p ()\")])\n+(define_code_attr return_cond_true [(return \" && USE_RETURN_INSN (TRUE)\")\n+                               (simple_return \" && use_simple_return_p ()\")])"}, {"sha": "6af715564c9a54cd7c1358a61da21a37c7c4653a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24d5b0970a7d07a30430b17b2a837832c3b1b38e", "patch": "@@ -1,3 +1,9 @@\n+2013-05-30  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\t* gcc.dg/shrink-wrap-alloca.c: New added.\n+\t* gcc.dg/shrink-wrap-pretend.c: New added.\n+\t* gcc.dg/shrink-wrap-sibcall.c: New added.\n+\n 2013-05-30  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57458"}, {"sha": "9e69ca166458ae9a3b793afb6deae57052076f69", "filename": "gcc/testsuite/gcc.dg/shrink-wrap-alloca.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-alloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-alloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-alloca.c?ref=24d5b0970a7d07a30430b17b2a837832c3b1b38e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+extern int * alloca (int);\n+\n+int *p;\n+\n+void\n+test (int a)\n+{\n+  if (a > 0)\n+    p = alloca (4);\n+}"}, {"sha": "6e20ca12e98d1b81861b7396cb1e4683efe0cc3e", "filename": "gcc/testsuite/gcc.dg/shrink-wrap-pretend.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-pretend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-pretend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-pretend.c?ref=24d5b0970a7d07a30430b17b2a837832c3b1b38e", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <stdarg.h>\n+\n+#define DEBUG_BUFFER_SIZE 80\n+int unifi_debug = 5;\n+\n+void\n+unifi_trace (void* ospriv, int level, const char *fmt, ...)\n+{\n+   static char s[DEBUG_BUFFER_SIZE];\n+   va_list args;\n+   unsigned int len;\n+\n+   if (!ospriv)\n+     return;\n+\n+   if (unifi_debug >= level)\n+     {\n+       va_start (args, fmt);\n+       len = vsnprintf (&(s)[0], (DEBUG_BUFFER_SIZE), fmt, args);\n+       va_end (args);\n+\n+       if (len >= DEBUG_BUFFER_SIZE)\n+\t {\n+\t   (s)[DEBUG_BUFFER_SIZE - 2] = '\\n';\n+\t   (s)[DEBUG_BUFFER_SIZE - 1] = 0;\n+\t }\n+\n+       printf (\"%s\", s);\n+     }\n+}\n+"}, {"sha": "193bec2ce697f79bf26b801877216d1131ae311a", "filename": "gcc/testsuite/gcc.dg/shrink-wrap-sibcall.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-sibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d5b0970a7d07a30430b17b2a837832c3b1b38e/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-sibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-sibcall.c?ref=24d5b0970a7d07a30430b17b2a837832c3b1b38e", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+unsigned char a, b, d, f, g;\n+\n+int test (void);\n+\n+int\n+baz (int c)\n+{\n+  if (c == 0) return test ();\n+  if (b & 1)\n+    {\n+      g = 0;\n+      int e = (a & 0x0f) - (g & 0x0f);\n+\n+      if (!a)  b |= 0x80;\n+      a = e + test ();\n+     f = g/5 + a*3879 + b *2985;\n+    }\n+   else\n+   {\n+     f = g + a*39879 + b *25;\n+   }\n+  return test ();\n+}"}]}