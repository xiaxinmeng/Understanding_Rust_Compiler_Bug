{"sha": "14d4b4fb12041dde1511262b926662929196c3fe", "node_id": "C_kwDOANBUbNoAKDE0ZDRiNGZiMTIwNDFkZGUxNTExMjYyYjkyNjY2MjkyOTE5NmMzZmU", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-09-23T11:12:29Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-09-23T11:12:29Z"}, "message": "aarch64: Add Arm Neoverse V2 support\n\nThis patch adds -mcpu/-mtune support for the Arm Neoverse V2 core.\nThis updates the internal references to \"demeter\", but leaves \"demeter\" as an\naccepted value to -mcpu/-mtune as it appears in the released GCC 12 series.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-cores.def (neoverse-v2): New entry.\n\t(demeter): Update tunings to neoversev2.\n\t* config/aarch64/aarch64-tune.md: Regenerate.\n\t* config/aarch64/aarch64.cc (demeter_addrcost_table): Rename to\n\tneoversev2_addrcost_table.\n\t(demeter_regmove_cost): Rename to neoversev2_addrcost_table.\n\t(demeter_advsimd_vector_cost): Rename to neoversev2_advsimd_vector_cost.\n\t(demeter_sve_vector_cost): Rename to neoversev2_sve_vector_cost.\n\t(demeter_scalar_issue_info): Rename to neoversev2_scalar_issue_info.\n\t(demeter_advsimd_issue_info): Rename to neoversev2_advsimd_issue_info.\n\t(demeter_sve_issue_info): Rename to neoversev2_sve_issue_info.\n\t(demeter_vec_issue_info): Rename to neoversev2_vec_issue_info.\n\tUpdate references to above.\n\t(demeter_vector_cost): Rename to neoversev2_vector_cost.\n\t(demeter_tunings): Rename to neoversev2_tunings.\n\t(aarch64_vec_op_count::rename_cycles_per_iter): Use\n\tneoversev2_sve_issue_info instead of demeter_sve_issue_info.\n\t* doc/invoke.texi (AArch64 Options): Document neoverse-v2.", "tree": {"sha": "61dced53a2a6d62ebe68bcad2ca828a8a34ec2ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61dced53a2a6d62ebe68bcad2ca828a8a34ec2ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14d4b4fb12041dde1511262b926662929196c3fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d4b4fb12041dde1511262b926662929196c3fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14d4b4fb12041dde1511262b926662929196c3fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d4b4fb12041dde1511262b926662929196c3fe/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d10308ff618e036d6c3d1a8c491ca4755b257612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d10308ff618e036d6c3d1a8c491ca4755b257612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d10308ff618e036d6c3d1a8c491ca4755b257612"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "0402bfb748faff3a6b104521d09c4cb877575036", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d4b4fb12041dde1511262b926662929196c3fe/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d4b4fb12041dde1511262b926662929196c3fe/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=14d4b4fb12041dde1511262b926662929196c3fe", "patch": "@@ -171,6 +171,7 @@ AARCH64_CORE(\"cortex-x2\",  cortexx2, cortexa57, 9A,  AARCH64_FL_FOR_ARCH9 | AARC\n \n AARCH64_CORE(\"neoverse-n2\", neoversen2, cortexa57, 9A, AARCH64_FL_FOR_ARCH9 | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_RNG | AARCH64_FL_MEMTAG | AARCH64_FL_PROFILE, neoversen2, 0x41, 0xd49, -1)\n \n-AARCH64_CORE(\"demeter\", demeter, cortexa57, 9A, AARCH64_FL_FOR_ARCH9 | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_RNG | AARCH64_FL_MEMTAG | AARCH64_FL_PROFILE, demeter, 0x41, 0xd4f, -1)\n+AARCH64_CORE(\"demeter\", demeter, cortexa57, 9A, AARCH64_FL_FOR_ARCH9 | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_RNG | AARCH64_FL_MEMTAG | AARCH64_FL_PROFILE, neoversev2, 0x41, 0xd4f, -1)\n+AARCH64_CORE(\"neoverse-v2\", neoversev2, cortexa57, 9A, AARCH64_FL_FOR_ARCH9 | AARCH64_FL_I8MM | AARCH64_FL_BF16 | AARCH64_FL_SVE2_BITPERM | AARCH64_FL_RNG | AARCH64_FL_MEMTAG | AARCH64_FL_PROFILE, neoversev2, 0x41, 0xd4f, -1)\n \n #undef AARCH64_CORE"}, {"sha": "84e9bbf44f6222b3e5bcf4cbf8fab7ebf17015e1", "filename": "gcc/config/aarch64/aarch64-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d4b4fb12041dde1511262b926662929196c3fe/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d4b4fb12041dde1511262b926662929196c3fe/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md?ref=14d4b4fb12041dde1511262b926662929196c3fe", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from aarch64-cores.def\n (define_attr \"tune\"\n-\t\"cortexa34,cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,ampere1,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,cortexa76ae,cortexa77,cortexa78,cortexa78ae,cortexa78c,cortexa65,cortexa65ae,cortexx1,ares,neoversen1,neoversee1,octeontx2,octeontx2t98,octeontx2t96,octeontx2t93,octeontx2f95,octeontx2f95n,octeontx2f95mm,a64fx,tsv110,thunderx3t110,zeus,neoversev1,neoverse512tvb,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55,cortexr82,cortexa510,cortexa710,cortexx2,neoversen2,demeter\"\n+\t\"cortexa34,cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,ampere1,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,cortexa76ae,cortexa77,cortexa78,cortexa78ae,cortexa78c,cortexa65,cortexa65ae,cortexx1,ares,neoversen1,neoversee1,octeontx2,octeontx2t98,octeontx2t96,octeontx2t93,octeontx2f95,octeontx2f95n,octeontx2f95mm,a64fx,tsv110,thunderx3t110,zeus,neoversev1,neoverse512tvb,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55,cortexr82,cortexa510,cortexa710,cortexx2,neoversen2,demeter,neoversev2\"\n \t(const (symbol_ref \"((enum attr_tune) aarch64_tune)\")))"}, {"sha": "b4971bd1d1476e681efe5897a301e7d18ee0ab84", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d4b4fb12041dde1511262b926662929196c3fe/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d4b4fb12041dde1511262b926662929196c3fe/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=14d4b4fb12041dde1511262b926662929196c3fe", "patch": "@@ -534,7 +534,7 @@ static const struct cpu_addrcost_table neoversen2_addrcost_table =\n   0 /* imm_offset  */\n };\n \n-static const struct cpu_addrcost_table demeter_addrcost_table =\n+static const struct cpu_addrcost_table neoversev2_addrcost_table =\n {\n     {\n       1, /* hi  */\n@@ -677,7 +677,7 @@ static const struct cpu_regmove_cost neoversev1_regmove_cost =\n   2 /* FP2FP  */\n };\n \n-static const struct cpu_regmove_cost demeter_regmove_cost =\n+static const struct cpu_regmove_cost neoversev2_regmove_cost =\n {\n   1, /* GP2GP  */\n   /* Spilling to int<->fp instead of memory is recommended so set\n@@ -2426,7 +2426,7 @@ static const struct tune_params neoversen2_tunings =\n   &generic_prefetch_tune\n };\n \n-static const advsimd_vec_cost demeter_advsimd_vector_cost =\n+static const advsimd_vec_cost neoversev2_advsimd_vector_cost =\n {\n   2, /* int_stmt_cost  */\n   2, /* fp_stmt_cost  */\n@@ -2457,7 +2457,7 @@ static const advsimd_vec_cost demeter_advsimd_vector_cost =\n   1  /* store_cost  */\n };\n \n-static const sve_vec_cost demeter_sve_vector_cost =\n+static const sve_vec_cost neoversev2_sve_vector_cost =\n {\n   {\n     2, /* int_stmt_cost  */\n@@ -2514,7 +2514,7 @@ static const sve_vec_cost demeter_sve_vector_cost =\n   3 /* scatter_store_elt_cost  */\n };\n \n-static const aarch64_scalar_vec_issue_info demeter_scalar_issue_info =\n+static const aarch64_scalar_vec_issue_info neoversev2_scalar_issue_info =\n {\n   3, /* loads_stores_per_cycle  */\n   2, /* stores_per_cycle  */\n@@ -2523,7 +2523,7 @@ static const aarch64_scalar_vec_issue_info demeter_scalar_issue_info =\n   1 /* fp_simd_store_general_ops  */\n };\n \n-static const aarch64_advsimd_vec_issue_info demeter_advsimd_issue_info =\n+static const aarch64_advsimd_vec_issue_info neoversev2_advsimd_issue_info =\n {\n   {\n     3, /* loads_stores_per_cycle  */\n@@ -2537,7 +2537,7 @@ static const aarch64_advsimd_vec_issue_info demeter_advsimd_issue_info =\n   3 /* ld4_st4_general_ops  */\n };\n \n-static const aarch64_sve_vec_issue_info demeter_sve_issue_info =\n+static const aarch64_sve_vec_issue_info neoversev2_sve_issue_info =\n {\n   {\n     {\n@@ -2559,33 +2559,33 @@ static const aarch64_sve_vec_issue_info demeter_sve_issue_info =\n   1 /* gather_scatter_pair_pred_ops  */\n };\n \n-static const aarch64_vec_issue_info demeter_vec_issue_info =\n+static const aarch64_vec_issue_info neoversev2_vec_issue_info =\n {\n-  &demeter_scalar_issue_info,\n-  &demeter_advsimd_issue_info,\n-  &demeter_sve_issue_info\n+  &neoversev2_scalar_issue_info,\n+  &neoversev2_advsimd_issue_info,\n+  &neoversev2_sve_issue_info\n };\n \n /* Demeter costs for vector insn classes.  */\n-static const struct cpu_vector_cost demeter_vector_cost =\n+static const struct cpu_vector_cost neoversev2_vector_cost =\n {\n   1, /* scalar_int_stmt_cost  */\n   2, /* scalar_fp_stmt_cost  */\n   4, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n   1, /* cond_taken_branch_cost  */\n   1, /* cond_not_taken_branch_cost  */\n-  &demeter_advsimd_vector_cost, /* advsimd  */\n-  &demeter_sve_vector_cost, /* sve  */\n-  &demeter_vec_issue_info /* issue_info  */\n+  &neoversev2_advsimd_vector_cost, /* advsimd  */\n+  &neoversev2_sve_vector_cost, /* sve  */\n+  &neoversev2_vec_issue_info /* issue_info  */\n };\n \n-static const struct tune_params demeter_tunings =\n+static const struct tune_params neoversev2_tunings =\n {\n   &cortexa76_extra_costs,\n-  &demeter_addrcost_table,\n-  &demeter_regmove_cost,\n-  &demeter_vector_cost,\n+  &neoversev2_addrcost_table,\n+  &neoversev2_regmove_cost,\n+  &neoversev2_vector_cost,\n   &generic_branch_cost,\n   &generic_approx_modes,\n   SVE_128, /* sve_width  */\n@@ -15566,7 +15566,7 @@ aarch64_vec_op_count::rename_cycles_per_iter () const\n {\n   if (sve_issue_info () == &neoverse512tvb_sve_issue_info\n       || sve_issue_info () == &neoversen2_sve_issue_info\n-      || sve_issue_info () == &demeter_sve_issue_info)\n+      || sve_issue_info () == &neoversev2_sve_issue_info)\n     /* + 1 for an addition.  We've already counted a general op for each\n        store, so we don't need to account for stores separately.  The branch\n        reads no registers and so does not need to be counted either."}, {"sha": "928ab0ff02f2e7ced54bd560a215ffb74e27ab55", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d4b4fb12041dde1511262b926662929196c3fe/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d4b4fb12041dde1511262b926662929196c3fe/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=14d4b4fb12041dde1511262b926662929196c3fe", "patch": "@@ -19711,7 +19711,7 @@ performance of the code.  Permissible values for this option are:\n @samp{cortex-a78}, @samp{cortex-a78ae}, @samp{cortex-a78c},\n @samp{ares}, @samp{exynos-m1}, @samp{emag}, @samp{falkor},\n @samp{neoverse-512tvb}, @samp{neoverse-e1}, @samp{neoverse-n1},\n-@samp{neoverse-n2}, @samp{neoverse-v1}, @samp{qdf24xx},\n+@samp{neoverse-n2}, @samp{neoverse-v1}, @samp{neoverse-v2}, @samp{qdf24xx},\n @samp{saphira}, @samp{phecda}, @samp{xgene1}, @samp{vulcan},\n @samp{octeontx}, @samp{octeontx81},  @samp{octeontx83},\n @samp{octeontx2}, @samp{octeontx2t98}, @samp{octeontx2t96}"}]}