{"sha": "e6f884cdac3ca7194b8cf8113702251aac072fa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmODg0Y2RhYzNjYTcxOTRiOGNmODExMzcwMjI1MWFhYzA3MmZhOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2002-03-22T09:30:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-03-22T09:30:35Z"}, "message": "mips.h (FUNCTION_ARG_REGNO_P): Simplify.\n\n\t* config/mips/mips.h (FUNCTION_ARG_REGNO_P): Simplify.\n\t(CLASS_UNITS): Undefine.\n\t(CLASS_MAX_NREGS): Use FP_INC.\n\t* config/mips/mips.c (compute_frame_size): Likewise.\n\t(override_options): Use FP_INC and UNITS_PER_FPVALUE.\n\nFrom-SVN: r51166", "tree": {"sha": "5a3c6aa6225c22878ad8e4f435be0b551102a481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a3c6aa6225c22878ad8e4f435be0b551102a481"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6f884cdac3ca7194b8cf8113702251aac072fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f884cdac3ca7194b8cf8113702251aac072fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f884cdac3ca7194b8cf8113702251aac072fa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f884cdac3ca7194b8cf8113702251aac072fa9/comments", "author": null, "committer": null, "parents": [{"sha": "6e115568690347d12b59d4111f08dd01bbb9f776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e115568690347d12b59d4111f08dd01bbb9f776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e115568690347d12b59d4111f08dd01bbb9f776"}], "stats": {"total": 55, "additions": 21, "deletions": 34}, "files": [{"sha": "74fe74a49503d5f6677f2ffee00214573bc9ded3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f884cdac3ca7194b8cf8113702251aac072fa9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f884cdac3ca7194b8cf8113702251aac072fa9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6f884cdac3ca7194b8cf8113702251aac072fa9", "patch": "@@ -1,3 +1,11 @@\n+2002-03-22  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (FUNCTION_ARG_REGNO_P): Simplify.\n+\t(CLASS_UNITS): Undefine.\n+\t(CLASS_MAX_NREGS): Use FP_INC.\n+\t* config/mips/mips.c (compute_frame_size): Likewise.\n+\t(override_options): Use FP_INC and UNITS_PER_FPVALUE.\n+\n 2002-03-22  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpplex.c (parse_identifier_slow): Rename parse_slow, adjust"}, {"sha": "535012c1733baebada7221cbe9bd0d7a8e30110f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f884cdac3ca7194b8cf8113702251aac072fa9/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f884cdac3ca7194b8cf8113702251aac072fa9/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e6f884cdac3ca7194b8cf8113702251aac072fa9", "patch": "@@ -5257,7 +5257,7 @@ override_options ()\n \t    temp = ((regno & 1) == 0 || size <= UNITS_PER_WORD);\n \n \t  else if (FP_REG_P (regno))\n-\t    temp = ((TARGET_FLOAT64 || ((regno & 1) == 0)\n+\t    temp = (((regno % FP_INC) == 0\n \t\t      /* I think this change is OK regardless of abi, but\n                         I'm being cautions untill I can test this more.\n                         HARD_REGNO_MODE_OK is about whether or not you\n@@ -5268,7 +5268,7 @@ override_options ()\n \t\t    && (class == MODE_FLOAT\n \t\t\t|| class == MODE_COMPLEX_FLOAT\n \t\t\t|| (TARGET_DEBUG_H_MODE && class == MODE_INT))\n-\t\t    && (! TARGET_SINGLE_FLOAT || size <= 4));\n+\t\t    && size <= UNITS_PER_FPVALUE);\n \n \t  else if (MD_REG_P (regno))\n \t    temp = (class == MODE_INT\n@@ -6415,8 +6415,6 @@ compute_frame_size (size)\n   HOST_WIDE_INT fp_reg_size;\t/* # bytes needed to store fp regs */\n   long mask;\t\t\t/* mask of saved gp registers */\n   long fmask;\t\t\t/* mask of saved fp registers */\n-  int  fp_inc;\t\t\t/* 1 or 2 depending on the size of fp regs */\n-  long fp_bits;\t\t\t/* bitmask to use for each fp register */\n   tree return_type;\n \n   gp_reg_size = 0;\n@@ -6488,28 +6486,16 @@ compute_frame_size (size)\n \t}\n     }\n \n-  /* Calculate space needed for fp registers.  */\n-  if (TARGET_FLOAT64 || TARGET_SINGLE_FLOAT)\n-    {\n-      fp_inc = 1;\n-      fp_bits = 1;\n-    }\n-  else\n-    {\n-      fp_inc = 2;\n-      fp_bits = 3;\n-    }\n-\n   /* This loop must iterate over the same space as its companion in\n      save_restore_insns.  */\n-  for (regno = (FP_REG_LAST - fp_inc + 1);\n+  for (regno = (FP_REG_LAST - FP_INC + 1);\n        regno >= FP_REG_FIRST;\n-       regno -= fp_inc)\n+       regno -= FP_INC)\n     {\n       if (regs_ever_live[regno] && !call_used_regs[regno])\n \t{\n-\t  fp_reg_size += fp_inc * UNITS_PER_FPREG;\n-\t  fmask |= fp_bits << (regno - FP_REG_FIRST);\n+\t  fp_reg_size += FP_INC * UNITS_PER_FPREG;\n+\t  fmask |= ((1 << FP_INC) - 1) << (regno - FP_REG_FIRST);\n \t}\n     }\n \n@@ -6555,7 +6541,7 @@ compute_frame_size (size)\n   current_frame_info.fmask = fmask;\n   current_frame_info.initialized = reload_completed;\n   current_frame_info.num_gp = gp_reg_size / UNITS_PER_WORD;\n-  current_frame_info.num_fp = fp_reg_size / (fp_inc * UNITS_PER_FPREG);\n+  current_frame_info.num_fp = fp_reg_size / (FP_INC * UNITS_PER_FPREG);\n \n   if (mask)\n     {\n@@ -6582,7 +6568,7 @@ compute_frame_size (size)\n     {\n       unsigned long offset = (args_size + extra_size + var_size\n \t\t\t      + gp_reg_rounded + fp_reg_size\n-\t\t\t      - fp_inc * UNITS_PER_FPREG);\n+\t\t\t      - FP_INC * UNITS_PER_FPREG);\n       current_frame_info.fp_sp_offset = offset;\n       current_frame_info.fp_save_offset = offset - total_size;\n     }"}, {"sha": "0a8238ddb74f99ded30aa9d49a44c18d3a47d3b1", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f884cdac3ca7194b8cf8113702251aac072fa9/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f884cdac3ca7194b8cf8113702251aac072fa9/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e6f884cdac3ca7194b8cf8113702251aac072fa9", "patch": "@@ -2331,15 +2331,10 @@ extern enum reg_class mips_char_to_class[256];\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n \n-#define CLASS_UNITS(mode, size)\t\t\t\t\t\t\\\n-  ((GET_MODE_SIZE (mode) + (size) - 1) / (size))\n-\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\t\t\t\t\\\n   ((CLASS) == FP_REGS\t\t\t\t\t\t\t\\\n-   ? (TARGET_FLOAT64\t\t\t\t\t\t\t\\\n-      ? CLASS_UNITS (MODE, 8)\t\t\t\t\t\t\\\n-      : 2 * CLASS_UNITS (MODE, 8))\t\t\t\t\t\\\n-   : CLASS_UNITS (MODE, UNITS_PER_WORD))\n+   ? FP_INC\t\t\t\t\t\t\t\t\\\n+   : (GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* If defined, gives a class of registers that cannot be used as the\n    operand of a SUBREG that changes the mode of the object illegally.\n@@ -2718,11 +2713,9 @@ extern struct mips_frame_info current_frame_info;\n    are 32 bits, we can't directly reference the odd numbered ones.  */\n \n #define FUNCTION_ARG_REGNO_P(N)\t\t\t\t\t\\\n-  (((N) >= GP_ARG_FIRST && (N) <= GP_ARG_LAST)\t\t\t\\\n-   || ((! TARGET_SOFT_FLOAT\t\t\t\t\t\\\n-       && ((N) >= FP_ARG_FIRST && (N) <= FP_ARG_LAST)\t\t\\\n-       && (TARGET_FLOAT64 || (0 == (N) % 2)))\t\t\t\\\n-       && ! fixed_regs[N]))\n+  ((((N) >= GP_ARG_FIRST && (N) <= GP_ARG_LAST)\t\t\t\\\n+    || ((N) >= FP_ARG_FIRST && (N) <= FP_ARG_LAST))\t\t\\\n+   && !fixed_regs[N])\n \n /* A C expression which can inhibit the returning of certain function\n    values in registers, based on the type of value.  A nonzero value says"}]}