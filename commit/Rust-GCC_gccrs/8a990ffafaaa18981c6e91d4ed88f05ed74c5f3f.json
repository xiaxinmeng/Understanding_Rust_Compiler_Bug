{"sha": "8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5OTBmZmFmYWFhMTg5ODFjNmU5MWQ0ZWQ4OGYwNWVkNzRjNWYzZg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-01-23T10:37:02Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-01-23T10:37:02Z"}, "message": "PR c/84919 - bogus -Wrestrict on sprintf %p with destination as argument\n\ngcc/c-family/ChangeLog:\n\n\tPR c/84919\n\t* c-common.c (check_function_arguments): Avoid overlap checking\n\tof sprintf functions.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/84919\n\t* gcc.dg/Wrestrict-20.c: New test.", "tree": {"sha": "6f5fb53b4e87c5473a3c80a390e87440b1074396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f5fb53b4e87c5473a3c80a390e87440b1074396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ed442a40f912b09297359ee3675c819c073208f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed442a40f912b09297359ee3675c819c073208f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ed442a40f912b09297359ee3675c819c073208f"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "0b9c604956a4ba340c6a653349dff1c66674475e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f", "patch": "@@ -1,3 +1,9 @@\n+2020-01-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/84919\n+\t* c-common.c (check_function_arguments): Avoid overlap checking\n+\tof sprintf functions.\n+\n 2020-01-22  Jason Merrill  <jason@redhat.com>\n \n \tPR testsuite/93391 - PR 40752 test fails with unsigned plain char."}, {"sha": "7e2dfb3ebe1590f5ef679381f16c49e09249d205", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f", "patch": "@@ -5729,8 +5729,26 @@ check_function_arguments (location_t loc, const_tree fndecl, const_tree fntype,\n   if (warn_format)\n     check_function_sentinel (fntype, nargs, argarray);\n \n-  if (warn_restrict)\n-    warned_p |= check_function_restrict (fndecl, fntype, nargs, argarray);\n+  if (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL))\n+    {\n+      switch (DECL_FUNCTION_CODE (fndecl))\n+\t{\n+\tcase BUILT_IN_SPRINTF:\n+\tcase BUILT_IN_SPRINTF_CHK:\n+\tcase BUILT_IN_SNPRINTF:\n+\tcase BUILT_IN_SNPRINTF_CHK:\n+\t  /* Let the sprintf pass handle these.  */\n+\t  return warned_p;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+\n+  /* check_function_restrict sets the DECL_READ_P for arguments\n+     so it must be called unconditionally.  */\n+  warned_p |= check_function_restrict (fndecl, fntype, nargs, argarray);\n+\n   return warned_p;\n }\n "}, {"sha": "22c172f299bb95c063d74347007db7c9c072ff5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f", "patch": "@@ -1,3 +1,8 @@\n+2020-01-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/84919\n+\t* gcc.dg/Wrestrict-20.c: New test.\n+\n 2020-01-23  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* g++.target/aarch64/sve/acle/general-c++/whilele_1.C: Skip for ILP32."}, {"sha": "9826e7f450314bbf9048d2ce15015c8b0351de82", "filename": "gcc/testsuite/gcc.dg/Wrestrict-20.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-20.c?ref=8a990ffafaaa18981c6e91d4ed88f05ed74c5f3f", "patch": "@@ -0,0 +1,41 @@\n+/* PR c/84919 - bogus -Wrestrict on sprintf %p with destination as argument\n+   { dg-do compile }\n+   -O2 isn't strictly necessary but setting also verifies that the sprintf/\n+   strlen pass doesn't warn with non-constant arguments.\n+   { dg-options \"-O2 -Wall\" } */\n+\n+extern int sprintf (char* restrict, const char* restrict, ...);\n+extern int snprintf (char* restrict, __SIZE_TYPE__, const char* restrict, ...);\n+\n+char a[32];\n+\n+void test_warn (char *p)\n+{\n+  a[0] = 0;\n+  sprintf (a, \"a=%s\", a);     /* { dg-warning \"-Wrestrict\" } */\n+\n+  p = a;\n+  char *q = p + 1;\n+  sprintf (p, \"a=%s\", q);     /* { dg-warning \"-Wrestrict\" } */\n+}\n+\n+void test_nowarn_front_end (char *d)\n+{\n+  sprintf (d, \"%p\", d);\n+  snprintf (d, 32, \"%p\", d);\n+\n+  sprintf (a, \"p=%p\", a);\n+  snprintf (a, sizeof a, \"%p\", a);\n+}\n+\n+void test_nowarn_sprintf_pass (char *d)\n+{\n+  char *q = d;\n+  \n+  sprintf (d, \"p=%p\", q);\n+  snprintf (d, 32, \"p=%p\", q);\n+\n+  q = a;\n+  sprintf (a, \"a=%p\", q);\n+  snprintf (a, sizeof a, \"a=%p\", q);\n+}"}]}