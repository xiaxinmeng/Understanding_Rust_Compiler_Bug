{"sha": "788d04b2b499af9cbcb8ef0f2ffdd7359825c1e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg4ZDA0YjJiNDk5YWY5Y2JjYjhlZjBmMmZmZGQ3MzU5ODI1YzFlMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-12-10T16:00:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-12-10T16:00:57Z"}, "message": "re PR tree-optimization/42337 (GCC ICE  in compute_antic, at tree-ssa-pre.c:2534)\n\n2009-12-10  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/42337\n\t* tree-ssa-pre.c (seen_during_translate): Remove.\n\t(phi_translate_1): Collapse into ...\n\t(phi_translate): ... this.  Remove seen parameter and\n\tadjust recursive calls.\n\nFrom-SVN: r155131", "tree": {"sha": "d8ded56efc3a6b59d229b0d617e1f3dc2c31920f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8ded56efc3a6b59d229b0d617e1f3dc2c31920f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/788d04b2b499af9cbcb8ef0f2ffdd7359825c1e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788d04b2b499af9cbcb8ef0f2ffdd7359825c1e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/788d04b2b499af9cbcb8ef0f2ffdd7359825c1e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788d04b2b499af9cbcb8ef0f2ffdd7359825c1e0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "749140af5d072abf5ebd10b2dbf2d7c73c602611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749140af5d072abf5ebd10b2dbf2d7c73c602611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749140af5d072abf5ebd10b2dbf2d7c73c602611"}], "stats": {"total": 64, "additions": 16, "deletions": 48}, "files": [{"sha": "b90eb2b4cc35404d3c41a28911ef249b36e3a080", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788d04b2b499af9cbcb8ef0f2ffdd7359825c1e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788d04b2b499af9cbcb8ef0f2ffdd7359825c1e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=788d04b2b499af9cbcb8ef0f2ffdd7359825c1e0", "patch": "@@ -1,3 +1,11 @@\n+2009-12-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42337\n+\t* tree-ssa-pre.c (seen_during_translate): Remove.\n+\t(phi_translate_1): Collapse into ...\n+\t(phi_translate): ... this.  Remove seen parameter and\n+\tadjust recursive calls.\n+\n 2009-12-10  Richard Guenther  <rguenther@suse.de>\n \tAllan Sandfeld Jensen  <linux@carewolf.com>\n "}, {"sha": "52e973fadb6835184efa490972da89904be7c8fe", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 8, "deletions": 48, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788d04b2b499af9cbcb8ef0f2ffdd7359825c1e0/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788d04b2b499af9cbcb8ef0f2ffdd7359825c1e0/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=788d04b2b499af9cbcb8ef0f2ffdd7359825c1e0", "patch": "@@ -458,9 +458,6 @@ static tree prephitemp;\n    cleaned up.  */\n static bitmap need_eh_cleanup;\n \n-/* Which expressions have been seen during a given phi translation.  */\n-static bitmap seen_during_translate;\n-\n /* The phi_translate_table caches phi translations for a given\n    expression and predecessor.  */\n \n@@ -1435,14 +1432,12 @@ get_representative_for (const pre_expr e)\n \n \n /* Translate EXPR using phis in PHIBLOCK, so that it has the values of\n-   the phis in PRED.  SEEN is a bitmap saying which expression we have\n-   translated since we started translation of the toplevel expression.\n-   Return NULL if we can't find a leader for each part of the\n-   translated expression.  */\n+   the phis in PRED.  Return NULL if we can't find a leader for each part\n+   of the translated expression.  */\n \n static pre_expr\n-phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n-\t\t basic_block pred, basic_block phiblock, bitmap seen)\n+phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n+\t       basic_block pred, basic_block phiblock)\n {\n   pre_expr oldexpr = expr;\n   pre_expr phitrans;\n@@ -1457,16 +1452,6 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n   if (phitrans)\n     return phitrans;\n \n-  /* Prevent cycles when we have recursively dependent leaders.  This\n-     can only happen when phi translating the maximal set.  */\n-  if (seen)\n-    {\n-      unsigned int expr_id = get_expression_id (expr);\n-      if (bitmap_bit_p (seen, expr_id))\n-\treturn NULL;\n-      bitmap_set_bit (seen, expr_id);\n-    }\n-\n   switch (expr->kind)\n     {\n       /* Constants contain no values that need translation.  */\n@@ -1491,16 +1476,9 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    else\n \t      {\n                 pre_expr leader, result;\n-                bitmap temp = BITMAP_ALLOC (&grand_bitmap_obstack);\n \t\tunsigned int op_val_id = VN_INFO (newnary.op[i])->value_id;\n-\n-                bitmap_copy (temp, seen);\n \t\tleader = find_leader_in_sets (op_val_id, set1, set2);\n-                result = phi_translate_1 (leader, set1, set2,\n-\t\t\t\t\t\t   pred, phiblock, seen);\n-                bitmap_copy (seen, temp);\n-                BITMAP_FREE (temp);\n-\n+                result = phi_translate (leader, set1, set2, pred, phiblock);\n \t\tif (result && result != leader)\n \t\t  {\n \t\t    tree name = get_representative_for (result);\n@@ -1602,8 +1580,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t      {\n \t\tunsigned int op_val_id = VN_INFO (op0)->value_id;\n \t\tleader = find_leader_in_sets (op_val_id, set1, set2);\n-\t\topresult = phi_translate_1 (leader, set1, set2,\n-\t\t\t\t\t    pred, phiblock, seen);\n+\t\topresult = phi_translate (leader, set1, set2, pred, phiblock);\n \t\tif (opresult && opresult != leader)\n \t\t  {\n \t\t    tree name = get_representative_for (opresult);\n@@ -1620,8 +1597,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t      {\n \t\tunsigned int op_val_id = VN_INFO (op1)->value_id;\n \t\tleader = find_leader_in_sets (op_val_id, set1, set2);\n-\t\topresult = phi_translate_1 (leader, set1, set2,\n-\t\t\t\t\t    pred, phiblock, seen);\n+\t\topresult = phi_translate (leader, set1, set2, pred, phiblock);\n \t\tif (opresult && opresult != leader)\n \t\t  {\n \t\t    tree name = get_representative_for (opresult);\n@@ -1640,8 +1616,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t      {\n \t\tunsigned int op_val_id = VN_INFO (op2)->value_id;\n \t\tleader = find_leader_in_sets (op_val_id, set1, set2);\n-\t\topresult = phi_translate_1 (leader, set1, set2,\n-\t\t\t\t\t    pred, phiblock, seen);\n+\t\topresult = phi_translate (leader, set1, set2, pred, phiblock);\n \t\tif (opresult && opresult != leader)\n \t\t  {\n \t\t    tree name = get_representative_for (opresult);\n@@ -1797,20 +1772,6 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n     }\n }\n \n-/* Translate EXPR using phis in PHIBLOCK, so that it has the values of\n-   the phis in PRED.\n-   Return NULL if we can't find a leader for each part of the\n-   translated expression.  */\n-\n-static pre_expr\n-phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n-\t       basic_block pred, basic_block phiblock)\n-{\n-  bitmap_clear (seen_during_translate);\n-  return phi_translate_1 (expr, set1, set2, pred, phiblock,\n-\t\t\t  seen_during_translate);\n-}\n-\n /* For each expression in SET, translate the values through phi nodes\n    in PHIBLOCK using edge PHIBLOCK->PRED, and store the resulting\n    expressions in DEST.  */\n@@ -4520,7 +4481,6 @@ init_pre (bool do_fre)\n   expression_to_id = htab_create (num_ssa_names * 3,\n \t\t\t\t  pre_expr_hash,\n \t\t\t\t  pre_expr_eq, NULL);\n-  seen_during_translate = BITMAP_ALLOC (&grand_bitmap_obstack);\n   bitmap_set_pool = create_alloc_pool (\"Bitmap sets\",\n \t\t\t\t       sizeof (struct bitmap_set), 30);\n   pre_expr_pool = create_alloc_pool (\"pre_expr nodes\","}]}