{"sha": "261376e723399348ac2633631aaae6a10042c264", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxMzc2ZTcyMzM5OTM0OGFjMjYzMzYzMWFhYWU2YTEwMDQyYzI2NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-30T23:08:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-30T23:08:27Z"}, "message": "re PR rtl-optimization/6822 (GCC 3.1.1 - Internal compiler error in extract_insn, at recog.c:2132)\n\n        PR optimization/6822\n        * config/i386/i386.c (ix86_expand_int_movcc): Don't cast INTVAL\n        to unsigned int for op1 comparisons.  Use gen_int_mode.\n\n\t* gcc.c-torture/compile/20020530-1.c: New.\n\nCo-Authored-By: Eric Botcazou <ebotcazou@multimania.com>\n\nFrom-SVN: r54076", "tree": {"sha": "1b6519843c1b03577977280179102bcad816eed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b6519843c1b03577977280179102bcad816eed6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/261376e723399348ac2633631aaae6a10042c264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261376e723399348ac2633631aaae6a10042c264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261376e723399348ac2633631aaae6a10042c264", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261376e723399348ac2633631aaae6a10042c264/comments", "author": null, "committer": null, "parents": [{"sha": "ce60bf25b22ac87577c2e4efdc5a1bdacaa05151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce60bf25b22ac87577c2e4efdc5a1bdacaa05151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce60bf25b22ac87577c2e4efdc5a1bdacaa05151"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "b53bcf60fcc5ac5613efdfa455c51a0efff36c1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261376e723399348ac2633631aaae6a10042c264/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261376e723399348ac2633631aaae6a10042c264/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=261376e723399348ac2633631aaae6a10042c264", "patch": "@@ -1,3 +1,10 @@\n+2002-05-30  Richard Henderson  <rth@redhat.com>\n+\t    Eric Botcazou  <ebotcazou@multimania.com>\n+\n+\tPR optimization/6822\n+\t* config/i386/i386.c (ix86_expand_int_movcc): Don't cast INTVAL\n+\tto unsigned int for op1 comparisons.  Use gen_int_mode.\n+\n 2002-05-30  Eric Botcazou  <ebotcazou@multimania.com>\n \n \t* expmed.c (const_mult_add_overflow_p): New."}, {"sha": "3486046c3ddfd4e0ada569aa82528b3ddf6e4564", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261376e723399348ac2633631aaae6a10042c264/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261376e723399348ac2633631aaae6a10042c264/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=261376e723399348ac2633631aaae6a10042c264", "patch": "@@ -8677,21 +8677,21 @@ ix86_expand_int_movcc (operands)\n   if ((code == LEU || code == GTU)\n       && GET_CODE (ix86_compare_op1) == CONST_INT\n       && mode != HImode\n-      && (unsigned int) INTVAL (ix86_compare_op1) != 0xffffffff\n-      /* The operand still must be representable as sign extended value.  */\n+      && INTVAL (ix86_compare_op1) != -1\n+      /* For x86-64, the immediate field in the instruction is 32-bit\n+\t signed, so we can't increment a DImode value above 0x7fffffff.  */\n       && (!TARGET_64BIT\n \t  || GET_MODE (ix86_compare_op0) != DImode\n-\t  || (unsigned int) INTVAL (ix86_compare_op1) != 0x7fffffff)\n+\t  || INTVAL (ix86_compare_op1) != 0x7fffffff)\n       && GET_CODE (operands[2]) == CONST_INT\n       && GET_CODE (operands[3]) == CONST_INT)\n     {\n       if (code == LEU)\n \tcode = LTU;\n       else\n \tcode = GEU;\n-      ix86_compare_op1\n-\t= gen_int_mode (INTVAL (ix86_compare_op1) + 1,\n-\t\t\tGET_MODE (ix86_compare_op0));\n+      ix86_compare_op1 = gen_int_mode (INTVAL (ix86_compare_op1) + 1,\n+\t\t\t\t       GET_MODE (ix86_compare_op0));\n     }\n \n   start_sequence ();"}, {"sha": "a6794892ec77cc464913ee4346da628b97d6f086", "filename": "gcc/testsuite/gcc.c-torture/compile/20020530-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261376e723399348ac2633631aaae6a10042c264/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020530-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261376e723399348ac2633631aaae6a10042c264/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020530-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020530-1.c?ref=261376e723399348ac2633631aaae6a10042c264", "patch": "@@ -0,0 +1,16 @@\n+/* PR optimization/6822 */\n+\n+extern unsigned char foo1 (void);\n+extern unsigned short foo2 (void);\n+\n+int bar1 (void)\n+{\n+  unsigned char q = foo1 ();\n+  return (q < 0x80) ? 64 : 0;\n+}\n+\n+int bar2 (void)\n+{\n+  unsigned short h = foo2 ();\n+  return (h < 0x8000) ? 64 : 0;\n+}"}]}