{"sha": "16737e76d6ef9912996b93aa52ec9fb7c1efd2c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY3MzdlNzZkNmVmOTkxMjk5NmI5M2FhNTJlYzlmYjdjMWVmZDJjMw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-07-20T20:50:44Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-07-20T20:50:44Z"}, "message": "arm.md (thumb1_addsi3): Add alternative and split for computing the sum of the stack pointer and a...\n\n\t* config/arm/arm.md (thumb1_addsi3): Add alternative and split for\n\tcomputing the sum of the stack pointer and a large constant.\n\t* config/arm/constraints.md (M): Remove superfluous parentheses.\n\t(Pc): New constraint.\n\nFrom-SVN: r162355", "tree": {"sha": "386e52a837304488ee214aee111e2f072a757c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/386e52a837304488ee214aee111e2f072a757c71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16737e76d6ef9912996b93aa52ec9fb7c1efd2c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16737e76d6ef9912996b93aa52ec9fb7c1efd2c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16737e76d6ef9912996b93aa52ec9fb7c1efd2c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16737e76d6ef9912996b93aa52ec9fb7c1efd2c3/comments", "author": null, "committer": null, "parents": [{"sha": "0603fe683c89ccf3c1663817c44f0d320a57ba5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0603fe683c89ccf3c1663817c44f0d320a57ba5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0603fe683c89ccf3c1663817c44f0d320a57ba5e"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "b2beeea43605bcbf260da298772e137bfec28655", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16737e76d6ef9912996b93aa52ec9fb7c1efd2c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16737e76d6ef9912996b93aa52ec9fb7c1efd2c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16737e76d6ef9912996b93aa52ec9fb7c1efd2c3", "patch": "@@ -1,3 +1,10 @@\n+2010-07-20  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* config/arm/arm.md (thumb1_addsi3): Add alternative and split for\n+\tcomputing the sum of the stack pointer and a large constant.\n+\t* config/arm/constraints.md (M): Remove superfluous parentheses.\n+\t(Pc): New constraint.\n+\n 2010-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/45006"}, {"sha": "bbe65ec27ba8bd51e11c4be0e0b329d82b566596", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16737e76d6ef9912996b93aa52ec9fb7c1efd2c3/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16737e76d6ef9912996b93aa52ec9fb7c1efd2c3/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=16737e76d6ef9912996b93aa52ec9fb7c1efd2c3", "patch": "@@ -638,9 +638,9 @@\n )\n \n (define_insn_and_split \"*thumb1_addsi3\"\n-  [(set (match_operand:SI          0 \"register_operand\" \"=l,l,l,*rk,*hk,l,k,l,l\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,l,*0,*0,k,k,0,l\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"I,J,lL,*hk,*rk,M,O,Pa,Pb\")))]\n+  [(set (match_operand:SI          0 \"register_operand\" \"=l,l,l,*rk,*hk,l,k,l,l,l\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,l,*0,*0,k,k,0,l,k\")\n+\t\t (match_operand:SI 2 \"nonmemory_operand\" \"I,J,lL,*hk,*rk,M,O,Pa,Pb,Pc\")))]\n   \"TARGET_THUMB1\"\n   \"*\n    static const char * const asms[] = \n@@ -653,6 +653,7 @@\n      \\\"add\\\\t%0, %1, %2\\\",\n      \\\"add\\\\t%0, %1, %2\\\",\n      \\\"#\\\",\n+     \\\"#\\\",\n      \\\"#\\\"\n    };\n    if ((which_alternative == 2 || which_alternative == 6)\n@@ -662,21 +663,27 @@\n    return asms[which_alternative];\n   \"\n   \"&& reload_completed && CONST_INT_P (operands[2])\n-   && operands[1] != stack_pointer_rtx\n-   && (INTVAL (operands[2]) > 255 || INTVAL (operands[2]) < -255)\"\n+   && ((operands[1] != stack_pointer_rtx\n+        && (INTVAL (operands[2]) > 255 || INTVAL (operands[2]) < -255))\n+       || (operands[1] == stack_pointer_rtx\n+ \t   && INTVAL (operands[2]) > 1020))\"\n   [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 3)))]\n   {\n     HOST_WIDE_INT offset = INTVAL (operands[2]);\n-    if (offset > 255)\n-      offset = 255;\n-    else if (offset < -255)\n-      offset = -255;\n-    \n+    if (operands[1] == stack_pointer_rtx)\n+      offset -= 1020;\n+    else\n+      {\n+        if (offset > 255)\n+\t  offset = 255;\n+\telse if (offset < -255)\n+\t  offset = -255;\n+      }\n     operands[3] = GEN_INT (offset);\n     operands[2] = GEN_INT (INTVAL (operands[2]) - offset);\n   }\n-  [(set_attr \"length\" \"2,2,2,2,2,2,2,4,4\")]\n+  [(set_attr \"length\" \"2,2,2,2,2,2,2,4,4,4\")]\n )\n \n ;; Reloading and elimination of the frame pointer can"}, {"sha": "ee6b6256b3234288f4dedd1a594de84690e26cb6", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16737e76d6ef9912996b93aa52ec9fb7c1efd2c3/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16737e76d6ef9912996b93aa52ec9fb7c1efd2c3/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=16737e76d6ef9912996b93aa52ec9fb7c1efd2c3", "patch": "@@ -30,7 +30,7 @@\n \n ;; The following multi-letter normal constraints have been used:\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dn, Dl, DL, Dv, Dy, Di\n-;; in Thumb-1 state: Pa, Pb\n+;; in Thumb-1 state: Pa, Pb, Pc\n ;; in Thumb-2 state: Ps, Pt, Pu, Pv, Pw, Px\n \n ;; The following memory constraints have been used:\n@@ -122,7 +122,7 @@\n  (and (match_code \"const_int\")\n       (match_test \"TARGET_32BIT ? ((ival >= 0 && ival <= 32)\n \t\t\t\t || ((ival & (ival - 1)) == 0))\n-\t\t   : ((ival >= 0 && ival <= 1020) && ((ival & 3) == 0))\")))\n+\t\t   : ival >= 0 && ival <= 1020 && (ival & 3) == 0\")))\n \n (define_constraint \"N\"\n  \"Thumb-1 state a constant in the range 0-31.\"\n@@ -148,6 +148,12 @@\n        (match_test \"TARGET_THUMB1 && ival >= -262 && ival <= 262\n \t\t    && (ival > 255 || ival < -255)\")))\n \n+(define_constraint \"Pc\"\n+  \"@internal In Thumb-1 state a constant that is in the range 1021 to 1275\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_THUMB1\n+  \t\t    && ival > 1020 && ival <= 1275\")))\n+\n (define_constraint \"Ps\"\n   \"@internal In Thumb-2 state a constant in the range -255 to +255\"\n   (and (match_code \"const_int\")"}]}