{"sha": "31113446bc52029b3a9c0bfcd3cfdffc34acfd6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzExMTM0NDZiYzUyMDI5YjNhOWMwYmZjZDNjZmRmZmMzNGFjZmQ2ZQ==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2000-02-05T00:05:12Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-02-05T00:05:12Z"}, "message": "c4x.h (c4x_compare_op0, [...]): Move ...\n\n2000-02-05  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n\n\t* config/c4x/c4x.h (c4x_compare_op0, c4x_compare_op1): Move ...\n\t(c4x_regclass_map, c4x_caller_save_map, c4x_rpts_cycles): Ditto.\n\t(c4x_cpu_version): Ditto.\n\t* config/c4x/c4x-protos.h: ... here.\n\nFrom-SVN: r31799", "tree": {"sha": "89ddab7ff5c79ff586c558c57569762d9e17b86e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89ddab7ff5c79ff586c558c57569762d9e17b86e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31113446bc52029b3a9c0bfcd3cfdffc34acfd6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31113446bc52029b3a9c0bfcd3cfdffc34acfd6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31113446bc52029b3a9c0bfcd3cfdffc34acfd6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31113446bc52029b3a9c0bfcd3cfdffc34acfd6e/comments", "author": null, "committer": null, "parents": [{"sha": "e40a1c67653733936e2b0ffa7a8b7eb94c5c8833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e40a1c67653733936e2b0ffa7a8b7eb94c5c8833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e40a1c67653733936e2b0ffa7a8b7eb94c5c8833"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "54640acbf6597f7e4f8b46b047d0a34b9e491498", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31113446bc52029b3a9c0bfcd3cfdffc34acfd6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31113446bc52029b3a9c0bfcd3cfdffc34acfd6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31113446bc52029b3a9c0bfcd3cfdffc34acfd6e", "patch": "@@ -1,3 +1,10 @@\n+2000-02-05  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.h (c4x_compare_op0, c4x_compare_op1): Move ...\n+\t(c4x_regclass_map, c4x_caller_save_map, c4x_rpts_cycles): Ditto.\n+\t(c4x_cpu_version): Ditto.\n+\t* config/c4x/c4x-protos.h: ... here.\n+\n 2000-02-04  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* dwarf2out.c (add_abstract_origin_attribute): Don't call"}, {"sha": "3e4439b8259e1f89defb425aa048028ae12b6ca7", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31113446bc52029b3a9c0bfcd3cfdffc34acfd6e/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31113446bc52029b3a9c0bfcd3cfdffc34acfd6e/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=31113446bc52029b3a9c0bfcd3cfdffc34acfd6e", "patch": "@@ -65,6 +65,8 @@ extern struct rtx_def *c4x_gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n \n extern int c4x_check_legit_addr PARAMS ((enum machine_mode, rtx, int));\n \n+extern int c4x_hard_regno_mode_ok PARAMS ((int, enum machine_mode));\n+\n extern struct rtx_def *c4x_legitimize_address PARAMS ((rtx,\n \t\t\t\t\t\t       enum machine_mode));\n \n@@ -262,5 +264,14 @@ extern rtx floatunshiqf2_libfunc;\n extern rtx floathihf2_libfunc;\n extern rtx floatunshihf2_libfunc;\n \n+extern struct rtx_def *c4x_compare_op0;\t/* Operand 0 for comparisons.  */\n+extern struct rtx_def *c4x_compare_op1;\t/* Operand 1 for comparisons.  */\n+\n #endif /* RTX_CODE */\n \n+/* Smallest class containing REGNO.  */\n+extern enum reg_class c4x_regclass_map[];\n+extern enum machine_mode c4x_caller_save_map[];\n+\n+extern int c4x_rpts_cycles;\t        /* Max cycles for RPTS.  */\n+extern int c4x_cpu_version;\t\t/* Cpu version C30/31/32/40/44.  */"}, {"sha": "9de9735564f79880a1305f0af81b1b06b89e9f51", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31113446bc52029b3a9c0bfcd3cfdffc34acfd6e/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31113446bc52029b3a9c0bfcd3cfdffc34acfd6e/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=31113446bc52029b3a9c0bfcd3cfdffc34acfd6e", "patch": "@@ -818,7 +818,7 @@ enum reg_class\n      (IS_INDEX_REGNO(REGNO) || IS_INDEX_REGNO((unsigned)reg_renumber[REGNO]))\n \n /* If we have to generate framepointer + constant prefer an ADDR_REGS\n-   register. This avoids using EXT_REGS in addqi3_noclobber_reload.  */\n+   register.  This avoids using EXT_REGS in addqi3_noclobber_reload.  */\n \n #define PREFERRED_RELOAD_CLASS(X, CLASS)\t\t\t\\\n      (GET_CODE (X) == PLUS\t\t\t\t\t\\\n@@ -2672,16 +2672,3 @@ if (final_sequence != NULL_RTX)\t\t\\\n   {\"parallel_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n   {\"symbolic_address_operand\", {SYMBOL_REF, LABEL_REF, CONST}},\t\\\n   {\"mem_operand\", {MEM}},\t\t\t\t\t\n-\n-\n-/* Variables in c4x.c */\n-\n-/* Smallest class containing REGNO.  */\n-extern enum reg_class c4x_regclass_map[];\n-extern enum machine_mode c4x_caller_save_map[];\n-\n-extern struct rtx_def *c4x_compare_op0;\t/* Operand 0 for comparisons.  */\n-extern struct rtx_def *c4x_compare_op1;\t/* Operand 1 for comparisons.  */\n-\n-extern int c4x_rpts_cycles;\t        /* Max cycles for RPTS.  */\n-extern int c4x_cpu_version;\t\t/* Cpu version C30/31/32/40/44.  */"}]}