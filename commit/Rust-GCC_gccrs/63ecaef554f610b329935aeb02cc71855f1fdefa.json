{"sha": "63ecaef554f610b329935aeb02cc71855f1fdefa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNlY2FlZjU1NGY2MTBiMzI5OTM1YWViMDJjYzcxODU1ZjFmZGVmYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@dcc.unicamp.br", "date": "1999-08-09T00:07:21Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gcc.gnu.org", "date": "1999-08-09T00:07:21Z"}, "message": "pthread_alloc: Solaris' ctype.h defines _U to 01; use _Up as template parameter instead.\n\n* pthread_alloc: Solaris' ctype.h defines _U to 01; use _Up as\ntemplate parameter instead.\n\nFrom-SVN: r28605", "tree": {"sha": "5cb62b6f79cd584e6d9f718044625a7698137e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cb62b6f79cd584e6d9f718044625a7698137e73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63ecaef554f610b329935aeb02cc71855f1fdefa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ecaef554f610b329935aeb02cc71855f1fdefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63ecaef554f610b329935aeb02cc71855f1fdefa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ecaef554f610b329935aeb02cc71855f1fdefa/comments", "author": null, "committer": null, "parents": [{"sha": "aee941f2bbfd197b1629cd9cc1359bd103201b3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee941f2bbfd197b1629cd9cc1359bd103201b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee941f2bbfd197b1629cd9cc1359bd103201b3c"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "74b25a4afdacc250a07e135af11527d8acb47ce1", "filename": "libstdc++/stl/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ecaef554f610b329935aeb02cc71855f1fdefa/libstdc%2B%2B%2Fstl%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ecaef554f610b329935aeb02cc71855f1fdefa/libstdc%2B%2B%2Fstl%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2FChangeLog?ref=63ecaef554f610b329935aeb02cc71855f1fdefa", "patch": "@@ -1,3 +1,8 @@\n+1999-08-08  Alexandre Oliva  <oliva@dcc.unicamp.br>\n+\n+\t* pthread_alloc: Solaris' ctype.h defines _U to 01; use _Up as\n+\ttemplate parameter instead.\n+\n 1999-06-18  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* stl_queue.h: Rename _M_c to c, and _M_comp to comp."}, {"sha": "1852908095b0a26765a8564b108e0ed09811d21f", "filename": "libstdc++/stl/pthread_alloc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ecaef554f610b329935aeb02cc71855f1fdefa/libstdc%2B%2B%2Fstl%2Fpthread_alloc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ecaef554f610b329935aeb02cc71855f1fdefa/libstdc%2B%2B%2Fstl%2Fpthread_alloc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fpthread_alloc?ref=63ecaef554f610b329935aeb02cc71855f1fdefa", "patch": "@@ -376,13 +376,13 @@ public:\n   typedef const _Tp& const_reference;\n   typedef _Tp        value_type;\n \n-  template <class _U> struct rebind {\n-    typedef pthread_allocator<_U> other;\n+  template <class _Up> struct rebind {\n+    typedef pthread_allocator<_Up> other;\n   };\n \n   pthread_allocator() __STL_NOTHROW {}\n   pthread_allocator(const pthread_allocator& a) __STL_NOTHROW {}\n-  template <class _U> pthread_allocator(const pthread_allocator<_U>&)\n+  template <class _Up> pthread_allocator(const pthread_allocator<_Up>&)\n \t\t__STL_NOTHROW {}\n   ~pthread_allocator() __STL_NOTHROW {}\n \n@@ -416,8 +416,8 @@ public:\n   typedef const void* const_pointer;\n   typedef void        value_type;\n \n-  template <class _U> struct rebind {\n-    typedef pthread_allocator<_U> other;\n+  template <class _Up> struct rebind {\n+    typedef pthread_allocator<_Up> other;\n   };\n };\n \n@@ -451,16 +451,16 @@ struct _Alloc_traits<_Tp, _Pthread_alloc_template<_Max_size> >\n           allocator_type;\n };\n \n-template <class _Tp, class _U, size_t _Max>\n-struct _Alloc_traits<_Tp, __allocator<_U, _Pthread_alloc_template<_Max> > >\n+template <class _Tp, class _Up, size_t _Max>\n+struct _Alloc_traits<_Tp, __allocator<_Up, _Pthread_alloc_template<_Max> > >\n {\n   static const bool _S_instanceless = true;\n   typedef simple_alloc<_Tp, _Pthread_alloc_template<_Max> > _Alloc_type;\n   typedef __allocator<_Tp, _Pthread_alloc_template<_Max> > allocator_type;\n };\n \n-template <class _Tp, class _U>\n-struct _Alloc_traits<_Tp, pthread_allocator<_U> >\n+template <class _Tp, class _Up>\n+struct _Alloc_traits<_Tp, pthread_allocator<_Up> >\n {\n   static const bool _S_instanceless = true;\n   typedef simple_alloc<_Tp, _Pthread_alloc_template<> > _Alloc_type;"}]}