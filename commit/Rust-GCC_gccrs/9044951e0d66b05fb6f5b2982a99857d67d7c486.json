{"sha": "9044951e0d66b05fb6f5b2982a99857d67d7c486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA0NDk1MWUwZDY2YjA1ZmI2ZjViMjk4MmE5OTg1N2Q2N2Q3YzQ4Ng==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-03-15T01:26:35Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-03-15T01:26:35Z"}, "message": "re PR tree-optimization/20458 (structure aliasing causes wrong code)\n\n2005-03-14  Daniel Berlin <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/20458\n\n\t* tree-flow-inline.h (mark_call_clobbered): Don't fiddle\n\tDECL_EXTERNAL on STRUCT_FIELD tags.\n\t(clear_call_clobbered): Ditto.\n\t* tree-ssa-operands.c (note_addressable): Make sure the original\n\tvariable doesn't slip into the addressable list if we have\n\tsubvars.\n\t* tree-tailcall.c (suitable_for_tail_opt_p): Look at STRUCT_FIELD\n\ttags too.\n\nFrom-SVN: r96462", "tree": {"sha": "5152c9ec2737c779726a8e050244706fcefdc704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5152c9ec2737c779726a8e050244706fcefdc704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9044951e0d66b05fb6f5b2982a99857d67d7c486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9044951e0d66b05fb6f5b2982a99857d67d7c486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9044951e0d66b05fb6f5b2982a99857d67d7c486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9044951e0d66b05fb6f5b2982a99857d67d7c486/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50668cf626cf30043890f1000f500ce69a54fedb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50668cf626cf30043890f1000f500ce69a54fedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50668cf626cf30043890f1000f500ce69a54fedb"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "010a9ad003b871143fd5cef1049d3f10643ef15a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9044951e0d66b05fb6f5b2982a99857d67d7c486/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9044951e0d66b05fb6f5b2982a99857d67d7c486/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9044951e0d66b05fb6f5b2982a99857d67d7c486", "patch": "@@ -1,3 +1,16 @@\n+2005-03-14  Daniel Berlin <dberlin@dberlin.org>\n+\n+\tFix PR tree-optimization/20458\n+\n+\t* tree-flow-inline.h (mark_call_clobbered): Don't fiddle\n+\tDECL_EXTERNAL on STRUCT_FIELD tags.\n+\t(clear_call_clobbered): Ditto.\n+\t* tree-ssa-operands.c (note_addressable): Make sure the original\n+\tvariable doesn't slip into the addressable list if we have\n+\tsubvars.\n+\t* tree-tailcall.c (suitable_for_tail_opt_p): Look at STRUCT_FIELD\n+\ttags too.\n+\t\n 2005-03-14  Geoffrey Keating  <geoffk@apple.com>\n \n \t* doc/cppopts.texi (-fexec-charset): Add concept index entry."}, {"sha": "d4e7d1a1a86fa97eb0c83ea7bf3de10ca09e39d7", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr20458.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9044951e0d66b05fb6f5b2982a99857d67d7c486/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20458.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9044951e0d66b05fb6f5b2982a99857d67d7c486/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20458.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20458.C?ref=9044951e0d66b05fb6f5b2982a99857d67d7c486", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+/* The tail call optimization would inapproriately tail call the \n+   destructors due to not recognizing a call clobbered variable */\n+namespace std\n+{\n+\tclass locale\n+\t{\n+\t\tpublic:\n+\t\t\tlocale();\n+\t\t\t~locale();\n+\t};\n+}\n+\n+struct B\n+{\n+\tstd::locale _M_buf_locale;\n+\tvirtual ~B() {}\n+};\n+\n+struct C : public B\n+{\n+\tchar *s;\n+};\n+\n+void foo ()\n+{\n+\tC c;\n+}\n+\n+int main()\n+{\n+\tfoo ();\n+\treturn 0;\n+}\n+"}, {"sha": "2d29eb2ff13b93221be6ee75db36538bcc8f543c", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9044951e0d66b05fb6f5b2982a99857d67d7c486/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9044951e0d66b05fb6f5b2982a99857d67d7c486/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=9044951e0d66b05fb6f5b2982a99857d67d7c486", "patch": "@@ -619,7 +619,7 @@ mark_call_clobbered (tree var)\n      variable.  This is because the pointer that VAR represents has\n      been found to point to either an arbitrary location or to a known\n      location in global memory.  */\n-  if (ann->mem_tag_kind != NOT_A_TAG)\n+  if (ann->mem_tag_kind != NOT_A_TAG && ann->mem_tag_kind != STRUCT_FIELD)\n     DECL_EXTERNAL (var) = 1;\n   bitmap_set_bit (call_clobbered_vars, ann->uid);\n   ssa_call_clobbered_cache_valid = false;\n@@ -631,7 +631,7 @@ static inline void\n clear_call_clobbered (tree var)\n {\n   var_ann_t ann = var_ann (var);\n-  if (ann->mem_tag_kind != NOT_A_TAG)\n+  if (ann->mem_tag_kind != NOT_A_TAG && ann->mem_tag_kind != STRUCT_FIELD)\n     DECL_EXTERNAL (var) = 0;\n   bitmap_clear_bit (call_clobbered_vars, ann->uid);\n   ssa_call_clobbered_cache_valid = false;"}, {"sha": "a3b44e22ea3b47dcf3fb7a97d37d10908d637bd4", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9044951e0d66b05fb6f5b2982a99857d67d7c486/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9044951e0d66b05fb6f5b2982a99857d67d7c486/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=9044951e0d66b05fb6f5b2982a99857d67d7c486", "patch": "@@ -1729,14 +1729,16 @@ note_addressable (tree var, stmt_ann_t s_ann)\n       if (s_ann->addresses_taken == NULL)\n \ts_ann->addresses_taken = BITMAP_GGC_ALLOC ();      \n       \n-      bitmap_set_bit (s_ann->addresses_taken, var_ann (var)->uid);\n+\n       if (var_can_have_subvars (var)\n \t  && (svars = get_subvars_for_var (var)))\n \t{\n \t  subvar_t sv;\n \t  for (sv = svars; sv; sv = sv->next)\n \t    bitmap_set_bit (s_ann->addresses_taken, var_ann (sv->var)->uid);\n \t}\n+      else\n+\tbitmap_set_bit (s_ann->addresses_taken, var_ann (var)->uid);\n     }\n }\n "}, {"sha": "3c2036cdeac01deb93cb19adbada6fa0da4d762e", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9044951e0d66b05fb6f5b2982a99857d67d7c486/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9044951e0d66b05fb6f5b2982a99857d67d7c486/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=9044951e0d66b05fb6f5b2982a99857d67d7c486", "patch": "@@ -137,14 +137,15 @@ suitable_for_tail_opt_p (void)\n   if (current_function_stdarg)\n     return false;\n \n-  /* No local variable should be call-clobbered.  We ignore any kind\n-     of memory tag, as these are not real variables.  */\n+  /* No local variable nor structure field should be call-clobbered.  We\n+     ignore any kind of memory tag, as these are not real variables.  */\n   for (i = 0; i < (int) VARRAY_ACTIVE_SIZE (referenced_vars); i++)\n     {\n       tree var = VARRAY_TREE (referenced_vars, i);\n \n       if (!(TREE_STATIC (var) || DECL_EXTERNAL (var))\n-\t  && var_ann (var)->mem_tag_kind == NOT_A_TAG\n+\t  && (var_ann (var)->mem_tag_kind == NOT_A_TAG\n+\t      || var_ann (var)->mem_tag_kind == STRUCT_FIELD)\n \t  && is_call_clobbered (var))\n \treturn false;\n     }"}]}