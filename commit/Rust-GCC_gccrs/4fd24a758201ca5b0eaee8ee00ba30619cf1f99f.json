{"sha": "4fd24a758201ca5b0eaee8ee00ba30619cf1f99f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkMjRhNzU4MjAxY2E1YjBlYWVlOGVlMDBiYTMwNjE5Y2YxZjk5Zg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2005-03-10T15:29:15Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2005-03-10T15:29:15Z"}, "message": "FileChannelImpl.java (smallTransferFrom): New.\n\n2005-03-09  Andrew Haley  <aph@redhat.com>\n\n        * gnu/java/nio/channels/FileChannelImpl.java (smallTransferFrom):\n        New.\n        (smallTransferTo): New.\n        (transferFrom): Loop around smallTransferFrom, copying pageSize\n        bytes each time.\n        (transferTo): Likewise.\n\nFrom-SVN: r96240", "tree": {"sha": "646cdab02ba1d8f9d139076c9d00ebdb47e1d4a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/646cdab02ba1d8f9d139076c9d00ebdb47e1d4a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fd24a758201ca5b0eaee8ee00ba30619cf1f99f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd24a758201ca5b0eaee8ee00ba30619cf1f99f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd24a758201ca5b0eaee8ee00ba30619cf1f99f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd24a758201ca5b0eaee8ee00ba30619cf1f99f/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8117c488e1abb823bfedf1f5c6aa73043a0458c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8117c488e1abb823bfedf1f5c6aa73043a0458c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8117c488e1abb823bfedf1f5c6aa73043a0458c8"}], "stats": {"total": 109, "additions": 97, "deletions": 12}, "files": [{"sha": "f62317fe4549698b7f830a57239995e565697efe", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd24a758201ca5b0eaee8ee00ba30619cf1f99f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd24a758201ca5b0eaee8ee00ba30619cf1f99f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4fd24a758201ca5b0eaee8ee00ba30619cf1f99f", "patch": "@@ -1,3 +1,12 @@\n+2005-03-09  Andrew Haley  <aph@redhat.com>\n+\n+\t* gnu/java/nio/channels/FileChannelImpl.java (smallTransferFrom):\n+\tNew.\n+\t(smallTransferTo): New.\n+\t(transferFrom): Loop around smallTransferFrom, copying pageSize\n+\tbytes each time.\n+\t(transferTo): Likewise.\n+\n 2005-03-09  David Daney  <ddaney@avtrex.com>\n \n \tPR libgcj/20389"}, {"sha": "e5b02e9fdb318142311cdd2fb133461771cd1bc3", "filename": "libjava/gnu/java/nio/channels/FileChannelImpl.java", "status": "modified", "additions": 88, "deletions": 12, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd24a758201ca5b0eaee8ee00ba30619cf1f99f/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd24a758201ca5b0eaee8ee00ba30619cf1f99f/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java?ref=4fd24a758201ca5b0eaee8ee00ba30619cf1f99f", "patch": "@@ -282,7 +282,30 @@ public void force (boolean metaData) throws IOException\n       throw new ClosedChannelException ();\n   }\n \n-  public long transferTo (long position, long count, WritableByteChannel target)\n+  // like transferTo, but with a count of less than 2Gbytes\n+  private int smallTransferTo (long position, int count, \n+\t\t\t       WritableByteChannel target)\n+    throws IOException\n+  {\n+    ByteBuffer buffer;\n+    try\n+      {\n+\t// Try to use a mapped buffer if we can.  If this fails for\n+\t// any reason we'll fall back to using a ByteBuffer.\n+\tbuffer = map (MapMode.READ_ONLY, position, count);\n+      }\n+    catch (IOException e)\n+      {\n+\tbuffer = ByteBuffer.allocate (count);\n+\tread (buffer, position);\n+\tbuffer.flip();\n+      }\n+\n+    return target.write (buffer);\n+  }\n+\n+  public long transferTo (long position, long count, \n+\t\t\t  WritableByteChannel target)\n     throws IOException\n   {\n     if (position < 0\n@@ -295,14 +318,57 @@ public long transferTo (long position, long count, WritableByteChannel target)\n     if ((mode & READ) == 0)\n        throw new NonReadableChannelException ();\n    \n-    // XXX: count needs to be casted from long to int. Dataloss ?\n-    ByteBuffer buffer = ByteBuffer.allocate ((int) count);\n-    read (buffer, position);\n-    buffer.flip();\n-    return target.write (buffer);\n+    final int pageSize = 65536;\n+    long total = 0;\n+\n+    while (count > 0)\n+      {\n+\tint transferred \n+\t  = smallTransferTo (position, (int)Math.min (count, pageSize), \n+\t\t\t     target);\n+\tif (transferred < 0)\n+\t  break;\n+\ttotal += transferred;\n+\tposition += transferred;\n+\tcount -= transferred;\n+      }\n+\n+    return total;\n   }\n \n-  public long transferFrom (ReadableByteChannel src, long position, long count)\n+  // like transferFrom, but with a count of less than 2Gbytes\n+  private int smallTransferFrom (ReadableByteChannel src, long position, \n+\t\t\t\t int count)\n+    throws IOException\n+  {\n+    ByteBuffer buffer = null;\n+\n+    if (src instanceof FileChannel)\n+      {\n+\ttry\n+\t  {\n+\t    // Try to use a mapped buffer if we can.  If this fails\n+\t    // for any reason we'll fall back to using a ByteBuffer.\n+\t    buffer = ((FileChannel)src).map (MapMode.READ_ONLY, position, \n+\t\t\t\t\t     count);\n+\t  }\n+\tcatch (IOException e)\n+\t  {\n+\t  }\n+      }\n+\n+    if (buffer == null)\n+      {\n+\tbuffer = ByteBuffer.allocate ((int) count);\n+\tsrc.read (buffer);\n+\tbuffer.flip();\n+      }\n+\n+    return write (buffer, position);\n+  }\n+\n+  public long transferFrom (ReadableByteChannel src, long position, \n+\t\t\t    long count)\n     throws IOException\n   {\n     if (position < 0\n@@ -315,11 +381,21 @@ public long transferFrom (ReadableByteChannel src, long position, long count)\n     if ((mode & WRITE) == 0)\n        throw new NonWritableChannelException ();\n \n-    // XXX: count needs to be casted from long to int. Dataloss ?\n-    ByteBuffer buffer = ByteBuffer.allocate ((int) count);\n-    src.read (buffer);\n-    buffer.flip();\n-    return write (buffer, position);\n+    final int pageSize = 65536;\n+    long total = 0;\n+\n+    while (count > 0)\n+      {\n+\tint transferred = smallTransferFrom (src, position, \n+\t\t\t\t\t     (int)Math.min (count, pageSize));\n+\tif (transferred < 0)\n+\t  break;\n+\ttotal += transferred;\n+\tposition += transferred;\n+\tcount -= transferred;\n+      }\n+\n+    return total;\n   }\n \n   public FileLock tryLock (long position, long size, boolean shared)"}]}