{"sha": "0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e", "node_id": "C_kwDOANBUbNoAKDA0MzFlOGFlNWJkYjg1NGJkYTVmOTAwNWU0MWM4YzRkMDNmNmQ3NGU", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-11-15T09:50:39Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-11-15T09:50:39Z"}, "message": "aarch64: Enable the use of LDAPR for load-acquire semantics\n\nThis patch enables the use of LDAPR for load-acquire semantics.\n\n2022-11-15  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.h (AARCH64_ISA_RCPC): New Macro.\n\t(TARGET_RCPC): New Macro.\n\t* config/aarch64/atomics.md (atomic_load<mode>): Change into an expand.\n\t(aarch64_atomic_load<mode>_rcpc): New define_insn for ldapr.\n\t(aarch64_atomic_load<mode>): Rename of old define_insn for ldar.\n\t* config/aarch64/iterators.md (UNSPEC_LDAP): New unspec enum value.\n\t* doc/invoke.texi (rcpc): Ammend documentation to mention the effects\n\ton code generation.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/ldapr.c: New test.", "tree": {"sha": "b65df33fbe1c4b36a63276d5e48037ac3c25fa78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b65df33fbe1c4b36a63276d5e48037ac3c25fa78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a4129f5c5a697ad7726687d5932eef90feec53b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4129f5c5a697ad7726687d5932eef90feec53b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4129f5c5a697ad7726687d5932eef90feec53b"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "070466d9129af66b22048d109c0bc513eb593a97", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e", "patch": "@@ -222,6 +222,7 @@ enum class aarch64_feature : unsigned char {\n #define AARCH64_ISA_MOPS\t   (aarch64_isa_flags & AARCH64_FL_MOPS)\n #define AARCH64_ISA_LS64\t   (aarch64_isa_flags & AARCH64_FL_LS64)\n #define AARCH64_ISA_CSSC\t   (aarch64_isa_flags & AARCH64_FL_CSSC)\n+#define AARCH64_ISA_RCPC           (aarch64_isa_flags & AARCH64_FL_RCPC)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (AARCH64_ISA_CRYPTO)\n@@ -332,6 +333,9 @@ enum class aarch64_feature : unsigned char {\n /* SB instruction is enabled through +sb.  */\n #define TARGET_SB (AARCH64_ISA_SB)\n \n+/* RCPC loads from Armv8.3-a.  */\n+#define TARGET_RCPC (AARCH64_ISA_RCPC)\n+\n /* Apply the workaround for Cortex-A53 erratum 835769.  */\n #define TARGET_FIX_ERR_A53_835769\t\\\n   ((aarch64_fix_a53_err835769 == 2)\t\\"}, {"sha": "dc5f52ee8a4b349c0d8466a16196f83604893cbb", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e", "patch": "@@ -657,7 +657,38 @@\n   }\n )\n \n-(define_insn \"atomic_load<mode>\"\n+(define_expand \"atomic_load<mode>\"\n+  [(match_operand:ALLI 0 \"register_operand\" \"=r\")\n+   (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"Q\")\n+   (match_operand:SI   2 \"const_int_operand\")]\n+  \"\"\n+  {\n+    /* If TARGET_RCPC and this is an ACQUIRE load, then expand to a pattern\n+       using UNSPECV_LDAP.  */\n+    enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n+    if (TARGET_RCPC\n+\t&& (is_mm_acquire (model)\n+\t    || is_mm_acq_rel (model)))\n+      emit_insn (gen_aarch64_atomic_load<mode>_rcpc (operands[0], operands[1],\n+\t\t\t\t\t\t     operands[2]));\n+    else\n+      emit_insn (gen_aarch64_atomic_load<mode> (operands[0], operands[1],\n+\t\t\t\t\t\toperands[2]));\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"aarch64_atomic_load<mode>_rcpc\"\n+  [(set (match_operand:ALLI 0 \"register_operand\" \"=r\")\n+    (unspec_volatile:ALLI\n+      [(match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"Q\")\n+       (match_operand:SI 2 \"const_int_operand\")]\t\t\t;; model\n+      UNSPECV_LDAP))]\n+  \"TARGET_RCPC\"\n+  \"ldapr<atomic_sfx>\\t%<w>0, %1\"\n+)\n+\n+(define_insn \"aarch64_atomic_load<mode>\"\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=r\")\n     (unspec_volatile:ALLI\n       [(match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"Q\")"}, {"sha": "7c7fcbbc24b99b3ad8687097a432fea64af47226", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e", "patch": "@@ -988,6 +988,7 @@\n     UNSPECV_LX\t\t\t; Represent a load-exclusive.\n     UNSPECV_SX\t\t\t; Represent a store-exclusive.\n     UNSPECV_LDA\t\t\t; Represent an atomic load or load-acquire.\n+    UNSPECV_LDAP\t\t; Represent an atomic acquire load with RCpc semantics.\n     UNSPECV_STL\t\t\t; Represent an atomic store or store-release.\n     UNSPECV_ATOMIC_CMPSW\t; Represent an atomic compare swap.\n     UNSPECV_ATOMIC_EXCHG\t; Represent an atomic exchange."}, {"sha": "9d733948bdbfaf89afe4974204e7531bd16f2549", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e", "patch": "@@ -20147,9 +20147,9 @@ Enable FP16 fmla extension.  This also enables FP16 extensions and\n floating-point instructions. This option is enabled by default for @option{-march=armv8.4-a}. Use of this option with architectures prior to Armv8.2-A is not supported.\n \n @item rcpc\n-Enable the RcPc extension.  This does not change code generation from GCC,\n-but is passed on to the assembler, enabling inline asm statements to use\n-instructions from the RcPc extension.\n+Enable the RCpc extension.  This enables the use of the LDAPR instructions for\n+load-acquire atomic semantics, and passes it on to the assembler, enabling\n+inline asm statements to use instructions from the RCpc extension.\n @item dotprod\n Enable the Dot Product extension.  This also enables Advanced SIMD instructions.\n @item aes"}, {"sha": "21f6464c60e0c1239385fb3a366f9f9f84b3cadf", "filename": "gcc/testsuite/gcc.target/aarch64/ldapr.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr.c?ref=0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -std=c99\" } */\n+#include <stdatomic.h>\n+\n+#pragma GCC target \"+rcpc\"\n+atomic_ullong u64;\n+atomic_llong s64;\n+atomic_uint u32;\n+atomic_int s32;\n+atomic_ushort u16;\n+atomic_short s16;\n+atomic_uchar u8;\n+atomic_schar s8;\n+\n+#define TEST(size, rettype)\t\t\t\t\t\\\n+rettype\t\t\t\t\t\t\t\t\\\n+test_##size (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return atomic_load_explicit (&size, memory_order_acquire);\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\n+TEST(u64, unsigned long long)\n+TEST(s64, long long)\n+TEST(u32, unsigned int)\n+TEST(s32, int)\n+TEST(u16, unsigned short)\n+TEST(s16, short)\n+TEST(u8, unsigned char)\n+TEST(s8, signed char)\n+\n+/* { dg-final { scan-assembler-times \"ldapr\\tx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ldapr\\tw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ldaprh\\tw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ldaprb\\tw\" 2 } } */"}]}