{"sha": "270c5a982ccb4ef83bd9ad37d39cf47461acb55a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwYzVhOTgyY2NiNGVmODNiZDlhZDM3ZDM5Y2Y0NzQ2MWFjYjU1YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-10-14T18:55:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-10-14T19:44:29Z"}, "message": "c++: Diagnose bogus variadic lambda. [PR97358]\n\nIf the lambda has a capture pack, it cannot be used unexpanded within the\nbody of the lambda.  If you want to expand the pack across multiple lambdas,\ndon't capture the whole pack.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97358\n\t* pt.c (check_for_bare_parameter_packs): Diagnose use of\n\tcapture pack.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97358\n\t* g++.dg/cpp0x/lambda/lambda-variadic11.C: New test.", "tree": {"sha": "47903886f6b3ced46462dd0d088f76f59d1c4a9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47903886f6b3ced46462dd0d088f76f59d1c4a9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/270c5a982ccb4ef83bd9ad37d39cf47461acb55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270c5a982ccb4ef83bd9ad37d39cf47461acb55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/270c5a982ccb4ef83bd9ad37d39cf47461acb55a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270c5a982ccb4ef83bd9ad37d39cf47461acb55a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f8cba46b89ad16bac2ce58d554c25b54b0e7c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8cba46b89ad16bac2ce58d554c25b54b0e7c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8cba46b89ad16bac2ce58d554c25b54b0e7c7f"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "2a9a8fafaca59d1adfa487c55b462d050e2147fa", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/270c5a982ccb4ef83bd9ad37d39cf47461acb55a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/270c5a982ccb4ef83bd9ad37d39cf47461acb55a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=270c5a982ccb4ef83bd9ad37d39cf47461acb55a", "patch": "@@ -4230,11 +4230,6 @@ check_for_bare_parameter_packs (tree t, location_t loc /* = UNKNOWN_LOCATION */)\n   if (!processing_template_decl || !t || t == error_mark_node)\n     return false;\n \n-  /* A lambda might use a parameter pack from the containing context.  */\n-  if (current_class_type && LAMBDA_TYPE_P (current_class_type)\n-      && CLASSTYPE_TEMPLATE_INFO (current_class_type))\n-    return false;\n-\n   if (TREE_CODE (t) == TYPE_DECL)\n     t = TREE_TYPE (t);\n \n@@ -4244,6 +4239,18 @@ check_for_bare_parameter_packs (tree t, location_t loc /* = UNKNOWN_LOCATION */)\n   cp_walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n   delete ppd.visited;\n \n+  /* It's OK for a lambda to have an unexpanded parameter pack from the\n+     containing context, but do complain about unexpanded capture packs.  */\n+  if (current_class_type && LAMBDA_TYPE_P (current_class_type)\n+      && CLASSTYPE_TEMPLATE_INFO (current_class_type))\n+    for (; parameter_packs;\n+\t parameter_packs = TREE_CHAIN (parameter_packs))\n+      {\n+\ttree pack = TREE_VALUE (parameter_packs);\n+\tif (is_capture_proxy (pack))\n+\t  break;\n+      }\n+\n   if (parameter_packs)\n     {\n       if (loc == UNKNOWN_LOCATION)"}, {"sha": "aa4ffd70df750609ea0ce9ed708dfa5577ee1ef0", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-variadic11.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/270c5a982ccb4ef83bd9ad37d39cf47461acb55a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/270c5a982ccb4ef83bd9ad37d39cf47461acb55a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic11.C?ref=270c5a982ccb4ef83bd9ad37d39cf47461acb55a", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/97358\n+// { dg-do compile { target c++11 } }\n+\n+template <typename... T> void foo (T... x) {}\n+\n+template <typename... T> void bar (T... x)\n+{\n+  foo ([x...] { return x; }...); // { dg-error \"not expanded|no parameter packs\" }\n+#if __cpp_init_captures >= 201803L\n+  foo ([...y = x] { return y; }...); // { dg-error \"not expanded|no parameter packs\" \"\" { target c++20 } }\n+#endif\n+}\n+\n+void\n+test ()\n+{\n+  bar ();\n+  bar (1);\n+  bar (2.0, 3LL, 4);\n+}"}]}