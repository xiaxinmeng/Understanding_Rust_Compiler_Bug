{"sha": "252207bd03e4e0ba784aa60cdaa9f646ddcb3796", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUyMjA3YmQwM2U0ZTBiYTc4NGFhNjBjZGFhOWY2NDZkZGNiMzc5Ng==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-07-22T15:26:52Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-07-22T15:26:52Z"}, "message": "Fix r225926's iso_varying_string ICE regression\n\n\tPR fortran/61831\n\tPR fortran/66929\ngcc/fortran/\n\t* trans-array.c (gfc_get_proc_ifc_for_expr): Use esym as procedure\n\tsymbol if available.\ngcc/testsuite/\n\t* gfortran.dg/generic_30.f90: New.\n\nFrom-SVN: r226074", "tree": {"sha": "6feb089ab741f2c76774c419e18c74b1122c02aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6feb089ab741f2c76774c419e18c74b1122c02aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/252207bd03e4e0ba784aa60cdaa9f646ddcb3796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252207bd03e4e0ba784aa60cdaa9f646ddcb3796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/252207bd03e4e0ba784aa60cdaa9f646ddcb3796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252207bd03e4e0ba784aa60cdaa9f646ddcb3796/comments", "author": null, "committer": null, "parents": [{"sha": "bf976c5824620c9d581cebe75fee980d863bca15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf976c5824620c9d581cebe75fee980d863bca15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf976c5824620c9d581cebe75fee980d863bca15"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "47cfa072aaaca642f9270e1c677ad3bb5d2ae129", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252207bd03e4e0ba784aa60cdaa9f646ddcb3796/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252207bd03e4e0ba784aa60cdaa9f646ddcb3796/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=252207bd03e4e0ba784aa60cdaa9f646ddcb3796", "patch": "@@ -1,3 +1,10 @@\n+2015-07-22  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/61831\n+\tPR fortran/66929\n+\t* trans-array.c (gfc_get_proc_ifc_for_expr): Use esym as procedure\n+\tsymbol if available.\n+\n 2015-07-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/52846"}, {"sha": "c4cdbae1268c90c2ba616dd42e3d56f22c07fd4d", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252207bd03e4e0ba784aa60cdaa9f646ddcb3796/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252207bd03e4e0ba784aa60cdaa9f646ddcb3796/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=252207bd03e4e0ba784aa60cdaa9f646ddcb3796", "patch": "@@ -9166,7 +9166,11 @@ gfc_get_proc_ifc_for_expr (gfc_expr *procedure_ref)\n     return NULL;\n \n   /* Normal procedure case.  */\n-  sym = procedure_ref->symtree->n.sym;\n+  if (procedure_ref->expr_type == EXPR_FUNCTION\n+      && procedure_ref->value.function.esym)\n+    sym = procedure_ref->value.function.esym;\n+  else\n+    sym = procedure_ref->symtree->n.sym;\n \n   /* Typebound procedure case.  */\n   for (ref = procedure_ref->ref; ref; ref = ref->next)"}, {"sha": "fef069d04be75c20d450432a33436593342ed238", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252207bd03e4e0ba784aa60cdaa9f646ddcb3796/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252207bd03e4e0ba784aa60cdaa9f646ddcb3796/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=252207bd03e4e0ba784aa60cdaa9f646ddcb3796", "patch": "@@ -1,3 +1,9 @@\n+2015-07-22  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/61831\n+\tPR fortran/66929\n+\t* gfortran.dg/generic_30.f90: New.\n+\n 2015-07-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66952"}, {"sha": "5f82373cfb7187710f90c965312c35b9a630512b", "filename": "gcc/testsuite/gfortran.dg/generic_30.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252207bd03e4e0ba784aa60cdaa9f646ddcb3796/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_30.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252207bd03e4e0ba784aa60cdaa9f646ddcb3796/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_30.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_30.f90?ref=252207bd03e4e0ba784aa60cdaa9f646ddcb3796", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do compile }\n+!\n+! PR fortran/66929\n+! Generic procedures as actual argument used to lead to\n+! a NULL pointer dereference in gfc_get_proc_ifc_for_expr\n+! because the generic symbol was used as procedure symbol,\n+! instead of the specific one.\n+\n+module iso_varying_string\n+  type, public :: varying_string\n+     character(LEN=1), dimension(:), allocatable :: chars\n+  end type varying_string\n+  interface operator(/=)\n+     module procedure op_ne_VS_CH\n+  end interface operator (/=)\n+  interface trim\n+     module procedure trim_\n+  end interface\n+contains\n+  elemental function op_ne_VS_CH (string_a, string_b) result (op_ne)\n+    type(varying_string), intent(in) :: string_a\n+    character(LEN=*), intent(in)     :: string_b\n+    logical                          :: op_ne\n+    op_ne = .true.\n+  end function op_ne_VS_CH\n+  elemental function trim_ (string) result (trim_string)\n+    type(varying_string), intent(in) :: string\n+    type(varying_string)             :: trim_string\n+    trim_string = varying_string([\"t\", \"r\", \"i\", \"m\", \"m\", \"e\", \"d\"])\n+  end function trim_\n+end module iso_varying_string\n+module syntax_rules\n+  use iso_varying_string, string_t => varying_string\n+contains\n+  subroutine set_rule_type_and_key\n+    type(string_t) :: key\n+    if (trim (key) /= \"\") then\n+      print *, \"non-empty\"\n+    end if\n+  end subroutine set_rule_type_and_key\n+end module syntax_rules"}]}