{"sha": "8c427b58d167a17c88895d8cd6ed2999d493165f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM0MjdiNThkMTY3YTE3Yzg4ODk1ZDhjZDZlZDI5OTlkNDkzMTY1Zg==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2005-01-04T13:12:26Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2005-01-04T13:12:26Z"}, "message": "tree-vectorizer.c (vect_analyze_offset_expr): Test for INTEGER_CST instead of TREE_CONSTANT.\n\n2005-01-04  Ira Rosen  <irar@il.ibm.com>\n\n        * tree-vectorizer.c (vect_analyze_offset_expr): Test for\n        INTEGER_CST instead of TREE_CONSTANT.\n        (vect_gen_niters_for_prolog_loop): Test for INTEGER_CST\n        instead of TREE_CONSTANT.\n        (vect_analyze_pointer_ref_access): Test for INTEGER_CST\n        instead of TREE_CONSTANT.\n\nFrom-SVN: r92894", "tree": {"sha": "77da17b0a33df0f6373fd4529f3fdd57c831854c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77da17b0a33df0f6373fd4529f3fdd57c831854c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c427b58d167a17c88895d8cd6ed2999d493165f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c427b58d167a17c88895d8cd6ed2999d493165f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c427b58d167a17c88895d8cd6ed2999d493165f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c427b58d167a17c88895d8cd6ed2999d493165f/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8287d24ad5a12d6bc015a9c938a47c3ecb8a41f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8287d24ad5a12d6bc015a9c938a47c3ecb8a41f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8287d24ad5a12d6bc015a9c938a47c3ecb8a41f6"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "721feff1c4b455d0b830202d43ac7ef30de714b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c427b58d167a17c88895d8cd6ed2999d493165f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c427b58d167a17c88895d8cd6ed2999d493165f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c427b58d167a17c88895d8cd6ed2999d493165f", "patch": "@@ -1,3 +1,12 @@\n+2005-01-04  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* tree-vectorizer.c (vect_analyze_offset_expr): Test for\n+\tINTEGER_CST instead of TREE_CONSTANT.\n+\t(vect_gen_niters_for_prolog_loop): Test for INTEGER_CST\n+\tinstead of TREE_CONSTANT.\n+\t(vect_analyze_pointer_ref_access): Test for INTEGER_CST\n+\tinstead of TREE_CONSTANT.\n+\n 2005-01-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* tree-eh.c (replace_goto_queue): Return early if the queue is empty."}, {"sha": "fe85dddaa0b35c504a3329efb97fc6c16c0fcd42", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c427b58d167a17c88895d8cd6ed2999d493165f/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c427b58d167a17c88895d8cd6ed2999d493165f/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=8c427b58d167a17c88895d8cd6ed2999d493165f", "patch": "@@ -1428,7 +1428,7 @@ vect_analyze_offset_expr (tree expr,\n \n   /* Stop conditions:\n      1. Constant.  */\n-  if (TREE_CONSTANT (expr))\n+  if (TREE_CODE (expr) == INTEGER_CST)\n     {\n       *initial_offset = fold_convert (sizetype, expr);\n       *misalign = fold_convert (sizetype, expr);      \n@@ -1465,7 +1465,7 @@ vect_analyze_offset_expr (tree expr,\n \t/* Evolution is not constant.  */\n \treturn false;\n \n-      if (TREE_CONSTANT (init))\n+      if (TREE_CODE (init) == INTEGER_CST)\n \t*misalign = fold_convert (sizetype, init);\n       else\n \t/* Not constant, misalignment cannot be calculated.  */\n@@ -1502,7 +1502,7 @@ vect_analyze_offset_expr (tree expr,\n   switch (code)\n     {\n     case MULT_EXPR:\n-      if (!TREE_CONSTANT (right_offset))\n+      if (TREE_CODE (right_offset) != INTEGER_CST)\n \t/* RIGHT_OFFSET can be not constant. For example, for arrays of variable \n \t   sized types. \n \t   FORNOW: We don't support such cases.  */\n@@ -3336,7 +3336,7 @@ vect_gen_niters_for_prolog_loop (loop_vec_info loop_vinfo, tree loop_niters)\n   /* If the loop bound is known at compile time we already verified that it is\n      greater than vf; since the misalignment ('iters') is at most vf, there's\n      no need to generate the MIN_EXPR in this case.  */\n-  if (!TREE_CONSTANT (loop_niters))\n+  if (TREE_CODE (loop_niters) != INTEGER_CST)\n     iters = build2 (MIN_EXPR, niters_type, iters, loop_niters);\n \n   var = create_tmp_var (niters_type, \"prolog_loop_niters\");\n@@ -4618,7 +4618,7 @@ vect_analyze_pointer_ref_access (tree memref, tree stmt, bool is_read)\n \t\t\n   STRIP_NOPS (init);\n \n-  if (!TREE_CONSTANT (step))\n+  if (TREE_CODE (step) != INTEGER_CST)\n     {\n       if (vect_debug_stats (loop) || vect_debug_details (loop)) \n \tfprintf (dump_file, "}]}