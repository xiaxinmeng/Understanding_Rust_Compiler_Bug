{"sha": "d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkwNjhjNjE0MjhmODljZTFkYjRiYWU2ZjVhZGI2YWNiZDhiNWI2Yg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2000-11-13T21:22:10Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-11-13T21:22:10Z"}, "message": "c-lex.c (cb_leave_file): Harmonize conditions and order of statements to those of process_directive for...\n\n\t* c-lex.c (cb_leave_file): Harmonize conditions and order of\n\tstatements to those of process_directive for (action == act_pop).\n\n\t* collect2.c (main): Pass on -B options from COLLECT_GCC_OPTIONS.\n\n\t* local-alloc.c (equiv_init_movable_p): References to CC0 are not\n\tmovable.\n\nFrom-SVN: r37438", "tree": {"sha": "fd2583d1bff6b5fbb21a491a9da567cce4465262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd2583d1bff6b5fbb21a491a9da567cce4465262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51d61f8686efee2132bf91c5a89993c1cbf103c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d61f8686efee2132bf91c5a89993c1cbf103c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d61f8686efee2132bf91c5a89993c1cbf103c7"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "86ce5acbee9f3ef4c853e8dcfc5b165c52ce21e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b", "patch": "@@ -1,3 +1,13 @@\n+2000-11-13  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* c-lex.c (cb_leave_file): Harmonize conditions and order of\n+\tstatements to those of process_directive for (action == act_pop).\n+\n+\t* collect2.c (main): Pass on -B options from COLLECT_GCC_OPTIONS.\n+\n+\t* local-alloc.c (equiv_init_movable_p): References to CC0 are not\n+\tmovable.\n+\n 2000-11-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-parse.in (stmts_and_decls): Deprecate use of label at end of"}, {"sha": "7f1160481bf8427093adf164f6c7e2cf098a4f47", "filename": "gcc/c-lex.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b", "patch": "@@ -728,30 +728,34 @@ cb_leave_file (pfile)\n {\n   /* Bleah, need a better interface to this.  */\n   const char *flags = cpp_syshdr_flags (pfile, CPP_BUFFER (pfile));\n-#if 0\n-  if (indent_level != input_file_stack->indent_level)\n-    {\n-      warning_with_file_and_line\n-\t(input_filename, lex_lineno,\n-\t \"This file contains more '%c's than '%c's.\",\n-\t indent_level > input_file_stack->indent_level ? '{' : '}',\n-\t indent_level > input_file_stack->indent_level ? '}' : '{');\n-    }\n-#endif\n-  /* We get called for the main buffer, but we mustn't pop it.  */\n+\n   if (input_file_stack->next)\n-    pop_srcloc ();\n-  in_system_header = (flags[0] != 0);\n-#ifndef NO_IMPLICIT_EXTERN_C\n-  if (c_header_level && --c_header_level == 0)\n     {\n-      if (flags[2] != 0)\n-\twarning (\"badly nested C headers from preprocessor\");\n-      --pending_lang_change;\n-    }\n+#ifndef NO_IMPLICIT_EXTERN_C\n+      if (c_header_level && --c_header_level == 0)\n+\t{\n+\t  if (flags[2] != 0)\n+\t    warning (\"badly nested C headers from preprocessor\");\n+\t  --pending_lang_change;\n+\t}\n #endif\n+#if 0\n+      if (indent_level != input_file_stack->indent_level)\n+\t{\n+\t  warning_with_file_and_line\n+\t    (input_filename, lex_lineno,\n+\t     \"This file contains more '%c's than '%c's.\",\n+\t     indent_level > input_file_stack->indent_level ? '{' : '}',\n+\t     indent_level > input_file_stack->indent_level ? '}' : '{');\n+\t}\n+#endif\n+      /* We get called for the main buffer, but we mustn't pop it.  */\n+      pop_srcloc ();\n+      debug_end_source_file (input_file_stack->line);\n+    }\n+\n+  in_system_header = (flags[0] != 0);\n   lex_lineno = CPP_BUFFER (pfile)->lineno;\n-  debug_end_source_file (input_file_stack->line);\n \n   update_header_times (input_file_stack->name);\n   /* Hook for C++.  */"}, {"sha": "49cb0e73d7524cc10401d2b43d7ef7a4b170beac", "filename": "gcc/collect2.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b", "patch": "@@ -1096,6 +1096,15 @@ main (argc, argv)\n \t*c_ptr++ = obstack_copy0 (&permanent_obstack, q, strlen (q));\n       if (strncmp (q, \"-shared\", sizeof (\"-shared\") - 1) == 0)\n \tshared_obj = 1;\n+      if (*q == '-' && q[1] == 'B')\n+\t{\n+\t  *c_ptr++ = obstack_copy0 (&permanent_obstack, q, strlen (q));\n+\t  if (q[2] == 0)\n+\t    {\n+\t      q = extract_string (&p);\n+\t      *c_ptr++ = obstack_copy0 (&permanent_obstack, q, strlen (q));\n+\t    }\n+\t}\n     }\n   obstack_free (&temporary_obstack, temporary_firstobj);\n   *c_ptr++ = \"-fno-exceptions\";"}, {"sha": "ac2183e02f46a77df36c25569406fe99c9846411", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=d9068c61428f89ce1db4bae6f5adb6acbd8b5b6b", "patch": "@@ -589,6 +589,7 @@ equiv_init_movable_p (x, regno)\n     case SET:\n       return equiv_init_movable_p (SET_SRC (x), regno);\n \n+    case CC0:\n     case CLOBBER:\n       return 0;\n "}]}