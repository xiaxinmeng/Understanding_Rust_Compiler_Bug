{"sha": "2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYxM2YyZGUxZjJhNGRhOGRhNjAxNWIxODQ3OWE0MWQzZTY3ZWZmMg==", "commit": {"author": {"name": "Dehao Chen", "email": "dehao@google.com", "date": "2012-09-27T17:06:22Z"}, "committer": {"name": "Dehao Chen", "email": "dehao@gcc.gnu.org", "date": "2012-09-27T17:06:22Z"}, "message": "tree.h (tree_constructor): Remove IS_UNKNOWN_LOCATION.\n\n2012-09-27  Dehao Chen  <dehao@google.com>\n\n\t* tree.h (tree_constructor): Remove IS_UNKNOWN_LOCATION.\n\t(extern void protected_set_expr_location): Likewise.\n\t(function_args_iter_next): Likewise.\n\t(inlined_function_outer_scope_p): Likewise.\n\t* input.h (IS_UNKNOWN_LOCATION): Likewise.\n\t* fold-const.c (expr_location_or): Likewise.\n\t* lto-cgraph.c (output_node_opt_summary): Likewise.\n\t* dwarf2out.c (add_src_coords_attributes): Likewise.\n\t* tree-eh.c (lower_try_finally_dup_block): Likewise.\n\t* profile.c (branch_prob):\n\t* cfgexpand.c (expand_gimple_cond): Likewise.\n\t(expand_gimple_basic_block): Likewise.\n\t(construct_exit_block): Likewise.\n\t(gimple_expand_cfg): Likewise.\n\t* cfgcleanup.c (try_forward_edges): Likewise.\n\t* tree-ssa-live.c (remove_unused_scope_block_p): Likewise.\n\t(dump_scope_block): Likewise.\n\t* ipa-prop.c (ipa_write_jump_function): Likewise.\n\t* rtl.h (extern void rtl_check_failed_flag): Likewise.\n\t* gimple.h (gimple_set_location): Likewise.\n\t(gimple_has_location): Likewise.\n\t* cfgrtl.c (unique_locus_on_edge_between_p): Likewise.\n\t(force_nonfallthru_and_redirect): Likewise.\n\t(fixup_reorder_chain): Likewise.\n\t(cfg_layout_merge_blocks): Likewise.\n\nFrom-SVN: r191810", "tree": {"sha": "fa8cceb475f3f43ac9cb88a16f715c13ffc25604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa8cceb475f3f43ac9cb88a16f715c13ffc25604"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/comments", "author": {"login": "danielcdh", "id": 694263, "node_id": "MDQ6VXNlcjY5NDI2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielcdh", "html_url": "https://github.com/danielcdh", "followers_url": "https://api.github.com/users/danielcdh/followers", "following_url": "https://api.github.com/users/danielcdh/following{/other_user}", "gists_url": "https://api.github.com/users/danielcdh/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielcdh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielcdh/subscriptions", "organizations_url": "https://api.github.com/users/danielcdh/orgs", "repos_url": "https://api.github.com/users/danielcdh/repos", "events_url": "https://api.github.com/users/danielcdh/events{/privacy}", "received_events_url": "https://api.github.com/users/danielcdh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33adc2a3251455613837491b32de4fa5477da62a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33adc2a3251455613837491b32de4fa5477da62a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33adc2a3251455613837491b32de4fa5477da62a"}], "stats": {"total": 104, "additions": 66, "deletions": 38}, "files": [{"sha": "42deeba6caffd44324291290772670524947645c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -1,3 +1,31 @@\n+2012-09-27  Dehao Chen  <dehao@google.com>\n+\n+\t* tree.h (tree_constructor): Remove IS_UNKNOWN_LOCATION.\n+\t(extern void protected_set_expr_location): Likewise.\n+\t(function_args_iter_next): Likewise.\n+\t(inlined_function_outer_scope_p): Likewise.\n+\t* input.h (IS_UNKNOWN_LOCATION): Likewise.\n+\t* fold-const.c (expr_location_or): Likewise.\n+\t* lto-cgraph.c (output_node_opt_summary): Likewise.\n+\t* dwarf2out.c (add_src_coords_attributes): Likewise.\n+\t* tree-eh.c (lower_try_finally_dup_block): Likewise.\n+\t* profile.c (branch_prob):\n+\t* cfgexpand.c (expand_gimple_cond): Likewise.\n+\t(expand_gimple_basic_block): Likewise.\n+\t(construct_exit_block): Likewise.\n+\t(gimple_expand_cfg): Likewise.\n+\t* cfgcleanup.c (try_forward_edges): Likewise.\n+\t* tree-ssa-live.c (remove_unused_scope_block_p): Likewise.\n+\t(dump_scope_block): Likewise.\n+\t* ipa-prop.c (ipa_write_jump_function): Likewise.\n+\t* rtl.h (extern void rtl_check_failed_flag): Likewise.\n+\t* gimple.h (gimple_set_location): Likewise.\n+\t(gimple_has_location): Likewise.\n+\t* cfgrtl.c (unique_locus_on_edge_between_p): Likewise.\n+\t(force_nonfallthru_and_redirect): Likewise.\n+\t(fixup_reorder_chain): Likewise.\n+\t(cfg_layout_merge_blocks): Likewise.\n+\n 2012-09-27  Meador Inge  <meadori@codesourcery.com>\n \n \t* gcc-ar.c (main): Handle the returning of the sub-process error"}, {"sha": "74ea30273897c03fca60ac06f3a8b83cf2c8c7b1", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -481,15 +481,15 @@ try_forward_edges (int mode, basic_block b)\n \t\t  int new_locus = single_succ_edge (target)->goto_locus;\n \t\t  int locus = goto_locus;\n \n-\t\t  if (!IS_UNKNOWN_LOCATION (new_locus)\n-\t\t      && !IS_UNKNOWN_LOCATION (locus)\n+\t\t  if (new_locus != UNKNOWN_LOCATION\n+\t\t      && locus != UNKNOWN_LOCATION\n \t\t      && new_locus != locus)\n \t\t    new_target = NULL;\n \t\t  else\n \t\t    {\n \t\t      rtx last;\n \n-\t\t      if (!IS_UNKNOWN_LOCATION (new_locus))\n+\t\t      if (new_locus != UNKNOWN_LOCATION)\n \t\t\tlocus = new_locus;\n \n \t\t      last = BB_END (target);\n@@ -499,13 +499,13 @@ try_forward_edges (int mode, basic_block b)\n \t\t      new_locus = last && INSN_P (last)\n \t\t\t\t  ? INSN_LOCATION (last) : 0;\n \n-\t\t      if (!IS_UNKNOWN_LOCATION (new_locus)\n-\t\t\t  && !IS_UNKNOWN_LOCATION (locus)\n+\t\t      if (new_locus != UNKNOWN_LOCATION\n+\t\t\t  && locus != UNKNOWN_LOCATION\n \t\t\t  && new_locus != locus)\n \t\t\tnew_target = NULL;\n \t\t      else\n \t\t\t{\n-\t\t\t  if (!IS_UNKNOWN_LOCATION (new_locus))\n+\t\t\t  if (new_locus != UNKNOWN_LOCATION)\n \t\t\t    locus = new_locus;\n \n \t\t\t  goto_locus = locus;"}, {"sha": "299150e8ee23c6517c1596067c44cf464419b785", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -1838,7 +1838,7 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n       jumpif_1 (code, op0, op1, label_rtx_for_bb (true_edge->dest),\n \t\ttrue_edge->probability);\n       maybe_dump_rtl_for_gimple_stmt (stmt, last);\n-      if (!IS_UNKNOWN_LOCATION (true_edge->goto_locus))\n+      if (true_edge->goto_locus != UNKNOWN_LOCATION)\n \tset_curr_insn_location (true_edge->goto_locus);\n       false_edge->flags |= EDGE_FALLTHRU;\n       maybe_cleanup_end_of_block (false_edge, last);\n@@ -1849,7 +1849,7 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n       jumpifnot_1 (code, op0, op1, label_rtx_for_bb (false_edge->dest),\n \t\t   false_edge->probability);\n       maybe_dump_rtl_for_gimple_stmt (stmt, last);\n-      if (!IS_UNKNOWN_LOCATION (false_edge->goto_locus))\n+      if (false_edge->goto_locus != UNKNOWN_LOCATION)\n \tset_curr_insn_location (false_edge->goto_locus);\n       true_edge->flags |= EDGE_FALLTHRU;\n       maybe_cleanup_end_of_block (true_edge, last);\n@@ -1859,7 +1859,7 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n   jumpif_1 (code, op0, op1, label_rtx_for_bb (true_edge->dest),\n \t    true_edge->probability);\n   last = get_last_insn ();\n-  if (!IS_UNKNOWN_LOCATION (false_edge->goto_locus))\n+  if (false_edge->goto_locus != UNKNOWN_LOCATION)\n     set_curr_insn_location (false_edge->goto_locus);\n   emit_jump (label_rtx_for_bb (false_edge->dest));\n \n@@ -1885,7 +1885,7 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n \n   maybe_dump_rtl_for_gimple_stmt (stmt, last2);\n \n-  if (!IS_UNKNOWN_LOCATION (true_edge->goto_locus))\n+  if (true_edge->goto_locus != UNKNOWN_LOCATION)\n     {\n       set_curr_insn_location (true_edge->goto_locus);\n       true_edge->goto_locus = curr_insn_location ();\n@@ -3973,7 +3973,7 @@ expand_gimple_basic_block (basic_block bb)\n   /* Expand implicit goto and convert goto_locus.  */\n   FOR_EACH_EDGE (e, ei, bb->succs)\n     {\n-      if (!IS_UNKNOWN_LOCATION (e->goto_locus))\n+      if (e->goto_locus != UNKNOWN_LOCATION)\n \tset_curr_insn_location (e->goto_locus);\n       if ((e->flags & EDGE_FALLTHRU) && e->dest != bb->next_bb)\n \t{\n@@ -4094,7 +4094,7 @@ construct_exit_block (void)\n \n   /* Make sure the locus is set to the end of the function, so that\n      epilogue line numbers and warnings are set properly.  */\n-  if (!IS_UNKNOWN_LOCATION (cfun->function_end_locus))\n+  if (LOCATION_LOCUS (cfun->function_end_locus) != UNKNOWN_LOCATION)\n     input_location = cfun->function_end_locus;\n \n   /* Generate rtl for function exit.  */\n@@ -4318,7 +4318,7 @@ gimple_expand_cfg (void)\n   if (!DECL_IS_BUILTIN (current_function_decl))\n     {\n       /* Eventually, all FEs should explicitly set function_start_locus.  */\n-      if (IS_UNKNOWN_LOCATION (cfun->function_start_locus))\n+      if (LOCATION_LOCUS (cfun->function_start_locus) == UNKNOWN_LOCATION)\n        set_curr_insn_location\n          (DECL_SOURCE_LOCATION (current_function_decl));\n       else"}, {"sha": "ad18400a064769097edcf847a47d3bbb7c9ce885", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -723,7 +723,7 @@ unique_locus_on_edge_between_p (basic_block a, basic_block b)\n   const location_t goto_locus = EDGE_SUCC (a, 0)->goto_locus;\n   rtx insn, end;\n \n-  if (IS_UNKNOWN_LOCATION (goto_locus))\n+  if (LOCATION_LOCUS (goto_locus) == UNKNOWN_LOCATION)\n     return false;\n \n   /* First scan block A backward.  */\n@@ -1477,10 +1477,7 @@ force_nonfallthru_and_redirect (edge e, basic_block target, rtx jump_label)\n   else\n     jump_block = e->src;\n \n-  if (!IS_UNKNOWN_LOCATION (e->goto_locus))\n-    loc = e->goto_locus;\n-  else\n-    loc = 0;\n+  loc = e->goto_locus;\n   e->flags &= ~EDGE_FALLTHRU;\n   if (target == EXIT_BLOCK_PTR)\n     {\n@@ -3335,7 +3332,7 @@ fixup_reorder_chain (void)\n         edge_iterator ei;\n \n         FOR_EACH_EDGE (e, ei, bb->succs)\n-\t  if (!IS_UNKNOWN_LOCATION (e->goto_locus)\n+\t  if (LOCATION_LOCUS (e->goto_locus) != UNKNOWN_LOCATION\n \t      && !(e->flags & EDGE_ABNORMAL))\n \t    {\n \t      edge e2;\n@@ -3385,7 +3382,7 @@ fixup_reorder_chain (void)\n \t\t well, this can prevent other such blocks from being created\n \t\t in subsequent iterations of the loop.  */\n \t      for (ei2 = ei_start (dest->preds); (e2 = ei_safe_edge (ei2)); )\n-\t\tif (!IS_UNKNOWN_LOCATION (e2->goto_locus)\n+\t\tif (LOCATION_LOCUS (e2->goto_locus) != UNKNOWN_LOCATION\n \t\t    && !(e2->flags & (EDGE_ABNORMAL | EDGE_FALLTHRU))\n \t\t    && e->goto_locus == e2->goto_locus)\n \t\t  redirect_edge_and_branch (e2, nb);\n@@ -4087,7 +4084,8 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n     }\n \n   /* If B was a forwarder block, propagate the locus on the edge.  */\n-  if (forwarder_p && IS_UNKNOWN_LOCATION (EDGE_SUCC (b, 0)->goto_locus))\n+  if (forwarder_p\n+      && LOCATION_LOCUS (EDGE_SUCC (b, 0)->goto_locus) != UNKNOWN_LOCATION)\n     EDGE_SUCC (b, 0)->goto_locus = EDGE_SUCC (a, 0)->goto_locus;\n \n   if (dump_file)"}, {"sha": "c776f682b85224c275c63bbea84f1ec169c6ed2d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -15552,7 +15552,7 @@ add_src_coords_attributes (dw_die_ref die, tree decl)\n {\n   expanded_location s;\n \n-  if (IS_UNKNOWN_LOCATION (DECL_SOURCE_LOCATION (decl)))\n+  if (LOCATION_LOCUS (DECL_SOURCE_LOCATION (decl)) == UNKNOWN_LOCATION)\n     return;\n   s = expand_location (DECL_SOURCE_LOCATION (decl));\n   add_AT_file (die, DW_AT_decl_file, lookup_filename (s.file));"}, {"sha": "ce522357ee29b0ae104e549cff45a5993f2b688d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -145,7 +145,7 @@ static location_t\n expr_location_or (tree t, location_t loc)\n {\n   location_t tloc = EXPR_LOCATION (t);\n-  return IS_UNKNOWN_LOCATION (tloc) ? loc : tloc;\n+  return tloc == UNKNOWN_LOCATION ? loc : tloc;\n }\n \n /* Similar to protected_set_expr_location, but never modify x in place,"}, {"sha": "c4cdb1a309ae99ed5baed8fd435817e485ffb005", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -1240,7 +1240,7 @@ gimple_set_location (gimple g, location_t location)\n static inline bool\n gimple_has_location (const_gimple g)\n {\n-  return !IS_UNKNOWN_LOCATION (gimple_location (g));\n+  return LOCATION_LOCUS (gimple_location (g)) != UNKNOWN_LOCATION;\n }\n \n "}, {"sha": "412195a58b166574b978cad99133c3dc804fff93", "filename": "gcc/input.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -56,9 +56,6 @@ extern location_t input_location;\n #define LOCATION_BLOCK(LOC) \\\n   ((tree) ((IS_ADHOC_LOC (LOC)) ? get_data_from_adhoc_loc (line_table, (LOC)) \\\n   : NULL))\n-#define IS_UNKNOWN_LOCATION(LOC) \\\n-  ((IS_ADHOC_LOC (LOC)) ? get_location_from_adhoc_loc (line_table, LOC) == 0 \\\n-  : (LOC) == 0)\n \n #define input_line LOCATION_LINE (input_location)\n #define input_filename LOCATION_FILE (input_location)"}, {"sha": "fb2346bdc45214fbcb90f9c04a40720ed9b2054f", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -3165,7 +3165,7 @@ ipa_write_jump_function (struct output_block *ob,\n       break;\n     case IPA_JF_CONST:\n       gcc_assert (\n-\t  IS_UNKNOWN_LOCATION (EXPR_LOCATION (jump_func->value.constant)));\n+\t  EXPR_LOCATION (jump_func->value.constant) == UNKNOWN_LOCATION);\n       stream_write_tree (ob, jump_func->value.constant, true);\n       break;\n     case IPA_JF_PASS_THROUGH:"}, {"sha": "f96ed3d36d3a56c01a95096d523ffa1d68706512", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -1412,7 +1412,7 @@ output_node_opt_summary (struct output_block *ob,\n          mechanism to store function local declarations into summaries.  */\n       gcc_assert (parm);\n       streamer_write_uhwi (ob, parm_num);\n-      gcc_assert (IS_UNKNOWN_LOCATION (EXPR_LOCATION (map->new_tree)));\n+      gcc_assert (EXPR_LOCATION (map->new_tree) == UNKNOWN_LOCATION);\n       stream_write_tree (ob, map->new_tree, true);\n       bp = bitpack_create (ob->main_stream);\n       bp_pack_value (&bp, map->replace_p, 1);"}, {"sha": "6d4a8d8beafdcb64204a1e32acdbee5ebc608fee", "filename": "gcc/profile.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -1123,7 +1123,7 @@ branch_prob (void)\n \t     is not computed twice.  */\n \t  if (last\n \t      && gimple_has_location (last)\n-\t      && !IS_UNKNOWN_LOCATION (e->goto_locus)\n+\t      && LOCATION_LOCUS (e->goto_locus) != UNKNOWN_LOCATION\n \t      && !single_succ_p (bb)\n \t      && (LOCATION_FILE (e->goto_locus)\n \t          != LOCATION_FILE (gimple_location (last))\n@@ -1344,7 +1344,8 @@ branch_prob (void)\n \n \t  /* Notice GOTO expressions eliminated while constructing the CFG.  */\n \t  if (single_succ_p (bb)\n-\t      && !IS_UNKNOWN_LOCATION (single_succ_edge (bb)->goto_locus))\n+\t      && LOCATION_LOCUS (single_succ_edge (bb)->goto_locus)\n+\t\t != UNKNOWN_LOCATION)\n \t    {\n \t      expanded_location curr_location\n \t\t= expand_location (single_succ_edge (bb)->goto_locus);"}, {"sha": "cd5d4352b86e8ff159cad7bcd313683dc53cdfa0", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -829,7 +829,8 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n \n #define INSN_LOCATION(INSN) XUINT (INSN, 5)\n \n-#define INSN_HAS_LOCATION(INSN) (!IS_UNKNOWN_LOCATION (INSN_LOCATION (INSN)))\n+#define INSN_HAS_LOCATION(INSN) ((LOCATION_LOCUS (INSN_LOCATION (INSN)))\\\n+  != UNKNOWN_LOCATION)\n \n /* LOCATION of an RTX if relevant.  */\n #define RTL_LOCATION(X) (INSN_P (X) ? \\"}, {"sha": "94ed459f6f16f799a176863ab89bf6ec94c9ce83", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -885,7 +885,7 @@ lower_try_finally_dup_block (gimple_seq seq, struct leh_state *outer_state,\n   for (gsi = gsi_start (new_seq); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       gimple stmt = gsi_stmt (gsi);\n-      if (IS_UNKNOWN_LOCATION (gimple_location (stmt)))\n+      if (LOCATION_LOCUS (gimple_location (stmt)) == UNKNOWN_LOCATION)\n \t{\n \t  tree block = gimple_block (stmt);\n \t  gimple_set_location (stmt, loc);"}, {"sha": "7bf89d19fdb309e869b1105bb455a6789d41d993", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -597,7 +597,8 @@ remove_unused_scope_block_p (tree scope)\n    else\n    /* Verfify that only blocks with source location set\n       are entry points to the inlined functions.  */\n-     gcc_assert (IS_UNKNOWN_LOCATION (BLOCK_SOURCE_LOCATION (scope)));\n+     gcc_assert (LOCATION_LOCUS (BLOCK_SOURCE_LOCATION (scope))\n+\t\t == UNKNOWN_LOCATION);\n \n    TREE_USED (scope) = !unused;\n    return unused;\n@@ -671,7 +672,7 @@ dump_scope_block (FILE *file, int indent, tree scope, int flags)\n   fprintf (file, \"\\n%*s{ Scope block #%i%s%s\",indent, \"\" , BLOCK_NUMBER (scope),\n   \t   TREE_USED (scope) ? \"\" : \" (unused)\",\n \t   BLOCK_ABSTRACT (scope) ? \" (abstract)\": \"\");\n-  if (!IS_UNKNOWN_LOCATION (BLOCK_SOURCE_LOCATION (scope)))\n+  if (LOCATION_LOCUS (BLOCK_SOURCE_LOCATION (scope)) != UNKNOWN_LOCATION)\n     {\n       expanded_location s = expand_location (BLOCK_SOURCE_LOCATION (scope));\n       fprintf (file, \" %s:%i\", s.file, s.line);"}, {"sha": "2050efd71e1df812e0dba37582d46af4f6d88b24", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f13f2de1f2a4da8da6015b18479a41d3e67eff2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2f13f2de1f2a4da8da6015b18479a41d3e67eff2", "patch": "@@ -1612,7 +1612,8 @@ struct GTY(()) tree_constructor {\n #define EXPR_LOCATION(NODE) \\\n   (CAN_HAVE_LOCATION_P ((NODE)) ? (NODE)->exp.locus : UNKNOWN_LOCATION)\n #define SET_EXPR_LOCATION(NODE, LOCUS) EXPR_CHECK ((NODE))->exp.locus = (LOCUS)\n-#define EXPR_HAS_LOCATION(NODE) (!IS_UNKNOWN_LOCATION (EXPR_LOCATION (NODE)))\n+#define EXPR_HAS_LOCATION(NODE) (LOCATION_LOCUS (EXPR_LOCATION (NODE))\t\\\n+  != UNKNOWN_LOCATION)\n /* The location to be used in a diagnostic about this expression.  Do not\n    use this macro if the location will be assigned to other expressions.  */\n #define EXPR_LOC_OR_HERE(NODE) (EXPR_HAS_LOCATION (NODE) ? (NODE)->exp.locus : input_location)\n@@ -1791,7 +1792,8 @@ extern void protected_set_expr_location (tree, location_t);\n \t\t\t\t\t      OMP_CLAUSE_PRIVATE,\t\\\n \t                                      OMP_CLAUSE_COPYPRIVATE), 0)\n #define OMP_CLAUSE_HAS_LOCATION(NODE) \\\n-  (!IS_UNKNOWN_LOCATION ((OMP_CLAUSE_CHECK (NODE))->omp_clause.locus))\n+  (LOCATION_LOCUS ((OMP_CLAUSE_CHECK (NODE))->omp_clause.locus)\t\t\\\n+  != UNKNOWN_LOCATION)\n #define OMP_CLAUSE_LOCATION(NODE)  (OMP_CLAUSE_CHECK (NODE))->omp_clause.locus\n \n /* True on an OMP_SECTION statement that was the last lexical member.\n@@ -5535,7 +5537,7 @@ function_args_iter_next (function_args_iterator *i)\n static inline bool\n inlined_function_outer_scope_p (const_tree block)\n {\n- return !IS_UNKNOWN_LOCATION (BLOCK_SOURCE_LOCATION (block));\n+ return LOCATION_LOCUS (BLOCK_SOURCE_LOCATION (block)) != UNKNOWN_LOCATION;\n }\n \n /* Loop over all function arguments of FNTYPE.  In each iteration, PTR is set"}]}