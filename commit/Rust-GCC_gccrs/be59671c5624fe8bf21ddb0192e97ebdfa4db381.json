{"sha": "be59671c5624fe8bf21ddb0192e97ebdfa4db381", "node_id": "C_kwDOANBUbNoAKGJlNTk2NzFjNTYyNGZlOGJmMjFkZGIwMTkyZTk3ZWJkZmE0ZGIzODE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-05T14:13:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-10T10:29:43Z"}, "message": "middle-end/101530 - fix shufflevector lowering\n\nThis makes __builtin_shufflevector lowering force the result\nof the BIT_FIELD_REF lowpart operation to a temporary as to\nfulfil the IL verifier constraint that BIT_FIELD_REFs should\nbe always in outermost handled component position.  Trying to\nenforce this during gimplification isn't as straight-forward\nas here where we know we're dealing with an rvalue.\n\nFAIL: c-c++-common/torture/builtin-shufflevector-1.c   -O0  execution test\n\n2022-01-05  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/101530\ngcc/c-family/\n\t* c-common.c (c_build_shufflevector): Wrap the BIT_FIELD_REF\n\tin a TARGET_EXPR to force a temporary.\n\ngcc/testsuite/\n\t* c-c++-common/builtin-shufflevector-3.c: New testcase.", "tree": {"sha": "c7d5dc368bf7380f136fe20d687cb0a541f6f782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7d5dc368bf7380f136fe20d687cb0a541f6f782"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be59671c5624fe8bf21ddb0192e97ebdfa4db381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be59671c5624fe8bf21ddb0192e97ebdfa4db381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be59671c5624fe8bf21ddb0192e97ebdfa4db381", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be59671c5624fe8bf21ddb0192e97ebdfa4db381/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92e114d66e93d60dcef97c66cddbae38b657d768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e114d66e93d60dcef97c66cddbae38b657d768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e114d66e93d60dcef97c66cddbae38b657d768"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "4a6a4edb763ac3305c7e6e1c9778164cd178fc71", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59671c5624fe8bf21ddb0192e97ebdfa4db381/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59671c5624fe8bf21ddb0192e97ebdfa4db381/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=be59671c5624fe8bf21ddb0192e97ebdfa4db381", "patch": "@@ -1243,6 +1243,13 @@ c_build_shufflevector (location_t loc, tree v0, tree v1,\n       tree lpartt = build_vector_type (TREE_TYPE (ret_type), mask.length ());\n       ret = build3_loc (loc, BIT_FIELD_REF,\n \t\t\tlpartt, ret, TYPE_SIZE (lpartt), bitsize_zero_node);\n+      /* Wrap the lowpart operation in a TARGET_EXPR so it gets a separate\n+\t temporary during gimplification.  See PR101530 for cases where\n+\t we'd otherwise end up with non-toplevel BIT_FIELD_REFs.  */\n+      tree tem = create_tmp_var_raw (lpartt);\n+      DECL_CONTEXT (tem) = current_function_decl;\n+      ret = build4 (TARGET_EXPR, lpartt, tem, ret, NULL_TREE, NULL_TREE);\n+      TREE_SIDE_EFFECTS (ret) = 1;\n     }\n \n   if (!c_dialect_cxx () && !wrap)"}, {"sha": "0c9bda689ef7909c5868c13a2d8cdd4156038650", "filename": "gcc/testsuite/c-c++-common/builtin-shufflevector-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59671c5624fe8bf21ddb0192e97ebdfa4db381/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-shufflevector-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59671c5624fe8bf21ddb0192e97ebdfa4db381/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-shufflevector-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-shufflevector-3.c?ref=be59671c5624fe8bf21ddb0192e97ebdfa4db381", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+typedef int __attribute__((__vector_size__ (sizeof(int)*4))) V;\n+\n+int\n+foo(V v, int i)\n+{\n+  return __builtin_shufflevector (v, v, 2, 3)[i];\n+}\n+\n+int\n+bar(V v, int i)\n+{\n+  return __builtin_shufflevector(v, v, 4)[0] & i;\n+}"}]}