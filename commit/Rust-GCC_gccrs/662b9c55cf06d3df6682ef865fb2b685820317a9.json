{"sha": "662b9c55cf06d3df6682ef865fb2b685820317a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYyYjljNTVjZjA2ZDNkZjY2ODJlZjg2NWZiMmI2ODU4MjAzMTdhOQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-11-27T13:58:10Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-12-24T10:08:42Z"}, "message": "C++ : Add the -stdlib= option.\n\nThis option allows the user to specifiy alternate C++ runtime libraries,\nfor example when a platform uses libc++ as the installed C++ runtime.\n\nWe introduce the command line option: -stdlib= which is the user-facing\nmechanism to select the C++ runtime to be used when compiling and linking\ncode.  This is the same option spelling as that used by clang to allow the\nuse of libstdc++.\n\nThe availability (and thus function) of the option are a configure-time\nchoice using the configuration control:\n--with-gxx-libcxx-include-dir=\n\nSpecification of the path for the libc++ headers, enables the -stdlib=\noption (using the path as given), default values are set when the path\nis unconfigured.\n\nIf --with-gxx-libcxx-include-dir is given together with --with-sysroot=,\nthen we test to see if the include path starts with the sysroot and, if so,\nrecord the sysroot-relative component as the local path.  At runtime, we\nprepend the sysroot that is actually active.\n\nAt link time, we use the C++ runtime in force and (if that is libc++) also\nappend the libc++abi ABI library. As for other cases, if a target sets the\nname pointer for the ABI library to NULL the G++ driver will omit it from\nthe link line.\n\ngcc/ChangeLog:\n\n\t* configure.ac: Add gxx-libcxx-include-dir handled\n\tin the same way as the regular cxx header directory.\n\t* Makefile.in: Regenerated.\n\t* config.in: Likewise.\n\t* configure: Likewise.\n\t* cppdefault.c: Pick up libc++ headers if the option\n\tis enabled.\n\t* cppdefault.h (struct default_include): Amend comments\n\tto reflect the extended use of the cplusplus field.\n\t* incpath.c (add_standard_paths): Allow for multiple\n\tc++ header include path variants.\n\t* doc/invoke.texi: Document the -stdlib= option.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt: Add -stdlib= option and enumerations for\n\tlibstdc++ and libc++.\n\ngcc/cp/ChangeLog:\n\n\t* g++spec.c (LIBCXX, LIBCXX_PROFILE, LIBCXX_STATIC): New.\n\t(LIBCXXABI, LIBCXXABI_PROFILE, LIBCXXABI_STATIC): New.\n\t(enum stdcxxlib_kind): New.\n\t(lang_specific_driver): Allow selection amongst multiple\n\tc++ runtime libraries.", "tree": {"sha": "77c57d2f62a8f79a80dba61e66ebc6076b54f13b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77c57d2f62a8f79a80dba61e66ebc6076b54f13b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/662b9c55cf06d3df6682ef865fb2b685820317a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/662b9c55cf06d3df6682ef865fb2b685820317a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/662b9c55cf06d3df6682ef865fb2b685820317a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/662b9c55cf06d3df6682ef865fb2b685820317a9/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "168be2b3afddd41d4575ed55439231812bc3e7c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/168be2b3afddd41d4575ed55439231812bc3e7c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/168be2b3afddd41d4575ed55439231812bc3e7c9"}], "stats": {"total": 229, "additions": 216, "deletions": 13}, "files": [{"sha": "6847022f1082e7fab4b4610a24b221b2a5476dbc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=662b9c55cf06d3df6682ef865fb2b685820317a9", "patch": "@@ -679,6 +679,9 @@ build_tooldir = $(exec_prefix)/$(target_noncanonical)\n # Directory in which the compiler finds target-independent g++ includes.\n gcc_gxx_include_dir = @gcc_gxx_include_dir@\n gcc_gxx_include_dir_add_sysroot = @gcc_gxx_include_dir_add_sysroot@\n+# Directory in which the compiler finds libc++ includes.\n+gcc_gxx_libcxx_include_dir = @gcc_gxx_libcxx_include_dir@\n+gcc_gxx_libcxx_include_dir_add_sysroot = @gcc_gxx_libcxx_include_dir_add_sysroot@\n # Directory to search for site-specific includes.\n local_includedir = $(local_prefix)/include\n includedir = $(prefix)/include\n@@ -1185,6 +1188,7 @@ FLAGS_TO_PASS = \\\n \t\"prefix=$(prefix)\" \\\n \t\"local_prefix=$(local_prefix)\" \\\n \t\"gxx_include_dir=$(gcc_gxx_include_dir)\" \\\n+\t\"gxx_libcxx_include_dir=$(gcc_gxx_libcxx_include_dir)\" \\\n \t\"build_tooldir=$(build_tooldir)\" \\\n \t\"gcc_tooldir=$(gcc_tooldir)\" \\\n \t\"bindir=$(bindir)\" \\\n@@ -3004,6 +3008,8 @@ PREPROCESSOR_DEFINES = \\\n   -DGPLUSPLUS_INCLUDE_DIR_ADD_SYSROOT=$(gcc_gxx_include_dir_add_sysroot) \\\n   -DGPLUSPLUS_TOOL_INCLUDE_DIR=\\\"$(gcc_gxx_include_dir)/$(target_noncanonical)\\\" \\\n   -DGPLUSPLUS_BACKWARD_INCLUDE_DIR=\\\"$(gcc_gxx_include_dir)/backward\\\" \\\n+  -DGPLUSPLUS_LIBCXX_INCLUDE_DIR=\\\"$(gcc_gxx_libcxx_include_dir)\\\" \\\n+  -DGPLUSPLUS_LIBCXX_INCLUDE_DIR_ADD_SYSROOT=$(gcc_gxx_libcxx_include_dir_add_sysroot) \\\n   -DLOCAL_INCLUDE_DIR=\\\"$(local_includedir)\\\" \\\n   -DCROSS_INCLUDE_DIR=\\\"$(CROSS_SYSTEM_HEADER_DIR)\\\" \\\n   -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\" \\"}, {"sha": "e0c322f61aebd5cabe0b463935575c579693893d", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=662b9c55cf06d3df6682ef865fb2b685820317a9", "patch": "@@ -2356,6 +2356,20 @@ std=iso9899:2018\n C ObjC Alias(std=c17)\n Conform to the ISO 2017 C standard (published in 2018).\n \n+stdlib=\n+Driver C++ ObjC++ Common Condition(ENABLE_STDLIB_OPTION) Var(flag_stdlib_kind) Joined Enum(stdlib_kind) RejectNegative Init(1)\n+-stdlib=[libstdc++|libc++]\tThe standard library to be used for C++ headers\n+and runtime.\n+\n+Enum\n+Name(stdlib_kind) Type(int)\n+\n+EnumValue\n+Enum(stdlib_kind) String(libstdc++) Value(1)\n+\n+EnumValue\n+Enum(stdlib_kind) String(libc++) Value(2)\n+\n traditional\n Driver\n "}, {"sha": "10a13cde5860b971ea73ce5f8044672409c3f1bd", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=662b9c55cf06d3df6682ef865fb2b685820317a9", "patch": "@@ -240,6 +240,12 @@\n    standards-compatible mode on s390 targets. */\n #undef ENABLE_S390_EXCESS_FLOAT_PRECISION\n \n+/* Define if the -stdlib= option should be enabled. */\n+#ifndef USED_FOR_TARGET\n+#undef ENABLE_STDLIB_OPTION\n+#endif\n+\n+\n /* Define if you want all operations on trees (the basic data structure of the\n    front ends) to be checked for dynamic type safety at runtime. This is\n    moderately expensive. */"}, {"sha": "ee9760354b696d9fd1b4d1b12057e35cfbe3b1a5", "filename": "gcc/configure", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=662b9c55cf06d3df6682ef865fb2b685820317a9", "patch": "@@ -675,6 +675,8 @@ host_xm_defines\n host_xm_include_list\n host_xm_file_list\n host_exeext\n+gcc_gxx_libcxx_include_dir_add_sysroot\n+gcc_gxx_libcxx_include_dir\n gcc_gxx_include_dir_add_sysroot\n gcc_gxx_include_dir\n gcc_config_arguments\n@@ -937,6 +939,7 @@ with_native_system_header_dir\n with_build_sysroot\n with_sysroot\n with_gxx_include_dir\n+with_gxx_libcxx_include_dir\n with_cpp_install_dir\n enable_generated_files_in_srcdir\n with_gnu_ld\n@@ -1801,6 +1804,8 @@ Optional Packages:\n   --with-sysroot[=DIR]    search for usr/lib, usr/include, et al, within DIR\n   --with-gxx-include-dir=DIR\n                           specifies directory to put g++ header files\n+  --with-gxx-libcxx-include-dir=DIR\n+                          specifies directory to find libc++ header files\n   --with-cpp-install-dir=DIR\n                           install the user visible C preprocessor in DIR\n                           (relative to PREFIX) as well as PREFIX/bin\n@@ -3731,6 +3736,52 @@ elif test \"${with_sysroot+set}\" = set; then\n   fi\n fi\n \n+# Configuration for an alternate set of C++ headers.\n+gcc_gxx_libcxx_include_dir=\n+# Specify the alternate g++ header file directory\n+\n+# Check whether --with-gxx-libcxx-include-dir was given.\n+if test \"${with_gxx_libcxx_include_dir+set}\" = set; then :\n+  withval=$with_gxx_libcxx_include_dir; case \"${withval}\" in\n+yes)\tas_fn_error $? \"bad value ${withval} given for libc++ include directory\" \"$LINENO\" 5 ;;\n+no)\t;;\n+*)\tgcc_gxx_libcxx_include_dir=$with_gxx_libcxx_include_dir ;;\n+esac\n+fi\n+\n+\n+# If both --with-sysroot and --with-gxx-libcxx-include-dir are passed, we\n+# check to see if the latter starts with the former and, upon success, compute\n+# gcc_gxx_libcxx_include_dir as relative to the sysroot.\n+gcc_gxx_libcxx_include_dir_add_sysroot=0\n+\n+if test x${gcc_gxx_libcxx_include_dir} != x; then\n+\n+$as_echo \"#define ENABLE_STDLIB_OPTION 1\" >>confdefs.h\n+\n+else\n+  $as_echo \"#define ENABLE_STDLIB_OPTION 0\" >>confdefs.h\n+\n+fi\n+# ??? This logic must match libstdc++-v3/acinclude.m4:GLIBCXX_EXPORT_INSTALL_INFO.\n+if test x${gcc_gxx_libcxx_include_dir} = x; then\n+  if test x${enable_version_specific_runtime_libs} = xyes; then\n+    gcc_gxx_libcxx_include_dir='${libsubdir}/libc++_include/c++/v1'\n+  else\n+    libcxx_incdir='libc++_include/c++/$(version)/v1'\n+    if test x$host != x$target; then\n+       libcxx_incdir=\"$target_alias/$libcxx_incdir\"\n+    fi\n+    gcc_gxx_libcxx_include_dir=\"\\$(libsubdir)/\\$(libsubdir_to_prefix)$libcxx_incdir\"\n+  fi\n+elif test \"${with_sysroot+set}\" = set; then\n+  gcc_gxx_libcxx_without_sysroot=`expr \"${gcc_gxx_libcxx_include_dir}\" : \"${with_sysroot}\"'\\(.*\\)'`\n+  if test \"${gcc_gxx_libcxx_without_sysroot}\"; then\n+    gcc_gxx_libcxx_include_dir=\"${gcc_gxx_libcxx_without_sysroot}\"\n+    gcc_gxx_libcxx_include_dir_add_sysroot=1\n+  fi\n+fi\n+\n \n # Check whether --with-cpp_install_dir was given.\n if test \"${with_cpp_install_dir+set}\" = set; then :\n@@ -19186,7 +19237,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19189 \"configure\"\n+#line 19240 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19292,7 +19343,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19295 \"configure\"\n+#line 19346 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -31175,6 +31226,8 @@ fi\n \n \n \n+\n+\n \n \n "}, {"sha": "6fcf154d9878cca9eb787db6b9a5fca1268b9780", "filename": "gcc/configure.ac", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=662b9c55cf06d3df6682ef865fb2b685820317a9", "patch": "@@ -228,6 +228,48 @@ elif test \"${with_sysroot+set}\" = set; then\n   fi\n fi\n \n+# Configuration for an alternate set of C++ headers.\n+gcc_gxx_libcxx_include_dir=\n+# Specify the alternate g++ header file directory\n+AC_ARG_WITH(gxx-libcxx-include-dir,\n+[AS_HELP_STRING([--with-gxx-libcxx-include-dir=DIR],\n+                [specifies directory to find libc++ header files])],\n+[case \"${withval}\" in\n+yes)\tAC_MSG_ERROR(bad value ${withval} given for libc++ include directory) ;;\n+no)\t;;\n+*)\tgcc_gxx_libcxx_include_dir=$with_gxx_libcxx_include_dir ;;\n+esac])\n+\n+# If both --with-sysroot and --with-gxx-libcxx-include-dir are passed, we\n+# check to see if the latter starts with the former and, upon success, compute\n+# gcc_gxx_libcxx_include_dir as relative to the sysroot.\n+gcc_gxx_libcxx_include_dir_add_sysroot=0\n+\n+if test x${gcc_gxx_libcxx_include_dir} != x; then\n+  AC_DEFINE(ENABLE_STDLIB_OPTION, 1,\n+            [Define if the -stdlib= option should be enabled.])\n+else\n+  AC_DEFINE(ENABLE_STDLIB_OPTION, 0)\n+fi\n+# ??? This logic must match libstdc++-v3/acinclude.m4:GLIBCXX_EXPORT_INSTALL_INFO.\n+if test x${gcc_gxx_libcxx_include_dir} = x; then\n+  if test x${enable_version_specific_runtime_libs} = xyes; then\n+    gcc_gxx_libcxx_include_dir='${libsubdir}/libc++_include/c++/v1'\n+  else\n+    libcxx_incdir='libc++_include/c++/$(version)/v1'\n+    if test x$host != x$target; then\n+       libcxx_incdir=\"$target_alias/$libcxx_incdir\"\n+    fi\n+    gcc_gxx_libcxx_include_dir=\"\\$(libsubdir)/\\$(libsubdir_to_prefix)$libcxx_incdir\"\n+  fi\n+elif test \"${with_sysroot+set}\" = set; then\n+  gcc_gxx_libcxx_without_sysroot=`expr \"${gcc_gxx_libcxx_include_dir}\" : \"${with_sysroot}\"'\\(.*\\)'`\n+  if test \"${gcc_gxx_libcxx_without_sysroot}\"; then\n+    gcc_gxx_libcxx_include_dir=\"${gcc_gxx_libcxx_without_sysroot}\"\n+    gcc_gxx_libcxx_include_dir_add_sysroot=1\n+  fi\n+fi\n+\n AC_ARG_WITH(cpp_install_dir,\n [AC_HELP_STRING([--with-cpp-install-dir=DIR],\n                 [install the user visible C preprocessor in DIR\n@@ -7096,6 +7138,8 @@ AC_SUBST(float_h_file)\n AC_SUBST(gcc_config_arguments)\n AC_SUBST(gcc_gxx_include_dir)\n AC_SUBST(gcc_gxx_include_dir_add_sysroot)\n+AC_SUBST(gcc_gxx_libcxx_include_dir)\n+AC_SUBST(gcc_gxx_libcxx_include_dir_add_sysroot)\n AC_SUBST(host_exeext)\n AC_SUBST(host_xm_file_list)\n AC_SUBST(host_xm_include_list)"}, {"sha": "a8254cd34c91a74570d886c86c365f33fa4dd7c3", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 66, "deletions": 8, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=662b9c55cf06d3df6682ef865fb2b685820317a9", "patch": "@@ -49,6 +49,34 @@ along with GCC; see the file COPYING3.  If not see\n #define LIBSTDCXX_STATIC NULL\n #endif\n \n+#ifndef LIBCXX\n+#define LIBCXX \"c++\"\n+#endif\n+#ifndef LIBCXX_PROFILE\n+#define LIBCXX_PROFILE LIBCXX\n+#endif\n+#ifndef LIBCXX_STATIC\n+#define LIBCXX_STATIC NULL\n+#endif\n+\n+#ifndef LIBCXXABI\n+#define LIBCXXABI \"c++abi\"\n+#endif\n+#ifndef LIBCXXABI_PROFILE\n+#define LIBCXXABI_PROFILE LIBCXXABI\n+#endif\n+#ifndef LIBCXXABI_STATIC\n+#define LIBCXXABI_STATIC NULL\n+#endif\n+\n+/* The values used here must match those of the stdlib_kind enumeration\n+   in c.opt.  */\n+enum stdcxxlib_kind\n+{\n+  USE_LIBSTDCXX = 1,\n+  USE_LIBCXX = 2\n+};\n+\n void\n lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t\t      unsigned int *in_decoded_options_count,\n@@ -59,13 +87,16 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* If nonzero, the user gave us the `-p' or `-pg' flag.  */\n   int saw_profile_flag = 0;\n \n-  /* What do with libstdc++:\n-     -1 means we should not link in libstdc++\n-     0  means we should link in libstdc++ if it is needed\n-     1  means libstdc++ is needed and should be linked in.\n-     2  means libstdc++ is needed and should be linked statically.  */\n+  /* What action to take for the c++ runtime library:\n+    -1  means we should not link it in.\n+     0  means we should link it if it is needed.\n+     1  means it is needed and should be linked in.\n+     2  means it is needed but should be linked statically.  */\n   int library = 0;\n \n+  /* Which c++ runtime library to link.  */\n+  stdcxxlib_kind which_library = USE_LIBSTDCXX;\n+\n   /* The number of arguments being added to what's in argv, other than\n      libraries.  We use this to track the number of times we've inserted\n      -xc++/-xnone.  */\n@@ -194,6 +225,10 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  args[i] |= SKIPOPT;\n \t  break;\n \n+\tcase OPT_stdlib_:\n+\t  which_library = (stdcxxlib_kind) decoded_options[i].value;\n+\t  break;\n+\n \tcase OPT_SPECIAL_input_file:\n \t  {\n \t    int len;\n@@ -250,6 +285,13 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \n   /* Add one for shared_libgcc or extra static library.  */\n   num_args = argc + added + need_math + (library > 0) * 4 + 1;\n+  /* For libc++, on most platforms, the ABI library (usually called libc++abi)\n+     is provided as a separate DSO, which we must also append.\n+     However, a platform might have the ability to forward the ABI library\n+     from libc++, or combine it in some other way; in that case, LIBCXXABI\n+     should be set to NULL to signal that it need not be appended.  */\n+  if (which_library == USE_LIBCXX && LIBCXXABI != NULL)\n+    num_args += 4;\n   new_decoded_options = XNEWVEC (struct cl_decoded_option, num_args);\n \n   i = 0;\n@@ -323,9 +365,25 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  j++;\n \t}\n #endif\n-      generate_option (OPT_l,\n-\t\t       saw_profile_flag ? LIBSTDCXX_PROFILE : LIBSTDCXX, 1,\n-\t\t       CL_DRIVER, &new_decoded_options[j]);\n+      if (which_library == USE_LIBCXX)\n+\t{\n+\t  generate_option (OPT_l,\n+\t\t\t saw_profile_flag ? LIBCXX_PROFILE : LIBCXX, 1,\n+\t\t\t CL_DRIVER, &new_decoded_options[j]);\n+\t  if (LIBCXXABI != NULL)\n+\t    {\n+\t      j++;\n+\t      added_libraries++;\n+\t      generate_option (OPT_l,\n+\t\t\t       saw_profile_flag ? LIBCXXABI_PROFILE\n+\t\t\t\t\t\t: LIBCXXABI, 1,\n+\t\t\t       CL_DRIVER, &new_decoded_options[j]);\n+\t    }\n+\t}\n+      else\n+\tgenerate_option (OPT_l,\n+\t\t\t saw_profile_flag ? LIBSTDCXX_PROFILE : LIBSTDCXX, 1,\n+\t\t\t CL_DRIVER, &new_decoded_options[j]);\n       added_libraries++;\n       j++;\n       /* Add target-dependent static library, if necessary.  */"}, {"sha": "eb6f94162cdd3c98c6b0deb278dcbdbe02b8dc04", "filename": "gcc/cppdefault.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fcppdefault.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fcppdefault.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.c?ref=662b9c55cf06d3df6682ef865fb2b685820317a9", "patch": "@@ -55,6 +55,11 @@ const struct default_include cpp_include_defaults[]\n     { GPLUSPLUS_BACKWARD_INCLUDE_DIR, \"G++\", 1, 1,\n       GPLUSPLUS_INCLUDE_DIR_ADD_SYSROOT, 0 },\n #endif\n+#ifdef GPLUSPLUS_LIBCXX_INCLUDE_DIR\n+    /* Pick up libc++ include files, if we have -stdlib=libc++.  */\n+    { GPLUSPLUS_LIBCXX_INCLUDE_DIR, \"G++\", 2, 1,\n+      GPLUSPLUS_LIBCXX_INCLUDE_DIR_ADD_SYSROOT, 0 },\n+#endif\n #ifdef GCC_INCLUDE_DIR\n     /* This is the dir for gcc's private headers.  */\n     { GCC_INCLUDE_DIR, \"GCC\", 0, 0, 0, 0 },"}, {"sha": "35cf24ec29ea08dd4654222f312a2f4d85fecbb4", "filename": "gcc/cppdefault.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fcppdefault.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fcppdefault.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.h?ref=662b9c55cf06d3df6682ef865fb2b685820317a9", "patch": "@@ -36,7 +36,12 @@ struct default_include\n   const char *const fname;\t/* The name of the directory.  */\n   const char *const component;\t/* The component containing the directory\n \t\t\t\t   (see update_path in prefix.c) */\n-  const char cplusplus;\t\t/* Only look here if we're compiling C++.  */\n+  const char cplusplus;\t\t/* When this is non-zero, we should only\n+\t\t\t\t   consider this if we're compiling C++.\n+\t\t\t\t   When the -stdlib option is configured, this\n+\t\t\t\t   may take values greater than 1 to indicate\n+\t\t\t\t   which C++ standard library should be\n+\t\t\t\t   used.  */\n   const char cxx_aware;\t\t/* Includes in this directory don't need to\n \t\t\t\t   be wrapped in extern \"C\" when compiling\n \t\t\t\t   C++.  */"}, {"sha": "3b8b003c51d1962afbf1dc2d568468185ba6c330", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=662b9c55cf06d3df6682ef865fb2b685820317a9", "patch": "@@ -242,6 +242,7 @@ in the following sections.\n -fext-numeric-literals @gol\n -flang-info-include-translate@r{[}=@var{name}@r{]} @gol\n -flang-info-include-translate-not @gol\n+-stdlib=@var{libstdc++,libc++} @gol\n -Wabi-tag  -Wcatch-value  -Wcatch-value=@var{n} @gol\n -Wno-class-conversion  -Wclass-memaccess @gol\n -Wcomma-subscript  -Wconditionally-supported @gol\n@@ -3368,6 +3369,15 @@ is used when building the C++ library.)\n @opindex flang-info-include-translate-not\n Diagnose include translation events.\n \n+@item -stdlib=@var{libstdc++,libc++}\n+@opindex stdlib\n+When G++ is configured to support this option, it allows specification of\n+alternate C++ runtime libraries.  Two options are available: @var{libstdc++}\n+(the default, native C++ runtime for G++) and @var{libc++} which is the\n+C++ runtime installed on some operating systems (e.g. Darwin versions from\n+Darwin11 onwards).  The option switches G++ to use the headers from the\n+specified library and to emit @code{-lstdc++} or @code{-lc++} respectively,\n+when a C++ runtime is required for linking.\n @end table\n \n In addition, these warning options have meanings only for C++ programs:"}, {"sha": "14593a1f4c3813f4b71050433868b6b61a4f250b", "filename": "gcc/incpath.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fincpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/662b9c55cf06d3df6682ef865fb2b685820317a9/gcc%2Fincpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fincpath.c?ref=662b9c55cf06d3df6682ef865fb2b685820317a9", "patch": "@@ -137,7 +137,8 @@ add_standard_paths (const char *sysroot, const char *iprefix,\n \t IPREFIX and search them first.  */\n       for (p = cpp_include_defaults; p->fname; p++)\n \t{\n-\t  if (!p->cplusplus || cxx_stdinc)\n+\t  if (p->cplusplus == 0\n+\t      || (cxx_stdinc && (p->cplusplus == flag_stdlib_kind)))\n \t    {\n \t      /* Should we be translating sysrooted dirs too?  Assume\n \t\t that iprefix and sysroot are mutually exclusive, for\n@@ -168,7 +169,8 @@ add_standard_paths (const char *sysroot, const char *iprefix,\n \n   for (p = cpp_include_defaults; p->fname; p++)\n     {\n-      if (!p->cplusplus || cxx_stdinc)\n+      if (p->cplusplus == 0\n+\t  || (cxx_stdinc && (p->cplusplus == flag_stdlib_kind)))\n \t{\n \t  char *str;\n "}]}