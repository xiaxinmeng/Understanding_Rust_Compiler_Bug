{"sha": "76c3041b856cb0495d8f71110cd76f6fe64a0038", "node_id": "C_kwDOANBUbNoAKDc2YzMwNDFiODU2Y2IwNDk1ZDhmNzExMTBjZDc2ZjZmZTY0YTAwMzg", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-07-05T07:53:10Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-07-05T07:53:10Z"}, "message": "vect: Use sdot for a fallback implementation of usdot\n\nFollowing a suggestion from Tamar, this patch adds a fallback\nimplementation of usdot using sdot.  Specifically, for 8-bit\ninput types:\n\n   acc_2 = DOT_PROD_EXPR <a_unsigned, b_signed, acc_1>;\n\nbecomes:\n\n   tmp_1 = DOT_PROD_EXPR <64, b_signed, acc_1>;\n   tmp_2 = DOT_PROD_EXPR <64, b_signed, tmp_1>;\n   acc_2 = DOT_PROD_EXPR <a_unsigned - 128, b_signed, tmp_2>;\n\non the basis that (x-128)*y + 64*y + 64*y.  Doing the two 64*y\noperations first should give more time for x to be calculated,\non the off chance that that's useful.\n\ngcc/\n\t* tree-vect-patterns.cc (vect_convert_input): Expect the input\n\ttype to be signed for optab_vector_mixed_sign.  Update the vectype\n\tat the same time as type.\n\t(vect_recog_dot_prod_pattern): Update accordingly.  If usdot isn't\n\tavailable, try sdot instead.\n\t* tree-vect-loop.cc (vect_is_emulated_mixed_dot_prod): New function.\n\t(vect_model_reduction_cost): Model the cost of implementing usdot\n\tusing sdot.\n\t(vectorizable_reduction): Likewise.  Skip target support test\n\tfor lane reductions.\n\t(vect_emulate_mixed_dot_prod): New function.\n\t(vect_transform_reduction): Use it to emulate usdot via sdot.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-reduc-dot-9.c: Reduce target requirements\n\tfrom i8mm to dotprod.\n\t* gcc.dg/vect/vect-reduc-dot-10.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-11.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-12.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-13.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-14.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-15.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-16.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-17.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-18.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-19.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-20.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-21.c: Likewise.\n\t* gcc.dg/vect/vect-reduc-dot-22.c: Likewise.", "tree": {"sha": "36d0189235a320b99eb52b915b227402f1b0b283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36d0189235a320b99eb52b915b227402f1b0b283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76c3041b856cb0495d8f71110cd76f6fe64a0038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c3041b856cb0495d8f71110cd76f6fe64a0038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c3041b856cb0495d8f71110cd76f6fe64a0038", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c3041b856cb0495d8f71110cd76f6fe64a0038/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b55284f4a1235fccd8254f539ddc6b869580462b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55284f4a1235fccd8254f539ddc6b869580462b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55284f4a1235fccd8254f539ddc6b869580462b"}], "stats": {"total": 274, "additions": 213, "deletions": 61}, "files": [{"sha": "34e25ab7fb0ecf6e7a76403ee44d6a9ef0b73ef7", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-10.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #define SIGNEDNESS_1 unsigned\n #define SIGNEDNESS_2 unsigned\n@@ -10,4 +10,4 @@\n #include \"vect-reduc-dot-9.c\"\n \n /* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_sdot_qi } } } */"}, {"sha": "3af8df54cf94ad350102feadac8e3396fdb81426", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-11.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-11.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #define SIGNEDNESS_1 unsigned\n #define SIGNEDNESS_2 signed\n@@ -10,4 +10,4 @@\n #include \"vect-reduc-dot-9.c\"\n \n /* { dg-final { scan-tree-dump \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_sdot_qi } } } */"}, {"sha": "77ceef3643b1459321f7d84cdc0b9218898b6231", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-12.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-12.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #define SIGNEDNESS_1 unsigned\n #define SIGNEDNESS_2 signed\n@@ -10,4 +10,4 @@\n #include \"vect-reduc-dot-9.c\"\n \n /* { dg-final { scan-tree-dump \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_sdot_qi } } } */"}, {"sha": "d3c0c86f529203e1f82b7d99647539f8fe76a8ed", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-13.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-13.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #define SIGNEDNESS_1 signed\n #define SIGNEDNESS_2 unsigned\n@@ -10,4 +10,4 @@\n #include \"vect-reduc-dot-9.c\"\n \n /* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_sdot_qi } } } */"}, {"sha": "86a5c85753c0ae68bd577eb90fe5a9f6b0b9d278", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-14.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-14.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #define SIGNEDNESS_1 signed\n #define SIGNEDNESS_2 unsigned\n@@ -10,4 +10,4 @@\n #include \"vect-reduc-dot-9.c\"\n \n /* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_sdot_qi } } } */"}, {"sha": "25de0940a65354be2f0ffa856b9912291de462b1", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-15.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-15.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #define SIGNEDNESS_1 signed\n #define SIGNEDNESS_2 signed\n@@ -10,4 +10,4 @@\n #include \"vect-reduc-dot-9.c\"\n \n /* { dg-final { scan-tree-dump \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_sdot_qi } } } */"}, {"sha": "4a1dec0677e5d81c1d1d13bc80e9d2fca1d92bdc", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-16.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #define SIGNEDNESS_1 signed\n #define SIGNEDNESS_2 signed\n@@ -10,4 +10,4 @@\n #include \"vect-reduc-dot-9.c\"\n \n /* { dg-final { scan-tree-dump \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_sdot_qi } } } */"}, {"sha": "90d21188b76060095de344bd75c8f8c632399f49", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-17.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-17.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #include \"tree-vect.h\"\n \n@@ -50,4 +50,4 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_sdot_qi } } } */"}, {"sha": "81ecb158d29e97f04f16e5d497629e892b23b2a9", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-18.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-18.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #include \"tree-vect.h\"\n \n@@ -50,4 +50,4 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_sdot_qi } } } */"}, {"sha": "cbcd4f120a505c14145ef822c99acd1bd6946e83", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-19.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-19.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #include \"tree-vect.h\"\n "}, {"sha": "e81ed1da5a4f5e389d0f95da30e4d99a89a2de89", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-20.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-20.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #include \"tree-vect.h\"\n "}, {"sha": "81ce5cdaffbd0ec8d67dd5f4bd7ca05e3f3b0580", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-21.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-21.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #include \"tree-vect.h\"\n "}, {"sha": "b8c9d3ca53b07654680de192a52257a9687cec9c", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-22.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #include \"tree-vect.h\"\n "}, {"sha": "e0b132f6b3598979e5ad14fb316809b6a7dac788", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-9.c?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n-/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n \n #include \"tree-vect.h\"\n \n@@ -50,4 +50,4 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_sdot_qi } } } */"}, {"sha": "3a70c15b59305ec3ddf84a7e349289b5f86f0037", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 145, "deletions": 15, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -4566,6 +4566,31 @@ have_whole_vector_shift (machine_mode mode)\n   return true;\n }\n \n+/* Return true if (a) STMT_INFO is a DOT_PROD_EXPR reduction whose\n+   multiplication operands have differing signs and (b) we intend\n+   to emulate the operation using a series of signed DOT_PROD_EXPRs.\n+   See vect_emulate_mixed_dot_prod for the actual sequence used.  */\n+\n+static bool\n+vect_is_emulated_mixed_dot_prod (loop_vec_info loop_vinfo,\n+\t\t\t\t stmt_vec_info stmt_info)\n+{\n+  gassign *assign = dyn_cast<gassign *> (stmt_info->stmt);\n+  if (!assign || gimple_assign_rhs_code (assign) != DOT_PROD_EXPR)\n+    return false;\n+\n+  tree rhs1 = gimple_assign_rhs1 (assign);\n+  tree rhs2 = gimple_assign_rhs2 (assign);\n+  if (TYPE_SIGN (TREE_TYPE (rhs1)) == TYPE_SIGN (TREE_TYPE (rhs2)))\n+    return false;\n+\n+  stmt_vec_info reduc_info = info_for_reduction (loop_vinfo, stmt_info);\n+  gcc_assert (reduc_info->is_reduc_info);\n+  return !directly_supported_p (DOT_PROD_EXPR,\n+\t\t\t\tSTMT_VINFO_REDUC_VECTYPE_IN (reduc_info),\n+\t\t\t\toptab_vector_mixed_sign);\n+}\n+\n /* TODO: Close dependency between vect_model_*_cost and vectorizable_*\n    functions. Design better to avoid maintenance issues.  */\n \n@@ -4601,6 +4626,8 @@ vect_model_reduction_cost (loop_vec_info loop_vinfo,\n   if (!gimple_extract_op (orig_stmt_info->stmt, &op))\n     gcc_unreachable ();\n \n+  bool emulated_mixed_dot_prod\n+    = vect_is_emulated_mixed_dot_prod (loop_vinfo, stmt_info);\n   if (reduction_type == EXTRACT_LAST_REDUCTION)\n     /* No extra instructions are needed in the prologue.  The loop body\n        operations are costed in vectorizable_condition.  */\n@@ -4628,11 +4655,20 @@ vect_model_reduction_cost (loop_vec_info loop_vinfo,\n     }\n   else\n     {\n-      /* Add in cost for initial definition.\n-\t For cond reduction we have four vectors: initial index, step,\n-\t initial result of the data reduction, initial value of the index\n-\t reduction.  */\n-      int prologue_stmts = reduction_type == COND_REDUCTION ? 4 : 1;\n+      /* Add in the cost of the initial definitions.  */\n+      int prologue_stmts;\n+      if (reduction_type == COND_REDUCTION)\n+\t/* For cond reductions we have four vectors: initial index, step,\n+\t   initial result of the data reduction, initial value of the index\n+\t   reduction.  */\n+\tprologue_stmts = 4;\n+      else if (emulated_mixed_dot_prod)\n+\t/* We need the initial reduction value and two invariants:\n+\t   one that contains the minimum signed value and one that\n+\t   contains half of its negative.  */\n+\tprologue_stmts = 3;\n+      else\n+\tprologue_stmts = 1;\n       prologue_cost += record_stmt_cost (cost_vec, prologue_stmts,\n \t\t\t\t\t scalar_to_vec, stmt_info, 0,\n \t\t\t\t\t vect_prologue);\n@@ -6797,11 +6833,6 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n   bool lane_reduc_code_p = (op.code == DOT_PROD_EXPR\n \t\t\t    || op.code == WIDEN_SUM_EXPR\n \t\t\t    || op.code == SAD_EXPR);\n-  enum optab_subtype optab_query_kind = optab_vector;\n-  if (op.code == DOT_PROD_EXPR\n-      && (TYPE_SIGN (TREE_TYPE (op.ops[0]))\n-\t  != TYPE_SIGN (TREE_TYPE (op.ops[1]))))\n-    optab_query_kind = optab_vector_mixed_sign;\n \n   if (!POINTER_TYPE_P (op.type) && !INTEGRAL_TYPE_P (op.type)\n       && !SCALAR_FLOAT_TYPE_P (op.type))\n@@ -7328,9 +7359,17 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n       /* 4. Supportable by target?  */\n       bool ok = true;\n \n-      /* 4.1. check support for the operation in the loop  */\n+      /* 4.1. check support for the operation in the loop\n+\n+\t This isn't necessary for the lane reduction codes, since they\n+\t can only be produced by pattern matching, and it's up to the\n+\t pattern matcher to test for support.  The main reason for\n+\t specifically skipping this step is to avoid rechecking whether\n+\t mixed-sign dot-products can be implemented using signed\n+\t dot-products.  */\n       machine_mode vec_mode = TYPE_MODE (vectype_in);\n-      if (!directly_supported_p (op.code, vectype_in, optab_query_kind))\n+      if (!lane_reduc_code_p\n+\t  && !directly_supported_p (op.code, vectype_in))\n         {\n           if (dump_enabled_p ())\n             dump_printf (MSG_NOTE, \"op not supported by target.\\n\");\n@@ -7398,7 +7437,14 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n      vect_transform_reduction.  Otherwise this is costed by the\n      separate vectorizable_* routines.  */\n   if (single_defuse_cycle || lane_reduc_code_p)\n-    record_stmt_cost (cost_vec, ncopies, vector_stmt, stmt_info, 0, vect_body);\n+    {\n+      int factor = 1;\n+      if (vect_is_emulated_mixed_dot_prod (loop_vinfo, stmt_info))\n+\t/* Three dot-products and a subtraction.  */\n+\tfactor = 4;\n+      record_stmt_cost (cost_vec, ncopies * factor, vector_stmt,\n+\t\t\tstmt_info, 0, vect_body);\n+    }\n \n   if (dump_enabled_p ()\n       && reduction_type == FOLD_LEFT_REDUCTION)\n@@ -7457,6 +7503,81 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n   return true;\n }\n \n+/* STMT_INFO is a dot-product reduction whose multiplication operands\n+   have different signs.  Emit a sequence to emulate the operation\n+   using a series of signed DOT_PROD_EXPRs and return the last\n+   statement generated.  VEC_DEST is the result of the vector operation\n+   and VOP lists its inputs.  */\n+\n+static gassign *\n+vect_emulate_mixed_dot_prod (loop_vec_info loop_vinfo, stmt_vec_info stmt_info,\n+\t\t\t     gimple_stmt_iterator *gsi, tree vec_dest,\n+\t\t\t     tree vop[3])\n+{\n+  tree wide_vectype = signed_type_for (TREE_TYPE (vec_dest));\n+  tree narrow_vectype = signed_type_for (TREE_TYPE (vop[0]));\n+  tree narrow_elttype = TREE_TYPE (narrow_vectype);\n+  gimple *new_stmt;\n+\n+  /* Make VOP[0] the unsigned operand VOP[1] the signed operand.  */\n+  if (!TYPE_UNSIGNED (TREE_TYPE (vop[0])))\n+    std::swap (vop[0], vop[1]);\n+\n+  /* Convert all inputs to signed types.  */\n+  for (int i = 0; i < 3; ++i)\n+    if (TYPE_UNSIGNED (TREE_TYPE (vop[i])))\n+      {\n+\ttree tmp = make_ssa_name (signed_type_for (TREE_TYPE (vop[i])));\n+\tnew_stmt = gimple_build_assign (tmp, NOP_EXPR, vop[i]);\n+\tvect_finish_stmt_generation (loop_vinfo, stmt_info, new_stmt, gsi);\n+\tvop[i] = tmp;\n+      }\n+\n+  /* In the comments below we assume 8-bit inputs for simplicity,\n+     but the approach works for any full integer type.  */\n+\n+  /* Create a vector of -128.  */\n+  tree min_narrow_elttype = TYPE_MIN_VALUE (narrow_elttype);\n+  tree min_narrow = build_vector_from_val (narrow_vectype,\n+\t\t\t\t\t   min_narrow_elttype);\n+\n+  /* Create a vector of 64.  */\n+  auto half_wi = wi::lrshift (wi::to_wide (min_narrow_elttype), 1);\n+  tree half_narrow = wide_int_to_tree (narrow_elttype, half_wi);\n+  half_narrow = build_vector_from_val (narrow_vectype, half_narrow);\n+\n+  /* Emit: SUB_RES = VOP[0] - 128.  */\n+  tree sub_res = make_ssa_name (narrow_vectype);\n+  new_stmt = gimple_build_assign (sub_res, PLUS_EXPR, vop[0], min_narrow);\n+  vect_finish_stmt_generation (loop_vinfo, stmt_info, new_stmt, gsi);\n+\n+  /* Emit:\n+\n+       STAGE1 = DOT_PROD_EXPR <VOP[1], 64, VOP[2]>;\n+       STAGE2 = DOT_PROD_EXPR <VOP[1], 64, STAGE1>;\n+       STAGE3 = DOT_PROD_EXPR <SUB_RES, -128, STAGE2>;\n+\n+     on the basis that x * y == (x - 128) * y + 64 * y + 64 * y\n+     Doing the two 64 * y steps first allows more time to compute x.  */\n+  tree stage1 = make_ssa_name (wide_vectype);\n+  new_stmt = gimple_build_assign (stage1, DOT_PROD_EXPR,\n+\t\t\t\t  vop[1], half_narrow, vop[2]);\n+  vect_finish_stmt_generation (loop_vinfo, stmt_info, new_stmt, gsi);\n+\n+  tree stage2 = make_ssa_name (wide_vectype);\n+  new_stmt = gimple_build_assign (stage2, DOT_PROD_EXPR,\n+\t\t\t\t  vop[1], half_narrow, stage1);\n+  vect_finish_stmt_generation (loop_vinfo, stmt_info, new_stmt, gsi);\n+\n+  tree stage3 = make_ssa_name (wide_vectype);\n+  new_stmt = gimple_build_assign (stage3, DOT_PROD_EXPR,\n+\t\t\t\t  sub_res, vop[1], stage2);\n+  vect_finish_stmt_generation (loop_vinfo, stmt_info, new_stmt, gsi);\n+\n+  /* Convert STAGE3 to the reduction type.  */\n+  return gimple_build_assign (vec_dest, CONVERT_EXPR, stage3);\n+}\n+\n /* Transform the definition stmt STMT_INFO of a reduction PHI backedge\n    value.  */\n \n@@ -7563,12 +7684,17 @@ vect_transform_reduction (loop_vec_info loop_vinfo,\n \t\t\t\t\t: &vec_oprnds2));\n     }\n \n+  bool emulated_mixed_dot_prod\n+    = vect_is_emulated_mixed_dot_prod (loop_vinfo, stmt_info);\n   FOR_EACH_VEC_ELT (vec_oprnds0, i, def0)\n     {\n       gimple *new_stmt;\n       tree vop[3] = { def0, vec_oprnds1[i], NULL_TREE };\n       if (masked_loop_p && !mask_by_cond_expr)\n \t{\n+\t  /* No conditional ifns have been defined for dot-product yet.  */\n+\t  gcc_assert (code != DOT_PROD_EXPR);\n+\n \t  /* Make sure that the reduction accumulator is vop[0].  */\n \t  if (reduc_index == 1)\n \t    {\n@@ -7597,8 +7723,12 @@ vect_transform_reduction (loop_vec_info loop_vinfo,\n \t      build_vect_cond_expr (code, vop, mask, gsi);\n \t    }\n \n-\t  new_stmt = gimple_build_assign (vec_dest, code,\n-\t\t\t\t\t  vop[0], vop[1], vop[2]);\n+\t  if (emulated_mixed_dot_prod)\n+\t    new_stmt = vect_emulate_mixed_dot_prod (loop_vinfo, stmt_info, gsi,\n+\t\t\t\t\t\t    vec_dest, vop);\n+\t  else\n+\t    new_stmt = gimple_build_assign (vec_dest, code,\n+\t\t\t\t\t    vop[0], vop[1], vop[2]);\n \t  new_temp = make_ssa_name (vec_dest, new_stmt);\n \t  gimple_assign_set_lhs (new_stmt, new_temp);\n \t  vect_finish_stmt_generation (loop_vinfo, stmt_info, new_stmt, gsi);"}, {"sha": "dfbfb71b3c69a0205ccc1b287cb50fa02a70942e", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c3041b856cb0495d8f71110cd76f6fe64a0038/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=76c3041b856cb0495d8f71110cd76f6fe64a0038", "patch": "@@ -760,12 +760,16 @@ vect_convert_input (vec_info *vinfo, stmt_vec_info stmt_info, tree type,\n \t\t    vect_unpromoted_value *unprom, tree vectype,\n \t\t    enum optab_subtype subtype = optab_default)\n {\n-\n   /* Update the type if the signs differ.  */\n-  if (subtype == optab_vector_mixed_sign\n-      && TYPE_SIGN (type) != TYPE_SIGN (TREE_TYPE (unprom->op)))\n-    type = build_nonstandard_integer_type (TYPE_PRECISION (type),\n-\t\t\t\t\t   TYPE_SIGN (unprom->type));\n+  if (subtype == optab_vector_mixed_sign)\n+    {\n+      gcc_assert (!TYPE_UNSIGNED (type));\n+      if (TYPE_UNSIGNED (TREE_TYPE (unprom->op)))\n+\t{\n+\t  type = unsigned_type_for (type);\n+\t  vectype = unsigned_type_for (vectype);\n+\t}\n+    }\n \n   /* Check for a no-op conversion.  */\n   if (types_compatible_p (type, TREE_TYPE (unprom->op)))\n@@ -1139,16 +1143,34 @@ vect_recog_dot_prod_pattern (vec_info *vinfo,\n      is signed; otherwise, the result has the same sign as the operands.  */\n   if (TYPE_PRECISION (unprom_mult.type) != TYPE_PRECISION (type)\n       && (subtype == optab_vector_mixed_sign\n-\t? TYPE_UNSIGNED (unprom_mult.type)\n-\t: TYPE_SIGN (unprom_mult.type) != TYPE_SIGN (half_type)))\n+\t  ? TYPE_UNSIGNED (unprom_mult.type)\n+\t  : TYPE_SIGN (unprom_mult.type) != TYPE_SIGN (half_type)))\n     return NULL;\n \n   vect_pattern_detected (\"vect_recog_dot_prod_pattern\", last_stmt);\n \n+  /* If the inputs have mixed signs, canonicalize on using the signed\n+     input type for analysis.  This also helps when emulating mixed-sign\n+     operations using signed operations.  */\n+  if (subtype == optab_vector_mixed_sign)\n+    half_type = signed_type_for (half_type);\n+\n   tree half_vectype;\n   if (!vect_supportable_direct_optab_p (vinfo, type, DOT_PROD_EXPR, half_type,\n \t\t\t\t\ttype_out, &half_vectype, subtype))\n-    return NULL;\n+    {\n+      /* We can emulate a mixed-sign dot-product using a sequence of\n+\t signed dot-products; see vect_emulate_mixed_dot_prod for details.  */\n+      if (subtype != optab_vector_mixed_sign\n+\t  || !vect_supportable_direct_optab_p (vinfo, signed_type_for (type),\n+\t\t\t\t\t       DOT_PROD_EXPR, half_type,\n+\t\t\t\t\t       type_out, &half_vectype,\n+\t\t\t\t\t       optab_vector))\n+\treturn NULL;\n+\n+      *type_out = signed_or_unsigned_type_for (TYPE_UNSIGNED (type),\n+\t\t\t\t\t       *type_out);\n+    }\n \n   /* Get the inputs in the appropriate types.  */\n   tree mult_oprnd[2];"}]}