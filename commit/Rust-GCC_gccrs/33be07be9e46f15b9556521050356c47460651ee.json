{"sha": "33be07be9e46f15b9556521050356c47460651ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNiZTA3YmU5ZTQ2ZjE1Yjk1NTY1MjEwNTAzNTZjNDc0NjA2NTFlZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-04T17:00:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-04T17:02:10Z"}, "message": "fold-const: Don't use build_constructor for non-aggregate types in native_encode_initializer [PR93121]\n\nThe following testcase is rejected, because when trying to encode a zeroing\nCONSTRUCTOR, the code was using build_constructor to build initializers for\nthe elements but when recursing the function handles CONSTRUCTOR only for\naggregate types.\n\nThe following patch fixes that by using build_zero_cst instead for\nnon-aggregates.  Another option would be add handling CONSTRUCTOR for\nnon-aggregates in native_encode_initializer.  Or we can do both, I guess\nthe middle-end generally doesn't like CONSTRUCTORs for scalar variables, but\nam not 100% sure if the FE doesn't produce those sometimes.\n\n2020-12-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/93121\n\t* fold-const.c (native_encode_initializer): Use build_zero_cst\n\tinstead of build_constructor.\n\n\t* g++.dg/cpp2a/bit-cast6.C: New test.", "tree": {"sha": "def7d97da300eb743fc2831c4f82c51be7db2947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/def7d97da300eb743fc2831c4f82c51be7db2947"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33be07be9e46f15b9556521050356c47460651ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33be07be9e46f15b9556521050356c47460651ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33be07be9e46f15b9556521050356c47460651ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33be07be9e46f15b9556521050356c47460651ee/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a26d4a204c8a462a7e0a1a86bb2f25ecd470aad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a26d4a204c8a462a7e0a1a86bb2f25ecd470aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a26d4a204c8a462a7e0a1a86bb2f25ecd470aad"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "1241b1395d49a6a061e8af508f9ad64cda363373", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33be07be9e46f15b9556521050356c47460651ee/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33be07be9e46f15b9556521050356c47460651ee/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=33be07be9e46f15b9556521050356c47460651ee", "patch": "@@ -8104,11 +8104,12 @@ native_encode_initializer (tree init, unsigned char *ptr, int len,\n \t\t{\n \t\t  if (valueinit == -1)\n \t\t    {\n-\t\t      tree zero = build_constructor (TREE_TYPE (type), NULL);\n+\t\t      tree zero = build_zero_cst (TREE_TYPE (type));\n \t\t      r = native_encode_initializer (zero, ptr + curpos,\n \t\t\t\t\t\t     fieldsize, 0,\n \t\t\t\t\t\t     mask + curpos);\n-\t\t      ggc_free (zero);\n+\t\t      if (TREE_CODE (zero) == CONSTRUCTOR)\n+\t\t\tggc_free (zero);\n \t\t      if (!r)\n \t\t\treturn 0;\n \t\t      valueinit = curpos;\n@@ -8255,8 +8256,9 @@ native_encode_initializer (tree init, unsigned char *ptr, int len,\n \t\t    {\n \t\t      cnt--;\n \t\t      field = fld;\n-\t\t      val = build_constructor (TREE_TYPE (fld), NULL);\n-\t\t      to_free = val;\n+\t\t      val = build_zero_cst (TREE_TYPE (fld));\n+\t\t      if (TREE_CODE (val) == CONSTRUCTOR)\n+\t\t\tto_free = val;\n \t\t    }\n \t\t}\n "}, {"sha": "4b70da105b646f47584922b1ee26387d087f234e", "filename": "gcc/testsuite/g++.dg/cpp2a/bit-cast6.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33be07be9e46f15b9556521050356c47460651ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33be07be9e46f15b9556521050356c47460651ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast6.C?ref=33be07be9e46f15b9556521050356c47460651ee", "patch": "@@ -0,0 +1,31 @@\n+// PR libstd++/93121\n+// { dg-do compile { target c++20 } }\n+\n+namespace std\n+{\n+enum class byte : unsigned char {};\n+template <typename To, typename From>\n+constexpr To\n+bit_cast (const From &from)\n+{\n+  return __builtin_bit_cast (To, from);\n+}\n+}\n+\n+struct S { unsigned short s[2]; };\n+constexpr std::byte from1[sizeof (S)]{};\n+constexpr auto to1 = std::bit_cast<S>(from1);\n+constexpr unsigned char from2[sizeof (S)]{};\n+constexpr auto to2 = std::bit_cast<S>(from2);\n+\n+constexpr bool\n+cmp (const S &s1, const S &s2)\n+{\n+  for (int i = 0; i < sizeof (s1.s) / sizeof (s1.s[0]); i++)\n+    if (s1.s[i] != s2.s[i])\n+      return false;\n+  return true;\n+}\n+\n+static_assert (cmp (to1, S{}));\n+static_assert (cmp (to2, S{}));"}]}