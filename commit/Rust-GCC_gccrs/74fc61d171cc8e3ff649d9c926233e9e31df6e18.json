{"sha": "74fc61d171cc8e3ff649d9c926233e9e31df6e18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRmYzYxZDE3MWNjOGUzZmY2NDlkOWM5MjYyMzNlOWUzMWRmNmUxOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-29T11:25:19Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-29T11:25:19Z"}, "message": "mips.c (mips_init_builtins): Simplify.\n\n\t* config/mips/mips.c (mips_init_builtins): Simplify.  Only create\n\tV2SF_type_node if it will be needed.\n\nFrom-SVN: r86718", "tree": {"sha": "c4c0a8c2c07c03f30d30df6043d8ead3d8dc8dac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4c0a8c2c07c03f30d30df6043d8ead3d8dc8dac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74fc61d171cc8e3ff649d9c926233e9e31df6e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fc61d171cc8e3ff649d9c926233e9e31df6e18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74fc61d171cc8e3ff649d9c926233e9e31df6e18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fc61d171cc8e3ff649d9c926233e9e31df6e18/comments", "author": null, "committer": null, "parents": [{"sha": "ff55fb9cb68b4f67662af05c43bd003f40540ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff55fb9cb68b4f67662af05c43bd003f40540ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff55fb9cb68b4f67662af05c43bd003f40540ef1"}], "stats": {"total": 192, "additions": 49, "deletions": 143}, "files": [{"sha": "d2eb213cf45121e3f76cf21a9734b584d327b471", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fc61d171cc8e3ff649d9c926233e9e31df6e18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fc61d171cc8e3ff649d9c926233e9e31df6e18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74fc61d171cc8e3ff649d9c926233e9e31df6e18", "patch": "@@ -1,3 +1,8 @@\n+2004-08-29  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.c (mips_init_builtins): Simplify.  Only create\n+\tV2SF_type_node if it will be needed.\n+\n 2004-08-29  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h (MIPS_CMP_MOVT, MIPS_CMP_MOVF): Delete."}, {"sha": "3f2cb41249ed9be5c1707b43609255a06bc69f89", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 44, "deletions": 143, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fc61d171cc8e3ff649d9c926233e9e31df6e18/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fc61d171cc8e3ff649d9c926233e9e31df6e18/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=74fc61d171cc8e3ff649d9c926233e9e31df6e18", "patch": "@@ -10449,175 +10449,76 @@ void\n mips_init_builtins (void)\n {\n   const struct builtin_description *d;\n-  size_t i;\n-  tree v2sf_ftype_v2sf_v2sf;\n-  tree v2sf_ftype_sf_sf;\n-  tree sf_ftype_v2sf;\n-  tree v2sf_ftype_v2sf;\n-  tree int_ftype_v2sf_v2sf;\n-  tree int_ftype_v2sf_v2sf_v2sf_v2sf;\n-  tree v2sf_ftype_v2sf_v2sf_int;\n-  tree int_ftype_sf_sf;\n-  tree int_ftype_df_df;\n-  tree sf_ftype_sf;\n-  tree df_ftype_df;\n-  tree sf_ftype_sf_sf;\n-  tree df_ftype_df_df;\n-  tree v2sf_ftype_v2sf_v2sf_v2sf_v2sf;\n-  tree V2SF_type_node = build_vector_type_for_mode (float_type_node, V2SFmode);\n+  tree types[(int) MIPS_MAX_FTYPE_MAX];\n+  tree V2SF_type_node;\n \n   /* We have only builtins for -mpaired-single and -mips3d.  */\n   if (!TARGET_PAIRED_SINGLE_FLOAT)\n     return;\n \n-  int_ftype_sf_sf\n-    = build_function_type_list (integer_type_node, \n-\t\t\t\tfloat_type_node, float_type_node, \n-\t\t\t\tNULL_TREE);\n+  V2SF_type_node = build_vector_type_for_mode (float_type_node, V2SFmode);\n \n-  int_ftype_df_df \n-    = build_function_type_list (integer_type_node, \n-\t\t\t\tdouble_type_node, double_type_node, \n-\t\t\t\tNULL_TREE);\n+  types[MIPS_V2SF_FTYPE_V2SF]\n+    = build_function_type_list (V2SF_type_node, V2SF_type_node, NULL_TREE);\n \n-  v2sf_ftype_v2sf_v2sf \n-    = build_function_type_list (V2SF_type_node, \n+  types[MIPS_V2SF_FTYPE_V2SF_V2SF]\n+    = build_function_type_list (V2SF_type_node,\n \t\t\t\tV2SF_type_node, V2SF_type_node, NULL_TREE);\n \n-  v2sf_ftype_sf_sf \n-    = build_function_type_list (V2SF_type_node, \n-\t\t\t\tfloat_type_node, float_type_node, \n-\t\t\t\tNULL_TREE);\n+  types[MIPS_V2SF_FTYPE_V2SF_V2SF_INT]\n+    = build_function_type_list (V2SF_type_node,\n+\t\t\t\tV2SF_type_node, V2SF_type_node,\n+\t\t\t\tinteger_type_node, NULL_TREE);\n \n-  sf_ftype_v2sf \n-    = build_function_type_list (float_type_node, V2SF_type_node, NULL_TREE);\n+  types[MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF]\n+    = build_function_type_list (V2SF_type_node,\n+\t\t\t\tV2SF_type_node, V2SF_type_node,\n+\t\t\t\tV2SF_type_node, V2SF_type_node, NULL_TREE);\n \n-  v2sf_ftype_v2sf \n-    = build_function_type_list (V2SF_type_node, V2SF_type_node, NULL_TREE);\n+  types[MIPS_V2SF_FTYPE_SF_SF]\n+    = build_function_type_list (V2SF_type_node,\n+\t\t\t\tfloat_type_node, float_type_node, NULL_TREE);\n \n-  int_ftype_v2sf_v2sf \n+  types[MIPS_INT_FTYPE_V2SF_V2SF]\n     = build_function_type_list (integer_type_node,\n \t\t\t\tV2SF_type_node, V2SF_type_node, NULL_TREE);\n \n-  int_ftype_v2sf_v2sf_v2sf_v2sf\n+  types[MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF]\n     = build_function_type_list (integer_type_node,\n \t\t\t\tV2SF_type_node, V2SF_type_node,\n \t\t\t\tV2SF_type_node, V2SF_type_node, NULL_TREE);\n \n-  v2sf_ftype_v2sf_v2sf_v2sf_v2sf\n-    = build_function_type_list (V2SF_type_node,\n-\t\t\t\tV2SF_type_node, V2SF_type_node, \n-\t\t\t\tV2SF_type_node, V2SF_type_node, NULL_TREE);\n-\n-  v2sf_ftype_v2sf_v2sf_int\n-    = build_function_type_list (V2SF_type_node, \n-\t\t\t\tV2SF_type_node, V2SF_type_node, \n-\t\t\t\tinteger_type_node, NULL_TREE);\n-\n-  sf_ftype_sf\n-    = build_function_type_list (float_type_node, \n-\t\t\t\tfloat_type_node, NULL_TREE);\n-\n-  df_ftype_df\n-    = build_function_type_list (double_type_node, \n-\t\t\t\tdouble_type_node, NULL_TREE);\n-\n-  sf_ftype_sf_sf\n-    = build_function_type_list (float_type_node, \n-\t\t\t\tfloat_type_node, float_type_node, \n-\t\t\t\tNULL_TREE);\n-\n-  df_ftype_df_df\n-    = build_function_type_list (double_type_node, \n-\t\t\t\tdouble_type_node, double_type_node, \n-\t\t\t\tNULL_TREE);\n-\n-  for (i = 0, d = mips_bdesc; i < ARRAY_SIZE (mips_bdesc); i++, d++)\n-    {\n-      if ((d->target_flags & MASK_PAIRED_SINGLE)\n-\t  && !TARGET_PAIRED_SINGLE_FLOAT)\n-\tcontinue;\n-\n-      if ((d->target_flags & MASK_MIPS3D) \n-\t  && !TARGET_MIPS3D)\n-\tcontinue;\n-\n-      switch (d->ftype)\n-\t{\n-\tcase MIPS_V2SF_FTYPE_V2SF_V2SF:\n-\t  lang_hooks.builtin_function (d->name, v2sf_ftype_v2sf_v2sf,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n-\n-\tcase MIPS_V2SF_FTYPE_SF_SF:\n-\t  lang_hooks.builtin_function (d->name, v2sf_ftype_sf_sf,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n-\n-\tcase MIPS_SF_FTYPE_V2SF:\n-\t  lang_hooks.builtin_function (d->name, sf_ftype_v2sf,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n-\n-\tcase MIPS_V2SF_FTYPE_V2SF:\n-\t  lang_hooks.builtin_function (d->name, v2sf_ftype_v2sf,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n-\n-\tcase MIPS_INT_FTYPE_V2SF_V2SF:\n-\t  lang_hooks.builtin_function (d->name, int_ftype_v2sf_v2sf,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n-\n-\tcase MIPS_INT_FTYPE_V2SF_V2SF_V2SF_V2SF:\n-\t  lang_hooks.builtin_function (d->name, int_ftype_v2sf_v2sf_v2sf_v2sf,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n-\n-\tcase MIPS_V2SF_FTYPE_V2SF_V2SF_INT:\n-\t  lang_hooks.builtin_function (d->name, v2sf_ftype_v2sf_v2sf_int,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n-\n-\tcase MIPS_V2SF_FTYPE_V2SF_V2SF_V2SF_V2SF:\n-\t  lang_hooks.builtin_function (d->name, v2sf_ftype_v2sf_v2sf_v2sf_v2sf,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n+  types[MIPS_INT_FTYPE_SF_SF]\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tfloat_type_node, float_type_node, NULL_TREE);\n \n-\tcase MIPS_SF_FTYPE_SF:\n-\t  lang_hooks.builtin_function (d->name, sf_ftype_sf,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n+  types[MIPS_INT_FTYPE_DF_DF]\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tdouble_type_node, double_type_node, NULL_TREE);\n \n-\tcase MIPS_DF_FTYPE_DF:\n-\t  lang_hooks.builtin_function (d->name, df_ftype_df,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n+  types[MIPS_SF_FTYPE_V2SF]\n+    = build_function_type_list (float_type_node, V2SF_type_node, NULL_TREE);\n \n-\tcase MIPS_INT_FTYPE_SF_SF:\n-\t  lang_hooks.builtin_function (d->name, int_ftype_sf_sf,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n+  types[MIPS_SF_FTYPE_SF]\n+    = build_function_type_list (float_type_node,\n+\t\t\t\tfloat_type_node, NULL_TREE);\n \n-\tcase MIPS_INT_FTYPE_DF_DF:\n-\t  lang_hooks.builtin_function (d->name, int_ftype_df_df,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n+  types[MIPS_SF_FTYPE_SF_SF]\n+    = build_function_type_list (float_type_node,\n+\t\t\t\tfloat_type_node, float_type_node, NULL_TREE);\n \n-\tcase MIPS_SF_FTYPE_SF_SF:\n-\t  lang_hooks.builtin_function (d->name, sf_ftype_sf_sf,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n+  types[MIPS_DF_FTYPE_DF]\n+    = build_function_type_list (double_type_node,\n+\t\t\t\tdouble_type_node, NULL_TREE);\n \n-\tcase MIPS_DF_FTYPE_DF_DF:\n-\t  lang_hooks.builtin_function (d->name, df_ftype_df_df,\n-\t\t\t\t       d->code, BUILT_IN_MD, NULL, NULL_TREE);\n-\t  break;\n+  types[MIPS_DF_FTYPE_DF_DF]\n+    = build_function_type_list (double_type_node,\n+\t\t\t\tdouble_type_node, double_type_node, NULL_TREE);\n \n-\tdefault:\n-\t  break;\n-\t}\n-    }\n+  for (d = mips_bdesc; d < &mips_bdesc[ARRAY_SIZE (mips_bdesc)]; d++)\n+    if ((d->target_flags & target_flags) == d->target_flags)\n+      lang_hooks.builtin_function (d->name, types[d->ftype],\n+\t\t\t\t   d->code, BUILT_IN_MD, NULL, NULL_TREE);\n }\n \n /* Expand a __builtin_mips_movt_*_ps() or __builtin_mips_movf_*_ps()"}]}