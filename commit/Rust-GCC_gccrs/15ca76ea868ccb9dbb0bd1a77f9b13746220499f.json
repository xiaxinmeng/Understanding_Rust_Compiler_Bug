{"sha": "15ca76ea868ccb9dbb0bd1a77f9b13746220499f", "node_id": "C_kwDOANBUbNoAKDE1Y2E3NmVhODY4Y2NiOWRiYjBiZDFhNzdmOWIxMzc0NjIyMDQ5OWY", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-02-14T23:42:39Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-02-20T10:32:44Z"}, "message": "Parse AltPattern\n\nRenamed Parser::parse_pattern to Parser::parse_pattern_no_alt and created\nnew method Parser::parse_pattern to handle alternate patterns.\n\ngcc/rust/ChangeLog:\n\n\t* parse/rust-parse-impl.h\n\t(Parser::parse_pattern): Add.\n\t(Parser::parse_pattern_no_alt): Rename.\n\t* parse/rust-parse.h:\n\t(Parser::parse_pattern): Add.\n\t(Parser::parse_pattern_no_alt): Rename.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/pattern-or.rs: New test.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "e31787ad4c4e6be614c02e1b766ea8fcadc9bfa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e31787ad4c4e6be614c02e1b766ea8fcadc9bfa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15ca76ea868ccb9dbb0bd1a77f9b13746220499f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ca76ea868ccb9dbb0bd1a77f9b13746220499f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ca76ea868ccb9dbb0bd1a77f9b13746220499f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ca76ea868ccb9dbb0bd1a77f9b13746220499f/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e23e7f14a51d93d87516c92efedc67f742a1213f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23e7f14a51d93d87516c92efedc67f742a1213f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23e7f14a51d93d87516c92efedc67f742a1213f"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "4c39284749d19c802a26d301a9c2fcae13e8a232", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ca76ea868ccb9dbb0bd1a77f9b13746220499f/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ca76ea868ccb9dbb0bd1a77f9b13746220499f/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=15ca76ea868ccb9dbb0bd1a77f9b13746220499f", "patch": "@@ -10619,10 +10619,41 @@ Parser<ManagedTokenSource>::parse_range_pattern_bound ()\n     }\n }\n \n-// Parses a pattern (will further disambiguate any pattern).\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::Pattern>\n Parser<ManagedTokenSource>::parse_pattern ()\n+{\n+  Location start_locus = lexer.peek_token ()->get_locus ();\n+\n+  /* skip optional starting pipe */\n+  maybe_skip_token (PIPE);\n+\n+  auto first = parse_pattern_no_alt ();\n+\n+  if (lexer.peek_token ()->get_id () != PIPE)\n+    /* no alternates */\n+    return first;\n+\n+  std::vector<std::unique_ptr<AST::Pattern>> alts;\n+  alts.push_back (std::move (first));\n+\n+  do\n+    {\n+      lexer.skip_token ();\n+      alts.push_back (parse_pattern_no_alt ());\n+    }\n+  while (lexer.peek_token ()->get_id () == PIPE);\n+\n+  /* alternates */\n+  return std::unique_ptr<AST::Pattern> (\n+    new AST::AltPattern (std::move (alts), start_locus));\n+}\n+\n+// Parses a pattern without alternates ('|')\n+// (will further disambiguate any pattern).\n+template <typename ManagedTokenSource>\n+std::unique_ptr<AST::Pattern>\n+Parser<ManagedTokenSource>::parse_pattern_no_alt ()\n {\n   const_TokenPtr t = lexer.peek_token ();\n   switch (t->get_id ())"}, {"sha": "54a87c946f993fad7c5b47c4fba1db84ebf88dfb", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ca76ea868ccb9dbb0bd1a77f9b13746220499f/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ca76ea868ccb9dbb0bd1a77f9b13746220499f/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=15ca76ea868ccb9dbb0bd1a77f9b13746220499f", "patch": "@@ -126,6 +126,7 @@ template <typename ManagedTokenSource> class Parser\n \n   std::unique_ptr<AST::Item> parse_item (bool called_from_statement);\n   std::unique_ptr<AST::Pattern> parse_pattern ();\n+  std::unique_ptr<AST::Pattern> parse_pattern_no_alt ();\n \n   /**\n    * Parse a statement"}, {"sha": "054b43f050465a228e4f9bf79a989e8d24eb00bc", "filename": "gcc/testsuite/rust/compile/pattern-or.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ca76ea868ccb9dbb0bd1a77f9b13746220499f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpattern-or.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ca76ea868ccb9dbb0bd1a77f9b13746220499f/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpattern-or.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpattern-or.rs?ref=15ca76ea868ccb9dbb0bd1a77f9b13746220499f", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-fsyntax-only\" }\n+\n+fn main() {\n+    match ((12, 13)) {\n+        (_, 5) | (12, _) => {}\n+    }\n+}"}]}