{"sha": "91f1c208261de87fb75bba8124474feba91dd91b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmMWMyMDgyNjFkZTg3ZmI3NWJiYTgxMjQ0NzRmZWJhOTFkZDkxYg==", "commit": {"author": {"name": "Adam Butcher", "email": "adam@jessamine.co.uk", "date": "2013-11-12T20:17:44Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2013-11-12T20:17:44Z"}, "message": "Support implicit parameter packs.\n\n\t* pt.c (convert_generic_types_to_packs): New function to transform\n\ta range of implicitly introduced non-pack template parms to be parameter\n\tpacks.\n\t* cp-tree.h (convert_generic_types_to_packs): Declare.\n\t* parser.c (cp_parser_parameter_declaration_list): If a function\n\tparameter pack contains generic types, convert them to packs prior to\n\tgrokdeclarator.\n\nFrom-SVN: r204715", "tree": {"sha": "87f7a8f525ae28a29777c7a6bfc9ad0639e235df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87f7a8f525ae28a29777c7a6bfc9ad0639e235df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91f1c208261de87fb75bba8124474feba91dd91b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f1c208261de87fb75bba8124474feba91dd91b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f1c208261de87fb75bba8124474feba91dd91b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f1c208261de87fb75bba8124474feba91dd91b/comments", "author": {"login": "abutcher-gh", "id": 10379705, "node_id": "MDQ6VXNlcjEwMzc5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/10379705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abutcher-gh", "html_url": "https://github.com/abutcher-gh", "followers_url": "https://api.github.com/users/abutcher-gh/followers", "following_url": "https://api.github.com/users/abutcher-gh/following{/other_user}", "gists_url": "https://api.github.com/users/abutcher-gh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abutcher-gh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abutcher-gh/subscriptions", "organizations_url": "https://api.github.com/users/abutcher-gh/orgs", "repos_url": "https://api.github.com/users/abutcher-gh/repos", "events_url": "https://api.github.com/users/abutcher-gh/events{/privacy}", "received_events_url": "https://api.github.com/users/abutcher-gh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0dca5025f02ad920b12cede50c7968768decee19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dca5025f02ad920b12cede50c7968768decee19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dca5025f02ad920b12cede50c7968768decee19"}], "stats": {"total": 99, "additions": 92, "deletions": 7}, "files": [{"sha": "c85345eb270c4d55dc358d518cb0988f58150e8a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f1c208261de87fb75bba8124474feba91dd91b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f1c208261de87fb75bba8124474feba91dd91b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=91f1c208261de87fb75bba8124474feba91dd91b", "patch": "@@ -1,3 +1,13 @@\n+2013-11-12  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\t* pt.c (convert_generic_types_to_packs): New function to transform\n+\ta range of implicitly introduced non-pack template parms to be parameter\n+\tpacks.\n+\t* cp-tree.h (convert_generic_types_to_packs): Declare.\n+\t* parser.c (cp_parser_parameter_declaration_list): If a function\n+\tparameter pack contains generic types, convert them to packs prior to\n+\tgrokdeclarator.\n+\n 2013-11-12  Adam Butcher  <adam@jessamine.co.uk>\n \n \tPR c++/58534"}, {"sha": "e30922ab43aed5ffa03b5cd4e5156b6bb8a6f033", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f1c208261de87fb75bba8124474feba91dd91b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f1c208261de87fb75bba8124474feba91dd91b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=91f1c208261de87fb75bba8124474feba91dd91b", "patch": "@@ -5469,6 +5469,7 @@ extern tree type_uses_auto\t\t\t(tree);\n extern tree type_uses_auto_or_concept\t\t(tree);\n extern void append_type_to_template_for_access_check (tree, tree, tree,\n \t\t\t\t\t\t      location_t);\n+extern tree convert_generic_types_to_packs\t(tree, int, int);\n extern tree splice_late_return_type\t\t(tree, tree);\n extern bool is_auto\t\t\t\t(const_tree);\n extern bool is_auto_or_concept\t\t\t(const_tree);"}, {"sha": "eaad8e44aa79719dd1b6c6588b464ae182f8e852", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f1c208261de87fb75bba8124474feba91dd91b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f1c208261de87fb75bba8124474feba91dd91b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=91f1c208261de87fb75bba8124474feba91dd91b", "patch": "@@ -18112,7 +18112,7 @@ static tree\n cp_parser_parameter_declaration_list (cp_parser* parser, bool *is_error)\n {\n   tree parameters = NULL_TREE;\n-  tree *tail = &parameters; \n+  tree *tail = &parameters;\n   bool saved_in_unbraced_linkage_specification_p;\n   int index = 0;\n \n@@ -18121,7 +18121,7 @@ cp_parser_parameter_declaration_list (cp_parser* parser, bool *is_error)\n   /* The special considerations that apply to a function within an\n      unbraced linkage specifications do not apply to the parameters\n      to the function.  */\n-  saved_in_unbraced_linkage_specification_p \n+  saved_in_unbraced_linkage_specification_p\n     = parser->in_unbraced_linkage_specification_p;\n   parser->in_unbraced_linkage_specification_p = false;\n \n@@ -18131,6 +18131,10 @@ cp_parser_parameter_declaration_list (cp_parser* parser, bool *is_error)\n       cp_parameter_declarator *parameter;\n       tree decl = error_mark_node;\n       bool parenthesized_p = false;\n+      int template_parm_idx = (parser->num_template_parameter_lists?\n+\t\t\t       TREE_VEC_LENGTH (INNERMOST_TEMPLATE_PARMS\n+\t\t\t\t\t\t(current_template_parms)) : 0);\n+\n       /* Parse the parameter.  */\n       parameter\n \t= cp_parser_parameter_declaration (parser,\n@@ -18142,11 +18146,29 @@ cp_parser_parameter_declaration_list (cp_parser* parser, bool *is_error)\n       deprecated_state = DEPRECATED_SUPPRESS;\n \n       if (parameter)\n-\tdecl = grokdeclarator (parameter->declarator,\n-\t\t\t       &parameter->decl_specifiers,\n-\t\t\t       PARM,\n-\t\t\t       parameter->default_argument != NULL_TREE,\n-\t\t\t       &parameter->decl_specifiers.attributes);\n+\t{\n+\t  /* If a function parameter pack was specified and an implicit template\n+\t     parameter was introduced during cp_parser_parameter_declaration,\n+\t     change any implicit parameters introduced into packs.  */\n+\t  if (parser->implicit_template_parms\n+\t      && parameter->declarator\n+\t      && parameter->declarator->parameter_pack_p)\n+\t    {\n+\t      int latest_template_parm_idx = TREE_VEC_LENGTH\n+\t\t(INNERMOST_TEMPLATE_PARMS (current_template_parms));\n+\n+\t      if (latest_template_parm_idx != template_parm_idx)\n+\t\tparameter->decl_specifiers.type = convert_generic_types_to_packs\n+\t\t  (parameter->decl_specifiers.type,\n+\t\t   template_parm_idx, latest_template_parm_idx);\n+\t    }\n+\n+\t  decl = grokdeclarator (parameter->declarator,\n+\t\t\t\t &parameter->decl_specifiers,\n+\t\t\t\t PARM,\n+\t\t\t\t parameter->default_argument != NULL_TREE,\n+\t\t\t\t &parameter->decl_specifiers.attributes);\n+\t}\n \n       deprecated_state = DEPRECATED_NORMAL;\n "}, {"sha": "57a9769aecc070b17a12f3e6b4b0d27935a33c66", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f1c208261de87fb75bba8124474feba91dd91b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f1c208261de87fb75bba8124474feba91dd91b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=91f1c208261de87fb75bba8124474feba91dd91b", "patch": "@@ -21630,6 +21630,58 @@ append_type_to_template_for_access_check (tree templ,\n \t\t\t\t\t      scope, location);\n }\n \n+/* Convert the generic type parameters in PARM that match the types given in the\n+   range [START_IDX, END_IDX) from the current_template_parms into generic type\n+   packs.  */\n+\n+tree\n+convert_generic_types_to_packs (tree parm, int start_idx, int end_idx)\n+{\n+  tree current = current_template_parms;\n+  int depth = TMPL_PARMS_DEPTH (current);\n+  current = INNERMOST_TEMPLATE_PARMS (current);\n+  tree replacement = make_tree_vec (TREE_VEC_LENGTH (current));\n+\n+  for (int i = 0; i < start_idx; ++i)\n+    TREE_VEC_ELT (replacement, i)\n+      = TREE_TYPE (TREE_VALUE (TREE_VEC_ELT (current, i)));\n+\n+  for (int i = start_idx; i < end_idx; ++i)\n+    {\n+      /* Create a distinct parameter pack type from the current parm and add it\n+\t to the replacement args to tsubst below into the generic function\n+\t parameter.  */\n+\n+      tree o = TREE_TYPE (TREE_VALUE\n+\t\t\t  (TREE_VEC_ELT (current, i)));\n+      tree t = copy_type (o);\n+      TEMPLATE_TYPE_PARM_INDEX (t)\n+\t= reduce_template_parm_level (TEMPLATE_TYPE_PARM_INDEX (o),\n+\t\t\t\t      o, 0, 0, tf_none);\n+      TREE_TYPE (TEMPLATE_TYPE_DECL (t)) = t;\n+      TYPE_STUB_DECL (t) = TYPE_NAME (t) = TEMPLATE_TYPE_DECL (t);\n+      TYPE_MAIN_VARIANT (t) = t;\n+      TEMPLATE_TYPE_PARAMETER_PACK (t) = true;\n+      TYPE_CANONICAL (t) = canonical_type_parameter (t);\n+      TREE_VEC_ELT (replacement, i) = t;\n+      TREE_VALUE (TREE_VEC_ELT (current, i)) = TREE_CHAIN (t);\n+    }\n+\n+  for (int i = end_idx, e = TREE_VEC_LENGTH (current); i < e; ++i)\n+    TREE_VEC_ELT (replacement, i)\n+      = TREE_TYPE (TREE_VALUE (TREE_VEC_ELT (current, i)));\n+\n+  /* If there are more levels then build up the replacement with the outer\n+     template parms.  */\n+  if (depth > 1)\n+    replacement = add_to_template_args (template_parms_to_args\n+\t\t\t\t\t(TREE_CHAIN (current_template_parms)),\n+\t\t\t\t\treplacement);\n+\n+  return tsubst (parm, replacement, tf_none, NULL_TREE);\n+}\n+\n+\n /* Set up the hash tables for template instantiations.  */\n \n void"}]}