{"sha": "9212fcb872ad255a1c69d5e362a4ae7bdff70d05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIxMmZjYjg3MmFkMjU1YTFjNjlkNWUzNjJhNGFlN2JkZmY3MGQwNQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2012-06-26T00:14:00Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2012-06-26T00:14:00Z"}, "message": "Add C++11 isms to tr2/dynamic_bitset and tr2/bool_set.\n\nFrom-SVN: r188967", "tree": {"sha": "41f573118fced76d5a63129158358ebbb455ddf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41f573118fced76d5a63129158358ebbb455ddf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9212fcb872ad255a1c69d5e362a4ae7bdff70d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9212fcb872ad255a1c69d5e362a4ae7bdff70d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9212fcb872ad255a1c69d5e362a4ae7bdff70d05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9212fcb872ad255a1c69d5e362a4ae7bdff70d05/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0aba86007d5955e21d7e5df342486bc776247688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aba86007d5955e21d7e5df342486bc776247688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aba86007d5955e21d7e5df342486bc776247688"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "78ba408ad019753ed79b2606ee6175d14523f4a0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9212fcb872ad255a1c69d5e362a4ae7bdff70d05/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9212fcb872ad255a1c69d5e362a4ae7bdff70d05/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9212fcb872ad255a1c69d5e362a4ae7bdff70d05", "patch": "@@ -1,3 +1,13 @@\n+2012-06-25  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/tr2/bool_set (count, size, num_blocks, empty, max_size):\n+\tAdd noexcept.\n+\n+2012-06-25  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/tr2/dynamic_bitset (count, size, num_blocks, empty, max_size):\n+\tAdd noexcept.\n+\n 2012-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/doxygen/user.cfg.in: Change COMPACT_LATEX to NO."}, {"sha": "61fd1c83e9689e00457cb5d4437b31bf104cc937", "filename": "libstdc++-v3/include/tr2/bool_set", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9212fcb872ad255a1c69d5e362a4ae7bdff70d05/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9212fcb872ad255a1c69d5e362a4ae7bdff70d05/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fbool_set?ref=9212fcb872ad255a1c69d5e362a4ae7bdff70d05", "patch": "@@ -1,6 +1,6 @@\n // TR2 <bool_set> -*- C++ -*-\n \n-// Copyright (C) 2009, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -56,10 +56,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   public:\n \n     ///  Default constructor.\n-    bool_set() : _M_b(_S_false) { }\n+    constexpr bool_set() : _M_b(_S_false) { }\n \n     ///  Constructor from bool.\n-    bool_set(bool __t) : _M_b(_Bool_set_val(__t)) { }\n+    constexpr bool_set(bool __t) : _M_b(_Bool_set_val(__t)) { }\n \n     // I'm not sure about this.\n     bool contains(bool_set __b) const"}, {"sha": "5ca56470bd2e14c0f3d76cbfb8afec21661fb4ae", "filename": "libstdc++-v3/include/tr2/dynamic_bitset", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9212fcb872ad255a1c69d5e362a4ae7bdff70d05/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9212fcb872ad255a1c69d5e362a4ae7bdff70d05/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset?ref=9212fcb872ad255a1c69d5e362a4ae7bdff70d05", "patch": "@@ -1,6 +1,6 @@\n // TR2 <dynamic_bitset> -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -146,19 +146,19 @@ public:\n       { return this->_M_w.get_allocator(); }\n \n       static size_type\n-      _S_whichword(size_type __pos)\n+      _S_whichword(size_type __pos) noexcept\n       { return __pos / _S_bits_per_block; }\n \n       static size_type\n-      _S_whichbyte(size_type __pos)\n+      _S_whichbyte(size_type __pos) noexcept\n       { return (__pos % _S_bits_per_block) / __CHAR_BIT__; }\n \n       static size_type\n-      _S_whichbit(size_type __pos)\n+      _S_whichbit(size_type __pos) noexcept\n       { return __pos % _S_bits_per_block; }\n \n       static block_type\n-      _S_maskbit(size_type __pos)\n+      _S_maskbit(size_type __pos) noexcept\n       { return (static_cast<block_type>(1)) << _S_whichbit(__pos); }\n \n       block_type&\n@@ -333,7 +333,7 @@ public:\n       }\n \n       size_type\n-      _M_size() const\n+      _M_size() const noexcept\n       { return this->_M_w.size(); }\n \n       unsigned long\n@@ -1141,28 +1141,29 @@ public:\n \n       /// Returns the number of bits which are set.\n       size_type\n-      count() const\n+      count() const noexcept\n       { return this->_M_do_count(); }\n \n       /// Returns the total number of bits.\n       size_type\n-      size() const\n+      size() const noexcept\n       { return this->_M_Nb; }\n \n       /// Returns the total number of blocks.\n-      size_type num_blocks() const\n+      size_type\n+      num_blocks() const noexcept\n       { return this->_M_size(); }\n \n       /// Returns true if the dynamic_bitset is empty.\n       bool\n-      empty() const\n+      empty() const noexcept\n       { return (this->_M_Nb == 0); }\n \n       /// Returns the maximum size of a dynamic_bitset object having the same\n       /// type as *this.\n       /// The real answer is max() * bits_per_block but is likely to overflow.\n-      /*constexpr*/ size_type\n-      max_size() const\n+      constexpr size_type\n+      max_size() noexcept\n       { return std::numeric_limits<block_type>::max(); }\n \n       /**"}]}