{"sha": "d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDllNzRkZmNjMWY1NGEyYjM0ZmExMjQ2OGNjM2NhODg0MDU4YTZmMQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2008-09-18T08:29:48Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2008-09-18T08:29:48Z"}, "message": "re PR middle-end/37499 (Scheduling pass 2 time increases by order of magnitude)\n\n2008-09-18  Alexander Monakov  <amonakov@ispras.ru>\n\n\tPR middle-end/37499\n\t* sched-int.h (struct _haifa_insn_data): Remove unused field\n\tref_count.\n\n\t* sched-rgn.c (ref_counts): Remove.\n\t(insn_referenced): New static variable.\n\t(INSN_REF_COUNT): Remove.\n\t(sched_run_compute_dependencies): Use insn_referenced instead of\n\tINSN_REF_COUNT.\n\t(add_branch_dependences): Likewise.  Delete dead assignment.\n\nFrom-SVN: r140445", "tree": {"sha": "7176ffac7109e0d7fc1623733fb00dfdd7a7b73c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7176ffac7109e0d7fc1623733fb00dfdd7a7b73c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "078a70a15ed75e2e9ed4c4d09450b2522e82e6ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078a70a15ed75e2e9ed4c4d09450b2522e82e6ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/078a70a15ed75e2e9ed4c4d09450b2522e82e6ae"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "1091895eb167c2a6911958237a2478f729dc8f75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1", "patch": "@@ -1,3 +1,16 @@\n+2008-09-18  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR middle-end/37499\n+\t* sched-int.h (struct _haifa_insn_data): Remove unused field\n+\tref_count.\n+\n+\t* sched-rgn.c (ref_counts): Remove.\n+\t(insn_referenced): New static variable.\n+\t(INSN_REF_COUNT): Remove.\n+\t(sched_run_compute_dependencies): Use insn_referenced instead of\n+\tINSN_REF_COUNT.\n+\t(add_branch_dependences): Likewise.  Delete dead assignment.\n+\n 2008-09-17  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* haifa-sched.c (dep_cost_1): Recognize the producer even if the"}, {"sha": "e332c61f458a944e4f24f9cbc75c9945bc228566", "filename": "gcc/sched-int.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1", "patch": "@@ -678,9 +678,6 @@ struct _haifa_insn_data\n   /* A priority for each insn.  */\n   int priority;\n \n-  /* Number of instructions referring to this insn.  */\n-  int ref_count;\n-\n   /* The minimum clock tick at which the insn becomes ready.  This is\n      used to note timing constraints for the insns in the pending list.  */\n   int tick;"}, {"sha": "004064ecf420b8bbf137d1f9919d91735c7f3983", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=d9e74dfcc1f54a2b34fa12468cc3ca884058a6f1", "patch": "@@ -2395,9 +2395,9 @@ sets_likely_spilled_1 (rtx x, const_rtx pat, void *data)\n     *ret = true;\n }\n \n-/* An array used to hold the number of dependencies in which insn \n-   participates.  Used in add_branch_dependences.  */\n-static int *ref_counts;\n+/* A bitmap to note insns that participate in any dependency.  Used in\n+   add_branch_dependences.  */\n+static sbitmap insn_referenced;\n \n /* Add dependences so that branches are scheduled to run last in their\n    block.  */\n@@ -2424,8 +2424,6 @@ add_branch_dependences (rtx head, rtx tail)\n      are not moved before reload because we can wind up with register\n      allocation failures.  */\n \n-#define INSN_REF_COUNT(INSN) (ref_counts[INSN_UID (INSN)])\n-\n   insn = tail;\n   last = 0;\n   while (CALL_P (insn)\n@@ -2448,7 +2446,7 @@ add_branch_dependences (rtx head, rtx tail)\n \t    {\n \t      if (! sched_insns_conditions_mutex_p (last, insn))\n \t\tadd_dependence (last, insn, REG_DEP_ANTI);\n-\t      INSN_REF_COUNT (insn)++;\n+\t      SET_BIT (insn_referenced, INSN_LUID (insn));\n \t    }\n \n \t  CANT_MOVE (insn) = 1;\n@@ -2470,12 +2468,11 @@ add_branch_dependences (rtx head, rtx tail)\n       {\n \tinsn = prev_nonnote_insn (insn);\n \n-\tif (INSN_REF_COUNT (insn) != 0)\n+\tif (TEST_BIT (insn_referenced, INSN_LUID (insn)))\n \t  continue;\n \n \tif (! sched_insns_conditions_mutex_p (last, insn))\n \t  add_dependence (last, insn, REG_DEP_ANTI);\n-\tINSN_REF_COUNT (insn) = 1;\n       }\n \n #ifdef HAVE_conditional_execution\n@@ -3086,14 +3083,15 @@ sched_rgn_compute_dependencies (int rgn)\n       for (bb = 0; bb < current_nr_blocks; bb++)\n \tinit_deps (bb_deps + bb);\n \n-      /* Initialize array used in add_branch_dependencies ().  */\n-      ref_counts = XCNEWVEC (int, get_max_uid () + 1);\n+      /* Initialize bitmap used in add_branch_dependences.  */\n+      insn_referenced = sbitmap_alloc (sched_max_luid);\n+      sbitmap_zero (insn_referenced);\n       \n       /* Compute backward dependencies.  */\n       for (bb = 0; bb < current_nr_blocks; bb++)\n \tcompute_block_dependences (bb);\n       \n-      free (ref_counts);\n+      sbitmap_free (insn_referenced);\n       free_pending_lists ();\n       finish_deps_global ();\n       free (bb_deps);"}]}