{"sha": "2626fc495bb50774416896f898914977a5071d29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYyNmZjNDk1YmI1MDc3NDQxNjg5NmY4OTg5MTQ5NzdhNTA3MWQyOQ==", "commit": {"author": {"name": "Adam Butcher", "email": "adam@jessamine.co.uk", "date": "2014-06-26T05:12:52Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2014-06-26T05:12:52Z"}, "message": "re PR c++/61537 (template parameter lists wrongly detected on \"struct\" or \"class\" keyword on parameters)\n\nFix PR c++/61537\n\n\t* parser.c (cp_parser_elaborated_type_specifier): Only consider template\n\tparameter lists outside of function parameter scope.\n\n\t* g++.dg/template/pr61537.C: New testcase.\n\nFrom-SVN: r212008", "tree": {"sha": "d6a20d454077d68e7f6edbdfae331e152a9a9cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6a20d454077d68e7f6edbdfae331e152a9a9cad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2626fc495bb50774416896f898914977a5071d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2626fc495bb50774416896f898914977a5071d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2626fc495bb50774416896f898914977a5071d29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2626fc495bb50774416896f898914977a5071d29/comments", "author": {"login": "abutcher-gh", "id": 10379705, "node_id": "MDQ6VXNlcjEwMzc5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/10379705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abutcher-gh", "html_url": "https://github.com/abutcher-gh", "followers_url": "https://api.github.com/users/abutcher-gh/followers", "following_url": "https://api.github.com/users/abutcher-gh/following{/other_user}", "gists_url": "https://api.github.com/users/abutcher-gh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abutcher-gh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abutcher-gh/subscriptions", "organizations_url": "https://api.github.com/users/abutcher-gh/orgs", "repos_url": "https://api.github.com/users/abutcher-gh/repos", "events_url": "https://api.github.com/users/abutcher-gh/events{/privacy}", "received_events_url": "https://api.github.com/users/abutcher-gh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9b5f43367ced552bdd92808fa3a38cb55cb2fd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "124f4d6e30bd98304b5e07de01ea991a3f88635d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2626fc495bb50774416896f898914977a5071d29/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2626fc495bb50774416896f898914977a5071d29/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2626fc495bb50774416896f898914977a5071d29", "patch": "@@ -1,3 +1,9 @@\n+2014-06-26  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\tPR c++/61537\n+\t* parser.c (cp_parser_elaborated_type_specifier): Only consider template\n+\tparameter lists outside of function parameter scope.\n+\n 2014-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tDR 178"}, {"sha": "c440c9937bab9c3fcb017dfd5484f2a4d5cf5350", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2626fc495bb50774416896f898914977a5071d29/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2626fc495bb50774416896f898914977a5071d29/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2626fc495bb50774416896f898914977a5071d29", "patch": "@@ -15081,6 +15081,18 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \treturn cp_parser_make_typename_type (parser, parser->scope,\n \t\t\t\t\t     identifier,\n \t\t\t\t\t     token->location);\n+\n+      /* Template parameter lists apply only if we are not within a\n+\t function parameter list.  */\n+      bool template_parm_lists_apply\n+\t  = parser->num_template_parameter_lists;\n+      if (template_parm_lists_apply)\n+\tfor (cp_binding_level *s = current_binding_level;\n+\t     s && s->kind != sk_template_parms;\n+\t     s = s->level_chain)\n+\t  if (s->kind == sk_function_parms)\n+\t    template_parm_lists_apply = false;\n+\n       /* Look up a qualified name in the usual way.  */\n       if (parser->scope)\n \t{\n@@ -15123,7 +15135,7 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \n \t  decl = (cp_parser_maybe_treat_template_as_class\n \t\t  (decl, /*tag_name_p=*/is_friend\n-\t\t\t && parser->num_template_parameter_lists));\n+\t\t\t && template_parm_lists_apply));\n \n \t  if (TREE_CODE (decl) != TYPE_DECL)\n \t    {\n@@ -15136,9 +15148,9 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \n \t  if (TREE_CODE (TREE_TYPE (decl)) != TYPENAME_TYPE)\n             {\n-              bool allow_template = (parser->num_template_parameter_lists\n-\t\t                      || DECL_SELF_REFERENCE_P (decl));\n-              type = check_elaborated_type_specifier (tag_type, decl, \n+              bool allow_template = (template_parm_lists_apply\n+\t\t                     || DECL_SELF_REFERENCE_P (decl));\n+              type = check_elaborated_type_specifier (tag_type, decl,\n                                                       allow_template);\n \n               if (type == error_mark_node)\n@@ -15224,15 +15236,16 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \t    ts = ts_global;\n \n \t  template_p =\n-\t    (parser->num_template_parameter_lists\n+\t    (template_parm_lists_apply\n \t     && (cp_parser_next_token_starts_class_definition_p (parser)\n \t\t || cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON)));\n \t  /* An unqualified name was used to reference this type, so\n \t     there were no qualifying templates.  */\n-\t  if (!cp_parser_check_template_parameters (parser,\n-\t\t\t\t\t\t    /*num_templates=*/0,\n-\t\t\t\t\t\t    token->location,\n-\t\t\t\t\t\t    /*declarator=*/NULL))\n+\t  if (template_parm_lists_apply\n+\t      && !cp_parser_check_template_parameters (parser,\n+\t\t\t\t\t\t       /*num_templates=*/0,\n+\t\t\t\t\t\t       token->location,\n+\t\t\t\t\t\t       /*declarator=*/NULL))\n \t    return error_mark_node;\n \t  type = xref_tag (tag_type, identifier, ts, template_p);\n \t}"}, {"sha": "d10b03b3924b98a87b7aaab7eea62365e07d70c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2626fc495bb50774416896f898914977a5071d29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2626fc495bb50774416896f898914977a5071d29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2626fc495bb50774416896f898914977a5071d29", "patch": "@@ -1,3 +1,8 @@\n+2014-06-26  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\tPR c++/61537\n+\t* g++.dg/template/pr61537.C: New testcase.\n+\n 2014-06-25  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gfortran.dg/default_format_denormal_2.f90:  Remove xfail for"}, {"sha": "12aaf58ef6218f38b9d00956ffb3cd327149d0c7", "filename": "gcc/testsuite/g++.dg/template/pr61537.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2626fc495bb50774416896f898914977a5071d29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr61537.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2626fc495bb50774416896f898914977a5071d29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr61537.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr61537.C?ref=2626fc495bb50774416896f898914977a5071d29", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/61537\n+// { dg-do compile }\n+\n+struct A {};\n+\n+template <typename T>\n+struct B\n+{\n+  template <typename U>\n+  void f(U, struct A);\n+};\n+\n+template <typename T>\n+template <typename U>\n+void B<T>::f(U, struct A)\n+{\n+}\n+\n+int main()\n+{\n+  B<char> b;\n+  b.f(42, A());\n+}"}]}