{"sha": "eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVmNTk3M2RmNGRiYjliZTdmYjEyYmY2YWRhNTdjMTFjOWFiY2IyYg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-06-09T09:46:55Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-06-09T09:46:55Z"}, "message": "arm.c (thumb2_reorg): New function.\n\n\t* config/arm/arm.c (thumb2_reorg): New function.\n\t(arm_reorg): Call it.\n\t* config/arm/thumb2.md (define_peephole2 for flag clobbering\n\tarithmetic operations): Delete.\n\nFrom-SVN: r160458", "tree": {"sha": "432c04f91d1cc2d399f1b933b938f7a770b0972b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/432c04f91d1cc2d399f1b933b938f7a770b0972b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b/comments", "author": null, "committer": null, "parents": [{"sha": "dbd34b899f1ec8facc25649349cda3ffe482b3bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbd34b899f1ec8facc25649349cda3ffe482b3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbd34b899f1ec8facc25649349cda3ffe482b3bf"}], "stats": {"total": 88, "additions": 65, "deletions": 23}, "files": [{"sha": "86b202914dd4188315375b916ff0a75fe380e458", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b", "patch": "@@ -1,3 +1,10 @@\n+2010-06-09  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* config/arm/arm.c (thumb2_reorg): New function.\n+\t(arm_reorg): Call it.\n+\t* config/arm/thumb2.md (define_peephole2 for flag clobbering\n+\tarithmetic operations): Delete.\n+\n 2010-06-09  Edmar Wienskoski  <edmar@freescale.com>\n \n \tPR target/44067"}, {"sha": "e66b4b87442b3e26dfb9ab35b34923a8b8cb1eae", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b", "patch": "@@ -11421,6 +11421,61 @@ note_invalid_constants (rtx insn, HOST_WIDE_INT address, int do_pushes)\n   return result;\n }\n \n+/* Convert instructions to their cc-clobbering variant if possible, since\n+   that allows us to use smaller encodings.  */\n+\n+static void\n+thumb2_reorg (void)\n+{\n+  basic_block bb;\n+  regset_head live;\n+\n+  INIT_REG_SET (&live);\n+\n+  /* We are freeing block_for_insn in the toplev to keep compatibility\n+     with old MDEP_REORGS that are not CFG based.  Recompute it now.  */\n+  compute_bb_for_insn ();\n+  df_analyze ();\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      rtx insn;\n+      COPY_REG_SET (&live, DF_LR_OUT (bb));\n+      df_simulate_initialize_backwards (bb, &live);\n+      FOR_BB_INSNS_REVERSE (bb, insn)\n+\t{\n+\t  if (NONJUMP_INSN_P (insn)\n+\t      && !REGNO_REG_SET_P (&live, CC_REGNUM))\n+\t    {\n+\t      rtx pat = PATTERN (insn);\n+\t      if (GET_CODE (pat) == SET\n+\t\t  && low_register_operand (XEXP (pat, 0), SImode)\n+\t\t  && thumb_16bit_operator (XEXP (pat, 1), SImode)\n+\t\t  && low_register_operand (XEXP (XEXP (pat, 1), 0), SImode)\n+\t\t  && low_register_operand (XEXP (XEXP (pat, 1), 1), SImode))\n+\t\t{\n+\t\t  rtx dst = XEXP (pat, 0);\n+\t\t  rtx src = XEXP (pat, 1);\n+\t\t  rtx op0 = XEXP (src, 0);\n+\t\t  rtx op1 = XEXP (src, 1);\n+\t\t  if (rtx_equal_p (dst, op0)\n+\t\t      || GET_CODE (src) == PLUS || GET_CODE (src) == MINUS)\n+\t\t    {\n+\t\t      rtx ccreg = gen_rtx_REG (CCmode, CC_REGNUM);\n+\t\t      rtx clobber = gen_rtx_CLOBBER (VOIDmode, ccreg);\n+\t\t      rtx vec = gen_rtvec (2, pat, clobber);\n+\t\t      PATTERN (insn) = gen_rtx_PARALLEL (VOIDmode, vec);\n+\t\t      INSN_CODE (insn) = -1;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  if (NONDEBUG_INSN_P (insn))\n+\t    df_simulate_one_insn_backwards (bb, insn, &live);\n+\t}\n+    }\n+  CLEAR_REG_SET (&live);\n+}\n+\n /* Gcc puts the pool in the wrong place for ARM, since we can only\n    load addresses a limited distance around the pc.  We do some\n    special munging to move the constant pool values to the correct\n@@ -11432,6 +11487,9 @@ arm_reorg (void)\n   HOST_WIDE_INT address = 0;\n   Mfix * fix;\n \n+  if (TARGET_THUMB2)\n+    thumb2_reorg ();\n+  \n   minipool_fix_head = minipool_fix_tail = NULL;\n \n   /* The first insn must always be a note, or the code below won't"}, {"sha": "76a3b9811d8615b731b27557986b1a7e507f9aea", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=eef5973df4dbb9be7fb12bf6ada57c11c9abcb2b", "patch": "@@ -1082,29 +1082,6 @@\n   }\"\n )\n \n-;; Peepholes and insns for 16-bit flag clobbering instructions.\n-;; The conditional forms of these instructions do not clobber CC.\n-;; However by the time peepholes are run it is probably too late to do\n-;; anything useful with this information.\n-(define_peephole2\n-  [(set (match_operand:SI          0 \"low_register_operand\" \"\")\n-        (match_operator:SI 3 \"thumb_16bit_operator\"\n-\t [(match_operand:SI 1  \"low_register_operand\" \"\")\n-\t  (match_operand:SI 2 \"low_register_operand\" \"\")]))]\n-  \"TARGET_THUMB2\n-   && (rtx_equal_p(operands[0], operands[1])\n-       || GET_CODE(operands[3]) == PLUS\n-       || GET_CODE(operands[3]) == MINUS)\n-   && peep2_regno_dead_p(0, CC_REGNUM)\"\n-  [(parallel\n-    [(set (match_dup 0)\n-\t  (match_op_dup 3\n-\t   [(match_dup 1)\n-\t    (match_dup 2)]))\n-     (clobber (reg:CC CC_REGNUM))])]\n-  \"\"\n-)\n-\n (define_insn \"*thumb2_alusi3_short\"\n   [(set (match_operand:SI          0 \"s_register_operand\" \"=l\")\n         (match_operator:SI 3 \"thumb_16bit_operator\""}]}