{"sha": "267318a2857a42922c3ca033dac4690172b17683", "node_id": "C_kwDOANBUbNoAKDI2NzMxOGEyODU3YTQyOTIyYzNjYTAzM2RhYzQ2OTAxNzJiMTc2ODM", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-10T21:42:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-15T07:30:26Z"}, "message": "c++: constexpr virtual and vbase thunk\n\nC++20 allows virtual functions to be constexpr.  I don't think that calling\nthrough a pointer to a vbase subobject is supposed to work in a constant\nexpression, since an object with virtual bases can't be constant, but the\ncall shouldn't ICE.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (cxx_eval_thunk_call): Error instead of ICE\n\ton vbase thunk to constexpr function.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/constexpr-virtual20.C: New test.", "tree": {"sha": "4ea96e675ff964d102e803ef0466151b09c5dd73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ea96e675ff964d102e803ef0466151b09c5dd73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/267318a2857a42922c3ca033dac4690172b17683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267318a2857a42922c3ca033dac4690172b17683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267318a2857a42922c3ca033dac4690172b17683", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267318a2857a42922c3ca033dac4690172b17683/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adcfd2c45c3523d74279b5fcac1d7c6c34dd1382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcfd2c45c3523d74279b5fcac1d7c6c34dd1382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adcfd2c45c3523d74279b5fcac1d7c6c34dd1382"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "7c27131f5063d5ec53c9191ebaca0547532eca93", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267318a2857a42922c3ca033dac4690172b17683/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267318a2857a42922c3ca033dac4690172b17683/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=267318a2857a42922c3ca033dac4690172b17683", "patch": "@@ -2246,15 +2246,20 @@ cxx_eval_thunk_call (const constexpr_ctx *ctx, tree t, tree thunk_fndecl,\n {\n   tree function = THUNK_TARGET (thunk_fndecl);\n \n-  /* virtual_offset is only set in the presence of virtual bases, which make\n-     the class non-literal, so we don't need to handle it here.  */\n   if (THUNK_VIRTUAL_OFFSET (thunk_fndecl))\n     {\n-      gcc_assert (!DECL_DECLARED_CONSTEXPR_P (function));\n       if (!ctx->quiet)\n \t{\n-\t  error (\"call to non-%<constexpr%> function %qD\", function);\n-\t  explain_invalid_constexpr_fn (function);\n+\t  if (!DECL_DECLARED_CONSTEXPR_P (function))\n+\t    {\n+\t      error (\"call to non-%<constexpr%> function %qD\", function);\n+\t      explain_invalid_constexpr_fn (function);\n+\t    }\n+\t  else\n+\t    /* virtual_offset is only set for virtual bases, which make the\n+\t       class non-literal, so we don't need to handle it here.  */\n+\t    error (\"calling constexpr member function %qD through virtual \"\n+\t\t   \"base subobject\", function);\n \t}\n       *non_constant_p = true;\n       return t;"}, {"sha": "3c411fa3fcca066dd2f3d3387afdf472245703f9", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual20.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267318a2857a42922c3ca033dac4690172b17683/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267318a2857a42922c3ca033dac4690172b17683/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual20.C?ref=267318a2857a42922c3ca033dac4690172b17683", "patch": "@@ -0,0 +1,22 @@\n+// Test for constexpr call through vbase thunk.\n+// { dg-do compile { target c++20 } }\n+\n+class Rep {\n+public:\n+  constexpr virtual int foo() { return 1; }\n+};\n+\n+class VBase {\n+public:\n+  constexpr virtual int foo() { return 2; }\n+};\n+\n+class Main : public Rep, virtual public VBase {\n+public:\n+  constexpr virtual int foo() { return 5; }\n+};\n+\n+int main() {\n+  Main m;\n+  static_assert(static_cast<VBase*>(&m)->foo() == 5); // { dg-error \"\" }\n+}"}]}