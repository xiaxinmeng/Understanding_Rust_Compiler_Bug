{"sha": "84019f237c3ec98ccd3bd7044f45d7b8e412a334", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQwMTlmMjM3YzNlYzk4Y2NkM2JkNzA0NGY0NWQ3YjhlNDEyYTMzNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-06-15T03:40:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-06-15T03:40:42Z"}, "message": "re PR c++/27648 (ICE on attribute on pointers in static_cast)\n\n\tPR c++/26748\n\t* parser.c (cp_parser_declarator): Robustify.\n\tPR c++/26748\n\t* g++.dg/ext/attrib22.C: New test.\n\nFrom-SVN: r114667", "tree": {"sha": "647d15523e803e7975f50c20452c01c4ed2d27aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/647d15523e803e7975f50c20452c01c4ed2d27aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84019f237c3ec98ccd3bd7044f45d7b8e412a334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84019f237c3ec98ccd3bd7044f45d7b8e412a334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84019f237c3ec98ccd3bd7044f45d7b8e412a334", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84019f237c3ec98ccd3bd7044f45d7b8e412a334/comments", "author": null, "committer": null, "parents": [{"sha": "070809e38c1ac0d2232a084f4d87a08fe0c7c34d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070809e38c1ac0d2232a084f4d87a08fe0c7c34d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070809e38c1ac0d2232a084f4d87a08fe0c7c34d"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "be561f9bbc85a096f8f7728abd7dbf0224f671c3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84019f237c3ec98ccd3bd7044f45d7b8e412a334/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84019f237c3ec98ccd3bd7044f45d7b8e412a334/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=84019f237c3ec98ccd3bd7044f45d7b8e412a334", "patch": "@@ -1,5 +1,8 @@\n 2006-06-14  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/26748\n+\t* parser.c (cp_parser_declarator): Robustify.\n+\n \tPR c++/26559\n \t* pt.c (tsubst_expr): Use finish_omp_atomic.\n \t(value_dependent_expression_p): All CALL_EXPRs are dependent."}, {"sha": "df175fa21ae2af585039fed0d0a1f3c9fcecad74", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84019f237c3ec98ccd3bd7044f45d7b8e412a334/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84019f237c3ec98ccd3bd7044f45d7b8e412a334/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=84019f237c3ec98ccd3bd7044f45d7b8e412a334", "patch": "@@ -3374,12 +3374,12 @@ cp_parser_unqualified_id (cp_parser* parser,\n \tqualifying_scope = parser->qualifying_scope;\n \n \t/* If the name is of the form \"X::~X\" it's OK.  */\n+\ttoken = cp_lexer_peek_token (parser->lexer);\n \tif (scope && TYPE_P (scope)\n-\t    && cp_lexer_next_token_is (parser->lexer, CPP_NAME)\n+\t    && token->type == CPP_NAME\n \t    && (cp_lexer_peek_nth_token (parser->lexer, 2)->type\n \t\t== CPP_OPEN_PAREN)\n-\t    && (cp_lexer_peek_token (parser->lexer)->value\n-\t\t== TYPE_IDENTIFIER (scope)))\n+\t    && constructor_name_p (token->value, scope))\n \t  {\n \t    cp_lexer_consume_token (parser->lexer);\n \t    return build_nt (BIT_NOT_EXPR, scope);\n@@ -3550,20 +3550,6 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n   cp_token_position start = 0;\n   cp_token *token;\n \n-  /* If the next token corresponds to a nested name specifier, there\n-     is no need to reparse it.  However, if CHECK_DEPENDENCY_P is\n-     false, it may have been true before, in which case something\n-     like `A<X>::B<Y>::C' may have resulted in a nested-name-specifier\n-     of `A<X>::', where it should now be `A<X>::B<Y>::'.  So, when\n-     CHECK_DEPENDENCY_P is false, we have to fall through into the\n-     main loop.  */\n-  if (check_dependency_p\n-      && cp_lexer_next_token_is (parser->lexer, CPP_NESTED_NAME_SPECIFIER))\n-    {\n-      cp_parser_pre_parsed_nested_name_specifier (parser);\n-      return parser->scope;\n-    }\n-\n   /* Remember where the nested-name-specifier starts.  */\n   if (cp_parser_uncommitted_to_tentative_parse_p (parser))\n     {\n@@ -3663,6 +3649,8 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t     class-or-namespace-name.  */\n \t  parser->scope = old_scope;\n \t  parser->qualifying_scope = saved_qualifying_scope;\n+\t  if (cp_parser_uncommitted_to_tentative_parse_p (parser))\n+\t    break;\n \t  /* If the next token is an identifier, and the one after\n \t     that is a `::', then any valid interpretation would have\n \t     found a class-or-namespace-name.  */\n@@ -8797,10 +8785,19 @@ cp_parser_template_id (cp_parser *parser,\n     template_id = build_min_nt (TEMPLATE_ID_EXPR, template, arguments);\n   else if (DECL_CLASS_TEMPLATE_P (template)\n \t   || DECL_TEMPLATE_TEMPLATE_PARM_P (template))\n-    template_id\n-      = finish_template_type (template, arguments,\n-\t\t\t      cp_lexer_next_token_is (parser->lexer,\n-\t\t\t\t\t\t      CPP_SCOPE));\n+    {\n+      bool entering_scope;\n+      /* In \"template <typename T> ... A<T>::\", A<T> is the abstract A\n+\t template (rather than some instantiation thereof) only if\n+\t is not nested within some other construct.  For example, in\n+\t \"template <typename T> void f(T) { A<T>::\", A<T> is just an\n+\t instantiation of A.  */\n+      entering_scope = (template_parm_scope_p ()\n+\t\t\t&& cp_lexer_next_token_is (parser->lexer,\n+\t\t\t\t\t\t   CPP_SCOPE));\n+      template_id\n+\t= finish_template_type (template, arguments, entering_scope);\n+    }\n   else\n     {\n       /* If it's not a class-template or a template-template, it should be\n@@ -11283,7 +11280,7 @@ cp_parser_declarator (cp_parser* parser,\n \t\t\t\t\t\tmember_p);\n     }\n \n-  if (attributes && declarator != cp_error_declarator)\n+  if (attributes && declarator && declarator != cp_error_declarator)\n     declarator->attributes = attributes;\n \n   return declarator;"}, {"sha": "7565051541e91b891301f8f8825350d792377bb4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84019f237c3ec98ccd3bd7044f45d7b8e412a334/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84019f237c3ec98ccd3bd7044f45d7b8e412a334/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84019f237c3ec98ccd3bd7044f45d7b8e412a334", "patch": "@@ -1,5 +1,8 @@\n 2006-06-14  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/26748\n+\t* g++.dg/ext/attrib22.C: New test.\n+\n \tPR c++/26559\n \t* g++.dg/template/builtin1.C: New test.\n \t* g++.dg/gomp/tpl-atomic-2.C: Remove XFAIL."}, {"sha": "5304a35d177cfcb60475ed009958c0a44e31556f", "filename": "gcc/testsuite/g++.dg/ext/attrib22.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84019f237c3ec98ccd3bd7044f45d7b8e412a334/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84019f237c3ec98ccd3bd7044f45d7b8e412a334/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib22.C?ref=84019f237c3ec98ccd3bd7044f45d7b8e412a334", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/27648\n+\n+void f()\n+{\n+  static_cast<float *__attribute((unused))>(0); // { dg-error \"expected\" }\n+}"}]}