{"sha": "f1665f5cd2038bf95e34e9ea577bd553c69b3563", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2NjVmNWNkMjAzOGJmOTVlMzRlOWVhNTc3YmQ1NTNjNjliMzU2Mw==", "commit": {"author": {"name": "Doug Kwan", "email": "dougkwan@google.com", "date": "2010-04-16T20:31:39Z"}, "committer": {"name": "Doug Kwan", "email": "dougkwan@gcc.gnu.org", "date": "2010-04-16T20:31:39Z"}, "message": "tree-ssa-reassoc.c (struct operand_entry): Add new field ID.\n\n2010-04-16  Doug Kwan  <dougkwan@google.com>\n\n\t* tree-ssa-reassoc.c (struct operand_entry): Add new field ID.\n\t(next_operand_entry_id): New static variable.\n\t(sort_by_operand_rank): Stabilize qsort comparator by using unique IDs.\n\t(add_to_ops_vec): Assigned unique ID to operand entry.\n \t(struct oecount_s): New field ID.\n\t(oecount_cmp): Stabilize qsort comparotor by using unique IDs.\n\t(undistribute_ops_list): Assign unique IDs to oecounts.\n\t(init_reassoc): reset next_operand_entry_id.\n\nFrom-SVN: r158449", "tree": {"sha": "2df4319ed01e11e966033a4a74ff1be247cfbf1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2df4319ed01e11e966033a4a74ff1be247cfbf1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1665f5cd2038bf95e34e9ea577bd553c69b3563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1665f5cd2038bf95e34e9ea577bd553c69b3563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1665f5cd2038bf95e34e9ea577bd553c69b3563", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1665f5cd2038bf95e34e9ea577bd553c69b3563/comments", "author": {"login": "dougkwan", "id": 1399231, "node_id": "MDQ6VXNlcjEzOTkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1399231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dougkwan", "html_url": "https://github.com/dougkwan", "followers_url": "https://api.github.com/users/dougkwan/followers", "following_url": "https://api.github.com/users/dougkwan/following{/other_user}", "gists_url": "https://api.github.com/users/dougkwan/gists{/gist_id}", "starred_url": "https://api.github.com/users/dougkwan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dougkwan/subscriptions", "organizations_url": "https://api.github.com/users/dougkwan/orgs", "repos_url": "https://api.github.com/users/dougkwan/repos", "events_url": "https://api.github.com/users/dougkwan/events{/privacy}", "received_events_url": "https://api.github.com/users/dougkwan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f638261aeaa8d895ccbe3adbe4016b11f4ddead7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f638261aeaa8d895ccbe3adbe4016b11f4ddead7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f638261aeaa8d895ccbe3adbe4016b11f4ddead7"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "66f0a9ed5dc8b43fe217ddfaa65d95a98c942520", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1665f5cd2038bf95e34e9ea577bd553c69b3563/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1665f5cd2038bf95e34e9ea577bd553c69b3563/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1665f5cd2038bf95e34e9ea577bd553c69b3563", "patch": "@@ -1,3 +1,14 @@\n+2010-04-16  Doug Kwan  <dougkwan@google.com>\n+\n+\t* tree-ssa-reassoc.c (struct operand_entry): Add new field ID.\n+\t(next_operand_entry_id): New static variable.\n+\t(sort_by_operand_rank): Stabilize qsort comparator by using unique IDs.\n+\t(add_to_ops_vec): Assigned unique ID to operand entry.\n+ \t(struct oecount_s): New field ID.\n+\t(oecount_cmp): Stabilize qsort comparotor by using unique IDs.\n+\t(undistribute_ops_list): Assign unique IDs to oecounts.\n+\t(init_reassoc): reset next_operand_entry_id.\n+\n 2010-04-16  Doug Kwan  <dougkwan@google.com>\n \n \t* config/i386/i386.md (*jcc_bt<mode>): Fix build breakage by adding"}, {"sha": "8d1c05c86e1eb20b58855cbbee7a9c2642cb2db3", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1665f5cd2038bf95e34e9ea577bd553c69b3563/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1665f5cd2038bf95e34e9ea577bd553c69b3563/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=f1665f5cd2038bf95e34e9ea577bd553c69b3563", "patch": "@@ -172,11 +172,15 @@ static struct\n typedef struct operand_entry\n {\n   unsigned int rank;\n+  int id;\n   tree op;\n } *operand_entry_t;\n \n static alloc_pool operand_entry_pool;\n \n+/* This is used to assign a unique ID to each struct operand_entry\n+   so that qsort results are identical on different hosts.  */\n+static int next_operand_entry_id;\n \n /* Starting rank number for a given basic block, so that we can rank\n    operations using unmovable instructions in that BB based on the bb\n@@ -328,16 +332,31 @@ sort_by_operand_rank (const void *pa, const void *pb)\n      to fold when added/multiplied//whatever are put next to each\n      other.  Since all constants have rank 0, order them by type.  */\n   if (oeb->rank == 0 &&  oea->rank == 0)\n-    return constant_type (oeb->op) - constant_type (oea->op);\n+    {\n+      if (constant_type (oeb->op) != constant_type (oea->op))\n+\treturn constant_type (oeb->op) - constant_type (oea->op);\n+      else\n+\t/* To make sorting result stable, we use unique IDs to determine\n+\t   order.  */\n+        return oeb->id - oea->id;\n+    }\n \n   /* Lastly, make sure the versions that are the same go next to each\n      other.  We use SSA_NAME_VERSION because it's stable.  */\n   if ((oeb->rank - oea->rank == 0)\n       && TREE_CODE (oea->op) == SSA_NAME\n       && TREE_CODE (oeb->op) == SSA_NAME)\n-    return SSA_NAME_VERSION (oeb->op) - SSA_NAME_VERSION (oea->op);\n+    {\n+      if (SSA_NAME_VERSION (oeb->op) != SSA_NAME_VERSION (oea->op))\n+\treturn SSA_NAME_VERSION (oeb->op) - SSA_NAME_VERSION (oea->op);\n+      else\n+\treturn oeb->id - oea->id;\n+    }\n \n-  return oeb->rank - oea->rank;\n+  if (oeb->rank != oea->rank)\n+    return oeb->rank - oea->rank;\n+  else\n+    return oeb->id - oea->id;\n }\n \n /* Add an operand entry to *OPS for the tree operand OP.  */\n@@ -349,6 +368,7 @@ add_to_ops_vec (VEC(operand_entry_t, heap) **ops, tree op)\n \n   oe->op = op;\n   oe->rank = get_rank (op);\n+  oe->id = next_operand_entry_id++;\n   VEC_safe_push (operand_entry_t, heap, *ops, oe);\n }\n \n@@ -740,6 +760,7 @@ static void linearize_expr_tree (VEC(operand_entry_t, heap) **, gimple,\n /* Structure for tracking and counting operands.  */\n typedef struct oecount_s {\n   int cnt;\n+  int id;\n   enum tree_code oecode;\n   tree op;\n } oecount;\n@@ -777,7 +798,11 @@ oecount_cmp (const void *p1, const void *p2)\n {\n   const oecount *c1 = (const oecount *)p1;\n   const oecount *c2 = (const oecount *)p2;\n-  return c1->cnt - c2->cnt;\n+  if (c1->cnt != c2->cnt)\n+    return c1->cnt - c2->cnt;\n+  else\n+    /* If counts are identical, use unique IDs to stabilize qsort.  */\n+    return c1->id - c2->id;\n }\n \n /* Walks the linear chain with result *DEF searching for an operation\n@@ -959,6 +984,7 @@ undistribute_ops_list (enum tree_code opcode,\n   VEC (operand_entry_t, heap) **subops;\n   htab_t ctable;\n   bool changed = false;\n+  int next_oecount_id = 0;\n \n   if (length <= 1\n       || opcode != PLUS_EXPR)\n@@ -1026,6 +1052,7 @@ undistribute_ops_list (enum tree_code opcode,\n \t  size_t idx;\n \t  c.oecode = oecode;\n \t  c.cnt = 1;\n+\t  c.id = next_oecount_id++;\n \t  c.op = oe1->op;\n \t  VEC_safe_push (oecount, heap, cvec, &c);\n \t  idx = VEC_length (oecount, cvec) + 41;\n@@ -2020,6 +2047,7 @@ init_reassoc (void)\n \n   operand_entry_pool = create_alloc_pool (\"operand entry pool\",\n \t\t\t\t\t  sizeof (struct operand_entry), 30);\n+  next_operand_entry_id = 0;\n \n   /* Reverse RPO (Reverse Post Order) will give us something where\n      deeper loops come later.  */"}]}