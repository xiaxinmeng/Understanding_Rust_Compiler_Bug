{"sha": "fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI0MzQ3ZTQ0ZDNlMWJmOTk3MGYzNjFjZjhiMjVjMGI3ZjVkMWQ5Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-25T17:34:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-25T17:34:44Z"}, "message": "Give an error if a label is defined but not used.\n\nFrom-SVN: r171518", "tree": {"sha": "3e134efcdf6722d478bdcd0566d6a9352a6ffda4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e134efcdf6722d478bdcd0566d6a9352a6ffda4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/comments", "author": null, "committer": null, "parents": [{"sha": "de5ca9cf7844aa190768c5f0cb31f2f4d912f9dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de5ca9cf7844aa190768c5f0cb31f2f4d912f9dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de5ca9cf7844aa190768c5f0cb31f2f4d912f9dd"}], "stats": {"total": 240, "additions": 168, "deletions": 72}, "files": [{"sha": "be308035b58d5ee6d360e3f184cf0550b6658772", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -1463,6 +1463,7 @@ class Check_types_traverse : public Traverse\n   Check_types_traverse(Gogo* gogo)\n     : Traverse(traverse_variables\n \t       | traverse_constants\n+\t       | traverse_functions\n \t       | traverse_statements\n \t       | traverse_expressions),\n       gogo_(gogo)\n@@ -1474,6 +1475,9 @@ class Check_types_traverse : public Traverse\n   int\n   constant(Named_object*, bool);\n \n+  int\n+  function(Named_object*);\n+\n   int\n   statement(Block*, size_t* pindex, Statement*);\n \n@@ -1542,6 +1546,16 @@ Check_types_traverse::constant(Named_object* named_object, bool)\n   return TRAVERSE_CONTINUE;\n }\n \n+// There are no types to check in a function, but this is where we\n+// issue warnings about labels which are defined but not referenced.\n+\n+int\n+Check_types_traverse::function(Named_object* no)\n+{\n+  no->func_value()->check_labels();\n+  return TRAVERSE_CONTINUE;\n+}\n+\n // Check that types are valid in a statement.\n \n int\n@@ -2744,7 +2758,7 @@ Function::add_label_definition(const std::string& label_name,\n \t}\n       else\n \t{\n-\t  error_at(location, \"redefinition of label %qs\",\n+\t  error_at(location, \"label %qs already defined\",\n \t\t   Gogo::message_name(label_name).c_str());\n \t  inform(label->location(), \"previous definition of %qs was here\",\n \t\t Gogo::message_name(label_name).c_str());\n@@ -2764,17 +2778,36 @@ Function::add_label_reference(const std::string& label_name)\n   if (!ins.second)\n     {\n       // The label was already in the hash table.\n-      return ins.first->second;\n+      Label* label = ins.first->second;\n+      label->set_is_used();\n+      return label;\n     }\n   else\n     {\n       gcc_assert(ins.first->second == NULL);\n       Label* label = new Label(label_name);\n       ins.first->second = label;\n+      label->set_is_used();\n       return label;\n     }\n }\n \n+// Warn about labels that are defined but not used.\n+\n+void\n+Function::check_labels() const\n+{\n+  for (Labels::const_iterator p = this->labels_.begin();\n+       p != this->labels_.end();\n+       p++)\n+    {\n+      Label* label = p->second;\n+      if (!label->is_used())\n+\terror_at(label->location(), \"label %qs defined and not used\",\n+\t\t Gogo::message_name(label->name()).c_str());\n+    }\n+}\n+\n // Swap one function with another.  This is used when building the\n // thunk we use to call a function which calls recover.  It may not\n // work for any other case."}, {"sha": "365860d36ce369824978434623fd4d47765ff922", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -882,6 +882,10 @@ class Function\n   Label*\n   add_label_reference(const std::string& label_name);\n \n+  // Warn about labels that are defined but not used.\n+  void\n+  check_labels() const;\n+\n   // Whether this function calls the predeclared recover function.\n   bool\n   calls_recover() const\n@@ -2090,7 +2094,7 @@ class Label\n {\n  public:\n   Label(const std::string& name)\n-    : name_(name), location_(0), decl_(NULL)\n+    : name_(name), location_(0), is_used_(false), decl_(NULL)\n   { }\n \n   // Return the label's name.\n@@ -2103,6 +2107,16 @@ class Label\n   is_defined() const\n   { return this->location_ != 0; }\n \n+  // Return whether the label has been used.\n+  bool\n+  is_used() const\n+  { return this->is_used_; }\n+\n+  // Record that the label is used.\n+  void\n+  set_is_used()\n+  { this->is_used_ = true; }\n+\n   // Return the location of the definition.\n   source_location\n   location() const\n@@ -2130,6 +2144,8 @@ class Label\n   // The location of the definition.  This is 0 if the label has not\n   // yet been defined.\n   source_location location_;\n+  // Whether the label has been used.\n+  bool is_used_;\n   // The LABEL_DECL.\n   tree decl_;\n };"}, {"sha": "cdee68ad6c21879d3397c297244f9fc3643feeb8", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -3112,7 +3112,7 @@ Parse::unary_expr(bool may_be_sink, bool may_be_composite_lit,\n // LABEL is the label of this statement if it has one.\n \n void\n-Parse::statement(const Label* label)\n+Parse::statement(Label* label)\n {\n   const Token* token = this->peek_token();\n   switch (token->classification())\n@@ -3288,6 +3288,10 @@ Parse::labeled_stmt(const std::string& label_name, source_location location)\n \n   if (!this->statement_may_start_here())\n     {\n+      // Mark the label as used to avoid a useless error about an\n+      // unused label.\n+      label->set_is_used();\n+\n       error_at(location, \"missing statement after label\");\n       this->unget_token(Token::make_operator_token(OPERATOR_SEMICOLON,\n \t\t\t\t\t\t   location));\n@@ -3774,7 +3778,7 @@ Parse::if_stat()\n // TypeSwitchGuard = [ identifier \":=\" ] Expression \".\" \"(\" \"type\" \")\" .\n \n void\n-Parse::switch_stat(const Label* label)\n+Parse::switch_stat(Label* label)\n {\n   gcc_assert(this->peek_token()->is_keyword(KEYWORD_SWITCH));\n   source_location location = this->location();\n@@ -3873,7 +3877,7 @@ Parse::switch_stat(const Label* label)\n //   \"{\" { ExprCaseClause } \"}\"\n \n Statement*\n-Parse::expr_switch_body(const Label* label, Expression* switch_val,\n+Parse::expr_switch_body(Label* label, Expression* switch_val,\n \t\t\tsource_location location)\n {\n   Switch_statement* statement = Statement::make_switch_statement(switch_val,\n@@ -3983,7 +3987,7 @@ Parse::expr_switch_case(bool* is_default)\n //   \"{\" { TypeCaseClause } \"}\" .\n \n Statement*\n-Parse::type_switch_body(const Label* label, const Type_switch& type_switch,\n+Parse::type_switch_body(Label* label, const Type_switch& type_switch,\n \t\t\tsource_location location)\n {\n   Named_object* switch_no = NULL;\n@@ -4127,7 +4131,7 @@ Parse::type_switch_case(std::vector<Type*>* types, bool* is_default)\n // SelectStat = \"select\" \"{\" { CommClause } \"}\" .\n \n void\n-Parse::select_stat(const Label* label)\n+Parse::select_stat(Label* label)\n {\n   gcc_assert(this->peek_token()->is_keyword(KEYWORD_SELECT));\n   source_location location = this->location();\n@@ -4435,7 +4439,7 @@ Parse::send_or_recv_stmt(bool* is_send, Expression** channel, Expression** val,\n // Condition = Expression .\n \n void\n-Parse::for_stat(const Label* label)\n+Parse::for_stat(Label* label)\n {\n   gcc_assert(this->peek_token()->is_keyword(KEYWORD_FOR));\n   source_location location = this->location();\n@@ -4654,7 +4658,7 @@ Parse::range_clause_expr(const Expression_list* vals,\n // Push a statement on the break stack.\n \n void\n-Parse::push_break_statement(Statement* enclosing, const Label* label)\n+Parse::push_break_statement(Statement* enclosing, Label* label)\n {\n   if (this->break_stack_ == NULL)\n     this->break_stack_ = new Bc_stack();\n@@ -4664,7 +4668,7 @@ Parse::push_break_statement(Statement* enclosing, const Label* label)\n // Push a statement on the continue stack.\n \n void\n-Parse::push_continue_statement(Statement* enclosing, const Label* label)\n+Parse::push_continue_statement(Statement* enclosing, Label* label)\n {\n   if (this->continue_stack_ == NULL)\n     this->continue_stack_ = new Bc_stack();\n@@ -4697,8 +4701,13 @@ Parse::find_bc_statement(const Bc_stack* bc_stack, const std::string& label)\n   for (Bc_stack::const_reverse_iterator p = bc_stack->rbegin();\n        p != bc_stack->rend();\n        ++p)\n-    if (p->second != NULL && p->second->name() == label)\n-      return p->first;\n+    {\n+      if (p->second != NULL && p->second->name() == label)\n+\t{\n+\t  p->second->set_is_used();\n+\t  return p->first;\n+\t}\n+    }\n   return NULL;\n }\n \n@@ -4728,9 +4737,11 @@ Parse::break_stat()\n \t\t\t\t\t  token->identifier());\n       if (enclosing == NULL)\n \t{\n-\t  error_at(token->location(),\n-\t\t   (\"break label %qs not associated with \"\n-\t\t    \"for or switch or select\"),\n+\t  // If there is a label with this name, mark it as used to\n+\t  // avoid a useless error about an unused label.\n+\t  this->gogo_->add_label_reference(token->identifier());\n+\n+\t  error_at(token->location(), \"invalid break label %qs\",\n \t\t   Gogo::message_name(token->identifier()).c_str());\n \t  this->advance_token();\n \t  return;\n@@ -4781,8 +4792,11 @@ Parse::continue_stat()\n \t\t\t\t\t  token->identifier());\n       if (enclosing == NULL)\n \t{\n-\t  error_at(token->location(),\n-\t\t   \"continue label %qs not associated with for\",\n+\t  // If there is a label with this name, mark it as used to\n+\t  // avoid a useless error about an unused label.\n+\t  this->gogo_->add_label_reference(token->identifier());\n+\n+\t  error_at(token->location(), \"invalid continue label %qs\",\n \t\t   Gogo::message_name(token->identifier()).c_str());\n \t  this->advance_token();\n \t  return;"}, {"sha": "a9f6455a6f1ca202d9ff7879d5c0a81f2c6d247e", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -150,7 +150,7 @@ class Parse\n   // For break and continue we keep a stack of statements with\n   // associated labels (if any).  The top of the stack is used for a\n   // break or continue statement with no label.\n-  typedef std::vector<std::pair<Statement*, const Label*> > Bc_stack;\n+  typedef std::vector<std::pair<Statement*, Label*> > Bc_stack;\n \n   // Parser nonterminals.\n   void identifier_list(Typed_identifier_list*);\n@@ -220,7 +220,7 @@ class Parse\n \t\t\t bool* is_type_switch);\n   Expression* qualified_expr(Expression*, source_location);\n   Expression* id_to_expression(const std::string&, source_location);\n-  void statement(const Label*);\n+  void statement(Label*);\n   bool statement_may_start_here();\n   void labeled_stmt(const std::string&, source_location);\n   Expression* simple_stat(bool, bool, Range_clause*, Type_switch*);\n@@ -236,26 +236,25 @@ class Parse\n   void go_or_defer_stat();\n   void return_stat();\n   void if_stat();\n-  void switch_stat(const Label*);\n-  Statement* expr_switch_body(const Label*, Expression*, source_location);\n+  void switch_stat(Label*);\n+  Statement* expr_switch_body(Label*, Expression*, source_location);\n   void expr_case_clause(Case_clauses*, bool* saw_default);\n   Expression_list* expr_switch_case(bool*);\n-  Statement* type_switch_body(const Label*, const Type_switch&,\n-\t\t\t      source_location);\n+  Statement* type_switch_body(Label*, const Type_switch&, source_location);\n   void type_case_clause(Named_object*, Type_case_clauses*, bool* saw_default);\n   void type_switch_case(std::vector<Type*>*, bool*);\n-  void select_stat(const Label*);\n+  void select_stat(Label*);\n   void comm_clause(Select_clauses*, bool* saw_default);\n   bool comm_case(bool*, Expression**, Expression**, Expression**,\n \t\t std::string*, std::string*, bool*);\n   bool send_or_recv_stmt(bool*, Expression**, Expression**, Expression**,\n \t\t\t std::string*, std::string*);\n-  void for_stat(const Label*);\n+  void for_stat(Label*);\n   void for_clause(Expression**, Block**);\n   void range_clause_decl(const Typed_identifier_list*, Range_clause*);\n   void range_clause_expr(const Expression_list*, Range_clause*);\n-  void push_break_statement(Statement*, const Label*);\n-  void push_continue_statement(Statement*, const Label*);\n+  void push_break_statement(Statement*, Label*);\n+  void push_continue_statement(Statement*, Label*);\n   void pop_break_statement();\n   void pop_continue_statement();\n   Statement* find_bc_statement(const Bc_stack*, const std::string&);"}, {"sha": "8617396109d0b6d1f501d613bed77e968f5fa82c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug055.go", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug055.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug055.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug055.go?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -7,16 +7,21 @@\n package main\n \n func main() {\n-\tvar i int;\n-\tvar j int;\n-\tif true {}\n-\t{ return }\n-\ti = 0;\n-\tif true {} else i++;\n-\ttype s struct {};\n-\ti = 0;\n-\ttype s2 int;\n-\tvar k = func (a int) int { return a+1 }(3);\n-\t_, _ = j, k;\n-ro: ;\n+\tvar i int\n+\tvar j int\n+\tif true {\n+\t}\n+\t{\n+\t\treturn\n+\t}\n+\ti = 0\n+\tif true {\n+\t} else {\n+\t\ti++\n+\t}\n+\ttype s struct{}\n+\ti = 0\n+\ttype s2 int\n+\tvar k = func(a int) int { return a + 1 }(3)\n+\t_, _ = j, k\n }"}, {"sha": "2ca518d76d8e16657344fdcccde860e0c554f7a6", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug076.go", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug076.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug076.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug076.go?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -1,4 +1,4 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n+// $G $D/$F.go && $L $F.$A\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -7,12 +7,16 @@\n package main\n \n func f() {\n-exit: ;\n+exit:\n+\t;\n+\tgoto exit\n }\n \n \n func main() {\n-exit: ; // this should be legal (labels not properly scoped?)\n+exit:\n+\t; // this should be legal (labels not properly scoped?)\n+\tgoto exit\n }\n \n /*"}, {"sha": "2cbf96d98fe8c70a71be8a123643bbd37a91a96c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug077.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug077.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug077.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug077.go?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -7,7 +7,8 @@\n package main\n \n func main() {\n-\tvar exit int;\n+\tvar exit int\n exit:\n-\t_ = exit;\n+\t_ = exit\n+\tgoto exit\n }"}, {"sha": "c2ede7153cee3de0d5dd0a00c490566a3cf7d89f", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug091.go", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug091.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug091.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug091.go?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -7,18 +7,19 @@\n package main\n \n func f1() {\n-\texit:\n-\t\tprint(\"hi\\n\");\n+exit:\n+\tprint(\"hi\\n\")\n+\tgoto exit\n }\n \n func f2() {\n-\tconst c = 1234;\n+\tconst c = 1234\n }\n \n func f3() {\n-\ti := c;\t// ERROR \"undef\"\n+\ti := c // ERROR \"undef\"\n }\n \n func main() {\n-\tf3();\n+\tf3()\n }"}, {"sha": "9d43f431be83164beba1a0e464f545a8278113cd", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug137.go", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug137.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug137.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug137.go?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -8,16 +8,21 @@ package main\n \n func main() {\n L1:\n-L2:\tfor i := 0; i < 10; i++ {\n-\t\tprint(i);\n-\t\tbreak L2;\n+L2:\n+\tfor i := 0; i < 10; i++ {\n+\t\tprint(i)\n+\t\tbreak L2\n \t}\n \n-L3: ;\n-L4:\tfor i := 0; i < 10; i++ {\n-\t\tprint(i);\n-\t\tbreak L4;\n+L3:\n+\t;\n+L4:\n+\tfor i := 0; i < 10; i++ {\n+\t\tprint(i)\n+\t\tbreak L4\n \t}\n+\tgoto L1\n+\tgoto L3\n }\n \n /*"}, {"sha": "e27b370e7604e1937637bda933469f73062852ce", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug140.go", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug140.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug140.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug140.go?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -7,8 +7,17 @@\n package main\n \n func main() {\n-\tif true {} else L1: ;\n-\tif true {} else L2: main() ;\n+\tif true {\n+\t} else {\n+\tL1:\n+\t}\n+\tif true {\n+\t} else {\n+\tL2:\n+\t\tmain()\n+\t}\n+\tgoto L1\n+\tgoto L2\n }\n \n /*"}, {"sha": "205961024411d2063d3112c97bbd172ed56f07e4", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug178.go", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug178.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug178.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug178.go?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -9,19 +9,25 @@ package main\n func main() {\n L:\n \tfor i := 0; i < 1; i++ {\n-L1:\n+\tL1:\n \t\tfor {\n-\t\t\tbreak L;\n+\t\t\tbreak L\n \t\t}\n-\t\tpanic(\"BUG: not reached - break\");\n+\t\tpanic(\"BUG: not reached - break\")\n \t}\n \n L2:\n \tfor i := 0; i < 1; i++ {\n-L3:\n+\tL3:\n \t\tfor {\n-\t\t\tcontinue L2;\n+\t\t\tcontinue L2\n \t\t}\n-\t\tpanic(\"BUG: not reached - continue\");\n+\t\tpanic(\"BUG: not reached - continue\")\n+\t}\n+\tif false {\n+\t\tgoto L1\n+\t}\n+\tif false {\n+\t\tgoto L3\n \t}\n }"}, {"sha": "3347613d8db0774609d271f7b8d0b4ce35dfa7c7", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug179.go", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug179.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug179.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug179.go?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -10,16 +10,18 @@ func main() {\n L:\n \tfor {\n \t\tfor {\n-\t\t\tbreak L2;\t// ERROR \"L2\"\n-\t\t\tcontinue L2;\t// ERROR \"L2\"\n+\t\t\tbreak L2    // ERROR \"L2\"\n+\t\t\tcontinue L2 // ERROR \"L2\"\n \t\t}\n \t}\n \n L1:\n-\tx := 1;\n-\t_ = x;\n+\tx := 1\n+\t_ = x\n \tfor {\n-\t\tbreak L1;\t// ERROR \"L1\"\n-\t\tcontinue L1;\t// ERROR \"L1\"\n+\t\tbreak L1    // ERROR \"L1\"\n+\t\tcontinue L1 // ERROR \"L1\"\n \t}\n+\n+\tgoto L\n }"}, {"sha": "348aed429e91c40ac33e5f9d043effd8b8b7092f", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug274.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug274.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug274.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug274.go?ref=fb4347e44d3e1bf9970f361cf8b25c0b7f5d1d9f", "patch": "@@ -24,6 +24,7 @@ func main() {\n \tcase 1:\n \t\tL1:  // ERROR \"statement\"\n \tdefault:\n-\t\tL2:  // correct since no semicolon is required before a '}'\n+\t\t     // correct since no semicolon is required before a '}'\n+\t\tL2:  // GCCGO_ERROR \"not used\"\n \t}\n }"}]}