{"sha": "5d52d2c949fe6277fd1f31be8d6f48e1dae06652", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1MmQyYzk0OWZlNjI3N2ZkMWYzMWJlOGQ2ZjQ4ZTFkYWUwNjY1Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-24T13:41:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-24T13:41:51Z"}, "message": "re PR debug/81936 (ICE in dwarf2out_die_ref_for_decl, at dwarf2out.c:5543)\n\n2017-08-24  Richard Biener  <rguenther@suse.de>\n\n\tPR debug/81936\n\t* dwarf2out.c (output_die): Handle flag_generate_offload like\n\tflag_generate_lto.\n\t(output_comp_unit): Likewise.\n\t(gen_array_type_die): Likewise.\n\t(dwarf2out_early_finish): Likewise.\n\t(note_variable_value_in_expr): Likewise.\n\t(dwarf2out_finish): Likewise.  Adjust assert.\n\t* cgraphunit.c (symbol_table::compile): Move setting of\n\tflag_generate_offload earlier ...\n\t(symbol_table::finalize_compilation_unit): ... here, before\n\tearly debug finalization.\n\nFrom-SVN: r251332", "tree": {"sha": "8e50adc3a6b6454612de0fd8e165e999f57aac98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e50adc3a6b6454612de0fd8e165e999f57aac98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d52d2c949fe6277fd1f31be8d6f48e1dae06652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d52d2c949fe6277fd1f31be8d6f48e1dae06652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d52d2c949fe6277fd1f31be8d6f48e1dae06652", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d52d2c949fe6277fd1f31be8d6f48e1dae06652/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6eb191429843d14d2eb3912aa4f23f236ce773b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb191429843d14d2eb3912aa4f23f236ce773b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb191429843d14d2eb3912aa4f23f236ce773b5"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "67261275be0bcf0be8ff33a95c133372f3c2154d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d52d2c949fe6277fd1f31be8d6f48e1dae06652/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d52d2c949fe6277fd1f31be8d6f48e1dae06652/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d52d2c949fe6277fd1f31be8d6f48e1dae06652", "patch": "@@ -1,3 +1,18 @@\n+2017-08-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/81936\n+\t* dwarf2out.c (output_die): Handle flag_generate_offload like\n+\tflag_generate_lto.\n+\t(output_comp_unit): Likewise.\n+\t(gen_array_type_die): Likewise.\n+\t(dwarf2out_early_finish): Likewise.\n+\t(note_variable_value_in_expr): Likewise.\n+\t(dwarf2out_finish): Likewise.  Adjust assert.\n+\t* cgraphunit.c (symbol_table::compile): Move setting of\n+\tflag_generate_offload earlier ...\n+\t(symbol_table::finalize_compilation_unit): ... here, before\n+\tearly debug finalization.\n+\n 2017-08-24  Richard Biener  <rguenther@suse.de>\n \n \t* config/i386/i386.c: Include symbol-summary.h, ipa-prop.h"}, {"sha": "a287f0dfd44357e3e55a4f226fa131c1324cbf56", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d52d2c949fe6277fd1f31be8d6f48e1dae06652/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d52d2c949fe6277fd1f31be8d6f48e1dae06652/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=5d52d2c949fe6277fd1f31be8d6f48e1dae06652", "patch": "@@ -2464,10 +2464,6 @@ symbol_table::compile (void)\n     fprintf (stderr, \"Performing interprocedural optimizations\\n\");\n   state = IPA;\n \n-  /* Offloading requires LTO infrastructure.  */\n-  if (!in_lto_p && g->have_offload)\n-    flag_generate_offload = 1;\n-\n   /* If LTO is enabled, initialize the streamer hooks needed by GIMPLE.  */\n   if (flag_generate_lto || flag_generate_offload)\n     lto_streamer_hooks_init ();\n@@ -2614,6 +2610,10 @@ symbol_table::finalize_compilation_unit (void)\n   /* Gimplify and lower thunks.  */\n   analyze_functions (/*first_time=*/false);\n \n+  /* Offloading requires LTO infrastructure.  */\n+  if (!in_lto_p && g->have_offload)\n+    flag_generate_offload = 1;\n+\n   if (!seen_error ())\n     {\n       /* Emit early debug for reachable functions, and by consequence,"}, {"sha": "a4887b572f2a803bbba6e1de5addf4052d95d3e0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d52d2c949fe6277fd1f31be8d6f48e1dae06652/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d52d2c949fe6277fd1f31be8d6f48e1dae06652/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5d52d2c949fe6277fd1f31be8d6f48e1dae06652", "patch": "@@ -9999,7 +9999,7 @@ output_die (dw_die_ref die)\n   if (! die->comdat_type_p && die->die_id.die_symbol\n       /* Don't output the symbol twice.  For LTO we want the label\n          on the section beginning, not on the actual DIE.  */\n-      && (!flag_generate_lto\n+      && ((!flag_generate_lto && !flag_generate_offload)\n \t  || die->die_tag != DW_TAG_compile_unit))\n     output_die_symbol (die);\n \n@@ -10450,7 +10450,7 @@ output_comp_unit (dw_die_ref die, int output_if_empty,\n \n   /* For LTO cross unit DIE refs we want a symbol on the start of the\n      debuginfo section, not on the CU DIE.  */\n-  if (flag_generate_lto && oldsym)\n+  if ((flag_generate_lto || flag_generate_offload) && oldsym)\n     {\n       /* ???  No way to get visibility assembled without a decl.  */\n       tree decl = build_decl (UNKNOWN_LOCATION, VAR_DECL,\n@@ -20843,7 +20843,7 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n \tadd_AT_unsigned (array_die, DW_AT_byte_size, size);\n       /* ???  We can't annotate types late, but for LTO we may not\n \t generate a location early either (gfortran.dg/save_6.f90).  */\n-      else if (! (early_dwarf && flag_generate_lto)\n+      else if (! (early_dwarf && (flag_generate_lto || flag_generate_offload))\n \t       && TYPE_DOMAIN (type) != NULL_TREE\n \t       && TYPE_MAX_VALUE (TYPE_DOMAIN (type)) != NULL_TREE)\n \t{\n@@ -29740,9 +29740,9 @@ dwarf2out_finish (const char *)\n \n   gen_remaining_tmpl_value_param_die_attribute ();\n \n-  if (flag_generate_lto)\n+  if (flag_generate_lto || flag_generate_offload)\n     {\n-      gcc_assert (flag_fat_lto_objects);\n+      gcc_assert (flag_fat_lto_objects || flag_generate_offload);\n \n       /* Prune stuff so that dwarf2out_finish runs successfully\n \t for the fat part of the object.  */\n@@ -30318,7 +30318,7 @@ note_variable_value_in_expr (dw_die_ref die, dw_loc_descr_ref loc)\n       {\n \ttree decl = loc->dw_loc_oprnd1.v.val_decl_ref;\n \tdw_die_ref ref = lookup_decl_die (decl);\n-\tif (! ref && flag_generate_lto)\n+\tif (! ref && (flag_generate_lto || flag_generate_offload))\n \t  {\n \t    /* ???  This is somewhat a hack because we do not create DIEs\n \t       for variables not in BLOCK trees early but when generating\n@@ -30529,7 +30529,7 @@ dwarf2out_early_finish (const char *filename)\n   early_dwarf_finished = true;\n \n   /* Do not generate DWARF assembler now when not producing LTO bytecode.  */\n-  if (!flag_generate_lto)\n+  if (!flag_generate_lto && !flag_generate_offload)\n     return;\n \n   /* Now as we are going to output for LTO initialize sections and labels"}]}