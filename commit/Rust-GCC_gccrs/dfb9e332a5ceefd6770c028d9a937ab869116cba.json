{"sha": "dfb9e332a5ceefd6770c028d9a937ab869116cba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiOWUzMzJhNWNlZWZkNjc3MGMwMjhkOWE5MzdhYjg2OTExNmNiYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-11-12T15:52:09Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-11-12T15:52:09Z"}, "message": "Allow asan at -O0\n\nThis patch defines a new asan pass gate that is activated at -O0, in\naddition to the pass that was initially activated at -O3 level The\npatch also does some comment cleanups here and there.\n\n\t* asan.c (build_check_stmt): Rename join_bb variable to else_bb.\n\t(gate_asan_O0): New function.\n\t(pass_asan_O0): New variable.\n\t* passes.c (init_optimization_passes): Add pass_asan_O0.\n\t* tree-pass.h (pass_asan_O0): New declaration.\n\nFrom-SVN: r193435", "tree": {"sha": "c34ed654dedeeb0a8cfcdcee8759a1b4a17bad5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c34ed654dedeeb0a8cfcdcee8759a1b4a17bad5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfb9e332a5ceefd6770c028d9a937ab869116cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb9e332a5ceefd6770c028d9a937ab869116cba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb9e332a5ceefd6770c028d9a937ab869116cba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb9e332a5ceefd6770c028d9a937ab869116cba/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6d984843095c520ceb89cf374c7a13bb6a06a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d984843095c520ceb89cf374c7a13bb6a06a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d984843095c520ceb89cf374c7a13bb6a06a99"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "5f6e41c81b2b56d86fbea369f0931aecc3977ccd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb9e332a5ceefd6770c028d9a937ab869116cba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb9e332a5ceefd6770c028d9a937ab869116cba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfb9e332a5ceefd6770c028d9a937ab869116cba", "patch": "@@ -1,3 +1,11 @@\n+2012-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* asan.c (build_check_stmt): Rename join_bb variable to else_bb.\n+\t(gate_asan_O0): New function.\n+\t(pass_asan_O0): New variable.\n+\t* passes.c (init_optimization_passes): Add pass_asan_O0.\n+\t* tree-pass.h (pass_asan_O0): New declaration.\n+\n 2012-11-12  Jakub Jelinek  <jakub@redhat.com>\n \t    Xinliang David Li  <davidxl@google.com>\n \t    Dodji Seketeli <dodji@redhat.com>"}, {"sha": "398b83775e6a3c36f8113858349c1719bac9d373", "filename": "gcc/asan.c", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb9e332a5ceefd6770c028d9a937ab869116cba/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb9e332a5ceefd6770c028d9a937ab869116cba/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=dfb9e332a5ceefd6770c028d9a937ab869116cba", "patch": "@@ -123,7 +123,7 @@ build_check_stmt (tree base,\n                   location_t location, bool is_store, int size_in_bytes)\n {\n   gimple_stmt_iterator gsi;\n-  basic_block cond_bb, then_bb, join_bb;\n+  basic_block cond_bb, then_bb, else_bb;\n   edge e;\n   tree t, base_addr, shadow;\n   gimple g;\n@@ -144,23 +144,23 @@ build_check_stmt (tree base,\n   else\n     e = split_block_after_labels (cond_bb);\n   cond_bb = e->src;\n-  join_bb = e->dest;\n+  else_bb = e->dest;\n \n-  /* A recap at this point: join_bb is the basic block at whose head\n+  /* A recap at this point: else_bb is the basic block at whose head\n      is the gimple statement for which this check expression is being\n      built.  cond_bb is the (possibly new, synthetic) basic block the\n      end of which will contain the cache-lookup code, and a\n      conditional that jumps to the cache-miss code or, much more\n-     likely, over to join_bb.  */\n+     likely, over to else_bb.  */\n \n   /* Create the bb that contains the crash block.  */\n   then_bb = create_empty_bb (cond_bb);\n   e = make_edge (cond_bb, then_bb, EDGE_TRUE_VALUE);\n   e->probability = PROB_VERY_UNLIKELY;\n-  make_single_succ_edge (then_bb, join_bb, EDGE_FALLTHRU);\n+  make_single_succ_edge (then_bb, else_bb, EDGE_FALLTHRU);\n \n-  /* Mark the pseudo-fallthrough edge from cond_bb to join_bb.  */\n-  e = find_edge (cond_bb, join_bb);\n+  /* Mark the pseudo-fallthrough edge from cond_bb to else_bb.  */\n+  e = find_edge (cond_bb, else_bb);\n   e->flags = EDGE_FALSE_VALUE;\n   e->count = cond_bb->count;\n   e->probability = PROB_ALWAYS - PROB_VERY_UNLIKELY;\n@@ -170,7 +170,7 @@ build_check_stmt (tree base,\n   if (dom_info_available_p (CDI_DOMINATORS))\n     {\n       set_immediate_dominator (CDI_DOMINATORS, then_bb, cond_bb);\n-      set_immediate_dominator (CDI_DOMINATORS, join_bb, cond_bb);\n+      set_immediate_dominator (CDI_DOMINATORS, else_bb, cond_bb);\n     }\n \n   base = unshare_expr (base);\n@@ -293,7 +293,7 @@ build_check_stmt (tree base,\n   gimple_set_location (g, location);\n   gsi_insert_after (&gsi, g, GSI_NEW_STMT);\n \n-  *iter = gsi_start_bb (join_bb);\n+  *iter = gsi_start_bb (else_bb);\n }\n \n /* If T represents a memory access, add instrumentation code before ITER.\n@@ -436,4 +436,31 @@ struct gimple_opt_pass pass_asan =\n  }\n };\n \n+static bool\n+gate_asan_O0 (void)\n+{\n+  return flag_asan != 0 && !optimize;\n+}\n+\n+struct gimple_opt_pass pass_asan_O0 =\n+{\n+ {\n+  GIMPLE_PASS,\n+  \"asan0\",\t\t\t\t/* name  */\n+  OPTGROUP_NONE,                        /* optinfo_flags */\n+  gate_asan_O0,\t\t\t\t/* gate  */\n+  asan_instrument,\t\t\t/* execute  */\n+  NULL,\t\t\t\t\t/* sub  */\n+  NULL,\t\t\t\t\t/* next  */\n+  0,\t\t\t\t\t/* static_pass_number  */\n+  TV_NONE,\t\t\t\t/* tv_id  */\n+  PROP_ssa | PROP_cfg | PROP_gimple_leh,/* properties_required  */\n+  0,\t\t\t\t\t/* properties_provided  */\n+  0,\t\t\t\t\t/* properties_destroyed  */\n+  0,\t\t\t\t\t/* todo_flags_start  */\n+  TODO_verify_flow | TODO_verify_stmts\n+  | TODO_update_ssa\t\t\t/* todo_flags_finish  */\n+ }\n+};\n+\n #include \"gt-asan.h\""}, {"sha": "d4115b38ae7064fe95ec02216d99380956168fe8", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb9e332a5ceefd6770c028d9a937ab869116cba/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb9e332a5ceefd6770c028d9a937ab869116cba/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=dfb9e332a5ceefd6770c028d9a937ab869116cba", "patch": "@@ -1562,6 +1562,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_tm_edges);\n     }\n   NEXT_PASS (pass_lower_complex_O0);\n+  NEXT_PASS (pass_asan_O0);\n   NEXT_PASS (pass_cleanup_eh);\n   NEXT_PASS (pass_lower_resx);\n   NEXT_PASS (pass_nrv);"}, {"sha": "929d5100249f33dde03c7d0a1c4d348b9b419164", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb9e332a5ceefd6770c028d9a937ab869116cba/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb9e332a5ceefd6770c028d9a937ab869116cba/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=dfb9e332a5ceefd6770c028d9a937ab869116cba", "patch": "@@ -260,6 +260,7 @@ struct register_pass_info\n extern struct gimple_opt_pass pass_mudflap_1;\n extern struct gimple_opt_pass pass_mudflap_2;\n extern struct gimple_opt_pass pass_asan;\n+extern struct gimple_opt_pass pass_asan_O0;\n extern struct gimple_opt_pass pass_lower_cf;\n extern struct gimple_opt_pass pass_refactor_eh;\n extern struct gimple_opt_pass pass_lower_eh;"}]}