{"sha": "9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwMmNmNjg0Y2MxM2JmNmI5ZTg4YTVhNTViMDJiYzJjY2FjN2E3YQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-18T16:17:16Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-18T16:17:16Z"}, "message": "real.h (dconst_e, [...]): Declare.\n\n2008-08-18  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* real.h (dconst_e, dconst_third, dconst_sqrt2, dconst_e_ptr,\n\tdconst_third_ptr, dconst_sqrt2_ptr): Declare.\n\t(enum real_value_const): Delete.\n\t(get_real_const): Delete.\n\t* real.c (get_real_const): Delete.\n\t(dconst_e_ptr): Define.\n\t(dconst_third_ptr): Define.\n\t(dconst_sqrt2_ptr): Define.\n\t* builtins.c: Update all callers.\n\nFrom-SVN: r139202", "tree": {"sha": "b26d4ffa1048ebe26a04ba70bd16218610cb5cdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b26d4ffa1048ebe26a04ba70bd16218610cb5cdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a/comments", "author": null, "committer": null, "parents": [{"sha": "e46587281e54e3a8f1eedd70bc322b53cb1fbdcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e46587281e54e3a8f1eedd70bc322b53cb1fbdcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e46587281e54e3a8f1eedd70bc322b53cb1fbdcd"}], "stats": {"total": 141, "additions": 82, "deletions": 59}, "files": [{"sha": "1088b379f7db977f470f501749a40c63ce0569a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a", "patch": "@@ -1,3 +1,15 @@\n+2008-08-18  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* real.h (dconst_e, dconst_third, dconst_sqrt2, dconst_e_ptr,\n+\tdconst_third_ptr, dconst_sqrt2_ptr): Declare.\n+\t(enum real_value_const): Delete.\n+\t(get_real_const): Delete.\n+\t* real.c (get_real_const): Delete.\n+\t(dconst_e_ptr): Define.\n+\t(dconst_third_ptr): Define.\n+\t(dconst_sqrt2_ptr): Define.\n+\t* builtins.c: Update all callers.\n+\n 2008-08-18  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-reassoc.c (reassociate_bb): Properly reset the"}, {"sha": "ed18bf92a6314e1368d35d2bf6115d75981bf05b", "filename": "gcc/builtins.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a", "patch": "@@ -7515,8 +7515,7 @@ fold_builtin_cabs (tree arg, tree type, tree fndecl)\n \t  && operand_equal_p (real, imag, OEP_PURE_SAME))\n         {\n \t  const REAL_VALUE_TYPE sqrt2_trunc\n-\t    = real_value_truncate (TYPE_MODE (type),\n-\t\t\t\t   *get_real_const (rv_sqrt2));\n+\t    = real_value_truncate (TYPE_MODE (type), dconst_sqrt2 ());\n \t  STRIP_NOPS (real);\n \t  return fold_build2 (MULT_EXPR, type,\n \t\t\t      fold_build1 (ABS_EXPR, type, real),\n@@ -7599,7 +7598,7 @@ fold_builtin_sqrt (tree arg, tree type)\n \t  tree tree_root;\n \t  /* The inner root was either sqrt or cbrt.  */\n \t  REAL_VALUE_TYPE dconstroot =\n-\t    BUILTIN_SQRT_P (fcode) ? dconsthalf : *get_real_const (rv_third);\n+\t    BUILTIN_SQRT_P (fcode) ? dconsthalf : dconst_third ();\n \n \t  /* Adjust for the outer root.  */\n \t  SET_REAL_EXP (&dconstroot, REAL_EXP (&dconstroot) - 1);\n@@ -7652,7 +7651,7 @@ fold_builtin_cbrt (tree arg, tree type)\n \t{\n \t  tree expfn = TREE_OPERAND (CALL_EXPR_FN (arg), 0);\n \t  const REAL_VALUE_TYPE third_trunc =\n-\t    real_value_truncate (TYPE_MODE (type), *get_real_const (rv_third));\n+\t    real_value_truncate (TYPE_MODE (type), dconst_third ());\n \t  arg = fold_build2 (MULT_EXPR, type,\n \t\t\t     CALL_EXPR_ARG (arg, 0),\n \t\t\t     build_real (type, third_trunc));\n@@ -7668,7 +7667,7 @@ fold_builtin_cbrt (tree arg, tree type)\n \t    {\n \t      tree arg0 = CALL_EXPR_ARG (arg, 0);\n \t      tree tree_root;\n-\t      REAL_VALUE_TYPE dconstroot = *get_real_const (rv_third);\n+\t      REAL_VALUE_TYPE dconstroot = dconst_third ();\n \n \t      SET_REAL_EXP (&dconstroot, REAL_EXP (&dconstroot) - 1);\n \t      dconstroot = real_value_truncate (TYPE_MODE (type), dconstroot);\n@@ -7691,8 +7690,7 @@ fold_builtin_cbrt (tree arg, tree type)\n \t\t  REAL_VALUE_TYPE dconstroot;\n \n \t\t  real_arithmetic (&dconstroot, MULT_EXPR,\n-\t\t\t\t   get_real_const (rv_third),\n-\t\t\t\t   get_real_const (rv_third));\n+                                   dconst_third_ptr (), dconst_third_ptr ());\n \t\t  dconstroot = real_value_truncate (TYPE_MODE (type), dconstroot);\n \t\t  tree_root = build_real (type, dconstroot);\n \t\t  return build_call_expr (powfn, 2, arg0, tree_root);\n@@ -7711,8 +7709,7 @@ fold_builtin_cbrt (tree arg, tree type)\n \t    {\n \t      tree powfn = TREE_OPERAND (CALL_EXPR_FN (arg), 0);\n \t      const REAL_VALUE_TYPE dconstroot\n-\t\t= real_value_truncate (TYPE_MODE (type),\n-\t\t\t\t       *get_real_const (rv_third));\n+\t\t= real_value_truncate (TYPE_MODE (type), dconst_third ());\n \t      tree narg01 = fold_build2 (MULT_EXPR, type, arg01,\n \t\t\t\t\t build_real (type, dconstroot));\n \t      return build_call_expr (powfn, 2, arg00, narg01);\n@@ -8260,7 +8257,7 @@ fold_builtin_logarithm (tree fndecl, tree arg,\n       if (flag_unsafe_math_optimizations && func == mpfr_log)\n         {\n \t  const REAL_VALUE_TYPE e_truncated =\n-\t    real_value_truncate (TYPE_MODE (type), *get_real_const (rv_e));\n+\t    real_value_truncate (TYPE_MODE (type), dconst_e ());\n \t  if (real_dconstp (arg, &e_truncated))\n \t    return build_real (type, dconst1);\n \t}\n@@ -8293,9 +8290,8 @@ fold_builtin_logarithm (tree fndecl, tree arg,\n \t  {\n \t  CASE_FLT_FN (BUILT_IN_EXP):\n \t    /* Prepare to do logN(exp(exponent) -> exponent*logN(e).  */\n-\t    x = build_real (type,\n-\t\t\t    real_value_truncate (TYPE_MODE (type),\n-\t\t\t\t\t\t *get_real_const (rv_e)));\n+\t    x = build_real (type, real_value_truncate (TYPE_MODE (type), \n+                                                       dconst_e ()));\n \t    exponent = CALL_EXPR_ARG (arg, 0);\n \t    break;\n \t  CASE_FLT_FN (BUILT_IN_EXP2):\n@@ -8322,7 +8318,7 @@ fold_builtin_logarithm (tree fndecl, tree arg,\n \t    /* Prepare to do logN(cbrt(x) -> (1/3)*logN(x).  */\n \t    x = CALL_EXPR_ARG (arg, 0);\n \t    exponent = build_real (type, real_value_truncate (TYPE_MODE (type),\n-\t\t\t\t\t\t\t      *get_real_const (rv_third)));\n+\t\t\t\t\t\t\t      dconst_third ()));\n \t    break;\n \t  CASE_FLT_FN (BUILT_IN_POW):\n \t    /* Prepare to do logN(pow(x,exponent) -> exponent*logN(x).  */\n@@ -8382,7 +8378,7 @@ fold_builtin_hypot (tree fndecl, tree arg0, tree arg1, tree type)\n       && operand_equal_p (arg0, arg1, OEP_PURE_SAME))\n     {\n       const REAL_VALUE_TYPE sqrt2_trunc\n-\t= real_value_truncate (TYPE_MODE (type), *get_real_const (rv_sqrt2));\n+\t= real_value_truncate (TYPE_MODE (type), dconst_sqrt2 ());\n       return fold_build2 (MULT_EXPR, type,\n \t\t\t  fold_build1 (ABS_EXPR, type, arg0),\n \t\t\t  build_real (type, sqrt2_trunc));\n@@ -8448,8 +8444,7 @@ fold_builtin_pow (tree fndecl, tree arg0, tree arg1, tree type)\n       if (flag_unsafe_math_optimizations)\n \t{\n \t  const REAL_VALUE_TYPE dconstroot\n-\t    = real_value_truncate (TYPE_MODE (type),\n-\t\t\t\t   *get_real_const (rv_third));\n+\t    = real_value_truncate (TYPE_MODE (type), dconst_third ());\n \n \t  if (REAL_VALUES_EQUAL (c, dconstroot))\n \t    {\n@@ -8516,8 +8511,7 @@ fold_builtin_pow (tree fndecl, tree arg0, tree arg1, tree type)\n \t  if (tree_expr_nonnegative_p (arg))\n \t    {\n \t      const REAL_VALUE_TYPE dconstroot\n-\t\t= real_value_truncate (TYPE_MODE (type),\n-\t\t\t\t       *get_real_const (rv_third));\n+\t\t= real_value_truncate (TYPE_MODE (type), dconst_third ());\n \t      tree narg1 = fold_build2 (MULT_EXPR, type, arg1,\n \t\t\t\t\tbuild_real (type, dconstroot));\n \t      return build_call_expr (fndecl, 2, arg, narg1);"}, {"sha": "886f8b4ae2c016c2ff1daaba7776c8592441844a", "filename": "gcc/real.c", "status": "modified", "additions": 46, "deletions": 31, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a", "patch": "@@ -2225,47 +2225,62 @@ times_pten (REAL_VALUE_TYPE *r, int exp)\n     do_divide (r, r, &pten);\n }\n \n-/* Returns the special REAL_VALUE_TYPE enumerated by E.  */\n+/* Returns the special REAL_VALUE_TYPE corresponding to 'e'.  */\n \n const REAL_VALUE_TYPE *\n-get_real_const (enum real_value_const e)\n+dconst_e_ptr (void)\n {\n-  static REAL_VALUE_TYPE value[rv_max];\n+  static REAL_VALUE_TYPE value;\n \n-  gcc_assert (e < rv_max);\n+  /* Initialize mathematical constants for constant folding builtins.\n+     These constants need to be given to at least 160 bits precision.  */\n+  if (value.cl == rvc_zero)\n+    {\n+      mpfr_t m;\n+      mpfr_init2 (m, SIGNIFICAND_BITS);\n+      mpfr_set_ui (m, 1, GMP_RNDN);\n+      mpfr_exp (m, m, GMP_RNDN);\n+      real_from_mpfr (&value, m, NULL_TREE, GMP_RNDN);\n+      mpfr_clear (m);\n+      \n+    }\n+  return &value;\n+}\n+\n+/* Returns the special REAL_VALUE_TYPE corresponding to 1/3.  */\n+\n+const REAL_VALUE_TYPE *\n+dconst_third_ptr (void)\n+{\n+  static REAL_VALUE_TYPE value;\n \n   /* Initialize mathematical constants for constant folding builtins.\n      These constants need to be given to at least 160 bits precision.  */\n-  if (value[e].cl == rvc_zero)\n-    switch (e)\n+  if (value.cl == rvc_zero)\n     {\n-    case rv_e:\n-      {\n-\tmpfr_t m;\n-\tmpfr_init2 (m, SIGNIFICAND_BITS);\n-\tmpfr_set_ui (m, 1, GMP_RNDN);\n-\tmpfr_exp (m, m, GMP_RNDN);\n-\treal_from_mpfr (&value[e], m, NULL_TREE, GMP_RNDN);\n-\tmpfr_clear (m);\n-      }\n-      break;\n-    case rv_third:\n-      real_arithmetic (&value[e], RDIV_EXPR, &dconst1, real_digit (3));\n-      break;\n-    case rv_sqrt2:\n-      {\n-\tmpfr_t m;\n-\tmpfr_init2 (m, SIGNIFICAND_BITS);\n-\tmpfr_sqrt_ui (m, 2, GMP_RNDN);\n-\treal_from_mpfr (&value[e], m, NULL_TREE, GMP_RNDN);\n-\tmpfr_clear (m);\n-      }\n-      break;\n-    default:\n-      gcc_unreachable();\n+      real_arithmetic (&value, RDIV_EXPR, &dconst1, real_digit (3));\n     }\n+  return &value;\n+}\n+\n+/* Returns the special REAL_VALUE_TYPE corresponding to sqrt(2).  */\n \n-  return &value[e];\n+const REAL_VALUE_TYPE *\n+dconst_sqrt2_ptr (void)\n+{\n+  static REAL_VALUE_TYPE value;\n+\n+  /* Initialize mathematical constants for constant folding builtins.\n+     These constants need to be given to at least 160 bits precision.  */\n+  if (value.cl == rvc_zero)\n+    {\n+      mpfr_t m;\n+      mpfr_init2 (m, SIGNIFICAND_BITS);\n+      mpfr_sqrt_ui (m, 2, GMP_RNDN);\n+      real_from_mpfr (&value, m, NULL_TREE, GMP_RNDN);\n+      mpfr_clear (m);\n+    }\n+  return &value;\n }\n \n /* Fills R with +Inf.  */"}, {"sha": "44e79c36e17a1239cbe385405d2f06fbded3ba8c", "filename": "gcc/real.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=9c02cf684cc13bf6b9e88a5a55b02bc2ccac7a7a", "patch": "@@ -409,16 +409,18 @@ extern REAL_VALUE_TYPE dconst2;\n extern REAL_VALUE_TYPE dconstm1;\n extern REAL_VALUE_TYPE dconsthalf;\n \n-/* Enumerate the special constant values we need. */\n-enum real_value_const {\n-  rv_e,\n-  rv_third,\n-  rv_sqrt2,\n-  rv_max\n-};\n+#define dconst_e()  (*dconst_e_ptr ())\n+#define dconst_third()  (*dconst_third_ptr ())\n+#define dconst_sqrt2()  (*dconst_sqrt2_ptr ())\n+\n+/* Function to return the real value special constant 'e'.  */\n+extern const REAL_VALUE_TYPE * dconst_e_ptr (void);\n+\n+/* Returns the special REAL_VALUE_TYPE corresponding to 1/3.  */\n+extern const REAL_VALUE_TYPE * dconst_third_ptr (void);\n \n-/* Function to return a real value special constant.  */\n-extern const REAL_VALUE_TYPE * get_real_const (enum real_value_const);\n+/* Returns the special REAL_VALUE_TYPE corresponding to sqrt(2).  */\n+extern const REAL_VALUE_TYPE * dconst_sqrt2_ptr (void);\n \n /* Function to return a real value (not a tree node)\n    from a given integer constant.  */"}]}