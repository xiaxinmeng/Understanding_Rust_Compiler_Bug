{"sha": "490a67336b3c5608d76439c536bde3809db6c958", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkwYTY3MzM2YjNjNTYwOGQ3NjQzOWM1MzZiZGUzODA5ZGI2Yzk1OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-10-08T17:32:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-08T17:32:46Z"}, "message": "sparc.h (FIXED_REGISTERS): Add %icc.\n\n\t* config/sparc/sparc.h (FIXED_REGISTERS): Add %icc.\n\n\t* config/visium/visium.c (visium_expand_int_cstore): Revert latest\n\tchange.\n\t(visium_expand_fp_cstore): Likewise.\n\nFrom-SVN: r240892", "tree": {"sha": "a65770edfef24cc737f236301f4a31cb1d3fcd67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a65770edfef24cc737f236301f4a31cb1d3fcd67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/490a67336b3c5608d76439c536bde3809db6c958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490a67336b3c5608d76439c536bde3809db6c958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/490a67336b3c5608d76439c536bde3809db6c958", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490a67336b3c5608d76439c536bde3809db6c958/comments", "author": null, "committer": null, "parents": [{"sha": "a5fb7ad2d1326974357dee443562bdc5b700e3db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5fb7ad2d1326974357dee443562bdc5b700e3db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5fb7ad2d1326974357dee443562bdc5b700e3db"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "6efa7379a2287bee8b6edddab9098c3ccbaf3ae1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490a67336b3c5608d76439c536bde3809db6c958/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490a67336b3c5608d76439c536bde3809db6c958/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=490a67336b3c5608d76439c536bde3809db6c958", "patch": "@@ -1,3 +1,11 @@\n+2016-10-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.h (FIXED_REGISTERS): Add %icc.\n+\n+\t* config/visium/visium.c (visium_expand_int_cstore): Revert latest\n+\tchange.\n+\t(visium_expand_fp_cstore): Likewise.\n+\n 2016-10-08  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* diagnostic-core.h (warning_at_rich_loc_n): Declare."}, {"sha": "4674c30125e36c1a2f347f1ae930bcc904a55ffc", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490a67336b3c5608d76439c536bde3809db6c958/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490a67336b3c5608d76439c536bde3809db6c958/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=490a67336b3c5608d76439c536bde3809db6c958", "patch": "@@ -603,7 +603,8 @@ extern enum cmodel sparc_cmodel;\n    (e.g.: in CLASS_MAX_NREGS).  There are also 4 fp condition code registers, so\n    32+32+32+4 == 100.\n    Register 100 is used as the integer condition code register.\n-   Register 101 is used as the soft frame pointer register.  */\n+   Register 101 is used as the soft frame pointer register.\n+   Register 102 is used as the general status register by VIS instructions.  */\n \n #define FIRST_PSEUDO_REGISTER 103\n \n@@ -678,7 +679,7 @@ extern enum cmodel sparc_cmodel;\n   0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   0, 0, 0, 0, 0, 0, 0, 0,\t\\\n \t\t\t\t\\\n-  0, 0, 0, 0, 0, 1, 1}\n+  0, 0, 0, 0, 1, 1, 1}\n \n /* 1 for registers not available across function calls.\n    These must include the FIXED_REGISTERS and also any\n@@ -885,12 +886,7 @@ extern int sparc_mode_class[];\n    have a class that is the union of FPCC_REGS with either of the others,\n    it is important that it appear first.  Otherwise the compiler will die\n    trying to compile _fixunsdfsi because fix_truncdfsi2 won't match its\n-   constraints.\n-\n-   It is important that SPARC_ICC_REG have class NO_REGS.  Otherwise combine\n-   may try to use it to hold an SImode value.  See register_operand.\n-   ??? Should %fcc[0123] be handled similarly?\n-*/\n+   constraints.  */\n \n enum reg_class { NO_REGS, FPCC_REGS, I64_REGS, GENERAL_REGS, FP_REGS,\n \t\t EXTRA_FP_REGS, GENERAL_OR_FP_REGS, GENERAL_OR_EXTRA_FP_REGS,"}, {"sha": "af58f99aef1ea60710ef5e0527ac3417d1921dc5", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490a67336b3c5608d76439c536bde3809db6c958/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490a67336b3c5608d76439c536bde3809db6c958/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=490a67336b3c5608d76439c536bde3809db6c958", "patch": "@@ -2222,7 +2222,7 @@ visium_expand_int_cstore (rtx *operands, enum machine_mode mode)\n       code = reverse_condition (code);\n       reverse = true;\n \n-      /* fall through */\n+      /* ... fall through ...  */\n \n     case LTU:\n     case GTU:\n@@ -2270,7 +2270,7 @@ visium_expand_fp_cstore (rtx *operands,\n       code = reverse_condition_maybe_unordered (code);\n       reverse = true;\n \n-      /* fall through */\n+      /* ... fall through ...  */\n \n     case LT:\n     case GT:"}]}