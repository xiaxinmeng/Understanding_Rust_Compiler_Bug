{"sha": "d38cd8ae50fc7c9f174ce0db55582b7349b4cef1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4Y2Q4YWU1MGZjN2M5ZjE3NGNlMGRiNTU1ODJiNzM0OWI0Y2VmMQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@merlin.codesourcery.com", "date": "2001-07-25T08:06:47Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-07-25T08:06:47Z"}, "message": "acinclude.m4: CHECK_MATH_DECL_AND_LINKAGE for hypot, hypotf, hypotl, atan2f, atan2l.\n\n        * acinclude.m4: CHECK_MATH_DECL_AND_LINKAGE for hypot, hypotf,\n        hypotl, atan2f, atan2l.  Remove from REPLACE_MATHFUNCS list.\n        * aclocal.m4: Regenerate.\n        * config.h.in: Likewise.\n        * configure: Likewise.\n        * libmath/Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove hypotl.c\n        (EXTRA_DIST): Remove hypot.c hypotf.c.\n        * libmath/Makefile.am: Regenerate.\n        * libmath/hypotf.c: Remove.\n        * libmath/hypot.c: Likewise.\n        * libmath/hypotl.c: Likewise.\n        * libmath/stubs.c: The macros seen here are HAVE_xxx, not\n        _GLIBCPP_HAVE_xxx.  Add long double versions.\n\nFrom-SVN: r44334", "tree": {"sha": "3c9a527aa129d17798187094a56296270e1eb09a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c9a527aa129d17798187094a56296270e1eb09a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/comments", "author": null, "committer": null, "parents": [{"sha": "40a25731d64b0756aa5aa387e1a5c9a34bf23cfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a25731d64b0756aa5aa387e1a5c9a34bf23cfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40a25731d64b0756aa5aa387e1a5c9a34bf23cfc"}], "stats": {"total": 2731, "additions": 1813, "deletions": 918}, "files": [{"sha": "228c7870d009575a2ed7edde10d7c8e591c5bfa4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d38cd8ae50fc7c9f174ce0db55582b7349b4cef1", "patch": "@@ -1,3 +1,19 @@\n+2001-07-25  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+\n+\t* acinclude.m4: CHECK_MATH_DECL_AND_LINKAGE for hypot, hypotf,\n+\thypotl, atan2f, atan2l.  Remove from REPLACE_MATHFUNCS list.\n+\t* aclocal.m4: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* configure: Likewise.\n+\t* libmath/Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove hypotl.c\n+\t(EXTRA_DIST): Remove hypot.c hypotf.c.\n+\t* libmath/Makefile.am: Regenerate.\n+\t* libmath/hypotf.c: Remove.\n+\t* libmath/hypot.c: Likewise.\n+\t* libmath/hypotl.c: Likewise.\n+\t* libmath/stubs.c: The macros seen here are HAVE_xxx, not\n+\t_GLIBCPP_HAVE_xxx.  Add long double versions.\n+\n 2001-07-23  David Edelsohn  <edelsohn@gnu.org>\n \n \t* include/bits/limits_generic.h (int): Set digits and digits10"}, {"sha": "511823389150dfe370a81e2259ed822786b1c842", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=d38cd8ae50fc7c9f174ce0db55582b7349b4cef1", "patch": "@@ -643,6 +643,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincos)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fpclass)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(qfpclass)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypot)\n \n   dnl Check to see if basic C math functions have float versions.\n   GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(float trig,\n@@ -655,9 +656,11 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n                                           ceilf floorf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2f)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypotf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10f)\n@@ -684,6 +687,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypotl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n@@ -728,23 +732,22 @@ dnl Check to see if there is native support for complex\n dnl\n dnl Don't compile bits in math/* if native support exits.\n dnl\n-dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"atan2l/copysignl\" is found.\n+dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"copysignl\" is found.\n dnl\n dnl GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.\n   AC_CHECK_LIB(m, main)\n-  AC_REPLACE_MATHFUNCS(nan hypot hypotf copysignf)\n+  AC_REPLACE_MATHFUNCS(nan copysignf)\n \n   dnl Compile the long double complex functions only if the function \n   dnl provides the non-complex long double functions that are needed.\n-  dnl Currently this includes copysignl and atan2l, which should be\n+  dnl Currently this includes copysignl, which should be\n   dnl cached from the GLIBCPP_CHECK_MATH_SUPPORT macro, above.\n   USE_COMPLEX_LONG_DOUBLE=no\n-  if test x$ac_cv_func_atan2l = x\"yes\" &&\n-     test x$ac_cv_func_copysignl = x\"yes\"; then\n+  if test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n-    AC_REPLACE_MATHFUNCS(hypotl signbitl)\n+    AC_REPLACE_MATHFUNCS(signbitl)\n   fi\n \n   AC_SUBST(USE_COMPLEX_LONG_DOUBLE)"}, {"sha": "565e93249c19b4935b11bfe8f901f63de3bed9c4", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=d38cd8ae50fc7c9f174ce0db55582b7349b4cef1", "patch": "@@ -655,6 +655,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3(sincos)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fpclass)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(qfpclass)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypot)\n \n   dnl Check to see if basic C math functions have float versions.\n   GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1(float trig,\n@@ -667,9 +668,11 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n                                           ceilf floorf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnanf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinff)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(atan2f)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpf)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypotf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10f)\n@@ -696,6 +699,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(fabsl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(fmodl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(frexpl)\n+  GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(hypotl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2(ldexpl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(logl)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(log10l)\n@@ -740,23 +744,22 @@ dnl Check to see if there is native support for complex\n dnl\n dnl Don't compile bits in math/* if native support exits.\n dnl\n-dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"atan2l/copysignl\" is found.\n+dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"copysignl\" is found.\n dnl\n dnl GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.\n   AC_CHECK_LIB(m, main)\n-  AC_REPLACE_MATHFUNCS(nan hypot hypotf copysignf)\n+  AC_REPLACE_MATHFUNCS(nan copysignf)\n \n   dnl Compile the long double complex functions only if the function \n   dnl provides the non-complex long double functions that are needed.\n-  dnl Currently this includes copysignl and atan2l, which should be\n+  dnl Currently this includes copysignl, which should be\n   dnl cached from the GLIBCPP_CHECK_MATH_SUPPORT macro, above.\n   USE_COMPLEX_LONG_DOUBLE=no\n-  if test x$ac_cv_func_atan2l = x\"yes\" &&\n-     test x$ac_cv_func_copysignl = x\"yes\"; then\n+  if test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n-    AC_REPLACE_MATHFUNCS(hypotl signbitl)\n+    AC_REPLACE_MATHFUNCS(signbitl)\n   fi\n \n   AC_SUBST(USE_COMPLEX_LONG_DOUBLE)"}, {"sha": "e056ff78c595d3455dd349b0fbe344411e118aa1", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=d38cd8ae50fc7c9f174ce0db55582b7349b4cef1", "patch": "@@ -87,6 +87,9 @@\n /* Define if you have the _asinl function.  */\n #undef HAVE__ASINL\n \n+/* Define if you have the _atan2f function.  */\n+#undef HAVE__ATAN2F\n+\n /* Define if you have the _atan2l function.  */\n #undef HAVE__ATAN2L\n \n@@ -159,6 +162,15 @@\n /* Define if you have the _frexpl function.  */\n #undef HAVE__FREXPL\n \n+/* Define if you have the _hypot function.  */\n+#undef HAVE__HYPOT\n+\n+/* Define if you have the _hypotf function.  */\n+#undef HAVE__HYPOTF\n+\n+/* Define if you have the _hypotl function.  */\n+#undef HAVE__HYPOTL\n+\n /* Define if you have the _isinf function.  */\n #undef HAVE__ISINF\n \n@@ -261,6 +273,9 @@\n /* Define if you have the asinl function.  */\n #undef HAVE_ASINL\n \n+/* Define if you have the atan2f function.  */\n+#undef HAVE_ATAN2F\n+\n /* Define if you have the atan2l function.  */\n #undef HAVE_ATAN2L\n "}, {"sha": "c364e4f2ae2add2337c1aeff2f9e9c0aca297d98", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1602, "deletions": 760, "changes": 2362, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=d38cd8ae50fc7c9f174ce0db55582b7349b4cef1"}, {"sha": "c0cea3ce35fbd12a798b778bb274f8053620e019", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=d38cd8ae50fc7c9f174ce0db55582b7349b4cef1", "patch": "@@ -27,12 +27,9 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes = \\\n-\thypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes = signbitl.c\n \n-EXTRA_DIST = \\\n-\thypot.c hypotf.c \\\n-\t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST = $(EXTRA_LONG_DOUBLE_yes) \n \n libmath_la_LIBADD = \\\n \t@LIBMATHOBJS@ \\"}, {"sha": "95e7ce02cbffa628bf184460fab45322bc551a1f", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=d38cd8ae50fc7c9f174ce0db55582b7349b4cef1", "patch": "@@ -129,11 +129,9 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n-\n-\n-EXTRA_DIST =  \thypot.c hypotf.c \t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_LONG_DOUBLE_yes = signbitl.c\n \n+EXTRA_DIST = $(EXTRA_LONG_DOUBLE_yes) \n \n libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n@@ -278,7 +276,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "9e3c07b022224730fbf79935ccc78e51d66e55fa", "filename": "libstdc++-v3/libmath/hypot.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a25731d64b0756aa5aa387e1a5c9a34bf23cfc/libstdc%2B%2B-v3%2Flibmath%2Fhypot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a25731d64b0756aa5aa387e1a5c9a34bf23cfc/libstdc%2B%2B-v3%2Flibmath%2Fhypot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fhypot.c?ref=40a25731d64b0756aa5aa387e1a5c9a34bf23cfc", "patch": "@@ -1,38 +0,0 @@\n-/* Compute hypothenuse. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-/* If the platform is so pathetic that is has no hypot function it does\n-   not deserve it better than getting this version.  */\n-extern double sqrt (double);\n-\n-double\n-hypot (double x, double y)\n-{\n-  return sqrt (x * x + y * y);\n-}"}, {"sha": "29d1681f5cc5aef716e0f98136abc3cf47d87eb5", "filename": "libstdc++-v3/libmath/hypotf.c", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a25731d64b0756aa5aa387e1a5c9a34bf23cfc/libstdc%2B%2B-v3%2Flibmath%2Fhypotf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a25731d64b0756aa5aa387e1a5c9a34bf23cfc/libstdc%2B%2B-v3%2Flibmath%2Fhypotf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fhypotf.c?ref=40a25731d64b0756aa5aa387e1a5c9a34bf23cfc", "patch": "@@ -1,48 +0,0 @@\n-/* Compute hypothenuse. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <config.h>\n-\n-/* If there is a `double' version use it.  Otherwise make it simply and\n-   stupid.  */\n-extern double hypot (double, double);\n-extern double sqrt (double);\n-extern float sqrtf (float);\n-\n-float\n-hypotf (float x, float y)\n-{\n-#ifdef HAVE_HYPOT\n-  return hypot (x, y);\n-#elif HAVE_SQRTF\n-  return sqrtf (x * x + y * y);\n-#else\n-  return sqrt (x * x + y * y);\n-#endif\n-}"}, {"sha": "1ec8a9ce7eec0b1f090024ac2dfa5bf138d7ae86", "filename": "libstdc++-v3/libmath/hypotl.c", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a25731d64b0756aa5aa387e1a5c9a34bf23cfc/libstdc%2B%2B-v3%2Flibmath%2Fhypotl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a25731d64b0756aa5aa387e1a5c9a34bf23cfc/libstdc%2B%2B-v3%2Flibmath%2Fhypotl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fhypotl.c?ref=40a25731d64b0756aa5aa387e1a5c9a34bf23cfc", "patch": "@@ -1,37 +0,0 @@\n-/* Compute hypothenuse. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-/* The platform supports some long double functions but not hypotl.  Blarg.  */\n-extern long double sqrtl (long double);\n-\n-long double\n-hypotl (long double x, long double y)\n-{\n-  return sqrtl (x * x + y * y);\n-}"}, {"sha": "9a0f5f63954987217fea2ad95f4b8f694fc0bd73", "filename": "libstdc++-v3/libmath/stubs.c", "status": "modified", "additions": 157, "deletions": 13, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Flibmath%2Fstubs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38cd8ae50fc7c9f174ce0db55582b7349b4cef1/libstdc%2B%2B-v3%2Flibmath%2Fstubs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fstubs.c?ref=d38cd8ae50fc7c9f174ce0db55582b7349b4cef1", "patch": "@@ -28,100 +28,244 @@\n    the GNU General Public License.  */\n \n #include <math.h>\n-#include <config.h>\n+#include \"config.h\"\n \n-#ifndef _GLIBCPP_HAVE_ATAN2F\n+/* For targets which do not have support for long double versions,\n+   we use the crude approximation.  We'll do better later.  */\n+\n+\n+#ifndef HAVE_ATAN2F\n float\n atan2f(float x, float y)\n {\n   return (float) atan2(x, y);\n }\n #endif\n \n-#if !defined(_GLIBCPP_HAVE_COSF) && !defined(_GLIBCPP_HAVE___BUILTIN_COSF)\n+#ifndef HAVE_ATAN2L\n+long double\n+atan2l(long double x, long double y)\n+{\n+  return atan2((double) x, (double) y);\n+}\n+#endif\n+\n+\n+#if !defined(HAVE_COSF) && !defined(HAVE___BUILTIN_COSF)\n float\n cosf(float x)\n {\n   return (float) cos(x);\n }\n #endif\n \n-#ifndef _GLIBCPP_HAVE_COSHF\n+#ifndef HAVE_COSL\n+long double\n+cosl(long double x)\n+{\n+  return cos((double) x);\n+}\n+#endif\n+\n+\n+#ifndef HAVE_COSHF\n float\n coshf(float x)\n {\n   return (float) cosh(x);\n }\n #endif\n \n-#ifndef _GLIBCPP_HAVE_EXPF\n+#ifndef HAVE_COSHL\n+long double\n+coshl(long double x)\n+{\n+  return cosh((double) x);\n+}\n+#endif\n+\n+\n+#ifndef HAVE_EXPF\n float\n expf(float x)\n {\n   return (float) exp(x);\n }\n #endif\n \n-#ifndef _GLIBCPP_HAVE_LOGF\n+#ifndef HAVE_EXPL\n+long double\n+expl(long double x)\n+{\n+  return exp((double) x);\n+}\n+#endif\n+\n+\n+/* Compute the hypothenuse of a right triangle with side x and y.  */\n+#ifndef HAVE_HYPOTF\n+float\n+hypotf(float x, float y)\n+{\n+  float s = fabsf(x) + fabsf(y);\n+  x /= s; y /= s;\n+  return s * sqrtf(x * x + y * y);\n+}\n+#endif\n+\n+#ifndef HAVE_HYPOT\n+double\n+hypot(double x, double y)\n+{\n+  double s = fabs(x) + fabs(y);\n+  x /= s; y /= s;\n+  return s * sqrt(x * x + y * y);\n+}\n+#endif\n+\n+#ifndef HAVE_HYPOTL\n+long double\n+hypotl(long double x, long double y)\n+{\n+  long double s = fabsl(x) + fabsl(y);\n+  x /= s; y /= s;\n+  return s * sqrtl(x * x + y * y);\n+}\n+#endif\n+\n+\n+\n+#ifndef HAVE_LOGF\n float\n logf(float x)\n {\n   return (float) log(x);\n }\n #endif\n \n-#ifndef _GLIBCPP_HAVE_LOG10F\n+#ifndef _GBLICPP_HAVE_LOGL\n+long double\n+logl(long double x)\n+{\n+  return log((double) x);\n+}\n+#endif\n+\n+\n+#ifndef HAVE_LOG10F\n float\n log10f(float x)\n {\n   return (float) log10(x);\n }\n #endif\n \n-#ifndef _GLIBCPP_HAVE_POWF\n+#ifndef HAVE_LOG10L\n+long double\n+log10l(long double x)\n+{\n+  return log10((double) x);\n+}\n+#endif\n+\n+\n+#ifndef HAVE_POWF\n float\n powf(float x, float y)\n {\n   return (float) pow(x, y);\n }\n #endif\n \n-#if !defined(_GLIBCPP_HAVE_SINF) && !defined(_GLIBCPP_HAVE___BUILTIN_SINF)\n+#ifndef HAVE_POWL\n+long double\n+powl(long double x, long double y)\n+{\n+  return pow((double) x, (double) y);\n+}\n+#endif\n+\n+\n+#if !defined(HAVE_SINF) && !defined(HAVE___BUILTIN_SINF)\n float\n sinf(float x)\n {\n   return (float) sin(x);\n }\n #endif\n \n-#ifndef _GLIBCPP_HAVE_SINHF\n+#ifndef HAVE_SINL\n+long double\n+sinl(long double x)\n+{\n+  return sin((double) x);\n+}\n+#endif\n+\n+\n+#ifndef HAVE_SINHF\n float\n sinhf(float x)\n {\n   return (float) sinh(x);\n }\n #endif\n \n-#ifndef _GLIBCPP_HAVE_SQRTF\n+#ifndef HAVE_SINHL\n+long double\n+sinhl(long double x)\n+{\n+  return sinh((double) x);\n+}\n+#endif\n+\n+\n+#ifndef HAVE_SQRTF\n float\n sqrtf(float x)\n {\n   return (float) sqrt(x);\n }\n #endif\n \n-#ifndef _GLIBCPP_HAVE_TANF\n+#ifndef HAVE_SQRTL\n+long double\n+sqrtl(long double x)\n+{\n+  return  sqrt((double) x);\n+}\n+#endif\n+\n+\n+#ifndef HAVE_TANF\n float\n tanf(float x)\n {\n   return (float) tan(x);\n }\n #endif\n \n-#ifndef _GLIBCPP_HAVE_TANHF\n+#ifndef HAVE_TANL\n+long double\n+tanl(long double x)\n+{\n+  return tan((double) x);\n+}\n+#endif\n+\n+\n+#ifndef HAVE_TANHF\n float\n tanhf(float x)\n {\n   return (float) tanh(x);\n }\n #endif\n+\n+#ifndef HAVE_TANHL\n+long double\n+tanhl(long double x)\n+{\n+  return tanh((double) x);\n+}\n+#endif"}]}