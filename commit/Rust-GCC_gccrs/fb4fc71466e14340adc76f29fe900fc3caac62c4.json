{"sha": "fb4fc71466e14340adc76f29fe900fc3caac62c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI0ZmM3MTQ2NmUxNDM0MGFkYzc2ZjI5ZmU5MDBmYzNjYWFjNjJjNA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2009-04-27T23:27:21Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2009-04-27T23:27:21Z"}, "message": "target-supports.exp (check_effective_target_double64): New.\n\n* lib/target-supports.exp (check_effective_target_double64): New.\n(check_effective_target_double64plus): New.\n(check_effective_target_large_double): New.\n* gcc.dg/Wconversion-real-integer.c: Require double64plus.\n* gcc.dg/div-double-1.c: Likewise.\n* gcc.dg/Wconversion-real.c: Require large_double.\n* gcc.dg/cdce1.c: Require large_double instead of checking targets.\n\n* gcc.c-torture/execute/ieee/unsafe-fp-assoc-1.c: Skip if doubles are too small.\n\n* gcc.c-torture/execute/ieee/20010226-1.c: Mark all floating point\nconstants as long.\n\nFrom-SVN: r146863", "tree": {"sha": "5016c3016cbd4a69c53b0ce51289b4bc254bedc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5016c3016cbd4a69c53b0ce51289b4bc254bedc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb4fc71466e14340adc76f29fe900fc3caac62c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4fc71466e14340adc76f29fe900fc3caac62c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb4fc71466e14340adc76f29fe900fc3caac62c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4fc71466e14340adc76f29fe900fc3caac62c4/comments", "author": null, "committer": null, "parents": [{"sha": "1883802f283370f24198916497c70d147a2ff8b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1883802f283370f24198916497c70d147a2ff8b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1883802f283370f24198916497c70d147a2ff8b4"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "d7668c402a11f5f735bdc3dfc8e04b07e322b5e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb4fc71466e14340adc76f29fe900fc3caac62c4", "patch": "@@ -1,3 +1,18 @@\n+2009-04-23  DJ Delorie  <dj@redhat.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_double64): New.\n+\t(check_effective_target_double64plus): New.\n+\t(check_effective_target_large_double): New.\n+\t* gcc.dg/Wconversion-real-integer.c: Require double64plus.\n+\t* gcc.dg/div-double-1.c: Likewise.\n+\t* gcc.dg/Wconversion-real.c: Require large_double.\n+\t* gcc.dg/cdce1.c: Require large_double instead of checking targets.\n+\n+\t* gcc.c-torture/execute/ieee/unsafe-fp-assoc-1.c: Skip if doubles are too small.\n+\n+\t* gcc.c-torture/execute/ieee/20010226-1.c: Mark all floating point\n+\tconstants as long.\n+\n 2009-04-27  Ian Lance Taylor  <iant@google.com>\n \n \t* gcc.dg/Wcxx-compat-5.c: New testcase."}, {"sha": "ec292aca3d4f2e1d6b7ce322b011125cc11ae6c7", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/20010226-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20010226-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20010226-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20010226-1.c?ref=fb4fc71466e14340adc76f29fe900fc3caac62c4", "patch": "@@ -1,6 +1,6 @@\n #include <float.h>\n \n-long double dfrom = 1.1;\n+long double dfrom = 1.1L;\n long double m1;\n long double m2;\n unsigned long mant_long;\n@@ -13,8 +13,8 @@ int main()\n   if (LDBL_EPSILON > 0x1p-31L)\n     return 0;\n \n-  m1 = dfrom / 2.0;\n-  m2 = m1 * 4294967296.0;\n+  m1 = dfrom / 2.0L;\n+  m2 = m1 * 4294967296.0L;\n   mant_long = ((unsigned long) m2) & 0xffffffff;\n \n   if (mant_long == 0x8ccccccc)"}, {"sha": "7021b99ad7fde1f5852fb08732451726696d112c", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/unsafe-fp-assoc-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Funsafe-fp-assoc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Funsafe-fp-assoc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Funsafe-fp-assoc-1.c?ref=fb4fc71466e14340adc76f29fe900fc3caac62c4", "patch": "@@ -32,6 +32,8 @@ void func ( double x )\n \n int main()\n {\n+\tif (sizeof (double) == 4)\n+\t\treturn 0;\n \tfunc((double)1.00);\n \treturn 0;\n }"}, {"sha": "c61ea70c7815eddd477bca7bf8e82b0e797e81a6", "filename": "gcc/testsuite/gcc.dg/Wconversion-real-integer.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real-integer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real-integer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real-integer.c?ref=fb4fc71466e14340adc76f29fe900fc3caac62c4", "patch": "@@ -5,6 +5,7 @@\n /* { dg-skip-if \"doubles are floats,ints are 16bits\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=c99 -Wconversion\" } */\n /* { dg-require-effective-target int32plus } */\n+/* { dg-require-effective-target double64plus } */\n #include <limits.h>\n \n void fsi (signed int x);"}, {"sha": "ed7371b512321c010b1673cf7da24ec5c3a62bb9", "filename": "gcc/testsuite/gcc.dg/Wconversion-real.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real.c?ref=fb4fc71466e14340adc76f29fe900fc3caac62c4", "patch": "@@ -3,6 +3,7 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"doubles are floats\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=c99 -Wconversion\" } */\n+/* { dg-require-effective-target large_double } */\n \n float  vfloat;\n double vdouble;"}, {"sha": "3bd35ecb78675bd810bddbe788181c6576e39da3", "filename": "gcc/testsuite/gcc.dg/cdce1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcdce1.c?ref=fb4fc71466e14340adc76f29fe900fc3caac62c4", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do  run  } */\n-/* { dg-skip-if \"doubles are floats\" { \"avr-*-*\" \"m32c-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details  -lm\" } */\n /* { dg-final { scan-tree-dump  \"cdce1.c:16: note: function call is shrink-wrapped into error conditions\\.\"  \"cdce\" } } */\n /* { dg-final { cleanup-tree-dump \"cdce\" } } */\n+/* { dg-require-effective-target large_double } */\n \n #include <stdlib.h>\n #include <math.h>"}, {"sha": "f290ab06782185cd2bdc103c404ae0d03fbff8cc", "filename": "gcc/testsuite/gcc.dg/div-double-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.dg%2Fdiv-double-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Fgcc.dg%2Fdiv-double-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiv-double-1.c?ref=fb4fc71466e14340adc76f29fe900fc3caac62c4", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ffinite-math-only\" } */\n+/* { dg-require-effective-target double64plus } */\n \n extern void abort (void);\n "}, {"sha": "cf1ed8690db6eb3ff2eadf34790bbf476b888a8c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4fc71466e14340adc76f29fe900fc3caac62c4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=fb4fc71466e14340adc76f29fe900fc3caac62c4", "patch": "@@ -1194,6 +1194,33 @@ proc check_effective_target_large_long_double { } {\n     }]\n }\n \n+# Return 1 if the target supports double larger than float,\n+# 0 otherwise.\n+\n+proc check_effective_target_large_double { } {\n+    return [check_no_compiler_messages large_double object {\n+\tint dummy[sizeof(double) > sizeof(float) ? 1 : -1];\n+    }]\n+}\n+\n+# Return 1 if the target supports double of 64 bits,\n+# 0 otherwise.\n+\n+proc check_effective_target_double64 { } {\n+    return [check_no_compiler_messages double64 object {\n+\tint dummy[sizeof(double) == 8 ? 1 : -1];\n+    }]\n+}\n+\n+# Return 1 if the target supports double of at least 64 bits,\n+# 0 otherwise.\n+\n+proc check_effective_target_double64plus { } {\n+    return [check_no_compiler_messages double64plus object {\n+\tint dummy[sizeof(double) >= 8 ? 1 : -1];\n+    }]\n+}\n+\n # Return 1 if the target supports compiling fixed-point,\n # 0 otherwise.\n "}]}