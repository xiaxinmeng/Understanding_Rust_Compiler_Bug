{"sha": "e2186cd88ed9015ad0cd6f265daa164648d30f74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIxODZjZDg4ZWQ5MDE1YWQwY2Q2ZjI2NWRhYTE2NDY0OGQzMGY3NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-03-21T14:03:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-03-21T14:03:56Z"}, "message": "In C++17 <math.h> should not put special functions in global namespace\n\nIS 29124 8.2 [sf.mathh] says that <math.h> should add the names of the\nspecial functions to the global namespace.  However, C++17 Annex D\n[depr.c.headers] excludes those functions explicitly, so they should not\nbe placed in the global namespace unconditionally for C++17.\n\nOnly add them to the global namespace when IS 29124 is explicitly\nrequested via the __STDCPP_WANT_MATH_SPEC_FUNCS__ macro.\n\n\t* include/c_compatibility/math.h [!__STDCPP_WANT_MATH_SPEC_FUNCS__]\n\t(assoc_laguerre, assoc_laguerref, assoc_laguerrel, assoc_legendre)\n\t(assoc_legendref, assoc_legendrel, beta, betaf, betal, comp_ellint_1)\n\t(comp_ellint_1f, comp_ellint_1l, comp_ellint_2, comp_ellint_2f)\n\t(comp_ellint_2l, comp_ellint_3, comp_ellint_3f, comp_ellint_3l)\n\t(cyl_bessel_i, cyl_bessel_if, cyl_bessel_il, cyl_bessel_j)\n\t(cyl_bessel_jf, cyl_bessel_jl, cyl_bessel_k, cyl_bessel_kf)\n\t(cyl_bessel_kl, cyl_neumann, cyl_neumannf, cyl_neumannl, ellint_1)\n\t(ellint_1f, ellint_1l, ellint_2, ellint_2f, ellint_2l, ellint_3)\n\t(ellint_3f, ellint_3l, expint, expintf, expintl, hermite, hermitef)\n\t(hermitel, laguerre, laguerref, laguerrel, legendre, legendref)\n\t(legendrel, riemann_zeta, riemann_zetaf, riemann_zetal, sph_bessel)\n\t(sph_besself, sph_bessell, sph_legendre, sph_legendref, sph_legendrel)\n\t(sph_neumann, sph_neumannf, sph_neumannl): Only add using-declarations\n\twhen the special functions IS is enabled, not for C++17.\n\t* testsuite/26_numerics/headers/cmath/functions_global_c++17.cc:\n\tReplace with ...\n\t* testsuite/26_numerics/headers/cmath/functions_global.cc: New test,\n\twithout checks for special functions in C++17.\n\t* testsuite/26_numerics/headers/cmath/special_functions_global.cc:\n\tNew test.\n\nFrom-SVN: r269837", "tree": {"sha": "f70e6c43560e61b4684638c131b86d417b65e720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f70e6c43560e61b4684638c131b86d417b65e720"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2186cd88ed9015ad0cd6f265daa164648d30f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2186cd88ed9015ad0cd6f265daa164648d30f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2186cd88ed9015ad0cd6f265daa164648d30f74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2186cd88ed9015ad0cd6f265daa164648d30f74/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42d9f14babbbf96f2601e64117f235d47a683a55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d9f14babbbf96f2601e64117f235d47a683a55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42d9f14babbbf96f2601e64117f235d47a683a55"}], "stats": {"total": 348, "additions": 236, "deletions": 112}, "files": [{"sha": "dad1e54a02b53af16c011f5aae6447be58438281", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2186cd88ed9015ad0cd6f265daa164648d30f74/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2186cd88ed9015ad0cd6f265daa164648d30f74/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e2186cd88ed9015ad0cd6f265daa164648d30f74", "patch": "@@ -1,5 +1,27 @@\n 2019-03-21  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/c_compatibility/math.h [!__STDCPP_WANT_MATH_SPEC_FUNCS__]\n+\t(assoc_laguerre, assoc_laguerref, assoc_laguerrel, assoc_legendre)\n+\t(assoc_legendref, assoc_legendrel, beta, betaf, betal, comp_ellint_1)\n+\t(comp_ellint_1f, comp_ellint_1l, comp_ellint_2, comp_ellint_2f)\n+\t(comp_ellint_2l, comp_ellint_3, comp_ellint_3f, comp_ellint_3l)\n+\t(cyl_bessel_i, cyl_bessel_if, cyl_bessel_il, cyl_bessel_j)\n+\t(cyl_bessel_jf, cyl_bessel_jl, cyl_bessel_k, cyl_bessel_kf)\n+\t(cyl_bessel_kl, cyl_neumann, cyl_neumannf, cyl_neumannl, ellint_1)\n+\t(ellint_1f, ellint_1l, ellint_2, ellint_2f, ellint_2l, ellint_3)\n+\t(ellint_3f, ellint_3l, expint, expintf, expintl, hermite, hermitef)\n+\t(hermitel, laguerre, laguerref, laguerrel, legendre, legendref)\n+\t(legendrel, riemann_zeta, riemann_zetaf, riemann_zetal, sph_bessel)\n+\t(sph_besself, sph_bessell, sph_legendre, sph_legendref, sph_legendrel)\n+\t(sph_neumann, sph_neumannf, sph_neumannl): Only add using-declarations\n+\twhen the special functions IS is enabled, not for C++17.\n+\t* testsuite/26_numerics/headers/cmath/functions_global_c++17.cc:\n+\tReplace with ...\n+\t* testsuite/26_numerics/headers/cmath/functions_global.cc: New test,\n+\twithout checks for special functions in C++17.\n+\t* testsuite/26_numerics/headers/cmath/special_functions_global.cc:\n+\tNew test.\n+\n \tPR libstdc++/88066\n \t* include/backward/hash_map: Use <> for includes not \"\".\n \t* include/backward/hash_set: Likewise."}, {"sha": "7e8dab03e41b9ab90665ad730cc7aa8df0cbcebe", "filename": "libstdc++-v3/include/c_compatibility/math.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2186cd88ed9015ad0cd6f265daa164648d30f74/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2186cd88ed9015ad0cd6f265daa164648d30f74/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h?ref=e2186cd88ed9015ad0cd6f265daa164648d30f74", "patch": "@@ -111,7 +111,9 @@ using std::tgamma;\n using std::trunc;\n #endif // C++11 && _GLIBCXX_USE_C99_MATH_TR1\n \n-#if _GLIBCXX_USE_STD_SPEC_FUNCS\n+// The mathematical special functions are only added to the global namespace\n+// by IS 29124, but not by C++17.\n+#if __cplusplus >= 201103L && __STDCPP_WANT_MATH_SPEC_FUNCS__ != 0\n using std::assoc_laguerref;\n using std::assoc_laguerrel;\n using std::assoc_laguerre;"}, {"sha": "19bcba9b4ea1f7201db95489826ec2b2c2aef44c", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/functions_global.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2186cd88ed9015ad0cd6f265daa164648d30f74/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_global.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2186cd88ed9015ad0cd6f265daa164648d30f74/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_global.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_global.cc?ref=e2186cd88ed9015ad0cd6f265daa164648d30f74", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2017-2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <math.h>\n+\n+namespace gnu\n+{\n+  using ::acos;\n+  using ::asin;\n+  using ::atan;\n+  using ::atan2;\n+  using ::ceil;\n+  using ::cos;\n+  using ::cosh;\n+  using ::exp;\n+  using ::fabs;\n+  using ::floor;\n+  using ::fmod;\n+  using ::frexp;\n+  using ::ldexp;\n+  using ::log;\n+  using ::log10;\n+  using ::modf;\n+  using ::pow;\n+  using ::sin;\n+  using ::sinh;\n+  using ::sqrt;\n+  using ::tan;\n+  using ::tanh;\n+}"}, {"sha": "8c4a06b37470c48c00f7e1b7d6a6fdaa051e56d5", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/functions_global_c++17.cc", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d9f14babbbf96f2601e64117f235d47a683a55/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_global_c%2B%2B17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d9f14babbbf96f2601e64117f235d47a683a55/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_global_c%2B%2B17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_global_c%2B%2B17.cc?ref=42d9f14babbbf96f2601e64117f235d47a683a55", "patch": "@@ -1,111 +0,0 @@\n-// Copyright (C) 2017-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-std=gnu++17\" }\n-// { dg-do compile }\n-\n-#include <math.h>\n-\n-namespace gnu\n-{\n-  using ::acos;\n-  using ::asin;\n-  using ::atan;\n-  using ::atan2;\n-  using ::ceil;\n-  using ::cos;\n-  using ::cosh;\n-  using ::exp;\n-  using ::fabs;\n-  using ::floor;\n-  using ::fmod;\n-  using ::frexp;\n-  using ::ldexp;\n-  using ::log;\n-  using ::log10;\n-  using ::modf;\n-  using ::pow;\n-  using ::sin;\n-  using ::sinh;\n-  using ::sqrt;\n-  using ::tan;\n-  using ::tanh;\n-\n-  using ::assoc_laguerre;\n-  using ::assoc_laguerref;\n-  using ::assoc_laguerrel;\n-  using ::assoc_legendre;\n-  using ::assoc_legendref;\n-  using ::assoc_legendrel;\n-  using ::beta;\n-  using ::betaf;\n-  using ::betal;\n-  using ::comp_ellint_1;\n-  using ::comp_ellint_1f;\n-  using ::comp_ellint_1l;\n-  using ::comp_ellint_2;\n-  using ::comp_ellint_2f;\n-  using ::comp_ellint_2l;\n-  using ::comp_ellint_3;\n-  using ::comp_ellint_3f;\n-  using ::comp_ellint_3l;\n-  using ::cyl_bessel_i;\n-  using ::cyl_bessel_if;\n-  using ::cyl_bessel_il;\n-  using ::cyl_bessel_j;\n-  using ::cyl_bessel_jf;\n-  using ::cyl_bessel_jl;\n-  using ::cyl_bessel_k;\n-  using ::cyl_bessel_kf;\n-  using ::cyl_bessel_kl;\n-  using ::cyl_neumann;\n-  using ::cyl_neumannf;\n-  using ::cyl_neumannl;\n-  using ::ellint_1;\n-  using ::ellint_1f;\n-  using ::ellint_1l;\n-  using ::ellint_2;\n-  using ::ellint_2f;\n-  using ::ellint_2l;\n-  using ::ellint_3;\n-  using ::ellint_3f;\n-  using ::ellint_3l;\n-  using ::expint;\n-  using ::expintf;\n-  using ::expintl;\n-  using ::hermite;\n-  using ::hermitef;\n-  using ::hermitel;\n-  using ::laguerre;\n-  using ::laguerref;\n-  using ::laguerrel;\n-  using ::legendre;\n-  using ::legendref;\n-  using ::legendrel;\n-  using ::riemann_zeta;\n-  using ::riemann_zetaf;\n-  using ::riemann_zetal;\n-  using ::sph_bessel;\n-  using ::sph_besself;\n-  using ::sph_bessell;\n-  using ::sph_legendre;\n-  using ::sph_legendref;\n-  using ::sph_legendrel;\n-  using ::sph_neumann;\n-  using ::sph_neumannf;\n-  using ::sph_neumannl;\n-}"}, {"sha": "d8afe4aa817dd3fcadd143d9f7c753d53a7b8d58", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/special_functions_global.cc", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2186cd88ed9015ad0cd6f265daa164648d30f74/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fspecial_functions_global.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2186cd88ed9015ad0cd6f265daa164648d30f74/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fspecial_functions_global.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fspecial_functions_global.cc?ref=e2186cd88ed9015ad0cd6f265daa164648d30f74", "patch": "@@ -0,0 +1,165 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+#undef __STDCPP_WANT_MATH_SPEC_FUNCS__\n+#define __STDCPP_WANT_MATH_SPEC_FUNCS__ 0\n+#include <math.h>\n+\n+struct R { };\n+\n+// When __STDCPP_WANT_MATH_SPEC_FUNCS__ == 0, none of these names should be\n+// declared in the global namespace by <math.h>. Calls to them should find\n+// the overloads declared in this file, not the ones that are present in\n+// namespace std for C++17 and later.\n+\n+R assoc_laguerre(...);\n+R assoc_laguerref(...);\n+R assoc_laguerrel(...);\n+R assoc_legendre(...);\n+R assoc_legendref(...);\n+R assoc_legendrel(...);\n+R beta(...);\n+R betaf(...);\n+R betal(...);\n+R comp_ellint_1(...);\n+R comp_ellint_1f(...);\n+R comp_ellint_1l(...);\n+R comp_ellint_2(...);\n+R comp_ellint_2f(...);\n+R comp_ellint_2l(...);\n+R comp_ellint_3(...);\n+R comp_ellint_3f(...);\n+R comp_ellint_3l(...);\n+R cyl_bessel_i(...);\n+R cyl_bessel_if(...);\n+R cyl_bessel_il(...);\n+R cyl_bessel_j(...);\n+R cyl_bessel_jf(...);\n+R cyl_bessel_jl(...);\n+R cyl_bessel_k(...);\n+R cyl_bessel_kf(...);\n+R cyl_bessel_kl(...);\n+R cyl_neumann(...);\n+R cyl_neumannf(...);\n+R cyl_neumannl(...);\n+R ellint_1(...);\n+R ellint_1f(...);\n+R ellint_1l(...);\n+R ellint_2(...);\n+R ellint_2f(...);\n+R ellint_2l(...);\n+R ellint_3(...);\n+R ellint_3f(...);\n+R ellint_3l(...);\n+R expint(...);\n+R expintf(...);\n+R expintl(...);\n+R hermite(...);\n+R hermitef(...);\n+R hermitel(...);\n+R laguerre(...);\n+R laguerref(...);\n+R laguerrel(...);\n+R legendre(...);\n+R legendref(...);\n+R legendrel(...);\n+R riemann_zeta(...);\n+R riemann_zetaf(...);\n+R riemann_zetal(...);\n+R sph_bessel(...);\n+R sph_besself(...);\n+R sph_bessell(...);\n+R sph_legendre(...);\n+R sph_legendref(...);\n+R sph_legendrel(...);\n+R sph_neumann(...);\n+R sph_neumannf(...);\n+R sph_neumannl(...);\n+\n+void\n+test01()\n+{\n+  R r;\n+  // Call each function with arguments matching the real special functions\n+  // in namespace std, to verify that the overloads above are called instead.\n+  r = assoc_laguerre(1u, 1u, 1.0);\n+  r = assoc_laguerref(1u, 1u, 1.0f);\n+  r = assoc_laguerrel(1u, 1u, 1.0l);\n+  r = assoc_legendre(1u, 1u, 1.0);\n+  r = assoc_legendref(1u, 1u, 1.0f);\n+  r = assoc_legendrel(1u, 1u, 1.0l);\n+  r = beta(1.0, 1.0);\n+  r = betaf(1.0f, 1.0f);\n+  r = betal(1.0l, 1.0l);\n+  r = comp_ellint_1(1.0);\n+  r = comp_ellint_1f(1.0f);\n+  r = comp_ellint_1l(1.0l);\n+  r = comp_ellint_2(1.0);\n+  r = comp_ellint_2f(1.0f);\n+  r = comp_ellint_2l(1.0l);\n+  r = comp_ellint_3(1.0, 1.0);\n+  r = comp_ellint_3f(1.0f, 1.0f);\n+  r = comp_ellint_3l(1.0l, 1.0l);\n+  r = cyl_bessel_i(1.0, 1.0);\n+  r = cyl_bessel_if(1.0f, 1.0f);\n+  r = cyl_bessel_il(1.0l, 1.0l);\n+  r = cyl_bessel_j(1.0, 1.0);\n+  r = cyl_bessel_jf(1.0f, 1.0f);\n+  r = cyl_bessel_jl(1.0l, 1.0l);\n+  r = cyl_bessel_k(1.0, 1.0);\n+  r = cyl_bessel_kf(1.0f, 1.0f);\n+  r = cyl_bessel_kl(1.0l, 1.0l);\n+  r = cyl_neumann(1.0, 1.0);\n+  r = cyl_neumannf(1.0f, 1.0f);\n+  r = cyl_neumannl(1.0l, 1.0l);\n+  r = ellint_1(1.0, 1.0);\n+  r = ellint_1f(1.0f, 1.0f);\n+  r = ellint_1l(1.0l, 1.0l);\n+  r = ellint_2(1.0, 1.0);\n+  r = ellint_2f(1.0f, 1.0f);\n+  r = ellint_2l(1.0l, 1.0l);\n+  r = ellint_3(1.0, 1.0, 1.0);\n+  r = ellint_3f(1.0f, 1.0f, 1.0f);\n+  r = ellint_3l(1.0l, 1.0l, 1.0l);\n+  r = expint(1.0);\n+  r = expintf(1.0f);\n+  r = expintl(1.0l);\n+  r = hermite(1u, 1.0);\n+  r = hermitef(1u, 1.0f);\n+  r = hermitel(1u, 1.0l);\n+  r = laguerre(1u, 1.0);\n+  r = laguerref(1u, 1.0f);\n+  r = laguerrel(1u, 1.0l);\n+  r = legendre(1u, 1.0);\n+  r = legendref(1u, 1.0f);\n+  r = legendrel(1u, 1.0l);\n+  r = riemann_zeta(1.0);\n+  r = riemann_zetaf(1.0f);\n+  r = riemann_zetal(1.0l);\n+  r = sph_bessel(1u, 1.0);\n+  r = sph_besself(1u, 1.0f);\n+  r = sph_bessell(1u, 1.0l);\n+  r = sph_legendre(1u, 1u, 1.0);\n+  r = sph_legendref(1u, 1u, 1.0f);\n+  r = sph_legendrel(1u, 1u, 1.0l);\n+  r = sph_neumann(1u, 1.0);\n+  r = sph_neumannf(1u, 1.0f);\n+  r = sph_neumannl(1u, 1.0l);\n+}"}]}