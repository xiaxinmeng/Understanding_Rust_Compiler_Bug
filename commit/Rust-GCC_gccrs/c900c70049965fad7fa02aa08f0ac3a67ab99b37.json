{"sha": "c900c70049965fad7fa02aa08f0ac3a67ab99b37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkwMGM3MDA0OTk2NWZhZDdmYTAyYWEwOGYwYWMzYTY3YWI5OWIzNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-08T14:46:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-08T15:24:15Z"}, "message": "Fix missing information in exception messages with -gnateE\n\nThe information was missing in cases the front-end was able to turn\nthe range comparison into a simple comparison.\n\n\t* gcc-interface/trans.c (Raise_Error_to_gnu): Always compute a lower\n\tbound and an upper bound for use by the -gnateE switch for range and\n\tcomparison operators.", "tree": {"sha": "d167c4f9ef639b8c4cedbfd3f86f168a91d551cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d167c4f9ef639b8c4cedbfd3f86f168a91d551cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c900c70049965fad7fa02aa08f0ac3a67ab99b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c900c70049965fad7fa02aa08f0ac3a67ab99b37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c900c70049965fad7fa02aa08f0ac3a67ab99b37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c900c70049965fad7fa02aa08f0ac3a67ab99b37/comments", "author": null, "committer": null, "parents": [{"sha": "db4062a0cbe00ce4075a4d7f68a2ff15165cd72b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4062a0cbe00ce4075a4d7f68a2ff15165cd72b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4062a0cbe00ce4075a4d7f68a2ff15165cd72b"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "1a475903da0ef313ad0a737a5f4c78e9445242e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c900c70049965fad7fa02aa08f0ac3a67ab99b37/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c900c70049965fad7fa02aa08f0ac3a67ab99b37/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c900c70049965fad7fa02aa08f0ac3a67ab99b37", "patch": "@@ -1,3 +1,9 @@\n+2020-05-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Raise_Error_to_gnu): Always compute a lower\n+\tbound and an upper bound for use by the -gnateE switch for range and\n+\tcomparison operators.\n+\n 2020-05-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_param): Do not make a variant of"}, {"sha": "802adc92db1307c20dbad12d46853cee94fea4c0", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c900c70049965fad7fa02aa08f0ac3a67ab99b37/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c900c70049965fad7fa02aa08f0ac3a67ab99b37/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=c900c70049965fad7fa02aa08f0ac3a67ab99b37", "patch": "@@ -6501,13 +6501,14 @@ static tree\n Raise_Error_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n {\n   const Node_Kind kind = Nkind (gnat_node);\n-  const int reason = UI_To_Int (Reason (gnat_node));\n   const Node_Id gnat_cond = Condition (gnat_node);\n+  const int reason = UI_To_Int (Reason (gnat_node));\n   const bool with_extra_info\n     = Exception_Extra_Info\n       && !No_Exception_Handlers_Set ()\n       && No (get_exception_label (kind));\n   tree gnu_result = NULL_TREE, gnu_cond = NULL_TREE;\n+  Node_Id gnat_rcond;\n \n   /* The following processing is not required for correctness.  Its purpose is\n      to give more precise error messages and to record some information.  */\n@@ -6521,51 +6522,51 @@ Raise_Error_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n     case CE_Index_Check_Failed:\n     case CE_Range_Check_Failed:\n     case CE_Invalid_Data:\n-      if (Present (gnat_cond) && Nkind (gnat_cond) == N_Op_Not)\n+      if (No (gnat_cond) || Nkind (gnat_cond) != N_Op_Not)\n+\tbreak;\n+      gnat_rcond = Right_Opnd (gnat_cond);\n+      if (Nkind (gnat_rcond) == N_In\n+\t  || Nkind (gnat_rcond) == N_Op_Ge\n+\t  || Nkind (gnat_rcond) == N_Op_Le)\n \t{\n-\t  Node_Id gnat_index, gnat_type;\n-\t  tree gnu_type, gnu_index, gnu_low_bound, gnu_high_bound, disp;\n-\t  bool neg_p;\n+\t  const Node_Id gnat_index = Left_Opnd (gnat_rcond);\n+\t  const Node_Id gnat_type = Etype (gnat_index);\n+\t  tree gnu_index = gnat_to_gnu (gnat_index);\n+\t  tree gnu_type = get_unpadded_type (gnat_type);\n+\t  tree gnu_low_bound, gnu_high_bound, disp;\n \t  struct loop_info_d *loop;\n+\t  bool neg_p;\n \n-\t  switch (Nkind (Right_Opnd (gnat_cond)))\n+\t  switch (Nkind (gnat_rcond))\n \t    {\n \t    case N_In:\n-\t      Range_to_gnu (Right_Opnd (Right_Opnd (gnat_cond)),\n+\t      Range_to_gnu (Right_Opnd (gnat_rcond),\n \t\t\t    &gnu_low_bound, &gnu_high_bound);\n \t      break;\n \n \t    case N_Op_Ge:\n-\t      gnu_low_bound = gnat_to_gnu (Right_Opnd (Right_Opnd (gnat_cond)));\n-\t      gnu_high_bound = NULL_TREE;\n+\t      gnu_low_bound = gnat_to_gnu (Right_Opnd (gnat_rcond));\n+\t      gnu_high_bound = TYPE_MAX_VALUE (gnu_type);\n \t      break;\n \n \t    case N_Op_Le:\n-\t      gnu_low_bound = NULL_TREE;\n-\t      gnu_high_bound = gnat_to_gnu (Right_Opnd (Right_Opnd (gnat_cond)));\n+\t      gnu_low_bound = TYPE_MIN_VALUE (gnu_type);\n+\t      gnu_high_bound = gnat_to_gnu (Right_Opnd (gnat_rcond));\n \t      break;\n \n \t    default:\n-\t      goto common;\n+\t      gcc_unreachable ();\n \t    }\n \n-\t  gnat_index = Left_Opnd (Right_Opnd (gnat_cond));\n-\t  gnat_type = Etype (gnat_index);\n-\t  gnu_type = maybe_character_type (get_unpadded_type (gnat_type));\n-\t  gnu_index = gnat_to_gnu (gnat_index);\n-\n+\t  gnu_type = maybe_character_type (gnu_type);\n \t  if (TREE_TYPE (gnu_index) != gnu_type)\n \t    {\n-\t      if (gnu_low_bound)\n-\t\tgnu_low_bound = convert (gnu_type, gnu_low_bound);\n-\t      if (gnu_high_bound)\n-\t\tgnu_high_bound = convert (gnu_type, gnu_high_bound);\n+\t      gnu_low_bound = convert (gnu_type, gnu_low_bound);\n+\t      gnu_high_bound = convert (gnu_type, gnu_high_bound);\n \t      gnu_index = convert (gnu_type, gnu_index);\n \t    }\n \n \t  if (with_extra_info\n-\t      && gnu_low_bound\n-\t      && gnu_high_bound\n \t      && Known_Esize (gnat_type)\n \t      && UI_To_Int (Esize (gnat_type)) <= 32)\n \t    gnu_result\n@@ -6630,8 +6631,8 @@ Raise_Error_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n       break;\n     }\n \n-  /* The following processing does the common work.  */\n-common:\n+  /* The following processing does the real work, but we must nevertheless make\n+     sure not to override the result of the previous processing.  */\n   if (!gnu_result)\n     gnu_result = build_call_raise (reason, gnat_node, kind);\n   set_expr_location_from_node (gnu_result, gnat_node);\n@@ -9134,6 +9135,7 @@ add_cleanup (tree gnu_cleanup, Node_Id gnat_node)\n {\n   if (Present (gnat_node))\n     set_expr_location_from_node (gnu_cleanup, gnat_node, true);\n+\n   /* An EH_ELSE_EXPR must be by itself, and that's all we need when we\n      use it.  The assert below makes sure that is so.  Should we ever\n      need more than that, we could combine EH_ELSE_EXPRs, and copy"}]}