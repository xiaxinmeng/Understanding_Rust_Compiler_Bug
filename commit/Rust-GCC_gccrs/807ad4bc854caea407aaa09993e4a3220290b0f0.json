{"sha": "807ad4bc854caea407aaa09993e4a3220290b0f0", "node_id": "C_kwDOANBUbNoAKDgwN2FkNGJjODU0Y2FlYTQwN2FhYTA5OTkzZTRhMzIyMDI5MGIwZjA", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-10-06T04:55:19Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-12-15T21:28:05Z"}, "message": "libstdc++: Overload std::__to_address for __gnu_cxx::__normal_iterator.\n\nPrefer to overload __to_address to partially specialize std::pointer_traits because\nstd::pointer_traits would be mostly useless. Moreover partial specialization of\npointer_traits<__normal_iterator<P, C>> fails to rebind C, so you get incorrect types\nlike __normal_iterator<long*, vector<int>>. In the case of __gnu_debug::_Safe_iterator\nthe to_pointer method is impossible to implement correctly because we are missing\nthe parent container to associate the iterator to.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator.h\n\t(std::pointer_traits<__gnu_cxx::__normal_iterator<>>): Remove.\n\t(std::__to_address(const __gnu_cxx::__normal_iterator<>&)): New for C++11 to C++17.\n\t* include/debug/safe_iterator.h\n\t(std::__to_address(const __gnu_debug::_Safe_iterator<__gnu_cxx::__normal_iterator<>,\n\t_Sequence>&)): New for C++11 to C++17.\n\t* testsuite/24_iterators/normal_iterator/to_address.cc: Add check on std::vector::iterator\n\tto validate both __gnu_cxx::__normal_iterator<> __to_address overload in normal mode and\n\t__gnu_debug::_Safe_iterator in _GLIBCXX_DEBUG mode.", "tree": {"sha": "a0886b37d0ad3f7540b5e8556f3973d340e74035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0886b37d0ad3f7540b5e8556f3973d340e74035"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/807ad4bc854caea407aaa09993e4a3220290b0f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807ad4bc854caea407aaa09993e4a3220290b0f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807ad4bc854caea407aaa09993e4a3220290b0f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807ad4bc854caea407aaa09993e4a3220290b0f0/comments", "author": null, "committer": null, "parents": [{"sha": "fd43568cc54e17c8b4a845677872c6282bc6dbb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd43568cc54e17c8b4a845677872c6282bc6dbb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd43568cc54e17c8b4a845677872c6282bc6dbb7"}], "stats": {"total": 66, "additions": 40, "deletions": 26}, "files": [{"sha": "ac9342112f4070e623be88c2ccc9703332a48c10", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807ad4bc854caea407aaa09993e4a3220290b0f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807ad4bc854caea407aaa09993e4a3220290b0f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=807ad4bc854caea407aaa09993e4a3220290b0f0", "patch": "@@ -1349,32 +1349,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n \n-  // Need to specialize pointer_traits because the primary template will\n-  // deduce element_type of __normal_iterator<T*, C> as T* rather than T.\n+#if __cplusplus <= 201703L\n+  // Need to overload __to_address because the pointer_traits primary template\n+  // will deduce element_type of __normal_iterator<T*, C> as T* rather than T.\n   template<typename _Iterator, typename _Container>\n-    struct pointer_traits<__gnu_cxx::__normal_iterator<_Iterator, _Container>>\n-    {\n-    private:\n-      using _Base = pointer_traits<_Iterator>;\n-\n-    public:\n-      using element_type = typename _Base::element_type;\n-      using pointer = __gnu_cxx::__normal_iterator<_Iterator, _Container>;\n-      using difference_type = typename _Base::difference_type;\n-\n-      template<typename _Tp>\n-\tusing rebind = __gnu_cxx::__normal_iterator<_Tp, _Container>;\n-\n-      static pointer\n-      pointer_to(element_type& __e) noexcept\n-      { return pointer(_Base::pointer_to(__e)); }\n-\n-#if __cplusplus >= 202002L\n-      static element_type*\n-      to_address(pointer __p) noexcept\n-      { return __p.base(); }\n+    constexpr auto\n+    __to_address(const __gnu_cxx::__normal_iterator<_Iterator,\n+\t\t\t\t\t\t    _Container>& __it) noexcept\n+    -> decltype(std::__to_address(__it.base()))\n+    { return std::__to_address(__it.base()); }\n #endif\n-    };\n \n   /**\n    * @addtogroup iterators"}, {"sha": "9c821c82e174be878e84858db2090c928511b9e3", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807ad4bc854caea407aaa09993e4a3220290b0f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807ad4bc854caea407aaa09993e4a3220290b0f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=807ad4bc854caea407aaa09993e4a3220290b0f0", "patch": "@@ -1013,6 +1013,23 @@ namespace __gnu_debug\n \n } // namespace __gnu_debug\n \n+#if __cplusplus >= 201103L && __cplusplus <= 201703L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Iterator, typename _Container, typename _Sequence>\n+    constexpr auto\n+    __to_address(const __gnu_debug::_Safe_iterator<\n+\t\t __gnu_cxx::__normal_iterator<_Iterator, _Container>,\n+\t\t _Sequence>& __it) noexcept\n+    -> decltype(std::__to_address(__it.base().base()))\n+    { return std::__to_address(__it.base().base()); }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+#endif\n+\n #undef _GLIBCXX_DEBUG_VERIFY_DIST_OPERANDS\n #undef _GLIBCXX_DEBUG_VERIFY_REL_OPERANDS\n #undef _GLIBCXX_DEBUG_VERIFY_EQ_OPERANDS"}, {"sha": "6afc6540609ce4c2ffac98a1dd7418efd39fd6d5", "filename": "libstdc++-v3/testsuite/24_iterators/normal_iterator/to_address.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807ad4bc854caea407aaa09993e4a3220290b0f0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fto_address.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807ad4bc854caea407aaa09993e4a3220290b0f0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fto_address.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fto_address.cc?ref=807ad4bc854caea407aaa09993e4a3220290b0f0", "patch": "@@ -1,6 +1,19 @@\n // { dg-do compile { target { c++11 } } }\n #include <string>\n+#include <vector>\n #include <memory>\n \n-char* p = std::__to_address(std::string(\"1\").begin());\n-const char* q = std::__to_address(std::string(\"2\").cbegin());\n+#include <testsuite_allocator.h>\n+\n+char* p __attribute__((unused))\n+  = std::__to_address(std::string(\"1\").begin());\n+const char* q __attribute__((unused))\n+  = std::__to_address(std::string(\"2\").cbegin());\n+int* r __attribute__((unused))\n+  = std::__to_address(std::vector<int>(1, 1).begin());\n+const int* s __attribute__((unused))\n+  = std::__to_address(std::vector<int>(1, 1).cbegin());\n+int* t __attribute__((unused))\n+  = std::__to_address(std::vector<int, __gnu_test::CustomPointerAlloc<int>>(1, 1).begin());\n+const int* u __attribute__((unused))\n+  = std::__to_address(std::vector<int, __gnu_test::CustomPointerAlloc<int>>(1, 1).cbegin());"}]}