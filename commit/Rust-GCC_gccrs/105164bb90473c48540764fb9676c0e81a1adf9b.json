{"sha": "105164bb90473c48540764fb9676c0e81a1adf9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA1MTY0YmI5MDQ3M2M0ODU0MDc2NGZiOTY3NmMwZTgxYTFhZGY5Yg==", "commit": {"author": {"name": "Tim Shen", "email": "timshen91@gmail.com", "date": "2013-07-25T14:59:43Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2013-07-25T14:59:43Z"}, "message": "Add documents and comments.\n\n2013-07-25  Tim Shen  <timshen91@gmail.com>\n\n\tAdd documents and comments.\n\t* include/bits/regex.h: Documents and comments.\n\t* include/bits/regex_grep_matcher.h: Likewise.\n\t* include/bits/regex_grep_matcher.tcc: Likewise.\n\t* testsuite/28_regex/iterators/regex_iterator/char/string_position_01.cc:\n\tNew.\n\nFrom-SVN: r201244", "tree": {"sha": "2d551763287519673b7de2e5dcf859378b69868e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d551763287519673b7de2e5dcf859378b69868e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/105164bb90473c48540764fb9676c0e81a1adf9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105164bb90473c48540764fb9676c0e81a1adf9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105164bb90473c48540764fb9676c0e81a1adf9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105164bb90473c48540764fb9676c0e81a1adf9b/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00b7527b254adcf0898964d03983dd0eed0c78c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b7527b254adcf0898964d03983dd0eed0c78c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b7527b254adcf0898964d03983dd0eed0c78c9"}], "stats": {"total": 108, "additions": 82, "deletions": 26}, "files": [{"sha": "df3698fbf7a73913090bb14281e1cbb7d6cd3cb6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105164bb90473c48540764fb9676c0e81a1adf9b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105164bb90473c48540764fb9676c0e81a1adf9b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=105164bb90473c48540764fb9676c0e81a1adf9b", "patch": "@@ -1,3 +1,12 @@\n+2013-07-25  Tim Shen  <timshen91@gmail.com>\n+\n+\tAdd documents and comments.\n+\t* include/bits/regex.h: Documents and comments.\n+\t* include/bits/regex_grep_matcher.h: Likewise.\n+\t* include/bits/regex_grep_matcher.tcc: Likewise.\n+\t* testsuite/28_regex/iterators/regex_iterator/char/string_position_01.cc:\n+\tNew.\n+\n 2013-07-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/57976"}, {"sha": "569284847855936afb8ebbdd4322f06b22413c4f", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105164bb90473c48540764fb9676c0e81a1adf9b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105164bb90473c48540764fb9676c0e81a1adf9b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=105164bb90473c48540764fb9676c0e81a1adf9b", "patch": "@@ -61,7 +61,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           _BaseType _M_base;\n           unsigned char _M_extended;\n           static constexpr unsigned char _S_under = 1 << 0;\n-          // _S_blank should be removed in the future, when locale's complete.\n+          // FIXME: _S_blank should be removed in the future, when locale's complete.\n           static constexpr unsigned char _S_blank = 1 << 1;\n           static constexpr unsigned char _S_valid_mask = 0x3;\n \n@@ -2364,7 +2364,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @param __flags [IN]  Search policy flags.\n    * @retval true  A match was found within the string.\n    * @retval false No match was found within the string.\n-   * @doctodo\n    *\n    * @throws an exception of type regex_error.\n    */\n@@ -2388,7 +2387,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @retval true  A match was found within the string.\n    * @retval false No match was found within the string, the content of %m is\n    *               undefined.\n-   * @doctodo\n    *\n    * @throws an exception of type regex_error.\n    */\n@@ -2408,7 +2406,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @param __f [IN]  Search policy flags.\n    * @retval true  A match was found within the string.\n    * @retval false No match was found within the string.\n-   * @doctodo\n    *\n    * @throws an exception of type regex_error.\n    */\n@@ -2427,7 +2424,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @param __flags [IN]  Search policy flags.\n    * @retval true  A match was found within the string.\n    * @retval false No match was found within the string.\n-   * @doctodo\n    *\n    * @throws an exception of type regex_error.\n    */\n@@ -2538,7 +2534,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        * @brief Provides a singular iterator, useful for indicating\n        * one-past-the-end of a range.\n-       * @doctodo\n        */\n       regex_iterator()\n       : _M_match()\n@@ -2550,7 +2545,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @param __b  [IN] One-past-the-end of the text range to search.\n        * @param __re [IN] The regular expression to match.\n        * @param __m  [IN] Policy flags for match rules.\n-       * @doctodo\n        */\n       regex_iterator(_Bi_iter __a, _Bi_iter __b, const regex_type& __re,\n \t\t     regex_constants::match_flag_type __m\n@@ -2560,51 +2554,50 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /**\n        * Copy constructs a %regex_iterator.\n-       * @doctodo\n        */\n       regex_iterator(const regex_iterator& __rhs) = default;\n       \n       /**\n-       * @doctodo\n+       * @brief Assigns one %regex_iterator to another.\n        */\n       regex_iterator&\n       operator=(const regex_iterator& __rhs) = default;\n       \n       /**\n-       * @doctodo\n+       * @brief Tests the equivalence of two regex iterators.\n        */\n       bool\n       operator==(const regex_iterator& __rhs) const;\n       \n       /**\n-       * @doctodo\n+       * @brief Tests the inequivalence of two regex iterators.\n        */\n       bool\n       operator!=(const regex_iterator& __rhs) const\n       { return !(*this == __rhs); }\n       \n       /**\n-       * @doctodo\n+       * @brief Dereferences a %regex_iterator.\n        */\n       const value_type&\n       operator*() const\n       { return _M_match; }\n       \n       /**\n-       * @doctodo\n+       * @brief Selects a %regex_iterator member.\n        */\n       const value_type*\n       operator->() const\n       { return &_M_match; }\n       \n       /**\n-       * @doctodo\n+       * @brief Increments a %regex_iterator.\n        */\n       regex_iterator&\n       operator++();\n       \n       /**\n-       * @doctodo\n+       * @brief Postincrements a %regex_iterator.\n        */\n       regex_iterator\n       operator++(int)\n@@ -2615,7 +2608,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n       \n     private:\n-      // these members are shown for exposition only:\n       _Bi_iter                         _M_begin;\n       _Bi_iter                         _M_end;\n       const regex_type*                _M_pregex;\n@@ -2645,6 +2637,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     regex_iterator<_Bi_iter, _Ch_type, _Rx_traits>::\n     operator++()\n     {\n+      // FIXME: In all cases in which the call to regex_search returns true,\n+      // match.prefix().first shall be equal to the previous value of\n+      // match[0].second, and for each index i in the half-open range\n+      // [0, match.size()) for which match[i].matched is true,\n+      // match[i].position() shall return distance(begin, match[i].first).\n+      // [28.12.1.4.5]\n       if (_M_match[0].matched)\n         {\n           auto __start = _M_match[0].second;\n@@ -2726,8 +2724,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *                        - >0 enumerates only the indicated\n        *                          subexpression from a match within the text.\n        * @param __m          [IN] Policy flags for match rules.\n-       *\n-       * @doctodo\n        */\n       regex_token_iterator(_Bi_iter __a, _Bi_iter __b, const regex_type& __re,\n \t\t\t   int __submatch = 0,\n@@ -2744,8 +2740,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @param __submatches [IN] A list of subexpressions to return for each\n        *                          regular expression match within the text.\n        * @param __m          [IN] Policy flags for match rules.\n-       *\n-       * @doctodo\n        */\n       regex_token_iterator(_Bi_iter __a, _Bi_iter __b,\n \t\t\t   const regex_type& __re,\n@@ -2763,8 +2757,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @param __submatches [IN] A list of subexpressions to return for each\n        *                          regular expression match within the text.\n        * @param __m          [IN] Policy flags for match rules.\n-       *\n-       * @doctodo\n        */\n       regex_token_iterator(_Bi_iter __a, _Bi_iter __b,\n \t\t\t   const regex_type& __re,\n@@ -2782,8 +2774,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @param __submatches [IN] A list of subexpressions to return for each\n        *                          regular expression match within the text.\n        * @param __m          [IN] Policy flags for match rules.\n-       *\n-       * @doctodo\n        */\n       template<std::size_t _Nm>\n         regex_token_iterator(_Bi_iter __a, _Bi_iter __b,\n@@ -2859,7 +2849,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return __tmp;\n       }\n \n-    private: // data members for exposition only:\n+    private:\n       typedef regex_iterator<_Bi_iter, _Ch_type, _Rx_traits> _Position;\n \n       void\n@@ -2884,7 +2874,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::size_t       _M_n;\n       std::vector<int>  _M_subs;\n \n-      bool              _M_has_m1; // subs contains -1\n+      // Show whether _M_subs contains -1\n+      bool              _M_has_m1;\n     };\n \n   template<typename _Bi_iter,"}, {"sha": "8686cc933be38e1243bfbd17b8eca28c078a9527", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105164bb90473c48540764fb9676c0e81a1adf9b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105164bb90473c48540764fb9676c0e81a1adf9b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h?ref=105164bb90473c48540764fb9676c0e81a1adf9b", "patch": "@@ -127,16 +127,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_pattern(__p), _M_results(__r)\n     { }\n \n+    // Set matched when string exactly match the pattern.\n     void\n     _M_match();\n \n+    // Set matched when some prefix of the string matches the pattern.\n     void\n     _M_search_from_first();\n \n+    // TODO: in the future this function will be _M_match, in another class.\n     bool\n     _M_dfs_match()\n     { return _M_dfs<true>(_M_nfa->_M_start()); }\n \n+    // TODO: in the future this function will be _M_search_from_first,\n+    // in another class.\n     bool\n     _M_dfs_search_from_first()\n     { return _M_dfs<false>(_M_nfa->_M_start()); }"}, {"sha": "dccdfda0bc18651611c95ffac7ec1ae6a7a08bf8", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.tcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105164bb90473c48540764fb9676c0e81a1adf9b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105164bb90473c48540764fb9676c0e81a1adf9b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc?ref=105164bb90473c48540764fb9676c0e81a1adf9b", "patch": "@@ -121,6 +121,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         case _S_opcode_alternative:\n           // Greedy mode by default. For non-greedy mode,\n           // swap _M_alt and _M_next.\n+          // TODO: Add greedy mode option.\n           __ret = _M_dfs<__match_mode>(__state._M_alt)\n             || _M_dfs<__match_mode>(__state._M_next);\n           break;"}, {"sha": "75ef0584b8ab8a24e5bbb80ff4bb6d5dd3c69140", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_iterator/char/string_position_01.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105164bb90473c48540764fb9676c0e81a1adf9b/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_position_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105164bb90473c48540764fb9676c0e81a1adf9b/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_position_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_position_01.cc?ref=105164bb90473c48540764fb9676c0e81a1adf9b", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+//\n+// 2013-07-25  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.12.1 regex_iterator\n+// Tests iter->position() behavior\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::regex re(\"asdf\");\n+  std::string s(\"asdfasdfasdf\");\n+  int i = 0;\n+  for (std::sregex_iterator it(s.begin(), s.end(), re);\n+       it != std::sregex_iterator();\n+       ++it, i++) {\n+      VERIFY( it->position() == 4 * i );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}