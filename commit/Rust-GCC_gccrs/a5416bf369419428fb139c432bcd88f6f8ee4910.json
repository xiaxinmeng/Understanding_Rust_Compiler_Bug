{"sha": "a5416bf369419428fb139c432bcd88f6f8ee4910", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU0MTZiZjM2OTQxOTQyOGZiMTM5YzQzMmJjZDg4ZjZmOGVlNDkxMA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-20T13:12:56Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-22T09:08:26Z"}, "message": "Make the OpenMP 'error' directive work for nvptx offloading\n\n... and add a minimum amount of offloading testing.\n\n(Leaving aside that 'fwrite' to 'stderr' probably wouldn't work anyway) the\n'fwrite' calls in 'libgomp/error.c:GOMP_warning', 'libgomp/error.c:GOMP_error'\ndrag in 'isatty', which isn't provided by my nvptx newlib build at present, so\nwe get, for example:\n\n    [...]\n    FAIL: libgomp.c/../libgomp.c-c++-common/declare_target-1.c (test for excess errors)\n    Excess errors:\n    unresolved symbol isatty\n    mkoffload: fatal error: [...]/build-gcc/./gcc/x86_64-pc-linux-gnu-accel-nvptx-none-gcc returned 1 exit status\n    [...]\n\n..., and many more.\n\nFix up for recent commit 0d973c0a0d90a0a302e7eda1a4d9709be3c5b102\n\"openmp: Implement the error directive\".\n\n\tlibgomp/\n\t* config/nvptx/error.c (fwrite, exit): Override, too.\n\t* testsuite/libgomp.c-c++-common/error-1.c: Add a minimum amount\n\tof offloading testing.\n\t* testsuite/libgomp.fortran/error-1.f90: Likewise.", "tree": {"sha": "5dc426a016ae6f9f0282608f2588258834736b2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dc426a016ae6f9f0282608f2588258834736b2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5416bf369419428fb139c432bcd88f6f8ee4910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5416bf369419428fb139c432bcd88f6f8ee4910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5416bf369419428fb139c432bcd88f6f8ee4910", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5416bf369419428fb139c432bcd88f6f8ee4910/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be4fa4ec7ffa16cb2b0e24f656ee0fcdf23b3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be4fa4ec7ffa16cb2b0e24f656ee0fcdf23b3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be4fa4ec7ffa16cb2b0e24f656ee0fcdf23b3e0"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "c55791e34b4d39696fbe497ed10c767dadde98e7", "filename": "libgomp/config/nvptx/error.c", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5416bf369419428fb139c432bcd88f6f8ee4910/libgomp%2Fconfig%2Fnvptx%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5416bf369419428fb139c432bcd88f6f8ee4910/libgomp%2Fconfig%2Fnvptx%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fnvptx%2Ferror.c?ref=a5416bf369419428fb139c432bcd88f6f8ee4910", "patch": "@@ -31,12 +31,38 @@\n #include <stdio.h>\n #include <stdlib.h>\n \n-#undef vfprintf\n-#undef fputs\n-#undef fputc\n \n+/* No 'FILE *stream's, just basic 'vprintf' etc.  */\n+\n+#undef vfprintf\n #define vfprintf(stream, fmt, list) vprintf (fmt, list)\n+\n+#undef fputs\n #define fputs(s, stream) printf (\"%s\", s)\n+\n+#undef fputc\n #define fputc(c, stream) printf (\"%c\", c)\n \n+#undef fwrite\n+#if 0\n+# define fwrite(ptr, size, nmemb, stream) \\\n+  printf (\"%.*s\", (int) (size * nmemb), (int) (size * nmemb), ptr)\n+/* ... prints literal '%.*s'.  */\n+#else\n+# define fwrite(ptr, size, nmemb, stream) \\\n+  do { \\\n+    /* Yuck!  */ \\\n+    for (size_t i = 0; i < size * nmemb; ++i) \\\n+      printf (\"%c\", ptr[i]); \\\n+  } while (0)\n+#endif\n+\n+\n+/* The 'exit (EXIT_FAILURE);' of an Fortran (only, huh?) OpenMP 'error'\n+   directive with 'severity (fatal)' causes a hang, so 'abort' instead of\n+   'exit'.  */\n+#undef exit\n+#define exit(status) abort ()\n+\n+\n #include \"../../error.c\""}, {"sha": "04c0519bf6334ea62926d59cfdc79d90380743b9", "filename": "libgomp/testsuite/libgomp.c-c++-common/error-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5416bf369419428fb139c432bcd88f6f8ee4910/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ferror-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5416bf369419428fb139c432bcd88f6f8ee4910/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ferror-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ferror-1.c?ref=a5416bf369419428fb139c432bcd88f6f8ee4910", "patch": "@@ -34,16 +34,26 @@ foo (int i, int x)\n int\n main ()\n {\n+  /* Initialize offloading early, so that any output this may produce doesn't\n+     disturb the 'dg-output' scanning below.  */\n+  #pragma omp target\n+  ;\n+\n   if (foo (5, 0) != 13 || foo (6, 1) != 17)\n     abort ();\n   #pragma omp error at (execution) severity (warning)\n   const char *msg = \"my message\" + 2;\n   #pragma omp error at (execution) severity (warning) message (msg + 1)\n+  #pragma omp target\n+  {\n+    #pragma omp error at (execution) severity (warning) message (\"hello from a distance\")\n+  }\n   #pragma omp error at (execution) severity (fatal) message (msg - 2)\n   #pragma omp error at (execution) severity (warning) message (\"foobar\")\n   return 0;\n }\n \n /* { dg-output \"libgomp: error directive encountered(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" } */\n /* { dg-output \"libgomp: error directive encountered: message(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" } */\n+/* { dg-output \"libgomp: error directive encountered: hello from a distance(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" } */\n /* { dg-output \"libgomp: fatal error: error directive encountered: my message\" } */"}, {"sha": "7c497fd002ed2da6861cb8d794335717a54ebd44", "filename": "libgomp/testsuite/libgomp.fortran/error-1.f90", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5416bf369419428fb139c432bcd88f6f8ee4910/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ferror-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5416bf369419428fb139c432bcd88f6f8ee4910/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ferror-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ferror-1.f90?ref=a5416bf369419428fb139c432bcd88f6f8ee4910", "patch": "@@ -37,6 +37,11 @@ program main\n   character(len=13) :: msg\n   character(len=:), allocatable :: msg2, msg3\n \n+  ! Initialize offloading early, so that any output this may produce doesn't\n+  ! disturb the 'dg-output' scanning below.\n+  !$omp target\n+  !$omp end target\n+\n   msg = \"my message\"\n   if (foo (5, 0) /= 15 .or. foo (7, 1) /= 16) &\n     stop 1\n@@ -47,6 +52,9 @@ program main\n   !$omp error at (execution) severity (warning)\n   !$omp error at (execution) severity (warning) message(trim(msg(4:)))\n   !$omp error at (execution) severity (warning) message (\"Farewell\")\n+  !$omp target\n+  !$omp error at (execution) severity (warning) message (\"ffrom a distanceee\"(2:16))\n+  !$omp end target\n   !$omp error at (execution) severity (warning) message (msg2)\n   !$omp error at (execution) severity (warning) message (msg(4:6))\n   !$omp error at (execution) severity (fatal) message (msg)\n@@ -73,6 +81,7 @@ subroutine bar(x, y, a, b)\n ! { dg-output \"libgomp: error directive encountered(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n ! { dg-output \"libgomp: error directive encountered: message(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n ! { dg-output \"libgomp: error directive encountered: Farewell(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n+! { dg-output \"libgomp: error directive encountered: from a distance(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n ! { dg-output \"libgomp: error directive encountered: Hello World(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n ! { dg-output \"libgomp: error directive encountered: mes(\\n|\\r|\\n\\r)(\\n|\\r|\\n\\r)\" }\n ! { dg-output \"libgomp: fatal error: error directive encountered: my message   (\\n|\\r|\\n\\r)\" }"}]}