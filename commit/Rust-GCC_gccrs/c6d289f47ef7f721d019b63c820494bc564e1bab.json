{"sha": "c6d289f47ef7f721d019b63c820494bc564e1bab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkMjg5ZjQ3ZWY3ZjcyMWQwMTliNjNjODIwNDk0YmM1NjRlMWJhYg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonber@gnat.com", "date": "2001-12-05T00:56:39Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-05T00:56:39Z"}, "message": "exp_util.adb (Must_Be_Aligned): Return false for a component of a record that has other packed components.\n\n\t* exp_util.adb (Must_Be_Aligned): Return false for a component of a\n\trecord that has other packed components.\n\nFrom-SVN: r47638", "tree": {"sha": "c23ca8a0ad4c53a3a5b5a4062b838af1113b06e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c23ca8a0ad4c53a3a5b5a4062b838af1113b06e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d289f47ef7f721d019b63c820494bc564e1bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d289f47ef7f721d019b63c820494bc564e1bab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d289f47ef7f721d019b63c820494bc564e1bab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d289f47ef7f721d019b63c820494bc564e1bab/comments", "author": null, "committer": null, "parents": [{"sha": "5917e80db6c2cad4ff2eec14f7a9ced3012d25b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5917e80db6c2cad4ff2eec14f7a9ced3012d25b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5917e80db6c2cad4ff2eec14f7a9ced3012d25b9"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "0f72ac5f331f3e35f9e1b3b0c6431a019da4c84a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d289f47ef7f721d019b63c820494bc564e1bab/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d289f47ef7f721d019b63c820494bc564e1bab/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c6d289f47ef7f721d019b63c820494bc564e1bab", "patch": "@@ -1,3 +1,8 @@\n+2001-12-04  Ed Schonberg <schonber@gnat.com>\n+\n+\t* exp_util.adb (Must_Be_Aligned): Return false for a component of a \n+\trecord that has other packed components.\n+\n 2001-12-04  Douglass B. Rupp <rupp@gnat.com>\n \n \t* adaint.c: Minor cleanups."}, {"sha": "4cdd988aeebf363036b06f94b5bdbab330bc1b80", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d289f47ef7f721d019b63c820494bc564e1bab/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d289f47ef7f721d019b63c820494bc564e1bab/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c6d289f47ef7f721d019b63c820494bc564e1bab", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.2 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -2497,6 +2497,30 @@ package body Exp_Util is\n    function Must_Be_Aligned (Obj : Node_Id) return Boolean is\n       Typ : constant Entity_Id := Etype (Obj);\n \n+      function In_Partially_Packed_Record (Comp : Entity_Id) return Boolean;\n+      --  If the component is in a record that contains previous packed\n+      --  components, consider it unaligned because the back-end might\n+      --  choose to pack the rest of the record. Lead to less efficient code,\n+      --  but safer vis-a-vis of back-end choices.\n+\n+      function In_Partially_Packed_Record (Comp : Entity_Id) return Boolean is\n+         Rec_Type : constant Entity_Id := Scope (Comp);\n+         Prev_Comp : Entity_Id;\n+      begin\n+         Prev_Comp := First_Entity (Rec_Type);\n+         while Present (Prev_Comp) loop\n+            if Is_Packed (Etype (Prev_Comp)) then\n+               return True;\n+\n+            elsif Prev_Comp = Comp then\n+               return False;\n+            end if;\n+\n+            Next_Entity (Prev_Comp);\n+         end loop;\n+\n+         return False;\n+      end  In_Partially_Packed_Record;\n    begin\n       --  If object is strictly aligned, we can quit now\n \n@@ -2537,6 +2561,9 @@ package body Exp_Util is\n          elsif Present (Component_Clause (Entity (Selector_Name (Obj)))) then\n             return False;\n \n+         elsif In_Partially_Packed_Record (Entity (Selector_Name (Obj))) then\n+            return False;\n+\n          --  In all other cases, go look at prefix\n \n          else"}]}