{"sha": "e86aefb8e955a9545ffd16c960ff70cbad5fc9ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2YWVmYjhlOTU1YTk1NDVmZmQxNmM5NjBmZjcwY2JhZDVmYzlhZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-08-12T19:40:37Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-08-12T19:40:37Z"}, "message": "vsx.md (vsx_concat_<mode>): Add support for the ISA 3.0 MTVSRDD instruction.\n\n[gcc]\n2016-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/vsx.md (vsx_concat_<mode>): Add support for the\n\tISA 3.0 MTVSRDD instruction.\n\t(vsx_splat_<mode>): Change cpu type of MTVSRDD instruction to\n\tvecperm.\n\n[gcc/testsuite]\n2016-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/vec-init-1.c: New tests to test various\n\tvector initialization options.\n\t* gcc.target/powerpc/vec-init-2.c: Likewise.\n\t* gcc.target/powerpc/vec-init-3.c: New test to make sure MTVSRDD\n\tis generated on ISA 3.0.\n\nFrom-SVN: r239428", "tree": {"sha": "4d26a414fc4a986fb7a186ae3f68288ec0678c07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d26a414fc4a986fb7a186ae3f68288ec0678c07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/comments", "author": null, "committer": null, "parents": [{"sha": "b1ad9be2e8170ead78f7522e7647111f3bc0dc6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ad9be2e8170ead78f7522e7647111f3bc0dc6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1ad9be2e8170ead78f7522e7647111f3bc0dc6f"}], "stats": {"total": 387, "additions": 380, "deletions": 7}, "files": [{"sha": "c920e7af67c470cbc7d1901b694c269668fd2a51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e86aefb8e955a9545ffd16c960ff70cbad5fc9ad", "patch": "@@ -1,3 +1,10 @@\n+2016-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/vsx.md (vsx_concat_<mode>): Add support for the\n+\tISA 3.0 MTVSRDD instruction.\n+\t(vsx_splat_<mode>): Change cpu type of MTVSRDD instruction to\n+\tvecperm.\n+\n 2016-08-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR tree-optimization/71083"}, {"sha": "f64b4d8af20617de4132e05ebca4853a6ec30b48", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=e86aefb8e955a9545ffd16c960ff70cbad5fc9ad", "patch": "@@ -1925,16 +1925,24 @@\n \n ;; Build a V2DF/V2DI vector from two scalars\n (define_insn \"vsx_concat_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n+  [(set (match_operand:VSX_D 0 \"gpc_reg_operand\" \"=<VSa>,we\")\n \t(vec_concat:VSX_D\n-\t (match_operand:<VS_scalar> 1 \"vsx_register_operand\" \"<VS_64reg>,<VSa>\")\n-\t (match_operand:<VS_scalar> 2 \"vsx_register_operand\" \"<VS_64reg>,<VSa>\")))]\n+\t (match_operand:<VS_scalar> 1 \"gpc_reg_operand\" \"<VS_64reg>,r\")\n+\t (match_operand:<VS_scalar> 2 \"gpc_reg_operand\" \"<VS_64reg>,r\")))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n-  if (BYTES_BIG_ENDIAN)\n-    return \"xxpermdi %x0,%x1,%x2,0\";\n+  if (which_alternative == 0)\n+    return (BYTES_BIG_ENDIAN\n+\t    ? \"xxpermdi %x0,%x1,%x2,0\"\n+\t    : \"xxpermdi %x0,%x2,%x1,0\");\n+\n+  else if (which_alternative == 1)\n+    return (BYTES_BIG_ENDIAN\n+\t    ? \"mtvsrdd %x0,%1,%2\"\n+\t    : \"mtvsrdd %x0,%2,%1\");\n+\n   else\n-    return \"xxpermdi %x0,%x2,%x1,0\";\n+    gcc_unreachable ();\n }\n   [(set_attr \"type\" \"vecperm\")])\n \n@@ -2664,7 +2672,7 @@\n    xxpermdi %x0,%x1,%x1,0\n    lxvdsx %x0,%y1\n    mtvsrdd %x0,%1,%1\"\n-  [(set_attr \"type\" \"vecperm,vecload,mftgpr\")])\n+  [(set_attr \"type\" \"vecperm,vecload,vecperm\")])\n \n ;; V4SI splat (ISA 3.0)\n ;; When SI's are allowed in VSX registers, add XXSPLTW support"}, {"sha": "34c1ab777af7c15e3775eadab037946454335834", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e86aefb8e955a9545ffd16c960ff70cbad5fc9ad", "patch": "@@ -1,3 +1,11 @@\n+2016-08-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-init-1.c: New tests to test various\n+\tvector initialization options.\n+\t* gcc.target/powerpc/vec-init-2.c: Likewise.\n+\t* gcc.target/powerpc/vec-init-3.c: New test to make sure MTVSRDD\n+\tis generated on ISA 3.0.\n+\n 2016-08-12  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR middle-end/71654"}, {"sha": "753330af49eb5d1c610738606d334a2182fec49f", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-1.c", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-1.c?ref=e86aefb8e955a9545ffd16c960ff70cbad5fc9ad", "patch": "@@ -0,0 +1,169 @@\n+/* { dg-do run { target { powerpc*-*-linux* } } } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+#define ELEMENTS -1, 2, 0, -123456\n+#define SPLAT 0x01234567\n+\n+vector int sv = (vector int) { ELEMENTS };\n+vector int splat = (vector int) { SPLAT, SPLAT, SPLAT, SPLAT };\n+vector int sv_global, sp_global;\n+static vector int sv_static, sp_static;\n+static const int expected[] = { ELEMENTS };\n+\n+extern void check (vector int a)\n+  __attribute__((__noinline__));\n+\n+extern void check_splat (vector int a)\n+  __attribute__((__noinline__));\n+\n+extern vector int pack_reg (int a, int b, int c, int d)\n+  __attribute__((__noinline__));\n+\n+extern vector int pack_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void pack_ptr (vector int *p, int a, int b, int c, int d)\n+  __attribute__((__noinline__));\n+\n+extern void pack_static (int a, int b, int c, int d)\n+  __attribute__((__noinline__));\n+\n+extern void pack_global (int a, int b, int c, int d)\n+  __attribute__((__noinline__));\n+\n+extern vector int splat_reg (int a)\n+  __attribute__((__noinline__));\n+\n+extern vector int splat_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void splat_ptr (vector int *p, int a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_static (int a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_global (int a)\n+  __attribute__((__noinline__));\n+\n+void\n+check (vector int a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_extract (a, i) != expected[i])\n+      abort ();\n+}\n+\n+void\n+check_splat (vector int a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_extract (a, i) != SPLAT)\n+      abort ();\n+}\n+\n+vector int\n+pack_reg (int a, int b, int c, int d)\n+{\n+  return (vector int) { a, b, c, d };\n+}\n+\n+vector int\n+pack_const (void)\n+{\n+  return (vector int) { ELEMENTS };\n+}\n+\n+void\n+pack_ptr (vector int *p, int a, int b, int c, int d)\n+{\n+  *p = (vector int) { a, b, c, d };\n+}\n+\n+void\n+pack_static (int a, int b, int c, int d)\n+{\n+  sv_static = (vector int) { a, b, c, d };\n+}\n+\n+void\n+pack_global (int a, int b, int c, int d)\n+{\n+  sv_global = (vector int) { a, b, c, d };\n+}\n+\n+vector int\n+splat_reg (int a)\n+{\n+  return (vector int) { a, a, a, a };\n+}\n+\n+vector int\n+splat_const (void)\n+{\n+  return (vector int) { SPLAT, SPLAT, SPLAT, SPLAT };\n+}\n+\n+void\n+splat_ptr (vector int *p, int a)\n+{\n+  *p = (vector int) { a, a, a, a };\n+}\n+\n+void\n+splat_static (int a)\n+{\n+  sp_static = (vector int) { a, a, a, a };\n+}\n+\n+void\n+splat_global (int a)\n+{\n+  sp_global = (vector int) { a, a, a, a };\n+}\n+\n+int main (void)\n+{\n+  vector int sv2, sv3;\n+\n+  check (sv);\n+\n+  check (pack_reg (ELEMENTS));\n+\n+  check (pack_const ());\n+\n+  pack_ptr (&sv2, ELEMENTS);\n+  check (sv2);\n+\n+  pack_static (ELEMENTS);\n+  check (sv_static);\n+\n+  pack_global (ELEMENTS);\n+  check (sv_global);\n+\n+  check_splat (splat);\n+\n+  check_splat (splat_reg (SPLAT));\n+\n+  check_splat (splat_const ());\n+\n+  splat_ptr (&sv2, SPLAT);\n+  check_splat (sv2);\n+\n+  splat_static (SPLAT);\n+  check_splat (sp_static);\n+\n+  splat_global (SPLAT);\n+  check_splat (sp_global);\n+\n+  return 0;\n+}"}, {"sha": "a9fe6f44e410bb75b687ffa56b79ea6f7001a907", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-2.c", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-2.c?ref=e86aefb8e955a9545ffd16c960ff70cbad5fc9ad", "patch": "@@ -0,0 +1,169 @@\n+/* { dg-do run { target { powerpc*-*-linux* && lp64 } } } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <altivec.h>\n+\n+#define ELEMENTS -12345678L, 9L\n+#define SPLAT 0x0123456789ABCDE\n+\n+vector long sv = (vector long) { ELEMENTS };\n+vector long splat = (vector long) { SPLAT, SPLAT };\n+vector long sv_global, sp_global;\n+static vector long sv_static, sp_static;\n+static const int expected[] = { ELEMENTS };\n+\n+extern void check (vector long a)\n+  __attribute__((__noinline__));\n+\n+extern void check_splat (vector long a)\n+  __attribute__((__noinline__));\n+\n+extern vector long pack_reg (long a, long b)\n+  __attribute__((__noinline__));\n+\n+extern vector long pack_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void pack_ptr (vector long *p, long a, long b)\n+  __attribute__((__noinline__));\n+\n+extern void pack_static (long a, long b)\n+  __attribute__((__noinline__));\n+\n+extern void pack_global (long a, long b)\n+  __attribute__((__noinline__));\n+\n+extern vector long splat_reg (long a)\n+  __attribute__((__noinline__));\n+\n+extern vector long splat_const (void)\n+  __attribute__((__noinline__));\n+\n+extern void splat_ptr (vector long *p, long a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_static (long a)\n+  __attribute__((__noinline__));\n+\n+extern void splat_global (long a)\n+  __attribute__((__noinline__));\n+\n+void\n+check (vector long a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_extract (a, i) != expected[i])\n+      abort ();\n+}\n+\n+void\n+check_splat (vector long a)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_extract (a, i) != SPLAT)\n+      abort ();\n+}\n+\n+vector long\n+pack_reg (long a, long b)\n+{\n+  return (vector long) { a, b };\n+}\n+\n+vector long\n+pack_const (void)\n+{\n+  return (vector long) { ELEMENTS };\n+}\n+\n+void\n+pack_ptr (vector long *p, long a, long b)\n+{\n+  *p = (vector long) { a, b };\n+}\n+\n+void\n+pack_static (long a, long b)\n+{\n+  sv_static = (vector long) { a, b };\n+}\n+\n+void\n+pack_global (long a, long b)\n+{\n+  sv_global = (vector long) { a, b };\n+}\n+\n+vector long\n+splat_reg (long a)\n+{\n+  return (vector long) { a, a };\n+}\n+\n+vector long\n+splat_const (void)\n+{\n+  return (vector long) { SPLAT, SPLAT };\n+}\n+\n+void\n+splat_ptr (vector long *p, long a)\n+{\n+  *p = (vector long) { a, a };\n+}\n+\n+void\n+splat_static (long a)\n+{\n+  sp_static = (vector long) { a, a };\n+}\n+\n+void\n+splat_global (long a)\n+{\n+  sp_global = (vector long) { a, a };\n+}\n+\n+int  main (void)\n+{\n+  vector long sv2, sv3;\n+\n+  check (sv);\n+\n+  check (pack_reg (ELEMENTS));\n+\n+  check (pack_const ());\n+\n+  pack_ptr (&sv2, ELEMENTS);\n+  check (sv2);\n+\n+  pack_static (ELEMENTS);\n+  check (sv_static);\n+\n+  pack_global (ELEMENTS);\n+  check (sv_global);\n+\n+  check_splat (splat);\n+\n+  check_splat (splat_reg (SPLAT));\n+\n+  check_splat (splat_const ());\n+\n+  splat_ptr (&sv2, SPLAT);\n+  check_splat (sv2);\n+\n+  splat_static (SPLAT);\n+  check_splat (sp_static);\n+\n+  splat_global (SPLAT);\n+  check_splat (sp_global);\n+\n+  return 0;\n+}"}, {"sha": "d6d546942da1b4f44639f70d095b944fb3e4e766", "filename": "gcc/testsuite/gcc.target/powerpc/vec-init-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86aefb8e955a9545ffd16c960ff70cbad5fc9ad/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-init-3.c?ref=e86aefb8e955a9545ffd16c960ff70cbad5fc9ad", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di\" } */\n+\n+vector long\n+merge (long a, long b)\n+{\n+  return (vector long) { a, b };\n+}\n+\n+/* { dg-final { scan-assembler \"mtvsrdd\" } } */"}]}