{"sha": "79cd820a29e05b45f5f58d9fd77917eb39b689f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzljZDgyMGEyOWUwNWI0NWY1ZjU4ZDlmZDc3OTE3ZWIzOWI2ODlmNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-03-10T12:52:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-03-10T12:52:52Z"}, "message": "i386.md (UNSPEC_C2_FLAG): New constant.\n\n        * config/i386/i386.md (UNSPEC_C2_FLAG): New constant.\n        (fpremxf4_i387, fprem1xf4_i387): Use UNSPEC_C2_FLAG.\n        (fmodxf3, fmod<mode>3, remainderxf3, remainder<mode>3):\n        Add LABEL_NUSES to emmitted label.\n        * config/i386/i386.c (ix86_emit_fp_unordered_jump): Add\n        branch probability value to emmitted jump insn.\n        * reg-stack.c (subst_stack_regs_pat)[UNSPEC]: Handle UNSPEC_C2_FLAG.\n        Do not check life information and do not re-arrange input operands\n        for UNSPEC_FSCALE_EXP, UNSPEC_FPREM_U and UNSPEC_FPREM1_U.\n\nFrom-SVN: r122793", "tree": {"sha": "2e4a027f4ef3b71468e37112f2ea5f7048100196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e4a027f4ef3b71468e37112f2ea5f7048100196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79cd820a29e05b45f5f58d9fd77917eb39b689f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cd820a29e05b45f5f58d9fd77917eb39b689f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79cd820a29e05b45f5f58d9fd77917eb39b689f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cd820a29e05b45f5f58d9fd77917eb39b689f6/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "343d66ade59f0f8b2a7e94bbdfa7240997efa8a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343d66ade59f0f8b2a7e94bbdfa7240997efa8a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/343d66ade59f0f8b2a7e94bbdfa7240997efa8a0"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "497177eb3e1e14e3bbbdc79cba95456a66663cc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cd820a29e05b45f5f58d9fd77917eb39b689f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cd820a29e05b45f5f58d9fd77917eb39b689f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79cd820a29e05b45f5f58d9fd77917eb39b689f6", "patch": "@@ -1,3 +1,16 @@\n+2007-03-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/31101\n+\t* config/i386/i386.md (UNSPEC_C2_FLAG): New constant.\n+\t(fpremxf4_i387, fprem1xf4_i387): Use UNSPEC_C2_FLAG.\n+\t(fmodxf3, fmod<mode>3, remainderxf3, remainder<mode>3):\n+\tAdd LABEL_NUSES to emmitted label.\n+\t* config/i386/i386.c (ix86_emit_fp_unordered_jump): Add\n+\tbranch probability value to emmitted jump insn.\n+\t* reg-stack.c (subst_stack_regs_pat)[UNSPEC]: Handle UNSPEC_C2_FLAG.\n+\tDo not check life information and do not re-arrange input operands\n+\tfor UNSPEC_FSCALE_EXP, UNSPEC_FPREM_U and UNSPEC_FPREM1_U.\n+\n 2007-03-10  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (sh_insn_length_adjustment): Adjust for"}, {"sha": "b4928ab5c7117328b8a66f6b7f9ae468df49e0f7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cd820a29e05b45f5f58d9fd77917eb39b689f6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cd820a29e05b45f5f58d9fd77917eb39b689f6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=79cd820a29e05b45f5f58d9fd77917eb39b689f6", "patch": "@@ -21032,7 +21032,9 @@ ix86_emit_fp_unordered_jump (rtx label)\n \t\t\t      gen_rtx_LABEL_REF (VOIDmode, label),\n \t\t\t      pc_rtx);\n   temp = gen_rtx_SET (VOIDmode, pc_rtx, temp);\n+\n   emit_jump_insn (temp);\n+  predict_jump (REG_BR_PROB_BASE * 10 / 100);\n }\n \n /* Output code to perform a log1p XFmode calculation.  */"}, {"sha": "4ec12fa5c3681610a6546c6dbc3ab367f0b37677", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cd820a29e05b45f5f58d9fd77917eb39b689f6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cd820a29e05b45f5f58d9fd77917eb39b689f6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=79cd820a29e05b45f5f58d9fd77917eb39b689f6", "patch": "@@ -144,6 +144,8 @@\n    (UNSPEC_FPREM1_F\t\t90)\n    (UNSPEC_FPREM1_U\t\t91)\n \n+   (UNSPEC_C2_FLAG\t\t95)\n+\n    ; SSP patterns\n    (UNSPEC_SP_SET\t\t100)\n    (UNSPEC_SP_TEST\t\t101)\n@@ -16315,7 +16317,8 @@\n \t(unspec:XF [(match_dup 2) (match_dup 3)]\n \t\t   UNSPEC_FPREM_U))\n    (set (reg:CCFP FPSR_REG)\n-\t(unspec:CCFP [(const_int 0)] UNSPEC_NOP))]\n+\t(unspec:CCFP [(match_dup 2) (match_dup 3)]\n+\t\t     UNSPEC_C2_FLAG))]\n   \"TARGET_USE_FANCY_MATH_387\"\n   \"fprem\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -16334,6 +16337,7 @@\n   emit_insn (gen_fpremxf4_i387 (operands[1], operands[2],\n \t\t\t\toperands[1], operands[2]));\n   ix86_emit_fp_unordered_jump (label);\n+  LABEL_NUSES (label) = 1;\n \n   emit_move_insn (operands[0], operands[1]);\n   DONE;\n@@ -16356,6 +16360,7 @@\n   emit_label (label);\n   emit_insn (gen_fpremxf4_i387 (op1, op2, op1, op2));\n   ix86_emit_fp_unordered_jump (label);\n+  LABEL_NUSES (label) = 1;\n \n   /* Truncate the result properly for strict SSE math.  */\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n@@ -16376,7 +16381,8 @@\n \t(unspec:XF [(match_dup 2) (match_dup 3)]\n \t\t   UNSPEC_FPREM1_U))\n    (set (reg:CCFP FPSR_REG)\n-\t(unspec:CCFP [(const_int 0)] UNSPEC_NOP))]\n+\t(unspec:CCFP [(match_dup 2) (match_dup 3)]\n+\t\t     UNSPEC_C2_FLAG))]\n   \"TARGET_USE_FANCY_MATH_387\"\n   \"fprem1\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -16395,6 +16401,7 @@\n   emit_insn (gen_fprem1xf4_i387 (operands[1], operands[2],\n \t\t\t\t operands[1], operands[2]));\n   ix86_emit_fp_unordered_jump (label);\n+  LABEL_NUSES (label) = 1;\n \n   emit_move_insn (operands[0], operands[1]);\n   DONE;\n@@ -16418,6 +16425,7 @@\n \n   emit_insn (gen_fprem1xf4_i387 (op1, op2, op1, op2));\n   ix86_emit_fp_unordered_jump (label);\n+  LABEL_NUSES (label) = 1;\n \n   /* Truncate the result properly for strict SSE math.  */\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH"}, {"sha": "0103a2f0475612856e764201fd152366ad8e11fc", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cd820a29e05b45f5f58d9fd77917eb39b689f6/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cd820a29e05b45f5f58d9fd77917eb39b689f6/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=79cd820a29e05b45f5f58d9fd77917eb39b689f6", "patch": "@@ -1759,7 +1759,7 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t      case UNSPEC_FSCALE_FRACT:\n \t      case UNSPEC_FPREM_F:\n \t      case UNSPEC_FPREM1_F:\n-\t\t/* These insns operate on the top two stack slots.\n+\t\t/* These insns operate on the top two stack slots,\n \t\t   first part of double input, double output insn.  */\n \n \t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n@@ -1791,22 +1791,12 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t      case UNSPEC_FSCALE_EXP:\n \t      case UNSPEC_FPREM_U:\n \t      case UNSPEC_FPREM1_U:\n-\t\t/* These insns operate on the top two stack slots./\n+\t\t/* These insns operate on the top two stack slots,\n \t\t   second part of double input, double output insn.  */\n \n \t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n \t\tsrc2 = get_true_reg (&XVECEXP (pat_src, 0, 1));\n \n-\t\tsrc1_note = find_regno_note (insn, REG_DEAD, REGNO (*src1));\n-\t\tsrc2_note = find_regno_note (insn, REG_DEAD, REGNO (*src2));\n-\n-\t\t/* Inputs should never die, they are\n-\t\t   replaced with outputs.  */\n-\t\tgcc_assert (!src1_note);\n-\t\tgcc_assert (!src2_note);\n-\n-\t\tswap_to_top (insn, regstack, *src1, *src2);\n-\n \t\t/* Push the result back onto stack. Fill empty slot from\n \t\t   first part of insn and fix top of stack pointer.  */\n \t\tif (STACK_REG_P (*dest))\n@@ -1820,6 +1810,17 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t\treplace_reg (src2, FIRST_STACK_REG + 1);\n \t\tbreak;\n \n+\t      case UNSPEC_C2_FLAG:\n+\t\t/* This insn operates on the top two stack slots,\n+\t\t   third part of C2 setting double input insn.  */\n+\n+\t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n+\t\tsrc2 = get_true_reg (&XVECEXP (pat_src, 0, 1));\n+\n+\t\treplace_reg (src1, FIRST_STACK_REG);\n+\t\treplace_reg (src2, FIRST_STACK_REG + 1);\n+\t\tbreak;\n+\n \t      case UNSPEC_SAHF:\n \t\t/* (unspec [(unspec [(compare)] UNSPEC_FNSTSW)] UNSPEC_SAHF)\n \t\t   The combination matches the PPRO fcomi instruction.  */"}]}