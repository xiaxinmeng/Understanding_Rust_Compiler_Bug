{"sha": "999bcff5bd185eca61a9781c043a56f06b133366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk5YmNmZjViZDE4NWVjYTYxYTk3ODFjMDQzYTU2ZjA2YjEzMzM2Ng==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2012-01-24T19:17:05Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2012-01-24T19:17:05Z"}, "message": "libitm: Fix wake-up of readers in futex-based serial lock.\n\n\tlibitm/\n\t* config/linux/rwlock.cc (GTM::gtm_rwlock::write_unlock): Fix reader\n\twake-up.\n\nFrom-SVN: r183488", "tree": {"sha": "e26e3ce6a636f90d893869eb973d01b436295141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e26e3ce6a636f90d893869eb973d01b436295141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/999bcff5bd185eca61a9781c043a56f06b133366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999bcff5bd185eca61a9781c043a56f06b133366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/999bcff5bd185eca61a9781c043a56f06b133366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999bcff5bd185eca61a9781c043a56f06b133366/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c873934cd90496aa07712b257b6ae6e8027d952f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c873934cd90496aa07712b257b6ae6e8027d952f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c873934cd90496aa07712b257b6ae6e8027d952f"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "9da73d02237428effe4f3f795e52807b48f0046b", "filename": "libitm/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999bcff5bd185eca61a9781c043a56f06b133366/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999bcff5bd185eca61a9781c043a56f06b133366/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=999bcff5bd185eca61a9781c043a56f06b133366", "patch": "@@ -1,3 +1,8 @@\n+2012-01-24  Torvald Riegel  <triegel@redhat.com>\n+\n+\t* config/linux/rwlock.cc (GTM::gtm_rwlock::write_unlock): Fix reader\n+\twake-up.\n+\n 2012-01-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/x86/target.h (gtm_jmpbuf) [__x86_64__]: Move rip to the"}, {"sha": "ad1b042964adefcace1e3ca3f8c941f0a2b73514", "filename": "libitm/config/linux/rwlock.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999bcff5bd185eca61a9781c043a56f06b133366/libitm%2Fconfig%2Flinux%2Frwlock.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999bcff5bd185eca61a9781c043a56f06b133366/libitm%2Fconfig%2Flinux%2Frwlock.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Flinux%2Frwlock.cc?ref=999bcff5bd185eca61a9781c043a56f06b133366", "patch": "@@ -231,10 +231,13 @@ gtm_rwlock::write_unlock ()\n \t  // last writer (this can happen because write_lock_generic()\n \t  // exchanges 0 or 1 to 2 and thus might go to contended mode even if\n \t  // no other thread holds the write lock currently). Therefore, we\n-\t  // have to wake up readers here as well.\n-\t  futex_wake(&readers, INT_MAX);\n+\t  // have to wake up readers here as well.  Execute a barrier after\n+\t  // the previous relaxed reset of writers (Dekker-style), and fall\n+\t  // through to the normal reader wake-up code.\n+\t  atomic_thread_fence (memory_order_seq_cst);\n \t}\n-      return;\n+      else\n+\treturn;\n     }\n   // No waiting writers, so wake up all waiting readers.\n   // Because the fetch_and_sub is a full barrier already, we don't need"}]}