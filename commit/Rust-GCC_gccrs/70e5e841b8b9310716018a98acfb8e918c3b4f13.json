{"sha": "70e5e841b8b9310716018a98acfb8e918c3b4f13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBlNWU4NDFiOGI5MzEwNzE2MDE4YTk4YWNmYjhlOTE4YzNiNGYxMw==", "commit": {"author": {"name": "Christopher Faylor", "email": "cgf@redhat.com", "date": "2003-03-21T03:57:09Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2003-03-21T03:57:09Z"}, "message": "config.gcc (i[34567]86-*-cygwin*): Use new common makefile stub t-cygming.\n\n2003-03-21  Christopher Faylor  <cgf@redhat.com>\n\n\t* config.gcc (i[34567]86-*-cygwin*): Use new common makefile\n\tstub t-cygming. Use common target header cygming.h. Add extra\n\tc_target_obj and cxx_target_obj file. Default cygwin to posix\n\tthreading. Enforce i386 as float format.\n\t(i[34567]86-*-mingw*): Use new common makefile stub t-cygming.\n\tRemove cygwin.h as target header. Use common target header\n\tcygming.h  Enforce i386 as float format. Correct typo.\n\t* config/i386/cygming.h: New file, containing definitions\n\tcommon to mingw32 and cygwin.\n\t* config/i386/cygwin.h: Remove definitions common to cygwin and\n\tmingw.\tSimplify special spec logic.  Define \"wrappers\" around\n\tcertain include path defines to accommodate -mno-cygwin.\n\tRemove some #if 0'ed code.\n\t(STANDARD_INCLUDE_DIR) Always define when not cross-compiling.\n\t(LINK_SPEC): Don't use cyg search prefix when -mno-cygwin.\n\t(GCC_DRIVER_HOST_INITIALIZATION): Define as call to mingw_scan.\n\t* config/i386/mingw32.h: Remove definitions common to cygwin and\n\tmingw.\n\t(EXTRA_OS_CPP_BUILTINS): Adjust.\n\t(TARGET_VERSION): Define.\n\t* config/i386/crtdll.h (EXTRA_OS_CPP_BUILTINS): Override\n\tmingw32.h definitions.\n\t(LIBGCC_SPEC): Add libmingwex.a as in mingw32.h.\n\t* config/i386/t-cygwin (EXTRA_GCC_OBJS): Define as cygwin1.o.\n\tAdd compilation rules for cygwin1.o cygwin2.o.\n\t* config/i386/cygwin1.c: New file.\n\t* config/i386/cygwin2.c: New file.\n\t* config/i386/t-cygming: New makefile stub.\n\nFrom-SVN: r64643", "tree": {"sha": "c1a9d70a0dc8a7f79dad68983b237883c5fd59c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1a9d70a0dc8a7f79dad68983b237883c5fd59c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70e5e841b8b9310716018a98acfb8e918c3b4f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e5e841b8b9310716018a98acfb8e918c3b4f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e5e841b8b9310716018a98acfb8e918c3b4f13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e5e841b8b9310716018a98acfb8e918c3b4f13/comments", "author": null, "committer": null, "parents": [{"sha": "03c1f6a3ea6b8a205eaaf25f470d2b5db77bfbe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c1f6a3ea6b8a205eaaf25f470d2b5db77bfbe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03c1f6a3ea6b8a205eaaf25f470d2b5db77bfbe4"}], "stats": {"total": 1200, "additions": 741, "deletions": 459}, "files": [{"sha": "0931e8efb0bfb37e49a539da770f5ec36c057ad4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70e5e841b8b9310716018a98acfb8e918c3b4f13", "patch": "@@ -1,3 +1,34 @@\n+2003-03-21  Christopher Faylor  <cgf@redhat.com>\n+\n+\t* config.gcc (i[34567]86-*-cygwin*): Use new common makefile\n+\tstub t-cygming. Use common target header cygming.h. Add extra\n+\tc_target_obj and cxx_target_obj file. Default cygwin to posix\n+\tthreading. Enforce i386 as float format.\n+\t(i[34567]86-*-mingw*): Use new common makefile stub t-cygming.\n+\tRemove cygwin.h as target header. Use common target header\n+\tcygming.h  Enforce i386 as float format. Correct typo.\n+\t* config/i386/cygming.h: New file, containing definitions\n+\tcommon to mingw32 and cygwin.\n+\t* config/i386/cygwin.h: Remove definitions common to cygwin and\n+\tmingw.\tSimplify special spec logic.  Define \"wrappers\" around\n+\tcertain include path defines to accommodate -mno-cygwin.\n+\tRemove some #if 0'ed code.\n+\t(STANDARD_INCLUDE_DIR) Always define when not cross-compiling.\t\n+\t(LINK_SPEC): Don't use cyg search prefix when -mno-cygwin.\n+\t(GCC_DRIVER_HOST_INITIALIZATION): Define as call to mingw_scan.\n+\t* config/i386/mingw32.h: Remove definitions common to cygwin and\n+\tmingw.\n+\t(EXTRA_OS_CPP_BUILTINS): Adjust.\n+\t(TARGET_VERSION): Define.\n+\t* config/i386/crtdll.h (EXTRA_OS_CPP_BUILTINS): Override\n+\tmingw32.h definitions.\n+\t(LIBGCC_SPEC): Add libmingwex.a as in mingw32.h.\n+\t* config/i386/t-cygwin (EXTRA_GCC_OBJS): Define as cygwin1.o.\n+\tAdd compilation rules for cygwin1.o cygwin2.o.\n+\t* config/i386/cygwin1.c: New file.\n+\t* config/i386/cygwin2.c: New file.\n+\t* config/i386/t-cygming: New makefile stub.\n+\n 2003-03-20  Richard Henderson  <rth@redhat.com>\n \n \t* fold-const.c (extract_muldiv_1): Revert changing order of"}, {"sha": "ee5e859b1383d0b0378d1db196d10eb3564a84d7", "filename": "gcc/config.gcc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=70e5e841b8b9310716018a98acfb8e918c3b4f13", "patch": "@@ -1320,21 +1320,25 @@ i[34567]86-*-win32)\n \texeext=.exe\n \t;;\n i[34567]86-*-pe | i[34567]86-*-cygwin*)\n+\ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygming.h i386/cygwin.h\"\n \txm_defines=POSIX\n \txm_file=i386/xm-cygwin.h\n-\ttmake_file=i386/t-cygwin\n-\ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygwin.h\"\n+\ttmake_file=\"i386/t-cygming i386/t-cygwin\"\n+\tfloat_format=i386\n \textra_objs=winnt.o\n+\tc_target_objs=cygwin2.o\n+\tcxx_target_objs=cygwin2.o\n \tif test x$enable_threads = xyes; then\n-\t\tthread_file='win32'\n+\t\tthread_file='posix'\n \tfi\n \texeext=.exe\n \t;;\n i[34567]86-*-mingw32*)\n-\ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygwin.h i386/mingw32.h\"\n+\ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygming.h i386/mingw32.h\"\n \txm_defines=POSIX\n \txm_file=i386/xm-mingw32.h\n-\ttmake_file=\"i386/t-cygwin i386/t-mingw32\"\n+\ttmake_file=\"i386/t-cygming i386/t-mingw32\"\n+\tfloat_format=i386\n \textra_objs=winnt.o\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='win32'\n@@ -1344,7 +1348,7 @@ i[34567]86-*-mingw32*)\n \t\t*mingw32crt*)\n \t\t\ttm_file=\"${tm_file} i386/crtdll.h\"\n \t\t\t;;\n-\t\t*minwg32msv* | *mingw32*)\n+\t\t*mingw32msv* | *mingw32*)\n \t\t\t;;\n \tesac\n \t;;"}, {"sha": "5a85367b5292b504a440666e45d8c410e1b61ef2", "filename": "gcc/config/i386/crtdll.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcrtdll.h?ref=70e5e841b8b9310716018a98acfb8e918c3b4f13", "patch": "@@ -21,14 +21,23 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #undef EXTRA_OS_CPP_BUILTINS\n-#define EXTRA_OS_CPP_BUILTINS() \\\n-  do { builtin_define (\"__MINGW32__=0.2\"); } while (0)\n+#define EXTRA_OS_CPP_BUILTINS()\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      builtin_define (\"__CRTDLL__\");\t\t\t\t\\\n+      builtin_define (\"__MINGW32__\");\t\t\t   \t\\\n+      builtin_define (\"_WIN32\");\t\t\t\t\\\n+      builtin_define_std (\"WIN32\");\t\t\t\t\\\n+      builtin_define_std (\"WINNT\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n #undef LIBGCC_SPEC\n #define LIBGCC_SPEC \\\n-  \"%{mthreads:-lmingwthrd} -lmingw32 -lgcc -lmoldname -lcrtdll\"\n+  \"%{mthreads:-lmingwthrd} -lmingw32 -lgcc -lcoldname -libmingwex -lcrtdll\"\n \n /* Specify a different entry point when linking a DLL */\n #undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{mdll:dllcrt1%O%s} %{!mdll:crt1%O%s} %{pg:gcrt1%O%s}\"\n+#define STARTFILE_SPEC \"%{shared|mdll:dllcrt1%O%s} \\\n+  %{!shared:%{!mdll:crt1%O%s}} %{pg:gcrt1%O%s}\"\n "}, {"sha": "030e19a0fd3d870a365def8ea4e0ab3a5c949c45", "filename": "gcc/config/i386/cygming.h", "status": "added", "additions": 370, "deletions": 0, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=70e5e841b8b9310716018a98acfb8e918c3b4f13", "patch": "@@ -0,0 +1,370 @@\n+/* Operating system specific defines to be used when targeting GCC for\n+   hosting on Windows32, using a Unix style C library and tools.\n+   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+   Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#define DBX_DEBUGGING_INFO 1\n+#define SDB_DEBUGGING_INFO 1\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+#define TARGET_EXECUTABLE_SUFFIX \".exe\"\n+\n+#include <stdio.h>\n+\n+/* Masks for subtarget switches used by other files.  */\n+#define MASK_NOP_FUN_DLLIMPORT 0x08000000 /* Ignore dllimport for functions */\n+\n+/* Used in winnt.c.  */\n+#define TARGET_NOP_FUN_DLLIMPORT (target_flags & MASK_NOP_FUN_DLLIMPORT)\n+\n+#undef  SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \\\n+{ \"cygwin\",\t\t  0, N_(\"Use the Cygwin interface\") },\t\\\n+{ \"no-cygwin\",\t\t  0, N_(\"Use the Mingw32 interface\") },\t\\\n+{ \"windows\",\t\t  0, N_(\"Create GUI application\") },\t\\\n+{ \"no-win32\",\t\t  0, N_(\"Don't set Windows defines\") },\t\\\n+{ \"win32\",\t\t  0, N_(\"Set Windows defines\") },\t\\\n+{ \"console\",\t\t  0, N_(\"Create console application\") },\\\n+{ \"dll\",\t\t  0, N_(\"Generate code for a DLL\") },\t\\\n+{ \"nop-fun-dllimport\",\t  MASK_NOP_FUN_DLLIMPORT,\t\t\\\n+  N_(\"Ignore dllimport for functions\") }, \t\t\t\\\n+{ \"no-nop-fun-dllimport\", -MASK_NOP_FUN_DLLIMPORT, \"\" },\t\\\n+{ \"threads\",\t\t  0, N_(\"Use Mingw-specific thread support\") },\n+\n+#define MAYBE_UWIN_CPP_BUILTINS() /* Nothing.  */\n+\n+/* Support the __declspec keyword by turning them into attributes.\n+   We currently only support: dllimport and dllexport.\n+   Note that the current way we do this may result in a collision with\n+   predefined attributes later on.  This can be solved by using one attribute,\n+   say __declspec__, and passing args to it.  The problem with that approach\n+   is that args are not accumulated: each new appearance would clobber any\n+   existing args.  */\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"_X86_=1\");\t\t\t\t\t\\\n+\tbuiltin_assert (\"system=winnt\");\t\t\t\t\\\n+\tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n+\tbuiltin_define (\"__fastcall=__attribute__((__fastcall__))\");\t\\\n+\tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n+\tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n+\tif (!flag_iso)\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_stdcall=__attribute__((__stdcall__))\");\t\\\n+\t    builtin_define (\"_fastcall=__attribute__((__fastcall__))\");\t\\\n+\t    builtin_define (\"_cdecl=__attribute__((__cdecl__))\");\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\tMAYBE_UWIN_CPP_BUILTINS ();\t\t\t\t\t\\\n+\tEXTRA_OS_CPP_BUILTINS ();\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Get tree.c to declare a target-specific specialization of\n+   merge_decl_attributes.  */\n+#define TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\n+/* This macro defines names of additional specifications to put in the specs\n+   that can be used in various specifications like CC1_SPEC.  Its definition\n+   is an initializer with a subgrouping for each command option.\n+\n+   Each subgrouping contains a string constant, that defines the\n+   specification name, and a string constant that used by the GNU CC driver\n+   program.\n+\n+   Do not define this macro if it does not need to do anything.  */\n+\n+#undef  SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS \t\t\t\t\t\t\\\n+  { \"mingw_include_path\", DEFAULT_TARGET_MACHINE }\n+\n+#undef MATH_LIBRARY\n+#define MATH_LIBRARY \"\"\n+\n+#define SIZE_TYPE \"unsigned int\"\n+#define PTRDIFF_TYPE \"int\"\n+#define WCHAR_TYPE_SIZE 16\n+#define WCHAR_TYPE \"short unsigned int\"\n+\n+\f\n+/* Enable parsing of #pragma pack(push,<n>) and #pragma pack(pop).  */\n+#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n+\n+union tree_node;\n+#define TREE union tree_node *\n+\f\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_drectve\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n+  DRECTVE_SECTION_FUNCTION\t\t\t\t\t\\\n+  SWITCH_TO_SECTION_FUNCTION\n+\n+#define DRECTVE_SECTION_FUNCTION \\\n+void\t\t\t\t\t\t\t\t\t\\\n+drectve_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_drectve)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", \"\\t.section .drectve\\n\");\t\t\\\n+      in_section = in_drectve;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+void drectve_section PARAMS ((void));\n+\n+/* Switch to SECTION (an `enum in_section').\n+\n+   ??? This facility should be provided by GCC proper.\n+   The problem is that we want to temporarily switch sections in\n+   ASM_DECLARE_OBJECT_NAME and then switch back to the original section\n+   afterwards.  */\n+#define SWITCH_TO_SECTION_FUNCTION \t\t\t\t\\\n+void switch_to_section PARAMS ((enum in_section, tree));        \\\n+void \t\t\t\t\t\t\t\t\\\n+switch_to_section (section, decl) \t\t\t\t\\\n+     enum in_section section; \t\t\t\t\t\\\n+     tree decl; \t\t\t\t\t\t\\\n+{ \t\t\t\t\t\t\t\t\\\n+  switch (section) \t\t\t\t\t\t\\\n+    { \t\t\t\t\t\t\t\t\\\n+      case in_text: text_section (); break; \t\t\t\\\n+      case in_data: data_section (); break; \t\t\t\\\n+      case in_named: named_section (decl, NULL, 0); break; \t\\\n+      case in_drectve: drectve_section (); break; \t\t\\\n+      default: abort (); break; \t\t\t\t\\\n+    } \t\t\t\t\t\t\t\t\\\n+}\n+\n+/* Don't allow flag_pic to propagate since gas may produce invalid code\n+   otherwise.  */\n+\n+#undef  SUBTARGET_OVERRIDE_OPTIONS\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (flag_pic)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      warning (\"-f%s ignored for target (all code is position independent)\",\\\n+\t       (flag_pic > 1) ? \"PIC\" : \"pic\");\t\t\t\t\\\n+      flag_pic = 0;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0)\t\t\t\t\t\t\t\t\\\n+\n+/* Define this macro if references to a symbol must be treated\n+   differently depending on something about the variable or\n+   function named by the symbol (such as what section it is in).\n+\n+   On i386 running Windows NT, modify the assembler name with a suffix \n+   consisting of an atsign (@) followed by string of digits that represents\n+   the number of bytes of arguments passed to the function, if it has the \n+   attribute STDCALL.\n+\n+   In addition, we must mark dll symbols specially. Definitions of \n+   dllexport'd objects install some info in the .drectve section.  \n+   References to dllimport'd objects are fetched indirectly via\n+   _imp__.  If both are declared, dllexport overrides.  This is also \n+   needed to implement one-only vtables: they go into their own\n+   section and we need to set DECL_SECTION_NAME so we do that here.\n+   Note that we can be called twice on the same decl.  */\n+\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO  i386_pe_encode_section_info\n+#undef  TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING  i386_pe_strip_name_encoding_full\n+\f\n+/* Output a reference to a label.  */\n+#undef ASM_OUTPUT_LABELREF\n+#define ASM_OUTPUT_LABELREF  i386_pe_output_labelref\n+\n+/* Output a common block.  */\n+#undef ASM_OUTPUT_COMMON\n+#define ASM_OUTPUT_COMMON(STREAM, NAME, SIZE, ROUNDED)\t\\\n+do {\t\t\t\t\t\t\t\\\n+  if (i386_pe_dllexport_name_p (NAME))\t\t\t\\\n+    i386_pe_record_exported_symbol (NAME, 1);\t\t\\\n+  if (! i386_pe_dllimport_name_p (NAME))\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      fprintf ((STREAM), \"\\t.comm\\t\"); \t\t\t\\\n+      assemble_name ((STREAM), (NAME));\t\t\t\\\n+      fprintf ((STREAM), \", %d\\t%s %d\\n\",\t\t\\\n+\t       (ROUNDED), ASM_COMMENT_START, (SIZE));\t\\\n+    }\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+/* Output the label for an initialized variable.  */\n+#undef ASM_DECLARE_OBJECT_NAME\n+#define ASM_DECLARE_OBJECT_NAME(STREAM, NAME, DECL) \t\\\n+do {\t\t\t\t\t\t\t\\\n+  if (i386_pe_dllexport_name_p (NAME))\t\t\t\\\n+    i386_pe_record_exported_symbol (NAME, 1);\t\t\\\n+  ASM_OUTPUT_LABEL ((STREAM), (NAME));\t\t\t\\\n+} while (0)\n+\n+\f\n+/* Emit code to check the stack when allocating more that 4000\n+   bytes in one go.  */\n+\n+#define CHECK_STACK_LIMIT 4000\n+\n+/* By default, target has a 80387, uses IEEE compatible arithmetic,\n+   returns float values in the 387 and needs stack probes.\n+   We also align doubles to 64-bits for MSVC default compatibility. */\n+\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT \\\n+   (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_STACK_PROBE \\\n+    | MASK_ALIGN_DOUBLE)\n+\n+/* This is how to output an assembler line\n+   that says to advance the location counter\n+   to a multiple of 2**LOG bytes.  */\n+\n+#undef ASM_OUTPUT_ALIGN\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n+    if ((LOG)!=0) fprintf ((FILE), \"\\t.align %d\\n\", 1<<(LOG))\n+\n+/* Define this macro if in some cases global symbols from one translation\n+   unit may not be bound to undefined symbols in another translation unit\n+   without user intervention.  For instance, under Microsoft Windows\n+   symbols must be explicitly imported from shared libraries (DLLs).  */\n+#define MULTIPLE_SYMBOL_SPACES\n+\n+extern void i386_pe_unique_section PARAMS ((TREE, int));\n+#define TARGET_ASM_UNIQUE_SECTION i386_pe_unique_section\n+\n+#define SUPPORTS_ONE_ONLY 1\n+\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  i386_pe_asm_named_section\n+\n+/* Select attributes for named sections.  */\n+#define TARGET_SECTION_TYPE_FLAGS  i386_pe_section_type_flags\n+\n+/* Write the extra assembler code needed to declare a function\n+   properly.  If we are generating SDB debugging information, this\n+   will happen automatically, so we only need to handle other cases.  */\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (i386_pe_dllexport_name_p (NAME))\t\t\t\t\\\n+\ti386_pe_record_exported_symbol (NAME, 0);\t\t\t\\\n+      if (write_symbols != SDB_DEBUG)\t\t\t\t\t\\\n+\ti386_pe_declare_function_type (FILE, NAME, TREE_PUBLIC (DECL));\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Add an external function to the list of functions to be declared at\n+   the end of the file.  */\n+#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n+\ti386_pe_record_external_function (NAME);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Declare the type properly for any external libcall.  */\n+#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN) \\\n+  i386_pe_declare_function_type (FILE, XSTR (FUN, 0), 1)\n+\n+/* This says out to put a global symbol in the BSS section.  */\n+#undef ASM_OUTPUT_ALIGNED_BSS\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n+  asm_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n+\n+/* Output function declarations at the end of the file.  */\n+#undef ASM_FILE_END\n+#define ASM_FILE_END(FILE) \\\n+  i386_pe_asm_file_end (FILE)\n+\n+#undef ASM_COMMENT_START\n+#define ASM_COMMENT_START \" #\"\n+\n+/* DWARF2 Unwinding doesn't work with exception handling yet.  To make\n+   it work, we need to build a libgcc_s.dll, and dcrt0.o should be\n+   changed to call __register_frame_info/__deregister_frame_info.  */\n+#define DWARF2_UNWIND_INFO 0\n+\n+/* Don't assume anything about the header files.  */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+#undef PROFILE_HOOK\n+#define PROFILE_HOOK(LABEL)\t\t\t\t\t\t\\\n+  if (MAIN_NAME_P (DECL_NAME (current_function_decl)))\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      emit_call_insn (gen_rtx (CALL, VOIDmode,\t\t\t\t\\\n+\tgen_rtx_MEM (FUNCTION_MODE,\t\t\t\t\t\\\n+\t\t     gen_rtx_SYMBOL_REF (Pmode, \"_monstartup\")),\t\\\n+\tconst0_rtx));\t\t\t\t\t\t\t\\\n+    }\n+\n+/* Java Native Interface (JNI) methods on Win32 are invoked using the\n+   stdcall calling convention.  */\n+#undef MODIFY_JNI_METHOD_CALL\n+#define MODIFY_JNI_METHOD_CALL(MDECL)\t\t\t\t\t      \\\n+  build_type_attribute_variant ((MDECL),\t\t\t\t      \\\n+\t\t\t       build_tree_list (get_identifier (\"stdcall\"),   \\\n+\t\t\t\t\t\tNULL))\n+\n+/* External function declarations.  */\n+\n+extern void i386_pe_record_external_function PARAMS ((const char *));\n+extern void i386_pe_declare_function_type PARAMS ((FILE *, const char *, int));\n+extern void i386_pe_record_exported_symbol PARAMS ((const char *, int));\n+extern void i386_pe_asm_file_end PARAMS ((FILE *));\n+extern int i386_pe_dllexport_name_p PARAMS ((const char *));\n+extern int i386_pe_dllimport_name_p PARAMS ((const char *));\n+\n+/* For Win32 ABI compatibility */\n+#undef DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* MSVC returns aggregate types of up to 8 bytes via registers.\n+   See i386.c:ix86_return_in_memory.  */\n+#undef MS_AGGREGATE_RETURN\n+#define MS_AGGREGATE_RETURN 1\n+\n+/* No data type wants to be aligned rounder than this.  */\n+#undef\tBIGGEST_ALIGNMENT\n+#define BIGGEST_ALIGNMENT 128\n+\n+/* Native complier aligns internal doubles in structures on dword boundaries.  */\n+#undef\tBIGGEST_FIELD_ALIGNMENT\n+#define BIGGEST_FIELD_ALIGNMENT 64\n+\n+/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n+#undef PCC_BITFIELD_TYPE_MATTERS\n+#define PCC_BITFIELD_TYPE_MATTERS 1\n+#define GROUP_BITFIELDS_BY_ALIGN TYPE_NATIVE(rec)\n+\n+/* Enable alias attribute support.  */\n+#ifndef SET_ASM_OP\n+#define SET_ASM_OP \"\\t.set\\t\"\n+#endif\n+\n+#undef TREE\n+\n+#ifndef BUFSIZ\n+# undef FILE\n+#endif"}, {"sha": "993423f9566a15a2154c9ea49041964a2ae68e82", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 157, "deletions": 395, "changes": 552, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=70e5e841b8b9310716018a98acfb8e918c3b4f13", "patch": "@@ -20,135 +20,35 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#define DBX_DEBUGGING_INFO 1\n-#define SDB_DEBUGGING_INFO 1\n-\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n #define TARGET_VERSION fprintf (stderr, \" (x86 Cygwin)\"); \n-#define TARGET_EXECUTABLE_SUFFIX \".exe\"\n-\n-#include <stdio.h>\n-\n-/* Masks for subtarget switches used by other files.  */\n-#define MASK_NOP_FUN_DLLIMPORT 0x08000000 /* Ignore dllimport for functions */\n-\n-/* Used in winnt.c.  */\n-#define TARGET_NOP_FUN_DLLIMPORT (target_flags & MASK_NOP_FUN_DLLIMPORT)\n-\n-#undef  SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-{ \"cygwin\",\t\t  0, N_(\"Use the Cygwin interface\") },\t\\\n-{ \"no-cygwin\",\t\t  0, N_(\"Use the Mingw32 interface\") },\t\\\n-{ \"windows\",\t\t  0, N_(\"Create GUI application\") },\t\\\n-{ \"no-win32\",\t\t  0, N_(\"Don't set Windows defines\") },\t\\\n-{ \"win32\",\t\t  0, N_(\"Set Windows defines\") },\t\\\n-{ \"console\",\t\t  0, N_(\"Create console application\") },\\\n-{ \"dll\",\t\t  0, N_(\"Generate code for a DLL\") },\t\\\n-{ \"nop-fun-dllimport\",\t  MASK_NOP_FUN_DLLIMPORT,\t\t\\\n-  N_(\"Ignore dllimport for functions\") }, \t\t\t\\\n-{ \"no-nop-fun-dllimport\", -MASK_NOP_FUN_DLLIMPORT, \"\" },\t\\\n-{ \"threads\",\t\t  0, N_(\"Use Mingw-specific thread support\") },\n-\n-#define MAYBE_UWIN_CPP_BUILTINS() /* Nothing.  */\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-\tbuiltin_define (\"_X86_=1\");\t\t\t\t\t\\\n-\tbuiltin_assert (\"system=winnt\");\t\t\t\t\\\n-\tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n-\tbuiltin_define (\"__fastcall=__attribute__((__fastcall__))\");\t\\\n-\tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n-\tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n-\tif (!flag_iso)\t\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    builtin_define (\"_stdcall=__attribute__((__stdcall__))\");\t\\\n-\t    builtin_define (\"_fastcall=__attribute__((__fastcall__))\");\t\\\n-\t    builtin_define (\"_cdecl=__attribute__((__cdecl__))\");\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\tMAYBE_UWIN_CPP_BUILTINS ();\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#ifdef CROSS_COMPILE\n-#define CYGWIN_INCLUDES \"%{!nostdinc:-idirafter \" CYGWIN_CROSS_DIR \"/include}\"\n-#define W32API_INC \"%{!nostdinc:-idirafter \" CYGWIN_CROSS_DIR \"/include/w32api}\"\n-#define W32API_LIB \"-L\" CYGWIN_CROSS_DIR \"/lib/w32api/\"\n-#define CYGWIN_LIB CYGWIN_CROSS_DIR \"/lib\"\n-#define MINGW_LIBS \"-L\" CYGWIN_CROSS_DIR \"/lib/mingw\"\n-#define MINGW_INCLUDES \"%{!nostdinc:-isystem \" CYGWIN_CROSS_DIR \"/include/mingw/g++-3 \"\\\n-\t\t       \"-isystem \" CYGWIN_CROSS_DIR \"/include/mingw/g++ \"\\\n-\t\t       \"-idirafter \" CYGWIN_CROSS_DIR \"/include/mingw}\"\n-#else\n-#define CYGWIN_INCLUDES \"%{!nostdinc:-isystem /usr/local/include \"\\\n-\t\t           \"-idirafter \" CYGWIN_CROSS_DIR \"/include \"\\\n-\t\t           \"-idirafter /usr/include}\"\n-#define W32API_INC \"%{!nostdinc:\"\\\n-\t\t      \"-idirafter \" CYGWIN_CROSS_DIR \"/include/w32api \"\\\n-\t\t      \"-idirafter /usr/include/w32api}\"\n-#define W32API_LIB \"-L\" CYGWIN_CROSS_DIR \"/lib/w32api/ -L/usr/lib/w32api/\"\n-#define CYGWIN_LIB \"/usr/lib\"\n-#define MINGW_LIBS \"-L/usr/local/lib/mingw -L/usr/lib/mingw\"\n-#define MINGW_INCLUDES \"%{!nostdinc:-isystem /usr/include/mingw/g++-3 \"\\\n-\t\t       \"-isystem /usr/include/mingw/g++ \"\\\n-\t\t       \"-isystem /usr/local/include/mingw \"\\\n-\t\t       \"-idirafter \" CYGWIN_CROSS_DIR \"/include/mingw \"\\\n-\t\t       \"-idirafter /usr/include/mingw}\"\n-#endif\n-\n-/* Get tree.c to declare a target-specific specialization of\n-   merge_decl_attributes.  */\n-#define TARGET_DLLIMPORT_DECL_ATTRIBUTES\n \n-/* Support the __declspec keyword by turning them into attributes.\n-   We currently only support: dllimport and dllexport.\n-   Note that the current way we do this may result in a collision with\n-   predefined attributes later on.  This can be solved by using one attribute,\n-   say __declspec__, and passing args to it.  The problem with that approach\n-   is that args are not accumulated: each new appearance would clobber any\n-   existing args.  */\n+#define EXTRA_OS_CPP_BUILTINS()  /* Nothing.  */\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} \\\n+#define CPP_SPEC \"%(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n   %{mno-win32:%{mno-cygwin: %emno-cygwin and mno-win32 are not compatible}} \\\n-  %{mno-cygwin:-D__MSVCRT__ -D__MINGW32__ %{mthreads:-D_MT} \"\\\n-    MINGW_INCLUDES \"} \\\n-  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ %{!ansi:-Dunix} -D__unix__ -D__unix \"\\\n-    CYGWIN_INCLUDES \"}\\\n+  %{mno-cygwin:-D__MSVCRT__ -D__MINGW32__ %{!ansi:%{mthreads:-D_MT}}}\\\n+  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ %{!ansi:-Dunix} -D__unix__ -D__unix }\\\n   %{mwin32|mno-cygwin:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ %{!ansi:-DWINNT}}\\\n-  %{!mno-win32:\" W32API_INC \"}\\\n+  %{!nostdinc:%{!mno-win32|mno-cygwin:-idirafter ../include/w32api%s -idirafter ../../include/w32api%s}}\\\n \"\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"\\\n-  %{shared|mdll: %{mno-cygwin:\" MINGW_LIBS \" dllcrt2%O%s}}\\\n-  %{!shared: %{!mdll: %{!mno-cygwin:crt0%O%s} %{mno-cygwin:\" MINGW_LIBS \" crt2%O%s}\\\n+  %{shared|mdll: %{mno-cygwin:dllcrt2%O%s}}\\\n+  %{!shared: %{!mdll: %{!mno-cygwin:crt0%O%s} %{mno-cygwin:crt2%O%s}\\\n   %{pg:gcrt0%O%s}}}\\\n \"\n \n /* Normally, -lgcc is not needed since everything in it is in the DLL, but we\n    want to allow things to be added to it when installing new versions of\n    GCC without making a new CYGWIN.DLL, so we leave it.  Profiling is handled\n-   by calling the init function from the prologue.  */\n+   by calling the init function from main.  */\n \n #undef LIBGCC_SPEC\n-#define LIBGCC_SPEC \"%{mno-cygwin: %{mthreads:-lmingwthrd} -lmingw32}\t\\\n-  -lgcc %{mno-cygwin:-lmoldname -lmingwex -lmsvcrt}\"\n-\n-/* This macro defines names of additional specifications to put in the specs\n-   that can be used in various specifications like CC1_SPEC.  Its definition\n-   is an initializer with a subgrouping for each command option.\n-\n-   Each subgrouping contains a string constant, that defines the\n-   specification name, and a string constant that used by the GNU CC driver\n-   program.\n-\n-   Do not define this macro if it does not need to do anything.  */\n-\n-#undef  SUBTARGET_EXTRA_SPECS\n-#define SUBTARGET_EXTRA_SPECS \t\t\t\t\t\t\\\n-  { \"mingw_include_path\", DEFAULT_TARGET_MACHINE }\n+#define LIBGCC_SPEC \\\n+  \"%{mno-cygwin: %{mthreads:-lmingwthrd} -lmingw32} -lgcc\t\\\n+   %{mno-cygwin:-lmoldname -lmingwex -lmsvcrt}\"\n \n /* We have to dynamic link to get to the system DLLs.  All of libc, libm and\n    the Unix stuff is in cygwin.dll.  The import library is called\n@@ -164,7 +64,7 @@ Boston, MA 02111-1307, USA.  */\n   %{mwindows:-lgdi32 -lcomdlg32} \\\n   -luser32 -lkernel32 -ladvapi32 -lshell32\"\n \n-#define LINK_SPEC W32API_LIB \"\\\n+#define LINK_SPEC \"\\\n   %{mwindows:--subsystem windows} \\\n   %{mconsole:--subsystem console} \\\n   %{shared: %{mdll: %eshared and mdll are not compatible}} \\\n@@ -173,296 +73,158 @@ Boston, MA 02111-1307, USA.  */\n   %{shared|mdll: -e \\\n     %{mno-cygwin:_DllMainCRTStartup@12} \\\n     %{!mno-cygwin:__cygwin_dll_entry@12}}\\\n-  --dll-search-prefix=cyg\"\n-\n-#undef MATH_LIBRARY\n-#define MATH_LIBRARY \"\"\n-\n-#define SIZE_TYPE \"unsigned int\"\n-#define PTRDIFF_TYPE \"int\"\n-#define WCHAR_TYPE_SIZE 16\n-#define WCHAR_TYPE \"short unsigned int\"\n-\n-\f\n-/* Enable parsing of #pragma pack(push,<n>) and #pragma pack(pop).  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n-\n-union tree_node;\n-#define TREE union tree_node *\n-\f\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_drectve\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  DRECTVE_SECTION_FUNCTION\t\t\t\t\t\\\n-  SWITCH_TO_SECTION_FUNCTION\n-\n-#define DRECTVE_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\t\\\n-drectve_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_drectve)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", \"\\t.section .drectve\\n\");\t\t\\\n-      in_section = in_drectve;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-void drectve_section PARAMS ((void));\n-\n-/* Switch to SECTION (an `enum in_section').\n-\n-   ??? This facility should be provided by GCC proper.\n-   The problem is that we want to temporarily switch sections in\n-   ASM_DECLARE_OBJECT_NAME and then switch back to the original section\n-   afterwards.  */\n-#define SWITCH_TO_SECTION_FUNCTION \t\t\t\t\\\n-void switch_to_section PARAMS ((enum in_section, tree));        \\\n-void \t\t\t\t\t\t\t\t\\\n-switch_to_section (section, decl) \t\t\t\t\\\n-     enum in_section section; \t\t\t\t\t\\\n-     tree decl; \t\t\t\t\t\t\\\n-{ \t\t\t\t\t\t\t\t\\\n-  switch (section) \t\t\t\t\t\t\\\n-    { \t\t\t\t\t\t\t\t\\\n-      case in_text: text_section (); break; \t\t\t\\\n-      case in_data: data_section (); break; \t\t\t\\\n-      case in_named: named_section (decl, NULL, 0); break; \t\\\n-      case in_drectve: drectve_section (); break; \t\t\\\n-      default: abort (); break; \t\t\t\t\\\n-    } \t\t\t\t\t\t\t\t\\\n-}\n-\n-/* Don't allow flag_pic to propagate since gas may produce invalid code\n-   otherwise.  */\n-\n-#undef  SUBTARGET_OVERRIDE_OPTIONS\n-#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      warning (\"-f%s ignored for target (all code is position independent)\",\\\n-\t       (flag_pic > 1) ? \"PIC\" : \"pic\");\t\t\t\t\\\n-      flag_pic = 0;\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\t\t\t\t\t\t\t\t\\\n-\n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or\n-   function named by the symbol (such as what section it is in).\n-\n-   On i386 running Windows NT, modify the assembler name with a suffix \n-   consisting of an atsign (@) followed by string of digits that represents\n-   the number of bytes of arguments passed to the function, if it has the \n-   attribute STDCALL.\n-\n-   In addition, we must mark dll symbols specially. Definitions of \n-   dllexport'd objects install some info in the .drectve section.  \n-   References to dllimport'd objects are fetched indirectly via\n-   _imp__.  If both are declared, dllexport overrides.  This is also \n-   needed to implement one-only vtables: they go into their own\n-   section and we need to set DECL_SECTION_NAME so we do that here.\n-   Note that we can be called twice on the same decl.  */\n-\n-#undef TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO  i386_pe_encode_section_info\n-#undef  TARGET_STRIP_NAME_ENCODING\n-#define TARGET_STRIP_NAME_ENCODING  i386_pe_strip_name_encoding_full\n-\f\n-/* Output a reference to a label.  */\n-#undef ASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF  i386_pe_output_labelref\n-\n-/* Output a common block.  */\n-#undef ASM_OUTPUT_COMMON\n-#define ASM_OUTPUT_COMMON(STREAM, NAME, SIZE, ROUNDED)\t\\\n-do {\t\t\t\t\t\t\t\\\n-  if (i386_pe_dllexport_name_p (NAME))\t\t\t\\\n-    i386_pe_record_exported_symbol (NAME, 1);\t\t\\\n-  if (! i386_pe_dllimport_name_p (NAME))\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      fprintf ((STREAM), \"\\t.comm\\t\"); \t\t\t\\\n-      assemble_name ((STREAM), (NAME));\t\t\t\\\n-      fprintf ((STREAM), \", %d\\t%s %d\\n\",\t\t\\\n-\t       (ROUNDED), ASM_COMMENT_START, (SIZE));\t\\\n-    }\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-/* Output the label for an initialized variable.  */\n-#undef ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(STREAM, NAME, DECL) \t\\\n-do {\t\t\t\t\t\t\t\\\n-  if (i386_pe_dllexport_name_p (NAME))\t\t\t\\\n-    i386_pe_record_exported_symbol (NAME, 1);\t\t\\\n-  ASM_OUTPUT_LABEL ((STREAM), (NAME));\t\t\t\\\n-} while (0)\n-\n-\f\n-/* Emit code to check the stack when allocating more that 4000\n-   bytes in one go.  */\n-\n-#define CHECK_STACK_LIMIT 4000\n-\n-/* By default, target has a 80387, uses IEEE compatible arithmetic,\n-   returns float values in the 387 and needs stack probes.\n-   We also align doubles to 64-bits for MSVC default compatibility. */\n-\n-#undef TARGET_SUBTARGET_DEFAULT\n-#define TARGET_SUBTARGET_DEFAULT \\\n-   (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_STACK_PROBE \\\n-    | MASK_ALIGN_DOUBLE)\n-\n-/* This is how to output an assembler line\n-   that says to advance the location counter\n-   to a multiple of 2**LOG bytes.  */\n-\n-#undef ASM_OUTPUT_ALIGN\n-#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n-    if ((LOG)!=0) fprintf ((FILE), \"\\t.align %d\\n\", 1<<(LOG))\n-\n-/* Define this macro if in some cases global symbols from one translation\n-   unit may not be bound to undefined symbols in another translation unit\n-   without user intervention.  For instance, under Microsoft Windows\n-   symbols must be explicitly imported from shared libraries (DLLs).  */\n-#define MULTIPLE_SYMBOL_SPACES\n-\n-extern void i386_pe_unique_section PARAMS ((TREE, int));\n-#define TARGET_ASM_UNIQUE_SECTION i386_pe_unique_section\n-\n-#define SUPPORTS_ONE_ONLY 1\n-\n-/* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION  i386_pe_asm_named_section\n-\n-/* Select attributes for named sections.  */\n-#define TARGET_SECTION_TYPE_FLAGS  i386_pe_section_type_flags\n-\n-/* Write the extra assembler code needed to declare a function\n-   properly.  If we are generating SDB debugging information, this\n-   will happen automatically, so we only need to handle other cases.  */\n-#undef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (i386_pe_dllexport_name_p (NAME))\t\t\t\t\\\n-\ti386_pe_record_exported_symbol (NAME, 0);\t\t\t\\\n-      if (write_symbols != SDB_DEBUG)\t\t\t\t\t\\\n-\ti386_pe_declare_function_type (FILE, NAME, TREE_PUBLIC (DECL));\t\\\n-      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* Add an external function to the list of functions to be declared at\n-   the end of the file.  */\n-#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n-\ti386_pe_record_external_function (NAME);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* Declare the type properly for any external libcall.  */\n-#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN) \\\n-  i386_pe_declare_function_type (FILE, XSTR (FUN, 0), 1)\n-\n-/* This says out to put a global symbol in the BSS section.  */\n-#undef ASM_OUTPUT_ALIGNED_BSS\n-#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n-  asm_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n-\n-/* Output function declarations at the end of the file.  */\n-#undef ASM_FILE_END\n-#define ASM_FILE_END(FILE) \\\n-  i386_pe_asm_file_end (FILE)\n-\n-#undef ASM_COMMENT_START\n-#define ASM_COMMENT_START \" #\"\n-\n-/* DWARF2 Unwinding doesn't work with exception handling yet.  To make\n-   it work, we need to build a libgcc_s.dll, and dcrt0.o should be\n-   changed to call __register_frame_info/__deregister_frame_info.  */\n-#define DWARF2_UNWIND_INFO 0\n-\n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n-#undef PROFILE_HOOK\n-#define PROFILE_HOOK(LABEL)\t\t\t\t\t\t\\\n-  if (MAIN_NAME_P (DECL_NAME (current_function_decl)))\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      emit_call_insn (gen_rtx (CALL, VOIDmode,\t\t\t\t\\\n-\tgen_rtx_MEM (FUNCTION_MODE,\t\t\t\t\t\\\n-\t\t     gen_rtx_SYMBOL_REF (Pmode, \"_monstartup\")),\t\\\n-\tconst0_rtx));\t\t\t\t\t\t\t\\\n-    }\n-\n-/* Java Native Interface (JNI) methods on Win32 are invoked using the\n-   stdcall calling convention.  */\n-#undef MODIFY_JNI_METHOD_CALL\n-#define MODIFY_JNI_METHOD_CALL(MDECL)\t\t\t\t\t      \\\n-  build_type_attribute_variant ((MDECL),\t\t\t\t      \\\n-\t\t\t       build_tree_list (get_identifier (\"stdcall\"),   \\\n-\t\t\t\t\t\tNULL))\n-\n-\n-/* External function declarations.  */\n-\n-extern void i386_pe_record_external_function PARAMS ((const char *));\n-extern void i386_pe_declare_function_type PARAMS ((FILE *, const char *, int));\n-extern void i386_pe_record_exported_symbol PARAMS ((const char *, int));\n-extern void i386_pe_asm_file_end PARAMS ((FILE *));\n-extern int i386_pe_dllexport_name_p PARAMS ((const char *));\n-extern int i386_pe_dllimport_name_p PARAMS ((const char *));\n-\n-/* For Win32 ABI compatibility */\n-#undef DEFAULT_PCC_STRUCT_RETURN\n-#define DEFAULT_PCC_STRUCT_RETURN 0\n-\n-/* MSVC returns aggregate types of up to 8 bytes via registers.\n-   See i386.c:ix86_return_in_memory.  */\n-#undef MS_AGGREGATE_RETURN\n-#define MS_AGGREGATE_RETURN 1\n-\n-/* No data type wants to be aligned rounder than this.  */\n-#undef\tBIGGEST_ALIGNMENT\n-#define BIGGEST_ALIGNMENT 128\n-\n-/* Native complier aligns internal doubles in structures on dword boundaries.  */\n-#undef\tBIGGEST_FIELD_ALIGNMENT\n-#define BIGGEST_FIELD_ALIGNMENT 64\n-\n-/* A bit-field declared as `int' forces `int' alignment for the struct.  */\n-#undef PCC_BITFIELD_TYPE_MATTERS\n-#define PCC_BITFIELD_TYPE_MATTERS 1\n-#define GROUP_BITFIELDS_BY_ALIGN TYPE_NATIVE(rec)\n-\n-\n-/* Enable alias attribute support.  */\n-#ifndef SET_ASM_OP\n-#define SET_ASM_OP \"\\t.set\\t\"\n+  %{!mno-cygwin:--dll-search-prefix=cyg}\"\n+\n+/* Allocate space for all of the machine-spec-specific stuff.\n+   Allocate enough space for cygwin -> mingw32  munging plus\n+   possible addition of \"/mingw\".  */\n+\n+#ifndef CYGWIN_MINGW_SUBDIR\n+#define CYGWIN_MINGW_SUBDIR \"/mingw\"\n+#endif \n+#define CYGWIN_MINGW_SUBDIR_LEN (sizeof (CYGWIN_MINGW_SUBDIR) - 1)\n+\n+#ifdef GPLUSPLUS_INCLUDE_DIR\n+char cygwin_gplusplus_include_dir[sizeof (GPLUSPLUS_INCLUDE_DIR) + 1\n+\t\t\t\t  + (CYGWIN_MINGW_SUBDIR_LEN)]\n+  = GPLUSPLUS_INCLUDE_DIR;\n+#undef GPLUSPLUS_INCLUDE_DIR\n+#define GPLUSPLUS_INCLUDE_DIR ((const char *) cygwin_gplusplus_include_dir)\n+#ifndef GEN_CVT_ARRAY\n+#define GEN_CVT_ARRAY\n+#endif\n #endif\n \n-/* Override GCC's relative pathname lookup (ie., relocatability) unless\n-   otherwise told by other subtargets.  */\n-#ifndef WIN32_NO_ABSOLUTE_INST_DIRS\n-#undef MD_STARTFILE_PREFIX\n-#define MD_STARTFILE_PREFIX     \"/usr/lib/\"\n+#ifdef GPLUSPLUS_TOOL_INCLUDE_DIR\n+char cygwin_gplusplus_tool_include_dir[sizeof (GPLUSPLUS_TOOL_INCLUDE_DIR) + 1\n+\t\t\t\t       + CYGWIN_MINGW_SUBDIR_LEN]\n+  = GPLUSPLUS_TOOL_INCLUDE_DIR;\n+#undef GPLUSPLUS_TOOL_INCLUDE_DIR\n+#define GPLUSPLUS_TOOL_INCLUDE_DIR ((const char *) cygwin_gplusplus_tool_include_dir)\n+#ifndef GEN_CVT_ARRAY\n+#define GEN_CVT_ARRAY\n+#endif\n+#endif\n \n-#undef STANDARD_STARTFILE_PREFIX\n-#define STANDARD_STARTFILE_PREFIX     \"/usr/lib/mingw/\"\n+#ifdef GPLUSPLUS_BACKWARD_INCLUDE_DIR\n+char cygwin_gplusplus_backward_include_dir[sizeof (GPLUSPLUS_BACKWARD_INCLUDE_DIR)  + 1\n+\t\t\t\t\t   + CYGWIN_MINGW_SUBDIR_LEN]\n+  = GPLUSPLUS_BACKWARD_INCLUDE_DIR;\n+#undef GPLUSPLUS_BACKWARD_INCLUDE_DIR\n+#define GPLUSPLUS_BACKWARD_INCLUDE_DIR ((const char *) cygwin_gplusplus_backward_include_dir)\n+#ifndef GEN_CVT_ARRAY\n+#define GEN_CVT_ARRAY\n+#endif\n+#endif\n \n-#ifndef CROSS_COMPILE\n+#ifdef LOCAL_INCLUDE_DIR\n+char cygwin_local_include_dir[sizeof (LOCAL_INCLUDE_DIR)  + 1\n+\t\t\t      + CYGWIN_MINGW_SUBDIR_LEN]\n+  = LOCAL_INCLUDE_DIR;\n #undef LOCAL_INCLUDE_DIR\n+#define LOCAL_INCLUDE_DIR ((const char *) cygwin_local_include_dir)\n+#ifndef GEN_CVT_ARRAY\n+#define GEN_CVT_ARRAY\n+#endif\n+#endif\n+\n+#ifdef CROSS_INCLUDE_DIR\n+char cygwin_cross_include_dir[sizeof (CROSS_INCLUDE_DIR) + 1\n+\t\t\t      + CYGWIN_MINGW_SUBDIR_LEN]\n+  = CROSS_INCLUDE_DIR;\n+#undef CROSS_INCLUDE_DIR\n+#define CROSS_INCLUDE_DIR ((const char *) cygwin_cross_include_dir)\n+#ifndef GEN_CVT_ARRAY\n+#define GEN_CVT_ARRAY\n+#endif\n+#endif\n+\n+#ifdef TOOL_INCLUDE_DIR\n+char cygwin_tool_include_dir[sizeof (TOOL_INCLUDE_DIR) + 1\n+\t\t\t     + CYGWIN_MINGW_SUBDIR_LEN]\n+  = TOOL_INCLUDE_DIR;\n #undef TOOL_INCLUDE_DIR\n-#undef SYSTEM_INCLUDE_DIR\n+#define TOOL_INCLUDE_DIR ((const char *) cygwin_tool_include_dir)\n+\n+#ifndef CROSS_COMPILE\n+#undef STANDARD_INCLUDE_DIR\n+#define STANDARD_INCLUDE_DIR \"/usr/include\"\n+char cygwin_standard_include_dir[sizeof (STANDARD_INCLUDE_DIR) + 1\n+\t\t\t\t + CYGWIN_MINGW_SUBDIR_LEN]\n+  = STANDARD_INCLUDE_DIR;\n #undef STANDARD_INCLUDE_DIR\n-#define STANDARD_INCLUDE_DIR 0\n-#endif /* not CROSS_COMPILE */\n-#endif /* not WIN32_NO_ABSOLUTE_INST_DIRS */\n+#define STANDARD_INCLUDE_DIR ((const char *) cygwin_standard_include_dir)\n+#endif\n \n-#undef TREE\n+#ifndef GEN_CVT_ARRAY\n+#define GEN_CVT_ARRAY\n+#endif\n+#endif\n \n-#ifndef BUFSIZ\n-# undef FILE\n+#ifndef GEN_CVT_ARRAY\n+extern char *cvt_to_mingw[];\n+#else\n+char *cvt_to_mingw[] =\n+  {\n+#ifdef GPLUSPLUS_INCLUDE_DIR\n+    cygwin_gplusplus_include_dir,\n+#endif\n+\n+#ifdef GPLUSPLUS_TOOL_INCLUDE_DIR\n+    cygwin_gplusplus_tool_include_dir,\n+#endif\n+\n+#ifdef GPLUSPLUS_BACKWARD_INCLUDE_DIR\n+    cygwin_gplusplus_backward_include_dir,\n+#endif\n+\n+#ifdef LOCAL_INCLUDE_DIR\n+    cygwin_local_include_dir,\n+#endif\n+\n+#ifdef CROSS_INCLUDE_DIR\n+    cygwin_cross_include_dir,\n+#endif\n+\n+#ifdef TOOL_INCLUDE_DIR\n+    cygwin_tool_include_dir,\n+#endif\n+\n+#ifdef STANDARD_INCLUDE_DIR\n+    cygwin_standard_include_dir,\n+#endif\n+\n+    NULL\n+  };\n+#undef GEN_CVT_ARRAY\n+#endif /*GEN_CVT_ARRAY*/\n+\n+void mingw_scan PARAMS ((int, const char * const *, char **));\n+#if 1\n+#define GCC_DRIVER_HOST_INITIALIZATION \\\n+do \\\n+{ \\\n+  mingw_scan(argc, argv, (char **) &spec_machine); \\\n+  } \\\n+while (0)\n+#else\n+#define GCC_DRIVER_HOST_INITIALIZATION \\\n+do \\\n+{ \\\n+  char *cprefix = concat (tooldir_base_prefix, spec_machine, \\\n+\t\t\t  dir_separator_str, NULL); \\\n+  if (!IS_ABSOLUTE_PATHNAME (cprefix)) \\\n+    cprefix = concat (standard_exec_prefix, spec_machine, dir_separator_str, \\\n+\t\t      spec_version, dir_separator_str, tooldir_prefix, NULL); \\\n+  add_prefix (&exec_prefixes,\\\n+\t      concat (cprefix, \"../../../../\", spec_machine, \"/bin/\", NULL), \\\n+\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL); \\\n+  add_prefix (&exec_prefixes, cprefix, \\\n+\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL); \\\n+  add_prefix (&startfile_prefixes,\\\n+\t      concat (standard_startfile_prefix, \"w32api\", NULL),\\\n+\t      \"GCC\", PREFIX_PRIORITY_LAST, 0, NULL);\\\n+  mingw_scan(argc, argv, &spec_machine); \\\n+  } \\\n+while (0)\n #endif"}, {"sha": "5bee5df6e748a53f6652475b0041a0a60e13dc5b", "filename": "gcc/config/i386/cygwin1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fcygwin1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fcygwin1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin1.c?ref=70e5e841b8b9310716018a98acfb8e918c3b4f13", "patch": "@@ -0,0 +1,55 @@\n+/* Helper routines for cygwin-specific command-line parsing.\n+   Contributed by Christopher Faylor (cgf@redhat.com)\n+   Copyright 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include <string.h>\n+\n+void\n+mingw_scan (argc, argv, spec_machine)\n+    int argc ATTRIBUTE_UNUSED;\n+    const char *const *argv;\n+    char **spec_machine;\n+{\n+  putenv (\"GCC_CYGWIN_MINGW=0\");\n+ \n+  while (*++argv)\n+    if (strcmp (*argv, \"-mno-win32\") == 0)\n+      putenv (\"GCC_CYGWIN_WIN32=0\");\n+    else if (strcmp (*argv, \"-mwin32\") == 0)\n+      putenv (\"GCC_CYGWIN_WIN32=1\");\n+    else if (strcmp (*argv, \"-mno-cygwin\") == 0)\n+      {\n+\tchar *p = strstr (*spec_machine, \"-cygwin\");\n+\tif (p)\n+\t  {\n+\t    int len = p - *spec_machine;\n+\t    char *s = xmalloc (strlen (*spec_machine) + 3);\n+\t    memcpy (s, *spec_machine, len);\n+\t    strcpy (s + len, \"-mingw32\");\n+\t    *spec_machine = s;\n+\t  }\n+\tputenv (\"GCC_CYGWIN_MINGW=1\");\n+      }\n+  return;\n+}"}, {"sha": "39bcd71ecd64e192946c8d10c405e7ba376af473", "filename": "gcc/config/i386/cygwin2.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fcygwin2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fcygwin2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin2.c?ref=70e5e841b8b9310716018a98acfb8e918c3b4f13", "patch": "@@ -0,0 +1,67 @@\n+/* Helper routines for cygwin-specific command-line parsing.\n+   Contributed by Christopher Faylor (cgf@redhat.com)\n+   Copyright 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+\n+#include \"safe-ctype.h\"\n+#include <string.h>\n+\n+/*\n+static void remove_w32api PARAMS ((void));\n+*/\n+static void add_mingw PARAMS ((void));\n+static void set_mingw PARAMS((void)) __attribute__ ((constructor));\n+\n+static void\n+add_mingw ()\n+{\n+  char **av;\n+  char *p;\n+  for (av = cvt_to_mingw; *av; av++)\n+    {\n+      int sawcygwin = 0;\n+      while ((p = strstr (*av, \"-cygwin\")))\n+\t{\n+\t  char *over = p + sizeof (\"-cygwin\") - 1;\n+\t  memmove (over + 1, over, strlen (over));\n+\t  memcpy (p, \"-mingw32\", sizeof(\"-mingw32\") - 1);\n+\t  p = ++over;\n+\t  while (ISALNUM (*p))\n+\t    p++;\n+\t  strcpy (over, p);\n+\t  sawcygwin = 1;\n+\t}\n+      if (!sawcygwin && !strstr (*av, \"mingw\"))\n+\tstrcat (*av, CYGWIN_MINGW_SUBDIR);\n+    }\n+}\n+\n+\n+static void\n+set_mingw ()\n+{\n+  char *env = getenv (\"GCC_CYGWIN_MINGW\");\n+  if (env && *env == '1')\n+    add_mingw ();\n+}"}, {"sha": "035dd5d0b3237ea3b68895ef8109f25a8fa2b985", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 5, "deletions": 37, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=70e5e841b8b9310716018a98acfb8e918c3b4f13", "patch": "@@ -20,49 +20,21 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Most of this is the same as for cygwin, except for changing some\n-   specs.  */\n-\n-/* Mingw GCC, unlike Cygwin's, must be relocatable. This macro must \n-   be defined before any other files are included.  */\n-#ifndef WIN32_NO_ABSOLUTE_INST_DIRS\n-#define WIN32_NO_ABSOLUTE_INST_DIRS 1\n-#endif\n-\n-#define TARGET_EXECUTABLE_SUFFIX \".exe\"\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (x86 MinGW)\"); \n \n /* See i386/crtdll.h for an alternative definition.  */\n #define EXTRA_OS_CPP_BUILTINS()\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       builtin_define (\"__MSVCRT__\");\t\t\t\t\\\n       builtin_define (\"__MINGW32__\");\t\t\t   \t\\\n+      builtin_define (\"_WIN32\");\t\t\t\t\\\n+      builtin_define_std (\"WIN32\");\t\t\t\t\\\n+      builtin_define_std (\"WINNT\");\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#undef TARGET_OS_CPP_BUILTINS\t/* From cygwin.h.  */\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-\tbuiltin_define (\"_WIN32\");\t\t\t\t\t\\\n-\tbuiltin_define_std (\"WIN32\");\t\t\t\t\t\\\n-\tbuiltin_define_std (\"WINNT\");\t\t\t\t\t\\\n-\tbuiltin_define (\"_X86_=1\");\t\t\t\t\t\\\n-\tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n-\tbuiltin_define (\"__fastcall=__attribute__((__fastcall__))\");\t\\\n-\tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n-\tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n-\tif (!flag_iso)\t\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    builtin_define (\"_stdcall=__attribute__((__stdcall__))\");\t\\\n-\t    builtin_define (\"_fastcall=__attribute__((__fastcall__))\");\t\\\n-\t    builtin_define (\"_cdecl=__attribute__((__cdecl__))\");\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\tEXTRA_OS_CPP_BUILTINS ();\t\t\t\t\t\\\n-\tbuiltin_assert (\"system=winnt\");\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* Specific a different directory for the standard include files.  */\n #undef STANDARD_INCLUDE_DIR\n #define STANDARD_INCLUDE_DIR \"/usr/local/mingw32/include\"\n@@ -96,10 +68,6 @@ Boston, MA 02111-1307, USA.  */\n #define STARTFILE_SPEC \"%{shared|mdll:dllcrt2%O%s} \\\n   %{!shared:%{!mdll:crt2%O%s}} %{pg:gcrt2%O%s}\"\n \n-/* MS runtime does not need a separate math library.  */\n-#undef MATH_LIBRARY\n-#define MATH_LIBRARY \"\"\n-\n /* Output STRING, a string representing a filename, to FILE.\n    We canonicalize it to be in Unix format (backslashes are replaced\n    forward slashes.  */"}, {"sha": "07e089d35fd8daf2022e41e69c9349e228df5509", "filename": "gcc/config/i386/t-cygming", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Ft-cygming", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Ft-cygming", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygming?ref=70e5e841b8b9310716018a98acfb8e918c3b4f13", "patch": "@@ -0,0 +1,21 @@\n+LIB1ASMSRC = i386/cygwin.asm\n+LIB1ASMFUNCS = _chkstk\n+\n+# cygwin and mingw always have a limits.h, but, depending upon how we are\n+# doing the build, it may not be installed yet.\n+LIMITS_H_TEST = true\n+\n+# If we are building next to winsup, this will let us find the real\n+# limits.h when building libgcc2.  Otherwise, winsup must be installed\n+# first.\n+LIBGCC2_INCLUDES = -I$(srcdir)/../winsup/w32api/include\n+\n+winnt.o: $(srcdir)/config/i386/winnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n+  $(TM_P_H) toplev.h $(HASHTAB_H) $(GGC_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t$(srcdir)/config/i386/winnt.c\n+\n+# Don't run fixproto\n+STMP_FIXPROTO=\n+STMP_FIXINC=stmp-fixinc"}, {"sha": "1a1534d4df04581c4e6ad80f498c91651d051bb0", "filename": "gcc/config/i386/t-cygwin", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Ft-cygwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e5e841b8b9310716018a98acfb8e918c3b4f13/gcc%2Fconfig%2Fi386%2Ft-cygwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygwin?ref=70e5e841b8b9310716018a98acfb8e918c3b4f13", "patch": "@@ -1,23 +1,18 @@\n-LIB1ASMSRC = i386/cygwin.asm\n-LIB1ASMFUNCS = _chkstk\n-\n-# cygwin always has a limits.h, but, depending upon how we are doing\n-# the build, it may not be installed yet.\n-LIMITS_H_TEST = true\n-\n-T_CPPFLAGS=-DCYGWIN_CROSS_DIR=\\\"$(build_tooldir)\\\"\n+EXTRA_GCC_OBJS = cygwin1.o\n \n # If we are building next to winsup, this will let us find the real\n # limits.h when building libgcc2.  Otherwise, winsup must be installed\n # first.\n-LIBGCC2_INCLUDES = -I$(srcdir)/../winsup/include \\\n-\t-I$(srcdir)/../winsup/cygwin/include \\\n-\t-I$(srcdir)/../winsup/w32api/include\n+LIBGCC2_INCLUDES += -I$(srcdir)/../winsup/include \\\n+\t-I$(srcdir)/../winsup/cygwin/include\n+\n+cygwin1.o: $(srcdir)/config/i386/cygwin1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(TM_H) $(TM_P_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t$(srcdir)/config/i386/cygwin1.c\n \n-winnt.o: $(srcdir)/config/i386/winnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n-  $(TM_P_H) toplev.h $(HASHTAB_H) $(GGC_H)\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/i386/winnt.c\n+cygwin2.o: $(srcdir)/config/i386/cygwin2.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(TM_H) $(TM_P_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t$(srcdir)/config/i386/cygwin2.c\n \n-# Don't run fixproto\n-STMP_FIXPROTO ="}]}