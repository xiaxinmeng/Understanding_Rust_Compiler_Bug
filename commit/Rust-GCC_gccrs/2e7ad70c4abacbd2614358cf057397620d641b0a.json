{"sha": "2e7ad70c4abacbd2614358cf057397620d641b0a", "node_id": "C_kwDOANBUbNoAKDJlN2FkNzBjNGFiYWNiZDI2MTQzNThjZjA1NzM5NzYyMGQ2NDFiMGE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-09T00:18:05Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-09T00:18:05Z"}, "message": "Daily bump.", "tree": {"sha": "bc492e836e69ef7691d52b6e0efcaeabc79a8a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc492e836e69ef7691d52b6e0efcaeabc79a8a0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e7ad70c4abacbd2614358cf057397620d641b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e7ad70c4abacbd2614358cf057397620d641b0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e7ad70c4abacbd2614358cf057397620d641b0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e7ad70c4abacbd2614358cf057397620d641b0a/comments", "author": null, "committer": null, "parents": [{"sha": "a0f83501182de68ff038f3c69da549e6c80bb6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f83501182de68ff038f3c69da549e6c80bb6bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0f83501182de68ff038f3c69da549e6c80bb6bd"}], "stats": {"total": 458, "additions": 457, "deletions": 1}, "files": [{"sha": "73748ca691383793fb428f7b522030c460fe8f31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e7ad70c4abacbd2614358cf057397620d641b0a", "patch": "@@ -1,3 +1,137 @@\n+2022-09-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/106838\n+\t* doc/extend.texi (Type Traits): Fix requirements. Document\n+\t__is_aggregate and __is_final.\n+\n+2022-09-08  Tim Lange  <mail@tim-lange.me>\n+\n+\tPR analyzer/106625\n+\t* doc/invoke.texi:\n+\tState that the checker also reasons about symbolic values.\n+\n+2022-09-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/106886\n+\t* tree-vect-slp.cc (vect_optimize_slp_pass::get_result_with_layout):\n+\tFix copying of scalar stmts.\n+\n+2022-09-08  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* config/nios2/linux.h (MUSL_DYNAMIC_LINKER): Add #undef before #define.\n+\n+2022-09-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106870\n+\t* gimple-harden-conditionals.cc (insert_check_and_trap):\n+\tSet the control-altering flag on the built IFN_TRAP.\n+\t* gimple.cc (gimple_build_builtin_unreachable): Likewise.\n+\t* tree-cfg.cc (handle_abnormal_edges): Set the control-altering\n+\tflag on the .ABNORMAL_DISPATCHER call.\n+\t* tree-cfgcleanup.cc (cleanup_call_ctrl_altering_flag): Avoid\n+\tresetting the control altering flag for ECF_NORETURN calls.\n+\t(cleanup_control_flow_bb): Set the control altering flag on\n+\tdiscovered noreturn calls.\n+\t* symtab-thunks.cc (expand_thunk): Set the control altering\n+\tflag for the noreturn tailcall case.\n+\t* tree-eh.cc (lower_resx): Likewisw for trap and unwind_resume\n+\tcalls.\n+\n+2022-09-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-expand.cc (expand_omp_ordered_sink): Add CONT_BB argument.\n+\tAdd doacross(sink:omp_cur_iteration-1) support.\n+\t(expand_omp_ordered_source_sink): Clear counts[fd->ordered + 1].\n+\tAdjust expand_omp_ordered_sink caller.\n+\t(expand_omp_for_ordered_loops): If counts[fd->ordered + 1] is\n+\tnon-NULL, set that variable to true at the start of outermost\n+\tnon-collapsed loop and set it to false at the end of innermost\n+\tordered loop.\n+\t(expand_omp_for_generic): If fd->ordered, allocate\n+\t1 + (fd->ordered - fd->collapse) further elements in counts array.\n+\tCopy to counts + 2 + fd->ordered the counts of fd->collapse ..\n+\tfd->ordered - 1 loop if any.\n+\n+2022-09-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106881\n+\t* gimple-predicate-analysis.cc (compute_control_dep_chain_pdom):\n+\tAdd only non-fallthru edges and avoid the same set of edges\n+\tas the caller does.\n+\n+2022-09-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc\n+\t(fold_using_range::range_of_builtin_int_call): Use fpclassify like API.\n+\t* range-op-float.cc (finite_operand_p): Same.\n+\t(finite_operands_p): Same.\n+\t(foperator_lt::fold_range): Same.\n+\t(foperator_le::fold_range): Same.\n+\t(foperator_gt::fold_range): Same.\n+\t(foperator_ge::fold_range): Same.\n+\t(foperator_unordered::fold_range): Same.\n+\t(foperator_unordered::op1_range): Same.\n+\t(foperator_ordered::fold_range): Same.\n+\t* value-range.cc (frange::set_nan): Same.\n+\t(frange::set_signbit): Same.\n+\t(frange::union_): Same.\n+\t(frange::intersect): Same.\n+\t(frange::operator==): Same.\n+\t(frange::singleton_p): Same.\n+\t(frange::verify_range): Same.\n+\t(range_tests_nan): Same.\n+\t(range_tests_floats): Same.\n+\t* value-range.h(frange::known_finite): New.\n+\t(frange::maybe_inf): New.\n+\t(frange::known_inf): New.\n+\t(frange::maybe_nan): New.\n+\t(frange::known_nan): New.\n+\t(frange::known_signbit): New.\n+\n+2022-09-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* config/darwin-d.cc: Include tm.h.\n+\t* config/dragonfly-d.cc: Likewise.\n+\t* config/freebsd-d.cc: Remove memmodel.h.\n+\t* config/glibc-d.cc: Likewise.\n+\t* config/netbsd-d.cc: Include tm.h.\n+\t* config/openbsd-d.cc: Likewise.\n+\t* config/sol2-d.cc: Likewise.\n+\n+2022-09-08  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* config/arm/mve.md (mve_vqshluq_n_s<mode>): Use\n+\tMVE_pred/MVE_constraint instead of mve_imm_7/Ra.\n+\t(mve_vqshluq_m_n_s<mode>): Likewise.\n+\t(mve_vqrshrnbq_n_<supf><mode>): Use MVE_pred3/MVE_constraint3\n+\tinstead of mve_imm_8/Rb.\n+\t(mve_vqrshrunbq_n_s<mode>): Likewise.\n+\t(mve_vqrshrntq_n_<supf><mode>): Likewise.\n+\t(mve_vqrshruntq_n_s<mode>): Likewise.\n+\t(mve_vrshrnbq_n_<supf><mode>): Likewise.\n+\t(mve_vrshrntq_n_<supf><mode>): Likewise.\n+\t(mve_vqrshrnbq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqrshrntq_m_n_<supf><mode>): Likewise.\n+\t(mve_vrshrnbq_m_n_<supf><mode>): Likewise.\n+\t(mve_vrshrntq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqrshrunbq_m_n_s<mode>): Likewise.\n+\t(mve_vsriq_n_<supf><mode): Use MVE_pred2/MVE_constraint2 instead\n+\tof mve_imm_selective_upto_8/Rg.\n+\t(mve_vsriq_m_n_<supf><mode>): Likewise.\n+\n+2022-09-08  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (splitter for set to and_mask constants):\n+\tUse int_reg_operand (instead of int_reg_operand_not_pseudo).\n+\t(splitter for multi-insn constant loads): Ditto.\n+\n+2022-09-08  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config/rs6000/rtems.h (CPP_OS_DEFAULT_SPEC): Define __PPC_VRSAVE__ if\n+\t-mvrsave is present.\n+\t* config/rs6000/t-rtems: Add -mvrsave multilib variants for\n+\t-mcpu=e6500.\n+\n 2022-09-07  Martin Liska  <mliska@suse.cz>\n \n \t* configure.ac: Restore detection of  HAVE_XCOFF_DWARF_EXTRAS."}, {"sha": "56639c30a8b4c6ee3906949a0c8b4ef27d5d2c14", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2e7ad70c4abacbd2614358cf057397620d641b0a", "patch": "@@ -1 +1 @@\n-20220908\n+20220909"}, {"sha": "7263e741abdd2a1eaa1e8f4f851f67e1a96b222f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=2e7ad70c4abacbd2614358cf057397620d641b0a", "patch": "@@ -1,3 +1,54 @@\n+2022-09-08  Tim Lange  <mail@tim-lange.me>\n+\n+\tPR analyzer/106625\n+\t* analyzer.h (region_offset): Eliminate m_is_symbolic member.\n+\t* region-model-impl-calls.cc (region_model::impl_call_realloc):\n+\tRefine implementation to be more precise.\n+\t* region-model.cc (class symbolic_past_the_end):\n+\tAbstract diagnostic class to complain about accesses past the end\n+\twith symbolic values.\n+\t(class symbolic_buffer_overflow):\n+\tConcrete diagnostic class to complain about buffer overflows with\n+\tsymbolic values.\n+\t(class symbolic_buffer_overread):\n+\tConcrete diagnostic class to complain about buffer overreads with\n+\tsymbolic values.\n+\t(region_model::check_symbolic_bounds): New function.\n+\t(maybe_get_integer_cst_tree): New helper function.\n+\t(region_model::check_region_bounds):\n+\tAdd call to check_symbolic_bounds if offset is not concrete.\n+\t(region_model::eval_condition_without_cm):\n+\tAdd support for EQ_EXPR and GT_EXPR with binaryop_svalues.\n+\t(is_positive_svalue): New hleper function.\n+\t(region_model::symbolic_greater_than):\n+\tNew function to handle GT_EXPR comparisons with symbolic values.\n+\t(region_model::structural_equality): New function to compare\n+\twhether two svalues are structured the same, i.e. evaluate to\n+\tthe same value.\n+\t(test_struct): Reflect changes to region::calc_offset.\n+\t(test_var): Likewise.\n+\t(test_array_2): Likewise and add selftest with symbolic i.\n+\t* region-model.h (class region_model): Add check_symbolic_bounds,\n+\tsymbolic_greater_than and structural_equality.\n+\t* region.cc (region::get_offset):\n+\tReflect changes to region::calc_offset.\n+\t(region::calc_offset):\n+\tCompute the symbolic offset if the offset is not concrete.\n+\t(region::get_relative_symbolic_offset): New function to return the\n+\tsymbolic offset in bytes relative to its parent.\n+\t(field_region::get_relative_symbolic_offset): Likewise.\n+\t(element_region::get_relative_symbolic_offset): Likewise.\n+\t(offset_region::get_relative_symbolic_offset): Likewise.\n+\t(bit_range_region::get_relative_symbolic_offset): Likewise.\n+\t* region.h: Add get_relative_symbolic_offset.\n+\t* store.cc (binding_key::make):\n+\tReflect changes to region::calc_offset.\n+\t(binding_map::apply_ctor_val_to_range): Likewise.\n+\t(binding_map::apply_ctor_pair_to_child_region): Likewise.\n+\t(binding_cluster::bind_compound_sval): Likewise.\n+\t(binding_cluster::get_any_binding): Likewise.\n+\t(binding_cluster::maybe_get_compound_binding): Likewise.\n+\n 2022-09-05  Tim Lange  <mail@tim-lange.me>\n \n \t* region-model-impl-calls.cc (region_model::impl_call_strcpy):"}, {"sha": "0f3742340185e134d2247d72a0030a2c6545979d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2e7ad70c4abacbd2614358cf057397620d641b0a", "patch": "@@ -1,3 +1,20 @@\n+2022-09-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/106838\n+\t* class.cc (type_has_virtual_destructor): Return false for\n+\tunion types.\n+\t* semantics.cc (check_trait_type): Add KIND parameter to support\n+\tdifferent sets of requirements.\n+\t(finish_trait_expr): Pass KIND argument for relevant traits.\n+\n+2022-09-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99130\n+\t* decl2.cc (maybe_instantiate_decl): Adjust function comment.\n+\tCheck VAR_OR_FUNCTION_DECL_P.  Pull out the disjunction into ...\n+\t(mark_used): ... here, removing the decl_maybe_constant_var_p\n+\tpart of it.\n+\n 2022-09-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/106793"}, {"sha": "e6c4c2c361bc223bf3531a897e6d9dc79e9ced7d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2e7ad70c4abacbd2614358cf057397620d641b0a", "patch": "@@ -1,3 +1,10 @@\n+2022-09-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/106670\n+\t* scanner.cc (skip_fixed_omp_sentinel): Add -Wsurprising warning\n+\tfor 'omx' sentinels with -fopenmp.\n+\t* invoke.texi (-Wsurprising): Document additional warning case.\n+\n 2022-09-06  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* openmp.cc (resolve_omp_clauses): Remove ordered/linear"}, {"sha": "b027c5a5d03105cb58f59ee95a41faa1c72126cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7ad70c4abacbd2614358cf057397620d641b0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e7ad70c4abacbd2614358cf057397620d641b0a", "patch": "@@ -1,3 +1,57 @@\n+2022-09-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/106670\n+\t* c-c++-common/gomp/ompx-1.c: New test.\n+\t* c-c++-common/gomp/ompx-2.c: New test.\n+\t* g++.dg/gomp/ompx-attrs-1.C: New test.\n+\t* gfortran.dg/gomp/ompx-1.f90: New test.\n+\t* gfortran.dg/gomp/omx-1.f: New test.\n+\t* gfortran.dg/gomp/omx-2.f: New test.\n+\n+2022-09-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/106838\n+\t* g++.dg/ext/array4.C: Fix invalid use of __is_constructible.\n+\t* g++.dg/ext/unary_trait_incomplete.C: Fix tests for traits with\n+\tdifferent requirements.\n+\n+2022-09-08  Tim Lange  <mail@tim-lange.me>\n+\n+\tPR analyzer/106625\n+\t* gcc.dg/analyzer/data-model-1.c: Change expected result.\n+\t* gcc.dg/analyzer/out-of-bounds-5.c: New test.\n+\t* gcc.dg/analyzer/out-of-bounds-realloc-grow.c: New test.\n+\t* gcc.dg/analyzer/symbolic-gt-1.c: New test.\n+\n+2022-09-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/106886\n+\t* gcc.dg/vect/bb-slp-layout-21.c: New test.\n+\n+2022-09-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99209\n+\t* g++.dg/cpp2a/lambda-uneval17.C: New test.\n+\n+2022-09-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99130\n+\t* g++.dg/cpp0x/constexpr-decltype5.C: New test.\n+\n+2022-09-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/doacross-7.c: New test.\n+\n+2022-09-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106881\n+\t* gcc.dg/uninit-pr106881.c: New testcase.\n+\n+2022-09-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/106872\n+\t* gcc.dg/uninit-pred-12.c: Adjust.\n+\n 2022-09-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/106793"}, {"sha": "5984915a49e8cd53a5401e978717c42f0625d2e7", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7ad70c4abacbd2614358cf057397620d641b0a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7ad70c4abacbd2614358cf057397620d641b0a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=2e7ad70c4abacbd2614358cf057397620d641b0a", "patch": "@@ -1,3 +1,11 @@\n+2022-09-08  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* line-map.cc (location_adhoc_data_update): Remove reliance on\n+\tundefined behavior.\n+\t(get_combined_adhoc_loc): Likewise.\n+\t(rebuild_location_adhoc_htab): Fix issue where the htab was not\n+\tproperly updated.\n+\n 2022-09-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* include/cpplib.h (struct cpp_options): Add true_false."}, {"sha": "887c59bd9a0f22801310a71a82d4939222cf9e13", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7ad70c4abacbd2614358cf057397620d641b0a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7ad70c4abacbd2614358cf057397620d641b0a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2e7ad70c4abacbd2614358cf057397620d641b0a", "patch": "@@ -1,3 +1,128 @@\n+2022-09-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/106670\n+\t* libgomp.texi (OpenMP 5.2): Add comment to ompx/omx entry.\n+\n+2022-09-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP-Implementation Specifics): New; add libmemkind\n+\tsection; move OpenMP Context Selectors from ...\n+\t(Offload-Target Specifics): ... here; add 'AMD Radeo (GCN)' and\n+\t'nvptx' sections.\n+\n+2022-09-08  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* config/gcn/icv-device.c (omp_get_default_device): Return device-\n+\tspecific ICV.\n+\t(omp_get_max_teams): Added for GCN devices.\n+\t(omp_set_num_teams): Likewise.\n+\t(ialias): Likewise.\n+\t* config/nvptx/icv-device.c (omp_get_default_device): Return device-\n+\tspecific ICV.\n+\t(omp_get_max_teams): Added for NVPTX devices.\n+\t(omp_set_num_teams): Likewise.\n+\t(ialias): Likewise.\n+\t* env.c (struct gomp_icv_list): New struct to store entries of initial\n+\tICV values.\n+\t(struct gomp_offload_icv_list): New struct to store entries of device-\n+\tspecific ICV values that are copied to the device and back.\n+\t(struct gomp_default_icv_values): New struct to store default values of\n+\tICVs according to the OpenMP standard.\n+\t(parse_schedule): Generalized for different variants of OMP_SCHEDULE.\n+\t(print_env_var_error): Function that prints an error for invalid values\n+\tfor ICVs.\n+\t(parse_unsigned_long_1): Removed getenv.  Generalized.\n+\t(parse_unsigned_long): Likewise.\n+\t(parse_int_1): Likewise.\n+\t(parse_int): Likewise.\n+\t(parse_int_secure): Likewise.\n+\t(parse_unsigned_long_list): Likewise.\n+\t(parse_target_offload): Likewise.\n+\t(parse_bind_var): Likewise.\n+\t(parse_stacksize): Likewise.\n+\t(parse_boolean): Likewise.\n+\t(parse_wait_policy): Likewise.\n+\t(parse_allocator): Likewise.\n+\t(omp_display_env): Extended to output different variants of environment\n+\tvariables.\n+\t(print_schedule): New helper function for omp_display_env which prints\n+\tthe values of run_sched_var.\n+\t(print_proc_bind): New helper function for omp_display_env which prints\n+\tthe values of proc_bind_var.\n+\t(enum gomp_parse_type): Collection of types used for parsing environment\n+\tvariables.\n+\t(ENTRY): Preprocess string lengths of environment variables.\n+\t(OMP_VAR_CNT): Preprocess table size.\n+\t(OMP_HOST_VAR_CNT): Likewise.\n+\t(INT_MAX_STR_LEN): Constant for the maximal number of digits of a device\n+\tnumber.\n+\t(gomp_get_icv_flag): Returns if a flag for a particular ICV is set.\n+\t(gomp_set_icv_flag): Sets a flag for a particular ICV.\n+\t(print_device_specific_icvs): New helper function for omp_display_env to\n+\tprint device specific ICV values.\n+\t(get_device_num): New helper function for parse_device_specific.\n+\tExtracts the device number from an environment variable name.\n+\t(get_icv_member_addr): Gets the memory address for a particular member\n+\tof an ICV struct.\n+\t(gomp_get_initial_icv_item): Get a list item of gomp_initial_icv_list.\n+\t(initialize_icvs): New function to initialize a gomp_initial_icvs\n+\tstruct.\n+\t(add_initial_icv_to_list): Adds an ICV struct to gomp_initial_icv_list.\n+\t(startswith): Checks if a string starts with a given prefix.\n+\t(initialize_env): Extended to parse the new syntax of environment\n+\tvariables.\n+\t* icv-device.c (omp_get_max_teams): Added.\n+\t(ialias): Likewise.\n+\t(omp_set_num_teams): Likewise.\n+\t* icv.c (omp_set_num_teams): Moved to icv-device.c.\n+\t(omp_get_max_teams): Likewise.\n+\t(ialias): Likewise.\n+\t* libgomp-plugin.h (GOMP_DEVICE_NUM_VAR): Removed.\n+\t(GOMP_ADDITIONAL_ICVS): New target-side struct that\n+\tholds the designated ICVs of the target device.\n+\t* libgomp.h (enum gomp_icvs): Collection of ICVs.\n+\t(enum gomp_device_num): Definition of device numbers for _ALL, _DEV, and\n+\tno suffix.\n+\t(enum gomp_env_suffix): Collection of possible suffixes of environment\n+\tvariables.\n+\t(struct gomp_initial_icvs): Contains all ICVs for which we need to store\n+\tinitial values.\n+\t(struct gomp_default_icv):New struct to hold ICVs for which we need\n+\tto store initial values.\n+\t(struct gomp_icv_list): Definition of a linked list that is used for\n+\tstoring ICVs for the devices and also for _DEV, _ALL, and without\n+\tsuffix.\n+\t(struct gomp_offload_icvs): New struct to hold ICVs that are copied to\n+\ta device.\n+\t(struct gomp_offload_icv_list): Definition of a linked list that holds\n+\tdevice-specific ICVs that are copied to devices.\n+\t(gomp_get_initial_icv_item): Get a list item of gomp_initial_icv_list.\n+\t(gomp_get_icv_flag): Returns if a flag for a particular ICV is set.\n+\t* libgomp.texi: Updated.\n+\t* plugin/plugin-gcn.c (GOMP_OFFLOAD_load_image): Extended to read\n+\tfurther ICVs from the offload image.\n+\t* plugin/plugin-nvptx.c (GOMP_OFFLOAD_load_image): Likewise.\n+\t* target.c (gomp_get_offload_icv_item): Get a list item of\n+\tgomp_offload_icv_list.\n+\t(get_gomp_offload_icvs): New. Returns the ICV values\n+\tdepending on the device num and the variable hierarchy.\n+\t(gomp_load_image_to_device): Extended to copy further ICVs to a device.\n+\t* testsuite/libgomp.c-c++-common/icv-5.c: New test.\n+\t* testsuite/libgomp.c-c++-common/icv-6.c: New test.\n+\t* testsuite/libgomp.c-c++-common/icv-7.c: New test.\n+\t* testsuite/libgomp.c-c++-common/icv-8.c: New test.\n+\t* testsuite/libgomp.c-c++-common/omp-display-env-1.c: New test.\n+\t* testsuite/libgomp.c-c++-common/omp-display-env-2.c: New test.\n+\n+2022-09-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.texi (OpenMP 5.2): Mention that omp_cur_iteration is now\n+\tfully supported.\n+\t* testsuite/libgomp.c/doacross-4.c: New test.\n+\t* testsuite/libgomp.c/doacross-5.c: New test.\n+\t* testsuite/libgomp.c/doacross-6.c: New test.\n+\t* testsuite/libgomp.c/doacross-7.c: New test.\n+\n 2022-09-05  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (OpenMP 5.2): Update doacross/omp_cur_iteration status."}, {"sha": "578173519de1cdf9006f47d3ec6fc605b850cee9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7ad70c4abacbd2614358cf057397620d641b0a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7ad70c4abacbd2614358cf057397620d641b0a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2e7ad70c4abacbd2614358cf057397620d641b0a", "patch": "@@ -1,3 +1,63 @@\n+2022-09-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* testsuite/util/testsuite_performance.h (__gnu_test::MallocInfo): New.\n+\t(__gnu_test::malloc_info): New, replace mallinfo on current platform\n+\tsupporting it and use mallinfo2 when glibc >= 2.33.\n+\n+2022-09-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/106838\n+\t* testsuite/20_util/is_complete_or_unbounded/memoization_neg.cc:\n+\tPrune additional errors from front-end.\n+\t* testsuite/20_util/is_move_constructible/incomplete_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_nothrow_swappable/incomplete_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_nothrow_swappable_with/incomplete_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_swappable_with/incomplete_neg.cc:\n+\tLikewise.\n+\n+2022-09-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/c_global/cstddef (byte): Add always_inline attribute\n+\tto all operator overloads.\n+\t(to_integer): Add always_inline attribute.\n+\n+2022-09-08  Thomas Rodgers  <trodgers@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_base.h (__atomic_impl::__maybe_has_padding):\n+\tNew function.\n+\t(__atomic_impl::clear_padding): Likewise.\n+\t(__atomic_impl::__compare_exchange): Likewise.\n+\t(__atomic_impl::compare_exchange_weak): Delegate to\n+\t__compare_exchange.\n+\t(__atomic_impl::compare_exchange_strong): Likewise.\n+\t* include/std/atomic (atomic<T>::atomic(T)): Clear padding when\n+\tpossible in a constexpr function.\n+\t(atomic::store): Clear padding.\n+\t(atomic::exchange): Likewise.\n+\t(atomic::compare_exchange_weak): Use __compare_exchange.\n+\t(atomic::compare_exchange_strong): Likewise.\n+\t* testsuite/29_atomics/atomic/compare_exchange_padding.cc: New\n+\ttest.\n+\t* testsuite/29_atomics/atomic_ref/compare_exchange_padding.cc:\n+\tNew test.\n+\n+2022-09-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/system_error (__adl_only::make_error_code): Add\n+\tdeleted function.\n+\t(__adl_only::make_error_condition): Likewise.\n+\t(error_code::error_code(ErrorCodeEnum)): Add using-declaration\n+\tfor deleted function.\n+\t(error_condition::error_condition(ErrorConditionEnum)):\n+\tLikewise.\n+\t* testsuite/19_diagnostics/error_code/cons/lwg3629.cc: New test.\n+\t* testsuite/19_diagnostics/error_condition/cons/lwg3629.cc: New test.\n+\n 2022-09-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/barrier: Add missing runtime exception."}]}