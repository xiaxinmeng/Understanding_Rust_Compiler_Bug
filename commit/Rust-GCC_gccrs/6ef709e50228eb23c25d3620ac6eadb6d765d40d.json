{"sha": "6ef709e50228eb23c25d3620ac6eadb6d765d40d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVmNzA5ZTUwMjI4ZWIyM2MyNWQzNjIwYWM2ZWFkYjZkNzY1ZDQwZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:26:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:26:31Z"}, "message": "[44/46] Remove global vinfo_for_stmt-related routines\n\nThere are no more direct uses of:\n\n- new_stmt_vec_info\n- set_vinfo_for_stmt\n- free_stmt_vec_infos\n- free_stmt_vec_info\n\noutside of vec_info, so they can now be private member functions.\nIt also seemed better to put them in tree-vectorizer.c, along with the\nother vec_info routines.\n\nWe can also get rid of:\n\n- vinfo_for_stmt\n- stmt_vec_info_vec\n- set_stmt_vec_info_vec\n\nsince nothing now uses them.  This was the main goal of the series.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (vec_info::new_vinfo_for_stmt)\n\t(vec_info::set_vinfo_for_stmt, vec_info::free_stmt_vec_infos)\n\t(vec_info::free_stmt_vec_info): New private member functions.\n\t(set_stmt_vec_info_vec, free_stmt_vec_infos, vinfo_for_stmt)\n\t(set_vinfo_for_stmt, new_stmt_vec_info, free_stmt_vec_info): Delete.\n\t* tree-parloops.c (gather_scalar_reductions): Remove calls to\n\tset_stmt_vec_info_vec and free_stmt_vec_infos.\n\t* tree-vect-loop.c (_loop_vec_info): Remove call to\n\tset_stmt_vec_info_vec.\n\t* tree-vect-stmts.c (new_stmt_vec_info, set_stmt_vec_info_vec)\n\t(free_stmt_vec_infos, free_stmt_vec_info): Delete in favor of...\n\t* tree-vectorizer.c (vec_info::new_stmt_vec_info)\n\t(vec_info::set_vinfo_for_stmt, vec_info::free_stmt_vec_infos)\n\t(vec_info::free_stmt_vec_info): ...these new functions.  Remove\n\tassignments in {vec_info::,}new_stmt_vec_info that are redundant\n\twith the clearing in the xcalloc.\n\t(stmt_vec_info_vec): Delete.\n\t(vec_info::vec_info): Don't call set_stmt_vec_info_vec.\n\t(vectorize_loops): Likewise.\n\t(vec_info::~vec_info): Remove argument from call to\n\tfree_stmt_vec_infos.\n\t(vec_info::add_stmt): Remove vinfo argument from call to\n\tnew_stmt_vec_info.\n\nFrom-SVN: r263159", "tree": {"sha": "433895df78a59e03d310b0cee116230e528175d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/433895df78a59e03d310b0cee116230e528175d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ef709e50228eb23c25d3620ac6eadb6d765d40d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef709e50228eb23c25d3620ac6eadb6d765d40d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ef709e50228eb23c25d3620ac6eadb6d765d40d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef709e50228eb23c25d3620ac6eadb6d765d40d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "458135c0354f19eb2bd032d42c27076def8c31de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458135c0354f19eb2bd032d42c27076def8c31de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458135c0354f19eb2bd032d42c27076def8c31de"}], "stats": {"total": 264, "additions": 116, "deletions": 148}, "files": [{"sha": "2a4979e043265b61ecab390ee766f1e70c0f597f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ef709e50228eb23c25d3620ac6eadb6d765d40d", "patch": "@@ -1,3 +1,29 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vec_info::new_vinfo_for_stmt)\n+\t(vec_info::set_vinfo_for_stmt, vec_info::free_stmt_vec_infos)\n+\t(vec_info::free_stmt_vec_info): New private member functions.\n+\t(set_stmt_vec_info_vec, free_stmt_vec_infos, vinfo_for_stmt)\n+\t(set_vinfo_for_stmt, new_stmt_vec_info, free_stmt_vec_info): Delete.\n+\t* tree-parloops.c (gather_scalar_reductions): Remove calls to\n+\tset_stmt_vec_info_vec and free_stmt_vec_infos.\n+\t* tree-vect-loop.c (_loop_vec_info): Remove call to\n+\tset_stmt_vec_info_vec.\n+\t* tree-vect-stmts.c (new_stmt_vec_info, set_stmt_vec_info_vec)\n+\t(free_stmt_vec_infos, free_stmt_vec_info): Delete in favor of...\n+\t* tree-vectorizer.c (vec_info::new_stmt_vec_info)\n+\t(vec_info::set_vinfo_for_stmt, vec_info::free_stmt_vec_infos)\n+\t(vec_info::free_stmt_vec_info): ...these new functions.  Remove\n+\tassignments in {vec_info::,}new_stmt_vec_info that are redundant\n+\twith the clearing in the xcalloc.\n+\t(stmt_vec_info_vec): Delete.\n+\t(vec_info::vec_info): Don't call set_stmt_vec_info_vec.\n+\t(vectorize_loops): Likewise.\n+\t(vec_info::~vec_info): Remove argument from call to\n+\tfree_stmt_vec_infos.\n+\t(vec_info::add_stmt): Remove vinfo argument from call to\n+\tnew_stmt_vec_info.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (free_stmt_vec_info): Take a stmt_vec_info"}, {"sha": "e89c8875147e0197593700693c56684f9f6bddb5", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=6ef709e50228eb23c25d3620ac6eadb6d765d40d", "patch": "@@ -2592,10 +2592,6 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n   auto_vec<gphi *, 4> double_reduc_phis;\n   auto_vec<gimple *, 4> double_reduc_stmts;\n \n-  vec<stmt_vec_info> stmt_vec_infos;\n-  stmt_vec_infos.create (50);\n-  set_stmt_vec_info_vec (&stmt_vec_infos);\n-\n   vec_info_shared shared;\n   simple_loop_info = vect_analyze_loop_form (loop, &shared);\n   if (simple_loop_info == NULL)\n@@ -2679,14 +2675,11 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n     }\n \n  gather_done:\n-  /* Release the claim on gimple_uid.  */\n-  free_stmt_vec_infos (&stmt_vec_infos);\n-\n   if (reduction_list->elements () == 0)\n     return;\n \n   /* As gimple_uid is used by the vectorizer in between vect_analyze_loop_form\n-     and free_stmt_vec_info_vec, we can set gimple_uid of reduc_phi stmts only\n+     and delete simple_loop_info, we can set gimple_uid of reduc_phi stmts only\n      now.  */\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, cfun)"}, {"sha": "7ce9ca5e6fc021ce9d97e4b87e8e00205851c3bb", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=6ef709e50228eb23c25d3620ac6eadb6d765d40d", "patch": "@@ -888,8 +888,6 @@ _loop_vec_info::~_loop_vec_info ()\n   gimple_stmt_iterator si;\n   int j;\n \n-  /* ???  We're releasing loop_vinfos en-block.  */\n-  set_stmt_vec_info_vec (&stmt_vec_infos);\n   nbbs = loop->num_nodes;\n   for (j = 0; j < nbbs; j++)\n     {"}, {"sha": "568705c3eed2f173f7117bbf1198f656288d158d", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=6ef709e50228eb23c25d3620ac6eadb6d765d40d", "patch": "@@ -9853,97 +9853,6 @@ vect_remove_stores (stmt_vec_info first_stmt_info)\n     }\n }\n \n-\n-/* Function new_stmt_vec_info.\n-\n-   Create and initialize a new stmt_vec_info struct for STMT.  */\n-\n-stmt_vec_info\n-new_stmt_vec_info (gimple *stmt, vec_info *vinfo)\n-{\n-  stmt_vec_info res;\n-  res = (_stmt_vec_info *) xcalloc (1, sizeof (struct _stmt_vec_info));\n-\n-  STMT_VINFO_TYPE (res) = undef_vec_info_type;\n-  STMT_VINFO_STMT (res) = stmt;\n-  res->vinfo = vinfo;\n-  STMT_VINFO_RELEVANT (res) = vect_unused_in_scope;\n-  STMT_VINFO_LIVE_P (res) = false;\n-  STMT_VINFO_VECTYPE (res) = NULL;\n-  STMT_VINFO_VEC_STMT (res) = NULL;\n-  STMT_VINFO_VECTORIZABLE (res) = true;\n-  STMT_VINFO_IN_PATTERN_P (res) = false;\n-  STMT_VINFO_PATTERN_DEF_SEQ (res) = NULL;\n-  STMT_VINFO_VEC_REDUCTION_TYPE (res) = TREE_CODE_REDUCTION;\n-  STMT_VINFO_VEC_CONST_COND_REDUC_CODE (res) = ERROR_MARK;\n-\n-  if (gimple_code (stmt) == GIMPLE_PHI\n-      && is_loop_header_bb_p (gimple_bb (stmt)))\n-    STMT_VINFO_DEF_TYPE (res) = vect_unknown_def_type;\n-  else\n-    STMT_VINFO_DEF_TYPE (res) = vect_internal_def;\n-\n-  STMT_VINFO_SAME_ALIGN_REFS (res).create (0);\n-  STMT_SLP_TYPE (res) = loop_vect;\n-  STMT_VINFO_NUM_SLP_USES (res) = 0;\n-\n-  res->first_element = NULL; /* GROUP_FIRST_ELEMENT */\n-  res->next_element = NULL; /* GROUP_NEXT_ELEMENT */\n-  res->size = 0; /* GROUP_SIZE */\n-  res->store_count = 0; /* GROUP_STORE_COUNT */\n-  res->gap = 0; /* GROUP_GAP */\n-  res->same_dr_stmt = NULL; /* GROUP_SAME_DR_STMT */\n-\n-  /* This is really \"uninitialized\" until vect_compute_data_ref_alignment.  */\n-  res->dr_aux.misalignment = DR_MISALIGNMENT_UNINITIALIZED;\n-\n-  return res;\n-}\n-\n-\n-/* Set the current stmt_vec_info vector to V.  */\n-\n-void\n-set_stmt_vec_info_vec (vec<stmt_vec_info> *v)\n-{\n-  stmt_vec_info_vec = v;\n-}\n-\n-/* Free the stmt_vec_info entries in V and release V.  */\n-\n-void\n-free_stmt_vec_infos (vec<stmt_vec_info> *v)\n-{\n-  unsigned int i;\n-  stmt_vec_info info;\n-  FOR_EACH_VEC_ELT (*v, i, info)\n-    if (info != NULL_STMT_VEC_INFO)\n-      free_stmt_vec_info (info);\n-  if (v == stmt_vec_info_vec)\n-    stmt_vec_info_vec = NULL;\n-  v->release ();\n-}\n-\n-\n-/* Free stmt vectorization related info.  */\n-\n-void\n-free_stmt_vec_info (stmt_vec_info stmt_info)\n-{\n-  if (stmt_info->pattern_stmt_p)\n-    {\n-      gimple_set_bb (stmt_info->stmt, NULL);\n-      tree lhs = gimple_get_lhs (stmt_info->stmt);\n-      if (lhs && TREE_CODE (lhs) == SSA_NAME)\n-\trelease_ssa_name (lhs);\n-    }\n-\n-  STMT_VINFO_SAME_ALIGN_REFS (stmt_info).release ();\n-  STMT_VINFO_SIMD_CLONE_INFO (stmt_info).release ();\n-  free (stmt_info);\n-}\n-\n-\n /* Function get_vectype_for_scalar_type_and_size.\n \n    Returns the vector type corresponding to SCALAR_TYPE  and SIZE as supported"}, {"sha": "579f43579be8e97efaaea24ebd7335d6dc396f8a", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 83, "deletions": 8, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=6ef709e50228eb23c25d3620ac6eadb6d765d40d", "patch": "@@ -84,9 +84,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Loop or bb location, with hotness information.  */\n dump_user_location_t vect_location;\n \n-/* Vector mapping GIMPLE stmt to stmt_vec_info. */\n-vec<stmt_vec_info> *stmt_vec_info_vec;\n-\n /* Dump a cost entry according to args to F.  */\n \n void\n@@ -457,7 +454,6 @@ vec_info::vec_info (vec_info::vec_kind kind_in, void *target_cost_data_in,\n     target_cost_data (target_cost_data_in)\n {\n   stmt_vec_infos.create (50);\n-  set_stmt_vec_info_vec (&stmt_vec_infos);\n }\n \n vec_info::~vec_info ()\n@@ -469,7 +465,7 @@ vec_info::~vec_info ()\n     vect_free_slp_instance (instance, true);\n \n   destroy_cost_data (target_cost_data);\n-  free_stmt_vec_infos (&stmt_vec_infos);\n+  free_stmt_vec_infos ();\n }\n \n vec_info_shared::vec_info_shared ()\n@@ -513,7 +509,7 @@ vec_info_shared::check_datarefs ()\n stmt_vec_info\n vec_info::add_stmt (gimple *stmt)\n {\n-  stmt_vec_info res = new_stmt_vec_info (stmt, this);\n+  stmt_vec_info res = new_stmt_vec_info (stmt);\n   set_vinfo_for_stmt (stmt, res);\n   return res;\n }\n@@ -619,6 +615,87 @@ vec_info::replace_stmt (gimple_stmt_iterator *gsi, stmt_vec_info stmt_info,\n   gsi_replace (gsi, new_stmt, true);\n }\n \n+/* Create and initialize a new stmt_vec_info struct for STMT.  */\n+\n+stmt_vec_info\n+vec_info::new_stmt_vec_info (gimple *stmt)\n+{\n+  stmt_vec_info res = XCNEW (struct _stmt_vec_info);\n+  res->vinfo = this;\n+  res->stmt = stmt;\n+\n+  STMT_VINFO_TYPE (res) = undef_vec_info_type;\n+  STMT_VINFO_RELEVANT (res) = vect_unused_in_scope;\n+  STMT_VINFO_VECTORIZABLE (res) = true;\n+  STMT_VINFO_VEC_REDUCTION_TYPE (res) = TREE_CODE_REDUCTION;\n+  STMT_VINFO_VEC_CONST_COND_REDUC_CODE (res) = ERROR_MARK;\n+\n+  if (gimple_code (stmt) == GIMPLE_PHI\n+      && is_loop_header_bb_p (gimple_bb (stmt)))\n+    STMT_VINFO_DEF_TYPE (res) = vect_unknown_def_type;\n+  else\n+    STMT_VINFO_DEF_TYPE (res) = vect_internal_def;\n+\n+  STMT_VINFO_SAME_ALIGN_REFS (res).create (0);\n+  STMT_SLP_TYPE (res) = loop_vect;\n+\n+  /* This is really \"uninitialized\" until vect_compute_data_ref_alignment.  */\n+  res->dr_aux.misalignment = DR_MISALIGNMENT_UNINITIALIZED;\n+\n+  return res;\n+}\n+\n+/* Associate STMT with INFO.  */\n+\n+void\n+vec_info::set_vinfo_for_stmt (gimple *stmt, stmt_vec_info info)\n+{\n+  unsigned int uid = gimple_uid (stmt);\n+  if (uid == 0)\n+    {\n+      gcc_checking_assert (info);\n+      uid = stmt_vec_infos.length () + 1;\n+      gimple_set_uid (stmt, uid);\n+      stmt_vec_infos.safe_push (info);\n+    }\n+  else\n+    {\n+      gcc_checking_assert (info == NULL_STMT_VEC_INFO);\n+      stmt_vec_infos[uid - 1] = info;\n+    }\n+}\n+\n+/* Free the contents of stmt_vec_infos.  */\n+\n+void\n+vec_info::free_stmt_vec_infos (void)\n+{\n+  unsigned int i;\n+  stmt_vec_info info;\n+  FOR_EACH_VEC_ELT (stmt_vec_infos, i, info)\n+    if (info != NULL_STMT_VEC_INFO)\n+      free_stmt_vec_info (info);\n+  stmt_vec_infos.release ();\n+}\n+\n+/* Free STMT_INFO.  */\n+\n+void\n+vec_info::free_stmt_vec_info (stmt_vec_info stmt_info)\n+{\n+  if (stmt_info->pattern_stmt_p)\n+    {\n+      gimple_set_bb (stmt_info->stmt, NULL);\n+      tree lhs = gimple_get_lhs (stmt_info->stmt);\n+      if (lhs && TREE_CODE (lhs) == SSA_NAME)\n+\trelease_ssa_name (lhs);\n+    }\n+\n+  STMT_VINFO_SAME_ALIGN_REFS (stmt_info).release ();\n+  STMT_VINFO_SIMD_CLONE_INFO (stmt_info).release ();\n+  free (stmt_info);\n+}\n+\n /* A helper function to free scev and LOOP niter information, as well as\n    clear loop constraint LOOP_C_FINITE.  */\n \n@@ -974,8 +1051,6 @@ vectorize_loops (void)\n   if (cfun->has_simduid_loops)\n     note_simd_array_uses (&simd_array_to_simduid_htab);\n \n-  set_stmt_vec_info_vec (NULL);\n-\n   /*  ----------- Analyze loops. -----------  */\n \n   /* If some loop was duplicated, it gets bigger number"}, {"sha": "d88ea2be0459bc468c7c3294ac7dfbbfb525a190", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 6, "deletions": 39, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef709e50228eb23c25d3620ac6eadb6d765d40d/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=6ef709e50228eb23c25d3620ac6eadb6d765d40d", "patch": "@@ -267,6 +267,12 @@ struct vec_info {\n \n   /* Cost data used by the target cost model.  */\n   void *target_cost_data;\n+\n+private:\n+  stmt_vec_info new_stmt_vec_info (gimple *stmt);\n+  void set_vinfo_for_stmt (gimple *, stmt_vec_info);\n+  void free_stmt_vec_infos ();\n+  void free_stmt_vec_info (stmt_vec_info);\n };\n \n struct _loop_vec_info;\n@@ -1096,43 +1102,6 @@ inline stmt_vec_info::operator gimple * () const\n   return m_ptr ? m_ptr->stmt : NULL;\n }\n \n-extern vec<stmt_vec_info> *stmt_vec_info_vec;\n-\n-void set_stmt_vec_info_vec (vec<stmt_vec_info> *);\n-void free_stmt_vec_infos (vec<stmt_vec_info> *);\n-\n-/* Return a stmt_vec_info corresponding to STMT.  */\n-\n-static inline stmt_vec_info\n-vinfo_for_stmt (gimple *stmt)\n-{\n-  int uid = gimple_uid (stmt);\n-  if (uid <= 0)\n-    return NULL;\n-\n-  return (*stmt_vec_info_vec)[uid - 1];\n-}\n-\n-/* Set vectorizer information INFO for STMT.  */\n-\n-static inline void\n-set_vinfo_for_stmt (gimple *stmt, stmt_vec_info info)\n-{\n-  unsigned int uid = gimple_uid (stmt);\n-  if (uid == 0)\n-    {\n-      gcc_checking_assert (info);\n-      uid = stmt_vec_info_vec->length () + 1;\n-      gimple_set_uid (stmt, uid);\n-      stmt_vec_info_vec->safe_push (info);\n-    }\n-  else\n-    {\n-      gcc_checking_assert (info == NULL_STMT_VEC_INFO);\n-      (*stmt_vec_info_vec)[uid - 1] = info;\n-    }\n-}\n-\n static inline bool\n nested_in_vect_loop_p (struct loop *loop, stmt_vec_info stmt_info)\n {\n@@ -1502,8 +1471,6 @@ extern bool supportable_widening_operation (enum tree_code, stmt_vec_info,\n extern bool supportable_narrowing_operation (enum tree_code, tree, tree,\n \t\t\t\t\t     enum tree_code *,\n \t\t\t\t\t     int *, vec<tree> *);\n-extern stmt_vec_info new_stmt_vec_info (gimple *stmt, vec_info *);\n-extern void free_stmt_vec_info (stmt_vec_info);\n extern unsigned record_stmt_cost (stmt_vector_for_cost *, int,\n \t\t\t\t  enum vect_cost_for_stmt, stmt_vec_info,\n \t\t\t\t  int, enum vect_cost_model_location);"}]}