{"sha": "9ac974606795ef764ada5241981be2c899dc5586", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFjOTc0NjA2Nzk1ZWY3NjRhZGE1MjQxOTgxYmUyYzg5OWRjNTU4Ng==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-16T14:20:10Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-16T14:20:10Z"}, "message": "c-decl.c, [...]: Fix comment formatting.\n\n\t* c-decl.c, c-ppoutput.c, cpphash.h, cpplib.h, dbxout.c,\n\tline-map.c, line-map.h, var-tracking.c: Fix comment\n\tformatting.\n\nFrom-SVN: r77888", "tree": {"sha": "f080baaa17606be7e336f8de2af6b6c9acf31a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f080baaa17606be7e336f8de2af6b6c9acf31a1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ac974606795ef764ada5241981be2c899dc5586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac974606795ef764ada5241981be2c899dc5586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac974606795ef764ada5241981be2c899dc5586", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac974606795ef764ada5241981be2c899dc5586/comments", "author": null, "committer": null, "parents": [{"sha": "875427f0e6654e436c6a153d5435764a39dc5bbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875427f0e6654e436c6a153d5435764a39dc5bbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/875427f0e6654e436c6a153d5435764a39dc5bbf"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "ee34df8d95825e04539f511849c5615cfee20540", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac974606795ef764ada5241981be2c899dc5586/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac974606795ef764ada5241981be2c899dc5586/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ac974606795ef764ada5241981be2c899dc5586", "patch": "@@ -1,3 +1,9 @@\n+2004-02-16  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-decl.c, c-ppoutput.c, cpphash.h, cpplib.h, dbxout.c,\n+\tline-map.c, line-map.h, var-tracking.c: Fix comment\n+\tformatting.\n+\n 2004-02-16  Richard Henderson  <rth@redhat.com>\n \n \t* cse.c (cse_insn): Don't lose REG_NON_LOCAL_GOTO note."}, {"sha": "685a9c80dfd029d534707830dca7663bcb6e213d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9ac974606795ef764ada5241981be2c899dc5586", "patch": "@@ -794,7 +794,7 @@ match_builtin_function_types (tree newtype, tree oldtype)\n \n /* Subroutine of diagnose_mismatched_decls.  Check for function type\n    mismatch involving an empty arglist vs a nonempty one and give clearer\n-   diagnostics. */\n+   diagnostics.  */\n static void\n diagnose_arglist_conflict (tree newdecl, tree olddecl,\n \t\t\t   tree newtype, tree oldtype)\n@@ -970,7 +970,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t    {\n \t      /* If types don't match for a built-in, throw away the\n \t\t built-in.  No point in calling locate_old_decl here, it\n-\t\t won't print anything. */\n+\t\t won't print anything.  */\n \t      warning (\"%Jconflicting types for built-in function '%D'\",\n \t\t       newdecl, newdecl);\n \t      return false;"}, {"sha": "1dba766b42a20e921474174f4006fc3b11994011", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=9ac974606795ef764ada5241981be2c899dc5586", "patch": "@@ -346,7 +346,7 @@ pp_dir_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const char *dir)\n   unsigned char *to_file_quoted = alloca (to_file_len * 4 + 1);\n   unsigned char *p;\n \n-  /* cpp_quote_string does not nul-terminate, so we have to do it ourselves. */\n+  /* cpp_quote_string does not nul-terminate, so we have to do it ourselves.  */\n   p = cpp_quote_string (to_file_quoted, (unsigned char *) dir, to_file_len);\n   *p = '\\0';\n   fprintf (print.outf, \"# 1 \\\"%s//\\\"\\n\", to_file_quoted);"}, {"sha": "693d2ba7287c303f9671b44fd1a86ad5de47c449", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=9ac974606795ef764ada5241981be2c899dc5586", "patch": "@@ -315,7 +315,7 @@ struct cpp_buffer\n   unsigned char search_cached;\n \n   /* One for a system header, two for a C system header file that therefore\n-     needs to be extern \"C\" protected in C++, and zero otherwise. */\n+     needs to be extern \"C\" protected in C++, and zero otherwise.  */\n   unsigned char sysp;\n \n   /* The directory of the this buffer's file.  Its NAME member is not"}, {"sha": "ffbfe1bf84a593474347dcd3e685593439df512c", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=9ac974606795ef764ada5241981be2c899dc5586", "patch": "@@ -533,7 +533,7 @@ extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);\n    returns the name of the original file; this is the same as the\n    input file, except for preprocessed input.  This will generate at\n    least one file change callback, and possibly a line change callback\n-   too.  If there was an error opening the file, it returns NULL. */\n+   too.  If there was an error opening the file, it returns NULL.  */\n extern const char *cpp_read_main_file (cpp_reader *, const char *);\n \n /* Set up built-ins like __FILE__.  */"}, {"sha": "9ca79c6be8347996b5c6cf582db1a7d10882ec56", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=9ac974606795ef764ada5241981be2c899dc5586", "patch": "@@ -885,7 +885,7 @@ dbxout_type_fields (tree type)\n   for (tem = TYPE_FIELDS (type); tem; tem = TREE_CHAIN (tem))\n     {\n \n-      /* If on of the nodes is an error_mark or its type is then return early. */\n+      /* If on of the nodes is an error_mark or its type is then return early.  */\n       if (tem == error_mark_node || TREE_TYPE (tem) == error_mark_node)\n \treturn;\n "}, {"sha": "ceb57d45e210b5b2f38dd67bfa5a88b9ef65149c", "filename": "gcc/line-map.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.c?ref=9ac974606795ef764ada5241981be2c899dc5586", "patch": "@@ -43,7 +43,7 @@ linemap_init (struct line_maps *set)\n   set->max_column_hint = 0;\n }\n \n-/* Check for and warn about line_maps entered but not exited. */\n+/* Check for and warn about line_maps entered but not exited.  */\n \n void\n linemap_check_files_exited (struct line_maps *set)\n@@ -242,7 +242,7 @@ linemap_lookup (struct line_maps *set, source_location line)\n   mx = set->used;\n   \n   cached = &set->maps[mn];\n-  /* We should get a segfault if no line_maps have been added yet. */\n+  /* We should get a segfault if no line_maps have been added yet.  */\n   if (line >= cached->start_location)\n     {\n       if (mn + 1 == mx || line < cached[1].start_location)"}, {"sha": "28c12c2d797a31fff4ee3ddd98ff9838bdee29b8", "filename": "gcc/line-map.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.h?ref=9ac974606795ef764ada5241981be2c899dc5586", "patch": "@@ -55,9 +55,9 @@ struct line_map\n   source_location start_location;\n   int included_from;\n   ENUM_BITFIELD (lc_reason) reason : CHAR_BIT;\n-  /* The sysp field isn't really needed now that it's in cpp_buffer. */\n+  /* The sysp field isn't really needed now that it's in cpp_buffer.  */\n   unsigned char sysp;\n-  /* Number of the low-order source_location bits used for a column number. */\n+  /* Number of the low-order source_location bits used for a column number.  */\n   unsigned int column_bits : 8;\n };\n \n@@ -81,11 +81,11 @@ struct line_maps\n   /* If true, prints an include trace a la -H.  */\n   bool trace_includes;\n \n-  /* Highest source_location \"given out\". */\n+  /* Highest source_location \"given out\".  */\n   source_location highest_location;\n \n   /* The maximum column number we can quickly allocate.  Higher numbers\n-     may require allocating a new line_map. */\n+     may require allocating a new line_map.  */\n   unsigned int max_column_hint;\n };\n \n@@ -95,15 +95,15 @@ extern void linemap_init (struct line_maps *);\n /* Free a line map set.  */\n extern void linemap_free (struct line_maps *);\n \n-/* Check for and warn about line_maps entered but not exited. */\n+/* Check for and warn about line_maps entered but not exited.  */\n \n extern void linemap_check_files_exited (struct line_maps *);\n \n /* Return a source_location for the start (i.e. column==0) of\n    (physical) line TO_LINE in the current source file (as in the\n    most recent linemap_add).   MAX_COLUMN_HINT is the highest column\n    number we expect to use in this line (but it does not change\n-   the highest_location). */\n+   the highest_location).  */\n \n extern source_location linemap_line_start\n (struct line_maps *, unsigned int,  unsigned int);\n@@ -158,7 +158,7 @@ extern void linemap_print_containing_files (struct line_maps *,\n #define MAIN_FILE_P(MAP) ((MAP)->included_from < 0)\n \n /* Get a source position that for the same line as the most recent\n-   linemap_line_start, but with the specified TO_COLUMN column number. */\n+   linemap_line_start, but with the specified TO_COLUMN column number.  */\n \n static inline source_location\n linemap_position_for_column (struct line_maps *set, unsigned int to_column)\n@@ -169,7 +169,7 @@ linemap_position_for_column (struct line_maps *set, unsigned int to_column)\n     {\n       if (r >= 0xC000000 || to_column > 1000000) /* FIXME */\n \t{\n-\t  /* Running low on source_locations - disable column numbers. */\n+\t  /* Running low on source_locations - disable column numbers.  */\n \t  return r - SOURCE_COLUMN (map, r);\n \t}\n       else"}, {"sha": "2a7e032b84f1d034015f99af77bcb40c93906331", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac974606795ef764ada5241981be2c899dc5586/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=9ac974606795ef764ada5241981be2c899dc5586", "patch": "@@ -112,7 +112,7 @@ enum micro_operation_type\n   MO_SET,\t/* Set location.  */\n   MO_CLOBBER,\t/* Clobber location.  */\n   MO_CALL,\t/* Call insn.  */\n-  MO_ADJUST\t/* Adjust stack pointer. */\n+  MO_ADJUST\t/* Adjust stack pointer.  */\n };\n \n /* Where shall the note be emitted?  BEFORE or AFTER the instruction.  */"}]}