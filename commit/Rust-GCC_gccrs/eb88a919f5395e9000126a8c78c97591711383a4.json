{"sha": "eb88a919f5395e9000126a8c78c97591711383a4", "node_id": "C_kwDOANBUbNoAKGViODhhOTE5ZjUzOTVlOTAwMDEyNmE4Yzc4Yzk3NTkxNzExMzgzYTQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T12:13:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T12:13:15Z"}, "message": "refactor qualified type path resolution from the ResolveRelativeTypePathClass", "tree": {"sha": "ea1659bc89f422da686c12a47b095dc821a85907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea1659bc89f422da686c12a47b095dc821a85907"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb88a919f5395e9000126a8c78c97591711383a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb88a919f5395e9000126a8c78c97591711383a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb88a919f5395e9000126a8c78c97591711383a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb88a919f5395e9000126a8c78c97591711383a4/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "964969d4c608b058f37fafaef5e7f0f9ab7aef83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964969d4c608b058f37fafaef5e7f0f9ab7aef83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964969d4c608b058f37fafaef5e7f0f9ab7aef83"}], "stats": {"total": 95, "additions": 87, "deletions": 8}, "files": [{"sha": "902f034781e5c64691713c7e23885546a98a15cf", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 67, "deletions": 6, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb88a919f5395e9000126a8c78c97591711383a4/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb88a919f5395e9000126a8c78c97591711383a4/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=eb88a919f5395e9000126a8c78c97591711383a4", "patch": "@@ -219,11 +219,15 @@ ResolveType::visit (AST::RawPointerType &type)\n \n void\n ResolveType::visit (AST::InferredType &type)\n-{}\n+{\n+  // FIXME\n+}\n \n void\n ResolveType::visit (AST::NeverType &type)\n-{}\n+{\n+  // FIXME\n+}\n \n void\n ResolveType::visit (AST::SliceType &type)\n@@ -239,6 +243,8 @@ ResolveType::visit (AST::SliceType &type)\n     }\n }\n \n+// resolve relative type-paths\n+\n ResolveRelativeTypePath::ResolveRelativeTypePath (CanonicalPath qualified_path)\n   : ResolveTypeToCanonicalPath (true, true)\n {\n@@ -408,11 +414,18 @@ ResolveRelativeTypePath::go (AST::TypePath &path, NodeId &resolved_node_id)\n   return true;\n }\n \n+// qualified type paths\n+\n+ResolveRelativeQualTypePath::ResolveRelativeQualTypePath (\n+  CanonicalPath qualified_path)\n+  : result (qualified_path), failure_flag (false)\n+{}\n+\n bool\n-ResolveRelativeTypePath::go (AST::QualifiedPathInType &path)\n+ResolveRelativeQualTypePath::go (AST::QualifiedPathInType &path)\n {\n   CanonicalPath result = CanonicalPath::create_empty ();\n-  ResolveRelativeTypePath o (result);\n+  ResolveRelativeQualTypePath o (result);\n \n   // resolve the type and trait path\n   auto &qualified_path = path.get_qualified_path_type ();\n@@ -441,8 +454,8 @@ ResolveRelativeTypePath::go (AST::QualifiedPathInType &path)\n }\n \n bool\n-ResolveRelativeTypePath::resolve_qual_seg (AST::QualifiedPathType &seg,\n-\t\t\t\t\t   CanonicalPath &result)\n+ResolveRelativeQualTypePath::resolve_qual_seg (AST::QualifiedPathType &seg,\n+\t\t\t\t\t       CanonicalPath &result)\n {\n   if (seg.is_error ())\n     {\n@@ -487,5 +500,53 @@ ResolveRelativeTypePath::resolve_qual_seg (AST::QualifiedPathType &seg,\n   return true;\n }\n \n+void\n+ResolveRelativeQualTypePath::visit (AST::TypePathSegmentGeneric &seg)\n+{\n+  if (seg.is_error ())\n+    {\n+      failure_flag = true;\n+      rust_error_at (seg.get_locus (), \"segment has error: %s\",\n+\t\t     seg.as_string ().c_str ());\n+      return;\n+    }\n+\n+  if (!seg.has_generic_args ())\n+    {\n+      auto ident_segment\n+\t= CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t\t  seg.get_ident_segment ().as_string ());\n+      result = result.append (ident_segment);\n+      return;\n+    }\n+\n+  ResolveType::type_resolve_generic_args (seg.get_generic_args ());\n+\n+  std::string generics = ResolveTypeToCanonicalPath::canonicalize_generic_args (\n+    seg.get_generic_args ());\n+  auto generic_segment\n+    = CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t      seg.get_ident_segment ().as_string ()\n+\t\t\t\t+ \"::\" + generics);\n+  result = result.append (generic_segment);\n+}\n+\n+void\n+ResolveRelativeQualTypePath::visit (AST::TypePathSegment &seg)\n+{\n+  if (seg.is_error ())\n+    {\n+      failure_flag = true;\n+      rust_error_at (seg.get_locus (), \"segment has error: %s\",\n+\t\t     seg.as_string ().c_str ());\n+      return;\n+    }\n+\n+  CanonicalPath ident_seg\n+    = CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t      seg.get_ident_segment ().as_string ());\n+  result = result.append (ident_seg);\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "8bbb587cb6fe36f73b2c6ac096690e5f4027f427", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb88a919f5395e9000126a8c78c97591711383a4/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb88a919f5395e9000126a8c78c97591711383a4/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=eb88a919f5395e9000126a8c78c97591711383a4", "patch": "@@ -85,12 +85,30 @@ class ResolveRelativeTypePath : public ResolveTypeToCanonicalPath\n \n public:\n   static bool go (AST::TypePath &path, NodeId &resolved_node_id);\n-  static bool go (AST::QualifiedPathInType &path);\n \n private:\n   ResolveRelativeTypePath (CanonicalPath qualified_path);\n+};\n+\n+class ResolveRelativeQualTypePath : public ResolverBase\n+{\n+  using ResolverBase::visit;\n+\n+public:\n+  static bool go (AST::QualifiedPathInType &path);\n+\n+  void visit (AST::TypePathSegmentGeneric &seg) override;\n \n+  void visit (AST::TypePathSegment &seg) override;\n+\n+protected:\n   bool resolve_qual_seg (AST::QualifiedPathType &seg, CanonicalPath &result);\n+\n+private:\n+  ResolveRelativeQualTypePath (CanonicalPath qualified_path);\n+\n+  CanonicalPath result;\n+  bool failure_flag;\n };\n \n class ResolveType : public ResolverBase\n@@ -152,7 +170,7 @@ class ResolveType : public ResolverBase\n \n   void visit (AST::QualifiedPathInType &path) override\n   {\n-    ResolveRelativeTypePath::go (path);\n+    ResolveRelativeQualTypePath::go (path);\n   }\n \n   void visit (AST::ArrayType &type) override;"}]}