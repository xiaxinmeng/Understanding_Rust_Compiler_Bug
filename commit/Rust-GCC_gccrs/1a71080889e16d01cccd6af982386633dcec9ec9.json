{"sha": "1a71080889e16d01cccd6af982386633dcec9ec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE3MTA4MDg4OWUxNmQwMWNjY2Q2YWY5ODIzODY2MzNkY2VjOWVjOQ==", "commit": {"author": {"name": "Duncan Sands", "email": "baldrick@free.fr", "date": "2010-04-13T09:21:12Z"}, "committer": {"name": "Duncan Sands", "email": "baldrick@gcc.gnu.org", "date": "2010-04-13T09:21:12Z"}, "message": "Remove lang_eh_type_covers, which is dead, and the corresponding\nAda routine gnat_eh_type_covers.\n\nFrom-SVN: r158258", "tree": {"sha": "2e7193e1f194472c59b64196654c08335fa5e07d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e7193e1f194472c59b64196654c08335fa5e07d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a71080889e16d01cccd6af982386633dcec9ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a71080889e16d01cccd6af982386633dcec9ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a71080889e16d01cccd6af982386633dcec9ec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a71080889e16d01cccd6af982386633dcec9ec9/comments", "author": {"login": "CunningBaldrick", "id": 1713707, "node_id": "MDQ6VXNlcjE3MTM3MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1713707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CunningBaldrick", "html_url": "https://github.com/CunningBaldrick", "followers_url": "https://api.github.com/users/CunningBaldrick/followers", "following_url": "https://api.github.com/users/CunningBaldrick/following{/other_user}", "gists_url": "https://api.github.com/users/CunningBaldrick/gists{/gist_id}", "starred_url": "https://api.github.com/users/CunningBaldrick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CunningBaldrick/subscriptions", "organizations_url": "https://api.github.com/users/CunningBaldrick/orgs", "repos_url": "https://api.github.com/users/CunningBaldrick/repos", "events_url": "https://api.github.com/users/CunningBaldrick/events{/privacy}", "received_events_url": "https://api.github.com/users/CunningBaldrick/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9602b6a1b8de60ca429f08ca00e2834d26fe1f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9602b6a1b8de60ca429f08ca00e2834d26fe1f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9602b6a1b8de60ca429f08ca00e2834d26fe1f47"}], "stats": {"total": 39, "additions": 11, "deletions": 28}, "files": [{"sha": "09b704aaf48a410dc359c841d89a0f8b514d2029", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a71080889e16d01cccd6af982386633dcec9ec9", "patch": "@@ -1,3 +1,8 @@\n+2010-04-13  Duncan Sands  <baldrick@free.fr>\n+\n+\t* except.h (lang_eh_type_covers): Remove.\n+\t* except.c (lang_eh_type_covers): Likewise.\n+\n 2010-04-13  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n             Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \t"}, {"sha": "7c6a63c37a55b0fbcaccf8f7e0b3298dabd26f96", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1a71080889e16d01cccd6af982386633dcec9ec9", "patch": "@@ -1,3 +1,8 @@\n+2010-04-13  Duncan Sands  <baldrick@free.fr>\n+\n+\t* gcc-interface/misc.c (gnat_eh_type_covers): Remove.\n+\t* gcc-interface/trans.c (Exception_Handler_to_gnu_zcx): Update comment.\n+\n 2010-04-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (standard_datatypes): Add ADT_parent_name_id."}, {"sha": "dbeabc0eca5480cb59c5059f2850da8b3a8e025b", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=1a71080889e16d01cccd6af982386633dcec9ec9", "patch": "@@ -74,7 +74,6 @@ static void gnat_print_type\t\t(FILE *, tree, int);\n static const char *gnat_printable_name\t(tree, int);\n static const char *gnat_dwarf_name\t(tree, int);\n static tree gnat_return_tree\t\t(tree);\n-static int gnat_eh_type_covers\t\t(tree, tree);\n static void gnat_parse_file\t\t(int);\n static void internal_error_function\t(const char *, va_list *);\n static tree gnat_type_max_size\t\t(const_tree);\n@@ -434,8 +433,6 @@ gnat_init_gcc_eh (void)\n      right exception regions.  */\n   using_eh_for_cleanups ();\n \n-  lang_eh_type_covers = gnat_eh_type_covers;\n-\n   /* Turn on -fexceptions and -fnon-call-exceptions. The first one triggers\n      the generation of the necessary exception runtime tables. The second one\n      is useful for two reasons: 1/ we map some asynchronous signals like SEGV\n@@ -580,20 +577,6 @@ gnat_return_tree (tree t)\n   return t;\n }\n \n-/* Return true if type A catches type B. Callback for flow analysis from\n-   the exception handling part of the back-end.  */\n-\n-static int\n-gnat_eh_type_covers (tree a, tree b)\n-{\n-  /* a catches b if they represent the same exception id or if a\n-     is an \"others\".\n-\n-     ??? integer_zero_node for \"others\" is hardwired in too many places\n-     currently.  */\n-  return (a == b || a == integer_zero_node);\n-}\n-\f\n /* Get the alias set corresponding to a type or expression.  */\n \n static alias_set_type"}, {"sha": "6da6e7904f69848a4d0fc9b5e3a3bcbdc3fef2b0", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=1a71080889e16d01cccd6af982386633dcec9ec9", "patch": "@@ -3279,11 +3279,7 @@ Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n      handler can catch, with special cases for others and all others cases.\n \n      Each exception type is actually identified by a pointer to the exception\n-     id, or to a dummy object for \"others\" and \"all others\".\n-\n-     Care should be taken to ensure that the control flow impact of \"others\"\n-     and \"all others\" is known to GCC. lang_eh_type_covers is doing the trick\n-     currently.  */\n+     id, or to a dummy object for \"others\" and \"all others\".  */\n   for (gnat_temp = First (Exception_Choices (gnat_node));\n        gnat_temp; gnat_temp = Next (gnat_temp))\n     {"}, {"sha": "fccfb735d6a5c2a7850bd15f1319c44ddc3e7dd1", "filename": "gcc/except.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=1a71080889e16d01cccd6af982386633dcec9ec9", "patch": "@@ -153,9 +153,6 @@ along with GCC; see the file COPYING3.  If not see\n    to the given failure handler.  */\n tree (*lang_protect_cleanup_actions) (void);\n \n-/* Return true if type A catches type B.  */\n-int (*lang_eh_type_covers) (tree a, tree b);\n-\n static GTY(()) int call_site_base;\n static GTY ((param_is (union tree_node)))\n   htab_t type_to_runtime_map;"}, {"sha": "59214e0e7644122c27580dfac8785f3a5d3c05e0", "filename": "gcc/except.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a71080889e16d01cccd6af982386633dcec9ec9/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=1a71080889e16d01cccd6af982386633dcec9ec9", "patch": "@@ -294,9 +294,6 @@ extern eh_landing_pad get_eh_landing_pad_from_rtx (const_rtx);\n    FUNCTION_DECL for `std::terminate'.  */\n extern tree (*lang_protect_cleanup_actions) (void);\n \n-/* Return true if type A catches type B.  */\n-extern int (*lang_eh_type_covers) (tree a, tree b);\n-\n \n /* Just because the user configured --with-sjlj-exceptions=no doesn't\n    mean that we can use call frame exceptions.  Detect that the target"}]}