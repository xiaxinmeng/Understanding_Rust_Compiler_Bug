{"sha": "1f34cf9bcec78dba0782564012365af6a8d5d0ca", "node_id": "C_kwDOANBUbNoAKDFmMzRjZjliY2VjNzhkYmEwNzgyNTY0MDEyMzY1YWY2YThkNWQwY2E", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-02-15T15:24:29Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-02-15T15:24:29Z"}, "message": "i386: Rename extr_register_operand to int248_register_operand\n\nNo functional changes.\n\ngcc/ChangeLog:\n\n2023-02-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/predicates.md (int248_register_operand):\n\tRename from extr_register_operand.\n\t* config/i386/i386.md (*extv<mode>): Update for renamed predicate.\n\t(*extzx<mode>): Ditto.\n\t(*ashl<dwi>3_doubleword_mask): Use int248_register_operand predicate.\n\t(*ashl<mode>3_mask): Ditto.\n\t(*<any_shiftrt:insn><mode>3_mask): Ditto.\n\t(*<any_shiftrt:insn><dwi>3_doubleword_mask): Ditto.\n\t(*<any_rotate:insn><mode>3_mask): Ditto.\n\t(*<btsc><mode>_mask): Ditto.\n\t(*btr<mode>_mask): Ditto.\n\t(*jcc_bt<mode>_mask_1): Ditto.", "tree": {"sha": "e86d6923400a8a3265a70a3d62a86b15f6848f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e86d6923400a8a3265a70a3d62a86b15f6848f1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f34cf9bcec78dba0782564012365af6a8d5d0ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f34cf9bcec78dba0782564012365af6a8d5d0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f34cf9bcec78dba0782564012365af6a8d5d0ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f34cf9bcec78dba0782564012365af6a8d5d0ca/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "053d4dda0a205aba6af85fd9662118dd8109df9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053d4dda0a205aba6af85fd9662118dd8109df9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053d4dda0a205aba6af85fd9662118dd8109df9f"}], "stats": {"total": 55, "additions": 14, "deletions": 41}, "files": [{"sha": "e37bc8dca538cfc311ac7c8f7d23af3f9028b28d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 39, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f34cf9bcec78dba0782564012365af6a8d5d0ca/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f34cf9bcec78dba0782564012365af6a8d5d0ca/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1f34cf9bcec78dba0782564012365af6a8d5d0ca", "patch": "@@ -3159,7 +3159,7 @@\n \n (define_insn \"*extv<mode>\"\n   [(set (match_operand:SWI24 0 \"register_operand\" \"=R\")\n-\t(sign_extract:SWI24 (match_operand 1 \"extr_register_operand\" \"Q\")\n+\t(sign_extract:SWI24 (match_operand 1 \"int248_register_operand\" \"Q\")\n \t\t\t    (const_int 8)\n \t\t\t    (const_int 8)))]\n   \"\"\n@@ -3202,7 +3202,7 @@\n \n (define_insn \"*extzv<mode>\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=R\")\n-\t(zero_extract:SWI248 (match_operand 1 \"extr_register_operand\" \"Q\")\n+\t(zero_extract:SWI248 (match_operand 1 \"int248_register_operand\" \"Q\")\n \t\t\t     (const_int 8)\n \t\t\t     (const_int 8)))]\n   \"\"\n@@ -12449,15 +12449,12 @@\n \t  (match_operand:<DWI> 1 \"register_operand\")\n \t  (subreg:QI\n \t    (and\n-\t      (match_operand 2 \"register_operand\" \"c\")\n+\t      (match_operand 2 \"int248_register_operand\" \"c\")\n \t      (match_operand 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"((INTVAL (operands[3]) & (<MODE_SIZE> * BITS_PER_UNIT)) == 0\n     || ((INTVAL (operands[3]) & (2 * <MODE_SIZE> * BITS_PER_UNIT - 1))\n \t == (2 * <MODE_SIZE> * BITS_PER_UNIT - 1)))\n-   && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n-   && IN_RANGE (GET_MODE_SIZE (GET_MODE (operands[2])), 2,\n-\t\t4 << (TARGET_64BIT ? 1 : 0))\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n@@ -12844,15 +12841,12 @@\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t  (subreg:QI\n \t    (and\n-\t      (match_operand 2 \"register_operand\" \"c,r\")\n+\t      (match_operand 2 \"int248_register_operand\" \"c,r\")\n \t      (match_operand 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (ASHIFT, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n-   && IN_RANGE (GET_MODE_SIZE (GET_MODE (operands[2])), 2,\n-\t\t4 << (TARGET_64BIT ? 1 : 0))\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n@@ -13438,15 +13432,12 @@\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t  (subreg:QI\n \t    (and\n-\t      (match_operand 2 \"register_operand\" \"c,r\")\n+\t      (match_operand 2 \"int248_register_operand\" \"c,r\")\n \t      (match_operand 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n-   && IN_RANGE (GET_MODE_SIZE (GET_MODE (operands[2])), 2,\n-\t\t4 << (TARGET_64BIT ? 1 : 0))\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n@@ -13489,15 +13480,12 @@\n \t  (match_operand:<DWI> 1 \"register_operand\")\n \t  (subreg:QI\n \t    (and\n-\t      (match_operand 2 \"register_operand\" \"c\")\n+\t      (match_operand 2 \"int248_register_operand\" \"c\")\n \t      (match_operand 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"((INTVAL (operands[3]) & (<MODE_SIZE> * BITS_PER_UNIT)) == 0\n     || ((INTVAL (operands[3]) & (2 * <MODE_SIZE> * BITS_PER_UNIT - 1))\n \t == (2 * <MODE_SIZE> * BITS_PER_UNIT - 1)))\n-   && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n-   && IN_RANGE (GET_MODE_SIZE (GET_MODE (operands[2])), 2,\n-\t\t4 << (TARGET_64BIT ? 1 : 0))\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n@@ -14384,15 +14372,12 @@\n \t  (match_operand:SWI 1 \"nonimmediate_operand\")\n \t  (subreg:QI\n \t    (and\n-\t      (match_operand 2 \"register_operand\" \"c\")\n+\t      (match_operand 2 \"int248_register_operand\" \"c\")\n \t      (match_operand 3 \"const_int_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n-   && IN_RANGE (GET_MODE_SIZE (GET_MODE (operands[2])), 2,\n-\t\t4 << (TARGET_64BIT ? 1 : 0))\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n@@ -14412,13 +14397,10 @@\n \t  (match_operand:SWI 1 \"const_int_operand\")\n \t  (subreg:QI\n \t    (and\n-\t      (match_operand 2 \"register_operand\")\n+\t      (match_operand 2 \"int248_register_operand\")\n \t      (match_operand 3 \"const_int_operand\")) 0)))]\n  \"(INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode) - 1))\n-   == GET_MODE_BITSIZE (<MODE>mode) - 1\n-  && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n-  && IN_RANGE (GET_MODE_SIZE (GET_MODE (operands[2])), 2,\n-\t       4 << (TARGET_64BIT ? 1 : 0))\"\n+   == GET_MODE_BITSIZE (<MODE>mode) - 1\"\n  [(set (match_dup 4) (match_dup 1))\n   (set (match_dup 0)\n        (any_rotate:SWI (match_dup 4)\n@@ -14819,16 +14801,13 @@\n \t    (const_int 1)\n \t    (subreg:QI\n \t      (and\n-\t\t(match_operand 1 \"register_operand\")\n+\t\t(match_operand 1 \"int248_register_operand\")\n \t\t(match_operand 2 \"const_int_operand\")) 0))\n \t  (match_operand:SWI48 3 \"register_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_USE_BT\n    && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_INT\n-   && IN_RANGE (GET_MODE_SIZE (GET_MODE (operands[1])), 2,\n-\t\t4 << (TARGET_64BIT ? 1 : 0))\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n@@ -14890,16 +14869,13 @@\n \t    (const_int -2)\n \t    (subreg:QI\n \t      (and\n-\t\t(match_operand 1 \"register_operand\")\n+\t\t(match_operand 1 \"int248_register_operand\")\n \t\t(match_operand 2 \"const_int_operand\")) 0))\n \t  (match_operand:SWI48 3 \"register_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_USE_BT\n    && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_INT\n-   && IN_RANGE (GET_MODE_SIZE (GET_MODE (operands[1])), 2,\n-\t\t4 << (TARGET_64BIT ? 1 : 0))\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n@@ -15273,17 +15249,14 @@\n \t\t\t   (zero_extend:SI\n \t\t\t     (subreg:QI\n \t\t\t       (and\n-\t\t\t\t (match_operand 2 \"register_operand\")\n+\t\t\t\t (match_operand 2 \"int248_register_operand\")\n \t\t\t\t (match_operand 3 \"const_int_operand\")) 0)))])\n \t\t      (label_ref (match_operand 4))\n \t\t      (pc)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\n-   && GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT\n-   && IN_RANGE (GET_MODE_SIZE (GET_MODE (operands[2])), 2,\n-\t\t4 << (TARGET_64BIT ? 1 : 0))\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\""}, {"sha": "2f079a6fad8a46edfe8f95130a6abc3a3d29df43", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f34cf9bcec78dba0782564012365af6a8d5d0ca/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f34cf9bcec78dba0782564012365af6a8d5d0ca/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=1f34cf9bcec78dba0782564012365af6a8d5d0ca", "patch": "@@ -92,8 +92,8 @@\n   (and (match_code \"reg\")\n        (match_test \"MASK_REGNO_P (REGNO (op))\")))\n \n-;; Match a DI, SI or HImode register operand for extract op.\n-(define_special_predicate \"extr_register_operand\"\n+;; Match a DI, SI or HImode register operand.\n+(define_special_predicate \"int248_register_operand\"\n   (and (match_operand 0 \"register_operand\")\n        (ior (and (match_test \"TARGET_64BIT\")\n \t\t (match_test \"GET_MODE (op) == DImode\"))"}]}