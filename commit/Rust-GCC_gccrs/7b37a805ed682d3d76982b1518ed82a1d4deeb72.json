{"sha": "7b37a805ed682d3d76982b1518ed82a1d4deeb72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzN2E4MDVlZDY4MmQzZDc2OTgyYjE1MThlZDgyYTFkNGRlZWI3Mg==", "commit": {"author": {"name": "Maarten Lankhorst", "email": "mlankhorst@codeweavers.com", "date": "2010-05-23T06:52:32Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-05-23T06:52:32Z"}, "message": "re PR target/43869 (ms_abi -> sysv_abi passing float arguments incorrectly)\n\n2010-05-23  Naarten Lankhorst  <mlankhorst@codeweavers.com>\n\n        PR target/43869\n        * config/i386/i386.c: Make sure that the correct regparm is passed.\n\nFrom-SVN: r159755", "tree": {"sha": "ae175e621bdeccb37082da92aa3d3c2b84b699a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae175e621bdeccb37082da92aa3d3c2b84b699a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b37a805ed682d3d76982b1518ed82a1d4deeb72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b37a805ed682d3d76982b1518ed82a1d4deeb72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b37a805ed682d3d76982b1518ed82a1d4deeb72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b37a805ed682d3d76982b1518ed82a1d4deeb72/comments", "author": null, "committer": null, "parents": [{"sha": "6f1dba7b780b89d973a51288baeebe379cd201a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1dba7b780b89d973a51288baeebe379cd201a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1dba7b780b89d973a51288baeebe379cd201a3"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "8c566eab3ec4fb7bfea7aaac01733272dbdf8c4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b37a805ed682d3d76982b1518ed82a1d4deeb72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b37a805ed682d3d76982b1518ed82a1d4deeb72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b37a805ed682d3d76982b1518ed82a1d4deeb72", "patch": "@@ -1,3 +1,8 @@\n+2010-05-23  Naarten Lankhorst  <mlankhorst@codeweavers.com>\n+\n+\tPR target/43869\n+\t* config/i386/i386.c: Make sure that the correct regparm is passed.\n+\n 2010-05-23  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* sbitmap.h (sbitmap_ptr, const_sbitmap_ptr): Move from here..."}, {"sha": "adcc256d54cdf13b41b7f2e2f6e6d58afb364209", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b37a805ed682d3d76982b1518ed82a1d4deeb72/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b37a805ed682d3d76982b1518ed82a1d4deeb72/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7b37a805ed682d3d76982b1518ed82a1d4deeb72", "patch": "@@ -5061,19 +5061,18 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n   cum->nregs = ix86_regparm;\n   if (TARGET_64BIT)\n     {\n-      if (cum->call_abi != ix86_abi)\n-        cum->nregs = (ix86_abi != SYSV_ABI\n-\t\t      ? X86_64_REGPARM_MAX : X86_64_MS_REGPARM_MAX);\n+      cum->nregs = (cum->call_abi == SYSV_ABI\n+                   ? X86_64_REGPARM_MAX\n+                   : X86_64_MS_REGPARM_MAX);\n     }\n   if (TARGET_SSE)\n     {\n       cum->sse_nregs = SSE_REGPARM_MAX;\n       if (TARGET_64BIT)\n         {\n-          if (cum->call_abi != ix86_abi)\n-            cum->sse_nregs = (ix86_abi != SYSV_ABI\n-\t\t\t      ? X86_64_SSE_REGPARM_MAX\n-\t\t\t      : X86_64_MS_SSE_REGPARM_MAX);\n+          cum->sse_nregs = (cum->call_abi == SYSV_ABI\n+                           ? X86_64_SSE_REGPARM_MAX\n+                           : X86_64_MS_SSE_REGPARM_MAX);\n         }\n     }\n   if (TARGET_MMX)\n@@ -6191,11 +6190,7 @@ function_arg_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   if (mode == VOIDmode)\n     return GEN_INT (cum->maybe_vaarg\n \t\t    ? (cum->sse_nregs < 0\n-\t\t       ? (cum->call_abi == ix86_abi\n-\t\t\t  ? SSE_REGPARM_MAX\n-\t\t\t  : (ix86_abi != SYSV_ABI\n-\t\t\t     ? X86_64_SSE_REGPARM_MAX\n-\t\t\t     : X86_64_MS_SSE_REGPARM_MAX))\n+\t\t       ? X86_64_SSE_REGPARM_MAX\n \t\t       : cum->sse_regno)\n \t\t    : -1);\n \n@@ -6899,11 +6894,6 @@ setup_incoming_varargs_64 (CUMULATIVE_ARGS *cum)\n   rtx nsse_reg;\n   alias_set_type set;\n   int i;\n-  int regparm = ix86_regparm;\n-\n-  if (cum->call_abi != ix86_abi)\n-    regparm = (ix86_abi != SYSV_ABI\n-\t       ? X86_64_REGPARM_MAX : X86_64_MS_REGPARM_MAX);\n \n   /* GPR size of varargs save area.  */\n   if (cfun->va_list_gpr_size)\n@@ -6925,7 +6915,7 @@ setup_incoming_varargs_64 (CUMULATIVE_ARGS *cum)\n   set = get_varargs_alias_set ();\n \n   for (i = cum->regno;\n-       i < regparm\n+       i < X86_64_REGPARM_MAX\n        && i < cum->regno + cfun->va_list_gpr_size / UNITS_PER_WORD;\n        i++)\n     {"}]}