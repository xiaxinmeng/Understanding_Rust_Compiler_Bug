{"sha": "79fe1b3bd07343a1be36195a9053b582198a4123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlmZTFiM2JkMDczNDNhMWJlMzYxOTVhOTA1M2I1ODIxOThhNDEyMw==", "commit": {"author": {"name": "Dorit Naishlos", "email": "dorit@il.ibm.com", "date": "2004-08-17T16:17:14Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2004-08-17T16:17:14Z"}, "message": "tree-vectorizer.c: New File: loop vectorization on SSAed GIMPLE trees.\n\n        * tree-vectorizer.c: New File: loop vectorization on SSAed GIMPLE trees.\n        * tree-vectorizer.h: New File: Same.\n        * Makefile.in (tree-vectorizer.c, tree-vectorizer.h): Add new files.\n        * common.opt (ftree-vectorize): New flag to enable vectorization.\n        * timevar.def (TV_TREE_VECTORIZATION): New dump file for vectorization\n        pass.\n        * tree-data-ref.h (init_data_ref): Additional argument.\n        (array_base_name_differ_p): Moved to tree-data-ref.c.\n        * tree-data-ref.c (array_base_name_differ_p): Revised.\n        (initialize_data_dependence_relation): Call array_base_name_differ_p\n        with an extra argument.\n        (analyze_all_data_dependences): Same.\n        (init_data_ref): Additional argument is_read to set DR_IS_READ.\n        * tree-ssa-phiopt.c (empty_block_p): Expose for usage out of this file.\n        * tree-flow.h (vectorize_loops, empty_block_p): Add declaration.\n        * tree-optimize.c (pass_vectorize): Schedule the vectorization pass.\n        * tree-pass.h (tree_opt_pass pass_vectorize): Declare the new\n        vectorization pass.\n        * tree-ssa-loop.c (tree_ssa_loop_init): Call scev_initialize.\n        (tree_ssa_loop_done): Call scev_finalize.\n        (tree_vectorize): Define the new vectorization pass.\n        * defaults.h (UNITS_PER_SIMD_WORD): Allow targets to specify the size of\n        the vector they support (until support for multiple vector sizes is\n        added to the vectorizer).\n        * config/i386/i386.h (UNITS_PER_SIMD_WORD): Define.\n        * config/rs6000/rs6000.h (UNITS_PER_SIMD_WORD): Define.\n        * invoke.texi (fdump-tree-vect, ftree-vectorize): Add\n        documentation.\n\nFrom-SVN: r86131", "tree": {"sha": "49effbb8670b04dbfb66de531c733c3e4389a525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49effbb8670b04dbfb66de531c733c3e4389a525"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79fe1b3bd07343a1be36195a9053b582198a4123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79fe1b3bd07343a1be36195a9053b582198a4123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79fe1b3bd07343a1be36195a9053b582198a4123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79fe1b3bd07343a1be36195a9053b582198a4123/comments", "author": null, "committer": null, "parents": [{"sha": "baeff9708eb16a669c72cdebb32062ef1f6e6abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baeff9708eb16a669c72cdebb32062ef1f6e6abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baeff9708eb16a669c72cdebb32062ef1f6e6abc"}], "stats": {"total": 8196, "additions": 8167, "deletions": 29}, "files": [{"sha": "99a4aab4aa0dca8a6a8103f9d2b5f2ab02eaee43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -1,3 +1,34 @@\n+2004-08-17  Dorit Naishlos  <dorit@il.ibm.com>\n+\n+\t* tree-vectorizer.c: New File: loop vectorization on SSAed GIMPLE trees.\n+\t* tree-vectorizer.h: New File: Same.\n+\t* Makefile.in (tree-vectorizer.c, tree-vectorizer.h): Add new files.\n+\t* common.opt (ftree-vectorize): New flag to enable vectorization.\n+\t* timevar.def (TV_TREE_VECTORIZATION): New dump file for vectorization\n+\tpass.\n+\t* tree-data-ref.h (init_data_ref): Additional argument.\n+\t(array_base_name_differ_p): Moved to tree-data-ref.c.\n+\t* tree-data-ref.c (array_base_name_differ_p): Revised.\n+\t(initialize_data_dependence_relation): Call array_base_name_differ_p\n+\twith an extra argument.\n+\t(analyze_all_data_dependences): Same.\n+\t(init_data_ref): Additional argument is_read to set DR_IS_READ.\n+\t* tree-ssa-phiopt.c (empty_block_p): Expose for usage out of this file.\n+\t* tree-flow.h (vectorize_loops, empty_block_p): Add declaration.\n+\t* tree-optimize.c (pass_vectorize): Schedule the vectorization pass.\n+\t* tree-pass.h (tree_opt_pass pass_vectorize): Declare the new \n+\tvectorization pass.\n+\t* tree-ssa-loop.c (tree_ssa_loop_init): Call scev_initialize.\n+\t(tree_ssa_loop_done): Call scev_finalize.\n+\t(tree_vectorize): Define the new vectorization pass.\n+\t* defaults.h (UNITS_PER_SIMD_WORD): Allow targets to specify the size of\n+\tthe vector they support (until support for multiple vector sizes is\n+\tadded to the vectorizer).\n+\t* config/i386/i386.h (UNITS_PER_SIMD_WORD): Define.\n+\t* config/rs6000/rs6000.h (UNITS_PER_SIMD_WORD): Define.\n+\t* invoke.texi (fdump-tree-vect, ftree-vectorize): Add\n+\tdocumentation.\n+\n 2004-08-17  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* objc/objc-act.c (build_protocol_initializer): Fix build_int_cst"}, {"sha": "57939960d0d353429d3fb4470f11860f27718c48", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -887,6 +887,7 @@ OBJS-common = \\\n  tree-ssa-dom.o domwalk.o tree-tailcall.o gimple-low.o tree-iterator.o\t   \\\n  tree-phinodes.o tree-ssanames.o tree-sra.o tree-complex.o tree-ssa-loop.o \\\n  tree-ssa-loop-niter.o tree-ssa-loop-manip.o tree-ssa-threadupdate.o\t   \\\n+ tree-vectorizer.o\t\t\t\t\t\t \t   \\\n  alias.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o\t  \t   \\\n  cfg.o cfganal.o cfgbuild.o cfgcleanup.o cfglayout.o cfgloop.o\t\t   \\\n  cfgloopanal.o cfgloopmanip.o loop-init.o loop-unswitch.o loop-unroll.o\t   \\\n@@ -1727,6 +1728,10 @@ tree-data-ref.o: tree-data-ref.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    errors.h $(GGC_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) diagnostic.h \\\n    $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) cfgloop.h \\\n    tree-data-ref.h $(SCEV_H) tree-pass.h lambda.h\n+tree-vectorizer.o: tree-vectorizer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n+   errors.h $(GGC_H) $(OPTABS_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) diagnostic.h \\\n+   $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) cfgloop.h tree-pass.h \\\n+   tree-vectorizer.h tree-data-ref.h $(SCEV_H)\n tree-gimple.o : tree-gimple.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(EXPR_H) \\\n \t$(RTL_H) $(TREE_GIMPLE_H) $(TM_H) coretypes.h bitmap.h $(GGC_H)\n tree-mudflap.o : $(CONFIG_H) errors.h $(SYSTEM_H) $(TREE_H) tree-inline.h \\"}, {"sha": "6c855a63390ec0e334d1e01c05078d627fc5a06c", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -907,6 +907,10 @@ fvar-tracking\n Common Report Var(flag_var_tracking) VarExists\n Perform variable tracking\n \n+ftree-vectorize\n+Common Report Var(flag_tree_vectorize)\n+Enable loop vectorization on trees\n+\n ; -fverbose-asm causes extra commentary information to be produced in\n ; the generated assembly code (to make it more readable).  This option\n ; is generally only of use to those who actually need to read the"}, {"sha": "04be1c9c37077e0ced2df5957b1d97666f681f2e", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -674,6 +674,10 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #define VECTOR_MODE_SUPPORTED_P(MODE) 0\n #endif\n \n+#ifndef UNITS_PER_SIMD_WORD\n+#define UNITS_PER_SIMD_WORD 0\n+#endif\n+\n /* Determine whether __cxa_atexit, rather than atexit, is used to\n    register C++ destructors for local statics and global objects.  */\n #ifndef DEFAULT_USE_CXA_ATEXIT"}, {"sha": "4eb1498ddca49d44dbba0c13bd2e8325b1a876e7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -263,7 +263,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-tree-phiopt@r{[}-@var{n}@r{]} @gol\n -fdump-tree-forwprop@r{[}-@var{n}@r{]} @gol\n -fdump-tree-copyrename@r{[}-@var{n}@r{]} @gol\n--fdump-tree-nrv @gol\n+-fdump-tree-nrv -fdump-tree-vect @gol\n -fdump-tree-sra@r{[}-@var{n}@r{]} @gol\n -fdump-tree-fre@r{[}-@var{n}@r{]} @gol\n -feliminate-dwarf2-dups -feliminate-unused-debug-types @gol\n@@ -318,7 +318,7 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-pre  -ftree-ccp  -ftree-dce -ftree-loop-optimize @gol\n -ftree-lim @gol\n -ftree-dominator-opts -ftree-dse -ftree-copyrename @gol\n--ftree-ch -ftree-sra -ftree-ter -ftree-lrs -ftree-fre @gol\n+-ftree-ch -ftree-sra -ftree-ter -ftree-lrs -ftree-fre -ftree-vectorize @gol\n --param @var{name}=@var{value}\n -O  -O0  -O1  -O2  -O3  -Os}\n \n@@ -3664,6 +3664,11 @@ Dump each function after applying the named return value optimization on\n generic trees.  The file name is made by appending @file{.nrv} to the source\n file name.\n \n+@item vect\n+@opindex fdump-tree-vect\n+Dump each function after applying vectorization of loops.  The file name is \n+made by appending @file{.vect} to the source file name.\n+\n @item all\n @opindex fdump-tree-all\n Enable all the available tree dumps with the flags provided in this option.\n@@ -4499,6 +4504,9 @@ Perform live range splitting during the SSA->normal phase.  Distinct live\n ranges of a variable are split into unique variables, allowing for better\n optimization later.  This is enabled by default at -O and higher.\n \n+@item -ftree-vectorize\n+Perform loop vectorization on trees.\n+\n @item -ftracer\n @opindex ftracer\n Perform tail duplication to enlarge superblock size. This transformation"}, {"sha": "64344815c7d9f33c87110119510c294dbb3d1517", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -1,3 +1,8 @@\n+2004-08-17  Dorit Naishlos  <dorit@il.ibm.com>\n+\n+\t* gcc.dg/vect: New directory for vectorizer tests.\n+\t(vect-*.c): New tests. \n+\n 2004-08-17  Paul Brook  <paul@codesourcery.com>\n \n \tPR fortran/13082"}, {"sha": "c75ab99bc8c26a14900950d84a4dd5bbf6bfd3ad", "filename": "gcc/testsuite/gcc.dg/vect/pr16105.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr16105.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr16105.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr16105.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target powerpc*-*-* i?86-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* } } */\n+\n+#define VECTOR_SIZE 512\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+extern void check(const afloat * __restrict__ v);\n+\n+void square(const afloat * __restrict__ a,\n+\t    afloat * __restrict__ out)\n+{\n+    unsigned int i;\n+    for (i = 0; i < VECTOR_SIZE; i++) {\n+\tfloat ai = a[i];\n+\tfloat a2 = ai * ai;\n+\tout[i] = a2; \n+    }\n+    check(out);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"} } */"}, {"sha": "c282e38cb9a6019ca47f864b830d13aca982f386", "filename": "gcc/testsuite/gcc.dg/vect/tree-vect.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,24 @@\n+/* Check if system supports SIMD */\n+#include <signal.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+void\n+sig_ill_handler (int sig)\n+{\n+  exit(0);\n+}\n+\n+void check_vect (void)\n+{\n+  signal(SIGILL, sig_ill_handler);\n+#if defined(__ppc__) || defined(__ppc64__)\n+  /* Altivec instruction, 'vor %v0,%v0,%v0'.  */\n+  asm volatile (\".long 0x10000484\");\n+#elif defined(__i386__) || defined(__x86_64__)\n+  /* SSE2 instruction: movsd %xmm0,%xmm0 */\n+  asm volatile (\".byte 0xf2,0x0f,0x10,0xc0\");\n+#endif\n+  signal (SIGILL, SIG_DFL);\n+}"}, {"sha": "aa0b1f2f11c2bd370a1151b5d38c60949cf0a413", "filename": "gcc/testsuite/gcc.dg/vect/vect-1.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,102 @@\n+/* { dg-do compile { target powerpc*-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#define N 16\n+\n+void fbar (float *);\n+void ibar (int *);\n+void sbar (short *);\n+\n+/* multiple loops */\n+\n+foo (int n)\n+{\n+  float a[N+1];\n+  float b[N];\n+  float c[N];\n+  float d[N];\n+  int ia[N];\n+  int ib[N];\n+  int ic[N];\n+  short sa[N];\n+  short sb[N];\n+  short sc[N];\n+  int i,j;\n+  int diff = 0;\n+  char cb[N];\n+  char cc[N];\n+  char image[N][N];\n+  char block[N][N];\n+\n+  /* Not vetorizable yet (cross-iteration cycle).  */\n+  diff = 0;\n+  for (i = 0; i < N; i++) {\n+    diff += (cb[i] - cc[i]);\n+  }\n+  ibar (&diff);\n+\n+\n+  /* Not vetorizable yet (outer-loop: not attempted. \n+     inner-loop: cross iteration cycle; multi-dimensional arrays).  */\n+  diff = 0;\n+  for (i = 0; i < N; i++) {\n+    for (i = 0; i < N; i++) {\n+      diff += (image[i][j] - block[i][j]);\n+    }\n+  }\n+  ibar (&diff);\n+\n+\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++){\n+    a[i] = b[i];\n+  }\n+  fbar (a);\n+\n+\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++){\n+    a[i] = b[i] + c[i] + d[i];\n+  }\n+  fbar (a);\n+\n+\n+  /* Not vetorizable yet (access pattern).  */\n+  for (i = 0; i < N/2; i++){\n+    a[i] = b[2*i+1] * c[2*i+1] - b[2*i] * c[2*i];\n+    d[i] = b[2*i] * c[2*i+1] + b[2*i+1] * c[2*i];\n+  }\n+  fbar (a);\n+\n+\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++){\n+    a[i] = b[i] + c[i];\n+    d[i] = b[i] + c[i];\n+    ia[i] = ib[i] + ic[i];\n+  }\n+  ibar (ia);\n+  fbar (a);\n+  fbar (d);\n+\n+\n+  /* Not vectorizable yet (two types with different nunits in vector).  */\n+  for (i = 0; i < N; i++){\n+    ia[i] = ib[i] + ic[i];\n+    sa[i] = sb[i] + sc[i];\n+  }\n+  ibar (ia);\n+  sbar (sa);\n+\n+\n+  /* Not vetorizable yet (too conservative dependence test).  */\n+  for (i = 0; i < N; i++){\n+    a[i] = b[i] + c[i];\n+    a[i+1] = b[i] + c[i];\n+  }\n+  fbar (a);\n+}\n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "b14f8eaa11e18fedbc6f825f237e1abae84e1c44", "filename": "gcc/testsuite/gcc.dg/vect/vect-10.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target powerpc*-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#define N 16\n+\n+short a[N];\n+short d[N];\n+\n+int foo ()\n+{\n+  int i;\n+  short b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  short c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+\n+\n+  /* Not vetorizable yet (strided access pattern).  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      a[i] = b[2*i+1] * c[2*i+1] - b[2*i] * c[2*i];\n+      d[i] = b[2*i] * c[2*i+1] + b[2*i+1] * c[2*i];\n+    } \n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */"}, {"sha": "cfcc642f9134a8c5f4ccf2e263f3744768d23730", "filename": "gcc/testsuite/gcc.dg/vect/vect-11.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int main1 ()\n+{\n+  int i;\n+  int ia[N];\n+  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+\n+  /* Not vetorizable yet (integer mult).  */\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i] * ic[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != ib[i] * ic[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */"}, {"sha": "902a18a250bc1ca433844ae6f3fd24c4e9adb4fc", "filename": "gcc/testsuite/gcc.dg/vect/vect-12.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-12.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int main1 ()\n+{\n+  int i;\n+  int ia[N];\n+  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  short sa[N];\n+  short sc[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  short sb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+\n+  /* Not vetorizable yet (multiple types with different nunits in vector).  */\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i] + ic[i];\n+      sa[i] = sb[i] + sc[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != ib[i] + ic[i] || sa[i] != sb[i] + sc[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "0a73a18ae7c8a6161f5c1e73b58eeeacc2946614", "filename": "gcc/testsuite/gcc.dg/vect/vect-13.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target powerpc*-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+\n+#define N 16\n+\n+int a[N];\n+int results[N] = {0,1,2,3,0,0,0,0,0,0,0,0,12,13,14,15};\n+\n+int main ()\n+{\n+  int i;\n+  int b[N] = {0,1,2,3,-4,-5,-6,-7,-8,-9,-10,-11,12,13,14,15};\n+\n+  /* Not vectorizable yet (condition in loop).  */\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = (b[i] >= 0 ? b[i] : 0);\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "f6207c85c1c12ca8b88e9ca828bda28c8c2b1002", "filename": "gcc/testsuite/gcc.dg/vect/vect-14.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-14.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int main1 ()\n+{\n+  int i;\n+  int ia[N];\n+\n+\n+  /* Not vetorizable yet (induction).  */\n+  for ( i = 0; i < N; i++) {\n+    ia[i] = i;\n+  }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != i)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect();\n+  \n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "96c173dab161cc0b91bf82550d9399149f919f3d", "filename": "gcc/testsuite/gcc.dg/vect/vect-15.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int main1 ()\n+{\n+  int i;\n+  int a[N];\n+  int b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+\n+  /* Not vetorizable yet (reverse access and forward access).  */\n+  for (i = N; i > 0; i--)\n+    {\n+      a[N-i] = b[i-1];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (a[i] != b[N-1-i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect();\n+  \n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "f09845e668c69f02db6e7e6074369d9249b0d30c", "filename": "gcc/testsuite/gcc.dg/vect/vect-16.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-16.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+#define DIFF 240\n+\n+int main1 ()\n+{\n+  int i;\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  float diff;\n+\n+  /* Not vetorizable yet (reduction).  */\n+  diff = 0;\n+  for (i = 0; i < N; i++) {\n+    diff += (b[i] - c[i]);\n+  }\n+\n+  /* check results:  */\n+  if (diff != DIFF)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "bae19e0ad2cf6f5a7e714e540c01d997655a5e51", "filename": "gcc/testsuite/gcc.dg/vect/vect-17.c", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-17.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,130 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  int ia[N];\n+  int ib[N]= \n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  int ic[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char ca[N];\n+  char cb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char cc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sa[N];\n+  short sb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  /* Check ints.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i] & ic[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ia[i] != ib[i] & ic[i])\n+        abort ();\n+    }\n+\n+  /* Check chars.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = cb[i] & cc[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ca[i] != cb[i] & cc[i])\n+        abort ();\n+    }\n+\n+  /* Check shorts.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      sa[i] = sb[i] & sc[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (sa[i] != sb[i] & sc[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "88b0fc020c2f7a94debaac1f92475c22508d0e9a", "filename": "gcc/testsuite/gcc.dg/vect/vect-18.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-18.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  int ia[N];\n+  int ib[N]= \n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+  int ic[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char ca[N];\n+  char cb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char cc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sa[N];\n+  short sb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  /* Check ints.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = (ib[i] | ic[i]);\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ia[i] != (ib[i] | ic[i]))\n+        abort ();\n+    }\n+\n+  /* Check chars.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = (cb[i] | cc[i]);\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != (cb[i] | cc[i]))\n+        abort ();\n+    }\n+\n+  /* Check shorts.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      sa[i] = (sb[i] | sc[i]);\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (sa[i] != (sb[i] | sc[i]))\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "dbfc272248882e414a28f9b3a96caf936aaa5e70", "filename": "gcc/testsuite/gcc.dg/vect/vect-19.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-19.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  int ia[N];\n+  int ib[N]= \n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+  int ic[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char ca[N];\n+  char cb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char cc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sa[N];\n+  short sb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  /* Check ints.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i] ^ ic[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ia[i] != ib[i] ^ ic[i])\n+        abort ();\n+    }\n+\n+  /* Check chars.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = cb[i] ^ cc[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ca[i] != cb[i] ^ cc[i])\n+        abort ();\n+    }\n+\n+  /* Check shorts.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      sa[i] = sb[i] ^ sc[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (sa[i] != sb[i] ^ sc[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "0a13ae1db736f9aa28427b4e652d8bc21f9e000f", "filename": "gcc/testsuite/gcc.dg/vect/vect-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+ \n+int main1 ()\n+{  \n+  char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  char ca[N];\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != cb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "c5f4cef00dcfa02c33ed947f089255c01ff21f58", "filename": "gcc/testsuite/gcc.dg/vect/vect-20.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-20.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  int ia[N];\n+  int ib[N]= \n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+  int ic[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char ca[N];\n+  char cb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char cc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sa[N];\n+  short sb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  /* Check ints.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ~ib[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ia[i] != ~ib[i])\n+        abort ();\n+    }\n+\n+  /* Check chars.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = ~cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ca[i] != ~cb[i])\n+        abort ();\n+    }\n+\n+  /* Check shorts.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      sa[i] = ~sb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (sa[i] != ~sb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "fbe8e6a6ab713a39cf098b4277b85209f81e61b0", "filename": "gcc/testsuite/gcc.dg/vect/vect-21.c", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-21.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,130 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  int ia[N];\n+  int ib[N]= \n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+  int ic[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char ca[N];\n+  char cb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char cc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sa[N];\n+  short sb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  /* Check ints.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = !ib[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ia[i] != !ib[i])\n+        abort ();\n+    }\n+\n+  /* Check chars.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = !cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ca[i] != !cb[i])\n+        abort ();\n+    }\n+\n+  /* Check shorts.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      sa[i] = !sb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (sa[i] != !sb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+"}, {"sha": "0538515eb7d45c6fde230c23e1380b92724b379e", "filename": "gcc/testsuite/gcc.dg/vect/vect-22.c", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-22.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,130 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  int ia[N];\n+  int ib[N]= \n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+  int ic[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char ca[N];\n+  char cb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char cc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sa[N];\n+  short sb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  /* Check ints.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = -ib[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ia[i] != -ib[i])\n+        abort ();\n+    }\n+\n+  /* Check chars.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = -cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ca[i] != -cb[i])\n+        abort ();\n+    }\n+\n+  /* Check shorts.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      sa[i] = -sb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (sa[i] != -sb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+"}, {"sha": "801c0c88e72df66afb0e72e6a271c838b5a485a4", "filename": "gcc/testsuite/gcc.dg/vect/vect-23.c", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-23.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,130 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  int ia[N];\n+  int ib[N]= \n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+  int ic[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char ca[N];\n+  char cb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char cc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sa[N];\n+  short sb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  /* Check ints.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i] && ic[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ia[i] != ib[i] && ic[i])\n+        abort ();\n+    }\n+\n+  /* Check chars.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = cb[i] && cc[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ca[i] != cb[i] && cc[i])\n+        abort ();\n+    }\n+\n+  /* Check shorts.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      sa[i] = sb[i] && sc[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (sa[i] != sb[i] && sc[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+"}, {"sha": "db71cb474793851c7045ef6061839386675c79e0", "filename": "gcc/testsuite/gcc.dg/vect/vect-24.c", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-24.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,130 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  int ia[N];\n+  int ib[N]= \n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+  int ic[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char ca[N];\n+  char cb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  char cc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sa[N];\n+  short sb[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  short sc[N] =\n+    {1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0,\n+     1,1,0,0,1,0,1,0};\n+\n+  /* Check ints.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = (ib[i] || ic[i]);\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ia[i] != (ib[i] || ic[i]))\n+        abort ();\n+    }\n+\n+  /* Check chars.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = (cb[i] || cc[i]);\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (ca[i] != (cb[i] || cc[i]))\n+        abort ();\n+    }\n+\n+  /* Check shorts.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      sa[i] = (sb[i] || sc[i]);\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (sa[i] != (sb[i] || sc[i]))\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+"}, {"sha": "05bd15fce23d05e2a6c3c79e8c537b214c5c28a7", "filename": "gcc/testsuite/gcc.dg/vect/vect-25.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-25.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+int main1 (int n, int *p)\n+{\n+  int i;\n+  int ib[N];\n+  int ia[N];\n+  int k;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = n;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != n)\n+        abort ();\n+    }\n+\n+  k = *p;\n+  for (i = 0; i < N; i++)\n+    {\n+      ib[i] = k;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ib[i] != k)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  int m = 8;\n+\n+  check_vect ();\n+  \n+  return main1 (m, &m);\n+}\n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "bfeb76ece69336e0013955ac23928f480596756b", "filename": "gcc/testsuite/gcc.dg/vect/vect-26.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-26.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+/* unaligned store.  */\n+\n+int main1 ()\n+{\n+  int i;\n+  int ia[N+1];\n+\n+  for (i = 1; i <= N; i++)\n+    {\n+      ia[i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 1; i <= N; i++)\n+    {\n+      if (ia[i] != 5)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+"}, {"sha": "35e8f418f5fa48446b3b7494d775c77c4828762e", "filename": "gcc/testsuite/gcc.dg/vect/vect-27.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+/* unaligned load.  */\n+\n+int main1 ()\n+{\n+  int i;\n+  int ia[N];\n+  int ib[N+1];\n+\n+  for (i=0; i < N; i++)\n+    {\n+      ib[i] = i;\n+    }\n+\n+  for (i = 1; i <= N; i++)\n+    {\n+      ia[i-1] = ib[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 1; i <= N; i++)\n+    {\n+      if (ia[i-1] != ib[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+"}, {"sha": "b10cf136e1710b31a33f9d485d95e07f9d5416b3", "filename": "gcc/testsuite/gcc.dg/vect/vect-28.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-28.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+#define OFF 3\n+\n+/* unaligned store.  */\n+\n+int main1 (int off)\n+{\n+  int i;\n+  int ia[N+OFF];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i+off] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i+off] != 5)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  main1 (0); /* aligned */\n+  main1 (OFF); /* unaligned */\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+"}, {"sha": "80754f5fea55b5224f0a518e7f0668128ea25c75", "filename": "gcc/testsuite/gcc.dg/vect/vect-29.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+#define OFF 3\n+\n+/* unaligned load.  */\n+\n+int main1 (int off)\n+{\n+  int i;\n+  int ia[N];\n+  int ib[N+OFF];\n+\n+  for (i = 0; i < N+OFF; i++)\n+    {\n+      ib[i] = i;\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i+off];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != ib[i+off])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  main1 (0); /* aligned */\n+  main1 (OFF); /* unaligned */\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+"}, {"sha": "cd49a0d267d5f04eb65c9cbff26b21276e6338de", "filename": "gcc/testsuite/gcc.dg/vect/vect-3.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-3.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 20\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  float a[N];\n+  float e[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ia[N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = b[i] + c[i] + d[i];\n+      e[i] = b[i] + c[i] + d[i];\n+      ia[i] = ib[i] + ic[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      float fres = b[i] + c[i] + d[i];\n+      int ires = ib[i] + ic[i];\t\n+      if (a[i] != fres || e[i] != fres || ia[i] != ires)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */\n+\n+\n+"}, {"sha": "0e4267982645e337892b84528bd682479d573db1", "filename": "gcc/testsuite/gcc.dg/vect/vect-30.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-30.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+float b[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+float a[N];\n+float c[N];\n+\n+int main1 (int n)\n+{\n+  int i=0;\n+\n+  /* Vectorized: unknown loop bound.  */\n+  while (n--) {\n+    a[i] = b[i];\n+    i++;\n+  }\n+\n+  /* check results:  */\n+  for (i = 0; i < n; i++)\n+    {\n+      if (a[i] != b[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main2 (unsigned int n)\n+{\n+  int i=0;\n+  int nn = n;\n+\n+  /* Vectorized: unknown loop bound.  */\n+  while (n--) {\n+    c[i] = b[i];\n+    i++;\n+  }\n+\n+  /* check results:  */\n+  for (i = 0; i < nn; i++)\n+    {\n+      if (c[i] != b[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  main1 (N);\n+  main2 (N);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail *-*-* } } } */"}, {"sha": "cb7f7cca42abdc715b242bd32300f72232739823", "filename": "gcc/testsuite/gcc.dg/vect/vect-31.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+struct t{\n+  int k[N];\n+  int l; \n+};\n+  \n+struct s{\n+  char a;\t/* aligned */\n+  char b[N-1];  /* unaligned (offset 1B) */\n+  char c[N];    /* aligned (offset NB) */\n+  struct t d;   /* aligned (offset 2NB) */\n+  struct t e;   /* unaligned (offset 2N+4N+4 B) */\n+};\n+ \n+int main1 ()\n+{  \n+  int i;\n+  struct s tmp;\n+\n+  /* unaligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.b[i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.b[i] != 5)\n+        abort ();\n+    }\n+\n+  /* aligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.c[i] = 6;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.c[i] != 6)\n+        abort ();\n+    }\n+\n+  /* aligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.d.k[i] = 7;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.d.k[i] != 7)\n+        abort ();\n+    }\n+\n+  /* unaligned */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      tmp.e.k[i] = 8;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N/2; i++)\n+    {\n+      if (tmp.e.k[i] != 8)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "8e1cb18368caf48a499486d5f82160de9e657960", "filename": "gcc/testsuite/gcc.dg/vect/vect-32.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+ \n+int main1 ()\n+{  \n+  struct {\n+    char ca[N];\n+  } s;\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.ca[i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.ca[i] != 5)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "137e6982124893ca4c0ea2b0f3ceb310a3cb1d68", "filename": "gcc/testsuite/gcc.dg/vect/vect-33.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-S -O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-S -O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+struct test {\n+  char ca[N];\n+};\n+\n+extern struct test s;\n+ \n+int main1 ()\n+{  \n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.ca[i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.ca[i] != 5)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  return main1 ();\n+} \n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "7adbf689eaffcd7492ce1da41f9a59c170bc509d", "filename": "gcc/testsuite/gcc.dg/vect/vect-34.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+ \n+int main1 ()\n+{  \n+  struct {\n+    char ca[N];\n+  } s;\n+  char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.ca[i] = cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.ca[i] != cb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "b29da494942509f5448976e013736de9238ef80a", "filename": "gcc/testsuite/gcc.dg/vect/vect-35.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+typedef char achar __attribute__ ((__aligned__(16)));\n+\n+#define N 16\n+achar x[N];\n+ \n+int main1 ()\n+{  \n+  union {\n+    achar a[N];\n+    achar b[N];\n+  } s;\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.b[i] = 3*i;\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.a[i] = s.b[i] + 1;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.a[i] != s.b[i])\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */"}, {"sha": "b3c60d9ef133ebfdc21a8eb9b417cea81478eba7", "filename": "gcc/testsuite/gcc.dg/vect/vect-36.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+ \n+int main1 ()\n+{  \n+  struct {\n+    char ca[N];\n+    char cb[N];\n+  } s;\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.cb[i] = 3*i;\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      s.ca[i] = s.cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.ca[i] != s.cb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "97f311066028e5cfd1927d99d4472d10d4847405", "filename": "gcc/testsuite/gcc.dg/vect/vect-37.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-37.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+typedef char achar __attribute__ ((__aligned__(16)));\n+\n+#define N 16\n+achar x[N];\n+ \n+int main1 (achar *y)\n+{  \n+  struct {\n+    achar *p;\n+    achar *q;\n+  } s;\n+  achar cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int i;\n+\n+  s.p = y;\n+  for (i = 0; i < N; i++)\n+    {\n+      s.p[i] = cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.p[i] != cb[i])\n+        abort ();\n+    }\n+\n+  s.q = cb;\n+  for (i = 0; i < N; i++)\n+    {\n+      s.p[i] = s.q[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (s.p[i] != s.q[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 (x);\n+} \n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "df2cf9c2c5db4af2c637b6b7a9056f2b220e6e50", "filename": "gcc/testsuite/gcc.dg/vect/vect-38.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-38.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+ \n+double cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+double ca[N];\n+\n+int main1 ()\n+{  \n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = cb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != cb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail powerpc*-*-* } } } */"}, {"sha": "943d71f20472f8354c240b3b6f584fb720ffa2fa", "filename": "gcc/testsuite/gcc.dg/vect/vect-4.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-4.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 20\n+\n+int\n+main1 ()\n+{\n+  int i;\n+  float a[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = b[i] * c[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (a[i] != b[i] * c[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "e3dd2778adbadf2d2349df659640bedc96d13221", "filename": "gcc/testsuite/gcc.dg/vect/vect-40.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a,b,c);\n+  bar (a,b,c);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"} } */"}, {"sha": "0f9cae4ee8fe5d7e6b7b4a64d2eeb7a20beb220c", "filename": "gcc/testsuite/gcc.dg/vect/vect-41.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-41.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (afloat * pa, afloat * pb, afloat * pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a,b,c);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "7f79d42de49c636b6dd9d76c96be93cc8172a6f2", "filename": "gcc/testsuite/gcc.dg/vect/vect-42.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (afloat * __restrict__ pa)\n+{\n+  int i;\n+  afloat pb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat pc[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a);\n+  bar (a,b,c);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"} } */"}, {"sha": "370b5dd8bb77fcb94ef0413b34d4de7d615b225f", "filename": "gcc/testsuite/gcc.dg/vect/vect-43.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-43.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (afloat * pa)\n+{\n+  int i;\n+  afloat pb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat pc[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */"}, {"sha": "4068ab1d577a369f3d5605e908e0c4db1bebc605", "filename": "gcc/testsuite/gcc.dg/vect/vect-44.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-44.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+\n+void bar (float *pa, float *pb, float *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (float * __restrict__ pa, float * __restrict__ pb, float * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  float a[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a,b,c);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "c0b0029e12f479cbfd95463a76636821b9ecb5fd", "filename": "gcc/testsuite/gcc.dg/vect/vect-45.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-45.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+\n+void bar (const float *pa, const float *pb, const float *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (float *pa, float *pb, float *pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  float a[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a,b,c);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "1fb08a7eab500feda2eb51a1bd307c9ec71558b9", "filename": "gcc/testsuite/gcc.dg/vect/vect-46.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc)\n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n , afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  int n=N;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (n,a,b,c);\n+  bar (a,b,c);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "e1e1d38e6b63de6a8f4f52498558b9ae99325d26", "filename": "gcc/testsuite/gcc.dg/vect/vect-47.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-47.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc)\n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n , afloat *  pa, afloat *  pb, afloat *  pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  int n=N;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (n,a,b,c);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "c7485be3a0b06916acd10519adf43bc50f201f40", "filename": "gcc/testsuite/gcc.dg/vect/vect-48.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (float *pa, float *pb, float *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (afloat * __restrict__ pa, float * __restrict__ pb, float * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  float a[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a,b,c);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "8d8b212a66f824ae3b7924c99a61a9621f77f8aa", "filename": "gcc/testsuite/gcc.dg/vect/vect-49.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-49.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (const float *pa, const float *pb, const float *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (afloat *pa, float *pb, float *pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  float a[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a,b,c);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "bab9e23d491b6e8f469b26d19a61e89e914cc329", "filename": "gcc/testsuite/gcc.dg/vect/vect-5.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-5.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int main1 ()\n+{\n+  int i, j;\n+  float a[N];\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+\n+  i = 0;\n+  j = 0;\n+  while (i < 5*N)\n+    {\n+      a[j] = c[j];\n+      i += 5;\n+      j++;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (a[i] != c[i])\n+        abort ();\n+    }\n+\n+\n+  for (i = N; i > 0; i--)\n+    {\n+      a[N-i] = d[N-i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != d[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "cd7cf5d4996673b89ed0c85de4c90c160bcec2df", "filename": "gcc/testsuite/gcc.dg/vect/vect-50.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-50.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+\n+void bar (float *pa, float *pb, float *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n, float * __restrict__ pa, float * __restrict__ pb, float * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  float a[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (N,a,b,c);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "65c0f40275455cad40a53581690141ab4441b05c", "filename": "gcc/testsuite/gcc.dg/vect/vect-51.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-51.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-51.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-51.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+\n+void bar (const float *pa, const float *pb, const float *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n, float *pa, float *pb, float *pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  float a[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (N,a,b,c);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "32a584b2a0b03a58ea85ef5df418ea030413f093", "filename": "gcc/testsuite/gcc.dg/vect/vect-52.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (float *pa, float *pb, float *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n, afloat * __restrict__ pa, float * __restrict__ pb, float * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};\n+\n+  check_vect ();\n+\n+  main1 (N,a,&b[1],c);\n+  main1 (N,a,&b[1],&c[1]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "4b99304caf3419cd6d33e41163ec667c619f88bf", "filename": "gcc/testsuite/gcc.dg/vect/vect-53.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-53.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-53.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-53.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+  \n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (const float *pa, const float *pb, const float *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n, afloat *pa, float *pb, float *pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat b[N+1] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60};\n+  afloat c[N+1] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};\n+\n+  check_vect ();\n+\n+  main1 (N,a,&b[1],c);\n+  main1 (N,a,&b[1],&c[1]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "5ab9e026f423ecc20a12d26ac86f85c81080e843", "filename": "gcc/testsuite/gcc.dg/vect/vect-54.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc)\n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (pa[i+1] != (pb[i+1] * pc[i+1]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < N/2; i++)\n+    {\n+      pa[i+1] = pb[i+1] * pc[i+1];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a,b,c);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "2257a2312f338dd4994d51155af419f69195d105", "filename": "gcc/testsuite/gcc.dg/vect/vect-55.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-55.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc)\n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (pa[i+1] != (pb[i+1] * pc[i+1]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (afloat *  pa, afloat *  pb, afloat *  pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < N/2; i++)\n+    {\n+      pa[i+1] = pb[i+1] * pc[i+1];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a,b,c);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "0e20137bebd5112268ce7ef2823efd800f8a54ac", "filename": "gcc/testsuite/gcc.dg/vect/vect-56.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc)\n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (pa[i] != (pb[i+1] * pc[i+1]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < N/2; i++)\n+    {\n+      pa[i] = pb[i+1] * pc[i+1];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a,b,c);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "0e675d7755c9d85c8eb0abcd8fb2641ef58a6a62", "filename": "gcc/testsuite/gcc.dg/vect/vect-57.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-57.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc)\n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (pa[i] != (pb[i+1] * pc[i+1]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (afloat *  pa, afloat *  pb, afloat * pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < N/2; i++)\n+    {\n+      pa[i] = pb[i+1] * pc[i+1];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (a,b,c);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "57c27795f1cc51a5d9b3ea726457b281de3e2627", "filename": "gcc/testsuite/gcc.dg/vect/vect-58.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc)\n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (pa[i+1] != (pb[i+1] * pc[i+1]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n , afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n/2; i++)\n+    {\n+      pa[i+1] = pb[i+1] * pc[i+1];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  int n=N;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (n,a,b,c);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "3dfbe19e988438a758e110b5a667a7137930576d", "filename": "gcc/testsuite/gcc.dg/vect/vect-59.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-59.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc)\n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (pa[i+1] != (pb[i+1] * pc[i+1]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n , afloat *  pa, afloat *  pb, afloat *  pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n/2; i++)\n+    {\n+      pa[i+1] = pb[i+1] * pc[i+1];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  int n=N;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (n,a,b,c);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "2671fd7e037366fb932dc2b9ff23a28905503431", "filename": "gcc/testsuite/gcc.dg/vect/vect-6.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+float results1[N] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,0.00};\n+float results2[N] = {0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};\n+\n+int main1 ()\n+{\n+  int i;\n+  float a[N] = {0};\n+  float e[N] = {0};\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+\n+  for (i = 0; i < N/2; i++)\n+    { \n+      a[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n+      e[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n+    }\n+\n+  /* check results:  */\n+  for (i=0; i<N; i++)\n+    {\n+      if (a[i] != results1[i] || e[i] != results2[i])\n+\tabort(); \n+    }\n+\n+\n+  for (i = 1; i <=N-4; i++)\n+    {\n+      a[i+3] = b[i-1];\n+    }\n+\n+  /* check results:  */\n+  for (i = 1; i <=N-4; i++)\n+    {\n+      if (a[i+3] != b[i-1])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */\n+\n+"}, {"sha": "276b7e222fb393b6e55574329ccfcb219d1c33d5", "filename": "gcc/testsuite/gcc.dg/vect/vect-60.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc)\n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (pa[i] != (pb[i+1] * pc[i+1]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n , afloat * __restrict__ pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n/2; i++)\n+    {\n+      pa[i] = pb[i+1] * pc[i+1];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  int n=N;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (n,a,b,c);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "257ef388fc5a81985e14ce0aa00e7c3c228c8b4b", "filename": "gcc/testsuite/gcc.dg/vect/vect-61.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-61.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-61.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-61.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+void bar (afloat *pa, afloat *pb, afloat *pc)\n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      if (pa[i] != (pb[i+1] * pc[i+1]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+int\n+main1 (int n , afloat *  pa, afloat *  pb, afloat *  pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n/2; i++)\n+    {\n+      pa[i] = pb[i+1] * pc[i+1];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  int n=N;\n+  afloat a[N];\n+  afloat b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  afloat c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  check_vect ();\n+\n+  main1 (n,a,b,c);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "76e0106d7b45cd8b4f73dbcfe36baebec2a3ed73", "filename": "gcc/testsuite/gcc.dg/vect/vect-7.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+int main1 ()\n+{\n+  int i;\n+  short sa[N];\n+  short sb[N];\n+  \n+  for (i = 0; i < N; i++)\n+    {\n+      sb[i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (sb[i] != 5)\n+        abort ();\n+    }\n+  \n+  for (i = 0; i < N; i++)\n+    {\n+      sa[i] = sb[i] + 100;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (sa[i] != 105)\n+        abort ();\n+    }\n+  \n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+}\n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "08c986cb9afa5227c5497a7598ea9351c8bcd8d4", "filename": "gcc/testsuite/gcc.dg/vect/vect-8.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-8.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+float b[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+float a[N];\n+\n+int main1 (int n)\n+{\n+  int i;\n+\n+  /* Vectorized: unknown loop bound).  */\n+  for (i = 0; i < n; i++){\n+    a[i] = b[i];\n+  }\n+\n+  /* check results:  */\n+  for (i = 0; i < n; i++)\n+    {\n+      if (a[i] != b[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 (N);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "0501bb8eadd6152aef6d3fe6f7d81a6944c4f893", "filename": "gcc/testsuite/gcc.dg/vect/vect-9.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-9.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int main1 ()\n+{\n+  int i;\n+  short sb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ia[N];\n+\n+  /* Not vetorizable yet (type cast).  */\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = (int) sb[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != (int) sb[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "a36d3084baa1091de98dbe17ec8a8270ee969bc8", "filename": "gcc/testsuite/gcc.dg/vect/vect-all.c", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,218 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int iadd_results[N] = {0,6,12,18,24,30,36,42,48,54,60,66,72,78,84,90};\n+float fadd_results[N] = {0.0,6.0,12.0,18.0,24.0,30.0,36.0,42.0,48.0,54.0,60.0,66.0,72.0,78.0,84.0,90.0};\n+float fmul_results[N] = {0.0,3.0,12.0,27.0,48.0,75.0,108.0,147.0,192.0,243.0,300.0,363.0,432.0,507.0,588.0,675.0};\n+float fresults1[N] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,48.00,54.00,60.00,66.00,72.00,78.00,84.00,90.00};\n+float fresults2[N] = {0.00,6.00,12.00,18.00,24.00,30.00,36.00,42.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};\n+\n+/****************************************************/\n+void icheck_results (int *a, int *results)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != results[i])\n+\tabort ();\n+    }\n+}\n+\n+void fcheck_results (float *a, float *results)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != results[i])\n+\tabort ();\n+    }\n+}   \n+\n+void \n+fbar_mul (float *a)\n+{\n+  fcheck_results (a, fmul_results);\n+} \n+\n+void \n+fbar_add (float *a)\n+{\n+  fcheck_results (a, fadd_results);\n+} \n+\n+void \n+ibar_add (int *a)\n+{\n+  icheck_results (a, iadd_results);\n+} \n+\n+void \n+fbar1 (float *a)\n+{\n+  fcheck_results (a, fresults1);\n+} \n+\n+void \n+fbar2 (float *a)\n+{\n+  fcheck_results (a, fresults2);\n+} \n+\n+\n+/* All of the loops below are currently vectorizable.  */\n+\n+int\n+main1 ()\n+{\n+  int i,j;\n+  float a[N];\n+  float e[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ia[N];\n+  char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  char ca[N];\n+  short sa[N];\n+\n+  /* Test 1: copy chars.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      ca[i] = cb[i];\n+    }\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ca[i] != cb[i])\n+\tabort ();\n+    }\n+\n+\n+  /* Test 2: fp mult.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = b[i] * c[i];\n+    }\n+  fbar_mul (a);\n+\n+\n+  /* Test 3: mixed types (int, fp), same nunits in vector.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = b[i] + c[i] + d[i];\n+      e[i] = b[i] + c[i] + d[i];\n+      ia[i] = ib[i] + ic[i];\n+    }\n+  ibar_add (ia);\n+  fbar_add (a);\n+  fbar_add (e);\n+\n+\n+  /* Test 4: access with offset.  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      a[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n+      e[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n+    }\n+  fbar1 (a);\n+  fbar2 (e);\n+\n+\n+  /* Test 5: access with offset */\n+  for (i = 1; i <=N-4; i++)\n+    {\n+      a[i+3] = b[i-1];\n+    }\n+  /* check results:  */\n+  for (i = 1; i <=N-4; i++)\n+    {\n+      if (a[i+3] != b[i-1])\n+\tabort ();\n+    }\n+\n+\n+  /* Test 6 - loop induction with stride != 1.  */\n+  i = 0;\n+  j = 0;\n+  while (i < 5*N)\n+    {\n+      a[j] = c[j];\n+      i += 5;\n+      j++;\n+    }\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (a[i] != c[i])\n+        abort ();\n+    }\n+\n+\n+  /* Test 7 - reverse access.  */\n+  for (i = N; i > 0; i--)\n+    {\n+      a[N-i] = d[N-i];\n+    }\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (a[i] != d[i])\n+        abort ();\n+    }\n+\n+\n+  /* Tests 8,9,10 - constants.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = 5.0;\n+    }\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != 5.0)\n+        abort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      sa[i] = 5;\n+    }\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (sa[i] != 5)\n+        abort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i] + 5;\n+    }\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (ia[i] != ib[i] + 5)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* xfail: local arrays can't be aligned on a boundary greater than STACK_BOUNDARY */\n+/* { dg-final { scan-tree-dump-times \"vectorized 10 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */"}, {"sha": "8680d21b62943464d2aeda198c51c329f995473e", "filename": "gcc/testsuite/gcc.dg/vect/vect-none.c", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-none.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,193 @@\n+/* { dg-do compile { target powerpc*-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#define N 16\n+\n+extern void abort (void);\n+\n+int iadd_results[N] = {0,6,12,18,24,30,36,42,48,54,60,66,72,78,84,90};\n+float fadd_results[N] = {0.0,6.0,12.0,18.0,24.0,30.0,36.0,42.0,48.0,54.0,60.0,66.0,72.0,78.0,84.0,90.0};\n+float fmul_results[N] = {0.0,3.0,12.0,27.0,48.0,75.0,108.0,147.0,192.0,243.0,300.0,363.0,432.0,507.0,588.0,675.0};\n+float fresults1[N] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,48.00,54.00,60.00,66.00,72.00,78.00,84.00,90.00};\n+float fresults2[N] = {0.00,6.00,12.00,18.00,24.00,30.00,36.00,42.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};\n+\n+/****************************************************/\n+void icheck_results (int *a, int *results)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != results[i])\n+\tabort ();\n+    }\n+}\n+\n+void fcheck_results (float *a, float *results)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != results[i])\n+\tabort ();\n+    }\n+}   \n+\n+void \n+fbar_mul (float *a)\n+{\n+  fcheck_results (a, fmul_results);\n+} \n+\n+void \n+fbar_add (float *a)\n+{\n+  fcheck_results (a, fadd_results);\n+} \n+\n+void \n+ibar_add (int *a)\n+{\n+  icheck_results (a, iadd_results);\n+} \n+\n+void \n+fbar1 (float *a)\n+{\n+  fcheck_results (a, fresults1);\n+} \n+\n+void \n+fbar2 (float *a)\n+{\n+  fcheck_results (a, fresults2);\n+} \n+\n+\n+/* None of the loops below is currently vectorizable. The vectorizer will\n+   be enhanced to vectorize most of these loops.  */\n+\n+int\n+foo (int n)\n+{\n+  int i,j;\n+  float a[N];\n+  float e[N];\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  float d[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+  short sc[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  short sb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  short sa[N];\n+  int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ia[N];\n+  int diff = 0;\n+  char cb[N];\n+  char cc[N];\n+  char image[N][N];\n+  char block[N][N];\n+\n+\n+  /* Test 1 - unknown loop bound.  */\n+  for (i = 0; i < n; i++)\n+    {\n+      a[i] = b[i];\n+    }\n+  fbar (a);\n+\n+\n+  /* Test 2 - type cast.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = (int) sb[i];\n+    }\n+  fbar (a);\n+\n+\n+  /* Test 3 - strided access pattern.  */\n+  for (i = 0; i < N/2; i++)\n+    {\n+      a[i] = b[2*i+1] * c[2*i+1] - b[2*i] * c[2*i];\n+      d[i] = b[2*i] * c[2*i+1] + b[2*i+1] * c[2*i];\n+    }\n+  fbar (a);\n+\n+\n+  /* Test 4 - no target support for integer mult.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i] * ic[i];\n+    }\n+  ibar (ia);\n+\n+\n+  /* Test 5 - two types with different nunits in vector.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      ia[i] = ib[i] + ic[i];\n+      sa[i] = sb[i] + sc[i];\n+    }\n+  ibar (ia);\n+  sbar (sa);\n+\n+\n+  /* Test 6 - too conservative dependence test.  */\n+  for (i = 0; i < N; i++){\n+    a[i] = b[i] + c[i];\n+    a[i+1] = b[i] + c[i];\n+  }\n+  fbar (a);\n+\n+\n+  /* Test 7 - condition in loop.  */\n+  for (i = 0; i < N; i++){\n+    a[i] = (b[i] > 0 ? b[i] : 0);\n+  }\n+  fbar (a);\n+\n+\n+  /* Test 8 - cross-iteration cycle.  */\n+  diff = 0;\n+  for (i = 0; i < N; i++) {\n+    diff += (cb[i] - cc[i]);\n+  }\n+  ibar (&diff);\n+\n+\n+  /* Test 9 - outer-loop not attempted; inner-loop has cross \n+     iteration cycle and multi-dimensional arrays.  */\n+  diff = 0;\n+  for (i = 0; i < N; i++) {\n+    for (i = 0; i < N; i++) {\n+      diff += (image[i][j] - block[i][j]);\n+    }\n+  }\n+  ibar (&diff);\n+\n+\n+  /* Test 10 - induction.  */\n+  for ( i = 0; i < N; i++) {\n+    a[i] = i;\n+  }\n+  fbar (a);\n+\n+\n+  /* Test 11 - reverse access and forward access.  */\n+  for (i = N; i > 0; i--)\n+    {\n+      a[N-i] = b[i-1];\n+    }\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (a[i] != b[N-1-i])\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized \" 3 \"vect\"} } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 3 \"vect\"} } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */"}, {"sha": "ee8394880ba17fc93b0ace052fea05a0bd6a886a", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,35 @@\n+#   Copyright (C) 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "617f26b7eadabf90a57bedc58c3f311a91449d02", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -83,6 +83,7 @@ DEFTIMEVAR (TV_TREE_CD_DCE\t     , \"tree aggressive DCE\")\n DEFTIMEVAR (TV_TREE_DSE\t\t     , \"tree DSE\")\n DEFTIMEVAR (TV_TREE_LOOP\t     , \"tree loop optimization\")\n DEFTIMEVAR (TV_LIM                   , \"loop invariant motion\")\n+DEFTIMEVAR (TV_TREE_VECTORIZATION    , \"tree loop vectorization\")\n DEFTIMEVAR (TV_TREE_CH\t\t     , \"tree copy headers\")\n DEFTIMEVAR (TV_TREE_SSA_TO_NORMAL    , \"tree SSA to normal\")\n DEFTIMEVAR (TV_TREE_NRV\t\t     , \"tree NRV optimization\")"}, {"sha": "c45762d8540f42474ab3a9bae6ccf31cab1ef136", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 111, "deletions": 3, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -99,6 +99,110 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n static unsigned int data_ref_id = 0;\n \n \f\n+/* This is the simplest data dependence test: determines whether the\n+   data references A and B access the same array/region. If can't determine -\n+   return false; Otherwise, return true, and DIFFER_P will record\n+   the result. This utility will not be necessary when alias_sets_conflict_p\n+   will be less conservative.  */\n+\n+bool\n+array_base_name_differ_p (struct data_reference *a,\n+                          struct data_reference *b,\n+                          bool *differ_p)\n+{\n+  tree base_a = DR_BASE_NAME (a);\n+  tree base_b = DR_BASE_NAME (b);\n+  tree ta = TREE_TYPE (base_a);\n+  tree tb = TREE_TYPE (base_b);\n+\n+\n+  /** Determine if same base  **/\n+\n+  /* array accesses: a[i],b[i] or pointer accesses: *a,*b. bases are a,b.  */\n+  if (base_a == base_b)\n+    {\n+      *differ_p = false;\n+      return true;\n+    }\n+\n+  /* pointer based accesses - (*p)[i],(*q)[j]. bases are (*p),(*q)  */\n+  if (TREE_CODE (base_a) == INDIRECT_REF && TREE_CODE (base_b) == INDIRECT_REF\n+      && TREE_OPERAND (base_a, 0) == TREE_OPERAND (base_b, 0))\n+    {\n+      *differ_p = false;\n+      return true;\n+    }\n+\n+  /* record/union based accesses - s.a[i], t.b[j]. bases are s.a,t.b.  */ \n+  if (TREE_CODE (base_a) == COMPONENT_REF && TREE_CODE (base_b) == COMPONENT_REF\n+      && TREE_OPERAND (base_a, 0) == TREE_OPERAND (base_b, 0)\n+      && TREE_OPERAND (base_a, 1) == TREE_OPERAND (base_b, 1))\n+    {\n+      *differ_p = false;\n+      return true;\n+    }\n+\n+\n+  /** Determine if different bases  **/\n+\n+  /* at this point we know that base_a != base_b. However, pointer accesses\n+     of the form x=(*p) and y=(*q), which bases are p and q, may still by pointing\n+     to the same base. In SSAed GIMPLE p and q will be SSA_NAMES in this case.\n+     Therefore, here we check if it's really two diferent declarations.  */\n+  if (TREE_CODE (base_a) == VAR_DECL && TREE_CODE (base_b) == VAR_DECL)\n+    {\n+      *differ_p = true;\n+      return true;\n+    }\n+\n+  /* compare two record/union bases s.a and t.b: \n+     s != t or (a != b and s and t are not unions)  */\n+  if (TREE_CODE (base_a) == COMPONENT_REF && TREE_CODE (base_b) == COMPONENT_REF\n+      && ((TREE_CODE (TREE_OPERAND (base_a, 0)) == VAR_DECL\n+           && TREE_CODE (TREE_OPERAND (base_b, 0)) == VAR_DECL\n+           && TREE_OPERAND (base_a, 0) != TREE_OPERAND (base_b, 0))\n+          || (TREE_CODE (TREE_TYPE (TREE_OPERAND (base_a, 0))) == RECORD_TYPE \n+              && TREE_CODE (TREE_TYPE (TREE_OPERAND (base_b, 0))) == RECORD_TYPE\n+              && TREE_OPERAND (base_a, 1) != TREE_OPERAND (base_b, 1))))\n+    {\n+      *differ_p = true;\n+      return true;\n+    }\n+\n+  /* compare a record/union access and an array access.  */ \n+  if ((TREE_CODE (base_a) == VAR_DECL\n+       && (TREE_CODE (base_b) == COMPONENT_REF\n+           && TREE_CODE (TREE_OPERAND (base_b, 0)) == VAR_DECL))\n+      || (TREE_CODE (base_b) == VAR_DECL\n+       && (TREE_CODE (base_a) == COMPONENT_REF\n+           && TREE_CODE (TREE_OPERAND (base_a, 0)) == VAR_DECL)))\n+    {\n+      *differ_p = true;\n+      return true;\n+    }\n+\n+  if (!alias_sets_conflict_p (get_alias_set (base_a), get_alias_set (base_b)))\n+    {\n+      *differ_p = true;\n+      return true;\n+    }\n+\n+  /* An insn writing through a restricted pointer is \"independent\" of any\n+     insn reading or writing through a different pointer, in the same\n+     block/scope.\n+   */\n+  if ((TREE_CODE (ta) == POINTER_TYPE && TYPE_RESTRICT (ta)\n+       && !DR_IS_READ(a))\n+      || (TREE_CODE (tb) == POINTER_TYPE && TYPE_RESTRICT (tb)\n+\t  && !DR_IS_READ(b)))\n+    {\n+      *differ_p = true;\n+      return true;\n+    }\n+\n+  *differ_p = false; /* Don't know, but be conservative.  */\n+  return false;\n+}\n \n /* Returns true iff A divides B.  */\n \n@@ -466,7 +570,8 @@ struct data_reference *\n init_data_ref (tree stmt, \n \t       tree ref,\n \t       tree base,\n-\t       tree access_fn)\n+\t       tree access_fn,\n+\t       bool is_read)\n {\n   struct data_reference *res;\n \n@@ -486,6 +591,7 @@ init_data_ref (tree stmt,\n   VARRAY_TREE_INIT (DR_ACCESS_FNS (res), 5, \"access_fns\");\n   DR_BASE_NAME (res) = base;\n   VARRAY_PUSH_TREE (DR_ACCESS_FNS (res), access_fn);\n+  DR_IS_READ (res) = is_read;\n   \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \")\\n\");\n@@ -532,6 +638,7 @@ initialize_data_dependence_relation (struct data_reference *a,\n \t\t\t\t     struct data_reference *b)\n {\n   struct data_dependence_relation *res;\n+  bool differ_p;\n   \n   res = ggc_alloc (sizeof (struct data_dependence_relation));\n   DDR_A (res) = a;\n@@ -545,7 +652,7 @@ initialize_data_dependence_relation (struct data_reference *a,\n   /* When the dimensions of A and B differ, we directly initialize\n      the relation to \"there is no dependence\": chrec_known.  */\n   else if (DR_NUM_DIMENSIONS (a) != DR_NUM_DIMENSIONS (b)\n-\t   || array_base_name_differ_p (a, b))\n+\t   || (array_base_name_differ_p (a, b, &differ_p) && differ_p))\n     DDR_ARE_DEPENDENT (res) = chrec_known;\n   \n   else\n@@ -1842,9 +1949,10 @@ analyze_all_data_dependences (struct loops *loops)\n \t    {\n \t      struct data_reference *a = DDR_A (ddr);\n \t      struct data_reference *b = DDR_B (ddr);\n+\t      bool differ_p;\t\n \t      \n \t      if (DR_NUM_DIMENSIONS (a) != DR_NUM_DIMENSIONS (b)\n-\t\t  || array_base_name_differ_p (a, b))\n+\t\t  || (array_base_name_differ_p (a, b, &differ_p) && differ_p))\n \t\tnb_basename_differ++;\n \t      else\n \t\tnb_bot_relations++;"}, {"sha": "bc069c1b7e06bd48e2f085e852768914e2e13f39", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -151,7 +151,7 @@ extern void analyze_all_data_dependences (struct loops *);\n extern void compute_data_dependences_for_loop (unsigned, struct loop *, \n \t\t\t\t\t       varray_type *, varray_type *, \n \t\t\t\t\t       varray_type *, varray_type *);\n-extern struct data_reference * init_data_ref (tree, tree, tree, tree);\n+extern struct data_reference * init_data_ref (tree, tree, tree, tree, bool);\n extern struct data_reference *analyze_array (tree, tree, bool);\n \n extern void dump_data_reference (FILE *, struct data_reference *);\n@@ -161,28 +161,9 @@ extern void dump_data_dependence_relation (FILE *,\n extern void dump_data_dependence_relations (FILE *, varray_type);\n extern void dump_data_dependence_direction (FILE *, \n \t\t\t\t\t    enum data_dependence_direction);\n+extern bool array_base_name_differ_p (struct data_reference *, \n+\t\t\t\t      struct data_reference *, bool *p);\n \n \f\n \n-/* Inline functions.  */\n-\n-/* This is the simplest data dependence test: determines whether the\n-   data references A and B access the same array.  */\n-\n-static inline bool\n-array_base_name_differ_p (struct data_reference *a, \n-\t\t\t  struct data_reference *b)\n-{\n-  if (DR_BASE_NAME (a) == DR_BASE_NAME (b))\n-    return false;\n-  \n-  if (TREE_CODE (DR_BASE_NAME (a)) == INDIRECT_REF\n-      && TREE_CODE (DR_BASE_NAME (b)) == INDIRECT_REF\n-      && TREE_OPERAND (DR_BASE_NAME (a), 0) \n-      == TREE_OPERAND (DR_BASE_NAME (b), 0))\n-    return false;\n-  \n-  return true;\n-}\n-\n #endif  /* GCC_TREE_DATA_REF_H  */"}, {"sha": "0e60e411e2813fd2d8a48588c152ae5ec68951ad", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -628,6 +628,12 @@ struct tree_niter_desc\n \t\t\t   the loop), then the information would be lost.  */\n };\n \n+/* In tree-vectorizer.c */\n+void vectorize_loops (struct loops *);\n+\n+/* In tree-ssa-phiopt.c */\n+bool empty_block_p (basic_block);\n+\n /* In tree-ssa-loop*.c  */\n \n void tree_ssa_lim (struct loops *);"}, {"sha": "0f37aaf0d842afd0ca9d648459c7683e2b85d518", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -367,6 +367,7 @@ init_tree_optimization_passes (void)\n   p = &pass_loop.sub;\n   NEXT_PASS (pass_loop_init);\n   NEXT_PASS (pass_lim);\n+  NEXT_PASS (pass_vectorize);\n   NEXT_PASS (pass_loop_done);\n   *p = NULL;\n "}, {"sha": "5302232e5ff83797adcede8ccb9feecc1bf56d15", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -109,6 +109,7 @@ extern struct tree_opt_pass pass_tail_calls;\n extern struct tree_opt_pass pass_loop;\n extern struct tree_opt_pass pass_loop_init;\n extern struct tree_opt_pass pass_lim;\n+extern struct tree_opt_pass pass_vectorize;\n extern struct tree_opt_pass pass_loop_done;\n extern struct tree_opt_pass pass_ch;\n extern struct tree_opt_pass pass_ccp;"}, {"sha": "99dbc71aefde94e8b2a2f73764176515a75af440", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -37,6 +37,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cfgloop.h\"\n #include \"flags.h\"\n #include \"tree-inline.h\"\n+#include \"tree-scalar-evolution.h\"\n \n /* The loop tree currently optimized.  */\n \n@@ -98,6 +99,9 @@ static void\n tree_ssa_loop_init (void)\n {\n   current_loops = tree_loop_optimizer_init (dump_file);\n+  if (!current_loops)\n+    return;\n+  scev_initialize (current_loops);\n }\n   \n struct tree_opt_pass pass_loop_init = \n@@ -149,6 +153,40 @@ struct tree_opt_pass pass_lim =\n   TODO_dump_func                \t/* todo_flags_finish */\n };\n \n+/* Loop autovectorization.  */\n+\n+static void\n+tree_vectorize (void)\n+{\n+  if (!current_loops)\n+    return;\n+\n+  bitmap_clear (vars_to_rename);\n+  vectorize_loops (current_loops);\n+}\n+\n+static bool\n+gate_tree_vectorize (void)\n+{\n+  return flag_tree_vectorize != 0;\n+}\n+\n+struct tree_opt_pass pass_vectorize =\n+{\n+  \"vect\",                               /* name */\n+  gate_tree_vectorize,                  /* gate */\n+  tree_vectorize,                       /* execute */\n+  NULL,                                 /* sub */\n+  NULL,                                 /* next */\n+  0,                                    /* static_pass_number */\n+  TV_TREE_VECTORIZATION,                /* tv_id */\n+  PROP_cfg | PROP_ssa,                  /* properties_required */\n+  0,                                    /* properties_provided */\n+  0,                                    /* properties_destroyed */\n+  0,                                    /* todo_flags_start */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+};\n+\n /* Loop optimizer finalization.  */\n \n static void\n@@ -157,6 +195,8 @@ tree_ssa_loop_done (void)\n   if (!current_loops)\n     return;\n \n+  scev_finalize ();\n+\n #ifdef ENABLE_CHECKING\n   verify_loop_closed_ssa ();\n #endif"}, {"sha": "220c391598e4ccc55e65b356ef759c2b3be5d7d4", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -45,7 +45,6 @@ static void replace_phi_with_stmt (block_stmt_iterator, basic_block,\n static bool candidate_bb_for_phi_optimization (basic_block,\n \t\t\t\t\t       basic_block *,\n \t\t\t\t\t       basic_block *);\n-static bool empty_block_p (basic_block);\n \n /* This pass eliminates PHI nodes which can be trivially implemented as\n    an assignment from a conditional expression.  ie if we have something\n@@ -147,7 +146,7 @@ tree_ssa_phiopt (void)\n \n /* Return TRUE if block BB has no executable statements, otherwise return\n    FALSE.  */\n-static bool\n+bool\n empty_block_p (basic_block bb)\n {\n   block_stmt_iterator bsi;"}, {"sha": "8369a6bf6b0798b84fcfe90e3c9f041fbd48a1a5", "filename": "gcc/tree-vectorizer.c", "status": "added", "additions": 3544, "deletions": 0, "changes": 3544, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=79fe1b3bd07343a1be36195a9053b582198a4123"}, {"sha": "4c280e9341520446880291aee1843d46287269db", "filename": "gcc/tree-vectorizer.h", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe1b3bd07343a1be36195a9053b582198a4123/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=79fe1b3bd07343a1be36195a9053b582198a4123", "patch": "@@ -0,0 +1,181 @@\n+/* Loop Vectorization\n+   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+   Contributed by Dorit Naishlos <dorit@il.ibm.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#ifndef GCC_TREE_VECTORIZER_H\n+#define GCC_TREE_VECTORIZER_H\n+\n+/* Used for naming of new temporaries.  */\n+enum vect_var_kind {\n+  vect_simple_var,\n+  vect_pointer_var\n+};\n+\n+/* Defines type of operation: unary or binary. */\n+enum operation_type {\n+  unary_op = 1,\n+  binary_op\n+};\n+\n+/*-----------------------------------------------------------------*/\n+/* Info on vectorized defs.                                        */\n+/*-----------------------------------------------------------------*/\n+enum stmt_vec_info_type {\n+  undef_vec_info_type = 0,\n+  load_vec_info_type,\n+  store_vec_info_type,\n+  op_vec_info_type,\n+  assignment_vec_info_type\n+};\n+\n+typedef struct _stmt_vec_info {\n+\n+  enum stmt_vec_info_type type;\n+\n+  /* The stmt to which this info struct refers to.  */\n+  tree stmt;\n+\n+  /* The loop with resprct to which STMT is vectorized.  */\n+  struct loop *loop;\n+\n+  /* Not all stmts in the loop need to be vectorized. e.g, the incrementation\n+     of the loop induction variable and computation of array indexes. relevant\n+     indicates whether the stmt needs to be vectorized.  */\n+  bool relevant;\n+\n+  /* The vector type to be used.  */\n+  tree vectype;\n+\n+  /* The vectorized version of the stmt.  */\n+  tree vectorized_stmt;\n+\n+\n+  /** The following is relevant only for stmts that contain a non-scalar\n+     data-ref (array/pointer/struct access). A GIMPLE stmt is expected to have \n+     at most one such data-ref.  **/\n+\n+  /* Information about the data-ref (access function, etc).  */\n+  struct data_reference *data_ref_info;\n+\n+  /* Aliasing information.  */\n+  tree memtag;\n+} *stmt_vec_info;\n+\n+/* Access Functions.  */\n+#define STMT_VINFO_TYPE(S)       (S)->type\n+#define STMT_VINFO_STMT(S)       (S)->stmt\n+#define STMT_VINFO_LOOP(S)       (S)->loop\n+#define STMT_VINFO_RELEVANT_P(S) (S)->relevant\n+#define STMT_VINFO_VECTYPE(S)    (S)->vectype\n+#define STMT_VINFO_VEC_STMT(S)   (S)->vectorized_stmt\n+#define STMT_VINFO_DATA_REF(S)   (S)->data_ref_info\n+#define STMT_VINFO_MEMTAG(S)     (S)->memtag\n+\n+static inline void set_stmt_info (stmt_ann_t ann, stmt_vec_info stmt_info);\n+static inline stmt_vec_info vinfo_for_stmt (tree stmt);\n+\n+static inline void\n+set_stmt_info (stmt_ann_t ann, stmt_vec_info stmt_info)\n+{\n+  if (ann)\n+    ann->common.aux = (char *) stmt_info;\n+}\n+\n+static inline stmt_vec_info\n+vinfo_for_stmt (tree stmt)\n+{\n+  stmt_ann_t ann = stmt_ann (stmt);\n+  return ann ? (stmt_vec_info) ann->common.aux : NULL;\n+}\n+\n+/*-----------------------------------------------------------------*/\n+/* Info on data references alignment.                              */\n+/*-----------------------------------------------------------------*/\n+\n+#define DR_MISALIGNMENT(DR)   (DR)->aux\n+\n+static inline bool\n+aligned_access_p (struct data_reference *data_ref_info)\n+{\n+  return (DR_MISALIGNMENT (data_ref_info) == 0);\n+}\n+\n+static inline bool\n+unknown_alignment_for_access_p (struct data_reference *data_ref_info)\n+{\n+  return (DR_MISALIGNMENT (data_ref_info) == -1);\n+}\n+\n+\n+/*-----------------------------------------------------------------*/\n+/* Info on vectorized loops.                                       */\n+/*-----------------------------------------------------------------*/\n+typedef struct _loop_vec_info {\n+\n+  /* The loop to which this info struct refers to.  */\n+  struct loop *loop;\n+\n+  /* The loop basic blocks.  */\n+  basic_block *bbs;\n+\n+  /* The loop exit_condition.  */\n+  tree exit_cond;\n+\n+  /* Number of iterations. -1 if unknown.  */\n+  HOST_WIDE_INT num_iters;\n+\n+  /* Is the loop vectorizable? */\n+  bool vectorizable;\n+\n+  /* Unrolling factor  */\n+  int vectorization_factor;\n+\n+  /* All data references in the loop that are being written to.  */\n+  varray_type data_ref_writes;\n+\n+  /* All data references in the loop that are being read from.  */\n+  varray_type data_ref_reads;\n+} *loop_vec_info;\n+\n+/* Access Functions.  */\n+#define LOOP_VINFO_LOOP(L)           (L)->loop\n+#define LOOP_VINFO_BBS(L)            (L)->bbs\n+#define LOOP_VINFO_EXIT_COND(L)      (L)->exit_cond\n+#define LOOP_VINFO_NITERS(L)         (L)->num_iters\n+#define LOOP_VINFO_VECTORIZABLE_P(L) (L)->vectorizable\n+#define LOOP_VINFO_VECT_FACTOR(L)    (L)->vectorization_factor\n+#define LOOP_VINFO_DATAREF_WRITES(L) (L)->data_ref_writes\n+#define LOOP_VINFO_DATAREF_READS(L)  (L)->data_ref_reads\n+\n+#define LOOP_VINFO_NITERS_KNOWN_P(L) ((L)->num_iters > 0)\n+\n+/*-----------------------------------------------------------------*/\n+/* Function prototypes.                                            */\n+/*-----------------------------------------------------------------*/\n+\n+/* Main driver.  */\n+extern void vectorize_loops (struct loops *);\n+\n+/* creation and deletion of loop and stmt info structs.  */\n+extern loop_vec_info new_loop_vec_info (struct loop *loop);\n+extern void destroy_loop_vec_info (loop_vec_info);\n+extern stmt_vec_info new_stmt_vec_info (tree stmt, struct loop *loop);\n+\n+#endif  /* GCC_TREE_VECTORIZER_H  */"}]}