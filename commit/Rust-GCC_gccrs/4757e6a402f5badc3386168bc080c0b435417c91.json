{"sha": "4757e6a402f5badc3386168bc080c0b435417c91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc1N2U2YTQwMmY1YmFkYzMzODYxNjhiYzA4MGMwYjQzNTQxN2M5MQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-02-05T00:29:03Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-02-05T00:29:03Z"}, "message": "(find_reloads_address_1, case POST_INC): Don't use\nADDR_TYPE here.\n\nFrom-SVN: r13608", "tree": {"sha": "988a8dd5e9a17c784e388086a48ff94033a55f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/988a8dd5e9a17c784e388086a48ff94033a55f1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4757e6a402f5badc3386168bc080c0b435417c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4757e6a402f5badc3386168bc080c0b435417c91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4757e6a402f5badc3386168bc080c0b435417c91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4757e6a402f5badc3386168bc080c0b435417c91/comments", "author": null, "committer": null, "parents": [{"sha": "ac684a206cf3b8708d77398bebe76fb63308e88c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac684a206cf3b8708d77398bebe76fb63308e88c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac684a206cf3b8708d77398bebe76fb63308e88c"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "a15e41211c7b983c8a03796f283e1487a221c353", "filename": "gcc/reload.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4757e6a402f5badc3386168bc080c0b435417c91/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4757e6a402f5badc3386168bc080c0b435417c91/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=4757e6a402f5badc3386168bc080c0b435417c91", "patch": "@@ -4855,9 +4855,12 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels)\n \t  if (reg_equiv_address[regno] != 0)\n \t    {\n \t      rtx tem = make_memloc (XEXP (x, 0), regno);\n-\t      /* First reload the memory location's address.  */\n+\t      /* First reload the memory location's address.\n+\t\t We can't use ADDR_TYPE (type) here, because we need to\n+\t\t write back the value after reading it, hence we actually\n+\t\t need two registers.  */\n \t      find_reloads_address (GET_MODE (tem), 0, XEXP (tem, 0),\n-\t\t\t\t    &XEXP (tem, 0), opnum, ADDR_TYPE (type),\n+\t\t\t\t    &XEXP (tem, 0), opnum, type,\n \t\t\t\t    ind_levels);\n \t      /* Put this inside a new increment-expression.  */\n \t      x = gen_rtx (GET_CODE (x), GET_MODE (x), tem);\n@@ -4924,9 +4927,12 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels)\n \t     Note that this is actually conservative:  it would be slightly\n \t     more efficient to use the value of SPILL_INDIRECT_LEVELS from\n \t     reload1.c here.  */\n+\t  /* We can't use ADDR_TYPE (type) here, because we need to\n+\t     write back the value after reading it, hence we actually\n+\t     need two registers.  */\n \t  find_reloads_address (GET_MODE (x), &XEXP (x, 0),\n \t\t\t\tXEXP (XEXP (x, 0), 0), &XEXP (XEXP (x, 0), 0),\n-\t\t\t\topnum, ADDR_TYPE (type), ind_levels);\n+\t\t\t\topnum, type, ind_levels);\n \n \t  reloadnum = push_reload (x, NULL_RTX, loc, NULL_PTR,\n \t\t\t\t   (context"}]}