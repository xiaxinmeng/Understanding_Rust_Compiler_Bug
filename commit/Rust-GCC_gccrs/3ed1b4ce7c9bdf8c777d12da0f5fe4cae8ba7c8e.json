{"sha": "3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "node_id": "C_kwDOANBUbNoAKDNlZDFiNGNlN2M5YmRmOGM3NzdkMTJkYTBmNWZlNGNhZThiYTdjOGU", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-09T12:54:21Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-09T12:58:08Z"}, "message": "sphinx: add missing trailing newline\n\nAll files are supposed to end with a newline, fix that.\n\nChangeLog:\n\n\t* doc/bsd.rst:\n\t  Add trailing newline.\n\t* doc/contrib.rst:\n\t  Add trailing newline.\n\t* doc/contribute.rst:\n\t  Add trailing newline.\n\t* doc/cppdiropts.rst:\n\t  Add trailing newline.\n\t* doc/cppenv.rst:\n\t  Add trailing newline.\n\t* doc/cppopts.rst:\n\t  Add trailing newline.\n\t* doc/cppwarnopts.rst:\n\t  Add trailing newline.\n\t* doc/funding.rst:\n\t  Add trailing newline.\n\t* doc/gnu.rst:\n\t  Add trailing newline.\n\t* doc/gnu_free_documentation_license.rst:\n\t  Add trailing newline.\n\t* doc/gpl-3.0.rst:\n\t  Add trailing newline.\n\t* doc/indices-and-tables.rst:\n\t  Add trailing newline.\n\t* doc/lgpl-2.1.rst:\n\t  Add trailing newline.\n\t* doc/md.rst:\n\t  Add trailing newline.\n\ngcc/d/ChangeLog:\n\n\t* doc/copyright.rst:\n\t  Add trailing newline.\n\t* doc/general-public-license-3.rst:\n\t  Add trailing newline.\n\t* doc/gnu-free-documentation-license.rst:\n\t  Add trailing newline.\n\t* doc/index.rst:\n\t  Add trailing newline.\n\t* doc/indices-and-tables.rst:\n\t  Add trailing newline.\n\t* doc/invoking-gdc.rst:\n\t  Add trailing newline.\n\t* doc/invoking-gdc/code-generation.rst:\n\t  Add trailing newline.\n\t* doc/invoking-gdc/developer-options.rst:\n\t  Add trailing newline.\n\t* doc/invoking-gdc/input-and-output-files.rst:\n\t  Add trailing newline.\n\t* doc/invoking-gdc/options-for-directory-search.rst:\n\t  Add trailing newline.\n\t* doc/invoking-gdc/options-for-linking.rst:\n\t  Add trailing newline.\n\t* doc/invoking-gdc/runtime-options.rst:\n\t  Add trailing newline.\n\t* doc/invoking-gdc/warnings.rst:\n\t  Add trailing newline.\n\ngcc/ChangeLog:\n\n\t* doc/cpp/character-sets.rst:\n\t  Add trailing newline.\n\t* doc/cpp/conditional-syntax.rst:\n\t  Add trailing newline.\n\t* doc/cpp/conditional-uses.rst:\n\t  Add trailing newline.\n\t* doc/cpp/conditionals.rst:\n\t  Add trailing newline.\n\t* doc/cpp/copyright.rst:\n\t  Add trailing newline.\n\t* doc/cpp/deleted-code.rst:\n\t  Add trailing newline.\n\t* doc/cpp/diagnostics.rst:\n\t  Add trailing newline.\n\t* doc/cpp/environment-variables.rst:\n\t  Add trailing newline.\n\t* doc/cpp/gnu-free-documentation-license.rst:\n\t  Add trailing newline.\n\t* doc/cpp/header-files.rst:\n\t  Add trailing newline.\n\t* doc/cpp/header-files/alternatives-to-wrapper-ifndef.rst:\n\t  Add trailing newline.\n\t* doc/cpp/header-files/computed-includes.rst:\n\t  Add trailing newline.\n\t* doc/cpp/header-files/include-operation.rst:\n\t  Add trailing newline.\n\t* doc/cpp/header-files/include-syntax.rst:\n\t  Add trailing newline.\n\t* doc/cpp/header-files/once-only-headers.rst:\n\t  Add trailing newline.\n\t* doc/cpp/header-files/search-path.rst:\n\t  Add trailing newline.\n\t* doc/cpp/header-files/system-headers.rst:\n\t  Add trailing newline.\n\t* doc/cpp/header-files/wrapper-headers.rst:\n\t  Add trailing newline.\n\t* doc/cpp/implementation-defined-behavior.rst:\n\t  Add trailing newline.\n\t* doc/cpp/implementation-details.rst:\n\t  Add trailing newline.\n\t* doc/cpp/implementation-limits.rst:\n\t  Add trailing newline.\n\t* doc/cpp/index.rst:\n\t  Add trailing newline.\n\t* doc/cpp/indices-and-tables.rst:\n\t  Add trailing newline.\n\t* doc/cpp/initial-processing.rst:\n\t  Add trailing newline.\n\t* doc/cpp/invocation.rst:\n\t  Add trailing newline.\n\t* doc/cpp/line-control.rst:\n\t  Add trailing newline.\n\t* doc/cpp/macros.rst:\n\t  Add trailing newline.\n\t* doc/cpp/macros/concatenation.rst:\n\t  Add trailing newline.\n\t* doc/cpp/macros/directives-within-macro-arguments.rst:\n\t  Add trailing newline.\n\t* doc/cpp/macros/function-like-macros.rst:\n\t  Add trailing newline.\n\t* doc/cpp/macros/macro-arguments.rst:\n\t  Add trailing newline.\n\t* doc/cpp/macros/macro-pitfalls.rst:\n\t  Add trailing newline.\n\t* doc/cpp/macros/object-like-macros.rst:\n\t  Add trailing newline.\n\t* doc/cpp/macros/predefined-macros.rst:\n\t  Add trailing newline.\n\t* doc/cpp/macros/stringizing.rst:\n\t  Add trailing newline.\n\t* doc/cpp/macros/undefining-and-redefining-macros.rst:\n\t  Add trailing newline.\n\t* doc/cpp/macros/variadic-macros.rst:\n\t  Add trailing newline.\n\t* doc/cpp/obsolete-features.rst:\n\t  Add trailing newline.\n\t* doc/cpp/other-directives.rst:\n\t  Add trailing newline.\n\t* doc/cpp/overview.rst:\n\t  Add trailing newline.\n\t* doc/cpp/pragmas.rst:\n\t  Add trailing newline.\n\t* doc/cpp/preprocessor-output.rst:\n\t  Add trailing newline.\n\t* doc/cpp/the-preprocessing-language.rst:\n\t  Add trailing newline.\n\t* doc/cpp/tokenization.rst:\n\t  Add trailing newline.\n\t* doc/cpp/traditional-lexical-analysis.rst:\n\t  Add trailing newline.\n\t* doc/cpp/traditional-macros.rst:\n\t  Add trailing newline.\n\t* doc/cpp/traditional-miscellany.rst:\n\t  Add trailing newline.\n\t* doc/cpp/traditional-mode.rst:\n\t  Add trailing newline.\n\t* doc/cpp/traditional-warnings.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/copyright.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/cppinternals.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/cpplib.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/files.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/index.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/indices-and-tables.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/internal-representation-of-macros.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/just-which-line-number-anyway.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/lexing-a-line.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/lexing-a-token.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/looking-for-a-function-like-macros-opening-parenthesis.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/macro-expansion-overview.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/marking-tokens-ineligible-for-future-expansion.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/multiple-include-optimization.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/overview.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/representation-of-line-numbers.rst:\n\t  Add trailing newline.\n\t* doc/cppinternals/scanning-the-replacement-list-for-macros-to-expand.rst:\n\t  Add trailing newline.\n\t* doc/gcc/binary-compatibility.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c++-implementation-defined-behavior.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/architecture.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/arrays-and-pointers.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/characters.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/declarators.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/environment.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/floating-point.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/hints.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/identifiers.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/integers.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/library-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/locale-specific-behavior.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/preprocessing-directives.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/qualifiers.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/statements.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/structures-unions-enumerations-and-bit-fields.rst:\n\t  Add trailing newline.\n\t* doc/gcc/c-implementation-defined-behavior/translation.rst:\n\t  Add trailing newline.\n\t* doc/gcc/conditionally-supported-behavior.rst:\n\t  Add trailing newline.\n\t* doc/gcc/contributing-to-gcc-development.rst:\n\t  Add trailing newline.\n\t* doc/gcc/contributors-to-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gcc/copyright.rst:\n\t  Add trailing newline.\n\t* doc/gcc/exception-handling.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/backwards-compatibility.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/c++-concepts.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/c++-interface-and-implementation-pragmas.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/c++-specific-variable-function-and-type-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/deprecated-features.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/extracting-the-function-pointer-from-a-bound-pointer-to-member-function.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/function-multiversioning.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/restricting-pointer-aliasing.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/type-traits.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/vague-linkage.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/when-is-a-volatile-c++-object-accessed.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c++-language/wheres-the-template.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/128-bit-integers.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/additional-floating-types.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/alternate-keywords.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/an-inline-function-is-as-fast-as-a-macro.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/arithmetic-on-void-and-function-pointers.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/arrays-of-length-zero.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/arrays-of-variable-length.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/attribute-syntax.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/binary-constants-using-the-0b-prefix.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/built-in-functions-for-memory-model-aware-atomic-operations.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/built-in-functions-to-perform-arithmetic-with-overflow-checking.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/c++-style-comments.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/case-ranges.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/cast-to-a-union-type.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/complex-numbers.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/compound-literals.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/conditionals-with-omitted-operands.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/constructing-function-calls.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/decimal-floating-types.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/aarch64-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/amd-gcn-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/arc-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/arm-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/avr-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/blackfin-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/bpf-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/c-sky-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/common-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/epiphany-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/h8-300-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/ia-64-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/m32c-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/m32r-d-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/m68k-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/mcore-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/mep-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/microblaze-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/microsoft-windows-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/mips-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/msp430-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/nds32-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/nios-ii-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/nvidia-ptx-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/powerpc-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/risc-v-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/rl78-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/rx-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/s-390-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/sh-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/symbian-os-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/v850-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/visium-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/x86-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/xstormy16-function-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/designated-initializers.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/determining-the-alignment-of-functions-types-or-variables.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/dollar-signs-in-identifier-names.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/double-word-integers.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/enumerator-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/fixed-point-types.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/format-checks-specific-to-particular-target-machines.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/function-names-as-strings.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/getting-the-return-or-frame-address-of-a-function.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/half-precision-floating-point.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/hex-floats.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/how-to-use-inline-assembly-language-in-c-code.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/incomplete-enum-types.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/label-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/labels-as-values.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/legacy-sync-built-in-functions-for-atomic-memory-access.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/locally-declared-labels.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/macros-with-a-variable-number-of-arguments.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/mixed-declarations-labels-and-code.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/named-address-spaces.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/nested-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/non-constant-initializers.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/non-lvalue-arrays-may-have-subscripts.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/nonlocal-gotos.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/object-size-checking-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/other-built-in-functions-provided-by-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/pointer-arguments-in-variadic-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/pointers-to-arrays-with-qualifiers-work-as-expected.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/pragmas-accepted-by-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/prototypes-and-old-style-function-definitions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/referring-to-a-type-with-typeof.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/slightly-looser-rules-for-escaped-newlines.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/specifying-attributes-of-types.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/specifying-attributes-of-variables.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/statement-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/statements-and-declarations-in-expressions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/structures-with-no-members.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/support-for-offsetof.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/aarch64-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/alpha-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/altera-nios-ii-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/arc-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/arc-simd-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-armv8-m-security-extensions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-c-language-extensions-acle.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-floating-point-status-and-control-intrinsics.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-iwmmxt-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/avr-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/basic-powerpc-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/blackfin-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/bpf-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/fr-v-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-dsp-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-loongson-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-paired-single-support.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-simd-architecture-msa-support.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/msp430-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/nds32-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/other-mips-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/picochip-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-altivec-vsx-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-atomic-memory-operation-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-hardware-transactional-memory-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-matrix-multiply-assist-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/pru-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/risc-v-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/rx-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/s-390-system-z-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/sh-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/sparc-vis-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/ti-c6x-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/x86-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/x86-control-flow-protection-intrinsics.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/target-builtins/x86-transactional-memory-intrinsics.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/the-character-esc-in-constants.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/thread-local-storage.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/unnamed-structure-and-union-fields.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/using-vector-instructions-through-built-in-functions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/when-is-a-volatile-object-accessed.rst:\n\t  Add trailing newline.\n\t* doc/gcc/extensions-to-the-c-language-family/x86-specific-memory-model-extensions-for-transactional-memory.rst:\n\t  Add trailing newline.\n\t* doc/gcc/funding.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/compiling-c++-programs.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/description.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/environment-variables-affecting-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/gcc-developer-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/aarch64-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/adapteva-epiphany-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/amd-gcn-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/arc-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/arm-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/avr-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/blackfin-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/c-sky-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/c6x-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/cris-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/darwin-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/dec-alpha-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/ebpf-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/fr30-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/frv-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/ft32-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/gnu-linux-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/h8-300-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/hppa-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/ia-64-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/ibm-rs-6000-and-powerpc-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/lm32-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/loongarch-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/m32c-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/m32r-d-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/m680x0-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/mcore-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/mep-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/microblaze-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/mips-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/mmix-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/mn10300-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/moxie-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/msp430-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/nds32-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/nios-ii-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/nvidia-ptx-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/openrisc-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/options-for-system-v.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/pdp-11-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/picochip-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/powerpc-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/pru-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/risc-v-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/rl78-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/rx-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/s-390-and-zseries-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/score-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/sh-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/solaris-2-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/sparc-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/v850-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/vax-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/visium-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/vms-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/vxworks-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/x86-windows-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/xstormy16-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/xtensa-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/zseries-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-controlling-c++-dialect.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-controlling-c-dialect.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-controlling-objective-c-and-objective-c++-dialects.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-controlling-the-kind-of-output.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-controlling-the-preprocessor.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-for-code-generation-conventions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-for-debugging-your-program.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-for-directory-search.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-for-linking.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-that-control-optimization.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-that-control-static-analysis.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-to-control-diagnostic-messages-formatting.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/options-to-request-or-suppress-warnings.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/passing-options-to-the-assembler.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/program-instrumentation-options.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/specifying-subprocesses-and-the-switches-to-pass-to-them.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc-command-options/using-precompiled-headers.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcc.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcov-dump.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcov-tool.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcov.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcov/brief-description-of-gcov-data-files.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcov/data-file-relocation-to-support-cross-profiling.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcov/introduction-to-gcov.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcov/invoking-gcov.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcov/profiling-and-test-coverage-in-freestanding-environments.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gcov/using-gcov-with-gcc-optimization.rst:\n\t  Add trailing newline.\n\t* doc/gcc/general-public-license-3.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-free-documentation-license.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-objective-c-features.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-objective-c-features/compatibilityalias.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-objective-c-features/constant-string-objects.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-objective-c-features/exceptions.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-objective-c-features/fast-enumeration.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-objective-c-features/garbage-collection.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-objective-c-features/gnu-objective-c-runtime-api.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-objective-c-features/load-executing-code-before-main.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-objective-c-features/messaging-with-the-gnu-objective-c-runtime.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-objective-c-features/synchronization.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu-objective-c-features/type-encoding.rst:\n\t  Add trailing newline.\n\t* doc/gcc/gnu.rst:\n\t  Add trailing newline.\n\t* doc/gcc/have-you-found-a-bug.rst:\n\t  Add trailing newline.\n\t* doc/gcc/how-and-where-to-report-bugs.rst:\n\t  Add trailing newline.\n\t* doc/gcc/how-to-get-help-with-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gcc/index.rst:\n\t  Add trailing newline.\n\t* doc/gcc/indices-and-tables.rst:\n\t  Add trailing newline.\n\t* doc/gcc/known-causes-of-trouble-with-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gcc/known-causes-of-trouble-with-gcc/actual-bugs-we-havent-fixed-yet.rst:\n\t  Add trailing newline.\n\t* doc/gcc/known-causes-of-trouble-with-gcc/certain-changes-we-dont-want-to-make.rst:\n\t  Add trailing newline.\n\t* doc/gcc/known-causes-of-trouble-with-gcc/common-misunderstandings-with-gnu-c.rst:\n\t  Add trailing newline.\n\t* doc/gcc/known-causes-of-trouble-with-gcc/disappointments-and-misunderstandings.rst:\n\t  Add trailing newline.\n\t* doc/gcc/known-causes-of-trouble-with-gcc/fixed-header-files.rst:\n\t  Add trailing newline.\n\t* doc/gcc/known-causes-of-trouble-with-gcc/incompatibilities-of-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gcc/known-causes-of-trouble-with-gcc/interoperation.rst:\n\t  Add trailing newline.\n\t* doc/gcc/known-causes-of-trouble-with-gcc/standard-libraries.rst:\n\t  Add trailing newline.\n\t* doc/gcc/known-causes-of-trouble-with-gcc/warning-messages-and-error-messages.rst:\n\t  Add trailing newline.\n\t* doc/gcc/language-standards-supported-by-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gcc/language-standards-supported-by-gcc/c++-language.rst:\n\t  Add trailing newline.\n\t* doc/gcc/language-standards-supported-by-gcc/c-language.rst:\n\t  Add trailing newline.\n\t* doc/gcc/language-standards-supported-by-gcc/d-language.rst:\n\t  Add trailing newline.\n\t* doc/gcc/language-standards-supported-by-gcc/go-language.rst:\n\t  Add trailing newline.\n\t* doc/gcc/language-standards-supported-by-gcc/objective-c-and-objective-c++-languages.rst:\n\t  Add trailing newline.\n\t* doc/gcc/lto-dump.rst:\n\t  Add trailing newline.\n\t* doc/gcc/programming-languages-supported-by-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gcc/reporting-bugs.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-optimization-of-gimple-tuples.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-optimization-of-gimple-tuples/alias-analysis.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-optimization-of-gimple-tuples/annotations.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-optimization-of-gimple-tuples/memory-model.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-optimization-of-gimple-tuples/ssa-operands.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-optimization-of-gimple-tuples/static-single-assignment.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-representation-of-loops.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-representation-of-loops/data-dependency-analysis.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-representation-of-loops/iv-analysis-on-rtl.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-representation-of-loops/loop-closed-ssa-form.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-representation-of-loops/loop-manipulation.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-representation-of-loops/loop-querying.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-representation-of-loops/loop-representation.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-representation-of-loops/number-of-iterations-analysis.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analysis-and-representation-of-loops/scalar-evolutions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/analyzer-internals.rst:\n\t  Add trailing newline.\n\t* doc/gccint/collect2.rst:\n\t  Add trailing newline.\n\t* doc/gccint/contributing-to-gcc-development.rst:\n\t  Add trailing newline.\n\t* doc/gccint/contributors-to-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gccint/control-flow-graph.rst:\n\t  Add trailing newline.\n\t* doc/gccint/control-flow-graph/basic-blocks.rst:\n\t  Add trailing newline.\n\t* doc/gccint/control-flow-graph/edges.rst:\n\t  Add trailing newline.\n\t* doc/gccint/control-flow-graph/liveness-information.rst:\n\t  Add trailing newline.\n\t* doc/gccint/control-flow-graph/maintaining-the-cfg.rst:\n\t  Add trailing newline.\n\t* doc/gccint/control-flow-graph/profile-information.rst:\n\t  Add trailing newline.\n\t* doc/gccint/copyright.rst:\n\t  Add trailing newline.\n\t* doc/gccint/debugging-the-analyzer.rst:\n\t  Add trailing newline.\n\t* doc/gccint/funding.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gcc-and-portability.rst:\n\t  Add trailing newline.\n\t* doc/gccint/general-public-license-3.rst:\n\t  Add trailing newline.\n\t* doc/gccint/generic.rst:\n\t  Add trailing newline.\n\t* doc/gccint/generic/attributes-in-trees.rst:\n\t  Add trailing newline.\n\t* doc/gccint/generic/c-and-c++-trees.rst:\n\t  Add trailing newline.\n\t* doc/gccint/generic/declarations.rst:\n\t  Add trailing newline.\n\t* doc/gccint/generic/deficiencies.rst:\n\t  Add trailing newline.\n\t* doc/gccint/generic/expressions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/generic/functions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/generic/language-dependent-trees.rst:\n\t  Add trailing newline.\n\t* doc/gccint/generic/overview.rst:\n\t  Add trailing newline.\n\t* doc/gccint/generic/statements.rst:\n\t  Add trailing newline.\n\t* doc/gccint/generic/types.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple-api.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/adding-a-new-gimple-statement-code.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/class-hierarchy-of-gimple-statements.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/exception-handling.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/gimple-instruction-set.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/gimple-sequences.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/manipulating-gimple-statements.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/operands.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/sequence-iterators.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/statement-and-operand-traversals.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/temporaries.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-representation.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleasm.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleassign.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimplebind.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimplecall.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimplecatch.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimplecond.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpledebug.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleehfilter.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimplegoto.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimplelabel.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimplenop.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompatomicload.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompatomicstore.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompcontinue.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompcritical.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompfor.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompmaster.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompordered.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompparallel.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompreturn.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompsection.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompsections.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleompsingle.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimplephi.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleresx.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimplereturn.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpleswitch.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimpletry.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gimple/tuple-specific-accessors/gimplewithcleanupexpr.rst:\n\t  Add trailing newline.\n\t* doc/gccint/gnu-free-documentation-license.rst:\n\t  Add trailing newline.\n\t* doc/gccint/guidelines-for-diagnostics.rst:\n\t  Add trailing newline.\n\t* doc/gccint/guidelines-for-options.rst:\n\t  Add trailing newline.\n\t* doc/gccint/host-common.rst:\n\t  Add trailing newline.\n\t* doc/gccint/host-configuration.rst:\n\t  Add trailing newline.\n\t* doc/gccint/host-filesystem.rst:\n\t  Add trailing newline.\n\t* doc/gccint/host-makefile-fragments.rst:\n\t  Add trailing newline.\n\t* doc/gccint/host-misc.rst:\n\t  Add trailing newline.\n\t* doc/gccint/index.rst:\n\t  Add trailing newline.\n\t* doc/gccint/indices-and-tables.rst:\n\t  Add trailing newline.\n\t* doc/gccint/interfacing-to-gcc-output.rst:\n\t  Add trailing newline.\n\t* doc/gccint/introduction.rst:\n\t  Add trailing newline.\n\t* doc/gccint/language-front-ends-in-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gccint/link-time-optimization.rst:\n\t  Add trailing newline.\n\t* doc/gccint/link-time-optimization/design-overview.rst:\n\t  Add trailing newline.\n\t* doc/gccint/link-time-optimization/internal-flags-controlling-lto1.rst:\n\t  Add trailing newline.\n\t* doc/gccint/link-time-optimization/lto-file-sections.rst:\n\t  Add trailing newline.\n\t* doc/gccint/link-time-optimization/using-summary-information-in-ipa-passes.rst:\n\t  Add trailing newline.\n\t* doc/gccint/link-time-optimization/whole-program-assumptions-linker-plugin-and-symbol-visibilities.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/c-statements-for-assembler-output.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/canonicalization-of-instructions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/conditional-execution.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/constant-definitions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/defining-how-to-split-instructions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/defining-jump-instruction-patterns.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/defining-looping-instruction-patterns.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/defining-rtl-sequences-for-code-generation.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/everything-about-instruction-patterns.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/example-of-defineinsn.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/including-patterns-in-machine-descriptions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/instruction-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/interdependence-of-patterns.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/iterators.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/machine-specific-peephole-optimizers.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/operand-constraints.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/output-templates-and-operand-substitution.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/overview-of-how-the-machine-description-is-used.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/predicates.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/rtl-template.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/rtl-templates-transformations.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/standard-pattern-names-for-generation.rst:\n\t  Add trailing newline.\n\t* doc/gccint/machine-descriptions/when-the-order-of-patterns-matters.rst:\n\t  Add trailing newline.\n\t* doc/gccint/makefile-fragments.rst:\n\t  Add trailing newline.\n\t* doc/gccint/match-and-simplify.rst:\n\t  Add trailing newline.\n\t* doc/gccint/memory-management-and-type-information.rst:\n\t  Add trailing newline.\n\t* doc/gccint/memory-management-and-type-information/how-to-invoke-the-garbage-collector.rst:\n\t  Add trailing newline.\n\t* doc/gccint/memory-management-and-type-information/marking-roots-for-the-garbage-collector.rst:\n\t  Add trailing newline.\n\t* doc/gccint/memory-management-and-type-information/source-files-containing-type-information.rst:\n\t  Add trailing newline.\n\t* doc/gccint/memory-management-and-type-information/support-for-inheritance.rst:\n\t  Add trailing newline.\n\t* doc/gccint/memory-management-and-type-information/support-for-user-provided-gc-marking-routines.rst:\n\t  Add trailing newline.\n\t* doc/gccint/memory-management-and-type-information/the-inside-of-a-gty.rst:\n\t  Add trailing newline.\n\t* doc/gccint/memory-management-and-type-information/troubleshooting-the-garbage-collector.rst:\n\t  Add trailing newline.\n\t* doc/gccint/option-file-format.rst:\n\t  Add trailing newline.\n\t* doc/gccint/option-properties.rst:\n\t  Add trailing newline.\n\t* doc/gccint/option-specification-files.rst:\n\t  Add trailing newline.\n\t* doc/gccint/passes-and-files-of-the-compiler.rst:\n\t  Add trailing newline.\n\t* doc/gccint/passes-and-files-of-the-compiler/gimplification-pass.rst:\n\t  Add trailing newline.\n\t* doc/gccint/passes-and-files-of-the-compiler/inter-procedural-optimization-passes.rst:\n\t  Add trailing newline.\n\t* doc/gccint/passes-and-files-of-the-compiler/optimization-info.rst:\n\t  Add trailing newline.\n\t* doc/gccint/passes-and-files-of-the-compiler/parsing-pass.rst:\n\t  Add trailing newline.\n\t* doc/gccint/passes-and-files-of-the-compiler/pass-manager.rst:\n\t  Add trailing newline.\n\t* doc/gccint/passes-and-files-of-the-compiler/rtl-passes.rst:\n\t  Add trailing newline.\n\t* doc/gccint/passes-and-files-of-the-compiler/tree-ssa-passes.rst:\n\t  Add trailing newline.\n\t* doc/gccint/plugins.rst:\n\t  Add trailing newline.\n\t* doc/gccint/plugins/building-gcc-plugins.rst:\n\t  Add trailing newline.\n\t* doc/gccint/plugins/controlling-which-passes-are-being-run.rst:\n\t  Add trailing newline.\n\t* doc/gccint/plugins/giving-information-about-a-plugin.rst:\n\t  Add trailing newline.\n\t* doc/gccint/plugins/interacting-with-the-gcc-garbage-collector.rst:\n\t  Add trailing newline.\n\t* doc/gccint/plugins/interacting-with-the-pass-manager.rst:\n\t  Add trailing newline.\n\t* doc/gccint/plugins/keeping-track-of-available-passes.rst:\n\t  Add trailing newline.\n\t* doc/gccint/plugins/loading-plugins.rst:\n\t  Add trailing newline.\n\t* doc/gccint/plugins/plugin-api.rst:\n\t  Add trailing newline.\n\t* doc/gccint/plugins/recording-information-about-pass-execution.rst:\n\t  Add trailing newline.\n\t* doc/gccint/plugins/registering-custom-attributes-or-pragmas.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/access-to-operands.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/access-to-special-operands.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/assembler-instructions-as-expressions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/bit-fields.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/comparison-operations.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/constant-expression-types.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/conversions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/declarations.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/embedded-side-effects-on-addresses.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/flags-in-an-rtl-expression.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/insns.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/machine-modes.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/on-the-side-ssa-form-for-rtl.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/reading-rtl.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/registers-and-memory.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/rtl-classes-and-formats.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/rtl-expressions-for-arithmetic.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/rtl-object-types.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/rtl-representation-of-function-call-insns.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/side-effect-expressions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/structure-sharing-assumptions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/variable-location-debug-information-in-rtl.rst:\n\t  Add trailing newline.\n\t* doc/gccint/rtl-representation/vector-operations.rst:\n\t  Add trailing newline.\n\t* doc/gccint/sizes-and-offsets-as-runtime-invariants.rst:\n\t  Add trailing newline.\n\t* doc/gccint/sizes-and-offsets-as-runtime-invariants/alignment-of-polyints.rst:\n\t  Add trailing newline.\n\t* doc/gccint/sizes-and-offsets-as-runtime-invariants/arithmetic-on-polyints.rst:\n\t  Add trailing newline.\n\t* doc/gccint/sizes-and-offsets-as-runtime-invariants/comparisons-involving-polyint.rst:\n\t  Add trailing newline.\n\t* doc/gccint/sizes-and-offsets-as-runtime-invariants/computing-bounds-on-polyints.rst:\n\t  Add trailing newline.\n\t* doc/gccint/sizes-and-offsets-as-runtime-invariants/consequences-of-using-polyint.rst:\n\t  Add trailing newline.\n\t* doc/gccint/sizes-and-offsets-as-runtime-invariants/converting-polyints.rst:\n\t  Add trailing newline.\n\t* doc/gccint/sizes-and-offsets-as-runtime-invariants/guidelines-for-using-polyint.rst:\n\t  Add trailing newline.\n\t* doc/gccint/sizes-and-offsets-as-runtime-invariants/miscellaneous-polyint-routines.rst:\n\t  Add trailing newline.\n\t* doc/gccint/sizes-and-offsets-as-runtime-invariants/overview-of-polyint.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system/configure-terms-and-history.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system/the-gcc-subdirectory.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system/the-gcc-subdirectory/anatomy-of-a-language-front-end.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system/the-gcc-subdirectory/anatomy-of-a-target-back-end.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system/the-gcc-subdirectory/build-system-in-the-gcc-directory.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system/the-gcc-subdirectory/configuration-in-the-gcc-directory.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system/the-gcc-subdirectory/headers-installed-by-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system/the-gcc-subdirectory/library-source-files-and-headers-under-the-gcc-directory.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system/the-gcc-subdirectory/makefile-targets.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system/the-gcc-subdirectory/subdirectories-of-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gccint/source-tree-structure-and-build-system/top-level-source-directory.rst:\n\t  Add trailing newline.\n\t* doc/gccint/standard-header-file-directories.rst:\n\t  Add trailing newline.\n\t* doc/gccint/static-analyzer.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/controlling-debugging-information-format.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/controlling-the-compilation-driver-gcc.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/cross-compilation-and-floating-point.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/defining-coprocessor-specifics-for-mips-targets.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/defining-data-structures-for-per-function-information.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/defining-the-output-assembler-language.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/defining-the-output-assembler-language/assembler-commands-for-alignment.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/defining-the-output-assembler-language/how-initialization-functions-are-handled.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/defining-the-output-assembler-language/macros-controlling-initialization-routines.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/defining-the-output-assembler-language/output-and-generation-of-labels.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/defining-the-output-assembler-language/output-of-assembler-instructions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/defining-the-output-assembler-language/output-of-data.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/defining-the-output-assembler-language/output-of-uninitialized-variables.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/implicit-calls-to-library-routines.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/layout-of-source-language-data-types.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/position-independent-code.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/register-usage.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/stack-layout-and-calling-conventions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/stack-layout-and-calling-conventions/basic-stack-layout.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/stack-layout-and-calling-conventions/caller-saves-register-allocation.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/stack-layout-and-calling-conventions/exception-handling-support.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/stack-layout-and-calling-conventions/passing-function-arguments-on-the-stack.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/stack-layout-and-calling-conventions/registers-that-address-the-stack-frame.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/support-for-nested-functions.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-macros/the-global-targetm-variable.rst:\n\t  Add trailing newline.\n\t* doc/gccint/target-makefile-fragments.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/ada-language-testsuites.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/c-language-testsuites.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/directives-used-within-dejagnu-tests.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/directives-used-within-dejagnu-tests/commands-for-use-in-dg-final.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/directives-used-within-dejagnu-tests/features-for-dg-add-options.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/directives-used-within-dejagnu-tests/keywords-describing-target-attributes.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/directives-used-within-dejagnu-tests/selecting-targets-to-which-a-test-applies.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/directives-used-within-dejagnu-tests/syntax-and-descriptions-of-test-directives.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/directives-used-within-dejagnu-tests/variants-of-dg-require-support.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/idioms-used-in-testsuite-code.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/support-for-testing-binary-compatibility.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/support-for-testing-gcov.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/support-for-testing-gimple-passes.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/support-for-testing-link-time-optimizations.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/support-for-testing-profile-directed-optimizations.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/support-for-testing-rtl-passes.rst:\n\t  Add trailing newline.\n\t* doc/gccint/testsuites/support-for-torture-testing-using-multiple-options.rst:\n\t  Add trailing newline.\n\t* doc/gccint/the-gcc-low-level-runtime-library.rst:\n\t  Add trailing newline.\n\t* doc/gccint/the-gcc-low-level-runtime-library/language-independent-routines-for-exception-handling.rst:\n\t  Add trailing newline.\n\t* doc/gccint/the-gcc-low-level-runtime-library/miscellaneous-runtime-library-routines.rst:\n\t  Add trailing newline.\n\t* doc/gccint/the-gcc-low-level-runtime-library/routines-for-decimal-floating-point-emulation.rst:\n\t  Add trailing newline.\n\t* doc/gccint/the-gcc-low-level-runtime-library/routines-for-fixed-point-fractional-emulation.rst:\n\t  Add trailing newline.\n\t* doc/gccint/the-gcc-low-level-runtime-library/routines-for-floating-point-emulation.rst:\n\t  Add trailing newline.\n\t* doc/gccint/the-gcc-low-level-runtime-library/routines-for-integer-arithmetic.rst:\n\t  Add trailing newline.\n\t* doc/gccint/the-language.rst:\n\t  Add trailing newline.\n\t* doc/gccint/user-experience-guidelines.rst:\n\t  Add trailing newline.\n\t* doc/install/binaries.rst:\n\t  Add trailing newline.\n\t* doc/install/building.rst:\n\t  Add trailing newline.\n\t* doc/install/building/building-a-cross-compiler.rst:\n\t  Add trailing newline.\n\t* doc/install/building/building-a-native-compiler.rst:\n\t  Add trailing newline.\n\t* doc/install/building/building-in-parallel.rst:\n\t  Add trailing newline.\n\t* doc/install/building/building-the-ada-compiler.rst:\n\t  Add trailing newline.\n\t* doc/install/building/building-the-d-compiler.rst:\n\t  Add trailing newline.\n\t* doc/install/building/building-with-profile-feedback.rst:\n\t  Add trailing newline.\n\t* doc/install/configuration.rst:\n\t  Add trailing newline.\n\t* doc/install/copyright.rst:\n\t  Add trailing newline.\n\t* doc/install/downloading-gcc.rst:\n\t  Add trailing newline.\n\t* doc/install/final-installation.rst:\n\t  Add trailing newline.\n\t* doc/install/gnu-free-documentation-license.rst:\n\t  Add trailing newline.\n\t* doc/install/host-target-specific-installation-notes-for-gcc.rst:\n\t  Add trailing newline.\n\t* doc/install/how-can-you-run-the-testsuite-on-selected-tests.rst:\n\t  Add trailing newline.\n\t* doc/install/how-to-interpret-test-results.rst:\n\t  Add trailing newline.\n\t* doc/install/index.rst:\n\t  Add trailing newline.\n\t* doc/install/indices-and-tables.rst:\n\t  Add trailing newline.\n\t* doc/install/installing-gcc.rst:\n\t  Add trailing newline.\n\t* doc/install/passing-options-and-running-multiple-testsuites.rst:\n\t  Add trailing newline.\n\t* doc/install/prerequisites.rst:\n\t  Add trailing newline.\n\t* doc/install/submitting-test-results.rst:\n\t  Add trailing newline.\n\t* doc/install/testing.rst:\n\t  Add trailing newline.\n\ngcc/fortran/ChangeLog:\n\n\t* doc/gfc-internals/code-that-interacts-with-the-user.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/command-line-options.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/copyright.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/error-handling.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/frontend-data-structures.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/generating-the-intermediate-language-for-later-stages.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/generating-the-intermediate-language-for-later-stages/accessing-declarations.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/generating-the-intermediate-language-for-later-stages/basic-data-structures.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/generating-the-intermediate-language-for-later-stages/converting-expressions-to-tree.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/generating-the-intermediate-language-for-later-stages/translating-statements.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/gfccode.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/gfcexpr.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/gnu-free-documentation-license.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/index.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/indices-and-tables.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/internals-of-fortran-2003-oop-features.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/introduction.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/symbol-versioning.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/the-libgfortran-runtime-library.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/type-bound-operators.rst:\n\t  Add trailing newline.\n\t* doc/gfc-internals/type-bound-procedures.rst:\n\t  Add trailing newline.\n\t* doc/gfortran/about-gnu-fortran.rst:\n\t  Add trailing newline.\n\t* doc/gfortran/coarray-programming.rst:\n\t  Add trailing newline.\n\t* doc/gfortran/compiler-characteristics.rst:\n\t  Add trailing newline.\n\t* doc/gfortran/compiler-characteristics/asynchronous-i-o.rst:\n\t  Add trailing newline.\n\t* doc/gfortran/compiler-characteristics/data-consistency-and-durability.rst:\n\t  Add trailing newline.\n\t* doc/gfortran/compiler-characteristics/evaluation-of-logical-expressions.rst:\n\t  Add trailing newline.\n\t* doc/gfortran/compiler-characteristics/file-format-of-unformatted-sequential-fi\u2026", "tree": {"sha": "fc8e09eef5bae005b42b51afe905307c950b7771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc8e09eef5bae005b42b51afe905307c950b7771"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a305ac87b46e263a3bc0c886f9dfddf2664f6af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a305ac87b46e263a3bc0c886f9dfddf2664f6af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a305ac87b46e263a3bc0c886f9dfddf2664f6af8"}], "stats": {"total": 2542, "additions": 1271, "deletions": 1271}, "files": [{"sha": "4f91312b4cb3553eb5d88a574ede3d94941ae4d8", "filename": "doc/bsd.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fbsd.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fbsd.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fbsd.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -36,4 +36,4 @@ OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n-SUCH DAMAGE.\n\\ No newline at end of file\n+SUCH DAMAGE."}, {"sha": "96bf2a56af42efdafab0d37d5fbb7fbf91e1b4e2", "filename": "doc/contrib.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcontrib.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcontrib.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcontrib.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1270,4 +1270,4 @@ to testing:\n \n And finally we'd like to thank everyone who uses the compiler, provides\n feedback and generally reminds us why we're doing this work in the first\n-place.\n\\ No newline at end of file\n+place."}, {"sha": "9a2fadd88963d35dd04e8beac61fafa1f1c12fef", "filename": "doc/contribute.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcontribute.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcontribute.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcontribute.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -18,4 +18,4 @@ advice at these URLs: https://gcc.gnu.org/contribute.html, https://gcc.gnu.org/c\n \n for information on how to make useful contributions and avoid\n duplication of effort.  Suggested projects are listed at\n-https://gcc.gnu.org/projects/.\n\\ No newline at end of file\n+https://gcc.gnu.org/projects/."}, {"sha": "e2e4dc983d3ec160ff2eb50e68e75c72751069e2", "filename": "doc/cppdiropts.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcppdiropts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcppdiropts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcppdiropts.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -214,4 +214,4 @@\n \n .. option:: -Wendif-labels\n \n-  Default setting; overrides :option:`-Wno-endif-labels`.\n\\ No newline at end of file\n+  Default setting; overrides :option:`-Wno-endif-labels`."}, {"sha": "edd8c4cf68bc218072f24ddfee5f3185bedc7793", "filename": "doc/cppenv.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcppenv.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcppenv.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcppenv.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -94,4 +94,4 @@\n \n   The value should be a known timestamp such as the last modification\n   time of the source or package and it should be set by the build\n-  process.\n\\ No newline at end of file\n+  process."}, {"sha": "4aafa22a3e57ce96e92a0c6943adee62572b2ffe", "filename": "doc/cppopts.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcppopts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcppopts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcppopts.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -553,4 +553,4 @@\n   token in the output is preceded by the dump of the map its location\n   belongs to.\n \n-  When used from GCC without :option:`-E`, this option has no effect.\n\\ No newline at end of file\n+  When used from GCC without :option:`-E`, this option has no effect."}, {"sha": "3a5d9383f086d07b1821a873ec3ad9f3674019d8", "filename": "doc/cppwarnopts.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcppwarnopts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fcppwarnopts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcppwarnopts.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1,4 +1,4 @@\n ..\n   Copyright 1988-2022 Free Software Foundation, Inc.\n   This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n\\ No newline at end of file\n+  For copying conditions, see the copyright.rst file."}, {"sha": "9e0d057e198e8c99086f7354f4afcfb733a34b8b", "filename": "doc/funding.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Ffunding.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Ffunding.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Ffunding.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -44,4 +44,4 @@ major new features or packages contribute the most.\n \n By establishing the idea that supporting further development is 'the\n proper thing to do' when distributing free software for a fee, we can\n-assure a steady flow of resources into making more free software.\n\\ No newline at end of file\n+assure a steady flow of resources into making more free software."}, {"sha": "8703eb19adf28ffab055df8bddaa33b6a6e4a7da", "filename": "doc/gnu.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fgnu.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fgnu.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fgnu.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -16,4 +16,4 @@ kernel Linux, are now widely used; though these systems are often\n referred to as 'Linux', they are more accurately called GNU/Linux\n systems.\n \n-For more information, see: https://www.gnu.org/ and https://www.gnu.org/gnu/linux-and-gnu.html.\n\\ No newline at end of file\n+For more information, see: https://www.gnu.org/ and https://www.gnu.org/gnu/linux-and-gnu.html."}, {"sha": "6ab6f79e90932d5430f168691dbe8b2afc489b03", "filename": "doc/gnu_free_documentation_license.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fgnu_free_documentation_license.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fgnu_free_documentation_license.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fgnu_free_documentation_license.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -473,4 +473,4 @@ situation.\n If your document contains nontrivial examples of program code, we\n recommend releasing these examples in parallel under your choice of\n free software license, such as the GNU General Public License,\n-to permit their use in free software.\n\\ No newline at end of file\n+to permit their use in free software."}, {"sha": "d4d5615c9a22d21de70bfe2b90bcd7345d2c06e1", "filename": "doc/gpl-3.0.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fgpl-3.0.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fgpl-3.0.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fgpl-3.0.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -704,4 +704,4 @@ program into proprietary programs. If your program is a subroutine\n library, you may consider it more useful to permit linking proprietary\n applications with the library. If this is what you want to do, use the\n GNU Lesser General Public License instead of this License. But first,\n-please read https://www.gnu.org/licenses/why-not-lgpl.html.\n\\ No newline at end of file\n+please read https://www.gnu.org/licenses/why-not-lgpl.html."}, {"sha": "bf62509bd1471d7b22b30da400e346307aae37b1", "filename": "doc/indices-and-tables.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Findices-and-tables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Findices-and-tables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Findices-and-tables.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -10,4 +10,4 @@\n     TODO\n     ----\n \n-    .. todolist::\n\\ No newline at end of file\n+    .. todolist::"}, {"sha": "340ace7253575a3590ee1423d60a9e04d2ff8494", "filename": "doc/lgpl-2.1.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Flgpl-2.1.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Flgpl-2.1.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Flgpl-2.1.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -511,4 +511,4 @@ necessary.  Here is a sample; alter the names:\n     signature of Ty Coon, 1 April 1990\n     Ty Coon, President of Vice\n \n-That's all there is to it!\n\\ No newline at end of file\n+That's all there is to it!"}, {"sha": "d0fb75ef8e89b6732c40973da4689ea721a5425a", "filename": "doc/md.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fmd.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/doc%2Fmd.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fmd.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -3139,4 +3139,4 @@ Xtensa---:samp:`{config/xtensa/constraints.md}`\n   Integer constant valid for BccI instructions\n \n ``L``\n-  Unsigned constant valid for BccUI instructions\n\\ No newline at end of file\n+  Unsigned constant valid for BccUI instructions"}, {"sha": "10a131adc2d1f9f685be3266aea6d2f01cfae7cd", "filename": "gcc/d/doc/copyright.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Fcopyright.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Fcopyright.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Fcopyright.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -10,4 +10,4 @@ Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.3 or\n any later version published by the Free Software Foundation; with no\n Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.\n-A copy of the license is in the :ref:`gnu_fdl`.\n\\ No newline at end of file\n+A copy of the license is in the :ref:`gnu_fdl`."}, {"sha": "f39f21eecd91d09c54cca417855dc63b8308d119", "filename": "gcc/d/doc/general-public-license-3.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Fgeneral-public-license-3.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Fgeneral-public-license-3.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Fgeneral-public-license-3.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -3,4 +3,4 @@\n   This is part of the GCC manual.\n   For copying conditions, see the copyright.rst file.\n \n-.. include:: ../../../doc/gpl-3.0.rst\n\\ No newline at end of file\n+.. include:: ../../../doc/gpl-3.0.rst"}, {"sha": "d70ca989667751091471752b986b6f38d0f75e7c", "filename": "gcc/d/doc/gnu-free-documentation-license.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Fgnu-free-documentation-license.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Fgnu-free-documentation-license.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Fgnu-free-documentation-license.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -3,4 +3,4 @@\n   This is part of the GCC manual.\n   For copying conditions, see the copyright.rst file.\n \n-.. include:: ../../../doc/gnu_free_documentation_license.rst\n\\ No newline at end of file\n+.. include:: ../../../doc/gnu_free_documentation_license.rst"}, {"sha": "01e6cd7ce168842c4c83d8742161aba600c05ca0", "filename": "gcc/d/doc/index.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Findex.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Findex.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Findex.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -19,4 +19,4 @@ package documentation, see https://dlang.org/.\n   general-public-license-3\n   gnu-free-documentation-license\n \n-  indices-and-tables\n\\ No newline at end of file\n+  indices-and-tables"}, {"sha": "5cc3191ee479b7116afe1f3faa1ce2c83bbebcff", "filename": "gcc/d/doc/indices-and-tables.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Findices-and-tables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Findices-and-tables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Findices-and-tables.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1 +1 @@\n-.. include:: ../../../doc/indices-and-tables.rst\n\\ No newline at end of file\n+.. include:: ../../../doc/indices-and-tables.rst"}, {"sha": "3d967bc6ee94b921256f3e8415a5fea4b36487a4", "filename": "gcc/d/doc/invoking-gdc.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -45,4 +45,4 @@ Options\n \n .. only:: man\n \n-  .. include:: copyright.rst\n\\ No newline at end of file\n+  .. include:: copyright.rst"}, {"sha": "25a9954945f7d223017a6b72d4898ac243564ca5", "filename": "gcc/d/doc/invoking-gdc/code-generation.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fcode-generation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fcode-generation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fcode-generation.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -167,4 +167,4 @@ In addition to the many :command:`gcc` options controlling code generation,\n \n   Generates code expanded from D ``mixin`` statements and writes the\n   processed sources to :samp:`{file}`.  This is useful to debug errors in compilation\n-  and provides source for debuggers to show when requested.\n\\ No newline at end of file\n+  and provides source for debuggers to show when requested."}, {"sha": "cc3135858016e1c51d5b2a518afc3e74e770a915", "filename": "gcc/d/doc/invoking-gdc/developer-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fdeveloper-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fdeveloper-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fdeveloper-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -28,4 +28,4 @@ interest to developers or language tooling.\n   program is being compiled.  This includes listing all modules that are\n   processed through the ``parse``, ``semantic``, ``semantic2``, and\n   ``semantic3`` stages; all ``import`` modules and their file paths;\n-  and all ``function`` bodies that are being compiled.\n\\ No newline at end of file\n+  and all ``function`` bodies that are being compiled."}, {"sha": "d3c7573bfade5541cc3f20688323345bd5d749cf", "filename": "gcc/d/doc/invoking-gdc/input-and-output-files.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Finput-and-output-files.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Finput-and-output-files.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Finput-and-output-files.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -42,4 +42,4 @@ A Ddoc source file contains code in the D macro processor language.  It is\n primarily designed for use in producing user documentation from embedded\n comments, with a slight affinity towards HTML generation.  If a :samp:`.d`\n source file starts with the string ``Ddoc`` then it is treated as general\n-purpose documentation, not as a D source file.\n\\ No newline at end of file\n+purpose documentation, not as a D source file."}, {"sha": "07a057f839ef345e6307d4cc2e7653e6d18de761", "filename": "gcc/d/doc/invoking-gdc/options-for-directory-search.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-directory-search.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-directory-search.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-directory-search.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -89,4 +89,4 @@ other parts of the compiler:\n \n   Do not search the standard system directories for D source and interface\n   files.  Only the directories that have been specified with :option:`-I` options\n-  (and the directory of the current file, if appropriate) are searched.\n\\ No newline at end of file\n+  (and the directory of the current file, if appropriate) are searched."}, {"sha": "31ea78348fed4e8614469dd0ddcb615c44747f3c", "filename": "gcc/d/doc/invoking-gdc/options-for-linking.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-linking.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-linking.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-linking.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -56,4 +56,4 @@ a link step.\n   On systems that provide :samp:`libgphobos` and :samp:`libgdruntime` as a\n   shared and a static library, this option forces the use of the static\n   version.  If no static version was built when the compiler was configured,\n-  this option has no effect.\n\\ No newline at end of file\n+  this option has no effect."}, {"sha": "fcb7eae24935592ccec47ff5227187c99c5d702f", "filename": "gcc/d/doc/invoking-gdc/runtime-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fruntime-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fruntime-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fruntime-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -311,4 +311,4 @@ These options affect the runtime behavior of programs compiled with\n   Turns off emission of declarations that can be defined in multiple objects as\n   weak symbols.  The default is to emit all public symbols as weak, unless the\n   target lacks support for weak symbols.  Disabling this option means that common\n-  symbols are instead put in COMDAT or become private.\n\\ No newline at end of file\n+  symbols are instead put in COMDAT or become private."}, {"sha": "180a6e46b0960abb751c014f4307dba37506fb72", "filename": "gcc/d/doc/invoking-gdc/warnings.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fwarnings.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fwarnings.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fwarnings.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -145,4 +145,4 @@ specified, they do not prevent compilation of the program.\n     List all variables going into thread local storage.\n \n   :samp:`vmarkdown`\n-    List instances of Markdown replacements in Ddoc.\n\\ No newline at end of file\n+    List instances of Markdown replacements in Ddoc."}, {"sha": "34bca2d76e4a72c243387eb0906875bc616b4f0c", "filename": "gcc/doc/cpp/character-sets.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fcharacter-sets.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fcharacter-sets.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fcharacter-sets.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -53,4 +53,4 @@ used, then those constructs are not permitted in identifiers.\n .. [#f1] UTF-16 does not meet the requirements of the C\n   standard for a wide character set, but the choice of 16-bit\n   ``wchar_t`` is enshrined in some system ABIs so we cannot fix\n-  this.\n\\ No newline at end of file\n+  this."}, {"sha": "6b536a2dc3229335e00d6328f3d7a18dc522d276", "filename": "gcc/doc/cpp/conditional-syntax.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fconditional-syntax.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fconditional-syntax.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fconditional-syntax.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -408,4 +408,4 @@ but not with others that don't.\n \n   #if defined __has_include && __has_include (\"header.h\")   /* not portable */\n   ...\n-  #endif\n\\ No newline at end of file\n+  #endif"}, {"sha": "c81bdf2ed74bf5c27f628c6b5240dfabfd2f78cb", "filename": "gcc/doc/cpp/conditional-uses.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fconditional-uses.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fconditional-uses.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fconditional-uses.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -29,4 +29,4 @@ There are three general reasons to use a conditional.\n \n Simple programs that do not need system-specific logic or complex\n debugging hooks generally will not need to use preprocessing\n-conditionals.\n\\ No newline at end of file\n+conditionals."}, {"sha": "cfe6f2f386b3f73baabd4803bf6af67b3ced8d66", "filename": "gcc/doc/cpp/conditionals.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fconditionals.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fconditionals.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fconditionals.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -41,4 +41,4 @@ remains syntactically valid when it is not to be used.\n \n   conditional-uses\n   conditional-syntax\n-  deleted-code\n\\ No newline at end of file\n+  deleted-code"}, {"sha": "ed6b960c55f222ff11a48751a0832821d98d5567", "filename": "gcc/doc/cpp/copyright.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fcopyright.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fcopyright.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fcopyright.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -21,4 +21,4 @@ A copy of the license is included in the :ref:`gnu_fdl`.\n \n      You have freedom to copy and modify this GNU Manual, like GNU\n      software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n\\ No newline at end of file\n+     funds for GNU development."}, {"sha": "0e2a439f5e2d5d2f0a4c28e95efaa077a084fb57", "filename": "gcc/doc/cpp/deleted-code.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fdeleted-code.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fdeleted-code.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fdeleted-code.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -31,4 +31,4 @@ comment, instead.  The interior of ``#if 0`` must consist of complete\n tokens; in particular, single-quote characters must balance.  Comments\n often contain unbalanced single-quote characters (known in English as\n apostrophes).  These confuse ``#if 0``.  They don't confuse\n-:samp:`/*`.\n\\ No newline at end of file\n+:samp:`/*`."}, {"sha": "c73d4bdaeedfa6580da1aebbf4c9b17d06a2dd21", "filename": "gcc/doc/cpp/diagnostics.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fdiagnostics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fdiagnostics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fdiagnostics.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -48,4 +48,4 @@ Neither :samp:`#error` nor :samp:`#warning` macro-expands its argument.\n Internal whitespace sequences are each replaced with a single space.\n The line must consist of complete tokens.  It is wisest to make the\n argument of these directives be a single string constant; this avoids\n-problems with apostrophes and the like.\n\\ No newline at end of file\n+problems with apostrophes and the like."}, {"sha": "da8e3edfacae674ff87dbef8149aa2d68a2e5c6f", "filename": "gcc/doc/cpp/environment-variables.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fenvironment-variables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fenvironment-variables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fenvironment-variables.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -20,4 +20,4 @@ Note that you can also specify places to search using options such as\n environment variables, which in turn take precedence over the\n configuration of GCC.\n \n-.. include:: ../../../doc/cppenv.rst\n\\ No newline at end of file\n+.. include:: ../../../doc/cppenv.rst"}, {"sha": "d70ca989667751091471752b986b6f38d0f75e7c", "filename": "gcc/doc/cpp/gnu-free-documentation-license.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fgnu-free-documentation-license.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fgnu-free-documentation-license.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fgnu-free-documentation-license.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -3,4 +3,4 @@\n   This is part of the GCC manual.\n   For copying conditions, see the copyright.rst file.\n \n-.. include:: ../../../doc/gnu_free_documentation_license.rst\n\\ No newline at end of file\n+.. include:: ../../../doc/gnu_free_documentation_license.rst"}, {"sha": "13176c0251e6f4ed63f0c03814db12a06f10bc36", "filename": "gcc/doc/cpp/header-files.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -53,4 +53,4 @@ underscores in header file names, and at most one dot.\n   header-files/alternatives-to-wrapper-ifndef\n   header-files/computed-includes\n   header-files/wrapper-headers\n-  header-files/system-headers\n\\ No newline at end of file\n+  header-files/system-headers"}, {"sha": "f24b1c2b6e5585b0030de0c8bac22a2a1432a0e9", "filename": "gcc/doc/cpp/header-files/alternatives-to-wrapper-ifndef.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Falternatives-to-wrapper-ifndef.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Falternatives-to-wrapper-ifndef.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Falternatives-to-wrapper-ifndef.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -37,4 +37,4 @@ Another way to prevent a header file from being included more than once\n is with the :samp:`#pragma once` directive (see :ref:`pragmas`).\n :samp:`#pragma once` does not have the problems that :samp:`#import` does,\n but it is not recognized by all preprocessors, so you cannot rely on it\n-in a portable program.\n\\ No newline at end of file\n+in a portable program."}, {"sha": "60b3ff6a97595af7117249db543f135ac08939a2", "filename": "gcc/doc/cpp/header-files/computed-includes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fcomputed-includes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fcomputed-includes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fcomputed-includes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -83,4 +83,4 @@ These rules are implementation-defined behavior according to the C\n standard.  To minimize the risk of different compilers interpreting your\n computed includes differently, we recommend you use only a single\n object-like macro which expands to a string constant.  This will also\n-minimize confusion for people reading your program.\n\\ No newline at end of file\n+minimize confusion for people reading your program."}, {"sha": "0fbdc1f5a02ec33bd5d5af71a39fffd637bf1c26", "filename": "gcc/doc/cpp/header-files/include-operation.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-operation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-operation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-operation.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -64,4 +64,4 @@ declarations, etc.\n \n The line following the :samp:`#include` directive is always treated as a\n separate line by the C preprocessor, even if the included file lacks a\n-final newline.\n\\ No newline at end of file\n+final newline."}, {"sha": "8136043922c844852f10eb8b19054c6e53e80bdb", "filename": "gcc/doc/cpp/header-files/include-syntax.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-syntax.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-syntax.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-syntax.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -39,4 +39,4 @@ All of these also interpret :samp:`/` the same way.  It is most portable\n to use only :samp:`/`.)\n \n It is an error if there is anything (other than comments) on the line\n-after the file name.\n\\ No newline at end of file\n+after the file name."}, {"sha": "7a18ce1208d636ac3de0b96aaed7e36222b9d875", "filename": "gcc/doc/cpp/header-files/once-only-headers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fonce-only-headers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fonce-only-headers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fonce-only-headers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -49,4 +49,4 @@ The macro ``FILE_FOO_SEEN`` is called the :dfn:`controlling macro` or\n begin with :samp:`_`.  In a system header file, it should begin with\n :samp:`__` to avoid conflicts with user programs.  In any kind of header\n file, the macro name should contain the name of the file and some\n-additional text, to avoid conflicts with other header files.\n\\ No newline at end of file\n+additional text, to avoid conflicts with other header files."}, {"sha": "e01a6c212869d2c84c898085ea25187d0a6fe786", "filename": "gcc/doc/cpp/header-files/search-path.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsearch-path.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsearch-path.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsearch-path.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -50,4 +50,4 @@ Note that you can also prevent the preprocessor from searching any of\n the default system header directories with the :option:`-nostdinc`\n option.  This is useful when you are compiling an operating system\n kernel or some other program that does not use the standard C library\n-facilities, or the standard C library itself.\n\\ No newline at end of file\n+facilities, or the standard C library itself."}, {"sha": "907a4f6831cb861b825baad40eb94804eb3e59b0", "filename": "gcc/doc/cpp/header-files/system-headers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsystem-headers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsystem-headers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsystem-headers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -38,4 +38,4 @@ There are, however, two ways to make normal headers into system headers:\n   system_header`` has no effect in the primary source file.\n \n On some targets, such as RS/6000 AIX, GCC implicitly surrounds all\n-system headers with an :samp:`extern \"C\"` block when compiling as C++.\n\\ No newline at end of file\n+system headers with an :samp:`extern \"C\"` block when compiling as C++."}, {"sha": "bc608f73ebd28727d05551af21747dc3ab1cf8ee", "filename": "gcc/doc/cpp/header-files/wrapper-headers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fwrapper-headers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fwrapper-headers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fwrapper-headers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -55,4 +55,4 @@ The use of :samp:`#include_next` can lead to great confusion.  We\n recommend it be used only when there is no other alternative.  In\n particular, it should not be used in the headers belonging to a specific\n program; it should be used only to make global corrections along the\n-lines of :command:`fixincludes`.\n\\ No newline at end of file\n+lines of :command:`fixincludes`."}, {"sha": "901391b34d7dc9ae941c44445253b9ec98029896", "filename": "gcc/doc/cpp/implementation-defined-behavior.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fimplementation-defined-behavior.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fimplementation-defined-behavior.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fimplementation-defined-behavior.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -94,4 +94,4 @@ and stick to it.\n   question does not arise.\n \n   Note that GCC does not yet implement any of the standard\n-  pragmas.\n\\ No newline at end of file\n+  pragmas."}, {"sha": "8da0f1434c82f0ec9961c3bcdf56415a1d61b0b9", "filename": "gcc/doc/cpp/implementation-details.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fimplementation-details.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fimplementation-details.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fimplementation-details.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -20,4 +20,4 @@ Also documented here are obsolete features still supported by CPP.\n \n   implementation-defined-behavior\n   implementation-limits\n-  obsolete-features\n\\ No newline at end of file\n+  obsolete-features"}, {"sha": "171e2a09b5c78012765c53b401cbc27d1d28e756", "filename": "gcc/doc/cpp/implementation-limits.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fimplementation-limits.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fimplementation-limits.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fimplementation-limits.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -65,4 +65,4 @@ consumed by other processes on the same computer, etc.\n   source file.  GNU cpp maps files into memory, so it is limited by the\n   available address space.  This is generally at least two gigabytes.\n   Depending on the operating system, the size of physical memory may or\n-  may not be a limitation.\n\\ No newline at end of file\n+  may not be a limitation."}, {"sha": "aebff50c800d00542f498706aba0880697d4f03b", "filename": "gcc/doc/cpp/index.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Findex.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Findex.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Findex.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -32,4 +32,4 @@ useful on its own.\n   environment-variables\n   gnu-free-documentation-license\n \n-  indices-and-tables\n\\ No newline at end of file\n+  indices-and-tables"}, {"sha": "5cc3191ee479b7116afe1f3faa1ce2c83bbebcff", "filename": "gcc/doc/cpp/indices-and-tables.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Findices-and-tables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Findices-and-tables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Findices-and-tables.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1 +1 @@\n-.. include:: ../../../doc/indices-and-tables.rst\n\\ No newline at end of file\n+.. include:: ../../../doc/indices-and-tables.rst"}, {"sha": "052d5d88a2c021a1ddc21e01558dfcdd2d6fe65c", "filename": "gcc/doc/cpp/initial-processing.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Finitial-processing.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Finitial-processing.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Finitial-processing.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -161,4 +161,4 @@ readable.\n \n There is no way to prevent a backslash at the end of a line from being\n interpreted as a backslash-newline.  This cannot affect any correct\n-program, however.\n\\ No newline at end of file\n+program, however."}, {"sha": "4264b74a552f817687504f269c96b7548c9a35c7", "filename": "gcc/doc/cpp/invocation.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Finvocation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Finvocation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Finvocation.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -78,4 +78,4 @@ options may *not* be grouped: :option:`-dM` is very different from\n \n .. only:: man\n \n-  .. include:: copyright.rst\n\\ No newline at end of file\n+  .. include:: copyright.rst"}, {"sha": "34c9f90b17684666db32630998b25cf77f97a20d", "filename": "gcc/doc/cpp/line-control.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fline-control.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fline-control.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fline-control.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -52,4 +52,4 @@ for subsequent input in the current preprocessor input file.\n \n :samp:`#line` directives alter the results of the ``__FILE__`` and\n ``__LINE__`` predefined macros from that point on.  See :ref:`standard-predefined-macros`.  They do not have any effect on :samp:`#include`'s\n-idea of the directory containing the current file.\n\\ No newline at end of file\n+idea of the directory containing the current file."}, {"sha": "5106b84133479ba4680046fffbb425ba39b9f72f", "filename": "gcc/doc/cpp/macros.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -34,4 +34,4 @@ macros when you are compiling C++.\n   macros/predefined-macros\n   macros/undefining-and-redefining-macros\n   macros/directives-within-macro-arguments\n-  macros/macro-pitfalls\n\\ No newline at end of file\n+  macros/macro-pitfalls"}, {"sha": "ec394664b6afb3e4bf63efd21c7f5b58c72de75e", "filename": "gcc/doc/cpp/macros/concatenation.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fconcatenation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fconcatenation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fconcatenation.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -82,4 +82,4 @@ concatenating the argument with :samp:`_command`.  Here is how it is done:\n     COMMAND (quit),\n     COMMAND (help),\n     ...\n-  };\n\\ No newline at end of file\n+  };"}, {"sha": "ea5c076a515a175c18259c896330c5561ca06cd6", "filename": "gcc/doc/cpp/macros/directives-within-macro-arguments.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fdirectives-within-macro-arguments.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fdirectives-within-macro-arguments.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fdirectives-within-macro-arguments.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -36,4 +36,4 @@ which expands to\n \n   1 2 1 2\n \n-with the semantics described above.\n\\ No newline at end of file\n+with the semantics described above."}, {"sha": "9101bc1f5655cc9ed0a3e2517eac28e716b91e99", "filename": "gcc/doc/cpp/macros/function-like-macros.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Ffunction-like-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Ffunction-like-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Ffunction-like-macros.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -52,4 +52,4 @@ parentheses.\n The first two pairs of parentheses in this expansion come from the\n macro.  The third is the pair that was originally after the macro\n invocation.  Since ``lang_init`` is an object-like macro, it does not\n-consume those parentheses.\n\\ No newline at end of file\n+consume those parentheses."}, {"sha": "18441a773b412f567bc49da0ceb2fabfd57ca7cf", "filename": "gcc/doc/cpp/macros/macro-arguments.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-arguments.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-arguments.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-arguments.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -109,4 +109,4 @@ their corresponding actual arguments.\n .. code-block::\n \n   #define foo(x) x, \"x\"\n-  foo(bar)        \u2192 bar, \"x\"\n\\ No newline at end of file\n+  foo(bar)        \u2192 bar, \"x\""}, {"sha": "755e088e98b2087fcad3b17f7122ae3df9517cad", "filename": "gcc/doc/cpp/macros/macro-pitfalls.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-pitfalls.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-pitfalls.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-pitfalls.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -446,4 +446,4 @@ The syntax error triggered by the tokens ``syntax error`` results in\n an error message citing line three---the line of ignore_second_arg---\n even though the problematic code comes from line five.\n \n-We consider this a bug, and intend to fix it in the near future.\n\\ No newline at end of file\n+We consider this a bug, and intend to fix it in the near future."}, {"sha": "a674433e1c5032b425945e075e5457c465e7e2da", "filename": "gcc/doc/cpp/macros/object-like-macros.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fobject-like-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fobject-like-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fobject-like-macros.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -123,4 +123,4 @@ Now ``TABLESIZE`` expands (in two stages) to ``37``.\n If the expansion of a macro contains its own name, either directly or\n via intermediate macros, it is not expanded again when the expansion is\n examined for more macros.  This prevents infinite recursion.\n-See :ref:`self-referential-macros`, for the precise details.\n\\ No newline at end of file\n+See :ref:`self-referential-macros`, for the precise details."}, {"sha": "f4afeef452608785c2aafcb8f6ddc899b6406309", "filename": "gcc/doc/cpp/macros/predefined-macros.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fpredefined-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fpredefined-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fpredefined-macros.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -871,4 +871,4 @@ These are the named operators and their corresponding punctuators:\n    * - ``xor``\n      - ``^``\n    * - ``xor_eq``\n-     - ``^=``\n\\ No newline at end of file\n+     - ``^=``"}, {"sha": "95277d864922941d9e1c90c316169513ee78df71", "filename": "gcc/doc/cpp/macros/stringizing.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fstringizing.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fstringizing.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fstringizing.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -83,4 +83,4 @@ you have to use two levels of macros.\n macro-expanded first.  But ``s`` is an ordinary argument to\n ``xstr``, so it is completely macro-expanded before ``xstr``\n itself is expanded (see :ref:`argument-prescan`).  Therefore, by the time\n-``str`` gets to its argument, it has already been macro-expanded.\n\\ No newline at end of file\n+``str`` gets to its argument, it has already been macro-expanded."}, {"sha": "6f0cdcfe5afa7926a2760915b0fcd150e5f5f8be", "filename": "gcc/doc/cpp/macros/undefining-and-redefining-macros.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fundefining-and-redefining-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fundefining-and-redefining-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fundefining-and-redefining-macros.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -64,4 +64,4 @@ same as the old one, the preprocessor issues a warning and changes the\n macro to use the new definition.  If the new definition is effectively\n the same, the redefinition is silently ignored.  This allows, for\n instance, two different headers to define a common macro.  The\n-preprocessor will only complain if the definitions do not match.\n\\ No newline at end of file\n+preprocessor will only complain if the definitions do not match."}, {"sha": "73540ec7c075aa5df4baa62ab791985eeca1b73e", "filename": "gcc/doc/cpp/macros/variadic-macros.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fvariadic-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fmacros%2Fvariadic-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fvariadic-macros.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -138,4 +138,4 @@ Variadic macros became a standard part of the C language with C99.\n GNU CPP previously supported them\n with a named variable argument\n (:samp:`args...`, not :samp:`...` and ``__VA_ARGS__``), which\n-is still supported for backward compatibility.\n\\ No newline at end of file\n+is still supported for backward compatibility."}, {"sha": "0528b8965dbac7847fe2e6a88ed26050d5a34497", "filename": "gcc/doc/cpp/obsolete-features.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fobsolete-features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fobsolete-features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fobsolete-features.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -95,4 +95,4 @@ In either form, if no such assertion has been made, :samp:`#unassert` has\n no effect.\n \n You can also make or cancel assertions using command-line options.\n-See :ref:`invocation`.\n\\ No newline at end of file\n+See :ref:`invocation`."}, {"sha": "34d42e45b0eaf14b6825958377b83c6011efb2fe", "filename": "gcc/doc/cpp/other-directives.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fother-directives.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fother-directives.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fother-directives.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -27,4 +27,4 @@ is understood as a preprocessing directive but has no effect on the\n preprocessor output.  The primary significance of the existence of the\n null directive is that an input line consisting of just a :samp:`#` will\n produce no output, rather than a line of output containing just a\n-:samp:`#`.  Supposedly some old C programs contain such lines.\n\\ No newline at end of file\n+:samp:`#`.  Supposedly some old C programs contain such lines."}, {"sha": "48caad0b2eea340f020d19c153f07db15289d1fa", "filename": "gcc/doc/cpp/overview.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Foverview.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Foverview.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Foverview.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -64,4 +64,4 @@ manual refer to GNU CPP.\n   character-sets\n   initial-processing\n   tokenization\n-  the-preprocessing-language\n\\ No newline at end of file\n+  the-preprocessing-language"}, {"sha": "da07cebf4a1ae6650a69d3b4b30e9399f362b9e2", "filename": "gcc/doc/cpp/pragmas.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fpragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fpragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fpragmas.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -118,4 +118,4 @@ GCC plugins may provide their own pragmas.\n   If ``#pragma once`` is seen when scanning a header file, that\n   file will never be read again, no matter what.  It is a less-portable\n   alternative to using :samp:`#ifndef` to guard the contents of header files\n-  against multiple inclusions.\n\\ No newline at end of file\n+  against multiple inclusions."}, {"sha": "ff14301c56ef2f318538905fe54fa8761e8f90d7", "filename": "gcc/doc/cpp/preprocessor-output.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fpreprocessor-output.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fpreprocessor-output.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fpreprocessor-output.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -83,4 +83,4 @@ preprocessor does not handle the pragma itself), and :samp:`#define` and\n will be no space between the :samp:`#` and the directive name.  If macro\n expansion happens to generate tokens which might be mistaken for a\n duplicated directive, a space will be inserted between the :samp:`#` and\n-the directive name.\n\\ No newline at end of file\n+the directive name."}, {"sha": "cc02b7540b1df4f399557737af1ea53fa0ce10cd", "filename": "gcc/doc/cpp/the-preprocessing-language.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fthe-preprocessing-language.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Fthe-preprocessing-language.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fthe-preprocessing-language.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -66,4 +66,4 @@ A preprocessing directive cannot cover more than one line.  The line\n may, however, be continued with backslash-newline, or by a block comment\n which extends past the end of the line.  In either case, when the\n directive is processed, the continuations have already been merged with\n-the first line to make one long line.\n\\ No newline at end of file\n+the first line to make one long line."}, {"sha": "7e962a952f1ffdf24ca5d44713d44baa001e5c42", "filename": "gcc/doc/cpp/tokenization.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftokenization.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftokenization.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftokenization.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -165,4 +165,4 @@ warning message.\n \n .. [#f1] The C\n   standard uses the term :dfn:`string literal` to refer only to what we are\n-  calling :dfn:`string constants`.\n\\ No newline at end of file\n+  calling :dfn:`string constants`."}, {"sha": "4ba988d691dfcb593bb027587ef35bf5f1fa9dd7", "filename": "gcc/doc/cpp/traditional-lexical-analysis.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftraditional-lexical-analysis.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftraditional-lexical-analysis.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftraditional-lexical-analysis.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -71,4 +71,4 @@ require matching quotes.  For example:\n   #include <stdio.h\n \n Just as for the ISO preprocessor, what would be a closing quote can be\n-escaped with a backslash to prevent the quoted text from closing.\n\\ No newline at end of file\n+escaped with a backslash to prevent the quoted text from closing."}, {"sha": "71df0edbb963f312b2052c00722cac154b01be37", "filename": "gcc/doc/cpp/traditional-macros.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftraditional-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftraditional-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftraditional-macros.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -96,4 +96,4 @@ pasting.\n \n   #define suffix(x) foo_/**/x\n   suffix(bar)\n-       \u2192 foo_bar\n\\ No newline at end of file\n+       \u2192 foo_bar"}, {"sha": "c1d88a2b9a9d8cb3c96de364ec39436be5818aa9", "filename": "gcc/doc/cpp/traditional-miscellany.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftraditional-miscellany.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftraditional-miscellany.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftraditional-miscellany.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -27,4 +27,4 @@ preprocessor.\n * If you use digraphs the behavior is undefined.\n \n * If a line that looks like a directive appears within macro arguments,\n-  the behavior is undefined.\n\\ No newline at end of file\n+  the behavior is undefined."}, {"sha": "b14c863cdbb9acdbf09fa9c3db4e8bb7a3f19100", "filename": "gcc/doc/cpp/traditional-mode.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftraditional-mode.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftraditional-mode.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftraditional-mode.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -32,4 +32,4 @@ that actually matter.\n   traditional-lexical-analysis\n   traditional-macros\n   traditional-miscellany\n-  traditional-warnings\n\\ No newline at end of file\n+  traditional-warnings"}, {"sha": "f07ffa2adda07ece70d5b875ee60284474bb1077", "filename": "gcc/doc/cpp/traditional-warnings.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftraditional-warnings.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcpp%2Ftraditional-warnings.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftraditional-warnings.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -46,4 +46,4 @@ Presently :option:`-Wtraditional` warns about:\n   You can usually avoid the warning, and the related warning about\n   constants which are so large that they are unsigned, by writing the\n   integer constant in question in hexadecimal, with no U suffix.  Take\n-  care, though, because this gives the wrong result in exotic cases.\n\\ No newline at end of file\n+  care, though, because this gives the wrong result in exotic cases."}, {"sha": "932cac77e55eebd1cd3dca4e689797f2a3d06f6d", "filename": "gcc/doc/cppinternals/copyright.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fcopyright.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fcopyright.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fcopyright.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -16,4 +16,4 @@ the entire resulting derived work is distributed under the terms of a\n permission notice identical to this one.\n \n Permission is granted to copy and distribute translations of this manual\n-into another language, under the above conditions for modified versions.\n\\ No newline at end of file\n+into another language, under the above conditions for modified versions."}, {"sha": "dc2208304df789885bf702dda991c91f17a0283b", "filename": "gcc/doc/cppinternals/cppinternals.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fcppinternals.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fcppinternals.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fcppinternals.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -281,4 +281,4 @@ Line numbering\n   :maxdepth: 2\n \n   just-which-line-number-anyway\n-  representation-of-line-numbers\n\\ No newline at end of file\n+  representation-of-line-numbers"}, {"sha": "36d00de9ba129584437ced47a4bfd054b9520495", "filename": "gcc/doc/cppinternals/cpplib.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fcpplib.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fcpplib.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fcpplib.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -26,4 +26,4 @@ figure out what the code is doing, and why things have been implemented\n the way they have.\n \n .. toctree::\n-  :maxdepth: 2\n\\ No newline at end of file\n+  :maxdepth: 2"}, {"sha": "cd8ee1c6c289a31107618ae6cf7e1ba5ee68bbb7", "filename": "gcc/doc/cppinternals/files.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Ffiles.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Ffiles.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Ffiles.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -67,4 +67,4 @@ for the real header files with shorter names.  The map from one to the\n other is found in a special file called :samp:`header.gcc`, stored in the\n command line (or system) include directories to which the mapping\n applies.  This may be higher up the directory tree than the full path to\n-the file minus the base name.\n\\ No newline at end of file\n+the file minus the base name."}, {"sha": "d719e16ec530e37b386e09496dd575f648a10965", "filename": "gcc/doc/cppinternals/index.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Findex.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Findex.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Findex.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -18,4 +18,4 @@ The GNU C Preprocessor Internals\n   multiple-include-optimization\n   files\n \n-  indices-and-tables\n\\ No newline at end of file\n+  indices-and-tables"}, {"sha": "5cc3191ee479b7116afe1f3faa1ce2c83bbebcff", "filename": "gcc/doc/cppinternals/indices-and-tables.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Findices-and-tables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Findices-and-tables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Findices-and-tables.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1 +1 @@\n-.. include:: ../../../doc/indices-and-tables.rst\n\\ No newline at end of file\n+.. include:: ../../../doc/indices-and-tables.rst"}, {"sha": "7ac172a95341c595e1a9c95a51ca59def7a435ce", "filename": "gcc/doc/cppinternals/internal-representation-of-macros.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Finternal-representation-of-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Finternal-representation-of-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Finternal-representation-of-macros.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -24,4 +24,4 @@ allows rapid replacement of parameters with their arguments during\n expansion.  Despite this optimization it is still necessary to store\n the original parameters to the macro, both for dumping with e.g.,\n :option:`-dD`, and to warn about non-trivial macro redefinitions when\n-the parameter names have changed.\n\\ No newline at end of file\n+the parameter names have changed."}, {"sha": "d8258118cee025c3259460825f53dda972a81fe5", "filename": "gcc/doc/cppinternals/just-which-line-number-anyway.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fjust-which-line-number-anyway.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fjust-which-line-number-anyway.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fjust-which-line-number-anyway.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -59,4 +59,4 @@ whenever it lexes a preprocessing token that starts a new logical line\n other than a directive.  It passes this token (which may be a\n ``CPP_EOF`` token indicating the end of the translation unit) to the\n callback routine, which can then use the line and column of this token\n-to produce correct output.\n\\ No newline at end of file\n+to produce correct output."}, {"sha": "9948517ff192724475df6966443afd489d75cad5", "filename": "gcc/doc/cppinternals/lexing-a-line.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Flexing-a-line.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Flexing-a-line.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Flexing-a-line.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -88,4 +88,4 @@ to be made.  ``_cpp_lex_token`` also handles skipping over tokens in\n failed conditional blocks, and invalidates the control macro of the\n multiple-include optimization if a token was successfully lexed outside\n a directive.  In other words, its callers do not need to concern\n-themselves with such issues.\n\\ No newline at end of file\n+themselves with such issues."}, {"sha": "ab97f50dc62eaf0eeb69e04faae5e25b9c5ed8ae", "filename": "gcc/doc/cppinternals/lexing-a-token.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Flexing-a-token.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Flexing-a-token.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Flexing-a-token.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -174,4 +174,4 @@ storage from the original input buffer, so a token remains valid and\n correct even if its source buffer is freed with ``_cpp_pop_buffer``.\n The storage holding the spellings of such tokens remains until the\n client program calls cpp_destroy, probably at the end of the translation\n-unit.\n\\ No newline at end of file\n+unit."}, {"sha": "c2c7f95badaf5daf3afba22ac0ad3a927db51928", "filename": "gcc/doc/cppinternals/looking-for-a-function-like-macros-opening-parenthesis.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Flooking-for-a-function-like-macros-opening-parenthesis.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Flooking-for-a-function-like-macros-opening-parenthesis.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Flooking-for-a-function-like-macros-opening-parenthesis.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -21,4 +21,4 @@ Instead, searching for the parenthesis is handled by a special\n function, ``funlike_invocation_p``, which remembers padding\n information as it reads tokens.  If the next real token is not an\n opening parenthesis, it backs up that one token, and then pushes an\n-extra context just containing the padding information if necessary.\n\\ No newline at end of file\n+extra context just containing the padding information if necessary."}, {"sha": "af2915ae07748197fa09f63e8453e52b5f26ab90", "filename": "gcc/doc/cppinternals/macro-expansion-overview.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fmacro-expansion-overview.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fmacro-expansion-overview.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fmacro-expansion-overview.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -48,4 +48,4 @@ like ``__TIME__``).  The macro is re-enabled when its context is\n later popped from the context stack, as described above.  This strict\n ordering ensures that a macro is disabled whilst its expansion is\n being scanned, but that it is *not* disabled whilst any arguments\n-to it are being expanded.\n\\ No newline at end of file\n+to it are being expanded."}, {"sha": "9454130ac5afeaccb2feb18c916ff3b7841bc081", "filename": "gcc/doc/cppinternals/marking-tokens-ineligible-for-future-expansion.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fmarking-tokens-ineligible-for-future-expansion.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fmarking-tokens-ineligible-for-future-expansion.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fmarking-tokens-ineligible-for-future-expansion.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -21,4 +21,4 @@ This might sound unsafe.  However, tokens runs are not re-used at the\n end of a line if it happens to be in the middle of a macro argument\n list, and cpplib only wants to back-up more than one lexer token in\n situations where no macro expansion is involved, so the optimization\n-is safe.\n\\ No newline at end of file\n+is safe."}, {"sha": "d7812f43db2866eb991dad41c3eb84045e2518e3", "filename": "gcc/doc/cppinternals/multiple-include-optimization.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fmultiple-include-optimization.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fmultiple-include-optimization.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fmultiple-include-optimization.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -114,4 +114,4 @@ so, they return the guard macro to ``do_if`` in the variable\n ``enter_macro_context`` sets ``mi_valid`` to false, so if a macro\n was expanded whilst parsing any part of the expression, then the\n top-of-file test in ``push_conditional`` fails and the optimization\n-is turned off.\n\\ No newline at end of file\n+is turned off."}, {"sha": "af52e355aa70c4e91fe206a46b8faf5b1e42b074", "filename": "gcc/doc/cppinternals/overview.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Foverview.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Foverview.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Foverview.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -21,4 +21,4 @@ necessary.  However, the lexer does expose some functionality so that\n clients of the library can easily spell a given token, such as\n ``cpp_spell_token`` and ``cpp_token_len``.  These functions are\n useful when generating diagnostics, and for emitting the preprocessed\n-output.\n\\ No newline at end of file\n+output."}, {"sha": "40bbd5afaa33be95ba95ccd7a624bafd08582b16", "filename": "gcc/doc/cppinternals/representation-of-line-numbers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Frepresentation-of-line-numbers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Frepresentation-of-line-numbers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Frepresentation-of-line-numbers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -29,4 +29,4 @@ containing the right hand side of an equivalent ``#define`` or\n ``#assert`` directive.  Some built-in macros are handled similarly.\n Since these are all processed before the first line of the main input\n file, it will typically have an assigned line closer to twenty than to\n-one.\n\\ No newline at end of file\n+one."}, {"sha": "817046af2faf43eca223b69d593aee13913ad153", "filename": "gcc/doc/cppinternals/scanning-the-replacement-list-for-macros-to-expand.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fscanning-the-replacement-list-for-macros-to-expand.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fcppinternals%2Fscanning-the-replacement-list-for-macros-to-expand.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fscanning-the-replacement-list-for-macros-to-expand.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -54,4 +54,4 @@ If instead the algorithm looked for an opening parenthesis first and\n then tested whether the macro were disabled it would be subtly wrong.\n In the example above, the replacement list of :samp:`foo` would be\n popped in the process of finding the parenthesis, re-enabling\n-:samp:`foo` and expanding it a second time.\n\\ No newline at end of file\n+:samp:`foo` and expanding it a second time."}, {"sha": "8d860992e928ac6e81e72c8cc0aa7b8b4153b690", "filename": "gcc/doc/gcc/binary-compatibility.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fbinary-compatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fbinary-compatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fbinary-compatibility.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -148,4 +148,4 @@ it is necessary to tell :command:`g++` the location and name of that\n library.  It might also be necessary to specify different startup files\n and other runtime support libraries, and to suppress the use of GCC's\n support libraries with one or more of the options :option:`-nostdlib`,\n-:option:`-nostartfiles`, and :option:`-nodefaultlibs`.\n\\ No newline at end of file\n+:option:`-nostartfiles`, and :option:`-nodefaultlibs`."}, {"sha": "41f6701e29f99197ad3b8174ed321b31735d15e2", "filename": "gcc/doc/gcc/c++-implementation-defined-behavior.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc%2B%2B-implementation-defined-behavior.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc%2B%2B-implementation-defined-behavior.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc%2B%2B-implementation-defined-behavior.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -30,4 +30,4 @@ environment); refer to their documentation for details.\n   :maxdepth: 2\n \n   conditionally-supported-behavior\n-  exception-handling\n\\ No newline at end of file\n+  exception-handling"}, {"sha": "c9ff0292b0967c828ae2e062edd04495ce66e4a5", "filename": "gcc/doc/gcc/c-implementation-defined-behavior.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -43,4 +43,4 @@ a freestanding environment); refer to their documentation for details.\n   c-implementation-defined-behavior/preprocessing-directives\n   c-implementation-defined-behavior/library-functions\n   c-implementation-defined-behavior/architecture\n-  c-implementation-defined-behavior/locale-specific-behavior\n\\ No newline at end of file\n+  c-implementation-defined-behavior/locale-specific-behavior"}, {"sha": "6dd5a6a5304bb57997a3833e8fbc848ee541838d", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/architecture.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farchitecture.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farchitecture.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farchitecture.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -44,4 +44,4 @@ Architecture\n * The value of the result of the ``sizeof`` and ``_Alignof``\n   operators (C90 6.3.3.4, C99 and C11 6.5.3.4).\n \n-  Determined by ABI.\n\\ No newline at end of file\n+  Determined by ABI."}, {"sha": "3766b4d5543a4a735a670889149df8a9b7028bd1", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/arrays-and-pointers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farrays-and-pointers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farrays-and-pointers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farrays-and-pointers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -43,4 +43,4 @@ Arrays and Pointers\n   The value is as specified in the standard and the type is determined\n   by the ABI.\n \n-.. [#f1] Future versions of GCC may zero-extend, or use a target-defined ``ptr_extend`` pattern.  Do not rely on sign extension.\n\\ No newline at end of file\n+.. [#f1] Future versions of GCC may zero-extend, or use a target-defined ``ptr_extend`` pattern.  Do not rely on sign extension."}, {"sha": "aa2102fd5fd4359cf811e83b882efaded84c6824", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/characters.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fcharacters.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fcharacters.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fcharacters.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -90,4 +90,4 @@ Characters\n \n   See :ref:`cpp:implementation-defined-behavior`.  ``char16_t`` and\n   ``char32_t`` literals are always encoded in UTF-16 and UTF-32\n-  respectively.\n\\ No newline at end of file\n+  respectively."}, {"sha": "13d98e8cefc998c3755a0e3d01a2a9df41b43144", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/declarators.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fdeclarators.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fdeclarators.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fdeclarators.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -11,4 +11,4 @@ Declarators\n * The maximum number of declarators that may modify an arithmetic,\n   structure or union type (C90 6.5.4).\n \n-  GCC is only limited by available memory.\n\\ No newline at end of file\n+  GCC is only limited by available memory."}, {"sha": "19a475722df1fc34071ee21bf0a886101a9d7ee9", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/environment.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fenvironment.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fenvironment.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fenvironment.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -15,4 +15,4 @@ of the C library, and are not defined by GCC itself.\n   and the source character set in translation phase 1 (C90, C99 and C11\n   5.1.1.2).\n \n-  See :ref:`cpp:implementation-defined-behavior`.\n\\ No newline at end of file\n+  See :ref:`cpp:implementation-defined-behavior`."}, {"sha": "eb4263458d9f2f066f10f217667b69cec56e673f", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/floating-point.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ffloating-point.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ffloating-point.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ffloating-point.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -85,4 +85,4 @@ Floating Point\n   IEC 60559 conformant implementation (C99 F.9).\n \n   This is dependent on the implementation of the C library, and is not\n-  defined by GCC itself.\n\\ No newline at end of file\n+  defined by GCC itself."}, {"sha": "e9a6c69cb6205024f3ce8ed03ec8663355252774", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/hints.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fhints.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fhints.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fhints.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -32,4 +32,4 @@ Hints\n   GCC will not inline any functions if the :option:`-fno-inline` option is\n   used or if :option:`-O0` is used.  Otherwise, GCC may still be unable to\n   inline a function for many reasons; the :option:`-Winline` option may be\n-  used to determine if a function has not been inlined and why not.\n\\ No newline at end of file\n+  used to determine if a function has not been inlined and why not."}, {"sha": "e7fb90fd07b26c11db3519848ca2ac1f6edb988f", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/identifiers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fidentifiers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fidentifiers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fidentifiers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -25,4 +25,4 @@ Identifiers\n \n   This is a property of the linker.  C99 and C11 require that case distinctions\n   are always significant in identifiers with external linkage and\n-  systems without this property are not supported by GCC.\n\\ No newline at end of file\n+  systems without this property are not supported by GCC."}, {"sha": "a8720cb25b12f4b81d75efe629016ec8b93a4118", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/integers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fintegers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fintegers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fintegers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -63,4 +63,4 @@ Integers\n * The sign of the remainder on integer division (C90 6.3.5).\n \n   GCC always follows the C99 and C11 requirement that the result of division is\n-  truncated towards zero.\n\\ No newline at end of file\n+  truncated towards zero."}, {"sha": "1b5c892302fa1041638b7dcf800504b2644de012", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/library-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flibrary-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flibrary-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flibrary-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -16,4 +16,4 @@ of the C library, and are not defined by GCC itself.\n \n   In ``<stddef.h>``, ``NULL`` expands to ``((void *)0)``.  GCC\n   does not provide the other headers which define ``NULL`` and some\n-  library implementations may use other definitions in those headers.\n\\ No newline at end of file\n+  library implementations may use other definitions in those headers."}, {"sha": "736a979299df2334a22b6ca95fb07def25c186d4", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/locale-specific-behavior.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flocale-specific-behavior.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flocale-specific-behavior.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flocale-specific-behavior.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -9,4 +9,4 @@ Locale-Specific Behavior\n ************************\n \n The behavior of these points are dependent on the implementation\n-of the C library, and are not defined by GCC itself.\n\\ No newline at end of file\n+of the C library, and are not defined by GCC itself."}, {"sha": "7b2d75d6597dd57a9b0f8fbb659ad041740a8e57", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/preprocessing-directives.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fpreprocessing-directives.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fpreprocessing-directives.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fpreprocessing-directives.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -51,4 +51,4 @@ implementation-defined behavior.\n \n * The definitions for ``__DATE__`` and ``__TIME__`` when\n   respectively, the date and time of translation are not available (C90\n-  6.8.8, C99 6.10.8, C11 6.10.8.1).\n\\ No newline at end of file\n+  6.8.8, C99 6.10.8, C11 6.10.8.1)."}, {"sha": "0c86fe8a3b0e624e15f3e3d2d5c031cf9bd69d25", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/qualifiers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fqualifiers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fqualifiers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fqualifiers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -50,4 +50,4 @@ Qualifiers\n   When an object of an aggregate type, with the same size and alignment as a\n   scalar type ``S``, is the subject of a volatile access by an assignment\n   expression or an atomic function, the access to it is performed as if the\n-  object's declared type were ``volatile S``.\n\\ No newline at end of file\n+  object's declared type were ``volatile S``."}, {"sha": "5fc4ca4f70f86f7c80b7afc66cbc5c921d9d714e", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/statements.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstatements.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstatements.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstatements.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -11,4 +11,4 @@ Statements\n * The maximum number of ``case`` values in a ``switch``\n   statement (C90 6.6.4.2).\n \n-  GCC is only limited by available memory.\n\\ No newline at end of file\n+  GCC is only limited by available memory."}, {"sha": "aca34a304eb0d90c4aa47a73693b7f6482c4ce36", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/structures-unions-enumerations-and-bit-fields.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstructures-unions-enumerations-and-bit-fields.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstructures-unions-enumerations-and-bit-fields.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstructures-unions-enumerations-and-bit-fields.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -75,4 +75,4 @@ Structures, Unions, Enumerations, and Bit-Fields\n   .. conforming to C90 on those targets.\n \n   On some targets, :option:`-fshort-enums` is the default; this is\n-  determined by the ABI.\n\\ No newline at end of file\n+  determined by the ABI."}, {"sha": "fa96d07984fdd282a3d136593616314ab8236775", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/translation.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ftranslation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ftranslation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ftranslation.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -17,4 +17,4 @@ Translation\n   new-line is retained or replaced by one space character in translation\n   phase 3 (C90, C99 and C11 5.1.1.2).\n \n-  See :ref:`cpp:implementation-defined-behavior`.\n\\ No newline at end of file\n+  See :ref:`cpp:implementation-defined-behavior`."}, {"sha": "6b4a114637b4e9c4a2cee18c4dc1c07336b7b267", "filename": "gcc/doc/gcc/conditionally-supported-behavior.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fconditionally-supported-behavior.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fconditionally-supported-behavior.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fconditionally-supported-behavior.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -17,4 +17,4 @@ all conditionally-supported constructs that it does not support (C++0x\n \n   Such argument passing is supported, using the same\n   pass-by-invisible-reference approach used for normal function\n-  arguments of such types.\n\\ No newline at end of file\n+  arguments of such types."}, {"sha": "d2ca9c4d647973c7a993d1e4d531fcf98d7e78ad", "filename": "gcc/doc/gcc/contributing-to-gcc-development.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fcontributing-to-gcc-development.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fcontributing-to-gcc-development.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fcontributing-to-gcc-development.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -3,4 +3,4 @@\n   This is part of the GCC manual.\n   For copying conditions, see the copyright.rst file.\n \n-.. include:: ../../../doc/contribute.rst\n\\ No newline at end of file\n+.. include:: ../../../doc/contribute.rst"}, {"sha": "28f149de0ce5f807ff5eaa2e57c1fc8ab2ea23a4", "filename": "gcc/doc/gcc/contributors-to-gcc.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fcontributors-to-gcc.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fcontributors-to-gcc.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fcontributors-to-gcc.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -3,4 +3,4 @@\n   This is part of the GCC manual.\n   For copying conditions, see the copyright.rst file.\n \n-.. include:: ../../../doc/contrib.rst\n\\ No newline at end of file\n+.. include:: ../../../doc/contrib.rst"}, {"sha": "4c658f46e0a020a43bc62946f78e7e0c8232a1f0", "filename": "gcc/doc/gcc/copyright.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fcopyright.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fcopyright.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fcopyright.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -22,4 +22,4 @@ in the :ref:`gnu_fdl`.\n \n      You have freedom to copy and modify this GNU Manual, like GNU\n      software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n\\ No newline at end of file\n+     funds for GNU development."}, {"sha": "5d1d54a7edb40b74197bd189c532935ed50f3fcf", "filename": "gcc/doc/gcc/exception-handling.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fexception-handling.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fexception-handling.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fexception-handling.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -12,4 +12,4 @@ Exception Handling\n   implementation-defined whether or not the stack is unwound before\n   std::terminate() is called (C++98 15.5.1).\n \n-  The stack is not unwound before std::terminate is called.\n\\ No newline at end of file\n+  The stack is not unwound before std::terminate is called."}, {"sha": "084143fab919dd5b20f1ff86ba48d5ce273bb2f6", "filename": "gcc/doc/gcc/extensions-to-the-c++-language.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -31,4 +31,4 @@ test specifically for GNU C++ (see :ref:`cpp:common-predefined-macros`).\n   extensions-to-the-c++-language/c++-interface-and-implementation-pragmas\n   extensions-to-the-c++-language/wheres-the-template\n   extensions-to-the-c++-language/extracting-the-function-pointer-from-a-bound-pointer-to-member-function\n-  extensions-to-the-c++-language/c++-specific-variable-function-and-type-attributes\n\\ No newline at end of file\n+  extensions-to-the-c++-language/c++-specific-variable-function-and-type-attributes"}, {"sha": "1eaaaec29edacd85dc6ba6c05cf21c172977566c", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/backwards-compatibility.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fbackwards-compatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fbackwards-compatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fbackwards-compatibility.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -24,4 +24,4 @@ deprecated.   See :ref:`deprecated-features`.\n   scope to set the language.  On such systems, all system header files are\n   implicitly scoped inside a C language scope.  Such headers must\n   correctly prototype function argument types, there is no leeway for\n-  ``()`` to indicate an unspecified set of arguments.\n\\ No newline at end of file\n+  ``()`` to indicate an unspecified set of arguments."}, {"sha": "3f60776f395c33df7b866fa59d09ab152a03a293", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/c++-concepts.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-concepts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-concepts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-concepts.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -41,4 +41,4 @@ to simplify the writing of type traits. Note that some of these traits are\n likely to be removed in the future.\n \n ``__is_same (type1, type2)``\n-  A binary type trait: ``true`` whenever the type arguments are the same.\n\\ No newline at end of file\n+  A binary type trait: ``true`` whenever the type arguments are the same."}, {"sha": "aaa5799994e01759b770e5f2abc11410783fd969", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/c++-interface-and-implementation-pragmas.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-interface-and-implementation-pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-interface-and-implementation-pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-interface-and-implementation-pragmas.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -94,4 +94,4 @@ code for the function itself; this defines a version of the function\n that can be found via pointers (or by callers compiled without\n inlining).  If all calls to the function can be inlined, you can avoid\n emitting the function by compiling with :option:`-fno-implement-inlines`.\n-If any calls are not inlined, you will get linker errors.\n\\ No newline at end of file\n+If any calls are not inlined, you will get linker errors."}, {"sha": "8750c47efa5cf0b27023c0cddc21e8a5c05d4449", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/c++-specific-variable-function-and-type-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-specific-variable-function-and-type-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-specific-variable-function-and-type-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-specific-variable-function-and-type-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -92,4 +92,4 @@ Some attributes only make sense for C++ programs.\n   control a resource, such as ``std::lock_guard``.\n \n   This attribute is also accepted in C, but it is unnecessary because C\n-  does not have constructors or destructors.\n\\ No newline at end of file\n+  does not have constructors or destructors."}, {"sha": "ed62b7db46f03db42adb695398a146b6022e7b25", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/deprecated-features.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fdeprecated-features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fdeprecated-features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fdeprecated-features.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -40,4 +40,4 @@ has been ignored since G++ 3.3 and is deprecated.\n \n G++ allows anonymous structs and unions to have members that are not\n public non-static data members (i.e. fields).  These extensions are\n-deprecated.\n\\ No newline at end of file\n+deprecated."}, {"sha": "d595adb792c5e19d641d30662fbc5abcc1001fc0", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/extracting-the-function-pointer-from-a-bound-pointer-to-member-function.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fextracting-the-function-pointer-from-a-bound-pointer-to-member-function.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fextracting-the-function-pointer-from-a-bound-pointer-to-member-function.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fextracting-the-function-pointer-from-a-bound-pointer-to-member-function.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -45,4 +45,4 @@ converted to function pointers directly:\n \n .. index:: Wno-pmf-conversions\n \n-You must specify :option:`-Wno-pmf-conversions` to use this extension.\n\\ No newline at end of file\n+You must specify :option:`-Wno-pmf-conversions` to use this extension."}, {"sha": "616aa9cfe722d2b4f31c9bb02e35ddf62b0dfd91", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/function-multiversioning.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ffunction-multiversioning.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ffunction-multiversioning.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ffunction-multiversioning.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -62,4 +62,4 @@ different target string.  Function foo is called or a pointer to it is\n taken just like a regular function.  GCC takes care of doing the\n dispatching to call the right version at runtime.  Refer to the\n `GCC wiki on\n-Function Multiversioning <https://gcc.gnu.org/wiki/FunctionMultiVersioning>`_ for more details.\n\\ No newline at end of file\n+Function Multiversioning <https://gcc.gnu.org/wiki/FunctionMultiVersioning>`_ for more details."}, {"sha": "853b78d3088393fbe5594d9ae7a99d1ef0b483e7", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/restricting-pointer-aliasing.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Frestricting-pointer-aliasing.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Frestricting-pointer-aliasing.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Frestricting-pointer-aliasing.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -49,4 +49,4 @@ other compilers that implement restricted pointers.\n As with all outermost parameter qualifiers, ``__restrict__`` is\n ignored in function definition matching.  This means you only need to\n specify ``__restrict__`` in a function definition, rather than\n-in a function prototype as well.\n\\ No newline at end of file\n+in a function prototype as well."}, {"sha": "5dcd010e1923be609b27d3f41ab88ad5dee90366", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/type-traits.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ftype-traits.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ftype-traits.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ftype-traits.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -162,4 +162,4 @@ pair of types).\n   When used as the pattern of a pack expansion within a template\n   definition, expands to a template argument pack containing integers\n   from ``0`` to ``length-1``.  This is provided for efficient\n-  implementation of ``std::make_integer_sequence``.\n\\ No newline at end of file\n+  implementation of ``std::make_integer_sequence``."}, {"sha": "9eb6aac20c408a80a703758a3533e540e9232fe6", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/vague-linkage.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fvague-linkage.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fvague-linkage.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fvague-linkage.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -77,4 +77,4 @@ for local statics in inlines, however, as having multiple copies\n almost certainly breaks things.\n \n See :ref:`c++-interface`, for\n-another way to control placement of these constructs.\n\\ No newline at end of file\n+another way to control placement of these constructs."}, {"sha": "5c38a00c9393bdf19ace7e8228acd7d2344ddbef", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/when-is-a-volatile-c++-object-accessed.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwhen-is-a-volatile-c%2B%2B-object-accessed.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwhen-is-a-volatile-c%2B%2B-object-accessed.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwhen-is-a-volatile-c%2B%2B-object-accessed.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -55,4 +55,4 @@ expected, in the following example:\n .. code-block:: c++\n \n   volatile int vobj;\n-  volatile int &vref = vobj = something;\n\\ No newline at end of file\n+  volatile int &vref = vobj = something;"}, {"sha": "5393544a8a502ba433d09a9e5263f35b5108cecc", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/wheres-the-template.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwheres-the-template.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwheres-the-template.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwheres-the-template.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -128,4 +128,4 @@ You have the following options for dealing with template instantiations:\n   .. code-block:: c++\n \n     inline template class Foo<int>;\n-    static template class Foo<int>;\n\\ No newline at end of file\n+    static template class Foo<int>;"}, {"sha": "84eecd22c5ea6f196c4844db88b6ae9aa04dea85", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -89,4 +89,4 @@ extensions, accepted by GCC in C90 mode and in C++.\n   extensions-to-the-c-language-family/pragmas-accepted-by-gcc\n   extensions-to-the-c-language-family/unnamed-structure-and-union-fields\n   extensions-to-the-c-language-family/thread-local-storage\n-  extensions-to-the-c-language-family/binary-constants-using-the-0b-prefix\n\\ No newline at end of file\n+  extensions-to-the-c-language-family/binary-constants-using-the-0b-prefix"}, {"sha": "fcc28e50605232165eb9f95e294ce8d32d731756", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/128-bit-integers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2F128-bit-integers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2F128-bit-integers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2F128-bit-integers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -15,4 +15,4 @@ targets which have an integer mode wide enough to hold 128 bits.\n Simply write ``__int128`` for a signed 128-bit integer, or\n ``unsigned __int128`` for an unsigned 128-bit integer.  There is no\n support in GCC for expressing an integer constant of type ``__int128``\n-for targets with ``long long`` integer less than 128 bits wide.\n\\ No newline at end of file\n+for targets with ``long long`` integer less than 128 bits wide."}, {"sha": "74a3e071ac82fd635fb1a6a58c2905080c6a0aff", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/additional-floating-types.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fadditional-floating-types.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fadditional-floating-types.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fadditional-floating-types.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -80,4 +80,4 @@ the corresponding internal complex type, ``KCmode`` for\n .. code-block:: c++\n \n   typedef _Complex float __attribute__((mode(KC))) _Complex_float128;\n-  typedef _Complex float __attribute__((mode(IC))) _Complex_ibm128;\n\\ No newline at end of file\n+  typedef _Complex float __attribute__((mode(IC))) _Complex_ibm128;"}, {"sha": "155083de5a1d7cab8cd5f08a1dbe5f4aa4fff8dc", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/alternate-keywords.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Falternate-keywords.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Falternate-keywords.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Falternate-keywords.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -43,4 +43,4 @@ macros to replace them with the customary keywords.  It looks like this:\n You can\n prevent such warnings within one expression by writing\n ``__extension__`` before the expression.  ``__extension__`` has no\n-effect aside from this.\n\\ No newline at end of file\n+effect aside from this."}, {"sha": "b415bf1884b8d7e337fec84fafbfb700a8bbe01a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/an-inline-function-is-as-fast-as-a-macro.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fan-inline-function-is-as-fast-as-a-macro.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fan-inline-function-is-as-fast-as-a-macro.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fan-inline-function-is-as-fast-as-a-macro.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -123,4 +123,4 @@ a header file with these keywords, and put another copy of the\n definition (lacking ``inline`` and ``extern``) in a library file.\n The definition in the header file causes most calls to the function\n to be inlined.  If any uses of the function remain, they refer to\n-the single copy in the library.\n\\ No newline at end of file\n+the single copy in the library."}, {"sha": "c8757be738125e35fb632fe5c70d3f02b81c3bf4", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/arithmetic-on-void-and-function-pointers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farithmetic-on-void-and-function-pointers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farithmetic-on-void-and-function-pointers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farithmetic-on-void-and-function-pointers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -20,4 +20,4 @@ and on function types, and returns 1.\n .. index:: Wpointer-arith\n \n The option :option:`-Wpointer-arith` requests a warning if these extensions\n-are used.\n\\ No newline at end of file\n+are used."}, {"sha": "9a38f4ce1d0b0d58f08de1075e8f93104b80fdee", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/arrays-of-length-zero.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-length-zero.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-length-zero.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-length-zero.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -108,4 +108,4 @@ object.  For example:\n   struct foo a = { 1, { 2, 3, 4 } };        // Valid.\n   struct bar b = { { 1, { 2, 3, 4 } } };    // Invalid.\n   struct bar c = { { 1, { } } };            // Valid.\n-  struct foo d[1] = { { 1, { 2, 3, 4 } } };  // Invalid.\n\\ No newline at end of file\n+  struct foo d[1] = { { 1, { 2, 3, 4 } } };  // Invalid."}, {"sha": "95e5166025ac7d357ab52af72f07a9193c03a731", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/arrays-of-variable-length.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-variable-length.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-variable-length.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-variable-length.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -96,4 +96,4 @@ parameter list.  They can be separated by commas or semicolons, but the\n last one must end with a semicolon, which is followed by the 'real'\n parameter declarations.  Each forward declaration must match a 'real'\n declaration in parameter name and data type.  ISO C99 does not support\n-parameter forward declarations.\n\\ No newline at end of file\n+parameter forward declarations."}, {"sha": "566c78849fc3f6c235af26abf9fec4bd273388e9", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/attribute-syntax.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fattribute-syntax.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fattribute-syntax.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fattribute-syntax.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -256,4 +256,4 @@ attribute that only applies to function types is applied to a\n pointer-to-function type, it is treated as applying to the pointer\n target type; if such an attribute is applied to a function return type\n that is not a pointer-to-function type, it is treated as applying\n-to the function type.\n\\ No newline at end of file\n+to the function type."}, {"sha": "62c468c729f684c2598663af5a5d457504446c90", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/binary-constants-using-the-0b-prefix.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbinary-constants-using-the-0b-prefix.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbinary-constants-using-the-0b-prefix.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbinary-constants-using-the-0b-prefix.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -26,4 +26,4 @@ The following statements are identical:\n \n The type of these constants follows the same rules as for octal or\n hexadecimal integer constants, so suffixes like :samp:`L` or :samp:`UL`\n-can be applied.\n\\ No newline at end of file\n+can be applied."}, {"sha": "ef63a8a5677bb3fc0935ba9fe3b463adf1146d63", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/built-in-functions-for-memory-model-aware-atomic-operations.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-for-memory-model-aware-atomic-operations.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-for-memory-model-aware-atomic-operations.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-for-memory-model-aware-atomic-operations.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -287,4 +287,4 @@ ensures proper usage.\n \n   :samp:`{ptr}` is an optional pointer to the object that may be used to determine\n   alignment.  A value of 0 indicates typical alignment should be used.  The\n-  compiler may also ignore this parameter.\n\\ No newline at end of file\n+  compiler may also ignore this parameter."}, {"sha": "f1b9056c2b5a31e3aaad23c46940970ca4924bca", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/built-in-functions-to-perform-arithmetic-with-overflow-checking.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-to-perform-arithmetic-with-overflow-checking.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-to-perform-arithmetic-with-overflow-checking.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-to-perform-arithmetic-with-overflow-checking.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -99,4 +99,4 @@ would overflow.\n \n   The compiler will attempt to use hardware instructions to implement\n   these built-in functions where possible, like conditional jump on overflow\n-  after addition, conditional jump on carry etc.\n\\ No newline at end of file\n+  after addition, conditional jump on carry etc."}, {"sha": "3bf794444f06231923ca80c57e68010b5cc1a774", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/c++-style-comments.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fc%2B%2B-style-comments.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fc%2B%2B-style-comments.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fc%2B%2B-style-comments.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -15,4 +15,4 @@ continue until the end of the line.  Many other C implementations allow\n such comments, and they are included in the 1999 C standard.  However,\n C++ style comments are not recognized if you specify an :option:`-std`\n option specifying a version of ISO C before C99, or :option:`-ansi`\n-(equivalent to :option:`-std=c90`).\n\\ No newline at end of file\n+(equivalent to :option:`-std=c90`)."}, {"sha": "633aa6055c3a9ce43e6ccda74d5673aaf02f1317", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/case-ranges.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcase-ranges.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcase-ranges.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcase-ranges.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -40,4 +40,4 @@ rather than this:\n \n .. code-block:: c++\n \n-  case 1...5:\n\\ No newline at end of file\n+  case 1...5:"}, {"sha": "f13e911fb1d9e4a8ba76247c4cea1694c75a97a6", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/cast-to-a-union-type.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcast-to-a-union-type.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcast-to-a-union-type.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcast-to-a-union-type.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -66,4 +66,4 @@ You can also use the union cast as a function argument:\n \n   void hack (union foo);\n   /* ... */\n-  hack ((union foo) x);\n\\ No newline at end of file\n+  hack ((union foo) x);"}, {"sha": "bb23ebf671ebbe7df482aec2312170ffc4f638fe", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/complex-numbers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcomplex-numbers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcomplex-numbers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcomplex-numbers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -119,4 +119,4 @@ examine and set these two fictitious variables with your debugger.\n   real binary floating-point type, and the result has the corresponding\n   complex type with real and imaginary parts :samp:`{real}` and :samp:`{imag}`.\n   Unlike :samp:`{real} + I * {imag}`, this works even when\n-  infinities, NaNs and negative zeros are involved.\n\\ No newline at end of file\n+  infinities, NaNs and negative zeros are involved."}, {"sha": "8a7595abfe7cd2f850726df35bac320c99759c44", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/compound-literals.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcompound-literals.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcompound-literals.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcompound-literals.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -101,4 +101,4 @@ a ``const`` -qualified type.  If ``foo`` and its initializer had\n elements of type ``char *const`` rather than ``char *``, or if\n ``foo`` were a global variable, the array would have static storage\n duration.  But it is probably safest just to avoid the use of array\n-compound literals in C++ code.\n\\ No newline at end of file\n+compound literals in C++ code."}, {"sha": "9b03edf9558f2b969488e927f65beaba35a78a60", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/conditionals-with-omitted-operands.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconditionals-with-omitted-operands.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconditionals-with-omitted-operands.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconditionals-with-omitted-operands.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -36,4 +36,4 @@ especially useful.  When it becomes useful is when the first operand does,\n or may (if it is a macro argument), contain a side effect.  Then repeating\n the operand in the middle would perform the side effect twice.  Omitting\n the middle operand uses the value already computed without the undesirable\n-effects of recomputing it.\n\\ No newline at end of file\n+effects of recomputing it."}, {"sha": "0073f7ef70f258017bb3ee5bec825249ddebeb97", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/constructing-function-calls.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconstructing-function-calls.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconstructing-function-calls.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconstructing-function-calls.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -122,4 +122,4 @@ functions acting as mere forwarders for their arguments.\n \n       return open (path, oflag, __builtin_va_arg_pack ());\n     }\n-    #endif\n\\ No newline at end of file\n+    #endif"}, {"sha": "a12f50ab7e3a01ac8b069f921a1531e61f47fdd5", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/decimal-floating-types.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdecimal-floating-types.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdecimal-floating-types.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdecimal-floating-types.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -44,4 +44,4 @@ is incomplete:\n   the technical report.\n \n Types ``_Decimal32``, ``_Decimal64``, and ``_Decimal128``\n-are supported by the DWARF debug information format.\n\\ No newline at end of file\n+are supported by the DWARF debug information format."}, {"sha": "e08f5f2b86881e213e2f7c5fa8c83440cf67e26f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -106,4 +106,4 @@ GCC plugins may provide their own attributes.\n   declaring-attributes-of-functions/v850-function-attributes\n   declaring-attributes-of-functions/visium-function-attributes\n   declaring-attributes-of-functions/x86-function-attributes\n-  declaring-attributes-of-functions/xstormy16-function-attributes\n\\ No newline at end of file\n+  declaring-attributes-of-functions/xstormy16-function-attributes"}, {"sha": "a554ae081e1771504dc3dc1fb8c8202511988fc8", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/aarch64-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Faarch64-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Faarch64-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Faarch64-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -189,4 +189,4 @@ function compiled with :option:`-mstrict-align` is allowed.\n Note that CPU tuning options and attributes such as the :option:`-mcpu=`,\n :option:`-mtune=` do not inhibit inlining unless the CPU specified by the\n :option:`-mcpu=` option or the :gcc-attr:`cpu=` attribute conflicts with the\n-architectural feature rules specified above.\n\\ No newline at end of file\n+architectural feature rules specified above."}, {"sha": "26e386ba47e7b7f95feb14262b17a8dc01072299", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/amd-gcn-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Famd-gcn-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Famd-gcn-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Famd-gcn-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -90,4 +90,4 @@ These function attributes are supported by the AMD GCN back end:\n \n   ``work_item_id_Z``\n     Set ``enable_vgpr_workitem_id`` parameter.  Always on (required to use\n-    OpenACC/OpenMP).\n\\ No newline at end of file\n+    OpenACC/OpenMP)."}, {"sha": "b8a721e3cf9db4905a7c6e1503b8e20c37d7dc1c", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/arc-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farc-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farc-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farc-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -85,4 +85,4 @@ These function attributes are supported by the ARC back end:\n   can safely be included in naked functions (see :ref:`basic-asm`).  While\n   using extended ``asm`` or a mixture of basic ``asm`` and C code\n   may appear to work, they cannot be depended upon to work reliably and\n-  are not supported.\n\\ No newline at end of file\n+  are not supported."}, {"sha": "2c848de326e461e39facb9ee4cafc5fd908ad0f3", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/arm-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farm-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farm-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farm-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -165,4 +165,4 @@ These function attributes are supported for ARM targets:\n \n     In this example ``target(\"+crc+nocrypto\")`` enables the ``crc``\n     extension and disables the ``crypto`` extension for the function ``foo``\n-    without modifying an existing :option:`-march=` or :option:`-mcpu` option.\n\\ No newline at end of file\n+    without modifying an existing :option:`-march=` or :option:`-mcpu` option."}, {"sha": "676303a29a55579c79cd1c37b536348240e66a54", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/avr-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Favr-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Favr-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Favr-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -117,4 +117,4 @@ These function attributes are supported by the AVR back end:\n   application which is responsibility of the application.\n \n   If both :avr-fn-attr:`signal` and :avr-fn-attr:`interrupt` are specified for the same\n-  function, :avr-fn-attr:`signal` is silently ignored.\n\\ No newline at end of file\n+  function, :avr-fn-attr:`signal` is silently ignored."}, {"sha": "50b89a8979d9cb302b29bb36b8ca5178e2548bcb", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/blackfin-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fblackfin-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fblackfin-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fblackfin-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -88,4 +88,4 @@ These function attributes are supported by the Blackfin back end:\n \n   Use this attribute to indicate that\n   all registers except the stack pointer should be saved in the prologue\n-  regardless of whether they are used or not.\n\\ No newline at end of file\n+  regardless of whether they are used or not."}, {"sha": "aef91a41da6671b49deedc34b4486dd41a8790da", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/bpf-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fbpf-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fbpf-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fbpf-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -21,4 +21,4 @@ These function attributes are supported by the BPF back end:\n   .. code-block:: c++\n \n     int bpf_probe_read (void *dst, int size, const void *unsafe_ptr)\n-      __attribute__ ((kernel_helper (4)));\n\\ No newline at end of file\n+      __attribute__ ((kernel_helper (4)));"}, {"sha": "293e735757b273914065054a1d2b05f1ebd84aea", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/c-sky-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fc-sky-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fc-sky-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fc-sky-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -34,4 +34,4 @@ These function attributes are supported by the C-SKY back end:\n   ``asm`` statements can safely be included in naked functions\n   (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n   basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n\\ No newline at end of file\n+  depended upon to work reliably and are not supported."}, {"sha": "631a18ea11b52e18b15390d19580ec18c16712a9", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/common-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fcommon-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fcommon-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fcommon-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1888,4 +1888,4 @@ The following attributes are supported on most targets.\n   therefore, a caller cannot assume that the register has the same contents\n   on return from the function as it had before calling the function.  Such\n   registers are also called 'call-clobbered', 'caller-saved', or\n-  'volatile'.\n\\ No newline at end of file\n+  'volatile'."}, {"sha": "0690e39e44ffe0930cbcc4ed7997962402c9a17f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/epiphany-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fepiphany-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fepiphany-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fepiphany-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -79,4 +79,4 @@ These function attributes are supported by the Epiphany back end:\n   These attributes specify how a particular function is called.\n   These attributes override the\n   :option:`-mlong-calls` (see :ref:`adapteva-epiphany-options`)\n-  command-line switch and ``#pragma long_calls`` settings.\n\\ No newline at end of file\n+  command-line switch and ``#pragma long_calls`` settings."}, {"sha": "00eb8bf978f85190964b4339eece7b2126acc65b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/h8-300-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fh8-300-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fh8-300-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fh8-300-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -36,4 +36,4 @@ These function attributes are available for H8/300 targets:\n \n   Use this attribute on the H8/300, H8/300H, and H8S to indicate that\n   all registers except the stack pointer should be saved in the prologue\n-  regardless of whether they are used or not.\n\\ No newline at end of file\n+  regardless of whether they are used or not."}, {"sha": "fc0e1a43f7b71776d8634bb3783cf05798cb6e2c", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/ia-64-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fia-64-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fia-64-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fia-64-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -33,4 +33,4 @@ These function attributes are supported on IA-64 targets:\n \n     extern int foo () __attribute__((version_id (\"20040821\")));\n \n-  Calls to ``foo`` are mapped to calls to ``foo{20040821}``.\n\\ No newline at end of file\n+  Calls to ``foo`` are mapped to calls to ``foo{20040821}``."}, {"sha": "e1915e9888ee3c440b33df3c3e454f9db2217bb8", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/m32c-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32c-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32c-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32c-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -72,4 +72,4 @@ These function attributes are supported by the M32C back end:\n   Use this attribute to indicate\n   that the specified function is an interrupt handler.  The compiler generates\n   function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n\\ No newline at end of file\n+  when this attribute is present."}, {"sha": "7fb489e04cbc5dd150cca57e3dbe9f89983bba0d", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/m32r-d-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32r-d-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32r-d-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32r-d-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -39,4 +39,4 @@ These function attributes are supported by the M32R/D back end:\n   Large model objects may live anywhere in the 32-bit address space (the\n   compiler generates ``seth/add3`` instructions to load their addresses),\n   and may not be reachable with the ``bl`` instruction (the compiler\n-  generates the much slower ``seth/add3/jl`` instruction sequence).\n\\ No newline at end of file\n+  generates the much slower ``seth/add3/jl`` instruction sequence)."}, {"sha": "89cfb3a0b3403ac050e705db6112fd016a1e52c7", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/m68k-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm68k-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm68k-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm68k-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -27,4 +27,4 @@ These function attributes are supported by the m68k back end:\n   that the specified function is an interrupt handler that is designed\n   to run as a thread.  The compiler omits generate prologue/epilogue\n   sequences and replaces the return instruction with a ``sleep``\n-  instruction.  This attribute is available only on fido.\n\\ No newline at end of file\n+  instruction.  This attribute is available only on fido."}, {"sha": "e8e92319bf9489f953a2617eba4a5340f9f2472f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/mcore-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmcore-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmcore-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmcore-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -21,4 +21,4 @@ These function attributes are supported by the MCORE back end:\n   ``asm`` statements can safely be included in naked functions\n   (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n   basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n\\ No newline at end of file\n+  depended upon to work reliably and are not supported."}, {"sha": "41f35fb00aa55ac7c751d5a2c56c16dc8b76ba30", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/mep-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmep-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmep-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmep-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -50,4 +50,4 @@ These function attributes are supported by the MeP back end:\n   The :mep-fn-attr:`vliw` attribute tells the compiler to emit\n   instructions in VLIW mode instead of core mode.  Note that this\n   attribute is not allowed unless a VLIW coprocessor has been configured\n-  and enabled through command-line options.\n\\ No newline at end of file\n+  and enabled through command-line options."}, {"sha": "86d4a3cc559f8424cfea496c47a29f30601a3e1a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/microblaze-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicroblaze-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicroblaze-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicroblaze-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -43,4 +43,4 @@ These function attributes are supported on MicroBlaze targets:\n   used in low-latency interrupt mode, and :microblaze-fn-attr:`interrupt_handler` for\n   interrupts that do not use low-latency handlers.  In both cases, GCC\n   emits appropriate prologue code and generates a return from the handler\n-  using ``rtid`` instead of ``rtsd``.\n\\ No newline at end of file\n+  using ``rtid`` instead of ``rtsd``."}, {"sha": "08729f3354f34f8397f382ae7a98d52bcf61c433", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/microsoft-windows-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicrosoft-windows-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicrosoft-windows-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicrosoft-windows-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -101,4 +101,4 @@ targets.\n   :microsoft-windows-fn-attr:`dllimport` attribute can be used as a constant initializer; in\n   this case, the address of a stub function in the import lib is\n   referenced.  On Microsoft Windows targets, the attribute can be disabled\n-  for functions by setting the :option:`-mnop-fun-dllimport` flag.\n\\ No newline at end of file\n+  for functions by setting the :option:`-mnop-fun-dllimport` flag."}, {"sha": "43193bd9153dbb8c99ebb49651eb4bff25d6f58b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/mips-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmips-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmips-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmips-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -131,4 +131,4 @@ These function attributes are supported by the MIPS back end:\n   On MIPS targets, you can use the :mips-fn-attr:`nocompression` function attribute\n   to locally turn off MIPS16 and microMIPS code generation.  This attribute\n   overrides the :option:`-mips16` and :option:`-mmicromips` options on the\n-  command line (see :ref:`mips-options`).\n\\ No newline at end of file\n+  command line (see :ref:`mips-options`)."}, {"sha": "2672ec11af071ff66cdcc9decb4f97579eeeebfb", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/msp430-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmsp430-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmsp430-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmsp430-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -100,4 +100,4 @@ These function attributes are supported by the MSP430 back end:\n   one pass over the objects and does the best that it can.  Using the\n   :option:`-ffunction-sections` and :option:`-fdata-sections` command-line\n   options can help the packing, however, since they produce smaller,\n-  easier to pack regions.\n\\ No newline at end of file\n+  easier to pack regions."}, {"sha": "846f1dacbed77ad85e211c348420d06975ae1b77", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/nds32-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnds32-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnds32-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnds32-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -93,4 +93,4 @@ These function attributes are supported by the NDS32 back end:\n \n     .. index:: warm function attribute, NDS32\n \n-    Provide a user-defined function to handle warm reset exception.\n\\ No newline at end of file\n+    Provide a user-defined function to handle warm reset exception."}, {"sha": "a4264ffd2f68e1f47099fc920f9ebe6465649f10", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/nios-ii-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnios-ii-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnios-ii-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnios-ii-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -39,4 +39,4 @@ These function attributes are supported by the Nios II back end:\n     This attribute corresponds to the :option:`-mcustom-fpu-cfg=name`\n     command-line option, to select a predefined set of custom instructions\n     named :samp:`{name}`.\n-    See :ref:`nios-ii-options`, for more information.\n\\ No newline at end of file\n+    See :ref:`nios-ii-options`, for more information."}, {"sha": "ae293be7d81174ee345f3d42548fa1d4bcd79eb6", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/nvidia-ptx-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnvidia-ptx-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnvidia-ptx-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnvidia-ptx-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -19,4 +19,4 @@ These function attributes are supported by the Nvidia PTX back end:\n   library.\n   By default functions are only callable only from other PTX functions.\n \n-  Kernel functions must have ``void`` return type.\n\\ No newline at end of file\n+  Kernel functions must have ``void`` return type."}, {"sha": "6729622198057683e33804b727eb9b50c2a76f81", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/powerpc-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fpowerpc-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fpowerpc-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fpowerpc-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -222,4 +222,4 @@ These function attributes are supported by the PowerPC back end:\n \n   On the PowerPC, the inliner does not inline a\n   function that has different target options than the caller, unless the\n-  callee has a subset of the target options of the caller.\n\\ No newline at end of file\n+  callee has a subset of the target options of the caller."}, {"sha": "928a0cbc4c1df4a8baec95839bb16031e8180c8c", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/risc-v-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frisc-v-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frisc-v-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frisc-v-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -40,4 +40,4 @@ These function attributes are supported by the RISC-V back end:\n \n   Permissible values for this parameter are ``user``, ``supervisor``,\n   and ``machine``.  If there is no parameter, then it defaults to\n-  ``machine``.\n\\ No newline at end of file\n+  ``machine``."}, {"sha": "3302e688d95ea631fe2416ba9e5a977da903a934", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/rl78-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frl78-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frl78-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frl78-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -34,4 +34,4 @@ These function attributes are supported by the RL78 back end:\n   ``asm`` statements can safely be included in naked functions\n   (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n   basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n\\ No newline at end of file\n+  depended upon to work reliably and are not supported."}, {"sha": "afdbffaf51d3cb5eeb81e50679561561a900f544", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/rx-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frx-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frx-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frx-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -72,4 +72,4 @@ These function attributes are supported by the RX back end:\n   This RX attribute is similar to the :rx-fn-attr:`interrupt` attribute, including its\n   parameters, but does not make the function an interrupt-handler type\n   function (i.e. it retains the normal C function calling ABI).  See the\n-  :rx-fn-attr:`interrupt` attribute for a description of its arguments.\n\\ No newline at end of file\n+  :rx-fn-attr:`interrupt` attribute for a description of its arguments."}, {"sha": "2384c0b53068150691b2ae8edbf5234e0f37e70a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/s-390-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fs-390-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fs-390-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fs-390-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -49,4 +49,4 @@ These function attributes are supported on the S/390:\n \n     target(\"no-vx\")\n \n-  does not undefine the ``__VEC__`` macro.\n\\ No newline at end of file\n+  does not undefine the ``__VEC__`` macro."}, {"sha": "c89a6b068bb0670805606aa438c46b84e305f593", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/sh-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsh-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsh-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsh-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -98,4 +98,4 @@ These function attributes are supported on the SH family of processors:\n .. sh-fn-attr:: trapa_handler\n \n   On SH targets this function attribute is similar to :sh-fn-attr:`interrupt_handler`\n-  but it does not save and restore all registers.\n\\ No newline at end of file\n+  but it does not save and restore all registers."}, {"sha": "ad6c6701765221530003a0e88e372530bfde7484", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/symbian-os-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsymbian-os-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsymbian-os-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsymbian-os-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -9,4 +9,4 @@ Symbian OS Function Attributes\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n See :ref:`microsoft-windows-function-attributes`, for discussion of the\n-:symbian-os-fn-attr:`dllexport` and :symbian-os-fn-attr:`dllimport` attributes.\n\\ No newline at end of file\n+:symbian-os-fn-attr:`dllexport` and :symbian-os-fn-attr:`dllimport` attributes."}, {"sha": "a5857a49b48757603a52393259f71d7a3e87daae", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/v850-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fv850-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fv850-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fv850-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -17,4 +17,4 @@ The V850 back end supports these function attributes:\n   Use these attributes to indicate\n   that the specified function is an interrupt handler.  The compiler generates\n   function entry and exit sequences suitable for use in an interrupt handler\n-  when either attribute is present.\n\\ No newline at end of file\n+  when either attribute is present."}, {"sha": "aaa7bfa30c9dc7d9e3b3ac28fba446ac13a47853", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/visium-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fvisium-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fvisium-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fvisium-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -19,4 +19,4 @@ These function attributes are supported by the Visium back end:\n   Use this attribute to indicate\n   that the specified function is an interrupt handler.  The compiler generates\n   function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n\\ No newline at end of file\n+  when this attribute is present."}, {"sha": "8f915d7eb1df30c556b03c217ca64084f88d7182", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/x86-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fx86-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fx86-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fx86-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1017,4 +1017,4 @@ These function attributes are supported by the x86 back end:\n .. option:: nodirect_extern_access\n \n   This attribute, attached to a global variable or function, is the\n-  counterpart to option :option:`-mno-direct-extern-access`.\n\\ No newline at end of file\n+  counterpart to option :option:`-mno-direct-extern-access`."}, {"sha": "783b1a161e72d8e99b82ed311e1ff8206c7fa908", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/xstormy16-function-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fxstormy16-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fxstormy16-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fxstormy16-function-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -17,4 +17,4 @@ These function attributes are supported by the Xstormy16 back end:\n   Use this attribute to indicate\n   that the specified function is an interrupt handler.  The compiler generates\n   function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n\\ No newline at end of file\n+  when this attribute is present."}, {"sha": "7e2c712d4df98793eea7d91c401bae30b7ebb03c", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/designated-initializers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdesignated-initializers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdesignated-initializers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdesignated-initializers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -144,4 +144,4 @@ initialization is used.  When a field of a union is itself a structure,\n the entire structure from the last field initialized is used.  If any previous\n initializer has side effect, it is unspecified whether the side effect\n happens or not.  Currently, GCC discards the side-effecting\n-initializer expressions and issues a warning.\n\\ No newline at end of file\n+initializer expressions and issues a warning."}, {"sha": "1b8e62ae6c843cedb056f954dcc09a592e5de978", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/determining-the-alignment-of-functions-types-or-variables.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdetermining-the-alignment-of-functions-types-or-variables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdetermining-the-alignment-of-functions-types-or-variables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdetermining-the-alignment-of-functions-types-or-variables.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -41,4 +41,4 @@ than ``void``.\n \n If the operand of the ``__alignof__`` expression is a function,\n the expression evaluates to the alignment of the function which may\n-be specified by attribute :fn-attr:`aligned` (see :ref:`common-function-attributes`).\n\\ No newline at end of file\n+be specified by attribute :fn-attr:`aligned` (see :ref:`common-function-attributes`)."}, {"sha": "1f13278a50d8ed6de44599e3a6acf0fbda7abb07", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/dollar-signs-in-identifier-names.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdollar-signs-in-identifier-names.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdollar-signs-in-identifier-names.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdollar-signs-in-identifier-names.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -13,4 +13,4 @@ Dollar Signs in Identifier Names\n In GNU C, you may normally use dollar signs in identifier names.\n This is because many traditional C implementations allow such identifiers.\n However, dollar signs in identifiers are not supported on a few target\n-machines, typically because the target assembler does not allow them.\n\\ No newline at end of file\n+machines, typically because the target assembler does not allow them."}, {"sha": "a395682c6af88647fdd3461f374c891ff5ff3517", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/double-word-integers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdouble-word-integers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdouble-word-integers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdouble-word-integers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -32,4 +32,4 @@ expects type ``int`` for its argument, and you pass a value of type\n ``long long int``, confusion results because the caller and the\n subroutine disagree about the number of bytes for the argument.\n Likewise, if the function expects ``long long int`` and you pass\n-``int``.  The best way to avoid such problems is to use prototypes.\n\\ No newline at end of file\n+``int``.  The best way to avoid such problems is to use prototypes."}, {"sha": "448184a3c494a3c41c691e9591c5fe90dee03066", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/enumerator-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fenumerator-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fenumerator-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fenumerator-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -50,4 +50,4 @@ This example uses the :enum-attr:`deprecated` enumerator attribute to indicate t\n \n   The :enum-attr:`unavailable` attribute results in an error if the enumerator\n   is used anywhere in the source file.  In other respects it behaves in the\n-  same manner as the :enum-attr:`deprecated` attribute.\n\\ No newline at end of file\n+  same manner as the :enum-attr:`deprecated` attribute."}, {"sha": "7e62e41a5876c53384af000861b9dad5590f87b2", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/fixed-point-types.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffixed-point-types.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffixed-point-types.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffixed-point-types.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -125,4 +125,4 @@ is incomplete:\n \n * Pragmas to control overflow and rounding behaviors are not implemented.\n \n-Fixed-point types are supported by the DWARF debug information format.\n\\ No newline at end of file\n+Fixed-point types are supported by the DWARF debug information format."}, {"sha": "97d88a7d128bf5f6c5ccdfbedea8b356bfa356fc", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/format-checks-specific-to-particular-target-machines.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fformat-checks-specific-to-particular-target-machines.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fformat-checks-specific-to-particular-target-machines.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fformat-checks-specific-to-particular-target-machines.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -44,4 +44,4 @@ Additionally, ``CFStringRefs`` (defined by the ``CoreFoundation`` headers) may\n also be used as format arguments.  Note that the relevant headers are only likely to be\n available on Darwin (OSX) installations.  On such installations, the XCode and system\n documentation provide descriptions of ``CFString``, ``CFStringRefs`` and\n-associated functions.\n\\ No newline at end of file\n+associated functions."}, {"sha": "367212461e00682e395e261f9363a0b305fdbbf9", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/function-names-as-strings.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffunction-names-as-strings.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffunction-names-as-strings.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffunction-names-as-strings.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -68,4 +68,4 @@ gives this output:\n \n These identifiers are variables, not preprocessor macros, and may not\n be used to initialize ``char`` arrays or be concatenated with string\n-literals.\n\\ No newline at end of file\n+literals."}, {"sha": "4d55c36703cb0682e378b576c9555b20b5ff105e", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/getting-the-return-or-frame-address-of-a-function.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fgetting-the-return-or-frame-address-of-a-function.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fgetting-the-return-or-frame-address-of-a-function.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fgetting-the-return-or-frame-address-of-a-function.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -94,4 +94,4 @@ function.\n   effects, including crashing the calling program.  As a result, calls\n   that are considered unsafe are diagnosed when the :option:`-Wframe-address`\n   option is in effect.  Such calls should only be made in debugging\n-  situations.\n\\ No newline at end of file\n+  situations."}, {"sha": "d6761655428e72ad25d7cc79e6fdcc68a542fe92", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/half-precision-floating-point.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhalf-precision-floating-point.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhalf-precision-floating-point.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhalf-precision-floating-point.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -73,4 +73,4 @@ after each operation. The same is true with :option:`-fexcess-precision=standard\n and :option:`-mfpmath=sse`. If there is no :option:`-mfpmath=sse`,\n :option:`-fexcess-precision=standard` alone does the same thing as before,\n It is useful for code that does not have ``_Float16`` and runs on the x87\n-FPU.\n\\ No newline at end of file\n+FPU."}, {"sha": "ec6583da19c3264d467ea51fc6a238dc3cf2c29c", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/hex-floats.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhex-floats.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhex-floats.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhex-floats.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -27,4 +27,4 @@ Unlike for floating-point numbers in the decimal notation the exponent\n is always required in the hexadecimal notation.  Otherwise the compiler\n would not be able to resolve the ambiguity of, e.g., ``0x1.f``.  This\n could mean ``1.0f`` or ``1.9375`` since :samp:`f` is also the\n-extension for floating-point constants of type ``float``.\n\\ No newline at end of file\n+extension for floating-point constants of type ``float``."}, {"sha": "e70fa8726e031e5630178948f883fa51d52c9a4b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/how-to-use-inline-assembly-language-in-c-code.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhow-to-use-inline-assembly-language-in-c-code.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhow-to-use-inline-assembly-language-in-c-code.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhow-to-use-inline-assembly-language-in-c-code.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1976,4 +1976,4 @@ a label is unreachable.\n \n This size is also used for inlining decisions.  If you use ``asm inline``\n instead of just ``asm``, then for inlining purposes the size of the asm\n-is taken as the minimum size, ignoring how many instructions GCC thinks it is.\n\\ No newline at end of file\n+is taken as the minimum size, ignoring how many instructions GCC thinks it is."}, {"sha": "43eaaf8f6c52d55a6e2e2375bcf40320e619519a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/incomplete-enum-types.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fincomplete-enum-types.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fincomplete-enum-types.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fincomplete-enum-types.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -20,4 +20,4 @@ This extension may not be very useful, but it makes the handling of\n ``enum`` more consistent with the way ``struct`` and ``union``\n are handled.\n \n-This extension is not supported by GNU C++.\n\\ No newline at end of file\n+This extension is not supported by GNU C++."}, {"sha": "85250798d08b0ea32376c124f56ce80007eec2f2", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/label-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabel-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabel-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabel-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -62,4 +62,4 @@ This example uses the :label-attr:`cold` label attribute to indicate the\n   The :label-attr:`cold` attribute on labels is used to inform the compiler that\n   the path following the label is unlikely to be executed.  This attribute\n   is used in cases where ``__builtin_expect`` cannot be used, for instance\n-  with computed goto or ``asm goto``.\n\\ No newline at end of file\n+  with computed goto or ``asm goto``."}, {"sha": "e25a06dd7c459a249bae511f086e8ef79881b14d", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/labels-as-values.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabels-as-values.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabels-as-values.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabels-as-values.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -83,4 +83,4 @@ variable initializer, inlining and cloning is forbidden.\n \n .. [#f1] The analogous feature in Fortran is called an assigned goto, but that name seems inappropriate in\n   C, where one can do more than simply store label addresses in label\n-  variables.\n\\ No newline at end of file\n+  variables."}, {"sha": "f3697e4dbc155bfdde68022f5ef43c43eff93d50", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/legacy-sync-built-in-functions-for-atomic-memory-access.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flegacy-sync-built-in-functions-for-atomic-memory-access.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flegacy-sync-built-in-functions-for-atomic-memory-access.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flegacy-sync-built-in-functions-for-atomic-memory-access.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -168,4 +168,4 @@ The same constraints on arguments apply as for the corresponding\n   but rather a :dfn:`release barrier`.\n   This means that all previous memory stores are globally visible, and all\n   previous memory loads have been satisfied, but following memory reads\n-  are not prevented from being speculated to before the barrier.\n\\ No newline at end of file\n+  are not prevented from being speculated to before the barrier."}, {"sha": "89e8391ed6bbbd99a7da4b57e0f491a86db23b6e", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/locally-declared-labels.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flocally-declared-labels.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flocally-declared-labels.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flocally-declared-labels.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -79,4 +79,4 @@ This could also be written using a statement expression:\n   })\n \n Local label declarations also make the labels they declare visible to\n-nested functions, if there are any.  See :ref:`nested-functions`, for details.\n\\ No newline at end of file\n+nested functions, if there are any.  See :ref:`nested-functions`, for details."}, {"sha": "eaf519ebcbcf6a76e0ddbe502229c50b77f2ea87", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/macros-with-a-variable-number-of-arguments.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmacros-with-a-variable-number-of-arguments.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmacros-with-a-variable-number-of-arguments.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmacros-with-a-variable-number-of-arguments.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -65,4 +65,4 @@ operator causes the preprocessor to remove the comma before it.  If you\n do provide some variable arguments in your macro invocation, GNU CPP\n does not complain about the paste operation and instead places the\n variable arguments after the comma.  Just like any other pasted macro\n-argument, these arguments are not macro expanded.\n\\ No newline at end of file\n+argument, these arguments are not macro expanded."}, {"sha": "6aff35ba2f472ec2c040e7b9032b7aa325e1d9fd", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/mixed-declarations-labels-and-code.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmixed-declarations-labels-and-code.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmixed-declarations-labels-and-code.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmixed-declarations-labels-and-code.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -24,4 +24,4 @@ you could do:\n   int j = i + 2;\n \n Each identifier is visible from where it is declared until the end of\n-the enclosing block.\n\\ No newline at end of file\n+the enclosing block."}, {"sha": "44e4cccc3c86390e85ca27678dc8dd48b4a662f7", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/named-address-spaces.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnamed-address-spaces.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnamed-address-spaces.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnamed-address-spaces.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -237,4 +237,4 @@ to the ``%fs`` or ``%gs`` segments.\n   that it installed previously.\n \n   The preprocessor symbols ``__SEG_FS`` and ``__SEG_GS`` are\n-  defined when these address spaces are supported.\n\\ No newline at end of file\n+  defined when these address spaces are supported."}, {"sha": "8a845a3af30b14a73dd0ca5d01a9223d092fa755", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/nested-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnested-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnested-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnested-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -129,4 +129,4 @@ for function declarations).\n         return array[index + offset];\n       }\n     /* ... */\n-  }\n\\ No newline at end of file\n+  }"}, {"sha": "c24baf06fc511697df5895d4fb400918cc1811e3", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/non-constant-initializers.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-constant-initializers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-constant-initializers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-constant-initializers.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -20,4 +20,4 @@ Here is an example of an initializer with run-time varying elements:\n   {\n     float beat_freqs[2] = { f-g, f+g };\n     /* ... */\n-  }\n\\ No newline at end of file\n+  }"}, {"sha": "9a23397e65b04d1dae01da691c6167ccae6780da", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/non-lvalue-arrays-may-have-subscripts.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-lvalue-arrays-may-have-subscripts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-lvalue-arrays-may-have-subscripts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-lvalue-arrays-may-have-subscripts.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -27,4 +27,4 @@ this is valid in GNU C though not valid in C90:\n   bar (int index)\n   {\n     return f().a[index];\n-  }\n\\ No newline at end of file\n+  }"}, {"sha": "65bea29eea3320bd11d3441baa4159bbfe1b0be1", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/nonlocal-gotos.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnonlocal-gotos.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnonlocal-gotos.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnonlocal-gotos.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -59,4 +59,4 @@ built-in functions as:\n   mechanism to restore the stack context, it cannot be called\n   from the same function calling ``__builtin_setjmp`` to\n   initialize :samp:`{buf}`.  It can only be called from a function called\n-  (directly or indirectly) from the function calling ``__builtin_setjmp``.\n\\ No newline at end of file\n+  (directly or indirectly) from the function calling ``__builtin_setjmp``."}, {"sha": "7fcc3eda7b46dbc7feeaabb20ad937cfe9c8a3ee", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/object-size-checking-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fobject-size-checking-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fobject-size-checking-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fobject-size-checking-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -142,4 +142,4 @@ In addition to this, there are checking built-in functions\n These have just one additional argument, :samp:`{flag}`, right before\n format string :samp:`{fmt}`.  If the compiler is able to optimize them to\n ``fputc`` etc. functions, it does, otherwise the checking function\n-is called and the :samp:`{flag}` argument passed to it.\n\\ No newline at end of file\n+is called and the :samp:`{flag}` argument passed to it."}, {"sha": "a1c507601761a61a2206b1f9be3d27f753ab973f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/other-built-in-functions-provided-by-gcc.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fother-built-in-functions-provided-by-gcc.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fother-built-in-functions-provided-by-gcc.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fother-built-in-functions-provided-by-gcc.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1242,4 +1242,4 @@ calls.  These built-in functions appear both with and without the\n .. function:: int __builtin_goacc_parlevel_size (int x)\n \n   Returns the openacc gang, worker or vector size depending on whether :samp:`{x}` is\n-  0, 1 or 2.\n\\ No newline at end of file\n+  0, 1 or 2."}, {"sha": "5bf0c50f4c93541188148a27cbfd165e54ca1092", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/pointer-arguments-in-variadic-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointer-arguments-in-variadic-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointer-arguments-in-variadic-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointer-arguments-in-variadic-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -19,4 +19,4 @@ of ``va_arg`` with a pointer type to receive arguments of any other\n pointer type.\n \n In particular, in GNU C :samp:`va_arg (ap, void *)` can safely be used\n-to consume an argument of any pointer type.\n\\ No newline at end of file\n+to consume an argument of any pointer type."}, {"sha": "a34cc5859d86d4e1df8896a67ead55bcfdc7b087", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/pointers-to-arrays-with-qualifiers-work-as-expected.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointers-to-arrays-with-qualifiers-work-as-expected.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointers-to-arrays-with-qualifiers-work-as-expected.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointers-to-arrays-with-qualifiers-work-as-expected.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -24,4 +24,4 @@ array itself.\n   double x[3][2];\n   double y[2][3];\n   ...\n-  transpose(3, 2, y, x);\n\\ No newline at end of file\n+  transpose(3, 2, y, x);"}, {"sha": "1f5aefc27cc4526f899101a5ba40d03add653884", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/pragmas-accepted-by-gcc.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpragmas-accepted-by-gcc.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpragmas-accepted-by-gcc.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpragmas-accepted-by-gcc.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -726,4 +726,4 @@ Loop-Specific Pragmas\n   It must be placed immediately before a ``for``, ``while`` or ``do``\n   loop or a ``#pragma GCC ivdep``, and applies only to the loop that follows.\n   :samp:`{n}` is an integer constant expression specifying the unrolling factor.\n-  The values of 0 and 1 block any unrolling of the loop.\n\\ No newline at end of file\n+  The values of 0 and 1 block any unrolling of the loop."}, {"sha": "4f1b05af5d91e35a4003d69607562fb58b026a25", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/prototypes-and-old-style-function-definitions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fprototypes-and-old-style-function-definitions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fprototypes-and-old-style-function-definitions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fprototypes-and-old-style-function-definitions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -60,4 +60,4 @@ equivalent to the following:\n   }\n \n GNU C++ does not support old-style function definitions, so this\n-extension is irrelevant.\n\\ No newline at end of file\n+extension is irrelevant."}, {"sha": "13621410ff9d4c8439b869e793cfd13b0ac81d4f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/referring-to-a-type-with-typeof.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Freferring-to-a-type-with-typeof.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Freferring-to-a-type-with-typeof.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Freferring-to-a-type-with-typeof.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -134,4 +134,4 @@ Using ``__auto_type`` instead of ``typeof`` has two advantages:\n \n * If the argument to the macro has variably modified type, it is\n   evaluated only once when using ``__auto_type``, but twice if\n-  ``typeof`` is used.\n\\ No newline at end of file\n+  ``typeof`` is used."}, {"sha": "07e5894906df009d09cf61805c09e2983e60e8b4", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/slightly-looser-rules-for-escaped-newlines.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fslightly-looser-rules-for-escaped-newlines.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fslightly-looser-rules-for-escaped-newlines.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fslightly-looser-rules-for-escaped-newlines.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -20,4 +20,4 @@ warning, but treats it as a valid escaped newline and combines the two\n lines to form a single logical line.  This works within comments and\n tokens, as well as between tokens.  Comments are *not* treated as\n whitespace for the purposes of this relaxation, since they have not\n-yet been replaced with spaces.\n\\ No newline at end of file\n+yet been replaced with spaces."}, {"sha": "568e370ffd28a76b004c3e6dba64edab716fe594", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/specifying-attributes-of-types.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-types.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-types.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-types.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -710,4 +710,4 @@ Two attributes are currently defined for x86 configurations:\n   command-line options, respectively;\n   see :ref:`x86-options`, for details of how structure layout is affected.\n   See :ref:`x86-variable-attributes`, for information about the corresponding\n-  attributes on variables.\n\\ No newline at end of file\n+  attributes on variables."}, {"sha": "3e5421384aecf988a96efb91ebf0d975e5153a2b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/specifying-attributes-of-variables.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-variables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-variables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-variables.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1184,4 +1184,4 @@ One attribute is currently defined for xstormy16 configurations:\n   allowed also), GCC places the variable in the first 0x100 bytes of\n   memory and use special opcodes to access it.  Such variables are\n   placed in either the ``.bss_below100`` section or the\n-  ``.data_below100`` section.\n\\ No newline at end of file\n+  ``.data_below100`` section."}, {"sha": "dc5cb1faee4a62bcbbd562f9673b22e7a1e19cc7", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/statement-attributes.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatement-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatement-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatement-attributes.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -68,4 +68,4 @@ available for functions (see :ref:`function-attributes`), variables\n     }\n \n   ``y`` is not actually incremented and the compiler can but does not\n-  have to optimize it to just ``return 42 + 42;``.\n\\ No newline at end of file\n+  have to optimize it to just ``return 42 + 42;``."}, {"sha": "7426b985c78934bcc8a8ddbafc44788d6f746460", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/statements-and-declarations-in-expressions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatements-and-declarations-in-expressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatements-and-declarations-in-expressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatements-and-declarations-in-expressions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -161,4 +161,4 @@ parts of the containing expression.  For example,\n \n calls ``foo`` and ``bar1`` and does not call ``baz`` but\n may or may not call ``bar2``.  If ``bar2`` is called, it is\n-called after ``foo`` and before ``bar1``.\n\\ No newline at end of file\n+called after ``foo`` and before ``bar1``."}, {"sha": "e64d793236196a7014f658e5c3a11cec0f2286af", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/structures-with-no-members.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstructures-with-no-members.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstructures-with-no-members.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstructures-with-no-members.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -19,4 +19,4 @@ GCC permits a C structure to have no members:\n \n The structure has size zero.  In C++, empty structures are part\n of the language.  G++ treats empty structures as if they had a single\n-member of type ``char``.\n\\ No newline at end of file\n+member of type ``char``."}, {"sha": "03e020f2faa86a2a3cc1cc8a8d34f4c0967e627e", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/support-for-offsetof.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fsupport-for-offsetof.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fsupport-for-offsetof.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fsupport-for-offsetof.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -31,4 +31,4 @@ This extension is sufficient such that\n \n is a suitable definition of the ``offsetof`` macro.  In C++, :samp:`{type}`\n may be dependent.  In either case, :samp:`{member}` may consist of a single\n-identifier, or a sequence of member accesses and array references.\n\\ No newline at end of file\n+identifier, or a sequence of member accesses and array references."}, {"sha": "a793496cb2b8fd2aa620d6226284a1ee7d6ff8b9", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -50,4 +50,4 @@ instructions, but allow the compiler to schedule those calls.\n   target-builtins/ti-c6x-built-in-functions\n   target-builtins/x86-built-in-functions\n   target-builtins/x86-transactional-memory-intrinsics\n-  target-builtins/x86-control-flow-protection-intrinsics\n\\ No newline at end of file\n+  target-builtins/x86-control-flow-protection-intrinsics"}, {"sha": "7247a816aaf80507b44cf468ea568e08999e2c11", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/aarch64-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faarch64-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faarch64-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faarch64-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -21,4 +21,4 @@ processors.\n   unsigned long long __builtin_aarch64_get_fpcr64 ();\n   void __builtin_aarch64_set_fpcr64 (unsigned long long);\n   unsigned long long __builtin_aarch64_get_fpsr64 ();\n-  void __builtin_aarch64_set_fpsr64 (unsigned long long);\n\\ No newline at end of file\n+  void __builtin_aarch64_set_fpsr64 (unsigned long long);"}, {"sha": "1d4cf469042d838bdc2284423b9cda7f919cd035", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/alpha-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Falpha-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Falpha-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Falpha-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -85,4 +85,4 @@ PAL calls, but when invoked with :option:`-mtls-kernel`, they invoke\n .. code-block:: c++\n \n   void *__builtin_thread_pointer (void);\n-  void __builtin_set_thread_pointer (void *);\n\\ No newline at end of file\n+  void __builtin_set_thread_pointer (void *);"}, {"sha": "b02c207bab4c28fff284f0117a5915f31ae86954", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/altera-nios-ii-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faltera-nios-ii-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faltera-nios-ii-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faltera-nios-ii-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -115,4 +115,4 @@ The letters represent the following data types:\n   void * __builtin_custom_pnfp (float, void *);\n   void * __builtin_custom_pnpi (void *, int);\n   void * __builtin_custom_pnpf (void *, float);\n-  void * __builtin_custom_pnpp (void *, void *);\n\\ No newline at end of file\n+  void * __builtin_custom_pnpp (void *, void *);"}, {"sha": "45eabb1756476437b658272f37ec7089fb7f6339", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arc-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -230,4 +230,4 @@ where they are put in the C code:\n   __builtin_arc_lr()\n   __builtin_arc_sleep()\n   __builtin_arc_sr()\n-  __builtin_arc_swi()\n\\ No newline at end of file\n+  __builtin_arc_swi()"}, {"sha": "ca7cb9fea32e696ae8d7ce057c13fffc0835ae9c", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arc-simd-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-simd-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-simd-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-simd-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -242,4 +242,4 @@ indicating one the registers I0-I7, and the fourth argument must be an\n .. code-block:: c++\n \n   void __builtin_arc_vst16_n (__v8hi, const int, const int, const int);\n-  void __builtin_arc_vst32_n (__v8hi, const int, const int, const int);\n\\ No newline at end of file\n+  void __builtin_arc_vst32_n (__v8hi, const int, const int, const int);"}, {"sha": "215010404e94e9d31062d174ee895d9aee69d4b8", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-armv8-m-security-extensions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-armv8-m-security-extensions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-armv8-m-security-extensions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-armv8-m-security-extensions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -32,4 +32,4 @@ is used here to mean any function pointer type.\n   void * cmse_check_address_range (void *, size_t, int);\n   typeof(p) cmse_nsfptr_create (FPTR p);\n   intptr_t cmse_is_nsfptr (FPTR);\n-  int cmse_nonsecure_caller (void);\n\\ No newline at end of file\n+  int cmse_nonsecure_caller (void);"}, {"sha": "00e295c729b000f38203c5d9ecb239e55d5bd46a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-c-language-extensions-acle.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-c-language-extensions-acle.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-c-language-extensions-acle.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-c-language-extensions-acle.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -27,4 +27,4 @@ AArch64's back end does not have support for 16-bit floating point Advanced SIMD\n intrinsics yet.\n \n See :ref:`arm-options` and :ref:`aarch64-options` for more information on the\n-availability of extensions.\n\\ No newline at end of file\n+availability of extensions."}, {"sha": "7e61d52d0c3bf1011cc19e0ab1a285ff7b5916a9", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-floating-point-status-and-control-intrinsics.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-floating-point-status-and-control-intrinsics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-floating-point-status-and-control-intrinsics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-floating-point-status-and-control-intrinsics.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -14,4 +14,4 @@ processors with floating-point unit.\n .. code-block:: c++\n \n   unsigned int __builtin_arm_get_fpscr ();\n-  void __builtin_arm_set_fpscr (unsigned int);\n\\ No newline at end of file\n+  void __builtin_arm_set_fpscr (unsigned int);"}, {"sha": "6d9065955af7e1ffdfbeb32f5568267611d9c23d", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-iwmmxt-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-iwmmxt-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-iwmmxt-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-iwmmxt-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -156,4 +156,4 @@ processors when the :option:`-mcpu=iwmmxt` switch is used:\n   v4hi __builtin_arm_wunpckilh (v4hi, v4hi);\n   v2si __builtin_arm_wunpckilw (v2si, v2si);\n   long long __builtin_arm_wxor (long long, long long);\n-  long long __builtin_arm_wzero ();\n\\ No newline at end of file\n+  long long __builtin_arm_wzero ();"}, {"sha": "a9a2db69417a359e792a9e3b0ce265ef5c8e9b5b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/avr-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Favr-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Favr-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Favr-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -111,4 +111,4 @@ with GNU-C99:\n   unsigned fract get_bits (uint_ur_t uval)\n   {\n       return urbits (uval);\n-  }\n\\ No newline at end of file\n+  }"}, {"sha": "d97d362db8086f4a84414c650a76207f8bcc18b4", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/basic-powerpc-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbasic-powerpc-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbasic-powerpc-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbasic-powerpc-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -721,4 +721,4 @@ Truncate and store the rightmost element of a vector, as if implemented by the\n ISA 3.1 ``stxvrbx``, ``stxvrhx``, ``stxvrwx``, and ``stxvrdx``\n instructions.\n \n-.. index:: vec_xst_trunc\n\\ No newline at end of file\n+.. index:: vec_xst_trunc"}, {"sha": "c9c43916f9ae7db193dbaa9b33e8e652cad7e43e", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/blackfin-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fblackfin-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fblackfin-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fblackfin-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -17,4 +17,4 @@ instructions.  These functions are named as follows:\n .. code-block:: c++\n \n   void __builtin_bfin_csync (void);\n-  void __builtin_bfin_ssync (void);\n\\ No newline at end of file\n+  void __builtin_bfin_ssync (void);"}, {"sha": "60eabc49ddf54e382b5b818aa68e93f984506fb4", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/bpf-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbpf-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbpf-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbpf-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -97,4 +97,4 @@ The following built-in functions are available for eBPF targets.\n         val >>= __builtin_preserve_field_info (arg->y, FIELD_RSHIFT_U64);\n \n       return val;\n-    }\n\\ No newline at end of file\n+    }"}, {"sha": "6e5769792752d82bf19b0bbbb0f4c26fde833ebd", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/fr-v-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Ffr-v-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Ffr-v-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Ffr-v-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -471,4 +471,4 @@ a specific FR-V instruction.\n .. function:: void __data_prefetch (const void *x)\n \n   Use the ``nldub`` instruction to load the contents of address :samp:`{x}`\n-  into the data cache.  The instruction is issued in slot I1.\n\\ No newline at end of file\n+  into the data cache.  The instruction is issued in slot I1."}, {"sha": "0e7fe6ccc8cce8ff0fdd24bb74b6e467cc3f6744", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-dsp-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-dsp-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-dsp-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-dsp-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -309,4 +309,4 @@ for details on what each instruction does.\n   a64 __builtin_mips_dpaqx_s_w_ph (a64, v2q15, v2q15);\n   a64 __builtin_mips_dpaqx_sa_w_ph (a64, v2q15, v2q15);\n   a64 __builtin_mips_dpsqx_s_w_ph (a64, v2q15, v2q15);\n-  a64 __builtin_mips_dpsqx_sa_w_ph (a64, v2q15, v2q15);\n\\ No newline at end of file\n+  a64 __builtin_mips_dpsqx_sa_w_ph (a64, v2q15, v2q15);"}, {"sha": "d4cee2bfc529c1f0e5fc776a34b540b811bed2ab", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-loongson-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-loongson-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-loongson-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-loongson-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -444,4 +444,4 @@ In each case, :samp:`{cond}` can be any of the 16 floating-point conditions:\n     if (__builtin_mips_all_c_eq_4s (a, b, c, d))\n       all_are_true ();\n     else\n-      some_are_false ();\n\\ No newline at end of file\n+      some_are_false ();"}, {"sha": "18f46daf3b2aafaa2b347b295deb887de928decf", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-paired-single-support.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-paired-single-support.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-paired-single-support.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-paired-single-support.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -42,4 +42,4 @@ For example:\n   On little-endian targets, the first value is the lower one and the second\n   value is the upper one.  The opposite order applies to big-endian targets.\n   For example, the code above sets the lower half of ``a`` to\n-  ``1.5`` on little-endian targets and ``9.1`` on big-endian targets.\n\\ No newline at end of file\n+  ``1.5`` on little-endian targets and ``9.1`` on big-endian targets."}, {"sha": "974b85717fed224d790a9ecba7e692351008726c", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-simd-architecture-msa-support.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-simd-architecture-msa-support.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-simd-architecture-msa-support.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-simd-architecture-msa-support.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -809,4 +809,4 @@ machine instruction.\n \n   v16u8 __builtin_msa_xor_v (v16u8, v16u8);\n \n-  v16u8 __builtin_msa_xori_b (v16u8, imm0_255);\n\\ No newline at end of file\n+  v16u8 __builtin_msa_xori_b (v16u8, imm0_255);"}, {"sha": "7859b0734fe7292b13251c8a60102bc4aeda1234", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/msp430-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmsp430-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmsp430-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmsp430-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -33,4 +33,4 @@ writing of interrupt handlers in C.\n   instructions.  Note that :samp:`{cycles}` must be a compile-time constant\n   integer - that is, you must pass a number, not a variable that may be\n   optimized to a constant later.  The number of cycles delayed by this\n-  builtin is exact.\n\\ No newline at end of file\n+  builtin is exact."}, {"sha": "3ba7a9fb3da3b163829502f504d84fbd25cf0082", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/nds32-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fnds32-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fnds32-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fnds32-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -41,4 +41,4 @@ These built-in functions are available for the NDS32 target:\n \n .. function:: void __builtin_nds32_setgie_dis (void)\n \n-  Disable global interrupt.\n\\ No newline at end of file\n+  Disable global interrupt."}, {"sha": "c046bb3acd8475f7a4453e5c7f999047263f03c6", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/other-mips-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fother-mips-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fother-mips-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fother-mips-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -24,4 +24,4 @@ GCC provides other MIPS-specific built-in functions:\n   code but can be called in both MIPS16 and non-MIPS16 contexts.\n \n   ``__builtin_mips_set_fcsr`` can be used to change any bit of the\n-  register except the condition codes, which GCC assumes are preserved.\n\\ No newline at end of file\n+  register except the condition codes, which GCC assumes are preserved."}, {"sha": "f58590ef8c610ecaa200cd4dde887b8adee82841", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/picochip-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpicochip-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpicochip-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpicochip-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -42,4 +42,4 @@ picoChip instruction set.\n .. function:: void __builtin_halt (void)\n \n   Halt.  The processor stops execution.  This built-in is useful for\n-  implementing assertions.\n\\ No newline at end of file\n+  implementing assertions."}, {"sha": "218c227b556c2b869b4ad55a54a8ec0df29ca8c4", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-altivec-vsx-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-altivec-vsx-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-altivec-vsx-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-altivec-vsx-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -2178,4 +2178,4 @@ Otherwise, the element of the returned vector contains all zeros.\n   int vec_any_ge (vector signed __int128, vector signed __int128);\n   int vec_any_ge (vector unsigned __int128, vector unsigned __int128);\n   int vec_any_le (vector signed __int128, vector signed __int128);\n-  int vec_any_le (vector unsigned __int128, vector unsigned __int128);\n\\ No newline at end of file\n+  int vec_any_le (vector unsigned __int128, vector unsigned __int128);"}, {"sha": "d4d306275118cf107a73732267e7b2554252ede4", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-atomic-memory-operation-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-atomic-memory-operation-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-atomic-memory-operation-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-atomic-memory-operation-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -65,4 +65,4 @@ The functions supported are:\n \n   void amo_stdat_sadd (int64_t *, int64_t);\n   void amo_stdat_smax (int64_t *, int64_t);\n-  void amo_stdat_smin (int64_t *, int64_t);\n\\ No newline at end of file\n+  void amo_stdat_smin (int64_t *, int64_t);"}, {"sha": "06d7c228e57362d36e3a9247b373e9ff803396c9", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-hardware-transactional-memory-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-hardware-transactional-memory-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-hardware-transactional-memory-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-hardware-transactional-memory-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -223,4 +223,4 @@ section that will work on either PowerPC or S/390:\n               break;\n             }\n         }\n-    }\n\\ No newline at end of file\n+    }"}, {"sha": "27e873b5f2dcc3c1f650267c2663eb69dbfb1ee0", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-matrix-multiply-assist-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-matrix-multiply-assist-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-matrix-multiply-assist-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-matrix-multiply-assist-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -101,4 +101,4 @@ The built-in functions supported are:\n   vec_t __builtin_vsx_xvcvbf16spn (vec_t);\n \n   __vector_pair __builtin_vsx_lxvp (size_t, __vector_pair *);\n-  void __builtin_vsx_stxvp (__vector_pair, size_t, __vector_pair *);\n\\ No newline at end of file\n+  void __builtin_vsx_stxvp (__vector_pair, size_t, __vector_pair *);"}, {"sha": "334c049361df8ae47c0481467cf774133de71054", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/pru-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpru-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpru-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpru-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -31,4 +31,4 @@ The built-in functions supported are:\n \n   This inserts LMBD instruction to calculate the left-most bit with value\n   :samp:`{bitval}` in value :samp:`{wordval}`.  Only the least significant bit\n-  of :samp:`{bitval}` is taken into account.\n\\ No newline at end of file\n+  of :samp:`{bitval}` is taken into account."}, {"sha": "fca4852ad74a77a7841f98e4c398ff6928ac465b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/risc-v-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frisc-v-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frisc-v-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frisc-v-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -13,4 +13,4 @@ processors.\n \n .. function:: void * __builtin_thread_pointer (void)\n \n-  Returns the value that is currently set in the :samp:`tp` register.\n\\ No newline at end of file\n+  Returns the value that is currently set in the :samp:`tp` register."}, {"sha": "bbd376a129a9a5e771fbd11dadfdf3a595751352", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/rx-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frx-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frx-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frx-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -119,4 +119,4 @@ following functions are supported:\n \n .. function:: void __builtin_rx_wait (void)\n \n-  Generates the ``wait`` machine instruction.\n\\ No newline at end of file\n+  Generates the ``wait`` machine instruction."}, {"sha": "6ad82054247da5426ef08b716969dd906a285ee6", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/s-390-system-z-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fs-390-system-z-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fs-390-system-z-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fs-390-system-z-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -118,4 +118,4 @@ Principles of Operation manual chapter 5-91.\n \n   Generates the ``ntstg`` machine instruction.  The second argument\n   is written to the first arguments location.  The store operation will\n-  not be rolled-back in case of an transaction abort.\n\\ No newline at end of file\n+  not be rolled-back in case of an transaction abort."}, {"sha": "23e286940be302ce6163b82cf5c16546747bcc07", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/sh-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsh-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsh-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsh-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -47,4 +47,4 @@ families of processors:\n .. function:: void __builtin_sh_set_fpscr (unsigned int val)\n \n   Sets the :samp:`FPSCR` register to the specified value :samp:`{val}`, while\n-  preserving the current values of the FR, SZ and PR bits.\n\\ No newline at end of file\n+  preserving the current values of the FR, SZ and PR bits."}, {"sha": "09a067ef7123d362446dab825ef520b45062bb7c", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/sparc-vis-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsparc-vis-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsparc-vis-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsparc-vis-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -223,4 +223,4 @@ built-in functions also become available:\n \n   long __builtin_vis_fpcmpur8shl (v8qi, v8qi, int);\n   long __builtin_vis_fpcmpur16shl (v4hi, v4hi, int);\n-  long __builtin_vis_fpcmpur32shl (v2si, v2si, int);\n\\ No newline at end of file\n+  long __builtin_vis_fpcmpur32shl (v2si, v2si, int);"}, {"sha": "367bd768087b01e3a6b353870f4c85b36ee15410", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/ti-c6x-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fti-c6x-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fti-c6x-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fti-c6x-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -40,4 +40,4 @@ to C6X instructions.\n   int _extr (int, int);\n   int _extru (int, int);\n   int _abs (int);\n-  int _abs2 (int);\n\\ No newline at end of file\n+  int _abs2 (int);"}, {"sha": "23b83fe58f6a4322f16aa648324dfaffa6eda177", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/x86-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1695,4 +1695,4 @@ should be used instead.\n   void __builtin_ia32_wrussd(unsigned int, void *);\n   void __builtin_ia32_wrussq(unsigned long long, void *);\n   void __builtin_ia32_setssbsy(void);\n-  void __builtin_ia32_clrssbsy(void *);\n\\ No newline at end of file\n+  void __builtin_ia32_clrssbsy(void *);"}, {"sha": "3b17c0da04f76ebf3578717d122356bc0b3ca558", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/x86-control-flow-protection-intrinsics.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-control-flow-protection-intrinsics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-control-flow-protection-intrinsics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-control-flow-protection-intrinsics.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -47,4 +47,4 @@ The shadow stack unwind code looks like:\n       while (0)\n \n This code runs unconditionally on all 64-bit processors.  For 32-bit\n-processors the code runs on those that support multi-byte NOP instructions.\n\\ No newline at end of file\n+processors the code runs on those that support multi-byte NOP instructions."}, {"sha": "5fb5a7bdba0731f514ef8e2645d4fd977912ff28", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/x86-transactional-memory-intrinsics.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-transactional-memory-intrinsics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-transactional-memory-intrinsics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-transactional-memory-intrinsics.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -99,4 +99,4 @@ and a fallback path for other failures:\n     }\n \n Note that, in most cases, the transactional and non-transactional code\n-must synchronize together to ensure consistency.\n\\ No newline at end of file\n+must synchronize together to ensure consistency."}, {"sha": "fd1ff91cef2f2f480bb4e6a8a1f84645c8084f98", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/the-character-esc-in-constants.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthe-character-esc-in-constants.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthe-character-esc-in-constants.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthe-character-esc-in-constants.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -9,4 +9,4 @@ The Character ESC in Constants\n ******************************\n \n You can use the sequence :samp:`\\\\e` in a string or character constant to\n-stand for the ASCII character ESC.\n\\ No newline at end of file\n+stand for the ASCII character ESC."}, {"sha": "fa04221b33aeac6834a8d572cb2f00736a368da6", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/thread-local-storage.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthread-local-storage.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthread-local-storage.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthread-local-storage.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -216,4 +216,4 @@ that document the exact semantics of the language extension.\n \n   Add after paragraph 6\n \n-  Non- ``static`` members shall not be ``__thread``.\n\\ No newline at end of file\n+  Non- ``static`` members shall not be ``__thread``."}, {"sha": "fe2f4062e03d5fb62504a71088ff50c36218e47f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/unnamed-structure-and-union-fields.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Funnamed-structure-and-union-fields.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Funnamed-structure-and-union-fields.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Funnamed-structure-and-union-fields.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -83,4 +83,4 @@ name of the ``typedef``.\n   struct s2 { s1; };\n   s1 f1 (struct s2 *p) { return p->s1; }\n \n-These usages are only permitted when they are not ambiguous.\n\\ No newline at end of file\n+These usages are only permitted when they are not ambiguous."}, {"sha": "04e3dddba336c60e566a32f0f7387311761d148f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/using-vector-instructions-through-built-in-functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fusing-vector-instructions-through-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fusing-vector-instructions-through-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fusing-vector-instructions-through-built-in-functions.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -282,4 +282,4 @@ intrinsics:\n   /* Instead of a variable, a compound literal may be used to pass the\n      return value of an intrinsic call to a function expecting the union: */\n   v128 foo (v128);\n-  x = foo ((v128) {_mm_adds_epu8 (x.mm, y.mm)});\n\\ No newline at end of file\n+  x = foo ((v128) {_mm_adds_epu8 (x.mm, y.mm)});"}, {"sha": "df96282def339d82ecaf239dcae6fe2ddaae16fa", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/when-is-a-volatile-object-accessed.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fwhen-is-a-volatile-object-accessed.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fwhen-is-a-volatile-object-accessed.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fwhen-is-a-volatile-object-accessed.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -83,4 +83,4 @@ be implicitly read when written to, or when adjacent bit-fields are\n accessed.  Bit-field operations may be optimized such that adjacent\n bit-fields are only partially accessed, if they straddle a storage unit\n boundary.  For these reasons it is unwise to use volatile bit-fields to\n-access hardware.\n\\ No newline at end of file\n+access hardware."}, {"sha": "44698079981f45d8e7e5a38948bdc83c1aa6d30e", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/x86-specific-memory-model-extensions-for-transactional-memory.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fx86-specific-memory-model-extensions-for-transactional-memory.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fx86-specific-memory-model-extensions-for-transactional-memory.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fx86-specific-memory-model-extensions-for-transactional-memory.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -35,4 +35,4 @@ the transaction quickly. This can be done with a ``_mm_pause``.\n       _mm_pause(); /* Abort failed transaction */\n   ...\n   /* Free lock with lock elision */\n-  __atomic_store_n(&lockvar, 0, __ATOMIC_RELEASE|__ATOMIC_HLE_RELEASE);\n\\ No newline at end of file\n+  __atomic_store_n(&lockvar, 0, __ATOMIC_RELEASE|__ATOMIC_HLE_RELEASE);"}, {"sha": "ae118902eabdac8e5c034b08b1797f40e8653903", "filename": "gcc/doc/gcc/funding.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Ffunding.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Ffunding.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Ffunding.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -3,4 +3,4 @@\n   This is part of the GCC manual.\n   For copying conditions, see the copyright.rst file.\n \n-.. include:: ../../../doc/funding.rst\n\\ No newline at end of file\n+.. include:: ../../../doc/funding.rst"}, {"sha": "dc3561c5d5412df67d7d3cc0e7f9f1efb8b8d292", "filename": "gcc/doc/gcc/gcc-command-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -64,4 +64,4 @@ GCC Command Options\n \n .. only:: man\n \n-  .. include:: copyright.rst\n\\ No newline at end of file\n+  .. include:: copyright.rst"}, {"sha": "271c2504a4bc4c759350b826900bea6531a29ac3", "filename": "gcc/doc/gcc/gcc-command-options/compiling-c++-programs.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fcompiling-c%2B%2B-programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fcompiling-c%2B%2B-programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fcompiling-c%2B%2B-programs.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -39,4 +39,4 @@ languages; or options that are meaningful only for C++ programs.\n See :ref:`c-dialect-options`, for\n explanations of options for languages related to C.\n See :ref:`c++-dialect-options`, for\n-explanations of options that are meaningful only for C++ programs.\n\\ No newline at end of file\n+explanations of options that are meaningful only for C++ programs."}, {"sha": "97b4a66070c5e7d689c4a0b341d082976fd5dbcb", "filename": "gcc/doc/gcc/gcc-command-options/description.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fdescription.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fdescription.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fdescription.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -70,4 +70,4 @@ listing and explanation of the binary and decimal byte size prefixes.\n \n .. only:: html\n \n-    See :ref:`genindex`, for an index to GCC's options.\n\\ No newline at end of file\n+    See :ref:`genindex`, for an index to GCC's options."}, {"sha": "81ed3de5effbb0aa6d3b978239b2d64b2b5a5241", "filename": "gcc/doc/gcc/gcc-command-options/environment-variables-affecting-gcc.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fenvironment-variables-affecting-gcc.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fenvironment-variables-affecting-gcc.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fenvironment-variables-affecting-gcc.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -160,4 +160,4 @@ See :ref:`gccint:driver`.\n Some additional environment variables affect the behavior of the\n preprocessor.\n \n-.. include:: ../../../../doc/cppenv.rst\n\\ No newline at end of file\n+.. include:: ../../../../doc/cppenv.rst"}, {"sha": "372cb5ccc08ed7bed0368bc1b74b301a445c8cb4", "filename": "gcc/doc/gcc/gcc-command-options/gcc-developer-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fgcc-developer-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fgcc-developer-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fgcc-developer-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1171,4 +1171,4 @@ The files are created in the directory of the output file.\n .. option:: -dumpspecs\n \n   Print the compiler's built-in specs---and don't do anything else.  (This\n-  is used when GCC itself is being built.)  See :ref:`spec-files`.\n\\ No newline at end of file\n+  is used when GCC itself is being built.)  See :ref:`spec-files`."}, {"sha": "cbd4980e0a735272e8cfbd621282d24e4ca8b872", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -89,4 +89,4 @@ platform.\n   machine-dependent-options/xtensa-options\n   machine-dependent-options/zseries-options\n \n-.. program:: None\n\\ No newline at end of file\n+.. program:: None"}, {"sha": "c2b23a6ee97ef2b7c74119f22c1d3e3d85385f4d", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/aarch64-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Faarch64-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Faarch64-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Faarch64-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -547,4 +547,4 @@ the following and their inverses no :samp:`{feature}` :\n Feature ``crypto`` implies ``aes``, ``sha2``, and ``simd``,\n which implies ``fp``.\n Conversely, ``nofp`` implies ``nosimd``, which implies\n-``nocrypto``, ``noaes`` and ``nosha2``.\n\\ No newline at end of file\n+``nocrypto``, ``noaes`` and ``nosha2``."}, {"sha": "6f40bbeb23a3390a586dbad8cba0a9fe7b7f46ad", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/adapteva-epiphany-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fadapteva-epiphany-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fadapteva-epiphany-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fadapteva-epiphany-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -160,4 +160,4 @@ These :samp:`-m` options are defined for Adapteva Epiphany:\n   Allowable values for :samp:`{reg}` are :samp:`r43` and :samp:`r63`,\n   which specify use of that register as a fixed register,\n   and :samp:`none`, which means that no register is used for this\n-  purpose.  The default is :option:`-m1reg-none`.\n\\ No newline at end of file\n+  purpose.  The default is :option:`-m1reg-none`."}, {"sha": "5d45376d91a758b7a30acfca280a3fb892591e69", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/amd-gcn-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Famd-gcn-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Famd-gcn-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Famd-gcn-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -55,4 +55,4 @@ These options are defined specifically for the AMD GCN port.\n   devices always require XNACK and some allow the user to configure XNACK.  The\n   compiled code must match the device mode.  The default is :samp:`-mno-xnack`.\n   At present this option is a placeholder for support that is not yet\n-  implemented.\n\\ No newline at end of file\n+  implemented."}, {"sha": "c30096590b12e83fbc8fc1f9309dd595c686c543", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/arc-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farc-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farc-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farc-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -756,4 +756,4 @@ are now deprecated and will be removed in a future release:\n \n .. option:: -multcost={num}\n \n-  Replaced by :option:`-mmultcost`.\n\\ No newline at end of file\n+  Replaced by :option:`-mmultcost`."}, {"sha": "3315114969381995d47162b53abeb9bfc442fd28", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/arm-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farm-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farm-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farm-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1034,4 +1034,4 @@ These :samp:`-m` options are defined for the ARM port:\n \n   The opposite :option:`-mno-fdpic` option is useful (and required) to\n   build the Linux kernel using the same (``arm-*-uclinuxfdpiceabi``)\n-  toolchain as the one used to build the userland programs.\n\\ No newline at end of file\n+  toolchain as the one used to build the userland programs."}, {"sha": "b8157b2f58c0353445f71ba1d874d08ff73979d2", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/avr-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -540,4 +540,4 @@ For even more AVR-specific built-in macros see\n   and is defined to ``2`` or ``3``.\n \n ``__WITH_LIBF7_LIBGCC__`` ``__WITH_LIBF7_MATH__`` ``__WITH_LIBF7_MATH_SYMBOLS__``\n-  Reflects the :option:`install:--with-libf7`.\n\\ No newline at end of file\n+  Reflects the :option:`install:--with-libf7`."}, {"sha": "7c1f77874441391211f8ff9aeb45ef0d0d98d5b9", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/blackfin-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fblackfin-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fblackfin-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fblackfin-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -224,4 +224,4 @@ Blackfin Options\n \n   Assume that ICPLBs are enabled at run time.  This has an effect on certain\n   anomaly workarounds.  For Linux targets, the default is to assume ICPLBs\n-  are enabled; for standalone applications the default is off.\n\\ No newline at end of file\n+  are enabled; for standalone applications the default is off."}, {"sha": "6b0a9744e8dd20d68ce4ac1358106019c2456d22", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/c-sky-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc-sky-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc-sky-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc-sky-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -190,4 +190,4 @@ GCC supports these options when compiling for C-SKY V2 processors.\n .. option:: -msim\n \n   Links the library libsemi.a which is in compatible with simulator. Applicable\n-  to ELF compiler only.\n\\ No newline at end of file\n+  to ELF compiler only."}, {"sha": "802c69e74e4da81bf94a52290f0acdd74120087e", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/c6x-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc6x-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc6x-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc6x-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -52,4 +52,4 @@ C6X Options\n   addresses to access all data.  Put all initialized global and static\n   data in the ``.fardata`` section, and all uninitialized data in the\n   ``.far`` section.  Put all constant data into the ``.const``\n-  section.\n\\ No newline at end of file\n+  section."}, {"sha": "be8cae91a1a4e351e568d5b15fe171022afb41b8", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/cris-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fcris-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fcris-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fcris-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -99,4 +99,4 @@ These options are defined specifically for the CRIS ports.\n .. option:: -sim2\n \n   Like :option:`-sim`, but pass linker options to locate initialized data at\n-  0x40000000 and zero-initialized data at 0x80000000.\n\\ No newline at end of file\n+  0x40000000 and zero-initialized data at 0x80000000."}, {"sha": "94bcf8de739568655963ca89bd4f3a8047caa872", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/darwin-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdarwin-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdarwin-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdarwin-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -221,4 +221,4 @@ restrictive subtype of any of its input files.\n .. option:: -whatsloaded\n \n   These options are passed to the Darwin linker.  The Darwin linker man page\n-  describes them in detail.\n\\ No newline at end of file\n+  describes them in detail."}, {"sha": "4c275780250dc94921a3cef9bc646690529de001", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/dec-alpha-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdec-alpha-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdec-alpha-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdec-alpha-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -271,4 +271,4 @@ These :samp:`-m` options are defined for the DEC Alpha implementations:\n     The compiler contains estimates of the number of clock cycles for\n     'typical' EV4 & EV5 hardware for the Level 1, 2 & 3 caches\n     (also called Dcache, Scache, and Bcache), as well as to main memory.\n-    Note that L3 is only valid for EV5.\n\\ No newline at end of file\n+    Note that L3 is only valid for EV5."}, {"sha": "0a8807c584ca9dc5db58f56cad6dfb430a75ce69", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/ebpf-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Febpf-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Febpf-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Febpf-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -91,4 +91,4 @@ eBPF Options\n   the restrictions imposed by the BPF architecture:\n \n   * Save and restore callee-saved registers at function entry and\n-    exit, respectively.\n\\ No newline at end of file\n+    exit, respectively."}, {"sha": "5a95c1c84ab27ef995f21130211822d9bf8db20f", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/fr30-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Ffr30-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Ffr30-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Ffr30-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -24,4 +24,4 @@ These options are defined specifically for the FR30 port.\n \n   Assume that runtime support has been provided and so there is no need\n   to include the simulator library (:samp:`libsim.a`) on the linker\n-  command line.\n\\ No newline at end of file\n+  command line."}, {"sha": "62d9623f3d2c8fc0523be28320b4a4f5f4d64bfe", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/frv-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Ffrv-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Ffrv-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Ffrv-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -276,4 +276,4 @@ FRV Options\n \n   Select the processor type for which to generate code.  Possible values are\n   :samp:`frv`, :samp:`fr550`, :samp:`tomcat`, :samp:`fr500`, :samp:`fr450`,\n-  :samp:`fr405`, :samp:`fr400`, :samp:`fr300` and :samp:`simple`.\n\\ No newline at end of file\n+  :samp:`fr405`, :samp:`fr400`, :samp:`fr300` and :samp:`simple`."}, {"sha": "5c86d2550930e74b6a0e049ca40e4fb87afc688a", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/ft32-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fft32-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fft32-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fft32-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -41,4 +41,4 @@ These options are defined specifically for the FT32 port.\n \n .. option:: -mnopm\n \n-  Do not generate code that reads program memory.\n\\ No newline at end of file\n+  Do not generate code that reads program memory."}, {"sha": "dbe58c4e14c99dc6adec3b78a37cd50914943295", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/gnu-linux-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fgnu-linux-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fgnu-linux-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fgnu-linux-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -53,4 +53,4 @@ These :samp:`-m` options are defined for GNU/Linux targets:\n .. option:: -tno-android-ld\n \n   Disable linking effects of :option:`-mandroid`, i.e., pass standard Linux\n-  linking options to the linker.\n\\ No newline at end of file\n+  linking options to the linker."}, {"sha": "140aee26c7898aad2412911a1d95bdf464f0ac46", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/h8-300-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fh8-300-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fh8-300-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fh8-300-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -61,4 +61,4 @@ These :samp:`-m` options are defined for the H8/300 implementations:\n   The default for the H8/300H and H8S is to align longs and floats on\n   4-byte boundaries.\n   :option:`-malign-300` causes them to be aligned on 2-byte boundaries.\n-  This option has no effect on the H8/300.\n\\ No newline at end of file\n+  This option has no effect on the H8/300."}, {"sha": "f1277d7e6a5ff0dea1f9dd1f1e5c18e1b1360c24", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/hppa-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fhppa-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fhppa-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fhppa-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -242,4 +242,4 @@ These :samp:`-m` options are defined for the HPPA family of computers:\n \n   Add support for multithreading with the :dfn:`dce thread` library\n   under HP-UX.  This option sets flags for both the preprocessor and\n-  linker.\n\\ No newline at end of file\n+  linker."}, {"sha": "0404e2cc9ac168dfa8e928bf48036c51447c1e67", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/ia-64-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fia-64-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fia-64-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fia-64-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -258,4 +258,4 @@ These are the :samp:`-m` options defined for the Intel IA-64 architecture.\n   disallowing more than that number in an instruction group.\n   Otherwise, the limit is 'soft', meaning that non-memory operations\n   are preferred when the limit is reached, but memory operations may still\n-  be scheduled.\n\\ No newline at end of file\n+  be scheduled."}, {"sha": "a73a618c9ff9c0487b1025a631247dd036c30510", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/ibm-rs-6000-and-powerpc-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fibm-rs-6000-and-powerpc-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fibm-rs-6000-and-powerpc-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fibm-rs-6000-and-powerpc-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -1014,4 +1014,4 @@ These :samp:`-m` options are defined for the IBM RS/6000 and PowerPC:\n   The vectorizer will check with target information to determine whether it\n   would be beneficial to unroll the main vectorized loop and by how much.  This\n   parameter sets the upper bound of how much the vectorizer will unroll the main\n-  loop.  The default value is four.\n\\ No newline at end of file\n+  loop.  The default value is four."}, {"sha": "1deb18e4c550929762bbe683ed30f40143bdee80", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/lm32-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Flm32-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Flm32-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Flm32-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -32,4 +32,4 @@ These :option:`-m` options are defined for the LatticeMico32 architecture:\n \n .. option:: -muser-enabled\n \n-  Enable user-defined instructions.\n\\ No newline at end of file\n+  Enable user-defined instructions."}, {"sha": "8eee9bb44b81f1ec4b9ce7189598790e51aea08a", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/loongarch-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Floongarch-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Floongarch-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Floongarch-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -188,4 +188,4 @@ These command-line options are defined for LoongArch targets:\n   environments where no dynamic link is performed, like firmwares, OS\n   kernels, executables linked with :option:`-static` or :option:`-static-pie`.\n   :option:`-mdirect-extern-access` is not compatible with :option:`-fPIC` or\n-  :option:`-fpic`.\n\\ No newline at end of file\n+  :option:`-fpic`."}, {"sha": "7cf58e9a7e64b7578fe9c6c85049b874b5c9cb72", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/m32c-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fm32c-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fm32c-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fm32c-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -35,4 +35,4 @@ M32C Options\n   code into available registers, and the performance penalty of using\n   memory instead of registers.  Note that all modules in a program must\n   be compiled with the same value for this option.  Because of that, you\n-  must not use this option with GCC's default runtime libraries.\n\\ No newline at end of file\n+  must not use this option with GCC's default runtime libraries."}, {"sha": "09e207419fedb9a33859f17519041d631867d7ce", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/m32r-d-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fm32r-d-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fm32r-d-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fm32r-d-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -134,4 +134,4 @@ These :option:`-m` options are defined for Renesas M32R/D architectures:\n \n .. option:: -mno-flush-func\n \n-  Indicates that there is no OS function for flushing the cache.\n\\ No newline at end of file\n+  Indicates that there is no OS function for flushing the cache."}, {"sha": "5593f852ce6dd995d071cd084b85d8144d429c70", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/m680x0-options.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fm680x0-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fm680x0-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fm680x0-options.rst?ref=3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e", "patch": "@@ -404,4 +404,4 @@ are given below.\n .. option:: -mlong-jump-table-offsets\n \n   Use 32-bit offsets in ``switch`` tables.  The default is to use\n-  16-bit offsets.\n\\ No newline at end of file\n+  16-bit offsets."}]}