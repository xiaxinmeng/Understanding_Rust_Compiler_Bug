{"sha": "9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmYzQzNGI3YWEwNTJlOGQ5MTc1ZDNlY2E4ZmMzNTU2MThlNmZhYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-08T12:19:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-08T12:19:45Z"}, "message": "gimple.h (gimple_call_fntype): New function.\n\n2011-04-08  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.h (gimple_call_fntype): New function.\n\t(gimple_call_return_type): Use it.\n\t* expr.c (expand_expr_real_1): Use gimple_call_fntype.\n\t* gimple-low.c (gimple_check_call_args): Likewise.\n\t* gimple.c (gimple_call_flags): Likewise.\n\t(gimple_call_arg_flags): Likewise.\n\t(gimple_call_return_flags): Likewise.\n\t* tree-cfg.c (verify_gimple_call): Likewise.\n\t(do_warn_unused_result): Likewise.\n\t* tree-ssa-ccp.c (ccp_fold_stmt): Likewise.\n\t* value-prof.c (gimple_ic_transform): Fix fndecl check.\n\nFrom-SVN: r172178", "tree": {"sha": "77df3037e3807fabf488254798b809e577345502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77df3037e3807fabf488254798b809e577345502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1f0b40206bed9fc4b62a04ca9f49c8b9cea4dc"}], "stats": {"total": 62, "additions": 38, "deletions": 24}, "files": [{"sha": "0372c2f1a6d89943efd4146def7a383cc9a5a545", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "patch": "@@ -1,3 +1,17 @@\n+2011-04-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.h (gimple_call_fntype): New function.\n+\t(gimple_call_return_type): Use it.\n+\t* expr.c (expand_expr_real_1): Use gimple_call_fntype.\n+\t* gimple-low.c (gimple_check_call_args): Likewise.\n+\t* gimple.c (gimple_call_flags): Likewise.\n+\t(gimple_call_arg_flags): Likewise.\n+\t(gimple_call_return_flags): Likewise.\n+\t* tree-cfg.c (verify_gimple_call): Likewise.\n+\t(do_warn_unused_result): Likewise.\n+\t* tree-ssa-ccp.c (ccp_fold_stmt): Likewise.\n+\t* value-prof.c (gimple_ic_transform): Fix fndecl check.\n+\n 2011-04-08  Dmitry Melnik  <dm@ispras.ru>\n \n \tPR rtl-optimization/48235"}, {"sha": "6dc45666dad6b40825ee663dc5e3f621a5bfedc8", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "patch": "@@ -8533,8 +8533,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t      && (g = SSA_NAME_DEF_STMT (ssa_name))\n \t      && gimple_code (g) == GIMPLE_CALL)\n \t    pmode = promote_function_mode (type, mode, &unsignedp,\n-\t\t\t\t\t   TREE_TYPE\n-\t\t\t\t\t   (TREE_TYPE (gimple_call_fn (g))),\n+\t\t\t\t\t   gimple_call_fntype (g),\n \t\t\t\t\t   2);\n \t  else\n \t    pmode = promote_decl_mode (exp, &unsignedp);"}, {"sha": "9968493cd2cb24448c184e8c973a6f33b34276bc", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "patch": "@@ -222,11 +222,10 @@ gimple_check_call_args (gimple stmt)\n \n   /* Get argument types for verification.  */\n   fndecl = gimple_call_fndecl (stmt);\n-  parms = NULL_TREE;\n   if (fndecl)\n     parms = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n-  else if (POINTER_TYPE_P (TREE_TYPE (gimple_call_fn (stmt))))\n-    parms = TYPE_ARG_TYPES (TREE_TYPE (TREE_TYPE (gimple_call_fn (stmt))));\n+  else\n+    parms = TYPE_ARG_TYPES (gimple_call_fntype (stmt));\n \n   /* Verify if the type of the argument matches that of the function\n      declaration.  If we cannot verify this or there is a mismatch,"}, {"sha": "4675d14193e48f5a1b74cf1664e6b9b8f9be01ab", "filename": "gcc/gimple.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "patch": "@@ -1780,15 +1780,17 @@ gimple_call_flags (const_gimple stmt)\n {\n   int flags;\n   tree decl = gimple_call_fndecl (stmt);\n-  tree t;\n \n   if (decl)\n     flags = flags_from_decl_or_type (decl);\n   else\n     {\n-      t = TREE_TYPE (gimple_call_fn (stmt));\n-      if (t && TREE_CODE (t) == POINTER_TYPE)\n-\tflags = flags_from_decl_or_type (TREE_TYPE (t));\n+      tree t = TREE_TYPE (gimple_call_fn (stmt));\n+      /* ???  We can end up being called from gimple_set_modified from\n+         gsi_remove in which case the function being called can\n+\t be a released SSA name.  Give up in that case.  */\n+      if (t)\n+\tflags = flags_from_decl_or_type (gimple_call_fntype (stmt));\n       else\n \tflags = 0;\n     }\n@@ -1804,7 +1806,7 @@ gimple_call_flags (const_gimple stmt)\n int\n gimple_call_arg_flags (const_gimple stmt, unsigned arg)\n {\n-  tree type = TREE_TYPE (TREE_TYPE (gimple_call_fn (stmt)));\n+  tree type = gimple_call_fntype (stmt);\n   tree attr = lookup_attribute (\"fn spec\", TYPE_ATTRIBUTES (type));\n   if (!attr)\n     return 0;\n@@ -1848,7 +1850,7 @@ gimple_call_return_flags (const_gimple stmt)\n   if (gimple_call_flags (stmt) & ECF_MALLOC)\n     return ERF_NOALIAS;\n \n-  type = TREE_TYPE (TREE_TYPE (gimple_call_fn (stmt)));\n+  type = gimple_call_fntype (stmt);\n   attr = lookup_attribute (\"fn spec\", TYPE_ATTRIBUTES (type));\n   if (!attr)\n     return 0;"}, {"sha": "be45e4b921de4c0d3ad8feaff08e26105905c570", "filename": "gcc/gimple.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "patch": "@@ -2011,6 +2011,13 @@ gimple_call_fn (const_gimple gs)\n   return gimple_op (gs, 1);\n }\n \n+/* Return the function type of the function called by GS.  */\n+\n+static inline tree\n+gimple_call_fntype (const_gimple gs)\n+{\n+  return TREE_TYPE (TREE_TYPE (gimple_call_fn (gs)));\n+}\n \n /* Return a pointer to the tree node representing the function called by call\n    statement GS.  */\n@@ -2073,13 +2080,9 @@ gimple_call_fndecl (const_gimple gs)\n static inline tree\n gimple_call_return_type (const_gimple gs)\n {\n-  tree fn = gimple_call_fn (gs);\n-  tree type = TREE_TYPE (fn);\n-\n-  /* See through the pointer.  */\n-  type = TREE_TYPE (type);\n+  tree type = gimple_call_fntype (gs);\n \n-  /* The type returned by a FUNCTION_DECL is the type of its\n+  /* The type returned by a function is the type of its\n      function type.  */\n   return TREE_TYPE (type);\n }"}, {"sha": "fc8c94033bc637c4903012b37cff040421219ccd", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "patch": "@@ -3086,7 +3086,7 @@ verify_gimple_call (gimple stmt)\n       return true;\n     }\n \n-  fntype = TREE_TYPE (TREE_TYPE (fn));\n+  fntype = gimple_call_fntype (stmt);\n   if (gimple_call_lhs (stmt)\n       && !useless_type_conversion_p (TREE_TYPE (gimple_call_lhs (stmt)),\n \t\t\t\t     TREE_TYPE (fntype))\n@@ -7441,7 +7441,7 @@ do_warn_unused_result (gimple_seq seq)\n \t     LHS.  All calls whose value is ignored should be\n \t     represented like this.  Look for the attribute.  */\n \t  fdecl = gimple_call_fndecl (g);\n-\t  ftype = TREE_TYPE (TREE_TYPE (gimple_call_fn (g)));\n+\t  ftype = gimple_call_fntype (g);\n \n \t  if (lookup_attribute (\"warn_unused_result\", TYPE_ATTRIBUTES (ftype)))\n \t    {"}, {"sha": "4775a2a567f5cf41eff7b88ff5499b3de3f23f18", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "patch": "@@ -1727,7 +1727,7 @@ ccp_fold_stmt (gimple_stmt_iterator *gsi)\n \t   this can use the argument slot types for type verification\n \t   instead of the current argument type.  We also can safely\n \t   drop qualifiers here as we are dealing with constants anyway.  */\n-\targt = TYPE_ARG_TYPES (TREE_TYPE (TREE_TYPE (gimple_call_fn (stmt))));\n+\targt = TYPE_ARG_TYPES (gimple_call_fntype (stmt));\n \tfor (i = 0; i < gimple_call_num_args (stmt) && argt;\n \t     ++i, argt = TREE_CHAIN (argt))\n \t  {"}, {"sha": "71e889dfdf5c2c95ce4643f24d78663f6ae01dad", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfc434b7aa052e8d9175d3eca8fc355618e6fab/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=9bfc434b7aa052e8d9175d3eca8fc355618e6fab", "patch": "@@ -1230,16 +1230,13 @@ gimple_ic_transform (gimple stmt)\n   histogram_value histogram;\n   gcov_type val, count, all, bb_all;\n   gcov_type prob;\n-  tree callee;\n   gimple modify;\n   struct cgraph_node *direct_call;\n \n   if (gimple_code (stmt) != GIMPLE_CALL)\n     return false;\n \n-  callee = gimple_call_fn (stmt);\n-\n-  if (TREE_CODE (callee) == FUNCTION_DECL)\n+  if (gimple_call_fndecl (stmt) != NULL_TREE)\n     return false;\n \n   histogram = gimple_histogram_value_of_type (cfun, stmt, HIST_TYPE_INDIR_CALL);"}]}