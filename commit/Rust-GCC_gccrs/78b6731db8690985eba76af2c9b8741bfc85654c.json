{"sha": "78b6731db8690985eba76af2c9b8741bfc85654c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhiNjczMWRiODY5MDk4NWViYTc2YWYyYzliODc0MWJmYzg1NjU0Yw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-18T21:14:34Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-18T21:14:34Z"}, "message": "tree-cfg.c (tree_forwarder_block_p): Don't set forwardable.\n\n\t* tree-cfg.c (tree_forwarder_block_p): Don't set forwardable.\n\t(thread_jumps): Use forwardable as cache of\n\ttree_forwarder_block_p throughout the function.\n\nFrom-SVN: r89243", "tree": {"sha": "3d4871e26d23fd7035d46a934e1cebedf18928a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d4871e26d23fd7035d46a934e1cebedf18928a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78b6731db8690985eba76af2c9b8741bfc85654c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b6731db8690985eba76af2c9b8741bfc85654c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78b6731db8690985eba76af2c9b8741bfc85654c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b6731db8690985eba76af2c9b8741bfc85654c/comments", "author": null, "committer": null, "parents": [{"sha": "320b0f6a1e82aa208cdf6c84453d1a6aa6011000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320b0f6a1e82aa208cdf6c84453d1a6aa6011000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320b0f6a1e82aa208cdf6c84453d1a6aa6011000"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "94e41010025a4d89277649ebcf3864866b374d3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b6731db8690985eba76af2c9b8741bfc85654c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b6731db8690985eba76af2c9b8741bfc85654c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78b6731db8690985eba76af2c9b8741bfc85654c", "patch": "@@ -1,3 +1,9 @@\n+2004-10-18  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-cfg.c (tree_forwarder_block_p): Don't set forwardable.\n+\t(thread_jumps): Use forwardable as cache of\n+\ttree_forwarder_block_p throughout the function.\n+\n 2004-10-18  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* cfg.c (dump_flow_info): Remove redundant dump of reg life info."}, {"sha": "3fd8232719bf3d8a88de6d48217e90caa1857753", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b6731db8690985eba76af2c9b8741bfc85654c/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b6731db8690985eba76af2c9b8741bfc85654c/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=78b6731db8690985eba76af2c9b8741bfc85654c", "patch": "@@ -3720,11 +3720,6 @@ tree_forwarder_block_p (basic_block bb)\n   edge e;\n   edge_iterator ei;\n \n-  /* If we have already determined that this block is not forwardable,\n-     then no further checks are necessary.  */\n-  if (! bb_ann (bb)->forwardable)\n-    return false;\n-\n   /* BB must have a single outgoing edge.  */\n   if (EDGE_COUNT (bb->succs) != 1\n       /* BB can not have any PHI nodes.  This could potentially be\n@@ -3735,10 +3730,7 @@ tree_forwarder_block_p (basic_block bb)\n       || EDGE_SUCC (bb, 0)->dest == EXIT_BLOCK_PTR\n       /* BB may not have an abnormal outgoing edge.  */\n       || (EDGE_SUCC (bb, 0)->flags & EDGE_ABNORMAL))\n-    {\n-      bb_ann (bb)->forwardable = 0;\n-      return false; \n-    }\n+    return false; \n \n #if ENABLE_CHECKING\n   gcc_assert (bb != ENTRY_BLOCK_PTR);\n@@ -3747,10 +3739,7 @@ tree_forwarder_block_p (basic_block bb)\n   /* Successors of the entry block are not forwarders.  */\n   FOR_EACH_EDGE (e, ei, ENTRY_BLOCK_PTR->succs)\n     if (e->dest == bb)\n-      {\n-\tbb_ann (bb)->forwardable = 0;\n-\treturn false;\n-      }\n+      return false;\n \n   /* Now walk through the statements.  We can ignore labels, anything else\n      means this is not a forwarder block.  */\n@@ -3766,7 +3755,6 @@ tree_forwarder_block_p (basic_block bb)\n \t  break;\n \n \tdefault:\n-\t  bb_ann (bb)->forwardable = 0;\n \t  return false;\n \t}\n     }\n@@ -3794,21 +3782,17 @@ thread_jumps (void)\n   bool retval = false;\n \n   FOR_EACH_BB (bb)\n-    bb_ann (bb)->forwardable = 1;\n+    bb_ann (bb)->forwardable = tree_forwarder_block_p (bb);\n \n   FOR_EACH_BB (bb)\n     {\n       edge_iterator ei;\n+      bool this_jump_threaded = false;\n \n       /* Don't waste time on forwarders.  */\n-      if (tree_forwarder_block_p (bb))\n+      if (bb_ann (bb)->forwardable)\n \tcontinue;\n \n-      /* This block is now part of a forwarding path, mark it as not\n-\t forwardable so that we can detect loops.  This bit will be\n-\t reset below.  */\n-      bb_ann (bb)->forwardable = 0;\n-\n       /* Examine each of our block's successors to see if it is\n \t forwardable.  */\n       for (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n@@ -3819,7 +3803,7 @@ thread_jumps (void)\n \t  /* If the edge is abnormal or its destination is not\n \t     forwardable, then there's nothing to do.  */\n \t  if ((e->flags & EDGE_ABNORMAL)\n-\t      || !tree_forwarder_block_p (e->dest))\n+\t      || !bb_ann (e->dest)->forwardable)\n \t    {\n \t      ei_next (&ei);\n \t      continue;\n@@ -3834,7 +3818,7 @@ thread_jumps (void)\n \t  last = EDGE_SUCC (e->dest, 0);\n \t  bb_ann (e->dest)->forwardable = 0;\n \t  for (dest = EDGE_SUCC (e->dest, 0)->dest;\n-\t       tree_forwarder_block_p (dest);\n+\t       bb_ann (dest)->forwardable;\n \t       last = EDGE_SUCC (dest, 0),\n \t       dest = EDGE_SUCC (dest, 0)->dest)\n \t    bb_ann (dest)->forwardable = 0;\n@@ -3875,7 +3859,7 @@ thread_jumps (void)\n \t    }\n \n \t  /* Perform the redirection.  */\n-\t  retval = true;\n+\t  retval = this_jump_threaded = true;\n \t  old_dest = e->dest;\n \t  e = redirect_edge_and_branch (e, dest);\n \n@@ -3955,9 +3939,13 @@ thread_jumps (void)\n \t    }\n \t}\n \n-      /* Reset the forwardable bit on our block since it's no longer in\n-\t a forwarding chain path.  */\n-      bb_ann (bb)->forwardable = 1;\n+      /* If we succeeded in threading a jump at BB, update the\n+\t forwardable mark as BB may have become a new forwarder block.\n+\t This could happen if we have a useless \"if\" statement whose\n+\t two arms eventually merge without any intervening\n+\t statements.  */\n+      if (this_jump_threaded && tree_forwarder_block_p (bb))\n+\tbb_ann (bb)->forwardable = true;\n     }\n \n   return retval;"}]}