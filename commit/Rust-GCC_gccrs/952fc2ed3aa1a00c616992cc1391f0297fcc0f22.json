{"sha": "952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUyZmMyZWQzYWExYTAwYzYxNjk5MmNjMTM5MWYwMjk3ZmNjMGYyMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-07-20T23:04:58Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-07-20T23:04:58Z"}, "message": "alpha.h (CPP_SPEC): Tidy.\n\n        * alpha.h (CPP_SPEC): Tidy.  Hook to cpp_cpu and cpp_subtarget.\n        (CPP_SUBTARGET_SPEC): Default to empty string.\n        (CPP_AM_*, CPP_IM_*, CPP_CPU_*, CPP_CPU_SPEC): New.\n        (EXTRA_SPECS, SUBTARGET_EXTRA_SPECS): New.\n        * alpha/elf.h (LD_SPEC): Use %(elf_dynamic_linker).\n        * alpha/linux-elf.h (SUBTARGET_EXTRA_SPECS): New.\n        (LIB_SPEC): Tidy.\n        * alpha/linux.h (CPP_PREDEFINES): Tidy.\n        * alpha/netbsd-elf.h (SUBTARGET_EXTRA_SPECS): New.\n        * alpha/netbsd.h (CPP_PREDEFINES): Tidy.\n        * alpha/osf.h (CPP_PREDEFINES): Remove bits subsumed by CPP_CPU_SPEC.\n        * alpha/win-nt.h (CPP_PREDEFINES): Likewise.\n        * alpha/vsf.h (CPP_PREDEFINES): Likewise.\n        (CPP_SUBTARGET_SPEC): New.  Do this instead of overriding CPP_SPEC.\n        * alpha/vxworks.h: Likewise.\n\nFrom-SVN: r21311", "tree": {"sha": "b99a2b000013feecc853e3fb38025de86c857f46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b99a2b000013feecc853e3fb38025de86c857f46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/comments", "author": null, "committer": null, "parents": [{"sha": "254fcdd2fe59a8a44cc32e9c0262f47de3fd0d6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254fcdd2fe59a8a44cc32e9c0262f47de3fd0d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254fcdd2fe59a8a44cc32e9c0262f47de3fd0d6a"}], "stats": {"total": 196, "additions": 145, "deletions": 51}, "files": [{"sha": "d7057106f6917b91fe4b9341503cd6f8edfd21aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -1,3 +1,21 @@\n+Mon Jul 20 22:34:17 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.h (CPP_SPEC): Tidy.  Hook to cpp_cpu and cpp_subtarget.\n+\t(CPP_SUBTARGET_SPEC): Default to empty string.\n+\t(CPP_AM_*, CPP_IM_*, CPP_CPU_*, CPP_CPU_SPEC): New.\n+\t(EXTRA_SPECS, SUBTARGET_EXTRA_SPECS): New.\n+\t* alpha/elf.h (LD_SPEC): Use %(elf_dynamic_linker).\n+\t* alpha/linux-elf.h (SUBTARGET_EXTRA_SPECS): New.\n+\t(LIB_SPEC): Tidy.\n+\t* alpha/linux.h (CPP_PREDEFINES): Tidy.\n+\t* alpha/netbsd-elf.h (SUBTARGET_EXTRA_SPECS): New.\n+\t* alpha/netbsd.h (CPP_PREDEFINES): Tidy.\n+\t* alpha/osf.h (CPP_PREDEFINES): Remove bits subsumed by CPP_CPU_SPEC.\n+\t* alpha/win-nt.h (CPP_PREDEFINES): Likewise.\n+\t* alpha/vsf.h (CPP_PREDEFINES): Likewise.\n+\t(CPP_SUBTARGET_SPEC): New.  Do this instead of overriding CPP_SPEC.\n+\t* alpha/vxworks.h: Likewise.\n+\n Mon Jul 20 22:51:57 1998  Ken Raeburn  <raeburn@cygnus.com>\n \n \t* mips.md (reload_outsi): Added missing REGNO call."}, {"sha": "6e612afc5748daf254742a3e7dc9cea0c78da409", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 95, "deletions": 9, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -23,14 +23,18 @@ Boston, MA 02111-1307, USA.  */\n /* Write out the correct language type definition for the header files.  \n    Unless we have assembler language, write out the symbols for C.  */\n #define CPP_SPEC \"\\\n-%{!.S:\t-D__LANGUAGE_C__ -D__LANGUAGE_C %{!ansi:-DLANGUAGE_C}}  \\\n-%{.S:\t-D__LANGUAGE_ASSEMBLY__ -D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n-%{.cc:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.cxx:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.C:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.m:\t-D__LANGUAGE_OBJECTIVE_C__ -D__LANGUAGE_OBJECTIVE_C} \\\n-%{mieee:-D_IEEE_FP} \\\n-%{mieee-with-inexact:-D_IEEE_FP -D_IEEE_FP_INEXACT}\"\n+%{!undef:\\\n+%{.S:-D__LANGUAGE_ASSEMBLY__ -D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY }}\\\n+%{.cc|.cxx|.C:-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus }\\\n+%{.m:-D__LANGUAGE_OBJECTIVE_C__ -D__LANGUAGE_OBJECTIVE_C }\\\n+%{!.S:%{!.cc:%{!.cxx:%{!.C:%{!.m:-D__LANGUAGE_C__ -D__LANGUAGE_C %{!ansi:-DLANGUAGE_C }}}}}}\\\n+%{mieee:-D_IEEE_FP }\\\n+%{mieee-with-inexact:-D_IEEE_FP -D_IEEE_FP_INEXACT }}\\\n+%(cpp_cpu) %(cpp_subtarget)\"\n+\n+#ifndef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC \"\"\n+#endif\n \n /* Set the spec to use for signed char.  The default tests the above macro\n    but DEC's compiler can't handle the conditional in a \"constant\"\n@@ -240,6 +244,88 @@ extern char *alpha_mlat_string;\t/* For -mmemory-latency= */\n   {\"memory-latency=\",\t&alpha_mlat_string},\t\\\n }\n \n+/* Attempt to describe CPU characteristics to the preprocessor.  */\n+\n+/* Corresponding to amask... */\n+#define CPP_AM_BWX_SPEC\t\"-D__alpha_bwx__ -Acpu(bwx)\"\n+#define CPP_AM_MAX_SPEC\t\"-D__alpha_max__ -Acpu(max)\"\n+#define CPP_AM_CIX_SPEC\t\"-D__alpha_cix__ -Acpu(cix)\"\n+\n+/* Corresponding to implver... */\n+#define CPP_IM_EV4_SPEC\t\"-D__alpha_ev4__ -Acpu(ev4)\"\n+#define CPP_IM_EV5_SPEC\t\"-D__alpha_ev5__ -Acpu(ev5)\"\n+#define CPP_IM_EV6_SPEC\t\"-D__alpha_ev6__ -Acpu(ev6)\"\n+\n+/* Common combinations.  */\n+#define CPP_CPU_EV4_SPEC\t\"%(cpp_im_ev4)\"\n+#define CPP_CPU_EV5_SPEC\t\"%(cpp_im_ev5)\"\n+#define CPP_CPU_EV56_SPEC\t\"%(cpp_im_ev5) %(cpp_am_bwx)\"\n+#define CPP_CPU_PCA56_SPEC\t\"%(cpp_im_ev5) %(cpp_am_bwx) %(cpp_am_max)\"\n+#define CPP_CPU_EV6_SPEC\t\"%(cpp_im_ev6) %(cpp_am_bwx) %(cpp_am_max) %(cpp_am_cix)\"\n+\n+#ifndef CPP_CPU_DEFAULT_SPEC\n+# if TARGET_CPU_DEFAULT & MASK_CPU_EV6\n+#  define CPP_CPU_DEFAULT_SPEC\t\tCPP_CPU_EV6_SPEC\n+# else\n+#  if TARGET_CPU_DEFAULT & MASK_CPU_EV5\n+#   if TARGET_CPU_DEFAULT & MASK_MAX\n+#    define CPP_CPU_DEFAULT_SPEC\tCPP_CPU_PCA56_SPEC\n+#   else\n+#    if TARGET_CPU_DEFAULT & MASK_BWX\n+#     define CPP_CPU_DEFAULT_SPEC\tCPP_CPU_EV56_SPEC\n+#    else\n+#     define CPP_CPU_DEFAULT_SPEC\tCPP_CPU_EV5_SPEC\n+#    endif\n+#   endif\n+#  else\n+#   define CPP_CPU_DEFAULT_SPEC\t\tCPP_CPU_EV4_SPEC\n+#  endif\n+# endif\n+#endif /* CPP_CPU_DEFAULT_SPEC */\n+\n+#ifndef CPP_CPU_SPEC\n+#define CPP_CPU_SPEC \"\\\n+%{!undef:-Acpu(alpha) -Amachine(alpha) -D__alpha -D__alpha__ \\\n+%{mcpu=ev4|mcpu=21064:%(cpp_cpu_ev4) }\\\n+%{mcpu=ev5|mcpu=21164:%(cpp_cpu_ev5) }\\\n+%{mcpu=ev56|mcpu=21164a:%(cpp_cpu_ev56) }\\\n+%{mcpu=pca56|mcpu=21164pc|mcpu=21164PC:%(cpp_cpu_pca56) }\\\n+%{mcpu=ev6|mcpu=21264:%(cpp_cpu_ev6) }\\\n+%{!mcpu*:%(cpp_cpu_default) }}\"\n+#endif\n+\n+/* This macro defines names of additional specifications to put in the\n+   specs that can be used in various specifications like CC1_SPEC.  Its\n+   definition is an initializer with a subgrouping for each command option.\n+\n+   Each subgrouping contains a string constant, that defines the\n+   specification name, and a string constant that used by the GNU CC driver\n+   program.\n+\n+   Do not define this macro if it does not need to do anything.  */\n+\n+#ifndef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS\n+#endif\n+\n+#define EXTRA_SPECS\t\t\t\t\\\n+  { \"cpp_am_bwx\", CPP_AM_BWX_SPEC },\t\t\\\n+  { \"cpp_am_max\", CPP_AM_MAX_SPEC },\t\t\\\n+  { \"cpp_am_cix\", CPP_AM_CIX_SPEC },\t\t\\\n+  { \"cpp_im_ev4\", CPP_IM_EV4_SPEC },\t\t\\\n+  { \"cpp_im_ev5\", CPP_IM_EV5_SPEC },\t\t\\\n+  { \"cpp_im_ev6\", CPP_IM_EV6_SPEC },\t\t\\\n+  { \"cpp_cpu_ev4\", CPP_CPU_EV4_SPEC },\t\t\\\n+  { \"cpp_cpu_ev5\", CPP_CPU_EV5_SPEC },\t\t\\\n+  { \"cpp_cpu_ev56\", CPP_CPU_EV56_SPEC },\t\\\n+  { \"cpp_cpu_pca56\", CPP_CPU_PCA56_SPEC },\t\\\n+  { \"cpp_cpu_ev6\", CPP_CPU_EV6_SPEC },\t\t\\\n+  { \"cpp_cpu_default\", CPP_CPU_DEFAULT_SPEC },\t\\\n+  { \"cpp_cpu\", CPP_CPU_SPEC },\t\t\t\\\n+  { \"cpp_subtarget\", CPP_SUBTARGET_SPEC },\t\\\n+  SUBTARGET_EXTRA_SPECS\n+\n+\n /* Sometimes certain combinations of command options do not make sense\n    on a particular target machine.  You can define a macro\n    `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n@@ -1209,7 +1295,7 @@ do {\t\t\t\t\t\t\\\n /* A C expression whose value is RTL representing the value of the return\n    address for the frame COUNT steps up from the current frame.\n    FRAMEADDR is the frame pointer of the COUNT frame, or the frame pointer of\n-   the COUNT-1 frame if RETURN_ADDR_IN_PREVIOUS_FRAME} is defined.  */\n+   the COUNT-1 frame if RETURN_ADDR_IN_PREVIOUS_FRAME is defined.  */\n \n #define RETURN_ADDR_RTX  alpha_return_addr\n extern struct rtx_def *alpha_return_addr ();"}, {"sha": "4f4703c14ef0e7943d1a12efbf482426618f6edc", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -43,7 +43,7 @@ Boston, MA 02111-1307, USA.    */\n   %{!shared:\t\t\t\t\t\t\t\\\n     %{!static:\t\t\t\t\t\t\t\\\n       %{rdynamic:-export-dynamic}\t\t\t\t\\\n-      %{!dynamic-linker:-dynamic-linker \" ELF_DYNAMIC_LINKER \"}}\\\n+      %{!dynamic-linker:-dynamic-linker %(elf_dynamic_linker)}}\t\\\n     %{static:-static}}\"\n \n /* Output at beginning of assembler file.  */"}, {"sha": "bc271506b5c8944a4a98593c4d31952f0747ebcb", "filename": "gcc/config/alpha/linux-ecoff.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Flinux-ecoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Flinux-ecoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux-ecoff.h?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -22,8 +22,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (Alpha GNU/Linux for ECOFF)\");\n \n-#undef SUB_CPP_PREDEFINES\n-#define SUB_CPP_PREDEFINES \"-D__ECOFF__\"\n+#undef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC \"-D__ECOFF__\"\n \n #undef LINK_SPEC\n #define LINK_SPEC \"-G 8 %{O*:-O3} %{!O*:-O1}\""}, {"sha": "90009f1c5d0ccb406c1fa617f1d68d718373d654", "filename": "gcc/config/alpha/linux-elf.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux-elf.h?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -22,13 +22,17 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (Alpha GNU/Linux for ELF)\");\n \n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS \\\n+{ \"elf_dynamic_linker\", ELF_DYNAMIC_LINKER },\n+\n #undef SUB_CPP_PREDEFINES\n-#define SUB_CPP_PREDEFINES \"-D__ELF__\"\n+#define SUB_CPP_PREDEFINES\t\"-D__ELF__\"\n \n #ifdef USE_GNULIBC_1\n-#define ELF_DYNAMIC_LINKER  \"/lib/ld.so.1\"\n+#define ELF_DYNAMIC_LINKER\t\"/lib/ld.so.1\"\n #else\n-#define ELF_DYNAMIC_LINKER  \"/lib/ld-linux.so.2\"\n+#define ELF_DYNAMIC_LINKER\t\"/lib/ld-linux.so.2\"\n #endif\n \n #ifndef USE_GNULIBC_1\n@@ -39,7 +43,5 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifndef USE_GNULIBC_1\n #undef LIB_SPEC\n #define LIB_SPEC \\\n-  \"%{shared: -lc} \\\n-   %{!shared: %{mieee-fp:-lieee} %{pthread:-lpthread} \\\n-\t%{profile:-lc_p} %{!profile: -lc}}\"\n+\"%{shared:-lc}%{!shared:%{pthread:-lpthread }%{profile:-lc_p}%{!profile:-lc}} \"\n #endif"}, {"sha": "39c1f575ecee1add63f189cf70e6537091c9038f", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -23,9 +23,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define TARGET_DEFAULT (MASK_FP | MASK_FPREGS | MASK_GAS)\n \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"\\\n--D__alpha -D__alpha__ -D__linux__ -D__linux -D_LONGLONG -Dlinux -Dunix \\\n--Asystem(linux) -Acpu(alpha) -Amachine(alpha) \" SUB_CPP_PREDEFINES\n+#define CPP_PREDEFINES \\\n+\"-Dlinux -Dunix -Asystem(linux) -D_LONGLONG \" SUB_CPP_PREDEFINES\n \n #undef LIB_SPEC\n #define LIB_SPEC \"%{pg:-lgmon} %{pg:-lc_p} %{!pg:-lc}\""}, {"sha": "17d7bb0e4ae1f9052aced584135e7df2afad4a06", "filename": "gcc/config/alpha/netbsd-elf.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd-elf.h?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -24,4 +24,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef SUB_CPP_PREDEFINES\n #define SUB_CPP_PREDEFINES \"-D__ELF__\"\n \n-#define ELF_DYNAMIC_LINKER  \"/usr/libexec/ld.elf_so\"\n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS \\\n+{ \"elf_dynamic_linker\", ELF_DYNAMIC_LINKER },\n+\n+#define ELF_DYNAMIC_LINKER\t\"/usr/libexec/ld.elf_so\""}, {"sha": "054e9e063b4656ec2da83fa2a748dd89e0f04655", "filename": "gcc/config/alpha/netbsd.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd.h?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -22,9 +22,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define TARGET_DEFAULT (MASK_FP | MASK_FPREGS | MASK_GAS)\n \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"\\\n--D__alpha -D__alpha__ -D__linux__ -D__linux -D_LONGLONG -Dnetbsd -Dunix \\\n--Asystem(linux) -Acpu(alpha) -Amachine(alpha) \" SUB_CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-D_LONGLONG -Dnetbsd -Dunix \" SUB_CPP_PREDEFINES\n \n #undef LIB_SPEC\n #define LIB_SPEC \"%{pg:-lgmon} %{pg:-lc_p} %{!pg:-lc}\""}, {"sha": "956961f7cf3c3826fa627983d21beb66bab1c6d3", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -27,8 +27,8 @@ Boston, MA 02111-1307, USA.  */\n /* Names to predefine in the preprocessor for this target machine.  */\n \n #define CPP_PREDEFINES \"\\\n--Dunix -D__osf__ -D__alpha -D__alpha__ -D_LONGLONG -DSYSTYPE_BSD  \\\n--D_SYSTYPE_BSD -Asystem(unix) -Asystem(xpg4) -Acpu(alpha) -Amachine(alpha)\"\n+-Dunix -D__osf__ -D_LONGLONG -DSYSTYPE_BSD \\\n+-D_SYSTYPE_BSD -Asystem(unix) -Asystem(xpg4)\"\n \n /* Under OSF4, -p and -pg require -lprof1, and -lprof1 requires -lpdf.  */\n "}, {"sha": "44cf5bf82dff5093b3068a554c41a477b70f3e93", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -31,20 +31,13 @@ Boston, MA 02111-1307, USA.  */\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n-\"-D__ALPHA -Dvms -DVMS -D__alpha__ -D__alpha -D__vms__ -D__VMS__\\\n- -Asystem(vms) -Acpu(alpha) -Amachine(alpha)\"\n+\"-D__ALPHA -Dvms -DVMS -D__vms__ -D__VMS__ -Asystem(vms)\"\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"\\\n+#undef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC \"\\\n %{mfloat-ieee:-D__IEEE_FLOAT} \\\n %{mfloat-vax:-D__G_FLOAT} \\\n-%{!mfloat-vax:-D__IEEE_FLOAT} \\\n-%{!.S:\t-D__LANGUAGE_C__ -D__LANGUAGE_C %{!ansi:-DLANGUAGE_C}}  \\\n-%{.S:\t-D__LANGUAGE_ASSEMBLY__ -D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n-%{.cc:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.cxx:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.C:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.m:\t-D__LANGUAGE_OBJECTIVE_C__ -D__LANGUAGE_OBJECTIVE_C}\"\n+%{!mfloat-vax:-D__IEEE_FLOAT}\"\n \n /* Under OSF4, -p and -pg require -lprof1, and -lprof1 requires -lpdf.  */\n "}, {"sha": "6dee4b3e721182c88464b9c2e9748f4878c85b37", "filename": "gcc/config/alpha/vxworks.h", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvxworks.h?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -20,20 +20,16 @@ Boston, MA 02111-1307, USA.  */\n \n /* This file just exists to give specs for the Alpha running on VxWorks.  */\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"\\\n+#undef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC \"\\\n %{mvxsim:-DCPU=SIMALPHADUNIX} \\\n-%{!mvxsim: %{!mcpu*:-DCPU=21064} \\\n-           %{mcpu=21064:-DCPU=21064} \\\n-           %{mcpu=21164:-DCPU=21164}} \\\n-%{posix: -D_POSIX_SOURCE} \\\n-%{!.S:\t-D__LANGUAGE_C__ -D__LANGUAGE_C %{!ansi:-DLANGUAGE_C}}  \\\n-%{.S:\t-D__LANGUAGE_ASSEMBLY__ -D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}}\"\n+%{!mvxsim: %{!mcpu*|mcpu=21064:-DCPU=21064} %{mcpu=21164:-DCPU=21164}} \\\n+%{posix: -D_POSIX_SOURCE}\"\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"\\\n -D__vxworks -D__alpha_vxworks -Asystem(vxworks) \\\n--Asystem(embedded) -D_LONGLONG  -Acpu(alpha) -Amachine(alpha)\"\n+-Asystem(embedded) -D_LONGLONG\"\n \n /* VxWorks does all the library stuff itself.  */\n "}, {"sha": "339ed4465a39208a0cca955e5c8b9a837a72dc26", "filename": "gcc/config/alpha/win-nt.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952fc2ed3aa1a00c616992cc1391f0297fcc0f22/gcc%2Fconfig%2Falpha%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fwin-nt.h?ref=952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "patch": "@@ -29,10 +29,8 @@ Boston, MA 02111-1307, USA.  */\n /* Names to predefine in the preprocessor for this target machine.  */\n \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-DWIN32 -D_WIN32 -DWINNT -D__STDC__=0 -DALMOST_STDC\\\n-  -D_M_ALPHA -D_ALPHA_ -D__alpha -D__alpha__\\\n-  -D_LONGLONG -D__unaligned= -D__stdcall= \\\n-  -Asystem(winnt) -Acpu(alpha) -Amachine(alpha)\"\n+#define CPP_PREDEFINES \"-DWIN32 -D_WIN32 -DWINNT -D__STDC__=0 -DALMOST_STDC \\\n+-D_M_ALPHA -D_ALPHA_ -D_LONGLONG -D__unaligned= -D__stdcall= -Asystem(winnt)\"\n \n #undef ASM_SPEC\n #undef ASM_FINAL_SPEC"}]}