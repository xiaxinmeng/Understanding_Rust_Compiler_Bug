{"sha": "48b11d3bb83e27795a419e473e4822329216806a", "node_id": "C_kwDOANBUbNoAKDQ4YjExZDNiYjgzZTI3Nzk1YTQxOWU0NzNlNDgyMjMyOTIxNjgwNmE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-11-07T13:43:04Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-12-05T00:17:26Z"}, "message": "Fix undefined behaviour issues on macos\n\nThis adds missing copy constructors to HIR::PathExprSegment which were\nwrongly defaulting to empty vectors when apply specified generic arguments\nto method calls.", "tree": {"sha": "5cb509b930d3e00e7be06340d11f7ee4c5bb6542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cb509b930d3e00e7be06340d11f7ee4c5bb6542"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48b11d3bb83e27795a419e473e4822329216806a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b11d3bb83e27795a419e473e4822329216806a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b11d3bb83e27795a419e473e4822329216806a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b11d3bb83e27795a419e473e4822329216806a/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e39fadcd0aa4d52d53667e2adad9a6677f7e9adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39fadcd0aa4d52d53667e2adad9a6677f7e9adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39fadcd0aa4d52d53667e2adad9a6677f7e9adf"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "693704e538a06afce10facbb72d324e347e21bf1", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b11d3bb83e27795a419e473e4822329216806a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b11d3bb83e27795a419e473e4822329216806a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=48b11d3bb83e27795a419e473e4822329216806a", "patch": "@@ -1872,7 +1872,8 @@ class MethodCallExpr : public ExprWithoutBlock\n \n   std::unique_ptr<Expr> &get_receiver () { return receiver; }\n \n-  PathExprSegment get_method_name () const { return method_name; };\n+  PathExprSegment &get_method_name () { return method_name; };\n+  const PathExprSegment &get_method_name () const { return method_name; };\n \n   size_t num_params () const { return params.size (); }\n "}, {"sha": "761526b4fc936bd976f60ef33756aa577347d3f8", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b11d3bb83e27795a419e473e4822329216806a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b11d3bb83e27795a419e473e4822329216806a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=48b11d3bb83e27795a419e473e4822329216806a", "patch": "@@ -43,7 +43,7 @@ class PathExpr;\n // rust-path.h\n class PathIdentSegment;\n struct GenericArgsBinding;\n-struct GenericArgs;\n+class GenericArgs;\n class PathExprSegment;\n class PathPattern;\n class PathInExpression;"}, {"sha": "8cc16f367cf38e07f916f01c006b23eedf0f984c", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b11d3bb83e27795a419e473e4822329216806a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b11d3bb83e27795a419e473e4822329216806a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=48b11d3bb83e27795a419e473e4822329216806a", "patch": "@@ -140,8 +140,7 @@ class ConstGenericArg\n   Location locus;\n };\n \n-// Generic arguments allowed in each path expression segment - inline?\n-struct GenericArgs\n+class GenericArgs\n {\n   std::vector<Lifetime> lifetime_args;\n   std::vector<std::unique_ptr<Type> > type_args;\n@@ -172,6 +171,7 @@ struct GenericArgs\n     : lifetime_args (other.lifetime_args), binding_args (other.binding_args),\n       const_args (other.const_args), locus (other.locus)\n   {\n+    type_args.clear ();\n     type_args.reserve (other.type_args.size ());\n \n     for (const auto &e : other.type_args)\n@@ -188,6 +188,7 @@ struct GenericArgs\n     const_args = other.const_args;\n     locus = other.locus;\n \n+    type_args.clear ();\n     type_args.reserve (other.type_args.size ());\n     for (const auto &e : other.type_args)\n       type_args.push_back (e->clone_type ());\n@@ -235,26 +236,44 @@ class PathExprSegment\n   Location locus;\n \n public:\n-  // Returns true if there are any generic arguments\n-  bool has_generic_args () const { return generic_args.has_generic_args (); }\n-\n-  // Constructor for segment (from IdentSegment and GenericArgs)\n   PathExprSegment (Analysis::NodeMapping mappings,\n-\t\t   PathIdentSegment segment_name, Location locus = Location (),\n-\t\t   GenericArgs generic_args = GenericArgs::create_empty ())\n+\t\t   PathIdentSegment segment_name, Location locus,\n+\t\t   GenericArgs generic_args)\n     : mappings (std::move (mappings)), segment_name (std::move (segment_name)),\n       generic_args (std::move (generic_args)), locus (locus)\n   {}\n \n+  PathExprSegment (PathExprSegment const &other)\n+    : mappings (other.mappings), segment_name (other.segment_name),\n+      generic_args (other.generic_args), locus (other.locus)\n+  {}\n+\n+  PathExprSegment &operator= (PathExprSegment const &other)\n+  {\n+    mappings = other.mappings;\n+    segment_name = other.segment_name;\n+    generic_args = other.generic_args;\n+    locus = other.locus;\n+\n+    return *this;\n+  }\n+\n+  // move constructors\n+  PathExprSegment (PathExprSegment &&other) = default;\n+  PathExprSegment &operator= (PathExprSegment &&other) = default;\n+\n   std::string as_string () const;\n \n   Location get_locus () const { return locus; }\n \n-  PathIdentSegment get_segment () const { return segment_name; }\n+  PathIdentSegment &get_segment () { return segment_name; }\n+  const PathIdentSegment &get_segment () const { return segment_name; }\n \n   GenericArgs &get_generic_args () { return generic_args; }\n \n   const Analysis::NodeMapping &get_mappings () const { return mappings; }\n+\n+  bool has_generic_args () const { return generic_args.has_generic_args (); }\n };\n \n // HIR node representing a pattern that involves a \"path\" - abstract base class"}, {"sha": "3ee59e6ca7c6f767d48574e64e3f413fcdb3bbbc", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b11d3bb83e27795a419e473e4822329216806a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b11d3bb83e27795a419e473e4822329216806a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=48b11d3bb83e27795a419e473e4822329216806a", "patch": "@@ -1149,10 +1149,11 @@ TypeCheckExpr::visit (HIR::MethodCallExpr &expr)\n   // apply any remaining generic arguments\n   if (expr.get_method_name ().has_generic_args ())\n     {\n-      rust_debug_loc (expr.get_method_name ().get_generic_args ().get_locus (),\n+      HIR::GenericArgs &args = expr.get_method_name ().get_generic_args ();\n+      rust_debug_loc (args.get_locus (),\n \t\t      \"applying generic arguments to method_call: {%s}\",\n \t\t      lookup->debug_str ().c_str ());\n-      HIR::GenericArgs &args = expr.get_method_name ().get_generic_args ();\n+\n       lookup\n \t= SubstMapper::Resolve (lookup, expr.get_method_name ().get_locus (),\n \t\t\t\t&args);"}, {"sha": "0503528c423498ac6239075041a01e348b001cea", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b11d3bb83e27795a419e473e4822329216806a/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b11d3bb83e27795a419e473e4822329216806a/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=48b11d3bb83e27795a419e473e4822329216806a", "patch": "@@ -699,6 +699,10 @@ class SubstitutionArgumentMappings\n     return *this;\n   }\n \n+  SubstitutionArgumentMappings (SubstitutionArgumentMappings &&other) = default;\n+  SubstitutionArgumentMappings &operator= (SubstitutionArgumentMappings &&other)\n+    = default;\n+\n   static SubstitutionArgumentMappings error ()\n   {\n     return SubstitutionArgumentMappings ({}, Location (), nullptr, false);"}]}