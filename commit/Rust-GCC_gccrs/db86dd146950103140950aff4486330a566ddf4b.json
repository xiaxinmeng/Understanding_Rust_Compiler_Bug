{"sha": "db86dd146950103140950aff4486330a566ddf4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI4NmRkMTQ2OTUwMTAzMTQwOTUwYWZmNDQ4NjMzMGE1NjZkZGY0Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-10-12T01:52:19Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-10-12T01:52:19Z"}, "message": "re PR c++/15786 (Bad error message for frequently occuring error.)\n\n\tPR c++/15786\n\t* parser.c (cp_parser_declarator): Add member_p parameter.\n\t(cp_parser_condition): Adjust calls to cp_parser_declarator.\n\t(cp_parser_explicit_instantiation): Likewise.\n\t(cp_parser_init_declarator): Likewise.\n\t(cp_parser_direct_declarator): Add member_p parameter.  Do not\n\tparse tentatively when parsing the parameters to a member.\n\t(cp_parser_type_id): Adjust calls to cp_parser_declarator.\n\t(cp_parser_parameter_declaration): Likewise.\n\t(cp_parser_member_declaration): Likewise.\n\t(cp_parser_exception_declaration): Likewise.\n\n\tPR c++/15876\n\t* g++.dg/parse/error22.C: New test.\n\nFrom-SVN: r88914", "tree": {"sha": "779a6e11679ea98bb58ce6b9b68146785e21be6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/779a6e11679ea98bb58ce6b9b68146785e21be6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db86dd146950103140950aff4486330a566ddf4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db86dd146950103140950aff4486330a566ddf4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db86dd146950103140950aff4486330a566ddf4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db86dd146950103140950aff4486330a566ddf4b/comments", "author": null, "committer": null, "parents": [{"sha": "5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab"}], "stats": {"total": 77, "additions": 59, "deletions": 18}, "files": [{"sha": "a9bcec97fe790fe451ec4f81ee1d2a9c7d9e1d76", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db86dd146950103140950aff4486330a566ddf4b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db86dd146950103140950aff4486330a566ddf4b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db86dd146950103140950aff4486330a566ddf4b", "patch": "@@ -1,5 +1,17 @@\n 2004-10-11  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/15786\n+\t* parser.c (cp_parser_declarator): Add member_p parameter. \n+\t(cp_parser_condition): Adjust calls to cp_parser_declarator.\n+\t(cp_parser_explicit_instantiation): Likewise.\n+\t(cp_parser_init_declarator): Likewise.\n+\t(cp_parser_direct_declarator): Add member_p parameter.  Do not\n+\tparse tentatively when parsing the parameters to a member.\n+\t(cp_parser_type_id): Adjust calls to cp_parser_declarator.\n+\t(cp_parser_parameter_declaration): Likewise.\n+\t(cp_parser_member_declaration): Likewise.\n+\t(cp_parser_exception_declaration): Likewise.\n+\n \tPR c++/17936\n \t* cp-tree.h (CLASSTYPE_TEMPLATE_SPECIALIZATION): Add a comment.\n \t* pt.c (optimize_specialization_lookup_p): Do not optimize lookups"}, {"sha": "d914ed23d411a4c5d6c19d7aa4508588fb3cc43b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db86dd146950103140950aff4486330a566ddf4b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db86dd146950103140950aff4486330a566ddf4b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=db86dd146950103140950aff4486330a566ddf4b", "patch": "@@ -1543,9 +1543,9 @@ static void cp_parser_linkage_specification\n static tree cp_parser_init_declarator\n   (cp_parser *, cp_decl_specifier_seq *, bool, bool, int, bool *);\n static cp_declarator *cp_parser_declarator\n-  (cp_parser *, cp_parser_declarator_kind, int *, bool *);\n+  (cp_parser *, cp_parser_declarator_kind, int *, bool *, bool);\n static cp_declarator *cp_parser_direct_declarator\n-  (cp_parser *, cp_parser_declarator_kind, int *);\n+  (cp_parser *, cp_parser_declarator_kind, int *, bool);\n static enum tree_code cp_parser_ptr_operator\n   (cp_parser *, tree *, cp_cv_quals *);\n static cp_cv_quals cp_parser_cv_qualifier_seq_opt\n@@ -6275,7 +6275,8 @@ cp_parser_condition (cp_parser* parser)\n       /* Parse the declarator.  */\n       declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n-\t\t\t\t\t /*parenthesized_p=*/NULL);\n+\t\t\t\t\t /*parenthesized_p=*/NULL,\n+\t\t\t\t\t /*member_p=*/false);\n       /* Parse the attributes.  */\n       attributes = cp_parser_attributes_opt (parser);\n       /* Parse the asm-specification.  */\n@@ -9072,7 +9073,8 @@ cp_parser_explicit_instantiation (cp_parser* parser)\n       declarator\n \t= cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t\t/*ctor_dtor_or_conv_p=*/NULL,\n-\t\t\t\t/*parenthesized_p=*/NULL);\n+\t\t\t\t/*parenthesized_p=*/NULL,\n+\t\t\t\t/*member_p=*/false);\n       cp_parser_check_for_definition_in_return_type (declarator,\n \t\t\t\t\t\t     declares_class_or_enum);\n       if (declarator != cp_error_declarator)\n@@ -10489,7 +10491,8 @@ cp_parser_init_declarator (cp_parser* parser,\n   declarator\n     = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t    &ctor_dtor_or_conv_p,\n-\t\t\t    /*parenthesized_p=*/NULL);\n+\t\t\t    /*parenthesized_p=*/NULL,\n+\t\t\t    /*member_p=*/false);\n   /* Gather up the deferred checks.  */\n   stop_deferring_access_checks ();\n \n@@ -10749,13 +10752,16 @@ cp_parser_init_declarator (cp_parser* parser,\n    expression, not a declaration.)\n \n    If PARENTHESIZED_P is non-NULL, *PARENTHESIZED_P is set to true iff\n-   the declarator is a direct-declarator of the form \"(...)\".  */\n+   the declarator is a direct-declarator of the form \"(...)\".  \n+\n+   MEMBER_P is true iff this declarator is a member-declarator.  */\n \n static cp_declarator *\n cp_parser_declarator (cp_parser* parser,\n                       cp_parser_declarator_kind dcl_kind,\n                       int* ctor_dtor_or_conv_p,\n-\t\t      bool* parenthesized_p)\n+\t\t      bool* parenthesized_p,\n+\t\t      bool member_p)\n {\n   cp_token *token;\n   cp_declarator *declarator;\n@@ -10796,7 +10802,8 @@ cp_parser_declarator (cp_parser* parser,\n       /* Parse the dependent declarator.  */\n       declarator = cp_parser_declarator (parser, dcl_kind,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n-\t\t\t\t\t /*parenthesized_p=*/NULL);\n+\t\t\t\t\t /*parenthesized_p=*/NULL,\n+\t\t\t\t\t /*member_p=*/false);\n \n       /* If we are parsing an abstract-declarator, we must handle the\n \t case where the dependent declarator is absent.  */\n@@ -10821,7 +10828,8 @@ cp_parser_declarator (cp_parser* parser,\n \t*parenthesized_p = cp_lexer_next_token_is (parser->lexer,\n \t\t\t\t\t\t   CPP_OPEN_PAREN);\n       declarator = cp_parser_direct_declarator (parser, dcl_kind,\n-\t\t\t\t\t\tctor_dtor_or_conv_p);\n+\t\t\t\t\t\tctor_dtor_or_conv_p,\n+\t\t\t\t\t\tmember_p);\n     }\n \n   if (attributes && declarator != cp_error_declarator)\n@@ -10854,13 +10862,14 @@ cp_parser_declarator (cp_parser* parser,\n    we are parsing a direct-declarator.  It is\n    CP_PARSER_DECLARATOR_EITHER, if we can accept either - in the case\n    of ambiguity we prefer an abstract declarator, as per\n-   [dcl.ambig.res].  CTOR_DTOR_OR_CONV_P is as for\n+   [dcl.ambig.res].  CTOR_DTOR_OR_CONV_P and MEMBER_P are as for\n    cp_parser_declarator.  */\n \n static cp_declarator *\n cp_parser_direct_declarator (cp_parser* parser,\n                              cp_parser_declarator_kind dcl_kind,\n-                             int* ctor_dtor_or_conv_p)\n+                             int* ctor_dtor_or_conv_p,\n+\t\t\t     bool member_p)\n {\n   cp_token *token;\n   cp_declarator *declarator = NULL;\n@@ -10919,7 +10928,14 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      cp_parameter_declarator *params;\n \t      unsigned saved_num_template_parameter_lists;\n \n-\t      cp_parser_parse_tentatively (parser);\n+\t      /* In a member-declarator, the only valid interpretation\n+\t\t of a parenthesis is the start of a\n+\t\t parameter-declaration-clause.  (It is invalid to\n+\t\t initialize a static data member with a parenthesized\n+\t\t initializer; only the \"=\" form of initialization is\n+\t\t permitted.)  */\n+\t      if (!member_p)\n+\t\tcp_parser_parse_tentatively (parser);\n \n \t      /* Consume the `('.  */\n \t      cp_lexer_consume_token (parser->lexer);\n@@ -10945,7 +10961,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \n \t      /* If all went well, parse the cv-qualifier-seq and the\n \t     \t exception-specification.  */\n-\t      if (cp_parser_parse_definitely (parser))\n+\t      if (member_p || cp_parser_parse_definitely (parser))\n \t\t{\n \t\t  cp_cv_quals cv_quals;\n \t\t  tree exception_specification;\n@@ -10993,7 +11009,8 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      parser->in_type_id_in_expr_p = true;\n \t      declarator\n \t\t= cp_parser_declarator (parser, dcl_kind, ctor_dtor_or_conv_p,\n-\t\t\t\t\t/*parenthesized_p=*/NULL);\n+\t\t\t\t\t/*parenthesized_p=*/NULL,\n+\t\t\t\t\tmember_p);\n \t      parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n \t      first = false;\n \t      /* Expect a `)'.  */\n@@ -11420,7 +11437,8 @@ cp_parser_type_id (cp_parser* parser)\n   /* Look for the declarator.  */\n   abstract_declarator\n     = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_ABSTRACT, NULL,\n-\t\t\t    /*parenthesized_p=*/NULL);\n+\t\t\t    /*parenthesized_p=*/NULL,\n+\t\t\t    /*member_p=*/false);\n   /* Check to see if there really was a declarator.  */\n   if (!cp_parser_parse_definitely (parser))\n     abstract_declarator = NULL;\n@@ -11774,7 +11792,8 @@ cp_parser_parameter_declaration (cp_parser *parser,\n       declarator = cp_parser_declarator (parser,\n \t\t\t\t\t CP_PARSER_DECLARATOR_EITHER,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n-\t\t\t\t\t parenthesized_p);\n+\t\t\t\t\t parenthesized_p,\n+\t\t\t\t\t /*member_p=*/false);\n       parser->default_arg_ok_p = saved_default_arg_ok_p;\n       /* After the declarator, allow more attributes.  */\n       decl_specifiers.attributes\n@@ -13090,7 +13109,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      declarator\n \t\t= cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t\t\t&ctor_dtor_or_conv_p,\n-\t\t\t\t\t/*parenthesized_p=*/NULL);\n+\t\t\t\t\t/*parenthesized_p=*/NULL,\n+\t\t\t\t\t/*member_p=*/true);\n \n \t      /* If something went wrong parsing the declarator, make sure\n \t\t that we at least consume some tokens.  */\n@@ -13707,7 +13727,8 @@ cp_parser_exception_declaration (cp_parser* parser)\n   else\n     declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_EITHER,\n \t\t\t\t       /*ctor_dtor_or_conv_p=*/NULL,\n-\t\t\t\t       /*parenthesized_p=*/NULL);\n+\t\t\t\t       /*parenthesized_p=*/NULL,\n+\t\t\t\t       /*member_p=*/false);\n \n   /* Restore the saved message.  */\n   parser->type_definition_forbidden_message = saved_message;"}, {"sha": "13217f75a5b96bc057a981e5694ed49225e86f17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db86dd146950103140950aff4486330a566ddf4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db86dd146950103140950aff4486330a566ddf4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db86dd146950103140950aff4486330a566ddf4b", "patch": "@@ -1,5 +1,8 @@\n 2004-10-11  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/15876\n+\t* g++.dg/parse/error22.C: New test.\n+\n \tPR c++/17936\n \t* g++.dg/template/spec18.C: New test.\n "}, {"sha": "da3a62f788a6b1c6a8f50b3a7b5b89cc8bf56fff", "filename": "gcc/testsuite/g++.dg/parse/error22.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db86dd146950103140950aff4486330a566ddf4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db86dd146950103140950aff4486330a566ddf4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror22.C?ref=db86dd146950103140950aff4486330a566ddf4b", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/15786\n+\n+struct A {\n+  void foo(bar* p); /* { dg-error \"declared\" } */\n+};"}]}