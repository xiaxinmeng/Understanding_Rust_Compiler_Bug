{"sha": "1197924d2b6814fdf2f3d6b90432824ccef43855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE5NzkyNGQyYjY4MTRmZGYyZjNkNmI5MDQzMjgyNGNjZWY0Mzg1NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-07T17:06:25Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-07T17:06:25Z"}, "message": "config.gcc: Don't mention MAX_LONG_TYPE_SIZE.\n\n\t* config.gcc: Don't mention MAX_LONG_TYPE_SIZE.\n\t* system.h (MAX_LONG_TYPE_SIZE, MAX_LONG_DOUBLE_TYPE_SIZE,\n\tMAX_WCHAR_TYPE_SIZE, GCOV_TYPE_SIZE): Poison.\n\t* config/avr/avr.h, config/h8300/h8300.h, config/i386/i386.h,\n\tconfig/ia64/ia64.h, config/ip2k/ip2k.h,\n\tconfig/iq2000/iq2000.h, config/mips/iris5.h,\n\tconfig/mips/mips.h, config/pa/pa-64.h, config/pa/pa.h,\n\tconfig/rs6000/aix51.h, config/rs6000/aix52.h,\n\tconfig/rs6000/darwin.h, config/rs6000/rs6000.h,\n\tconfig/s390/s390.h, config/sh/sh.h, config/sparc/freebsd.h,\n\tconfig/sparc/linux.h, config/sparc/linux64.h,\n\tconfig/sparc/netbsd-elf.h, config/sparc/sparc.h,\n\tconfig/xtensa/xtensa.h: Remove the definitions of\n\tMAX_LONG_TYPE_SIZE, MAX_LONG_DOUBLE_TYPE_SIZE, and/or\n\tMAX_WCHAR_TYPE_SIZE.\n\t* doc/tm.texi (MAX_LONG_TYPE_SIZE, MAX_LONG_DOUBLE_TYPE_SIZE,\n\tMAX_WCHAR_TYPE_SIZE, GCOV_TYPE_SIZE): Remove.\n\nFrom-SVN: r77460", "tree": {"sha": "f54429b22bfb05d0bed71370eb461b2075989eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f54429b22bfb05d0bed71370eb461b2075989eaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1197924d2b6814fdf2f3d6b90432824ccef43855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1197924d2b6814fdf2f3d6b90432824ccef43855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1197924d2b6814fdf2f3d6b90432824ccef43855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1197924d2b6814fdf2f3d6b90432824ccef43855/comments", "author": null, "committer": null, "parents": [{"sha": "883899eef1b7e2a8ed46ef954569459809c8a60f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883899eef1b7e2a8ed46ef954569459809c8a60f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883899eef1b7e2a8ed46ef954569459809c8a60f"}], "stats": {"total": 124, "additions": 24, "deletions": 100}, "files": [{"sha": "31c19831fea97b6afca09150e222321c31a01f3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -1,3 +1,23 @@\n+2004-02-07  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config.gcc: Don't mention MAX_LONG_TYPE_SIZE.\n+\t* system.h (MAX_LONG_TYPE_SIZE, MAX_LONG_DOUBLE_TYPE_SIZE,\n+\tMAX_WCHAR_TYPE_SIZE, GCOV_TYPE_SIZE): Poison.\n+\t* config/avr/avr.h, config/h8300/h8300.h, config/i386/i386.h,\n+\tconfig/ia64/ia64.h, config/ip2k/ip2k.h,\n+\tconfig/iq2000/iq2000.h, config/mips/iris5.h,\n+\tconfig/mips/mips.h, config/pa/pa-64.h, config/pa/pa.h,\n+\tconfig/rs6000/aix51.h, config/rs6000/aix52.h,\n+\tconfig/rs6000/darwin.h, config/rs6000/rs6000.h,\n+\tconfig/s390/s390.h, config/sh/sh.h, config/sparc/freebsd.h,\n+\tconfig/sparc/linux.h, config/sparc/linux64.h,\n+\tconfig/sparc/netbsd-elf.h, config/sparc/sparc.h,\n+\tconfig/xtensa/xtensa.h: Remove the definitions of\n+\tMAX_LONG_TYPE_SIZE, MAX_LONG_DOUBLE_TYPE_SIZE, and/or\n+\tMAX_WCHAR_TYPE_SIZE.\n+\t* doc/tm.texi (MAX_LONG_TYPE_SIZE, MAX_LONG_DOUBLE_TYPE_SIZE,\n+\tMAX_WCHAR_TYPE_SIZE, GCOV_TYPE_SIZE): Remove.\n+\n 2004-02-07  Stephane Carrez  <stcarrez@nerim.fr>\n \n \tPR bootstrap/13990"}, {"sha": "aee81cfe74792ddaaa8c5c1f796ea9b037cf6d40", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -124,11 +124,8 @@\n #\t\t\tsystem normally uses GNU as.\n #\n #  need_64bit_hwint\tSet to yes if HOST_WIDE_INT must be 64 bits wide\n-#\t\t\tfor this target.  This is true iff\n-#\t\t\tMAX_LONG_TYPE_SIZE is 64.  (The code which\n-#\t\t\tdetermines the underlying integral type for\n-#\t\t\tHOST_WIDE_INT cannot see the definition of\n-#\t\t\tMAX_LONG_TYPE_SIZE.)\n+#\t\t\tfor this target.  This is true iff this target\n+#\t\t\tsupports \"long\" or \"wchar_t\" wider than 32 bits.\n #\n #  configure_default_options\n #\t\t\tSet to an initializer for configure_default_options"}, {"sha": "79e3e5858977e9efb9eaaa03a5bb3dae1bd4652d", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -142,7 +142,6 @@ extern int avr_asm_only_p;\n #define INT_TYPE_SIZE (TARGET_INT8 ? 8 : 16)\n #define SHORT_TYPE_SIZE (INT_TYPE_SIZE == 8 ? INT_TYPE_SIZE : 16)\n #define LONG_TYPE_SIZE (INT_TYPE_SIZE == 8 ? 16 : 32)\n-#define MAX_LONG_TYPE_SIZE 32\n #define LONG_LONG_TYPE_SIZE 64\n #define FLOAT_TYPE_SIZE 32\n #define DOUBLE_TYPE_SIZE 32"}, {"sha": "1b3d6eea9b2d31e51c250c70b6336ebf718cb5de", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -983,7 +983,6 @@ struct cum_arg\n \n #define WCHAR_TYPE \"short unsigned int\"\n #define WCHAR_TYPE_SIZE 16\n-#define MAX_WCHAR_TYPE_SIZE 16\n \n /* A function address in a call instruction\n    is a byte address (for indexing purposes)"}, {"sha": "d8501d6d2c74db2b1c90c1016568e2defc0c936d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -734,16 +734,13 @@ extern int x86_prefetch_sse;\n #define INT_TYPE_SIZE 32\n #define FLOAT_TYPE_SIZE 32\n #define LONG_TYPE_SIZE BITS_PER_WORD\n-#define MAX_WCHAR_TYPE_SIZE 32\n #define DOUBLE_TYPE_SIZE 64\n #define LONG_LONG_TYPE_SIZE 64\n \n #if defined (TARGET_BI_ARCH) || TARGET_64BIT_DEFAULT\n #define MAX_BITS_PER_WORD 64\n-#define MAX_LONG_TYPE_SIZE 64\n #else\n #define MAX_BITS_PER_WORD 32\n-#define MAX_LONG_TYPE_SIZE 32\n #endif\n \n /* Define this if most significant byte of a word is the lowest numbered.  */"}, {"sha": "ddcb89ac89a950f8ca5b0069bb5f0bdcad1b3d5d", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -429,8 +429,6 @@ while (0)\n \n #define LONG_TYPE_SIZE (TARGET_ILP32 ? 32 : 64)\n \n-#define MAX_LONG_TYPE_SIZE 64\n-\n #define LONG_LONG_TYPE_SIZE 64\n \n #define FLOAT_TYPE_SIZE 32"}, {"sha": "6457e8bb3eff5965702fdf1353b1179ce5c4cbde", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -90,7 +90,6 @@ extern int target_flags;\n \n #undef LONG_TYPE_SIZE\n #define LONG_TYPE_SIZE 32\n-#define MAX_LONG_TYPE_SIZE 32\n \n #undef LONG_LONG_TYPE_SIZE\n #define LONG_LONG_TYPE_SIZE\t64"}, {"sha": "add330402918b044acb31c5e68542b58d09f87dc", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -196,7 +196,6 @@ extern int\ttarget_flags;\n #define DOUBLE_TYPE_SIZE \t64\n #define LONG_DOUBLE_TYPE_SIZE\t64\n #define DEFAULT_SIGNED_CHAR\t1\n-#define MAX_WCHAR_TYPE_SIZE\t32\n \n \f\n /* Register Basics.  */"}, {"sha": "84895efb2b770c77850ded351f8875389a64c36e", "filename": "gcc/config/mips/iris5.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fmips%2Firis5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fmips%2Firis5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -48,11 +48,9 @@ Boston, MA 02111-1307, USA.  */\n /* Specify wchar_t types.  */\n #undef\tWCHAR_TYPE\n #undef\tWCHAR_TYPE_SIZE\n-#undef\tMAX_WCHAR_TYPE_SIZE\n \n #define WCHAR_TYPE     \"int\"\n #define WCHAR_TYPE_SIZE        INT_TYPE_SIZE\n-#define MAX_WCHAR_TYPE_SIZE    64\n \n /* Plain char is unsigned in the SGI compiler.  */\n #undef DEFAULT_SIGNED_CHAR"}, {"sha": "f53d04c442b5fa104c71fe7a343534f8cb888f08", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -1313,21 +1313,12 @@ extern const struct mips_cpu_info *mips_tune_info;\n /* The number of bytes in a double.  */\n #define UNITS_PER_DOUBLE (TYPE_PRECISION (double_type_node) / BITS_PER_UNIT)\n \n-/* Tell the preprocessor the maximum size of wchar_t.  */\n-#ifndef MAX_WCHAR_TYPE_SIZE\n-#ifndef WCHAR_TYPE_SIZE\n-#define MAX_WCHAR_TYPE_SIZE 64\n-#endif\n-#endif\n-\n /* Set the sizes of the core types.  */\n #define SHORT_TYPE_SIZE 16\n #define INT_TYPE_SIZE (TARGET_INT64 ? 64 : 32)\n #define LONG_TYPE_SIZE (TARGET_LONG64 ? 64 : 32)\n #define LONG_LONG_TYPE_SIZE 64\n \n-#define MAX_LONG_TYPE_SIZE 64\n-\n #define FLOAT_TYPE_SIZE 32\n #define DOUBLE_TYPE_SIZE 64\n #define LONG_DOUBLE_TYPE_SIZE \\"}, {"sha": "414ae6bbf448b780db5f01c2052988ce4f7b5aef", "filename": "gcc/config/pa/pa-64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fpa%2Fpa-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fpa%2Fpa-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-64.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -55,8 +55,6 @@ Boston, MA 02111-1307, USA.  */\n #define SHORT_TYPE_SIZE 16\n #undef INT_TYPE_SIZE\n #define INT_TYPE_SIZE 32\n-#undef MAX_LONG_TYPE_SIZE\n-#define MAX_LONG_TYPE_SIZE 64\n #undef LONG_TYPE_SIZE\n #define LONG_TYPE_SIZE 64\n #undef LONG_LONG_TYPE_SIZE"}, {"sha": "62b670c83e29853329ddaef55e05506865c6829c", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -449,7 +449,6 @@ do {\t\t\t\t\t\t\t\t\\\n #define WORDS_BIG_ENDIAN 1\n \n #define MAX_BITS_PER_WORD 64\n-#define MAX_LONG_TYPE_SIZE 32\n \n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD (TARGET_64BIT ? 8 : 4)"}, {"sha": "a96d9737bf152b9e24bdbf15ea092b6db5d3fa64", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -181,7 +181,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Width of wchar_t in bits.  */\n #undef  WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE (!TARGET_64BIT ? 16 : 32)\n-#define MAX_WCHAR_TYPE_SIZE 32\n \n /* AIX V5 uses PowerPC nop (ori 0,0,0) instruction as call glue for PowerPC\n    and \"cror 31,31,31\" for POWER architecture.  */"}, {"sha": "e714d3c0282a86d02d65c01ee13cde1a928e2605", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -173,7 +173,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Width of wchar_t in bits.  */\n #undef  WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE (!TARGET_64BIT ? 16 : 32)\n-#define MAX_WCHAR_TYPE_SIZE 32\n \n /* AIX V5 uses PowerPC nop (ori 0,0,0) instruction as call glue for PowerPC\n    and \"cror 31,31,31\" for POWER architecture.  */"}, {"sha": "44ded5b01c2f4da67c6ff5326a235a87f1c3acd3", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -309,11 +309,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    support 64 bit PowerPC either, so this just keeps things happy.  */\n #define DOUBLE_INT_ASM_OP \"\\t.quad\\t\"\n \n-/* Get HOST_WIDE_INT and CONST_INT to be 32 bits, for compile time\n-   space/speed.  */\n-#undef MAX_LONG_TYPE_SIZE\n-#define MAX_LONG_TYPE_SIZE 32\n-\n /* For binary compatibility with 2.95; Darwin C APIs use bool from\n    stdbool.h, which was an int-sized enum in 2.95.  */\n #define BOOL_TYPE_SIZE INT_TYPE_SIZE"}, {"sha": "cd8d05df0342993bfc6f9f6875d769f44a02085d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -677,7 +677,6 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    target machine.  If you don't define this, the default is one\n    word.  */\n #define LONG_TYPE_SIZE (TARGET_32BIT ? 32 : 64)\n-#define MAX_LONG_TYPE_SIZE 64\n \n /* A C expression for the size in bits of the type `long long' on the\n    target machine.  If you don't define this, the default is two\n@@ -699,9 +698,6 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    words.  */\n #define LONG_DOUBLE_TYPE_SIZE rs6000_long_double_type_size\n \n-/* Constant which presents upper bound of the above value.  */\n-#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n-\n /* Define this to set long double type size to use in libgcc2.c, which can\n    not depend on target_flags.  */\n #ifdef __LONG_DOUBLE_128__"}, {"sha": "90a4d2c1622417a3f68e3bb849832116aa1caca5", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -257,7 +257,6 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n #define SHORT_TYPE_SIZE 16\n #define INT_TYPE_SIZE 32\n #define LONG_TYPE_SIZE (TARGET_64BIT ? 64 : 32)\n-#define MAX_LONG_TYPE_SIZE 64\n #define LONG_LONG_TYPE_SIZE 64\n #define FLOAT_TYPE_SIZE 32\n #define DOUBLE_TYPE_SIZE 64"}, {"sha": "8580cb6d20136d10a1f7d249fcea536f2b139d56", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -573,8 +573,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define MAX_BITS_PER_WORD 64\n \n-#define MAX_LONG_TYPE_SIZE MAX_BITS_PER_WORD\n-\n /* Width in bits of an `int'.  We want just 32-bits, even if words are\n    longer.  */\n #define INT_TYPE_SIZE 32"}, {"sha": "233876d41ba275dc6de4a07c5e2882f8724876b2", "filename": "gcc/config/sparc/freebsd.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ffreebsd.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -57,10 +57,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef  LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n-/* Constant which presents upper bound of the above value.  */\n-#undef  MAX_LONG_DOUBLE_TYPE_SIZE\n-#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n-\n /* Define this to set long double type size to use in libgcc2.c, which can\n    not depend on target_flags.  */\n #if defined(__arch64__) || defined(__LONG_DOUBLE_128__)"}, {"sha": "9abdd788d9e6434601813f8796cf0b5ad321015f", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -219,9 +219,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    SPARC ABI says that long double is 4 words.  */\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n-/* Constant which presents upper bound of the above value.  */\n-#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n-\n /* Define this to set long double type size to use in libgcc2.c, which can\n    not depend on target_flags.  */\n #ifdef __LONG_DOUBLE_128__"}, {"sha": "d1b22abbd3ab3f878ad5d44a477e23c29a43f911", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -114,10 +114,6 @@ Boston, MA 02111-1307, USA.  */\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n-/* Constant which presents upper bound of the above value.  */\n-#undef MAX_LONG_DOUBLE_TYPE_SIZE\n-#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n-\n /* Define this to set long double type size to use in libgcc2.c, which can\n    not depend on target_flags.  */\n #if defined(__arch64__) || defined(__LONG_DOUBLE_128__)"}, {"sha": "3cfd0fc1ebbb0b8bcf24c68b90f4e2e8607f8aba", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -219,9 +219,6 @@ Boston, MA 02111-1307, USA.  */\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n-#undef MAX_LONG_DOUBLE_TYPE_SIZE\n-#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n-\n #if defined(__arch64__) || defined(__LONG_DOUBLE_128__)\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n #else\n@@ -253,9 +250,6 @@ Boston, MA 02111-1307, USA.  */\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE 128\n \n-#undef MAX_LONG_DOUBLE_TYPE_SIZE\n-#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n-\n #undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n \n@@ -274,9 +268,6 @@ Boston, MA 02111-1307, USA.  */\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE 64\n \n-#undef MAX_LONG_DOUBLE_TYPE_SIZE\n-#define MAX_LONG_DOUBLE_TYPE_SIZE 64\n-\n #undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n "}, {"sha": "a8f51e6d4cb2d9690f0f395207ea4d7c91a22db7", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -694,10 +694,6 @@ extern struct sparc_cpu_select sparc_select[];\n #define FLOAT_TYPE_SIZE\t\t32\n #define DOUBLE_TYPE_SIZE\t64\n \n-#ifdef SPARC_BI_ARCH\n-#define MAX_LONG_TYPE_SIZE\t64\n-#endif\n-\n #if 0\n /* ??? This does not work in SunOS 4.x, so it is not enabled here.\n    Instead, it is enabled in sol2.h, because it does work under Solaris.  */"}, {"sha": "1ba81d192bc5d5183a71e7fb8fa879c9fca3e19f", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -161,7 +161,6 @@ extern unsigned xtensa_current_frame_size;\n #define INT_TYPE_SIZE 32\n #define SHORT_TYPE_SIZE 16\n #define LONG_TYPE_SIZE 32\n-#define MAX_LONG_TYPE_SIZE 32\n #define LONG_LONG_TYPE_SIZE 64\n #define FLOAT_TYPE_SIZE 32\n #define DOUBLE_TYPE_SIZE 64"}, {"sha": "883f034ab2db2c0fc0b06acedf7e8f82ecca7054", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -1535,14 +1535,6 @@ the size of that type.  If you don't define this, the default is the\n value of @code{LONG_TYPE_SIZE}.\n @end defmac\n \n-@defmac MAX_LONG_TYPE_SIZE\n-Maximum number for the size in bits of the type @code{long} on the\n-target machine.  If this is undefined, the default is\n-@code{LONG_TYPE_SIZE}.  Otherwise, it is the constant value that is the\n-largest value that @code{LONG_TYPE_SIZE} can have at run-time.  This is\n-used in @code{cpp}.\n-@end defmac\n-\n @defmac LONG_LONG_TYPE_SIZE\n A C expression for the size in bits of the type @code{long long} on the\n target machine.  If you don't define this, the default is two\n@@ -1579,14 +1571,6 @@ the target machine.  If you don't define this, the default is two\n words.\n @end defmac\n \n-@defmac MAX_LONG_DOUBLE_TYPE_SIZE\n-Maximum number for the size in bits of the type @code{long double} on the\n-target machine.  If this is undefined, the default is\n-@code{LONG_DOUBLE_TYPE_SIZE}.  Otherwise, it is the constant value that is\n-the largest value that @code{LONG_DOUBLE_TYPE_SIZE} can have at run-time.\n-This is used in @code{cpp}.\n-@end defmac\n-\n @defmac TARGET_FLT_EVAL_METHOD\n A C expression for the value for @code{FLT_EVAL_METHOD} in @file{float.h},\n assuming, if applicable, that the floating-point control word is in its\n@@ -1659,22 +1643,6 @@ characters.  This is used in @code{cpp}, which cannot make use of\n @code{WCHAR_TYPE}.\n @end defmac\n \n-@defmac MAX_WCHAR_TYPE_SIZE\n-Maximum number for the size in bits of the data type for wide\n-characters.  If this is undefined, the default is\n-@code{WCHAR_TYPE_SIZE}.  Otherwise, it is the constant value that is the\n-largest value that @code{WCHAR_TYPE_SIZE} can have at run-time.  This is\n-used in @code{cpp}.\n-@end defmac\n-\n-@defmac GCOV_TYPE_SIZE\n-A C expression for the size in bits of the type used for gcov counters on the\n-target machine.  If you don't define this, the default is one\n-@code{LONG_TYPE_SIZE} in case it is greater or equal to 64-bit and\n-@code{LONG_LONG_TYPE_SIZE} otherwise.  You may want to re-define the type to\n-ensure atomicity for counters in multithreaded programs.\n-@end defmac\n-\n @defmac WINT_TYPE\n A C expression for a string describing the name of the data type to\n use for wide characters passed to @code{printf} and returned from"}, {"sha": "0397cf29613f414553cb2f5c3134a0242c41b879", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197924d2b6814fdf2f3d6b90432824ccef43855/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=1197924d2b6814fdf2f3d6b90432824ccef43855", "patch": "@@ -633,7 +633,8 @@ typedef char _Bool;\n \tFIRST_INSN_ADDRESS TEXT_SECTION SHARED_BSS_SECTION_ASM_OP\t   \\\n \tPROMOTED_MODE EXPAND_BUILTIN_VA_END\t\t\t\t   \\\n \tLINKER_DOES_NOT_WORK_WITH_DWARF2 FUNCTION_ARG_KEEP_AS_REFERENCE\t   \\\n-\tGIV_SORT_CRITERION\n+\tGIV_SORT_CRITERION MAX_LONG_TYPE_SIZE MAX_LONG_DOUBLE_TYPE_SIZE\t   \\\n+\tMAX_WCHAR_TYPE_SIZE GCOV_TYPE_SIZE\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}