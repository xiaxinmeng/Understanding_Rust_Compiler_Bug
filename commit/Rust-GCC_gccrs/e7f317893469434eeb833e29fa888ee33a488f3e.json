{"sha": "e7f317893469434eeb833e29fa888ee33a488f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmMzE3ODkzNDY5NDM0ZWViODMzZTI5ZmE4ODhlZTMzYTQ4OGYzZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2014-03-28T22:02:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-03-28T22:02:32Z"}, "message": "re PR target/60648 (ICE (segmentation fault) in expand_binop)\n\n\tPR target/60648\n       * expr.c (do_tablejump): Use simplify_gen_binary rather than\n       gen_rtx_{PLUS,MULT} to build up the address expression.\n\n       * i386/i386.c (ix86_legitimize_address): Use copy_addr_to_reg to avoid\n       creating non-canonical RTL.\n\n       PR target/60648\n       * g++.dg/pr60648.C: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r208924", "tree": {"sha": "3c054d8b3672d6ff1f01c490ff6c443f86c08e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c054d8b3672d6ff1f01c490ff6c443f86c08e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7f317893469434eeb833e29fa888ee33a488f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f317893469434eeb833e29fa888ee33a488f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f317893469434eeb833e29fa888ee33a488f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f317893469434eeb833e29fa888ee33a488f3e/comments", "author": null, "committer": null, "parents": [{"sha": "5294e4c32d617f2a52e47fb08d9b83b83885f469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5294e4c32d617f2a52e47fb08d9b83b83885f469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5294e4c32d617f2a52e47fb08d9b83b83885f469"}], "stats": {"total": 103, "additions": 96, "deletions": 7}, "files": [{"sha": "f3899b7cb114dfbae70845d2d80dddf8563d75ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f317893469434eeb833e29fa888ee33a488f3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f317893469434eeb833e29fa888ee33a488f3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7f317893469434eeb833e29fa888ee33a488f3e", "patch": "@@ -1,3 +1,13 @@\n+2014-03-27  Jeff Law  <law@redhat.com>\n+\t    Jakub Jalinek <jakub@redhat.com>\n+\n+\tPR target/60648\n+       * expr.c (do_tablejump): Use simplify_gen_binary rather than\n+       gen_rtx_{PLUS,MULT} to build up the address expression.\n+\n+       * i386/i386.c (ix86_legitimize_address): Use copy_addr_to_reg to avoid\n+       creating non-canonical RTL.\n+\n 2014-03-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/60243"}, {"sha": "3eefe4ac59838286a440ee2a8d052ee93b286175", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f317893469434eeb833e29fa888ee33a488f3e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f317893469434eeb833e29fa888ee33a488f3e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e7f317893469434eeb833e29fa888ee33a488f3e", "patch": "@@ -13925,13 +13925,13 @@ ix86_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       if (GET_CODE (XEXP (x, 0)) == MULT)\n \t{\n \t  changed = 1;\n-\t  XEXP (x, 0) = force_operand (XEXP (x, 0), 0);\n+\t  XEXP (x, 0) = copy_addr_to_reg (XEXP (x, 0));\n \t}\n \n       if (GET_CODE (XEXP (x, 1)) == MULT)\n \t{\n \t  changed = 1;\n-\t  XEXP (x, 1) = force_operand (XEXP (x, 1), 0);\n+\t  XEXP (x, 1) = copy_addr_to_reg (XEXP (x, 1));\n \t}\n \n       if (changed"}, {"sha": "ebf136ed5a30ff9e55b009586260e8f4f3a992e7", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f317893469434eeb833e29fa888ee33a488f3e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f317893469434eeb833e29fa888ee33a488f3e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e7f317893469434eeb833e29fa888ee33a488f3e", "patch": "@@ -11134,11 +11134,12 @@ do_tablejump (rtx index, enum machine_mode mode, rtx range, rtx table_label,\n      GET_MODE_SIZE, because this indicates how large insns are.  The other\n      uses should all be Pmode, because they are addresses.  This code\n      could fail if addresses and insns are not the same size.  */\n-  index = gen_rtx_PLUS\n-    (Pmode,\n-     gen_rtx_MULT (Pmode, index,\n-\t\t   gen_int_mode (GET_MODE_SIZE (CASE_VECTOR_MODE), Pmode)),\n-     gen_rtx_LABEL_REF (Pmode, table_label));\n+  index = simplify_gen_binary (MULT, Pmode, index,\n+\t\t\t       gen_int_mode (GET_MODE_SIZE (CASE_VECTOR_MODE),\n+\t\t\t\t\t     Pmode));\n+  index = simplify_gen_binary (PLUS, Pmode, index,\n+\t\t\t       gen_rtx_LABEL_REF (Pmode, table_label));\n+\n #ifdef PIC_CASE_VECTOR_ADDRESS\n   if (flag_pic)\n     index = PIC_CASE_VECTOR_ADDRESS (index);"}, {"sha": "7601833bd11712711b0e9cb29d6858bb83a3fbfb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f317893469434eeb833e29fa888ee33a488f3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f317893469434eeb833e29fa888ee33a488f3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7f317893469434eeb833e29fa888ee33a488f3e", "patch": "@@ -1,3 +1,8 @@\n+2014-03-27  Jeff Law  <law@redhat.com>\n+\n+       PR target/60648\n+       * g++.dg/pr60648.C: New test.\n+\n 2014-03-28  Adam Butcher  <adam@jessamine.co.uk>\n \n \tPR c++/60573"}, {"sha": "80c05616c2fd4cb01b3dcc14d8b91235cd32854b", "filename": "gcc/testsuite/g++.dg/pr60648.C", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f317893469434eeb833e29fa888ee33a488f3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr60648.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f317893469434eeb833e29fa888ee33a488f3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr60648.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr60648.C?ref=e7f317893469434eeb833e29fa888ee33a488f3e", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do compile } */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O3 -fPIC -m32\" }  */\n+\n+enum component\n+{\n+  Ex,\n+  Ez,\n+  Hy,\n+  Permeability\n+};\n+enum derived_component\n+{};\n+enum direction\n+{\n+  X,\n+  Y,\n+  Z,\n+  R,\n+  P,\n+  NO_DIRECTION\n+};\n+derived_component a;\n+component *b;\n+component c;\n+direction d;\n+inline direction fn1 (component p1)\n+{\n+  switch (p1)\n+    {\n+    case 0:\n+      return Y;\n+    case 1:\n+      return Z;\n+    case Permeability:\n+      return NO_DIRECTION;\n+    }\n+  return X;\n+}\n+\n+inline component fn2 (direction p1)\n+{\n+  switch (p1)\n+    {\n+    case 0:\n+    case 1:\n+      return component ();\n+    case Z:\n+    case R:\n+      return component (1);\n+    case P:\n+      return component (3);\n+    }\n+}\n+\n+void fn3 ()\n+{\n+  direction e;\n+  switch (0)\n+  case 0:\n+  switch (a)\n+    {\n+    case 0:\n+      c = Ex;\n+      b[1] = Hy;\n+    }\n+  e = fn1 (b[1]);\n+  b[1] = fn2 (e);\n+  d = fn1 (c);\n+}\n+\n+\n+"}]}