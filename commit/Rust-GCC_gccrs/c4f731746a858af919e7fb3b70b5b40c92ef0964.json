{"sha": "c4f731746a858af919e7fb3b70b5b40c92ef0964", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRmNzMxNzQ2YTg1OGFmOTE5ZTdmYjNiNzBiNWI0MGM5MmVmMDk2NA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2004-11-01T09:47:59Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2004-11-01T09:47:59Z"}, "message": "Convert diagnostics to use quoting flag q 9/n\n\n        Convert diagnostics to use quoting flag q 9/n\n        * typeck.c (build_x_unary_op, convert_member_func_to_ptr,\n        get_delta_difference):  Use new quotation style.\n        * repo.c (reopen_repo_file_for_write): Likewise.\n        * pt.c (do_type_instantiation): Likewise.\n        * parser.c (cp_parser_diagnose_invalid_type_name):\n        * name-lookup.c (push_overloaded_decl, set_decl_namespace):\n        * error.c (cp_print_error_function,\n        print_instantiation_full_context): Likewise.\n        * decl.c (define_label, grok_reference_init,\n        maybe_deduce_size_from_array_init, revert_static_member_fn):\n        * decl2.c (check_classfn): Likewise.\n        * class.c (add_method, check_field_decls, layout_class_type,\n        resolve_address_of_overloaded_function): Likewise.\n        * call.c (build_x_va_arg, build_over_call): Likewise.\n\nFrom-SVN: r89938", "tree": {"sha": "93761ecb827ee6adaf134734810338c114ec6161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93761ecb827ee6adaf134734810338c114ec6161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4f731746a858af919e7fb3b70b5b40c92ef0964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f731746a858af919e7fb3b70b5b40c92ef0964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4f731746a858af919e7fb3b70b5b40c92ef0964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f731746a858af919e7fb3b70b5b40c92ef0964/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3188a512c43dd8ad5b270163e2f21b43384bbfd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3188a512c43dd8ad5b270163e2f21b43384bbfd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3188a512c43dd8ad5b270163e2f21b43384bbfd8"}], "stats": {"total": 76, "additions": 48, "deletions": 28}, "files": [{"sha": "bea717b65fe806e4cb27285dd3195a59a9a5532f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c4f731746a858af919e7fb3b70b5b40c92ef0964", "patch": "@@ -1,9 +1,27 @@\n+2004-10-31  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\tConvert diagnostics to use quoting flag q 9/n\n+\t* typeck.c (build_x_unary_op, convert_member_func_to_ptr, \n+\tget_delta_difference):  Use new quotation style.\n+\t* repo.c (reopen_repo_file_for_write): Likewise.\n+\t* pt.c (do_type_instantiation): Likewise.\n+\t* parser.c (cp_parser_diagnose_invalid_type_name): \n+\t* name-lookup.c (push_overloaded_decl, set_decl_namespace): \n+\t* error.c (cp_print_error_function,\n+\tprint_instantiation_full_context): Likewise.\n+\t* decl.c (define_label, grok_reference_init, \n+\tmaybe_deduce_size_from_array_init, revert_static_member_fn): \n+\t* decl2.c (check_classfn): Likewise.\n+\t* class.c (add_method, check_field_decls, layout_class_type, \n+\tresolve_address_of_overloaded_function): Likewise.\n+\t* call.c (build_x_va_arg, build_over_call): Likewise.\n+\n 2004-10-31  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert diagnostics to use quoting flag q 8/n\n \t* cvt.c (cp_convert_to_pointer, warn_ref_binding, \n \tconvert_to_reference, ocp_convert, convert_to_void \n-\tcp_convert_to_pointer): \n+\tcp_convert_to_pointer): Use new quotation style.\n \n 2004-10-31  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "3c726432f8e4ddbac00fa5adb1bb343e9a567a64", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c4f731746a858af919e7fb3b70b5b40c92ef0964", "patch": "@@ -4429,7 +4429,7 @@ build_x_va_arg (tree expr, tree type)\n   if (! pod_type_p (type))\n     {\n       /* Undefined behavior [expr.call] 5.2.2/7.  */\n-      warning (\"cannot receive objects of non-POD type %q#T' through %<...%>; \"\n+      warning (\"cannot receive objects of non-POD type %q#T through %<...%>; \"\n                \"call will abort at runtime\", type);\n       expr = convert (build_pointer_type (type), null_node);\n       expr = build2 (COMPOUND_EXPR, TREE_TYPE (expr),\n@@ -4677,8 +4677,8 @@ build_over_call (struct z_candidate *cand, int flags)\n       tree base_binfo;\n       \n       if (convs[i]->bad_p)\n-\tpedwarn (\"passing `%T' as `this' argument of `%#D' discards qualifiers\",\n-\t\t    TREE_TYPE (argtype), fn);\n+\tpedwarn (\"passing %qT as %<this%> argument of %q#D discards qualifiers\",\n+                 TREE_TYPE (argtype), fn);\n \n       /* [class.mfct.nonstatic]: If a nonstatic member function of a class\n \t X is called for an object that is not of type X, or of a type"}, {"sha": "c21d4411a0206251a449efa4b5ebc8fb804d0759", "filename": "gcc/cp/class.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=c4f731746a858af919e7fb3b70b5b40c92ef0964", "patch": "@@ -995,7 +995,7 @@ add_method (tree type, tree method)\n \t\treturn;\n \t      else\n \t\t{\n-\t\t  cp_error_at (\"`%#D' and `%#D' cannot be overloaded\",\n+\t\t  cp_error_at (\"%q#D and %q#D cannot be overloaded\",\n \t\t\t       method, fn);\n \n \t\t  /* We don't call duplicate_decls here to merge\n@@ -2872,7 +2872,8 @@ check_field_decls (tree t, tree *access_decls,\n \t    }\n \t  if (TREE_CODE (type) == REFERENCE_TYPE)\n \t    {\n-\t      cp_error_at (\"%qD may not have reference type `%T' because it is a member of a union\",\n+\t      cp_error_at (\"%qD may not have reference type %qT because\"\n+                           \" it is a member of a union\",\n \t\t\t   x, type);\n \t      continue;\n \t    }\n@@ -4599,7 +4600,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t      else\n \t\t{\n \t\t  if (warn_abi && TREE_CODE (t) == UNION_TYPE)\n-\t\t    warning (\"size assigned to `%T' may not be \"\n+\t\t    warning (\"size assigned to %qT may not be \"\n \t\t\t     \"ABI-compliant and may change in a future \"\n \t\t\t     \"version of GCC\", \n \t\t\t     t);\n@@ -5615,9 +5616,9 @@ resolve_address_of_overloaded_function (tree target_type,\n   else \n     {\n       if (flags & tf_error)\n-\terror (\"\\\n-cannot resolve overloaded function `%D' based on conversion to type `%T'\", \n-\t\t  DECL_NAME (OVL_FUNCTION (overload)), target_type);\n+\terror (\"cannot resolve overloaded function %qD based on\"\n+               \" conversion to type %qT\", \n+               DECL_NAME (OVL_FUNCTION (overload)), target_type);\n       return error_mark_node;\n     }\n   "}, {"sha": "479914905f535272b1072222d6df349c7ef0f175", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c4f731746a858af919e7fb3b70b5b40c92ef0964", "patch": "@@ -2416,7 +2416,7 @@ define_label (location_t location, tree name)\n     pedwarn (\"label named wchar_t\");\n \n   if (DECL_INITIAL (decl) != NULL_TREE)\n-    error (\"duplicate label `%D'\", decl);\n+    error (\"duplicate label %qD\", decl);\n   else\n     {\n       /* Mark label as having been defined.  */\n@@ -3936,7 +3936,7 @@ grok_reference_init (tree decl, tree type, tree init, tree *cleanup)\n       if ((DECL_LANG_SPECIFIC (decl) == 0\n \t   || DECL_IN_AGGR_P (decl) == 0)\n \t  && ! DECL_THIS_EXTERN (decl))\n-\terror (\"`%D' declared as reference but not initialized\", decl);\n+\terror (\"%qD declared as reference but not initialized\", decl);\n       return NULL_TREE;\n     }\n \n@@ -4008,7 +4008,7 @@ maybe_deduce_size_from_array_init (tree decl, tree init)\n       if (failure == 2)\n \t{\n \t  if (do_default)\n-\t    error (\"array size missing in `%D'\", decl);\n+\t    error (\"array size missing in %qD\", decl);\n \t  /* If a `static' var's size isn't known, make it extern as\n \t     well as static, so it does not get allocated.  If it's not\n \t     `static', then don't mark it extern; finish_incomplete_decl\n@@ -10970,8 +10970,7 @@ revert_static_member_fn (tree decl)\n \n   if (cp_type_quals (TREE_TYPE (TREE_VALUE (args)))\n       != TYPE_UNQUALIFIED)\n-    error (\"static member function `%#D' declared with type qualifiers\",\n-\t      decl);\n+    error (\"static member function %q#D declared with type qualifiers\", decl);\n \n   args = TREE_CHAIN (args);\n   tmp = build_function_type (TREE_TYPE (function), args);"}, {"sha": "310f386d48f4b7b3ebeb610b9c4709f150578b5e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c4f731746a858af919e7fb3b70b5b40c92ef0964", "patch": "@@ -674,7 +674,7 @@ check_classfn (tree ctype, tree function, tree template_parms)\n \tpop_scope (ctype);\n       if (fndecls)\n \treturn OVL_CURRENT (fndecls);\n-      error (\"prototype for `%#D' does not match any in class `%T'\",\n+      error (\"prototype for %q#D does not match any in class %qT\",\n \t     function, ctype);\n       is_conv_op = DECL_CONV_FN_P (fndecl);\n "}, {"sha": "9c7642a533ffa04846ae288ae52183d467a5a2ff", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=c4f731746a858af919e7fb3b70b5b40c92ef0964", "patch": "@@ -2152,7 +2152,7 @@ cp_print_error_function (diagnostic_context *context,\n       if (current_function_decl == NULL)\n         pp_base_string (context->printer, \"At global scope:\");\n       else\n-        pp_printf (context->printer, \"In %s `%s':\",\n+        pp_printf (context->printer, \"In %s %qs:\",\n                    function_category (current_function_decl),\n                    cxx_printable_name (current_function_decl, 2));\n       pp_base_newline (context->printer);\n@@ -2206,7 +2206,7 @@ print_instantiation_full_context (diagnostic_context *context)\n \t    /* Avoid redundancy with the the \"In function\" line.  */;\n \t  else\n \t    pp_verbatim (context->printer,\n-                         \"%s: In instantiation of `%s':\\n\",\n+                         \"%s: In instantiation of %qs:\\n\",\n \t\t\t LOCATION_FILE (location),\n                          decl_as_string (TINST_DECL (p),\n                                          TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE));"}, {"sha": "33e745df45991082965ad11ab70f163a5aae8bde", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c4f731746a858af919e7fb3b70b5b40c92ef0964", "patch": "@@ -2008,7 +2008,7 @@ push_overloaded_decl (tree decl, int flags)\n \t  if (IS_AGGR_TYPE (t) && warn_shadow\n \t      && (! DECL_IN_SYSTEM_HEADER (decl)\n \t\t  || ! DECL_IN_SYSTEM_HEADER (old)))\n-\t    warning (\"`%#D' hides constructor for `%#T'\", decl, t);\n+\t    warning (\"%q#D hides constructor for %q#T\", decl, t);\n \t  old = NULL_TREE;\n \t}\n       else if (is_overloaded_fn (old))\n@@ -3000,8 +3000,8 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n   \n   /* It is ok for friends to be qualified in parallel space.  */\n   if (!friendp && !is_ancestor (current_namespace, scope))\n-    error (\"declaration of `%D' not in a namespace surrounding `%D'\",\n-\t      decl, scope);\n+    error (\"declaration of %qD not in a namespace surrounding %qD\",\n+           decl, scope);\n   DECL_CONTEXT (decl) = FROB_CONTEXT (scope);\n   if (scope != current_namespace)\n     {"}, {"sha": "e2afb3b192b2318da048c634d39f90023a34e7d3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c4f731746a858af919e7fb3b70b5b40c92ef0964", "patch": "@@ -1990,7 +1990,7 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree scope, tree id)\n \t\t    if (TREE_CODE (field) == TYPE_DECL\n \t\t\t&& DECL_NAME (field) == id)\n \t\t      {\n-\t\t\tinform (\"(perhaps `typename %T::%E' was intended)\",\n+\t\t\tinform (\"(perhaps %<typename %T::%E%> was intended)\",\n \t\t\t        BINFO_TYPE (b), id);\n \t\t\tbreak;\n \t\t      }"}, {"sha": "56f55ed53565d8a1300e2b323c7f156c805945bc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c4f731746a858af919e7fb3b70b5b40c92ef0964", "patch": "@@ -10843,7 +10843,7 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)\n   if (storage != NULL_TREE)\n     {\n       if (pedantic && !in_system_header)\n-\tpedwarn(\"ISO C++ forbids the use of `%E' on explicit instantiations\", \n+\tpedwarn(\"ISO C++ forbids the use of %qE on explicit instantiations\", \n                 storage);\n \n       if (storage == ridpointers[(int) RID_INLINE])"}, {"sha": "6675980bd5618430acf0a80de976cee45ea02b39", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=c4f731746a858af919e7fb3b70b5b40c92ef0964", "patch": "@@ -211,7 +211,7 @@ reopen_repo_file_for_write (void)\n \n   if (repo_file == 0)\n     {\n-      error (\"can't create repository information file `%s'\", repo_name);\n+      error (\"can't create repository information file %qs\", repo_name);\n       flag_use_repository = 0;\n     }\n }"}, {"sha": "3796acee56f9cd3a697c092b16703a3b3b604c24", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f731746a858af919e7fb3b70b5b40c92ef0964/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c4f731746a858af919e7fb3b70b5b40c92ef0964", "patch": "@@ -3620,13 +3620,15 @@ build_x_unary_op (enum tree_code code, tree xarg)\n \t{\n \t  if (TREE_CODE (xarg) != OFFSET_REF)\n \t    {\n-\t      error (\"invalid use of '%E' to form a pointer-to-member-function.  Use a qualified-id.\",\n+\t      error (\"invalid use of %qE to form a pointer-to-member-function.\"\n+                     \"  Use a qualified-id.\",\n \t\t     xarg);\n \t      return error_mark_node;\n \t    }\n \t  else\n \t    {\n-\t      error (\"parenthesis around '%E' cannot be used to form a pointer-to-member-function\",\n+\t      error (\"parenthesis around %qE cannot be used to form a\"\n+                     \" pointer-to-member-function\",\n \t\t     xarg);\n \t      PTRMEM_OK_P (xarg) = 1;\n \t    }\n@@ -4802,7 +4804,7 @@ convert_member_func_to_ptr (tree type, tree expr)\n \t      || TREE_CODE (intype) == METHOD_TYPE);\n \n   if (pedantic || warn_pmf2ptr)\n-    pedwarn (\"converting from `%T' to `%T'\", intype, type);\n+    pedwarn (\"converting from %qT to %qT\", intype, type);\n     \n   if (TREE_CODE (intype) == METHOD_TYPE)\n     expr = build_addr_func (expr);\n@@ -5595,7 +5597,7 @@ get_delta_difference (tree from, tree to,\n \t      virt_binfo = binfo_from_vbase (binfo);\n \t      if (virt_binfo)\n \t\t/* This is a reinterpret cast, we choose to do nothing.  */\n-\t\twarning (\"pointer to member cast via virtual base `%T'\",\n+\t\twarning (\"pointer to member cast via virtual base %qT\",\n \t\t\t BINFO_TYPE (virt_binfo));\n \t      else\n \t\tresult = size_diffop (size_zero_node, BINFO_OFFSET (binfo));"}]}