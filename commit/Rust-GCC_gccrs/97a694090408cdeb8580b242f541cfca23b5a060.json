{"sha": "97a694090408cdeb8580b242f541cfca23b5a060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdhNjk0MDkwNDA4Y2RlYjg1ODBiMjQyZjU0MWNmY2EyM2I1YTA2MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-06-09T16:41:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-06-09T16:41:10Z"}, "message": "cp-tree.h (cp_tree_index): Remove Java types.\n\n\t* cp-tree.h (cp_tree_index): Remove Java types.\n\t(java_fundamental_type_kind): New enumeration type.\n\t(java_fundamental_types): New array.\n\t* class.c (push_lang_context): Use java_fundamental_types.\n\t* decl.c (java_fundamental_types): Define it.\n\t(initialize_java_fundamental_types): New function.\n\t(init_decl_processing): Call it\n\t* mangle.c (integer_type_codes): Make it const.\n\t(java_fundamental_type_codes): New variable.\n\t(write_source_name_from_string): New function.\n\t(write_identifier): Constify.\n\t(write_builtin_type): Handle Java types.  Use same_type_p for type\n\tcomparison.\n\nFrom-SVN: r34472", "tree": {"sha": "237020250af95f493813ed575b672dc4e5ec0c34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/237020250af95f493813ed575b672dc4e5ec0c34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97a694090408cdeb8580b242f541cfca23b5a060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a694090408cdeb8580b242f541cfca23b5a060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97a694090408cdeb8580b242f541cfca23b5a060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a694090408cdeb8580b242f541cfca23b5a060/comments", "author": null, "committer": null, "parents": [{"sha": "669ec2b4f0d25a10753a0c98ff786c4cb0e152a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669ec2b4f0d25a10753a0c98ff786c4cb0e152a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669ec2b4f0d25a10753a0c98ff786c4cb0e152a5"}], "stats": {"total": 313, "additions": 268, "deletions": 45}, "files": [{"sha": "0bf44b49de851dbbead13015682a0fadc00972be", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a694090408cdeb8580b242f541cfca23b5a060/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a694090408cdeb8580b242f541cfca23b5a060/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=97a694090408cdeb8580b242f541cfca23b5a060", "patch": "@@ -1,3 +1,19 @@\n+2000-06-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (cp_tree_index): Remove Java types.\n+\t(java_fundamental_type_kind): New enumeration type.\n+\t(java_fundamental_types): New array.\n+\t* class.c (push_lang_context): Use java_fundamental_types.\n+\t* decl.c (java_fundamental_types): Define it.\n+\t(initialize_java_fundamental_types): New function.\t\n+\t(init_decl_processing): Call it\n+\t* mangle.c (integer_type_codes): Make it const.\n+\t(java_fundamental_type_codes): New variable.\n+\t(write_source_name_from_string): New function.\n+\t(write_identifier): Constify.\n+\t(write_builtin_type): Handle Java types.  Use same_type_p for type\n+\tcomparison.\n+\t\n 2000-06-09  Jason Merrill  <jason@casey.soma.redhat.com>\n \n \t* semantics.c (expand_body): Push to TV_EXPAND.\n@@ -6,6 +22,137 @@\n \n \t* tinfo2.cc: Just declare abort.\n \n+2000-06-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tRemove old ABI mangling code.\n+\t* cp-tree.h (cp_tree_index): Remove CPTI_TINFO_DECL_ID and\n+\tCPTI_TINFO_VAR_ID.\n+\t(tinfo_decl_id): Remove.\n+\t(tinfo_var_id): Likewise.\n+\t(name_mangling_version): Likewise.\n+\t(flag_do_squangling): Likewise.\n+\t(get_vtt_name): Likewise.\n+\t(init_method): Likewise.\n+\t(build_overload_name): Likewise.\n+\t(build_static_name): Likewise.\n+\t(build_decl_overload_real): Likewise.\n+\t(build_overload_with_type): Likewise.\n+\t(build_destructor_name): Likewise.\n+\t(get_id_2): Likewise.\n+\t(get_ctor_vtbl_name): Likewise.\n+\t(mangle_typeinfo_fn_for_type): New function.\n+\t(mangle_java_reflection_var_for_type): Likewise.\n+\t* call.c (build_new_method_call): Use mangle_vtt_for_type.\n+\t* class.c (get_vtable_name): Remove.\n+\t(get_vtt_name): Remove.\n+\t(get_vtable_decl): Use mangle_vtbl_for_type.\n+\t(build_vtt): Likewise.\n+\t(build_ctor_vtbl_group): Remove old ABI mangling support.\n+\t* decl.c (pushtag): Likewise.\n+\t(maybe_commonize_var): Use set_mangled_name_for_decl.\n+\t(grokfndecl): Remove old ABI mangling support.\n+\t(grokvardecl): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t(grok_op_properties): Adjust use of DEF_OPERATOR.\n+\t* decl2.c (name_mangling_version): Remove.\n+\t(lang_f_options): Remove squangle.\n+\t(unsupported_options): Add squangle.\n+\t(lang_decode_options): Don't set flag_do_squangling.  Issue a\n+\twarning for -fname-mangling-version.\n+\t(grokclassfn): Remove old ABI mangling support.\n+\t(finish_static_data_member_decl): Likewise.\n+\t(grokfield): Likewise.\n+\t(grokoptypename): Likewise.\n+\t(get_sentry): Likewise.\n+\t* init.c (build_java_class_ref): Use\n+\tmangle_java_reflection_var_for_type.\n+\t* lex.c (init_operators): Adjust use of DEF_OPERATOR.\n+\t(init_parse): Call init_mangle, not init_method.\n+\t* mangle.c (write_special_name_constructor): Handle\n+\tmaybe-in-charge constructors.\n+\t(write_special_name_destructor): Handle\n+\tmaybe-in-charge destructors.\n+\t(write_expression): Tweak code to handle non-type template\n+\targuments with reference type.\n+\t(mangle_typeinfo_fn_for_type): New function.\n+\t(mangle_java_reflection_var_for_type): Likewise.\n+\t(mangle_conv_op_name_for_type): Don't use a name that the user\n+\tcould type.\n+\t* method.c (enum mangling_flags): Remove.\n+\t(mangling_flags): Likewise.\n+\t(obstack_chunk_alloc): Likewise.\n+\t(obstack_chunk_free): Likewise.\n+\t(OB_INIT): Likewise.\n+\t(OB_PUTC): Likewise.\n+\t(OB_PUTC2): Likewise.\n+\t(OB_PUTS): Likewise.\n+\t(OB_PUTID): Likewise.\n+\t(OB_PUTCP): Likewise.\n+\t(OB_FINISH): Likewise.\n+\t(OB_LAST): Likewise.\n+\t(btypelist): Likewise.\n+\t(ktypelist): Likewise.\n+\t(maxbtype): Likewise.\n+\t(maxktype): Likewise.\n+\t(typevec): Likewise.\n+\t(maxtype): Likewise.\n+\t(init_method): Likewise.\n+\t(digit_buffer): Likewise.\n+\t(nofold): Likewise.\n+\t(start_squangling): Likewise.\n+\t(end_squangling): Likewise.\n+\t(icat): Likewise.\n+\t(dicat): Likewise.\n+\t(old_backref_index): Likewise.\n+\t(flush_repeats): Likewise.\n+\t(is_back_referenceable_type): Likewise.\n+\t(issue_nrepeats): Likewise.\n+\t(check_ktype): Likewise.\n+\t(issue_ktype): Likewise.\n+\t(build_overload_nested_name): Likewise.\n+\t(build_underscore_int): Likewise.\n+\t(build_overload_scope_ref): Likewise.\n+\t(mangle_expression): Likewise.\n+\t(build_overload_int): Likewise.\n+\t(mangled_C9x_name): Likewise.\n+\t(build_overload_value): Likewise.\n+\t(build_template_template_parm_names): Likewise.\n+\t(build_template_parm_names): Likewise.\n+\t(build_overload_identifier): Likewise.\n+\t(build_qualified_name): Likewise.\n+\t(build_mangled_name_for_type_with_Gcode): Likewise.\n+\t(build_mangled_name_for_type): Likewise.\n+\t(build_overload_name): Likewise.\n+\t(build_mangled_name): Likewise.\n+\t(process_modifiers): Likewise.\n+\t(check_btype): Likewise.\n+\t(process_overload_item): Likewise.\n+\t(build_static_name): Likewise.\n+\t(build_decl_overload_real): Likewise.\n+\t(set_mangled_name_for_decl): Remove old ABI mangling support.\n+\t(build_typename_overload): Remove.\n+\t(build_overload_with_type): Remove.\n+\t(get_id_2): Remove.\n+\t(get_ctor_vtbl_name): Remove.\n+\t(build_destructor_name): Likewise.\n+\t(set_mangled_name_for_decl): Likewise.\n+\t(make_thunk): Remove old ABI mangling support.\n+\t* operators.def: Likewise.\n+\t* pt.c (check_explicit_specialization): Don't call\n+\tset_mangled_name_for_template_decl.\n+\t(lookup_template_class): Remove old ABI mangling support.\n+\t(tsubst_friend_function): Update comment.\n+\t(tsubst_decl): Remove old ABI mangling support.\n+\t(tsubst_copy): Likewise.\n+\t(set_mangled_name_for_template_decl): Remove.\n+\t* rtti.c (init_rtti_processing): Use std_identifier.  Don't set\n+\ttinfo_decl_id or tinfo_var_id.\n+\t(get_tinfo_var): Use mangle_typeinfo_for_type.\n+\t(tinfo_name): Remove old ABI mangling support.\n+\t(get_tinfo_decl): Likewise.\n+\t(tinfo_base_init): Likewise.\n+\t(create_real_tinfo_var): Use a name that the user can't type.\n+\n 2000-06-09  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* lex.c (DEF_OPERATOR): Say `operator@' -not- `operator @'"}, {"sha": "27742c5bd92e0e0d67d11d299780daa46fe91be0", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a694090408cdeb8580b242f541cfca23b5a060/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a694090408cdeb8580b242f541cfca23b5a060/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=97a694090408cdeb8580b242f541cfca23b5a060", "patch": "@@ -5642,20 +5642,16 @@ push_lang_context (name)\n     }\n   else if (name == lang_name_java)\n     {\n+      java_fundamental_type_kind jtk;\n+\n       strict_prototype = strict_prototypes_lang_cplusplus;\n       current_lang_name = name;\n       /* DECL_IGNORED_P is initially set for these types, to avoid clutter.\n \t (See record_builtin_java_type in decl.c.)  However, that causes\n \t incorrect debug entries if these types are actually used.\n \t So we re-enable debug output after extern \"Java\". */\n-      DECL_IGNORED_P (java_byte_type_node) = 0;\n-      DECL_IGNORED_P (java_short_type_node) = 0;\n-      DECL_IGNORED_P (java_int_type_node) = 0;\n-      DECL_IGNORED_P (java_long_type_node) = 0;\n-      DECL_IGNORED_P (java_float_type_node) = 0;\n-      DECL_IGNORED_P (java_double_type_node) = 0;\n-      DECL_IGNORED_P (java_char_type_node) = 0;\n-      DECL_IGNORED_P (java_boolean_type_node) = 0;\n+      for (jtk = jtk_first; jtk < jtk_last; ++jtk)\n+\tDECL_IGNORED_P (java_fundamental_types[jtk]) = 0;\n     }\n   else if (name == lang_name_c)\n     {"}, {"sha": "5f25f17febc93511395a1fd24ff9b2d4204b70f9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a694090408cdeb8580b242f541cfca23b5a060/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a694090408cdeb8580b242f541cfca23b5a060/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=97a694090408cdeb8580b242f541cfca23b5a060", "patch": "@@ -516,15 +516,6 @@ extern tree exception_throw_decl;\n \n enum cp_tree_index\n {\n-    CPTI_JAVA_BYTE_TYPE,\n-    CPTI_JAVA_SHORT_TYPE,\n-    CPTI_JAVA_INT_TYPE,\n-    CPTI_JAVA_LONG_TYPE,\n-    CPTI_JAVA_FLOAT_TYPE,\n-    CPTI_JAVA_DOUBLE_TYPE,\n-    CPTI_JAVA_CHAR_TYPE,\n-    CPTI_JAVA_BOOLEAN_TYPE,\n-\n     CPTI_VOID_ZERO,\n     CPTI_WCHAR_DECL,\n     CPTI_VTABLE_ENTRY_TYPE,\n@@ -608,15 +599,6 @@ enum cp_tree_index\n \n extern tree cp_global_trees[CPTI_MAX];\n \n-#define java_byte_type_node\t\tcp_global_trees[CPTI_JAVA_BYTE_TYPE]\n-#define java_short_type_node\t\tcp_global_trees[CPTI_JAVA_SHORT_TYPE]\n-#define java_int_type_node\t\tcp_global_trees[CPTI_JAVA_INT_TYPE]\n-#define java_long_type_node\t\tcp_global_trees[CPTI_JAVA_LONG_TYPE]\n-#define java_float_type_node\t\tcp_global_trees[CPTI_JAVA_FLOAT_TYPE]\n-#define java_double_type_node\t\tcp_global_trees[CPTI_JAVA_DOUBLE_TYPE]\n-#define java_char_type_node\t\tcp_global_trees[CPTI_JAVA_CHAR_TYPE]\n-#define java_boolean_type_node\t\tcp_global_trees[CPTI_JAVA_BOOLEAN_TYPE]\n-\n #define void_zero_node\t\t\tcp_global_trees[CPTI_VOID_ZERO]\n #define wchar_decl_node\t\t\tcp_global_trees[CPTI_WCHAR_DECL]\n #define vtable_entry_type\t\tcp_global_trees[CPTI_VTABLE_ENTRY_TYPE]\n@@ -746,6 +728,26 @@ extern tree cp_global_trees[CPTI_MAX];\n    destructors.  */\n #define vtt_parm_type                   cp_global_trees[CPTI_VTT_PARM_TYPE]\n \n+/* The various kinds of fundamental Java types.  */\n+\n+typedef enum java_fundamental_type_kind\n+{\n+  jtk_first, /* Must be first. */\n+  jtk_byte = jtk_first, \n+  jtk_short,\n+  jtk_int,\n+  jtk_long,\n+  jtk_float,\n+  jtk_double,\n+  jtk_char,\n+  jtk_boolean,\n+  jtk_last /* Must be last */\n+} java_fundamental_type_kind;\n+\n+/* The fundamental Java types.  */\n+\n+extern tree java_fundamental_types[jtk_last];\n+\n /* Global state.  */\n \n struct stmt_tree {"}, {"sha": "a1b936143217a24bc0c7ad1fba832470e6ad61fb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 43, "deletions": 11, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a694090408cdeb8580b242f541cfca23b5a060/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a694090408cdeb8580b242f541cfca23b5a060/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=97a694090408cdeb8580b242f541cfca23b5a060", "patch": "@@ -186,6 +186,7 @@ static tree start_cleanup_fn PARAMS ((void));\n static void end_cleanup_fn PARAMS ((void));\n static tree cp_make_fname_decl PARAMS ((tree, const char *, int));\n static void initialize_predefined_identifiers PARAMS ((void));\n+static void initialize_java_fundamental_types PARAMS ((void));\n static tree check_special_function_return_type \n   PARAMS ((special_function_kind, tree, tree, tree));\n static tree push_cp_library_fn PARAMS ((enum tree_code, tree));\n@@ -261,6 +262,10 @@ tree error_mark_list;\n \n tree cp_global_trees[CPTI_MAX];\n \n+/* The fundamental Java types.  */\n+\n+tree java_fundamental_types[jtk_last];\n+\n /* Indicates that there is a type value in some namespace, although\n    that is not necessarily in scope at the moment.  */\n \n@@ -6142,9 +6147,9 @@ record_builtin_type (rid_index, name, type)\n }\n \n /* Record one of the standard Java types.\n- * Declare it as having the given NAME.\n- * If SIZE > 0, it is the size of one of the integral types;\n- * otherwise it is the negative of the size of one of the other types.  */\n+   Declare it as having the given NAME.\n+   If SIZE > 0, it is the size of one of the integral types;\n+   otherwise it is the negative of the size of one of the other types.  */\n \n static tree\n record_builtin_java_type (name, size)\n@@ -6248,6 +6253,38 @@ initialize_predefined_identifiers ()\n     }\n }\n \n+/* Create nodes representing the fundamental Java types.  */\n+\n+static void\n+initialize_java_fundamental_types ()\n+{\n+  typedef struct jft_info \n+  {\n+    /* The name of the type.  */\n+    const char *name;\n+    /* The number of bits in the type.  */\n+    int size;\n+  } jft_info;\n+\n+  static jft_info jft_infos[jtk_last] = {\n+    { \"__java_byte\", 8 },\n+    { \"__java_short\", 16 },\n+    { \"__java_int\", 32 },\n+    { \"__java_long\", 64 },\n+    { \"__java_float\", -32 },\n+    { \"__java_double\", -64 },\n+    { \"__java_char\", -16 },\n+    { \"__java_boolean\", -1 }\n+  };\n+\n+  java_fundamental_type_kind jtk;\n+\n+  for (jtk = jtk_first; jtk < jtk_last; ++jtk)\n+    java_fundamental_types[jtk]\n+      = record_builtin_java_type (jft_infos[jtk].name, \n+\t\t\t\t  jft_infos[jtk].size);\n+}\n+\n /* Create the predefined scalar types of C,\n    and some nodes representing standard constants (0, 1, (void *)0).\n    Initialize the global binding level.\n@@ -6397,14 +6434,7 @@ init_decl_processing ()\n \n   build_common_tree_nodes_2 (flag_short_double);\n \n-  java_byte_type_node = record_builtin_java_type (\"__java_byte\", 8);\n-  java_short_type_node = record_builtin_java_type (\"__java_short\", 16);\n-  java_int_type_node = record_builtin_java_type (\"__java_int\", 32);\n-  java_long_type_node = record_builtin_java_type (\"__java_long\", 64);\n-  java_float_type_node = record_builtin_java_type (\"__java_float\", -32);\n-  java_double_type_node = record_builtin_java_type (\"__java_double\", -64);\n-  java_char_type_node = record_builtin_java_type (\"__java_char\", -16);\n-  java_boolean_type_node = record_builtin_java_type (\"__java_boolean\", -1);\n+  initialize_java_fundamental_types ();\n \n   integer_two_node = build_int_2 (2, 0);\n   TREE_TYPE (integer_two_node) = integer_type_node;\n@@ -6656,6 +6686,8 @@ init_decl_processing ()\n   /* Add GC roots for all of our global variables.  */\n   ggc_add_tree_root (c_global_trees, sizeof c_global_trees / sizeof(tree));\n   ggc_add_tree_root (cp_global_trees, sizeof cp_global_trees / sizeof(tree));\n+  ggc_add_tree_root (java_fundamental_types, \n+\t\t     sizeof (java_fundamental_types) / sizeof (tree));\n   ggc_add_tree_root (&integer_three_node, 1);\n   ggc_add_tree_root (&integer_two_node, 1);\n   ggc_add_tree_root (&signed_size_zero_node, 1);"}, {"sha": "ff94433c4c791f59aec7976efc2226aa058ef797", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 54, "deletions": 8, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a694090408cdeb8580b242f541cfca23b5a060/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a694090408cdeb8580b242f541cfca23b5a060/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=97a694090408cdeb8580b242f541cfca23b5a060", "patch": "@@ -120,7 +120,7 @@ static tree subst_identifiers[SUBID_MAX];\n \n /* Single-letter codes for builtin integer types, defined in\n    <builtin-type>.  These are indexed by integer_type_kind values.  */\n-static char\n+static const char\n integer_type_codes[itk_none] =\n {\n   'c',  /* itk_char */\n@@ -136,6 +136,21 @@ integer_type_codes[itk_none] =\n   'y'   /* itk_unsigned_long_long */\n };\n \n+/* Manglings for the various builtin Java types.  */\n+\n+static const char *\n+java_fundamental_type_codes[jtk_last] = \n+{\n+  \"jb\", /* jtk_byte */\n+  \"js\", /* jtk_short */\n+  \"ji\", /* jtk_int */\n+  \"jl\", /* jtk_long */\n+  \"jf\", /* jtk_float */\n+  \"jd\", /* jtk_double */\n+  \"jc\", /* jtk_char */\n+  \"jt\"  /* jtk_boolean */\n+};\n+\n /* Functions for handling substitutions.  */\n \n static inline tree canonicalize_for_substitution PARAMS ((tree));\n@@ -156,10 +171,11 @@ static void write_prefix PARAMS ((tree));\n static void write_template_prefix PARAMS ((tree));\n static void write_component PARAMS ((tree));\n static void write_unqualified_name PARAMS ((tree));\n+static void write_source_name_from_string PARAMS ((const char *));\n static void write_source_name PARAMS ((tree));\n static void write_number PARAMS ((int, int));\n static void write_integer_cst PARAMS ((tree));\n-static void write_identifier PARAMS ((char *));\n+static void write_identifier PARAMS ((const char *));\n static void write_special_name_constructor PARAMS ((tree));\n static void write_special_name_destructor PARAMS ((tree));\n static void write_type PARAMS ((tree));\n@@ -898,6 +914,18 @@ write_unqualified_name (decl)\n     write_source_name (DECL_NAME (decl));\n }\n \n+/* Non-termial <source-name>.  NAME is a NTBS.\n+\n+     <source-name> ::= </length/ number> <identifier>  */\n+\n+static void\n+write_source_name_from_string (name)\n+     const char *name;\n+{\n+  write_number (strlen (name), 10);\n+  write_identifier (name);\n+}\n+\n /* Non-termial <source-name>.  IDENTIFIER is an IDENTIFIER_NODE.  \n \n      <source-name> ::= </length/ number> <identifier>  */\n@@ -969,7 +997,7 @@ write_integer_cst (cst)\n \n static void\n write_identifier (identifier)\n-     char *identifier;\n+     const char *identifier;\n {\n   MANGLE_TRACE (\"identifier\", identifier);\n   write_string (identifier);\n@@ -1307,6 +1335,24 @@ static void\n write_builtin_type (type)\n      tree type;\n {\n+  /* If this is a Java type, mangle it specially, as a vendor\n+     extension.  */\n+  if (TYPE_FOR_JAVA (type))\n+    {\n+      java_fundamental_type_kind jtk;\n+\n+      for (jtk = jtk_first; jtk < jtk_last; ++jtk)\n+\tif (same_type_p (type, java_fundamental_types[jtk]))\n+\t  {\n+\t    /* The `u' indicates a vendor extension.  */\n+\t    write_char ('u');\n+\t    write_source_name_from_string (java_fundamental_type_codes[jtk]);\n+\t    return;\n+\t  }\n+\n+      my_friendly_abort (20000609);\n+    }\n+\n   switch (TREE_CODE (type))\n     {\n     case VOID_TYPE:\n@@ -1324,15 +1370,15 @@ write_builtin_type (type)\n \n       /* TYPE may still be wchar_t, since that isn't in\n \t integer_type_nodes.  */\n-      if (type == wchar_type_node)\n+      if (same_type_p (type, wchar_type_node))\n \twrite_char ('w');\n       else\n \t{\n \t  size_t itk;\n \t  /* Assume TYPE is one of the shared integer type nodes.  Find\n \t     it in the array of these nodes.  */\n \t  for (itk = 0; itk < itk_none; ++itk)\n-\t    if (type == integer_types[itk])\n+\t    if (same_type_p (type, integer_types[itk]))\n \t      {\n \t\t/* Print the corresponding single-letter code.  */\n \t\twrite_char (integer_type_codes[itk]);\n@@ -1346,11 +1392,11 @@ write_builtin_type (type)\n       break;\n \n     case REAL_TYPE:\n-      if (type == float_type_node)\n+      if (same_type_p (type, float_type_node))\n \twrite_char ('f');\n-      else if (type == double_type_node)\n+      else if (same_type_p (type, double_type_node))\n \twrite_char ('d');\n-      else if (type == long_double_type_node)\n+      else if (same_type_p (type, long_double_type_node))\n \twrite_char ('e');\n       else\n \tmy_friendly_abort (20000409);"}]}