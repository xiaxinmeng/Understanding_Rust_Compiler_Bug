{"sha": "4116e7d0e0cd33503b5968808ef6e6edc987d816", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDExNmU3ZDBlMGNkMzM1MDNiNTk2ODgwOGVmNmU2ZWRjOTg3ZDgxNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-04-14T13:51:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-04-14T13:51:42Z"}, "message": "opt.ads (Suppress_Back_Annotation): Remove as unused.\n\n\t* opt.ads (Suppress_Back_Annotation): Remove as unused.\n\t* fe.h (Back_Annotate_Rep_Info): Likewise.\n\t(Global_Discard_Names): Likewise.\n\t(List_Representation_Info): Declare.\n\t* types.h (Uint_Minus_1): Likewise.\n\t* repinfo.ads: Document back-annotation change.\n\t* gcc-interface/gigi.h (init_gnat_decl): Declare.\n\t(destroy_gnat_decl): Likewise.\n\t* gcc-interface/decl.c (annotate_value): Do not create the cache of\n\tannotated values here but...\n\t<CALL_EXPR>: Only inline the call if -gnatR3 is specified or we are\n\tin ASIS mode.\n\t(init_gnat_decl): ...here instead.  New function.\n\t(destroy_gnat_decl): Likewise.\n\t* gcc-interface/trans.c (gigi): Call {init|destroy}_gnat_decl.\n\t* gcc-interface/utils.c (init_gnat_utils): Minor reformatting.\n\nCo-Authored-By: Robert Dewar <dewar@adacore.com>\n\nFrom-SVN: r209371", "tree": {"sha": "4771338dc746c23f1d3f4b9d8667099152513f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4771338dc746c23f1d3f4b9d8667099152513f47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4116e7d0e0cd33503b5968808ef6e6edc987d816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4116e7d0e0cd33503b5968808ef6e6edc987d816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4116e7d0e0cd33503b5968808ef6e6edc987d816", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4116e7d0e0cd33503b5968808ef6e6edc987d816/comments", "author": null, "committer": null, "parents": [{"sha": "cb27986c9b5f270f880089d0bda74d10e76e8a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb27986c9b5f270f880089d0bda74d10e76e8a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb27986c9b5f270f880089d0bda74d10e76e8a3d"}], "stats": {"total": 111, "additions": 82, "deletions": 29}, "files": [{"sha": "b07c70c66f37195c87e62004560137cb6f05e82e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4116e7d0e0cd33503b5968808ef6e6edc987d816", "patch": "@@ -1,3 +1,23 @@\n+2014-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n+            Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.ads (Suppress_Back_Annotation): Remove as unused.\n+\t* fe.h (Back_Annotate_Rep_Info): Likewise.\n+\t(Global_Discard_Names): Likewise.\n+\t(List_Representation_Info): Declare.\n+\t* types.h (Uint_Minus_1): Likewise.\n+\t* repinfo.ads: Document back-annotation change.\n+\t* gcc-interface/gigi.h (init_gnat_decl): Declare.\n+\t(destroy_gnat_decl): Likewise.\n+\t* gcc-interface/decl.c (annotate_value): Do not create the cache of\n+\tannotated values here but...\n+\t<CALL_EXPR>: Only inline the call if -gnatR3 is specified or we are\n+\tin ASIS mode.\n+\t(init_gnat_decl): ...here instead.  New function.\n+\t(destroy_gnat_decl): Likewise.\n+\t* gcc-interface/trans.c (gigi): Call {init|destroy}_gnat_decl.\n+\t* gcc-interface/utils.c (init_gnat_utils): Minor reformatting.\n+\n 2014-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (create_field_decl_from): Finalize non-constant"}, {"sha": "d9fe48b5baa291b5dc70b4d57651a67d379b893b", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=4116e7d0e0cd33503b5968808ef6e6edc987d816", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -178,23 +178,21 @@ extern Boolean In_Same_Source_Unit              (Node_Id, Node_Id);\n \n /* opt: */\n \n-#define Back_Annotate_Rep_Info         opt__back_annotate_rep_info\n #define Exception_Extra_Info           opt__exception_extra_info\n #define Exception_Locations_Suppressed opt__exception_locations_suppressed\n #define Exception_Mechanism            opt__exception_mechanism\n #define Generate_SCO_Instance_Table    opt__generate_sco_instance_table\n-#define Global_Discard_Names           opt__global_discard_names\n #define Float_Format                   opt__float_format\n+#define List_Representation_Info       opt__list_representation_info\n \n typedef enum {Setjmp_Longjmp, Back_End_Exceptions} Exception_Mechanism_Type;\n \n-extern Boolean Back_Annotate_Rep_Info;\n extern Boolean Exception_Extra_Info;\n extern Boolean Exception_Locations_Suppressed;\n extern Exception_Mechanism_Type Exception_Mechanism;\n extern Boolean Generate_SCO_Instance_Table;\n-extern Boolean Global_Discard_Names;\n extern Char Float_Format;\n+extern Int List_Representation_Info;\n \n /* restrict: */\n "}, {"sha": "ae512b0b22c8e072d9a46dc9ca91122dfa07b305", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=4116e7d0e0cd33503b5968808ef6e6edc987d816", "patch": "@@ -7467,12 +7467,8 @@ annotate_value (tree gnu_size)\n     {\n       struct tree_int_map *e;\n \n-      if (!annotate_value_cache)\n-        annotate_value_cache = htab_create_ggc (512, tree_int_map_hash,\n-\t\t\t\t\t        tree_int_map_eq, 0);\n       in.base.from = gnu_size;\n-      e = (struct tree_int_map *)\n-\t    htab_find (annotate_value_cache, &in);\n+      e = (struct tree_int_map *) htab_find (annotate_value_cache, &in);\n \n       if (e)\n \treturn (Node_Ref_Or_Val) e->to;\n@@ -7559,11 +7555,17 @@ annotate_value (tree gnu_size)\n       break;\n \n     case CALL_EXPR:\n-      {\n-\ttree t = maybe_inline_call_in_expr (gnu_size);\n-\tif (t)\n-\t  return annotate_value (t);\n-      }\n+      /* In regular mode, inline back only if symbolic annotation is requested\n+\t in order to avoid memory explosion on big discriminated record types.\n+\t But not in ASIS mode, as symbolic annotation is required for DDA.  */\n+      if (List_Representation_Info == 3 || type_annotate_only)\n+\t{\n+\t  tree t = maybe_inline_call_in_expr (gnu_size);\n+\t  if (t)\n+\t    return annotate_value (t);\n+\t}\n+      else\n+\treturn Uint_Minus_1;\n \n       /* Fall through... */\n \n@@ -7592,11 +7594,10 @@ annotate_value (tree gnu_size)\n   if (in.base.from)\n     {\n       struct tree_int_map **h;\n-      /* We can't assume the hash table data hasn't moved since the\n-\t initial look up, so we have to search again.  Allocating and\n-\t inserting an entry at that point would be an alternative, but\n-\t then we'd better discard the entry if we decided not to cache\n-\t it.  */\n+      /* We can't assume the hash table data hasn't moved since the initial\n+\t look up, so we have to search again.  Allocating and inserting an\n+\t entry at that point would be an alternative, but then we'd better\n+\t discard the entry if we decided not to cache it.  */\n       h = (struct tree_int_map **)\n \t    htab_find_slot (annotate_value_cache, &in, INSERT);\n       gcc_assert (!*h);\n@@ -8922,4 +8923,24 @@ concat_name (tree gnu_name, const char *suffix)\n   return get_identifier_with_length (new_name, len);\n }\n \n+/* Initialize data structures of the decl.c module.  */\n+\n+void\n+init_gnat_decl (void)\n+{\n+  /* Initialize the cache of annotated values.  */\n+  annotate_value_cache\n+    = htab_create_ggc (512, tree_int_map_hash, tree_int_map_eq, 0);\n+}\n+\n+/* Destroy data structures of the decl.c module.  */\n+\n+void\n+destroy_gnat_decl (void)\n+{\n+  /* Destroy the cache of annotated values.  */\n+  htab_delete (annotate_value_cache);\n+  annotate_value_cache = NULL;\n+}\n+\n #include \"gt-ada-decl.h\""}, {"sha": "76fa2abde9f634d7cf0a00756261d33d477160ea", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=4116e7d0e0cd33503b5968808ef6e6edc987d816", "patch": "@@ -210,6 +210,12 @@ extern tree create_concat_name (Entity_Id gnat_entity, const char *suffix);\n    the name followed by \"___\" and the specified suffix.  */\n extern tree concat_name (tree gnu_name, const char *suffix);\n \n+/* Initialize data structures of the decl.c module.  */\n+extern void init_gnat_decl (void);\n+\n+/* Destroy data structures of the decl.c module.  */\n+extern void destroy_gnat_decl (void);\n+\n /* Highest number in the front-end node table.  */\n extern int max_gnat_nodes;\n "}, {"sha": "59358ff302866d5eed67308aec423fb17256d8cc", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=4116e7d0e0cd33503b5968808ef6e6edc987d816", "patch": "@@ -353,6 +353,7 @@ gigi (Node_Id gnat_root,\n \n   /* Initialize ourselves.  */\n   init_code_table ();\n+  init_gnat_decl ();\n   init_gnat_utils ();\n \n   /* If we are just annotating types, give VOID_TYPE zero sizes to avoid\n@@ -727,6 +728,7 @@ gigi (Node_Id gnat_root,\n     }\n \n   /* Destroy ourselves.  */\n+  destroy_gnat_decl ();\n   destroy_gnat_utils ();\n \n   /* We cannot track the location of errors past this point.  */"}, {"sha": "cfa079191809a48b7b8a272209d3fbaa5d0099b4", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=4116e7d0e0cd33503b5968808ef6e6edc987d816", "patch": "@@ -251,8 +251,8 @@ init_gnat_utils (void)\n   dummy_node_table = ggc_alloc_cleared_vec_tree (max_gnat_nodes);\n \n   /* Initialize the hash table of padded types.  */\n-  pad_type_hash_table = htab_create_ggc (512, pad_type_hash_hash,\n-\t\t\t\t\t pad_type_hash_eq, 0);\n+  pad_type_hash_table\n+    = htab_create_ggc (512, pad_type_hash_hash, pad_type_hash_eq, 0);\n }\n \n /* Destroy data structures of the utils.c module.  */"}, {"sha": "ecefdadc6dfd4d64183313a62782717a40138d97", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=4116e7d0e0cd33503b5968808ef6e6edc987d816", "patch": "@@ -1371,12 +1371,6 @@ package Opt is\n    --  initialized by Osint.Initialize, and further initialized by the\n    --  Adjust_Global_Switches flag in Gnat1drv.\n \n-   Suppress_Back_Annotation : Boolean := False;\n-   --  GNAT\n-   --  This flag is set True if back annotation of representation information\n-   --  is to be suppressed. This is set if neither -gnatt or -gnatR0-3 is set.\n-   --  This avoids unnecessary time being spent on back annotation.\n-\n    Table_Factor : Int := 1;\n    --  GNAT\n    --  Factor by which all initial table sizes set in Alloc are multiplied."}, {"sha": "7896439a0b5ae1d0bc7f2b2c83a255e04ad48976", "filename": "gcc/ada/repinfo.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Frepinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Frepinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.ads?ref=4116e7d0e0cd33503b5968808ef6e6edc987d816", "patch": "@@ -108,6 +108,14 @@ package Repinfo is\n    --       represent the value of such an expression, as explained in\n    --       the following section.\n \n+   --  Note: the extended back-annotation for the dynamic case is needed only\n+   --  for -gnatR3 output, and for proper operation of the ASIS DDA. Since it\n+   --  can be expensive to do this back annotation (for discriminated records\n+   --  with many variable length arrays), we only do the full back annotation\n+   --  in -gnatR3 mode, or ASIS mode. In any other mode, the back-end just sets\n+   --  the value to Uint_Minus_1, indicating that the value of the attribute\n+   --  depends on discriminant information, but not giving further details.\n+\n    --  GCC expressions are represented with a Uint value that is negative.\n    --  See the body of this package for details on the representation used.\n \n@@ -117,7 +125,9 @@ package Repinfo is\n    --  as a negative Uint value, provides an expression which, when evaluated\n    --  with a given set of discriminant values, indicates whether the variant\n    --  is present for that set of values (result is True, i.e. non-zero) or\n-   --  not present (result is False, i.e. zero).\n+   --  not present (result is False, i.e. zero). Again, the full annotation of\n+   --  this field is done only in -gnatR3 mode or in ASIS mode, and in other\n+   --  modes, the value is set to Uint_Minus_1.\n \n    subtype Node_Ref is Uint;\n    --  Subtype used for negative Uint values used to represent nodes"}, {"sha": "dd049db908a2134d58444ed8c6b25133437ee31a", "filename": "gcc/ada/types.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4116e7d0e0cd33503b5968808ef6e6edc987d816/gcc%2Fada%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.h?ref=4116e7d0e0cd33503b5968808ef6e6edc987d816", "patch": "@@ -272,6 +272,8 @@ SUBTYPE (Uint_Direct, Uint, Uint_Direct_First, Uint_Direct_Last)\n #define Uint_10 (Uint_Direct_Bias + 10)\n #define Uint_16 (Uint_Direct_Bias + 16)\n \n+#define Uint_Minus_1 (Uint_Direct_Bias - 1)\n+\n /* Types for Ureal_Support Package:  */\n \n /* Type used for representation of universal reals.  */"}]}