{"sha": "c1aaec5bf88a551100211db824f9a5666d25c2b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFhYWVjNWJmODhhNTUxMTAwMjExZGI4MjRmOWE1NjY2ZDI1YzJiOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-21T10:03:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-21T10:03:38Z"}, "message": "cp-tree.h (TREE_INDIRECT_USING): Use TREE_LANG_FLAG_0 accessor.\n\n2012-08-21  Richard Guenther  <rguenther@suse.de>\n\n\tcp/\n\t* cp-tree.h (TREE_INDIRECT_USING): Use TREE_LANG_FLAG_0 accessor.\n\t(ATTR_IS_DEPENDENT): Likewise.\n\t(ARGUMENT_PACK_INCOMPLETE_P): Use TREE_ADDRESSABLE instead of\n\tTREE_LANG_FLAG_0 on TREE_VECs.\n\n\t* tree.h (struct tree_base): Add union to make it possible to\n\tre-use the upper 4 bytes for tree codes that do not need as\n\tmany flags as others.  Move visited and default_def_flag to\n\tcommon bits section in exchange for saturating_flag and\n\tunsigned_flag.  Add SSA name version and tree vec length\n\tfields here.\n\t(struct tree_vec): Remove length field here.\n\t(struct tree_ssa_name): Remove version field here.\n\nFrom-SVN: r190558", "tree": {"sha": "5d388d9b3940ec295a06b72282eb23fb4a67ac18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d388d9b3940ec295a06b72282eb23fb4a67ac18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1aaec5bf88a551100211db824f9a5666d25c2b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1aaec5bf88a551100211db824f9a5666d25c2b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1aaec5bf88a551100211db824f9a5666d25c2b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1aaec5bf88a551100211db824f9a5666d25c2b8/comments", "author": null, "committer": null, "parents": [{"sha": "12d876079acd2a3dddc519467eeb4cc00219b1cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d876079acd2a3dddc519467eeb4cc00219b1cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d876079acd2a3dddc519467eeb4cc00219b1cc"}], "stats": {"total": 179, "additions": 111, "deletions": 68}, "files": [{"sha": "86af7cc63ffff1dc902dd5f571eec48dff7675f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aaec5bf88a551100211db824f9a5666d25c2b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aaec5bf88a551100211db824f9a5666d25c2b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1aaec5bf88a551100211db824f9a5666d25c2b8", "patch": "@@ -1,7 +1,19 @@\n+2012-08-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (struct tree_base): Add union to make it possible to\n+\tre-use the upper 4 bytes for tree codes that do not need as\n+\tmany flags as others.  Move visited and default_def_flag to\n+\tcommon bits section in exchange for saturating_flag and\n+\tunsigned_flag.  Add SSA name version and tree vec length\n+\tfields here.\n+\t(struct tree_vec): Remove length field here.\n+\t(struct tree_ssa_name): Remove version field here.\n+\n 2012-08-20  Jan Hubicka  <jh@suse.cz>\n \n \tPR fortran/48636\n-\t* ipa-inline.c (want_inline_small_function_p): Take loop_iterations hint.\n+\t* ipa-inline.c (want_inline_small_function_p): Take loop_iterations\n+\thint.\n \t(edge_badness): Likewise.\n \t* ipa-inline.h (inline_hints_vals): Add INLINE_HINT_loop_iterations.\n \t(inline_summary): Add loop_iterations."}, {"sha": "0d9de13f74ba060867f342d412a8bf50d30a0d9f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aaec5bf88a551100211db824f9a5666d25c2b8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aaec5bf88a551100211db824f9a5666d25c2b8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c1aaec5bf88a551100211db824f9a5666d25c2b8", "patch": "@@ -1,3 +1,10 @@\n+2012-08-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cp-tree.h (TREE_INDIRECT_USING): Use TREE_LANG_FLAG_0 accessor.\n+\t(ATTR_IS_DEPENDENT): Likewise.\n+\t(ARGUMENT_PACK_INCOMPLETE_P): Use TREE_ADDRESSABLE instead of\n+\tTREE_LANG_FLAG_0 on TREE_VECs.\n+\n 2012-08-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/10416"}, {"sha": "54615bb1966f48229235d20201109f89334471c9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aaec5bf88a551100211db824f9a5666d25c2b8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aaec5bf88a551100211db824f9a5666d25c2b8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c1aaec5bf88a551100211db824f9a5666d25c2b8", "patch": "@@ -2520,11 +2520,11 @@ struct GTY((variable_size)) lang_decl {\n \n /* In a TREE_LIST concatenating using directives, indicate indirect\n    directives  */\n-#define TREE_INDIRECT_USING(NODE) (TREE_LIST_CHECK (NODE)->base.lang_flag_0)\n+#define TREE_INDIRECT_USING(NODE) TREE_LANG_FLAG_0 (TREE_LIST_CHECK (NODE))\n \n /* In a TREE_LIST in an attribute list, indicates that the attribute\n    must be applied at instantiation time.  */\n-#define ATTR_IS_DEPENDENT(NODE) (TREE_LIST_CHECK (NODE)->base.lang_flag_0)\n+#define ATTR_IS_DEPENDENT(NODE) TREE_LANG_FLAG_0 (TREE_LIST_CHECK (NODE))\n \n extern tree decl_shadowed_for_var_lookup (tree);\n extern void decl_shadowed_for_var_insert (tree, tree);\n@@ -2881,7 +2881,7 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n    arguments will be placed into the beginning of the argument pack,\n    but additional arguments might still be deduced.  */\n #define ARGUMENT_PACK_INCOMPLETE_P(NODE)        \\\n-  TREE_LANG_FLAG_0 (ARGUMENT_PACK_ARGS (NODE))\n+  TREE_ADDRESSABLE (ARGUMENT_PACK_ARGS (NODE))\n \n /* When ARGUMENT_PACK_INCOMPLETE_P, stores the explicit template\n    arguments used to fill this pack.  */"}, {"sha": "fef9e0d068e60280cad50320471bdc402d45fc41", "filename": "gcc/tree.h", "status": "modified", "additions": 88, "deletions": 64, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aaec5bf88a551100211db824f9a5666d25c2b8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aaec5bf88a551100211db824f9a5666d25c2b8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c1aaec5bf88a551100211db824f9a5666d25c2b8", "patch": "@@ -417,7 +417,8 @@ enum omp_clause_code\n    so all nodes have these fields.\n \n    See the accessor macros, defined below, for documentation of the\n-   fields.  */\n+   fields, and the table below which connects the fileds and the\n+   accessor macros.  */\n \n struct GTY(()) tree_base {\n   ENUM_BITFIELD(tree_code) code : 16;\n@@ -427,9 +428,9 @@ struct GTY(()) tree_base {\n   unsigned addressable_flag : 1;\n   unsigned volatile_flag : 1;\n   unsigned readonly_flag : 1;\n-  unsigned unsigned_flag : 1;\n   unsigned asm_written_flag: 1;\n   unsigned nowarning_flag : 1;\n+  unsigned visited : 1;\n \n   unsigned used_flag : 1;\n   unsigned nothrow_flag : 1;\n@@ -438,38 +439,42 @@ struct GTY(()) tree_base {\n   unsigned private_flag : 1;\n   unsigned protected_flag : 1;\n   unsigned deprecated_flag : 1;\n-  unsigned saturating_flag : 1;\n-\n   unsigned default_def_flag : 1;\n-  unsigned lang_flag_0 : 1;\n-  unsigned lang_flag_1 : 1;\n-  unsigned lang_flag_2 : 1;\n-  unsigned lang_flag_3 : 1;\n-  unsigned lang_flag_4 : 1;\n-  unsigned lang_flag_5 : 1;\n-  unsigned lang_flag_6 : 1;\n \n-  unsigned visited : 1;\n-  unsigned packed_flag : 1;\n-  unsigned user_align : 1;\n-  unsigned nameless_flag : 1;\n-\n-  unsigned spare : 12;\n-\n-  /* This field is only used with type nodes; the only reason it is present\n-     in tree_base instead of tree_type is to save space.  The size of the\n-     field must be large enough to hold addr_space_t values.  */\n-  unsigned address_space : 8;\n-};\n-\n-struct GTY(()) tree_typed {\n-  struct tree_base base;\n-  tree type;\n-};\n-\n-struct GTY(()) tree_common {\n-  struct tree_typed typed;\n-  tree chain;\n+  union {\n+    /* The bits in the following structure should only be used with\n+       accessor macros that constrain inputs with tree checking.  */\n+    struct {\n+      unsigned lang_flag_0 : 1;\n+      unsigned lang_flag_1 : 1;\n+      unsigned lang_flag_2 : 1;\n+      unsigned lang_flag_3 : 1;\n+      unsigned lang_flag_4 : 1;\n+      unsigned lang_flag_5 : 1;\n+      unsigned lang_flag_6 : 1;\n+      unsigned saturating_flag : 1;\n+\n+      unsigned unsigned_flag : 1;\n+      unsigned packed_flag : 1;\n+      unsigned user_align : 1;\n+      unsigned nameless_flag : 1;\n+      unsigned spare0 : 4;\n+\n+      unsigned spare1 : 8;\n+\n+      /* This field is only used with TREE_TYPE nodes; the only reason it is\n+\t present in tree_base instead of tree_type is to save space.  The size\n+\t of the field must be large enough to hold addr_space_t values.  */\n+      unsigned address_space : 8;\n+    } bits;\n+    /* The following fields are present in tree_base to save space.  The\n+       nodes using them do not require any of the flags above and so can\n+       make better use of the 4-byte sized word.  */\n+    /* VEC length.  This field is only used with TREE_VEC.  */\n+    int length;\n+    /* SSA version number.  This field is only used with SSA_NAME.  */\n+    unsigned int version;\n+  } GTY((skip(\"\"))) u;\n };\n \n /* The following table lists the uses of each of the above flags and\n@@ -638,7 +643,10 @@ struct GTY(()) tree_common {\n        TREE_ASM_WRITTEN in\n            VAR_DECL, FUNCTION_DECL, TYPE_DECL\n            RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE\n-           BLOCK, SSA_NAME, STRING_CST\n+           BLOCK, STRING_CST\n+\n+       SSA_NAME_OCCURS_IN_ABNORMAL_PHI in\n+           SSA_NAME\n \n    used_flag:\n \n@@ -659,6 +667,9 @@ struct GTY(()) tree_common {\n        TREE_THIS_NOTRAP in\n           INDIRECT_REF, MEM_REF, TARGET_MEM_REF, ARRAY_REF, ARRAY_RANGE_REF\n \n+       SSA_NAME_IN_FREELIST in\n+          SSA_NAME\n+\n    deprecated_flag:\n \n        TREE_DEPRECATED in\n@@ -699,6 +710,16 @@ struct GTY(()) tree_common {\n            SSA_NAME\n */\n \n+struct GTY(()) tree_typed {\n+  struct tree_base base;\n+  tree type;\n+};\n+\n+struct GTY(()) tree_common {\n+  struct tree_typed typed;\n+  tree chain;\n+};\n+\n #undef DEFTREESTRUCT\n #define DEFTREESTRUCT(ENUM, NAME) ENUM,\n enum tree_node_structure_enum {\n@@ -1226,10 +1247,10 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n \n /* In a decl (most significantly a FIELD_DECL), means an unsigned field.  */\n #define DECL_UNSIGNED(NODE) \\\n-  (DECL_COMMON_CHECK (NODE)->base.unsigned_flag)\n+  (DECL_COMMON_CHECK (NODE)->base.u.bits.unsigned_flag)\n \n /* In integral and pointer types, means an unsigned type.  */\n-#define TYPE_UNSIGNED(NODE) (TYPE_CHECK (NODE)->base.unsigned_flag)\n+#define TYPE_UNSIGNED(NODE) (TYPE_CHECK (NODE)->base.u.bits.unsigned_flag)\n \n /* True if overflow wraps around for the given integral type.  That\n    is, TYPE_MAX + 1 == TYPE_MIN.  */\n@@ -1277,7 +1298,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n    throw an exception.  In a CALL_EXPR, nonzero means the call cannot\n    throw.  We can't easily check the node type here as the C++\n    frontend also uses this flag (for AGGR_INIT_EXPR).  */\n-#define TREE_NOTHROW(NODE) ((NODE)->base.nothrow_flag)\n+#define TREE_NOTHROW(NODE) (TREE_NOT_CHECK (NODE, TREE_VEC)->base.nothrow_flag)\n \n /* In a CALL_EXPR, means that it's safe to use the target of the call\n    expansion as the return slot for a call that returns in memory.  */\n@@ -1347,16 +1368,23 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n   (IDENTIFIER_NODE_CHECK (NODE)->base.deprecated_flag)\n \n /* In fixed-point types, means a saturating type.  */\n-#define TYPE_SATURATING(NODE) ((NODE)->base.saturating_flag)\n+#define TYPE_SATURATING(NODE) (TYPE_CHECK (NODE)->base.u.bits.saturating_flag)\n \n /* These flags are available for each language front end to use internally.  */\n-#define TREE_LANG_FLAG_0(NODE) ((NODE)->base.lang_flag_0)\n-#define TREE_LANG_FLAG_1(NODE) ((NODE)->base.lang_flag_1)\n-#define TREE_LANG_FLAG_2(NODE) ((NODE)->base.lang_flag_2)\n-#define TREE_LANG_FLAG_3(NODE) ((NODE)->base.lang_flag_3)\n-#define TREE_LANG_FLAG_4(NODE) ((NODE)->base.lang_flag_4)\n-#define TREE_LANG_FLAG_5(NODE) ((NODE)->base.lang_flag_5)\n-#define TREE_LANG_FLAG_6(NODE) ((NODE)->base.lang_flag_6)\n+#define TREE_LANG_FLAG_0(NODE) \\\n+  (TREE_NOT_CHECK2(NODE, TREE_VEC, SSA_NAME)->base.u.bits.lang_flag_0)\n+#define TREE_LANG_FLAG_1(NODE) \\\n+  (TREE_NOT_CHECK2(NODE, TREE_VEC, SSA_NAME)->base.u.bits.lang_flag_1)\n+#define TREE_LANG_FLAG_2(NODE) \\\n+  (TREE_NOT_CHECK2(NODE, TREE_VEC, SSA_NAME)->base.u.bits.lang_flag_2)\n+#define TREE_LANG_FLAG_3(NODE) \\\n+  (TREE_NOT_CHECK2(NODE, TREE_VEC, SSA_NAME)->base.u.bits.lang_flag_3)\n+#define TREE_LANG_FLAG_4(NODE) \\\n+  (TREE_NOT_CHECK2(NODE, TREE_VEC, SSA_NAME)->base.u.bits.lang_flag_4)\n+#define TREE_LANG_FLAG_5(NODE) \\\n+  (TREE_NOT_CHECK2(NODE, TREE_VEC, SSA_NAME)->base.u.bits.lang_flag_5)\n+#define TREE_LANG_FLAG_6(NODE) \\\n+  (TREE_NOT_CHECK2(NODE, TREE_VEC, SSA_NAME)->base.u.bits.lang_flag_6)\n \f\n /* Define additional fields and accessors for nodes representing constants.  */\n \n@@ -1476,15 +1504,14 @@ struct GTY(()) tree_list {\n };\n \n /* In a TREE_VEC node.  */\n-#define TREE_VEC_LENGTH(NODE) (TREE_VEC_CHECK (NODE)->vec.length)\n+#define TREE_VEC_LENGTH(NODE) (TREE_VEC_CHECK (NODE)->base.u.length)\n #define TREE_VEC_END(NODE) \\\n-  ((void) TREE_VEC_CHECK (NODE), &((NODE)->vec.a[(NODE)->vec.length]))\n+  ((void) TREE_VEC_CHECK (NODE), &((NODE)->vec.a[(NODE)->vec.base.u.length]))\n \n #define TREE_VEC_ELT(NODE,I) TREE_VEC_ELT_CHECK (NODE, I)\n \n struct GTY(()) tree_vec {\n   struct tree_common common;\n-  int length;\n   tree GTY ((length (\"TREE_VEC_LENGTH ((tree)&%h)\"))) a[1];\n };\n \n@@ -1888,7 +1915,7 @@ struct GTY(()) tree_exp {\n \n /* Returns the SSA version number of this SSA name.  Note that in\n    tree SSA, version numbers are not per variable and may be recycled.  */\n-#define SSA_NAME_VERSION(NODE)\tSSA_NAME_CHECK (NODE)->ssa_name.version\n+#define SSA_NAME_VERSION(NODE)\tSSA_NAME_CHECK (NODE)->base.u.version\n \n /* Nonzero if this SSA name occurs in an abnormal PHI.  SSA_NAMES are\n    never output, so we can safely use the ASM_WRITTEN_FLAG for this\n@@ -1943,9 +1970,6 @@ struct GTY(()) tree_ssa_name {\n   /* Statement that defines this SSA name.  */\n   gimple def_stmt;\n \n-  /* SSA version number.  */\n-  unsigned int version;\n-\n   /* Pointer attributes used for alias analysis.  */\n   struct ptr_info_def *ptr_info;\n \n@@ -2008,7 +2032,7 @@ struct GTY(()) tree_omp_clause {\n #define BLOCK_ABSTRACT(NODE) (BLOCK_CHECK (NODE)->block.abstract_flag)\n \n /* True if BLOCK has the same ranges as its BLOCK_SUPERCONTEXT.  */\n-#define BLOCK_SAME_RANGE(NODE) (BLOCK_CHECK (NODE)->base.nameless_flag)\n+#define BLOCK_SAME_RANGE(NODE) (BLOCK_CHECK (NODE)->base.u.bits.nameless_flag)\n \n /* An index number for this block.  These values are not guaranteed to\n    be unique across functions -- whether or not they are depends on\n@@ -2148,7 +2172,7 @@ extern enum machine_mode vector_type_mode (const_tree);\n \n /* 1 if the alignment for this type was requested by \"aligned\" attribute,\n    0 if it is the default for this type.  */\n-#define TYPE_USER_ALIGN(NODE) (TYPE_CHECK (NODE)->base.user_align)\n+#define TYPE_USER_ALIGN(NODE) (TYPE_CHECK (NODE)->base.u.bits.user_align)\n \n /* The alignment for NODE, in bytes.  */\n #define TYPE_ALIGN_UNIT(NODE) (TYPE_ALIGN (NODE) / BITS_PER_UNIT)\n@@ -2179,10 +2203,10 @@ extern enum machine_mode vector_type_mode (const_tree);\n #define TYPE_RESTRICT(NODE) (TYPE_CHECK (NODE)->type_common.restrict_flag)\n \n /* If nonzero, type's name shouldn't be emitted into debug info.  */\n-#define TYPE_NAMELESS(NODE) (TYPE_CHECK (NODE)->base.nameless_flag)\n+#define TYPE_NAMELESS(NODE) (TYPE_CHECK (NODE)->base.u.bits.nameless_flag)\n \n /* The address space the type is in.  */\n-#define TYPE_ADDR_SPACE(NODE) (TYPE_CHECK (NODE)->base.address_space)\n+#define TYPE_ADDR_SPACE(NODE) (TYPE_CHECK (NODE)->base.u.bits.address_space)\n \n /* There is a TYPE_QUAL value for each type qualifier.  They can be\n    combined by bitwise-or to form the complete set of qualifiers for a\n@@ -2272,7 +2296,7 @@ enum cv_qualifier\n \n /* Indicated that objects of this type should be laid out in as\n    compact a way as possible.  */\n-#define TYPE_PACKED(NODE) (TYPE_CHECK (NODE)->base.packed_flag)\n+#define TYPE_PACKED(NODE) (TYPE_CHECK (NODE)->base.u.bits.packed_flag)\n \n /* Used by type_contains_placeholder_p to avoid recomputation.\n    Values are: 0 (unknown), 1 (false), 2 (true).  Never access\n@@ -2610,7 +2634,7 @@ struct function;\n   (FIELD_DECL_CHECK (NODE)->decl_minimal.context)\n \n /* If nonzero, decl's name shouldn't be emitted into debug info.  */\n-#define DECL_NAMELESS(NODE) (DECL_MINIMAL_CHECK (NODE)->base.nameless_flag)\n+#define DECL_NAMELESS(NODE) (DECL_MINIMAL_CHECK (NODE)->base.u.bits.nameless_flag)\n \n struct GTY(()) tree_decl_minimal {\n   struct tree_common common;\n@@ -2671,7 +2695,7 @@ struct GTY(()) tree_decl_minimal {\n /* Set if the alignment of this DECL has been set by the user, for\n    example with an 'aligned' attribute.  */\n #define DECL_USER_ALIGN(NODE) \\\n-  (DECL_COMMON_CHECK (NODE)->base.user_align)\n+  (DECL_COMMON_CHECK (NODE)->base.u.bits.user_align)\n /* Holds the machine mode corresponding to the declaration of a variable or\n    field.  Always equal to TYPE_MODE (TREE_TYPE (decl)) except for a\n    FIELD_DECL.  */\n@@ -2956,7 +2980,7 @@ struct GTY(()) tree_decl_with_rtl {\n #define DECL_FCONTEXT(NODE) (FIELD_DECL_CHECK (NODE)->field_decl.fcontext)\n \n /* In a FIELD_DECL, indicates this field should be bit-packed.  */\n-#define DECL_PACKED(NODE) (FIELD_DECL_CHECK (NODE)->base.packed_flag)\n+#define DECL_PACKED(NODE) (FIELD_DECL_CHECK (NODE)->base.u.bits.packed_flag)\n \n /* Nonzero in a FIELD_DECL means it is a bit field, and must be accessed\n    specially.  */\n@@ -3246,7 +3270,7 @@ extern void decl_fini_priority_insert (tree, priority_type);\n #define MAX_RESERVED_INIT_PRIORITY 100\n \n #define VAR_DECL_IS_VIRTUAL_OPERAND(NODE) \\\n-  (VAR_DECL_CHECK (NODE)->base.saturating_flag)\n+  (VAR_DECL_CHECK (NODE)->base.u.bits.saturating_flag)\n \n struct GTY(()) tree_var_decl {\n   struct tree_decl_with_vis common;\n@@ -3822,8 +3846,8 @@ tree_vec_elt_check (tree __t, int __i,\n {\n   if (TREE_CODE (__t) != TREE_VEC)\n     tree_check_failed (__t, __f, __l, __g, TREE_VEC, 0);\n-  if (__i < 0 || __i >= __t->vec.length)\n-    tree_vec_elt_check_failed (__i, __t->vec.length, __f, __l, __g);\n+  if (__i < 0 || __i >= __t->base.u.length)\n+    tree_vec_elt_check_failed (__i, __t->base.u.length, __f, __l, __g);\n   return &CONST_CAST_TREE (__t)->vec.a[__i];\n }\n \n@@ -4028,8 +4052,8 @@ tree_vec_elt_check (const_tree __t, int __i,\n {\n   if (TREE_CODE (__t) != TREE_VEC)\n     tree_check_failed (__t, __f, __l, __g, TREE_VEC, 0);\n-  if (__i < 0 || __i >= __t->vec.length)\n-    tree_vec_elt_check_failed (__i, __t->vec.length, __f, __l, __g);\n+  if (__i < 0 || __i >= __t->base.u.length)\n+    tree_vec_elt_check_failed (__i, __t->base.u.length, __f, __l, __g);\n   return CONST_CAST (const_tree *, &__t->vec.a[__i]);\n   //return &__t->vec.a[__i];\n }"}]}