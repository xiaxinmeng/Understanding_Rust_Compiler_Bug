{"sha": "691da334bca13d0056d6d6e6f919995c1f1f9e4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkxZGEzMzRiY2ExM2QwMDU2ZDZkNmU2ZjkxOTk5NWMxZjFmOWU0ZQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-28T21:11:39Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-28T21:11:39Z"}, "message": "re PR fortran/36319 (Segfault with wide characters in DATA)\n\n\tPR fortran/36319\n\n\t* intrinsic.c (gfc_convert_chartype): Don't mark conversion\n\tfunction as pure.\n\t* trans-array.c (gfc_trans_array_ctor_element): Divide element\n\tsize by the size of one character to obtain length.\n\t* iresolve.c (gfc_resolve_cshift): Call the _char4 variant when\n\tappropriate.\n\t(gfc_resolve_eoshift): Likewise.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_ctime): Minor beautification.\n\t(gfc_conv_intrinsic_fdate): Minor beautification.\n\t(gfc_conv_intrinsic_ttynam): Minor beautification.\n\t(gfc_conv_intrinsic_minmax_char): Allow all character kinds.\n\t(size_of_string_in_bytes): New function.\n\t(gfc_conv_intrinsic_size): Call size_of_string_in_bytes for\n\tcharacter expressions.\n\t(gfc_conv_intrinsic_sizeof): Likewise.\n\t(gfc_conv_intrinsic_array_transfer): Likewise.\n\t(gfc_conv_intrinsic_trim): Allow all character kinds. Minor\n\tbeautification.\n\t(gfc_conv_intrinsic_repeat): Fix comment typo.\n\t* simplify.c (gfc_convert_char_constant): Take care of conversion\n\tof array constructors.\n\n\t* intrinsics/string_intrinsics_inc.c (string_index): Return\n\tcorrect value for zero-length substring.\n\t* intrinsics/cshift0.c: Add _char4 variant.\n\t* intrinsics/eoshift0.c (eoshift0): Allow filler to be a pattern\n\twider than a single byte. Add _char4 variant and use above\n\tfunctionality.\n\t* intrinsics/eoshift2.c (eoshift2): Likewise.\n\t* m4/eoshift1.m4: Likewise.\n\t* m4/eoshift3.m4: Likewise.\n\t* m4/cshift1.m4: Add _char4 variants.\n\t* gfortran.map (GFORTRAN_1.1): Add _gfortran_cshift0_1_char4,\n\t_gfortran_cshift0_2_char4, _gfortran_cshift0_4_char4,\n\t_gfortran_cshift0_8_char4, _gfortran_cshift1_16_char4,\n\t_gfortran_cshift1_4_char4, _gfortran_cshift1_8_char4,\n\t_gfortran_eoshift0_1_char4, _gfortran_eoshift0_2_char4,\n\t_gfortran_eoshift0_4_char4, _gfortran_eoshift0_8_char4,\n\t_gfortran_eoshift1_16_char4, _gfortran_eoshift1_4_char4,\n\t_gfortran_eoshift1_8_char4, _gfortran_eoshift2_1_char4,\n\t_gfortran_eoshift2_2_char4, _gfortran_eoshift2_4_char4,\n\t_gfortran_eoshift2_8_char4, _gfortran_eoshift3_16_char4,\n\t_gfortran_eoshift3_4_char4 and _gfortran_eoshift3_8_char4.\n\t* generated/eoshift3_4.c: Regenerate.\n\t* generated/eoshift1_8.c: Regenerate.\n\t* generated/eoshift1_16.c: Regenerate.\n\t* generated/cshift1_4.c: Regenerate.\n\t* generated/eoshift1_4.c: Regenerate.\n\t* generated/eoshift3_8.c: Regenerate.\n\t* generated/eoshift3_16.c: Regenerate.\n\t* generated/cshift1_8.c: Regenerate.\n\t* generated/cshift1_16.c: Regenerate.\n\n\t* gfortran.dg/widechar_5.f90: New file.\n\t* gfortran.dg/widechar_6.f90: New file.\n\t* gfortran.dg/widechar_7.f90: New file.\n\t* gfortran.dg/widechar_intrinsics_5.f90: Uncomment the lines\n\ttesting the SPREAD intrinsic.\n\t* gfortran.dg/widechar_intrinsics_6.f90: New file.\n\t* gfortran.dg/widechar_intrinsics_7.f90: New file.\n\t* gfortran.dg/widechar_intrinsics_8.f90: New file.\n\t* gfortran.dg/widechar_intrinsics_9.f90: New file.\n\t* gfortran.dg/widechar_intrinsics_10.f90: New file.\n\nFrom-SVN: r136129", "tree": {"sha": "a956a38d25628c3640e2911e48de624e53210afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a956a38d25628c3640e2911e48de624e53210afa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/691da334bca13d0056d6d6e6f919995c1f1f9e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691da334bca13d0056d6d6e6f919995c1f1f9e4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/691da334bca13d0056d6d6e6f919995c1f1f9e4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691da334bca13d0056d6d6e6f919995c1f1f9e4e/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b608a1bc71edb6b778407dd9bfdf0cbd6bcb4c1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b608a1bc71edb6b778407dd9bfdf0cbd6bcb4c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b608a1bc71edb6b778407dd9bfdf0cbd6bcb4c1b"}], "stats": {"total": 1451, "additions": 1339, "deletions": 112}, "files": [{"sha": "1995f6ac16145b1c6938aeaeca7d22942429d307", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -1,3 +1,28 @@\n+2008-05-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/36319\n+\t* intrinsic.c (gfc_convert_chartype): Don't mark conversion\n+\tfunction as pure.\n+\t* trans-array.c (gfc_trans_array_ctor_element): Divide element\n+\tsize by the size of one character to obtain length.\n+\t* iresolve.c (gfc_resolve_cshift): Call the _char4 variant when\n+\tappropriate.\n+\t(gfc_resolve_eoshift): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_ctime): Minor beautification.\n+\t(gfc_conv_intrinsic_fdate): Minor beautification.\n+\t(gfc_conv_intrinsic_ttynam): Minor beautification.\n+\t(gfc_conv_intrinsic_minmax_char): Allow all character kinds.\n+\t(size_of_string_in_bytes): New function.\n+\t(gfc_conv_intrinsic_size): Call size_of_string_in_bytes for\n+\tcharacter expressions.\n+\t(gfc_conv_intrinsic_sizeof): Likewise.\n+\t(gfc_conv_intrinsic_array_transfer): Likewise.\n+\t(gfc_conv_intrinsic_trim): Allow all character kinds. Minor\n+\tbeautification.\n+\t(gfc_conv_intrinsic_repeat): Fix comment typo.\n+\t* simplify.c (gfc_convert_char_constant): Take care of conversion\n+\tof array constructors.\n+\n 2008-05-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/36316"}, {"sha": "62ee442a19cc92224040e75e58a50e446e81a483", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -3807,7 +3807,6 @@ gfc_convert_chartype (gfc_expr *expr, gfc_typespec *ts)\n   new->symtree->n.sym->attr.flavor = FL_PROCEDURE;\n   new->symtree->n.sym->attr.function = 1;\n   new->symtree->n.sym->attr.elemental = 1;\n-  new->symtree->n.sym->attr.pure = 1;\n   new->symtree->n.sym->attr.referenced = 1;\n   gfc_intrinsic_symbol(new->symtree->n.sym);\n   gfc_commit_symbol (new->symtree->n.sym);"}, {"sha": "acbf5becff0c62c954beb288f7055c0ac4ce57dd", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -627,9 +627,19 @@ gfc_resolve_cshift (gfc_expr *f, gfc_expr *array, gfc_expr *shift,\n         }\n     }\n \n-  f->value.function.name\n-    = gfc_get_string (PREFIX (\"cshift%d_%d%s\"), n, shift->ts.kind,\n-\t\t      array->ts.type == BT_CHARACTER ? \"_char\" : \"\");\n+  if (array->ts.type == BT_CHARACTER)\n+    {\n+      if (array->ts.kind == gfc_default_character_kind)\n+\tf->value.function.name\n+\t  = gfc_get_string (PREFIX (\"cshift%d_%d_char\"), n, shift->ts.kind);\n+      else\n+\tf->value.function.name\n+\t  = gfc_get_string (PREFIX (\"cshift%d_%d_char%d\"), n, shift->ts.kind,\n+\t\t\t    array->ts.kind);\n+    }\n+  else\n+    f->value.function.name\n+\t= gfc_get_string (PREFIX (\"cshift%d_%d\"), n, shift->ts.kind);\n }\n \n \n@@ -768,9 +778,19 @@ gfc_resolve_eoshift (gfc_expr *f, gfc_expr *array, gfc_expr *shift,\n         }\n     }\n \n-  f->value.function.name\n-    = gfc_get_string (PREFIX (\"eoshift%d_%d%s\"), n, shift->ts.kind,\n-\t\t      array->ts.type == BT_CHARACTER ? \"_char\" : \"\");\n+  if (array->ts.type == BT_CHARACTER)\n+    {\n+      if (array->ts.kind == gfc_default_character_kind)\n+\tf->value.function.name\n+\t  = gfc_get_string (PREFIX (\"eoshift%d_%d_char\"), n, shift->ts.kind);\n+      else\n+\tf->value.function.name\n+\t  = gfc_get_string (PREFIX (\"eoshift%d_%d_char%d\"), n, shift->ts.kind,\n+\t\t\t    array->ts.kind);\n+    }\n+  else\n+    f->value.function.name\n+\t= gfc_get_string (PREFIX (\"eoshift%d_%d\"), n, shift->ts.kind);\n }\n \n "}, {"sha": "59b425fbd9248d848b6d296964d331c97d3754d9", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 69, "deletions": 20, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -4811,26 +4811,75 @@ gfc_convert_char_constant (gfc_expr *e, bt type ATTRIBUTE_UNUSED, int kind)\n   if (!gfc_is_constant_expr (e))\n     return NULL;\n \n-  result = gfc_constant_result (BT_CHARACTER, kind, &e->where);\n-  if (result == NULL)\n-    return &gfc_bad_expr;\n-\n-  result->value.character.length = e->value.character.length;\n-  result->value.character.string\n-    = gfc_get_wide_string (e->value.character.length + 1);\n-  memcpy (result->value.character.string, e->value.character.string,\n-\t  (e->value.character.length + 1) * sizeof (gfc_char_t));\n-\n-  /* Check we only have values representable in the destination kind.  */\n-  for (i = 0; i < result->value.character.length; i++)\n-    if (!gfc_check_character_range (result->value.character.string[i], kind))\n-      {\n-\tgfc_error (\"Character '%s' in string at %L cannot be converted into \"\n-\t\t   \"character kind %d\",\n-\t\t   gfc_print_wide_char (result->value.character.string[i]),\n-\t\t   &e->where, kind);\n+  if (e->expr_type == EXPR_CONSTANT)\n+    {\n+      /* Simple case of a scalar.  */\n+      result = gfc_constant_result (BT_CHARACTER, kind, &e->where);\n+      if (result == NULL)\n \treturn &gfc_bad_expr;\n-      }\n \n-  return result;\n+      result->value.character.length = e->value.character.length;\n+      result->value.character.string\n+\t= gfc_get_wide_string (e->value.character.length + 1);\n+      memcpy (result->value.character.string, e->value.character.string,\n+\t      (e->value.character.length + 1) * sizeof (gfc_char_t));\n+\n+      /* Check we only have values representable in the destination kind.  */\n+      for (i = 0; i < result->value.character.length; i++)\n+\tif (!gfc_check_character_range (result->value.character.string[i],\n+\t\t\t\t\tkind))\n+\t  {\n+\t    gfc_error (\"Character '%s' in string at %L cannot be converted \"\n+\t\t       \"into character kind %d\",\n+\t\t       gfc_print_wide_char (result->value.character.string[i]),\n+\t\t       &e->where, kind);\n+\t    return &gfc_bad_expr;\n+\t  }\n+\n+      return result;\n+    }\n+  else if (e->expr_type == EXPR_ARRAY)\n+    {\n+      /* For an array constructor, we convert each constructor element.  */\n+      gfc_constructor *head = NULL, *tail = NULL, *c;\n+\n+      for (c = e->value.constructor; c; c = c->next)\n+\t{\n+\t  if (head == NULL)\n+\t    head = tail = gfc_get_constructor ();\n+\t  else\n+\t    {\n+\t      tail->next = gfc_get_constructor ();\n+\t      tail = tail->next;\n+\t    }\n+\n+\t  tail->where = c->where;\n+\t  tail->expr = gfc_convert_char_constant (c->expr, type, kind);\n+\t  if (tail->expr == &gfc_bad_expr)\n+\t    {\n+\t      tail->expr = NULL;\n+\t      return &gfc_bad_expr;\n+\t    }\n+\n+\t  if (tail->expr == NULL)\n+\t    {\n+\t      gfc_free_constructor (head);\n+\t      return NULL;\n+\t    }\n+\t}\n+\n+      result = gfc_get_expr ();\n+      result->ts.type = type;\n+      result->ts.kind = kind;\n+      result->expr_type = EXPR_ARRAY;\n+      result->value.constructor = head;\n+      result->shape = gfc_copy_shape (e->shape, e->rank);\n+      result->where = e->where;\n+      result->rank = e->rank;\n+      result->ts.cl = e->ts.cl;\n+\n+      return result;\n+    }\n+  else\n+    return NULL;\n }"}, {"sha": "7df192ca88aaf87209166449073e9b0f5d810df9", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -969,19 +969,24 @@ gfc_trans_array_ctor_element (stmtblock_t * pblock, tree desc,\n \t\t\t      tree offset, gfc_se * se, gfc_expr * expr)\n {\n   tree tmp;\n-  tree esize;\n \n   gfc_conv_expr (se, expr);\n \n   /* Store the value.  */\n   tmp = build_fold_indirect_ref (gfc_conv_descriptor_data_get (desc));\n   tmp = gfc_build_array_ref (tmp, offset, NULL);\n \n-  esize = size_in_bytes (gfc_get_element_type (TREE_TYPE (desc)));\n-  esize = fold_convert (gfc_charlen_type_node, esize);\n-\n   if (expr->ts.type == BT_CHARACTER)\n     {\n+      int i = gfc_validate_kind (BT_CHARACTER, expr->ts.kind, false);\n+      tree esize;\n+\n+      esize = size_in_bytes (gfc_get_element_type (TREE_TYPE (desc)));\n+      esize = fold_convert (gfc_charlen_type_node, esize);\n+      esize = fold_build2 (TRUNC_DIV_EXPR, gfc_charlen_type_node, esize,\n+\t\t\t   build_int_cst (gfc_charlen_type_node,\n+\t\t\t\t\t  gfc_character_kinds[i].bit_size / 8));\n+\n       gfc_conv_string_parameter (se);\n       if (POINTER_TYPE_P (TREE_TYPE (tmp)))\n \t{"}, {"sha": "73e14a3f1faa5aeba70bdb46c5696df64a7ae349", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -1327,19 +1327,16 @@ gfc_conv_intrinsic_ctime (gfc_se * se, gfc_expr * expr)\n   tree var;\n   tree len;\n   tree tmp;\n-  tree type;\n   tree cond;\n-  tree gfc_int8_type_node = gfc_get_int_type (8);\n   tree fndecl;\n   tree *args;\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n   args = alloca (sizeof (tree) * num_args);\n \n-  type = build_pointer_type (gfc_character1_type_node);\n-  var = gfc_create_var (type, \"pstr\");\n-  len = gfc_create_var (gfc_int8_type_node, \"len\");\n+  var = gfc_create_var (pchar_type_node, \"pstr\");\n+  len = gfc_create_var (gfc_get_int_type (8), \"len\");\n \n   gfc_conv_intrinsic_function_args (se, expr, &args[2], num_args - 2);\n   args[0] = build_fold_addr_expr (var);\n@@ -1368,19 +1365,16 @@ gfc_conv_intrinsic_fdate (gfc_se * se, gfc_expr * expr)\n   tree var;\n   tree len;\n   tree tmp;\n-  tree type;\n   tree cond;\n-  tree gfc_int4_type_node = gfc_get_int_type (4);\n   tree fndecl;\n   tree *args;\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n   args = alloca (sizeof (tree) * num_args);\n \n-  type = build_pointer_type (gfc_character1_type_node);\n-  var = gfc_create_var (type, \"pstr\");\n-  len = gfc_create_var (gfc_int4_type_node, \"len\");\n+  var = gfc_create_var (pchar_type_node, \"pstr\");\n+  len = gfc_create_var (gfc_get_int_type (4), \"len\");\n \n   gfc_conv_intrinsic_function_args (se, expr, &args[2], num_args - 2);\n   args[0] = build_fold_addr_expr (var);\n@@ -1411,19 +1405,16 @@ gfc_conv_intrinsic_ttynam (gfc_se * se, gfc_expr * expr)\n   tree var;\n   tree len;\n   tree tmp;\n-  tree type;\n   tree cond;\n   tree fndecl;\n-  tree gfc_int4_type_node = gfc_get_int_type (4);\n   tree *args;\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n   args = alloca (sizeof (tree) * num_args);\n \n-  type = build_pointer_type (gfc_character1_type_node);\n-  var = gfc_create_var (type, \"pstr\");\n-  len = gfc_create_var (gfc_int4_type_node, \"len\");\n+  var = gfc_create_var (pchar_type_node, \"pstr\");\n+  len = gfc_create_var (gfc_get_int_type (4), \"len\");\n \n   gfc_conv_intrinsic_function_args (se, expr, &args[2], num_args - 2);\n   args[0] = build_fold_addr_expr (var);\n@@ -1551,7 +1542,7 @@ gfc_conv_intrinsic_minmax_char (gfc_se * se, gfc_expr * expr, int op)\n   /* Create the result variables.  */\n   len = gfc_create_var (gfc_charlen_type_node, \"len\");\n   args[0] = build_fold_addr_expr (len);\n-  var = gfc_create_var (build_pointer_type (gfc_character1_type_node), \"pstr\");\n+  var = gfc_create_var (gfc_get_pchar_type (expr->ts.kind), \"pstr\");\n   args[1] = gfc_build_addr_expr (ppvoid_type_node, var);\n   args[2] = build_int_cst (NULL_TREE, op);\n   args[3] = build_int_cst (NULL_TREE, nargs / 2);\n@@ -3237,6 +3228,24 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n }\n \n \n+/* Helper function to compute the size of a character variable,\n+   excluding the terminating null characters.  The result has\n+   gfc_array_index_type type.  */\n+\n+static tree\n+size_of_string_in_bytes (int kind, tree string_length)\n+{\n+  tree bytesize;\n+  int i = gfc_validate_kind (BT_CHARACTER, kind, false);\n+ \n+  bytesize = build_int_cst (gfc_array_index_type,\n+\t\t\t    gfc_character_kinds[i].bit_size / 8);\n+\n+  return fold_build2 (MULT_EXPR, gfc_array_index_type, bytesize,\n+\t\t      fold_convert (gfc_array_index_type, string_length));\n+}\n+\n+\n static void\n gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n {\n@@ -3249,7 +3258,6 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n   tree tmp;\n   tree lower;\n   tree upper;\n-  /*tree stride;*/\n   int n;\n \n   arg = expr->value.function.actual->expr;\n@@ -3268,8 +3276,8 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n \n       /* Obtain the source word length.  */\n       if (arg->ts.type == BT_CHARACTER)\n-\tsource_bytes = fold_convert (gfc_array_index_type,\n-\t\t\t\t     argse.string_length);\n+\tsource_bytes = size_of_string_in_bytes (arg->ts.kind,\n+\t\t\t\t\t\targse.string_length);\n       else\n \tsource_bytes = fold_convert (gfc_array_index_type,\n \t\t\t\t     size_in_bytes (type)); \n@@ -3283,7 +3291,7 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n \n       /* Obtain the argument's word length.  */\n       if (arg->ts.type == BT_CHARACTER)\n-\ttmp = fold_convert (gfc_array_index_type, argse.string_length);\n+\ttmp = size_of_string_in_bytes (arg->ts.kind, argse.string_length);\n       else\n \ttmp = fold_convert (gfc_array_index_type,\n \t\t\t    size_in_bytes (type)); \n@@ -3404,7 +3412,8 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n \n       /* Obtain the source word length.  */\n       if (arg->expr->ts.type == BT_CHARACTER)\n-\ttmp = fold_convert (gfc_array_index_type, argse.string_length);\n+\ttmp = size_of_string_in_bytes (arg->expr->ts.kind,\n+\t\t\t\t       argse.string_length);\n       else\n \ttmp = fold_convert (gfc_array_index_type,\n \t\t\t    size_in_bytes (source_type)); \n@@ -3443,7 +3452,8 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n \n       /* Obtain the source word length.  */\n       if (arg->expr->ts.type == BT_CHARACTER)\n-\ttmp = fold_convert (gfc_array_index_type, argse.string_length);\n+\ttmp = size_of_string_in_bytes (arg->expr->ts.kind,\n+\t\t\t\t       argse.string_length);\n       else\n \ttmp = fold_convert (gfc_array_index_type,\n \t\t\t    size_in_bytes (source_type)); \n@@ -3495,7 +3505,7 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n \n   if (arg->expr->ts.type == BT_CHARACTER)\n     {\n-      tmp = fold_convert (gfc_array_index_type, argse.string_length);\n+      tmp = size_of_string_in_bytes (arg->expr->ts.kind, argse.string_length);\n       mold_type = gfc_get_character_type_len (arg->expr->ts.kind, tmp);\n     }\n   else\n@@ -3869,12 +3879,10 @@ gfc_conv_intrinsic_sr_kind (gfc_se *se, gfc_expr *expr)\n static void\n gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n {\n-  tree gfc_int4_type_node = gfc_get_int_type (4);\n   tree var;\n   tree len;\n   tree addr;\n   tree tmp;\n-  tree type;\n   tree cond;\n   tree fndecl;\n   tree function;\n@@ -3884,10 +3892,9 @@ gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n   args = alloca (sizeof (tree) * num_args);\n \n-  type = build_pointer_type (gfc_character1_type_node);\n-  var = gfc_create_var (type, \"pstr\");\n+  var = gfc_create_var (gfc_get_pchar_type (expr->ts.kind), \"pstr\");\n   addr = gfc_build_addr_expr (ppvoid_type_node, var);\n-  len = gfc_create_var (gfc_int4_type_node, \"len\");\n+  len = gfc_create_var (gfc_get_int_type (4), \"len\");\n \n   gfc_conv_intrinsic_function_args (se, expr, &args[2], num_args - 2);\n   args[0] = build_fold_addr_expr (len);\n@@ -3928,7 +3935,7 @@ gfc_conv_intrinsic_repeat (gfc_se * se, gfc_expr * expr)\n   stmtblock_t block, body;\n   int i;\n \n-  /* We store in charsize the size of an character.  */\n+  /* We store in charsize the size of a character.  */\n   i = gfc_validate_kind (BT_CHARACTER, expr->ts.kind, false);\n   size = build_int_cst (size_type_node, gfc_character_kinds[i].bit_size / 8);\n "}, {"sha": "1a33d2e1467908048ef3514b95d08936f5f9080e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -1,3 +1,17 @@\n+2008-05-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/36319\n+\t* gfortran.dg/widechar_5.f90: New file.\n+\t* gfortran.dg/widechar_6.f90: New file.\n+\t* gfortran.dg/widechar_7.f90: New file.\n+\t* gfortran.dg/widechar_intrinsics_5.f90: Uncomment the lines\n+\ttesting the SPREAD intrinsic.\n+\t* gfortran.dg/widechar_intrinsics_6.f90: New file.\n+\t* gfortran.dg/widechar_intrinsics_7.f90: New file.\n+\t* gfortran.dg/widechar_intrinsics_8.f90: New file.\n+\t* gfortran.dg/widechar_intrinsics_9.f90: New file.\n+\t* gfortran.dg/widechar_intrinsics_10.f90: New file.\n+\n 2008-05-28  Seongbae Park <seongbae.park@gmail.com>\n \n \t* gcc.dg/tree-prof/ic-misattribution-1.c: New test."}, {"sha": "ed2f32fbd09ba4d2e10ac5e74d1ac27fc2c54184", "filename": "gcc/testsuite/gfortran.dg/widechar_5.f90", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_5.f90?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -0,0 +1,59 @@\n+! { dg-do run }\n+! { dg-options \"-fbackslash\" }\n+\n+module kinds\n+  implicit none\n+  integer, parameter :: one = 1, four = 4\n+end module kinds\n+\n+module inner\n+  use kinds\n+  implicit none\n+  character(kind=one,len=*), parameter :: inner1 = \"abcdefg \\xEF kl\"\n+  character(kind=four,len=*), parameter :: &\n+        inner4 = 4_\"\\u9317x \\U001298cef   dea\\u10De\"\n+end module inner\n+\n+module middle\n+  use inner\n+  implicit none\n+  character(kind=one,len=len(inner1)), dimension(2,2), parameter :: middle1 &\n+    = reshape ([ character(kind=one,len=len(inner1)) :: inner1, \"\"], &\n+               [ 2, 2 ], &\n+               [ character(kind=one,len=len(inner1)) :: \"foo\", \"ba \" ])\n+  character(kind=four,len=len(inner4)), dimension(2,2), parameter :: middle4 &\n+    = reshape ([ character(kind=four,len=len(inner4)) :: inner4, 4_\"\"], &\n+               [ 2, 2 ], &\n+               [ character(kind=four,len=len(inner4)) :: 4_\"foo\", 4_\"ba \" ])\n+end module middle\n+\n+module outer\n+  use middle\n+  implicit none\n+  character(kind=one,len=*), parameter :: my1(2) = middle1(1,:)\n+  character(kind=four,len=*), parameter :: my4(2) = middle4(1,:)\n+end module outer\n+\n+program test_modules\n+  use outer, outer1 => my1, outer4 => my4\n+  implicit none\n+\n+  if (len (inner1) /= len(inner4)) call abort\n+  if (len (inner1) /= len_trim(inner1)) call abort\n+  if (len (inner4) /= len_trim(inner4)) call abort\n+\n+  if (len(middle1) /= len(inner1)) call abort\n+  if (len(outer1) /= len(inner1)) call abort\n+  if (len(middle4) /= len(inner4)) call abort\n+  if (len(outer4) /= len(inner4)) call abort\n+\n+  if (any (len_trim (middle1) /= reshape([len(middle1), 0, 3, 2], [2,2]))) &\n+    call abort\n+  if (any (len_trim (middle4) /= reshape([len(middle4), 0, 3, 2], [2,2]))) &\n+    call abort\n+  if (any (len_trim (outer1) /= [len(outer1), 3])) call abort\n+  if (any (len_trim (outer4) /= [len(outer4), 3])) call abort\n+\n+end program test_modules\n+\n+! { dg-final { cleanup-modules \"kinds inner middle outer\" } }"}, {"sha": "9151adba418f08de7679e8497538e956a314b7ba", "filename": "gcc/testsuite/gfortran.dg/widechar_6.f90", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_6.f90?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -0,0 +1,64 @@\n+! { dg-do run }\n+\n+module mod\n+\n+  interface cut\n+    module procedure cut1\n+    module procedure cut4\n+  end interface cut\n+\n+contains\n+\n+  function cut1 (s)\n+    character(kind=1,len=*), intent(in) :: s\n+    character(kind=1,len=max(0,len(s)-3)) :: cut1\n+\n+    cut1 = s(4:)\n+  end function cut1\n+\n+  function cut4 (s)\n+    character(kind=4,len=*), intent(in) :: s\n+    character(kind=4,len=max(0,len(s)-3)) :: cut4\n+\n+    cut4 = s(4:)\n+  end function cut4\n+\n+end module mod\n+\n+program test\n+  use mod\n+\n+  if (len (cut1(\"\")) /= 0 .or. cut1(\"\") /= \"\") call abort\n+  if (len (cut1(\"1\")) /= 0 .or. cut1(\"\") /= \"\") call abort\n+  if (len (cut1(\"12\")) /= 0 .or. cut1(\"\") /= \"\") call abort\n+  if (len (cut1(\"123\")) /= 0 .or. cut1(\"\") /= \"\") call abort\n+  if (len (cut1(\"1234\")) /= 1 .or. cut1(\"4\") /= \"\") call abort\n+  if (len (cut1(\"12345\")) /= 2 .or. cut1(\"45\") /= \"\") call abort\n+\n+  if (len (cut4(4_\"\")) /= 0 .or. cut4(4_\"\") /= 4_\"\") call abort\n+  if (len (cut4(4_\"1\")) /= 0 .or. cut4(4_\"\") /= 4_\"\") call abort\n+  if (len (cut4(4_\"12\")) /= 0 .or. cut4(4_\"\") /= 4_\"\") call abort\n+  if (len (cut4(4_\"123\")) /= 0 .or. cut4(4_\"\") /= 4_\"\") call abort\n+  if (len (cut4(4_\"1234\")) /= 1 .or. cut4(4_\"4\") /= 4_\"\") call abort\n+  if (len (cut4(4_\"12345\")) /= 2 .or. cut4(4_\"45\") /= 4_\"\") call abort\n+\n+  if (kind (cut(\"\")) /= kind(\"\")) call abort\n+  if (kind (cut(4_\"\")) /= kind(4_\"\")) call abort\n+\n+  if (len (cut(\"\")) /= 0 .or. cut(\"\") /= \"\") call abort\n+  if (len (cut(\"1\")) /= 0 .or. cut(\"\") /= \"\") call abort\n+  if (len (cut(\"12\")) /= 0 .or. cut(\"\") /= \"\") call abort\n+  if (len (cut(\"123\")) /= 0 .or. cut(\"\") /= \"\") call abort\n+  if (len (cut(\"1234\")) /= 1 .or. cut(\"4\") /= \"\") call abort\n+  if (len (cut(\"12345\")) /= 2 .or. cut(\"45\") /= \"\") call abort\n+\n+  if (len (cut(4_\"\")) /= 0 .or. cut(4_\"\") /= 4_\"\") call abort\n+  if (len (cut(4_\"1\")) /= 0 .or. cut(4_\"\") /= 4_\"\") call abort\n+  if (len (cut(4_\"12\")) /= 0 .or. cut(4_\"\") /= 4_\"\") call abort\n+  if (len (cut(4_\"123\")) /= 0 .or. cut(4_\"\") /= 4_\"\") call abort\n+  if (len (cut(4_\"1234\")) /= 1 .or. cut(4_\"4\") /= 4_\"\") call abort\n+  if (len (cut(4_\"12345\")) /= 2 .or. cut(4_\"45\") /= 4_\"\") call abort\n+\n+end program test\n+\n+! { dg-final { cleanup-modules \"mod\" } }"}, {"sha": "4368321170bc32cf84495a70e80ab67fed617d96", "filename": "gcc/testsuite/gfortran.dg/widechar_7.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_7.f90?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+\n+program test\n+\n+  character(kind=1,len=10) :: s1 = 4_\"foobargee\", t1 = 4_\"\"\n+  character(kind=4,len=10) :: s4 = \"foobargee\", t4 = \"\"\n+\n+  t1(5:5) = s1(6:6)\n+  t4(5:5) = s4(6:6)\n+  t4(5:5) = s1(6:6)\n+  t1(5:5) = s4(6:6)\n+\n+  call sub (t1, t4)\n+\n+end program test\n+\n+! { dg-final { scan-tree-dump-times \"memmove\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "c961d93cfd6459a4bfbbc521b60b3e122c9051bf", "filename": "gcc/testsuite/gfortran.dg/widechar_intrinsics_10.f90", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_10.f90?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -0,0 +1,89 @@\n+! { dg-do run }\n+! { dg-options \"-fbackslash\" }\n+\n+  implicit none\n+  character(kind=1,len=3) :: s1(3)\n+  character(kind=4,len=3) :: s4(3)\n+\n+  s1 = [ \"abc\", \"def\", \"ghi\" ]\n+  s4 = s1\n+  s4 = [ \"abc\", \"def\", \"ghi\" ]\n+\n+  if (any (cshift (s1, 0) /= s1)) call abort\n+  if (any (cshift (s4, 0) /= s4)) call abort\n+  if (any (cshift (s1, 3) /= s1)) call abort\n+  if (any (cshift (s4, 3) /= s4)) call abort\n+  if (any (cshift (s1, 6) /= s1)) call abort\n+  if (any (cshift (s4, 6) /= s4)) call abort\n+  if (any (cshift (s1, -3) /= s1)) call abort\n+  if (any (cshift (s4, -3) /= s4)) call abort\n+  if (any (cshift (s1, -6) /= s1)) call abort\n+  if (any (cshift (s4, -6) /= s4)) call abort\n+\n+  if (any (cshift (s1, 1) /= [ s1(2:3), s1(1) ])) call abort\n+  if (any (cshift (s1, -1) /= [ s1(3), s1(1:2) ])) call abort\n+  if (any (cshift (s1, 4) /= [ s1(2:3), s1(1) ])) call abort\n+  if (any (cshift (s1, -4) /= [ s1(3), s1(1:2) ])) call abort\n+\n+  if (any (cshift (s4, 1) /= [ s4(2:3), s4(1) ])) call abort\n+  if (any (cshift (s4, -1) /= [ s4(3), s4(1:2) ])) call abort\n+  if (any (cshift (s4, 4) /= [ s4(2:3), s4(1) ])) call abort\n+  if (any (cshift (s4, -4) /= [ s4(3), s4(1:2) ])) call abort\n+\n+  if (any (cshift (s1, 2) /= [ s1(3), s1(1:2) ])) call abort\n+  if (any (cshift (s1, -2) /= [ s1(2:3), s1(1) ])) call abort\n+  if (any (cshift (s1, 5) /= [ s1(3), s1(1:2) ])) call abort\n+  if (any (cshift (s1, -5) /= [ s1(2:3), s1(1) ])) call abort\n+\n+  if (any (cshift (s4, 2) /= [ s4(3), s4(1:2) ])) call abort\n+  if (any (cshift (s4, -2) /= [ s4(2:3), s4(1) ])) call abort\n+  if (any (cshift (s4, 5) /= [ s4(3), s4(1:2) ])) call abort\n+  if (any (cshift (s4, -5) /= [ s4(2:3), s4(1) ])) call abort\n+\n+\n+  if (any (eoshift (s1, 0) /= s1)) call abort\n+  if (any (eoshift (s4, 0) /= s4)) call abort\n+  if (any (eoshift (s1, 3) /= \"\")) call abort\n+  if (any (eoshift (s4, 3) /= 4_\"\")) call abort\n+  if (any (eoshift (s1, 3, \"   \") /= \"\")) call abort\n+  if (any (eoshift (s4, 3, 4_\"   \") /= 4_\"\")) call abort\n+  if (any (eoshift (s1, 3, \" x \") /= \" x\")) call abort\n+  if (any (eoshift (s4, 3, 4_\" x \") /= 4_\" x\")) call abort\n+  if (any (eoshift (s1, -3) /= \"\")) call abort\n+  if (any (eoshift (s4, -3) /= 4_\"\")) call abort\n+  if (any (eoshift (s1, -3, \"   \") /= \"\")) call abort\n+  if (any (eoshift (s4, -3, 4_\"   \") /= 4_\"\")) call abort\n+  if (any (eoshift (s1, -3, \" x \") /= \" x\")) call abort\n+  if (any (eoshift (s4, -3, 4_\" x \") /= 4_\" x\")) call abort\n+  if (any (eoshift (s1, 4) /= \"\")) call abort\n+  if (any (eoshift (s4, 4) /= 4_\"\")) call abort\n+  if (any (eoshift (s1, 4, \"   \") /= \"\")) call abort\n+  if (any (eoshift (s4, 4, 4_\"   \") /= 4_\"\")) call abort\n+  if (any (eoshift (s1, 4, \" x \") /= \" x\")) call abort\n+  if (any (eoshift (s4, 4, 4_\" x \") /= 4_\" x\")) call abort\n+  if (any (eoshift (s1, -4) /= \"\")) call abort\n+  if (any (eoshift (s4, -4) /= 4_\"\")) call abort\n+  if (any (eoshift (s1, -4, \"   \") /= \"\")) call abort\n+  if (any (eoshift (s4, -4, 4_\"   \") /= 4_\"\")) call abort\n+  if (any (eoshift (s1, -4, \" x \") /= \" x\")) call abort\n+  if (any (eoshift (s4, -4, 4_\" x \") /= 4_\" x\")) call abort\n+\n+  if (any (eoshift (s1, 1) /= [ s1(2:3), \"   \" ])) call abort\n+  if (any (eoshift (s1, -1) /= [ \"   \", s1(1:2) ])) call abort\n+  if (any (eoshift (s1, 1, \" x \") /= [ s1(2:3), \" x \" ])) call abort\n+  if (any (eoshift (s1, -1, \" x \") /= [ \" x \", s1(1:2) ])) call abort\n+  if (any (eoshift (s4, 1) /= [ s4(2:3), 4_\"   \" ])) call abort\n+  if (any (eoshift (s4, -1) /= [ 4_\"   \", s4(1:2) ])) call abort\n+  if (any (eoshift (s4, 1, 4_\" x \") /= [ s4(2:3), 4_\" x \" ])) call abort\n+  if (any (eoshift (s4, -1, 4_\" x \") /= [ 4_\" x \", s4(1:2) ])) call abort\n+\n+  if (any (eoshift (s1, 2) /= [ s1(3), \"   \", \"   \" ])) call abort\n+  if (any (eoshift (s1, -2) /= [ \"   \", \"   \", s1(1) ])) call abort\n+  if (any (eoshift (s1, 2, \" x \") /= [ s1(3), \" x \", \" x \" ])) call abort\n+  if (any (eoshift (s1, -2, \" x \") /= [ \" x \", \" x \", s1(1) ])) call abort\n+  if (any (eoshift (s4, 2) /= [ s4(3), 4_\"   \", 4_\"   \" ])) call abort\n+  if (any (eoshift (s4, -2) /= [ 4_\"   \", 4_\"   \", s4(1) ])) call abort\n+  if (any (eoshift (s4, 2, 4_\" x \") /= [ s4(3), 4_\" x \", 4_\" x \" ])) call abort\n+  if (any (eoshift (s4, -2, 4_\" x \") /= [ 4_\" x \", 4_\" x \", s4(1) ])) call abort\n+\n+end"}, {"sha": "e388685adf6a1f57eb5c10f9e4f8f41e5f0a9880", "filename": "gcc/testsuite/gfortran.dg/widechar_intrinsics_5.f90", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_5.f90?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -70,15 +70,13 @@\n   if (any(transpose(m2) /= transpose(m1))) call abort\n   deallocate (m2)\n \n-  ! Tests below should be uncommented when PR36257 is fixed.\n-  !\n-  !allocate (m2(3,3))\n-  !m2 = p\n-  !m1 = m2\n-  !if (any (spread ( p, 1, 2) /= spread (m1, 1, 2))) call abort\n-  !if (any (spread ( p, 1, 2) /= spread (m2, 1, 2))) call abort\n-  !if (any (spread (m1, 1, 2) /= spread (m2, 1, 2))) call abort\n-  !deallocate (m2)\n+  allocate (m2(3,3))\n+  m2 = p\n+  m1 = m2\n+  if (any (spread ( p, 1, 2) /= spread (m1, 1, 2))) call abort\n+  if (any (spread ( p, 1, 2) /= spread (m2, 1, 2))) call abort\n+  if (any (spread (m1, 1, 2) /= spread (m2, 1, 2))) call abort\n+  deallocate (m2)\n \n   allocate (m2(3,3))\n   m2 = p"}, {"sha": "68b46d8f608d68d83a67df737b85a4d3bcc4a112", "filename": "gcc/testsuite/gfortran.dg/widechar_intrinsics_6.f90", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_6.f90?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -0,0 +1,109 @@\n+! { dg-do run }\n+! { dg-options \"-fbackslash\" }\n+\n+  character(kind=1, len=3) :: s1\n+  character(kind=4, len=3) :: s4\n+  integer :: i\n+\n+  s1 = \"fo \"\n+  s4 = 4_\"fo \"\n+  i = 3\n+\n+  ! Check the REPEAT intrinsic\n+\n+  if (repeat (1_\"foo\", 2) /= 1_\"foofoo\") call abort\n+  if (repeat (1_\"fo \", 2) /= 1_\"fo fo \") call abort\n+  if (repeat (1_\"fo \", 2) /= 1_\"fo fo\") call abort\n+  if (repeat (1_\"fo \", 0) /= 1_\"\") call abort\n+  if (repeat (s1, 2) /= 1_\"fo fo \") call abort\n+  if (repeat (s1, 2) /= 1_\"fo fo\") call abort\n+  if (repeat (s1, 2) /= s1 // s1) call abort\n+  if (repeat (s1, 3) /= s1 // s1 // s1) call abort\n+  if (repeat (s1, 1) /= s1) call abort\n+  if (repeat (s1, 0) /= \"\") call abort\n+\n+  if (repeat (4_\"foo\", 2) /= 4_\"foofoo\") call abort\n+  if (repeat (4_\"fo \", 2) /= 4_\"fo fo \") call abort\n+  if (repeat (4_\"fo \", 2) /= 4_\"fo fo\") call abort\n+  if (repeat (4_\"fo \", 0) /= 4_\"\") call abort\n+  if (repeat (s4, 2) /= 4_\"fo fo \") call abort\n+  if (repeat (s4, 2) /= 4_\"fo fo\") call abort\n+  if (repeat (s4, 3) /= s4 // s4 // s4) call abort\n+  if (repeat (s4, 1) /= s4) call abort\n+  if (repeat (s4, 0) /= 4_\"\") call abort\n+\n+  call check_repeat (s1, s4)\n+  call check_repeat (\"\", 4_\"\")\n+  call check_repeat (\"truc\", 4_\"truc\")\n+  call check_repeat (\"truc \", 4_\"truc \")\n+\n+  ! Check NEW_LINE\n+\n+  if (ichar(new_line (\"\")) /= 10) call abort\n+  if (len(new_line (\"\")) /= 1) call abort\n+  if (ichar(new_line (s1)) /= 10) call abort\n+  if (len(new_line (s1)) /= 1) call abort\n+  if (ichar(new_line ([\"\",\"\"])) /= 10) call abort\n+  if (len(new_line ([\"\",\"\"])) /= 1) call abort\n+  if (ichar(new_line ([s1,s1])) /= 10) call abort\n+  if (len(new_line ([s1,s1])) /= 1) call abort\n+\n+  if (ichar(new_line (4_\"\")) /= 10) call abort\n+  if (len(new_line (4_\"\")) /= 1) call abort\n+  if (ichar(new_line (s4)) /= 10) call abort\n+  if (len(new_line (s4)) /= 1) call abort\n+  if (ichar(new_line ([4_\"\",4_\"\"])) /= 10) call abort\n+  if (len(new_line ([4_\"\",4_\"\"])) /= 1) call abort\n+  if (ichar(new_line ([s4,s4])) /= 10) call abort\n+  if (len(new_line ([s4,s4])) /= 1) call abort\n+\n+  ! Check SIZEOF\n+\n+  if (sizeof (\"\") /= 0) call abort\n+  if (sizeof (4_\"\") /= 0) call abort\n+  if (sizeof (\"x\") /= 1) call abort\n+  if (sizeof (\"\\xFF\") /= 1) call abort\n+  if (sizeof (4_\"x\") /= 4) call abort\n+  if (sizeof (4_\"\\UFFFFFFFF\") /= 4) call abort\n+  if (sizeof (s1) /= 3) call abort\n+  if (sizeof (s4) /= 12) call abort\n+\n+  if (sizeof ([\"a\", \"x\", \"z\"]) / sizeof (\"a\") /= 3) call abort\n+  if (sizeof ([4_\"a\", 4_\"x\", 4_\"z\"]) / sizeof (4_\"a\") /= 3) call abort\n+\n+  call check_sizeof (\"\", 4_\"\", 0)\n+  call check_sizeof (\"x\", 4_\"x\", 1)\n+  call check_sizeof (\"\\xFF\", 4_\"\\UFEBCE19E\", 1)\n+  call check_sizeof (\"\\xFF \", 4_\"\\UFEBCE19E \", 2)\n+  call check_sizeof (s1, s4, 3)\n+\n+contains\n+\n+  subroutine check_repeat (s1, s4)\n+    character(kind=1, len=*), intent(in) :: s1\n+    character(kind=4, len=*), intent(in) :: s4\n+    integer :: i\n+\n+    do i = 0, 10\n+      if (len (repeat(s1, i)) /= i * len(s1)) call abort\n+      if (len (repeat(s4, i)) /= i * len(s4)) call abort\n+\n+      if (len_trim (repeat(s1, i)) &\n+          /= max(0, (i - 1) * len(s1) + len_trim (s1))) call abort\n+      if (len_trim (repeat(s4, i)) &\n+          /= max(0, (i - 1) * len(s4) + len_trim (s4))) call abort\n+    end do\n+  end subroutine check_repeat\n+\n+  subroutine check_sizeof (s1, s4, i)\n+    character(kind=1, len=*), intent(in) :: s1\n+    character(kind=4, len=*), intent(in) :: s4\n+    character(kind=4, len=len(s4)) :: t4\n+    integer, intent(in) :: i\n+    \n+    if (sizeof (s1) /= i) call abort\n+    if (sizeof (s4) / sizeof (4_\" \") /= i) call abort\n+    if (sizeof (t4) / sizeof (4_\" \") /= i) call abort\n+  end subroutine check_sizeof\n+\n+end"}, {"sha": "7971af3963e655acbb4ecca47318e5b727605068", "filename": "gcc/testsuite/gfortran.dg/widechar_intrinsics_7.f90", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_7.f90?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -0,0 +1,125 @@\n+! { dg-do run }\n+! { dg-options \"-fbackslash\" }\n+\n+  character(kind=1, len=10) :: s1, t1\n+  character(kind=4, len=10) :: s4, t4\n+\n+  call check1(\"foobargeefoobargee\", \"arg\", &\n+              [ index  (\"foobargeefoobargee\", \"arg\", .true.),  &\n+                index  (\"foobargeefoobargee\", \"arg\", .false.), &\n+                scan   (\"foobargeefoobargee\", \"arg\", .true.),  &\n+                scan   (\"foobargeefoobargee\", \"arg\", .false.), &\n+                verify (\"foobargeefoobargee\", \"arg\", .true.),  &\n+                verify (\"foobargeefoobargee\", \"arg\", .false.) ], &\n+              4_\"foobargeefoobargee\", 4_\"arg\", &\n+              [ index  (4_\"foobargeefoobargee\", 4_\"arg\", .true.),  &\n+                index  (4_\"foobargeefoobargee\", 4_\"arg\", .false.), &\n+                scan   (4_\"foobargeefoobargee\", 4_\"arg\", .true.),  &\n+                scan   (4_\"foobargeefoobargee\", 4_\"arg\", .false.), &\n+                verify (4_\"foobargeefoobargee\", 4_\"arg\", .true.),  &\n+                verify (4_\"foobargeefoobargee\", 4_\"arg\", .false.) ])\n+\n+  call check1(\"foobargeefoobargee\", \"\", &\n+              [ index  (\"foobargeefoobargee\", \"\", .true.),  &\n+                index  (\"foobargeefoobargee\", \"\", .false.), &\n+                scan   (\"foobargeefoobargee\", \"\", .true.),  &\n+                scan   (\"foobargeefoobargee\", \"\", .false.), &\n+                verify (\"foobargeefoobargee\", \"\", .true.),  &\n+                verify (\"foobargeefoobargee\", \"\", .false.) ], &\n+              4_\"foobargeefoobargee\", 4_\"\", &\n+              [ index  (4_\"foobargeefoobargee\", 4_\"\", .true.),  &\n+                index  (4_\"foobargeefoobargee\", 4_\"\", .false.), &\n+                scan   (4_\"foobargeefoobargee\", 4_\"\", .true.),  &\n+                scan   (4_\"foobargeefoobargee\", 4_\"\", .false.), &\n+                verify (4_\"foobargeefoobargee\", 4_\"\", .true.),  &\n+                verify (4_\"foobargeefoobargee\", 4_\"\", .false.) ])\n+  call check1(\"foobargeefoobargee\", \"klm\", &\n+              [ index  (\"foobargeefoobargee\", \"klm\", .true.),  &\n+                index  (\"foobargeefoobargee\", \"klm\", .false.), &\n+                scan   (\"foobargeefoobargee\", \"klm\", .true.),  &\n+                scan   (\"foobargeefoobargee\", \"klm\", .false.), &\n+                verify (\"foobargeefoobargee\", \"klm\", .true.),  &\n+                verify (\"foobargeefoobargee\", \"klm\", .false.) ], &\n+              4_\"foobargeefoobargee\", 4_\"klm\", &\n+              [ index  (4_\"foobargeefoobargee\", 4_\"klm\", .true.),  &\n+                index  (4_\"foobargeefoobargee\", 4_\"klm\", .false.), &\n+                scan   (4_\"foobargeefoobargee\", 4_\"klm\", .true.),  &\n+                scan   (4_\"foobargeefoobargee\", 4_\"klm\", .false.), &\n+                verify (4_\"foobargeefoobargee\", 4_\"klm\", .true.),  &\n+                verify (4_\"foobargeefoobargee\", 4_\"klm\", .false.) ])\n+  call check1(\"foobargeefoobargee\", \"gee\", &\n+              [ index  (\"foobargeefoobargee\", \"gee\", .true.),  &\n+                index  (\"foobargeefoobargee\", \"gee\", .false.), &\n+                scan   (\"foobargeefoobargee\", \"gee\", .true.),  &\n+                scan   (\"foobargeefoobargee\", \"gee\", .false.), &\n+                verify (\"foobargeefoobargee\", \"gee\", .true.),  &\n+                verify (\"foobargeefoobargee\", \"gee\", .false.) ], &\n+              4_\"foobargeefoobargee\", 4_\"gee\", &\n+              [ index  (4_\"foobargeefoobargee\", 4_\"gee\", .true.),  &\n+                index  (4_\"foobargeefoobargee\", 4_\"gee\", .false.), &\n+                scan   (4_\"foobargeefoobargee\", 4_\"gee\", .true.),  &\n+                scan   (4_\"foobargeefoobargee\", 4_\"gee\", .false.), &\n+                verify (4_\"foobargeefoobargee\", 4_\"gee\", .true.),  &\n+                verify (4_\"foobargeefoobargee\", 4_\"gee\", .false.) ])\n+  call check1(\"foobargeefoobargee\", \"foo\", &\n+              [ index  (\"foobargeefoobargee\", \"foo\", .true.),  &\n+                index  (\"foobargeefoobargee\", \"foo\", .false.), &\n+                scan   (\"foobargeefoobargee\", \"foo\", .true.),  &\n+                scan   (\"foobargeefoobargee\", \"foo\", .false.), &\n+                verify (\"foobargeefoobargee\", \"foo\", .true.),  &\n+                verify (\"foobargeefoobargee\", \"foo\", .false.) ], &\n+              4_\"foobargeefoobargee\", 4_\"foo\", &\n+              [ index  (4_\"foobargeefoobargee\", 4_\"foo\", .true.),  &\n+                index  (4_\"foobargeefoobargee\", 4_\"foo\", .false.), &\n+                scan   (4_\"foobargeefoobargee\", 4_\"foo\", .true.),  &\n+                scan   (4_\"foobargeefoobargee\", 4_\"foo\", .false.), &\n+                verify (4_\"foobargeefoobargee\", 4_\"foo\", .true.),  &\n+                verify (4_\"foobargeefoobargee\", 4_\"foo\", .false.) ])\n+\n+  call check1(\"  \\b fe \\b\\0 bar cad\", \" \\b\\0\", &\n+              [ index  (\"  \\b fe \\b\\0 bar cad\", \" \\b\\0\", .true.),  &\n+                index  (\"  \\b fe \\b\\0 bar cad\", \" \\b\\0\", .false.), &\n+                scan   (\"  \\b fe \\b\\0 bar cad\", \" \\b\\0\", .true.),  &\n+                scan   (\"  \\b fe \\b\\0 bar cad\", \" \\b\\0\", .false.), &\n+                verify (\"  \\b fe \\b\\0 bar cad\", \" \\b\\0\", .true.),  &\n+                verify (\"  \\b fe \\b\\0 bar cad\", \" \\b\\0\", .false.) ], &\n+              4_\"  \\uC096 fe \\uC096\\uB8DE bar cad\", 4_\" \\uC096\\uB8DE\", &\n+              [ index  (4_\"  \\uC096 fe \\uC096\\uB8DE bar cad\", &\n+                        4_\" \\uC096\\uB8DE\", .true.),  &\n+                index  (4_\"  \\uC096 fe \\uC096\\uB8DE bar cad\", &\n+                        4_\" \\uC096\\uB8DE\", .false.), &\n+                scan   (4_\"  \\uC096 fe \\uC096\\uB8DE bar cad\", &\n+                        4_\" \\uC096\\uB8DE\", .true.),  &\n+                scan   (4_\"  \\uC096 fe \\uC096\\uB8DE bar cad\", &\n+                        4_\" \\uC096\\uB8DE\", .false.), &\n+                verify (4_\"  \\uC096 fe \\uC096\\uB8DE bar cad\", &\n+                        4_\" \\uC096\\uB8DE\", .true.),  &\n+                verify (4_\"  \\uC096 fe \\uC096\\uB8DE bar cad\", &\n+                        4_\" \\uC096\\uB8DE\", .false.) ])\n+\n+contains\n+\n+  subroutine check1 (s1, t1, res1, s4, t4, res4)\n+    character(kind=1, len=*) :: s1, t1\n+    character(kind=4, len=*) :: s4, t4\n+    integer :: res1(6), res4(6)\n+\n+    if (any (res1 /= res4)) call abort\n+\n+    if (index  (s1, t1, .true.)  /= res1(1)) call abort\n+    if (index  (s1, t1, .false.) /= res1(2)) call abort\n+    if (scan   (s1, t1, .true.)  /= res1(3)) call abort\n+    if (scan   (s1, t1, .false.) /= res1(4)) call abort\n+    if (verify (s1, t1, .true.)  /= res1(5)) call abort\n+    if (verify (s1, t1, .false.) /= res1(6)) call abort\n+\n+    if (index  (s4, t4, .true.)  /= res4(1)) call abort\n+    if (index  (s4, t4, .false.) /= res4(2)) call abort\n+    if (scan   (s4, t4, .true.)  /= res4(3)) call abort\n+    if (scan   (s4, t4, .false.) /= res4(4)) call abort\n+    if (verify (s4, t4, .true.)  /= res4(5)) call abort\n+    if (verify (s4, t4, .false.) /= res4(6)) call abort\n+\n+  end subroutine check1\n+\n+end"}, {"sha": "eeeabbca5afa004569425a11aaba67285613377c", "filename": "gcc/testsuite/gfortran.dg/widechar_intrinsics_8.f90", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_8.f90?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -0,0 +1,85 @@\n+! { dg-do run }\n+! { dg-options \"-fbackslash\" }\n+\n+  logical, parameter :: bigendian = transfer ((/1_1,0_1,0_1,0_1/), 0_4) /= 1\n+\n+  character(kind=1,len=3) :: s1, t1, u1\n+  character(kind=4,len=3) :: s4, t4, u4\n+\n+  ! Test MERGE intrinsic\n+\n+  call check_merge1 (\"foo\", \"gee\", .true., .false.)\n+  call check_merge4 (4_\"foo\", 4_\"gee\", .true., .false.)\n+\n+  if (merge (\"foo\", \"gee\", .true.) /= \"foo\") call abort\n+  if (merge (\"foo\", \"gee\", .false.) /= \"gee\") call abort\n+  if (merge (4_\"foo\", 4_\"gee\", .true.) /= 4_\"foo\") call abort\n+  if (merge (4_\"foo\", 4_\"gee\", .false.) /= 4_\"gee\") call abort\n+\n+  ! Test TRANSFER intrinsic\n+\n+  if (bigendian) then\n+    if (transfer (4_\"x\", \"    \") /= \"\\0\\0\\0x\") call abort\n+  else\n+    if (transfer (4_\"x\", \"    \") /= \"x\\0\\0\\0\") call abort\n+  endif\n+  if (transfer (4_\"\\U44444444\", \"    \") /= \"\\x44\\x44\\x44\\x44\") call abort\n+  if (transfer (4_\"\\U3FE91B5A\", 0_4) /= int(z'3FE91B5A', 4)) call abort\n+\n+  call check_transfer_i (4_\"\\U3FE91B5A\", [int(z'3FE91B5A', 4)])\n+  call check_transfer_i (4_\"\\u1B5A\", [int(z'1B5A', 4)])\n+\n+contains\n+\n+  subroutine check_merge1 (s1, t1, t, f)\n+    character(kind=1,len=*) :: s1, t1\n+    logical :: t, f\n+\n+    if (merge (s1, t1, .true.) /= s1) call abort\n+    if (merge (s1, t1, .false.) /= t1) call abort\n+    if (len (merge (s1, t1, .true.)) /= len (s1)) call abort\n+    if (len (merge (s1, t1, .false.)) /= len (t1)) call abort\n+    if (len_trim (merge (s1, t1, .true.)) /= len_trim (s1)) call abort\n+    if (len_trim (merge (s1, t1, .false.)) /= len_trim (t1)) call abort\n+\n+    if (merge (s1, t1, t) /= s1) call abort\n+    if (merge (s1, t1, f) /= t1) call abort\n+    if (len (merge (s1, t1, t)) /= len (s1)) call abort\n+    if (len (merge (s1, t1, f)) /= len (t1)) call abort\n+    if (len_trim (merge (s1, t1, t)) /= len_trim (s1)) call abort\n+    if (len_trim (merge (s1, t1, f)) /= len_trim (t1)) call abort\n+\n+  end subroutine check_merge1\n+\n+  subroutine check_merge4 (s4, t4, t, f)\n+    character(kind=4,len=*) :: s4, t4\n+    logical :: t, f\n+\n+    if (merge (s4, t4, .true.) /= s4) call abort\n+    if (merge (s4, t4, .false.) /= t4) call abort\n+    if (len (merge (s4, t4, .true.)) /= len (s4)) call abort\n+    if (len (merge (s4, t4, .false.)) /= len (t4)) call abort\n+    if (len_trim (merge (s4, t4, .true.)) /= len_trim (s4)) call abort\n+    if (len_trim (merge (s4, t4, .false.)) /= len_trim (t4)) call abort\n+\n+    if (merge (s4, t4, t) /= s4) call abort\n+    if (merge (s4, t4, f) /= t4) call abort\n+    if (len (merge (s4, t4, t)) /= len (s4)) call abort\n+    if (len (merge (s4, t4, f)) /= len (t4)) call abort\n+    if (len_trim (merge (s4, t4, t)) /= len_trim (s4)) call abort\n+    if (len_trim (merge (s4, t4, f)) /= len_trim (t4)) call abort\n+\n+  end subroutine check_merge4\n+\n+  subroutine check_transfer_i (s, i)\n+    character(kind=4,len=*) :: s\n+    integer(kind=4), dimension(len(s)) :: i\n+\n+    if (transfer (s, 0_4) /= ichar (s(1:1))) call abort\n+    if (transfer (s, 0_4) /= i(1)) call abort\n+    if (any (transfer (s, [0_4]) /= i)) call abort\n+    if (any (transfer (s, 0_4, len(s)) /= i)) call abort\n+\n+  end subroutine check_transfer_i\n+\n+end"}, {"sha": "ca6fa58184e6becb0d8f064727a88a241e346968", "filename": "gcc/testsuite/gfortran.dg/widechar_intrinsics_9.f90", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_9.f90?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -0,0 +1,70 @@\n+! { dg-do run }\n+! { dg-options \"-fbackslash\" }\n+\n+  implicit none\n+  character(kind=1,len=3) :: s1, t1\n+  character(kind=4,len=3) :: s4, t4\n+\n+  s1 = \"foo\" ; t1 = \"bar\"\n+  call check_minmax_1 (\"foo\", \"bar\", min(\"foo\",\"bar\"), max(\"foo\",\"bar\"))\n+  call check_minmax_1 (\"bar\", \"foo\", min(\"foo\",\"bar\"), max(\"foo\",\"bar\"))\n+  call check_minmax_1 (s1, t1, min(s1,t1), max(s1,t1))\n+  call check_minmax_1 (t1, s1, min(s1,t1), max(s1,t1))\n+\n+  s1 = \"   \" ; t1 = \"bar\"\n+  call check_minmax_1 (\"   \", \"bar\", min(\"   \",\"bar\"), max(\"   \",\"bar\"))\n+  call check_minmax_1 (\"bar\", \"   \", min(\"   \",\"bar\"), max(\"   \",\"bar\"))\n+  call check_minmax_1 (s1, t1, min(s1,t1), max(s1,t1))\n+  call check_minmax_1 (t1, s1, min(s1,t1), max(s1,t1))\n+\n+  s1 = \"   \" ; t1 = \"   \"\n+  call check_minmax_1 (\"   \", \"   \", min(\"   \",\"   \"), max(\"   \",\"   \"))\n+  call check_minmax_1 (\"   \", \"   \", min(\"   \",\"   \"), max(\"   \",\"   \"))\n+  call check_minmax_1 (s1, t1, min(s1,t1), max(s1,t1))\n+  call check_minmax_1 (t1, s1, min(s1,t1), max(s1,t1))\n+\n+  s1 = \"d\\xFF \" ; t1 = \"d  \"\n+  call check_minmax_1 (\"d\\xFF \", \"d  \", min(\"d\\xFF \",\"d  \"), max(\"d\\xFF \",\"d  \"))\n+  call check_minmax_1 (\"d  \", \"d\\xFF \", min(\"d\\xFF \",\"d  \"), max(\"d\\xFF \",\"d  \"))\n+  call check_minmax_1 (s1, t1, min(s1,t1), max(s1,t1))\n+  call check_minmax_1 (t1, s1, min(s1,t1), max(s1,t1))\n+\n+  s4 = 4_\"   \" ; t4 = 4_\"xxx\"\n+  call check_minmax_2 (4_\"   \", 4_\"xxx\", min(4_\"   \", 4_\"xxx\"), &\n+                       max(4_\"   \", 4_\"xxx\"))\n+  call check_minmax_2 (4_\"xxx\", 4_\"   \", min(4_\"   \", 4_\"xxx\"), &\n+                       max(4_\"   \", 4_\"xxx\"))\n+  call check_minmax_2 (s4, t4, min(s4,t4), max(s4,t4))\n+  call check_minmax_2 (t4, s4, min(s4,t4), max(s4,t4))\n+\n+  s4 = 4_\" \\u1be3m\" ; t4 = 4_\"xxx\"\n+  call check_minmax_2 (4_\" \\u1be3m\", 4_\"xxx\", min(4_\" \\u1be3m\", 4_\"xxx\"), &\n+                       max(4_\" \\u1be3m\", 4_\"xxx\"))\n+  call check_minmax_2 (4_\"xxx\", 4_\" \\u1be3m\", min(4_\" \\u1be3m\", 4_\"xxx\"), &\n+                       max(4_\" \\u1be3m\", 4_\"xxx\"))\n+  call check_minmax_2 (s4, t4, min(s4,t4), max(s4,t4))\n+  call check_minmax_2 (t4, s4, min(s4,t4), max(s4,t4))\n+\n+contains\n+\n+  subroutine check_minmax_1 (s1, s2, smin, smax)\n+    implicit none\n+    character(kind=1,len=*), intent(in) :: s1, s2, smin, smax\n+    character(kind=4,len=len(s1)) :: w1, w2, wmin, wmax\n+\n+    w1 = s1 ; w2 = s2 ; wmin = smin ; wmax = smax\n+    if (min (w1, w2) /= wmin) call abort\n+    if (max (w1, w2) /= wmax) call abort\n+    if (min (s1, s2) /= smin) call abort\n+    if (max (s1, s2) /= smax) call abort\n+  end subroutine check_minmax_1\n+\n+  subroutine check_minmax_2 (s1, s2, smin, smax)\n+    implicit none\n+    character(kind=4,len=*), intent(in) :: s1, s2, smin, smax\n+\n+    if (min (s1, s2) /= smin) call abort\n+    if (max (s1, s2) /= smax) call abort\n+  end subroutine check_minmax_2\n+\n+end"}, {"sha": "9a25ecd5cee05da32ef6d3291d1c84f001851565", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -1,3 +1,37 @@\n+2008-05-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/36319\n+\t* intrinsics/string_intrinsics_inc.c (string_index): Return\n+\tcorrect value for zero-length substring.\n+\t* intrinsics/cshift0.c: Add _char4 variant.\n+\t* intrinsics/eoshift0.c (eoshift0): Allow filler to be a pattern\n+\twider than a single byte. Add _char4 variant and use above\n+\tfunctionality.\n+\t* intrinsics/eoshift2.c (eoshift2): Likewise.\n+\t* m4/eoshift1.m4: Likewise.\n+\t* m4/eoshift3.m4: Likewise.\n+\t* m4/cshift1.m4: Add _char4 variants.\n+\t* gfortran.map (GFORTRAN_1.1): Add _gfortran_cshift0_1_char4,\n+\t_gfortran_cshift0_2_char4, _gfortran_cshift0_4_char4,\n+\t_gfortran_cshift0_8_char4, _gfortran_cshift1_16_char4,\n+\t_gfortran_cshift1_4_char4, _gfortran_cshift1_8_char4,\n+\t_gfortran_eoshift0_1_char4, _gfortran_eoshift0_2_char4,\n+\t_gfortran_eoshift0_4_char4, _gfortran_eoshift0_8_char4,\n+\t_gfortran_eoshift1_16_char4, _gfortran_eoshift1_4_char4,\n+\t_gfortran_eoshift1_8_char4, _gfortran_eoshift2_1_char4,\n+\t_gfortran_eoshift2_2_char4, _gfortran_eoshift2_4_char4,\n+\t_gfortran_eoshift2_8_char4, _gfortran_eoshift3_16_char4,\n+\t_gfortran_eoshift3_4_char4 and _gfortran_eoshift3_8_char4.\n+\t* generated/eoshift3_4.c: Regenerate.\n+\t* generated/eoshift1_8.c: Regenerate.\n+\t* generated/eoshift1_16.c: Regenerate.\n+\t* generated/cshift1_4.c: Regenerate.\n+\t* generated/eoshift1_4.c: Regenerate.\n+\t* generated/eoshift3_8.c: Regenerate.\n+\t* generated/eoshift3_16.c: Regenerate.\n+\t* generated/cshift1_8.c: Regenerate.\n+\t* generated/cshift1_16.c: Regenerate.\n+\n 2008-05-25  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/32600"}, {"sha": "2943c3ed86d803c8133873aa6a8b78605ebd6ecd", "filename": "libgfortran/generated/cshift1_16.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Fcshift1_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Fcshift1_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_16.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -212,6 +212,7 @@ cshift1_16 (gfc_array_char * const restrict ret,\n   cshift1 (ret, array, h, pwhich, GFC_DESCRIPTOR_SIZE (array));\n }\n \n+\n void cshift1_16_char (gfc_array_char * const restrict ret, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict array,\n@@ -231,4 +232,24 @@ cshift1_16_char (gfc_array_char * const restrict ret,\n   cshift1 (ret, array, h, pwhich, array_length);\n }\n \n+\n+void cshift1_16_char4 (gfc_array_char * const restrict ret, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict array,\n+\tconst gfc_array_i16 * const restrict h, \n+\tconst GFC_INTEGER_16 * const restrict pwhich,\n+\tGFC_INTEGER_4);\n+export_proto(cshift1_16_char4);\n+\n+void\n+cshift1_16_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array,\n+\tconst gfc_array_i16 * const restrict h, \n+\tconst GFC_INTEGER_16 * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length)\n+{\n+  cshift1 (ret, array, h, pwhich, array_length * sizeof (gfc_char4_t));\n+}\n+\n #endif"}, {"sha": "3f4f9e0bf259acb90d262973bf32ec0b472dc7f7", "filename": "libgfortran/generated/cshift1_4.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Fcshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Fcshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_4.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -212,6 +212,7 @@ cshift1_4 (gfc_array_char * const restrict ret,\n   cshift1 (ret, array, h, pwhich, GFC_DESCRIPTOR_SIZE (array));\n }\n \n+\n void cshift1_4_char (gfc_array_char * const restrict ret, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict array,\n@@ -231,4 +232,24 @@ cshift1_4_char (gfc_array_char * const restrict ret,\n   cshift1 (ret, array, h, pwhich, array_length);\n }\n \n+\n+void cshift1_4_char4 (gfc_array_char * const restrict ret, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict array,\n+\tconst gfc_array_i4 * const restrict h, \n+\tconst GFC_INTEGER_4 * const restrict pwhich,\n+\tGFC_INTEGER_4);\n+export_proto(cshift1_4_char4);\n+\n+void\n+cshift1_4_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array,\n+\tconst gfc_array_i4 * const restrict h, \n+\tconst GFC_INTEGER_4 * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length)\n+{\n+  cshift1 (ret, array, h, pwhich, array_length * sizeof (gfc_char4_t));\n+}\n+\n #endif"}, {"sha": "4d246e54d95a5b91a6c9886c8a474c732884874b", "filename": "libgfortran/generated/cshift1_8.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Fcshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Fcshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_8.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -212,6 +212,7 @@ cshift1_8 (gfc_array_char * const restrict ret,\n   cshift1 (ret, array, h, pwhich, GFC_DESCRIPTOR_SIZE (array));\n }\n \n+\n void cshift1_8_char (gfc_array_char * const restrict ret, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict array,\n@@ -231,4 +232,24 @@ cshift1_8_char (gfc_array_char * const restrict ret,\n   cshift1 (ret, array, h, pwhich, array_length);\n }\n \n+\n+void cshift1_8_char4 (gfc_array_char * const restrict ret, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict array,\n+\tconst gfc_array_i8 * const restrict h, \n+\tconst GFC_INTEGER_8 * const restrict pwhich,\n+\tGFC_INTEGER_4);\n+export_proto(cshift1_8_char4);\n+\n+void\n+cshift1_8_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array,\n+\tconst gfc_array_i8 * const restrict h, \n+\tconst GFC_INTEGER_8 * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length)\n+{\n+  cshift1 (ret, array, h, pwhich, array_length * sizeof (gfc_char4_t));\n+}\n+\n #endif"}, {"sha": "63b75bdbd6b6704b1ff367f57ca8826ced089daf", "filename": "libgfortran/generated/eoshift1_16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift1_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift1_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_16.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -42,7 +42,7 @@ eoshift1 (gfc_array_char * const restrict ret,\n \tconst gfc_array_i16 * const restrict h,\n \tconst char * const restrict pbound, \n \tconst GFC_INTEGER_16 * const restrict pwhich, \n-\tindex_type size, char filler)\n+\tindex_type size, const char * filler, index_type filler_len)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -183,7 +183,14 @@ eoshift1 (gfc_array_char * const restrict ret,\n       else\n \twhile (n--)\n \t  {\n-\t    memset (dest, filler, size);\n+\t    index_type i;\n+\n+\t    if (filler_len == 1)\n+\t      memset (dest, filler[0], size);\n+\t    else\n+\t      for (i = 0; i < size; i += filler_len)\n+\t\tmemcpy (&dest[i], filler, filler_len);\n+\n \t    dest += roffset;\n \t  }\n \n@@ -234,9 +241,11 @@ eoshift1_16 (gfc_array_char * const restrict ret,\n \tconst char * const restrict pbound,\n \tconst GFC_INTEGER_16 * const restrict pwhich)\n {\n-  eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+  eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array),\n+\t    \"\\0\", 1);\n }\n \n+\n void eoshift1_16_char (gfc_array_char * const restrict, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict, \n@@ -256,7 +265,32 @@ eoshift1_16_char (gfc_array_char * const restrict ret,\n \tGFC_INTEGER_4 array_length,\n \tGFC_INTEGER_4 bound_length __attribute__((unused)))\n {\n-  eoshift1 (ret, array, h, pbound, pwhich, array_length, ' ');\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length, \" \", 1);\n+}\n+\n+\n+void eoshift1_16_char4 (gfc_array_char * const restrict, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict, \n+\tconst gfc_array_i16 * const restrict,\n+\tconst char * const restrict, \n+\tconst GFC_INTEGER_16 * const restrict,\n+\tGFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(eoshift1_16_char4);\n+\n+void\n+eoshift1_16_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array, \n+\tconst gfc_array_i16 * const restrict h,\n+\tconst char *  const restrict pbound, \n+\tconst GFC_INTEGER_16 * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length,\n+\tGFC_INTEGER_4 bound_length __attribute__((unused)))\n+{\n+  static const gfc_char4_t space = (unsigned char) ' ';\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length * sizeof (gfc_char4_t),\n+\t    (const char *) &space, sizeof (gfc_char4_t));\n }\n \n #endif"}, {"sha": "58ce7e9f5dd5540708eebfae128a7b24b943a8f3", "filename": "libgfortran/generated/eoshift1_4.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_4.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -42,7 +42,7 @@ eoshift1 (gfc_array_char * const restrict ret,\n \tconst gfc_array_i4 * const restrict h,\n \tconst char * const restrict pbound, \n \tconst GFC_INTEGER_4 * const restrict pwhich, \n-\tindex_type size, char filler)\n+\tindex_type size, const char * filler, index_type filler_len)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -183,7 +183,14 @@ eoshift1 (gfc_array_char * const restrict ret,\n       else\n \twhile (n--)\n \t  {\n-\t    memset (dest, filler, size);\n+\t    index_type i;\n+\n+\t    if (filler_len == 1)\n+\t      memset (dest, filler[0], size);\n+\t    else\n+\t      for (i = 0; i < size; i += filler_len)\n+\t\tmemcpy (&dest[i], filler, filler_len);\n+\n \t    dest += roffset;\n \t  }\n \n@@ -234,9 +241,11 @@ eoshift1_4 (gfc_array_char * const restrict ret,\n \tconst char * const restrict pbound,\n \tconst GFC_INTEGER_4 * const restrict pwhich)\n {\n-  eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+  eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array),\n+\t    \"\\0\", 1);\n }\n \n+\n void eoshift1_4_char (gfc_array_char * const restrict, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict, \n@@ -256,7 +265,32 @@ eoshift1_4_char (gfc_array_char * const restrict ret,\n \tGFC_INTEGER_4 array_length,\n \tGFC_INTEGER_4 bound_length __attribute__((unused)))\n {\n-  eoshift1 (ret, array, h, pbound, pwhich, array_length, ' ');\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length, \" \", 1);\n+}\n+\n+\n+void eoshift1_4_char4 (gfc_array_char * const restrict, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict, \n+\tconst gfc_array_i4 * const restrict,\n+\tconst char * const restrict, \n+\tconst GFC_INTEGER_4 * const restrict,\n+\tGFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(eoshift1_4_char4);\n+\n+void\n+eoshift1_4_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array, \n+\tconst gfc_array_i4 * const restrict h,\n+\tconst char *  const restrict pbound, \n+\tconst GFC_INTEGER_4 * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length,\n+\tGFC_INTEGER_4 bound_length __attribute__((unused)))\n+{\n+  static const gfc_char4_t space = (unsigned char) ' ';\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length * sizeof (gfc_char4_t),\n+\t    (const char *) &space, sizeof (gfc_char4_t));\n }\n \n #endif"}, {"sha": "0e9c2f1442a346cd7a05354d6a58bda8c2d786b0", "filename": "libgfortran/generated/eoshift1_8.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_8.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -42,7 +42,7 @@ eoshift1 (gfc_array_char * const restrict ret,\n \tconst gfc_array_i8 * const restrict h,\n \tconst char * const restrict pbound, \n \tconst GFC_INTEGER_8 * const restrict pwhich, \n-\tindex_type size, char filler)\n+\tindex_type size, const char * filler, index_type filler_len)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -183,7 +183,14 @@ eoshift1 (gfc_array_char * const restrict ret,\n       else\n \twhile (n--)\n \t  {\n-\t    memset (dest, filler, size);\n+\t    index_type i;\n+\n+\t    if (filler_len == 1)\n+\t      memset (dest, filler[0], size);\n+\t    else\n+\t      for (i = 0; i < size; i += filler_len)\n+\t\tmemcpy (&dest[i], filler, filler_len);\n+\n \t    dest += roffset;\n \t  }\n \n@@ -234,9 +241,11 @@ eoshift1_8 (gfc_array_char * const restrict ret,\n \tconst char * const restrict pbound,\n \tconst GFC_INTEGER_8 * const restrict pwhich)\n {\n-  eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+  eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array),\n+\t    \"\\0\", 1);\n }\n \n+\n void eoshift1_8_char (gfc_array_char * const restrict, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict, \n@@ -256,7 +265,32 @@ eoshift1_8_char (gfc_array_char * const restrict ret,\n \tGFC_INTEGER_4 array_length,\n \tGFC_INTEGER_4 bound_length __attribute__((unused)))\n {\n-  eoshift1 (ret, array, h, pbound, pwhich, array_length, ' ');\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length, \" \", 1);\n+}\n+\n+\n+void eoshift1_8_char4 (gfc_array_char * const restrict, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict, \n+\tconst gfc_array_i8 * const restrict,\n+\tconst char * const restrict, \n+\tconst GFC_INTEGER_8 * const restrict,\n+\tGFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(eoshift1_8_char4);\n+\n+void\n+eoshift1_8_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array, \n+\tconst gfc_array_i8 * const restrict h,\n+\tconst char *  const restrict pbound, \n+\tconst GFC_INTEGER_8 * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length,\n+\tGFC_INTEGER_4 bound_length __attribute__((unused)))\n+{\n+  static const gfc_char4_t space = (unsigned char) ' ';\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length * sizeof (gfc_char4_t),\n+\t    (const char *) &space, sizeof (gfc_char4_t));\n }\n \n #endif"}, {"sha": "214f3783d4fb53095f7a477defc0dc5f22399645", "filename": "libgfortran/generated/eoshift3_16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift3_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift3_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_16.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -42,7 +42,7 @@ eoshift3 (gfc_array_char * const restrict ret,\n \tconst gfc_array_i16 * const restrict h,\n \tconst gfc_array_char * const restrict bound, \n \tconst GFC_INTEGER_16 * const restrict pwhich,\n-\tindex_type size, char filler)\n+\tindex_type size, const char * filler, index_type filler_len)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -198,7 +198,14 @@ eoshift3 (gfc_array_char * const restrict ret,\n       else\n \twhile (n--)\n \t  {\n-\t    memset (dest, filler, size);\n+\t    index_type i;\n+\n+\t    if (filler_len == 1)\n+\t      memset (dest, filler[0], size);\n+\t    else\n+\t      for (i = 0; i < size; i += filler_len)\n+\t\tmemcpy (&dest[i], filler, filler_len);\n+\n \t    dest += roffset;\n \t  }\n \n@@ -253,9 +260,11 @@ eoshift3_16 (gfc_array_char * const restrict ret,\n \tconst gfc_array_char * const restrict bound,\n \tconst GFC_INTEGER_16 * const restrict pwhich)\n {\n-  eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+  eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array),\n+\t    \"\\0\", 1);\n }\n \n+\n extern void eoshift3_16_char (gfc_array_char * const restrict, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict,\n@@ -275,7 +284,32 @@ eoshift3_16_char (gfc_array_char * const restrict ret,\n \tGFC_INTEGER_4 array_length,\n \tGFC_INTEGER_4 bound_length __attribute__((unused)))\n {\n-  eoshift3 (ret, array, h, bound, pwhich, array_length, ' ');\n+  eoshift3 (ret, array, h, bound, pwhich, array_length, \" \", 1);\n+}\n+\n+\n+extern void eoshift3_16_char4 (gfc_array_char * const restrict, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict,\n+\tconst gfc_array_i16 * const restrict,\n+\tconst gfc_array_char * const restrict,\n+\tconst GFC_INTEGER_16 * const restrict, \n+\tGFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(eoshift3_16_char4);\n+\n+void\n+eoshift3_16_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array, \n+\tconst gfc_array_i16 *  const restrict h,\n+\tconst gfc_array_char * const restrict bound,\n+\tconst GFC_INTEGER_16 * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length,\n+\tGFC_INTEGER_4 bound_length __attribute__((unused)))\n+{\n+  static const gfc_char4_t space = (unsigned char) ' ';\n+  eoshift3 (ret, array, h, bound, pwhich, array_length * sizeof (gfc_char4_t),\n+\t    (const char *) &space, sizeof (gfc_char4_t));\n }\n \n #endif"}, {"sha": "e96ef2504b052bbaac53481e3ab080c1a74f9eab", "filename": "libgfortran/generated/eoshift3_4.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift3_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift3_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_4.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -42,7 +42,7 @@ eoshift3 (gfc_array_char * const restrict ret,\n \tconst gfc_array_i4 * const restrict h,\n \tconst gfc_array_char * const restrict bound, \n \tconst GFC_INTEGER_4 * const restrict pwhich,\n-\tindex_type size, char filler)\n+\tindex_type size, const char * filler, index_type filler_len)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -198,7 +198,14 @@ eoshift3 (gfc_array_char * const restrict ret,\n       else\n \twhile (n--)\n \t  {\n-\t    memset (dest, filler, size);\n+\t    index_type i;\n+\n+\t    if (filler_len == 1)\n+\t      memset (dest, filler[0], size);\n+\t    else\n+\t      for (i = 0; i < size; i += filler_len)\n+\t\tmemcpy (&dest[i], filler, filler_len);\n+\n \t    dest += roffset;\n \t  }\n \n@@ -253,9 +260,11 @@ eoshift3_4 (gfc_array_char * const restrict ret,\n \tconst gfc_array_char * const restrict bound,\n \tconst GFC_INTEGER_4 * const restrict pwhich)\n {\n-  eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+  eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array),\n+\t    \"\\0\", 1);\n }\n \n+\n extern void eoshift3_4_char (gfc_array_char * const restrict, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict,\n@@ -275,7 +284,32 @@ eoshift3_4_char (gfc_array_char * const restrict ret,\n \tGFC_INTEGER_4 array_length,\n \tGFC_INTEGER_4 bound_length __attribute__((unused)))\n {\n-  eoshift3 (ret, array, h, bound, pwhich, array_length, ' ');\n+  eoshift3 (ret, array, h, bound, pwhich, array_length, \" \", 1);\n+}\n+\n+\n+extern void eoshift3_4_char4 (gfc_array_char * const restrict, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict,\n+\tconst gfc_array_i4 * const restrict,\n+\tconst gfc_array_char * const restrict,\n+\tconst GFC_INTEGER_4 * const restrict, \n+\tGFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(eoshift3_4_char4);\n+\n+void\n+eoshift3_4_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array, \n+\tconst gfc_array_i4 *  const restrict h,\n+\tconst gfc_array_char * const restrict bound,\n+\tconst GFC_INTEGER_4 * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length,\n+\tGFC_INTEGER_4 bound_length __attribute__((unused)))\n+{\n+  static const gfc_char4_t space = (unsigned char) ' ';\n+  eoshift3 (ret, array, h, bound, pwhich, array_length * sizeof (gfc_char4_t),\n+\t    (const char *) &space, sizeof (gfc_char4_t));\n }\n \n #endif"}, {"sha": "dc39b94eb97693ab47b38bee9fc7b1f0dc02d0c1", "filename": "libgfortran/generated/eoshift3_8.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift3_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgenerated%2Feoshift3_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_8.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -42,7 +42,7 @@ eoshift3 (gfc_array_char * const restrict ret,\n \tconst gfc_array_i8 * const restrict h,\n \tconst gfc_array_char * const restrict bound, \n \tconst GFC_INTEGER_8 * const restrict pwhich,\n-\tindex_type size, char filler)\n+\tindex_type size, const char * filler, index_type filler_len)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -198,7 +198,14 @@ eoshift3 (gfc_array_char * const restrict ret,\n       else\n \twhile (n--)\n \t  {\n-\t    memset (dest, filler, size);\n+\t    index_type i;\n+\n+\t    if (filler_len == 1)\n+\t      memset (dest, filler[0], size);\n+\t    else\n+\t      for (i = 0; i < size; i += filler_len)\n+\t\tmemcpy (&dest[i], filler, filler_len);\n+\n \t    dest += roffset;\n \t  }\n \n@@ -253,9 +260,11 @@ eoshift3_8 (gfc_array_char * const restrict ret,\n \tconst gfc_array_char * const restrict bound,\n \tconst GFC_INTEGER_8 * const restrict pwhich)\n {\n-  eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+  eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array),\n+\t    \"\\0\", 1);\n }\n \n+\n extern void eoshift3_8_char (gfc_array_char * const restrict, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict,\n@@ -275,7 +284,32 @@ eoshift3_8_char (gfc_array_char * const restrict ret,\n \tGFC_INTEGER_4 array_length,\n \tGFC_INTEGER_4 bound_length __attribute__((unused)))\n {\n-  eoshift3 (ret, array, h, bound, pwhich, array_length, ' ');\n+  eoshift3 (ret, array, h, bound, pwhich, array_length, \" \", 1);\n+}\n+\n+\n+extern void eoshift3_8_char4 (gfc_array_char * const restrict, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict,\n+\tconst gfc_array_i8 * const restrict,\n+\tconst gfc_array_char * const restrict,\n+\tconst GFC_INTEGER_8 * const restrict, \n+\tGFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(eoshift3_8_char4);\n+\n+void\n+eoshift3_8_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array, \n+\tconst gfc_array_i8 *  const restrict h,\n+\tconst gfc_array_char * const restrict bound,\n+\tconst GFC_INTEGER_8 * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length,\n+\tGFC_INTEGER_4 bound_length __attribute__((unused)))\n+{\n+  static const gfc_char4_t space = (unsigned char) ' ';\n+  eoshift3 (ret, array, h, bound, pwhich, array_length * sizeof (gfc_char4_t),\n+\t    (const char *) &space, sizeof (gfc_char4_t));\n }\n \n #endif"}, {"sha": "60ef8532275a07b547178cae41cc5ff4e5ac2e06", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -1040,28 +1040,49 @@ GFORTRAN_1.1 {\n     _gfortran_convert_char4_to_char1;\n     _gfortran_cshift0_16;\n     _gfortran_cshift0_16_char;\n+    _gfortran_cshift0_1_char4;\n+    _gfortran_cshift0_2_char4;\n+    _gfortran_cshift0_4_char4;\n+    _gfortran_cshift0_8_char4;\n+    _gfortran_cshift1_16_char4;\n+    _gfortran_cshift1_4_char4;\n+    _gfortran_cshift1_8_char4;\n     _gfortran_eoshift0_16;\n     _gfortran_eoshift0_16_char;\n+    _gfortran_eoshift0_1_char4;\n+    _gfortran_eoshift0_2_char4;\n+    _gfortran_eoshift0_4_char4;\n+    _gfortran_eoshift0_8_char4;\n+    _gfortran_eoshift1_16_char4;\n+    _gfortran_eoshift1_4_char4;\n+    _gfortran_eoshift1_8_char4;\n     _gfortran_eoshift2_16;\n     _gfortran_eoshift2_16_char;\n+    _gfortran_eoshift2_1_char4;\n+    _gfortran_eoshift2_2_char4;\n+    _gfortran_eoshift2_4_char4;\n+    _gfortran_eoshift2_8_char4;\n+    _gfortran_eoshift3_16_char4;\n+    _gfortran_eoshift3_4_char4;\n+    _gfortran_eoshift3_8_char4;\n     _gfortran_erfc_scaled_r10;\n     _gfortran_erfc_scaled_r16;\n     _gfortran_erfc_scaled_r4;\n     _gfortran_erfc_scaled_r8;\n     _gfortran_pack_char4;\n     _gfortran_pack_s_char4;\n     _gfortran_reshape_char4;\n-    _gfortran_select_string_char4;\n     _gfortran_selected_char_kind;\n+    _gfortran_select_string_char4;\n     _gfortran_spread_char4;\n     _gfortran_spread_char4_scalar;\n-    _gfortran_st_wait;\n     _gfortran_string_index_char4;\n     _gfortran_string_len_trim_char4;\n     _gfortran_string_minmax_char4;\n     _gfortran_string_scan_char4;\n     _gfortran_string_trim_char4;\n     _gfortran_string_verify_char4;\n+    _gfortran_st_wait;\n     _gfortran_transpose_char4;\n     _gfortran_unpack0_char4;\n     _gfortran_unpack1_char4;"}, {"sha": "76ce97e0f10fb907fb73264123d8949e21bc37eb", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -334,6 +334,24 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n \t\t      GFC_INTEGER_4 array_length)\t\t\t      \\\n   {\t\t\t\t\t\t\t\t\t      \\\n     cshift0 (ret, array, *pshift, pdim ? *pdim : 1, array_length);\t      \\\n+  }\t\t\t\t\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  extern void cshift0_##N##_char4 (gfc_array_char *, GFC_INTEGER_4,\t      \\\n+\t\t\t\t   const gfc_array_char *,\t\t      \\\n+\t\t\t\t   const GFC_INTEGER_##N *,\t\t      \\\n+\t\t\t\t   const GFC_INTEGER_##N *, GFC_INTEGER_4);   \\\n+  export_proto(cshift0_##N##_char4);\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  void\t\t\t\t\t\t\t\t\t      \\\n+  cshift0_##N##_char4 (gfc_array_char *ret,\t\t\t\t      \\\n+\t\t       GFC_INTEGER_4 ret_length __attribute__((unused)),      \\\n+\t\t       const gfc_array_char *array,\t\t\t      \\\n+\t\t       const GFC_INTEGER_##N *pshift,\t\t\t      \\\n+\t\t       const GFC_INTEGER_##N *pdim,\t\t\t      \\\n+\t\t       GFC_INTEGER_4 array_length)\t\t\t      \\\n+  {\t\t\t\t\t\t\t\t\t      \\\n+    cshift0 (ret, array, *pshift, pdim ? *pdim : 1,\t\t\t      \\\n+\t     array_length * sizeof (gfc_char4_t));\t\t\t      \\\n   }\n \n DEFINE_CSHIFT (1);"}, {"sha": "ac7a0ba85b60fb6902209b03ec316d8e0e9a50d7", "filename": "libgfortran/intrinsics/eoshift0.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fintrinsics%2Feoshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fintrinsics%2Feoshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift0.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -39,7 +39,7 @@ Boston, MA 02110-1301, USA.  */\n static void\n eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n \t  int shift, const char * pbound, int which, index_type size,\n-\t  char filler)\n+\t  const char *filler, index_type filler_len)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -175,7 +175,14 @@ eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n       else\n \twhile (n--)\n \t  {\n-\t    memset (dest, filler, size);\n+\t    index_type i;\n+\n+\t    if (filler_len == 1)\n+\t      memset (dest, filler[0], size);\n+\t    else\n+\t      for (i = 0; i < size ; i += filler_len)\n+\t\tmemcpy (&dest[i], filler, filler_len);\n+\n \t    dest += roffset;\n \t  }\n \n@@ -223,7 +230,7 @@ eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n \t\tconst GFC_INTEGER_##N *pdim)\t\t\t\t      \\\n   {\t\t\t\t\t\t\t\t\t      \\\n     eoshift0 (ret, array, *pshift, pbound, pdim ? *pdim : 1,\t\t      \\\n-\t      GFC_DESCRIPTOR_SIZE (array), 0);\t\t\t\t      \\\n+\t      GFC_DESCRIPTOR_SIZE (array), \"\\0\", 1);\t\t\t      \\\n   }\t\t\t\t\t\t\t\t\t      \\\n \t\t\t\t\t\t\t\t\t      \\\n   extern void eoshift0_##N##_char (gfc_array_char *, GFC_INTEGER_4,\t      \\\n@@ -244,7 +251,30 @@ eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n \t\t       GFC_INTEGER_4 bound_length __attribute__((unused)))    \\\n   {\t\t\t\t\t\t\t\t\t      \\\n     eoshift0 (ret, array, *pshift, pbound, pdim ? *pdim : 1,\t\t      \\\n-\t      array_length, ' ');\t\t\t\t\t      \\\n+\t      array_length, \" \", 1);\t\t\t\t\t      \\\n+  }\t\t\t\t\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  extern void eoshift0_##N##_char4 (gfc_array_char *, GFC_INTEGER_4,\t      \\\n+\t\t\t\t    const gfc_array_char *,\t\t      \\\n+\t\t\t\t    const GFC_INTEGER_##N *, const char *,    \\\n+\t\t\t\t    const GFC_INTEGER_##N *, GFC_INTEGER_4,   \\\n+\t\t\t\t    GFC_INTEGER_4);\t\t\t      \\\n+  export_proto(eoshift0_##N##_char4);\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  void\t\t\t\t\t\t\t\t\t      \\\n+  eoshift0_##N##_char4 (gfc_array_char *ret,\t\t\t\t      \\\n+\t\t\tGFC_INTEGER_4 ret_length __attribute__((unused)),     \\\n+\t\t\tconst gfc_array_char *array,\t\t\t      \\\n+\t\t\tconst GFC_INTEGER_##N *pshift,\t\t\t      \\\n+\t\t\tconst char *pbound,\t\t\t\t      \\\n+\t\t\tconst GFC_INTEGER_##N *pdim,\t\t\t      \\\n+\t\t\tGFC_INTEGER_4 array_length,\t\t\t      \\\n+\t\t\tGFC_INTEGER_4 bound_length __attribute__((unused)))   \\\n+  {\t\t\t\t\t\t\t\t\t      \\\n+    static const gfc_char4_t space = (unsigned char) ' ';\t\t      \\\n+    eoshift0 (ret, array, *pshift, pbound, pdim ? *pdim : 1,\t\t      \\\n+\t      array_length * sizeof (gfc_char4_t), (const char *) &space,     \\\n+\t      sizeof (gfc_char4_t));\t\t\t\t\t      \\\n   }\n \n DEFINE_EOSHIFT (1);"}, {"sha": "239d9714a992fe6b4c6e0ff975cdceff92462902", "filename": "libgfortran/intrinsics/eoshift2.c", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fintrinsics%2Feoshift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fintrinsics%2Feoshift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift2.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -39,7 +39,7 @@ Boston, MA 02110-1301, USA.  */\n static void\n eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n \t  int shift, const gfc_array_char *bound, int which,\n-\t  index_type size, char filler)\n+\t  index_type size, const char *filler, index_type filler_len)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -192,7 +192,14 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n       else\n \twhile (n--)\n \t  {\n-\t    memset (dest, filler, size);\n+\t    index_type i;\n+\n+\t    if (filler_len == 1)\n+\t      memset (dest, filler[0], size);\n+\t    else\n+\t      for (i = 0; i < size ; i += filler_len)\n+\t\tmemcpy (&dest[i], filler, filler_len);\n+\n \t    dest += roffset;\n \t  }\n \n@@ -243,7 +250,7 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n \t\tconst GFC_INTEGER_##N *pdim)\t\t\t\t      \\\n   {\t\t\t\t\t\t\t\t\t      \\\n     eoshift2 (ret, array, *pshift, pbound, pdim ? *pdim : 1,\t\t      \\\n-\t      GFC_DESCRIPTOR_SIZE (array), 0);\t\t\t\t      \\\n+\t      GFC_DESCRIPTOR_SIZE (array), \"\\0\", 1);\t\t\t      \\\n   }\t\t\t\t\t\t\t\t\t      \\\n \t\t\t\t\t\t\t\t\t      \\\n   extern void eoshift2_##N##_char (gfc_array_char *, GFC_INTEGER_4,\t      \\\n@@ -265,7 +272,31 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n \t\t       GFC_INTEGER_4 bound_length __attribute__((unused)))    \\\n   {\t\t\t\t\t\t\t\t\t      \\\n     eoshift2 (ret, array, *pshift, pbound, pdim ? *pdim : 1,\t\t      \\\n-\t      array_length, ' ');\t\t\t\t\t      \\\n+\t      array_length, \" \", 1);\t\t\t\t\t      \\\n+  }\t\t\t\t\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  extern void eoshift2_##N##_char4 (gfc_array_char *, GFC_INTEGER_4,\t      \\\n+\t\t\t\t    const gfc_array_char *,\t\t      \\\n+\t\t\t\t    const GFC_INTEGER_##N *,\t\t      \\\n+\t\t\t\t    const gfc_array_char *,\t\t      \\\n+\t\t\t\t    const GFC_INTEGER_##N *,\t\t      \\\n+\t\t\t\t    GFC_INTEGER_4, GFC_INTEGER_4);\t      \\\n+  export_proto(eoshift2_##N##_char4);\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  void\t\t\t\t\t\t\t\t\t      \\\n+  eoshift2_##N##_char4 (gfc_array_char *ret,\t\t\t\t      \\\n+\t\t\tGFC_INTEGER_4 ret_length __attribute__((unused)),     \\\n+\t\t\tconst gfc_array_char *array,\t\t\t      \\\n+\t\t\tconst GFC_INTEGER_##N *pshift,\t\t\t      \\\n+\t\t\tconst gfc_array_char *pbound,\t\t\t      \\\n+\t\t\tconst GFC_INTEGER_##N *pdim,\t\t\t      \\\n+\t\t\tGFC_INTEGER_4 array_length,\t\t\t      \\\n+\t\t\tGFC_INTEGER_4 bound_length __attribute__((unused)))   \\\n+  {\t\t\t\t\t\t\t\t\t      \\\n+    static const gfc_char4_t space = (unsigned char) ' ';\t\t      \\\n+    eoshift2 (ret, array, *pshift, pbound, pdim ? *pdim : 1,\t\t      \\\n+\t      array_length * sizeof (gfc_char4_t), (const char *) &space,     \\\n+\t      sizeof (gfc_char4_t));\t\t\t\t\t      \\\n   }\n \n DEFINE_EOSHIFT (1);"}, {"sha": "0008db5b2fc121987a692d66640d0ac2bd4abc8d", "filename": "libgfortran/intrinsics/string_intrinsics_inc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fintrinsics%2Fstring_intrinsics_inc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fintrinsics%2Fstring_intrinsics_inc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstring_intrinsics_inc.c?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -214,7 +214,7 @@ string_index (gfc_charlen_type slen, const CHARTYPE *str,\n   gfc_charlen_type start, last, delta, i;\n \n   if (sslen == 0)\n-    return 1;\n+    return back ? (slen + 1) : 1;\n \n   if (sslen > slen)\n     return 0;"}, {"sha": "28fae596bd46f3b4b5d939d9cbda09b9803f3788", "filename": "libgfortran/m4/cshift1.m4", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fm4%2Fcshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fm4%2Fcshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcshift1.m4?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -213,6 +213,7 @@ cshift1_'atype_kind` (gfc_array_char * const restrict ret,\n   cshift1 (ret, array, h, pwhich, GFC_DESCRIPTOR_SIZE (array));\n }\n \n+\n void cshift1_'atype_kind`_char (gfc_array_char * const restrict ret, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict array,\n@@ -232,4 +233,24 @@ cshift1_'atype_kind`_char (gfc_array_char * const restrict ret,\n   cshift1 (ret, array, h, pwhich, array_length);\n }\n \n+\n+void cshift1_'atype_kind`_char4 (gfc_array_char * const restrict ret, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict array,\n+\tconst 'atype` * const restrict h, \n+\tconst 'atype_name` * const restrict pwhich,\n+\tGFC_INTEGER_4);\n+export_proto(cshift1_'atype_kind`_char4);\n+\n+void\n+cshift1_'atype_kind`_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array,\n+\tconst 'atype` * const restrict h, \n+\tconst 'atype_name` * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length)\n+{\n+  cshift1 (ret, array, h, pwhich, array_length * sizeof (gfc_char4_t));\n+}\n+\n #endif'"}, {"sha": "8ce24eff0f5d501c9fb4f156a8a007a274f393cc", "filename": "libgfortran/m4/eoshift1.m4", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fm4%2Feoshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fm4%2Feoshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift1.m4?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -43,7 +43,7 @@ eoshift1 (gfc_array_char * const restrict ret,\n \tconst 'atype` * const restrict h,\n \tconst char * const restrict pbound, \n \tconst 'atype_name` * const restrict pwhich, \n-\tindex_type size, char filler)\n+\tindex_type size, const char * filler, index_type filler_len)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -184,7 +184,14 @@ eoshift1 (gfc_array_char * const restrict ret,\n       else\n \twhile (n--)\n \t  {\n-\t    memset (dest, filler, size);\n+\t    index_type i;\n+\n+\t    if (filler_len == 1)\n+\t      memset (dest, filler[0], size);\n+\t    else\n+\t      for (i = 0; i < size; i += filler_len)\n+\t\tmemcpy (&dest[i], filler, filler_len);\n+\n \t    dest += roffset;\n \t  }\n \n@@ -235,9 +242,11 @@ eoshift1_'atype_kind` (gfc_array_char * const restrict ret,\n \tconst char * const restrict pbound,\n \tconst 'atype_name` * const restrict pwhich)\n {\n-  eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+  eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array),\n+\t    \"\\0\", 1);\n }\n \n+\n void eoshift1_'atype_kind`_char (gfc_array_char * const restrict, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict, \n@@ -257,7 +266,32 @@ eoshift1_'atype_kind`_char (gfc_array_char * const restrict ret,\n \tGFC_INTEGER_4 array_length,\n \tGFC_INTEGER_4 bound_length __attribute__((unused)))\n {\n-  eoshift1 (ret, array, h, pbound, pwhich, array_length, ''` ''`);\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length, \" \", 1);\n+}\n+\n+\n+void eoshift1_'atype_kind`_char4 (gfc_array_char * const restrict, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict, \n+\tconst 'atype` * const restrict,\n+\tconst char * const restrict, \n+\tconst 'atype_name` * const restrict,\n+\tGFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(eoshift1_'atype_kind`_char4);\n+\n+void\n+eoshift1_'atype_kind`_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array, \n+\tconst 'atype` * const restrict h,\n+\tconst char *  const restrict pbound, \n+\tconst 'atype_name` * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length,\n+\tGFC_INTEGER_4 bound_length __attribute__((unused)))\n+{\n+  static const gfc_char4_t space = (unsigned char) ''` ''`;\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length * sizeof (gfc_char4_t),\n+\t    (const char *) &space, sizeof (gfc_char4_t));\n }\n \n #endif'"}, {"sha": "081ff92727765d3639403ee337fac3e6987891ac", "filename": "libgfortran/m4/eoshift3.m4", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fm4%2Feoshift3.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691da334bca13d0056d6d6e6f919995c1f1f9e4e/libgfortran%2Fm4%2Feoshift3.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift3.m4?ref=691da334bca13d0056d6d6e6f919995c1f1f9e4e", "patch": "@@ -43,7 +43,7 @@ eoshift3 (gfc_array_char * const restrict ret,\n \tconst 'atype` * const restrict h,\n \tconst gfc_array_char * const restrict bound, \n \tconst 'atype_name` * const restrict pwhich,\n-\tindex_type size, char filler)\n+\tindex_type size, const char * filler, index_type filler_len)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -199,7 +199,14 @@ eoshift3 (gfc_array_char * const restrict ret,\n       else\n \twhile (n--)\n \t  {\n-\t    memset (dest, filler, size);\n+\t    index_type i;\n+\n+\t    if (filler_len == 1)\n+\t      memset (dest, filler[0], size);\n+\t    else\n+\t      for (i = 0; i < size; i += filler_len)\n+\t\tmemcpy (&dest[i], filler, filler_len);\n+\n \t    dest += roffset;\n \t  }\n \n@@ -254,9 +261,11 @@ eoshift3_'atype_kind` (gfc_array_char * const restrict ret,\n \tconst gfc_array_char * const restrict bound,\n \tconst 'atype_name` * const restrict pwhich)\n {\n-  eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+  eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array),\n+\t    \"\\0\", 1);\n }\n \n+\n extern void eoshift3_'atype_kind`_char (gfc_array_char * const restrict, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict,\n@@ -276,7 +285,32 @@ eoshift3_'atype_kind`_char (gfc_array_char * const restrict ret,\n \tGFC_INTEGER_4 array_length,\n \tGFC_INTEGER_4 bound_length __attribute__((unused)))\n {\n-  eoshift3 (ret, array, h, bound, pwhich, array_length, ''` ''`);\n+  eoshift3 (ret, array, h, bound, pwhich, array_length, \" \", 1);\n+}\n+\n+\n+extern void eoshift3_'atype_kind`_char4 (gfc_array_char * const restrict, \n+\tGFC_INTEGER_4,\n+\tconst gfc_array_char * const restrict,\n+\tconst 'atype` * const restrict,\n+\tconst gfc_array_char * const restrict,\n+\tconst 'atype_name` * const restrict, \n+\tGFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(eoshift3_'atype_kind`_char4);\n+\n+void\n+eoshift3_'atype_kind`_char4 (gfc_array_char * const restrict ret,\n+\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\tconst gfc_array_char * const restrict array, \n+\tconst 'atype` *  const restrict h,\n+\tconst gfc_array_char * const restrict bound,\n+\tconst 'atype_name` * const restrict pwhich,\n+\tGFC_INTEGER_4 array_length,\n+\tGFC_INTEGER_4 bound_length __attribute__((unused)))\n+{\n+  static const gfc_char4_t space = (unsigned char) ''` ''`;\n+  eoshift3 (ret, array, h, bound, pwhich, array_length * sizeof (gfc_char4_t),\n+\t    (const char *) &space, sizeof (gfc_char4_t));\n }\n \n #endif'"}]}