{"sha": "24314386b32b93c759c6722a2c18facae15128ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQzMTQzODZiMzJiOTNjNzU5YzY3MjJhMmMxOGZhY2FlMTUxMjhlYQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-06-24T18:50:00Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-06-24T18:50:00Z"}, "message": "re PR tree-optimization/57742 (memset(malloc(n),0,n) -> calloc(n,1))\n\n2014-06-24  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/57742\ngcc/\n\t* tree-ssa-strlen.c (get_string_length): Ignore malloc.\n\t(handle_builtin_malloc, handle_builtin_memset): New functions.\n\t(strlen_optimize_stmt): Call them.\n\t* passes.def: Move strlen after loop+dom but before vrp.\ngcc/testsuite/\n\t* g++.dg/tree-ssa/calloc.C: New testcase.\n\t* gcc.dg/tree-ssa/calloc-1.c: Likewise.\n\t* gcc.dg/tree-ssa/calloc-2.c: Likewise.\n\t* gcc.dg/strlenopt-9.c: Adapt.\n\nFrom-SVN: r211956", "tree": {"sha": "81ba342aeb4db1f2fe70e25917fc6972499cd2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81ba342aeb4db1f2fe70e25917fc6972499cd2d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24314386b32b93c759c6722a2c18facae15128ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24314386b32b93c759c6722a2c18facae15128ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24314386b32b93c759c6722a2c18facae15128ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24314386b32b93c759c6722a2c18facae15128ea/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84e0f57e35738500e44fd21753e31295d4700bfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e0f57e35738500e44fd21753e31295d4700bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e0f57e35738500e44fd21753e31295d4700bfb"}], "stats": {"total": 213, "additions": 210, "deletions": 3}, "files": [{"sha": "48330ec593af2b135fbb19c7b7903d63204c83da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24314386b32b93c759c6722a2c18facae15128ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24314386b32b93c759c6722a2c18facae15128ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24314386b32b93c759c6722a2c18facae15128ea", "patch": "@@ -1,3 +1,11 @@\n+2014-06-24  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/57742\n+\t* tree-ssa-strlen.c (get_string_length): Ignore malloc.\n+\t(handle_builtin_malloc, handle_builtin_memset): New functions.\n+\t(strlen_optimize_stmt): Call them.\n+\t* passes.def: Move strlen after loop+dom but before vrp.\n+\n 2014-06-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/61570"}, {"sha": "280cf166be3ae216cfbf2864c5ac85c54bcac923", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=24314386b32b93c759c6722a2c18facae15128ea", "patch": "@@ -188,7 +188,6 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_forwprop);\n       NEXT_PASS (pass_phiopt);\n-      NEXT_PASS (pass_strlen);\n       NEXT_PASS (pass_ccp);\n       /* After CCP we rewrite no longer addressed locals into SSA\n \t form if possible.  */\n@@ -251,6 +250,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_reassoc);\n       NEXT_PASS (pass_strength_reduction);\n       NEXT_PASS (pass_dominator);\n+      NEXT_PASS (pass_strlen);\n       NEXT_PASS (pass_vrp);\n       /* The only const/copy propagation opportunities left after\n \t DOM and VRP should be due to degenerate PHI nodes.  So rather than"}, {"sha": "e90b44f535fb65cd23023c4ce774231d78d20e99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24314386b32b93c759c6722a2c18facae15128ea", "patch": "@@ -1,3 +1,11 @@\n+2014-06-24  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/57742\n+\t* g++.dg/tree-ssa/calloc.C: New testcase.\n+\t* gcc.dg/tree-ssa/calloc-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/calloc-2.c: Likewise.\n+\t* gcc.dg/strlenopt-9.c: Adapt.\n+\n 2014-06-24  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* gcc.target/aarch64/aapcs64/abitest-2.h (saved_return_address): New"}, {"sha": "818ca41375a1f743336ae5a3621cf389af8514d5", "filename": "gcc/testsuite/g++.dg/tree-ssa/calloc.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcalloc.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcalloc.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcalloc.C?ref=24314386b32b93c759c6722a2c18facae15128ea", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-optimized\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+inline void* operator new(size_t, void* p) throw() { return p; }\n+\n+typedef void (*handler_t)(void);\n+extern handler_t get_handle();\n+\n+inline void* operator new(size_t sz)\n+{\n+  void *p;\n+\n+  if (sz == 0)\n+    sz = 1;\n+\n+  while ((p = __builtin_malloc (sz)) == 0)\n+    {\n+      handler_t handler = get_handle ();\n+      if (! handler)\n+        throw 42;\n+      handler ();\n+    }\n+  return p;\n+}\n+\n+struct vect {\n+  int *start, *end;\n+  vect(size_t n) {\n+    start = end = 0;\n+    if (n > (size_t)-1 / sizeof(int))\n+      throw 33;\n+    if (n != 0)\n+      start = static_cast<int*> (operator new (n * sizeof(int)));\n+    end = start + n;\n+    int *p = start;\n+    for (size_t l = n; l > 0; --l, ++p)\n+      *p = 0;\n+  }\n+};\n+\n+void f (void *p, int n)\n+{\n+  new (p) vect(n);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"calloc\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"malloc\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"memset\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "2610f6e979a07023511352e31dd555cf841b57bd", "filename": "gcc/testsuite/gcc.dg/strlenopt-9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-9.c?ref=24314386b32b93c759c6722a2c18facae15128ea", "patch": "@@ -18,7 +18,7 @@ fn2 (int r)\n   char *p, q[10];\n   strcpy (q, \"abc\");\n   p = r ? \"a\" : q;\n-  /* String length for p varies, therefore strlen below isn't\n+  /* String length is constant for both alternatives, and strlen is\n      optimized away.  */\n   return strlen (p);\n }\n@@ -98,7 +98,7 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 4 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 3 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 6 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 1 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */"}, {"sha": "cfeee33f831df6fb5c93b7bdd026918ffad62346", "filename": "gcc/testsuite/gcc.dg/tree-ssa/calloc-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcalloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcalloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcalloc-1.c?ref=24314386b32b93c759c6722a2c18facae15128ea", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+extern int a;\n+extern int *b;\n+int n;\n+void* f(long *q)\n+{\n+  int *p = __builtin_malloc (n);\n+  ++*q;\n+  if (p)\n+  {\n+    ++*q;\n+    a = 2;\n+    __builtin_memset (p, 0, n);\n+    *b = 3;\n+  }\n+  return p;\n+}\n+void* g(void)\n+{\n+  float *p = __builtin_calloc (8, 4);\n+  return __builtin_memset (p, 0, 24); // not 32\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"calloc\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"malloc\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"memset\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "10f9d18d60f53a51ff8efb2e108381fa1c38cda3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/calloc-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcalloc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcalloc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcalloc-2.c?ref=24314386b32b93c759c6722a2c18facae15128ea", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int n, nn;\n+void* f()\n+{\n+  char *p = __builtin_calloc (n, 1);\n+  p[42] = '\\n';\n+  __builtin_memset (p, 0, nn);\n+  return p;\n+}\n+\n+void* g(int m1, int m2)\n+{\n+  char *p = __builtin_malloc (m2);\n+  while (--m1)\n+  {\n+    __builtin_memset (p, 0, m2);\n+    p[n] = 'b';\n+  }\n+  return p;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"malloc\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"calloc\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"memset\" 2 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "6d7b852e90c48d9cf580feb94207b5bc0205729f", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24314386b32b93c759c6722a2c18facae15128ea/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=24314386b32b93c759c6722a2c18facae15128ea", "patch": "@@ -483,6 +483,9 @@ get_string_length (strinfo si)\n \t  si->length = fold_build2_loc (loc, MINUS_EXPR, size_type_node,\n \t\t\t\t\tlhs, si->length);\n \t  break;\n+\tcase BUILT_IN_MALLOC:\n+\t  break;\n+\t/* BUILT_IN_CALLOC always has si->length set.  */\n \tdefault:\n \t  gcc_unreachable ();\n \t  break;\n@@ -508,6 +511,7 @@ maybe_invalidate (gimple stmt)\n \tif (!si->dont_invalidate)\n \t  {\n \t    ao_ref r;\n+\t    /* Do not use si->length.  */\n \t    ao_ref_init_from_ptr_and_size (&r, si->ptr, NULL_TREE);\n \t    if (stmt_may_clobber_ref_p_1 (stmt, &r))\n \t      {\n@@ -1595,6 +1599,79 @@ handle_builtin_strcat (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n     fprintf (dump_file, \"not possible.\\n\");\n }\n \n+/* Handle a call to malloc or calloc.  */\n+\n+static void\n+handle_builtin_malloc (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  tree lhs = gimple_call_lhs (stmt);\n+  gcc_assert (get_stridx (lhs) == 0);\n+  int idx = new_stridx (lhs);\n+  tree length = NULL_TREE;\n+  if (bcode == BUILT_IN_CALLOC)\n+    length = build_int_cst (size_type_node, 0);\n+  strinfo si = new_strinfo (lhs, idx, length);\n+  if (bcode == BUILT_IN_CALLOC)\n+    si->endptr = lhs;\n+  set_strinfo (idx, si);\n+  si->writable = true;\n+  si->stmt = stmt;\n+  si->dont_invalidate = true;\n+}\n+\n+/* Handle a call to memset.\n+   After a call to calloc, memset(,0,) is unnecessary.\n+   memset(malloc(n),0,n) is calloc(n,1).  */\n+\n+static bool\n+handle_builtin_memset (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt2 = gsi_stmt (*gsi);\n+  if (!integer_zerop (gimple_call_arg (stmt2, 1)))\n+    return true;\n+  tree ptr = gimple_call_arg (stmt2, 0);\n+  int idx1 = get_stridx (ptr);\n+  if (idx1 <= 0)\n+    return true;\n+  strinfo si1 = get_strinfo (idx1);\n+  if (!si1)\n+    return true;\n+  gimple stmt1 = si1->stmt;\n+  if (!stmt1 || !is_gimple_call (stmt1))\n+    return true;\n+  tree callee1 = gimple_call_fndecl (stmt1);\n+  if (!gimple_call_builtin_p (stmt1, BUILT_IN_NORMAL))\n+    return true;\n+  enum built_in_function code1 = DECL_FUNCTION_CODE (callee1);\n+  tree size = gimple_call_arg (stmt2, 2);\n+  if (code1 == BUILT_IN_CALLOC)\n+    /* Not touching stmt1 */ ;\n+  else if (code1 == BUILT_IN_MALLOC\n+\t   && operand_equal_p (gimple_call_arg (stmt1, 0), size, 0))\n+    {\n+      gimple_stmt_iterator gsi1 = gsi_for_stmt (stmt1);\n+      update_gimple_call (&gsi1, builtin_decl_implicit (BUILT_IN_CALLOC), 2,\n+\t\t\t  size, build_one_cst (size_type_node));\n+    }\n+  else\n+    return true;\n+  tree lhs = gimple_call_lhs (stmt2);\n+  unlink_stmt_vdef (stmt2);\n+  if (lhs)\n+    {\n+      gimple assign = gimple_build_assign (lhs, ptr);\n+      gsi_replace (gsi, assign, false);\n+    }\n+  else\n+    {\n+      gsi_remove (gsi, true);\n+      release_defs (stmt2);\n+    }\n+\n+  return false;\n+}\n+\n /* Handle a POINTER_PLUS_EXPR statement.\n    For p = \"abcd\" + 2; compute associated length, or if\n    p = q + off is pointing to a '\\0' character of a string, call\n@@ -1832,6 +1909,14 @@ strlen_optimize_stmt (gimple_stmt_iterator *gsi)\n \t  case BUILT_IN_STRCAT_CHK:\n \t    handle_builtin_strcat (DECL_FUNCTION_CODE (callee), gsi);\n \t    break;\n+\t  case BUILT_IN_MALLOC:\n+\t  case BUILT_IN_CALLOC:\n+\t    handle_builtin_malloc (DECL_FUNCTION_CODE (callee), gsi);\n+\t    break;\n+\t  case BUILT_IN_MEMSET:\n+\t    if (!handle_builtin_memset (gsi))\n+\t      return false;\n+\t    break;\n \t  default:\n \t    break;\n \t  }"}]}