{"sha": "1c9766da11d71cb57f8962a2eb88833c1ca966f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5NzY2ZGExMWQ3MWNiNTdmODk2MmEyZWI4ODgzM2MxY2E5NjZmNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-04-12T21:25:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-04-12T21:25:55Z"}, "message": "c-decl.c (finish_decl): Make a decl_stmt for a variable-sized TYPE_DECL.\n\n\t* c-decl.c (finish_decl): Make a decl_stmt for a variable-sized\n\tTYPE_DECL.\n\t* c-semantics.c (genrtl_decl_stmt): Handle TYPE_DECL.\n\t* stmt.c (expand_decl): Remove redundant expansion of TYPE_DOMAIN.\n\t* stor-layout.c (variable_size): Don't check for MINUS_EXPR.\n\tUse skip_simple_arithmetic to find SAVE_EXPR.\n\t(force_type_save_exprs, force_type_save_exprs_1): New functions.\n\t* tree-inline.c (remap_type, case POINTER_TYPE, case REFERENCE_TYPE):\n\tProperly chain multiple pointers.\n\t(copy_tree_r): Copy a TYPE_DECL.\n\t* tree.c (variably_modified_type_p): Add some missing tests and\n\tmake some other minor changes.\n\t* tree.h (force_type_save_exprs): New declaration.\n\t* gcc.c-torture/execute/20040411-1.c: New test.\n\nFrom-SVN: r80629", "tree": {"sha": "fc6c6b14412060a9d6d90d3f45c768a4648b7f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc6c6b14412060a9d6d90d3f45c768a4648b7f4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c9766da11d71cb57f8962a2eb88833c1ca966f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9766da11d71cb57f8962a2eb88833c1ca966f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c9766da11d71cb57f8962a2eb88833c1ca966f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9766da11d71cb57f8962a2eb88833c1ca966f5/comments", "author": null, "committer": null, "parents": [{"sha": "040e098a5de9115501bd76ce0ea7adc9a0eded21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040e098a5de9115501bd76ce0ea7adc9a0eded21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040e098a5de9115501bd76ce0ea7adc9a0eded21"}], "stats": {"total": 192, "additions": 160, "deletions": 32}, "files": [{"sha": "72ec5b5eb423baf5b565fce90a0b0ec8d4d6caa3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c9766da11d71cb57f8962a2eb88833c1ca966f5", "patch": "@@ -1,3 +1,19 @@\n+2004-04-12  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* c-decl.c (finish_decl): Make a decl_stmt for a variable-sized\n+\tTYPE_DECL.\n+\t* c-semantics.c (genrtl_decl_stmt): Handle TYPE_DECL.\n+\t* stmt.c (expand_decl): Remove redundant expansion of TYPE_DOMAIN.\n+\t* stor-layout.c (variable_size): Don't check for MINUS_EXPR.\n+\tUse skip_simple_arithmetic to find SAVE_EXPR.\n+\t(force_type_save_exprs, force_type_save_exprs_1): New functions.\n+\t* tree-inline.c (remap_type, case POINTER_TYPE, case REFERENCE_TYPE):\n+\tProperly chain multiple pointers.\n+\t(copy_tree_r): Copy a TYPE_DECL.\n+\t* tree.c (variably_modified_type_p): Add some missing tests and\n+\tmake some other minor changes.\n+\t* tree.h (force_type_save_exprs): New declaration.\n+\n 2004-04-12  Roger Sayle  <roger@eyesopen.com>\n \n \t* simplify-rtx.c (simplify_binary_operation) <UDIV, DIV, UMOD, MOD>:"}, {"sha": "8f1964717dab11d7cc16a8b152338bc014fe3ad9", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1c9766da11d71cb57f8962a2eb88833c1ca966f5", "patch": "@@ -2979,7 +2979,13 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n     mark_referenced (DECL_ASSEMBLER_NAME (decl));\n \n   if (TREE_CODE (decl) == TYPE_DECL)\n-    rest_of_decl_compilation (decl, NULL, DECL_FILE_SCOPE_P (decl), 0);\n+    {\n+      if (!DECL_FILE_SCOPE_P (decl)\n+\t  && variably_modified_type_p (TREE_TYPE (decl)))\n+\tadd_decl_stmt (decl);\n+\n+      rest_of_decl_compilation (decl, NULL, DECL_FILE_SCOPE_P (decl), 0);\n+    }\n \n   /* At the end of a declaration, throw away any variable type sizes\n      of types defined inside that declaration.  There is no use"}, {"sha": "a8693f9b3f1a62609e3d073d8dced35d60a811c1", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=1c9766da11d71cb57f8962a2eb88833c1ca966f5", "patch": "@@ -389,6 +389,8 @@ genrtl_decl_stmt (tree t)\n   else if (TREE_CODE (decl) == LABEL_DECL\n \t   && C_DECLARED_LABEL_FLAG (decl))\n     declare_nonlocal_label (decl);\n+  else if (TREE_CODE (decl) == TYPE_DECL)\n+    force_type_save_exprs (TREE_TYPE (decl));\n   else if (lang_expand_decl_stmt)\n     (*lang_expand_decl_stmt) (t);\n }"}, {"sha": "422fd054491a0114cacca40bfd9319b25fee572f", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=1c9766da11d71cb57f8962a2eb88833c1ca966f5", "patch": "@@ -4013,13 +4013,8 @@ expand_decl (tree decl)\n       do_pending_stack_adjust ();\n       save_stack_pointer ();\n \n-      /* In function-at-a-time mode, variable_size doesn't expand this,\n-\t so do it now.  */\n-      if (TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type))\n-\texpand_expr (TYPE_MAX_VALUE (TYPE_DOMAIN (type)),\n-\t\t     const0_rtx, VOIDmode, 0);\n-\n-      /* Compute the variable's size, in bytes.  */\n+      /* Compute the variable's size, in bytes.  This will expand any\n+\t needed SAVE_EXPRs for the first time.  */\n       size = expand_expr (DECL_SIZE_UNIT (decl), NULL_RTX, VOIDmode, 0);\n       free_temp_slots ();\n "}, {"sha": "d19fc9fdf3fb63a6700f277b8f04969b878e53b4", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 57, "deletions": 6, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=1c9766da11d71cb57f8962a2eb88833c1ca966f5", "patch": "@@ -66,6 +66,7 @@ static void place_union_field (record_layout_info, tree);\n static int excess_unit_span (HOST_WIDE_INT, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t     HOST_WIDE_INT, tree);\n #endif\n+static void force_type_save_exprs_1 (tree);\n static unsigned int update_alignment_for_field (record_layout_info, tree,\n \t\t\t\t\t\tunsigned int);\n extern void debug_rli (record_layout_info);\n@@ -146,12 +147,7 @@ variable_size (tree size)\n       || CONTAINS_PLACEHOLDER_P (size))\n     return size;\n \n-  if (TREE_CODE (size) == MINUS_EXPR && integer_onep (TREE_OPERAND (size, 1)))\n-    /* If this is the upper bound of a C array, leave the minus 1 outside\n-       the SAVE_EXPR so it can be folded away.  */\n-    TREE_OPERAND (size, 0) = save = save_expr (TREE_OPERAND (size, 0));\n-  else\n-    size = save = save_expr (size);\n+  size = save_expr (size);\n \n   /* If an array with a variable number of elements is declared, and\n      the elements require destruction, we will emit a cleanup for the\n@@ -161,6 +157,7 @@ variable_size (tree size)\n      `unsaved', i.e., all SAVE_EXPRs are recalculated.  However, we do\n      not wish to do that here; the array-size is the same in both\n      places.  */\n+  save = skip_simple_arithmetic (size);\n   if (TREE_CODE (save) == SAVE_EXPR)\n     SAVE_EXPR_PERSISTENT_P (save) = 1;\n \n@@ -185,6 +182,60 @@ variable_size (tree size)\n \n   return size;\n }\n+\n+/* Given a type T, force elaboration of any SAVE_EXPRs used in the definition\n+   of that type.  */\n+\n+void\n+force_type_save_exprs (tree t)\n+{\n+  tree field;\n+\n+  switch (TREE_CODE (t))\n+    {\n+    case ERROR_MARK:\n+      return;\n+\n+    case ARRAY_TYPE:\n+    case SET_TYPE:\n+    case VECTOR_TYPE:\n+      /* It's probably overly-conservative to force elaboration of bounds and\n+\t also the sizes, but it's better to be safe than sorry.  */\n+      force_type_save_exprs_1 (TYPE_MIN_VALUE (TYPE_DOMAIN (t)));\n+      force_type_save_exprs_1 (TYPE_MAX_VALUE (TYPE_DOMAIN (t)));\n+      break;\n+\n+    case RECORD_TYPE:\n+    case UNION_TYPE:\n+    case QUAL_UNION_TYPE:\n+      for (field = TYPE_FIELDS (t); field; field = TREE_CHAIN (field))\n+\tif (TREE_CODE (field) == FIELD_DECL)\n+\t  {\n+\t    force_type_save_exprs (TREE_TYPE (field));\n+\t    force_type_save_exprs_1 (DECL_FIELD_OFFSET (field));\n+\t  }\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  force_type_save_exprs_1 (TYPE_SIZE (t));\n+  force_type_save_exprs_1 (TYPE_SIZE_UNIT (t));\n+}\n+\n+/* Utility routine of above, to verify that SIZE has been elaborated and\n+   do so it it is a SAVE_EXPR and has not been.  */\n+\n+static void\n+force_type_save_exprs_1 (tree size)\n+{\n+  if (size\n+      && (size = skip_simple_arithmetic (size))\n+      && TREE_CODE (size) == SAVE_EXPR\n+      && !SAVE_EXPR_RTL (size))\n+    expand_expr (size, NULL_RTX, VOIDmode, 0);\n+}\n \f\n #ifndef MAX_FIXED_MODE_SIZE\n #define MAX_FIXED_MODE_SIZE GET_MODE_BITSIZE (DImode)"}, {"sha": "df7d2e1448d31d042321fc5ea719a3367283f15c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c9766da11d71cb57f8962a2eb88833c1ca966f5", "patch": "@@ -1,3 +1,7 @@\n+2004-04-12  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* gcc.c-torture/execute/20040411-1.c: New test.\n+\n 2004-04-10  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/c90-intprom-1.c, gcc.dg/c99-intprom-1.c: New tests."}, {"sha": "8db456229bd8c39efe71f8b9942cc4480ef48df5", "filename": "gcc/testsuite/gcc.c-torture/execute/20040411-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040411-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040411-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040411-1.c?ref=1c9766da11d71cb57f8962a2eb88833c1ca966f5", "patch": "@@ -0,0 +1,23 @@\n+int\n+sub1 (int i, int j)\n+{\n+  typedef int c[i+2];\n+  int x[10], y[10];\n+\n+  if (j == 2)\n+    {\n+      memcpy (x, y, 10 * sizeof (int));\n+      return sizeof (c);\n+    }\n+  else\n+    return sizeof (c) * 3;\n+}\n+\n+int\n+main ()\n+{\n+  if (sub1 (20, 3) != 66 * sizeof (int))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "622ae18a5487447360ed69c9578a03df1ed19468", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1c9766da11d71cb57f8962a2eb88833c1ca966f5", "patch": "@@ -271,21 +271,22 @@ remap_type (tree type, inline_data *id)\n       t = TYPE_MIN_VALUE (new);\n       if (t && TREE_CODE (t) != INTEGER_CST)\n         walk_tree (&TYPE_MIN_VALUE (new), copy_body_r, id, NULL);\n+\n       t = TYPE_MAX_VALUE (new);\n       if (t && TREE_CODE (t) != INTEGER_CST)\n         walk_tree (&TYPE_MAX_VALUE (new), copy_body_r, id, NULL);\n       return new;\n     \n     case POINTER_TYPE:\n       TREE_TYPE (new) = t = remap_type (TREE_TYPE (new), id);\n-      if (TYPE_MODE (new) == ptr_mode)\n-        TYPE_POINTER_TO (t) = new;\n+      TYPE_NEXT_PTR_TO (new) = TYPE_POINTER_TO (t);\n+      TYPE_POINTER_TO (t) = new;\n       return new;\n \n     case REFERENCE_TYPE:\n       TREE_TYPE (new) = t = remap_type (TREE_TYPE (new), id);\n-      if (TYPE_MODE (new) == ptr_mode)\n-        TYPE_REFERENCE_TO (t) = new;\n+      TYPE_NEXT_REF_TO (new) = TYPE_REFERENCE_TO (t);\n+      TYPE_REFERENCE_TO (t) = new;\n       return new;\n \n     case METHOD_TYPE:\n@@ -2082,6 +2083,7 @@ copy_tree_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n       || TREE_CODE_CLASS (code) == 'c'\n       || code == TREE_LIST\n       || code == TREE_VEC\n+      || code == TYPE_DECL\n       || lang_hooks.tree_inlining.tree_chain_matters_p (*tp))\n     {\n       /* Because the chain gets clobbered when we make a copy, we save it"}, {"sha": "0b301e2bb38f26b03fffd24abebf829b341fdea4", "filename": "gcc/tree.c", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1c9766da11d71cb57f8962a2eb88833c1ca966f5", "patch": "@@ -4629,38 +4629,62 @@ variably_modified_type_p (tree type)\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n     case ARRAY_TYPE:\n-      /* If TYPE is a pointer or reference, it is variably modified if\n-\t the type pointed to is variably modified.  Similarly for arrays;\n-\t note that VLAs are handled by the TYPE_SIZE check above.  */\n-      return variably_modified_type_p (TREE_TYPE (type));\n+    case SET_TYPE:\n+    case VECTOR_TYPE:\n+      if (variably_modified_type_p (TREE_TYPE (type)))\n+\treturn true;\n+      break;\n \n     case FUNCTION_TYPE:\n     case METHOD_TYPE:\n       /* If TYPE is a function type, it is variably modified if any of the\n          parameters or the return type are variably modified.  */\n-      {\n-\ttree parm;\n+      if (variably_modified_type_p (TREE_TYPE (type)))\n+\t  return true;\n \n-\tif (variably_modified_type_p (TREE_TYPE (type)))\n+      for (t = TYPE_ARG_TYPES (type);\n+\t   t && t != void_list_node;\n+\t   t = TREE_CHAIN (t))\n+\tif (variably_modified_type_p (TREE_VALUE (t)))\n \t  return true;\n-\tfor (parm = TYPE_ARG_TYPES (type);\n-\t     parm && parm != void_list_node;\n-\t     parm = TREE_CHAIN (parm))\n-\t  if (variably_modified_type_p (TREE_VALUE (parm)))\n-\t    return true;\n-      }\n       break;\n \n     case INTEGER_TYPE:\n+    case REAL_TYPE:\n+    case ENUMERAL_TYPE:\n+    case BOOLEAN_TYPE:\n+    case CHAR_TYPE:\n       /* Scalar types are variably modified if their end points\n \t aren't constant.  */\n       t = TYPE_MIN_VALUE (type);\n       if (t && t != error_mark_node && TREE_CODE (t) != INTEGER_CST)\n \treturn true;\n+\n       t = TYPE_MAX_VALUE (type);\n       if (t && t != error_mark_node && TREE_CODE (t) != INTEGER_CST)\n \treturn true;\n-      return false;\n+      break;\n+\n+    case RECORD_TYPE:\n+    case UNION_TYPE:\n+    case QUAL_UNION_TYPE:\n+      /* We can't see if any of the field are variably-modified by the\n+\t definition we normally use, since that would produce infinite\n+\t recursion via pointers.  */\n+      /* This is variably modified if some field's type is.  */\n+      for (t = TYPE_FIELDS (type); t; t = TREE_CHAIN (t))\n+\tif (TREE_CODE (t) == FIELD_DECL)\n+\t  {\n+\t    tree t1 = DECL_FIELD_OFFSET (t);\n+\n+\t    if (t1 && t1 != error_mark_node && TREE_CODE (t1) != INTEGER_CST)\n+\t      return true;\n+\n+\t    t1 = DECL_SIZE (t);\n+\t    if (t1 && t1 != error_mark_node && TREE_CODE (t1) != INTEGER_CST)\n+\t      return true;\n+\t  }\n+\tbreak;\n \n     default:\n       break;"}, {"sha": "12dec421f671982ba258d5c049b174f947aadeca", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9766da11d71cb57f8962a2eb88833c1ca966f5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1c9766da11d71cb57f8962a2eb88833c1ca966f5", "patch": "@@ -2768,6 +2768,11 @@ extern tree substitute_placeholder_in_expr (tree, tree);\n \n extern tree variable_size (tree);\n \n+/* Given a type T, force elaboration of any SAVE_EXPRs used in the definition\n+   of that type.  */\n+\n+extern void force_type_save_exprs (tree);\n+\n /* stabilize_reference (EXP) returns a reference equivalent to EXP\n    but it can be used multiple times\n    and only evaluate the subexpressions once.  */"}]}