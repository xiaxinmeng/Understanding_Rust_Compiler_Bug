{"sha": "3d7b83b6718e54c7305b24dd73b44af1c11fc721", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3YjgzYjY3MThlNTRjNzMwNWIyNGRkNzNiNDRhZjFjMTFmYzcyMQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-09-01T22:47:49Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-09-01T22:47:49Z"}, "message": "c-ada-spec.c (dump_ada_function_declaration): Increase buffer size to guarantee it fits the output of the formatted function...\n\n\ngcc/c-family/ChangeLog:\n\n\t* c-ada-spec.c (dump_ada_function_declaration): Increase buffer\n\tsize to guarantee it fits the output of the formatted function\n\tregardless of its arguments.\n\ngcc/cp/ChangeLog:\n\n\t* mangle.c: Increase buffer size to guarantee it fits the output\n\tof the formatted function regardless of its arguments.\n\ngcc/go/ChangeLog:\n\n\t* gofrontend/expressions.cc: Increase buffer size to guarantee\n\tit fits the output of the formatted function regardless of its\n\targuments.\n\ngcc/java/ChangeLog:\n\n\t* decl.c (give_name_to_locals): Increase buffer size to guarantee\n\tit fits the output of the formatted function regardless of its\n\targuments.\n\t* mangle_name.c (append_unicode_mangled_name): Same.\n\ngcc/ChangeLog:\n\n\t* genmatch.c (parser::parse_expr): Increase buffer size to guarantee\n\tit fits the output of the formatted function regardless of its\n\targuments.\n\t* gcc/genmodes.c (parser::parse_expr): Same.\n\t* gimplify.c (gimplify_asm_expr): Same.\n\t* passes.c (pass_manager::register_one_dump_file): Same.\n\t* print-tree.c (print_node): Same.\n\nFrom-SVN: r239949", "tree": {"sha": "cf5a770b54a1fa30fb7b5d7835bb4cf4f1dc71cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf5a770b54a1fa30fb7b5d7835bb4cf4f1dc71cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d7b83b6718e54c7305b24dd73b44af1c11fc721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7b83b6718e54c7305b24dd73b44af1c11fc721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7b83b6718e54c7305b24dd73b44af1c11fc721", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7b83b6718e54c7305b24dd73b44af1c11fc721/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b2475ab3178e98c61314b069cd64fe5ffa8bf45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2475ab3178e98c61314b069cd64fe5ffa8bf45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b2475ab3178e98c61314b069cd64fe5ffa8bf45"}], "stats": {"total": 83, "additions": 67, "deletions": 16}, "files": [{"sha": "854bcc0cbdf8f0f3921fe40e6a7926a1dd7fdaca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -1,3 +1,13 @@\n+2016-09-01 Martin Sebor  <msebor@redhat.com>\n+\n+\t* genmatch.c (parser::parse_expr): Increase buffer size to guarantee\n+\tit fits the output of the formatted function regardless of its\n+\targuments.\n+\t* gcc/genmodes.c (parser::parse_expr): Same.\n+\t* gimplify.c (gimplify_asm_expr): Same.\n+\t* passes.c (pass_manager::register_one_dump_file): Same.\n+\t* print-tree.c (print_node): Same.\n+\n 2016-09-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/altivec.md: Use VSCR_REGNO instead of 110 throughout."}, {"sha": "622a288daac92e8c4a1ac862c3574c84c7e8e8cc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -1,3 +1,9 @@\n+2016-09-01 Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-ada-spec.c (dump_ada_function_declaration): Increase buffer\n+\tsize to guarantee it fits the output of the formatted function\n+\tregardless of its arguments.\n+\n 2016-09-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/7652"}, {"sha": "6a8e04b8d365108cb0b972dcda37eb2b04f3ca66", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -1603,7 +1603,7 @@ dump_ada_function_declaration (pretty_printer *buffer, tree func,\n {\n   tree arg;\n   const tree node = TREE_TYPE (func);\n-  char buf[16];\n+  char buf[17];\n   int num = 0, num_args = 0, have_args = true, have_ellipsis = false;\n \n   /* Compute number of arguments.  */"}, {"sha": "c5738561dc196c9944aa29bd7278c2a36a7ea4f9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -1,3 +1,8 @@\n+2016-09-01 Martin Sebor  <msebor@redhat.com>\n+\n+\t* mangle.c: Increase buffer size to guarantee it fits the output\n+\tof the formatted function regardless of its arguments.\n+\n 2016-09-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/7652"}, {"sha": "bd23260c0883c5cfdc176183f1bb32e8abc0ae53", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -1740,7 +1740,9 @@ static void\n write_real_cst (const tree value)\n {\n   long target_real[4];  /* largest supported float */\n-  char buffer[9];       /* eight hex digits in a 32-bit number */\n+  /* Buffer for eight hex digits in a 32-bit number but big enough\n+     even for 64-bit long to avoid warnings.  */\n+  char buffer[17];\n   int i, limit, dir;\n \n   tree type = TREE_TYPE (value);"}, {"sha": "6195a3b7ed00732f64552c879ce19bfa1308bc7b", "filename": "gcc/genmatch.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -4051,7 +4051,8 @@ parser::parse_expr ()\n   else if (force_capture)\n     {\n       unsigned num = capture_ids->elements ();\n-      char id[8];\n+      /* Big enough for a 32-bit UINT_MAX plus prefix.  */\n+      char id[13];\n       bool existed;\n       sprintf (id, \"__%u\", num);\n       capture_ids->get_or_insert (xstrdup (id), &existed);"}, {"sha": "92ca055f4eb07301ba1c96dc74ca7393cab6ca45", "filename": "gcc/genmodes.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -486,7 +486,8 @@ make_vector_modes (enum mode_class cl, unsigned int width,\n {\n   struct mode_data *m;\n   struct mode_data *v;\n-  char buf[8];\n+  /* Big enough for a 32-bit UINT_MAX plus the text.  */\n+  char buf[12];\n   unsigned int ncomponents;\n   enum mode_class vclass = vector_class (cl);\n "}, {"sha": "21e1c093385c6f1a417ed9c2020752d16a29e529", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -5346,7 +5346,8 @@ gimplify_asm_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t     flexibility, split it into separate input and output\n  \t     operands.  */\n \t  tree input;\n-\t  char buf[10];\n+\t  /* Buffer big enough to format a 32-bit UINT_MAX into.  */\n+\t  char buf[11];\n \n \t  /* Turn the in/out constraint into an output constraint.  */\n \t  char *p = xstrdup (constraint);\n@@ -5356,7 +5357,7 @@ gimplify_asm_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t  /* And add a matching input constraint.  */\n \t  if (allows_reg)\n \t    {\n-\t      sprintf (buf, \"%d\", i);\n+\t      sprintf (buf, \"%u\", i);\n \n \t      /* If there are multiple alternatives in the constraint,\n \t\t handle each of them individually.  Those that allow register"}, {"sha": "4c75010e900f594756fc9f2125f109d9fd083271", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -1,3 +1,9 @@\n+2016-09-01 Martin Sebor  <msebor@redhat.com>\n+\n+\t* gofrontend/expressions.cc: Increase buffer size to guarantee\n+\tit fits the output of the formatted function regardless of its\n+\targuments.\n+\n 2016-08-29  Ian Lance Taylor  <iant@google.com>\n \n \t* lang.opt (fgo-c-header, fgo-compiling-runtime): New options."}, {"sha": "99f9f6694077f45f73f56a798a356e8cdb3a01e0", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -9050,7 +9050,8 @@ Call_expression::do_flatten(Gogo* gogo, Named_object*,\n       Location loc = this->location();\n \n       int i = 0;\n-      char buf[10];\n+      /* Buffer large enough for INT_MAX plus the prefix.  */\n+      char buf[14];\n       for (Typed_identifier_list::const_iterator p = results->begin();\n            p != results->end();\n            ++p, ++i)"}, {"sha": "781fecdefc14fdc7bdfc90513a39fd81b80b4431", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -1,3 +1,10 @@\n+2016-09-01 Martin Sebor  <msebor@redhat.com>\n+\n+\t* decl.c (give_name_to_locals): Increase buffer size to guarantee\n+\tit fits the output of the formatted function regardless of its\n+\targuments.\n+\t* mangle_name.c (append_unicode_mangled_name): Same.\n+\n 2016-08-26  Richard Biener  <rguenther@suse.de>\n \n \tjava/"}, {"sha": "70eac31511373398935b6afbdc4b162f7671f1eb", "filename": "gcc/java/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -1721,7 +1721,8 @@ give_name_to_locals (JCF *jcf)\n \t    DECL_NAME (parm) = get_identifier (\"this\");\n \t  else\n \t    {\n-\t      char buffer[12];\n+\t      /* Buffer large enough for INT_MAX plus prefix.  */\n+\t      char buffer[15];\n \t      sprintf (buffer, \"ARG_%d\", arg_i);\n \t      DECL_NAME (parm) = get_identifier (buffer);\n \t    }"}, {"sha": "7627c5d5df30e558648d47b59a6ebb268e4e25fa", "filename": "gcc/java/mangle_name.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fjava%2Fmangle_name.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fjava%2Fmangle_name.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle_name.c?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -231,7 +231,8 @@ void\n append_gpp_mangled_name (const char *name, int len)\n {\n   int encoded_len, needs_escapes;\n-  char buf[6];\n+  /* Buffer large enough for INT_MIN.  */\n+  char buf[9];\n \n   MANGLE_CXX_KEYWORDS (name, len);\n \n@@ -270,7 +271,8 @@ append_unicode_mangled_name (const char *name, int len)\n       /* Everything else needs encoding */\n       else\n \t{\n-\t  char buf [9];\n+\t  /* Buffer large enough for UINT_MAX plus the prefix.  */\n+\t  char buf [13];\n \t  if (ch == '_' || ch == 'U')\n \t    {\n \t      /* Prepare to recognize __U */"}, {"sha": "07ebf8b4a2fe1ca1f67b008be37df8645a3215ac", "filename": "gcc/passes.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -771,15 +771,17 @@ pass_manager::register_one_dump_file (opt_pass *pass)\n {\n   char *dot_name, *flag_name, *glob_name;\n   const char *name, *full_name, *prefix;\n-  char num[10];\n+\n+  /* Buffer big enough to format a 32-bit UINT_MAX into.  */\n+  char num[11];\n   int flags, id;\n   int optgroup_flags = OPTGROUP_NONE;\n   gcc::dump_manager *dumps = m_ctxt->get_dumps ();\n \n   /* See below in next_pass_1.  */\n   num[0] = '\\0';\n   if (pass->static_pass_number != -1)\n-    sprintf (num, \"%d\", ((int) pass->static_pass_number < 0\n+    sprintf (num, \"%u\", ((int) pass->static_pass_number < 0\n \t\t\t ? 1 : pass->static_pass_number));\n \n   /* The name is both used to identify the pass for the purposes of plugins,"}, {"sha": "e55b6bd6fb6c6151cbdc10ef7972b45b8c794fdf", "filename": "gcc/print-tree.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7b83b6718e54c7305b24dd73b44af1c11fc721/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=3d7b83b6718e54c7305b24dd73b44af1c11fc721", "patch": "@@ -694,8 +694,10 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t  i = 0;\n \t  FOR_EACH_CALL_EXPR_ARG (arg, iter, node)\n \t    {\n-\t      char temp[10];\n-\t      sprintf (temp, \"arg %d\", i);\n+\t      /* Buffer big enough to format a 32-bit UINT_MAX into, plus\n+\t\t the text.  */\n+\t      char temp[15];\n+\t      sprintf (temp, \"arg %u\", i);\n \t      print_node (file, temp, arg, indent + 4);\n \t      i++;\n \t    }\n@@ -706,7 +708,9 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n \t  for (i = 0; i < len; i++)\n \t    {\n-\t      char temp[10];\n+\t      /* Buffer big enough to format a 32-bit UINT_MAX into, plus\n+\t\t the text.  */\n+\t      char temp[15];\n \n \t      sprintf (temp, \"arg %d\", i);\n \t      print_node (file, temp, TREE_OPERAND (node, i), indent + 4);\n@@ -824,7 +828,9 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t  for (i = 0; i < len; i++)\n \t    if (TREE_VEC_ELT (node, i))\n \t      {\n-\t\tchar temp[10];\n+\t      /* Buffer big enough to format a 32-bit UINT_MAX into, plus\n+\t\t the text.  */\n+\t\tchar temp[15];\n \t\tsprintf (temp, \"elt %d\", i);\n \t\tprint_node (file, temp, TREE_VEC_ELT (node, i), indent + 4);\n \t      }"}]}