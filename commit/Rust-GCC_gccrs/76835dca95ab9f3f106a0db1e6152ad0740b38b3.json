{"sha": "76835dca95ab9f3f106a0db1e6152ad0740b38b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY4MzVkY2E5NWFiOWYzZjEwNmEwZGIxZTYxNTJhZDA3NDBiMzhiMw==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zh@live.com", "date": "2020-10-22T00:27:31Z"}, "committer": {"name": "Dennis Zhang", "email": "dennis.zh@live.com", "date": "2020-10-22T00:27:31Z"}, "message": "arm: Auto-vectorization for MVE: vmin/vmax\n\nThis patch enables MVE vmin/vmax instructions for auto-vectorization.\nMVE target is included in expander smin<mode>3, umin<mode>3, smax<mode>3\nand umax<mode>3 for vectorization. Related insns for vmin/vmax in mve.md\nare modified to use smin, umin, smax and umax expressions instead of\nunspec to support the expanders.\n\ngcc/ChangeLog:\n\n2020-10-22  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* config/arm/mve.md (mve_vmaxq_<supf><mode>): Replace with ...\n\t(mve_vmaxq_s<mode>, mve_vmaxq_u<mode>): ... these new insns to\n\tuse smax/umax instead of VMAXQ.\n\t(mve_vminq_<supf><mode>): Replace with ...\n\t(mve_vminq_s<mode>, mve_vminq_u<mode>): ... these new insns to\n\tuse smin/umin instead of VMINQ.\n\t(mve_vmaxnmq_f<mode>): Use smax instead of VMAXNMQ_F.\n\t(mve_vminnmq_f<mode>): Use smin instead of VMINNMQ_F.\n\t* config/arm/vec-common.md (smin<mode>3): Use the new mode macros\n\tARM_HAVE_<MODE>_ARITH.\n\t(umin<mode>3, smax<mode>3, umax<mode>3): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/simd/mve-vminmax_1.c: New test.", "tree": {"sha": "2256c95a661d1cda77d3fc324411095f5d4bb46b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2256c95a661d1cda77d3fc324411095f5d4bb46b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76835dca95ab9f3f106a0db1e6152ad0740b38b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76835dca95ab9f3f106a0db1e6152ad0740b38b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76835dca95ab9f3f106a0db1e6152ad0740b38b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76835dca95ab9f3f106a0db1e6152ad0740b38b3/comments", "author": {"login": "solarock", "id": 109078, "node_id": "MDQ6VXNlcjEwOTA3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/109078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solarock", "html_url": "https://github.com/solarock", "followers_url": "https://api.github.com/users/solarock/followers", "following_url": "https://api.github.com/users/solarock/following{/other_user}", "gists_url": "https://api.github.com/users/solarock/gists{/gist_id}", "starred_url": "https://api.github.com/users/solarock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solarock/subscriptions", "organizations_url": "https://api.github.com/users/solarock/orgs", "repos_url": "https://api.github.com/users/solarock/repos", "events_url": "https://api.github.com/users/solarock/events{/privacy}", "received_events_url": "https://api.github.com/users/solarock/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solarock", "id": 109078, "node_id": "MDQ6VXNlcjEwOTA3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/109078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solarock", "html_url": "https://github.com/solarock", "followers_url": "https://api.github.com/users/solarock/followers", "following_url": "https://api.github.com/users/solarock/following{/other_user}", "gists_url": "https://api.github.com/users/solarock/gists{/gist_id}", "starred_url": "https://api.github.com/users/solarock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solarock/subscriptions", "organizations_url": "https://api.github.com/users/solarock/orgs", "repos_url": "https://api.github.com/users/solarock/repos", "events_url": "https://api.github.com/users/solarock/events{/privacy}", "received_events_url": "https://api.github.com/users/solarock/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "966fdb2e12c0347aa3f9efaf5f4e1cd8237fa024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966fdb2e12c0347aa3f9efaf5f4e1cd8237fa024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966fdb2e12c0347aa3f9efaf5f4e1cd8237fa024"}], "stats": {"total": 155, "additions": 121, "deletions": 34}, "files": [{"sha": "59fa1ad4d5d55a2c8620e15f3bc49367d7b2d16f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76835dca95ab9f3f106a0db1e6152ad0740b38b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76835dca95ab9f3f106a0db1e6152ad0740b38b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76835dca95ab9f3f106a0db1e6152ad0740b38b3", "patch": "@@ -1,3 +1,17 @@\n+2020-10-22  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/arm/mve.md (mve_vmaxq_<supf><mode>): Replace with ...\n+\t(mve_vmaxq_s<mode>, mve_vmaxq_u<mode>): ... these new insns to\n+\tuse smax/umax instead of VMAXQ.\n+\t(mve_vminq_<supf><mode>): Replace with ...\n+\t(mve_vminq_s<mode>, mve_vminq_u<mode>): ... these new insns to\n+\tuse smin/umin instead of VMINQ.\n+\t(mve_vmaxnmq_f<mode>): Use smax instead of VMAXNMQ_F.\n+\t(mve_vminnmq_f<mode>): Use smin instead of VMINNMQ_F.\n+\t* config/arm/vec-common.md (smin<mode>3): Use the new mode macros\n+\tARM_HAVE_<MODE>_ARITH.\n+\t(umin<mode>3, smax<mode>3, umax<mode>3): Likewise.\n+\n 2020-10-22  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* config/arm/mve.md (mve_vmulq<mode>): New entry for vmul instruction"}, {"sha": "47c34b9919b5c5acfc397d3faa62bc92de291829", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76835dca95ab9f3f106a0db1e6152ad0740b38b3/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76835dca95ab9f3f106a0db1e6152ad0740b38b3/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=76835dca95ab9f3f106a0db1e6152ad0740b38b3", "patch": "@@ -1329,15 +1329,25 @@\n ;;\n ;; [vmaxq_u, vmaxq_s])\n ;;\n-(define_insn \"mve_vmaxq_<supf><mode>\"\n+(define_insn \"mve_vmaxq_s<mode>\"\n   [\n    (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n-\t VMAXQ))\n+\t(smax:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmax.%#<V_s_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+(define_insn \"mve_vmaxq_u<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(umax:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vmax.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  \"vmax.%#<V_u_elem>\\t%q0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -1389,15 +1399,25 @@\n ;;\n ;; [vminq_s, vminq_u])\n ;;\n-(define_insn \"mve_vminq_<supf><mode>\"\n+(define_insn \"mve_vminq_s<mode>\"\n   [\n    (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n-\t VMINQ))\n+\t(smin:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vmin.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  \"vmin.%#<V_s_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+(define_insn \"mve_vminq_u<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(umin:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmin.%#<V_u_elem>\\t%q0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -2393,9 +2413,8 @@\n (define_insn \"mve_vmaxnmq_f<mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VMAXNMQ_F))\n+\t(smax:MVE_0 (match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_0 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n   \"vmaxnm.f%#<V_sz_elem>\t%q0, %q1, %q2\"\n@@ -2453,9 +2472,8 @@\n (define_insn \"mve_vminnmq_f<mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VMINNMQ_F))\n+\t(smin:MVE_0 (match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_0 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n   \"vminnm.f%#<V_sz_elem>\t%q0, %q1, %q2\""}, {"sha": "0f117d6b4cace9456334cdd8cd1c71a4ccb4e4ef", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76835dca95ab9f3f106a0db1e6152ad0740b38b3/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76835dca95ab9f3f106a0db1e6152ad0740b38b3/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=76835dca95ab9f3f106a0db1e6152ad0740b38b3", "patch": "@@ -111,39 +111,29 @@\n   [(set (match_operand:VALLW 0 \"s_register_operand\")\n \t(smin:VALLW (match_operand:VALLW 1 \"s_register_operand\")\n \t\t    (match_operand:VALLW 2 \"s_register_operand\")))]\n-  \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n-\t\t    || flag_unsafe_math_optimizations))\n-   || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n-{\n-})\n+   \"ARM_HAVE_<MODE>_ARITH\"\n+)\n \n (define_expand \"umin<mode>3\"\n   [(set (match_operand:VINTW 0 \"s_register_operand\")\n \t(umin:VINTW (match_operand:VINTW 1 \"s_register_operand\")\n \t\t    (match_operand:VINTW 2 \"s_register_operand\")))]\n-  \"TARGET_NEON\n-   || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n-{\n-})\n+   \"ARM_HAVE_<MODE>_ARITH\"\n+)\n \n (define_expand \"smax<mode>3\"\n   [(set (match_operand:VALLW 0 \"s_register_operand\")\n \t(smax:VALLW (match_operand:VALLW 1 \"s_register_operand\")\n \t\t    (match_operand:VALLW 2 \"s_register_operand\")))]\n-  \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n-\t\t    || flag_unsafe_math_optimizations))\n-   || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n-{\n-})\n+   \"ARM_HAVE_<MODE>_ARITH\"\n+)\n \n (define_expand \"umax<mode>3\"\n   [(set (match_operand:VINTW 0 \"s_register_operand\")\n \t(umax:VINTW (match_operand:VINTW 1 \"s_register_operand\")\n \t\t    (match_operand:VINTW 2 \"s_register_operand\")))]\n-  \"TARGET_NEON\n-   || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n-{\n-})\n+   \"ARM_HAVE_<MODE>_ARITH\"\n+)\n \n (define_expand \"vec_perm<mode>\"\n   [(match_operand:VE 0 \"s_register_operand\")"}, {"sha": "304d44c9de6e49fe1106751abd1947ab7680e6b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76835dca95ab9f3f106a0db1e6152ad0740b38b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76835dca95ab9f3f106a0db1e6152ad0740b38b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76835dca95ab9f3f106a0db1e6152ad0740b38b3", "patch": "@@ -1,3 +1,7 @@\n+2020-10-22  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/arm/simd/mve-vminmax_1.c: New test.\n+\n 2020-10-22  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* gcc.target/arm/simd/mve-vmul_1.c: New test."}, {"sha": "6c8e7d42906d0f8416ebc32f4500682d76bd92f3", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vminmax_1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76835dca95ab9f3f106a0db1e6152ad0740b38b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vminmax_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76835dca95ab9f3f106a0db1e6152ad0740b38b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vminmax_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vminmax_1.c?ref=76835dca95ab9f3f106a0db1e6152ad0740b38b3", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile }  */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok }  */\n+/* { dg-options \"-O3\" }  */\n+/* { dg-add-options arm_v8_1m_mve }  */\n+\n+#include <stdint.h>\n+\n+#define MAX(a, b) ((a) > (b)) ? (a) : (b)\n+#define MIN(a, b) ((a) < (b)) ? (a) : (b)\n+\n+\n+#define TEST_BINOP(OP, TY, N)\t\t\\\n+  TY test_##OP##_##TY (TY * dest, TY * a, TY * b)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    int i;\t\t\t\t\t\t\\\n+    for (i=0; i<N; i++)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dest[i] = OP (a[i], b[i]);\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  }\n+\n+/* Test vmax.  */\n+\n+TEST_BINOP (MAX, int32_t, 4)\n+/* { dg-final { scan-assembler-times {vmax\\.s32\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TEST_BINOP (MAX, uint32_t, 4)\n+/* { dg-final { scan-assembler-times {vmax\\.u32\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TEST_BINOP (MAX, int16_t, 8)\n+/* { dg-final { scan-assembler-times {vmax\\.s16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TEST_BINOP (MAX, uint16_t, 8)\n+/* { dg-final { scan-assembler-times {vmax\\.u16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TEST_BINOP (MAX, int8_t, 16)\n+/* { dg-final { scan-assembler-times {vmax\\.s8\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TEST_BINOP (MAX, uint8_t, 16)\n+/* { dg-final { scan-assembler-times {vmax\\.u8\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+/* Test vmin.  */\n+\n+TEST_BINOP (MIN, int32_t, 4)\n+/* { dg-final { scan-assembler-times {vmin\\.s32\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TEST_BINOP (MIN, uint32_t, 4)\n+/* { dg-final { scan-assembler-times {vmin\\.u32\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TEST_BINOP (MIN, int16_t, 8)\n+/* { dg-final { scan-assembler-times {vmin\\.s16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TEST_BINOP (MIN, uint16_t, 8)\n+/* { dg-final { scan-assembler-times {vmin\\.u16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TEST_BINOP (MIN, int8_t, 16)\n+/* { dg-final { scan-assembler-times {vmin\\.s8\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TEST_BINOP (MIN, uint8_t, 16)\n+/* { dg-final { scan-assembler-times {vmin\\.u8\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+"}]}