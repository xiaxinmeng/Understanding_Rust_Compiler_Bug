{"sha": "33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNjNGU0NjYyNDNmMmQwNDU5ZDlhNGQwY2FkYzFiMzhhMzc0MWYzZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-29T13:58:21Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-29T14:00:04Z"}, "message": "Add 'default' to -foffload=; document that flag [PR67300]\n\nAs -foffload={options,targets,targets=options} is very convoluted,\nit has been split into -foffload=targets (supporting the old syntax\nfor backward compatibilty) and -foffload-options={options,target=options}.\n\nOnly the new syntax is documented.\n\nAdditionally, -foffload=default is supported, which can reset the\ndevices after -foffload=disable / -foffload=targets to the default,\nif needed.\n\ngcc/ChangeLog:\n\n\tPR other/67300\n\t* common.opt (-foffload=): Update description.\n\t(-foffload-options=): New.\n\t* doc/invoke.texi (C Language Options): Document\n\t-foffload and -foffload-options.\n\t* gcc.c (check_offload_target_name): New, split off from\n\thandle_foffload_option.\n\t(check_foffload_target_names): New.\n\t(handle_foffload_option): Handle -foffload=default.\n\t(driver_handle_option): Update for -foffload-options.\n\t* lto-opts.c (lto_write_options): Use -foffload-options\n\tinstead of -foffload.\n\t* lto-wrapper.c (merge_and_complain, append_offload_options):\n\tLikewise.\n\t* opts.c (common_handle_option): Likewise.\n\nlibgomp/ChangeLog:\n\n\tPR other/67300\n\t* testsuite/libgomp.c-c++-common/reduction-16.c: Replace\n\t-foffload=nvptx-none= by -foffload-options=nvptx-none= to\n\tavoid disabling other offload targets.\n\t* testsuite/libgomp.c-c++-common/reduction-5.c: Likewise.\n\t* testsuite/libgomp.c-c++-common/reduction-6.c: Likewise.\n\t* testsuite/libgomp.c/target-44.c: Likewise.", "tree": {"sha": "1a57bf8b8455b470e352f1265f01d8bc19999cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a57bf8b8455b470e352f1265f01d8bc19999cc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "489c5dcf7b063000a5e223535eb425cf9748720a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489c5dcf7b063000a5e223535eb425cf9748720a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/489c5dcf7b063000a5e223535eb425cf9748720a"}], "stats": {"total": 195, "additions": 158, "deletions": 37}, "files": [{"sha": "eaee74c580aa29799dd39ebcb04a3e67e727f479", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "patch": "@@ -2100,9 +2100,15 @@ fnon-call-exceptions\n Common Var(flag_non_call_exceptions) Optimization\n Support synchronous non-call exceptions.\n \n+; -foffload=<targets> is documented\n+; -foffload=<targets>=<options> is supported for backward compatibility\n foffload=\n-Common Driver Joined MissingArgError(options or targets missing after %qs)\n--foffload=<targets>=<options>\tSpecify offloading targets and options for them.\n+Driver Joined MissingArgError(targets missing after %qs)\n+-foffload=<targets>\tSpecify offloading targets\n+\n+foffload-options=\n+Common Driver Joined MissingArgError(options or targets=options missing after %qs)\n+-foffload=<targets>=<options>\tSpecify options for the offloading targets\n \n foffload-abi=\n Common Joined RejectNegative Enum(offload_abi) Var(flag_offload_abi) Init(OFFLOAD_ABI_UNSET)"}, {"sha": "a9fd5fdc104ce5261510e574497502a220ff0e91", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "patch": "@@ -202,6 +202,7 @@ in the following sections.\n -fno-builtin  -fno-builtin-@var{function}  -fcond-mismatch @gol\n -ffreestanding  -fgimple  -fgnu-tm  -fgnu89-inline  -fhosted @gol\n -flax-vector-conversions  -fms-extensions @gol\n+-foffload=@var{arg}  -foffload-options=@var{arg} @gol\n -fopenacc  -fopenacc-dim=@var{geom} @gol\n -fopenmp  -fopenmp-simd @gol\n -fpermitted-flt-eval-methods=@var{standard} @gol\n@@ -2627,6 +2628,46 @@ fields within structs/unions}, for details.\n Note that this option is off for all targets except for x86\n targets using ms-abi.\n \n+@item -foffload=disable\n+@itemx -foffload=default\n+@itemx -foffload=@var{target-list}\n+@opindex foffload\n+@cindex Offloading targets\n+@cindex OpenACC offloading targets\n+@cindex OpenMP offloading targets\n+Specify for which OpenMP and OpenACC offload targets code should be generated.\n+The default behavior, equivalent to @option{-foffload=default}, is to generate\n+code for all supported offload targets.  The @option{-foffload=disable} form\n+generates code only for the host fallback, while\n+@option{-foffload=@var{target-list}} generates code only for the specified\n+comma-separated list of offload targets.\n+\n+Offload targets are specified in GCC's internal target-triplet format. You can\n+run the compiler with @option{-v} to show the list of configured offload targets\n+under @code{OFFLOAD_TARGET_NAMES}.\n+\n+@item -foffload-options=@var{options}\n+@itemx -foffload-options=@var{target-triplet-list}=@var{options}\n+@opindex foffload\n+@cindex Offloading options\n+@cindex OpenACC offloading options\n+@cindex OpenMP offloading options\n+\n+With @option{-foffload-options=@var{options}}, GCC passes the specified\n+@var{options} to the compilers for all enabled offloading targets.  You can\n+specify options that apply only to a specific target or targets by using\n+the @option{-foffload-options=@var{target-list}=@var{options}} form.  The\n+@var{target-list} is a comma-separated list in the same format as for the\n+@option{-foffload=} option.\n+\n+Typical command lines are\n+\n+@smallexample\n+-foffload-options=-lgfortran -foffload-options=-lm\n+-foffload-options=\"-lgfortran -lm\" -foffload-options=nvptx-none=-latomic\n+-foffload-options=amdgcn-amdhsa=-march=gfx906 -foffload-options=-lm\n+@end smallexample\n+\n @item -fopenacc\n @opindex fopenacc\n @cindex OpenACC accelerator programming"}, {"sha": "df9b2192873fb613c2a17ce64c4ac072f9de273b", "filename": "gcc/gcc.c", "status": "modified", "additions": 99, "deletions": 22, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "patch": "@@ -3977,6 +3977,84 @@ driver_wrong_lang_callback (const struct cl_decoded_option *decoded,\n static const char *spec_lang = 0;\n static int last_language_n_infiles;\n \n+\n+/* Check that GCC is configured to support the offload target.  */\n+\n+static bool\n+check_offload_target_name (const char *target, ptrdiff_t len)\n+{\n+  const char *n, *c = OFFLOAD_TARGETS;\n+  while (c)\n+    {\n+      n = strchr (c, ',');\n+      if (n == NULL)\n+\tn = strchr (c, '\\0');\n+      if (len == n - c && strncmp (target, c, n - c) == 0)\n+\tbreak;\n+      c = *n ? n + 1 : NULL;\n+    }\n+  if (!c)\n+    {\n+      char *s;\n+      auto_vec<const char*> candidates;\n+      char *cand = (char *) alloca (strlen (OFFLOAD_TARGETS) + 1);\n+      c = OFFLOAD_TARGETS;\n+      while (c)\n+\t{\n+\t  n = strchr (c, ',');\n+\t  if (n == NULL)\n+\t    n = strchr (c, '\\0');\n+\t  strncpy (cand, c, n - c);\n+\t  cand[n - c] = '\\0';\n+\t  candidates.safe_push (cand);\n+\t  c = *n ? n + 1 : NULL;\n+\t}\n+      error (\"GCC is not configured to support %q.*s as offload target\",\n+\t     len, target);\n+      const char *hint = candidates_list_and_hint (target, s, candidates);\n+      if (hint)\n+\tinform (UNKNOWN_LOCATION,\n+\t\t\"valid offload targets are: %s; did you mean %qs?\", s, hint);\n+      else\n+\tinform (UNKNOWN_LOCATION, \"valid offload targets are: %s\", s);\n+      XDELETEVEC (s);\n+      return false;\n+    }\n+  return true;\n+}\n+\n+/* Sanity check for -foffload-options.  */\n+\n+static void\n+check_foffload_target_names (const char *arg)\n+{\n+  const char *cur, *next, *end;\n+  /* If option argument starts with '-' then no target is specified and we\n+     do not need to parse it.  */\n+  if (arg[0] == '-')\n+    return;\n+  end = strchr (arg, '=');\n+  if (end == NULL)\n+    {\n+      error (\"%<=%>options missing after %<-foffload-options=%>target\");\n+      return;\n+    }\n+\n+  cur = arg;\n+  while (cur < end)\n+    {\n+      next = strchr (cur, ',');\n+      if (next == NULL)\n+\tnext = end;\n+      next = (next > end) ? end : next;\n+\n+      /* Retain non-supported targets after printing an error as those will not\n+\t be processed; each enabled target only processes its triplet.  */\n+      check_offload_target_name (cur, next - cur);\n+      cur = next + 1;\n+   }\n+}\n+\n /* Parse -foffload option argument.  */\n \n static void\n@@ -4006,34 +4084,25 @@ handle_foffload_option (const char *arg)\n       memcpy (target, cur, next - cur);\n       target[next - cur] = '\\0';\n \n-      /* If 'disable' is passed to the option, stop parsing the option and clean\n-         the list of offload targets.  */\n-      if (strcmp (target, \"disable\") == 0)\n+      /* Reset offloading list and continue.  */\n+      if (strcmp (target, \"default\") == 0)\n \t{\n \t  free (offload_targets);\n-\t  offload_targets = xstrdup (\"\");\n-\t  break;\n+\t  offload_targets = NULL;\n+\t  goto next_item;\n \t}\n \n-      /* Check that GCC is configured to support the offload target.  */\n-      c = OFFLOAD_TARGETS;\n-      while (c)\n+      /* If 'disable' is passed to the option, clean the list of\n+\t offload targets and return, even if more targets follow.\n+\t Likewise if GCC is not configured to support that offload target.  */\n+      if (strcmp (target, \"disable\") == 0\n+\t  || !check_offload_target_name (target, next - cur))\n \t{\n-\t  n = strchr (c, ',');\n-\t  if (n == NULL)\n-\t    n = strchr (c, '\\0');\n-\n-\t  if (next - cur == n - c && strncmp (target, c, n - c) == 0)\n-\t    break;\n-\n-\t  c = *n ? n + 1 : NULL;\n+\t  free (offload_targets);\n+\t  offload_targets = xstrdup (\"\");\n+\t  return;\n \t}\n \n-      if (!c)\n-\tfatal_error (input_location,\n-\t\t     \"GCC is not configured to support %s as offload target\",\n-\t\t     target);\n-\n       if (!offload_targets)\n \t{\n \t  offload_targets = target;\n@@ -4067,7 +4136,7 @@ handle_foffload_option (const char *arg)\n \t      memcpy (offload_targets + offload_targets_len, target, next - cur + 1);\n \t    }\n \t}\n-\n+next_item:\n       cur = next + 1;\n       XDELETEVEC (target);\n     }\n@@ -4499,8 +4568,16 @@ driver_handle_option (struct gcc_options *opts,\n       flag_wpa = \"\";\n       break;\n \n+    case OPT_foffload_options_:\n+      check_foffload_target_names (arg);\n+      break;\n+\n     case OPT_foffload_:\n       handle_foffload_option (arg);\n+      if (arg[0] == '-' || NULL != strchr (arg, '='))\n+\tsave_switch (concat (\"-foffload-options=\", arg, NULL),\n+\t\t     0, NULL, validated, true);\n+      do_save = false;\n       break;\n \n     default:"}, {"sha": "9496b3c8e0b165713dff04167828db94b092c8c2", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "patch": "@@ -174,7 +174,8 @@ lto_write_options (void)\n \t We do not need those.  The only exception is -foffload option, if we\n \t write it in offload_lto section.  Also drop all diagnostic options.  */\n       if ((cl_options[option->opt_index].flags & (CL_DRIVER|CL_WARNING))\n-\t  && (!lto_stream_offload_p || option->opt_index != OPT_foffload_))\n+\t  && (!lto_stream_offload_p\n+\t      || option->opt_index != OPT_foffload_options_))\n \tcontinue;\n \n       for (j = 0; j < option->canonical_option_num_elements; ++j)"}, {"sha": "aae48aff10027200c056d6192f5f7dfd961e7f11", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "patch": "@@ -453,7 +453,7 @@ merge_and_complain (vec<cl_decoded_option> decoded_options,\n \t  break;\n \n \n-\tcase OPT_foffload_:\n+\tcase OPT_foffload_options_:\n \t  decoded_options.safe_push (*foption);\n \t  break;\n \n@@ -833,7 +833,7 @@ append_offload_options (obstack *argv_obstack, const char *target,\n       unsigned argc;\n       cl_decoded_option *option = &options[i];\n \n-      if (option->opt_index != OPT_foffload_)\n+      if (option->opt_index != OPT_foffload_options_)\n \tcontinue;\n \n       /* If option argument starts with '-' then no target is specified.  That\n@@ -844,11 +844,7 @@ append_offload_options (obstack *argv_obstack, const char *target,\n       else\n \t{\n \t  opts = strchr (option->arg, '=');\n-\t  /* If there are offload targets specified, but no actual options,\n-\t     there is nothing to do here.  */\n-\t  if (!opts)\n-\t    continue;\n-\n+\t  gcc_assert (opts);\n \t  cur = option->arg;\n \n \t  while (cur < opts)"}, {"sha": "f159bb35130bbdee841a270b1c268ea443d6452a", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "patch": "@@ -2724,7 +2724,7 @@ common_handle_option (struct gcc_options *opts,\n       /* Deferred.  */\n       break;\n \n-    case OPT_foffload_:\n+    case OPT_foffload_options_:\n       /* Deferred.  */\n       break;\n "}, {"sha": "4bf62c3828f3f52ab7fe01f213196b2a1d5a8d45", "filename": "libgomp/testsuite/libgomp.c-c++-common/reduction-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-16.c?ref=33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-additional-options \"-foffload=nvptx-none=-latomic\" { target offload_target_nvptx } } */\n+/* { dg-additional-options \"-foffload-options=nvptx-none=-latomic\" { target offload_target_nvptx } } */\n \n #include <stdlib.h>\n "}, {"sha": "52f23e35b9a96f6c1f723e7fdbea35032a211c65", "filename": "libgomp/testsuite/libgomp.c-c++-common/reduction-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-5.c?ref=33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-additional-options \"-foffload=nvptx-none=-latomic\" { target { offload_target_nvptx } } } */\n+/* { dg-additional-options \"-foffload-options=nvptx-none=-latomic\" { target { offload_target_nvptx } } } */\n /* C / C++'s logical AND and OR operators take any scalar argument\n    which compares (un)equal to 0 - the result 1 or 0 and of type int.\n "}, {"sha": "62e81506bddaa1fcf1f588ffff48c0443a5fd5e2", "filename": "libgomp/testsuite/libgomp.c-c++-common/reduction-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-6.c?ref=33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-additional-options \"-foffload=nvptx-none=-latomic\" { target { offload_target_nvptx } } } */\n+/* { dg-additional-options \"-foffload-options=nvptx-none=-latomic\" { target { offload_target_nvptx } } } */\n /* C / C++'s logical AND and OR operators take any scalar argument\n    which compares (un)equal to 0 - the result 1 or 0 and of type int.\n "}, {"sha": "a5da81d7e2373d3f91e274202b430c079a2e89c1", "filename": "libgomp/testsuite/libgomp.c/target-44.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c4e466243f2d0459d9a4d0cadc1b38a3741f3e/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-44.c?ref=33c4e466243f2d0459d9a4d0cadc1b38a3741f3e", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-additional-options \"-foffload=nvptx-none=-latomic\" { target { offload_target_nvptx } } } */\n+/* { dg-additional-options \"-foffload-options=nvptx-none=-latomic\" { target { offload_target_nvptx } } } */\n \n #include <stdlib.h>\n "}]}