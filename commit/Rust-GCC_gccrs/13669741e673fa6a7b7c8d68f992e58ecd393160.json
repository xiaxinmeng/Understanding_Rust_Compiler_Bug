{"sha": "13669741e673fa6a7b7c8d68f992e58ecd393160", "node_id": "C_kwDOANBUbNoAKDEzNjY5NzQxZTY3M2ZhNmE3YjdjOGQ2OGY5OTJlNThlY2QzOTMxNjA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-04-15T02:40:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-04-15T16:35:15Z"}, "message": "c++: constexpr aggregate destruction [PR109357]\n\nWe were assuming that the result of evaluation of TARGET_EXPR_INITIAL would\nalways be the new value of the temporary, but that's not necessarily true\nwhen the initializer is complex (i.e. target_expr_needs_replace).  In that\ncase evaluating the initializer initializes the temporary as a side-effect.\n\n\tPR c++/109357\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_constant_expression) [TARGET_EXPR]:\n\tCheck for complex initializer.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/constexpr-dtor15.C: New test.", "tree": {"sha": "f190676b790120b2bb39791625db4b245e47b6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f190676b790120b2bb39791625db4b245e47b6bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13669741e673fa6a7b7c8d68f992e58ecd393160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13669741e673fa6a7b7c8d68f992e58ecd393160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13669741e673fa6a7b7c8d68f992e58ecd393160", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13669741e673fa6a7b7c8d68f992e58ecd393160/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0ee9d14165eebb3d31c84e98260c05c3b33acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0ee9d14165eebb3d31c84e98260c05c3b33acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de0ee9d14165eebb3d31c84e98260c05c3b33acb"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "d1097764b109f38f3d27906b8c987397bddfd7a1", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13669741e673fa6a7b7c8d68f992e58ecd393160/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13669741e673fa6a7b7c8d68f992e58ecd393160/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=13669741e673fa6a7b7c8d68f992e58ecd393160", "patch": "@@ -7230,16 +7230,23 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t  non_constant_p, overflow_p);\n \tif (*non_constant_p)\n \t  break;\n-\t/* Adjust the type of the result to the type of the temporary.  */\n-\tr = adjust_temp_type (type, r);\n+\t/* If the initializer is complex, evaluate it to initialize slot.  */\n+\tbool is_complex = target_expr_needs_replace (t);\n+\tif (!is_complex)\n+\t  {\n+\t    r = unshare_constructor (r);\n+\t    /* Adjust the type of the result to the type of the temporary.  */\n+\t    r = adjust_temp_type (type, r);\n+\t    ctx->global->put_value (slot, r);\n+\t  }\n \tif (TARGET_EXPR_CLEANUP (t) && !CLEANUP_EH_ONLY (t))\n \t  ctx->global->cleanups->safe_push (TARGET_EXPR_CLEANUP (t));\n-\tr = unshare_constructor (r);\n-\tctx->global->put_value (slot, r);\n \tif (ctx->save_exprs)\n \t  ctx->save_exprs->safe_push (slot);\n \tif (lval)\n \t  return slot;\n+\tif (is_complex)\n+\t  r = ctx->global->get_value (slot);\n       }\n       break;\n "}, {"sha": "d34c27eee45e7848e90c9c61821525ce4cb463a4", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor15.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13669741e673fa6a7b7c8d68f992e58ecd393160/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13669741e673fa6a7b7c8d68f992e58ecd393160/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor15.C?ref=13669741e673fa6a7b7c8d68f992e58ecd393160", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/109357\n+// { dg-do compile { target c++20 } }\n+// { dg-prune-output \"used but never defined\" }\n+\n+struct basic_string {\n+  char _M_local_buf;\n+  basic_string();\n+  constexpr basic_string(const char *) {}\n+  constexpr ~basic_string();\n+  constexpr basic_string& operator=(basic_string);\n+};\n+struct S1 {\n+  basic_string x;\n+  basic_string y;\n+} s1;\n+struct s2 {\n+  ~s2();\n+};\n+s2::~s2() { s1 = {\"\", \"\"}; }"}]}