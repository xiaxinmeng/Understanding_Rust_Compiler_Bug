{"sha": "742f25b311bbf5cc4f25a975f53413a85410292a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyZjI1YjMxMWJiZjVjYzRmMjVhOTc1ZjUzNDEzYTg1NDEwMjkyYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-03-01T09:57:45Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-03-01T09:57:45Z"}, "message": "re PR c++/20232 (ICE with covariancy)\n\ncp:\n\tPR c++/20232\n\t* class.c (update_vtable_entry_for_fn): Don't crash on invalid\n\tcovariancy.\n\n\t* cp-tree.g (THUNK_TARGET): Expand comment.\n\t* method.c (use_thunk): Make sure we also use the target, if that\n\tis a thunk.\ntestsuite:\n\tPR c++/20232\n\t* g++.dg/inherit/covariant12.C: New.\n\nFrom-SVN: r95733", "tree": {"sha": "330aeb456e9bc16d26dfa8ee60bf99d4795606d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/330aeb456e9bc16d26dfa8ee60bf99d4795606d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/742f25b311bbf5cc4f25a975f53413a85410292a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742f25b311bbf5cc4f25a975f53413a85410292a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742f25b311bbf5cc4f25a975f53413a85410292a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742f25b311bbf5cc4f25a975f53413a85410292a/comments", "author": null, "committer": null, "parents": [{"sha": "c363985db8d82f3c097689203d7d805716b6d950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c363985db8d82f3c097689203d7d805716b6d950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c363985db8d82f3c097689203d7d805716b6d950"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "51cc4f1bffe42b2cc14b829f0dcc370b33707a13", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=742f25b311bbf5cc4f25a975f53413a85410292a", "patch": "@@ -1,3 +1,13 @@\n+2005-03-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/20232\n+\t* class.c (update_vtable_entry_for_fn): Don't crash on invalid\n+\tcovariancy. \n+\n+\t* cp-tree.g (THUNK_TARGET): Expand comment.\n+\t* method.c (use_thunk): Make sure we also use the target, if that\n+\tis a thunk.\n+\n 2005-02-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/20206"}, {"sha": "ba89ea146ed47eb854a243f230f4e1298a3f4295", "filename": "gcc/cp/class.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=742f25b311bbf5cc4f25a975f53413a85410292a", "patch": "@@ -2048,22 +2048,26 @@ update_vtable_entry_for_fn (tree t, tree binfo, tree fn, tree* virtuals,\n \t  tree thunk_binfo, base_binfo;\n \n \t  /* Find the base binfo within the overriding function's\n-\t     return type.  */\n+\t     return type.  We will always find a thunk_binfo, except\n+\t     when the covariancy is invalid (which we will have\n+\t     already diagnosed).  */\n \t  for (base_binfo = TYPE_BINFO (base_return),\n \t       thunk_binfo = TYPE_BINFO (over_return);\n-\t       !SAME_BINFO_TYPE_P (BINFO_TYPE (thunk_binfo),\n-\t\t\t\t   BINFO_TYPE (base_binfo));\n+\t       thunk_binfo;\n \t       thunk_binfo = TREE_CHAIN (thunk_binfo))\n-\t    continue;\n-\n+\t    if (SAME_BINFO_TYPE_P (BINFO_TYPE (thunk_binfo),\n+\t\t\t\t   BINFO_TYPE (base_binfo)))\n+\t      break;\n+\t  \n \t  /* See if virtual inheritance is involved.  */\n \t  for (virtual_offset = thunk_binfo;\n \t       virtual_offset;\n \t       virtual_offset = BINFO_INHERITANCE_CHAIN (virtual_offset))\n \t    if (BINFO_VIRTUAL_P (virtual_offset))\n \t      break;\n \t  \n-\t  if (virtual_offset || !BINFO_OFFSET_ZEROP (thunk_binfo))\n+\t  if (virtual_offset\n+\t      || (thunk_binfo && !BINFO_OFFSET_ZEROP (thunk_binfo)))\n \t    {\n \t      tree offset = convert (ssizetype, BINFO_OFFSET (thunk_binfo));\n "}, {"sha": "d7144242d6d91a3183e60aab0b6aa30e1ddfa4fa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=742f25b311bbf5cc4f25a975f53413a85410292a", "patch": "@@ -2913,7 +2913,8 @@ struct lang_decl GTY(())\n #define THUNK_ALIAS(DECL) \\\n   (DECL_LANG_SPECIFIC (FUNCTION_DECL_CHECK (DECL))->decl_flags.u.template_info)\n \n-/* For thunk NODE, this is the FUNCTION_DECL thunked to.  */\n+/* For thunk NODE, this is the FUNCTION_DECL thunked to.  It is\n+   possible for the target to be a thunk too.  */\n #define THUNK_TARGET(NODE)\t\t\t\t\\\n   (DECL_LANG_SPECIFIC (NODE)->u.f.befriending_classes)\n "}, {"sha": "7a99c26247109add571e424136a3feb7b7302fbc", "filename": "gcc/cp/method.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=742f25b311bbf5cc4f25a975f53413a85410292a", "patch": "@@ -328,6 +328,10 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n        There's no need to process this thunk again.  */\n     return;\n \n+  if (DECL_THUNK_P (function))\n+    /* The target is itself a thunk, process it now.  */\n+    use_thunk (function, emit_p);\n+  \n   /* Thunks are always addressable; they only appear in vtables.  */\n   TREE_ADDRESSABLE (thunk_fndecl) = 1;\n "}, {"sha": "5e3ceaa2078c78f08cba298d180367fee1d793db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=742f25b311bbf5cc4f25a975f53413a85410292a", "patch": "@@ -1,3 +1,8 @@\n+2005-03-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/20232\n+\t* g++.dg/inherit/covariant12.C: New.\n+\n 2005-02-28  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/19479"}, {"sha": "434082abb0daf546d539059587fe9db98e64e201", "filename": "gcc/testsuite/g++.dg/inherit/covariant12.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742f25b311bbf5cc4f25a975f53413a85410292a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant12.C?ref=742f25b311bbf5cc4f25a975f53413a85410292a", "patch": "@@ -0,0 +1,18 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 27 Feb 2005<nathan@codesourcery.com>\n+\n+// PR 20232: ICE on invalid\n+\n+struct T { };\n+\n+struct S;\n+\n+struct B\n+{\n+  virtual T *Foo (); // { dg-error \"overriding\" \"\" }\n+};\n+\n+struct D : B\n+{\n+  virtual S *Foo (); // { dg-error \"invalid covariant\" \"\" }\n+};"}]}