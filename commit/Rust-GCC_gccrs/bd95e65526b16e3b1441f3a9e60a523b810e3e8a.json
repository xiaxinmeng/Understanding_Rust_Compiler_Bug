{"sha": "bd95e65526b16e3b1441f3a9e60a523b810e3e8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5NWU2NTUyNmIxNmUzYjE0NDFmM2E5ZTYwYTUyM2I4MTBlM2U4YQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-02-04T13:47:13Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-02-04T13:47:13Z"}, "message": "[AArch64] Rid the world of NAMED_PARAM \n\ngcc/\n\n\t* config/aarch64/aarch64.c (NAMED_PARAM): Delete it.\n\t(generic_addrcost_table): Remove NAMED_PARAM.\n\t(cortexa57_addrcost_table): Likewise.\n\t(xgene1_addrcost_table): Likewise.\n\t(generic_regmove_table): Likewise.\n\t(cortexa53_regmove_table): Likewise.\n\t(xgene1_regmove_table): Likewise.\n\t(generic_vector_table): Likewise.\n\t(cortexa57_vector_table): Likewise.\n\t(xgene1_vector_table): Likewise.\n\t(generic_tunings): Likewise.\n\t(cortexa53_tunings): Likewise.\n\t(cortexa57_tunings): Likewise.\n\t(xgene1_tunings): Likewise.\n\nFrom-SVN: r220401", "tree": {"sha": "51eead7dc77b599aeaf5c5c204b7ec317cf49fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51eead7dc77b599aeaf5c5c204b7ec317cf49fc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd95e65526b16e3b1441f3a9e60a523b810e3e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd95e65526b16e3b1441f3a9e60a523b810e3e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd95e65526b16e3b1441f3a9e60a523b810e3e8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd95e65526b16e3b1441f3a9e60a523b810e3e8a/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20693e972aeede9d6d337982074f20593a6495bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20693e972aeede9d6d337982074f20593a6495bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20693e972aeede9d6d337982074f20593a6495bb"}], "stats": {"total": 259, "additions": 117, "deletions": 142}, "files": [{"sha": "116e20f5e5ff062472fa7261f1e4ac5789b14723", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95e65526b16e3b1441f3a9e60a523b810e3e8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95e65526b16e3b1441f3a9e60a523b810e3e8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd95e65526b16e3b1441f3a9e60a523b810e3e8a", "patch": "@@ -1,3 +1,20 @@\n+2015-02-04  James Greenhalgh <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64.c (NAMED_PARAM): Delete it.\n+\t(generic_addrcost_table): Remove NAMED_PARAM.\n+\t(cortexa57_addrcost_table): Likewise.\n+\t(xgene1_addrcost_table): Likewise.\n+\t(generic_regmove_table): Likewise.\n+\t(cortexa53_regmove_table): Likewise.\n+\t(xgene1_regmove_table): Likewise.\n+\t(generic_vector_table): Likewise.\n+\t(cortexa57_vector_table): Likewise.\n+\t(xgene1_vector_table): Likewise.\n+\t(generic_tunings): Likewise.\n+\t(cortexa53_tunings): Likewise.\n+\t(cortexa57_tunings): Likewise.\n+\t(xgene1_tunings): Likewise.\n+\n 2015-02-04  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/arm/arm-cores.def: Add cortex-a72 and"}, {"sha": "f082e05bee901b48351ce34d533adf082e95012c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 100, "deletions": 142, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95e65526b16e3b1441f3a9e60a523b810e3e8a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95e65526b16e3b1441f3a9e60a523b810e3e8a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=bd95e65526b16e3b1441f3a9e60a523b810e3e8a", "patch": "@@ -188,188 +188,148 @@ unsigned long aarch64_tune_flags = 0;\n \n /* Tuning parameters.  */\n \n-#if HAVE_DESIGNATED_INITIALIZERS\n-#define NAMED_PARAM(NAME, VAL) .NAME = (VAL)\n-#else\n-#define NAMED_PARAM(NAME, VAL) (VAL)\n-#endif\n-\n-#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n-__extension__\n-#endif\n-\n-#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n-__extension__\n-#endif\n static const struct cpu_addrcost_table generic_addrcost_table =\n {\n-#if HAVE_DESIGNATED_INITIALIZERS\n-  .addr_scale_costs =\n-#endif\n     {\n-      NAMED_PARAM (hi, 0),\n-      NAMED_PARAM (si, 0),\n-      NAMED_PARAM (di, 0),\n-      NAMED_PARAM (ti, 0),\n+      0, /* hi  */\n+      0, /* si  */\n+      0, /* di  */\n+      0, /* ti  */\n     },\n-  NAMED_PARAM (pre_modify, 0),\n-  NAMED_PARAM (post_modify, 0),\n-  NAMED_PARAM (register_offset, 0),\n-  NAMED_PARAM (register_extend, 0),\n-  NAMED_PARAM (imm_offset, 0)\n+  0, /* pre_modify  */\n+  0, /* post_modify  */\n+  0, /* register_offset  */\n+  0, /* register_extend  */\n+  0 /* imm_offset  */\n };\n \n-#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n-__extension__\n-#endif\n static const struct cpu_addrcost_table cortexa57_addrcost_table =\n {\n-#if HAVE_DESIGNATED_INITIALIZERS\n-  .addr_scale_costs =\n-#endif\n     {\n-      NAMED_PARAM (hi, 1),\n-      NAMED_PARAM (si, 0),\n-      NAMED_PARAM (di, 0),\n-      NAMED_PARAM (ti, 1),\n+      1, /* hi  */\n+      0, /* si  */\n+      0, /* di  */\n+      1, /* ti  */\n     },\n-  NAMED_PARAM (pre_modify, 0),\n-  NAMED_PARAM (post_modify, 0),\n-  NAMED_PARAM (register_offset, 0),\n-  NAMED_PARAM (register_extend, 0),\n-  NAMED_PARAM (imm_offset, 0),\n+  0, /* pre_modify  */\n+  0, /* post_modify  */\n+  0, /* register_offset  */\n+  0, /* register_extend  */\n+  0, /* imm_offset  */\n };\n \n-#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n-__extension__\n-#endif\n static const struct cpu_addrcost_table xgene1_addrcost_table =\n {\n-#if HAVE_DESIGNATED_INITIALIZERS\n-  .addr_scale_costs =\n-#endif\n     {\n-      NAMED_PARAM (hi, 1),\n-      NAMED_PARAM (si, 0),\n-      NAMED_PARAM (di, 0),\n-      NAMED_PARAM (ti, 1),\n+      1, /* hi  */\n+      0, /* si  */\n+      0, /* di  */\n+      1, /* ti  */\n     },\n-  NAMED_PARAM (pre_modify, 1),\n-  NAMED_PARAM (post_modify, 0),\n-  NAMED_PARAM (register_offset, 0),\n-  NAMED_PARAM (register_extend, 1),\n-  NAMED_PARAM (imm_offset, 0),\n+  1, /* pre_modify  */\n+  0, /* post_modify  */\n+  0, /* register_offset  */\n+  1, /* register_extend  */\n+  0, /* imm_offset  */\n };\n \n-#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n-__extension__\n-#endif\n static const struct cpu_regmove_cost generic_regmove_cost =\n {\n-  NAMED_PARAM (GP2GP, 1),\n+  1, /* GP2GP  */\n   /* Avoid the use of slow int<->fp moves for spilling by setting\n      their cost higher than memmov_cost.  */\n-  NAMED_PARAM (GP2FP, 5),\n-  NAMED_PARAM (FP2GP, 5),\n-  NAMED_PARAM (FP2FP, 2)\n+  5, /* GP2FP  */\n+  5, /* FP2GP  */\n+  2 /* FP2FP  */\n };\n \n static const struct cpu_regmove_cost cortexa57_regmove_cost =\n {\n-  NAMED_PARAM (GP2GP, 1),\n+  1, /* GP2GP  */\n   /* Avoid the use of slow int<->fp moves for spilling by setting\n      their cost higher than memmov_cost.  */\n-  NAMED_PARAM (GP2FP, 5),\n-  NAMED_PARAM (FP2GP, 5),\n-  NAMED_PARAM (FP2FP, 2)\n+  5, /* GP2FP  */\n+  5, /* FP2GP  */\n+  2 /* FP2FP  */\n };\n \n static const struct cpu_regmove_cost cortexa53_regmove_cost =\n {\n-  NAMED_PARAM (GP2GP, 1),\n+  1, /* GP2GP  */\n   /* Avoid the use of slow int<->fp moves for spilling by setting\n      their cost higher than memmov_cost.  */\n-  NAMED_PARAM (GP2FP, 5),\n-  NAMED_PARAM (FP2GP, 5),\n-  NAMED_PARAM (FP2FP, 2)\n+  5, /* GP2FP  */\n+  5, /* FP2GP  */\n+  2 /* FP2FP  */\n };\n \n static const struct cpu_regmove_cost thunderx_regmove_cost =\n {\n-  NAMED_PARAM (GP2GP, 2),\n-  NAMED_PARAM (GP2FP, 2),\n-  NAMED_PARAM (FP2GP, 6),\n-  NAMED_PARAM (FP2FP, 4)\n+  2, /* GP2GP  */\n+  2, /* GP2FP  */\n+  6, /* FP2GP  */\n+  4 /* FP2FP  */\n };\n \n static const struct cpu_regmove_cost xgene1_regmove_cost =\n {\n-  NAMED_PARAM (GP2GP, 1),\n+  1, /* GP2GP  */\n   /* Avoid the use of slow int<->fp moves for spilling by setting\n      their cost higher than memmov_cost.  */\n-  NAMED_PARAM (GP2FP, 8),\n-  NAMED_PARAM (FP2GP, 8),\n-  NAMED_PARAM (FP2FP, 2)\n+  8, /* GP2FP  */\n+  8, /* FP2GP  */\n+  2 /* FP2FP  */\n };\n \n /* Generic costs for vector insn classes.  */\n-#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n-__extension__\n-#endif\n static const struct cpu_vector_cost generic_vector_cost =\n {\n-  NAMED_PARAM (scalar_stmt_cost, 1),\n-  NAMED_PARAM (scalar_load_cost, 1),\n-  NAMED_PARAM (scalar_store_cost, 1),\n-  NAMED_PARAM (vec_stmt_cost, 1),\n-  NAMED_PARAM (vec_to_scalar_cost, 1),\n-  NAMED_PARAM (scalar_to_vec_cost, 1),\n-  NAMED_PARAM (vec_align_load_cost, 1),\n-  NAMED_PARAM (vec_unalign_load_cost, 1),\n-  NAMED_PARAM (vec_unalign_store_cost, 1),\n-  NAMED_PARAM (vec_store_cost, 1),\n-  NAMED_PARAM (cond_taken_branch_cost, 3),\n-  NAMED_PARAM (cond_not_taken_branch_cost, 1)\n+  1, /* scalar_stmt_cost  */\n+  1, /* scalar_load_cost  */\n+  1, /* scalar_store_cost  */\n+  1, /* vec_stmt_cost  */\n+  1, /* vec_to_scalar_cost  */\n+  1, /* scalar_to_vec_cost  */\n+  1, /* vec_align_load_cost  */\n+  1, /* vec_unalign_load_cost  */\n+  1, /* vec_unalign_store_cost  */\n+  1, /* vec_store_cost  */\n+  3, /* cond_taken_branch_cost  */\n+  1 /* cond_not_taken_branch_cost  */\n };\n \n /* Generic costs for vector insn classes.  */\n-#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n-__extension__\n-#endif\n static const struct cpu_vector_cost cortexa57_vector_cost =\n {\n-  NAMED_PARAM (scalar_stmt_cost, 1),\n-  NAMED_PARAM (scalar_load_cost, 4),\n-  NAMED_PARAM (scalar_store_cost, 1),\n-  NAMED_PARAM (vec_stmt_cost, 3),\n-  NAMED_PARAM (vec_to_scalar_cost, 8),\n-  NAMED_PARAM (scalar_to_vec_cost, 8),\n-  NAMED_PARAM (vec_align_load_cost, 5),\n-  NAMED_PARAM (vec_unalign_load_cost, 5),\n-  NAMED_PARAM (vec_unalign_store_cost, 1),\n-  NAMED_PARAM (vec_store_cost, 1),\n-  NAMED_PARAM (cond_taken_branch_cost, 1),\n-  NAMED_PARAM (cond_not_taken_branch_cost, 1)\n+  1, /* scalar_stmt_cost  */\n+  4, /* scalar_load_cost  */\n+  1, /* scalar_store_cost  */\n+  3, /* vec_stmt_cost  */\n+  8, /* vec_to_scalar_cost  */\n+  8, /* scalar_to_vec_cost  */\n+  5, /* vec_align_load_cost  */\n+  5, /* vec_unalign_load_cost  */\n+  1, /* vec_unalign_store_cost  */\n+  1, /* vec_store_cost  */\n+  1, /* cond_taken_branch_cost  */\n+  1 /* cond_not_taken_branch_cost  */\n };\n \n /* Generic costs for vector insn classes.  */\n-#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n-__extension__\n-#endif\n static const struct cpu_vector_cost xgene1_vector_cost =\n {\n-  NAMED_PARAM (scalar_stmt_cost, 1),\n-  NAMED_PARAM (scalar_load_cost, 5),\n-  NAMED_PARAM (scalar_store_cost, 1),\n-  NAMED_PARAM (vec_stmt_cost, 2),\n-  NAMED_PARAM (vec_to_scalar_cost, 4),\n-  NAMED_PARAM (scalar_to_vec_cost, 4),\n-  NAMED_PARAM (vec_align_load_cost, 10),\n-  NAMED_PARAM (vec_unalign_load_cost, 10),\n-  NAMED_PARAM (vec_unalign_store_cost, 2),\n-  NAMED_PARAM (vec_store_cost, 2),\n-  NAMED_PARAM (cond_taken_branch_cost, 2),\n-  NAMED_PARAM (cond_not_taken_branch_cost, 1)\n+  1, /* scalar_stmt_cost  */\n+  5, /* scalar_load_cost  */\n+  1, /* scalar_store_cost  */\n+  2, /* vec_stmt_cost  */\n+  4, /* vec_to_scalar_cost  */\n+  4, /* scalar_to_vec_cost  */\n+  10, /* vec_align_load_cost  */\n+  10, /* vec_unalign_load_cost  */\n+  2, /* vec_unalign_store_cost  */\n+  2, /* vec_store_cost  */\n+  2, /* cond_taken_branch_cost  */\n+  1 /* cond_not_taken_branch_cost  */\n };\n \n #define AARCH64_FUSE_NOTHING\t(0)\n@@ -379,18 +339,15 @@ static const struct cpu_vector_cost xgene1_vector_cost =\n #define AARCH64_FUSE_ADRP_LDR\t(1 << 3)\n #define AARCH64_FUSE_CMP_BRANCH\t(1 << 4)\n \n-#if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n-__extension__\n-#endif\n static const struct tune_params generic_tunings =\n {\n   &cortexa57_extra_costs,\n   &generic_addrcost_table,\n   &generic_regmove_cost,\n   &generic_vector_cost,\n-  NAMED_PARAM (memmov_cost, 4),\n-  NAMED_PARAM (issue_rate, 2),\n-  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_NOTHING),\n+  4, /* memmov_cost  */\n+  2, /* issue_rate  */\n+  AARCH64_FUSE_NOTHING, /* fuseable_ops  */\n   8,\t/* function_align.  */\n   8,\t/* jump_align.  */\n   4,\t/* loop_align.  */\n@@ -405,10 +362,10 @@ static const struct tune_params cortexa53_tunings =\n   &generic_addrcost_table,\n   &cortexa53_regmove_cost,\n   &generic_vector_cost,\n-  NAMED_PARAM (memmov_cost, 4),\n-  NAMED_PARAM (issue_rate, 2),\n-  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n-                             | AARCH64_FUSE_MOVK_MOVK | AARCH64_FUSE_ADRP_LDR)),\n+  4, /* memmov_cost  */\n+  2, /* issue_rate  */\n+  (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n+   | AARCH64_FUSE_MOVK_MOVK | AARCH64_FUSE_ADRP_LDR), /* fuseable_ops  */\n   8,\t/* function_align.  */\n   8,\t/* jump_align.  */\n   4,\t/* loop_align.  */\n@@ -423,9 +380,10 @@ static const struct tune_params cortexa57_tunings =\n   &cortexa57_addrcost_table,\n   &cortexa57_regmove_cost,\n   &cortexa57_vector_cost,\n-  NAMED_PARAM (memmov_cost, 4),\n-  NAMED_PARAM (issue_rate, 3),\n-  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD | AARCH64_FUSE_MOVK_MOVK)),\n+  4, /* memmov_cost  */\n+  3, /* issue_rate  */\n+  (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n+   | AARCH64_FUSE_MOVK_MOVK), /* fuseable_ops  */\n   16,\t/* function_align.  */\n   8,\t/* jump_align.  */\n   4,\t/* loop_align.  */\n@@ -440,9 +398,9 @@ static const struct tune_params thunderx_tunings =\n   &generic_addrcost_table,\n   &thunderx_regmove_cost,\n   &generic_vector_cost,\n-  NAMED_PARAM (memmov_cost, 6),\n-  NAMED_PARAM (issue_rate, 2),\n-  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_CMP_BRANCH),\n+  6, /* memmov_cost  */\n+  2, /* issue_rate  */\n+  AARCH64_FUSE_CMP_BRANCH, /* fuseable_ops  */\n   8,\t/* function_align.  */\n   8,\t/* jump_align.  */\n   8,\t/* loop_align.  */\n@@ -457,9 +415,9 @@ static const struct tune_params xgene1_tunings =\n   &xgene1_addrcost_table,\n   &xgene1_regmove_cost,\n   &xgene1_vector_cost,\n-  NAMED_PARAM (memmov_cost, 6),\n-  NAMED_PARAM (issue_rate, 4),\n-  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_NOTHING),\n+  6, /* memmov_cost  */\n+  4, /* issue_rate  */\n+  AARCH64_FUSE_NOTHING, /* fuseable_ops  */\n   16,\t/* function_align.  */\n   8,\t/* jump_align.  */\n   16,\t/* loop_align.  */"}]}