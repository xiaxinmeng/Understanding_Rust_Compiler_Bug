{"sha": "6dbe09581a1349498f6b4546f68cb9fd3205e120", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiZTA5NTgxYTEzNDk0OThmNmI0NTQ2ZjY4Y2I5ZmQzMjA1ZTEyMA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2013-11-06T16:52:47Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2013-11-06T16:52:47Z"}, "message": "c-opts.c (c_common_post_options): Set -ffp-contract=off in C standards modes.\n\nc-family:\n\t* c-opts.c (c_common_post_options): Set -ffp-contract=off in C\n\tstandards modes.\n\t* c-cppbuiltin.c (cpp_iec_559_value): Consider -ffp-contract=fast\n\tto mean lack of IEEE 754 support.\n\ntestsuite:\n\t* gcc.dg/torture/c99-contract-1.c: New test.\n\nFrom-SVN: r204460", "tree": {"sha": "cae87a5350ed0c4d96974ba136c4cdcae7117138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cae87a5350ed0c4d96974ba136c4cdcae7117138"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dbe09581a1349498f6b4546f68cb9fd3205e120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dbe09581a1349498f6b4546f68cb9fd3205e120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dbe09581a1349498f6b4546f68cb9fd3205e120", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dbe09581a1349498f6b4546f68cb9fd3205e120/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d2217b6ab9ca6f2dd005e6f7ac22296532e6f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d2217b6ab9ca6f2dd005e6f7ac22296532e6f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d2217b6ab9ca6f2dd005e6f7ac22296532e6f61"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "582aa9383d62f1f5e7fccc060eccab313ad14a64", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbe09581a1349498f6b4546f68cb9fd3205e120/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbe09581a1349498f6b4546f68cb9fd3205e120/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6dbe09581a1349498f6b4546f68cb9fd3205e120", "patch": "@@ -1,3 +1,10 @@\n+2013-11-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-opts.c (c_common_post_options): Set -ffp-contract=off in C\n+\tstandards modes.\n+\t* c-cppbuiltin.c (cpp_iec_559_value): Consider -ffp-contract=fast\n+\tto mean lack of IEEE 754 support.\n+\n 2013-11-05  Tobias Burnus  <burnus@net-b.de>\n \n \t* c.opt (-Wdate-time): New option"}, {"sha": "b9a0f18cd7e5cdc2547a07ce8348996fe5921857", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbe09581a1349498f6b4546f68cb9fd3205e120/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbe09581a1349498f6b4546f68cb9fd3205e120/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=6dbe09581a1349498f6b4546f68cb9fd3205e120", "patch": "@@ -726,16 +726,19 @@ cpp_iec_559_value (void)\n     ret = 0;\n \n   /* In strict C standards conformance mode, consider unpredictable\n-     excess precision to mean lack of IEEE 754 support.  ??? The same\n-     should apply to unpredictable contraction, but at present\n-     standards conformance options do not enable conforming\n-     contraction.  For C++, and outside strict conformance mode, do\n-     not consider these options to mean lack of IEEE 754 support.  */\n+     excess precision to mean lack of IEEE 754 support.  The same\n+     applies to unpredictable contraction.  For C++, and outside\n+     strict conformance mode, do not consider these options to mean\n+     lack of IEEE 754 support.  */\n   if (flag_iso\n       && !c_dialect_cxx ()\n       && TARGET_FLT_EVAL_METHOD != 0\n       && flag_excess_precision_cmdline != EXCESS_PRECISION_STANDARD)\n     ret = 0;\n+  if (flag_iso\n+      && !c_dialect_cxx ()\n+      && flag_fp_contract_mode == FP_CONTRACT_FAST)\n+    ret = 0;\n \n   /* Various options are contrary to IEEE 754 semantics.  */\n   if (flag_unsafe_math_optimizations"}, {"sha": "34fe94de34b3d8c9630a2af23d42ee2fdb21827a", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbe09581a1349498f6b4546f68cb9fd3205e120/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbe09581a1349498f6b4546f68cb9fd3205e120/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=6dbe09581a1349498f6b4546f68cb9fd3205e120", "patch": "@@ -827,6 +827,15 @@ c_common_post_options (const char **pfilename)\n \t\t\t\t     ? EXCESS_PRECISION_STANDARD\n \t\t\t\t     : EXCESS_PRECISION_FAST);\n \n+  /* ISO C restricts floating-point expression contraction to within\n+     source-language expressions (-ffp-contract=on, currently an alias\n+     for -ffp-contract=off).  */\n+  if (flag_iso\n+      && !c_dialect_cxx ()\n+      && (global_options_set.x_flag_fp_contract_mode\n+\t  == (enum fp_contract_mode) 0))\n+    flag_fp_contract_mode = FP_CONTRACT_OFF;\n+\n   /* By default we use C99 inline semantics in GNU99 or C99 mode.  C99\n      inline semantics are not supported in GNU89 or C89 mode.  */\n   if (flag_gnu89_inline == -1)"}, {"sha": "9668d7393e4bce4a2afa3947723b8980b38ef8b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbe09581a1349498f6b4546f68cb9fd3205e120/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbe09581a1349498f6b4546f68cb9fd3205e120/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6dbe09581a1349498f6b4546f68cb9fd3205e120", "patch": "@@ -1,3 +1,7 @@\n+2013-11-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/torture/c99-contract-1.c: New test.\n+\n 2013-11-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58653"}, {"sha": "6023083080793f34f2ae12b0d2c8e4f0e36e2d4f", "filename": "gcc/testsuite/gcc.dg/torture/c99-contract-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbe09581a1349498f6b4546f68cb9fd3205e120/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fc99-contract-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbe09581a1349498f6b4546f68cb9fd3205e120/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fc99-contract-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fc99-contract-1.c?ref=6dbe09581a1349498f6b4546f68cb9fd3205e120", "patch": "@@ -0,0 +1,21 @@\n+/* Test floating-point contraction occurs only within source language\n+   expressions.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+volatile float a = 1 + 0x1p-23f, b = 1 - 0x1p-23f, c = -1;\n+\n+int\n+main (void)\n+{\n+  float av = a, bv = b, cv = c;\n+  float p = av * bv;\n+  float r = p + cv;\n+  if (r == 0)\n+    exit (0);\n+  else\n+    abort ();\n+}"}]}