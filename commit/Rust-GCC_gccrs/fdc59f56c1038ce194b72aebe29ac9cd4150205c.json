{"sha": "fdc59f56c1038ce194b72aebe29ac9cd4150205c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRjNTlmNTZjMTAzOGNlMTk0YjcyYWViZTI5YWM5Y2Q0MTUwMjA1Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-04-13T01:03:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-04-13T01:03:55Z"}, "message": "compiler: improve type handling for string concat ops on constants\n    \n    Resolve a small problem with concatenation of string constants: in a\n    string concat X + Y where X has named type and Y has abstract string\n    type, insure that the result has X's type, and disable folding if the\n    both sides have a concrete type that does not match.\n    \n    Fixes golang/go#31412.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/171797\n\nFrom-SVN: r270336", "tree": {"sha": "8a84c446c3b83550be24819a0adf3496f802642f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a84c446c3b83550be24819a0adf3496f802642f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdc59f56c1038ce194b72aebe29ac9cd4150205c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc59f56c1038ce194b72aebe29ac9cd4150205c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdc59f56c1038ce194b72aebe29ac9cd4150205c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc59f56c1038ce194b72aebe29ac9cd4150205c/comments", "author": null, "committer": null, "parents": [{"sha": "b15937488e5738ae2d4653dcc10acbd95eb649b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15937488e5738ae2d4653dcc10acbd95eb649b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15937488e5738ae2d4653dcc10acbd95eb649b5"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "381d791da8c163c07a2916d13612dfe823cdc699", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc59f56c1038ce194b72aebe29ac9cd4150205c/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc59f56c1038ce194b72aebe29ac9cd4150205c/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=fdc59f56c1038ce194b72aebe29ac9cd4150205c", "patch": "@@ -1,4 +1,4 @@\n-8822487ed776d55eafed44de7d89ee54bbfbab47\n+20010e494f46d8fd58cfd372093b059578d3379a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "6f9775dd5a20c7d48c8f1dbbe4ba9bb00921459a", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc59f56c1038ce194b72aebe29ac9cd4150205c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc59f56c1038ce194b72aebe29ac9cd4150205c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=fdc59f56c1038ce194b72aebe29ac9cd4150205c", "patch": "@@ -1846,12 +1846,20 @@ String_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n   String_expression::export_string(ast_dump_context, this);\n }\n \n-// Make a string expression.\n+// Make a string expression with abstract string type (common case).\n \n Expression*\n Expression::make_string(const std::string& val, Location location)\n {\n-  return new String_expression(val, location);\n+  return new String_expression(val, NULL, location);\n+}\n+\n+// Make a string expression with a specific string type.\n+\n+Expression*\n+Expression::make_string_typed(const std::string& val, Type* type, Location location)\n+{\n+  return new String_expression(val, type, location);\n }\n \n // An expression that evaluates to some characteristic of a string.\n@@ -5485,16 +5493,30 @@ Binary_expression::do_lower(Gogo* gogo, Named_object*,\n   }\n \n   // String constant expressions.\n-  if (left->type()->is_string_type() && right->type()->is_string_type())\n+  //\n+  // Avoid constant folding here if the left and right types are incompatible\n+  // (leave the operation intact so that the type checker can complain about it\n+  // later on). If concatenating an abstract string with a named string type,\n+  // result type needs to be of the named type (see issue 31412).\n+  if (left->type()->is_string_type()\n+      && right->type()->is_string_type()\n+      && (left->type()->named_type() == NULL\n+          || right->type()->named_type() == NULL\n+          || left->type()->named_type() == right->type()->named_type()))\n     {\n       std::string left_string;\n       std::string right_string;\n       if (left->string_constant_value(&left_string)\n \t  && right->string_constant_value(&right_string))\n \t{\n \t  if (op == OPERATOR_PLUS)\n-\t    return Expression::make_string(left_string + right_string,\n-\t\t\t\t\t   location);\n+            {\n+              Type* result_type = (left->type()->named_type() != NULL\n+                                   ? left->type()\n+                                   : right->type());\n+              return Expression::make_string_typed(left_string + right_string,\n+                                                   result_type, location);\n+            }\n \t  else if (is_comparison)\n \t    {\n \t      int cmp = left_string.compare(right_string);"}, {"sha": "43aaccf9769eea113740e2a3ffac619cfbf992cd", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc59f56c1038ce194b72aebe29ac9cd4150205c/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc59f56c1038ce194b72aebe29ac9cd4150205c/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=fdc59f56c1038ce194b72aebe29ac9cd4150205c", "patch": "@@ -230,6 +230,10 @@ class Expression\n   static Expression*\n   make_string(const std::string&, Location);\n \n+  // Make a constant string expression with a specific string subtype.\n+  static Expression*\n+  make_string_typed(const std::string&, Type*, Location);\n+\n   // Make an expression that evaluates to some characteristic of an string.\n   // For simplicity, the enum values must match the field indexes in the\n   // underlying struct.\n@@ -1570,9 +1574,9 @@ class Set_and_use_temporary_expression : public Expression\n class String_expression : public Expression\n {\n  public:\n-  String_expression(const std::string& val, Location location)\n+  String_expression(const std::string& val, Type* type, Location location)\n     : Expression(EXPRESSION_STRING, location),\n-      val_(val), type_(NULL)\n+      val_(val), type_(type)\n   { }\n \n   const std::string&"}]}