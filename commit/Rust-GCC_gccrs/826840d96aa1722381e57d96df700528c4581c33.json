{"sha": "826840d96aa1722381e57d96df700528c4581c33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2ODQwZDk2YWExNzIyMzgxZTU3ZDk2ZGY3MDA1MjhjNDU4MWMzMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-28T08:25:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-28T08:25:45Z"}, "message": "decl.c (struct named_label_list): Rename eh_region to in_try_scope, add in_catch_scope.\n\n        * decl.c (struct named_label_list): Rename eh_region to\n        in_try_scope, add in_catch_scope.\n        (struct binding_level): Rename eh_region to is_try_scope,\n        add is_catch_scope.\n        (note_level_for_try): Rename from note_level_for_eh.\n        (note_level_for_catch): New.\n        (poplevel): Copy both is_try_scope and is_catch_scope to\n        the named_label_list struct.\n        (check_previous_goto_1): Don't check for catch block via\n        DECL_ARTIFICIAL; use in_try_scope instead.\n        (check_goto): Likewise.\n        * cp-tree.h (note_level_for_try, note_level_for_catch): Declare.\n        * except.c (expand_start_catch_block): Call note_level_for_catch.\n        * semantics.c (begin_compound_stmt): Update for note_level_for_try.\n\nFrom-SVN: r40920", "tree": {"sha": "13a4980a497e8445730adac9c18781f805ef4126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13a4980a497e8445730adac9c18781f805ef4126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/826840d96aa1722381e57d96df700528c4581c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826840d96aa1722381e57d96df700528c4581c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826840d96aa1722381e57d96df700528c4581c33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826840d96aa1722381e57d96df700528c4581c33/comments", "author": null, "committer": null, "parents": [{"sha": "1e7c4465e965fe5c05bab6433a4c0c6035fe53d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7c4465e965fe5c05bab6433a4c0c6035fe53d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e7c4465e965fe5c05bab6433a4c0c6035fe53d2"}], "stats": {"total": 84, "additions": 60, "deletions": 24}, "files": [{"sha": "9540023cb8d125280f0a560d2acfe3b113232362", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826840d96aa1722381e57d96df700528c4581c33/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826840d96aa1722381e57d96df700528c4581c33/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=826840d96aa1722381e57d96df700528c4581c33", "patch": "@@ -1,3 +1,20 @@\n+2001-03-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* decl.c (struct named_label_list): Rename eh_region to\n+\tin_try_scope, add in_catch_scope.\n+\t(struct binding_level): Rename eh_region to is_try_scope,\n+\tadd is_catch_scope.\n+\t(note_level_for_try): Rename from note_level_for_eh.\n+\t(note_level_for_catch): New.\n+\t(poplevel): Copy both is_try_scope and is_catch_scope to\n+\tthe named_label_list struct.\n+\t(check_previous_goto_1): Don't check for catch block via\n+\tDECL_ARTIFICIAL; use in_try_scope instead.\n+\t(check_goto): Likewise.\n+\t* cp-tree.h (note_level_for_try, note_level_for_catch): Declare.\n+\t* except.c (expand_start_catch_block): Call note_level_for_catch.\n+\t* semantics.c (begin_compound_stmt): Update for note_level_for_try.\n+\n 2001-03-27  Richard Henderson  <rth@redhat.com>\n \n \t* except.c: Use USING_SJLJ_EXCEPTIONS instead of\n@@ -124,7 +141,7 @@\n \t* except.c: Don't include it.\n \n 2001-03-22  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n-            based on an idea from Joe Buck <jbuck@synopsys.com>\n+\t    based on an idea from Joe Buck <jbuck@synopsys.com>\n \n \t* parse.y (bad_decl, template_arg_list_ignore, arg_list_ignore):\n \tNew nonterminals.\n@@ -1041,8 +1058,8 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-01-16 Daniel Berlin <dberlin@redhat.com>\n \n-        * cvt.c (ocp_convert): Handle vector type conversion\n-        * typeck2.c (digest_init): Handle vector type initializations\n+\t* cvt.c (ocp_convert): Handle vector type conversion\n+\t* typeck2.c (digest_init): Handle vector type initializations\n \n 2001-01-16  Phil Edwards  <pme@sources.redhat.com>\n \n@@ -1249,7 +1266,7 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-01-07  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * cp/decl2.c (cxx_post_options): Call cpp_post_options.\n+\t* cp/decl2.c (cxx_post_options): Call cpp_post_options.\n \n 2001-01-05  Nathan Sidwell  <nathan@codesourcery.com>\n "}, {"sha": "91c280c9f42b348eb664c5ae72dccab1bc915e93", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826840d96aa1722381e57d96df700528c4581c33/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826840d96aa1722381e57d96df700528c4581c33/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=826840d96aa1722381e57d96df700528c4581c33", "patch": "@@ -3766,7 +3766,8 @@ extern void maybe_push_cleanup_level\t\tPARAMS ((tree));\n extern void begin_scope                         PARAMS ((scope_kind));\n extern void finish_scope                        PARAMS ((void));\n extern void note_level_for_for\t\t\tPARAMS ((void));\n-extern void note_level_for_eh\t\t\tPARAMS ((void));\n+extern void note_level_for_try\t\t\tPARAMS ((void));\n+extern void note_level_for_catch\t\tPARAMS ((void));\n extern void resume_level\t\t\tPARAMS ((struct binding_level *));\n extern void delete_block\t\t\tPARAMS ((tree));\n extern void insert_block\t\t\tPARAMS ((tree));"}, {"sha": "366d37c38bd3c375779cc624b818e4cfd9ecc49e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826840d96aa1722381e57d96df700528c4581c33/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826840d96aa1722381e57d96df700528c4581c33/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=826840d96aa1722381e57d96df700528c4581c33", "patch": "@@ -282,8 +282,9 @@ struct named_label_list\n   tree old_value;\n   tree label_decl;\n   tree bad_decls;\n-  int eh_region;\n   struct named_label_list *next;\n+  unsigned int in_try_scope : 1;\n+  unsigned int in_catch_scope : 1;\n };\n \n #define named_labels cp_function_chain->x_named_labels\n@@ -456,12 +457,15 @@ struct binding_level\n        worry about ambiguous (ARM or ISO) scope rules.  */\n     unsigned is_for_scope : 1;\n \n-    /* True if this level corresponds to an EH region, as for a try block.\n-       Currently this information is only available while building the\n-       tree structure.  */\n-    unsigned eh_region : 1;\n+    /* True if this level corresponds to a TRY block.  Currently this\n+       information is only available while building the tree structure.  */\n+    unsigned is_try_scope : 1;\n \n-    /* Four bits left for this word.  */\n+    /* True if this level corresponds to a CATCH block.  Currently this\n+       information is only available while building the tree structure.  */\n+    unsigned is_catch_scope : 1;\n+\n+    /* Three bits left for this word.  */\n \n #if defined(DEBUG_CP_BINDING_LEVELS)\n     /* Binding depth at which this level began.  */\n@@ -920,9 +924,17 @@ note_level_for_for ()\n /* Record that the current binding level represents a try block.  */\n \n void\n-note_level_for_eh ()\n+note_level_for_try ()\n {\n-  current_binding_level->eh_region = 1;\n+  current_binding_level->is_try_scope = 1;\n+}\n+\n+/* Record that the current binding level represents a catch block.  */\n+\n+void\n+note_level_for_catch ()\n+{\n+  current_binding_level->is_catch_scope = 1;\n }\n \n /* For a binding between a name and an entity at a block scope,\n@@ -1326,8 +1338,10 @@ poplevel (keep, reverse, functionbody)\n \t    if (labels->binding_level == current_binding_level)\n \t      {\n \t\ttree decl;\n-\t\tif (current_binding_level->eh_region)\n-\t\t  labels->eh_region = 1;\n+\t\tif (current_binding_level->is_try_scope)\n+\t\t  labels->in_try_scope = 1;\n+\t\tif (current_binding_level->is_catch_scope)\n+\t\t  labels->in_catch_scope = 1;\n \t\tfor (decl = labels->names_in_scope; decl;\n \t\t     decl = TREE_CHAIN (decl))\n \t\t  if (decl_jump_unsafe (decl))\n@@ -4946,10 +4960,7 @@ check_previous_goto_1 (decl, level, names, file, line)\n \t      identified = 1;\n \t    }\n \n-\t  if (problem > 1 && DECL_ARTIFICIAL (new_decls))\n-\t    /* Can't skip init of __exception_info.  */\n-\t    cp_error_at (\"  enters catch block\", new_decls);\n-\t  else if (problem > 1)\n+\t  if (problem > 1)\n \t    cp_error_at (\"  crosses initialization of `%#D'\",\n \t\t\t new_decls);\n \t  else\n@@ -4959,7 +4970,7 @@ check_previous_goto_1 (decl, level, names, file, line)\n \n       if (b == level)\n \tbreak;\n-      if (b->eh_region && ! saw_eh)\n+      if ((b->is_try_scope || b->is_catch_scope) && ! saw_eh)\n \t{\n \t  if (! identified)\n \t    {\n@@ -4972,7 +4983,10 @@ check_previous_goto_1 (decl, level, names, file, line)\n \t\tpedwarn_with_file_and_line (file, line, \"  from here\");\n \t      identified = 1;\n \t    }\n-\t  error (\"  enters try block\");\n+\t  if (b->is_try_scope)\n+\t    error (\"  enters try block\");\n+\t  else\n+\t    error (\"  enters catch block\");\n \t  saw_eh = 1;\n \t}\n     }\n@@ -5051,7 +5065,8 @@ check_goto (decl)\n   if (lab == 0)\n     return;\n \n-  if ((lab->eh_region || lab->bad_decls) && !identified)\n+  if ((lab->in_try_scope || lab->in_catch_scope || lab->bad_decls)\n+      && !identified)\n     {\n       cp_pedwarn_at (\"jump to label `%D'\", decl);\n       pedwarn (\"  from here\");\n@@ -5072,8 +5087,10 @@ check_goto (decl)\n \tcp_pedwarn_at (\"  enters scope of non-POD `%#D'\", b);\n     }\n \n-  if (lab->eh_region)\n+  if (lab->in_try_scope)\n     error (\"  enters try block\");\n+  else if (lab->in_catch_scope)\n+    error (\"  enters catch block\");\n }\n \n /* Define a label, specifying the location in the source file."}, {"sha": "4f5bde6a2a9efb9ad7b681411bb394ca205bf8ff", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826840d96aa1722381e57d96df700528c4581c33/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826840d96aa1722381e57d96df700528c4581c33/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=826840d96aa1722381e57d96df700528c4581c33", "patch": "@@ -616,6 +616,7 @@ expand_start_catch_block (decl)\n   /* Create a binding level for the eh_info and the exception object\n      cleanup.  */\n   compound_stmt_1 = begin_compound_stmt (/*has_no_scope=*/0);\n+  note_level_for_catch ();\n \n   if (! decl || ! decl_is_java_type (TREE_TYPE (decl), 1))\n     {"}, {"sha": "a070002108860b63e167143e1514e63131345a23", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826840d96aa1722381e57d96df700528c4581c33/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826840d96aa1722381e57d96df700528c4581c33/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=826840d96aa1722381e57d96df700528c4581c33", "patch": "@@ -832,7 +832,7 @@ begin_compound_stmt (has_no_scope)\n     {\n       do_pushlevel ();\n       if (is_try)\n-      \tnote_level_for_eh ();\n+      \tnote_level_for_try ();\n     }\n   else\n     /* Normally, we try hard to keep the BLOCK for a"}]}