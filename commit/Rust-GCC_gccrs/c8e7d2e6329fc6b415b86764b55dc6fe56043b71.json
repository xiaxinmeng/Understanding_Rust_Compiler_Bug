{"sha": "c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhlN2QyZTYzMjlmYzZiNDE1Yjg2NzY0YjU1ZGM2ZmU1NjA0M2I3MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-10T16:58:13Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-10T16:58:13Z"}, "message": "check-init.c (check_bool2_init, [...]): Add static prototypes.\n\n\t* check-init.c (check_bool2_init, done_alternative): Add static\n\tprototypes.\n\n\t* class.c (add_interface_do, maybe_layout_super_class): Likewise.\n\t(add_method, build_utf8_ref, build_class_ref,\n\tappend_gpp_mangled_type, layout_class_method): Constify a char*.\n\n\t* decl.c (push_promoted_type, make_binding_level): Add static\n\tprototypes.\n\t(push_promoted_type, pushdecl): Constify a char*.\n\n\t* except.c (find_handler_in_range, link_handler,\n\tcheck_start_handlers): Add static prototypes.\n\n\t* expr.c (process_jvm_instruction): Constify a char*.\n\n\t* gjavah.c (main): Constify a char*.\n\n\t* java-tree.h (verify_jvm_instructions, process_jvm_instruction):\n\tConstify a char*.\n\n\t* jcf-depend.c (free_entry, add_entry, munge, print_ents): Add\n\tstatic prototypes.\n\t(add_entry, jcf_dependency_set_target, jcf_dependency_add_target,\n\tmunge, print_ents): Constify a char*.\n\n\t* jcf-dump.c (disassemble_method): Constify a char*.\n\t(print_constant_pool, print_exception_table): Add static prototypes.\n\t(print_constant, print_exception_table, main, disassemble_method):\n\tConstify a char*.\n\n\t* jcf-io.c (find_classfile, find_class): Likewise.\n\n\t* jcf-parse.c (JPOOL_UTF_DATA, find_in_current_zip): Likewise.\n\t(set_source_filename, predefined_filename_p): Add static prototypes.\n\t(set_source_filename, get_constant, get_class_constant,\n\tfind_in_current_zip): Constify a char*.\n\n\t* jcf-path.c (free_entry, append_entry, add_entry, add_path): Add\n\tstatic prototypes.\n\t(add_entry, add_path, jcf_path_classpath_arg,\n\tjcf_path_CLASSPATH_arg, jcf_path_include_arg): Constify a char*.\n\n\t* jcf-reader.c (get_attribute, jcf_parse_preamble,\n\tjcf_parse_constant_pool, jcf_parse_class, jcf_parse_fields,\n\tjcf_parse_one_method, jcf_parse_methods,\n\tjcf_parse_final_attributes): Add static prototypes.\n\t(get_attribute): Constify a char*.\n\n\t* jcf.h (find_class, find_classfile, jcf_dependency_set_target,\n\tjcf_dependency_add_target, jcf_path_classpath_arg,\n\tjcf_path_CLASSPATH_arg, jcf_path_include_arg): Constify a char*.\n\n\t* jv-scan.c (main): Constify a char*.\n\t(gcc_obstack_init): Add prototype arguments.\n\n\t* jvgenmain.c (gcc_obstack_init): Likewise.\n\t(main): Constify a char*.\n\n\t* lang.c (put_decl_string, put_decl_node, java_dummy_print): Add\n\tstatic prototypes.\n\t(put_decl_string, lang_print_error): Constify a char*.\n\t(lang_init): Remove redundant extern prototype.\n\n\t* mangle.c (emit_unicode_mangled_name): Constify a char*.\n\n\t* typeck.c (convert_ieee_real_to_integer, parse_signature_type):\n\tAdd static prototypes.\n\t(get_type_from_signature): Constify a char*.\n\n\t* verify.c (check_pending_block, type_stack_dup, start_pc_cmp ):\n\tAdd static prototypes.\n\t(start_pc_cmp): Prefer PTR over GENERIC_PTR.\n\t(verify_jvm_instructions): Constify a char*.\n\n\t* xref.c (xref_flag_value): Likewise.\n\n\t* xref.h (xref_flag_value): Likewise.\n\n\t* zextract.c (makeword, makelong): Add static prototypes.\n\t(makeword, makelong): Constify a uch*.\n\nFrom-SVN: r28648", "tree": {"sha": "871ce9dd8338fdeb762af0f17f0e404ea5b3e1fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/871ce9dd8338fdeb762af0f17f0e404ea5b3e1fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/comments", "author": null, "committer": null, "parents": [{"sha": "1ef1bf063b0a944563d37d7d079d9f860d149c0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef1bf063b0a944563d37d7d079d9f860d149c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef1bf063b0a944563d37d7d079d9f860d149c0b"}], "stats": {"total": 302, "additions": 220, "deletions": 82}, "files": [{"sha": "7dc3f7c6f9b89e254e79346dd8e1a292eca3ab61", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -1,3 +1,87 @@\n+1999-08-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* check-init.c (check_bool2_init, done_alternative): Add static\n+\tprototypes.\n+\n+\t* class.c (add_interface_do, maybe_layout_super_class): Likewise.\n+\t(add_method, build_utf8_ref, build_class_ref,\n+\tappend_gpp_mangled_type, layout_class_method): Constify a char*.\n+\n+\t* decl.c (push_promoted_type, make_binding_level): Add static\n+\tprototypes.\n+\t(push_promoted_type, pushdecl): Constify a char*.\n+\n+\t* except.c (find_handler_in_range, link_handler,\n+\tcheck_start_handlers): Add static prototypes.\n+\n+\t* expr.c (process_jvm_instruction): Constify a char*.\n+\n+\t* gjavah.c (main): Constify a char*.\n+\n+\t* java-tree.h (verify_jvm_instructions, process_jvm_instruction):\n+\tConstify a char*.\n+\n+\t* jcf-depend.c (free_entry, add_entry, munge, print_ents): Add\n+\tstatic prototypes.\n+\t(add_entry, jcf_dependency_set_target, jcf_dependency_add_target,\n+\tmunge, print_ents): Constify a char*.\n+\n+\t* jcf-dump.c (disassemble_method): Constify a char*.\n+\t(print_constant_pool, print_exception_table): Add static prototypes.\n+\t(print_constant, print_exception_table, main, disassemble_method):\n+\tConstify a char*.\n+\n+\t* jcf-io.c (find_classfile, find_class): Likewise.\n+\n+\t* jcf-parse.c (JPOOL_UTF_DATA, find_in_current_zip): Likewise.\n+\t(set_source_filename, predefined_filename_p): Add static prototypes.\n+\t(set_source_filename, get_constant, get_class_constant,\n+\tfind_in_current_zip): Constify a char*.\n+\n+\t* jcf-path.c (free_entry, append_entry, add_entry, add_path): Add\n+\tstatic prototypes.\n+\t(add_entry, add_path, jcf_path_classpath_arg,\n+\tjcf_path_CLASSPATH_arg, jcf_path_include_arg): Constify a char*.\n+\n+\t* jcf-reader.c (get_attribute, jcf_parse_preamble,\n+\tjcf_parse_constant_pool, jcf_parse_class, jcf_parse_fields,\n+\tjcf_parse_one_method, jcf_parse_methods,\n+\tjcf_parse_final_attributes): Add static prototypes.\n+\t(get_attribute): Constify a char*.\n+\n+\t* jcf.h (find_class, find_classfile, jcf_dependency_set_target,\n+\tjcf_dependency_add_target, jcf_path_classpath_arg,\n+\tjcf_path_CLASSPATH_arg, jcf_path_include_arg): Constify a char*.\n+\n+\t* jv-scan.c (main): Constify a char*.\n+\t(gcc_obstack_init): Add prototype arguments.\n+\n+\t* jvgenmain.c (gcc_obstack_init): Likewise.\n+\t(main): Constify a char*.\n+\n+\t* lang.c (put_decl_string, put_decl_node, java_dummy_print): Add\n+\tstatic prototypes.\n+\t(put_decl_string, lang_print_error): Constify a char*.\n+\t(lang_init): Remove redundant extern prototype.\n+\t\n+\t* mangle.c (emit_unicode_mangled_name): Constify a char*.\n+\n+\t* typeck.c (convert_ieee_real_to_integer, parse_signature_type):\n+\tAdd static prototypes.\n+\t(get_type_from_signature): Constify a char*.\n+\n+\t* verify.c (check_pending_block, type_stack_dup, start_pc_cmp ):\n+\tAdd static prototypes.\n+\t(start_pc_cmp): Prefer PTR over GENERIC_PTR.\n+\t(verify_jvm_instructions): Constify a char*.\n+\n+\t* xref.c (xref_flag_value): Likewise.\n+\t\n+\t* xref.h (xref_flag_value): Likewise.\n+\n+\t* zextract.c (makeword, makelong): Add static prototypes.\n+\t(makeword, makelong): Constify a uch*.\n+\n 1999-08-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n         * lang.c (java_dummy_print): Constify a char*."}, {"sha": "31017a6756d5f73b194d0f3de7b9aa401efe81b8", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -100,6 +100,9 @@ static tree wfl;\n static void check_bool_init PROTO ((tree, words, words, words));\n static void check_init PROTO ((tree, words));\n static void check_cond_init PROTO ((tree, tree, tree, words, words, words));\n+static void check_bool2_init PROTO ((enum tree_code, tree, tree, words, words, words));\n+struct alternatives;\n+static void done_alternative PROTO ((words, struct alternatives *));\n \n #if 0\n #define ALLOC_WORDS(NUM) ((word*) xmalloc ((NUM) * sizeof (word)))"}, {"sha": "295470ae3bc85d346a84a647cad92282e867bc82", "filename": "gcc/java/class.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -45,6 +45,8 @@ static tree get_dispatch_vector PROTO ((tree));\n static tree get_dispatch_table PROTO ((tree, tree));\n static void append_gpp_mangled_type PROTO ((struct obstack *, tree));\n static tree mangle_static_field PROTO ((tree));\n+static void add_interface_do PROTO ((tree, tree, int));\n+static tree maybe_layout_super_class PROTO ((tree, tree));\n \n static rtx registerClass_libfunc;\n \n@@ -448,7 +450,7 @@ add_method (this_class, access_flags, name, method_sig)\n {\n   tree handle_class = CLASS_TO_HANDLE_TYPE (this_class);\n   tree function_type, fndecl;\n-  unsigned char *sig = (unsigned char*)IDENTIFIER_POINTER (method_sig);\n+  const unsigned char *sig = (const unsigned char*)IDENTIFIER_POINTER (method_sig);\n   push_obstacks (&permanent_obstack, &permanent_obstack);\n   if (sig[0] != '(')\n     fatal (\"bad method signature\");\n@@ -555,7 +557,7 @@ tree\n build_utf8_ref (name)\n      tree name;\n {\n-  char* name_ptr = IDENTIFIER_POINTER(name);\n+  const char * name_ptr = IDENTIFIER_POINTER(name);\n   int name_len = IDENTIFIER_LENGTH(name);\n   char buf[60];\n   char *buf_ptr;\n@@ -662,7 +664,7 @@ build_class_ref (type)\n \t}\n       else\n \t{\n-\t  char *name;\n+\t  const char *name;\n \t  char buffer[25];\n \t  if (flag_emit_class_files)\n \t    {\n@@ -1329,7 +1331,7 @@ append_gpp_mangled_type (obstack, type)\n \t}\n       else\n \t{\n-\t  char *class_name = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n+\t  const char *class_name = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n \t  append_gpp_mangled_classtype (obstack, class_name);\n \t}\n       break;\n@@ -1547,7 +1549,7 @@ tree\n layout_class_method (this_class, super_class, method_decl, dtable_count)\n      tree this_class, super_class, method_decl, dtable_count;\n {\n-  char *ptr;\n+  const char *ptr;\n   char *asm_name;\n   tree arg, arglist, t;\n   int method_name_needs_escapes = 0;\n@@ -1647,7 +1649,7 @@ layout_class_method (this_class, super_class, method_decl, dtable_count)\n \n   if (method_name == init_identifier_node)\n     {\n-      char *p = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (this_class)));\n+      const char *p = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (this_class)));\n       for (ptr = p; *ptr; )\n \t{\n \t  if (*ptr++ == '.')"}, {"sha": "6905caec93e0487fead5eb47ef1d0d8b35f35587", "filename": "gcc/java/decl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -40,6 +40,8 @@ static tree push_jvm_slot PROTO ((int, tree));\n static tree builtin_function PROTO ((const char *, tree,\n \t\t\t\t     enum built_in_function, const char *));\n static tree lookup_name_current_level PROTO ((tree));\n+static tree push_promoted_type PROTO ((const char *, tree));\n+static struct binding_level *make_binding_level PROTO ((void));\n \n #ifndef INT_TYPE_SIZE\n #define INT_TYPE_SIZE BITS_PER_WORD\n@@ -380,7 +382,7 @@ tree va_list_type_node;\n \n static tree\n push_promoted_type (name, actual_type)\n-     char *name;\n+     const char *name;\n      tree actual_type;\n {\n   tree type = make_node (TREE_CODE (actual_type));\n@@ -940,7 +942,7 @@ pushdecl (x)\n   DECL_CONTEXT (x) = current_function_decl;\n   if (name)\n     {\n-      char *file;\n+      const char *file;\n       int line;\n \n       t = lookup_name_current_level (name);\n@@ -1009,7 +1011,7 @@ pushdecl (x)\n \t\t   /* No shadow warnings for vars made for inlining.  */\n \t\t   && ! DECL_FROM_INLINE (x))\n \t    {\n-\t      char *warnstring = 0;\n+\t      const char *warnstring = 0;\n \n \t      if (TREE_CODE (x) == PARM_DECL\n \t\t  && current_binding_level->level_chain->parm_flag)"}, {"sha": "4c48fe7237fc8ef86f597b2274fd848f7a18a5be", "filename": "gcc/java/except.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -39,6 +39,10 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n static void expand_start_java_handler PROTO ((struct eh_range *));\n static void expand_end_java_handler PROTO ((struct eh_range *));\n+static struct eh_range *find_handler_in_range PROTO ((int, struct eh_range *,\n+\t\t\t\t\t\t      struct eh_range *));\n+static void link_handler PROTO ((struct eh_range *, struct eh_range *));\n+static void check_start_handlers PROTO ((struct eh_range *, int));\n \n extern struct obstack permanent_obstack;\n "}, {"sha": "1fed31df75b593ee2e28ce497acdb9e0f781779f", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -2315,7 +2315,7 @@ java_push_constant_from_pool (jcf, index)\n int\n process_jvm_instruction (PC, byte_ops, length)\n      int PC;\n-     unsigned char* byte_ops;\n+     const unsigned char* byte_ops;\n      long length ATTRIBUTE_UNUSED;\n { \n   const char *opname; /* Temporary ??? */"}, {"sha": "72b6be1b1c3c44d856b24668c54560450a29a07b", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -1652,7 +1652,8 @@ DEFUN(main, (argc, argv),\n   for (; argi < argc; argi++)\n     {\n       char *classname = argv[argi];\n-      char *classfile_name, *current_output_file;\n+      char *current_output_file;\n+      const char *classfile_name;\n \n       if (verbose)\n \tfprintf (stderr, \"Processing %s\\n\", classname);"}, {"sha": "f34b5f2f7d0f0459fd4ec4fc511ed274bd0810db", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -598,10 +598,10 @@ extern void push_super_field PROTO ((tree, tree));\n extern void init_class_processing PROTO ((void));\n extern int can_widen_reference_to PROTO ((tree, tree));\n extern int class_depth PROTO ((tree));\n-extern int verify_jvm_instructions PROTO ((struct JCF *, unsigned char *, long));\n+extern int verify_jvm_instructions PROTO ((struct JCF *, const unsigned char *, long));\n extern void maybe_pushlevels PROTO ((int));\n extern void maybe_poplevels PROTO ((int));\n-extern int process_jvm_instruction PROTO ((int, unsigned char *, long));\n+extern int process_jvm_instruction PROTO ((int, const unsigned char *, long));\n extern void set_local_type PROTO ((int, tree));\n extern int merge_type_state PROTO ((tree));\n extern void push_type PROTO ((tree));"}, {"sha": "87b474caed2e260c66792f1a7971dff07c5c3596", "filename": "gcc/java/jcf-depend.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-depend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-depend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-depend.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -39,6 +39,11 @@ struct entry\n   struct entry *next;\n };\n \n+static void free_entry PROTO ((struct entry **));\n+static void add_entry PROTO ((struct entry **, const char *));\n+static const char *munge PROTO ((const char *));\n+static int print_ents PROTO ((struct entry *, int));\n+\n /* List of files.  */\n static struct entry *dependencies = NULL;\n \n@@ -77,7 +82,7 @@ free_entry (entp)\n static void\n add_entry (entp, name)\n      struct entry **entp;\n-     char *name;\n+     const char *name;\n {\n   struct entry *ent;\n \n@@ -110,7 +115,7 @@ jcf_dependency_reset ()\n \n void\n jcf_dependency_set_target (name)\n-     char *name;\n+     const char *name;\n {\n   free_entry (&targets);\n   if (name != NULL)\n@@ -119,7 +124,7 @@ jcf_dependency_set_target (name)\n \n void\n jcf_dependency_add_target (name)\n-     char *name;\n+     const char *name;\n {\n   add_entry (&targets, name);\n }\n@@ -158,15 +163,16 @@ jcf_dependency_init (system_p)\n \n /* FIXME: this is taken almost directly from cccp.c.  Such duplication\n    is bad.  */\n-static char *\n+static const char *\n munge (filename)\n-     char *filename;\n+     const char *filename;\n {\n   static char *buffer = NULL;\n   static int buflen = 0;\n \n   int len = 2 * strlen (filename) + 1;\n-  char *p, *dst;\n+  const char *p;\n+  char *dst;\n \n   if (buflen < len)\n     {\n@@ -191,7 +197,7 @@ munge (filename)\n \t       preceded by 2N backslashes represents N backslashes at\n \t       the end of a file name; and backslashes in other\n \t       contexts should not be doubled.  */\n-\t    char *q;\n+\t    const char *q;\n \t    for (q = p - 1; filename < q && q[-1] == '\\\\';  q--)\n \t      *dst++ = '\\\\';\n \t  }\n@@ -228,7 +234,7 @@ print_ents (ent, column)\n \n   for (; ent != NULL; ent = ent->next)\n     {\n-      char *depname = munge (ent->file);\n+      const char *depname = munge (ent->file);\n       int len = strlen (depname);\n \n       if (column + len + 2 > MAX_OUTPUT_COLUMNS)"}, {"sha": "676a7512b838b0c92f4f987981331df3e65f0e8a", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -82,12 +82,15 @@ static void print_access_flags PROTO ((FILE *, uint16, char));\n static void print_constant_terse PROTO ((FILE*, JCF*, int, int));\n static void print_constant PROTO ((FILE *, JCF *, int, int));\n static void print_constant_ref PROTO ((FILE *, JCF *, int));\n-static void disassemble_method PROTO ((JCF*, unsigned char *, int));\n+static void disassemble_method PROTO ((JCF*, const unsigned char *, int));\n static void print_name PROTO ((FILE*, JCF*, int));\n static void print_signature PROTO ((FILE*, JCF*, int, int));\n static int utf8_equal_string PROTO ((struct JCF*, int, const char *));\n static int usage PROTO ((void));\n static void process_class PROTO ((struct JCF *));\n+static void print_constant_pool PROTO ((struct JCF *));\n+static void print_exception_table PROTO ((struct JCF *,\n+\t\t\t\t\t  const unsigned char *entries, int));\n \n #define PRINT_SIGNATURE_RESULT_ONLY 1\n #define PRINT_SIGNATURE_ARGS_ONLY 2\n@@ -482,7 +485,7 @@ DEFUN(print_constant, (out, jcf, index, verbosity),\n       break;\n     case CONSTANT_Utf8:\n       {\n-\tregister unsigned char *str = JPOOL_UTF_DATA (jcf, index);\n+\tregister const unsigned char *str = JPOOL_UTF_DATA (jcf, index);\n \tint length = JPOOL_UTF_LENGTH (jcf, index);\n \tif (verbosity > 0)\n \t  { /* Print as 8-bit bytes. */\n@@ -503,7 +506,7 @@ DEFUN(print_constant, (out, jcf, index, verbosity),\n     }\n }\n \n-void\n+static void\n DEFUN(print_constant_pool, (jcf),\n       JCF *jcf)\n {\n@@ -630,13 +633,13 @@ DEFUN(print_signature, (stream, jcf, signature_index, int options),\n \n static void\n DEFUN(print_exception_table, (jcf, entries, count),\n-      JCF *jcf AND unsigned char *entries AND int count)\n+      JCF *jcf AND const unsigned char *entries AND int count)\n {\n   /* Print exception table. */\n   int i = count;\n   if (i > 0)\n     {\n-      unsigned char *ptr = entries;\n+      const unsigned char *ptr = entries;\n       fprintf (out, \"Exceptions (count: %d):\\n\", i);\n       for (; --i >= 0;  ptr+= 8)\n \t{\n@@ -726,7 +729,7 @@ DEFUN(main, (argc, argv),\n \n   for (argi = 1; argi < argc; argi++)\n     {\n-      char *arg = argv[argi];\n+      const char *arg = argv[argi];\n \n       if (arg[0] != '-' || ! strcmp (arg, \"--\"))\n \tbreak;\n@@ -802,7 +805,7 @@ DEFUN(main, (argc, argv),\n       for (; argi < argc; argi++)\n \t{\n \t  char *arg = argv[argi];\n-\t  char* class_filename = find_class (arg, strlen (arg), jcf, 0);\n+\t  const char *class_filename = find_class (arg, strlen (arg), jcf, 0);\n \t  if (class_filename == NULL)\n \t    class_filename = find_classfile (arg, jcf, NULL);\n \t  if (class_filename == NULL)\n@@ -816,7 +819,7 @@ DEFUN(main, (argc, argv),\n \t      long compressed_size, member_size;\n \t      int compression_method, filename_length, extra_length;\n \t      int general_purpose_bits;\n-\t      char *filename;\n+\t      const char *filename;\n \t      int total_length;\n \t      if (flag_print_class_info)\n \t\tfprintf (out, \"Reading classes from archive %s.\\n\",\n@@ -910,7 +913,7 @@ DEFUN(main, (argc, argv),\n \n static void\n DEFUN(disassemble_method, (jcf, byte_ops, len),\n-      JCF* jcf AND unsigned char *byte_ops AND int len)\n+      JCF* jcf AND const unsigned char *byte_ops AND int len)\n {\n #undef AND /* Causes problems with opcodes for iand and land. */\n #undef PTR\n@@ -999,7 +1002,7 @@ DEFUN(disassemble_method, (jcf, byte_ops, len),\n #define ARRAY_NEW(TYPE) ARRAY_NEW_##TYPE\n #define ARRAY_NEW_NUM \\\n  INT_temp = IMMEDIATE_u1; \\\n- { char *str; \\\n+ { const char *str; \\\n   switch (INT_temp) {  \\\n     case  4: str = \"boolean\"; break; \\\n     case  5: str = \"char\"; break; \\"}, {"sha": "765f1506853e1151e20ad393fba720cf0e687ec1", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -240,7 +240,7 @@ DEFUN(open_class, (filename, jcf, fd, dep_name),\n #endif\n \n \n-char *\n+const char *\n DEFUN(find_classfile, (filename, jcf, dep_name),\n       char *filename AND JCF *jcf AND const char *dep_name)\n {\n@@ -262,7 +262,7 @@ DEFUN(find_classfile, (filename, jcf, dep_name),\n    failure.  If JCF != NULL, it is suitably initialized.\n    SOURCE_OK is true if we should also look for .java file. */\n \n-char *\n+const char *\n DEFUN(find_class, (classname, classname_length, jcf, source_ok),\n       const char *classname AND int classname_length AND JCF *jcf AND int source_ok)\n \n@@ -290,7 +290,7 @@ DEFUN(find_class, (classname, classname_length, jcf, source_ok),\n \n   for (entry = jcf_path_start (); entry != NULL; entry = jcf_path_next (entry))\n     {\n-      char *path_name = jcf_path_name (entry);\n+      const char *path_name = jcf_path_name (entry);\n       if (class != 0)\n \t{\n \t  int dir_len;"}, {"sha": "78daf2d17ed12e4429ea9c9d249ba50a040800a4", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -39,7 +39,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #define JPOOL_UTF(JCF, INDEX) CPOOL_UTF(&(JCF)->cpool, INDEX)\n #define JPOOL_UTF_LENGTH(JCF, INDEX) IDENTIFIER_LENGTH (JPOOL_UTF (JCF, INDEX))\n #define JPOOL_UTF_DATA(JCF, INDEX) \\\n-  ((unsigned char*) IDENTIFIER_POINTER (JPOOL_UTF (JCF, INDEX)))\n+  ((const unsigned char *) IDENTIFIER_POINTER (JPOOL_UTF (JCF, INDEX)))\n #define HANDLE_CONSTANT_Utf8(JCF, INDEX, LENGTH) \\\n   do { \\\n     unsigned char save;  unsigned char *text; \\\n@@ -87,12 +87,14 @@ static void process_zip_dir PROTO ((void));\n static void parse_source_file PROTO ((tree));\n static void jcf_parse_source PROTO ((void));\n static int jcf_figure_file_type PROTO ((JCF *));\n-static int find_in_current_zip PROTO ((char *, struct JCF **));\n+static int find_in_current_zip PROTO ((const char *, struct JCF **));\n static void parse_class_file PROTO ((void));\n+static void set_source_filename PROTO ((JCF *, int));\n+static int predefined_filename_p PROTO ((tree));\n \n /* Handle \"SourceFile\" attribute. */\n \n-void\n+static void\n set_source_filename (jcf, index)\n      JCF *jcf;\n      int index;\n@@ -303,10 +305,10 @@ get_constant (jcf, index)\n       {\n \textern struct obstack *expression_obstack;\n \ttree name = get_name_constant (jcf, JPOOL_USHORT1 (jcf, index));\n-\tchar *utf8_ptr = IDENTIFIER_POINTER (name);\n+\tconst char *utf8_ptr = IDENTIFIER_POINTER (name);\n \tunsigned char *str_ptr;\n \tint utf8_len = IDENTIFIER_LENGTH (name);\n-\tunsigned char *str = (unsigned char*)utf8_ptr;\n+\tconst unsigned char *str = (const unsigned char *)utf8_ptr;\n \tint i = utf8_len;\n \tint str_len;\n \n@@ -327,7 +329,7 @@ get_constant (jcf, index)\n \tTREE_STRING_POINTER (value)\n \t  = obstack_alloc (expression_obstack, 2 * str_len);\n \tstr_ptr = (unsigned char *) TREE_STRING_POINTER (value);\n-\tstr = (unsigned char*)utf8_ptr;\n+\tstr = (const unsigned char *)utf8_ptr;\n \tfor (i = 0; i < str_len; i++)\n \t  {\n \t    int char_value;\n@@ -426,7 +428,7 @@ get_class_constant (JCF *jcf , int i)\n     {\n       int name_index = JPOOL_USHORT1 (jcf, i);\n       /* verify_constant_pool confirmed that name_index is a CONSTANT_Utf8. */\n-      char *name = JPOOL_UTF_DATA (jcf, name_index);\n+      const char *name = JPOOL_UTF_DATA (jcf, name_index);\n       int nlength = JPOOL_UTF_LENGTH (jcf, name_index);\n       if (name[0] == '[')  /* Handle array \"classes\". */\n \t  type = TREE_TYPE (parse_signature_string (name, nlength));\n@@ -1007,7 +1009,7 @@ static void process_zip_dir()\n    zip file.  */\n static int\n DEFUN(find_in_current_zip, (name, length, jcf),\n-      char *name AND JCF **jcf)\n+      const char *name AND JCF **jcf)\n {\n   JCF *local_jcf;\n   tree class_name = maybe_get_identifier (name), class, icv;"}, {"sha": "c92cf14b353ed7b4fb19564ad5a63407a795eee6", "filename": "gcc/java/jcf-path.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-path.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-path.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-path.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -58,6 +58,11 @@ struct entry\n   struct entry *next;\n };\n \n+static void free_entry PROTO ((struct entry **));\n+static void append_entry PROTO ((struct entry **, struct entry *));\n+static void add_entry PROTO ((struct entry **, const char *, int));\n+static void add_path PROTO ((struct entry **, const char *, int));\n+\n /* We support several different ways to set the class path.\n \n    built-in system directory (only libgcj.zip)\n@@ -130,7 +135,7 @@ append_entry (entp, ent)\n static void\n add_entry (entp, filename, is_system)\n      struct entry **entp;\n-     char *filename;\n+     const char *filename;\n      int is_system;\n {\n   int len;\n@@ -177,10 +182,10 @@ add_entry (entp, filename, is_system)\n static void\n add_path (entp, cp, is_system)\n      struct entry **entp;\n-     char *cp;\n+     const char *cp;\n      int is_system;\n {\n-  char *startp, *endp;\n+  const char *startp, *endp;\n \n   if (cp)\n     {\n@@ -229,7 +234,7 @@ jcf_path_init ()\n /* Call this when -classpath is seen on the command line.  */\n void\n jcf_path_classpath_arg (path)\n-     char *path;\n+     const char *path;\n {\n   free_entry (&classpath_l);\n   add_path (&classpath_l, path, 0);\n@@ -238,7 +243,7 @@ jcf_path_classpath_arg (path)\n /* Call this when -CLASSPATH is seen on the command line.  */\n void\n jcf_path_CLASSPATH_arg (path)\n-     char *path;\n+     const char *path;\n {\n   free_entry (&classpath_u);\n   add_path (&classpath_u, path, 0);\n@@ -247,7 +252,7 @@ jcf_path_CLASSPATH_arg (path)\n /* Call this when -I is seen on the command line.  */\n void\n jcf_path_include_arg (path)\n-     char *path;\n+     const char *path;\n {\n   add_entry (&include_dirs, path, 0);\n }"}, {"sha": "44fb37e859bcd85a3d423be6f3e58d363e856c40", "filename": "gcc/java/jcf-reader.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-reader.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf-reader.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-reader.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -26,15 +26,24 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"jcf.h\"\n #include \"zipfile.h\"\n \n-int\n+static int get_attribute PROTO((JCF *));\n+static int jcf_parse_preamble PROTO((JCF *));\n+static int jcf_parse_constant_pool PROTO((JCF *));\n+static void jcf_parse_class PROTO((JCF *));\n+static int jcf_parse_fields PROTO((JCF *));\n+static int jcf_parse_one_method PROTO((JCF *));\n+static int jcf_parse_methods PROTO((JCF *));\n+static int jcf_parse_final_attributes PROTO((JCF *));\n+\n+static int\n DEFUN(get_attribute, (jcf),\n       JCF *jcf)\n {\n   uint16 attribute_name = (JCF_FILL (jcf, 6), JCF_readu2 (jcf));\n   uint32 attribute_length = JCF_readu4 (jcf);\n   uint32 start_pos = JCF_TELL(jcf);\n   int name_length;\n-  unsigned char *name_data;\n+  const unsigned char *name_data;\n   JCF_FILL (jcf, (long) attribute_length);\n   if (attribute_name <= 0 || attribute_name >= JPOOL_SIZE(jcf))\n     return -2;\n@@ -134,7 +143,7 @@ DEFUN(get_attribute, (jcf),\n }\n \n /* Read and handle the pre-amble. */\n-int\n+static int\n DEFUN(jcf_parse_preamble, (jcf),\n       JCF* jcf)\n {\n@@ -155,7 +164,7 @@ DEFUN(jcf_parse_preamble, (jcf),\n    Return 0 if OK.\n    Return -2 if a bad cross-reference (index of other constant) was seen.\n */\n-int\n+static int\n DEFUN(jcf_parse_constant_pool, (jcf),\n       JCF* jcf)\n {\n@@ -221,7 +230,7 @@ DEFUN(jcf_parse_constant_pool, (jcf),\n \n /* Read various class flags and numbers. */\n \n-void\n+static void\n DEFUN(jcf_parse_class, (jcf),\n       JCF* jcf)\n {\n@@ -250,7 +259,7 @@ DEFUN(jcf_parse_class, (jcf),\n }\n \n /* Read fields. */\n-int\n+static int\n DEFUN(jcf_parse_fields, (jcf),\n       JCF* jcf)\n {\n@@ -290,7 +299,7 @@ DEFUN(jcf_parse_fields, (jcf),\n \n /* Read methods. */\n \n-int\n+static int\n DEFUN(jcf_parse_one_method, (jcf),\n       JCF* jcf)\n {\n@@ -314,7 +323,7 @@ DEFUN(jcf_parse_one_method, (jcf),\n   return 0;\n }\n \n-int\n+static int\n DEFUN(jcf_parse_methods, (jcf),\n       JCF* jcf)\n {\n@@ -338,7 +347,7 @@ DEFUN(jcf_parse_methods, (jcf),\n }\n \n /* Read attributes. */\n-int\n+static int\n DEFUN(jcf_parse_final_attributes, (jcf),\n       JCF *jcf)\n {"}, {"sha": "56b35a5ce1014203aa5d7eac0f4ba3d57371eaeb", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -223,8 +223,8 @@ typedef struct JCF {\n \n #define DEFAULT_CLASS_PATH \".\"\n \n-extern char *find_class PROTO ((const char *, int, JCF*, int));\n-extern char *find_classfile PROTO ((char *, JCF*, const char *));\n+extern const char *find_class PROTO ((const char *, int, JCF*, int));\n+extern const char *find_classfile PROTO ((char *, JCF*, const char *));\n extern int jcf_filbuf_from_stdio PROTO ((JCF *jcf, int count));\n extern void jcf_out_of_synch PROTO((JCF *));\n extern int jcf_unexpected_eof PROTO ((JCF*, int));\n@@ -259,18 +259,18 @@ extern int quiet_flag;\n \n /* Declarations for dependency code.  */\n extern void jcf_dependency_reset PROTO ((void));\n-extern void jcf_dependency_set_target PROTO ((char *));\n-extern void jcf_dependency_add_target PROTO ((char *));\n+extern void jcf_dependency_set_target PROTO ((const char *));\n+extern void jcf_dependency_add_target PROTO ((const char *));\n extern void jcf_dependency_set_dep_file PROTO ((const char *));\n extern void jcf_dependency_add_file PROTO ((const char *, int));\n extern void jcf_dependency_write PROTO ((void));\n extern void jcf_dependency_init PROTO ((int));\n \n /* Declarations for path handling code.  */\n extern void jcf_path_init PROTO ((void));\n-extern void jcf_path_classpath_arg PROTO ((char *));\n-extern void jcf_path_CLASSPATH_arg PROTO ((char *));\n-extern void jcf_path_include_arg PROTO ((char *));\n+extern void jcf_path_classpath_arg PROTO ((const char *));\n+extern void jcf_path_CLASSPATH_arg PROTO ((const char *));\n+extern void jcf_path_include_arg PROTO ((const char *));\n extern void jcf_path_seal PROTO ((void));\n extern void *jcf_path_start PROTO ((void));\n extern void *jcf_path_next PROTO ((void *));"}, {"sha": "df660ac55f3d710a74e365ac1b03d3dc6f2aac91", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -52,7 +52,7 @@ main (argc, argv)\n   char **argv;\n {\n   int i = 1;\n-  char *output_file = NULL;\n+  const char *output_file = NULL;\n   long ft;\n \n   exec_name = argv[0];\n@@ -197,8 +197,8 @@ gcc_obstack_init (obstack)\n #define OBSTACK_CHUNK_FREE free\n #endif\n   _obstack_begin (obstack, OBSTACK_CHUNK_SIZE, 0,\n-\t\t  (void *(*) ()) OBSTACK_CHUNK_ALLOC,\n-\t\t  (void (*) ()) OBSTACK_CHUNK_FREE);\n+\t\t  (void *(*) (long)) OBSTACK_CHUNK_ALLOC,\n+\t\t  (void (*) (void *)) OBSTACK_CHUNK_FREE);\n }\n \n PTR"}, {"sha": "8422fbc5e05c99fb216c23425210e367f9ff9e18", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -75,16 +75,16 @@ gcc_obstack_init (obstack)\n #define OBSTACK_CHUNK_FREE free\n #endif\n   _obstack_begin (obstack, OBSTACK_CHUNK_SIZE, 0,\n-\t\t  (void *(*) ()) OBSTACK_CHUNK_ALLOC,\n-\t\t  (void (*) ()) OBSTACK_CHUNK_FREE);\n+\t\t  (void *(*) PROTO((long))) OBSTACK_CHUNK_ALLOC,\n+\t\t  (void (*) PROTO((void *))) OBSTACK_CHUNK_FREE);\n }\n \n int\n main (int argc, const char **argv)\n {\n   const char *classname;\n   FILE *stream;\n-  char *mangled_classname;\n+  const char *mangled_classname;\n \n   if (argc < 2 || argc > 3)\n     {"}, {"sha": "3287575952e1dc7071072f9b3cf534db1f26f3e3", "filename": "gcc/java/lang.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -36,6 +36,10 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"flags.h\"\n #include \"xref.h\"\n \n+static void put_decl_string PROTO ((const char *, int));\n+static void put_decl_node PROTO ((tree));\n+static void java_dummy_print PROTO ((const char *));\n+\n #ifndef OBJECT_SUFFIX\n # define OBJECT_SUFFIX \".o\"\n #endif\n@@ -337,7 +341,7 @@ static int decl_bufpos = 0;\n \n static void\n put_decl_string (str, len)\n-     char *str;\n+     const char *str;\n      int len;\n {\n   if (len < 0)\n@@ -475,7 +479,7 @@ lang_print_error (file)\n \tfprintf (stderr, \"At top level:\\n\");\n       else\n \t{\n-\t  char *name = lang_printable_name (current_function_decl, 2);\n+\t  const char *name = lang_printable_name (current_function_decl, 2);\n \t  fprintf (stderr, \"In method `%s':\\n\", name);\n \t}\n \n@@ -487,7 +491,6 @@ lang_print_error (file)\n void\n lang_init ()\n {\n-  extern struct rtx_def * (*lang_expand_expr) ();\n #if 0\n   extern int flag_minimal_debug;\n   flag_minimal_debug = 0;"}, {"sha": "d38a23a173e0d2cf857e40295f56c972f6ea8eb7", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -87,7 +87,7 @@ emit_unicode_mangled_name (obstack, name, len)\n \t  break;\n \t}\n       if (ch >= '0' && ch <= '9')\n-\temit_escape = (ptr == (unsigned char*) name);\n+\temit_escape = (ptr == (const unsigned char *) name);\n       else\n \temit_escape = (ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z');\n       if (emit_escape)"}, {"sha": "c6c1708ec3a9890359abe6adc2d635b82efeb9db", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -34,6 +34,10 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"convert.h\"\n #include \"toplev.h\"\n \n+static tree convert_ieee_real_to_integer PROTO ((tree, tree));\n+static tree parse_signature_type PROTO ((const unsigned char **,\n+\t\t\t\t\t const unsigned char *));\n+\n tree * type_map;\n extern struct obstack permanent_obstack;\n \n@@ -546,7 +550,7 @@ parse_signature_string (sig_string, sig_length)\n tree\n get_type_from_signature (tree signature)\n {\n-  unsigned char *sig = (unsigned char *) IDENTIFIER_POINTER (signature);\n+  const unsigned char *sig = (const unsigned char *) IDENTIFIER_POINTER (signature);\n   int len = IDENTIFIER_LENGTH (signature);\n   tree type;\n   /* Primitive types aren't cached. */"}, {"sha": "07556e850e0c2074db2e05e265c44d76e6296880", "filename": "gcc/java/verify.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -35,6 +35,9 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n static void push_pending_label PROTO ((tree));\n static tree merge_types PROTO ((tree, tree));\n+static const char *check_pending_block PROTO ((tree));\n+static void type_stack_dup PROTO ((int, int));\n+static int start_pc_cmp PROTO ((const PTR, const PTR));\n \n extern int stack_pointer;\n \n@@ -310,8 +313,8 @@ struct pc_index\n /* A helper that is used when sorting exception ranges.  */\n static int\n start_pc_cmp (xp, yp)\n-     const GENERIC_PTR xp;\n-     const GENERIC_PTR yp;\n+     const PTR xp;\n+     const PTR yp;\n {\n   struct pc_index *x = (struct pc_index *) xp;\n   struct pc_index *y = (struct pc_index *) yp;\n@@ -344,7 +347,7 @@ start_pc_cmp (xp, yp)\n int\n verify_jvm_instructions (jcf, byte_ops, length)\n      JCF* jcf;\n-     unsigned char* byte_ops;\n+     const unsigned char *byte_ops;\n      long length;\n {\n   tree label;"}, {"sha": "57241c6cd95b7b35836d09f3e1860b5cc80ffe1e", "filename": "gcc/java/xref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fxref.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -42,7 +42,7 @@ static xref_flag_table xref_table [] = {\n \n int\n xref_flag_value (flag)\n-     char *flag;\n+     const char *flag;\n {\n   int i;\n   for (i = 0; xref_table [i].key; i++)"}, {"sha": "f0db4ef533f90f508cbbd87670fad84d82731b35", "filename": "gcc/java/xref.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fxref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fxref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fxref.h?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -24,7 +24,7 @@ of Sun Microsystems, Inc. in the United States and other countries.\n The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n /* Exported functions. */\n-int xref_flag_value PROTO ((char *));\n+int xref_flag_value PROTO ((const char *));\n void expand_xref PROTO ((tree));\n void xref_set_data PROTO ((int, void *));\n void *xref_get_data PROTO ((int));"}, {"sha": "59fe486fa2e9252fdf0c1646d08fd4af134ff877", "filename": "gcc/java/zextract.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fzextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e7d2e6329fc6b415b86764b55dc6fe56043b71/gcc%2Fjava%2Fzextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fzextract.c?ref=c8e7d2e6329fc6b415b86764b55dc6fe56043b71", "patch": "@@ -206,12 +206,19 @@ typedef unsigned long     ulg;  /*  predefined on some systems) & match zip  */\n #endif\n \n \n+/***********************/\n+/* Prototypes          */\n+/***********************/\n+\n+static ush makeword PROTO ((const uch *));\n+static ulg makelong PROTO ((const uch *));\n+\n /***********************/\n /* Function makeword() */\n /***********************/\n \n static ush makeword(b)\n-    uch *b;\n+    const uch *b;\n {\n     /*\n      * Convert Intel style 'short' integer to non-Intel non-16-bit\n@@ -226,7 +233,7 @@ static ush makeword(b)\n /***********************/\n \n static ulg makelong(sig)\n-    uch *sig;\n+    const uch *sig;\n {\n     /*\n      * Convert intel style 'long' variable to non-Intel non-16-bit"}]}