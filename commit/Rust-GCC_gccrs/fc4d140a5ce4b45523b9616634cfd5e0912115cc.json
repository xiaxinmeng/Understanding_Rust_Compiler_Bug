{"sha": "fc4d140a5ce4b45523b9616634cfd5e0912115cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM0ZDE0MGE1Y2U0YjQ1NTIzYjk2MTY2MzRjZmQ1ZTA5MTIxMTVjYw==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2015-09-10T10:37:17Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-09-10T10:37:17Z"}, "message": "[Patch/expand] Cost instruction sequences when doing left wide shift\n\nPatch background details:\n\n    https://gcc.gnu.org/ml/gcc-patches/2015-08/msg01147.html\n\ngcc/\n  PR rtl-optimization/67421\n  * expr.c (expand_expr_real_2): Cost instrcution sequences when doing left wide\n  shift tranformation.\n\nFrom-SVN: r227629", "tree": {"sha": "e84aa112c9681d409599556739ef87d07606ee5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e84aa112c9681d409599556739ef87d07606ee5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc4d140a5ce4b45523b9616634cfd5e0912115cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc4d140a5ce4b45523b9616634cfd5e0912115cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc4d140a5ce4b45523b9616634cfd5e0912115cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc4d140a5ce4b45523b9616634cfd5e0912115cc/comments", "author": null, "committer": null, "parents": [{"sha": "fb155425c4cd07dcc0326aae14d094c1078ce62e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb155425c4cd07dcc0326aae14d094c1078ce62e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb155425c4cd07dcc0326aae14d094c1078ce62e"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "d5254fa95ea4d8053c4a0c5bd653a16112f14048", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc4d140a5ce4b45523b9616634cfd5e0912115cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc4d140a5ce4b45523b9616634cfd5e0912115cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc4d140a5ce4b45523b9616634cfd5e0912115cc", "patch": "@@ -1,3 +1,9 @@\n+2015-09-10  Jiong Wang  <jiong.wang@arm.com>\n+\n+\tPR rtl-optimization/67421\n+\t* expr.c (expand_expr_real_2): Cost instrcution sequences when doing\n+\tleft wide shift tranformation.\n+\n 2015-09-10  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* common/config/arc/arc-common.c: Remove references to A5."}, {"sha": "cf28f4493096515b8a78d27e35cb4012a91a7b65", "filename": "gcc/expr.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc4d140a5ce4b45523b9616634cfd5e0912115cc/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc4d140a5ce4b45523b9616634cfd5e0912115cc/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=fc4d140a5ce4b45523b9616634cfd5e0912115cc", "patch": "@@ -8892,7 +8892,6 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t    && ! unsignedp\n \t    && mode == GET_MODE_WIDER_MODE (word_mode)\n \t    && GET_MODE_SIZE (mode) == 2 * GET_MODE_SIZE (word_mode)\n-\t    && ! have_insn_for (ASHIFT, mode)\n \t    && TREE_CONSTANT (treeop1)\n \t    && TREE_CODE (treeop0) == SSA_NAME)\n \t  {\n@@ -8908,6 +8907,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t\t    && ((TREE_INT_CST_LOW (treeop1) + GET_MODE_BITSIZE (rmode))\n \t\t\t>= GET_MODE_BITSIZE (word_mode)))\n \t\t  {\n+\t\t    rtx_insn *seq, *seq_old;\n \t\t    unsigned int high_off = subreg_highpart_offset (word_mode,\n \t\t\t\t\t\t\t\t    mode);\n \t\t    rtx low = lowpart_subreg (word_mode, op0, mode);\n@@ -8918,6 +8918,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t\t\t\t\t     - TREE_INT_CST_LOW (treeop1));\n \t\t    tree rshift = build_int_cst (TREE_TYPE (treeop1), ramount);\n \n+\t\t    start_sequence ();\n \t\t    /* dest_high = src_low >> (word_size - C).  */\n \t\t    temp = expand_variable_shift (RSHIFT_EXPR, word_mode, low,\n \t\t\t\t\t\t  rshift, dest_high, unsignedp);\n@@ -8930,7 +8931,28 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t\t    if (temp != dest_low)\n \t\t      emit_move_insn (dest_low, temp);\n \n+\t\t    seq = get_insns ();\n+\t\t    end_sequence ();\n \t\t    temp = target ;\n+\n+\t\t    if (have_insn_for (ASHIFT, mode))\n+\t\t      {\n+\t\t\tbool speed_p = optimize_insn_for_speed_p ();\n+\t\t\tstart_sequence ();\n+\t\t\trtx ret_old = expand_variable_shift (code, mode, op0,\n+\t\t\t\t\t\t\t     treeop1, target,\n+\t\t\t\t\t\t\t     unsignedp);\n+\n+\t\t\tseq_old = get_insns ();\n+\t\t\tend_sequence ();\n+\t\t\tif (seq_cost (seq, speed_p)\n+\t\t\t    >= seq_cost (seq_old, speed_p))\n+\t\t\t  {\n+\t\t\t    seq = seq_old;\n+\t\t\t    temp = ret_old;\n+\t\t\t  }\n+\t\t      }\n+\t\t      emit_insn (seq);\n \t\t  }\n \t      }\n \t  }"}]}