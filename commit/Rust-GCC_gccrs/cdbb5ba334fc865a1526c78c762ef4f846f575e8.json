{"sha": "cdbb5ba334fc865a1526c78c762ef4f846f575e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RiYjViYTMzNGZjODY1YTE1MjZjNzhjNzYyZWY0Zjg0NmY1NzVlOA==", "commit": {"author": {"name": "Artjoms Sinkarovs", "email": "artyom.shinkaroff@gmail.com", "date": "2011-10-11T16:10:59Z"}, "committer": {"name": "Artjoms Sinkarovs", "email": "tema@gcc.gnu.org", "date": "2011-10-11T16:10:59Z"}, "message": "New warning -Wvector-operation-performance.\n\nFrom-SVN: r179807", "tree": {"sha": "5e4c7a723a41eb07f45510f857a8dd2df7d55973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e4c7a723a41eb07f45510f857a8dd2df7d55973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdbb5ba334fc865a1526c78c762ef4f846f575e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdbb5ba334fc865a1526c78c762ef4f846f575e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdbb5ba334fc865a1526c78c762ef4f846f575e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdbb5ba334fc865a1526c78c762ef4f846f575e8/comments", "author": {"login": "ashinkarov", "id": 892232, "node_id": "MDQ6VXNlcjg5MjIzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/892232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashinkarov", "html_url": "https://github.com/ashinkarov", "followers_url": "https://api.github.com/users/ashinkarov/followers", "following_url": "https://api.github.com/users/ashinkarov/following{/other_user}", "gists_url": "https://api.github.com/users/ashinkarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashinkarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashinkarov/subscriptions", "organizations_url": "https://api.github.com/users/ashinkarov/orgs", "repos_url": "https://api.github.com/users/ashinkarov/repos", "events_url": "https://api.github.com/users/ashinkarov/events{/privacy}", "received_events_url": "https://api.github.com/users/ashinkarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "945bad22b8b3fd10d1adddafc002223f3ad993b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945bad22b8b3fd10d1adddafc002223f3ad993b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/945bad22b8b3fd10d1adddafc002223f3ad993b0"}], "stats": {"total": 124, "additions": 120, "deletions": 4}, "files": [{"sha": "3aeb6abeda5297ce493b4709644e2c46c65d8588", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdbb5ba334fc865a1526c78c762ef4f846f575e8", "patch": "@@ -1,3 +1,14 @@\n+2011-10-11  Artjoms Sinkarovs  <artyom.shinkaroff@gmail.com>\n+\n+\t* doc/invoke.texi: Document new warning.\n+\t* common.opt (Wvector-operation-performance): Define new warning.\n+\t* tree-vect-generic.c (expand_vector_piecewise): Warn about expanded\n+\tvector operation.\n+\t(exapnd_vector_parallel): Warn about expanded vector operation.\n+\t(lower_vec_shuffle): Warn about expanded vector operation.\n+\t* c-typeck.c (c_build_vec_perm_expr): Store correct location\n+\twhen creating VEC_PERM_EXPR.\n+\n 2011-10-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/50204"}, {"sha": "d0a0b5ef07c5f60bb442ec649cd99da4c92dac21", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=cdbb5ba334fc865a1526c78c762ef4f846f575e8", "patch": "@@ -2930,7 +2930,7 @@ c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask)\n   mask = c_fully_fold (mask, false, &maybe_const);\n   wrap &= maybe_const;\n \n-  ret = build3 (VEC_PERM_EXPR, TREE_TYPE (v0), v0, v1, mask);\n+  ret = build3_loc (loc, VEC_PERM_EXPR, TREE_TYPE (v0), v0, v1, mask);\n \n   if (!wrap)\n     ret = c_wrap_maybe_const (ret, true);"}, {"sha": "13bbf9e75884e2c342df26553a8148f83844f17f", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=cdbb5ba334fc865a1526c78c762ef4f846f575e8", "patch": "@@ -694,6 +694,10 @@ Wcoverage-mismatch\n Common Var(warn_coverage_mismatch) Init(1) Warning\n Warn in case profiles in -fprofile-use do not match\n \n+Wvector-operation-performance\n+Common Var(warn_vector_operation_performance) Warning\n+Warn when a vector operation is compiled outside the SIMD\n+\n Xassembler\n Driver Separate\n "}, {"sha": "8be5e2522cbd7a697dc6210c9176e0edc14f3dbb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cdbb5ba334fc865a1526c78c762ef4f846f575e8", "patch": "@@ -271,7 +271,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wunused-label  -Wunused-local-typedefs -Wunused-parameter @gol\n -Wno-unused-result -Wunused-value @gol -Wunused-variable @gol\n -Wunused-but-set-parameter -Wunused-but-set-variable @gol\n--Wvariadic-macros -Wvla -Wvolatile-register-var  -Wwrite-strings}\n+-Wvariadic-macros -Wvector-operation-performance -Wvla \n+-Wvolatile-register-var  -Wwrite-strings}\n \n @item C and Objective-C-only Warning Options\n @gccoptlist{-Wbad-function-cast  -Wmissing-declarations @gol\n@@ -4542,6 +4543,18 @@ Warn if variadic macros are used in pedantic ISO C90 mode, or the GNU\n alternate syntax when in pedantic ISO C99 mode.  This is default.\n To inhibit the warning messages, use @option{-Wno-variadic-macros}.\n \n+@item -Wvector-operation-performance\n+@opindex Wvector-operation-performance\n+@opindex Wno-vector-operation-performance\n+Warn if vector operation is not implemented via SIMD capabilities of the\n+architecture.  Mainly useful for the performance tuning.\n+Vector operation can be implemented @code{piecewise} which means that the\n+scalar operation is performed on every vector element; \n+@code{in parallel} which means that the vector operation is implemented\n+using scalars of wider type, which normally is more performance efficient;\n+and @code{as a single scalar} which means that vector fits into a\n+scalar type.\n+\n @item -Wvla\n @opindex Wvla\n @opindex Wno-vla"}, {"sha": "b8e7eba2c373f3a3497bf87691bc5dac77bce5a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdbb5ba334fc865a1526c78c762ef4f846f575e8", "patch": "@@ -1,3 +1,9 @@\n+2011-10-11  Artjoms Sinkarovs  <artyom.shinkaroff@gmail.com>\n+\n+\t* gcc.target/i386/warn-vect-op-3.c: New test.\n+\t* gcc.target/i386/warn-vect-op-1.c: New test.\n+\t* gcc.target/i386/warn-vect-op-2.c: New test.\n+\n 2011-10-11  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc.dg/pr49994-3.c: Add -mbackchain for s390 and s390x."}, {"sha": "f87cf5996fa669d445d9855d6bd4b9db6e9215ca", "filename": "gcc/testsuite/gcc.target/i386/warn-vect-op-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-1.c?ref=cdbb5ba334fc865a1526c78c762ef4f846f575e8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-mno-sse -Wvector-operation-performance\" }  */\n+#define vector(elcount, type)  \\\n+__attribute__((vector_size((elcount)*sizeof(type)))) type\n+\n+int main (int argc, char *argv[])\n+{\n+  vector (4, int) v0 = {argc, 1, 15, 38};\n+  vector (4, int) v1 = {-4, argc, 2, 11};\n+  vector (4, int) res[] = \n+  {\n+    v0 + v1,\t  /* { dg-warning \"expanded piecewise\" }  */\n+    v0 - v1,\t  /* { dg-warning \"expanded piecewise\" }  */\n+    v0 > v1,\t  /* { dg-warning \"expanded piecewise\" }  */\n+    v0 & v1,\t  /* { dg-warning \"expanded in parallel\" }  */\n+    __builtin_shuffle (v0, v1),\t    /* { dg-warning \"expanded piecewise\" }  */\n+    __builtin_shuffle (v0, v1, v1)  /* { dg-warning \"expanded piecewise\" }  */  \n+  };\n+\n+  return res[argc][argc];\n+}"}, {"sha": "f081d8a9dbef763086ed7de54d003155fd815f2a", "filename": "gcc/testsuite/gcc.target/i386/warn-vect-op-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c?ref=cdbb5ba334fc865a1526c78c762ef4f846f575e8", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-mno-sse -Wvector-operation-performance\" }  */\n+#define vector(elcount, type)  \\\n+__attribute__((vector_size((elcount)*sizeof(type)))) type\n+\n+int main (int argc, char *argv[])\n+{\n+  vector (16, signed char) v0 = {argc, 1, 15, 38, 12, -1, argc, 2, \n+\t\t\t\t argc, 1, 15, 38, 12, -1, argc, 2};\n+  vector (16, signed char) v1 = {-4, argc, 2, 11, 1, 17, -8, argc,\n+\t\t\t\t argc, 1, 15, 38, 12, -1, argc, 2};\n+  vector (16, signed char) res[] = \n+  {\n+    v0 + v1,\t\t  /* { dg-warning \"expanded in parallel\" }  */\n+    v0 - v1,              /* { dg-warning \"expanded in parallel\" }  */\n+    v0 > v1,              /* { dg-warning \"expanded piecewise\" }  */\n+    v0 & v1,              /* { dg-warning \"expanded in parallel\" }  */\n+    __builtin_shuffle (v0, v1),        /* { dg-warning \"expanded piecewise\" }  */\n+    __builtin_shuffle (v0, v1, v1)     /* { dg-warning \"expanded piecewise\" }  */\n+  };\n+ \n+  return res[argc][argc];\n+}"}, {"sha": "ccb9e988451bfe06e9e4cc0af3141c0ccecc93ce", "filename": "gcc/testsuite/gcc.target/i386/warn-vect-op-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-3.c?ref=cdbb5ba334fc865a1526c78c762ef4f846f575e8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-mno-sse -Wvector-operation-performance\" }  */\n+#define vector(elcount, type)  \\\n+__attribute__((vector_size((elcount)*sizeof(type)))) type\n+\n+int main (int argc, char *argv[])\n+{\n+  vector (8, short) v0 = {argc, 1, 15, 38, 12, -1, argc, 2};\n+  vector (8, short) v1 = {-4, argc, 2, 11, 1, 17, -8, argc};\n+  vector (8, short) res[] = \n+  {\n+    v0 + v1,\t      /* { dg-warning \"expanded in parallel\" }  */\n+    v0 - v1,          /* { dg-warning \"expanded in parallel\" }  */\n+    v0 > v1,          /* { dg-warning \"expanded piecewise\" }  */\n+    v0 & v1,          /* { dg-warning \"expanded in parallel\" }  */\n+    __builtin_shuffle (v0, v1),\t      /* { dg-warning \"expanded piecewise\" }  */\n+    __builtin_shuffle (v0, v1, v1)    /* { dg-warning \"expanded piecewise\" }  */\n+  };\n+  \n+  return res[argc][argc];\n+}"}, {"sha": "4e79b15ce04fa86614270bae01a1393b8fd413e7", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbb5ba334fc865a1526c78c762ef4f846f575e8/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=cdbb5ba334fc865a1526c78c762ef4f846f575e8", "patch": "@@ -235,6 +235,14 @@ expand_vector_piecewise (gimple_stmt_iterator *gsi, elem_op_func f,\n   int delta = tree_low_cst (part_width, 1)\n \t      / tree_low_cst (TYPE_SIZE (TREE_TYPE (type)), 1);\n   int i;\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n+\n+  if (types_compatible_p (gimple_expr_type (gsi_stmt (*gsi)), type))\n+    warning_at (loc, OPT_Wvector_operation_performance,\n+\t\t\"vector operation will be expanded piecewise\");\n+  else\n+    warning_at (loc, OPT_Wvector_operation_performance,\n+\t\t\"vector operation will be expanded in parallel\");\n \n   v = VEC_alloc(constructor_elt, gc, (nunits + delta - 1) / delta);\n   for (i = 0; i < nunits;\n@@ -260,6 +268,7 @@ expand_vector_parallel (gimple_stmt_iterator *gsi, elem_op_func f, tree type,\n   tree result, compute_type;\n   enum machine_mode mode;\n   int n_words = tree_low_cst (TYPE_SIZE_UNIT (type), 1) / UNITS_PER_WORD;\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n \n   /* We have three strategies.  If the type is already correct, just do\n      the operation an element at a time.  Else, if the vector is wider than\n@@ -284,6 +293,9 @@ expand_vector_parallel (gimple_stmt_iterator *gsi, elem_op_func f, tree type,\n       mode = mode_for_size (tree_low_cst (TYPE_SIZE (type), 1), MODE_INT, 0);\n       compute_type = lang_hooks.types.type_for_mode (mode, 1);\n       result = f (gsi, compute_type, a, b, NULL_TREE, NULL_TREE, code);\n+      warning_at (loc, OPT_Wvector_operation_performance,\n+\t          \"vector operation will be expanded with a \"\n+\t\t  \"single scalar operation\");\n     }\n \n   return result;\n@@ -400,8 +412,8 @@ expand_vector_operation (gimple_stmt_iterator *gsi, tree type, tree compute_type\n       case PLUS_EXPR:\n       case MINUS_EXPR:\n         if (!TYPE_OVERFLOW_TRAPS (type))\n-          return expand_vector_addition (gsi, do_binop, do_plus_minus, type,\n-\t\t      \t\t         gimple_assign_rhs1 (assign),\n+\t  return expand_vector_addition (gsi, do_binop, do_plus_minus, type,\n+\t\t\t\t\t gimple_assign_rhs1 (assign),\n \t\t\t\t\t gimple_assign_rhs2 (assign), code);\n \tbreak;\n \n@@ -626,10 +638,15 @@ lower_vec_perm (gimple_stmt_iterator *gsi)\n   tree constr, t, si, i_val;\n   tree vec0tmp = NULL_TREE, vec1tmp = NULL_TREE, masktmp = NULL_TREE;\n   bool two_operand_p = !operand_equal_p (vec0, vec1, 0);\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n   unsigned i;\n \n   if (expand_vec_perm_expr_p (TYPE_MODE (vect_type), vec0, vec1, mask))\n     return;\n+  \n+  warning_at (loc, OPT_Wvector_operation_performance,\n+              \"vector shuffling operation will be expanded piecewise\");\n+\n \n   v = VEC_alloc (constructor_elt, gc, elements);\n   for (i = 0; i < elements; i++)"}]}