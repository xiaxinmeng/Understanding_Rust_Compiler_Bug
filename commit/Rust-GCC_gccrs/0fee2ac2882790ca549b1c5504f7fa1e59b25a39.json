{"sha": "0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZlZTJhYzI4ODI3OTBjYTU0OWIxYzU1MDRmN2ZhMWU1OWIyNWEzOQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-05-21T06:49:38Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-05-21T06:49:38Z"}, "message": "re PR c/52952 (Wformat location info is bad (wrong column number))\n\ngcc/testsuite/ChangeLog:\n\n2015-05-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/52952\n\t* gcc.dg/redecl-4.c: Update column numbers.\n\t* gcc.dg/format/bitfld-1.c: Likewise.\n\t* gcc.dg/format/attr-2.c: Likewise.\n\t* gcc.dg/format/attr-6.c: Likewise.\n\t* gcc.dg/format/attr-7.c (baz): Likewise.\n\t* gcc.dg/format/asm_fprintf-1.c: Likewise.\n\t* gcc.dg/format/attr-4.c: Likewise.\n\t* gcc.dg/format/branch-1.c: Likewise.\n\t* gcc.dg/format/c90-printf-1.c: Likewise. Add tests for column\n\tlocations within strings with embedded escape sequences.\n\ngcc/c-family/ChangeLog:\n\n2015-05-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\t\n\tPR c/52952\n\t* c-format.c (location_column_from_byte_offset): New.\n\t(location_from_offset): New.\n\t(struct format_wanted_type): Add offset_loc field.\n\t(check_format_info): Move handling of location for extra arguments\n\tcloser to the point of warning.\n\t(check_format_info_main): Pass the result of location_from_offset\n\tto warning_at.\n\t(format_type_warning): Pass the result of location_from_offset\n\tto warning_at.\n\nFrom-SVN: r223470", "tree": {"sha": "339d4f9e9dc8f2baacaec5f92a172caf24d16c36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/339d4f9e9dc8f2baacaec5f92a172caf24d16c36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/comments", "author": null, "committer": null, "parents": [{"sha": "a4f238b6d7ecee86b9c0a664b44add65058b0a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f238b6d7ecee86b9c0a664b44add65058b0a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f238b6d7ecee86b9c0a664b44add65058b0a91"}], "stats": {"total": 441, "additions": 298, "deletions": 143}, "files": [{"sha": "20a73e6d6ff39acf055f0807fb49bffb17425a18", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -1,3 +1,16 @@\n+2015-05-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\t\n+\tPR c/52952\n+\t* c-format.c (location_column_from_byte_offset): New.\n+\t(location_from_offset): New.\n+\t(struct format_wanted_type): Add offset_loc field.\n+\t(check_format_info): Move handling of location for extra arguments\n+\tcloser to the point of warning.\n+\t(check_format_info_main): Pass the result of location_from_offset\n+\tto warning_at.\n+\t(format_type_warning): Pass the result of location_from_offset\n+\tto warning_at.\n+\n 2015-05-20  Marek Polacek  <polacek@redhat.com>\n \n \t* c-omp.c (check_omp_for_incr_expr): Use BINARY_CLASS_P."}, {"sha": "145bbfd393f09f18d28acfea3bbc6e17825162e0", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 136, "deletions": 20, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -78,6 +78,78 @@ static int first_target_format_type;\n static const char *format_name (int format_num);\n static int format_flags (int format_num);\n \n+/* Given a string S of length LINE_WIDTH, find the visual column\n+   corresponding to OFFSET bytes.   */\n+\n+static unsigned int\n+location_column_from_byte_offset (const char *s, int line_width,\n+\t\t\t\t  unsigned int offset)\n+{\n+  const char * c = s;\n+  if (*c != '\"')\n+    return 0;\n+\n+  c++, offset--;\n+  while (offset > 0)\n+    {\n+      if (c - s >= line_width)\n+\treturn 0;\n+\n+      switch (*c)\n+\t{\n+\tcase '\\\\':\n+\t  c++;\n+\t  if (c - s >= line_width)\n+\t    return 0;\n+\t  switch (*c)\n+\t    {\n+\t    case '\\\\': case '\\'': case '\"': case '?':\n+\t    case '(': case '{': case '[': case '%':\n+\t    case 'a': case 'b': case 'f': case 'n':\n+\t    case 'r': case 't': case 'v': \n+\t    case 'e': case 'E':\n+\t      c++, offset--;\n+\t      break;\n+\n+\t    default:\n+\t      return 0;\n+\t    }\n+\t  break;\n+\n+\tcase '\"':\n+\t  /* We found the end of the string too early.  */\n+\t  return 0;\n+\t  \n+\tdefault:\n+\t  c++, offset--;\n+\t  break;\n+\t}\n+    }\n+  return c - s;\n+}\n+\n+/* Return a location that encodes the same location as LOC but shifted\n+   by OFFSET bytes.  */\n+\n+static location_t\n+location_from_offset (location_t loc, int offset)\n+{\n+  gcc_checking_assert (offset >= 0);\n+  if (linemap_location_from_macro_expansion_p (line_table, loc)\n+      || offset < 0)\n+    return loc;\n+\n+  expanded_location s = expand_location_to_spelling_point (loc);\n+  int line_width;\n+  const char *line = location_get_source_line (s, &line_width);\n+  line += s.column - 1 ;\n+  line_width -= s.column - 1;\n+  unsigned int column = \n+    location_column_from_byte_offset (line, line_width, (unsigned) offset);\n+\n+  return linemap_position_for_loc_and_offset (line_table, loc, column);\n+}\n+\n /* Check that we have a pointer to a string suitable for use as a format.\n    The default is to check for a char type.\n    For objective-c dialects, this is extended to include references to string\n@@ -390,6 +462,9 @@ typedef struct format_wanted_type\n   tree param;\n   /* The argument number of that parameter.  */\n   int arg_num;\n+  /* The offset location of this argument with respect to the format\n+     string location.  */\n+  unsigned int offset_loc;\n   /* The next type to check for this format conversion, or NULL if none.  */\n   struct format_wanted_type *next;\n } format_wanted_type;\n@@ -1358,8 +1433,6 @@ check_format_info (function_format_info *info, tree params)\n \t\t\t\t    format_tree, arg_num);\n \n   location_t loc = format_ctx.res->format_string_loc;\n-  if (res.extra_arg_loc == UNKNOWN_LOCATION)\n-    res.extra_arg_loc = loc;\n \n   if (res.number_non_literal > 0)\n     {\n@@ -1405,8 +1478,12 @@ check_format_info (function_format_info *info, tree params)\n      case of extra format arguments.  */\n   if (res.number_extra_args > 0 && res.number_non_literal == 0\n       && res.number_other == 0)\n-    warning_at (res.extra_arg_loc, OPT_Wformat_extra_args,\n-\t\t\"too many arguments for format\");\n+    {\n+      if (res.extra_arg_loc == UNKNOWN_LOCATION)\n+\tres.extra_arg_loc = loc;\n+      warning_at (res.extra_arg_loc, OPT_Wformat_extra_args,\n+\t\t  \"too many arguments for format\");\n+    }\n   if (res.number_dollar_extra_args > 0 && res.number_non_literal == 0\n       && res.number_other == 0)\n     warning_at (loc, OPT_Wformat_extra_args, \"unused arguments in $-style format\");\n@@ -1682,7 +1759,9 @@ check_format_info_main (format_check_results *res,\n \tcontinue;\n       if (*format_chars == 0)\n \t{\n-          warning_at (format_string_loc, OPT_Wformat_,\n+          warning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t    format_chars - orig_format_chars),\n+\t\t      OPT_Wformat_,\n \t\t      \"spurious trailing %<%%%> in format\");\n \t  continue;\n \t}\n@@ -1727,7 +1806,10 @@ check_format_info_main (format_check_results *res,\n \t\t\t\t\t\t     *format_chars, NULL);\n \t  if (strchr (flag_chars, *format_chars) != 0)\n \t    {\n-\t      warning_at (format_string_loc, OPT_Wformat_,\n+\t      warning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t\tformat_chars + 1\n+\t\t\t\t\t\t- orig_format_chars),\n+\t\t\t  OPT_Wformat_,\n \t\t\t  \"repeated %s in format\", _(s->name));\n \t    }\n \t  else\n@@ -1807,6 +1889,8 @@ check_format_info_main (format_check_results *res,\n \t\t  width_wanted_type.format_length = 1;\n \t\t  width_wanted_type.param = cur_param;\n \t\t  width_wanted_type.arg_num = arg_num;\n+\t\t  width_wanted_type.offset_loc =\n+\t\t    format_chars - orig_format_chars;\n \t\t  width_wanted_type.next = NULL;\n \t\t  if (last_wanted_type != 0)\n \t\t    last_wanted_type->next = &width_wanted_type;\n@@ -1849,7 +1933,9 @@ check_format_info_main (format_check_results *res,\n \t  flag_chars[i++] = fki->left_precision_char;\n \t  flag_chars[i] = 0;\n \t  if (!ISDIGIT (*format_chars))\n-\t    warning_at (format_string_loc, OPT_Wformat_,\n+\t    warning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t      format_chars - orig_format_chars),\n+\t\t\tOPT_Wformat_,\n \t\t\t\"empty left precision in %s format\", fki->name);\n \t  while (ISDIGIT (*format_chars))\n \t    ++format_chars;\n@@ -1914,6 +2000,8 @@ check_format_info_main (format_check_results *res,\n \t\t  precision_wanted_type.format_start = format_chars - 2;\n \t\t  precision_wanted_type.format_length = 2;\n \t\t  precision_wanted_type.arg_num = arg_num;\n+\t\t  precision_wanted_type.offset_loc =\n+\t\t    format_chars - orig_format_chars;\n \t\t  precision_wanted_type.next = NULL;\n \t\t  if (last_wanted_type != 0)\n \t\t    last_wanted_type->next = &precision_wanted_type;\n@@ -1926,7 +2014,9 @@ check_format_info_main (format_check_results *res,\n \t    {\n \t      if (!(fki->flags & (int) FMT_FLAG_EMPTY_PREC_OK)\n \t\t  && !ISDIGIT (*format_chars))\n-\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\twarning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t\t  format_chars - orig_format_chars),\n+\t\t\t    OPT_Wformat_,\n \t\t\t    \"empty precision in %s format\", fki->name);\n \t      while (ISDIGIT (*format_chars))\n \t\t++format_chars;\n@@ -2012,7 +2102,10 @@ check_format_info_main (format_check_results *res,\n \t\t{\n \t\t  const format_flag_spec *s = get_flag_spec (flag_specs,\n \t\t\t\t\t\t\t     *format_chars, NULL);\n-\t\t  warning_at (format_string_loc, OPT_Wformat_,\n+\t\t  warning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t\t    format_chars \n+\t\t\t\t\t\t    - orig_format_chars),\n+\t\t\t      OPT_Wformat_,\n \t\t\t      \"repeated %s in format\", _(s->name));\n \t\t}\n \t      else\n@@ -2030,7 +2123,9 @@ check_format_info_main (format_check_results *res,\n \t  || (!(fki->flags & (int) FMT_FLAG_FANCY_PERCENT_OK)\n \t      && format_char == '%'))\n \t{\n-\t  warning_at (format_string_loc, OPT_Wformat_,\n+\t  warning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t    format_chars - orig_format_chars),\n+\t\t      OPT_Wformat_,\n \t\t      \"conversion lacks type at end of format\");\n \t  continue;\n \t}\n@@ -2042,19 +2137,25 @@ check_format_info_main (format_check_results *res,\n       if (fci->format_chars == 0)\n \t{\n \t  if (ISGRAPH (format_char))\n-\t    warning_at (format_string_loc, OPT_Wformat_,\n+\t    warning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t      format_chars - orig_format_chars),\n+\t\t\tOPT_Wformat_,\n \t\t\t\"unknown conversion type character %qc in format\",\n \t\t\tformat_char);\n \t  else\n-\t    warning_at (format_string_loc, OPT_Wformat_,\n+\t    warning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t      format_chars - orig_format_chars),\n+\t\t\tOPT_Wformat_,\n \t\t\t\"unknown conversion type character 0x%x in format\",\n \t\t\tformat_char);\n \t  continue;\n \t}\n       if (pedantic)\n \t{\n \t  if (ADJ_STD (fci->std) > C_STD_VER)\n-\t    warning_at (format_string_loc, OPT_Wformat_,\n+\t    warning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t      format_chars - orig_format_chars),\n+\t\t\tOPT_Wformat_,\n \t\t\t\"%s does not support the %<%%%c%> %s format\",\n \t\t\tC_STD_NAME (fci->std), format_char, fki->name);\n \t}\n@@ -2071,8 +2172,10 @@ check_format_info_main (format_check_results *res,\n \t      continue;\n \t    if (strchr (fci->flag_chars, flag_chars[i]) == 0)\n \t      {\n-\t\twarning_at (format_string_loc, \n-                            OPT_Wformat_, \"%s used with %<%%%c%> %s format\",\n+\t\twarning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t\t  format_chars \n+\t\t\t\t\t\t  - orig_format_chars),\n+\t\t\t    OPT_Wformat_, \"%s used with %<%%%c%> %s format\",\n \t\t\t    _(s->name), format_char, fki->name);\n \t\td++;\n \t\tcontinue;\n@@ -2186,7 +2289,9 @@ check_format_info_main (format_check_results *res,\n \t    ++format_chars;\n \t  if (*format_chars != ']')\n \t    /* The end of the format string was reached.  */\n-\t    warning_at (format_string_loc, OPT_Wformat_,\n+\t    warning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t      format_chars - orig_format_chars),\n+\t\t\tOPT_Wformat_,\n \t\t\t\"no closing %<]%> for %<%%[%> format\");\n \t}\n \n@@ -2200,8 +2305,11 @@ check_format_info_main (format_check_results *res,\n \t  wanted_type_std = fci->types[length_chars_val].std;\n \t  if (wanted_type == 0)\n \t    {\n-\t      warning_at (format_string_loc, OPT_Wformat_,\n-\t\t\t  \"use of %qs length modifier with %qc type character\",\n+\t      warning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t\tformat_chars - orig_format_chars),\n+\t\t\t  OPT_Wformat_,\n+\t\t\t  \"use of %qs length modifier with %qc type character\"\n+\t\t\t  \" has either no effect or undefined behavior\",\n \t\t\t  length_chars, format_char);\n \t      /* Heuristic: skip one argument when an invalid length/type\n \t\t combination is encountered.  */\n@@ -2218,7 +2326,9 @@ check_format_info_main (format_check_results *res,\n \t\t   && ADJ_STD (wanted_type_std) > ADJ_STD (fci->std))\n \t    {\n \t      if (ADJ_STD (wanted_type_std) > C_STD_VER)\n-\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\twarning_at (location_from_offset (format_string_loc,\n+\t\t\t\t\t\t  format_chars - orig_format_chars),\n+\t\t\t    OPT_Wformat_,\n \t\t\t    \"%s does not support the %<%%%s%c%> %s format\",\n \t\t\t    C_STD_NAME (wanted_type_std), length_chars,\n \t\t\t    format_char, fki->name);\n@@ -2303,6 +2413,7 @@ check_format_info_main (format_check_results *res,\n \t      wanted_type_ptr->arg_num = arg_num;\n \t      wanted_type_ptr->format_start = format_start;\n \t      wanted_type_ptr->format_length = format_chars - format_start;\n+\t      wanted_type_ptr->offset_loc = format_chars - orig_format_chars;\n \t      wanted_type_ptr->next = NULL;\n \t      if (last_wanted_type != 0)\n \t\tlast_wanted_type->next = wanted_type_ptr;\n@@ -2327,7 +2438,9 @@ check_format_info_main (format_check_results *res,\n     }\n \n   if (format_chars - orig_format_chars != format_length)\n-    warning_at (format_string_loc, OPT_Wformat_contains_nul,\n+    warning_at (location_from_offset (format_string_loc,\n+\t\t\t\t      format_chars + 1 - orig_format_chars),\n+\t\tOPT_Wformat_contains_nul,\n \t\t\"embedded %<\\\\0%> in format\");\n   if (info->first_arg_num != 0 && params != 0\n       && has_operand_number <= 0)\n@@ -2535,6 +2648,7 @@ format_type_warning (location_t loc, format_wanted_type *type,\n   int format_length = type->format_length;\n   int pointer_count = type->pointer_count;\n   int arg_num = type->arg_num;\n+  unsigned int offset_loc = type->offset_loc;\n \n   char *p;\n   /* If ARG_TYPE is a typedef with a misleading name (for example,\n@@ -2568,6 +2682,8 @@ format_type_warning (location_t loc, format_wanted_type *type,\n       p[pointer_count + 1] = 0;\n     }\n \n+  loc = location_from_offset (loc, offset_loc);\n+\t\t      \n   if (wanted_type_name)\n     {\n       if (arg_type)"}, {"sha": "868e1e941daa17f59232572ba10c3eaf9bd306c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -1,3 +1,17 @@\n+2015-05-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/52952\n+\t* gcc.dg/redecl-4.c: Update column numbers.\n+\t* gcc.dg/format/bitfld-1.c: Likewise.\n+\t* gcc.dg/format/attr-2.c: Likewise.\n+\t* gcc.dg/format/attr-6.c: Likewise.\n+\t* gcc.dg/format/attr-7.c (baz): Likewise.\n+\t* gcc.dg/format/asm_fprintf-1.c: Likewise.\n+\t* gcc.dg/format/attr-4.c: Likewise.\n+\t* gcc.dg/format/branch-1.c: Likewise.\n+\t* gcc.dg/format/c90-printf-1.c: Likewise. Add tests for column\n+\tlocations within strings with embedded escape sequences.\n+\n 2015-05-20  Alex Velenko  <Alex.Velenko@arm.com>\n \n         * gcc.target/arm/thumb1-far-jump-2.c (r4): Added int in definition."}, {"sha": "2eabbf9190e03ebab77e5a3bf2c96aff2d651e88", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-1.c", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -42,39 +42,40 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   asm_fprintf (\"%wd%wi%wo%wu%wx%wX\", ll, ll, ull, ull, ull, ull);\n \n   /* Standard specifiers not accepted in asm_fprintf.  */\n-  asm_fprintf (\"%f\\n\", d); /* { dg-warning \"16:format\" \"float\" } */\n-  asm_fprintf (\"%e\\n\", d); /* { dg-warning \"16:format\" \"float\" } */\n-  asm_fprintf (\"%E\\n\", d); /* { dg-warning \"16:format\" \"float\" } */\n-  asm_fprintf (\"%g\\n\", d); /* { dg-warning \"16:format\" \"float\" } */\n-  asm_fprintf (\"%G\\n\", d); /* { dg-warning \"16:format\" \"float\" } */\n-  asm_fprintf (\"%p\\n\", p); /* { dg-warning \"16:format\" \"pointer\" } */\n-  asm_fprintf (\"%n\\n\", n); /* { dg-warning \"16:format\" \"counter\" } */\n-  asm_fprintf (\"%hd\\n\", i); /* { dg-warning \"16:format\" \"conversion\" } */\n+  asm_fprintf (\"%f\\n\", d); /* { dg-warning \"18:format\" \"float\" } */\n+  asm_fprintf (\"%e\\n\", d); /* { dg-warning \"18:format\" \"float\" } */\n+  asm_fprintf (\"%E\\n\", d); /* { dg-warning \"18:format\" \"float\" } */\n+  asm_fprintf (\"%g\\n\", d); /* { dg-warning \"18:format\" \"float\" } */\n+  asm_fprintf (\"%G\\n\", d); /* { dg-warning \"18:format\" \"float\" } */\n+  asm_fprintf (\"%p\\n\", p); /* { dg-warning \"18:format\" \"pointer\" } */\n+  asm_fprintf (\"%n\\n\", n); /* { dg-warning \"18:format\" \"counter\" } */\n+  asm_fprintf (\"%hd\\n\", i); /* { dg-warning \"18:format\" \"conversion\" } */\n \n   /* Various tests of bad argument types.  */\n-  asm_fprintf (\"%d\", l); /* { dg-warning \"16:format\" \"bad argument types\" } */\n-  asm_fprintf (\"%wd\", l); /* { dg-warning \"16:format\" \"bad argument types\" } */\n-  asm_fprintf (\"%d\", ll); /* { dg-warning \"16:format\" \"bad argument types\" } */\n-  asm_fprintf (\"%*d\\n\", i1, i); /* { dg-warning \"16:format\" \"bad * argument types\" } */\n-  asm_fprintf (\"%.*d\\n\", i2, i); /* { dg-warning \"16:format\" \"bad * argument types\" } */\n-  asm_fprintf (\"%*.*ld\\n\", i1, i2, l); /* { dg-warning \"16:format\" \"bad * argument types\" } */\n-  asm_fprintf (\"%ld\", i); /* { dg-warning \"16:format\" \"bad argument types\" } */\n-  asm_fprintf (\"%s\", n); /* { dg-warning \"16:format\" \"bad argument types\" } */\n+  asm_fprintf (\"%d\", l); /* { dg-warning \"18:format\" \"bad argument types\" } */\n+  asm_fprintf (\"%wd\", l); /* { dg-warning \"19:format\" \"bad argument types\" } */\n+  asm_fprintf (\"%d\", ll); /* { dg-warning \"18:format\" \"bad argument types\" } */\n+  asm_fprintf (\"%*d\\n\", i1, i); /* { dg-warning \"18:format\" \"bad * argument types\" } */\n+  asm_fprintf (\"%.*d\\n\", i2, i); /* { dg-warning \"19:format\" \"bad * argument types\" } */\n+  asm_fprintf (\"%*.*ld\\n\", i1, i2, l); /* { dg-warning \"18:format\" \"bad * argument types\" } */\n+  asm_fprintf (\"%ld\", i); /* { dg-warning \"19:format\" \"bad argument types\" } */\n+  asm_fprintf (\"%s\", n); /* { dg-warning \"18:format\" \"bad argument types\" } */\n \n   /* Wrong number of arguments.  */\n-  asm_fprintf (\"%d%d\", i); /* { dg-warning \"16:matching\" \"wrong number of args\" } */\n+  asm_fprintf (\"%d%d\", i); /* { dg-warning \"20:matching\" \"wrong number of args\" } */\n   asm_fprintf (\"%d\", i, i); /* { dg-warning \"16:arguments\" \"wrong number of args\" } */\n   /* Miscellaneous bogus constructions.  */\n   asm_fprintf (\"\"); /* { dg-warning \"16:zero-length\" \"warning for empty format\" } */\n-  asm_fprintf (\"\\0\"); /* { dg-warning \"16:embedded\" \"warning for embedded NUL\" } */\n-  asm_fprintf (\"%d\\0\", i); /* { dg-warning \"16:embedded\" \"warning for embedded NUL\" } */\n-  asm_fprintf (\"%d\\0%d\", i, i); /* { dg-warning \"16:embedded|too many\" \"warning for embedded NUL\" } */\n+  asm_fprintf (\"\\0\"); /* { dg-warning \"17:embedded\" \"warning for embedded NUL\" } */\n+  asm_fprintf (\"%d\\0\", i); /* { dg-warning \"19:embedded\" \"warning for embedded NUL\" } */\n+  asm_fprintf (\"%d\\0%d\", i, i); /* { dg-warning \"19:embedded|too many\" \"warning for embedded NUL\" } */\n   asm_fprintf (NULL); /* { dg-warning \"null\" \"null format string warning\" } */\n-  asm_fprintf (\"%\"); /* { dg-warning \"16:trailing\" \"trailing % warning\" } */\n-  asm_fprintf (\"%++d\", i); /* { dg-warning \"16:repeated\" \"repeated flag warning\" } */\n+  asm_fprintf (\"%\"); /* { dg-warning \"17:trailing\" \"trailing % warning\" } */\n+  asm_fprintf (\"%++d\", i); /* { dg-warning \"19:repeated\" \"repeated flag warning\" } */\n   asm_fprintf ((const char *)L\"foo\"); /* { dg-warning \"30:wide\" \"wide string\" } */\n   asm_fprintf (\"%s\", (char *)0); /* { dg-warning \"null\" \"%s with NULL\" } */\n \n   /* Make sure we still get warnings for regular printf.  */\n-  printf (\"%d\\n\", ll); /* { dg-warning \"11:format\" \"bad argument types\" } */\n+  printf (\"%d\\n\", ll); /* { dg-warning \"13:format\" \"bad argument types\" } */\n }\n+/* { dg-warning \"16:too many arguments for format\" \"too many arguments\" { target *-*-* } 0 } */"}, {"sha": "22313633bf878e831f9600def9d2ba2f767e5895", "filename": "gcc/testsuite/gcc.dg/format/attr-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -30,13 +30,13 @@ void\n foo (int i, int *ip, double d)\n {\n   tformatprintf (\"%d\", i);\n-  tformatprintf (\"%\"); /* { dg-warning \"18:format\" \"attribute format printf\" } */\n+  tformatprintf (\"%\"); /* { dg-warning \"19:format\" \"attribute format printf\" } */\n   tformat__printf__ (\"%d\", i);\n   tformat__printf__ (\"%\"); /* { dg-warning \"format\" \"attribute format __printf__\" } */\n   tformatscanf (\"%d\", ip);\n   tformatscanf (\"%\"); /* { dg-warning \"format\" \"attribute format scanf\" } */\n   tformat__scanf__ (\"%d\", ip);\n-  tformat__scanf__ (\"%\"); /* { dg-warning \"format\" \"attribute format __scanf__\" } */\n+  tformat__scanf__ (\"%\"); /* { dg-warning \"22:format\" \"attribute format __scanf__\" } */\n   tformatstrftime (\"%a\");\n   tformatstrftime (\"%\"); /* { dg-warning \"format\" \"attribute format strftime\" } */\n   tformat__strftime__ (\"%a\");"}, {"sha": "30321df558a5341e01c1b6ab2491cb9fa02adcf1", "filename": "gcc/testsuite/gcc.dg/format/attr-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-4.c?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -16,7 +16,7 @@ void\n baz (int i, int *ip, double d)\n {\n   tformatprintf0 (\"%d\", i);\n-  tformatprintf0 (\"%\"); /* { dg-warning \"19:format\" \"attribute format printf case 0\" } */\n+  tformatprintf0 (\"%\"); /* { dg-warning \"20:format\" \"attribute format printf case 0\" } */\n   tformatprintf1 (\"%d\", i);\n   tformatprintf1 (\"%\"); /* { dg-warning \"format\" \"attribute format printf case 1\" } */\n   tformatprintf2 (\"%d\", i);"}, {"sha": "ead7bfc3ccd9fc34129d9ceb1080e3649bf13998", "filename": "gcc/testsuite/gcc.dg/format/attr-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-6.c?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -17,6 +17,6 @@\n void\n foo (const char *s, int *p)\n {\n-  scanf(\"%ld\", p); /* { dg-warning \"9:format\" \"implicit scanf\" } */\n+  scanf(\"%ld\", p); /* { dg-warning \"12:format\" \"implicit scanf\" } */\n   /* { dg-warning \"implicit\" \"implicit decl warning\" { target *-*-* } 20 } */\n }"}, {"sha": "e434fa534b61bc73c54f2d7d0e1aa881bed10462", "filename": "gcc/testsuite/gcc.dg/format/attr-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-7.c?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -18,7 +18,7 @@ baz (int i)\n {\n   (*tformatprintf0) (\"%d\", i);\n   (*tformatprintf0) ((*tformat_arg) (\"%d\"), i);\n-  (*tformatprintf0) (\"%\"); /* { dg-warning \"22:format\" \"prefix\" } */\n+  (*tformatprintf0) (\"%\"); /* { dg-warning \"23:format\" \"prefix\" } */\n   (*tformatprintf0) ((*tformat_arg) (\"%\")); /* { dg-warning \"format\" \"prefix\" } */\n   (*tformatprintf1) (\"%d\", i);\n   (*tformatprintf1) ((*tformat_arg) (\"%d\"), i);"}, {"sha": "0773a0928c16b2ed39359eaf078b194b99b0d219", "filename": "gcc/testsuite/gcc.dg/format/bitfld-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -46,6 +46,6 @@ foo (void)\n   printf (\"%ld%lu\", x.u32, x.u32);\n   printf (\"%ld%lu\", x.s32, x.s32);\n #endif\n-  printf (\"%llu\", x.u48); /* { dg-warning \"11:has type '.*unsigned int:48'\" } */\n+  printf (\"%llu\", x.u48); /* { dg-warning \"15:has type '.*unsigned int:48'\" } */\n   printf (\"%llu\", (unsigned long long)x.u48);\n }"}, {"sha": "f180f4313a6849372d02843e1f961a069910c367", "filename": "gcc/testsuite/gcc.dg/format/branch-1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -9,19 +9,19 @@ void\n foo (long l, int nfoo)\n {\n   printf ((nfoo > 1) ? \"%d foos\" : \"%d foo\", nfoo);\n-  printf ((l > 1) ? \"%d foos\" /* { dg-warning \"21:int\" \"wrong type in conditional expr\" } */\n-\t          : \"%d foo\", l); /* { dg-warning \"14:int\" \"wrong type in conditional expr\" } */\n-  printf ((l > 1) ? \"%ld foos\" : \"%d foo\", l); /* { dg-warning \"34:int\" \"wrong type in conditional expr\" } */\n-  printf ((l > 1) ? \"%d foos\" : \"%ld foo\", l); /* { dg-warning \"21:int\" \"wrong type in conditional expr\" } */\n+  printf ((l > 1) ? \"%d foos\" /* { dg-warning \"23:int\" \"wrong type in conditional expr\" } */\n+\t          : \"%d foo\", l); /* { dg-warning \"16:int\" \"wrong type in conditional expr\" } */\n+  printf ((l > 1) ? \"%ld foos\" : \"%d foo\", l); /* { dg-warning \"36:int\" \"wrong type in conditional expr\" } */\n+  printf ((l > 1) ? \"%d foos\" : \"%ld foo\", l); /* { dg-warning \"23:int\" \"wrong type in conditional expr\" } */\n   /* Should allow one case to have extra arguments.  */\n   printf ((nfoo > 1) ? \"%d foos\" : \"1 foo\", nfoo);\n   printf ((nfoo > 1) ? \"many foos\" : \"1 foo\", nfoo); /* { dg-warning \"38:too many\" \"too many args in all branches\" } */\n   printf ((nfoo > 1) ? \"%d foos\" : \"\", nfoo);\n   printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"1 foo\" : \"no foos\"), nfoo);\n   printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%d foo\" : \"%d foos\"), nfoo);\n-  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%d foo\" : \"%ld foos\"), nfoo); /* { dg-warning \"61:long int\" \"wrong type\" } */\n-  printf ((nfoo > 1) ? \"%ld foos\" : ((nfoo > 0) ? \"%d foo\" : \"%d foos\"), nfoo); /* { dg-warning \"24:long int\" \"wrong type\" } */\n-  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%ld foo\" : \"%d foos\"), nfoo); /* { dg-warning \"50:long int\" \"wrong type\" } */\n+  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%d foo\" : \"%ld foos\"), nfoo); /* { dg-warning \"64:long int\" \"wrong type\" } */\n+  printf ((nfoo > 1) ? \"%ld foos\" : ((nfoo > 0) ? \"%d foo\" : \"%d foos\"), nfoo); /* { dg-warning \"27:long int\" \"wrong type\" } */\n+  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%ld foo\" : \"%d foos\"), nfoo); /* { dg-warning \"53:long int\" \"wrong type\" } */\n   /* Extra arguments to NULL should be complained about.  */\n   printf (0, \"foo\"); /* { dg-warning \"14:too many\" \"NULL extra args\" } */\n   /* { dg-warning \"null\" \"null format arg\" { target *-*-* } 26 } */"}, {"sha": "5329dad83a40d430bc0567e579be5b6ed3e348c8", "filename": "gcc/testsuite/gcc.dg/format/c90-printf-1.c", "status": "modified", "additions": 97, "deletions": 86, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -34,28 +34,35 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   */\n   printf (\"%.e\\n\", d); /* { dg-bogus \"precision\" \"bogus precision warning\" } */\n   /* Bogus use of width.  */\n-  printf (\"%5n\\n\", n); /* { dg-warning \"11:width\" \"width with %n\" } */\n+  printf (\"%5n\\n\", n); /* { dg-warning \"14:width\" \"width with %n\" } */\n   /* Erroneous, ignored or pointless constructs with precision.  */\n   /* Whether negative values for precision may be included in the format\n      string is not entirely clear; presume not, following Clive Feather's\n      proposed resolution to DR#220 against C99.  In any case, such a\n      construct should be warned about.\n   */\n-  printf (\"%.-5d\\n\", i); /* { dg-warning \"11:format|precision\" \"negative precision warning\" } */\n-  printf (\"%.-*d\\n\", i); /* { dg-warning \"11:format\" \"broken %.-*d format\" } */\n-  printf (\"%.3c\\n\", i); /* { dg-warning \"11:precision\" \"precision with %c\" } */\n-  printf (\"%.3p\\n\", p); /* { dg-warning \"11:precision\" \"precision with %p\" } */\n-  printf (\"%.3n\\n\", n); /* { dg-warning \"11:precision\" \"precision with %n\" } */\n+  printf (\"%.-5d\\n\", i); /* { dg-warning \"14:format|precision\" \"negative precision warning\" } */\n+  /* { dg-warning \"too many arguments for format\" \"too many arguments\" { target *-*-* } 44 } */\n+  printf (\"%.-*d\\n\", i); /* { dg-warning \"14:format\" \"broken %.-*d format\" } */\n+  /* { dg-warning \"too many arguments for format\" \"too many arguments\" { target *-*-* } 46 } */\n+  printf (\"%.3c\\n\", i); /* { dg-warning \"15:precision\" \"precision with %c\" } */\n+  printf (\"%.3p\\n\", p); /* { dg-warning \"15:precision\" \"precision with %p\" } */\n+  printf (\"%.3n\\n\", n); /* { dg-warning \"15:precision\" \"precision with %n\" } */\n   /* Valid and invalid %% constructions.  Some of the warning messages\n      are non-optimal, but they do detect the errorneous nature of the\n      format string.\n   */\n   printf (\"%%\");\n-  printf (\"%.3%\"); /* { dg-warning \"11:format\" \"bogus %%\" } */\n-  printf (\"%-%\"); /* { dg-warning \"11:format\" \"bogus %%\" } */\n-  printf (\"%-%\\n\"); /* { dg-warning \"11:format\" \"bogus %%\" } */\n-  printf (\"%5%\\n\"); /* { dg-warning \"11:format\" \"bogus %%\" } */\n-  printf (\"%h%\\n\"); /* { dg-warning \"11:format\" \"bogus %%\" } */\n+  printf (\"%.3%\"); /* { dg-warning \"14:type\" \"missing type\" } */\n+  /* { dg-warning \"15:trailing\" \"bogus %%\" { target *-*-* } 56 } */\n+  printf (\"%-%\"); /* { dg-warning \"13:type\" \"missing type\" } */\n+  /* { dg-warning \"14:trailing\" \"bogus %%\" { target *-*-* } 58 } */\n+  printf (\"%-%\\n\"); /* { dg-warning \"13:format\" \"bogus %%\" } */\n+  /* { dg-warning \"15:format\" \"bogus %%\" { target *-*-* } 60 } */\n+  printf (\"%5%\\n\"); /* { dg-warning \"13:format\" \"bogus %%\" } */\n+  /* { dg-warning \"15:format\" \"bogus %%\" { target *-*-* } 62 } */\n+  printf (\"%h%\\n\"); /* { dg-warning \"13:format\" \"bogus %%\" } */\n+  /* { dg-warning \"15:format\" \"bogus %%\" { target *-*-* } 64 } */\n   /* Valid and invalid %h, %l, %L constructions.  */\n   printf (\"%hd\", i);\n   printf (\"%hi\", i);\n@@ -67,94 +74,94 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   */\n   printf (\"%ho%hu%hx%hX\", u, u, u, u);\n   printf (\"%hn\", hn);\n-  printf (\"%hf\", d); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n-  printf (\"%he\", d); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n-  printf (\"%hE\", d); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n-  printf (\"%hg\", d); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n-  printf (\"%hG\", d); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n-  printf (\"%hc\", i); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n-  printf (\"%hs\", s); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n-  printf (\"%hp\", p); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n-  printf (\"%h\"); /* { dg-warning \"11:conversion lacks type\" \"bare %h\" } */\n-  printf (\"%h.\"); /* { dg-warning \"11:conversion\" \"bogus %h.\" } */\n-  printf (\"%ld%li%lo%lu%lx%lX\", l, l, ul, ul, ul, ul);\n-  printf (\"%ln\", ln);\n-  printf (\"%lf\", d); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n-  printf (\"%le\", d); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n-  printf (\"%lE\", d); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n-  printf (\"%lg\", d); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n-  printf (\"%lG\", d); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n-  printf (\"%lp\", p); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n+  printf (\" %hf\", d); /* { dg-warning \"15:length\" \"bad use of %h\" } */\n+  printf (\" %he\", d); /* { dg-warning \"15:length\" \"bad use of %h\" } */\n+  printf (\" %hE\", d); /* { dg-warning \"15:length\" \"bad use of %h\" } */\n+  printf (\" %hg\", d); /* { dg-warning \"15:length\" \"bad use of %h\" } */\n+  printf (\" %hG\", d); /* { dg-warning \"15:length\" \"bad use of %h\" } */\n+  printf (\" %hc\", i); /* { dg-warning \"15:length\" \"bad use of %h\" } */\n+  printf (\" %hs\", s); /* { dg-warning \"15:length\" \"bad use of %h\" } */\n+  printf (\" %hp\", p); /* { dg-warning \"15:length\" \"bad use of %h\" } */\n+  printf (\" %h\"); /* { dg-warning \"14:conversion lacks type\" \"bare %h\" } */\n+  printf (\" %h.\"); /* { dg-warning \"15:conversion\" \"bogus %h.\" } */\n+  printf (\" %ld%li%lo%lu%lx%lX\", l, l, ul, ul, ul, ul);\n+  printf (\" %ln\", ln);\n+  printf (\" %lf\", d); /* { dg-warning \"15:length|C\" \"bad use of %l\" } */\n+  printf (\" %le\", d); /* { dg-warning \"15:length|C\" \"bad use of %l\" } */\n+  printf (\" %lE\", d); /* { dg-warning \"15:length|C\" \"bad use of %l\" } */\n+  printf (\" %lg\", d); /* { dg-warning \"15:length|C\" \"bad use of %l\" } */\n+  printf (\" %lG\", d); /* { dg-warning \"15:length|C\" \"bad use of %l\" } */\n+  printf (\" %lp\", p); /* { dg-warning \"15:length|C\" \"bad use of %l\" } */\n   /* These next two were added in C94, but should be objected to in C90.\n      For the first one, GCC has wanted wchar_t instead of the correct C94\n      and C99 wint_t.\n   */\n-  printf (\"%lc\", lc); /* { dg-warning \"11:length|C\" \"C90 bad use of %l\" } */\n-  printf (\"%ls\", ls); /* { dg-warning \"11:length|C\" \"C90 bad use of %l\" } */\n+  printf (\"%lc\", lc); /* { dg-warning \"14:length|C\" \"C90 bad use of %l\" } */\n+  printf (\"%ls\", ls); /* { dg-warning \"14:length|C\" \"C90 bad use of %l\" } */\n   /* These uses of %L are legitimate, though GCC has wrongly warned for\n      them in the past.\n   */\n   printf (\"%Le%LE%Lf%Lg%LG\", ld, ld, ld, ld, ld);\n   /* These next six are accepted by GCC as referring to long long,\n      but -pedantic correctly warns.\n   */\n-  printf (\"%Ld\", ll); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n-  printf (\"%Li\", ll); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n-  printf (\"%Lo\", ull); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n-  printf (\"%Lu\", ull); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n-  printf (\"%Lx\", ull); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n-  printf (\"%LX\", ull); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n-  printf (\"%Lc\", i); /* { dg-warning \"11:length\" \"bad use of %L\" } */\n-  printf (\"%Ls\", s); /* { dg-warning \"11:length\" \"bad use of %L\" } */\n-  printf (\"%Lp\", p); /* { dg-warning \"11:length\" \"bad use of %L\" } */\n-  printf (\"%Ln\", n); /* { dg-warning \"11:length\" \"bad use of %L\" } */\n+  printf (\"%Ld\", ll); /* { dg-warning \"14:does not support\" \"bad use of %L\" } */\n+  printf (\"%Li\", ll); /* { dg-warning \"14:does not support\" \"bad use of %L\" } */\n+  printf (\"%Lo\", ull); /* { dg-warning \"14:does not support\" \"bad use of %L\" } */\n+  printf (\"%Lu\", ull); /* { dg-warning \"14:does not support\" \"bad use of %L\" } */\n+  printf (\"%Lx\", ull); /* { dg-warning \"14:does not support\" \"bad use of %L\" } */\n+  printf (\"%LX\", ull); /* { dg-warning \"14:does not support\" \"bad use of %L\" } */\n+  printf (\"%Lc\", i); /* { dg-warning \"14:length\" \"bad use of %L\" } */\n+  printf (\"%Ls\", s); /* { dg-warning \"14:length\" \"bad use of %L\" } */\n+  printf (\"%Lp\", p); /* { dg-warning \"14:length\" \"bad use of %L\" } */\n+  printf (\"%Ln\", n); /* { dg-warning \"14:length\" \"bad use of %L\" } */\n   /* Valid uses of each bare conversion.  */\n   printf (\"%d%i%o%u%x%X%f%e%E%g%G%c%s%p%n%%\", i, i, u, u, u, u, d, d, d, d, d,\n \t  i, s, p, n);\n   /* Uses of the - flag (valid on all non-%, non-n conversions).  */\n   printf (\"%-d%-i%-o%-u%-x%-X%-f%-e%-E%-g%-G%-c%-s%-p\", i, i, u, u, u, u,\n \t  d, d, d, d, d, i, s, p);\n-  printf (\"%-n\", n); /* { dg-warning \"11:flag\" \"bad use of %-n\" } */\n+  printf (\"%-n\", n); /* { dg-warning \"14:flag\" \"bad use of %-n\" } */\n   /* Uses of the + flag (valid on signed conversions only).  */\n   printf (\"%+d%+i%+f%+e%+E%+g%+G\\n\", i, i, d, d, d, d, d);\n-  printf (\"%+o\", u); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n-  printf (\"%+u\", u); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n-  printf (\"%+x\", u); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n-  printf (\"%+X\", u); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n-  printf (\"%+c\", i); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n-  printf (\"%+s\", s); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n-  printf (\"%+p\", p); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n-  printf (\"%+n\", n); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n+  printf (\"%+o\", u); /* { dg-warning \"14:flag\" \"bad use of + flag\" } */\n+  printf (\"%+u\", u); /* { dg-warning \"14:flag\" \"bad use of + flag\" } */\n+  printf (\"%+x\", u); /* { dg-warning \"14:flag\" \"bad use of + flag\" } */\n+  printf (\"%+X\", u); /* { dg-warning \"14:flag\" \"bad use of + flag\" } */\n+  printf (\"%+c\", i); /* { dg-warning \"14:flag\" \"bad use of + flag\" } */\n+  printf (\"%+s\", s); /* { dg-warning \"14:flag\" \"bad use of + flag\" } */\n+  printf (\"%+p\", p); /* { dg-warning \"14:flag\" \"bad use of + flag\" } */\n+  printf (\"%+n\", n); /* { dg-warning \"14:flag\" \"bad use of + flag\" } */\n   /* Uses of the space flag (valid on signed conversions only, and ignored\n      with +).\n   */\n   printf (\"% +d\", i); /* { dg-warning \"11:use of both|ignored\" \"use of space and + flags\" } */\n   printf (\"%+ d\", i); /* { dg-warning \"11:use of both|ignored\" \"use of space and + flags\" } */\n   printf (\"% d% i% f% e% E% g% G\\n\", i, i, d, d, d, d, d);\n-  printf (\"% o\", u); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n-  printf (\"% u\", u); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n-  printf (\"% x\", u); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n-  printf (\"% X\", u); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n-  printf (\"% c\", i); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n-  printf (\"% s\", s); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n-  printf (\"% p\", p); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n-  printf (\"% n\", n); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n+  printf (\"% o\", u); /* { dg-warning \"14:flag\" \"bad use of space flag\" } */\n+  printf (\"% u\", u); /* { dg-warning \"14:flag\" \"bad use of space flag\" } */\n+  printf (\"% x\", u); /* { dg-warning \"14:flag\" \"bad use of space flag\" } */\n+  printf (\"% X\", u); /* { dg-warning \"14:flag\" \"bad use of space flag\" } */\n+  printf (\"% c\", i); /* { dg-warning \"14:flag\" \"bad use of space flag\" } */\n+  printf (\"% s\", s); /* { dg-warning \"14:flag\" \"bad use of space flag\" } */\n+  printf (\"% p\", p); /* { dg-warning \"14:flag\" \"bad use of space flag\" } */\n+  printf (\"% n\", n); /* { dg-warning \"14:flag\" \"bad use of space flag\" } */\n   /* Uses of the # flag.  */\n   printf (\"%#o%#x%#X%#e%#E%#f%#g%#G\", u, u, u, d, d, d, d, d);\n-  printf (\"%#d\", i); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n-  printf (\"%#i\", i); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n-  printf (\"%#u\", u); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n-  printf (\"%#c\", i); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n-  printf (\"%#s\", s); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n-  printf (\"%#p\", p); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n-  printf (\"%#n\", n); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n+  printf (\"%#d\", i); /* { dg-warning \"14:flag\" \"bad use of # flag\" } */\n+  printf (\"%#i\", i); /* { dg-warning \"14:flag\" \"bad use of # flag\" } */\n+  printf (\"%#u\", u); /* { dg-warning \"14:flag\" \"bad use of # flag\" } */\n+  printf (\"%#c\", i); /* { dg-warning \"14:flag\" \"bad use of # flag\" } */\n+  printf (\"%#s\", s); /* { dg-warning \"14:flag\" \"bad use of # flag\" } */\n+  printf (\"%#p\", p); /* { dg-warning \"14:flag\" \"bad use of # flag\" } */\n+  printf (\"%#n\", n); /* { dg-warning \"14:flag\" \"bad use of # flag\" } */\n   /* Uses of the 0 flag.  */\n   printf (\"%08d%08i%08o%08u%08x%08X%08e%08E%08f%08g%08G\", i, i, u, u, u, u,\n \t  d, d, d, d, d);\n-  printf (\"%0c\", i); /* { dg-warning \"11:flag\" \"bad use of 0 flag\" } */\n-  printf (\"%0s\", s); /* { dg-warning \"11:flag\" \"bad use of 0 flag\" } */\n-  printf (\"%0p\", p); /* { dg-warning \"11:flag\" \"bad use of 0 flag\" } */\n-  printf (\"%0n\", n); /* { dg-warning \"11:flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0c\", i); /* { dg-warning \"14:flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0s\", s); /* { dg-warning \"14:flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0p\", p); /* { dg-warning \"14:flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0n\", n); /* { dg-warning \"14:flag\" \"bad use of 0 flag\" } */\n   /* 0 flag ignored with precision for certain types, not others.  */\n   printf (\"%08.5d\", i); /* { dg-warning \"11:ignored\" \"0 flag ignored with precision\" } */\n   printf (\"%08.5i\", i); /* { dg-warning \"11:ignored\" \"0 flag ignored with precision\" } */\n@@ -176,13 +183,13 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   printf (\"%-08g\", d); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n   printf (\"%-08G\", d); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n   /* Various tests of bad argument types.  */\n-  printf (\"%d\", l); /* { dg-warning \"11:format\" \"bad argument types\" } */\n-  printf (\"%*.*d\", l, i2, i); /* { dg-warning \"11:field\" \"bad * argument types\" } */\n-  printf (\"%*.*d\", i1, l, i); /* { dg-warning \"11:field\" \"bad * argument types\" } */\n-  printf (\"%ld\", i); /* { dg-warning \"11:format\" \"bad argument types\" } */\n-  printf (\"%s\", n); /* { dg-warning \"11:format\" \"bad argument types\" } */\n-  printf (\"%p\", i); /* { dg-warning \"11:format\" \"bad argument types\" } */\n-  printf (\"%n\", p); /* { dg-warning \"11:format\" \"bad argument types\" } */\n+  printf (\"%d\", l); /* { dg-warning \"13:format\" \"bad argument types\" } */\n+  printf (\"%*.*d\", l, i2, i); /* { dg-warning \"13:field\" \"bad * argument types\" } */\n+  printf (\"%*.*d\", i1, l, i); /* { dg-warning \"15:field\" \"bad * argument types\" } */\n+  printf (\"%ld\", i); /* { dg-warning \"14:format\" \"bad argument types\" } */\n+  printf (\"%s\", n); /* { dg-warning \"13:format\" \"bad argument types\" } */\n+  printf (\"%p\", i); /* { dg-warning \"13:format\" \"bad argument types\" } */\n+  printf (\"%n\", p); /* { dg-warning \"13:format\" \"bad argument types\" } */\n   /* With -pedantic, we want some further checks for pointer targets:\n      %p should allow only pointers to void (possibly qualified) and\n      to character types (possibly qualified), but not function pointers\n@@ -196,9 +203,9 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n      char * or unsigned char * being passed to %hhn, even if strictly\n      legitimate by the standard.)\n   */\n-  printf (\"%p\", foo); /* { dg-warning \"11:format\" \"bad argument types\" } */\n-  printf (\"%n\", un); /* { dg-warning \"11:format\" \"bad argument types\" } */\n-  printf (\"%p\", n); /* { dg-warning \"11:format\" \"bad argument types\" } */\n+  printf (\"%p\", foo); /* { dg-warning \"13:format\" \"bad argument types\" } */\n+  printf (\"%n\", un); /* { dg-warning \"13:format\" \"bad argument types\" } */\n+  printf (\"%p\", n); /* { dg-warning \"13:format\" \"bad argument types\" } */\n   /* Allow character pointers with %p.  */\n   printf (\"%p%p%p%p\", s, ss, us, css);\n   /* %s allows any character type.  */\n@@ -207,7 +214,7 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n      and seems useful to keep, even if some standard versions might be\n      read to permit it.\n   */\n-  printf (\"%s\", p); /* { dg-warning \"11:format\" \"bad argument types\" } */\n+  printf (\"%s\", p); /* { dg-warning \"13:format\" \"bad argument types\" } */\n   /* The historical behavior is to allow signed / unsigned types\n      interchangeably as arguments.  For values representable in both types,\n      such usage may be correct.  For now preserve the behavior of GCC\n@@ -220,18 +227,22 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   */\n   printf (\"%*.*d\", u1, u2, i);\n   /* Wrong number of arguments.  */\n-  printf (\"%d%d\", i); /* { dg-warning \"11:matching\" \"wrong number of args\" } */\n+  printf (\"%d%d\", i); /* { dg-warning \"15:matching\" \"wrong number of args\" } */\n   printf (\"%d\", i, i); /* { dg-warning \"11:arguments\" \"wrong number of args\" } */\n   /* Miscellaneous bogus constructions.  */\n   printf (\"\"); /* { dg-warning \"11:zero-length\" \"warning for empty format\" } */\n-  printf (\"\\0\"); /* { dg-warning \"11:embedded\" \"warning for embedded NUL\" } */\n-  printf (\"%d\\0\", i); /* { dg-warning \"11:embedded\" \"warning for embedded NUL\" } */\n-  printf (\"%d\\0%d\", i, i); /* { dg-warning \"11:embedded|too many\" \"warning for embedded NUL\" } */\n+  printf (\"\\0\"); /* { dg-warning \"12:embedded\" \"warning for embedded NUL\" } */\n+  printf (\"%d\\0\", i); /* { dg-warning \"14:embedded\" \"warning for embedded NUL\" } */\n+  printf (\"%d\\0%d\", i, i); /* { dg-warning \"embedded|too many\" \"warning for embedded NUL\" } */\n   printf (NULL); /* { dg-warning \"3:null\" \"null format string warning\" } */\n-  printf (\"%\"); /* { dg-warning \"11:trailing\" \"trailing % warning\" } */\n-  printf (\"%++d\", i); /* { dg-warning \"11:repeated\" \"repeated flag warning\" } */\n+  printf (\"%\"); /* { dg-warning \"12:trailing\" \"trailing % warning\" } */\n+  printf (\"%++d\", i); /* { dg-warning \"14:repeated\" \"repeated flag warning\" } */\n   printf (\"%n\", cn); /* { dg-warning \"3:constant\" \"%n with const\" } */\n   printf ((const char *)L\"foo\"); /* { dg-warning \"25:wide\" \"wide string\" } */\n   printf (\"%n\", (int *)0); /* { dg-warning \"3:null\" \"%n with NULL\" } */\n   printf (\"%s\", (char *)0); /* { dg-warning \"3:null\" \"%s with NULL\" } */\n+  /* Test for correct column locations within strings with embedded\n+     escape sequences. */\n+  printf (\"\\\\\\a\\n \\\"\\t%5n\\n\", n); /* { dg-warning \"25:width\" \"width with %n\" } */\n+  printf (\"\\\\a\\\\n%5n\\n\", n); /* { dg-warning \"20:width\" \"width with %n\" } */\n }"}, {"sha": "2ba74a3b4c10d5dfd096f23ce2edbad526b5edf2", "filename": "gcc/testsuite/gcc.dg/redecl-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fee2ac2882790ca549b1c5504f7fa1e59b25a39/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-4.c?ref=0fee2ac2882790ca549b1c5504f7fa1e59b25a39", "patch": "@@ -15,7 +15,7 @@ f (void)\n     /* Should get format warnings even though the built-in declaration\n        isn't \"visible\".  */\n     printf (\n-\t    \"%s\", 1); /* { dg-warning \"6:format\" } */\n+\t    \"%s\", 1); /* { dg-warning \"8:format\" } */\n     /* The type of strcmp here should have no prototype.  */\n     if (0)\n       strcmp (1);"}]}