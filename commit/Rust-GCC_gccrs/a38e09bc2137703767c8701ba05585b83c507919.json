{"sha": "a38e09bc2137703767c8701ba05585b83c507919", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM4ZTA5YmMyMTM3NzAzNzY3Yzg3MDFiYTA1NTg1YjgzYzUwNzkxOQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2004-07-19T13:59:49Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-07-19T13:59:49Z"}, "message": "s390-protos.h (s390_return_address_offset): Prototype added.\n\n2004-07-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390-protos.h (s390_return_address_offset): Prototype\n\tadded.\n\t* config/s390/s390.c (regclass_map initializer): Register 35 added to\n\tADDR_REGS.\n\t(load_multiple_operation, store_multiple_operation): Removed\n\tpointless sanity check.\n\t(s390_decompose_address): Added check for return_address_pointer_rtx.\n\t(s390_return_addr_rtx): Use return_address_pointer_rtx for count == 0.\n\t(s390_return_address_offset): New function.\n\t* config/s390/s390.h (FIRST_PSEUDO_REGISTER): Increased to 36.\n\t(FRAME_REGNO_P): Added check for register 35.\n\t(FIXED_REGISTERS, CALL_USED_REGISTERS, CALL_REALLY_USED_REGISTERS,\n\tREG_ALLOC_ORDER): Appended entry for register 35.\n\t(REG_CLASS_CONTENTS): Adjusted class masks for register 35.\n\t(EH_RETURN_HANDLER_RTX): Use return_address_pointer_rtx.\n\t(RETURN_ADDRESS_POINTER_REGNUM): New macro.\n\t(ELIMINABLE_REGS, INITIAL_ELIMINATION_OFFSET): Return address pointer\n\tis eliminable using stack pointer or hard frame pointer.\n\t(REGISTER_NAMES): Added name for register 35.\n\t* config/s390/s390.md (\"load_multiple\", \"store_multiple\"): Removed\n\tpointless sanity check.\n\nFrom-SVN: r84918", "tree": {"sha": "435f548a5358ebb182c957ca154e9020320624f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/435f548a5358ebb182c957ca154e9020320624f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a38e09bc2137703767c8701ba05585b83c507919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38e09bc2137703767c8701ba05585b83c507919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a38e09bc2137703767c8701ba05585b83c507919", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38e09bc2137703767c8701ba05585b83c507919/comments", "author": null, "committer": null, "parents": [{"sha": "adb8e07e68e65f801a4fafc491c55dfe30af66ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb8e07e68e65f801a4fafc491c55dfe30af66ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb8e07e68e65f801a4fafc491c55dfe30af66ed"}], "stats": {"total": 127, "additions": 80, "deletions": 47}, "files": [{"sha": "b70d6d2cb61c2614471c55746dcf7e496fc550b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38e09bc2137703767c8701ba05585b83c507919/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38e09bc2137703767c8701ba05585b83c507919/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a38e09bc2137703767c8701ba05585b83c507919", "patch": "@@ -1,3 +1,27 @@\n+2004-07-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_return_address_offset): Prototype\n+\tadded.\n+\t* config/s390/s390.c (regclass_map initializer): Register 35 added to\n+\tADDR_REGS.\n+\t(load_multiple_operation, store_multiple_operation): Removed\n+\tpointless sanity check. \n+\t(s390_decompose_address): Added check for return_address_pointer_rtx.\n+\t(s390_return_addr_rtx): Use return_address_pointer_rtx for count == 0.\n+\t(s390_return_address_offset): New function.\n+\t* config/s390/s390.h (FIRST_PSEUDO_REGISTER): Increased to 36.\n+\t(FRAME_REGNO_P): Added check for register 35.\n+\t(FIXED_REGISTERS, CALL_USED_REGISTERS, CALL_REALLY_USED_REGISTERS,\n+\tREG_ALLOC_ORDER): Appended entry for register 35.\n+\t(REG_CLASS_CONTENTS): Adjusted class masks for register 35.\n+\t(EH_RETURN_HANDLER_RTX): Use return_address_pointer_rtx.\n+\t(RETURN_ADDRESS_POINTER_REGNUM): New macro.\n+\t(ELIMINABLE_REGS, INITIAL_ELIMINATION_OFFSET): Return address pointer\n+\tis eliminable using stack pointer or hard frame pointer.\n+\t(REGISTER_NAMES): Added name for register 35.\n+\t* config/s390/s390.md (\"load_multiple\", \"store_multiple\"): Removed\n+\tpointless sanity check.\n+\n 2004-07-19  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (tree_expr_nonzero_p): Add function prototype."}, {"sha": "acb32b23117860dc4e3edb0e3157d6bbf5d4d97e", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38e09bc2137703767c8701ba05585b83c507919/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38e09bc2137703767c8701ba05585b83c507919/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=a38e09bc2137703767c8701ba05585b83c507919", "patch": "@@ -24,6 +24,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n extern void optimization_options (int, int);\n extern void override_options (void);\n extern HOST_WIDE_INT s390_arg_frame_offset (void);\n+extern HOST_WIDE_INT s390_return_address_offset (void);\n extern void s390_emit_prologue (void);\n extern void s390_emit_epilogue (bool);\n extern void s390_function_profiler (FILE *, int);"}, {"sha": "4ebfbb3fc8c5a71761dab86894eb849f48cdd07c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38e09bc2137703767c8701ba05585b83c507919/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38e09bc2137703767c8701ba05585b83c507919/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a38e09bc2137703767c8701ba05585b83c507919", "patch": "@@ -1038,7 +1038,7 @@ const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER] =\n   FP_REGS,      FP_REGS,   FP_REGS,   FP_REGS,\n   FP_REGS,      FP_REGS,   FP_REGS,   FP_REGS,\n   FP_REGS,      FP_REGS,   FP_REGS,   FP_REGS,\n-  ADDR_REGS,    NO_REGS,   ADDR_REGS\n+  ADDR_REGS,    NO_REGS,   ADDR_REGS, ADDR_REGS\n };\n \n /* Return attribute type of insn.  */\n@@ -1613,9 +1613,6 @@ load_multiple_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   else\n     return 0;\n \n-  if (src_addr == frame_pointer_rtx || src_addr == arg_pointer_rtx)\n-    return 0;\n-\n   for (i = 1; i < count; i++)\n     {\n       rtx elt = XVECEXP (op, 0, i);\n@@ -1676,9 +1673,6 @@ store_multiple_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   else\n     return 0;\n \n-  if (dest_addr == frame_pointer_rtx || dest_addr == arg_pointer_rtx)\n-    return 0;\n-\n   for (i = 1; i < count; i++)\n     {\n       rtx elt = XVECEXP (op, 0, i);\n@@ -2258,15 +2252,19 @@ s390_decompose_address (register rtx addr, struct s390_address *out)\n   /* Validate displacement.  */\n   if (!disp)\n     {\n-      /* If the argument pointer is involved, the displacement will change\n-\t later anyway as the argument pointer gets eliminated.  This could\n-\t make a valid displacement invalid, but it is more likely to make\n-\t an invalid displacement valid, because we sometimes access the\n-\t register save area via negative offsets to the arg pointer.\n+      /* If the argument pointer or the return address pointer are involved,\n+\t the displacement will change later anyway as the virtual registers get\n+\t eliminated.  This could make a valid displacement invalid, but it is \n+\t more likely to make an invalid displacement valid, because we sometimes\n+\t access the register save area via negative offsets to one of those \n+\t registers.\n \t Thus we don't check the displacement for validity here.  If after\n \t elimination the displacement turns out to be invalid after all,\n \t this is fixed up by reload in any case.  */\n-      if (base != arg_pointer_rtx && indx != arg_pointer_rtx)\n+      if (base != arg_pointer_rtx \n+\t  && indx != arg_pointer_rtx \n+\t  && base != return_address_pointer_rtx \n+\t  && indx != return_address_pointer_rtx)\n \tif (!DISP_IN_RANGE (offset))\n \t  return FALSE;\n     }\n@@ -5499,7 +5497,7 @@ s390_reorg (void)\n    frame pointer of that frame.  */\n \n rtx\n-s390_return_addr_rtx (int count, rtx frame)\n+s390_return_addr_rtx (int count, rtx frame ATTRIBUTE_UNUSED)\n {\n   rtx addr;\n \n@@ -5512,10 +5510,10 @@ s390_return_addr_rtx (int count, rtx frame)\n      value of RETURN_REGNUM is actually saved.  */\n \n   if (count == 0)\n-    cfun->machine->save_return_addr_p = true;\n-\n-  /* To retrieve the return address we read the stack slot where the\n-     corresponding RETURN_REGNUM value was saved.  */\n+    {\n+      cfun->machine->save_return_addr_p = true;\n+      return gen_rtx_MEM (Pmode, return_address_pointer_rtx);\n+    }\n \n   addr = plus_constant (frame, RETURN_REGNUM * UNITS_PER_WORD);\n   addr = memory_address (Pmode, addr);\n@@ -5642,6 +5640,17 @@ s390_arg_frame_offset (void)\n   return cfun->machine->frame_size + STACK_POINTER_OFFSET;\n }\n \n+/* Return offset between return address pointer (location of r14\n+   on the stack) and frame pointer initially after prologue.  */\n+\n+HOST_WIDE_INT\n+s390_return_address_offset (void)\n+{\n+  s390_frame_info (1, 1);\n+\n+  return cfun->machine->frame_size + RETURN_REGNUM * UNITS_PER_WORD;\n+}\n+\n /* Emit insn to save fpr REGNUM at offset OFFSET relative\n    to register BASE.  Return generated insn.  */\n "}, {"sha": "05b8ea932d29d021832e5312762108921a1bad2d", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38e09bc2137703767c8701ba05585b83c507919/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38e09bc2137703767c8701ba05585b83c507919/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=a38e09bc2137703767c8701ba05585b83c507919", "patch": "@@ -284,14 +284,14 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n    Reg 33: Condition code\n    Reg 34: Frame pointer  */\n \n-#define FIRST_PSEUDO_REGISTER 35\n+#define FIRST_PSEUDO_REGISTER 36\n \n /* Standard register usage.  */\n #define GENERAL_REGNO_P(N)\t((int)(N) >= 0 && (N) < 16)\n #define ADDR_REGNO_P(N)\t\t((N) >= 1 && (N) < 16)\n #define FP_REGNO_P(N)\t\t((N) >= 16 && (N) < (TARGET_IEEE_FLOAT? 32 : 20))\n #define CC_REGNO_P(N)\t\t((N) == 33)\n-#define FRAME_REGNO_P(N)\t((N) == 32 || (N) == 34)\n+#define FRAME_REGNO_P(N)\t((N) == 32 || (N) == 34 || (N) == 35)\n \n #define GENERAL_REG_P(X)\t(REG_P (X) && GENERAL_REGNO_P (REGNO (X)))\n #define ADDR_REG_P(X)\t\t(REG_P (X) && ADDR_REGNO_P (REGNO (X)))\n@@ -327,7 +327,7 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n   0, 0, 0, 0, \t\t\t\t\t\\\n   0, 0, 0, 0, \t\t\t\t\t\\\n   0, 0, 0, 0, \t\t\t\t\t\\\n-  1, 1, 1 }\n+  1, 1, 1, 1 }\n \n #define CALL_USED_REGISTERS\t\t\t\\\n { 1, 1, 1, 1, \t\t\t\t\t\\\n@@ -338,7 +338,7 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n   1, 1, 1, 1, \t\t\t\t\t\\\n   1, 1, 1, 1, \t\t\t\t\t\\\n   1, 1, 1, 1, \t\t\t\t\t\\\n-  1, 1, 1 }\n+  1, 1, 1, 1 }\n \n #define CALL_REALLY_USED_REGISTERS\t\t\\\n { 1, 1, 1, 1, \t\t\t\t\t\\\n@@ -349,7 +349,7 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n   1, 1, 1, 1, \t\t\t\t\t\\\n   1, 1, 1, 1, \t\t\t\t\t\\\n   1, 1, 1, 1, \t\t\t\t\t\\\n-  1, 1, 1 }\n+  1, 1, 1, 1 }\n \n #define CONDITIONAL_REGISTER_USAGE s390_conditional_register_usage ()\n \n@@ -358,7 +358,7 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n {  1, 2, 3, 4, 5, 0, 13, 12, 11, 10, 9, 8, 7, 6, 14,            \\\n    16, 17, 18, 19, 20, 21, 22, 23,                              \\\n    24, 25, 26, 27, 28, 29, 30, 31,                              \\\n-   15, 32, 33, 34 }\n+   15, 32, 33, 34, 35 }\n \n \n /* Fitting values into registers.  */\n@@ -449,12 +449,12 @@ enum reg_class\n #define REG_CLASS_CONTENTS \\\n {\t\t\t\t       \t\t\t\\\n   { 0x00000000, 0x00000000 },\t/* NO_REGS */\t\t\\\n-  { 0x0000fffe, 0x00000005 },\t/* ADDR_REGS */\t\t\\\n-  { 0x0000ffff, 0x00000005 },\t/* GENERAL_REGS */\t\\\n+  { 0x0000fffe, 0x0000000d },\t/* ADDR_REGS */\t\t\\\n+  { 0x0000ffff, 0x0000000d },\t/* GENERAL_REGS */\t\\\n   { 0xffff0000, 0x00000000 },\t/* FP_REGS */\t\t\\\n-  { 0xfffffffe, 0x00000005 },\t/* ADDR_FP_REGS */\t\\\n-  { 0xffffffff, 0x00000005 },\t/* GENERAL_FP_REGS */\t\\\n-  { 0xffffffff, 0x00000007 },\t/* ALL_REGS */\t\t\\\n+  { 0xfffffffe, 0x0000000d },\t/* ADDR_FP_REGS */\t\\\n+  { 0xffffffff, 0x0000000d },\t/* GENERAL_FP_REGS */\t\\\n+  { 0xffffffff, 0x0000000f },\t/* ALL_REGS */\t\t\\\n }\n \n /* Register -> class mapping.  */\n@@ -579,10 +579,8 @@ extern int current_function_outgoing_args_size;\n \n /* Describe how we implement __builtin_eh_return.  */\n #define EH_RETURN_DATA_REGNO(N) ((N) < 4 ? (N) + 6 : INVALID_REGNUM)\n-#define EH_RETURN_HANDLER_RTX \\\n-  gen_rtx_MEM (Pmode, plus_constant (arg_pointer_rtx, \\\n-               -STACK_POINTER_OFFSET + UNITS_PER_WORD*RETURN_REGNUM))\n-\n+#define EH_RETURN_HANDLER_RTX gen_rtx_MEM (Pmode, return_address_pointer_rtx)\n+       \n /* Select a format to encode pointers in exception handling data.  */\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)\t\t\t    \\\n   (flag_pic\t\t\t\t\t\t\t\t    \\\n@@ -596,6 +594,7 @@ extern int current_function_outgoing_args_size;\n #define FRAME_POINTER_REGNUM 34\n #define HARD_FRAME_POINTER_REGNUM 11\n #define ARG_POINTER_REGNUM 32\n+#define RETURN_ADDRESS_POINTER_REGNUM 35\n \n /* The static chain must be call-clobbered, but not used for\n    function argument passing.  As register 1 is clobbered by\n@@ -614,11 +613,13 @@ extern int current_function_outgoing_args_size;\n \n #define INITIAL_FRAME_POINTER_OFFSET(DEPTH) (DEPTH) = 0\n \n-#define ELIMINABLE_REGS\t\t\t\t        \\\n-{{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t        \\\n- { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},    \\\n- { ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t        \\\n- { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n+#define ELIMINABLE_REGS\t\t\t\t             \\\n+{{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t             \\\n+ { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},         \\\n+ { ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t             \\\n+ { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},           \\\n+ { RETURN_ADDRESS_POINTER_REGNUM, STACK_POINTER_REGNUM},     \\\n+ { RETURN_ADDRESS_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n \n #define CAN_ELIMINATE(FROM, TO) (1)\n \n@@ -633,6 +634,10 @@ extern int current_function_outgoing_args_size;\n   { (OFFSET) = s390_arg_frame_offset (); }     \t\t\t\t  \\\n   else if ((FROM) == ARG_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM)  \\\n   { (OFFSET) = s390_arg_frame_offset (); }     \t\t\t\t  \\\n+  else if ((FROM) == RETURN_ADDRESS_POINTER_REGNUM                        \\\n+            && ((TO) == STACK_POINTER_REGNUM                              \\\n+                || (TO) == HARD_FRAME_POINTER_REGNUM))                    \\\n+  { (OFFSET) = s390_return_address_offset (); }     \t\t\t  \\\n   else\t\t\t\t\t\t\t\t\t  \\\n     abort();\t\t\t\t\t\t\t\t  \\\n }\n@@ -914,10 +919,10 @@ extern int flag_pic;\n    indexed by compiler's hard-register-number (see above).  */\n #define REGISTER_NAMES\t\t\t\t\t\t\t\\\n { \"%r0\",  \"%r1\",  \"%r2\",  \"%r3\",  \"%r4\",  \"%r5\",  \"%r6\",  \"%r7\",\t\\\n-  \"%r8\",  \"%r9\", \"%r10\", \"%r11\", \"%r12\", \"%r13\", \"%r14\", \"%r15\",\t\\\n+  \"%r8\",  \"%r9\",  \"%r10\", \"%r11\", \"%r12\", \"%r13\", \"%r14\", \"%r15\",\t\\\n   \"%f0\",  \"%f2\",  \"%f4\",  \"%f6\",  \"%f1\",  \"%f3\",  \"%f5\",  \"%f7\",\t\\\n-  \"%f8\",  \"%f10\", \"%f12\", \"%f14\", \"%f9\", \"%f11\", \"%f13\", \"%f15\",\t\\\n-  \"%ap\",  \"%cc\",  \"%fp\"\t\t\t\t\t\t\t\\\n+  \"%f8\",  \"%f10\", \"%f12\", \"%f14\", \"%f9\",  \"%f11\", \"%f13\", \"%f15\",\t\\\n+  \"%ap\",  \"%cc\",  \"%fp\",  \"%rp\"\t\t\t\t\t\t\\\n }\n \n /* Emit a dtp-relative reference to a TLS variable.  */"}, {"sha": "d15e7c9a63c0b342d9257b8b2dc7acfacabb5f97", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38e09bc2137703767c8701ba05585b83c507919/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38e09bc2137703767c8701ba05585b83c507919/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=a38e09bc2137703767c8701ba05585b83c507919", "patch": "@@ -1654,9 +1654,6 @@\n \t}\n       else\n \tFAIL;\n-\n-      if (from == frame_pointer_rtx || from == arg_pointer_rtx)\n-\tFAIL;\n     }\n   else\n     {\n@@ -1747,9 +1744,6 @@\n \t}\n       else\n \tFAIL;\n-\n-      if (to == frame_pointer_rtx || to == arg_pointer_rtx)\n-\tFAIL;\n     }\n   else\n     {"}]}