{"sha": "b13091dd9dbabe7fde4b112c4bfb9be729493c16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEzMDkxZGQ5ZGJhYmU3ZmRlNGIxMTJjNGJmYjliZTcyOTQ5M2MxNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2019-01-11T19:40:13Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-01-11T19:40:13Z"}, "message": "PR C++/88114 Gen destructor of an abstract class\n\n        PR C++/8811\n        * decl2.c (maybe_emit_vtables): If needed, generate code for\n        the destructor of an abstract class.\n        (mark_used): Update comment for older function-name change.\n\n        PR C++/88114\n        * g++.dg/cpp0x/defaulted61.C: New.\n        * g++.dg/cpp0x/defaulted62.C: New.\n\nFrom-SVN: r267855", "tree": {"sha": "0baba5296e756ae241a261a2f8e14b979b24bb37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0baba5296e756ae241a261a2f8e14b979b24bb37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b13091dd9dbabe7fde4b112c4bfb9be729493c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13091dd9dbabe7fde4b112c4bfb9be729493c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b13091dd9dbabe7fde4b112c4bfb9be729493c16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13091dd9dbabe7fde4b112c4bfb9be729493c16/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4321da7b93e4a5de7ca73a9933db8be6822a9ff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4321da7b93e4a5de7ca73a9933db8be6822a9ff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4321da7b93e4a5de7ca73a9933db8be6822a9ff1"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "5a5256f13fc5b5d57cbe4eb7ce8dfe1a96e274c3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13091dd9dbabe7fde4b112c4bfb9be729493c16/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13091dd9dbabe7fde4b112c4bfb9be729493c16/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b13091dd9dbabe7fde4b112c4bfb9be729493c16", "patch": "@@ -1,3 +1,10 @@\n+2019-01-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR C++/88114\n+\t* decl2.c (maybe_emit_vtables): If needed, generate code for\n+\tthe destructor of an abstract class.\n+\t(mark_used): Update comment for older function-name change.\n+\n 2019-01-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (start_decl): Improve error location."}, {"sha": "591cc21be20458dea51db798747a1a80f094f08f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13091dd9dbabe7fde4b112c4bfb9be729493c16/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13091dd9dbabe7fde4b112c4bfb9be729493c16/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b13091dd9dbabe7fde4b112c4bfb9be729493c16", "patch": "@@ -2220,6 +2220,16 @@ maybe_emit_vtables (tree ctype)\n \t}\n     }\n \n+  /* For abstract classes, the destructor has been removed from the\n+     vtable (in class.c's build_vtbl_initializer).  For a compiler-\n+     generated destructor, it hence might not have been generated in\n+     this translation unit - and with '#pragma interface' it might\n+     never get generated.  */\n+  if (CLASSTYPE_PURE_VIRTUALS (ctype)\n+      && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (ctype)\n+      && DECL_DEFAULTED_IN_CLASS_P(CLASSTYPE_DESTRUCTOR(ctype)))\n+    note_vague_linkage_fn (CLASSTYPE_DESTRUCTOR(ctype));\n+\n   /* Since we're writing out the vtable here, also write the debug\n      info.  */\n   note_debug_info_needed (ctype);\n@@ -5497,7 +5507,7 @@ mark_used (tree decl, tsubst_flags_t complain)\n \t within the body of a function so as to avoid collecting live data\n \t on the stack (such as overload resolution candidates).\n \n-         We could just let cp_write_global_declarations handle synthesizing\n+         We could just let c_parse_final_cleanups handle synthesizing\n          this function by adding it to deferred_fns, but doing\n          it at the use site produces better error messages.  */\n       ++function_depth;"}, {"sha": "8a031e1d9f8645e37094d939019418a3da3f1155", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13091dd9dbabe7fde4b112c4bfb9be729493c16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13091dd9dbabe7fde4b112c4bfb9be729493c16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b13091dd9dbabe7fde4b112c4bfb9be729493c16", "patch": "@@ -1,3 +1,9 @@\n+2019-01-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR C++/88114\n+\t* g++.dg/cpp0x/defaulted61.C: New\t\n+\t* g++.dg/cpp0x/defaulted62.C: New.\n+\n 2019-01-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/88693"}, {"sha": "e7e0a4862925675d18a77877d769944a987fbf60", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted61.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13091dd9dbabe7fde4b112c4bfb9be729493c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted61.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13091dd9dbabe7fde4b112c4bfb9be729493c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted61.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted61.C?ref=b13091dd9dbabe7fde4b112c4bfb9be729493c16", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-final { scan-assembler \"_ZN3OneD0Ev\" } }\n+\n+// PR C++/88114\n+// Destructor of an abstract class was never generated\n+// when compiling the class - nor later due to the\n+// '#pragma interface'\n+\n+#pragma implementation\n+#pragma interface\n+\n+class One\n+{\n+ public:\n+  virtual ~One() = default;\n+  void some_fn();\n+  virtual void later() = 0;\n+ private:\n+  int m_int;\n+};\n+\n+void One::some_fn() { }"}, {"sha": "d8dab60881697fe03157d975ce5c7e94f3d3b844", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted62.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13091dd9dbabe7fde4b112c4bfb9be729493c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted62.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13091dd9dbabe7fde4b112c4bfb9be729493c16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted62.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted62.C?ref=b13091dd9dbabe7fde4b112c4bfb9be729493c16", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-final { scan-assembler-not \"_ZN3OneD0Ev\" } }\n+\n+// PR C++/88114\n+// Destructor of an abstract class was never generated\n+// when compiling the class - nor later due to the\n+// '#pragma interface'\n+// -> g++.dg/cpp0x/defaulted61.C\n+\n+// HERE, in g++.dg/cpp0x/defaulted62.C:\n+// As we have commented the pragmas, it should NOT be created\n+// #pragma implementation\n+// #pragma interface\n+\n+class One\n+{\n+ public:\n+  virtual ~One() = default;\n+  void some_fn();\n+  virtual void later() = 0;\n+ private:\n+  int m_int;\n+};\n+\n+void One::some_fn() { }"}]}