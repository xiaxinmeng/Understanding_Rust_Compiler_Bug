{"sha": "2398c206101f6da09f87e8afaf3ff422236db61d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5OGMyMDYxMDFmNmRhMDlmODdlOGFmYWYzZmY0MjIyMzZkYjYxZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-08-14T14:40:56Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-08-14T14:42:01Z"}, "message": "i386: Improve LWP builtin expanders.\n\nUse parameterized pattern names to simplify calling of named patterns.\n\n2020-08-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-builtin.def (__builtin_ia32_llwpcb)\n\t(__builtin_ia32_slwpcb, __builtin_ia32_lwpval32)\n\t(__builtin_ia32_lwpval64, __builtin_ia32_lwpins32)\n\t(__builtin_ia32_lwpins64): Use CODE_FOR_nothing.\n\t* config/i386/i386.md (@lwp_llwpcb<mode>):\n\tImplement as parametrized name pattern.\n\t(@lwp_slwpcb<mode>): Ditto.\n\t(@lwp_lwpval<mode>): Ditto.\n\t(@lwp_lwpins<mode>): Ditto.\n\t* config/i386/i386-expand.c (ix86_expand_special_args_builtin)\n\t[case VOID_FTYPE_UINT_UINT_UINT, case VOID_FTYPE_UINT64_UINT_UINT]\n\t[case UCHAR_FTYPE_UINT_UINT_UINT, case UCHAR_FTYPE_UINT64_UINT_UINT]:\n\tRemove.\n\t(ix86_expand_builtin)\n\t[ case IX86_BUILTIN_LLWPCB, case IX86_BUILTIN_LLWPCB]:\n\tUpdate for parameterized name patterns.\n\t[case IX86_BUILTIN_LWPVAL32, case IX86_BUILTIN_LWPVAL64]\n\t[case IX86_BUILTIN_LWPINS32, case IX86_BUILTIN_LWPINS64]: Expand here.", "tree": {"sha": "8000e559c45a18b10bb5612e78f2dc984639cc7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8000e559c45a18b10bb5612e78f2dc984639cc7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2398c206101f6da09f87e8afaf3ff422236db61d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2398c206101f6da09f87e8afaf3ff422236db61d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2398c206101f6da09f87e8afaf3ff422236db61d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2398c206101f6da09f87e8afaf3ff422236db61d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "129a1319c0ab73f4bfc5598dffedb06378b00fc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129a1319c0ab73f4bfc5598dffedb06378b00fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129a1319c0ab73f4bfc5598dffedb06378b00fc0"}], "stats": {"total": 129, "additions": 67, "deletions": 62}, "files": [{"sha": "3b6c4a85579367a53ebe0504b94fb7e0d0e4179f", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2398c206101f6da09f87e8afaf3ff422236db61d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2398c206101f6da09f87e8afaf3ff422236db61d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=2398c206101f6da09f87e8afaf3ff422236db61d", "patch": "@@ -260,12 +260,12 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_loadsf_mask, \"__builtin_ia32\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_storedf_mask, \"__builtin_ia32_storesd_mask\", IX86_BUILTIN_STORESD_MASK, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V2DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_storesf_mask, \"__builtin_ia32_storess_mask\", IX86_BUILTIN_STORESS_MASK, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V4SF_UQI)\n \n-BDESC (OPTION_MASK_ISA_LWP, 0, CODE_FOR_lwp_llwpcb, \"__builtin_ia32_llwpcb\", IX86_BUILTIN_LLWPCB, UNKNOWN, (int) VOID_FTYPE_PVOID)\n-BDESC (OPTION_MASK_ISA_LWP, 0, CODE_FOR_lwp_slwpcb, \"__builtin_ia32_slwpcb\", IX86_BUILTIN_SLWPCB, UNKNOWN, (int) PVOID_FTYPE_VOID)\n-BDESC (OPTION_MASK_ISA_LWP, 0, CODE_FOR_lwp_lwpvalsi3, \"__builtin_ia32_lwpval32\", IX86_BUILTIN_LWPVAL32, UNKNOWN, (int) VOID_FTYPE_UINT_UINT_UINT)\n-BDESC (OPTION_MASK_ISA_LWP | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_lwp_lwpvaldi3, \"__builtin_ia32_lwpval64\", IX86_BUILTIN_LWPVAL64, UNKNOWN, (int) VOID_FTYPE_UINT64_UINT_UINT)\n-BDESC (OPTION_MASK_ISA_LWP, 0, CODE_FOR_lwp_lwpinssi3, \"__builtin_ia32_lwpins32\", IX86_BUILTIN_LWPINS32, UNKNOWN, (int) UCHAR_FTYPE_UINT_UINT_UINT)\n-BDESC (OPTION_MASK_ISA_LWP | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_lwp_lwpinsdi3, \"__builtin_ia32_lwpins64\", IX86_BUILTIN_LWPINS64, UNKNOWN, (int) UCHAR_FTYPE_UINT64_UINT_UINT)\n+BDESC (OPTION_MASK_ISA_LWP, 0, CODE_FOR_nothing, \"__builtin_ia32_llwpcb\", IX86_BUILTIN_LLWPCB, UNKNOWN, (int) VOID_FTYPE_PVOID)\n+BDESC (OPTION_MASK_ISA_LWP, 0, CODE_FOR_nothing, \"__builtin_ia32_slwpcb\", IX86_BUILTIN_SLWPCB, UNKNOWN, (int) PVOID_FTYPE_VOID)\n+BDESC (OPTION_MASK_ISA_LWP, 0, CODE_FOR_nothing, \"__builtin_ia32_lwpval32\", IX86_BUILTIN_LWPVAL32, UNKNOWN, (int) VOID_FTYPE_UINT_UINT_UINT)\n+BDESC (OPTION_MASK_ISA_LWP | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_nothing, \"__builtin_ia32_lwpval64\", IX86_BUILTIN_LWPVAL64, UNKNOWN, (int) VOID_FTYPE_UINT64_UINT_UINT)\n+BDESC (OPTION_MASK_ISA_LWP, 0, CODE_FOR_nothing, \"__builtin_ia32_lwpins32\", IX86_BUILTIN_LWPINS32, UNKNOWN, (int) UCHAR_FTYPE_UINT_UINT_UINT)\n+BDESC (OPTION_MASK_ISA_LWP | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_nothing, \"__builtin_ia32_lwpins64\", IX86_BUILTIN_LWPINS64, UNKNOWN, (int) UCHAR_FTYPE_UINT64_UINT_UINT)\n \n /* FSGSBASE */\n BDESC (OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_rdfsbasesi, \"__builtin_ia32_rdfsbase32\", IX86_BUILTIN_RDFSBASE32, UNKNOWN, (int) UNSIGNED_FTYPE_VOID)"}, {"sha": "9de6f5029b9e8c8aa202781ea9bf0bd605c9f2a4", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 57, "deletions": 22, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2398c206101f6da09f87e8afaf3ff422236db61d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2398c206101f6da09f87e8afaf3ff422236db61d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=2398c206101f6da09f87e8afaf3ff422236db61d", "patch": "@@ -10665,15 +10665,6 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       klass = load;\n       memory = 0;\n       break;\n-    case VOID_FTYPE_UINT_UINT_UINT:\n-    case VOID_FTYPE_UINT64_UINT_UINT:\n-    case UCHAR_FTYPE_UINT_UINT_UINT:\n-    case UCHAR_FTYPE_UINT64_UINT_UINT:\n-      nargs = 3;\n-      klass = load;\n-      memory = ARRAY_SIZE (args);\n-      last_arg_constant = true;\n-      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -10728,13 +10719,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t{\n \t  if (!match)\n \t    {\n-\t      if (icode == CODE_FOR_lwp_lwpvalsi3\n-\t\t  || icode == CODE_FOR_lwp_lwpinssi3\n-\t\t  || icode == CODE_FOR_lwp_lwpvaldi3\n-\t\t  || icode == CODE_FOR_lwp_lwpinsdi3)\n-\t\terror (\"the last argument must be a 32-bit immediate\");\n-\t      else\n-\t\terror (\"the last argument must be an 8-bit immediate\");\n+\t      error (\"the last argument must be an 8-bit immediate\");\n \t      return const0_rtx;\n \t    }\n \t}\n@@ -11658,20 +11643,70 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n     case IX86_BUILTIN_LLWPCB:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       op0 = expand_normal (arg0);\n-      icode = CODE_FOR_lwp_llwpcb;\n-      if (!insn_data[icode].operand[0].predicate (op0, Pmode))\n+\n+      if (!register_operand (op0, Pmode))\n \top0 = ix86_zero_extend_to_Pmode (op0);\n-      emit_insn (gen_lwp_llwpcb (op0));\n+      emit_insn (gen_lwp_llwpcb (Pmode, op0));\n       return 0;\n \n     case IX86_BUILTIN_SLWPCB:\n-      icode = CODE_FOR_lwp_slwpcb;\n       if (!target\n-\t  || !insn_data[icode].operand[0].predicate (target, Pmode))\n+\t  || !register_operand (target, Pmode))\n \ttarget = gen_reg_rtx (Pmode);\n-      emit_insn (gen_lwp_slwpcb (target));\n+      emit_insn (gen_lwp_slwpcb (Pmode, target));\n       return target;\n \n+    case IX86_BUILTIN_LWPVAL32:\n+    case IX86_BUILTIN_LWPVAL64:\n+    case IX86_BUILTIN_LWPINS32:\n+    case IX86_BUILTIN_LWPINS64:\n+      mode = ((fcode == IX86_BUILTIN_LWPVAL32\n+\t       || fcode == IX86_BUILTIN_LWPINS32)\n+\t      ? SImode : DImode);\n+\n+      if (fcode == IX86_BUILTIN_LWPVAL32\n+\t  || fcode == IX86_BUILTIN_LWPVAL64)\n+\ticode = code_for_lwp_lwpval (mode);\n+      else\n+\ticode = code_for_lwp_lwpins (mode);\n+\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      arg2 = CALL_EXPR_ARG (exp, 2);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n+      mode0 = insn_data[icode].operand[0].mode;\n+\n+      if (!insn_data[icode].operand[0].predicate (op0, mode0))\n+\top0 = copy_to_mode_reg (mode0, op0);\n+      if (!insn_data[icode].operand[1].predicate (op1, SImode))\n+\top1 = copy_to_mode_reg (SImode, op1);\n+\n+      if (!CONST_INT_P (op2))\n+\t{\n+\t  error (\"the last argument must be a 32-bit immediate\");\n+\t  return const0_rtx;\n+\t}\n+\n+      emit_insn (GEN_FCN (icode) (op0, op1, op2));\n+\n+      if (fcode == IX86_BUILTIN_LWPINS32\n+\t  || fcode == IX86_BUILTIN_LWPINS64)\n+\t{\n+\t  if (target == 0\n+\t      || !nonimmediate_operand (target, QImode))\n+\t    target = gen_reg_rtx (QImode);\n+\n+\t  pat = gen_rtx_EQ (QImode, gen_rtx_REG (CCCmode, FLAGS_REG),\n+\t\t\t    const0_rtx);\n+\t  emit_insn (gen_rtx_SET (target, pat));\n+\n+\t  return target;\n+\t}\n+      else\n+\treturn 0;\n+\n     case IX86_BUILTIN_BEXTRI32:\n     case IX86_BUILTIN_BEXTRI64:\n       arg0 = CALL_EXPR_ARG (exp, 0);"}, {"sha": "bfc600c6a9cf328393eaf9a6fa453ac44afc532f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2398c206101f6da09f87e8afaf3ff422236db61d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2398c206101f6da09f87e8afaf3ff422236db61d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2398c206101f6da09f87e8afaf3ff422236db61d", "patch": "@@ -21093,12 +21093,7 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_expand \"lwp_llwpcb\"\n-  [(unspec_volatile [(match_operand 0 \"register_operand\")]\n-\t\t    UNSPECV_LLWP_INTRINSIC)]\n-  \"TARGET_LWP\")\n-\n-(define_insn \"*lwp_llwpcb<mode>_1\"\n+(define_insn \"@lwp_llwpcb<mode>\"\n   [(unspec_volatile [(match_operand:P 0 \"register_operand\" \"r\")]\n \t\t    UNSPECV_LLWP_INTRINSIC)]\n   \"TARGET_LWP\"\n@@ -21107,13 +21102,7 @@\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"length\" \"5\")])\n \n-(define_expand \"lwp_slwpcb\"\n-  [(set (match_operand 0 \"register_operand\")\n-\t(unspec_volatile [(const_int 0)] UNSPECV_SLWP_INTRINSIC))]\n-  \"TARGET_LWP\"\n-  \"emit_insn (gen_lwp_slwpcb_1 (Pmode, operands[0])); DONE;\")\n-\n-(define_insn \"@lwp_slwpcb<mode>_1\"\n+(define_insn \"@lwp_slwpcb<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:P [(const_int 0)] UNSPECV_SLWP_INTRINSIC))]\n   \"TARGET_LWP\"\n@@ -21122,16 +21111,7 @@\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"length\" \"5\")])\n \n-(define_expand \"lwp_lwpval<mode>3\"\n-  [(unspec_volatile [(match_operand:SWI48 1 \"register_operand\")\n-    \t    \t     (match_operand:SI 2 \"nonimmediate_operand\")\n-\t\t     (match_operand:SI 3 \"const_int_operand\")]\n-\t\t    UNSPECV_LWPVAL_INTRINSIC)]\n-  \"TARGET_LWP\"\n-  ;; Avoid unused variable warning.\n-  \"(void) operands[0];\")\n-\n-(define_insn \"*lwp_lwpval<mode>3_1\"\n+(define_insn \"@lwp_lwpval<mode>\"\n   [(unspec_volatile [(match_operand:SWI48 0 \"register_operand\" \"r\")\n     \t    \t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"i\")]\n@@ -21143,17 +21123,7 @@\n    (set (attr \"length\")\n         (symbol_ref \"ix86_attr_length_address_default (insn) + 9\"))])\n \n-(define_expand \"lwp_lwpins<mode>3\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(unspec_volatile:CCC [(match_operand:SWI48 1 \"register_operand\")\n-\t\t\t      (match_operand:SI 2 \"nonimmediate_operand\")\n-\t\t\t      (match_operand:SI 3 \"const_int_operand\")]\n-\t\t\t     UNSPECV_LWPINS_INTRINSIC))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\")\n-\t(eq:QI (reg:CCC FLAGS_REG) (const_int 0)))]\n-  \"TARGET_LWP\")\n-\n-(define_insn \"*lwp_lwpins<mode>3_1\"\n+(define_insn \"@lwp_lwpins<mode>\"\n   [(set (reg:CCC FLAGS_REG)\n \t(unspec_volatile:CCC [(match_operand:SWI48 0 \"register_operand\" \"r\")\n \t\t\t      (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")"}]}