{"sha": "4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUxOGE3ZDQxZDVmYzBiNWE5ZTU5NmU1NjkzZTUxNGNjNmJkZmJmNw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2009-09-09T00:43:36Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-09-09T00:43:36Z"}, "message": "re PR middle-end/41268 (bootstrap is broken after r151350 (expand from tuples))\n\n\tPR middle-end/41268\n\t* cfgexpand.c (expand_gimple_stmt_1): Use an int for storing\n\tSUBREG_PROMOTED_UNSIGNED_P, instead of a bool.\n\t* rtl.h (struct rtx, SUBREG_PROMOTED_UNSIGNED_P): Update comments\n\tto reflect reality.\n\nFrom-SVN: r151544", "tree": {"sha": "a983d9f99d48e2a96d50bdf1d707e518b0f89c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a983d9f99d48e2a96d50bdf1d707e518b0f89c42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fb455bc704247467133ca73922a026489be9947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb455bc704247467133ca73922a026489be9947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fb455bc704247467133ca73922a026489be9947"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "f0be5934a06f5cfb34ca2f9f2c28f61f7dc11dc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7", "patch": "@@ -1,3 +1,11 @@\n+2009-09-09  Michael Matz  <matz@suse.de>\n+\n+\tPR middle-end/41268\n+\t* cfgexpand.c (expand_gimple_stmt_1): Use an int for storing\n+\tSUBREG_PROMOTED_UNSIGNED_P, instead of a bool.\n+\t* rtl.h (struct rtx, SUBREG_PROMOTED_UNSIGNED_P): Update comments\n+\tto reflect reality.\n+\n 2009-09-08  DJ Delorie  <dj@redhat.com>\n \n \t* config/mep/mep.c (conversions[]): Add \"ml\" pattern."}, {"sha": "d1c2be29b32578439e3ca8daee6bf47bcb04a7bb", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7", "patch": "@@ -1920,19 +1920,19 @@ expand_gimple_stmt_1 (gimple stmt)\n \t      ;\n \t    else if (promoted)\n \t      {\n-\t\tbool unsigndp = SUBREG_PROMOTED_UNSIGNED_P (target);\n+\t\tint unsignedp = SUBREG_PROMOTED_UNSIGNED_P (target);\n \t\t/* If TEMP is a VOIDmode constant, use convert_modes to make\n \t\t   sure that we properly convert it.  */\n \t\tif (CONSTANT_P (temp) && GET_MODE (temp) == VOIDmode)\n \t\t  {\n \t\t    temp = convert_modes (GET_MODE (target),\n \t\t\t\t\t  TYPE_MODE (ops.type),\n-\t\t\t\t\t  temp, unsigndp);\n+\t\t\t\t\t  temp, unsignedp);\n \t\t    temp = convert_modes (GET_MODE (SUBREG_REG (target)),\n-\t\t\t\t\t  GET_MODE (target), temp, unsigndp);\n+\t\t\t\t\t  GET_MODE (target), temp, unsignedp);\n \t\t  }\n \n-\t\tconvert_move (SUBREG_REG (target), temp, unsigndp);\n+\t\tconvert_move (SUBREG_REG (target), temp, unsignedp);\n \t      }\n \t    else if (nontemporal && emit_storent_insn (target, temp))\n \t      ;"}, {"sha": "3427347225d1d04118c50e0b542027fe09283de4", "filename": "gcc/rtl.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4e18a7d41d5fc0b5a9e596e5693e514cc6bdfbf7", "patch": "@@ -255,8 +255,7 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n        ECF_LOOPING_CONST_OR_PURE and DECL_LOOPING_CONST_OR_PURE_P. */\n   unsigned int call : 1;\n   /* 1 in a REG, MEM, or CONCAT if the value is set at most once, anywhere.\n-     1 in a SUBREG if it references an unsigned object whose mode has been\n-     from a promoted to a wider mode.\n+     1 in a SUBREG used for SUBREG_PROMOTED_UNSIGNED_P.\n      1 in a SYMBOL_REF if it addresses something in the per-function\n      constants pool.\n      1 in a CALL_INSN logically equivalent to ECF_CONST and TREE_READONLY. \n@@ -268,7 +267,7 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n      if it has been deleted.\n      1 in a REG expression if corresponds to a variable declared by the user,\n      0 for an internally generated temporary.\n-     1 in a SUBREG with a negative value.\n+     1 in a SUBREG used for SUBREG_PROMOTED_UNSIGNED_P.\n      1 in a LABEL_REF, REG_LABEL_TARGET or REG_LABEL_OPERAND note for a\n      non-local label.\n      In a SYMBOL_REF, this flag is used for machine-specific purposes.\n@@ -1161,6 +1160,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n     _rtx->unchanging = (VAL);\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n+\n+/* Valid for subregs which are SUBREG_PROMOTED_VAR_P().  In that case\n+   this gives the necessary extensions:\n+   0  - signed\n+   1  - normal unsigned\n+   -1 - pointer unsigned, which most often can be handled like unsigned\n+        extension, except for generating instructions where we need to\n+\temit special code (ptr_extend insns) on some architectures.  */\n+\n #define SUBREG_PROMOTED_UNSIGNED_P(RTX)\t\\\n   ((RTL_FLAG_CHECK1(\"SUBREG_PROMOTED_UNSIGNED_P\", (RTX), SUBREG)->volatil) \\\n    ? -1 : (int) (RTX)->unchanging)"}]}