{"sha": "b41e6dd50f329b0291457e939d4c0dacd81c82c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQxZTZkZDUwZjMyOWIwMjkxNDU3ZTkzOWQ0YzBkYWNkODFjODJjMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-04T11:59:07Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-04T11:59:07Z"}, "message": "aarch64: Improve vcombine codegen [PR89057]\n\nThis patch fixes a codegen regression in the handling of things like:\n\n  __temp.val[0]\t\t\t\t\t\t\t\t     \\\n    = vcombine_##funcsuffix (__b.val[0],\t\t\t\t     \\\n\t\t\t     vcreate_##funcsuffix (__AARCH64_UINT64_C (0))); \\\n\nin the 64-bit vst[234] functions.  The zero was forced into a\nregister at expand time, and we relied on combine to fuse the\nzero and combine back together into a single combinez pattern.\nThe problem is that the zero could be hoisted before combine\ngets a chance to do its thing.\n\ngcc/\n\tPR target/89057\n\t* config/aarch64/aarch64-simd.md (aarch64_combine<mode>): Accept\n\taarch64_simd_reg_or_zero for operand 2.  Use the combinez patterns\n\tto handle zero operands.\n\ngcc/testsuite/\n\tPR target/89057\n\t* gcc.target/aarch64/pr89057.c: New test.", "tree": {"sha": "65dc2ac48b43e224d17ae38019837a277ca57bc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65dc2ac48b43e224d17ae38019837a277ca57bc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b41e6dd50f329b0291457e939d4c0dacd81c82c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41e6dd50f329b0291457e939d4c0dacd81c82c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41e6dd50f329b0291457e939d4c0dacd81c82c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41e6dd50f329b0291457e939d4c0dacd81c82c1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba15b0fa0df773a90374f6b06775534ecd9f7b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba15b0fa0df773a90374f6b06775534ecd9f7b43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba15b0fa0df773a90374f6b06775534ecd9f7b43"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "85770c84f0a7835706909ceef0ea847ed0653620", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41e6dd50f329b0291457e939d4c0dacd81c82c1/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41e6dd50f329b0291457e939d4c0dacd81c82c1/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=b41e6dd50f329b0291457e939d4c0dacd81c82c1", "patch": "@@ -3340,11 +3340,20 @@\n (define_expand \"aarch64_combine<mode>\"\n   [(match_operand:<VDBL> 0 \"register_operand\")\n    (match_operand:VDC 1 \"register_operand\")\n-   (match_operand:VDC 2 \"register_operand\")]\n+   (match_operand:VDC 2 \"aarch64_simd_reg_or_zero\")]\n   \"TARGET_SIMD\"\n {\n-  aarch64_split_simd_combine (operands[0], operands[1], operands[2]);\n-\n+  if (operands[2] == CONST0_RTX (<MODE>mode))\n+    {\n+      if (BYTES_BIG_ENDIAN)\n+\temit_insn (gen_aarch64_combinez_be<mode> (operands[0], operands[1],\n+\t\t\t\t\t\t  operands[2]));\n+      else\n+\temit_insn (gen_aarch64_combinez<mode> (operands[0], operands[1],\n+\t\t\t\t\t       operands[2]));\n+    }\n+  else\n+    aarch64_split_simd_combine (operands[0], operands[1], operands[2]);\n   DONE;\n }\n )"}, {"sha": "1e200245dddd5b841304804fdb02ed4e53f3a355", "filename": "gcc/testsuite/gcc.target/aarch64/pr89057.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41e6dd50f329b0291457e939d4c0dacd81c82c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr89057.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41e6dd50f329b0291457e939d4c0dacd81c82c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr89057.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr89057.c?ref=b41e6dd50f329b0291457e939d4c0dacd81c82c1", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+\n+void\n+f (int32_t *dst, int32_t *src, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      int32x2x3_t a = vld3_s32 (src + i * 6);\n+      int32x2x3_t b = { a.val[2], a.val[1], a.val[0] };\n+      vst3_s32 (dst + i * 6, b);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tins\\t} } } */"}]}