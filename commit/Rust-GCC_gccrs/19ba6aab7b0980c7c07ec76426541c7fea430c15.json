{"sha": "19ba6aab7b0980c7c07ec76426541c7fea430c15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTliYTZhYWI3YjA5ODBjN2MwN2VjNzY0MjY1NDFjN2ZlYTQzMGMxNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-09-13T14:35:32Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-09-13T14:35:32Z"}, "message": "re PR middle-end/58094 (IPA devirt testsuite errors)\n\n\tPR middle-end/58094\n\t* ipa-inline.c (check_callers): New function.\n\t(check_caller_edge): Remove.\n\t(want_inline_function_to_all_callers_p): Also permit alises that are\n\tcalled dirrectly.\n\t(inline_to_all_callers): Terminate the walk when devirtualization\n\tintroduce new calls.\n\nFrom-SVN: r202567", "tree": {"sha": "cb6ce4ffad74207522fbdd1f33e367841680fa8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb6ce4ffad74207522fbdd1f33e367841680fa8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19ba6aab7b0980c7c07ec76426541c7fea430c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ba6aab7b0980c7c07ec76426541c7fea430c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ba6aab7b0980c7c07ec76426541c7fea430c15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ba6aab7b0980c7c07ec76426541c7fea430c15/comments", "author": null, "committer": null, "parents": [{"sha": "a93c18c88fc9aecdf7a63340eb4c22aba05c3983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93c18c88fc9aecdf7a63340eb4c22aba05c3983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93c18c88fc9aecdf7a63340eb4c22aba05c3983"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "add64c0853574c1eaf8056bd71659d03d420650d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ba6aab7b0980c7c07ec76426541c7fea430c15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ba6aab7b0980c7c07ec76426541c7fea430c15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19ba6aab7b0980c7c07ec76426541c7fea430c15", "patch": "@@ -1,3 +1,13 @@\n+2013-09-13  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/58094\n+\t* ipa-inline.c (check_callers): New function.\n+\t(check_caller_edge): Remove.\n+\t(want_inline_function_to_all_callers_p): Also permit alises that are\n+\tcalled dirrectly.\n+\t(inline_to_all_callers): Terminate the walk when devirtualization\n+\tintroduce new calls.\n+\n 2013-09-13  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline-analysis.c (struct growth_data): Add node."}, {"sha": "266c048672850e47052741e1ed77c98c421ae3d1", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ba6aab7b0980c7c07ec76426541c7fea430c15/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ba6aab7b0980c7c07ec76426541c7fea430c15/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=19ba6aab7b0980c7c07ec76426541c7fea430c15", "patch": "@@ -740,14 +740,22 @@ want_inline_self_recursive_call_p (struct cgraph_edge *edge,\n   return want_inline;\n }\n \n-/* Return true when NODE has caller other than EDGE. \n+/* Return true when NODE has uninlinable caller;\n+   set HAS_HOT_CALL if it has hot call. \n    Worker for cgraph_for_node_and_aliases.  */\n \n static bool\n-check_caller_edge (struct cgraph_node *node, void *edge)\n+check_callers (struct cgraph_node *node, void *has_hot_call)\n {\n-  return (node->callers\n-          && node->callers != edge);\n+  struct cgraph_edge *e;\n+   for (e = node->callers; e; e = e->next_caller)\n+     {\n+       if (!can_inline_edge_p (e, true))\n+         return true;\n+       if (!has_hot_call && cgraph_maybe_hot_edge_p (e))\n+\t *(bool *)has_hot_call = true;\n+     }\n+  return false;\n }\n \n /* If NODE has a caller, return true.  */\n@@ -768,7 +776,6 @@ static bool\n want_inline_function_to_all_callers_p (struct cgraph_node *node, bool cold)\n {\n    struct cgraph_node *function = cgraph_function_or_thunk_node (node, NULL);\n-   struct cgraph_edge *e;\n    bool has_hot_call = false;\n \n    /* Does it have callers?  */\n@@ -782,18 +789,9 @@ want_inline_function_to_all_callers_p (struct cgraph_node *node, bool cold)\n    /* Inlining into all callers would increase size?  */\n    if (estimate_growth (node) > 0)\n      return false;\n-   /* Maybe other aliases has more direct calls.  */\n-   if (cgraph_for_node_and_aliases (node, check_caller_edge, node->callers, true))\n-     return false;\n    /* All inlines must be possible.  */\n-   for (e = node->callers; e; e = e->next_caller)\n-     {\n-       if (!can_inline_edge_p (e, true))\n-         return false;\n-       if (!has_hot_call && cgraph_maybe_hot_edge_p (e))\n-\t has_hot_call = 1;\n-     }\n-\n+   if (cgraph_for_node_and_aliases (node, check_callers, &has_hot_call, true))\n+     return false;\n    if (!cold && !has_hot_call)\n      return false;\n    return true;\n@@ -1949,7 +1947,7 @@ inline_to_all_callers (struct cgraph_node *node, void *data)\n \t{\n \t  if (dump_file)\n \t    fprintf (dump_file, \"New calls found; giving up.\\n\");\n-\t  break;\n+\t  return true;\n \t}\n     }\n   return false;"}]}