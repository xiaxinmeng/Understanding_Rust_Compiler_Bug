{"sha": "4bf02aaf4d2b1508a9735647410cb1ea365bcbbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJmMDJhYWY0ZDJiMTUwOGE5NzM1NjQ3NDEwY2IxZWEzNjViY2JiYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-08-10T17:20:09Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-08-10T17:20:09Z"}, "message": "i386.md (simple LEA peephole2s): Add zero-extend variants of PLUS and MULT simple LEA patterns.\n\n\t* config/i386/i386.md (simple LEA peephole2s): Add zero-extend\n\tvariants of PLUS and MULT simple LEA patterns.  Disable PLUS\n\tpatterns for TARGET_OPT_AGU.\n\nFrom-SVN: r190301", "tree": {"sha": "cc1e0df7fc6971aed068403ffd5c3b1de39c3d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc1e0df7fc6971aed068403ffd5c3b1de39c3d86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bf02aaf4d2b1508a9735647410cb1ea365bcbbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bf02aaf4d2b1508a9735647410cb1ea365bcbbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bf02aaf4d2b1508a9735647410cb1ea365bcbbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bf02aaf4d2b1508a9735647410cb1ea365bcbbc/comments", "author": null, "committer": null, "parents": [{"sha": "04f92ff4fcb0f1fd46b2cca65ea04f896ad783f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f92ff4fcb0f1fd46b2cca65ea04f896ad783f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f92ff4fcb0f1fd46b2cca65ea04f896ad783f2"}], "stats": {"total": 166, "additions": 130, "deletions": 36}, "files": [{"sha": "6fe9b3671ccdfefb95c491324fcd7615d0904ad1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bf02aaf4d2b1508a9735647410cb1ea365bcbbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bf02aaf4d2b1508a9735647410cb1ea365bcbbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bf02aaf4d2b1508a9735647410cb1ea365bcbbc", "patch": "@@ -1,3 +1,9 @@\n+2012-08-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (simple LEA peephole2s): Add zero-extend\n+\tvariants of PLUS and MULT simple LEA patterns.  Disable PLUS\n+\tpatterns for TARGET_OPT_AGU.\n+\n 2012-08-10  Richard Guenther  <rguenther@suse.de>\n \n \t* Makefile.in (OBJS): Remove matrix-reorg.o.\n@@ -124,8 +130,8 @@\n \n 2012-08-10  Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n-\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Fix builtin\n-\ttarget mask of __builtin_ia32_rdseed_di_step.\n+\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Fix\n+\ttarget mask of __builtin_ia32_rdseed_di_step builtin.\n \n 2012-08-10  Richard Guenther  <rguenther@suse.de>\n \n@@ -377,10 +383,10 @@\n \n 2012-08-09  Uros Bizjak  <ubizjak@gmail.com>\n \n-        * config/alpha/alpha.c (alpha_pad_noreturn): Rename to ...\n-        (alpha_pad_function_end): ... this.  Also insert NOP between\n-        sibling call and GP load.\n-        (alpha_reorg): Update call to alpha_pad_function_end.  Expand comment.\n+\t* config/alpha/alpha.c (alpha_pad_noreturn): Rename to ...\n+\t(alpha_pad_function_end): ... this.  Also insert NOP between\n+\tsibling call and GP load.\n+\t(alpha_reorg): Update call to alpha_pad_function_end.  Expand comment.\n \n 2012-08-09  Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n@@ -1843,25 +1849,25 @@\n \n 2012-07-27  Segher Boessenkool  <segher@kernel.crashing.org>\n \n-        * config/rs6000/constraints.md: Delete \"q\" constraint.\n-        * config/rs6000/dfp.md (movsd_hardfloat, movsd_softfloat):\n-        Delete the \"q\" alternative.\n-        * config/rs6000/predicates.md (gpc_reg_operand): Adjust.\n-        * config/rs6000/rs6000.c (rs6000_debug_reg_global,\n-        rs6000_init_hard_regno_mode_ok, rs6000_dbx_register_number):\n-        Adjust to MQ_REGNO removal.\n-        * config/rs6000/rs6000.h (FIRST_PSEUDO_REGISTER): Adjust\n-        comment.\n-        (REG_ALLOC_ORDER): Adjust comment.  Remove MQ from alloc order.\n-        (enum reg_class): Adjust comment.  Delete MQ_REGS.\n-        (REG_CLASS_CONTENTS): Adjust.\n-        (REGISTER_NAMES, ADDITIONAL_REGISTER_NAMES): Adjust comment.\n-        * config/rs6000/rs6000.md: Delete MQ_REGNO.\n-        (movsi_internal1, movsi_internal1_single, movhi_internal,\n-        movqi_internal, movcc_internal1, movsf_hardfloat,\n-        movsf_softfloat): Delete the \"q\" alternative.\n-        (ctr<mode>_internal1, ctr<mode>_internal2, ctr<mode>_internal5,\n-        ctr<mode>_internal6): Delete \"q\" constraint.\n+\t* config/rs6000/constraints.md: Delete \"q\" constraint.\n+\t* config/rs6000/dfp.md (movsd_hardfloat, movsd_softfloat):\n+\tDelete the \"q\" alternative.\n+\t* config/rs6000/predicates.md (gpc_reg_operand): Adjust.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global)\n+\t(rs6000_init_hard_regno_mode_ok, rs6000_dbx_register_number):\n+\tadjust to MQ_REGNO removal.\n+\t* config/rs6000/rs6000.h (FIRST_PSEUDO_REGISTER): Adjust\n+\tcomment.\n+\t(REG_ALLOC_ORDER): Adjust comment.  Remove MQ from alloc order.\n+\t(enum reg_class): Adjust comment.  Delete MQ_REGS.\n+\t(REG_CLASS_CONTENTS): Adjust.\n+\t(REGISTER_NAMES, ADDITIONAL_REGISTER_NAMES): Adjust comment.\n+\t* config/rs6000/rs6000.md: Delete MQ_REGNO.\n+\t(movsi_internal1, movsi_internal1_single, movhi_internal,\n+\tmovqi_internal, movcc_internal1, movsf_hardfloat,\n+\tmovsf_softfloat): Delete the \"q\" alternative.\n+\t(ctr<mode>_internal1, ctr<mode>_internal2, ctr<mode>_internal5,\n+\tctr<mode>_internal6): Delete \"q\" constraint.\n \n 2012-07-27  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "837547e2d8a45f0b9c7f41637297e22d1e56600a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 99, "deletions": 11, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bf02aaf4d2b1508a9735647410cb1ea365bcbbc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bf02aaf4d2b1508a9735647410cb1ea365bcbbc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4bf02aaf4d2b1508a9735647410cb1ea365bcbbc", "patch": "@@ -17317,30 +17317,34 @@\n \n ;; Attempt to convert simple lea to add/shift.\n ;; These can be created by move expanders.\n+;; Disable PLUS peepholes on TARGET_OPT_AGU, since all\n+;; relevant lea instructions were already split.\n \n (define_peephole2\n   [(set (match_operand:SWI48 0 \"register_operand\")\n   \t(plus:SWI48 (match_dup 0)\n \t\t    (match_operand:SWI48 1 \"<nonmemory_operand>\")))]\n-  \"peep2_regno_dead_p (0, FLAGS_REG)\"\n+  \"!TARGET_OPT_AGU\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0) (plus:SWI48 (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC FLAGS_REG))])])\n \n (define_peephole2\n   [(set (match_operand:SWI48 0 \"register_operand\")\n   \t(plus:SWI48 (match_operand:SWI48 1 \"<nonmemory_operand>\")\n \t\t    (match_dup 0)))]\n-  \"peep2_regno_dead_p (0, FLAGS_REG)\"\n+  \"!TARGET_OPT_AGU\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0) (plus:SWI48 (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC FLAGS_REG))])])\n \n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\")\n   \t(subreg:SI (plus:DI (match_operand:DI 1 \"register_operand\")\n \t\t\t    (match_operand:DI 2 \"nonmemory_operand\")) 0))]\n-  \"TARGET_64BIT\n-   && peep2_regno_dead_p (0, FLAGS_REG)\n-   && REGNO (operands[0]) == REGNO (operands[1])\"\n+  \"TARGET_64BIT && !TARGET_OPT_AGU\n+   && REGNO (operands[0]) == REGNO (operands[1])\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0) (plus:SI (match_dup 0) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"operands[2] = gen_lowpart (SImode, operands[2]);\")\n@@ -17349,27 +17353,81 @@\n   [(set (match_operand:SI 0 \"register_operand\")\n   \t(subreg:SI (plus:DI (match_operand:DI 1 \"nonmemory_operand\")\n \t\t\t    (match_operand:DI 2 \"register_operand\")) 0))]\n-  \"TARGET_64BIT\n-   && peep2_regno_dead_p (0, FLAGS_REG)\n-   && REGNO (operands[0]) == REGNO (operands[2])\"\n+  \"TARGET_64BIT && !TARGET_OPT_AGU\n+   && REGNO (operands[0]) == REGNO (operands[2])\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 0) (plus:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n \n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\")\n+  \t(zero_extend:DI\n+\t  (plus:SI (match_operand:SI 1 \"register_operand\")\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\"))))]\n+  \"TARGET_64BIT && !TARGET_OPT_AGU\n+   && REGNO (operands[0]) == REGNO (operands[1])\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extend:DI (plus:SI (match_dup 1) (match_dup 2))))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\")\n+  \t(zero_extend:DI\n+\t  (plus:SI (match_operand:SI 1 \"nonmemory_operand\")\n+\t\t   (match_operand:SI 2 \"register_operand\"))))]\n+  \"TARGET_64BIT && !TARGET_OPT_AGU\n+   && REGNO (operands[0]) == REGNO (operands[2])\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extend:DI (plus:SI (match_dup 2) (match_dup 1))))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\")\n+  \t(zero_extend:DI\n+\t  (subreg:SI (plus:DI (match_dup 0)\n+\t\t\t      (match_operand:DI 1 \"nonmemory_operand\")) 0)))]\n+  \"TARGET_64BIT && !TARGET_OPT_AGU\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extend:DI (plus:SI (match_dup 2) (match_dup 1))))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_lowpart (SImode, operands[0]);\n+})\n+\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\")\n+  \t(zero_extend:DI\n+\t  (subreg:SI (plus:DI (match_operand:DI 1 \"nonmemory_operand\")\n+\t\t     \t      (match_dup 0)) 0)))]\n+  \"TARGET_64BIT && !TARGET_OPT_AGU\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extend:DI (plus:SI (match_dup 2) (match_dup 1))))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_lowpart (SImode, operands[0]);\n+})\n+\n (define_peephole2\n   [(set (match_operand:SWI48 0 \"register_operand\")\n   \t(mult:SWI48 (match_dup 0)\n \t\t    (match_operand:SWI48 1 \"const_int_operand\")))]\n   \"exact_log2 (INTVAL (operands[1])) >= 0\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n-  [(parallel [(set (match_dup 0) (ashift:SWI48 (match_dup 0) (match_dup 2)))\n+  [(parallel [(set (match_dup 0) (ashift:SWI48 (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[2] = GEN_INT (exact_log2 (INTVAL (operands[1])));\")\n+  \"operands[1] = GEN_INT (exact_log2 (INTVAL (operands[1])));\")\n \n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\")\n   \t(subreg:SI (mult:DI (match_operand:DI 1 \"register_operand\")\n-\t\t   (match_operand:DI 2 \"const_int_operand\")) 0))]\n+\t\t\t    (match_operand:DI 2 \"const_int_operand\")) 0))]\n   \"TARGET_64BIT\n    && exact_log2 (INTVAL (operands[2])) >= 0\n    && REGNO (operands[0]) == REGNO (operands[1])\n@@ -17378,6 +17436,36 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"operands[2] = GEN_INT (exact_log2 (INTVAL (operands[2])));\")\n \n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\")\n+  \t(zero_extend:DI\n+\t  (mult:SI (match_operand:SI 1 \"register_operand\")\n+\t\t   (match_operand:SI 2 \"const_int_operand\"))))]\n+  \"TARGET_64BIT\n+   && exact_log2 (INTVAL (operands[2])) >= 0\n+   && REGNO (operands[0]) == REGNO (operands[1])\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extend (ashift:SI (match_dup 1) (match_dup 2))))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[2] = GEN_INT (exact_log2 (INTVAL (operands[2])));\")\n+\n+(define_peephole2\n+  [(set (match_operand:DI 0 \"register_operand\")\n+  \t(zero_extend:DI\n+  \t  (subreg:SI (mult:DI (match_dup 0)\n+\t\t\t      (match_operand:DI 1 \"const_int_operand\")) 0)))]\n+  \"TARGET_64BIT\n+   && exact_log2 (INTVAL (operands[2])) >= 0\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extend:DI (ashift:SI (match_dup 2) (match_dup 1))))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[1] = GEN_INT (exact_log2 (INTVAL (operands[1])));\n+  operands[2] = gen_lowpart (SImode, operands[0]);\n+})\n+\n ;; The ESP adjustments can be done by the push and pop instructions.  Resulting\n ;; code is shorter, since push is only 1 byte, while add imm, %esp is 3 bytes.\n ;; On many CPUs it is also faster, since special hardware to avoid esp"}]}