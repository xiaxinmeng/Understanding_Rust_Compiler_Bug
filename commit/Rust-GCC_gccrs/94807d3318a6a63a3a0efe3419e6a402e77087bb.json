{"sha": "94807d3318a6a63a3a0efe3419e6a402e77087bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4MDdkMzMxOGE2YTYzYTNhMGVmZTM0MTllNmE0MDJlNzcwODdiYg==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2001-02-14T00:03:11Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-02-14T00:03:11Z"}, "message": "decl.c (classdollar_identifier_node): Initialize.\n\n2001-02-13  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* decl.c (classdollar_identifier_node): Initialize.\n\t* java-tree.h (enum java_tree_index): New entry\n\t`JTI_CLASSDOLLAR_IDENTIFIER_NODE.'\n\t(classdollar_identifier_node): New macro.\n\t(ID_CLASSDOLLAR_P): Likewise.\n\t* parse.y (build_dot_class_method): Use `classdollar_identifier_node.'\n\t(build_dot_class_method_invocation): Likewise.\n\t(find_applicable_accessible_methods_list): `class$' can't be\n\tinherited.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-02/msg00760.html)\n\nFrom-SVN: r39650", "tree": {"sha": "2409121bec47bf9d0bb428da3a62dc4db716f8f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2409121bec47bf9d0bb428da3a62dc4db716f8f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94807d3318a6a63a3a0efe3419e6a402e77087bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94807d3318a6a63a3a0efe3419e6a402e77087bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94807d3318a6a63a3a0efe3419e6a402e77087bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94807d3318a6a63a3a0efe3419e6a402e77087bb/comments", "author": null, "committer": null, "parents": [{"sha": "7093c9eac47ff7bfb670e7dec280d30b545a30c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7093c9eac47ff7bfb670e7dec280d30b545a30c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7093c9eac47ff7bfb670e7dec280d30b545a30c2"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "4b343b1c30a64636459ce4959cbcfefdc4d14344", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94807d3318a6a63a3a0efe3419e6a402e77087bb/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94807d3318a6a63a3a0efe3419e6a402e77087bb/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=94807d3318a6a63a3a0efe3419e6a402e77087bb", "patch": "@@ -1,3 +1,15 @@\n+2001-02-13  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* decl.c (classdollar_identifier_node): Initialize.\n+\t* java-tree.h (enum java_tree_index): New entry \n+\t`JTI_CLASSDOLLAR_IDENTIFIER_NODE.'\n+\t(classdollar_identifier_node): New macro.\n+\t(ID_CLASSDOLLAR_P): Likewise.\n+\t* parse.y (build_dot_class_method): Use `classdollar_identifier_node.'\n+\t(build_dot_class_method_invocation): Likewise.\n+\t(find_applicable_accessible_methods_list): `class$' can't be\n+\tinherited.\n+\n 2001-02-09  Raja R Harinath  <harinath@cs.umn.edu>\n \n \t* Make-lang.in (java/mangle_name.o): Add 'make' prereqs."}, {"sha": "2f7f31583e0d344fabacfd8fc68273437d83d92f", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94807d3318a6a63a3a0efe3419e6a402e77087bb/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94807d3318a6a63a3a0efe3419e6a402e77087bb/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=94807d3318a6a63a3a0efe3419e6a402e77087bb", "patch": "@@ -602,6 +602,7 @@ init_decl_processing ()\n   super_identifier_node = get_identifier (\"super\");\n   continue_identifier_node = get_identifier (\"continue\");\n   access0_identifier_node = get_identifier (\"access$0\");\n+  classdollar_identifier_node = get_identifier (\"class$\");\n \n   /* for lack of a better place to put this stub call */\n   init_expr_processing();"}, {"sha": "30b9d87492802f78106d31ce035e577d84c5d979", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94807d3318a6a63a3a0efe3419e6a402e77087bb/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94807d3318a6a63a3a0efe3419e6a402e77087bb/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=94807d3318a6a63a3a0efe3419e6a402e77087bb", "patch": "@@ -270,6 +270,7 @@ enum java_tree_index\n   JTI_SUPER_IDENTIFIER_NODE,  \n   JTI_CONTINUE_IDENTIFIER_NODE,  \n   JTI_ACCESS0_IDENTIFIER_NODE, \n+  JTI_CLASSDOLLAR_IDENTIFIER_NODE,\n   JTI_ONE_ELT_ARRAY_DOMAIN_TYPE,\n \n   JTI_RETURN_ADDRESS_TYPE_NODE,\n@@ -460,6 +461,8 @@ extern tree java_global_trees[JTI_MAX];\n   java_global_trees[JTI_CONTINUE_IDENTIFIER_NODE]  /* \"continue\" */\n #define access0_identifier_node \\\n   java_global_trees[JTI_ACCESS0_IDENTIFIER_NODE] /* \"access$0\" */\n+#define classdollar_identifier_node \\\n+  java_global_trees[JTI_CLASSDOLLAR_IDENTIFIER_NODE] /* \"class$\" */\n #define one_elt_array_domain_type \\\n   java_global_trees[JTI_ONE_ELT_ARRAY_DOMAIN_TYPE]\n /* The type of the return address of a subroutine. */\n@@ -1154,6 +1157,7 @@ struct rtx_def * java_lang_expand_expr PARAMS ((tree, rtx, enum machine_mode,\n #define ID_FINIT_P(ID)  ((ID) == finit_identifier_node \\\n \t\t\t || (ID) == finit_leg_identifier_node)\n #define ID_CLINIT_P(ID) ((ID) == clinit_identifier_node)\n+#define ID_CLASSDOLLAR_P(ID) ((ID) == classdollar_identifier_node)\n \n /* Access flags etc for a variable/field (a FIELD_DECL): */\n "}, {"sha": "a2d41897de75341d11135e53d3a0785548696d06", "filename": "gcc/java/parse.y", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94807d3318a6a63a3a0efe3419e6a402e77087bb/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94807d3318a6a63a3a0efe3419e6a402e77087bb/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=94807d3318a6a63a3a0efe3419e6a402e77087bb", "patch": "@@ -8327,7 +8327,7 @@ build_dot_class_method (class)\n   /* Create the \"class$\" function */\n   mdecl = create_artificial_method (class, ACC_STATIC, \n \t\t\t\t    build_pointer_type (class_type_node),\n-\t\t\t\t    get_identifier (\"class$\"), args);\n+\t\t\t\t    classdollar_identifier_node, args);\n   DECL_FUNCTION_THROWS (mdecl) = build_tree_list (NULL_TREE,\n \t\t\t\t\t\t  no_class_def_found_error);\n   \n@@ -8401,7 +8401,7 @@ build_dot_class_method_invocation (type)\n \n   s = build_string (IDENTIFIER_LENGTH (sig_id), \n \t\t    IDENTIFIER_POINTER (sig_id));\n-  return build_method_invocation (build_wfl_node (get_identifier (\"class$\")),\n+  return build_method_invocation (build_wfl_node (classdollar_identifier_node),\n \t\t\t\t  build_tree_list (NULL_TREE, s));\n }\n \n@@ -10427,10 +10427,10 @@ find_applicable_accessible_methods_list (lc, class, name, arglist)\n       search_applicable_methods_list (lc, TYPE_METHODS (class), \n \t\t\t\t      name, arglist, &list, &all_list);\n \n-      /* When looking finit$, we turn LC to 1 so that we only search\n-\t in class. Note that we should have found something at\n-\t this point. */\n-      if (ID_FINIT_P (name))\n+      /* When looking finit$ or class$, we turn LC to 1 so that we\n+\t only search in class. Note that we should have found\n+\t something at this point. */\n+      if (ID_FINIT_P (name) || ID_CLASSDOLLAR_P (name))\n \t{\n \t  lc = 1;\n \t  if (!list)"}]}