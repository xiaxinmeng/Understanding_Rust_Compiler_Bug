{"sha": "12df8d0150a2f18d7e86a8b0a94cfc4201795c18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJkZjhkMDE1MGEyZjE4ZDdlODZhOGIwYTk0Y2ZjNDIwMTc5NWMxOA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-04-18T05:07:38Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-04-18T05:07:38Z"}, "message": "re PR fortran/48462 (realloc on assignment: matmul Segmentation Fault with Allocatable Array)\n\n2011-04-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/48462\n\t* trans-expr.c (fcncall_realloc_result): Renamed version of\n\trealloc_lhs_bounds_for_intrinsic_call that does not touch the\n\tdescriptor bounds anymore but makes a temporary descriptor to\n\thold the result.\n\t(gfc_trans_arrayfunc_assign): Modify the reference to above\n\trenamed function.\n\n2011-04-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/48462\n\t* gfortran.dg/realloc_on_assign_7.f03: New test.\n\nFrom-SVN: r172636", "tree": {"sha": "ceec9218b58afb6c585b0c393a32c2d115a38f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceec9218b58afb6c585b0c393a32c2d115a38f51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12df8d0150a2f18d7e86a8b0a94cfc4201795c18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12df8d0150a2f18d7e86a8b0a94cfc4201795c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12df8d0150a2f18d7e86a8b0a94cfc4201795c18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12df8d0150a2f18d7e86a8b0a94cfc4201795c18/comments", "author": null, "committer": null, "parents": [{"sha": "967ac8cfb178fef960b253f97e81131434336cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967ac8cfb178fef960b253f97e81131434336cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967ac8cfb178fef960b253f97e81131434336cbd"}], "stats": {"total": 129, "additions": 89, "deletions": 40}, "files": [{"sha": "97f34107888abf89741fe5d5b5e3f1d299560187", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12df8d0150a2f18d7e86a8b0a94cfc4201795c18/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12df8d0150a2f18d7e86a8b0a94cfc4201795c18/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=12df8d0150a2f18d7e86a8b0a94cfc4201795c18", "patch": "@@ -1,3 +1,13 @@\n+2011-04-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/48462\n+\t* trans-expr.c (fcncall_realloc_result): Renamed version of\n+\trealloc_lhs_bounds_for_intrinsic_call that does not touch the\n+\tdescriptor bounds anymore but makes a temporary descriptor to\n+\thold the result.\n+\t(gfc_trans_arrayfunc_assign): Modify the reference to above\n+\trenamed function.\n+\n 2011-05-17  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48624"}, {"sha": "92a0fe9744eb738a2ee9a81020530de068a4bd19", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 23, "deletions": 40, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12df8d0150a2f18d7e86a8b0a94cfc4201795c18/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12df8d0150a2f18d7e86a8b0a94cfc4201795c18/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=12df8d0150a2f18d7e86a8b0a94cfc4201795c18", "patch": "@@ -5528,55 +5528,38 @@ realloc_lhs_loop_for_fcn_call (gfc_se *se, locus *where, gfc_ss **ss,\n }\n \n \n+/* For Assignment to a reallocatable lhs from intrinsic functions,\n+   replace the se.expr (ie. the result) with a temporary descriptor.\n+   Null the data field so that the library allocates space for the\n+   result. Free the data of the original descriptor after the function,\n+   in case it appears in an argument expression and transfer the\n+   result to the original descriptor.  */\n+\n static void\n-realloc_lhs_bounds_for_intrinsic_call (gfc_se *se, int rank)\n+fcncall_realloc_result (gfc_se *se)\n {\n   tree desc;\n+  tree res_desc;\n   tree tmp;\n-  tree offset;\n-  int n;\n \n-  /* Use the allocation done by the library.  */\n+  /* Use the allocation done by the library.  Substitute the lhs\n+     descriptor with a copy, whose data field is nulled.*/\n   desc = build_fold_indirect_ref_loc (input_location, se->expr);\n+  res_desc = gfc_evaluate_now (desc, &se->pre);\n+  gfc_conv_descriptor_data_set (&se->pre, res_desc, null_pointer_node);\n+  se->expr = gfc_build_addr_expr (TREE_TYPE (se->expr), res_desc);\n+\n+  /* Free the lhs after the function call and copy the result data to\n+     it.  */\n   tmp = gfc_conv_descriptor_data_get (desc);\n   tmp = gfc_call_free (fold_convert (pvoid_type_node, tmp));\n-  gfc_add_expr_to_block (&se->pre, tmp);\n-  gfc_conv_descriptor_data_set (&se->pre, desc, null_pointer_node);\n+  gfc_add_expr_to_block (&se->post, tmp);\n+  tmp = gfc_conv_descriptor_data_get (res_desc);\n+  gfc_conv_descriptor_data_set (&se->post, desc, tmp);\n+\n   /* Unallocated, the descriptor does not have a dtype.  */\n   tmp = gfc_conv_descriptor_dtype (desc);\n-  gfc_add_modify (&se->pre, tmp, gfc_get_dtype (TREE_TYPE (desc)));\n-\n-  offset = gfc_index_zero_node;\n-  tmp = gfc_index_one_node;\n-  /* Now reset the bounds from zero based to unity based.  */\n-  for (n = 0 ; n < rank; n++)\n-    {\n-      /* Accumulate the offset.  */\n-      offset = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t\tgfc_array_index_type,\n-\t\t\t\toffset, tmp);\n-      /* Now do the bounds.  */\n-      gfc_conv_descriptor_offset_set (&se->post, desc, tmp);\n-      tmp = gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[n]);\n-      tmp = fold_build2_loc (input_location, PLUS_EXPR,\n-\t\t\t     gfc_array_index_type,\n-\t\t\t     tmp, gfc_index_one_node);\n-      gfc_conv_descriptor_lbound_set (&se->post, desc,\n-\t\t\t\t      gfc_rank_cst[n],\n-\t\t\t\t      gfc_index_one_node);\n-      gfc_conv_descriptor_ubound_set (&se->post, desc,\n-\t\t\t\t      gfc_rank_cst[n], tmp);\n-\n-      /* The extent for the next contribution to offset.  */\n-      tmp = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t     gfc_array_index_type,\n-\t\t\t     gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[n]),\n-\t\t\t     gfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[n]));\n-      tmp = fold_build2_loc (input_location, PLUS_EXPR,\n-\t\t\t     gfc_array_index_type,\n-\t\t\t     tmp, gfc_index_one_node);\n-    }\n-  gfc_conv_descriptor_offset_set (&se->post, desc, offset);\n+  gfc_add_modify (&se->post, tmp, gfc_get_dtype (TREE_TYPE (desc)));\n }\n \n \n@@ -5646,7 +5629,7 @@ gfc_trans_arrayfunc_assign (gfc_expr * expr1, gfc_expr * expr2)\n \t  ss->is_alloc_lhs = 1;\n \t}\n       else\n-\trealloc_lhs_bounds_for_intrinsic_call (&se, expr1->rank);\n+\tfcncall_realloc_result (&se);\n     }\n \n   gfc_conv_function_expr (&se, expr2);"}, {"sha": "4d3019e117fb31f13e46b07ec7bfe10ed815586f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12df8d0150a2f18d7e86a8b0a94cfc4201795c18/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12df8d0150a2f18d7e86a8b0a94cfc4201795c18/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12df8d0150a2f18d7e86a8b0a94cfc4201795c18", "patch": "@@ -1,3 +1,8 @@\n+2011-04-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/48462\n+\t* gfortran.dg/realloc_on_assign_7.f03: New test.\n+\n 2011-04-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/48602"}, {"sha": "8de46c0b8e0139e3731dd447386f8acecc59b287", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_7.f03", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12df8d0150a2f18d7e86a8b0a94cfc4201795c18/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_7.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12df8d0150a2f18d7e86a8b0a94cfc4201795c18/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_7.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_7.f03?ref=12df8d0150a2f18d7e86a8b0a94cfc4201795c18", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do run }\n+! Check the fix for PR48462 in which the assignments involving matmul\n+! seg faulted because a was automatically freed before the assignment.\n+!\n+! Contributed by John Nedney  <ortp21@gmail.com>\n+!\n+program main\n+  implicit none\n+  integer, parameter :: dp = kind(0.0d0)\n+  real(kind=dp), allocatable :: delta(:,:)\n+  \n+  call foo\n+  call bar\n+contains\n+!\n+! Original reduced version from comment #2\n+  subroutine foo\n+    implicit none\n+    real(kind=dp), allocatable :: a(:,:)\n+    real(kind=dp), allocatable :: b(:,:)\n+\n+    allocate(a(3,3))\n+    allocate(b(3,3))\n+    allocate(delta(3,3))\n+\n+    b = reshape ([1d0, 0d0, 0d0, 0d0, 1d0, 0d0, 0d0, 0d0, 1d0], [3,3])\n+    a = reshape ([1d0, 2d0, 3d0, 4d0, 5d0, 6d0, 7d0, 8d0, 9d0], [3,3])\n+\n+    a = matmul( matmul( a, b ), b )\n+    delta = (a - reshape ([1d0, 2d0, 3d0, 4d0, 5d0, 6d0, 7d0, 8d0, 9d0], [3,3]))**2\n+    if (any (delta > 1d-12)) call abort\n+    if (any (lbound (a) .ne. [1, 1])) call abort\n+  end subroutine\n+!\n+! Check that all is well when the shape of 'a' changes.\n+  subroutine bar\n+    implicit none\n+    real(kind=dp), allocatable :: a(:,:)\n+    real(kind=dp), allocatable :: b(:,:)\n+\n+    b = reshape ([1d0, 1d0, 1d0], [3,1])\n+    a = reshape ([1d0, 2d0, 3d0, 4d0, 5d0, 6d0, 7d0, 8d0, 9d0], [3,3])\n+\n+    a = matmul( a, matmul( a, b ) )\n+\n+    delta = (a - reshape ([198d0, 243d0, 288d0], [3,1]))**2\n+    if (any (delta > 1d-12)) call abort\n+    if (any (lbound (a) .ne. [1, 1])) call abort\n+  end subroutine\n+end program main\n+"}]}