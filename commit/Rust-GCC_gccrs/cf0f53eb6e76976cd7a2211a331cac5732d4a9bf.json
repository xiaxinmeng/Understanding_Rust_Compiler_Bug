{"sha": "cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YwZjUzZWI2ZTc2OTc2Y2Q3YTIyMTFhMzMxY2FjNTczMmQ0YTliZg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-09-16T09:46:37Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-09-16T09:46:37Z"}, "message": "AssertionError.java: Merge with classpath, fixes HTML.\n\n2002-09-16  Michael Koch  <konqueror@gmx.de>\n\n\t* java/lang/AssertionError.java:\n\tMerge with classpath, fixes HTML.\n\t* java/rmi/server/LogStream.java:\n\tMerge with classpath, fixes some constants.\n\t* java/net/server/RemoteServer.java:\n\tMerge with classpath, adds serialVersionUID.\n\t* javax/naming/BinaryRefAddr.java:\n\tMerge with classpath, s/equal/equals/.\n\t* javax/naming/NamingException.java:\n\tMerge with classpath, fixed typo.\n\t* javax/naming/RefAddr.java:\n\tMerge with classpath, s/equal/equals/.\n\t* java/awt/Toolkit.java:\n\ts/gnu.java.awt.peer.gtk.GtkToolkit/gnu.awt.gtk.GtkToolkit/\n\tand typo fixed.\n\nFrom-SVN: r57187", "tree": {"sha": "153e40de6d2df8dbf1b4d09c84c431b1df50322f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/153e40de6d2df8dbf1b4d09c84c431b1df50322f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/comments", "author": null, "committer": null, "parents": [{"sha": "b423e6fe615f5d0a65bb02ad8dd15457c8871a5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b423e6fe615f5d0a65bb02ad8dd15457c8871a5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b423e6fe615f5d0a65bb02ad8dd15457c8871a5c"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "5a31586d244dc6a0288abe0235a53698f502c48b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "patch": "@@ -1,3 +1,21 @@\n+2002-09-16  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/lang/AssertionError.java:\n+\tMerge with classpath, fixes HTML.\n+\t* java/rmi/server/LogStream.java:\n+\tMerge with classpath, fixes some constants.\n+\t* java/net/server/RemoteServer.java:\n+\tMerge with classpath, adds serialVersionUID.\n+\t* javax/naming/BinaryRefAddr.java:\n+\tMerge with classpath, s/equal/equals/.\n+\t* javax/naming/NamingException.java:\n+\tMerge with classpath, fixed typo.\n+\t* javax/naming/RefAddr.java:\n+\tMerge with classpath, s/equal/equals/.\n+\t* java/awt/Toolkit.java:\n+\ts/gnu.java.awt.peer.gtk.GtkToolkit/gnu.awt.gtk.GtkToolkit/\n+\tand typo fixed.\n+\n 2002-09-15  Adam Megacz <adam@xwt.org>\n \t\n \t* java/net/natPlainSocketImpl.cc: #ifdef-shielded socket timeouts,\n@@ -15,8 +33,8 @@\n \t* java/net/DatagramPacket.java (DatagramPacket):\n \tAdded linebreak for 80 chars per line.\n \t* java/net/JarURLConection.java\n-\t(getInputStream, getJarEntry): Likewise.\n-\t* java/net/SocketPermission.java\n+\t(getInputStreami, getJarEntry): Likewise.\n+\t* java/net/SocketPErmission.java\n \t(SocketPermission class docu, implies): Likewise.\n \t* java/net/URLClassLoader.java (findResources): Likewise.\n \t* java/net/URLConnection.java: Reindendet remark for 80 chars per line"}, {"sha": "fb5e020a29ef55b117247fb202b15a1da330018e", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "patch": "@@ -96,11 +96,11 @@\n {\n   /** The default toolkit name. */\n   private static String default_toolkit_name\n-    = \"gnu.java.awt.peer.gtk.GtkToolkit\";\n+    = \"gnu.awt.gtk.GtkToolkit\";\n \n   /**\n    * The toolkit in use.  Once we load it, we don't ever change it\n-   * if the awt.toolkit propert is set.\n+   * if the awt.toolkit property is set.\n    */\n   private static Toolkit toolkit;\n "}, {"sha": "2bbf81cac97e78d832e3a4e0feeb664ecefca6ff", "filename": "libjava/java/lang/AssertionError.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjava%2Flang%2FAssertionError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjava%2Flang%2FAssertionError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FAssertionError.java?ref=cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "patch": "@@ -42,7 +42,7 @@\n  * An assertion error normally occurs as a result of the <code>assert</code>\n  * statement added in JDK 1.4, to indicate that an assertion failed. There\n  * are enough constructors to ensure that\n- * <code>new AssertionError(<em>expression</em)</code> will work for all\n+ * <code>new AssertionError(<em>expression</em>)</code> will work for all\n  * espressions, regardless of type, as if the error message were given by\n  * the string <code>\"\" + <em>expression</em></code>. This extends Error,\n  * because you usually do not want to inadvertently trap an assertion failure."}, {"sha": "ffbd3f67e71c9c96c543d030c1f020a82920afec", "filename": "libjava/java/rmi/server/LogStream.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjava%2Frmi%2Fserver%2FLogStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjava%2Frmi%2Fserver%2FLogStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FLogStream.java?ref=cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "patch": "@@ -45,8 +45,8 @@\n \textends PrintStream {\n \n public static final int SILENT = 0;\n-public static final int BRIEF = 1;\n-public static final int VERBOSE = 2;\n+public static final int BRIEF = 10;\n+public static final int VERBOSE = 20;\n \n private static PrintStream defStream;\n "}, {"sha": "b9cfc4e898e6dc3b3f41071cd6888f32d4410127", "filename": "libjava/java/rmi/server/RemoteServer.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjava%2Frmi%2Fserver%2FRemoteServer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjava%2Frmi%2Fserver%2FRemoteServer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteServer.java?ref=cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "patch": "@@ -43,6 +43,8 @@\n public abstract class RemoteServer\n \textends RemoteObject {\n \n+private static final long serialVersionUID = -4100238210092549637L;\n+\n protected RemoteServer() {\n \tsuper();\n }"}, {"sha": "29ca33d6ca29f705d643c4c6e17b8032350b3458", "filename": "libjava/javax/naming/BinaryRefAddr.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjavax%2Fnaming%2FBinaryRefAddr.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjavax%2Fnaming%2FBinaryRefAddr.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FBinaryRefAddr.java?ref=cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "patch": "@@ -97,17 +97,17 @@ public Object getContent ()\n    *         the addrType is the same as this addrType and the bytes of the\n    *         content are the same.\n    */\n-  public boolean equals (Object o)\n+  public boolean equal(Object o)\n   {\n     if (o instanceof BinaryRefAddr)\n       {\n         BinaryRefAddr refAddr = (BinaryRefAddr) o;\n         if (this.getType().equals(refAddr.getType()))\n-\t  {\n-\t    byte[] c1 = (byte[]) this.getContent();\n-\t    byte[] c2 = (byte[]) refAddr.getContent();\n-\t    return Arrays.equals(c1, c2);\n-\t  }\n+        {\n+          byte[] c1 = (byte[]) this.getContent();\n+          byte[] c2 = (byte[]) refAddr.getContent();\n+\t  return Arrays.equals(c1, c2);\n+        }\n       }\n     return false;\n   }"}, {"sha": "6c0f0172dc14f98c983b5805559992b0a250f405", "filename": "libjava/javax/naming/NamingException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjavax%2Fnaming%2FNamingException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjavax%2Fnaming%2FNamingException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FNamingException.java?ref=cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "patch": "@@ -47,7 +47,7 @@\n  * <code>NamingException</code>), the part of the <code>Name</code> that\n  * could be resolved (including the <code>Object</code> it resolved to)\n  * and the part of the <code>Name</code> that could not be resolved when\n- * the exception occurred.\n+ * the exception occured.\n  *\n  * @since 1.3\n  * @author Anthony Green (green@redhat.com)"}, {"sha": "9ed504f760d1f3ba0b079d31e51115a970e08479", "filename": "libjava/javax/naming/RefAddr.java", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjavax%2Fnaming%2FRefAddr.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf/libjava%2Fjavax%2Fnaming%2FRefAddr.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FRefAddr.java?ref=cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "patch": "@@ -71,9 +71,9 @@ public abstract class RefAddr implements Serializable\n    */\n   protected RefAddr(String addrType)\n   {\n-    if (addrType == null)\n-      throw new NullPointerException(\"addrType cannot be null\");\n-\n+  \tif (addrType == null)\n+  \t  throw new NullPointerException(\"addrType cannot be null\");\n+  \t  \n     this.addrType = addrType;\n   }\n   \n@@ -98,20 +98,20 @@ public String getType()\n    *         is the same as this addrType and the content is equals to the\n    *         content of this object.\n    */\n-  public boolean equals (Object o)\n+  public boolean equal(Object o)\n   {\n     if (o instanceof RefAddr)\n       {\n         RefAddr refAddr = (RefAddr) o;\n         if (this.getType().equals(refAddr.getType()))\n-\t  {\n-\t    Object c1 = this.getContent();\n-\t    Object c2 = refAddr.getContent();\n-\t    if (c1 == null)\n-\t      return c2 == null;\n-\t    else\n-\t      return c1.equals(c2);\n-\t  }\n+        {\n+          Object c1 = this.getContent();\n+          Object c2 = refAddr.getContent();\n+\t  if (c1 == null)\n+\t    return c2 == null;\n+\t  else\n+\t    return c1.equals(c2);\n+        }\n       }\n     return false;\n   }"}]}