{"sha": "5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJhNWFiOWJkYjdlYWI2MDk5ZTk2OWU5YjhlMDk4ZWJhMTM4MGQ5Yg==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2008-05-09T12:14:57Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2008-05-09T12:14:57Z"}, "message": "re PR middle-end/36177 (g++.dg/opt/pr23714.C ICEs with 135041 -> 135057)\n\n2008-05-08  Kenneth Zadeck  <zadeck@naturalbridge.com>\n\n\tPR middle-end/36117\n\t* dce.c (deletable_insn_p): Do not delete calls if \n\tdf_in_progress.\n\t(delete_unmarked_insns): When deleting a call, call \n\tdelete_unreachable_blocks.\n\t* rtl.texi (RTL_CONST_CALL_P, RTL_PURE_CALL_P,\n\tRTL_CONST_OR_PURE_CALL_P, RTL_LOOPING_CONST_OR_PURE_CALL_P): Fixed\n\tdoc.\n\nFrom-SVN: r135113", "tree": {"sha": "d861801589c11e665802276c937520ba385c512b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d861801589c11e665802276c937520ba385c512b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7afa92c5a23f13e73262f1df4b252342326ce456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afa92c5a23f13e73262f1df4b252342326ce456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7afa92c5a23f13e73262f1df4b252342326ce456"}], "stats": {"total": 77, "additions": 66, "deletions": 11}, "files": [{"sha": "a74526bb14fdb2f4262409baa90cedfd5dd19248", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b", "patch": "@@ -1,3 +1,14 @@\n+2008-05-08  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\n+\tPR middle-end/36117\n+\t* dce.c (deletable_insn_p): Do not delete calls if \n+\tdf_in_progress.\n+\t(delete_unmarked_insns): When deleting a call, call \n+\tdelete_unreachable_blocks.\n+\t* rtl.texi (RTL_CONST_CALL_P, RTL_PURE_CALL_P,\n+\tRTL_CONST_OR_PURE_CALL_P, RTL_LOOPING_CONST_OR_PURE_CALL_P): Fixed\n+\tdoc.\n+\t\n 2008-05-08  Richard Guenther  <rguenther@suse.de>\n \n \t* doc/invoke.texi (-fdump-tree-salias): Remove documentation."}, {"sha": "91cc9aa5c281516313091197de9eb2a38635c6be", "filename": "gcc/dce.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b", "patch": "@@ -99,11 +99,16 @@ deletable_insn_p (rtx insn, bool fast)\n   rtx body, x;\n   int i;\n \n-  /* We can delete dead const or pure calls as long as they do not\n-     infinite loop and are not sibling calls.  The problem with\n-     sibling calls is that it is hard to see the result.  */\n-  if (CALL_P (insn) \n+  if (CALL_P (insn)\n+      /* We cannot delete calls inside of the recursive dce because\n+\t this may cause basic blocks to be deleted and this messes up\n+\t the rest of the stack of optimization passes.  */\n+      && (!df_in_progress)\n+      /* We cannot delete pure or const sibling calls because it is\n+\t hard to see the result.  */\n       && (!SIBLING_CALL_P (insn))\n+      /* We can delete dead const or pure calls as long as they do not\n+         infinite loop.  */\n       && (RTL_CONST_OR_PURE_CALL_P (insn)\n \t  && !RTL_LOOPING_CONST_OR_PURE_CALL_P (insn)))\n     return true;\n@@ -305,6 +310,7 @@ delete_unmarked_insns (void)\n {\n   basic_block bb;\n   rtx insn, next;\n+  bool must_clean = false;\n \n   FOR_EACH_BB (bb)\n     FOR_BB_INSNS_SAFE (bb, insn, next)\n@@ -382,9 +388,19 @@ delete_unmarked_insns (void)\n \t      remove_note (XEXP (note, 0), libcall_note);\n \t    }\n \n+\t  /* If a pure or const call is deleted, this may make the cfg\n+\t     have unreachable blocks.  We rememeber this and call\n+\t     delete_unreachable_blocks at the end.  */\n+\t  if (CALL_P (insn))\n+\t    must_clean = true;\n+\n \t  /* Now delete the insn.  */\n \t  delete_insn_and_edges (insn);\n \t}\n+\n+  /* Deleted a pure or const call.  */\n+  if (must_clean)\n+    delete_unreachable_blocks ();\n }\n \n "}, {"sha": "d698ceede610a06406cadacfd2ce7b6019d4d489", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=5ba5ab9bdb7eab6099e969e9b8e098eba1380d9b", "patch": "@@ -559,13 +559,36 @@ In either case GCC assumes these addresses can be addressed directly,\n perhaps with the help of base registers.\n Stored in the @code{unchanging} field and printed as @samp{/u}.\n \n-@findex CONST_OR_PURE_CALL_P\n+@findex RTL_CONST_CALL_P\n @cindex @code{call_insn} and @samp{/u}\n @cindex @code{unchanging}, in @code{call_insn}\n-@item CONST_OR_PURE_CALL_P (@var{x})\n-In a @code{call_insn}, @code{note}, or an @code{expr_list} for notes,\n-indicates that the insn represents a call to a const or pure function.\n-Stored in the @code{unchanging} field and printed as @samp{/u}.\n+@item RTLCONST_OR_PURE_CALL_P (@var{x})\n+In a @code{call_insn} indicates that the insn represents a call to a\n+const function.  Stored in the @code{unchanging} field and printed as\n+@samp{/u}.\n+\n+@findex RTL_PURE_CALL_P\n+@cindex @code{call_insn} and @samp{/i}\n+@cindex @code{return_val}, in @code{call_insn}\n+@item RTLCONST_OR_PURE_CALL_P (@var{x})\n+In a @code{call_insn} indicates that the insn represents a call to a\n+pure function.  Stored in the @code{return_val} field and printed as\n+@samp{/i}.\n+\n+@findex RTL_CONST_OR_PURE_CALL_P\n+@cindex @code{call_insn} and @samp{/u} or @samp{/i}\n+@item RTL_CONST_OR_PURE_CALL_P (@var{x})\n+In a @code{call_insn}, true if @code{RTL_CONST_CALL_P} or\n+@code{RTL_PURE_CALL_P} is true.\n+\n+@findex RTL_LOOPING_CONST_OR_PURE_CALL_P\n+@cindex @code{call_insn} and @samp{/c}\n+@cindex @code{call}, in @code{call_insn}\n+@item RTL_LOOPING_CONST_OR_PURE_CALL_P (@var{x})\n+In a @code{call_insn} indicates that the insn represents a possibly\n+infinite looping call to a const or pure function.  Stored in the\n+@code{call} field and printed as @samp{/c}.  Only true if one of\n+@code{RTL_CONST_CALL_P} or @code{RTL_PURE_CALL_P} is true.\n \n @findex INSN_ANNULLED_BRANCH_P\n @cindex @code{jump_insn} and @samp{/u}\n@@ -869,6 +892,9 @@ These are the fields to which the above macros refer:\n @item call\n In a @code{mem}, 1 means that the memory reference will not trap.\n \n+In a @code{call}, 1 means that this pure or const call may possibly\n+infinite loop.\n+\n In an RTL dump, this flag is represented as @samp{/c}.\n \n @findex frame_related\n@@ -938,6 +964,8 @@ known not to be a member of a structure, union, or array.\n \n In @code{symbol_ref} expressions, 1 means the referenced symbol is weak.\n \n+In @code{call} expressions, 1 means the call is pure.\n+\n In an RTL dump, this flag is represented as @samp{/i}.\n \n @findex jump\n@@ -967,8 +995,8 @@ instruction, 1 means an annulling branch should be used.\n In a @code{symbol_ref} expression, 1 means that this symbol addresses\n something in the per-function constant pool.\n \n-In a @code{call_insn}, @code{note}, or an @code{expr_list} of notes,\n-1 means that this instruction is a call to a const or pure function.\n+In a @code{call_insn} 1 means that this instruction is a call to a const\n+function.\n \n In an RTL dump, this flag is represented as @samp{/u}.\n "}]}