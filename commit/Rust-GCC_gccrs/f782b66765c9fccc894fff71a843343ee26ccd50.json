{"sha": "f782b66765c9fccc894fff71a843343ee26ccd50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc4MmI2Njc2NWM5ZmNjYzg5NGZmZjcxYTg0MzM0M2VlMjZjY2Q1MA==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zhang@arm.com", "date": "2020-01-02T17:22:53Z"}, "committer": {"name": "Dennis Zhang", "email": "xczhang@gcc.gnu.org", "date": "2020-01-02T17:22:53Z"}, "message": "[Arm] Enable CLI for Armv8.6-a: armv8.6-a, i8mm and bf16.\n\n2020-01-02  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* config/arm/arm-c.c (arm_cpu_builtins): Define\n\t__ARM_FEATURE_MATMUL_INT8, __ARM_FEATURE_BF16_VECTOR_ARITHMETIC,\n\t__ARM_FEATURE_BF16_SCALAR_ARITHMETIC, and\n\t__ARM_BF16_FORMAT_ALTERNATIVE when enabled.\n\t* config/arm/arm-cpus.in (armv8_6, i8mm, bf16): New features.\n\t* config/arm/arm-tables.opt: Regenerated.\n\t* config/arm/arm.c (arm_option_reconfigure_globals): Initialize\n\tarm_arch_i8mm and arm_arch_bf16 when enabled.\n\t* config/arm/arm.h (TARGET_I8MM): New macro.\n\t(TARGET_BF16_FP, TARGET_BF16_SIMD): Likewise.\n\t* config/arm/t-aprofile: Add matching rules for -march=armv8.6-a.\n\t* config/arm/t-arm-elf (all_v8_archs): Add armv8.6-a.\n\t* config/arm/t-multilib: Add matching rules for -march=armv8.6-a.\n\t(v8_6_a_simd_variants): New.\n\t(v8_*_a_simd_variants): Add i8mm and bf16.\n\t* doc/invoke.texi (armv8.6-a, i8mm, bf16): Document new options.\n\n2020-01-02  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* gcc.target/arm/multilib.exp: Add combination tests for armv8.6-a.\n\nFrom-SVN: r279839", "tree": {"sha": "c386d06ab7f5a17c2ee315adfeebe91d1566c0ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c386d06ab7f5a17c2ee315adfeebe91d1566c0ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f782b66765c9fccc894fff71a843343ee26ccd50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f782b66765c9fccc894fff71a843343ee26ccd50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f782b66765c9fccc894fff71a843343ee26ccd50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f782b66765c9fccc894fff71a843343ee26ccd50/comments", "author": null, "committer": null, "parents": [{"sha": "b1b727413010b8243f8a18cc9cc0ef268741b1f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b727413010b8243f8a18cc9cc0ef268741b1f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b727413010b8243f8a18cc9cc0ef268741b1f0"}], "stats": {"total": 194, "additions": 182, "deletions": 12}, "files": [{"sha": "c7883ed86dd1b9bdf452aabc2e0ea9e357c4728f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -1,3 +1,22 @@\n+2020-01-02  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/arm/arm-c.c (arm_cpu_builtins): Define\n+\t__ARM_FEATURE_MATMUL_INT8, __ARM_FEATURE_BF16_VECTOR_ARITHMETIC,\n+\t__ARM_FEATURE_BF16_SCALAR_ARITHMETIC, and\n+\t__ARM_BF16_FORMAT_ALTERNATIVE when enabled.\n+\t* config/arm/arm-cpus.in (armv8_6, i8mm, bf16): New features.\n+\t* config/arm/arm-tables.opt: Regenerated.\n+\t* config/arm/arm.c (arm_option_reconfigure_globals): Initialize\n+\tarm_arch_i8mm and arm_arch_bf16 when enabled.\n+\t* config/arm/arm.h (TARGET_I8MM): New macro.\n+\t(TARGET_BF16_FP, TARGET_BF16_SIMD): Likewise.\n+\t* config/arm/t-aprofile: Add matching rules for -march=armv8.6-a.\n+\t* config/arm/t-arm-elf (all_v8_archs): Add armv8.6-a.\n+\t* config/arm/t-multilib: Add matching rules for -march=armv8.6-a.\n+\t(v8_6_a_simd_variants): New.\n+\t(v8_*_a_simd_variants): Add i8mm and bf16.\n+\t* doc/invoke.texi (armv8.6-a, i8mm, bf16): Document new options.\n+\n 2020-01-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR ipa/93087"}, {"sha": "38edaff17a2ec14ec7ba1a0ec55cd03659447cde", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -226,6 +226,14 @@ arm_cpu_builtins (struct cpp_reader* pfile)\n \n       builtin_define_with_int_value (\"__ARM_FEATURE_COPROC\", coproc_level);\n     }\n+\n+  def_or_undef_macro (pfile, \"__ARM_FEATURE_MATMUL_INT8\", TARGET_I8MM);\n+  def_or_undef_macro (pfile, \"__ARM_FEATURE_BF16_SCALAR_ARITHMETIC\",\n+\t\t      TARGET_BF16_FP);\n+  def_or_undef_macro (pfile, \"__ARM_FEATURE_BF16_VECTOR_ARITHMETIC\",\n+\t\t      TARGET_BF16_SIMD);\n+  def_or_undef_macro (pfile, \"__ARM_BF16_FORMAT_ALTERNATIVE\",\n+\t\t      TARGET_BF16_FP || TARGET_BF16_SIMD);\n }\n \n void"}, {"sha": "24a9f3e86bb15ef2f6f330ff114ebf2fbdbf61e7", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -123,6 +123,9 @@ define feature armv8_4\n # Architecture rel 8.5.\n define feature armv8_5\n \n+# Architecture rel 8.6.\n+define feature armv8_6\n+\n # M-Profile security extensions.\n define feature cmse\n \n@@ -191,6 +194,12 @@ define feature sb\n # v8-A architectures, added by default from v8.5-A\n define feature predres\n \n+# 8-bit Integer Matrix Multiply extension. Optional from v8.2-A.\n+define feature i8mm\n+\n+# Brain half-precision floating-point extension. Optional from v8.2-A.\n+define feature bf16\n+\n # Feature groups.  Conventionally all (or mostly) upper case.\n # ALL_FPU lists all the feature bits associated with the floating-point\n # unit; these will all be removed if the floating-point unit is disabled\n@@ -213,15 +222,15 @@ define fgroup ALL_CRYPTO\tcrypto\n # strip off 32 D-registers, but does not remove support for\n # double-precision FP.\n define fgroup ALL_SIMD_INTERNAL\tfp_d32 neon ALL_CRYPTO\n-define fgroup ALL_SIMD_EXTERNAL dotprod fp16fml\n+define fgroup ALL_SIMD_EXTERNAL dotprod fp16fml i8mm\n define fgroup ALL_SIMD\tALL_SIMD_INTERNAL ALL_SIMD_EXTERNAL\n \n # List of all FPU bits to strip out if -mfpu is used to override the\n # default.  fp16 is deliberately missing from this list.\n define fgroup ALL_FPU_INTERNAL\tvfpv2 vfpv3 vfpv4 fpv5 fp16conv fp_dbl ALL_SIMD_INTERNAL\n # Similarly, but including fp16 and other extensions that aren't part of\n # -mfpu support.\n-define fgroup ALL_FPU_EXTERNAL fp16\n+define fgroup ALL_FPU_EXTERNAL fp16 bf16\n \n # Everything related to the FPU extensions (FP or SIMD).\n define fgroup ALL_FP\tALL_FPU_EXTERNAL ALL_FPU_INTERNAL ALL_SIMD\n@@ -256,6 +265,7 @@ define fgroup ARMv8_2a    ARMv8_1a armv8_2\n define fgroup ARMv8_3a    ARMv8_2a armv8_3\n define fgroup ARMv8_4a    ARMv8_3a armv8_4\n define fgroup ARMv8_5a    ARMv8_4a armv8_5 sb predres\n+define fgroup ARMv8_6a    ARMv8_5a armv8_6\n define fgroup ARMv8m_base ARMv6m armv8 cmse tdiv\n define fgroup ARMv8m_main ARMv7m armv8 cmse\n define fgroup ARMv8r      ARMv8a\n@@ -563,6 +573,8 @@ begin arch armv8.2-a\n  option dotprod add FP_ARMv8 DOTPROD\n  option sb add sb\n  option predres add predres\n+ option i8mm add i8mm FP_ARMv8 NEON\n+ option bf16 add bf16 FP_ARMv8 NEON\n end arch armv8.2-a\n \n begin arch armv8.3-a\n@@ -580,6 +592,8 @@ begin arch armv8.3-a\n  option dotprod add FP_ARMv8 DOTPROD\n  option sb add sb\n  option predres add predres\n+ option i8mm add i8mm FP_ARMv8 NEON\n+ option bf16 add bf16 FP_ARMv8 NEON\n end arch armv8.3-a\n \n begin arch armv8.4-a\n@@ -595,6 +609,8 @@ begin arch armv8.4-a\n  option nofp remove ALL_FP\n  option sb add sb\n  option predres add predres\n+ option i8mm add i8mm FP_ARMv8 DOTPROD\n+ option bf16 add bf16 FP_ARMv8 DOTPROD\n end arch armv8.4-a\n \n begin arch armv8.5-a\n@@ -608,8 +624,25 @@ begin arch armv8.5-a\n  option crypto add FP_ARMv8 CRYPTO DOTPROD\n  option nocrypto remove ALL_CRYPTO\n  option nofp remove ALL_FP\n+ option i8mm add i8mm FP_ARMv8 DOTPROD\n+ option bf16 add bf16 FP_ARMv8 DOTPROD\n end arch armv8.5-a\n \n+begin arch armv8.6-a\n+ tune for cortex-a53\n+ tune flags CO_PROC\n+ base 8A\n+ profile A\n+ isa ARMv8_6a\n+ option simd add FP_ARMv8 DOTPROD\n+ option fp16 add fp16 fp16fml FP_ARMv8 DOTPROD\n+ option crypto add FP_ARMv8 CRYPTO DOTPROD\n+ option nocrypto remove ALL_CRYPTO\n+ option nofp remove ALL_FP\n+ option i8mm add i8mm FP_ARMv8 DOTPROD\n+ option bf16 add bf16 FP_ARMv8 DOTPROD\n+end arch armv8.6-a\n+\n begin arch armv8-m.base\n  tune for cortex-m23\n  base 8M_BASE"}, {"sha": "d8110919598e9d0fc3c79366235e64ff2d2a5f86", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -344,19 +344,22 @@ EnumValue\n Enum(arm_arch) String(armv8.5-a) Value(25)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.base) Value(26)\n+Enum(arm_arch) String(armv8.6-a) Value(26)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.main) Value(27)\n+Enum(arm_arch) String(armv8-m.base) Value(27)\n \n EnumValue\n-Enum(arm_arch) String(armv8-r) Value(28)\n+Enum(arm_arch) String(armv8-m.main) Value(28)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt) Value(29)\n+Enum(arm_arch) String(armv8-r) Value(29)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt2) Value(30)\n+Enum(arm_arch) String(iwmmxt) Value(30)\n+\n+EnumValue\n+Enum(arm_arch) String(iwmmxt2) Value(31)\n \n Enum\n Name(arm_fpu) Type(enum fpu_type)"}, {"sha": "07231d722b978b5c99eb5a27d8ad8ece3d6c80fd", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -999,6 +999,12 @@ int arm_arch_cmse = 0;\n /* Nonzero if the core has a very small, high-latency, multiply unit.  */\n int arm_m_profile_small_mul = 0;\n \n+/* Nonzero if chip supports the AdvSIMD I8MM instructions.  */\n+int arm_arch_i8mm = 0;\n+\n+/* Nonzero if chip supports the BFloat16 instructions.  */\n+int arm_arch_bf16 = 0;\n+\n /* The condition codes of the ARM, and the inverse function.  */\n static const char * const arm_condition_codes[] =\n {\n@@ -3677,8 +3683,11 @@ arm_option_reconfigure_globals (void)\n   arm_arch_arm_hwdiv = bitmap_bit_p (arm_active_target.isa, isa_bit_adiv);\n   arm_arch_crc = bitmap_bit_p (arm_active_target.isa, isa_bit_crc32);\n   arm_arch_cmse = bitmap_bit_p (arm_active_target.isa, isa_bit_cmse);\n-  arm_fp16_inst = bitmap_bit_p (arm_active_target.isa, isa_bit_fp16);\n   arm_arch_lpae = bitmap_bit_p (arm_active_target.isa, isa_bit_lpae);\n+  arm_arch_i8mm = bitmap_bit_p (arm_active_target.isa, isa_bit_i8mm);\n+  arm_arch_bf16 = bitmap_bit_p (arm_active_target.isa, isa_bit_bf16);\n+\n+  arm_fp16_inst = bitmap_bit_p (arm_active_target.isa, isa_bit_fp16);\n   if (arm_fp16_inst)\n     {\n       if (arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE)"}, {"sha": "8bf393e620f2db24f506d35d06d45877c801fbb5", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -246,6 +246,15 @@ emission of floating point pcs attributes.  */\n /* FPU supports the AdvSIMD FP16 instructions for ARMv8.2 and later.  */\n #define TARGET_NEON_FP16INST (TARGET_VFP_FP16INST && TARGET_NEON_RDMA)\n \n+/* FPU supports 8-bit Integer Matrix Multiply (I8MM) AdvSIMD extensions.  */\n+#define TARGET_I8MM (TARGET_NEON && arm_arch8_2 && arm_arch_i8mm)\n+\n+/* FPU supports Brain half-precision floating-point (BFloat16) extension.  */\n+#define TARGET_BF16_FP (TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP5 \\\n+\t\t\t&& arm_arch8_2 && arm_arch_bf16)\n+#define TARGET_BF16_SIMD (TARGET_NEON && TARGET_VFP5 \\\n+\t\t\t  && arm_arch8_2 && arm_arch_bf16)\n+\n /* Q-bit is present.  */\n #define TARGET_ARM_QBIT \\\n   (TARGET_32BIT && arm_arch5te && (arm_arch_notm || arm_arch7))\n@@ -517,6 +526,12 @@ extern int arm_arch_crc;\n /* Nonzero if chip supports the ARMv8-M Security Extensions.  */\n extern int arm_arch_cmse;\n \n+/* Nonzero if chip supports the I8MM instructions.  */\n+extern int arm_arch_i8mm;\n+\n+/* Nonzero if chip supports the BFloat16 instructions.  */\n+extern int arm_arch_bf16;\n+\n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT  (MASK_APCS_FRAME)\n #endif"}, {"sha": "9deb4fbe476affd44db02038726f871ff5293416", "filename": "gcc/config/arm/t-aprofile", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Ft-aprofile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Ft-aprofile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-aprofile?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -122,6 +122,13 @@ MULTILIB_MATCHES\t+= march?armv8-a=march?armv8.5-a\n MULTILIB_MATCHES\t+= $(foreach ARCH, $(v8_5_a_simd_variants), \\\n \t\t\t     march?armv8-a+simd=march?armv8.5-a$(ARCH))\n \n+# Baseline v8.6-a: map down to baseline v8-a\n+MULTILIB_MATCHES\t+= march?armv8-a=march?armv8.6-a\n+\n+# Map all v8.6-a SIMD variants to v8-a+simd\n+MULTILIB_MATCHES\t+= $(foreach ARCH, $(v8_6_a_simd_variants), \\\n+\t\t\t     march?armv8-a+simd=march?armv8.6-a$(ARCH))\n+\n # Use Thumb libraries for everything.\n \n MULTILIB_REUSE\t\t+= mthumb/march.armv7-a/mfloat-abi.soft=marm/march.armv7-a/mfloat-abi.soft"}, {"sha": "3d92bd2332220e26f3e238caaf26e5b76b49304d", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -47,7 +47,7 @@ all_early_arch\t:= armv5tej armv6 armv6j armv6k armv6z armv6kz \\\n all_v7_a_r\t:= armv7-a armv7ve armv7-r\n \n all_v8_archs\t:= armv8-a armv8-a+crc armv8.1-a armv8.2-a armv8.3-a armv8.4-a \\\n-\t\t   armv8.5-a\n+\t\t   armv8.5-a armv8.6-a\n \n # No floating point variants, require thumb1 softfp\n all_nofp_t\t:= armv6-m armv6s-m armv8-m.base"}, {"sha": "0e16340557d6fedb905218967d79dfe86bac053d", "filename": "gcc/config/arm/t-multilib", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Ft-multilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fconfig%2Farm%2Ft-multilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-multilib?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -73,9 +73,10 @@ v7ve_vfpv4_simd_variants := +simd\n v8_a_nosimd_variants\t:= +crc\n v8_a_simd_variants\t:= $(call all_feat_combs, simd crypto)\n v8_1_a_simd_variants\t:= $(call all_feat_combs, simd crypto)\n-v8_2_a_simd_variants\t:= $(call all_feat_combs, simd fp16 fp16fml crypto dotprod)\n-v8_4_a_simd_variants\t:= $(call all_feat_combs, simd fp16 crypto)\n-v8_5_a_simd_variants\t:= $(call all_feat_combs, simd fp16 crypto)\n+v8_2_a_simd_variants\t:= $(call all_feat_combs, simd fp16 fp16fml crypto dotprod i8mm bf16)\n+v8_4_a_simd_variants\t:= $(call all_feat_combs, simd fp16 crypto i8mm bf16)\n+v8_5_a_simd_variants\t:= $(call all_feat_combs, simd fp16 crypto i8mm bf16)\n+v8_6_a_simd_variants\t:= $(call all_feat_combs, simd fp16 crypto i8mm bf16)\n v8_r_nosimd_variants\t:= +crc\n \n ifneq (,$(HAS_APROFILE))\n@@ -185,6 +186,13 @@ MULTILIB_MATCHES\t+= march?armv7=march?armv8.5-a\n MULTILIB_MATCHES\t+= $(foreach ARCH, $(v8_5_a_simd_variants), \\\n \t\t\t     march?armv7+fp=march?armv8.5-a$(ARCH))\n \n+# Baseline v8.6-a: map down to baseline v8-a\n+MULTILIB_MATCHES\t+= march?armv7=march?armv8.6-a\n+\n+# Map all v8.6-a SIMD variants\n+MULTILIB_MATCHES\t+= $(foreach ARCH, $(v8_6_a_simd_variants), \\\n+\t\t\t     march?armv7+fp=march?armv8.6-a$(ARCH))\n+\n endif\t\t# Not APROFILE.\n \n # Use Thumb libraries for everything."}, {"sha": "2b07c09def8b434227ddd4f705530403f1d4b352", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -17484,6 +17484,7 @@ Permissible names are:\n @samp{armv8-a}, @samp{armv8.1-a}, @samp{armv8.2-a}, @samp{armv8.3-a},\n @samp{armv8.4-a},\n @samp{armv8.5-a},\n+@samp{armv8.6-a},\n @samp{armv7-r},\n @samp{armv8-r},\n @samp{armv6-m}, @samp{armv6s-m},\n@@ -17727,6 +17728,14 @@ Speculation Barrier Instruction.\n \n @item +predres\n Execution and Data Prediction Restriction Instructions.\n+\n+@item +i8mm\n+8-bit Integer Matrix Multiply instructions.\n+This also enables Advanced SIMD and floating-point instructions.\n+\n+@item +bf16\n+Brain half-precision floating-point instructions.\n+This also enables Advanced SIMD and floating-point instructions.\n @end table\n \n @item armv8.4-a\n@@ -17756,6 +17765,14 @@ Speculation Barrier Instruction.\n \n @item +predres\n Execution and Data Prediction Restriction Instructions.\n+\n+@item +i8mm\n+8-bit Integer Matrix Multiply instructions.\n+This also enables Advanced SIMD and floating-point instructions.\n+\n+@item +bf16\n+Brain half-precision floating-point instructions.\n+This also enables Advanced SIMD and floating-point instructions.\n @end table\n \n @item armv8.5-a\n@@ -17779,6 +17796,45 @@ Disable the cryptographic extension.\n \n @item +nofp\n Disable the floating-point, Advanced SIMD and cryptographic instructions.\n+\n+@item +i8mm\n+8-bit Integer Matrix Multiply instructions.\n+This also enables Advanced SIMD and floating-point instructions.\n+\n+@item +bf16\n+Brain half-precision floating-point instructions.\n+This also enables Advanced SIMD and floating-point instructions.\n+@end table\n+\n+@item armv8.6-a\n+@table @samp\n+@item +fp16\n+The half-precision floating-point data processing instructions.\n+This also enables the Advanced SIMD and floating-point instructions as well\n+as the Dot Product extension and the half-precision floating-point fmla\n+extension.\n+\n+@item +simd\n+The ARMv8.3-A Advanced SIMD and floating-point instructions as well as the\n+Dot Product extension.\n+\n+@item +crypto\n+The cryptographic instructions.  This also enables the Advanced SIMD and\n+floating-point instructions as well as the Dot Product extension.\n+\n+@item +nocrypto\n+Disable the cryptographic extension.\n+\n+@item +nofp\n+Disable the floating-point, Advanced SIMD and cryptographic instructions.\n+\n+@item +i8mm\n+8-bit Integer Matrix Multiply instructions.\n+This also enables Advanced SIMD and floating-point instructions.\n+\n+@item +bf16\n+Brain half-precision floating-point instructions.\n+This also enables Advanced SIMD and floating-point instructions.\n @end table\n \n @item armv7-r"}, {"sha": "96289dd366e29d3a889ca7251433831b5794c7a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -1,3 +1,7 @@\n+2020-01-02  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/arm/multilib.exp: Add combination tests for armv8.6-a.\n+\n 2020-01-02  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/68020"}, {"sha": "dc7c171707ab88fa778a942f68a575ac4c9e1a99", "filename": "gcc/testsuite/gcc.target/arm/multilib.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f782b66765c9fccc894fff71a843343ee26ccd50/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp?ref=f782b66765c9fccc894fff71a843343ee26ccd50", "patch": "@@ -126,6 +126,14 @@ if {[multilib_config \"aprofile\"] } {\n \t{-march=armv8.5-a+simd+fp16 -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n \t{-march=armv8.5-a+simd+fp16+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\"\n \t{-march=armv8.5-a+simd+nofp+fp16 -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.6-a+crypto -mfloat-abi=soft} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.6-a+simd+crypto -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.6-a+simd+crypto+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.6-a+simd+nofp+crypto -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.6-a+fp16 -mfloat-abi=soft} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.6-a+simd+fp16 -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.6-a+simd+fp16+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.6-a+simd+nofp+fp16 -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n \t{-mcpu=cortex-a53+crypto -mfloat-abi=hard} \"thumb/v8-a+simd/hard\"\n \t{-mcpu=cortex-a53+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\"\n \t{-march=armv8-a+crc -mfloat-abi=hard -mfpu=vfp} \"thumb/v8-a+simd/hard\""}]}