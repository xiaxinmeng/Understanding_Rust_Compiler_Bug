{"sha": "20fe71c2560921c35b7c378d27a8d61500439711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBmZTcxYzI1NjA5MjFjMzViN2MzNzhkMjdhOGQ2MTUwMDQzOTcxMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-08-12T07:59:09Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-08-12T07:59:09Z"}, "message": "arm.c (get_label_padding): New function.\n\ngcc/\n\t* config/arm/arm.c (get_label_padding): New function.\n\t(create_fix_barrier, md_reorg): Likewise.\n\nFrom-SVN: r177689", "tree": {"sha": "13fd8f83df7d9fe25e4c107208cfe829da4888a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13fd8f83df7d9fe25e4c107208cfe829da4888a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20fe71c2560921c35b7c378d27a8d61500439711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fe71c2560921c35b7c378d27a8d61500439711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fe71c2560921c35b7c378d27a8d61500439711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fe71c2560921c35b7c378d27a8d61500439711/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "786eeca2bd357b27138987413cba69fd1aa486a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786eeca2bd357b27138987413cba69fd1aa486a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786eeca2bd357b27138987413cba69fd1aa486a9"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "b3c154c927cdc49b315f0193a4286a58452cb61e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20fe71c2560921c35b7c378d27a8d61500439711/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20fe71c2560921c35b7c378d27a8d61500439711/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20fe71c2560921c35b7c378d27a8d61500439711", "patch": "@@ -1,3 +1,8 @@\n+2011-08-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/arm/arm.c (get_label_padding): New function.\n+\t(create_fix_barrier, md_reorg): Likewise.\n+\n 2011-08-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/49781"}, {"sha": "afa989e2ba2b77542cbe08f6f7035ccac67c38dc", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20fe71c2560921c35b7c378d27a8d61500439711/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20fe71c2560921c35b7c378d27a8d61500439711/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=20fe71c2560921c35b7c378d27a8d61500439711", "patch": "@@ -11719,6 +11719,19 @@ get_jump_table_size (rtx insn)\n   return 0;\n }\n \n+/* Return the maximum amount of padding that will be inserted before\n+   label LABEL.  */\n+\n+static HOST_WIDE_INT\n+get_label_padding (rtx label)\n+{\n+  HOST_WIDE_INT align, min_insn_size;\n+\n+  align = 1 << label_to_alignment (label);\n+  min_insn_size = TARGET_THUMB ? 2 : 4;\n+  return align > min_insn_size ? align - min_insn_size : 0;\n+}\n+\n /* Move a minipool fix MP from its current location to before MAX_MP.\n    If MAX_MP is NULL, then MP doesn't need moving, but the addressing\n    constraints may need updating.  */\n@@ -12265,8 +12278,12 @@ create_fix_barrier (Mfix *fix, HOST_WIDE_INT max_address)\n \t within range.  */\n       gcc_assert (GET_CODE (from) != BARRIER);\n \n-      /* Count the length of this insn.  */\n-      count += get_attr_length (from);\n+      /* Count the length of this insn.  This must stay in sync with the\n+\t code that pushes minipool fixes.  */\n+      if (LABEL_P (from))\n+\tcount += get_label_padding (from);\n+      else\n+\tcount += get_attr_length (from);\n \n       /* If there is a jump table, add its length.  */\n       tmp = is_jump_table (from);\n@@ -12696,6 +12713,11 @@ arm_reorg (void)\n \t      insn = table;\n \t    }\n \t}\n+      else if (LABEL_P (insn))\n+\t/* Add the worst-case padding due to alignment.  We don't add\n+\t   the _current_ padding because the minipool insertions\n+\t   themselves might change it.  */\n+\taddress += get_label_padding (insn);\n     }\n \n   fix = minipool_fix_head;"}]}