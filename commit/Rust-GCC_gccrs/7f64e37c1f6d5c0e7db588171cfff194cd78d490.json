{"sha": "7f64e37c1f6d5c0e7db588171cfff194cd78d490", "node_id": "C_kwDOANBUbNoAKDdmNjRlMzdjMWY2ZDVjMGU3ZGI1ODgxNzFjZmZmMTk0Y2Q3OGQ0OTA", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-07-07T22:01:15Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-02T07:34:06Z"}, "message": "[Ada] Fix crash on declaration of overaligned array with constraints\n\nThe semantic analyzer was setting the Is_Constr_Subt_For_UN_Aliased flag on\nthe actual subtype of the object, which is incorrect because the nominal\nsubtype is constrained.  This also adjusts a recent related change.\n\ngcc/ada/\n\n\t* exp_util.adb (Expand_Subtype_From_Expr): Check for the presence\n\tof the Is_Constr_Subt_For_U_Nominal flag instead of the absence\n\tof the Is_Constr_Subt_For_UN_Aliased flag on the subtype of the\n\texpression of an object declaration before reusing this subtype.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Do not incorrectly\n\tset the Is_Constr_Subt_For_UN_Aliased flag on the actual subtype\n\tof an array with definite nominal subtype.  Remove useless test.", "tree": {"sha": "67663e5141972509a292fd757676f95bfa3d4242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67663e5141972509a292fd757676f95bfa3d4242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f64e37c1f6d5c0e7db588171cfff194cd78d490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f64e37c1f6d5c0e7db588171cfff194cd78d490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f64e37c1f6d5c0e7db588171cfff194cd78d490", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f64e37c1f6d5c0e7db588171cfff194cd78d490/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08a897d4ff7a482159148e2be9df83dae5a1055c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a897d4ff7a482159148e2be9df83dae5a1055c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08a897d4ff7a482159148e2be9df83dae5a1055c"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "a8636bbe55da56f3691b4ed4f64f80a48ed5c335", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f64e37c1f6d5c0e7db588171cfff194cd78d490/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f64e37c1f6d5c0e7db588171cfff194cd78d490/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=7f64e37c1f6d5c0e7db588171cfff194cd78d490", "patch": "@@ -5732,14 +5732,17 @@ package body Exp_Util is\n       then\n          if Is_Itype (Exp_Typ)\n \n-           --  If Exp_Typ was created for a previous declaration whose nominal\n-           --  subtype is unconstrained, and that declaration is aliased,\n-           --  we need to generate a new subtype, because otherwise the\n-           --  Is_Constr_Subt_For_U_Nominal flag will be set on the wrong\n-           --  subtype, causing failure to detect non-statically-matching\n-           --  subtypes on 'Access of the previously-declared object.\n-\n-           and then not Is_Constr_Subt_For_UN_Aliased (Exp_Typ)\n+           --  When this is for an object declaration, the caller may want to\n+           --  set Is_Constr_Subt_For_U_Nominal on the subtype, so we must make\n+           --  sure that either the subtype has been built for the expression,\n+           --  typically for an aggregate, or the flag is already set on it;\n+           --  otherwise it could end up being set on the nominal constrained\n+           --  subtype of an object and thus later cause the failure to detect\n+           --  non-statically-matching subtypes on 'Access of this object.\n+\n+           and then (Nkind (N) /= N_Object_Declaration\n+                      or else Nkind (Exp) = N_Aggregate\n+                      or else Is_Constr_Subt_For_U_Nominal (Exp_Typ))\n          then\n             --  Within an initialization procedure, a selected component\n             --  denotes a component of the enclosing record, and it appears as"}, {"sha": "223849cc500c439da137e7676bc91caa42891015", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f64e37c1f6d5c0e7db588171cfff194cd78d490/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f64e37c1f6d5c0e7db588171cfff194cd78d490/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7f64e37c1f6d5c0e7db588171cfff194cd78d490", "patch": "@@ -4770,20 +4770,13 @@ package body Sem_Ch3 is\n          if not Is_Entity_Name (Object_Definition (N)) then\n             Act_T := Etype (E);\n             Check_Compile_Time_Size (Act_T);\n-\n-            if Aliased_Present (N) then\n-               Set_Is_Constr_Subt_For_UN_Aliased (Act_T);\n-            end if;\n          end if;\n \n          --  When the given object definition and the aggregate are specified\n          --  independently, and their lengths might differ do a length check.\n          --  This cannot happen if the aggregate is of the form (others =>...)\n \n-         if not Is_Constrained (T) then\n-            null;\n-\n-         elsif Nkind (E) = N_Raise_Constraint_Error then\n+         if Nkind (E) = N_Raise_Constraint_Error then\n \n             --  Aggregate is statically illegal. Place back in declaration\n "}]}