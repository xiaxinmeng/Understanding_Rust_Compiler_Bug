{"sha": "7edc15f29233bca0bc12530b1a3083325c49e0f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VkYzE1ZjI5MjMzYmNhMGJjMTI1MzBiMWEzMDgzMzI1YzQ5ZTBmNg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-02T09:21:22Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-02T10:53:52Z"}, "message": "d: Set up input_location before lowering Dsymbol AST\n\nLike a similarly named function in the visitor class for statements,\nthis ensures that the current input_location is set to the correct\nsource file location of the decl.\n\nIt is likely that there are a number of cases where declarations have\nended up with no location without this.\n\ngcc/d/ChangeLog:\n\n\t* decl.cc (DeclVisitor::build_dsymbol): New function.\n\t(DeclVisitor::visit (TupleDeclaration *)): Use build_dsymbol to\n\ttraverse AST instead of accept.\n\t(DeclVisitor::visit (AttribDeclaration *)): Likewise.\n\t(DeclVisitor::visit (Nspace *)): Likewise.\n\t(DeclVisitor::visit (TemplateDeclaration *)): Likewise.\n\t(DeclVisitor::visit (TemplateInstance *)): Likewise.\n\t(DeclVisitor::visit (TemplateMixin *)): Likewise.\n\t(DeclVisitor::visit (StructDeclaration *)): Likewise.\n\t(DeclVisitor::visit (ClassDeclaration *)): Likewise.\n\t(DeclVisitor::visit (InterfaceDeclaration *)): Likewise.\n\t(DeclVisitor::visit (VarDeclaration *)): Likewise.\n\t(build_decl_tree): Likewise.", "tree": {"sha": "ca2c7144f5e6ddfba46d4a24688b167f5764c3f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca2c7144f5e6ddfba46d4a24688b167f5764c3f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7edc15f29233bca0bc12530b1a3083325c49e0f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edc15f29233bca0bc12530b1a3083325c49e0f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7edc15f29233bca0bc12530b1a3083325c49e0f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edc15f29233bca0bc12530b1a3083325c49e0f6/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54a0eb7fa5f504bf26be03060b779f756d998be5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54a0eb7fa5f504bf26be03060b779f756d998be5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54a0eb7fa5f504bf26be03060b779f756d998be5"}], "stats": {"total": 67, "additions": 28, "deletions": 39}, "files": [{"sha": "7dab5c7e88c6f937d773f73399239bd81e99e808", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 28, "deletions": 39, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edc15f29233bca0bc12530b1a3083325c49e0f6/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edc15f29233bca0bc12530b1a3083325c49e0f6/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=7edc15f29233bca0bc12530b1a3083325c49e0f6", "patch": "@@ -131,6 +131,17 @@ class DeclVisitor : public Visitor\n     this->in_version_unittest_ = false;\n   }\n \n+  /* Helper for generating code for the dsymbol AST class D.\n+     Sets up the location of the symbol before lowering.  */\n+\n+  void build_dsymbol (Dsymbol *d)\n+  {\n+    location_t saved_location = input_location;\n+    input_location = make_location_t (d->loc);\n+    d->accept (this);\n+    input_location = saved_location;\n+  }\n+\n   /* This should be overridden by each declaration class.  */\n \n   void visit (Dsymbol *)\n@@ -212,7 +223,7 @@ class DeclVisitor : public Visitor\n \t  {\n \t    Declaration *d = ((DsymbolExp *) o)->s->isDeclaration ();\n \t    if (d)\n-\t      d->accept (this);\n+\t      this->build_dsymbol (d);\n \t  }\n       }\n   }\n@@ -227,10 +238,7 @@ class DeclVisitor : public Visitor\n       return;\n \n     for (size_t i = 0; i < ds->dim; i++)\n-      {\n-\tDsymbol *s = (*ds)[i];\n-\ts->accept (this);\n-      }\n+      this->build_dsymbol ((*ds)[i]);\n   }\n \n   /* Pragmas are a way to pass special information to the compiler and to add\n@@ -278,10 +286,7 @@ class DeclVisitor : public Visitor\n       return;\n \n     for (size_t i = 0; i < d->members->dim; i++)\n-      {\n-\tDsymbol *s = (*d->members)[i];\n-\ts->accept (this);\n-      }\n+      this->build_dsymbol ((*d->members)[i]);\n   }\n \n   /* Templates are D's approach to generic programming.  They have no members\n@@ -315,7 +320,7 @@ class DeclVisitor : public Visitor\n     /* Return type is instantiated from this template declaration, walk over\n        all members of the instance.  */\n     if (ti && ti->tempdecl == d)\n-      ti->accept (this);\n+      this->build_dsymbol (ti);\n   }\n \n   /* Walk over all members in the instantiated template.  */\n@@ -329,10 +334,7 @@ class DeclVisitor : public Visitor\n       return;\n \n     for (size_t i = 0; i < d->members->dim; i++)\n-      {\n-\tDsymbol *s = (*d->members)[i];\n-\ts->accept (this);\n-      }\n+      this->build_dsymbol ((*d->members)[i]);\n   }\n \n   /* Walk over all members in the mixin template scope.  */\n@@ -343,10 +345,7 @@ class DeclVisitor : public Visitor\n       return;\n \n     for (size_t i = 0; i < d->members->dim; i++)\n-      {\n-\tDsymbol *s = (*d->members)[i];\n-\ts->accept (this);\n-      }\n+      this->build_dsymbol ((*d->members)[i]);\n   }\n \n   /* Write out compiler generated TypeInfo, initializer and functions for the\n@@ -391,24 +390,20 @@ class DeclVisitor : public Visitor\n \n     d_finish_decl (d->sinit);\n \n-    /* Put out the members.  */\n+    /* Put out the members.  There might be static constructors in the members\n+       list, and they cannot be put in separate object files.  */\n     for (size_t i = 0; i < d->members->dim; i++)\n-      {\n-\tDsymbol *member = (*d->members)[i];\n-\t/* There might be static ctors in the members, and they cannot\n-\t   be put in separate object files.  */\n-\tmember->accept (this);\n-      }\n+      this->build_dsymbol ((*d->members)[i]);\n \n     /* Put out xopEquals, xopCmp and xopHash.  */\n     if (d->xeq && d->xeq != d->xerreq)\n-      d->xeq->accept (this);\n+      this->build_dsymbol (d->xeq);\n \n     if (d->xcmp && d->xcmp != d->xerrcmp)\n-      d->xcmp->accept (this);\n+      this->build_dsymbol (d->xcmp);\n \n     if (d->xhash)\n-      d->xhash->accept (this);\n+      this->build_dsymbol (d->xhash);\n \n     d->semanticRun = PASSobj;\n   }\n@@ -503,10 +498,7 @@ class DeclVisitor : public Visitor\n \n     /* Put out the members.  */\n     for (size_t i = 0; i < d->members->dim; i++)\n-      {\n-\tDsymbol *member = (*d->members)[i];\n-\tmember->accept (this);\n-      }\n+      this->build_dsymbol ((*d->members)[i]);\n \n     /* If something goes wrong during final semantic pass, don't bother with\n        the rest as we may have incomplete info.  */\n@@ -582,10 +574,7 @@ class DeclVisitor : public Visitor\n \n     /* Put out the members.  */\n     for (size_t i = 0; i < d->members->dim; i++)\n-      {\n-\tDsymbol *member = (*d->members)[i];\n-\tmember->accept (this);\n-      }\n+      this->build_dsymbol ((*d->members)[i]);\n \n     /* Generate C symbols.  */\n     d->csym = get_classinfo_decl (d);\n@@ -594,7 +583,7 @@ class DeclVisitor : public Visitor\n     if (have_typeinfo_p (Type::dtypeinfo))\n       {\n \tcreate_typeinfo (d->type, NULL);\n-\td->type->vtinfo->accept (this);\n+\tthis->build_dsymbol (d->type->vtinfo);\n       }\n \n     DECL_INITIAL (d->csym) = layout_classinfo (d);\n@@ -669,7 +658,7 @@ class DeclVisitor : public Visitor\n \n     if (d->aliassym)\n       {\n-\td->toAlias ()->accept (this);\n+\tthis->build_dsymbol (d->toAlias ());\n \treturn;\n       }\n \n@@ -1044,7 +1033,7 @@ build_decl_tree (Dsymbol *d)\n     input_location = make_location_t (Loc (\"<no_file>\", 1, 0));\n \n   DeclVisitor v = DeclVisitor ();\n-  d->accept (&v);\n+  v.build_dsymbol (d);\n \n   input_location = saved_location;\n }"}]}