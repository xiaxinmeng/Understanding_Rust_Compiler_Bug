{"sha": "132902177138c09803d639e12b1daebf2b9edddc", "node_id": "C_kwDOANBUbNoAKDEzMjkwMjE3NzEzOGMwOTgwM2Q2MzllMTJiMWRhZWJmMmI5ZWRkZGM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-11-29T16:47:47Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-11-29T23:50:56Z"}, "message": "analyzer: further false leak fixes due to overzealous state merging [PR103217]\n\nCommit r12-5424-gf573d35147ca8433c102e1721d8c99fc432cb44b fixed a false\npositive from -Wanalyzer-malloc-leak due to overzealous state merging,\nerroneously merging two different svalues bound to a particular part\nof the store when one has sm-state.\n\nA further case was discovered by the reporter of PR analyzer/103217,\nwhich this patch fixes.  In this variant, different states have set\ndifferent fields of a struct, and on attempting to merge them, the\nstates have a different set of binding keys, leading to one state\nhaving an svalue with sm-state, and its peer state having a NULL value\nfor that binding key.  The state merger code was erroneously treating\nthem as mergeable to \"UNKNOWN\".  This followup patch fixes things by\nrejecting such mergers if the non-NULL svalue is not mergeable with\n\"UNKNOWN\".\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/103217\n\t* store.cc (binding_cluster::can_merge_p): For the \"key is bound\"\n\tvs \"key is not bound\" merger case, check that the bound svalue\n\tis mergeable before merging it to \"unknown\", rejecting the merger\n\totherwise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/103217\n\t* gcc.dg/analyzer/pr103217-2.c: New test.\n\t* gcc.dg/analyzer/pr103217-3.c: New test.\n\t* gcc.dg/analyzer/pr103217-4.c: New test.\n\t* gcc.dg/analyzer/pr103217-5.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "31a44f1e3537dd31c4500efa12338b38bc98d24d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31a44f1e3537dd31c4500efa12338b38bc98d24d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/132902177138c09803d639e12b1daebf2b9edddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/132902177138c09803d639e12b1daebf2b9edddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/132902177138c09803d639e12b1daebf2b9edddc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/132902177138c09803d639e12b1daebf2b9edddc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca5667e867252db3c8642ee90f55427149cd92b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5667e867252db3c8642ee90f55427149cd92b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca5667e867252db3c8642ee90f55427149cd92b6"}], "stats": {"total": 217, "additions": 215, "deletions": 2}, "files": [{"sha": "5eecbe6cf18da9137165b64d3d36e06f21ff735b", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132902177138c09803d639e12b1daebf2b9edddc/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132902177138c09803d639e12b1daebf2b9edddc/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=132902177138c09803d639e12b1daebf2b9edddc", "patch": "@@ -1729,6 +1729,7 @@ binding_cluster::can_merge_p (const binding_cluster *cluster_a,\n   for (hash_set<const binding_key *>::iterator iter = keys.begin ();\n        iter != keys.end (); ++iter)\n     {\n+      region_model_manager *sval_mgr = mgr->get_svalue_manager ();\n       const binding_key *key = *iter;\n       const svalue *sval_a = cluster_a->get_any_value (key);\n       const svalue *sval_b = cluster_b->get_any_value (key);\n@@ -1746,7 +1747,6 @@ binding_cluster::can_merge_p (const binding_cluster *cluster_a,\n \t}\n       else if (sval_a && sval_b)\n \t{\n-\t  region_model_manager *sval_mgr = mgr->get_svalue_manager ();\n \t  if (const svalue *merged_sval\n \t      = sval_a->can_merge_p (sval_b, sval_mgr, merger))\n \t    {\n@@ -1760,9 +1760,19 @@ binding_cluster::can_merge_p (const binding_cluster *cluster_a,\n       /* If we get here, then one cluster binds this key and the other\n \t doesn't; merge them as \"UNKNOWN\".  */\n       gcc_assert (sval_a || sval_b);\n-      tree type = sval_a ? sval_a->get_type () : sval_b->get_type ();\n+\n+      const svalue *bound_sval = sval_a ? sval_a : sval_b;\n+      tree type = bound_sval->get_type ();\n       const svalue *unknown_sval\n \t= mgr->get_svalue_manager ()->get_or_create_unknown_svalue (type);\n+\n+      /* ...but reject the merger if this sval shouldn't be mergeable\n+\t (e.g. reject merging svalues that have non-purgable sm-state,\n+\t to avoid falsely reporting memory leaks by merging them\n+\t with something else).  */\n+      if (!bound_sval->can_merge_p (unknown_sval, sval_mgr, merger))\n+\treturn false;\n+\n       out_cluster->m_map.put (key, unknown_sval);\n     }\n "}, {"sha": "3a9c4145848ebd9e50ce669a384775ff25e75650", "filename": "gcc/testsuite/gcc.dg/analyzer/pr103217-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132902177138c09803d639e12b1daebf2b9edddc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132902177138c09803d639e12b1daebf2b9edddc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-2.c?ref=132902177138c09803d639e12b1daebf2b9edddc", "patch": "@@ -0,0 +1,52 @@\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void *calloc (size_t __nmemb, size_t __size)\n+  __attribute__ ((__nothrow__ , __leaf__, __malloc__, __alloc_size__ (1, 2)));\n+\n+extern char *strdup (const char *__s)\n+  __attribute__ ((__nothrow__ , __leaf__, __malloc__, __nonnull__ (1)));\n+\n+extern void abort (void)\n+  __attribute__ ((__nothrow__ , __leaf__, __noreturn__));\n+\n+extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)\n+  __attribute__ ((__nothrow__ , __leaf__, __nonnull__ (2, 3)));\n+extern char *optarg;\n+\n+extern void free (void *__ptr)\n+  __attribute__ ((__nothrow__ , __leaf__));\n+\n+char *xstrdup(const char *src) {\n+\tchar *val = strdup(src);\n+\tif (!val)\n+\t\tabort();\n+\treturn val;\n+}\n+\n+struct test {\n+\tchar *one, *two;\n+};\n+\n+int main(int argc, char *argv[]) {\n+\tstruct test *options = calloc(1, sizeof(*options));\n+\tint rc;\n+\tif (!options)\n+\t\tabort();\n+\n+\twhile ((rc = getopt(argc, argv, \"a:b:\")) != -1) {\n+\t\tswitch (rc) {\n+\t\tcase 'a':\n+\t\t\tfree(options->one);\n+\t\t\toptions->one = xstrdup(optarg);\n+\t\t\tbreak;\n+\t\tcase 'b':\n+\t\t\tfree(options->two);\n+\t\t\toptions->two = xstrdup(optarg);\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\tfree(options->one);\n+\tfree(options->two);\n+\tfree(options);\n+\treturn 0;\n+}"}, {"sha": "b103a12165059a42c8488f2b1ce4c9d8a2eb68b8", "filename": "gcc/testsuite/gcc.dg/analyzer/pr103217-3.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132902177138c09803d639e12b1daebf2b9edddc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132902177138c09803d639e12b1daebf2b9edddc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-3.c?ref=132902177138c09803d639e12b1daebf2b9edddc", "patch": "@@ -0,0 +1,52 @@\n+extern char *strdup (const char *__s)\n+  __attribute__ ((__nothrow__ , __leaf__, __malloc__, __nonnull__ (1)));\n+\n+extern void abort (void)\n+  __attribute__ ((__nothrow__ , __leaf__, __noreturn__));\n+\n+extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)\n+  __attribute__ ((__nothrow__ , __leaf__, __nonnull__ (2, 3)));\n+extern char *optarg;\n+\n+extern void free (void *__ptr)\n+  __attribute__ ((__nothrow__ , __leaf__));\n+\n+struct state {\n+  const char *confpath;\n+  const char *host;\n+  const char *port;\n+  const char *state_dir_prefix;\n+};\n+\n+static inline char *xstrdup(const char *s) { \n+        char *val = strdup(s);\n+        if (!val)\n+                abort();\n+        return val;\n+}\n+\n+int config_init(struct state *config);\n+\n+int main(int argc, char *argv[]) { \n+        int rc;\n+        struct state state = { 0 };\n+\n+        config_init(&state);\n+\n+        while ((rc = getopt(argc, argv, \"H:p:\")) != -1) { \n+                switch (rc) { \n+                case 'H':\n+                        free((void*)state.host);\n+                        state.host = xstrdup(optarg);\n+                        break;\n+                case 'p':\n+                        free((void*)state.port);\n+                        state.port = xstrdup(optarg);\n+                        break;\n+                } \n+        } \n+\n+        free((void*)state.host);\n+        free((void*)state.port);\n+        return rc;\n+}"}, {"sha": "516e1f4f9974df1ad2806bb5ca35a2eb3f3c66bb", "filename": "gcc/testsuite/gcc.dg/analyzer/pr103217-4.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132902177138c09803d639e12b1daebf2b9edddc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132902177138c09803d639e12b1daebf2b9edddc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-4.c?ref=132902177138c09803d639e12b1daebf2b9edddc", "patch": "@@ -0,0 +1,52 @@\n+extern char *strdup (const char *__s)\n+  __attribute__ ((__nothrow__ , __leaf__, __malloc__, __nonnull__ (1)));\n+\n+extern void abort (void)\n+  __attribute__ ((__nothrow__ , __leaf__, __noreturn__));\n+\n+extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)\n+  __attribute__ ((__nothrow__ , __leaf__, __nonnull__ (2, 3)));\n+extern char *optarg;\n+\n+extern void free (void *__ptr)\n+  __attribute__ ((__nothrow__ , __leaf__));\n+\n+struct state {\n+  const char *confpath;\n+  const char *host;\n+  const char *port;\n+  const char *state_dir_prefix;\n+};\n+\n+static inline char *xstrdup(const char *s) { \n+        char *val = strdup(s);\n+        if (!val)\n+                abort();\n+        return val;\n+}\n+\n+int config_init(struct state *config);\n+\n+int main(int argc, char *argv[]) { \n+        int rc;\n+        struct state state = { 0 };\n+\n+        config_init(&state);\n+\n+        if ((rc = getopt(argc, argv, \"H:p:\")) != -1) {\n+                switch (rc) {\n+                case 'H':\n+                        free((void*)state.host);\n+                        state.host = xstrdup(optarg);\n+                        break;\n+                case 'p':\n+                        free((void*)state.port);\n+                        state.port = xstrdup(optarg);\n+                        break;\n+                } \n+        } \n+\n+        free((void*)state.host);\n+        free((void*)state.port);\n+        return rc;\n+}"}, {"sha": "d916d92eeece09527d386136b354a9f9ad045ff0", "filename": "gcc/testsuite/gcc.dg/analyzer/pr103217-5.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132902177138c09803d639e12b1daebf2b9edddc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132902177138c09803d639e12b1daebf2b9edddc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr103217-5.c?ref=132902177138c09803d639e12b1daebf2b9edddc", "patch": "@@ -0,0 +1,47 @@\n+extern char *strdup (const char *__s)\n+  __attribute__ ((__nothrow__ , __leaf__, __malloc__, __nonnull__ (1)));\n+\n+extern void abort (void)\n+  __attribute__ ((__nothrow__ , __leaf__, __noreturn__));\n+\n+extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)\n+  __attribute__ ((__nothrow__ , __leaf__, __nonnull__ (2, 3)));\n+extern char *optarg;\n+\n+extern void free (void *__ptr)\n+  __attribute__ ((__nothrow__ , __leaf__));\n+\n+struct state {\n+  const char *confpath;\n+  const char *host;\n+  const char *port;\n+  const char *state_dir_prefix;\n+};\n+\n+static inline char *xstrdup(const char *s) {\n+        char *val = strdup(s);\n+        if (!val)\n+                abort();\n+        return val;\n+}\n+\n+int config_init(struct state *config);\n+\n+int main(int argc, char *argv[]) {\n+  struct state state;\n+\n+  config_init(&state);\n+\n+  switch (getopt(argc, argv, \"H:p:\")) {\n+  case 'H':\n+    state.host = xstrdup(optarg);\n+    break;\n+  case 'p':\n+    state.port = xstrdup(optarg);\n+    break;\n+  }\n+\n+  free((void*)state.host);\n+  free((void*)state.port);\n+  return 0;\n+}"}]}