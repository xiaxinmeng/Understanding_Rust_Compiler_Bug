{"sha": "a37adfc784385cabf2bbedcd0663919d8c32d2d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM3YWRmYzc4NDM4NWNhYmYyYmJlZGNkMDY2MzkxOWQ4YzMyZDJkNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1994-02-15T23:28:03Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1994-02-15T23:28:03Z"}, "message": "Make byteorder.h a here document, rather than copying it from the\nsource directory.\n\nFrom-SVN: r6566", "tree": {"sha": "6fd8c6ca723c06e51d8b00b892daef6105699382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fd8c6ca723c06e51d8b00b892daef6105699382"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a37adfc784385cabf2bbedcd0663919d8c32d2d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37adfc784385cabf2bbedcd0663919d8c32d2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37adfc784385cabf2bbedcd0663919d8c32d2d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37adfc784385cabf2bbedcd0663919d8c32d2d7/comments", "author": null, "committer": null, "parents": [{"sha": "4d29f799e66dd51273918a4e0e223276592f2c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d29f799e66dd51273918a4e0e223276592f2c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d29f799e66dd51273918a4e0e223276592f2c38"}], "stats": {"total": 138, "additions": 137, "deletions": 1}, "files": [{"sha": "1b1621062b46782ec9613f3fd1b0fb23cb26e440", "filename": "gcc/fixinc.svr4", "status": "modified", "additions": 137, "deletions": 1, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37adfc784385cabf2bbedcd0663919d8c32d2d7/gcc%2Ffixinc.svr4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37adfc784385cabf2bbedcd0663919d8c32d2d7/gcc%2Ffixinc.svr4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc.svr4?ref=a37adfc784385cabf2bbedcd0663919d8c32d2d7", "patch": "@@ -1377,7 +1377,143 @@ cd ${ORIG_DIR}\n \n echo 'Replacing <sys/byteorder.h>'\n rm -f ${LIB}/sys/byteorder.h\n-cp ${SRCDIR}/byteorder.h ${LIB}/sys/byteorder.h\n+cat <<'__EOF__' >${LIB}/sys/byteorder.h\n+#ifndef _SYS_BYTEORDER_H\n+#define _SYS_BYTEORDER_H\n+\n+/* Functions to convert `short' and `long' quantities from host byte order\n+   to (internet) network byte order (i.e. big-endian).\n+\n+   Written by Ron Guilmette (rfg@ncd.com).\n+\n+   This isn't actually used by GCC.  It is installed by fixinc.svr4.\n+\n+   For big-endian machines these functions are essentially no-ops.\n+\n+   For little-endian machines, we define the functions using specialized\n+   asm sequences in cases where doing so yields better code (e.g. i386).  */\n+\n+#if !defined (__GNUC__) && !defined (__GNUG__)\n+#error You lose!  This file is only useful with GNU compilers.\n+#endif\n+\n+#ifdef __GNUC__\n+#define __STATIC static\n+#else\n+#define __STATIC\n+#endif\n+\n+#ifdef __STDC__\n+__STATIC __inline__ unsigned long htonl (unsigned long);\n+__STATIC __inline__ unsigned short htons (unsigned int);\n+__STATIC __inline__ unsigned long ntohl (unsigned long);\n+__STATIC __inline__ unsigned short ntohs (unsigned int);\n+#endif /* defined (__STDC__) */\n+\n+#if defined (__i386__)\n+\n+/* Convert a host long to a network long.  */\n+\n+/* We must use a new-style function definition, so that this will also\n+   be valid for C++.  */\n+__STATIC __inline__ unsigned long\n+htonl (unsigned long __arg)\n+{\n+  register unsigned long __result;\n+\n+  __asm__ (\"xchg%B0 %b0,%h0\\n\\\n+\tror%L0 $16,%0\\n\\\n+\txchg%B0 %b0,%h0\" : \"=q\" (__result) : \"0\" (__arg));\n+  return __result;\n+}\n+\n+/* Convert a host short to a network short.  */\n+\n+__STATIC __inline__ unsigned short\n+htons (unsigned int __arg)\n+{\n+  register unsigned short __result;\n+\n+  __asm__ (\"xchg%B0 %b0,%h0\" : \"=q\" (__result) : \"0\" (__arg));\n+  return __result;\n+}\n+\n+#elif ((defined (__i860__) && !defined (__i860_big_endian__))\t\\\n+       || defined (__ns32k__) || defined (__vax__)\t\t\\\n+       || defined (__spur__) || defined (__arm__))\n+\n+/* For other little-endian machines, using C code is just as efficient as\n+   using assembly code.  */\n+\n+/* Convert a host long to a network long.  */\n+\n+__STATIC __inline__ unsigned long\n+htonl (unsigned long __arg)\n+{\n+  register unsigned long __result;\n+\n+  __result = (__arg >> 24) & 0x000000ff;\n+  __result |= (__arg >> 8) & 0x0000ff00;\n+  __result |= (__arg << 8) & 0x00ff0000;\n+  __result |= (__arg << 24) & 0xff000000;\n+  return __result;\n+}\n+\n+/* Convert a host short to a network short.  */\n+\n+__STATIC __inline__ unsigned short\n+htons (unsigned int __arg)\n+{\n+  register unsigned short __result;\n+\n+  __result = (__arg << 8) & 0xff00;\n+  __result |= (__arg >> 8) & 0x00ff;\n+  return __result;\n+}\n+\n+#else /* must be a big-endian machine */\n+\n+/* Convert a host long to a network long.  */\n+\n+__STATIC __inline__ unsigned long\n+htonl (unsigned long __arg)\n+{\n+  return __arg;\n+}\n+\n+/* Convert a host short to a network short.  */\n+\n+__STATIC __inline__ unsigned short\n+htons (unsigned int __arg)\n+{\n+  return __arg;\n+}\n+\n+#endif /* big-endian */\n+\n+/* Convert a network long to a host long.  */\n+\n+__STATIC __inline__ unsigned long\n+ntohl (unsigned long __arg)\n+{\n+  return htonl (__arg);\n+}\n+\n+/* Convert a network short to a host short.  */\n+\n+__STATIC __inline__ unsigned short\n+ntohs (unsigned int __arg)\n+{\n+  return htons (__arg);\n+}\n+\n+\n+#undef __STATIC\n+\n+#endif /* !defined (_SYS_BYTEORDER_H) */\n+__EOF__\n+\n+chmod a+r ${LIB}/sys/byteorder.h\n \n exit 0\n "}]}