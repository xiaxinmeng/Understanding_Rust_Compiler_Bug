{"sha": "2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2OGQ3Y2MzYmE2ZjNiMjI4MGJmZWZjYzhhNzg5ZWE0ZDhkOTBhNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-12T14:40:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-12T14:40:14Z"}, "message": "[multiple changes]\n\n2017-01-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch9.adb, sem_prag.adb, s-tassta.adb, sem_util.adb, s-tarest.adb,\n\tsem_ch13.adb: Minor reformatting.\n\n2017-01-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_aggr.adb (Build_Record_Aggr_Code): Guard against a missing\n\tadjustment primitive when the ancestor type was not properly frozen.\n\t(Gen_Assign): Guard against a missing initialization\n\tprimitive when the component type was not properly frozen.\n\t(Initialize_Array_Component): Guard against a missing adjustment\n\tprimitive when the component type was not properly frozen.\n\t(Initialize_Record_Component): Guard against a missing adjustment\n\tprimitive when the component type was not properly frozen.\n\t(Process_Transient_Component_Completion): The transient object may\n\tnot be finalized when its associated type was not properly frozen.\n\t* exp_ch3.adb (Build_Assignment): Guard against a missing\n\tadjustment primitive when the component type was not properly frozen.\n\t(Build_Initialization_Call): Guard against a missing\n\tinitialization primitive when the associated type was not properly\n\tfrozen.\n\t(Expand_N_Object_Declaration): Guard against a missing\n\tadjustment primitive when the base type was not properly frozen.\n\t(Predefined_Primitive_Bodies): Create an empty Deep_Adjust\n\tbody when there is no adjustment primitive available. Create an\n\tempty Deep_Finalize body when there is no finalization primitive\n\tavailable.\n\t* exp_ch4.adb (Apply_Accessibility_Check): Guard against a\n\tmissing finalization primitive when the designated type was\n\tnot properly frozen.\n\t(Expand_N_Allocator): Guard against a missing initialization primitive\n\twhen the designated type was not properly frozen.\n\t* exp_ch5.adb (Make_Tag_Ctrl_Assignment): Add the adjustment call\n\tonly when the corresponding adjustment primitive is available.\n\t* exp_ch7.adb (Build_Adjust_Or_Finalize_Statements): Generate the\n\tadjustment/finalization statements only when there is an available\n\tprimitive to carry out the action.\n\t(Build_Initialize_Statements): Generate the initialization/finalization\n\tstatements only when there is an available primitive to carry out the\n\taction.\n\t(Make_Adjust_Call): Do not generate a call when the underlying\n\ttype is not present due to a possible missing full view.\n\t(Make_Final_Call): Do not generate a call when the underlying\n\ttype is not present due to a possible missing full view.\n\t(Make_Finalize_Address_Stmts): Generate an empty body when the\n\tdesignated type lacks a finalization primitive.\n\t(Make_Init_Call): Do not generate a call when the underlying type is\n\tnot present due to a possible missing full view.\n\t(Process_Component_For_Adjust): Add the adjustment call only when the\n\tcorresponding adjustment primitive is available.\n\t(Process_Component_For_Finalize): Add the finalization call only when\n\tthe corresponding finalization primitive is available.\n\t(Process_Object_Declaration): Use a null statement to emulate a\n\tmissing call to the finalization primitive of the object type.\n\t* exp_ch7.ads (Make_Adjust_Call): Update the comment on usage.\n\t(Make_Final_Call): Update the comment on usage.\n\t(Make_Init_Call): Update the comment on usage.\n\t* exp_util.adb (Build_Transient_Object_Statements): Code reformatting.\n\n2017-01-12  Arnaud Charlet  <charlet@adacore.com>\n\n\t* einfo.ads: Update documentation of Address_Taken.\n\t* sem_attr.adb (Analyze_Access_Attribute, Resolve_Attribute\n\t[Access_Attribute]): Only consider 'Access/'Unchecked_Access\n\tfor subprograms when setting Address_Taken flag.\n\n2017-01-12  Patrick Bernardi  <bernardi@adacore.com>\n\n\t* sem_ch10.adb (Analyze_With_Clause): Removed code that turned\n\tConfigurable_Run_Time_Mode off when analysing with'ed predefined\n\tlibraries.\n\nFrom-SVN: r244365", "tree": {"sha": "9bd16a83c4a282ddbe95d43f0b278466d6e4d5b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bd16a83c4a282ddbe95d43f0b278466d6e4d5b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/comments", "author": null, "committer": null, "parents": [{"sha": "4704f28e7a59c82fab92109ac6f22e3b14a0344b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4704f28e7a59c82fab92109ac6f22e3b14a0344b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4704f28e7a59c82fab92109ac6f22e3b14a0344b"}], "stats": {"total": 1238, "additions": 767, "deletions": 471}, "files": [{"sha": "233582fbd5747fff4d6285deb0c0798cee4f4686", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -1,3 +1,76 @@\n+2017-01-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch9.adb, sem_prag.adb, s-tassta.adb, sem_util.adb, s-tarest.adb,\n+\tsem_ch13.adb: Minor reformatting.\n+\n+2017-01-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_aggr.adb (Build_Record_Aggr_Code): Guard against a missing\n+\tadjustment primitive when the ancestor type was not properly frozen.\n+\t(Gen_Assign): Guard against a missing initialization\n+\tprimitive when the component type was not properly frozen.\n+\t(Initialize_Array_Component): Guard against a missing adjustment\n+\tprimitive when the component type was not properly frozen.\n+\t(Initialize_Record_Component): Guard against a missing adjustment\n+\tprimitive when the component type was not properly frozen.\n+\t(Process_Transient_Component_Completion): The transient object may\n+\tnot be finalized when its associated type was not properly frozen.\n+\t* exp_ch3.adb (Build_Assignment): Guard against a missing\n+\tadjustment primitive when the component type was not properly frozen.\n+\t(Build_Initialization_Call): Guard against a missing\n+\tinitialization primitive when the associated type was not properly\n+\tfrozen.\n+\t(Expand_N_Object_Declaration): Guard against a missing\n+\tadjustment primitive when the base type was not properly frozen.\n+\t(Predefined_Primitive_Bodies): Create an empty Deep_Adjust\n+\tbody when there is no adjustment primitive available. Create an\n+\tempty Deep_Finalize body when there is no finalization primitive\n+\tavailable.\n+\t* exp_ch4.adb (Apply_Accessibility_Check): Guard against a\n+\tmissing finalization primitive when the designated type was\n+\tnot properly frozen.\n+\t(Expand_N_Allocator): Guard against a missing initialization primitive\n+\twhen the designated type was not properly frozen.\n+\t* exp_ch5.adb (Make_Tag_Ctrl_Assignment): Add the adjustment call\n+\tonly when the corresponding adjustment primitive is available.\n+\t* exp_ch7.adb (Build_Adjust_Or_Finalize_Statements): Generate the\n+\tadjustment/finalization statements only when there is an available\n+\tprimitive to carry out the action.\n+\t(Build_Initialize_Statements): Generate the initialization/finalization\n+\tstatements only when there is an available primitive to carry out the\n+\taction.\n+\t(Make_Adjust_Call): Do not generate a call when the underlying\n+\ttype is not present due to a possible missing full view.\n+\t(Make_Final_Call): Do not generate a call when the underlying\n+\ttype is not present due to a possible missing full view.\n+\t(Make_Finalize_Address_Stmts): Generate an empty body when the\n+\tdesignated type lacks a finalization primitive.\n+\t(Make_Init_Call): Do not generate a call when the underlying type is\n+\tnot present due to a possible missing full view.\n+\t(Process_Component_For_Adjust): Add the adjustment call only when the\n+\tcorresponding adjustment primitive is available.\n+\t(Process_Component_For_Finalize): Add the finalization call only when\n+\tthe corresponding finalization primitive is available.\n+\t(Process_Object_Declaration): Use a null statement to emulate a\n+\tmissing call to the finalization primitive of the object type.\n+\t* exp_ch7.ads (Make_Adjust_Call): Update the comment on usage.\n+\t(Make_Final_Call): Update the comment on usage.\n+\t(Make_Init_Call): Update the comment on usage.\n+\t* exp_util.adb (Build_Transient_Object_Statements): Code reformatting.\n+\n+2017-01-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* einfo.ads: Update documentation of Address_Taken.\n+\t* sem_attr.adb (Analyze_Access_Attribute, Resolve_Attribute\n+\t[Access_Attribute]): Only consider 'Access/'Unchecked_Access\n+\tfor subprograms when setting Address_Taken flag.\n+\n+2017-01-12  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* sem_ch10.adb (Analyze_With_Clause): Removed code that turned\n+\tConfigurable_Run_Time_Mode off when analysing with'ed predefined\n+\tlibraries.\n+\n 2017-01-12  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_prag.adb: Minor reformatting."}, {"sha": "d3820afe4f99a4fea371233234eac625bff4dce0", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -393,9 +393,11 @@ package Einfo is\n --       attribute is applied directly to the entity, i.e. the entity is the\n --       entity of the prefix of the attribute reference. Also set if the\n --       entity is the second argument of an Asm_Input or Asm_Output attribute,\n---       as the construct may entail taking its address. Used by the backend to\n---       make sure that the address can be meaningfully taken, and also in the\n---       case of subprograms to control output of certain warnings.\n+--       as the construct may entail taking its address. And also set if the\n+--       entity is a subprogram and the Access or Unchecked_Access attribute is\n+--       applied. Used by the backend to make sure that the address can be\n+--       meaningfully taken, and also in the case of subprograms to control\n+--       output of certain warnings.\n \n --    Aft_Value (synthesized)\n --       Applies to fixed and decimal types. Computes a universal integer that"}, {"sha": "f058c6110f44df05e4a64e12dce9ddb562d771e0", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -1128,6 +1128,7 @@ package body Exp_Aggr is\n                                   and then Needs_Finalization (Comp_Typ);\n \n             Full_Typ  : constant Entity_Id := Underlying_Type (Comp_Typ);\n+            Adj_Call  : Node_Id;\n             Blk_Stmts : List_Id;\n             Init_Stmt : Node_Id;\n \n@@ -1222,10 +1223,17 @@ package body Exp_Aggr is\n                   and then Is_Controlled (Component_Type (Comp_Typ))\n                   and then Nkind (Expr) = N_Aggregate)\n             then\n-               Append_To (Blk_Stmts,\n+               Adj_Call :=\n                  Make_Adjust_Call\n                    (Obj_Ref => New_Copy_Tree (Arr_Comp),\n-                    Typ     => Comp_Typ));\n+                    Typ     => Comp_Typ);\n+\n+               --  Guard against a missing [Deep_]Adjust when the component\n+               --  type was not frozen properly.\n+\n+               if Present (Adj_Call) then\n+                  Append_To (Blk_Stmts, Adj_Call);\n+               end if;\n             end if;\n \n             --  Complete the protection of the initialization statements\n@@ -1390,6 +1398,7 @@ package body Exp_Aggr is\n          Comp_Typ     : Entity_Id := Empty;\n          Expr_Q       : Node_Id;\n          Indexed_Comp : Node_Id;\n+         Init_Call    : Node_Id;\n          New_Indexes  : List_Id;\n \n       --  Start of processing for Gen_Assign\n@@ -1613,10 +1622,17 @@ package body Exp_Aggr is\n             end if;\n \n             if Needs_Finalization (Ctype) then\n-               Append_To (Stmts,\n+               Init_Call :=\n                  Make_Init_Call\n                    (Obj_Ref => New_Copy_Tree (Indexed_Comp),\n-                    Typ     => Ctype));\n+                    Typ     => Ctype);\n+\n+               --  Guard against a missing [Deep_]Initialize when the component\n+               --  type was not properly frozen.\n+\n+               if Present (Init_Call) then\n+                  Append_To (Stmts, Init_Call);\n+               end if;\n             end if;\n          end if;\n \n@@ -2847,6 +2863,7 @@ package body Exp_Aggr is\n          Finalization_OK : constant Boolean := Needs_Finalization (Comp_Typ);\n \n          Full_Typ  : constant Entity_Id := Underlying_Type (Comp_Typ);\n+         Adj_Call  : Node_Id;\n          Blk_Stmts : List_Id;\n          Init_Stmt : Node_Id;\n \n@@ -2912,10 +2929,17 @@ package body Exp_Aggr is\n          --    [Deep_]Adjust (Rec_Comp);\n \n          if Finalization_OK and then not Is_Limited_Type (Comp_Typ) then\n-            Append_To (Blk_Stmts,\n+            Adj_Call :=\n               Make_Adjust_Call\n                 (Obj_Ref => New_Copy_Tree (Rec_Comp),\n-                 Typ     => Comp_Typ));\n+                 Typ     => Comp_Typ);\n+\n+            --  Guard against a missing [Deep_]Adjust when the component type\n+            --  was not properly frozen.\n+\n+            if Present (Adj_Call) then\n+               Append_To (Blk_Stmts, Adj_Call);\n+            end if;\n          end if;\n \n          --  Complete the protection of the initialization statements\n@@ -3062,6 +3086,7 @@ package body Exp_Aggr is\n       if Nkind (N) = N_Extension_Aggregate then\n          declare\n             Ancestor : constant Node_Id := Ancestor_Part (N);\n+            Adj_Call : Node_Id;\n             Assign   : List_Id;\n \n          begin\n@@ -3274,10 +3299,17 @@ package body Exp_Aggr is\n                if Needs_Finalization (Etype (Ancestor))\n                  and then not Is_Limited_Type (Etype (Ancestor))\n                then\n-                  Append_To (Assign,\n+                  Adj_Call :=\n                     Make_Adjust_Call\n                       (Obj_Ref => New_Copy_Tree (Ref),\n-                       Typ     => Etype (Ancestor)));\n+                       Typ     => Etype (Ancestor));\n+\n+                  --  Guard against a missing [Deep_]Adjust when the ancestor\n+                  --  type was not properly frozen.\n+\n+                  if Present (Adj_Call) then\n+                     Append_To (Assign, Adj_Call);\n+                  end if;\n                end if;\n \n                Append_To (L,\n@@ -7832,7 +7864,6 @@ package body Exp_Aggr is\n                         not Restriction_Active (No_Exception_Propagation);\n \n    begin\n-      pragma Assert (Present (Fin_Call));\n       pragma Assert (Present (Hook_Clear));\n \n       --  Generate the following code if exception propagation is allowed:\n@@ -7872,6 +7903,7 @@ package body Exp_Aggr is\n          Abort_And_Exception : declare\n             Blk_Decls : constant List_Id := New_List;\n             Blk_Stmts : constant List_Id := New_List;\n+            Fin_Stmts : constant List_Id := New_List;\n \n             Fin_Data : Finalization_Exception_Data;\n \n@@ -7892,13 +7924,17 @@ package body Exp_Aggr is\n             --  Wrap the hook clear and the finalization call in order to trap\n             --  a potential exception.\n \n+            Append_To (Fin_Stmts, Hook_Clear);\n+\n+            if Present (Fin_Call) then\n+               Append_To (Fin_Stmts, Fin_Call);\n+            end if;\n+\n             Append_To (Blk_Stmts,\n               Make_Block_Statement (Loc,\n                 Handled_Statement_Sequence =>\n                   Make_Handled_Sequence_Of_Statements (Loc,\n-                    Statements         => New_List (\n-                      Hook_Clear,\n-                      Fin_Call),\n+                    Statements         => Fin_Stmts,\n                     Exception_Handlers => New_List (\n                       Build_Exception_Handler (Fin_Data)))));\n \n@@ -7943,7 +7979,10 @@ package body Exp_Aggr is\n          begin\n             Append_To (Blk_Stmts, Build_Runtime_Call (Loc, RE_Abort_Defer));\n             Append_To (Blk_Stmts, Hook_Clear);\n-            Append_To (Blk_Stmts, Fin_Call);\n+\n+            if Present (Fin_Call) then\n+               Append_To (Blk_Stmts, Fin_Call);\n+            end if;\n \n             Append_To (Stmts,\n               Build_Abort_Undefer_Block (Loc,\n@@ -7958,7 +7997,10 @@ package body Exp_Aggr is\n \n       else\n          Append_To (Stmts, Hook_Clear);\n-         Append_To (Stmts, Fin_Call);\n+\n+         if Present (Fin_Call) then\n+            Append_To (Stmts, Fin_Call);\n+         end if;\n       end if;\n    end Process_Transient_Component_Completion;\n "}, {"sha": "068674dbfe236dbbbf3e9f0fe548e58eb7e48583", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 67, "deletions": 36, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -1295,6 +1295,7 @@ package body Exp_Ch3 is\n       First_Arg      : Node_Id;\n       Full_Init_Type : Entity_Id;\n       Full_Type      : Entity_Id;\n+      Init_Call      : Node_Id;\n       Init_Type      : Entity_Id;\n       Proc           : Entity_Id;\n \n@@ -1515,7 +1516,7 @@ package body Exp_Ch3 is\n             then\n                Append_To (Args,\n                  Make_Selected_Component (Loc,\n-                   Prefix => New_Copy_Tree (Prefix (Id_Ref)),\n+                   Prefix        => New_Copy_Tree (Prefix (Id_Ref)),\n                    Selector_Name => Arg));\n             else\n                Append_To (Args, Arg);\n@@ -1542,17 +1543,24 @@ package body Exp_Ch3 is\n \n       Append_To (Res,\n         Make_Procedure_Call_Statement (Loc,\n-          Name => New_Occurrence_Of (Proc, Loc),\n+          Name                   => New_Occurrence_Of (Proc, Loc),\n           Parameter_Associations => Args));\n \n       if Needs_Finalization (Typ)\n         and then Nkind (Id_Ref) = N_Selected_Component\n       then\n          if Chars (Selector_Name (Id_Ref)) /= Name_uParent then\n-            Append_To (Res,\n+            Init_Call :=\n               Make_Init_Call\n                 (Obj_Ref => New_Copy_Tree (First_Arg),\n-                 Typ     => Typ));\n+                 Typ     => Typ);\n+\n+            --  Guard against a missing [Deep_]Initialize when the type was not\n+            --  properly frozen.\n+\n+            if Present (Init_Call) then\n+               Append_To (Res, Init_Call);\n+            end if;\n          end if;\n       end if;\n \n@@ -1651,10 +1659,12 @@ package body Exp_Ch3 is\n       function Build_Assignment (Id : Entity_Id; N : Node_Id) return List_Id is\n          N_Loc : constant Source_Ptr := Sloc (N);\n          Typ   : constant Entity_Id := Underlying_Type (Etype (Id));\n-         Exp   : Node_Id := N;\n-         Kind  : Node_Kind := Nkind (N);\n-         Lhs   : Node_Id;\n-         Res   : List_Id;\n+\n+         Adj_Call : Node_Id;\n+         Exp      : Node_Id   := N;\n+         Kind     : Node_Kind := Nkind (N);\n+         Lhs      : Node_Id;\n+         Res      : List_Id;\n \n       begin\n          Lhs :=\n@@ -1734,10 +1744,17 @@ package body Exp_Ch3 is\n            and then not (Nkind_In (Kind, N_Aggregate, N_Extension_Aggregate))\n            and then not Is_Limited_View (Typ)\n          then\n-            Append_To (Res,\n+            Adj_Call :=\n               Make_Adjust_Call\n                 (Obj_Ref => New_Copy_Tree (Lhs),\n-                 Typ     => Etype (Id)));\n+                 Typ     => Etype (Id));\n+\n+            --  Guard against a missing [Deep_]Adjust when the component type\n+            --  was not properly frozen.\n+\n+            if Present (Adj_Call) then\n+               Append_To (Res, Adj_Call);\n+            end if;\n          end if;\n \n          --  If a component type has a predicate, add check to the component\n@@ -5830,7 +5847,9 @@ package body Exp_Ch3 is\n \n       --  Local variables\n \n-      Next_N     : constant Node_Id := Next (N);\n+      Next_N : constant Node_Id := Next (N);\n+\n+      Adj_Call   : Node_Id;\n       Id_Ref     : Node_Id;\n       Tag_Assign : Node_Id;\n \n@@ -6332,10 +6351,17 @@ package body Exp_Ch3 is\n               and then not Is_Limited_View (Typ)\n               and then not Rewrite_As_Renaming\n             then\n-               Insert_Action_After (Init_After,\n+               Adj_Call :=\n                  Make_Adjust_Call (\n                    Obj_Ref => New_Occurrence_Of (Def_Id, Loc),\n-                   Typ     => Base_Typ));\n+                   Typ     => Base_Typ);\n+\n+               --  Guard against a missing [Deep_]Adjust when the base type\n+               --  was not properly frozen.\n+\n+               if Present (Adj_Call) then\n+                  Insert_Action_After (Init_After, Adj_Call);\n+               end if;\n             end if;\n \n             --  For tagged types, when an init value is given, the tag has to\n@@ -9530,7 +9556,9 @@ package body Exp_Ch3 is\n    is\n       Loc       : constant Source_Ptr := Sloc (Tag_Typ);\n       Res       : constant List_Id    := New_List;\n+      Adj_Call  : Node_Id;\n       Decl      : Node_Id;\n+      Fin_Call  : Node_Id;\n       Prim      : Elmt_Id;\n       Eq_Needed : Boolean;\n       Eq_Name   : Name_Id;\n@@ -9756,42 +9784,45 @@ package body Exp_Ch3 is\n \n       elsif not Has_Controlled_Component (Tag_Typ) then\n          if not Is_Limited_Type (Tag_Typ) then\n-            Decl := Predef_Deep_Spec (Loc, Tag_Typ, TSS_Deep_Adjust, True);\n+            Adj_Call := Empty;\n+            Decl     := Predef_Deep_Spec (Loc, Tag_Typ, TSS_Deep_Adjust, True);\n \n             if Is_Controlled (Tag_Typ) then\n-               Set_Handled_Statement_Sequence (Decl,\n-                 Make_Handled_Sequence_Of_Statements (Loc,\n-                   Statements => New_List (\n-                     Make_Adjust_Call (\n-                       Obj_Ref => Make_Identifier (Loc, Name_V),\n-                       Typ     => Tag_Typ))));\n+               Adj_Call :=\n+                 Make_Adjust_Call (\n+                   Obj_Ref => Make_Identifier (Loc, Name_V),\n+                   Typ     => Tag_Typ);\n+            end if;\n \n-            else\n-               Set_Handled_Statement_Sequence (Decl,\n-                 Make_Handled_Sequence_Of_Statements (Loc,\n-                   Statements => New_List (\n-                     Make_Null_Statement (Loc))));\n+            if No (Adj_Call) then\n+               Adj_Call := Make_Null_Statement (Loc);\n             end if;\n \n+            Set_Handled_Statement_Sequence (Decl,\n+              Make_Handled_Sequence_Of_Statements (Loc,\n+                Statements => New_List (Adj_Call)));\n+\n             Append_To (Res, Decl);\n          end if;\n \n-         Decl := Predef_Deep_Spec (Loc, Tag_Typ, TSS_Deep_Finalize, True);\n+         Fin_Call := Empty;\n+         Decl     := Predef_Deep_Spec (Loc, Tag_Typ, TSS_Deep_Finalize, True);\n \n          if Is_Controlled (Tag_Typ) then\n-            Set_Handled_Statement_Sequence (Decl,\n-              Make_Handled_Sequence_Of_Statements (Loc,\n-                Statements => New_List (\n-                  Make_Final_Call\n-                    (Obj_Ref => Make_Identifier (Loc, Name_V),\n-                     Typ     => Tag_Typ))));\n+            Fin_Call :=\n+              Make_Final_Call\n+                (Obj_Ref => Make_Identifier (Loc, Name_V),\n+                 Typ     => Tag_Typ);\n+         end if;\n \n-         else\n-            Set_Handled_Statement_Sequence (Decl,\n-              Make_Handled_Sequence_Of_Statements (Loc,\n-                Statements => New_List (Make_Null_Statement (Loc))));\n+         if No (Fin_Call) then\n+            Fin_Call := Make_Null_Statement (Loc);\n          end if;\n \n+         Set_Handled_Statement_Sequence (Decl,\n+           Make_Handled_Sequence_Of_Statements (Loc,\n+             Statements => New_List (Fin_Call)));\n+\n          Append_To (Res, Decl);\n       end if;\n "}, {"sha": "82419259d664fcb1ebe78dbe07914c23da5376e1", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -632,6 +632,13 @@ package body Exp_Ch4 is\n                       Make_Explicit_Dereference (Loc, New_Copy (Obj_Ref)),\n                     Typ     => DesigT);\n \n+               --  Guard against a missing [Deep_]Finalize when the designated\n+               --  type was not properly frozen.\n+\n+               if No (Fin_Call) then\n+                  Fin_Call := Make_Null_Statement (Loc);\n+               end if;\n+\n                --  When the target or profile supports deallocation, wrap the\n                --  finalization call in a block to ensure proper deallocation\n                --  even if finalization fails. Generate:\n@@ -722,6 +729,7 @@ package body Exp_Ch4 is\n       Aggr_In_Place : constant Boolean   := Is_Delayed_Aggregate (Exp);\n       Indic         : constant Node_Id   := Subtype_Mark (Expression (N));\n       T             : constant Entity_Id := Entity (Indic);\n+      Adj_Call      : Node_Id;\n       Node          : Node_Id;\n       Tag_Assign    : Node_Id;\n       Temp          : Entity_Id;\n@@ -1060,13 +1068,17 @@ package body Exp_Ch4 is\n             --  the designated type can be an ancestor of the subtype mark of\n             --  the allocator.\n \n-            Insert_Action (N,\n+            Adj_Call :=\n               Make_Adjust_Call\n                 (Obj_Ref =>\n                    Unchecked_Convert_To (T,\n                      Make_Explicit_Dereference (Loc,\n                        Prefix => New_Occurrence_Of (Temp, Loc))),\n-                 Typ     => T));\n+                 Typ     => T);\n+\n+            if Present (Adj_Call) then\n+               Insert_Action (N, Adj_Call);\n+            end if;\n          end if;\n \n          --  Note: the accessibility check must be inserted after the call to\n@@ -4315,6 +4327,7 @@ package body Exp_Ch4 is\n          Discr     : Elmt_Id;\n          Init      : Entity_Id;\n          Init_Arg1 : Node_Id;\n+         Init_Call : Node_Id;\n          Temp_Decl : Node_Id;\n          Temp_Type : Entity_Id;\n \n@@ -4635,10 +4648,17 @@ package body Exp_Ch4 is\n                   --  Generate:\n                   --    [Deep_]Initialize (Init_Arg1);\n \n-                  Insert_Action (N,\n+                  Init_Call :=\n                     Make_Init_Call\n                       (Obj_Ref => New_Copy_Tree (Init_Arg1),\n-                       Typ     => T));\n+                       Typ     => T);\n+\n+                  --  Guard against a missing [Deep_]Initialize when the\n+                  --  designated type was not properly frozen.\n+\n+                  if Present (Init_Call) then\n+                     Insert_Action (N, Init_Call);\n+                  end if;\n                end if;\n \n                Rewrite (N, New_Occurrence_Of (Temp, Loc));"}, {"sha": "e6f076eee1d198a40474a080ab64561867ce2c83", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -4676,7 +4676,9 @@ package body Exp_Ch5 is\n                                        and then not Comp_Asn\n                                        and then not No_Ctrl_Actions (N)\n                                        and then Tagged_Type_Expansion;\n-      Tag_Id  : Entity_Id;\n+      Adj_Call : Node_Id;\n+      Fin_Call : Node_Id;\n+      Tag_Id   : Entity_Id;\n \n    begin\n       --  Finalize the target of the assignment when controlled\n@@ -4709,10 +4711,14 @@ package body Exp_Ch5 is\n          null;\n \n       else\n-         Append_To (Res,\n+         Fin_Call :=\n            Make_Final_Call\n              (Obj_Ref => Duplicate_Subexpr_No_Checks (L),\n-              Typ     => Etype (L)));\n+              Typ     => Etype (L));\n+\n+         if Present (Fin_Call) then\n+            Append_To (Res, Fin_Call);\n+         end if;\n       end if;\n \n       --  Save the Tag in a local variable Tag_Id\n@@ -4765,10 +4771,14 @@ package body Exp_Ch5 is\n       --  init proc since it is an initialization more than an assignment).\n \n       if Ctrl_Act then\n-         Append_To (Res,\n+         Adj_Call :=\n            Make_Adjust_Call\n              (Obj_Ref => Duplicate_Subexpr_Move_Checks (L),\n-              Typ     => Etype (L)));\n+              Typ     => Etype (L));\n+\n+         if Present (Adj_Call) then\n+            Append_To (Res, Adj_Call);\n+         end if;\n       end if;\n \n       return Res;"}, {"sha": "b4caa367b48cc531589a966fcfc62f060b237f2d", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 457, "deletions": 352, "changes": 809, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -3062,6 +3062,13 @@ package body Exp_Ch7 is\n                 Obj_Ref => Obj_Ref,\n                 Typ     => Obj_Typ);\n \n+            --  Guard against a missing [Deep_]Finalize when the object type\n+            --  was not properly frozen.\n+\n+            if No (Fin_Call) then\n+               Fin_Call := Make_Null_Statement (Loc);\n+            end if;\n+\n             --  For CodePeer, the exception handlers normally generated here\n             --  generate complex flowgraphs which result in capacity problems.\n             --  Omitting these handlers for CodePeer is justified as follows:\n@@ -6905,10 +6912,12 @@ package body Exp_Ch7 is\n    is\n       Loc    : constant Source_Ptr := Sloc (Obj_Ref);\n       Adj_Id : Entity_Id := Empty;\n-      Ref    : Node_Id   := Obj_Ref;\n+      Ref    : Node_Id;\n       Utyp   : Entity_Id;\n \n    begin\n+      Ref := Obj_Ref;\n+\n       --  Recover the proper type which contains Deep_Adjust\n \n       if Is_Class_Wide_Type (Typ) then\n@@ -6922,7 +6931,7 @@ package body Exp_Ch7 is\n \n       --  Deal with untagged derivation of private views\n \n-      if Is_Untagged_Derivation (Typ) then\n+      if Present (Utyp) and then Is_Untagged_Derivation (Typ) then\n          Utyp := Underlying_Type (Root_Type (Base_Type (Typ)));\n          Ref  := Unchecked_Convert_To (Utyp, Ref);\n          Set_Assignment_OK (Ref);\n@@ -6931,14 +6940,21 @@ package body Exp_Ch7 is\n       --  When dealing with the completion of a private type, use the base\n       --  type instead.\n \n-      if Utyp /= Base_Type (Utyp) then\n+      if Present (Utyp) and then Utyp /= Base_Type (Utyp) then\n          pragma Assert (Is_Private_Type (Typ));\n \n          Utyp := Base_Type (Utyp);\n          Ref  := Unchecked_Convert_To (Utyp, Ref);\n       end if;\n \n-      if Skip_Self then\n+      --  The underlying type may not be present due to a missing full view. In\n+      --  this case freezing did not take place and there is no [Deep_]Adjust\n+      --  primitive to call.\n+\n+      if No (Utyp) then\n+         return Empty;\n+\n+      elsif Skip_Self then\n          if Has_Controlled_Component (Utyp) then\n             if Is_Tagged_Type (Utyp) then\n                Adj_Id := Find_Optional_Prim_Op (Utyp, TSS_Deep_Adjust);\n@@ -6998,7 +7014,7 @@ package body Exp_Ch7 is\n          return\n            Make_Call (Loc,\n              Proc_Id   => Adj_Id,\n-             Param     => New_Copy_Tree (Ref),\n+             Param     => Ref,\n              Skip_Self => Skip_Self);\n       else\n          return Empty;\n@@ -7171,22 +7187,12 @@ package body Exp_Ch7 is\n       function Build_Adjust_Or_Finalize_Statements\n         (Typ : Entity_Id) return List_Id\n       is\n-         Comp_Typ       : constant Entity_Id  := Component_Type (Typ);\n-         Exceptions_OK  : constant Boolean    :=\n-                            not Restriction_Active (No_Exception_Propagation);\n-         Index_List     : constant List_Id    := New_List;\n-         Loc            : constant Source_Ptr := Sloc (Typ);\n-         Num_Dims       : constant Int        := Number_Dimensions (Typ);\n-\n-         Finalizer_Decls : List_Id := No_List;\n-         Finalizer_Data  : Finalization_Exception_Data;\n-         Call            : Node_Id;\n-         Comp_Ref        : Node_Id;\n-         Core_Loop       : Node_Id;\n-         Dim             : Int;\n-         J               : Entity_Id;\n-         Loop_Id         : Entity_Id;\n-         Stmts           : List_Id;\n+         Comp_Typ      : constant Entity_Id  := Component_Type (Typ);\n+         Exceptions_OK : constant Boolean    :=\n+                           not Restriction_Active (No_Exception_Propagation);\n+         Index_List    : constant List_Id    := New_List;\n+         Loc           : constant Source_Ptr := Sloc (Typ);\n+         Num_Dims      : constant Int        := Number_Dimensions (Typ);\n \n          procedure Build_Indexes;\n          --  Generate the indexes used in the dimension loops\n@@ -7206,13 +7212,26 @@ package body Exp_Ch7 is\n             end loop;\n          end Build_Indexes;\n \n+         --  Local variables\n+\n+         Final_Decls : List_Id := No_List;\n+         Final_Data  : Finalization_Exception_Data;\n+         Block       : Node_Id;\n+         Call        : Node_Id;\n+         Comp_Ref    : Node_Id;\n+         Core_Loop   : Node_Id;\n+         Dim         : Int;\n+         J           : Entity_Id;\n+         Loop_Id     : Entity_Id;\n+         Stmts       : List_Id;\n+\n       --  Start of processing for Build_Adjust_Or_Finalize_Statements\n \n       begin\n-         Finalizer_Decls := New_List;\n+         Final_Decls := New_List;\n \n          Build_Indexes;\n-         Build_Object_Declarations (Finalizer_Data, Finalizer_Decls, Loc);\n+         Build_Object_Declarations (Final_Data, Final_Decls, Loc);\n \n          Comp_Ref :=\n            Make_Indexed_Component (Loc,\n@@ -7233,132 +7252,133 @@ package body Exp_Ch7 is\n             Call := Make_Final_Call (Obj_Ref => Comp_Ref, Typ => Comp_Typ);\n          end if;\n \n-         --  Generate the block which houses the adjust or finalize call:\n-\n-         --    begin\n-         --       <adjust or finalize call>\n+         if Present (Call) then\n \n-         --    exception\n-         --       when others =>\n-         --          if not Raised then\n-         --             Raised := True;\n-         --             Save_Occurrence (E, Get_Current_Excep.all.all);\n-         --          end if;\n-         --    end;\n+            --  Generate the block which houses the adjust or finalize call:\n \n-         if Exceptions_OK then\n-            Core_Loop :=\n-              Make_Block_Statement (Loc,\n-                Handled_Statement_Sequence =>\n-                  Make_Handled_Sequence_Of_Statements (Loc,\n-                    Statements         => New_List (Call),\n-                    Exception_Handlers => New_List (\n-                      Build_Exception_Handler (Finalizer_Data))));\n-         else\n-            Core_Loop := Call;\n-         end if;\n-\n-         --  Generate the dimension loops starting from the innermost one\n+            --    begin\n+            --       <adjust or finalize call>\n \n-         --    for Jnn in [reverse] V'Range (Dim) loop\n-         --       <core loop>\n-         --    end loop;\n+            --    exception\n+            --       when others =>\n+            --          if not Raised then\n+            --             Raised := True;\n+            --             Save_Occurrence (E, Get_Current_Excep.all.all);\n+            --          end if;\n+            --    end;\n \n-         J := Last (Index_List);\n-         Dim := Num_Dims;\n-         while Present (J) and then Dim > 0 loop\n-            Loop_Id := J;\n-            Prev (J);\n-            Remove (Loop_Id);\n+            if Exceptions_OK then\n+               Core_Loop :=\n+                 Make_Block_Statement (Loc,\n+                   Handled_Statement_Sequence =>\n+                     Make_Handled_Sequence_Of_Statements (Loc,\n+                       Statements         => New_List (Call),\n+                       Exception_Handlers => New_List (\n+                         Build_Exception_Handler (Final_Data))));\n+            else\n+               Core_Loop := Call;\n+            end if;\n \n-            Core_Loop :=\n-              Make_Loop_Statement (Loc,\n-                Iteration_Scheme =>\n-                  Make_Iteration_Scheme (Loc,\n-                    Loop_Parameter_Specification =>\n-                      Make_Loop_Parameter_Specification (Loc,\n-                        Defining_Identifier         => Loop_Id,\n-                        Discrete_Subtype_Definition =>\n-                          Make_Attribute_Reference (Loc,\n-                            Prefix         => Make_Identifier (Loc, Name_V),\n-                            Attribute_Name => Name_Range,\n-                            Expressions    => New_List (\n-                              Make_Integer_Literal (Loc, Dim))),\n+            --  Generate the dimension loops starting from the innermost one\n+\n+            --    for Jnn in [reverse] V'Range (Dim) loop\n+            --       <core loop>\n+            --    end loop;\n+\n+            J := Last (Index_List);\n+            Dim := Num_Dims;\n+            while Present (J) and then Dim > 0 loop\n+               Loop_Id := J;\n+               Prev (J);\n+               Remove (Loop_Id);\n+\n+               Core_Loop :=\n+                 Make_Loop_Statement (Loc,\n+                   Iteration_Scheme =>\n+                     Make_Iteration_Scheme (Loc,\n+                       Loop_Parameter_Specification =>\n+                         Make_Loop_Parameter_Specification (Loc,\n+                           Defining_Identifier         => Loop_Id,\n+                           Discrete_Subtype_Definition =>\n+                             Make_Attribute_Reference (Loc,\n+                               Prefix         => Make_Identifier (Loc, Name_V),\n+                               Attribute_Name => Name_Range,\n+                               Expressions    => New_List (\n+                                 Make_Integer_Literal (Loc, Dim))),\n+\n+                           Reverse_Present             =>\n+                             Prim = Finalize_Case)),\n+\n+                   Statements       => New_List (Core_Loop),\n+                   End_Label        => Empty);\n+\n+               Dim := Dim - 1;\n+            end loop;\n \n-                        Reverse_Present => Prim = Finalize_Case)),\n+            --  Generate the block which contains the core loop, declarations\n+            --  of the abort flag, the exception occurrence, the raised flag\n+            --  and the conditional raise:\n \n-                Statements => New_List (Core_Loop),\n-                End_Label  => Empty);\n+            --    declare\n+            --       Abort  : constant Boolean := Triggered_By_Abort;\n+            --         <or>\n+            --       Abort  : constant Boolean := False;  --  no abort\n \n-            Dim := Dim - 1;\n-         end loop;\n+            --       E      : Exception_Occurrence;\n+            --       Raised : Boolean := False;\n \n-         --  Generate the block which contains the core loop, the declarations\n-         --  of the abort flag, the exception occurrence, the raised flag and\n-         --  the conditional raise:\n+            --    begin\n+            --       <core loop>\n \n-         --    declare\n-         --       Abort  : constant Boolean := Triggered_By_Abort;\n-         --         <or>\n-         --       Abort  : constant Boolean := False;  --  no abort\n+            --       if Raised and then not Abort then\n+            --          Raise_From_Controlled_Operation (E);\n+            --       end if;\n+            --    end;\n \n-         --       E      : Exception_Occurrence;\n-         --       Raised : Boolean := False;\n+            Stmts := New_List (Core_Loop);\n \n-         --    begin\n-         --       <core loop>\n+            if Exceptions_OK then\n+               Append_To (Stmts, Build_Raise_Statement (Final_Data));\n+            end if;\n \n-         --       if Raised and then not Abort then\n-         --          Raise_From_Controlled_Operation (E);\n-         --       end if;\n-         --    end;\n+            Block :=\n+              Make_Block_Statement (Loc,\n+                Declarations               => Final_Decls,\n+                Handled_Statement_Sequence =>\n+                  Make_Handled_Sequence_Of_Statements (Loc,\n+                    Statements => Stmts));\n \n-         Stmts := New_List (Core_Loop);\n+         --  Otherwise previous errors or a missing full view may prevent the\n+         --  proper freezing of the component type. If this is the case, there\n+         --  is no [Deep_]Adjust or [Deep_]Finalize primitive to call.\n \n-         if Exceptions_OK then\n-            Append_To (Stmts, Build_Raise_Statement (Finalizer_Data));\n+         else\n+            Block := Make_Null_Statement (Loc);\n          end if;\n \n-         return\n-           New_List (\n-             Make_Block_Statement (Loc,\n-               Declarations               =>\n-                 Finalizer_Decls,\n-               Handled_Statement_Sequence =>\n-                 Make_Handled_Sequence_Of_Statements (Loc, Stmts)));\n+         return New_List (Block);\n       end Build_Adjust_Or_Finalize_Statements;\n \n       ---------------------------------\n       -- Build_Initialize_Statements --\n       ---------------------------------\n \n       function Build_Initialize_Statements (Typ : Entity_Id) return List_Id is\n-         Comp_Typ       : constant Entity_Id  := Component_Type (Typ);\n-         Exceptions_OK  : constant Boolean    :=\n-                            not Restriction_Active (No_Exception_Propagation);\n-         Final_List     : constant List_Id    := New_List;\n-         Index_List     : constant List_Id    := New_List;\n-         Loc            : constant Source_Ptr := Sloc (Typ);\n-         Num_Dims       : constant Int        := Number_Dimensions (Typ);\n-\n-         Counter_Id      : Entity_Id;\n-         Dim             : Int;\n-         F               : Node_Id;\n-         Fin_Stmt        : Node_Id;\n-         Final_Block     : Node_Id;\n-         Final_Loop      : Node_Id;\n-         Finalizer_Data  : Finalization_Exception_Data;\n-         Finalizer_Decls : List_Id := No_List;\n-         Init_Loop       : Node_Id;\n-         J               : Node_Id;\n-         Loop_Id         : Node_Id;\n-         Stmts           : List_Id;\n+         Comp_Typ      : constant Entity_Id  := Component_Type (Typ);\n+         Exceptions_OK : constant Boolean    :=\n+                           not Restriction_Active (No_Exception_Propagation);\n+         Final_List    : constant List_Id    := New_List;\n+         Index_List    : constant List_Id    := New_List;\n+         Loc           : constant Source_Ptr := Sloc (Typ);\n+         Num_Dims      : constant Int        := Number_Dimensions (Typ);\n \n-         function Build_Counter_Assignment return Node_Id;\n+         function Build_Assignment (Counter_Id : Entity_Id) return Node_Id;\n          --  Generate the following assignment:\n          --    Counter := V'Length (1) *\n          --               ...\n          --               V'Length (N) - Counter;\n+         --\n+         --  Counter_Id denotes the entity of the counter.\n \n          function Build_Finalization_Call return Node_Id;\n          --  Generate a deep finalization call for an array element\n@@ -7370,11 +7390,11 @@ package body Exp_Ch7 is\n          function Build_Initialization_Call return Node_Id;\n          --  Generate a deep initialization call for an array element\n \n-         ------------------------------\n-         -- Build_Counter_Assignment --\n-         ------------------------------\n+         ----------------------\n+         -- Build_Assignment --\n+         ----------------------\n \n-         function Build_Counter_Assignment return Node_Id is\n+         function Build_Assignment (Counter_Id : Entity_Id) return Node_Id is\n             Dim  : Int;\n             Expr : Node_Id;\n \n@@ -7417,7 +7437,7 @@ package body Exp_Ch7 is\n                   Make_Op_Subtract (Loc,\n                     Left_Opnd  => Expr,\n                     Right_Opnd => New_Occurrence_Of (Counter_Id, Loc)));\n-         end Build_Counter_Assignment;\n+         end Build_Assignment;\n \n          -----------------------------\n          -- Build_Finalization_Call --\n@@ -7476,14 +7496,31 @@ package body Exp_Ch7 is\n             return Make_Init_Call (Obj_Ref => Comp_Ref, Typ => Comp_Typ);\n          end Build_Initialization_Call;\n \n+         --  Local variables\n+\n+         Counter_Id  : Entity_Id;\n+         Dim         : Int;\n+         F           : Node_Id;\n+         Fin_Stmt    : Node_Id;\n+         Final_Block : Node_Id;\n+         Final_Data  : Finalization_Exception_Data;\n+         Final_Decls : List_Id := No_List;\n+         Final_Loop  : Node_Id;\n+         Init_Block  : Node_Id;\n+         Init_Call   : Node_Id;\n+         Init_Loop   : Node_Id;\n+         J           : Node_Id;\n+         Loop_Id     : Node_Id;\n+         Stmts       : List_Id;\n+\n       --  Start of processing for Build_Initialize_Statements\n \n       begin\n-         Counter_Id := Make_Temporary (Loc, 'C');\n-         Finalizer_Decls := New_List;\n+         Counter_Id  := Make_Temporary (Loc, 'C');\n+         Final_Decls := New_List;\n \n          Build_Indexes;\n-         Build_Object_Declarations (Finalizer_Data, Finalizer_Decls, Loc);\n+         Build_Object_Declarations (Final_Data, Final_Decls, Loc);\n \n          --  Generate the block which houses the finalization call, the index\n          --  guard and the handler which triggers Program_Error later on.\n@@ -7502,115 +7539,124 @@ package body Exp_Ch7 is\n          --       end;\n          --    end if;\n \n-         if Exceptions_OK then\n-            Fin_Stmt :=\n-              Make_Block_Statement (Loc,\n-                Handled_Statement_Sequence =>\n-                  Make_Handled_Sequence_Of_Statements (Loc,\n-                    Statements         => New_List (Build_Finalization_Call),\n-                    Exception_Handlers => New_List (\n-                      Build_Exception_Handler (Finalizer_Data))));\n-         else\n-            Fin_Stmt := Build_Finalization_Call;\n-         end if;\n-\n-         --  This is the core of the loop, the dimension iterators are added\n-         --  one by one in reverse.\n-\n-         Final_Loop :=\n-           Make_If_Statement (Loc,\n-             Condition =>\n-               Make_Op_Gt (Loc,\n-                 Left_Opnd  => New_Occurrence_Of (Counter_Id, Loc),\n-                 Right_Opnd => Make_Integer_Literal (Loc, 0)),\n-\n-             Then_Statements => New_List (\n-               Make_Assignment_Statement (Loc,\n-                 Name       => New_Occurrence_Of (Counter_Id, Loc),\n-                 Expression =>\n-                   Make_Op_Subtract (Loc,\n-                     Left_Opnd  => New_Occurrence_Of (Counter_Id, Loc),\n-                     Right_Opnd => Make_Integer_Literal (Loc, 1)))),\n-\n-             Else_Statements => New_List (Fin_Stmt));\n-\n-         --  Generate all finalization loops starting from the innermost\n-         --  dimension.\n+         Fin_Stmt := Build_Finalization_Call;\n \n-         --    for Fnn in reverse V'Range (Dim) loop\n-         --       <final loop>\n-         --    end loop;\n+         if Present (Fin_Stmt) then\n+            if Exceptions_OK then\n+               Fin_Stmt :=\n+                 Make_Block_Statement (Loc,\n+                   Handled_Statement_Sequence =>\n+                     Make_Handled_Sequence_Of_Statements (Loc,\n+                       Statements         => New_List (Fin_Stmt),\n+                       Exception_Handlers => New_List (\n+                         Build_Exception_Handler (Final_Data))));\n+            end if;\n \n-         F := Last (Final_List);\n-         Dim := Num_Dims;\n-         while Present (F) and then Dim > 0 loop\n-            Loop_Id := F;\n-            Prev (F);\n-            Remove (Loop_Id);\n+            --  This is the core of the loop, the dimension iterators are added\n+            --  one by one in reverse.\n \n             Final_Loop :=\n-              Make_Loop_Statement (Loc,\n-                Iteration_Scheme =>\n-                  Make_Iteration_Scheme (Loc,\n-                    Loop_Parameter_Specification =>\n-                      Make_Loop_Parameter_Specification (Loc,\n-                        Defining_Identifier => Loop_Id,\n-                        Discrete_Subtype_Definition =>\n-                          Make_Attribute_Reference (Loc,\n-                            Prefix         => Make_Identifier (Loc, Name_V),\n-                            Attribute_Name => Name_Range,\n-                            Expressions    => New_List (\n-                              Make_Integer_Literal (Loc, Dim))),\n+              Make_If_Statement (Loc,\n+                Condition =>\n+                  Make_Op_Gt (Loc,\n+                    Left_Opnd  => New_Occurrence_Of (Counter_Id, Loc),\n+                    Right_Opnd => Make_Integer_Literal (Loc, 0)),\n+\n+                Then_Statements => New_List (\n+                  Make_Assignment_Statement (Loc,\n+                    Name       => New_Occurrence_Of (Counter_Id, Loc),\n+                    Expression =>\n+                      Make_Op_Subtract (Loc,\n+                        Left_Opnd  => New_Occurrence_Of (Counter_Id, Loc),\n+                        Right_Opnd => Make_Integer_Literal (Loc, 1)))),\n+\n+                Else_Statements => New_List (Fin_Stmt));\n+\n+            --  Generate all finalization loops starting from the innermost\n+            --  dimension.\n+\n+            --    for Fnn in reverse V'Range (Dim) loop\n+            --       <final loop>\n+            --    end loop;\n+\n+            F := Last (Final_List);\n+            Dim := Num_Dims;\n+            while Present (F) and then Dim > 0 loop\n+               Loop_Id := F;\n+               Prev (F);\n+               Remove (Loop_Id);\n+\n+               Final_Loop :=\n+                 Make_Loop_Statement (Loc,\n+                   Iteration_Scheme =>\n+                     Make_Iteration_Scheme (Loc,\n+                       Loop_Parameter_Specification =>\n+                         Make_Loop_Parameter_Specification (Loc,\n+                           Defining_Identifier         => Loop_Id,\n+                           Discrete_Subtype_Definition =>\n+                             Make_Attribute_Reference (Loc,\n+                               Prefix         => Make_Identifier (Loc, Name_V),\n+                               Attribute_Name => Name_Range,\n+                               Expressions    => New_List (\n+                                 Make_Integer_Literal (Loc, Dim))),\n+\n+                           Reverse_Present             => True)),\n+\n+                   Statements       => New_List (Final_Loop),\n+                   End_Label        => Empty);\n+\n+               Dim := Dim - 1;\n+            end loop;\n \n-                        Reverse_Present => True)),\n+            --  Generate the block which contains the finalization loops, the\n+            --  declarations of the abort flag, the exception occurrence, the\n+            --  raised flag and the conditional raise.\n \n-                Statements => New_List (Final_Loop),\n-                End_Label => Empty);\n+            --    declare\n+            --       Abort  : constant Boolean := Triggered_By_Abort;\n+            --         <or>\n+            --       Abort  : constant Boolean := False;  --  no abort\n \n-            Dim := Dim - 1;\n-         end loop;\n+            --       E      : Exception_Occurrence;\n+            --       Raised : Boolean := False;\n \n-         --  Generate the block which contains the finalization loops, the\n-         --  declarations of the abort flag, the exception occurrence, the\n-         --  raised flag and the conditional raise.\n+            --    begin\n+            --       Counter :=\n+            --         V'Length (1) *\n+            --         ...\n+            --         V'Length (N) - Counter;\n \n-         --    declare\n-         --       Abort  : constant Boolean := Triggered_By_Abort;\n-         --         <or>\n-         --       Abort  : constant Boolean := False;  --  no abort\n+            --       <final loop>\n \n-         --       E      : Exception_Occurrence;\n-         --       Raised : Boolean := False;\n+            --       if Raised and then not Abort then\n+            --          Raise_From_Controlled_Operation (E);\n+            --       end if;\n \n-         --    begin\n-         --       Counter :=\n-         --         V'Length (1) *\n-         --         ...\n-         --         V'Length (N) - Counter;\n+            --       raise;\n+            --    end;\n \n-         --       <final loop>\n+            Stmts := New_List (Build_Assignment (Counter_Id), Final_Loop);\n \n-         --       if Raised and then not Abort then\n-         --          Raise_From_Controlled_Operation (E);\n-         --       end if;\n+            if Exceptions_OK then\n+               Append_To (Stmts, Build_Raise_Statement (Final_Data));\n+               Append_To (Stmts, Make_Raise_Statement (Loc));\n+            end if;\n \n-         --       raise;\n-         --    end;\n+            Final_Block :=\n+              Make_Block_Statement (Loc,\n+                Declarations               => Final_Decls,\n+                Handled_Statement_Sequence =>\n+                  Make_Handled_Sequence_Of_Statements (Loc,\n+                    Statements => Stmts));\n \n-         Stmts := New_List (Build_Counter_Assignment, Final_Loop);\n+         --  Otherwise previous errors or a missing full view may prevent the\n+         --  proper freezing of the component type. If this is the case, there\n+         --  is no [Deep_]Finalize primitive to call.\n \n-         if Exceptions_OK then\n-            Append_To (Stmts, Build_Raise_Statement (Finalizer_Data));\n-            Append_To (Stmts, Make_Raise_Statement (Loc));\n+         else\n+            Final_Block := Make_Null_Statement (Loc);\n          end if;\n \n-         Final_Block :=\n-           Make_Block_Statement (Loc,\n-             Declarations               =>\n-               Finalizer_Decls,\n-             Handled_Statement_Sequence =>\n-               Make_Handled_Sequence_Of_Statements (Loc, Statements => Stmts));\n-\n          --  Generate the block which contains the initialization call and\n          --  the partial finalization code.\n \n@@ -7624,70 +7670,73 @@ package body Exp_Ch7 is\n          --          <finalization code>\n          --    end;\n \n-         Init_Loop :=\n-           Make_Block_Statement (Loc,\n-             Handled_Statement_Sequence =>\n-               Make_Handled_Sequence_Of_Statements (Loc,\n-                 Statements         => New_List (Build_Initialization_Call),\n-                 Exception_Handlers => New_List (\n-                   Make_Exception_Handler (Loc,\n-                     Exception_Choices => New_List (Make_Others_Choice (Loc)),\n-                     Statements        => New_List (Final_Block)))));\n-\n-         Append_To (Statements (Handled_Statement_Sequence (Init_Loop)),\n-           Make_Assignment_Statement (Loc,\n-             Name       => New_Occurrence_Of (Counter_Id, Loc),\n-             Expression =>\n-               Make_Op_Add (Loc,\n-                 Left_Opnd  => New_Occurrence_Of (Counter_Id, Loc),\n-                 Right_Opnd => Make_Integer_Literal (Loc, 1))));\n-\n-         --  Generate all initialization loops starting from the innermost\n-         --  dimension.\n-\n-         --    for Jnn in V'Range (Dim) loop\n-         --       <init loop>\n-         --    end loop;\n-\n-         J := Last (Index_List);\n-         Dim := Num_Dims;\n-         while Present (J) and then Dim > 0 loop\n-            Loop_Id := J;\n-            Prev (J);\n-            Remove (Loop_Id);\n+         Init_Call := Build_Initialization_Call;\n \n+         if Present (Init_Call) then\n             Init_Loop :=\n-              Make_Loop_Statement (Loc,\n-                Iteration_Scheme =>\n-                  Make_Iteration_Scheme (Loc,\n-                    Loop_Parameter_Specification =>\n-                      Make_Loop_Parameter_Specification (Loc,\n-                        Defining_Identifier => Loop_Id,\n-                        Discrete_Subtype_Definition =>\n-                          Make_Attribute_Reference (Loc,\n-                            Prefix         => Make_Identifier (Loc, Name_V),\n-                            Attribute_Name => Name_Range,\n-                            Expressions    => New_List (\n-                              Make_Integer_Literal (Loc, Dim))))),\n-\n-                Statements => New_List (Init_Loop),\n-                End_Label => Empty);\n+              Make_Block_Statement (Loc,\n+                Handled_Statement_Sequence =>\n+                  Make_Handled_Sequence_Of_Statements (Loc,\n+                    Statements         => New_List (Init_Call),\n+                    Exception_Handlers => New_List (\n+                      Make_Exception_Handler (Loc,\n+                        Exception_Choices => New_List (\n+                          Make_Others_Choice (Loc)),\n+                        Statements        => New_List (Final_Block)))));\n \n-            Dim := Dim - 1;\n-         end loop;\n+            Append_To (Statements (Handled_Statement_Sequence (Init_Loop)),\n+              Make_Assignment_Statement (Loc,\n+                Name       => New_Occurrence_Of (Counter_Id, Loc),\n+                Expression =>\n+                  Make_Op_Add (Loc,\n+                    Left_Opnd  => New_Occurrence_Of (Counter_Id, Loc),\n+                    Right_Opnd => Make_Integer_Literal (Loc, 1))));\n+\n+            --  Generate all initialization loops starting from the innermost\n+            --  dimension.\n+\n+            --    for Jnn in V'Range (Dim) loop\n+            --       <init loop>\n+            --    end loop;\n+\n+            J := Last (Index_List);\n+            Dim := Num_Dims;\n+            while Present (J) and then Dim > 0 loop\n+               Loop_Id := J;\n+               Prev (J);\n+               Remove (Loop_Id);\n+\n+               Init_Loop :=\n+                 Make_Loop_Statement (Loc,\n+                   Iteration_Scheme =>\n+                     Make_Iteration_Scheme (Loc,\n+                       Loop_Parameter_Specification =>\n+                         Make_Loop_Parameter_Specification (Loc,\n+                           Defining_Identifier => Loop_Id,\n+                           Discrete_Subtype_Definition =>\n+                             Make_Attribute_Reference (Loc,\n+                               Prefix         => Make_Identifier (Loc, Name_V),\n+                               Attribute_Name => Name_Range,\n+                               Expressions    => New_List (\n+                                 Make_Integer_Literal (Loc, Dim))))),\n+\n+                   Statements => New_List (Init_Loop),\n+                   End_Label => Empty);\n+\n+               Dim := Dim - 1;\n+            end loop;\n \n-         --  Generate the block which contains the counter variable and the\n-         --  initialization loops.\n+            --  Generate the block which contains the counter variable and the\n+            --  initialization loops.\n \n-         --    declare\n-         --       Counter : Integer := 0;\n-         --    begin\n-         --       <init loop>\n-         --    end;\n+            --    declare\n+            --       Counter : Integer := 0;\n+            --    begin\n+            --       <init loop>\n+            --    end;\n \n-         return\n-           New_List (\n-             Make_Block_Statement (Loc,\n+            Init_Block :=\n+              Make_Block_Statement (Loc,\n                Declarations               => New_List (\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Counter_Id,\n@@ -7697,7 +7746,17 @@ package body Exp_Ch7 is\n \n                Handled_Statement_Sequence =>\n                  Make_Handled_Sequence_Of_Statements (Loc,\n-                   Statements => New_List (Init_Loop))));\n+                   Statements => New_List (Init_Loop)));\n+\n+         --  Otherwise previous errors or a missing full view may prevent the\n+         --  proper freezing of the component type. If this is the case, there\n+         --  is no [Deep_]Initialize primitive to call.\n+\n+         else\n+            Init_Block := Make_Null_Statement (Loc);\n+         end if;\n+\n+         return New_List (Init_Block);\n       end Build_Initialize_Statements;\n \n       -----------------------\n@@ -7983,7 +8042,8 @@ package body Exp_Ch7 is\n          Exceptions_OK  : constant Boolean    :=\n                             not Restriction_Active (No_Exception_Propagation);\n          Loc            : constant Source_Ptr := Sloc (Typ);\n-         Typ_Def        : constant Node_Id := Type_Definition (Parent (Typ));\n+         Typ_Def        : constant Node_Id    :=\n+                            Type_Definition (Parent (Typ));\n \n          Bod_Stmts       : List_Id;\n          Finalizer_Data  : Finalization_Exception_Data;\n@@ -8002,12 +8062,7 @@ package body Exp_Ch7 is\n          function Process_Component_List_For_Adjust\n            (Comps : Node_Id) return List_Id\n          is\n-            Stmts     : constant List_Id := New_List;\n-            Decl      : Node_Id;\n-            Decl_Id   : Entity_Id;\n-            Decl_Typ  : Entity_Id;\n-            Has_POC   : Boolean;\n-            Num_Comps : Nat;\n+            Stmts : constant List_Id := New_List;\n \n             procedure Process_Component_For_Adjust (Decl : Node_Id);\n             --  Process the declaration of a single controlled component\n@@ -8017,9 +8072,10 @@ package body Exp_Ch7 is\n             ----------------------------------\n \n             procedure Process_Component_For_Adjust (Decl : Node_Id) is\n-               Id       : constant Entity_Id := Defining_Identifier (Decl);\n-               Typ      : constant Entity_Id := Etype (Id);\n-               Adj_Stmt : Node_Id;\n+               Id  : constant Entity_Id := Defining_Identifier (Decl);\n+               Typ : constant Entity_Id := Etype (Id);\n+\n+               Adj_Call : Node_Id;\n \n             begin\n                --    begin\n@@ -8033,27 +8089,40 @@ package body Exp_Ch7 is\n                --          end if;\n                --    end;\n \n-               Adj_Stmt :=\n+               Adj_Call :=\n                  Make_Adjust_Call (\n                    Obj_Ref =>\n                      Make_Selected_Component (Loc,\n                        Prefix        => Make_Identifier (Loc, Name_V),\n                        Selector_Name => Make_Identifier (Loc, Chars (Id))),\n                    Typ     => Typ);\n \n-               if Exceptions_OK then\n-                  Adj_Stmt :=\n-                    Make_Block_Statement (Loc,\n-                      Handled_Statement_Sequence =>\n-                        Make_Handled_Sequence_Of_Statements (Loc,\n-                          Statements         => New_List (Adj_Stmt),\n-                          Exception_Handlers => New_List (\n-                            Build_Exception_Handler (Finalizer_Data))));\n-               end if;\n+               --  Guard against a missing [Deep_]Adjust when the component\n+               --  type was not properly frozen.\n+\n+               if Present (Adj_Call) then\n+                  if Exceptions_OK then\n+                     Adj_Call :=\n+                       Make_Block_Statement (Loc,\n+                         Handled_Statement_Sequence =>\n+                           Make_Handled_Sequence_Of_Statements (Loc,\n+                             Statements         => New_List (Adj_Call),\n+                             Exception_Handlers => New_List (\n+                               Build_Exception_Handler (Finalizer_Data))));\n+                  end if;\n \n-               Append_To (Stmts, Adj_Stmt);\n+                  Append_To (Stmts, Adj_Call);\n+               end if;\n             end Process_Component_For_Adjust;\n \n+            --  Local variables\n+\n+            Decl      : Node_Id;\n+            Decl_Id   : Entity_Id;\n+            Decl_Typ  : Entity_Id;\n+            Has_POC   : Boolean;\n+            Num_Comps : Nat;\n+\n          --  Start of processing for Process_Component_List_For_Adjust\n \n          begin\n@@ -8389,7 +8458,8 @@ package body Exp_Ch7 is\n          Exceptions_OK  : constant Boolean    :=\n                             not Restriction_Active (No_Exception_Propagation);\n          Loc            : constant Source_Ptr := Sloc (Typ);\n-         Typ_Def        : constant Node_Id := Type_Definition (Parent (Typ));\n+         Typ_Def        : constant Node_Id    :=\n+                            Type_Definition (Parent (Typ));\n \n          Bod_Stmts       : List_Id;\n          Counter         : Int := 0;\n@@ -8447,7 +8517,7 @@ package body Exp_Ch7 is\n             is\n                Id       : constant Entity_Id := Defining_Identifier (Decl);\n                Typ      : constant Entity_Id := Etype (Id);\n-               Fin_Stmt : Node_Id;\n+               Fin_Call : Node_Id;\n \n             begin\n                if Is_Local then\n@@ -8511,25 +8581,30 @@ package body Exp_Ch7 is\n                --          end if;\n                --    end;\n \n-               Fin_Stmt :=\n+               Fin_Call :=\n                  Make_Final_Call\n                    (Obj_Ref =>\n                       Make_Selected_Component (Loc,\n                         Prefix        => Make_Identifier (Loc, Name_V),\n                         Selector_Name => Make_Identifier (Loc, Chars (Id))),\n                     Typ     => Typ);\n \n-               if not Restriction_Active (No_Exception_Propagation) then\n-                  Fin_Stmt :=\n-                    Make_Block_Statement (Loc,\n-                      Handled_Statement_Sequence =>\n-                        Make_Handled_Sequence_Of_Statements (Loc,\n-                          Statements         => New_List (Fin_Stmt),\n-                          Exception_Handlers => New_List (\n-                            Build_Exception_Handler (Finalizer_Data))));\n-               end if;\n+               --  Guard against a missing [Deep_]Finalize when the component\n+               --  type was not properly frozen.\n+\n+               if Present (Fin_Call) then\n+                  if Exceptions_OK then\n+                     Fin_Call :=\n+                       Make_Block_Statement (Loc,\n+                         Handled_Statement_Sequence =>\n+                           Make_Handled_Sequence_Of_Statements (Loc,\n+                             Statements         => New_List (Fin_Call),\n+                             Exception_Handlers => New_List (\n+                               Build_Exception_Handler (Finalizer_Data))));\n+                  end if;\n \n-               Append_To (Stmts, Fin_Stmt);\n+                  Append_To (Stmts, Fin_Call);\n+               end if;\n             end Process_Component_For_Finalize;\n \n          --  Start of processing for Process_Component_List_For_Finalize\n@@ -9061,30 +9136,30 @@ package body Exp_Ch7 is\n       Utyp   : Entity_Id;\n \n    begin\n+      Ref := Obj_Ref;\n+\n       --  Recover the proper type which contains [Deep_]Finalize\n \n       if Is_Class_Wide_Type (Typ) then\n          Utyp := Root_Type (Typ);\n          Atyp := Utyp;\n-         Ref  := Obj_Ref;\n \n       elsif Is_Concurrent_Type (Typ) then\n          Utyp := Corresponding_Record_Type (Typ);\n          Atyp := Empty;\n-         Ref  := Convert_Concurrent (Obj_Ref, Typ);\n+         Ref  := Convert_Concurrent (Ref, Typ);\n \n       elsif Is_Private_Type (Typ)\n         and then Present (Full_View (Typ))\n         and then Is_Concurrent_Type (Full_View (Typ))\n       then\n          Utyp := Corresponding_Record_Type (Full_View (Typ));\n          Atyp := Typ;\n-         Ref  := Convert_Concurrent (Obj_Ref, Full_View (Typ));\n+         Ref  := Convert_Concurrent (Ref, Full_View (Typ));\n \n       else\n          Utyp := Typ;\n          Atyp := Typ;\n-         Ref  := Obj_Ref;\n       end if;\n \n       Utyp := Underlying_Type (Base_Type (Utyp));\n@@ -9113,7 +9188,8 @@ package body Exp_Ch7 is\n       --  their parents. In this case, [Deep_]Finalize can be found in the full\n       --  view of the parent type.\n \n-      if Is_Tagged_Type (Utyp)\n+      if Present (Utyp)\n+        and then Is_Tagged_Type (Utyp)\n         and then Is_Derived_Type (Utyp)\n         and then Is_Empty_Elmt_List (Primitive_Operations (Utyp))\n         and then Is_Private_Type (Etype (Utyp))\n@@ -9127,15 +9203,22 @@ package body Exp_Ch7 is\n       --  When dealing with the completion of a private type, use the base type\n       --  instead.\n \n-      if Utyp /= Base_Type (Utyp) then\n+      if Present (Utyp) and then Utyp /= Base_Type (Utyp) then\n          pragma Assert (Present (Atyp) and then Is_Private_Type (Atyp));\n \n          Utyp := Base_Type (Utyp);\n          Ref  := Unchecked_Convert_To (Utyp, Ref);\n          Set_Assignment_OK (Ref);\n       end if;\n \n-      if Skip_Self then\n+      --  The underlying type may not be present due to a missing full view. In\n+      --  this case freezing did not take place and there is no [Deep_]Finalize\n+      --  primitive to call.\n+\n+      if No (Utyp) then\n+         return Empty;\n+\n+      elsif Skip_Self then\n          if Has_Controlled_Component (Utyp) then\n             if Is_Tagged_Type (Utyp) then\n                Fin_Id := Find_Optional_Prim_Op (Utyp, TSS_Deep_Finalize);\n@@ -9215,7 +9298,7 @@ package body Exp_Ch7 is\n          return\n            Make_Call (Loc,\n              Proc_Id   => Fin_Id,\n-             Param     => New_Copy_Tree (Ref),\n+             Param     => Ref,\n              Skip_Self => Skip_Self);\n       else\n          return Empty;\n@@ -9310,18 +9393,21 @@ package body Exp_Ch7 is\n    ---------------------------------\n \n    function Make_Finalize_Address_Stmts (Typ : Entity_Id) return List_Id is\n-      Loc      : constant Source_Ptr := Sloc (Typ);\n-      Ptr_Typ  : constant Entity_Id  := Make_Temporary (Loc, 'P');\n-      Decls    : List_Id;\n-      Desg_Typ : Entity_Id;\n-      Obj_Expr : Node_Id;\n+      Loc : constant Source_Ptr := Sloc (Typ);\n+\n+      Decls     : List_Id;\n+      Desig_Typ : Entity_Id;\n+      Fin_Block : Node_Id;\n+      Fin_Call  : Node_Id;\n+      Obj_Expr  : Node_Id;\n+      Ptr_Typ   : Entity_Id;\n \n    begin\n       if Is_Array_Type (Typ) then\n          if Is_Constrained (First_Subtype (Typ)) then\n-            Desg_Typ := First_Subtype (Typ);\n+            Desig_Typ := First_Subtype (Typ);\n          else\n-            Desg_Typ := Base_Type (Typ);\n+            Desig_Typ := Base_Type (Typ);\n          end if;\n \n       --  Class-wide types of constrained root types\n@@ -9353,26 +9439,28 @@ package body Exp_Ch7 is\n                Parent_Typ := Underlying_Record_View (Parent_Typ);\n             end if;\n \n-            Desg_Typ := Class_Wide_Type (Underlying_Type (Parent_Typ));\n+            Desig_Typ := Class_Wide_Type (Underlying_Type (Parent_Typ));\n          end;\n \n       --  General case\n \n       else\n-         Desg_Typ := Typ;\n+         Desig_Typ := Typ;\n       end if;\n \n       --  Generate:\n       --    type Ptr_Typ is access all Typ;\n       --    for Ptr_Typ'Storage_Size use 0;\n \n+      Ptr_Typ := Make_Temporary (Loc, 'P');\n+\n       Decls := New_List (\n         Make_Full_Type_Declaration (Loc,\n           Defining_Identifier => Ptr_Typ,\n           Type_Definition     =>\n             Make_Access_To_Object_Definition (Loc,\n               All_Present        => True,\n-              Subtype_Indication => New_Occurrence_Of (Desg_Typ, Loc))),\n+              Subtype_Indication => New_Occurrence_Of (Desig_Typ, Loc))),\n \n         Make_Attribute_Definition_Clause (Loc,\n           Name       => New_Occurrence_Of (Ptr_Typ, Loc),\n@@ -9405,7 +9493,7 @@ package body Exp_Ch7 is\n \n             --  Generate:\n             --    Dnn : constant Storage_Offset :=\n-            --            Desg_Typ'Descriptor_Size / Storage_Unit;\n+            --            Desig_Typ'Descriptor_Size / Storage_Unit;\n \n             Dope_Id := Make_Temporary (Loc, 'D');\n \n@@ -9419,7 +9507,7 @@ package body Exp_Ch7 is\n                   Make_Op_Divide (Loc,\n                     Left_Opnd  =>\n                       Make_Attribute_Reference (Loc,\n-                        Prefix         => New_Occurrence_Of (Desg_Typ, Loc),\n+                        Prefix         => New_Occurrence_Of (Desig_Typ, Loc),\n                         Attribute_Name => Name_Descriptor_Size),\n                     Right_Opnd =>\n                       Make_Integer_Literal (Loc, System_Storage_Unit))));\n@@ -9442,20 +9530,30 @@ package body Exp_Ch7 is\n          end;\n       end if;\n \n-      --  Create the block and the finalization call\n+      Fin_Call :=\n+        Make_Final_Call (\n+          Obj_Ref =>\n+            Make_Explicit_Dereference (Loc,\n+              Prefix => Unchecked_Convert_To (Ptr_Typ, Obj_Expr)),\n+          Typ     => Desig_Typ);\n \n-      return New_List (\n-        Make_Block_Statement (Loc,\n-          Declarations => Decls,\n+      if Present (Fin_Call) then\n+         Fin_Block :=\n+           Make_Block_Statement (Loc,\n+             Declarations               => Decls,\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+                 Statements => New_List (Fin_Call)));\n \n-          Handled_Statement_Sequence =>\n-            Make_Handled_Sequence_Of_Statements (Loc,\n-              Statements => New_List (\n-                Make_Final_Call (\n-                  Obj_Ref =>\n-                    Make_Explicit_Dereference (Loc,\n-                      Prefix => Unchecked_Convert_To (Ptr_Typ, Obj_Expr)),\n-                  Typ => Desg_Typ)))));\n+      --  Otherwise previous errors or a missing full view may prevent the\n+      --  proper freezing of the designated type. If this is the case, there\n+      --  is no [Deep_]Finalize primitive to call.\n+\n+      else\n+         Fin_Block := Make_Null_Statement (Loc);\n+      end if;\n+\n+      return New_List (Fin_Block);\n    end Make_Finalize_Address_Stmts;\n \n    -------------------------------------\n@@ -9530,31 +9628,31 @@ package body Exp_Ch7 is\n       Utyp    : Entity_Id;\n \n    begin\n+      Ref := Obj_Ref;\n+\n       --  Deal with the type and object reference. Depending on the context, an\n       --  object reference may need several conversions.\n \n       if Is_Concurrent_Type (Typ) then\n          Is_Conc := True;\n          Utyp    := Corresponding_Record_Type (Typ);\n-         Ref     := Convert_Concurrent (Obj_Ref, Typ);\n+         Ref     := Convert_Concurrent (Ref, Typ);\n \n       elsif Is_Private_Type (Typ)\n         and then Present (Full_View (Typ))\n         and then Is_Concurrent_Type (Underlying_Type (Typ))\n       then\n          Is_Conc := True;\n          Utyp    := Corresponding_Record_Type (Underlying_Type (Typ));\n-         Ref     := Convert_Concurrent (Obj_Ref, Underlying_Type (Typ));\n+         Ref     := Convert_Concurrent (Ref, Underlying_Type (Typ));\n \n       else\n          Is_Conc := False;\n          Utyp    := Typ;\n-         Ref     := Obj_Ref;\n       end if;\n \n-      Set_Assignment_OK (Ref);\n-\n       Utyp := Underlying_Type (Base_Type (Utyp));\n+      Set_Assignment_OK (Ref);\n \n       --  Deal with untagged derivation of private views\n \n@@ -9571,12 +9669,20 @@ package body Exp_Ch7 is\n       --  completion of a private type. We need to access the base type and\n       --  generate a conversion to it.\n \n-      if Utyp /= Base_Type (Utyp) then\n+      if Present (Utyp) and then Utyp /= Base_Type (Utyp) then\n          pragma Assert (Is_Private_Type (Typ));\n          Utyp := Base_Type (Utyp);\n          Ref  := Unchecked_Convert_To (Utyp, Ref);\n       end if;\n \n+      --  The underlying type may not be present due to a missing full view.\n+      --  In this case freezing did not take place and there is no suitable\n+      --  [Deep_]Initialize primitive to call.\n+\n+      if No (Utyp) then\n+         return Empty;\n+      end if;\n+\n       --  Select the appropriate version of initialize\n \n       if Has_Controlled_Component (Utyp) then\n@@ -9596,8 +9702,7 @@ package body Exp_Ch7 is\n \n       return\n         Make_Procedure_Call_Statement (Loc,\n-          Name =>\n-            New_Occurrence_Of (Proc, Loc),\n+          Name                   => New_Occurrence_Of (Proc, Loc),\n           Parameter_Associations => New_List (Ref));\n    end Make_Init_Call;\n "}, {"sha": "0db3df5f07684c7ba2c4038c0cdc4219f5b07290", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -184,10 +184,11 @@ package Exp_Ch7 is\n       Typ       : Entity_Id;\n       Skip_Self : Boolean := False) return Node_Id;\n    --  Create a call to either Adjust or Deep_Adjust depending on the structure\n-   --  of type Typ. Obj_Ref is an expression with no-side effect (not required\n+   --  of type Typ. Obj_Ref is an expression with no side effects (not required\n    --  to have been previously analyzed) that references the object to be\n    --  adjusted. Typ is the expected type of Obj_Ref. When Skip_Self is set,\n-   --  only the components (if any) are adjusted.\n+   --  only the components (if any) are adjusted. Return Empty if Adjust or\n+   --  Deep_Adjust is not available, possibly due to previous errors.\n \n    function Make_Detach_Call (Obj_Ref : Node_Id) return Node_Id;\n    --  Create a call to unhook an object from an arbitrary list. Obj_Ref is the\n@@ -200,11 +201,13 @@ package Exp_Ch7 is\n      (Obj_Ref   : Node_Id;\n       Typ       : Entity_Id;\n       Skip_Self : Boolean := False) return Node_Id;\n-   --  Create a call to either Finalize or Deep_Finalize depending on the\n-   --  structure of type Typ. Obj_Ref is an expression (with no-side effect\n+   --  Create a call to either Finalize or Deep_Finalize, depending on the\n+   --  structure of type Typ. Obj_Ref is an expression (with no side effects\n    --  and is not required to have been previously analyzed) that references\n    --  the object to be finalized. Typ is the expected type of Obj_Ref. When\n-   --  Skip_Self is set, only the components (if any) are finalized.\n+   --  Skip_Self is set, only the components (if any) are finalized. Return\n+   --  Empty if Finalize or Deep_Finalize is not available, possibly due to\n+   --  previous errors.\n \n    procedure Make_Finalize_Address_Body (Typ : Entity_Id);\n    --  Create the body of TSS routine Finalize_Address if Typ is controlled and\n@@ -215,11 +218,12 @@ package Exp_Ch7 is\n    function Make_Init_Call\n      (Obj_Ref : Node_Id;\n       Typ     : Entity_Id) return Node_Id;\n-   --  Obj_Ref is an expression with no-side effect (not required to have been\n-   --  previously analyzed) that references the object to be initialized. Typ\n-   --  is the expected type of Obj_Ref, which is either a controlled type\n-   --  (Is_Controlled) or a type with controlled components (Has_Controlled_\n-   --  Components).\n+   --  Create a call to either Initialize or Deep_Initialize, depending on the\n+   --  structure of type Typ. Obj_Ref is an expression with no side effects\n+   --  (not required to have been previously analyzed) that references the\n+   --  object to be initialized. Typ is the expected type of Obj_Ref. Return\n+   --  Empty if Initialize or Deep_Initialize is not available, possibly due to\n+   --  previous errors.\n \n    function Make_Handler_For_Ctrl_Operation (Loc : Source_Ptr) return Node_Id;\n    --  Generate an implicit exception handler with an 'others' choice,"}, {"sha": "8ca30b3c3706e0164d3dc7a2500b05f5ff4694de", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -11934,12 +11934,12 @@ package body Exp_Ch9 is\n       --  Add the _Secondary_Stack_Size component if a Secondary_Stack_Size\n       --  rep item is present.\n \n-      if Has_Rep_Item (TaskId, Name_Secondary_Stack_Size,\n-                       Check_Parents => False)\n+      if Has_Rep_Item\n+           (TaskId, Name_Secondary_Stack_Size, Check_Parents => False)\n       then\n          Append_To (Cdecls,\n            Make_Component_Declaration (Loc,\n-             Defining_Identifier =>\n+             Defining_Identifier  =>\n                Make_Defining_Identifier (Loc, Name_uSecondary_Stack_Size),\n \n              Component_Definition =>\n@@ -14149,8 +14149,8 @@ package body Exp_Ch9 is\n       if Restriction_Active (No_Secondary_Stack) then\n          Append_To (Args, Make_Integer_Literal (Loc, 0));\n \n-      elsif Has_Rep_Item (Ttyp, Name_Secondary_Stack_Size,\n-                       Check_Parents => False)\n+      elsif Has_Rep_Item\n+              (Ttyp, Name_Secondary_Stack_Size, Check_Parents => False)\n       then\n          Append_To (Args,\n              Make_Selected_Component (Loc,"}, {"sha": "d400041862bf97052165a540c0fd5678268937dc", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -2943,7 +2943,10 @@ package body Exp_Util is\n             Set_Etype (Obj_Ref, Desig_Typ);\n          end if;\n \n-         Fin_Call := Make_Final_Call (Obj_Ref, Desig_Typ);\n+         Fin_Call :=\n+           Make_Final_Call\n+             (Obj_Ref => Obj_Ref,\n+              Typ     => Desig_Typ);\n \n       --  Otherwise finalize the hook. Generate:\n "}, {"sha": "936e5fe16ee7c54dc7810baa47938f91dcec95f2", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -217,6 +217,10 @@ package body System.Tasking.Restricted.Stages is\n       --  Create_TSD and thus the function returns 0 to suppress the\n       --  creation of the fixed secondary stack in the primary stack.\n \n+      --------------------------\n+      -- Secondary_Stack_Size --\n+      --------------------------\n+\n       function Secondary_Stack_Size return Storage_Elements.Storage_Offset is\n          use System.Storage_Elements;\n          use System.Secondary_Stack;\n@@ -263,15 +267,17 @@ package body System.Tasking.Restricted.Stages is\n       --  execution of its task body, then EO will contain the associated\n       --  exception occurrence. Otherwise, it will contain Null_Occurrence.\n \n+   --  Start of processing for Task_Wrapper\n+\n    begin\n       if not Parameters.Sec_Stack_Dynamic then\n          Self_ID.Common.Compiler_Data.Sec_Stack_Addr :=\n            Secondary_Stack'Address;\n          SST.SS_Init (Secondary_Stack_Address, Integer (Secondary_Stack'Last));\n       end if;\n \n-      --  Initialize low-level TCB components, that\n-      --  cannot be initialized by the creator.\n+      --  Initialize low-level TCB components, that cannot be initialized by\n+      --  the creator.\n \n       Enter_Task (Self_ID);\n "}, {"sha": "7e0bdcb9e305d41d3764ef84422899d3a0cb760d", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -1050,6 +1050,10 @@ package body System.Tasking.Stages is\n       --  Create_TSD and thus the function returns 0 to suppress the\n       --  creation of the fixed secondary stack in the primary stack.\n \n+      --------------------------\n+      -- Secondary_Stack_Size --\n+      --------------------------\n+\n       function Secondary_Stack_Size return Storage_Elements.Storage_Offset is\n          use System.Storage_Elements;\n          use System.Secondary_Stack;"}, {"sha": "d7c768330f6a845287db0848c56702ce8cc94261", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -1036,9 +1036,16 @@ package body Sem_Attr is\n                      Set_Never_Set_In_Source (Ent, False);\n                   end if;\n \n-                  --  Mark entity as address taken, and kill current values\n+                  --  Mark entity as address taken in the case of\n+                  --  'Unrestricted_Access or subprograms, and kill current\n+                  --  values.\n+\n+                  if Aname = Name_Unrestricted_Access\n+                    or else Is_Subprogram (Ent)\n+                  then\n+                     Set_Address_Taken (Ent);\n+                  end if;\n \n-                  Set_Address_Taken (Ent);\n                   Kill_Current_Values (Ent);\n                   exit;\n \n@@ -1053,7 +1060,7 @@ package body Sem_Attr is\n             end loop;\n          end;\n \n-         --  Check for aliased view.. We allow a nonaliased prefix when within\n+         --  Check for aliased view. We allow a nonaliased prefix when within\n          --  an instance because the prefix may have been a tagged formal\n          --  object, which is defined to be aliased even when the actual\n          --  might not be (other instance cases will have been caught in the\n@@ -11027,9 +11034,13 @@ package body Sem_Attr is\n                end;\n             end if;\n \n-            --  Mark that address of entity is taken\n+            --  Mark that address of entity is taken in case of\n+            --  'Unrestricted_Access or in case of a subprogram.\n \n-            if Is_Entity_Name (P) then\n+            if Is_Entity_Name (P)\n+             and then (Attr_Id = Attribute_Unrestricted_Access\n+                       or else Is_Subprogram (Entity (P)))\n+            then\n                Set_Address_Taken (Entity (P));\n             end if;\n "}, {"sha": "264a2846a7e6a43458ebe2ab4bcd0108804dbac0", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -2532,21 +2532,7 @@ package body Sem_Ch10 is\n          Set_Analyzed (N);\n       end if;\n \n-      --  If the library unit is a predefined unit, and we are in high\n-      --  integrity mode, then temporarily reset Configurable_Run_Time_Mode\n-      --  for the analysis of the with'ed unit. This mode does not prevent\n-      --  explicit with'ing of run-time units.\n-\n-      if Configurable_Run_Time_Mode\n-        and then Is_Predefined_File_Name (Unit_File_Name (Get_Source_Unit (U)))\n-      then\n-         Configurable_Run_Time_Mode := False;\n-         Semantics (Library_Unit (N));\n-         Configurable_Run_Time_Mode := True;\n-\n-      else\n-         Semantics (Library_Unit (N));\n-      end if;\n+      Semantics (Library_Unit (N));\n \n       Intunit := Is_Internal_File_Name (Unit_File_Name (Current_Sem_Unit));\n "}, {"sha": "7a23005fae20bc898d25a696779a468f9d4fc887", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -2063,10 +2063,10 @@ package body Sem_Ch13 is\n                     Aspect_Output               |\n                     Aspect_Read                 |\n                     Aspect_Scalar_Storage_Order |\n-                    Aspect_Size                 |\n-                    Aspect_Small                |\n                     Aspect_Secondary_Stack_Size |\n                     Aspect_Simple_Storage_Pool  |\n+                    Aspect_Size                 |\n+                    Aspect_Small                |\n                     Aspect_Storage_Pool         |\n                     Aspect_Stream_Size          |\n                     Aspect_Value_Size           |\n@@ -5708,8 +5708,8 @@ package body Sem_Ch13 is\n \n             if From_Aspect_Specification (N) then\n                if not Is_Task_Type (U_Ent) then\n-                  Error_Msg_N (\"Secondary Stack Size can only be \" &\n-                               \"defined for task\", Nam);\n+                  Error_Msg_N\n+                    (\"Secondary Stack Size can only be defined for task\", Nam);\n \n                elsif Duplicate_Clause then\n                   null;"}, {"sha": "37c206e4bcc26daab0c0bc23fa589b75062cb2a4", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -11828,33 +11828,30 @@ package body Sem_Prag is\n          --  processing is required here.\n \n          when Pragma_Assertion_Policy => Assertion_Policy : declare\n-\n             procedure Resolve_Suppressible (Policy : Node_Id);\n             --  Converts the assertion policy 'Suppressible' to either Check or\n-            --  Ignore based on whether checks are suppressed via -gnatp or ???\n+            --  Ignore based on whether checks are suppressed via -gnatp.\n \n             --------------------------\n             -- Resolve_Suppressible --\n             --------------------------\n \n             procedure Resolve_Suppressible (Policy : Node_Id) is\n+               Arg : constant Node_Id := Get_Pragma_Arg (Policy);\n                Nam : Name_Id;\n-               ARG : constant Node_Id := Get_Pragma_Arg (Policy);\n \n             begin\n-               if Chars (Expression (Policy)) = Name_Suppressible then\n-\n-                  --  Rewrite the policy argument node to either Ignore or\n-                  --  Check. This is done because the argument is referenced\n-                  --  directly later during analysis.\n+               --  Transform policy argument Suppressible into either Ignore or\n+               --  Check depending on whether checks are enabled or suppressed.\n \n+               if Chars (Arg) = Name_Suppressible then\n                   if Suppress_Checks then\n                      Nam := Name_Ignore;\n                   else\n                      Nam := Name_Check;\n                   end if;\n \n-                  Rewrite (ARG, Make_Identifier (Sloc (ARG), Nam));\n+                  Rewrite (Arg, Make_Identifier (Sloc (Arg), Nam));\n                end if;\n             end Resolve_Suppressible;\n \n@@ -20608,9 +20605,8 @@ package body Sem_Prag is\n                Arg := Get_Pragma_Arg (Arg1);\n                Ent := Defining_Identifier (Parent (P));\n \n-               --  The expression must be analyzed in the special\n-               --  manner described in \"Handling of Default Expressions\"\n-               --  in sem.ads.\n+               --  The expression must be analyzed in the special manner\n+               --  described in \"Handling of Default Expressions\" in sem.ads.\n \n                Preanalyze_Spec_Expression (Arg, Any_Integer);\n "}, {"sha": "33266b3e90c3a6e0098025be38a199a0f6be3af7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=2168d7cc3ba6f3b2280bfefcc8a789ea4d8d90a5", "patch": "@@ -20658,14 +20658,17 @@ package body Sem_Util is\n          when Entry_Kind =>\n             if Nkind (Parent (E)) = N_Entry_Body then\n                declare\n-                  Prot_Type : Entity_Id;\n                   Prot_Item : Entity_Id;\n+                  Prot_Type : Entity_Id;\n+\n                begin\n                   if Ekind (E) = E_Entry then\n                      Prot_Type := Scope (E);\n+\n+                  --  Bodies of entry families are nested within an extra scope\n+                  --  that contains an entry index declaration\n+\n                   else\n-                     --  Bodies of entry families are nested within an extra\n-                     --  scope that contains an entry index declaration.\n                      Prot_Type := Scope (Scope (E));\n                   end if;\n "}]}