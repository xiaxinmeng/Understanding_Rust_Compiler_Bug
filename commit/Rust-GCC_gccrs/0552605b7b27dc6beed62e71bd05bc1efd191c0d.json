{"sha": "0552605b7b27dc6beed62e71bd05bc1efd191c0d", "node_id": "C_kwDOANBUbNoAKDA1NTI2MDViN2IyN2RjNmJlZWQ2MmU3MWJkMDViYzFlZmQxOTFjMGQ", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2022-01-11T02:05:56Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2022-01-11T08:23:36Z"}, "message": "testsuite: Fix regression on m32 by r12-6087 [PR103820]\n\nr12-6087 will avoid move cold bb out of hot loop, while the original\nintent of this testcase is to hoist divides out of loop and CSE them to\nonly one divide.  So increase the loop count to turn the cold bb to hot\nbb again.  Then the 3 divides could be rewritten with same reciptmp.\n\nTested pass on Power-Linux {32,64}, x86 {64,32} and i686-linux.\n\ngcc/testsuite/ChangeLog:\n\n\tPR testsuite/103820\n\t* gcc.dg/tree-ssa/recip-3.c: Adjust.", "tree": {"sha": "a5975192b3427ca702db20047a9fb4e5e9785710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5975192b3427ca702db20047a9fb4e5e9785710"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0552605b7b27dc6beed62e71bd05bc1efd191c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0552605b7b27dc6beed62e71bd05bc1efd191c0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0552605b7b27dc6beed62e71bd05bc1efd191c0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0552605b7b27dc6beed62e71bd05bc1efd191c0d/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e1116c5f5af7166c9689b5421f607b814778de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1116c5f5af7166c9689b5421f607b814778de7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e1116c5f5af7166c9689b5421f607b814778de7"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "410b28044b48e051753536992591ceb106c2f1e8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/recip-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0552605b7b27dc6beed62e71bd05bc1efd191c0d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0552605b7b27dc6beed62e71bd05bc1efd191c0d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-3.c?ref=0552605b7b27dc6beed62e71bd05bc1efd191c0d", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O1 -fno-trapping-math -funsafe-math-optimizations -fdump-tree-recip\" } */\n \n-double F[2] = { 0.0, 0.0 }, e;\n+double F[5] = { 0.0, 0.0 }, e;\n \n /* In this case the optimization is interesting.  */\n float h ()\n@@ -13,7 +13,7 @@ float h ()\n \td = 2.*e;\n \tE = 1. - d;\n \n-\tfor( i=0; i < 2; i++ )\n+\tfor( i=0; i < 5; i++ )\n \t\tif( d > 0.01 )\n \t\t{\n \t\t\tP = ( W < E ) ? (W - E)/d : (E - W)/d;\n@@ -23,4 +23,4 @@ float h ()\n \tF[0] += E / d;\n }\n \n-/* { dg-final { scan-tree-dump-times \" / \" 5 \"recip\" } } */\n+/* { dg-final { scan-tree-dump-times \" / \" 1 \"recip\" } } */"}]}