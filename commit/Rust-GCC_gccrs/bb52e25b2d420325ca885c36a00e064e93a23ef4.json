{"sha": "bb52e25b2d420325ca885c36a00e064e93a23ef4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1MmUyNWIyZDQyMDMyNWNhODg1YzM2YTAwZTA2NGU5M2EyM2VmNA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-15T19:43:19Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-15T19:43:19Z"}, "message": "Add support for const bool and const float\n\nHandle BOOL and FLOAT in ConstFoldExpr::visit (HIR::LiteralExpr) to\nmake it possible to create const bool, f32 and f64 constants. Add a\nnew testcase \"primconsts.rs\". Not yet handled are const char and &str\ntypes.", "tree": {"sha": "2b8d70692116c461fbecbb832ebdf04b31720f72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b8d70692116c461fbecbb832ebdf04b31720f72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb52e25b2d420325ca885c36a00e064e93a23ef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb52e25b2d420325ca885c36a00e064e93a23ef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb52e25b2d420325ca885c36a00e064e93a23ef4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb52e25b2d420325ca885c36a00e064e93a23ef4/comments", "author": null, "committer": null, "parents": [{"sha": "52c1cdc9c63baeb090680daf6762c02362f2c6cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c1cdc9c63baeb090680daf6762c02362f2c6cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c1cdc9c63baeb090680daf6762c02362f2c6cd"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "8efbb183403898cce386f69b0cbbc63083850e75", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52e25b2d420325ca885c36a00e064e93a23ef4/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52e25b2d420325ca885c36a00e064e93a23ef4/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=bb52e25b2d420325ca885c36a00e064e93a23ef4", "patch": "@@ -315,6 +315,36 @@ class ConstFoldExpr : public ConstFoldBase\n \t}\n \treturn;\n \n+\tcase HIR::Literal::BOOL: {\n+\t  bool bval = literal_value->as_string ().compare (\"true\") == 0;\n+\t  folded = ctx->get_backend ()->boolean_constant_expression (bval);\n+\t}\n+\treturn;\n+\n+\tcase HIR::Literal::FLOAT: {\n+\t  mpfr_t fval;\n+\t  if (mpfr_init_set_str (fval, literal_value->as_string ().c_str (), 10,\n+\t\t\t\t MPFR_RNDN)\n+\t      != 0)\n+\t    {\n+\t      rust_fatal_error (expr.get_locus (),\n+\t\t\t\t\"bad floating-point number in literal\");\n+\t      return;\n+\t    }\n+\n+\t  TyTy::BaseType *tyty = nullptr;\n+\t  if (!tyctx->lookup_type (expr.get_mappings ().get_hirid (), &tyty))\n+\t    {\n+\t      rust_fatal_error (expr.get_locus (),\n+\t\t\t\t\"did not resolve type for this literal expr\");\n+\t      return;\n+\t    }\n+\n+\t  Btype *type = ConstFoldType::fold (tyty, ctx->get_backend ());\n+\t  folded = ctx->get_backend ()->float_constant_expression (type, fval);\n+\t}\n+\treturn;\n+\n \t/* handle other literals */\n \n       default:"}, {"sha": "bcf9456d059a6e9a8b32e8c239d63811e5afff64", "filename": "gcc/testsuite/rust/compile/torture/primconsts.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52e25b2d420325ca885c36a00e064e93a23ef4/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fprimconsts.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52e25b2d420325ca885c36a00e064e93a23ef4/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fprimconsts.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fprimconsts.rs?ref=bb52e25b2d420325ca885c36a00e064e93a23ef4", "patch": "@@ -0,0 +1,72 @@\n+const TRUE: bool = true;\n+const FALSE: bool = !TRUE;\n+\n+const U8ZERO: u8 = 0;\n+const U8ONE: u8 = U8ZERO + 1;\n+const U16ZERO: u16 = 0;\n+const U16ONE: u16 = U16ZERO + 1;\n+const U32ZERO: u32 = 0;\n+const U32ONE: u32 = U32ZERO + 1;\n+const U64ZERO: u64 = 0;\n+const U64ONE: u64 = U64ZERO + 1;\n+const U128ZERO: u128 = 0;\n+const U128ONE: u128 = U128ZERO + 1;\n+\n+const I8ZERO: i8 = 0;\n+const I8ONE: i8 = I8ZERO + 1;\n+const I16ZERO: i16 = 0;\n+const I16ONE: i16 = I16ZERO + 1;\n+const I32ZERO: i32 = 0;\n+const I32ONE: i32 = I32ZERO + 1;\n+const I64ZERO: i64 = 0;\n+const I64ONE: i64 = I64ZERO + 1;\n+const I128ZERO: i128 = 0;\n+const I128ONE: i128 = I128ZERO + 1;\n+\n+const F32ZERO: f32 = 0.0;\n+const F32ONE: f32 = F32ZERO + 1.0;\n+const F64ZERO: f64 = 0.0;\n+const F64ONE: f64 = F64ZERO + 1.0;\n+\n+const USIZEZERO: usize = 0;\n+const USIZEONE: usize = USIZEZERO + 1;\n+const ISIZEZERO: isize = 0;\n+const ISIZEONE: isize = ISIZEZERO + 1;\n+\n+/* Not yet supported \n+const CHARPI: char = '\\u{03C0}';\n+const STRHELLO: &str = \"Hello World!\";\n+*/\n+\n+extern \"C\" { fn abort (); }\n+\n+pub fn main ()\n+{\n+  if TRUE == FALSE { unsafe { abort (); } }\n+  if U8ZERO > U8ONE { unsafe { abort (); } }\n+  if U16ZERO > U16ONE { unsafe { abort (); } }\n+  if U32ZERO > U32ONE { unsafe { abort (); } }\n+  if U64ZERO > U64ONE { unsafe { abort (); } }\n+  if U128ZERO > U128ONE { unsafe { abort (); } }\n+\n+  if I8ONE <= I8ZERO { unsafe { abort (); } }\n+  if I16ONE <= I16ZERO { unsafe { abort (); } }\n+  if I32ONE <= I32ZERO { unsafe { abort (); } }\n+  if I64ONE <= I64ZERO { unsafe { abort (); } }\n+  if I128ONE <= I128ZERO { unsafe { abort (); } }\n+\n+  if F32ZERO + F32ONE != F32ONE { unsafe { abort (); } }\n+  if F64ZERO + F64ONE != F64ONE { unsafe { abort (); } }\n+\n+  if USIZEZERO + USIZEONE - USIZEONE + USIZEZERO != USIZEZERO\n+    {\n+      unsafe { abort (); }\n+    }\n+  if ISIZEZERO + ISIZEONE - ISIZEONE + ISIZEZERO != ISIZEZERO\n+    {\n+      unsafe { abort (); }\n+    }\n+\n+ // if CHARPI != '\\u{03c0}'  { unsafe { abort (); } }\n+ // if STRHELLO != \"Hello World!\" { unsafe { abort (); } }\n+}"}]}