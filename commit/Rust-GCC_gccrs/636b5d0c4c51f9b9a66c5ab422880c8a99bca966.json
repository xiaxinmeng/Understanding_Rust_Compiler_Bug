{"sha": "636b5d0c4c51f9b9a66c5ab422880c8a99bca966", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM2YjVkMGM0YzUxZjliOWE2NmM1YWI0MjI4ODBjOGE5OWJjYTk2Ng==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-08-11T16:34:44Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-08-11T16:34:44Z"}, "message": "Resurrect from Attic as should have been done in original commit.\n\nFrom-SVN: r56207", "tree": {"sha": "445745d6c282fb71834d7be907310514ddc0b69f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/445745d6c282fb71834d7be907310514ddc0b69f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/636b5d0c4c51f9b9a66c5ab422880c8a99bca966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636b5d0c4c51f9b9a66c5ab422880c8a99bca966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/636b5d0c4c51f9b9a66c5ab422880c8a99bca966", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636b5d0c4c51f9b9a66c5ab422880c8a99bca966/comments", "author": null, "committer": null, "parents": [{"sha": "3e72ec9a0c6489eee81ca607577bb837b68d9278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e72ec9a0c6489eee81ca607577bb837b68d9278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e72ec9a0c6489eee81ca607577bb837b68d9278"}], "stats": {"total": 217, "additions": 217, "deletions": 0}, "files": [{"sha": "eea40b8d95aa35bd877568cc46292ddf1a3c5812", "filename": "libjava/gnu/java/security/der/DEREncodingException.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636b5d0c4c51f9b9a66c5ab422880c8a99bca966/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDEREncodingException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636b5d0c4c51f9b9a66c5ab422880c8a99bca966/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDEREncodingException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fder%2FDEREncodingException.java?ref=636b5d0c4c51f9b9a66c5ab422880c8a99bca966", "patch": "@@ -0,0 +1,53 @@\n+/* DEREncodingException.java --- DER Encoding Exception\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.der;\n+\n+public class DEREncodingException extends Exception\n+{\n+\n+  public DEREncodingException()\n+  {\n+    super ();\n+  }\n+  \n+  public DEREncodingException (String msg)\n+  {\n+    super (msg);\n+  }\n+}"}, {"sha": "06d059e1eebc11032a79ffbba2dc3b04d470e42a", "filename": "libjava/gnu/java/security/util/Prime.java", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636b5d0c4c51f9b9a66c5ab422880c8a99bca966/libjava%2Fgnu%2Fjava%2Fsecurity%2Futil%2FPrime.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636b5d0c4c51f9b9a66c5ab422880c8a99bca966/libjava%2Fgnu%2Fjava%2Fsecurity%2Futil%2FPrime.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Futil%2FPrime.java?ref=636b5d0c4c51f9b9a66c5ab422880c8a99bca966", "patch": "@@ -0,0 +1,164 @@\n+/* Prime.java --- Prime number generation utilities\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.security.util;\n+import java.math.BigInteger;\n+import java.util.Random;\n+//import java.security.SecureRandom;\n+\n+public final class Prime\n+{\n+\n+  /*\n+    See IEEE P1363 A.15.4 (10/05/98 Draft)\n+  */\n+  public static BigInteger generateRandomPrime( int pmin, int pmax, BigInteger f )\n+  {\n+    BigInteger d;\n+\n+    //Step 1 - generate prime\n+    BigInteger p = new BigInteger( (pmax + pmin)/2, new Random() );\n+    if( p.compareTo( BigInteger.valueOf( 1 ).shiftLeft( pmin ) ) <= 0 )\n+      {\n+\tp.add( BigInteger.valueOf( 1 ).shiftLeft( pmin ).subtract( p ) );\n+      }\n+\t\n+    //Step 2 - test for even\n+    if( p.mod( BigInteger.valueOf(2) ).compareTo( BigInteger.valueOf( 0 )) == 0)\n+      p.add( BigInteger.valueOf( 1 ) );\n+\n+    for(;;)\n+      {\n+\t//Step 3\n+\tif( p.compareTo( BigInteger.valueOf( 1 ).shiftLeft( pmax)) > 0)\n+\t  {\n+\t    //Step 3.1\n+\t    p = p.subtract( BigInteger.valueOf( 1 ).shiftLeft( pmax) );\n+\t    p = p.add( BigInteger.valueOf( 1 ).shiftLeft( pmin) );\n+\t    p = p.subtract( BigInteger.valueOf( 1 ) );\n+\n+\t    //Step 3.2\n+\t    // put step 2 code here so looping code is cleaner\n+\t    //Step 2 - test for even\n+\t    if( p.mod( BigInteger.valueOf(2) ).compareTo( BigInteger.valueOf( 0 )) == 0)\n+\t      p.add( BigInteger.valueOf( 1 ) );\n+\t    continue;\n+\t  }\n+\t\n+\t//Step 4 - compute GCD\n+\td = p.subtract( BigInteger.valueOf(1) );\n+\td = d.gcd( f );\n+\n+\t//Step 5 - test d\n+\tif( d.compareTo( BigInteger.valueOf( 1 ) ) == 0)\n+\t  {\n+\t    //Step 5.1 - test primality\n+\t    if( p.isProbablePrime( 1 ) == true )\n+\t      {\n+\t\t\t\t//Step 5.2;\n+\t\treturn p;\n+\t      }\n+\t  }\n+\t//Step 6\n+\tp = p.add( BigInteger.valueOf( 2 ) );\n+\n+\t//Step 7\n+      }\n+  }\n+\n+\n+  /*\n+    See IEEE P1363 A.15.5 (10/05/98 Draft)\n+  */\n+  public static BigInteger generateRandomPrime( BigInteger r, BigInteger a, int pmin, int pmax, BigInteger f )\n+  {\n+    BigInteger d, w;\n+\n+    //Step 1 - generate prime\n+    BigInteger p = new BigInteger( (pmax + pmin)/2, new Random() );\n+\n+  steptwo:{ //Step 2\n+      w = p.mod( r.multiply( BigInteger.valueOf(2) ));\n+\n+      //Step 3\n+      p = p.add( r.multiply( BigInteger.valueOf(2) ) );\n+      p = p.subtract( w );\n+      p = p.add(a);\n+\n+      //Step 4 - test for even\n+      if( p.mod( BigInteger.valueOf(2) ).compareTo( BigInteger.valueOf( 0 )) == 0)\n+\tp.add( r );\n+\n+      for(;;)\n+\t{\n+\t  //Step 5\n+\t  if( p.compareTo( BigInteger.valueOf( 1 ).shiftLeft( pmax)) > 0)\n+\t    {\n+\t      //Step 5.1\n+\t      p = p.subtract( BigInteger.valueOf( 1 ).shiftLeft( pmax) );\n+\t      p = p.add( BigInteger.valueOf( 1 ).shiftLeft( pmin) );\n+\t      p = p.subtract( BigInteger.valueOf( 1 ) );\n+\n+\t      //Step 5.2 - goto to Step 2\n+\t      break steptwo;\n+\t    }\n+\n+\t  //Step 6\n+\t  d = p.subtract( BigInteger.valueOf(1) );\n+\t  d = d.gcd( f );\n+\n+\t  //Step 7 - test d\n+\t  if( d.compareTo( BigInteger.valueOf( 1 ) ) == 0)\n+\t    {\n+\t      //Step 7.1 - test primality\n+\t      if( p.isProbablePrime( 1 ) == true )\n+\t\t{\n+\t\t\t\t//Step 7.2;\n+\t\t  return p;\n+\t\t}\n+\t    }\n+\t  //Step 8\n+\t  p = p.add( r.multiply( BigInteger.valueOf(2) ) );\n+\n+\t  //Step 9\n+\t}\n+    }\n+    //Should never reach here but makes the compiler happy\n+    return BigInteger.valueOf(0);\t\n+  }\n+}"}]}