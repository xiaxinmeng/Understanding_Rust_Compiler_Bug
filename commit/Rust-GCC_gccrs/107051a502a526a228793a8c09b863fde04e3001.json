{"sha": "107051a502a526a228793a8c09b863fde04e3001", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA3MDUxYTUwMmE1MjZhMjI4NzkzYThjMDliODYzZmRlMDRlMzAwMQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-29T08:03:01Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-29T08:03:01Z"}, "message": "trans.c (gfc_call_malloc, [...]): Simplify code.\n\n\t* trans.c (gfc_call_malloc, gfc_allocate_using_malloc,\n\tgfc_allocate_using_lib, gfc_allocate_allocatable,\n\tgfc_call_realloc): Simplify code.\n\t* trans-array.c (gfc_trans_allocate_array_storage,\n\tgfc_trans_auto_array_allocation, gfc_conv_array_parameter): Do not\n\tconvert gfc_call_free() argument.\n\t* trans-expr.c (gfc_conv_string_tmp, gfc_conv_procedure_call,\n\tfcncall_realloc_result): Likewise.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Likewise.\n\nFrom-SVN: r227316", "tree": {"sha": "505091674e258283906964680f760a0c9a00ad1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/505091674e258283906964680f760a0c9a00ad1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/107051a502a526a228793a8c09b863fde04e3001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107051a502a526a228793a8c09b863fde04e3001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/107051a502a526a228793a8c09b863fde04e3001", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107051a502a526a228793a8c09b863fde04e3001/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ff2d74e9cfb4342f610b058eab400d3fde55f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff2d74e9cfb4342f610b058eab400d3fde55f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff2d74e9cfb4342f610b058eab400d3fde55f56"}], "stats": {"total": 76, "additions": 33, "deletions": 43}, "files": [{"sha": "9a75aaae44f027d8cde94061cf9bdd00f76628b3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107051a502a526a228793a8c09b863fde04e3001/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107051a502a526a228793a8c09b863fde04e3001/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=107051a502a526a228793a8c09b863fde04e3001", "patch": "@@ -1,3 +1,15 @@\n+2015-08-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* trans.c (gfc_call_malloc, gfc_allocate_using_malloc,\n+\tgfc_allocate_using_lib, gfc_allocate_allocatable,\n+\tgfc_call_realloc): Simplify code.\n+\t* trans-array.c (gfc_trans_allocate_array_storage,\n+\tgfc_trans_auto_array_allocation, gfc_conv_array_parameter): Do not\n+\tconvert gfc_call_free() argument.\n+\t* trans-expr.c (gfc_conv_string_tmp, gfc_conv_procedure_call,\n+\tfcncall_realloc_result): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Likewise.\n+\n 2015-08-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/53668"}, {"sha": "a6b761baba80d8292565659ebea75ca63e4a4e86", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107051a502a526a228793a8c09b863fde04e3001/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107051a502a526a228793a8c09b863fde04e3001/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=107051a502a526a228793a8c09b863fde04e3001", "patch": "@@ -922,7 +922,7 @@ gfc_trans_allocate_array_storage (stmtblock_t * pre, stmtblock_t * post,\n     {\n       /* Free the temporary.  */\n       tmp = gfc_conv_descriptor_data_get (desc);\n-      tmp = gfc_call_free (fold_convert (pvoid_type_node, tmp));\n+      tmp = gfc_call_free (tmp);\n       gfc_add_expr_to_block (post, tmp);\n     }\n }\n@@ -5885,7 +5885,7 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym,\n       gfc_add_modify (&init, decl, tmp);\n \n       /* Free the temporary.  */\n-      tmp = gfc_call_free (convert (pvoid_type_node, decl));\n+      tmp = gfc_call_free (decl);\n       space = NULL_TREE;\n     }\n \n@@ -7542,7 +7542,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, bool g77,\n \t}\n \n       /* Free the temporary.  */\n-      tmp = gfc_call_free (convert (pvoid_type_node, ptr));\n+      tmp = gfc_call_free (ptr);\n       gfc_add_expr_to_block (&block, tmp);\n \n       stmt = gfc_finish_block (&block);"}, {"sha": "cfa1a71fc8d58dad20dd88e674317094be12e11f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107051a502a526a228793a8c09b863fde04e3001/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107051a502a526a228793a8c09b863fde04e3001/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=107051a502a526a228793a8c09b863fde04e3001", "patch": "@@ -3035,7 +3035,7 @@ gfc_conv_string_tmp (gfc_se * se, tree type, tree len)\n       gfc_add_modify (&se->pre, var, tmp);\n \n       /* Free the temporary afterwards.  */\n-      tmp = gfc_call_free (convert (pvoid_type_node, var));\n+      tmp = gfc_call_free (var);\n       gfc_add_expr_to_block (&se->post, tmp);\n     }\n \n@@ -5880,7 +5880,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t  gfc_add_modify (&se->pre, var,\n \t\t\t\t  fold_convert (TREE_TYPE (var),\n \t\t\t\t\t\tnull_pointer_node));\n-\t\t  tmp = gfc_call_free (convert (pvoid_type_node, var));\n+\t\t  tmp = gfc_call_free (var);\n \t\t  gfc_add_expr_to_block (&se->post, tmp);\n \t\t}\n \n@@ -6140,14 +6140,14 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t  if (se->ss && se->ss->loop)\n \t    {\n \t      gfc_add_expr_to_block (&se->ss->loop->post, tmp);\n-\t      tmp = gfc_call_free (convert (pvoid_type_node, info->data));\n+\t      tmp = gfc_call_free (info->data);\n \t      gfc_add_expr_to_block (&se->ss->loop->post, tmp);\n \t    }\n \t  else\n \t    {\n \t      gfc_add_expr_to_block (&se->post, tmp);\n \t      tmp = gfc_class_data_get (se->expr);\n-\t      tmp = gfc_call_free (convert (pvoid_type_node, tmp));\n+\t      tmp = gfc_call_free (tmp);\n \t      gfc_add_expr_to_block (&se->post, tmp);\n \t    }\n \t  expr->must_finalize = 0;\n@@ -8453,7 +8453,7 @@ fcncall_realloc_result (gfc_se *se, int rank)\n \t\t\t       boolean_type_node, tmp,\n \t\t\t       build_int_cst (TREE_TYPE (tmp), 0));\n   zero_cond = gfc_evaluate_now (zero_cond, &se->post);\n-  tmp = gfc_call_free (fold_convert (pvoid_type_node, tmp));\n+  tmp = gfc_call_free (tmp);\n   gfc_add_expr_to_block (&se->post, tmp);\n \n   tmp = gfc_conv_descriptor_data_get (res_desc);"}, {"sha": "35052bebb8ee322c3dc5a8f1da9aaa4cb3a09d06", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107051a502a526a228793a8c09b863fde04e3001/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107051a502a526a228793a8c09b863fde04e3001/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=107051a502a526a228793a8c09b863fde04e3001", "patch": "@@ -6259,7 +6259,7 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n \n \t  /* Free the temporary.  */\n \t  gfc_start_block (&block);\n-\t  tmp = gfc_call_free (convert (pvoid_type_node, source));\n+\t  tmp = gfc_call_free (source);\n \t  gfc_add_expr_to_block (&block, tmp);\n \t  stmt = gfc_finish_block (&block);\n "}, {"sha": "457c0e252108e91cb4f62bd5ed6af5db8379ec33", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/107051a502a526a228793a8c09b863fde04e3001/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/107051a502a526a228793a8c09b863fde04e3001/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=107051a502a526a228793a8c09b863fde04e3001", "patch": "@@ -567,17 +567,13 @@ gfc_call_malloc (stmtblock_t * block, tree type, tree size)\n   tree tmp, msg, malloc_result, null_result, res, malloc_tree;\n   stmtblock_t block2;\n \n-  size = gfc_evaluate_now (size, block);\n-\n-  if (TREE_TYPE (size) != TREE_TYPE (size_type_node))\n-    size = fold_convert (size_type_node, size);\n-\n   /* Create a variable to hold the result.  */\n   res = gfc_create_var (prvoid_type_node, NULL);\n \n   /* Call malloc.  */\n   gfc_start_block (&block2);\n \n+  size = fold_convert (size_type_node, size);\n   size = fold_build2_loc (input_location, MAX_EXPR, size_type_node, size,\n \t\t\t  build_int_cst (size_type_node, 1));\n \n@@ -604,7 +600,6 @@ gfc_call_malloc (stmtblock_t * block, tree type, tree size)\n     }\n \n   malloc_result = gfc_finish_block (&block2);\n-\n   gfc_add_expr_to_block (block, malloc_result);\n \n   if (type != NULL)\n@@ -643,18 +638,14 @@ gfc_allocate_using_malloc (stmtblock_t * block, tree pointer,\n   stmtblock_t on_error;\n   tree status_type = status ? TREE_TYPE (status) : NULL_TREE;\n \n-  /* Evaluate size only once, and make sure it has the right type.  */\n-  size = gfc_evaluate_now (size, block);\n-  if (TREE_TYPE (size) != TREE_TYPE (size_type_node))\n-    size = fold_convert (size_type_node, size);\n-\n   /* If successful and stat= is given, set status to 0.  */\n   if (status != NULL_TREE)\n       gfc_add_expr_to_block (block,\n \t     fold_build2_loc (input_location, MODIFY_EXPR, status_type,\n \t\t\t      status, build_int_cst (status_type, 0)));\n \n   /* The allocation itself.  */\n+  size = fold_convert (size_type_node, size);\n   gfc_add_modify (block, pointer,\n \t  fold_convert (TREE_TYPE (pointer),\n \t\tbuild_call_expr_loc (input_location,\n@@ -716,11 +707,6 @@ gfc_allocate_using_lib (stmtblock_t * block, tree pointer, tree size,\n \n   gcc_assert (token != NULL_TREE);\n \n-  /* Evaluate size only once, and make sure it has the right type.  */\n-  size = gfc_evaluate_now (size, block);\n-  if (TREE_TYPE (size) != TREE_TYPE (size_type_node))\n-    size = fold_convert (size_type_node, size);\n-\n   /* The allocation itself.  */\n   if (status == NULL_TREE)\n     pstat  = null_pointer_node;\n@@ -734,6 +720,7 @@ gfc_allocate_using_lib (stmtblock_t * block, tree pointer, tree size,\n       errlen = build_int_cst (integer_type_node, 0);\n     }\n \n+  size = fold_convert (size_type_node, size);\n   tmp = build_call_expr_loc (input_location,\n \t     gfor_fndecl_caf_register, 6,\n \t     fold_build2_loc (input_location,\n@@ -782,9 +769,7 @@ gfc_allocate_allocatable (stmtblock_t * block, tree mem, tree size, tree token,\n   tree tmp, null_mem, alloc, error;\n   tree type = TREE_TYPE (mem);\n \n-  if (TREE_TYPE (size) != TREE_TYPE (size_type_node))\n-    size = fold_convert (size_type_node, size);\n-\n+  size = fold_convert (size_type_node, size);\n   null_mem = gfc_unlikely (fold_build2_loc (input_location, NE_EXPR,\n \t\t\t\t\t    boolean_type_node, mem,\n \t\t\t\t\t    build_int_cst (type, 0)),\n@@ -866,27 +851,22 @@ gfc_allocate_allocatable (stmtblock_t * block, tree mem, tree size, tree token,\n \n \n /* Free a given variable, if it's not NULL.  */\n+\n tree\n gfc_call_free (tree var)\n {\n-  stmtblock_t block;\n-  tree tmp, cond, call;\n+  tree cond, call;\n \n-  if (TREE_TYPE (var) != TREE_TYPE (pvoid_type_node))\n-    var = fold_convert (pvoid_type_node, var);\n+  /* Only evaluate the variable once.  */\n+  var = save_expr (fold_convert (pvoid_type_node, var));\n \n-  gfc_start_block (&block);\n-  var = gfc_evaluate_now (var, &block);\n   cond = fold_build2_loc (input_location, NE_EXPR, boolean_type_node, var,\n \t\t\t  build_int_cst (pvoid_type_node, 0));\n   call = build_call_expr_loc (input_location,\n \t\t\t      builtin_decl_explicit (BUILT_IN_FREE),\n \t\t\t      1, var);\n-  tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node, cond, call,\n-\t\t\t build_empty_stmt (input_location));\n-  gfc_add_expr_to_block (&block, tmp);\n-\n-  return gfc_finish_block (&block);\n+  return fold_build3_loc (input_location, COND_EXPR, void_type_node,\n+\t\t\t  cond, call, build_empty_stmt (input_location));\n }\n \n \n@@ -1499,10 +1479,8 @@ gfc_call_realloc (stmtblock_t * block, tree mem, tree size)\n   tree msg, res, nonzero, null_result, tmp;\n   tree type = TREE_TYPE (mem);\n \n-  size = gfc_evaluate_now (size, block);\n-\n-  if (TREE_TYPE (size) != TREE_TYPE (size_type_node))\n-    size = fold_convert (size_type_node, size);\n+  /* Only evaluate the size once.  */\n+  size = save_expr (fold_convert (size_type_node, size));\n \n   /* Create a variable to hold the result.  */\n   res = gfc_create_var (type, NULL);"}]}