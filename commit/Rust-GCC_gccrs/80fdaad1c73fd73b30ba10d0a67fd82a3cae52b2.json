{"sha": "80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmZGFhZDFjNzNmZDczYjMwYmExMGQwYTY3ZmQ4MmEzY2FlNTJiMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-03-16T18:56:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-03-16T18:56:01Z"}, "message": "PR c++/80227 - SFINAE and negative array size.\n\n\t* decl.c (compute_array_index_type): Use\n\tbuild_converted_constant_expr and valid_constant_size_p.\n\nFrom-SVN: r258604", "tree": {"sha": "46cc91a59533b6b58d88f223ba0a25e85057700f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46cc91a59533b6b58d88f223ba0a25e85057700f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "929a01229393f32b47d4915e48437c091a7baeec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929a01229393f32b47d4915e48437c091a7baeec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/929a01229393f32b47d4915e48437c091a7baeec"}], "stats": {"total": 295, "additions": 141, "deletions": 154}, "files": [{"sha": "2957ebb7471e7f2c871fcea4d8b0640326ee7b67", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2", "patch": "@@ -1,5 +1,9 @@\n 2018-03-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/80227 - SFINAE and negative array size.\n+\t* decl.c (compute_array_index_type): Use\n+\tbuild_converted_constant_expr and valid_constant_size_p.\n+\n \tPR c++/84906 - silent wrong code with ambiguous conversion.\n \t* call.c (build_user_type_conversion_1): Set need_temporary_p on\n \tambiguous conversion."}, {"sha": "546468bf79f790552bda281ed5d5a51f3be25b0c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2", "patch": "@@ -9514,8 +9514,6 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \n   if (!type_dependent_expression_p (size))\n     {\n-      tree type = TREE_TYPE (size);\n-\n       size = mark_rvalue_use (size);\n \n       if (cxx_dialect < cxx11 && TREE_CODE (size) == NOP_EXPR\n@@ -9525,29 +9523,8 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n       else\n \t{\n \t  size = instantiate_non_dependent_expr_sfinae (size, complain);\n-\n-\t  if (CLASS_TYPE_P (type)\n-\t      && CLASSTYPE_LITERAL_P (type))\n-\t    {\n-\t      size = build_expr_type_conversion (WANT_INT, size, true);\n-\t      if (!size)\n-\t\t{\n-\t\t  if (!(complain & tf_error))\n-\t\t    return error_mark_node;\n-\t\t  if (name)\n-\t\t    error (\"size of array %qD has non-integral type %qT\",\n-\t\t\t   name, type);\n-\t\t  else\n-\t\t    error (\"size of array has non-integral type %qT\", type);\n-\t\t  size = integer_one_node;\n-\t\t}\n-\t      if (size == error_mark_node)\n-\t\treturn error_mark_node;\n-\t      type = TREE_TYPE (size);\n-\t    }\n-\n-\t  if (INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (type))\n-\t    size = maybe_constant_value (size);\n+\t  size = build_converted_constant_expr (size_type_node, size, complain);\n+\t  size = maybe_constant_value (size);\n \n \t  if (!TREE_CONSTANT (size))\n \t    size = osize;\n@@ -9557,6 +9534,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \treturn error_mark_node;\n \n       /* The array bound must be an integer type.  */\n+      tree type = TREE_TYPE (size);\n       if (!INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (type))\n \t{\n \t  if (!(complain & tf_error))\n@@ -9566,7 +9544,6 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t  else\n \t    error (\"size of array has non-integral type %qT\", type);\n \t  size = integer_one_node;\n-\t  type = TREE_TYPE (size);\n \t}\n     }\n \n@@ -9604,15 +9581,12 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n   /* Normally, the array-bound will be a constant.  */\n   if (TREE_CODE (size) == INTEGER_CST)\n     {\n-      /* Check to see if the array bound overflowed.  Make that an\n-\t error, no matter how generous we're being.  */\n-      constant_expression_error (size);\n-\n       /* An array must have a positive number of elements.  */\n-      if (tree_int_cst_lt (size, integer_zero_node))\n+      if (!valid_constant_size_p (size))\n \t{\n \t  if (!(complain & tf_error))\n \t    return error_mark_node;\n+\n \t  if (name)\n \t    error (\"size of array %qD is negative\", name);\n \t  else"}, {"sha": "8d9b2d26f0117363ac10a790604e087f9aae0643", "filename": "gcc/testsuite/g++.dg/cpp0x/fntmpdefarg8.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg8.C?ref=80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/80227\n+// { dg-do compile { target c++11 } }\n+\n+template <class T>\n+int foo (T);\n+\n+template <class T, class U = T [sizeof (T) - 5]>\n+int foo (T, U* = 0);\n+\n+int i = foo (123);"}, {"sha": "5b0c60b80a4ea616ab46c9c814bc2337b8f90cbc", "filename": "gcc/testsuite/g++.dg/gomp/pr47963.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr47963.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr47963.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr47963.C?ref=80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2", "patch": "@@ -5,7 +5,7 @@\n void\n foo (float n)\n {\n-  int A[n][n];\t// { dg-error \"has non-integral type\" }\n+  int A[n][n];\t// { dg-error \"has non-integral type|converted constant expression\" }\n #pragma omp parallel private(A)\n   ;\n }"}, {"sha": "9ecbfd7903d2e42b2b4a89a686a0e6f9b02b9aa9", "filename": "gcc/testsuite/g++.dg/init/new37.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C?ref=80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2", "patch": "@@ -32,7 +32,7 @@ template <typename T>\n void *\n callnew_fail_3()\n {\n-  return new T[2][T::n]; // { dg-error \"size of array has non-integral type\" }\n+  return new T[2][T::n]; // { dg-error \"size of array has non-integral type|converted constant expression\" }\n }\n \n struct T1 {"}, {"sha": "4ab73209e224181706a069c7d3578d82010cfe26", "filename": "gcc/testsuite/g++.dg/init/new44.C", "status": "modified", "additions": 119, "deletions": 119, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C?ref=80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2", "patch": "@@ -87,10 +87,10 @@ test_one_dim_short_array ()\n static void __attribute__ ((used))\n test_two_dim_char_array ()\n {\n-    p = new char [1][MAX];              // { dg-error \"size of unnamed array\" }\n-    p = new char [1][MAX - 1];          // { dg-error \"size of unnamed array\" }\n-    p = new char [1][MAX - 2];          // { dg-error \"size of unnamed array\" }\n-    p = new char [1][MAX - 99];         // { dg-error \"size of unnamed array\" }\n+    p = new char [1][MAX];              // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][MAX - 1];          // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][MAX - 2];          // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][MAX - 99];         // { dg-error \"size of (unnamed )?array\" }\n     p = new char [1][MAX / 2];          // { dg-error \"size of array\" }\n     p = new char [1][MAX / 2 - 1];      // { dg-error \"size of array\" }\n     p = new char [1][MAX / 2 - 2];      // { dg-error \"size of array\" }\n@@ -104,18 +104,18 @@ test_two_dim_char_array ()\n     p = new char [1][MAX / 2 - 7];      // okay\n     p = new char [1][MAX / 2 - 8];      // okay\n \n-    p = new char [2][MAX];              // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX - 1];          // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX - 2];          // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX];              // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX - 1];          // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX - 2];          // { dg-error \"size of (unnamed )?array\" }\n     p = new char [2][MAX / 2];          // { dg-error \"size of array\" }\n     p = new char [2][MAX / 2 - 1];      // { dg-error \"size of array\" }\n     p = new char [2][MAX / 2 - 2];      // { dg-error \"size of array\" }\n     p = new char [2][MAX / 2 - 7];      // { dg-error \"size of array\" }\n     p = new char [2][MAX / 2 - 8];      // { dg-error \"size of array\" }\n \n-    p = new char [MAX][MAX];            // { dg-error \"size of unnamed array\" }\n-    p = new char [MAX][MAX - 1];        // { dg-error \"size of unnamed array\" }\n-    p = new char [MAX][MAX - 2];        // { dg-error \"size of unnamed array\" }\n+    p = new char [MAX][MAX];            // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [MAX][MAX - 1];        // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [MAX][MAX - 2];        // { dg-error \"size of (unnamed )?array\" }\n     p = new char [MAX][MAX / 2];        // { dg-error \"size of array\" }\n     p = new char [MAX][MAX / 2 - 1];    // { dg-error \"size of array\" }\n     p = new char [MAX][MAX / 2 - 2];    // { dg-error \"size of array\" }\n@@ -142,10 +142,10 @@ test_two_dim_char_array ()\n static __attribute__ ((used)) void\n test_three_dim_char_array ()\n {\n-    p = new char [1][1][MAX];           // { dg-error \"size of unnamed array\" }\n-    p = new char [1][1][MAX - 1];       // { dg-error \"size of unnamed array\" }\n-    p = new char [1][1][MAX - 2];       // { dg-error \"size of unnamed array\" }\n-    p = new char [1][1][MAX - 99];      // { dg-error \"size of unnamed array\" }\n+    p = new char [1][1][MAX];           // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][1][MAX - 1];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][1][MAX - 2];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][1][MAX - 99];      // { dg-error \"size of (unnamed )?array\" }\n     p = new char [1][1][MAX / 2];       // { dg-error \"size of array\" }\n     p = new char [1][1][MAX / 2 - 1];   // { dg-error \"size of array\" }\n     p = new char [1][1][MAX / 2 - 2];   // { dg-error \"size of array\" }\n@@ -159,19 +159,19 @@ test_three_dim_char_array ()\n     p = new char [1][1][MAX / 2 - 7];   // okay\n     p = new char [1][1][MAX / 2 - 8];   // okay\n \n-    p = new char [1][2][MAX];           // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX - 1];       // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX - 2];       // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX - 99];      // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX / 2];       // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX / 2 - 1];   // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX / 2 - 2];   // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX / 2 - 3];   // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX / 2 - 4];   // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX / 2 - 5];   // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX / 2 - 6];   // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX / 2 - 7];   // { dg-error \"size of unnamed array\" }\n-    p = new char [1][2][MAX / 2 - 8];   // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX];           // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX - 1];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX - 2];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX - 99];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 1];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 2];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 3];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 4];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 5];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 6];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 7];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [1][2][MAX / 2 - 8];   // { dg-error \"size of (unnamed )?array\" }\n     p = new char [1][2][MAX / 4];       // { dg-error \"size of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n@@ -181,10 +181,10 @@ test_three_dim_char_array ()\n     p = new char [1][2][MAX / 4 - 3];   // okay\n     p = new char [1][2][MAX / 4 - 4];   // okay\n \n-    p = new char [2][1][MAX];           // { dg-error \"size of unnamed array\" }\n-    p = new char [2][1][MAX - 1];       // { dg-error \"size of unnamed array\" }\n-    p = new char [2][1][MAX - 2];       // { dg-error \"size of unnamed array\" }\n-    p = new char [2][1][MAX - 99];      // { dg-error \"size of unnamed array\" }\n+    p = new char [2][1][MAX];           // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][1][MAX - 1];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][1][MAX - 2];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][1][MAX - 99];      // { dg-error \"size of (unnamed )?array\" }\n     p = new char [2][1][MAX / 2];       // { dg-error \"size of array\" }\n     p = new char [2][1][MAX / 2 - 1];   // { dg-error \"size of array\" }\n     p = new char [2][1][MAX / 2 - 2];   // { dg-error \"size of array\" }\n@@ -203,19 +203,19 @@ test_three_dim_char_array ()\n     p = new char [2][1][MAX / 4 - 3];   // okay\n     p = new char [2][1][MAX / 4 - 4];   // okay\n \n-    p = new char [2][2][MAX];           // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX - 1];       // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX - 2];       // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX - 99];      // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX / 2];       // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX / 2 - 1];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX / 2 - 2];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX / 2 - 3];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX / 2 - 4];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX / 2 - 5];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX / 2 - 6];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX / 2 - 7];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][2][MAX / 2 - 8];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX];           // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX - 1];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX - 2];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX - 99];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 1];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 2];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 3];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 4];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 5];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 6];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 7];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][2][MAX / 2 - 8];   // { dg-error \"size of (unnamed )?array\" }\n     p = new char [2][2][MAX / 4];       // { dg-error \"size of array\" }\n     p = new char [2][2][MAX / 4 - 1];   // { dg-error \"size of array\" }\n     p = new char [2][2][MAX / 4 - 2];   // { dg-error \"size of array\" }\n@@ -227,19 +227,19 @@ test_three_dim_char_array ()\n     p = new char [2][2][MAX / 8 - 2];\n     p = new char [2][2][MAX / 8 - 3];\n \n-    p = new char [2][MAX][2];           // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX - 1][2];       // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX - 2][2];       // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX - 99][2];      // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX / 2][2];       // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX / 2 - 1][2];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX / 2 - 2][2];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX / 2 - 3][2];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX / 2 - 4][2];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX / 2 - 5][2];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX / 2 - 6][2];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX / 2 - 7][2];   // { dg-error \"size of unnamed array\" }\n-    p = new char [2][MAX / 2 - 8][2];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX][2];           // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX - 1][2];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX - 2][2];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX - 99][2];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX / 2][2];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 1][2];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 2][2];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 3][2];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 4][2];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 5][2];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 6][2];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 7][2];   // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [2][MAX / 2 - 8][2];   // { dg-error \"size of (unnamed )?array\" }\n     p = new char [2][MAX / 4][2];       // { dg-error \"size of array\" }\n     p = new char [2][MAX / 4 - 1][2];   // { dg-error \"size of array\" }\n     p = new char [2][MAX / 4 - 2][2];   // { dg-error \"size of array\" }\n@@ -275,11 +275,11 @@ test_three_dim_char_array ()\n     p = new char [MAX / 8 - 2][2][2];\n     p = new char [MAX / 8 - 3][2][2];\n \n-    p = new char [MAX][MAX][MAX];         // { dg-error \"size of unnamed array\" }\n-    p = new char [MAX][MAX][MAX / 2];     // { dg-error \"size of unnamed array\" }\n-    p = new char [MAX][MAX / 2][MAX];     // { dg-error \"size of unnamed array\" }\n-    p = new char [MAX][MAX / 2][MAX / 2]; // { dg-error \"size of unnamed array\" }\n-    p = new char [MAX / 2][MAX / 2][MAX / 2]; // { dg-error \"size of unnamed array\" }\n+    p = new char [MAX][MAX][MAX];         // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [MAX][MAX][MAX / 2];     // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [MAX][MAX / 2][MAX];     // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [MAX][MAX / 2][MAX / 2]; // { dg-error \"size of (unnamed )?array\" }\n+    p = new char [MAX / 2][MAX / 2][MAX / 2]; // { dg-error \"size of (unnamed )?array\" }\n }\n \n // Exercise new expression with N-dimensional arrays where N is\n@@ -342,10 +342,10 @@ test_one_dim_byte_array (void *p)\n static void __attribute__ ((used))\n test_placement_two_dim_byte_struct_array (void *p)\n {\n-    p = new (p) B [1][MAX];             // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][MAX - 1];         // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][MAX - 2];         // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][MAX - 99];        // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][MAX];             // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][MAX - 1];         // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][MAX - 2];         // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][MAX - 99];        // { dg-error \"size of (unnamed )?array\" }\n     p = new (p) B [1][MAX / 2];         // { dg-error \"size of array\" }\n     p = new (p) B [1][MAX / 2 - 1];     // { dg-error \"size of array\" }\n     p = new (p) B [1][MAX / 2 - 2];     // { dg-error \"size of array\" }\n@@ -359,18 +359,18 @@ test_placement_two_dim_byte_struct_array (void *p)\n     p = new (p) B [1][MAX / 2 - 7];      // okay\n     p = new (p) B [1][MAX / 2 - 8];      // okay\n \n-    p = new (p) B [2][MAX];             // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX - 1];         // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX - 2];         // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX];             // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX - 1];         // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX - 2];         // { dg-error \"size of (unnamed )?array\" }\n     p = new (p) B [2][MAX / 2];         // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 2 - 1];     // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 2 - 2];     // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 2 - 7];     // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 2 - 8];     // { dg-error \"size of array\" }\n \n-    p = new (p) B [MAX][MAX];           // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [MAX][MAX - 1];       // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [MAX][MAX - 2];       // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [MAX][MAX];           // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [MAX][MAX - 1];       // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [MAX][MAX - 2];       // { dg-error \"size of (unnamed )?array\" }\n     p = new (p) B [MAX][MAX / 2];       // { dg-error \"size of array\" }\n     p = new (p) B [MAX][MAX / 2 - 1];   // { dg-error \"size of array\" }\n     p = new (p) B [MAX][MAX / 2 - 2];   // { dg-error \"size of array\" }\n@@ -397,10 +397,10 @@ test_placement_two_dim_byte_struct_array (void *p)\n static __attribute__ ((used)) void\n test_placement_three_dim_byte_struct_array (void *p)\n {\n-    p = new (p) B [1][1][MAX];          // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][1][MAX - 1];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][1][MAX - 2];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][1][MAX - 99];     // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][1][MAX];          // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][1][MAX - 1];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][1][MAX - 2];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][1][MAX - 99];     // { dg-error \"size of (unnamed )?array\" }\n     p = new (p) B [1][1][MAX / 2];      // { dg-error \"size of array\" }\n     p = new (p) B [1][1][MAX / 2 - 1];  // { dg-error \"size of array\" }\n     p = new (p) B [1][1][MAX / 2 - 2];  // { dg-error \"size of array\" }\n@@ -414,19 +414,19 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [1][1][MAX / 2 - 7];   // okay\n     p = new (p) B [1][1][MAX / 2 - 8];   // okay\n \n-    p = new (p) B [1][2][MAX];          // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX - 1];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX - 2];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX - 99];     // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX / 2];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX / 2 - 1];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX / 2 - 2];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX / 2 - 3];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX / 2 - 4];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX / 2 - 5];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX / 2 - 6];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX / 2 - 7];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [1][2][MAX / 2 - 8];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX];          // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX - 1];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX - 2];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX - 99];     // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 1];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 2];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 3];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 4];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 5];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 6];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 7];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [1][2][MAX / 2 - 8];  // { dg-error \"size of (unnamed )?array\" }\n     p = new (p) B [1][2][MAX / 4];      // { dg-error \"size of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n@@ -436,10 +436,10 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [1][2][MAX / 4 - 3];   // okay\n     p = new (p) B [1][2][MAX / 4 - 4];   // okay\n \n-    p = new (p) B [2][1][MAX];          // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][1][MAX - 1];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][1][MAX - 2];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][1][MAX - 99];     // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][1][MAX];          // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][1][MAX - 1];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][1][MAX - 2];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][1][MAX - 99];     // { dg-error \"size of (unnamed )?array\" }\n     p = new (p) B [2][1][MAX / 2];      // { dg-error \"size of array\" }\n     p = new (p) B [2][1][MAX / 2 - 1];  // { dg-error \"size of array\" }\n     p = new (p) B [2][1][MAX / 2 - 2];  // { dg-error \"size of array\" }\n@@ -458,19 +458,19 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [2][1][MAX / 4 - 3];   // okay\n     p = new (p) B [2][1][MAX / 4 - 4];   // okay\n \n-    p = new (p) B [2][2][MAX];          // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX - 1];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX - 2];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX - 99];     // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX / 2];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX / 2 - 1];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX / 2 - 2];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX / 2 - 3];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX / 2 - 4];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX / 2 - 5];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX / 2 - 6];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX / 2 - 7];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][2][MAX / 2 - 8];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX];          // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX - 1];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX - 2];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX - 99];     // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 1];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 2];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 3];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 4];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 5];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 6];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 7];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][2][MAX / 2 - 8];  // { dg-error \"size of (unnamed )?array\" }\n     p = new (p) B [2][2][MAX / 4];      // { dg-error \"size of array\" }\n     p = new (p) B [2][2][MAX / 4 - 1];  // { dg-error \"size of array\" }\n     p = new (p) B [2][2][MAX / 4 - 2];  // { dg-error \"size of array\" }\n@@ -482,19 +482,19 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [2][2][MAX / 8 - 2];\n     p = new (p) B [2][2][MAX / 8 - 3];\n \n-    p = new (p) B [2][MAX][2];          // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX - 1][2];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX - 2][2];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX - 99][2];     // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX / 2][2];      // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX / 2 - 1][2];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX / 2 - 2][2];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX / 2 - 3][2];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX / 2 - 4][2];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX / 2 - 5][2];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX / 2 - 6][2];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX / 2 - 7][2];  // { dg-error \"size of unnamed array\" }\n-    p = new (p) B [2][MAX / 2 - 8][2];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX][2];          // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX - 1][2];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX - 2][2];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX - 99][2];     // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2][2];      // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 1][2];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 2][2];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 3][2];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 4][2];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 5][2];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 6][2];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 7][2];  // { dg-error \"size of (unnamed )?array\" }\n+    p = new (p) B [2][MAX / 2 - 8][2];  // { dg-error \"size of (unnamed )?array\" }\n     p = new (p) B [2][MAX / 4][2];      // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 4 - 1][2];  // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 4 - 2][2];  // { dg-error \"size of array\" }"}, {"sha": "1fbbaa9d1e2b7deca2002b4f56993b13ec0c0046", "filename": "gcc/testsuite/g++.dg/ubsan/pr81530.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81530.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81530.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81530.C?ref=80fdaad1c73fd73b30ba10d0a67fd82a3cae52b2", "patch": "@@ -2,5 +2,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-fsanitize=undefined\" } */\n \n-int a[(long) 4e20]; /* { dg-error \"overflow in constant expression\" } */\n-/* { dg-error \"size of array .a. is too large\" \"\" { target *-*-* } .-1 } */\n+int a[(long) 4e20]; /* { dg-error \"size of array .a. is (too large|negative)\" } */"}]}