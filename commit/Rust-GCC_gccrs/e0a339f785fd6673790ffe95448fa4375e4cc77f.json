{"sha": "e0a339f785fd6673790ffe95448fa4375e4cc77f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBhMzM5Zjc4NWZkNjY3Mzc5MGZmZTk1NDQ4ZmE0Mzc1ZTRjYzc3Zg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-07-31T02:03:51Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-07-31T02:03:51Z"}, "message": "BorderLayout.java (BorderLayout()): New constructor.\n\n\t* java/awt/BorderLayout.java (BorderLayout()): New constructor.\n\n\t* java/awt/Frame.java (Frame): Pass `null' to Window constructor.\n\n\t* java/awt/Window.java (addNotify): Wrote.\n\t(addWindowListener): Wrote.\n\t(getLocale): Wrote.\n\t(getWarningString): Wrote.\n\t(processEvent): Wrote.\n\t(processWindowEvent): Wrote.\n\t(removeWindowListener): Wrote.\n\t(show): Call validate(), setVisible().\n\t(toBack): Wrote.\n\t(toFront): Wrote.\n\n\t* java/awt/Toolkit.java (createWindow): Declare.\n\n\t* java/awt/Frame.java (addNotify): Use getToolkit to find\n\ttoolkit.\n\n\t* java/awt/Component.java (invalidate): Wrote.\n\t(isValid): Wrote.\n\t(getToolkit): Wrote.\n\n\t* java/awt/Container.java (addContainerListener): Removed\n\tunnecessary cast.\n\t(removeContainerListener): Likewise.\n\t(addImpl): Wrote.\n\t(add(Component)): Use it.\n\t(add(String,Component)): Likewise.\n\t(add(Component,int)): Likewise.\n\t(add(Component,Object)): Likewise.\n\t(add(Component,Object,int)): Likewise.\n\t(doLayout): Wrote.\n\t(getAlignmentX): Wrote.\n\t(getAlignmentY): Wrote.\n\t(getComponentAt): Wrote.\n\t(getMaximumSize): Wrote.\n\t(invalidate): Wrote.\n\t(list(PrintStream,int)): Wrote.\n\t(list(PrintWriter,int)): Wrote.\n\t(getMinimumSize): Wrote.\n\t(getPreferredSize): Wrote.\n\t(printComponents): Wrote.\n\t(processContainerEvent): Look at containerListener, not\n\tcomponentListener.\n\t(remove): Added event processing and peer destruction.\n\t(removeAll): Use remove.\n\t(removeNotify): Wrote.\n\t(validate): Wrote.\n\t(validateTree): Wrote.\n\n\t* java/awt/Scrollbar.java (addNotify): Do nothing if peer exists.\n\t* java/awt/Label.java (addNotify): Do nothing if peer exists.\n\t* java/awt/Container.java (addNotify): Don't create Container\n\tpeer.\n\t* java/awt/Button.java (addNotify): Do nothing if peer exists.\n\nFrom-SVN: r35361", "tree": {"sha": "e4242f7fec5fd46deb2e127e632eaf9fc1aceb50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4242f7fec5fd46deb2e127e632eaf9fc1aceb50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0a339f785fd6673790ffe95448fa4375e4cc77f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a339f785fd6673790ffe95448fa4375e4cc77f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0a339f785fd6673790ffe95448fa4375e4cc77f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a339f785fd6673790ffe95448fa4375e4cc77f/comments", "author": null, "committer": null, "parents": [{"sha": "911a71a72912cfa7bc2d762f35e76e2f58e3097c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911a71a72912cfa7bc2d762f35e76e2f58e3097c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911a71a72912cfa7bc2d762f35e76e2f58e3097c"}], "stats": {"total": 462, "additions": 373, "deletions": 89}, "files": [{"sha": "d9780332c9e583eef453b90297ec6a755fd386d1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e0a339f785fd6673790ffe95448fa4375e4cc77f", "patch": "@@ -1,3 +1,63 @@\n+2000-07-30  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/awt/BorderLayout.java (BorderLayout()): New constructor.\n+\n+\t* java/awt/Frame.java (Frame): Pass `null' to Window constructor.\n+\n+\t* java/awt/Window.java (addNotify): Wrote.\n+\t(addWindowListener): Wrote.\n+\t(getLocale): Wrote.\n+\t(getWarningString): Wrote.\n+\t(processEvent): Wrote.\n+\t(processWindowEvent): Wrote.\n+\t(removeWindowListener): Wrote.\n+\t(show): Call validate(), setVisible().\n+\t(toBack): Wrote.\n+\t(toFront): Wrote.\n+\n+\t* java/awt/Toolkit.java (createWindow): Declare.\n+\n+\t* java/awt/Frame.java (addNotify): Use getToolkit to find\n+\ttoolkit.\n+\n+\t* java/awt/Component.java (invalidate): Wrote.\n+\t(isValid): Wrote.\n+\t(getToolkit): Wrote.\n+\n+\t* java/awt/Container.java (addContainerListener): Removed\n+\tunnecessary cast.\n+\t(removeContainerListener): Likewise.\n+\t(addImpl): Wrote.\n+\t(add(Component)): Use it.\n+\t(add(String,Component)): Likewise.\n+\t(add(Component,int)): Likewise.\n+\t(add(Component,Object)): Likewise.\n+\t(add(Component,Object,int)): Likewise.\n+\t(doLayout): Wrote.\n+\t(getAlignmentX): Wrote.\n+\t(getAlignmentY): Wrote.\n+\t(getComponentAt): Wrote.\n+\t(getMaximumSize): Wrote.\n+\t(invalidate): Wrote.\n+\t(list(PrintStream,int)): Wrote.\n+\t(list(PrintWriter,int)): Wrote.\n+\t(getMinimumSize): Wrote.\n+\t(getPreferredSize): Wrote.\n+\t(printComponents): Wrote.\n+\t(processContainerEvent): Look at containerListener, not\n+\tcomponentListener.\n+\t(remove): Added event processing and peer destruction.\n+\t(removeAll): Use remove.\n+\t(removeNotify): Wrote.\n+\t(validate): Wrote.\n+\t(validateTree): Wrote.\n+\n+\t* java/awt/Scrollbar.java (addNotify): Do nothing if peer exists.\n+\t* java/awt/Label.java (addNotify): Do nothing if peer exists.\n+\t* java/awt/Container.java (addNotify): Don't create Container\n+\tpeer.\n+\t* java/awt/Button.java (addNotify): Do nothing if peer exists.\n+\n 2000-07-30  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/awt/Container.java (remove(int)): Wrote."}, {"sha": "6f4cb5cdb4c459f39749b9420bbc306c256fa9d4", "filename": "libjava/java/awt/BorderLayout.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FBorderLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FBorderLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FBorderLayout.java?ref=e0a339f785fd6673790ffe95448fa4375e4cc77f", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libjava.\n \n@@ -15,6 +15,11 @@ public class BorderLayout implements LayoutManager2\n   int hgap;\n   int vgap;\n \n+  public BorderLayout ()\n+  {\n+    this (0, 0);\n+  }\n+\n   public BorderLayout (int hgap, int vgap)\n   {\n     this.hgap = hgap;"}, {"sha": "503881709f38410f9db8ec41df7ea5adb0ab19da", "filename": "libjava/java/awt/Button.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FButton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FButton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FButton.java?ref=e0a339f785fd6673790ffe95448fa4375e4cc77f", "patch": "@@ -36,7 +36,8 @@ public void addActionListener (ActionListener l)\n \n   public void addNotify ()\n   {\n-    peer = (ComponentPeer) getToolkit ().createButton (this);\n+    if (peer == null)\n+      peer = (ComponentPeer) getToolkit ().createButton (this);\n   }\n \n   public String getActionCommand ()"}, {"sha": "340b1853a65a96d83c84f7277a5a5d461451be54", "filename": "libjava/java/awt/Component.java", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponent.java?ref=e0a339f785fd6673790ffe95448fa4375e4cc77f", "patch": "@@ -137,23 +137,25 @@ public GraphicsConfiguration getGraphicsConfiguration()\n     // FIXME\n     return null;\n   }\n-  \n+\n   public final Object getTreeLock()\n   {\n     // FIXME\n     return null;\n   }\n-  \n+\n   public Toolkit getToolkit()\n   {\n-    // FIXME\n-    return null;\n+    if (peer != null)\n+      return peer.getToolkit ();\n+    if (parent != null)\n+      return parent.getToolkit ();\n+    return Toolkit.getDefaultToolkit ();\n   }\n-  \n+\n   public boolean isValid()\n   {\n-    // FIXME\n-    return false;\n+    return valid;\n   }\n   \n   /** @since 1.2 */\n@@ -518,7 +520,9 @@ public void validate()\n   \n   public void invalidate()\n   {\n-    // FIXME\n+    valid = false;\n+    if (parent != null)\n+      parent.invalidate ();\n   }\n   \n   public Graphics getGraphics()"}, {"sha": "7ebdc9cf4a436eac14a76945ea5a7c07366fef55", "filename": "libjava/java/awt/Container.java", "status": "modified", "additions": 160, "deletions": 61, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainer.java?ref=e0a339f785fd6673790ffe95448fa4375e4cc77f", "patch": "@@ -29,7 +29,10 @@ public abstract class Container extends Component\n \n   /* Anything else is non-serializable, and should be declared \"transient\". */\n   transient ContainerListener containerListener;  \n-  \n+\n+  // Insets.\n+  private transient Insets myInsets;\n+\n   public Container()\n   {\n   }\n@@ -62,10 +65,9 @@ public Component[] getComponents()\n \n   public Insets getInsets()\n   {\n-    // FIXME\n-    return null;\n+    return myInsets;\n   }\n-  \n+\n   /** @deprecated Use getInsets() instead. */\n   public Insets insets()\n   {\n@@ -74,17 +76,50 @@ public Insets insets()\n   \n   public Component add (Component comp)\n   {\n-    return add (comp, -1);\n+    addImpl (comp, null, -1);\n+    return comp;\n   }\n-  \n-  public Component add(String name, Component comp)\n+\n+  public Component add (String name, Component comp)\n   {\n-    // FIXME\n-    return null;\n+    addImpl (comp, name, -1);\n+    return comp;\n+  }\n+\n+  public Component add (Component comp, int index)\n+  {\n+    addImpl (comp, null, index);\n+    return comp;\n+  }\n+\n+  public void add (Component comp, Object constraints)\n+  {\n+    addImpl (comp, constraints, -1);\n+  }\n+\n+  public void add (Component comp, Object constraints, int index)\n+  {\n+    addImpl (comp, constraints, index);\n   }\n \n-  public Component add(Component comp, int index)\n+  protected void addImpl (Component comp, Object constraints, int index)\n   {\n+    if (index > ncomponents\n+\t|| comp instanceof Window\n+\t|| (comp instanceof Container\n+\t    && ((Container) comp).isAncestorOf (this)))\n+      throw new IllegalArgumentException ();\n+\n+    // Reparent component, and make sure component is instantiated if\n+    // we are.\n+    if (comp.parent != this)\n+      comp.parent.remove (comp);\n+    comp.parent = this;\n+    if (peer != null)\n+      comp.addNotify ();\n+\n+    invalidate ();\n+\n     // This isn't the most efficient implementation.  We could do less\n     // copying when growing the array.  It probably doesn't matter.\n     if (ncomponents >= component.length)\n@@ -94,7 +129,6 @@ public Component add(Component comp, int index)\n \tSystem.arraycopy (component, 0, c, 0, ncomponents);\n \tcomponent = c;\n       }\n-\n     if (index == -1)\n       component[ncomponents++] = comp;\n     else\n@@ -105,45 +139,69 @@ public Component add(Component comp, int index)\n \t++ncomponents;\n       }\n \n-    return comp;\n-  }\n-\n-  public void add(Component comp, Object constraints)\n-  {\n-    // FIXME\n-  }\n+    // Notify the layout manager.\n+    if (layoutMgr != null)\n+      {\n+\tif (constraints != null && layoutMgr instanceof LayoutManager2)\n+\t  {\n+\t    LayoutManager2 lm2 = (LayoutManager2) layoutMgr;\n+\t    lm2.addLayoutComponent (comp, constraints);\n+\t  }\n+\telse\n+\t  layoutMgr.addLayoutComponent ((String) constraints, comp);\n+      }\n \n-  public void add(Component comp, Object constraints, int index)\n-  {\n-    // FIXME\n-  }\n+    ContainerEvent ce = new ContainerEvent (this,\n+\t\t\t\t\t    ContainerEvent.COMPONENT_ADDED,\n+\t\t\t\t\t    comp);\n \n-  protected void addImpl(Component comp, Object constraints, int index)\n-  {\n-    // FIXME\n+    // FIXME: is this right?\n+    dispatchEvent (ce);\n+    if (containerListener != null)\n+      containerListener.componentAdded (ce);\n   }\n \n   public void remove (int index)\n   {\n+    Component r = component[index];\n+\n+    r.removeNotify ();\n+\n     System.arraycopy (component, index + 1, component, index,\n \t\t      ncomponents - index - 1);\n     component[--ncomponents] = null;\n+\n+    invalidate ();\n+\n+    if (layoutMgr != null)\n+      layoutMgr.removeLayoutComponent (r);\n+\n+    ContainerEvent ce = new ContainerEvent (this,\n+\t\t\t\t\t    ContainerEvent.COMPONENT_REMOVED,\n+\t\t\t\t\t    r);\n+\n+    // FIXME: is this right?\n+    dispatchEvent (ce);\n+    if (containerListener != null)\n+      containerListener.componentAdded (ce);\n   }\n \n   public void remove (Component comp)\n   {\n     for (int i = 0; i < ncomponents; ++i)\n-      if (component[i] == comp)\n-\t{\n-\t  remove (i);\n-\t  break;\n-\t}\n+      {\n+\tif (component[i] == comp)\n+\t  {\n+\t    remove (i);\n+\t    break;\n+\t  }\n+      }\n   }\n \n   public void removeAll()\n   {\n-    while (ncomponents >= 0)\n-      component[--ncomponents] = null;\n+    while (ncomponents > 0)\n+      remove (0);\n   }\n \n   public LayoutManager getLayout()\n@@ -159,7 +217,8 @@ public void setLayout(LayoutManager mgr)\n   \n   public void doLayout()\n   {\n-    // FIXME\n+    if (layoutMgr != null)\n+      layoutMgr.layoutContainer (this);\n   }\n \n   /** @deprecated Use doLayout() instead. */\n@@ -170,17 +229,22 @@ public void layout()\n \n   public void invalidate()\n   {\n-    // FIXME\n+    super.invalidate ();\n   }\n \n   public void validate()\n   {\n-    // FIXME\n+    if (! isValid ())\n+      {\n+\tdoLayout ();\n+\tvalidateTree ();\n+      }\n   }\n \n   protected void validateTree()\n   {\n-    // FIXME\n+    for (int i = 0; i < ncomponents; ++i)\n+      component[i].validate ();\n   }\n \n   public void setFont(Font f)\n@@ -190,8 +254,10 @@ public void setFont(Font f)\n \n   public Dimension getPreferredSize()\n   {\n-    // FIXME\n-    return null;\n+    if (layoutMgr != null)\n+      return layoutMgr.preferredLayoutSize (this);\n+    else\n+      return super.getPreferredSize ();\n   }\n   \n   /** @deprecated Use getPreferredSize() instead */\n@@ -202,8 +268,10 @@ public Dimension preferredSize()\n   \n   public Dimension getMinimumSize()\n   {\n-    // FIXME\n-    return null;\n+    if (layoutMgr != null)\n+      return layoutMgr.minimumLayoutSize (this);\n+    else\n+      return super.getMinimumSize ();\n   }\n   \n   /** @deprecated Use getMinimumSize() instead */\n@@ -214,20 +282,35 @@ public Dimension minimumSize()\n   \n   public Dimension getMaximumSize()\n   {\n-    // FIXME\n-    return null;    \n+    if (layoutMgr != null && layoutMgr instanceof LayoutManager2)\n+      {\n+\tLayoutManager2 lm2 = (LayoutManager2) layoutMgr;\n+\treturn lm2.maximumLayoutSize (this);\n+      }\n+    else\n+      return super.getMaximumSize ();\n   }\n-  \n+\n   public float getAlignmentX()\n   {\n-    // FIXME\n-    return 0;\n+    if (layoutMgr instanceof LayoutManager2)\n+      {\n+\tLayoutManager2 lm2 = (LayoutManager2) layoutMgr;\n+\treturn lm2.getLayoutAlignmentX (this);\n+      }\n+    else\n+      return CENTER_ALIGNMENT;\n   }\n \n   public float getAlignmentY()\n   {\n-    // FIXME\n-    return 0;\n+    if (layoutMgr instanceof LayoutManager2)\n+      {\n+\tLayoutManager2 lm2 = (LayoutManager2) layoutMgr;\n+\treturn lm2.getLayoutAlignmentY (this);\n+      }\n+    else\n+      return CENTER_ALIGNMENT;\n   }\n \n   public void paint(Graphics g)\n@@ -252,7 +335,8 @@ public void paintComponents(Graphics g)\n \n   public void printComponents(Graphics g)\n   {\n-    // FIXME\n+    for (int i = 0; i < ncomponents; ++i)\n+      component[i].printAll (g);\n   }\n   \n   void dispatchEventImpl(AWTEvent e)\n@@ -267,14 +351,12 @@ void dispatchEventImpl(AWTEvent e)\n \n   public void addContainerListener(ContainerListener l)\n   {\n-    containerListener = (ContainerListener) \n-                          AWTEventMulticaster.add(containerListener, l);\n+    containerListener = AWTEventMulticaster.add (containerListener, l);\n   }\n \n   public void removeContainerListener(ContainerListener l)\n   {\n-    containerListener = (ContainerListener)\n-\t\t\t  AWTEventMulticaster.remove(containerListener, l);\n+    containerListener = AWTEventMulticaster.remove(containerListener, l);\n   }\n \n   /** @since 1.3 */\n@@ -294,7 +376,7 @@ protected void processEvent(AWTEvent e)\n   \n   protected void processContainerEvent(ContainerEvent e)\n   {\n-    if (componentListener == null)\n+    if (containerListener == null)\n       return;\n     switch (e.id)\n       {\n@@ -313,9 +395,17 @@ public void deliverEvent(Event e)\n   {\n   }\n   \n-  public Component getComponentAt(int x, int y)\n+  public Component getComponentAt (int x, int y)\n   {\n-    // FIXME\n+    if (! contains (x, y))\n+      return null;\n+    for (int i = 0; i < ncomponents; ++i)\n+      {\n+\tint x2 = x - component[i].x;\n+\tint y2 = y - component[i].y;\n+\tif (component[i].contains (x2, y2))\n+\t  return component[i];\n+      }\n     return null;\n   }\n \n@@ -345,12 +435,13 @@ public void addNotify ()\n   {\n     for (int i = ncomponents;  --i >= 0; )\n       component[i].addNotify();\n-    peer = (ComponentPeer) getToolkit ().createContainer (this);\n   }\n \n   public void removeNotify()\n   {\n-    // FIXME\n+    for (int i = 0; i < ncomponents; ++i)\n+      component[i].removeNotify ();\n+    // FIXME: remove our peer.\n   }\n \n   public boolean isAncestorOf (Component comp)\n@@ -370,13 +461,21 @@ protected String paramString()\n     return \"FIXME\";\n   }\n   \n-  public void list(PrintStream out, int indent)\n+  public void list (PrintStream out, int indent)\n   {\n-    // FIXME  \n+    for (int i = 0; i < indent; ++i)\n+      out.print (' ');\n+    out.println (toString ());\n+    for (int i = 0; i < ncomponents; ++i)\n+      component[i].list (out, indent + 2);\n   }\n-  \n+\n   public void list(PrintWriter out, int indent)\n   {\n-    // FIXME  \n+    for (int i = 0; i < indent; ++i)\n+      out.print (' ');\n+    out.println (toString ());\n+    for (int i = 0; i < ncomponents; ++i)\n+      component[i].list (out, indent + 2);\n   }\n }"}, {"sha": "fb9f7fd58093bb7133c2cd4dad114eafa3983d6f", "filename": "libjava/java/awt/Frame.java", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FFrame.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FFrame.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFrame.java?ref=e0a339f785fd6673790ffe95448fa4375e4cc77f", "patch": "@@ -17,11 +17,13 @@ public class Frame extends Window implements MenuContainer\n   String title;\n \n   public Frame ()\n-  { /* FIXME */ }\n+  {\n+    super (null);\n+  }\n \n   public Frame (String title)\n   {\n-    this();\n+    super (null);\n     setTitle(title);\n   }\n \n@@ -43,13 +45,7 @@ public synchronized void setMenuBar (MenuBar menuBar)\n   public synchronized void addNotify ()\n   {\n     if (peer == null)\n-      {\n-\tFramePeer fpeer = Toolkit.getDefaultToolkit().createFrame(this);\n-\t// Compiler bug requires cast ??;  FIXME?\n-\tpeer = (java.awt.peer.ComponentPeer) fpeer;\n-\tif (width + height > 0)\n-\t  peer.setBounds(x, y, width, height);\n-      }\n+      peer = getToolkit ().createFrame (this);\n     super.addNotify();\n   }\n "}, {"sha": "840456db74feb372db81df53e0aaebe4791d42f2", "filename": "libjava/java/awt/Label.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FLabel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FLabel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FLabel.java?ref=e0a339f785fd6673790ffe95448fa4375e4cc77f", "patch": "@@ -41,7 +41,8 @@ public Label (String text, int alignment)\n \n   public void addNotify ()\n   {\n-    peer = (ComponentPeer) getToolkit ().createLabel (this);\n+    if (peer == null)\n+      peer = (ComponentPeer) getToolkit ().createLabel (this);\n   }\n \n   public int getAlignment ()"}, {"sha": "afe3abaf8441e092d98c1b50fcd66a8c4bbd737f", "filename": "libjava/java/awt/Scrollbar.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FScrollbar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FScrollbar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollbar.java?ref=e0a339f785fd6673790ffe95448fa4375e4cc77f", "patch": "@@ -53,7 +53,8 @@ public Scrollbar (int orientation, int value, int visible,\n \n   public void addNotify ()\n   {\n-    peer = (ComponentPeer) getToolkit ().createScrollbar (this);\n+    if (peer == null)\n+      peer = (ComponentPeer) getToolkit ().createScrollbar (this);\n   }\n \n   public int getOrientation ()"}, {"sha": "e1788dfcfc59e0dae247c5eca49fdde3a55602e3", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=e0a339f785fd6673790ffe95448fa4375e4cc77f", "patch": "@@ -31,6 +31,7 @@ public static synchronized Toolkit getDefaultToolkit()\n   protected abstract ContainerPeer createContainer (Container target);\n   protected abstract LabelPeer createLabel (Label target);\n   protected abstract ScrollbarPeer createScrollbar (Scrollbar target);\n+  protected abstract WindowPeer createWindow (Window target);\n \n   public final EventQueue getSystemEventQueue()\n   {"}, {"sha": "463b67b6681fc028a6e02c4d2646a864c14cc0ab", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 123, "deletions": 7, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a339f785fd6673790ffe95448fa4375e4cc77f/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=e0a339f785fd6673790ffe95448fa4375e4cc77f", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libjava.\n \n@@ -7,23 +7,139 @@\n details.  */\n \n package java.awt;\n+import java.awt.event.WindowEvent;\n import java.awt.event.WindowListener;\n+import java.awt.peer.WindowPeer;\n+import java.awt.peer.ComponentPeer;\n+import java.util.Locale;\n \n /* A very incomplete placeholder. */\n \n public class Window extends Container\n {\n-  public void dispose ()\n-  { /* FIXME */ }\n+  public Window (Frame parent)\n+  {\n+    this.parent = parent;\n+    // FIXME: compiler bug\n+    // this.layoutMgr = new BorderLayout ();\n+  }\n+\n+  public void addNotify ()\n+  {\n+    if (peer == null)\n+      peer = (ComponentPeer) getToolkit ().createWindow (this);\n+    super.addNotify ();\n+  }\n \n   public synchronized void addWindowListener (WindowListener listener)\n-  { /* FIXME */ }\n+  {\n+    windowListener = AWTEventMulticaster.add (windowListener, listener);\n+  }\n+\n+  public void dispose ()\n+  {\n+  }\n+\n+  public Component getFocusOwner ()\n+  {\n+    return null;\t\t// FIXME\n+  }\n \n+  public Locale getLocale ()\n+  {\n+    return locale == null ? Locale.getDefault () : locale;\n+  }\n+\n+  public String getWarningString ()\n+  {\n+    return warningString;\n+  }\n+\n+  public void pack ()\n+  {\n+    addNotify ();\n+    // FIXME\n+  }\n+\n+  public boolean postEvent (Event evt)\n+  {\n+    return false;\t\t// FIXME\n+  }\n+\n+  protected void processEvent (AWTEvent evt)\n+  {\n+    if (evt instanceof WindowEvent)\n+      processWindowEvent ((WindowEvent) evt);\n+    else\n+      super.processEvent (evt);\n+  }\n+\n+  protected void processWindowEvent (WindowEvent evt)\n+  {\n+    if (windowListener != null)\n+      {\n+\tswitch (evt.getID ())\n+\t  {\n+\t  case WindowEvent.WINDOW_ACTIVATED:\n+\t    windowListener.windowActivated (evt);\n+\t    break;\n+\t  case WindowEvent.WINDOW_CLOSED:\n+\t    windowListener.windowClosed (evt);\n+\t    break;\n+\t  case WindowEvent.WINDOW_CLOSING:\n+\t    windowListener.windowClosing (evt);\n+\t    break;\n+\t  case WindowEvent.WINDOW_DEACTIVATED:\n+\t    windowListener.windowDeactivated (evt);\n+\t    break;\n+\t  case WindowEvent.WINDOW_DEICONIFIED:\n+\t    windowListener.windowDeiconified (evt);\n+\t    break;\n+\t  case WindowEvent.WINDOW_ICONIFIED:\n+\t    windowListener.windowIconified (evt);\n+\t    break;\n+\t  case WindowEvent.WINDOW_OPENED:\n+\t    windowListener.windowOpened (evt);\n+\t    break;\n+\t  }\n+      }\n+  }\n+\n+  public synchronized void removeWindowListener (WindowListener listener)\n+  {\n+    windowListener = AWTEventMulticaster.remove (windowListener, listener);\n+  }\n \n   public void show ()\n   {\n-    addNotify();\n-    // validate FIXME\n-    // validate setVisible FIXME\n+    addNotify ();\n+    validate ();\n+    setVisible (true);\n+    // FIXME: is there more to it?\n+  }\n+\n+  public void toBack ()\n+  {\n+    if (peer != null)\n+      {\n+\tWindowPeer wp = (WindowPeer) peer;\n+\twp.toBack ();\n+      }\n   }\n+\n+  public void toFront ()\n+  {\n+    if (peer != null)\n+      {\n+\tWindowPeer wp = (WindowPeer) peer;\n+\twp.toFront ();\n+      }\n+  }\n+\n+  // Serialized fields, from Sun's serialization spec.\n+  // private FocusManager focusMgr;  // FIXME: what is this?\n+  private int state;\n+  private String warningString;\n+\n+  private transient WindowListener windowListener;\n }"}]}