{"sha": "d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhhYmEzMmEwOTU5MTY5ZDAwYjlkODliMjhmNmQ0Y2NjNDc2M2JlOA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2012-03-12T11:58:16Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2012-03-12T11:58:16Z"}, "message": "vms.opt: Add vms-opts.h header.\n\n2012-03-12  Tristan Gingold  <gingold@adacore.com>\n\n\t* config/vms/vms.opt: Add vms-opts.h header.\n\t(mmalloc64): Use flag_vms_malloc64 flag instead of MALLOC64\n\ttarget mask.\n\t(-mvms-return-codes): Document.\n\t(-mpointer-size): New option.\n\t(vms_pointer_size): Add enumeration.\n\t* config/vms/vms-opts.h: New file.\n\t* config/vms/vms.h (TARGET_OS_CPP_BUILTINS): Define\n\t__INITIAL_POINTER_SIZE.\n\t(POINTER_SIZE, SIZE_TYPE, PTRDIFF_TYPE): Adjust definition.\n\t(C_COMMON_OVERRIDE_OPTIONS): Define.\n\t(DWARF2_ADDR_SIZE): Define.\n\t* config/vms/vms.c (vms_patch_builtins): Adjust condition.\n\t* config/vms/vms-protos.h (vms_c_common_override_options):\n\tNew prototype.\n\t* config/vms/vms-c.c (vms_pragma_pointer_size): Ignore pragma\n\tif -mno-pointer-size.\n\t(vms_c_common_override_options): New function.\n\t* config/ia64/vms.h (TARGET_DEFAULT): Remove MASK_MALLOC64.\n\t* config/alpha/vms.h (TARGET_DEFAULT): Remove MASK_MALLOC64.\n\t(MALLOC_ABI_ALIGNMENT): Use flag_vms_malloc64\n\tand flag_vms_pointer_size.\n\t(MASK_RETURN_ADDR): Set according to flag_vms_pointer_size.\n\t* config.gcc (*-*-*vms*): Define xm_file.\n\t(alpha*-dec-*vms*): Do not define xm_file.\n\t(alpha64-dec-*vms*): Remove.\n\t(ia64-hp-*vms*): Do not define xm_file.  Simplify tm_file\n\tand tmake_file.\n\nlibgcc/\n2012-03-12  Tristan Gingold  <gingold@adacore.com>\n\n\t* config/alpha/t-vms: Define HOST_LIBGCC2_CFLAGS.\n\t* config/ia64/t-vms: Likewise.\n\ngcc/ada/\n2012-03-12  Tristan Gingold  <gingold@adacore.com>\n\n\t* gcc-interface/decl.c (gnat_to_gnu_param): Use flag_vms_malloc64\n\tinstead of TARGET_MALLOC64.\n\t* gcc-interface/gigi.h (flag_vms_malloc64): Define instead\n\tof TARGET_MALLOC64.\n\nFrom-SVN: r185224", "tree": {"sha": "6fb6df38c14e64460a642d25c2d284aef453c48a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fb6df38c14e64460a642d25c2d284aef453c48a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10ee90e9fe6751acde4f9de329eeb8c4460cf39d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ee90e9fe6751acde4f9de329eeb8c4460cf39d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10ee90e9fe6751acde4f9de329eeb8c4460cf39d"}], "stats": {"total": 248, "additions": 172, "deletions": 76}, "files": [{"sha": "faddb0bcb7aac2231f824a1438fadfb69c713d7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -1,3 +1,34 @@\n+2012-03-12  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* config/vms/vms.opt: Add vms-opts.h header.\n+\t(mmalloc64): Use flag_vms_malloc64 flag instead of MALLOC64\n+\ttarget mask.\n+\t(-mvms-return-codes): Document.\n+\t(-mpointer-size): New option.\n+\t(vms_pointer_size): Add enumeration.\n+\t* config/vms/vms-opts.h: New file.\n+\t* config/vms/vms.h (TARGET_OS_CPP_BUILTINS): Define\n+\t__INITIAL_POINTER_SIZE.\n+\t(POINTER_SIZE, SIZE_TYPE, PTRDIFF_TYPE): Adjust definition.\n+\t(C_COMMON_OVERRIDE_OPTIONS): Define.\n+\t(DWARF2_ADDR_SIZE): Define.\n+\t* config/vms/vms.c (vms_patch_builtins): Adjust condition.\n+\t* config/vms/vms-protos.h (vms_c_common_override_options):\n+\tNew prototype.\n+\t* config/vms/vms-c.c (vms_pragma_pointer_size): Ignore pragma\n+\tif -mno-pointer-size.\n+\t(vms_c_common_override_options): New function.\n+\t* config/ia64/vms.h (TARGET_DEFAULT): Remove MASK_MALLOC64.\n+\t* config/alpha/vms.h (TARGET_DEFAULT): Remove MASK_MALLOC64.\n+\t(MALLOC_ABI_ALIGNMENT): Use flag_vms_malloc64\n+\tand flag_vms_pointer_size.\n+\t(MASK_RETURN_ADDR): Set according to flag_vms_pointer_size.\n+\t* config.gcc (*-*-*vms*): Define xm_file.\n+\t(alpha*-dec-*vms*): Do not define xm_file.\n+\t(alpha64-dec-*vms*): Remove.\n+\t(ia64-hp-*vms*): Do not define xm_file.  Simplify tm_file\n+\tand tmake_file.\n+\n 2012-03-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/51721"}, {"sha": "3989168aaa76aab00f4d9182e267800b1e357908", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -1,3 +1,10 @@\n+2012-03-12  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_param): Use flag_vms_malloc64\n+\tinstead of TARGET_MALLOC64.\n+\t* gcc-interface/gigi.h (flag_vms_malloc64): Define instead\n+\tof TARGET_MALLOC64.\n+\n 2012-03-09  Robert Dewar  <dewar@adacore.com>\n \n \t* a-direct.adb, comperr.adb, freeze.adb: Minor reformatting."}, {"sha": "120628e4765e4ae54517e44940e68edb6e4983ab", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -5488,7 +5488,7 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n \n   /* VMS descriptors are themselves passed by reference.  */\n   if (mech == By_Short_Descriptor ||\n-      (mech == By_Descriptor && TARGET_ABI_OPEN_VMS && !TARGET_MALLOC64))\n+      (mech == By_Descriptor && TARGET_ABI_OPEN_VMS && !flag_vms_malloc64))\n     gnu_param_type\n       = build_pointer_type (build_vms_descriptor32 (gnu_param_type,\n \t\t\t\t\t\t    Mechanism (gnat_param),"}, {"sha": "f7d787bb012ddb91fb7b343b8d3378f9edcfe66a", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -999,13 +999,11 @@ extern void enumerate_modes (void (*f) (const char *, int, int, int, int, int,\n    intrusive preprocessor directives.  */\n #ifndef TARGET_ABI_OPEN_VMS\n #define TARGET_ABI_OPEN_VMS 0\n-#endif\n \n-/* VMS macro set by default, when clear forces 32bit mallocs and 32bit\n+/* VMS option set by default, when clear forces 32bit mallocs and 32bit\n    Descriptors. Always used in combination with TARGET_ABI_OPEN_VMS\n    so no effect on non-VMS systems.  */\n-#ifndef TARGET_MALLOC64\n-#define TARGET_MALLOC64 0\n+#define flag_vms_malloc64 0\n #endif\n \n /* Convenient shortcuts.  */"}, {"sha": "aa30518d254521315472902bc08da5bc9bdf8221", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -737,6 +737,7 @@ case ${target} in\n   extra_objs=\"vms.o\"\n   target_gtfiles=\"$target_gtfiles \\$(srcdir)/config/vms/vms.c\"\n   tm_p_file=\"${tm_p_file} vms/vms-protos.h\"\n+  xm_file=\"vms/xm-vms.h\"\n   c_target_objs=\"vms-c.o\"\n   cxx_target_objs=\"vms-c.o\"\n   if test x$gnu_ld != xyes; then\n@@ -811,14 +812,8 @@ alpha*-dec-osf5.1*)\n \t    ;;\n \tesac\n \t;;\n-alpha64-dec-*vms*)\n-\ttm_file=\"${tm_file} vms/vms.h vms/vms64.h alpha/vms.h\"\n-\txm_file=\"alpha/xm-vms.h vms/xm-vms64.h\"\n-\ttmake_file=\"${tmake_file} vms/t-vms64 alpha/t-vms\"\n-\t;;\n alpha*-dec-*vms*)\n \ttm_file=\"${tm_file} vms/vms.h alpha/vms.h\"\n-\txm_file=\"alpha/xm-vms.h\"\n \ttmake_file=\"${tmake_file} alpha/t-vms\"\n \t;;\n arm-wrs-vxworks)\n@@ -1556,9 +1551,8 @@ ia64*-*-hpux*)\n \tesac\n \t;;\n ia64-hp-*vms*)\n-\ttm_file=\"${tm_file} elfos.h ia64/sysv4.h ia64/elf.h vms/vms.h vms/vms64.h ia64/vms.h\"\n-\txm_file=\"vms/xm-vms.h vms/xm-vms64.h\"\n-\ttmake_file=\"${tmake_file} vms/t-vms64 ia64/t-ia64\"\n+\ttm_file=\"${tm_file} elfos.h ia64/sysv4.h vms/vms.h ia64/vms.h\"\n+\ttmake_file=\"${tmake_file} ia64/t-ia64\"\n \ttarget_cpu_default=\"0\"\n \tif test x$gas = xyes\n \tthen"}, {"sha": "2422da942d733891db4409ee430d995be11f4f8b", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -44,11 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n     } while (0)\n \n #undef TARGET_DEFAULT\n-#if POINTER_SIZE == 64\n-#define TARGET_DEFAULT (MASK_FPREGS | MASK_GAS | MASK_MALLOC64)\n-#else\n #define TARGET_DEFAULT (MASK_FPREGS | MASK_GAS)\n-#endif\n \n #define VMS_DEBUG_MAIN_POINTER \"TRANSFER$BREAK$GO\"\n \n@@ -58,7 +54,9 @@ along with GCC; see the file COPYING3.  If not see\n \n /* The maximum alignment 'malloc' honors.  */\n #undef  MALLOC_ABI_ALIGNMENT\n-#define MALLOC_ABI_ALIGNMENT ((TARGET_MALLOC64 ? 16 : 8) * BITS_PER_UNIT)\n+#define MALLOC_ABI_ALIGNMENT \\\n+  ((flag_vms_malloc64 && flag_vms_pointer_size != VMS_POINTER_SIZE_NONE \\\n+   ? 16 : 8) * BITS_PER_UNIT)\n \n #undef FIXED_REGISTERS\n #define FIXED_REGISTERS  \\\n@@ -160,11 +158,12 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n-#if POINTER_SIZE == 64\n /* Eventhough pointers are 64bits, only 32bit ever remain significant in code\n    addresses.  */\n-#define MASK_RETURN_ADDR (GEN_INT (0xffffffff))\n-#endif\n+#define MASK_RETURN_ADDR                                \\\n+  (flag_vms_pointer_size == VMS_POINTER_SIZE_NONE       \\\n+   ? constm1_rtx                                        \\\n+   : GEN_INT (0xffffffff))\n \n #undef  ASM_WEAKEN_LABEL\n #define ASM_WEAKEN_LABEL(FILE, NAME)                            \\"}, {"sha": "0c02f8a2338b8d242bb47f3246205a6b69d8aa02", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -28,11 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Need .debug_line info generated from gcc and gas.  */\n #undef TARGET_DEFAULT\n-#if POINTER_SIZE == 64\n-#define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS | MASK_MALLOC64)\n-#else\n #define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS)\n-#endif\n \n #define VMS_DEBUG_MAIN_POINTER \"TRANSFER$BREAK$GO\"\n "}, {"sha": "229846a0bf6b0df1c27adddce214d7254fa6772c", "filename": "gcc/config/vms/vms-c.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-c.c?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -335,8 +335,8 @@ handle_pragma_pointer_size (const char *pragma_name)\n static void\n vms_pragma_pointer_size (cpp_reader * ARG_UNUSED (dummy))\n {\n-  /* Ignore if 32 bit only.  */\n-  if (POINTER_SIZE != 64)\n+  /* Ignore if no -mpointer-size option.  */\n+  if (flag_vms_pointer_size == VMS_POINTER_SIZE_NONE)\n     return;\n \n   handle_pragma_pointer_size (\"pointer_size\");\n@@ -449,3 +449,20 @@ vms_c_register_includes (const char *sysroot,\n         }\n     }\n }\n+\n+void\n+vms_c_common_override_options (void)\n+{\n+  /* Initialize c_default_pointer_mode.  */\n+  switch (flag_vms_pointer_size)\n+    {\n+    case VMS_POINTER_SIZE_NONE:\n+      break;\n+    case VMS_POINTER_SIZE_32:\n+      c_default_pointer_mode = SImode;\n+      break;\n+    case VMS_POINTER_SIZE_64:\n+      c_default_pointer_mode = DImode;\n+      break;\n+    }\n+}"}, {"sha": "979ff7599f785430aeac4ef2ee33b8f273d77804", "filename": "gcc/config/vms/vms-opts.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-opts.h?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -0,0 +1,31 @@\n+/* Definitions for option handling for OpenVMS.\n+   Copyright (C) 2012\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef VMS_OPTS_H\n+#define VMS_OPTS_H\n+\n+enum vms_pointer_size\n+  {\n+    VMS_POINTER_SIZE_NONE,\n+    VMS_POINTER_SIZE_32,\n+    VMS_POINTER_SIZE_64\n+  };\n+\n+#endif"}, {"sha": "a8b9adad81c82edcfcd890bf9dd5b7618125e877", "filename": "gcc/config/vms/vms-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-protos.h?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* vms-c.c  */\n extern void vms_c_register_pragma (void);\n+extern void vms_c_common_override_options (void);\n \n /* vms.c  */\n void vms_patch_builtins (void);"}, {"sha": "4a7386f1c0824f6caef7a6317df14b651fcb56af", "filename": "gcc/config/vms/vms.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.c?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -160,9 +160,11 @@ vms_patch_builtins (void)\n           alt[1 + nlen + 2] = 0;\n           vms_add_crtl_xlat (alt, nlen + 3, res, rlen + nlen);\n \n-          use_64 = (((n->flags & VMS_CRTL_64) && POINTER_SIZE == 64)\n+          use_64 = (((n->flags & VMS_CRTL_64)\n+                     && flag_vms_pointer_size == VMS_POINTER_SIZE_64)\n                     || ((n->flags & VMS_CRTL_MALLOC)\n-                        && TARGET_MALLOC64));\n+                        && flag_vms_malloc64\n+                        && flag_vms_pointer_size != VMS_POINTER_SIZE_NONE));\n           if (!use_64)\n             vms_add_crtl_xlat (n->name, nlen, res, rlen + nlen);\n "}, {"sha": "e11b1bf4f175c53e092aa29bc25d937463451089", "filename": "gcc/config/vms/vms.h", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.h?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -21,17 +21,19 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_OBJECT_SUFFIX \".obj\"\n #define TARGET_EXECUTABLE_SUFFIX \".exe\"\n \n-#define TARGET_OS_CPP_BUILTINS()                     \\\n-  do {                                               \\\n-    builtin_define_std (\"vms\");                      \\\n-    builtin_define_std (\"VMS\");                      \\\n-    builtin_assert (\"system=vms\");                   \\\n-    SUBTARGET_OS_CPP_BUILTINS();                     \\\n-    if (POINTER_SIZE == 64)                          \\\n-      {                                              \\\n-        builtin_define (\"__LONG_POINTERS=1\");        \\\n-        builtin_define (\"__int64=long long\");        \\\n-      }                                              \\\n+#define TARGET_OS_CPP_BUILTINS()                                \\\n+  do {                                                          \\\n+    builtin_define_std (\"vms\");                                 \\\n+    builtin_define_std (\"VMS\");                                 \\\n+    builtin_assert (\"system=vms\");                              \\\n+    SUBTARGET_OS_CPP_BUILTINS();                                \\\n+    builtin_define (\"__int64=long long\");                       \\\n+    if (flag_vms_pointer_size == VMS_POINTER_SIZE_32)           \\\n+      builtin_define (\"__INITIAL_POINTER_SIZE=32\");             \\\n+    else if (flag_vms_pointer_size == VMS_POINTER_SIZE_64)      \\\n+      builtin_define (\"__INITIAL_POINTER_SIZE=64\");             \\\n+    if (POINTER_SIZE == 64)                                     \\\n+      builtin_define (\"__LONG_POINTERS=1\");                     \\\n   } while (0)\n \n extern void vms_c_register_includes (const char *, const char *, int);\n@@ -53,15 +55,25 @@ extern void vms_c_register_includes (const char *, const char *, int);\n \n /* Pointer is 32 bits but the hardware has 64-bit addresses, sign extended.  */\n #undef POINTER_SIZE\n-#define POINTER_SIZE 32\n+#define POINTER_SIZE (flag_vms_pointer_size == VMS_POINTER_SIZE_NONE ? 32 : 64)\n #define POINTERS_EXTEND_UNSIGNED 0\n \n-/* Always 32 bits.  */\n+/* FIXME: It should always be a 32 bit type.  */\n #undef SIZE_TYPE\n-#define SIZE_TYPE \"unsigned int\"\n+#define SIZE_TYPE (flag_vms_pointer_size == VMS_POINTER_SIZE_NONE ? \\\n+\t\t   \"unsigned int\" : \"long long unsigned int\")\n+/* ???: Defined as a 'int' by dec-c, but obstack.h doesn't like it.  */\n #undef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"int\"\n+#define PTRDIFF_TYPE (flag_vms_pointer_size == VMS_POINTER_SIZE_NONE ? \\\n+                      \"int\" : \"long long int\")\n+\n+#define C_COMMON_OVERRIDE_OPTIONS vms_c_common_override_options ()\n \n /* VMS doesn't support other sections than .text for code.  */\n \n #define TARGET_ASM_FUNCTION_SECTION vms_function_section\n+\n+/* Always use 8 bytes addresses in dwarf2 debug info.  The default value doesn't\n+   work as it may be 4 bytes, which won't match gas default (8 bytes for ia64),\n+   and will thus produce incorrect values.  */\n+#define DWARF2_ADDR_SIZE 8"}, {"sha": "4afe6345d7aedbab481902fcf622cdf9d8c4a5ec", "filename": "gcc/config/vms/vms.opt", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/gcc%2Fconfig%2Fvms%2Fvms.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.opt?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -16,16 +16,44 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/vms/vms-opts.h\n+\n map\n Target RejectNegative\n \n mmalloc64\n-Target Report Mask(MALLOC64)\n+Target Report Var(flag_vms_malloc64) Init(1)\n Malloc data into P2 space\n \n mdebug-main=\n Target RejectNegative Joined Var(vms_debug_main)\n Set name of main routine for the debugger\n \n mvms-return-codes\n-Target RejectNegative\n+Target Report Var(flag_vms_return_codes)\n+Use VMS exit codes instead of posix ones\n+\n+mpointer-size=\n+Target Joined Report RejectNegative Enum(vms_pointer_size) Var(flag_vms_pointer_size) Init(VMS_POINTER_SIZE_NONE)\n+-mpointer-size=[no,32,short,64,long]\tSet the default pointer size\n+\n+Enum\n+Name(vms_pointer_size) Type(enum vms_pointer_size) UnknownError(unknown pointer size model %qs)\n+\n+EnumValue\n+Enum(vms_pointer_size) String(no) Value(VMS_POINTER_SIZE_NONE)\n+\n+EnumValue\n+Enum(vms_pointer_size) String(32) Value(VMS_POINTER_SIZE_32)\n+\n+EnumValue\n+Enum(vms_pointer_size) String(short) Value(VMS_POINTER_SIZE_32)\n+\n+EnumValue\n+Enum(vms_pointer_size) String(64) Value(VMS_POINTER_SIZE_64)\n+\n+EnumValue\n+Enum(vms_pointer_size) String(long) Value(VMS_POINTER_SIZE_64)\n+\n+; This comment is to ensure we retain the blank line above."}, {"sha": "24249ce9b3f340aa1cfcfab5636c9875f08c5030", "filename": "gcc/config/vms/vms64.h", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ee90e9fe6751acde4f9de329eeb8c4460cf39d/gcc%2Fconfig%2Fvms%2Fvms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ee90e9fe6751acde4f9de329eeb8c4460cf39d/gcc%2Fconfig%2Fvms%2Fvms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms64.h?ref=10ee90e9fe6751acde4f9de329eeb8c4460cf39d", "patch": "@@ -1,29 +0,0 @@\n-/* Output variables, constants and external declarations, for GNU compiler.\n-   Copyright (C) 2001, 2007, 2009 Free Software Foundation, Inc.\n-   Contributed by Douglas Rupp (rupp@gnat.com).\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#undef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE 64\n-\n-#undef POINTER_SIZE\n-#define POINTER_SIZE 64\n-\n-/* Defaults to \"long int\" */\n-#undef SIZE_TYPE\n-#undef PTRDIFF_TYPE"}, {"sha": "4ce3398147919e5aa0ad4c00eb3bc5a46f4a26b9", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -1,3 +1,8 @@\n+2012-03-12  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* config/alpha/t-vms: Define HOST_LIBGCC2_CFLAGS.\n+\t* config/ia64/t-vms: Likewise.\n+\n 2012-03-11  Michael Hope  <michael.hope@linaro.org>\n \n        * longlong.h [ARM] (add_ssaaaa, sub_ddmmss, umul_ppmm): Enable"}, {"sha": "870e44c8dd111d271d84c56414019a259d23a0a3", "filename": "libgcc/config/alpha/t-vms", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/libgcc%2Fconfig%2Falpha%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/libgcc%2Fconfig%2Falpha%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Falpha%2Ft-vms?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -7,3 +7,5 @@ vms-dwarf2eh.o: $(srcdir)/config/alpha/vms-dwarf2eh.S\n \t$(gcc_compile) -c -x assembler-with-cpp $<\n \n LIB2ADD += $(srcdir)/config/alpha/vms-gcc_shell_handler.c\n+\n+HOST_LIBGCC2_CFLAGS=-mpointer-size=64"}, {"sha": "e95c58d8b50172c2c325766d3e2286a29f08f793", "filename": "libgcc/config/ia64/t-vms", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/libgcc%2Fconfig%2Fia64%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aba32a0959169d00b9d89b28f6d4ccc4763be8/libgcc%2Fconfig%2Fia64%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ft-vms?ref=d8aba32a0959169d00b9d89b28f6d4ccc4763be8", "patch": "@@ -5,3 +5,5 @@ crtinitS.o: $(srcdir)/config/ia64/vms-crtinit.S\n \t$(gcc_compile) -c -x assembler-with-cpp $<\n \n LIB2ADDEH += $(srcdir)/config/ia64/fde-vms.c\n+\n+HOST_LIBGCC2_CFLAGS=-mpointer-size=64"}]}