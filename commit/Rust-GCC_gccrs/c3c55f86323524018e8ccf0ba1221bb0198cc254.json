{"sha": "c3c55f86323524018e8ccf0ba1221bb0198cc254", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNjNTVmODYzMjM1MjQwMThlOGNjZjBiYTEyMjFiYjAxOThjYzI1NA==", "commit": {"author": {"name": "Bruce Korb", "email": "ddsinc09@ix.netcom.com", "date": "1999-04-12T07:28:13Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "1999-04-12T07:28:13Z"}, "message": "make fixincludes behave like the scripts in fixinc/\n\nFrom-SVN: r26367", "tree": {"sha": "b63a84c77faecb3a4332eeca43a23dbf7bebb764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b63a84c77faecb3a4332eeca43a23dbf7bebb764"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3c55f86323524018e8ccf0ba1221bb0198cc254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c55f86323524018e8ccf0ba1221bb0198cc254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c55f86323524018e8ccf0ba1221bb0198cc254", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c55f86323524018e8ccf0ba1221bb0198cc254/comments", "author": null, "committer": null, "parents": [{"sha": "f853036b41344aace65dd9a107e08d6dbf89a5e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f853036b41344aace65dd9a107e08d6dbf89a5e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f853036b41344aace65dd9a107e08d6dbf89a5e6"}], "stats": {"total": 106, "additions": 79, "deletions": 27}, "files": [{"sha": "6d992cf9153d2485858050f39f8def4804ceaca5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c55f86323524018e8ccf0ba1221bb0198cc254/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c55f86323524018e8ccf0ba1221bb0198cc254/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3c55f86323524018e8ccf0ba1221bb0198cc254", "patch": "@@ -1,5 +1,8 @@\n 1999-04-12  Bruce Korb <ddsinc09@ix.netcom.com>\n \n+\t* fixincludes:\n+\tmake fixincludes behave like the scripts in fixinc/\n+\n \t* Makefile.in( stmp-fixinc ):\n \tensure the SHELL value is that of the make\n "}, {"sha": "c9a65218555559a06d7e26c55a22a58a76a70013", "filename": "gcc/fixincludes", "status": "modified", "additions": 76, "deletions": 27, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c55f86323524018e8ccf0ba1221bb0198cc254/gcc%2Ffixincludes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c55f86323524018e8ccf0ba1221bb0198cc254/gcc%2Ffixincludes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixincludes?ref=c3c55f86323524018e8ccf0ba1221bb0198cc254", "patch": "@@ -7,53 +7,68 @@\n \n # Directory containing the original header files.\n # (This was named INCLUDES, but that conflicts with a name in Makefile.in.)\n-INPUT=${2-${INPUT-/usr/include}}\n+if [ \"x$1\" = \"x\" ]\n+then echo fixincludes: no output directory specified\n+exit 1\n+fi\n \n-# Directory in which to store the results.\n-LIB=${1?\"fixincludes: output directory not specified\"}\n+LIB=${1}\n+shift\n+\n+# Make sure it exists.\n+if [ ! -d $LIB ]; then\n+  mkdir $LIB || {\n+    echo fixincludes:  output dir '`'$LIB\"' cannot be created\"\n+    exit 1\n+  }\n+else\n+  ( \\cd $LIB && touch DONE && rm DONE ) || {\n+    echo fixincludes:  output dir '`'$LIB\"' is an invalid directory\"\n+    exit 1\n+  }\n+fi\n \n # Define what target system we're fixing.\n+#\n if test -r ./Makefile; then\n-\ttarget_canonical=\"`sed -n -e 's,^target[ \t]*=[ \t]*\\(.*\\)$,\\1,p' < Makefile`\"\n-\ttest -z \"${target_canonical}\" && target_canonical=unknown\n-else\n-\ttarget_canonical=unknown\n+  target_canonical=\"`sed -n -e 's,^target[ \t]*=[ \t]*\\(.*\\)$,\\1,p' < Makefile`\"\n fi\n \n+# If not from the Makefile, then try config.guess\n+#\n+if test -z \"${target_canonical}\" ; then\n+  if test -x ./config.guess ; then\n+    target_canonical=\"`config.guess`\" ; fi\n+  test -z \"${target_canonical}\" && target_canonical=unknown\n+fi\n+export target_canonical\n+\n+# # # # # # # # # # # # # # # # # # # # #\n+#\n # Define PWDCMD as a command to use to get the working dir\n # in the form that we want.\n PWDCMD=pwd\n-case \"`pwd`\" in\n+\n+case \"`$PWDCMD`\" in\n //*)\n-\t# On an Apollo, discard everything before `/usr'.\n-\tPWDCMD=\"eval pwd | sed -e 's,.*/usr/,/usr/,'\"\n-\t;;\n+    # On an Apollo, discard everything before `/usr'.\n+    PWDCMD=\"eval pwd | sed -e 's,.*/usr/,/usr/,'\"\n+    ;;\n esac\n \n # Original directory.\n ORIGDIR=`${PWDCMD}`\n \n-# Make sure it exists.\n-if [ ! -d $LIB ]; then\n-  mkdir $LIB || exit 1\n-fi\n-\n # Make LIB absolute only if needed to avoid problems with the amd.\n case $LIB in\n /*)\n-\t;;\n+    ;;\n *)\n-\tcd $LIB; LIB=`${PWDCMD}`\n-\t;;\n+    cd $LIB; LIB=`${PWDCMD}`\n+    ;;\n esac\n \n-# Fail if no arg to specify a directory for the output.\n-if [ x$1 = x ]\n-then echo fixincludes: no output directory specified\n-exit 1\n-fi\n-\n-echo Building fixed headers in ${LIB}\n+echo Fixing headers into ${LIB} for ${target_canonical} target\n \n # Determine whether this system has symbolic links.\n if ln -s X $LIB/ShouldNotExist 2>/dev/null; then\n@@ -66,8 +81,30 @@ else\n   LINKS=false\n fi\n \n+# # # # # # # # # # # # # # # # # # # # #\n+#\n+#  Search each input directory for broken header files.\n+#  This loop ends near the end of the file.\n+#\n+if test $# -eq 0\n+then\n+    INPUTLIST=\"/usr/include\"\n+else\n+    INPUTLIST=\"$@\"\n+fi\n+\n+for INPUT in ${INPUTLIST} ; do\n+\n+cd ${ORIGDIR}\n+\n+cd ${INPUT} || continue\n+INPUT=`${PWDCMD}`\n+\n+#\n+# # # # # # # # # # # # # # # # # # # # #\n+#\n echo Finding directories and links to directories\n-cd ${INPUT}\n+\n # Find all directories and all symlinks that point to directories.\n # Put the list in $files.\n # Each time we find a symlink, add it to newdirs\n@@ -3210,5 +3247,17 @@ for file in $files; do\n   rmdir $LIB/$file > /dev/null 2>&1\n done\n \n+# # # # # # # # # # # # # # # # # # # # #\n+#\n+# End of for INPUT directories\n+#\n+done\n+#\n+# # # # # # # # # # # # # # # # # # # # #\n+\n+cd $ORIGDIR\n+rm -f include/assert.h\n+cp ${srcdir}/assert.h include/assert.h || exit 1\n+chmod a+r include/assert.h\n \n exit 0"}]}