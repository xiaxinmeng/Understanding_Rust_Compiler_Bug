{"sha": "c2c47e8ff4a2af743d653110b385a944b3aee8fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJjNDdlOGZmNGEyYWY3NDNkNjUzMTEwYjM4NWE5NDRiM2FlZThmYg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "ulrich.weigand@linaro.org", "date": "2012-09-27T11:10:08Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2012-09-27T11:10:08Z"}, "message": "lower-subreg.c (enum classify_move_insn): Rename SIMPLE_PSEUDO_REG_MOVE to DECOMPOSABLE_SIMPLE_MOVE.\n\nChangeLog:\n\n\t* lower-subreg.c (enum classify_move_insn): Rename\n\tSIMPLE_PSEUDO_REG_MOVE to DECOMPOSABLE_SIMPLE_MOVE.\n\t(find_decomposable_subregs): Update.\n\t(decompose_multiword_subregs): Add DECOMPOSE_COPIES parameter.\n\tOnly mark pseudo-to-pseudo copies as DECOMPOSABLE_SIMPLE_MOVE\n\tif that parameter is true.\n\t(rest_of_handle_lower_subreg): Call decompose_multiword_subregs\n\twith DECOMPOSE_COPIES false.\n\t(rest_of_handle_lower_subreg2): Call decompose_multiword_subregs\n\twith DECOMPOSE_COPIES true.\n\ntestsuite/ChangeLog:\n\n\t* gcc.dg/lower-subreg-1.c: Disable on arm-*-* targets.\n\nFrom-SVN: r191805", "tree": {"sha": "ad12fa136c6fb52d55abfe233dc3ee29a13ade19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad12fa136c6fb52d55abfe233dc3ee29a13ade19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2c47e8ff4a2af743d653110b385a944b3aee8fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2c47e8ff4a2af743d653110b385a944b3aee8fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2c47e8ff4a2af743d653110b385a944b3aee8fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2c47e8ff4a2af743d653110b385a944b3aee8fb/comments", "author": null, "committer": null, "parents": [{"sha": "9472dcecc74b95a5164a57ecb689abf9dab7c5c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9472dcecc74b95a5164a57ecb689abf9dab7c5c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9472dcecc74b95a5164a57ecb689abf9dab7c5c4"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "fe86a66f6bf90ae5f099b943497e769b254c33e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2c47e8ff4a2af743d653110b385a944b3aee8fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2c47e8ff4a2af743d653110b385a944b3aee8fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2c47e8ff4a2af743d653110b385a944b3aee8fb", "patch": "@@ -1,3 +1,16 @@\n+2012-09-27  Ulrich Weigand  <ulrich.weigand@linaro.org>\n+\n+\t* lower-subreg.c (enum classify_move_insn): Rename\n+\tSIMPLE_PSEUDO_REG_MOVE to DECOMPOSABLE_SIMPLE_MOVE.\n+\t(find_decomposable_subregs): Update.\n+\t(decompose_multiword_subregs): Add DECOMPOSE_COPIES parameter.\n+\tOnly mark pseudo-to-pseudo copies as DECOMPOSABLE_SIMPLE_MOVE\n+\tif that parameter is true.\n+\t(rest_of_handle_lower_subreg): Call decompose_multiword_subregs\n+\twith DECOMPOSE_COPIES false.\n+\t(rest_of_handle_lower_subreg2): Call decompose_multiword_subregs\n+\twith DECOMPOSE_COPIES true.\n+\n 2012-09-27  Marek Polacek  <polacek@redhat.com>\n \n \t* doc/gcov.texi (Gcov Data Files): Fix a typo."}, {"sha": "ab4ca36cdcb2ad2a7812ca06cb5904581dfdae8d", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2c47e8ff4a2af743d653110b385a944b3aee8fb/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2c47e8ff4a2af743d653110b385a944b3aee8fb/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=c2c47e8ff4a2af743d653110b385a944b3aee8fb", "patch": "@@ -440,9 +440,9 @@ enum classify_move_insn\n {\n   /* Not a simple move from one location to another.  */\n   NOT_SIMPLE_MOVE,\n-  /* A simple move from one pseudo-register to another.  */\n-  SIMPLE_PSEUDO_REG_MOVE,\n-  /* A simple move involving a non-pseudo-register.  */\n+  /* A simple move we want to decompose.  */\n+  DECOMPOSABLE_SIMPLE_MOVE,\n+  /* Any other simple move.  */\n   SIMPLE_MOVE\n };\n \n@@ -518,7 +518,7 @@ find_decomposable_subregs (rtx *px, void *data)\n \n \t If this is not a simple copy from one location to another,\n \t then we can not decompose this register.  If this is a simple\n-\t copy from one pseudo-register to another, and the mode is right\n+\t copy we want to decompose, and the mode is right,\n \t then we mark the register as decomposable.\n \t Otherwise we don't say anything about this register --\n \t it could be decomposed, but whether that would be\n@@ -537,7 +537,7 @@ find_decomposable_subregs (rtx *px, void *data)\n \t    case NOT_SIMPLE_MOVE:\n \t      bitmap_set_bit (non_decomposable_context, regno);\n \t      break;\n-\t    case SIMPLE_PSEUDO_REG_MOVE:\n+\t    case DECOMPOSABLE_SIMPLE_MOVE:\n \t      if (MODES_TIEABLE_P (GET_MODE (x), word_mode))\n \t\tbitmap_set_bit (decomposable_context, regno);\n \t      break;\n@@ -553,7 +553,7 @@ find_decomposable_subregs (rtx *px, void *data)\n       enum classify_move_insn cmi_mem = NOT_SIMPLE_MOVE;\n \n       /* Any registers used in a MEM do not participate in a\n-\t SIMPLE_MOVE or SIMPLE_PSEUDO_REG_MOVE.  Do our own recursion\n+\t SIMPLE_MOVE or DECOMPOSABLE_SIMPLE_MOVE.  Do our own recursion\n \t here, and return -1 to block the parent's recursion.  */\n       for_each_rtx (&XEXP (x, 0), find_decomposable_subregs, &cmi_mem);\n       return -1;\n@@ -1336,11 +1336,11 @@ dump_choices (bool speed_p, const char *description)\n }\n \n /* Look for registers which are always accessed via word-sized SUBREGs\n-   or via copies.  Decompose these registers into several word-sized\n-   pseudo-registers.  */\n+   or -if DECOMPOSE_COPIES is true- via copies.  Decompose these\n+   registers into several word-sized pseudo-registers.  */\n \n static void\n-decompose_multiword_subregs (void)\n+decompose_multiword_subregs (bool decompose_copies)\n {\n   unsigned int max;\n   basic_block bb;\n@@ -1438,8 +1438,15 @@ decompose_multiword_subregs (void)\n \t    cmi = NOT_SIMPLE_MOVE;\n \t  else\n \t    {\n+\t      /* We mark pseudo-to-pseudo copies as decomposable during the\n+\t\t second pass only.  The first pass is so early that there is\n+\t\t good chance such moves will be optimized away completely by\n+\t\t subsequent optimizations anyway.\n+\n+\t\t However, we call find_pseudo_copy even during the first pass\n+\t\t so as to properly set up the reg_copy_graph.  */\n \t      if (find_pseudo_copy (set))\n-\t\tcmi = SIMPLE_PSEUDO_REG_MOVE;\n+\t\tcmi = decompose_copies? DECOMPOSABLE_SIMPLE_MOVE : SIMPLE_MOVE;\n \t      else\n \t\tcmi = SIMPLE_MOVE;\n \t    }\n@@ -1640,7 +1647,7 @@ gate_handle_lower_subreg (void)\n static unsigned int\n rest_of_handle_lower_subreg (void)\n {\n-  decompose_multiword_subregs ();\n+  decompose_multiword_subregs (false);\n   return 0;\n }\n \n@@ -1649,7 +1656,7 @@ rest_of_handle_lower_subreg (void)\n static unsigned int\n rest_of_handle_lower_subreg2 (void)\n {\n-  decompose_multiword_subregs ();\n+  decompose_multiword_subregs (true);\n   return 0;\n }\n "}, {"sha": "6225c761d7b766f00e0893c14c4add4683622652", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2c47e8ff4a2af743d653110b385a944b3aee8fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2c47e8ff4a2af743d653110b385a944b3aee8fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2c47e8ff4a2af743d653110b385a944b3aee8fb", "patch": "@@ -1,3 +1,7 @@\n+2012-09-27  Ulrich Weigand  <ulrich.weigand@linaro.org>\n+\n+\t* gcc.dg/lower-subreg-1.c: Disable on arm-*-* targets.\n+\n 2012-09-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/54703"}, {"sha": "8c7cc2c098b87faf5e6900c4dec1761b18903099", "filename": "gcc/testsuite/gcc.dg/lower-subreg-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2c47e8ff4a2af743d653110b385a944b3aee8fb/gcc%2Ftestsuite%2Fgcc.dg%2Flower-subreg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2c47e8ff4a2af743d653110b385a944b3aee8fb/gcc%2Ftestsuite%2Fgcc.dg%2Flower-subreg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flower-subreg-1.c?ref=c2c47e8ff4a2af743d653110b385a944b3aee8fb", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! { mips64 || { ia64-*-* spu-*-* tilegx-*-* } } } } } */\n+/* { dg-do compile { target { ! { mips64 || { arm-*-* ia64-*-* spu-*-* tilegx-*-* } } } } } */\n /* { dg-options \"-O -fdump-rtl-subreg1\" } */\n /* { dg-skip-if \"\" { { i?86-*-* x86_64-*-* } && x32 } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target ilp32 } */"}]}