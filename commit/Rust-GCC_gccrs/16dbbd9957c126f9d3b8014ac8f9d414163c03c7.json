{"sha": "16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZkYmJkOTk1N2MxMjZmOWQzYjgwMTRhYzhmOWQ0MTQxNjNjMDNjNw==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-10-13T08:18:50Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-10-13T08:18:50Z"}, "message": "re PR fortran/21435 (fails to open nonexisting file with status scratch)\n\n\tPR fortran/21435\n\n\t* io.c (compare_to_allowed_values): New function.\n\t(gfc_match_open): Add checks for constant values of specifiers.\n\t(gfc_match_close): Add checks for constant values of the STATUS\n\tspecifier.\n\n\t* gcc/testsuite/gfortran.dg/io_constraints_3.f90: New test.\n\t* gcc/testsuite/gfortran.dg/open_access_append_1.f90: Add checks\n\tfor compile-time warnings.\n\t* gcc/testsuite/gfortran.dg/pr20163-2.f: Likewise.\n\t* gcc/testsuite/gfortran.dg/iostat_2.f90: Likewise.\n\t* gcc/testsuite/gfortran.dg/label_4.f90: Delete the temporary\n\tfile.\n\t* gcc/testsuite/gfortran.dg/direct_io_2.f90: Add a FILE=\n\tspecifier.\n\t* gcc/testsuite/gfortran.dg/iomsg_1.f90: Add check for\n\tcompile-time warning.\n\nFrom-SVN: r117685", "tree": {"sha": "3cdf2a3d259e896bbc296aeda2f6c06d3fcb1499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cdf2a3d259e896bbc296aeda2f6c06d3fcb1499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4259dca6f29ce22b34d346322529aa206eeac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4259dca6f29ce22b34d346322529aa206eeac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4259dca6f29ce22b34d346322529aa206eeac0"}], "stats": {"total": 586, "additions": 572, "deletions": 14}, "files": [{"sha": "5d1365aa0ac862c793047efef6f24f4bb3f9a0fc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "patch": "@@ -1,3 +1,11 @@\n+2006-10-13  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/21435\n+\t* io.c (compare_to_allowed_values): New function.\n+\t(gfc_match_open): Add checks for constant values of specifiers.\n+\t(gfc_match_close): Add checks for constant values of the STATUS\n+\tspecifier.\n+\n 2006-10-12  Brooks Moses  <bmoses@stanford.edu>\n \n \t* intrinsic.texi (STAT): Fixed a format typo in sample code."}, {"sha": "20bf26215d54e1968686ff188ff112c19e26602a", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 342, "deletions": 0, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "patch": "@@ -1253,13 +1253,107 @@ gfc_resolve_open (gfc_open * open)\n }\n \n \n+\n+/* Check if a given value for a SPECIFIER is either in the list of values\n+   allowed in F95 or F2003, issuing an error message and returning a zero\n+   value if it is not allowed.  */\n+static int\n+compare_to_allowed_values (const char * specifier, const char * allowed[],\n+\t\t\t   const char * allowed_f2003[], \n+\t\t\t   const char * allowed_gnu[], char * value,\n+\t\t\t   const char * statement, bool warn)\n+{\n+  int i;\n+  unsigned int len;\n+\n+  len = strlen(value);\n+  if (len > 0)\n+  {\n+    for (len--; len > 0; len--)\n+      if (value[len] != ' ')\n+\tbreak;\n+    len++;\n+  }\n+\n+  for (i = 0; allowed[i]; i++)\n+    if (len == strlen(allowed[i])\n+\t&& strncasecmp (value, allowed[i], strlen(allowed[i])) == 0)\n+      return 1;\n+\n+  for (i = 0; allowed_f2003 && allowed_f2003[i]; i++)\n+    if (len == strlen(allowed_f2003[i])\n+\t&& strncasecmp (value, allowed_f2003[i], strlen(allowed_f2003[i])) == 0)\n+      {\n+\tnotification n = gfc_notification_std (GFC_STD_F2003);\n+\n+\tif (n == WARNING || (warn && n == ERROR))\n+\t  {\n+\t    gfc_warning (\"Fortran 2003: %s specifier in %s statement at %C \"\n+\t\t\t \"has value '%s'\", specifier, statement,\n+\t\t\t allowed_f2003[i]);\n+\t    return 1;\n+\t  }\n+\telse\n+\t  if (n == ERROR)\n+\t    {\n+\t      gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: %s specifier in \"\n+\t\t\t      \"%s statement at %C has value '%s'\", specifier,\n+\t\t\t      statement, allowed_f2003[i]);\n+\t      return 0;\n+\t    }\n+\n+\t/* n == SILENT */\n+\treturn 1;\n+      }\n+\n+  for (i = 0; allowed_gnu && allowed_gnu[i]; i++)\n+    if (len == strlen(allowed_gnu[i])\n+\t&& strncasecmp (value, allowed_gnu[i], strlen(allowed_gnu[i])) == 0)\n+      {\n+\tnotification n = gfc_notification_std (GFC_STD_GNU);\n+\n+\tif (n == WARNING || (warn && n == ERROR))\n+\t  {\n+\t    gfc_warning (\"Extension: %s specifier in %s statement at %C \"\n+\t\t\t \"has value '%s'\", specifier, statement,\n+\t\t\t allowed_gnu[i]);\n+\t    return 1;\n+\t  }\n+\telse\n+\t  if (n == ERROR)\n+\t    {\n+\t      gfc_notify_std (GFC_STD_GNU, \"Extension: %s specifier in \"\n+\t\t\t      \"%s statement at %C has value '%s'\", specifier,\n+\t\t\t      statement, allowed_gnu[i]);\n+\t      return 0;\n+\t    }\n+\n+\t/* n == SILENT */\n+\treturn 1;\n+      }\n+\n+  if (warn)\n+    {\n+      gfc_warning (\"%s specifier in %s statement at %C has invalid value '%s'\",\n+\t\t   specifier, statement, value);\n+      return 1;\n+    }\n+  else\n+    {\n+      gfc_error (\"%s specifier in %s statement at %C has invalid value '%s'\",\n+\t\t specifier, statement, value);\n+      return 0;\n+    }\n+}\n+\n /* Match an OPEN statement.  */\n \n match\n gfc_match_open (void)\n {\n   gfc_open *open;\n   match m;\n+  bool warn;\n \n   m = gfc_match_char ('(');\n   if (m == MATCH_NO)\n@@ -1303,6 +1397,240 @@ gfc_match_open (void)\n       goto cleanup;\n     }\n \n+  warn = (open->err || open->iostat) ? true : false;\n+  /* Checks on the ACCESS specifier.  */\n+  if (open->access && open->access->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * access_f95[] = { \"SEQUENTIAL\", \"DIRECT\", NULL };\n+      static const char * access_f2003[] = { \"STREAM\", NULL };\n+      static const char * access_gnu[] = { \"APPEND\", NULL };\n+\n+      if (!compare_to_allowed_values (\"ACCESS\", access_f95, access_f2003,\n+\t\t\t\t      access_gnu,\n+\t\t\t\t      open->access->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+    }\n+\n+  /* Checks on the ACTION specifier.  */\n+  if (open->action && open->action->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * action[] = { \"READ\", \"WRITE\", \"READWRITE\", NULL };\n+\n+      if (!compare_to_allowed_values (\"ACTION\", action, NULL, NULL,\n+\t\t\t\t      open->action->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+    }\n+\n+  /* Checks on the ASYNCHRONOUS specifier.  */\n+  /* TODO: code is ready, just needs uncommenting when async I/O support\n+     is added ;-)\n+  if (open->asynchronous && open->asynchronous->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * asynchronous[] = { \"YES\", \"NO\", NULL };\n+\n+      if (!compare_to_allowed_values\n+\t\t(\"action\", asynchronous, NULL, NULL,\n+\t\t open->asynchronous->value.character.string, \"OPEN\", warn))\n+\tgoto cleanup;\n+    }*/\n+  \n+  /* Checks on the BLANK specifier.  */\n+  if (open->blank && open->blank->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * blank[] = { \"ZERO\", \"NULL\", NULL };\n+\n+      if (!compare_to_allowed_values (\"BLANK\", blank, NULL, NULL,\n+\t\t\t\t      open->blank->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+    }\n+\n+  /* Checks on the DECIMAL specifier.  */\n+  /* TODO: uncomment this code when DECIMAL support is added \n+  if (open->decimal && open->decimal->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * decimal[] = { \"COMMA\", \"POINT\", NULL };\n+\n+      if (!compare_to_allowed_values (\"DECIMAL\", decimal, NULL, NULL,\n+\t\t\t\t      open->decimal->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+    } */\n+\n+  /* Checks on the DELIM specifier.  */\n+  if (open->delim && open->delim->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * delim[] = { \"APOSTROPHE\", \"QUOTE\", \"NONE\", NULL };\n+\n+      if (!compare_to_allowed_values (\"DELIM\", delim, NULL, NULL,\n+\t\t\t\t      open->delim->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+    }\n+\n+  /* Checks on the ENCODING specifier.  */\n+  /* TODO: uncomment this code when ENCODING support is added \n+  if (open->encoding && open->encoding->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * encoding[] = { \"UTF-8\", \"DEFAULT\", NULL };\n+\n+      if (!compare_to_allowed_values (\"ENCODING\", encoding, NULL, NULL,\n+\t\t\t\t      open->encoding->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+    } */\n+\n+  /* Checks on the FORM specifier.  */\n+  if (open->form && open->form->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * form[] = { \"FORMATTED\", \"UNFORMATTED\", NULL };\n+\n+      if (!compare_to_allowed_values (\"FORM\", form, NULL, NULL,\n+\t\t\t\t      open->form->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+    }\n+\n+  /* Checks on the PAD specifier.  */\n+  if (open->pad && open->pad->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * pad[] = { \"YES\", \"NO\", NULL };\n+\n+      if (!compare_to_allowed_values (\"PAD\", pad, NULL, NULL,\n+\t\t\t\t      open->pad->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+    }\n+\n+  /* Checks on the POSITION specifier.  */\n+  if (open->position && open->position->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * position[] = { \"ASIS\", \"REWIND\", \"APPEND\", NULL };\n+\n+      if (!compare_to_allowed_values (\"POSITION\", position, NULL, NULL,\n+\t\t\t\t      open->position->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+    }\n+\n+  /* Checks on the ROUND specifier.  */\n+  /* TODO: uncomment this code when ROUND support is added \n+  if (open->round && open->round->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * round[] = { \"UP\", \"DOWN\", \"ZERO\", \"NEAREST\",\n+\t\t\t\t      \"COMPATIBLE\", \"PROCESSOR_DEFINED\", NULL };\n+\n+      if (!compare_to_allowed_values (\"ROUND\", round, NULL, NULL,\n+\t\t\t\t      open->round->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+    } */\n+\n+  /* Checks on the SIGN specifier.  */\n+  /* TODO: uncomment this code when SIGN support is added \n+  if (open->sign && open->sign->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * sign[] = { \"PLUS\", \"SUPPRESS\", \"PROCESSOR_DEFINED\",\n+\t\t\t\t     NULL };\n+\n+      if (!compare_to_allowed_values (\"SIGN\", sign, NULL, NULL,\n+\t\t\t\t      open->sign->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+    } */\n+\n+#define warn_or_error(...) \\\n+{ \\\n+  if (warn) \\\n+    gfc_warning (__VA_ARGS__); \\\n+  else \\\n+    { \\\n+      gfc_error (__VA_ARGS__); \\\n+      goto cleanup; \\\n+    } \\\n+}\n+\n+  /* Checks on the RECL specifier.  */\n+  if (open->recl && open->recl->expr_type == EXPR_CONSTANT\n+      && open->recl->ts.type == BT_INTEGER\n+      && mpz_sgn (open->recl->value.integer) != 1)\n+    {\n+      warn_or_error (\"RECL in OPEN statement at %C must be positive\");\n+    }\n+\n+  /* Checks on the STATUS specifier.  */\n+  if (open->status && open->status->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * status[] = { \"OLD\", \"NEW\", \"SCRATCH\",\n+\t\"REPLACE\", \"UNKNOWN\", NULL };\n+\n+      if (!compare_to_allowed_values (\"STATUS\", status, NULL, NULL,\n+\t\t\t\t      open->status->value.character.string,\n+\t\t\t\t      \"OPEN\", warn))\n+\tgoto cleanup;\n+\n+      /* F2003, 9.4.5: If the STATUS= specifier has the value NEW or REPLACE,\n+         the FILE= specifier shall appear.  */\n+      if (open->file == NULL &&\n+\t  (strncasecmp (open->status->value.character.string, \"replace\", 7) == 0\n+\t  || strncasecmp (open->status->value.character.string, \"new\", 3) == 0))\n+\t{\n+\t  warn_or_error (\"The STATUS specified in OPEN statement at %C is '%s' \"\n+\t\t\t \"and no FILE specifier is present\",\n+\t\t\t open->status->value.character.string);\n+\t}\n+\n+      /* F2003, 9.4.5: If the STATUS= specifier has the value SCRATCH,\n+\t the FILE= specifier shall not appear.  */\n+      if (strncasecmp (open->status->value.character.string, \"scratch\", 7) == 0\n+\t  && open->file)\n+\t{\n+\t  warn_or_error (\"The STATUS specified in OPEN statement at %C cannot \"\n+\t\t\t \"have the value SCRATCH if a FILE specifier \"\n+\t\t\t \"is present\");\n+\t}\n+    }\n+\n+  /* Things that are not allowed for unformatted I/O.  */\n+  if (open->form && open->form->expr_type == EXPR_CONSTANT\n+      && (open->delim\n+\t  /* TODO uncomment this code when F2003 support is finished */\n+\t  /* || open->decimal || open->encoding || open->round\n+\t     || open->sign */\n+\t  || open->pad || open->blank)\n+      && strncasecmp (open->form->value.character.string,\n+\t\t      \"unformatted\", 11) == 0)\n+    {\n+      const char * spec = (open->delim ? \"DELIM \" : (open->pad ? \"PAD \" :\n+\t    open->blank ? \"BLANK \" : \"\"));\n+\n+      warn_or_error (\"%sspecifier at %C not allowed in OPEN statement for \"\n+\t\t     \"unformatted I/O\", spec);\n+    }\n+\n+  if (open->recl && open->access && open->access->expr_type == EXPR_CONSTANT\n+      && strncasecmp (open->access->value.character.string, \"stream\", 6) == 0)\n+    {\n+      warn_or_error (\"RECL specifier not allowed in OPEN statement at %C for \"\n+\t\t     \"stream I/O\");\n+    }\n+\n+  if (open->position && open->access && open->access->expr_type == EXPR_CONSTANT\n+      && !(strncasecmp (open->access->value.character.string,\n+\t\t\t\"sequential\", 10) == 0\n+\t   || strncasecmp (open->access->value.character.string,\n+\t\t\t   \"stream\", 6) == 0\n+\t   || strncasecmp (open->access->value.character.string,\n+\t\t\t   \"append\", 6) == 0))\n+    {\n+      warn_or_error (\"POSITION specifier in OPEN statement at %C only allowed \"\n+\t\t     \"for stream or sequential ACCESS\");\n+    }\n+\n+#undef warn_or_error\n+\n   new_st.op = EXEC_OPEN;\n   new_st.ext.open = open;\n   return MATCH_YES;\n@@ -1368,6 +1696,7 @@ gfc_match_close (void)\n {\n   gfc_close *close;\n   match m;\n+  bool warn;\n \n   m = gfc_match_char ('(');\n   if (m == MATCH_NO)\n@@ -1411,6 +1740,19 @@ gfc_match_close (void)\n       goto cleanup;\n     }\n \n+  warn = (close->iostat || close->err) ? true : false;\n+\n+  /* Checks on the STATUS specifier.  */\n+  if (close->status && close->status->expr_type == EXPR_CONSTANT)\n+    {\n+      static const char * status[] = { \"KEEP\", \"DELETE\" };\n+\n+      if (!compare_to_allowed_values (\"STATUS\", status, NULL, NULL,\n+\t\t\t\t      close->status->value.character.string,\n+\t\t\t\t      \"CLOSE\", warn))\n+\tgoto cleanup;\n+    }\n+\n   new_st.op = EXEC_CLOSE;\n   new_st.ext.close = close;\n   return MATCH_YES;"}, {"sha": "67419090c20e30491f9406d4d088f744fce14b4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "patch": "@@ -1,3 +1,18 @@\n+2006-10-13  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/21435\n+\t* gcc/testsuite/gfortran.dg/io_constraints_3.f90: New test.\n+\t* gcc/testsuite/gfortran.dg/open_access_append_1.f90: Add checks\n+\tfor compile-time warnings.\n+\t* gcc/testsuite/gfortran.dg/pr20163-2.f: Likewise.\n+\t* gcc/testsuite/gfortran.dg/iostat_2.f90: Likewise.\n+\t* gcc/testsuite/gfortran.dg/label_4.f90: Delete the temporary\n+\tfile.\n+\t* gcc/testsuite/gfortran.dg/direct_io_2.f90: Add a FILE=\n+\tspecifier.\n+\t* gcc/testsuite/gfortran.dg/iomsg_1.f90: Add check for\n+\tcompile-time warning.\n+\n 2006-10-12  Jan Hubicka  <jh@suse.cz>\n \n \tPR c/28419\n@@ -9,11 +24,11 @@\n \n 2006-10-12 Lee Millward <lee.millward@codesourcery.com>\n \n-       PR c++/27961\n-       * g++.dg/template/crash60.C: New test.\n-       * g++.dg/other/large-size-array.C: Adjust error markers.\n-       * g++.dg/parse/crash27.C: Likewise.\n-       * g++.dg/template/crash1.C: Likewise.\n+\tPR c++/27961\n+\t* g++.dg/template/crash60.C: New test.\n+\t* g++.dg/other/large-size-array.C: Adjust error markers.\n+\t* g++.dg/parse/crash27.C: Likewise.\n+\t* g++.dg/template/crash1.C: Likewise.\n \t\n 2006-10-12  Steve Ellcey  <sje@cup.hp.com>\n \n@@ -37,9 +52,9 @@\n \n 2006-10-11  Lee Millward  <lee.millward@codesourcery.com>\n \n-        PR c++/29024\n-        * g++.dg/parse/typedef8.C: New test.\n-        * g++.dg/other/mult-stor1.C: Adjust error markers.\n+\tPR c++/29024\n+\t* g++.dg/parse/typedef8.C: New test.\n+\t* g++.dg/other/mult-stor1.C: Adjust error markers.\n \t\n 2006-10-11  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "0ebfd7d83517def3b446790657dff8e6a337cb94", "filename": "gcc/testsuite/gfortran.dg/direct_io_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirect_io_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirect_io_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirect_io_2.f90?ref=16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "patch": "@@ -6,7 +6,7 @@\n       PROGRAM FM413\n       IMPLICIT LOGICAL (L)\n       IMPLICIT CHARACTER*14 (C)\n-      OPEN (7, ACCESS = 'DIRECT', RECL = 80, STATUS='REPLACE' )\n+      OPEN (7, ACCESS = 'DIRECT', RECL = 80, STATUS='REPLACE', FILE=\"FOO\" )\n       IRECN = 13\n       IREC = 13\n       DO 4132 I = 1,100"}, {"sha": "086e488eda8ebb4d9e93720ffb125bdda3b13b2c", "filename": "gcc/testsuite/gfortran.dg/io_constraints_3.f90", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_3.f90?ref=16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "patch": "@@ -0,0 +1,191 @@\n+! Test some restrictions on the specifiers of OPEN and CLOSE statements.\n+! Contributed by Francois-Xavier Coudert (coudert@clipper.ens.fr)\n+!\n+! { dg-do compile }\n+! { dg-options \"-ffree-line-length-none -pedantic\" }\n+  integer,parameter :: mone = -1, zero = 0\n+  character(len=*),parameter :: foo = \"foo\"\n+  character(len=20) :: str\n+  integer :: u\n+\n+! Test for warnings, when IOSTAT is used\n+\n+  open(10, iostat=u,access=\"sequential   \")\n+  open(10, iostat=u,access=\"sequential   u\") ! { dg-warning \"ACCESS specifier in OPEN statement\" }\n+  open(10, iostat=u,access=foo) ! { dg-warning \"ACCESS specifier in OPEN statement\" }\n+  open(10, iostat=u,access=\"direct\")\n+  open(10, iostat=u,access=\"stream\")\n+  open(10, iostat=u,access=\"append\") ! { dg-warning \"Extension: ACCESS specifier in OPEN statement\" }\n+\n+  open(10, iostat=u,action=\"read\")\n+  open(10, iostat=u,action=\"write\")\n+  open(10, iostat=u,action=\"readwrite\")\n+  open(10, iostat=u,action=foo) ! { dg-warning \"ACTION specifier in OPEN statement\" }\n+\n+  open(10, iostat=u,blank=\"ZERO\")\n+  open(10, iostat=u,blank=\"nUlL\")\n+  open(10, iostat=u,blank=\"NULLL\") ! { dg-warning \"BLANK specifier in OPEN statement\" }\n+\n+  open(10, iostat=u,delim=\"apostrophe\")\n+  open(10, iostat=u,delim=\"quote\")\n+  open(10, iostat=u,delim=\"none\")\n+  open(10, iostat=u,delim=\"\") ! { dg-warning \"DELIM specifier in OPEN statement\" }\n+\n+  open(10, iostat=u,form=\"formatted\")\n+  open(10, iostat=u,form=\"unformatted\")\n+  open(10, iostat=u,form=\"default\") ! { dg-warning \"FORM specifier in OPEN statement\" }\n+\n+  open(10, iostat=u,pad=\"yes\")\n+  open(10, iostat=u,pad=\"no\")\n+  open(10, iostat=u,pad=foo) ! { dg-warning \"PAD specifier in OPEN statement\" }\n+\n+  open(10, iostat=u,position=\"asis\")\n+  open(10, iostat=u,position=\"rewind\")\n+  open(10, iostat=u,position=\"append\")\n+  open(10, iostat=u,position=foo) ! { dg-warning \"POSITION specifier in OPEN statement\" }\n+\n+  open(10, iostat=u,recl=\"ee\") ! { dg-warning \"must be of type INTEGER\" }\n+  open(10, iostat=u,recl=0.4) ! { dg-warning \"must be of type INTEGER\" }\n+  open(10, iostat=u,recl=zero) ! { dg-warning \"must be positive\" }\n+  open(10, iostat=u,recl=mone) ! { dg-warning \"must be positive\" }\n+\n+  open(10, iostat=u,status=\"unknown\")\n+  open(10, iostat=u,status=\"old\")\n+  open(10, iostat=u,status=foo) ! { dg-warning \"STATUS specifier in OPEN statement\" }\n+  \n+  open(10, iostat=u,status=\"new\") ! { dg-warning \"no FILE specifier is present\" }\n+  open(10, iostat=u,status=\"replace   \") ! { dg-warning \"no FILE specifier is present\" }\n+  open(10, iostat=u,status=\"scratch\",file=str) ! { dg-warning \"cannot have the value SCRATCH if a FILE specifier is present\" }\n+\n+  open(10, iostat=u,form=\"unformatted\",delim=\"none\") ! { dg-warning \"not allowed in OPEN statement for unformatted I/O\" }\n+  open(10, iostat=u,form=\"unformatted\",pad=\"yes\") ! { dg-warning \"not allowed in OPEN statement for unformatted I/O\" }\n+  open(10, iostat=u,form=\"unformatted\",blank=\"null\") ! { dg-warning \"not allowed in OPEN statement for unformatted I/O\" }\n+\n+  open(10, iostat=u,access=\"direct\",position=\"append\") ! { dg-warning \"only allowed for stream or sequential ACCESS\" }\n+\n+  close(10, iostat=u,status=\"keep\")\n+  close(10, iostat=u,status=\"delete\")\n+  close(10, iostat=u,status=foo) ! { dg-warning \"STATUS specifier in CLOSE statement\" }\n+\n+\n+\n+! Test for warnings, when an ERR label is specified\n+\n+  open(10, err=99,access=\"sequential   \")\n+  open(10, err=99,access=\"sequential   u\") ! { dg-warning \"ACCESS specifier in OPEN statement\" }\n+  open(10, err=99,access=foo) ! { dg-warning \"ACCESS specifier in OPEN statement\" }\n+  open(10, err=99,access=\"direct\")\n+  open(10, err=99,access=\"stream\")\n+  open(10, err=99,access=\"append\") ! { dg-warning \"Extension: ACCESS specifier in OPEN statement\" }\n+\n+  open(10, err=99,action=\"read\")\n+  open(10, err=99,action=\"write\")\n+  open(10, err=99,action=\"readwrite\")\n+  open(10, err=99,action=foo) ! { dg-warning \"ACTION specifier in OPEN statement\" }\n+\n+  open(10, err=99,blank=\"ZERO\")\n+  open(10, err=99,blank=\"nUlL\")\n+  open(10, err=99,blank=\"NULLL\") ! { dg-warning \"BLANK specifier in OPEN statement\" }\n+\n+  open(10, err=99,delim=\"apostrophe\")\n+  open(10, err=99,delim=\"quote\")\n+  open(10, err=99,delim=\"none\")\n+  open(10, err=99,delim=\"\") ! { dg-warning \"DELIM specifier in OPEN statement\" }\n+\n+  open(10, err=99,form=\"formatted\")\n+  open(10, err=99,form=\"unformatted\")\n+  open(10, err=99,form=\"default\") ! { dg-warning \"FORM specifier in OPEN statement\" }\n+\n+  open(10, err=99,pad=\"yes\")\n+  open(10, err=99,pad=\"no\")\n+  open(10, err=99,pad=foo) ! { dg-warning \"PAD specifier in OPEN statement\" }\n+\n+  open(10, err=99,position=\"asis\")\n+  open(10, err=99,position=\"rewind\")\n+  open(10, err=99,position=\"append\")\n+  open(10, err=99,position=foo) ! { dg-warning \"POSITION specifier in OPEN statement\" }\n+\n+  open(10, err=99,recl=\"ee\") ! { dg-warning \"must be of type INTEGER\" }\n+  open(10, err=99,recl=0.4) ! { dg-warning \"must be of type INTEGER\" }\n+  open(10, err=99,recl=zero) ! { dg-warning \"must be positive\" }\n+  open(10, err=99,recl=mone) ! { dg-warning \"must be positive\" }\n+\n+  open(10, err=99,status=\"unknown\")\n+  open(10, err=99,status=\"old\")\n+  open(10, err=99,status=foo) ! { dg-warning \"STATUS specifier in OPEN statement\" }\n+  \n+  open(10, err=99,status=\"new\") ! { dg-warning \"no FILE specifier is present\" }\n+  open(10, err=99,status=\"replace   \") ! { dg-warning \"no FILE specifier is present\" }\n+  open(10, err=99,status=\"scratch\",file=str) ! { dg-warning \"cannot have the value SCRATCH if a FILE specifier is present\" }\n+\n+  open(10, err=99,form=\"unformatted\",delim=\"none\") ! { dg-warning \"not allowed in OPEN statement for unformatted I/O\" }\n+  open(10, err=99,form=\"unformatted\",pad=\"yes\") ! { dg-warning \"not allowed in OPEN statement for unformatted I/O\" }\n+  open(10, err=99,form=\"unformatted\",blank=\"null\") ! { dg-warning \"not allowed in OPEN statement for unformatted I/O\" }\n+\n+  open(10, err=99,access=\"direct\",position=\"append\") ! { dg-warning \"only allowed for stream or sequential ACCESS\" }\n+\n+  close(10, err=99,status=\"keep\")\n+  close(10, err=99,status=\"delete\")\n+  close(10, err=99,status=foo) ! { dg-warning \"STATUS specifier in CLOSE statement\" }\n+\n+ 99 continue\n+\n+! Test for errors\n+\n+  open(10,access=\"sequential   \")\n+  open(10,access=\"sequential   u\") ! { dg-error \"ACCESS specifier in OPEN statement\" }\n+  open(10,access=foo) ! { dg-error \"ACCESS specifier in OPEN statement\" }\n+  open(10,access=\"direct\")\n+  open(10,access=\"stream\")\n+  open(10,access=\"append\") ! { dg-warning \"Extension: ACCESS specifier in OPEN statement\" }\n+\n+  open(10,action=\"read\")\n+  open(10,action=\"write\")\n+  open(10,action=\"readwrite\")\n+  open(10,action=foo) ! { dg-error \"ACTION specifier in OPEN statement\" }\n+\n+  open(10,blank=\"ZERO\")\n+  open(10,blank=\"nUlL\")\n+  open(10,blank=\"NULLL\") ! { dg-error \"BLANK specifier in OPEN statement\" }\n+\n+  open(10,delim=\"apostrophe\")\n+  open(10,delim=\"quote\")\n+  open(10,delim=\"none\")\n+  open(10,delim=\"\") ! { dg-error \"DELIM specifier in OPEN statement\" }\n+\n+  open(10,form=\"formatted\")\n+  open(10,form=\"unformatted\")\n+  open(10,form=\"default\") ! { dg-error \"FORM specifier in OPEN statement\" }\n+\n+  open(10,pad=\"yes\")\n+  open(10,pad=\"no\")\n+  open(10,pad=foo) ! { dg-error \"PAD specifier in OPEN statement\" }\n+\n+  open(10,position=\"asis\")\n+  open(10,position=\"rewind\")\n+  open(10,position=\"append\")\n+  open(10,position=foo) ! { dg-error \"POSITION specifier in OPEN statement\" }\n+\n+  open(10,recl=\"ee\") ! { dg-error \"must be of type INTEGER\" }\n+  open(10,recl=0.4) ! { dg-error \"must be of type INTEGER\" }\n+  open(10,recl=zero) ! { dg-error \"must be positive\" }\n+  open(10,recl=mone) ! { dg-error \"must be positive\" }\n+\n+  open(10,status=\"unknown\")\n+  open(10,status=\"old\")\n+  open(10,status=foo) ! { dg-error \"STATUS specifier in OPEN statement\" }\n+  \n+  open(10,status=\"new\") ! { dg-error \"no FILE specifier is present\" }\n+  open(10,status=\"replace   \") ! { dg-error \"no FILE specifier is present\" }\n+  open(10,status=\"scratch\",file=str) ! { dg-error \"cannot have the value SCRATCH if a FILE specifier is present\" }\n+\n+  open(10,form=\"unformatted\",delim=\"none\") ! { dg-error \"not allowed in OPEN statement for unformatted I/O\" }\n+  open(10,form=\"unformatted\",pad=\"yes\") ! { dg-error \"not allowed in OPEN statement for unformatted I/O\" }\n+  open(10,form=\"unformatted\",blank=\"null\") ! { dg-error \"not allowed in OPEN statement for unformatted I/O\" }\n+\n+  open(10,access=\"direct\",position=\"append\") ! { dg-error \"only allowed for stream or sequential ACCESS\" }\n+\n+  close(10,status=\"keep\")\n+  close(10,status=\"delete\")\n+  close(10,status=foo) ! { dg-error \"STATUS specifier in CLOSE statement\" }\n+end"}, {"sha": "0916fd861f11a3f5c5bd530ad1a0e5e7d5bb9a49", "filename": "gcc/testsuite/gfortran.dg/iomsg_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fiomsg_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fiomsg_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiomsg_1.f90?ref=16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "patch": "@@ -22,7 +22,7 @@ program iomsg_test\n   if (ch .ne. 'Bad unit number in OPEN statement') call abort\n \n   ! Test iomsg with close\n-  close(23,status=\"no_idea\", err=500, iomsg=ch)\n+  close(23,status=\"no_idea\", err=500, iomsg=ch) ! { dg-warning \"STATUS specifier in CLOSE statement.*has invalid value\" }\n 500 continue\n   if (ch .ne. \"Bad STATUS parameter in CLOSE statement\") call abort\n end program iomsg_test"}, {"sha": "afda93e8092d7e8560a5223b810b4db5ee69d257", "filename": "gcc/testsuite/gfortran.dg/iostat_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fiostat_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fiostat_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiostat_2.f90?ref=16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "patch": "@@ -1,7 +1,7 @@\n ! PR libfortran/23784\n ! { dg-do run }\n   integer i\n-  close(10, status=\"whatever\", iostat=i)\n+  close(10, status=\"whatever\", iostat=i) ! { dg-warning \"STATUS specifier in CLOSE statement.*has invalid value\" }\n   if (i == 0) call abort()\n   write(17,*) 'foo'\n   close(17, status=\"delete\")"}, {"sha": "ade0f167f81faaea9f40c1c64e35585d2e85cb92", "filename": "gcc/testsuite/gfortran.dg/label_4.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Flabel_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Flabel_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flabel_4.f90?ref=16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "patch": "@@ -5,4 +5,5 @@\n   open(unit=12,err=99)\n 99 print *,\"could not open file ...\"\n 98 continue ! { dg-warning \"Label 98 .* defined but not used\" }\n+  close(unit=12,status=\"delete\")\n end"}, {"sha": "8dae327968df72509d287db733d1bf45d2b38763", "filename": "gcc/testsuite/gfortran.dg/open_access_append_1.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_access_append_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_access_append_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_access_append_1.f90?ref=16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "patch": "@@ -3,10 +3,10 @@\n   open (10,file=\"foo\")\n   close (10,status=\"delete\")\n \n-  open (10,file=\"foo\",access=\"append\") ! { dg-output \".*Extension.*\" }\n+  open (10,file=\"foo\",access=\"append\") ! { dg-warning \"Extension: ACCESS specifier in OPEN statement\" }\n   write (10,*) 42\n   close (10,status=\"keep\")\n-  open (10,file=\"foo\",access=\"append\") ! { dg-output \".*Extension.*\" }\n+  open (10,file=\"foo\",access=\"append\") ! { dg-warning \"Extension: ACCESS specifier in OPEN statement\" }\n   write (10,*) -42\n   close (10,status=\"keep\")\n \n@@ -18,3 +18,4 @@\n   close (10,status=\"delete\")\n \n   end\n+! { dg-output \".*Extension.*Extension\" } "}, {"sha": "0638aeaf9ddbe35b24436bc31565185a81323056", "filename": "gcc/testsuite/gfortran.dg/pr20163-2.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr20163-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16dbbd9957c126f9d3b8014ac8f9d414163c03c7/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr20163-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr20163-2.f?ref=16dbbd9957c126f9d3b8014ac8f9d414163c03c7", "patch": "@@ -1,4 +1,4 @@\n-       open(10,status=\"foo\",err=100)\n+       open(10,status=\"foo\",err=100) ! { dg-warning \"STATUS specifier in OPEN statement .* has invalid value\" }\n        call abort\n   100  continue\n        open(10,status=\"scratch\")"}]}