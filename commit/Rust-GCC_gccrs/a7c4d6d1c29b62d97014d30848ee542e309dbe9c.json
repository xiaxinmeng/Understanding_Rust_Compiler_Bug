{"sha": "a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdjNGQ2ZDFjMjliNjJkOTcwMTRkMzA4NDhlZTU0MmUzMDlkYmU5Yw==", "commit": {"author": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-10-15T07:44:15Z"}, "committer": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-10-15T07:44:15Z"}, "message": "Add missing mask[z]_roundscale_[round]_s[d,s] intrinsics\n\ngcc/\n\t* config/i386/avx512fintrin.h (_mm_mask_roundscale_ss,\n\t_mm_maskz_roundscale_ss, _mm_maskz_roundscale_round_ss,\n\t_mm_maskz_roundscale_round_ss, _mm_mask_roundscale_sd,\n\t_mm_maskz_roundscale_sd, _mm_mask_roundscale_round_sd,\n\t_mm_maskz_roundscale_round_sd): New intrinsics.\n\t(_mm_roundscale_ss, _mm_roundscale_round_ss): Use\n\t__builtin_ia32_rndscales?_mask_round builtins instead of\n\t__builtin_ia32_rndscales?_round.\n\t* config/i386/i386-builtin.def (__builtin_ia32_rndscaless_round,\n\t__builtin_ia32_rndscalesd_round): Remove.\n\t(__builtin_ia32_rndscaless_mask_round,\n\t__builtin_ia32_rndscalesd_mask_round): New intrinsics.\n\t* config/i386/sse.md\n\t(avx512f_rndscale<mode><round_saeonly_name>): Renamed to ...\n\t(avx512f_rndscale<mode><mask_scalar_name><round_saeonly_scalar_name>):\n\t ... this, adjust and add subst atrributes to make it maskable.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-vrndscaless-1.c: Add scan-assembler-times\n\tdirectives for newly expected instructions.\n\t* gcc.target/i386/avx512f-vrndscalesd-1.c: Likewise.\n\t* gcc.target/i386/avx512f-vrndscaless-2.c\n\t(avx512f_test): Add tests for new intrinsics.\n\t* gcc.target/i386/avx512f-vrndscalesd-2.c: Likewise.\n\t* gcc.target/i386/avx-1.c (__builtin_ia32_rndscalefss_round,\n\t__builtin_ia32_rndscalefsd_round): Remove.\n\t(__builtin_ia32_rndscalefss_mask_round,\n\t__builtin_ia32_rndscalefsd_mask_round): Define.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\nFrom-SVN: r276986", "tree": {"sha": "f77ae6bbe7715b5dc4dbdbf7440e13775e951c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f77ae6bbe7715b5dc4dbdbf7440e13775e951c96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/comments", "author": null, "committer": null, "parents": [{"sha": "e622a32db78300821fc1327637ec6413febc2c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e622a32db78300821fc1327637ec6413febc2c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e622a32db78300821fc1327637ec6413febc2c66"}], "stats": {"total": 426, "additions": 384, "deletions": 42}, "files": [{"sha": "40726e9635421ccc06531dd3f0a20a25ce033ca4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -1,3 +1,23 @@\n+2019-10-15  Hongyu Wang  <hongtao.wang@intel.com>\n+\n+\tPR target/92035\n+\t* config/i386/avx512fintrin.h (_mm_mask_roundscale_ss,\n+\t_mm_maskz_roundscale_ss, _mm_maskz_roundscale_round_ss,\n+\t_mm_maskz_roundscale_round_ss, _mm_mask_roundscale_sd,\n+\t_mm_maskz_roundscale_sd, _mm_mask_roundscale_round_sd,\n+\t_mm_maskz_roundscale_round_sd): New intrinsics.\n+\t(_mm_roundscale_ss, _mm_roundscale_round_ss): Use\n+\t__builtin_ia32_rndscales?_mask_round builtins instead of\n+\t__builtin_ia32_rndscales?_round.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_rndscaless_round,\n+\t__builtin_ia32_rndscalesd_round): Remove.\n+\t(__builtin_ia32_rndscaless_mask_round,\n+\t__builtin_ia32_rndscalesd_mask_round): New intrinsics.\n+\t* config/i386/sse.md\n+\t(avx512f_rndscale<mode><round_saeonly_name>): Renamed to ...\n+\t(avx512f_rndscale<mode><mask_scalar_name><round_saeonly_scalar_name>):\n+\t ... this, adjust and add subst atrributes to make it maskable.\n+\n 2019-10-15  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/92046"}, {"sha": "1d08f01a841ec9bc789d819be92e3b616ca0f952", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 235, "deletions": 23, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -9169,19 +9169,84 @@ _mm512_maskz_roundscale_round_pd (__mmask8 __A, __m512d __B,\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_roundscale_round_ss (__m128 __A, __m128 __B, const int __imm, const int __R)\n+_mm_roundscale_round_ss (__m128 __A, __m128 __B, const int __imm,\n+\t\t\t const int __R)\n+{\n+  return (__m128)\n+    __builtin_ia32_rndscaless_mask_round ((__v4sf) __A,\n+\t\t\t\t\t  (__v4sf) __B, __imm,\n+\t\t\t\t\t  (__v4sf)\n+\t\t\t\t\t  _mm_setzero_ps (),\n+\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t  __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_roundscale_round_ss (__m128 __A, __mmask8 __B, __m128 __C,\n+\t\t\t      __m128 __D, const int __imm, const int __R)\n {\n-  return (__m128) __builtin_ia32_rndscaless_round ((__v4sf) __A,\n-\t\t\t\t\t\t   (__v4sf) __B, __imm, __R);\n+  return (__m128)\n+    __builtin_ia32_rndscaless_mask_round ((__v4sf) __C,\n+\t\t\t\t\t  (__v4sf) __D, __imm,\n+\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t  (__mmask8) __B,\n+\t\t\t\t\t  __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_roundscale_round_ss (__mmask8 __A, __m128 __B, __m128 __C,\n+\t\t\t       const int __imm, const int __R)\n+{\n+  return (__m128)\n+    __builtin_ia32_rndscaless_mask_round ((__v4sf) __B,\n+\t\t\t\t\t  (__v4sf) __C, __imm,\n+\t\t\t\t\t  (__v4sf)\n+\t\t\t\t\t  _mm_setzero_ps (),\n+\t\t\t\t\t  (__mmask8) __A,\n+\t\t\t\t\t  __R);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_roundscale_round_sd (__m128d __A, __m128d __B, const int __imm,\n \t\t\t const int __R)\n {\n-  return (__m128d) __builtin_ia32_rndscalesd_round ((__v2df) __A,\n-\t\t\t\t\t\t    (__v2df) __B, __imm, __R);\n+  return (__m128d)\n+    __builtin_ia32_rndscalesd_mask_round ((__v2df) __A,\n+\t\t\t\t\t  (__v2df) __B, __imm,\n+\t\t\t\t\t  (__v2df)\n+\t\t\t\t\t  _mm_setzero_pd (),\n+\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t  __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_roundscale_round_sd (__m128d __A, __mmask8 __B, __m128d __C,\n+\t\t\t      __m128d __D, const int __imm, const int __R)\n+{\n+  return (__m128d)\n+    __builtin_ia32_rndscalesd_mask_round ((__v2df) __C,\n+\t\t\t\t\t  (__v2df) __D, __imm,\n+\t\t\t\t\t  (__v2df) __A,\n+\t\t\t\t\t  (__mmask8) __B,\n+\t\t\t\t\t  __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_roundscale_round_sd (__mmask8 __A, __m128d __B, __m128d __C,\n+\t\t\t       const int __imm, const int __R)\n+{\n+  return (__m128d)\n+    __builtin_ia32_rndscalesd_mask_round ((__v2df) __B,\n+\t\t\t\t\t  (__v2df) __C, __imm,\n+\t\t\t\t\t  (__v2df)\n+\t\t\t\t\t  _mm_setzero_pd (),\n+\t\t\t\t\t  (__mmask8) __A,\n+\t\t\t\t\t  __R);\n }\n \n #else\n@@ -9211,12 +9276,54 @@ _mm_roundscale_round_sd (__m128d __A, __m128d __B, const int __imm,\n \t\t\t\t\t     (int)(C),\t\t\t\\\n \t\t\t\t\t     (__v8df)_mm512_setzero_pd(),\\\n \t\t\t\t\t     (__mmask8)(A), R))\n-#define _mm_roundscale_round_ss(A, B, C, R)\t\t\t\t\t\\\n-  ((__m128) __builtin_ia32_rndscaless_round ((__v4sf)(__m128)(A),\t\\\n-    (__v4sf)(__m128)(B), (int)(C), R))\n-#define _mm_roundscale_round_sd(A, B, C, R)\t\t\t\t\t\\\n-  ((__m128d) __builtin_ia32_rndscalesd_round ((__v2df)(__m128d)(A),\t\\\n-    (__v2df)(__m128d)(B), (int)(C), R))\n+#define _mm_roundscale_round_ss(A, B, I, R)\t\t\t\t\\\n+  ((__m128)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscaless_mask_round ((__v4sf) (__m128) (A),\t\t\\\n+\t\t\t\t\t (__v4sf) (__m128) (B),\t\t\\\n+\t\t\t\t\t (int) (I),\t\t\t\\\n+\t\t\t\t\t (__v4sf) _mm_setzero_ps (),\t\\\n+\t\t\t\t\t (__mmask8) (-1),\t\t\\\n+\t\t\t\t\t (int) (R)))\n+#define _mm_mask_roundscale_round_ss(A, U, B, C, I, R)\t\t\\\n+  ((__m128)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscaless_mask_round ((__v4sf) (__m128) (B),\t\\\n+\t\t\t\t\t (__v4sf) (__m128) (C),\t\\\n+\t\t\t\t\t (int) (I),\t\t\\\n+\t\t\t\t\t (__v4sf) (__m128) (A),\t\\\n+\t\t\t\t\t (__mmask8) (U),\t\\\n+\t\t\t\t\t (int) (R)))\n+#define _mm_maskz_roundscale_round_ss(U, A, B, I, R)\t\t\t\\\n+  ((__m128)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscaless_mask_round ((__v4sf) (__m128) (A),\t\t\\\n+\t\t\t\t\t (__v4sf) (__m128) (B),\t\t\\\n+\t\t\t\t\t (int) (I),\t\t\t\\\n+\t\t\t\t\t (__v4sf) _mm_setzero_ps (),\t\\\n+\t\t\t\t\t (__mmask8) (U),\t\t\\\n+\t\t\t\t\t (int) (R)))\n+#define _mm_roundscale_round_sd(A, B, I, R)\t\t\t\t\\\n+  ((__m128d)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscalesd_mask_round ((__v2df) (__m128d) (A),\t\\\n+\t\t\t\t\t (__v2df) (__m128d) (B),\t\\\n+\t\t\t\t\t (int) (I),\t\t\t\\\n+\t\t\t\t\t (__v2df) _mm_setzero_pd (),\t\\\n+\t\t\t\t\t (__mmask8) (-1),\t\t\\\n+\t\t\t\t\t (int) (R)))\n+#define _mm_mask_roundscale_round_sd(A, U, B, C, I, R)\t\t\t\\\n+  ((__m128d)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscalesd_mask_round ((__v2df) (__m128d) (B),\t\\\n+\t\t\t\t\t (__v2df) (__m128d) (C),\t\\\n+\t\t\t\t\t (int) (I),\t\t\t\\\n+\t\t\t\t\t (__v2df) (__m128d) (A),\t\\\n+\t\t\t\t\t (__mmask8) (U),\t\t\\\n+\t\t\t\t\t (int) (R)))\n+#define _mm_maskz_roundscale_round_sd(U, A, B, I, R)\t\t\t\\\n+  ((__m128d)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscalesd_mask_round ((__v2df) (__m128d) (A),\t\\\n+\t\t\t\t\t (__v2df) (__m128d) (B),\t\\\n+\t\t\t\t\t (int) (I),\t\t\t\\\n+\t\t\t\t\t (__v2df) _mm_setzero_pd (),\t\\\n+\t\t\t\t\t (__mmask8) (U),\t\t\\\n+\t\t\t\t\t (int) (R)))\n #endif\n \n extern __inline __m512\n@@ -14812,18 +14919,81 @@ extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_roundscale_ss (__m128 __A, __m128 __B, const int __imm)\n {\n-  return (__m128) __builtin_ia32_rndscaless_round ((__v4sf) __A,\n-\t\t\t\t\t\t   (__v4sf) __B, __imm,\n-\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+  return (__m128)\n+    __builtin_ia32_rndscaless_mask_round ((__v4sf) __A,\n+\t\t\t\t\t  (__v4sf) __B, __imm,\n+\t\t\t\t\t  (__v4sf)\n+\t\t\t\t\t  _mm_setzero_ps (),\n+\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_roundscale_ss (__m128 __A, __mmask8 __B, __m128 __C, __m128 __D,\n+\t\t\tconst int __imm)\n+{\n+  return (__m128)\n+    __builtin_ia32_rndscaless_mask_round ((__v4sf) __C,\n+\t\t\t\t\t  (__v4sf) __D, __imm,\n+\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t  (__mmask8) __B,\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_roundscale_ss (__mmask8 __A, __m128 __B, __m128 __C,\n+\t\t\t const int __imm)\n+{\n+  return (__m128)\n+    __builtin_ia32_rndscaless_mask_round ((__v4sf) __B,\n+\t\t\t\t\t  (__v4sf) __C, __imm,\n+\t\t\t\t\t  (__v4sf)\n+\t\t\t\t\t  _mm_setzero_ps (),\n+\t\t\t\t\t  (__mmask8) __A,\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_roundscale_sd (__m128d __A, __m128d __B, const int __imm)\n {\n-  return (__m128d) __builtin_ia32_rndscalesd_round ((__v2df) __A,\n-\t\t\t\t\t\t    (__v2df) __B, __imm,\n-\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+  return (__m128d)\n+    __builtin_ia32_rndscalesd_mask_round ((__v2df) __A,\n+\t\t\t\t\t  (__v2df) __B, __imm,\n+\t\t\t\t\t  (__v2df)\n+\t\t\t\t\t  _mm_setzero_pd (),\n+\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_roundscale_sd (__m128d __A, __mmask8 __B, __m128d __C, __m128d __D,\n+\t\t\tconst int __imm)\n+{\n+  return (__m128d)\n+    __builtin_ia32_rndscalesd_mask_round ((__v2df) __C,\n+\t\t\t\t\t  (__v2df) __D, __imm,\n+\t\t\t\t\t  (__v2df) __A,\n+\t\t\t\t\t  (__mmask8) __B,\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_roundscale_sd (__mmask8 __A, __m128d __B, __m128d __C,\n+\t\t\t const int __imm)\n+{\n+  return (__m128d)\n+    __builtin_ia32_rndscalesd_mask_round ((__v2df) __B,\n+\t\t\t\t\t  (__v2df) __C, __imm,\n+\t\t\t\t\t  (__v2df)\n+\t\t\t\t\t  _mm_setzero_pd (),\n+\t\t\t\t\t  (__mmask8) __A,\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n }\n \n #else\n@@ -14853,12 +15023,54 @@ _mm_roundscale_sd (__m128d __A, __m128d __B, const int __imm)\n \t\t\t\t\t     (int)(C),\t\t\t\\\n \t\t\t\t\t     (__v8df)_mm512_setzero_pd(),\\\n \t\t\t\t\t     (__mmask8)(A), _MM_FROUND_CUR_DIRECTION))\n-#define _mm_roundscale_ss(A, B, C)\t\t\t\t\t\\\n-  ((__m128) __builtin_ia32_rndscaless_round ((__v4sf)(__m128)(A),\t\\\n-  (__v4sf)(__m128)(B), (int)(C), _MM_FROUND_CUR_DIRECTION))\n-#define _mm_roundscale_sd(A, B, C)\t\t\t\t\t\\\n-  ((__m128d) __builtin_ia32_rndscalesd_round ((__v2df)(__m128d)(A),\t\\\n-    (__v2df)(__m128d)(B), (int)(C), _MM_FROUND_CUR_DIRECTION))\n+#define _mm_roundscale_ss(A, B, I)\t\t\t\t\t\\\n+  ((__m128)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscaless_mask_round ((__v4sf) (__m128) (A),\t\t\\\n+\t\t\t\t\t (__v4sf) (__m128) (B),\t\t\\\n+\t\t\t\t\t (int) (I),\t\t\t\\\n+\t\t\t\t\t (__v4sf) _mm_setzero_ps (),\t\\\n+\t\t\t\t\t (__mmask8) (-1),\t\t\\\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION))\n+#define _mm_mask_roundscale_ss(A, U, B, C, I)\t\t\t\t\\\n+  ((__m128)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscaless_mask_round ((__v4sf) (__m128) (B),\t\t\\\n+\t\t\t\t\t (__v4sf) (__m128) (C),\t\t\\\n+\t\t\t\t\t (int) (I),\t\t\t\\\n+\t\t\t\t\t (__v4sf) (__m128) (A),\t\t\\\n+\t\t\t\t\t (__mmask8) (U),\t\t\\\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION))\n+#define _mm_maskz_roundscale_ss(U, A, B, I)\t\t\t\t\\\n+  ((__m128)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscaless_mask_round ((__v4sf) (__m128) (A),\t\t\\\n+\t\t\t\t\t (__v4sf) (__m128) (B),\t\t\\\n+\t\t\t\t\t (int) (I),\t\t\t\\\n+\t\t\t\t\t (__v4sf) _mm_setzero_ps (),\t\\\n+\t\t\t\t\t (__mmask8) (U),\t\t\\\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION))\n+#define _mm_roundscale_sd(A, B, I)\t\t\t\t\t\\\n+  ((__m128d)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscalesd_mask_round ((__v2df) (__m128d) (A),\t\\\n+\t\t\t\t\t (__v2df) (__m128d) (B),\t\\\n+\t\t\t\t\t (int) (I),\t\t\t\\\n+\t\t\t\t\t (__v2df) _mm_setzero_pd (),\t\\\n+\t\t\t\t\t (__mmask8) (-1),\t\t\\\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION))\n+#define _mm_mask_roundscale_sd(A, U, B, C, I)\t\t\t\t\\\n+  ((__m128d)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscalesd_mask_round ((__v2df) (__m128d) (B),\t\\\n+\t\t\t\t\t (__v2df) (__m128d) (C),\t\\\n+\t\t\t\t\t (int) (I),\t\t\t\\\n+\t\t\t\t\t (__v2df) (__m128d) (A),\t\\\n+\t\t\t\t\t (__mmask8) (U),\t\t\\\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION))\n+#define _mm_maskz_roundscale_sd(U, A, B, I)\t\t\t\t\\\n+  ((__m128d)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_rndscalesd_mask_round ((__v2df) (__m128d) (A),\t\\\n+\t\t\t\t\t (__v2df) (__m128d) (B),\t\\\n+\t\t\t\t\t (int) (I),\t\t\t\\\n+\t\t\t\t\t (__v2df) _mm_setzero_pd (),\t\\\n+\t\t\t\t\t (__mmask8) (U),\t\t\\\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION))\n #endif\n \n #ifdef __OPTIMIZE__"}, {"sha": "11028331cda6588b1d36a7b0f78064b0556c85b6", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -2828,8 +2828,8 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sse_vmmulv4sf3_round, \"__builtin_ia3\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sse_vmmulv4sf3_mask_round, \"__builtin_ia32_mulss_mask_round\", IX86_BUILTIN_MULSS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_rndscalev8df_mask_round, \"__builtin_ia32_rndscalepd_mask\", IX86_BUILTIN_RNDSCALEPD, UNKNOWN, (int) V8DF_FTYPE_V8DF_INT_V8DF_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_rndscalev16sf_mask_round, \"__builtin_ia32_rndscaleps_mask\", IX86_BUILTIN_RNDSCALEPS, UNKNOWN, (int) V16SF_FTYPE_V16SF_INT_V16SF_HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_rndscalev2df_round, \"__builtin_ia32_rndscalesd_round\", IX86_BUILTIN_RNDSCALESD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_rndscalev4sf_round, \"__builtin_ia32_rndscaless_round\", IX86_BUILTIN_RNDSCALESS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_rndscalev2df_mask_round, \"__builtin_ia32_rndscalesd_mask_round\", IX86_BUILTIN_RNDSCALESD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_V2DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_rndscalev4sf_mask_round, \"__builtin_ia32_rndscaless_mask_round\", IX86_BUILTIN_RNDSCALESS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_scalefv8df_mask_round, \"__builtin_ia32_scalefpd512_mask\", IX86_BUILTIN_SCALEFPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_scalefv16sf_mask_round, \"__builtin_ia32_scalefps512_mask\", IX86_BUILTIN_SCALEFPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vmscalefv2df_mask_round, \"__builtin_ia32_scalefsd_mask_round\", IX86_BUILTIN_SCALEFSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)"}, {"sha": "f474eed1c4e1a0dad4efbe68e36c9c0f13f0baff", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -9694,18 +9694,17 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_rndscale<mode><round_saeonly_name>\"\n+(define_insn \"avx512f_rndscale<mode><mask_scalar_name><round_saeonly_scalar_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n-\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n+\t    [(match_operand:VF_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t    UNSPEC_ROUND)\n-\t  (match_dup 1)\n+\t  (match_operand:VF_128 1 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n-  \"vrndscale<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|%0, %1, %<iptr>2<round_saeonly_op4>, %3}\"\n+  \"vrndscale<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %<iptr>2<round_saeonly_scalar_mask_op4>, %3}\"\n   [(set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])"}, {"sha": "34854d29cf75f60dbc3bf575fcee4688db81d8fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -1,3 +1,19 @@\n+2019-10-15  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/92035\n+\t* gcc.target/i386/avx512f-vrndscaless-1.c: Add scan-assembler-times\n+\tdirectives for newly expected instructions.\n+\t* gcc.target/i386/avx512f-vrndscalesd-1.c: Likewise.\n+\t* gcc.target/i386/avx512f-vrndscaless-2.c\n+\t(avx512f_test): Add tests for new intrinsics.\n+\t* gcc.target/i386/avx512f-vrndscalesd-2.c: Likewise.\n+\t* gcc.target/i386/avx-1.c (__builtin_ia32_rndscalefss_round,\n+\t__builtin_ia32_rndscalefsd_round): Remove.\n+\t(__builtin_ia32_rndscalefss_mask_round,\n+\t__builtin_ia32_rndscalefsd_mask_round): Define.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\n 2019-10-15  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/92046"}, {"sha": "3600a7abe9156a39abb027c71789c2b1c45ef775", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -283,8 +283,8 @@\n #define __builtin_ia32_pternlogq512_maskz(A, B, C, F, E) __builtin_ia32_pternlogq512_maskz(A, B, C, 1, E)\n #define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 8)\n #define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 8)\n-#define __builtin_ia32_rndscalesd_round(A, B, C, D) __builtin_ia32_rndscalesd_round(A, B, 1, 4)\n-#define __builtin_ia32_rndscaless_round(A, B, C, D) __builtin_ia32_rndscaless_round(A, B, 1, 4)\n+#define __builtin_ia32_rndscalesd_mask_round(A, B, C, D, E, F) __builtin_ia32_rndscalesd_mask_round(A, B, 1, D, E, 4)\n+#define __builtin_ia32_rndscaless_mask_round(A, B, C, D, E, F) __builtin_ia32_rndscaless_mask_round(A, B, 1, D, E, 4)\n #define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_scalefsd_mask_round(A, B, C, D, E) __builtin_ia32_scalefsd_mask_round(A, B, C, D, 8)"}, {"sha": "f95d470960780a04b270ef4eec68da67fe7aeb59", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscalesd-1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-1.c?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -1,14 +1,24 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vrndscalesd\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128d x1, x2;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x1 = _mm_roundscale_sd (x1, x2, 0x42);\n   x1 = _mm_roundscale_round_sd (x1, x2, 0x42, _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_roundscale_sd (x1, m, x1, x2, 0x42);\n+  x1 = _mm_mask_roundscale_round_sd (x1, m, x1, x2, 0x42, _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_roundscale_sd (m, x1, x2, 0x42);\n+  x1 = _mm_maskz_roundscale_round_sd (m, x1, x2, 0x42, _MM_FROUND_NO_EXC);\n }"}, {"sha": "83b940d96360a4a38b458c75e0f77808f18edffd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscalesd-2.c", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-2.c?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -6,6 +6,7 @@\n \n #include <math.h>\n #include \"avx512f-check.h\"\n+#include \"avx512f-mask-type.h\"\n \n static void\n compute_rndscalesd (double *s1, double *s2, double *r, int imm)\n@@ -33,17 +34,54 @@ compute_rndscalesd (double *s1, double *s2, double *r, int imm)\n static void\n avx512f_test (void)\n {\n-  int imm = _MM_FROUND_FLOOR | (7 << 4);\n-  union128d s1, s2, res1;\n+  int i, imm;\n+  union128d s1, s2, res1, res2, res3, res4, res5, res6;\n   double res_ref[SIZE];\n+  \n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  imm = _MM_FROUND_FLOOR | (7 << 4);\n \n   s1.x = _mm_set_pd (4.05084, -1.23162);\n   s2.x = _mm_set_pd (-3.53222, 7.33527);\n \n+  for(i = 0; i < SIZE; i++)\n+    {\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+    }\n+\n   res1.x = _mm_roundscale_sd (s1.x, s2.x, imm);\n+  res2.x = _mm_mask_roundscale_sd (res2.x, mask, s1.x, s2.x, imm);\n+  res3.x = _mm_maskz_roundscale_sd (mask, s1.x, s2.x, imm);\n+  res4.x = _mm_roundscale_round_sd (s1.x, s2.x, imm, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_roundscale_round_sd (res5.x, mask, s1.x, s2.x, imm, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_maskz_roundscale_round_sd (mask, s1.x, s2.x, imm, _MM_FROUND_NO_EXC);\n \n   compute_rndscalesd (s1.a, s2.a, res_ref, imm);\n \n   if (check_union128d (res1, res_ref))\n     abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+  \n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  compute_rndscalesd (s1.a, s2.a, res_ref, imm);\n+\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+  if (check_union128d (res5, res_ref))\n+    abort ();\n+  \n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res6, res_ref))\n+    abort ();\n+\n }"}, {"sha": "19e3a973fa403efbeda2ff5ec0cf8c264958871a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscaless-1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-1.c?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -1,14 +1,24 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vrndscaless\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaless\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaless\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaless\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaless\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaless\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaless\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128 x1, x2;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x1 = _mm_roundscale_ss (x1, x2, 0x42);\n   x1 = _mm_roundscale_round_ss (x1, x2, 0x42, _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_roundscale_ss (x1, m, x1, x2, 0x42);\n+  x1 = _mm_mask_roundscale_round_ss (x1, m, x1, x2, 0x42, _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_roundscale_ss (m, x1, x2, 0x42);\n+  x1 = _mm_maskz_roundscale_round_ss (m, x1, x2, 0x42, _MM_FROUND_NO_EXC);\n }"}, {"sha": "6906880d3628bc9a9a7f9b76b90a86c6a6b05f8d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscaless-2.c", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-2.c?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -6,6 +6,7 @@\n \n #include <math.h>\n #include \"avx512f-check.h\"\n+#include \"avx512f-mask-type.h\"\n \n static void\n compute_rndscaless (float *s1, float *s2, float *r, int imm)\n@@ -35,17 +36,53 @@ compute_rndscaless (float *s1, float *s2, float *r, int imm)\n static void\n avx512f_test (void)\n {\n-  int imm = _MM_FROUND_FLOOR | (7 << 4);\n-  union128 s1, s2, res1;\n+  int i, imm;\n+  union128 s1, s2, res1, res2, res3, res4, res5, res6;\n   float res_ref[SIZE];\n+  \n+  MASK_TYPE mask = MASK_VALUE;\n \n+  imm = _MM_FROUND_FLOOR | (7 << 4);\n+  \n   s1.x = _mm_set_ps (4.05084, -1.23162, 2.00231, -6.22103);\n   s2.x = _mm_set_ps (-4.19319, -3.53222, 7.33527, 5.57655);\n+ \n+  for(i = 0; i < SIZE; i++)\n+    {\n+      res2.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+    }\n \n   res1.x = _mm_roundscale_ss (s1.x, s2.x, imm);\n+  res2.x = _mm_mask_roundscale_ss (res2.x, mask, s1.x, s2.x, imm);\n+  res3.x = _mm_maskz_roundscale_ss (mask, s1.x, s2.x, imm);\n+  res4.x = _mm_roundscale_round_ss (s1.x, s2.x, imm, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_roundscale_round_ss (res5.x, mask, s1.x, s2.x, imm, _MM_FROUND_NO_EXC);\n+  res6.x = _mm_maskz_roundscale_round_ss (mask, s1.x, s2.x, imm, _MM_FROUND_NO_EXC);\n \n   compute_rndscaless (s1.a, s2.a, res_ref, imm);\n \n   if (check_union128 (res1, res_ref))\n     abort ();\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+  \n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  compute_rndscaless (s1.a, s2.a, res_ref, imm);\n+\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+  if (check_union128 (res5, res_ref))\n+    abort ();\n+  \n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res6, res_ref))\n+    abort ();\n }"}, {"sha": "45c1c285c572ac0ecc1f668ce268a429ee537996", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -300,8 +300,8 @@\n #define __builtin_ia32_pternlogq512_maskz(A, B, C, F, E) __builtin_ia32_pternlogq512_maskz(A, B, C, 1, E)\n #define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 8)\n #define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 8)\n-#define __builtin_ia32_rndscalesd_round(A, B, C, D) __builtin_ia32_rndscalesd_round(A, B, 1, 4)\n-#define __builtin_ia32_rndscaless_round(A, B, C, D) __builtin_ia32_rndscaless_round(A, B, 1, 4)\n+#define __builtin_ia32_rndscalesd_mask_round(A, B, C, D, E, F) __builtin_ia32_rndscalesd_mask_round(A, B, 1, D, E, 4)\n+#define __builtin_ia32_rndscaless_mask_round(A, B, C, D, E, F) __builtin_ia32_rndscaless_mask_round(A, B, 1, D, E, 4)\n #define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_scalefsd_mask_round(A, B, C, D, E) __builtin_ia32_scalefsd_mask_round(A, B, C, D, 8)"}, {"sha": "e98c7693ef73cbdcfce05bfdaeb0f7658b4f8528", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c4d6d1c29b62d97014d30848ee542e309dbe9c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=a7c4d6d1c29b62d97014d30848ee542e309dbe9c", "patch": "@@ -302,8 +302,8 @@\n #define __builtin_ia32_pternlogq512_maskz(A, B, C, F, E) __builtin_ia32_pternlogq512_maskz(A, B, C, 1, E)\n #define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 8)\n #define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 8)\n-#define __builtin_ia32_rndscalesd_round(A, B, C, D) __builtin_ia32_rndscalesd_round(A, B, 1, 4)\n-#define __builtin_ia32_rndscaless_round(A, B, C, D) __builtin_ia32_rndscaless_round(A, B, 1, 4)\n+#define __builtin_ia32_rndscalesd_mask_round(A, B, C, D, E, F) __builtin_ia32_rndscalesd_mask_round(A, B, 1, D, E, 4)\n+#define __builtin_ia32_rndscaless_mask_round(A, B, C, D, E, F) __builtin_ia32_rndscaless_mask_round(A, B, 1, D, E, 4)\n #define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_scalefsd_mask_round(A, B, C, D, E) __builtin_ia32_scalefsd_mask_round(A, B, C, D, 8)"}]}