{"sha": "0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwZmZiZmMyM2JhOThhYzQwY2JjNjMzMGUyNzUwYTY0NDhiNzlkOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-03T18:49:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-03T18:49:12Z"}, "message": "c++: Fix non-constant TARGET_EXPR constexpr handing [PR93998]\n\nWe ICE on the following testcase since I've added the SAVE_EXPR-like\nconstexpr handling where the TARGET_EXPR initializer (and cleanup) is\nevaluated only once (because it might have side-effects like new or delete\nexpressions in it).\nThe problem is if the TARGET_EXPR (but I guess in theory SAVE_EXPR too)\ninitializer is *non_constant_p.  We still remember the result, but already\nnot that it is *non_constant_p.  Normally that wouldn't be a big problem,\nif something is *non_constant_p, we only or into it and so the whole\nexpression will be non-constant too.  Except in the builtins handling,\nwe try to evaluate the arguments with non_constant_p pointing into a dummy1\nbool which we ignore.  This is because some builtins might fold into a\nconstant even if they don't have a constexpr argument.  Unfortunately if\nwe evaluate the TARGET_EXPR first in the argument of such a builtin and then\nonce again, we don't set *non_constant_p.\n\nSo, either we don't remember the TARGET_EXPR/SAVE_EXPR result if it wasn't\nconstant, like the following patch does, or we could remember it, but in\nsome way that would make it clear that it is non-constant (e.g. by\npushing into the global->values SAVE_EXPR, SAVE_EXPR entry and perhaps\nfor TARGET_EXPR don't remember it on TARGET_EXPR_SLOT, but the TARGET_EXPR\nitself and similarly push TARGET_EXPR, TARGET_EXPR and if we see those\nafter the lookup, diagnose + set *non_constant_p.  Or we could perhaps\nduring the builtin argument evaluation push expressions into a different\nsave_expr vec and undo them afterwards.\n\n2020-03-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/93998\n\t* constexpr.c (cxx_eval_constant_expression)\n\t<case TARGET_EXPR, case SAVE_EXPR>: Don't record anything if\n\t*non_constant_p is true.\n\n\t* g++.dg/ext/pr93998.C: New test.", "tree": {"sha": "b1bc62617e2fc04e62a6766ddbae192fab2f4563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1bc62617e2fc04e62a6766ddbae192fab2f4563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b9ce2b4eb49e3c930730c3721323349e2136b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9ce2b4eb49e3c930730c3721323349e2136b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b9ce2b4eb49e3c930730c3721323349e2136b1a"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "e776110f8ee494358fe4fe110bddb59a385b851a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9", "patch": "@@ -1,4 +1,11 @@\n-2020-03-03  Jun Ma <JunMa@linux.alibaba.com>\n+2020-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/93998\n+\t* constexpr.c (cxx_eval_constant_expression)\n+\t<case TARGET_EXPR, case SAVE_EXPR>: Don't record anything if\n+\t*non_constant_p is true.\n+\n+2020-03-03  Jun Ma  <JunMa@linux.alibaba.com>\n \n \t* coroutines.cc (finish_co_await_expr): Build co_await_expr\n \twith unknown_type_node."}, {"sha": "c2d446057645d1599fdf5d64a2feca525b721a0b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9", "patch": "@@ -5474,9 +5474,10 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       r = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 1),\n \t\t\t\t\tfalse,\n \t\t\t\t\tnon_constant_p, overflow_p);\n-      if (!*non_constant_p)\n-\t/* Adjust the type of the result to the type of the temporary.  */\n-\tr = adjust_temp_type (TREE_TYPE (t), r);\n+      if (*non_constant_p)\n+\tbreak;\n+      /* Adjust the type of the result to the type of the temporary.  */\n+      r = adjust_temp_type (TREE_TYPE (t), r);\n       if (TARGET_EXPR_CLEANUP (t) && !CLEANUP_EH_ONLY (t))\n \tctx->global->cleanups->safe_push (TARGET_EXPR_CLEANUP (t));\n       r = unshare_constructor (r);\n@@ -5528,6 +5529,8 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t{\n \t  r = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 0), false,\n \t\t\t\t\t    non_constant_p, overflow_p);\n+\t  if (*non_constant_p)\n+\t    break;\n \t  ctx->global->values.put (t, r);\n \t  if (ctx->save_exprs)\n \t    ctx->save_exprs->safe_push (t);"}, {"sha": "db579e3697427e382d7cfc2435a15391954e0fe4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9", "patch": "@@ -1,3 +1,8 @@\n+2020-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/93998\n+\t* g++.dg/ext/pr93998.C: New test.\n+\n 2020-03-03  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* gcc.target/arm/simd/bf16_cvt_1.c: New test."}, {"sha": "766c331773422159c0e8be149881411eaf260e3e", "filename": "gcc/testsuite/g++.dg/ext/pr93998.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr93998.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr93998.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr93998.C?ref=0e0ffbfc23ba98ac40cbc6330e2750a6448b79d9", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/93998\n+// { dg-do compile { target c++11 } }\n+\n+struct C\n+{\n+  constexpr bool operator== (C x) const noexcept { return v == x.v; }\n+  int v;\n+};\n+\n+int\n+foo (const C a, const C b, bool c)\n+{\n+  return __builtin_expect (!!(a == b || c), 1) ? 0 : 1;\n+}"}]}