{"sha": "0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI5MDA0ZWQ1NjQyYWI1NmY5NzM0N2NjOWM1Y2E5YTU5YTJmYjZiYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-05-16T10:10:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-05-16T10:10:28Z"}, "message": "ipa-inline-analysis.c (compute_inline_parameters): Be more reailistic on estimating thunk bodies...\n\n\n\t* ipa-inline-analysis.c (compute_inline_parameters): Be more reailistic\n\ton estimating thunk bodies; do not set inline_failed to CIF_THUNK for\n\tcalls from thunk.\n\t* ipa-inline-transform.c (inline_call): When inlining into thunk produce\n\tgimple body.\n\t(preserve_function_body_p): No need to preserve function body\n\t* cif-codes.def (CIF_THUNK): Remove.\n\t* cgraphclones.c (duplicate_thunk_for_node): Thunks calls are inlinable.\n\n\t* g++.dg/ipa/ivinline-7.C: Do not xfail.\n\t* g++.dg/ipa/ivinline-9.C: Do not xfail.\n\nFrom-SVN: r236274", "tree": {"sha": "2fad4cf8e62a6fa8390658fc1bb6621e961d826e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fad4cf8e62a6fa8390658fc1bb6621e961d826e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/comments", "author": null, "committer": null, "parents": [{"sha": "c1d854fb24ba20ecdd1736117a5e5cd39686e479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d854fb24ba20ecdd1736117a5e5cd39686e479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d854fb24ba20ecdd1736117a5e5cd39686e479"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "7f70b9c696737aceaf6b914673e3dc52b9ebf132", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "patch": "@@ -1,3 +1,14 @@\n+2016-05-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline-analysis.c (compute_inline_parameters): Be more reailistic\n+\ton estimating thunk bodies; do not set inline_failed to CIF_THUNK for\n+\tcalls from thunk.\n+\t* ipa-inline-transform.c (inline_call): When inlining into thunk produce\n+\tgimple body.\n+\t(preserve_function_body_p): No need to preserve function body\n+\t* cif-codes.def (CIF_THUNK): Remove.\n+\t* cgraphclones.c (duplicate_thunk_for_node): Thunks calls are inlinable.\n+\n 2016-05-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-inline.c (expand_call_inline): recurse after inlining thunk."}, {"sha": "6fcdbddb7fc8395094abe9687550135223d0d06c", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "patch": "@@ -3324,7 +3324,7 @@ cgraph_node::verify_node (void)\n \t  error (\"More than one edge out of thunk node\");\n           error_found = true;\n \t}\n-      if (gimple_has_body_p (decl))\n+      if (gimple_has_body_p (decl) && !global.inlined_to)\n         {\n \t  error (\"Thunk is not supposed to have body\");\n           error_found = true;"}, {"sha": "97eb927c01b26e6b28d7d7258631b65803bbf4a7", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "patch": "@@ -337,8 +337,6 @@ duplicate_thunk_for_node (cgraph_node *thunk, cgraph_node *node)\n \n   cgraph_edge *e = new_thunk->create_edge (node, NULL, 0,\n \t\t\t\t\t\t  CGRAPH_FREQ_BASE);\n-  e->call_stmt_cannot_inline_p = true;\n-  e->inline_failed = CIF_THUNK;\n   symtab->call_edge_duplication_hooks (thunk->callees, e);\n   symtab->call_cgraph_duplication_hooks (thunk, new_thunk);\n   return new_thunk;"}, {"sha": "196151fe8d222f376909c8460f884b06f18971d6", "filename": "gcc/cif-code.def", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Fcif-code.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Fcif-code.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcif-code.def?ref=0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "patch": "@@ -95,10 +95,6 @@ DEFCIFCODE(MISMATCHED_ARGUMENTS, CIF_FINAL_ERROR,\n DEFCIFCODE(LTO_MISMATCHED_DECLARATIONS, CIF_FINAL_ERROR,\n \t   N_(\"mismatched declarations during linktime optimization\"))\n \n-/* Caller is thunk.  */\n-DEFCIFCODE(THUNK, CIF_FINAL_ERROR,                                             \n-          N_(\"thunk call\"))                                                    \n-\n /* Call was originally indirect.  */\n DEFCIFCODE(ORIGINALLY_INDIRECT_CALL, CIF_FINAL_NORMAL,\n \t   N_(\"originally indirect function call not considered for inlining\"))"}, {"sha": "82d1774abcb4f7cae1096c8199a17f04b77042a7", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "patch": "@@ -2932,11 +2932,13 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n       struct inline_edge_summary *es = inline_edge_summary (node->callees);\n       struct predicate t = true_predicate ();\n \n-      node->callees->inline_failed = CIF_THUNK;\n       node->local.can_change_signature = false;\n-      es->call_stmt_size = INLINE_SIZE_SCALE;\n-      es->call_stmt_time = INLINE_TIME_SCALE;\n-      account_size_time (info, INLINE_SIZE_SCALE * 2, INLINE_TIME_SCALE * 2, &t);\n+      es->call_stmt_size = eni_size_weights.call_cost;\n+      es->call_stmt_time = eni_time_weights.call_cost;\n+      account_size_time (info, INLINE_SIZE_SCALE * 2,\n+\t\t\t INLINE_TIME_SCALE * 2, &t);\n+      t = not_inlined_predicate ();\n+      account_size_time (info, 2 * INLINE_SIZE_SCALE, 0, &t);\n       inline_update_overall_summary (node);\n       info->self_size = info->size;\n       info->self_time = info->time;"}, {"sha": "1e6e108b9dbdf2e2e4cf67cc3f78249c2f945cec", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "patch": "@@ -314,12 +314,20 @@ inline_call (struct cgraph_edge *e, bool update_original,\n   /* Don't even think of inlining inline clone.  */\n   gcc_assert (!callee->global.inlined_to);\n \n-  e->inline_failed = CIF_OK;\n-  DECL_POSSIBLY_INLINED (callee->decl) = true;\n-\n   to = e->caller;\n   if (to->global.inlined_to)\n     to = to->global.inlined_to;\n+  if (to->thunk.thunk_p)\n+    {\n+      if (in_lto_p)\n+\tto->get_untransformed_body ();\n+      to->expand_thunk (false, true);\n+      e = to->callees;\n+    }\n+\n+\n+  e->inline_failed = CIF_OK;\n+  DECL_POSSIBLY_INLINED (callee->decl) = true;\n \n   if (DECL_FUNCTION_PERSONALITY (callee->decl))\n     DECL_FUNCTION_PERSONALITY (to->decl)\n@@ -580,7 +588,7 @@ preserve_function_body_p (struct cgraph_node *node)\n   gcc_assert (!node->alias && !node->thunk.thunk_p);\n \n   /* Look if there is any clone around.  */\n-  if (node->clones)\n+  if (node->clones && !node->clones->thunk.thunk_p)\n     return true;\n   return false;\n }"}, {"sha": "c5f151f7fe4dd447e295554bf216138b98c75e99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "patch": "@@ -1,3 +1,8 @@\n+2016-05-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/ipa/ivinline-7.C: Do not xfail.\n+\t* g++.dg/ipa/ivinline-9.C: Do not xfail.\n+\n 2016-05-16  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* g++.dg/ext/arm-fp16/fp16-param-1.c: Update expected output.  Add"}, {"sha": "a7b41e7bd59af8e33fe0478e75c38c8e68eb0358", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C?ref=0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "patch": "@@ -76,4 +76,4 @@ int main (int argc, char *argv[])\n }\n \n /* { dg-final { scan-ipa-dump \"Discovered a virtual call to a known target.*B::.*foo\"  \"inline\"  } } */\n-/* { dg-final { scan-ipa-dump \"B::foo\\[^\\\\n\\]*inline copy in int main\"  \"inline\"  { xfail *-*-* } } } */\n+/* { dg-final { scan-ipa-dump \"B::foo\\[^\\\\n\\]*inline copy in int main\"  \"inline\"  } } */"}, {"sha": "41b2381877a60b97b3fc39dd9183390b2be2119c", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C?ref=0b9004ed5642ab56f97347cc9c5ca9a59a2fb6bb", "patch": "@@ -90,4 +90,4 @@ int main (int argc, char *argv[])\n }\n \n /* { dg-final { scan-ipa-dump \"Discovered a virtual call to a known target.*B::.*foo\"  \"inline\"  } } */\n-/* { dg-final { scan-ipa-dump \"B::foo\\[^\\\\n\\]*inline copy in int main\"  \"inline\"  { xfail *-*-* } } } */\n+/* { dg-final { scan-ipa-dump \"B::foo\\[^\\\\n\\]*inline copy in int main\"  \"inline\"  } } */"}]}