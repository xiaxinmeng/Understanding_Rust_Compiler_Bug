{"sha": "0afb9ebaab09b999f1d158ffc3fb906fdab9df67", "node_id": "C_kwDOANBUbNoAKDBhZmI5ZWJhYWIwOWI5OTlmMWQxNThmZmMzZmI5MDZmZGFiOWRmNjc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T13:24:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T23:57:49Z"}, "message": "libstdc++: Always define typedefs and hash functions for wide strings [PR 98725]\n\nThe wstring and wstring_view typedefs should be enabled even if\n<wchar.h> isn't supported, because char_traits<wchar_t> works\nunconditionally. Similarly, the std::hash specializations for wide\nstrings do not depend on <wchar.h> support.\n\nAlthough the primary template works OK for std::char_traits<wchar_t> in\nthe absence of <wchar.h> support, this patch still defines it as an\nexplicit specialization for compatibility with declarations that expect\nit to be specialized. The explicit specialization just uses the same\n__gnu_cxx::char_traits base class as the primary template.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/98725\n\t* include/bits/char_traits.h (char_traits<wchar_t>): Define\n\texplicit specialization unconditionally.\n\t* include/bits/basic_string.h (hash<wstring>): Define\n\tunconditionally. Do not check _GLIBCXX_USE_WCHAR_T.\n\t* include/bits/stringfwd.h (wstring): Likewise.\n\t* include/debug/string (wstring): Likewise.\n\t* include/experimental/string_view (experimental::wstring_view)\n\t(hash<experimental::wstring_view>): Likewise.\n\t* include/std/string (pmr::wstring, hash<pmr::wstring>):\n\tLikewise.\n\t* include/std/string_view (wstring_view, hash<wstring_view>):\n\tLikewise.", "tree": {"sha": "4b8a8f44384d99733d8ea59f151f6bb9a44cc618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b8a8f44384d99733d8ea59f151f6bb9a44cc618"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0afb9ebaab09b999f1d158ffc3fb906fdab9df67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afb9ebaab09b999f1d158ffc3fb906fdab9df67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0afb9ebaab09b999f1d158ffc3fb906fdab9df67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfeff094e6410844d2324193610cb7a512d67713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfeff094e6410844d2324193610cb7a512d67713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfeff094e6410844d2324193610cb7a512d67713"}], "stats": {"total": 32, "additions": 5, "deletions": 27}, "files": [{"sha": "59c84b1b6adc947896b94573d547360aa85cff4b", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=0afb9ebaab09b999f1d158ffc3fb906fdab9df67", "patch": "@@ -3954,7 +3954,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_fast_hash<hash<string>> : std::false_type\n     { };\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   /// std::hash specialization for wstring.\n   template<>\n     struct hash<wstring>\n@@ -3969,7 +3968,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     struct __is_fast_hash<hash<wstring>> : std::false_type\n     { };\n-#endif\n #endif /* _GLIBCXX_COMPATIBILITY_CXX0X */\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n@@ -4034,12 +4032,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator\"\"s(const char* __str, size_t __len)\n     { return basic_string<char>{__str, __len}; }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n     _GLIBCXX_DEFAULT_ABI_TAG\n     inline basic_string<wchar_t>\n     operator\"\"s(const wchar_t* __str, size_t __len)\n     { return basic_string<wchar_t>{__str, __len}; }\n-#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n     _GLIBCXX_DEFAULT_ABI_TAG"}, {"sha": "f6f8851c22dadc9465eae9e73843e7327c56f6d9", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=0afb9ebaab09b999f1d158ffc3fb906fdab9df67", "patch": "@@ -256,7 +256,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  for advice on how to make use of this class for @a unusual character\n    *  types. Also, check out include/ext/pod_char_traits.h.\n   */\n-  template<class _CharT>\n+  template<typename _CharT>\n     struct char_traits : public __gnu_cxx::char_traits<_CharT>\n     { };\n \n@@ -507,6 +507,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT\n       { return eq_int_type(__c, eof()) ? 0 : __c; }\n   };\n+#else // _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    struct char_traits<wchar_t> : public __gnu_cxx::char_traits<wchar_t>\n+    { };\n #endif //_GLIBCXX_USE_WCHAR_T\n \n #ifdef _GLIBCXX_USE_CHAR8_T"}, {"sha": "bcfd350e50577de29f81391b4bd96a3a2663e796", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=0afb9ebaab09b999f1d158ffc3fb906fdab9df67", "patch": "@@ -54,9 +54,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<> struct char_traits<char>;\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> struct char_traits<wchar_t>;\n-#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n   template<> struct char_traits<char8_t>;\n@@ -78,10 +76,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   /// A string of @c char\n   typedef basic_string<char>    string;   \n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   /// A string of @c wchar_t\n   typedef basic_string<wchar_t> wstring;   \n-#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n   /// A string of @c char8_t"}, {"sha": "a8389528001c498d04f82b0b238cb84ebaccc24a", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=0afb9ebaab09b999f1d158ffc3fb906fdab9df67", "patch": "@@ -1298,9 +1298,7 @@ namespace __gnu_debug\n \n   typedef basic_string<char>    string;\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   typedef basic_string<wchar_t> wstring;\n-#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n   /// A string of @c char8_t"}, {"sha": "b8e4db8ef30731122b9e3bc45e2bcd65c77ddd2d", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=0afb9ebaab09b999f1d158ffc3fb906fdab9df67", "patch": "@@ -564,9 +564,7 @@ inline namespace fundamentals_v1\n   // basic_string_view typedef names\n \n   using string_view = basic_string_view<char>;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   using wstring_view = basic_string_view<wchar_t>;\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   using u8string_view = basic_string_view<char8_t>;\n #endif\n@@ -593,7 +591,6 @@ inline namespace fundamentals_v1\n     struct __is_fast_hash<hash<experimental::string_view>> : std::false_type\n     { };\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     struct hash<experimental::wstring_view>\n     : public __hash_base<size_t, wstring>\n@@ -607,7 +604,6 @@ inline namespace fundamentals_v1\n   template<>\n     struct __is_fast_hash<hash<experimental::wstring_view>> : std::false_type\n     { };\n-#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n   template<>\n@@ -665,11 +661,9 @@ namespace experimental\n     operator\"\"sv(const char* __str, size_t __len) noexcept\n     { return basic_string_view<char>{__str, __len}; }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n     inline constexpr basic_string_view<wchar_t>\n     operator\"\"sv(const wchar_t* __str, size_t __len) noexcept\n     { return basic_string_view<wchar_t>{__str, __len}; }\n-#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n     inline constexpr basic_string_view<char8_t>"}, {"sha": "af840e887d5f50ad2114090de8062ef033ba404e", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=0afb9ebaab09b999f1d158ffc3fb906fdab9df67", "patch": "@@ -68,9 +68,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     using u16string = basic_string<char16_t>;\n     using u32string = basic_string<char32_t>;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n     using wstring   = basic_string<wchar_t>;\n-#endif\n   } // namespace pmr\n \n   template<typename _Str>\n@@ -100,12 +98,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct hash<pmr::u32string>\n     : public __hash_string_base<pmr::u32string>\n     { };\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     struct hash<pmr::wstring>\n     : public __hash_string_base<pmr::wstring>\n     { };\n-#endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "fd92df6e425ae4543b5778a07382d0eb79148c73", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afb9ebaab09b999f1d158ffc3fb906fdab9df67/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=0afb9ebaab09b999f1d158ffc3fb906fdab9df67", "patch": "@@ -674,9 +674,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // basic_string_view typedef names\n \n   using string_view = basic_string_view<char>;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   using wstring_view = basic_string_view<wchar_t>;\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   using u8string_view = basic_string_view<char8_t>;\n #endif\n@@ -701,7 +699,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_fast_hash<hash<string_view>> : std::false_type\n     { };\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     struct hash<wstring_view>\n     : public __hash_base<size_t, wstring_view>\n@@ -715,7 +712,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     struct __is_fast_hash<hash<wstring_view>> : std::false_type\n     { };\n-#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n   template<>\n@@ -770,11 +766,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator\"\"sv(const char* __str, size_t __len) noexcept\n     { return basic_string_view<char>{__str, __len}; }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n     inline constexpr basic_string_view<wchar_t>\n     operator\"\"sv(const wchar_t* __str, size_t __len) noexcept\n     { return basic_string_view<wchar_t>{__str, __len}; }\n-#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n     inline constexpr basic_string_view<char8_t>"}]}