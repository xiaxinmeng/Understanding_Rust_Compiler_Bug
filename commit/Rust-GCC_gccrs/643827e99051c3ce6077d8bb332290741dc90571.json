{"sha": "643827e99051c3ce6077d8bb332290741dc90571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQzODI3ZTk5MDUxYzNjZTYwNzdkOGJiMzMyMjkwNzQxZGM5MDU3MQ==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2017-09-06T12:01:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T12:01:13Z"}, "message": "exp_util.adb (Side_Effect_Free): For CodePeer (only) treat uses of 'Image and related attributes as having side...\n\n2017-09-06  Steve Baird  <baird@adacore.com>\n\n\t* exp_util.adb (Side_Effect_Free): For CodePeer (only) treat\n\tuses of 'Image and related attributes as having side effects in\n\torder to avoid replicating such uses.\n\t* pprint.ads (Expression_Image) Add new generic formal flag\n\tHide_Temp_Derefs.  The flag defaults to False; CodePeer will\n\t(eventually) override the default.\n\t* pprint.adb (Expression_Image) If the new flag is set, then\n\tsuppress the \".all\" suffix when displaying a dereference whose\n\tprefix is a use of a value-capturing compiler temp of the sort\n\tgenerated by Expr_Util.Remove_Side_Effects .\n\t* exp_attr.adb, g-catiio.adb, inline.adb, sem_attr.adb, sem_ch13.adb,\n\tsem_ch7.adb, sem_dim.adb, sem_util.adb, sem_util.ads, sem_warn.adb:\n\tMinor reformatting.\n\t* inline.adb: Minor wording change.\n\nFrom-SVN: r251784", "tree": {"sha": "e52a39b62571b39e7f56f1931e9f955031101a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e52a39b62571b39e7f56f1931e9f955031101a42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/643827e99051c3ce6077d8bb332290741dc90571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643827e99051c3ce6077d8bb332290741dc90571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643827e99051c3ce6077d8bb332290741dc90571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643827e99051c3ce6077d8bb332290741dc90571/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66f95f60458a1da2e82c4b879357ebe36fcdb879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f95f60458a1da2e82c4b879357ebe36fcdb879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66f95f60458a1da2e82c4b879357ebe36fcdb879"}], "stats": {"total": 244, "additions": 176, "deletions": 68}, "files": [{"sha": "b7a8679916590b8d8b22af3fa6e5d31bf4dea2dc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -1,3 +1,20 @@\n+2017-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_util.adb (Side_Effect_Free): For CodePeer (only) treat\n+\tuses of 'Image and related attributes as having side effects in\n+\torder to avoid replicating such uses.\n+\t* pprint.ads (Expression_Image) Add new generic formal flag\n+\tHide_Temp_Derefs.  The flag defaults to False; CodePeer will\n+\t(eventually) override the default.\n+\t* pprint.adb (Expression_Image) If the new flag is set, then\n+\tsuppress the \".all\" suffix when displaying a dereference whose\n+\tprefix is a use of a value-capturing compiler temp of the sort\n+\tgenerated by Expr_Util.Remove_Side_Effects .\n+\t* exp_attr.adb, g-catiio.adb, inline.adb, sem_attr.adb, sem_ch13.adb,\n+\tsem_ch7.adb, sem_dim.adb, sem_util.adb, sem_util.ads, sem_warn.adb:\n+\tMinor reformatting.\n+\t* inline.adb: Minor wording change.\n+\n 2017-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_ch7.adb: Update comment."}, {"sha": "ce115b98327ec400b0d72b9c15ecdf48e0fc99c6", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -3613,14 +3613,15 @@ package body Exp_Attr is\n       --  Image attribute is handled in separate unit Exp_Imgv\n \n       when Attribute_Image =>\n+\n          --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n          --  back-end knows how to handle this attribute directly.\n \n          if CodePeer_Mode then\n             return;\n          end if;\n \n-         Exp_Imgv.Expand_Image_Attribute (N);\n+         Expand_Image_Attribute (N);\n \n       ---------\n       -- Img --\n@@ -3629,7 +3630,7 @@ package body Exp_Attr is\n       --  X'Img is expanded to typ'Image (X), where typ is the type of X\n \n       when Attribute_Img =>\n-         Exp_Imgv.Expand_Image_Attribute (N);\n+         Expand_Image_Attribute (N);\n \n       -----------\n       -- Input --\n@@ -6886,13 +6887,13 @@ package body Exp_Attr is\n          elsif Is_Record_Type (Ftyp)\n            and then Present (Declaration_Node (Ftyp))\n            and then Nkind (Type_Definition (Declaration_Node (Ftyp))) =\n-                                                        N_Record_Definition\n+                      N_Record_Definition\n          then\n             Rewrite (N,\n               Make_Function_Call (Loc,\n                 Name                   =>\n                   New_Occurrence_Of (Build_Record_VS_Func (Ftyp, N), Loc),\n-              Parameter_Associations => New_List (Pref)));\n+                Parameter_Associations => New_List (Pref)));\n \n          --  Other record types or types with discriminants\n "}, {"sha": "10d9b1d1c826a62f980a6f676c6ba08d79932832", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -12901,12 +12901,51 @@ package body Exp_Util is\n          --  Is this right? what about x'first where x is a variable???\n \n          when N_Attribute_Reference =>\n-            return\n-              Side_Effect_Free (Expressions (N), Name_Req, Variable_Ref)\n-                and then Attribute_Name (N) /= Name_Input\n-                and then (Is_Entity_Name (Prefix (N))\n-                           or else Side_Effect_Free\n-                                     (Prefix (N), Name_Req, Variable_Ref));\n+            Attribute_Reference : declare\n+\n+               function Side_Effect_Free_Attribute\n+                 (Attribute_Name : Name_Id) return Boolean;\n+               --  Returns True if evaluation of the given attribute is\n+               --  considered side-effect free (independent of prefix and\n+               --  arguments).\n+\n+               --------------------------------\n+               -- Side_Effect_Free_Attribute --\n+               --------------------------------\n+\n+               function Side_Effect_Free_Attribute\n+                 (Attribute_Name : Name_Id) return Boolean\n+               is\n+               begin\n+                  case Attribute_Name is\n+                     when Name_Input =>\n+                        return False;\n+\n+                     when Name_Image\n+                        | Name_Img\n+                        | Name_Wide_Image\n+                        | Name_Wide_Wide_Image\n+                     =>\n+                        --  CodePeer doesn't want to see replicated copies of\n+                        --  'Image calls.\n+\n+                        return not CodePeer_Mode;\n+\n+                     when others =>\n+                        return True;\n+                  end case;\n+               end Side_Effect_Free_Attribute;\n+\n+            --  Start of processing for Attribute_Reference\n+\n+            begin\n+               return\n+                 Side_Effect_Free (Expressions (N), Name_Req, Variable_Ref)\n+                   and then Side_Effect_Free_Attribute (Attribute_Name (N))\n+                   and then (Is_Entity_Name (Prefix (N))\n+                              or else Side_Effect_Free\n+                                        (Prefix (N), Name_Req, Variable_Ref));\n+            end Attribute_Reference;\n \n          --  A binary operator is side effect free if and both operands are\n          --  side effect free. For this purpose binary operators include"}, {"sha": "6677a9b1b847e256e74e7bf7dd40d934b3cd6c16", "filename": "gcc/ada/g-catiio.adb", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fg-catiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fg-catiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-catiio.adb?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -574,15 +574,15 @@ package body GNAT.Calendar.Time_IO is\n        Time    : out Ada.Calendar.Time;\n        Success : out Boolean)\n    is\n-      Index                 : Positive := Date'First;\n+      Index : Positive := Date'First;\n       --  The current character scan index. After a call to Advance, Index\n       --  points to the next character.\n \n       End_Of_Source_Reached : exception;\n       --  An exception used to signal that the scan pointer has reached the\n       --  end of the source string.\n \n-      Wrong_Syntax          : exception;\n+      Wrong_Syntax : exception;\n       --  An exception used to signal that the scan pointer has reached an\n       --  unexpected character in the source string.\n \n@@ -815,20 +815,21 @@ package body GNAT.Calendar.Time_IO is\n \n       Date_Separator : constant Character := '-';\n       Hour_Separator : constant Character := ':';\n-      Day            : Day_Number;\n-      Month          : Month_Number;\n-      Year           : Year_Number;\n-      Hour           : Hour_Number     := 0;\n-      Minute         : Minute_Number   := 0;\n-      Second         : Second_Number   := 0;\n-      Subsec         : Second_Duration := 0.0;\n-\n-      Local_Hour     : Hour_Number     := 0;\n-      Local_Minute   : Minute_Number   := 0;\n-      Local_Sign     : Character       := ' ';\n-      Local_Disp     : Duration;\n-\n-      Sep_Required   : Boolean := False;\n+\n+      Day          : Day_Number;\n+      Month        : Month_Number;\n+      Year         : Year_Number;\n+      Hour         : Hour_Number     := 0;\n+      Minute       : Minute_Number   := 0;\n+      Second       : Second_Number   := 0;\n+      Subsec       : Second_Duration := 0.0;\n+\n+      Local_Hour   : Hour_Number     := 0;\n+      Local_Minute : Minute_Number   := 0;\n+      Local_Sign   : Character       := ' ';\n+      Local_Disp   : Duration;\n+\n+      Sep_Required : Boolean := False;\n       --  True if a separator is seen (and therefore required after it!)\n \n    begin\n@@ -929,23 +930,26 @@ package body GNAT.Calendar.Time_IO is\n       --  Compute time with positive local displacement\n \n       elsif Local_Sign = '+' then\n-         Time := Time_Of (Year, Month, Day, Hour, Minute, Second, Subsec)\n-                   - Local_Disp;\n+         Time :=\n+           Time_Of (Year, Month, Day, Hour, Minute, Second, Subsec) -\n+             Local_Disp;\n \n       --  Compute time with negative local displacement\n \n       elsif Local_Sign = '-' then\n-         Time := Time_Of (Year, Month, Day, Hour, Minute, Second, Subsec)\n-                   + Local_Disp;\n+         Time :=\n+           Time_Of (Year, Month, Day, Hour, Minute, Second, Subsec) +\n+             Local_Disp;\n       end if;\n \n       --  Notify that the input string was successfully parsed\n \n       Success := True;\n \n    exception\n-      when End_Of_Source_Reached |\n-           Wrong_Syntax          =>\n+      when End_Of_Source_Reached\n+         | Wrong_Syntax\n+      =>\n          Success := False;\n    end Parse_ISO_8861_UTC;\n "}, {"sha": "70d1f84866a4f968cfb97328b9bacdba35fdb4c8", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -1607,7 +1607,6 @@ package body Inline is\n       --------------------------\n \n       procedure Build_Body_To_Inline (N : Node_Id; Spec_Id : Entity_Id) is\n-\n          procedure Generate_Subprogram_Body\n            (N              : Node_Id;\n             Body_To_Inline : out Node_Id);\n@@ -1683,11 +1682,10 @@ package body Inline is\n             Save_Env (Scope (Current_Scope), Scope (Current_Scope));\n          end if;\n \n-         --  We need to capture references to the formals in order\n-         --  to substitute the actuals at the point of inlining, i.e.\n-         --  instantiation. To treat the formals as globals to the body to\n-         --  inline, we nest it within a dummy parameterless subprogram,\n-         --  declared within the real one.\n+         --  Capture references to formals in order to substitute the actuals\n+         --  at the point of inlining or instantiation. To treat the formals\n+         --  as globals to the body to inline, nest the body within a dummy\n+         --  parameterless subprogram, declared within the real one.\n \n          Generate_Subprogram_Body (N, Original_Body);\n          Body_To_Analyze := Copy_Generic_Node (Original_Body, Empty, False);\n@@ -1730,8 +1728,7 @@ package body Inline is\n       -- Can_Split_Unconstrained_Function --\n       --------------------------------------\n \n-      function Can_Split_Unconstrained_Function (N : Node_Id) return Boolean\n-      is\n+      function Can_Split_Unconstrained_Function (N : Node_Id) return Boolean is\n          Ret_Node : constant Node_Id :=\n                       First (Statements (Handled_Statement_Sequence (N)));\n          D : Node_Id;\n@@ -2925,7 +2922,7 @@ package body Inline is\n             --  The semantic analyzer checked that frontend-inlined functions\n             --  returning unconstrained types have no declarations and have\n             --  a single extended return statement. As part of its processing\n-            --  the function was split in two subprograms: a procedure P' and\n+            --  the function was split into two subprograms: a procedure P' and\n             --  a function F' that has a block with a call to procedure P' (see\n             --  Split_Unconstrained_Function).\n "}, {"sha": "912af392ec256ce756c7522d61b0002a8f53dc72", "filename": "gcc/ada/pprint.adb", "status": "modified", "additions": 58, "deletions": 14, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fpprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fpprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpprint.adb?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2008-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2008-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -325,22 +325,66 @@ package body Pprint is\n                end if;\n \n             when N_Explicit_Dereference =>\n+               Explicit_Dereference : declare\n+                  function Deref_Suffix return String;\n+                  --  Usually returns \".all\", but will return \"\" if\n+                  --  Hide_Temp_Derefs is true and the prefix is a use of a\n+                  --  not-from-source object declared as\n+                  --    X : constant Some_Access_Type := Some_Expr'Reference;\n+                  --  (as is sometimes done in Exp_Util.Remove_Side_Effects).\n \n-               --  Return \"Foo\" instead of \"Parameter_Block.Foo.all\"\n+                  ------------------\n+                  -- Deref_Suffix --\n+                  ------------------\n \n-               if Hide_Parameter_Blocks\n-                 and then Nkind (Prefix (Expr)) = N_Selected_Component\n-                 and then Present (Etype (Prefix (Expr)))\n-                 and then Is_Access_Type (Etype (Prefix (Expr)))\n-                 and then Is_Param_Block_Component_Type (Etype (Prefix (Expr)))\n-               then\n-                  return Expr_Name (Selector_Name (Prefix (Expr)));\n+                  function Deref_Suffix return String is\n+                     Decl : Node_Id;\n \n-               elsif Take_Prefix then\n-                  return Expr_Name (Prefix (Expr)) & \".all\";\n-               else\n-                  return \".all\";\n-               end if;\n+                  begin\n+                     if Hide_Temp_Derefs\n+                       and then Nkind (Prefix (Expr)) = N_Identifier\n+                       and then Nkind (Entity (Prefix (Expr))) =\n+                                  N_Defining_Identifier\n+                     then\n+                        Decl := Parent (Entity (Prefix (Expr)));\n+\n+                        if Present (Decl)\n+                          and then Nkind (Decl) = N_Object_Declaration\n+                          and then not Comes_From_Source (Decl)\n+                          and then Constant_Present (Decl)\n+                          and then Present (Sinfo.Expression (Decl))\n+                          and then Nkind (Sinfo.Expression (Decl)) =\n+                                     N_Reference\n+                        then\n+                           return \"\";\n+                        end if;\n+                     end if;\n+\n+                     --  The default case\n+\n+                     return \".all\";\n+                  end Deref_Suffix;\n+\n+               --  Start of processing for Explicit_Dereference\n+\n+               begin\n+                  if Hide_Parameter_Blocks\n+                    and then Nkind (Prefix (Expr)) = N_Selected_Component\n+                    and then Present (Etype (Prefix (Expr)))\n+                    and then Is_Access_Type (Etype (Prefix (Expr)))\n+                    and then Is_Param_Block_Component_Type\n+                               (Etype (Prefix (Expr)))\n+                  then\n+                     --  Return \"Foo\" instead of \"Parameter_Block.Foo.all\"\n+\n+                     return Expr_Name (Selector_Name (Prefix (Expr)));\n+\n+                  elsif Take_Prefix then\n+                     return Expr_Name (Prefix (Expr)) & Deref_Suffix;\n+                  else\n+                     return Deref_Suffix;\n+                  end if;\n+               end Explicit_Dereference;\n \n             when N_Expanded_Name\n                | N_Selected_Component"}, {"sha": "932d7bab9c61059783104c39176e9d32133e648c", "filename": "gcc/ada/pprint.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fpprint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fpprint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpprint.ads?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2008-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2008-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,6 +50,11 @@ package Pprint is\n       --  If true, then \"Parameter_Block.Field_Name.all\" is\n       --  instead displayed as \"Field_Name\".\n \n+      Hide_Temp_Derefs : Boolean := False;\n+      --  If true, then \"Foo.all\" is instead displayed as \"Foo\"\n+      --  in the case where Foo is a compiler-generated constant\n+      --  initialized to Some_Captured_Value'Reference.\n+\n    function Expression_Image\n      (Expr    : Node_Id;\n       Default : String) return String;"}, {"sha": "991f2b5aff94ddc0e7b98c2ac83436f9d6563041", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -264,7 +264,7 @@ package body Sem_Attr is\n       procedure Analyze_Image_Attribute (Str_Typ : Entity_Id);\n       --  Common processing for attributes 'Img, 'Image, 'Wide_Image, and\n       --  'Wide_Wide_Image. The routine checks that the prefix is valid and\n-      --  sets the entity type to the one specified by Str_Typ (e.g.\n+      --  sets the type of the attribute to the one specified by Str_Typ (e.g.\n       --  Standard_String for 'Image and Standard_Wide_String for 'Wide_Image).\n \n       procedure Bad_Attribute_For_Predicate;\n@@ -1475,7 +1475,7 @@ package body Sem_Attr is\n                if Ada_Version > Ada_2005 then\n                   Error_Attr_P\n                     (\"prefix of % attribute must be a scalar type or a scalar \"\n-                      & \"object name\");\n+                     & \"object name\");\n                else\n                   Error_Attr_P (\"prefix of % attribute must be a scalar type\");\n                end if;"}, {"sha": "21abd063b8acc3b0f3406e828450b38964ac1f85", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -12707,8 +12707,10 @@ package body Sem_Ch13 is\n             declare\n                A_Id : constant Aspect_Id := Get_Aspect_Id (ASN);\n                Expr : constant Node_Id   := Expression (ASN);\n+\n             begin\n                case A_Id is\n+\n                   --  For now we only deal with aspects that do not generate\n                   --  subprograms, or that may mention current instances of\n                   --  types. These will require special handling (???TBD)."}, {"sha": "b0f6bd90f1aa2a9aa61d226f58ca1a4c20ba734b", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -248,7 +248,6 @@ package body Sem_Ch7 is\n       --------------------------\n \n       procedure Hide_Public_Entities (Decls : List_Id) is\n-\n          function Has_Referencer\n            (Decls     : List_Id;\n             Top_Level : Boolean := False) return Boolean;"}, {"sha": "2b4b84319f8a68cd6b7e812fd51ebab983d7805a", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -1200,7 +1200,6 @@ package body Sem_Dim is\n             end if;\n \n          when N_Unary_Op =>\n-\n             Analyze_Dimension_Unary_Op (N);\n \n          when others =>"}, {"sha": "d20cafbe63b799878a50589f70818583139ad300", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -14130,7 +14130,7 @@ package body Sem_Util is\n \n    function Is_Object_Image (Prefix : Node_Id) return Boolean is\n    begin\n-      --  When the type of the prefix is not scalar then the prefix is not\n+      --  When the type of the prefix is not scalar, then the prefix is not\n       --  valid in any scenario.\n \n       if not Is_Scalar_Type (Etype (Prefix)) then\n@@ -14228,9 +14228,9 @@ package body Sem_Util is\n                return not Nkind_In (Original_Node (N), N_Case_Expression,\n                                                        N_If_Expression);\n \n-            when N_Type_Conversion =>\n-               --  A view conversion of a tagged object is an object reference\n+            --  A view conversion of a tagged object is an object reference\n \n+            when N_Type_Conversion =>\n                return Is_Tagged_Type (Etype (Subtype_Mark (N)))\n                  and then Is_Tagged_Type (Etype (Expression (N)))\n                  and then Is_Object_Reference (Expression (N));\n@@ -22569,6 +22569,7 @@ package body Sem_Util is\n          if Ekind (Scop) = E_Protected_Type then\n             return True;\n          end if;\n+\n          Scop := Scope (Scop);\n       end loop;\n "}, {"sha": "a80d3fc21d8bdcaa00551fe24d8dcce39ffdfcc5", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -1672,7 +1672,7 @@ package Sem_Util is\n    --  null component list.\n \n    function Is_Object_Image (Prefix : Node_Id) return Boolean;\n-   --  Returns true if an 'Image, 'Wide_Image, or 'Wide_Wide_Image attribute\n+   --  Returns True if an 'Image, 'Wide_Image, or 'Wide_Wide_Image attribute\n    --  is applied to a given object or named value prefix (see below).\n \n    --  AI12-00124: The ARG has adopted the GNAT semantics of 'Img for scalar"}, {"sha": "9e1b2c3f3c290d5f55895dff4f006235d9787a1f", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643827e99051c3ce6077d8bb332290741dc90571/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=643827e99051c3ce6077d8bb332290741dc90571", "patch": "@@ -1388,10 +1388,10 @@ package body Sem_Warn is\n                   --  an expression with actions.\n \n                   UR := Original_Node (UR);\n-                  while Nkind (UR) = N_Type_Conversion\n-                    or else Nkind (UR) = N_Qualified_Expression\n-                    or else Nkind (UR) = N_Expression_With_Actions\n-                    or else Nkind (UR) = N_Attribute_Reference\n+                  while Nkind_In (UR, N_Attribute_Reference,\n+                                      N_Expression_With_Actions,\n+                                      N_Qualified_Expression,\n+                                      N_Type_Conversion)\n                   loop\n                      if Nkind (UR) = N_Attribute_Reference then\n                         UR := Prefix (UR);"}]}