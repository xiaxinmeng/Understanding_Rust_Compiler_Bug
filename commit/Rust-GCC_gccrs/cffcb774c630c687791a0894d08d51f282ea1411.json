{"sha": "cffcb774c630c687791a0894d08d51f282ea1411", "node_id": "C_kwDOANBUbNoAKGNmZmNiNzc0YzYzMGM2ODc3OTFhMDg5NGQwOGQ1MWYyODJlYTE0MTE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-19T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-19T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "726a151fe35d08dd73fb638e1b0cf7d1e1a1d249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/726a151fe35d08dd73fb638e1b0cf7d1e1a1d249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cffcb774c630c687791a0894d08d51f282ea1411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cffcb774c630c687791a0894d08d51f282ea1411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cffcb774c630c687791a0894d08d51f282ea1411", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cffcb774c630c687791a0894d08d51f282ea1411/comments", "author": null, "committer": null, "parents": [{"sha": "430d7d88c1a123d787f529dbc29e6632c6e556fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430d7d88c1a123d787f529dbc29e6632c6e556fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/430d7d88c1a123d787f529dbc29e6632c6e556fb"}], "stats": {"total": 170, "additions": 169, "deletions": 1}, "files": [{"sha": "401e9e9bd2a861bd93e51f12fab1f9d96dbcdcb0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cffcb774c630c687791a0894d08d51f282ea1411/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cffcb774c630c687791a0894d08d51f282ea1411/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=cffcb774c630c687791a0894d08d51f282ea1411", "patch": "@@ -1 +1 @@\n-20230318\n+20230319"}, {"sha": "2fecec3a430d4b649b3467784c34d0fb907479db", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cffcb774c630c687791a0894d08d51f282ea1411/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cffcb774c630c687791a0894d08d51f282ea1411/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=cffcb774c630c687791a0894d08d51f282ea1411", "patch": "@@ -1,3 +1,14 @@\n+2023-03-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/109094\n+\t* region-model.cc (region_model::on_longjmp): Pass false for\n+\tnew \"eval_return_svalue\" param of pop_frame.\n+\t(region_model::pop_frame): Add new \"eval_return_svalue\" param and\n+\tuse it to suppress the call to get_rvalue on the result when\n+\tneeded by on_longjmp.\n+\t* region-model.h (region_model::pop_frame): Add new\n+\t\"eval_return_svalue\" param.\n+\n 2023-03-10  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/109059"}, {"sha": "2c303e1b3bdc4ce911c7d90505c7b7e2524c43a9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cffcb774c630c687791a0894d08d51f282ea1411/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cffcb774c630c687791a0894d08d51f282ea1411/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cffcb774c630c687791a0894d08d51f282ea1411", "patch": "@@ -1,3 +1,110 @@\n+2023-03-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/103854\n+\tPR fortran/96122\n+\tPR fortran/37336\n+\t* class.cc (finalize_component): Include the missing arguments\n+\tin the call to the component's finalizer wrapper.\n+\t(has_finalizer_component): Do not return true for procedure\n+\tpointer components.\n+\t(finalizer_insert_packed_call): Remove the redundant argument\n+\tin the call to the final subroutine.\n+\t(generate_finalization_wrapper): Add support for assumed rank\n+\tfinalizers.\n+\t(gfc_may_be_finalized): New helper function.\n+\t* dump-parse-tree.cc (write_proc): Whitespace.\n+\t* gfortran.h : Add prototype for gfc_may_be_finalized.\n+\t* resolve.cc (resolve_function): Correct derived types that\n+\thave an incomplete namespace.\n+\t(resolve_where, gfc_resolve_where_code_in_forall,\n+\tgfc_resolve_forall_body, gfc_resolve_code): Check that the op\n+\tcode is still EXEC_ASSIGN. If it is set lhs to must finalize.\n+\t(is_finalizable_type): New function.\n+\t(generate_component_assignments): Set must_finalize if needed.\n+\t(gfc_resolve_finalizers): Error if assumed rank finalizer is\n+\tnot the only one. Warning on lack of scalar finalizer modified\n+\tto account for assumed rank finalizers.\n+\t(generate_final_call): New function.\n+\t(generate_component_assignments): Enclose the outermost call in\n+\ta block to capture automatic deallocation and final calls.\n+\tSet must_finalize as required to satisfy the standards. Use an\n+\texplicit pointer assignment for pointer components to capture\n+\tfinalization of the target. Likewise use explicit assignment\n+\tfor allocatable components. Do not use the temporary copy of\n+\tthe lhs in defined assignment if the component is allocatable.\n+\tPut the temporary in the same namespace as the lhs symbol if\n+\tthe component may be finalized. Remove the leading assignment\n+\tfrom the expansion of assignment of components that have their\n+\town defined assignment components. Suppress finalization of\n+\tassignment of temporary components to the lhs. Make an explicit\n+\tfinal call for the rhs function temporary if it exists.\n+\t(gfc_resolve_code): Set must_finalize for assignments with an\n+\tarray constructor on the rhs.\n+\t(gfc_resolve_finalizers): Ensure that an assumed rank finalizer\n+\tis the only finalizer for that type and correct the surprising\n+\twarning for the lack of a scalar finalizer.\n+\t(check_defined_assignments): Handle allocatable components.\n+\t(resolve_fl_derived): Set referenced the vtab for use\n+\tassociated symbols.\n+\t(resolve_symbol): Set referenced an unreferenced symbol that\n+\twill be finalized.\n+\t* trans-array.cc (gfc_trans_array_constructor_value): Add code\n+\tto finalize the constructor result. Warn that this feature was\n+\tremoved in F2018 and that it is suppressed by -std=2018.\n+\t(trans_array_constructor): Add finalblock, pass to previous\n+\tand apply to loop->post if filled.\n+\t(gfc_add_loop_ss_code): Add se finalblock to outer loop post.\n+\t(gfc_trans_array_cobounds, gfc_trans_array_bounds): Add any\n+\tgenerated finalization code to the main block.\n+\t(structure_alloc_comps): Add boolean argument to suppress\n+\tfinalization and use it for calls from\n+\tgfc_deallocate_alloc_comp_no_caf. Otherwise it defaults to\n+\tfalse.\n+\t(gfc_copy_alloc_comp_no_fini): New wrapper for\n+\tstructure_alloc_comps.\n+\t(gfc_alloc_allocatable_for_assignment): Suppress finalization\n+\tby setting new arg in call to gfc_deallocate_alloc_comp_no_caf.\n+\t(gfc_trans_deferred_array): Use gfc_may_be_finalized and do not\n+\tdeallocate the components of entities with a leading '_' in the\n+\tname that are also marked as artificial.\n+\t* trans-array.h : Add the new boolean argument to the prototype\n+\tof gfc_deallocate_alloc_comp_no_caf with a default of false.\n+\tAdd prototype for gfc_copy_alloc_comp_no_fini.\n+\t* trans-decl.cc(init_intent_out_dt): Tidy up the code.\n+\t* trans-expr.cc (gfc_init_se): Initialize finalblock.\n+\t(gfc_conv_procedure_call): Use gfc_finalize_tree_expr to\n+\tfinalize function results. Replace in-line block for class\n+\tresults with call to new function.\n+\t(gfc_conv_expr): Finalize structure constructors for F2003 and\n+\tF2008. Warn that this feature was deleted in F2018 and, unlike\n+\tarray constructors, is not default. Add array constructor\n+\tfinalblock to the post block.\n+\t(gfc_trans_scalar_assign): Suppress finalization by setting new\n+\targument in call to gfc_deallocate_alloc_comp_no_caf. Add the\n+\tfinalization blocks to the main block.\n+\t(gfc_trans_arrayfunc_assign): Use gfc_assignment_finalizer_call\n+\tand ensure that finalization occurs after the evaluation of the\n+\trhs but using the initial value for the lhs. Finalize rhs\n+\tfunction results using gfc_finalize_tree_expr.\n+\t(trans_class_assignment, gfc_trans_assignment_1): As previous\n+\tfunction, taking care to order evaluation, assignment and\n+\tfinalization correctly.\n+\t* trans-io.cc (gfc_trans_transfer): Add the final block.\n+\t* trans-stmt.cc (gfc_trans_call, gfc_trans_allocate): likewise.\n+\t(trans_associate_var): Nullify derived allocatable components\n+\tand finalize function targets with defined assignment\n+\tcomponents on leaving the block scope.\n+\t(trans_allocate): Finalize source expressions, if required,\n+\tand set init_expr artificial temporarily to suppress the\n+\tfinalization in gfc_trans_assignment.\n+\t* trans.cc (gfc_add_finalizer_call): Do not finalize the\n+\ttemporaries generated in type assignment with defined\n+\tassignment components.\n+\t(gfc_assignment_finalizer_call): New function.\n+\t(gfc_finalize_tree_expr): New function.\n+\t* trans.h: Add finalblock to gfc_se. Add the prototypes for\n+\tgfc_finalize_tree_expr and gfc_assignment_finalizer_call.\n+\n 2023-03-15  Harald Anlauf  <anlauf@gmx.de>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}, {"sha": "d6eccb1cdef45ce51c54090b77cb55b52b245f56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cffcb774c630c687791a0894d08d51f282ea1411/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cffcb774c630c687791a0894d08d51f282ea1411/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cffcb774c630c687791a0894d08d51f282ea1411", "patch": "@@ -1,3 +1,47 @@\n+2023-03-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/109094\n+\t* gcc.dg/analyzer/setjmp-pr109094.c: New test.\n+\n+2023-03-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/64290\n+\tPR fortran/67444\n+\tPR fortran/67471\n+\tPR fortran/69298\n+\tPR fortran/70863\n+\tPR fortran/71798\n+\tPR fortran/80524\n+\tPR fortran/82996\n+\tPR fortran/84472\n+\tPR fortran/88735\n+\tPR fortran/93691\n+\tPR fortran/91316\n+\tPR fortran/106576\n+\tPR fortran/37336\n+\t* gfortran.dg/finalize_38.f90 : New test.\n+\t* gfortran.dg/finalize_38a.f90 : New test.\n+\t* gfortran.dg/allocate_with_source_25.f90 : The number of final\n+\tcalls goes down from 6 to 4.\n+\t* gfortran.dg/associate_25.f90 : Remove the incorrect comment.\n+\t* gfortran.dg/auto_dealloc_2.f90 : Change the tree dump expr\n+\tbut the final count remains the same.\n+\t* gfortran.dg/unlimited_polymorphic_8.f90 : Tree dump reveals\n+\tfoo.1.x rather than foo.0.x\n+\t* gfortran.dg/finalize_39.f90 : New test.\n+\t* gfortran.dg/finalize_40.f90 : New test.\n+\t* gfortran.dg/finalize_41.f90 : New test.\n+\t* gfortran.dg/finalize_42.f90 : New test.\n+\t* gfortran.dg/finalize_43.f90 : New test.\n+\t* gfortran.dg/finalize_44.f90 : New test.\n+\t* gfortran.dg/finalize_45.f90 : New test.\n+\t* gfortran.dg/finalize_46.f90 : New test.\n+\t* gfortran.dg/finalize_47.f90 : New test.\n+\t* gfortran.dg/finalize_48.f90 : New test.\n+\t* gfortran.dg/finalize_49.f90 : New test.\n+\t* gfortran.dg/finalize_50.f90 : New test.\n+\t* gfortran.dg/finalize_51.f90 : New test.\n+\n 2023-03-17  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.dg/plugin/infoleak-2.c,"}, {"sha": "16b939399ec373669c4c8336cb7b016fba6cbc8b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cffcb774c630c687791a0894d08d51f282ea1411/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cffcb774c630c687791a0894d08d51f282ea1411/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cffcb774c630c687791a0894d08d51f282ea1411", "patch": "@@ -1,3 +1,9 @@\n+2023-03-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/109165\n+\t* testsuite/18_support/coroutines/hash.cc: Use const object\n+\tin second call.\n+\n 2023-03-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/109165"}]}