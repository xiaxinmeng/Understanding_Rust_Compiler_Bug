{"sha": "86cfdb4ea9bfb37fa1c9a573f20dd8e7c745b45f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZjZmRiNGVhOWJmYjM3ZmExYzlhNTczZjIwZGQ4ZTdjNzQ1YjQ1Zg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2015-01-06T02:02:27Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-01-06T02:02:27Z"}, "message": "remove tree_list from warn_hidden ()\n\ncp/\n\n\t* class.c (warn_hidden): Use auto_vec<tree> instead of tree_list to\n\thold base_fndecls.\n\t(get_basefndecls): Adjust.\n\nFrom-SVN: r219212", "tree": {"sha": "d11abcdd7dcbc6812919df6888efe261bbe3a968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d11abcdd7dcbc6812919df6888efe261bbe3a968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86cfdb4ea9bfb37fa1c9a573f20dd8e7c745b45f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86cfdb4ea9bfb37fa1c9a573f20dd8e7c745b45f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86cfdb4ea9bfb37fa1c9a573f20dd8e7c745b45f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86cfdb4ea9bfb37fa1c9a573f20dd8e7c745b45f/comments", "author": null, "committer": null, "parents": [{"sha": "f7d47c8a9bc90bea7475ca7e6102df4a8891c4c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d47c8a9bc90bea7475ca7e6102df4a8891c4c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d47c8a9bc90bea7475ca7e6102df4a8891c4c2"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "1163df3d427c158f2b1b5c52de9a4dac0212aa59", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86cfdb4ea9bfb37fa1c9a573f20dd8e7c745b45f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86cfdb4ea9bfb37fa1c9a573f20dd8e7c745b45f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=86cfdb4ea9bfb37fa1c9a573f20dd8e7c745b45f", "patch": "@@ -1,3 +1,9 @@\n+2015-01-05  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* class.c (warn_hidden): Use auto_vec<tree> instead of tree_list to\n+\thold base_fndecls.\n+\t(get_basefndecls): Adjust.\n+\n 2015-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "3b4aff89f7b219bb06b6e0c11f533b965a8137c0", "filename": "gcc/cp/class.c", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86cfdb4ea9bfb37fa1c9a573f20dd8e7c745b45f/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86cfdb4ea9bfb37fa1c9a573f20dd8e7c745b45f/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=86cfdb4ea9bfb37fa1c9a573f20dd8e7c745b45f", "patch": "@@ -129,7 +129,7 @@ vec<tree, va_gc> *local_classes;\n static tree get_vfield_name (tree);\n static void finish_struct_anon (tree);\n static tree get_vtable_name (tree);\n-static tree get_basefndecls (tree, tree);\n+static void get_basefndecls (tree, tree, vec<tree> *);\n static int build_primary_vtable (tree, tree);\n static int build_secondary_vtable (tree);\n static void finish_vtbls (tree);\n@@ -2751,16 +2751,16 @@ modify_all_vtables (tree t, tree virtuals)\n /* Get the base virtual function declarations in T that have the\n    indicated NAME.  */\n \n-static tree\n-get_basefndecls (tree name, tree t)\n+static void\n+get_basefndecls (tree name, tree t, vec<tree> *base_fndecls)\n {\n   tree methods;\n-  tree base_fndecls = NULL_TREE;\n   int n_baseclasses = BINFO_N_BASE_BINFOS (TYPE_BINFO (t));\n   int i;\n \n   /* Find virtual functions in T with the indicated NAME.  */\n   i = lookup_fnfields_1 (t, name);\n+  bool found_decls = false;\n   if (i != -1)\n     for (methods = (*CLASSTYPE_METHOD_VEC (t))[i];\n \t methods;\n@@ -2770,20 +2770,20 @@ get_basefndecls (tree name, tree t)\n \n \tif (TREE_CODE (method) == FUNCTION_DECL\n \t    && DECL_VINDEX (method))\n-\t  base_fndecls = tree_cons (NULL_TREE, method, base_fndecls);\n+\t  {\n+\t    base_fndecls->safe_push (method);\n+\t    found_decls = true;\n+\t  }\n       }\n \n-  if (base_fndecls)\n-    return base_fndecls;\n+  if (found_decls)\n+    return;\n \n   for (i = 0; i < n_baseclasses; i++)\n     {\n       tree basetype = BINFO_TYPE (BINFO_BASE_BINFO (TYPE_BINFO (t), i));\n-      base_fndecls = chainon (get_basefndecls (name, basetype),\n-\t\t\t      base_fndecls);\n+      get_basefndecls (name, basetype, base_fndecls);\n     }\n-\n-  return base_fndecls;\n }\n \n /* If this declaration supersedes the declaration of\n@@ -2845,7 +2845,6 @@ warn_hidden (tree t)\n       tree fn;\n       tree name;\n       tree fndecl;\n-      tree base_fndecls;\n       tree base_binfo;\n       tree binfo;\n       int j;\n@@ -2854,19 +2853,18 @@ warn_hidden (tree t)\n \t have the same name.  Figure out what name that is.  */\n       name = DECL_NAME (OVL_CURRENT (fns));\n       /* There are no possibly hidden functions yet.  */\n-      base_fndecls = NULL_TREE;\n+      auto_vec<tree, 20> base_fndecls;\n       /* Iterate through all of the base classes looking for possibly\n \t hidden functions.  */\n       for (binfo = TYPE_BINFO (t), j = 0;\n \t   BINFO_BASE_ITERATE (binfo, j, base_binfo); j++)\n \t{\n \t  tree basetype = BINFO_TYPE (base_binfo);\n-\t  base_fndecls = chainon (get_basefndecls (name, basetype),\n-\t\t\t\t  base_fndecls);\n+\t  get_basefndecls (name, basetype, &base_fndecls);\n \t}\n \n       /* If there are no functions to hide, continue.  */\n-      if (!base_fndecls)\n+      if (base_fndecls.is_empty ())\n \tcontinue;\n \n       /* Remove any overridden functions.  */\n@@ -2876,28 +2874,27 @@ warn_hidden (tree t)\n \t  if (TREE_CODE (fndecl) == FUNCTION_DECL\n \t      && DECL_VINDEX (fndecl))\n \t    {\n-\t      tree *prev = &base_fndecls;\n-\n-\t      while (*prev)\n \t\t/* If the method from the base class has the same\n \t\t   signature as the method from the derived class, it\n \t\t   has been overridden.  */\n-\t\tif (same_signature_p (fndecl, TREE_VALUE (*prev)))\n-\t\t  *prev = TREE_CHAIN (*prev);\n-\t\telse\n-\t\t  prev = &TREE_CHAIN (*prev);\n+\t\tfor (size_t k = 0; k < base_fndecls.length (); k++)\n+\t\tif (base_fndecls[k]\n+\t\t    && same_signature_p (fndecl, base_fndecls[k]))\n+\t\t  base_fndecls[k] = NULL_TREE;\n \t    }\n \t}\n \n       /* Now give a warning for all base functions without overriders,\n \t as they are hidden.  */\n-      while (base_fndecls)\n-\t{\n-\t  /* Here we know it is a hider, and no overrider exists.  */\n-\t  warning (OPT_Woverloaded_virtual, \"%q+D was hidden\", TREE_VALUE (base_fndecls));\n-\t  warning (OPT_Woverloaded_virtual, \"  by %q+D\", fns);\n-\t  base_fndecls = TREE_CHAIN (base_fndecls);\n-\t}\n+      size_t k;\n+      tree base_fndecl;\n+      FOR_EACH_VEC_ELT (base_fndecls, k, base_fndecl)\n+\tif (base_fndecl)\n+\t  {\n+\t      /* Here we know it is a hider, and no overrider exists.  */\n+\t      warning (OPT_Woverloaded_virtual, \"%q+D was hidden\", base_fndecl);\n+\t      warning (OPT_Woverloaded_virtual, \"  by %q+D\", fns);\n+\t  }\n     }\n }\n "}]}