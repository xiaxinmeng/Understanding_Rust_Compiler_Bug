{"sha": "bf4db96c93ce31bbad0984724f9ab2d6695ca9ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0ZGI5NmM5M2NlMzFiYmFkMDk4NDcyNGY5YWIyZDY2OTVjYTllZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-01-09T09:50:19Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-01-09T09:50:19Z"}, "message": "re PR ada/41929 (64-bit null_pointer_deref1 gnat.dg test consumes all available memory)\n\n\tPR ada/41929\n\t* config/sparc/sol2-unwind.h (sparc64_is_sighandler): Remove SAVPC and\n\tadd CFA.  Revert back to old code for Solaris 8+ multi-threaded.\n\t(sparc_is_sighandler): Likewise.\n\t(MD_FALLBACK_FRAME_STATE_FOR): Adjust call to IS_SIGHANDLER.\n\nFrom-SVN: r183005", "tree": {"sha": "631f523670cea7578486ca6c077bf976188a3b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/631f523670cea7578486ca6c077bf976188a3b09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf4db96c93ce31bbad0984724f9ab2d6695ca9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4db96c93ce31bbad0984724f9ab2d6695ca9ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf4db96c93ce31bbad0984724f9ab2d6695ca9ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4db96c93ce31bbad0984724f9ab2d6695ca9ee/comments", "author": null, "committer": null, "parents": [{"sha": "b492b6862ef38c3a8c7a67f4c410dcf69434507d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b492b6862ef38c3a8c7a67f4c410dcf69434507d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b492b6862ef38c3a8c7a67f4c410dcf69434507d"}], "stats": {"total": 137, "additions": 96, "deletions": 41}, "files": [{"sha": "3f23e724b97c808a1d2cf6ceee66dbcf1d300c54", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4db96c93ce31bbad0984724f9ab2d6695ca9ee/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4db96c93ce31bbad0984724f9ab2d6695ca9ee/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=bf4db96c93ce31bbad0984724f9ab2d6695ca9ee", "patch": "@@ -1,3 +1,11 @@\n+2012-01-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/41929\n+\t* config/sparc/sol2-unwind.h (sparc64_is_sighandler): Remove SAVPC and\n+\tadd CFA.  Revert back to old code for Solaris 8+ multi-threaded.\n+\t(sparc_is_sighandler): Likewise.\n+\t(MD_FALLBACK_FRAME_STATE_FOR): Adjust call to IS_SIGHANDLER.\n+\n 2012-01-06  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/ia64/t-ia64 (LIB1ASMFUNCS): Move backward"}, {"sha": "ea4c541b8159da260bd493548874fddb454fb6ce", "filename": "libgcc/config/sparc/sol2-unwind.h", "status": "modified", "additions": 88, "deletions": 41, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4db96c93ce31bbad0984724f9ab2d6695ca9ee/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4db96c93ce31bbad0984724f9ab2d6695ca9ee/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h?ref=bf4db96c93ce31bbad0984724f9ab2d6695ca9ee", "patch": "@@ -1,5 +1,5 @@\n /* DWARF2 EH unwinding support for SPARC Solaris.\n-   Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -34,7 +34,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define IS_SIGHANDLER sparc64_is_sighandler\n \n static int\n-sparc64_is_sighandler (unsigned int *pc, unsigned int *savpc, int *nframes)\n+sparc64_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n {\n   if (/* Solaris 8 - single-threaded\n \t----------------------------\n@@ -110,38 +110,59 @@ sparc64_is_sighandler (unsigned int *pc, unsigned int *savpc, int *nframes)\n       && pc[ 0] == 0x81c7e008\n       && pc[ 1] == 0x81e80000)\n     {\n-      if (/* Solaris 8 /usr/lib/sparcv9/libthread.so.1\n-\t    ------------------------------------------\n-\t    Before patch 108827-08:\n-\t    <sigacthandler+1760>:     st  %g4, [ %i1 + 0x1c ]\n-\n-\t    Since patch 108827-08:\n-\t    <sigacthandler+1816>:     st  %l0, [ %i4 + 0x10 ]  */\n-\t        savpc[-1] == 0xc826601c\n-\t     || savpc[-1] == 0xe0272010)\n+      /* We have observed different calling frames among different\n+\t versions of the operating system, so that we need to\n+\t discriminate using the upper frame.  We look for the return\n+\t address of the caller frame (there is an offset of 15 double\n+\t words between the frame address and the place where this return\n+\t address is stored) in order to do some more pattern matching.  */\n+      unsigned int cuh_pattern\n+\t= *(unsigned int *)(*(unsigned long *)(cfa + 15*8) - 4);\n+\n+      if (cuh_pattern == 0xd25fa7ef)\n \t{\n-\t  /* We need to move up three frames:\n+\t  /* This matches the call_user_handler pattern for Solaris 10.\n+\t     There are 2 cases so we look for the return address of the\n+\t     caller's caller frame in order to do more pattern matching.  */\n+\t  unsigned int sah_pattern\n+\t    = *(unsigned int *)(*(unsigned long *)(cfa + 176 + 15*8) - 4);\n+\n+          if (sah_pattern == 0x92100019)\n+\t    /* This is the same setup as for Solaris 9, see below.  */\n+\t    *nframes = 3;\n+\t  else\n+\t    /* The sigacthandler frame isn't present in the chain.\n+\t       We need to move up two frames:\n \n \t\t<signal handler>\t<-- context->cfa\n \t\t__sighndlr\n-\t\tsigacthandler\n+\t\tcall_user_handler frame\n \t\t<kernel>\n-\t  */\n-\t  *nframes = 2;\n+\t    */\n+\t    *nframes = 2;\n \t}\n-      else /* Solaris 8 /usr/lib/lwp/sparcv9/libthread.so.1, Solaris 9+\n-\t     ----------------------------------------------------------  */\n-\t{\n-\t  /* We need to move up three frames:\n+      else if (cuh_pattern == 0x9410001a || cuh_pattern == 0x94100013)\n+\t/* This matches the call_user_handler pattern for Solaris 9 and\n+\t   for Solaris 8 running inside Solaris Containers respectively\n+\t   We need to move up three frames:\n \n \t\t<signal handler>\t<-- context->cfa\n \t\t__sighndlr\n \t\tcall_user_handler\n \t\tsigacthandler\n \t\t<kernel>\n-\t  */\n-\t  *nframes = 3;\n-\t}\n+\t*/\n+\t*nframes = 3;\n+      else\n+\t/* This is the default Solaris 8 case.\n+\t   We need to move up two frames:\n+\n+\t\t<signal handler>\t<-- context->cfa\n+\t\t__sighndlr\n+\t\tsigacthandler\n+\t\t<kernel>\n+\t*/\n+\t*nframes = 2;\n       return 1;\n     }\n \n@@ -181,7 +202,7 @@ sparc64_frob_update_context (struct _Unwind_Context *context,\n #define IS_SIGHANDLER sparc_is_sighandler\n \n static int\n-sparc_is_sighandler (unsigned int *pc, unsigned int * savpc, int *nframes)\n+sparc_is_sighandler (unsigned int *pc, void *cfa, int *nframes)\n {\n   if (/* Solaris 8, 9 - single-threaded\n         -------------------------------\n@@ -209,7 +230,7 @@ sparc_is_sighandler (unsigned int *pc, unsigned int * savpc, int *nframes)\n       && pc[-1] == 0x9410001a\n       && pc[ 0] == 0x80a62008)\n     {\n-      /* Need to move up one frame:\n+      /* We need to move up one frame:\n \n \t\t<signal handler>\t<-- context->cfa\n \t\tsigacthandler\n@@ -240,7 +261,7 @@ sparc_is_sighandler (unsigned int *pc, unsigned int * savpc, int *nframes)\n       && pc[ 1] == 0x81e80000\n       && pc[ 2] == 0x80a26000)\n     {\n-      /* Need to move up one frame:\n+      /* We need to move up one frame:\n \n \t\t<signal handler>\t<-- context->cfa\n \t\t__libthread_segvhdlr\n@@ -267,33 +288,59 @@ sparc_is_sighandler (unsigned int *pc, unsigned int * savpc, int *nframes)\n      && pc[ 0] == 0x81c7e008\n      && pc[ 1] == 0x81e80000)\n     {\n-      if (/* Solaris 8 /usr/lib/libthread.so.1\n-\t    ----------------------------------\n-\t    <sigacthandler+1796>:     mov  %i0, %o0  */\n-\t  savpc[-1] == 0x90100018)\n+      /* We have observed different calling frames among different\n+\t versions of the operating system, so that we need to\n+\t discriminate using the upper frame.  We look for the return\n+\t address of the caller frame (there is an offset of 15 words\n+\t between the frame address and the place where this return\n+\t address is stored) in order to do some more pattern matching.  */\n+      unsigned int cuh_pattern\n+\t= *(unsigned int *)(*(unsigned int *)(cfa + 15*4) - 4);\n+\n+      if (cuh_pattern == 0xd407a04c)\n \t{\n-\t  /* We need to move up two frames:\n+\t  /* This matches the call_user_handler pattern for Solaris 10.\n+\t     There are 2 cases so we look for the return address of the\n+\t     caller's caller frame in order to do more pattern matching.  */\n+\t  unsigned int sah_pattern\n+\t    = *(unsigned int *)(*(unsigned int *)(cfa + 96 + 15*4) - 4);\n+\n+          if (sah_pattern == 0x92100019)\n+\t    /* This is the same setup as for Solaris 9, see below.  */\n+\t    *nframes = 3;\n+\t  else\n+\t    /* The sigacthandler frame isn't present in the chain.\n+\t       We need to move up two frames:\n \n \t\t<signal handler>\t<-- context->cfa\n \t\t__sighndlr\n-\t\tsigacthandler\n+\t\tcall_user_handler frame\n \t\t<kernel>\n-\t  */\n-\t  *nframes = 2;\n+\t    */\n+\t    *nframes = 2;\n \t}\n-      else /* Solaris 8 /usr/lib/lwp/libthread.so.1, Solaris 9+\n-\t     --------------------------------------------------  */\n-\t{\n-\t  /* We need to move up three frames:\n+      else if (cuh_pattern == 0x9410001a || cuh_pattern == 0x9410001b)\n+\t/* This matches the call_user_handler pattern for Solaris 9 and\n+\t   for Solaris 8 running inside Solaris Containers respectively.\n+\t   We need to move up three frames:\n \n \t\t<signal handler>\t<-- context->cfa\n \t\t__sighndlr\n \t\tcall_user_handler\n \t\tsigacthandler\n \t\t<kernel>\n-\t  */\n-\t  *nframes = 3;\n-\t}\n+\t*/\n+\t*nframes = 3;\n+      else\n+\t/* This is the default Solaris 8 case.\n+\t   We need to move up two frames:\n+\n+\t\t<signal handler>\t<-- context->cfa\n+\t\t__sighndlr\n+\t\tsigacthandler\n+\t\t<kernel>\n+\t*/\n+\t*nframes = 2;\n       return 1;\n     }\n \n@@ -331,7 +378,7 @@ MD_FALLBACK_FRAME_STATE_FOR (struct _Unwind_Context *context,\n       return _URC_NO_REASON;\n     }\n \n-  if (IS_SIGHANDLER (pc, (unsigned int *)fp->fr_savpc, &nframes))\n+  if (IS_SIGHANDLER (pc, this_cfa, &nframes))\n     {\n       struct handler_args {\n \tstruct frame frwin;"}]}