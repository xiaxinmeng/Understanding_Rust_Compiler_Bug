{"sha": "7b300d1385d166fbb827450f969af269270430d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzMDBkMTM4NWQxNjZmYmI4Mjc0NTBmOTY5YWYyNjkyNzA0MzBkOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-07-25T20:17:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-07-25T20:17:28Z"}, "message": "invoke.texi (strict-prototypes): Remove.\n\n\t* invoke.texi (strict-prototypes): Remove.\n\t* extend.texi (Deprecated Features): Add strict-prototypes.\n\t(Backwards Compatibility): New node.\n\nFrom-SVN: r35253", "tree": {"sha": "e1fc72238d2233dc9f061fa05a7a5cf6fbbe273f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1fc72238d2233dc9f061fa05a7a5cf6fbbe273f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b300d1385d166fbb827450f969af269270430d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b300d1385d166fbb827450f969af269270430d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b300d1385d166fbb827450f969af269270430d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b300d1385d166fbb827450f969af269270430d8/comments", "author": null, "committer": null, "parents": [{"sha": "2c05a794ae84153cc6c67464d6ef9d459b45cb28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c05a794ae84153cc6c67464d6ef9d459b45cb28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c05a794ae84153cc6c67464d6ef9d459b45cb28"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "b1e123a714cd0bcd89f20ef6cd2a6f09f707846f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b300d1385d166fbb827450f969af269270430d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b300d1385d166fbb827450f969af269270430d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b300d1385d166fbb827450f969af269270430d8", "patch": "@@ -1,3 +1,9 @@\n+2000-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* invoke.texi (strict-prototypes): Remove.\n+\t* extend.texi (Deprecated Features): Add strict-prototypes.\n+\t(Backwards Compatibility): New node.\n+\n 2000-07-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.md (andsi_1+1): Allow HImode."}, {"sha": "88efe7c9e461b4ff2d60b96af5d8438e776bece5", "filename": "gcc/extend.texi", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b300d1385d166fbb827450f969af269270430d8/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b300d1385d166fbb827450f969af269270430d8/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=7b300d1385d166fbb827450f969af269270430d8", "patch": "@@ -66,6 +66,7 @@ C++ Language}, for extensions that apply @emph{only} to C++.\n * Return Address::      Getting the return or frame address of a function.\n * Other Builtins::      Other built-in functions.\n * Deprecated Features:: Things might disappear from g++.\n+* Backwards Compatibility:: Compatibilities with earlier definitions of C++.\n @end menu\n @end ifset\n @ifclear INTERNALS\n@@ -114,6 +115,7 @@ C++ Language}, for extensions that apply @emph{only} to C++.\n \t\t\t function.\n * Return Address::      Getting the return or frame address of a function.\n * Deprecated Features:: Things might disappear from g++.\n+* Backwards Compatibility:: Compatibilities with earlier definitions of C++.\n * Other Builtins::      Other built-in functions.\n @end menu\n @end ifclear\n@@ -3292,6 +3294,42 @@ defines how template definitions have to be organized across\n implementation units. g++ has an implicit instantiation mechanism that\n should work just fine for standard-conforming code.\n \n+@item -fstrict-prototype\n+@itemx -fno-strict-prototype\n+Previously it was possible to use an empty prototype parameter list to\n+indicate an unspecified number of parameters (like C), rather than no\n+parameters, as C++ demands. This feature has been removed, except where\n+it is required for backwards compatibility @xref{Backwards Compatibility}\n+\n+@end table\n+\n+@node Backwards Compatibility\n+@section Backwards Compatibility\n+@cindex Backwards Compatibility\n+@cindex ARM\n+\n+Now that there is a definitive ISO standard C++, g++ has a specification\n+to adhere to. The C++ language evolved over time, and features that used\n+to be acceptable in previous drafts of the standard, such as the ARM, are\n+no longer accepted. In order to allow compilation of C++ written to such\n+drafts, g++ contains some backwards compatibilities. @emph{All such\n+backwards compatibility features are liable to disappear in future\n+versions of g++.} They should be considered deprecated @xref{Deprecated\n+Features}.\n+\n+@table @code\n+@item For scope\n+If a variable is declared at for scope, it used to remain in scope until\n+the end of the scope which contained the for statement (rather than just\n+within the for scope). g++ retains this, but issues a warning, if such a\n+variable is accessed outside the for scope.\n+\n+@item implicit C language\n+Old C system header files did not contain an @code{extern \"C\" @{...@}}\n+scope to set the language. On such systems, all header files are\n+implicitly scoped inside a C language scope. Also, an empty prototype\n+@code{()} will be treated as an unspecified number of arguments, rather\n+than no arguments, as C++ demands.\n @end table\n \n @node C++ Extensions"}, {"sha": "382fb7bb7736168f0ee5b242be5bf87c2b27fd15", "filename": "gcc/invoke.texi", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b300d1385d166fbb827450f969af269270430d8/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b300d1385d166fbb827450f969af269270430d8/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=7b300d1385d166fbb827450f969af269270430d8", "patch": "@@ -111,7 +111,7 @@ in the following sections.\n -fhuge-objects -fno-implicit-templates -finit-priority\n -fno-implement-inlines -fname-mangling-version-@var{n}\n -fno-default-inline -fno-operator-names -fno-optional-diags -fpermissive\n--frepo -fstrict-prototype -fsquangle -ftemplate-depth-@var{n}\n+-frepo -fsquangle -ftemplate-depth-@var{n}\n -fuse-cxa-atexit -fvtable-thunks -nostdinc++ -Wctor-dtor-privacy\n -Wno-deprecated -Weffc++ -Wno-non-template-friend -Wnon-virtual-dtor\n -Wold-style-cast -Woverloaded-virtual -Wno-pmf-conversions -Wreorder\n@@ -1209,19 +1209,6 @@ of the language, you can save some space by using this flag.  Note that\n exception handling uses the same information, but it will generate it as\n needed.\n \n-@item -fstrict-prototype\n-Within an @samp{extern \"C\"} linkage specification, treat a function\n-declaration with no arguments, such as @samp{int foo ();}, as declaring\n-the function to take no arguments.  Normally, such a declaration means\n-that the function @code{foo} can take any combination of arguments, as\n-in C.  @samp{-pedantic} implies @samp{-fstrict-prototype} unless\n-overridden with @samp{-fno-strict-prototype}.\n-\n-Specifying this option will also suppress implicit declarations of\n-functions.\n-\n-This flag no longer affects declarations with C++ linkage.\n-\n @item -fsquangle\n @itemx -fno-squangle\n @samp{-fsquangle} will enable a compressed form of name mangling for"}]}