{"sha": "8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVjMTJlMzU1OTU1YTI0YTEzYmIwZDBiZjA3MWZhMjBhYTBkOGE1Zg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2007-10-12T21:21:28Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2007-10-12T21:21:28Z"}, "message": "i386.md (SI_REG, DI_REG): New constants.\n\n\t* config/i386/i386.md (SI_REG, DI_REG): New constants.\n\t(strmov): Use defined constants.\n\t(cmpstrnsi): Likewise.\n\t* config/i386/i386.c (decide_alg): Use defined constants.\n\t(ix86_expand_strlen): Likewise.\n\nFrom-SVN: r129276", "tree": {"sha": "cb8170acccd76cdc2bbab4e13aa487d7c7bd0830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb8170acccd76cdc2bbab4e13aa487d7c7bd0830"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f/comments", "author": null, "committer": null, "parents": [{"sha": "a9a81e7d6a50fc249f22af07504e9620f93d6037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a81e7d6a50fc249f22af07504e9620f93d6037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9a81e7d6a50fc249f22af07504e9620f93d6037"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "5be6f5a80780aebb7c0dd02f51eea7a81587218a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f", "patch": "@@ -1,3 +1,11 @@\n+2007-10-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/i386/i386.md (SI_REG, DI_REG): New constants.\n+\t(strmov): Use defined constants.\n+\t(cmpstrnsi): Likewise.\n+\t* config/i386/i386.c (decide_alg): Use defined constants.\n+\t(ix86_expand_strlen): Likewise.\n+\n 2007-10-12  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* dse.c (find_shift_sequence): Reinstate \"<= UNITS_PER_WORD\" condition."}, {"sha": "de15ff7c9ed917cf841e66d3889ceb008cd7cf1d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f", "patch": "@@ -15060,8 +15060,8 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size, bool memset,\n      additionally, memset wants eax and memcpy wants esi.  Don't\n      consider such algorithms if the user has appropriated those\n      registers for their own purposes.\t*/\n-  bool rep_prefix_usable = !(global_regs[2] || global_regs[5]\n-                             || (memset ? global_regs[0] : global_regs[4]));\n+  bool rep_prefix_usable = !(global_regs[CX_REG] || global_regs[DI_REG]\n+                             || (memset ? global_regs[AX_REG] : global_regs[SI_REG]));\n \n #define ALG_USABLE_P(alg) (rep_prefix_usable\t\t\t\\\n \t\t\t   || (alg != rep_prefix_1_byte\t\t\\\n@@ -16022,7 +16022,7 @@ ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n       rtx unspec;\n \n       /* Can't use this if the user has appropriated eax, ecx, or edi.  */\n-      if (global_regs[0] || global_regs[2] || global_regs[5])\n+      if (global_regs[AX_REG] || global_regs[CX_REG] || global_regs[DI_REG])\n         return false;\n \n       scratch2 = gen_reg_rtx (Pmode);"}, {"sha": "9f90d7ed31c99974cdf8a6f058aeabb470dbd519", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8ec12e355955a24a13bb0d0bf071fa20aa0d8a5f", "patch": "@@ -222,6 +222,8 @@\n   [(AX_REG\t\t\t 0)\n    (DX_REG\t\t\t 1)\n    (CX_REG\t\t\t 2)\n+   (SI_REG\t\t\t 4)\n+   (DI_REG\t\t\t 5)\n    (BP_REG\t\t\t 6)\n    (SP_REG\t\t\t 7)\n    (FLAGS_REG\t\t\t17)\n@@ -18704,7 +18706,7 @@\n \n   /* Can't use this if the user has appropriated esi or edi.  */\n   if ((TARGET_SINGLE_STRINGOP || optimize_size)\n-      && !(global_regs[4] || global_regs[5]))\n+      && !(global_regs[SI_REG] || global_regs[DI_REG]))\n     {\n       emit_insn (gen_strmov_singleop (operands[0], operands[1],\n \t\t\t\t      operands[2], operands[3],\n@@ -19190,7 +19192,7 @@\n   rtx addr1, addr2, out, outlow, count, countreg, align;\n \n   /* Can't use this if the user has appropriated esi or edi.  */\n-  if (global_regs[4] || global_regs[5])\n+  if (global_regs[SI_REG] || global_regs[DI_REG])\n     FAIL;\n \n   out = operands[0];"}]}