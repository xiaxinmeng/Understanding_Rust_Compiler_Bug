{"sha": "d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmNGVhMThhYzNiZGM3NzBhMThkOGQ1MTNhYjYyYmY0NTkyNWY0MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-11-06T21:21:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-11-06T21:21:16Z"}, "message": "gimplify.c (gimplify_omp_ordered): Fix up diagnostics wording.\n\n\t* gimplify.c (gimplify_omp_ordered): Fix up diagnostics\n\twording.\n\t* omp-low.c (check_omp_nesting_restrictions): Update for the\n\tvarious new OpenMP 4.5 nesting restrictions, clarified\n\tnesting glossary, closely nested region relationship clarified\n\tto mean explicit or implicit parallel regions (target/teams),\n\tuse %</%> or %qs where appropriate.\n\n\t* gcc.dg/gomp/ordered-2.c (f1): Expect an extra error.\n\t* g++.dg/gomp/ordered-2.C (f1): Likewise.\n\t* gfortran.dg/goacc/parallel-kernels-regions.f95: Adjust\n\texpected diagnostics for the addition of quotes.\n\t* gfortran.dg/gomp/target3.f90: Likewise.\n\t* c-c++-common/goacc/nesting-fail-1.c: Likewise.\n\t* c-c++-common/goacc-gomp/nesting-fail-1.c: Likewise.\n\t* c-c++-common/gomp/doacross-1.c: Likewise.\n\t* c-c++-common/gomp/nesting-warn-1.c: Likewise.\n\t* c-c++-common/gomp/cancel-1.c (f2): Add some new tests.\n\tAdjust expected diagnostics wording.\n\t* c-c++-common/gomp/clauses-4.c (foo): Likewise.\n\tDon't expect error on ordered threads simd when in for simd.\n\t* c-c++-common/gomp/nesting-2.c: New test.\n\t* c-c++-common/gomp/ordered-3.c (foo): Add some new tests.\n\t* c-c++-common/gomp/ordered-4.c: New test.\n\nFrom-SVN: r229892", "tree": {"sha": "729e652e0957e4c85caef97bcc4ceea8b3ba60e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/729e652e0957e4c85caef97bcc4ceea8b3ba60e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38101f91e6f6e27ccb8432c1965e6ccb1387c377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38101f91e6f6e27ccb8432c1965e6ccb1387c377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38101f91e6f6e27ccb8432c1965e6ccb1387c377"}], "stats": {"total": 627, "additions": 524, "deletions": 103}, "files": [{"sha": "7c19722b4923e7fa54f10d3ad926487287716fa5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -1,3 +1,13 @@\n+2015-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.c (gimplify_omp_ordered): Fix up diagnostics\n+\twording.\n+\t* omp-low.c (check_omp_nesting_restrictions): Update for the\n+\tvarious new OpenMP 4.5 nesting restrictions, clarified\n+\tnesting glossary, closely nested region relationship clarified\n+\tto mean explicit or implicit parallel regions (target/teams),\n+\tuse %</%> or %qs where appropriate.\n+\n 2015-11-06  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "1fed426210f908809e6d48981c29de97db48f3af", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -9259,9 +9259,9 @@ gimplify_omp_ordered (tree expr, gimple_seq body)\n \t      || OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SOURCE))\n \t{\n \t  error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t    \"%<depend%> clause must be closely nested \"\n-\t\t    \"inside a loop with %<ordered%> clause with \"\n-\t\t    \"a parameter\");\n+\t\t    \"%<ordered%> construct with %<depend%> clause must be \"\n+\t\t    \"closely nested inside a loop with %<ordered%> clause \"\n+\t\t    \"with a parameter\");\n \t  failures++;\n \t}\n       else if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND"}, {"sha": "45d1927f678e27291f14ceb8c0273a04236a2f88", "filename": "gcc/omp-low.c", "status": "modified", "additions": 136, "deletions": 47, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -3112,9 +3112,9 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n   if (!(is_gimple_omp (stmt)\n \t&& is_gimple_omp_oacc (stmt)))\n     {\n-      for (omp_context *ctx_ = ctx; ctx_ != NULL; ctx_ = ctx_->outer)\n-\tif (is_gimple_omp (ctx_->stmt)\n-\t    && is_gimple_omp_oacc (ctx_->stmt)\n+      for (omp_context *octx = ctx; octx != NULL; octx = octx->outer)\n+\tif (is_gimple_omp (octx->stmt)\n+\t    && is_gimple_omp_oacc (octx->stmt)\n \t    /* Except for atomic codes that we share with OpenMP.  */\n \t    && ! (gimple_code (stmt) == GIMPLE_OMP_ATOMIC_LOAD\n \t\t  || gimple_code (stmt) == GIMPLE_OMP_ATOMIC_STORE))\n@@ -3134,12 +3134,27 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t  if (gimple_code (stmt) == GIMPLE_OMP_ORDERED)\n \t    {\n \t      c = gimple_omp_ordered_clauses (as_a <gomp_ordered *> (stmt));\n-\t      if (c && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_SIMD)\n-\t\treturn true;\n+\t      if (find_omp_clause (c, OMP_CLAUSE_SIMD))\n+\t\t{\n+\t\t  if (find_omp_clause (c, OMP_CLAUSE_THREADS)\n+\t\t      && (ctx->outer == NULL\n+\t\t\t  || !gimple_omp_for_combined_into_p (ctx->stmt)\n+\t\t\t  || gimple_code (ctx->outer->stmt) != GIMPLE_OMP_FOR\n+\t\t\t  || (gimple_omp_for_kind (ctx->outer->stmt)\n+\t\t\t      != GF_OMP_FOR_KIND_FOR)\n+\t\t\t  || !gimple_omp_for_combined_p (ctx->outer->stmt)))\n+\t\t    {\n+\t\t      error_at (gimple_location (stmt),\n+\t\t\t\t\"%<ordered simd threads%> must be closely \"\n+\t\t\t\t\"nested inside of %<for simd%> region\");\n+\t\t      return false;\n+\t\t    }\n+\t\t  return true;\n+\t\t}\n \t    }\n \t  error_at (gimple_location (stmt),\n \t\t    \"OpenMP constructs other than %<#pragma omp ordered simd%>\"\n-\t\t    \" may not be nested inside simd region\");\n+\t\t    \" may not be nested inside %<simd%> region\");\n \t  return false;\n \t}\n       else if (gimple_code (ctx->stmt) == GIMPLE_OMP_TEAMS)\n@@ -3150,8 +3165,9 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t      && gimple_code (stmt) != GIMPLE_OMP_PARALLEL)\n \t    {\n \t      error_at (gimple_location (stmt),\n-\t\t\t\"only distribute or parallel constructs are allowed to \"\n-\t\t\t\"be closely nested inside teams construct\");\n+\t\t\t\"only %<distribute%> or %<parallel%> regions are \"\n+\t\t\t\"allowed to be strictly nested inside %<teams%> \"\n+\t\t\t\"region\");\n \t      return false;\n \t    }\n \t}\n@@ -3166,8 +3182,8 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t  if (ctx != NULL && gimple_code (ctx->stmt) != GIMPLE_OMP_TEAMS)\n \t    {\n \t      error_at (gimple_location (stmt),\n-\t\t\t\"distribute construct must be closely nested inside \"\n-\t\t\t\"teams construct\");\n+\t\t\t\"%<distribute%> region must be strictly nested \"\n+\t\t\t\"inside %<teams%> construct\");\n \t      return false;\n \t    }\n \t  return true;\n@@ -3222,13 +3238,15 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t{\n \t  const char *bad = NULL;\n \t  const char *kind = NULL;\n+\t  const char *construct\n+\t    = (DECL_FUNCTION_CODE (gimple_call_fndecl (stmt))\n+\t       == BUILT_IN_GOMP_CANCEL)\n+\t      ? \"#pragma omp cancel\"\n+\t      : \"#pragma omp cancellation point\";\n \t  if (ctx == NULL)\n \t    {\n \t      error_at (gimple_location (stmt), \"orphaned %qs construct\",\n-\t\t\tDECL_FUNCTION_CODE (gimple_call_fndecl (stmt))\n-\t\t\t== BUILT_IN_GOMP_CANCEL\n-\t\t\t? \"#pragma omp cancel\"\n-\t\t\t: \"#pragma omp cancellation point\");\n+\t\t\tconstruct);\n \t      return false;\n \t    }\n \t  switch (tree_fits_shwi_p (gimple_call_arg (stmt, 0))\n@@ -3304,7 +3322,33 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t      if (gimple_code (ctx->stmt) != GIMPLE_OMP_TASK)\n \t\tbad = \"#pragma omp task\";\n \t      else\n-\t\tctx->cancellable = true;\n+\t\t{\n+\t\t  for (omp_context *octx = ctx->outer;\n+\t\t       octx; octx = octx->outer)\n+\t\t    {\n+\t\t      switch (gimple_code (octx->stmt))\n+\t\t\t{\n+\t\t\tcase GIMPLE_OMP_TASKGROUP:\n+\t\t\t  break;\n+\t\t\tcase GIMPLE_OMP_TARGET:\n+\t\t\t  if (gimple_omp_target_kind (octx->stmt)\n+\t\t\t      != GF_OMP_TARGET_KIND_REGION)\n+\t\t\t    continue;\n+\t\t\t  /* FALLTHRU */\n+\t\t\tcase GIMPLE_OMP_PARALLEL:\n+\t\t\tcase GIMPLE_OMP_TEAMS:\n+\t\t\t  error_at (gimple_location (stmt),\n+\t\t\t\t    \"%<%s taskgroup%> construct not closely \"\n+\t\t\t\t    \"nested inside of %<taskgroup%> region\",\n+\t\t\t\t    construct);\n+\t\t\t  return false;\n+\t\t\tdefault:\n+\t\t\t  continue;\n+\t\t\t}\n+\t\t      break;\n+\t\t    }\n+\t\t  ctx->cancellable = true;\n+\t\t}\n \t      kind = \"taskgroup\";\n \t      break;\n \t    default:\n@@ -3315,10 +3359,7 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t    {\n \t      error_at (gimple_location (stmt),\n \t\t\t\"%<%s %s%> construct not closely nested inside of %qs\",\n-\t\t\tDECL_FUNCTION_CODE (gimple_call_fndecl (stmt))\n-\t\t\t== BUILT_IN_GOMP_CANCEL\n-\t\t\t? \"#pragma omp cancel\"\n-\t\t\t: \"#pragma omp cancellation point\", kind, bad);\n+\t\t\tconstruct, kind, bad);\n \t      return false;\n \t    }\n \t}\n@@ -3329,6 +3370,10 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \tswitch (gimple_code (ctx->stmt))\n \t  {\n \t  case GIMPLE_OMP_FOR:\n+\t    if (gimple_omp_for_kind (ctx->stmt) != GF_OMP_FOR_KIND_FOR\n+\t\t&& gimple_omp_for_kind (ctx->stmt) != GF_OMP_FOR_KIND_TASKLOOP)\n+\t      break;\n+\t    /* FALLTHRU */\n \t  case GIMPLE_OMP_SECTIONS:\n \t  case GIMPLE_OMP_SINGLE:\n \t  case GIMPLE_OMP_ORDERED:\n@@ -3342,17 +3387,24 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t\t  return true;\n \t\terror_at (gimple_location (stmt),\n \t\t\t  \"barrier region may not be closely nested inside \"\n-\t\t\t  \"of work-sharing, critical, ordered, master or \"\n-\t\t\t  \"explicit task region\");\n+\t\t\t  \"of work-sharing, %<critical%>, %<ordered%>, \"\n+\t\t\t  \"%<master%>, explicit %<task%> or %<taskloop%> \"\n+\t\t\t  \"region\");\n \t\treturn false;\n \t      }\n \t    error_at (gimple_location (stmt),\n \t\t      \"work-sharing region may not be closely nested inside \"\n-\t\t      \"of work-sharing, critical, ordered, master or explicit \"\n-\t\t      \"task region\");\n+\t\t      \"of work-sharing, %<critical%>, %<ordered%>, \"\n+\t\t      \"%<master%>, explicit %<task%> or %<taskloop%> region\");\n \t    return false;\n \t  case GIMPLE_OMP_PARALLEL:\n+\t  case GIMPLE_OMP_TEAMS:\n \t    return true;\n+\t  case GIMPLE_OMP_TARGET:\n+\t    if (gimple_omp_target_kind (ctx->stmt)\n+\t\t== GF_OMP_TARGET_KIND_REGION)\n+\t      return true;\n+\t    break;\n \t  default:\n \t    break;\n \t  }\n@@ -3362,15 +3414,26 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \tswitch (gimple_code (ctx->stmt))\n \t  {\n \t  case GIMPLE_OMP_FOR:\n+\t    if (gimple_omp_for_kind (ctx->stmt) != GF_OMP_FOR_KIND_FOR\n+\t\t&& gimple_omp_for_kind (ctx->stmt) != GF_OMP_FOR_KIND_TASKLOOP)\n+\t      break;\n+\t    /* FALLTHRU */\n \t  case GIMPLE_OMP_SECTIONS:\n \t  case GIMPLE_OMP_SINGLE:\n \t  case GIMPLE_OMP_TASK:\n \t    error_at (gimple_location (stmt),\n-\t\t      \"master region may not be closely nested inside \"\n-\t\t      \"of work-sharing or explicit task region\");\n+\t\t      \"%<master%> region may not be closely nested inside \"\n+\t\t      \"of work-sharing, explicit %<task%> or %<taskloop%> \"\n+\t\t      \"region\");\n \t    return false;\n \t  case GIMPLE_OMP_PARALLEL:\n+\t  case GIMPLE_OMP_TEAMS:\n \t    return true;\n+\t  case GIMPLE_OMP_TARGET:\n+\t    if (gimple_omp_target_kind (ctx->stmt)\n+\t\t== GF_OMP_TARGET_KIND_REGION)\n+\t      return true;\n+\t    break;\n \t  default:\n \t    break;\n \t  }\n@@ -3395,8 +3458,7 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t  if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_DEPEND)\n \t    {\n \t      gcc_assert (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_THREADS\n-\t\t\t  || (ctx == NULL\n-\t\t\t      && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_SIMD));\n+\t\t\t  || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_SIMD);\n \t      continue;\n \t    }\n \t  enum omp_clause_depend_kind kind = OMP_CLAUSE_DEPEND_KIND (c);\n@@ -3412,23 +3474,40 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t\t\t\t\t   OMP_CLAUSE_ORDERED)) == NULL_TREE)\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t    \"%<depend%> clause must be closely nested \"\n-\t\t\t    \"inside an ordered loop\");\n+\t\t\t    \"%<ordered%> construct with %<depend%> clause \"\n+\t\t\t    \"must be closely nested inside an %<ordered%> \"\n+\t\t\t    \"loop\");\n \t\t  return false;\n \t\t}\n \t      else if (OMP_CLAUSE_ORDERED_EXPR (oclause) == NULL_TREE)\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t    \"%<depend%> clause must be closely nested \"\n-\t\t\t    \"inside a loop with %<ordered%> clause with \"\n-\t\t\t    \"a parameter\");\n+\t\t\t    \"%<ordered%> construct with %<depend%> clause \"\n+\t\t\t    \"must be closely nested inside a loop with \"\n+\t\t\t    \"%<ordered%> clause with a parameter\");\n \t\t  return false;\n \t\t}\n \t    }\n \t  else\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\"invalid depend kind in omp ordered depend\");\n+\t\t\t\"invalid depend kind in omp %<ordered%> %<depend%>\");\n+\t      return false;\n+\t    }\n+\t}\n+      c = gimple_omp_ordered_clauses (as_a <gomp_ordered *> (stmt));\n+      if (find_omp_clause (c, OMP_CLAUSE_SIMD))\n+\t{\n+\t  /* ordered simd must be closely nested inside of simd region,\n+\t     and simd region must not encounter constructs other than\n+\t     ordered simd, therefore ordered simd may be either orphaned,\n+\t     or ctx->stmt must be simd.  The latter case is handled already\n+\t     earlier.  */\n+\t  if (ctx != NULL)\n+\t    {\n+\t      error_at (gimple_location (stmt),\n+\t\t\t\"%<ordered%> %<simd%> must be closely nested inside \"\n+\t\t\t\"%<simd%> region\");\n \t      return false;\n \t    }\n \t}\n@@ -3437,24 +3516,35 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t  {\n \t  case GIMPLE_OMP_CRITICAL:\n \t  case GIMPLE_OMP_TASK:\n+\t  case GIMPLE_OMP_ORDERED:\n+\t  ordered_in_taskloop:\n \t    error_at (gimple_location (stmt),\n-\t\t      \"ordered region may not be closely nested inside \"\n-\t\t      \"of critical or explicit task region\");\n+\t\t      \"%<ordered%> region may not be closely nested inside \"\n+\t\t      \"of %<critical%>, %<ordered%>, explicit %<task%> or \"\n+\t\t      \"%<taskloop%> region\");\n \t    return false;\n \t  case GIMPLE_OMP_FOR:\n+\t    if (gimple_omp_for_kind (ctx->stmt) == GF_OMP_FOR_KIND_TASKLOOP)\n+\t      goto ordered_in_taskloop;\n \t    if (find_omp_clause (gimple_omp_for_clauses (ctx->stmt),\n \t\t\t\t OMP_CLAUSE_ORDERED) == NULL)\n \t      {\n \t\terror_at (gimple_location (stmt),\n-\t\t\t  \"ordered region must be closely nested inside \"\n-\t\t\t  \"a loop region with an ordered clause\");\n+\t\t\t  \"%<ordered%> region must be closely nested inside \"\n+\t\t\t  \"a loop region with an %<ordered%> clause\");\n \t\treturn false;\n \t      }\n \t    return true;\n+\t  case GIMPLE_OMP_TARGET:\n+\t    if (gimple_omp_target_kind (ctx->stmt)\n+\t\t!= GF_OMP_TARGET_KIND_REGION)\n+\t      break;\n+\t    /* FALLTHRU */\n \t  case GIMPLE_OMP_PARALLEL:\n+\t  case GIMPLE_OMP_TEAMS:\n \t    error_at (gimple_location (stmt),\n-\t\t      \"ordered region must be closely nested inside \"\n-\t\t      \"a loop region with an ordered clause\");\n+\t\t      \"%<ordered%> region must be closely nested inside \"\n+\t\t      \"a loop region with an %<ordered%> clause\");\n \t    return false;\n \t  default:\n \t    break;\n@@ -3470,8 +3560,8 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t    if (this_stmt_name == gimple_omp_critical_name (other_crit))\n \t      {\n \t\terror_at (gimple_location (stmt),\n-\t\t\t  \"critical region may not be nested inside a critical \"\n-\t\t\t  \"region with the same name\");\n+\t\t\t  \"%<critical%> region may not be nested inside \"\n+\t\t\t   \"a %<critical%> region with the same name\");\n \t\treturn false;\n \t      }\n       }\n@@ -3482,8 +3572,8 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t  || gimple_omp_target_kind (ctx->stmt) != GF_OMP_TARGET_KIND_REGION)\n \t{\n \t  error_at (gimple_location (stmt),\n-\t\t    \"teams construct not closely nested inside of target \"\n-\t\t    \"region\");\n+\t\t    \"%<teams%> construct not closely nested inside of \"\n+\t\t    \"%<target%> construct\");\n \t  return false;\n \t}\n       break;\n@@ -3549,7 +3639,7 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t      != is_gimple_omp_oacc (ctx->stmt))\n \t    {\n \t      error_at (gimple_location (stmt),\n-\t\t\t\"%s %s construct inside of %s %s region\",\n+\t\t\t\"%s %qs construct inside of %s %qs region\",\n \t\t\t(is_gimple_omp_oacc (stmt)\n \t\t\t ? \"OpenACC\" : \"OpenMP\"), stmt_name,\n \t\t\t(is_gimple_omp_oacc (ctx->stmt)\n@@ -3562,15 +3652,14 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t      if (is_gimple_omp_oacc (ctx->stmt))\n \t\t{\n \t\t  error_at (gimple_location (stmt),\n-\t\t\t    \"%s construct inside of %s region\",\n+\t\t\t    \"%qs construct inside of %qs region\",\n \t\t\t    stmt_name, ctx_stmt_name);\n \t\t  return false;\n \t\t}\n \t      else\n \t\t{\n-\t\t  gcc_checking_assert (!is_gimple_omp_oacc (stmt));\n \t\t  warning_at (gimple_location (stmt), 0,\n-\t\t\t      \"%s construct inside of %s region\",\n+\t\t\t      \"%qs construct inside of %qs region\",\n \t\t\t      stmt_name, ctx_stmt_name);\n \t\t}\n \t    }"}, {"sha": "725273be54136b364f0fad49b619c20ff9b9cdd0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -1,3 +1,22 @@\n+2015-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/gomp/ordered-2.c (f1): Expect an extra error.\n+\t* g++.dg/gomp/ordered-2.C (f1): Likewise.\n+\t* gfortran.dg/goacc/parallel-kernels-regions.f95: Adjust\n+\texpected diagnostics for the addition of quotes.\n+\t* gfortran.dg/gomp/target3.f90: Likewise.\n+\t* c-c++-common/goacc/nesting-fail-1.c: Likewise.\n+\t* c-c++-common/goacc-gomp/nesting-fail-1.c: Likewise.\n+\t* c-c++-common/gomp/doacross-1.c: Likewise.\n+\t* c-c++-common/gomp/nesting-warn-1.c: Likewise.\n+\t* c-c++-common/gomp/cancel-1.c (f2): Add some new tests.\n+\tAdjust expected diagnostics wording.\n+\t* c-c++-common/gomp/clauses-4.c (foo): Likewise.\n+\tDon't expect error on ordered threads simd when in for simd.\n+\t* c-c++-common/gomp/nesting-2.c: New test.\n+\t* c-c++-common/gomp/ordered-3.c (foo): Add some new tests.\n+\t* c-c++-common/gomp/ordered-4.c: New test.\n+\n 2015-11-06  Mike Stump  <mikestump@comcast.net>\n \n \t* gcc.dg/pragma-diag-5.c: Make test cases unique."}, {"sha": "1a4472107c676c3f503cecf888b1946ce3b1f9a0", "filename": "gcc/testsuite/c-c++-common/goacc-gomp/nesting-fail-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-fail-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-fail-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-fail-1.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -151,15 +151,15 @@ f_omp (void)\n \n #pragma omp target\n   {\n-#pragma acc parallel /* { dg-error \"OpenACC parallel construct inside of OpenMP target region\" } */\n+#pragma acc parallel /* { dg-error \"OpenACC .parallel. construct inside of OpenMP .target. region\" } */\n     ;\n-#pragma acc kernels /* { dg-error \"OpenACC kernels construct inside of OpenMP target region\" } */\n+#pragma acc kernels /* { dg-error \"OpenACC .kernels. construct inside of OpenMP .target. region\" } */\n     ;\n-#pragma acc data /* { dg-error \"OpenACC data construct inside of OpenMP target region\" } */\n+#pragma acc data /* { dg-error \"OpenACC .data. construct inside of OpenMP .target. region\" } */\n     ;\n-#pragma acc update host(i) /* { dg-error \"OpenACC update construct inside of OpenMP target region\" } */\n-#pragma acc enter data copyin(i) /* { dg-error \"OpenACC enter/exit data construct inside of OpenMP target region\" } */\n-#pragma acc exit data delete(i) /* { dg-error \"OpenACC enter/exit data construct inside of OpenMP target region\" } */\n+#pragma acc update host(i) /* { dg-error \"OpenACC .update. construct inside of OpenMP .target. region\" } */\n+#pragma acc enter data copyin(i) /* { dg-error \"OpenACC .enter/exit data. construct inside of OpenMP .target. region\" } */\n+#pragma acc exit data delete(i) /* { dg-error \"OpenACC .enter/exit data. construct inside of OpenMP .target. region\" } */\n #pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (i = 0; i < 2; ++i)\n       ;"}, {"sha": "7a36074ae384fd78e4a69e07e21e58911da54a63", "filename": "gcc/testsuite/c-c++-common/goacc/nesting-fail-1.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-fail-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-fail-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-fail-1.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -7,15 +7,15 @@ f_acc_parallel (void)\n {\n #pragma acc parallel\n   {\n-#pragma acc parallel /* { dg-bogus \"parallel construct inside of parallel region\" \"not implemented\" { xfail *-*-* } } */\n+#pragma acc parallel /* { dg-bogus \".parallel. construct inside of .parallel. region\" \"not implemented\" { xfail *-*-* } } */\n     ;\n-#pragma acc kernels /* { dg-bogus \"kernels construct inside of parallel region\" \"not implemented\" { xfail *-*-* } } */\n+#pragma acc kernels /* { dg-bogus \".kernels. construct inside of .parallel. region\" \"not implemented\" { xfail *-*-* } } */\n     ;\n-#pragma acc data /* { dg-error \"data construct inside of parallel region\" } */\n+#pragma acc data /* { dg-error \".data. construct inside of .parallel. region\" } */\n     ;\n-#pragma acc update host(i) /* { dg-error \"update construct inside of parallel region\" } */\n-#pragma acc enter data copyin(i) /* { dg-error \"enter/exit data construct inside of parallel region\" } */\n-#pragma acc exit data delete(i) /* { dg-error \"enter/exit data construct inside of parallel region\" } */\n+#pragma acc update host(i) /* { dg-error \".update. construct inside of .parallel. region\" } */\n+#pragma acc enter data copyin(i) /* { dg-error \".enter/exit data. construct inside of .parallel. region\" } */\n+#pragma acc exit data delete(i) /* { dg-error \".enter/exit data. construct inside of .parallel. region\" } */\n   }\n }\n \n@@ -26,14 +26,14 @@ f_acc_kernels (void)\n {\n #pragma acc kernels\n   {\n-#pragma acc parallel /* { dg-bogus \"parallel construct inside of kernels region\" \"not implemented\" { xfail *-*-* } } */\n+#pragma acc parallel /* { dg-bogus \".parallel. construct inside of .kernels. region\" \"not implemented\" { xfail *-*-* } } */\n     ;\n-#pragma acc kernels /* { dg-bogus \"kernels construct inside of kernels region\" \"not implemented\" { xfail *-*-* } } */\n+#pragma acc kernels /* { dg-bogus \".kernels. construct inside of .kernels. region\" \"not implemented\" { xfail *-*-* } } */\n     ;\n-#pragma acc data /* { dg-error \"data construct inside of kernels region\" } */\n+#pragma acc data /* { dg-error \".data. construct inside of .kernels. region\" } */\n     ;\n-#pragma acc update host(i) /* { dg-error \"update construct inside of kernels region\" } */\n-#pragma acc enter data copyin(i) /* { dg-error \"enter/exit data construct inside of kernels region\" } */\n-#pragma acc exit data delete(i) /* { dg-error \"enter/exit data construct inside of kernels region\" } */\n+#pragma acc update host(i) /* { dg-error \".update. construct inside of .kernels. region\" } */\n+#pragma acc enter data copyin(i) /* { dg-error \".enter/exit data. construct inside of .kernels. region\" } */\n+#pragma acc exit data delete(i) /* { dg-error \".enter/exit data. construct inside of .kernels. region\" } */\n   }\n }"}, {"sha": "896a76858bd3172addfdfc7befe21061e431a400", "filename": "gcc/testsuite/c-c++-common/gomp/cancel-1.c", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-1.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -73,6 +73,18 @@ f2 (void)\n       #pragma omp cancellation point taskgroup\t/* { dg-error \"not closely nested inside\" } */\n     }\n     #pragma omp task\n+    {\n+      #pragma omp cancel parallel\t\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancel for\t\t\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancel sections\t\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancel taskgroup\t\t/* { dg-error \"construct not closely nested inside of .taskgroup. region\" } */\n+      #pragma omp cancellation point parallel\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancellation point for\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancellation point sections\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancellation point taskgroup\t/* { dg-error \"construct not closely nested inside of .taskgroup. region\" } */\n+    }\n+    #pragma omp taskgroup\n+    #pragma omp task\n     {\n       #pragma omp cancel parallel\t\t/* { dg-error \"not closely nested inside\" } */\n       #pragma omp cancel for\t\t\t/* { dg-error \"not closely nested inside\" } */\n@@ -83,6 +95,55 @@ f2 (void)\n       #pragma omp cancellation point sections\t/* { dg-error \"not closely nested inside\" } */\n       #pragma omp cancellation point taskgroup\n     }\n+    #pragma omp taskgroup\n+    {\n+      #pragma omp task\n+      {\n+\t#pragma omp task\n+\t{\n+\t  #pragma omp cancellation point taskgroup\n+\t  #pragma omp cancel taskgroup\n+\t}\n+      }\n+    }\n+    #pragma omp taskgroup\n+    {\n+      #pragma omp parallel\n+      {\n+\t#pragma omp task\n+\t{\n+\t  #pragma omp cancel taskgroup\t\t/* { dg-error \"construct not closely nested inside of .taskgroup. region\" } */\n+\t  #pragma omp cancellation point taskgroup /* { dg-error \"construct not closely nested inside of .taskgroup. region\" } */\n+\t}\n+      }\n+      #pragma omp target\n+      {\n+\t#pragma omp task\n+\t{\n+\t  #pragma omp cancel taskgroup\t\t/* { dg-error \"construct not closely nested inside of .taskgroup. region\" } */\n+\t  #pragma omp cancellation point taskgroup /* { dg-error \"construct not closely nested inside of .taskgroup. region\" } */\n+\t}\n+      }\n+      #pragma omp target\n+      #pragma omp teams\n+      #pragma omp distribute\n+      for (i = 0; i < 10; i++)\n+\t{\n+\t  #pragma omp task\n+\t  {\n+\t    #pragma omp cancel taskgroup\t/* { dg-error \"construct not closely nested inside of .taskgroup. region\" } */\n+\t    #pragma omp cancellation point taskgroup /* { dg-error \"construct not closely nested inside of .taskgroup. region\" } */\n+\t  }\n+\t}\n+      #pragma omp target data map(i)\n+      {\n+\t#pragma omp task\n+\t{\n+\t  #pragma omp cancel taskgroup\n+\t  #pragma omp cancellation point taskgroup\n+\t}\n+      }\n+    }\n     #pragma omp for\n     for (i = 0; i < 10; i++)\n       {\n@@ -179,14 +240,14 @@ f2 (void)\n   }\n   #pragma omp target teams\n   {\n-    #pragma omp cancel parallel\t\t\t/* { dg-error \"only distribute or parallel constructs are allowed to be closely nested\" } */\n-    #pragma omp cancel for\t\t\t/* { dg-error \"only distribute or parallel constructs are allowed to be closely nested\" } */\n-    #pragma omp cancel sections\t\t\t/* { dg-error \"only distribute or parallel constructs are allowed to be closely nested\" } */\n-    #pragma omp cancel taskgroup\t\t/* { dg-error \"only distribute or parallel constructs are allowed to be closely nested\" } */\n-    #pragma omp cancellation point parallel\t/* { dg-error \"only distribute or parallel constructs are allowed to be closely nested\" } */\n-    #pragma omp cancellation point for\t\t/* { dg-error \"only distribute or parallel constructs are allowed to be closely nested\" } */\n-    #pragma omp cancellation point sections\t/* { dg-error \"only distribute or parallel constructs are allowed to be closely nested\" } */\n-    #pragma omp cancellation point taskgroup\t/* { dg-error \"only distribute or parallel constructs are allowed to be closely nested\" } */\n+    #pragma omp cancel parallel\t\t\t/* { dg-error \"only .distribute. or .parallel. regions are allowed to be strictly nested\" } */\n+    #pragma omp cancel for\t\t\t/* { dg-error \"only .distribute. or .parallel. regions are allowed to be strictly nested\" } */\n+    #pragma omp cancel sections\t\t\t/* { dg-error \"only .distribute. or .parallel. regions are allowed to be strictly nested\" } */\n+    #pragma omp cancel taskgroup\t\t/* { dg-error \"only .distribute. or .parallel. regions are allowed to be strictly nested\" } */\n+    #pragma omp cancellation point parallel\t/* { dg-error \"only .distribute. or .parallel. regions are allowed to be strictly nested\" } */\n+    #pragma omp cancellation point for\t\t/* { dg-error \"only .distribute. or .parallel. regions are allowed to be strictly nested\" } */\n+    #pragma omp cancellation point sections\t/* { dg-error \"only .distribute. or .parallel. regions are allowed to be strictly nested\" } */\n+    #pragma omp cancellation point taskgroup\t/* { dg-error \"only .distribute. or .parallel. regions are allowed to be strictly nested\" } */\n   }\n   #pragma omp target teams distribute\n   for (i = 0; i < 10; i++)"}, {"sha": "11e7634e14b9b10342874f5f26e3d357c8495b3e", "filename": "gcc/testsuite/c-c++-common/gomp/clauses-4.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-4.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -57,40 +57,62 @@ foo (int y, short z)\n   #pragma omp distribute parallel for ordered\t\t/* { dg-error \".ordered. is not valid for .#pragma omp distribute parallel for.\" } */\n   for (x = 0; x < 64; x++)\n     {\n-      #pragma omp ordered\t/* { dg-error \"ordered region must be closely nested inside a loop region with an ordered clause\" } */\n+      #pragma omp ordered\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n       ;\n     }\n   #pragma omp target teams\n   #pragma omp distribute parallel for simd ordered\t/* { dg-error \".ordered. is not valid for .#pragma omp distribute parallel for simd.\" } */\n   for (x = 0; x < 64; x++)\n     {\n-      #pragma omp ordered simd, threads\t/* { dg-error \"OpenMP constructs other than .#pragma omp ordered simd. may not be nested inside simd region\" } */\n+      #pragma omp ordered simd, threads\n       ;\n     }\n   #pragma omp target\n   #pragma omp teams distribute parallel for ordered\t\t/* { dg-error \".ordered. is not valid for .#pragma omp teams distribute parallel for.\" } */\n   for (x = 0; x < 64; x++)\n     {\n-      #pragma omp ordered\t/* { dg-error \"ordered region must be closely nested inside a loop region with an ordered clause\" } */\n+      #pragma omp ordered\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n       ;\n     }\n   #pragma omp target\n   #pragma omp teams distribute parallel for simd ordered\t/* { dg-error \".ordered. is not valid for .#pragma omp teams distribute parallel for simd.\" } */\n   for (x = 0; x < 64; x++)\n     {\n-      #pragma omp ordered simd, threads\t/* { dg-error \"OpenMP constructs other than .#pragma omp ordered simd. may not be nested inside simd region\" } */\n+      #pragma omp ordered simd, threads\n       ;\n     }\n   #pragma omp target teams distribute parallel for ordered\t\t/* { dg-error \".ordered. is not valid for .#pragma omp target teams distribute parallel for.\" } */\n   for (x = 0; x < 64; x++)\n     {\n-      #pragma omp ordered\t/* { dg-error \"ordered region must be closely nested inside a loop region with an ordered clause\" } */\n+      #pragma omp ordered\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n       ;\n     }\n   #pragma omp target teams distribute parallel for simd ordered\t/* { dg-error \".ordered. is not valid for .#pragma omp target teams distribute parallel for simd.\" } */\n   for (x = 0; x < 64; x++)\n     {\n-      #pragma omp ordered simd, threads\t/* { dg-error \"OpenMP constructs other than .#pragma omp ordered simd. may not be nested inside simd region\" } */\n+      #pragma omp ordered simd, threads\n+      ;\n+    }\n+  #pragma omp simd\n+  for (x = 0; x < 64; x++)\n+    {\n+      #pragma omp ordered threads simd\t\t/* { dg-error \".ordered simd threads. must be closely nested inside of .for simd. region\" } */\n+      ;\n+    }\n+  #pragma omp for\n+  for (x = 0; x < 64; x++)\n+    {\n+      #pragma omp simd\n+      for (y = 0; y < 16; y++)\n+\t{\n+\t  #pragma omp ordered simd threads\t/* { dg-error \".ordered simd threads. must be closely nested inside of .for simd. region\" } */\n+\t  ;\n+\t}\n+    }\n+  #pragma omp for simd\n+  for (x = 0; x < 64; x++)\n+    {\n+      #pragma omp ordered threads simd\n       ;\n     }\n }"}, {"sha": "6244ca08d2c9d94cbefcd84cb7838b3975affadc", "filename": "gcc/testsuite/c-c++-common/gomp/doacross-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-1.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -32,8 +32,8 @@ foo (void)\n \t  #pragma omp ordered depend (sink: i - 1, j - 2) /* { dg-error \"does not match number\" } */\n \t  #pragma omp ordered depend (source)\n \t}\n-  #pragma omp ordered depend (sink: j)\t\t\t/* { dg-error \"clause must be closely nested inside an ordered loop\" } */\n-  #pragma omp ordered depend (source)\t\t\t/* { dg-error \"clause must be closely nested inside an ordered loop\" } */\n+  #pragma omp ordered depend (sink: j)\t\t\t/* { dg-error \"clause must be closely nested inside an .ordered. loop\" } */\n+  #pragma omp ordered depend (source)\t\t\t/* { dg-error \"clause must be closely nested inside an .ordered. loop\" } */\n   #pragma omp for ordered (1)\n   for (i = 0; i < 64; i++)\n     {"}, {"sha": "7a03430311df77d7f6bda9463189e337751a47a1", "filename": "gcc/testsuite/c-c++-common/gomp/nesting-2.c", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnesting-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnesting-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnesting-2.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -0,0 +1,154 @@\n+void\n+foo (void)\n+{\n+  int i;\n+  #pragma omp taskloop\n+  for (i = 0; i < 64; i++)\n+    {\n+      int j;\n+      #pragma omp for\t\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+      for (j = 0; j < 10; j++)\n+\t;\n+      #pragma omp single\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+      ;\n+      #pragma omp sections\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+      {\n+\t#pragma omp section\n+\t;\n+      }\n+      #pragma omp barrier\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+      #pragma omp master\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+      ;\n+      #pragma omp ordered\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+      ;\n+      #pragma omp ordered threads\t/* { dg-error \"region may not be closely nested inside of\" } */\n+      ;\n+      #pragma omp ordered simd threads\t/* { dg-error \".ordered. .simd. must be closely nested inside .simd. region\" } */\n+      ;\n+      #pragma omp simd\n+      for (j = 0; j < 10; j++)\n+\t#pragma omp ordered simd\n+\t  ;\n+      #pragma omp critical\n+      {\n+\t#pragma omp simd\n+\tfor (j = 0; j < 10; j++)\n+\t  #pragma omp ordered simd\n+\t    ;\n+      }\n+    }\n+  #pragma omp taskloop\n+  for (i = 0; i < 64; i++)\n+    #pragma omp parallel\n+    {\n+      int j;\n+      #pragma omp for\n+      for (j = 0; j < 10; j++)\n+\t;\n+      #pragma omp single\n+      ;\n+      #pragma omp sections\n+      {\n+\t#pragma omp section\n+\t;\n+      }\n+      #pragma omp barrier\n+      #pragma omp master\n+      ;\n+      #pragma omp ordered\t\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n+      ;\n+      #pragma omp ordered threads\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n+      ;\n+      #pragma omp simd\n+      for (j = 0; j < 10; j++)\n+\t#pragma omp ordered simd\n+\t  ;\n+      #pragma omp critical\n+      {\n+\t#pragma omp simd\n+\tfor (j = 0; j < 10; j++)\n+\t  #pragma omp ordered simd\n+\t    ;\n+      }\n+    }\n+  #pragma omp taskloop\n+  for (i = 0; i < 64; i++)\n+    #pragma omp target\n+    {\n+      int j;\n+      #pragma omp for\n+      for (j = 0; j < 10; j++)\n+\t;\n+      #pragma omp single\n+      ;\n+      #pragma omp sections\n+      {\n+\t#pragma omp section\n+\t;\n+      }\n+      #pragma omp barrier\n+      #pragma omp master\n+      ;\n+      #pragma omp ordered\t\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n+      ;\n+      #pragma omp ordered threads\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n+      ;\n+      #pragma omp simd\n+      for (j = 0; j < 10; j++)\n+\t#pragma omp ordered simd\n+\t  ;\n+      #pragma omp critical\n+      {\n+\t#pragma omp simd\n+\tfor (j = 0; j < 10; j++)\n+\t  #pragma omp ordered simd\n+\t    ;\n+      }\n+    }\n+  #pragma omp ordered\n+  {\n+    #pragma omp ordered\t\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+    ;\n+  }\n+  #pragma omp ordered threads\n+  {\n+    #pragma omp ordered\t\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+    ;\n+  }\n+  #pragma omp ordered\n+  {\n+    #pragma omp ordered threads\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+    ;\n+  }\n+  #pragma omp ordered threads\n+  {\n+    #pragma omp ordered threads\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+    ;\n+  }\n+  #pragma omp critical\n+  {\n+    #pragma omp ordered simd\t\t/* { dg-error \".ordered. .simd. must be closely nested inside .simd. region\" } */\n+    ;\n+  }\n+  #pragma omp for ordered\n+  for (i = 0; i < 64; i++)\n+    #pragma omp parallel\n+    {\n+      #pragma omp ordered threads\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n+      ;\n+    }\n+  #pragma omp for ordered\n+  for (i = 0; i < 64; i++)\n+    #pragma omp parallel\n+    {\n+      #pragma omp ordered\t\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n+      ;\n+    }\n+  #pragma omp for ordered(1)\n+  for (i = 0; i < 64; i++)\n+    #pragma omp parallel\n+    {\n+      #pragma omp ordered depend(source)\t/* { dg-error \".ordered. construct with .depend. clause must be closely nested inside a loop with .ordered. clause with a parameter\" } */\n+      #pragma omp ordered depend(sink: i - 1)\t/* { dg-error \".ordered. construct with .depend. clause must be closely nested inside a loop with .ordered. clause with a parameter\" } */\n+    }\n+}"}, {"sha": "800ad5321087986e70beb7c5437098de069a4015", "filename": "gcc/testsuite/c-c++-common/gomp/nesting-warn-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnesting-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnesting-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnesting-warn-1.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -5,19 +5,19 @@ f_omp_target (void)\n {\n #pragma omp target\n   {\n-#pragma omp target /* { dg-warning \"target construct inside of target region\" } */\n+#pragma omp target /* { dg-warning \".target. construct inside of .target. region\" } */\n     ;\n-#pragma omp target data map(i) /* { dg-warning \"target data construct inside of target region\" } */\n+#pragma omp target data map(i) /* { dg-warning \".target data. construct inside of .target. region\" } */\n     ;\n-#pragma omp target update to(i) /* { dg-warning \"target update construct inside of target region\" } */\n+#pragma omp target update to(i) /* { dg-warning \".target update. construct inside of .target. region\" } */\n \n #pragma omp parallel\n     {\n-#pragma omp target /* { dg-warning \"target construct inside of target region\" } */\n+#pragma omp target /* { dg-warning \".target. construct inside of .target. region\" } */\n       ;\n-#pragma omp target data map(i) /* { dg-warning \"target data construct inside of target region\" } */\n+#pragma omp target data map(i) /* { dg-warning \".target data. construct inside of .target. region\" } */\n       ;\n-#pragma omp target update to(i) /* { dg-warning \"target update construct inside of target region\" } */\n+#pragma omp target update to(i) /* { dg-warning \".target update. construct inside of .target. region\" } */\n     }\n   }\n }"}, {"sha": "3c107232c0dd5a824c84e1d21922858ef5dec3cb", "filename": "gcc/testsuite/c-c++-common/gomp/ordered-3.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fordered-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fordered-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fordered-3.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -59,6 +59,18 @@ foo (void)\n       #pragma omp ordered depend(sink: i - 1)\t/* { dg-error \"clause must be closely nested inside a loop with .ordered. clause with a parameter\" } */\n       #pragma omp ordered depend(source)\t/* { dg-error \"clause must be closely nested inside a loop with .ordered. clause with a parameter\" } */\n     }\n+  #pragma omp parallel for ordered\n+  for (i = 0; i < 64; i++)\n+    {\n+      #pragma omp ordered depend(sink: i - 1)\t/* { dg-error \"clause must be closely nested inside a loop with .ordered. clause with a parameter\" } */\n+      #pragma omp ordered depend(source)\t/* { dg-error \"clause must be closely nested inside a loop with .ordered. clause with a parameter\" } */\n+    }\n+  #pragma omp parallel for\n+  for (i = 0; i < 64; i++)\n+    {\n+      #pragma omp ordered depend(sink: i - 1)\t/* { dg-error \"clause must be closely nested inside a loop with .ordered. clause with a parameter\" } */\n+      #pragma omp ordered depend(source)\t/* { dg-error \"clause must be closely nested inside a loop with .ordered. clause with a parameter\" } */\n+    }\n }\n \n void"}, {"sha": "b56843c0bb1ab0c3a2953bd412e2be03216f6547", "filename": "gcc/testsuite/c-c++-common/gomp/ordered-4.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fordered-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fordered-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fordered-4.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -0,0 +1,54 @@\n+void\n+f1 (void)\n+{\n+  int i, j;\n+  #pragma omp critical\n+  {\n+    #pragma omp simd\n+    for (i = 0; i < 64; i++)\n+      {\n+\t#pragma omp ordered simd\n+\t;\n+      }\n+  }\n+  #pragma omp ordered threads\n+  {\n+    #pragma omp simd\n+    for (i = 0; i < 64; i++)\n+      {\n+\t#pragma omp ordered simd\n+\t;\n+      }\n+  }\n+  #pragma omp task\n+  {\n+    #pragma omp simd\n+    for (i = 0; i < 64; i++)\n+      {\n+\t#pragma omp ordered simd\n+\t;\n+      }\n+  }\n+  #pragma omp taskloop\n+  for (j = 0; j < 64; j++)\n+    #pragma omp simd\n+    for (i = 0; i < 64; i++)\n+      {\n+\t#pragma omp ordered simd\n+\t;\n+      }\n+}\n+\n+void\n+f2 (void)\n+{\n+  #pragma omp ordered simd\n+  ;\n+}\n+\n+void\n+f3 (void)\n+{\n+  #pragma omp ordered threads , simd\n+  ;\n+}"}, {"sha": "7ec6333527a26d1abd46d525603a6c2b36c545e1", "filename": "gcc/testsuite/g++.dg/gomp/ordered-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fordered-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fordered-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fordered-2.C?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -3,5 +3,5 @@\n void f1(void)\n {\n   #pragma omp ordered asdf\t/* { dg-error \"expected\" } */\n-  #pragma omp ordered\n+  #pragma omp ordered\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n }\t\t\t\t/* { dg-error \"expected\" } */"}, {"sha": "1107c37381a3b04c1164fbe0ca35c5a031354d70", "filename": "gcc/testsuite/gcc.dg/gomp/ordered-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fordered-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fordered-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fordered-2.c?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -3,5 +3,5 @@\n void f1(void)\n {\n   #pragma omp ordered asdf\t/* { dg-error \"expected\" } */\n-  #pragma omp ordered\n+  #pragma omp ordered\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n }\t\t\t\t/* { dg-error \"expected expression\" } */"}, {"sha": "7d8fb928659708d604f32e5769a95ab58ebf2209", "filename": "gcc/testsuite/gfortran.dg/goacc/parallel-kernels-regions.f95", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-kernels-regions.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-kernels-regions.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-kernels-regions.f95?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -9,46 +9,46 @@ program test\n   integer :: i\n \n   !$acc parallel\n-    !$acc kernels ! { dg-bogus \"kernels construct inside of parallel region\" \"not implemented\" { xfail *-*-* } }\n+    !$acc kernels ! { dg-bogus \".kernels. construct inside of .parallel. region\" \"not implemented\" { xfail *-*-* } }\n     !$acc end kernels\n   !$acc end parallel\n \n   !$acc parallel\n-    !$acc parallel ! { dg-bogus \"parallel construct inside of parallel region\" \"not implemented\" { xfail *-*-* } }\n+    !$acc parallel ! { dg-bogus \".parallel. construct inside of .parallel. region\" \"not implemented\" { xfail *-*-* } }\n     !$acc end parallel\n   !$acc end parallel\n \n   !$acc parallel\n-    !$acc parallel ! { dg-bogus \"parallel construct inside of parallel region\" \"not implemented\" { xfail *-*-* } }\n+    !$acc parallel ! { dg-bogus \".parallel. construct inside of .parallel. region\" \"not implemented\" { xfail *-*-* } }\n     !$acc end parallel\n-    !$acc kernels ! { dg-bogus \"kernels construct inside of parallel region\" \"not implemented\" { xfail *-*-* } }\n+    !$acc kernels ! { dg-bogus \".kernels. construct inside of .parallel. region\" \"not implemented\" { xfail *-*-* } }\n     !$acc end kernels\n   !$acc end parallel\n \n   !$acc kernels\n-    !$acc kernels ! { dg-bogus \"kernels construct inside of kernels region\" \"not implemented\" { xfail *-*-* } }\n+    !$acc kernels ! { dg-bogus \".kernels. construct inside of .kernels. region\" \"not implemented\" { xfail *-*-* } }\n     !$acc end kernels\n   !$acc end kernels\n \n   !$acc kernels\n-    !$acc parallel ! { dg-bogus \"parallel construct inside of kernels region\" \"not implemented\" { xfail *-*-* } }\n+    !$acc parallel ! { dg-bogus \".parallel. construct inside of .kernels. region\" \"not implemented\" { xfail *-*-* } }\n     !$acc end parallel\n   !$acc end kernels\n \n   !$acc kernels\n-    !$acc parallel ! { dg-bogus \"parallel construct inside of kernels region\" \"not implemented\" { xfail *-*-* } }\n+    !$acc parallel ! { dg-bogus \".parallel. construct inside of .kernels. region\" \"not implemented\" { xfail *-*-* } }\n     !$acc end parallel\n-    !$acc kernels ! { dg-bogus \"kernels construct inside of kernels region\" \"not implemented\" { xfail *-*-* } }\n+    !$acc kernels ! { dg-bogus \".kernels. construct inside of .kernels. region\" \"not implemented\" { xfail *-*-* } }\n     !$acc end kernels\n   !$acc end kernels\n \n   !$acc parallel\n-    !$acc data ! { dg-error \"data construct inside of parallel region\" }\n+    !$acc data ! { dg-error \".data. construct inside of .parallel. region\" }\n     !$acc end data\n   !$acc end parallel\n \n   !$acc kernels\n-    !$acc data ! { dg-error \"data construct inside of kernels region\" }\n+    !$acc data ! { dg-error \".data. construct inside of .kernels. region\" }\n     !$acc end data\n   !$acc end kernels\n   "}, {"sha": "7ba42a040374b3c73f3a3e0020ce0e26c4083432", "filename": "gcc/testsuite/gfortran.dg/gomp/target3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ftarget3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f4ea18ac3bdc770a18d8d513ab62bf45925f40/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ftarget3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ftarget3.f90?ref=d9f4ea18ac3bdc770a18d8d513ab62bf45925f40", "patch": "@@ -4,7 +4,7 @@\n subroutine foo (r)\n   integer :: i, r\n   !$omp target\n-  !$omp target teams distribute parallel do reduction (+: r) ! { dg-warning \"target construct inside of target region\" }\n+  !$omp target teams distribute parallel do reduction (+: r) ! { dg-warning \".target. construct inside of .target. region\" }\n     do i = 1, 10\n       r = r + 1\n     end do"}]}