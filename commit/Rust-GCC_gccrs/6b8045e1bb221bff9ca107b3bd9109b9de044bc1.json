{"sha": "6b8045e1bb221bff9ca107b3bd9109b9de044bc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI4MDQ1ZTFiYjIyMWJmZjljYTEwN2IzYmQ5MTA5YjlkZTA0NGJjMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-18T12:42:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-18T12:42:22Z"}, "message": "tree.h (tree_int_cst_msb): Remove.\n\n2011-08-18  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (tree_int_cst_msb): Remove.\n\t* tree.c (tree_int_cst_msb): Likewise.\n\t(tree_int_cst_sign_bit): Move from ...\n\t* tree-ssa-loop-ivopts.c (tree_int_cst_sign_bit): ... here.\n\nFrom-SVN: r177853", "tree": {"sha": "67722dd90363343ba8f112a4246a54e507e3688c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67722dd90363343ba8f112a4246a54e507e3688c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b8045e1bb221bff9ca107b3bd9109b9de044bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8045e1bb221bff9ca107b3bd9109b9de044bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b8045e1bb221bff9ca107b3bd9109b9de044bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8045e1bb221bff9ca107b3bd9109b9de044bc1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f932c4432b9b806d58781aa56ad7b3ba5e82f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f932c4432b9b806d58781aa56ad7b3ba5e82f9"}], "stats": {"total": 54, "additions": 21, "deletions": 33}, "files": [{"sha": "4491a17661966b6d68622d35a2a8005d0c677045", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8045e1bb221bff9ca107b3bd9109b9de044bc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8045e1bb221bff9ca107b3bd9109b9de044bc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b8045e1bb221bff9ca107b3bd9109b9de044bc1", "patch": "@@ -1,3 +1,10 @@\n+2011-08-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (tree_int_cst_msb): Remove.\n+\t* tree.c (tree_int_cst_msb): Likewise.\n+\t(tree_int_cst_sign_bit): Move from ...\n+\t* tree-ssa-loop-ivopts.c (tree_int_cst_sign_bit): ... here.\n+\n 2011-08-18  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* doc/tm.texi.in (TARGET_RTX_COSTS): Add an opno paramter."}, {"sha": "0efa716c9b10c8800096701b2e332c43b6af7b83", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8045e1bb221bff9ca107b3bd9109b9de044bc1/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8045e1bb221bff9ca107b3bd9109b9de044bc1/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=6b8045e1bb221bff9ca107b3bd9109b9de044bc1", "patch": "@@ -2892,26 +2892,6 @@ var_at_stmt (struct loop *loop, struct iv_cand *cand, gimple stmt)\n     return cand->var_before;\n }\n \n-/* Return the most significant (sign) bit of T.  Similar to tree_int_cst_msb,\n-   but the bit is determined from TYPE_PRECISION, not MODE_BITSIZE.  */\n-\n-int\n-tree_int_cst_sign_bit (const_tree t)\n-{\n-  unsigned bitno = TYPE_PRECISION (TREE_TYPE (t)) - 1;\n-  unsigned HOST_WIDE_INT w;\n-\n-  if (bitno < HOST_BITS_PER_WIDE_INT)\n-    w = TREE_INT_CST_LOW (t);\n-  else\n-    {\n-      w = TREE_INT_CST_HIGH (t);\n-      bitno -= HOST_BITS_PER_WIDE_INT;\n-    }\n-\n-  return (w >> bitno) & 1;\n-}\n-\n /* If A is (TYPE) BA and B is (TYPE) BB, and the types of BA and BB have the\n    same precision that is at least as wide as the precision of TYPE, stores\n    BA to A and BB to B, and returns the type of BA.  Otherwise, returns the"}, {"sha": "714ccbb8a66a2433eb2fe72d5d31d3fa6c90a8c0", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8045e1bb221bff9ca107b3bd9109b9de044bc1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8045e1bb221bff9ca107b3bd9109b9de044bc1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6b8045e1bb221bff9ca107b3bd9109b9de044bc1", "patch": "@@ -6513,21 +6513,23 @@ tree_low_cst (const_tree t, int pos)\n   return TREE_INT_CST_LOW (t);\n }\n \n-/* Return the most significant bit of the integer constant T.  */\n+/* Return the most significant (sign) bit of T.  */\n \n int\n-tree_int_cst_msb (const_tree t)\n+tree_int_cst_sign_bit (const_tree t)\n {\n-  int prec;\n-  HOST_WIDE_INT h;\n-  unsigned HOST_WIDE_INT l;\n-\n-  /* Note that using TYPE_PRECISION here is wrong.  We care about the\n-     actual bits, not the (arbitrary) range of the type.  */\n-  prec = GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (t))) - 1;\n-  rshift_double (TREE_INT_CST_LOW (t), TREE_INT_CST_HIGH (t), prec,\n-\t\t 2 * HOST_BITS_PER_WIDE_INT, &l, &h, 0);\n-  return (l & 1) == 1;\n+  unsigned bitno = TYPE_PRECISION (TREE_TYPE (t)) - 1;\n+  unsigned HOST_WIDE_INT w;\n+\n+  if (bitno < HOST_BITS_PER_WIDE_INT)\n+    w = TREE_INT_CST_LOW (t);\n+  else\n+    {\n+      w = TREE_INT_CST_HIGH (t);\n+      bitno -= HOST_BITS_PER_WIDE_INT;\n+    }\n+\n+  return (w >> bitno) & 1;\n }\n \n /* Return an indication of the sign of the integer constant T."}, {"sha": "1f56c499c4978a641d4f6689993e5623f35b6ea5", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8045e1bb221bff9ca107b3bd9109b9de044bc1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8045e1bb221bff9ca107b3bd9109b9de044bc1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6b8045e1bb221bff9ca107b3bd9109b9de044bc1", "patch": "@@ -4380,7 +4380,6 @@ tree_low_cst (const_tree t, int pos)\n   return TREE_INT_CST_LOW (t);\n }\n #endif\n-extern int tree_int_cst_msb (const_tree);\n extern int tree_int_cst_sgn (const_tree);\n extern int tree_int_cst_sign_bit (const_tree);\n extern unsigned int tree_int_cst_min_precision (tree, bool);"}]}