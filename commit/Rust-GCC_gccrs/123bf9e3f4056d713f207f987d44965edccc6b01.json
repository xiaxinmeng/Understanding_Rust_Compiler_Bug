{"sha": "123bf9e3f4056d713f207f987d44965edccc6b01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzYmY5ZTNmNDA1NmQ3MTNmMjA3Zjk4N2Q0NDk2NWVkY2NjNmIwMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-03-22T21:17:42Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-03-22T21:17:42Z"}, "message": "i386.md (zero_extendsidi2_32): Break out from ...\n\n\t* i386.md (zero_extendsidi2_32): Break out from ...\n\t(zero_extendsidi2): ... here ; turn to expander.\n\t(zero_extendsidi2_rex64): New.\n\t(extendsidi2_32): Break out from ...\n\t(extendsidi2): ... here ; turn to expander.\n\t(extendsidi2_rex64): New.\n\t(zero_extendhidi2, zero_extendqidi2, extendhidi2, extendqidi2): New.\n\t(trunc?f?f splitters): Add 64bit versions.\n\nFrom-SVN: r40759", "tree": {"sha": "e560db31d14dba3d0441e9c799bfcdff06658f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e560db31d14dba3d0441e9c799bfcdff06658f99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/123bf9e3f4056d713f207f987d44965edccc6b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/123bf9e3f4056d713f207f987d44965edccc6b01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/123bf9e3f4056d713f207f987d44965edccc6b01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/123bf9e3f4056d713f207f987d44965edccc6b01/comments", "author": null, "committer": null, "parents": [{"sha": "0ec259edcd7e739f9cbd2609febb18497ce08c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec259edcd7e739f9cbd2609febb18497ce08c4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec259edcd7e739f9cbd2609febb18497ce08c4d"}], "stats": {"total": 188, "additions": 174, "deletions": 14}, "files": [{"sha": "e821a1fdff9b43c5c5b2584699f41b1285773736", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123bf9e3f4056d713f207f987d44965edccc6b01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123bf9e3f4056d713f207f987d44965edccc6b01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=123bf9e3f4056d713f207f987d44965edccc6b01", "patch": "@@ -1,3 +1,14 @@\n+Thu Mar 22 22:15:59 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (zero_extendsidi2_32): Break out from ...\n+\t(zero_extendsidi2): ... here ; turn to expander.\n+\t(zero_extendsidi2_rex64): New.\n+\t(extendsidi2_32): Break out from ...\n+\t(extendsidi2): ... here ; turn to expander.\n+\t(extendsidi2_rex64): New.\n+\t(zero_extendhidi2, zero_extendqidi2, extendhidi2, extendqidi2): New.\n+\t(trunc?f?f splitters): Add 64bit versions.\n+\n Thu Mar 22 21:41:16 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (pushsi, pushsi2_prologue): Disable."}, {"sha": "8502e1379ad81a9a9e0f3ccb4f5b20bccb2986b4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 163, "deletions": 14, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123bf9e3f4056d713f207f987d44965edccc6b01/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123bf9e3f4056d713f207f987d44965edccc6b01/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=123bf9e3f4056d713f207f987d44965edccc6b01", "patch": "@@ -3593,14 +3593,42 @@\n   \"\")\n \n ;; %%% Kill me once multi-word ops are sane.\n-(define_insn \"zero_extendsidi2\"\n+(define_expand \"zero_extendsidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+     (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))]\n+  \"\"\n+  \"if (!TARGET_64BIT)\n+     {\n+       emit_insn (gen_zero_extendsidi2_32 (operands[0], operands[1]));\n+       DONE;\n+     }\n+  \")\n+\n+(define_insn \"zero_extendsidi2_32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,?r,?*o\")\n-\t(zero_extend:DI (match_operand:SI 1 \"general_operand\" \"0,rm,r\")))\n+\t(zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm,r\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"#\"\n   [(set_attr \"mode\" \"SI\")])\n \n+(define_insn \"zero_extendsidi2_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,o\")\n+     (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"rm,0\")))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   mov\\\\t{%k1, %k0|%k0, %k1}\n+   #\"\n+  [(set_attr \"type\" \"imovx,imov\")\n+   (set_attr \"mode\" \"SI,DI\")])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"memory_operand\" \"\")\n+     (zero_extend:DI (match_dup 0)))]\n+  \"\"\n+  [(set (match_dup 4) (const_int 0))]\n+  \"split_di (&operands[0], 1, &operands[3], &operands[4]);\")\n+\n (define_split \n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n@@ -3614,21 +3642,84 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t(zero_extend:DI (match_operand:SI 1 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed\"\n+  \"reload_completed && !TARGET_64BIT\"\n   [(set (match_dup 3) (match_dup 1))\n    (set (match_dup 4) (const_int 0))]\n   \"split_di (&operands[0], 1, &operands[3], &operands[4]);\")\n+\n+(define_insn \"zero_extendhidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+     (zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   movz{wl|x}\\\\t{%1, %k0|%k0, %1} \n+   movz{wq|x}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"imovx\")\n+   (set_attr \"mode\" \"SI,DI\")])\n+\n+(define_insn \"zero_extendqidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+     (zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"Q,m\")))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   movz{bl|x}\\\\t{%1, %k0|%k0, %1} \n+   movz{bq|x}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"imovx\")\n+   (set_attr \"mode\" \"SI,DI\")])\n \f\n ;; Sign extension instructions\n \n-(define_insn \"extendsidi2\"\n+(define_expand \"extendsidi2\"\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (match_scratch:SI 2 \"\"))])]\n+  \"\"\n+  \"\n+{\n+  if (TARGET_64BIT)\n+    {\n+      emit_insn (gen_extendsidi2_rex64 (operands[0], operands[1]));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"*extendsidi2_1\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=*A,r,?r,?*o\")\n \t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"0,0,r,r\")))\n    (clobber (reg:CC 17))\n    (clobber (match_scratch:SI 2 \"=X,X,X,&r\"))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"#\")\n \n+(define_insn \"extendsidi2_rex64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=*a,r\")\n+\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"*0,rm\")))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   {cltq|cdqe}\n+   movs{lq|x}\\\\t{%1,%0|%0, %1}\"\n+  [(set_attr \"type\" \"imovx\")\n+   (set_attr \"mode\" \"DI\")\n+   (set_attr \"prefix_0f\" \"0\")\n+   (set_attr \"modrm\" \"0,1\")])\n+\n+(define_insn \"extendhidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))]\n+  \"TARGET_64BIT\"\n+  \"movs{wq|x}\\\\t{%1,%0|%0, %1}\"\n+  [(set_attr \"type\" \"imovx\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"extendqidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n+  \"TARGET_64BIT\"\n+  \"movs{bq|x}\\\\t{%1,%0|%0, %1}\"\n+   [(set_attr \"type\" \"imovx\")\n+    (set_attr \"mode\" \"DI\")])\n+\n ;; Extend to memory case when source register does die.\n (define_split \n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n@@ -3732,6 +3823,34 @@\n \t(const_string \"0\")\n \t(const_string \"1\")))])\n \n+(define_insn \"*extendhisi2_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=*a,r\")\n+\t(zero_extend:DI\n+\t  (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"*0,rm\"))))]\n+  \"TARGET_64BIT\"\n+  \"*\n+{\n+  switch (get_attr_prefix_0f (insn))\n+    {\n+    case 0:\n+      return \\\"{cwtl|cwde}\\\";\n+    default:\n+      return \\\"movs{wl|x}\\\\t{%1,%k0|%k0, %1}\\\";\n+    }\n+}\"\n+  [(set_attr \"type\" \"imovx\")\n+   (set_attr \"mode\" \"SI\")\n+   (set (attr \"prefix_0f\")\n+     ;; movsx is short decodable while cwtl is vector decoded.\n+     (if_then_else (and (eq_attr \"cpu\" \"!k6\")\n+\t\t\t(eq_attr \"alternative\" \"0\"))\n+\t(const_string \"0\")\n+\t(const_string \"1\")))\n+   (set (attr \"modrm\")\n+     (if_then_else (eq_attr \"prefix_0f\" \"0\")\n+\t(const_string \"0\")\n+\t(const_string \"1\")))])\n+\n (define_insn \"extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=*a,r\")\n \t(sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"*0,qm\")))]\n@@ -3766,6 +3885,15 @@\n   \"movs{bl|x}\\\\t{%1,%0|%0, %1}\"\n    [(set_attr \"type\" \"imovx\")\n     (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*extendqisi2_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\"))))]\n+  \"TARGET_64BIT\"\n+  \"movs{bl|x}\\\\t{%1,%k0|%k0, %1}\"\n+   [(set_attr \"type\" \"imovx\")\n+    (set_attr \"mode\" \"SI\")])\n \f\n ;; Conversions between float and double.\n \n@@ -3782,10 +3910,17 @@\n (define_split\n   [(set (match_operand:DF 0 \"push_operand\" \"\")\n \t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1]))\"\n+  \"FP_REGNO_P (REGNO (operands[1])) && !TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -8)))\n    (set (mem:DF (reg:SI 7)) (float_extend:DF (match_dup 1)))])\n \n+(define_split\n+  [(set (match_operand:DF 0 \"push_operand\" \"\")\n+\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"\")))]\n+  \"FP_REGNO_P (REGNO (operands[1])) && TARGET_64BIT\"\n+  [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -8)))\n+   (set (mem:DF (reg:DI 7)) (float_extend:DF (match_dup 1)))])\n+\n (define_insn \"*dummy_extendsfxf2\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<\")\n \t(float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"f\")))]\n@@ -3795,7 +3930,7 @@\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1]))\"\n+  \"FP_REGNO_P (REGNO (operands[1])) && !TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n    (set (mem:XF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n@@ -3808,9 +3943,16 @@\n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n \t(float_extend:TF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1]))\"\n+  \"FP_REGNO_P (REGNO (operands[1])) && !TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n-   (set (mem:TF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n+   (set (mem:TF (reg:SI 7)) (float_extend:TF (match_dup 1)))])\n+\n+(define_split\n+  [(set (match_operand:TF 0 \"push_operand\" \"\")\n+\t(float_extend:TF (match_operand:SF 1 \"register_operand\" \"\")))]\n+  \"FP_REGNO_P (REGNO (operands[1])) && TARGET_64BIT\"\n+  [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -16)))\n+   (set (mem:DF (reg:DI 7)) (float_extend:TF (match_dup 1)))])\n \n (define_insn \"*dummy_extenddfxf2\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<\")\n@@ -3821,9 +3963,9 @@\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1]))\"\n+  \"FP_REGNO_P (REGNO (operands[1])) && !TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n-   (set (mem:XF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n+   (set (mem:DF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n (define_insn \"*dummy_extenddftf2\"\n   [(set (match_operand:TF 0 \"push_operand\" \"=<\")\n@@ -3834,10 +3976,17 @@\n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n \t(float_extend:TF (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1]))\"\n+  \"FP_REGNO_P (REGNO (operands[1])) && !TARGET_64BIT\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n    (set (mem:TF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n+(define_split\n+  [(set (match_operand:TF 0 \"push_operand\" \"\")\n+\t(float_extend:TF (match_operand:DF 1 \"register_operand\" \"\")))]\n+  \"FP_REGNO_P (REGNO (operands[1])) && TARGET_64BIT\"\n+  [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -16)))\n+   (set (mem:TF (reg:DI 7)) (float_extend:XF (match_dup 1)))])\n+\n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n@@ -4664,7 +4813,7 @@\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))\n \t      (clobber (match_scratch:SI 4 \"\"))])]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"operands[2] = assign_386_stack_local (SImode, 0);\n    operands[3] = assign_386_stack_local (HImode, 1);\")\n "}]}