{"sha": "6c2675fa2bbcfe37308af593edb18e2c1c8eabf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMyNjc1ZmEyYmJjZmUzNzMwOGFmNTkzZWRiMThlMmMxYzhlYWJmMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-02T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-02T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "c32e97285e9a5a93738561000961a4f01f836da3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c32e97285e9a5a93738561000961a4f01f836da3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/comments", "author": null, "committer": null, "parents": [{"sha": "3e52eaab8c57ad06bcd553f140923a34e5749991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e52eaab8c57ad06bcd553f140923a34e5749991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e52eaab8c57ad06bcd553f140923a34e5749991"}], "stats": {"total": 392, "additions": 391, "deletions": 1}, "files": [{"sha": "dd0710e9161882e9dc462ea8545e772d68adbbf6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 253, "deletions": 0, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c2675fa2bbcfe37308af593edb18e2c1c8eabf0", "patch": "@@ -1,3 +1,256 @@\n+2020-10-01  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_address): Use\n+\tgen_int_mode for high part of address constant.\n+\n+2020-10-01  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_linux64_override_options):\n+\tFormatting.  Correct setting of TARGET_NO_FP_IN_TOC and\n+\tTARGET_NO_SUM_IN_TOC.\n+\n+2020-10-01  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/freebsd64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Use\n+\trs6000_linux64_override_options.\n+\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Break\n+\tout to..\n+\t* config/rs6000/rs6000.c (rs6000_linux64_override_options): ..this,\n+\tnew function.  Tweak non-biarch test and clearing of\n+\tprofile_kernel to work with freebsd64.h.\n+\n+2020-10-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/rs6000/rs6000-call.c: Include value-range.h.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\n+2020-10-01  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/80845\n+\t* config/nvptx/nvptx.md (define_insn \"truncsi<QHIM>2\"): Emit mov.u32\n+\tinstead of cvt.u32.u32.\n+\n+2020-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/96528\n+\tPR target/97288\n+\t* config/arm/arm-protos.h (arm_expand_vector_compare): Declare.\n+\t(arm_expand_vcond): Likewise.\n+\t* config/arm/arm.c (arm_expand_vector_compare): New function.\n+\t(arm_expand_vcond): Likewise.\n+\t* config/arm/neon.md (vec_cmp<VDQW:mode><v_cmp_result>): New pattern.\n+\t(vec_cmpu<VDQW:mode><VDQW:mode>): Likewise.\n+\t(vcond<VDQW:mode><VDQW:mode>): Require operand 5 to be a register\n+\tor zero.  Use arm_expand_vcond.\n+\t(vcond<V_cvtto><V32:mode>): New pattern.\n+\t(vcondu<VDQIW:mode><VDQIW:mode>): Generalize to...\n+\t(vcondu<VDQW:mode><v_cmp_result): ...this.  Require operand 5\n+\tto be a register or zero.  Use arm_expand_vcond.\n+\t(vcond_mask_<VDQW:mode><v_cmp_result>): New pattern.\n+\t(neon_vc<cmp_op><mode>, neon_vc<cmp_op><mode>_insn): Add \"@\" marker.\n+\t(neon_vbsl<mode>): Likewise.\n+\t(neon_vc<cmp_op>u<mode>): Reexpress as...\n+\t(@neon_vc<code><mode>): ...this.\n+\n+2020-10-01  Michael Davidsaver  <mdavidsaver@gmail.com>\n+\n+\t* config/i386/t-rtems: Change from mtune to march when building\n+\tmultilibs.  The mtune argument tunes or optimizes for a specific\n+\tCPU model but does not ensure the generated code is appropriate\n+\tfor the CPU model. Prior to this patch, i386 compatible code\n+\twas always generated but tuned for later models.\n+\n+2020-10-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* builtins.c (compute_objsize): Replace vr_values with range_query.\n+\t(get_range): Same.\n+\t(gimple_call_alloc_size): Same.\n+\t* builtins.h (class vr_values):  Remove.\n+\t(gimple_call_alloc_size): Replace vr_values with range_query.\n+\t* gimple-ssa-sprintf.c (get_int_range): Same.\n+\t(struct directive): Pass gimple context to fmtfunc callback.\n+\t(directive::set_width): Replace inline with out-of-line version.\n+\t(directive::set_precision): Same.\n+\t(format_none): New gimple argument.\n+\t(format_percent): New gimple argument.\n+\t(format_integer): New gimple argument.\n+\t(format_floating): New gimple argument.\n+\t(get_string_length): Use range_query API.\n+\t(format_character): New gimple argument.\n+\t(format_string): New gimple argument.\n+\t(format_plain): New gimple argument.\n+\t(format_directive): New gimple argument.\n+\t(parse_directive): Replace vr_values with range_query.\n+\t(compute_format_length): Same.\n+\t(handle_printf_call): Same.  Adjust for range_query API.\n+\t* tree-ssa-strlen.c (get_range): Same.\n+\t(compare_nonzero_chars): Same.\n+\t(get_addr_stridx) Replace vr_values with range_query.\n+\t(get_stridx): Same.\n+\t(dump_strlen_info): Same.\n+\t(get_range_strlen_dynamic): Adjust for range_query API.\n+\t(set_strlen_range): Same\n+\t(maybe_warn_overflow): Replace vr_values with range_query.\n+\t(handle_builtin_strcpy): Same.\n+\t(maybe_diag_stxncpy_trunc): Add FIXME comment.\n+\t(handle_builtin_memcpy): Replace vr_values with range_query.\n+\t(handle_builtin_memset): Same.\n+\t(get_len_or_size): Same.\n+\t(strxcmp_eqz_result): Same.\n+\t(handle_builtin_string_cmp): Same.\n+\t(count_nonzero_bytes_addr): Same, plus adjust for range_query API.\n+\t(count_nonzero_bytes): Replace vr_values with range_query.\n+\t(handle_store): Same.\n+\t(strlen_check_and_optimize_call): Same.\n+\t(handle_integral_assign): Same.\n+\t(check_and_optimize_stmt): Same.\n+\t* tree-ssa-strlen.h (class vr_values): Remove.\n+\t(get_range): Replace vr_values with range_query.\n+\t(get_range_strlen_dynamic): Same.\n+\t(handle_printf_call): Same.\n+\n+2020-10-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-loop-versioning.cc (lv_dom_walker::before_dom_children):\n+\tPass m_range_analyzer instead of get_vr_values.\n+\t(loop_versioning::name_prop::get_value): Rename to...\n+\t(loop_versioning::name_prop::value_of_expr): ...this.\n+\t* gimple-ssa-evrp-analyze.c (evrp_range_analyzer::evrp_range_analyzer):\n+\tAdjust for evrp_range_analyzer\n+\tinheriting from vr_values.\n+\t(evrp_range_analyzer::try_find_new_range): Same.\n+\t(evrp_range_analyzer::record_ranges_from_incoming_edge): Same.\n+\t(evrp_range_analyzer::record_ranges_from_phis): Same.\n+\t(evrp_range_analyzer::record_ranges_from_stmt): Same.\n+\t(evrp_range_analyzer::push_value_range): Same.\n+\t(evrp_range_analyzer::pop_value_range): Same.\n+\t* gimple-ssa-evrp-analyze.h (class evrp_range_analyzer): Inherit from\n+\tvr_values.  Adjust accordingly.\n+\t* gimple-ssa-evrp.c: Adjust for evrp_range_analyzer inheriting from\n+\tvr_values.\n+\t(evrp_folder::value_of_evrp): Rename from get_value.\n+\t* tree-ssa-ccp.c (class ccp_folder): Rename get_value to\n+\tvalue_of_expr.\n+\t(ccp_folder::get_value): Rename to...\n+\t(ccp_folder::value_of_expr): ...this.\n+\t* tree-ssa-copy.c (class copy_folder): Rename get_value to\n+\tvalue_of_expr.\n+\t(copy_folder::get_value): Rename to...\n+\t(copy_folder::value_of_expr): ...this.\n+\t* tree-ssa-dom.c (dom_opt_dom_walker::after_dom_children): Adjust\n+\tfor evrp_range_analyzer inheriting from vr_values.\n+\t(dom_opt_dom_walker::optimize_stmt): Same.\n+\t* tree-ssa-propagate.c (substitute_and_fold_engine::replace_uses_in):\n+\tCall value_of_* instead of get_value.\n+\t(substitute_and_fold_engine::replace_phi_args_in): Same.\n+\t(substitute_and_fold_engine::propagate_into_phi_args): Same.\n+\t(substitute_and_fold_dom_walker::before_dom_children): Same.\n+\t* tree-ssa-propagate.h: Include value-query.h.\n+\t(class substitute_and_fold_engine): Inherit from value_query.\n+\t* tree-ssa-strlen.c (strlen_dom_walker::before_dom_children):\n+\tAdjust for evrp_range_analyzer inheriting from vr_values.\n+\t* tree-ssa-threadedge.c (record_temporary_equivalences_from_phis):\n+\tSame.\n+\t* tree-vrp.c (class vrp_folder): Same.\n+\t(vrp_folder::get_value): Rename to value_of_expr.\n+\t* vr-values.c (vr_values::get_lattice_entry): Adjust for\n+\tvr_values inheriting from range_query.\n+\t(vr_values::range_of_expr): New.\n+\t(vr_values::value_of_expr): New.\n+\t(vr_values::value_on_edge): New.\n+\t(vr_values::value_of_stmt): New.\n+\t(simplify_using_ranges::op_with_boolean_value_range_p): Call\n+\tget_value_range through query.\n+\t(check_for_binary_op_overflow): Rename store to query.\n+\t(vr_values::vr_values): Remove vrp_value_range_pool.\n+\t(vr_values::~vr_values): Same.\n+\t(simplify_using_ranges::get_vr_for_comparison): Call get_value_range\n+\tthrough query.\n+\t(simplify_using_ranges::compare_names): Same.\n+\t(simplify_using_ranges::vrp_evaluate_conditional): Same.\n+\t(simplify_using_ranges::vrp_visit_cond_stmt): Same.\n+\t(simplify_using_ranges::simplify_abs_using_ranges): Same.\n+\t(simplify_using_ranges::simplify_cond_using_ranges_1): Same.\n+\t(simplify_cond_using_ranges_2): Same.\n+\t(simplify_using_ranges::simplify_switch_using_ranges): Same.\n+\t(simplify_using_ranges::two_valued_val_range_p): Same.\n+\t(simplify_using_ranges::simplify_using_ranges): Rename store to query.\n+\t(simplify_using_ranges::simplify): Assert that we have a query.\n+\t* vr-values.h (class range_query): Remove.\n+\t(class simplify_using_ranges): Remove inheritance of range_query.\n+\t(class vr_values): Add virtuals for range_of_expr, value_of_expr,\n+\tvalue_on_edge, value_of_stmt, and get_value_range.\n+\tCall range_query allocator instead of using vrp_value_range_pool.\n+\tRemove vrp_value_range_pool.\n+\t(simplify_using_ranges::get_value_range): Remove.\n+\n+2020-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97236\n+\t* tree-vect-stmts.c (get_group_load_store_type): Keep\n+\tVMAT_ELEMENTWISE for single-element vectors.\n+\n+2020-10-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (compute_parm_map): Be ready for callee_pi to be NULL.\n+\n+2020-10-01  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/97244\n+\t* ipa-fnsummary.c (pass_free_fnsummary::execute): Free\n+\talso indirect inlining datastructure.\n+\t* ipa-modref.c (pass_ipa_modref::execute): Do not free them here.\n+\t* ipa-prop.c (ipa_free_all_node_params): Do not crash when info does\n+\tnot exist.\n+\t(ipa_unregister_cgraph_hooks): Likewise.\n+\n+2020-10-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* internal-fn.c (DEF_INTERNAL_FN): Fix handling of fnspec\n+\n+2020-10-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* Makefile.in: Add value-query.o.\n+\t* value-query.cc: New file.\n+\t* value-query.h: New file.\n+\n+2020-10-01  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* config/arm/arm-cpus.in: Fix ordering, move Neoverse N2 down.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm-tune.md: Regenerate.\n+\n+2020-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/s390/s390.c (s390_atomic_assign_expand_fenv): Use\n+\tTARGET_EXPR instead of MODIFY_EXPR for the first assignments to\n+\tfenv_var and old_fpc.  Formatting fixes.\n+\n+2020-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-patterns.c (vect_recog_bool_pattern): Also handle\n+\tVIEW_CONVERT_EXPR.\n+\n+2020-10-01  Florian Weimer  <fweimer@redhat.com>\n+\n+\tPR target/97250\n+\t* config/i386/i386.h (PTA_NO_TUNE, PTA_X86_64_BASELINE)\n+\t(PTA_X86_64_V2, PTA_X86_64_V3, PTA_X86_64_V4): New.\n+\t* common/config/i386/i386-common.c (processor_alias_table):\n+\tAdd \"x86-64-v2\", \"x86-64-v3\", \"x86-64-v4\".\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tHandle new PTA_NO_TUNE processor table entries.\n+\t* doc/invoke.texi (x86 Options): Document new -march values.\n+\n+2020-10-01  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/ppc-asm.h: Support __PCREL__ code.\n+\n+2020-10-01  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Don't\n+\tset -mcmodel=small for -mno-minimal-toc when pcrel.\n+\n 2020-09-30  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/97189"}, {"sha": "4d58d2f285ca46ce58d90e70ebb19e518580db2d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6c2675fa2bbcfe37308af593edb18e2c1c8eabf0", "patch": "@@ -1 +1 @@\n-20201001\n+20201002"}, {"sha": "ed416ccf8d7feaeeb40cf80f5c2bf06250da42f4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6c2675fa2bbcfe37308af593edb18e2c1c8eabf0", "patch": "@@ -1,3 +1,42 @@\n+2020-10-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (DECL_ANTICIPATED): Adjust comment.\n+\t(DECL_HIDDEN_P, TYPE_HIDDEN_P): Delete.\n+\t* tree.c (ovl_insert): Delete DECL_HIDDEN_P assert.\n+\t(ovl_skip_hidden): Likewise.\n+\n+2020-10-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (pushdecl_top_level): Assert incoming context is\n+\tnull, add global_namespace context.\n+\t(pushdecl_top_level_and_finish): Likewise.\n+\t* pt.c (get_template_parm_object): Clear decl context before\n+\tpushing.\n+\t* semantics.c (finish_compound_literal): Likewise.\n+\n+2020-10-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (lookup_and_check_tag): Refactor.\n+\n+2020-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/96994\n+\t* call.c (build_over_call): If obj_arg is non-NULL, return INIT_EXPR\n+\tsetting obj_arg to call.\n+\n+2020-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97195\n+\t* constexpr.c (cxx_eval_call_expression): Don't VERIFY_CONSTANT the\n+\tsecond argument.\n+\n+2020-10-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/90210\n+\t* pt.c (do_class_deduction): Don't prune explicit deduction guides\n+\tin copy-list-initialization.  In copy-list-initialization, if an\n+\texplicit deduction guide was selected, give an error.\n+\n 2020-09-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (struct lang_decl_fn): Remove hidden_friend_p."}, {"sha": "3f802a278738ec1221eb31d01889e2a9d6542607", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c2675fa2bbcfe37308af593edb18e2c1c8eabf0", "patch": "@@ -1,3 +1,83 @@\n+2020-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_cond_mixed): Add\n+\tarm neon targets.\n+\t* gcc.target/arm/neon-compare-1.c: New test.\n+\t* gcc.target/arm/neon-compare-2.c: Likewise.\n+\t* gcc.target/arm/neon-compare-3.c: Likewise.\n+\t* gcc.target/arm/neon-compare-4.c: Likewise.\n+\t* gcc.target/arm/neon-compare-5.c: Likewise.\n+\t* gcc.target/arm/neon-vcond-gt.c: Expect comparisons with zero.\n+\t* gcc.target/arm/neon-vcond-ltgt.c: Likewise.\n+\t* gcc.target/arm/neon-vcond-unordered.c: Likewise.\n+\n+2020-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/movtf_1.c: Restrict the asm matching to lp64.\n+\t* gcc.target/aarch64/movti_1.c: Likewise.\n+\n+2020-10-01  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\tPR target/96375\n+\t* gcc.target/arm/lob1.c: Fix missing flag.\n+\t* gcc.target/arm/lob2.c: Likewise.\n+\t* gcc.target/arm/lob3.c: Likewise.\n+\t* gcc.target/arm/lob4.c: Likewise.\n+\t* gcc.target/arm/lob5.c: Likewise.\n+\t* gcc.target/arm/lob6.c: Likewise.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_v8_1_lob_ok): Return 1 only for\n+\tcortex-m targets, add '-mthumb' flag.\n+\n+2020-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97236\n+\t* gcc.dg/vect/pr97236.c: New testcase.\n+\n+2020-10-01  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/97243\n+\t* gcc.c-torture/compile/pr97243.c: New test.\n+\n+2020-10-01  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/97244\n+\t* gcc.dg/ipa/remref-2a.c: Add -fno-ipa-modref\n+\n+2020-10-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/pr94600-1.c: Force 32-bit alignment for a0 for !non_strict_align\n+\ttargets.  Remove target clauses from scan tests.\n+\t* gcc.dg/pr94600-3.c: Same.\n+\n+2020-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/96994\n+\t* g++.dg/cpp2a/consteval18.C: New test.\n+\n+2020-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97195\n+\t* g++.dg/cpp2a/constexpr-new14.C: New test.\n+\n+2020-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* g++.dg/vect/pr97255.cc: New testcase.\n+\n+2020-10-01  Florian Weimer  <fweimer@redhat.com>\n+\n+\tPR target/97250\n+\t* gcc.target/i386/x86-64-v2.c: New test.\n+\t* gcc.target/i386/x86-64-v3.c: New test.\n+\t* gcc.target/i386/x86-64-v3-haswell.c: New test.\n+\t* gcc.target/i386/x86-64-v3-skylake.c: New test.\n+\t* gcc.target/i386/x86-64-v4.c: New test.\n+\n+2020-10-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/90210\n+\t* g++.dg/cpp1z/class-deduction73.C: New test.\n+\n 2020-09-30  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/97189"}, {"sha": "386d791d68197477ec8aff316a77b8c279e19457", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6c2675fa2bbcfe37308af593edb18e2c1c8eabf0", "patch": "@@ -1,3 +1,12 @@\n+2020-10-01  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/morestack.S,\n+\t* config/rs6000/tramp.S: Support __PCREL__ code.\n+\n+2020-10-01  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/t-linux: Document purpose of -mno-minimal-toc.\n+\n 2020-09-29  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* config/riscv/t-elf (LIB2_DIVMOD_EXCEPTION_FLAGS): New"}, {"sha": "02aadfe3b6139c48e2af621af9b0f61d644ee467", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=6c2675fa2bbcfe37308af593edb18e2c1c8eabf0", "patch": "@@ -1,3 +1,7 @@\n+2020-10-01  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/powerpc/sjlj.S: Support __PCREL__ code.\n+\n 2020-07-24  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \t* config/aarch64/sjlj.S: Add conditional pac-ret protection."}, {"sha": "1a63c7e497a50b9c9bba5204142e305c376a05b8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2675fa2bbcfe37308af593edb18e2c1c8eabf0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6c2675fa2bbcfe37308af593edb18e2c1c8eabf0", "patch": "@@ -1,3 +1,8 @@\n+2020-10-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/cpu/arm/cxxabi_tweaks.h (_GLIBCXX_GUARD_TEST_AND_ACQUIRE):\n+\tDo not try to dereference return value of __atomic_load_n.\n+\n 2020-09-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/cpu/arm/cxxabi_tweaks.h (_GLIBCXX_GUARD_TEST_AND_ACQUIRE):"}]}