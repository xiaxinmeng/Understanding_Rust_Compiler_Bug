{"sha": "e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZlYWNkYzk0NTFiYmVlNTRjODBkNmI4NWQyMmJhMzkwZmQyYzdjNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-03-01T08:22:06Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-03-01T08:22:06Z"}, "message": "Tighten use of HARD_FRAME_POINTER_REGNUM in alias.c (PR 84538)\n\nRTL code needs to be consistent about whether it uses the stack\npointer, the frame pointer or the argument pointer to access a\ngiven part of the frame.  alias.c used this to divide accesses\ninto three independent areas.\n\nThe problem in the PR is that we did this for HARD_FRAME_POINTER_REGNUM\neven when the register wasn't being used as a frame pointer.  We can't\ndo that because the frame pointer is then just any old allocatable\nregister and could certainly point to info accessed through the\nargument pointer or stack pointer.\n\n2018-03-01  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR rtl-optimization/84538\n\t* alias.c (init_alias_target): Add commentary.\n\t(init_alias_analysis): Only give HARD_FRAME_POINTER_REGNUM\n\ta unique base value if the frame pointer is not eliminated\n\tto the stack pointer.\n\ngcc/testsuite/\n\tPR rtl-optimization/84538\n\t* gcc.dg/torture/pr84538.c: New test.\n\nFrom-SVN: r258094", "tree": {"sha": "351106ed56d48df57047be4534967c2e4d1300b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/351106ed56d48df57047be4534967c2e4d1300b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4/comments", "author": null, "committer": null, "parents": [{"sha": "54178a01107b911813609693dd8d91968ac06819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54178a01107b911813609693dd8d91968ac06819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54178a01107b911813609693dd8d91968ac06819"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "0d93e26a920d23640d1a77e1bc05320a38903ead", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4", "patch": "@@ -1,3 +1,11 @@\n+2018-03-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR rtl-optimization/84538\n+\t* alias.c (init_alias_target): Add commentary.\n+\t(init_alias_analysis): Only give HARD_FRAME_POINTER_REGNUM\n+\ta unique base value if the frame pointer is not eliminated\n+\tto the stack pointer.\n+\n 2018-03-01  Tom de Vries  <tom@codesourcery.com>\n \n \tPR rtl-optimization/83327"}, {"sha": "5fa15cbd1022961f8ffb0149d15ba39dd10e1984", "filename": "gcc/alias.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4", "patch": "@@ -3191,12 +3191,21 @@ init_alias_target (void)\n \t&& targetm.hard_regno_mode_ok (i, Pmode))\n       static_reg_base_value[i] = arg_base_value;\n \n+  /* RTL code is required to be consistent about whether it uses the\n+     stack pointer, the frame pointer or the argument pointer to\n+     access a given area of the frame.  We can therefore use the\n+     base address to distinguish between the different areas.  */\n   static_reg_base_value[STACK_POINTER_REGNUM]\n     = unique_base_value (UNIQUE_BASE_VALUE_SP);\n   static_reg_base_value[ARG_POINTER_REGNUM]\n     = unique_base_value (UNIQUE_BASE_VALUE_ARGP);\n   static_reg_base_value[FRAME_POINTER_REGNUM]\n     = unique_base_value (UNIQUE_BASE_VALUE_FP);\n+\n+  /* The above rules extend post-reload, with eliminations applying\n+     consistently to each of the three pointers.  Cope with cases in\n+     which the frame pointer is eliminated to the hard frame pointer\n+     rather than the stack pointer.  */\n   if (!HARD_FRAME_POINTER_IS_FRAME_POINTER)\n     static_reg_base_value[HARD_FRAME_POINTER_REGNUM]\n       = unique_base_value (UNIQUE_BASE_VALUE_HFP);\n@@ -3329,7 +3338,14 @@ init_alias_analysis (void)\n \n       /* Initialize the alias information for this pass.  */\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (static_reg_base_value[i])\n+\tif (static_reg_base_value[i]\n+\t    /* Don't treat the hard frame pointer as special if we\n+\t       eliminated the frame pointer to the stack pointer instead.  */\n+\t    && !(i == HARD_FRAME_POINTER_REGNUM\n+\t\t && reload_completed\n+\t\t && !frame_pointer_needed\n+\t\t && targetm.can_eliminate (FRAME_POINTER_REGNUM,\n+\t\t\t\t\t   STACK_POINTER_REGNUM)))\n \t  {\n \t    new_reg_base_value[i] = static_reg_base_value[i];\n \t    bitmap_set_bit (reg_seen, i);"}, {"sha": "6528ac0276d9aa323b9b01620a08750ba7d8b52b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4", "patch": "@@ -1,3 +1,8 @@\n+2018-03-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR rtl-optimization/84538\n+\t* gcc.dg/torture/pr84538.c: New test.\n+\n 2018-02-28  Martin Sebor  <msebor@redhat.com>\n \n \t* c-c++-common/Warray-bounds-2.c: Declare helper static to avoid"}, {"sha": "b56a1c47176f43200ad806269a7cd17858801332", "filename": "gcc/testsuite/gcc.dg/torture/pr84538.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84538.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84538.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84538.c?ref=e6eacdc9451bbee54c80d6b85d22ba390fd2c7c4", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fno-omit-frame-pointer -w\" } */\n+\n+#define SIZE 8\n+\n+main()\n+{\n+  int a[SIZE] = {1};\n+  int i;\n+\n+  for (i = 1; i < SIZE; i++)\n+    if (a[i] != 0)\n+      abort();\n+\n+  exit (0);\n+}"}]}