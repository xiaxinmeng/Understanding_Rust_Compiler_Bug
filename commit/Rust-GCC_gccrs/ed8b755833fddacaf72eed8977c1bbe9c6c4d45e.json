{"sha": "ed8b755833fddacaf72eed8977c1bbe9c6c4d45e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ4Yjc1NTgzM2ZkZGFjYWY3MmVlZDg5NzdjMWJiZTljNmM0ZDQ1ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-15T14:36:32Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-15T14:36:32Z"}, "message": "* pointer-set.c, tree-vectorizer.c: Fix comment typos.\n\nFrom-SVN: r89094", "tree": {"sha": "9e86aa12e44dad0ef8a0171ec79a85b279ce9164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e86aa12e44dad0ef8a0171ec79a85b279ce9164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed8b755833fddacaf72eed8977c1bbe9c6c4d45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8b755833fddacaf72eed8977c1bbe9c6c4d45e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed8b755833fddacaf72eed8977c1bbe9c6c4d45e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8b755833fddacaf72eed8977c1bbe9c6c4d45e/comments", "author": null, "committer": null, "parents": [{"sha": "db3a95196c3192a488ad6ece2ea9057915d2c3a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3a95196c3192a488ad6ece2ea9057915d2c3a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3a95196c3192a488ad6ece2ea9057915d2c3a6"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "2f7ec20f9ef28360e988f788ceda139843332b80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8b755833fddacaf72eed8977c1bbe9c6c4d45e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8b755833fddacaf72eed8977c1bbe9c6c4d45e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed8b755833fddacaf72eed8977c1bbe9c6c4d45e", "patch": "@@ -1,3 +1,7 @@\n+2004-10-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* pointer-set.c, tree-vectorizer.c: Fix comment typos.\n+\n 2004-10-15  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-optimize.c (execute_one_pass): Stop timer right after"}, {"sha": "06592d741a667328215c3c03004f0503c35dd814", "filename": "gcc/pointer-set.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8b755833fddacaf72eed8977c1bbe9c6c4d45e/gcc%2Fpointer-set.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8b755833fddacaf72eed8977c1bbe9c6c4d45e/gcc%2Fpointer-set.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-set.c?ref=ed8b755833fddacaf72eed8977c1bbe9c6c4d45e", "patch": "@@ -87,7 +87,7 @@ void pointer_set_destroy (struct pointer_set_t *pset)\n \n    Collisions are resolved by linear probing.  More complicated\n    collision management schemes are only useful when the load factor\n-   significatly exceeds 0.5, and we never let that happen. */\n+   significantly exceeds 0.5, and we never let that happen. */\n int\n pointer_set_contains (struct pointer_set_t *pset, void *p)\n {"}, {"sha": "30af48475dbc89ded652a7585de5d87d7659a50c", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8b755833fddacaf72eed8977c1bbe9c6c4d45e/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8b755833fddacaf72eed8977c1bbe9c6c4d45e/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=ed8b755833fddacaf72eed8977c1bbe9c6c4d45e", "patch": "@@ -216,7 +216,7 @@ static void vect_generate_tmps_on_preheader (loop_vec_info,\n static tree vect_build_loop_niters (loop_vec_info);\n static void vect_update_ivs_after_vectorizer (struct loop *, tree); \n \n-/* Loop transformations prior to vectorizeration.  */\n+/* Loop transformations prior to vectorization.  */\n \n /* Loop transformations entry point function. \n    It can be used outside of the vectorizer \n@@ -955,7 +955,7 @@ tree_duplicate_loop_to_edge (struct loop *loop, struct loops *loops,\n   definitions = marked_ssa_names ();\n   allocate_new_names (definitions);\n   update_phis_for_duplicate_loop (loop, new_loop, e == exit_e);\n-  /* Here, using assumption (5), we do not propagate new names futher \n+  /* Here, using assumption (5), we do not propagate new names further \n      than on phis of the exit from the second loop.  */\n   rename_variables_in_loop (new_loop);\n   free_new_names (definitions);\n@@ -1012,7 +1012,7 @@ tree_duplicate_loop_to_edge (struct loop *loop, struct loops *loops,\n   /* 4c. Add condition at the end of preheader bb.  */\n   skip_e = add_loop_guard (pre_header_bb, pre_condition, first_exit_bb);\n \n-  /* 4d. Updtae phis at first loop exit and propagate changes \n+  /* 4d. Update phis at first loop exit and propagate changes \n      to the phis of second loop.  */\n   update_phi_nodes_for_guard (skip_e, first_loop);\n \n@@ -2951,7 +2951,7 @@ vect_update_ivs_after_vectorizer (struct loop *loop, tree niters)\n }\n \n \n-/* This function is the main driver of tranformation \n+/* This function is the main driver of transformation \n    to be done for loop before vectorizing it in case of \n    unknown loop bound.  */\n "}]}