{"sha": "1c75dfa4420861aab38c2ebc5fa469bea22dae04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM3NWRmYTQ0MjA4NjFhYWIzOGMyZWJjNWZhNDY5YmVhMjJkYWUwNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-08T22:30:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-08T22:30:49Z"}, "message": "(force_to_mode): OP_MODE must be MODE if MODE and mode of X are of different classes.\n\n(force_to_mode): OP_MODE must be MODE if MODE and mode of X are of different\nclasses.\n(nonzero_bits, num_sign_bit_copies): Say nothing known for floating-point\nmodes.\n\nFrom-SVN: r7688", "tree": {"sha": "d4fc35b87f3efc9b59e116cb97bf0fda499f5b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4fc35b87f3efc9b59e116cb97bf0fda499f5b04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c75dfa4420861aab38c2ebc5fa469bea22dae04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c75dfa4420861aab38c2ebc5fa469bea22dae04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c75dfa4420861aab38c2ebc5fa469bea22dae04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c75dfa4420861aab38c2ebc5fa469bea22dae04/comments", "author": null, "committer": null, "parents": [{"sha": "a890174971baeb7df28d7c86251fecd234094fac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a890174971baeb7df28d7c86251fecd234094fac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a890174971baeb7df28d7c86251fecd234094fac"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "d5b093f0634462504f5038fd4ebc80ba84c69a5c", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c75dfa4420861aab38c2ebc5fa469bea22dae04/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c75dfa4420861aab38c2ebc5fa469bea22dae04/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=1c75dfa4420861aab38c2ebc5fa469bea22dae04", "patch": "@@ -5608,7 +5608,8 @@ force_to_mode (x, mode, mask, reg, just_select)\n   /* We want to perform the operation is its present mode unless we know\n      that the operation is valid in MODE, in which case we do the operation\n      in MODE.  */\n-  op_mode = ((code_to_optab[(int) code] != 0\n+  op_mode = ((GET_MODE_CLASS (mode) == GET_MODE_CLASS (GET_MODE (x))\n+\t      && code_to_optab[(int) code] != 0\n \t      && (code_to_optab[(int) code]->handlers[(int) mode].insn_code\n \t\t  != CODE_FOR_nothing))\n \t     ? mode : GET_MODE (x));\n@@ -6667,6 +6668,10 @@ nonzero_bits (x, mode)\n   int mode_width = GET_MODE_BITSIZE (mode);\n   rtx tem;\n \n+  /* For floating-point values, assume all bits are needed.  */\n+  if (FLOAT_MODE_P (GET_MODE (x)) || FLOAT_MODE_P (mode))\n+    return nonzero;\n+\n   /* If X is wider than MODE, use its mode instead.  */\n   if (GET_MODE_BITSIZE (GET_MODE (x)) > mode_width)\n     {\n@@ -7026,12 +7031,13 @@ num_sign_bit_copies (x, mode)\n   rtx tem;\n \n   /* If we weren't given a mode, use the mode of X.  If the mode is still\n-     VOIDmode, we don't know anything.  */\n+     VOIDmode, we don't know anything.  Likewise if one of the modes is\n+     floating-point.  */\n \n   if (mode == VOIDmode)\n     mode = GET_MODE (x);\n \n-  if (mode == VOIDmode)\n+  if (mode == VOIDmode || FLOAT_MODE_P (mode) || FLOAT_MODE_P (GET_MODE (x)))\n     return 1;\n \n   bitwidth = GET_MODE_BITSIZE (mode);"}]}