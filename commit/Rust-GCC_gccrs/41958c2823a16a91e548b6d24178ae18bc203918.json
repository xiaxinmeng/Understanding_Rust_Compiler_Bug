{"sha": "41958c2823a16a91e548b6d24178ae18bc203918", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5NThjMjgyM2ExNmE5MWU1NDhiNmQyNDE3OGFlMThiYzIwMzkxOA==", "commit": {"author": {"name": "Balaji V. Iyer", "email": "balaji.v.iyer@intel.com", "date": "2013-12-18T19:00:21Z"}, "committer": {"name": "Balaji V. Iyer", "email": "bviyer@gcc.gnu.org", "date": "2013-12-18T19:00:21Z"}, "message": "Added support for Cilk Plus SIMD-enabled function for C.\n\n+++ gcc/ChangeLog \n+2013-12-18  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       * omp-low.c (simd_clone_clauses_extract): Replaced the string\n+       \"cilk simd elemental\" with \"cilk simd function.\"\n+       * config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):\n+       Removed a carriage-return from a warning string.\n+\n+++ gcc/c-family/ChangeLog\n+2013-12-18  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       * c-common.c (c_common_attribute_table): Added \"cilk simd function\"\n+       attribute.\n+       * c-pragma.h (enum pragma_cilk_clause): Remove.\n+       (enum pragma_omp_clause):  Added the following fields:\n+       PRAGMA_CILK_CLAUSE_NOMASK, PRAGMA_CILK_CLAUSE_MASK,\n+       PRAGMA_CILK_CLAUSE_VECTORLENGTH, PRAGMA_CILK_CLAUSE_NONE,\n+       PRAGMA_CILK_CLAUSE_LINEAR, PRAGMA_CILK_CLAUSE_PRIVATE,\n+       PRAGMA_CILK_CLAUSE_FIRSTPRIVATE, PRAGMA_CILK_CLAUSE_LASTPRIVATE,\n+       PRAGMA_CILK_CLAUSE_UNIFORM.\n+\n+\n\n+++ gcc/c/ChangeLog\n+2013-12-18  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       * c-parser.c (struct c_parser::cilk_simd_fn_tokens): Added new field.\n+       (c_parser_declaration_or_fndef): Added a check if cilk_simd_fn_tokens\n+       field in parser is not empty.  If not-empty, call the function\n+       c_parser_finish_omp_declare_simd.\n+       (c_parser_cilk_clause_vectorlength): Modified function to be shared\n+       between SIMD-enabled functions and #pragma simd.  Added new parameter.\n+       (c_parser_cilk_all_clauses): Modified the usage of the function\n+       c_parser_cilk_clause_vectorlength as mentioned above.\n+       (c_parser_cilk_simd_fn_vector_attrs): New function.\n+       (c_finish_cilk_simd_fn_tokens): Likewise.\n+       (is_cilkplus_vector_p): Likewise.\n+       (c_parser_omp_clause_name): Added checking for \"vectorlength,\"\n+       \"nomask,\" and \"mask\" strings in clause name.\n+       (c_parser_omp_all_clauses): Added 3 new case statements:\n+       PRAGMA_CILK_CLAUSE_VECTORLENGTH, PRAGMA_CILK_CLAUSE_MASK and\n+       PRAGMA_CILK_CLAUSE_NOMASK.\n+       (c_parser_attributes): Added a cilk_simd_fn_tokens parameter.  Added a\n+       check for vector attribute and if so call the function\n+       c_parser_cilk_simd_fn_vector_attrs.  Also, when Cilk plus is enabled,\n+       called the function c_finish_cilk_simd_fn_tokens.\n+       (c_finish_omp_declare_simd): Added a check if cilk_simd_fn_tokens \nin\n+       parser field is non-empty.  If so, parse them as you would parse\n+       the omp declare simd pragma.\n+       (c_parser_omp_clause_linear): Added a new bool parm. is_cilk_simd_fn.\n+       Added a check when step is a parameter and flag it as error.\n+       (CILK_SIMD_FN_CLAUSE_MASK): New #define.\n+       (c_parser_cilk_clause_name): Changed pragma_cilk_clause to\n+       pragma_omp_clause.\n+\n\n\n+++ gcc/testsuite/ChangeLog  \n+2013-12-18  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       * c-c++-common/cilk-plus/SE/ef_test.c: New test.\n+       * c-c++-common/cilk-plus/SE/ef_test2.c: Likewise.\n+       * c-c++-common/cilk-plus/SE/vlength_errors.c: Likewise.\n+       * c-c++-common/cilk-plus/SE/ef_error.c: Likewise.\n+       * c-c++-common/cilk-plus/SE/ef_error2.c: Likewise.\n+       * c-c++-common/cilk-plus/SE/ef_error3.c: Likewise.\n+       * gcc.dg/cilk-plus/cilk-plus.exp: Added calls for the above tests.\n+\n\nFrom-SVN: r206095", "tree": {"sha": "ba7d0bcea3d0e1e595579b1bf0fa901020c0989d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba7d0bcea3d0e1e595579b1bf0fa901020c0989d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41958c2823a16a91e548b6d24178ae18bc203918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41958c2823a16a91e548b6d24178ae18bc203918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41958c2823a16a91e548b6d24178ae18bc203918", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41958c2823a16a91e548b6d24178ae18bc203918/comments", "author": null, "committer": null, "parents": [{"sha": "9651142d1ea0200238fa0fc84b250123fb9e06b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9651142d1ea0200238fa0fc84b250123fb9e06b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9651142d1ea0200238fa0fc84b250123fb9e06b9"}], "stats": {"total": 568, "additions": 517, "deletions": 51}, "files": [{"sha": "7f77d8a89805e1281eed49b3ce95f93b4ac13cc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -1,3 +1,10 @@\n+2013-12-18  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* omp-low.c (simd_clone_clauses_extract): Replaced the string\n+\t\"cilk simd elemental\" with \"cilk simd function.\"\n+\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen): \n+\tRemoved a carriage-return from a warning string.\n+\t\n 2013-12-18  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* passes.c (execute_function_dump): Set graph_dump_initialized"}, {"sha": "ffd8eff13242a5dbfe52fc9695e21cb2c2f57a3b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -1,3 +1,16 @@\n+2013-12-18  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* c-common.c (c_common_attribute_table): Added \"cilk simd function\"\n+\tattribute.\n+\t* c-pragma.h (enum pragma_cilk_clause): Remove.\n+\t(enum pragma_omp_clause):  Added the following fields:\n+\tPRAGMA_CILK_CLAUSE_NOMASK, PRAGMA_CILK_CLAUSE_MASK,\n+\tPRAGMA_CILK_CLAUSE_VECTORLENGTH, PRAGMA_CILK_CLAUSE_NONE,\n+\tPRAGMA_CILK_CLAUSE_LINEAR, PRAGMA_CILK_CLAUSE_PRIVATE,\n+\tPRAGMA_CILK_CLAUSE_FIRSTPRIVATE, PRAGMA_CILK_CLAUSE_LASTPRIVATE,\n+\tPRAGMA_CILK_CLAUSE_UNIFORM.\n+\n+\t\n 2013-12-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* cilk.c (cilk_outline): Made this function non-static."}, {"sha": "229f8fa22e89adf8c31dc0dfe5c266d6a7ed547c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -762,6 +762,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_returns_nonnull_attribute, false },\n   { \"omp declare simd\",       0, -1, true,  false, false,\n \t\t\t      handle_omp_declare_simd_attribute, false },\n+  { \"cilk simd function\",     0, -1, true,  false, false,\n+\t\t\t      handle_omp_declare_simd_attribute, false },\n   { \"omp declare target\",     0, 0, true, false, false,\n \t\t\t      handle_omp_declare_target_attribute, false },\n   { NULL,                     0, 0, false, false, false, NULL, false }"}, {"sha": "683b3f8aca9e46e079dd7062cbca66f1386fe372", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -103,19 +103,20 @@ typedef enum pragma_omp_clause {\n   PRAGMA_OMP_CLAUSE_THREAD_LIMIT,\n   PRAGMA_OMP_CLAUSE_TO,\n   PRAGMA_OMP_CLAUSE_UNIFORM,\n-  PRAGMA_OMP_CLAUSE_UNTIED\n-} pragma_omp_clause;\n-\n-/* All Cilk Plus #pragma omp clauses.  */\n-typedef enum pragma_cilk_clause {\n-  PRAGMA_CILK_CLAUSE_NONE = 0,\n+  PRAGMA_OMP_CLAUSE_UNTIED,\n+  \n+  /* Clauses for Cilk Plus SIMD-enabled function.  */\n+  PRAGMA_CILK_CLAUSE_NOMASK,\n+  PRAGMA_CILK_CLAUSE_MASK,\n   PRAGMA_CILK_CLAUSE_VECTORLENGTH,\n-  PRAGMA_CILK_CLAUSE_LINEAR,\n-  PRAGMA_CILK_CLAUSE_PRIVATE,\n-  PRAGMA_CILK_CLAUSE_FIRSTPRIVATE,\n-  PRAGMA_CILK_CLAUSE_LASTPRIVATE,\n-  PRAGMA_CILK_CLAUSE_REDUCTION\n-} pragma_cilk_clause;\n+  PRAGMA_CILK_CLAUSE_NONE = PRAGMA_OMP_CLAUSE_NONE,\n+  PRAGMA_CILK_CLAUSE_LINEAR = PRAGMA_OMP_CLAUSE_LINEAR,\n+  PRAGMA_CILK_CLAUSE_PRIVATE = PRAGMA_OMP_CLAUSE_PRIVATE,\n+  PRAGMA_CILK_CLAUSE_FIRSTPRIVATE = PRAGMA_OMP_CLAUSE_FIRSTPRIVATE,\n+  PRAGMA_CILK_CLAUSE_LASTPRIVATE = PRAGMA_OMP_CLAUSE_LASTPRIVATE,\n+  PRAGMA_CILK_CLAUSE_REDUCTION = PRAGMA_OMP_CLAUSE_REDUCTION,\n+  PRAGMA_CILK_CLAUSE_UNIFORM = PRAGMA_OMP_CLAUSE_UNIFORM\n+} pragma_omp_clause;\n \n extern struct cpp_reader* parse_in;\n "}, {"sha": "58631eeea09f02a8103524d872c809a768907552", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -1,3 +1,34 @@\n+2013-12-18  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* c-parser.c (struct c_parser::cilk_simd_fn_tokens): Added new field.\n+\t(c_parser_declaration_or_fndef): Added a check if cilk_simd_fn_tokens\n+\tfield in parser is not empty.  If not-empty, call the function\n+\tc_parser_finish_omp_declare_simd.\n+\t(c_parser_cilk_clause_vectorlength): Modified function to be shared\n+\tbetween SIMD-enabled functions and #pragma simd.  Added new parameter.\n+\t(c_parser_cilk_all_clauses): Modified the usage of the function\n+\tc_parser_cilk_clause_vectorlength as mentioned above.\n+\t(c_parser_cilk_simd_fn_vector_attrs): New function.\n+\t(c_finish_cilk_simd_fn_tokens): Likewise.\n+\t(is_cilkplus_vector_p): Likewise.\n+\t(c_parser_omp_clause_name): Added checking for \"vectorlength,\"\n+\t\"nomask,\" and \"mask\" strings in clause name.\n+\t(c_parser_omp_all_clauses): Added 3 new case statements:\n+\tPRAGMA_CILK_CLAUSE_VECTORLENGTH, PRAGMA_CILK_CLAUSE_MASK and\n+\tPRAGMA_CILK_CLAUSE_NOMASK.\n+\t(c_parser_attributes): Added a cilk_simd_fn_tokens parameter.  Added a\n+\tcheck for vector attribute and if so call the function\n+\tc_parser_cilk_simd_fn_vector_attrs.  Also, when Cilk plus is enabled,\n+\tcalled the function c_finish_cilk_simd_fn_tokens.\n+\t(c_finish_omp_declare_simd): Added a check if cilk_simd_fn_tokens in\n+\tparser field is non-empty.  If so, parse them as you would parse\n+\tthe omp declare simd pragma.\n+\t(c_parser_omp_clause_linear): Added a new bool parm. is_cilk_simd_fn.\n+\tAdded a check when step is a parameter and flag it as error.\n+\t(CILK_SIMD_FN_CLAUSE_MASK): New #define.\n+\t(c_parser_cilk_clause_name): Changed pragma_cilk_clause to\n+\tpragma_omp_clause.\n+\n 2013-12-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-parser.c (c_parser_omp_parallel): Fix description."}, {"sha": "5dd953d7a2f66884f2d1185cad7376b85fb1f56b", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 223, "deletions": 34, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -208,6 +208,12 @@ typedef struct GTY(()) c_parser {\n   /* True if we are in a context where the Objective-C \"Property attribute\"\n      keywords are valid.  */\n   BOOL_BITFIELD objc_property_attr_context : 1;\n+\n+  /* Cilk Plus specific parser/lexer information.  */\n+\n+  /* Buffer to hold all the tokens from parsing the vector attribute for the\n+     SIMD-enabled functions (formerly known as elemental functions).  */\n+  vec <c_token, va_gc> *cilk_simd_fn_tokens;\n } c_parser;\n \n \n@@ -1245,6 +1251,7 @@ static bool c_parser_objc_diagnose_bad_element_prefix\n static void c_parser_cilk_simd (c_parser *);\n static bool c_parser_cilk_verify_simd (c_parser *, enum pragma_context);\n static tree c_parser_array_notation (location_t, c_parser *, tree, tree);\n+static tree c_parser_cilk_clause_vectorlength (c_parser *, tree, bool);\n \n /* Parse a translation unit (C90 6.7, C99 6.9).\n \n@@ -1646,7 +1653,8 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t\t\t\tC_DTR_NORMAL, &dummy);\n       if (declarator == NULL)\n \t{\n-\t  if (omp_declare_simd_clauses.exists ())\n+\t  if (omp_declare_simd_clauses.exists ()\n+\t      || !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n \t    c_finish_omp_declare_simd (parser, NULL_TREE, NULL_TREE,\n \t\t\t\t       omp_declare_simd_clauses);\n \t  c_parser_skip_to_end_of_block_or_statement (parser);\n@@ -1733,7 +1741,8 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t\t\t  chainon (postfix_attrs, all_prefix_attrs));\n \t\t  if (!d)\n \t\t    d = error_mark_node;\n-\t\t  if (omp_declare_simd_clauses.exists ())\n+\t\t  if (omp_declare_simd_clauses.exists ()\n+\t\t      || !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n \t\t    c_finish_omp_declare_simd (parser, d, NULL_TREE,\n \t\t\t\t\t       omp_declare_simd_clauses);\n \t\t}\n@@ -1745,7 +1754,8 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t\t\t  chainon (postfix_attrs, all_prefix_attrs));\n \t\t  if (!d)\n \t\t    d = error_mark_node;\n-\t\t  if (omp_declare_simd_clauses.exists ())\n+\t\t  if (omp_declare_simd_clauses.exists ()\n+\t\t      || !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n \t\t    c_finish_omp_declare_simd (parser, d, NULL_TREE,\n \t\t\t\t\t       omp_declare_simd_clauses);\n \t\t  start_init (d, asm_name, global_bindings_p ());\n@@ -1773,7 +1783,8 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t      tree d = start_decl (declarator, specs, false,\n \t\t\t\t   chainon (postfix_attrs,\n \t\t\t\t\t    all_prefix_attrs));\n-\t      if (omp_declare_simd_clauses.exists ())\n+\t      if (omp_declare_simd_clauses.exists ()\n+\t\t  || !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n \t\t{\n \t\t  tree parms = NULL_TREE;\n \t\t  if (d && TREE_CODE (d) == FUNCTION_DECL)\n@@ -1901,7 +1912,8 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \tc_parser_declaration_or_fndef (parser, false, false, false,\n \t\t\t\t       true, false, NULL, vNULL);\n       store_parm_decls ();\n-      if (omp_declare_simd_clauses.exists ())\n+      if (omp_declare_simd_clauses.exists ()\n+\t  || !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n \tc_finish_omp_declare_simd (parser, current_function_decl, NULL_TREE,\n \t\t\t\t   omp_declare_simd_clauses);\n       DECL_STRUCT_FUNCTION (current_function_decl)->function_start_locus\n@@ -3765,6 +3777,87 @@ c_parser_attribute_any_word (c_parser *parser)\n   return attr_name;\n }\n \n+/* Returns true of NAME is an IDENTIFIER_NODE with identiifer \"vector,\"\n+   \"__vector\" or \"__vector__.\"  */\n+\n+static inline bool\n+is_cilkplus_vector_p (tree name)\n+{ \n+  if (flag_enable_cilkplus && is_attribute_p (\"vector\", name)) \n+    return true;\n+  return false;\n+}\n+\n+#define CILK_SIMD_FN_CLAUSE_MASK\t\t\t\t  \\\n+\t((OMP_CLAUSE_MASK_1 << PRAGMA_CILK_CLAUSE_VECTORLENGTH)\t  \\\n+\t | (OMP_CLAUSE_MASK_1 << PRAGMA_CILK_CLAUSE_LINEAR)\t  \\\n+\t | (OMP_CLAUSE_MASK_1 << PRAGMA_CILK_CLAUSE_UNIFORM)\t  \\\n+\t | (OMP_CLAUSE_MASK_1 << PRAGMA_CILK_CLAUSE_MASK)\t  \\\n+\t | (OMP_CLAUSE_MASK_1 << PRAGMA_CILK_CLAUSE_NOMASK))\n+\n+/* Parses the vector attribute of SIMD enabled functions in Cilk Plus.\n+   VEC_TOKEN is the \"vector\" token that is replaced with \"simd\" and\n+   pushed into the token list. \n+   Syntax:\n+   vector\n+   vector (<vector attributes>).  */\n+\n+static void\n+c_parser_cilk_simd_fn_vector_attrs (c_parser *parser, c_token vec_token)\n+{\n+  gcc_assert (is_cilkplus_vector_p (vec_token.value));\n+  \n+  int paren_scope = 0;\n+  vec_safe_push (parser->cilk_simd_fn_tokens, vec_token);\n+  /* Consume the \"vector\" token.  */\n+  c_parser_consume_token (parser);\n+\n+  if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))\n+    {\n+      c_parser_consume_token (parser);\n+      paren_scope++;\n+    }\n+  while (paren_scope > 0)\n+    {\n+      c_token *token = c_parser_peek_token (parser);\n+      if (token->type == CPP_OPEN_PAREN)\n+        paren_scope++;\n+      else if (token->type == CPP_CLOSE_PAREN)\n+        paren_scope--;\n+      /* Do not push the last ')' since we are not pushing the '('.  */\n+      if (!(token->type == CPP_CLOSE_PAREN && paren_scope == 0))\n+\tvec_safe_push (parser->cilk_simd_fn_tokens, *token);\n+      c_parser_consume_token (parser);\n+    }\n+  \n+  /* Since we are converting an attribute to a pragma, we need to end the\n+     attribute with PRAGMA_EOL.  */\n+  c_token eol_token;\n+  memset (&eol_token, 0, sizeof (eol_token));\n+  eol_token.type = CPP_PRAGMA_EOL;\n+  vec_safe_push (parser->cilk_simd_fn_tokens, eol_token);\n+}\n+\n+/* Add 2 CPP_EOF at the end of PARSER->ELEM_FN_TOKENS vector.  */\n+\n+static void\n+c_finish_cilk_simd_fn_tokens (c_parser *parser)\n+{\n+  c_token last_token = parser->cilk_simd_fn_tokens->last ();\n+\n+  /* c_parser_attributes is called in several places, so if these EOF\n+     tokens are already inserted, then don't do them again.  */\n+  if (last_token.type == CPP_EOF)\n+    return;\n+  \n+  /* Two CPP_EOF token are added as a safety net since the normal C\n+     front-end has two token look-ahead.  */\n+  c_token eof_token;\n+  eof_token.type = CPP_EOF;\n+  vec_safe_push (parser->cilk_simd_fn_tokens, eof_token);\n+  vec_safe_push (parser->cilk_simd_fn_tokens, eof_token);\n+}\n+\n /* Parse (possibly empty) attributes.  This is a GNU extension.\n \n    attributes:\n@@ -3829,6 +3922,12 @@ c_parser_attributes (c_parser *parser)\n \t  attr_name = c_parser_attribute_any_word (parser);\n \t  if (attr_name == NULL)\n \t    break;\n+\t  if (is_cilkplus_vector_p (attr_name))\t\t  \n+\t    {\n+\t      c_token *v_token = c_parser_peek_token (parser);\n+\t      c_parser_cilk_simd_fn_vector_attrs (parser, *v_token);\n+\t      continue;\n+\t    }\n \t  c_parser_consume_token (parser);\n \t  if (c_parser_next_token_is_not (parser, CPP_OPEN_PAREN))\n \t    {\n@@ -3909,6 +4008,9 @@ c_parser_attributes (c_parser *parser)\n \t}\n       parser->lex_untranslated_string = false;\n     }\n+\n+  if (flag_enable_cilkplus && !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n+    c_finish_cilk_simd_fn_tokens (parser);\n   return attrs;\n }\n \n@@ -9524,6 +9626,8 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_MAP;\n \t  else if (!strcmp (\"mergeable\", p))\n \t    result = PRAGMA_OMP_CLAUSE_MERGEABLE;\n+\t  else if (flag_enable_cilkplus && !strcmp (\"mask\", p))\n+\t    result = PRAGMA_CILK_CLAUSE_MASK;\n \t  break;\n \tcase 'n':\n \t  if (!strcmp (\"notinbranch\", p))\n@@ -9534,6 +9638,8 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_NUM_TEAMS;\n \t  else if (!strcmp (\"num_threads\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NUM_THREADS;\n+\t  else if (flag_enable_cilkplus && !strcmp (\"nomask\", p))\n+\t    result = PRAGMA_CILK_CLAUSE_NOMASK;\n \t  break;\n \tcase 'o':\n \t  if (!strcmp (\"ordered\", p))\n@@ -9577,6 +9683,10 @@ c_parser_omp_clause_name (c_parser *parser)\n \t  else if (!strcmp (\"untied\", p))\n \t    result = PRAGMA_OMP_CLAUSE_UNTIED;\n \t  break;\n+\tcase 'v':\n+\t  if (flag_enable_cilkplus && !strcmp (\"vectorlength\", p))\n+\t    result = PRAGMA_CILK_CLAUSE_VECTORLENGTH;\n+\t  break;\n \t}\n     }\n \n@@ -10393,7 +10503,7 @@ c_parser_omp_clause_aligned (c_parser *parser, tree list)\n    linear ( variable-list : expression ) */\n \n static tree\n-c_parser_omp_clause_linear (c_parser *parser, tree list)\n+c_parser_omp_clause_linear (c_parser *parser, tree list, bool is_cilk_simd_fn)\n {\n   location_t clause_loc = c_parser_peek_token (parser)->location;\n   tree nl, c, step;\n@@ -10410,6 +10520,11 @@ c_parser_omp_clause_linear (c_parser *parser, tree list)\n       step = c_parser_expression (parser).value;\n       mark_exp_read (step);\n       step = c_fully_fold (step, false, NULL);\n+      if (is_cilk_simd_fn && TREE_CODE (step) == PARM_DECL)\n+\t{\n+\t  sorry (\"using parameters for %<linear%> step is not supported yet\");\n+\t  step = integer_one_node;\n+\t}\n       if (!INTEGRAL_TYPE_P (TREE_TYPE (step)))\n \t{\n \t  error_at (clause_loc, \"%<linear%> clause step expression must \"\n@@ -10768,7 +10883,7 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t\t\t  const char *where, bool finish_p = true)\n {\n   tree clauses = NULL;\n-  bool first = true;\n+  bool first = true, cilk_simd_fn = false;\n \n   while (c_parser_next_token_is_not (parser, CPP_PRAGMA_EOL))\n     {\n@@ -10854,11 +10969,13 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  c_name = \"untied\";\n \t  break;\n \tcase PRAGMA_OMP_CLAUSE_INBRANCH:\n+\tcase PRAGMA_CILK_CLAUSE_MASK:\n \t  clauses = c_parser_omp_clause_branch (parser, OMP_CLAUSE_INBRANCH,\n \t\t\t\t\t\tclauses);\n \t  c_name = \"inbranch\";\n \t  break;\n \tcase PRAGMA_OMP_CLAUSE_NOTINBRANCH:\n+\tcase PRAGMA_CILK_CLAUSE_NOMASK:\n \t  clauses = c_parser_omp_clause_branch (parser, OMP_CLAUSE_NOTINBRANCH,\n \t\t\t\t\t\tclauses);\n \t  c_name = \"notinbranch\";\n@@ -10924,8 +11041,10 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_omp_clause_aligned (parser, clauses);\n \t  c_name = \"aligned\";\n \t  break;\n-\tcase PRAGMA_OMP_CLAUSE_LINEAR:\n-\t  clauses = c_parser_omp_clause_linear (parser, clauses);\n+\tcase PRAGMA_OMP_CLAUSE_LINEAR: \n+\t  if (((mask >> PRAGMA_CILK_CLAUSE_VECTORLENGTH) & 1) != 0)\n+\t   cilk_simd_fn = true; \n+\t  clauses = c_parser_omp_clause_linear (parser, clauses, cilk_simd_fn); \n \t  c_name = \"linear\";\n \t  break;\n \tcase PRAGMA_OMP_CLAUSE_DEPEND:\n@@ -10952,6 +11071,10 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_omp_clause_safelen (parser, clauses);\n \t  c_name = \"safelen\";\n \t  break;\n+\tcase PRAGMA_CILK_CLAUSE_VECTORLENGTH:\n+\t  clauses = c_parser_cilk_clause_vectorlength (parser, clauses, true);\n+\t  c_name = \"simdlen\";\n+\t  break;\n \tcase PRAGMA_OMP_CLAUSE_SIMDLEN:\n \t  clauses = c_parser_omp_clause_simdlen (parser, clauses);\n \t  c_name = \"simdlen\";\n@@ -12727,10 +12850,19 @@ static void\n c_finish_omp_declare_simd (c_parser *parser, tree fndecl, tree parms,\n \t\t\t   vec<c_token> clauses)\n {\n+  if (flag_enable_cilkplus\n+      && clauses.exists () && !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n+    {\n+      error (\"%<#pragma omp declare simd%> cannot be used in the same \"\n+\t     \"function marked as a Cilk Plus SIMD-enabled function\");\n+      vec_free (parser->cilk_simd_fn_tokens);\n+      return;\n+    }\n+  \n   /* Normally first token is CPP_NAME \"simd\".  CPP_EOF there indicates\n      error has been reported and CPP_PRAGMA that c_finish_omp_declare_simd\n      has already processed the tokens.  */\n-  if (clauses[0].type == CPP_EOF)\n+  if (clauses.exists () && clauses[0].type == CPP_EOF)\n     return;\n   if (fndecl == NULL_TREE || TREE_CODE (fndecl) != FUNCTION_DECL)\n     {\n@@ -12739,7 +12871,7 @@ c_finish_omp_declare_simd (c_parser *parser, tree fndecl, tree parms,\n       clauses[0].type = CPP_EOF;\n       return;\n     }\n-  if (clauses[0].type != CPP_NAME)\n+  if (clauses.exists () && clauses[0].type != CPP_NAME)\n     {\n       error_at (DECL_SOURCE_LOCATION (fndecl),\n \t\t\"%<#pragma omp declare simd%> not immediately followed by \"\n@@ -12753,31 +12885,61 @@ c_finish_omp_declare_simd (c_parser *parser, tree fndecl, tree parms,\n \n   unsigned int tokens_avail = parser->tokens_avail;\n   gcc_assert (parser->tokens == &parser->tokens_buf[0]);\n-  parser->tokens = clauses.address ();\n-  parser->tokens_avail = clauses.length ();\n-\n+  bool is_cilkplus_cilk_simd_fn = false;\n+  \n+  if (flag_enable_cilkplus && !vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n+    {\n+      parser->tokens = parser->cilk_simd_fn_tokens->address ();\n+      parser->tokens_avail = vec_safe_length (parser->cilk_simd_fn_tokens);\n+      is_cilkplus_cilk_simd_fn = true;\n+    }\n+  else\n+    {\n+      parser->tokens = clauses.address ();\n+      parser->tokens_avail = clauses.length ();\n+    }\n+  \n   /* c_parser_omp_declare_simd pushed 2 extra CPP_EOF tokens at the end.  */\n   while (parser->tokens_avail > 3)\n     {\n       c_token *token = c_parser_peek_token (parser);\n-      gcc_assert (token->type == CPP_NAME\n-\t\t  && strcmp (IDENTIFIER_POINTER (token->value), \"simd\") == 0);\n+      if (!is_cilkplus_cilk_simd_fn) \n+\tgcc_assert (token->type == CPP_NAME \n+\t\t    && strcmp (IDENTIFIER_POINTER (token->value), \"simd\") == 0);\n+      else\n+\tgcc_assert (token->type == CPP_NAME\n+\t\t    && is_cilkplus_vector_p (token->value));\n       c_parser_consume_token (parser);\n       parser->in_pragma = true;\n \n-      tree c = c_parser_omp_all_clauses (parser, OMP_DECLARE_SIMD_CLAUSE_MASK,\n-\t\t\t\t\t \"#pragma omp declare simd\");\n+      tree c = NULL_TREE;\n+      if (is_cilkplus_cilk_simd_fn) \n+\tc = c_parser_omp_all_clauses (parser, CILK_SIMD_FN_CLAUSE_MASK,\n+\t\t\t\t      \"SIMD-enabled functions attribute\");\n+      else \n+\tc = c_parser_omp_all_clauses (parser, OMP_DECLARE_SIMD_CLAUSE_MASK,\n+\t\t\t\t      \"#pragma omp declare simd\");\n       c = c_omp_declare_simd_clauses_to_numbers (parms, c);\n       if (c != NULL_TREE)\n \tc = tree_cons (NULL_TREE, c, NULL_TREE);\n+      if (is_cilkplus_cilk_simd_fn) \n+\t{ \n+\t  tree k = build_tree_list (get_identifier (\"cilk simd function\"), c);\n+\t  TREE_CHAIN (k) = DECL_ATTRIBUTES (fndecl);\n+\t  DECL_ATTRIBUTES (fndecl) = k;\n+\t} \n       c = build_tree_list (get_identifier (\"omp declare simd\"), c);\n       TREE_CHAIN (c) = DECL_ATTRIBUTES (fndecl);\n       DECL_ATTRIBUTES (fndecl) = c;\n     }\n \n   parser->tokens = &parser->tokens_buf[0];\n   parser->tokens_avail = tokens_avail;\n-  clauses[0].type = CPP_PRAGMA;\n+  if (clauses.exists ())\n+    clauses[0].type = CPP_PRAGMA;\n+\n+  if (!vec_safe_is_empty (parser->cilk_simd_fn_tokens))\n+    vec_free (parser->cilk_simd_fn_tokens);\n }\n \n \n@@ -13370,14 +13532,26 @@ c_parser_cilk_verify_simd (c_parser *parser,\n }\n \n /* Cilk Plus:\n-   vectorlength ( constant-expression ) */\n+   This function is shared by SIMD-enabled functions and #pragma simd.  \n+   If IS_SIMD_FN is true then it is parsing a SIMD-enabled function and \n+   CLAUSES is unused.  The main purpose of this function is to parse a\n+   vectorlength attribute or clause and check for parse errors.\n+   When IS_SIMD_FN is true then the function is merely caching the tokens\n+   in PARSER->CILK_SIMD_FN_TOKENS.  If errors are found then the token\n+   cache is cleared since there is no reason to continue.\n+   Syntax:\n+   vectorlength ( constant-expression )  */\n \n static tree\n-c_parser_cilk_clause_vectorlength (c_parser *parser, tree clauses)\n+c_parser_cilk_clause_vectorlength (c_parser *parser, tree clauses, \n+\t\t\t\t   bool is_simd_fn)\n {\n+  if (is_simd_fn)\n+    check_no_duplicate_clause (clauses, OMP_CLAUSE_SIMDLEN, \"vectorlength\");\n+  else\n   /* The vectorlength clause behaves exactly like OpenMP's safelen\n      clause.  Represent it in OpenMP terms.  */\n-  check_no_duplicate_clause (clauses, OMP_CLAUSE_SAFELEN, \"vectorlength\");\n+    check_no_duplicate_clause (clauses, OMP_CLAUSE_SAFELEN, \"vectorlength\");\n \n   if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n     return clauses;\n@@ -13386,18 +13560,33 @@ c_parser_cilk_clause_vectorlength (c_parser *parser, tree clauses)\n   tree expr = c_parser_expr_no_commas (parser, NULL).value;\n   expr = c_fully_fold (expr, false, NULL);\n \n-  if (!TREE_TYPE (expr)\n-      || !TREE_CONSTANT (expr)\n-      || !INTEGRAL_TYPE_P (TREE_TYPE (expr)))\n-    error_at (loc, \"vectorlength must be an integer constant\");\n+  /* If expr is an error_mark_node then the above function would have\n+     emitted an error.  No reason to do it twice.  */\n+  if (expr == error_mark_node)\n+    ;\n+  else if (!TREE_TYPE (expr)\n+\t   || !TREE_CONSTANT (expr)\n+\t   || !INTEGRAL_TYPE_P (TREE_TYPE (expr)))\n+  \n+    error_at (loc, \"vectorlength must be an integer constant\");  \n   else if (exact_log2 (TREE_INT_CST_LOW (expr)) == -1)\n     error_at (loc, \"vectorlength must be a power of 2\");\n   else\n     {\n-      tree u = build_omp_clause (loc, OMP_CLAUSE_SAFELEN);\n-      OMP_CLAUSE_SAFELEN_EXPR (u) = expr;\n-      OMP_CLAUSE_CHAIN (u) = clauses;\n-      clauses = u;\n+      if (is_simd_fn)\n+\t{\n+\t  tree u = build_omp_clause (loc, OMP_CLAUSE_SIMDLEN);\n+\t  OMP_CLAUSE_SIMDLEN_EXPR (u) = expr;\n+\t  OMP_CLAUSE_CHAIN (u) = clauses;\n+\t  clauses = u;\n+\t}\n+      else\n+\t{\n+\t  tree u = build_omp_clause (loc, OMP_CLAUSE_SAFELEN);\n+\t  OMP_CLAUSE_SAFELEN_EXPR (u) = expr;\n+\t  OMP_CLAUSE_CHAIN (u) = clauses;\n+\t  clauses = u;\n+\t}\n     }\n \n   c_parser_require (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n@@ -13494,10 +13683,10 @@ c_parser_cilk_clause_linear (c_parser *parser, tree clauses)\n    not consumed.  Otherwise, the appropriate pragma_simd_clause is\n    returned and the token is consumed.  */\n \n-static pragma_cilk_clause\n+static pragma_omp_clause\n c_parser_cilk_clause_name (c_parser *parser)\n {\n-  pragma_cilk_clause result;\n+  pragma_omp_clause result;\n   c_token *token = c_parser_peek_token (parser);\n \n   if (!token->value || token->type != CPP_NAME)\n@@ -13534,14 +13723,14 @@ c_parser_cilk_all_clauses (c_parser *parser)\n \n   while (c_parser_next_token_is_not (parser, CPP_PRAGMA_EOL))\n     {\n-      pragma_cilk_clause c_kind;\n+      pragma_omp_clause c_kind;\n \n       c_kind = c_parser_cilk_clause_name (parser);\n \n       switch (c_kind)\n \t{\n \tcase PRAGMA_CILK_CLAUSE_VECTORLENGTH:\n-\t  clauses = c_parser_cilk_clause_vectorlength (parser, clauses);\n+\t  clauses = c_parser_cilk_clause_vectorlength (parser, clauses, false);\n \t  break;\n \tcase PRAGMA_CILK_CLAUSE_LINEAR:\n \t  clauses = c_parser_cilk_clause_linear (parser, clauses);"}, {"sha": "0be671da3902918e645a898692e6b691c95ca385", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -43860,7 +43860,7 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n \t  || (clonei->simdlen & (clonei->simdlen - 1)) != 0))\n     {\n       warning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n-\t\t  \"unsupported simdlen %d\\n\", clonei->simdlen);\n+\t\t  \"unsupported simdlen %d\", clonei->simdlen);\n       return 0;\n     }\n "}, {"sha": "2a2cbf0f0610715d2afdadb40c7bbf29fa753ab8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -31478,10 +31478,10 @@ cp_parser_cilk_simd_linear (cp_parser *parser, tree clauses)\n    token is not consumed.  Otherwise, the appropriate enum from the\n    pragma_simd_clause is returned and the token is consumed.  */\n \n-static pragma_cilk_clause\n+static pragma_omp_clause\n cp_parser_cilk_simd_clause_name (cp_parser *parser)\n {\n-  pragma_cilk_clause clause_type;\n+  pragma_omp_clause clause_type;\n   cp_token *token = cp_lexer_peek_token (parser->lexer);\n \n   if (token->keyword == RID_PRIVATE)\n@@ -31515,7 +31515,7 @@ cp_parser_cilk_simd_all_clauses (cp_parser *parser, cp_token *pragma_token)\n   while (cp_lexer_next_token_is_not (parser->lexer, CPP_PRAGMA_EOL)\n \t && clauses != error_mark_node)\n     {\n-      pragma_cilk_clause c_kind;\n+      pragma_omp_clause c_kind;\n       c_kind = cp_parser_cilk_simd_clause_name (parser);\n       if (c_kind == PRAGMA_CILK_CLAUSE_VECTORLENGTH)\n \tclauses = cp_parser_cilk_simd_vectorlength (parser, clauses);"}, {"sha": "aacee3872b2bb5e68659b4f9fbe83bb2f6c190d8", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -10688,7 +10688,7 @@ simd_clone_clauses_extract (struct cgraph_node *node, tree clauses,\n      declare simd\".  */\n   bool cilk_clone\n     = (flag_enable_cilkplus\n-       && lookup_attribute (\"cilk plus elemental\",\n+       && lookup_attribute (\"cilk simd function\",\n \t\t\t    DECL_ATTRIBUTES (node->decl)));\n \n   /* Allocate one more than needed just in case this is an in-branch"}, {"sha": "f4e055fdc89caf45e2382f19aa317b391623ed9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -1,3 +1,13 @@\n+2013-12-18  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* c-c++-common/cilk-plus/SE/ef_test.c: New test.\n+\t* c-c++-common/cilk-plus/SE/ef_test2.c: Likewise.\n+\t* c-c++-common/cilk-plus/SE/vlength_errors.c: Likewise.\n+\t* c-c++-common/cilk-plus/SE/ef_error.c: Likewise.\n+\t* c-c++-common/cilk-plus/SE/ef_error2.c: Likewise.\n+\t* c-c++-common/cilk-plus/SE/ef_error3.c: Likewise.\n+\t* gcc.dg/cilk-plus/cilk-plus.exp: Added calls for the above tests.\n+\t\n 2013-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/59539"}, {"sha": "6a4b4a4178eb29258d7ac16bdf3110576d035446", "filename": "gcc/testsuite/c-c++-common/cilk-plus/SE/ef_error.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error.c?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus -fopenmp\" } */\n+\n+#pragma omp declare simd linear(y:1) simdlen(4) \n+__attribute__((vector (linear (y:1), vectorlength(4))))\n+int func (int x, int y) { /* { dg-error \"cannot be used in the same function marked as a Cilk Plus SIMD-enabled\" } */ \n+  return (x+y);\n+}\n+__attribute__((vector (linear (y:1), private (x)))) /* { dg-error \"is not valid for\" } */\n+int func2 (int x, int y) {\n+  return (x+y);\n+}\n+\n+__attribute__((vector (linear (y:1), simdlen (4)))) /* { dg-error \"is not valid for\" } */\n+int func2_1 (int x, int y) {\n+  return (x+y);\n+}\n+\n+__attribute__((vector (linear (y:1), inbranch))) /* { dg-error \"is not valid for\" } */\n+int func2_3 (int x, int y) {\n+  return (x+y);\n+}\n+\n+__attribute__((vector (notinbranch, vectorlength (4)))) /* { dg-error \"is not valid for\" } */\n+int func2_2 (int x, int y) {\n+  return (x+y);\n+}\n+\n+int main (void)\n+{\n+  return (func (5,6));\n+}"}, {"sha": "518d6407eeb1bc856cfc5394ba818555f5e0af47", "filename": "gcc/testsuite/c-c++-common/cilk-plus/SE/ef_error2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error2.c?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-options \"-fcilkplus -Wall\" } */\n+\n+__attribute__((vector (vectorlength(32)))) \n+//#pragma omp simd simdlen (32)\n+int func2 (int x, int y)  /* { dg-warning \"unsupported simdlen\" } */\n+{\n+  return (x+y);\n+}\n+\n+int main (void)\n+{\n+  return (func2 (5,6));\n+}"}, {"sha": "ab55fae0c326cf124dabd2fbef1a3cf15636b4a8", "filename": "gcc/testsuite/c-c++-common/cilk-plus/SE/ef_error3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_error3.c?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-options \"-fcilkplus -Wall\" } */\n+\n+__attribute__((vector (linear (x:y))))\n+int func2 (int x, int y) \n+{ /* { dg-message \"using parameters for\" } */\n+  return (x+y);\n+}\n+\n+int main (void)\n+{\n+  return (func2 (5,6));\n+}"}, {"sha": "e606acac16f977fc40eca723337e68c8943deae2", "filename": "gcc/testsuite/c-c++-common/cilk-plus/SE/ef_test.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_test.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_test.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_test.c?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus -Wunknown-pragmas\" } */\n+\n+/* Tests the clauses in several combinations put in different locations.  */\n+/* This is mostly a parser test.  */\n+#define Q 4\n+\n+int z = Q;\n+\n+ __attribute__ ((vector (uniform(x), linear (y:1), vectorlength (4) )))\n+int func (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+ __attribute__ ((__vector__ (uniform(x), vectorlength (2), linear (y:1) )))\n+int func2 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector (uniform(y), linear (x), vectorlength (4) )))\n+int func3 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector (uniform(x), linear (y:1), mask)))\n+int func4 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector (uniform(x), linear (y:1), nomask)))\n+int func5 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector (uniform(x), mask, linear (y:1)))) \n+int func6 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector (uniform (x), mask, linear (y:1)), vector))\n+int func7 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector (uniform (x), mask, linear (y:1)), vector (uniform (y), mask)))\n+int func8 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector, vector (uniform (y), mask)))\n+int func9 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+  int ii = 0, q = 5;\n+  for (ii = 0; ii < 10; ii++)\n+    q += func (argc, ii);\n+  return q;\n+}"}, {"sha": "7ec0578b4124d1e77be33457ba5e160fbaa10fc1", "filename": "gcc/testsuite/c-c++-common/cilk-plus/SE/ef_test2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_test2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_test2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fef_test2.c?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+void func (int x, int y) __attribute__((vector(linear(x:1), uniform (y)),\n+\t\t\t\t\tvector));\n+\n+int q;\n+int main (void)\n+{\n+  int ii = 0;\n+  q = 5; \n+  for (ii = 0; ii < 100; ii++) \n+    func (ii, q);\n+\n+  return 0;\n+}\n+"}, {"sha": "38d610a8679e19fcf545b01ebfae309025933d35", "filename": "gcc/testsuite/c-c++-common/cilk-plus/SE/vlength_errors.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fvlength_errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fvlength_errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FSE%2Fvlength_errors.c?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus -Wunknown-pragmas\" } */\n+\n+#define Q 4\n+\n+int z = Q;\n+\n+__attribute__ ((vector (uniform(x), vectorlength (), linear (y:1) ))) /* { dg-error \"expected expression\" } */\n+int func2 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector (uniform(x), linear (y:1), vectorlength (4.5) ))) /* { dg-error \"vectorlength must be an integer\" } */\n+int func3 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector (uniform(x), linear (y:1), vectorlength (z) ))) /* { dg-error \"vectorlength must be an integer\" } */\n+int func4 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector (uniform(x), linear (y:1), vectorlength (Q) ))) /* This is OK!  */\n+int func5 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector (uniform(x), vectorlength (z), linear (y:1)))) /* { dg-error \"vectorlength must be an integer\" } */\n+int func6 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+__attribute__ ((vector (uniform(x), linear (y:1), vectorlength (sizeof (int)) ))) /* This is OK too!  */\n+int func7 (int x, int y)\n+{\n+  int zq = 5;\n+  return x + (y*zq);\n+}\n+\n+int main (void)\n+{\n+  int ii = 0, q = 5;\n+  for (ii = 0; ii < 10; ii++)\n+    q += func2 (z, ii);\n+  return q;\n+}"}, {"sha": "51c715df2e162eb43cec0d5bc81a82b056b47d07", "filename": "gcc/testsuite/gcc.dg/cilk-plus/cilk-plus.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fgcc.dg%2Fcilk-plus%2Fcilk-plus.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41958c2823a16a91e548b6d24178ae18bc203918/gcc%2Ftestsuite%2Fgcc.dg%2Fcilk-plus%2Fcilk-plus.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcilk-plus%2Fcilk-plus.exp?ref=41958c2823a16a91e548b6d24178ae18bc203918", "patch": "@@ -60,6 +60,10 @@ if { [check_effective_target_lto] } {\n     dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3 -flto -g -fcilkplus\" \" \"\n }\n \n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \" -g\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \" -O3 -std=c99\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/SE/*.c]] \" -O3 -g\" \" \"\n+\n dg-finish\n \n unset TEST_EXTRA_LIBS"}]}