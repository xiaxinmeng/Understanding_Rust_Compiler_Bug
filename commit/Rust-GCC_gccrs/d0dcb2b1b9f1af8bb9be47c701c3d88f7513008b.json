{"sha": "d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBkY2IyYjFiOWYxYWY4YmI5YmU0N2M3MDFjM2Q4OGY3NTEzMDA4Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-23T14:05:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-23T14:05:26Z"}, "message": "[multiple changes]\n\n2011-11-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* thread.c, s-oscons-tmplt.c: Generate __gnat_pthread_condattr_setup\n\tonly on platforms where this is required, as determined by\n\ts-oscons.h.\n\n2011-11-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch9.adb: No check on entry index if error on index.\n\n2011-11-23  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Return_Statement): Improve error messages for\n\treturn statements nested inside an extended_return_statement.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\t* gcc-interface/Makefile.in (MISCLIB): Add -lutil for BSD targets.\n\nFrom-SVN: r181670", "tree": {"sha": "ff57b9487691cf2fb581fa1a9ad47d175aef9fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff57b9487691cf2fb581fa1a9ad47d175aef9fc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/comments", "author": null, "committer": null, "parents": [{"sha": "db3dd8af71808b993831ad6373b312b8fa9d4b50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3dd8af71808b993831ad6373b312b8fa9d4b50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3dd8af71808b993831ad6373b312b8fa9d4b50"}], "stats": {"total": 122, "additions": 85, "deletions": 37}, "files": [{"sha": "4533244cd7424dd7e86c987de422f027e30a6536", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b", "patch": "@@ -1,3 +1,20 @@\n+2011-11-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* thread.c, s-oscons-tmplt.c: Generate __gnat_pthread_condattr_setup\n+\tonly on platforms where this is required, as determined by\n+\ts-oscons.h.\n+\n+2011-11-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch9.adb: No check on entry index if error on index.\n+\n+2011-11-23  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Return_Statement): Improve error messages for\n+\treturn statements nested inside an extended_return_statement.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\t* gcc-interface/Makefile.in (MISCLIB): Add -lutil for BSD targets.\n+\n 2011-11-23  Ed Schonberg  <schonberg@adacore.com>\n \n \t* freeze.adb (Freeze_All_Ent): An incomplete type is not"}, {"sha": "44d75154779c543f96d627f96938e0e417872fac", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b", "patch": "@@ -4047,7 +4047,7 @@ ada/sem_ch3.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/itypes.ads ada/layout.ads ada/lib.ads ada/lib.adb ada/lib-list.adb \\\n    ada/lib-load.ads ada/lib-sort.adb ada/lib-util.ads ada/lib-xref.ads \\\n    ada/namet.ads ada/namet.adb ada/nlists.ads ada/nlists.adb ada/nmake.ads \\\n-   ada/nmake.adb ada/opt.ads ada/opt.adb ada/output.ads ada/par_sco.ads \\\n+   ada/nmake.adb ada/opt.ads ada/output.ads ada/par_sco.ads \\\n    ada/put_alfa.ads ada/restrict.ads ada/restrict.adb ada/rident.ads \\\n    ada/rtsfind.ads ada/scans.ads ada/sem.ads ada/sem.adb ada/sem_attr.ads \\\n    ada/sem_aux.ads ada/sem_aux.adb ada/sem_case.ads ada/sem_case.adb \\\n@@ -4245,23 +4245,24 @@ ada/sem_ch8.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/rident.ads ada/rtsfind.ads ada/rtsfind.adb ada/scans.ads \\\n    ada/sem.ads ada/sem.adb ada/sem_aggr.ads ada/sem_attr.ads \\\n    ada/sem_aux.ads ada/sem_aux.adb ada/sem_cat.ads ada/sem_ch10.ads \\\n-   ada/sem_ch11.ads ada/sem_ch12.ads ada/sem_ch13.ads ada/sem_ch2.ads \\\n-   ada/sem_ch3.ads ada/sem_ch4.ads ada/sem_ch5.ads ada/sem_ch6.ads \\\n-   ada/sem_ch7.ads ada/sem_ch8.ads ada/sem_ch8.adb ada/sem_ch9.ads \\\n-   ada/sem_disp.ads ada/sem_dist.ads ada/sem_elab.ads ada/sem_elim.ads \\\n-   ada/sem_eval.ads ada/sem_intr.ads ada/sem_prag.ads ada/sem_res.ads \\\n-   ada/sem_res.adb ada/sem_type.ads ada/sem_util.ads ada/sem_util.adb \\\n-   ada/sem_warn.ads ada/sinfo.ads ada/sinfo.adb ada/sinfo-cn.ads \\\n-   ada/sinput.ads ada/sinput.adb ada/snames.ads ada/stand.ads \\\n-   ada/stringt.ads ada/style.ads ada/styleg.ads ada/styleg.adb \\\n-   ada/stylesw.ads ada/system.ads ada/s-exctab.ads ada/s-htable.ads \\\n-   ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads \\\n-   ada/s-rident.ads ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads \\\n-   ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads \\\n-   ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads \\\n-   ada/table.adb ada/targparm.ads ada/tbuild.ads ada/tree_io.ads \\\n-   ada/ttypes.ads ada/types.ads ada/uintp.ads ada/uintp.adb ada/uname.ads \\\n-   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n+   ada/sem_ch11.ads ada/sem_ch12.ads ada/sem_ch13.ads ada/sem_ch13.adb \\\n+   ada/sem_ch2.ads ada/sem_ch3.ads ada/sem_ch4.ads ada/sem_ch5.ads \\\n+   ada/sem_ch6.ads ada/sem_ch7.ads ada/sem_ch8.ads ada/sem_ch8.adb \\\n+   ada/sem_ch9.ads ada/sem_disp.ads ada/sem_dist.ads ada/sem_elab.ads \\\n+   ada/sem_elim.ads ada/sem_eval.ads ada/sem_intr.ads ada/sem_prag.ads \\\n+   ada/sem_res.ads ada/sem_res.adb ada/sem_type.ads ada/sem_util.ads \\\n+   ada/sem_util.adb ada/sem_warn.ads ada/sinfo.ads ada/sinfo.adb \\\n+   ada/sinfo-cn.ads ada/sinput.ads ada/sinput.adb ada/snames.ads \\\n+   ada/stand.ads ada/stringt.ads ada/style.ads ada/styleg.ads \\\n+   ada/styleg.adb ada/stylesw.ads ada/system.ads ada/s-exctab.ads \\\n+   ada/s-htable.ads ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads \\\n+   ada/s-parame.ads ada/s-rident.ads ada/s-secsta.ads ada/s-soflin.ads \\\n+   ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n+   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n+   ada/table.ads ada/table.adb ada/targparm.ads ada/tbuild.ads \\\n+   ada/tree_io.ads ada/ttypes.ads ada/types.ads ada/uintp.ads \\\n+   ada/uintp.adb ada/uname.ads ada/unchconv.ads ada/unchdeal.ads \\\n+   ada/urealp.ads ada/warnsw.ads ada/widechar.ads \n \n ada/sem_ch9.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/atree.ads \\"}, {"sha": "ad8917fcd2909a562ffa433ca31c7b1224bf94c7", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b", "patch": "@@ -1156,6 +1156,7 @@ ifeq ($(strip $(filter-out %86 kfreebsd%,$(arch) $(osys))),)\n   GNATLIB_SHARED = gnatlib-shared-dual\n   GMEM_LIB = gmemlib\n   LIBRARY_VERSION := $(LIB_VERSION)\n+  MISCLIB = -lutil\n endif\n \n ifeq ($(strip $(filter-out x86_64 kfreebsd%,$(arch) $(osys))),)\n@@ -1209,6 +1210,7 @@ ifeq ($(strip $(filter-out %86 freebsd%,$(arch) $(osys))),)\n   THREADSLIB= -lpthread\n   GMEM_LIB = gmemlib\n   LIBRARY_VERSION := $(LIB_VERSION)\n+  MISCLIB = -lutil\n endif\n \n ifeq ($(strip $(filter-out %86_64 freebsd%,$(arch) $(osys))),)\n@@ -1235,6 +1237,7 @@ ifeq ($(strip $(filter-out %86_64 freebsd%,$(arch) $(osys))),)\n   THREADSLIB= -lpthread\n   GMEM_LIB = gmemlib\n   LIBRARY_VERSION := $(LIB_VERSION)\n+  MISCLIB = -lutil\n endif\n \n ifeq ($(strip $(filter-out s390% linux%,$(arch) $(osys))),)"}, {"sha": "3d70ceb485737d5254791f26de224d664b80ae4b", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b", "patch": "@@ -1360,13 +1360,22 @@ CND(CLOCK_SGI_FAST,  \"SGI fast clock\")\n CND(CLOCK_SGI_CYCLE, \"SGI CPU clock\")\n #endif\n \n+#ifndef CLOCK_THREAD_CPUTIME_ID\n+# define CLOCK_THREAD_CPUTIME_ID -1\n+#endif\n+CND(CLOCK_THREAD_CPUTIME_ID, \"Thread CPU clock\")\n+\n #if defined(__APPLE__)\n-/* There's no clock_gettime or clock_id's on Darwin */\n+/* There's no clock_gettime or clock_id's on Darwin, generate a dummy value */\n # define CLOCK_RT_Ada \"-1\"\n \n-#elif defined(FreeBSD) || defined(_AIX)\n-/* On these platforms use system provided monotonic clock */\n+#elif defined(FreeBSD) || (defined(_AIX) && defined(_AIXVERSION_530))\n+/** On these platforms use system provided monotonic clock instead of\n+ ** the default CLOCK_REALTIME. We then need to set up cond var attributes\n+ ** appropriately (see thread.c).\n+ **/\n # define CLOCK_RT_Ada \"CLOCK_MONOTONIC\"\n+# define NEED_PTHREAD_CONDATTR_SETCLOCK\n \n #elif defined(CLOCK_REALTIME)\n /* By default use CLOCK_REALTIME */\n@@ -1377,11 +1386,6 @@ CND(CLOCK_SGI_CYCLE, \"SGI CPU clock\")\n CNS(CLOCK_RT_Ada, \"\")\n #endif\n \n-#ifndef CLOCK_THREAD_CPUTIME_ID\n-# define CLOCK_THREAD_CPUTIME_ID -1\n-#endif\n-CND(CLOCK_THREAD_CPUTIME_ID, \"Thread CPU clock\")\n-\n #if defined (__APPLE__) || defined (__linux__) || defined (DUMMY)\n /*\n "}, {"sha": "780a916bc2d400c3c9206fdcf2a84b9bedc9b449", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b", "patch": "@@ -1485,9 +1485,19 @@ package body Sem_Ch6 is\n          --  extended_return_statement.\n \n          if Returns_Object then\n-            Error_Msg_N\n-              (\"extended_return_statement cannot return value; \" &\n-               \"use `\"\"RETURN;\"\"`\", N);\n+            if Nkind (N) = N_Extended_Return_Statement then\n+               Error_Msg_N\n+                 (\"extended return statements cannot be nested; use `RETURN;`\",\n+                  N);\n+\n+            --  Case of a simple return statement with a value inside extended\n+            --  return statement.\n+\n+            else\n+               Error_Msg_N\n+                 (\"return nested in extended return statement cannot return \" &\n+                  \"value; use `RETURN;`\", N);\n+            end if;\n          end if;\n \n       else"}, {"sha": "35c4eeebda0ba01bb304c9518daa30200680fc1a", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b", "patch": "@@ -924,8 +924,13 @@ package body Sem_Ch9 is\n             UBR : Node_Id;\n \n          begin\n+\n+            --  No bounds checking if the type is generic or if previous error.\n+            --  In an instance the check is dynamic.\n+\n             if Is_Generic_Type (Etype (D_Sdef))\n               or else In_Instance\n+              or else Error_Posted (D_Sdef)\n             then\n                goto Skip_LB;\n \n@@ -951,6 +956,7 @@ package body Sem_Ch9 is\n             <<Skip_LB>>\n             if Is_Generic_Type (Etype (D_Sdef))\n               or else In_Instance\n+              or else Error_Posted (D_Sdef)\n             then\n                goto Skip_UB;\n "}, {"sha": "a55accefef0ed4b7d137f3ea432e9d334cfb35e7", "filename": "gcc/ada/thread.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fthread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b/gcc%2Fada%2Fthread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fthread.c?ref=d0dcb2b1b9f1af8bb9be47c701c3d88f7513008b", "patch": "@@ -2,7 +2,7 @@\n  *                                                                          *\n  *                         GNAT COMPILER COMPONENTS                         *\n  *                                                                          *\n- *                               T H R E A D                                *\n+ *                              P T H R E A D                               *\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n@@ -31,20 +31,27 @@\n \n /*  This file provides utility functions to access the threads API          */\n \n-#include <pthread.h>\n-#include <time.h>\n #include \"s-oscons.h\"\n \n+#ifdef NEED_PTHREAD_CONDATTR_SETCLOCK\n+# include <pthread.h>\n+# include <time.h>\n+\n int\n __gnat_pthread_condattr_setup(pthread_condattr_t *attr) {\n /*\n  * If using a clock other than CLOCK_REALTIME for the Ada Monotonic_Clock,\n  * the corresponding clock id must be set for condition variables.\n- * There are no clock_id's on Darwin.\n  */\n-#if defined(__APPLE__) || ((CLOCK_RT_Ada) == (CLOCK_REALTIME))\n-  return 0;\n-#else\n   return pthread_condattr_setclock (attr, CLOCK_RT_Ada);\n-#endif\n }\n+\n+#else\n+\n+int\n+__gnat_pthread_condattr_setup (void *attr) {\n+  /* Dummy version for other platforms, which may or may not have pthread.h */\n+  return 0;\n+}\n+\n+#endif"}]}