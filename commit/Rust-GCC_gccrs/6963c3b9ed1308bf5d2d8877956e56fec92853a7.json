{"sha": "6963c3b9ed1308bf5d2d8877956e56fec92853a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2M2MzYjllZDEzMDhiZjVkMmQ4ODc3OTU2ZTU2ZmVjOTI4NTNhNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-30T15:00:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-30T23:25:46Z"}, "message": "libstdc++: Improve Doxygen documentation groups [PR 101258]\n\nThis defines some new Doxygen groups for C++17 variable templates and\nfor the contents of <experimental/type_traits>. By documenting the group\nas a whole and adding each template to a group we don't need to document\nthem individually.\n\nAlso mark more internals with \"@cond undocumented\" so that Doxygen\nignores them by default. Also make Doxygen process <experimental/simd>.\n\nFor some reason, many of the class templates in <type_traits> do not\nappear in the \"Metaprogramming\" group. For example, add_cv,\nremove_extent, and all the is_xxx_constructible and is_xxx_assignable\ntraits. For some reason, Doxygen doesn't include them in the group,\ndespite doing it correctly for other traits in the same header.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101258\n\t* doc/doxygen/user.cfg.in (INPUT): Add <experimental/simd>.\n\t(COLS_IN_ALPHA_INDEX): Remove obsolete tag.\n\t(PREDEFINED): Add/fix some more macros that need to be expanded.\n\t* include/bits/random.h: Stop Doxygen from documenting internal\n\timplementation details.\n\t* include/bits/random.tcc: Likewise.\n\t* include/bits/this_thread_sleep.h: Fix @file name.\n\t* include/experimental/bits/simd.h: Add to Doxygen group. Do not\n\tdocument internal implementation details.\n\t* include/experimental/bits/simd_detail.h: Do not document\n\tinternal implementation details.\n\t* include/experimental/simd: Define Doxygen groups.\n\t* include/experimental/type_traits: Improve documentation for\n\tthe header file. Define groups. Use @since commands.\n\t* include/std/scoped_allocator (scoped_allocator_adaptor): Move\n\tdeclaration before undocumented region.\n\t* include/std/type_traits (true_type, false_type): Use using\n\tdeclaration instead of typedef.\n\t(is_invocable_v, is_nothrow_invocable_v, is_invocable_r_v)\n\t(is_nothrow_invocable_r_v): Move definitions next to other C++17\n\tvariable templates.\n\tDo not document internal implementation details. Move misplaced\n\tgroup-end command. Define group for variable templates.\n\t* include/std/variant: Do not document internal implementation\n\tdetails.\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n\tline number.", "tree": {"sha": "c2533692d2b902331c871fda98243bd1f32ad8c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2533692d2b902331c871fda98243bd1f32ad8c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6963c3b9ed1308bf5d2d8877956e56fec92853a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6963c3b9ed1308bf5d2d8877956e56fec92853a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6963c3b9ed1308bf5d2d8877956e56fec92853a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6963c3b9ed1308bf5d2d8877956e56fec92853a7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36adced3b6b7cae17d7b42e4573bd0f4194b1f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36adced3b6b7cae17d7b42e4573bd0f4194b1f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36adced3b6b7cae17d7b42e4573bd0f4194b1f70"}], "stats": {"total": 343, "additions": 259, "deletions": 84}, "files": [{"sha": "3510c7367896b46e239b4bee9bed3bab2f539d56", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -1013,6 +1013,7 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/experimental/ratio \\\n                          include/experimental/regex \\\n                          include/experimental/set \\\n+                         include/experimental/simd \\\n                          include/experimental/string \\\n                          include/experimental/string_view \\\n                          include/experimental/system_error \\\n@@ -1334,13 +1335,6 @@ CLANG_DATABASE_PATH    =\n \n ALPHABETICAL_INDEX     = YES\n \n-# The COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns in\n-# which the alphabetical index list will be split.\n-# Minimum value: 1, maximum value: 20, default value: 5.\n-# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.\n-\n-COLS_IN_ALPHA_INDEX    = 2\n-\n # In case all classes in a project start with a common prefix, all classes will\n # be put under the same header in the alphabetical index. The IGNORE_PREFIX tag\n # can be used to specify a prefix (or a list of prefixes) that should be ignored\n@@ -2415,7 +2409,8 @@ PREDEFINED             = __cplusplus=201703L \\\n                          \"_GLIBCXX_END_NAMESPACE_CXX11= \" \\\n                          \"_GLIBCXX_END_NAMESPACE_LDBL= \" \\\n                          \"_GLIBCXX_TEMPLATE_ARGS=...  \" \\\n-                         _GLIBCXX_DEPRECATED \\\n+                         \"_GLIBCXX_DEPRECATED= \" \\\n+                         \"_GLIBCXX_DEPRECATED_SUGGEST(E)= \" \\\n                          _GLIBCXX_CONSTEXPR=constexpr \\\n                          _GLIBCXX_USE_CONSTEXPR=constexpr \\\n                          \"_GLIBCXX_THROW(E)= \" \\\n@@ -2430,6 +2425,7 @@ PREDEFINED             = __cplusplus=201703L \\\n                          _GLIBCXX_USE_NANOSLEEP \\\n                          __cpp_exceptions \\\n                          __cpp_rtti \\\n+                         __cpp_inline_variables \\\n                          ATOMIC_INT_LOCK_FREE=2 \\\n                          PB_DS_DATA_TRUE_INDICATOR \\\n                          PB_DS_STATIC_ASSERT=// \\\n@@ -2440,11 +2436,16 @@ PREDEFINED             = __cplusplus=201703L \\\n                          __glibcxx_class_requires2=// \\\n                          __glibcxx_class_requires3=// \\\n                          __glibcxx_class_requires4=// \\\n-                         \"__attribute__(X)=\" \\\n+                         \"__attribute__(X)= \" \\\n                          _GLIBCXX14_CONSTEXPR=constexpr \\\n                          _GLIBCXX17_CONSTEXPR=constexpr \\\n                          _GLIBCXX20_CONSTEXPR=constexpr \\\n-                         _GLIBCXX17_DEPRECATED= \\\n+                         \"_GLIBCXX11_DEPRECATED= \" \\\n+                         \"_GLIBCXX11_DEPRECATED_SUGGEST(E)= \" \\\n+                         \"_GLIBCXX17_DEPRECATED= \" \\\n+                         \"_GLIBCXX17_DEPRECATED_SUGGEST(E)= \" \\\n+                         \"_GLIBCXX20_DEPRECATED(E)= \" \\\n+                         \"_GLIBCXX20_DEPRECATED(E)= \" \\\n                          _GLIBCXX17_INLINE=inline\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this"}, {"sha": "9e0359b809276ad24e4a4d848b1edacbdc3d587a", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -60,9 +60,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _RealType\n     generate_canonical(_UniformRandomNumberGenerator& __g);\n \n-  /*\n-   * Implementation-space details.\n-   */\n+  /// @cond undocumented\n+  // Implementation-space details.\n   namespace __detail\n   {\n     template<typename _UIntType, size_t __w,\n@@ -212,6 +211,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       >;\n \n   } // namespace __detail\n+  /// @endcond\n \n   /**\n    * @addtogroup random_generators Random Number Generators"}, {"sha": "6ba263072b042bb10ce1543ca7d6c102736c0647", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -36,9 +36,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  /*\n-   * (Further) implementation-space details.\n-   */\n+  /// @cond undocumented\n+  // (Further) implementation-space details.\n   namespace __detail\n   {\n     // General case for x = (ax + c) mod m -- use Schrage's algorithm\n@@ -90,6 +89,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   } // namespace __detail\n+  /// @endcond\n \n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     constexpr _UIntType"}, {"sha": "bdcd0cdeb77d87f06e3a4ee3336b1af91f0f8d1d", "filename": "libstdc++-v3/include/bits/this_thread_sleep.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fthis_thread_sleep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fthis_thread_sleep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fthis_thread_sleep.h?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file bits/std_thread_sleep.h\n+/** @file bits/this_thread_sleep.h\n  *  This is an internal header file, included by other library headers.\n  *  Do not attempt to use it directly. @headername{thread}\n  */"}, {"sha": "9335ee76deb5b383f77da68a2aef2a071e632741", "filename": "libstdc++-v3/include/experimental/bits/simd.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -45,6 +45,9 @@\n #include <arm_neon.h>\n #endif\n \n+/** @ingroup ts_simd\n+ * @{\n+ */\n /* There are several closely related types, with the following naming\n  * convention:\n  * _Tp: vectorizable (arithmetic) type (or any type)\n@@ -4035,6 +4038,7 @@ template <typename _Tp, typename _Abi, size_t _Np>\n \n // }}}\n \n+/// @cond undocumented\n // _SmartReference {{{\n template <typename _Up, typename _Accessor = _Up,\n \t  typename _ValueType = typename _Up::value_type>\n@@ -4316,6 +4320,7 @@ template <typename _Tp, size_t _Np, typename>\n   struct __deduce_impl : public __deduce_fixed_size_fallback<_Tp, _Np> {};\n \n //}}}1\n+/// @endcond\n \n // simd_mask {{{\n template <typename _Tp, typename _Abi>\n@@ -4663,6 +4668,7 @@ template <typename _Tp, typename _Abi>\n \n // }}}\n \n+/// @cond undocumented\n // __data(simd_mask) {{{\n template <typename _Tp, typename _Ap>\n   _GLIBCXX_SIMD_INTRINSIC constexpr const auto&\n@@ -4675,6 +4681,7 @@ template <typename _Tp, typename _Ap>\n   { return __x._M_data; }\n \n // }}}\n+/// @endcond\n \n // simd_mask reductions [simd_mask.reductions] {{{\n template <typename _Tp, typename _Abi>\n@@ -4817,6 +4824,7 @@ find_last_set(_ExactBool)\n \n // }}}\n \n+/// @cond undocumented\n // _SimdIntOperators{{{1\n template <typename _V, typename _Impl, bool>\n   class _SimdIntOperators {};\n@@ -4937,6 +4945,7 @@ template <typename _V, typename _Impl>\n   };\n \n //}}}1\n+/// @endcond\n \n // simd {{{\n template <typename _Tp, typename _Abi>\n@@ -5212,6 +5221,7 @@ template <typename _Tp, typename _Abi>\n   };\n \n // }}}\n+/// @cond undocumented\n // __data {{{\n template <typename _Tp, typename _Ap>\n   _GLIBCXX_SIMD_INTRINSIC constexpr const auto&\n@@ -5255,7 +5265,9 @@ template <typename _Tp, typename _Ap>\n   operator~(const simd<_Tp, _Ap>& __a)\n   { return {__private_init, _Ap::_SimdImpl::_S_complement(__data(__a))}; }\n } // namespace __float_bitwise_operators }}}\n+/// @endcond\n \n+/// @}\n _GLIBCXX_SIMD_END_NAMESPACE\n \n #endif // __cplusplus >= 201703L"}, {"sha": "ecd059610cd2c924352dfb5b5eab254bc9515135", "filename": "libstdc++-v3/include/experimental/bits/simd_detail.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_detail.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_detail.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_detail.h?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -30,6 +30,7 @@\n #include <cstddef>\n #include <cstdint>\n \n+/// @cond undocumented\n \n #define _GLIBCXX_SIMD_BEGIN_NAMESPACE                                          \\\n   namespace std _GLIBCXX_VISIBILITY(default)                                   \\\n@@ -300,6 +301,8 @@\n #define _GLIBCXX_SIMD_FIX_P2TS_ISSUE66 1\n // }}}\n \n+/// @endcond\n+\n #endif // __cplusplus >= 201703L\n #endif // _GLIBCXX_EXPERIMENTAL_SIMD_DETAIL_H_\n "}, {"sha": "6f867a9d52dfbfcefef86de0c8119ddf42d659d0", "filename": "libstdc++-v3/include/experimental/simd", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsimd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsimd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsimd?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -35,6 +35,23 @@\n \n #if __cplusplus >= 201703L\n \n+/** @defgroup par-ts Parallelism TS\n+ *  @ingroup experimental\n+ *\n+ * Components defined by the _C++ Extensions for Parallelism_\n+ * Technical Specification.\n+ *\n+ * - ISO/IEC TS 19570:2015 C++ Extensions for Parallelism\n+ * - ISO/IEC TS 19570:2018 C++ Extensions for Parallelism, Version 2\n+ */\n+\n+/** @defgroup ts_simd Data parallel extensions\n+ *  @ingroup par-ts\n+ *\n+ *  Data-parallel types library.\n+ *  @since C++17\n+ */\n+/// @ingroup ts_simd\n #define __cpp_lib_experimental_parallel_simd 201803\n \n #pragma GCC diagnostic push"}, {"sha": "b90641905cee2ae7117a808c2f77e3bc6bea4191", "filename": "libstdc++-v3/include/experimental/type_traits", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -24,7 +24,14 @@\n \n /** @file experimental/type_traits\n  *  This is a TS C++ Library header.\n+ *\n+ *  This header defines variable templates for the C++14 type traits.\n+ *\n+ *  Equivalent variable templates are defined in namespace `std` since C++17.\n+ *  @see variable_templates\n+ *\n  *  @ingroup libfund-ts\n+ *  @since C++14\n  */\n \n //\n@@ -49,6 +56,14 @@ namespace experimental\n {\n inline namespace fundamentals_v1\n {\n+/** @defgroup lfts_variable_templates Variable template for type traits\n+ * @ingroup libfund-ts\n+ * @since Library Fundamentals TS v1. C++14.\n+ * @see variable_templates\n+ */\n+/** @ingroup lfts_variable_templates\n+ * @{\n+ */\n #define __cpp_lib_experimental_type_trait_variable_templates 201402\n \n // See C++14 20.10.4.1, primary type categories\n@@ -213,7 +228,7 @@ template <typename _Base, typename _Derived>\n   constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;\n template <typename _From, typename _To>\n   constexpr bool is_convertible_v = is_convertible<_From, _To>::value;\n-\n+/// @}\n \n   // 3.3.2, Other type transformations\n   // invocation_type (still unimplemented)\n@@ -224,14 +239,24 @@ template <typename _From, typename _To>\n \n inline namespace fundamentals_v2\n {\n+/**\n+ * @defgroup lfts_detect Detection idiom\n+ * @ingroup libfund-ts\n+ * @since Library Fundamentals TS v2. C++14.\n+ */\n+/** @ingroup lfts_detect\n+ * @{\n+ */\n #define __cpp_lib_experimental_detect 201505\n \n // [meta.detect]\n \n+/// A metafunction that always yields void, used for detecting valid types.\n template<typename...> using void_t = void;\n \n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wctor-dtor-privacy\"\n+/// @internal\n struct __nonesuchbase {};\n struct nonesuch : private __nonesuchbase\n {\n@@ -272,7 +297,16 @@ template<typename _To, template<typename...> class _Op, typename... _Args>\n template<typename _To, template<typename...> class _Op, typename... _Args>\n   constexpr bool is_detected_convertible_v\n     = is_detected_convertible<_To, _Op, _Args...>::value;\n+/// @}\n \n+/**\n+ * @defgroup lfts_logical Logical operator traits\n+ * @ingroup libfund-ts\n+ * @since Library Fundamentals TS v2. C++14.\n+ */\n+/** @ingroup lfts_logical\n+ * @{\n+ */\n #define __cpp_lib_experimental_logical_traits 201511\n \n template<typename... _Bn>\n@@ -301,6 +335,7 @@ template<typename... _Bn>\n template<typename _Pp>\n   constexpr bool negation_v\n     = negation<_Pp>::value;\n+/// @}\n } // namespace fundamentals_v2\n } // namespace experimental\n "}, {"sha": "34a9c800f45ac4322ce2567afb2155d8cbb04d3b", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -53,6 +53,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n+  template<typename _OuterAlloc, typename... _InnerAllocs>\n+    class scoped_allocator_adaptor;\n+\n   /// @cond undocumented\n \n   template<typename _Alloc>\n@@ -81,15 +84,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __base::_S_outermost(__a.outer_allocator()); }\n     };\n \n-  /// Implementation of the OUTERMOST pseudofunction\n+  // Implementation of the OUTERMOST pseudofunction\n   template<typename _Alloc>\n     inline typename __outermost_type<_Alloc>::type&\n     __outermost(_Alloc& __a)\n     { return __outermost_type<_Alloc>::_S_outermost(__a); }\n \n-  template<typename _OuterAlloc, typename... _InnerAllocs>\n-    class scoped_allocator_adaptor;\n-\n   template<typename...>\n     struct __inner_type_impl;\n "}, {"sha": "cccc6eed7632dc8663829c572d37844d5c41b60b", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 164, "deletions": 61, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -41,6 +41,12 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  template<typename... _Elements>\n+    class tuple;\n+\n+  template<typename _Tp>\n+    class reference_wrapper;\n+\n   /**\n    * @defgroup metaprogramming Metaprogramming\n    * @ingroup utilities\n@@ -49,6 +55,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * including type classification traits, type property inspection traits\n    * and type transformation traits.\n    *\n+   * @since C++11\n+   *\n    * @{\n    */\n \n@@ -72,25 +80,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Tp integral_constant<_Tp, __v>::value;\n \n   /// The type used as a compile-time boolean with true value.\n-  typedef integral_constant<bool, true>     true_type;\n+  using true_type =  integral_constant<bool, true>;\n \n   /// The type used as a compile-time boolean with false value.\n-  typedef integral_constant<bool, false>    false_type;\n+  using false_type = integral_constant<bool, false>;\n \n+  /// @cond undocumented\n+  /// bool_constant for C++11\n   template<bool __v>\n     using __bool_constant = integral_constant<bool, __v>;\n+  /// @endcond\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n # define __cpp_lib_bool_constant 201505\n+  /// Alias template for compile-time boolean constant types.\n+  /// @since C++17\n   template<bool __v>\n     using bool_constant = integral_constant<bool, __v>;\n #endif\n \n-  // Meta programming helper types.\n+  // Metaprogramming helper types.\n \n   template<bool, typename, typename>\n     struct conditional;\n \n+  /// @cond undocumented\n   template <typename _Type>\n     struct __type_identity\n     { using type = _Type; };\n@@ -148,13 +162,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __not_\n     : public __bool_constant<!bool(_Pp::value)>\n     { };\n+  /// @endcond\n \n #if __cplusplus >= 201703L\n \n+  /// @cond undocumented\n   template<typename... _Bn>\n     inline constexpr bool __or_v = __or_<_Bn...>::value;\n   template<typename... _Bn>\n     inline constexpr bool __and_v = __and_<_Bn...>::value;\n+  /// @endcond\n \n #define __cpp_lib_logical_traits 201510\n \n@@ -173,6 +190,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : __not_<_Pp>\n     { };\n \n+  /** @ingroup variable_templates\n+   * @{\n+   */\n   template<typename... _Bn>\n     inline constexpr bool conjunction_v = conjunction<_Bn...>::value;\n \n@@ -181,6 +201,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Pp>\n     inline constexpr bool negation_v = negation<_Pp>::value;\n+  /// @}\n \n #endif // C++17\n \n@@ -191,6 +212,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct is_function;\n   template<typename>\n     struct is_void;\n+  template<typename>\n+    struct remove_cv;\n+  template<typename>\n+    struct is_const;\n+\n+  /// @cond undocumented\n   template<typename>\n     struct __is_array_unknown_bounds;\n \n@@ -223,16 +250,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct __failure_type\n   { };\n \n-  template<typename>\n-    struct remove_cv;\n-\n   // __remove_cv_t (std::remove_cv_t for C++11).\n   template<typename _Tp>\n     using __remove_cv_t = typename remove_cv<_Tp>::type;\n \n-  template<typename>\n-    struct is_const;\n-\n   // Primary type categories.\n \n   template<typename>\n@@ -242,13 +263,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     struct __is_void_helper<void>\n     : public true_type { };\n+  /// @endcond\n \n   /// is_void\n   template<typename _Tp>\n     struct is_void\n     : public __is_void_helper<__remove_cv_t<_Tp>>::type\n     { };\n \n+  /// @cond undocumented\n   template<typename>\n     struct __is_integral_helper\n     : public false_type { };\n@@ -362,13 +385,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_integral_helper<unsigned __GLIBCXX_TYPE_INT_N_3>\n     : public true_type { };\n #endif\n+  /// @endcond\n \n   /// is_integral\n   template<typename _Tp>\n     struct is_integral\n     : public __is_integral_helper<__remove_cv_t<_Tp>>::type\n     { };\n \n+  /// @cond undocumented\n   template<typename>\n     struct __is_floating_point_helper\n     : public false_type { };\n@@ -390,6 +415,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_floating_point_helper<__float128>\n     : public true_type { };\n #endif\n+  /// @endcond\n \n   /// is_floating_point\n   template<typename _Tp>\n@@ -518,6 +544,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   /// __is_nullptr_t (deprecated extension).\n+  /// @deprecated Use `is_null_pointer` instead.\n   template<typename _Tp>\n     struct __is_nullptr_t\n     : public is_null_pointer<_Tp>\n@@ -567,13 +594,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct is_compound\n     : public __not_<is_fundamental<_Tp>>::type { };\n \n+  /// @cond undocumented\n   template<typename _Tp>\n     struct __is_member_pointer_helper\n     : public false_type { };\n \n   template<typename _Tp, typename _Cp>\n     struct __is_member_pointer_helper<_Tp _Cp::*>\n     : public true_type { };\n+  /// @endcond\n \n   /// is_member_pointer\n   template<typename _Tp>\n@@ -584,6 +613,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename, typename>\n     struct is_same;\n \n+  /// @cond undocumented\n   template<typename _Tp, typename... _Types>\n     using __is_one_of = __or_<is_same<_Tp, _Types>...>;\n \n@@ -644,6 +674,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_referenceable<_Tp, __void_t<_Tp&>>\n     : public true_type\n     { };\n+  /// @endcond\n \n   // Type properties.\n \n@@ -674,7 +705,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n-  // is_trivially_copyable\n+  /// is_trivially_copyable\n   template<typename _Tp>\n     struct is_trivially_copyable\n     : public integral_constant<bool, __is_trivially_copyable(_Tp)>\n@@ -692,7 +723,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n-  /// is_pod (deprecated in C++20)\n+  /** is_pod (deprecated in C++20)\n+   * @deprecated Use `is_standard_layout && is_trivial` instead.\n+   */\n   // Could use is_standard_layout && is_trivial instead of the builtin.\n   template<typename _Tp>\n     struct\n@@ -704,7 +737,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n-  /// is_literal_type\n+  /** is_literal_type\n+   * @deprecated Deprecated in C++20. The idea of a literal type isn't useful.\n+   */\n   template<typename _Tp>\n     struct\n     _GLIBCXX17_DEPRECATED\n@@ -730,6 +765,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201402L\n #define __cpp_lib_is_final 201402L\n   /// is_final\n+  /// @since C++14\n   template<typename _Tp>\n     struct is_final\n     : public integral_constant<bool, __is_final(_Tp)>\n@@ -742,6 +778,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public integral_constant<bool, __is_abstract(_Tp)>\n     { };\n \n+  /// @cond undocumented\n   template<typename _Tp,\n \t   bool = is_arithmetic<_Tp>::value>\n     struct __is_signed_helper\n@@ -751,6 +788,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_signed_helper<_Tp, true>\n     : public integral_constant<bool, _Tp(-1) < _Tp(0)>\n     { };\n+  /// @endcond\n \n   /// is_signed\n   template<typename _Tp>\n@@ -764,21 +802,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>\n     { };\n \n-\n-  // Destructible and constructible type properties.\n-\n-  /**\n-   *  @brief  Utility to simplify expressions used in unevaluated operands\n-   *  @ingroup utilities\n-   */\n-\n+  /// @cond undocumented\n   template<typename _Tp, typename _Up = _Tp&&>\n     _Up\n     __declval(int);\n \n   template<typename _Tp>\n     _Tp\n     __declval(long);\n+  /// @endcond\n \n   template<typename _Tp>\n     auto declval() noexcept -> decltype(__declval<_Tp>(0));\n@@ -789,6 +821,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename>\n     struct remove_all_extents;\n \n+  /// @cond undocumented\n   template<typename _Tp>\n     struct __is_array_known_bounds\n     : public integral_constant<bool, (extent<_Tp>::value > 0)>\n@@ -799,6 +832,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>\n     { };\n \n+  // Destructible and constructible type properties.\n+\n   // In N3290 is_destructible does not say anything about function\n   // types and abstract types, see LWG 2049. This implementation\n   // describes function types as non-destructible and all complete\n@@ -840,6 +875,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct __is_destructible_safe<_Tp, false, true>\n     : public true_type { };\n+  /// @endcond\n \n   /// is_destructible\n   template<typename _Tp>\n@@ -850,6 +886,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n+  /// @cond undocumented\n+\n   // is_nothrow_destructible requires that is_destructible is\n   // satisfied as well.  We realize that by mimicing the\n   // implementation of is_destructible but refer to noexcept(expr)\n@@ -891,6 +929,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct __is_nt_destructible_safe<_Tp, false, true>\n     : public true_type { };\n+  /// @endcond\n \n   /// is_nothrow_destructible\n   template<typename _Tp>\n@@ -901,10 +940,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n+  /// @cond undocumented\n   template<typename _Tp, typename... _Args>\n     struct __is_constructible_impl\n     : public __bool_constant<__is_constructible(_Tp, _Args...)>\n     { };\n+  /// @endcond\n \n   /// is_constructible\n   template<typename _Tp, typename... _Args>\n@@ -924,6 +965,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n+  /// @cond undocumented\n   template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_copy_constructible_impl;\n \n@@ -935,6 +977,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_copy_constructible_impl<_Tp, true>\n     : public __is_constructible_impl<_Tp, const _Tp&>\n     { };\n+  /// @endcond\n \n   /// is_copy_constructible\n   template<typename _Tp>\n@@ -945,6 +988,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n+  /// @cond undocumented\n   template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_move_constructible_impl;\n \n@@ -956,6 +1000,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_move_constructible_impl<_Tp, true>\n     : public __is_constructible_impl<_Tp, _Tp&&>\n     { };\n+  /// @endcond\n \n   /// is_move_constructible\n   template<typename _Tp>\n@@ -966,9 +1011,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n+  /// @cond undocumented\n   template<typename _Tp, typename... _Args>\n     using __is_nothrow_constructible_impl\n       = __bool_constant<__is_nothrow_constructible(_Tp, _Args...)>;\n+  /// @endcond\n \n   /// is_nothrow_constructible\n   template<typename _Tp, typename... _Args>\n@@ -988,7 +1035,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n-\n+  /// @cond undocumented\n   template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_nothrow_copy_constructible_impl;\n \n@@ -1000,6 +1047,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_nothrow_copy_constructible_impl<_Tp, true>\n     : public __is_nothrow_constructible_impl<_Tp, const _Tp&>\n     { };\n+  /// @endcond\n \n   /// is_nothrow_copy_constructible\n   template<typename _Tp>\n@@ -1010,6 +1058,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n+  /// @cond undocumented\n   template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_nothrow_move_constructible_impl;\n \n@@ -1021,6 +1070,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_nothrow_move_constructible_impl<_Tp, true>\n     : public __is_nothrow_constructible_impl<_Tp, _Tp&&>\n     { };\n+  /// @endcond\n \n   /// is_nothrow_move_constructible\n   template<typename _Tp>\n@@ -1605,6 +1655,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Sign modifications.\n \n+  /// @cond undocumented\n+\n   // Utility for constructing identically cv-qualified types.\n   template<typename _Unqualified, bool _IsConst, bool _IsVol>\n     struct __cv_selector;\n@@ -1776,6 +1828,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __type\n \t= typename __make_unsigned_selector<char32_t, false, true>::__type;\n     };\n+  /// @endcond\n \n   // Given an integral/enum type, return the corresponding unsigned\n   // integer type.\n@@ -1789,6 +1842,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     struct make_unsigned<bool>;\n \n+  /// @cond undocumented\n \n   // Utility for finding the signed versions of unsigned integral types.\n   template<typename _Tp>\n@@ -1902,6 +1956,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __type\n \t= typename __make_signed_selector<char32_t, false, true>::__type;\n     };\n+  /// @endcond\n \n   // Given an integral/enum type, return the corresponding signed\n   // integer type.\n@@ -1979,7 +2034,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __remove_pointer_helper<_Tp, __remove_cv_t<_Tp>>\n     { };\n \n-  /// add_pointer\n   template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,\n \t\t\t\t      is_void<_Tp>>::value>\n     struct __add_pointer_helper\n@@ -1989,6 +2043,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __add_pointer_helper<_Tp, true>\n     { typedef typename remove_reference<_Tp>::type*     type; };\n \n+  /// add_pointer\n   template<typename _Tp>\n     struct add_pointer\n     : public __add_pointer_helper<_Tp>\n@@ -2082,6 +2137,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <size_t _Len, typename... _Types>\n     const size_t aligned_union<_Len, _Types...>::alignment_value;\n \n+  /// @cond undocumented\n+\n   // Decay trait for arrays and functions, used for perfect forwarding\n   // in make_pair, make_tuple, etc.\n   template<typename _Up,\n@@ -2101,6 +2158,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Up>\n     struct __decay_selector<_Up, false, true>\n     { typedef typename add_pointer<_Up>::type __type; };\n+  /// @endcond\n \n   /// decay\n   template<typename _Tp>\n@@ -2112,12 +2170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __decay_selector<__remove_type>::__type type;\n     };\n \n-  // __decay_t (std::decay_t for C++11).\n-  template<typename _Tp>\n-    using __decay_t = typename decay<_Tp>::type;\n-\n-  template<typename _Tp>\n-    class reference_wrapper;\n+  /// @cond undocumented\n \n   // Helper which adds a reference to a type when given a reference_wrapper\n   template<typename _Tp>\n@@ -2132,12 +2185,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tp& __type;\n     };\n \n+  // __decay_t (std::decay_t for C++11).\n   template<typename _Tp>\n-    using __decay_and_strip = __strip_reference_wrapper<__decay_t<_Tp>>;\n+    using __decay_t = typename decay<_Tp>::type;\n \n+  template<typename _Tp>\n+    using __decay_and_strip = __strip_reference_wrapper<__decay_t<_Tp>>;\n+  /// @endcond\n \n   // Primary template.\n-  /// Define a member typedef @c type only if a boolean constant is true.\n+  /// Define a member typedef `type` only if a boolean constant is true.\n   template<bool, typename _Tp = void>\n     struct enable_if\n     { };\n@@ -2147,13 +2204,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct enable_if<true, _Tp>\n     { typedef _Tp type; };\n \n+  /// @cond undocumented\n+\n   // __enable_if_t (std::enable_if_t for C++11)\n   template<bool _Cond, typename _Tp = void>\n     using __enable_if_t = typename enable_if<_Cond, _Tp>::type;\n \n+  // Helper for SFINAE constraints\n   template<typename... _Cond>\n     using _Require = __enable_if_t<__and_<_Cond...>::value>;\n \n+  // __remove_cvref_t (std::remove_cvref_t for C++11).\n+  template<typename _Tp>\n+    using __remove_cvref_t\n+     = typename remove_cv<typename remove_reference<_Tp>::type>::type;\n+  /// @endcond\n+\n   // Primary template.\n   /// Define a member typedef @c type to one of two argument types.\n   template<bool _Cond, typename _Iftrue, typename _Iffalse>\n@@ -2165,17 +2231,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct conditional<false, _Iftrue, _Iffalse>\n     { typedef _Iffalse type; };\n \n-  // __remove_cvref_t (std::remove_cvref_t for C++11).\n-  template<typename _Tp>\n-    using __remove_cvref_t\n-     = typename remove_cv<typename remove_reference<_Tp>::type>::type;\n-\n   /// common_type\n   template<typename... _Tp>\n     struct common_type;\n \n   // Sfinae-friendly common_type implementation:\n \n+  /// @cond undocumented\n   struct __do_common_type_impl\n   {\n     template<typename _Tp, typename _Up>\n@@ -2278,19 +2340,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct __underlying_type_impl<_Tp, false>\n     { };\n+  /// @endcond\n \n   /// The underlying type of an enum.\n   template<typename _Tp>\n     struct underlying_type\n     : public __underlying_type_impl<_Tp>\n     { };\n \n+  /// @cond undocumented\n   template<typename _Tp>\n     struct __declval_protector\n     {\n       static const bool __stop = false;\n     };\n+  /// @endcond\n \n+  /** Utility to simplify expressions used in unevaluated operands\n+   *  @since C++11\n+   *  @ingroup utilities\n+   */\n   template<typename _Tp>\n     auto declval() noexcept -> decltype(__declval<_Tp>(0))\n     {\n@@ -2307,6 +2376,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define __cpp_lib_result_of_sfinae 201210\n \n+  /// @cond undocumented\n   struct __invoke_memfun_ref { };\n   struct __invoke_memfun_deref { };\n   struct __invoke_memobj_ref { };\n@@ -2490,6 +2560,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Functor, _ArgTypes...\n       >::type\n     { };\n+  /// @endcond\n \n   template<typename _Functor, typename... _ArgTypes>\n     struct result_of<_Functor(_ArgTypes...)>\n@@ -2536,6 +2607,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename...> using void_t = void;\n #endif\n \n+  /// @cond undocumented\n+\n   /// Implementation of the detection idiom (negative case).\n   template<typename _Default, typename _AlwaysVoid,\n \t   template<typename...> class _Op, typename... _Args>\n@@ -2565,8 +2638,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using __detected_or_t\n       = typename __detected_or<_Default, _Op, _Args...>::type;\n \n-  /// @} group metaprogramming\n-\n   /**\n    *  Use SFINAE to determine if the type _Tp has a publicly-accessible\n    *  member type _NTYPE.\n@@ -2587,9 +2658,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <typename _Tp>\n     struct __is_nothrow_swappable;\n \n-  template<typename... _Elements>\n-    class tuple;\n-\n   template<typename>\n     struct __is_tuple_like_impl : false_type\n     { };\n@@ -2603,6 +2671,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_tuple_like\n     : public __is_tuple_like_impl<__remove_cvref_t<_Tp>>::type\n     { };\n+  /// @endcond\n \n   template<typename _Tp>\n     _GLIBCXX20_CONSTEXPR\n@@ -2621,6 +2690,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n     noexcept(__is_nothrow_swappable<_Tp>::value);\n \n+  /// @cond undocumented\n   namespace __swappable_details {\n     using std::swap;\n \n@@ -2670,6 +2740,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_nothrow_swappable\n     : public __is_nothrow_swappable_impl<_Tp>::type\n     { };\n+  /// @endcond\n \n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n #define __cpp_lib_is_swappable 201603\n@@ -2705,6 +2776,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       is_nothrow_swappable<_Tp>::value;\n #endif // __cplusplus >= 201402L\n \n+  /// @cond undocumented\n   namespace __swappable_with_details {\n     using std::swap;\n \n@@ -2764,6 +2836,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef decltype(__test<_Tp&>(0)) type;\n     };\n+  /// @endcond\n \n   /// is_swappable_with\n   template<typename _Tp, typename _Up>\n@@ -2801,6 +2874,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #endif// c++1z or gnu++11\n \n+  /// @cond undocumented\n+\n   // __is_invocable (std::is_invocable for C++11)\n \n   // The primary template is used for invalid INVOKE expressions.\n@@ -2912,6 +2987,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void operator=(__nonesuch const&) = delete;\n   };\n #pragma GCC diagnostic pop\n+  /// @endcond\n \n #if __cplusplus >= 201703L\n # define __cpp_lib_is_invocable 201703\n@@ -2971,6 +3047,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"each argument type must be a complete class or an unbounded array\");\n     };\n \n+  /// @cond undocumented\n   template<typename _Result, typename _Ret, typename = void>\n     struct __is_nt_invocable_impl : false_type { };\n \n@@ -2980,6 +3057,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : __or_<is_void<_Ret>,\n \t    __is_nothrow_convertible<typename _Result::type, _Ret>>\n     { };\n+  /// @endcond\n \n   /// std::is_nothrow_invocable_r\n   template<typename _Ret, typename _Fn, typename... _ArgTypes>\n@@ -2995,29 +3073,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(std::__is_complete_or_unbounded(__type_identity<_Ret>{}),\n \t\"_Ret must be a complete class or an unbounded array\");\n     };\n-\n-  /// std::is_invocable_v\n-  template<typename _Fn, typename... _Args>\n-    inline constexpr bool is_invocable_v = is_invocable<_Fn, _Args...>::value;\n-\n-  /// std::is_nothrow_invocable_v\n-  template<typename _Fn, typename... _Args>\n-    inline constexpr bool is_nothrow_invocable_v\n-      = is_nothrow_invocable<_Fn, _Args...>::value;\n-\n-  /// std::is_invocable_r_v\n-  template<typename _Ret, typename _Fn, typename... _Args>\n-    inline constexpr bool is_invocable_r_v\n-      = is_invocable_r<_Ret, _Fn, _Args...>::value;\n-\n-  /// std::is_nothrow_invocable_r_v\n-  template<typename _Ret, typename _Fn, typename... _Args>\n-    inline constexpr bool is_nothrow_invocable_r_v\n-      = is_nothrow_invocable_r<_Ret, _Fn, _Args...>::value;\n #endif // C++17\n \n #if __cplusplus >= 201703L\n # define __cpp_lib_type_trait_variable_templates 201510L\n+  /**\n+   * @defgroup variable_templates Variable templates for type traits.\n+   * @ingroup metaprogramming\n+   *\n+   * The variable `is_foo_v<T>` is a boolean constant with the same value\n+   * as the type trait `is_foo<T>::value`.\n+   *\n+   * @since C++17\n+   */\n+\n+  /** @ingroup variable_templates\n+   * @{\n+   */\n template <typename _Tp>\n   inline constexpr bool is_void_v = is_void<_Tp>::value;\n template <typename _Tp>\n@@ -3184,6 +3256,18 @@ template <typename _Base, typename _Derived>\n   inline constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;\n template <typename _From, typename _To>\n   inline constexpr bool is_convertible_v = is_convertible<_From, _To>::value;\n+template<typename _Fn, typename... _Args>\n+  inline constexpr bool is_invocable_v = is_invocable<_Fn, _Args...>::value;\n+template<typename _Fn, typename... _Args>\n+  inline constexpr bool is_nothrow_invocable_v\n+    = is_nothrow_invocable<_Fn, _Args...>::value;\n+template<typename _Ret, typename _Fn, typename... _Args>\n+  inline constexpr bool is_invocable_r_v\n+    = is_invocable_r<_Ret, _Fn, _Args...>::value;\n+template<typename _Ret, typename _Fn, typename... _Args>\n+  inline constexpr bool is_nothrow_invocable_r_v\n+    = is_nothrow_invocable_r<_Ret, _Fn, _Args...>::value;\n+/// @}\n \n #ifdef _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP\n # define __cpp_lib_has_unique_object_representations 201606\n@@ -3198,6 +3282,7 @@ template <typename _From, typename _To>\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n+  /// @ingroup variable_templates\n   template<typename _Tp>\n     inline constexpr bool has_unique_object_representations_v\n       = has_unique_object_representations<_Tp>::value;\n@@ -3211,7 +3296,7 @@ template <typename _From, typename _To>\n     : bool_constant<__is_aggregate(remove_cv_t<_Tp>)>\n     { };\n \n-  /// is_aggregate_v\n+  /// @ingroup variable_templates\n   template<typename _Tp>\n     inline constexpr bool is_aggregate_v = is_aggregate<_Tp>::value;\n #endif\n@@ -3280,17 +3365,22 @@ template <typename _From, typename _To>\n     : public __is_array_unknown_bounds<_Tp>\n     { };\n \n+  /// @ingroup variable_templates\n   template<typename _Tp>\n     inline constexpr bool is_bounded_array_v\n       = is_bounded_array<_Tp>::value;\n \n+  /// @ingroup variable_templates\n   template<typename _Tp>\n     inline constexpr bool is_unbounded_array_v\n       = is_unbounded_array<_Tp>::value;\n \n #if __cplusplus > 202002L\n #define __cpp_lib_is_scoped_enum 202011L\n \n+  /// @since C++23\n+  //@{\n+\n   template<typename _Tp>\n     struct is_scoped_enum\n     : false_type\n@@ -3312,6 +3402,9 @@ template <typename _From, typename _To>\n     : bool_constant<!requires(_Tp __t, void(*__f)(int)) { __f(__t); }>\n     { };\n \n+  /**\n+   * @ingroup variable_templates\n+   */\n   template<typename _Tp>\n     inline constexpr bool is_scoped_enum_v = is_scoped_enum<_Tp>::value;\n #endif // C++23\n@@ -3320,11 +3413,14 @@ template <typename _From, typename _To>\n \n #define __cpp_lib_is_constant_evaluated 201811L\n \n+  /// Returns true only when called during constant evaluation.\n   constexpr inline bool\n   is_constant_evaluated() noexcept\n   { return __builtin_is_constant_evaluated(); }\n+  /// @}\n #endif\n \n+  /// @cond undocumented\n   template<typename _From, typename _To>\n     using __copy_cv = typename __match_cv_qualifiers<_From, _To>::__type;\n \n@@ -3378,12 +3474,14 @@ template <typename _From, typename _To>\n     struct __common_ref_impl<_Xp&, _Yp&&>\n     : __common_ref_impl<_Yp&&, _Xp&>\n     { };\n+  /// @endcond\n \n   template<typename _Tp, typename _Up,\n \t   template<typename> class _TQual, template<typename> class _UQual>\n     struct basic_common_reference\n     { };\n \n+  /// @cond undocumented\n   template<typename _Tp>\n     struct __xref\n     { template<typename _Up> using __type = __copy_cv<_Tp, _Up>; };\n@@ -3402,6 +3500,7 @@ template <typename _From, typename _To>\n \t\t\t\t\tremove_cvref_t<_Tp2>,\n \t\t\t\t\t__xref<_Tp1>::template __type,\n \t\t\t\t\t__xref<_Tp2>::template __type>::type;\n+  /// @endcond\n \n   template<typename... _Tp>\n     struct common_reference;\n@@ -3419,6 +3518,7 @@ template <typename _From, typename _To>\n     struct common_reference<_Tp0>\n     { using type = _Tp0; };\n \n+  /// @cond undocumented\n   template<typename _Tp1, typename _Tp2, int _Bullet = 1, typename = void>\n     struct __common_reference_impl\n     : __common_reference_impl<_Tp1, _Tp2, _Bullet + 1>\n@@ -3488,9 +3588,12 @@ template <typename _From, typename _To>\n \t\t\t      void_t<common_reference_t<_Tp1, _Tp2>>>\n     : public common_reference<common_reference_t<_Tp1, _Tp2>, _Rest...>\n     { };\n+  /// @endcond\n \n #endif // C++2a\n \n+  /// @} group metaprogramming\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "a4e038e0ec81c07f09813801b93baa0d01b09b78", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -1723,6 +1723,7 @@ namespace __variant\n       return __detail::__variant::__get<_Np>(std::move(__v));\n     }\n \n+  /// @cond undocumented\n   template<typename _Result_type, typename _Visitor, typename... _Variants>\n     constexpr decltype(auto)\n     __do_visit(_Visitor&& __visitor, _Variants&&... __variants)\n@@ -1734,6 +1735,7 @@ namespace __variant\n       return (*__func_ptr)(std::forward<_Visitor>(__visitor),\n \t\t\t   std::forward<_Variants>(__variants)...);\n     }\n+  /// @endcond\n \n   template<typename _Visitor, typename... _Variants>\n     constexpr __detail::__variant::__visit_result_t<_Visitor, _Variants...>\n@@ -1784,6 +1786,7 @@ namespace __variant\n     }\n #endif\n \n+  /// @cond undocumented\n   template<bool, typename... _Types>\n     struct __variant_hash_call_base_impl\n     {\n@@ -1814,6 +1817,7 @@ namespace __variant\n     using __variant_hash_call_base =\n     __variant_hash_call_base_impl<(__poison_hash<remove_const_t<_Types>>::\n \t\t\t\t   __enable_hash_call &&...), _Types...>;\n+  /// @endcond\n \n   template<typename... _Types>\n     struct hash<variant<_Types...>>"}, {"sha": "3ded306bd5ff3ee193c3653dae615b1cd7f4fafd", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6963c3b9ed1308bf5d2d8877956e56fec92853a7/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=6963c3b9ed1308bf5d2d8877956e56fec92853a7", "patch": "@@ -10,6 +10,6 @@ std::__detail::_Adaptor<std::mt19937, unsigned long> aurng(urng);\n auto x = std::generate_canonical<std::size_t,\n \t\t\tstd::numeric_limits<std::size_t>::digits>(urng);\n \n-// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 167 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 166 }\n \n // { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3350 }"}]}