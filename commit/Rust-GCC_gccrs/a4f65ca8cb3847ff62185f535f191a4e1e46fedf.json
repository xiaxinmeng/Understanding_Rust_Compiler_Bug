{"sha": "a4f65ca8cb3847ff62185f535f191a4e1e46fedf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRmNjVjYThjYjM4NDdmZjYyMTg1ZjUzNWYxOTFhNGUxZTQ2ZmVkZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-09-21T07:27:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-09-21T07:27:54Z"}, "message": "re PR target/82260 ([x86] Unnecessary use of 8-bit registers with -Os.  slightly slower and larger code)\n\n\tPR target/82260\n\t* config/i386/i386.md (*movqi_internal): Replace (=q,q) alternative\n\twith (=Q,Q), (=R,R) and (=r,r) alternatives, only enable the\n\tlatter two for 64-bit, renumber alternatives, for -Os imov (=q,n)\n\talternative always use QI mode, for -Os imov (=R,R) alternative\n\talways use SI mode, for imov (=Q,Q) or (=r,r) alternatives\n\tignore -Os.\n\n\t* gcc.target/i386/pr82260-1.c: New test.\n\t* gcc.target/i386/pr82260-2.c: New test.\n\nFrom-SVN: r253050", "tree": {"sha": "862e490df59f4398ae9cef283d3da6cffe0b45a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/862e490df59f4398ae9cef283d3da6cffe0b45a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4f65ca8cb3847ff62185f535f191a4e1e46fedf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f65ca8cb3847ff62185f535f191a4e1e46fedf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f65ca8cb3847ff62185f535f191a4e1e46fedf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f65ca8cb3847ff62185f535f191a4e1e46fedf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3347cd287bf89aca78ec030763792d86bb47fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3347cd287bf89aca78ec030763792d86bb47fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3347cd287bf89aca78ec030763792d86bb47fbc"}], "stats": {"total": 129, "additions": 106, "deletions": 23}, "files": [{"sha": "849178575d3d840b6ef5a407d07c49040926d62f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f65ca8cb3847ff62185f535f191a4e1e46fedf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f65ca8cb3847ff62185f535f191a4e1e46fedf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4f65ca8cb3847ff62185f535f191a4e1e46fedf", "patch": "@@ -1,3 +1,13 @@\n+2017-09-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82260\n+\t* config/i386/i386.md (*movqi_internal): Replace (=q,q) alternative\n+\twith (=Q,Q), (=R,R) and (=r,r) alternatives, only enable the\n+\tlatter two for 64-bit, renumber alternatives, for -Os imov (=q,n)\n+\talternative always use QI mode, for -Os imov (=R,R) alternative\n+\talways use SI mode, for imov (=Q,Q) or (=r,r) alternatives\n+\tignore -Os.\n+\n 2017-09-20  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "f51e02c7732674df8edb29e0de7cdb1ccd0edd98", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f65ca8cb3847ff62185f535f191a4e1e46fedf/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f65ca8cb3847ff62185f535f191a4e1e46fedf/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a4f65ca8cb3847ff62185f535f191a4e1e46fedf", "patch": "@@ -2571,9 +2571,9 @@\n \n (define_insn \"*movqi_internal\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\"\n-\t\t\t\"=q,q ,q ,r,r ,?r,m ,k,k,r,m,k\")\n+\t\t\t\"=Q,R,r,q,q,r,r ,?r,m ,k,k,r,m,k\")\n \t(match_operand:QI 1 \"general_operand\"\n-\t\t\t\"q ,qn,qm,q,rn,qm,qn,r,k,k,k,m\"))]\n+\t\t\t\"Q ,R,r,n,m,q,rn, m,qn,r,k,k,k,m\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   static char buf[128];\n@@ -2589,17 +2589,17 @@\n     case TYPE_MSKMOV:\n       switch (which_alternative)\n         {\n-\tcase 7:\n+\tcase 9:\n \t  ops = \"kmov%s\\t{%%k1, %%0|%%0, %%k1}\";\n \t  break;\n-\tcase 9:\n+\tcase 11:\n \t  ops = \"kmov%s\\t{%%1, %%k0|%%k0, %%1}\";\n \t  break;\n-\tcase 10:\n-\tcase 11:\n+\tcase 12:\n+\tcase 13:\n \t  gcc_assert (TARGET_AVX512DQ);\n \t  /* FALLTHRU */\n-\tcase 8:\n+\tcase 10:\n \t  ops = \"kmov%s\\t{%%1, %%0|%%0, %%1}\";\n \t  break;\n \tdefault:\n@@ -2619,51 +2619,67 @@\n     }\n }\n   [(set (attr \"isa\")\n-     (if_then_else (eq_attr \"alternative\" \"10,11\")\n-       (const_string \"avx512dq\")\n-       (const_string \"*\")))\n+     (cond [(eq_attr \"alternative\" \"1,2\")\n+\t      (const_string \"x64\")\n+\t    (eq_attr \"alternative\" \"12,13\")\n+\t      (const_string \"avx512dq\")\n+\t   ]\n+\t   (const_string \"*\")))\n    (set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"7,8,9,10,11\")\n+     (cond [(eq_attr \"alternative\" \"9,10,11,12,13\")\n \t      (const_string \"mskmov\")\n-\t    (and (eq_attr \"alternative\" \"5\")\n+\t    (and (eq_attr \"alternative\" \"7\")\n \t\t (not (match_operand:QI 1 \"aligned_operand\")))\n \t      (const_string \"imovx\")\n \t    (match_test \"optimize_function_for_size_p (cfun)\")\n \t      (const_string \"imov\")\n-\t    (and (eq_attr \"alternative\" \"3\")\n+\t    (and (eq_attr \"alternative\" \"5\")\n \t\t (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n \t\t      (not (match_test \"TARGET_QIMODE_MATH\"))))\n \t      (const_string \"imov\")\n-\t    (eq_attr \"alternative\" \"3,5\")\n+\t    (eq_attr \"alternative\" \"5,7\")\n \t      (const_string \"imovx\")\n \t    (and (match_test \"TARGET_MOVX\")\n-\t\t (eq_attr \"alternative\" \"2\"))\n+\t\t (eq_attr \"alternative\" \"4\"))\n \t      (const_string \"imovx\")\n \t   ]\n \t   (const_string \"imov\")))\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"7,8,9\")\n+     (if_then_else (eq_attr \"alternative\" \"9,10,11\")\n        (const_string \"vex\")\n        (const_string \"orig\")))\n    (set (attr \"mode\")\n-      (cond [(eq_attr \"alternative\" \"3,4,5\")\n+      (cond [(eq_attr \"alternative\" \"5,6,7\")\n \t       (const_string \"SI\")\n-\t     (eq_attr \"alternative\" \"6\")\n+\t     (eq_attr \"alternative\" \"8\")\n \t       (const_string \"QI\")\n-\t     (and (eq_attr \"alternative\" \"7,8,9\")\n+\t     (and (eq_attr \"alternative\" \"9,10,11\")\n \t\t  (not (match_test \"TARGET_AVX512DQ\")))\n \t       (const_string \"HI\")\n \t     (eq_attr \"type\" \"imovx\")\n \t       (const_string \"SI\")\n+\t     ;; For -Os, 8-bit immediates are always shorter than 32-bit\n+\t     ;; ones.\n+\t     (and (eq_attr \"type\" \"imov\")\n+\t\t  (and (eq_attr \"alternative\" \"3\")\n+\t\t       (match_test \"optimize_function_for_size_p (cfun)\")))\n+\t       (const_string \"QI\")\n+\t     ;; For -Os, movl where one or both operands are NON_Q_REGS\n+\t     ;; and both are LEGACY_REGS is shorter than movb.\n+\t     ;; Otherwise movb and movl sizes are the same, so decide purely\n+\t     ;; based on speed factors.\n+\t     (and (eq_attr \"type\" \"imov\")\n+\t\t  (and (eq_attr \"alternative\" \"1\")\n+\t\t       (match_test \"optimize_function_for_size_p (cfun)\")))\n+\t       (const_string \"SI\")\n \t     (and (eq_attr \"type\" \"imov\")\n-\t\t  (and (eq_attr \"alternative\" \"0,1\")\n+\t\t  (and (eq_attr \"alternative\" \"0,1,2,3\")\n \t\t       (and (match_test \"TARGET_PARTIAL_REG_DEPENDENCY\")\n-\t\t\t    (and (not (match_test \"optimize_function_for_size_p (cfun)\"))\n-\t\t\t\t (not (match_test \"TARGET_PARTIAL_REG_STALL\"))))))\n+\t\t\t    (not (match_test \"TARGET_PARTIAL_REG_STALL\")))))\n \t       (const_string \"SI\")\n \t     ;; Avoid partial register stalls when not using QImode arithmetic\n \t     (and (eq_attr \"type\" \"imov\")\n-\t\t  (and (eq_attr \"alternative\" \"0,1\")\n+\t\t  (and (eq_attr \"alternative\" \"0,1,2,3\")\n \t\t       (and (match_test \"TARGET_PARTIAL_REG_STALL\")\n \t\t\t    (not (match_test \"TARGET_QIMODE_MATH\")))))\n \t       (const_string \"SI\")"}, {"sha": "4193c3ba6d438f92c19dfd1d863288ec80ffc8cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f65ca8cb3847ff62185f535f191a4e1e46fedf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f65ca8cb3847ff62185f535f191a4e1e46fedf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a4f65ca8cb3847ff62185f535f191a4e1e46fedf", "patch": "@@ -1,3 +1,9 @@\n+2017-09-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82260\n+\t* gcc.target/i386/pr82260-1.c: New test.\n+\t* gcc.target/i386/pr82260-2.c: New test.\n+\n 2017-09-20  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "e9f404d16f265388c8c8209677d687931de1e1d7", "filename": "gcc/testsuite/gcc.target/i386/pr82260-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f65ca8cb3847ff62185f535f191a4e1e46fedf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82260-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f65ca8cb3847ff62185f535f191a4e1e46fedf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82260-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82260-1.c?ref=a4f65ca8cb3847ff62185f535f191a4e1e46fedf", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/82260 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-Os -mtune=generic -masm=att\" } */\n+/* movl %esi, %ecx is shorter than movb %sil, %cl.  While\n+   movl %edx, %ecx is the same size as movb %dl, %cl and\n+   movl %r8d, %ecx is the same size as movb %r8b, %cl, movl\n+   is faster on contemporary CPUs.  */\n+/* { dg-final { scan-assembler-not {\\mmovb\\M} } } */\n+\n+int\n+foo (int x, int c)\n+{\n+  return x >> c;\n+}\n+\n+int\n+bar (int x, int y, int z)\n+{\n+  return x >> z;\n+}\n+\n+int\n+baz (int x, int y, int z, int u, int v)\n+{\n+  return x >> v;\n+}"}, {"sha": "7caccf13e44a6e6101662a061e6b3854aef24e1e", "filename": "gcc/testsuite/gcc.target/i386/pr82260-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f65ca8cb3847ff62185f535f191a4e1e46fedf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82260-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f65ca8cb3847ff62185f535f191a4e1e46fedf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82260-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82260-2.c?ref=a4f65ca8cb3847ff62185f535f191a4e1e46fedf", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/82260 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-Os -mtune=generic -masm=att -mtune-ctrl=^partial_reg_dependency\" } */\n+/* { dg-final { scan-assembler-not {\\mmovb\\t%sil, %cl} } } */\n+/* { dg-final { scan-assembler {\\mmovl\\t%esi, %ecx} } } */\n+/* { dg-final { scan-assembler {\\mmovb\\t%dl, %cl} } } */\n+/* { dg-final { scan-assembler {\\mmovb\\t%r8b, %cl} } } */\n+\n+int\n+foo (int x, int c)\n+{\n+  return x >> c;\n+}\n+\n+int\n+bar (int x, int y, int z)\n+{\n+  return x >> z;\n+}\n+\n+int\n+baz (int x, int y, int z, int u, int v)\n+{\n+  return x >> v;\n+}"}]}