{"sha": "0fb96aa42870c811a3c38feebb1d25786bca30e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZiOTZhYTQyODcwYzgxMWEzYzM4ZmVlYmIxZDI1Nzg2YmNhMzBlMg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-05-09T20:39:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-05-09T20:39:39Z"}, "message": "re PR c/10676 (Using unnamed fields in initializers)\n\n\tPR c/10676\n\t* c-typeck.c (lookup_field): Take a type directly.  Update\n\trecursive calls.\n\t(build_component_ref): Update call to lookup_field.\n\t(set_init_label): Use lookup_field to find initialized field.\n\tHandle returned list of fields like a sequence of designators.\n\ntestsuite:\n\t* gcc.dg/anon-struct-10.c: New test.\n\nFrom-SVN: r159206", "tree": {"sha": "e7b85702c307070dfea9f600d40c327566bda8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7b85702c307070dfea9f600d40c327566bda8aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fb96aa42870c811a3c38feebb1d25786bca30e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb96aa42870c811a3c38feebb1d25786bca30e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb96aa42870c811a3c38feebb1d25786bca30e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb96aa42870c811a3c38feebb1d25786bca30e2/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d7a712a1e3b2e67b5261e8e4b34f3b701f49a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7a712a1e3b2e67b5261e8e4b34f3b701f49a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7a712a1e3b2e67b5261e8e4b34f3b701f49a70"}], "stats": {"total": 115, "additions": 94, "deletions": 21}, "files": [{"sha": "5f792925477cda76f296e4720a0fa8f67eef96f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb96aa42870c811a3c38feebb1d25786bca30e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb96aa42870c811a3c38feebb1d25786bca30e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fb96aa42870c811a3c38feebb1d25786bca30e2", "patch": "@@ -1,3 +1,12 @@\n+2010-05-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/10676\n+\t* c-typeck.c (lookup_field): Take a type directly.  Update\n+\trecursive calls.\n+\t(build_component_ref): Update call to lookup_field.\n+\t(set_init_label): Use lookup_field to find initialized field.\n+\tHandle returned list of fields like a sequence of designators.\n+\n 2010-05-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/44024"}, {"sha": "1bac4fdd8b13c7d932f9b081916555d004858547", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb96aa42870c811a3c38feebb1d25786bca30e2/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb96aa42870c811a3c38feebb1d25786bca30e2/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=0fb96aa42870c811a3c38feebb1d25786bca30e2", "patch": "@@ -1953,7 +1953,7 @@ default_conversion (tree exp)\n   return exp;\n }\n \f\n-/* Look up COMPONENT in a structure or union DECL.\n+/* Look up COMPONENT in a structure or union TYPE.\n \n    If the component name is not found, returns NULL_TREE.  Otherwise,\n    the return value is a TREE_LIST, with each TREE_VALUE a FIELD_DECL\n@@ -1963,9 +1963,8 @@ default_conversion (tree exp)\n    unions, the list steps down the chain to the component.  */\n \n static tree\n-lookup_field (tree decl, tree component)\n+lookup_field (tree type, tree component)\n {\n-  tree type = TREE_TYPE (decl);\n   tree field;\n \n   /* If TYPE_LANG_SPECIFIC is set, then it is a sorted array of pointers\n@@ -1995,7 +1994,7 @@ lookup_field (tree decl, tree component)\n \t\t  if (TREE_CODE (TREE_TYPE (field)) == RECORD_TYPE\n \t\t      || TREE_CODE (TREE_TYPE (field)) == UNION_TYPE)\n \t\t    {\n-\t\t      tree anon = lookup_field (field, component);\n+\t\t      tree anon = lookup_field (TREE_TYPE (field), component);\n \n \t\t      if (anon)\n \t\t\treturn tree_cons (NULL_TREE, field, anon);\n@@ -2031,7 +2030,7 @@ lookup_field (tree decl, tree component)\n \t      && (TREE_CODE (TREE_TYPE (field)) == RECORD_TYPE\n \t\t  || TREE_CODE (TREE_TYPE (field)) == UNION_TYPE))\n \t    {\n-\t      tree anon = lookup_field (field, component);\n+\t      tree anon = lookup_field (TREE_TYPE (field), component);\n \n \t      if (anon)\n \t\treturn tree_cons (NULL_TREE, field, anon);\n@@ -2074,7 +2073,7 @@ build_component_ref (location_t loc, tree datum, tree component)\n \t  return error_mark_node;\n \t}\n \n-      field = lookup_field (datum, component);\n+      field = lookup_field (type, component);\n \n       if (!field)\n \t{\n@@ -6983,7 +6982,7 @@ set_init_index (tree first, tree last,\n void\n set_init_label (tree fieldname, struct obstack * braced_init_obstack)\n {\n-  tree tail;\n+  tree field;\n \n   if (set_designator (0, braced_init_obstack))\n     return;\n@@ -6997,23 +6996,26 @@ set_init_label (tree fieldname, struct obstack * braced_init_obstack)\n       return;\n     }\n \n-  for (tail = TYPE_FIELDS (constructor_type); tail;\n-       tail = TREE_CHAIN (tail))\n-    {\n-      if (DECL_NAME (tail) == fieldname)\n-\tbreak;\n-    }\n+  field = lookup_field (constructor_type, fieldname);\n \n-  if (tail == 0)\n+  if (field == 0)\n     error (\"unknown field %qE specified in initializer\", fieldname);\n   else\n-    {\n-      constructor_fields = tail;\n-      designator_depth++;\n-      designator_erroneous = 0;\n-      if (constructor_range_stack)\n-\tpush_range_stack (NULL_TREE, braced_init_obstack);\n-    }\n+    do\n+      {\n+\tconstructor_fields = TREE_VALUE (field);\n+\tdesignator_depth++;\n+\tdesignator_erroneous = 0;\n+\tif (constructor_range_stack)\n+\t  push_range_stack (NULL_TREE, braced_init_obstack);\n+\tfield = TREE_CHAIN (field);\n+\tif (field)\n+\t  {\n+\t    if (set_designator (0, braced_init_obstack))\n+\t      return;\n+\t  }\n+      }\n+    while (field != NULL_TREE);\n }\n \f\n /* Add a new initializer to the tree of pending initializers.  PURPOSE"}, {"sha": "696d4cc211407f107d75c74b1bcd887c5cca881b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb96aa42870c811a3c38feebb1d25786bca30e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb96aa42870c811a3c38feebb1d25786bca30e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fb96aa42870c811a3c38feebb1d25786bca30e2", "patch": "@@ -1,3 +1,8 @@\n+2010-05-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/10676\n+\t* gcc.dg/anon-struct-10.c: New test.\n+\n 2010-05-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/44024"}, {"sha": "e212317ea3f72f141355faef61b30f85cda8b686", "filename": "gcc/testsuite/gcc.dg/anon-struct-10.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb96aa42870c811a3c38feebb1d25786bca30e2/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb96aa42870c811a3c38feebb1d25786bca30e2/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-10.c?ref=0fb96aa42870c811a3c38feebb1d25786bca30e2", "patch": "@@ -0,0 +1,57 @@\n+/* Test for designated initializers for anonymous structures and\n+   unions.  PR 10676.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+struct s\n+{\n+  int a;\n+  struct\n+  {\n+    int b;\n+    int c;\n+  };\n+  union\n+  {\n+    int d;\n+    struct\n+    {\n+      int e;\n+    };\n+  };\n+  struct\n+  {\n+    struct\n+    {\n+      struct\n+      {\n+\tint f;\n+      };\n+    };\n+  };\n+};\n+\n+struct s x =\n+  {\n+    .e = 5,\n+    .b = 4,\n+    .a = 3,\n+    .f = 7,\n+    .c = 9\n+  };\n+\n+int\n+main (void)\n+{\n+  if (x.a != 3\n+      || x.b != 4\n+      || x.c != 9\n+      || x.d != 5\n+      || x.e != 5\n+      || x.f != 7)\n+    abort ();\n+  exit (0);\n+}"}]}