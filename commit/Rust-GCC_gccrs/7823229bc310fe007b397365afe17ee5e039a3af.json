{"sha": "7823229bc310fe007b397365afe17ee5e039a3af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgyMzIyOWJjMzEwZmUwMDdiMzk3MzY1YWZlMTdlZTVlMDM5YTNhZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2005-09-13T07:15:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-09-13T07:15:01Z"}, "message": "re PR fortran/19269 (transpose(reshape(...)) of character array segfaults.)\n\ngcc/fortran/\n\tPR target/19269\n\t* iresolve.c (gfc_resolve_cshift, gfc_resolve_eoshift)\n\t(gfc_resolve_pack, gfc_resolve_reshape, gfc_resolve_spread)\n\t(gfc_resolve_transpose, gfc_resolve_unpack): Add \"_char\" to the name\n\tfor character-based operations.\n\t(gfc_resolve_pack): Remove ATTRIBUTE_UNUSED from array argument.\n\t(gfc_resolve_unpack): Copy the whole typespec from the vector.\n\t* trans-array.c (gfc_conv_expr_descriptor): In the EXPR_FUNCTION\n\tcase, get the string length from the scalarization state.\n\nlibgfortran/\n\tPR target/19269\n\t* intrinsics/cshift0.c (cshift0): Add an extra size argument.\n\t(cshift0_1, cshift0_2, cshift0_4, cshift0_8): Replace explicit\n\timplementations with...\n\t(DEFINE_CSHIFT): ...this new macro.  Define character versions too.\n\t* intrinsics/eoshift0.c (zeros): Delete.\n\t(eoshift0): Add extra size and filler arguments.  Use memset if no\n\tbound is provided.\n\t(eoshift0_1, eoshift0_2, eoshift0_4, eoshift0_8): Replace explicit\n\timplementations with...\n\t(DEFINE_EOSHIFT): ...this new macro.  Define character versions too.\n\t* intrinsics/eoshift2.c (zeros): Delete.\n\t(eoshift2): Add extra size and filler arguments.  Use memset if no\n\tbound is provided.\n\t(eoshift2_1, eoshift2_2, eoshift2_4, eoshift2_8): Replace explicit\n\timplementations with...\n\t(DEFINE_EOSHIFT): ...this new macro.  Define character versions too.\n\t* intrinsics/pack.c (pack_internal): New static function, reusing\n\tthe contents of pack and adding an extra size argument.  Change\n\t\"mptr\" rather than \"m\" when calculating the array size.\n\t(pack): Redefine as a forwarder to pack_internal.\n\t(pack_s_internal): New static function, reusing the contents of\n\tpack_s and adding an extra size argument.\n\t(pack_s): Redefine as a forwarder to pack_s_internal.\n\t(pack_char, pack_s_char): New functions.\n\t* intrinsics/reshape.c (reshape_internal): New static function,\n\treusing the contents of reshape and adding an extra size argument.\n\t(reshape): Redefine as a forwarder to reshape_internal.\n\t(reshape_char): New function.\n\t* intrinsics/spread.c (spread_internal): New static function,\n\treusing the contents of spread and adding an extra size argument.\n\t(spread): Redefine as a forwarder to spread_internal.\n\t(spread_char): New function.\n\t* intrinsics/transpose.c (transpose_internal): New static function,\n\treusing the contents of transpose and adding an extra size argument.\n\t(transpose): Redefine as a forwarder to transpose_internal.\n\t(transpose_char): New function.\n\t* intrinsics/unpack.c (unpack_internal): New static function, reusing\n\tthe contents of unpack1 and adding extra size and fsize arguments.\n\t(unpack1): Redefine as a forwarder to unpack_internal.\n\t(unpack0): Call unpack_internal instead of unpack1.\n\t(unpack1_char, unpack0_char): New functions.\n\t* m4/cshift1.m4 (cshift1): New static function, reusing the contents\n\tof cshift1_<kind> and adding an extra size argument.\n\t(cshift1_<kind>): Redefine as a forwarder to cshift1.\n\t(cshift1_<kind>_char): New function.\n\t* m4/eoshift1.m4 (zeros): Delete.\n\t(eoshift1): New static function, reusing the contents of\n\teoshift1_<kind> and adding extra size and filler arguments.\n\tFix calculation of hstride.  Use memset if no bound is provided.\n\t(eoshift1_<kind>): Redefine as a forwarder to eoshift1.\n\t(eoshift1_<kind>_char): New function.\n\t* m4/eoshift3.m4 (zeros): Delete.\n\t(eoshift3): New static function, reusing the contents of\n\teoshift3_<kind> and adding extra size and filler arguments.\n\tUse memset if no bound is provided.\n\t(eoshift3_<kind>): Redefine as a forwarder to eoshift3.\n\t(eoshift3_<kind>_char): New function.\n\t* generated/cshift1_4.c, generated/cshift1_8.c,\n\t* generated/eoshift1_4.c, generated/eoshift1_8.c,\n\t* generated/eoshift3_4.c, generated/eoshift3_8.c: Regenerate.\n\nFrom-SVN: r104217", "tree": {"sha": "56a0679488a10ec480d232cfb645992a26c55566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56a0679488a10ec480d232cfb645992a26c55566"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7823229bc310fe007b397365afe17ee5e039a3af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7823229bc310fe007b397365afe17ee5e039a3af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7823229bc310fe007b397365afe17ee5e039a3af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7823229bc310fe007b397365afe17ee5e039a3af/comments", "author": null, "committer": null, "parents": [{"sha": "7f26dfa3797beff7553fa15114d8f5d84429e91b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f26dfa3797beff7553fa15114d8f5d84429e91b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f26dfa3797beff7553fa15114d8f5d84429e91b"}], "stats": {"total": 1896, "additions": 1454, "deletions": 442}, "files": [{"sha": "02f8f3fa456f8e41b16dbee1636c9569016cb911", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -1,3 +1,15 @@\n+2005-09-13  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR target/19269\n+\t* iresolve.c (gfc_resolve_cshift, gfc_resolve_eoshift)\n+\t(gfc_resolve_pack, gfc_resolve_reshape, gfc_resolve_spread)\n+\t(gfc_resolve_transpose, gfc_resolve_unpack): Add \"_char\" to the name\n+\tfor character-based operations.\n+\t(gfc_resolve_pack): Remove ATTRIBUTE_UNUSED from array argument.\n+\t(gfc_resolve_unpack): Copy the whole typespec from the vector.\n+\t* trans-array.c (gfc_conv_expr_descriptor): In the EXPR_FUNCTION\n+\tcase, get the string length from the scalarization state.\n+\n 2005-09-14  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* Make-lang.in: Change targets prefixes from f95 to fortran."}, {"sha": "ed043a6b45132410fc75ab350021b209583246c5", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -403,7 +403,8 @@ gfc_resolve_cshift (gfc_expr * f, gfc_expr * array,\n \tgfc_convert_type_warn (dim, &shift->ts, 2, 0);\n     }\n   f->value.function.name =\n-    gfc_get_string (PREFIX(\"cshift%d_%d\"), n, shift->ts.kind);\n+    gfc_get_string (PREFIX(\"cshift%d_%d%s\"), n, shift->ts.kind,\n+\t\t    array->ts.type == BT_CHARACTER ? \"_char\" : \"\");\n }\n \n \n@@ -503,7 +504,8 @@ gfc_resolve_eoshift (gfc_expr * f, gfc_expr * array,\n     }\n \n   f->value.function.name =\n-    gfc_get_string (PREFIX(\"eoshift%d_%d\"), n, shift->ts.kind);\n+    gfc_get_string (PREFIX(\"eoshift%d_%d%s\"), n, shift->ts.kind,\n+\t\t    array->ts.type == BT_CHARACTER ? \"_char\" : \"\");\n }\n \n \n@@ -1083,16 +1085,16 @@ gfc_resolve_not (gfc_expr * f, gfc_expr * i)\n \n \n void\n-gfc_resolve_pack (gfc_expr * f,\n-                  gfc_expr * array ATTRIBUTE_UNUSED,\n-\t\t  gfc_expr * mask,\n+gfc_resolve_pack (gfc_expr * f, gfc_expr * array, gfc_expr * mask,\n \t\t  gfc_expr * vector ATTRIBUTE_UNUSED)\n {\n   f->ts = array->ts;\n   f->rank = 1;\n \n   if (mask->rank != 0)\n-    f->value.function.name = PREFIX(\"pack\");\n+    f->value.function.name = (array->ts.type == BT_CHARACTER\n+\t\t\t      ? PREFIX(\"pack_char\")\n+\t\t\t      : PREFIX(\"pack\"));\n   else\n     {\n       /* We convert mask to default logical only in the scalar case.\n@@ -1107,7 +1109,9 @@ gfc_resolve_pack (gfc_expr * f,\n \t  gfc_convert_type (mask, &ts, 2);\n \t}\n \n-      f->value.function.name = PREFIX(\"pack_s\");\n+      f->value.function.name = (array->ts.type == BT_CHARACTER\n+\t\t\t\t? PREFIX(\"pack_s_char\")\n+\t\t\t\t: PREFIX(\"pack_s\"));\n     }\n }\n \n@@ -1214,7 +1218,9 @@ gfc_resolve_reshape (gfc_expr * f, gfc_expr * source, gfc_expr * shape,\n       break;\n \n     default:\n-      f->value.function.name = PREFIX(\"reshape\");\n+      f->value.function.name = (source->ts.type == BT_CHARACTER\n+\t\t\t\t? PREFIX(\"reshape_char\")\n+\t\t\t\t: PREFIX(\"reshape\"));\n       break;\n     }\n \n@@ -1362,7 +1368,9 @@ gfc_resolve_spread (gfc_expr * f, gfc_expr * source,\n {\n   f->ts = source->ts;\n   f->rank = source->rank + 1;\n-  f->value.function.name = PREFIX(\"spread\");\n+  f->value.function.name = (source->ts.type == BT_CHARACTER\n+\t\t\t    ? PREFIX(\"spread_char\")\n+\t\t\t    : PREFIX(\"spread\"));\n \n   gfc_resolve_dim_arg (dim);\n   gfc_resolve_index (ncopies, 1);\n@@ -1542,7 +1550,10 @@ gfc_resolve_transpose (gfc_expr * f, gfc_expr * matrix)\n       break;\n \n     default:\n-      f->value.function.name = PREFIX(\"transpose\");\n+      f->value.function.name = (matrix->ts.type == BT_CHARACTER\n+\t\t\t\t? PREFIX(\"transpose_char\")\n+\t\t\t\t: PREFIX(\"transpose\"));\n+      break;\n     }\n }\n \n@@ -1601,12 +1612,12 @@ void\n gfc_resolve_unpack (gfc_expr * f, gfc_expr * vector, gfc_expr * mask,\n \t\t    gfc_expr * field ATTRIBUTE_UNUSED)\n {\n-  f->ts.type = vector->ts.type;\n-  f->ts.kind = vector->ts.kind;\n+  f->ts = vector->ts;\n   f->rank = mask->rank;\n \n   f->value.function.name =\n-    gfc_get_string (PREFIX(\"unpack%d\"), field->rank > 0 ? 1 : 0);\n+    gfc_get_string (PREFIX(\"unpack%d%s\"), field->rank > 0 ? 1 : 0,\n+\t\t    vector->ts.type == BT_CHARACTER ? \"_char\" : \"\");\n }\n \n "}, {"sha": "a7a1c558d0eab24c6aea3455dd354d363bf5f3fb", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -3883,9 +3883,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n   else if (expr->expr_type == EXPR_FUNCTION)\n     {\n       desc = info->descriptor;\n-\n-      if (expr->ts.type == BT_CHARACTER)\n-\tse->string_length = expr->symtree->n.sym->ts.cl->backend_decl;\n+      se->string_length = ss->string_length;\n     }\n   else\n     {"}, {"sha": "a909f3023453ba650b0a19b2f18382034eb3df55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -1,3 +1,15 @@\n+2005-09-13  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR target/19269\n+\t* gfortran.dg/char_associated_1.f90, gfortran.dg/char_cshift_1.f90,\n+\t* gfortran.dg/char_cshift_2.f90, gfortran.dg/char_eoshift_1.f90,\n+\t* gfortran.dg/char_eoshift_2.f90, gfortran.dg/char_eoshift_3.f90,\n+\t* gfortran.dg/char_eoshift_4.f90, gfortran.dg/char_pack_1.f90,\n+\t* gfortran.dg/char_pack_2.f90, gfortran.dg/char_reshape_1.f90,\n+\t* gfortran.dg/char_spread_1.f90, gfortran.dg/char_transpoe_1.f90,\n+\t* gfortran.dg/char_unpack_1.f90, gfortran.dg/char_unpack_2.f90: New\n+\ttests.\n+\n 2005-09-12  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/23841"}, {"sha": "f38f27331da66665929648e36256226b53d1fd68", "filename": "gcc/testsuite/gfortran.dg/char_associated_1.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_associated_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_associated_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_associated_1.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,8 @@\n+! Check that associated works correctly for character arrays.\n+! { dg-do run }\n+program main\n+  character (len = 5), dimension (:), pointer :: ptr\n+  character (len = 5), dimension (2), target :: a = (/ 'abcde', 'fghij' /)\n+  ptr => a\n+  if (.not. associated (ptr, a)) call abort\n+end program main"}, {"sha": "7ba61e7095be418dea90bc34a905e3753dc78531", "filename": "gcc/testsuite/gfortran.dg/char_cshift_1.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cshift_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cshift_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cshift_1.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,40 @@\n+! Test cshift0 for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 2, n2 = 3, n3 = 4, slen = 3\n+  character (len = slen), dimension (n1, n2, n3) :: a\n+  integer (kind = 1) :: shift1 = 3\n+  integer (kind = 2) :: shift2 = 4\n+  integer (kind = 4) :: shift3 = 5\n+  integer (kind = 8) :: shift4 = 6\n+  integer :: i1, i2, i3\n+\n+  do i3 = 1, n3\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        a (i1, i2, i3) = 'ab'(i1:i1) // 'cde'(i2:i2) // 'fghi'(i3:i3)\n+      end do\n+    end do\n+  end do\n+\n+  call test (cshift (a, shift1, 1), int (shift1), 0, 0)\n+  call test (cshift (a, shift2, 2), 0, int (shift2), 0)\n+  call test (cshift (a, shift3, 3), 0, 0, int (shift3))\n+  call test (cshift (a, shift4, 3), 0, 0, int (shift4))\n+contains\n+  subroutine test (b, d1, d2, d3)\n+    character (len = slen), dimension (n1, n2, n3) :: b\n+    integer :: d1, d2, d3\n+\n+    do i3 = 1, n3\n+      do i2 = 1, n2\n+        do i1 = 1, n1\n+          if (b (i1, i2, i3) .ne. a (mod (d1 + i1 - 1, n1) + 1, &\n+                                     mod (d2 + i2 - 1, n2) + 1, &\n+                                     mod (d3 + i3 - 1, n3) + 1)) call abort\n+        end do\n+      end do\n+    end do\n+  end subroutine test\n+end program main"}, {"sha": "89d452f713e979560882987fc4e01f47e7d50fa8", "filename": "gcc/testsuite/gfortran.dg/char_cshift_2.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cshift_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cshift_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cshift_2.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,45 @@\n+! Test cshift1 for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 2, n2 = 3, n3 = 4, slen = 3\n+  character (len = slen), dimension (n1, n2, n3) :: a\n+  integer (kind = 1), dimension (2, 4) :: shift1\n+  integer (kind = 2), dimension (2, 4) :: shift2\n+  integer (kind = 4), dimension (2, 4) :: shift3\n+  integer (kind = 8), dimension (2, 4) :: shift4\n+  integer :: i1, i2, i3\n+\n+  do i3 = 1, n3\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        a (i1, i2, i3) = 'ab'(i1:i1) // 'cde'(i2:i2) // 'fghi'(i3:i3)\n+      end do\n+    end do\n+  end do\n+\n+  shift1 (1, :) = (/ 4, 11, 19, 20 /)\n+  shift1 (2, :) = (/ 55, 5, 1, 2 /)\n+  shift2 = shift1\n+  shift3 = shift1\n+  shift4 = shift1\n+\n+  call test (cshift (a, shift1, 2))\n+  call test (cshift (a, shift2, 2))\n+  call test (cshift (a, shift3, 2))\n+  call test (cshift (a, shift4, 2))\n+contains\n+  subroutine test (b)\n+    character (len = slen), dimension (n1, n2, n3) :: b\n+    integer :: i2p\n+\n+    do i3 = 1, n3\n+      do i2 = 1, n2\n+        do i1 = 1, n1\n+          i2p = mod (shift1 (i1, i3) + i2 - 1, n2) + 1\n+          if (b (i1, i2, i3) .ne. a (i1, i2p, i3)) call abort\n+        end do\n+      end do\n+    end do\n+  end subroutine test\n+end program main"}, {"sha": "ba51fa13193891f121acde34e6ace149f4ef5254", "filename": "gcc/testsuite/gfortran.dg/char_eoshift_1.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_1.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,50 @@\n+! Test eoshift0 for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 6, n2 = 5, n3 = 4, slen = 3\n+  character (len = slen), dimension (n1, n2, n3) :: a\n+  character (len = slen) :: filler\n+  integer (kind = 1) :: shift1 = 4\n+  integer (kind = 2) :: shift2 = 2\n+  integer (kind = 4) :: shift3 = 3\n+  integer (kind = 8) :: shift4 = 1\n+  integer :: i1, i2, i3\n+\n+  do i3 = 1, n3\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        a (i1, i2, i3) = 'abcdef'(i1:i1) // 'ghijk'(i2:i2) // 'lmno'(i3:i3)\n+      end do\n+    end do\n+  end do\n+\n+  call test (eoshift (a, shift1, 'foo', 1), int (shift1), 0, 0, 'foo')\n+  call test (eoshift (a, shift2, 'foo', 2), 0, int (shift2), 0, 'foo')\n+  call test (eoshift (a, shift3, 'foo', 2), 0, int (shift3), 0, 'foo')\n+  call test (eoshift (a, shift4, 'foo', 3), 0, 0, int (shift4), 'foo')\n+\n+  filler = ''\n+  call test (eoshift (a, shift1, dim = 1), int (shift1), 0, 0, filler)\n+  call test (eoshift (a, shift2, dim = 2), 0, int (shift2), 0, filler)\n+  call test (eoshift (a, shift3, dim = 2), 0, int (shift3), 0, filler)\n+  call test (eoshift (a, shift4, dim = 3), 0, 0, int (shift4), filler)\n+contains\n+  subroutine test (b, d1, d2, d3, filler)\n+    character (len = slen), dimension (n1, n2, n3) :: b\n+    character (len = slen) :: filler\n+    integer :: d1, d2, d3\n+\n+    do i3 = 1, n3\n+      do i2 = 1, n2\n+        do i1 = 1, n1\n+          if (i1 + d1 .gt. n1 .or. i2 + d2 .gt. n2 .or. i3 + d3 .gt. n3) then\n+            if (b (i1, i2, i3) .ne. filler) call abort\n+          else\n+            if (b (i1, i2, i3) .ne. a (i1 + d1, i2 + d2, i3 + d3)) call abort\n+          end if\n+        end do\n+      end do\n+    end do\n+  end subroutine test\n+end program main"}, {"sha": "bdb654c77cec89157134825df4c55bacbd7bc33e", "filename": "gcc/testsuite/gfortran.dg/char_eoshift_2.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_2.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,57 @@\n+! Test eoshift1 for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 2, n2 = 5, n3 = 4, slen = 3\n+  character (len = slen), dimension (n1, n2, n3) :: a\n+  character (len = slen) :: filler\n+  integer (kind = 1), dimension (n1, n3) :: shift1\n+  integer (kind = 2), dimension (n1, n3) :: shift2\n+  integer (kind = 4), dimension (n1, n3) :: shift3\n+  integer (kind = 8), dimension (n1, n3) :: shift4\n+  integer :: i1, i2, i3\n+\n+  shift1 (1, :) = (/ 1, 3, 2, 2 /)\n+  shift1 (2, :) = (/ 2, 1, 1, 3 /)\n+  shift2 = shift1\n+  shift3 = shift1\n+  shift4 = shift1\n+\n+  do i3 = 1, n3\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        a (i1, i2, i3) = 'ab'(i1:i1) // 'cdefg'(i2:i2) // 'hijk'(i3:i3)\n+      end do\n+    end do\n+  end do\n+\n+  call test (eoshift (a, shift1, 'foo', 2), 'foo')\n+  call test (eoshift (a, shift2, 'foo', 2), 'foo')\n+  call test (eoshift (a, shift3, 'foo', 2), 'foo')\n+  call test (eoshift (a, shift4, 'foo', 2), 'foo')\n+\n+  filler = ''\n+  call test (eoshift (a, shift1, dim = 2), filler)\n+  call test (eoshift (a, shift2, dim = 2), filler)\n+  call test (eoshift (a, shift3, dim = 2), filler)\n+  call test (eoshift (a, shift4, dim = 2), filler)\n+contains\n+  subroutine test (b, filler)\n+    character (len = slen), dimension (n1, n2, n3) :: b\n+    character (len = slen) :: filler\n+    integer :: i2p\n+\n+    do i3 = 1, n3\n+      do i2 = 1, n2\n+        do i1 = 1, n1\n+          i2p = i2 + shift1 (i1, i3)\n+          if (i2p .gt. n2) then\n+            if (b (i1, i2, i3) .ne. filler) call abort\n+          else\n+            if (b (i1, i2, i3) .ne. a (i1, i2p, i3)) call abort\n+          end if\n+        end do\n+      end do\n+    end do\n+  end subroutine test\n+end program main"}, {"sha": "62bc04c8004f137f1fa812131b02d312a7c9fd15", "filename": "gcc/testsuite/gfortran.dg/char_eoshift_3.f90", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_3.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,54 @@\n+! Test eoshift2 for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 2, n2 = 5, n3 = 4, slen = 3\n+  character (len = slen), dimension (n1, n2, n3) :: a\n+  character (len = slen), dimension (n1, n3) :: filler\n+  integer (kind = 1) :: shift1 = 4\n+  integer (kind = 2) :: shift2 = 2\n+  integer (kind = 4) :: shift3 = 3\n+  integer (kind = 8) :: shift4 = 1\n+  integer :: i1, i2, i3\n+\n+  filler (1, :) = (/ 'tic', 'tac', 'toe', 'tip' /)\n+  filler (2, :) = (/ 'zzz', 'yyy', 'xxx', 'www' /)\n+\n+  do i3 = 1, n3\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        a (i1, i2, i3) = 'ab'(i1:i1) // 'cdefg'(i2:i2) // 'hijk'(i3:i3)\n+      end do\n+    end do\n+  end do\n+\n+  call test (eoshift (a, shift1, filler, 2), int (shift1), .true.)\n+  call test (eoshift (a, shift2, filler, 2), int (shift2), .true.)\n+  call test (eoshift (a, shift3, filler, 2), int (shift3), .true.)\n+  call test (eoshift (a, shift4, filler, 2), int (shift4), .true.)\n+\n+  call test (eoshift (a, shift1, dim = 2), int (shift1), .false.)\n+  call test (eoshift (a, shift2, dim = 2), int (shift2), .false.)\n+  call test (eoshift (a, shift3, dim = 2), int (shift3), .false.)\n+  call test (eoshift (a, shift4, dim = 2), int (shift4), .false.)\n+contains\n+  subroutine test (b, d2, has_filler)\n+    character (len = slen), dimension (n1, n2, n3) :: b\n+    logical :: has_filler\n+    integer :: d2\n+\n+    do i3 = 1, n3\n+      do i2 = 1, n2\n+        do i1 = 1, n1\n+          if (i2 + d2 .le. n2) then\n+            if (b (i1, i2, i3) .ne. a (i1, i2 + d2, i3)) call abort\n+          else if (has_filler) then\n+            if (b (i1, i2, i3) .ne. filler (i1, i3)) call abort\n+          else\n+            if (b (i1, i2, i3) .ne. '') call abort\n+          end if\n+        end do\n+      end do\n+    end do\n+  end subroutine test\n+end program main"}, {"sha": "b7c8670903453caf55c49c99975fa2c67b689bbc", "filename": "gcc/testsuite/gfortran.dg/char_eoshift_4.f90", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_eoshift_4.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,61 @@\n+! Test eoshift3 for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 2, n2 = 5, n3 = 4, slen = 3\n+  character (len = slen), dimension (n1, n2, n3) :: a\n+  character (len = slen), dimension (n1, n3) :: filler\n+  integer (kind = 1), dimension (n1, n3) :: shift1\n+  integer (kind = 2), dimension (n1, n3) :: shift2\n+  integer (kind = 4), dimension (n1, n3) :: shift3\n+  integer (kind = 8), dimension (n1, n3) :: shift4\n+  integer :: i1, i2, i3\n+\n+  filler (1, :) = (/ 'tic', 'tac', 'toe', 'tip' /)\n+  filler (2, :) = (/ 'zzz', 'yyy', 'xxx', 'www' /)\n+\n+  shift1 (1, :) = (/ 1, 3, 2, 2 /)\n+  shift1 (2, :) = (/ 2, 1, 1, 3 /)\n+  shift2 = shift1\n+  shift3 = shift1\n+  shift4 = shift1\n+\n+  do i3 = 1, n3\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        a (i1, i2, i3) = 'ab'(i1:i1) // 'cdefg'(i2:i2) // 'hijk'(i3:i3)\n+      end do\n+    end do\n+  end do\n+\n+  call test (eoshift (a, shift1, filler, 2), .true.)\n+  call test (eoshift (a, shift2, filler, 2), .true.)\n+  call test (eoshift (a, shift3, filler, 2), .true.)\n+  call test (eoshift (a, shift4, filler, 2), .true.)\n+\n+  call test (eoshift (a, shift1, dim = 2), .false.)\n+  call test (eoshift (a, shift2, dim = 2), .false.)\n+  call test (eoshift (a, shift3, dim = 2), .false.)\n+  call test (eoshift (a, shift4, dim = 2), .false.)\n+contains\n+  subroutine test (b, has_filler)\n+    character (len = slen), dimension (n1, n2, n3) :: b\n+    logical :: has_filler\n+    integer :: i2p\n+\n+    do i3 = 1, n3\n+      do i2 = 1, n2\n+        do i1 = 1, n1\n+          i2p = i2 + shift1 (i1, i3)\n+          if (i2p .le. n2) then\n+            if (b (i1, i2, i3) .ne. a (i1, i2p, i3)) call abort\n+          else if (has_filler) then\n+            if (b (i1, i2, i3) .ne. filler (i1, i3)) call abort\n+          else\n+            if (b (i1, i2, i3) .ne. '') call abort\n+          end if\n+        end do\n+      end do\n+    end do\n+  end subroutine test\n+end program main"}, {"sha": "839f6c6b1a10203c3aa66e7385d7e83e7a8efa36", "filename": "gcc/testsuite/gfortran.dg/char_pack_1.f90", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pack_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pack_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pack_1.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,59 @@\n+! Test (non-scalar) pack for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 3, n2 = 4, nv = 10, slen = 9\n+  character (len = slen), dimension (n1, n2) :: a\n+  character (len = slen), dimension (nv) :: vector\n+  logical, dimension (n1, n2) :: mask\n+  integer :: i1, i2, i\n+\n+  do i2 = 1, n2\n+    do i1 = 1, n1\n+      a (i1, i2) = 'abc'(i1:i1) // 'defg'(i2:i2) // 'cantrip'\n+    end do\n+  end do\n+  mask (1, :) = (/ .true., .false., .true., .true. /)\n+  mask (2, :) = (/ .true., .false., .false., .false. /)\n+  mask (3, :) = (/ .false., .true., .true., .true. /)\n+\n+  do i = 1, nv\n+    vector (i) = 'crespo' // '0123456789'(i:i)\n+  end do\n+\n+  call test1 (pack (a, mask))\n+  call test2 (pack (a, mask, vector))\n+contains\n+  subroutine test1 (b)\n+    character (len = slen), dimension (:) :: b\n+\n+    i = 0\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        if (mask (i1, i2)) then\n+          i = i + 1\n+          if (b (i) .ne. a (i1, i2)) call abort\n+        end if\n+      end do\n+    end do\n+    if (size (b, 1) .ne. i) call abort\n+  end subroutine test1\n+\n+  subroutine test2 (b)\n+    character (len = slen), dimension (:) :: b\n+\n+    if (size (b, 1) .ne. nv) call abort\n+    i = 0\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        if (mask (i1, i2)) then\n+          i = i + 1\n+          if (b (i) .ne. a (i1, i2)) call abort\n+        end if\n+      end do\n+    end do\n+    do i = i + 1, nv\n+      if (b (i) .ne. vector (i)) call abort\n+    end do\n+  end subroutine test2\n+end program main"}, {"sha": "777db53f83c6270e6a4e863ab73f9ee76c2b3ef2", "filename": "gcc/testsuite/gfortran.dg/char_pack_2.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pack_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pack_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pack_2.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,53 @@\n+! Test scalar pack for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 3, n2 = 4, nv = 10, slen = 9\n+  character (len = slen), dimension (n1, n2) :: a\n+  character (len = slen), dimension (nv) :: vector\n+  logical :: mask\n+  integer :: i1, i2, i\n+\n+  do i2 = 1, n2\n+    do i1 = 1, n1\n+      a (i1, i2) = 'abc'(i1:i1) // 'defg'(i2:i2) // 'cantrip'\n+    end do\n+  end do\n+\n+  do i = 1, nv\n+    vector (i) = 'crespo' // '0123456789'(i:i)\n+  end do\n+\n+  mask = .true.\n+  call test1 (pack (a, mask))\n+  call test2 (pack (a, mask, vector))\n+contains\n+  subroutine test1 (b)\n+    character (len = slen), dimension (:) :: b\n+\n+    i = 0\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        i = i + 1\n+        if (b (i) .ne. a (i1, i2)) call abort\n+      end do\n+    end do\n+    if (size (b, 1) .ne. i) call abort\n+  end subroutine test1\n+\n+  subroutine test2 (b)\n+    character (len = slen), dimension (:) :: b\n+\n+    if (size (b, 1) .ne. nv) call abort\n+    i = 0\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        i = i + 1\n+        if (b (i) .ne. a (i1, i2)) call abort\n+      end do\n+    end do\n+    do i = i + 1, nv\n+      if (b (i) .ne. vector (i)) call abort\n+    end do\n+  end subroutine test2\n+end program main"}, {"sha": "b3b624459c95e07e9f953b0ce03251fd70d8464e", "filename": "gcc/testsuite/gfortran.dg/char_reshape_1.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_reshape_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_reshape_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_reshape_1.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,43 @@\n+! Test reshape for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n = 20, slen = 9\n+  character (len = slen), dimension (n) :: a, pad\n+  integer, dimension (3) :: shape, order\n+  integer :: i\n+\n+  do i = 1, n\n+    a (i) = 'abcdefghijklmnopqrstuvwxyz'(i:i+6)\n+    pad (i) = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'(i:i+6)\n+  end do\n+\n+  shape = (/ 4, 6, 5 /)\n+  order = (/ 3, 1, 2 /)\n+  call test (reshape (a, shape, pad, order))\n+contains\n+  subroutine test (b)\n+    character (len = slen), dimension (:, :, :) :: b\n+    integer :: i1, i2, i3, ai, padi\n+\n+    do i = 1, 3\n+      if (size (b, i) .ne. shape (i)) call abort\n+    end do\n+    ai = 0\n+    padi = 0\n+    do i2 = 1, shape (2)\n+      do i1 = 1, shape (1)\n+        do i3 = 1, shape (3)\n+          if (ai .lt. n) then\n+            ai = ai + 1\n+            if (b (i1, i2, i3) .ne. a (ai)) call abort\n+          else\n+            padi = padi + 1\n+            if (padi .gt. n) padi = 1\n+            if (b (i1, i2, i3) .ne. pad (padi)) call abort\n+          end if\n+        end do\n+      end do\n+    end do\n+  end subroutine test\n+end program main"}, {"sha": "0d51f6046d5523c0ac4cffbd39d2519e56cb29ca", "filename": "gcc/testsuite/gfortran.dg/char_spread_1.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_spread_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_spread_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_spread_1.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,32 @@\n+! Test spread for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 3, n2 = 10, n3 = 4, slen = 9\n+  character (len = slen), dimension (n1, n3) :: a\n+  integer :: i1, i2, i3\n+\n+  do i3 = 1, n3\n+    do i1 = 1, n1\n+      a (i1, i3) = 'ab'(i1:i1) // 'cde'(i3:i3) // 'cantrip'\n+    end do\n+  end do\n+\n+  call test (spread (a, 2, n2))\n+contains\n+  subroutine test (b)\n+    character (len = slen), dimension (:, :, :) :: b\n+\n+    if (size (b, 1) .ne. n1) call abort\n+    if (size (b, 2) .ne. n2) call abort\n+    if (size (b, 3) .ne. n3) call abort\n+\n+    do i3 = 1, n3\n+      do i2 = 1, n2\n+        do i1 = 1, n1\n+          if (b (i1, i2, i3) .ne. a (i1, i3)) call abort\n+        end do\n+      end do\n+    end do\n+  end subroutine test\n+end program main"}, {"sha": "90605d6458de419be4f9a82c30249fc136a8f20e", "filename": "gcc/testsuite/gfortran.dg/char_transpose_1.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_transpose_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_transpose_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_transpose_1.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,29 @@\n+! Test transpose for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 3, n2 = 4, slen = 9\n+  character (len = slen), dimension (n1, n2) :: a\n+  integer :: i1, i2\n+\n+  do i2 = 1, n2\n+    do i1 = 1, n1\n+      a (i1, i2) = 'ab'(i1:i1) // 'cde'(i2:i2) // 'cantrip'\n+    end do\n+  end do\n+\n+  call test (transpose (a))\n+contains\n+  subroutine test (b)\n+    character (len = slen), dimension (:, :) :: b\n+\n+    if (size (b, 1) .ne. n2) call abort\n+    if (size (b, 2) .ne. n1) call abort\n+\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        if (b (i2, i1) .ne. a (i1, i2)) call abort\n+      end do\n+    end do\n+  end subroutine test\n+end program main"}, {"sha": "65dd888a8d8b7d2edb619c26f49f3c89ef7e10f0", "filename": "gcc/testsuite/gfortran.dg/char_unpack_1.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_unpack_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_unpack_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_unpack_1.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,44 @@\n+! Test unpack0 for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 3, n2 = 4, nv = 10, slen = 9\n+  character (len = slen), dimension (n1, n2) :: field\n+  character (len = slen), dimension (nv) :: vector\n+  logical, dimension (n1, n2) :: mask\n+  integer :: i1, i2, i\n+\n+  do i2 = 1, n2\n+    do i1 = 1, n1\n+      field (i1, i2) = 'abc'(i1:i1) // 'defg'(i2:i2) // 'cantrip'\n+    end do\n+  end do\n+  mask (1, :) = (/ .true., .false., .true., .true. /)\n+  mask (2, :) = (/ .true., .false., .false., .false. /)\n+  mask (3, :) = (/ .false., .true., .true., .true. /)\n+\n+  do i = 1, nv\n+    vector (i) = 'crespo' // '0123456789'(i:i)\n+  end do\n+\n+  call test (unpack (vector, mask, field))\n+contains\n+  subroutine test (a)\n+    character (len = slen), dimension (:, :) :: a\n+\n+    if (size (a, 1) .ne. n1) call abort\n+    if (size (a, 2) .ne. n2) call abort\n+\n+    i = 0\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        if (mask (i1, i2)) then\n+          i = i + 1\n+          if (a (i1, i2) .ne. vector (i)) call abort\n+        else\n+          if (a (i1, i2) .ne. field (i1, i2)) call abort\n+        end if\n+      end do\n+    end do\n+  end subroutine test\n+end program main"}, {"sha": "3b2c4a32729cdbcd82ed5466dc83aa6b6ddc552d", "filename": "gcc/testsuite/gfortran.dg/char_unpack_2.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_unpack_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_unpack_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_unpack_2.f90?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -0,0 +1,40 @@\n+! Test unpack1 for character arrays.\n+! { dg-do run }\n+program main\n+  implicit none\n+  integer, parameter :: n1 = 3, n2 = 4, nv = 10, slen = 9\n+  character (len = slen) :: field\n+  character (len = slen), dimension (nv) :: vector\n+  logical, dimension (n1, n2) :: mask\n+  integer :: i1, i2, i\n+\n+  field = 'broadside'\n+  mask (1, :) = (/ .true., .false., .true., .true. /)\n+  mask (2, :) = (/ .true., .false., .false., .false. /)\n+  mask (3, :) = (/ .false., .true., .true., .true. /)\n+\n+  do i = 1, nv\n+    vector (i) = 'crespo' // '0123456789'(i:i)\n+  end do\n+\n+  call test (unpack (vector, mask, field))\n+contains\n+  subroutine test (a)\n+    character (len = slen), dimension (:, :) :: a\n+\n+    if (size (a, 1) .ne. n1) call abort\n+    if (size (a, 2) .ne. n2) call abort\n+\n+    i = 0\n+    do i2 = 1, n2\n+      do i1 = 1, n1\n+        if (mask (i1, i2)) then\n+          i = i + 1\n+          if (a (i1, i2) .ne. vector (i)) call abort\n+        else\n+          if (a (i1, i2) .ne. field) call abort\n+        end if\n+      end do\n+    end do\n+  end subroutine test\n+end program main"}, {"sha": "e025ebc51db347d75cf54ea71b15380153dd64cd", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -1,3 +1,67 @@\n+2005-09-13  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR target/19269\n+\t* intrinsics/cshift0.c (cshift0): Add an extra size argument.\n+\t(cshift0_1, cshift0_2, cshift0_4, cshift0_8): Replace explicit\n+\timplementations with...\n+\t(DEFINE_CSHIFT): ...this new macro.  Define character versions too.\n+\t* intrinsics/eoshift0.c (zeros): Delete.\n+\t(eoshift0): Add extra size and filler arguments.  Use memset if no\n+\tbound is provided.\n+\t(eoshift0_1, eoshift0_2, eoshift0_4, eoshift0_8): Replace explicit\n+\timplementations with...\n+\t(DEFINE_EOSHIFT): ...this new macro.  Define character versions too.\n+\t* intrinsics/eoshift2.c (zeros): Delete.\n+\t(eoshift2): Add extra size and filler arguments.  Use memset if no\n+\tbound is provided.\n+\t(eoshift2_1, eoshift2_2, eoshift2_4, eoshift2_8): Replace explicit\n+\timplementations with...\n+\t(DEFINE_EOSHIFT): ...this new macro.  Define character versions too.\n+\t* intrinsics/pack.c (pack_internal): New static function, reusing\n+\tthe contents of pack and adding an extra size argument.  Change\n+\t\"mptr\" rather than \"m\" when calculating the array size.\n+\t(pack): Redefine as a forwarder to pack_internal.\n+\t(pack_s_internal): New static function, reusing the contents of\n+\tpack_s and adding an extra size argument.\n+\t(pack_s): Redefine as a forwarder to pack_s_internal.\n+\t(pack_char, pack_s_char): New functions.\n+\t* intrinsics/reshape.c (reshape_internal): New static function,\n+\treusing the contents of reshape and adding an extra size argument.\n+\t(reshape): Redefine as a forwarder to reshape_internal.\n+\t(reshape_char): New function.\n+\t* intrinsics/spread.c (spread_internal): New static function,\n+\treusing the contents of spread and adding an extra size argument.\n+\t(spread): Redefine as a forwarder to spread_internal.\n+\t(spread_char): New function.\n+\t* intrinsics/transpose.c (transpose_internal): New static function,\n+\treusing the contents of transpose and adding an extra size argument.\n+\t(transpose): Redefine as a forwarder to transpose_internal.\n+\t(transpose_char): New function.\n+\t* intrinsics/unpack.c (unpack_internal): New static function, reusing\n+\tthe contents of unpack1 and adding extra size and fsize arguments.\n+\t(unpack1): Redefine as a forwarder to unpack_internal.\n+\t(unpack0): Call unpack_internal instead of unpack1.\n+\t(unpack1_char, unpack0_char): New functions.\n+\t* m4/cshift1.m4 (cshift1): New static function, reusing the contents\n+\tof cshift1_<kind> and adding an extra size argument.\n+\t(cshift1_<kind>): Redefine as a forwarder to cshift1.\n+\t(cshift1_<kind>_char): New function.\n+\t* m4/eoshift1.m4 (zeros): Delete.\n+\t(eoshift1): New static function, reusing the contents of\n+\teoshift1_<kind> and adding extra size and filler arguments.\n+\tFix calculation of hstride.  Use memset if no bound is provided.\n+\t(eoshift1_<kind>): Redefine as a forwarder to eoshift1.\n+\t(eoshift1_<kind>_char): New function.\n+\t* m4/eoshift3.m4 (zeros): Delete.\n+\t(eoshift3): New static function, reusing the contents of\n+\teoshift3_<kind> and adding extra size and filler arguments.\n+\tUse memset if no bound is provided.\n+\t(eoshift3_<kind>): Redefine as a forwarder to eoshift3.\n+\t(eoshift3_<kind>_char): New function.\n+\t* generated/cshift1_4.c, generated/cshift1_8.c,\n+\t* generated/eoshift1_4.c, generated/eoshift1_8.c,\n+\t* generated/eoshift3_4.c, generated/eoshift3_8.c: Regenerate.\n+\n 2005-09-11  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/20179"}, {"sha": "1fe0e68139f2efc1ac1b035f355ba6319bc6f712", "filename": "libgfortran/generated/cshift1_4.c", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Fcshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Fcshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_4.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -34,15 +34,9 @@ Boston, MA 02110-1301, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-void cshift1_4 (gfc_array_char * ret,\n-\t\t\t   const gfc_array_char * array,\n-\t\t\t   const gfc_array_i4 * h, const GFC_INTEGER_4 * pwhich);\n-export_proto(cshift1_4);\n-\n-void\n-cshift1_4 (gfc_array_char * ret,\n-\t\t      const gfc_array_char * array,\n-\t\t      const gfc_array_i4 * h, const GFC_INTEGER_4 * pwhich)\n+static void\n+cshift1 (gfc_array_char * ret, const gfc_array_char * array,\n+\t const gfc_array_i4 * h, const GFC_INTEGER_4 * pwhich, index_type size)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -64,7 +58,6 @@ cshift1_4 (gfc_array_char * ret,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n   int which;\n@@ -78,8 +71,6 @@ cshift1_4 (gfc_array_char * ret,\n   if (which < 0 || (which + 1) > GFC_DESCRIPTOR_RANK (array))\n     runtime_error (\"Argument 'DIM' is out of range in call to 'CSHIFT'\");\n \n-  size = GFC_DESCRIPTOR_SIZE (ret);\n-\n   if (ret->data == NULL)\n     {\n       int i;\n@@ -101,7 +92,6 @@ cshift1_4 (gfc_array_char * ret,\n \n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n \n   /* Initialized for avoiding compiler warnings.  */\n@@ -201,3 +191,31 @@ cshift1_4 (gfc_array_char * ret,\n         }\n     }\n }\n+\n+void cshift1_4 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t   const gfc_array_i4 *, const GFC_INTEGER_4 *);\n+export_proto(cshift1_4);\n+\n+void\n+cshift1_4 (gfc_array_char * ret,\n+\t\t      const gfc_array_char * array,\n+\t\t      const gfc_array_i4 * h, const GFC_INTEGER_4 * pwhich)\n+{\n+  cshift1 (ret, array, h, pwhich, GFC_DESCRIPTOR_SIZE (array));\n+}\n+\n+void cshift1_4_char (gfc_array_char * ret, GFC_INTEGER_4,\n+\t\t\t\t  const gfc_array_char * array,\n+\t\t\t\t  const gfc_array_i4 * h, const GFC_INTEGER_4 * pwhich,\n+\t\t\t\t  GFC_INTEGER_4);\n+export_proto(cshift1_4_char);\n+\n+void\n+cshift1_4_char (gfc_array_char * ret,\n+\t\t\t     GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\t\t     const gfc_array_char * array,\n+\t\t\t     const gfc_array_i4 * h, const GFC_INTEGER_4 * pwhich,\n+\t\t\t     GFC_INTEGER_4 array_length)\n+{\n+  cshift1 (ret, array, h, pwhich, array_length);\n+}"}, {"sha": "8b0cb03f1a8659b82764cf937a05fc3962f22e7d", "filename": "libgfortran/generated/cshift1_8.c", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Fcshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Fcshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_8.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -34,15 +34,9 @@ Boston, MA 02110-1301, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-void cshift1_8 (gfc_array_char * ret,\n-\t\t\t   const gfc_array_char * array,\n-\t\t\t   const gfc_array_i8 * h, const GFC_INTEGER_8 * pwhich);\n-export_proto(cshift1_8);\n-\n-void\n-cshift1_8 (gfc_array_char * ret,\n-\t\t      const gfc_array_char * array,\n-\t\t      const gfc_array_i8 * h, const GFC_INTEGER_8 * pwhich)\n+static void\n+cshift1 (gfc_array_char * ret, const gfc_array_char * array,\n+\t const gfc_array_i8 * h, const GFC_INTEGER_8 * pwhich, index_type size)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -64,7 +58,6 @@ cshift1_8 (gfc_array_char * ret,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n   int which;\n@@ -78,8 +71,6 @@ cshift1_8 (gfc_array_char * ret,\n   if (which < 0 || (which + 1) > GFC_DESCRIPTOR_RANK (array))\n     runtime_error (\"Argument 'DIM' is out of range in call to 'CSHIFT'\");\n \n-  size = GFC_DESCRIPTOR_SIZE (ret);\n-\n   if (ret->data == NULL)\n     {\n       int i;\n@@ -101,7 +92,6 @@ cshift1_8 (gfc_array_char * ret,\n \n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n \n   /* Initialized for avoiding compiler warnings.  */\n@@ -201,3 +191,31 @@ cshift1_8 (gfc_array_char * ret,\n         }\n     }\n }\n+\n+void cshift1_8 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t   const gfc_array_i8 *, const GFC_INTEGER_8 *);\n+export_proto(cshift1_8);\n+\n+void\n+cshift1_8 (gfc_array_char * ret,\n+\t\t      const gfc_array_char * array,\n+\t\t      const gfc_array_i8 * h, const GFC_INTEGER_8 * pwhich)\n+{\n+  cshift1 (ret, array, h, pwhich, GFC_DESCRIPTOR_SIZE (array));\n+}\n+\n+void cshift1_8_char (gfc_array_char * ret, GFC_INTEGER_4,\n+\t\t\t\t  const gfc_array_char * array,\n+\t\t\t\t  const gfc_array_i8 * h, const GFC_INTEGER_8 * pwhich,\n+\t\t\t\t  GFC_INTEGER_4);\n+export_proto(cshift1_8_char);\n+\n+void\n+cshift1_8_char (gfc_array_char * ret,\n+\t\t\t     GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\t\t     const gfc_array_char * array,\n+\t\t\t     const gfc_array_i8 * h, const GFC_INTEGER_8 * pwhich,\n+\t\t\t     GFC_INTEGER_4 array_length)\n+{\n+  cshift1 (ret, array, h, pwhich, array_length);\n+}"}, {"sha": "e08042ac37def7ebea58c42dd33cb0a0e95eab8d", "filename": "libgfortran/generated/eoshift1_4.c", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Feoshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Feoshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_4.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -34,20 +34,10 @@ Boston, MA 02110-1301, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-static const char zeros[16] =\n-  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n-\n-extern void eoshift1_4 (gfc_array_char *,\n-\t\t\t\t     const gfc_array_char *,\n-\t\t\t\t     const gfc_array_i4 *, const char *,\n-\t\t\t\t     const GFC_INTEGER_4 *);\n-export_proto(eoshift1_4);\n-\n-void\n-eoshift1_4 (gfc_array_char *ret,\n-\t\t       const gfc_array_char *array,\n-\t\t       const gfc_array_i4 *h, const char *pbound,\n-\t\t       const GFC_INTEGER_4 *pwhich)\n+static void\n+eoshift1 (gfc_array_char *ret, const gfc_array_char *array, const gfc_array_i4 *h,\n+\t  const char *pbound, const GFC_INTEGER_4 *pwhich, index_type size,\n+\t  char filler)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -69,7 +59,6 @@ eoshift1_4 (gfc_array_char *ret,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n   int which;\n@@ -87,14 +76,8 @@ eoshift1_4 (gfc_array_char *ret,\n   else\n     which = 0;\n \n-  if (!pbound)\n-    pbound = zeros;\n-\n-  size = GFC_DESCRIPTOR_SIZE (ret);\n-\n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n \n   if (ret->data == NULL)\n     {\n@@ -135,7 +118,7 @@ eoshift1_4 (gfc_array_char *ret,\n           rstride[n] = ret->dim[dim].stride * size;\n           sstride[n] = array->dim[dim].stride * size;\n \n-          hstride[n] = h->dim[n].stride * size;\n+          hstride[n] = h->dim[n].stride;\n           n++;\n         }\n     }\n@@ -186,11 +169,18 @@ eoshift1_4 (gfc_array_char *ret,\n         dest = rptr;\n       n = delta;\n \n-      while (n--)\n-        {\n-          memcpy (dest, pbound, size);\n-          dest += roffset;\n-        }\n+      if (pbound)\n+\twhile (n--)\n+\t  {\n+\t    memcpy (dest, pbound, size);\n+\t    dest += roffset;\n+\t  }\n+      else\n+\twhile (n--)\n+\t  {\n+\t    memset (dest, filler, size);\n+\t    dest += roffset;\n+\t  }\n \n       /* Advance to the next section.  */\n       rptr += rstride0;\n@@ -225,3 +215,33 @@ eoshift1_4 (gfc_array_char *ret,\n         }\n     }\n }\n+\n+void eoshift1_4 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t    const gfc_array_i4 *, const char *, const GFC_INTEGER_4 *);\n+export_proto(eoshift1_4);\n+\n+void\n+eoshift1_4 (gfc_array_char *ret, const gfc_array_char *array,\n+\t\t       const gfc_array_i4 *h, const char *pbound,\n+\t\t       const GFC_INTEGER_4 *pwhich)\n+{\n+  eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+}\n+\n+void eoshift1_4_char (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t\t   const gfc_array_char *, const gfc_array_i4 *,\n+\t\t\t\t   const char *, const GFC_INTEGER_4 *,\n+\t\t\t\t   GFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(eoshift1_4_char);\n+\n+void\n+eoshift1_4_char (gfc_array_char *ret,\n+\t\t\t      GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\t\t      const gfc_array_char *array, const gfc_array_i4 *h,\n+\t\t\t      const char *pbound, const GFC_INTEGER_4 *pwhich,\n+\t\t\t      GFC_INTEGER_4 array_length,\n+\t\t\t      GFC_INTEGER_4 bound_length\n+\t\t\t\t__attribute__((unused)))\n+{\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length, ' ');\n+}"}, {"sha": "f375a825113b26b01ee50d606938178d9c2c366b", "filename": "libgfortran/generated/eoshift1_8.c", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Feoshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Feoshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_8.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -34,20 +34,10 @@ Boston, MA 02110-1301, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-static const char zeros[16] =\n-  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n-\n-extern void eoshift1_8 (gfc_array_char *,\n-\t\t\t\t     const gfc_array_char *,\n-\t\t\t\t     const gfc_array_i8 *, const char *,\n-\t\t\t\t     const GFC_INTEGER_8 *);\n-export_proto(eoshift1_8);\n-\n-void\n-eoshift1_8 (gfc_array_char *ret,\n-\t\t       const gfc_array_char *array,\n-\t\t       const gfc_array_i8 *h, const char *pbound,\n-\t\t       const GFC_INTEGER_8 *pwhich)\n+static void\n+eoshift1 (gfc_array_char *ret, const gfc_array_char *array, const gfc_array_i8 *h,\n+\t  const char *pbound, const GFC_INTEGER_8 *pwhich, index_type size,\n+\t  char filler)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -69,7 +59,6 @@ eoshift1_8 (gfc_array_char *ret,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n   int which;\n@@ -87,14 +76,8 @@ eoshift1_8 (gfc_array_char *ret,\n   else\n     which = 0;\n \n-  if (!pbound)\n-    pbound = zeros;\n-\n-  size = GFC_DESCRIPTOR_SIZE (ret);\n-\n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n \n   if (ret->data == NULL)\n     {\n@@ -135,7 +118,7 @@ eoshift1_8 (gfc_array_char *ret,\n           rstride[n] = ret->dim[dim].stride * size;\n           sstride[n] = array->dim[dim].stride * size;\n \n-          hstride[n] = h->dim[n].stride * size;\n+          hstride[n] = h->dim[n].stride;\n           n++;\n         }\n     }\n@@ -186,11 +169,18 @@ eoshift1_8 (gfc_array_char *ret,\n         dest = rptr;\n       n = delta;\n \n-      while (n--)\n-        {\n-          memcpy (dest, pbound, size);\n-          dest += roffset;\n-        }\n+      if (pbound)\n+\twhile (n--)\n+\t  {\n+\t    memcpy (dest, pbound, size);\n+\t    dest += roffset;\n+\t  }\n+      else\n+\twhile (n--)\n+\t  {\n+\t    memset (dest, filler, size);\n+\t    dest += roffset;\n+\t  }\n \n       /* Advance to the next section.  */\n       rptr += rstride0;\n@@ -225,3 +215,33 @@ eoshift1_8 (gfc_array_char *ret,\n         }\n     }\n }\n+\n+void eoshift1_8 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t    const gfc_array_i8 *, const char *, const GFC_INTEGER_8 *);\n+export_proto(eoshift1_8);\n+\n+void\n+eoshift1_8 (gfc_array_char *ret, const gfc_array_char *array,\n+\t\t       const gfc_array_i8 *h, const char *pbound,\n+\t\t       const GFC_INTEGER_8 *pwhich)\n+{\n+  eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+}\n+\n+void eoshift1_8_char (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t\t   const gfc_array_char *, const gfc_array_i8 *,\n+\t\t\t\t   const char *, const GFC_INTEGER_8 *,\n+\t\t\t\t   GFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(eoshift1_8_char);\n+\n+void\n+eoshift1_8_char (gfc_array_char *ret,\n+\t\t\t      GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\t\t      const gfc_array_char *array, const gfc_array_i8 *h,\n+\t\t\t      const char *pbound, const GFC_INTEGER_8 *pwhich,\n+\t\t\t      GFC_INTEGER_4 array_length,\n+\t\t\t      GFC_INTEGER_4 bound_length\n+\t\t\t\t__attribute__((unused)))\n+{\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length, ' ');\n+}"}, {"sha": "09e0207cef9da643f5ff0bb857cd98fe2380a8ed", "filename": "libgfortran/generated/eoshift3_4.c", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Feoshift3_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Feoshift3_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_4.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -34,18 +34,10 @@ Boston, MA 02110-1301, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-static const char zeros[16] =\n-  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n-\n-extern void eoshift3_4 (gfc_array_char *, gfc_array_char *,\n-\t\t\t\t     gfc_array_i4 *, const gfc_array_char *,\n-\t\t\t\t     GFC_INTEGER_4 *);\n-export_proto(eoshift3_4);\n-\n-void\n-eoshift3_4 (gfc_array_char *ret, gfc_array_char *array,\n-\t\t       gfc_array_i4 *h, const gfc_array_char *bound,\n-\t\t       GFC_INTEGER_4 *pwhich)\n+static void\n+eoshift3 (gfc_array_char *ret, const gfc_array_char *array, const gfc_array_i4 *h,\n+\t  const gfc_array_char *bound, const GFC_INTEGER_4 *pwhich,\n+\t  index_type size, char filler)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -71,7 +63,6 @@ eoshift3_4 (gfc_array_char *ret, gfc_array_char *array,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n   int which;\n@@ -89,7 +80,6 @@ eoshift3_4 (gfc_array_char *ret, gfc_array_char *array,\n   else\n     which = 0;\n \n-  size = GFC_DESCRIPTOR_SIZE (ret);\n   if (ret->data == NULL)\n     {\n       int i;\n@@ -112,7 +102,6 @@ eoshift3_4 (gfc_array_char *ret, gfc_array_char *array,\n \n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)\n     {\n@@ -161,7 +150,7 @@ eoshift3_4 (gfc_array_char *ret, gfc_array_char *array,\n   if (bound)\n     bptr = bound->data;\n   else\n-    bptr = zeros;\n+    bptr = NULL;\n \n   while (rptr)\n     {\n@@ -195,11 +184,18 @@ eoshift3_4 (gfc_array_char *ret, gfc_array_char *array,\n         dest = rptr;\n       n = delta;\n \n-      while (n--)\n-        {\n-          memcpy (dest, bptr, size);\n-          dest += roffset;\n-        }\n+      if (bptr)\n+\twhile (n--)\n+\t  {\n+\t    memcpy (dest, bptr, size);\n+\t    dest += roffset;\n+\t  }\n+      else\n+\twhile (n--)\n+\t  {\n+\t    memset (dest, filler, size);\n+\t    dest += roffset;\n+\t  }\n \n       /* Advance to the next section.  */\n       rptr += rstride0;\n@@ -237,3 +233,37 @@ eoshift3_4 (gfc_array_char *ret, gfc_array_char *array,\n         }\n     }\n }\n+\n+extern void eoshift3_4 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t\t   const gfc_array_i4 *, const gfc_array_char *,\n+\t\t\t\t   const GFC_INTEGER_4 *);\n+export_proto(eoshift3_4);\n+\n+void\n+eoshift3_4 (gfc_array_char *ret, const gfc_array_char *array,\n+\t\t       const gfc_array_i4 *h, const gfc_array_char *bound,\n+\t\t       const GFC_INTEGER_4 *pwhich)\n+{\n+  eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+}\n+\n+extern void eoshift3_4_char (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t\t\t  const gfc_array_char *,\n+\t\t\t\t\t  const gfc_array_i4 *,\n+\t\t\t\t\t  const gfc_array_char *,\n+\t\t\t\t\t  const GFC_INTEGER_4 *, GFC_INTEGER_4,\n+\t\t\t\t\t  GFC_INTEGER_4);\n+export_proto(eoshift3_4_char);\n+\n+void\n+eoshift3_4_char (gfc_array_char *ret,\n+\t\t\t      GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\t\t      const gfc_array_char *array, const gfc_array_i4 *h,\n+\t\t\t      const gfc_array_char *bound,\n+\t\t\t      const GFC_INTEGER_4 *pwhich,\n+\t\t\t      GFC_INTEGER_4 array_length,\n+\t\t\t      GFC_INTEGER_4 bound_length\n+\t\t\t\t__attribute__((unused)))\n+{\n+  eoshift3 (ret, array, h, bound, pwhich, array_length, ' ');\n+}"}, {"sha": "c652d98d01865d05a46a17dd5837c3aaa18b2cca", "filename": "libgfortran/generated/eoshift3_8.c", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Feoshift3_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fgenerated%2Feoshift3_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_8.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -34,18 +34,10 @@ Boston, MA 02110-1301, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-static const char zeros[16] =\n-  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n-\n-extern void eoshift3_8 (gfc_array_char *, gfc_array_char *,\n-\t\t\t\t     gfc_array_i8 *, const gfc_array_char *,\n-\t\t\t\t     GFC_INTEGER_8 *);\n-export_proto(eoshift3_8);\n-\n-void\n-eoshift3_8 (gfc_array_char *ret, gfc_array_char *array,\n-\t\t       gfc_array_i8 *h, const gfc_array_char *bound,\n-\t\t       GFC_INTEGER_8 *pwhich)\n+static void\n+eoshift3 (gfc_array_char *ret, const gfc_array_char *array, const gfc_array_i8 *h,\n+\t  const gfc_array_char *bound, const GFC_INTEGER_8 *pwhich,\n+\t  index_type size, char filler)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -71,7 +63,6 @@ eoshift3_8 (gfc_array_char *ret, gfc_array_char *array,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n   int which;\n@@ -89,7 +80,6 @@ eoshift3_8 (gfc_array_char *ret, gfc_array_char *array,\n   else\n     which = 0;\n \n-  size = GFC_DESCRIPTOR_SIZE (ret);\n   if (ret->data == NULL)\n     {\n       int i;\n@@ -112,7 +102,6 @@ eoshift3_8 (gfc_array_char *ret, gfc_array_char *array,\n \n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)\n     {\n@@ -161,7 +150,7 @@ eoshift3_8 (gfc_array_char *ret, gfc_array_char *array,\n   if (bound)\n     bptr = bound->data;\n   else\n-    bptr = zeros;\n+    bptr = NULL;\n \n   while (rptr)\n     {\n@@ -195,11 +184,18 @@ eoshift3_8 (gfc_array_char *ret, gfc_array_char *array,\n         dest = rptr;\n       n = delta;\n \n-      while (n--)\n-        {\n-          memcpy (dest, bptr, size);\n-          dest += roffset;\n-        }\n+      if (bptr)\n+\twhile (n--)\n+\t  {\n+\t    memcpy (dest, bptr, size);\n+\t    dest += roffset;\n+\t  }\n+      else\n+\twhile (n--)\n+\t  {\n+\t    memset (dest, filler, size);\n+\t    dest += roffset;\n+\t  }\n \n       /* Advance to the next section.  */\n       rptr += rstride0;\n@@ -237,3 +233,37 @@ eoshift3_8 (gfc_array_char *ret, gfc_array_char *array,\n         }\n     }\n }\n+\n+extern void eoshift3_8 (gfc_array_char *, const gfc_array_char *,\n+\t\t\t\t   const gfc_array_i8 *, const gfc_array_char *,\n+\t\t\t\t   const GFC_INTEGER_8 *);\n+export_proto(eoshift3_8);\n+\n+void\n+eoshift3_8 (gfc_array_char *ret, const gfc_array_char *array,\n+\t\t       const gfc_array_i8 *h, const gfc_array_char *bound,\n+\t\t       const GFC_INTEGER_8 *pwhich)\n+{\n+  eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+}\n+\n+extern void eoshift3_8_char (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t\t\t  const gfc_array_char *,\n+\t\t\t\t\t  const gfc_array_i8 *,\n+\t\t\t\t\t  const gfc_array_char *,\n+\t\t\t\t\t  const GFC_INTEGER_8 *, GFC_INTEGER_4,\n+\t\t\t\t\t  GFC_INTEGER_4);\n+export_proto(eoshift3_8_char);\n+\n+void\n+eoshift3_8_char (gfc_array_char *ret,\n+\t\t\t      GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\t\t      const gfc_array_char *array, const gfc_array_i8 *h,\n+\t\t\t      const gfc_array_char *bound,\n+\t\t\t      const GFC_INTEGER_8 *pwhich,\n+\t\t\t      GFC_INTEGER_4 array_length,\n+\t\t\t      GFC_INTEGER_4 bound_length\n+\t\t\t\t__attribute__((unused)))\n+{\n+  eoshift3 (ret, array, h, bound, pwhich, array_length, ' ');\n+}"}, {"sha": "199e28314ce7458a1336441df50eb11b07457f0d", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 35, "deletions": 51, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -78,7 +78,7 @@ DEF_COPY_LOOP(cdouble, _Complex double)\n \n static void\n cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n-\t ssize_t shift, int which)\n+\t ssize_t shift, int which, index_type size)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -95,7 +95,6 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n   int whichloop;\n@@ -107,7 +106,6 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n \n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n \n   /* The values assigned here must match the cases in the inner loop.  */\n@@ -298,51 +296,37 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n     }\n }\n \n-\n-extern void cshift0_1 (gfc_array_char *, const gfc_array_char *,\n-\t\t       const GFC_INTEGER_1 *, const GFC_INTEGER_1 *);\n-export_proto(cshift0_1);\n-\n-void\n-cshift0_1 (gfc_array_char *ret, const gfc_array_char *array,\n-\t   const GFC_INTEGER_1 *pshift, const GFC_INTEGER_1 *pdim)\n-{\n-  cshift0 (ret, array, *pshift, pdim ? *pdim : 1);\n-}\n-\n-\n-extern void cshift0_2 (gfc_array_char *, const gfc_array_char *,\n-\t\t       const GFC_INTEGER_2 *, const GFC_INTEGER_2 *);\n-export_proto(cshift0_2);\n-\n-void\n-cshift0_2 (gfc_array_char *ret, const gfc_array_char *array,\n-\t   const GFC_INTEGER_2 *pshift, const GFC_INTEGER_2 *pdim)\n-{\n-  cshift0 (ret, array, *pshift, pdim ? *pdim : 1);\n-}\n-\n-\n-extern void cshift0_4 (gfc_array_char *, const gfc_array_char *,\n-\t\t       const GFC_INTEGER_4 *, const GFC_INTEGER_4 *);\n-export_proto(cshift0_4);\n-\n-void\n-cshift0_4 (gfc_array_char *ret, const gfc_array_char *array,\n-\t   const GFC_INTEGER_4 *pshift, const GFC_INTEGER_4 *pdim)\n-{\n-  cshift0 (ret, array, *pshift, pdim ? *pdim : 1);\n-}\n-\n-\n-extern void cshift0_8 (gfc_array_char *, const gfc_array_char *,\n-\t\t       const GFC_INTEGER_8 *, const GFC_INTEGER_8 *);\n-export_proto(cshift0_8);\n-\n-void\n-cshift0_8 (gfc_array_char *ret, const gfc_array_char *array,\n-\t   const GFC_INTEGER_8 *pshift, const GFC_INTEGER_8 *pdim)\n-{\n-  cshift0 (ret, array, *pshift, pdim ? *pdim : 1);\n-}\n-\n+#define DEFINE_CSHIFT(N)\t\t\t\t\t\t      \\\n+  extern void cshift0_##N (gfc_array_char *, const gfc_array_char *,\t      \\\n+\t\t\t   const GFC_INTEGER_##N *, const GFC_INTEGER_##N *); \\\n+  export_proto(cshift0_##N);\t\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  void\t\t\t\t\t\t\t\t\t      \\\n+  cshift0_##N (gfc_array_char *ret, const gfc_array_char *array,\t      \\\n+\t       const GFC_INTEGER_##N *pshift, const GFC_INTEGER_##N *pdim)    \\\n+  {\t\t\t\t\t\t\t\t\t      \\\n+    cshift0 (ret, array, *pshift, pdim ? *pdim : 1,\t\t\t      \\\n+\t     GFC_DESCRIPTOR_SIZE (array));\t\t\t\t      \\\n+  }\t\t\t\t\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  extern void cshift0_##N##_char (gfc_array_char *, GFC_INTEGER_4,\t      \\\n+\t\t\t\t  const gfc_array_char *,\t\t      \\\n+\t\t\t\t  const GFC_INTEGER_##N *,\t\t      \\\n+\t\t\t\t  const GFC_INTEGER_##N *, GFC_INTEGER_4);    \\\n+  export_proto(cshift0_##N##_char);\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  void\t\t\t\t\t\t\t\t\t      \\\n+  cshift0_##N##_char (gfc_array_char *ret,\t\t\t\t      \\\n+\t\t      GFC_INTEGER_4 ret_length __attribute__((unused)),\t      \\\n+\t\t      const gfc_array_char *array,\t\t\t      \\\n+\t\t      const GFC_INTEGER_##N *pshift,\t\t\t      \\\n+\t\t      const GFC_INTEGER_##N *pdim,\t\t\t      \\\n+\t\t      GFC_INTEGER_4 array_length)\t\t\t      \\\n+  {\t\t\t\t\t\t\t\t\t      \\\n+    cshift0 (ret, array, *pshift, pdim ? *pdim : 1, array_length);\t      \\\n+  }\n+\n+DEFINE_CSHIFT (1);\n+DEFINE_CSHIFT (2);\n+DEFINE_CSHIFT (4);\n+DEFINE_CSHIFT (8);"}, {"sha": "6f02f66d36e22076c013d9bbbb290f9184c17938", "filename": "libgfortran/intrinsics/eoshift0.c", "status": "modified", "additions": 54, "deletions": 70, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Feoshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Feoshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift0.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -34,15 +34,13 @@ Boston, MA 02110-1301, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-static const char zeros[16] =\n-  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n-\n /* TODO: make this work for large shifts when\n    sizeof(int) < sizeof (index_type).  */\n \n static void\n eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n-\t  int shift, const char * pbound, int which)\n+\t  int shift, const char * pbound, int which, index_type size,\n+\t  char filler)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -60,7 +58,6 @@ eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n \n@@ -70,11 +67,6 @@ eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n   soffset = 0;\n   roffset = 0;\n \n-  if (!pbound)\n-    pbound = zeros;\n-\n-  size = GFC_DESCRIPTOR_SIZE (ret);\n-\n   if (ret->data == NULL)\n     {\n       int i;\n@@ -98,7 +90,6 @@ eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n \n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)\n     {\n@@ -174,11 +165,18 @@ eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n           n = -shift;\n         }\n \n-      while (n--)\n-        {\n-          memcpy (dest, pbound, size);\n-          dest += roffset;\n-        }\n+      if (pbound)\n+\twhile (n--)\n+\t  {\n+\t    memcpy (dest, pbound, size);\n+\t    dest += roffset;\n+\t  }\n+      else\n+\twhile (n--)\n+\t  {\n+\t    memset (dest, filler, size);\n+\t    dest += roffset;\n+\t  }\n \n       /* Advance to the next section.  */\n       rptr += rstride0;\n@@ -212,57 +210,43 @@ eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n }\n \n \n-extern void eoshift0_1 (gfc_array_char *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_1 *, const char *,\n-\t\t\tconst GFC_INTEGER_1 *);\n-export_proto(eoshift0_1);\n-\n-void\n-eoshift0_1 (gfc_array_char *ret, const gfc_array_char *array,\n-\t    const GFC_INTEGER_1 *pshift, const char *pbound,\n-\t    const GFC_INTEGER_1 *pdim)\n-{\n-  eoshift0 (ret, array, *pshift, pbound, pdim ? *pdim : 1);\n-}\n-\n-\n-extern void eoshift0_2 (gfc_array_char *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_2 *, const char *,\n-\t\t\tconst GFC_INTEGER_2 *);\n-export_proto(eoshift0_2);\n-\n-void\n-eoshift0_2 (gfc_array_char *ret, const gfc_array_char *array,\n-\t    const GFC_INTEGER_2 *pshift, const char *pbound,\n-\t    const GFC_INTEGER_2 *pdim)\n-{\n-  eoshift0 (ret, array, *pshift, pbound, pdim ? *pdim : 1);\n-}\n-\n-\n-extern void eoshift0_4 (gfc_array_char *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_4 *, const char *,\n-\t\t\tconst GFC_INTEGER_4 *);\n-export_proto(eoshift0_4);\n-\n-void\n-eoshift0_4 (gfc_array_char *ret, const gfc_array_char *array,\n-\t    const GFC_INTEGER_4 *pshift, const char *pbound,\n-\t    const GFC_INTEGER_4 *pdim)\n-{\n-  eoshift0 (ret, array, *pshift, pbound, pdim ? *pdim : 1);\n-}\n-\n-\n-extern void eoshift0_8 (gfc_array_char *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_8 *, const char *,\n-\t\t\tconst GFC_INTEGER_8 *);\n-export_proto(eoshift0_8);\n-\n-void\n-eoshift0_8 (gfc_array_char *ret, const gfc_array_char *array,\n-\t    const GFC_INTEGER_8 *pshift, const char *pbound,\n-\t    const GFC_INTEGER_8 *pdim)\n-{\n-  eoshift0 (ret, array, *pshift, pbound, pdim ? *pdim : 1);\n-}\n+#define DEFINE_EOSHIFT(N)\t\t\t\t\t\t      \\\n+  extern void eoshift0_##N (gfc_array_char *, const gfc_array_char *,\t      \\\n+\t\t\t    const GFC_INTEGER_##N *, const char *,\t      \\\n+\t\t\t    const GFC_INTEGER_##N *);\t\t\t      \\\n+  export_proto(eoshift0_##N);\t\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  void\t\t\t\t\t\t\t\t\t      \\\n+  eoshift0_##N (gfc_array_char *ret, const gfc_array_char *array,\t      \\\n+\t\tconst GFC_INTEGER_##N *pshift, const char *pbound,\t      \\\n+\t\tconst GFC_INTEGER_##N *pdim)\t\t\t\t      \\\n+  {\t\t\t\t\t\t\t\t\t      \\\n+    eoshift0 (ret, array, *pshift, pbound, pdim ? *pdim : 1,\t\t      \\\n+\t      GFC_DESCRIPTOR_SIZE (array), 0);\t\t\t\t      \\\n+  }\t\t\t\t\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  extern void eoshift0_##N##_char (gfc_array_char *, GFC_INTEGER_4,\t      \\\n+\t\t\t\t   const gfc_array_char *,\t\t      \\\n+\t\t\t\t   const GFC_INTEGER_##N *, const char *,     \\\n+\t\t\t\t   const GFC_INTEGER_##N *, GFC_INTEGER_4,    \\\n+\t\t\t\t   GFC_INTEGER_4);\t\t\t      \\\n+  export_proto(eoshift0_##N##_char);\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  void\t\t\t\t\t\t\t\t\t      \\\n+  eoshift0_##N##_char (gfc_array_char *ret,\t\t\t\t      \\\n+\t\t       GFC_INTEGER_4 ret_length __attribute__((unused)),      \\\n+\t\t       const gfc_array_char *array,\t\t\t      \\\n+\t\t       const GFC_INTEGER_##N *pshift,\t\t\t      \\\n+\t\t       const char *pbound,\t\t\t\t      \\\n+\t\t       const GFC_INTEGER_##N *pdim,\t\t\t      \\\n+\t\t       GFC_INTEGER_4 array_length,\t\t\t      \\\n+\t\t       GFC_INTEGER_4 bound_length __attribute__((unused)))    \\\n+  {\t\t\t\t\t\t\t\t\t      \\\n+    eoshift0 (ret, array, *pshift, pbound, pdim ? *pdim : 1,\t\t      \\\n+\t      array_length, ' ');\t\t\t\t\t      \\\n+  }\n+\n+DEFINE_EOSHIFT (1);\n+DEFINE_EOSHIFT (2);\n+DEFINE_EOSHIFT (4);\n+DEFINE_EOSHIFT (8);"}, {"sha": "f4990292ec4020189f0ee39684b15255708f819a", "filename": "libgfortran/intrinsics/eoshift2.c", "status": "modified", "additions": 56, "deletions": 68, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Feoshift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Feoshift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift2.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -34,15 +34,13 @@ Boston, MA 02110-1301, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-static const char zeros[16] =\n-  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n-\n /* TODO: make this work for large shifts when\n    sizeof(int) < sizeof (index_type).  */\n \n static void\n eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n-\t  int shift, const gfc_array_char *bound, int which)\n+\t  int shift, const gfc_array_char *bound, int which,\n+\t  index_type size, char filler)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -64,7 +62,6 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n \n@@ -74,8 +71,6 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n   soffset = 0;\n   roffset = 0;\n \n-  size = GFC_DESCRIPTOR_SIZE (ret);\n-\n   if (ret->data == NULL)\n     {\n       int i;\n@@ -99,7 +94,6 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n \n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)\n     {\n@@ -156,7 +150,7 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n   if (bound)\n     bptr = bound->data;\n   else\n-    bptr = zeros;\n+    bptr = NULL;\n \n   while (rptr)\n     {\n@@ -187,11 +181,18 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n           n = -shift;\n         }\n \n-      while (n--)\n-        {\n-          memcpy (dest, bptr, size);\n-          dest += roffset;\n-        }\n+      if (bptr)\n+\twhile (n--)\n+\t  {\n+\t    memcpy (dest, bptr, size);\n+\t    dest += roffset;\n+\t  }\n+      else\n+\twhile (n--)\n+\t  {\n+\t    memset (dest, filler, size);\n+\t    dest += roffset;\n+\t  }\n \n       /* Advance to the next section.  */\n       rptr += rstride0;\n@@ -228,57 +229,44 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n }\n \n \n-extern void eoshift2_1 (gfc_array_char *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_1 *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_1 *);\n-export_proto(eoshift2_1);\n-\n-void\n-eoshift2_1 (gfc_array_char *ret, const gfc_array_char *array,\n-\t    const GFC_INTEGER_1 *pshift, const gfc_array_char *bound,\n-\t    const GFC_INTEGER_1 *pdim)\n-{\n-  eoshift2 (ret, array, *pshift, bound, pdim ? *pdim : 1);\n-}\n-\n-\n-extern void eoshift2_2 (gfc_array_char *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_2 *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_2 *);\n-export_proto(eoshift2_2);\n-\n-void\n-eoshift2_2 (gfc_array_char *ret, const gfc_array_char *array,\n-\t    const GFC_INTEGER_2 *pshift, const gfc_array_char *bound,\n-\t    const GFC_INTEGER_2 *pdim)\n-{\n-  eoshift2 (ret, array, *pshift, bound, pdim ? *pdim : 1);\n-}\n-\n-\n-extern void eoshift2_4 (gfc_array_char *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_4 *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_4 *);\n-export_proto(eoshift2_4);\n-\n-void\n-eoshift2_4 (gfc_array_char *ret, const gfc_array_char *array,\n-\t    const GFC_INTEGER_4 *pshift, const gfc_array_char *bound,\n-\t    const GFC_INTEGER_4 *pdim)\n-{\n-  eoshift2 (ret, array, *pshift, bound, pdim ? *pdim : 1);\n-}\n-\n-\n-extern void eoshift2_8 (gfc_array_char *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_8 *, const gfc_array_char *,\n-\t\t\tconst GFC_INTEGER_8 *);\n-export_proto(eoshift2_8);\n-\n-void\n-eoshift2_8 (gfc_array_char *ret, const gfc_array_char *array,\n-\t    const GFC_INTEGER_8 *pshift, const gfc_array_char *bound,\n-\t    const GFC_INTEGER_8 *pdim)\n-{\n-  eoshift2 (ret, array, *pshift, bound, pdim ? *pdim : 1);\n-}\n+#define DEFINE_EOSHIFT(N)\t\t\t\t\t\t      \\\n+  extern void eoshift2_##N (gfc_array_char *, const gfc_array_char *,\t      \\\n+\t\t\t    const GFC_INTEGER_##N *, const gfc_array_char *,  \\\n+\t\t\t    const GFC_INTEGER_##N *);\t\t\t      \\\n+  export_proto(eoshift2_##N);\t\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  void\t\t\t\t\t\t\t\t\t      \\\n+  eoshift2_##N (gfc_array_char *ret, const gfc_array_char *array,\t      \\\n+\t\tconst GFC_INTEGER_##N *pshift, const gfc_array_char *pbound,  \\\n+\t\tconst GFC_INTEGER_##N *pdim)\t\t\t\t      \\\n+  {\t\t\t\t\t\t\t\t\t      \\\n+    eoshift2 (ret, array, *pshift, pbound, pdim ? *pdim : 1,\t\t      \\\n+\t      GFC_DESCRIPTOR_SIZE (array), 0);\t\t\t\t      \\\n+  }\t\t\t\t\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  extern void eoshift2_##N##_char (gfc_array_char *, GFC_INTEGER_4,\t      \\\n+\t\t\t\t   const gfc_array_char *,\t\t      \\\n+\t\t\t\t   const GFC_INTEGER_##N *,\t\t      \\\n+\t\t\t\t   const gfc_array_char *,\t\t      \\\n+\t\t\t\t   const GFC_INTEGER_##N *,\t\t      \\\n+\t\t\t\t   GFC_INTEGER_4, GFC_INTEGER_4);\t      \\\n+  export_proto(eoshift2_##N##_char);\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  void\t\t\t\t\t\t\t\t\t      \\\n+  eoshift2_##N##_char (gfc_array_char *ret,\t\t\t\t      \\\n+\t\t       GFC_INTEGER_4 ret_length __attribute__((unused)),      \\\n+\t\t       const gfc_array_char *array,\t\t\t      \\\n+\t\t       const GFC_INTEGER_##N *pshift,\t\t\t      \\\n+\t\t       const gfc_array_char *pbound,\t\t\t      \\\n+\t\t       const GFC_INTEGER_##N *pdim,\t\t\t      \\\n+\t\t       GFC_INTEGER_4 array_length,\t\t\t      \\\n+\t\t       GFC_INTEGER_4 bound_length __attribute__((unused)))    \\\n+  {\t\t\t\t\t\t\t\t\t      \\\n+    eoshift2 (ret, array, *pshift, pbound, pdim ? *pdim : 1,\t\t      \\\n+\t      array_length, ' ');\t\t\t\t\t      \\\n+  }\n+\n+DEFINE_EOSHIFT (1);\n+DEFINE_EOSHIFT (2);\n+DEFINE_EOSHIFT (4);\n+DEFINE_EOSHIFT (8);"}, {"sha": "f07b5aac90553d4fb8969268c6af5393e0f73eb0", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 60, "deletions": 17, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -74,13 +74,10 @@ Boston, MA 02110-1301, USA.  */\n There are two variants of the PACK intrinsic: one, where MASK is\n array valued, and the other one where MASK is scalar.  */\n \n-extern void pack (gfc_array_char *, const gfc_array_char *,\n-\t\t  const gfc_array_l4 *, const gfc_array_char *);\n-export_proto(pack);\n-\n-void\n-pack (gfc_array_char *ret, const gfc_array_char *array,\n-      const gfc_array_l4 *mask, const gfc_array_char *vector)\n+static void\n+pack_internal (gfc_array_char *ret, const gfc_array_char *array,\n+\t       const gfc_array_l4 *mask, const gfc_array_char *vector,\n+\t       index_type size)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride0;\n@@ -98,10 +95,8 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type n;\n   index_type dim;\n-  index_type size;\n   index_type nelem;\n \n-  size = GFC_DESCRIPTOR_SIZE (array);\n   dim = GFC_DESCRIPTOR_RANK (array);\n   for (n = 0; n < dim; n++)\n     {\n@@ -189,7 +184,7 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n \t\t  else\n \t\t    {\n \t\t      count[n]++;\n-\t\t      mptr += mstride[n];\n+\t\t      m += mstride[n];\n \t\t    }\n \t\t}\n \t    }\n@@ -277,13 +272,36 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n     }\n }\n \n-extern void pack_s (gfc_array_char *ret, const gfc_array_char *array,\n-\t\t    const GFC_LOGICAL_4 *, const gfc_array_char *);\n-export_proto(pack_s);\n+extern void pack (gfc_array_char *, const gfc_array_char *,\n+\t\t  const gfc_array_l4 *, const gfc_array_char *);\n+export_proto(pack);\n \n void\n-pack_s (gfc_array_char *ret, const gfc_array_char *array,\n-\tconst GFC_LOGICAL_4 *mask, const gfc_array_char *vector)\n+pack (gfc_array_char *ret, const gfc_array_char *array,\n+      const gfc_array_l4 *mask, const gfc_array_char *vector)\n+{\n+  pack_internal (ret, array, mask, vector, GFC_DESCRIPTOR_SIZE (array));\n+}\n+\n+extern void pack_char (gfc_array_char *, GFC_INTEGER_4, const gfc_array_char *,\n+\t\t       const gfc_array_l4 *, const gfc_array_char *,\n+\t\t       GFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(pack_char);\n+\n+void\n+pack_char (gfc_array_char *ret,\n+\t   GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t   const gfc_array_char *array, const gfc_array_l4 *mask,\n+\t   const gfc_array_char *vector, GFC_INTEGER_4 array_length,\n+\t   GFC_INTEGER_4 vector_length __attribute__((unused)))\n+{\n+  pack_internal (ret, array, mask, vector, array_length);\n+}\n+\n+static void\n+pack_s_internal (gfc_array_char *ret, const gfc_array_char *array,\n+\t\t const GFC_LOGICAL_4 *mask, const gfc_array_char *vector,\n+\t\t index_type size)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride0;\n@@ -297,10 +315,8 @@ pack_s (gfc_array_char *ret, const gfc_array_char *array,\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type n;\n   index_type dim;\n-  index_type size;\n   index_type nelem;\n \n-  size = GFC_DESCRIPTOR_SIZE (array);\n   dim = GFC_DESCRIPTOR_RANK (array);\n   for (n = 0; n < dim; n++)\n     {\n@@ -426,3 +442,30 @@ pack_s (gfc_array_char *ret, const gfc_array_char *array,\n         }\n     }\n }\n+\n+extern void pack_s (gfc_array_char *ret, const gfc_array_char *array,\n+\t\t    const GFC_LOGICAL_4 *, const gfc_array_char *);\n+export_proto(pack_s);\n+\n+void\n+pack_s (gfc_array_char *ret, const gfc_array_char *array,\n+\tconst GFC_LOGICAL_4 *mask, const gfc_array_char *vector)\n+{\n+  pack_s_internal (ret, array, mask, vector, GFC_DESCRIPTOR_SIZE (array));\n+}\n+\n+extern void pack_s_char (gfc_array_char *ret, GFC_INTEGER_4,\n+\t\t\t const gfc_array_char *array, const GFC_LOGICAL_4 *,\n+\t\t\t const gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t GFC_INTEGER_4);\n+export_proto(pack_s_char);\n+\n+void\n+pack_s_char (gfc_array_char *ret,\n+\t     GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t     const gfc_array_char *array, const GFC_LOGICAL_4 *mask,\n+\t     const gfc_array_char *vector, GFC_INTEGER_4 array_length,\n+\t     GFC_INTEGER_4 vector_length __attribute__((unused)))\n+{\n+  pack_s_internal (ret, array, mask, vector, array_length);\n+}"}, {"sha": "8cbdc89c0e2f0f72a768845caf1fd043e1e4fd23", "filename": "libgfortran/intrinsics/reshape_generic.c", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Freshape_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Freshape_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Freshape_generic.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -37,15 +37,12 @@ Boston, MA 02110-1301, USA.  */\n typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n typedef GFC_ARRAY_DESCRIPTOR(GFC_MAX_DIMENSIONS, char) parray;\n \n-extern void reshape (parray *, parray *, shape_type *, parray *, shape_type *);\n-export_proto(reshape);\n-\n /* The shape parameter is ignored. We can currently deduce the shape from the\n    return array.  */\n \n-void\n-reshape (parray *ret, parray *source, shape_type *shape,\n-\t parray *pad, shape_type *order)\n+static void\n+reshape_internal (parray *ret, parray *source, shape_type *shape,\n+\t\t  parray *pad, shape_type *order, index_type size)\n {\n   /* r.* indicates the return array.  */\n   index_type rcount[GFC_MAX_DIMENSIONS];\n@@ -76,7 +73,6 @@ reshape (parray *ret, parray *source, shape_type *shape,\n   const char *src;\n   int n;\n   int dim;\n-  int size;\n \n   if (source->dim[0].stride == 0)\n     source->dim[0].stride = 1;\n@@ -89,7 +85,6 @@ reshape (parray *ret, parray *source, shape_type *shape,\n \n   if (ret->data == NULL)\n     {\n-      size = GFC_DESCRIPTOR_SIZE (ret);\n       rdim = shape->dim[0].ubound - shape->dim[0].lbound + 1;\n       rs = 1;\n       for (n=0; n < rdim; n++)\n@@ -106,7 +101,6 @@ reshape (parray *ret, parray *source, shape_type *shape,\n     }\n   else\n     {\n-      size = GFC_DESCRIPTOR_SIZE (ret);\n       rdim = GFC_DESCRIPTOR_RANK (ret);\n       if (ret->dim[0].stride == 0)\n \tret->dim[0].stride = 1;\n@@ -260,3 +254,28 @@ reshape (parray *ret, parray *source, shape_type *shape,\n         }\n     }\n }\n+\n+extern void reshape (parray *, parray *, shape_type *, parray *, shape_type *);\n+export_proto(reshape);\n+\n+void\n+reshape (parray *ret, parray *source, shape_type *shape, parray *pad,\n+\t shape_type *order)\n+{\n+  reshape_internal (ret, source, shape, pad, order,\n+\t\t    GFC_DESCRIPTOR_SIZE (source));\n+}\n+\n+extern void reshape_char (parray *, GFC_INTEGER_4, parray *, shape_type *,\n+\t\t\t  parray *, shape_type *, GFC_INTEGER_4,\n+\t\t\t  GFC_INTEGER_4);\n+export_proto(reshape_char);\n+\n+void\n+reshape_char (parray *ret, GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t      parray *source, shape_type *shape, parray *pad,\n+\t      shape_type *order, GFC_INTEGER_4 source_length,\n+\t      GFC_INTEGER_4 pad_length __attribute__((unused)))\n+{\n+  reshape_internal (ret, source, shape, pad, order, source_length);\n+}"}, {"sha": "a9cddb0f6893192d678ac5e75ca2caa0707f2641", "filename": "libgfortran/intrinsics/spread_generic.c", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Fspread_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Fspread_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fspread_generic.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -34,13 +34,10 @@ Boston, MA 02110-1301, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-extern void spread (gfc_array_char *, const gfc_array_char *,\n-\t\t    const index_type *, const index_type *);\n-export_proto(spread);\n-\n-void\n-spread (gfc_array_char *ret, const gfc_array_char *source,\n-\tconst index_type *along, const index_type *pncopies)\n+static void\n+spread_internal (gfc_array_char *ret, const gfc_array_char *source,\n+\t\t const index_type *along, const index_type *pncopies,\n+\t\t index_type size)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -60,7 +57,6 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type n;\n   index_type dim;\n-  index_type size;\n   index_type ncopies;\n \n   srank = GFC_DESCRIPTOR_RANK(source);\n@@ -74,7 +70,6 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n \n   ncopies = *pncopies;\n \n-  size = GFC_DESCRIPTOR_SIZE (source);\n   if (ret->data == NULL)\n     {\n       /* The front end has signalled that we need to populate the\n@@ -180,3 +175,28 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n         }\n     }\n }\n+\n+extern void spread (gfc_array_char *, const gfc_array_char *,\n+\t\t    const index_type *, const index_type *);\n+export_proto(spread);\n+\n+void\n+spread (gfc_array_char *ret, const gfc_array_char *source,\n+\tconst index_type *along, const index_type *pncopies)\n+{\n+  spread_internal (ret, source, along, pncopies, GFC_DESCRIPTOR_SIZE (source));\n+}\n+\n+extern void spread_char (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t const gfc_array_char *, const index_type *,\n+\t\t\t const index_type *, GFC_INTEGER_4);\n+export_proto(spread_char);\n+\n+void\n+spread_char (gfc_array_char *ret,\n+\t     GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t     const gfc_array_char *source, const index_type *along,\n+\t     const index_type *pncopies, GFC_INTEGER_4 source_length)\n+{\n+  spread_internal (ret, source, along, pncopies, source_length);\n+}"}, {"sha": "bd47073790b5140183a6bd8e99253b65bd587fa4", "filename": "libgfortran/intrinsics/transpose_generic.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftranspose_generic.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -37,8 +37,9 @@ Boston, MA 02110-1301, USA.  */\n extern void transpose (gfc_array_char *, gfc_array_char *);\n export_proto(transpose);\n \n-void\n-transpose (gfc_array_char *ret, gfc_array_char *source)\n+static void\n+transpose_internal (gfc_array_char *ret, gfc_array_char *source,\n+\t\t    index_type size)\n {\n   /* r.* indicates the return array.  */\n   index_type rxstride, rystride;\n@@ -49,13 +50,10 @@ transpose (gfc_array_char *ret, gfc_array_char *source)\n \n   index_type xcount, ycount;\n   index_type x, y;\n-  index_type size;\n \n   assert (GFC_DESCRIPTOR_RANK (source) == 2\n           && GFC_DESCRIPTOR_RANK (ret) == 2);\n \n-  size = GFC_DESCRIPTOR_SIZE (source);\n-\n   if (ret->data == NULL)\n     {\n       assert (ret->dtype == source->dtype);\n@@ -100,3 +98,24 @@ transpose (gfc_array_char *ret, gfc_array_char *source)\n       rptr += rxstride - (rystride * xcount);\n     }\n }\n+\n+extern void transpose (gfc_array_char *, gfc_array_char *);\n+export_proto(transpose);\n+\n+void\n+transpose (gfc_array_char *ret, gfc_array_char *source)\n+{\n+  transpose_internal (ret, source, GFC_DESCRIPTOR_SIZE (source));\n+}\n+\n+extern void transpose_char (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t    gfc_array_char *, GFC_INTEGER_4);\n+export_proto(transpose_char);\n+\n+void\n+transpose_char (gfc_array_char *ret,\n+\t\tGFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\tgfc_array_char *source, GFC_INTEGER_4 source_length)\n+{\n+  transpose_internal (ret, source, source_length);\n+}"}, {"sha": "ac4394c21febb456239a6232c81f685ce70d7c7e", "filename": "libgfortran/intrinsics/unpack_generic.c", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Funpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fintrinsics%2Funpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funpack_generic.c?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -34,13 +34,10 @@ Boston, MA 02110-1301, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-extern void unpack1 (gfc_array_char *, const gfc_array_char *,\n-\t\t     const gfc_array_l4 *, const gfc_array_char *);\n-iexport_proto(unpack1);\n-\n-void\n-unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n-\t const gfc_array_l4 *mask, const gfc_array_char *field)\n+static void\n+unpack_internal (gfc_array_char *ret, const gfc_array_char *vector,\n+\t\t const gfc_array_l4 *mask, const gfc_array_char *field,\n+\t\t index_type size, index_type fsize)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -63,12 +60,7 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type n;\n   index_type dim;\n-  index_type size;\n-  index_type fsize;\n \n-  size = GFC_DESCRIPTOR_SIZE (ret);\n-  /* A field element size of 0 actually means this is a scalar.  */\n-  fsize = GFC_DESCRIPTOR_SIZE (field);\n   if (ret->data == NULL)\n     {\n       /* The front end has signalled that we need to populate the\n@@ -177,7 +169,35 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n         }\n     }\n }\n-iexport(unpack1);\n+\n+extern void unpack1 (gfc_array_char *, const gfc_array_char *,\n+\t\t     const gfc_array_l4 *, const gfc_array_char *);\n+export_proto(unpack1);\n+\n+void\n+unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n+\t const gfc_array_l4 *mask, const gfc_array_char *field)\n+{\n+  unpack_internal (ret, vector, mask, field,\n+\t\t   GFC_DESCRIPTOR_SIZE (vector),\n+\t\t   GFC_DESCRIPTOR_SIZE (field));\n+}\n+\n+extern void unpack1_char (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t  const gfc_array_char *, const gfc_array_l4 *,\n+\t\t\t  const gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t  GFC_INTEGER_4);\n+export_proto(unpack1_char);\n+\n+void\n+unpack1_char (gfc_array_char *ret,\n+\t      GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t      const gfc_array_char *vector, const gfc_array_l4 *mask,\n+\t      const gfc_array_char *field, GFC_INTEGER_4 vector_length,\n+\t      GFC_INTEGER_4 field_length)\n+{\n+  unpack_internal (ret, vector, mask, field, vector_length, field_length);\n+}\n \n extern void unpack0 (gfc_array_char *, const gfc_array_char *,\n \t\t     const gfc_array_l4 *, char *);\n@@ -191,5 +211,24 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n \n   tmp.dtype = 0;\n   tmp.data = field;\n-  unpack1 (ret, vector, mask, &tmp);\n+  unpack_internal (ret, vector, mask, &tmp, GFC_DESCRIPTOR_SIZE (vector), 0);\n+}\n+\n+extern void unpack0_char (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t  const gfc_array_char *, const gfc_array_l4 *,\n+\t\t\t  char *, GFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(unpack0_char);\n+\n+void\n+unpack0_char (gfc_array_char *ret,\n+\t      GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t      const gfc_array_char *vector, const gfc_array_l4 *mask,\n+\t      char *field, GFC_INTEGER_4 vector_length,\n+\t      GFC_INTEGER_4 field_length __attribute__((unused)))\n+{\n+  gfc_array_char tmp;\n+\n+  tmp.dtype = 0;\n+  tmp.data = field;\n+  unpack_internal (ret, vector, mask, &tmp, vector_length, 0);\n }"}, {"sha": "5c3d0b01324a1cda1649b558fde8ab839a69ed46", "filename": "libgfortran/m4/cshift1.m4", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fm4%2Fcshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fm4%2Fcshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcshift1.m4?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -35,15 +35,9 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-void cshift1_`'atype_kind (gfc_array_char * ret,\n-\t\t\t   const gfc_array_char * array,\n-\t\t\t   const atype * h, const atype_name * pwhich);\n-export_proto(cshift1_`'atype_kind);\n-\n-void\n-cshift1_`'atype_kind (gfc_array_char * ret,\n-\t\t      const gfc_array_char * array,\n-\t\t      const atype * h, const atype_name * pwhich)\n+static void\n+cshift1 (gfc_array_char * ret, const gfc_array_char * array,\n+\t const atype * h, const atype_name * pwhich, index_type size)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -65,7 +59,6 @@ cshift1_`'atype_kind (gfc_array_char * ret,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n   int which;\n@@ -79,8 +72,6 @@ cshift1_`'atype_kind (gfc_array_char * ret,\n   if (which < 0 || (which + 1) > GFC_DESCRIPTOR_RANK (array))\n     runtime_error (\"Argument 'DIM' is out of range in call to 'CSHIFT'\");\n \n-  size = GFC_DESCRIPTOR_SIZE (ret);\n-\n   if (ret->data == NULL)\n     {\n       int i;\n@@ -102,7 +93,6 @@ cshift1_`'atype_kind (gfc_array_char * ret,\n \n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n \n   /* Initialized for avoiding compiler warnings.  */\n@@ -202,3 +192,31 @@ cshift1_`'atype_kind (gfc_array_char * ret,\n         }\n     }\n }\n+\n+void cshift1_`'atype_kind (gfc_array_char *, const gfc_array_char *,\n+\t\t\t   const atype *, const atype_name *);\n+export_proto(cshift1_`'atype_kind);\n+\n+void\n+cshift1_`'atype_kind (gfc_array_char * ret,\n+\t\t      const gfc_array_char * array,\n+\t\t      const atype * h, const atype_name * pwhich)\n+{\n+  cshift1 (ret, array, h, pwhich, GFC_DESCRIPTOR_SIZE (array));\n+}\n+\n+void cshift1_`'atype_kind`'_char (gfc_array_char * ret, GFC_INTEGER_4,\n+\t\t\t\t  const gfc_array_char * array,\n+\t\t\t\t  const atype * h, const atype_name * pwhich,\n+\t\t\t\t  GFC_INTEGER_4);\n+export_proto(cshift1_`'atype_kind`'_char);\n+\n+void\n+cshift1_`'atype_kind`'_char (gfc_array_char * ret,\n+\t\t\t     GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\t\t     const gfc_array_char * array,\n+\t\t\t     const atype * h, const atype_name * pwhich,\n+\t\t\t     GFC_INTEGER_4 array_length)\n+{\n+  cshift1 (ret, array, h, pwhich, array_length);\n+}"}, {"sha": "b5245ee42ea55f168e41a86e75160c32c248f41c", "filename": "libgfortran/m4/eoshift1.m4", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fm4%2Feoshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fm4%2Feoshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift1.m4?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -35,20 +35,10 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-static const char zeros[16] =\n-  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n-\n-extern void eoshift1_`'atype_kind (gfc_array_char *,\n-\t\t\t\t     const gfc_array_char *,\n-\t\t\t\t     const atype *, const char *,\n-\t\t\t\t     const atype_name *);\n-export_proto(eoshift1_`'atype_kind);\n-\n-void\n-eoshift1_`'atype_kind (gfc_array_char *ret,\n-\t\t       const gfc_array_char *array,\n-\t\t       const atype *h, const char *pbound,\n-\t\t       const atype_name *pwhich)\n+static void\n+eoshift1 (gfc_array_char *ret, const gfc_array_char *array, const atype *h,\n+\t  const char *pbound, const atype_name *pwhich, index_type size,\n+\t  char filler)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -70,7 +60,6 @@ eoshift1_`'atype_kind (gfc_array_char *ret,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n   int which;\n@@ -88,14 +77,8 @@ eoshift1_`'atype_kind (gfc_array_char *ret,\n   else\n     which = 0;\n \n-  if (!pbound)\n-    pbound = zeros;\n-\n-  size = GFC_DESCRIPTOR_SIZE (ret);\n-\n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n \n   if (ret->data == NULL)\n     {\n@@ -136,7 +119,7 @@ eoshift1_`'atype_kind (gfc_array_char *ret,\n           rstride[n] = ret->dim[dim].stride * size;\n           sstride[n] = array->dim[dim].stride * size;\n \n-          hstride[n] = h->dim[n].stride * size;\n+          hstride[n] = h->dim[n].stride;\n           n++;\n         }\n     }\n@@ -187,11 +170,18 @@ eoshift1_`'atype_kind (gfc_array_char *ret,\n         dest = rptr;\n       n = delta;\n \n-      while (n--)\n-        {\n-          memcpy (dest, pbound, size);\n-          dest += roffset;\n-        }\n+      if (pbound)\n+\twhile (n--)\n+\t  {\n+\t    memcpy (dest, pbound, size);\n+\t    dest += roffset;\n+\t  }\n+      else\n+\twhile (n--)\n+\t  {\n+\t    memset (dest, filler, size);\n+\t    dest += roffset;\n+\t  }\n \n       /* Advance to the next section.  */\n       rptr += rstride0;\n@@ -226,3 +216,33 @@ eoshift1_`'atype_kind (gfc_array_char *ret,\n         }\n     }\n }\n+\n+void eoshift1_`'atype_kind (gfc_array_char *, const gfc_array_char *,\n+\t\t\t    const atype *, const char *, const atype_name *);\n+export_proto(eoshift1_`'atype_kind);\n+\n+void\n+eoshift1_`'atype_kind (gfc_array_char *ret, const gfc_array_char *array,\n+\t\t       const atype *h, const char *pbound,\n+\t\t       const atype_name *pwhich)\n+{\n+  eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+}\n+\n+void eoshift1_`'atype_kind`'_char (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t\t   const gfc_array_char *, const atype *,\n+\t\t\t\t   const char *, const atype_name *,\n+\t\t\t\t   GFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(eoshift1_`'atype_kind`'_char);\n+\n+void\n+eoshift1_`'atype_kind`'_char (gfc_array_char *ret,\n+\t\t\t      GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\t\t      const gfc_array_char *array, const atype *h,\n+\t\t\t      const char *pbound, const atype_name *pwhich,\n+\t\t\t      GFC_INTEGER_4 array_length,\n+\t\t\t      GFC_INTEGER_4 bound_length\n+\t\t\t\t__attribute__((unused)))\n+{\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length, ' ');\n+}"}, {"sha": "aa4d8ddd33339ad177cf8d4aa337ea82182dd8ee", "filename": "libgfortran/m4/eoshift3.m4", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fm4%2Feoshift3.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7823229bc310fe007b397365afe17ee5e039a3af/libgfortran%2Fm4%2Feoshift3.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift3.m4?ref=7823229bc310fe007b397365afe17ee5e039a3af", "patch": "@@ -35,18 +35,10 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-static const char zeros[16] =\n-  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n-\n-extern void eoshift3_`'atype_kind (gfc_array_char *, gfc_array_char *,\n-\t\t\t\t     atype *, const gfc_array_char *,\n-\t\t\t\t     atype_name *);\n-export_proto(eoshift3_`'atype_kind);\n-\n-void\n-eoshift3_`'atype_kind (gfc_array_char *ret, gfc_array_char *array,\n-\t\t       atype *h, const gfc_array_char *bound,\n-\t\t       atype_name *pwhich)\n+static void\n+eoshift3 (gfc_array_char *ret, const gfc_array_char *array, const atype *h,\n+\t  const gfc_array_char *bound, const atype_name *pwhich,\n+\t  index_type size, char filler)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -72,7 +64,6 @@ eoshift3_`'atype_kind (gfc_array_char *ret, gfc_array_char *array,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n-  index_type size;\n   index_type len;\n   index_type n;\n   int which;\n@@ -90,7 +81,6 @@ eoshift3_`'atype_kind (gfc_array_char *ret, gfc_array_char *array,\n   else\n     which = 0;\n \n-  size = GFC_DESCRIPTOR_SIZE (ret);\n   if (ret->data == NULL)\n     {\n       int i;\n@@ -113,7 +103,6 @@ eoshift3_`'atype_kind (gfc_array_char *ret, gfc_array_char *array,\n \n   extent[0] = 1;\n   count[0] = 0;\n-  size = GFC_DESCRIPTOR_SIZE (array);\n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)\n     {\n@@ -162,7 +151,7 @@ eoshift3_`'atype_kind (gfc_array_char *ret, gfc_array_char *array,\n   if (bound)\n     bptr = bound->data;\n   else\n-    bptr = zeros;\n+    bptr = NULL;\n \n   while (rptr)\n     {\n@@ -196,11 +185,18 @@ eoshift3_`'atype_kind (gfc_array_char *ret, gfc_array_char *array,\n         dest = rptr;\n       n = delta;\n \n-      while (n--)\n-        {\n-          memcpy (dest, bptr, size);\n-          dest += roffset;\n-        }\n+      if (bptr)\n+\twhile (n--)\n+\t  {\n+\t    memcpy (dest, bptr, size);\n+\t    dest += roffset;\n+\t  }\n+      else\n+\twhile (n--)\n+\t  {\n+\t    memset (dest, filler, size);\n+\t    dest += roffset;\n+\t  }\n \n       /* Advance to the next section.  */\n       rptr += rstride0;\n@@ -238,3 +234,37 @@ eoshift3_`'atype_kind (gfc_array_char *ret, gfc_array_char *array,\n         }\n     }\n }\n+\n+extern void eoshift3_`'atype_kind (gfc_array_char *, const gfc_array_char *,\n+\t\t\t\t   const atype *, const gfc_array_char *,\n+\t\t\t\t   const atype_name *);\n+export_proto(eoshift3_`'atype_kind);\n+\n+void\n+eoshift3_`'atype_kind (gfc_array_char *ret, const gfc_array_char *array,\n+\t\t       const atype *h, const gfc_array_char *bound,\n+\t\t       const atype_name *pwhich)\n+{\n+  eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n+}\n+\n+extern void eoshift3_`'atype_kind`'_char (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t\t\t  const gfc_array_char *,\n+\t\t\t\t\t  const atype *,\n+\t\t\t\t\t  const gfc_array_char *,\n+\t\t\t\t\t  const atype_name *, GFC_INTEGER_4,\n+\t\t\t\t\t  GFC_INTEGER_4);\n+export_proto(eoshift3_`'atype_kind`'_char);\n+\n+void\n+eoshift3_`'atype_kind`'_char (gfc_array_char *ret,\n+\t\t\t      GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\t\t      const gfc_array_char *array, const atype *h,\n+\t\t\t      const gfc_array_char *bound,\n+\t\t\t      const atype_name *pwhich,\n+\t\t\t      GFC_INTEGER_4 array_length,\n+\t\t\t      GFC_INTEGER_4 bound_length\n+\t\t\t\t__attribute__((unused)))\n+{\n+  eoshift3 (ret, array, h, bound, pwhich, array_length, ' ');\n+}"}]}