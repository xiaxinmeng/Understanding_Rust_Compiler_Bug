{"sha": "9588ea78db1d58ab5eb4fccc93e8ef535ce48c66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU4OGVhNzhkYjFkNThhYjVlYjRmY2NjOTNlOGVmNTM1Y2U0OGM2Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-10-11T17:37:18Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-10-11T17:37:18Z"}, "message": "profile-count.h (slow_safe_scale_64bit): New function.\n\n\t* profile-count.h (slow_safe_scale_64bit): New function.\n\t(safe_scale_64bit): New inline.\n\t(profile_count::max_safe_multiplier): Remove; use safe_scale_64bit.\n\t* profile-count.c: Include wide-int.h\n\t(slow_safe_scale_64bit): New.\n\nFrom-SVN: r253652", "tree": {"sha": "e4dda70458567bbf0385750dbbf8f7196369a8d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4dda70458567bbf0385750dbbf8f7196369a8d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66/comments", "author": null, "committer": null, "parents": [{"sha": "278a84349ae1e964dea6bd3bc456e11eb712c9b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278a84349ae1e964dea6bd3bc456e11eb712c9b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/278a84349ae1e964dea6bd3bc456e11eb712c9b4"}], "stats": {"total": 77, "additions": 63, "deletions": 14}, "files": [{"sha": "c596313bb11b634c57c8754a444fed76ad451305", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9588ea78db1d58ab5eb4fccc93e8ef535ce48c66", "patch": "@@ -1,3 +1,11 @@\n+2017-10-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* profile-count.h (slow_safe_scale_64bit): New function.\n+\t(safe_scale_64bit): New inline.\n+\t(profile_count::max_safe_multiplier): Remove; use safe_scale_64bit.\n+\t* profile-count.c: Include wide-int.h\n+\t(slow_safe_scale_64bit): New.\n+\n 2017-10-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* tree.h (DECL_ASSEMBLER_NAME_SET_P): Don't check"}, {"sha": "02c9ec241d40a98b9c4130cbab3e551c3da5c950", "filename": "gcc/profile-count.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66/gcc%2Fprofile-count.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66/gcc%2Fprofile-count.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.c?ref=9588ea78db1d58ab5eb4fccc93e8ef535ce48c66", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"data-streamer.h\"\n #include \"cgraph.h\"\n+#include \"wide-int.h\"\n \n /* Dump THIS to F.  */\n \n@@ -194,3 +195,21 @@ profile_probability::stream_out (struct lto_output_stream *ob)\n   streamer_write_uhwi_stream (ob, m_val);\n   streamer_write_uhwi_stream (ob, m_quality);\n }\n+\n+/* Compute RES=(a*b + c/2)/c capping and return false if overflow happened.  */\n+\n+bool\n+slow_safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res)\n+{\n+  FIXED_WIDE_INT (128) tmp = a;\n+  bool overflow;\n+  tmp = wi::udiv_floor (wi::umul (tmp, b, &overflow) + (c / 2), c);\n+  gcc_checking_assert (!overflow);\n+  if (wi::fits_uhwi_p (tmp))\n+    {\n+      *res = tmp.to_uhwi ();\n+      return true;\n+    }\n+  *res = (uint64_t) -1;\n+  return false;\n+}"}, {"sha": "cb1aa365c9555625d25e1e29964d182a7ac6225e", "filename": "gcc/profile-count.h", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9588ea78db1d58ab5eb4fccc93e8ef535ce48c66/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=9588ea78db1d58ab5eb4fccc93e8ef535ce48c66", "patch": "@@ -43,6 +43,35 @@ enum profile_quality {\n \n #define RDIV(X,Y) (((X) + (Y) / 2) / (Y))\n \n+bool slow_safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res);\n+\n+/* Compute RES=(a*b + c/2)/c capping and return false if overflow happened.  */\n+\n+inline bool\n+safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res)\n+{\n+#if (GCC_VERSION >= 5000)\n+  uint64_t tmp;\n+  if (!__builtin_mul_overflow (a, b, &tmp)\n+      && !__builtin_add_overflow (tmp, c/2, &tmp))\n+    {\n+      *res = tmp / c;\n+      return true;\n+    }\n+  if (c == 1)\n+    {\n+      *res = (uint64_t) -1;\n+      return false;\n+    }\n+#else\n+  if (a < ((uint64_t)1 << 31)\n+      && b < ((uint64_t)1 << 31)\n+      && c < ((uint64_t)1 << 31))\n+    return (a * b + (c / 2)) / c;\n+#endif\n+  return slow_safe_scale_64bit (a, b, c, res);\n+}\n+\n /* Data type to hold probabilities.  It implements fixed point arithmetics\n    with capping so probability is always in range [0,1] and scaling requiring\n    values greater than 1 needs to be represented otherwise.\n@@ -87,7 +116,8 @@ class GTY((user)) profile_probability\n \n   static const int n_bits = 30;\n   static const uint32_t max_probability = REG_BR_PROB_BASE;\n-  static const uint32_t uninitialized_probability = ((uint32_t) 1 << n_bits) - 1;\n+  static const uint32_t uninitialized_probability\n+\t\t = ((uint32_t) 1 << (n_bits - 1)) - 1;\n \n   uint32_t m_val : 30;\n   enum profile_quality m_quality : 2;\n@@ -171,7 +201,7 @@ class GTY((user)) profile_probability\n   /* Return true if value can be trusted.  */\n   bool reliable_p () const\n     {\n-      return initialized_p ();\n+      return m_quality >= profile_adjusted;\n     }\n \n   /* Conversion from and to REG_BR_PROB_BASE integer fixpoint arithmetics.\n@@ -535,11 +565,6 @@ class GTY(()) profile_count\n \n   uint64_t m_val : n_bits;\n   enum profile_quality m_quality : 2;\n-\n-  /* Assume numbers smaller than this to multiply.  This is set to make\n-     testsuite pass, in future we may implement precise multiplication in higer\n-     rangers.  */\n-  static const uint64_t max_safe_multiplier = 131072;\n public:\n \n   /* Used for counters which are expected to be never executed.  */\n@@ -595,7 +620,7 @@ class GTY(()) profile_count\n   /* Return true if value can be trusted.  */\n   bool reliable_p () const\n     {\n-      return initialized_p ();\n+      return m_quality >= profile_adjusted;\n     }\n \n   /* When merging basic blocks, the two different profile counts are unified.\n@@ -790,12 +815,9 @@ class GTY(()) profile_count\n \treturn *this;\n \n       profile_count ret;\n-      /* Take care for overflows!  */\n-      if (num.m_val < max_safe_multiplier || m_val < max_safe_multiplier)\n-\tret.m_val = RDIV (m_val * num.m_val, den.m_val);\n-      else\n-\tret.m_val = RDIV (m_val * RDIV (num.m_val * max_safe_multiplier,\n-\t\t\t\t\tden.m_val), max_safe_multiplier);\n+      uint64_t val;\n+      safe_scale_64bit (m_val, num.m_val, den.m_val, &val);\n+      ret.m_val = MIN (val, max_count);\n       ret.m_quality = MIN (m_quality, profile_adjusted);\n       return ret;\n     }"}]}