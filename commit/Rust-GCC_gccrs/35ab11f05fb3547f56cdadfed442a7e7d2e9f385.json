{"sha": "35ab11f05fb3547f56cdadfed442a7e7d2e9f385", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhYjExZjA1ZmIzNTQ3ZjU2Y2RhZGZlZDQ0MmE3ZTdkMmU5ZjM4NQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2001-02-19T21:10:14Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-02-19T21:10:14Z"}, "message": "typeck.c (build_java_array_type): Don't try to poke a public `clone' method into array types.\n\n\t* typeck.c (build_java_array_type): Don't try to poke a public `clone'\n\tmethod into array types.\n\t* parse.y (patch_method_invocation): Bypass access check on clone call\n\tto array instance.\n\nFrom-SVN: r39906", "tree": {"sha": "248b78232c08b9685d46350e2b625d65a380d945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/248b78232c08b9685d46350e2b625d65a380d945"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35ab11f05fb3547f56cdadfed442a7e7d2e9f385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ab11f05fb3547f56cdadfed442a7e7d2e9f385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35ab11f05fb3547f56cdadfed442a7e7d2e9f385", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ab11f05fb3547f56cdadfed442a7e7d2e9f385/comments", "author": null, "committer": null, "parents": [{"sha": "7539316943c17368ce5ef876a9baba6b8c2e64f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7539316943c17368ce5ef876a9baba6b8c2e64f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7539316943c17368ce5ef876a9baba6b8c2e64f6"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "f19c3fffc499e5f7199a320c4ff2f198c250db2f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ab11f05fb3547f56cdadfed442a7e7d2e9f385/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ab11f05fb3547f56cdadfed442a7e7d2e9f385/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=35ab11f05fb3547f56cdadfed442a7e7d2e9f385", "patch": "@@ -1,3 +1,10 @@\n+2001-02-18  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* typeck.c (build_java_array_type): Don't try to poke a public `clone'\n+\tmethod into array types.\n+\t* parse.y (patch_method_invocation): Bypass access check on clone call\n+\tto array instance.\n+\t\n 2001-02-15  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* expr.c (build_instanceof): Check for arrays when trying fold to"}, {"sha": "cb8525a8521462457c426a9d50418efa3deb6c7f", "filename": "gcc/java/parse.y", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ab11f05fb3547f56cdadfed442a7e7d2e9f385/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ab11f05fb3547f56cdadfed442a7e7d2e9f385/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=35ab11f05fb3547f56cdadfed442a7e7d2e9f385", "patch": "@@ -9684,6 +9684,7 @@ patch_method_invocation (patch, primary, where, from_super,\n   int is_static_flag = 0;\n   int is_super_init = 0;\n   tree this_arg = NULL_TREE;\n+  int is_array_clone_call = 0;\n   \n   /* Should be overriden if everything goes well. Otherwise, if\n      something fails, it should keep this value. It stop the\n@@ -9758,6 +9759,9 @@ patch_method_invocation (patch, primary, where, from_super,\n       else\n \tthis_arg = primary = resolved;\n       \n+      if (TYPE_ARRAY_P (type) && identifier == get_identifier (\"clone\"))\n+        is_array_clone_call = 1;\n+      \n       /* IDENTIFIER_WFL will be used to report any problem further */\n       wfl = identifier_wfl;\n     }\n@@ -9839,6 +9843,10 @@ patch_method_invocation (patch, primary, where, from_super,\n          can't be executed then. */\n       if (!list)\n \tPATCH_METHOD_RETURN_ERROR ();\n+      \n+      if (TYPE_ARRAY_P (class_to_search)\n+          && DECL_NAME (list) == get_identifier (\"clone\"))\n+        is_array_clone_call = 1;\n \n       /* Check for static reference if non static methods */\n       if (check_for_static_method_reference (wfl, patch, list, \n@@ -9909,7 +9917,9 @@ patch_method_invocation (patch, primary, where, from_super,\n      return the call */\n   if (not_accessible_p (DECL_CONTEXT (current_function_decl), list,\n \t\t\t(primary ? TREE_TYPE (TREE_TYPE (primary)) : \n-\t\t\t NULL_TREE), from_super))\n+\t\t\t NULL_TREE), from_super)\n+      /* Calls to clone() on array types are permitted as a special-case. */\n+      && !is_array_clone_call)\n     {\n       char *fct_name = (char *) IDENTIFIER_POINTER (DECL_NAME (list));\n       char *access = java_accstring_lookup (get_access_flags_from_decl (list));"}]}