{"sha": "828552ed0b8aff5e46770b4c32a7608b04ee3788", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4NTUyZWQwYjhhZmY1ZTQ2NzcwYjRjMzJhNzYwOGIwNGVlMzc4OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-05-15T13:09:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-05-15T13:09:53Z"}, "message": "re PR tree-optimization/39999 (gcc 4.4.0 compiles in infinite loop)\n\n2009-05-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/39999\n\t* gimple.h (gimple_expr_type): Use the expression type looking\n\tthrough useless conversions.\n\t* tree-ssa-sccvn.c (vn_nary_op_lookup_stmt): Use gimple_expr_type.\n\t(vn_nary_op_insert_stmt): Likewise.\n\t(simplify_binary_expression): Likewise.\n\n\t* gcc.c-torture/compile/pr39999.c: New testcase.\n\nFrom-SVN: r147573", "tree": {"sha": "f22e80535ee47a66c5898bcd81363b613840d2c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f22e80535ee47a66c5898bcd81363b613840d2c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828552ed0b8aff5e46770b4c32a7608b04ee3788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828552ed0b8aff5e46770b4c32a7608b04ee3788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828552ed0b8aff5e46770b4c32a7608b04ee3788", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828552ed0b8aff5e46770b4c32a7608b04ee3788/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "248fc9f328f5f1c4d94052c073bdc7699cacb382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248fc9f328f5f1c4d94052c073bdc7699cacb382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248fc9f328f5f1c4d94052c073bdc7699cacb382"}], "stats": {"total": 105, "additions": 73, "deletions": 32}, "files": [{"sha": "40546fbf0929ddbcd69c2a6a23cc93b477464b3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828552ed0b8aff5e46770b4c32a7608b04ee3788/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828552ed0b8aff5e46770b4c32a7608b04ee3788/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=828552ed0b8aff5e46770b4c32a7608b04ee3788", "patch": "@@ -1,3 +1,12 @@\n+2009-05-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/39999\n+\t* gimple.h (gimple_expr_type): Use the expression type looking\n+\tthrough useless conversions.\n+\t* tree-ssa-sccvn.c (vn_nary_op_lookup_stmt): Use gimple_expr_type.\n+\t(vn_nary_op_insert_stmt): Likewise.\n+\t(simplify_binary_expression): Likewise.\n+\n 2009-05-15  Richard Guenther  <rguenther@suse.de>\n \n \t* common.opt (-ftree-forwprop, -ftree-phiprop, -ftree-pta):"}, {"sha": "ffcf9aa95aeb89d9c695fdaebc8f7ce6b59e4590", "filename": "gcc/gimple.h", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828552ed0b8aff5e46770b4c32a7608b04ee3788/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828552ed0b8aff5e46770b4c32a7608b04ee3788/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=828552ed0b8aff5e46770b4c32a7608b04ee3788", "patch": "@@ -1360,35 +1360,6 @@ gimple_modified_p (const_gimple g)\n   return (gimple_has_ops (g)) ? (bool) g->gsbase.modified : false;\n }\n \n-/* Return the type of the main expression computed by STMT.  Return\n-   void_type_node if the statement computes nothing.  */\n-\n-static inline tree\n-gimple_expr_type (const_gimple stmt)\n-{\n-  enum gimple_code code = gimple_code (stmt);\n-\n-  if (code == GIMPLE_ASSIGN || code == GIMPLE_CALL)\n-    {\n-      tree type = TREE_TYPE (gimple_get_lhs (stmt));\n-      /* Integral sub-types are never the type of the expression,\n-         but they still can be the type of the result as the base\n-\t type (in which expressions are computed) is trivially\n-\t convertible to one of its sub-types.  So always return\n-\t the base type here.  */\n-      if (INTEGRAL_TYPE_P (type)\n-\t  && TREE_TYPE (type)\n-\t  /* But only if they are trivially convertible.  */\n-\t  && useless_type_conversion_p (type, TREE_TYPE (type)))\n-\ttype = TREE_TYPE (type);\n-      return type;\n-    }\n-  else if (code == GIMPLE_COND)\n-    return boolean_type_node;\n-  else\n-    return void_type_node;\n-}\n-\n \n /* Return the tree code for the expression computed by STMT.  This is\n    only valid for GIMPLE_COND, GIMPLE_CALL and GIMPLE_ASSIGN.  For\n@@ -4242,6 +4213,44 @@ gimple_predict_set_outcome (gimple gs, enum prediction outcome)\n }\n \n \n+/* Return the type of the main expression computed by STMT.  Return\n+   void_type_node if the statement computes nothing.  */\n+\n+static inline tree\n+gimple_expr_type (const_gimple stmt)\n+{\n+  enum gimple_code code = gimple_code (stmt);\n+\n+  if (code == GIMPLE_ASSIGN || code == GIMPLE_CALL)\n+    {\n+      tree type;\n+      /* In general we want to pass out a type that can be substituted\n+         for both the RHS and the LHS types if there is a possibly\n+\t useless conversion involved.  That means returning the\n+\t original RHS type as far as we can reconstruct it.  */\n+      if (code == GIMPLE_CALL)\n+\ttype = gimple_call_return_type (stmt);\n+      else\n+\tswitch (gimple_assign_rhs_code (stmt))\n+\t  {\n+\t  case POINTER_PLUS_EXPR:\n+\t    type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n+\t    break;\n+\n+\t  default:\n+\t    /* As fallback use the type of the LHS.  */\n+\t    type = TREE_TYPE (gimple_get_lhs (stmt));\n+\t    break;\n+\t  }\n+      return type;\n+    }\n+  else if (code == GIMPLE_COND)\n+    return boolean_type_node;\n+  else\n+    return void_type_node;\n+}\n+\n+\n /* Return a new iterator pointing to GIMPLE_SEQ's first statement.  */\n \n static inline gimple_stmt_iterator"}, {"sha": "63c8e671b8dee3967462cdf4b349e5137fc2046b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828552ed0b8aff5e46770b4c32a7608b04ee3788/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828552ed0b8aff5e46770b4c32a7608b04ee3788/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=828552ed0b8aff5e46770b4c32a7608b04ee3788", "patch": "@@ -1,3 +1,8 @@\n+2009-05-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/39999\n+\t* gcc.c-torture/compile/pr39999.c: New testcase.\n+\n 2009-05-15  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.c-torture/compile/ptr-conv-1.c: New test."}, {"sha": "c46a651a18aacc1c87a589d5de5d7c7d5deab5e6", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39999.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828552ed0b8aff5e46770b4c32a7608b04ee3788/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39999.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828552ed0b8aff5e46770b4c32a7608b04ee3788/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39999.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39999.c?ref=828552ed0b8aff5e46770b4c32a7608b04ee3788", "patch": "@@ -0,0 +1,18 @@\n+void foo(void *);\n+void\n+MMAPGCD (int *A1, int *A2)\n+{\n+  int *t;\n+\n+  do\n+    {\n+      t = A1;\n+      A1 = A2;\n+      A2 = t;\n+    }\n+  while (A2[-1]);\n+\n+  foo (A1-1);\n+  foo (A2-1);\n+}\n+"}, {"sha": "e64b7ee050c39853d236190436d27bafea3bb179", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828552ed0b8aff5e46770b4c32a7608b04ee3788/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828552ed0b8aff5e46770b4c32a7608b04ee3788/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=828552ed0b8aff5e46770b4c32a7608b04ee3788", "patch": "@@ -1232,7 +1232,7 @@ vn_nary_op_lookup_stmt (gimple stmt, vn_nary_op_t *vnresult)\n     *vnresult = NULL;\n   vno1.opcode = gimple_assign_rhs_code (stmt);\n   vno1.length = gimple_num_ops (stmt) - 1;\n-  vno1.type = TREE_TYPE (gimple_assign_lhs (stmt));\n+  vno1.type = gimple_expr_type (stmt);\n   for (i = 0; i < vno1.length; ++i)\n     vno1.op[i] = gimple_op (stmt, i + 1);\n   if (vno1.opcode == REALPART_EXPR\n@@ -1340,7 +1340,7 @@ vn_nary_op_insert_stmt (gimple stmt, tree result)\n   vno1->value_id = VN_INFO (result)->value_id;\n   vno1->opcode = gimple_assign_rhs_code (stmt);\n   vno1->length = length;\n-  vno1->type = TREE_TYPE (gimple_assign_lhs (stmt));\n+  vno1->type = gimple_expr_type (stmt);\n   for (i = 0; i < vno1->length; ++i)\n     vno1->op[i] = gimple_op (stmt, i + 1);\n   if (vno1->opcode == REALPART_EXPR\n@@ -2065,7 +2065,7 @@ simplify_binary_expression (gimple stmt)\n   fold_defer_overflow_warnings ();\n \n   result = fold_binary (gimple_assign_rhs_code (stmt),\n-\t\t        TREE_TYPE (gimple_get_lhs (stmt)), op0, op1);\n+\t\t        gimple_expr_type (stmt), op0, op1);\n   if (result)\n     STRIP_USELESS_TYPE_CONVERSION (result);\n "}]}