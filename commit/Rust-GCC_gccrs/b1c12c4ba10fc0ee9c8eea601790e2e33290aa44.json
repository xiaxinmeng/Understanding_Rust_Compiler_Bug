{"sha": "b1c12c4ba10fc0ee9c8eea601790e2e33290aa44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFjMTJjNGJhMTBmYzBlZTljOGVlYTYwMTc5MGUyZTMzMjkwYWE0NA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-05-30T18:39:02Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-05-30T18:39:02Z"}, "message": "ada.h: Add MI guard macro.\n\n\t* ada.h: Add MI guard macro.\n\t(SUBTYPE): Define constants with an anonymous enum, not static\n\tconst variables.\n\t(IN): Cast constants to appropriate type before use.\n\nFrom-SVN: r54063", "tree": {"sha": "2ecd37b52f1371cd813d01791c8b01cfb6988617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ecd37b52f1371cd813d01791c8b01cfb6988617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1c12c4ba10fc0ee9c8eea601790e2e33290aa44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c12c4ba10fc0ee9c8eea601790e2e33290aa44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c12c4ba10fc0ee9c8eea601790e2e33290aa44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c12c4ba10fc0ee9c8eea601790e2e33290aa44/comments", "author": null, "committer": null, "parents": [{"sha": "c8ea9a0f1d8b83b4e8692f450df9da5de0714118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ea9a0f1d8b83b4e8692f450df9da5de0714118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8ea9a0f1d8b83b4e8692f450df9da5de0714118"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "bc593e3588512a2abb4d60fa772f80f396411ed8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c12c4ba10fc0ee9c8eea601790e2e33290aa44/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c12c4ba10fc0ee9c8eea601790e2e33290aa44/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b1c12c4ba10fc0ee9c8eea601790e2e33290aa44", "patch": "@@ -1,3 +1,10 @@\n+2002-05-30  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* ada.h: Add MI guard macro.\n+\t(SUBTYPE): Define constants with an anonymous enum, not static\n+\tconst variables.\n+\t(IN): Cast constants to appropriate type before use.\n+\n 2002-05-26  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gnatvsn.ads (Gnat_Version_String): Change to \"3.2 20020526"}, {"sha": "422cb4c2b2c5b5d27da190fa8a524b39c7be7ad6", "filename": "gcc/ada/ada.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c12c4ba10fc0ee9c8eea601790e2e33290aa44/gcc%2Fada%2Fada.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c12c4ba10fc0ee9c8eea601790e2e33290aa44/gcc%2Fada%2Fada.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada.h?ref=b1c12c4ba10fc0ee9c8eea601790e2e33290aa44", "patch": "@@ -7,7 +7,7 @@\n  *                              C Header File                               *\n  *                                                                          *\n  *                                                                          *\n- *          Copyright (C) 1992-2001 Free Software Foundation, Inc.          *\n+ *          Copyright (C) 1992-2002 Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -34,6 +34,9 @@\n /* This file contains some standard macros for performing Ada-like\n    operations. These are used to aid in the translation of other headers. */\n \n+#ifndef GCC_ADA_H\n+#define GCC_ADA_H\n+\n /* Inlined functions in header are preceded by INLINE, which is normally set\n    to extern inline for GCC, but may be set to static for use in standard \n    ANSI-C.  */\n@@ -62,14 +65,17 @@\n    effect is to compile a typedef defining the subtype as a synonym for the \n    type, together with two constants defining the end points.  */\n \n-#define SUBTYPE(SUBTYPE,TYPE,FIRST,LAST)    \\\n-  typedef TYPE SUBTYPE;\t\t    \\\n-  static const SUBTYPE CAT (SUBTYPE,__First) = FIRST; \\\n-  static const SUBTYPE CAT (SUBTYPE,__Last) = LAST;\n+#define SUBTYPE(SUBTYPE,TYPE,FIRST,LAST)\t\\\n+  typedef TYPE SUBTYPE;\t\t\t\t\\\n+  enum { CAT (SUBTYPE,__First) = FIRST,\t\t\\\n+         CAT (SUBTYPE,__Last) = LAST };\n \n /* The following definitions provide the equivalent of the Ada IN and NOT IN\n    operators, assuming that the subtype involved has been defined using the \n    SUBTYPE macro defined above.  */\n \n #define IN(VALUE,SUBTYPE) \\\n-  (((VALUE) >= CAT (SUBTYPE,__First)) && ((VALUE) <= CAT (SUBTYPE,__Last)))\n+  (((VALUE) >= (SUBTYPE) CAT (SUBTYPE,__First)) && \\\n+   ((VALUE) <= (SUBTYPE) CAT (SUBTYPE,__Last)))\n+\n+#endif"}]}