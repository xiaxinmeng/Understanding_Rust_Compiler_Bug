{"sha": "d50a16c4335e68f36982ab6e2de8744d6bcd101d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUwYTE2YzQzMzVlNjhmMzY5ODJhYjZlMmRlODc0NGQ2YmNkMTAxZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@act-europe.fr", "date": "2004-03-08T06:48:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-03-08T06:48:51Z"}, "message": "expr.c (highest_pow2_factor_for_type): Rename into highest_pow2_factor_for_target.\n\n\t* expr.c (highest_pow2_factor_for_type): Rename into\n\thighest_pow2_factor_for_target.  Use DECL_ALIGN instead of\n\tTYPE_ALIGN when the target is a COMPONENT_REF.\n\t(expand_assignment): Ajust call to highest_pow2_factor_for_type.\n\nFrom-SVN: r79101", "tree": {"sha": "fa9e3e9dcafa91608c9e55c39fab6204b9942a22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa9e3e9dcafa91608c9e55c39fab6204b9942a22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d50a16c4335e68f36982ab6e2de8744d6bcd101d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50a16c4335e68f36982ab6e2de8744d6bcd101d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d50a16c4335e68f36982ab6e2de8744d6bcd101d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50a16c4335e68f36982ab6e2de8744d6bcd101d/comments", "author": null, "committer": null, "parents": [{"sha": "b1917422afdc729bafd42f01433fd4d0e2cdf760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1917422afdc729bafd42f01433fd4d0e2cdf760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1917422afdc729bafd42f01433fd4d0e2cdf760"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "f080f0524f68eaf8129db5e99c3bfefb464c7974", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50a16c4335e68f36982ab6e2de8744d6bcd101d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50a16c4335e68f36982ab6e2de8744d6bcd101d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d50a16c4335e68f36982ab6e2de8744d6bcd101d", "patch": "@@ -1,3 +1,10 @@\n+2004-03-08  Eric Botcazou  <ebotcazou@act-europe.fr>\n+\n+\t* expr.c (highest_pow2_factor_for_type): Rename into\n+\thighest_pow2_factor_for_target.  Use DECL_ALIGN instead of\n+\tTYPE_ALIGN when the target is a COMPONENT_REF.\n+\t(expand_assignment): Ajust call to highest_pow2_factor_for_type.\n+\n 2004-03-08  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.c: Formatting fix."}, {"sha": "d5267505c6b506557ae7fe384829a75e8300d900", "filename": "gcc/expr.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50a16c4335e68f36982ab6e2de8744d6bcd101d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50a16c4335e68f36982ab6e2de8744d6bcd101d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d50a16c4335e68f36982ab6e2de8744d6bcd101d", "patch": "@@ -156,7 +156,7 @@ static rtx store_field (rtx, HOST_WIDE_INT, HOST_WIDE_INT, enum machine_mode,\n static rtx var_rtx (tree);\n \n static unsigned HOST_WIDE_INT highest_pow2_factor (tree);\n-static unsigned HOST_WIDE_INT highest_pow2_factor_for_type (tree, tree);\n+static unsigned HOST_WIDE_INT highest_pow2_factor_for_target (tree, tree);\n \n static int is_aligning_offset (tree, tree);\n static rtx expand_increment (tree, int, int);\n@@ -3800,8 +3800,8 @@ expand_assignment (tree to, tree from, int want_value)\n \t    }\n \n \t  to_rtx = offset_address (to_rtx, offset_rtx,\n-\t\t\t\t   highest_pow2_factor_for_type (TREE_TYPE (to),\n-\t\t\t\t\t\t\t\t offset));\n+\t\t\t\t   highest_pow2_factor_for_target (to,\n+\t\t\t\t   \t\t\t\t   offset));\n \t}\n \n       if (GET_CODE (to_rtx) == MEM)\n@@ -6049,17 +6049,22 @@ highest_pow2_factor (tree exp)\n   return 1;\n }\n \n-/* Similar, except that it is known that the expression must be a multiple\n-   of the alignment of TYPE.  */\n+/* Similar, except that the alignment requirements of TARGET are\n+   taken into account.  Assume it is at least as aligned as its\n+   type, unless it is a COMPONENT_REF in which case the layout of\n+   the structure gives the alignment.  */\n \n static unsigned HOST_WIDE_INT\n-highest_pow2_factor_for_type (tree type, tree exp)\n+highest_pow2_factor_for_target (tree target, tree exp)\n {\n-  unsigned HOST_WIDE_INT type_align, factor;\n+  unsigned HOST_WIDE_INT target_align, factor;\n \n   factor = highest_pow2_factor (exp);\n-  type_align = TYPE_ALIGN (type) / BITS_PER_UNIT;\n-  return MAX (factor, type_align);\n+  if (TREE_CODE (target) == COMPONENT_REF)\n+    target_align = DECL_ALIGN (TREE_OPERAND (target, 1)) / BITS_PER_UNIT;\n+  else\n+    target_align = TYPE_ALIGN (TREE_TYPE (target)) / BITS_PER_UNIT;\n+  return MAX (factor, target_align);\n }\n \f\n /* Return an object on the placeholder list that matches EXP, a"}, {"sha": "57c2edaff987db88e3dc7e87b145e89e7b9845e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50a16c4335e68f36982ab6e2de8744d6bcd101d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50a16c4335e68f36982ab6e2de8744d6bcd101d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d50a16c4335e68f36982ab6e2de8744d6bcd101d", "patch": "@@ -1,3 +1,7 @@\n+2004-03-08  Eric Botcazou  <ebotcazou@act-europe.fr>\n+\n+\t* gcc.c-torture/execute/20040308-1.c: New test.\n+\n 2004-03-07  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.c-torture/execute/20040307-1.c: New test case."}, {"sha": "4c63535e7f7c79a8182675f6e14d85d657b63745", "filename": "gcc/testsuite/gcc.c-torture/execute/20040308-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50a16c4335e68f36982ab6e2de8744d6bcd101d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040308-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50a16c4335e68f36982ab6e2de8744d6bcd101d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040308-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040308-1.c?ref=d50a16c4335e68f36982ab6e2de8744d6bcd101d", "patch": "@@ -0,0 +1,21 @@\n+/* This used to fail on SPARC with an unaligned memory access.  */\n+\n+void foo(int n)\n+{\n+  struct S {\n+    int i[n];\n+    unsigned int b:1;\n+    int i2;\n+  } __attribute__ ((packed)) __attribute__ ((aligned (4)));\n+\n+  struct S s;\n+\n+  s.i2 = 0;\n+}\n+\n+int main(void)\n+{\n+  foo(4);\n+  \n+  return 0;\n+}"}]}