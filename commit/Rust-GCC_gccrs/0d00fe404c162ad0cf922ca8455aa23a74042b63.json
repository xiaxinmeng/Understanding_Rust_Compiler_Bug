{"sha": "0d00fe404c162ad0cf922ca8455aa23a74042b63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQwMGZlNDA0YzE2MmFkMGNmOTIyY2E4NDU1YWEyM2E3NDA0MmI2Mw==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-06-09T13:21:34Z"}, "committer": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-07-09T22:17:52Z"}, "message": "openacc: Set bias to zero for explicit attach/detach clauses in C and C++\n\nThis is a fix for the pointer (or array) size inadvertently being used\nfor the bias with attach and detach mapping kinds, for both C and C++.\n\n2020-07-09  Julian Brown  <julian@codesourcery.com>\n\t    Thomas Schwinge  <thomas@codesourcery.com>\n\ngcc/c/\n\tPR middle-end/95270\n\t* c-typeck.c (c_finish_omp_clauses): Set OMP_CLAUSE_SIZE (bias) to zero\n\tfor standalone attach/detach clauses.\n\ngcc/cp/\n\tPR middle-end/95270\n\t* semantics.c (finish_omp_clauses): Likewise.\n\ninclude/\n\tPR middle-end/95270\n\t* gomp-constants.h (gomp_map_kind): Expand comment for attach/detach\n\tmapping kinds.\n\ngcc/testsuite/\n\tPR middle-end/95270\n\t* c-c++-common/goacc/mdc-1.c: Update expected dump output for zero\n\tbias.\n\nlibgomp/\n\tPR middle-end/95270\n\t* testsuite/libgomp.oacc-c-c++-common/pr95270-1.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/pr95270-2.c: New test.", "tree": {"sha": "7bfe4e084bf6104faaed0ed4a85fe8296c627799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bfe4e084bf6104faaed0ed4a85fe8296c627799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d00fe404c162ad0cf922ca8455aa23a74042b63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d00fe404c162ad0cf922ca8455aa23a74042b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d00fe404c162ad0cf922ca8455aa23a74042b63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d00fe404c162ad0cf922ca8455aa23a74042b63/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d"}], "stats": {"total": 147, "additions": 139, "deletions": 8}, "files": [{"sha": "fb5c288b54988d7038cc46dc14e2dfb6a177446a", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d00fe404c162ad0cf922ca8455aa23a74042b63/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d00fe404c162ad0cf922ca8455aa23a74042b63/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=0d00fe404c162ad0cf922ca8455aa23a74042b63", "patch": "@@ -14579,6 +14579,15 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t}\n \t      if (c_oacc_check_attachments (c))\n \t\tremove = true;\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t\t  && (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_ATTACH\n+\t\t      || OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_DETACH))\n+\t\t/* In this case, we have a single array element which is a\n+\t\t   pointer, and we already set OMP_CLAUSE_SIZE in\n+\t\t   handle_omp_array_sections above.  For attach/detach clauses,\n+\t\t   reset the OMP_CLAUSE_SIZE (representing a bias) to zero\n+\t\t   here.  */\n+\t\tOMP_CLAUSE_SIZE (c) = size_zero_node;\n \t      break;\n \t    }\n \t  if (t == error_mark_node)\n@@ -14592,6 +14601,13 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      remove = true;\n \t      break;\n \t    }\n+\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t      && (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_ATTACH\n+\t\t  || OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_DETACH))\n+\t    /* For attach/detach clauses, set OMP_CLAUSE_SIZE (representing a\n+\t       bias) to zero here, so it is not set erroneously to the pointer\n+\t       size later on in gimplify.c.  */\n+\t    OMP_CLAUSE_SIZE (c) = size_zero_node;\n \t  if (TREE_CODE (t) == COMPONENT_REF\n \t      && OMP_CLAUSE_CODE (c) != OMP_CLAUSE__CACHE_)\n \t    {"}, {"sha": "4a3ef3d28393597934e4603ec82a5d0869e108b7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d00fe404c162ad0cf922ca8455aa23a74042b63/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d00fe404c162ad0cf922ca8455aa23a74042b63/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0d00fe404c162ad0cf922ca8455aa23a74042b63", "patch": "@@ -7362,6 +7362,15 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t}\n \t      if (cp_oacc_check_attachments (c))\n \t\tremove = true;\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t\t  && (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_ATTACH\n+\t\t      || OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_DETACH))\n+\t\t/* In this case, we have a single array element which is a\n+\t\t   pointer, and we already set OMP_CLAUSE_SIZE in\n+\t\t   handle_omp_array_sections above.  For attach/detach clauses,\n+\t\t   reset the OMP_CLAUSE_SIZE (representing a bias) to zero\n+\t\t   here.  */\n+\t\tOMP_CLAUSE_SIZE (c) = size_zero_node;\n \t      break;\n \t    }\n \t  if (t == error_mark_node)\n@@ -7375,6 +7384,13 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      remove = true;\n \t      break;\n \t    }\n+\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t      && (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_ATTACH\n+\t\t  || OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_DETACH))\n+\t    /* For attach/detach clauses, set OMP_CLAUSE_SIZE (representing a\n+\t       bias) to zero here, so it is not set erroneously to the pointer\n+\t       size later on in gimplify.c.  */\n+\t    OMP_CLAUSE_SIZE (c) = size_zero_node;\n \t  if (REFERENCE_REF_P (t)\n \t      && TREE_CODE (TREE_OPERAND (t, 0)) == COMPONENT_REF)\n \t    {"}, {"sha": "337c1f7cc77ebb3786b161c3097e22c433078b38", "filename": "gcc/testsuite/c-c++-common/goacc/mdc-1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d00fe404c162ad0cf922ca8455aa23a74042b63/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d00fe404c162ad0cf922ca8455aa23a74042b63/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c?ref=0d00fe404c162ad0cf922ca8455aa23a74042b63", "patch": "@@ -45,12 +45,12 @@ t1 ()\n \n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.to:s .len: 32..\" 1 \"omplower\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_data map.tofrom:.z .len: 40.. map.struct:s .len: 1.. map.alloc:s.a .len: 8.. map.tofrom:._1 .len: 40.. map.attach:s.a .bias: 0..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_parallel map.attach:s.e .bias: 8.. map.tofrom:s .len: 32\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.attach:a .bias: 8..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.detach:a .bias: 8..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_parallel map.attach:s.e .bias: 0.. map.tofrom:s .len: 32\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.attach:a .bias: 0..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.detach:a .bias: 0..\" 1 \"omplower\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.to:a .len: 8..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.detach:s.e .bias: 8..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_data map.attach:s.e .bias: 8..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.detach:s.e .bias: 0..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_data map.attach:s.e .bias: 0..\" 1 \"omplower\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.release:a .len: 8..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data finalize map.force_detach:a .bias: 8..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data finalize map.force_detach:s.a .bias: 8..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data finalize map.force_detach:a .bias: 0..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data finalize map.force_detach:s.a .bias: 0..\" 1 \"omplower\" } } */"}, {"sha": "7e44238ae03e07ed154b823f9b30b1bf97b0727e", "filename": "include/gomp-constants.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d00fe404c162ad0cf922ca8455aa23a74042b63/include%2Fgomp-constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d00fe404c162ad0cf922ca8455aa23a74042b63/include%2Fgomp-constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgomp-constants.h?ref=0d00fe404c162ad0cf922ca8455aa23a74042b63", "patch": "@@ -139,7 +139,12 @@ enum gomp_map_kind\n     /* Decrement usage count and deallocate if zero.  */\n     GOMP_MAP_RELEASE =\t\t\t(GOMP_MAP_FLAG_SPECIAL_2\n \t\t\t\t\t | GOMP_MAP_DELETE),\n-    /* In OpenACC, attach a pointer to a mapped struct field.  */\n+    /* The attach/detach mappings below use the OMP_CLAUSE_SIZE field as a\n+       bias.  This will typically be zero, except when mapping an array slice\n+       with a non-zero base.  In that case the bias will indicate the\n+       (positive) difference between the start of the actual mapped data and\n+       the \"virtual\" origin of the array.\n+       In OpenACC, attach a pointer to a mapped struct field.  */\n     GOMP_MAP_ATTACH =\t\t\t(GOMP_MAP_DEEP_COPY | 0),\n     /* In OpenACC, detach a pointer to a mapped struct field.  */\n     GOMP_MAP_DETACH =\t\t\t(GOMP_MAP_DEEP_COPY | 1),"}, {"sha": "0457c232bc9294060c44a7235a1bfd9e5194c6f9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr95270-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d00fe404c162ad0cf922ca8455aa23a74042b63/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d00fe404c162ad0cf922ca8455aa23a74042b63/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-1.c?ref=0d00fe404c162ad0cf922ca8455aa23a74042b63", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+\n+#include <assert.h>\n+#include <openacc.h>\n+#include <stdint.h>\n+\n+int\n+main ()\n+{\n+  int data;\n+  int *data_p_dev = (int *) acc_create (&data, sizeof data);\n+  int *data_p = &data;\n+  uintptr_t ptrbits;\n+\n+  acc_copyin (&data_p, sizeof data_p);\n+\n+  /* Test attach/detach directives.  */\n+#pragma acc enter data attach(data_p)\n+#pragma acc serial copyout(ptrbits) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n+  {\n+    ptrbits = (uintptr_t) data_p;\n+  }\n+#pragma acc exit data detach(data_p)\n+  assert ((void *) ptrbits == data_p_dev);\n+\n+  acc_update_self (&data_p, sizeof data_p);\n+  assert (data_p == &data);\n+\n+  /* Test attach/detach API call.  */\n+  acc_attach ((void **) &data_p);\n+#pragma acc serial copyout(ptrbits) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n+  {\n+    ptrbits = (uintptr_t) data_p;\n+  }\n+  acc_detach ((void **) &data_p);\n+\n+  assert ((void *) ptrbits == data_p_dev);\n+  acc_update_self (&data_p, sizeof data_p);\n+  assert (data_p == &data);\n+\n+  acc_delete (&data_p, sizeof data_p);\n+  acc_delete (&data, sizeof data);\n+\n+  return 0;\n+}\n+"}, {"sha": "0575e726738de53ec7170f6b1789466c8005195f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr95270-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d00fe404c162ad0cf922ca8455aa23a74042b63/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d00fe404c162ad0cf922ca8455aa23a74042b63/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-2.c?ref=0d00fe404c162ad0cf922ca8455aa23a74042b63", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+\n+#include <assert.h>\n+#include <openacc.h>\n+#include <stdint.h>\n+\n+#define N 128\n+\n+int\n+main ()\n+{\n+  int *ptrarr[N];\n+  int otherarr[N];\n+  int sum = 0, hostsum = 0;\n+\n+  for (int i = 0; i < N; i++)\n+    {\n+      otherarr[i] = i * 2 + 1;\n+      ptrarr[i] = &otherarr[N - 1 - i];\n+      hostsum += otherarr[i];\n+    }\n+\n+  acc_copyin (otherarr, sizeof otherarr);\n+  acc_copyin (ptrarr, sizeof ptrarr);\n+\n+  for (int i = 0; i < N; i++)\n+    {\n+      #pragma acc enter data attach(ptrarr[i])\n+    }\n+\n+  #pragma acc parallel loop copyin(ptrarr[0:N], otherarr[0:N]) \\\n+\t\t       reduction(+:sum)\n+  for (int i = 0; i < N; i++)\n+    sum += *ptrarr[i];\n+\n+  for (int i = 0; i < N; i++)\n+    {\n+      #pragma acc exit data detach(ptrarr[i])\n+    }\n+\n+  assert (sum == hostsum);\n+\n+  acc_delete (ptrarr, sizeof ptrarr);\n+  acc_delete (otherarr, sizeof otherarr);\n+\n+  return 0;\n+}\n+"}]}