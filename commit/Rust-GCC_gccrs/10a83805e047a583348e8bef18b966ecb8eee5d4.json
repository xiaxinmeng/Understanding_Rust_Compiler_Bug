{"sha": "10a83805e047a583348e8bef18b966ecb8eee5d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhODM4MDVlMDQ3YTU4MzM0OGU4YmVmMThiOTY2ZWNiOGVlZTVkNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-09-23T03:30:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-09-24T00:32:49Z"}, "message": "libgo: update to Go1.15.2 release\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/256618", "tree": {"sha": "0e35588beed26134397f6e25aa58dfd3600ed8db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e35588beed26134397f6e25aa58dfd3600ed8db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a83805e047a583348e8bef18b966ecb8eee5d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a83805e047a583348e8bef18b966ecb8eee5d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a83805e047a583348e8bef18b966ecb8eee5d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a83805e047a583348e8bef18b966ecb8eee5d4/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82b77dee751c916bcef55e527bffdd82b68fc897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b77dee751c916bcef55e527bffdd82b68fc897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b77dee751c916bcef55e527bffdd82b68fc897"}], "stats": {"total": 818, "additions": 709, "deletions": 109}, "files": [{"sha": "f51dac553653144ccc07543643dded4c4e5858e0", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -1,4 +1,4 @@\n-cfee06e20a172753552b1515dd3a4fde5d5cad7b\n+6a7648c97c3e0cdbecbec7e760b30246521a6d90\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "cfbf488398e145fd3e627d9852126e09815a93d9", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -1,4 +1,4 @@\n-c4f8cb43caf0bcd0c730d7d04a3fce129393cecc\n+9706f510a5e2754595d716bd64be8375997311fb\n \n The first line of this file holds the git revision number of the\n last merge done from the master library sources."}, {"sha": "c19def3de444fa5012ca599d7e8d16a14743ca8f", "filename": "libgo/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FVERSION?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -1 +1 @@\n-go1.15rc2\n+go1.15.2"}, {"sha": "77bfc11fe9a45dd64fd581216975debe8ca248a2", "filename": "libgo/go/cmd/go/internal/test/test.go", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Ftest%2Ftest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Ftest%2Ftest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Ftest%2Ftest.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -1079,9 +1079,13 @@ func (c *runCache) builderRunTest(b *work.Builder, a *work.Action) error {\n \t}\n \n \tvar stdout io.Writer = os.Stdout\n+\tvar err error\n \tif testJSON {\n \t\tjson := test2json.NewConverter(lockedStdout{}, a.Package.ImportPath, test2json.Timestamp)\n-\t\tdefer json.Close()\n+\t\tdefer func() {\n+\t\t\tjson.Exited(err)\n+\t\t\tjson.Close()\n+\t\t}()\n \t\tstdout = json\n \t}\n \n@@ -1185,7 +1189,7 @@ func (c *runCache) builderRunTest(b *work.Builder, a *work.Action) error {\n \t}\n \n \tt0 := time.Now()\n-\terr := cmd.Start()\n+\terr = cmd.Start()\n \n \t// This is a last-ditch deadline to detect and\n \t// stop wedged test binaries, to keep the builders"}, {"sha": "4f0a8924f12c0bde08cf9b37a82717b6b9b6dda5", "filename": "libgo/go/cmd/go/internal/test/testflag.go", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Ftest%2Ftestflag.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Ftest%2Ftestflag.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Ftest%2Ftestflag.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -214,9 +214,13 @@ func testFlags(args []string) (packageNames, passToTest []string) {\n \n \texplicitArgs := make([]string, 0, len(args))\n \tinPkgList := false\n+\tafterFlagWithoutValue := false\n \tfor len(args) > 0 {\n \t\tf, remainingArgs, err := cmdflag.ParseOne(&CmdTest.Flag, args)\n \n+\t\twasAfterFlagWithoutValue := afterFlagWithoutValue\n+\t\tafterFlagWithoutValue = false // provisionally\n+\n \t\tif errors.Is(err, flag.ErrHelp) {\n \t\t\texitWithUsage()\n \t\t}\n@@ -233,10 +237,24 @@ func testFlags(args []string) (packageNames, passToTest []string) {\n \t\tif nf := (cmdflag.NonFlagError{}); errors.As(err, &nf) {\n \t\t\tif !inPkgList && packageNames != nil {\n \t\t\t\t// We already saw the package list previously, and this argument is not\n-\t\t\t\t// a flag, so it \u2014 and everything after it \u2014 must be a literal argument\n-\t\t\t\t// to the test binary.\n-\t\t\t\texplicitArgs = append(explicitArgs, args...)\n-\t\t\t\tbreak\n+\t\t\t\t// a flag, so it \u2014 and everything after it \u2014 must be either a value for\n+\t\t\t\t// a preceding flag or a literal argument to the test binary.\n+\t\t\t\tif wasAfterFlagWithoutValue {\n+\t\t\t\t\t// This argument could syntactically be a flag value, so\n+\t\t\t\t\t// optimistically assume that it is and keep looking for go command\n+\t\t\t\t\t// flags after it.\n+\t\t\t\t\t//\n+\t\t\t\t\t// (If we're wrong, we'll at least be consistent with historical\n+\t\t\t\t\t// behavior; see https://golang.org/issue/40763.)\n+\t\t\t\t\texplicitArgs = append(explicitArgs, nf.RawArg)\n+\t\t\t\t\targs = remainingArgs\n+\t\t\t\t\tcontinue\n+\t\t\t\t} else {\n+\t\t\t\t\t// This argument syntactically cannot be a flag value, so it must be a\n+\t\t\t\t\t// positional argument, and so must everything after it.\n+\t\t\t\t\texplicitArgs = append(explicitArgs, args...)\n+\t\t\t\t\tbreak\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\tinPkgList = true\n@@ -272,6 +290,9 @@ func testFlags(args []string) (packageNames, passToTest []string) {\n \n \t\t\texplicitArgs = append(explicitArgs, nd.RawArg)\n \t\t\targs = remainingArgs\n+\t\t\tif !nd.HasValue {\n+\t\t\t\tafterFlagWithoutValue = true\n+\t\t\t}\n \t\t\tcontinue\n \t\t}\n "}, {"sha": "63385e69974d1e0906867430cca3006e6913a625", "filename": "libgo/go/cmd/go/testdata/script/test_flags.txt", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Ftest_flags.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Ftest_flags.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Ftest_flags.txt?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -0,0 +1,132 @@\n+env GO111MODULE=on\n+\n+[short] skip\n+\n+# Arguments after the flag terminator should be ignored.\n+# If we pass '-- -test.v', we should not get verbose output\n+# *and* output from the test should not be echoed.\n+go test ./x -- -test.v\n+stdout '\\Aok\\s+example.com/x\\s+[0-9.s]+\\n\\z'\n+! stderr .\n+\n+# For backward-compatibility with previous releases of the 'go' command,\n+# arguments that appear after unrecognized flags should not be treated\n+# as packages, even if they are unambiguously not arguments to flags.\n+# Even though ./x looks like a package path, the real package should be\n+# the implicit '.'.\n+! go test --answer=42 ./x\n+stderr '^no Go files in .+$'\n+! stderr '/x'\n+\n+# However, *flags* that appear after unrecognized flags should still be\n+# interpreted as flags, under the (possibly-erroneous) assumption that\n+# unrecognized flags are non-boolean.\n+\n+go test -v -x ./x -timeout 24h -boolflag=true foo -timeout 25h\n+stdout 'args: foo -timeout 25h'\n+stdout 'timeout: 24h0m0s$'  # -timeout is unambiguously not a flag, so the real flag wins.\n+\n+go test -v -x ./x -timeout 24h -boolflag foo -timeout 25h\n+stdout 'args: foo -test\\.timeout=25h0m0s'  # For legacy reasons, '-timeout ' is erroneously rewritten to -test.timeout; see https://golang.org/issue/40763.\n+stdout 'timeout: 24h0m0s$'  # Actual flag wins.\n+\n+go test -v -x ./x -timeout 24h -stringflag foo -timeout 25h\n+stdout 'args: $'\n+stdout 'timeout: 25h0m0s$'  # Later flag wins.\n+\n+# An explicit '-outputdir=' argument should set test.outputdir\n+# to the 'go' command's working directory, not zero it out\n+# for the test binary.\n+go test -x -coverprofile=cover.out '-outputdir=' ./x\n+stderr '-test.outputdir=[^ ]'\n+exists ./cover.out\n+! exists ./x/cover.out\n+\n+# Test flags from GOFLAGS should be forwarded to the test binary,\n+# with the 'test.' prefix in the GOFLAGS entry...\n+env GOFLAGS='-test.timeout=24h0m0s -count=1'\n+go test -v -x ./x\n+stdout 'timeout: 24h0m0s$'\n+stderr '-test.count=1'\n+\n+# ...or without.\n+env GOFLAGS='-timeout=24h0m0s -count=1'\n+go test -v -x ./x\n+stdout 'timeout: 24h0m0s$'\n+stderr '-test.count=1'\n+\n+# Arguments from the command line should override GOFLAGS...\n+go test -v -x -timeout=25h0m0s ./x\n+stdout 'timeout: 25h0m0s$'\n+stderr '-test.count=1'\n+\n+# ...even if they use a different flag name.\n+go test -v -x -test.timeout=26h0m0s ./x\n+stdout 'timeout: 26h0m0s$'\n+stderr '-test\\.timeout=26h0m0s'\n+! stderr 'timeout=24h0m0s'\n+stderr '-test.count=1'\n+\n+# Invalid flags should be reported exactly once.\n+! go test -covermode=walrus ./x\n+stderr -count=1 'invalid value \"walrus\" for flag -covermode: valid modes are .*$'\n+stderr '^usage: go test .*$'\n+stderr '^Run ''go help test'' and ''go help testflag'' for details.$'\n+\n+# Passing -help to the test binary should show flag help.\n+go test ./x -args -help\n+stdout 'usage_message'\n+\n+# -covermode, -coverpkg, and -coverprofile should imply -cover\n+go test -covermode=set ./x\n+stdout '\\s+coverage:\\s+'\n+\n+go test -coverpkg=encoding/binary ./x\n+stdout '\\s+coverage:\\s+'\n+\n+go test -coverprofile=cover.out ./x\n+stdout '\\s+coverage:\\s+'\n+exists ./cover.out\n+rm ./cover.out\n+\n+# -*profile and -trace flags should force output to the current working directory\n+# or -outputdir, not the directory containing the test.\n+\n+go test -memprofile=mem.out ./x\n+exists ./mem.out\n+rm ./mem.out\n+\n+go test -trace=trace.out ./x\n+exists ./trace.out\n+rm ./trace.out\n+\n+# Relative paths with -outputdir should be relative to the go command's working\n+# directory, not the directory containing the test.\n+mkdir profiles\n+go test -memprofile=mem.out -outputdir=./profiles ./x\n+exists ./profiles/mem.out\n+rm profiles\n+\n+-- go.mod --\n+module example.com\n+go 1.14\n+-- x/x_test.go --\n+package x\n+\n+import (\n+\t\"flag\"\n+\t\"strings\"\n+\t\"testing\"\n+)\n+\n+var _ = flag.String(\"usage_message\", \"\", \"dummy flag to check usage message\")\n+var boolflag = flag.Bool(\"boolflag\", false, \"ignored boolean flag\")\n+var stringflag = flag.String(\"stringflag\", \"\", \"ignored string flag\")\n+\n+func TestLogTimeout(t *testing.T) {\n+\tt.Logf(\"timeout: %v\", flag.Lookup(\"test.timeout\").Value)\n+}\n+\n+func TestLogArgs(t *testing.T) {\n+\tt.Logf(\"args: %s\", strings.Join(flag.Args(), \" \"))\n+}"}, {"sha": "4eb6dd4838b507057bca801aa4d3edbbc28026fe", "filename": "libgo/go/cmd/internal/test2json/test2json.go", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftest2json.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftest2json.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftest2json.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -45,10 +45,10 @@ type textBytes []byte\n \n func (b textBytes) MarshalText() ([]byte, error) { return b, nil }\n \n-// A converter holds the state of a test-to-JSON conversion.\n+// A Converter holds the state of a test-to-JSON conversion.\n // It implements io.WriteCloser; the caller writes test output in,\n // and the converter writes JSON output to w.\n-type converter struct {\n+type Converter struct {\n \tw        io.Writer  // JSON output stream\n \tpkg      string     // package to name in events\n \tmode     Mode       // mode bits\n@@ -100,9 +100,9 @@ var (\n //\n // The pkg string, if present, specifies the import path to\n // report in the JSON stream.\n-func NewConverter(w io.Writer, pkg string, mode Mode) io.WriteCloser {\n-\tc := new(converter)\n-\t*c = converter{\n+func NewConverter(w io.Writer, pkg string, mode Mode) *Converter {\n+\tc := new(Converter)\n+\t*c = Converter{\n \t\tw:     w,\n \t\tpkg:   pkg,\n \t\tmode:  mode,\n@@ -122,15 +122,31 @@ func NewConverter(w io.Writer, pkg string, mode Mode) io.WriteCloser {\n }\n \n // Write writes the test input to the converter.\n-func (c *converter) Write(b []byte) (int, error) {\n+func (c *Converter) Write(b []byte) (int, error) {\n \tc.input.write(b)\n \treturn len(b), nil\n }\n \n+// Exited marks the test process as having exited with the given error.\n+func (c *Converter) Exited(err error) {\n+\tif err == nil {\n+\t\tc.result = \"pass\"\n+\t} else {\n+\t\tc.result = \"fail\"\n+\t}\n+}\n+\n var (\n+\t// printed by test on successful run.\n \tbigPass = []byte(\"PASS\\n\")\n+\n+\t// printed by test after a normal test failure.\n \tbigFail = []byte(\"FAIL\\n\")\n \n+\t// printed by 'go test' along with an error if the test binary terminates\n+\t// with an error.\n+\tbigFailErrorPrefix = []byte(\"FAIL\\t\")\n+\n \tupdates = [][]byte{\n \t\t[]byte(\"=== RUN   \"),\n \t\t[]byte(\"=== PAUSE \"),\n@@ -153,9 +169,9 @@ var (\n // handleInputLine handles a single whole test output line.\n // It must write the line to c.output but may choose to do so\n // before or after emitting other events.\n-func (c *converter) handleInputLine(line []byte) {\n+func (c *Converter) handleInputLine(line []byte) {\n \t// Final PASS or FAIL.\n-\tif bytes.Equal(line, bigPass) || bytes.Equal(line, bigFail) {\n+\tif bytes.Equal(line, bigPass) || bytes.Equal(line, bigFail) || bytes.HasPrefix(line, bigFailErrorPrefix) {\n \t\tc.flushReport(0)\n \t\tc.output.write(line)\n \t\tif bytes.Equal(line, bigPass) {\n@@ -204,8 +220,18 @@ func (c *converter) handleInputLine(line []byte) {\n \t\t}\n \t}\n \n+\t// Not a special test output line.\n \tif !ok {\n-\t\t// Not a special test output line.\n+\t\t// Lookup the name of the test which produced the output using the\n+\t\t// indentation of the output as an index into the stack of the current\n+\t\t// subtests.\n+\t\t// If the indentation is greater than the number of current subtests\n+\t\t// then the output must have included extra indentation. We can't\n+\t\t// determine which subtest produced this output, so we default to the\n+\t\t// old behaviour of assuming the most recently run subtest produced it.\n+\t\tif indent > 0 && indent <= len(c.report) {\n+\t\t\tc.testName = c.report[indent-1].Test\n+\t\t}\n \t\tc.output.write(origLine)\n \t\treturn\n \t}\n@@ -269,7 +295,7 @@ func (c *converter) handleInputLine(line []byte) {\n }\n \n // flushReport flushes all pending PASS/FAIL reports at levels >= depth.\n-func (c *converter) flushReport(depth int) {\n+func (c *Converter) flushReport(depth int) {\n \tc.testName = \"\"\n \tfor len(c.report) > depth {\n \t\te := c.report[len(c.report)-1]\n@@ -281,23 +307,22 @@ func (c *converter) flushReport(depth int) {\n // Close marks the end of the go test output.\n // It flushes any pending input and then output (only partial lines at this point)\n // and then emits the final overall package-level pass/fail event.\n-func (c *converter) Close() error {\n+func (c *Converter) Close() error {\n \tc.input.flush()\n \tc.output.flush()\n-\te := &event{Action: \"fail\"}\n \tif c.result != \"\" {\n-\t\te.Action = c.result\n-\t}\n-\tif c.mode&Timestamp != 0 {\n-\t\tdt := time.Since(c.start).Round(1 * time.Millisecond).Seconds()\n-\t\te.Elapsed = &dt\n+\t\te := &event{Action: c.result}\n+\t\tif c.mode&Timestamp != 0 {\n+\t\t\tdt := time.Since(c.start).Round(1 * time.Millisecond).Seconds()\n+\t\t\te.Elapsed = &dt\n+\t\t}\n+\t\tc.writeEvent(e)\n \t}\n-\tc.writeEvent(e)\n \treturn nil\n }\n \n // writeOutputEvent writes a single output event with the given bytes.\n-func (c *converter) writeOutputEvent(out []byte) {\n+func (c *Converter) writeOutputEvent(out []byte) {\n \tc.writeEvent(&event{\n \t\tAction: \"output\",\n \t\tOutput: (*textBytes)(&out),\n@@ -306,7 +331,7 @@ func (c *converter) writeOutputEvent(out []byte) {\n \n // writeEvent writes a single event.\n // It adds the package, time (if requested), and test name (if needed).\n-func (c *converter) writeEvent(e *event) {\n+func (c *Converter) writeEvent(e *event) {\n \te.Package = c.pkg\n \tif c.mode&Timestamp != 0 {\n \t\tt := time.Now()"}, {"sha": "34b03b9362fa42a7502a33935744a10edb1525a5", "filename": "libgo/go/cmd/internal/test2json/testdata/benchshort.json", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fbenchshort.json", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fbenchshort.json", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fbenchshort.json?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -4,4 +4,3 @@\n {\"Action\":\"output\",\"Output\":\"# but to avoid questions of timing, we just use a file with no \\\\n at all.\\n\"}\n {\"Action\":\"output\",\"Output\":\"BenchmarkFoo   \\t\"}\n {\"Action\":\"output\",\"Output\":\"10000 early EOF\"}\n-{\"Action\":\"fail\"}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libgo/go/cmd/internal/test2json/testdata/empty.json", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fempty.json", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fempty.json", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fempty.json?ref=10a83805e047a583348e8bef18b966ecb8eee5d4"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libgo/go/cmd/internal/test2json/testdata/empty.test", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fempty.test", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fempty.test", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fempty.test?ref=10a83805e047a583348e8bef18b966ecb8eee5d4"}, {"sha": "2e8ba48629d7a315d8366a867c986cdbc52b82d9", "filename": "libgo/go/cmd/internal/test2json/testdata/issue29755.json", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fissue29755.json", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fissue29755.json", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fissue29755.json?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -0,0 +1,38 @@\n+{\"Action\":\"run\",\"Test\":\"TestOutputWithSubtest\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest\",\"Output\":\"=== RUN   TestOutputWithSubtest\\n\"}\n+{\"Action\":\"run\",\"Test\":\"TestOutputWithSubtest/sub_test\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test\",\"Output\":\"=== RUN   TestOutputWithSubtest/sub_test\\n\"}\n+{\"Action\":\"run\",\"Test\":\"TestOutputWithSubtest/sub_test/sub2\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test/sub2\",\"Output\":\"=== RUN   TestOutputWithSubtest/sub_test/sub2\\n\"}\n+{\"Action\":\"run\",\"Test\":\"TestOutputWithSubtest/sub_test2\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test2\",\"Output\":\"=== RUN   TestOutputWithSubtest/sub_test2\\n\"}\n+{\"Action\":\"run\",\"Test\":\"TestOutputWithSubtest/sub_test2/sub2\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test2/sub2\",\"Output\":\"=== RUN   TestOutputWithSubtest/sub_test2/sub2\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest\",\"Output\":\"--- FAIL: TestOutputWithSubtest (0.00s)\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest\",\"Output\":\"    foo_test.go:6: output before sub tests\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest\",\"Output\":\"    foo_test.go:10: output from root test\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest\",\"Output\":\"    foo_test.go:15: output from root test\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test\",\"Output\":\"    --- PASS: TestOutputWithSubtest/sub_test (0.00s)\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test\",\"Output\":\"        foo_test.go:9: output from sub test\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test\",\"Output\":\"        foo_test.go:11: more output from sub test\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test\",\"Output\":\"        foo_test.go:16: more output from sub test\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test/sub2\",\"Output\":\"        --- PASS: TestOutputWithSubtest/sub_test/sub2 (0.00s)\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test/sub2\",\"Output\":\"            foo_test.go:14: output from sub2 test\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest\",\"Output\":\"    foo_test.go:22: output from root test\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest\",\"Output\":\"    foo_test.go:27: output from root test\\n\"}\n+{\"Action\":\"pass\",\"Test\":\"TestOutputWithSubtest/sub_test/sub2\"}\n+{\"Action\":\"pass\",\"Test\":\"TestOutputWithSubtest/sub_test\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test2\",\"Output\":\"    --- PASS: TestOutputWithSubtest/sub_test2 (0.00s)\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test2\",\"Output\":\"        foo_test.go:21: output from sub test2\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test2\",\"Output\":\"        foo_test.go:23: more output from sub test2\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test2\",\"Output\":\"        foo_test.go:28: more output from sub test2\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test2/sub2\",\"Output\":\"        --- PASS: TestOutputWithSubtest/sub_test2/sub2 (0.00s)\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest/sub_test2/sub2\",\"Output\":\"            foo_test.go:26: output from sub2 test\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestOutputWithSubtest\",\"Output\":\"    foo_test.go:32: output after sub test\\n\"}\n+{\"Action\":\"pass\",\"Test\":\"TestOutputWithSubtest/sub_test2/sub2\"}\n+{\"Action\":\"pass\",\"Test\":\"TestOutputWithSubtest/sub_test2\"}\n+{\"Action\":\"fail\",\"Test\":\"TestOutputWithSubtest\"}\n+{\"Action\":\"output\",\"Output\":\"FAIL\\n\"}\n+{\"Action\":\"output\",\"Output\":\"FAIL\\tgotest.tools/gotestsum/foo\\t0.001s\\n\"}\n+{\"Action\":\"output\",\"Output\":\"FAIL\\n\"}\n+{\"Action\":\"fail\"}"}, {"sha": "b0c596ce45dbbeae83dd145d81be6c0085cb88da", "filename": "libgo/go/cmd/internal/test2json/testdata/issue29755.test", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fissue29755.test", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fissue29755.test", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fissue29755.test?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -0,0 +1,27 @@\n+=== RUN   TestOutputWithSubtest\n+=== RUN   TestOutputWithSubtest/sub_test\n+=== RUN   TestOutputWithSubtest/sub_test/sub2\n+=== RUN   TestOutputWithSubtest/sub_test2\n+=== RUN   TestOutputWithSubtest/sub_test2/sub2\n+--- FAIL: TestOutputWithSubtest (0.00s)\n+    foo_test.go:6: output before sub tests\n+    foo_test.go:10: output from root test\n+    foo_test.go:15: output from root test\n+    --- PASS: TestOutputWithSubtest/sub_test (0.00s)\n+        foo_test.go:9: output from sub test\n+        foo_test.go:11: more output from sub test\n+        foo_test.go:16: more output from sub test\n+        --- PASS: TestOutputWithSubtest/sub_test/sub2 (0.00s)\n+            foo_test.go:14: output from sub2 test\n+    foo_test.go:22: output from root test\n+    foo_test.go:27: output from root test\n+    --- PASS: TestOutputWithSubtest/sub_test2 (0.00s)\n+        foo_test.go:21: output from sub test2\n+        foo_test.go:23: more output from sub test2\n+        foo_test.go:28: more output from sub test2\n+        --- PASS: TestOutputWithSubtest/sub_test2/sub2 (0.00s)\n+            foo_test.go:26: output from sub2 test\n+    foo_test.go:32: output after sub test\n+FAIL\n+FAIL\tgotest.tools/gotestsum/foo\t0.001s\n+FAIL"}, {"sha": "f7738142e60adc389ec413b2605890188c2f4482", "filename": "libgo/go/cmd/internal/test2json/testdata/panic.json", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fpanic.json", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fpanic.json", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fpanic.json?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -0,0 +1,19 @@\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"--- FAIL: TestPanic (0.00s)\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"panic: oops [recovered]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"\\tpanic: oops\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"goroutine 7 [running]:\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"testing.tRunner.func1(0xc000092100)\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"\\t/go/src/testing/testing.go:874 +0x3a3\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"panic(0x1110ea0, 0x116aea0)\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"\\t/go/src/runtime/panic.go:679 +0x1b2\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"command-line-arguments.TestPanic(0xc000092100)\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"\\ta_test.go:6 +0x39\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"testing.tRunner(0xc000092100, 0x114f500)\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"\\tgo/src/testing/testing.go:909 +0xc9\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"created by testing.(*T).Run\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestPanic\",\"Output\":\"\\tgo/src/testing/testing.go:960 +0x350\\n\"}\n+{\"Action\":\"fail\",\"Test\":\"TestPanic\"}\n+{\"Action\":\"output\",\"Output\":\"FAIL\\tcommand-line-arguments\\t0.042s\\n\"}\n+{\"Action\":\"output\",\"Output\":\"FAIL\\n\"}\n+{\"Action\":\"fail\"}"}, {"sha": "517ebafeb53f45f791ef1a30c2389a00a1b18f48", "filename": "libgo/go/cmd/internal/test2json/testdata/panic.test", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fpanic.test", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fpanic.test", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fpanic.test?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -0,0 +1,17 @@\n+--- FAIL: TestPanic (0.00s)\n+panic: oops [recovered]\n+\tpanic: oops\n+\n+goroutine 7 [running]:\n+testing.tRunner.func1(0xc000092100)\n+\t/go/src/testing/testing.go:874 +0x3a3\n+panic(0x1110ea0, 0x116aea0)\n+\t/go/src/runtime/panic.go:679 +0x1b2\n+command-line-arguments.TestPanic(0xc000092100)\n+\ta_test.go:6 +0x39\n+testing.tRunner(0xc000092100, 0x114f500)\n+\tgo/src/testing/testing.go:909 +0xc9\n+created by testing.(*T).Run\n+\tgo/src/testing/testing.go:960 +0x350\n+FAIL\tcommand-line-arguments\t0.042s\n+FAIL"}, {"sha": "f49180d52074ae5331482977d0d1a576527c5dfe", "filename": "libgo/go/cmd/internal/test2json/testdata/smiley.json", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fsmiley.json", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fsmiley.json", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fsmiley.json?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -116,13 +116,13 @@\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/2\",\"Output\":\"=== CONT  Test\u263a\u2639/2\\n\"}\n {\"Action\":\"output\",\"Test\":\"TestTags\",\"Output\":\"--- PASS: TestTags (0.00s)\\n\"}\n {\"Action\":\"output\",\"Test\":\"TestTags/x_testtag_y\",\"Output\":\"    --- PASS: TestTags/x_testtag_y (0.04s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestTags/x_testtag_y\",\"Output\":\"    \\tvet_test.go:187: -tags=x testtag y\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestTags/x_testtag_y\",\"Output\":\"        vet_test.go:187: -tags=x testtag y\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestTags/x_testtag_y\"}\n {\"Action\":\"output\",\"Test\":\"TestTags/x,testtag,y\",\"Output\":\"    --- PASS: TestTags/x,testtag,y (0.04s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestTags/x,testtag,y\",\"Output\":\"    \\tvet_test.go:187: -tags=x,testtag,y\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestTags/x,testtag,y\",\"Output\":\"        vet_test.go:187: -tags=x,testtag,y\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestTags/x,testtag,y\"}\n {\"Action\":\"output\",\"Test\":\"TestTags/testtag\",\"Output\":\"    --- PASS: TestTags/testtag (0.04s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestTags/testtag\",\"Output\":\"    \\tvet_test.go:187: -tags=testtag\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestTags/testtag\",\"Output\":\"        vet_test.go:187: -tags=testtag\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestTags/testtag\"}\n {\"Action\":\"pass\",\"Test\":\"TestTags\"}\n {\"Action\":\"cont\",\"Test\":\"Test\u263a\u2639/1\"}\n@@ -139,28 +139,28 @@\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639Dirs/cgo\",\"Output\":\"=== CONT  Test\u263a\u2639Dirs/cgo\\n\"}\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639\",\"Output\":\"--- PASS: Test\u263a\u2639 (0.39s)\\n\"}\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/5\",\"Output\":\"    --- PASS: Test\u263a\u2639/5 (0.07s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/5\",\"Output\":\"    \\tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/copylock_func.go\\\" \\\"testdata/rangeloop.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/5\",\"Output\":\"        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/copylock_func.go\\\" \\\"testdata/rangeloop.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"Test\u263a\u2639/5\"}\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/3\",\"Output\":\"    --- PASS: Test\u263a\u2639/3 (0.07s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/3\",\"Output\":\"    \\tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/composite.go\\\" \\\"testdata/nilfunc.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/3\",\"Output\":\"        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/composite.go\\\" \\\"testdata/nilfunc.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"Test\u263a\u2639/3\"}\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/6\",\"Output\":\"    --- PASS: Test\u263a\u2639/6 (0.07s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/6\",\"Output\":\"    \\tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/copylock_range.go\\\" \\\"testdata/shadow.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/6\",\"Output\":\"        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/copylock_range.go\\\" \\\"testdata/shadow.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"Test\u263a\u2639/6\"}\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/2\",\"Output\":\"    --- PASS: Test\u263a\u2639/2 (0.07s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/2\",\"Output\":\"    \\tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/bool.go\\\" \\\"testdata/method.go\\\" \\\"testdata/unused.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/2\",\"Output\":\"        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/bool.go\\\" \\\"testdata/method.go\\\" \\\"testdata/unused.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"Test\u263a\u2639/2\"}\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/0\",\"Output\":\"    --- PASS: Test\u263a\u2639/0 (0.13s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/0\",\"Output\":\"    \\tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/assign.go\\\" \\\"testdata/httpresponse.go\\\" \\\"testdata/structtag.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/0\",\"Output\":\"        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/assign.go\\\" \\\"testdata/httpresponse.go\\\" \\\"testdata/structtag.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"Test\u263a\u2639/0\"}\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/4\",\"Output\":\"    --- PASS: Test\u263a\u2639/4 (0.16s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/4\",\"Output\":\"    \\tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/copylock.go\\\" \\\"testdata/print.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/4\",\"Output\":\"        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/copylock.go\\\" \\\"testdata/print.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"Test\u263a\u2639/4\"}\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/1\",\"Output\":\"    --- PASS: Test\u263a\u2639/1 (0.07s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/1\",\"Output\":\"    \\tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/atomic.go\\\" \\\"testdata/lostcancel.go\\\" \\\"testdata/unsafeptr.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/1\",\"Output\":\"        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/atomic.go\\\" \\\"testdata/lostcancel.go\\\" \\\"testdata/unsafeptr.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"Test\u263a\u2639/1\"}\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/7\",\"Output\":\"    --- PASS: Test\u263a\u2639/7 (0.19s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/7\",\"Output\":\"    \\tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/deadcode.go\\\" \\\"testdata/shift.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"Test\u263a\u2639/7\",\"Output\":\"        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\\\"testdata/deadcode.go\\\" \\\"testdata/shift.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"Test\u263a\u2639/7\"}\n {\"Action\":\"pass\",\"Test\":\"Test\u263a\u2639\"}\n {\"Action\":\"output\",\"Test\":\"Test\u263a\u2639Dirs\",\"Output\":\"--- PASS: Test\u263a\u2639Dirs (0.01s)\\n\"}"}, {"sha": "bd1ed2dd9a9d9a9daef06a21f846c1215f3eceeb", "filename": "libgo/go/cmd/internal/test2json/testdata/smiley.test", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fsmiley.test", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fsmiley.test", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fsmiley.test?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -58,11 +58,11 @@\n === CONT  Test\u263a\u2639/2\n --- PASS: TestTags (0.00s)\n     --- PASS: TestTags/x_testtag_y (0.04s)\n-    \tvet_test.go:187: -tags=x testtag y\n+        vet_test.go:187: -tags=x testtag y\n     --- PASS: TestTags/x,testtag,y (0.04s)\n-    \tvet_test.go:187: -tags=x,testtag,y\n+        vet_test.go:187: -tags=x,testtag,y\n     --- PASS: TestTags/testtag (0.04s)\n-    \tvet_test.go:187: -tags=testtag\n+        vet_test.go:187: -tags=testtag\n === CONT  Test\u263a\u2639/1\n === CONT  Test\u263a\u2639Dirs/testingpkg\n === CONT  Test\u263a\u2639Dirs/buildtag\n@@ -71,21 +71,21 @@\n === CONT  Test\u263a\u2639Dirs/cgo\n --- PASS: Test\u263a\u2639 (0.39s)\n     --- PASS: Test\u263a\u2639/5 (0.07s)\n-    \tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/copylock_func.go\" \"testdata/rangeloop.go\"]\n+        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/copylock_func.go\" \"testdata/rangeloop.go\"]\n     --- PASS: Test\u263a\u2639/3 (0.07s)\n-    \tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/composite.go\" \"testdata/nilfunc.go\"]\n+        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/composite.go\" \"testdata/nilfunc.go\"]\n     --- PASS: Test\u263a\u2639/6 (0.07s)\n-    \tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/copylock_range.go\" \"testdata/shadow.go\"]\n+        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/copylock_range.go\" \"testdata/shadow.go\"]\n     --- PASS: Test\u263a\u2639/2 (0.07s)\n-    \tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/bool.go\" \"testdata/method.go\" \"testdata/unused.go\"]\n+        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/bool.go\" \"testdata/method.go\" \"testdata/unused.go\"]\n     --- PASS: Test\u263a\u2639/0 (0.13s)\n-    \tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/assign.go\" \"testdata/httpresponse.go\" \"testdata/structtag.go\"]\n+        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/assign.go\" \"testdata/httpresponse.go\" \"testdata/structtag.go\"]\n     --- PASS: Test\u263a\u2639/4 (0.16s)\n-    \tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/copylock.go\" \"testdata/print.go\"]\n+        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/copylock.go\" \"testdata/print.go\"]\n     --- PASS: Test\u263a\u2639/1 (0.07s)\n-    \tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/atomic.go\" \"testdata/lostcancel.go\" \"testdata/unsafeptr.go\"]\n+        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/atomic.go\" \"testdata/lostcancel.go\" \"testdata/unsafeptr.go\"]\n     --- PASS: Test\u263a\u2639/7 (0.19s)\n-    \tvet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/deadcode.go\" \"testdata/shift.go\"]\n+        vet_test.go:114: \u03c6\u03b9\u03bb\u03b5\u03c3: [\"testdata/deadcode.go\" \"testdata/shift.go\"]\n --- PASS: Test\u263a\u2639Dirs (0.01s)\n     --- PASS: Test\u263a\u2639Dirs/testingpkg (0.06s)\n     --- PASS: Test\u263a\u2639Dirs/divergent (0.05s)"}, {"sha": "2558d61e7471ab5e99de6391ca793e65f9e4bb19", "filename": "libgo/go/cmd/internal/test2json/testdata/vet.json", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fvet.json", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fvet.json", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fvet.json?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -116,13 +116,13 @@\n {\"Action\":\"output\",\"Test\":\"TestVet/2\",\"Output\":\"=== CONT  TestVet/2\\n\"}\n {\"Action\":\"output\",\"Test\":\"TestTags\",\"Output\":\"--- PASS: TestTags (0.00s)\\n\"}\n {\"Action\":\"output\",\"Test\":\"TestTags/x_testtag_y\",\"Output\":\"    --- PASS: TestTags/x_testtag_y (0.04s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestTags/x_testtag_y\",\"Output\":\"    \\tvet_test.go:187: -tags=x testtag y\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestTags/x_testtag_y\",\"Output\":\"        vet_test.go:187: -tags=x testtag y\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestTags/x_testtag_y\"}\n {\"Action\":\"output\",\"Test\":\"TestTags/x,testtag,y\",\"Output\":\"    --- PASS: TestTags/x,testtag,y (0.04s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestTags/x,testtag,y\",\"Output\":\"    \\tvet_test.go:187: -tags=x,testtag,y\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestTags/x,testtag,y\",\"Output\":\"        vet_test.go:187: -tags=x,testtag,y\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestTags/x,testtag,y\"}\n {\"Action\":\"output\",\"Test\":\"TestTags/testtag\",\"Output\":\"    --- PASS: TestTags/testtag (0.04s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestTags/testtag\",\"Output\":\"    \\tvet_test.go:187: -tags=testtag\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestTags/testtag\",\"Output\":\"        vet_test.go:187: -tags=testtag\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestTags/testtag\"}\n {\"Action\":\"pass\",\"Test\":\"TestTags\"}\n {\"Action\":\"cont\",\"Test\":\"TestVet/1\"}\n@@ -139,28 +139,28 @@\n {\"Action\":\"output\",\"Test\":\"TestVetDirs/cgo\",\"Output\":\"=== CONT  TestVetDirs/cgo\\n\"}\n {\"Action\":\"output\",\"Test\":\"TestVet\",\"Output\":\"--- PASS: TestVet (0.39s)\\n\"}\n {\"Action\":\"output\",\"Test\":\"TestVet/5\",\"Output\":\"    --- PASS: TestVet/5 (0.07s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestVet/5\",\"Output\":\"    \\tvet_test.go:114: files: [\\\"testdata/copylock_func.go\\\" \\\"testdata/rangeloop.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestVet/5\",\"Output\":\"        vet_test.go:114: files: [\\\"testdata/copylock_func.go\\\" \\\"testdata/rangeloop.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestVet/5\"}\n {\"Action\":\"output\",\"Test\":\"TestVet/3\",\"Output\":\"    --- PASS: TestVet/3 (0.07s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestVet/3\",\"Output\":\"    \\tvet_test.go:114: files: [\\\"testdata/composite.go\\\" \\\"testdata/nilfunc.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestVet/3\",\"Output\":\"        vet_test.go:114: files: [\\\"testdata/composite.go\\\" \\\"testdata/nilfunc.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestVet/3\"}\n {\"Action\":\"output\",\"Test\":\"TestVet/6\",\"Output\":\"    --- PASS: TestVet/6 (0.07s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestVet/6\",\"Output\":\"    \\tvet_test.go:114: files: [\\\"testdata/copylock_range.go\\\" \\\"testdata/shadow.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestVet/6\",\"Output\":\"        vet_test.go:114: files: [\\\"testdata/copylock_range.go\\\" \\\"testdata/shadow.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestVet/6\"}\n {\"Action\":\"output\",\"Test\":\"TestVet/2\",\"Output\":\"    --- PASS: TestVet/2 (0.07s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestVet/2\",\"Output\":\"    \\tvet_test.go:114: files: [\\\"testdata/bool.go\\\" \\\"testdata/method.go\\\" \\\"testdata/unused.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestVet/2\",\"Output\":\"        vet_test.go:114: files: [\\\"testdata/bool.go\\\" \\\"testdata/method.go\\\" \\\"testdata/unused.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestVet/2\"}\n {\"Action\":\"output\",\"Test\":\"TestVet/0\",\"Output\":\"    --- PASS: TestVet/0 (0.13s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestVet/0\",\"Output\":\"    \\tvet_test.go:114: files: [\\\"testdata/assign.go\\\" \\\"testdata/httpresponse.go\\\" \\\"testdata/structtag.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestVet/0\",\"Output\":\"        vet_test.go:114: files: [\\\"testdata/assign.go\\\" \\\"testdata/httpresponse.go\\\" \\\"testdata/structtag.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestVet/0\"}\n {\"Action\":\"output\",\"Test\":\"TestVet/4\",\"Output\":\"    --- PASS: TestVet/4 (0.16s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestVet/4\",\"Output\":\"    \\tvet_test.go:114: files: [\\\"testdata/copylock.go\\\" \\\"testdata/print.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestVet/4\",\"Output\":\"        vet_test.go:114: files: [\\\"testdata/copylock.go\\\" \\\"testdata/print.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestVet/4\"}\n {\"Action\":\"output\",\"Test\":\"TestVet/1\",\"Output\":\"    --- PASS: TestVet/1 (0.07s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestVet/1\",\"Output\":\"    \\tvet_test.go:114: files: [\\\"testdata/atomic.go\\\" \\\"testdata/lostcancel.go\\\" \\\"testdata/unsafeptr.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestVet/1\",\"Output\":\"        vet_test.go:114: files: [\\\"testdata/atomic.go\\\" \\\"testdata/lostcancel.go\\\" \\\"testdata/unsafeptr.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestVet/1\"}\n {\"Action\":\"output\",\"Test\":\"TestVet/7\",\"Output\":\"    --- PASS: TestVet/7 (0.19s)\\n\"}\n-{\"Action\":\"output\",\"Test\":\"TestVet/7\",\"Output\":\"    \\tvet_test.go:114: files: [\\\"testdata/deadcode.go\\\" \\\"testdata/shift.go\\\"]\\n\"}\n+{\"Action\":\"output\",\"Test\":\"TestVet/7\",\"Output\":\"        vet_test.go:114: files: [\\\"testdata/deadcode.go\\\" \\\"testdata/shift.go\\\"]\\n\"}\n {\"Action\":\"pass\",\"Test\":\"TestVet/7\"}\n {\"Action\":\"pass\",\"Test\":\"TestVet\"}\n {\"Action\":\"output\",\"Test\":\"TestVetDirs\",\"Output\":\"--- PASS: TestVetDirs (0.01s)\\n\"}"}, {"sha": "59d187e0a33b637e695f25e1838f6a8e97ef2c0f", "filename": "libgo/go/cmd/internal/test2json/testdata/vet.test", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fvet.test", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fvet.test", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Ftest2json%2Ftestdata%2Fvet.test?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -58,11 +58,11 @@\n === CONT  TestVet/2\n --- PASS: TestTags (0.00s)\n     --- PASS: TestTags/x_testtag_y (0.04s)\n-    \tvet_test.go:187: -tags=x testtag y\n+        vet_test.go:187: -tags=x testtag y\n     --- PASS: TestTags/x,testtag,y (0.04s)\n-    \tvet_test.go:187: -tags=x,testtag,y\n+        vet_test.go:187: -tags=x,testtag,y\n     --- PASS: TestTags/testtag (0.04s)\n-    \tvet_test.go:187: -tags=testtag\n+        vet_test.go:187: -tags=testtag\n === CONT  TestVet/1\n === CONT  TestVetDirs/testingpkg\n === CONT  TestVetDirs/buildtag\n@@ -71,21 +71,21 @@\n === CONT  TestVetDirs/cgo\n --- PASS: TestVet (0.39s)\n     --- PASS: TestVet/5 (0.07s)\n-    \tvet_test.go:114: files: [\"testdata/copylock_func.go\" \"testdata/rangeloop.go\"]\n+        vet_test.go:114: files: [\"testdata/copylock_func.go\" \"testdata/rangeloop.go\"]\n     --- PASS: TestVet/3 (0.07s)\n-    \tvet_test.go:114: files: [\"testdata/composite.go\" \"testdata/nilfunc.go\"]\n+        vet_test.go:114: files: [\"testdata/composite.go\" \"testdata/nilfunc.go\"]\n     --- PASS: TestVet/6 (0.07s)\n-    \tvet_test.go:114: files: [\"testdata/copylock_range.go\" \"testdata/shadow.go\"]\n+        vet_test.go:114: files: [\"testdata/copylock_range.go\" \"testdata/shadow.go\"]\n     --- PASS: TestVet/2 (0.07s)\n-    \tvet_test.go:114: files: [\"testdata/bool.go\" \"testdata/method.go\" \"testdata/unused.go\"]\n+        vet_test.go:114: files: [\"testdata/bool.go\" \"testdata/method.go\" \"testdata/unused.go\"]\n     --- PASS: TestVet/0 (0.13s)\n-    \tvet_test.go:114: files: [\"testdata/assign.go\" \"testdata/httpresponse.go\" \"testdata/structtag.go\"]\n+        vet_test.go:114: files: [\"testdata/assign.go\" \"testdata/httpresponse.go\" \"testdata/structtag.go\"]\n     --- PASS: TestVet/4 (0.16s)\n-    \tvet_test.go:114: files: [\"testdata/copylock.go\" \"testdata/print.go\"]\n+        vet_test.go:114: files: [\"testdata/copylock.go\" \"testdata/print.go\"]\n     --- PASS: TestVet/1 (0.07s)\n-    \tvet_test.go:114: files: [\"testdata/atomic.go\" \"testdata/lostcancel.go\" \"testdata/unsafeptr.go\"]\n+        vet_test.go:114: files: [\"testdata/atomic.go\" \"testdata/lostcancel.go\" \"testdata/unsafeptr.go\"]\n     --- PASS: TestVet/7 (0.19s)\n-    \tvet_test.go:114: files: [\"testdata/deadcode.go\" \"testdata/shift.go\"]\n+        vet_test.go:114: files: [\"testdata/deadcode.go\" \"testdata/shift.go\"]\n --- PASS: TestVetDirs (0.01s)\n     --- PASS: TestVetDirs/testingpkg (0.06s)\n     --- PASS: TestVetDirs/divergent (0.05s)"}, {"sha": "57a874193e311cb19797dee89f16055fde81edeb", "filename": "libgo/go/cmd/test2json/main.go", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Ftest2json%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fcmd%2Ftest2json%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Ftest2json%2Fmain.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -118,12 +118,16 @@ func main() {\n \t\tw := &countWriter{0, c}\n \t\tcmd.Stdout = w\n \t\tcmd.Stderr = w\n-\t\tif err := cmd.Run(); err != nil {\n+\t\terr := cmd.Run()\n+\t\tif err != nil {\n \t\t\tif w.n > 0 {\n \t\t\t\t// Assume command printed why it failed.\n \t\t\t} else {\n \t\t\t\tfmt.Fprintf(c, \"test2json: %v\\n\", err)\n \t\t\t}\n+\t\t}\n+\t\tc.Exited(err)\n+\t\tif err != nil {\n \t\t\tc.Close()\n \t\t\tos.Exit(1)\n \t\t}"}, {"sha": "09de299ff71781f09e173acc72dc60705e2f1b37", "filename": "libgo/go/internal/poll/copy_file_range_linux.go", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Finternal%2Fpoll%2Fcopy_file_range_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Finternal%2Fpoll%2Fcopy_file_range_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Fcopy_file_range_linux.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -41,7 +41,7 @@ func CopyFileRange(dst, src *FD, remain int64) (written int64, handled bool, err\n \t\t\t// use copy_file_range(2) again.\n \t\t\tatomic.StoreInt32(&copyFileRangeSupported, 0)\n \t\t\treturn 0, false, nil\n-\t\tcase syscall.EXDEV, syscall.EINVAL:\n+\t\tcase syscall.EXDEV, syscall.EINVAL, syscall.EOPNOTSUPP, syscall.EPERM:\n \t\t\t// Prior to Linux 5.3, it was not possible to\n \t\t\t// copy_file_range across file systems. Similarly to\n \t\t\t// the ENOSYS case above, if we see EXDEV, we have\n@@ -52,6 +52,14 @@ func CopyFileRange(dst, src *FD, remain int64) (written int64, handled bool, err\n \t\t\t// dst or src refer to a pipe rather than a regular\n \t\t\t// file. This is another case where no data has been\n \t\t\t// transfered, so we consider it unhandled.\n+\t\t\t//\n+\t\t\t// If the file is on NFS, we can see EOPNOTSUPP.\n+\t\t\t// See issue #40731.\n+\t\t\t//\n+\t\t\t// If the process is running inside a Docker container,\n+\t\t\t// we might see EPERM instead of ENOSYS. See issue\n+\t\t\t// #40893. Since EPERM might also be a legitimate error,\n+\t\t\t// don't mark copy_file_range(2) as unsupported.\n \t\t\treturn 0, false, nil\n \t\tcase nil:\n \t\t\tif n == 0 {"}, {"sha": "61de6165f6199917bd796bd62a88af4cbd3bfad5", "filename": "libgo/go/net/http/cgi/child.go", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -163,10 +163,12 @@ func Serve(handler http.Handler) error {\n }\n \n type response struct {\n-\treq        *http.Request\n-\theader     http.Header\n-\tbufw       *bufio.Writer\n-\theaderSent bool\n+\treq            *http.Request\n+\theader         http.Header\n+\tcode           int\n+\twroteHeader    bool\n+\twroteCGIHeader bool\n+\tbufw           *bufio.Writer\n }\n \n func (r *response) Flush() {\n@@ -178,26 +180,38 @@ func (r *response) Header() http.Header {\n }\n \n func (r *response) Write(p []byte) (n int, err error) {\n-\tif !r.headerSent {\n+\tif !r.wroteHeader {\n \t\tr.WriteHeader(http.StatusOK)\n \t}\n+\tif !r.wroteCGIHeader {\n+\t\tr.writeCGIHeader(p)\n+\t}\n \treturn r.bufw.Write(p)\n }\n \n func (r *response) WriteHeader(code int) {\n-\tif r.headerSent {\n+\tif r.wroteHeader {\n \t\t// Note: explicitly using Stderr, as Stdout is our HTTP output.\n \t\tfmt.Fprintf(os.Stderr, \"CGI attempted to write header twice on request for %s\", r.req.URL)\n \t\treturn\n \t}\n-\tr.headerSent = true\n-\tfmt.Fprintf(r.bufw, \"Status: %d %s\\r\\n\", code, http.StatusText(code))\n+\tr.wroteHeader = true\n+\tr.code = code\n+}\n \n-\t// Set a default Content-Type\n+// writeCGIHeader finalizes the header sent to the client and writes it to the output.\n+// p is not written by writeHeader, but is the first chunk of the body\n+// that will be written. It is sniffed for a Content-Type if none is\n+// set explicitly.\n+func (r *response) writeCGIHeader(p []byte) {\n+\tif r.wroteCGIHeader {\n+\t\treturn\n+\t}\n+\tr.wroteCGIHeader = true\n+\tfmt.Fprintf(r.bufw, \"Status: %d %s\\r\\n\", r.code, http.StatusText(r.code))\n \tif _, hasType := r.header[\"Content-Type\"]; !hasType {\n-\t\tr.header.Add(\"Content-Type\", \"text/html; charset=utf-8\")\n+\t\tr.header.Set(\"Content-Type\", http.DetectContentType(p))\n \t}\n-\n \tr.header.Write(r.bufw)\n \tr.bufw.WriteString(\"\\r\\n\")\n \tr.bufw.Flush()"}, {"sha": "f6ecb6eb80f24d3e163dea5d046c984f8590c4ce", "filename": "libgo/go/net/http/cgi/child_test.go", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fchild_test.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -7,6 +7,11 @@\n package cgi\n \n import (\n+\t\"bufio\"\n+\t\"bytes\"\n+\t\"net/http\"\n+\t\"net/http/httptest\"\n+\t\"strings\"\n \t\"testing\"\n )\n \n@@ -148,3 +153,67 @@ func TestRequestWithoutRemotePort(t *testing.T) {\n \t\tt.Errorf(\"RemoteAddr: got %q; want %q\", g, e)\n \t}\n }\n+\n+type countingWriter int\n+\n+func (c *countingWriter) Write(p []byte) (int, error) {\n+\t*c += countingWriter(len(p))\n+\treturn len(p), nil\n+}\n+func (c *countingWriter) WriteString(p string) (int, error) {\n+\t*c += countingWriter(len(p))\n+\treturn len(p), nil\n+}\n+\n+func TestResponse(t *testing.T) {\n+\tvar tests = []struct {\n+\t\tname   string\n+\t\tbody   string\n+\t\twantCT string\n+\t}{\n+\t\t{\n+\t\t\tname:   \"no body\",\n+\t\t\twantCT: \"text/plain; charset=utf-8\",\n+\t\t},\n+\t\t{\n+\t\t\tname:   \"html\",\n+\t\t\tbody:   \"<html><head><title>test page</title></head><body>This is a body</body></html>\",\n+\t\t\twantCT: \"text/html; charset=utf-8\",\n+\t\t},\n+\t\t{\n+\t\t\tname:   \"text\",\n+\t\t\tbody:   strings.Repeat(\"gopher\", 86),\n+\t\t\twantCT: \"text/plain; charset=utf-8\",\n+\t\t},\n+\t\t{\n+\t\t\tname:   \"jpg\",\n+\t\t\tbody:   \"\\xFF\\xD8\\xFF\" + strings.Repeat(\"B\", 1024),\n+\t\t\twantCT: \"image/jpeg\",\n+\t\t},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tvar buf bytes.Buffer\n+\t\t\tresp := response{\n+\t\t\t\treq:    httptest.NewRequest(\"GET\", \"/\", nil),\n+\t\t\t\theader: http.Header{},\n+\t\t\t\tbufw:   bufio.NewWriter(&buf),\n+\t\t\t}\n+\t\t\tn, err := resp.Write([]byte(tt.body))\n+\t\t\tif err != nil {\n+\t\t\t\tt.Errorf(\"Write: unexpected %v\", err)\n+\t\t\t}\n+\t\t\tif want := len(tt.body); n != want {\n+\t\t\t\tt.Errorf(\"reported short Write: got %v want %v\", n, want)\n+\t\t\t}\n+\t\t\tresp.writeCGIHeader(nil)\n+\t\t\tresp.Flush()\n+\t\t\tif got := resp.Header().Get(\"Content-Type\"); got != tt.wantCT {\n+\t\t\t\tt.Errorf(\"wrong content-type: got %q, want %q\", got, tt.wantCT)\n+\t\t\t}\n+\t\t\tif !bytes.HasSuffix(buf.Bytes(), []byte(tt.body)) {\n+\t\t\t\tt.Errorf(\"body was not correctly written\")\n+\t\t\t}\n+\t\t})\n+\t}\n+}"}, {"sha": "295c3b82d404ccd9bc520a0fb5cea2d90bfd5e67", "filename": "libgo/go/net/http/cgi/integration_test.go", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fintegration_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fintegration_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fcgi%2Fintegration_test.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -16,7 +16,9 @@ import (\n \t\"io\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n+\t\"net/url\"\n \t\"os\"\n+\t\"strings\"\n \t\"testing\"\n \t\"time\"\n )\n@@ -52,7 +54,7 @@ func TestHostingOurselves(t *testing.T) {\n \t}\n \treplay := runCgiTest(t, h, \"GET /test.go?foo=bar&a=b HTTP/1.0\\nHost: example.com\\n\\n\", expectedMap)\n \n-\tif expected, got := \"text/html; charset=utf-8\", replay.Header().Get(\"Content-Type\"); got != expected {\n+\tif expected, got := \"text/plain; charset=utf-8\", replay.Header().Get(\"Content-Type\"); got != expected {\n \t\tt.Errorf(\"got a Content-Type of %q; expected %q\", got, expected)\n \t}\n \tif expected, got := \"X-Test-Value\", replay.Header().Get(\"X-Test-Header\"); got != expected {\n@@ -152,6 +154,51 @@ func TestChildOnlyHeaders(t *testing.T) {\n \t}\n }\n \n+func TestChildContentType(t *testing.T) {\n+\ttestenv.MustHaveExec(t)\n+\n+\th := &Handler{\n+\t\tPath: os.Args[0],\n+\t\tRoot: \"/test.go\",\n+\t\tArgs: []string{\"-test.run=TestBeChildCGIProcess\"},\n+\t}\n+\tvar tests = []struct {\n+\t\tname   string\n+\t\tbody   string\n+\t\twantCT string\n+\t}{\n+\t\t{\n+\t\t\tname:   \"no body\",\n+\t\t\twantCT: \"text/plain; charset=utf-8\",\n+\t\t},\n+\t\t{\n+\t\t\tname:   \"html\",\n+\t\t\tbody:   \"<html><head><title>test page</title></head><body>This is a body</body></html>\",\n+\t\t\twantCT: \"text/html; charset=utf-8\",\n+\t\t},\n+\t\t{\n+\t\t\tname:   \"text\",\n+\t\t\tbody:   strings.Repeat(\"gopher\", 86),\n+\t\t\twantCT: \"text/plain; charset=utf-8\",\n+\t\t},\n+\t\t{\n+\t\t\tname:   \"jpg\",\n+\t\t\tbody:   \"\\xFF\\xD8\\xFF\" + strings.Repeat(\"B\", 1024),\n+\t\t\twantCT: \"image/jpeg\",\n+\t\t},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\texpectedMap := map[string]string{\"_body\": tt.body}\n+\t\t\treq := fmt.Sprintf(\"GET /test.go?exact-body=%s HTTP/1.0\\nHost: example.com\\n\\n\", url.QueryEscape(tt.body))\n+\t\t\treplay := runCgiTest(t, h, req, expectedMap)\n+\t\t\tif got := replay.Header().Get(\"Content-Type\"); got != tt.wantCT {\n+\t\t\t\tt.Errorf(\"got a Content-Type of %q; expected it to start with %q\", got, tt.wantCT)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n // golang.org/issue/7198\n func Test500WithNoHeaders(t *testing.T)     { want500Test(t, \"/immediate-disconnect\") }\n func Test500WithNoContentType(t *testing.T) { want500Test(t, \"/no-content-type\") }\n@@ -203,6 +250,10 @@ func TestBeChildCGIProcess(t *testing.T) {\n \t\tif req.FormValue(\"no-body\") == \"1\" {\n \t\t\treturn\n \t\t}\n+\t\tif eb, ok := req.Form[\"exact-body\"]; ok {\n+\t\t\tio.WriteString(rw, eb[0])\n+\t\t\treturn\n+\t\t}\n \t\tif req.FormValue(\"write-forever\") == \"1\" {\n \t\t\tio.Copy(rw, neverEnding('a'))\n \t\t\tfor {"}, {"sha": "a31273b3eca7a64216da830dae33fb0fc9005ab1", "filename": "libgo/go/net/http/fcgi/child.go", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Fchild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Fchild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Fchild.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -74,10 +74,12 @@ func (r *request) parseParams() {\n \n // response implements http.ResponseWriter.\n type response struct {\n-\treq         *request\n-\theader      http.Header\n-\tw           *bufWriter\n-\twroteHeader bool\n+\treq            *request\n+\theader         http.Header\n+\tcode           int\n+\twroteHeader    bool\n+\twroteCGIHeader bool\n+\tw              *bufWriter\n }\n \n func newResponse(c *child, req *request) *response {\n@@ -92,34 +94,49 @@ func (r *response) Header() http.Header {\n \treturn r.header\n }\n \n-func (r *response) Write(data []byte) (int, error) {\n+func (r *response) Write(p []byte) (n int, err error) {\n \tif !r.wroteHeader {\n \t\tr.WriteHeader(http.StatusOK)\n \t}\n-\treturn r.w.Write(data)\n+\tif !r.wroteCGIHeader {\n+\t\tr.writeCGIHeader(p)\n+\t}\n+\treturn r.w.Write(p)\n }\n \n func (r *response) WriteHeader(code int) {\n \tif r.wroteHeader {\n \t\treturn\n \t}\n \tr.wroteHeader = true\n+\tr.code = code\n \tif code == http.StatusNotModified {\n \t\t// Must not have body.\n \t\tr.header.Del(\"Content-Type\")\n \t\tr.header.Del(\"Content-Length\")\n \t\tr.header.Del(\"Transfer-Encoding\")\n-\t} else if r.header.Get(\"Content-Type\") == \"\" {\n-\t\tr.header.Set(\"Content-Type\", \"text/html; charset=utf-8\")\n \t}\n-\n \tif r.header.Get(\"Date\") == \"\" {\n \t\tr.header.Set(\"Date\", time.Now().UTC().Format(http.TimeFormat))\n \t}\n+}\n \n-\tfmt.Fprintf(r.w, \"Status: %d %s\\r\\n\", code, http.StatusText(code))\n+// writeCGIHeader finalizes the header sent to the client and writes it to the output.\n+// p is not written by writeHeader, but is the first chunk of the body\n+// that will be written. It is sniffed for a Content-Type if none is\n+// set explicitly.\n+func (r *response) writeCGIHeader(p []byte) {\n+\tif r.wroteCGIHeader {\n+\t\treturn\n+\t}\n+\tr.wroteCGIHeader = true\n+\tfmt.Fprintf(r.w, \"Status: %d %s\\r\\n\", r.code, http.StatusText(r.code))\n+\tif _, hasType := r.header[\"Content-Type\"]; r.code != http.StatusNotModified && !hasType {\n+\t\tr.header.Set(\"Content-Type\", http.DetectContentType(p))\n+\t}\n \tr.header.Write(r.w)\n \tr.w.WriteString(\"\\r\\n\")\n+\tr.w.Flush()\n }\n \n func (r *response) Flush() {\n@@ -290,6 +307,8 @@ func (c *child) serveRequest(req *request, body io.ReadCloser) {\n \t\thttpReq = httpReq.WithContext(envVarCtx)\n \t\tc.handler.ServeHTTP(r, httpReq)\n \t}\n+\t// Make sure we serve something even if nothing was written to r\n+\tr.Write(nil)\n \tr.Close()\n \tc.mu.Lock()\n \tdelete(c.requests, req.reqId)"}, {"sha": "59246c26cc87182ae8f92d08d22b4f8ca4292cfb", "filename": "libgo/go/net/http/fcgi/fcgi_test.go", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Ffcgi_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Ffcgi_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ffcgi%2Ffcgi_test.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -10,6 +10,7 @@ import (\n \t\"io\"\n \t\"io/ioutil\"\n \t\"net/http\"\n+\t\"strings\"\n \t\"testing\"\n )\n \n@@ -344,3 +345,55 @@ func TestChildServeReadsEnvVars(t *testing.T) {\n \t\t<-done\n \t}\n }\n+\n+func TestResponseWriterSniffsContentType(t *testing.T) {\n+\tt.Skip(\"this test is flaky, see Issue 41167\")\n+\tvar tests = []struct {\n+\t\tname   string\n+\t\tbody   string\n+\t\twantCT string\n+\t}{\n+\t\t{\n+\t\t\tname:   \"no body\",\n+\t\t\twantCT: \"text/plain; charset=utf-8\",\n+\t\t},\n+\t\t{\n+\t\t\tname:   \"html\",\n+\t\t\tbody:   \"<html><head><title>test page</title></head><body>This is a body</body></html>\",\n+\t\t\twantCT: \"text/html; charset=utf-8\",\n+\t\t},\n+\t\t{\n+\t\t\tname:   \"text\",\n+\t\t\tbody:   strings.Repeat(\"gopher\", 86),\n+\t\t\twantCT: \"text/plain; charset=utf-8\",\n+\t\t},\n+\t\t{\n+\t\t\tname:   \"jpg\",\n+\t\t\tbody:   \"\\xFF\\xD8\\xFF\" + strings.Repeat(\"B\", 1024),\n+\t\t\twantCT: \"image/jpeg\",\n+\t\t},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tinput := make([]byte, len(streamFullRequestStdin))\n+\t\t\tcopy(input, streamFullRequestStdin)\n+\t\t\trc := nopWriteCloser{bytes.NewBuffer(input)}\n+\t\t\tdone := make(chan bool)\n+\t\t\tvar resp *response\n+\t\t\tc := newChild(rc, http.HandlerFunc(func(\n+\t\t\t\tw http.ResponseWriter,\n+\t\t\t\tr *http.Request,\n+\t\t\t) {\n+\t\t\t\tio.WriteString(w, tt.body)\n+\t\t\t\tresp = w.(*response)\n+\t\t\t\tdone <- true\n+\t\t\t}))\n+\t\t\tdefer c.cleanUp()\n+\t\t\tgo c.serve()\n+\t\t\t<-done\n+\t\t\tif got := resp.Header().Get(\"Content-Type\"); got != tt.wantCT {\n+\t\t\t\tt.Errorf(\"got a Content-Type of %q; expected it to start with %q\", got, tt.wantCT)\n+\t\t\t}\n+\t\t})\n+\t}\n+}"}, {"sha": "09fb794005a9b06b18b2063417364cc567b82cea", "filename": "libgo/go/net/mail/message.go", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fmail%2Fmessage.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fmail%2Fmessage.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fmail%2Fmessage.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -279,9 +279,6 @@ func (p *addrParser) parseAddressList() ([]*Address, error) {\n \t\tif p.consume(',') {\n \t\t\tcontinue\n \t\t}\n-\t\tif p.empty() {\n-\t\t\tbreak\n-\t\t}\n \n \t\taddrs, err := p.parseAddress(true)\n \t\tif err != nil {\n@@ -295,9 +292,17 @@ func (p *addrParser) parseAddressList() ([]*Address, error) {\n \t\tif p.empty() {\n \t\t\tbreak\n \t\t}\n-\t\tif !p.consume(',') {\n+\t\tif p.peek() != ',' {\n \t\t\treturn nil, errors.New(\"mail: expected comma\")\n \t\t}\n+\n+\t\t// Skip empty entries for obs-addr-list.\n+\t\tfor p.consume(',') {\n+\t\t\tp.skipSpace()\n+\t\t}\n+\t\tif p.empty() {\n+\t\t\tbreak\n+\t\t}\n \t}\n \treturn list, nil\n }"}, {"sha": "67e3643aeb774cfb099fcfcba189c991a702ad57", "filename": "libgo/go/net/mail/message_test.go", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fmail%2Fmessage_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fnet%2Fmail%2Fmessage_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fmail%2Fmessage_test.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -445,6 +445,19 @@ func TestAddressParsing(t *testing.T) {\n \t\t\t\t},\n \t\t\t},\n \t\t},\n+\t\t{\n+\t\t\t` , joe@where.test,,John <jdoe@one.test>,,`,\n+\t\t\t[]*Address{\n+\t\t\t\t{\n+\t\t\t\t\tName:    \"\",\n+\t\t\t\t\tAddress: \"joe@where.test\",\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tName:    \"John\",\n+\t\t\t\t\tAddress: \"jdoe@one.test\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n \t\t{\n \t\t\t`Group1: <addr1@example.com>;, Group 2: addr2@example.com;, John <addr3@example.com>`,\n \t\t\t[]*Address{\n@@ -1067,3 +1080,22 @@ func TestAddressFormattingAndParsing(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+func TestEmptyAddress(t *testing.T) {\n+\tparsed, err := ParseAddress(\"\")\n+\tif parsed != nil || err == nil {\n+\t\tt.Errorf(`ParseAddress(\"\") = %v, %v, want nil, error`, parsed, err)\n+\t}\n+\tlist, err := ParseAddressList(\"\")\n+\tif len(list) > 0 || err == nil {\n+\t\tt.Errorf(`ParseAddressList(\"\") = %v, %v, want nil, error`, list, err)\n+\t}\n+\tlist, err = ParseAddressList(\",\")\n+\tif len(list) > 0 || err == nil {\n+\t\tt.Errorf(`ParseAddressList(\"\") = %v, %v, want nil, error`, list, err)\n+\t}\n+\tlist, err = ParseAddressList(\"a@b c@d\")\n+\tif len(list) > 0 || err == nil {\n+\t\tt.Errorf(`ParseAddressList(\"\") = %v, %v, want nil, error`, list, err)\n+\t}\n+}"}, {"sha": "bd2d00f117a7d0e2e6780de0b59c7be6e9746833", "filename": "libgo/go/runtime/checkptr_test.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fruntime%2Fcheckptr_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fruntime%2Fcheckptr_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fcheckptr_test.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -31,6 +31,7 @@ func TestCheckPtr(t *testing.T) {\n \t\t{\"CheckPtrAlignmentPtr\", \"fatal error: checkptr: misaligned pointer conversion\\n\"},\n \t\t{\"CheckPtrAlignmentNoPtr\", \"\"},\n \t\t{\"CheckPtrArithmetic\", \"fatal error: checkptr: pointer arithmetic result points to invalid allocation\\n\"},\n+\t\t{\"CheckPtrArithmetic2\", \"fatal error: checkptr: pointer arithmetic result points to invalid allocation\\n\"},\n \t\t{\"CheckPtrSize\", \"fatal error: checkptr: converted pointer straddles multiple allocations\\n\"},\n \t\t{\"CheckPtrSmall\", \"fatal error: checkptr: pointer arithmetic computed bad pointer value\\n\"},\n \t}"}, {"sha": "32378a96277c7199c3eb894c2c5a97e69316ef74", "filename": "libgo/go/runtime/lockrank_off.go", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fruntime%2Flockrank_off.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fruntime%2Flockrank_off.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Flockrank_off.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -18,19 +18,29 @@ func getLockRank(l *mutex) lockRank {\n \treturn 0\n }\n \n+// The following functions may be called in nosplit context.\n+// Nosplit is not strictly required for lockWithRank, unlockWithRank\n+// and lockWithRankMayAcquire, but these nosplit annotations must\n+// be kept consistent with the equivalent functions in lockrank_on.go.\n+\n+//go:nosplit\n func lockWithRank(l *mutex, rank lockRank) {\n \tlock2(l)\n }\n \n+//go:nosplit\n func acquireLockRank(rank lockRank) {\n }\n \n+//go:nosplit\n func unlockWithRank(l *mutex) {\n \tunlock2(l)\n }\n \n+//go:nosplit\n func releaseLockRank(rank lockRank) {\n }\n \n+//go:nosplit\n func lockWithRankMayAcquire(l *mutex, rank lockRank) {\n }"}, {"sha": "e0a2794f4c1da108a7883285a20526e3738bebed", "filename": "libgo/go/runtime/testdata/testprog/checkptr.go", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprog%2Fcheckptr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprog%2Fcheckptr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprog%2Fcheckptr.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -10,6 +10,7 @@ func init() {\n \tregister(\"CheckPtrAlignmentNoPtr\", CheckPtrAlignmentNoPtr)\n \tregister(\"CheckPtrAlignmentPtr\", CheckPtrAlignmentPtr)\n \tregister(\"CheckPtrArithmetic\", CheckPtrArithmetic)\n+\tregister(\"CheckPtrArithmetic2\", CheckPtrArithmetic2)\n \tregister(\"CheckPtrSize\", CheckPtrSize)\n \tregister(\"CheckPtrSmall\", CheckPtrSmall)\n }\n@@ -32,6 +33,13 @@ func CheckPtrArithmetic() {\n \tsink2 = (*int)(unsafe.Pointer(i))\n }\n \n+func CheckPtrArithmetic2() {\n+\tvar x [2]int64\n+\tp := unsafe.Pointer(&x[1])\n+\tvar one uintptr = 1\n+\tsink2 = unsafe.Pointer(uintptr(p) & ^one)\n+}\n+\n func CheckPtrSize() {\n \tp := new(int64)\n \tsink2 = p"}, {"sha": "9ad25353ff48cef7c541de24e3382c346dc44f61", "filename": "libgo/go/sync/map.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fsync%2Fmap.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fsync%2Fmap.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsync%2Fmap.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -274,6 +274,7 @@ func (m *Map) LoadAndDelete(key interface{}) (value interface{}, loaded bool) {\n \t\te, ok = read.m[key]\n \t\tif !ok && read.amended {\n \t\t\te, ok = m.dirty[key]\n+\t\t\tdelete(m.dirty, key)\n \t\t\t// Regardless of whether the entry was present, record a miss: this key\n \t\t\t// will take the slow path until the dirty map is promoted to the read\n \t\t\t// map."}, {"sha": "7f163caa5c95d111845844e41fa401065b4a9766", "filename": "libgo/go/sync/map_test.go", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fsync%2Fmap_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Fsync%2Fmap_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsync%2Fmap_test.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -9,6 +9,7 @@ import (\n \t\"reflect\"\n \t\"runtime\"\n \t\"sync\"\n+\t\"sync/atomic\"\n \t\"testing\"\n \t\"testing/quick\"\n )\n@@ -171,3 +172,26 @@ func TestConcurrentRange(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+func TestIssue40999(t *testing.T) {\n+\tvar m sync.Map\n+\n+\t// Since the miss-counting in missLocked (via Delete)\n+\t// compares the miss count with len(m.dirty),\n+\t// add an initial entry to bias len(m.dirty) above the miss count.\n+\tm.Store(nil, struct{}{})\n+\n+\tvar finalized uint32\n+\n+\t// Set finalizers that count for collected keys. A non-zero count\n+\t// indicates that keys have not been leaked.\n+\tfor atomic.LoadUint32(&finalized) == 0 {\n+\t\tp := new(int)\n+\t\truntime.SetFinalizer(p, func(*int) {\n+\t\t\tatomic.AddUint32(&finalized, 1)\n+\t\t})\n+\t\tm.Store(p, struct{}{})\n+\t\tm.Delete(p)\n+\t\truntime.GC()\n+\t}\n+}"}, {"sha": "fe6929d1ba0449b200479eb3a29bc6a957605139", "filename": "libgo/go/testing/testing.go", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Ftesting%2Ftesting.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fgo%2Ftesting%2Ftesting.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftesting%2Ftesting.go?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -357,10 +357,19 @@ func (p *testPrinter) Fprint(w io.Writer, testName, out string) {\n \tdefer p.lastNameMu.Unlock()\n \n \tif !p.chatty ||\n-\t\tstrings.HasPrefix(out, \"--- PASS\") ||\n-\t\tstrings.HasPrefix(out, \"--- FAIL\") ||\n-\t\tstrings.HasPrefix(out, \"=== CONT\") ||\n-\t\tstrings.HasPrefix(out, \"=== RUN\") {\n+\t\tstrings.HasPrefix(out, \"--- PASS: \") ||\n+\t\tstrings.HasPrefix(out, \"--- FAIL: \") ||\n+\t\tstrings.HasPrefix(out, \"--- SKIP: \") ||\n+\t\tstrings.HasPrefix(out, \"=== RUN   \") ||\n+\t\tstrings.HasPrefix(out, \"=== CONT  \") ||\n+\t\tstrings.HasPrefix(out, \"=== PAUSE \") {\n+\t\t// If we're buffering test output (!p.chatty), we don't really care which\n+\t\t// test is emitting which line so long as they are serialized.\n+\t\t//\n+\t\t// If the message already implies an association with a specific new test,\n+\t\t// we don't need to check what the old test name was or log an extra CONT\n+\t\t// line for it. (We're updating it anyway, and the current message already\n+\t\t// includes the test name.)\n \t\tp.lastName = testName\n \t\tfmt.Fprint(w, out)\n \t\treturn\n@@ -887,11 +896,15 @@ func (c *common) Cleanup(f func()) {\n \tc.cleanup = func() {\n \t\tif oldCleanup != nil {\n \t\t\tdefer func() {\n+\t\t\t\tc.mu.Lock()\n \t\t\t\tc.cleanupPc = oldCleanupPc\n+\t\t\t\tc.mu.Unlock()\n \t\t\t\toldCleanup()\n \t\t\t}()\n \t\t}\n+\t\tc.mu.Lock()\n \t\tc.cleanupName = callerName(0)\n+\t\tc.mu.Unlock()\n \t\tf()\n \t}\n \tvar pc [maxStackLen]uintptr\n@@ -1012,7 +1025,13 @@ func (t *T) Parallel() {\n \t\tfor ; root.parent != nil; root = root.parent {\n \t\t}\n \t\troot.mu.Lock()\n-\t\tfmt.Fprintf(root.w, \"=== PAUSE %s\\n\", t.name)\n+\t\t// Unfortunately, even though PAUSE indicates that the named test is *no\n+\t\t// longer* running, cmd/test2json interprets it as changing the active test\n+\t\t// for the purpose of log parsing. We could fix cmd/test2json, but that\n+\t\t// won't fix existing deployments of third-party tools that already shell\n+\t\t// out to older builds of cmd/test2json \u2014 so merely fixing cmd/test2json\n+\t\t// isn't enough for now.\n+\t\tprinter.Fprint(root.w, t.name, fmt.Sprintf(\"=== PAUSE %s\\n\", t.name))\n \t\troot.mu.Unlock()\n \t}\n "}, {"sha": "f8de950fe2e67ad52373a17872973c3e038db224", "filename": "libgo/merge.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fmerge.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a83805e047a583348e8bef18b966ecb8eee5d4/libgo%2Fmerge.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmerge.sh?ref=10a83805e047a583348e8bef18b966ecb8eee5d4", "patch": "@@ -128,7 +128,7 @@ echo ${rev} > VERSION\n (cd ${NEWDIR}/src && find . -name '*.go' -print) | while read f; do\n   skip=false\n   case \"$f\" in\n-  ./cmd/buildid/* | ./cmd/cgo/* | ./cmd/go/* | ./cmd/gofmt/* | ./cmd/testjson/* | ./cmd/vet/* | ./cmd/internal/browser/* | ./cmd/internal/buildid/* | ./cmd/internal/edit/* | ./cmd/internal/objabi/* | ./cmd/internal/testj2on/* | ./cmd/internal/sys/* | ./cmd/vendor/golang.org/x/tools/* | ./cmd/vendor/golang.org/x/mod/* | ./cmd/vendor/golang.org/x/xerrors/* | ./cmd/vendor/golang.org/x/crypto/ed25519)\n+  ./cmd/buildid/* | ./cmd/cgo/* | ./cmd/go/* | ./cmd/gofmt/* | ./cmd/test2json/* | ./cmd/vet/* | ./cmd/internal/browser/* | ./cmd/internal/buildid/* | ./cmd/internal/edit/* | ./cmd/internal/objabi/* | ./cmd/internal/test2json/* | ./cmd/internal/sys/* | ./cmd/vendor/golang.org/x/tools/* | ./cmd/vendor/golang.org/x/mod/* | ./cmd/vendor/golang.org/x/xerrors/* | ./cmd/vendor/golang.org/x/crypto/ed25519)\n     ;;\n   ./cmd/*)\n     skip=true\n@@ -150,7 +150,7 @@ done\n (cd ${NEWDIR}/src && find . -name testdata -print) | while read d; do\n   skip=false\n   case \"$d\" in\n-  ./cmd/buildid/* | ./cmd/cgo/* | ./cmd/go/* | ./cmd/gofmt/* | ./cmd/testjson/* | ./cmd/vet/* | ./cmd/internal/browser/* | ./cmd/internal/buildid/* | ./cmd/internal/diff/* | ./cmd/internal/edit/* | ./cmd/internal/objabi/* | ./cmd/internal/testj2on/* | ./cmd/internal/sys/* | ./cmd/vendor/golang.org/x/tools/*)\n+  ./cmd/buildid/* | ./cmd/cgo/* | ./cmd/go/* | ./cmd/gofmt/* | ./cmd/test2json/* | ./cmd/vet/* | ./cmd/internal/browser/* | ./cmd/internal/buildid/* | ./cmd/internal/diff/* | ./cmd/internal/edit/* | ./cmd/internal/objabi/* | ./cmd/internal/test2json/* | ./cmd/internal/sys/* | ./cmd/vendor/golang.org/x/tools/*)\n     ;;\n   ./cmd/*)\n     skip=true"}]}