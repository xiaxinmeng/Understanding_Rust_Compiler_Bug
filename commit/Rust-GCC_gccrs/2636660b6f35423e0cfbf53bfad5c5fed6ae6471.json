{"sha": "2636660b6f35423e0cfbf53bfad5c5fed6ae6471", "node_id": "C_kwDOANBUbNoAKDI2MzY2NjBiNmYzNTQyM2UwY2ZiZjUzYmZhZDVjNWZlZDZhZTY0NzE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-06-15T10:12:51Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-06-15T10:12:51Z"}, "message": "aarch64: Revert bogus fix for PR105254\n\nIn f2ebf2d98efe0ac2314b58cf474f44cb8ebd5244 I'd forced the\nchosen unroll factor to be a factor of the VF, in order to\nwork around an exact_div ICE in PR105254.  This was completely\nbogus -- clearly I didn't look in enough detail at why we ended\nup with an unrolled VF that wasn't a multiple of the UF.\n\nKewen has since fixed the bug properly for PR105940, so this\npatch reverts my earlier attempt.  Sorry for the stupidity.\n\ngcc/\n\tPR tree-optimization/105254\n\tPR tree-optimization/105940\n\n\tRevert:\n\n\t* config/aarch64/aarch64.cc\n\t(aarch64_vector_costs::determine_suggested_unroll_factor): Take a\n\tloop_vec_info as argument.  Restrict the unroll factor to values\n\tthat divide the VF.\n\t(aarch64_vector_costs::finish_cost): Update call accordingly.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cost_model_14.c: New test.", "tree": {"sha": "8d242f2d5538b0a41164a3a11646fa50cbb2f437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d242f2d5538b0a41164a3a11646fa50cbb2f437"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2636660b6f35423e0cfbf53bfad5c5fed6ae6471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2636660b6f35423e0cfbf53bfad5c5fed6ae6471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2636660b6f35423e0cfbf53bfad5c5fed6ae6471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2636660b6f35423e0cfbf53bfad5c5fed6ae6471/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "183a4f3829243b43a28fc70e59129521033b8f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183a4f3829243b43a28fc70e59129521033b8f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/183a4f3829243b43a28fc70e59129521033b8f8a"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "d049f9a9819628a73bfd57114c3b89d848da7d9c", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2636660b6f35423e0cfbf53bfad5c5fed6ae6471/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2636660b6f35423e0cfbf53bfad5c5fed6ae6471/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=2636660b6f35423e0cfbf53bfad5c5fed6ae6471", "patch": "@@ -15631,7 +15631,7 @@ class aarch64_vector_costs : public vector_costs\n   unsigned int adjust_body_cost (loop_vec_info, const aarch64_vector_costs *,\n \t\t\t\t unsigned int);\n   bool prefer_unrolled_loop () const;\n-  unsigned int determine_suggested_unroll_factor (loop_vec_info);\n+  unsigned int determine_suggested_unroll_factor ();\n \n   /* True if we have performed one-time initialization based on the\n      vec_info.  */\n@@ -16740,8 +16740,7 @@ adjust_body_cost_sve (const aarch64_vec_op_count *ops,\n }\n \n unsigned int\n-aarch64_vector_costs::\n-determine_suggested_unroll_factor (loop_vec_info loop_vinfo)\n+aarch64_vector_costs::determine_suggested_unroll_factor ()\n {\n   bool sve = m_vec_flags & VEC_ANY_SVE;\n   /* If we are trying to unroll an Advanced SIMD main loop that contains\n@@ -16755,7 +16754,6 @@ determine_suggested_unroll_factor (loop_vec_info loop_vinfo)\n     return 1;\n \n   unsigned int max_unroll_factor = 1;\n-  auto vf = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n   for (auto vec_ops : m_ops)\n     {\n       aarch64_simd_vec_issue_info const *vec_issue\n@@ -16764,8 +16762,7 @@ determine_suggested_unroll_factor (loop_vec_info loop_vinfo)\n \treturn 1;\n       /* Limit unroll factor to a value adjustable by the user, the default\n \t value is 4. */\n-      unsigned int unroll_factor = MIN (aarch64_vect_unroll_limit,\n-\t\t\t\t\t(int) known_alignment (vf));\n+      unsigned int unroll_factor = aarch64_vect_unroll_limit;\n       unsigned int factor\n        = vec_ops.reduction_latency > 1 ? vec_ops.reduction_latency : 1;\n       unsigned int temp;\n@@ -16943,8 +16940,7 @@ aarch64_vector_costs::finish_cost (const vector_costs *uncast_scalar_costs)\n     {\n       m_costs[vect_body] = adjust_body_cost (loop_vinfo, scalar_costs,\n \t\t\t\t\t     m_costs[vect_body]);\n-      m_suggested_unroll_factor\n-\t= determine_suggested_unroll_factor (loop_vinfo);\n+      m_suggested_unroll_factor = determine_suggested_unroll_factor ();\n     }\n \n   /* Apply the heuristic described above m_stp_sequence_cost.  Prefer"}, {"sha": "b65826b08898114da47e0f569213959df686573a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_14.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2636660b6f35423e0cfbf53bfad5c5fed6ae6471/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2636660b6f35423e0cfbf53bfad5c5fed6ae6471/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_14.c?ref=2636660b6f35423e0cfbf53bfad5c5fed6ae6471", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O3 -mtune=neoverse-v1\" } */\n+\n+#include <stdint.h>\n+\n+uint64_t f2(uint64_t *ptr, int n) {\n+  uint64_t res = 0;\n+  for (int i = 0; i < n; ++i)\n+    res += ptr[i];\n+  return res;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d,} 5 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d,} 8 } } */"}]}