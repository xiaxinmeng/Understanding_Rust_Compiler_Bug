{"sha": "807331086bd15e491199279e872d75052c67bed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA3MzMxMDg2YmQxNWU0OTExOTkyNzllODcyZDc1MDUyYzY3YmVkOQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-11T22:10:43Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-11T22:10:43Z"}, "message": "genattrtab.c (contained_in_p): Delete unused function.\n\n2007-02-11  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* genattrtab.c (contained_in_p): Delete unused function.\n\t(write_expr_attr_cache): Likewise.\n\nFrom-SVN: r121827", "tree": {"sha": "14341216c049d18441aed24b203478d1119d1964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14341216c049d18441aed24b203478d1119d1964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/807331086bd15e491199279e872d75052c67bed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807331086bd15e491199279e872d75052c67bed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807331086bd15e491199279e872d75052c67bed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807331086bd15e491199279e872d75052c67bed9/comments", "author": null, "committer": null, "parents": [{"sha": "68e2e14118630fdacae722f6a571766a72fc938a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e2e14118630fdacae722f6a571766a72fc938a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e2e14118630fdacae722f6a571766a72fc938a"}], "stats": {"total": 81, "additions": 5, "deletions": 76}, "files": [{"sha": "959a1ffc9de09a23f389777e9249c718d6e143ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807331086bd15e491199279e872d75052c67bed9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807331086bd15e491199279e872d75052c67bed9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=807331086bd15e491199279e872d75052c67bed9", "patch": "@@ -1,3 +1,8 @@\n+2007-02-11  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* genattrtab.c (contained_in_p): Delete unused function.\n+\t(write_expr_attr_cache): Likewise.\n+\n 2007-02-11  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline.c (cgraph_edge_badness): Add \"else\" missing in the"}, {"sha": "0cf378a7b9c88e2f9cb7ed1a70fc09d9cd5037b3", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807331086bd15e491199279e872d75052c67bed9/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807331086bd15e491199279e872d75052c67bed9/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=807331086bd15e491199279e872d75052c67bed9", "patch": "@@ -3056,37 +3056,6 @@ compares_alternatives_p (rtx exp)\n   return 0;\n }\n \n-/* Returns nonzero is INNER is contained in EXP.  */\n-\n-static int\n-contained_in_p (rtx inner, rtx exp)\n-{\n-  int i, j;\n-  const char *fmt;\n-\n-  if (rtx_equal_p (inner, exp))\n-    return 1;\n-\n-  for (i = 0, fmt = GET_RTX_FORMAT (GET_CODE (exp));\n-       i < GET_RTX_LENGTH (GET_CODE (exp)); i++)\n-    switch (*fmt++)\n-      {\n-      case 'e':\n-      case 'u':\n-\tif (contained_in_p (inner, XEXP (exp, i)))\n-\t  return 1;\n-\tbreak;\n-\n-      case 'E':\n-\tfor (j = 0; j < XVECLEN (exp, i); j++)\n-\t  if (contained_in_p (inner, XVECEXP (exp, i, j)))\n-\t    return 1;\n-\tbreak;\n-      }\n-\n-  return 0;\n-}\n-\n /* Process DEFINE_PEEPHOLE, DEFINE_INSN, and DEFINE_ASM_ATTRIBUTES.  */\n \n static void\n@@ -3912,51 +3881,6 @@ write_attr_case (struct attr_desc *attr, struct attr_value *av,\n   printf (\"\\n\");\n }\n \n-/* Search for uses of non-const attributes and write code to cache them.  */\n-\n-static int\n-write_expr_attr_cache (rtx p, struct attr_desc *attr)\n-{\n-  const char *fmt;\n-  int i, ie, j, je;\n-\n-  if (GET_CODE (p) == EQ_ATTR)\n-    {\n-      if (XSTR (p, 0) != attr->name)\n-\treturn 0;\n-\n-      if (!attr->is_numeric)\n-\tprintf (\"  enum attr_%s \", attr->name);\n-      else\n-\tprintf (\"  int \");\n-\n-      printf (\"attr_%s = get_attr_%s (insn);\\n\", attr->name, attr->name);\n-      return 1;\n-    }\n-\n-  fmt = GET_RTX_FORMAT (GET_CODE (p));\n-  ie = GET_RTX_LENGTH (GET_CODE (p));\n-  for (i = 0; i < ie; i++)\n-    {\n-      switch (*fmt++)\n-\t{\n-\tcase 'e':\n-\t  if (write_expr_attr_cache (XEXP (p, i), attr))\n-\t    return 1;\n-\t  break;\n-\n-\tcase 'E':\n-\t  je = XVECLEN (p, i);\n-\t  for (j = 0; j < je; ++j)\n-\t    if (write_expr_attr_cache (XVECEXP (p, i, j), attr))\n-\t      return 1;\n-\t  break;\n-\t}\n-    }\n-\n-  return 0;\n-}\n-\n /* Utilities to write in various forms.  */\n \n static void"}]}