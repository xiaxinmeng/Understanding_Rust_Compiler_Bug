{"sha": "ff111948988e61cd44da618d0a4231b9bb8aa66c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYxMTE5NDg5ODhlNjFjZDQ0ZGE2MThkMGE0MjMxYjliYjhhYTY2Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-12T19:30:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-12T19:30:00Z"}, "message": "re PR debug/83157 (gcc.dg/guality/pr41616-1.c fail, inline instances refer to concrete instance as abstract origin)\n\n\tPR debug/83157\n\t* var-tracking.c (add_stores): Handle STRICT_LOW_PART SET_DEST.\n\t* cselib.c (cselib_record_sets): For STRICT_LOW_PART dest,\n\tlookup if dest in some wider mode is known to be const0_rtx and\n\tif so, record permanent equivalence for it to be ZERO_EXTEND of\n\tthe narrower mode destination.\n\nFrom-SVN: r259353", "tree": {"sha": "7b8b11409bbb5056a857ad264f7aa8c215986189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b8b11409bbb5056a857ad264f7aa8c215986189"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff111948988e61cd44da618d0a4231b9bb8aa66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff111948988e61cd44da618d0a4231b9bb8aa66c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff111948988e61cd44da618d0a4231b9bb8aa66c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff111948988e61cd44da618d0a4231b9bb8aa66c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b95d1af3e88992ddea645227eba39ab9f3584df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b95d1af3e88992ddea645227eba39ab9f3584df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b95d1af3e88992ddea645227eba39ab9f3584df"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "08c25401bb21053d494ba45e765b63b9732f0ec7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff111948988e61cd44da618d0a4231b9bb8aa66c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff111948988e61cd44da618d0a4231b9bb8aa66c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff111948988e61cd44da618d0a4231b9bb8aa66c", "patch": "@@ -1,3 +1,12 @@\n+2018-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/83157\n+\t* var-tracking.c (add_stores): Handle STRICT_LOW_PART SET_DEST.\n+\t* cselib.c (cselib_record_sets): For STRICT_LOW_PART dest,\n+\tlookup if dest in some wider mode is known to be const0_rtx and\n+\tif so, record permanent equivalence for it to be ZERO_EXTEND of\n+\tthe narrower mode destination.\n+\n 2018-04-12  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* lto-streamer-out.c (output_function): Revert 259346."}, {"sha": "5a978c1f4b8a8a86a2bd9dbbd5628cd5c5f86b3d", "filename": "gcc/cselib.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff111948988e61cd44da618d0a4231b9bb8aa66c/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff111948988e61cd44da618d0a4231b9bb8aa66c/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=ff111948988e61cd44da618d0a4231b9bb8aa66c", "patch": "@@ -2502,6 +2502,7 @@ cselib_record_sets (rtx_insn *insn)\n   rtx body = PATTERN (insn);\n   rtx cond = 0;\n   int n_sets_before_autoinc;\n+  int n_strict_low_parts = 0;\n   struct cselib_record_autoinc_data data;\n \n   body = PATTERN (insn);\n@@ -2556,6 +2557,7 @@ cselib_record_sets (rtx_insn *insn)\n   for (i = 0; i < n_sets; i++)\n     {\n       rtx dest = sets[i].dest;\n+      rtx orig = dest;\n \n       /* A STRICT_LOW_PART can be ignored; we'll record the equivalence for\n          the low part after invalidating any knowledge about larger modes.  */\n@@ -2581,6 +2583,55 @@ cselib_record_sets (rtx_insn *insn)\n \t  else\n \t    sets[i].dest_addr_elt = 0;\n \t}\n+\n+      /* Improve handling of STRICT_LOW_PART if the current value is known\n+\t to be const0_rtx, then the low bits will be set to dest and higher\n+\t bits will remain zero.  Used in code like:\n+\n+\t {di:SI=0;clobber flags:CC;}\n+\t flags:CCNO=cmp(bx:SI,0)\n+\t strict_low_part(di:QI)=flags:CCNO<=0\n+\n+\t where we can note both that di:QI=flags:CCNO<=0 and\n+\t also that because di:SI is known to be 0 and strict_low_part(di:QI)\n+\t preserves the upper bits that di:SI=zero_extend(flags:CCNO<=0).  */\n+      scalar_int_mode mode;\n+      if (dest != orig\n+\t  && cselib_record_sets_hook\n+\t  && REG_P (dest)\n+\t  && HARD_REGISTER_P (dest)\n+\t  && is_a <scalar_int_mode> (GET_MODE (dest), &mode)\n+\t  && n_sets + n_strict_low_parts < MAX_SETS)\n+\t{\n+\t  opt_scalar_int_mode wider_mode_iter;\n+\t  FOR_EACH_WIDER_MODE (wider_mode_iter, mode)\n+\t    {\n+\t      scalar_int_mode wider_mode = wider_mode_iter.require ();\n+\t      if (GET_MODE_PRECISION (wider_mode) > BITS_PER_WORD)\n+\t\tbreak;\n+\n+\t      rtx reg = gen_lowpart (wider_mode, dest);\n+\t      if (!REG_P (reg))\n+\t\tbreak;\n+\n+\t      cselib_val *v = cselib_lookup (reg, wider_mode, 0, VOIDmode);\n+\t      if (!v)\n+\t\tcontinue;\n+\n+\t      struct elt_loc_list *l;\n+\t      for (l = v->locs; l; l = l->next)\n+\t\tif (l->loc == const0_rtx)\n+\t\t  break;\n+\n+\t      if (!l)\n+\t\tcontinue;\n+\n+\t      sets[n_sets + n_strict_low_parts].dest = reg;\n+\t      sets[n_sets + n_strict_low_parts].src = dest;\n+\t      sets[n_sets + n_strict_low_parts++].src_elt = sets[i].src_elt;\n+\t      break;\n+\t    }\n+\t}\n     }\n \n   if (cselib_record_sets_hook)\n@@ -2625,6 +2676,20 @@ cselib_record_sets (rtx_insn *insn)\n \t  || (MEM_P (dest) && cselib_record_memory))\n \tcselib_record_set (dest, sets[i].src_elt, sets[i].dest_addr_elt);\n     }\n+\n+  /* And deal with STRICT_LOW_PART.  */\n+  for (i = 0; i < n_strict_low_parts; i++)\n+    {\n+      if (! PRESERVED_VALUE_P (sets[n_sets + i].src_elt->val_rtx))\n+\tcontinue;\n+      machine_mode dest_mode = GET_MODE (sets[n_sets + i].dest);\n+      cselib_val *v\n+\t= cselib_lookup (sets[n_sets + i].dest, dest_mode, 1, VOIDmode);\n+      cselib_preserve_value (v);\n+      rtx r = gen_rtx_ZERO_EXTEND (dest_mode,\n+\t\t\t\t   sets[n_sets + i].src_elt->val_rtx);\n+      cselib_add_permanent_equiv (v, r, insn);\n+    }\n }\n \n /* Return true if INSN in the prologue initializes hard_frame_pointer_rtx.  */"}, {"sha": "2b21da3dfce2b12626859fcc871b2fd762d21b6b", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff111948988e61cd44da618d0a4231b9bb8aa66c/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff111948988e61cd44da618d0a4231b9bb8aa66c/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=ff111948988e61cd44da618d0a4231b9bb8aa66c", "patch": "@@ -5962,7 +5962,9 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n \t  mo.type = MO_CLOBBER;\n \t  mo.u.loc = loc;\n \t  if (GET_CODE (expr) == SET\n-\t      && SET_DEST (expr) == loc\n+\t      && (SET_DEST (expr) == loc\n+\t\t  || (GET_CODE (SET_DEST (expr)) == STRICT_LOW_PART\n+\t\t      && XEXP (SET_DEST (expr), 0) == loc))\n \t      && !unsuitable_loc (SET_SRC (expr))\n \t      && find_use_val (loc, mode, cui))\n \t    {"}]}