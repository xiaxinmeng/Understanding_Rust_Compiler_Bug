{"sha": "b28fb6a10c1206454e1aef9bcc980a88b5431d19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI4ZmI2YTEwYzEyMDY0NTRlMWFlZjliY2M5ODBhODhiNTQzMWQxOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-12-02T15:56:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-12-02T15:56:29Z"}, "message": "* tree-eh.c: Revert yesterday's change.\n\nFrom-SVN: r91643", "tree": {"sha": "cd1758a1bb6a53cb5aa54e6fc5c3a656882eda66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd1758a1bb6a53cb5aa54e6fc5c3a656882eda66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b28fb6a10c1206454e1aef9bcc980a88b5431d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b28fb6a10c1206454e1aef9bcc980a88b5431d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b28fb6a10c1206454e1aef9bcc980a88b5431d19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b28fb6a10c1206454e1aef9bcc980a88b5431d19/comments", "author": null, "committer": null, "parents": [{"sha": "45fd5209ae1a942072b54b17e778055b41af5971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45fd5209ae1a942072b54b17e778055b41af5971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45fd5209ae1a942072b54b17e778055b41af5971"}], "stats": {"total": 35, "additions": 8, "deletions": 27}, "files": [{"sha": "2c0241fb3be539ac11574b724794daf74ea018ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b28fb6a10c1206454e1aef9bcc980a88b5431d19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b28fb6a10c1206454e1aef9bcc980a88b5431d19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b28fb6a10c1206454e1aef9bcc980a88b5431d19", "patch": "@@ -1,3 +1,7 @@\n+2004-12-02  Jeff Law  <law@redhat.com>\n+\n+\t* tree-eh.c: Revert yesterday's change.\n+\n 2004-12-02  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* varasm.c (decode_reg_name): Revert change to check for zero"}, {"sha": "b7ed2edc38797f9605bbeb6cde4c32ce41a2ab5d", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b28fb6a10c1206454e1aef9bcc980a88b5431d19/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b28fb6a10c1206454e1aef9bcc980a88b5431d19/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=b28fb6a10c1206454e1aef9bcc980a88b5431d19", "patch": "@@ -37,21 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"langhooks.h\"\n #include \"ggc.h\"\n \n-/* In some circumstances we have to save EH data around a nested\n-   exception.  The EXC_PTR_EXPR and FILTER_EXPR values are saved\n-   into these _DECL nodes.\n-\n-   We lazily create this pair of _DECL nodes once per function rather\n-   than creating a new pair of _DECLs each time we need to save the\n-   EXEC_PTR and FILTER.  This can save us literally thousands of _DECL\n-   nodes when we have many inline destructors with an embedded try block.  \n-\n-   This is safe as we know the lifetime of the values in these _DECL nodes.\n-   Their lifetimes also ensure that globbing these uses into a single\n-   pair of _DECL nodes requires no additional PHI_NODEs or SSA_NAMEs when\n-   compared to having a pair of _DECL nodes per inline destructor with\n-   an embedded try block.  */\n-static tree save_eptr, save_filt;\n \f\n /* Nonzero if we are using EH to handle cleanups.  */\n static int using_eh_for_cleanups_p = 0;\n@@ -822,13 +807,10 @@ honor_protect_cleanup_actions (struct leh_state *outer_state,\n      we never fallthru from this copy of the finally block.  */\n   if (finally_may_fallthru)\n     {\n-      /* If we have not created _DECLs for saving the EXC_PTR\n-\t and FILTER_EXPR, create them now.  */\n-      if (!save_eptr)\n-\t{\n-\t  save_eptr = create_tmp_var (ptr_type_node, \"save_eptr\");\n-\t  save_filt = create_tmp_var (integer_type_node, \"save_filt\");\n-\t}\n+      tree save_eptr, save_filt;\n+\n+      save_eptr = create_tmp_var (ptr_type_node, \"save_eptr\");\n+      save_filt = create_tmp_var (integer_type_node, \"save_filt\");\n \n       i = tsi_start (finally);\n       x = build (EXC_PTR_EXPR, ptr_type_node);\n@@ -1662,11 +1644,6 @@ lower_eh_constructs (void)\n   htab_delete (finally_tree);\n \n   collect_eh_region_array ();\n-\n-  /* Wipe the DECLs we use for saving the EXC_PTR and FILTER_EXPR\n-     to ensure we create new ones for the next function.  */\n-  save_eptr = NULL;\n-  save_filt = NULL;\n }\n \n struct tree_opt_pass pass_lower_eh ="}]}