{"sha": "cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q5Y2Y5N2JiZmRjM2I4MTBiNDA4YTk4Y2Y3OWU2Mjk5MjlkZDVmNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-05-13T21:32:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-05-13T21:32:14Z"}, "message": "Use releasing_vec more broadly.\n\n\t* cp-tree.h (struct releasing_vec): Replace get_ref method with\n\toperator&.\n\t(vec_safe_push, vec_safe_reserve, vec_safe_length, vec_safe_splice):\n\tForwarding functions for releasing_vec.\n\t(release_tree_vector): Declare but don't define.\n\t* call.c (build_op_delete_call, build_temp, call_copy_ctor)\n\t(perform_direct_initialization_if_possible): Use releasing_vec.\n\t* constexpr.c (cxx_eval_vec_init_1, cxx_eval_store_expression):\n\tLikewise.\n\t* cp-gimplify.c (cp_fold): Likewise.\n\t* cvt.c (force_rvalue, ocp_convert): Likewise.\n\t* decl.c (get_tuple_decomp_init): Likewise.\n\t* except.c (build_throw): Likewise.\n\t* init.c (perform_member_init, expand_default_init): Likewise.\n\t* method.c (do_build_copy_assign, locate_fn_flags): Likewise.\n\t* parser.c (cp_parser_userdef_char_literal)\n\t(cp_parser_userdef_numeric_literal)\n\t(cp_parser_userdef_string_literal)\n\t(cp_parser_perform_range_for_lookup)\n\t(cp_parser_range_for_member_function, cp_parser_omp_for_loop)\n\t(cp_parser_omp_for_loop_init): Likewise.\n\t* pt.c (tsubst_copy_and_build, do_class_deduction): Likewise.\n\t* semantics.c (calculate_direct_bases, calculate_bases)\n\t(finish_omp_barrier, finish_omp_flush, finish_omp_taskwait)\n\t(finish_omp_taskyield, finish_omp_cancel)\n\t(finish_omp_cancellation_point): Likewise.\n\t* tree.c (build_vec_init_elt, strip_typedefs, strip_typedefs_expr)\n\t(build_min_non_dep_op_overload): Likewise.\n\t* typeck.c (build_function_call_vec, cp_build_function_call_nary)\n\t(cp_build_modify_expr): Likewise.\n\t* typeck2.c (build_functional_cast): Likewise.\n\nFrom-SVN: r271138", "tree": {"sha": "ad29085374ce1ed3f494aa80948476a83beb44b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad29085374ce1ed3f494aa80948476a83beb44b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93ee143d1888051fbf3156212accc154af3a667b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93ee143d1888051fbf3156212accc154af3a667b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93ee143d1888051fbf3156212accc154af3a667b"}], "stats": {"total": 238, "additions": 101, "deletions": 137}, "files": [{"sha": "812f9f5a6be74c26cfab0ccac487101753063e5c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -1,3 +1,38 @@\n+2019-05-13  Jason Merrill  <jason@redhat.com>\n+\n+\tUse releasing_vec more broadly.\n+\t* cp-tree.h (struct releasing_vec): Replace get_ref method with\n+\toperator&.\n+\t(vec_safe_push, vec_safe_reserve, vec_safe_length, vec_safe_splice):\n+\tForwarding functions for releasing_vec.\n+\t(release_tree_vector): Declare but don't define.\n+\t* call.c (build_op_delete_call, build_temp, call_copy_ctor)\n+\t(perform_direct_initialization_if_possible): Use releasing_vec.\n+\t* constexpr.c (cxx_eval_vec_init_1, cxx_eval_store_expression):\n+\tLikewise.\n+\t* cp-gimplify.c (cp_fold): Likewise.\n+\t* cvt.c (force_rvalue, ocp_convert): Likewise.\n+\t* decl.c (get_tuple_decomp_init): Likewise.\n+\t* except.c (build_throw): Likewise.\n+\t* init.c (perform_member_init, expand_default_init): Likewise.\n+\t* method.c (do_build_copy_assign, locate_fn_flags): Likewise.\n+\t* parser.c (cp_parser_userdef_char_literal)\n+\t(cp_parser_userdef_numeric_literal)\n+\t(cp_parser_userdef_string_literal)\n+\t(cp_parser_perform_range_for_lookup)\n+\t(cp_parser_range_for_member_function, cp_parser_omp_for_loop)\n+\t(cp_parser_omp_for_loop_init): Likewise.\n+\t* pt.c (tsubst_copy_and_build, do_class_deduction): Likewise.\n+\t* semantics.c (calculate_direct_bases, calculate_bases)\n+\t(finish_omp_barrier, finish_omp_flush, finish_omp_taskwait)\n+\t(finish_omp_taskyield, finish_omp_cancel)\n+\t(finish_omp_cancellation_point): Likewise.\n+\t* tree.c (build_vec_init_elt, strip_typedefs, strip_typedefs_expr)\n+\t(build_min_non_dep_op_overload): Likewise.\n+\t* typeck.c (build_function_call_vec, cp_build_function_call_nary)\n+\t(cp_build_modify_expr): Likewise.\n+\t* typeck2.c (build_functional_cast): Likewise.\n+\n 2019-05-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* typeck.c (cp_build_function_call_vec): When mark_used fails"}, {"sha": "00cb3993471efe72ee6bea0a38679f3294b3ebec", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -6671,7 +6671,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t    }\n \n \t  tree ret;\n-\t  vec<tree, va_gc> *args = make_tree_vector ();\n+\t  releasing_vec args;\n \t  args->quick_push (addr);\n \t  if (destroying)\n \t    args->quick_push (destroying);\n@@ -6683,7 +6683,6 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t      args->quick_push (al);\n \t    }\n \t  ret = cp_build_function_call_vec (fn, &args, complain);\n-\t  release_tree_vector (args);\n \t  return ret;\n \t}\n     }\n@@ -6787,7 +6786,6 @@ build_temp (tree expr, tree type, int flags,\n \t    diagnostic_t *diagnostic_kind, tsubst_flags_t complain)\n {\n   int savew, savee;\n-  vec<tree, va_gc> *args;\n \n   *diagnostic_kind = DK_UNSPECIFIED;\n \n@@ -6801,10 +6799,9 @@ build_temp (tree expr, tree type, int flags,\n     return get_target_expr_sfinae (expr, complain);\n \n   savew = warningcount + werrorcount, savee = errorcount;\n-  args = make_tree_vector_single (expr);\n+  releasing_vec args (make_tree_vector_single (expr));\n   expr = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t    &args, type, flags, complain);\n-  release_tree_vector (args);\n   if (warningcount + werrorcount > savew)\n     *diagnostic_kind = DK_WARNING;\n   else if (errorcount > savee)\n@@ -7897,10 +7894,9 @@ call_copy_ctor (tree a, tsubst_flags_t complain)\n   tree copy = get_copy_ctor (ctype, complain);\n   copy = build_baselink (binfo, binfo, copy, NULL_TREE);\n   tree ob = build_dummy_object (ctype);\n-  vec<tree, va_gc>* args = make_tree_vector_single (a);\n+  releasing_vec args (make_tree_vector_single (a));\n   tree r = build_new_method_call (ob, copy, &args, NULL_TREE,\n \t\t\t\t  LOOKUP_NORMAL, NULL, complain);\n-  release_tree_vector (args);\n   return r;\n }\n \n@@ -11283,10 +11279,9 @@ perform_direct_initialization_if_possible (tree type,\n      ill-formed.  */\n   if (CLASS_TYPE_P (type))\n     {\n-      vec<tree, va_gc> *args = make_tree_vector_single (expr);\n+      releasing_vec args (make_tree_vector_single (expr));\n       expr = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t\t&args, type, LOOKUP_NORMAL, complain);\n-      release_tree_vector (args);\n       return build_cplus_new (type, expr, complain);\n     }\n "}, {"sha": "8ae0fd5715f99e6cbe15254938dbc210151e7d9b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -3113,11 +3113,10 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n     }\n   else if (!init)\n     {\n-      vec<tree, va_gc> *argvec = make_tree_vector ();\n+      releasing_vec argvec;\n       init = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t\t&argvec, elttype, LOOKUP_NORMAL,\n \t\t\t\t\tcomplain);\n-      release_tree_vector (argvec);\n       init = build_aggr_init_expr (elttype, init);\n       pre_init = true;\n     }\n@@ -3740,7 +3739,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n     }\n \n   /* And then find the underlying variable.  */\n-  vec<tree,va_gc> *refs = make_tree_vector();\n+  releasing_vec refs;\n   tree object = NULL_TREE;\n   for (tree probe = target; object == NULL_TREE; )\n     {\n@@ -3784,7 +3783,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n   type = TREE_TYPE (object);\n   bool no_zero_init = true;\n \n-  vec<tree,va_gc> *ctors = make_tree_vector ();\n+  releasing_vec ctors;\n   while (!refs->is_empty())\n     {\n       if (*valp == NULL_TREE)\n@@ -3897,7 +3896,6 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t}\n       valp = &cep->value;\n     }\n-  release_tree_vector (refs);\n \n   if (!preeval)\n     {\n@@ -3941,14 +3939,13 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n   bool c = TREE_CONSTANT (init);\n   bool s = TREE_SIDE_EFFECTS (init);\n   if (!c || s)\n-    FOR_EACH_VEC_SAFE_ELT (ctors, i, elt)\n+    FOR_EACH_VEC_ELT (*ctors, i, elt)\n       {\n \tif (!c)\n \t  TREE_CONSTANT (elt) = false;\n \tif (s)\n \t  TREE_SIDE_EFFECTS (elt) = true;\n       }\n-  release_tree_vector (ctors);\n \n   if (*non_constant_p)\n     return t;"}, {"sha": "4e63a4a6944b294fa3f0d8bd2966e0fe6e002b78", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -2654,7 +2654,7 @@ cp_fold (tree x)\n     case TREE_VEC:\n       {\n \tbool changed = false;\n-\tvec<tree, va_gc> *vec = make_tree_vector ();\n+\treleasing_vec vec;\n \tint i, n = TREE_VEC_LENGTH (x);\n \tvec_safe_reserve (vec, n);\n \n@@ -2673,8 +2673,6 @@ cp_fold (tree x)\n \t      TREE_VEC_ELT (r, i) = (*vec)[i];\n \t    x = r;\n \t  }\n-\n-\trelease_tree_vector (vec);\n       }\n \n       break;"}, {"sha": "827b471aa800077c5ab1632fe4781a6f8376b37e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -890,15 +890,25 @@ struct releasing_vec\n   vec_t *operator-> () const { return v; }\n   vec_t *get() const { return v; }\n   operator vec_t *() const { return v; }\n-  tree& operator[] (unsigned i) const { return (*v)[i]; }\n+  vec_t ** operator& () { return &v; }\n \n-  /* Necessary for use with vec** and vec*& interfaces.  */\n-  vec_t *&get_ref () { return v; }\n+  /* Breaks pointer/value consistency for convenience.  */\n+  tree& operator[] (unsigned i) const { return (*v)[i]; }\n \n   ~releasing_vec() { release_tree_vector (v); }\n private:\n   vec_t *v;\n };\n+/* Forwarding functions for vec_safe_* that might reallocate.  */\n+inline tree* vec_safe_push (releasing_vec& r, const tree &t CXX_MEM_STAT_INFO)\n+{ return vec_safe_push (*&r, t PASS_MEM_STAT); }\n+inline bool vec_safe_reserve (releasing_vec& r, unsigned n, bool e = false CXX_MEM_STAT_INFO)\n+{ return vec_safe_reserve (*&r, n, e PASS_MEM_STAT); }\n+inline unsigned vec_safe_length (releasing_vec &r)\n+{ return r->length(); }\n+inline void vec_safe_splice (releasing_vec &r, vec<tree, va_gc> *p CXX_MEM_STAT_INFO)\n+{ vec_safe_splice (*&r, p PASS_MEM_STAT); }\n+void release_tree_vector (releasing_vec &); // cause link error\n \n struct GTY(()) tree_template_decl {\n   struct tree_decl_common common;"}, {"sha": "3d409279f2272dbde2c75e4500849684fb1d1e98", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -562,10 +562,9 @@ force_rvalue (tree expr, tsubst_flags_t complain)\n   tree type = TREE_TYPE (expr);\n   if (MAYBE_CLASS_TYPE_P (type) && TREE_CODE (expr) != TARGET_EXPR)\n     {\n-      vec<tree, va_gc> *args = make_tree_vector_single (expr);\n+      releasing_vec args (make_tree_vector_single (expr));\n       expr = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t\t&args, type, LOOKUP_NORMAL, complain);\n-      release_tree_vector (args);\n       expr = build_cplus_new (type, expr, complain);\n     }\n   else\n@@ -925,12 +924,11 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n \tctor = build_user_type_conversion (type, ctor, flags, complain);\n       else\n \t{\n-\t  vec<tree, va_gc> *ctor_vec = make_tree_vector_single (ctor);\n+\t  releasing_vec ctor_vec (make_tree_vector_single (ctor));\n \t  ctor = build_special_member_call (NULL_TREE,\n \t\t\t\t\t    complete_ctor_identifier,\n \t\t\t\t\t    &ctor_vec,\n \t\t\t\t\t    type, flags, complain);\n-\t  release_tree_vector (ctor_vec);\n \t}\n       if (ctor)\n \treturn build_cplus_new (type, ctor, complain);"}, {"sha": "86cfcbe0db56638a24bf0e3a7d2055cb7a991eb8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -7590,7 +7590,7 @@ get_tuple_decomp_init (tree decl, unsigned i)\n     }\n   else\n     {\n-      vec<tree,va_gc> *args = make_tree_vector_single (e);\n+      releasing_vec args (make_tree_vector_single (e));\n       fns = lookup_template_function (get__identifier, targs);\n       fns = perform_koenig_lookup (fns, args, tf_warning_or_error);\n       return finish_call_expr (fns, &args, /*novirt*/false,"}, {"sha": "3b792cbc62bfa606c052de2385ac4974a8b42a15", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -756,7 +756,6 @@ build_throw (tree exp)\n       if (CLASS_TYPE_P (temp_type))\n \t{\n \t  int flags = LOOKUP_NORMAL | LOOKUP_ONLYCONVERTING;\n-\t  vec<tree, va_gc> *exp_vec;\n \t  bool converted = false;\n \n \t  /* Under C++0x [12.8/16 class.copy], a thrown lvalue is sometimes\n@@ -767,12 +766,11 @@ build_throw (tree exp)\n \t      && !CP_TYPE_VOLATILE_P (TREE_TYPE (exp)))\n \t    {\n \t      tree moved = move (exp);\n-\t      exp_vec = make_tree_vector_single (moved);\n+\t      releasing_vec exp_vec (make_tree_vector_single (moved));\n \t      moved = (build_special_member_call\n \t\t       (object, complete_ctor_identifier, &exp_vec,\n \t\t\tTREE_TYPE (object), flags|LOOKUP_PREFER_RVALUE,\n \t\t\ttf_none));\n-\t      release_tree_vector (exp_vec);\n \t      if (moved != error_mark_node)\n \t\t{\n \t\t  exp = moved;\n@@ -783,11 +781,10 @@ build_throw (tree exp)\n \t  /* Call the copy constructor.  */\n \t  if (!converted)\n \t    {\n-\t      exp_vec = make_tree_vector_single (exp);\n+\t      releasing_vec exp_vec (make_tree_vector_single (exp));\n \t      exp = (build_special_member_call\n \t\t     (object, complete_ctor_identifier, &exp_vec,\n \t\t      TREE_TYPE (object), flags, tf_warning_or_error));\n-\t      release_tree_vector (exp_vec);\n \t    }\n \n \t  if (exp == error_mark_node)"}, {"sha": "68d04ad7417d0baeb7f7050461be7f4ed77cb40e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -847,7 +847,7 @@ perform_member_init (tree member, tree init)\n \t reference member in a constructor\u2019s ctor-initializer (12.6.2)\n \t persists until the constructor exits.\"  */\n       unsigned i; tree t;\n-      vec<tree, va_gc> *cleanups = make_tree_vector ();\n+      releasing_vec cleanups;\n       if (TREE_CODE (init) == TREE_LIST)\n \tinit = build_x_compound_expr_from_list (init, ELK_MEM_INIT,\n \t\t\t\t\t\ttf_warning_or_error);\n@@ -871,7 +871,6 @@ perform_member_init (tree member, tree init)\n       finish_expr_stmt (init);\n       FOR_EACH_VEC_ELT (*cleanups, i, t)\n \tpush_cleanup (decl, t, false);\n-      release_tree_vector (cleanups);\n     }\n   else if (type_build_ctor_call (type)\n \t   || (init && CLASS_TYPE_P (strip_array_types (type))))\n@@ -1952,7 +1951,7 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n       tree elt; unsigned i;\n \n       /* Unshare the arguments for the second call.  */\n-      vec<tree, va_gc> *parms2 = make_tree_vector ();\n+      releasing_vec parms2;\n       FOR_EACH_VEC_SAFE_ELT (parms, i, elt)\n \t{\n \t  elt = break_out_target_exprs (elt);\n@@ -1962,7 +1961,6 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n \t\t\t\t\t    &parms2, binfo, flags,\n \t\t\t\t\t    complain);\n       complete = fold_build_cleanup_point_expr (void_type_node, complete);\n-      release_tree_vector (parms2);\n \n       base = build_special_member_call (exp, base_ctor_identifier,\n \t\t\t\t\t&parms, binfo, flags,"}, {"sha": "31737d1353c7be71124c33362f0aa71842392272", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -790,7 +790,6 @@ do_build_copy_assign (tree fndecl)\n \t   BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n \t{\n \t  tree converted_parm;\n-\t  vec<tree, va_gc> *parmvec;\n \n \t  /* We must convert PARM directly to the base class\n \t     explicitly since the base class may be ambiguous.  */\n@@ -799,15 +798,14 @@ do_build_copy_assign (tree fndecl)\n \t  if (move_p)\n \t    converted_parm = move (converted_parm);\n \t  /* Call the base class assignment operator.  */\n-\t  parmvec = make_tree_vector_single (converted_parm);\n+\t  releasing_vec parmvec (make_tree_vector_single (converted_parm));\n \t  finish_expr_stmt\n \t    (build_special_member_call (current_class_ref,\n \t\t\t\t\tassign_op_identifier,\n \t\t\t\t\t&parmvec,\n \t\t\t\t\tbase_binfo,\n \t\t\t\t\tflags,\n                                         tf_warning_or_error));\n-\t  release_tree_vector (parmvec);\n \t}\n \n       /* Assign to each of the non-static data members.  */\n@@ -993,7 +991,6 @@ locate_fn_flags (tree type, tree name, tree argtype, int flags,\n \t\t tsubst_flags_t complain)\n {\n   tree ob, fn, fns, binfo, rval;\n-  vec<tree, va_gc> *args;\n \n   if (TYPE_P (type))\n     binfo = TYPE_BINFO (type);\n@@ -1004,7 +1001,7 @@ locate_fn_flags (tree type, tree name, tree argtype, int flags,\n     }\n \n   ob = build_stub_object (cp_build_reference_type (type, false));\n-  args = make_tree_vector ();\n+  releasing_vec args;\n   if (argtype)\n     {\n       if (TREE_CODE (argtype) == TREE_LIST)\n@@ -1027,7 +1024,6 @@ locate_fn_flags (tree type, tree name, tree argtype, int flags,\n   fns = lookup_fnfields (binfo, name, 0);\n   rval = build_new_method_call (ob, fns, &args, binfo, flags, &fn, complain);\n \n-  release_tree_vector (args);\n   if (fn && rval == error_mark_node)\n     return rval;\n   else"}, {"sha": "c90782eafde4d915ee05f844444d36c21e48097b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -4345,18 +4345,16 @@ cp_parser_userdef_char_literal (cp_parser *parser)\n \n   /* Build up a call to the user-defined operator  */\n   /* Lookup the name we got back from the id-expression.  */\n-  vec<tree, va_gc> *args = make_tree_vector ();\n+  releasing_vec args;\n   vec_safe_push (args, value);\n   decl = lookup_literal_operator (name, args);\n   if (!decl || decl == error_mark_node)\n     {\n       error (\"unable to find character literal operator %qD with %qT argument\",\n \t     name, TREE_TYPE (value));\n-      release_tree_vector (args);\n       return error_mark_node;\n     }\n   result = finish_call_expr (decl, &args, false, true, tf_warning_or_error);\n-  release_tree_vector (args);\n   return result;\n }\n \n@@ -4443,11 +4441,10 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n   tree num_string = USERDEF_LITERAL_NUM_STRING (literal);\n   tree name = cp_literal_operator_id (IDENTIFIER_POINTER (suffix_id));\n   tree decl, result;\n-  vec<tree, va_gc> *args;\n \n   /* Look for a literal operator taking the exact type of numeric argument\n      as the literal value.  */\n-  args = make_tree_vector ();\n+  releasing_vec args;\n   vec_safe_push (args, value);\n   decl = lookup_literal_operator (name, args);\n   if (decl && decl != error_mark_node)\n@@ -4472,30 +4469,26 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n \t\t\t\"floating literal truncated to zero\");\n \t}\n \n-      release_tree_vector (args);\n       return result;\n     }\n-  release_tree_vector (args);\n \n   /* If the numeric argument didn't work, look for a raw literal\n      operator taking a const char* argument consisting of the number\n      in string format.  */\n-  args = make_tree_vector ();\n+  args->truncate (0);\n   vec_safe_push (args, num_string);\n   decl = lookup_literal_operator (name, args);\n   if (decl && decl != error_mark_node)\n     {\n       result = finish_call_expr (decl, &args, false, true,\n \t\t\t\t tf_warning_or_error);\n-      release_tree_vector (args);\n       return result;\n     }\n-  release_tree_vector (args);\n \n   /* If the raw literal didn't work, look for a non-type template\n      function with parameter pack char....  Call the function with\n      template parameter characters representing the number.  */\n-  args = make_tree_vector ();\n+  args->truncate (0);\n   decl = lookup_literal_operator (name, args);\n   if (decl && decl != error_mark_node)\n     {\n@@ -4509,12 +4502,9 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n       decl = lookup_template_function (decl, tmpl_args);\n       result = finish_call_expr (decl, &args, false, true,\n \t\t\t\t tf_warning_or_error);\n-      release_tree_vector (args);\n       return result;\n     }\n \n-  release_tree_vector (args);\n-\n   /* In C++14 the standard library defines complex number suffixes that\n      conflict with GNU extensions.  Prefer them if <complex> is #included.  */\n   bool ext = cpp_get_options (parse_in)->ext_numeric_literals;\n@@ -4602,8 +4592,7 @@ cp_parser_userdef_string_literal (tree literal)\n \n   /* Build up a call to the user-defined operator.  */\n   /* Lookup the name we got back from the id-expression.  */\n-  releasing_vec rargs;\n-  vec<tree, va_gc> *&args = rargs.get_ref();\n+  releasing_vec args;\n   vec_safe_push (args, value);\n   vec_safe_push (args, build_int_cst (size_type_node, len));\n   decl = lookup_literal_operator (name, args);\n@@ -12539,8 +12528,7 @@ cp_parser_perform_range_for_lookup (tree range, tree *begin, tree *end)\n       else\n \t{\n \t  /* Use global functions with ADL.  */\n-\t  vec<tree, va_gc> *vec;\n-\t  vec = make_tree_vector ();\n+\t  releasing_vec vec;\n \n \t  vec_safe_push (vec, range);\n \n@@ -12552,8 +12540,6 @@ cp_parser_perform_range_for_lookup (tree range, tree *begin, tree *end)\n \t\t\t\t\t      tf_warning_or_error);\n \t  *end = finish_call_expr (member_end, &vec, false, true,\n \t\t\t\t   tf_warning_or_error);\n-\n-\t  release_tree_vector (vec);\n \t}\n \n       /* Last common checks.  */\n@@ -12601,19 +12587,17 @@ static tree\n cp_parser_range_for_member_function (tree range, tree identifier)\n {\n   tree member, res;\n-  vec<tree, va_gc> *vec;\n \n   member = finish_class_member_access_expr (range, identifier,\n \t\t\t\t\t    false, tf_warning_or_error);\n   if (member == error_mark_node)\n     return error_mark_node;\n \n-  vec = make_tree_vector ();\n+  releasing_vec vec;\n   res = finish_call_expr (member, &vec,\n \t\t\t  /*disallow_virtual=*/false,\n \t\t\t  /*koenig_p=*/false,\n \t\t\t  tf_warning_or_error);\n-  release_tree_vector (vec);\n   return res;\n }\n \n@@ -36430,7 +36414,7 @@ cp_parser_omp_for_incr (cp_parser *parser, tree decl)\n static tree\n cp_parser_omp_for_loop_init (cp_parser *parser,\n \t\t\t     tree &this_pre_body,\n-\t\t\t     vec<tree, va_gc> *&for_block,\n+\t\t\t     releasing_vec &for_block,\n \t\t\t     tree &init,\n \t\t\t     tree &orig_init,\n \t\t\t     tree &decl,\n@@ -36851,7 +36835,7 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n   location_t loc_first;\n   bool collapse_err = false;\n   int i, collapse = 1, ordered = 0, count, nbraces = 0;\n-  vec<tree, va_gc> *for_block = make_tree_vector ();\n+  releasing_vec for_block;\n   auto_vec<tree, 4> orig_inits;\n   bool tiling = false;\n \n@@ -37240,7 +37224,6 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n       else\n \tadd_stmt (t);\n     }\n-  release_tree_vector (for_block);\n \n   return ret;\n }"}, {"sha": "42d128744ab5a16e588ee9c3b0f11c408366fc8b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -18750,7 +18750,6 @@ tsubst_copy_and_build (tree t,\n     case CALL_EXPR:\n       {\n \ttree function;\n-\tvec<tree, va_gc> *call_args;\n \tunsigned int nargs, i;\n \tbool qualified_p;\n \tbool koenig_p;\n@@ -18818,7 +18817,7 @@ tsubst_copy_and_build (tree t,\n \t  }\n \n \tnargs = call_expr_nargs (t);\n-\tcall_args = make_tree_vector ();\n+\treleasing_vec call_args;\n \tfor (i = 0; i < nargs; ++i)\n \t  {\n \t    tree arg = CALL_EXPR_ARG (t, i);\n@@ -18894,7 +18893,6 @@ tsubst_copy_and_build (tree t,\n \t    if (CLASS_TYPE_P (TREE_TYPE (ret)))\n \t      CALL_EXPR_RETURN_SLOT_OPT (ret) = true;\n \n-\t    release_tree_vector (call_args);\n \t    RETURN (ret);\n \t  }\n \n@@ -18927,10 +18925,7 @@ tsubst_copy_and_build (tree t,\n \t\t\t    (function, args, complain, in_decl, true,\n \t\t\t     integral_constant_expression_p));\n \t\tif (unq == error_mark_node)\n-\t\t  {\n-\t\t    release_tree_vector (call_args);\n-\t\t    RETURN (error_mark_node);\n-\t\t  }\n+\t\t  RETURN (error_mark_node);\n \n \t\tif (unq != function)\n \t\t  {\n@@ -18985,10 +18980,7 @@ tsubst_copy_and_build (tree t,\n \t\t\t\t  \"%qD declared here, later in the \"\n \t\t\t\t  \"translation unit\", fn);\n \t\t\tif (in_lambda)\n-\t\t\t  {\n-\t\t\t    release_tree_vector (call_args);\n-\t\t\t    RETURN (error_mark_node);\n-\t\t\t  }\n+\t\t\t  RETURN (error_mark_node);\n \t\t      }\n \n \t\t    function = unq;\n@@ -18998,7 +18990,6 @@ tsubst_copy_and_build (tree t,\n \t      {\n \t\tif (complain & tf_error)\n \t\t  unqualified_name_lookup_error (function);\n-\t\trelease_tree_vector (call_args);\n \t\tRETURN (error_mark_node);\n \t      }\n \t  }\n@@ -19007,10 +18998,7 @@ tsubst_copy_and_build (tree t,\n \tif (function != NULL_TREE\n \t    && DECL_P (function)\n \t    && !mark_used (function, complain) && !(complain & tf_error))\n-\t  {\n-\t    release_tree_vector (call_args);\n-\t    RETURN (error_mark_node);\n-\t  }\n+\t  RETURN (error_mark_node);\n \n \t/* Put back tf_decltype for the actual call.  */\n \tcomplain |= decltype_flag;\n@@ -19048,10 +19036,7 @@ tsubst_copy_and_build (tree t,\n \t\t\t\t\t\t  complain, in_decl),\n \t\t\t\t\t  complain);\n \t      if (TREE_CODE (ret) == VIEW_CONVERT_EXPR)\n-\t\t{\n-\t\t  release_tree_vector (call_args);\n-\t\t  RETURN (ret);\n-\t\t}\n+\t\tRETURN (ret);\n \t      break;\n \n \t    default:\n@@ -19094,8 +19079,6 @@ tsubst_copy_and_build (tree t,\n \t\t\t\t  koenig_p,\n \t\t\t\t  complain);\n \n-\trelease_tree_vector (call_args);\n-\n \tif (ret != error_mark_node)\n \t  {\n \t    bool op = CALL_EXPR_OPERATOR_SYNTAX (t);\n@@ -27314,7 +27297,8 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n \n   bool try_list_ctor = false;\n \n-  vec<tree,va_gc> *args;\n+  releasing_vec rv_args = NULL;\n+  vec<tree,va_gc> *&args = *&rv_args;\n   if (init == NULL_TREE\n       || TREE_CODE (init) == TREE_LIST)\n     args = make_tree_vector_from_list (init);\n@@ -27487,8 +27471,6 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n \t\t\"for copy-initialization\");\n     }\n \n-  release_tree_vector (args);\n-\n   return cp_build_qualified_type (TREE_TYPE (call), cp_type_quals (ptype));\n }\n "}, {"sha": "384593423841da3ac46fafd1a02306e39b2591d1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -3992,7 +3992,7 @@ calculate_direct_bases (tree type, tsubst_flags_t complain)\n       || !NON_UNION_CLASS_TYPE_P (type))\n     return make_tree_vec (0);\n \n-  vec<tree, va_gc> *vector = make_tree_vector ();\n+  releasing_vec vector;\n   vec<tree, va_gc> *base_binfos = BINFO_BASE_BINFOS (TYPE_BINFO (type));\n   tree binfo;\n   unsigned i;\n@@ -4012,7 +4012,6 @@ calculate_direct_bases (tree type, tsubst_flags_t complain)\n   for (i = 0; i < vector->length (); ++i)\n     TREE_VEC_ELT (bases_vec, i) = BINFO_TYPE ((*vector)[i]);\n \n-  release_tree_vector (vector);\n   return bases_vec;\n }\n \n@@ -4058,27 +4057,24 @@ calculate_bases (tree type, tsubst_flags_t complain)\n       || !NON_UNION_CLASS_TYPE_P (type))\n     return make_tree_vec (0);\n \n-  vec<tree, va_gc> *vector = make_tree_vector ();\n+  releasing_vec vector;\n   tree bases_vec = NULL_TREE;\n   unsigned i;\n   vec<tree, va_gc> *vbases;\n-  vec<tree, va_gc> *nonvbases;\n   tree binfo;\n \n   /* First go through virtual base classes */\n   for (vbases = CLASSTYPE_VBASECLASSES (type), i = 0;\n        vec_safe_iterate (vbases, i, &binfo); i++)\n     {\n-      vec<tree, va_gc> *vbase_bases\n+      releasing_vec vbase_bases\n \t= calculate_bases_helper (BINFO_TYPE (binfo));\n       vec_safe_splice (vector, vbase_bases);\n-      release_tree_vector (vbase_bases);\n     }\n \n   /* Now for the non-virtual bases */\n-  nonvbases = calculate_bases_helper (type);\n+  releasing_vec nonvbases = calculate_bases_helper (type);\n   vec_safe_splice (vector, nonvbases);\n-  release_tree_vector (nonvbases);\n \n   /* Note that during error recovery vector->length can even be zero.  */\n   if (vector->length () > 1)\n@@ -4092,7 +4088,6 @@ calculate_bases (tree type, tsubst_flags_t complain)\n   else\n     bases_vec = make_tree_vec (0);\n \n-  release_tree_vector (vector);\n   return bases_vec;\n }\n \n@@ -9002,9 +8997,8 @@ void\n finish_omp_barrier (void)\n {\n   tree fn = builtin_decl_explicit (BUILT_IN_GOMP_BARRIER);\n-  vec<tree, va_gc> *vec = make_tree_vector ();\n+  releasing_vec vec;\n   tree stmt = finish_call_expr (fn, &vec, false, false, tf_warning_or_error);\n-  release_tree_vector (vec);\n   finish_expr_stmt (stmt);\n }\n \n@@ -9047,34 +9041,31 @@ void\n finish_omp_flush (int mo)\n {\n   tree fn = builtin_decl_explicit (BUILT_IN_SYNC_SYNCHRONIZE);\n-  vec<tree, va_gc> *vec = make_tree_vector ();\n+  releasing_vec vec;\n   if (mo != MEMMODEL_LAST)\n     {\n       fn = builtin_decl_explicit (BUILT_IN_ATOMIC_THREAD_FENCE);\n       vec->quick_push (build_int_cst (integer_type_node, mo));\n     }\n   tree stmt = finish_call_expr (fn, &vec, false, false, tf_warning_or_error);\n-  release_tree_vector (vec);\n   finish_expr_stmt (stmt);\n }\n \n void\n finish_omp_taskwait (void)\n {\n   tree fn = builtin_decl_explicit (BUILT_IN_GOMP_TASKWAIT);\n-  vec<tree, va_gc> *vec = make_tree_vector ();\n+  releasing_vec vec;\n   tree stmt = finish_call_expr (fn, &vec, false, false, tf_warning_or_error);\n-  release_tree_vector (vec);\n   finish_expr_stmt (stmt);\n }\n \n void\n finish_omp_taskyield (void)\n {\n   tree fn = builtin_decl_explicit (BUILT_IN_GOMP_TASKYIELD);\n-  vec<tree, va_gc> *vec = make_tree_vector ();\n+  releasing_vec vec;\n   tree stmt = finish_call_expr (fn, &vec, false, false, tf_warning_or_error);\n-  release_tree_vector (vec);\n   finish_expr_stmt (stmt);\n }\n \n@@ -9097,7 +9088,7 @@ finish_omp_cancel (tree clauses)\n \t     \"%<parallel%>, %<for%>, %<sections%> or %<taskgroup%> clauses\");\n       return;\n     }\n-  vec<tree, va_gc> *vec = make_tree_vector ();\n+  releasing_vec vec;\n   tree ifc = omp_find_clause (clauses, OMP_CLAUSE_IF);\n   if (ifc != NULL_TREE)\n     {\n@@ -9131,7 +9122,6 @@ finish_omp_cancel (tree clauses)\n   vec->quick_push (build_int_cst (integer_type_node, mask));\n   vec->quick_push (ifc);\n   tree stmt = finish_call_expr (fn, &vec, false, false, tf_warning_or_error);\n-  release_tree_vector (vec);\n   finish_expr_stmt (stmt);\n }\n \n@@ -9154,10 +9144,9 @@ finish_omp_cancellation_point (tree clauses)\n \t     \"%<parallel%>, %<for%>, %<sections%> or %<taskgroup%> clauses\");\n       return;\n     }\n-  vec<tree, va_gc> *vec\n+  releasing_vec vec\n     = make_tree_vector_single (build_int_cst (integer_type_node, mask));\n   tree stmt = finish_call_expr (fn, &vec, false, false, tf_warning_or_error);\n-  release_tree_vector (vec);\n   finish_expr_stmt (stmt);\n }\n \f"}, {"sha": "7b8889ea7b2a8a8be9d302635f4a7dff93ffb64c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -698,7 +698,6 @@ static tree\n build_vec_init_elt (tree type, tree init, tsubst_flags_t complain)\n {\n   tree inner_type = strip_array_types (type);\n-  vec<tree, va_gc> *argvec;\n \n   if (integer_zerop (array_type_nelts_total (type))\n       || !CLASS_TYPE_P (inner_type))\n@@ -711,7 +710,7 @@ build_vec_init_elt (tree type, tree init, tsubst_flags_t complain)\n \t      || (same_type_ignoring_top_level_qualifiers_p\n \t\t  (type, TREE_TYPE (init))));\n \n-  argvec = make_tree_vector ();\n+  releasing_vec argvec;\n   if (init)\n     {\n       tree init_type = strip_array_types (TREE_TYPE (init));\n@@ -723,7 +722,6 @@ build_vec_init_elt (tree type, tree init, tsubst_flags_t complain)\n   init = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t    &argvec, inner_type, LOOKUP_NORMAL,\n \t\t\t\t    complain);\n-  release_tree_vector (argvec);\n \n   /* For a trivial constructor, build_over_call creates a TARGET_EXPR.  But\n      we don't want one here because we aren't creating a temporary.  */\n@@ -1451,7 +1449,7 @@ strip_typedefs (tree t, bool *remove_attributes)\n   if (TREE_CODE (t) == TREE_LIST)\n     {\n       bool changed = false;\n-      vec<tree,va_gc> *vec = make_tree_vector ();\n+      releasing_vec vec;\n       tree r = t;\n       for (; t; t = TREE_CHAIN (t))\n \t{\n@@ -1463,7 +1461,6 @@ strip_typedefs (tree t, bool *remove_attributes)\n \t}\n       if (changed)\n \tr = build_tree_list_vec (vec);\n-      release_tree_vector (vec);\n       return r;\n     }\n \n@@ -1751,7 +1748,7 @@ strip_typedefs_expr (tree t, bool *remove_attributes)\n \n     case TREE_LIST:\n       {\n-\tvec<tree, va_gc> *vec = make_tree_vector ();\n+\treleasing_vec vec;\n \tbool changed = false;\n \ttree it;\n \tfor (it = t; it; it = TREE_CHAIN (it))\n@@ -1770,14 +1767,13 @@ strip_typedefs_expr (tree t, bool *remove_attributes)\n \t  }\n \telse\n \t  r = t;\n-\trelease_tree_vector (vec);\n \treturn r;\n       }\n \n     case TREE_VEC:\n       {\n \tbool changed = false;\n-\tvec<tree, va_gc> *vec = make_tree_vector ();\n+\treleasing_vec vec;\n \tn = TREE_VEC_LENGTH (t);\n \tvec_safe_reserve (vec, n);\n \tfor (i = 0; i < n; ++i)\n@@ -1798,7 +1794,6 @@ strip_typedefs_expr (tree t, bool *remove_attributes)\n \t  }\n \telse\n \t  r = t;\n-\trelease_tree_vector (vec);\n \treturn r;\n       }\n \n@@ -3355,7 +3350,6 @@ build_min_non_dep_op_overload (enum tree_code op,\n   va_list p;\n   int nargs, expected_nargs;\n   tree fn, call;\n-  vec<tree, va_gc> *args;\n \n   non_dep = extract_call_expr (non_dep);\n \n@@ -3369,7 +3363,7 @@ build_min_non_dep_op_overload (enum tree_code op,\n     expected_nargs += 1;\n   gcc_assert (nargs == expected_nargs);\n \n-  args = make_tree_vector ();\n+  releasing_vec args;\n   va_start (p, overload);\n \n   if (TREE_CODE (TREE_TYPE (overload)) == FUNCTION_TYPE)\n@@ -3399,7 +3393,6 @@ build_min_non_dep_op_overload (enum tree_code op,\n \n   va_end (p);\n   call = build_min_non_dep_call_vec (non_dep, fn, args);\n-  release_tree_vector (args);\n \n   tree call_expr = extract_call_expr (call);\n   KOENIG_LOOKUP_P (call_expr) = KOENIG_LOOKUP_P (non_dep);"}, {"sha": "36e6b2474f0b7f0e93a41b36e239baf4f31c1a83", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -3756,14 +3756,12 @@ build_function_call_vec (location_t /*loc*/, vec<location_t> /*arg_loc*/,\n static tree\n cp_build_function_call (tree function, tree params, tsubst_flags_t complain)\n {\n-  vec<tree, va_gc> *vec;\n   tree ret;\n \n-  vec = make_tree_vector ();\n+  releasing_vec vec;\n   for (; params != NULL_TREE; params = TREE_CHAIN (params))\n     vec_safe_push (vec, TREE_VALUE (params));\n   ret = cp_build_function_call_vec (function, &vec, complain);\n-  release_tree_vector (vec);\n   return ret;\n }\n \n@@ -3772,17 +3770,15 @@ cp_build_function_call (tree function, tree params, tsubst_flags_t complain)\n tree\n cp_build_function_call_nary (tree function, tsubst_flags_t complain, ...)\n {\n-  vec<tree, va_gc> *vec;\n   va_list args;\n   tree ret, t;\n \n-  vec = make_tree_vector ();\n+  releasing_vec vec;\n   va_start (args, complain);\n   for (t = va_arg (args, tree); t != NULL_TREE; t = va_arg (args, tree))\n     vec_safe_push (vec, t);\n   va_end (args);\n   ret = cp_build_function_call_vec (function, &vec, complain);\n-  release_tree_vector (vec);\n   return ret;\n }\n \n@@ -8223,11 +8219,10 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t/* Do the default thing.  */;\n       else\n \t{\n-\t  vec<tree, va_gc> *rhs_vec = make_tree_vector_single (rhs);\n+\t  releasing_vec rhs_vec = make_tree_vector_single (rhs);\n \t  result = build_special_member_call (lhs, complete_ctor_identifier,\n \t\t\t\t\t      &rhs_vec, lhstype, LOOKUP_NORMAL,\n                                               complain);\n-\t  release_tree_vector (rhs_vec);\n \t  if (result == NULL_TREE)\n \t    return error_mark_node;\n \t  goto ret;"}, {"sha": "618eed9a96d4efda39e6ab8d8d04b30ee4eee708", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9cf97bbfdc3b810b408a98cf79e629929dd5f6/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=cd9cf97bbfdc3b810b408a98cf79e629929dd5f6", "patch": "@@ -2173,7 +2173,6 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n \n   /* The type to which we are casting.  */\n   tree type;\n-  vec<tree, va_gc> *parmvec;\n \n   if (error_operand_p (exp) || parms == error_mark_node)\n     return error_mark_node;\n@@ -2295,12 +2294,11 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n     }\n \n   /* Call the constructor.  */\n-  parmvec = make_tree_vector ();\n+  releasing_vec parmvec;\n   for (; parms != NULL_TREE; parms = TREE_CHAIN (parms))\n     vec_safe_push (parmvec, TREE_VALUE (parms));\n   exp = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t   &parmvec, type, LOOKUP_NORMAL, complain);\n-  release_tree_vector (parmvec);\n \n   if (exp == error_mark_node)\n     return error_mark_node;"}]}