{"sha": "5264f487f03c0e89c258c62ba2ebe8b46fc189ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI2NGY0ODdmMDNjMGU4OWMyNThjNjJiYTJlYmU4YjQ2ZmMxODlhYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-05-17T09:22:02Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-05-17T09:22:02Z"}, "message": "ipa-reference.c (is_proper_for_analysis): Do not check flags that might change as result of global optimization.\n\n\n\t* ipa-reference.c (is_proper_for_analysis): Do not check flags\n\tthat might change as result of global optimization.\n\t(analyze_function): Do not check analyzed and externally_visible\n\tflags; be happy about address dereferences.\n\t(propagate): Prune all_module_statics so it really contains just\n\tstatics; prune all the local summaries.\n\t(ipa_reference_write_optimization_summary): Simplify.\n\nFrom-SVN: r187626", "tree": {"sha": "cfaf9c3f95fc7e73044047a939fd3f199fa6e0c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfaf9c3f95fc7e73044047a939fd3f199fa6e0c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5264f487f03c0e89c258c62ba2ebe8b46fc189ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5264f487f03c0e89c258c62ba2ebe8b46fc189ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5264f487f03c0e89c258c62ba2ebe8b46fc189ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5264f487f03c0e89c258c62ba2ebe8b46fc189ac/comments", "author": null, "committer": null, "parents": [{"sha": "de7ee1e98dc604ab434e4391106e24334bf7cb5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de7ee1e98dc604ab434e4391106e24334bf7cb5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de7ee1e98dc604ab434e4391106e24334bf7cb5c"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "65f76b4653c37a60951aae9692b14a7076924801", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5264f487f03c0e89c258c62ba2ebe8b46fc189ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5264f487f03c0e89c258c62ba2ebe8b46fc189ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5264f487f03c0e89c258c62ba2ebe8b46fc189ac", "patch": "@@ -1,3 +1,13 @@\n+2012-05-17  Jan Hubicka   <jh@suse.cz>\n+\n+\t* ipa-reference.c (is_proper_for_analysis): Do not check flags\n+\tthat might change as result of global optimization.\n+\t(analyze_function): Do not check analyzed and externally_visible\n+\tflags; be happy about address dereferences.\n+\t(propagate): Prune all_module_statics so it really contains just\n+\tstatics; prune all the local summaries.\n+\t(ipa_reference_write_optimization_summary): Simplify.\n+\n 2012-05-17  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* config/m68k/m68k-devices.def: Add 51ag, 51je, 51jf, 51jg, 51mm,"}, {"sha": "45fb232ae8bab6c3d24736c5c4b29b89fd014c9b", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5264f487f03c0e89c258c62ba2ebe8b46fc189ac/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5264f487f03c0e89c258c62ba2ebe8b46fc189ac/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=5264f487f03c0e89c258c62ba2ebe8b46fc189ac", "patch": "@@ -247,10 +247,6 @@ add_static_var (tree var)\n static inline bool\n is_proper_for_analysis (tree t)\n {\n-  /* We handle only variables whose address is never taken.  */\n-  if (TREE_ADDRESSABLE (t))\n-    return false;\n-\n   /* If the variable has the \"used\" attribute, treat it as if it had a\n      been touched by the devil.  */\n   if (DECL_PRESERVE_P (t))\n@@ -266,10 +262,6 @@ is_proper_for_analysis (tree t)\n   if (TREE_READONLY (t))\n     return false;\n \n-  /* We cannot touch decls where the type needs constructing.  */\n-  if (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (t)))\n-    return false;\n-\n   /* This is a variable we care about.  Check if we have seen it\n      before, and if not add it the set of variables we care about.  */\n   if (all_module_statics\n@@ -438,9 +430,7 @@ analyze_function (struct cgraph_node *fn)\n       if (!symtab_variable_p (ref->referred))\n \tcontinue;\n       var = ipa_ref_varpool_node (ref)->symbol.decl;\n-      if (ipa_ref_varpool_node (ref)->symbol.externally_visible\n-\t  || !ipa_ref_varpool_node (ref)->analyzed\n-\t  || !is_proper_for_analysis (var))\n+      if (!is_proper_for_analysis (var))\n \tcontinue;\n       switch (ref->use)\n \t{\n@@ -453,7 +443,6 @@ analyze_function (struct cgraph_node *fn)\n           bitmap_set_bit (local->statics_written, DECL_UID (var));\n \t  break;\n \tcase IPA_REF_ADDR:\n-\t  gcc_unreachable ();\n \t  break;\n \t}\n     }\n@@ -613,6 +602,7 @@ static unsigned int\n propagate (void)\n {\n   struct cgraph_node *node;\n+  struct varpool_node *vnode;\n   struct cgraph_node *w;\n   struct cgraph_node **order =\n     XCNEWVEC (struct cgraph_node *, cgraph_n_nodes);\n@@ -625,6 +615,28 @@ propagate (void)\n   ipa_discover_readonly_nonaddressable_vars ();\n   generate_summary ();\n \n+  /* Now we know what vars are realy statics; prune out those that aren't.  */\n+  FOR_EACH_VARIABLE (vnode)\n+    if (vnode->symbol.externally_visible\n+\t|| TREE_ADDRESSABLE (vnode->symbol.decl)\n+\t|| TREE_READONLY (vnode->symbol.decl)\n+\t|| !is_proper_for_analysis (vnode->symbol.decl)\n+\t|| !vnode->analyzed)\n+      bitmap_clear_bit (all_module_statics, DECL_UID (vnode->symbol.decl));\n+\n+  /* Forget info we collected \"just for fun\" on variables that turned out to be\n+     non-local.  */\n+  FOR_EACH_DEFINED_FUNCTION (node)\n+    {\n+      ipa_reference_local_vars_info_t node_l;\n+\n+      node_l = &get_reference_vars_info (node)->local;\n+      if (node_l->statics_read != all_module_statics)\n+        bitmap_and_into (node_l->statics_read, all_module_statics);\n+      if (node_l->statics_written != all_module_statics)\n+        bitmap_and_into (node_l->statics_written, all_module_statics);\n+    }\n+\n   /* Propagate the local information thru the call graph to produce\n      the global information.  All the nodes within a cycle will have\n      the same info so we collapse cycles first.  Then we can do the\n@@ -1034,9 +1046,7 @@ ipa_reference_write_optimization_summary (cgraph_node_set set,\n   for (i = 0; i < lto_varpool_encoder_size (varpool_encoder); i++)\n     {\n       struct varpool_node *vnode = lto_varpool_encoder_deref (varpool_encoder, i);\n-      if (!vnode->symbol.externally_visible\n-\t  && vnode->analyzed\n-\t  && bitmap_bit_p (all_module_statics, DECL_UID (vnode->symbol.decl))\n+      if (bitmap_bit_p (all_module_statics, DECL_UID (vnode->symbol.decl))\n \t  && referenced_from_this_partition_p (&vnode->symbol.ref_list, set, vset))\n \t{\n \t  tree decl = vnode->symbol.decl;"}]}