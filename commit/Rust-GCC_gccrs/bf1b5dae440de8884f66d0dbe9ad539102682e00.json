{"sha": "bf1b5dae440de8884f66d0dbe9ad539102682e00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxYjVkYWU0NDBkZTg4ODRmNjZkMGRiZTlhZDUzOTEwMjY4MmUwMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-27T13:52:00Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-27T13:52:00Z"}, "message": "analyzer: eliminate non-deterministic behavior\n\nThis patch is a followup to the previous one, eliminating\nnon-determinism in the behavior of the analyzer (rather than just in\nthe logs), by sorting whenever the result previously depended on\npointer values.  Tested as per the previous patch.\n\ngcc/analyzer/ChangeLog:\n\t* constraint-manager.cc (svalue_cmp_by_ptr): Delete.\n\t(equiv_class::canonicalize): Use svalue::cmp_ptr_ptr instead.\n\t(equiv_class_cmp): Eliminate pointer comparison.\n\t* diagnostic-manager.cc (dedupe_key::comparator): If they are at\n\tthe same location, also compare epath ength and pending_diagnostic\n\tkind.\n\t* engine.cc (readability_comparator): If two path_vars have the\n\tsame readability, then impose an arbitrary ordering on them.\n\t(worklist::key_t::cmp): If two points have the same plan ordering,\n\tcontinue the comparison.  Call sm_state_map::cmp rather than\n\tcomparing hash values.\n\t* program-state.cc (sm_state_map::entry_t::cmp): New.\n\t(sm_state_map::cmp): New.\n\t* program-state.h (sm_state_map::entry_t::cmp): New decl.\n\t(sm_state_map::elements): New.\n\t(sm_state_map::cmp): New.", "tree": {"sha": "bca50e075ec5cf630a25522b999232bdf83cffa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bca50e075ec5cf630a25522b999232bdf83cffa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1b5dae440de8884f66d0dbe9ad539102682e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1b5dae440de8884f66d0dbe9ad539102682e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1b5dae440de8884f66d0dbe9ad539102682e00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1b5dae440de8884f66d0dbe9ad539102682e00/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0702ac5588333e27d7ec43d21d704521f7a05c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0702ac5588333e27d7ec43d21d704521f7a05c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0702ac5588333e27d7ec43d21d704521f7a05c6"}], "stats": {"total": 133, "additions": 102, "deletions": 31}, "files": [{"sha": "2978f1b212d6b352bb871509b5f4bd13a16f1d27", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1b5dae440de8884f66d0dbe9ad539102682e00/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1b5dae440de8884f66d0dbe9ad539102682e00/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=bf1b5dae440de8884f66d0dbe9ad539102682e00", "patch": "@@ -423,26 +423,12 @@ equiv_class::get_representative () const\n   return m_vars[0];\n }\n \n-/* Comparator for use by equiv_class::canonicalize.  */\n-\n-static int\n-svalue_cmp_by_ptr (const void *p1, const void *p2)\n-{\n-  const svalue *sval1 = *(const svalue * const *)p1;\n-  const svalue *sval2 = *(const svalue * const *)p2;\n-  if (sval1 < sval2)\n-    return 1;\n-  if (sval1 > sval2)\n-    return -1;\n-  return 0;\n-}\n-\n /* Sort the svalues within this equiv_class.  */\n \n void\n equiv_class::canonicalize ()\n {\n-  m_vars.qsort (svalue_cmp_by_ptr);\n+  m_vars.qsort (svalue::cmp_ptr_ptr);\n }\n \n /* Get a debug string for C_OP.  */\n@@ -1693,11 +1679,7 @@ equiv_class_cmp (const void *p1, const void *p2)\n   gcc_assert (rep1);\n   gcc_assert (rep2);\n \n-  if (rep1 < rep2)\n-    return 1;\n-  if (rep1 > rep2)\n-    return -1;\n-  return 0;\n+  return svalue::cmp_ptr (rep1, rep2);\n }\n \n /* Comparator for use by constraint_manager::canonicalize."}, {"sha": "93f270f7c2c61b6476e045633b203c56f26cf08f", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1b5dae440de8884f66d0dbe9ad539102682e00/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1b5dae440de8884f66d0dbe9ad539102682e00/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=bf1b5dae440de8884f66d0dbe9ad539102682e00", "patch": "@@ -318,7 +318,15 @@ class dedupe_key\n     location_t loc1 = pk1->get_location ();\n     location_t loc2 = pk2->get_location ();\n \n-    return linemap_compare_locations (line_table, loc2, loc1);\n+    if (int cmp = linemap_compare_locations (line_table, loc2, loc1))\n+      return cmp;\n+    if (int cmp = ((int)pk1->m_sd.get_epath_length ()\n+\t\t   - (int)pk2->m_sd.get_epath_length ()))\n+      return cmp;\n+    if (int cmp = strcmp (pk1->m_sd.m_d->get_kind (),\n+\t\t\t  pk2->m_sd.m_d->get_kind ()))\n+      return cmp;\n+    return 0;\n   }\n \n   const saved_diagnostic &m_sd;"}, {"sha": "d247ebbc20e64ddf41cc12b6e023aaa5865ddff1", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1b5dae440de8884f66d0dbe9ad539102682e00/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1b5dae440de8884f66d0dbe9ad539102682e00/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=bf1b5dae440de8884f66d0dbe9ad539102682e00", "patch": "@@ -517,6 +517,29 @@ readability_comparator (const void *p1, const void *p2)\n   if (int cmp = pv2.m_stack_depth - pv1.m_stack_depth)\n     return cmp;\n \n+  /* Otherwise, if they have the same readability, then impose an\n+     arbitrary deterministic ordering on them.  */\n+\n+  if (int cmp = TREE_CODE (pv1.m_tree) - TREE_CODE (pv2.m_tree))\n+    return cmp;\n+\n+  switch (TREE_CODE (pv1.m_tree))\n+    {\n+    default:\n+      break;\n+    case SSA_NAME:\n+      if (int cmp = (SSA_NAME_VERSION (pv1.m_tree)\n+\t\t     - SSA_NAME_VERSION (pv2.m_tree)))\n+\treturn cmp;\n+      break;\n+    case PARM_DECL:\n+    case VAR_DECL:\n+    case RESULT_DECL:\n+      if (int cmp = DECL_UID (pv1.m_tree) - DECL_UID (pv2.m_tree))\n+\treturn cmp;\n+      break;\n+    }\n+\n   /* TODO: We ought to find ways of sorting such cases.  */\n   return 0;\n }\n@@ -1824,8 +1847,9 @@ worklist::key_t::cmp (const worklist::key_t &ka, const worklist::key_t &kb)\n       && point_b.get_function () != NULL\n       && point_a.get_function () != point_b.get_function ())\n     {\n-      return ka.m_worklist.m_plan.cmp_function (point_a.get_function (),\n-\t\t\t\t\t\tpoint_b.get_function ());\n+      if (int cmp = ka.m_worklist.m_plan.cmp_function (point_a.get_function (),\n+\t\t\t\t\t\t       point_b.get_function ()))\n+\treturn cmp;\n     }\n \n   /* First, order by SCC.  */\n@@ -1876,20 +1900,15 @@ worklist::key_t::cmp (const worklist::key_t &ka, const worklist::key_t &kb)\n   const program_state &state_b = kb.m_enode->get_state ();\n \n   /* Sort by sm-state, so that identical sm-states are grouped\n-     together in the worklist.\n-     For now, sort by the hash value (might not be deterministic).  */\n+     together in the worklist.  */\n   for (unsigned sm_idx = 0; sm_idx < state_a.m_checker_states.length ();\n        ++sm_idx)\n     {\n       sm_state_map *smap_a = state_a.m_checker_states[sm_idx];\n       sm_state_map *smap_b = state_b.m_checker_states[sm_idx];\n \n-      hashval_t hash_a = smap_a->hash ();\n-      hashval_t hash_b = smap_b->hash ();\n-      if (hash_a < hash_b)\n-\treturn -1;\n-      else if (hash_a > hash_b)\n-\treturn 1;\n+      if (int smap_cmp = sm_state_map::cmp (*smap_a, *smap_b))\n+\treturn smap_cmp;\n     }\n \n   /* Otherwise, we have two enodes at the same program point but with"}, {"sha": "6a91554357c49bf8a526332f7a9fd35b652f292d", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1b5dae440de8884f66d0dbe9ad539102682e00/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1b5dae440de8884f66d0dbe9ad539102682e00/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=bf1b5dae440de8884f66d0dbe9ad539102682e00", "patch": "@@ -131,6 +131,25 @@ extrinsic_state::get_model_manager () const\n     return NULL; /* for selftests.  */\n }\n \n+/* struct sm_state_map::entry_t.  */\n+\n+int\n+sm_state_map::entry_t::cmp (const entry_t &entry_a, const entry_t &entry_b)\n+{\n+  gcc_assert (entry_a.m_state);\n+  gcc_assert (entry_b.m_state);\n+  if (int cmp_state = ((int)entry_a.m_state->get_id ()\n+\t\t       - (int)entry_b.m_state->get_id ()))\n+    return cmp_state;\n+  if (entry_a.m_origin && entry_b.m_origin)\n+    return svalue::cmp_ptr (entry_a.m_origin, entry_b.m_origin);\n+  if (entry_a.m_origin)\n+    return 1;\n+  if (entry_b.m_origin)\n+    return -1;\n+  return 0;\n+}\n+\n /* class sm_state_map.  */\n \n /* sm_state_map's ctor.  */\n@@ -553,6 +572,44 @@ sm_state_map::on_unknown_change (const svalue *sval,\n     impl_set_state (*iter, (state_machine::state_t)0, NULL, ext_state);\n }\n \n+/* Comparator for imposing an order on sm_state_map instances.  */\n+\n+int\n+sm_state_map::cmp (const sm_state_map &smap_a, const sm_state_map &smap_b)\n+{\n+  if (int cmp_count = smap_a.elements () - smap_b.elements ())\n+    return cmp_count;\n+\n+  auto_vec <const svalue *> keys_a (smap_a.elements ());\n+  for (map_t::iterator iter = smap_a.begin ();\n+       iter != smap_a.end ();\n+       ++iter)\n+    keys_a.quick_push ((*iter).first);\n+  keys_a.qsort (svalue::cmp_ptr_ptr);\n+\n+  auto_vec <const svalue *> keys_b (smap_b.elements ());\n+  for (map_t::iterator iter = smap_b.begin ();\n+       iter != smap_b.end ();\n+       ++iter)\n+    keys_b.quick_push ((*iter).first);\n+  keys_b.qsort (svalue::cmp_ptr_ptr);\n+\n+  unsigned i;\n+  const svalue *sval_a;\n+  FOR_EACH_VEC_ELT (keys_a, i, sval_a)\n+    {\n+      const svalue *sval_b = keys_b[i];\n+      if (int cmp_sval = svalue::cmp_ptr (sval_a, sval_b))\n+\treturn cmp_sval;\n+      const entry_t *e_a = const_cast <map_t &> (smap_a.m_map).get (sval_a);\n+      const entry_t *e_b = const_cast <map_t &> (smap_b.m_map).get (sval_b);\n+      if (int cmp_entry = entry_t::cmp (*e_a, *e_b))\n+\treturn cmp_entry;\n+    }\n+\n+  return 0;\n+}\n+\n /* Canonicalize SVAL before getting/setting it within the map.\n    Convert all NULL pointers to (void *) to avoid state explosions\n    involving all of the various (foo *)NULL vs (bar *)NULL.  */"}, {"sha": "c44fc948864e418b236613feef18e7068cf52a88", "filename": "gcc/analyzer/program-state.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1b5dae440de8884f66d0dbe9ad539102682e00/gcc%2Fanalyzer%2Fprogram-state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1b5dae440de8884f66d0dbe9ad539102682e00/gcc%2Fanalyzer%2Fprogram-state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.h?ref=bf1b5dae440de8884f66d0dbe9ad539102682e00", "patch": "@@ -96,6 +96,8 @@ class sm_state_map\n       return !(*this == other);\n     }\n \n+    static int cmp (const entry_t &entry_a, const entry_t &entry_b);\n+\n     state_machine::state_t m_state;\n     const svalue *m_origin;\n   };\n@@ -157,6 +159,9 @@ class sm_state_map\n \n   iterator_t begin () const { return m_map.begin (); }\n   iterator_t end () const { return m_map.end (); }\n+  size_t elements () const { return m_map.elements (); }\n+\n+  static int cmp (const sm_state_map &smap_a, const sm_state_map &smap_b);\n \n   static const svalue *\n   canonicalize_svalue (const svalue *sval, const extrinsic_state &ext_state);"}]}