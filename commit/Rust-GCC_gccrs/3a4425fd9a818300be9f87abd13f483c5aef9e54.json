{"sha": "3a4425fd9a818300be9f87abd13f483c5aef9e54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0NDI1ZmQ5YTgxODMwMGJlOWY4N2FiZDEzZjQ4M2M1YWVmOWU1NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-12-18T07:14:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-18T07:14:23Z"}, "message": "[Ada] Do not propagate Object_Size onto Size for composite types\n\n2019-12-18  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* layout.adb (Layout_Type): In the case of composite types, do\n\tnot copy the Esize onto the RM_Size if the latter is not set.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>:\n\tAlso cap the alignment if an Object_Size clause has been\n\tspecified.  Pass VAR_DECL in the call to validate_size for the\n\tEsize of a type.\n\t(validate_size): Be prepared to give an error on an Object_Size\n\tclause.\n\nFrom-SVN: r279507", "tree": {"sha": "cb72eae16db99401628f9c28f8e8b851e9a39c83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb72eae16db99401628f9c28f8e8b851e9a39c83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a4425fd9a818300be9f87abd13f483c5aef9e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4425fd9a818300be9f87abd13f483c5aef9e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4425fd9a818300be9f87abd13f483c5aef9e54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4425fd9a818300be9f87abd13f483c5aef9e54/comments", "author": null, "committer": null, "parents": [{"sha": "c846eedd56a5ecf28233d5e8fe938d44b3add5f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c846eedd56a5ecf28233d5e8fe938d44b3add5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c846eedd56a5ecf28233d5e8fe938d44b3add5f3"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "ce39bc81175fc87063b8528130adb5c1c2d1072c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4425fd9a818300be9f87abd13f483c5aef9e54/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4425fd9a818300be9f87abd13f483c5aef9e54/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3a4425fd9a818300be9f87abd13f483c5aef9e54", "patch": "@@ -1,3 +1,14 @@\n+2019-12-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* layout.adb (Layout_Type): In the case of composite types, do\n+\tnot copy the Esize onto the RM_Size if the latter is not set.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>:\n+\tAlso cap the alignment if an Object_Size clause has been\n+\tspecified.  Pass VAR_DECL in the call to validate_size for the\n+\tEsize of a type.\n+\t(validate_size): Be prepared to give an error on an Object_Size\n+\tclause.\n+\n 2019-12-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* einfo.ads (Handling of Type'Size Value): Add references to the"}, {"sha": "871a309ab7d4baeb5d2cc31c57023f6cdfa3f8d5", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4425fd9a818300be9f87abd13f483c5aef9e54/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4425fd9a818300be9f87abd13f483c5aef9e54/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=3a4425fd9a818300be9f87abd13f483c5aef9e54", "patch": "@@ -3054,6 +3054,15 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\tif (max_align < BIGGEST_ALIGNMENT)\n \t\t  TYPE_MAX_ALIGN (gnu_type) = max_align;\n \t      }\n+\n+\t    /* Similarly if an Object_Size clause has been specified.  */\n+\t    else if (Known_Esize (gnat_entity))\n+\t      {\n+\t\tunsigned int max_size = UI_To_Int (Esize (gnat_entity));\n+\t\tunsigned int max_align = max_size & -max_size;\n+\t\tif (max_align < BIGGEST_ALIGNMENT)\n+\t\t  TYPE_MAX_ALIGN (gnu_type) = max_align;\n+\t      }\n \t  }\n \n \t/* If we have a Parent_Subtype, make a field for the parent.  If\n@@ -4241,11 +4250,15 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t non-constant).  */\n       if (!gnu_size && kind != E_String_Literal_Subtype)\n \t{\n-\t  Uint gnat_size = Known_Esize (gnat_entity)\n-\t\t\t   ? Esize (gnat_entity) : RM_Size (gnat_entity);\n-\t  gnu_size\n-\t    = validate_size (gnat_size, gnu_type, gnat_entity, TYPE_DECL,\n-\t\t\t     false, Has_Size_Clause (gnat_entity), NULL, NULL);\n+\t  if (Known_Esize (gnat_entity))\n+\t    gnu_size\n+\t      = validate_size (Esize (gnat_entity), gnu_type, gnat_entity,\n+\t\t\t       VAR_DECL, false, false, NULL, NULL);\n+\t  else\n+\t    gnu_size\n+\t      = validate_size (RM_Size (gnat_entity), gnu_type, gnat_entity,\n+\t\t\t       TYPE_DECL, false, Has_Size_Clause (gnat_entity),\n+\t\t\t       NULL, NULL);\n \t}\n \n       /* If a size was specified, see if we can make a new type of that size\n@@ -8872,6 +8885,8 @@ validate_size (Uint uint_size, tree gnu_type, Entity_Id gnat_object,\n     gnat_error_node = Last_Bit (Component_Clause (gnat_object));\n   else if (Present (Size_Clause (gnat_object)))\n     gnat_error_node = Expression (Size_Clause (gnat_object));\n+  else if (Has_Object_Size_Clause (gnat_object))\n+    gnat_error_node = Expression (Object_Size_Clause (gnat_object));\n   else\n     gnat_error_node = gnat_object;\n "}, {"sha": "ce2fe301f3c989de6556881116d72dd8d92eece8", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4425fd9a818300be9f87abd13f483c5aef9e54/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4425fd9a818300be9f87abd13f483c5aef9e54/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=3a4425fd9a818300be9f87abd13f483c5aef9e54", "patch": "@@ -435,14 +435,6 @@ package body Layout is\n             end;\n          end if;\n \n-         --  If Esize is set, and RM_Size is not, RM_Size is copied from Esize.\n-         --  At least for now this seems reasonable, and is in any case needed\n-         --  for compatibility with old versions of gigi.\n-\n-         if Known_Esize (E) and then Unknown_RM_Size (E) then\n-            Set_RM_Size (E, Esize (E));\n-         end if;\n-\n          --  For array base types, set the component size if object size of the\n          --  component type is known and is a small power of 2 (8, 16, 32, 64),\n          --  since this is what will always be used, except if a very large"}]}