{"sha": "54ef7701a9dec8c923a12d1983f8a051ba88a7b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlZjc3MDFhOWRlYzhjOTIzYTEyZDE5ODNmOGEwNTFiYTg4YTdiOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-10-28T19:05:49Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-10-28T19:05:49Z"}, "message": "value-range: Give up on POLY_INT_CST ranges [PR97457]\n\nThis PR shows another problem with calculating value ranges for\nPOLY_INT_CSTs.  We have:\n\n  ivtmp_76 = ASSERT_EXPR <ivtmp_60, ivtmp_60 > POLY_INT_CST [9, 4294967294]>\n\nwhere the VQ coefficient is unsigned but is effectively acting\nas a negative number.  We wrongly give the POLY_INT_CST the range:\n\n  [9, INT_MAX]\n\nand things go downhill from there: later iterations of the unrolled\nepilogue are wrongly removed as dead.\n\nI guess this is the final nail in the coffin for doing VRP on\nPOLY_INT_CSTs.  For other similarly exotic testcases we could have\noverflow for any coefficient, not just those that could be treated\nas contextually negative.\n\nTesting TYPE_OVERFLOW_UNDEFINED doesn't seem like an option because we\ncouldn't handle warn_strict_overflow properly.  At this stage we're\njust recording a range that might or might not lead to strict-overflow\nassumptions later.\n\nIt still feels like we should be able to do something here, but for\nnow removing the code seems safest.  It's also telling that there\nare no testsuite failures on SVE from doing this.\n\ngcc/\n\tPR tree-optimization/97457\n\t* value-range.cc (irange::set): Don't decay POLY_INT_CST ranges\n\tto integer ranges.\n\ngcc/testsuite/\n\tPR tree-optimization/97457\n\t* gcc.dg/vect/pr97457.c: New test.", "tree": {"sha": "91df5b620b30214572ca4d1cdbee70c1b4aa2e39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91df5b620b30214572ca4d1cdbee70c1b4aa2e39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ef7701a9dec8c923a12d1983f8a051ba88a7b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ef7701a9dec8c923a12d1983f8a051ba88a7b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ef7701a9dec8c923a12d1983f8a051ba88a7b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ef7701a9dec8c923a12d1983f8a051ba88a7b9/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4223abb3deb24e8104bbfec6f0f21579c1889e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4223abb3deb24e8104bbfec6f0f21579c1889e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4223abb3deb24e8104bbfec6f0f21579c1889e3"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "506ba249b00035592e3b4afe3fadb2bd6ad9059e", "filename": "gcc/testsuite/gcc.dg/vect/pr97457.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ef7701a9dec8c923a12d1983f8a051ba88a7b9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97457.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ef7701a9dec8c923a12d1983f8a051ba88a7b9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97457.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97457.c?ref=54ef7701a9dec8c923a12d1983f8a051ba88a7b9", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-additional-options \"-O3\" } */\n+\n+int a;\n+long c;\n+signed char d(char e, char f) { return e + f; }\n+int main(void) {\n+  for (; a <= 1; a++) {\n+    c = -8;\n+    for (; c != 3; c = d(c, 1))\n+      ;\n+  }\n+  char b = c;\n+  if (b != 3)\n+    __builtin_abort();\n+}"}, {"sha": "5827e8122168d31d51581d8fb11a1bf7915736e9", "filename": "gcc/value-range.cc", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ef7701a9dec8c923a12d1983f8a051ba88a7b9/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ef7701a9dec8c923a12d1983f8a051ba88a7b9/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=54ef7701a9dec8c923a12d1983f8a051ba88a7b9", "patch": "@@ -248,31 +248,11 @@ irange::set (tree min, tree max, value_range_kind kind)\n       set_undefined ();\n       return;\n     }\n-  if (kind == VR_RANGE)\n-    {\n-      /* Convert POLY_INT_CST bounds into worst-case INTEGER_CST bounds.  */\n-      if (POLY_INT_CST_P (min))\n-\t{\n-\t  tree type_min = vrp_val_min (TREE_TYPE (min));\n-\t  widest_int lb\n-\t    = constant_lower_bound_with_limit (wi::to_poly_widest (min),\n-\t\t\t\t\t       wi::to_widest (type_min));\n-\t  min = wide_int_to_tree (TREE_TYPE (min), lb);\n-\t}\n-      if (POLY_INT_CST_P (max))\n-\t{\n-\t  tree type_max = vrp_val_max (TREE_TYPE (max));\n-\t  widest_int ub\n-\t    = constant_upper_bound_with_limit (wi::to_poly_widest (max),\n-\t\t\t\t\t       wi::to_widest (type_max));\n-\t  max = wide_int_to_tree (TREE_TYPE (max), ub);\n-\t}\n-    }\n-  else if (kind != VR_VARYING)\n-    {\n-     if (POLY_INT_CST_P (min) || POLY_INT_CST_P (max))\n-       kind = VR_VARYING;\n-    }\n+\n+  if (kind != VR_VARYING\n+      && (POLY_INT_CST_P (min) || POLY_INT_CST_P (max)))\n+    kind = VR_VARYING;\n+\n   if (kind == VR_VARYING)\n     {\n       set_varying (TREE_TYPE (min));"}]}