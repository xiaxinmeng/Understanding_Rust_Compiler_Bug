{"sha": "57d38024e58401aed46f98a543a06d6fc926502a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkMzgwMjRlNTg0MDFhZWQ0NmY5OGE1NDNhMDZkNmZjOTI2NTAyYQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-09-05T12:45:48Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-09-05T12:45:48Z"}, "message": "re PR target/23683 (review all uses of gen_rtx_MEM in sh port)\n\n\tPR target/23683\n\t* sh.c (sh_reorg, emit_load_ptr): Use gen_const_mem.\n\t(output_stack_adjust): Use gen_tmp_stack_mem.\n\t(sh_expand_prologue, sh_expand_epilogue): Use gen_frame_mem.\n\t(sh_set_return_address, sh_allocate_initial_value): Likewise.\n\t(sh_get_pr_initial_val): Likewise.\n\t(sh_builtin_saveregs): Use gen_frame_mem and change_address.\n\t(sh_initialize_trampoline): Likewise.  Also use adjust_address.\n\t* sh.md (divsi_inv_m0): Use gen_const_mem.\n\t(push_fpscr, pop_fpscr, load_ra): Use gen_frame_mem.\n\t(movdf_i4+1): Use gen_tmp_stack_mem.\n\t(reload_outdf+3, reload_outdf+4, fpu_switch+1): Use change_address.\n\t(fpu_switch+2): Likewise.\n\t(movv4sf_i, movv16sf_i): Use adjust_address.\n\t(symGOT_load): Set MEM_NOTRAP_P bit.\n\nFrom-SVN: r103904", "tree": {"sha": "d32f3d38a9d4612ffcc5c94defc55326e2731075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d32f3d38a9d4612ffcc5c94defc55326e2731075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57d38024e58401aed46f98a543a06d6fc926502a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d38024e58401aed46f98a543a06d6fc926502a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d38024e58401aed46f98a543a06d6fc926502a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d38024e58401aed46f98a543a06d6fc926502a/comments", "author": null, "committer": null, "parents": [{"sha": "efa39e44011189834bdb439133d6af955a4a509b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa39e44011189834bdb439133d6af955a4a509b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa39e44011189834bdb439133d6af955a4a509b"}], "stats": {"total": 239, "additions": 125, "deletions": 114}, "files": [{"sha": "53a36c84599a683e01f5ff2a19d9e283f9baa525", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d38024e58401aed46f98a543a06d6fc926502a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d38024e58401aed46f98a543a06d6fc926502a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57d38024e58401aed46f98a543a06d6fc926502a", "patch": "@@ -1,3 +1,21 @@\n+2005-09-05  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR target/23683\n+\t* sh.c (sh_reorg, emit_load_ptr): Use gen_const_mem.\n+\t(output_stack_adjust): Use gen_tmp_stack_mem.\n+\t(sh_expand_prologue, sh_expand_epilogue): Use gen_frame_mem.\n+\t(sh_set_return_address, sh_allocate_initial_value): Likewise.\n+\t(sh_get_pr_initial_val): Likewise.\n+\t(sh_builtin_saveregs): Use gen_frame_mem and change_address.\n+\t(sh_initialize_trampoline): Likewise.  Also use adjust_address.\n+\t* sh.md (divsi_inv_m0): Use gen_const_mem.\n+\t(push_fpscr, pop_fpscr, load_ra): Use gen_frame_mem.\n+\t(movdf_i4+1): Use gen_tmp_stack_mem.\n+\t(reload_outdf+3, reload_outdf+4, fpu_switch+1): Use change_address.\n+\t(fpu_switch+2): Likewise.\n+\t(movv4sf_i, movv16sf_i): Use adjust_address.\n+\t(symGOT_load): Set MEM_NOTRAP_P bit.\n+\n 2005-09-04  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/23721"}, {"sha": "8e6333bd43214b835b9ffe459aa4d00a11db292a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 66, "deletions": 77, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d38024e58401aed46f98a543a06d6fc926502a/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d38024e58401aed46f98a543a06d6fc926502a/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=57d38024e58401aed46f98a543a06d6fc926502a", "patch": "@@ -4667,7 +4667,7 @@ sh_reorg (void)\n \t\t\t}\n \t\t      last_float_move = scan;\n \t\t      last_float = src;\n-\t\t      newsrc = gen_rtx_MEM (mode,\n+\t\t      newsrc = gen_const_mem (mode,\n \t\t\t\t\t(((TARGET_SH4 && ! TARGET_FMOVD)\n \t\t\t\t\t  || REGNO (dst) == FPUL_REG)\n \t\t\t\t\t ? r0_inc_rtx\n@@ -5199,20 +5199,20 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \n \t      adj_reg = gen_rtx_REG (GET_MODE (reg), 4);\n \t      tmp_reg = gen_rtx_REG (GET_MODE (reg), 5);\n-\t      emit_move_insn (gen_rtx_MEM (Pmode, reg), adj_reg);\n+\t      emit_move_insn (gen_tmp_stack_mem (Pmode, reg), adj_reg);\n \t      emit_insn (GEN_MOV (adj_reg, GEN_INT (size)));\n \t      emit_insn (GEN_ADD3 (adj_reg, adj_reg, reg));\n-\t      mem = gen_rtx_MEM (Pmode, gen_rtx_PRE_DEC (Pmode, adj_reg));\n+\t      mem = gen_tmp_stack_mem (Pmode, gen_rtx_PRE_DEC (Pmode, adj_reg));\n \t      emit_move_insn (mem, tmp_reg);\n-\t      \temit_move_insn (tmp_reg, gen_rtx_MEM (Pmode, reg));\n-\t\tmem = gen_rtx_MEM (Pmode, gen_rtx_PRE_DEC (Pmode, adj_reg));\n-\t\temit_move_insn (mem, tmp_reg);\n-\t\temit_move_insn (reg, adj_reg);\n-\t\tmem = gen_rtx_MEM (Pmode, gen_rtx_POST_INC (Pmode, reg));\n-\t\temit_move_insn (adj_reg, mem);\n-\t\tmem = gen_rtx_MEM (Pmode, gen_rtx_POST_INC (Pmode, reg));\n-\t\temit_move_insn (tmp_reg, mem);\n-\t\treturn;\n+\t      emit_move_insn (tmp_reg, gen_tmp_stack_mem (Pmode, reg));\n+\t      mem = gen_tmp_stack_mem (Pmode, gen_rtx_PRE_DEC (Pmode, adj_reg));\n+\t      emit_move_insn (mem, tmp_reg);\n+\t      emit_move_insn (reg, adj_reg);\n+\t      mem = gen_tmp_stack_mem (Pmode, gen_rtx_POST_INC (Pmode, reg));\n+\t      emit_move_insn (adj_reg, mem);\n+\t      mem = gen_tmp_stack_mem (Pmode, gen_rtx_POST_INC (Pmode, reg));\n+\t      emit_move_insn (tmp_reg, mem);\n+\t      return;\n \t    }\n \t  const_reg = gen_rtx_REG (GET_MODE (reg), temp);\n \n@@ -5861,10 +5861,10 @@ sh_expand_prologue (void)\n \n \t  reg_rtx = gen_rtx_REG (mode, reg);\n \n-\t  mem_rtx = gen_rtx_MEM (mode,\n-\t\t\t\t gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t       stack_pointer_rtx,\n-\t\t\t\t\t       GEN_INT (offset)));\n+\t  mem_rtx = gen_frame_mem (mode,\n+\t\t\t\t   gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t stack_pointer_rtx,\n+\t\t\t\t\t\t GEN_INT (offset)));\n \n \t  GO_IF_LEGITIMATE_ADDRESS (mode, XEXP (mem_rtx, 0), try_pre_dec);\n \n@@ -5878,8 +5878,7 @@ sh_expand_prologue (void)\n \t\t    || mem_rtx == NULL_RTX\n \t\t    || reg == PR_REG || SPECIAL_REGISTER_P (reg)))\n \t      {\n-\t\tpre_dec = gen_rtx_MEM (mode,\n-\t\t\t\t       gen_rtx_PRE_DEC (Pmode, r0));\n+\t\tpre_dec = gen_frame_mem (mode, gen_rtx_PRE_DEC (Pmode, r0));\n \n \t\tGO_IF_LEGITIMATE_ADDRESS (mode, XEXP (pre_dec, 0),\n \t\t\t\t\t  pre_dec_ok);\n@@ -5927,12 +5926,12 @@ sh_expand_prologue (void)\n \t      mem_rtx = pre_dec;\n \t    }\n \t  else if (sp_in_r0)\n-\t    mem_rtx = gen_rtx_MEM (mode, r0);\n+\t    mem_rtx = gen_frame_mem (mode, r0);\n \t  else\n-\t    mem_rtx = gen_rtx_MEM (mode,\n-\t\t\t\t   gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t\t stack_pointer_rtx,\n-\t\t\t\t\t\t r0));\n+\t    mem_rtx = gen_frame_mem (mode,\n+\t\t\t\t     gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t   stack_pointer_rtx,\n+\t\t\t\t\t\t   r0));\n \n \t  /* We must not use an r0-based address for target-branch\n \t     registers or for special registers without pre-dec\n@@ -5992,10 +5991,10 @@ sh_expand_prologue (void)\n \t      {\n \t\trtx reg_rtx = gen_rtx_REG (mode, reg);\n \t\trtx set, note_rtx;\n-\t\trtx mem_rtx = gen_rtx_MEM (mode,\n-\t\t\t\t\t   gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t\t\t stack_pointer_rtx,\n-\t\t\t\t\t\t\t GEN_INT (offset)));\n+\t\trtx mem_rtx = gen_frame_mem (mode,\n+\t\t\t\t\t     gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t\t   stack_pointer_rtx,\n+\t\t\t\t\t\t\t   GEN_INT (offset)));\n \n \t\tset = gen_rtx_SET (VOIDmode, mem_rtx, reg_rtx);\n \t\tnote_rtx = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR, set,\n@@ -6179,10 +6178,10 @@ sh_expand_epilogue (bool sibcall_p)\n \t  offset = offset_base + entry->offset;\n \t  reg_rtx = gen_rtx_REG (mode, reg);\n \n-\t  mem_rtx = gen_rtx_MEM (mode,\n-\t\t\t\t gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t       stack_pointer_rtx,\n-\t\t\t\t\t       GEN_INT (offset)));\n+\t  mem_rtx = gen_frame_mem (mode,\n+\t\t\t\t   gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t stack_pointer_rtx,\n+\t\t\t\t\t\t GEN_INT (offset)));\n \n \t  GO_IF_LEGITIMATE_ADDRESS (mode, XEXP (mem_rtx, 0), try_post_inc);\n \n@@ -6196,8 +6195,7 @@ sh_expand_epilogue (bool sibcall_p)\n \t\t\t&& mem_rtx == NULL_RTX)\n \t\t    || reg == PR_REG || SPECIAL_REGISTER_P (reg)))\n \t      {\n-\t\tpost_inc = gen_rtx_MEM (mode,\n-\t\t\t\t\tgen_rtx_POST_INC (Pmode, r0));\n+\t\tpost_inc = gen_frame_mem (mode, gen_rtx_POST_INC (Pmode, r0));\n \n \t\tGO_IF_LEGITIMATE_ADDRESS (mode, XEXP (post_inc, 0),\n \t\t\t\t\t  post_inc_ok);\n@@ -6243,12 +6241,12 @@ sh_expand_epilogue (bool sibcall_p)\n \t      offset_in_r0 += GET_MODE_SIZE (mode);\n \t    }\n \t  else if (sp_in_r0)\n-\t    mem_rtx = gen_rtx_MEM (mode, r0);\n+\t    mem_rtx = gen_frame_mem (mode, r0);\n \t  else\n-\t    mem_rtx = gen_rtx_MEM (mode,\n-\t\t\t\t   gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t\t stack_pointer_rtx,\n-\t\t\t\t\t\t r0));\n+\t    mem_rtx = gen_frame_mem (mode,\n+\t\t\t\t     gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t   stack_pointer_rtx,\n+\t\t\t\t\t\t   r0));\n \n \t  gcc_assert ((reg != PR_REG && !SPECIAL_REGISTER_P (reg))\n \t\t      || mem_rtx == post_inc);\n@@ -6408,7 +6406,7 @@ sh_set_return_address (rtx ra, rtx tmp)\n   emit_insn (GEN_MOV (tmp, GEN_INT (pr_offset)));\n   emit_insn (GEN_ADD3 (tmp, tmp, hard_frame_pointer_rtx));\n \n-  tmp = gen_rtx_MEM (Pmode, tmp);\n+  tmp = gen_frame_mem (Pmode, tmp);\n   emit_insn (GEN_MOV (tmp, ra));\n }\n \n@@ -6485,8 +6483,7 @@ sh_builtin_saveregs (void)\n   bufsize = (n_intregs * UNITS_PER_WORD) + (n_floatregs * UNITS_PER_WORD);\n \n   if (TARGET_SHMEDIA)\n-    regbuf = gen_rtx_MEM (BLKmode,\n-\t\t\t  gen_rtx_REG (Pmode, ARG_POINTER_REGNUM));\n+    regbuf = gen_frame_mem (BLKmode, gen_rtx_REG (Pmode, ARG_POINTER_REGNUM));\n   else if (n_floatregs & 1)\n     {\n       rtx addr;\n@@ -6542,17 +6539,15 @@ sh_builtin_saveregs (void)\n \t{\n \t  emit_insn (gen_addsi3 (fpregs, fpregs,\n \t\t\t\t GEN_INT (-2 * UNITS_PER_WORD)));\n-\t  mem = gen_rtx_MEM (DFmode, fpregs);\n-\t  set_mem_alias_set (mem, alias_set);\n+\t  mem = change_address (regbuf, DFmode, fpregs);\n \t  emit_move_insn (mem,\n \t\t\t  gen_rtx_REG (DFmode, BASE_ARG_REG (DFmode) + regno));\n \t}\n       regno = first_floatreg;\n       if (regno & 1)\n \t{\n \t  emit_insn (gen_addsi3 (fpregs, fpregs, GEN_INT (-UNITS_PER_WORD)));\n-\t  mem = gen_rtx_MEM (SFmode, fpregs);\n-\t  set_mem_alias_set (mem, alias_set);\n+\t  mem = change_address (regbuf, SFmode, fpregs);\n \t  emit_move_insn (mem,\n \t\t\t  gen_rtx_REG (SFmode, BASE_ARG_REG (SFmode) + regno\n \t\t\t\t\t\t- (TARGET_LITTLE_ENDIAN != 0)));\n@@ -6564,8 +6559,7 @@ sh_builtin_saveregs (void)\n         rtx mem;\n \n \temit_insn (gen_addsi3 (fpregs, fpregs, GEN_INT (-UNITS_PER_WORD)));\n-\tmem = gen_rtx_MEM (SFmode, fpregs);\n-\tset_mem_alias_set (mem, alias_set);\n+\tmem = change_address (regbuf, SFmode, fpregs);\n \temit_move_insn (mem,\n \t\t\tgen_rtx_REG (SFmode, BASE_ARG_REG (SFmode) + regno));\n       }\n@@ -8502,7 +8496,7 @@ sh_allocate_initial_value (rtx hard_reg)\n \t\t    || current_function_has_nonlocal_label)))\n \tx = hard_reg;\n       else\n-\tx = gen_rtx_MEM (Pmode, return_address_pointer_rtx);\n+\tx = gen_frame_mem (Pmode, return_address_pointer_rtx);\n     }\n   else\n     x = NULL_RTX;\n@@ -8896,6 +8890,8 @@ sh_ms_bitfield_layout_p (tree record_type ATTRIBUTE_UNUSED)\n void\n sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n {\n+  rtx tramp_mem = gen_frame_mem (BLKmode, tramp);\n+\n   if (TARGET_SHMEDIA64)\n     {\n       rtx tramp_templ;\n@@ -8924,34 +8920,32 @@ sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n \t  insn = gen_rtx_IOR (DImode, insn, gen_int_mode (0xec000010, SImode));\n \t  insn = force_operand (insn, NULL_RTX);\n \t  insn = gen_lowpart (SImode, insn);\n-\t  emit_move_insn (gen_rtx_MEM (SImode, tramp), insn);\n+\t  emit_move_insn (change_address (tramp_mem, SImode, NULL_RTX), insn);\n \t  insn = gen_rtx_LSHIFTRT (DImode, fnaddr, GEN_INT (38));\n \t  insn = gen_rtx_AND (DImode, insn, mask);\n \t  insn = force_operand (gen_rtx_IOR (DImode, movi1, insn), NULL_RTX);\n \t  insn = gen_lowpart (SImode, insn);\n-\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 4)), insn);\n+\t  emit_move_insn (adjust_address (tramp_mem, SImode, 4), insn);\n \t  insn = gen_rtx_LSHIFTRT (DImode, fnaddr, GEN_INT (22));\n \t  insn = gen_rtx_AND (DImode, insn, mask);\n \t  insn = force_operand (gen_rtx_IOR (DImode, shori1, insn), NULL_RTX);\n \t  insn = gen_lowpart (SImode, insn);\n-\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 8)), insn);\n+\t  emit_move_insn (adjust_address (tramp_mem, SImode, 8), insn);\n \t  insn = gen_rtx_LSHIFTRT (DImode, fnaddr, GEN_INT (6));\n \t  insn = gen_rtx_AND (DImode, insn, mask);\n \t  insn = force_operand (gen_rtx_IOR (DImode, shori1, insn), NULL_RTX);\n \t  insn = gen_lowpart (SImode, insn);\n-\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 12)),\n-\t\t\t  insn);\n+\t  emit_move_insn (adjust_address (tramp_mem, SImode, 12), insn);\n \t  insn = gen_rtx_ASHIFT (DImode, fnaddr, GEN_INT (10));\n \t  insn = gen_rtx_AND (DImode, insn, mask);\n \t  insn = force_operand (gen_rtx_IOR (DImode, shori1, insn), NULL_RTX);\n \t  insn = gen_lowpart (SImode, insn);\n-\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 16)),\n-\t\t\t  insn);\n-\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 20)),\n+\t  emit_move_insn (adjust_address (tramp_mem, SImode, 16), insn);\n+\t  emit_move_insn (adjust_address (tramp_mem, SImode, 20),\n \t\t\t  GEN_INT (0x6bf10600));\n-\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 24)),\n+\t  emit_move_insn (adjust_address (tramp_mem, SImode, 24),\n \t\t\t  GEN_INT (0x4415fc10));\n-\t  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 28)),\n+\t  emit_move_insn (adjust_address (tramp_mem, SImode, 28),\n \t\t\t  GEN_INT (0x4401fff0));\n \t  emit_insn (gen_ic_invalidate_line (tramp));\n \t  return;\n@@ -8960,18 +8954,15 @@ sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n       fixed_len = TRAMPOLINE_SIZE - 2 * GET_MODE_SIZE (Pmode);\n \n       tramp_templ = gen_datalabel_ref (tramp_templ);\n-      dst = gen_rtx_MEM (BLKmode, tramp);\n-      src = gen_rtx_MEM (BLKmode, tramp_templ);\n+      dst = tramp_mem;\n+      src = gen_const_mem (BLKmode, tramp_templ);\n       set_mem_align (dst, 256);\n       set_mem_align (src, 64);\n       emit_block_move (dst, src, GEN_INT (fixed_len), BLOCK_OP_NORMAL);\n \n-      emit_move_insn (gen_rtx_MEM (Pmode, plus_constant (tramp,\tfixed_len)),\n-\t\t      fnaddr);\n-      emit_move_insn (gen_rtx_MEM (Pmode,\n-\t\t\t\t   plus_constant (tramp,\n-\t\t\t\t\t\t  fixed_len\n-\t\t\t\t\t\t  + GET_MODE_SIZE (Pmode))),\n+      emit_move_insn (adjust_address (tramp_mem, Pmode, fixed_len), fnaddr);\n+      emit_move_insn (adjust_address (tramp_mem, Pmode,\n+\t\t\t\t      fixed_len + GET_MODE_SIZE (Pmode)),\n \t\t      cxt);\n       emit_insn (gen_ic_invalidate_line (tramp));\n       return;\n@@ -8999,7 +8990,7 @@ sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n       emit_insn (gen_rotrdi3_mextr (quad0, quad0,\n \t\t\t\t    GEN_INT (TARGET_LITTLE_ENDIAN ? 24 : 56)));\n       emit_insn (gen_ashldi3_media (quad0, quad0, const2_rtx));\n-      emit_move_insn (gen_rtx_MEM (DImode, tramp), quad0);\n+      emit_move_insn (change_address (tramp_mem, DImode, NULL_RTX), quad0);\n       emit_insn (gen_mshflo_w_x (gen_rtx_SUBREG (V4HImode, cxtload, 0),\n \t\t\t\t gen_rtx_SUBREG (V2HImode, cxt, 0),\n \t\t\t\t movishori));\n@@ -9016,8 +9007,8 @@ sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n \t  emit_insn (gen_mextr4 (quad1, cxtload, ptabs));\n \t  emit_insn (gen_mshflo_l_di (quad2, blink, cxtload));\n \t}\n-      emit_move_insn (gen_rtx_MEM (DImode, plus_constant (tramp, 8)), quad1);\n-      emit_move_insn (gen_rtx_MEM (DImode, plus_constant (tramp, 16)), quad2);\n+      emit_move_insn (adjust_address (tramp_mem, DImode, 8), quad1);\n+      emit_move_insn (adjust_address (tramp_mem, DImode, 16), quad2);\n       emit_insn (gen_ic_invalidate_line (tramp));\n       return;\n     }\n@@ -9026,16 +9017,14 @@ sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n       emit_insn (gen_initialize_trampoline (tramp, cxt, fnaddr));\n       return;\n     }\n-  emit_move_insn (gen_rtx_MEM (SImode, tramp),\n+  emit_move_insn (change_address (tramp_mem, SImode, NULL_RTX),\n \t\t  gen_int_mode (TARGET_LITTLE_ENDIAN ? 0xd301d202 : 0xd202d301,\n \t\t\t\tSImode));\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 4)),\n+  emit_move_insn (adjust_address (tramp_mem, SImode, 4),\n \t\t  gen_int_mode (TARGET_LITTLE_ENDIAN ? 0x0009422b : 0x422b0009,\n \t\t\t\tSImode));\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 8)),\n-\t\t  cxt);\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 12)),\n-\t\t  fnaddr);\n+  emit_move_insn (adjust_address (tramp_mem, SImode, 8), cxt);\n+  emit_move_insn (adjust_address (tramp_mem, SImode, 12), fnaddr);\n   if (TARGET_HARVARD)\n     {\n       if (TARGET_USERMODE)\n@@ -9557,7 +9546,7 @@ static rtx emit_load_ptr (rtx, rtx);\n static rtx\n emit_load_ptr (rtx reg, rtx addr)\n {\n-  rtx mem = gen_rtx_MEM (ptr_mode, addr);\n+  rtx mem = gen_const_mem (ptr_mode, addr);\n \n   if (Pmode != ptr_mode)\n     mem = gen_rtx_SIGN_EXTEND (Pmode, mem);\n@@ -9864,7 +9853,7 @@ sh_get_pr_initial_val (void)\n       && ((current_function_args_info.call_cookie\n \t   & ~ CALL_COOKIE_RET_TRAMP (1))\n \t  || current_function_has_nonlocal_label))\n-    return gen_rtx_MEM (SImode, return_address_pointer_rtx);\n+    return gen_frame_mem (SImode, return_address_pointer_rtx);\n \n   /* If we haven't finished rtl generation, there might be a nonlocal label\n      that we haven't seen yet."}, {"sha": "4662b5327df754ca4a79abfdc1213e8dac41a567", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d38024e58401aed46f98a543a06d6fc926502a/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d38024e58401aed46f98a543a06d6fc926502a/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=57d38024e58401aed46f98a543a06d6fc926502a", "patch": "@@ -2169,11 +2169,11 @@ norm32: r25\n   rtx scratch1 = operands[5];\n   rtx mem;\n \n-  mem = gen_rtx_MEM (QImode, gen_rtx_PLUS (DImode, tab_base, tab_ix));\n+  mem = gen_const_mem (QImode, gen_rtx_PLUS (DImode, tab_base, tab_ix));\n   emit_insn (gen_zero_extendqidi2 (scratch0, mem));\n   emit_insn (gen_ashldi3_media (scratch1, tab_ix, GEN_INT (1)));\n   emit_insn (gen_mulsidi3_media (scratch0, norm32, scratch0_si));\n-  mem = gen_rtx_MEM (HImode, gen_rtx_PLUS (DImode, tab_base, scratch1));\n+  mem = gen_const_mem (HImode, gen_rtx_PLUS (DImode, tab_base, scratch1));\n   emit_insn (gen_extendhidi2 (scratch1, mem));\n   emit_insn (gen_ashrdi3_media (scratch0, scratch0, GEN_INT (24)));\n   emit_insn (gen_subdisi3_media (inv0, scratch1, scratch0));\n@@ -4697,7 +4697,7 @@ label:\n   \"TARGET_SH2E\"\n   \"\n {\n-  rtx insn = emit_insn (gen_fpu_switch (gen_rtx_MEM (PSImode,\n+  rtx insn = emit_insn (gen_fpu_switch (gen_frame_mem (PSImode,\n \t\t\t\t\t\t gen_rtx_PRE_DEC (Pmode,\n \t\t\t\t\t\t\t  stack_pointer_rtx)),\n \t\t\t\t\tget_fpscr_rtx ()));\n@@ -4711,7 +4711,7 @@ label:\n   \"\n {\n   rtx insn = emit_insn (gen_fpu_switch (get_fpscr_rtx (),\n-\t\t\t\t\tgen_rtx_MEM (PSImode,\n+\t\t\t\t\tgen_frame_mem (PSImode,\n \t\t\t\t\t\t gen_rtx_POST_INC (Pmode,\n \t\t\t\t\t\t\t  stack_pointer_rtx))));\n   REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, NULL_RTX);\n@@ -4834,7 +4834,7 @@ label:\n   \"\n {\n   if (TARGET_SHCOMPACT && current_function_has_nonlocal_label)\n-    operands[1] = gen_rtx_MEM (SImode, return_address_pointer_rtx);\n+    operands[1] = gen_frame_mem (SImode, return_address_pointer_rtx);\n }\")\n \n ;; The '?'s in the following constraints may not reflect the time taken\n@@ -5736,17 +5736,19 @@ label:\n     {\n       emit_move_insn (stack_pointer_rtx,\n \t\t      plus_constant (stack_pointer_rtx, -8));\n-      tos = gen_rtx_MEM (DFmode, stack_pointer_rtx);\n+      tos = gen_tmp_stack_mem (DFmode, stack_pointer_rtx);\n     }\n   else\n-    tos = gen_rtx_MEM (DFmode, gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx));\n+    tos = gen_tmp_stack_mem (DFmode,\n+\t\t\t     gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx));\n   insn = emit_insn (gen_movdf_i4 (tos, operands[1], operands[2]));\n   if (! (TARGET_SH5 && true_regnum (operands[1]) < 16))\n     REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, NULL_RTX);\n   if (TARGET_SH5 && true_regnum (operands[0]) < 16)\n-    tos = gen_rtx_MEM (DFmode, stack_pointer_rtx);\n+    tos = gen_tmp_stack_mem (DFmode, stack_pointer_rtx);\n   else\n-    tos = gen_rtx_MEM (DFmode, gen_rtx_POST_INC (Pmode, stack_pointer_rtx));\n+    tos = gen_tmp_stack_mem (DFmode,\n+\t\t\t     gen_rtx_POST_INC (Pmode, stack_pointer_rtx));\n   insn = emit_insn (gen_movdf_i4 (operands[0], tos, operands[2]));\n   if (TARGET_SH5 && true_regnum (operands[0]) < 16)\n     emit_move_insn (stack_pointer_rtx, plus_constant (stack_pointer_rtx, 8));\n@@ -5902,15 +5904,16 @@ label:\n {\n   int regno = true_regnum (operands[0]);\n   rtx insn;\n-  rtx mem2 = gen_rtx_MEM (SFmode, gen_rtx_POST_INC (Pmode, operands[1]));\n-\n+  rtx mem = SET_SRC (XVECEXP (PATTERN (curr_insn), 0, 0));\n+  rtx mem2\n+    = change_address (mem, SFmode, gen_rtx_POST_INC (Pmode, operands[1]));\n   insn = emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode,\n \t\t\t\t\t   regno + !! TARGET_LITTLE_ENDIAN),\n \t\t\t\t  mem2, operands[2]));\n   REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, operands[1], NULL_RTX);\n   insn = emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode,\n-\t\t\t\t\t   regno + ! TARGET_LITTLE_ENDIAN),\n-\t\t\t\t  gen_rtx_MEM (SFmode, operands[1]),\n+\t\t\t\t\t       regno + ! TARGET_LITTLE_ENDIAN),\n+\t\t\t\t  change_address (mem, SFmode, NULL_RTX),\n \t\t\t\t  operands[2]));\n   DONE;\n }\")\n@@ -5927,11 +5930,10 @@ label:\n {\n   int regno = true_regnum (operands[0]);\n   rtx addr, insn, adjust = NULL_RTX;\n-  rtx mem2 = copy_rtx (operands[1]);\n+  rtx mem2 = change_address (operands[1], SFmode, NULL_RTX);\n   rtx reg0 = gen_rtx_REG (SFmode, regno + !! TARGET_LITTLE_ENDIAN);\n   rtx reg1 = gen_rtx_REG (SFmode, regno + ! TARGET_LITTLE_ENDIAN);\n \n-  PUT_MODE (mem2, SFmode);\n   operands[1] = copy_rtx (mem2);\n   addr = XEXP (mem2, 0);\n   if (GET_CODE (addr) != POST_INC)\n@@ -6226,16 +6228,14 @@ label:\n       rtx x, y;\n \n       if (GET_CODE (operands[0]) == MEM)\n-\tx = gen_rtx_MEM (V2SFmode,\n-\t\t\t plus_constant (XEXP (operands[0], 0),\n-\t\t\t\t\ti * GET_MODE_SIZE (V2SFmode)));\n+\tx = adjust_address (operands[0], V2SFmode,\n+\t\t\t    i * GET_MODE_SIZE (V2SFmode));\n       else\n \tx = simplify_gen_subreg (V2SFmode, operands[0], V4SFmode, i * 8);\n \n       if (GET_CODE (operands[1]) == MEM)\n-\ty = gen_rtx_MEM (V2SFmode,\n-\t\t\t plus_constant (XEXP (operands[1], 0),\n-\t\t\t\t\ti * GET_MODE_SIZE (V2SFmode)));\n+\ty = adjust_address (operands[1], V2SFmode,\n+\t\t\t    i * GET_MODE_SIZE (V2SFmode));\n       else\n \ty = simplify_gen_subreg (V2SFmode, operands[1], V4SFmode, i * 8);\n \n@@ -6272,19 +6272,17 @@ label:\n       rtx x,y;\n \n       if (GET_CODE (operands[0]) == MEM)\n-\tx = gen_rtx_MEM (V2SFmode,\n-\t\t\t plus_constant (XEXP (operands[0], 0),\n-\t\t\t\t\ti * GET_MODE_SIZE (V2SFmode)));\n+\tx = adjust_address (operands[0], V2SFmode,\n+\t\t\t    i * GET_MODE_SIZE (V2SFmode));\n       else\n \t{\n \t  x = gen_rtx_SUBREG (V2SFmode, operands[0], i * 8);\n \t  alter_subreg (&x);\n \t}\n \n       if (GET_CODE (operands[1]) == MEM)\n-\ty = gen_rtx_MEM (V2SFmode,\n-\t\t\t plus_constant (XEXP (operands[1], 0),\n-\t\t\t\t\ti * GET_MODE_SIZE (V2SFmode)));\n+\ty = adjust_address (operands[1], V2SFmode,\n+\t\t\t    i * GET_MODE_SIZE (V2SFmode));\n       else\n \t{\n \t  y = gen_rtx_SUBREG (V2SFmode, operands[1], i * 8);\n@@ -8252,7 +8250,7 @@ label:\n   \"\"\n   \"\n {\n-  rtx insn;\n+  rtx insn, mem;\n \n   operands[2] = no_new_pseudos ? operands[0] : gen_reg_rtx (Pmode);\n   operands[3] = no_new_pseudos ? operands[0] : gen_reg_rtx (Pmode);\n@@ -8283,7 +8281,11 @@ label:\n \t\t\t\t\t     operands[2],\n \t\t\t\t\t     gen_rtx_REG (Pmode, PIC_REG)));\n \n-  insn = emit_move_insn (operands[0], gen_rtx_MEM (Pmode, operands[3]));\n+  /* N.B. This is not constant for a GOTPLT relocation.  */\n+  mem = gen_rtx_MEM (Pmode, operands[3]);\n+  MEM_NOTRAP_P (mem) = 1;\n+  /* ??? Should we have a special alias set for the GOT?  */\n+  insn = emit_move_insn (operands[0], mem);\n \n   REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, XVECEXP (XEXP (operands[1],\n \t\t\t\t\t\t\t\t  0), 0, 0),\n@@ -9827,10 +9829,11 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_dup 0) (match_dup 0))]\n   \"\n {\n-  rtx insn = emit_insn (gen_fpu_switch (get_fpscr_rtx (),\n-\t\t\t\t\tgen_rtx_MEM (PSImode,\n-\t\t\t\t\t\t gen_rtx_POST_INC (Pmode,\n-\t\t\t\t\t\t\t  operands[0]))));\n+  rtx mem, insn;\n+\n+  mem = SET_SRC (PATTERN (curr_insn));\n+  mem = change_address (mem, PSImode, gen_rtx_POST_INC (Pmode, operands[0]));\n+  insn = emit_insn (gen_fpu_switch (get_fpscr_rtx (), mem));\n   REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, operands[0], NULL_RTX);\n }\")\n \n@@ -9841,10 +9844,11 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_dup 0) (plus:SI (match_dup 0) (const_int -4)))]\n   \"\n {\n-  rtx insn = emit_insn (gen_fpu_switch (get_fpscr_rtx (),\n-\t\t\t\t\tgen_rtx_MEM (PSImode,\n-\t\t\t\t\t\t gen_rtx_POST_INC (Pmode,\n-\t\t\t\t\t\t\t  operands[0]))));\n+  rtx mem, insn;\n+\n+  mem = SET_SRC (PATTERN (curr_insn));\n+  mem = change_address (mem, PSImode, gen_rtx_POST_INC (Pmode, operands[0]));\n+  insn = emit_insn (gen_fpu_switch (get_fpscr_rtx (), mem));\n   REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, operands[0], NULL_RTX);\n }\")\n "}]}