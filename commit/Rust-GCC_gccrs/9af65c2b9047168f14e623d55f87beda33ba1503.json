{"sha": "9af65c2b9047168f14e623d55f87beda33ba1503", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFmNjVjMmI5MDQ3MTY4ZjE0ZTYyM2Q1NWY4N2JlZGEzM2JhMTUwMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-05T23:05:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-05T23:05:11Z"}, "message": "libstdc++: Reduce uses of std::numeric_limits\n\nThis avoids unnecessary instantiations of std::numeric_limits or\ninclusion of <limits> when a more lightweight alternative would work.\nSome uses can be replaced with __gnu_cxx::__int_traits and some can just\nuse size_t(-1) directly where SIZE_MAX is needed.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/regex.h: Use __int_traits<int> instead of\n\tstd::numeric_limits<int>.\n\t* include/bits/uniform_int_dist.h: Use __int_traits<T>::__max\n\tinstead of std::numeric_limits<T>::max().\n\t* include/bits/hashtable_policy.h: Use size_t(-1) instead of\n\tstd::numeric_limits<size_t>::max().\n\t* include/std/regex: Include <ext/numeric_traits.h>.\n\t* include/std/string_view: Use typedef for __int_traits<int>.\n\t* src/c++11/hashtable_c++0x.cc: Use size_t(-1) instead of\n\tstd::numeric_limits<size_t>::max().\n\t* testsuite/std/ranges/iota/96042.cc: Include <limits>.\n\t* testsuite/std/ranges/iota/difference_type.cc: Likewise.\n\t* testsuite/std/ranges/subrange/96042.cc: Likewise.", "tree": {"sha": "bed8b420d0dd9cbb74392afae4b379de69c79d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bed8b420d0dd9cbb74392afae4b379de69c79d4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9af65c2b9047168f14e623d55f87beda33ba1503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af65c2b9047168f14e623d55f87beda33ba1503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9af65c2b9047168f14e623d55f87beda33ba1503", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af65c2b9047168f14e623d55f87beda33ba1503/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66a032079309069fec085fff2a014ac217ce5781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66a032079309069fec085fff2a014ac217ce5781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66a032079309069fec085fff2a014ac217ce5781"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "31ff4f16579e6ebbfd3db091b40f0d76a6d43e8c", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=9af65c2b9047168f14e623d55f87beda33ba1503", "patch": "@@ -32,8 +32,8 @@\n #define _HASHTABLE_POLICY_H 1\n \n #include <tuple>\t\t// for std::tuple, std::forward_as_tuple\n-#include <limits>\t\t// for std::numeric_limits\n #include <bits/stl_algobase.h>\t// for std::min, std::is_permutation.\n+#include <ext/numeric_traits.h>\t// for __gnu_cxx::__int_traits\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -506,14 +506,15 @@ namespace __detail\n   inline std::size_t\n   __clp2(std::size_t __n) noexcept\n   {\n+    using __gnu_cxx::__int_traits;\n     // Equivalent to return __n ? std::bit_ceil(__n) : 0;\n     if (__n < 2)\n       return __n;\n     const unsigned __lz = sizeof(size_t) > sizeof(long)\n       ? __builtin_clzll(__n - 1ull)\n       : __builtin_clzl(__n - 1ul);\n     // Doing two shifts avoids undefined behaviour when __lz == 0.\n-    return (size_t(1) << (numeric_limits<size_t>::digits - __lz - 1)) << 1;\n+    return (size_t(1) << (__int_traits<size_t>::__digits - __lz - 1)) << 1;\n   }\n \n   /// Rehash policy providing power of 2 bucket numbers. Avoids modulo\n@@ -556,7 +557,7 @@ namespace __detail\n \t// Set next resize to the max value so that we never try to rehash again\n \t// as we already reach the biggest possible bucket number.\n \t// Note that it might result in max_load_factor not being respected.\n-\t_M_next_resize = numeric_limits<size_t>::max();\n+\t_M_next_resize = size_t(-1);\n       else\n \t_M_next_resize\n \t  = __builtin_floorl(__res * (long double)_M_max_load_factor);"}, {"sha": "15e4289bf95e36fc190ae64c7c81171d88a4b0ca", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=9af65c2b9047168f14e623d55f87beda33ba1503", "patch": "@@ -973,11 +973,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  if (const size_t __n = std::min(_M_len, __s._M_len))\n \t    if (int __ret = traits_type::compare(_M_data, __s._M_data, __n))\n \t      return __ret;\n+\t  using __limits = __gnu_cxx::__int_traits<int>;\n \t  const difference_type __diff = _M_len - __s._M_len;\n-\t  if (__diff > std::numeric_limits<int>::max())\n-\t    return std::numeric_limits<int>::max();\n-\t  if (__diff < std::numeric_limits<int>::min())\n-\t    return std::numeric_limits<int>::min();\n+\t  if (__diff > __limits::__max)\n+\t    return __limits::__max;\n+\t  if (__diff < __limits::__min)\n+\t    return __limits::__min;\n \t  return static_cast<int>(__diff);\n \t}\n "}, {"sha": "6e1e3d5fc5fe8f7f22e62a85b35dc8bfa4743372", "filename": "libstdc++-v3/include/bits/uniform_int_dist.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h?ref=9af65c2b9047168f14e623d55f87beda33ba1503", "patch": "@@ -32,7 +32,7 @@\n #define _GLIBCXX_BITS_UNIFORM_INT_DIST_H\n \n #include <type_traits>\n-#include <limits>\n+#include <ext/numeric_traits.h>\n #if __cplusplus > 201703L\n # include <concepts>\n #endif\n@@ -88,7 +88,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \texplicit\n \tparam_type(_IntType __a,\n-\t\t   _IntType __b = numeric_limits<_IntType>::max())\n+\t\t   _IntType __b = __gnu_cxx::__int_traits<_IntType>::__max)\n \t: _M_a(__a), _M_b(__b)\n \t{\n \t  __glibcxx_assert(_M_a <= _M_b);\n@@ -126,7 +126,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       explicit\n       uniform_int_distribution(_IntType __a,\n-\t\t\t       _IntType __b = numeric_limits<_IntType>::max())\n+\t\t\t       _IntType __b\n+\t\t\t\t = __gnu_cxx::__int_traits<_IntType>::__max)\n       : _M_param(__a, __b)\n       { }\n "}, {"sha": "43ee1aee616284e72ebc744a14d2c86d66881d55", "filename": "libstdc++-v3/include/std/regex", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex?ref=9af65c2b9047168f14e623d55f87beda33ba1503", "patch": "@@ -53,6 +53,7 @@\n #include <cstring>\n \n #include <ext/aligned_buffer.h>\n+#include <ext/numeric_traits.h>\n #include <bits/std_function.h>\n #include <bits/regex_constants.h>\n #include <bits/regex_error.h>"}, {"sha": "656d06bf90e9addb2ea127962dba5dc961a37f9c", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=9af65c2b9047168f14e623d55f87beda33ba1503", "patch": "@@ -459,11 +459,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr int\n       _S_compare(size_type __n1, size_type __n2) noexcept\n       {\n+\tusing __limits = __gnu_cxx::__int_traits<int>;\n \tconst difference_type __diff = __n1 - __n2;\n-\tif (__diff > __gnu_cxx::__int_traits<int>::__max)\n-\t  return __gnu_cxx::__int_traits<int>::__max;\n-\tif (__diff < __gnu_cxx::__int_traits<int>::__min)\n-\t  return __gnu_cxx::__int_traits<int>::__min;\n+\tif (__diff > __limits::__max)\n+\t  return __limits::__max;\n+\tif (__diff < __limits::__min)\n+\t  return __limits::__min;\n \treturn static_cast<int>(__diff);\n       }\n "}, {"sha": "62762f34cafc0a65b57e0a0dd22d2a0e471e6dd9", "filename": "libstdc++-v3/src/c++11/hashtable_c++0x.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc?ref=9af65c2b9047168f14e623d55f87beda33ba1503", "patch": "@@ -78,7 +78,7 @@ namespace __detail\n       // Set next resize to the max value so that we never try to rehash again\n       // as we already reach the biggest possible bucket number.\n       // Note that it might result in max_load_factor not being respected.\n-      _M_next_resize = numeric_limits<size_t>::max();\n+      _M_next_resize = size_t(-1);\n     else\n       _M_next_resize =\n \t__builtin_floorl(*__next_bkt * (long double)_M_max_load_factor);"}, {"sha": "b2374ff9397a1b1d8e3d462154e4cdfcfb4d51e5", "filename": "libstdc++-v3/testsuite/std/ranges/iota/96042.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F96042.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F96042.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2F96042.cc?ref=9af65c2b9047168f14e623d55f87beda33ba1503", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <ranges>\n+#include <limits>\n \n void\n test01()"}, {"sha": "c6a06a27d66902e4dc958fd6906d87829c0fbd9d", "filename": "libstdc++-v3/testsuite/std/ranges/iota/difference_type.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fdifference_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fdifference_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fdifference_type.cc?ref=9af65c2b9047168f14e623d55f87beda33ba1503", "patch": "@@ -19,6 +19,7 @@\n // { dg-do run { target c++2a } }\n \n #include <ranges>\n+#include <limits>\n #include <testsuite_hooks.h>\n \n void"}, {"sha": "8cf9ba8ad760d1aea0cf36d9cb157cd9f638cee5", "filename": "libstdc++-v3/testsuite/std/ranges/subrange/96042.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2F96042.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af65c2b9047168f14e623d55f87beda33ba1503/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2F96042.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2F96042.cc?ref=9af65c2b9047168f14e623d55f87beda33ba1503", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <ranges>\n+#include <limits>\n \n constexpr bool\n test01()"}]}