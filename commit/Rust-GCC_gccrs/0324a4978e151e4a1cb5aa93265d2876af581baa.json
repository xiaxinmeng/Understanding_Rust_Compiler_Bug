{"sha": "0324a4978e151e4a1cb5aa93265d2876af581baa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMyNGE0OTc4ZTE1MWU0YTFjYjVhYTkzMjY1ZDI4NzZhZjU4MWJhYQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-03-30T15:39:00Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-03-30T15:39:00Z"}, "message": "re PR fortran/89841 (improper descriptor information passed to C)\n\n2019-03-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/89841\n\t* trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Use the formal\n\targument attributes rather than those of the actual argument.\n\n\tPR fortran/89842\n\t* trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Call\n\t'set_dtype_for_unallocated' for any type of arrayspec.\n\n2019-03-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/89841\n\t* gfortran.dg/ISO_Fortran_binding_1.f90: Change the interfaces\n\tfor c_deallocate, c_allocate and c_assumed_size so that the\n\tattributes of the array arguments are correct and are typed.\n\t* gfortran.dg/ISO_Fortran_binding_7.f90: New test.\n\t* gfortran.dg/ISO_Fortran_binding_7.c: Additional source.\n\n\tPR fortran/89842\n\t* gfortran.dg/ISO_Fortran_binding_8.f90: New test.\n\t* gfortran.dg/ISO_Fortran_binding_8.c: Additional source.\n\nFrom-SVN: r270037", "tree": {"sha": "ae9d1769c1ae90eb7bade550e0d0f829de2dc8bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae9d1769c1ae90eb7bade550e0d0f829de2dc8bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0324a4978e151e4a1cb5aa93265d2876af581baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0324a4978e151e4a1cb5aa93265d2876af581baa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0324a4978e151e4a1cb5aa93265d2876af581baa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0324a4978e151e4a1cb5aa93265d2876af581baa/comments", "author": null, "committer": null, "parents": [{"sha": "26b81a446f6e333bb5e80d40eb467260948ee79e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b81a446f6e333bb5e80d40eb467260948ee79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b81a446f6e333bb5e80d40eb467260948ee79e"}], "stats": {"total": 265, "additions": 259, "deletions": 6}, "files": [{"sha": "191451346f7c0f3e1c05316b12f4640f901f2587", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0324a4978e151e4a1cb5aa93265d2876af581baa", "patch": "@@ -1,3 +1,13 @@\n+2019-03-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/89841\n+\t* trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Use the formal\n+\targument attributes rather than those of the actual argument.\n+\n+\tPR fortran/89842\n+\t* trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Call\n+\t'set_dtype_for_unallocated' for any type of arrayspec.\n+\n 2019-03-27  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/85537"}, {"sha": "434c9898d89eccfffb2d1db986d183617d10379a", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=0324a4978e151e4a1cb5aa93265d2876af581baa", "patch": "@@ -4998,9 +4998,9 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n   attribute = 2;\n   if (!e->rank || gfc_get_full_arrayspec_from_expr (e))\n     {\n-      if (attr.pointer)\n+      if (fsym->attr.pointer)\n \tattribute = 0;\n-      else if (attr.allocatable)\n+      else if (fsym->attr.allocatable)\n \tattribute = 1;\n     }\n \n@@ -5021,7 +5021,6 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n \t need their dtype setting if they are argument associated with\n \t assumed rank dummies.  */\n       if (fsym && fsym->as\n-\t  && fsym->as->type == AS_ASSUMED_RANK\n \t  && (gfc_expr_attr (e).pointer\n \t      || gfc_expr_attr (e).allocatable))\n \tset_dtype_for_unallocated (parmse, e);"}, {"sha": "390ae076ac8ae3bd344397831ee0b6e0c85a0581", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0324a4978e151e4a1cb5aa93265d2876af581baa", "patch": "@@ -1,3 +1,16 @@\n+2019-03-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/89841\n+\t* gfortran.dg/ISO_Fortran_binding_1.f90: Change the interfaces\n+\tfor c_deallocate, c_allocate and c_assumed_size so that the\n+\tattributes of the array arguments are correct and are typed.\n+\t* gfortran.dg/ISO_Fortran_binding_7.f90: New test.\n+\t* gfortran.dg/ISO_Fortran_binding_7.c: Additional source.\n+\n+\tPR fortran/89842\n+\t* gfortran.dg/ISO_Fortran_binding_8.f90: New test.\n+\t* gfortran.dg/ISO_Fortran_binding_8.c: Additional source.\n+\n 2019-03-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/89866"}, {"sha": "d3a7b2b34c2654238899628f64f07524b3930497", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_1.f90?ref=0324a4978e151e4a1cb5aa93265d2876af581baa", "patch": "@@ -25,13 +25,13 @@ END FUNCTION elemental_mult\n     FUNCTION c_deallocate(a) BIND(C, NAME=\"deallocate_c\") RESULT(err)\n       USE, INTRINSIC :: ISO_C_BINDING\n       INTEGER(C_INT) :: err\n-      type(*), DIMENSION(..) :: a\n+      INTEGER(C_INT), DIMENSION(..), allocatable :: a\n     END FUNCTION c_deallocate\n \n     FUNCTION c_allocate(a, lower, upper) BIND(C, NAME=\"allocate_c\") RESULT(err)\n       USE, INTRINSIC :: ISO_C_BINDING\n       INTEGER(C_INT) :: err\n-      type(*), DIMENSION(..) :: a\n+      INTEGER(C_INT), DIMENSION(..), allocatable :: a\n       integer(C_INTPTR_T), DIMENSION(15) :: lower, upper\n     END FUNCTION c_allocate\n \n@@ -67,7 +67,7 @@ FUNCTION c_setpointer(a, lbounds) BIND(C, NAME=\"setpointer_c\") RESULT(err)\n       USE, INTRINSIC :: ISO_C_BINDING\n       INTEGER(C_INT) :: err\n       INTEGER(C_INT), dimension(2) :: lbounds\n-      type(*), DIMENSION(..) :: a\n+      INTEGER(C_INT), DIMENSION(..), pointer :: a\n     END FUNCTION c_setpointer\n \n     FUNCTION c_assumed_size(a) BIND(C, NAME=\"assumed_size_c\") RESULT(err)"}, {"sha": "d68428fce137ce25d6b1e80cb27906b79638848c", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_7.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_7.c?ref=0324a4978e151e4a1cb5aa93265d2876af581baa", "patch": "@@ -0,0 +1,102 @@\n+/* Test the fix for PR89841.  */\n+\n+/* Contributed by Reinhold Bader  <Bader@lrz.de> */\n+\n+#include \"../../../libgfortran/ISO_Fortran_binding.h\"\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+\n+typedef struct\n+  {\n+    int i;\n+    float r[2];\n+  } cstruct;\n+\n+\n+int Psuba(CFI_cdesc_t *this, CFI_cdesc_t *that, int Dcase) {\n+    int status = 0;\n+    cstruct *cu;\n+    float *ct;\n+    CFI_dim_t *dim;\n+    if (this->elem_len != sizeof(float))\n+      {\n+\tprintf(\"FAIL: Dcase %i - this->elem_len %i\\n\",Dcase, (int) this->elem_len);\n+\tstatus++;\n+      }\n+    if (this->type != CFI_type_float)\n+      {\n+\tprintf(\"FAIL: Dcase %i - this->type\\n\", Dcase);\n+\tstatus++;\n+      }\n+    if (this->rank != 2)\n+      {\n+\tprintf(\"FAIL: Dcase %i - this->rank %i\\n\",Dcase,this->rank);\n+\tstatus++;\n+      }\n+    if (this->attribute != CFI_attribute_other)\n+      {\n+\tprintf(\"FAIL: Dcase %i - this->attribute\\n\", Dcase);\n+\tstatus++;\n+      }\n+\n+    dim = this->dim;\n+    if (dim[0].lower_bound != 0 || dim[0].extent != 3) \n+      {\n+\tprintf(\"FAIL: Dcase %i - dim[0] %i %i %i\\n\",Dcase, (int) dim[0].lower_bound,\n+\t      (int)dim[0].extent,(int)dim[0].sm);\n+\tstatus++;\n+      }\n+    if (dim[1].lower_bound != 0 || dim[1].extent != 7)\n+      {\n+\tprintf(\"FAIL: Dcase %i - dim[1] %i %i %i\\n\",Dcase,(int) dim[1].lower_bound,\n+\t      (int) dim[1].extent,(int) dim[1].sm);\n+\tstatus++;\n+      }\n+\n+    if (that->elem_len != sizeof(cstruct))\n+      {\n+\tprintf(\"FAIL: Dcase %i - that->elem_len\\n\", Dcase);\n+\tstatus++;\n+      }\n+    if (that->type != CFI_type_struct)\n+      {\n+\tprintf(\"FAIL: Dcase %i - that->type\\n\",Dcase);\n+\tstatus++;\n+      }\n+     if (that->rank != 1)\n+      {\n+\tprintf(\"FAIL: Dcase %i - that->rank\\n\", Dcase);\n+\tstatus++;\n+      }\n+    if (that->attribute != CFI_attribute_other)\n+      {\n+\tprintf(\"FAIL: Dcase %i - that->attribute %i\\n\",Dcase,that->attribute);\n+\tstatus++;\n+      }\n+\n+    dim = that->dim;\n+    if (dim[0].lower_bound != 0 || dim[0].extent != 1) \n+      {\n+\tprintf(\"FAIL: Dcase %i - dim[0] %i %i\\n\",Dcase,(int)dim[0].lower_bound,dim[0].extent);\n+\tstatus++;\n+      }\n+\n+    cu = (cstruct *) ((CFI_cdesc_t *) that)->base_addr;\n+    if (cu->i != 4 || fabs(cu->r[1] -  2.2) > 1.0e-6)\n+      {\n+\tprintf(\"FAIL: Dcase %i - value of that %i %f %f\\n\",Dcase,cu->i,cu->r[0],cu->r[1]);\n+\tstatus++;\n+      } \n+\n+    ct = (float *) ((CFI_cdesc_t *) this)->base_addr;\n+    if ( fabs(ct[5] +  2.0) > 1.0e-6)\n+      {\n+\tprintf(\"FAIL: Dcase %i - value of this %f\\n\",Dcase,ct[5]);\n+\tstatus++;\n+      }\n+ \n+    return status;\n+}\n+\n+"}, {"sha": "296cad4dd18e9d37af1700ded03daa4c16e12db6", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_7.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_7.f90?ref=0324a4978e151e4a1cb5aa93265d2876af581baa", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run { target c99_runtime } }\n+! { dg-additional-sources ISO_Fortran_binding_7.c }\n+!\n+! Test the fix for PR89841.\n+!\n+! Contributed by Reinhold Bader  <Bader@lrz.de>\n+!\n+program assumed_shape_01\n+  use, intrinsic :: iso_c_binding\n+  implicit none\n+  type, bind(c) :: cstruct\n+     integer(c_int) :: i\n+     real(c_float) :: r(2)\n+  end type cstruct\n+  interface\n+     function psub(this, that, case) bind(c, name='Psuba') result(status)\n+       import :: c_float, c_int, cstruct\n+       real(c_float) :: this(:,:)\n+       type(cstruct) :: that(:)\n+       integer(c_int), value :: case\n+       integer(c_int) :: status\n+     end function psub\n+  end interface\n+\n+  real(c_float) :: t(3,7)\n+  type(cstruct), pointer :: u(:)\n+  type(cstruct), allocatable :: v(:)\n+  integer(c_int) :: st\n+\n+  allocate(u(1), source=[cstruct( 4, [1.1,2.2] ) ])\n+  allocate(v(1), source=[cstruct( 4, [1.1,2.2] ) ])\n+  t = 0.0\n+  t(3,2) = -2.0\n+  st = psub(t, u, 1)\n+  if (st .ne. 0) stop 1\n+  st = psub(t, v, 2)\n+  if (st .ne. 0) stop 2\n+  deallocate (u)\n+  deallocate (v)\n+\n+end program assumed_shape_01\n+"}, {"sha": "dc80cd332a18649585d0bbc313012164ea913efa", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_8.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_8.c?ref=0324a4978e151e4a1cb5aa93265d2876af581baa", "patch": "@@ -0,0 +1,37 @@\n+/* Test the fix for PR89841.  */\n+\n+/* Contributed by Reinhold Bader  <Bader@lrz.de> */\n+\n+#include \"../../../libgfortran/ISO_Fortran_binding.h\"\n+#include <stdio.h>\n+\n+float Cxgl[] = { 1.1, 2.3, 5.1, 4.2 };\n+\n+void globalp(CFI_cdesc_t *this)\n+{\n+  int i, status;\n+  float *pt;\n+  CFI_index_t lb[] = { 3 };\n+  CFI_index_t ub[] = { 6 };\n+  \n+  if (this->base_addr == NULL)\n+    {\n+      status = CFI_allocate(this, lb, ub, 0);\n+    }\n+  else\n+    {\n+      printf(\"FAIL C: already allocated.\\n\");\n+      return;\n+    }\n+\n+  if (status != CFI_SUCCESS)\n+    {\n+      printf(\"FAIL C: status is %i\\n\",status);\n+    }\n+\n+  pt = (float *) this->base_addr;\n+  for (i=0; i<4; i++)\n+    {\n+      pt[i] = Cxgl[i];\n+    }\n+}"}, {"sha": "899a6954361660edbb17d9897b83dc3379a38c16", "filename": "gcc/testsuite/gfortran.dg/ISO_Fortran_binding_8.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0324a4978e151e4a1cb5aa93265d2876af581baa/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FISO_Fortran_binding_8.f90?ref=0324a4978e151e4a1cb5aa93265d2876af581baa", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do run { target c99_runtime } }\n+! { dg-additional-sources ISO_Fortran_binding_8.c }\n+!\n+! Test the fix for PR89842.\n+!\n+! Contributed by Reinhold Bader  <Bader@lrz.de>\n+!\n+module mod_alloc_01\n+  use, intrinsic :: iso_c_binding\n+  implicit none\n+\n+  interface\n+     subroutine globalp(this) bind(c)\n+       import :: c_float\n+       real(c_float), allocatable :: this(:)\n+     end subroutine globalp\n+  end interface\n+end module mod_alloc_01\n+\n+program alloc_01\n+  use mod_alloc_01\n+  implicit none\n+\n+  real(c_float), allocatable :: myp(:) \n+  integer :: status\n+\n+  status = 0\n+  call globalp(myp)\n+\n+!  write(*,*) 'globalp done'\n+  if (.not. allocated(myp)) then\n+     write(*,*) 'FAIL 1'\n+     stop 1\n+  end if\n+  if (lbound(myp,1) /= 3 .or. size(myp,1) /= 4) then\n+     write(*,*) 'FAIL 2: ', lbound(myp), size(myp,1)\n+     status = status + 1\n+  else\n+!     write(*,*) 'Now checking data', myp(3)\n+     if (maxval(abs(myp - [1.1, 2.3, 5.1, 4.2])) > 1.0e-6) then\n+        write(*,*) 'FAIL 3: ', myp\n+        status = status + 1\n+     end if\n+  end if\n+\n+  if (status .ne. 0) then\n+     stop status\n+  end if\n+end program alloc_01\n+"}]}