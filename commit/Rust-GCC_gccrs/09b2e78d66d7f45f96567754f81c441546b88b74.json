{"sha": "09b2e78d66d7f45f96567754f81c441546b88b74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDliMmU3OGQ2NmQ3ZjQ1Zjk2NTY3NzU0ZjgxYzQ0MTU0NmI4OGI3NA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2003-01-24T20:48:47Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-01-24T20:48:47Z"}, "message": "i386-protos.h (function_arg_pass_by_reference): Declare.\n\n\t* config/i386/i386-protos.h (function_arg_pass_by_reference): Declare.\n\t* config/i386/i386.h (FUNCTION_ARG_PASS_BY_REFERENCE): Use it.\n\t* config/i386/i386.c (function_arg_pass_by_reference): New.\n\t(ix86_va_arg): Support arguments passed by reference.\n\nFrom-SVN: r61731", "tree": {"sha": "e3d2f2d02bfd5bfbd61c11777e6a10f99b78b074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3d2f2d02bfd5bfbd61c11777e6a10f99b78b074"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09b2e78d66d7f45f96567754f81c441546b88b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b2e78d66d7f45f96567754f81c441546b88b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09b2e78d66d7f45f96567754f81c441546b88b74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b2e78d66d7f45f96567754f81c441546b88b74/comments", "author": null, "committer": null, "parents": [{"sha": "3d436d2ac575b85dc7c787fbeacc3c08597000c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d436d2ac575b85dc7c787fbeacc3c08597000c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d436d2ac575b85dc7c787fbeacc3c08597000c3"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "f22df79100053348c41f03239547c34b109590d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b2e78d66d7f45f96567754f81c441546b88b74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b2e78d66d7f45f96567754f81c441546b88b74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09b2e78d66d7f45f96567754f81c441546b88b74", "patch": "@@ -1,3 +1,10 @@\n+2003-01-24  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* config/i386/i386-protos.h (function_arg_pass_by_reference): Declare.\n+\t* config/i386/i386.h (FUNCTION_ARG_PASS_BY_REFERENCE): Use it.\n+\t* config/i386/i386.c (function_arg_pass_by_reference): New.\n+\t(ix86_va_arg): Support arguments passed by reference.\n+\n 2003-01-24  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* cfgloopanal.c: New file."}, {"sha": "0f4137712b65c9fbfc2fa2abec803e38d2382474", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b2e78d66d7f45f96567754f81c441546b88b74/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b2e78d66d7f45f96567754f81c441546b88b74/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=09b2e78d66d7f45f96567754f81c441546b88b74", "patch": "@@ -195,6 +195,9 @@ extern void x86_function_profiler PARAMS ((FILE *, int));\n #ifdef TREE_CODE\n extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx));\n extern rtx function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n+extern int function_arg_pass_by_reference PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t   enum machine_mode,\n+\t\t\t\t\t\t   tree, int));\n extern void function_arg_advance PARAMS ((CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\ttree, int));\n extern rtx ix86_function_value PARAMS ((tree));"}, {"sha": "45165f48c97a3c9da9fce0efdddb4c56978550d2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b2e78d66d7f45f96567754f81c441546b88b74/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b2e78d66d7f45f96567754f81c441546b88b74/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=09b2e78d66d7f45f96567754f81c441546b88b74", "patch": "@@ -2488,6 +2488,32 @@ function_arg (cum, mode, type, named)\n   return ret;\n }\n \n+/* A C expression that indicates when an argument must be passed by\n+   reference.  If nonzero for an argument, a copy of that argument is\n+   made in memory and a pointer to the argument is passed instead of\n+   the argument itself.  The pointer is passed in whatever way is\n+   appropriate for passing a pointer to that type.  */\n+\n+int\n+function_arg_pass_by_reference (cum, mode, type, named)\n+     CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     tree type;\n+     int named ATTRIBUTE_UNUSED;\n+{\n+  if (!TARGET_64BIT)\n+    return 0;\n+\n+  if (type && int_size_in_bytes (type) == -1)\n+    {\n+      if (TARGET_DEBUG_ARG)\n+\tfprintf (stderr, \"function_arg_pass_by_reference\\n\");\n+      return 1;\n+    }\n+\n+  return 0;\n+}\n+\n /* Gives the alignment boundary, in bits, of an argument with the specified mode\n    and type.   */\n \n@@ -2843,6 +2869,7 @@ ix86_va_arg (valist, type)\n   rtx lab_false, lab_over = NULL_RTX;\n   rtx addr_rtx, r;\n   rtx container;\n+  int indirect_p = 0;\n \n   /* Only 64bit target needs something special.  */\n   if (!TARGET_64BIT)\n@@ -2862,6 +2889,13 @@ ix86_va_arg (valist, type)\n   sav = build (COMPONENT_REF, TREE_TYPE (f_sav), valist, f_sav);\n \n   size = int_size_in_bytes (type);\n+  if (size == -1)\n+    {\n+      /* Passed by reference.  */\n+      indirect_p = 1;\n+      type = build_pointer_type (type);\n+      size = int_size_in_bytes (type);\n+    }\n   rsize = (size + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n   container = construct_container (TYPE_MODE (type), type, 0,\n@@ -3052,6 +3086,13 @@ ix86_va_arg (valist, type)\n   if (container)\n     emit_label (lab_over);\n \n+  if (indirect_p)\n+    {\n+      r = gen_rtx_MEM (Pmode, addr_rtx);\n+      set_mem_alias_set (r, get_varargs_alias_set ());\n+      emit_move_insn (addr_rtx, r);\n+    }\n+\n   return addr_rtx;\n }\n \f"}, {"sha": "b4359f1f8c6a52df1752b4d966d2a9e55740c7e8", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b2e78d66d7f45f96567754f81c441546b88b74/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b2e78d66d7f45f96567754f81c441546b88b74/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=09b2e78d66d7f45f96567754f81c441546b88b74", "patch": "@@ -1753,6 +1753,15 @@ typedef struct ix86_args {\n \n #define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED) 0\n \n+/* A C expression that indicates when an argument must be passed by\n+   reference.  If nonzero for an argument, a copy of that argument is\n+   made in memory and a pointer to the argument is passed instead of\n+   the argument itself.  The pointer is passed in whatever way is\n+   appropriate for passing a pointer to that type.  */\n+ \n+#define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED) \\\n+  function_arg_pass_by_reference(&CUM, MODE, TYPE, NAMED)\n+ \n /* Perform any needed actions needed for a function that is receiving a\n    variable number of arguments.\n "}]}