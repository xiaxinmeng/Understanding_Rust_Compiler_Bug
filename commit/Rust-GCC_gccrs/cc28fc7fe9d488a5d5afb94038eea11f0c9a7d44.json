{"sha": "cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyOGZjN2ZlOWQ0ODhhNWQ1YWZiOTQwMzhlZWExMWYwYzlhN2Q0NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-02-19T06:29:49Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-02-19T06:29:49Z"}, "message": "re PR c/60195 (Strange warnings using atomic types)\n\n\tPR c/60195\nc/\n\t* c-typeck.c (convert_lvalue_to_rvalue): Set TREE_NO_WARNING on tmp.\n\tCall mark_exp_read on exp.value.\n\t(build_atomic_assign): Set TREE_NO_WARNING on val and old.  Set\n\tTREE_ADDRESSABLE on old instead of val.\n\t(emit_side_effect_warnings): Warn only if RHS has !TREE_NO_WARNING.\ntestsuite/\n\t* gcc.dg/pr60195.c: New test.\n\nFrom-SVN: r207873", "tree": {"sha": "661204b52e10494393e7c759ea168ea7ac12be34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/661204b52e10494393e7c759ea168ea7ac12be34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07716f8d54c2d5f08330885209391056774b87e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07716f8d54c2d5f08330885209391056774b87e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07716f8d54c2d5f08330885209391056774b87e7"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "32d724265dcece070d65b18f755f02eb8f2c0b31", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44", "patch": "@@ -1,3 +1,12 @@\n+2014-02-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60195\n+\t* c-typeck.c (convert_lvalue_to_rvalue): Set TREE_NO_WARNING on tmp.\n+\tCall mark_exp_read on exp.value.\n+\t(build_atomic_assign): Set TREE_NO_WARNING on val and old.  Set\n+\tTREE_ADDRESSABLE on old instead of val.\n+\t(emit_side_effect_warnings): Warn only if RHS has !TREE_NO_WARNING.\n+\n 2014-02-07  Prathamesh Kulkarni  <bilbotheelffriend@gmail.com>\n \n \t* c-parser.c (c_parser_get_builtin_args): Replace calls to"}, {"sha": "2b542903ba9a9d76a42d62300bc90d8f21a13b21", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44", "patch": "@@ -2009,6 +2009,7 @@ convert_lvalue_to_rvalue (location_t loc, struct c_expr exp,\n       tmp = create_tmp_var (nonatomic_type, NULL);\n       tmp_addr = build_unary_op (loc, ADDR_EXPR, tmp, 0);\n       TREE_ADDRESSABLE (tmp) = 1;\n+      TREE_NO_WARNING (tmp) = 1;\n \n       /* Issue __atomic_load (&expr, &tmp, SEQ_CST);  */\n       fndecl = builtin_decl_explicit (BUILT_IN_ATOMIC_LOAD);\n@@ -2017,6 +2018,9 @@ convert_lvalue_to_rvalue (location_t loc, struct c_expr exp,\n       params->quick_push (seq_cst);\n       func_call = build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n \n+      /* EXPR is always read.  */\n+      mark_exp_read (exp.value);\n+\n       /* Return tmp which contains the value loaded.  */\n       exp.value = build2 (COMPOUND_EXPR, nonatomic_type, func_call, tmp);\n     }\n@@ -3615,6 +3619,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   nonatomic_rhs_type = build_qualified_type (rhs_type, TYPE_UNQUALIFIED);\n   val = create_tmp_var (nonatomic_rhs_type, NULL);\n   TREE_ADDRESSABLE (val) = 1;\n+  TREE_NO_WARNING (val) = 1;\n   rhs = build2 (MODIFY_EXPR, nonatomic_rhs_type, val, rhs);\n   SET_EXPR_LOCATION (rhs, loc);\n   add_stmt (rhs);\n@@ -3643,7 +3648,8 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   /* Create the variables and labels required for the op= form.  */\n   old = create_tmp_var (nonatomic_lhs_type, NULL);\n   old_addr = build_unary_op (loc, ADDR_EXPR, old, 0);\n-  TREE_ADDRESSABLE (val) = 1;\n+  TREE_ADDRESSABLE (old) = 1;\n+  TREE_NO_WARNING (old) = 1;\n \n   newval = create_tmp_var (nonatomic_lhs_type, NULL);\n   newval_addr = build_unary_op (loc, ADDR_EXPR, newval, 0);\n@@ -9661,6 +9667,7 @@ emit_side_effect_warnings (location_t loc, tree expr)\n       if (!TREE_SIDE_EFFECTS (r)\n \t  && !VOID_TYPE_P (TREE_TYPE (r))\n \t  && !CONVERT_EXPR_P (r)\n+\t  && !TREE_NO_WARNING (r)\n \t  && !TREE_NO_WARNING (expr))\n \twarning_at (cloc, OPT_Wunused_value,\n \t\t    \"right-hand operand of comma expression has no effect\");"}, {"sha": "e246657c5ee63bc0afafd29aad7e1784f537787f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44", "patch": "@@ -1,3 +1,8 @@\n+2014-02-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60195\n+\t* gcc.dg/pr60195.c: New test.\n+\n 2014-02-19  Paul Pluzhnikov  <ppluzhnikov@google.com>\n \n \t* gcc.dg/vect/no-vfa-vect-depend-2.c (main1): Fix buffer"}, {"sha": "0a50a30be25456ab0c72ac5220708de93d4c96ef", "filename": "gcc/testsuite/gcc.dg/pr60195.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60195.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60195.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60195.c?ref=cc28fc7fe9d488a5d5afb94038eea11f0c9a7d44", "patch": "@@ -0,0 +1,56 @@\n+/* PR c/60195 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -Wpedantic -Wall\" } */\n+\n+typedef _Atomic int atomic_int;\n+\n+atomic_int\n+fn1 (void)\n+{\n+  atomic_int y = 0;\n+  return y;\n+}\n+\n+atomic_int\n+fn2 (void)\n+{\n+  atomic_int y = 0;\n+  y;\n+  return y;\n+}\n+\n+atomic_int\n+fn3 (void)\n+{\n+  atomic_int y = 0;\n+  y++;\n+  return y;\n+}\n+\n+void\n+fn4 (void)\n+{\n+  atomic_int y;\n+  y = 0;\n+  (void) y;\n+}\n+\n+void\n+fn5 (void)\n+{\n+  atomic_int y = 0; /* { dg-warning \"unused variable\" } */\n+}\n+\n+void\n+fn6 (void)\n+{\n+  atomic_int y;  /* { dg-warning \"set but not used\" } */\n+  y = 0;\n+}\n+\n+void\n+fn7 (void)\n+{\n+  atomic_int y = 0;\n+  y++;\n+}"}]}