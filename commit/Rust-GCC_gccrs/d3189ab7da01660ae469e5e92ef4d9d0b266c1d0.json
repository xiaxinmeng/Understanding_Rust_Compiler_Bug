{"sha": "d3189ab7da01660ae469e5e92ef4d9d0b266c1d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMxODlhYjdkYTAxNjYwYWU0NjllNWU5MmVmNGQ5ZDBiMjY2YzFkMA==", "commit": {"author": {"name": "Anthony Green", "email": "green@cygnus.com", "date": "1999-12-06T06:33:56Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "1999-12-06T06:33:56Z"}, "message": "jvm.h: Declare many functions with __attribute__((__malloc__)).\n\n\t* include/jvm.h: Declare many functions with\n\t__attribute__((__malloc__)).\n\t* gcj/javaprims.h: Ditto.\n\nFrom-SVN: r30794", "tree": {"sha": "6e445f9b787b6905ed0e3cc7d9007202bf9bce81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e445f9b787b6905ed0e3cc7d9007202bf9bce81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3189ab7da01660ae469e5e92ef4d9d0b266c1d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3189ab7da01660ae469e5e92ef4d9d0b266c1d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3189ab7da01660ae469e5e92ef4d9d0b266c1d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3189ab7da01660ae469e5e92ef4d9d0b266c1d0/comments", "author": null, "committer": null, "parents": [{"sha": "d4203cb4adace060fc70ade4ade6b9fc05abaa0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4203cb4adace060fc70ade4ade6b9fc05abaa0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4203cb4adace060fc70ade4ade6b9fc05abaa0f"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "27181ab1fc869781738973b6cdf86d9124116b1b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3189ab7da01660ae469e5e92ef4d9d0b266c1d0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3189ab7da01660ae469e5e92ef4d9d0b266c1d0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d3189ab7da01660ae469e5e92ef4d9d0b266c1d0", "patch": "@@ -1,3 +1,9 @@\n+1999-12-05  Anthony Green  <green@cygnus.com>\n+\n+\t* include/jvm.h: Declare many functions with\n+\t__attribute__((__malloc__)).\n+\t* gcj/javaprims.h: Ditto.\n+\n Thu Dec  2 17:26:47 1999  Anthony Green  <green@cygnus.com>\n \n \t* THANKS: Giving credit where credit is due."}, {"sha": "b2242140bb1ba3fc13a0c0bc48d2fea12c016ac9", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3189ab7da01660ae469e5e92ef4d9d0b266c1d0/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3189ab7da01660ae469e5e92ef4d9d0b266c1d0/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=d3189ab7da01660ae469e5e92ef4d9d0b266c1d0", "patch": "@@ -257,20 +257,22 @@ struct _Jv_JNIEnv;\n typedef struct _Jv_Field *jfieldID;\n typedef struct _Jv_Method *jmethodID;\n \n-extern \"C\" jobject _Jv_AllocObject (jclass, jint);\n+extern \"C\" jobject _Jv_AllocObject (jclass, jint) __attribute__((__malloc__));\n extern \"C\" jboolean _Jv_IsInstanceOf(jobject, jclass);\n-extern \"C\" jstring _Jv_AllocString(jsize);\n-extern \"C\" jstring _Jv_NewString (const jchar*, jsize);\n+extern \"C\" jstring _Jv_AllocString(jsize) __attribute__((__malloc__));\n+extern \"C\" jstring _Jv_NewString (const jchar*, jsize)\n+  __attribute__((__malloc__));\n extern \"C\" jchar* _Jv_GetStringChars (jstring str);\n extern \"C\" jint _Jv_MonitorEnter (jobject);\n extern \"C\" jint _Jv_MonitorExit (jobject);\n-extern \"C\" jstring _Jv_NewStringLatin1(const char*, jsize);\n+extern \"C\" jstring _Jv_NewStringLatin1(const char*, jsize)\n+  __attribute__((__malloc__));\n extern \"C\" jsize _Jv_GetStringUTFLength (jstring);\n extern \"C\" jsize _Jv_GetStringUTFRegion (jstring, jsize, jsize, char *);\n \n extern \"C\" void _Jv_Throw (void *) __attribute__ ((__noreturn__));\n extern \"C\" void _Jv_Sjlj_Throw (void *) __attribute__ ((__noreturn__));\n-extern \"C\" void* _Jv_Malloc (jsize);\n+extern \"C\" void* _Jv_Malloc (jsize) __attribute__((__malloc__));\n extern \"C\" void _Jv_Free (void*);\n \n typedef unsigned short _Jv_ushort __attribute__((__mode__(__HI__)));"}, {"sha": "791cdfadec95dd5285a3db67733f94dfc615bdaa", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3189ab7da01660ae469e5e92ef4d9d0b266c1d0/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3189ab7da01660ae469e5e92ef4d9d0b266c1d0/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=d3189ab7da01660ae469e5e92ef4d9d0b266c1d0", "patch": "@@ -61,11 +61,11 @@ extern java::lang::Class StringClass;\n typedef void _Jv_FinalizerFunc (jobject);\n \n /* Allocate space for a new Java object.  */\n-void *_Jv_AllocObj (jsize size);\n+void *_Jv_AllocObj (jsize size) __attribute__((__malloc__));\n /* Allocate space for an array of Java objects.  */\n-void *_Jv_AllocArray (jsize size);\n+void *_Jv_AllocArray (jsize size) __attribute__((__malloc__));\n /* Allocate space that is known to be pointer-free.  */\n-void *_Jv_AllocBytes (jsize size);\n+void *_Jv_AllocBytes (jsize size) __attribute__((__malloc__));\n /* Initialize the GC.  */\n void _Jv_InitGC (void);\n /* Register a finalizer.  */\n@@ -102,7 +102,7 @@ void _Jv_SetInitialHeapSize (const char *arg);\n void _Jv_SetMaximumHeapSize (const char *arg);\n \n /* Allocate some unscanned bytes.  Throw exception if out of memory.  */\n-void *_Jv_AllocBytesChecked (jsize size);\n+void *_Jv_AllocBytesChecked (jsize size) __attribute__((__malloc__));\n \n extern \"C\" void JvRunMain (jclass klass, int argc, const char **argv);\n void _Jv_RunMain (const char* name, int argc, const char **argv);\n@@ -145,8 +145,10 @@ _Jv_GetArrayElementFromElementType (jobject array,\n }\n \n extern \"C\" void _Jv_ThrowBadArrayIndex (jint bad_index);\n-extern \"C\" jobject _Jv_NewArray (jint type, jint size);\n-extern \"C\" jobject _Jv_NewMultiArray (jclass klass, jint dims, ...);\n+extern \"C\" jobject _Jv_NewArray (jint type, jint size)\n+  __attribute__((__malloc__));\n+extern \"C\" jobject _Jv_NewMultiArray (jclass klass, jint dims, ...)\n+  __attribute__((__malloc__));\n extern \"C\" void *_Jv_CheckCast (jclass klass, jobject obj);\n extern \"C\" void *_Jv_LookupInterfaceMethod (jclass klass, Utf8Const *name,\n \t\t\t\t\t    Utf8Const *signature);\n@@ -160,7 +162,8 @@ extern jclass _Jv_FindClass (_Jv_Utf8Const *name,\n extern jclass _Jv_FindClassFromSignature (char *,\n \t\t\t\t\t  java::lang::ClassLoader *loader);\n \n-extern jobject _Jv_NewMultiArray (jclass, jint ndims, jint* dims);\n+extern jobject _Jv_NewMultiArray (jclass, jint ndims, jint* dims)\n+  __attribute__((__malloc__));\n \n /* Checked divide subroutines. */\n extern \"C\""}]}