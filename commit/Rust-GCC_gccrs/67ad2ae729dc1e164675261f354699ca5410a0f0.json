{"sha": "67ad2ae729dc1e164675261f354699ca5410a0f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdhZDJhZTcyOWRjMWUxNjQ2NzUyNjFmMzU0Njk5Y2E1NDEwYTBmMA==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2010-06-16T19:40:46Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2010-06-16T19:40:46Z"}, "message": "This patch adds the end prologue and begin epilogue markers in Dwarf2 \nthat are needed by the VMS debugger on I64.\n\n\t* config/ia64/vms.h (ASM_OUTPUT_DWARF_DELTA_UNITS): Remove.\n\t(ASM_OUTPUT_DWARF_VMS_DELTA: Define new macro.\n\t* dbxout.c (gcc_debug_hooks): New entry begin_epilogue.\n\t* debug.c: Likewise.\n\t* sdbout.c: Likewise.\n\t* vmsdbgout.c: Likewise.\n\t* debug.h: Likewise. (dwarf2out_vms_{begin,end}_prologue): Declare.\n\t* doc/tm.texi (ASM_OUTPUT_DWARF_VMS_DELTA): Document.\n\t* dwarf2asm.c (dw2_asm_output_vms_delta): New function.\n\t(ASM_OUTPUT_DWARF_VMS_DELTA): Call it.\n\t* dwarf2asm.h (dw2_asm_output_vms_delta): Declare.\n\t* dwarf2out.c (dw_fde_struct): New fields\n\tdw_fde_vms_{end,begin}_prologue.\n\t(PROLOGUE_END_LABEL, EPILOGUE_BEGIN_LABEL): New macros.\n\t(dwarf2out_begin_prologue): Set dw_fde_struct defaults for above.\n\t(dwarf2out_vms_end_prologue): New function.\n\t(dwarf2out_vms_begin_epilogue): New function.\n\t(dw_val_struct): New value dw_val_class_vms_delta.\n\t(gcc_debug_hooks): New entry begin_epilogue. Set end_prologue,\n\tbegin_epilogue for VMS.\n\t(AT_vms_delta1, AT_vms_delta2, add_AT_vms_delta): Declare\n\tnew static functions.\n\t(dwarf_attr_name): New cases DW_AT_HP_{prologue,epilogue}.\n\t(AT_vms_delta1, AT_vms_delta2, add_AT_vms_delta): New \n\tstatic functions.\n\t(print_die): New case dw_val_class_vms_delta.\n\t(attr_checksum): Likewise.\n\t(same_dw_val_p: Likewise.\n\t(size_of_die): Likewise.\n\t(value_format): Likewise.\n\t(output_die): Likewise.\n\t(gen_subprogram_die): Call add_AT_vms_delta on VMS.\n\t(dwarf2out_begin_epilogue): Rename to dwarf2out_cfi_begin_epilogue\n\t* dwarf2out.h (dwarf2out_begin_epilogue): Rename to\n\tdwarf2out_cfi_begin_epilogue\n\t* final.c (final_scan_insn): Likewise. Call begin_epilogue.\n\nFrom-SVN: r160858", "tree": {"sha": "eef98f370a10307f3f44fbf4305711f9f3f71b89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eef98f370a10307f3f44fbf4305711f9f3f71b89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67ad2ae729dc1e164675261f354699ca5410a0f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ad2ae729dc1e164675261f354699ca5410a0f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67ad2ae729dc1e164675261f354699ca5410a0f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ad2ae729dc1e164675261f354699ca5410a0f0/comments", "author": null, "committer": null, "parents": [{"sha": "ed5c4a103307764b5a4199caa9ebd70ce3d76a26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5c4a103307764b5a4199caa9ebd70ce3d76a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed5c4a103307764b5a4199caa9ebd70ce3d76a26"}], "stats": {"total": 292, "additions": 271, "deletions": 21}, "files": [{"sha": "3acf2c5cf9e82693e0fe074367cff12270e9bf5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -1,3 +1,42 @@\n+2010-06-16  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/ia64/vms.h (ASM_OUTPUT_DWARF_DELTA_UNITS): Remove.\n+\t(ASM_OUTPUT_DWARF_VMS_DELTA: Define new macro.\n+\t* dbxout.c (gcc_debug_hooks): New entry begin_epilogue.\n+\t* debug.c: Likewise.\n+\t* sdbout.c: Likewise.\n+\t* vmsdbgout.c: Likewise.\n+\t* debug.h: Likewise. (dwarf2out_vms_{begin,end}_prologue): Declare.\n+\t* doc/tm.texi (ASM_OUTPUT_DWARF_VMS_DELTA): Document.\n+\t* dwarf2asm.c (dw2_asm_output_vms_delta): New function.\n+\t(ASM_OUTPUT_DWARF_VMS_DELTA): Call it.\n+\t* dwarf2asm.h (dw2_asm_output_vms_delta): Declare.\n+\t* dwarf2out.c (dw_fde_struct): New fields\n+\tdw_fde_vms_{end,begin}_prologue.\n+\t(PROLOGUE_END_LABEL, EPILOGUE_BEGIN_LABEL): New macros.\n+\t(dwarf2out_begin_prologue): Set dw_fde_struct defaults for above.\n+\t(dwarf2out_vms_end_prologue): New function.\n+\t(dwarf2out_vms_begin_epilogue): New function.\n+\t(dw_val_struct): New value dw_val_class_vms_delta.\n+\t(gcc_debug_hooks): New entry begin_epilogue. Set end_prologue,\n+\tbegin_epilogue for VMS.\n+\t(AT_vms_delta1, AT_vms_delta2, add_AT_vms_delta): Declare\n+\tnew static functions.\n+\t(dwarf_attr_name): New cases DW_AT_HP_{prologue,epilogue}.\n+\t(AT_vms_delta1, AT_vms_delta2, add_AT_vms_delta): New \n+\tstatic functions.\n+\t(print_die): New case dw_val_class_vms_delta.\n+\t(attr_checksum): Likewise.\n+\t(same_dw_val_p: Likewise.\n+\t(size_of_die): Likewise.\n+\t(value_format): Likewise.\n+\t(output_die): Likewise.\n+\t(gen_subprogram_die): Call add_AT_vms_delta on VMS.\n+\t(dwarf2out_begin_epilogue): Rename to dwarf2out_cfi_begin_epilogue\n+\t* dwarf2out.h (dwarf2out_begin_epilogue): Rename to\n+\tdwarf2out_cfi_begin_epilogue\n+\t* final.c (final_scan_insn): Likewise. Call begin_epilogue.\n+\n 2010-06-16  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/cris/cris-protos.h (cris_print_operand): Delete."}, {"sha": "3d678ce5f85aa19c7ea2ad12449633f0ba3e1791", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine GNU compiler. IA64-VMS version.\n-   Copyright (C) 2003-2009 Free Software Foundation, Inc.\n+   Copyright (C) 2003-2010 Free Software Foundation, Inc.\n    Contributed by Douglas B Rupp (rupp@gnat.com).\n \n This file is part of GCC.\n@@ -72,13 +72,13 @@ along with GCC; see the file COPYING3.  If not see\n /* Turn on VMS specific Dwarf2 features.  */\n #define VMS_DEBUGGING_INFO 1\n \n-#define ASM_OUTPUT_DWARF_DELTA_UNITS(FILE,SIZE,LABEL1,LABEL2,UNITS) \\\n-do {                                \\\n-  fprintf (FILE, \"\\tdata4.ua\\t (\"); \\\n-  assemble_name (FILE, LABEL1);     \\\n-  fprintf (FILE, \"-\");              \\\n-  assemble_name (FILE, LABEL2);     \\\n-  fprintf (FILE, \")/16*3\");         \\\n+#define ASM_OUTPUT_DWARF_VMS_DELTA(FILE,SIZE,LABEL1,LABEL2) \\\n+do {                                          \\\n+  fprintf (FILE, \"\\tdata4.ua\\t@slotcount(\");  \\\n+  assemble_name (FILE, LABEL1);               \\\n+  fprintf (FILE, \"-\");                        \\\n+  assemble_name (FILE, LABEL2);               \\\n+  fprintf (FILE, \")\");                        \\\n } while (0)\n \n #undef STARTFILE_SPEC"}, {"sha": "066e91f191ae2d59d58e616c044b2b15fa6cdec8", "filename": "gcc/dbxout.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -1,6 +1,6 @@\n /* Output dbx-format symbol table information from GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -357,6 +357,7 @@ const struct gcc_debug_hooks dbx_debug_hooks =\n   dbxout_source_line,\t\t         /* source_line */\n   dbxout_begin_prologue,\t         /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n+  debug_nothing_int_charstar,\t         /* begin_epilogue */\n   debug_nothing_int_charstar,\t         /* end_epilogue */\n #ifdef DBX_FUNCTION_FIRST\n   dbxout_begin_function,\n@@ -399,6 +400,7 @@ const struct gcc_debug_hooks xcoff_debug_hooks =\n   xcoffout_source_line,\n   xcoffout_begin_prologue,\t         /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n+  debug_nothing_int_charstar,\t         /* begin_epilogue */\n   xcoffout_end_epilogue,\n   debug_nothing_tree,\t\t         /* begin_function */\n   xcoffout_end_function,"}, {"sha": "c53d05eae58389a65acc7c3e3e043178a09bb5c9", "filename": "gcc/debug.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -1,5 +1,5 @@\n /* Do-nothing debug hooks for GCC.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2010\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -38,6 +38,7 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int_charstar_int_bool,\t /* source_line */\n   debug_nothing_int_charstar,\t         /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n+  debug_nothing_int_charstar,\t         /* begin_epilogue */\n   debug_nothing_int_charstar,\t         /* end_epilogue */\n   debug_nothing_tree,\t\t         /* begin_function */\n   debug_nothing_int,\t\t         /* end_function */"}, {"sha": "2ca0ad86e506afc8e69ffe41bf23a2e4425e6f53", "filename": "gcc/debug.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -1,5 +1,5 @@\n /* Debug hooks for GCC.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2010\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -75,6 +75,9 @@ struct gcc_debug_hooks\n      function.  */\n   void (* end_prologue) (unsigned int line, const char *file);\n \n+  /* Called at beginning of epilogue code.  */\n+  void (* begin_epilogue) (unsigned int line, const char *file);\n+\n   /* Record end of epilogue code.  */\n   void (* end_epilogue) (unsigned int line, const char *file);\n \n@@ -194,6 +197,8 @@ extern const struct gcc_debug_hooks vmsdbg_debug_hooks;\n /* Dwarf2 frame information.  */\n \n extern void dwarf2out_begin_prologue (unsigned int, const char *);\n+extern void dwarf2out_vms_end_prologue (unsigned int, const char *);\n+extern void dwarf2out_vms_begin_epilogue (unsigned int, const char *);\n extern void dwarf2out_end_epilogue (unsigned int, const char *);\n extern void dwarf2out_frame_init (void);\n extern void dwarf2out_frame_finish (void);"}, {"sha": "b118c65739189f4e2b51b40bcea183c71a376479", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -9289,6 +9289,12 @@ A C statement to issue assembly directives that create a difference\n @var{lab1} minus @var{lab2}, using an integer of the given @var{size}.\n @end defmac\n \n+@defmac ASM_OUTPUT_DWARF_VMS_DELTA (@var{stream}, @var{size}, @var{label1}, @var{label2})\n+A C statement to issue assembly directives that create a difference\n+between the two given labels in system defined units, e.g. instruction\n+slots on IA64 VMS, using an integer of the given size.\n+@end defmac\n+\n @defmac ASM_OUTPUT_DWARF_OFFSET (@var{stream}, @var{size}, @var{label}, @var{section})\n A C statement to issue assembly directives that create a\n section-relative reference to the given @var{label}, using an integer of the"}, {"sha": "84e8cadc9d3cfbbf0850bc07992378355dde15c7", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -152,6 +152,35 @@ dw2_asm_output_delta (int size, const char *lab1, const char *lab2,\n   va_end (ap);\n }\n \n+/* Output the difference between two symbols in instruction units\n+   in a given size.  */\n+\n+void\n+dw2_asm_output_vms_delta (int size ATTRIBUTE_UNUSED,\n+\t\t\t  const char *lab1, const char *lab2,\n+\t\t\t  const char *comment, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, comment);\n+\n+#ifndef ASM_OUTPUT_DWARF_VMS_DELTA\n+  /* VMS Delta is only special on ia64-vms, but this funtion also gets\n+     called on alpha-vms so it has to do something sane.  */\n+  dw2_asm_output_delta (size, lab1, lab2, comment);\n+#else\n+  ASM_OUTPUT_DWARF_VMS_DELTA (asm_out_file, size, lab1, lab2);\n+  if (flag_debug_asm && comment)\n+    {\n+      fprintf (asm_out_file, \"\\t%s \", ASM_COMMENT_START);\n+      vfprintf (asm_out_file, comment, ap);\n+    }\n+  fputc ('\\n', asm_out_file);\n+#endif\n+\n+  va_end (ap);\n+}\n+\n /* Output a section-relative reference to a LABEL, which was placed in\n    BASE.  In general this can only be done for debugging symbols.\n    E.g. on most targets with the GNU linker, this is accomplished with"}, {"sha": "39515d0ddb3dad9bdb5f799cb9254d5028492436", "filename": "gcc/dwarf2asm.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdwarf2asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdwarf2asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.h?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -1,5 +1,6 @@\n /* Dwarf2 assembler output helper routines.\n-   Copyright (C) 2001, 2003, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2003, 2005, 2007, 2008, 2010\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -30,6 +31,10 @@ extern void dw2_asm_output_delta (int, const char *, const char *,\n \t\t\t\t  const char *, ...)\n      ATTRIBUTE_NULL_PRINTF_4;\n \n+extern void dw2_asm_output_vms_delta (int, const char *, const char *,\n+\t\t\t\t      const char *, ...)\n+     ATTRIBUTE_NULL_PRINTF_4;\n+\n extern void dw2_asm_output_offset (int, const char *, section *,\n \t\t\t\t   const char *, ...)\n      ATTRIBUTE_NULL_PRINTF_4;"}, {"sha": "8d1dd817a36fda1f316976f32e7974e78ec5dcef", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 163, "deletions": 4, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -299,6 +299,8 @@ typedef struct GTY(()) dw_fde_struct {\n   const char *dw_fde_begin;\n   const char *dw_fde_current_label;\n   const char *dw_fde_end;\n+  const char *dw_fde_vms_end_prologue;\n+  const char *dw_fde_vms_begin_epilogue;\n   const char *dw_fde_hot_section_label;\n   const char *dw_fde_hot_section_end_label;\n   const char *dw_fde_unlikely_section_label;\n@@ -508,6 +510,14 @@ static void def_cfa_1 (const char *, dw_cfa_location *);\n #define FUNC_END_LABEL\t\t\"LFE\"\n #endif\n \n+#ifndef PROLOGUE_END_LABEL\n+#define PROLOGUE_END_LABEL\t\"LPE\"\n+#endif\n+\n+#ifndef EPILOGUE_BEGIN_LABEL\n+#define EPILOGUE_BEGIN_LABEL\t\"LEB\"\n+#endif\n+\n #ifndef FRAME_BEGIN_LABEL\n #define FRAME_BEGIN_LABEL\t\"Lframe\"\n #endif\n@@ -2789,7 +2799,7 @@ dwarf2out_frame_debug (rtx insn, bool after_p)\n    NOTE_INSN_CFA_RESTORE_STATE at the appropriate place in the stream.  */\n \n void\n-dwarf2out_begin_epilogue (rtx insn)\n+dwarf2out_cfi_begin_epilogue (rtx insn)\n {\n   bool saw_frp = false;\n   rtx i;\n@@ -2862,7 +2872,8 @@ dwarf2out_begin_epilogue (rtx insn)\n   cfa_remember.in_use = 1;\n }\n \n-/* A \"subroutine\" of dwarf2out_begin_epilogue.  Emit the restore required.  */\n+/* A \"subroutine\" of dwarf2out_cfi_begin_epilogue.  Emit the restore\n+   required.  */\n \n void\n dwarf2out_frame_debug_restore_state (void)\n@@ -3961,6 +3972,8 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n   fde->dw_fde_switched_sections = 0;\n   fde->dw_fde_switched_cold_to_hot = 0;\n   fde->dw_fde_end = NULL;\n+  fde->dw_fde_vms_end_prologue = NULL;\n+  fde->dw_fde_vms_begin_epilogue = NULL;\n   fde->dw_fde_cfi = NULL;\n   fde->dw_fde_switch_cfi = NULL;\n   fde->funcdef_number = current_function_funcdef_no;\n@@ -4017,6 +4030,51 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n     }\n }\n \n+/* Output a marker (i.e. a label) for the end of the generated code\n+   for a function prologue.  This gets called *after* the prologue code has\n+   been generated.  */\n+\n+void\n+dwarf2out_vms_end_prologue (unsigned int line ATTRIBUTE_UNUSED,\n+\t\t\tconst char *file ATTRIBUTE_UNUSED)\n+{\n+  dw_fde_ref fde;\n+  char label[MAX_ARTIFICIAL_LABEL_BYTES];\n+\n+  /* Output a label to mark the endpoint of the code generated for this\n+     function.  */\n+  ASM_GENERATE_INTERNAL_LABEL (label, PROLOGUE_END_LABEL,\n+\t\t\t       current_function_funcdef_no);\n+  ASM_OUTPUT_DEBUG_LABEL (asm_out_file, PROLOGUE_END_LABEL,\n+\t\t\t  current_function_funcdef_no);\n+  fde = &fde_table[fde_table_in_use - 1];\n+  fde->dw_fde_vms_end_prologue = xstrdup (label);\n+}\n+\n+/* Output a marker (i.e. a label) for the beginning of the generated code\n+   for a function epilogue.  This gets called *before* the prologue code has\n+   been generated.  */\n+\n+void\n+dwarf2out_vms_begin_epilogue (unsigned int line ATTRIBUTE_UNUSED,\n+\t\t\t  const char *file ATTRIBUTE_UNUSED)\n+{\n+  dw_fde_ref fde;\n+  char label[MAX_ARTIFICIAL_LABEL_BYTES];\n+\n+  fde = &fde_table[fde_table_in_use - 1];\n+  if (fde->dw_fde_vms_begin_epilogue)\n+    return;\n+\n+  /* Output a label to mark the endpoint of the code generated for this\n+     function.  */\n+  ASM_GENERATE_INTERNAL_LABEL (label, EPILOGUE_BEGIN_LABEL,\n+\t\t\t       current_function_funcdef_no);\n+  ASM_OUTPUT_DEBUG_LABEL (asm_out_file, EPILOGUE_BEGIN_LABEL,\n+\t\t\t  current_function_funcdef_no);\n+  fde->dw_fde_vms_begin_epilogue = xstrdup (label);\n+}\n+\n /* Output a marker (i.e. a label) for the absolute end of the generated code\n    for a function definition.  This gets called *after* the epilogue code has\n    been generated.  */\n@@ -4193,7 +4251,8 @@ enum dw_val_class\n   dw_val_class_str,\n   dw_val_class_macptr,\n   dw_val_class_file,\n-  dw_val_class_data8\n+  dw_val_class_data8,\n+  dw_val_class_vms_delta\n };\n \n /* Describe a floating point constant value, or a vector constant value.  */\n@@ -4231,6 +4290,11 @@ typedef struct GTY(()) dw_val_struct {\n       unsigned char GTY ((tag (\"dw_val_class_flag\"))) val_flag;\n       struct dwarf_file_data * GTY ((tag (\"dw_val_class_file\"))) val_file;\n       unsigned char GTY ((tag (\"dw_val_class_data8\"))) val_data8[8];\n+      struct dw_val_vms_delta_union\n+\t{\n+\t  char * lbl1;\n+\t  char * lbl2;\n+\t} GTY ((tag (\"dw_val_class_vms_delta\"))) val_vms_delta;\n     }\n   GTY ((desc (\"%1.val_class\"))) v;\n }\n@@ -5466,7 +5530,13 @@ const struct gcc_debug_hooks dwarf2_debug_hooks =\n   dwarf2out_ignore_block,\n   dwarf2out_source_line,\n   dwarf2out_begin_prologue,\n-  debug_nothing_int_charstar,\t/* end_prologue */\n+#if VMS_DEBUGGING_INFO\n+  dwarf2out_vms_end_prologue,\n+  dwarf2out_vms_begin_epilogue,\n+#else\n+  debug_nothing_int_charstar,\n+  debug_nothing_int_charstar,\n+#endif\n   dwarf2out_end_epilogue,\n   dwarf2out_begin_function,\n   debug_nothing_int,\t\t/* end_function */\n@@ -6230,6 +6300,10 @@ static void prune_unused_types_walk_attribs (dw_die_ref);\n static void prune_unused_types_prune (dw_die_ref);\n static void prune_unused_types (void);\n static int maybe_emit_file (struct dwarf_file_data *fd);\n+static inline const char *AT_vms_delta1 (dw_attr_ref);\n+static inline const char *AT_vms_delta2 (dw_attr_ref);\n+static inline void add_AT_vms_delta (dw_die_ref, enum dwarf_attribute,\n+\t\t\t\t     const char *, const char *);\n static void append_entry_to_tmpl_value_parm_die_table (dw_die_ref, tree);\n static void gen_remaining_tmpl_value_param_die_attribute (void);\n \n@@ -6737,14 +6811,24 @@ dwarf_attr_name (unsigned int attr)\n       return \"DW_AT_MIPS_tail_loop_begin\";\n     case DW_AT_MIPS_epilog_begin:\n       return \"DW_AT_MIPS_epilog_begin\";\n+#if VMS_DEBUGGING_INFO\n+    case DW_AT_HP_prologue:\n+      return \"DW_AT_HP_prologue\";\n+#else\n     case DW_AT_MIPS_loop_unroll_factor:\n       return \"DW_AT_MIPS_loop_unroll_factor\";\n+#endif\n     case DW_AT_MIPS_software_pipeline_depth:\n       return \"DW_AT_MIPS_software_pipeline_depth\";\n     case DW_AT_MIPS_linkage_name:\n       return \"DW_AT_MIPS_linkage_name\";\n+#if VMS_DEBUGGING_INFO\n+    case DW_AT_HP_epilogue:\n+      return \"DW_AT_HP_epilogue\";\n+#else\n     case DW_AT_MIPS_stride:\n       return \"DW_AT_MIPS_stride\";\n+#endif\n     case DW_AT_MIPS_abstract_name:\n       return \"DW_AT_MIPS_abstract_name\";\n     case DW_AT_MIPS_clone_origin:\n@@ -7310,6 +7394,21 @@ AT_file (dw_attr_ref a)\n   return a->dw_attr_val.v.val_file;\n }\n \n+/* Add a vms delta attribute value to a DIE.  */\n+\n+static inline void\n+add_AT_vms_delta (dw_die_ref die, enum dwarf_attribute attr_kind,\n+\t\t  const char *lbl1, const char *lbl2)\n+{\n+  dw_attr_node attr;\n+\n+  attr.dw_attr = attr_kind;\n+  attr.dw_attr_val.val_class = dw_val_class_vms_delta;\n+  attr.dw_attr_val.v.val_vms_delta.lbl1 = xstrdup (lbl1);\n+  attr.dw_attr_val.v.val_vms_delta.lbl2 = xstrdup (lbl2);\n+  add_dwarf_attr (die, &attr);\n+}\n+\n /* Add a label identifier attribute value to a DIE.  */\n \n static inline void\n@@ -7381,6 +7480,24 @@ add_AT_range_list (dw_die_ref die, enum dwarf_attribute attr_kind,\n   add_dwarf_attr (die, &attr);\n }\n \n+/* Return the start label of a delta attribute.  */\n+\n+static inline const char *\n+AT_vms_delta1 (dw_attr_ref a)\n+{\n+  gcc_assert (a && (AT_class (a) == dw_val_class_vms_delta));\n+  return a->dw_attr_val.v.val_vms_delta.lbl1;\n+}\n+\n+/* Return the end label of a delta attribute.  */\n+\n+static inline const char *\n+AT_vms_delta2 (dw_attr_ref a)\n+{\n+  gcc_assert (a && (AT_class (a) == dw_val_class_vms_delta));\n+  return a->dw_attr_val.v.val_vms_delta.lbl2;\n+}\n+\n static inline const char *\n AT_lbl (dw_attr_ref a)\n {\n@@ -8178,6 +8295,10 @@ print_die (dw_die_ref die, FILE *outfile)\n \t  else\n \t    fprintf (outfile, \"die -> <null>\");\n \t  break;\n+\tcase dw_val_class_vms_delta:\n+\t  fprintf (outfile, \"delta: @slotcount(%s-%s)\",\n+\t\t   AT_vms_delta2 (a), AT_vms_delta1 (a));\n+\t  break;\n \tcase dw_val_class_lbl_id:\n \tcase dw_val_class_lineptr:\n \tcase dw_val_class_macptr:\n@@ -8356,6 +8477,7 @@ attr_checksum (dw_attr_ref at, struct md5_ctx *ctx, int *mark)\n       break;\n \n     case dw_val_class_fde_ref:\n+    case dw_val_class_vms_delta:\n     case dw_val_class_lbl_id:\n     case dw_val_class_lineptr:\n     case dw_val_class_macptr:\n@@ -9086,6 +9208,7 @@ same_dw_val_p (const dw_val_node *v1, const dw_val_node *v2, int *mark)\n       return same_die_p (v1->v.val_die_ref.die, v2->v.val_die_ref.die, mark);\n \n     case dw_val_class_fde_ref:\n+    case dw_val_class_vms_delta:\n     case dw_val_class_lbl_id:\n     case dw_val_class_lineptr:\n     case dw_val_class_macptr:\n@@ -10267,6 +10390,9 @@ size_of_die (dw_die_ref die)\n \tcase dw_val_class_data8:\n \t  size += 8;\n \t  break;\n+\tcase dw_val_class_vms_delta:\n+\t  size += DWARF_OFFSET_SIZE;\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -10424,6 +10550,7 @@ value_format (dw_attr_ref a)\n       if (dwarf_version >= 4)\n \treturn DW_FORM_sec_offset;\n       /* FALLTHRU */\n+    case dw_val_class_vms_delta:\n     case dw_val_class_offset:\n       switch (DWARF_OFFSET_SIZE)\n \t{\n@@ -10889,6 +11016,12 @@ output_die (dw_die_ref die)\n \t  }\n \t  break;\n \n+\tcase dw_val_class_vms_delta:\n+\t  dw2_asm_output_vms_delta (DWARF_OFFSET_SIZE,\n+\t\t\t\t    AT_vms_delta2 (a), AT_vms_delta1 (a),\n+\t\t\t\t    \"%s\", name);\n+\t  break;\n+\n \tcase dw_val_class_lbl_id:\n \t  dw2_asm_output_addr (DWARF2_ADDR_SIZE, AT_lbl (a), \"%s\", name);\n \t  break;\n@@ -18435,6 +18568,32 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t\t\t       current_function_funcdef_no);\n \t  add_AT_lbl_id (subr_die, DW_AT_high_pc, label_id);\n \n+#if VMS_DEBUGGING_INFO\n+      /* HP OpenVMS Industry Standard 64: DWARF Extensions\n+\t Section 2.3 Prologue and Epilogue Attributes:\n+\t When a breakpoint is set on entry to a function, it is generally\n+\t desirable for execution to be suspended, not on the very first\n+\t instruction of the function, but rather at a point after the\n+\t function's frame has been set up, after any language defined local\n+\t declaration processing has been completed, and before execution of\n+\t the first statement of the function begins. Debuggers generally\n+\t cannot properly determine where this point is.  Similarly for a\n+\t breakpoint set on exit from a function. The prologue and epilogue\n+\t attributes allow a compiler to communicate the location(s) to use.  */\n+\n+      {\n+        dw_fde_ref fde = &fde_table[current_funcdef_fde];\n+\n+        if (fde->dw_fde_vms_end_prologue)\n+          add_AT_vms_delta (subr_die, DW_AT_HP_prologue,\n+\t    fde->dw_fde_begin, fde->dw_fde_vms_end_prologue);\n+\n+        if (fde->dw_fde_vms_begin_epilogue)\n+          add_AT_vms_delta (subr_die, DW_AT_HP_epilogue,\n+\t    fde->dw_fde_begin, fde->dw_fde_vms_begin_epilogue);\n+      }\n+#endif\n+\n \t  add_pubname (decl, subr_die);\n \t  add_arange (decl, subr_die);\n \t}"}, {"sha": "21d87cbfb6ece3fe1760fddb77524cbab00c904d", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -1,5 +1,5 @@\n /* dwarf2out.h - Various declarations for functions found in dwarf2out.c\n-   Copyright (C) 1998, 1999, 2000, 2003, 2007\n+   Copyright (C) 1998, 1999, 2000, 2003, 2007, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -20,7 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n \n extern void dwarf2out_decl (tree);\n extern void dwarf2out_frame_debug (rtx, bool);\n-extern void dwarf2out_begin_epilogue (rtx);\n+extern void dwarf2out_cfi_begin_epilogue (rtx);\n extern void dwarf2out_frame_debug_restore_state (void);\n \n extern void debug_dwarf (void);"}, {"sha": "31e9155ad09c2d80064184f2e3cafcd845c9eb7f", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -1896,8 +1896,9 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \tcase NOTE_INSN_EPILOGUE_BEG:\n #if defined (DWARF2_UNWIND_INFO) && defined (HAVE_epilogue)\n \t  if (dwarf2out_do_frame ())\n-\t    dwarf2out_begin_epilogue (insn);\n+\t    dwarf2out_cfi_begin_epilogue (insn);\n #endif\n+\t  (*debug_hooks->begin_epilogue) (last_linenum, last_filename);\n \t  targetm.asm_out.function_begin_epilogue (file);\n \t  break;\n "}, {"sha": "f0e54bf4052aa3e2f37a91a9414de1df5b8686e6", "filename": "gcc/sdbout.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -1,6 +1,6 @@\n /* Output sdb-format symbol table information from GNU compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -325,6 +325,7 @@ const struct gcc_debug_hooks sdb_debug_hooks =\n   sdbout_begin_prologue,\t         /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n #endif\n+  debug_nothing_int_charstar,\t         /* begin_epilogue */\n   sdbout_end_epilogue,\t\t         /* end_epilogue */\n   sdbout_begin_function,\t         /* begin_function */\n   sdbout_end_function,\t\t         /* end_function */\n@@ -1719,6 +1720,7 @@ const struct gcc_debug_hooks sdb_debug_hooks =\n   0,\t\t/* source_line */\n   0,\t\t/* begin_prologue */\n   0,\t\t/* end_prologue */\n+  0,\t\t/* begin_epilogue */\n   0,\t\t/* end_epilogue */\n   0,\t\t/* begin_function */\n   0,\t\t/* end_function */"}, {"sha": "78d41a4d6b51c1e3215865aa48004134faf14153", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ad2ae729dc1e164675261f354699ca5410a0f0/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=67ad2ae729dc1e164675261f354699ca5410a0f0", "patch": "@@ -1,6 +1,6 @@\n /* Output VMS debug format symbol table information from GCC.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Douglas B. Rupp (rupp@gnat.com).\n    Updated by Bernard W. Giroud (bgiroud@users.sourceforge.net).\n@@ -202,6 +202,7 @@ const struct gcc_debug_hooks vmsdbg_debug_hooks\n    vmsdbgout_source_line,\n    vmsdbgout_begin_prologue,\n    vmsdbgout_end_prologue,\n+   debug_nothing_int_charstar,  /* begin_epilogue */\n    vmsdbgout_end_epilogue,\n    vmsdbgout_begin_function,\n    vmsdbgout_end_function,"}]}