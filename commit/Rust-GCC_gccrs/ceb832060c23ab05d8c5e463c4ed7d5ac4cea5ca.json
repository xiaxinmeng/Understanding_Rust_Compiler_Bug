{"sha": "ceb832060c23ab05d8c5e463c4ed7d5ac4cea5ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ViODMyMDYwYzIzYWIwNWQ4YzVlNDYzYzRlZDdkNWFjNGNlYTVjYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-16T09:16:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-16T09:16:10Z"}, "message": "calls.c (expand_call): Move #ifdef code out of macro argument lists.\n\n`\n        * calls.c (expand_call): Move #ifdef code out of macro argument\n        lists.\n        (emit_library_call, emit_library_call_value): Likewise.\n\nFrom-SVN: r17379", "tree": {"sha": "13a2f669c62210624111751cc01f54d384623eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13a2f669c62210624111751cc01f54d384623eed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceb832060c23ab05d8c5e463c4ed7d5ac4cea5ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb832060c23ab05d8c5e463c4ed7d5ac4cea5ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb832060c23ab05d8c5e463c4ed7d5ac4cea5ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb832060c23ab05d8c5e463c4ed7d5ac4cea5ca/comments", "author": null, "committer": null, "parents": [{"sha": "9a960e6b5b0558400504932c34004c52ea5cca69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a960e6b5b0558400504932c34004c52ea5cca69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a960e6b5b0558400504932c34004c52ea5cca69"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "cf6c3df70dc5a98b7c422c19e2d0d67d0c6562c9", "filename": "gcc/calls.c", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb832060c23ab05d8c5e463c4ed7d5ac4cea5ca/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb832060c23ab05d8c5e463c4ed7d5ac4cea5ca/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ceb832060c23ab05d8c5e463c4ed7d5ac4cea5ca", "patch": "@@ -1723,17 +1723,17 @@ expand_call (exp, target, ignore)\n \t\t\t       BIGGEST_ALIGNMENT / UNITS_PER_WORD) - 1)))\n \tsave_mode = BLKmode;\n \n+#ifdef ARGS_GROW_DOWNWARD\n       stack_area = gen_rtx_MEM (save_mode,\n \t\t\t\tmemory_address (save_mode,\n-\t\t\t\t\t    \n-#ifdef ARGS_GROW_DOWNWARD\n \t\t\t\t\t\tplus_constant (argblock,\n-\t\t\t\t\t\t\t       - high_to_save)\n+\t\t\t\t\t\t\t       - high_to_save)));\n #else\n+      stack_area = gen_rtx_MEM (save_mode,\n+\t\t\t\tmemory_address (save_mode,\n \t\t\t\t\t\tplus_constant (argblock,\n-\t\t\t\t\t\t\t       low_to_save)\n+\t\t\t\t\t\t\t       low_to_save)));\n #endif\n-\t\t\t\t\t\t));\n       if (save_mode == BLKmode)\n \t{\n \t  save_area = assign_stack_temp (BLKmode, num_to_save, 0);\n@@ -2215,17 +2215,19 @@ expand_call (exp, target, ignore)\n       if (save_area)\n \t{\n \t  enum machine_mode save_mode = GET_MODE (save_area);\n+#ifdef ARGS_GROW_DOWNWARD\n \t  rtx stack_area\n \t    = gen_rtx_MEM (save_mode,\n \t\t\t   memory_address (save_mode,\n-#ifdef ARGS_GROW_DOWNWARD\n \t\t\t\t\t   plus_constant (argblock,\n-\t\t\t\t\t\t\t  - high_to_save)\n+\t\t\t\t\t\t\t  - high_to_save)));\n #else\n+\t  rtx stack_area\n+\t    = gen_rtx_MEM (save_mode,\n+\t\t\t   memory_address (save_mode,\n \t\t\t\t\t   plus_constant (argblock,\n-\t\t\t\t\t\t\t  low_to_save)\n+\t\t\t\t\t\t\t  low_to_save)));\n #endif\n-\t\t\t\t\t   ));\n \n \t  if (save_mode != BLKmode)\n \t    emit_move_insn (stack_area, save_area);\n@@ -2574,17 +2576,17 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n \t\t\t       BIGGEST_ALIGNMENT / UNITS_PER_WORD) - 1)))\n \tsave_mode = BLKmode;\n \n+#ifdef ARGS_GROW_DOWNWARD\n       stack_area = gen_rtx_MEM (save_mode,\n \t\t\t\tmemory_address (save_mode,\n-\t\t\t\t\t    \n-#ifdef ARGS_GROW_DOWNWARD\n \t\t\t\t\t\tplus_constant (argblock,\n-\t\t\t\t\t\t\t       - high_to_save)\n+\t\t\t\t\t\t\t       - high_to_save)));\n #else\n+      stack_area = gen_rtx_MEM (save_mode,\n+\t\t\t\tmemory_address (save_mode,\n \t\t\t\t\t\tplus_constant (argblock,\n-\t\t\t\t\t\t\t       low_to_save)\n+\t\t\t\t\t\t\t       low_to_save)));\n #endif\n-\t\t\t\t\t\t));\n       if (save_mode == BLKmode)\n \t{\n \t  save_area = assign_stack_temp (BLKmode, num_to_save, 0);\n@@ -2740,15 +2742,18 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n   if (save_area)\n     {\n       enum machine_mode save_mode = GET_MODE (save_area);\n+#ifdef ARGS_GROW_DOWNWARD\n       rtx stack_area\n \t= gen_rtx_MEM (save_mode,\n \t\t       memory_address (save_mode,\n-#ifdef ARGS_GROW_DOWNWARD\n-\t\t\t\t       plus_constant (argblock, - high_to_save)\n+\t\t\t\t       plus_constant (argblock,\n+\t\t\t\t\t\t       - high_to_save)));\n #else\n-\t\t\t\t       plus_constant (argblock, low_to_save)\n+      rtx stack_area\n+\t= gen_rtx_MEM (save_mode,\n+\t\t       memory_address (save_mode,\n+\t\t\t\t       plus_constant (argblock, low_to_save)));\n #endif\n-\t\t\t\t       ));\n \n       if (save_mode != BLKmode)\n \temit_move_insn (stack_area, save_area);\n@@ -3142,17 +3147,17 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n \t\t\t       BIGGEST_ALIGNMENT / UNITS_PER_WORD) - 1)))\n \tsave_mode = BLKmode;\n \n+#ifdef ARGS_GROW_DOWNWARD\n       stack_area = gen_rtx_MEM (save_mode,\n \t\t\t\tmemory_address (save_mode,\n-\t\t\t\t\t    \n-#ifdef ARGS_GROW_DOWNWARD\n \t\t\t\t\t\tplus_constant (argblock,\n-\t\t\t\t\t\t\t       - high_to_save)\n+\t\t\t\t\t\t\t       - high_to_save)));\n #else\n+      stack_area = gen_rtx_MEM (save_mode,\n+\t\t\t\tmemory_address (save_mode,\n \t\t\t\t\t\tplus_constant (argblock,\n-\t\t\t\t\t\t\t       low_to_save)\n+\t\t\t\t\t\t\t       low_to_save)));\n #endif\n-\t\t\t\t\t\t));\n       if (save_mode == BLKmode)\n \t{\n \t  save_area = assign_stack_temp (BLKmode, num_to_save, 0);\n@@ -3334,15 +3339,18 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n   if (save_area)\n     {\n       enum machine_mode save_mode = GET_MODE (save_area);\n+#ifdef ARGS_GROW_DOWNWARD\n       rtx stack_area\n \t= gen_rtx_MEM (save_mode,\n \t\t       memory_address (save_mode,\n-#ifdef ARGS_GROW_DOWNWARD\n-\t\t\t\t       plus_constant (argblock, - high_to_save)\n+\t\t\t\t       plus_constant (argblock,\n+\t\t\t\t\t\t      - high_to_save)));\n #else\n-\t\t\t\t       plus_constant (argblock, low_to_save)\n+      rtx stack_area\n+\t= gen_rtx_MEM (save_mode,\n+\t\t       memory_address (save_mode,\n+\t\t\t\t       plus_constant (argblock, low_to_save)));\n #endif\n-\t\t\t\t       ));\n       if (save_mode != BLKmode)\n \temit_move_insn (stack_area, save_area);\n       else"}]}