{"sha": "973d2e01cbba2c89bbdf62d004833facc3d95637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczZDJlMDFjYmJhMmM4OWJiZGY2MmQwMDQ4MzNmYWNjM2Q5NTYzNw==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2015-08-27T10:08:54Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2015-08-27T10:08:54Z"}, "message": "aarch64.md (*condjump): Handle functions > 1 MiB.\n\n2015-08-27  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n    gcc/\n    * config/aarch64/aarch64.md (*condjump): Handle functions > 1 MiB.\n    (*cb<optab><mode>1): Likewise.\n    (*tb<optab><mode>1): Likewise.\n    (*cb<optab><mode>1): Likewise.\n    * config/aarch64/iterators.md (inv_cb): New code attribute.\n    (inv_tb): Likewise.\n    * config/aarch64/aarch64.c (aarch64_gen_far_branch): New.\n    * config/aarch64/aarch64-protos.h (aarch64_gen_far_branch): New.\n\n    gcc/testsuite/\n    * gcc.target/aarch64/long_branch_1.c: New test.\n\nFrom-SVN: r227253", "tree": {"sha": "d1f2f1c2c249c6a7184b2ed4347520120dc249ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1f2f1c2c249c6a7184b2ed4347520120dc249ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/973d2e01cbba2c89bbdf62d004833facc3d95637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973d2e01cbba2c89bbdf62d004833facc3d95637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973d2e01cbba2c89bbdf62d004833facc3d95637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973d2e01cbba2c89bbdf62d004833facc3d95637/comments", "author": null, "committer": null, "parents": [{"sha": "3f2dd8cdb9a8a9f4a9ff1b0a3bc05badd2ba936c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2dd8cdb9a8a9f4a9ff1b0a3bc05badd2ba936c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f2dd8cdb9a8a9f4a9ff1b0a3bc05badd2ba936c"}], "stats": {"total": 226, "additions": 211, "deletions": 15}, "files": [{"sha": "ad56ed16b12de5abaf8c32396874b91e56b5a458", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=973d2e01cbba2c89bbdf62d004833facc3d95637", "patch": "@@ -1,3 +1,15 @@\n+2015-08-27  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*condjump): Handle functions > 1 MiB.\n+\t(*cb<optab><mode>1): Likewise.\n+\t(*tb<optab><mode>1): Likewise.\n+\t(*cb<optab><mode>1): Likewise.\n+\t* config/aarch64/iterators.md (inv_cb): New code attribute.\n+\t(inv_tb): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_gen_far_branch): New.\n+\t* config/aarch64/aarch64-protos.h (aarch64_gen_far_branch): New.\n+\n 2015-08-27  Richard Biener  <rguenther@suse.de>\n \n \t* ipa.c (cgraph_build_static_cdtor_1): Set DECL_IGNORED_P."}, {"sha": "5dde59a185278aad78ffcc5e44a40059b0bd53bc", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=973d2e01cbba2c89bbdf62d004833facc3d95637", "patch": "@@ -330,6 +330,7 @@ unsigned aarch64_trampoline_size (void);\n void aarch64_asm_output_labelref (FILE *, const char *);\n void aarch64_cpu_cpp_builtins (cpp_reader *);\n void aarch64_elf_asm_named_section (const char *, unsigned, tree);\n+const char * aarch64_gen_far_branch (rtx *, int, const char *, const char *);\n void aarch64_err_no_fpadvsimd (machine_mode, const char *);\n void aarch64_expand_epilogue (bool);\n void aarch64_expand_mov_immediate (rtx, rtx);"}, {"sha": "b046dae315731ee29d7751e614e57bda834b7e15", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=973d2e01cbba2c89bbdf62d004833facc3d95637", "patch": "@@ -586,6 +586,29 @@ static const char * const aarch64_condition_codes[] =\n   \"hi\", \"ls\", \"ge\", \"lt\", \"gt\", \"le\", \"al\", \"nv\"\n };\n \n+/* Generate code to enable conditional branches in functions over 1 MiB.  */\n+const char *\n+aarch64_gen_far_branch (rtx * operands, int pos_label, const char * dest,\n+\t\t\tconst char * branch_format)\n+{\n+    rtx_code_label * tmp_label = gen_label_rtx ();\n+    char label_buf[256];\n+    char buffer[128];\n+    ASM_GENERATE_INTERNAL_LABEL (label_buf, dest,\n+\t\t\t\t CODE_LABEL_NUMBER (tmp_label));\n+    const char *label_ptr = targetm.strip_name_encoding (label_buf);\n+    rtx dest_label = operands[pos_label];\n+    operands[pos_label] = tmp_label;\n+\n+    snprintf (buffer, sizeof (buffer), \"%s%s\", branch_format, label_ptr);\n+    output_asm_insn (buffer, operands);\n+\n+    snprintf (buffer, sizeof (buffer), \"b\\t%%l%d\\n%s:\", pos_label, label_ptr);\n+    operands[pos_label] = dest_label;\n+    output_asm_insn (buffer, operands);\n+    return \"\";\n+}\n+\n void\n aarch64_err_no_fpadvsimd (machine_mode mode, const char *msg)\n {"}, {"sha": "25229824fb510563bc36dd7f8c5f5bbf84db7ca8", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 74, "deletions": 15, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=973d2e01cbba2c89bbdf62d004833facc3d95637", "patch": "@@ -185,6 +185,13 @@\n \t     (const_string \"no\")\n \t] (const_string \"yes\")))\n \n+;; Attribute that specifies whether we are dealing with a branch to a\n+;; label that is far away, i.e. further away than the maximum/minimum\n+;; representable in a signed 21-bits number.\n+;; 0 :=: no\n+;; 1 :=: yes\n+(define_attr \"far_branch\" \"\" (const_int 0))\n+\n ;; -------------------------------------------------------------------\n ;; Pipeline descriptions and scheduling\n ;; -------------------------------------------------------------------\n@@ -312,8 +319,23 @@\n \t\t\t   (label_ref (match_operand 2 \"\" \"\"))\n \t\t\t   (pc)))]\n   \"\"\n-  \"b%m0\\\\t%l2\"\n-  [(set_attr \"type\" \"branch\")]\n+  {\n+    if (get_attr_length (insn) == 8)\n+      return aarch64_gen_far_branch (operands, 2, \"Lbcond\", \"b%M0\\\\t\");\n+    else\n+      return  \"b%m0\\\\t%l2\";\n+  }\n+  [(set_attr \"type\" \"branch\")\n+   (set (attr \"length\")\n+\t(if_then_else (and (ge (minus (match_dup 2) (pc)) (const_int -1048576))\n+\t\t\t   (lt (minus (match_dup 2) (pc)) (const_int 1048572)))\n+\t\t      (const_int 4)\n+\t\t      (const_int 8)))\n+   (set (attr \"far_branch\")\n+\t(if_then_else (and (ge (minus (match_dup 2) (pc)) (const_int -1048576))\n+\t\t\t   (lt (minus (match_dup 2) (pc)) (const_int 1048572)))\n+\t\t      (const_int 0)\n+\t\t      (const_int 1)))]\n )\n \n (define_expand \"casesi\"\n@@ -492,9 +514,23 @@\n \t\t\t   (label_ref (match_operand 1 \"\" \"\"))\n \t\t\t   (pc)))]\n   \"\"\n-  \"<cbz>\\\\t%<w>0, %l1\"\n-  [(set_attr \"type\" \"branch\")]\n-\n+  {\n+    if (get_attr_length (insn) == 8)\n+      return aarch64_gen_far_branch (operands, 1, \"Lcb\", \"<inv_cb>\\\\t%<w>0, \");\n+    else\n+      return \"<cbz>\\\\t%<w>0, %l1\";\n+  }\n+  [(set_attr \"type\" \"branch\")\n+   (set (attr \"length\")\n+\t(if_then_else (and (ge (minus (match_dup 1) (pc)) (const_int -1048576))\n+\t\t\t   (lt (minus (match_dup 1) (pc)) (const_int 1048572)))\n+\t\t      (const_int 4)\n+\t\t      (const_int 8)))\n+   (set (attr \"far_branch\")\n+\t(if_then_else (and (ge (minus (match_dup 2) (pc)) (const_int -1048576))\n+\t\t\t   (lt (minus (match_dup 2) (pc)) (const_int 1048572)))\n+\t\t      (const_int 0)\n+\t\t      (const_int 1)))]\n )\n \n (define_insn \"*tb<optab><mode>1\"\n@@ -510,8 +546,14 @@\n   {\n     if (get_attr_length (insn) == 8)\n       {\n-\toperands[1] = GEN_INT (HOST_WIDE_INT_1U << UINTVAL (operands[1]));\n-\treturn \"tst\\t%<w>0, %1\\;<bcond>\\t%l2\";\n+\tif (get_attr_far_branch (insn) == 1)\n+\t  return aarch64_gen_far_branch (operands, 2, \"Ltb\",\n+\t\t\t\t\t \"<inv_tb>\\\\t%<w>0, %1, \");\n+\telse\n+\t  {\n+\t    operands[1] = GEN_INT (HOST_WIDE_INT_1U << UINTVAL (operands[1]));\n+\t    return \"tst\\t%<w>0, %1\\;<bcond>\\t%l2\";\n+\t  }\n       }\n     else\n       return \"<tbz>\\t%<w>0, %1, %l2\";\n@@ -521,7 +563,13 @@\n \t(if_then_else (and (ge (minus (match_dup 2) (pc)) (const_int -32768))\n \t\t\t   (lt (minus (match_dup 2) (pc)) (const_int 32764)))\n \t\t      (const_int 4)\n-\t\t      (const_int 8)))]\n+\t\t      (const_int 8)))\n+   (set (attr \"far_branch\")\n+\t(if_then_else (and (ge (minus (match_dup 2) (pc)) (const_int -1048576))\n+\t\t\t   (lt (minus (match_dup 2) (pc)) (const_int 1048572)))\n+\t\t      (const_int 0)\n+\t\t      (const_int 1)))]\n+\n )\n \n (define_insn \"*cb<optab><mode>1\"\n@@ -534,12 +582,18 @@\n   {\n     if (get_attr_length (insn) == 8)\n       {\n-\tchar buf[64];\n-\tuint64_t val = ((uint64_t ) 1)\n-\t\t\t<< (GET_MODE_SIZE (<MODE>mode) * BITS_PER_UNIT - 1);\n-\tsprintf (buf, \"tst\\t%%<w>0, %\" PRId64, val);\n-\toutput_asm_insn (buf, operands);\n-\treturn \"<bcond>\\t%l1\";\n+\tif (get_attr_far_branch (insn) == 1)\n+\t  return aarch64_gen_far_branch (operands, 1, \"Ltb\",\n+\t\t\t\t\t \"<inv_tb>\\\\t%<w>0, <sizem1>, \");\n+\telse\n+\t  {\n+\t    char buf[64];\n+\t    uint64_t val = ((uint64_t) 1)\n+\t\t<< (GET_MODE_SIZE (<MODE>mode) * BITS_PER_UNIT - 1);\n+\t    sprintf (buf, \"tst\\t%%<w>0, %\" PRId64, val);\n+\t    output_asm_insn (buf, operands);\n+\t    return \"<bcond>\\t%l1\";\n+\t  }\n       }\n     else\n       return \"<tbz>\\t%<w>0, <sizem1>, %l1\";\n@@ -549,7 +603,12 @@\n \t(if_then_else (and (ge (minus (match_dup 1) (pc)) (const_int -32768))\n \t\t\t   (lt (minus (match_dup 1) (pc)) (const_int 32764)))\n \t\t      (const_int 4)\n-\t\t      (const_int 8)))]\n+\t\t      (const_int 8)))\n+   (set (attr \"far_branch\")\n+\t(if_then_else (and (ge (minus (match_dup 1) (pc)) (const_int -1048576))\n+\t\t\t   (lt (minus (match_dup 1) (pc)) (const_int 1048572)))\n+\t\t      (const_int 0)\n+\t\t      (const_int 1)))]\n )\n \n ;; -------------------------------------------------------------------"}, {"sha": "475aa6e6d37c78a455e22e26990504b3d96a2f80", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=973d2e01cbba2c89bbdf62d004833facc3d95637", "patch": "@@ -817,9 +817,15 @@\n ;; Emit cbz/cbnz depending on comparison type.\n (define_code_attr cbz [(eq \"cbz\") (ne \"cbnz\") (lt \"cbnz\") (ge \"cbz\")])\n \n+;; Emit inverted cbz/cbnz depending on comparison type.\n+(define_code_attr inv_cb [(eq \"cbnz\") (ne \"cbz\") (lt \"cbz\") (ge \"cbnz\")])\n+\n ;; Emit tbz/tbnz depending on comparison type.\n (define_code_attr tbz [(eq \"tbz\") (ne \"tbnz\") (lt \"tbnz\") (ge \"tbz\")])\n \n+;; Emit inverted tbz/tbnz depending on comparison type.\n+(define_code_attr inv_tb [(eq \"tbnz\") (ne \"tbz\") (lt \"tbz\") (ge \"tbnz\")])\n+\n ;; Max/min attributes.\n (define_code_attr maxmin [(smax \"max\")\n \t\t\t  (smin \"min\")"}, {"sha": "2abe06d8095389471c166ba6676e9ae6a1e79c35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=973d2e01cbba2c89bbdf62d004833facc3d95637", "patch": "@@ -1,3 +1,7 @@\n+2015-08-27  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/aarch64/long_branch_1.c: New test.\n+\n 2015-08-27  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/20150826-1.c: New test."}, {"sha": "46f500d36a2d9ff04f71ae0bcc7c47e3d0b92c1b", "filename": "gcc/testsuite/gcc.target/aarch64/long_branch_1.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flong_branch_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973d2e01cbba2c89bbdf62d004833facc3d95637/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flong_branch_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flong_branch_1.c?ref=973d2e01cbba2c89bbdf62d004833facc3d95637", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do assemble } */\n+/* { dg-timeout-factor 2.0 } */\n+/* { dg-options \"-O1 -fno-reorder-blocks -fno-tree-cselim --save-temps\" } */\n+\n+\n+__attribute__((noinline, noclone)) int\n+restore (int a, int b)\n+{\n+  return a * b;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+do_nothing (int *input)\n+{\n+  *input = restore (*input, 1);\n+  return;\n+}\n+#define ENTRY_SUM(n, x) \\\n+    sum = sum / ((n) + (x)); \\\n+    sum = restore (sum, (n) + (x));\n+\n+#define ENTRY_SUM2(n, x) ENTRY_SUM ((n), (x)) ENTRY_SUM ((n), (x)+1)\n+#define ENTRY_SUM4(n, x) ENTRY_SUM2 ((n), (x)) ENTRY_SUM2 ((n), (x)+2)\n+#define ENTRY_SUM8(n, x) ENTRY_SUM4 ((n), (x)) ENTRY_SUM4 ((n), (x)+4)\n+#define ENTRY_SUM16(n, x) ENTRY_SUM8 ((n), (x)) ENTRY_SUM8 ((n), (x)+8)\n+#define ENTRY_SUM32(n, x) ENTRY_SUM16 ((n), (x)) ENTRY_SUM16 ((n), (x)+16)\n+#define ENTRY_SUM64(n, x) ENTRY_SUM32 ((n), (x)) ENTRY_SUM32 ((n), (x)+32)\n+#define ENTRY_SUM128(n, x) ENTRY_SUM64 ((n), (x)) ENTRY_SUM64 ((n), (x)+64)\n+\n+#define CASE_ENTRY(n) \\\n+  case n: \\\n+    sum = sum / (n + 1); \\\n+    sum = restore (sum, n + 1); \\\n+    if (sum == (n + addend)) \\\n+      break;\\\n+    ENTRY_SUM128 ((n), 2) \\\n+    ENTRY_SUM16 ((n), 130) \\\n+    break;\n+\n+#define CASE_ENTRY2(n) CASE_ENTRY ((n)) CASE_ENTRY ((n)+1)\n+#define CASE_ENTRY4(n) CASE_ENTRY2 ((n)) CASE_ENTRY2 ((n)+2)\n+#define CASE_ENTRY8(n) CASE_ENTRY4 ((n)) CASE_ENTRY4 ((n)+4)\n+#define CASE_ENTRY16(n) CASE_ENTRY8 ((n)) CASE_ENTRY8 ((n)+8)\n+#define CASE_ENTRY32(n) CASE_ENTRY16 ((n)) CASE_ENTRY16 ((n)+16)\n+#define CASE_ENTRY64(n) CASE_ENTRY32 ((n)) CASE_ENTRY32 ((n)+32)\n+#define CASE_ENTRY128(n) CASE_ENTRY64 ((n)) CASE_ENTRY64 ((n)+64)\n+\n+__attribute__((noinline, noclone)) long long\n+test_and_branch (int selector, int addend, int cond)\n+{\n+  long long sum = selector + 1;\n+\n+  if (selector > 200)\n+    {\n+start0:\n+      return sum - 1;\n+start1:\n+      return sum + 1;\n+start2:\n+      return sum;\n+start3:\n+      return sum - 2;\n+    }\n+  else\n+    {\n+      switch (selector)\n+\t{\n+\t  CASE_ENTRY128 (1)\n+\t  CASE_ENTRY64 (129)\n+\t  CASE_ENTRY16 (193)\n+\t}\n+\n+      do_nothing ((int *)&sum);\n+\n+      if (cond == 0)\n+\tgoto start0;\n+      else if (cond < 0)\n+\tgoto start1;\n+      else if ((cond & 0x010) != 0)\n+\tgoto start2;\n+      else if (cond >= 14)\n+\tgoto start3;\n+\n+    }\n+\n+  return -1;\n+}\n+\n+/* { dg-final { scan-assembler \"Lbcond\" } } */\n+/* { dg-final { scan-assembler \"Lcb\" } } */\n+/* { dg-final { scan-assembler \"Ltb\" } } */"}]}