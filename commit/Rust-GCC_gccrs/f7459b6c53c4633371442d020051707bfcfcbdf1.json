{"sha": "f7459b6c53c4633371442d020051707bfcfcbdf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc0NTliNmM1M2M0NjMzMzcxNDQyZDAyMDA1MTcwN2JmY2ZjYmRmMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-02-10T08:29:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-10T08:29:57Z"}, "message": "condition_variable (condition_variable): Remove _M_internal_mutex.\n\n2009-02-09  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/condition_variable (condition_variable): Remove\n\t_M_internal_mutex. Add private __native_type typedef.\n\t* src/condition_variable.cc (condition_variable::notify_one):\n\tRemove _M_internal_mutex use. Use typedef.\n\t(condition_variable::notify_all): Same.\n\t* include/std/mutex (mutex): Add private __native_type typedef. Use it.\n\t(recursive_mutex): Same.\n\t(timed_mutex): Same.\n\t(recursive_timed_mutex): Same.\n\t(once_flag): Make __native_type typedef private.\n\n\t* include/std/thread (this_thread): Add minimal markup.\n\n\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc:\n\tAdjust line numbers.\n\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/mutex/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/mutex/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/thread/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/thread/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/condition_variable/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/condition_variable/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc: Same.\n\n\t* testsuite/util/thread/all.h: Testsuite utilities for testing thread.\n\t* testsuite/30_threads/condition_variable_any/native_handle/\n\ttypesizes.cc: New.\n\t* testsuite/30_threads/mutex/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/timed_mutex/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/thread/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/recursive_mutex/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/condition_variable/native_handle/\n\ttypesizes.cc: Same.\n\t* testsuite/30_threads/recursive_timed_mutex/native_handle/\n\ttypesizes.cc: Same.\n\nFrom-SVN: r144053", "tree": {"sha": "19f878843cba38e4bd49fe8d61f7521c7fad4342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19f878843cba38e4bd49fe8d61f7521c7fad4342"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7459b6c53c4633371442d020051707bfcfcbdf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7459b6c53c4633371442d020051707bfcfcbdf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7459b6c53c4633371442d020051707bfcfcbdf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7459b6c53c4633371442d020051707bfcfcbdf1/comments", "author": null, "committer": null, "parents": [{"sha": "7314b35ac278e60dd6576ffbab0b80dd4de74a69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7314b35ac278e60dd6576ffbab0b80dd4de74a69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7314b35ac278e60dd6576ffbab0b80dd4de74a69"}], "stats": {"total": 667, "additions": 509, "deletions": 158}, "files": [{"sha": "b04ae7d8878a7489c92dd2221d3cc9d9f2c8be78", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -1,3 +1,46 @@\n+2009-02-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/condition_variable (condition_variable): Remove\n+\t_M_internal_mutex. Add private __native_type typedef.\n+\t* src/condition_variable.cc (condition_variable::notify_one):\n+\tRemove _M_internal_mutex use. Use typedef.\n+\t(condition_variable::notify_all): Same.\n+\t* include/std/mutex (mutex): Add private __native_type typedef. Use it.\n+\t(recursive_mutex): Same.\n+\t(timed_mutex): Same.\n+\t(recursive_timed_mutex): Same.\n+\t(once_flag): Make __native_type typedef private.\n+\n+\t* include/std/thread (this_thread): Add minimal markup.\n+\n+\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc:\n+\tAdjust line numbers.\n+\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/mutex/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/mutex/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/thread/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/thread/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/condition_variable/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/condition_variable/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc: Same.\n+\n+\t* testsuite/util/thread/all.h: Testsuite utilities for testing thread.\n+\t* testsuite/30_threads/condition_variable_any/native_handle/\n+\ttypesizes.cc: New.\n+\t* testsuite/30_threads/mutex/native_handle/typesizes.cc: Same.\n+\t* testsuite/30_threads/timed_mutex/native_handle/typesizes.cc: Same.\n+\t* testsuite/30_threads/thread/native_handle/typesizes.cc: Same.\n+\t* testsuite/30_threads/recursive_mutex/native_handle/typesizes.cc: Same.\n+\t* testsuite/30_threads/condition_variable/native_handle/\n+\ttypesizes.cc: Same.\n+\t* testsuite/30_threads/recursive_timed_mutex/native_handle/\n+\ttypesizes.cc: Same.\n+\n 2009-02-09  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n \tPR testsuite/33300"}, {"sha": "0c28b18fb6dcb3a75077e877a37a327f8f63b53a", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -1,6 +1,6 @@\n // <condition_variable> -*- C++ -*-\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -50,10 +50,12 @@ namespace std\n   /// condition_variable\n   class condition_variable\n   {\n-    typedef chrono::system_clock __clock_t;\n+    typedef chrono::system_clock\t__clock_t;\n+    typedef __gthread_cond_t\t\t__native_type;\n+    __native_type\t\t\t_M_cond;\n \n   public:\n-    typedef __gthread_cond_t* native_handle_type;\n+    typedef __native_type* \t\tnative_handle_type;\n \n     condition_variable();\n     ~condition_variable();\n@@ -104,8 +106,8 @@ namespace std\n \t\t const chrono::time_point<_Clock, _Duration>& __atime,\n \t\t _Predicate __p)\n       {\n-\twhile(!__p())\n-\t  if(!wait_until(__lock, __atime))\n+\twhile (!__p())\n+\t  if (!wait_until(__lock, __atime))\n \t    return __p();\n \t\n \treturn true;\n@@ -129,9 +131,6 @@ namespace std\n     { return &_M_cond; }\n \n   private:\n-    __gthread_cond_t _M_cond;\n-    mutex _M_internal_mutex;\n-\n     template<typename _Clock, typename _Duration>\n       bool\n       __wait_until_impl(unique_lock<mutex>& __lock,\n@@ -160,8 +159,11 @@ namespace std\n   // Like above, only mutex may not have try_lock.\n   class condition_variable_any\n   {\n+    typedef __gthread_cond_t\t\t__native_type;\n+    __native_type\t\t\t_M_cond;\n+\n   public:\n-    typedef __gthread_cond_t* native_handle_type;\n+    typedef __native_type* \t\tnative_handle_type;\n \n     condition_variable_any();\n     ~condition_variable_any();\n@@ -208,9 +210,6 @@ namespace std\n     native_handle_type \n     native_handle()\n     { return &_M_cond; }\n-\n-  private:\n-    __gthread_cond_t _M_cond;\n   };\n }\n "}, {"sha": "22aff881335265fdfc44a073172d06f95cbf9fcc", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 114, "deletions": 110, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -59,14 +59,17 @@ namespace std\n   /// mutex\n   class mutex\n   {\n+    typedef __gthread_mutex_t\t\t\t__native_type;\n+    __native_type  _M_mutex;\n+\n   public:\n-    typedef __gthread_mutex_t* native_handle_type;\n+    typedef __native_type* \t\t\tnative_handle_type;\n \n     mutex()\n     {\n       // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n #ifdef __GTHREAD_MUTEX_INIT\n-      __gthread_mutex_t __tmp = __GTHREAD_MUTEX_INIT;\n+      __native_type __tmp = __GTHREAD_MUTEX_INIT;\n       _M_mutex = __tmp;\n #else\n       __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);\n@@ -103,22 +106,22 @@ namespace std\n     native_handle_type\n     native_handle()\n     { return &_M_mutex; }\n-\n-  private:\n-    __gthread_mutex_t _M_mutex;\n   };\n \n   /// recursive_mutex\n   class recursive_mutex\n   {\n+    typedef __gthread_recursive_mutex_t\t\t__native_type;\n+    __native_type  _M_mutex;\n+\n   public:\n-    typedef __gthread_recursive_mutex_t* native_handle_type;\n+    typedef __native_type* \t\t\tnative_handle_type;\n \n     recursive_mutex()\n     {\n       // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n #ifdef __GTHREAD_RECURSIVE_MUTEX_INIT\n-      __gthread_recursive_mutex_t __tmp = __GTHREAD_RECURSIVE_MUTEX_INIT;\n+      __native_type __tmp = __GTHREAD_RECURSIVE_MUTEX_INIT;\n       _M_mutex = __tmp;\n #else\n       __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION(&_M_mutex);\n@@ -155,21 +158,28 @@ namespace std\n     native_handle_type\n     native_handle()\n     { return &_M_mutex; }\n-\n-  private:\n-    __gthread_recursive_mutex_t  _M_mutex;\n   };\n \n   /// timed_mutex\n   class timed_mutex\n-  {  \n+  {\n+    typedef __gthread_mutex_t \t\t  \t__native_type;\n+\n+#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n+    typedef chrono::monotonic_clock \t  \t__clock_t;\n+#else\n+    typedef chrono::high_resolution_clock \t__clock_t;\n+#endif\n+\n+    __native_type  _M_mutex;\n+\n   public:\n-    typedef __gthread_mutex_t* native_handle_type;\n+    typedef __native_type* \t\t  \tnative_handle_type;\n \n     timed_mutex()\n     {\n #ifdef __GTHREAD_MUTEX_INIT\n-      __gthread_mutex_t __tmp = __GTHREAD_MUTEX_INIT;\n+      __native_type __tmp = __GTHREAD_MUTEX_INIT;\n       _M_mutex = __tmp;\n #else\n       __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);\n@@ -204,19 +214,19 @@ namespace std\n     template <class _Clock, class _Duration>\n       bool\n       try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n-      { \n+      {\n \tchrono::time_point<_Clock, chrono::seconds> __s =\n-          chrono::time_point_cast<chrono::seconds>(__atime);\n+\t  chrono::time_point_cast<chrono::seconds>(__atime);\n \n \tchrono::nanoseconds __ns =\n-          chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n+\t  chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n \n-        __gthread_time_t __ts = {\n-          static_cast<std::time_t>(__s.time_since_epoch().count()),\n-          static_cast<long>(__ns.count())\n-        };\n+\t__gthread_time_t __ts = {\n+\t  static_cast<std::time_t>(__s.time_since_epoch().count()),\n+\t  static_cast<long>(__ns.count())\n+\t};\n \n-\treturn !__gthread_mutex_timedlock(&_M_mutex, &__ts);\t\n+\treturn !__gthread_mutex_timedlock(&_M_mutex, &__ts);\n       }\n \n     void\n@@ -229,50 +239,52 @@ namespace std\n     native_handle_type\n     native_handle()\n     { return &_M_mutex; }\n-    \n-  private:\n-    __gthread_mutex_t _M_mutex;\n-    \n-#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n-    typedef chrono::monotonic_clock __clock_t;\n-#else\n-    typedef chrono::high_resolution_clock __clock_t;\n-#endif\n \n+  private:\n     template<typename _Rep, typename _Period>\n       typename enable_if<\n-        ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+\tratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n       __try_lock_for_impl(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n-        __clock_t::time_point __atime = __clock_t::now()\n-          + chrono::duration_cast<__clock_t::duration>(__rtime);\n+\t__clock_t::time_point __atime = __clock_t::now()\n+\t  + chrono::duration_cast<__clock_t::duration>(__rtime);\n \n-        return try_lock_until(__atime);\n+\treturn try_lock_until(__atime);\n       }\n \n     template <typename _Rep, typename _Period>\n       typename enable_if<\n-        !ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+\t!ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n       __try_lock_for_impl(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n-        __clock_t::time_point __atime = __clock_t::now()\n+\t__clock_t::time_point __atime = __clock_t::now()\n \t  + ++chrono::duration_cast<__clock_t::duration>(__rtime);\n \n-        return try_lock_until(__atime);\n+\treturn try_lock_until(__atime);\n       }\n   };\n \n   /// recursive_timed_mutex\n   class recursive_timed_mutex\n   {\n+    typedef __gthread_recursive_mutex_t\t\t__native_type;\n+\n+#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n+    typedef chrono::monotonic_clock \t\t__clock_t;\n+#else\n+    typedef chrono::high_resolution_clock \t__clock_t;\n+#endif\n+\n+    __native_type  _M_mutex;\n+\n   public:\n-    typedef __gthread_recursive_mutex_t* native_handle_type;\n+    typedef __native_type* \t\t\tnative_handle_type;\n \n     recursive_timed_mutex()\n     {\n       // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n #ifdef __GTHREAD_RECURSIVE_MUTEX_INIT\n-      __gthread_recursive_mutex_t __tmp = __GTHREAD_RECURSIVE_MUTEX_INIT;\n+      __native_type __tmp = __GTHREAD_RECURSIVE_MUTEX_INIT;\n       _M_mutex = __tmp;\n #else\n       __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION(&_M_mutex);\n@@ -307,19 +319,19 @@ namespace std\n     template <class _Clock, class _Duration>\n       bool\n       try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n-      { \n+      {\n \tchrono::time_point<_Clock, chrono::seconds>  __s =\n-          chrono::time_point_cast<chrono::seconds>(__atime);\n+\t  chrono::time_point_cast<chrono::seconds>(__atime);\n \n \tchrono::nanoseconds __ns =\n-          chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n+\t  chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n \n-        __gthread_time_t __ts = {\n-          static_cast<std::time_t>(__s.time_since_epoch().count()),\n-          static_cast<long>(__ns.count())\n-        };\n+\t__gthread_time_t __ts = {\n+\t  static_cast<std::time_t>(__s.time_since_epoch().count()),\n+\t  static_cast<long>(__ns.count())\n+\t};\n \n-        return !__gthread_recursive_mutex_timedlock(&_M_mutex, &__ts);\n+\treturn !__gthread_recursive_mutex_timedlock(&_M_mutex, &__ts);\n       }\n \n     void\n@@ -334,34 +346,26 @@ namespace std\n     { return &_M_mutex; }\n \n   private:\n-    __gthread_recursive_mutex_t _M_mutex;\n-\n-#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n-    typedef chrono::monotonic_clock __clock_t;\n-#else\n-    typedef chrono::high_resolution_clock __clock_t;\n-#endif\n-\n     template<typename _Rep, typename _Period>\n       typename enable_if<\n-        ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+\tratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n       __try_lock_for_impl(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n-        __clock_t::time_point __atime = __clock_t::now()\n-          + chrono::duration_cast<__clock_t::duration>(__rtime);\n+\t__clock_t::time_point __atime = __clock_t::now()\n+\t  + chrono::duration_cast<__clock_t::duration>(__rtime);\n \n-        return try_lock_until(__atime);\n+\treturn try_lock_until(__atime);\n       }\n \n     template <typename _Rep, typename _Period>\n       typename enable_if<\n-        !ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+\t!ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n       __try_lock_for_impl(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n-        __clock_t::time_point __atime = __clock_t::now()\n+\t__clock_t::time_point __atime = __clock_t::now()\n \t  + ++chrono::duration_cast<__clock_t::duration>(__rtime);\n \n-        return try_lock_until(__atime);\n+\treturn try_lock_until(__atime);\n       }\n   };\n \n@@ -418,7 +422,7 @@ namespace std\n     {\n     public:\n       typedef _Mutex mutex_type;\n-      \n+\n       unique_lock()\n       : _M_device(0), _M_owns(false)\n       { }\n@@ -445,13 +449,13 @@ namespace std\n       }\n \n       template<typename _Clock, typename _Duration>\n-\tunique_lock(mutex_type& __m, \n+\tunique_lock(mutex_type& __m,\n \t\t    const chrono::time_point<_Clock, _Duration>& __atime)\n \t: _M_device(&__m), _M_owns(_M_device->try_lock_until(__atime))\n \t{ }\n \n       template<typename _Rep, typename _Period>\n-\tunique_lock(mutex_type& __m, \n+\tunique_lock(mutex_type& __m,\n \t\t    const chrono::duration<_Rep, _Period>& __rtime)\n \t: _M_device(&__m), _M_owns(_M_device->try_lock_for(__rtime))\n \t{ }\n@@ -474,14 +478,14 @@ namespace std\n \n       unique_lock& operator=(unique_lock&& __u)\n       {\n-        if(_M_owns)\n+\tif(_M_owns)\n \t  unlock();\n-\t\n+\n \tunique_lock(std::move(__u)).swap(*this);\n \n \t__u._M_device = 0;\n \t__u._M_owns = false;\n-\t\n+\n \treturn *this;\n       }\n \n@@ -503,20 +507,20 @@ namespace std\n       try_lock()\n       {\n \tif (!_M_device)\n-          __throw_system_error((int)errc::operation_not_permitted);\n-        else if (_M_owns)\n-          __throw_system_error((int)errc::resource_deadlock_would_occur);\n-        else\n+\t  __throw_system_error((int)errc::operation_not_permitted);\n+\telse if (_M_owns)\n+\t  __throw_system_error((int)errc::resource_deadlock_would_occur);\n+\telse\n \t  {\n-\t    _M_owns = _M_device->try_lock();\t    \n+\t    _M_owns = _M_device->try_lock();\n \t    return _M_owns;\n \t  }\n       }\n \n       template<typename _Clock, typename _Duration>\n-        bool\n-        try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n-        {\n+\tbool\n+\ttry_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n+\t{\n \t  if (!_M_device)\n \t    __throw_system_error((int)errc::operation_not_permitted);\n \t  else if (_M_owns)\n@@ -527,11 +531,11 @@ namespace std\n \t      return _M_owns;\n \t    }\n \t}\n-      \n+\n       template<typename _Rep, typename _Period>\n \tbool\n \ttry_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n-        {\n+\t{\n \t  if (!_M_device)\n \t    __throw_system_error((int)errc::operation_not_permitted);\n \t  else if (_M_owns)\n@@ -546,15 +550,15 @@ namespace std\n       void\n       unlock()\n       {\n-        if (!_M_owns)\n-          __throw_system_error((int)errc::operation_not_permitted);\n-        else if (_M_device)\n-          {\n-            _M_device->unlock();\n-            _M_owns = false;\n-          }\n+\tif (!_M_owns)\n+\t  __throw_system_error((int)errc::operation_not_permitted);\n+\telse if (_M_device)\n+\t  {\n+\t    _M_device->unlock();\n+\t    _M_owns = false;\n+\t  }\n       }\n-      \n+\n       void\n       swap(unique_lock&& __u)\n       {\n@@ -606,30 +610,30 @@ namespace std\n     struct __unlock_impl\n     {\n       template<typename... _Lock>\n-        static void\n-        __do_unlock(tuple<_Lock&...>& __locks)\n-        {\n+\tstatic void\n+\t__do_unlock(tuple<_Lock&...>& __locks)\n+\t{\n \t  std::get<_Idx>(__locks).unlock();\n \t  __unlock_impl<_Idx - 1>::__do_unlock(__locks);\n \t}\n     };\n-  \n+\n   template<>\n     struct __unlock_impl<-1>\n     {\n       template<typename... _Lock>\n-        static void\n-        __do_unlock(tuple<_Lock&...>&)\n-        { }\n+\tstatic void\n+\t__do_unlock(tuple<_Lock&...>&)\n+\t{ }\n     };\n \n   template<int _Idx, bool _Continue = true>\n     struct __try_lock_impl\n     {\n       template<typename... _Lock>\n-        static int\n-        __do_try_lock(tuple<_Lock&...>& __locks)\n-        {\n+\tstatic int\n+\t__do_try_lock(tuple<_Lock&...>& __locks)\n+\t{\n \t  if(std::get<_Idx>(__locks).try_lock())\n \t    {\n \t      return __try_lock_impl<_Idx + 1,\n@@ -642,14 +646,14 @@ namespace std\n \t    }\n \t}\n     };\n-  \n+\n   template<int _Idx>\n     struct __try_lock_impl<_Idx, false>\n     {\n       template<typename... _Lock>\n-        static int\n-        __do_try_lock(tuple<_Lock&...>& __locks)\n-        {\n+\tstatic int\n+\t__do_try_lock(tuple<_Lock&...>& __locks)\n+\t{\n \t  if(std::get<_Idx>(__locks).try_lock())\n \t    return -1;\n \t  else\n@@ -659,12 +663,12 @@ namespace std\n \t    }\n \t}\n     };\n-  \n+\n   /** @brief Generic try_lock.\n    *  @param __l1 Meets Mutex requirements (try_lock() may throw).\n    *  @param __l2 Meets Mutex requirements (try_lock() may throw).\n    *  @param __l3 Meets Mutex requirements (try_lock() may throw).\n-   *  @return Returns -1 if all try_lock() calls return true. Otherwise returns \n+   *  @return Returns -1 if all try_lock() calls return true. Otherwise returns\n    *          a 0-based index corresponding to the argument that returned false.\n    *  @post Either all arguments are locked, or none will be.\n    *\n@@ -685,31 +689,31 @@ namespace std\n   /// once_flag\n   struct once_flag\n   {\n+  private:\n     typedef __gthread_once_t __native_type;\n+    __native_type  _M_once;\n \n+  public:\n     once_flag()\n     {\n-      __gthread_once_t __tmp = __GTHREAD_ONCE_INIT;\n+      __native_type __tmp = __GTHREAD_ONCE_INIT;\n       _M_once = __tmp;\n     }\n-    \n+\n     once_flag(const once_flag&) = delete;\n     once_flag& operator=(const once_flag&) = delete;\n \n     template<typename _Callable, typename... _Args>\n       friend void\n       call_once(once_flag& __once, _Callable __f, _Args&&... __args);\n-\n-  private:\n-    __native_type  _M_once;\n   };\n \n #ifdef _GLIBCXX_HAVE_TLS\n   extern __thread void* __once_callable;\n   extern __thread void (*__once_call)();\n \n   template<typename _Callable>\n-    inline void \n+    inline void\n     __once_call_impl()\n     {\n       (*(_Callable*)__once_callable)();\n@@ -736,10 +740,10 @@ namespace std\n       __functor_lock.lock();\n       __once_functor = bind(__f, __args...);\n #endif\n-     \n+\n       int __e = __gthread_once(&(__once._M_once), &__once_proxy);\n \n-#ifndef _GLIBCXX_HAVE_TLS      \n+#ifndef _GLIBCXX_HAVE_TLS\n       if (__functor_lock)\n \t__functor_lock.unlock();\n #endif"}, {"sha": "b527d59caf7b45338a12bc403470ca0076c6928a", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -57,7 +57,9 @@ namespace std\n   class thread\n   {\n   public:\n-    typedef __gthread_t \t \tnative_handle_type;\n+    typedef __gthread_t\t \t\tnative_handle_type;\n+    struct _Impl_base;\n+    typedef shared_ptr<_Impl_base>\t__shared_base_type;\n \n     /// thread::id\n     class id\n@@ -86,9 +88,6 @@ namespace std\n \toperator<<(basic_ostream<_CharT, _Traits>&& __out, thread::id __id);\n     };\n \n-    struct _Impl_base;\n-    typedef shared_ptr<_Impl_base>\t__shared_base_type;\n-\n     struct _Impl_base\n     {\n       id\t\t\t_M_id;\n@@ -239,21 +238,25 @@ namespace std\n   // 30.2.2 Namespace this_thread.\n   namespace this_thread\n   {\n+    /// get_id\n     inline thread::id\n     get_id() { return thread::id(__gthread_self()); }\n \n #ifdef _GLIBCXX_USE_SCHED_YIELD\n+    /// yield\n     inline void\n     yield()\n     { __gthread_yield(); }\n #endif\n \n #ifdef _GLIBCXX_USE_NANOSLEEP\n+    /// sleep_until\n     template<typename _Clock, typename _Duration>\n       inline void\n       sleep_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       { sleep_for(__atime - _Clock::now()); }\n \n+    /// sleep_for\n     template<typename _Rep, typename _Period>\n       inline void\n       sleep_for(const chrono::duration<_Rep, _Period>& __rtime)"}, {"sha": "c916bf0c2052e08ba3af5da45cba7624a4039b28", "filename": "libstdc++-v3/src/condition_variable.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -1,6 +1,6 @@\n // condition_variable -*- C++ -*-\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,7 +36,7 @@ namespace std\n   condition_variable::condition_variable()\n   {\n #ifdef __GTHREAD_COND_INIT\n-    __gthread_cond_t __tmp = __GTHREAD_COND_INIT;\n+    __native_type __tmp = __GTHREAD_COND_INIT;\n     _M_cond = __tmp;\n #else\n     int __e = __gthread_cond_init(&_M_cond, NULL);\n@@ -65,7 +65,6 @@ namespace std\n   void \n   condition_variable::notify_one()\n   { \n-    lock_guard<mutex> __lock(_M_internal_mutex);\n     int __e = __gthread_cond_signal(&_M_cond);\n \n     // XXX not in spec\n@@ -77,7 +76,6 @@ namespace std\n   void \n   condition_variable::notify_all()\n   { \n-    lock_guard<mutex> __lock(_M_internal_mutex);\n     int __e = __gthread_cond_broadcast(&_M_cond);\n \n     // XXX not in spec\n@@ -89,7 +87,7 @@ namespace std\n   condition_variable_any::condition_variable_any()\n   {\n #ifdef __GTHREAD_COND_INIT\n-    __gthread_cond_t __tmp = __GTHREAD_COND_INIT;\n+    __native_type __tmp = __GTHREAD_COND_INIT;\n     _M_cond = __tmp;\n #else\n     int __e = __gthread_cond_init(&_M_cond, NULL);"}, {"sha": "2c3b5dc5134c7a9961bb746961384e51dac39c91", "filename": "libstdc++-v3/src/thread.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -45,7 +45,7 @@ namespace std\n \n       __try\n \t{\n-\t  __local->_M_run();\n+\t  __t->_M_run();\n \t}\n       __catch(...)\n \t{\n@@ -90,7 +90,6 @@ namespace std\n   void\n   thread::_M_start_thread()\n   {\n-    // _M_data->_M_this_ptr = _M_data;\n     _M_data->_M_this_ptr = _M_data;\n     int __e = __gthread_create(&_M_data->_M_id._M_thread,\n \t\t\t       &execute_native_thread_routine, _M_data.get());"}, {"sha": "a29fb416c48b320fde3f9b2cb466883ef23903e6", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 62 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 64 }"}, {"sha": "f27271623ec9e03f7526f239eb94cf1742c03179", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,4 +40,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 39 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 61 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 63 }"}, {"sha": "2dbaccc3c4595668b419bf3aad2b43ec9397962c", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/native_handle/typesizes.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fnative_handle%2Ftypesizes.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread/all.h>\n+#include <condition_variable>\n+\n+int main()\n+{\n+  typedef std::condition_variable test_type;\n+  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  return 0;\n+}"}, {"sha": "2bfdb798ebbb4e5ccd83064c47cca52b4be84d14", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 170 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 172 }"}, {"sha": "3045257dcb19862d067b1167598d31e2ac082dc5", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,4 +40,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 39 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 169 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 171 }"}, {"sha": "9d388963b9bf02c74da305c2b30b2359004b279c", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/native_handle/typesizes.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fnative_handle%2Ftypesizes.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread/all.h>\n+#include <condition_variable>\n+\n+int main()\n+{\n+  typedef std::condition_variable_any test_type;\n+  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  return 0;\n+}"}, {"sha": "e58973b6371d52809b575751e43575625fc77f3f", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 77 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 80 }"}, {"sha": "e7b0bb642b6e06a13a96f8b8b264e2b2494365b4", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 76 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 79 }"}, {"sha": "b293008b97520b60fe06a367eea5807cfa2bfaa2", "filename": "libstdc++-v3/testsuite/30_threads/mutex/native_handle/typesizes.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2Ftypesizes.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread/all.h>\n+#include <mutex>\n+\n+int main()\n+{\n+  typedef std::mutex test_type;\n+  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  return 0;\n+}"}, {"sha": "a333a1478a6054223e01d34209df64a9cd16f723", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 129 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 132 }"}, {"sha": "13a46dbcc8a3f6f761d02fa81cb2cf466886ff0a", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 128 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 131 }"}, {"sha": "6d58c1ef90ef8ff1c8a4567d3c8e41b66bde9740", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/native_handle/typesizes.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2Ftypesizes.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread/all.h>\n+#include <mutex>\n+\n+int main()\n+{\n+  typedef std::recursive_mutex test_type;\n+  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  return 0;\n+}"}, {"sha": "fca55a0751a2dc5dfb161b056c82c9713d1c0e22", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 283 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 295 }"}, {"sha": "c4c254a65792d06ce78bbe837c4bfc2323735dfa", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 282 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 294 }"}, {"sha": "b51bdf27a1bb553dda2ea4235f8adbb760f7a67c", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/native_handle/typesizes.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2Ftypesizes.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <mutex>\n+#include <thread/all.h>\n+\n+int main()\n+{\n+  typedef std::recursive_timed_mutex test_type;\n+  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  return 0;\n+}"}, {"sha": "527c29ce6393a676ba5a15e951e73c475a3bc26a", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 145 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 144 }"}, {"sha": "15ec77ea429d5629269ba9f5fdca1233095bf12a", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -28,9 +28,9 @@ void test01()\n   // copy\n   typedef std::thread test_type;\n   test_type t1;\n-  test_type t2(t1);\n+  test_type t2(t1); // XXX this is failing for the wrong reason\n }\n \n // { dg-error \"here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 124 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 123 }\n // { dg-excess-errors \"In file included from\" }"}, {"sha": "b1103d95f22bc56a575a62511050fcb8a78e3d0b", "filename": "libstdc++-v3/testsuite/30_threads/thread/native_handle/typesizes.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread/all.h>\n+#include <thread>\n+\n+int main()\n+{\n+  typedef std::thread test_type;\n+  // XXX disable at the moment\n+  //__gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  return 0;\n+}"}, {"sha": "058cfd2837b6c9eede8304ac96191a346ec3aaab", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 180 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 190 }"}, {"sha": "d49fda728b813cc0751bf5bd4da448de44cf06b9", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 179 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 189 }"}, {"sha": "7a59d7da30f171365454e72136d5fd052482b0e5", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/native_handle/typesizes.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2Ftypesizes.cc?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread/all.h>\n+#include <mutex>\n+\n+int main()\n+{\n+  typedef std::timed_mutex test_type;\n+  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  return 0;\n+}"}, {"sha": "39dea5ff6069ddd79505db7a10a9a31dfc9d37c5", "filename": "libstdc++-v3/testsuite/util/thread/all.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fthread%2Fall.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7459b6c53c4633371442d020051707bfcfcbdf1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fthread%2Fall.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fthread%2Fall.h?ref=f7459b6c53c4633371442d020051707bfcfcbdf1", "patch": "@@ -0,0 +1,66 @@\n+// -*- C++ -*-\n+// Utilities for testing threads for the C++ library testsuite.\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCXX_TESTSUITE_THREAD_H\n+#define _GLIBCXX_TESTSUITE_THREAD_H\n+\n+#include <sstream>\n+#include <stdexcept>\n+#include <type_traits>\n+\n+// C++0x only.\n+namespace __gnu_test\n+{  \n+  // Assume _Tp::native_handle_type.\n+  template<typename _Tp>\n+    void\n+    compare_type_to_native_type_sizes()\n+    {\n+      typedef _Tp test_type;\n+      typedef typename test_type::native_handle_type native_handle_type;\n+\n+      int st = sizeof(test_type);\n+\n+      // Remove possible pointer type.\n+      int snt = sizeof(typename std::remove_pointer<native_handle_type>::type);\n+      \n+      if (st != snt)\n+\t{\n+\t  std::ostringstream s;\n+\t  s << std::endl;\n+\t  s << \"size of _Tp: \" << st << std::endl;\n+\t  s << \"size of *(_Tp::native_handle_type): \" << snt << std::endl;\n+\t  throw std::runtime_error(s.str());\n+\t}\n+    }\n+} // namespace __gnu_test\n+\n+#endif // _GLIBCXX_TESTSUITE_THREAD_H\n+"}]}