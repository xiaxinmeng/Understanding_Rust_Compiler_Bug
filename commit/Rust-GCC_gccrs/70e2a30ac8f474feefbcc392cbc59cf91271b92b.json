{"sha": "70e2a30ac8f474feefbcc392cbc59cf91271b92b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBlMmEzMGFjOGY0NzRmZWVmYmNjMzkyY2JjNTljZjkxMjcxYjkyYg==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2019-10-07T14:59:00Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2019-10-07T14:59:00Z"}, "message": "Allow COND_EXPR and VEC_COND_EXPR condtions to trap\n\nRight now gimplifier does not allow VEC_COND_EXPR's condition to trap\nand introduces a temporary if this could happen, for example, generating\n\n  _5 = _4 > { 2.0e+0, 2.0e+0, 2.0e+0, 2.0e+0 };\n  _6 = VEC_COND_EXPR <_5, { -1, -1, -1, -1 }, { 0, 0, 0, 0 }>;\n\nfrom GENERIC\n\n  VEC_COND_EXPR < (*b > { 2.0e+0, 2.0e+0, 2.0e+0, 2.0e+0 }) ,\n                  { -1, -1, -1, -1 } ,\n\t\t  { 0, 0, 0, 0 } >\n\nThis is not necessary and makes the resulting GIMPLE harder to analyze.\nChange the gimplifier so as to allow COND_EXPR and VEC_COND_EXPR\nconditions to trap.\n\nThis patch takes special care to avoid introducing trapping comparisons\nin GIMPLE_COND.  They are not allowed, because they would require 3\noutgoing edges (then, else and EH), which is awkward to say the least.\nTherefore, computations of such conditions should live in their own basic\nblocks.\n\ngcc/ChangeLog:\n\n2019-10-07  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\tPR target/77918\n\t* gimple-expr.c (gimple_cond_get_ops_from_tree): Assert that the\n\tcaller passes a non-trapping condition.\n\t(is_gimple_condexpr): Allow trapping conditions.\n\t(is_gimple_condexpr_1): New helper function.\n\t(is_gimple_condexpr_for_cond): New function, acts like old\n\tis_gimple_condexpr.\n\t* gimple-expr.h (is_gimple_condexpr_for_cond): New function.\n\t* gimple.c (gimple_could_trap_p_1): Handle COND_EXPR and\n\tVEC_COND_EXPR. Fix an issue with statements like i = (fp < 1.).\n\t* gimplify.c (gimplify_cond_expr): Use\n\tis_gimple_condexpr_for_cond.\n\t(gimplify_expr): Allow is_gimple_condexpr_for_cond.\n\t* tree-eh.c (operation_could_trap_p): Assert on COND_EXPR and\n\tVEC_COND_EXPR.\n\t(tree_could_trap_p): Handle COND_EXPR and VEC_COND_EXPR.\n\t* tree-ssa-forwprop.c (forward_propagate_into_gimple_cond): Use\n\tis_gimple_condexpr_for_cond, remove pointless tmp check\n\t(forward_propagate_into_cond): Remove pointless tmp check.\n\nFrom-SVN: r276659", "tree": {"sha": "3302596f71ab0b28e68060f10d0b68451d44590c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3302596f71ab0b28e68060f10d0b68451d44590c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70e2a30ac8f474feefbcc392cbc59cf91271b92b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e2a30ac8f474feefbcc392cbc59cf91271b92b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e2a30ac8f474feefbcc392cbc59cf91271b92b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e2a30ac8f474feefbcc392cbc59cf91271b92b/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "880dcdaedac453d2c64ebcc6f1bb5f81539c863c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880dcdaedac453d2c64ebcc6f1bb5f81539c863c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880dcdaedac453d2c64ebcc6f1bb5f81539c863c"}], "stats": {"total": 82, "additions": 72, "deletions": 10}, "files": [{"sha": "922ca5d0bd94a29ceced7efc0ffe970d2ba15d5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70e2a30ac8f474feefbcc392cbc59cf91271b92b", "patch": "@@ -1,3 +1,25 @@\n+2019-10-07  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\tPR target/77918\n+\t* gimple-expr.c (gimple_cond_get_ops_from_tree): Assert that the\n+\tcaller passes a non-trapping condition.\n+\t(is_gimple_condexpr): Allow trapping conditions.\n+\t(is_gimple_condexpr_1): New helper function.\n+\t(is_gimple_condexpr_for_cond): New function, acts like old\n+\tis_gimple_condexpr.\n+\t* gimple-expr.h (is_gimple_condexpr_for_cond): New function.\n+\t* gimple.c (gimple_could_trap_p_1): Handle COND_EXPR and\n+\tVEC_COND_EXPR. Fix an issue with statements like i = (fp < 1.).\n+\t* gimplify.c (gimplify_cond_expr): Use\n+\tis_gimple_condexpr_for_cond.\n+\t(gimplify_expr): Allow is_gimple_condexpr_for_cond.\n+\t* tree-eh.c (operation_could_trap_p): Assert on COND_EXPR and\n+\tVEC_COND_EXPR.\n+\t(tree_could_trap_p): Handle COND_EXPR and VEC_COND_EXPR.\n+\t* tree-ssa-forwprop.c (forward_propagate_into_gimple_cond): Use\n+\tis_gimple_condexpr_for_cond, remove pointless tmp check\n+\t(forward_propagate_into_cond): Remove pointless tmp check.\n+\n 2019-10-07 Vladislav Ivanishin  <vlad@ispras.ru>\n \n \t* gimple-iterator.h (gsi_next_nonvirtual_phi): Change the semantics to"}, {"sha": "1738af186d76e2194bfcea9719a3e94f400f5835", "filename": "gcc/gimple-expr.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Fgimple-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Fgimple-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.c?ref=70e2a30ac8f474feefbcc392cbc59cf91271b92b", "patch": "@@ -574,6 +574,7 @@ gimple_cond_get_ops_from_tree (tree cond, enum tree_code *code_p,\n \t      || TREE_CODE (cond) == TRUTH_NOT_EXPR\n \t      || is_gimple_min_invariant (cond)\n \t      || SSA_VAR_P (cond));\n+  gcc_checking_assert (!tree_could_throw_p (cond));\n \n   extract_ops_from_tree (cond, code_p, lhs_p, rhs_p);\n \n@@ -605,17 +606,33 @@ is_gimple_lvalue (tree t)\n \t  || TREE_CODE (t) == BIT_FIELD_REF);\n }\n \n-/*  Return true if T is a GIMPLE condition.  */\n+/* Helper for is_gimple_condexpr and is_gimple_condexpr_for_cond.  */\n \n-bool\n-is_gimple_condexpr (tree t)\n+static bool\n+is_gimple_condexpr_1 (tree t, bool allow_traps)\n {\n   return (is_gimple_val (t) || (COMPARISON_CLASS_P (t)\n-\t\t\t\t&& !tree_could_throw_p (t)\n+\t\t\t\t&& (allow_traps || !tree_could_throw_p (t))\n \t\t\t\t&& is_gimple_val (TREE_OPERAND (t, 0))\n \t\t\t\t&& is_gimple_val (TREE_OPERAND (t, 1))));\n }\n \n+/* Return true if T is a GIMPLE condition.  */\n+\n+bool\n+is_gimple_condexpr (tree t)\n+{\n+  return is_gimple_condexpr_1 (t, true);\n+}\n+\n+/* Like is_gimple_condexpr, but does not allow T to trap.  */\n+\n+bool\n+is_gimple_condexpr_for_cond (tree t)\n+{\n+  return is_gimple_condexpr_1 (t, false);\n+}\n+\n /* Return true if T is a gimple address.  */\n \n bool"}, {"sha": "0925aeb0f574ce4bb25a2cf24800f286835959ed", "filename": "gcc/gimple-expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Fgimple-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Fgimple-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.h?ref=70e2a30ac8f474feefbcc392cbc59cf91271b92b", "patch": "@@ -41,6 +41,7 @@ extern void gimple_cond_get_ops_from_tree (tree, enum tree_code *, tree *,\n \t\t\t\t\t   tree *);\n extern bool is_gimple_lvalue (tree);\n extern bool is_gimple_condexpr (tree);\n+extern bool is_gimple_condexpr_for_cond (tree);\n extern bool is_gimple_address (const_tree);\n extern bool is_gimple_invariant_address (const_tree);\n extern bool is_gimple_ip_invariant_address (const_tree);"}, {"sha": "a874c29454c4cdda8edd4140d338d70a74297847", "filename": "gcc/gimple.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=70e2a30ac8f474feefbcc392cbc59cf91271b92b", "patch": "@@ -2149,10 +2149,22 @@ gimple_could_trap_p_1 (gimple *s, bool include_mem, bool include_stores)\n       return false;\n \n     case GIMPLE_ASSIGN:\n-      t = gimple_expr_type (s);\n       op = gimple_assign_rhs_code (s);\n+\n+      /* For COND_EXPR and VEC_COND_EXPR only the condition may trap.  */\n+      if (op == COND_EXPR || op == VEC_COND_EXPR)\n+\treturn tree_could_trap_p (gimple_assign_rhs1 (s));\n+\n+      /* For comparisons we need to check rhs operand types instead of rhs type\n+         (which is BOOLEAN_TYPE).  */\n+      if (TREE_CODE_CLASS (op) == tcc_comparison)\n+\tt = TREE_TYPE (gimple_assign_rhs1 (s));\n+      else\n+\tt = gimple_expr_type (s);\n+\n       if (get_gimple_rhs_class (op) == GIMPLE_BINARY_RHS)\n \tdiv = gimple_assign_rhs2 (s);\n+\n       return (operation_could_trap_p (op, FLOAT_TYPE_P (t),\n \t\t\t\t      (INTEGRAL_TYPE_P (t)\n \t\t\t\t       && TYPE_OVERFLOW_TRAPS (t)),"}, {"sha": "836706961f3e6552c15cdab13922643b6f16b814", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=70e2a30ac8f474feefbcc392cbc59cf91271b92b", "patch": "@@ -4142,8 +4142,8 @@ gimplify_cond_expr (tree *expr_p, gimple_seq *pre_p, fallback_t fallback)\n   /* Now do the normal gimplification.  */\n \n   /* Gimplify condition.  */\n-  ret = gimplify_expr (&TREE_OPERAND (expr, 0), pre_p, NULL, is_gimple_condexpr,\n-\t\t       fb_rvalue);\n+  ret = gimplify_expr (&TREE_OPERAND (expr, 0), pre_p, NULL,\n+\t\t       is_gimple_condexpr_for_cond, fb_rvalue);\n   if (ret == GS_ERROR)\n     return GS_ERROR;\n   gcc_assert (TREE_OPERAND (expr, 0) != NULL_TREE);\n@@ -12976,6 +12976,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   else if (gimple_test_f == is_gimple_val\n            || gimple_test_f == is_gimple_call_addr\n            || gimple_test_f == is_gimple_condexpr\n+\t   || gimple_test_f == is_gimple_condexpr_for_cond\n            || gimple_test_f == is_gimple_mem_rhs\n            || gimple_test_f == is_gimple_mem_rhs_or_call\n            || gimple_test_f == is_gimple_reg_rhs"}, {"sha": "7a028735d4ea50bdf68a1bc4c84d929435d2c9fe", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=70e2a30ac8f474feefbcc392cbc59cf91271b92b", "patch": "@@ -2523,6 +2523,10 @@ operation_could_trap_p (enum tree_code op, bool fp_operation, bool honor_trapv,\n   bool honor_snans = fp_operation && flag_signaling_nans != 0;\n   bool handled;\n \n+  /* This function cannot tell whether or not COND_EXPR and VEC_COND_EXPR could\n+     trap, because that depends on the respective condition op.  */\n+  gcc_assert (op != COND_EXPR && op != VEC_COND_EXPR);\n+\n   if (TREE_CODE_CLASS (op) != tcc_comparison\n       && TREE_CODE_CLASS (op) != tcc_unary\n       && TREE_CODE_CLASS (op) != tcc_binary)\n@@ -2610,6 +2614,10 @@ tree_could_trap_p (tree expr)\n   if (!expr)\n     return false;\n \n+  /* For COND_EXPR and VEC_COND_EXPR only the condition may trap.  */\n+  if (TREE_CODE (expr) == COND_EXPR || TREE_CODE (expr) == VEC_COND_EXPR)\n+    expr = TREE_OPERAND (expr, 0);\n+\n   code = TREE_CODE (expr);\n   t = TREE_TYPE (expr);\n "}, {"sha": "fe55ca958b49b986f79a9a710d92b5d906959105", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e2a30ac8f474feefbcc392cbc59cf91271b92b/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=70e2a30ac8f474feefbcc392cbc59cf91271b92b", "patch": "@@ -527,9 +527,10 @@ forward_propagate_into_gimple_cond (gcond *stmt)\n   tmp = forward_propagate_into_comparison_1 (stmt, code,\n \t\t\t\t\t     boolean_type_node,\n \t\t\t\t\t     rhs1, rhs2);\n-  if (tmp)\n+  if (tmp\n+      && is_gimple_condexpr_for_cond (tmp))\n     {\n-      if (dump_file && tmp)\n+      if (dump_file)\n \t{\n \t  fprintf (dump_file, \"  Replaced '\");\n \t  print_gimple_expr (dump_file, stmt, 0);\n@@ -607,7 +608,7 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n   if (tmp\n       && is_gimple_condexpr (tmp))\n     {\n-      if (dump_file && tmp)\n+      if (dump_file)\n \t{\n \t  fprintf (dump_file, \"  Replaced '\");\n \t  print_generic_expr (dump_file, cond);"}]}