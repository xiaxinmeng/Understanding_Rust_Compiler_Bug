{"sha": "14c8e213350820ffc12ac6b8528c81732e7b6a90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRjOGUyMTMzNTA4MjBmZmMxMmFjNmI4NTI4YzgxNzMyZTdiNmE5MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-11-08T19:18:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-11-08T19:18:16Z"}, "message": "expmed.c (extract_force_align_mem_bit_field): Correct handling at the end of a page.\n\n        * expmed.c (extract_force_align_mem_bit_field): Correct handling at\n        the end of a page.\n\nFrom-SVN: r90288", "tree": {"sha": "05875fc07773a13ef841f991578d7e0b84c9a533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05875fc07773a13ef841f991578d7e0b84c9a533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14c8e213350820ffc12ac6b8528c81732e7b6a90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c8e213350820ffc12ac6b8528c81732e7b6a90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c8e213350820ffc12ac6b8528c81732e7b6a90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c8e213350820ffc12ac6b8528c81732e7b6a90/comments", "author": null, "committer": null, "parents": [{"sha": "c66a43689eeb6a9014b2b6cbd49b2c745e3d7d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c66a43689eeb6a9014b2b6cbd49b2c745e3d7d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c66a43689eeb6a9014b2b6cbd49b2c745e3d7d69"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "3e43541ffe19d7c700e71e28be04ba244a2e0c18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c8e213350820ffc12ac6b8528c81732e7b6a90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c8e213350820ffc12ac6b8528c81732e7b6a90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14c8e213350820ffc12ac6b8528c81732e7b6a90", "patch": "@@ -1,3 +1,8 @@\n+2004-11-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* expmed.c (extract_force_align_mem_bit_field): Correct handling at\n+\tthe end of a page.\n+\n 2004-11-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* sched-deps.c (add_insn_mem_dependence): Make it static."}, {"sha": "191df7254760095a91337a88c568ce74b9483913", "filename": "gcc/expmed.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c8e213350820ffc12ac6b8528c81732e7b6a90/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c8e213350820ffc12ac6b8528c81732e7b6a90/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=14c8e213350820ffc12ac6b8528c81732e7b6a90", "patch": "@@ -1891,19 +1891,27 @@ extract_force_align_mem_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n   if (STRICT_ALIGNMENT)\n     {\n       base = plus_constant (XEXP (op0, 0), bitpos / BITS_PER_UNIT);\n-      base = force_operand (base, NULL);\n       bitpos %= BITS_PER_UNIT;\n \n-      /* Force alignment of the address; load two sequential values.  */\n-      a1 = expand_simple_binop (Pmode, AND, base,\n+      /* We load two values to be concatenate.  There's an edge condition\n+\t that bears notice -- an aligned value at the end of a page can\n+\t only load one value lest we segfault.  So the two values we load\n+\t are at \"base & -size\" and \"(base + size - 1) & -size\".  If base\n+\t is unaligned, the addresses will be aligned and sequential; if\n+\t base is aligned, the addresses will both be equal to base.  */\n+\n+      a1 = expand_simple_binop (Pmode, AND, force_operand (base, NULL),\n \t\t\t\tGEN_INT (-(HOST_WIDE_INT)m_size),\n \t\t\t\tNULL, true, OPTAB_LIB_WIDEN);\n       mark_reg_pointer (a1, m_bitsize);\n       v1 = gen_rtx_MEM (mode, a1);\n       set_mem_align (v1, m_bitsize);\n       v1 = force_reg (mode, validize_mem (v1));\n \n-      a2 = plus_constant (a1, GET_MODE_SIZE (mode));\n+      a2 = plus_constant (base, GET_MODE_SIZE (mode) - 1);\n+      a2 = expand_simple_binop (Pmode, AND, force_operand (a2, NULL),\n+\t\t\t\tGEN_INT (-(HOST_WIDE_INT)m_size),\n+\t\t\t\tNULL, true, OPTAB_LIB_WIDEN);\n       v2 = gen_rtx_MEM (mode, a2);\n       set_mem_align (v2, m_bitsize);\n       v2 = force_reg (mode, validize_mem (v2));"}]}