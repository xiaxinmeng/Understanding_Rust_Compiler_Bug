{"sha": "7672ab42ccdedf12b8bab23309e86e7a393e9d99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY3MmFiNDJjY2RlZGYxMmI4YmFiMjMzMDllODZlN2EzOTNlOWQ5OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-05-28T08:52:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-28T08:52:42Z"}, "message": "[Ada] Minor internal cleanup in repinfo unit\n\nThis steamlines a bit the implementation.  No functional changes.\n\n2018-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* repinfo.adb (List_Array_Info): Start with an explicit blank line and\n\tend with the linker section, if any.\n\t(List_Entities): Do not output the linker section for record types,\n\tarray types and variables.\n\t(Print_Expr): Factor out common processing for unary operators and\n\tspecial values.  Adjust and reorder the various cases.\n\t(List_Object_Info): End with the linker section, if any.\n\t(List_Record_Info): Likewise.\n\t(List_Type_Info): Do not start with a blank line.\n\nFrom-SVN: r260815", "tree": {"sha": "bc1d4c56947b01310de308308b772aaa82842a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc1d4c56947b01310de308308b772aaa82842a5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7672ab42ccdedf12b8bab23309e86e7a393e9d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7672ab42ccdedf12b8bab23309e86e7a393e9d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7672ab42ccdedf12b8bab23309e86e7a393e9d99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7672ab42ccdedf12b8bab23309e86e7a393e9d99/comments", "author": null, "committer": null, "parents": [{"sha": "121dec88595057b7019dbffdca2ad80b8fd2f40c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121dec88595057b7019dbffdca2ad80b8fd2f40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121dec88595057b7019dbffdca2ad80b8fd2f40c"}], "stats": {"total": 81, "additions": 58, "deletions": 23}, "files": [{"sha": "41df33f78eb49611b65b26080964f2bc068cd55d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7672ab42ccdedf12b8bab23309e86e7a393e9d99/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7672ab42ccdedf12b8bab23309e86e7a393e9d99/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7672ab42ccdedf12b8bab23309e86e7a393e9d99", "patch": "@@ -1,3 +1,15 @@\n+2018-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo.adb (List_Array_Info): Start with an explicit blank line and\n+\tend with the linker section, if any.\n+\t(List_Entities): Do not output the linker section for record types,\n+\tarray types and variables.\n+\t(Print_Expr): Factor out common processing for unary operators and\n+\tspecial values.  Adjust and reorder the various cases.\n+\t(List_Object_Info): End with the linker section, if any.\n+\t(List_Record_Info): Likewise.\n+\t(List_Type_Info): Do not start with a blank line.\n+\n 2018-05-25  Nicolas Roche  <roche@adacore.com>\n \n \t* libgnat/s-valrea.adb (Scan_Real): Abort computation once it is sure"}, {"sha": "07c034bf77c3f5373f1a2e1606c84e131feec3af", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7672ab42ccdedf12b8bab23309e86e7a393e9d99/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7672ab42ccdedf12b8bab23309e86e7a393e9d99/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=7672ab42ccdedf12b8bab23309e86e7a393e9d99", "patch": "@@ -302,14 +302,18 @@ package body Repinfo is\n \n    procedure List_Array_Info (Ent : Entity_Id; Bytes_Big_Endian : Boolean) is\n    begin\n+      Blank_Line;\n       List_Type_Info (Ent);\n+\n       Write_Str (\"for \");\n       List_Name (Ent);\n       Write_Str (\"'Component_Size use \");\n       Write_Val (Component_Size (Ent));\n       Write_Line (\";\");\n \n       List_Scalar_Storage_Order (Ent, Bytes_Big_Endian);\n+\n+      List_Linker_Section (Ent);\n    end List_Array_Info;\n \n    -------------------\n@@ -415,25 +419,21 @@ package body Repinfo is\n                      List_Record_Info (E, Bytes_Big_Endian);\n                   end if;\n \n-                  List_Linker_Section (E);\n-\n                elsif Is_Array_Type (E) then\n                   if List_Representation_Info >= 1 then\n                      List_Array_Info (E, Bytes_Big_Endian);\n                   end if;\n \n-                  List_Linker_Section (E);\n-\n                elsif Is_Type (E) then\n                   if List_Representation_Info >= 2 then\n+                     Blank_Line;\n                      List_Type_Info (E);\n                      List_Linker_Section (E);\n                   end if;\n \n                elsif Ekind_In (E, E_Variable, E_Constant) then\n                   if List_Representation_Info >= 2 then\n                      List_Object_Info (E);\n-                     List_Linker_Section (E);\n                   end if;\n \n                elsif Ekind (E) = E_Loop_Parameter or else Is_Formal (E) then\n@@ -524,9 +524,25 @@ package body Repinfo is\n             declare\n                Node : Exp_Node renames Rep_Table.Table (-UI_To_Int (Val));\n \n+               procedure Unop (S : String);\n+               --  Output text for unary operator with S being operator name\n+\n                procedure Binop (S : String);\n                --  Output text for binary operator with S being operator name\n \n+               procedure Valop (S : String);\n+               --  Output text for special value with S being value symbol\n+\n+               ----------\n+               -- Unop --\n+               ----------\n+\n+               procedure Unop (S : String) is\n+               begin\n+                  Write_Str (S);\n+                  Print_Expr (Node.Op1);\n+               end Unop;\n+\n                -----------\n                -- Binop --\n                -----------\n@@ -540,6 +556,16 @@ package body Repinfo is\n                   Write_Char (')');\n                end Binop;\n \n+               -----------\n+               -- Valop --\n+               -----------\n+\n+               procedure Valop (S : String) is\n+               begin\n+                  Write_Str (S);\n+                  UI_Write (Node.Op1);\n+               end Valop;\n+\n             --  Start of processing for Print_Expr\n \n             begin\n@@ -574,18 +600,17 @@ package body Repinfo is\n                   when Trunc_Mod_Expr =>\n                      Binop (\" modt \");\n \n-                  when Floor_Mod_Expr =>\n-                     Binop (\" modf \");\n-\n                   when Ceil_Mod_Expr =>\n                      Binop (\" modc \");\n \n+                  when Floor_Mod_Expr =>\n+                     Binop (\" modf \");\n+\n                   when Exact_Div_Expr =>\n                      Binop (\" /e \");\n \n                   when Negate_Expr =>\n-                     Write_Char ('-');\n-                     Print_Expr (Node.Op1);\n+                     Unop (\"-\");\n \n                   when Min_Expr =>\n                      Binop (\" min \");\n@@ -594,8 +619,7 @@ package body Repinfo is\n                      Binop (\" max \");\n \n                   when Abs_Expr =>\n-                     Write_Str (\"abs \");\n-                     Print_Expr (Node.Op1);\n+                     Unop (\"abs \");\n \n                   when Truth_Andif_Expr =>\n                      Binop (\" and if \");\n@@ -613,11 +637,7 @@ package body Repinfo is\n                      Binop (\" xor \");\n \n                   when Truth_Not_Expr =>\n-                     Write_Str (\"not \");\n-                     Print_Expr (Node.Op1);\n-\n-                  when Bit_And_Expr =>\n-                     Binop (\" & \");\n+                     Unop (\"not \");\n \n                   when Lt_Expr =>\n                      Binop (\" < \");\n@@ -637,13 +657,14 @@ package body Repinfo is\n                   when Ne_Expr =>\n                      Binop (\" != \");\n \n+                  when Bit_And_Expr =>\n+                     Binop (\" & \");\n+\n                   when Discrim_Val =>\n-                     Write_Char ('#');\n-                     UI_Write (Node.Op1);\n+                     Valop (\"#\");\n \n                   when Dynamic_Val =>\n-                     Write_Str (\"Var\");\n-                     UI_Write (Node.Op1);\n+                     Valop (\"var\");\n                end case;\n             end;\n          end if;\n@@ -844,6 +865,8 @@ package body Repinfo is\n       Write_Str (\"'Alignment use \");\n       Write_Val (Alignment (Ent));\n       Write_Line (\";\");\n+\n+      List_Linker_Section (Ent);\n    end List_Object_Info;\n \n    ----------------------\n@@ -1168,6 +1191,8 @@ package body Repinfo is\n       Write_Line (\"end record;\");\n \n       List_Scalar_Storage_Order (Ent, Bytes_Big_Endian);\n+\n+      List_Linker_Section (Ent);\n    end List_Record_Info;\n \n    -------------------\n@@ -1283,8 +1308,6 @@ package body Repinfo is\n \n    procedure List_Type_Info (Ent : Entity_Id) is\n    begin\n-      Blank_Line;\n-\n       --  Do not list size info for unconstrained arrays, not meaningful\n \n       if Is_Array_Type (Ent) and then not Is_Constrained (Ent) then"}]}