{"sha": "c4b9a87e0df50293a420e98952c9593f58dcd1da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRiOWE4N2UwZGY1MDI5M2E0MjBlOTg5NTJjOTU5M2Y1OGRjZDFkYQ==", "commit": {"author": {"name": "Easwaran Raman", "email": "eraman@google.com", "date": "2011-06-24T17:10:18Z"}, "committer": {"name": "Easwaran Raman", "email": "eraman@gcc.gnu.org", "date": "2011-06-24T17:10:18Z"}, "message": "re PR rtl-optimization/49429 (dse.c change (r175063) causes execution failures)\n\n2011-06-24  Easwaran Raman  <eraman@google.com>\n\n      PR rtl-optimization/49429\n      PR target/49454\n      * expr.c (emit_block_move_hints):  Mark MEM_EXPR(x) and\n      MEM_EXPR(y) addressable if emit_block_move_via_libcall is\n      used to copy y into x.\n      * calls.c (initialize_argument_information): Mark\n      an argument addressable if it is passed by invisible reference.\n      (emit_library_call_value_1): Mark  MEM_EXPR (val) addressable\n      if it is passed by reference.\n\nFrom-SVN: r175384", "tree": {"sha": "dd6ee8493a7ef5063267b7d09ebfc67cb2cf91e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd6ee8493a7ef5063267b7d09ebfc67cb2cf91e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4b9a87e0df50293a420e98952c9593f58dcd1da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4b9a87e0df50293a420e98952c9593f58dcd1da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4b9a87e0df50293a420e98952c9593f58dcd1da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4b9a87e0df50293a420e98952c9593f58dcd1da/comments", "author": null, "committer": null, "parents": [{"sha": "1f134bd6d6d6f324c4830c45fa70ab3e49fcd3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f134bd6d6d6f324c4830c45fa70ab3e49fcd3ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f134bd6d6d6f324c4830c45fa70ab3e49fcd3ef"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "f0061058233f9159bed53e950cdc403d1fa257f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b9a87e0df50293a420e98952c9593f58dcd1da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b9a87e0df50293a420e98952c9593f58dcd1da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4b9a87e0df50293a420e98952c9593f58dcd1da", "patch": "@@ -1,3 +1,15 @@\n+2011-06-24  Easwaran Raman  <eraman@google.com>\n+\n+\tPR rtl-optimization/49429\n+\tPR target/49454\n+\t* expr.c (emit_block_move_hints):  Mark MEM_EXPR(x) and\n+\tMEM_EXPR(y) addressable if emit_block_move_via_libcall is\n+\tused to copy y into x.\n+\t* calls.c (initialize_argument_information): Mark\n+\tan argument addressable if it is passed by invisible reference.\n+\t(emit_library_call_value_1): Mark  MEM_EXPR (val) addressable\n+\tif it is passed by reference.\n+\n 2011-06-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/49504"}, {"sha": "bba477ce274f99e825380bd9de653eb166496a10", "filename": "gcc/calls.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b9a87e0df50293a420e98952c9593f58dcd1da/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b9a87e0df50293a420e98952c9593f58dcd1da/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=c4b9a87e0df50293a420e98952c9593f58dcd1da", "patch": "@@ -1084,6 +1084,8 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t\t  && TREE_CODE (base) != SSA_NAME\n \t\t  && (!DECL_P (base) || MEM_P (DECL_RTL (base)))))\n \t    {\n+\t      mark_addressable (args[i].tree_value);\n+\n \t      /* We can't use sibcalls if a callee-copied argument is\n \t\t stored in the current function's frame.  */\n \t      if (!call_from_thunk_p && DECL_P (base) && !TREE_STATIC (base))\n@@ -3524,7 +3526,12 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t    }\n \n \t  if (MEM_P (val) && !must_copy)\n-\t    slot = val;\n+\t    {\n+\t      tree val_expr = MEM_EXPR (val);\n+\t      if (val_expr)\n+\t\tmark_addressable (val_expr);\n+\t      slot = val;\n+\t    }\n \t  else\n \t    {\n \t      slot = assign_temp (lang_hooks.types.type_for_mode (mode, 0),"}, {"sha": "176978a2257db958a11b0ca3204fe71a00db0eda", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b9a87e0df50293a420e98952c9593f58dcd1da/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b9a87e0df50293a420e98952c9593f58dcd1da/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c4b9a87e0df50293a420e98952c9593f58dcd1da", "patch": "@@ -1181,8 +1181,19 @@ emit_block_move_hints (rtx x, rtx y, rtx size, enum block_op_methods method,\n   else if (may_use_call\n \t   && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (x))\n \t   && ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (y)))\n-    retval = emit_block_move_via_libcall (x, y, size,\n-\t\t\t\t\t  method == BLOCK_OP_TAILCALL);\n+    {\n+      /* Since x and y are passed to a libcall, mark the corresponding\n+\t tree EXPR as addressable.  */\n+      tree y_expr = MEM_EXPR (y);\n+      tree x_expr = MEM_EXPR (x);\n+      if (y_expr)\n+\tmark_addressable (y_expr);\n+      if (x_expr)\n+\tmark_addressable (x_expr);\n+      retval = emit_block_move_via_libcall (x, y, size,\n+\t\t\t\t\t    method == BLOCK_OP_TAILCALL);\n+    }\n+\n   else\n     emit_block_move_via_loop (x, y, size, align);\n "}]}