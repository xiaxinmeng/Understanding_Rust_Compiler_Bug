{"sha": "d3b2ead595467166c849950ecd3710501a5094d9", "node_id": "C_kwDOANBUbNoAKGQzYjJlYWQ1OTU0NjcxNjZjODQ5OTUwZWNkMzcxMDUwMWE1MDk0ZDk", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-12-02T17:00:39Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2022-02-17T17:06:24Z"}, "message": "libiberty rust-demangle, ignore .suffix\n\nRust symbols can have a .suffix because of compiler transformations.\nThese can be ignored in the demangled name. Which is what this patch\nimplements. By stopping at the first dot for v0 symbols and searching\nbackwards to the ending 'E' for legacy symbols.\n\nAn alternative implementation could be to follow what C++ does and\nrepresent these as [clone .suffix] tagged onto the demangled name.\nBut this seems somewhat confusing since it results in a demangled\nname that cannot be mangled again. And it would mean trying to\ndecode compiler internal naming.\n\nhttps://bugs.kde.org/show_bug.cgi?id=445916\nhttps://github.com/rust-lang/rust/issues/60705\n\nlibiberty/Changelog\n\n\t* rust-demangle.c (rust_demangle_callback): Ignore everything\n\tafter '.' char in sym for v0. For legacy symbols search\n\tbackwards to find the last 'E' before any '.'.\n\t* testsuite/rust-demangle-expected: Add new .suffix testcases.", "tree": {"sha": "d2048ccfc0473ef3ebfc732160330481a5697f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2048ccfc0473ef3ebfc732160330481a5697f93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3b2ead595467166c849950ecd3710501a5094d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b2ead595467166c849950ecd3710501a5094d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b2ead595467166c849950ecd3710501a5094d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b2ead595467166c849950ecd3710501a5094d9/comments", "author": null, "committer": null, "parents": [{"sha": "db69f666a728ce800a840115829f6b64bc3174d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db69f666a728ce800a840115829f6b64bc3174d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db69f666a728ce800a840115829f6b64bc3174d2"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "bb58d900e2760c88ecda2f547baa7a51d8697cf3", "filename": "libiberty/rust-demangle.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b2ead595467166c849950ecd3710501a5094d9/libiberty%2Frust-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b2ead595467166c849950ecd3710501a5094d9/libiberty%2Frust-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frust-demangle.c?ref=d3b2ead595467166c849950ecd3710501a5094d9", "patch": "@@ -1375,13 +1375,19 @@ rust_demangle_callback (const char *mangled, int options,\n   /* Rust symbols (v0) use only [_0-9a-zA-Z] characters. */\n   for (p = rdm.sym; *p; p++)\n     {\n+      /* Rust v0 symbols can have '.' suffixes, ignore those.  */\n+      if (rdm.version == 0 && *p == '.')\n+        break;\n+\n       rdm.sym_len++;\n \n       if (*p == '_' || ISALNUM (*p))\n         continue;\n \n-      /* Legacy Rust symbols can also contain [.:$] characters. */\n-      if (rdm.version == -1 && (*p == '$' || *p == '.' || *p == ':'))\n+      /* Legacy Rust symbols can also contain [.:$] characters.\n+         Or @ in the .suffix (which will be skipped, see below). */\n+      if (rdm.version == -1 && (*p == '$' || *p == '.' || *p == ':'\n+                                || *p == '@'))\n         continue;\n \n       return 0;\n@@ -1390,7 +1396,16 @@ rust_demangle_callback (const char *mangled, int options,\n   /* Legacy Rust symbols need to be handled separately. */\n   if (rdm.version == -1)\n     {\n-      /* Legacy Rust symbols always end with E. */\n+      /* Legacy Rust symbols always end with E.  But can be followed by a\n+         .suffix (which we want to ignore).  */\n+      int dot_suffix = 1;\n+      while (rdm.sym_len > 0 &&\n+             !(dot_suffix && rdm.sym[rdm.sym_len - 1] == 'E'))\n+        {\n+          dot_suffix = rdm.sym[rdm.sym_len - 1] == '.';\n+          rdm.sym_len--;\n+        }\n+\n       if (!(rdm.sym_len > 0 && rdm.sym[rdm.sym_len - 1] == 'E'))\n         return 0;\n       rdm.sym_len--;"}, {"sha": "b565084cfefae2d272659f1f059fe514b196222c", "filename": "libiberty/testsuite/rust-demangle-expected", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b2ead595467166c849950ecd3710501a5094d9/libiberty%2Ftestsuite%2Frust-demangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b2ead595467166c849950ecd3710501a5094d9/libiberty%2Ftestsuite%2Frust-demangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Frust-demangle-expected?ref=d3b2ead595467166c849950ecd3710501a5094d9", "patch": "@@ -295,3 +295,29 @@ _RMCs4fqI2P2rA04_13const_genericINtB0_4CharKc2202_E\n --format=auto\n _RNvNvMCs4fqI2P2rA04_13const_genericINtB4_3FooKpE3foo3FOO\n <const_generic::Foo<_>>::foo::FOO\n+#\n+# Suffixes\n+#\n+--format=rust\n+_RNvMs0_NtCs5l0EXMQXRMU_21rustc_data_structures17obligation_forestINtB5_16ObligationForestNtNtNtCsdozMG8X9FIu_21rustc_trait_selection6traits7fulfill26PendingPredicateObligationE22register_obligation_atB1v_.llvm.8517020237817239694\n+<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::register_obligation_at\n+--format=rust\n+_ZN4core3ptr85drop_in_place$LT$std..rt..lang_start$LT$$LP$$RP$$GT$..$u7b$$u7b$closure$u7d$$u7d$$GT$17h27f14859c664490dE.llvm.8091179795805947855\n+core::ptr::drop_in_place<std::rt::lang_start<()>::{{closure}}>\n+# old style rustc llvm thinlto\n+--format=rust\n+_ZN9backtrace3foo17hbb467fcdaea5d79bE.llvm.A5310EB9\n+backtrace::foo\n+--format=rust\n+_ZN9backtrace3foo17hbb467fcdaea5d79bE.llvm.A5310EB9@@16\n+backtrace::foo\n+# new style rustc llvm thinlto\n+--format=rust\n+_RC3foo.llvm.9D1C9369\n+foo\n+--format=rust\n+_RC3foo.llvm.9D1C9369@@16\n+foo\n+--format=rust\n+_RNvC9backtrace3foo.llvm.A5310EB9\n+backtrace::foo"}]}