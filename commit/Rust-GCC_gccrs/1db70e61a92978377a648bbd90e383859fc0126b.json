{"sha": "1db70e61a92978377a648bbd90e383859fc0126b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRiNzBlNjFhOTI5NzgzNzdhNjQ4YmJkOTBlMzgzODU5ZmMwMTI2Yg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-17T09:29:06Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-19T02:28:13Z"}, "message": "Revert \"Add the member integer_to_sse to processor_cost as a cost simulation for movd/pinsrd. It will be used to calculate the cost of vec_construct.\"\n\nThis reverts commit 872da9a6f664a06d73c987aa0cb2e5b830158a10.\n\nPR target/101936\nPR target/101929", "tree": {"sha": "b4b2fbc113e2270e05ac6f09a20f8e0c0e614f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4b2fbc113e2270e05ac6f09a20f8e0c0e614f47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1db70e61a92978377a648bbd90e383859fc0126b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db70e61a92978377a648bbd90e383859fc0126b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db70e61a92978377a648bbd90e383859fc0126b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db70e61a92978377a648bbd90e383859fc0126b/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e529985d8956f74492e3176026fc02dc8f01b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e529985d8956f74492e3176026fc02dc8f01b6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e529985d8956f74492e3176026fc02dc8f01b6c"}], "stats": {"total": 35, "additions": 2, "deletions": 33}, "files": [{"sha": "46844fab08f82b6f502cdfbd00331ae9106d477d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db70e61a92978377a648bbd90e383859fc0126b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db70e61a92978377a648bbd90e383859fc0126b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1db70e61a92978377a648bbd90e383859fc0126b", "patch": "@@ -22203,11 +22203,7 @@ ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n       case vec_construct:\n \t{\n \t  /* N element inserts into SSE vectors.  */\n-\t  int cost\n-\t    = TYPE_VECTOR_SUBPARTS (vectype) * (fp ?\n-\t\t\t\t\t\tix86_cost->sse_op\n-\t\t\t\t\t\t: ix86_cost->integer_to_sse);\n-\n+\t  int cost = TYPE_VECTOR_SUBPARTS (vectype) * ix86_cost->sse_op;\n \t  /* One vinserti128 for combining two SSE vectors for AVX256.  */\n \t  if (GET_MODE_BITSIZE (mode) == 256)\n \t    cost += ix86_vec_cost (mode, ix86_cost->addss);"}, {"sha": "8aba86d11b4bd63706a313df220b38a93933e086", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db70e61a92978377a648bbd90e383859fc0126b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db70e61a92978377a648bbd90e383859fc0126b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1db70e61a92978377a648bbd90e383859fc0126b", "patch": "@@ -165,7 +165,6 @@ struct processor_costs {\n   const int xmm_move, ymm_move, /* cost of moving XMM and YMM register.  */\n \t    zmm_move;\n   const int sse_to_integer;\t/* cost of moving SSE register to integer.  */\n-  const int integer_to_sse;\t/* cost of moving integer to SSE register.  */\n   const int gather_static, gather_per_elt; /* Cost of gather load is computed\n \t\t\t\t   as static + per_item * nelts. */\n   const int scatter_static, scatter_per_elt; /* Cost of gather store is"}, {"sha": "ffe810f2bcbf8033de0e769938e4a565335d6eeb", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db70e61a92978377a648bbd90e383859fc0126b/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db70e61a92978377a648bbd90e383859fc0126b/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=1db70e61a92978377a648bbd90e383859fc0126b", "patch": "@@ -102,7 +102,6 @@ struct processor_costs ix86_size_cost = {/* costs for tuning for size */\n \t\t\t\t\t   in 128bit, 256bit and 512bit */\n   3, 3, 3,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_BYTES (2),\t\t\t/* cost of moving integer to sse register.  */\n   5, 0,\t\t\t\t\t/* Gather load static, per_elt.  */\n   5, 0,\t\t\t\t\t/* Gather store static, per_elt.  */\n   0,\t\t\t\t\t/* size of l1 cache  */\n@@ -212,7 +211,6 @@ struct processor_costs i386_cost = {\t/* 386 specific costs */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   0,\t\t\t\t\t/* size of l1 cache  */\n@@ -321,7 +319,6 @@ struct processor_costs i486_cost = {\t/* 486 specific costs */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   4,\t\t\t\t\t/* size of l1 cache.  486 has 8kB cache\n@@ -432,7 +429,6 @@ struct processor_costs pentium_cost = {\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n@@ -534,7 +530,6 @@ struct processor_costs lakemont_cost = {\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n@@ -651,7 +646,6 @@ struct processor_costs pentiumpro_cost = {\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n@@ -759,7 +753,6 @@ struct processor_costs geode_cost = {\n   {2, 2, 8, 16, 32},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   2, 2,\t\t\t\t\t/* Gather load static, per_elt.  */\n   2, 2,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -867,7 +860,6 @@ struct processor_costs k6_cost = {\n   {2, 2, 8, 16, 32},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   2, 2,\t\t\t\t\t/* Gather load static, per_elt.  */\n   2, 2,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -981,7 +973,6 @@ struct processor_costs athlon_cost = {\n   {4, 4, 10, 10, 20},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   5,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -1097,7 +1088,6 @@ struct processor_costs k8_cost = {\n   {4, 4, 10, 10, 20},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   5,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -1226,7 +1216,6 @@ struct processor_costs amdfam10_cost = {\n   {4, 4, 5, 10, 20},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   3,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -1347,7 +1336,6 @@ const struct processor_costs bdver_cost = {\n   {10, 10, 10, 40, 60},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   16,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   12, 12,\t\t\t\t/* Gather load static, per_elt.  */\n   10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   16,\t\t\t\t\t/* size of l1 cache.  */\n@@ -1489,7 +1477,6 @@ struct processor_costs znver1_cost = {\n   {8, 8, 8, 16, 32},\t\t\t/* cost of unaligned stores.  */\n   2, 3, 6,\t\t\t\t/* cost of moving XMM,YMM,ZMM register.  */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   /* VGATHERDPD is 23 uops and throughput is 9, VGATHERDPD is 35 uops,\n      throughput 12.  Approx 9 uops do not depend on vector size and every load\n      is 7 uops.  */\n@@ -1646,7 +1633,6 @@ struct processor_costs znver2_cost = {\n   2, 2, 3,\t\t\t\t/* cost of moving XMM,YMM,ZMM\n \t\t\t\t\t   register.  */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   /* VGATHERDPD is 23 uops and throughput is 9, VGATHERDPD is 35 uops,\n      throughput 12.  Approx 9 uops do not depend on vector size and every load\n      is 7 uops.  */\n@@ -1779,7 +1765,6 @@ struct processor_costs znver3_cost = {\n   2, 2, 3,\t\t\t\t/* cost of moving XMM,YMM,ZMM\n \t\t\t\t\t   register.  */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   /* VGATHERDPD is 15 uops and throughput is 4, VGATHERDPS is 23 uops,\n      throughput 9.  Approx 7 uops do not depend on vector size and every load\n      is 4 uops.  */\n@@ -1924,7 +1909,6 @@ struct processor_costs skylake_cost = {\n   {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n   2, 2, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (2)+1,\t\t\t/* cost of moving integer to sse register.  */\n   20, 8,\t\t\t\t/* Gather load static, per_elt.  */\n   22, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2051,7 +2035,6 @@ struct processor_costs icelake_cost = {\n   {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n   2, 2, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   20, 8,\t\t\t\t/* Gather load static, per_elt.  */\n   22, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2165,7 +2148,6 @@ const struct processor_costs btver1_cost = {\n   {10, 10, 12, 48, 96},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   14,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   10, 10,\t\t\t\t/* Gather load static, per_elt.  */\n   10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2276,7 +2258,6 @@ const struct processor_costs btver2_cost = {\n   {10, 10, 12, 48, 96},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   14,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   10, 10,\t\t\t\t/* Gather load static, per_elt.  */\n   10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2386,7 +2367,6 @@ struct processor_costs pentium4_cost = {\n   {32, 32, 32, 64, 128},\t\t/* cost of unaligned stores.  */\n   12, 24, 48,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   20,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   16, 16,\t\t\t\t/* Gather load static, per_elt.  */\n   16, 16,\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2499,7 +2479,6 @@ struct processor_costs nocona_cost = {\n   {24, 24, 24, 48, 96},\t\t\t/* cost of unaligned stores.  */\n   6, 12, 24,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   20,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of moving integer to sse register.  */\n   12, 12,\t\t\t\t/* Gather load static, per_elt.  */\n   12, 12,\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2610,7 +2589,6 @@ struct processor_costs atom_cost = {\n   {16, 16, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   8,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   8, 8,\t\t\t\t\t/* Gather load static, per_elt.  */\n   8, 8,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2721,7 +2699,6 @@ struct processor_costs slm_cost = {\n   {16, 16, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   8,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   8, 8,\t\t\t\t\t/* Gather load static, per_elt.  */\n   8, 8,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2832,7 +2809,6 @@ struct processor_costs intel_cost = {\n   {10, 10, 10, 10, 10},\t\t\t/* cost of unaligned loads.  */\n   2, 2, 2,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   4,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   6, 6,\t\t\t\t\t/* Gather load static, per_elt.  */\n   6, 6,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -2950,7 +2926,6 @@ struct processor_costs generic_cost = {\n   {6, 6, 6, 10, 15},\t\t\t/* cost of unaligned storess.  */\n   2, 3, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   18, 6,\t\t\t\t/* Gather load static, per_elt.  */\n   18, 6,\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n@@ -3074,7 +3049,6 @@ struct processor_costs core_cost = {\n   {6, 6, 6, 6, 12},\t\t\t/* cost of unaligned stores.  */\n   2, 2, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   2,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n-  COSTS_N_INSNS (1),\t\t\t/* cost of moving integer to sse register.  */\n   /* VGATHERDPD is 7 uops, rec throughput 5, while VGATHERDPD is 9 uops,\n      rec. throughput 6.\n      So 5 uops statically and one uops per load.  */"}, {"sha": "3e087eb2ed7f579b462d14ae4c48de71c1cbda8f", "filename": "gcc/testsuite/gcc.target/i386/pr99881.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db70e61a92978377a648bbd90e383859fc0126b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db70e61a92978377a648bbd90e383859fc0126b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c?ref=1db70e61a92978377a648bbd90e383859fc0126b", "patch": "@@ -1,7 +1,7 @@\n /* PR target/99881.  */\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-Ofast -march=skylake\" } */\n-/* { dg-final { scan-assembler-not \"xmm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler-not \"xmm\\[0-9\\]\" { xfail *-*-* } } } */\n \n void\n foo (int* __restrict a, int n, int c)"}]}