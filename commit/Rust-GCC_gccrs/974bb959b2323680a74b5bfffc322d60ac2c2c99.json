{"sha": "974bb959b2323680a74b5bfffc322d60ac2c2c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0YmI5NTliMjMyMzY4MGE3NGI1YmZmZmMzMjJkNjBhYzJjMmM5OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-06-26T07:44:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-06-26T07:44:10Z"}, "message": "re PR tree-optimization/61607 (DOM missed jump threading and destroyed loops)\n\n2014-06-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61607\n\t* tree-ssa-threadupdate.c (ssa_redirect_edges): Cancel the\n\tloop if we redirected its latch edge.\n\t(thread_block_1): Do not cancel loops prematurely.\n\nFrom-SVN: r212011", "tree": {"sha": "d8075f504c928ca52004f69e986f7e34f70483f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8075f504c928ca52004f69e986f7e34f70483f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974bb959b2323680a74b5bfffc322d60ac2c2c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974bb959b2323680a74b5bfffc322d60ac2c2c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974bb959b2323680a74b5bfffc322d60ac2c2c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974bb959b2323680a74b5bfffc322d60ac2c2c99/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2626fc495bb50774416896f898914977a5071d29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2626fc495bb50774416896f898914977a5071d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2626fc495bb50774416896f898914977a5071d29"}], "stats": {"total": 42, "additions": 15, "deletions": 27}, "files": [{"sha": "d26b93e5402ba4ed2df4fe1b5ec7a983eba31412", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974bb959b2323680a74b5bfffc322d60ac2c2c99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974bb959b2323680a74b5bfffc322d60ac2c2c99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=974bb959b2323680a74b5bfffc322d60ac2c2c99", "patch": "@@ -1,3 +1,10 @@\n+2014-06-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61607\n+\t* tree-ssa-threadupdate.c (ssa_redirect_edges): Cancel the\n+\tloop if we redirected its latch edge.\n+\t(thread_block_1): Do not cancel loops prematurely.\n+\n 2014-06-25  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* toplev.c (backend_init_target): Move init_emit_regs and init_regs to..."}, {"sha": "a0b1be544adf358729e2675cb26405fe1b105e4f", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974bb959b2323680a74b5bfffc322d60ac2c2c99/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974bb959b2323680a74b5bfffc322d60ac2c2c99/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=974bb959b2323680a74b5bfffc322d60ac2c2c99", "patch": "@@ -764,6 +764,14 @@ ssa_redirect_edges (struct redirection_data **slot,\n \t  if ((*path)[1]->type != EDGE_COPY_SRC_JOINER_BLOCK)\n \t    EDGE_SUCC (rd->dup_blocks[0], 0)->count += e->count;\n \n+\t  /* If we redirect a loop latch edge cancel its loop.  */\n+\t  if (e->src == e->src->loop_father->latch)\n+\t    {\n+\t      e->src->loop_father->header = NULL;\n+\t      e->src->loop_father->latch = NULL;\n+\t      loops_state_set (LOOPS_NEED_FIXUP);\n+\t    }\n+\n \t  /* Redirect the incoming edge (possibly to the joiner block) to the\n \t     appropriate duplicate block.  */\n \t  e2 = redirect_edge_and_branch (e, rd->dup_blocks[0]);\n@@ -844,7 +852,6 @@ thread_block_1 (basic_block bb, bool noloop_only, bool joiners)\n   edge e, e2;\n   edge_iterator ei;\n   ssa_local_info_t local_info;\n-  struct loop *loop = bb->loop_father;\n \n   /* To avoid scanning a linear array for the element we need we instead\n      use a hash table.  For normal code there should be no noticeable\n@@ -853,32 +860,6 @@ thread_block_1 (basic_block bb, bool noloop_only, bool joiners)\n   redirection_data\n     = new hash_table<struct redirection_data> (EDGE_COUNT (bb->succs));\n \n-  /* If we thread the latch of the loop to its exit, the loop ceases to\n-     exist.  Make sure we do not restrict ourselves in order to preserve\n-     this loop.  */\n-  if (loop->header == bb)\n-    {\n-      e = loop_latch_edge (loop);\n-      vec<jump_thread_edge *> *path = THREAD_PATH (e);\n-\n-      if (path\n-\t  && (((*path)[1]->type == EDGE_COPY_SRC_JOINER_BLOCK && joiners)\n-\t      || ((*path)[1]->type == EDGE_COPY_SRC_BLOCK && !joiners)))\n-\t{\n-\t  for (unsigned int i = 1; i < path->length (); i++)\n-\t    {\n-\t      edge e2 = (*path)[i]->e;\n-\n-\t      if (loop_exit_edge_p (loop, e2))\n-\t\t{\n-\t\t  loop->header = NULL;\n-\t\t  loop->latch = NULL;\n-\t\t  loops_state_set (LOOPS_NEED_FIXUP);\n-\t\t}\n-\t    }\n-\t}\n-    }\n-\n   /* Record each unique threaded destination into a hash table for\n      efficient lookups.  */\n   FOR_EACH_EDGE (e, ei, bb->preds)"}]}