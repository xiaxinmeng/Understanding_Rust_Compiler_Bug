{"sha": "e776368b7a789daa0b246424528d7855cceb1e9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc3NjM2OGI3YTc4OWRhYTBiMjQ2NDI0NTI4ZDc4NTVjY2ViMWU5Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-09-15T22:05:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-09-15T22:05:39Z"}, "message": "tree-ssa-operands.c (add_call_clobber_ops): Fix unused variable warning with code disable.\n\n        * tree-ssa-operands.c (add_call_clobber_ops): Fix unused variable\n        warning with code disable.  Fix formatting.\n\nFrom-SVN: r87567", "tree": {"sha": "78270cdc68fcdb6cea6ca486d4c627e39b0c2e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78270cdc68fcdb6cea6ca486d4c627e39b0c2e19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e776368b7a789daa0b246424528d7855cceb1e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e776368b7a789daa0b246424528d7855cceb1e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e776368b7a789daa0b246424528d7855cceb1e9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e776368b7a789daa0b246424528d7855cceb1e9c/comments", "author": null, "committer": null, "parents": [{"sha": "c7f902196193ba3fe4540b580cbc613d53c05a13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f902196193ba3fe4540b580cbc613d53c05a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f902196193ba3fe4540b580cbc613d53c05a13"}], "stats": {"total": 73, "additions": 36, "deletions": 37}, "files": [{"sha": "175bd11e046263c2157eb3606373067d8700ef91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e776368b7a789daa0b246424528d7855cceb1e9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e776368b7a789daa0b246424528d7855cceb1e9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e776368b7a789daa0b246424528d7855cceb1e9c", "patch": "@@ -1,3 +1,8 @@\n+2004-09-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-ssa-operands.c (add_call_clobber_ops): Fix unused variable\n+\twarning with code disable.  Fix formatting.\n+\n 2004-09-15  Steven Bosscher  <stevenb@suse.de>\n \n \t* Makefile.in (tree-ssa-dom.o): Depend on tree-ssa-propagate.h."}, {"sha": "8daadc75438b7ee821522e3a954d3d5d21a43be6", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 31, "deletions": 37, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e776368b7a789daa0b246424528d7855cceb1e9c/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e776368b7a789daa0b246424528d7855cceb1e9c/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=e776368b7a789daa0b246424528d7855cceb1e9c", "patch": "@@ -1581,58 +1581,52 @@ add_call_clobber_ops (tree stmt, tree callee)\n   else\n     {\n       size_t i;\n+      bitmap not_read_b = NULL, not_written_b = NULL;\n \n       /* Get info for module level statics.  There is a bit set for\n \t each static if the call being processed does not read or\n \t write that variable.  */\n \n-      /* hack to turn off the optimization until I can get the bug fixed. */\n-      /*      bitmap not_read_b = callee \n-\t? get_global_statics_not_read (callee) : NULL; \n-      bitmap not_written_b = callee \n-\t? get_global_statics_not_written (callee) : NULL; \n-      */\n-\n-      bitmap not_read_b = NULL; \n-      bitmap not_written_b = NULL; \n+      /* ??? Turn off the optimization until it gets fixed.  */\n+      if (0 && callee)\n+\t{\n+\t  not_read_b = get_global_statics_not_read (callee);\n+\t  not_written_b = get_global_statics_not_written (callee);\n+\t}\n \n       EXECUTE_IF_SET_IN_BITMAP (call_clobbered_vars, 0, i,\n \t{\n \t  tree var = referenced_var (i);\n \n-\t  bool not_read = not_read_b \n-\t    ? bitmap_bit_p(not_read_b, i) : false;\n-\t  bool not_written = not_written_b\n-\t    ? bitmap_bit_p(not_written_b, i) : false;\n-\n+\t  bool not_read\n+\t    = not_read_b ? bitmap_bit_p (not_read_b, i) : false;\n+\t  bool not_written\n+\t    = not_written_b ? bitmap_bit_p (not_written_b, i) : false;\n \n-\t  if (not_read) \n-\t    { /* The var is not read during the call.  */\n-\t      if (not_written) \n-\t\t{\n-\t\t  /* Nothing. */\n-\t\t}\n-\t      else \n+\t  if (not_read)\n+\t    {\n+\t      /* The var is not read during the call.  */\n+\t      if (!not_written)\n \t\tadd_stmt_operand (&var, stmt, opf_is_def);\n-\t    } \n+\t    }\n \t  else\n-\t    { /* The var is read during the call.  */\n+\t    {\n+\t      /* The var is read during the call.  */\n \t      if (not_written) \n \t\tadd_stmt_operand (&var, stmt, opf_none);\n-\t      else \n-\t\t/* The not_read and not_written bits are only set\n-\t\t   for module static variables.  Neither is set\n-\t\t   here, so we may be dealing with a module static\n-\t\t   or we may not.  So we still must look anywhere\n-\t\t   else we can (such as the TREE_READONLY) to get\n-\t\t   better info.  */\n-\t\t/* If VAR is read-only, don't add a V_MAY_DEF, just a \n-\t\t   VUSE operand.  */\n-\t\tif (TREE_READONLY (var))\n-\t\t  add_stmt_operand (&var, stmt, opf_none);\n-\t\telse\n-\t\t  add_stmt_operand (&var, stmt, opf_is_def);\n-\t    }\t      \n+\n+\t      /* The not_read and not_written bits are only set for module\n+\t\t static variables.  Neither is set here, so we may be dealing\n+\t\t with a module static or we may not.  So we still must look\n+\t\t anywhere else we can (such as the TREE_READONLY) to get\n+\t\t better info.  */\n+\t      /* If VAR is read-only, don't add a V_MAY_DEF, just a\n+\t\t VUSE operand.  */\n+\t      else if (TREE_READONLY (var))\n+\t\tadd_stmt_operand (&var, stmt, opf_none);\n+\t      else\n+\t\tadd_stmt_operand (&var, stmt, opf_is_def);\n+\t    }\n \t});\n     }\n }"}]}