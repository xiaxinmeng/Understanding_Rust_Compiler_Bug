{"sha": "dfb25dfe3d34703f6e493664831dfaf53672b07b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiMjVkZmUzZDM0NzAzZjZlNDkzNjY0ODMxZGZhZjUzNjcyYjA3Yg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-03-21T13:20:47Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-03-21T19:13:17Z"}, "message": "Darwin: Handle NULL DECL_SIZE_TYPE in machopic_select_section (PR94237).\n\nA recent change in the LTO streaming arrangement means that it is\nnow possible for machopic_select_section () to be called with a NULL\nvalue for DECL_SIZE_TYPE - corresponding to an incomplete or not-yet-\nlaid out type.\n\nWhen section anchors are present, and we are generating assembler, we\nnormally need to know the object size when choosing the section, since\nzero-sized objects must be placed in sections that forbid section\nanchors.\n\nIn the current circumstance, the objective of the earlier streaming of\nthis data is to allow nm to determine BSS c.f. Data symbols (when used\nwith the LTO plugin).  Since Darwin does not yet make use of the plugin\nthis fix is a bit of future-proofing.  We now emit the 'generic' section\nfor the decl (absent knowing its size) - which will still be correct in\ndetermining the BSS c.f. Data case.\n\ngcc/ChangeLog:\n\n2020-03-21  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR lto/94237\n\t* config/darwin.c (darwin_mergeable_constant_section): Collect\n\tsection anchor checks into the caller.\n\t(machopic_select_section): Collect section anchor checks into\n\tthe determination of 'effective zero-size' objects.  When the\n\tsize is unknown, assume it is non-zero, and thus return the\n\t'generic' section for the DECL.", "tree": {"sha": "302a3ac32610ab1e96dba6027a2b1889bb7e3e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/302a3ac32610ab1e96dba6027a2b1889bb7e3e02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfb25dfe3d34703f6e493664831dfaf53672b07b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb25dfe3d34703f6e493664831dfaf53672b07b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb25dfe3d34703f6e493664831dfaf53672b07b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb25dfe3d34703f6e493664831dfaf53672b07b/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "837cece888f36543b6d326101362acb67ac3df0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837cece888f36543b6d326101362acb67ac3df0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/837cece888f36543b6d326101362acb67ac3df0a"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "b691ac991bdefacaa7f80d17d79b8141231d6c61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb25dfe3d34703f6e493664831dfaf53672b07b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb25dfe3d34703f6e493664831dfaf53672b07b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfb25dfe3d34703f6e493664831dfaf53672b07b", "patch": "@@ -1,3 +1,12 @@\n+2020-03-21 Iain Sandoe <iain@sandoe.co.uk>\n+\n+\t* config/darwin.c (darwin_mergeable_constant_section): Collect\n+\tsection anchor checks into the caller.\n+\t(machopic_select_section): Collect section anchor checks into\n+\tthe determination of 'effective zero-size' objects. When the\n+\tsize is unknown, assume it is non-zero, and thus return the\n+\t'generic' section for the DECL.\n+\n 2020-03-21 Iain Sandoe <iain@sandoe.co.uk>\n \n \tPR target/93694"}, {"sha": "d3c0af8a4b6bf16e27dd786a54e1e835c68ee743", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb25dfe3d34703f6e493664831dfaf53672b07b/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb25dfe3d34703f6e493664831dfaf53672b07b/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=dfb25dfe3d34703f6e493664831dfaf53672b07b", "patch": "@@ -1354,9 +1354,7 @@ darwin_mergeable_constant_section (tree exp,\n   machine_mode mode = DECL_MODE (exp);\n   unsigned int modesize = GET_MODE_BITSIZE (mode);\n \n-  if (DARWIN_SECTION_ANCHORS\n-      && flag_section_anchors\n-      && zsize)\n+  if (zsize)\n     return darwin_sections[zobj_const_section];\n \n   if (flag_merge_constants\n@@ -1586,8 +1584,23 @@ machopic_select_section (tree decl,\n \t  && DECL_WEAK (decl)\n \t  && !lookup_attribute (\"weak_import\", DECL_ATTRIBUTES (decl)));\n \n-  zsize = (DECL_P (decl)\n+  /* Darwin pads zero-sized objects with at least one byte, so that the ld64\n+     atom model is preserved (objects must have distinct regions starting with\n+     a unique linker-visible symbol).\n+     In order to support section anchors, we need to move objects with zero\n+     size into sections which are marked as \"no section anchors\"; the padded\n+     objects, obviously, have real sizes that differ from their DECL sizes.  */\n+  zsize = DARWIN_SECTION_ANCHORS && flag_section_anchors;\n+\n+  /* In the streaming of LTO symbol data, we might have a situation where the\n+     var is incomplete or layout not finished (DECL_SIZE_UNIT is NULL_TREE).\n+     We cannot tell if it is zero-sized then, but we can get the section\n+     category correct so that nm reports the right kind of section\n+     (e.g. BSS c.f. data).  */\n+  zsize = (zsize\n+\t   && DECL_P (decl)\n \t   && (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == CONST_DECL)\n+\t   && DECL_SIZE_UNIT (decl)\n \t   && tree_to_uhwi (DECL_SIZE_UNIT (decl)) == 0);\n \n   one = DECL_P (decl)\n@@ -1635,15 +1648,11 @@ machopic_select_section (tree decl,\n \t  else\n \t    base_section = darwin_sections[data_coal_section];\n \t}\n-      else if (DARWIN_SECTION_ANCHORS\n-\t       && flag_section_anchors\n-\t       && zsize)\n+      else if (zsize)\n \t{\n \t  /* If we're doing section anchors, then punt zero-sized objects into\n \t     their own sections so that they don't interfere with offset\n-\t     computation for the remaining vars.  This does not need to be done\n-\t     for stuff in mergeable sections, since these are ineligible for\n-\t     anchors.  */\n+\t     computation for the remaining vars.  */\n \t  if (ro)\n \t    base_section = darwin_sections[zobj_const_data_section];\n \t  else"}]}