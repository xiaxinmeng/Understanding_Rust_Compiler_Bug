{"sha": "c34923c44c49a18014b49bf33d180619a9fa0ac9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM0OTIzYzQ0YzQ5YTE4MDE0YjQ5YmYzM2QxODA2MTlhOWZhMGFjOQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-03-20T20:04:25Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-03-20T20:04:25Z"}, "message": "re PR tree-optimization/80054 (ICE in verify_ssa with -O3 -march=broadwell/skylake-avx512)\n\n[gcc]\n\n2017-03-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/80054\n\t* gimple-ssa-strength-reduction.c (all_phi_incrs_profitable): Fail\n\tthe optimization if a PHI or any of its arguments is not dominated\n\tby the candidate's basis.  Use gphi* rather than gimple* as\n\tappropriate.\n\t(replace_profitable_candidates): Clean up a gimple* variable that\n\tshould be a gphi* variable.\n\n[gcc/testsuite]\n\n2017-03-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/80054\n\t* g++.dg/torture/pr80054.C: New file.\n\nFrom-SVN: r246290", "tree": {"sha": "ccbcf5648b7808b2c65e066ad61a0d0c2d5c120c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccbcf5648b7808b2c65e066ad61a0d0c2d5c120c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c34923c44c49a18014b49bf33d180619a9fa0ac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34923c44c49a18014b49bf33d180619a9fa0ac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34923c44c49a18014b49bf33d180619a9fa0ac9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34923c44c49a18014b49bf33d180619a9fa0ac9/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8afd9c45b6e84193b2fc12a2332191e28cdbdd70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afd9c45b6e84193b2fc12a2332191e28cdbdd70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8afd9c45b6e84193b2fc12a2332191e28cdbdd70"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "07fc63898d3c699557ae6164736d5f20e46a67f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34923c44c49a18014b49bf33d180619a9fa0ac9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34923c44c49a18014b49bf33d180619a9fa0ac9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c34923c44c49a18014b49bf33d180619a9fa0ac9", "patch": "@@ -1,3 +1,13 @@\n+2017-03-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/80054\n+\t* gimple-ssa-strength-reduction.c (all_phi_incrs_profitable): Fail\n+\tthe optimization if a PHI or any of its arguments is not dominated\n+\tby the candidate's basis.  Use gphi* rather than gimple* as\n+\tappropriate.\n+\t(replace_profitable_candidates): Clean up a gimple* variable that\n+\tshould be a gphi* variable.\n+\n 2017-03-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/52477"}, {"sha": "ca154c51bfcd7c133d4762bb3322a1438f40f1c6", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34923c44c49a18014b49bf33d180619a9fa0ac9/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34923c44c49a18014b49bf33d180619a9fa0ac9/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=c34923c44c49a18014b49bf33d180619a9fa0ac9", "patch": "@@ -3279,17 +3279,34 @@ insert_initializers (slsr_cand_t c)\n }\n \n /* Return TRUE iff all required increments for candidates feeding PHI\n-   are profitable to replace on behalf of candidate C.  */\n+   are profitable (and legal!) to replace on behalf of candidate C.  */\n \n static bool\n-all_phi_incrs_profitable (slsr_cand_t c, gimple *phi)\n+all_phi_incrs_profitable (slsr_cand_t c, gphi *phi)\n {\n   unsigned i;\n   slsr_cand_t basis = lookup_cand (c->basis);\n   slsr_cand_t phi_cand = *stmt_cand_map->get (phi);\n \n+  /* If the basis doesn't dominate the PHI (including when the PHI is\n+     in the same block as the basis), we won't be able to create a PHI\n+     using the basis here.  */\n+  basic_block basis_bb = gimple_bb (basis->cand_stmt);\n+  basic_block phi_bb = gimple_bb (phi);\n+\n+  if (phi_bb == basis_bb\n+      || !dominated_by_p (CDI_DOMINATORS, phi_bb, basis_bb))\n+    return false;\n+\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n+      /* If the PHI arg resides in a block not dominated by the basis,\n+\t we won't be able to create a PHI using the basis here.  */\n+      basic_block pred_bb = gimple_phi_arg_edge (phi, i)->src;\n+\n+      if (!dominated_by_p (CDI_DOMINATORS, pred_bb, basis_bb))\n+\treturn false;\n+\n       tree arg = gimple_phi_arg_def (phi, i);\n \n       if (!operand_equal_p (arg, phi_cand->base_expr, 0))\n@@ -3298,7 +3315,7 @@ all_phi_incrs_profitable (slsr_cand_t c, gimple *phi)\n \n \t  if (gimple_code (arg_def) == GIMPLE_PHI)\n \t    {\n-\t      if (!all_phi_incrs_profitable (c, arg_def))\n+\t      if (!all_phi_incrs_profitable (c, as_a <gphi *> (arg_def)))\n \t\treturn false;\n \t    }\n \t  else\n@@ -3565,7 +3582,7 @@ replace_profitable_candidates (slsr_cand_t c)\n \t{\n \t  if (phi_dependent_cand_p (c))\n \t    {\n-\t      gimple *phi = lookup_cand (c->def_phi)->cand_stmt;\n+\t      gphi *phi = as_a <gphi *> (lookup_cand (c->def_phi)->cand_stmt);\n \n \t      if (all_phi_incrs_profitable (c, phi))\n \t\t{"}, {"sha": "121c3dc7c316ba73f0c459856d8d636394fb5d40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34923c44c49a18014b49bf33d180619a9fa0ac9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34923c44c49a18014b49bf33d180619a9fa0ac9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c34923c44c49a18014b49bf33d180619a9fa0ac9", "patch": "@@ -1,3 +1,8 @@\n+2017-03-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/80054\n+\t* g++.dg/torture/pr80054.C: New file.\n+\n 2017-03-20  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \tPR target/79963"}, {"sha": "50de24ae8215ede07d14d4da0e96001bd7eed1d6", "filename": "gcc/testsuite/g++.dg/torture/pr80054.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34923c44c49a18014b49bf33d180619a9fa0ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr80054.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34923c44c49a18014b49bf33d180619a9fa0ac9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr80054.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr80054.C?ref=c34923c44c49a18014b49bf33d180619a9fa0ac9", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+\n+/* Used to fail in SLSR because of a dominance violation.  PR80054.  */\n+\n+extern short var_2;\n+extern short var_4;\n+extern const bool var_32;\n+extern short var_36;\n+extern const bool var_37;\n+extern bool var_46;\n+extern unsigned int var_47;\n+extern short var_49;\n+extern unsigned int var_56;\n+extern unsigned int var_62;\n+extern unsigned int var_65;\n+extern bool var_831;\n+extern unsigned int var_843;\n+extern short var_846;\n+extern short var_889;\n+\n+void foo() {\n+  if (var_36 * var_37)\n+    var_831 = var_56 = 0;\n+  else\n+    var_65 = 0;\n+\n+  if (var_46)\n+    var_843 = 0;\n+\n+  var_846 = 0;\n+\n+  if ((var_4 == 0) >> (var_32 | -(var_37 < var_46 || var_36)) + 8)\n+    var_49 = 2032651381 * bool(var_2 * var_37);\n+  else {\n+    var_62 = 0;\n+    var_47 = (var_46 || var_36) * (var_2 * var_37);\n+  }\n+\n+  var_889 = bool(var_2 * var_37);\n+}"}]}