{"sha": "b0256cb6d28d3121f4bcba03da55979a4a467bd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyNTZjYjZkMjhkMzEyMWY0YmNiYTAzZGE1NTk3OWE0YTQ2N2JkNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T13:53:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T13:53:46Z"}, "message": "[multiple changes]\n\n2010-06-22  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Assignment): Revise test for illegal assignment\n\tto abstract targets to check that the type is tagged and comes from\n\tsource, rather than only testing for targets of interface types. Remove\n\tpremature return.\n\n2010-06-22  Vincent Celier  <celier@adacore.com>\n\n\t* vms_data.ads: Modify the declarations of qualifiers\n\t/UNCHECKED_SHARED_LIB_IMPORTS to allow the generation of gnat.hlp\n\twithout error.\n\n2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Is_Build_In_Place_Function): Predicate is false if\n\texpansion is disabled.\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* makeusg.adb: Minor reformatting.\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* types.ads: (Dint): Removed, no longer used anywhere.\n\t* uintp.adb (UI_From_CC): Use UI_From_Int, range is sufficient.\n\t(UI_Mul): Avoid use of UI_From_Dint.\n\t(UI_From_Dint): Removed, not used.\n\t* uintp.ads (UI_From_Dint): Removed, not used.\n\t(Uint_Min/Max_Simple_Mul): New constants.\n\nFrom-SVN: r161187", "tree": {"sha": "0c285ad5daaa531e4663b4c3851f4a91cf472cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c285ad5daaa531e4663b4c3851f4a91cf472cab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0256cb6d28d3121f4bcba03da55979a4a467bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0256cb6d28d3121f4bcba03da55979a4a467bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0256cb6d28d3121f4bcba03da55979a4a467bd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0256cb6d28d3121f4bcba03da55979a4a467bd7/comments", "author": null, "committer": null, "parents": [{"sha": "eeb41f0134d2d2f9f979fac0e0f176e9c3e8a490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb41f0134d2d2f9f979fac0e0f176e9c3e8a490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb41f0134d2d2f9f979fac0e0f176e9c3e8a490"}], "stats": {"total": 165, "additions": 84, "deletions": 81}, "files": [{"sha": "3bb621317f709f780f2a423aa30fc3b60358dcad", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b0256cb6d28d3121f4bcba03da55979a4a467bd7", "patch": "@@ -1,3 +1,34 @@\n+2010-06-22  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Revise test for illegal assignment\n+\tto abstract targets to check that the type is tagged and comes from\n+\tsource, rather than only testing for targets of interface types. Remove\n+\tpremature return.\n+\n+2010-06-22  Vincent Celier  <celier@adacore.com>\n+\n+\t* vms_data.ads: Modify the declarations of qualifiers\n+\t/UNCHECKED_SHARED_LIB_IMPORTS to allow the generation of gnat.hlp\n+\twithout error.\n+\n+2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Build_In_Place_Function): Predicate is false if\n+\texpansion is disabled.\n+\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* makeusg.adb: Minor reformatting.\n+\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* types.ads: (Dint): Removed, no longer used anywhere.\n+\t* uintp.adb (UI_From_CC): Use UI_From_Int, range is sufficient.\n+\t(UI_Mul): Avoid use of UI_From_Dint.\n+\t(UI_From_Dint): Removed, not used.\n+\t* uintp.ads (UI_From_Dint): Removed, not used.\n+\t(Uint_Min/Max_Simple_Mul): New constants.\n+\n 2010-06-22  Vincent Celier  <celier@adacore.com>\n \n \t* clean.adb (Parse_Cmd_Line): Recognize switch"}, {"sha": "61a180f55b22cf81bbaf0a3090dc4c5fddc33b77", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=b0256cb6d28d3121f4bcba03da55979a4a467bd7", "patch": "@@ -4764,6 +4764,13 @@ package body Exp_Ch6 is\n \n    function Is_Build_In_Place_Function (E : Entity_Id) return Boolean is\n    begin\n+      --  This function is called in some rare cases when expansion is off.\n+      --  In those cases the build_in_place expansion will not take place.\n+\n+      if not Expander_Active then\n+         return False;\n+      end if;\n+\n       --  For now we test whether E denotes a function or access-to-function\n       --  type whose result subtype is inherently limited. Later this test may\n       --  be revised to allow composite nonlimited types. Functions with a"}, {"sha": "7f8ddb6163d47ee34e18dc103ba61c5eaadf31e7", "filename": "gcc/ada/makeusg.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fmakeusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fmakeusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeusg.adb?ref=b0256cb6d28d3121f4bcba03da55979a4a467bd7", "patch": "@@ -24,8 +24,8 @@\n ------------------------------------------------------------------------------\n \n with Makeutl;\n-with Osint;  use Osint;\n-with Output; use Output;\n+with Osint;   use Osint;\n+with Output;  use Output;\n with Usage;\n \n procedure Makeusg is"}, {"sha": "bd34a6ea250df80ca56b5d84ec372ca33189a79e", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=b0256cb6d28d3121f4bcba03da55979a4a467bd7", "patch": "@@ -448,14 +448,14 @@ package body Sem_Ch5 is\n          end if;\n          return;\n \n-      --  Enforce RM 3.9.3 (8): left-hand side cannot be abstract\n+      --  Enforce RM 3.9.3 (8): the target of an assignment operation cannot be\n+      --  abstract. This is only checked when the assignment Comes_From_Source,\n+      --  because in some cases the expander generates such assignments (such\n+      --  in the _assign operation for an abstract type).\n \n-      elsif Is_Interface (T1)\n-        and then not Is_Class_Wide_Type (T1)\n-      then\n+      elsif Is_Abstract_Type (T1) and then Comes_From_Source (N) then\n          Error_Msg_N\n-           (\"target of assignment operation may not be abstract\", Lhs);\n-         return;\n+           (\"target of assignment operation must not be abstract\", Lhs);\n       end if;\n \n       --  Resolution may have updated the subtype, in case the left-hand"}, {"sha": "bb3c62d23e3b9a398c807237589fe77b093408b7", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=b0256cb6d28d3121f4bcba03da55979a4a467bd7", "patch": "@@ -59,9 +59,6 @@ package Types is\n    type Int is range -2 ** 31 .. +2 ** 31 - 1;\n    --  Signed 32-bit integer\n \n-   type Dint is range -2 ** 63 .. +2 ** 63 - 1;\n-   --  Double length (64-bit) integer\n-\n    subtype Nat is Int range 0 .. Int'Last;\n    --  Non-negative Int values\n \n@@ -506,7 +503,7 @@ package Types is\n    --  The type Char is used for character data internally in the compiler, but\n    --  character codes in the source are represented by the Char_Code type.\n    --  Each character literal in the source is interpreted as being one of the\n-   --  16#8000_0000 possible Wide_Wide_Character codes, and a unique Integer\n+   --  16#7FFF_FFFF possible Wide_Wide_Character codes, and a unique Integer\n    --  Value is assigned, corresponding to the UTF_32 value, which also\n    --  corresponds to the POS value in the Wide_Wide_Character type, and also\n    --  corresponds to the POS value in the Wide_Character and Character types"}, {"sha": "29ffe235aade41a725761174193f05babd68c4be", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 23, "deletions": 56, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=b0256cb6d28d3121f4bcba03da55979a4a467bd7", "patch": "@@ -168,13 +168,15 @@ package body Uintp is\n      (Left, Right       : Uint;\n       Quotient          : out Uint;\n       Remainder         : out Uint;\n-      Discard_Quotient  : Boolean;\n-      Discard_Remainder : Boolean);\n-   --  Compute Euclidean division of Left by Right, and return Quotient and\n-   --  signed Remainder (Left rem Right).\n+      Discard_Quotient  : Boolean := False;\n+      Discard_Remainder : Boolean := False);\n+   --  Compute Euclidean division of Left by Right. If Discard_Quotient is\n+   --  False then the quotient is returned in Quotient (otherwise Quotient is\n+   --  set to No_Uint). If Discard_Remainder is False, then the remainder is\n+   --  returned in Remainder (otherwise Remainder is set to No_Uint).\n    --\n-   --    If Discard_Quotient is True, Quotient is left unchanged.\n-   --    If Discard_Remainder is True, Remainder is left unchanged.\n+   --  If Discard_Quotient is True, Quotient is set to No_Uint\n+   --  If Discard_Remainder is True, Remainder is set to No_Uint\n \n    function Vector_To_Uint\n      (In_Vec   : UI_Vector;\n@@ -1253,7 +1255,6 @@ package body Uintp is\n       UI_Div_Rem\n         (Left, Right,\n          Quotient, Remainder,\n-         Discard_Quotient  => False,\n          Discard_Remainder => True);\n       return Quotient;\n    end UI_Div;\n@@ -1266,14 +1267,17 @@ package body Uintp is\n      (Left, Right       : Uint;\n       Quotient          : out Uint;\n       Remainder         : out Uint;\n-      Discard_Quotient  : Boolean;\n-      Discard_Remainder : Boolean)\n+      Discard_Quotient  : Boolean := False;\n+      Discard_Remainder : Boolean := False)\n    is\n       pragma Warnings (Off, Quotient);\n       pragma Warnings (Off, Remainder);\n    begin\n       pragma Assert (Right /= Uint_0);\n \n+      Quotient  := No_Uint;\n+      Remainder := No_Uint;\n+\n       --  Cases where both operands are represented directly\n \n       if Direct (Left) and then Direct (Right) then\n@@ -1682,43 +1686,9 @@ package body Uintp is\n \n    function UI_From_CC (Input : Char_Code) return Uint is\n    begin\n-      return UI_From_Dint (Dint (Input));\n+      return UI_From_Int (Int (Input));\n    end UI_From_CC;\n \n-   ------------------\n-   -- UI_From_Dint --\n-   ------------------\n-\n-   function UI_From_Dint (Input : Dint) return Uint is\n-   begin\n-\n-      if Dint (Min_Direct) <= Input and then Input <= Dint (Max_Direct) then\n-         return Uint (Dint (Uint_Direct_Bias) + Input);\n-\n-      --  For values of larger magnitude, compute digits into a vector and call\n-      --  Vector_To_Uint.\n-\n-      else\n-         declare\n-            Max_For_Dint : constant := 5;\n-            --  Base is defined so that 5 Uint digits is sufficient to hold the\n-            --  largest possible Dint value.\n-\n-            V : UI_Vector (1 .. Max_For_Dint);\n-\n-            Temp_Integer : Dint := Input;\n-\n-         begin\n-            for J in reverse V'Range loop\n-               V (J) := Int (abs (Temp_Integer rem Dint (Base)));\n-               Temp_Integer := Temp_Integer / Dint (Base);\n-            end loop;\n-\n-            return Vector_To_Uint (V, Input < Dint'(0));\n-         end;\n-      end if;\n-   end UI_From_Dint;\n-\n    -----------------\n    -- UI_From_Int --\n    -----------------\n@@ -2191,11 +2161,7 @@ package body Uintp is\n       Y := Uint_0;\n \n       loop\n-         UI_Div_Rem\n-           (U, V,\n-            Quotient => Q, Remainder => R,\n-            Discard_Quotient  => False,\n-            Discard_Remainder => False);\n+         UI_Div_Rem (U, V, Quotient => Q, Remainder => R);\n \n          U := V;\n          V := R;\n@@ -2232,12 +2198,15 @@ package body Uintp is\n \n    function UI_Mul (Left : Uint; Right : Uint) return Uint is\n    begin\n-      --  Simple case of single length operands\n+      --  Case where product fits in the range of a 32-bit integer\n \n-      if Direct (Left) and then Direct (Right) then\n+      if Int (Left)  <= Int (Uint_Max_Simple_Mul)\n+           and then\n+         Int (Right) <= Int (Uint_Max_Simple_Mul)\n+      then\n          return\n-           UI_From_Dint\n-             (Dint (Direct_Val (Left)) * Dint (Direct_Val (Right)));\n+           UI_From_Int\n+             (Int (Direct_Val (Left)) * Int (Direct_Val (Right)));\n       end if;\n \n       --  Otherwise we have the general case (Algorithm M in Knuth)\n@@ -2560,9 +2529,7 @@ package body Uintp is\n          pragma Warnings (Off, Quotient);\n       begin\n          UI_Div_Rem\n-           (Left, Right, Quotient, Remainder,\n-            Discard_Quotient  => True,\n-            Discard_Remainder => False);\n+           (Left, Right, Quotient, Remainder, Discard_Quotient  => True);\n          return Remainder;\n       end;\n    end UI_Rem;"}, {"sha": "d222c52c12f4d8ceca89352c9ed375817d922856", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=b0256cb6d28d3121f4bcba03da55979a4a467bd7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009  Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -233,9 +233,6 @@ package Uintp is\n    --  given Modulo (uses Euclid's algorithm). Note: the call is considered\n    --  to be erroneous (and the behavior is undefined) if n is not invertible.\n \n-   function UI_From_Dint (Input : Dint) return Uint;\n-   --  Converts Dint value to universal integer form\n-\n    function UI_From_Int (Input : Int) return Uint;\n    --  Converts Int value to universal integer form\n \n@@ -404,7 +401,8 @@ private\n    --  Base is defined to allow efficient execution of the primitive operations\n    --  (a0, b0, c0) defined in the section \"The Classical Algorithms\"\n    --  (sec. 4.3.1) of Donald Knuth's \"The Art of Computer  Programming\",\n-   --  Vol. 2. These algorithms are used in this package.\n+   --  Vol. 2. These algorithms are used in this package. In particular,\n+   --  the product of two single digits in this base fits in a 32-bit integer.\n \n    Base_Bits : constant := 15;\n    --  Number of bits in base value\n@@ -470,6 +468,11 @@ private\n    Uint_Minus_80  : constant Uint := Uint (Uint_Direct_Bias - 80);\n    Uint_Minus_128 : constant Uint := Uint (Uint_Direct_Bias - 128);\n \n+   Uint_Max_Simple_Mul : constant := Uint_Direct_Bias + 2 ** 15;\n+   --  If two values are directly represented and less than or equal to this\n+   --  value, then we know the product fits in a 32-bit integer. This allows\n+   --  UI_Mul to efficiently compute the product in this case.\n+\n    type Save_Mark is record\n       Save_Uint   : Uint;\n       Save_Udigit : Int;"}, {"sha": "5e81a28140c7c5672b184e91d90f851215ca2f5b", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0256cb6d28d3121f4bcba03da55979a4a467bd7/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=b0256cb6d28d3121f4bcba03da55979a4a467bd7", "patch": "@@ -1154,9 +1154,8 @@ package VMS_Data is\n    --   of the directory specified in the project file. If the subdirectory\n    --   does not exist, it is created automatically.\n \n-   S_Clean_Unc_Shared_Libs : aliased constant S :=\n-                                          \"/UNCHECKED_SHARED_LIB_IMPORTS \" &\n-                                              \"--unchecked-shared-lib-imports\";\n+   S_Clean_USL : aliased constant S :=  \"/UNCHECKED_SHARED_LIB_IMPORTS \" &\n+                                           \"--unchecked-shared-lib-imports\";\n    --        /NOUNCHECKED_SHARED_LIB_IMPORTS (D)\n    --        /UNCHECKED_SHARED_LIB_IMPORTS\n    --\n@@ -1188,7 +1187,7 @@ package VMS_Data is\n                        S_Clean_Search 'Access,\n                        S_Clean_Subdirs'Access,\n                        S_Clean_Verbose'Access,\n-                       S_Clean_Unc_Shared_Libs'Access);\n+                       S_Clean_USL    'Access);\n \n    -------------------------------\n    -- Switches for GNAT COMPILE --\n@@ -4869,9 +4868,8 @@ package VMS_Data is\n    --   For example, -O -O2 is different than -O2 -O, but -g -O is equivalent\n    --   to -O -g.\n \n-   S_Make_Unc_Shared_Libs : aliased constant S :=\n-                                          \"/UNCHECKED_SHARED_LIB_IMPORTS \" &\n-                                              \"--unchecked-shared-lib-imports\";\n+   S_Make_USL : aliased constant S := \"/UNCHECKED_SHARED_LIB_IMPORTS \" &\n+                                         \"--unchecked-shared-lib-imports\";\n    --        /NOUNCHECKED_SHARED_LIB_IMPORTS (D)\n    --        /UNCHECKED_SHARED_LIB_IMPORTS\n    --\n@@ -4954,7 +4952,7 @@ package VMS_Data is\n                       S_Make_Stand   'Access,\n                       S_Make_Subdirs 'Access,\n                       S_Make_Switch  'Access,\n-                      S_Make_Unc_Shared_Libs'Access,\n+                      S_Make_USL     'Access,\n                       S_Make_Unique  'Access,\n                       S_Make_Use_Map 'Access,\n                       S_Make_Verbose 'Access);"}]}