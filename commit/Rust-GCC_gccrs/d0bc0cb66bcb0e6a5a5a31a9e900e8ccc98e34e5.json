{"sha": "d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiYzBjYjY2YmNiMGU2YTVhNWEzMWE5ZTkwMGU4Y2NjOThlMzRlNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-17T17:01:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-17T17:01:10Z"}, "message": "[arm][aarch64] Handle no_insn in TARGET_SCHED_VARIABLE_ISSUE\n\nSince no_insn patterns expand to no instructions, they shouldn't\ncount against the issue rate, just like USEs and CLOBBERs don't.\n\n2019-09-17  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_sched_variable_issue): New\n\tfunction.\n\t(TARGET_SCHED_VARIABLE_ISSUE): New macro.\n\t* config/arm/arm.c (arm_sched_variable_issue): New function.\n\t(TARGET_SCHED_VARIABLE_ISSUE): New macro.\n\nFrom-SVN: r275808", "tree": {"sha": "b8330840a9094d1f5621f3b10e6d1d611e2ad50c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8330840a9094d1f5621f3b10e6d1d611e2ad50c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f62281dc1b3d751977266d8c30b4488833fcb9dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62281dc1b3d751977266d8c30b4488833fcb9dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f62281dc1b3d751977266d8c30b4488833fcb9dd"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "5a4fc2c6c3753c2215a825eab61895f5b398ca41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5", "patch": "@@ -1,3 +1,11 @@\n+2019-09-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_sched_variable_issue): New\n+\tfunction.\n+\t(TARGET_SCHED_VARIABLE_ISSUE): New macro.\n+\t* config/arm/arm.c (arm_sched_variable_issue): New function.\n+\t(TARGET_SCHED_VARIABLE_ISSUE): New macro.\n+\n 2019-09-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/arm/types.md (no_reservation): New reservation."}, {"sha": "232317d4a5a4a16529f573eef5a8d7a068068207", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5", "patch": "@@ -11804,6 +11804,23 @@ aarch64_sched_issue_rate (void)\n   return aarch64_tune_params.issue_rate;\n }\n \n+/* Implement TARGET_SCHED_VARIABLE_ISSUE.  */\n+static int\n+aarch64_sched_variable_issue (FILE *, int, rtx_insn *insn, int more)\n+{\n+  if (DEBUG_INSN_P (insn))\n+    return more;\n+\n+  rtx_code code = GET_CODE (PATTERN (insn));\n+  if (code == USE || code == CLOBBER)\n+    return more;\n+\n+  if (get_attr_type (insn) == TYPE_NO_INSN)\n+    return more;\n+\n+  return more - 1;\n+}\n+\n static int\n aarch64_sched_first_cycle_multipass_dfa_lookahead (void)\n {\n@@ -20584,6 +20601,9 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE aarch64_sched_issue_rate\n \n+#undef TARGET_SCHED_VARIABLE_ISSUE\n+#define TARGET_SCHED_VARIABLE_ISSUE aarch64_sched_variable_issue\n+\n #undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD \\\n   aarch64_sched_first_cycle_multipass_dfa_lookahead"}, {"sha": "c9ab71e57ef434e7128e71711ffb91f306738f27", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d0bc0cb66bcb0e6a5a5a31a9e900e8ccc98e34e5", "patch": "@@ -257,6 +257,7 @@ static bool arm_sched_can_speculate_insn (rtx_insn *);\n static bool arm_macro_fusion_p (void);\n static bool arm_cannot_copy_insn_p (rtx_insn *);\n static int arm_issue_rate (void);\n+static int arm_sched_variable_issue (FILE *, int, rtx_insn *, int);\n static int arm_first_cycle_multipass_dfa_lookahead (void);\n static int arm_first_cycle_multipass_dfa_lookahead_guard (rtx_insn *, int);\n static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n@@ -665,6 +666,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE arm_issue_rate\n \n+#undef TARGET_SCHED_VARIABLE_ISSUE\n+#define TARGET_SCHED_VARIABLE_ISSUE arm_sched_variable_issue\n+\n #undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD \\\n   arm_first_cycle_multipass_dfa_lookahead\n@@ -28495,6 +28499,23 @@ arm_issue_rate (void)\n   return current_tune->issue_rate;\n }\n \n+/* Implement TARGET_SCHED_VARIABLE_ISSUE.  */\n+static int\n+arm_sched_variable_issue (FILE *, int, rtx_insn *insn, int more)\n+{\n+  if (DEBUG_INSN_P (insn))\n+    return more;\n+\n+  rtx_code code = GET_CODE (PATTERN (insn));\n+  if (code == USE || code == CLOBBER)\n+    return more;\n+\n+  if (get_attr_type (insn) == TYPE_NO_INSN)\n+    return more;\n+\n+  return more - 1;\n+}\n+\n /* Return how many instructions should scheduler lookahead to choose the\n    best one.  */\n static int"}]}