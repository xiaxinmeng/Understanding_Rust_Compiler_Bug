{"sha": "883755a164ac5e56b049e8bf3b68d12eab3962a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzNzU1YTE2NGFjNWU1NmIwNDllOGJmM2I2OGQxMmVhYjM5NjJhOQ==", "commit": {"author": {"name": "David Wohlferd", "email": "dw@LimeGreenSocks.com", "date": "2014-05-19T17:40:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-05-19T17:40:40Z"}, "message": "extend.texi: Create Label Attributes section, move all label attributes into it and reference it.\n\n2014-05-19  David Wohlferd <dw@LimeGreenSocks.com>\n\n        * doc/extend.texi: Create Label Attributes section,\n        move all label attributes into it and reference it.\n\nFrom-SVN: r210621", "tree": {"sha": "d73ed8f7352575cf45399ac9bd226865219e0603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d73ed8f7352575cf45399ac9bd226865219e0603"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/883755a164ac5e56b049e8bf3b68d12eab3962a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883755a164ac5e56b049e8bf3b68d12eab3962a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883755a164ac5e56b049e8bf3b68d12eab3962a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883755a164ac5e56b049e8bf3b68d12eab3962a9/comments", "author": null, "committer": null, "parents": [{"sha": "905083ad75e4289d2a8ea9d4177c07af9e636f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905083ad75e4289d2a8ea9d4177c07af9e636f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/905083ad75e4289d2a8ea9d4177c07af9e636f92"}], "stats": {"total": 124, "additions": 89, "deletions": 35}, "files": [{"sha": "91369fc43cc0afeb4f112d4e5cd6bdaffa617217", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883755a164ac5e56b049e8bf3b68d12eab3962a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883755a164ac5e56b049e8bf3b68d12eab3962a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=883755a164ac5e56b049e8bf3b68d12eab3962a9", "patch": "@@ -1,3 +1,8 @@\n+2014-05-19  David Wohlferd <dw@LimeGreenSocks.com>\n+\n+\t* doc/extend.texi: Create Label Attributes section,\n+\tmove all label attributes into it and reference it.\n+\n 2014-05-19  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.c (thumb1_reorg): When scanning backwards skip anything"}, {"sha": "f36efb0c7fca4eb6754d9cc077b74b0f0ee3b42a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 84, "deletions": 35, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/883755a164ac5e56b049e8bf3b68d12eab3962a9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/883755a164ac5e56b049e8bf3b68d12eab3962a9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=883755a164ac5e56b049e8bf3b68d12eab3962a9", "patch": "@@ -55,6 +55,7 @@ extensions, accepted by GCC in C90 mode and in C++.\n * Mixed Declarations::  Mixing declarations and code.\n * Function Attributes:: Declaring that functions have no side effects,\n                         or that they can never return.\n+* Label Attributes::    Specifying attributes on labels.\n * Attribute Syntax::    Formal syntax for attributes.\n * Function Prototypes:: Prototype declarations and old-style definitions.\n * C++ Comments::        C++ comments are recognized.\n@@ -2181,7 +2182,8 @@ attributes are currently defined for functions on all targets:\n @code{error} and @code{warning}.\n Several other attributes are defined for functions on particular\n target systems.  Other attributes, including @code{section} are\n-supported for variables declarations (@pxref{Variable Attributes})\n+supported for variables declarations (@pxref{Variable Attributes}),\n+labels (@pxref{Label Attributes})\n and for types (@pxref{Type Attributes}).\n \n GCC plugins may provide their own attributes.\n@@ -3617,8 +3619,8 @@ than 2.96.\n @cindex @code{hot} function attribute\n The @code{hot} attribute on a function is used to inform the compiler that\n the function is a hot spot of the compiled program.  The function is\n-optimized more aggressively and on many target it is placed into special\n-subsection of the text section so all hot functions appears close together\n+optimized more aggressively and on many targets it is placed into a special\n+subsection of the text section so all hot functions appear close together,\n improving locality.\n \n When profile feedback is available, via @option{-fprofile-use}, hot functions\n@@ -3627,23 +3629,14 @@ are automatically detected and this attribute is ignored.\n The @code{hot} attribute on functions is not implemented in GCC versions\n earlier than 4.3.\n \n-@cindex @code{hot} label attribute\n-The @code{hot} attribute on a label is used to inform the compiler that\n-path following the label are more likely than paths that are not so\n-annotated.  This attribute is used in cases where @code{__builtin_expect}\n-cannot be used, for instance with computed goto or @code{asm goto}.\n-\n-The @code{hot} attribute on labels is not implemented in GCC versions\n-earlier than 4.8.\n-\n @item cold\n @cindex @code{cold} function attribute\n The @code{cold} attribute on functions is used to inform the compiler that\n the function is unlikely to be executed.  The function is optimized for\n-size rather than speed and on many targets it is placed into special\n-subsection of the text section so all cold functions appears close together\n+size rather than speed and on many targets it is placed into a special\n+subsection of the text section so all cold functions appear close together,\n improving code locality of non-cold parts of program.  The paths leading\n-to call of cold functions within code are marked as unlikely by the branch\n+to calls of cold functions within code are marked as unlikely by the branch\n prediction mechanism.  It is thus useful to mark functions used to handle\n unlikely conditions, such as @code{perror}, as cold to improve optimization\n of hot functions that do call marked functions in rare occasions.\n@@ -3654,15 +3647,6 @@ are automatically detected and this attribute is ignored.\n The @code{cold} attribute on functions is not implemented in GCC versions\n earlier than 4.3.\n \n-@cindex @code{cold} label attribute\n-The @code{cold} attribute on labels is used to inform the compiler that\n-the path following the label is unlikely to be executed.  This attribute\n-is used in cases where @code{__builtin_expect} cannot be used, for instance\n-with computed goto or @code{asm goto}.\n-\n-The @code{cold} attribute on labels is not implemented in GCC versions\n-earlier than 4.8.\n-\n @item no_sanitize_address\n @itemx no_address_safety_analysis\n @cindex @code{no_sanitize_address} function attribute\n@@ -4527,6 +4511,65 @@ attachment of attributes to their corresponding declarations, whereas\n @code{#pragma GCC} is of use for constructs that do not naturally form\n part of the grammar.  @xref{Pragmas,,Pragmas Accepted by GCC}.\n \n+@node Label Attributes\n+@section Label Attributes\n+@cindex Label Attributes\n+\n+GCC allows attributes to be set on C labels.  @xref{Attribute Syntax}, for \n+details of the exact syntax for using attributes.  Other attributes are \n+available for functions (@pxref{Function Attributes}), variables \n+(@pxref{Variable Attributes}) and for types (@pxref{Type Attributes}).\n+\n+This example uses the @code{cold} label attribute to indicate the \n+@code{ErrorHandling} branch is unlikely to be taken and that the\n+@code{ErrorHandling} label is unused:\n+\n+@smallexample\n+\n+   asm goto (\"some asm\" : : : : NoError);\n+\n+/* This branch (the fallthru from the asm) is less commonly used */\n+ErrorHandling: \n+   __attribute__((cold, unused)); /* Semi-colon is required here */\n+   printf(\"error\\n\");\n+   return 0;\n+\n+NoError:\n+   printf(\"no error\\n\");\n+   return 1;\n+@end smallexample\n+\n+@table @code\n+@item unused\n+@cindex @code{unused} label attribute\n+This feature is intended for program-generated code that may contain \n+unused labels, but which is compiled with @option{-Wall}.  It is\n+not normally appropriate to use in it human-written code, though it\n+could be useful in cases where the code that jumps to the label is\n+contained within an @code{#ifdef} conditional.\n+\n+@item hot\n+@cindex @code{hot} label attribute\n+The @code{hot} attribute on a label is used to inform the compiler that\n+the path following the label is more likely than paths that are not so\n+annotated.  This attribute is used in cases where @code{__builtin_expect}\n+cannot be used, for instance with computed goto or @code{asm goto}.\n+\n+The @code{hot} attribute on labels is not implemented in GCC versions\n+earlier than 4.8.\n+\n+@item cold\n+@cindex @code{cold} label attribute\n+The @code{cold} attribute on labels is used to inform the compiler that\n+the path following the label is unlikely to be executed.  This attribute\n+is used in cases where @code{__builtin_expect} cannot be used, for instance\n+with computed goto or @code{asm goto}.\n+\n+The @code{cold} attribute on labels is not implemented in GCC versions\n+earlier than 4.8.\n+\n+@end table\n+\n @node Attribute Syntax\n @section Attribute Syntax\n @cindex attribute syntax\n@@ -4550,6 +4593,8 @@ applying to functions.  @xref{Variable Attributes}, for details of the\n semantics of attributes applying to variables.  @xref{Type Attributes},\n for details of the semantics of attributes applying to structure, union\n and enumerated types.\n+@xref{Label Attributes}, for details of the semantics of attributes \n+applying to labels.\n \n An @dfn{attribute specifier} is of the form\n @code{__attribute__ ((@var{attribute-list}))}.  An @dfn{attribute list}\n@@ -4587,21 +4632,19 @@ with the list being a single string constant.\n An @dfn{attribute specifier list} is a sequence of one or more attribute\n specifiers, not separated by any other tokens.\n \n+@subsubheading Label Attributes\n+\n In GNU C, an attribute specifier list may appear after the colon following a\n-label, other than a @code{case} or @code{default} label.  The only\n-attribute it makes sense to use after a label is @code{unused}.  This\n-feature is intended for program-generated code that may contain unused labels,\n-but which is compiled with @option{-Wall}.  It is\n-not normally appropriate to use in it human-written code, though it\n-could be useful in cases where the code that jumps to the label is\n-contained within an @code{#ifdef} conditional.  GNU C++ only permits\n+label, other than a @code{case} or @code{default} label.  GNU C++ only permits\n attributes on labels if the attribute specifier is immediately\n followed by a semicolon (i.e., the label applies to an empty\n statement).  If the semicolon is missing, C++ label attributes are\n ambiguous, as it is permissible for a declaration, which could begin\n with an attribute list, to be labelled in C++.  Declarations cannot be\n labelled in C90 or C99, so the ambiguity does not arise there.\n \n+@subsubheading Type Attributes\n+\n An attribute specifier list may appear as part of a @code{struct},\n @code{union} or @code{enum} specifier.  It may go either immediately\n after the @code{struct}, @code{union} or @code{enum} keyword, or after\n@@ -4616,6 +4659,9 @@ defined is not complete until after the attribute specifiers.\n @c attributes could use sizeof for the structure, but the size could be\n @c changed later by \"packed\" attributes.\n \n+\n+@subsubheading All other attributes\n+\n Otherwise, an attribute specifier appears as part of a declaration,\n counting declarations of unnamed parameters and type names, and relates\n to that declaration (which may be nested in another declaration, for\n@@ -4856,7 +4902,8 @@ by an attribute specification inside double parentheses.  Some\n attributes are currently defined generically for variables.\n Other attributes are defined for variables on particular target\n systems.  Other attributes are available for functions\n-(@pxref{Function Attributes}) and for types (@pxref{Type Attributes}).\n+(@pxref{Function Attributes}), labels (@pxref{Label Attributes}) and for \n+types (@pxref{Type Attributes}).\n Other front ends might define more attributes\n (@pxref{C++ Extensions,,Extensions to the C++ Language}).\n \n@@ -5512,8 +5559,8 @@ inside double parentheses.  Seven attributes are currently defined for\n types: @code{aligned}, @code{packed}, @code{transparent_union},\n @code{unused}, @code{deprecated}, @code{visibility}, and\n @code{may_alias}.  Other attributes are defined for functions\n-(@pxref{Function Attributes}) and for variables (@pxref{Variable\n-Attributes}).\n+(@pxref{Function Attributes}), labels (@pxref{Label \n+Attributes}) and for variables (@pxref{Variable Attributes}).\n \n You may also specify any one of these attributes with @samp{__}\n preceding and following its keyword.  This allows you to use these\n@@ -6935,7 +6982,9 @@ GotoLabels section in an @code{asm goto} statement contains a comma-separated\n list of all C labels to which the assembler code may jump. GCC assumes that \n @code{asm} execution falls through to the next statement (if this is not the \n case, consider using the @code{__builtin_unreachable} intrinsic after the \n-@code{asm} statement). The total number of input + output + goto operands has \n+@code{asm} statement). Optimization of @code{asm goto} may be improved by \n+using the @code{hot} and @code{cold} label attributes (@pxref{Label \n+Attributes}). The total number of input + output + goto operands has \n a limit of 30.\n \n An @code{asm goto} statement can not have outputs (which means that the "}]}