{"sha": "4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ4M2RiNWQ3M2NlM2UzNTVmOWFjMTY2ZTA0ZDcyY2U0MWRlY2ZiNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-09T15:16:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-09T15:16:55Z"}, "message": "Add a vect_element_align_preferred target selector\n\nThis patch adds a target selector for targets whose\npreferred_vector_alignment is the alignment of one element.  We'll never\npeel in that case, and the step of a loop that operates on normal (as\nopposed to packed) elements will always divide the preferred alignment.\n\n2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* doc/sourcebuild.texi (vect_element_align_preferred): Document.\n\ngcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_vect_element_align_preferred): New proc.\n\t(check_effective_target_vect_peeling_profitable): Test it.\n\t* gcc.dg/vect/no-section-anchors-vect-31.c: Don't expect peeling\n\tif vect_element_align_preferred.\n\t* gcc.dg/vect/no-section-anchors-vect-64.c: Likewise.\n\t* gcc.dg/vect/pr65310.c: Likewise.\n\t* gcc.dg/vect/vect-26.c: Likewise.\n\t* gcc.dg/vect/vect-54.c: Likewise.\n\t* gcc.dg/vect/vect-56.c: Likewise.\n\t* gcc.dg/vect/vect-58.c: Likewise.\n\t* gcc.dg/vect/vect-60.c: Likewise.\n\t* gcc.dg/vect/vect-89-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-89.c: Likewise.\n\t* gcc.dg/vect/vect-92.c: Likewise.\n\t* gcc.dg/vect/vect-peel-1.c: Likewise.\n\t* gcc.dg/vect/vect-outer-3a-big-array.c: Expect the step to\n\tdivide the alignment if vect_element_align_preferred.\n\t* gcc.dg/vect/vect-outer-3a.c: Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254593", "tree": {"sha": "04800fbe66a0b37bd792a7cf6890779a1d5bfe6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04800fbe66a0b37bd792a7cf6890779a1d5bfe6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/comments", "author": null, "committer": null, "parents": [{"sha": "8b26c5492bf1d4c7acab18eff1e78a239af779a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b26c5492bf1d4c7acab18eff1e78a239af779a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b26c5492bf1d4c7acab18eff1e78a239af779a1"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "9c62a2fc1defe8902efca645ee09c9a98aee4152", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -1,3 +1,9 @@\n+2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* doc/sourcebuild.texi (vect_element_align_preferred): Document.\n+\n 2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "82c1d802893b2dca31556651ff061cb0c14a58ba", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -1383,6 +1383,10 @@ have different type from the value operands.\n @item vect_double\n Target supports hardware vectors of @code{double}.\n \n+@item vect_element_align_preferred\n+The target's preferred vector alignment is the same as the element\n+alignment.\n+\n @item vect_float\n Target supports hardware vectors of @code{float}.\n "}, {"sha": "ceb4a19fc9720ee92d94d7e1460200ea3284503e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -1,3 +1,27 @@\n+2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_vect_element_align_preferred): New proc.\n+\t(check_effective_target_vect_peeling_profitable): Test it.\n+\t* gcc.dg/vect/no-section-anchors-vect-31.c: Don't expect peeling\n+\tif vect_element_align_preferred.\n+\t* gcc.dg/vect/no-section-anchors-vect-64.c: Likewise.\n+\t* gcc.dg/vect/pr65310.c: Likewise.\n+\t* gcc.dg/vect/vect-26.c: Likewise.\n+\t* gcc.dg/vect/vect-54.c: Likewise.\n+\t* gcc.dg/vect/vect-56.c: Likewise.\n+\t* gcc.dg/vect/vect-58.c: Likewise.\n+\t* gcc.dg/vect/vect-60.c: Likewise.\n+\t* gcc.dg/vect/vect-89-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-89.c: Likewise.\n+\t* gcc.dg/vect/vect-92.c: Likewise.\n+\t* gcc.dg/vect/vect-peel-1.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-3a-big-array.c: Expect the step to\n+\tdivide the alignment if vect_element_align_preferred.\n+\t* gcc.dg/vect/vect-outer-3a.c: Likewise.\n+\n 2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "c3b242157ce782f0b84975c65fcdc4a36eb08fc4", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-31.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-31.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -94,4 +94,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "470bbfb5537226e25d87b5bfbe84f281a42d986d", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-64.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -91,4 +91,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "57e90d45c9fa3c0899f078d8d81cebbc72e04fff", "filename": "gcc/testsuite/gcc.dg/vect/pr65310.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65310.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65310.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65310.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -18,5 +18,5 @@ int t(b *a)\n /* The memory access is through a pointer of type c which means\n    *ptr is not aligned.  */\n \n-/* { dg-final { scan-tree-dump \"can't force alignment\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump-not \"misalign = 0\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"can't force alignment\" \"vect\" { xfail vect_element_align_preferred } } } */\n+/* { dg-final { scan-tree-dump-not \"misalign = 0\" \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "f8074e6ee84cdacbd0387af6ce74b376e0a412ef", "filename": "gcc/testsuite/gcc.dg/vect/vect-26.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-26.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -37,4 +37,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "1998d4a1de2440292366b273961c292d737a2945", "filename": "gcc/testsuite/gcc.dg/vect/vect-54.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -61,4 +61,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "5a76adadd7067d9f747783f4c834cb93925eb999", "filename": "gcc/testsuite/gcc.dg/vect/vect-56.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -70,5 +70,5 @@ int main (void)\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { vect_element_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { xfail { vect_element_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { vect_element_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { target { { ! vect_element_align } || vect_element_align_preferred} } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { vect_element_align && { ! vect_element_align_preferred } } } } } */"}, {"sha": "441af51860ea4b60da244d2c26113a977eb85ced", "filename": "gcc/testsuite/gcc.dg/vect/vect-58.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-58.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -59,4 +59,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "918ec5b40c1ebdd9f8ca56dc72a8f98a68f9ff08", "filename": "gcc/testsuite/gcc.dg/vect/vect-60.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-60.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -71,5 +71,5 @@ int main (void)\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { vect_no_align || vect_element_align } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { vect_element_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { xfail { vect_element_align } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { vect_element_align } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" { target { { ! vect_element_align } || vect_element_align_preferred } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { vect_element_align && { ! vect_element_align_preferred } } } } } */"}, {"sha": "409c7c960060fa8008fcc797f084b792cfa574cb", "filename": "gcc/testsuite/gcc.dg/vect/vect-89-big-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89-big-array.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -46,4 +46,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "65fc8dbc33abfa7e9507532f8f91d7c472755d53", "filename": "gcc/testsuite/gcc.dg/vect/vect-89.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -50,4 +50,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "b9a1ce23d0206dba28318b9c77c13492b45b5f3e", "filename": "gcc/testsuite/gcc.dg/vect/vect-92.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-92.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-92.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-92.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -98,4 +98,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "fd841b182e3c81eed43a249fe401c6213814ea36", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3a-big-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a-big-array.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -49,4 +49,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"step doesn't divide the vector alignment\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"step doesn't divide the vector alignment\" 1 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "d26440d1a64e887aa2cd6ccf1330cb34d244ef12", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -49,4 +49,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"step doesn't divide the vector alignment\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"step doesn't divide the vector alignment\" 1 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "abd12859927b722e8933ac8dccd627b8e1cdee16", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -49,4 +49,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { { vect_element_align } && { vect_aligned_arrays } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "38548ee516113712eeb40b2be55f6264212c3608", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d83db5d73ce3e355f9ac166e04d72ce41decfb5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4d83db5d73ce3e355f9ac166e04d72ce41decfb5", "patch": "@@ -3290,7 +3290,8 @@ proc check_effective_target_vect_peeling_profitable { } {\n     } else {\n \tset et_vect_peeling_profitable_saved($et_index) 1\n         if { ([istarget s390*-*-*]\n-\t      && [check_effective_target_s390_vx]) } {\n+\t      && [check_effective_target_s390_vx])\n+\t     || [check_effective_target_vect_element_align_preferred] } {\n \t    set et_vect_peeling_profitable_saved($et_index) 0\n         }\n     }\n@@ -6342,6 +6343,13 @@ proc check_effective_target_vect_natural_alignment { } {\n     return $et_vect_natural_alignment\n }\n \n+# Return 1 if the target doesn't prefer any alignment beyond element\n+# alignment during vectorization.\n+\n+proc check_effective_target_vect_element_align_preferred { } {\n+    return [check_effective_target_vect_variable_length]\n+}\n+\n # Return 1 if vector alignment (for types of size 32 bit or less) is reachable, 0 otherwise.\n \n proc check_effective_target_vector_alignment_reachable { } {"}]}