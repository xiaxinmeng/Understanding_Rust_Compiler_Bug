{"sha": "dcde5957ce2d3465028da302a878d93bea9fc41f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkZTU5NTdjZTJkMzQ2NTAyOGRhMzAyYTg3OGQ5M2JlYTlmYzQxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-02-04T15:50:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-02-04T15:50:51Z"}, "message": "re PR inline-asm/23200 (rejects \"i\"(&var + 1))\n\n\tPR inline-asm/23200\n\t* tree-ssa-ter.c (is_replaceable_p): Add TER argument.  Don't\n\tdo bb, locus and block comparison and disallow loads if it is\n\tnot set.\n\t(stmt_is_replaceable_p): New function.\n\t(process_replaceable, find_replaceable_in_bb): Adjust is_replaceable_p\n\tcallers.\n\t* expr.c (expand_expr_real_1) <case SSA_NAME>: If\n\tget_gimple_for_ssa_name try for EXPAND_INITIALIZER harder to use\n\tSSA_NAME_DEF_STMT.\n\t* tree-flow.h (stmt_is_replaceable_p): New prototype.\n\n\t* gcc.dg/pr23200.c: New test.\n\nFrom-SVN: r169831", "tree": {"sha": "414dfa9293092030de0a06170c839b69d92e5b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/414dfa9293092030de0a06170c839b69d92e5b67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcde5957ce2d3465028da302a878d93bea9fc41f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcde5957ce2d3465028da302a878d93bea9fc41f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcde5957ce2d3465028da302a878d93bea9fc41f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcde5957ce2d3465028da302a878d93bea9fc41f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a64a8e5a1375676bad507dd424e0a1c4850a525b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64a8e5a1375676bad507dd424e0a1c4850a525b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64a8e5a1375676bad507dd424e0a1c4850a525b"}], "stats": {"total": 85, "additions": 77, "deletions": 8}, "files": [{"sha": "e94de889b2d6254149280fed3a97ceaef3c3a378", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcde5957ce2d3465028da302a878d93bea9fc41f", "patch": "@@ -1,3 +1,17 @@\n+2011-02-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/23200\n+\t* tree-ssa-ter.c (is_replaceable_p): Add TER argument.  Don't\n+\tdo bb, locus and block comparison and disallow loads if it is\n+\tnot set.\n+\t(stmt_is_replaceable_p): New function.\n+\t(process_replaceable, find_replaceable_in_bb): Adjust is_replaceable_p\n+\tcallers.\n+\t* expr.c (expand_expr_real_1) <case SSA_NAME>: If\n+\tget_gimple_for_ssa_name try for EXPAND_INITIALIZER harder to use\n+\tSSA_NAME_DEF_STMT.\n+\t* tree-flow.h (stmt_is_replaceable_p): New prototype.\n+\n 2011-02-04  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/rs6000/xilinx.opt: New."}, {"sha": "b09b1ac07c227f9f42f635fd26e2993824fc0d46", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=dcde5957ce2d3465028da302a878d93bea9fc41f", "patch": "@@ -8387,6 +8387,13 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t\t   NULL);\n \n       g = get_gimple_for_ssa_name (exp);\n+      /* For EXPAND_INITIALIZER try harder to get something simpler.  */\n+      if (g == NULL\n+\t  && modifier == EXPAND_INITIALIZER\n+\t  && !SSA_NAME_IS_DEFAULT_DEF (exp)\n+\t  && (optimize || DECL_IGNORED_P (SSA_NAME_VAR (exp)))\n+\t  && stmt_is_replaceable_p (SSA_NAME_DEF_STMT (exp)))\n+\tg = SSA_NAME_DEF_STMT (exp);\n       if (g)\n \treturn expand_expr_real (gimple_assign_rhs_to_tree (g), target, tmode,\n \t\t\t\t modifier, NULL);"}, {"sha": "c4a145c4c690aa3160bcb4a91defd0fdefea4e58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcde5957ce2d3465028da302a878d93bea9fc41f", "patch": "@@ -1,3 +1,8 @@\n+2011-02-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/23200\n+\t* gcc.dg/pr23200.c: New test.\n+\n 2011-02-03  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR c++/47589"}, {"sha": "56bf59c861ae1cdc53e56f4d4d9c912ef50795ed", "filename": "gcc/testsuite/gcc.dg/pr23200.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23200.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23200.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23200.c?ref=dcde5957ce2d3465028da302a878d93bea9fc41f", "patch": "@@ -0,0 +1,22 @@\n+/* PR inline-asm/23200 */\n+/* { dg-do compile { target nonpic } } */\n+/* { dg-options \"-O0\" } */\n+\n+static char var;\n+\n+void\n+foo (void)\n+{\n+  asm volatile (\"\" :: \"i\" (&var + 1));\n+}\n+\n+typedef int T[];\n+typedef T *P;\n+\n+int var2;\n+\n+void\n+bar (void)\n+{\n+  asm volatile (\"\" :: \"i\"(&(*(P)&var2)[1]));\n+}"}, {"sha": "e5642a0fbe337e92e00ec9db536ac00e6965e6f4", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=dcde5957ce2d3465028da302a878d93bea9fc41f", "patch": "@@ -1,5 +1,5 @@\n /* Data and Control Flow Analysis for Trees.\n-   Copyright (C) 2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n@@ -852,6 +852,9 @@ bool fixup_noreturn_call (gimple stmt);\n /* In ipa-pure-const.c  */\n void warn_function_noreturn (tree);\n \n+/* In tree-ssa-ter.c  */\n+bool stmt_is_replaceable_p (gimple);\n+\n #include \"tree-flow-inline.h\"\n \n void swap_tree_operands (gimple, tree *, tree *);"}, {"sha": "af8aae04a745e2135e246feaf2efe15260ce085c", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcde5957ce2d3465028da302a878d93bea9fc41f/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=dcde5957ce2d3465028da302a878d93bea9fc41f", "patch": "@@ -1,5 +1,5 @@\n /* Routines for performing Temporary Expression Replacement (TER) in SSA trees.\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Andrew MacLeod  <amacleod@redhat.com>\n \n@@ -357,10 +357,17 @@ add_dependence (temp_expr_table_p tab, int version, tree var)\n }\n \n \n-/* Return TRUE if expression STMT is suitable for replacement.  */\n+/* Return TRUE if expression STMT is suitable for replacement.\n+   TER is true if is_replaceable_p is called from within TER, false\n+   when used from within stmt_is_replaceable_p, i.e. EXPAND_INITIALIZER\n+   expansion.  The differences are that with !TER some tests are skipped\n+   to make it more aggressive (doesn't require the same bb, or for -O0\n+   same locus and same BLOCK), on the other side never considers memory\n+   loads as replaceable, because those don't ever lead into constant\n+   expressions.  */\n \n static inline bool\n-is_replaceable_p (gimple stmt)\n+is_replaceable_p (gimple stmt, bool ter)\n {\n   use_operand_p use_p;\n   tree def;\n@@ -386,7 +393,7 @@ is_replaceable_p (gimple stmt)\n     return false;\n \n   /* If the use isn't in this block, it wont be replaced either.  */\n-  if (gimple_bb (use_stmt) != gimple_bb (stmt))\n+  if (ter && gimple_bb (use_stmt) != gimple_bb (stmt))\n     return false;\n \n   locus1 = gimple_location (stmt);\n@@ -404,6 +411,7 @@ is_replaceable_p (gimple stmt)\n     }\n \n   if (!optimize\n+      && ter\n       && ((locus1 && locus1 != locus2) || (block1 && block1 != block2)))\n     return false;\n \n@@ -416,7 +424,7 @@ is_replaceable_p (gimple stmt)\n     return false;\n \n   /* Without alias info we can't move around loads.  */\n-  if (!optimize\n+  if ((!optimize || !ter)\n       && gimple_assign_single_p (stmt)\n       && !is_gimple_val (gimple_assign_rhs1 (stmt)))\n     return false;\n@@ -444,6 +452,16 @@ is_replaceable_p (gimple stmt)\n }\n \n \n+/* Variant of is_replaceable_p test for use in EXPAND_INITIALIZER\n+   expansion.  */\n+\n+bool\n+stmt_is_replaceable_p (gimple stmt)\n+{\n+  return is_replaceable_p (stmt, false);\n+}\n+\n+\n /* This function will remove the expression for VERSION from replacement\n    consideration in table TAB.  If FREE_EXPR is true, then remove the\n    expression from consideration as well by freeing the decl uid bitmap.  */\n@@ -477,7 +495,7 @@ process_replaceable (temp_expr_table_p tab, gimple stmt, int call_cnt)\n   ssa_op_iter iter;\n   bitmap def_vars, use_vars;\n \n-  gcc_checking_assert (is_replaceable_p (stmt));\n+  gcc_checking_assert (is_replaceable_p (stmt, true));\n \n   def = SINGLE_SSA_TREE_OPERAND (stmt, SSA_OP_DEF);\n   version = SSA_NAME_VERSION (def);\n@@ -589,7 +607,7 @@ find_replaceable_in_bb (temp_expr_table_p tab, basic_block bb)\n       if (is_gimple_debug (stmt))\n \tcontinue;\n \n-      stmt_replaceable = is_replaceable_p (stmt);\n+      stmt_replaceable = is_replaceable_p (stmt, true);\n \n       /* Determine if this stmt finishes an existing expression.  */\n       FOR_EACH_SSA_TREE_OPERAND (use, stmt, iter, SSA_OP_USE)"}]}