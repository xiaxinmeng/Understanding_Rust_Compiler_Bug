{"sha": "8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMyMzQzNGZkYWRjZjRjYWExZjBlOTY2Mjk0YzVmNjdjY2Y0YmNmOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-06T09:58:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-06T09:58:10Z"}, "message": "[PATCH] phiopt: Handle bool in two_value_replacement [PR796232]\n\nThe following patch improves code generation on the included testcase by\nenabling two_value_replacement on booleans.  It does that only for arg0/arg1\nvalues that conditional_replacement doesn't handle.  Additionally\nit limits two_value_replacement optimization to the late phiopt like\nconditional_replacement.\n\n2020-12-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96232\n\t* tree-ssa-phiopt.c (two_value_replacement): Optimize even boolean lhs\n\tcases as long as arg0 has wider precision and conditional_replacement\n\tdoesn't handle that case.\n\t(tree_ssa_phiopt_worker): Don't call two_value_replacement during\n\tearly phiopt.\n\n\t* gcc.dg/tree-ssa/pr96232-2.c: New test.\n\t* gcc.dg/tree-ssa/pr88676-2.c: Check phiopt2 dump rather than phiopt1.", "tree": {"sha": "ab85825958107ecc849c9da1e95a51d2670a545d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab85825958107ecc849c9da1e95a51d2670a545d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e12b8b1819342ef7efac58cf7f4ba4294abe551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e12b8b1819342ef7efac58cf7f4ba4294abe551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e12b8b1819342ef7efac58cf7f4ba4294abe551"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "ea88407b672b09b45c027540c7b2d101d8582174", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr88676-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88676-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88676-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88676-2.c?ref=8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9", "patch": "@@ -1,7 +1,7 @@\n /* PR tree-optimization/88676 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-phiopt1\" } */\n-/* { dg-final { scan-tree-dump-not \" = PHI <\" \"phiopt1\" { target le } } } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt2\" } */\n+/* { dg-final { scan-tree-dump-not \" = PHI <\" \"phiopt2\" { target le } } } */\n \n struct foo1 {\n   int i:1;"}, {"sha": "9f51820edfffa35e7bccec012e452b61c3a51880", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96232-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96232-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96232-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96232-2.c?ref=8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9", "patch": "@@ -0,0 +1,18 @@\n+/* PR tree-optimization/96232 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump \" 38 - \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" \\\\+ 97;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"PHI <\" \"optimized\" } } */\n+\n+int\n+foo (_Bool x)\n+{\n+  return x ? 37 : 38;\n+}\n+\n+int\n+bar (_Bool x)\n+{\n+  return x ? 98 : 97;\n+}"}, {"sha": "21b88c005b0e3e3334ffb74e559c4de5fe3099d1", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=8c23434fdadcf4caa1f0e966294c5f67ccf4bcf9", "patch": "@@ -337,7 +337,7 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads, bool early_p)\n \t    }\n \n \t  /* Do the replacement of conditional if it can be done.  */\n-\t  if (two_value_replacement (bb, bb1, e2, phi, arg0, arg1))\n+\t  if (!early_p && two_value_replacement (bb, bb1, e2, phi, arg0, arg1))\n \t    cfgchanged = true;\n \t  else if (!early_p\n \t\t   && conditional_replacement (bb, bb1, e1, e2, phi,\n@@ -635,7 +635,6 @@ two_value_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   if (TREE_CODE (lhs) != SSA_NAME\n       || !INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n-      || TREE_CODE (TREE_TYPE (lhs)) == BOOLEAN_TYPE\n       || TREE_CODE (rhs) != INTEGER_CST)\n     return false;\n \n@@ -648,9 +647,25 @@ two_value_replacement (basic_block cond_bb, basic_block middle_bb,\n       return false;\n     }\n \n+  /* Defer boolean x ? 0 : {1,-1} or x ? {1,-1} : 0 to\n+     conditional_replacement.  */\n+  if (TREE_CODE (TREE_TYPE (lhs)) == BOOLEAN_TYPE\n+      && (integer_zerop (arg0)\n+\t  || integer_zerop (arg1)\n+\t  || TREE_CODE (TREE_TYPE (arg0)) == BOOLEAN_TYPE\n+\t  || (TYPE_PRECISION (TREE_TYPE (arg0))\n+\t      <= TYPE_PRECISION (TREE_TYPE (lhs)))))\n+    return false;\n+\n   wide_int min, max;\n-  if (get_range_info (lhs, &min, &max) != VR_RANGE\n-      || min + 1 != max\n+  if (TREE_CODE (TREE_TYPE (lhs)) == BOOLEAN_TYPE)\n+    {\n+      min = wi::to_wide (boolean_false_node);\n+      max = wi::to_wide (boolean_true_node);\n+    }\n+  else if (get_range_info (lhs, &min, &max) != VR_RANGE)\n+    return false;\n+  if (min + 1 != max\n       || (wi::to_wide (rhs) != min\n \t  && wi::to_wide (rhs) != max))\n     return false;"}]}