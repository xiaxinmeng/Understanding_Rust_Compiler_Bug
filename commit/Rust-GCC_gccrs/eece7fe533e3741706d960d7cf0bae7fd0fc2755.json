{"sha": "eece7fe533e3741706d960d7cf0bae7fd0fc2755", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjZTdmZTUzM2UzNzQxNzA2ZDk2MGQ3Y2YwYmFlN2ZkMGZjMjc1NQ==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2018-02-02T13:39:30Z"}, "committer": {"name": "Julia Koval", "email": "jkoval@gcc.gnu.org", "date": "2018-02-02T13:39:30Z"}, "message": "Move omp bitmask to general to use it in x86 backend.\n\ngcc/c-family/\n\t* c-common.h (omp_clause_mask): Move to wide_int_bitmask.h.\n\ngcc/\n\t* config/i386/i386.c (ix86_option_override_internal): Change flags type\n\tto wide_int_bitmask.\n\t* wide-int-bitmask.h: New.\n\nFrom-SVN: r257329", "tree": {"sha": "ceb6dea996ecfc6846c5b05fdf4ad652aa2937a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceb6dea996ecfc6846c5b05fdf4ad652aa2937a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eece7fe533e3741706d960d7cf0bae7fd0fc2755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eece7fe533e3741706d960d7cf0bae7fd0fc2755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eece7fe533e3741706d960d7cf0bae7fd0fc2755", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eece7fe533e3741706d960d7cf0bae7fd0fc2755/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce2e6077501a916681c64b8c579c1c6fa674ede9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2e6077501a916681c64b8c579c1c6fa674ede9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2e6077501a916681c64b8c579c1c6fa674ede9"}], "stats": {"total": 607, "additions": 320, "deletions": 287}, "files": [{"sha": "5ef0f8de4db0e4a0c13eb5429b6cc228d7c44439", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece7fe533e3741706d960d7cf0bae7fd0fc2755/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece7fe533e3741706d960d7cf0bae7fd0fc2755/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eece7fe533e3741706d960d7cf0bae7fd0fc2755", "patch": "@@ -1,3 +1,9 @@\n+2018-02-02  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/i386.c (ix86_option_override_internal): Change flags type\n+\tto wide_int_bitmask.\n+\t* wide-int-bitmask.h: New.\n+\n 2018-02-02  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \tPR target/84066"}, {"sha": "5bbdd36db51b4bdc18d0b047c53c5255a700ed1a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece7fe533e3741706d960d7cf0bae7fd0fc2755/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece7fe533e3741706d960d7cf0bae7fd0fc2755/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=eece7fe533e3741706d960d7cf0bae7fd0fc2755", "patch": "@@ -1,3 +1,7 @@\n+2018-02-02  Julia Koval  <julia.koval@intel.com>\n+\n+\t* c-common.h (omp_clause_mask): Move to wide_int_bitmask.h.\n+\n 2018-01-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/83966"}, {"sha": "aad01fa569eefc59ccb75554ac174ea9c31ed1ef", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 120, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece7fe533e3741706d960d7cf0bae7fd0fc2755/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece7fe533e3741706d960d7cf0bae7fd0fc2755/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=eece7fe533e3741706d960d7cf0bae7fd0fc2755", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alias.h\"\n #include \"tree.h\"\n #include \"fold-const.h\"\n+#include \"wide-int-bitmask.h\"\n \n /* In order for the format checking to accept the C frontend\n    diagnostic framework extensions, you must include this file before\n@@ -1111,126 +1112,7 @@ extern void pp_dir_change (cpp_reader *, const char *);\n extern bool check_missing_format_attribute (tree, tree);\n \n /* In c-omp.c  */\n-struct omp_clause_mask\n-{\n-  inline omp_clause_mask ();\n-  inline omp_clause_mask (uint64_t l);\n-  inline omp_clause_mask (uint64_t l, uint64_t h);\n-  inline omp_clause_mask &operator &= (omp_clause_mask);\n-  inline omp_clause_mask &operator |= (omp_clause_mask);\n-  inline omp_clause_mask operator ~ () const;\n-  inline omp_clause_mask operator & (omp_clause_mask) const;\n-  inline omp_clause_mask operator | (omp_clause_mask) const;\n-  inline omp_clause_mask operator >> (int);\n-  inline omp_clause_mask operator << (int);\n-  inline bool operator == (omp_clause_mask) const;\n-  inline bool operator != (omp_clause_mask) const;\n-  uint64_t low, high;\n-};\n-\n-inline\n-omp_clause_mask::omp_clause_mask ()\n-{\n-}\n-\n-inline\n-omp_clause_mask::omp_clause_mask (uint64_t l)\n-: low (l), high (0)\n-{\n-}\n-\n-inline\n-omp_clause_mask::omp_clause_mask (uint64_t l, uint64_t h)\n-: low (l), high (h)\n-{\n-}\n-\n-inline omp_clause_mask &\n-omp_clause_mask::operator &= (omp_clause_mask b)\n-{\n-  low &= b.low;\n-  high &= b.high;\n-  return *this;\n-}\n-\n-inline omp_clause_mask &\n-omp_clause_mask::operator |= (omp_clause_mask b)\n-{\n-  low |= b.low;\n-  high |= b.high;\n-  return *this;\n-}\n-\n-inline omp_clause_mask\n-omp_clause_mask::operator ~ () const\n-{\n-  omp_clause_mask ret (~low, ~high);\n-  return ret;\n-}\n-\n-inline omp_clause_mask\n-omp_clause_mask::operator | (omp_clause_mask b) const\n-{\n-  omp_clause_mask ret (low | b.low, high | b.high);\n-  return ret;\n-}\n-\n-inline omp_clause_mask\n-omp_clause_mask::operator & (omp_clause_mask b) const\n-{\n-  omp_clause_mask ret (low & b.low, high & b.high);\n-  return ret;\n-}\n-\n-inline omp_clause_mask\n-omp_clause_mask::operator << (int amount)\n-{\n-  omp_clause_mask ret;\n-  if (amount >= 64)\n-    {\n-      ret.low = 0;\n-      ret.high = low << (amount - 64);\n-    }\n-  else if (amount == 0)\n-    ret = *this;\n-  else\n-    {\n-      ret.low = low << amount;\n-      ret.high = (low >> (64 - amount)) | (high << amount);\n-    }\n-  return ret;\n-}\n-\n-inline omp_clause_mask\n-omp_clause_mask::operator >> (int amount)\n-{\n-  omp_clause_mask ret;\n-  if (amount >= 64)\n-    {\n-      ret.low = high >> (amount - 64);\n-      ret.high = 0;\n-    }\n-  else if (amount == 0)\n-    ret = *this;\n-  else\n-    {\n-      ret.low = (high << (64 - amount)) | (low >> amount);\n-      ret.high = high >> amount;\n-    }\n-  return ret;\n-}\n-\n-inline bool\n-omp_clause_mask::operator == (omp_clause_mask b) const\n-{\n-  return low == b.low && high == b.high;\n-}\n-\n-inline bool\n-omp_clause_mask::operator != (omp_clause_mask b) const\n-{\n-  return low != b.low || high != b.high;\n-}\n+typedef wide_int_bitmask omp_clause_mask;\n \n #define OMP_CLAUSE_MASK_1 omp_clause_mask (1)\n "}, {"sha": "801f8e1aa71a5693cdc63634455713edbbb60c39", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 163, "deletions": 167, "changes": 330, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece7fe533e3741706d960d7cf0bae7fd0fc2755/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece7fe533e3741706d960d7cf0bae7fd0fc2755/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=eece7fe533e3741706d960d7cf0bae7fd0fc2755", "patch": "@@ -90,6 +90,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-fnsummary.h\"\n+#include \"wide-int-bitmask.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -3381,111 +3382,104 @@ ix86_option_override_internal (bool main_args_p,\n   unsigned int ix86_arch_mask;\n   const bool ix86_tune_specified = (opts->x_ix86_tune_string != NULL);\n \n-#define PTA_3DNOW\t\t(HOST_WIDE_INT_1 << 0)\n-#define PTA_3DNOW_A\t\t(HOST_WIDE_INT_1 << 1)\n-#define PTA_64BIT\t\t(HOST_WIDE_INT_1 << 2)\n-#define PTA_ABM\t\t\t(HOST_WIDE_INT_1 << 3)\n-#define PTA_AES\t\t\t(HOST_WIDE_INT_1 << 4)\n-#define PTA_AVX\t\t\t(HOST_WIDE_INT_1 << 5)\n-#define PTA_BMI\t\t\t(HOST_WIDE_INT_1 << 6)\n-#define PTA_CX16\t\t(HOST_WIDE_INT_1 << 7)\n-#define PTA_F16C\t\t(HOST_WIDE_INT_1 << 8)\n-#define PTA_FMA\t\t\t(HOST_WIDE_INT_1 << 9)\n-#define PTA_FMA4\t\t(HOST_WIDE_INT_1 << 10)\n-#define PTA_FSGSBASE\t\t(HOST_WIDE_INT_1 << 11)\n-#define PTA_LWP\t\t\t(HOST_WIDE_INT_1 << 12)\n-#define PTA_LZCNT\t\t(HOST_WIDE_INT_1 << 13)\n-#define PTA_MMX\t\t\t(HOST_WIDE_INT_1 << 14)\n-#define PTA_MOVBE\t\t(HOST_WIDE_INT_1 << 15)\n-#define PTA_NO_SAHF\t\t(HOST_WIDE_INT_1 << 16)\n-#define PTA_PCLMUL\t\t(HOST_WIDE_INT_1 << 17)\n-#define PTA_POPCNT\t\t(HOST_WIDE_INT_1 << 18)\n-#define PTA_PREFETCH_SSE\t(HOST_WIDE_INT_1 << 19)\n-#define PTA_RDRND\t\t(HOST_WIDE_INT_1 << 20)\n-#define PTA_SSE\t\t\t(HOST_WIDE_INT_1 << 21)\n-#define PTA_SSE2\t\t(HOST_WIDE_INT_1 << 22)\n-#define PTA_SSE3\t\t(HOST_WIDE_INT_1 << 23)\n-#define PTA_SSE4_1\t\t(HOST_WIDE_INT_1 << 24)\n-#define PTA_SSE4_2\t\t(HOST_WIDE_INT_1 << 25)\n-#define PTA_SSE4A\t\t(HOST_WIDE_INT_1 << 26)\n-#define PTA_SSSE3\t\t(HOST_WIDE_INT_1 << 27)\n-#define PTA_TBM\t\t\t(HOST_WIDE_INT_1 << 28)\n-#define PTA_XOP\t\t\t(HOST_WIDE_INT_1 << 29)\n-#define PTA_AVX2\t\t(HOST_WIDE_INT_1 << 30)\n-#define PTA_BMI2\t\t(HOST_WIDE_INT_1 << 31)\n-#define PTA_RTM\t\t\t(HOST_WIDE_INT_1 << 32)\n-#define PTA_HLE\t\t\t(HOST_WIDE_INT_1 << 33)\n-#define PTA_PRFCHW\t\t(HOST_WIDE_INT_1 << 34)\n-#define PTA_RDSEED\t\t(HOST_WIDE_INT_1 << 35)\n-#define PTA_ADX\t\t\t(HOST_WIDE_INT_1 << 36)\n-#define PTA_FXSR\t\t(HOST_WIDE_INT_1 << 37)\n-#define PTA_XSAVE\t\t(HOST_WIDE_INT_1 << 38)\n-#define PTA_XSAVEOPT\t\t(HOST_WIDE_INT_1 << 39)\n-#define PTA_AVX512F\t\t(HOST_WIDE_INT_1 << 40)\n-#define PTA_AVX512ER\t\t(HOST_WIDE_INT_1 << 41)\n-#define PTA_AVX512PF\t\t(HOST_WIDE_INT_1 << 42)\n-#define PTA_AVX512CD\t\t(HOST_WIDE_INT_1 << 43)\n-#define PTA_MPX\t\t\t(HOST_WIDE_INT_1 << 44)\n-#define PTA_SHA\t\t\t(HOST_WIDE_INT_1 << 45)\n-#define PTA_PREFETCHWT1\t\t(HOST_WIDE_INT_1 << 46)\n-#define PTA_CLFLUSHOPT\t\t(HOST_WIDE_INT_1 << 47)\n-#define PTA_XSAVEC\t\t(HOST_WIDE_INT_1 << 48)\n-#define PTA_XSAVES\t\t(HOST_WIDE_INT_1 << 49)\n-#define PTA_AVX512DQ\t\t(HOST_WIDE_INT_1 << 50)\n-#define PTA_AVX512BW\t\t(HOST_WIDE_INT_1 << 51)\n-#define PTA_AVX512VL\t\t(HOST_WIDE_INT_1 << 52)\n-#define PTA_AVX512IFMA\t\t(HOST_WIDE_INT_1 << 53)\n-#define PTA_AVX512VBMI\t\t(HOST_WIDE_INT_1 << 54)\n-#define PTA_CLWB\t\t(HOST_WIDE_INT_1 << 55)\n-#define PTA_MWAITX\t\t(HOST_WIDE_INT_1 << 56)\n-#define PTA_CLZERO\t\t(HOST_WIDE_INT_1 << 57)\n-#define PTA_NO_80387\t\t(HOST_WIDE_INT_1 << 58)\n-#define PTA_PKU\t\t\t(HOST_WIDE_INT_1 << 59)\n-#define PTA_AVX5124VNNIW\t(HOST_WIDE_INT_1 << 60)\n-#define PTA_AVX5124FMAPS\t(HOST_WIDE_INT_1 << 61)\n-#define PTA_AVX512VPOPCNTDQ\t(HOST_WIDE_INT_1 << 62)\n-#define PTA_SGX\t\t\t(HOST_WIDE_INT_1 << 63)\n-\n-#define PTA_CORE2 \\\n-  (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n-   | PTA_CX16 | PTA_FXSR)\n-#define PTA_NEHALEM \\\n-  (PTA_CORE2 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_POPCNT)\n-#define PTA_WESTMERE \\\n-  (PTA_NEHALEM | PTA_AES | PTA_PCLMUL)\n-#define PTA_SANDYBRIDGE \\\n-  (PTA_WESTMERE | PTA_AVX | PTA_XSAVE | PTA_XSAVEOPT)\n-#define PTA_IVYBRIDGE \\\n-  (PTA_SANDYBRIDGE | PTA_FSGSBASE | PTA_RDRND | PTA_F16C)\n-#define PTA_HASWELL \\\n-  (PTA_IVYBRIDGE | PTA_AVX2 | PTA_BMI | PTA_BMI2 | PTA_LZCNT \\\n-   | PTA_FMA | PTA_MOVBE | PTA_HLE)\n-#define PTA_BROADWELL \\\n-  (PTA_HASWELL | PTA_ADX | PTA_PRFCHW | PTA_RDSEED)\n-#define PTA_SKYLAKE \\\n-  (PTA_BROADWELL | PTA_CLFLUSHOPT | PTA_XSAVEC | PTA_XSAVES)\n-#define PTA_SKYLAKE_AVX512 \\\n-  (PTA_SKYLAKE | PTA_AVX512F | PTA_AVX512CD | PTA_AVX512VL \\\n-   | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU | PTA_CLWB)\n-#define PTA_CANNONLAKE \\\n-  (PTA_SKYLAKE_AVX512 | PTA_AVX512VBMI | PTA_AVX512IFMA | PTA_SHA)\n-#define PTA_KNL \\\n-  (PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER | PTA_AVX512F | PTA_AVX512CD)\n-#define PTA_BONNELL \\\n-  (PTA_CORE2 | PTA_MOVBE)\n-#define PTA_SILVERMONT \\\n-  (PTA_WESTMERE | PTA_MOVBE | PTA_RDRND)\n-#define PTA_KNM \\\n-  (PTA_KNL | PTA_AVX5124VNNIW | PTA_AVX5124FMAPS | PTA_AVX512VPOPCNTDQ)\n-\n-/* if this reaches 64, need to widen struct pta flags below */\n+  const wide_int_bitmask PTA_3DNOW (HOST_WIDE_INT_1U << 0);\n+  const wide_int_bitmask PTA_3DNOW_A (HOST_WIDE_INT_1U << 1);\n+  const wide_int_bitmask PTA_64BIT (HOST_WIDE_INT_1U << 2);\n+  const wide_int_bitmask PTA_ABM (HOST_WIDE_INT_1U << 3);\n+  const wide_int_bitmask PTA_AES (HOST_WIDE_INT_1U << 4);\n+  const wide_int_bitmask PTA_AVX (HOST_WIDE_INT_1U << 5);\n+  const wide_int_bitmask PTA_BMI (HOST_WIDE_INT_1U << 6);\n+  const wide_int_bitmask PTA_CX16 (HOST_WIDE_INT_1U << 7);\n+  const wide_int_bitmask PTA_F16C (HOST_WIDE_INT_1U << 8);\n+  const wide_int_bitmask PTA_FMA (HOST_WIDE_INT_1U << 9);\n+  const wide_int_bitmask PTA_FMA4 (HOST_WIDE_INT_1U << 10);\n+  const wide_int_bitmask PTA_FSGSBASE (HOST_WIDE_INT_1U << 11);\n+  const wide_int_bitmask PTA_LWP (HOST_WIDE_INT_1U << 12);\n+  const wide_int_bitmask PTA_LZCNT (HOST_WIDE_INT_1U << 13);\n+  const wide_int_bitmask PTA_MMX (HOST_WIDE_INT_1U << 14);\n+  const wide_int_bitmask PTA_MOVBE (HOST_WIDE_INT_1U << 15);\n+  const wide_int_bitmask PTA_NO_SAHF (HOST_WIDE_INT_1U << 16);\n+  const wide_int_bitmask PTA_PCLMUL (HOST_WIDE_INT_1U << 17);\n+  const wide_int_bitmask PTA_POPCNT (HOST_WIDE_INT_1U << 18);\n+  const wide_int_bitmask PTA_PREFETCH_SSE (HOST_WIDE_INT_1U << 19);\n+  const wide_int_bitmask PTA_RDRND (HOST_WIDE_INT_1U << 20);\n+  const wide_int_bitmask PTA_SSE (HOST_WIDE_INT_1U << 21);\n+  const wide_int_bitmask PTA_SSE2 (HOST_WIDE_INT_1U << 22);\n+  const wide_int_bitmask PTA_SSE3 (HOST_WIDE_INT_1U << 23);\n+  const wide_int_bitmask PTA_SSE4_1 (HOST_WIDE_INT_1U << 24);\n+  const wide_int_bitmask PTA_SSE4_2 (HOST_WIDE_INT_1U << 25);\n+  const wide_int_bitmask PTA_SSE4A (HOST_WIDE_INT_1U << 26);\n+  const wide_int_bitmask PTA_SSSE3 (HOST_WIDE_INT_1U << 27);\n+  const wide_int_bitmask PTA_TBM (HOST_WIDE_INT_1U << 28);\n+  const wide_int_bitmask PTA_XOP (HOST_WIDE_INT_1U << 29);\n+  const wide_int_bitmask PTA_AVX2 (HOST_WIDE_INT_1U << 30);\n+  const wide_int_bitmask PTA_BMI2 (HOST_WIDE_INT_1U << 31);\n+  const wide_int_bitmask PTA_RTM (HOST_WIDE_INT_1U << 32);\n+  const wide_int_bitmask PTA_HLE (HOST_WIDE_INT_1U << 33);\n+  const wide_int_bitmask PTA_PRFCHW (HOST_WIDE_INT_1U << 34);\n+  const wide_int_bitmask PTA_RDSEED (HOST_WIDE_INT_1U << 35);\n+  const wide_int_bitmask PTA_ADX (HOST_WIDE_INT_1U << 36);\n+  const wide_int_bitmask PTA_FXSR (HOST_WIDE_INT_1U << 37);\n+  const wide_int_bitmask PTA_XSAVE (HOST_WIDE_INT_1U << 38);\n+  const wide_int_bitmask PTA_XSAVEOPT (HOST_WIDE_INT_1U << 39);\n+  const wide_int_bitmask PTA_AVX512F (HOST_WIDE_INT_1U << 40);\n+  const wide_int_bitmask PTA_AVX512ER (HOST_WIDE_INT_1U << 41);\n+  const wide_int_bitmask PTA_AVX512PF (HOST_WIDE_INT_1U << 42);\n+  const wide_int_bitmask PTA_AVX512CD (HOST_WIDE_INT_1U << 43);\n+  const wide_int_bitmask PTA_MPX (HOST_WIDE_INT_1U << 44);\n+  const wide_int_bitmask PTA_SHA (HOST_WIDE_INT_1U << 45);\n+  const wide_int_bitmask PTA_PREFETCHWT1 (HOST_WIDE_INT_1U << 46);\n+  const wide_int_bitmask PTA_CLFLUSHOPT (HOST_WIDE_INT_1U << 47);\n+  const wide_int_bitmask PTA_XSAVEC (HOST_WIDE_INT_1U << 48);\n+  const wide_int_bitmask PTA_XSAVES (HOST_WIDE_INT_1U << 49);\n+  const wide_int_bitmask PTA_AVX512DQ (HOST_WIDE_INT_1U << 50);\n+  const wide_int_bitmask PTA_AVX512BW (HOST_WIDE_INT_1U << 51);\n+  const wide_int_bitmask PTA_AVX512VL (HOST_WIDE_INT_1U << 52);\n+  const wide_int_bitmask PTA_AVX512IFMA (HOST_WIDE_INT_1U << 53);\n+  const wide_int_bitmask PTA_AVX512VBMI (HOST_WIDE_INT_1U << 54);\n+  const wide_int_bitmask PTA_CLWB (HOST_WIDE_INT_1U << 55);\n+  const wide_int_bitmask PTA_MWAITX (HOST_WIDE_INT_1U << 56);\n+  const wide_int_bitmask PTA_CLZERO (HOST_WIDE_INT_1U << 57);\n+  const wide_int_bitmask PTA_NO_80387 (HOST_WIDE_INT_1U << 58);\n+  const wide_int_bitmask PTA_PKU (HOST_WIDE_INT_1U << 59);\n+  const wide_int_bitmask PTA_AVX5124VNNIW (HOST_WIDE_INT_1U << 60);\n+  const wide_int_bitmask PTA_AVX5124FMAPS (HOST_WIDE_INT_1U << 61);\n+  const wide_int_bitmask PTA_AVX512VPOPCNTDQ (HOST_WIDE_INT_1U << 62);\n+  const wide_int_bitmask PTA_SGX (HOST_WIDE_INT_1U << 63);\n+\n+  const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2\n+    | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;\n+  const wide_int_bitmask PTA_NEHALEM = PTA_CORE2 | PTA_SSE4_1 | PTA_SSE4_2\n+    | PTA_POPCNT;\n+  const wide_int_bitmask PTA_WESTMERE = PTA_NEHALEM | PTA_AES | PTA_PCLMUL;\n+  const wide_int_bitmask PTA_SANDYBRIDGE = PTA_WESTMERE | PTA_AVX | PTA_XSAVE\n+    | PTA_XSAVEOPT;\n+  const wide_int_bitmask PTA_IVYBRIDGE = PTA_SANDYBRIDGE | PTA_FSGSBASE\n+    | PTA_RDRND | PTA_F16C;\n+  const wide_int_bitmask PTA_HASWELL = PTA_IVYBRIDGE | PTA_AVX2 | PTA_BMI\n+    | PTA_BMI2 | PTA_LZCNT | PTA_FMA | PTA_MOVBE | PTA_HLE;\n+  const wide_int_bitmask PTA_BROADWELL = PTA_HASWELL | PTA_ADX | PTA_PRFCHW\n+    | PTA_RDSEED;\n+  const wide_int_bitmask PTA_SKYLAKE = PTA_BROADWELL | PTA_CLFLUSHOPT\n+    | PTA_XSAVEC | PTA_XSAVES;\n+  const wide_int_bitmask PTA_SKYLAKE_AVX512 = PTA_SKYLAKE | PTA_AVX512F\n+    | PTA_AVX512CD | PTA_AVX512VL | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU\n+    | PTA_CLWB;\n+  const wide_int_bitmask PTA_CANNONLAKE = PTA_SKYLAKE_AVX512 | PTA_AVX512VBMI\n+    | PTA_AVX512IFMA | PTA_SHA;\n+  const wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER\n+    | PTA_AVX512F | PTA_AVX512CD;\n+  const wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;\n+  const wide_int_bitmask PTA_SILVERMONT = PTA_WESTMERE | PTA_MOVBE | PTA_RDRND;\n+  const wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW\n+    | PTA_AVX5124FMAPS | PTA_AVX512VPOPCNTDQ;\n \n   static struct pta\n     {\n       const char *const name;\t\t/* processor name or nickname.  */\n       const enum processor_type processor;\n       const enum attr_cpu schedule;\n-      const unsigned HOST_WIDE_INT flags;\n+      const wide_int_bitmask flags;\n     }\n   const processor_alias_table[] =\n     {\n@@ -3935,7 +3929,7 @@ ix86_option_override_internal (bool main_args_p,\n \t  }\n \n \tif (TARGET_64BIT_P (opts->x_ix86_isa_flags)\n-\t    && !(processor_alias_table[i].flags & PTA_64BIT))\n+\t    && !((processor_alias_table[i].flags & PTA_64BIT) != 0))\n \t  {\n \t    error (\"CPU you selected does not support x86-64 \"\n \t\t   \"instruction set\");\n@@ -3947,195 +3941,196 @@ ix86_option_override_internal (bool main_args_p,\n \t/* Default cpu tuning to the architecture.  */\n \tix86_tune = ix86_arch;\n \n-\tif (processor_alias_table[i].flags & PTA_MMX\n+\tif (((processor_alias_table[i].flags & PTA_MMX) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MMX))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MMX;\n-\tif (processor_alias_table[i].flags & PTA_3DNOW\n+\tif (((processor_alias_table[i].flags & PTA_3DNOW) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_3DNOW))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_3DNOW;\n-\tif (processor_alias_table[i].flags & PTA_3DNOW_A\n+\tif (((processor_alias_table[i].flags & PTA_3DNOW_A) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_3DNOW_A))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_3DNOW_A;\n-\tif (processor_alias_table[i].flags & PTA_SSE\n+\tif (((processor_alias_table[i].flags & PTA_SSE) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_SSE))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE;\n-\tif (processor_alias_table[i].flags & PTA_SSE2\n+\tif (((processor_alias_table[i].flags & PTA_SSE2) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_SSE2))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE2;\n-\tif (processor_alias_table[i].flags & PTA_SSE3\n+\tif (((processor_alias_table[i].flags & PTA_SSE3) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_SSE3))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE3;\n-\tif (processor_alias_table[i].flags & PTA_SSSE3\n+\tif (((processor_alias_table[i].flags & PTA_SSSE3) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_SSSE3))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSSE3;\n-\tif (processor_alias_table[i].flags & PTA_SSE4_1\n+\tif (((processor_alias_table[i].flags & PTA_SSE4_1) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_SSE4_1))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4_1;\n-\tif (processor_alias_table[i].flags & PTA_SSE4_2\n+\tif (((processor_alias_table[i].flags & PTA_SSE4_2) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_SSE4_2))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4_2;\n-\tif (processor_alias_table[i].flags & PTA_AVX\n+\tif (((processor_alias_table[i].flags & PTA_AVX) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX;\n-\tif (processor_alias_table[i].flags & PTA_AVX2\n+\tif (((processor_alias_table[i].flags & PTA_AVX2) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX2))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX2;\n-\tif (processor_alias_table[i].flags & PTA_FMA\n+\tif (((processor_alias_table[i].flags & PTA_FMA) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_FMA))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_FMA;\n-\tif (processor_alias_table[i].flags & PTA_SSE4A\n+\tif (((processor_alias_table[i].flags & PTA_SSE4A) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_SSE4A))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE4A;\n-\tif (processor_alias_table[i].flags & PTA_FMA4\n+\tif (((processor_alias_table[i].flags & PTA_FMA4) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_FMA4))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_FMA4;\n-\tif (processor_alias_table[i].flags & PTA_XOP\n+\tif (((processor_alias_table[i].flags & PTA_XOP) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_XOP))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XOP;\n-\tif (processor_alias_table[i].flags & PTA_LWP\n+\tif (((processor_alias_table[i].flags & PTA_LWP) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_LWP))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_LWP;\n-\tif (processor_alias_table[i].flags & PTA_ABM\n+\tif (((processor_alias_table[i].flags & PTA_ABM) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_ABM))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_ABM;\n-\tif (processor_alias_table[i].flags & PTA_BMI\n+\tif (((processor_alias_table[i].flags & PTA_BMI) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_BMI))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_BMI;\n-\tif (processor_alias_table[i].flags & (PTA_LZCNT | PTA_ABM)\n+\tif (((processor_alias_table[i].flags & (PTA_LZCNT | PTA_ABM)) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_LZCNT))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_LZCNT;\n-\tif (processor_alias_table[i].flags & PTA_TBM\n+\tif (((processor_alias_table[i].flags & PTA_TBM) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_TBM))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_TBM;\n-\tif (processor_alias_table[i].flags & PTA_BMI2\n+\tif (((processor_alias_table[i].flags & PTA_BMI2) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_BMI2))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_BMI2;\n-\tif (processor_alias_table[i].flags & PTA_CX16\n+\tif (((processor_alias_table[i].flags & PTA_CX16) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_CX16))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_CX16;\n-\tif (processor_alias_table[i].flags & (PTA_POPCNT | PTA_ABM)\n+\tif (((processor_alias_table[i].flags & (PTA_POPCNT | PTA_ABM)) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_POPCNT))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_POPCNT;\n \tif (!(TARGET_64BIT_P (opts->x_ix86_isa_flags)\n-\t    && (processor_alias_table[i].flags & PTA_NO_SAHF))\n+\t    && ((processor_alias_table[i].flags & PTA_NO_SAHF) != 0))\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_SAHF))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SAHF;\n-\tif (processor_alias_table[i].flags & PTA_MOVBE\n+\tif (((processor_alias_table[i].flags & PTA_MOVBE) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_MOVBE))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_MOVBE;\n-\tif (processor_alias_table[i].flags & PTA_AES\n+\tif (((processor_alias_table[i].flags & PTA_AES) != 0)\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_AES))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_AES;\n-\tif (processor_alias_table[i].flags & PTA_SHA\n+\tif (((processor_alias_table[i].flags & PTA_SHA) != 0)\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_SHA))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_SHA;\n-\tif (processor_alias_table[i].flags & PTA_PCLMUL\n+\tif (((processor_alias_table[i].flags & PTA_PCLMUL) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PCLMUL))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PCLMUL;\n-\tif (processor_alias_table[i].flags & PTA_FSGSBASE\n+\tif (((processor_alias_table[i].flags & PTA_FSGSBASE) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_FSGSBASE))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_FSGSBASE;\n-\tif (processor_alias_table[i].flags & PTA_RDRND\n+\tif (((processor_alias_table[i].flags & PTA_RDRND) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_RDRND))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_RDRND;\n-\tif (processor_alias_table[i].flags & PTA_F16C\n+\tif (((processor_alias_table[i].flags & PTA_F16C) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_F16C))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_F16C;\n-\tif (processor_alias_table[i].flags & PTA_RTM\n+\tif (((processor_alias_table[i].flags & PTA_RTM) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_RTM))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_RTM;\n-\tif (processor_alias_table[i].flags & PTA_HLE\n+\tif (((processor_alias_table[i].flags & PTA_HLE) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_HLE))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_HLE;\n-\tif (processor_alias_table[i].flags & PTA_PRFCHW\n+\tif (((processor_alias_table[i].flags & PTA_PRFCHW) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PRFCHW))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PRFCHW;\n-\tif (processor_alias_table[i].flags & PTA_RDSEED\n+\tif (((processor_alias_table[i].flags & PTA_RDSEED) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_RDSEED))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_RDSEED;\n-\tif (processor_alias_table[i].flags & PTA_ADX\n+\tif (((processor_alias_table[i].flags & PTA_ADX) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_ADX))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_ADX;\n-\tif (processor_alias_table[i].flags & PTA_FXSR\n+\tif (((processor_alias_table[i].flags & PTA_FXSR) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_FXSR))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_FXSR;\n-\tif (processor_alias_table[i].flags & PTA_XSAVE\n+\tif (((processor_alias_table[i].flags & PTA_XSAVE) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_XSAVE))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVE;\n-\tif (processor_alias_table[i].flags & PTA_XSAVEOPT\n+\tif (((processor_alias_table[i].flags & PTA_XSAVEOPT) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_XSAVEOPT))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVEOPT;\n-\tif (processor_alias_table[i].flags & PTA_AVX512F\n+\tif (((processor_alias_table[i].flags & PTA_AVX512F) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512F))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512F;\n-\tif (processor_alias_table[i].flags & PTA_AVX512ER\n+\tif (((processor_alias_table[i].flags & PTA_AVX512ER) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512ER))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512ER;\n-\tif (processor_alias_table[i].flags & PTA_AVX512PF\n+\tif (((processor_alias_table[i].flags & PTA_AVX512PF) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512PF))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512PF;\n-\tif (processor_alias_table[i].flags & PTA_AVX512CD\n+\tif (((processor_alias_table[i].flags & PTA_AVX512CD) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512CD))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512CD;\n-\tif (processor_alias_table[i].flags & PTA_PREFETCHWT1\n+\tif (((processor_alias_table[i].flags & PTA_PREFETCHWT1) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PREFETCHWT1))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PREFETCHWT1;\n-\tif (processor_alias_table[i].flags & PTA_CLWB\n+\tif (((processor_alias_table[i].flags & PTA_CLWB) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_CLWB))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CLWB;\n-\tif (processor_alias_table[i].flags & PTA_CLFLUSHOPT\n+\tif (((processor_alias_table[i].flags & PTA_CLFLUSHOPT) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_CLFLUSHOPT))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CLFLUSHOPT;\n-\tif (processor_alias_table[i].flags & PTA_CLZERO\n+\tif (((processor_alias_table[i].flags & PTA_CLZERO) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_CLZERO))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_CLZERO;\n-\tif (processor_alias_table[i].flags & PTA_XSAVEC\n+\tif (((processor_alias_table[i].flags & PTA_XSAVEC) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_XSAVEC))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVEC;\n-\tif (processor_alias_table[i].flags & PTA_XSAVES\n+\tif (((processor_alias_table[i].flags & PTA_XSAVES) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_XSAVES))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVES;\n-\tif (processor_alias_table[i].flags & PTA_AVX512DQ\n+\tif (((processor_alias_table[i].flags & PTA_AVX512DQ) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512DQ))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512DQ;\n-\tif (processor_alias_table[i].flags & PTA_AVX512BW\n+\tif (((processor_alias_table[i].flags & PTA_AVX512BW) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512BW))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512BW;\n-\tif (processor_alias_table[i].flags & PTA_AVX512VL\n+\tif (((processor_alias_table[i].flags & PTA_AVX512VL) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512VL))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VL;\n-        if (processor_alias_table[i].flags & PTA_MPX\n+\tif (((processor_alias_table[i].flags & PTA_MPX) != 0)\n             && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_MPX))\n           opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_MPX;\n-\tif (processor_alias_table[i].flags & PTA_AVX512VBMI\n+\tif (((processor_alias_table[i].flags & PTA_AVX512VBMI) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512VBMI))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VBMI;\n-\tif (processor_alias_table[i].flags & PTA_AVX512IFMA\n+\tif (((processor_alias_table[i].flags & PTA_AVX512IFMA) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512IFMA))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512IFMA;\n \n-\tif (processor_alias_table[i].flags & PTA_AVX5124VNNIW\n+\tif (((processor_alias_table[i].flags & PTA_AVX5124VNNIW) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit\n \t\t & OPTION_MASK_ISA_AVX5124VNNIW))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX5124VNNIW;\n-\tif (processor_alias_table[i].flags & PTA_AVX5124FMAPS\n+\tif (((processor_alias_table[i].flags & PTA_AVX5124FMAPS) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit\n \t\t & OPTION_MASK_ISA_AVX5124FMAPS))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX5124FMAPS;\n-\tif (processor_alias_table[i].flags & PTA_AVX512VPOPCNTDQ\n+\tif (((processor_alias_table[i].flags & PTA_AVX512VPOPCNTDQ) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit\n \t\t & OPTION_MASK_ISA_AVX512VPOPCNTDQ))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VPOPCNTDQ;\n-\tif (processor_alias_table[i].flags & PTA_SGX\n+\tif (((processor_alias_table[i].flags & PTA_SGX) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_SGX))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_SGX;\n \n-\tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n+\tif ((processor_alias_table[i].flags\n+\t   & (PTA_PREFETCH_SSE | PTA_SSE)) != 0)\n \t  x86_prefetch_sse = true;\n-\tif (processor_alias_table[i].flags & PTA_MWAITX\n+\tif (((processor_alias_table[i].flags & PTA_MWAITX) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_MWAITX))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_MWAITX;\n-\tif (processor_alias_table[i].flags & PTA_PKU\n+\tif (((processor_alias_table[i].flags & PTA_PKU) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PKU))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PKU;\n \n@@ -4144,7 +4139,7 @@ ix86_option_override_internal (bool main_args_p,\n \tif (!(opts_set->x_ix86_target_flags & OPTION_MASK_GENERAL_REGS_ONLY)\n \t    && !(opts_set->x_target_flags & MASK_80387))\n \t  {\n-\t    if (processor_alias_table[i].flags & PTA_NO_80387)\n+\t    if (((processor_alias_table[i].flags & PTA_NO_80387) != 0))\n \t      opts->x_target_flags &= ~MASK_80387;\n \t    else\n \t      opts->x_target_flags |= MASK_80387;\n@@ -4170,7 +4165,7 @@ ix86_option_override_internal (bool main_args_p,\n \tif (strcmp (processor_alias_table[i].name, \"generic\")\n \t    && strcmp (processor_alias_table[i].name, \"intel\")\n \t    && (!TARGET_64BIT_P (opts->x_ix86_isa_flags)\n-\t\t|| (processor_alias_table[i].flags & PTA_64BIT)))\n+\t\t|| ((processor_alias_table[i].flags & PTA_64BIT) != 0)))\n \t  candidates.safe_push (processor_alias_table[i].name);\n \n       char *s;\n@@ -4203,7 +4198,7 @@ ix86_option_override_internal (bool main_args_p,\n \tix86_tune = processor_alias_table[i].processor;\n \tif (TARGET_64BIT_P (opts->x_ix86_isa_flags))\n \t  {\n-\t    if (!(processor_alias_table[i].flags & PTA_64BIT))\n+\t    if (!((processor_alias_table[i].flags & PTA_64BIT) != 0))\n \t      {\n \t\tif (ix86_tune_defaulted)\n \t\t  {\n@@ -4226,7 +4221,8 @@ ix86_option_override_internal (bool main_args_p,\n \t   However, the VIA C3 gives a SIGILL, so we only do that for i686 and\n \t   higher processors.  */\n \tif (TARGET_CMOV\n-\t    && (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE)))\n+\t    && ((processor_alias_table[i].flags\n+\t      & (PTA_PREFETCH_SSE | PTA_SSE)) != 0))\n \t  x86_prefetch_sse = true;\n \tbreak;\n       }\n@@ -4241,7 +4237,7 @@ ix86_option_override_internal (bool main_args_p,\n       auto_vec <const char *> candidates;\n       for (i = 0; i < pta_size; i++)\n \tif (!TARGET_64BIT_P (opts->x_ix86_isa_flags)\n-\t    || (processor_alias_table[i].flags & PTA_64BIT))\n+\t    || ((processor_alias_table[i].flags & PTA_64BIT) != 0))\n \t  candidates.safe_push (processor_alias_table[i].name);\n \n       char *s;"}, {"sha": "517bb2ac85283f06fd6e3dbb1cefea20a4448887", "filename": "gcc/wide-int-bitmask.h", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eece7fe533e3741706d960d7cf0bae7fd0fc2755/gcc%2Fwide-int-bitmask.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eece7fe533e3741706d960d7cf0bae7fd0fc2755/gcc%2Fwide-int-bitmask.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-bitmask.h?ref=eece7fe533e3741706d960d7cf0bae7fd0fc2755", "patch": "@@ -0,0 +1,145 @@\n+/* Operation with 128 bit bitmask.\n+   Copyright (C) 2013-2018 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_WIDE_INT_BITMASK_H\n+#define GCC_WIDE_INT_BITMASK_H\n+\n+struct wide_int_bitmask\n+{\n+  inline wide_int_bitmask ();\n+  inline wide_int_bitmask (uint64_t l);\n+  inline wide_int_bitmask (uint64_t l, uint64_t h);\n+  inline wide_int_bitmask &operator &= (wide_int_bitmask);\n+  inline wide_int_bitmask &operator |= (wide_int_bitmask);\n+  inline wide_int_bitmask operator ~ () const;\n+  inline wide_int_bitmask operator & (wide_int_bitmask) const;\n+  inline wide_int_bitmask operator | (wide_int_bitmask) const;\n+  inline wide_int_bitmask operator >> (int);\n+  inline wide_int_bitmask operator << (int);\n+  inline bool operator == (wide_int_bitmask) const;\n+  inline bool operator != (wide_int_bitmask) const;\n+  uint64_t low, high;\n+};\n+\n+inline\n+wide_int_bitmask::wide_int_bitmask ()\n+: low (0), high (0)\n+{\n+}\n+\n+inline\n+wide_int_bitmask::wide_int_bitmask (uint64_t l)\n+: low (l), high (0)\n+{\n+}\n+\n+inline\n+wide_int_bitmask::wide_int_bitmask (uint64_t l, uint64_t h)\n+: low (l), high (h)\n+{\n+}\n+\n+inline wide_int_bitmask &\n+wide_int_bitmask::operator &= (wide_int_bitmask b)\n+{\n+  low &= b.low;\n+  high &= b.high;\n+  return *this;\n+}\n+\n+inline wide_int_bitmask &\n+wide_int_bitmask::operator |= (wide_int_bitmask b)\n+{\n+  low |= b.low;\n+  high |= b.high;\n+  return *this;\n+}\n+\n+inline wide_int_bitmask\n+wide_int_bitmask::operator ~ () const\n+{\n+  wide_int_bitmask ret (~low, ~high);\n+  return ret;\n+}\n+\n+inline wide_int_bitmask\n+wide_int_bitmask::operator | (wide_int_bitmask b) const\n+{\n+  wide_int_bitmask ret (low | b.low, high | b.high);\n+  return ret;\n+}\n+\n+inline wide_int_bitmask\n+wide_int_bitmask::operator & (wide_int_bitmask b) const\n+{\n+  wide_int_bitmask ret (low & b.low, high & b.high);\n+  return ret;\n+}\n+\n+inline wide_int_bitmask\n+wide_int_bitmask::operator << (int amount)\n+{\n+  wide_int_bitmask ret;\n+  if (amount >= 64)\n+    {\n+      ret.low = 0;\n+      ret.high = low << (amount - 64);\n+    }\n+  else if (amount == 0)\n+    ret = *this;\n+  else\n+    {\n+      ret.low = low << amount;\n+      ret.high = (low >> (64 - amount)) | (high << amount);\n+    }\n+  return ret;\n+}\n+\n+inline wide_int_bitmask\n+wide_int_bitmask::operator >> (int amount)\n+{\n+  wide_int_bitmask ret;\n+  if (amount >= 64)\n+    {\n+      ret.low = high >> (amount - 64);\n+      ret.high = 0;\n+    }\n+  else if (amount == 0)\n+    ret = *this;\n+  else\n+    {\n+      ret.low = (high << (64 - amount)) | (low >> amount);\n+      ret.high = high >> amount;\n+    }\n+  return ret;\n+}\n+\n+inline bool\n+wide_int_bitmask::operator == (wide_int_bitmask b) const\n+{\n+  return low == b.low && high == b.high;\n+}\n+\n+inline bool\n+wide_int_bitmask::operator != (wide_int_bitmask b) const\n+{\n+  return low != b.low || high != b.high;\n+}\n+\n+#endif /* ! GCC_WIDE_INT_BITMASK_H */"}]}