{"sha": "4a37b9392544c7d61c43b7b3fd0dc1ffd5fd37be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEzN2I5MzkyNTQ0YzdkNjFjNDNiN2IzZmQwZGMxZmZkNWZkMzdiZQ==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-10-03T23:59:48Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-10-03T23:59:48Z"}, "message": "(ASM_OUTPUT_DOUBLE,ASM_OUTPUT_FLOAT): Use REAL_VALUE_ macros.\n\n(ASM_OUTPUT_LONG_DOUBLE): New macro.\n(VALUE_REGNO): Add case XFmode.\n\nFrom-SVN: r5574", "tree": {"sha": "aae5f263bd947840e189525398db5045a86e0d50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aae5f263bd947840e189525398db5045a86e0d50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a37b9392544c7d61c43b7b3fd0dc1ffd5fd37be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a37b9392544c7d61c43b7b3fd0dc1ffd5fd37be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a37b9392544c7d61c43b7b3fd0dc1ffd5fd37be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a37b9392544c7d61c43b7b3fd0dc1ffd5fd37be/comments", "author": null, "committer": null, "parents": [{"sha": "4fb21e9046a7538b383718a87027c97d52b698ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fb21e9046a7538b383718a87027c97d52b698ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fb21e9046a7538b383718a87027c97d52b698ec"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "1a327a52026810c1d583dfa2eb7989805043f39f", "filename": "gcc/config/i386/next.h", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a37b9392544c7d61c43b7b3fd0dc1ffd5fd37be/gcc%2Fconfig%2Fi386%2Fnext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a37b9392544c7d61c43b7b3fd0dc1ffd5fd37be/gcc%2Fconfig%2Fi386%2Fnext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnext.h?ref=4a37b9392544c7d61c43b7b3fd0dc1ffd5fd37be", "patch": "@@ -38,20 +38,39 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #undef\tVALUE_REGNO\n #define VALUE_REGNO(MODE) \\\n-  (((MODE)==SFmode || (MODE)==DFmode) ? FIRST_FLOAT_REG : 0)\n+  ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode\t\\\n+   ? FIRST_FLOAT_REG : 0)\n \n /* 1 if N is a possible register number for a function value. */\n \n #undef\tFUNCTION_VALUE_REGNO_P\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 0 || (N)== FIRST_FLOAT_REG)\n \n+#ifdef REAL_VALUE_TO_TARGET_LONG_DOUBLE\n+#undef\tASM_OUTPUT_LONG_DOUBLE\n+#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    long hex[3];\t\t\t\t\t\t\t\\\n+    REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, hex);\t\t\t\\\n+    if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t.long 0x%x\\n\\t.long 0x%x\\n\\t.long 0x%x\\n\",\t\\\n+\t\thex[0], hex[1], hex[2]);\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\\t.long 0x%lx\\n\",\t\\\n+\t\thex[0], hex[1], hex[2]);\t\t\t\t\\\n+  } while (0)\n+#endif\n+\n #ifdef REAL_VALUE_TO_TARGET_DOUBLE\n #undef\tASM_OUTPUT_DOUBLE\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     long hex[2];\t\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, hex);\t\t\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%x\\n\\t.long 0x%x\\n\", hex[0], hex[1]);\t\\\n+    if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t.long 0x%x\\n\\t.long 0x%x\\n\", hex[0], hex[1]);\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\", hex[0], hex[1]);\t\\\n   } while (0)\n #endif\n \n@@ -63,7 +82,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   do {\t\t\t\t\t\t\t\t\t\\\n     long hex;\t\t\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_SINGLE (VALUE, hex);\t\t\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%x\\n\", hex);\t\t\t\t\\\n+    if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t.long 0x%x\\n\", hex);\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t.long 0x%lx\\n\", hex);\t\t\t\t\\\n   } while (0)\n #endif\n "}]}