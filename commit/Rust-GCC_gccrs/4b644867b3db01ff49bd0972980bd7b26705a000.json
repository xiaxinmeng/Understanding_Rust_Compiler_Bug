{"sha": "4b644867b3db01ff49bd0972980bd7b26705a000", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2NDQ4NjdiM2RiMDFmZjQ5YmQwOTcyOTgwYmQ3YjI2NzA1YTAwMA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-08T18:48:47Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-08T18:48:47Z"}, "message": "[ARM] Remaining intrinsics\n\t\n\t* config/arm/arm-builtins.c (VAR11, VAR12): New.\n\t* config/arm/arm_neon_builtins.def (vcombine, vld2_dup, vld3_dup,\n\tvld4_dup): Add v4hf variant.\n\t(vget_high, vget_low): Add v8hf variant.\n\t(vld1, vst1, vst1_lane, vld2, vld2_lane, vst2, vst2_lane, vld3,\n\tvld3_lane, vst3, vst3_lane, vld4, vld4_lane, vst4, vst4_lane): Add\n\tv4hf and v8hf variants.\n\n\t* config/arm/iterators.md (VD_LANE, VD_RE, VQ2, VQ_HS): New.\n\t(VDX): Add V4HF.\n\t(V_DOUBLE): Add case for V4HF.\n\t(VQX): Add V8HF.\n\t(V_HALF): Add case for V8HF.\n\t(VDQX): Add V4HF, V8HF.\n\t(V_elem, V_two_elem, V_three_elem, V_four_elem, V_cmp_result,\n\tV_uf_sclr, V_sz_elem, V_mode_nunits, q): Add cases for V4HF & V8HF.\n\n\t* config/arm/neon.md (vec_set<mode>internal, vec_extract<mode>,\n\tneon_vget_lane<mode>_sext_internal, neon_vget_lane<mode>_zext_internal,\n\tvec_load_lanesoi<mode>, neon_vld2<mode>, vec_store_lanesoi<mode>,\n\tneon_vst2<mode>, vec_load_lanesci<mode>, neon_vld3<mode>,\n\tneon_vld3qa<mode>, neon_vld3qb<mode>, vec_store_lanesci<mode>,\n\tneon_vst3<mode>, neon_vst3qa<mode>, neon_vst3qb<mode>,\n\tvec_load_lanesxi<mode>, neon_vld4<mode>, neon_vld4qa<mode>,\n\tneon_vld4qb<mode>, vec_store_lanesxi<mode>, neon_vst4<mode>,\n\tneon_vst4qa<mode>, neon_vst4qb<mode>): Change VQ iterator to VQ2.\n\n\t(neon_vcreate, neon_vreinterpretv8qi<mode>,\n\tneon_vreinterpretv4hi<mode>, neon_vreinterpretv2si<mode>,\n\tneon_vreinterpretv2sf<mode>, neon_vreinterpretdi<mode>):\n\tChange VDX to VD_RE.\n\n\t(neon_vld2_lane<mode>, neon_vst2_lane<mode>, neon_vld3_lane<mode>,\n\tneon_vst3_lane<mode>, neon_vld4_lane<mode>, neon_vst4_lane<mode>):\n\tChange VD iterator to VD_LANE, and VMQ iterator to VQ_HS.\n\n\t* config/arm/arm_neon.h (float16x4x2_t, float16x8x2_t, float16x4x3_t,\n\tfloat16x8x3_t, float16x4x4_t, float16x8x4_t, vcombine_f16,\n\tvget_high_f16, vget_low_f16, vld1_f16, vld1q_f16, vst1_f16, vst1q_f16,\n\tvst1_lane_f16, vst1q_lane_f16, vld2_f16, vld2q_f16, vld2_lane_f16,\n\tvld2q_lane_f16, vld2_dup_f16, vst2_f16, vst2q_f16, vst2_lane_f16,\n\tvst2q_lane_f16, vld3_f16, vld3q_f16, vld3_lane_f16, vld3q_lane_f16,\n\tvld3_dup_f16, vst3_f16, vst3q_f16, vst3_lane_f16, vst3q_lane_f16,\n\tvld4_f16, vld4q_f16, vld4_lane_f16, vld4q_lane_f16, vld4_dup_f16,\n\tvst4_f16, vst4q_f16, vst4_lane_f16, vst4q_lane_f16): New.\n\nFrom-SVN: r227541", "tree": {"sha": "b8c1636a40d4fb18a5a2f0e5502a287f735b11f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8c1636a40d4fb18a5a2f0e5502a287f735b11f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b644867b3db01ff49bd0972980bd7b26705a000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b644867b3db01ff49bd0972980bd7b26705a000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b644867b3db01ff49bd0972980bd7b26705a000", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b644867b3db01ff49bd0972980bd7b26705a000/comments", "author": null, "committer": null, "parents": [{"sha": "7fe08e7158a950c3f3866a81ddc284b6420d2097", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe08e7158a950c3f3866a81ddc284b6420d2097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe08e7158a950c3f3866a81ddc284b6420d2097"}], "stats": {"total": 640, "additions": 549, "deletions": 91}, "files": [{"sha": "ddeb0a15bf6544859a10085e470d4a61edebb6d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b644867b3db01ff49bd0972980bd7b26705a000", "patch": "@@ -1,3 +1,51 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/arm/arm-builtins.c (VAR11, VAR12): New.\n+\t* config/arm/arm_neon_builtins.def (vcombine, vld2_dup, vld3_dup,\n+\tvld4_dup): Add v4hf variant.\n+\t(vget_high, vget_low): Add v8hf variant.\n+\t(vld1, vst1, vst1_lane, vld2, vld2_lane, vst2, vst2_lane, vld3,\n+\tvld3_lane, vst3, vst3_lane, vld4, vld4_lane, vst4, vst4_lane): Add\n+\tv4hf and v8hf variants.\n+\n+\t* config/arm/iterators.md (VD_LANE, VD_RE, VQ2, VQ_HS): New.\n+\t(VDX): Add V4HF.\n+\t(V_DOUBLE): Add case for V4HF.\n+\t(VQX): Add V8HF.\n+\t(V_HALF): Add case for V8HF.\n+\t(VDQX): Add V4HF, V8HF.\n+\t(V_elem, V_two_elem, V_three_elem, V_four_elem, V_cmp_result,\n+\tV_uf_sclr, V_sz_elem, V_mode_nunits, q): Add cases for V4HF & V8HF.\n+\n+\t* config/arm/neon.md (vec_set<mode>internal, vec_extract<mode>,\n+\tneon_vget_lane<mode>_sext_internal, neon_vget_lane<mode>_zext_internal,\n+\tvec_load_lanesoi<mode>, neon_vld2<mode>, vec_store_lanesoi<mode>,\n+\tneon_vst2<mode>, vec_load_lanesci<mode>, neon_vld3<mode>,\n+\tneon_vld3qa<mode>, neon_vld3qb<mode>, vec_store_lanesci<mode>,\n+\tneon_vst3<mode>, neon_vst3qa<mode>, neon_vst3qb<mode>,\n+\tvec_load_lanesxi<mode>, neon_vld4<mode>, neon_vld4qa<mode>,\n+\tneon_vld4qb<mode>, vec_store_lanesxi<mode>, neon_vst4<mode>,\n+\tneon_vst4qa<mode>, neon_vst4qb<mode>): Change VQ iterator to VQ2.\n+\n+\t(neon_vcreate, neon_vreinterpretv8qi<mode>,\n+\tneon_vreinterpretv4hi<mode>, neon_vreinterpretv2si<mode>,\n+\tneon_vreinterpretv2sf<mode>, neon_vreinterpretdi<mode>):\n+\tChange VDX to VD_RE.\n+\n+\t(neon_vld2_lane<mode>, neon_vst2_lane<mode>, neon_vld3_lane<mode>,\n+\tneon_vst3_lane<mode>, neon_vld4_lane<mode>, neon_vst4_lane<mode>):\n+\tChange VD iterator to VD_LANE, and VMQ iterator to VQ_HS.\n+\n+\t* config/arm/arm_neon.h (float16x4x2_t, float16x8x2_t, float16x4x3_t,\n+\tfloat16x8x3_t, float16x4x4_t, float16x8x4_t, vcombine_f16,\n+\tvget_high_f16, vget_low_f16, vld1_f16, vld1q_f16, vst1_f16, vst1q_f16,\n+\tvst1_lane_f16, vst1q_lane_f16, vld2_f16, vld2q_f16, vld2_lane_f16,\n+\tvld2q_lane_f16, vld2_dup_f16, vst2_f16, vst2q_f16, vst2_lane_f16,\n+\tvst2q_lane_f16, vld3_f16, vld3q_f16, vld3_lane_f16, vld3q_lane_f16,\n+\tvld3_dup_f16, vst3_f16, vst3q_f16, vst3_lane_f16, vst3q_lane_f16,\n+\tvld4_f16, vld4q_f16, vld4_lane_f16, vld4q_lane_f16, vld4_dup_f16,\n+\tvst4_f16, vst4q_f16, vst4_lane_f16, vst4q_lane_f16): New.\n+\n 2015-09-07  Alan Lawrence  <alan.lawrence.com>\n \n \t* config/arm/arm_neon.h (vgetq_lane_f16, vsetq_lane_f16, vld1q_lane_f16,"}, {"sha": "0f5a1f1aaf8c1e17181218dc6e1225bea960c7f0", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=4b644867b3db01ff49bd0972980bd7b26705a000", "patch": "@@ -239,6 +239,12 @@ typedef struct {\n #define VAR10(T, N, A, B, C, D, E, F, G, H, I, J) \\\n   VAR9 (T, N, A, B, C, D, E, F, G, H, I) \\\n   VAR1 (T, N, J)\n+#define VAR11(T, N, A, B, C, D, E, F, G, H, I, J, K) \\\n+  VAR10 (T, N, A, B, C, D, E, F, G, H, I, J) \\\n+  VAR1 (T, N, K)\n+#define VAR12(T, N, A, B, C, D, E, F, G, H, I, J, K, L) \\\n+  VAR11 (T, N, A, B, C, D, E, F, G, H, I, J, K) \\\n+  VAR1 (T, N, L)\n \n /* The NEON builtin data can be found in arm_neon_builtins.def.\n    The mode entries in the following table correspond to the \"key\" type of the"}, {"sha": "66622dfcfe2d6f3d575db98a1420f6a58e13baee", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 380, "deletions": 0, "changes": 380, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=4b644867b3db01ff49bd0972980bd7b26705a000", "patch": "@@ -166,6 +166,20 @@ typedef struct uint64x2x2_t\n   uint64x2_t val[2];\n } uint64x2x2_t;\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+typedef struct float16x4x2_t\n+{\n+  float16x4_t val[2];\n+} float16x4x2_t;\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+typedef struct float16x8x2_t\n+{\n+  float16x8_t val[2];\n+} float16x8x2_t;\n+#endif\n+\n typedef struct float32x2x2_t\n {\n   float32x2_t val[2];\n@@ -292,6 +306,20 @@ typedef struct uint64x2x3_t\n   uint64x2_t val[3];\n } uint64x2x3_t;\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+typedef struct float16x4x3_t\n+{\n+  float16x4_t val[3];\n+} float16x4x3_t;\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+typedef struct float16x8x3_t\n+{\n+  float16x8_t val[3];\n+} float16x8x3_t;\n+#endif\n+\n typedef struct float32x2x3_t\n {\n   float32x2_t val[3];\n@@ -418,6 +446,20 @@ typedef struct uint64x2x4_t\n   uint64x2_t val[4];\n } uint64x2x4_t;\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+typedef struct float16x4x4_t\n+{\n+  float16x4_t val[4];\n+} float16x4x4_t;\n+#endif\n+\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+typedef struct float16x8x4_t\n+{\n+  float16x8_t val[4];\n+} float16x8x4_t;\n+#endif\n+\n typedef struct float32x2x4_t\n {\n   float32x2_t val[4];\n@@ -6045,6 +6087,14 @@ vcombine_s64 (int64x1_t __a, int64x1_t __b)\n   return (int64x2_t)__builtin_neon_vcombinedi (__a, __b);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vcombine_f16 (float16x4_t __a, float16x4_t __b)\n+{\n+  return __builtin_neon_vcombinev4hf (__a, __b);\n+}\n+#endif\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vcombine_f32 (float32x2_t __a, float32x2_t __b)\n {\n@@ -6119,6 +6169,14 @@ vget_high_s64 (int64x2_t __a)\n   return (int64x1_t)__builtin_neon_vget_highv2di (__a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vget_high_f16 (float16x8_t __a)\n+{\n+  return __builtin_neon_vget_highv8hf (__a);\n+}\n+#endif\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vget_high_f32 (float32x4_t __a)\n {\n@@ -6179,6 +6237,14 @@ vget_low_s32 (int32x4_t __a)\n   return (int32x2_t)__builtin_neon_vget_lowv4si (__a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vget_low_f16 (float16x8_t __a)\n+{\n+  return __builtin_neon_vget_lowv8hf (__a);\n+}\n+#endif\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vget_low_f32 (float32x4_t __a)\n {\n@@ -8730,6 +8796,14 @@ vld1_s64 (const int64_t * __a)\n   return (int64x1_t)__builtin_neon_vld1di ((const __builtin_neon_di *) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vld1_f16 (const float16_t * __a)\n+{\n+  return __builtin_neon_vld1v4hf (__a);\n+}\n+#endif\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vld1_f32 (const float32_t * __a)\n {\n@@ -8804,6 +8878,14 @@ vld1q_s64 (const int64_t * __a)\n   return (int64x2_t)__builtin_neon_vld1v2di ((const __builtin_neon_di *) __a);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vld1q_f16 (const float16_t * __a)\n+{\n+  return __builtin_neon_vld1v8hf (__a);\n+}\n+#endif\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vld1q_f32 (const float32_t * __a)\n {\n@@ -9208,6 +9290,14 @@ vst1_s64 (int64_t * __a, int64x1_t __b)\n   __builtin_neon_vst1di ((__builtin_neon_di *) __a, __b);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst1_f16 (float16_t * __a, float16x4_t __b)\n+{\n+  __builtin_neon_vst1v4hf (__a, __b);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1_f32 (float32_t * __a, float32x2_t __b)\n {\n@@ -9282,6 +9372,14 @@ vst1q_s64 (int64_t * __a, int64x2_t __b)\n   __builtin_neon_vst1v2di ((__builtin_neon_di *) __a, __b);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst1q_f16 (float16_t * __a, float16x8_t __b)\n+{\n+  __builtin_neon_vst1v8hf (__a, __b);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1q_f32 (float32_t * __a, float32x4_t __b)\n {\n@@ -9342,6 +9440,14 @@ vst1_lane_s32 (int32_t * __a, int32x2_t __b, const int __c)\n   __builtin_neon_vst1_lanev2si ((__builtin_neon_si *) __a, __b, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst1_lane_f16 (float16_t * __a, float16x4_t __b, const int __c)\n+{\n+  __builtin_neon_vst1_lanev4hf (__a, __b, __c);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1_lane_f32 (float32_t * __a, float32x2_t __b, const int __c)\n {\n@@ -9416,6 +9522,14 @@ vst1q_lane_s32 (int32_t * __a, int32x4_t __b, const int __c)\n   __builtin_neon_vst1_lanev4si ((__builtin_neon_si *) __a, __b, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst1q_lane_f16 (float16_t * __a, float16x8_t __b, const int __c)\n+{\n+  __builtin_neon_vst1_lanev8hf (__a, __b, __c);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1q_lane_f32 (float32_t * __a, float32x4_t __b, const int __c)\n {\n@@ -9496,6 +9610,16 @@ vld2_s32 (const int32_t * __a)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4x2_t __attribute__ ((__always_inline__))\n+vld2_f16 (const float16_t * __a)\n+{\n+  union { float16x4x2_t __i; __builtin_neon_ti __o; } __rv;\n+  __rv.__o = __builtin_neon_vld2v4hf (__a);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x2x2_t __attribute__ ((__always_inline__))\n vld2_f32 (const float32_t * __a)\n {\n@@ -9594,6 +9718,16 @@ vld2q_s32 (const int32_t * __a)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8x2_t __attribute__ ((__always_inline__))\n+vld2q_f16 (const float16_t * __a)\n+{\n+  union { float16x8x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld2v8hf (__a);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))\n vld2q_f32 (const float32_t * __a)\n {\n@@ -9669,6 +9803,17 @@ vld2_lane_s32 (const int32_t * __a, int32x2x2_t __b, const int __c)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4x2_t __attribute__ ((__always_inline__))\n+vld2_lane_f16 (const float16_t * __a, float16x4x2_t __b, const int __c)\n+{\n+  union { float16x4x2_t __i; __builtin_neon_ti __o; } __bu = { __b };\n+  union { float16x4x2_t __i; __builtin_neon_ti __o; } __rv;\n+  __rv.__o = __builtin_neon_vld2_lanev4hf ( __a, __bu.__o, __c);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x2x2_t __attribute__ ((__always_inline__))\n vld2_lane_f32 (const float32_t * __a, float32x2x2_t __b, const int __c)\n {\n@@ -9741,6 +9886,17 @@ vld2q_lane_s32 (const int32_t * __a, int32x4x2_t __b, const int __c)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8x2_t __attribute__ ((__always_inline__))\n+vld2q_lane_f16 (const float16_t * __a, float16x8x2_t __b, const int __c)\n+{\n+  union { float16x8x2_t __i; __builtin_neon_oi __o; } __bu = { __b };\n+  union { float16x8x2_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld2_lanev8hf (__a, __bu.__o, __c);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))\n vld2q_lane_f32 (const float32_t * __a, float32x4x2_t __b, const int __c)\n {\n@@ -9801,6 +9957,16 @@ vld2_dup_s32 (const int32_t * __a)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4x2_t __attribute__ ((__always_inline__))\n+vld2_dup_f16 (const float16_t * __a)\n+{\n+  union { float16x4x2_t __i; __builtin_neon_ti __o; } __rv;\n+  __rv.__o = __builtin_neon_vld2_dupv4hf (__a);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x2x2_t __attribute__ ((__always_inline__))\n vld2_dup_f32 (const float32_t * __a)\n {\n@@ -9896,6 +10062,15 @@ vst2_s32 (int32_t * __a, int32x2x2_t __b)\n   __builtin_neon_vst2v2si ((__builtin_neon_si *) __a, __bu.__o);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst2_f16 (float16_t * __a, float16x4x2_t __b)\n+{\n+  union { float16x4x2_t __i; __builtin_neon_ti __o; } __bu = { __b };\n+  __builtin_neon_vst2v4hf (__a, __bu.__o);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst2_f32 (float32_t * __a, float32x2x2_t __b)\n {\n@@ -9982,6 +10157,15 @@ vst2q_s32 (int32_t * __a, int32x4x2_t __b)\n   __builtin_neon_vst2v4si ((__builtin_neon_si *) __a, __bu.__o);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst2q_f16 (float16_t * __a, float16x8x2_t __b)\n+{\n+  union { float16x8x2_t __i; __builtin_neon_oi __o; } __bu = { __b };\n+  __builtin_neon_vst2v8hf (__a, __bu.__o);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst2q_f32 (float32_t * __a, float32x4x2_t __b)\n {\n@@ -10045,6 +10229,15 @@ vst2_lane_s32 (int32_t * __a, int32x2x2_t __b, const int __c)\n   __builtin_neon_vst2_lanev2si ((__builtin_neon_si *) __a, __bu.__o, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst2_lane_f16 (float16_t * __a, float16x4x2_t __b, const int __c)\n+{\n+  union { float16x4x2_t __i; __builtin_neon_ti __o; } __bu = { __b };\n+  __builtin_neon_vst2_lanev4hf (__a, __bu.__o, __c);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst2_lane_f32 (float32_t * __a, float32x2x2_t __b, const int __c)\n {\n@@ -10101,6 +10294,15 @@ vst2q_lane_s32 (int32_t * __a, int32x4x2_t __b, const int __c)\n   __builtin_neon_vst2_lanev4si ((__builtin_neon_si *) __a, __bu.__o, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst2q_lane_f16 (float16_t * __a, float16x8x2_t __b, const int __c)\n+{\n+  union { float16x8x2_t __i; __builtin_neon_oi __o; } __bu = { __b };\n+  __builtin_neon_vst2_lanev8hf (__a, __bu.__o, __c);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst2q_lane_f32 (float32_t * __a, float32x4x2_t __b, const int __c)\n {\n@@ -10153,6 +10355,16 @@ vld3_s32 (const int32_t * __a)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4x3_t __attribute__ ((__always_inline__))\n+vld3_f16 (const float16_t * __a)\n+{\n+  union { float16x4x3_t __i; __builtin_neon_ei __o; } __rv;\n+  __rv.__o = __builtin_neon_vld3v4hf (__a);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x2x3_t __attribute__ ((__always_inline__))\n vld3_f32 (const float32_t * __a)\n {\n@@ -10251,6 +10463,16 @@ vld3q_s32 (const int32_t * __a)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8x3_t __attribute__ ((__always_inline__))\n+vld3q_f16 (const float16_t * __a)\n+{\n+  union { float16x8x3_t __i; __builtin_neon_ci __o; } __rv;\n+  __rv.__o = __builtin_neon_vld3v8hf (__a);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x4x3_t __attribute__ ((__always_inline__))\n vld3q_f32 (const float32_t * __a)\n {\n@@ -10326,6 +10548,17 @@ vld3_lane_s32 (const int32_t * __a, int32x2x3_t __b, const int __c)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4x3_t __attribute__ ((__always_inline__))\n+vld3_lane_f16 (const float16_t * __a, float16x4x3_t __b, const int __c)\n+{\n+  union { float16x4x3_t __i; __builtin_neon_ei __o; } __bu = { __b };\n+  union { float16x4x3_t __i; __builtin_neon_ei __o; } __rv;\n+  __rv.__o = __builtin_neon_vld3_lanev4hf (__a, __bu.__o, __c);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x2x3_t __attribute__ ((__always_inline__))\n vld3_lane_f32 (const float32_t * __a, float32x2x3_t __b, const int __c)\n {\n@@ -10398,6 +10631,17 @@ vld3q_lane_s32 (const int32_t * __a, int32x4x3_t __b, const int __c)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8x3_t __attribute__ ((__always_inline__))\n+vld3q_lane_f16 (const float16_t * __a, float16x8x3_t __b, const int __c)\n+{\n+  union { float16x8x3_t __i; __builtin_neon_ci __o; } __bu = { __b };\n+  union { float16x8x3_t __i; __builtin_neon_ci __o; } __rv;\n+  __rv.__o = __builtin_neon_vld3_lanev8hf (__a, __bu.__o, __c);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x4x3_t __attribute__ ((__always_inline__))\n vld3q_lane_f32 (const float32_t * __a, float32x4x3_t __b, const int __c)\n {\n@@ -10458,6 +10702,16 @@ vld3_dup_s32 (const int32_t * __a)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4x3_t __attribute__ ((__always_inline__))\n+vld3_dup_f16 (const float16_t * __a)\n+{\n+  union { float16x4x3_t __i; __builtin_neon_ei __o; } __rv;\n+  __rv.__o = __builtin_neon_vld3_dupv4hf (__a);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x2x3_t __attribute__ ((__always_inline__))\n vld3_dup_f32 (const float32_t * __a)\n {\n@@ -10553,6 +10807,15 @@ vst3_s32 (int32_t * __a, int32x2x3_t __b)\n   __builtin_neon_vst3v2si ((__builtin_neon_si *) __a, __bu.__o);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst3_f16 (float16_t * __a, float16x4x3_t __b)\n+{\n+  union { float16x4x3_t __i; __builtin_neon_ei __o; } __bu = { __b };\n+  __builtin_neon_vst3v4hf (__a, __bu.__o);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst3_f32 (float32_t * __a, float32x2x3_t __b)\n {\n@@ -10639,6 +10902,15 @@ vst3q_s32 (int32_t * __a, int32x4x3_t __b)\n   __builtin_neon_vst3v4si ((__builtin_neon_si *) __a, __bu.__o);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst3q_f16 (float16_t * __a, float16x8x3_t __b)\n+{\n+  union { float16x8x3_t __i; __builtin_neon_ci __o; } __bu = { __b };\n+  __builtin_neon_vst3v8hf (__a, __bu.__o);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst3q_f32 (float32_t * __a, float32x4x3_t __b)\n {\n@@ -10702,6 +10974,15 @@ vst3_lane_s32 (int32_t * __a, int32x2x3_t __b, const int __c)\n   __builtin_neon_vst3_lanev2si ((__builtin_neon_si *) __a, __bu.__o, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst3_lane_f16 (float16_t * __a, float16x4x3_t __b, const int __c)\n+{\n+  union { float16x4x3_t __i; __builtin_neon_ei __o; } __bu = { __b };\n+  __builtin_neon_vst3_lanev4hf (__a, __bu.__o, __c);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst3_lane_f32 (float32_t * __a, float32x2x3_t __b, const int __c)\n {\n@@ -10758,6 +11039,15 @@ vst3q_lane_s32 (int32_t * __a, int32x4x3_t __b, const int __c)\n   __builtin_neon_vst3_lanev4si ((__builtin_neon_si *) __a, __bu.__o, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst3q_lane_f16 (float16_t * __a, float16x8x3_t __b, const int __c)\n+{\n+  union { float16x8x3_t __i; __builtin_neon_ci __o; } __bu = { __b };\n+  __builtin_neon_vst3_lanev8hf (__a, __bu.__o, __c);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst3q_lane_f32 (float32_t * __a, float32x4x3_t __b, const int __c)\n {\n@@ -10810,6 +11100,16 @@ vld4_s32 (const int32_t * __a)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4x4_t __attribute__ ((__always_inline__))\n+vld4_f16 (const float16_t * __a)\n+{\n+  union { float16x4x4_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld4v4hf (__a);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x2x4_t __attribute__ ((__always_inline__))\n vld4_f32 (const float32_t * __a)\n {\n@@ -10908,6 +11208,16 @@ vld4q_s32 (const int32_t * __a)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8x4_t __attribute__ ((__always_inline__))\n+vld4q_f16 (const float16_t * __a)\n+{\n+  union { float16x8x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld4v8hf (__a);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x4x4_t __attribute__ ((__always_inline__))\n vld4q_f32 (const float32_t * __a)\n {\n@@ -10983,6 +11293,18 @@ vld4_lane_s32 (const int32_t * __a, int32x2x4_t __b, const int __c)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4x4_t __attribute__ ((__always_inline__))\n+vld4_lane_f16 (const float16_t * __a, float16x4x4_t __b, const int __c)\n+{\n+  union { float16x4x4_t __i; __builtin_neon_oi __o; } __bu = { __b };\n+  union { float16x4x4_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld4_lanev4hf (__a,\n+\t\t\t\t\t   __bu.__o, __c);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x2x4_t __attribute__ ((__always_inline__))\n vld4_lane_f32 (const float32_t * __a, float32x2x4_t __b, const int __c)\n {\n@@ -11055,6 +11377,18 @@ vld4q_lane_s32 (const int32_t * __a, int32x4x4_t __b, const int __c)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x8x4_t __attribute__ ((__always_inline__))\n+vld4q_lane_f16 (const float16_t * __a, float16x8x4_t __b, const int __c)\n+{\n+  union { float16x8x4_t __i; __builtin_neon_xi __o; } __bu = { __b };\n+  union { float16x8x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld4_lanev8hf (__a,\n+\t\t\t\t\t   __bu.__o, __c);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x4x4_t __attribute__ ((__always_inline__))\n vld4q_lane_f32 (const float32_t * __a, float32x4x4_t __b, const int __c)\n {\n@@ -11115,6 +11449,16 @@ vld4_dup_s32 (const int32_t * __a)\n   return __rv.__i;\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline float16x4x4_t __attribute__ ((__always_inline__))\n+vld4_dup_f16 (const float16_t * __a)\n+{\n+  union { float16x4x4_t __i; __builtin_neon_oi __o; } __rv;\n+  __rv.__o = __builtin_neon_vld4_dupv4hf (__a);\n+  return __rv.__i;\n+}\n+#endif\n+\n __extension__ static __inline float32x2x4_t __attribute__ ((__always_inline__))\n vld4_dup_f32 (const float32_t * __a)\n {\n@@ -11210,6 +11554,15 @@ vst4_s32 (int32_t * __a, int32x2x4_t __b)\n   __builtin_neon_vst4v2si ((__builtin_neon_si *) __a, __bu.__o);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst4_f16 (float16_t * __a, float16x4x4_t __b)\n+{\n+  union { float16x4x4_t __i; __builtin_neon_oi __o; } __bu = { __b };\n+  __builtin_neon_vst4v4hf (__a, __bu.__o);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst4_f32 (float32_t * __a, float32x2x4_t __b)\n {\n@@ -11296,6 +11649,15 @@ vst4q_s32 (int32_t * __a, int32x4x4_t __b)\n   __builtin_neon_vst4v4si ((__builtin_neon_si *) __a, __bu.__o);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst4q_f16 (float16_t * __a, float16x8x4_t __b)\n+{\n+  union { float16x8x4_t __i; __builtin_neon_xi __o; } __bu = { __b };\n+  __builtin_neon_vst4v8hf (__a, __bu.__o);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst4q_f32 (float32_t * __a, float32x4x4_t __b)\n {\n@@ -11359,6 +11721,15 @@ vst4_lane_s32 (int32_t * __a, int32x2x4_t __b, const int __c)\n   __builtin_neon_vst4_lanev2si ((__builtin_neon_si *) __a, __bu.__o, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst4_lane_f16 (float16_t * __a, float16x4x4_t __b, const int __c)\n+{\n+  union { float16x4x4_t __i; __builtin_neon_oi __o; } __bu = { __b };\n+  __builtin_neon_vst4_lanev4hf (__a, __bu.__o, __c);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst4_lane_f32 (float32_t * __a, float32x2x4_t __b, const int __c)\n {\n@@ -11415,6 +11786,15 @@ vst4q_lane_s32 (int32_t * __a, int32x4x4_t __b, const int __c)\n   __builtin_neon_vst4_lanev4si ((__builtin_neon_si *) __a, __bu.__o, __c);\n }\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst4q_lane_f16 (float16_t * __a, float16x8x4_t __b, const int __c)\n+{\n+  union { float16x8x4_t __i; __builtin_neon_xi __o; } __bu = { __b };\n+  __builtin_neon_vst4_lanev8hf (__a, __bu.__o, __c);\n+}\n+#endif\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst4q_lane_f32 (float32_t * __a, float32x4x4_t __b, const int __c)\n {"}, {"sha": "0b719df760747af7642bd14ab14a9b2144d43359", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=4b644867b3db01ff49bd0972980bd7b26705a000", "patch": "@@ -164,9 +164,9 @@ VAR10 (UNOP, vdup_n,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n VAR10 (GETLANE, vdup_lane,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n-VAR5 (COMBINE, vcombine, v8qi, v4hi, v2si, v2sf, di)\n-VAR5 (UNOP, vget_high, v16qi, v8hi, v4si, v4sf, v2di)\n-VAR5 (UNOP, vget_low, v16qi, v8hi, v4si, v4sf, v2di)\n+VAR6 (COMBINE, vcombine, v8qi, v4hi, v4hf, v2si, v2sf, di)\n+VAR6 (UNOP, vget_high, v16qi, v8hi, v8hf, v4si, v4sf, v2di)\n+VAR6 (UNOP, vget_low, v16qi, v8hi, v8hf, v4si, v4sf, v2di)\n VAR3 (UNOP, vmovn, v8hi, v4si, v2di)\n VAR3 (UNOP, vqmovns, v8hi, v4si, v2di)\n VAR3 (UNOP, vqmovnu, v8hi, v4si, v2di)\n@@ -242,40 +242,40 @@ VAR6 (UNOP, vreinterpretv4si, v16qi, v8hi, v4si, v4sf, v2di, ti)\n VAR6 (UNOP, vreinterpretv4sf, v16qi, v8hi, v4si, v4sf, v2di, ti)\n VAR6 (UNOP, vreinterpretv2di, v16qi, v8hi, v4si, v4sf, v2di, ti)\n VAR6 (UNOP, vreinterpretti, v16qi, v8hi, v4si, v4sf, v2di, ti)\n-VAR10 (LOAD1, vld1,\n-        v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n+VAR12 (LOAD1, vld1,\n+        v8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf, v2di)\n VAR10 (LOAD1LANE, vld1_lane,\n \tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n VAR10 (LOAD1, vld1_dup,\n \tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n-VAR10 (STORE1, vst1,\n-\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n-VAR10 (STORE1LANE, vst1_lane,\n-\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n-VAR9 (LOAD1, vld2,\n-\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf)\n-VAR7 (LOAD1LANE, vld2_lane,\n-\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n-VAR5 (LOAD1, vld2_dup, v8qi, v4hi, v2si, v2sf, di)\n-VAR9 (STORE1, vst2,\n-\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf)\n-VAR7 (STORE1LANE, vst2_lane,\n-\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n-VAR9 (LOAD1, vld3,\n-\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf)\n-VAR7 (LOAD1LANE, vld3_lane,\n-\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n-VAR5 (LOAD1, vld3_dup, v8qi, v4hi, v2si, v2sf, di)\n-VAR9 (STORE1, vst3,\n-\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf)\n-VAR7 (STORE1LANE, vst3_lane,\n-\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n-VAR9 (LOAD1, vld4,\n-\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf)\n-VAR7 (LOAD1LANE, vld4_lane,\n-\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n-VAR5 (LOAD1, vld4_dup, v8qi, v4hi, v2si, v2sf, di)\n-VAR9 (STORE1, vst4,\n-\tv8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf)\n-VAR7 (STORE1LANE, vst4_lane,\n-\tv8qi, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n+VAR12 (STORE1, vst1,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf, v2di)\n+VAR12 (STORE1LANE, vst1_lane,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf, v2di)\n+VAR11 (LOAD1, vld2,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR9 (LOAD1LANE, vld2_lane,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n+VAR6 (LOAD1, vld2_dup, v8qi, v4hi, v4hf, v2si, v2sf, di)\n+VAR11 (STORE1, vst2,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR9 (STORE1LANE, vst2_lane,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n+VAR11 (LOAD1, vld3,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR9 (LOAD1LANE, vld3_lane,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n+VAR6 (LOAD1, vld3_dup, v8qi, v4hi, v4hf, v2si, v2sf, di)\n+VAR11 (STORE1, vst3,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR9 (STORE1LANE, vst3_lane,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n+VAR11 (LOAD1, vld4,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR9 (LOAD1LANE, vld4_lane,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n+VAR6 (LOAD1, vld4_dup, v8qi, v4hi, v4hf, v2si, v2sf, di)\n+VAR11 (STORE1, vst4,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR9 (STORE1LANE, vst4_lane,\n+\tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)"}, {"sha": "47cc1eebecdbe4469a3e3666a39ae2a0d6272b9f", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=4b644867b3db01ff49bd0972980bd7b26705a000", "patch": "@@ -65,20 +65,32 @@\n ;; Integer modes supported by Neon and IWMMXT, except V2DI\n (define_mode_iterator VINTW [V2SI V4HI V8QI V4SI V8HI V16QI])\n \n-;; Double-width vector modes.\n+;; Double-width vector modes, on which we support arithmetic (no HF!)\n (define_mode_iterator VD [V8QI V4HI V2SI V2SF])\n \n+;; Double-width vector modes plus 64-bit elements for vreinterpret + vcreate.\n+(define_mode_iterator VD_RE [V8QI V4HI V2SI V2SF DI])\n+\n ;; Double-width vector modes plus 64-bit elements.\n-(define_mode_iterator VDX [V8QI V4HI V2SI V2SF DI])\n+(define_mode_iterator VDX [V8QI V4HI V4HF V2SI V2SF DI])\n+\n+;; Double-width vector modes, with V4HF - for vldN_lane and vstN_lane.\n+(define_mode_iterator VD_LANE [V8QI V4HI V4HF V2SI V2SF])\n \n ;; Double-width vector modes without floating-point elements.\n (define_mode_iterator VDI [V8QI V4HI V2SI])\n \n-;; Quad-width vector modes.\n+;; Quad-width vector modes supporting arithmetic (no HF!).\n (define_mode_iterator VQ [V16QI V8HI V4SI V4SF])\n \n+;; Quad-width vector modes, including V8HF.\n+(define_mode_iterator VQ2 [V16QI V8HI V8HF V4SI V4SF])\n+\n+;; Quad-width vector modes with 16- or 32-bit elements\n+(define_mode_iterator VQ_HS [V8HI V8HF V4SI V4SF])\n+\n ;; Quad-width vector modes plus 64-bit elements.\n-(define_mode_iterator VQX [V16QI V8HI V4SI V4SF V2DI])\n+(define_mode_iterator VQX [V16QI V8HI V8HF V4SI V4SF V2DI])\n \n ;; Quad-width vector modes without floating-point elements.\n (define_mode_iterator VQI [V16QI V8HI V4SI])\n@@ -111,7 +123,8 @@\n (define_mode_iterator VDQI [V8QI V16QI V4HI V8HI V2SI V4SI V2DI])\n \n ;; Vector modes, including 64-bit integer elements.\n-(define_mode_iterator VDQX [V8QI V16QI V4HI V8HI V2SI V4SI V2SF V4SF DI V2DI])\n+(define_mode_iterator VDQX [V8QI V16QI V4HI V8HI V2SI V4SI\n+\t\t\t    V4HF V8HF V2SF V4SF DI V2DI])\n \n ;; Vector modes including 64-bit integer elements, but no floats.\n (define_mode_iterator VDQIX [V8QI V16QI V4HI V8HI V2SI V4SI DI V2DI])\n@@ -366,7 +379,8 @@\n \n ;; Define element mode for each vector mode.\n (define_mode_attr V_elem [(V8QI \"QI\") (V16QI \"QI\")\n-              (V4HI \"HI\") (V8HI \"HI\")\n+\t\t\t  (V4HI \"HI\") (V8HI \"HI\")\n+\t\t\t  (V4HF \"HF\") (V8HF \"HF\")\n                           (V2SI \"SI\") (V4SI \"SI\")\n                           (V2SF \"SF\") (V4SF \"SF\")\n                           (DI \"DI\")   (V2DI \"DI\")])\n@@ -383,20 +397,23 @@\n ;; size for structure lane/dup loads and stores.\n (define_mode_attr V_two_elem [(V8QI \"HI\")   (V16QI \"HI\")\n                               (V4HI \"SI\")   (V8HI \"SI\")\n+                              (V4HF \"SF\")   (V8HF \"SF\")\n                               (V2SI \"V2SI\") (V4SI \"V2SI\")\n                               (V2SF \"V2SF\") (V4SF \"V2SF\")\n                               (DI \"V2DI\")   (V2DI \"V2DI\")])\n \n ;; Similar, for three elements.\n (define_mode_attr V_three_elem [(V8QI \"BLK\") (V16QI \"BLK\")\n                                 (V4HI \"BLK\") (V8HI \"BLK\")\n+                                (V4HF \"BLK\") (V8HF \"BLK\")\n                                 (V2SI \"BLK\") (V4SI \"BLK\")\n                                 (V2SF \"BLK\") (V4SF \"BLK\")\n                                 (DI \"EI\")    (V2DI \"EI\")])\n \n ;; Similar, for four elements.\n (define_mode_attr V_four_elem [(V8QI \"SI\")   (V16QI \"SI\")\n                                (V4HI \"V4HI\") (V8HI \"V4HI\")\n+                               (V4HF \"V4HF\") (V8HF \"V4HF\")\n                                (V2SI \"V4SI\") (V4SI \"V4SI\")\n                                (V2SF \"V4SF\") (V4SF \"V4SF\")\n                                (DI \"OI\")     (V2DI \"OI\")])\n@@ -421,7 +438,8 @@\n \n ;; Modes with half the number of equal-sized elements.\n (define_mode_attr V_HALF [(V16QI \"V8QI\") (V8HI \"V4HI\")\n-              (V4SI  \"V2SI\") (V4SF \"V2SF\") (V2DF \"DF\")\n+\t\t\t  (V8HF \"V4HF\") (V4SI  \"V2SI\")\n+\t\t\t  (V4SF \"V2SF\") (V2DF \"DF\")\n                           (V2DI \"DI\")])\n \n ;; Same, but lower-case.\n@@ -431,8 +449,9 @@\n \n ;; Modes with twice the number of equal-sized elements.\n (define_mode_attr V_DOUBLE [(V8QI \"V16QI\") (V4HI \"V8HI\")\n-                (V2SI \"V4SI\") (V2SF \"V4SF\") (DF \"V2DF\")\n-                            (DI \"V2DI\")])\n+\t\t\t    (V2SI \"V4SI\") (V4HF \"V8HF\")\n+\t\t\t    (V2SF \"V4SF\") (DF \"V2DF\")\n+\t\t\t    (DI \"V2DI\")])\n \n ;; Same, but lower-case.\n (define_mode_attr V_double [(V8QI \"v16qi\") (V4HI \"v8hi\")\n@@ -454,8 +473,9 @@\n \n ;; Mode of result of comparison operations (and bit-select operand 1).\n (define_mode_attr V_cmp_result [(V8QI \"V8QI\") (V16QI \"V16QI\")\n-                    (V4HI \"V4HI\") (V8HI  \"V8HI\")\n+\t\t\t\t(V4HI \"V4HI\") (V8HI  \"V8HI\")\n                                 (V2SI \"V2SI\") (V4SI  \"V4SI\")\n+\t\t\t\t(V4HF \"V4HI\") (V8HF  \"V8HI\")\n                                 (V2SF \"V2SI\") (V4SF  \"V4SI\")\n                                 (DI   \"DI\")   (V2DI  \"V2DI\")])\n \n@@ -492,12 +512,14 @@\n (define_mode_attr V_uf_sclr [(V8QI \"u8\")  (V16QI \"u8\")\n                  (V4HI \"u16\") (V8HI \"u16\")\n                              (V2SI \"32\") (V4SI \"32\")\n+                             (V4HF \"u16\") (V8HF \"u16\")\n                              (V2SF \"32\") (V4SF \"32\")])\n \n (define_mode_attr V_sz_elem [(V8QI \"8\")  (V16QI \"8\")\n                  (V4HI \"16\") (V8HI  \"16\")\n                              (V2SI \"32\") (V4SI  \"32\")\n                              (DI   \"64\") (V2DI  \"64\")\n+\t\t\t     (V4HF \"16\") (V8HF \"16\")\n                  (V2SF \"32\") (V4SF  \"32\")])\n \n (define_mode_attr V_elem_ch [(V8QI \"b\")  (V16QI \"b\")\n@@ -564,6 +586,7 @@\n                             (DI   \"true\") (V2DI  \"false\")])\n \n (define_mode_attr V_mode_nunits [(V8QI \"8\") (V16QI \"16\")\n+\t\t\t\t (V4HF \"4\") (V8HF \"8\")\n                                  (V4HI \"4\") (V8HI \"8\")\n                                  (V2SI \"2\") (V4SI \"4\")\n                                  (V2SF \"2\") (V4SF \"4\")\n@@ -607,6 +630,7 @@\n (define_mode_attr q [(V8QI \"\") (V16QI \"_q\")\n                      (V4HI \"\") (V8HI \"_q\")\n                      (V2SI \"\") (V4SI \"_q\")\n+\t\t     (V4HF \"\") (V8HF \"_q\")\n                      (V2SF \"\") (V4SF \"_q\")\n                      (DI \"\")   (V2DI \"_q\")\n                      (DF \"\")   (V2DF \"_q\")])"}, {"sha": "26678663a64fc108526b007f058dbc6f89d4b8bd", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b644867b3db01ff49bd0972980bd7b26705a000/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=4b644867b3db01ff49bd0972980bd7b26705a000", "patch": "@@ -320,11 +320,11 @@\n   [(set_attr \"type\" \"neon_load1_all_lanes<q>,neon_from_gp<q>\")])\n \n (define_insn \"vec_set<mode>_internal\"\n-  [(set (match_operand:VQ 0 \"s_register_operand\" \"=w,w\")\n-        (vec_merge:VQ\n-          (vec_duplicate:VQ\n+  [(set (match_operand:VQ2 0 \"s_register_operand\" \"=w,w\")\n+        (vec_merge:VQ2\n+          (vec_duplicate:VQ2\n             (match_operand:<V_elem> 1 \"nonimmediate_operand\" \"Um,r\"))\n-          (match_operand:VQ 3 \"s_register_operand\" \"0,0\")\n+          (match_operand:VQ2 3 \"s_register_operand\" \"0,0\")\n           (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_NEON\"\n {\n@@ -407,7 +407,7 @@\n (define_insn \"vec_extract<mode>\"\n   [(set (match_operand:<V_elem> 0 \"nonimmediate_operand\" \"=Um,r\")\n \t(vec_select:<V_elem>\n-          (match_operand:VQ 1 \"s_register_operand\" \"w,w\")\n+          (match_operand:VQ2 1 \"s_register_operand\" \"w,w\")\n           (parallel [(match_operand:SI 2 \"immediate_operand\" \"i,i\")])))]\n   \"TARGET_NEON\"\n {\n@@ -2607,7 +2607,7 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(sign_extend:SI\n \t  (vec_select:<V_elem>\n-\t    (match_operand:VQ 1 \"s_register_operand\" \"w\")\n+\t    (match_operand:VQ2 1 \"s_register_operand\" \"w\")\n \t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n   \"TARGET_NEON\"\n {\n@@ -2634,7 +2634,7 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(zero_extend:SI\n \t  (vec_select:<V_elem>\n-\t    (match_operand:VQ 1 \"s_register_operand\" \"w\")\n+\t    (match_operand:VQ2 1 \"s_register_operand\" \"w\")\n \t    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n   \"TARGET_NEON\"\n {\n@@ -2789,7 +2789,7 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vcreate<mode>\"\n-  [(match_operand:VDX 0 \"s_register_operand\" \"\")\n+  [(match_operand:VD_RE 0 \"s_register_operand\" \"\")\n    (match_operand:DI 1 \"general_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n@@ -4140,7 +4140,7 @@ if (BYTES_BIG_ENDIAN)\n \n (define_expand \"neon_vreinterpretv8qi<mode>\"\n   [(match_operand:V8QI 0 \"s_register_operand\" \"\")\n-   (match_operand:VDX 1 \"s_register_operand\" \"\")]\n+   (match_operand:VD_RE 1 \"s_register_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n   neon_reinterpret (operands[0], operands[1]);\n@@ -4149,7 +4149,7 @@ if (BYTES_BIG_ENDIAN)\n \n (define_expand \"neon_vreinterpretv4hi<mode>\"\n   [(match_operand:V4HI 0 \"s_register_operand\" \"\")\n-   (match_operand:VDX 1 \"s_register_operand\" \"\")]\n+   (match_operand:VD_RE 1 \"s_register_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n   neon_reinterpret (operands[0], operands[1]);\n@@ -4158,7 +4158,7 @@ if (BYTES_BIG_ENDIAN)\n \n (define_expand \"neon_vreinterpretv2si<mode>\"\n   [(match_operand:V2SI 0 \"s_register_operand\" \"\")\n-   (match_operand:VDX 1 \"s_register_operand\" \"\")]\n+   (match_operand:VD_RE 1 \"s_register_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n   neon_reinterpret (operands[0], operands[1]);\n@@ -4167,7 +4167,7 @@ if (BYTES_BIG_ENDIAN)\n \n (define_expand \"neon_vreinterpretv2sf<mode>\"\n   [(match_operand:V2SF 0 \"s_register_operand\" \"\")\n-   (match_operand:VDX 1 \"s_register_operand\" \"\")]\n+   (match_operand:VD_RE 1 \"s_register_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n   neon_reinterpret (operands[0], operands[1]);\n@@ -4176,7 +4176,7 @@ if (BYTES_BIG_ENDIAN)\n \n (define_expand \"neon_vreinterpretdi<mode>\"\n   [(match_operand:DI 0 \"s_register_operand\" \"\")\n-   (match_operand:VDX 1 \"s_register_operand\" \"\")]\n+   (match_operand:VD_RE 1 \"s_register_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n   neon_reinterpret (operands[0], operands[1]);\n@@ -4435,14 +4435,14 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"vec_load_lanesoi<mode>\"\n   [(set (match_operand:OI 0 \"s_register_operand\")\n         (unspec:OI [(match_operand:OI 1 \"neon_struct_operand\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t\t   UNSPEC_VLD2))]\n   \"TARGET_NEON\")\n \n (define_insn \"neon_vld2<mode>\"\n   [(set (match_operand:OI 0 \"s_register_operand\" \"=w\")\n         (unspec:OI [(match_operand:OI 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD2))]\n   \"TARGET_NEON\"\n   \"vld2.<V_sz_elem>\\t%h0, %A1\"\n@@ -4453,7 +4453,7 @@ if (BYTES_BIG_ENDIAN)\n         (unspec:TI [(match_operand:<V_two_elem> 1 \"neon_struct_operand\" \"Um\")\n                     (match_operand:TI 2 \"s_register_operand\" \"0\")\n                     (match_operand:SI 3 \"immediate_operand\" \"i\")\n-                    (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VD_LANE [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD2_LANE))]\n   \"TARGET_NEON\"\n {\n@@ -4478,7 +4478,7 @@ if (BYTES_BIG_ENDIAN)\n         (unspec:OI [(match_operand:<V_two_elem> 1 \"neon_struct_operand\" \"Um\")\n                     (match_operand:OI 2 \"s_register_operand\" \"0\")\n                     (match_operand:SI 3 \"immediate_operand\" \"i\")\n-                    (unspec:VMQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ_HS [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD2_LANE))]\n   \"TARGET_NEON\"\n {\n@@ -4549,14 +4549,14 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"vec_store_lanesoi<mode>\"\n   [(set (match_operand:OI 0 \"neon_struct_operand\")\n \t(unspec:OI [(match_operand:OI 1 \"s_register_operand\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST2))]\n   \"TARGET_NEON\")\n \n (define_insn \"neon_vst2<mode>\"\n   [(set (match_operand:OI 0 \"neon_struct_operand\" \"=Um\")\n \t(unspec:OI [(match_operand:OI 1 \"s_register_operand\" \"w\")\n-\t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t\t   UNSPEC_VST2))]\n   \"TARGET_NEON\"\n   \"vst2.<V_sz_elem>\\t%h1, %A0\"\n@@ -4568,7 +4568,7 @@ if (BYTES_BIG_ENDIAN)\n \t(unspec:<V_two_elem>\n \t  [(match_operand:TI 1 \"s_register_operand\" \"w\")\n \t   (match_operand:SI 2 \"immediate_operand\" \"i\")\n-\t   (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t   (unspec:VD_LANE [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t  UNSPEC_VST2_LANE))]\n   \"TARGET_NEON\"\n {\n@@ -4593,7 +4593,7 @@ if (BYTES_BIG_ENDIAN)\n         (unspec:<V_two_elem>\n            [(match_operand:OI 1 \"s_register_operand\" \"w\")\n             (match_operand:SI 2 \"immediate_operand\" \"i\")\n-            (unspec:VMQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+            (unspec:VQ_HS [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n            UNSPEC_VST2_LANE))]\n   \"TARGET_NEON\"\n {\n@@ -4646,7 +4646,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"vec_load_lanesci<mode>\"\n   [(match_operand:CI 0 \"s_register_operand\")\n    (match_operand:CI 1 \"neon_struct_operand\")\n-   (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   emit_insn (gen_neon_vld3<mode> (operands[0], operands[1]));\n@@ -4656,7 +4656,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"neon_vld3<mode>\"\n   [(match_operand:CI 0 \"s_register_operand\")\n    (match_operand:CI 1 \"neon_struct_operand\")\n-   (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   rtx mem;\n@@ -4671,7 +4671,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vld3qa<mode>\"\n   [(set (match_operand:CI 0 \"s_register_operand\" \"=w\")\n         (unspec:CI [(match_operand:EI 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD3A))]\n   \"TARGET_NEON\"\n {\n@@ -4691,7 +4691,7 @@ if (BYTES_BIG_ENDIAN)\n   [(set (match_operand:CI 0 \"s_register_operand\" \"=w\")\n         (unspec:CI [(match_operand:EI 1 \"neon_struct_operand\" \"Um\")\n                     (match_operand:CI 2 \"s_register_operand\" \"0\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD3B))]\n   \"TARGET_NEON\"\n {\n@@ -4712,7 +4712,7 @@ if (BYTES_BIG_ENDIAN)\n         (unspec:EI [(match_operand:<V_three_elem> 1 \"neon_struct_operand\" \"Um\")\n                     (match_operand:EI 2 \"s_register_operand\" \"0\")\n                     (match_operand:SI 3 \"immediate_operand\" \"i\")\n-                    (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VD_LANE [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD3_LANE))]\n   \"TARGET_NEON\"\n {\n@@ -4739,7 +4739,7 @@ if (BYTES_BIG_ENDIAN)\n         (unspec:CI [(match_operand:<V_three_elem> 1 \"neon_struct_operand\" \"Um\")\n                     (match_operand:CI 2 \"s_register_operand\" \"0\")\n                     (match_operand:SI 3 \"immediate_operand\" \"i\")\n-                    (unspec:VMQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ_HS [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD3_LANE))]\n   \"TARGET_NEON\"\n {\n@@ -4819,7 +4819,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"vec_store_lanesci<mode>\"\n   [(match_operand:CI 0 \"neon_struct_operand\")\n    (match_operand:CI 1 \"s_register_operand\")\n-   (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   emit_insn (gen_neon_vst3<mode> (operands[0], operands[1]));\n@@ -4829,7 +4829,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"neon_vst3<mode>\"\n   [(match_operand:CI 0 \"neon_struct_operand\")\n    (match_operand:CI 1 \"s_register_operand\")\n-   (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   rtx mem;\n@@ -4844,7 +4844,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst3qa<mode>\"\n   [(set (match_operand:EI 0 \"neon_struct_operand\" \"=Um\")\n         (unspec:EI [(match_operand:CI 1 \"s_register_operand\" \"w\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST3A))]\n   \"TARGET_NEON\"\n {\n@@ -4863,7 +4863,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst3qb<mode>\"\n   [(set (match_operand:EI 0 \"neon_struct_operand\" \"=Um\")\n         (unspec:EI [(match_operand:CI 1 \"s_register_operand\" \"w\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST3B))]\n   \"TARGET_NEON\"\n {\n@@ -4884,7 +4884,7 @@ if (BYTES_BIG_ENDIAN)\n         (unspec:<V_three_elem>\n            [(match_operand:EI 1 \"s_register_operand\" \"w\")\n             (match_operand:SI 2 \"immediate_operand\" \"i\")\n-            (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+            (unspec:VD_LANE [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n            UNSPEC_VST3_LANE))]\n   \"TARGET_NEON\"\n {\n@@ -4911,7 +4911,7 @@ if (BYTES_BIG_ENDIAN)\n         (unspec:<V_three_elem>\n            [(match_operand:CI 1 \"s_register_operand\" \"w\")\n             (match_operand:SI 2 \"immediate_operand\" \"i\")\n-            (unspec:VMQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+            (unspec:VQ_HS [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n            UNSPEC_VST3_LANE))]\n   \"TARGET_NEON\"\n {\n@@ -4966,7 +4966,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"vec_load_lanesxi<mode>\"\n   [(match_operand:XI 0 \"s_register_operand\")\n    (match_operand:XI 1 \"neon_struct_operand\")\n-   (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   emit_insn (gen_neon_vld4<mode> (operands[0], operands[1]));\n@@ -4976,7 +4976,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"neon_vld4<mode>\"\n   [(match_operand:XI 0 \"s_register_operand\")\n    (match_operand:XI 1 \"neon_struct_operand\")\n-   (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   rtx mem;\n@@ -4991,7 +4991,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vld4qa<mode>\"\n   [(set (match_operand:XI 0 \"s_register_operand\" \"=w\")\n         (unspec:XI [(match_operand:OI 1 \"neon_struct_operand\" \"Um\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD4A))]\n   \"TARGET_NEON\"\n {\n@@ -5012,7 +5012,7 @@ if (BYTES_BIG_ENDIAN)\n   [(set (match_operand:XI 0 \"s_register_operand\" \"=w\")\n         (unspec:XI [(match_operand:OI 1 \"neon_struct_operand\" \"Um\")\n                     (match_operand:XI 2 \"s_register_operand\" \"0\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD4B))]\n   \"TARGET_NEON\"\n {\n@@ -5034,7 +5034,7 @@ if (BYTES_BIG_ENDIAN)\n         (unspec:OI [(match_operand:<V_four_elem> 1 \"neon_struct_operand\" \"Um\")\n                     (match_operand:OI 2 \"s_register_operand\" \"0\")\n                     (match_operand:SI 3 \"immediate_operand\" \"i\")\n-                    (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VD_LANE [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD4_LANE))]\n   \"TARGET_NEON\"\n {\n@@ -5062,7 +5062,7 @@ if (BYTES_BIG_ENDIAN)\n         (unspec:XI [(match_operand:<V_four_elem> 1 \"neon_struct_operand\" \"Um\")\n                     (match_operand:XI 2 \"s_register_operand\" \"0\")\n                     (match_operand:SI 3 \"immediate_operand\" \"i\")\n-                    (unspec:VMQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ_HS [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VLD4_LANE))]\n   \"TARGET_NEON\"\n {\n@@ -5147,7 +5147,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"vec_store_lanesxi<mode>\"\n   [(match_operand:XI 0 \"neon_struct_operand\")\n    (match_operand:XI 1 \"s_register_operand\")\n-   (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   emit_insn (gen_neon_vst4<mode> (operands[0], operands[1]));\n@@ -5157,7 +5157,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"neon_vst4<mode>\"\n   [(match_operand:XI 0 \"neon_struct_operand\")\n    (match_operand:XI 1 \"s_register_operand\")\n-   (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   rtx mem;\n@@ -5172,7 +5172,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst4qa<mode>\"\n   [(set (match_operand:OI 0 \"neon_struct_operand\" \"=Um\")\n         (unspec:OI [(match_operand:XI 1 \"s_register_operand\" \"w\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST4A))]\n   \"TARGET_NEON\"\n {\n@@ -5192,7 +5192,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst4qb<mode>\"\n   [(set (match_operand:OI 0 \"neon_struct_operand\" \"=Um\")\n         (unspec:OI [(match_operand:XI 1 \"s_register_operand\" \"w\")\n-                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST4B))]\n   \"TARGET_NEON\"\n {\n@@ -5214,7 +5214,7 @@ if (BYTES_BIG_ENDIAN)\n         (unspec:<V_four_elem>\n            [(match_operand:OI 1 \"s_register_operand\" \"w\")\n             (match_operand:SI 2 \"immediate_operand\" \"i\")\n-            (unspec:VD [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+            (unspec:VD_LANE [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n            UNSPEC_VST4_LANE))]\n   \"TARGET_NEON\"\n {\n@@ -5242,7 +5242,7 @@ if (BYTES_BIG_ENDIAN)\n         (unspec:<V_four_elem>\n            [(match_operand:XI 1 \"s_register_operand\" \"w\")\n             (match_operand:SI 2 \"immediate_operand\" \"i\")\n-            (unspec:VMQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+            (unspec:VQ_HS [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n            UNSPEC_VST4_LANE))]\n   \"TARGET_NEON\"\n {"}]}