{"sha": "ed80b385418f97ef087f3f2bbe1abecffb5c9775", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ4MGIzODU0MThmOTdlZjA4N2YzZjJiYmUxYWJlY2ZmYjVjOTc3NQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-04-09T08:42:48Z"}, "committer": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-04-09T08:42:48Z"}, "message": "Add unsigned type iv_cand for iv_use with non mode-precision type\n\nPrecisely,  for iv_use if it's not integer/pointer type, or non-mode\nprecision type, add candidate for the corresponding scev in unsigned\ntype with the same precision, rather than its original type.\n\ngcc/\n    PR tree-optimization/93674\n    * tree-ssa-loop-ivopts.c (langhooks.h): New include.\n    (add_iv_candidate_for_use): For iv_use of non integer or pointer type,\n    or non-mode precision type, add candidate in unsigned type with the\n    same precision.\n\ngcc/testsuite/\n    PR tree-optimization/93674\n    * g++.dg/pr93674.C: New test.", "tree": {"sha": "2e2fac8703977db8d148db11dbd3931b73013f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e2fac8703977db8d148db11dbd3931b73013f7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed80b385418f97ef087f3f2bbe1abecffb5c9775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed80b385418f97ef087f3f2bbe1abecffb5c9775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed80b385418f97ef087f3f2bbe1abecffb5c9775", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed80b385418f97ef087f3f2bbe1abecffb5c9775/comments", "author": null, "committer": null, "parents": [{"sha": "926d39c3816772acde857a8510480d9b287ef760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926d39c3816772acde857a8510480d9b287ef760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/926d39c3816772acde857a8510480d9b287ef760"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "d45d272704c265502284284c4e82eb137b9c5d3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed80b385418f97ef087f3f2bbe1abecffb5c9775/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed80b385418f97ef087f3f2bbe1abecffb5c9775/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed80b385418f97ef087f3f2bbe1abecffb5c9775", "patch": "@@ -1,3 +1,12 @@\n+2020-04-09  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93674\n+\t* tree-ssa-loop-ivopts.c (langhooks.h): New include.\n+\t(add_iv_candidate_for_use): For iv_use of non integer or pointer type,\n+\tor non-mode precision type, add candidate in unsigned type with the\n+\tsame precision.\n+\n 2020-04-08  Clement Chigot  <clement.chigot@atos.net>\n \n \t* config/rs6000/aix61.h (LIB_SPEC): Add -lc128 with -mlong-double-128."}, {"sha": "960eae47308e018d70e4772a95cc46aaf39875e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed80b385418f97ef087f3f2bbe1abecffb5c9775/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed80b385418f97ef087f3f2bbe1abecffb5c9775/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed80b385418f97ef087f3f2bbe1abecffb5c9775", "patch": "@@ -1,3 +1,8 @@\n+2020-04-09  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/93674\n+\t* g++.dg/pr93674.C: New test.\n+\n 2020-04-08  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* g++.dg/tree-ssa/pr93940.C: Require pthread target."}, {"sha": "8c59f1b0079c08fb9a78489654fea4992ec8818a", "filename": "gcc/testsuite/g++.dg/pr93674.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed80b385418f97ef087f3f2bbe1abecffb5c9775/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93674.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed80b385418f97ef087f3f2bbe1abecffb5c9775/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93674.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93674.C?ref=ed80b385418f97ef087f3f2bbe1abecffb5c9775", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+// { dg-options \"-O3 -std=c++14 -fstrict-enums -pedantic -fdump-tree-optimized\" }\n+enum some_enum { x = 1000 };\n+void sink(some_enum);\n+\n+int __attribute__((noinline)) func() {\n+  int sum = 0;\n+  for (int i = 0; i < 3; ++i) {\n+      for (int j = 3; j >= 0; --j) {\n+          sink((some_enum)(i + j));\n+      }\n+  }\n+  return sum;\n+}\n+\n+// { dg-final { scan-tree-dump-not \"some_enum ivtmp\" \"optimized\" } }"}, {"sha": "1d2697ae1ba0d558d41a610925e78043ae12df7d", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed80b385418f97ef087f3f2bbe1abecffb5c9775/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed80b385418f97ef087f3f2bbe1abecffb5c9775/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=ed80b385418f97ef087f3f2bbe1abecffb5c9775", "patch": "@@ -132,6 +132,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-vectorizer.h\"\n #include \"dbgcnt.h\"\n \n+/* For lang_hooks.types.type_for_mode.  */\n+#include \"langhooks.h\"\n+\n /* FIXME: Expressions are expanded to RTL in this pass to determine the\n    cost of different addressing modes.  This should be moved to a TBD\n    interface between the GIMPLE and RTL worlds.  */\n@@ -3479,8 +3482,21 @@ add_iv_candidate_for_use (struct ivopts_data *data, struct iv_use *use)\n {\n   poly_uint64 offset;\n   tree base;\n-  tree basetype;\n   struct iv *iv = use->iv;\n+  tree basetype = TREE_TYPE (iv->base);\n+\n+  /* Don't add candidate for iv_use with non integer, pointer or non-mode\n+     precision types, instead, add candidate for the corresponding scev in\n+     unsigned type with the same precision.  See PR93674 for more info.  */\n+  if ((TREE_CODE (basetype) != INTEGER_TYPE && !POINTER_TYPE_P (basetype))\n+      || !type_has_mode_precision_p (basetype))\n+    {\n+      basetype = lang_hooks.types.type_for_mode (TYPE_MODE (basetype),\n+\t\t\t\t\t\t TYPE_UNSIGNED (basetype));\n+      add_candidate (data, fold_convert (basetype, iv->base),\n+\t\t     fold_convert (basetype, iv->step), false, NULL);\n+      return;\n+    }\n \n   add_candidate (data, iv->base, iv->step, false, use);\n "}]}