{"sha": "5ea1ce43b6070aaa94882e8b15f3340344aaa6b2", "node_id": "C_kwDOANBUbNoAKDVlYTFjZTQzYjYwNzBhYWE5NDg4MmU4YjE1ZjMzNDAzNDRhYWE2YjI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-03T07:23:25Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-04T14:37:35Z"}, "message": "path solver: Only compute relations for imports.\n\nWe are currently calculating implicit PHI relations for all PHI\narguments.  This creates unecessary work, as we only care about SSA\nnames in the import bitmap.  Similarly for inter-path relationals.  We\ncan avoid things not in the bitmap.\n\nTested on x86-64 and ppc64le Linux with the usual regstrap.  I also\nverified that the before and after number of threads was the same\nin a suite of .ii files from a bootstrap.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/102943\n\t* gimple-range-path.cc (path_range_query::compute_phi_relations):\n\tOnly compute relations for SSA names in the import list.\n\t(path_range_query::compute_outgoing_relations): Same.\n\t* gimple-range-path.h (path_range_query::import_p): New.", "tree": {"sha": "26bb903dd1bad15e6546490500845e75be3e92dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26bb903dd1bad15e6546490500845e75be3e92dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ea1ce43b6070aaa94882e8b15f3340344aaa6b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea1ce43b6070aaa94882e8b15f3340344aaa6b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea1ce43b6070aaa94882e8b15f3340344aaa6b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea1ce43b6070aaa94882e8b15f3340344aaa6b2/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "333efaea633971912f2208d37b7b62992759d400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/333efaea633971912f2208d37b7b62992759d400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/333efaea633971912f2208d37b7b62992759d400"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "42309886c9421ead1de3ac5b2cfc411d143926a5", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea1ce43b6070aaa94882e8b15f3340344aaa6b2/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea1ce43b6070aaa94882e8b15f3340344aaa6b2/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=5ea1ce43b6070aaa94882e8b15f3340344aaa6b2", "patch": "@@ -678,8 +678,12 @@ path_range_query::compute_phi_relations (basic_block bb, basic_block prev)\n        gsi_next (&iter))\n     {\n       gphi *phi = iter.phi ();\n+      tree result = gimple_phi_result (phi);\n       unsigned nargs = gimple_phi_num_args (phi);\n \n+      if (!import_p (result))\n+\tcontinue;\n+\n       for (size_t i = 0; i < nargs; ++i)\n \tif (e_in == gimple_phi_arg_edge (phi, i))\n \t  {\n@@ -701,7 +705,8 @@ path_range_query::compute_outgoing_relations (basic_block bb, basic_block next)\n \n   if (stmt\n       && gimple_code (stmt) == GIMPLE_COND\n-      && irange::supports_type_p (TREE_TYPE (gimple_cond_lhs (stmt))))\n+      && (import_p (gimple_cond_lhs (stmt))\n+\t  || import_p (gimple_cond_rhs (stmt))))\n     {\n       int_range<2> r;\n       gcond *cond = as_a<gcond *> (stmt);"}, {"sha": "f21d07f71c444f22aa342ef5a096b818a282399a", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea1ce43b6070aaa94882e8b15f3340344aaa6b2/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea1ce43b6070aaa94882e8b15f3340344aaa6b2/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=5ea1ce43b6070aaa94882e8b15f3340344aaa6b2", "patch": "@@ -62,6 +62,7 @@ class path_range_query : public range_query\n   void maybe_register_phi_relation (gphi *, tree arg);\n   void add_copies_to_imports ();\n   bool add_to_imports (tree name, bitmap imports);\n+  inline bool import_p (tree name);\n \n   // Path navigation.\n   void set_path (const vec<basic_block> &);\n@@ -97,4 +98,13 @@ class path_range_query : public range_query\n   bool m_undefined_path;\n };\n \n+// Return TRUE if NAME is in the import bitmap.\n+\n+bool\n+path_range_query::import_p (tree name)\n+{\n+  return (TREE_CODE (name) == SSA_NAME\n+\t  && bitmap_bit_p (m_imports, SSA_NAME_VERSION (name)));\n+}\n+\n #endif // GCC_TREE_SSA_THREADSOLVER_H"}]}