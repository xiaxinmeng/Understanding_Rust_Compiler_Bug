{"sha": "cef026ecafe169871284fded6494efe33e763950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VmMDI2ZWNhZmUxNjk4NzEyODRmZGVkNjQ5NGVmZTMzZTc2Mzk1MA==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-10-25T17:01:58Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-10-25T17:01:58Z"}, "message": "re PR fortran/72770 (ICE in make_ssa_name_fn, at tree-ssanames.c:263)\n\ngcc/testsuite/ChangeLog:\n\n2016-10-25  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/72770\n\t* gfortran.dg/alloc_comp_class_5.f03: Added test again that caused\n\tthis pr.\n\ngcc/fortran/ChangeLog:\n\n2016-10-25  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/72770\n\t* class.c (find_intrinsic_vtab): No longer encode the string length\n\tinto vtype's name and use the char's kind for the size instead of\n\tthe string_length time the size.\n\t* trans-array.c (gfc_conv_ss_descriptor): For deferred length char\n\tarrays the dynamically sized type needs to be declared.\n\t(build_class_array_ref): Address the i-th array element by multiplying\n\tit with the _vptr->_size and the _len to make sure char arrays are\n\taddressed correctly.\n\t* trans-expr.c (gfc_conv_intrinsic_to_class): Made comment more\n\tprecise.\n\nFrom-SVN: r241528", "tree": {"sha": "b0f80442a77baa418265d5ccf11e02c29050fe97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0f80442a77baa418265d5ccf11e02c29050fe97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cef026ecafe169871284fded6494efe33e763950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef026ecafe169871284fded6494efe33e763950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef026ecafe169871284fded6494efe33e763950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef026ecafe169871284fded6494efe33e763950/comments", "author": null, "committer": null, "parents": [{"sha": "6c3b5bf0725df869a12894682068b12dbf220568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c3b5bf0725df869a12894682068b12dbf220568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c3b5bf0725df869a12894682068b12dbf220568"}], "stats": {"total": 79, "additions": 61, "deletions": 18}, "files": [{"sha": "2e7c2930c2de15e2c6c428c1b7ac14d43f6cbbff", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef026ecafe169871284fded6494efe33e763950/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef026ecafe169871284fded6494efe33e763950/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cef026ecafe169871284fded6494efe33e763950", "patch": "@@ -1,3 +1,17 @@\n+2016-10-25  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/72770\n+\t* class.c (find_intrinsic_vtab): No longer encode the string length\n+\tinto vtype's name and use the char's kind for the size instead of\n+\tthe string_length time the size.\n+\t* trans-array.c (gfc_conv_ss_descriptor): For deferred length char\n+\tarrays the dynamically sized type needs to be declared.\n+\t(build_class_array_ref): Address the i-th array element by multiplying\n+\tit with the _vptr->_size and the _len to make sure char arrays are\n+\taddressed correctly.\n+\t* trans-expr.c (gfc_conv_intrinsic_to_class): Made comment more\n+\tprecise.\n+\n 2016-10-25  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* intrinsic.texi (cosd): New mathop."}, {"sha": "be1ddf85c9f164d962ea67ba528249bb3588a6fe", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef026ecafe169871284fded6494efe33e763950/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef026ecafe169871284fded6494efe33e763950/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=cef026ecafe169871284fded6494efe33e763950", "patch": "@@ -2515,11 +2515,6 @@ find_intrinsic_vtab (gfc_typespec *ts)\n   gfc_namespace *ns;\n   gfc_symbol *vtab = NULL, *vtype = NULL, *found_sym = NULL;\n   gfc_symbol *copy = NULL, *src = NULL, *dst = NULL;\n-  int charlen = 0;\n-\n-  if (ts->type == BT_CHARACTER && !ts->deferred && ts->u.cl && ts->u.cl->length\n-      && ts->u.cl->length->expr_type == EXPR_CONSTANT)\n-    charlen = mpz_get_si (ts->u.cl->length->value.integer);\n \n   /* Find the top-level namespace.  */\n   for (ns = gfc_current_ns; ns; ns = ns->parent)\n@@ -2530,12 +2525,10 @@ find_intrinsic_vtab (gfc_typespec *ts)\n     {\n       char name[GFC_MAX_SYMBOL_LEN+1], tname[GFC_MAX_SYMBOL_LEN+1];\n \n-      if (ts->type == BT_CHARACTER)\n-\tsprintf (tname, \"%s_%d_%d\", gfc_basic_typename (ts->type),\n-\t\t charlen, ts->kind);\n-      else\n-\tsprintf (tname, \"%s_%d_\", gfc_basic_typename (ts->type), ts->kind);\n-\n+      /* Encode all types as TYPENAME_KIND_ including especially character\n+\t arrays, whose length is now consistently stored in the _len component\n+\t of the class-variable.  */\n+      sprintf (tname, \"%s_%d_\", gfc_basic_typename (ts->type), ts->kind);\n       sprintf (name, \"__vtab_%s\", tname);\n \n       /* Look for the vtab symbol in the top-level namespace only.  */\n@@ -2600,9 +2593,8 @@ find_intrinsic_vtab (gfc_typespec *ts)\n \t      c->initializer = gfc_get_int_expr (gfc_default_integer_kind,\n \t\t\t\t\t\t NULL,\n \t\t\t\t\t\t ts->type == BT_CHARACTER\n-\t\t\t\t\t\t && charlen == 0 ?\n-\t\t\t\t\t\t   ts->kind :\n-\t\t\t\t\t\t   (int)gfc_element_size (e));\n+\t\t\t\t\t\t ? ts->kind\n+\t\t\t\t\t\t : (int)gfc_element_size (e));\n \t      gfc_free_expr (e);\n \n \t      /* Add component _extends.  */"}, {"sha": "de21cc0d1a704a6311e37605e2b011f35b9aa0a3", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef026ecafe169871284fded6494efe33e763950/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef026ecafe169871284fded6494efe33e763950/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=cef026ecafe169871284fded6494efe33e763950", "patch": "@@ -2681,6 +2681,20 @@ gfc_conv_ss_descriptor (stmtblock_t * block, gfc_ss * ss, int base)\n \n   if (base)\n     {\n+      if (ss_info->expr->ts.type == BT_CHARACTER && !ss_info->expr->ts.deferred\n+\t  && ss_info->expr->ts.u.cl->length == NULL)\n+\t{\n+\t  /* Emit a DECL_EXPR for the variable sized array type in\n+\t     GFC_TYPE_ARRAY_DATAPTR_TYPE so the gimplification of its type\n+\t     sizes works correctly.  */\n+\t  tree arraytype = TREE_TYPE (\n+\t\tGFC_TYPE_ARRAY_DATAPTR_TYPE (TREE_TYPE (info->descriptor)));\n+\t  if (! TYPE_NAME (arraytype))\n+\t    TYPE_NAME (arraytype) = build_decl (UNKNOWN_LOCATION, TYPE_DECL,\n+\t\t\t\t\t\tNULL_TREE, arraytype);\n+\t  gfc_add_expr_to_block (block, build1 (DECL_EXPR, arraytype,\n+\t\t\t\t\t\tTYPE_NAME (arraytype)));\n+\t}\n       /* Also the data pointer.  */\n       tmp = gfc_conv_array_data (se.expr);\n       /* If this is a variable or address of a variable we use it directly.\n@@ -3143,9 +3157,22 @@ build_class_array_ref (gfc_se *se, tree base, tree index)\n \n   size = gfc_class_vtab_size_get (decl);\n \n+  /* For unlimited polymorphic entities then _len component needs to be\n+     multiplied with the size.  If no _len component is present, then\n+     gfc_class_len_or_zero_get () return a zero_node.  */\n+  tmp = gfc_class_len_or_zero_get (decl);\n+  if (!integer_zerop (tmp))\n+    size = fold_build2 (MULT_EXPR, TREE_TYPE (index),\n+\t\t\tfold_convert (TREE_TYPE (index), size),\n+\t\t\tfold_build2 (MAX_EXPR, TREE_TYPE (index),\n+\t\t\t\t     fold_convert (TREE_TYPE (index), tmp),\n+\t\t\t\t     fold_convert (TREE_TYPE (index),\n+\t\t\t\t\t\t   integer_one_node)));\n+  else\n+    size = fold_convert (TREE_TYPE (index), size);\n+\n   /* Build the address of the element.  */\n   type = TREE_TYPE (TREE_TYPE (base));\n-  size = fold_convert (TREE_TYPE (index), size);\n   offset = fold_build2_loc (input_location, MULT_EXPR,\n \t\t\t    gfc_array_index_type,\n \t\t\t    index, size);"}, {"sha": "e57d3b9faf65dc17ff51b1b6d0f958a2c902481e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef026ecafe169871284fded6494efe33e763950/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef026ecafe169871284fded6494efe33e763950/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=cef026ecafe169871284fded6494efe33e763950", "patch": "@@ -860,7 +860,7 @@ gfc_conv_intrinsic_to_class (gfc_se *parmse, gfc_expr *e,\n     {\n       ctree = gfc_class_len_get (var);\n       /* When the actual arg is a char array, then set the _len component of the\n-       unlimited polymorphic entity, too.  */\n+\t unlimited polymorphic entity to the length of the string.  */\n       if (e->ts.type == BT_CHARACTER)\n \t{\n \t  /* Start with parmse->string_length because this seems to be set to a"}, {"sha": "35b366aeafc208ae7dced4102bacccb2a2deee3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef026ecafe169871284fded6494efe33e763950/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef026ecafe169871284fded6494efe33e763950/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cef026ecafe169871284fded6494efe33e763950", "patch": "@@ -1,3 +1,9 @@\n+2016-10-25  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/72770\n+\t* gfortran.dg/alloc_comp_class_5.f03: Added test again that caused\n+\tthis pr.\n+\n 2016-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/78102"}, {"sha": "f07ffa100121ca00eb70669d9b7e519ab886b7a8", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_class_5.f03", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef026ecafe169871284fded6494efe33e763950/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef026ecafe169871284fded6494efe33e763950/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_5.f03?ref=cef026ecafe169871284fded6494efe33e763950", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do run }\n !\n ! Contributed by Vladimir Fuka\n-! Check that pr61337 is fixed.\n+! Check that pr61337 and pr78053, which was caused by this testcase, is fixed.\n \n module array_list\n \n@@ -39,8 +39,9 @@ program test_pr61337\n   call add_item(a_list, [1, 2])\n   call add_item(a_list, [3.0_8, 4.0_8])\n   call add_item(a_list, [.true., .false.])\n+  call add_item(a_list, [\"foo\", \"bar\", \"baz\"])\n \n-  if (size(a_list) /= 3) call abort()\n+  if (size(a_list) /= 4) call abort()\n   do i = 1, size(a_list)\n           call checkarr(a_list(i))\n   end do\n@@ -60,6 +61,9 @@ subroutine checkarr(c)\n           if (any(x /= [3.0_8, 4.0_8])) call abort()\n         type is (logical)\n           if (any(x .neqv. [.true., .false.])) call abort()\n+        type is (character(len=*))\n+          if (len(x) /= 3) call abort()\n+          if (any(x /= [\"foo\", \"bar\", \"baz\"])) call abort()\n         class default\n           call abort()\n       end select"}]}