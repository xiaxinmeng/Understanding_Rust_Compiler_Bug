{"sha": "dc97c7a83c231ab0e34733b85295aca558b98800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM5N2M3YTgzYzIzMWFiMGUzNDczM2I4NTI5NWFjYTU1OGI5ODgwMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:35:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:35:35Z"}, "message": "s-taprop-irix.adb, [...] (Create_Task): Do not attempt to set task priority or task info if the thread could not be created.\n\n2008-03-26  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-taprop-irix.adb, s-taprop-tru64.adb, s-taprop-lynxos.adb, \n\ts-taprop-linux.adb, s-taprop-mingw.adb, s-taprop-vxworks.adb, \n\ts-taprop-posix.adb (Create_Task): Do not attempt to set task priority\n\tor task info if the thread could not be created.\n\nFrom-SVN: r133547", "tree": {"sha": "fce4bf8b7ea36ec5ca61fcf278688a7c3133ad7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fce4bf8b7ea36ec5ca61fcf278688a7c3133ad7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc97c7a83c231ab0e34733b85295aca558b98800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc97c7a83c231ab0e34733b85295aca558b98800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc97c7a83c231ab0e34733b85295aca558b98800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc97c7a83c231ab0e34733b85295aca558b98800/comments", "author": null, "committer": null, "parents": [{"sha": "366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366b8af7e4e5eda01cbdf8e4c2640ac0e84bcc34"}], "stats": {"total": 310, "additions": 115, "deletions": 195}, "files": [{"sha": "a7221903cc891f2a6db8db581ef4aae06f76ce13", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=dc97c7a83c231ab0e34733b85295aca558b98800", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,44 +33,30 @@\n \n --  This is a IRIX (pthread library) version of this package\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n+\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n with Interfaces.C;\n---  used for int\n---           size_t\n \n with System.Task_Info;\n-\n with System.Tasking.Debug;\n---  used for Known_Tasks\n-\n with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Interrupt_ID\n-\n with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with System.IO;\n---  used for Put_Line\n \n with System.Soft_Links;\n---  used for Abort_Defer/Undefer\n-\n --  We use System.Soft_Links instead of System.Tasking.Initialization\n --  because the later is a higher level package that we shouldn't depend on.\n --  For example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n-with Ada.Unchecked_Conversion;\n-with Ada.Unchecked_Deallocation;\n-\n package body System.Task_Primitives.Operations is\n \n    package SSL renames System.Soft_Links;\n@@ -920,13 +906,16 @@ package body System.Task_Primitives.Operations is\n \n       Succeeded := Result = 0;\n \n-      --  The following needs significant commenting ???\n+      if Succeeded then\n \n-      if T.Common.Task_Info /= null then\n-         T.Common.Base_Priority := T.Common.Task_Info.Priority;\n-         Set_Priority (T, T.Common.Task_Info.Priority);\n-      else\n-         Set_Priority (T, Priority);\n+         --  The following needs significant commenting ???\n+\n+         if T.Common.Task_Info /= null then\n+            T.Common.Base_Priority := T.Common.Task_Info.Priority;\n+            Set_Priority (T, T.Common.Task_Info.Priority);\n+         else\n+            Set_Priority (T, Priority);\n+         end if;\n       end if;\n \n       Result := pthread_attr_destroy (Attributes'Access);"}, {"sha": "6c64f341eec798bbd18c30543df063d0d852d6be", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 24, "deletions": 39, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=dc97c7a83c231ab0e34733b85295aca558b98800", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,51 +33,31 @@\n \n --  This is a GNU/Linux (GNU/LinuxThreads) version of this package\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n+\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n with Interfaces.C;\n---  used for int\n---           size_t\n \n with System.Task_Info;\n---  used for Unspecified_Task_Info\n-\n with System.Tasking.Debug;\n---  used for Known_Tasks\n-\n with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Interrupt_ID\n-\n with System.OS_Primitives;\n---  used for Delay_Modes\n+with System.Storage_Elements;\n+with System.Stack_Checking.Operations;\n \n with System.Soft_Links;\n---  used for Abort_Defer/Undefer\n-\n --  We use System.Soft_Links instead of System.Tasking.Initialization\n --  because the later is a higher level package that we shouldn't depend on.\n --  For example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n-with System.Storage_Elements;\n-with System.Stack_Checking.Operations;\n---  Used for Invalidate_Stack_Cache and Notify_Stack_Attributes;\n-\n-with Ada.Exceptions;\n---  used for Raise_Exception\n---           Raise_From_Signal_Handler\n---           Exception_Id\n-\n-with Ada.Unchecked_Conversion;\n-with Ada.Unchecked_Deallocation;\n-\n package body System.Task_Primitives.Operations is\n \n    package SSL renames System.Soft_Links;\n@@ -273,12 +253,11 @@ package body System.Task_Primitives.Operations is\n    -- Initialize_Lock --\n    ---------------------\n \n-   --  Note: mutexes and cond_variables needed per-task basis are\n-   --  initialized in Initialize_TCB and the Storage_Error is\n-   --  handled. Other mutexes (such as RTS_Lock, Memory_Lock...)\n-   --  used in RTS is initialized before any status change of RTS.\n-   --  Therefore rasing Storage_Error in the following routines\n-   --  should be able to be handled safely.\n+   --  Note: mutexes and cond_variables needed per-task basis are initialized\n+   --  in Initialize_TCB and the Storage_Error is handled. Other mutexes (such\n+   --  as RTS_Lock, Memory_Lock...) used in RTS is initialized before any\n+   --  status change of RTS. Therefore rasing Storage_Error in the following\n+   --  routines should be able to be handled safely.\n \n    procedure Initialize_Lock\n      (Prio : System.Any_Priority;\n@@ -294,8 +273,7 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n       if Result = ENOMEM then\n-         Ada.Exceptions.Raise_Exception (Storage_Error'Identity,\n-           \"Failed to allocate a lock\");\n+         raise Storage_Error with \"Failed to allocate a lock\";\n       end if;\n    end Initialize_Lock;\n \n@@ -920,7 +898,14 @@ package body System.Task_Primitives.Operations is\n          To_Address (T));\n       pragma Assert (Result = 0 or else Result = EAGAIN);\n \n-      Succeeded := Result = 0;\n+      if Result /= 0 then\n+         Succeeded := False;\n+         Result := pthread_attr_destroy (Attributes'Access);\n+         pragma Assert (Result = 0);\n+         return;\n+      end if;\n+\n+      Succeeded := True;\n \n       --  Handle Task_Info\n "}, {"sha": "31b36eca5791150350bedd5305eac5497a2d2a8c", "filename": "gcc/ada/s-taprop-lynxos.adb", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-lynxos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-lynxos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-lynxos.adb?ref=dc97c7a83c231ab0e34733b85295aca558b98800", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,44 +31,31 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is a LynxOS version of this file, adapted to make\n---  SCHED_FIFO and ceiling locking (Annex D compliance) work properly\n+--  This is a LynxOS version of this file, adapted to make SCHED_FIFO and\n+--  ceiling locking (Annex D compliance) work properly.\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n-with System.Tasking.Debug;\n---  used for Known_Tasks\n+with Ada.Unchecked_Deallocation;\n \n-with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Interrupt_ID\n+with Interfaces.C;\n \n+with System.Tasking.Debug;\n+with System.Interrupt_Management;\n with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with System.Task_Info;\n---  used for Task_Info_Type\n-\n-with Interfaces.C;\n---  used for int\n---           size_t\n \n with System.Soft_Links;\n---  used for Abort_Defer/Undefer\n-\n --  We use System.Soft_Links instead of System.Tasking.Initialization\n --  because the later is a higher level package that we shouldn't depend on.\n --  For example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n-with Ada.Unchecked_Deallocation;\n-\n package body System.Task_Primitives.Operations is\n \n    package SSL renames System.Soft_Links;\n@@ -996,7 +983,9 @@ package body System.Task_Primitives.Operations is\n       Result := pthread_attr_destroy (Attributes'Access);\n       pragma Assert (Result = 0);\n \n-      Set_Priority (T, Priority);\n+      if Succeeded then\n+         Set_Priority (T, Priority);\n+      end if;\n    end Create_Task;\n \n    ------------------"}, {"sha": "adf1a31ec45f0876fdc135b4e66dcda3e07d5b32", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=dc97c7a83c231ab0e34733b85295aca558b98800", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,42 +33,29 @@\n \n --  This is a NT (native) version of this package\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n-with System.Tasking.Debug;\n---  used for Known_Tasks\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n+with Ada.Unchecked_Deallocation;\n \n with Interfaces.C;\n---  used for int\n---           size_t\n-\n with Interfaces.C.Strings;\n---  used for Null_Ptr\n \n+with System.Tasking.Debug;\n+with System.OS_Primitives;\n with System.Task_Info;\n---  used for Unspecified_Task_Info\n-\n with System.Interrupt_Management;\n---  used for Initialize\n \n with System.Soft_Links;\n---  used for Abort_Defer/Undefer\n-\n --  We use System.Soft_Links instead of System.Tasking.Initialization because\n --  the later is a higher level package that we shouldn't depend on. For\n --  example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n-with Ada.Unchecked_Deallocation;\n-\n package body System.Task_Primitives.Operations is\n \n    package SSL renames System.Soft_Links;\n@@ -913,7 +900,8 @@ package body System.Task_Primitives.Operations is\n       --  Step 1: Create the thread in blocked mode\n \n       if hTask = 0 then\n-         raise Storage_Error;\n+         Succeeded := False;\n+         return;\n       end if;\n \n       --  Step 2: set its TCB"}, {"sha": "816bb50a7b65014437e8b1b598f0053332f60252", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=dc97c7a83c231ab0e34733b85295aca558b98800", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,48 +33,35 @@\n \n --  This is a POSIX-like version of this package\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n---  Note: this file can only be used for POSIX compliant systems that\n---  implement SCHED_FIFO and Ceiling Locking correctly.\n+--  Note: this file can only be used for POSIX compliant systems that implement\n+--  SCHED_FIFO and Ceiling Locking correctly.\n \n --  For configurations where SCHED_FIFO and priority ceiling are not a\n --  requirement, this file can also be used (e.g AiX threads)\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n-with System.Tasking.Debug;\n---  used for Known_Tasks\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n-with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Interrupt_ID\n+with Interfaces.C;\n \n+with System.Tasking.Debug;\n+with System.Interrupt_Management;\n with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with System.Task_Info;\n---  used for Task_Info_Type\n-\n-with Interfaces.C;\n---  used for int\n---           size_t\n \n with System.Soft_Links;\n---  used for Abort_Defer/Undefer\n-\n --  We use System.Soft_Links instead of System.Tasking.Initialization\n --  because the later is a higher level package that we shouldn't depend on.\n --  For example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n-with Ada.Unchecked_Conversion;\n-with Ada.Unchecked_Deallocation;\n-\n package body System.Task_Primitives.Operations is\n \n    package SSL renames System.Soft_Links;\n@@ -1013,7 +1000,9 @@ package body System.Task_Primitives.Operations is\n       Result := pthread_attr_destroy (Attributes'Access);\n       pragma Assert (Result = 0);\n \n-      Set_Priority (T, Priority);\n+      if Succeeded then\n+         Set_Priority (T, Priority);\n+      end if;\n    end Create_Task;\n \n    ------------------"}, {"sha": "ace4756fea06001746bf4d84892f6e932d2587e0", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=dc97c7a83c231ab0e34733b85295aca558b98800", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,46 +31,31 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is a DEC Unix 4.0d version of this package\n+--  This is a Tru64 version of this package\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n-with System.Tasking.Debug;\n---  used for Known_Tasks\n+with Ada.Unchecked_Deallocation;\n \n-with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Interrupt_ID\n+with Interfaces;\n+with Interfaces.C;\n \n+with System.Tasking.Debug;\n+with System.Interrupt_Management;\n with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with System.Task_Info;\n---  used for Task_Info_Type\n-\n-with Interfaces;\n---  used for Shift_Left\n-\n-with Interfaces.C;\n---  used for int\n---           size_t\n \n with System.Soft_Links;\n---  used for Abort_Defer/Undefer\n-\n --  We use System.Soft_Links instead of System.Tasking.Initialization\n --  because the later is a higher level package that we shouldn't depend on.\n --  For example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n-with Ada.Unchecked_Deallocation;\n-\n package body System.Task_Primitives.Operations is\n \n    package SSL renames System.Soft_Links;\n@@ -948,7 +933,7 @@ package body System.Task_Primitives.Operations is\n       Result := pthread_attr_destroy (Attributes'Access);\n       pragma Assert (Result = 0);\n \n-      if T.Common.Task_Info /= null then\n+      if Succeeded and then T.Common.Task_Info /= null then\n \n          --  ??? We're using a process-wide function to implement a task\n          --  specific characteristic."}, {"sha": "c6469cd2b054290838e5b9b4e2e8137bb3f50532", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc97c7a83c231ab0e34733b85295aca558b98800/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=dc97c7a83c231ab0e34733b85295aca558b98800", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,35 +33,27 @@\n \n --  This is the VxWorks version of this package\n \n---  This package contains all the GNULL primitives that interface directly\n---  with the underlying OS.\n+--  This package contains all the GNULL primitives that interface directly with\n+--  the underlying OS.\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n-with System.Tasking.Debug;\n---  used for Known_Tasks\n-\n-with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Signal_ID\n---           Initialize_Interrupts\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n with Interfaces.C;\n \n-with System.Soft_Links;\n---  used for Abort_Defer/Undefer\n+with System.Tasking.Debug;\n+with System.Interrupt_Management;\n \n+with System.Soft_Links;\n --  We use System.Soft_Links instead of System.Tasking.Initialization\n---  because the later is a higher level package that we shouldn't depend on.\n---  For example when using the restricted run time, it is replaced by\n+--  because the later is a higher level package that we shouldn't depend\n+--  on. For example when using the restricted run time, it is replaced by\n --  System.Tasking.Restricted.Stages.\n \n-with Ada.Unchecked_Conversion;\n-with Ada.Unchecked_Deallocation;\n-\n package body System.Task_Primitives.Operations is\n \n    package SSL renames System.Soft_Links;\n@@ -754,9 +746,9 @@ package body System.Task_Primitives.Operations is\n    pragma Atomic_Components (Prio_Array_Type);\n \n    Prio_Array : Prio_Array_Type;\n-   --  Global array containing the id of the currently running task for\n-   --  each priority. Note that we assume that we are on a single processor\n-   --  with run-till-blocked scheduling.\n+   --  Global array containing the id of the currently running task for each\n+   --  priority. Note that we assume that we are on a single processor with\n+   --  run-till-blocked scheduling.\n \n    procedure Set_Priority\n      (T                   : Task_Id;\n@@ -776,7 +768,7 @@ package body System.Task_Primitives.Operations is\n         and then Loss_Of_Inheritance\n         and then Prio < T.Common.Current_Priority\n       then\n-         --  Annex D requirement (RM D.2.2(9))\n+         --  Annex D requirement (RM D.2.2(9)):\n \n          --    If the task drops its priority due to the loss of inherited\n          --    priority, it is added at the head of the ready queue for its\n@@ -852,7 +844,8 @@ package body System.Task_Primitives.Operations is\n \n       Unlock_RTS;\n \n-      --  If stack checking is enabled set the stack limit for this task.\n+      --  If stack checking is enabled, set the stack limit for this task\n+\n       if Set_Stack_Limit_Hook /= null then\n          Set_Stack_Limit_Hook.all;\n       end if;\n@@ -985,10 +978,9 @@ package body System.Task_Primitives.Operations is\n          Succeeded := False;\n       else\n          Succeeded := True;\n+         Task_Creation_Hook (T.Common.LL.Thread);\n+         Set_Priority (T, Priority);\n       end if;\n-\n-      Task_Creation_Hook (T.Common.LL.Thread);\n-      Set_Priority (T, Priority);\n    end Create_Task;\n \n    ------------------\n@@ -1077,6 +1069,9 @@ package body System.Task_Primitives.Operations is\n    --------------\n \n    procedure Finalize (S : in out Suspension_Object) is\n+      pragma Unmodified (S);\n+      --  S may be modified on other targets, but not on VxWorks\n+\n       Result : STATUS;\n \n    begin"}]}