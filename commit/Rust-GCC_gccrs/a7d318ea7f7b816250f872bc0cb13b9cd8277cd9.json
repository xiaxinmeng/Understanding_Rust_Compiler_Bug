{"sha": "a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkMzE4ZWE3ZjdiODE2MjUwZjg3MmJjMGNiMTNiOWNkODI3N2NkOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-08-24T15:00:59Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-24T15:00:59Z"}, "message": "re PR fortran/33139 (array pointer assignment gives incorrect dimensions)\n\n2007-08-24  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/33139\n\t* trans-array.c (gfc_conv_expr_descriptor): Copy bounds for\n\twhole-array pointer assignments.\n\n2007-08-24  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/33139\n\t* gfortran.dg/pointer_assign_4.f90: New.\n\t* gfortran.dg/shape_2.f90: Fix test case.\n\t* gfortran.dg/char_result_4.f90: Ditto.\n\nFrom-SVN: r127770", "tree": {"sha": "8af3a65c6be816697eb42e8a5f00f00c71e88273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8af3a65c6be816697eb42e8a5f00f00c71e88273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14a43348bc523d889df7918ae8672b233b2ccf37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a43348bc523d889df7918ae8672b233b2ccf37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a43348bc523d889df7918ae8672b233b2ccf37"}], "stats": {"total": 111, "additions": 96, "deletions": 15}, "files": [{"sha": "67d779181c03b0f4a232f62cedb575c65419b803", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "patch": "@@ -1,3 +1,9 @@\n+2007-08-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/33139\n+\t* trans-array.c (gfc_conv_expr_descriptor): Copy bounds for\n+\twhole-array pointer assignments.\n+\n 2007-08-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl.c (variable_decl): Don't share charlen structs if"}, {"sha": "73a57e82c4c060eebc41706ccdb95511f0bd7ad5", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "patch": "@@ -4712,7 +4712,10 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n       tmp = gfc_conv_descriptor_dtype (parm);\n       gfc_add_modify_expr (&loop.pre, tmp, gfc_get_dtype (parmtype));\n \n-      if (se->direct_byref)\n+      /* Set offset for assignments to pointer only to zero if it is not\n+         the full array.  */\n+      if (se->direct_byref\n+\t  && info->ref && info->ref->u.ar.type != AR_FULL)\n \tbase = gfc_index_zero_node;\n       else if (GFC_ARRAY_TYPE_P (TREE_TYPE (desc)))\n \tbase = gfc_evaluate_now (gfc_conv_array_offset (desc), &loop.pre);\n@@ -4763,12 +4766,11 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t  from = loop.from[dim];\n \t  to = loop.to[dim];\n \n-\t  /* If we have an array section or are assigning to a pointer,\n-\t     make sure that the lower bound is 1.  References to the full\n+\t  /* If we have an array section or are assigning make sure that\n+\t     the lower bound is 1.  References to the full\n \t     array should otherwise keep the original bounds.  */\n \t  if ((!info->ref\n-\t       || info->ref->u.ar.type != AR_FULL\n-\t       || se->direct_byref)\n+\t          || info->ref->u.ar.type != AR_FULL)\n \t      && !integer_onep (from))\n \t    {\n \t      tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n@@ -4788,7 +4790,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t  stride = fold_build2 (MULT_EXPR, gfc_array_index_type,\n \t\t\t\tstride, info->stride[dim]);\n \n-\t  if (se->direct_byref)\n+\t  if (se->direct_byref && info->ref && info->ref->u.ar.type != AR_FULL)\n \t    {\n \t      base = fold_build2 (MINUS_EXPR, TREE_TYPE (base),\n \t\t\t\t  base, stride);\n@@ -4824,7 +4826,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t}\n \n       if ((se->direct_byref || GFC_ARRAY_TYPE_P (TREE_TYPE (desc)))\n-\t     && !se->data_not_needed)\n+\t  && !se->data_not_needed)\n \t{\n \t  /* Set the offset.  */\n \t  tmp = gfc_conv_descriptor_offset (parm);"}, {"sha": "a27c2ad411ef8389fd9bd88ed3676a610d6068ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "patch": "@@ -1,3 +1,10 @@\n+2007-08-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/33139\n+\t* gfortran.dg/pointer_assign_4.f90: New.\n+\t* gfortran.dg/shape_2.f90: Fix test case.\n+\t* gfortran.dg/char_result_4.f90: Ditto.\n+\n 2007-08-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/array-init-1.c: New test."}, {"sha": "5e4f58e188bbef7067af089a58a519e74eda71b1", "filename": "gcc/testsuite/gfortran.dg/char_result_4.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_4.f90?ref=a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "patch": "@@ -22,12 +22,12 @@ end function double\n \n   a = (/ (i + 5, i = 0, 4) /)\n   ap => a\n-  lower = 1\n+  lower = lbound(a,dim=1)\n \n   call test (f1 (ap), 35)\n   call test (f2 (ap), 115)\n   call test (f3 (ap), 60)\n-  call test (f4 (ap, 5, 2), 21)\n+  call test (f4 (ap, 104, 2), 21)\n contains\n   function f1 (array)\n     integer, dimension (:), pointer :: array\n@@ -37,13 +37,13 @@ end function f1\n \n   function f2 (array)\n     integer, dimension (:), pointer :: array\n-    character (len = array (2) + a (104) + 100) :: f2\n+    character (len = array (101) + a (104) + 100) :: f2\n     f2 = ''\n   end function f2\n \n   function f3 (array)\n     integer, dimension (:), pointer :: array\n-    character (len = sum (double (array (2:)))) :: f3\n+    character (len = sum (double (array (101:)))) :: f3\n     f3 = ''\n   end function f3\n "}, {"sha": "faf7c776c59a592ec50e2fe4a61dd054f05e3396", "filename": "gcc/testsuite/gfortran.dg/pointer_assign_4.f90", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_4.f90?ref=a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "patch": "@@ -0,0 +1,66 @@\n+! { dg-do run }\n+!\n+! Verify that the bounds are correctly set when assigning pointers.\n+!\n+! PR fortran/33139\n+!\n+program prog\n+  implicit none\n+  real, target :: a(-10:10)\n+  real, pointer :: p(:),p2(:)\n+  integer :: i\n+  do i = -10, 10\n+    a(i) = real(i)\n+  end do\n+  p  => a\n+  p2 => p\n+  if((lbound(p, dim=1) /= -10) .or. (ubound(p, dim=1) /= 10)) &\n+    call abort()\n+  if((lbound(p2,dim=1) /= -10) .or. (ubound(p2,dim=1) /= 10)) &\n+    call abort()\n+  do i = -10, 10\n+    if(p(i) /= real(i)) call abort()\n+    if(p2(i) /= real(i)) call abort()\n+  end do\n+  p => a(:)\n+  p2 => p\n+  if((lbound(p, dim=1) /= 1) .or. (ubound(p, dim=1) /= 21)) &\n+    call abort()\n+  if((lbound(p2,dim=1) /= 1) .or. (ubound(p2,dim=1) /= 21)) &\n+    call abort()\n+  p2 => p(:)\n+  if((lbound(p2,dim=1) /= 1) .or. (ubound(p2,dim=1) /= 21)) &\n+    call abort()\n+  call multdim()\n+contains\n+  subroutine multdim()\n+    real, target, allocatable :: b(:,:,:)\n+    real, pointer :: ptr(:,:,:)\n+    integer :: i, j, k\n+    allocate(b(-5:5,10:20,0:3))\n+    do i = 0, 3\n+      do j = 10, 20\n+        do k = -5, 5\n+          b(k,j,i) = real(i+10*j+100*k)\n+        end do\n+      end do\n+    end do\n+    ptr => b\n+    if((lbound(ptr,dim=1) /= -5) .or. (ubound(ptr,dim=1) /=  5) .or. &\n+       (lbound(ptr,dim=2) /= 10) .or. (ubound(ptr,dim=2) /= 20) .or. &\n+       (lbound(ptr,dim=3) /=  0) .or. (ubound(ptr,dim=3) /=  3))     &\n+      call abort()\n+    do i = 0, 3\n+      do j = 10, 20\n+        do k = -5, 5\n+          if(ptr(k,j,i) /= real(i+10*j+100*k)) call abort()\n+        end do\n+      end do\n+    end do\n+    ptr => b(:,:,:)\n+    if((lbound(ptr,dim=1) /= 1) .or. (ubound(ptr,dim=1) /= 11) .or. &\n+       (lbound(ptr,dim=2) /= 1) .or. (ubound(ptr,dim=2) /= 11) .or. &\n+       (lbound(ptr,dim=3) /= 1) .or. (ubound(ptr,dim=3) /=  4))     &\n+      call abort()\n+  end subroutine multdim\n+end program prog"}, {"sha": "057cb4c855872966412bdb0cb8eb5de16cb7cb8e", "filename": "gcc/testsuite/gfortran.dg/shape_2.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ftestsuite%2Fgfortran.dg%2Fshape_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d318ea7f7b816250f872bc0cb13b9cd8277cd9/gcc%2Ftestsuite%2Fgfortran.dg%2Fshape_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fshape_2.f90?ref=a7d318ea7f7b816250f872bc0cb13b9cd8277cd9", "patch": "@@ -22,9 +22,9 @@ subroutine test (b)\n     if (ubound (b (20:30:3, 40), 1) .ne. 4) call abort\n \n     ptr => b\n-    if (lbound (ptr, 1) .ne. 1) call abort\n-    if (ubound (ptr, 1) .ne. 40) call abort\n-    if (lbound (ptr, 2) .ne. 1) call abort\n-    if (ubound (ptr, 2) .ne. 80) call abort\n+    if (lbound (ptr, 1) .ne. 11) call abort\n+    if (ubound (ptr, 1) .ne. 50) call abort\n+    if (lbound (ptr, 2) .ne. -8) call abort\n+    if (ubound (ptr, 2) .ne. 71) call abort\n   end subroutine test\n end program main"}]}