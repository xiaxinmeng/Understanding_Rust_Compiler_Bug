{"sha": "70826946ea1908954914bb09e27e40139f49be59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA4MjY5NDZlYTE5MDg5NTQ5MTRiYjA5ZTI3ZTQwMTM5ZjQ5YmU1OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-11-20T21:23:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-11-20T21:23:02Z"}, "message": "re PR libstdc++/42019 (shared_ptr can not be used with -fno-rtti)\n\n2009-11-20  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/42019\n\t* include/tr1/shared_ptr.h: Only use typeid when RTTI is enabled.\n\t* include/bits/shared_ptr_base.h: Likewise.\n\t* include/bits/shared_ptr.h: Likewise.\n\t* testsuite/tr1/2_general_utilities/shared_ptr/misc/42019.cc: New.\n\t* testsuite/20_util/shared_ptr/misc/42019.cc: New.\n\nFrom-SVN: r154377", "tree": {"sha": "813398e999308911177ac3cbf1b11e8010773138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/813398e999308911177ac3cbf1b11e8010773138"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70826946ea1908954914bb09e27e40139f49be59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70826946ea1908954914bb09e27e40139f49be59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70826946ea1908954914bb09e27e40139f49be59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70826946ea1908954914bb09e27e40139f49be59/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d547364305ff4ec01fa13b545028ff0d0467e995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d547364305ff4ec01fa13b545028ff0d0467e995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d547364305ff4ec01fa13b545028ff0d0467e995"}], "stats": {"total": 172, "additions": 167, "deletions": 5}, "files": [{"sha": "18fbe843db721d572b1c3cba787fbae3fcf04001", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=70826946ea1908954914bb09e27e40139f49be59", "patch": "@@ -1,4 +1,13 @@\n-2009-11-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+2009-11-20  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/42019\n+\t* include/tr1/shared_ptr.h: Only use typeid when RTTI is enabled.\n+\t* include/bits/shared_ptr_base.h: Likewise.\n+\t* include/bits/shared_ptr.h: Likewise.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/misc/42019.cc: New.\n+\t* testsuite/20_util/shared_ptr/misc/42019.cc: New.\n+\n+2009-11-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* src/compatibility-c++0x.cc (_Fnv_hash<4>, _Fnv_hash<8>): Add.\n "}, {"sha": "60fdf2fcbb05ba3c0d85621a4c960c8116c55720", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=70826946ea1908954914bb09e27e40139f49be59", "patch": "@@ -76,7 +76,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Del, typename _Tp, _Lock_policy _Lp>\n     inline _Del*\n     get_deleter(const __shared_ptr<_Tp, _Lp>& __p)\n-    { return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del))); }\n+    {\n+#ifdef __GXX_RTTI\n+      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));\n+#else\n+      return 0;\n+#endif\n+    }\n \n \n   /**"}, {"sha": "ff1282d56200a2b7489af8f210cafacd1f3273e1", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=70826946ea1908954914bb09e27e40139f49be59", "patch": "@@ -151,7 +151,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       virtual void*\n       _M_get_deleter(const std::type_info& __ti)\n-      { return __ti == typeid(_Deleter) ? &_M_del._M_del : 0; }\n+      {\n+#ifdef __GXX_RTTI\n+        return __ti == typeid(_Deleter) ? &_M_del._M_del : 0;\n+#else\n+        return 0;\n+#endif\n+      }\n \n     protected:\n       _My_Deleter      _M_del;  // copy constructor must not throw\n@@ -209,9 +215,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       virtual void*\n       _M_get_deleter(const std::type_info& __ti)\n       {\n+#ifdef __GXX_RTTI\n \treturn __ti == typeid(_Sp_make_shared_tag)\n \t       ? static_cast<void*>(&_M_storage)\n \t       : _Base_type::_M_get_deleter(__ti);\n+#else\n+        return 0;\n+#endif\n       }\n \n     private:\n@@ -740,6 +750,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \towner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const\n \t{ return _M_refcount._M_less(__rhs._M_refcount); }\n \n+#ifdef __GXX_RTTI\n     protected:\n       // This constructor is non-standard, it is used by allocate_shared.\n       template<typename _Alloc, typename... _Args>\n@@ -753,6 +764,39 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _M_ptr = static_cast<_Tp*>(__p);\n \t  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);\n \t}\n+#else\n+      template<typename _Alloc>\n+        struct _Deleter\n+        {\n+          void operator()(_Tp* __ptr)\n+          {\n+            _M_alloc.destroy(__ptr);\n+            _M_alloc.deallocate(__ptr, 1);\n+          }\n+          _Alloc _M_alloc;\n+        };\n+\n+      template<typename _Alloc, typename... _Args>\n+\t__shared_ptr(_Sp_make_shared_tag __tag, _Alloc __a, _Args&&... __args)\n+\t: _M_ptr(), _M_refcount()\n+        {\n+\t  typedef typename _Alloc::template rebind<_Tp>::other _Alloc2;\n+          _Deleter<_Alloc2> __del = { _Alloc2(__a) };\n+          _M_ptr = __del._M_alloc.allocate(1);\n+\t  __try\n+\t    {\n+              __del._M_alloc.construct(_M_ptr, std::forward<_Args>(__args)...);\n+\t    }\n+\t  __catch(...)\n+\t    {\n+              __del._M_alloc.deallocate(_M_ptr, 1);\n+\t      __throw_exception_again;\n+\t    }\n+          __shared_count<_Lp> __count(_M_ptr, __del, __del._M_alloc);\n+          _M_refcount._M_swap(__count);\n+\t  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);\n+        }\n+#endif\n \n       template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,\n \t       typename... _Args>"}, {"sha": "6176b5e48140fae60381c3e26640da139b7524e9", "filename": "libstdc++-v3/include/tr1/shared_ptr.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h?ref=70826946ea1908954914bb09e27e40139f49be59", "patch": "@@ -72,7 +72,13 @@ namespace tr1\n       \n       virtual void*\n       _M_get_deleter(const std::type_info& __ti)\n-      { return __ti == typeid(_Deleter) ? &_M_del : 0; }\n+      {\n+#ifdef __GXX_RTTI\n+        return __ti == typeid(_Deleter) ? &_M_del : 0;\n+#else\n+        return 0;\n+#endif\n+      }\n       \n     private:\n       _Sp_counted_base_impl(const _Sp_counted_base_impl&);\n@@ -595,7 +601,13 @@ namespace tr1\n   template<typename _Del, typename _Tp, _Lock_policy _Lp>\n     inline _Del*\n     get_deleter(const __shared_ptr<_Tp, _Lp>& __p)\n-    { return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del))); }\n+    {\n+#ifdef __GXX_RTTI\n+      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));\n+#else\n+      return 0;\n+#endif\n+    }\n \n \n   template<typename _Tp, _Lock_policy _Lp>"}, {"sha": "bea1771d258efa26f5fe6749a018fb1e78d69959", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/misc/42019.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmisc%2F42019.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmisc%2F42019.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmisc%2F42019.cc?ref=70826946ea1908954914bb09e27e40139f49be59", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x -fno-rtti\" }\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.8.15.2 Template class shared_ptr [util.smartptr.shared]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/42019\n+\n+class A {};\n+\n+struct B {\n+  explicit B(int i) : i(i) { }\n+  int i;\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::shared_ptr<A> spA = std::make_shared<A>();\n+\n+  VERIFY( spA.get() != 0 );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::shared_ptr<B> spB = std::make_shared<B>(99);\n+\n+  VERIFY( spB->i == 99 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "c52aa8af65ec4848fcfffde593ffd452d7161210", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/misc/42019.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmisc%2F42019.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70826946ea1908954914bb09e27e40139f49be59/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmisc%2F42019.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fmisc%2F42019.cc?ref=70826946ea1908954914bb09e27e40139f49be59", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-fno-rtti\" }\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// TR1 2.2.2 Template class shared_ptr [tr.util.smartptr.shared]\n+\n+#include <tr1/memory>\n+\n+// libstdc++/42019\n+class A {};\n+\n+void test01()\n+{\n+  std::tr1::shared_ptr<A> spA;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}