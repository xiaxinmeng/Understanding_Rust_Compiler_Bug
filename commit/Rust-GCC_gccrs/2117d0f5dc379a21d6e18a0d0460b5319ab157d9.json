{"sha": "2117d0f5dc379a21d6e18a0d0460b5319ab157d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjExN2QwZjVkYzM3OWEyMWQ2ZTE4YTBkMDQ2MGI1MzE5YWIxNTdkOQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-03-15T23:42:55Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-03-15T23:42:55Z"}, "message": "Initial revision\n\nFrom-SVN: r9187", "tree": {"sha": "d590fc685364452956d73c3da0d8b23ebd5479c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d590fc685364452956d73c3da0d8b23ebd5479c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2117d0f5dc379a21d6e18a0d0460b5319ab157d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2117d0f5dc379a21d6e18a0d0460b5319ab157d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2117d0f5dc379a21d6e18a0d0460b5319ab157d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2117d0f5dc379a21d6e18a0d0460b5319ab157d9/comments", "author": null, "committer": null, "parents": [{"sha": "b7484fbe2bf67c98dbff6f270dbc41376c0fdbaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7484fbe2bf67c98dbff6f270dbc41376c0fdbaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7484fbe2bf67c98dbff6f270dbc41376c0fdbaf"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "43250a9ccdb1a019f51605f63e8d67e5c0291148", "filename": "gcc/libgcc1-test.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2117d0f5dc379a21d6e18a0d0460b5319ab157d9/gcc%2Flibgcc1-test.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2117d0f5dc379a21d6e18a0d0460b5319ab157d9/gcc%2Flibgcc1-test.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc1-test.c?ref=2117d0f5dc379a21d6e18a0d0460b5319ab157d9", "patch": "@@ -0,0 +1,89 @@\n+/* This small function uses all the arithmetic operators that\n+   libgcc1.c can handle.  If you can link it, then\n+   you have provided replacements for all the libgcc1.c functions that\n+   your target machine needs.  */\n+\n+int foo ();\n+double dfoo ();\n+\n+main ()\n+{\n+  int a = foo (), b = foo ();\n+  unsigned int au = foo (), bu = foo ();\n+  float af = dfoo (), bf = dfoo ();\n+  double ad = dfoo (), bd = dfoo ();\n+\n+  discard (a * b);\n+  discard (a / b);\n+  discard (a % b);\n+\n+  discard (au / bu);\n+  discard (au % bu);\n+\n+  discard (a >> b);\n+  discard (a << b);\n+\n+  discard (au >> bu);\n+  discard (au << bu);\n+\n+  ddiscard (ad + bd);\n+  ddiscard (ad - bd);\n+  ddiscard (ad * bd);\n+  ddiscard (ad / bd);\n+  ddiscard (-ad);\n+\n+  ddiscard (af + bf);\n+  ddiscard (af - bf);\n+  ddiscard (af * bf);\n+  ddiscard (af / bf);\n+  ddiscard (-af);\n+\n+  discard ((int) ad);\n+  discard ((int) af);\n+\n+  ddiscard ((double) a);\n+  ddiscard ((float) a);\n+  ddiscard ((float) ad);\n+\n+  discard (ad == bd);\n+  discard (ad < bd);\n+  discard (ad > bd);\n+  discard (ad != bd);\n+  discard (ad <= bd);\n+  discard (ad >= bd);\n+\n+  discard (af == bf);\n+  discard (af < bf);\n+  discard (af > bf);\n+  discard (af != bf);\n+  discard (af <= bf);\n+  discard (af >= bf);\n+\n+  return 0;\n+}\n+\n+discard (x)\n+     int x;\n+{}\n+\n+ddiscard (x)\n+     double x;\n+{}\n+\n+foo ()\n+{\n+  static int table[] = {20, 69, 4, 12};\n+  static int idx;\n+\n+  return table[idx++];\n+}\n+\n+double\n+dfoo ()\n+{\n+  static double table[] = {20.4, 69.96, 4.4, 202.202};\n+  static int idx;\n+\n+  return table[idx++];\n+}\n+"}]}