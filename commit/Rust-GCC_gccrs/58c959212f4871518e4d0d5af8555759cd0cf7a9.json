{"sha": "58c959212f4871518e4d0d5af8555759cd0cf7a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThjOTU5MjEyZjQ4NzE1MThlNGQwZDVhZjg1NTU3NTljZDBjZjdhOQ==", "commit": {"author": {"name": "Dhruv Matani", "email": "dhruvbird@gmx.net", "date": "2004-03-24T21:40:01Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-03-24T21:40:01Z"}, "message": "malloc_allocator.h: Fixed the construct function to call global placement new instead of assignment.\n\n\n2004-03-24  Dhruv Matani  <dhruvbird@gmx.net>\n\n\t* ext/malloc_allocator.h: Fixed the construct function to call\n\tglobal placement new instead of assignment. Added a check after\n\tthe return from malloc to check whether returned pointer is NULL,\n\tand if so, throw std::bad_alloc().\n\t* ext/debug_allocator.h: Added a check in the deallocate function\n\tto check whether the user has passed a NULL pointer or not.\n\nFrom-SVN: r79934", "tree": {"sha": "0d0ec11fccc6f462f017f07a58957ab4728af127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d0ec11fccc6f462f017f07a58957ab4728af127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58c959212f4871518e4d0d5af8555759cd0cf7a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c959212f4871518e4d0d5af8555759cd0cf7a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c959212f4871518e4d0d5af8555759cd0cf7a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c959212f4871518e4d0d5af8555759cd0cf7a9/comments", "author": null, "committer": null, "parents": [{"sha": "8367b9c1e9097b487ce56448daec7dfbcc1f09cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8367b9c1e9097b487ce56448daec7dfbcc1f09cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8367b9c1e9097b487ce56448daec7dfbcc1f09cf"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "0ab564104dcf06ee61a65f033c5b1f70ca9ecc84", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c959212f4871518e4d0d5af8555759cd0cf7a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c959212f4871518e4d0d5af8555759cd0cf7a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=58c959212f4871518e4d0d5af8555759cd0cf7a9", "patch": "@@ -1,3 +1,12 @@\n+2004-03-24  Dhruv Matani  <dhruvbird@gmx.net>\n+\n+\t* ext/malloc_allocator.h: Fixed the construct function to call\n+\tglobal placement new instead of assignment. Added a check after\n+\tthe return from malloc to check whether returned pointer is NULL,\n+\tand if so, throw std::bad_alloc().\n+\t* ext/debug_allocator.h: Added a check in the deallocate function\n+\tto check whether the user has passed a NULL pointer or not.\n+\t\n 2004-03-24  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* docs/html/20_util/allocator.html: Add bitmap_allocator links."}, {"sha": "7ea6fb42f9808d9ee996878ec1507442577345e7", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c959212f4871518e4d0d5af8555759cd0cf7a9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c959212f4871518e4d0d5af8555759cd0cf7a9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=58c959212f4871518e4d0d5af8555759cd0cf7a9", "patch": "@@ -108,7 +108,9 @@ namespace __gnu_cxx\n       void\n       deallocate(pointer __p, size_type __n)\n       {\n-        pointer __real_p = __p - _M_extra;\n+\tif (!__p)\n+\t  abort();\n+\tpointer __real_p = __p - _M_extra;\n         if (*reinterpret_cast<size_type*>(__real_p) != __n)\n           abort();\n         _M_allocator.deallocate(__real_p, __n + _M_extra);"}, {"sha": "938380c36f6e4524788e50525e9b3f58fed64193", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c959212f4871518e4d0d5af8555759cd0cf7a9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c959212f4871518e4d0d5af8555759cd0cf7a9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=58c959212f4871518e4d0d5af8555759cd0cf7a9", "patch": "@@ -78,7 +78,12 @@ namespace __gnu_cxx\n       // about what the return value is when __n == 0.\n       pointer\n       allocate(size_type __n, const void* = 0)\n-      { return static_cast<_Tp*>(malloc(__n * sizeof(_Tp))); }\n+      {\n+\tpointer __ret = static_cast<_Tp*>(malloc(__n * sizeof(_Tp)));\n+\tif (!__ret)\n+\t  throw std::bad_alloc();\n+\treturn __ret;\n+      }\n \n       // __p is not permitted to be a null pointer.\n       void\n@@ -93,7 +98,7 @@ namespace __gnu_cxx\n       // 402. wrong new expression in [some_] allocator::construct\n       void \n       construct(pointer __p, const _Tp& __val) \n-      { *__p = __val; }\n+      { ::new(__p) value_type(__val); }\n \n       void \n       destroy(pointer __p) { __p->~_Tp(); }"}]}