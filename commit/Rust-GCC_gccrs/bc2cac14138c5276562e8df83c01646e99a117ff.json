{"sha": "bc2cac14138c5276562e8df83c01646e99a117ff", "node_id": "C_kwDOANBUbNoAKGJjMmNhYzE0MTM4YzUyNzY1NjJlOGRmODNjMDE2NDZlOTlhMTE3ZmY", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-05-30T12:45:58Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-30T16:32:08Z"}, "message": "gccrs: Add missing name resolution to item statements\n\nThis fixes the issue but there are two cleanups to do at some point.\n\n  1. misc namesapce this is a scope AST namespace where we dump resolution\n     info when its not defined here. This occurs in the case such as nested\n     scopes where the nested scope is popped and we hit an assertion.\n     Outside of name resolution this requirement shouldnt really apply\n     it should be permissive to allow for this\n\n  2. We reuse our existing name resolution pieces here for Traits and impl\n     blocks we should start doing this for the other statements.\n\nFixes #2238\n\ngcc/rust/ChangeLog:\n\n\t* resolve/rust-ast-resolve-stmt.cc (ResolveStmt::visit): add name resolution\n\t* resolve/rust-ast-resolve-stmt.h: likewise\n\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): insert resolved node\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-2238.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "d176a1ae08b175fef885cd2d8b517e6ee5576b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d176a1ae08b175fef885cd2d8b517e6ee5576b8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc2cac14138c5276562e8df83c01646e99a117ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2cac14138c5276562e8df83c01646e99a117ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2cac14138c5276562e8df83c01646e99a117ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2cac14138c5276562e8df83c01646e99a117ff/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3412f6cdc6f1adee71d00cbed11faea8c5d3ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3412f6cdc6f1adee71d00cbed11faea8c5d3ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3412f6cdc6f1adee71d00cbed11faea8c5d3ef0"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "9aad08de7112b7709927c3f85c5295f02c608fea", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2cac14138c5276562e8df83c01646e99a117ff/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2cac14138c5276562e8df83c01646e99a117ff/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.cc?ref=bc2cac14138c5276562e8df83c01646e99a117ff", "patch": "@@ -16,6 +16,7 @@\n // along with GCC; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#include \"rust-ast-resolve-toplevel.h\"\n #include \"rust-ast-resolve-item.h\"\n #include \"rust-ast-resolve-stmt.h\"\n #include \"rust-ast-resolve-implitem.h\"\n@@ -35,5 +36,26 @@ ResolveStmt::visit (AST::ExternBlock &extern_block)\n     }\n }\n \n+void\n+ResolveStmt::visit (AST::Trait &trait)\n+{\n+  ResolveTopLevel::go (&trait, prefix, canonical_prefix);\n+  ResolveItem::go (&trait, prefix, canonical_prefix);\n+}\n+\n+void\n+ResolveStmt::visit (AST::InherentImpl &impl_block)\n+{\n+  ResolveTopLevel::go (&impl_block, prefix, canonical_prefix);\n+  ResolveItem::go (&impl_block, prefix, canonical_prefix);\n+}\n+\n+void\n+ResolveStmt::visit (AST::TraitImpl &impl_block)\n+{\n+  ResolveTopLevel::go (&impl_block, prefix, canonical_prefix);\n+  ResolveItem::go (&impl_block, prefix, canonical_prefix);\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "7511b226285ec3ecbc4cbe61a84975254595b553", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2cac14138c5276562e8df83c01646e99a117ff/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2cac14138c5276562e8df83c01646e99a117ff/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=bc2cac14138c5276562e8df83c01646e99a117ff", "patch": "@@ -359,6 +359,9 @@ class ResolveStmt : public ResolverBase\n   }\n \n   void visit (AST::ExternBlock &extern_block) override;\n+  void visit (AST::Trait &trait) override;\n+  void visit (AST::InherentImpl &impl_block) override;\n+  void visit (AST::TraitImpl &impl_block) override;\n \n private:\n   ResolveStmt (const CanonicalPath &prefix,"}, {"sha": "c54ee791061350c9f6277625cf900f1182220b26", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2cac14138c5276562e8df83c01646e99a117ff/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2cac14138c5276562e8df83c01646e99a117ff/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=bc2cac14138c5276562e8df83c01646e99a117ff", "patch": "@@ -1207,8 +1207,16 @@ TypeCheckExpr::visit (HIR::MethodCallExpr &expr)\n   context->insert_type (expr.get_method_name ().get_mappings (), lookup);\n \n   // set up the resolved name on the path\n-  resolver->insert_resolved_name (expr.get_mappings ().get_nodeid (),\n-\t\t\t\t  resolved_node_id);\n+  if (resolver->get_name_scope ().decl_was_declared_here (resolved_node_id))\n+    {\n+      resolver->insert_resolved_name (expr.get_mappings ().get_nodeid (),\n+\t\t\t\t      resolved_node_id);\n+    }\n+  else\n+    {\n+      resolver->insert_resolved_misc (expr.get_mappings ().get_nodeid (),\n+\t\t\t\t      resolved_node_id);\n+    }\n \n   // return the result of the function back\n   infered = function_ret_tyty;"}, {"sha": "b0c7e36ea445a16f65608e85de330e707b37b060", "filename": "gcc/testsuite/rust/compile/issue-2238.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2cac14138c5276562e8df83c01646e99a117ff/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2238.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2cac14138c5276562e8df83c01646e99a117ff/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2238.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2238.rs?ref=bc2cac14138c5276562e8df83c01646e99a117ff", "patch": "@@ -0,0 +1,15 @@\n+fn main() {\n+    struct Foo;\n+\n+    trait Bar {\n+        fn foo(&self);\n+    }\n+\n+    impl Bar for Foo {\n+        fn foo(&self) {}\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    }\n+\n+    let s = Foo;\n+    s.foo();\n+}"}]}