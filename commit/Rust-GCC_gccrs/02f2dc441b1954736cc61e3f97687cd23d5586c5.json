{"sha": "02f2dc441b1954736cc61e3f97687cd23d5586c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmMmRjNDQxYjE5NTQ3MzZjYzYxZTNmOTc2ODdjZDIzZDU1ODZjNQ==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-22T17:34:50Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-22T17:37:00Z"}, "message": "[PR99581] Define relaxed memory and use it for aarch64\n\naarch64 needs to skip memory address validation for LD1R insns.  Skipping\nthe address validation may result in LRA crash for some targets when usual\nmemory constraint is used.  This patch introduces define_relaxed_memory_constraint,\nskipping address validation for it, and defining relaxed memory for\naarch64 LD1r insn memory operand.\n\ngcc/ChangeLog:\n\n\tPR target/99581\n\t* config/aarch64/constraints.md (UtQ): Use\n\tdefine_relaxed_memory_constraint for it.\n\t* doc/md.texi (define_relaxed_memory_constraint): Describe it.\n\t* genoutput.c (main): Process DEFINE_RELAXED_MEMORY_CONSTRAINT.\n\t* genpreds.c (constraint_data): Add bitfield is_relaxed_memory.\n\t(have_relaxed_memory_constraints): New static var.\n\t(relaxed_memory_start, relaxed_memory_end): Ditto.\n\t(add_constraint): Add arg is_relaxed_memory.  Check name for\n\trelaxed memory.  Set up is_relaxed_memory in constraint_data and\n\thave_relaxed_memory_constraints.  Adjust calls.\n\t(choose_enum_order): Process relaxed memory.\n\t(write_tm_preds_h): Ditto.\n\t(main): Process DEFINE_RELAXED_MEMORY_CONSTRAINT.\n\t* gensupport.c (process_rtx): Process DEFINE_RELAXED_MEMORY_CONSTRAINT.\n\t* ira-costs.c (record_reg_classes): Process CT_RELAXED_MEMORY.\n\t* ira-lives.c (single_reg_class): Use\n\tinsn_extra_relaxed_memory_constraint.\n\t* ira.c (ira_setup_alts): CT_RELAXED_MEMORY.\n\t* lra-constraints.c (valid_address_p): Use\n\tinsn_extra_relaxed_memory_constraint instead of other memory\n\tconstraints.\n\t(process_alt_operands): Process CT_RELAXED_MEMORY.\n\t(curr_insn_transform): Use insn_extra_relaxed_memory_constraint.\n\t* recog.c (asm_operand_ok, preprocess_constraints): Process\n\tCT_RELAXED_MEMORY.\n\t* reload.c (find_reloads): Ditto.\n\t* rtl.def (DEFINE_RELAXED_MEMORY_CONSTRAINT): New.\n\t* stmt.c (parse_input_constraint): Use\n\tinsn_extra_relaxed_memory_constraint.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99581\n\t* gcc.target/powerpc/pr99581.c: New.", "tree": {"sha": "7e72432b58a588cb214052e6d4736aa0cc9d68e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e72432b58a588cb214052e6d4736aa0cc9d68e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02f2dc441b1954736cc61e3f97687cd23d5586c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f2dc441b1954736cc61e3f97687cd23d5586c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f2dc441b1954736cc61e3f97687cd23d5586c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f2dc441b1954736cc61e3f97687cd23d5586c5/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba16797fe69a0fae47355aa2c102ffac1c48c3bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba16797fe69a0fae47355aa2c102ffac1c48c3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba16797fe69a0fae47355aa2c102ffac1c48c3bd"}], "stats": {"total": 141, "additions": 102, "deletions": 39}, "files": [{"sha": "f08eea8bcaee93191661695bbcf24ad8d947394e", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -330,7 +330,7 @@\n        (match_test \"aarch64_legitimate_address_p (V2DImode,\n \t\t\t\t\t\t  XEXP (op, 0), 1)\")))\n \n-(define_memory_constraint \"UtQ\"\n+(define_relaxed_memory_constraint \"UtQ\"\n   \"@internal\n    An address valid for SVE LD1RQs.\"\n   (and (match_code \"mem\")"}, {"sha": "d166a0debedf4d8edf55c842bcf4ff4690b3e9ce", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -4564,7 +4564,33 @@ specifically aligned memory is necessary or desirable for some insn\n operand.\n \n The syntax and semantics are otherwise identical to\n-@code{define_constraint}.\n+@code{define_memory_constraint}.\n+@end deffn\n+\n+@deffn {MD Expression} define_relaxed_memory_constraint name docstring exp\n+The test expression in a @code{define_memory_constraint} can assume\n+that @code{TARGET_LEGITIMATE_ADDRESS_P} holds for the address inside\n+a @code{mem} rtx and so it does not need to test this condition itself.\n+In other words, a @code{define_memory_constraint} test of the form:\n+\n+@smallexample\n+(match_test \"mem\")\n+@end smallexample\n+\n+is enough to test whether an rtx is a @code{mem} @emph{and} whether\n+its address satisfies @code{TARGET_MEM_CONSTRAINT} (which is usually\n+@samp{'m'}).  Thus the conditions imposed by a @code{define_memory_constraint}\n+always apply on top of the conditions imposed by @code{TARGET_MEM_CONSTRAINT}.\n+\n+However, it is sometimes useful to define memory constraints that allow\n+addresses beyond those accepted by @code{TARGET_LEGITIMATE_ADDRESS_P}.\n+@code{define_relaxed_memory_constraint} exists for this case.\n+The test expression in a @code{define_relaxed_memory_constraint} is\n+applied with no preconditions, so that the expression can determine\n+``from scratch'' exactly which addresses are valid and which are not.\n+\n+The syntax and semantics are otherwise identical to\n+@code{define_memory_constraint}.\n @end deffn\n \n @deffn {MD Expression} define_address_constraint name docstring exp"}, {"sha": "25af4375d9cd49c63406b1d84b275cfe5bdc1385", "filename": "gcc/genoutput.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -1024,6 +1024,7 @@ main (int argc, const char **argv)\n       case DEFINE_ADDRESS_CONSTRAINT:\n       case DEFINE_MEMORY_CONSTRAINT:\n       case DEFINE_SPECIAL_MEMORY_CONSTRAINT:\n+      case DEFINE_RELAXED_MEMORY_CONSTRAINT:\n \tnote_constraint (&info);\n \tbreak;\n "}, {"sha": "63fac0c7d3496964545265b6756aaa0d2cc2c325", "filename": "gcc/genpreds.c", "status": "modified", "additions": 42, "deletions": 33, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -660,9 +660,9 @@ write_one_predicate_function (struct pred_data *p)\n /* Constraints fall into two categories: register constraints\n    (define_register_constraint), and others (define_constraint,\n    define_memory_constraint, define_special_memory_constraint,\n-   define_address_constraint).  We work out automatically which of the\n-   various old-style macros they correspond to, and produce\n-   appropriate code.  They all go in the same hash table so we can\n+   define_relaxed_memory_constraint, define_address_constraint).  We work out\n+   automatically which of the various old-style macros they correspond to, and\n+   produce appropriate code.  They all go in the same hash table so we can\n    verify that there are no duplicate names.  */\n \n /* All data from one constraint definition.  */\n@@ -683,6 +683,7 @@ class constraint_data\n   unsigned int is_extra\t\t: 1;\n   unsigned int is_memory\t: 1;\n   unsigned int is_special_memory: 1;\n+  unsigned int is_relaxed_memory: 1;\n   unsigned int is_address\t: 1;\n   unsigned int maybe_allows_reg : 1;\n   unsigned int maybe_allows_mem : 1;\n@@ -721,6 +722,7 @@ static unsigned int constraint_max_namelen;\n static bool have_register_constraints;\n static bool have_memory_constraints;\n static bool have_special_memory_constraints;\n+static bool have_relaxed_memory_constraints;\n static bool have_address_constraints;\n static bool have_extra_constraints;\n static bool have_const_int_constraints;\n@@ -732,6 +734,7 @@ static unsigned int satisfied_start;\n static unsigned int const_int_start, const_int_end;\n static unsigned int memory_start, memory_end;\n static unsigned int special_memory_start, special_memory_end;\n+static unsigned int relaxed_memory_start, relaxed_memory_end;\n static unsigned int address_start, address_end;\n static unsigned int maybe_allows_none_start, maybe_allows_none_end;\n static unsigned int maybe_allows_reg_start, maybe_allows_reg_end;\n@@ -756,24 +759,24 @@ mangle (const char *name)\n   return XOBFINISH (rtl_obstack, const char *);\n }\n \n-/* Add one constraint, of any sort, to the tables.  NAME is its name;\n-   REGCLASS is the register class, if any; EXP is the expression to\n-   test, if any; IS_MEMORY, IS_SPECIAL_MEMORY and IS_ADDRESS indicate\n-   memory, special memory, and address constraints, respectively; LOC\n-   is the .md file location.\n+/* Add one constraint, of any sort, to the tables.  NAME is its name; REGCLASS\n+   is the register class, if any; EXP is the expression to test, if any;\n+   IS_MEMORY, IS_SPECIAL_MEMORY, IS_RELAXED_MEMORY and IS_ADDRESS indicate\n+   memory, special memory, and address constraints, respectively; LOC is the .md\n+   file location.\n \n-   Not all combinations of arguments are valid; most importantly,\n-   REGCLASS is mutually exclusive with EXP, and\n-   IS_MEMORY/IS_SPECIAL_MEMORY/IS_ADDRESS are only meaningful for\n-   constraints with EXP.\n+   Not all combinations of arguments are valid; most importantly, REGCLASS is\n+   mutually exclusive with EXP, and\n+   IS_MEMORY/IS_SPECIAL_MEMORY/IS_RELAXED_MEMORY/IS_ADDRESS are only meaningful\n+   for constraints with EXP.\n \n    This function enforces all syntactic and semantic rules about what\n    constraints can be defined.  */\n \n static void\n add_constraint (const char *name, const char *regclass,\n \t\trtx exp, bool is_memory, bool is_special_memory,\n-\t\tbool is_address, file_location loc)\n+\t\tbool is_relaxed_memory, bool is_address, file_location loc)\n {\n   class constraint_data *c, **iter, **slot;\n   const char *p;\n@@ -873,7 +876,7 @@ add_constraint (const char *name, const char *regclass,\n \t  return;\n \t}\n \n-      if (is_memory)\n+      if (is_memory || is_special_memory || is_relaxed_memory)\n \t{\n \t  if (name[1] == '\\0')\n \t    error_at (loc, \"constraint letter '%c' cannot be a \"\n@@ -884,17 +887,6 @@ add_constraint (const char *name, const char *regclass,\n \t\t      name, name[0]);\n \t  return;\n \t}\n-      else if (is_special_memory)\n-\t{\n-\t  if (name[1] == '\\0')\n-\t    error_at (loc, \"constraint letter '%c' cannot be a \"\n-\t\t      \"special memory constraint\", name[0]);\n-\t  else\n-\t    error_at (loc, \"constraint name '%s' begins with '%c', \"\n-\t\t      \"and therefore cannot be a special memory constraint\",\n-\t\t      name, name[0]);\n-\t  return;\n-\t}\n       else if (is_address)\n \t{\n \t  if (name[1] == '\\0')\n@@ -922,6 +914,7 @@ add_constraint (const char *name, const char *regclass,\n   c->is_extra = !(regclass || is_const_int || is_const_dbl);\n   c->is_memory = is_memory;\n   c->is_special_memory = is_special_memory;\n+  c->is_relaxed_memory = is_relaxed_memory;\n   c->is_address = is_address;\n   c->maybe_allows_reg = true;\n   c->maybe_allows_mem = true;\n@@ -949,19 +942,21 @@ add_constraint (const char *name, const char *regclass,\n   have_extra_constraints |= c->is_extra;\n   have_memory_constraints |= c->is_memory;\n   have_special_memory_constraints |= c->is_special_memory;\n+  have_relaxed_memory_constraints |= c->is_relaxed_memory;\n   have_address_constraints |= c->is_address;\n   num_constraints += 1;\n }\n \n /* Process a DEFINE_CONSTRAINT, DEFINE_MEMORY_CONSTRAINT,\n-   DEFINE_SPECIAL_MEMORY_CONSTRAINT, or DEFINE_ADDRESS_CONSTRAINT\n-   expression, C.  */\n+   DEFINE_SPECIAL_MEMORY_CONSTRAINT, DEFINE_RELAXED_MEMORY_CONSTRAINT, or\n+   DEFINE_ADDRESS_CONSTRAINT expression, C.  */\n static void\n process_define_constraint (md_rtx_info *info)\n {\n   add_constraint (XSTR (info->def, 0), 0, XEXP (info->def, 2),\n \t\t  GET_CODE (info->def) == DEFINE_MEMORY_CONSTRAINT,\n \t\t  GET_CODE (info->def) == DEFINE_SPECIAL_MEMORY_CONSTRAINT,\n+\t\t  GET_CODE (info->def) == DEFINE_RELAXED_MEMORY_CONSTRAINT,\n \t\t  GET_CODE (info->def) == DEFINE_ADDRESS_CONSTRAINT,\n \t\t  info->loc);\n }\n@@ -971,7 +966,7 @@ static void\n process_define_register_constraint (md_rtx_info *info)\n {\n   add_constraint (XSTR (info->def, 0), XSTR (info->def, 1),\n-\t\t  0, false, false, false, info->loc);\n+\t\t  0, false, false, false, false, info->loc);\n }\n \n /* Put the constraints into enum order.  We want to keep constraints\n@@ -1011,6 +1006,12 @@ choose_enum_order (void)\n       enum_order[next++] = c;\n   special_memory_end = next;\n \n+  relaxed_memory_start = next;\n+  FOR_ALL_CONSTRAINTS (c)\n+    if (c->is_relaxed_memory)\n+      enum_order[next++] = c;\n+  relaxed_memory_end = next;\n+\n   address_start = next;\n   FOR_ALL_CONSTRAINTS (c)\n     if (c->is_address)\n@@ -1020,30 +1021,30 @@ choose_enum_order (void)\n   maybe_allows_none_start = next;\n   FOR_ALL_CONSTRAINTS (c)\n     if (!c->is_register && !c->is_const_int && !c->is_memory\n-\t&& !c->is_special_memory && !c->is_address\n+\t&& !c->is_special_memory && !c->is_relaxed_memory && !c->is_address\n \t&& !c->maybe_allows_reg && !c->maybe_allows_mem)\n       enum_order[next++] = c;\n   maybe_allows_none_end = next;\n \n   maybe_allows_reg_start = next;\n   FOR_ALL_CONSTRAINTS (c)\n     if (!c->is_register && !c->is_const_int && !c->is_memory\n-\t&& !c->is_special_memory && !c->is_address\n+\t&& !c->is_special_memory && !c->is_relaxed_memory && !c->is_address\n \t&& c->maybe_allows_reg && !c->maybe_allows_mem)\n       enum_order[next++] = c;\n   maybe_allows_reg_end = next;\n \n   maybe_allows_mem_start = next;\n   FOR_ALL_CONSTRAINTS (c)\n     if (!c->is_register && !c->is_const_int && !c->is_memory\n-\t&& !c->is_special_memory && !c->is_address\n+\t&& !c->is_special_memory && !c->is_relaxed_memory && !c->is_address\n \t&& !c->maybe_allows_reg && c->maybe_allows_mem)\n       enum_order[next++] = c;\n   maybe_allows_mem_end = next;\n \n   FOR_ALL_CONSTRAINTS (c)\n     if (!c->is_register && !c->is_const_int && !c->is_memory\n-\t&& !c->is_special_memory && !c->is_address\n+\t&& !c->is_special_memory && !c->is_relaxed_memory && !c->is_address\n \t&& c->maybe_allows_reg && c->maybe_allows_mem)\n       enum_order[next++] = c;\n   gcc_assert (next == num_constraints);\n@@ -1466,6 +1467,8 @@ write_tm_preds_h (void)\n \t\t\t    memory_start, memory_end);\n       write_range_function (\"insn_extra_special_memory_constraint\",\n \t\t\t    special_memory_start, special_memory_end);\n+      write_range_function (\"insn_extra_relaxed_memory_constraint\",\n+\t\t\t    relaxed_memory_start, relaxed_memory_end);\n       write_range_function (\"insn_extra_address_constraint\",\n \t\t\t    address_start, address_end);\n       write_allows_reg_mem_function ();\n@@ -1515,6 +1518,7 @@ write_tm_preds_h (void)\n \t    \"  CT_CONST_INT,\\n\"\n \t    \"  CT_MEMORY,\\n\"\n \t    \"  CT_SPECIAL_MEMORY,\\n\"\n+\t    \"  CT_RELAXED_MEMORY,\\n\"\n \t    \"  CT_ADDRESS,\\n\"\n \t    \"  CT_FIXED_FORM\\n\"\n \t    \"};\\n\"\n@@ -1528,7 +1532,11 @@ write_tm_preds_h (void)\n       if (memory_start != memory_end)\n \tvalues.safe_push (std::make_pair (memory_start, \"CT_MEMORY\"));\n       if (special_memory_start != special_memory_end)\n-\tvalues.safe_push (std::make_pair (special_memory_start, \"CT_SPECIAL_MEMORY\"));\n+\tvalues.safe_push (std::make_pair (special_memory_start,\n+\t\t\t\t\t  \"CT_SPECIAL_MEMORY\"));\n+      if (relaxed_memory_start != relaxed_memory_end)\n+\tvalues.safe_push (std::make_pair (relaxed_memory_start,\n+\t\t\t\t\t  \"CT_RELAXED_MEMORY\"));\n       if (address_start != address_end)\n \tvalues.safe_push (std::make_pair (address_start, \"CT_ADDRESS\"));\n       if (address_end != num_constraints)\n@@ -1645,6 +1653,7 @@ main (int argc, const char **argv)\n       case DEFINE_CONSTRAINT:\n       case DEFINE_MEMORY_CONSTRAINT:\n       case DEFINE_SPECIAL_MEMORY_CONSTRAINT:\n+      case DEFINE_RELAXED_MEMORY_CONSTRAINT:\n       case DEFINE_ADDRESS_CONSTRAINT:\n \tprocess_define_constraint (&info);\n \tbreak;"}, {"sha": "0f19bd7066466b3ccdf06d0cacb40ead55cb8a9c", "filename": "gcc/gensupport.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -582,6 +582,7 @@ process_rtx (rtx desc, file_location loc)\n     case DEFINE_REGISTER_CONSTRAINT:\n     case DEFINE_MEMORY_CONSTRAINT:\n     case DEFINE_SPECIAL_MEMORY_CONSTRAINT:\n+    case DEFINE_RELAXED_MEMORY_CONSTRAINT:\n     case DEFINE_ADDRESS_CONSTRAINT:\n       queue_pattern (desc, &define_pred_tail, loc);\n       break;"}, {"sha": "7547f3e0f535d2ec4c2b72a527b3627e6a00884b", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -780,6 +780,7 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t      break;\n \n \t\t    case CT_SPECIAL_MEMORY:\n+\t\t    case CT_RELAXED_MEMORY:\n \t\t      insn_allows_mem[i] = allows_mem[i] = 1;\n \t\t      if (MEM_P (extract_mem_from_operand (op))\n \t\t\t  && constraint_satisfied_p (op, cn))"}, {"sha": "bd1818bb25593c3bd11a802f27b0f2c21200d65c", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -872,6 +872,7 @@ single_reg_class (const char *constraints, rtx op, rtx equiv_const)\n \t    cn = lookup_constraint (constraints);\n \t    if (insn_extra_memory_constraint (cn)\n \t\t|| insn_extra_special_memory_constraint (cn)\n+\t\t|| insn_extra_relaxed_memory_constraint (cn)\n \t\t|| insn_extra_address_constraint (cn))\n \t      return NO_REGS;\n \t    if (constraint_satisfied_p (op, cn)"}, {"sha": "7e903289e79057fcfd468bc5863d66e9ce52ec84", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -1874,6 +1874,7 @@ ira_setup_alts (rtx_insn *insn)\n \t\t\t  mem = op;\n \t\t\t  /* Fall through.  */\n \t\t\tcase CT_SPECIAL_MEMORY:\n+\t\t\tcase CT_RELAXED_MEMORY:\n \t\t\t  if (!mem)\n \t\t\t    mem = extract_mem_from_operand (op);\n \t\t\t  if (MEM_P (mem))"}, {"sha": "861b5aad40b5120e69d39d7ccbf6d0954a1fb4bd", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -410,8 +410,7 @@ valid_address_p (rtx op, struct address_info *ad,\n      Need to extract memory from op for special memory constraint,\n      i.e. bcst_mem_operand in i386 backend.  */\n   if (MEM_P (extract_mem_from_operand (op))\n-      && (insn_extra_memory_constraint (constraint)\n-\t  || insn_extra_special_memory_constraint (constraint))\n+      && insn_extra_relaxed_memory_constraint (constraint)\n       && constraint_satisfied_p (op, constraint))\n     return true;\n \n@@ -2460,6 +2459,7 @@ process_alt_operands (int only_alternative)\n \t\t      break;\n \n \t\t    case CT_SPECIAL_MEMORY:\n+\t\t    case CT_RELAXED_MEMORY:\n \t\t      if (satisfies_memory_constraint_p (op, cn))\n \t\t\twin = true;\n \t\t      else if (spilled_pseudo_p (op))\n@@ -4370,7 +4370,8 @@ curr_insn_transform (bool check_only_p)\n \t      {\n \t\tenum constraint_num cn = lookup_constraint (constraint);\n \t\tif ((insn_extra_memory_constraint (cn)\n-\t\t     || insn_extra_special_memory_constraint (cn))\n+\t\t     || insn_extra_special_memory_constraint (cn)\n+\t\t     || insn_extra_relaxed_memory_constraint (cn))\n \t\t    && satisfies_memory_constraint_p (tem, cn))\n \t\t  break;\n \t      }"}, {"sha": "ee143bc761e5116e9544522cd4d90a45a309f829", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -2270,6 +2270,7 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \t      mem = op;\n \t      /* Fall through.  */\n \t    case CT_SPECIAL_MEMORY:\n+\t    case CT_RELAXED_MEMORY:\n \t      /* Every memory operand can be reloaded to fit.  */\n \t      if (!mem)\n \t\tmem = extract_mem_from_operand (op);\n@@ -2892,6 +2893,7 @@ preprocess_constraints (int n_operands, int n_alternatives,\n \n \t\t    case CT_MEMORY:\n \t\t    case CT_SPECIAL_MEMORY:\n+\t\t    case CT_RELAXED_MEMORY:\n \t\t      op_alt[i].memory_ok = 1;\n \t\t      break;\n "}, {"sha": "7340125c441e037db504ce05ddaaf2907d2b60ad", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -3504,6 +3504,7 @@ find_reloads (rtx_insn *insn, int replace, int ind_levels, int live_known,\n \t\t\tbreak;\n \n \t\t      case CT_SPECIAL_MEMORY:\n+\t\t      case CT_RELAXED_MEMORY:\n \t\t\tif (force_reload)\n \t\t\t  break;\n \t\t\tif (constraint_satisfied_p (operand, cn))"}, {"sha": "b85eb5c00557154445f345c67cb056f855d26107", "filename": "gcc/rtl.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -1055,6 +1055,7 @@ DEF_RTL_EXPR(DEFINE_REGISTER_CONSTRAINT, \"define_register_constraint\", \"sss\", RT\n DEF_RTL_EXPR(DEFINE_CONSTRAINT, \"define_constraint\", \"sse\", RTX_EXTRA)\n DEF_RTL_EXPR(DEFINE_MEMORY_CONSTRAINT, \"define_memory_constraint\", \"sse\", RTX_EXTRA)\n DEF_RTL_EXPR(DEFINE_SPECIAL_MEMORY_CONSTRAINT, \"define_special_memory_constraint\", \"sse\", RTX_EXTRA)\n+DEF_RTL_EXPR(DEFINE_RELAXED_MEMORY_CONSTRAINT, \"define_relaxed_memory_constraint\", \"sse\", RTX_EXTRA)\n DEF_RTL_EXPR(DEFINE_ADDRESS_CONSTRAINT, \"define_address_constraint\", \"sse\", RTX_EXTRA)\n \n "}, {"sha": "297e0d0ff5d4c246f7f1cc989c47b59059560926", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -419,7 +419,8 @@ parse_input_constraint (const char **constraint_p, int input_num,\n \t    || insn_extra_address_constraint (cn))\n \t  *allows_reg = true;\n \telse if (insn_extra_memory_constraint (cn)\n-\t\t || insn_extra_special_memory_constraint (cn))\n+\t\t || insn_extra_special_memory_constraint (cn)\n+\t\t || insn_extra_relaxed_memory_constraint (cn))\n \t  *allows_mem = true;\n \telse\n \t  insn_extra_constraint_allows_reg_mem (cn, allows_reg, allows_mem);"}, {"sha": "525f2762773d9e8500ff74f045f83dde1c071805", "filename": "gcc/testsuite/gcc.target/powerpc/pr99581.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99581.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f2dc441b1954736cc61e3f97687cd23d5586c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99581.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99581.c?ref=02f2dc441b1954736cc61e3f97687cd23d5586c5", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+char e[37540];\n+struct A { int c; } d;\n+\n+void\n+bar (int n)\n+{\n+  __asm__(\"\" : : \"r\" (e));\n+}\n+\n+void\n+foo (void)\n+{\n+  __asm__(\"stw %1, %0\" : \"=o\" (d.c) : \"r\" (0));\n+}"}]}