{"sha": "312af83702d437edfca82e98fb7ee31bbfd3c7de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyYWY4MzcwMmQ0MzdlZGZjYTgyZTk4ZmI3ZWUzMWJiZmQzYzdkZQ==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2002-10-22T09:35:10Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2002-10-22T09:35:10Z"}, "message": "numeric_limits.cc (test_extrema<long double>): Remove specialization for FreeBSD systems.\n\n\t* testsuite/18_support/numeric_limits.cc (test_extrema<long double>):\n\tRemove specialization for FreeBSD systems.\n\nFrom-SVN: r58409", "tree": {"sha": "edbe024a71457795f1334045ad982796becb7368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edbe024a71457795f1334045ad982796becb7368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/312af83702d437edfca82e98fb7ee31bbfd3c7de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312af83702d437edfca82e98fb7ee31bbfd3c7de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312af83702d437edfca82e98fb7ee31bbfd3c7de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312af83702d437edfca82e98fb7ee31bbfd3c7de/comments", "author": null, "committer": null, "parents": [{"sha": "8fe734a3fed78612103e1821e70871b0250c764e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe734a3fed78612103e1821e70871b0250c764e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fe734a3fed78612103e1821e70871b0250c764e"}], "stats": {"total": 33, "additions": 5, "deletions": 28}, "files": [{"sha": "7021bae05667ec76b01f259be57c37a44692d93b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312af83702d437edfca82e98fb7ee31bbfd3c7de/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312af83702d437edfca82e98fb7ee31bbfd3c7de/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=312af83702d437edfca82e98fb7ee31bbfd3c7de", "patch": "@@ -1,3 +1,8 @@\n+2002-10-22  Loren J. Rittle  <ljrittle@acm.org>\n+\n+\t* testsuite/18_support/numeric_limits.cc (test_extrema<long double>):\n+\tRemove specialization for FreeBSD systems.\n+\n 2002-10-18  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* configure.target (freebsd*): Use abi_baseline_triplet."}, {"sha": "4a1c498bb2dc80a0fbfe79b6ed8110cd21b23137", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits.cc", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312af83702d437edfca82e98fb7ee31bbfd3c7de/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312af83702d437edfca82e98fb7ee31bbfd3c7de/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc?ref=312af83702d437edfca82e98fb7ee31bbfd3c7de", "patch": "@@ -71,34 +71,6 @@ void test_extrema()\n   VERIFY( extrema_max == limits_max );\n }\n \n-#ifdef __FreeBSD__\n-// This specialization allows the extra precision unmentioned in\n-// system headers yet supported by long double on FreeBSD or Solaris\n-// to not cause a gratuitous FAIL for the entire test.  Using this\n-// technique to compare the residual against epsilon ensures that any\n-// major breakage will still be detected (although obviously not as\n-// tight as the exact equality check that would have been generated by\n-// default).  This replacement test is allowable by the fact that C++\n-// limits should match the system provided limits for C even if they\n-// were wrong verses the actual FP hardware.\n-template<>\n-void test_extrema<long double>()\n-{\n-  typedef long double T;\n-  bool test = true;\n-  T limits_min = std::numeric_limits<T>::min();\n-  T limits_max = std::numeric_limits<T>::max();\n-  T extrema_min = extrema<T>::min;\n-  T extrema_max = extrema<T>::max;\n-  T epsilon = std::numeric_limits<T>::epsilon();\n-\n-  VERIFY( (extrema_min - limits_min) < epsilon );\n-  VERIFY( (limits_min - extrema_min) < epsilon );\n-  VERIFY( (extrema_max / limits_max) < (1 + epsilon) );\n-  VERIFY( (limits_max / extrema_max) < (1 + epsilon) );\n-}\n-#endif\n-\n template<typename T>\n void test_epsilon()\n {"}]}