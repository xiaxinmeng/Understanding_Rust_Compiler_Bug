{"sha": "2f76571e54dc5e8cce9acacca3bcc78acb3dacac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3NjU3MWU1NGRjNWU4Y2NlOWFjYWNjYTNiY2M3OGFjYjNkYWNhYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-03-06T00:44:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-03-06T00:44:11Z"}, "message": "re PR ada/35186 (implicit assumption about alignment of DImode)\n\n\tPR ada/35186\n\t* decl.c (maybe_pad_type): Avoid padding an integral type when\n\tbumping its alignment is sufficient.\n\nFrom-SVN: r132963", "tree": {"sha": "4ca9ac28636c3b828f67acccd92d4de2ce9d47d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ca9ac28636c3b828f67acccd92d4de2ce9d47d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f76571e54dc5e8cce9acacca3bcc78acb3dacac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f76571e54dc5e8cce9acacca3bcc78acb3dacac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f76571e54dc5e8cce9acacca3bcc78acb3dacac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f76571e54dc5e8cce9acacca3bcc78acb3dacac/comments", "author": null, "committer": null, "parents": [{"sha": "ca9052ce17c72129b59e1e17d790a3e08737f82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9052ce17c72129b59e1e17d790a3e08737f82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca9052ce17c72129b59e1e17d790a3e08737f82e"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "a67aae4019fc3c511891e5e07a957be5f4ab1779", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f76571e54dc5e8cce9acacca3bcc78acb3dacac/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f76571e54dc5e8cce9acacca3bcc78acb3dacac/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2f76571e54dc5e8cce9acacca3bcc78acb3dacac", "patch": "@@ -1,3 +1,9 @@\n+2008-03-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/35186\n+\t* decl.c (maybe_pad_type): Avoid padding an integral type when\n+\tbumping its alignment is sufficient.\n+\n 2008-03-02  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* gnatfind.adb, gnatxref.adb: Fix argument parsing typos."}, {"sha": "237d1a4a282c400ae84da751dbc63c919659bd64", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f76571e54dc5e8cce9acacca3bcc78acb3dacac/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f76571e54dc5e8cce9acacca3bcc78acb3dacac/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=2f76571e54dc5e8cce9acacca3bcc78acb3dacac", "patch": "@@ -5301,7 +5301,6 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n      off the padding, since we will either be returning the inner type\n      or repadding it.  If no size or alignment is specified, use that of\n      the original padded type.  */\n-\n   if (TREE_CODE (type) == RECORD_TYPE && TYPE_IS_PADDING_P (type))\n     {\n       if ((!size\n@@ -5326,7 +5325,6 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n      is not done here (and is only valid for bitfields anyway), show the size\n      isn't changing.  Likewise, clear the alignment if it isn't being\n      changed.  Then return if we aren't doing anything.  */\n-\n   if (size\n       && (operand_equal_p (size, orig_size, 0)\n \t  || (TREE_CODE (orig_size) == INTEGER_CST\n@@ -5339,6 +5337,19 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n   if (align == 0 && !size)\n     return type;\n \n+  /* If no size is specified and we have an integral type, and changing\n+     the alignment won't change its size, return a copy of the type\n+     with the specified alignment.  */\n+  if (!size\n+      && INTEGRAL_TYPE_P (type)\n+      && host_integerp (orig_size, 1)\n+      && (TREE_INT_CST_LOW (orig_size) % align) == 0)\n+    {\n+      type = copy_type (type);\n+      TYPE_ALIGN (type) = align;\n+      return type;\n+    }\n+\n   /* We used to modify the record in place in some cases, but that could\n      generate incorrect debugging information.  So make a new record\n      type and name.  */"}, {"sha": "cad174bba28f622518d184a3524ede93005f1eca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f76571e54dc5e8cce9acacca3bcc78acb3dacac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f76571e54dc5e8cce9acacca3bcc78acb3dacac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f76571e54dc5e8cce9acacca3bcc78acb3dacac", "patch": "@@ -1,3 +1,7 @@\n+2008-03-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/pack33.ads: New test.\n+\n 2008-03-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/35472"}, {"sha": "d5255aa4431b03dfb9e668251525eb77a1610225", "filename": "gcc/testsuite/gnat.dg/specs/pack33.ads", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f76571e54dc5e8cce9acacca3bcc78acb3dacac/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack33.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f76571e54dc5e8cce9acacca3bcc78acb3dacac/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack33.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack33.ads?ref=2f76571e54dc5e8cce9acacca3bcc78acb3dacac", "patch": "@@ -0,0 +1,27 @@\n+-- { dg-do compile }\n+\n+package Pack33 is\n+\n+   Bits : constant := 33;\n+\n+   type Bits_33 is mod 2 ** Bits;\n+   for Bits_33'Size use Bits;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_33;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+end Pack33;"}]}