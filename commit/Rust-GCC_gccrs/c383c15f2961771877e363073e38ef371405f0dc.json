{"sha": "c383c15f2961771877e363073e38ef371405f0dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM4M2MxNWYyOTYxNzcxODc3ZTM2MzA3M2UzOGVmMzcxNDA1ZjBkYw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-09-10T19:01:04Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-09-10T19:01:04Z"}, "message": "final.c (output_asm_insn): Use strtoul instead of atoi, save a loop.\n\n\t* final.c (output_asm_insn): Use strtoul instead of atoi, save a\n\tloop.\n\nFrom-SVN: r87316", "tree": {"sha": "d2725cf5eb7f64356f71e827157bd7a30edac841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2725cf5eb7f64356f71e827157bd7a30edac841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c383c15f2961771877e363073e38ef371405f0dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c383c15f2961771877e363073e38ef371405f0dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c383c15f2961771877e363073e38ef371405f0dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c383c15f2961771877e363073e38ef371405f0dc/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1adaa117728eb44d11776c676448d84b0a5c3111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1adaa117728eb44d11776c676448d84b0a5c3111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1adaa117728eb44d11776c676448d84b0a5c3111"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "172adf37d86fc857831e4163f4a94abcaa7eac73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c383c15f2961771877e363073e38ef371405f0dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c383c15f2961771877e363073e38ef371405f0dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c383c15f2961771877e363073e38ef371405f0dc", "patch": "@@ -1,5 +1,8 @@\n 2004-09-10  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* final.c (output_asm_insn): Use strtoul instead of atoi, save a\n+\tloop.\n+\n \t* config/darwin.c: Include target.h.\n \t(struct machopic_indirection): Make ptr_name a string.\n \t(machopic_indirection_hash): Update for ptr_name a string."}, {"sha": "39214c3a427cc9c930513d6d7d4f118d7e033bea", "filename": "gcc/final.c", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c383c15f2961771877e363073e38ef371405f0dc/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c383c15f2961771877e363073e38ef371405f0dc/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c383c15f2961771877e363073e38ef371405f0dc", "patch": "@@ -3084,61 +3084,66 @@ output_asm_insn (const char *template, rtx *operands)\n \telse if (ISALPHA (*p))\n \t  {\n \t    int letter = *p++;\n-\t    c = atoi (p);\n-\n-\t    if (! ISDIGIT (*p))\n-\t      output_operand_lossage (\"operand number missing after %%-letter\");\n-\t    else if (this_is_asm_operands\n-\t\t     && (c < 0 || (unsigned int) c >= insn_noperands))\n+\t    unsigned long opnum;\n+\t    char *endptr;\n+\t    \n+\t    opnum = strtoul (p, &endptr, 10);\n+\n+\t    if (endptr == p)\n+\t      output_operand_lossage (\"operand number missing \"\n+\t\t\t\t      \"after %%-letter\");\n+\t    else if (this_is_asm_operands && opnum >= insn_noperands)\n \t      output_operand_lossage (\"operand number out of range\");\n \t    else if (letter == 'l')\n-\t      output_asm_label (operands[c]);\n+\t      output_asm_label (operands[opnum]);\n \t    else if (letter == 'a')\n-\t      output_address (operands[c]);\n+\t      output_address (operands[opnum]);\n \t    else if (letter == 'c')\n \t      {\n-\t\tif (CONSTANT_ADDRESS_P (operands[c]))\n-\t\t  output_addr_const (asm_out_file, operands[c]);\n+\t\tif (CONSTANT_ADDRESS_P (operands[opnum]))\n+\t\t  output_addr_const (asm_out_file, operands[opnum]);\n \t\telse\n-\t\t  output_operand (operands[c], 'c');\n+\t\t  output_operand (operands[opnum], 'c');\n \t      }\n \t    else if (letter == 'n')\n \t      {\n-\t\tif (GET_CODE (operands[c]) == CONST_INT)\n+\t\tif (GET_CODE (operands[opnum]) == CONST_INT)\n \t\t  fprintf (asm_out_file, HOST_WIDE_INT_PRINT_DEC,\n-\t\t\t   - INTVAL (operands[c]));\n+\t\t\t   - INTVAL (operands[opnum]));\n \t\telse\n \t\t  {\n \t\t    putc ('-', asm_out_file);\n-\t\t    output_addr_const (asm_out_file, operands[c]);\n+\t\t    output_addr_const (asm_out_file, operands[opnum]);\n \t\t  }\n \t      }\n \t    else\n-\t      output_operand (operands[c], letter);\n+\t      output_operand (operands[opnum], letter);\n \n-\t    if (!opoutput[c])\n+\t    if (!opoutput[opnum])\n \t      oporder[ops++] = c;\n-\t    opoutput[c] = 1;\n+\t    opoutput[opnum] = 1;\n \n-\t    while (ISDIGIT (c = *p))\n-\t      p++;\n+\t    p = endptr;\n+\t    c = *p;\n \t  }\n \t/* % followed by a digit outputs an operand the default way.  */\n \telse if (ISDIGIT (*p))\n \t  {\n-\t    c = atoi (p);\n-\t    if (this_is_asm_operands\n-\t\t&& (c < 0 || (unsigned int) c >= insn_noperands))\n+\t    unsigned long opnum;\n+\t    char *endptr;\n+\t    \n+\t    opnum = strtoul (p, &endptr, 10);\n+\t    if (this_is_asm_operands && opnum >= insn_noperands)\n \t      output_operand_lossage (\"operand number out of range\");\n \t    else\n-\t      output_operand (operands[c], 0);\n+\t      output_operand (operands[opnum], 0);\n \n-\t    if (!opoutput[c])\n+\t    if (!opoutput[opnum])\n \t      oporder[ops++] = c;\n-\t    opoutput[c] = 1;\n+\t    opoutput[opnum] = 1;\n \n-\t    while (ISDIGIT (c = *p))\n-\t      p++;\n+\t    p = endptr;\n+\t    c = *p;\n \t  }\n \t/* % followed by punctuation: output something for that\n \t   punctuation character alone, with no operand."}]}