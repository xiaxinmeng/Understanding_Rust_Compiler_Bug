{"sha": "c3eebffbac077d5e5d5a0dbb1b9ff02ba568b77e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNlZWJmZmJhYzA3N2Q1ZTVkNWEwZGJiMWI5ZmYwMmJhNTY4Yjc3ZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-12-31T22:27:02Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-12-31T22:27:02Z"}, "message": "(CPP_SPEC, CC1_SPEC, ASM_SPEC, LINK_SPEC,\n\nTARGET_SWITCHES): Delete support for non-existent CPU variations.\n(ASM_SPEC, LINK_SPEC, TARGET_SWITCHES): Add support for -mlink-relax.\n(SELECT_CC_MODE): Correct typo.\n\nFrom-SVN: r3028", "tree": {"sha": "407f26f6f6155bd353f5ba80ce4bec345b5e398a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/407f26f6f6155bd353f5ba80ce4bec345b5e398a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3eebffbac077d5e5d5a0dbb1b9ff02ba568b77e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3eebffbac077d5e5d5a0dbb1b9ff02ba568b77e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3eebffbac077d5e5d5a0dbb1b9ff02ba568b77e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3eebffbac077d5e5d5a0dbb1b9ff02ba568b77e/comments", "author": null, "committer": null, "parents": [{"sha": "e601abce765f2da080c862bddda1bfa767a35723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e601abce765f2da080c862bddda1bfa767a35723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e601abce765f2da080c862bddda1bfa767a35723"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "4d34b89ea8bc2e32770f4b7dca0d7d64f1f95549", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3eebffbac077d5e5d5a0dbb1b9ff02ba568b77e/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3eebffbac077d5e5d5a0dbb1b9ff02ba568b77e/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=c3eebffbac077d5e5d5a0dbb1b9ff02ba568b77e", "patch": "@@ -28,24 +28,21 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* Name to predefine in the preprocessor for processor variations.  */\n #define\tCPP_SPEC \"%{mic*:-D__i960\\\n-\t\t\t%{mka:-D__i960KA}%{mkb:-D__i960KB}%{mkc:-D__i960KC}\\\n-\t\t\t%{msa:-D__i960SA}%{msb:-D__i960SB}%{msc:-D__i960SC}\\\n+\t\t\t%{mka:-D__i960KA}%{mkb:-D__i960KB}\\\n+\t\t\t%{msa:-D__i960SA}%{msb:-D__i960SB}\\\n \t\t\t%{mmc:-D__i960MC}\\\n-\t\t\t%{mca:-D__i960CA}%{mcb:-D__i960CB}%{mcc:-D__i960CC}\\\n+\t\t\t%{mca:-D__i960CA}%{mcc:-D__i960CC}\\\n \t\t\t%{mcf:-D__i960CF}}\\\n \t%{mka:-D__i960KA__ -D__i960_KA__}\\\n \t%{mkb:-D__i960KB__ -D__i960_KB__}\\\n-\t%{mkc:-D__i960KC__ -D__i960_KC__}\\\n \t%{msa:-D__i960SA__ -D__i960_SA__}\\\n \t%{msb:-D__i960SB__ -D__i960_SB__}\\\n-\t%{msc:-D__i960SC__ -D__i960_SC__}\\\n \t%{mmc:-D__i960MC__ -D__i960_MC__}\\\n \t%{mca:-D__i960CA__ -D__i960_CA__}\\\n-\t%{mcb:-D__i960CB__ -D__i960_CB__}\\\n \t%{mcc:-D__i960CC__ -D__i960_CC__}\\\n \t%{mcf:-D__i960CF__ -D__i960_CF__}\\\n-\t%{!mka:%{!mkb:%{!mkc:%{!msa:%{!msb:%{!msc:%{!mmc:%{!mca:%{!mcb:\\\n-\t\t%{!mcc:%{!mcf:-D__i960_KB -D__i960KB__ %{mic*:-D__i960KB}}}}}}}}}}}}\"\n+\t%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:\\\n+\t\t%{!mcc:%{!mcf:-D__i960_KB -D__i960KB__ %{mic*:-D__i960KB}}}}}}}}}\"\n \n /* -mic* options make characters signed by default.  */\n #define SIGNED_CHAR_SPEC  \\\n@@ -54,8 +51,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* Specs for the compiler, to handle processor variations.  */\n #define CC1_SPEC \\\n-\t\"%{!mka:%{!mkb:%{!mkc:%{!msa:%{!msb:%{!msc:%{!mmc:%{!mca:%{!mcb:\\\n-\t\t%{!mcc:%{!mcf:-mkb}}}}}}}}}}}\\\n+\t\"%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:%{!mcc:%{!mcf:-mkb}}}}}}}}\\\n \t%{mbout:%{g*:-gstabs}}\\\n \t%{mcoff:%{g*:-gcoff}}\\\n \t%{!mbout:%{!mcoff:%{g*:-gstabs}}}\"\n@@ -64,20 +60,20 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    For compatibility with Intel's gnu960 tool chain, pass -A options to\n    the assembler.  */\n #define ASM_SPEC \\\n-\t\"%{mka:-AKA}%{mkb:-AKB}%{mkc:-AKC}%{msa:-ASA}%{msb:-ASB}\\\n-\t%{msc:-ASC}%{mmc:-AMC}%{mca:-ACA}%{mcb:-ACB}%{mcc:-ACC}%{mcf:-ACF}\\\n-\t%{!mka:%{!mkb:%{!mkc:%{!msa:%{!msb:%{!msc:%{!mmc:%{!mca:%{!mcb:\\\n-\t\t%{!mcc:%{!mcf:-AKB}}}}}}}}}}}\"\n+\t\"%{mka:-AKA}%{mkb:-AKB}%{msa:-ASA}%{msb:-ASB}\\\n+\t%{mmc:-AMC}%{mca:-ACA}%{mcc:-ACC}%{mcf:-ACF}\\\n+\t%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:%{!mcc:%{!mcf:-AKB}}}}}}}}\\\n+\t%{mlink-relax:-link-relax}\"\n \n /* Specs for the linker, to handle processor variations.\n    For compatibility with Intel's gnu960 tool chain, pass -F and -A options\n    to the linker.  */\n #define LINK_SPEC \\\n-\t\"%{mka:-AKA}%{mkb:-AKB}%{mkc:-AKC}%{msa:-ASA}%{msb:-ASB}\\\n-\t%{msc:-ASC}%{mmc:-AMC}%{mca:-ACA}%{mcb:-ACB}%{mcc:-ACC}%{mcf:-ACF}\\\n-\t%{!mka:%{!mkb:%{!mkc:%{!msa:%{!msb:%{!msc:%{!mmc:%{!mca:%{!mcb:\\\n-\t\t%{!mcc:%{!mcf:-AKB}}}}}}}}}}}\\\n-\t%{mbout:-Fbout}%{mcoff:-Fcoff}\"\n+\t\"%{mka:-AKA}%{mkb:-AKB}%{msa:-ASA}%{msb:-ASB}\\\n+\t%{mmc:-AMC}%{mca:-ACA}%{mcc:-ACC}%{mcf:-ACF}\\\n+\t%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:%{!mcc:%{!mcf:-AKB}}}}}}}}\\\n+\t%{mbout:-Fbout}%{mcoff:-Fcoff}\\\n+\t%{mlink-relax:-relax}\"\n \n /* Specs for the libraries to link with, to handle processor variations.\n    Compatible with Intel's gnu960 tool chain.  */\n@@ -208,22 +204,22 @@ extern int target_flags;\n   { {\"sa\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR)},\\\n     {\"sb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES| \\\n \t\t\tTARGET_FLAG_COMPLEX_ADDR)},\\\n-    {\"sc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n-\t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR)},\\\n+/*  {\"sc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n+\t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR)},*/ \\\n     {\"ka\", (TARGET_FLAG_K_SERIES|TARGET_FLAG_COMPLEX_ADDR)},\\\n     {\"kb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_K_SERIES| \\\n \t\t\tTARGET_FLAG_COMPLEX_ADDR)},\\\n-    {\"kc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n-\t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR)},\\\n+/*  {\"kc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n+\t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR)},*/ \\\n     {\"mc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n \t\t\tTARGET_FLAG_MC|TARGET_FLAG_COMPLEX_ADDR)},\\\n     {\"ca\", (TARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\\\n \t\t\tTARGET_FLAG_CODE_ALIGN|TARGET_FLAG_COMPLEX_ADDR)},\\\n-    {\"cb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_C_SERIES|\\\n+/*  {\"cb\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_C_SERIES|\\\n \t\t\tTARGET_FLAG_BRANCH_PREDICT|TARGET_FLAG_CODE_ALIGN)},\\\n     {\"cc\", (TARGET_FLAG_NUMERICS|TARGET_FLAG_PROTECTED|\\\n \t\t\tTARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\\\n-\t\t\tTARGET_FLAG_CODE_ALIGN)},\t\\\n+\t\t\tTARGET_FLAG_CODE_ALIGN)}, */\t\\\n     {\"cf\", (TARGET_FLAG_C_SERIES|TARGET_FLAG_BRANCH_PREDICT|\\\n \t\t\tTARGET_FLAG_CODE_ALIGN|TARGET_FLAG_COMPLEX_ADDR)},\\\n     {\"numerics\", (TARGET_FLAG_NUMERICS)},\t\t\\\n@@ -247,6 +243,8 @@ extern int target_flags;\n     {\"no-strict-align\", -(TARGET_FLAG_STRICT_ALIGN)},\t\\\n     {\"old-align\", TARGET_FLAG_OLD_ALIGN},\t\t\\\n     {\"no-old-align\", -(TARGET_FLAG_OLD_ALIGN)},\t\t\\\n+    {\"link-relax\", 0},\t\t\t\t\t\\\n+    {\"no-link-relax\", 0},\t\t\t\t\\\n     { \"\", TARGET_DEFAULT}}\n \n /* Override conflicting target switch options.\n@@ -307,7 +305,7 @@ extern int target_flags;\n    numbered.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Number of bits in an addressible storage unit.  */\n+/* Number of bits in an addressable storage unit.  */\n #define BITS_PER_UNIT 8\n \n /* Bitfields cannot cross word boundaries.  */\n@@ -1092,7 +1090,7 @@ extern struct rtx_def *gen_compare_reg ();\n    should be used.  CC_NOOVmode should be used when the first operand is a\n    PLUS, MINUS, or NEG.  CCmode should be used when no special processing is\n    needed.  */\n-#define SELECT_CC_MODE(OP,X,Y) select_cc_mode (OP, X,Y)\n+#define SELECT_CC_MODE(OP,X,Y) select_cc_mode (OP, X)\n \n /* A function address in a call instruction is a byte address\n    (for indexing purposes) so give the MEM rtx a byte's mode.  */"}]}