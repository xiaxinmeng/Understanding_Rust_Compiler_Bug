{"sha": "4099d6501e3526ca8d1d01e904f42b83c6824674", "node_id": "C_kwDOANBUbNoAKDQwOTlkNjUwMWUzNTI2Y2E4ZDFkMDFlOTA0ZjQyYjgzYzY4MjQ2NzQ", "commit": {"author": {"name": "Frederic Konrad", "email": "konrad@adacore.com", "date": "2020-11-05T10:34:57Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2021-12-13T18:03:03Z"}, "message": "Tigthen libc_internal and crtstuff for VxWorks shared objects\n\nThis change tightens and documents the use of libc_internal, then\nstrengthens the VxWorks crtstuff objects for the support of shared\nlibraries. In particular:\n\n- Define __dso_handle, which libstdc++.so requires,\n\n- Provide _init and _fini functions to run through the init/fini arrays\n  for shared libs in configurations which HAVE_INITFINI_ARRAY_SUPPORT.\n\nThe init/fini functions are provided by libc_internal.a for static links\nbut with slightly different names and we don't want to risk dragging other\nlibc_internal contents in the closure accidentally so make sure we don't\nlink with it.\n\nAs for the !vxworks crtstuff, the new shared libs specific bits are\nconditioned by a CRTSTUFFS_O macro, for which we provide new Makefile\nfragment.\n\nThe bits to actually use the fragment and the shared objects will\nbe added by a forthcoming change, as part of a more general configury\nupdate for shared libs.\n\nThe change also adds guards the eh table registration code\nin vxcrtstuff so the objects can be used for either init/fini\nor eh tables independently.\n\n2021-12-07  Fred Konrad  <konrad@adacore.com>\n\t    Olivier Hainque  <hainque@adacore.com>\n\ngcc/\n\t* config/vxworks.h (VXWORKS_BASE_LIBS_RTP): Guard -lc_internal\n\ton !shared+!non-static and document.\n\t(VXWORKS_LIB_SPEC): Remove the bits intended to drag the\n\tinit/fini functions from libc_internal in the shared lib case.\n\t(VX_CRTBEGIN_SPEC/VX_CRTEND_SPEC): Use vxcrtstuff objects also in\n\tconfigurations with shared lib and INITFINI_ARRAY support.\n\nlibgcc/\n\t* config/t-vxcrtstuffS: New Makefile fragment.\n\t* config/vxcrtstuff.c: Provide __dso_handle. Provide _init/_fini\n\tfunctions for INITFINI_ARRAY support in shared libs and guard\n\tthe definition of eh table registration functions on conditions\n\tindicating they are needed.", "tree": {"sha": "de1958f3de2156933e67882c59efcbc38d2ec928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de1958f3de2156933e67882c59efcbc38d2ec928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4099d6501e3526ca8d1d01e904f42b83c6824674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4099d6501e3526ca8d1d01e904f42b83c6824674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4099d6501e3526ca8d1d01e904f42b83c6824674", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4099d6501e3526ca8d1d01e904f42b83c6824674/comments", "author": {"login": "FredKonrad", "id": 29773702, "node_id": "MDQ6VXNlcjI5NzczNzAy", "avatar_url": "https://avatars.githubusercontent.com/u/29773702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FredKonrad", "html_url": "https://github.com/FredKonrad", "followers_url": "https://api.github.com/users/FredKonrad/followers", "following_url": "https://api.github.com/users/FredKonrad/following{/other_user}", "gists_url": "https://api.github.com/users/FredKonrad/gists{/gist_id}", "starred_url": "https://api.github.com/users/FredKonrad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FredKonrad/subscriptions", "organizations_url": "https://api.github.com/users/FredKonrad/orgs", "repos_url": "https://api.github.com/users/FredKonrad/repos", "events_url": "https://api.github.com/users/FredKonrad/events{/privacy}", "received_events_url": "https://api.github.com/users/FredKonrad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0515c95d5fe0a865f688f3ab89572b917e8f0185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0515c95d5fe0a865f688f3ab89572b917e8f0185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0515c95d5fe0a865f688f3ab89572b917e8f0185"}], "stats": {"total": 128, "additions": 109, "deletions": 19}, "files": [{"sha": "52d6aa1ae9633df0e4276c186c380c420acfc12f", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099d6501e3526ca8d1d01e904f42b83c6824674/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099d6501e3526ca8d1d01e904f42b83c6824674/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=4099d6501e3526ca8d1d01e904f42b83c6824674", "patch": "@@ -101,11 +101,23 @@ along with GCC; see the file COPYING3.  If not see\n    the default CPP spec for C++ as well.  */\n #undef CPLUSPLUS_CPP_SPEC\n \n-/* For VxWorks static rtps, the system provides libc_internal.a, a superset of\n-   libgcc.a that we need to use e.g. to satisfy references to __init and\n-   __fini.  We still want our libgcc to prevail for symbols it would provide\n-   (e.g. register save entry points), so re-place it here between libraries\n-   that might reference it and libc_internal.\n+/* For VxWorks static rtps, the system provides libc_internal.a for a variety\n+   of purposes. Care is needed to include it appropriately.\n+\n+   - In some configurations, libc_internal fills in possible references from\n+     the static libc that we don't wouldn't satisfy ourselves, say, with\n+     libgcc.  An example is the __aeabi_memcpy family of functions on arm,\n+     which have very specific ABI allowances.\n+\n+   - OTOH, in some configurations the library provides typical libgcc\n+     services, for example register save/restore entry points on powerpc. We\n+     want our libgcc to prevail for symbols it would provide, so place\n+     -lc_internal after -lc -lgcc.\n+\n+   - libc_internal also contains __init/__fini functions for\n+     USE_INITFINI_ARRAY support. However, the system expects these in\n+     every shared lib as well, with slightly different names, and it is\n+     simpler for us to provide our own versions through vxcrtstuff.\n \n    In addition, some versions of VxWorks rely on explicit extra libraries for\n    system calls and the set of base network libraries of common use varies\n@@ -120,7 +132,8 @@ along with GCC; see the file COPYING3.  If not see\n #define VXWORKS_NET_LIBS_RTP \"-lnet -ldsi\"\n #endif\n \n-#define VXWORKS_BASE_LIBS_RTP \"-lc -lgcc -lc_internal\"\n+#define VXWORKS_BASE_LIBS_RTP \\\n+  \"-lc -lgcc %{!shared:%{!non-static:-lc_internal}}\"\n \n #define VXWORKS_EXTRA_LIBS_RTP\n \n@@ -161,10 +174,9 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n #undef VXWORKS_LIB_SPEC\n-#define\tVXWORKS_LIB_SPEC\t\t\t\t\t\t\\\n-\"%{mrtp:%{shared:-u \" USER_LABEL_PREFIX \"__init -u \" USER_LABEL_PREFIX \"__fini} \\\n-\t%{!shared:%{non-static:-u \" USER_LABEL_PREFIX \"_STI__6__rtld -ldl} \\\n-\t\t  \" TLS_SYM \" \\\n+#define\tVXWORKS_LIB_SPEC\t\t\t\t\t\t   \\\n+\"%{mrtp:%{!shared:%{non-static:-u \" USER_LABEL_PREFIX \"_STI__6__rtld -ldl} \\\n+\t\t  \" TLS_SYM \"                                              \\\n \t\t  --start-group \" VXWORKS_LIBS_RTP \" --end-group}}\"\n \n /* The no-op spec for \"-shared\" below is present because otherwise GCC\n@@ -196,11 +208,13 @@ along with GCC; see the file COPYING3.  If not see\n #define VXWORKS_LIBGCC_SPEC \"-lgcc\"\n #endif\n \n-/* Setup the crtstuff begin/end we might need for dwarf EH registration.  */\n+/* Setup the crtstuff begin/end we might need for dwarf EH registration\n+   and/or INITFINI_ARRAY support for shared libs.  */\n \n-#if !defined(CONFIG_SJLJ_EXCEPTIONS) && DWARF2_UNWIND_INFO\n-#define VX_CRTBEGIN_SPEC \"vx_crtbegin.o%s\"\n-#define VX_CRTEND_SPEC \"-l:vx_crtend.o\"\n+#if (HAVE_INITFINI_ARRAY_SUPPORT && defined(ENABLE_SHARED_LIBGCC)) \\\n+    || (DWARF2_UNWIND_INFO && !defined(CONFIG_SJLJ_EXCEPTIONS))\n+#define VX_CRTBEGIN_SPEC \"%{!shared:vx_crtbegin.o%s;:vx_crtbeginS.o%s}\"\n+#define VX_CRTEND_SPEC   \"%{!shared:vx_crtend.o%s;:vx_crtendS.o%s}\"\n #else\n #define VX_CRTBEGIN_SPEC \"\"\n #define VX_CRTEND_SPEC \"\""}, {"sha": "6b65b0005be708286efc2e65452f0446f19540c2", "filename": "libgcc/config/t-vxcrtstuffS", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099d6501e3526ca8d1d01e904f42b83c6824674/libgcc%2Fconfig%2Ft-vxcrtstuffS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099d6501e3526ca8d1d01e904f42b83c6824674/libgcc%2Fconfig%2Ft-vxcrtstuffS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-vxcrtstuffS?ref=4099d6501e3526ca8d1d01e904f42b83c6824674", "patch": "@@ -0,0 +1,9 @@\n+# Shared versions of vx_crt{begin,end}.o, those one must be compiled only\n+# when the shared libraries are available\n+\n+vx_crtbeginS.o: $(srcdir)/config/vxcrtstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS_S) -DCRT_BEGIN -c $< -DCRTSTUFFS_O\n+vx_crtendS.o: $(srcdir)/config/vxcrtstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS_S) -DCRT_END -c $< -DCRTSTUFFS_O\n+\n+EXTRA_PARTS += vx_crtbeginS.o vx_crtendS.o"}, {"sha": "80f51f7399d7cdb3f1e7dd098c6f6e5f5b6ee7d7", "filename": "libgcc/config/vxcrtstuff.c", "status": "modified", "additions": 72, "deletions": 5, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4099d6501e3526ca8d1d01e904f42b83c6824674/libgcc%2Fconfig%2Fvxcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4099d6501e3526ca8d1d01e904f42b83c6824674/libgcc%2Fconfig%2Fvxcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fvxcrtstuff.c?ref=4099d6501e3526ca8d1d01e904f42b83c6824674", "patch": "@@ -50,15 +50,25 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define USE_CDTORS_SECTIONS\n #endif\n \n+#if DWARF2_UNWIND_INFO && !defined(__USING_SJLJ_EXCEPTIONS__)\n+#define USE_EH_FRAME_REGISTRY\n+#endif\n+\n /*  ------------------------------ crtbegin -------------------------------  */\n \n #ifdef CRT_BEGIN\n \n-/* Stick a label at the beginning of the frame unwind info so we can register\n-   and deregister it with the exception handling library code.  */\n-static const char __EH_FRAME_BEGIN__[]\n-__attribute__((section(__LIBGCC_EH_FRAME_SECTION_NAME__), aligned(4)))\n-  = { };\n+#if DEFAULT_USE_CXA_ATEXIT && defined(__RTP__)\n+/* This mimics the crtstuff.c behavior.  dso_handle should be NULL for the\n+   main program (in vx_crtbegin.o) and a unique value for the shared libraries\n+   (in vx_crtbeginS.o).   */\n+extern void *__dso_handle __attribute__ ((__visibility__ (\"hidden\")));\n+#ifdef CRTSTUFFS_O\n+void *__dso_handle = &__dso_handle;\n+#else\n+void *__dso_handle = 0;\n+#endif\n+#endif /* DEFAULT_USE_CXA_ATEXIT */\n \n /* Determine what names to use for the constructor/destructor functions.  */\n \n@@ -89,6 +99,53 @@ __attribute__((section(__LIBGCC_EH_FRAME_SECTION_NAME__), aligned(4)))\n #define EH_CTOR_ATTRIBUTE __attribute__((constructor (101)))\n #define EH_DTOR_ATTRIBUTE __attribute__((destructor (101)))\n \n+/* Provide the init/fini array support functions for shared libraries,\n+   where we don't want to drag libc_internal contents blindly and which\n+   provides functions with a slightly different name anyway.  */\n+\n+#if HAVE_INITFINI_ARRAY_SUPPORT && defined(CRTSTUFFS_O)\n+\n+/* Run through the .init_array, .fini_array sections.  The linker script\n+   *must* provide __init_array_start, __init_array_end, __fini_array_start,\n+   __fini_array_end symbols.  */\n+\n+typedef void (*initfini_ptr) (void);\n+extern initfini_ptr __init_array_start[];\n+extern initfini_ptr __init_array_end[];\n+extern initfini_ptr __fini_array_start[];\n+extern initfini_ptr __fini_array_end[];\n+\n+/* Provide the actual code through static functions, which don't need\n+   to be exposed in the shared lib interface.  */\n+\n+static void __exec_init_array(void)\n+{\n+  initfini_ptr *fn;\n+  for (fn = __init_array_start; fn < __init_array_end; ++fn)\n+    (*fn)();\n+}\n+\n+static void __exec_fini_array(void)\n+{\n+  initfini_ptr *fn;\n+  for (fn = __fini_array_end - 1; fn >= __fini_array_start; --fn)\n+    (*fn)();\n+}\n+\n+/* Reference the two above functions as the init / fini function.  */\n+\n+void __attribute__ ((__section__  (\".init\"))) _init()\n+{\n+  __exec_init_array();\n+}\n+\n+void __attribute__ ((__section__  (\".fini\"))) _fini()\n+{\n+  __exec_fini_array();\n+}\n+\n+#endif /* __CRTSTUFFS_O__ */\n+\n #else /* !USE_INITFINI_ARRAY  */\n \n /* Note: Even in case of .ctors/.dtors sections, we can't use the attribute\n@@ -100,6 +157,13 @@ __attribute__((section(__LIBGCC_EH_FRAME_SECTION_NAME__), aligned(4)))\n \n #endif /* USE_INITFINI_ARRAY  */\n \n+#ifdef USE_EH_FRAME_REGISTRY\n+/* Stick a label at the beginning of the frame unwind info so we can register\n+   and deregister it with the exception handling library code.  */\n+static const char __EH_FRAME_BEGIN__[]\n+__attribute__((section(__LIBGCC_EH_FRAME_SECTION_NAME__), aligned(4)))\n+  = { };\n+\n EH_LINKAGE EH_CTOR_ATTRIBUTE void EH_CTOR_NAME (void)\n {\n   static struct object object;\n@@ -110,6 +174,7 @@ EH_LINKAGE EH_DTOR_ATTRIBUTE void EH_DTOR_NAME (void)\n {\n   __deregister_frame_info (__EH_FRAME_BEGIN__);\n }\n+#endif /* USE_EH_FRAME_REGISTRY */\n \n #ifdef USE_CDTORS_SECTIONS\n /* As explained above, we need to manually build the sections here as the\n@@ -126,13 +191,15 @@ static void (* volatile eh_registration_dtors[])()\n \n #elif defined (CRT_END) /* ! CRT_BEGIN */\n \n+#ifdef USE_EH_FRAME_REGISTRY\n /* Terminate the frame unwind info section with a 4byte 0 as a sentinel;\n    this would be the 'length' field in a real FDE.  */\n \n static const char __FRAME_END__[]\n      __attribute__ ((used, section(__LIBGCC_EH_FRAME_SECTION_NAME__),\n \t\t     aligned(4)))\n   = { 0, 0, 0, 0 };\n+#endif /* USE_EH_FRAME_REGISTRY */\n \n #else /* ! CRT_BEGIN & ! CRT_END */\n "}]}