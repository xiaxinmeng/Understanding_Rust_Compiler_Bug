{"sha": "ea718febab2a1f6e58806738abf70f1c73c6a308", "node_id": "C_kwDOANBUbNoAKGVhNzE4ZmViYWIyYTFmNmU1ODgwNjczOGFiZjcwZjFjNzNjNmEzMDg", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-23T22:54:47Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-28T15:08:40Z"}, "message": "c++: ICE with constexpr variable template [PR107938]\n\nSince r11-557, cp_finish_decl can call check_initializer even in\na template for a constexpr initializer.  That ultimately leads to\nconvert_for_assignment and check_address_or_pointer_of_packed_member,\nwhere we crash, because it doesn't expect that the CALL_EXPR is\na function object.  Q has a constexpr operator(), but since we're\nin a template, q(0) is a CALL_EXPR whose CALL_EXPR_FN is just\na VAR_DECL; it hasn't been converted to Q::operator<int>(&q, 0) yet.\nI propose to robustify check_address_or_pointer_of_packed_member.\n\nvar-templ74.C has an XFAIL, subject to 107939.\n\nI noticed that our -Waddress-of-packed-member tests weren't testing\nmember functions, added thus.  (I was tempted to check\nFUNCTION_POINTER_TYPE_P but that doesn't include METHOD_TYPE.)\n\n\tPR c++/107938\n\ngcc/c-family/ChangeLog:\n\n\t* c-warn.cc (check_address_or_pointer_of_packed_member): Check\n\tPOINTER_TYPE_P.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/var-templ73.C: New test.\n\t* g++.dg/cpp1y/var-templ74.C: New test.\n\t* g++.dg/warn/Waddress-of-packed-member3.C: New test.", "tree": {"sha": "046173fb8e5d95565ea91771ca1b955fbe146c8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/046173fb8e5d95565ea91771ca1b955fbe146c8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea718febab2a1f6e58806738abf70f1c73c6a308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea718febab2a1f6e58806738abf70f1c73c6a308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea718febab2a1f6e58806738abf70f1c73c6a308", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea718febab2a1f6e58806738abf70f1c73c6a308/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7728805a7107444683290cd629d13f089130a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7728805a7107444683290cd629d13f089130a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7728805a7107444683290cd629d13f089130a0d"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "29ae1ea1dc8c3bcaa58c9be8f4b1330ffea04d5b", "filename": "gcc/c-family/c-warn.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea718febab2a1f6e58806738abf70f1c73c6a308/gcc%2Fc-family%2Fc-warn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea718febab2a1f6e58806738abf70f1c73c6a308/gcc%2Fc-family%2Fc-warn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.cc?ref=ea718febab2a1f6e58806738abf70f1c73c6a308", "patch": "@@ -3000,6 +3000,10 @@ check_address_or_pointer_of_packed_member (tree type, tree rhs)\n \t  if (rhs == NULL_TREE)\n \t    return NULL_TREE;\n \t  rhs = TREE_TYPE (rhs);\t/* Pointer type.  */\n+\t  /* We could be called while processing a template and RHS could be\n+\t     a functor.  In that case it's a class, not a pointer.  */\n+\t  if (!POINTER_TYPE_P (rhs))\n+\t    return NULL_TREE;\n \t  rhs = TREE_TYPE (rhs);\t/* Function type.  */\n \t  rhstype = TREE_TYPE (rhs);\n \t  if (!rhstype || !POINTER_TYPE_P (rhstype))"}, {"sha": "b76babcfa81bfc786c913e947077447acf5a3840", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ73.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea718febab2a1f6e58806738abf70f1c73c6a308/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ73.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea718febab2a1f6e58806738abf70f1c73c6a308/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ73.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ73.C?ref=ea718febab2a1f6e58806738abf70f1c73c6a308", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/107938\n+// { dg-do compile { target c++14 } }\n+\n+struct Q {\n+  int n;\n+  constexpr const Q* operator()(int) const { return this; }\n+};\n+\n+constexpr Q q{};\n+\n+template<int>\n+constexpr const Q* p = q(0);"}, {"sha": "4e2e800a6ebb8f1ef921bf7580625e38d22a7d80", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ74.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea718febab2a1f6e58806738abf70f1c73c6a308/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea718febab2a1f6e58806738abf70f1c73c6a308/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ74.C?ref=ea718febab2a1f6e58806738abf70f1c73c6a308", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/107938\n+// { dg-do compile { target c++14 } }\n+\n+struct Q {\n+  int n;\n+  constexpr const Q* operator()(int) const { return this; }\n+};\n+\n+extern const Q q;\n+\n+template<int>\n+constexpr const Q* p = q(0); // { dg-bogus \"not usable\" \"PR107939\" { xfail *-*-* } }\n+\n+void\n+g ()\n+{\n+  constexpr const Q* p2 = q(0);\n+  constexpr auto x = p<0>;\n+}"}, {"sha": "aeffb969c0127ecfc5c15f2879deaae1fd2f3175", "filename": "gcc/testsuite/g++.dg/warn/Waddress-of-packed-member3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea718febab2a1f6e58806738abf70f1c73c6a308/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-of-packed-member3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea718febab2a1f6e58806738abf70f1c73c6a308/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-of-packed-member3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-of-packed-member3.C?ref=ea718febab2a1f6e58806738abf70f1c73c6a308", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target { ! default_packed } } }\n+// Test that -Waddress-of-packed-member works with member functions.\n+\n+struct S {\n+  char c;\n+} __attribute__((packed));\n+\n+struct X {\n+  S* memfn ();\n+  static S* smemfn ();\n+} x;\n+\n+S *foo ();\n+\n+S**\n+f ()\n+{\n+  S **s;\n+  s = reinterpret_cast<S**>(foo ()); // { dg-warning \"converting a packed\" }\n+  s = reinterpret_cast<S**>(x.memfn ()); // { dg-warning \"converting a packed\" }\n+  s = reinterpret_cast<S**>(X::smemfn ()); // { dg-warning \"converting a packed\" }\n+  return s;\n+}"}]}