{"sha": "7bff66a715c67c1c3206a08ecdd19bb04d2bd475", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JmZjY2YTcxNWM2N2MxYzMyMDZhMDhlY2RkMTliYjA0ZDJiZDQ3NQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2004-11-08T17:17:30Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2004-11-08T17:17:30Z"}, "message": "arm.c (arm_handle_notshared_attribute): Wrap declaration and use with #if TARGET_DLLIMPORT_DECL_ATTRIBUTES.\n\n* arm.c (arm_handle_notshared_attribute): Wrap declaration and use\nwith #if TARGET_DLLIMPORT_DECL_ATTRIBUTES.\n\nFrom-SVN: r90272", "tree": {"sha": "d6c747266529bb23a660174688aed7c3e1c424d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6c747266529bb23a660174688aed7c3e1c424d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bff66a715c67c1c3206a08ecdd19bb04d2bd475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bff66a715c67c1c3206a08ecdd19bb04d2bd475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bff66a715c67c1c3206a08ecdd19bb04d2bd475", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bff66a715c67c1c3206a08ecdd19bb04d2bd475/comments", "author": null, "committer": null, "parents": [{"sha": "adb31ad60d29824ac9d3a699b937f31a8632798b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb31ad60d29824ac9d3a699b937f31a8632798b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb31ad60d29824ac9d3a699b937f31a8632798b"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "711afc566e88be8df681f54f5e1d758c0cde6721", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bff66a715c67c1c3206a08ecdd19bb04d2bd475/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bff66a715c67c1c3206a08ecdd19bb04d2bd475/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bff66a715c67c1c3206a08ecdd19bb04d2bd475", "patch": "@@ -1,3 +1,8 @@\n+2004-11-08  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (arm_handle_notshared_attribute): Wrap declaration and use\n+\twith #if TARGET_DLLIMPORT_DECL_ATTRIBUTES.\n+\n 2004-11-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-if-conv.c (tree_if_convert_cond_expr): Remove two \"if\""}, {"sha": "dab5de5020a615400e2314342d60a2e137eeaa2d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bff66a715c67c1c3206a08ecdd19bb04d2bd475/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bff66a715c67c1c3206a08ecdd19bb04d2bd475/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7bff66a715c67c1c3206a08ecdd19bb04d2bd475", "patch": "@@ -114,7 +114,9 @@ static unsigned long arm_isr_value (tree);\n static unsigned long arm_compute_func_type (void);\n static tree arm_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n static tree arm_handle_isr_attribute (tree *, tree, tree, int, bool *);\n+#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n static tree arm_handle_notshared_attribute (tree *, tree, tree, int, bool *);\n+#endif\n static void arm_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void arm_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void thumb_output_function_prologue (FILE *, HOST_WIDE_INT);\n@@ -2670,6 +2672,7 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n   return NULL_TREE;\n }\n \n+#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n /* Handle the \"notshared\" attribute.  This attribute is another way of\n    requesting hidden visibility.  ARM's compiler supports\n    \"__declspec(notshared)\"; we support the same thing via an\n@@ -2692,6 +2695,7 @@ arm_handle_notshared_attribute (tree *node,\n     }\n   return NULL_TREE;\n }\n+#endif\n \n /* Return 0 if the attributes for two types are incompatible, 1 if they\n    are compatible, and 2 if they are nearly compatible (which causes a"}]}