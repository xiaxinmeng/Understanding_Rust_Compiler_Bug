{"sha": "1e84b34e7473adaa56186f8dad3d9db31ffd75b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU4NGIzNGU3NDczYWRhYTU2MTg2ZjhkYWQzZDlkYjMxZmZkNzViNQ==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2006-01-29T03:08:38Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2006-01-29T03:08:38Z"}, "message": "combine.c (simplify_comparison <AND>): Check TRULY_NOOP_TRUNCATION before start using a subreg.\n\n\t* combine.c (simplify_comparison <AND>): Check\n\tTRULY_NOOP_TRUNCATION before start using a subreg.\n\t\n\t* config/mips/mips.md (*branch_zero<mode>, \n\t*branch_zero<mode>_inverted, *branch_equality<mode>, \n\t*branch_equality<mode>_inverted, *branch_equality<mode>_mips16): \n\tRemove mode check from comparisons.\n\nFrom-SVN: r110358", "tree": {"sha": "f96acf509bf5a7593c1f9458877f3b544574ae86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f96acf509bf5a7593c1f9458877f3b544574ae86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e84b34e7473adaa56186f8dad3d9db31ffd75b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e84b34e7473adaa56186f8dad3d9db31ffd75b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e84b34e7473adaa56186f8dad3d9db31ffd75b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e84b34e7473adaa56186f8dad3d9db31ffd75b5/comments", "author": null, "committer": null, "parents": [{"sha": "3dcf4d30e7fff3ebf0998e0fe6401719580e4d7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dcf4d30e7fff3ebf0998e0fe6401719580e4d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dcf4d30e7fff3ebf0998e0fe6401719580e4d7a"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "b9900bf577687a7a07b106e83413d376233b22a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e84b34e7473adaa56186f8dad3d9db31ffd75b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e84b34e7473adaa56186f8dad3d9db31ffd75b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e84b34e7473adaa56186f8dad3d9db31ffd75b5", "patch": "@@ -1,3 +1,13 @@\n+2006-01-28  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* combine.c (simplify_comparison <AND>): Check\n+\tTRULY_NOOP_TRUNCATION before start using a subreg.\n+\t\n+\t* config/mips/mips.md (*branch_zero<mode>, \n+\t*branch_zero<mode>_inverted, *branch_equality<mode>, \n+\t*branch_equality<mode>_inverted, *branch_equality<mode>_mips16): \n+\tRemove mode check from comparisons. \n+\n 2006-01-28  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* config/mips/mips-protos.h (mips_set_live_on_entry): Deleted."}, {"sha": "ee8d98d9dabe1d5efaeb70e7d012851847e6fb55", "filename": "gcc/combine.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e84b34e7473adaa56186f8dad3d9db31ffd75b5/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e84b34e7473adaa56186f8dad3d9db31ffd75b5/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=1e84b34e7473adaa56186f8dad3d9db31ffd75b5", "patch": "@@ -10295,14 +10295,27 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t  /* If this AND operation is really a ZERO_EXTEND from a narrower\n \t     mode, the constant fits within that mode, and this is either an\n \t     equality or unsigned comparison, try to do this comparison in\n-\t     the narrower mode.  */\n+\t     the narrower mode.\n+\n+\t     Note that in:\n+\n+\t     (ne:DI (and:DI (reg:DI 4) (const_int 0xffffffff)) (const_int 0))\n+\t     -> (ne:DI (reg:SI 4) (const_int 0))\n+\n+\t     unless TRULY_NOOP_TRUNCATION allows it or the register is\n+\t     known to hold a value of the required mode the\n+\t     transformation is invalid.  */\n \t  if ((equality_comparison_p || unsigned_comparison_p)\n \t      && GET_CODE (XEXP (op0, 1)) == CONST_INT\n \t      && (i = exact_log2 ((INTVAL (XEXP (op0, 1))\n \t\t\t\t   & GET_MODE_MASK (mode))\n \t\t\t\t  + 1)) >= 0\n \t      && const_op >> i == 0\n-\t      && (tmode = mode_for_size (i, MODE_INT, 1)) != BLKmode)\n+\t      && (tmode = mode_for_size (i, MODE_INT, 1)) != BLKmode\n+\t      && (TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (tmode),\n+\t\t\t\t\t GET_MODE_BITSIZE (GET_MODE (op0)))\n+\t\t  || (REG_P (XEXP (op0, 0))\n+\t\t      && reg_truncated_to_mode (tmode, XEXP (op0, 0)))))\n \t    {\n \t      op0 = gen_lowpart (tmode, XEXP (op0, 0));\n \t      continue;"}, {"sha": "3d5585718d8c783a5932874e56a478d656cdd798", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e84b34e7473adaa56186f8dad3d9db31ffd75b5/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e84b34e7473adaa56186f8dad3d9db31ffd75b5/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=1e84b34e7473adaa56186f8dad3d9db31ffd75b5", "patch": "@@ -4316,9 +4316,9 @@\n (define_insn \"*branch_zero<mode>\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator:GPR 0 \"comparison_operator\"\n-\t\t\t     [(match_operand:GPR 2 \"register_operand\" \"d\")\n-\t\t\t      (const_int 0)])\n+\t (match_operator 0 \"comparison_operator\"\n+\t\t\t [(match_operand:GPR 2 \"register_operand\" \"d\")\n+\t\t\t  (const_int 0)])\n \t (label_ref (match_operand 1 \"\" \"\"))\n \t (pc)))]\n   \"!TARGET_MIPS16\"\n@@ -4336,9 +4336,9 @@\n (define_insn \"*branch_zero<mode>_inverted\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator:GPR 0 \"comparison_operator\"\n-\t\t\t     [(match_operand:GPR 2 \"register_operand\" \"d\")\n-\t\t\t      (const_int 0)])\n+\t (match_operator 0 \"comparison_operator\"\n+\t\t\t [(match_operand:GPR 2 \"register_operand\" \"d\")\n+\t\t\t  (const_int 0)])\n \t (pc)\n \t (label_ref (match_operand 1 \"\" \"\"))))]\n   \"!TARGET_MIPS16\"\n@@ -4358,9 +4358,9 @@\n (define_insn \"*branch_equality<mode>\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator:GPR 0 \"equality_operator\"\n-\t\t\t     [(match_operand:GPR 2 \"register_operand\" \"d\")\n-\t\t\t      (match_operand:GPR 3 \"register_operand\" \"d\")])\n+\t (match_operator 0 \"equality_operator\"\n+\t\t\t [(match_operand:GPR 2 \"register_operand\" \"d\")\n+\t\t\t  (match_operand:GPR 3 \"register_operand\" \"d\")])\n \t (label_ref (match_operand 1 \"\" \"\"))\n \t (pc)))]\n   \"!TARGET_MIPS16\"\n@@ -4378,9 +4378,9 @@\n (define_insn \"*branch_equality<mode>_inverted\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator:GPR 0 \"equality_operator\"\n-\t\t\t     [(match_operand:GPR 2 \"register_operand\" \"d\")\n-\t\t\t      (match_operand:GPR 3 \"register_operand\" \"d\")])\n+\t (match_operator 0 \"equality_operator\"\n+\t\t\t [(match_operand:GPR 2 \"register_operand\" \"d\")\n+\t\t\t  (match_operand:GPR 3 \"register_operand\" \"d\")])\n \t (pc)\n \t (label_ref (match_operand 1 \"\" \"\"))))]\n   \"!TARGET_MIPS16\"\n@@ -4400,9 +4400,9 @@\n (define_insn \"*branch_equality<mode>_mips16\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator:GPR 0 \"equality_operator\"\n-\t\t\t     [(match_operand:GPR 1 \"register_operand\" \"d,t\")\n-\t\t\t      (const_int 0)])\n+\t (match_operator 0 \"equality_operator\"\n+\t\t\t [(match_operand:GPR 1 \"register_operand\" \"d,t\")\n+\t\t\t  (const_int 0)])\n \t (match_operand 2 \"pc_or_label_operand\" \"\")\n \t (match_operand 3 \"pc_or_label_operand\" \"\")))]\n   \"TARGET_MIPS16\""}]}