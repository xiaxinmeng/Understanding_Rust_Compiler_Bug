{"sha": "a6f834c5a87c1ac42f1c842bba34d84740218d77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmODM0YzVhODdjMWFjNDJmMWM4NDJiYmEzNGQ4NDc0MDIxOGQ3Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-06-10T12:53:48Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-06-10T12:53:48Z"}, "message": "tree-sra.c (all_callers_have_enough_arguments_p): Rename to ...\n\n\t* tree-sra.c (all_callers_have_enough_arguments_p): Rename to ...\n\t(not_all_callers_have_enough_arguments_p): ... this one; turn into\n\tworker for cgraph_for_node_and_aliases.\n\t(convert_callers_for_node): Break out from ...\n\t(convert_callers): ... here.\n\t(modify_function): Use collect_callers_of_node.\n\t(ipa_early_sra): Use cgraph_for_node_and_aliases.\n\nFrom-SVN: r174904", "tree": {"sha": "20b67a874a850032963d722eda24d2f5015949f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20b67a874a850032963d722eda24d2f5015949f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6f834c5a87c1ac42f1c842bba34d84740218d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f834c5a87c1ac42f1c842bba34d84740218d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f834c5a87c1ac42f1c842bba34d84740218d77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f834c5a87c1ac42f1c842bba34d84740218d77/comments", "author": null, "committer": null, "parents": [{"sha": "7871eee372692f471507a857b8eac77598fbdb03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7871eee372692f471507a857b8eac77598fbdb03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7871eee372692f471507a857b8eac77598fbdb03"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "14cc6d8541bfeb0f498dcc54ee441b5d87090338", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f834c5a87c1ac42f1c842bba34d84740218d77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f834c5a87c1ac42f1c842bba34d84740218d77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6f834c5a87c1ac42f1c842bba34d84740218d77", "patch": "@@ -1,3 +1,13 @@\n+2011-06-10  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-sra.c (all_callers_have_enough_arguments_p): Rename to ...\n+\t(not_all_callers_have_enough_arguments_p): ... this one; turn into\n+\tworker for cgraph_for_node_and_aliases.\n+\t(convert_callers_for_node): Break out from ...\n+\t(convert_callers): ... here.\n+\t(modify_function): Use collect_callers_of_node.\n+\t(ipa_early_sra): Use cgraph_for_node_and_aliases.\n+\n 2011-06-10  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/49361"}, {"sha": "8ad84beb655775039f6aa12c644c655bfae9b3d5", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f834c5a87c1ac42f1c842bba34d84740218d77/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f834c5a87c1ac42f1c842bba34d84740218d77/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=a6f834c5a87c1ac42f1c842bba34d84740218d77", "patch": "@@ -4304,31 +4304,30 @@ sra_ipa_reset_debug_stmts (ipa_parm_adjustment_vec adjustments)\n     }\n }\n \n-/* Return true iff all callers have at least as many actual arguments as there\n+/* Return false iff all callers have at least as many actual arguments as there\n    are formal parameters in the current function.  */\n \n static bool\n-all_callers_have_enough_arguments_p (struct cgraph_node *node)\n+not_all_callers_have_enough_arguments_p (struct cgraph_node *node,\n+\t\t\t\t\t void *data ATTRIBUTE_UNUSED)\n {\n   struct cgraph_edge *cs;\n   for (cs = node->callers; cs; cs = cs->next_caller)\n     if (!callsite_has_enough_arguments_p (cs->call_stmt))\n-      return false;\n+      return true;\n \n-  return true;\n+  return false;\n }\n \n+/* Convert all callers of NODE.  */\n \n-/* Convert all callers of NODE to pass parameters as given in ADJUSTMENTS.  */\n-\n-static void\n-convert_callers (struct cgraph_node *node, tree old_decl,\n-\t\t ipa_parm_adjustment_vec adjustments)\n+static bool\n+convert_callers_for_node (struct cgraph_node *node,\n+\t\t          void *data)\n {\n-  tree old_cur_fndecl = current_function_decl;\n-  struct cgraph_edge *cs;\n-  basic_block this_block;\n+  ipa_parm_adjustment_vec adjustments = (ipa_parm_adjustment_vec)data;\n   bitmap recomputed_callers = BITMAP_ALLOC (NULL);\n+  struct cgraph_edge *cs;\n \n   for (cs = node->callers; cs; cs = cs->next_caller)\n     {\n@@ -4352,6 +4351,21 @@ convert_callers (struct cgraph_node *node, tree old_decl,\n       compute_inline_parameters (cs->caller, true);\n   BITMAP_FREE (recomputed_callers);\n \n+  return true;\n+}\n+\n+/* Convert all callers of NODE to pass parameters as given in ADJUSTMENTS.  */\n+\n+static void\n+convert_callers (struct cgraph_node *node, tree old_decl,\n+\t\t ipa_parm_adjustment_vec adjustments)\n+{\n+  tree old_cur_fndecl = current_function_decl;\n+  basic_block this_block;\n+\n+  cgraph_for_node_and_aliases (node, convert_callers_for_node,\n+\t\t\t       adjustments, false);\n+\n   current_function_decl = old_cur_fndecl;\n \n   if (!encountered_recursive_call)\n@@ -4388,17 +4402,8 @@ static bool\n modify_function (struct cgraph_node *node, ipa_parm_adjustment_vec adjustments)\n {\n   struct cgraph_node *new_node;\n-  struct cgraph_edge *cs;\n   bool cfg_changed;\n-  VEC (cgraph_edge_p, heap) * redirect_callers;\n-  int node_callers;\n-\n-  node_callers = 0;\n-  for (cs = node->callers; cs != NULL; cs = cs->next_caller)\n-    node_callers++;\n-  redirect_callers = VEC_alloc (cgraph_edge_p, heap, node_callers);\n-  for (cs = node->callers; cs != NULL; cs = cs->next_caller)\n-    VEC_quick_push (cgraph_edge_p, redirect_callers, cs);\n+  VEC (cgraph_edge_p, heap) * redirect_callers = collect_callers_of_node (node);\n \n   rebuild_cgraph_edges ();\n   pop_cfun ();\n@@ -4503,7 +4508,8 @@ ipa_early_sra (void)\n       goto simple_out;\n     }\n \n-  if (!all_callers_have_enough_arguments_p (node))\n+  if (cgraph_for_node_and_aliases (node, not_all_callers_have_enough_arguments_p,\n+\t\t\t\t   NULL, true))\n     {\n       if (dump_file)\n \tfprintf (dump_file, \"There are callers with insufficient number of \""}]}