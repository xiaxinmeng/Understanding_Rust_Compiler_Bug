{"sha": "ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJlYjE3YzdiYjhkMDdkNDEyYjVmMDI3ODZmYjc5YjBhYjBhZDJiOQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2004-05-30T09:53:10Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2004-05-30T09:53:10Z"}, "message": "random.c: Include unistd.h for close and read prototypes...\n\n\t* intrinsics/random.c: Include unistd.h for close and read\n\tprototypes, remove unneeded inclusion of assert.h.\n\n\t* intrinsics/abort.c: Include stdlib.h for abort prototype, remove\n\tunneeded inclusion of assert.h.\n\nFrom-SVN: r82442", "tree": {"sha": "1223700984e154f1ab12a23d68e820ab6aa591ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1223700984e154f1ab12a23d68e820ab6aa591ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9/comments", "author": null, "committer": null, "parents": [{"sha": "1ea7e6ad84d890cc6d002e9e698055de85a28cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea7e6ad84d890cc6d002e9e698055de85a28cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea7e6ad84d890cc6d002e9e698055de85a28cfd"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "92fc985e211c58c323ed602c5f1a70e606da2178", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9", "patch": "@@ -1,3 +1,11 @@\n+2004-05-30  Andreas Jaeger  <aj@suse.de>\n+\n+\t* intrinsics/random.c: Include unistd.h for close and read\n+\tprototypes, remove unneeded inclusion of assert.h.\n+\n+\t* intrinsics/abort.c: Include stdlib.h for abort prototype, remove\n+\tunneeded inclusion of assert.h.\n+\n 2004-05-27  Tobias Schlueter  <tobias.shclueter@physik.uni-muenchen.de>\n \n \tPR fortran/15234\n@@ -196,7 +204,7 @@\n \t* io/unix.c (find_file0): Use fd field of struct\n \n 2004-04-03  Bud Davis  <bdavis9659@comcast.net>\n- \n+\n \tPR 14831\n \t* io/inquire.c (inquire_via_unit): Changed return string for\n \tBLANK=NULL. Use correct variable for ACTION.\n@@ -313,7 +321,7 @@\n \t* m4/minloc1.m4: Ditto.\n \t* m4/ifunction.m4: Set return value for zero sized arrays.\n \t* m4/iforeach.m4: Ditto.\n-\t* m4/all.m4, m4/any.m4, m4/count.m4, m4/maxloc1.m4, m4/minloc1.m4, \n+\t* m4/all.m4, m4/any.m4, m4/count.m4, m4/maxloc1.m4, m4/minloc1.m4,\n \tm4/mxaval.m4, m4/minval.m4, m4/product.m4, m4/sum.m4: Ditto.\n \t* generated/*: Update.\n \n@@ -372,7 +380,7 @@\n \t* generated/_mod*.f90: New files.\n \n 2003-09-20  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n- \n+\n \t* intrinsics/selected_kind.f90: New file.\n \t* Makefile.am: Add it.\n \t* Makefile.in: regenerate.\n@@ -404,7 +412,7 @@\n \t* libgfortran.h (xtoa, itoa): Parameter modified.\n \t* io/io.h (namelist_info): Declaration to support namelist I/O\n \t(st_parameter): Add namelist related component\n-\t(ionml, empty_internal_buffer, st_set_nml_var_int, \n+\t(ionml, empty_internal_buffer, st_set_nml_var_int,\n \tst_set_nml_var_float, st_set_nml_var_char, st_set_nml_var_complex,\n \tst_set_nml_var_log): Declaration\n \t(set_integer, set_integer): Parameter changed\n@@ -416,7 +424,7 @@\n \t(next_char): Add detection of End_Of_Line support\n \t(convert_integer): Now can process 64 bits interger\n \t(read_real): Bug fixed\n-\t(init_at_eol, find_nml_node, match_namelist_name): Add new functions \n+\t(init_at_eol, find_nml_node, match_namelist_name): Add new functions\n \t(match_namelist_name): New implemention\n \t* io/lock.c (ionml): New global variable\n \t(library_end): Free memory in ionml\n@@ -426,11 +434,11 @@\n \t features\n \t(read_f, read_radix): Input bug fix\n \t* io/transfer.c: (sf_seen_eor): New static variable\n-\t(read_sf): Zeroize base buffer; fix bugs: single read statement can \n+\t(read_sf): Zeroize base buffer; fix bugs: single read statement can\n \tnot get input in mutli line when read from stdin\n \t(formatted_transfer): Fix bug of FMT_O, FMT_B, FMT_Z for INTEGER type\n \t request\n-\t(data_transfer_init): Clear internal buffer for Internel File I/O. \n+\t(data_transfer_init): Clear internal buffer for Internel File I/O.\n \tInternal File now worked. Detect some error condition for namelist.\n \tSome minor bug fix\n \t(next_record_w): Internal file and Namelist I/O support.\n@@ -449,7 +457,7 @@\n \t(write_decimal): New function to output decimal number\n \t(otoa, btoa): Better implemention and 64 bits interger support\n \t(namelist_write): New function\n-\t* runtime/error.c (itoa, xtoa): Better implemention and 64 bits \n+\t* runtime/error.c (itoa, xtoa): Better implemention and 64 bits\n \tinterger support\n \n 2003-08-15  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n@@ -546,7 +554,7 @@\n \t* io/list_read.c: Add Separator '\\t'.\n \t(parse_real, read_real): Accept real values starting with an optional\n \tsign follows a decimal point.\n- \n+\n 2003-06-06  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* Makefile.am: Don't put cmath objects in subdir.\n@@ -717,7 +725,7 @@\n 2003-02-02  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n \n \t* reshape_packed.c, lock.c: Add #include <string.h>.\n-\t* libgfor.h, format.c, inquire.c, io.h, transfer.c, unix.c, \n+\t* libgfor.h, format.c, inquire.c, io.h, transfer.c, unix.c,\n \tenviron.c, error.c, memory.c, string.c: Add const.\n \t* error.c (show_locus): Add void.\n \n@@ -773,7 +781,7 @@\n \t* Makefile.in: Regenerate.\n \t* gfortypes.h: Kill, include everything in...\n \t* libgfor.h: ...here.  Include config.h\n- \t* fmain.c, intrinsics/ishftc.c, intrinsic/reshape_generic.c,\n+\t* fmain.c, intrinsics/ishftc.c, intrinsic/reshape_generic.c,\n \tintrinsics/reshape_i4.c, intrinsics/reshape_i8.c,\n \tintrinsics/reshape_packed.c, intrinsics/size.c,\n \tm4/reshape.m4, runtime/main.c, runtime/memory.c: Use macro\n@@ -783,7 +791,7 @@\n \n \t* io/lock.c (library_end): Propagate library return\n \tcode.\n-\t\n+\n 2003-01-19  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n \n \tPort fixes from Andy's tree:"}, {"sha": "b042de4928fc7c456f5b362892bc8d787dede0a1", "filename": "libgfortran/intrinsics/abort.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9/libgfortran%2Fintrinsics%2Fabort.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9/libgfortran%2Fintrinsics%2Fabort.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fabort.c?ref=ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the ABORT intrinsic.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n \n@@ -19,7 +19,7 @@ write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"libgfortran.h\"\n-#include <assert.h>\n+#include <stdlib.h>\n \n \n void prefix(abort) (void);"}, {"sha": "c1539243c0e5790e887570d5efc4223c1e6a0a22", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=ebeb17c7bb8d07d412b5f02786fb79b0ab0ad2b9", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the RANDOM intrinsics\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2004 Free Software Foundation, Inc.\n    Contributed by Lars Segerlund <seger@linuxmail.org>\n \n   The algorithm was taken from the paper :\n@@ -37,7 +37,11 @@ Boston, MA 02111-1307, USA.  */\n #include <sys/types.h>\n #include <sys/stat.h>\n #include <fcntl.h>\n-#include <assert.h>\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n #include \"libgfortran.h\"\n \n /*Use the 'big' generator by default ( period -> 2**19937 ).  */"}]}