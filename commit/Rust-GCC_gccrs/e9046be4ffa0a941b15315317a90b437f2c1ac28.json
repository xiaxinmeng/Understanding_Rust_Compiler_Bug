{"sha": "e9046be4ffa0a941b15315317a90b437f2c1ac28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwNDZiZTRmZmEwYTk0MWIxNTMxNTMxN2E5MGI0MzdmMmMxYWMyOA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-04-26T11:23:41Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-04-26T11:23:41Z"}, "message": "testsuite/arm: Add arm_cmse_hw effective target\n\nSome of the CMSE tests have 'dg-do run', but qemu-arm does not support\nthe privileged instructions involved; one has to use qemu-system-arm\nfor this, which in turn requires modifications to the default\nnewlib/libgloss startup code to enable the FPU as the FP status\nregisters need to be saved when using CMSE code.\n\nThis patch introduces arm_cmse_hw, similar to arm_neon_hw, to detect\nwhether the execution engine supports the CMSE instructions. If not,\nwe set dg-do-what-default to assemble instead of run. We thus remove\nall the 'dg-do run' directives from CMSE tests, to rely on\ndg-do-what-default instead.\n\nNote that cmse-16.c used to pass with dg-do run under qemu-arm,\nbecause the property being tested is not available (qemu-arm does not\nmodel secure vs non-secure memory). The patch removes dg-do from it\ntoo, since it is relevant only with an adequate simulator.\n\nBefore the patch, bitfield-[123].c and struct-1.c fail at execution\nunder qemu-arm. With the patch, execution is skipped.\n\nThe same tests pass under qemu-system-arm both with and without the\npatch.\n\nThis avoids failures when testing with\n-mthumb/-mfloat-abi=hard/-march=armv8-m.main+fp+dsp under qemu-arm for\ncortex-m33.\n\nI'm also running tests with qemu-system-arm for cortex-m33, but I run\nonly cmse.exp with a patched newlib in this case: I use qemu-arm for\nall combinations except that one because it's faster and supports\nsemihosting.\n\nI do not have a setup to check this with actual hardware or another\nsimulator.\n\n2021-04-26  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* doc/sourcebuild.texi (arm_cmse_hw): Document.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/cmse/bitfield-1.c: Remove dg-do.\n\t* gcc.target/arm/cmse/bitfield-2.c: Likewise.\n\t* gcc.target/arm/cmse/bitfield-3.c: Likewise.\n\t* gcc.target/arm/cmse/cmse-16.c: Likewise.\n\t* gcc.target/arm/cmse/struct-1.c: Likewise.\n\t* gcc.target/arm/cmse/cmse.exp: Set dg-do-what-default depending\n\ton arm_cmse_hw.\n\t* lib/target-supports.exp (check_effective_target_arm_cmse_hw):\n\tNew.", "tree": {"sha": "e35537ac8fb50ec91d46b9961efd68a3857be2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e35537ac8fb50ec91d46b9961efd68a3857be2c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9046be4ffa0a941b15315317a90b437f2c1ac28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9046be4ffa0a941b15315317a90b437f2c1ac28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9046be4ffa0a941b15315317a90b437f2c1ac28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9046be4ffa0a941b15315317a90b437f2c1ac28/comments", "author": null, "committer": null, "parents": [{"sha": "5320d4e4af76120a402d0c5adef0d1bc92d66e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5320d4e4af76120a402d0c5adef0d1bc92d66e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5320d4e4af76120a402d0c5adef0d1bc92d66e40"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "3a1d65368338022ca4dea7c64796b18f84a5fdc3", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=e9046be4ffa0a941b15315317a90b437f2c1ac28", "patch": "@@ -2096,6 +2096,9 @@ div instruction.\n ARM target supports ARMv8-M Security Extensions, enabled by the @code{-mcmse}\n option.\n \n+@item arm_cmse_hw\n+Test system supports executing CMSE instructions.\n+\n @item arm_coproc1_ok\n @anchor{arm_coproc1_ok}\n ARM target supports the following coprocessor instructions: @code{CDP},"}, {"sha": "5685f744435cac17d65f8896dcefdf657ad3dd45", "filename": "gcc/testsuite/gcc.target/arm/cmse/bitfield-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-1.c?ref=e9046be4ffa0a941b15315317a90b437f2c1ac28", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run } */\n+/* This test is executed only if the execution engine supports CMSE instructions.  */\n /* { dg-options \"--save-temps -mcmse -Wl,--section-start,.gnu.sgstubs=0x00400000\" } */\n \n typedef struct"}, {"sha": "7a794d446448ad2f3ca5329098cf7a4abac93bdf", "filename": "gcc/testsuite/gcc.target/arm/cmse/bitfield-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-2.c?ref=e9046be4ffa0a941b15315317a90b437f2c1ac28", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run } */\n+/* This test is executed only if the execution engine supports CMSE instructions.  */\n /* { dg-options \"--save-temps -mcmse -Wl,--section-start,.gnu.sgstubs=0x00400000\" } */\n \n typedef struct"}, {"sha": "5875f8dff486e3e44cec91a255acf4d08c6c6a7e", "filename": "gcc/testsuite/gcc.target/arm/cmse/bitfield-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-3.c?ref=e9046be4ffa0a941b15315317a90b437f2c1ac28", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run } */\n+/* This test is executed only if the execution engine supports CMSE instructions.  */\n /* { dg-options \"--save-temps -mcmse -Wl,--section-start,.gnu.sgstubs=0x00400000\" } */\n \n typedef struct"}, {"sha": "6a243d5fa8d26ac2b83aa1575144ddf7dfdf56ff", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-16.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-16.c?ref=e9046be4ffa0a941b15315317a90b437f2c1ac28", "patch": "@@ -1,4 +1,8 @@\n-/* { dg-do run } */\n+/* This test is executed only if the execution engine supports CMSE instructions.  */\n+/* Note that it \"passes\" on qemu-arm while it shouldn't because that simulator\n+   does not model secure memory: it's better to skip it in this case, and rely\n+   on do-what-default as set in cmse.exp. (It works as expected with\n+   qemu-system-mode).  */\n /* { dg-options \"-Os -mcmse\" }  */\n \n #include <arm_cmse.h>"}, {"sha": "4da1a465547c06d109bde20e448fa93c9ebaa10a", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse.exp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse.exp?ref=e9046be4ffa0a941b15315317a90b437f2c1ac28", "patch": "@@ -34,7 +34,12 @@ if ![info exists DEFAULT_CFLAGS] then {\n dg-init\n \n set saved-dg-do-what-default ${dg-do-what-default}\n-set dg-do-what-default \"assemble\"\n+\n+if {[is-effective-target arm_cmse_hw]} then {\n+    set dg-do-what-default run\n+} else {\n+    set dg-do-what-default assemble\n+}\n \n set saved-lto_torture_options ${LTO_TORTURE_OPTIONS}\n set LTO_TORTURE_OPTIONS \"\""}, {"sha": "75a99f487e7a0cb4ab6960b6c0bf0338a9c171fd", "filename": "gcc/testsuite/gcc.target/arm/cmse/struct-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fstruct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fstruct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fstruct-1.c?ref=e9046be4ffa0a941b15315317a90b437f2c1ac28", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run } */\n+/* This test is executed only if the execution engine supports CMSE instructions.  */\n /* { dg-options \"--save-temps -mcmse -Wl,--section-start,.gnu.sgstubs=0x00400000\" } */\n \n typedef struct"}, {"sha": "a522da322aa8b1f6305fe66a106f3516e354910c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9046be4ffa0a941b15315317a90b437f2c1ac28/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e9046be4ffa0a941b15315317a90b437f2c1ac28", "patch": "@@ -4861,6 +4861,21 @@ proc check_effective_target_arm_cmse_ok {} {\n     } \"-mcmse\"];\n }\n \n+# Return 1 if the target supports executing CMSE instructions, 0\n+# otherwise.  Cache the result.\n+\n+proc check_effective_target_arm_cmse_hw { } {\n+    return [check_runtime arm_cmse_hw_available {\n+\tint __attribute__ ((cmse_nonsecure_entry)) ns_func(void)\n+\t{\n+\t    return 0;\n+\t}\n+\tint main (void)\n+\t{\n+\t    return ns_func();\n+\t}\n+    } \"-mcmse -Wl,--section-start,.gnu.sgstubs=0x00400000\"]\n+}\n # Return 1 if the target supports executing MVE instructions, 0\n # otherwise.\n "}]}