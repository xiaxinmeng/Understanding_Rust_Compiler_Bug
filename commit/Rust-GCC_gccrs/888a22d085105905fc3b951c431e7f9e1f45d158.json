{"sha": "888a22d085105905fc3b951c431e7f9e1f45d158", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg4YTIyZDA4NTEwNTkwNWZjM2I5NTFjNDMxZTdmOWUxZjQ1ZDE1OA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-10-03T05:39:32Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-10-03T05:39:32Z"}, "message": "Disallow negative steps in vectorizer.\n\ngcc/\n\n2010-10-02  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR tree-optimization/45720\n\tPR tree-optimization/45764\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_access):\n\tDon't accept backwards consecutive accesses.\n\t(vect_create_data_ref_ptr): Disallow negative steps.\n\n\t* tree-vect-stmts.c (vectorizable_store): Allow negative steps.\n\t(perm_mask_for_reverse): Removed.\n\t(reverse_vec_elements): Likewise.\n\t(vectorizable_load): Don't hanle negative steps.\n\ngcc/testsuite/\n\n2010-10-02  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR tree-optimization/45720\n\tPR tree-optimization/45764\n\t* g++.dg/torture/pr45764.C: New.\n\n\t* gcc.dg/vect/pr43432.c: Xfail.\n\t* gcc.dg/vect/vect-114.c: Likewise.\n\t* gcc.dg/vect/vect-15.c: Likewise.\n\nFrom-SVN: r164914", "tree": {"sha": "fd1eea306f2f5ca977aaaa32728dc316b851f9d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd1eea306f2f5ca977aaaa32728dc316b851f9d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/888a22d085105905fc3b951c431e7f9e1f45d158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888a22d085105905fc3b951c431e7f9e1f45d158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888a22d085105905fc3b951c431e7f9e1f45d158", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888a22d085105905fc3b951c431e7f9e1f45d158/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "128dbdd219963f41e167c349653ba3e628775fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128dbdd219963f41e167c349653ba3e628775fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/128dbdd219963f41e167c349653ba3e628775fff"}], "stats": {"total": 168, "additions": 52, "deletions": 116}, "files": [{"sha": "41190f98c2763f733f61109e9397bd6e5d5a3d7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=888a22d085105905fc3b951c431e7f9e1f45d158", "patch": "@@ -1,3 +1,16 @@\n+2010-10-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR tree-optimization/45720\n+\tPR tree-optimization/45764\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_access):\n+\tDon't accept backwards consecutive accesses.\n+\t(vect_create_data_ref_ptr): Disallow negative steps.\n+\n+\t* tree-vect-stmts.c (vectorizable_store): Allow negative steps.\n+\t(perm_mask_for_reverse): Removed.\n+\t(reverse_vec_elements): Likewise.\n+\t(vectorizable_load): Don't hanle negative steps.\n+\n 2010-10-02  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-ccp.c (ccp_fold_stmt): Fold away OBJ_TYPE_REF when"}, {"sha": "3319f7adcdec3d7aaf05ec59b50647f7e8dfc2e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=888a22d085105905fc3b951c431e7f9e1f45d158", "patch": "@@ -1,3 +1,13 @@\n+2010-10-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR tree-optimization/45720\n+\tPR tree-optimization/45764\n+\t* g++.dg/torture/pr45764.C: New.\n+\n+\t* gcc.dg/vect/pr43432.c: Xfail.\n+\t* gcc.dg/vect/vect-114.c: Likewise.\n+\t* gcc.dg/vect/vect-15.c: Likewise.\n+\n 2010-10-02  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* gcc.dg/torture/pr45678-1.c: Add -fno-common to options on 32-bit"}, {"sha": "56f32be3695ab9d6d5c33b7de7faa37aa0487014", "filename": "gcc/testsuite/g++.dg/torture/pr45764.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45764.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45764.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45764.C?ref=888a22d085105905fc3b951c431e7f9e1f45d158", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do run }\n+\n+int result[64][16];\n+\n+int main()\n+{\n+        double dbuf[1000] = {0.0};\n+        int ibuf[900];\n+\n+        double d1 = 0.0;\n+        double d2 = 0.0;\n+        for (int i = 0; i < 900; ++i) {\n+                ibuf[i] = int(d2 - d1);\n+                d1 += dbuf[i];\n+                d2 += dbuf[i + 64];\n+        }\n+\n+        for (int i = 0; i < 64; ++i) {\n+                for (int j = 0; j < 8; ++j) {\n+                        result[i][     j] = ibuf[64 - i + 64 * j];\n+                        result[i][15 - j] = ibuf[     i + 64 * j];\n+                }\n+        }\n+\treturn 0;\n+}"}, {"sha": "a979a5c60a6998d17ec08adc50927c2f8c6ade87", "filename": "gcc/testsuite/gcc.dg/vect/pr43432.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43432.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43432.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43432.c?ref=888a22d085105905fc3b951c431e7f9e1f45d158", "patch": "@@ -10,5 +10,5 @@ int len){\n         dst[i] = src0[i] * src1[-i];\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_perm } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_perm } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "4964a83f9e78bb43eb24454122835e9dbf9a92a2", "filename": "gcc/testsuite/gcc.dg/vect/vect-114.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c?ref=888a22d085105905fc3b951c431e7f9e1f45d158", "patch": "@@ -35,6 +35,6 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { target { ! vect_perm } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_perm } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_perm } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "d4621d37ceeba23b30f117a9b3feefa0979aee8d", "filename": "gcc/testsuite/gcc.dg/vect/vect-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c?ref=888a22d085105905fc3b951c431e7f9e1f45d158", "patch": "@@ -35,5 +35,5 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_perm } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_perm } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "0d1e33817383c8dc3e659241474fc003f1ac1415", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=888a22d085105905fc3b951c431e7f9e1f45d158", "patch": "@@ -2287,9 +2287,7 @@ vect_analyze_data_ref_access (struct data_reference *dr)\n     }\n \n   /* Consecutive?  */\n-  if (!tree_int_cst_compare (step, TYPE_SIZE_UNIT (scalar_type))\n-      || (dr_step < 0\n-\t  && !compare_tree_int (TYPE_SIZE_UNIT (scalar_type), -dr_step)))\n+  if (!tree_int_cst_compare (step, TYPE_SIZE_UNIT (scalar_type)))\n     {\n       /* Mark that it is not interleaving.  */\n       DR_GROUP_FIRST_DR (vinfo_for_stmt (stmt)) = NULL;\n@@ -2972,7 +2970,6 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n   tree vptr;\n   gimple_stmt_iterator incr_gsi;\n   bool insert_after;\n-  bool negative;\n   tree indx_before_incr, indx_after_incr;\n   gimple incr;\n   tree step;\n@@ -3005,7 +3002,6 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n     *inv_p = true;\n   else\n     *inv_p = false;\n-  negative = tree_int_cst_compare (step, size_zero_node) < 0;\n \n   /* Create an expression for the first address accessed by this load\n      in LOOP.  */\n@@ -3164,8 +3160,6 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n \t LOOP is zero. In this case the step here is also zero.  */\n       if (*inv_p)\n \tstep = size_zero_node;\n-      else if (negative)\n-\tstep = fold_build1 (NEGATE_EXPR, TREE_TYPE (step), step);\n \n       standard_iv_increment_position (loop, &incr_gsi, &insert_after);\n "}, {"sha": "a758410add8ca4d5c3d7aa944eedb81e18855342", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888a22d085105905fc3b951c431e7f9e1f45d158/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=888a22d085105905fc3b951c431e7f9e1f45d158", "patch": "@@ -3145,13 +3145,6 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   if (!STMT_VINFO_DATA_REF (stmt_info))\n     return false;\n \n-  if (tree_int_cst_compare (DR_STEP (dr), size_zero_node) < 0)\n-    {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"negative step for store.\");\n-      return false;\n-    }\n-\n   if (STMT_VINFO_STRIDED_ACCESS (stmt_info))\n     {\n       strided_store = true;\n@@ -3432,68 +3425,6 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   return true;\n }\n \n-/* Given a vector type VECTYPE returns a builtin DECL to be used\n-   for vector permutation and stores a mask into *MASK that implements\n-   reversal of the vector elements.  If that is impossible to do\n-   returns NULL (and *MASK is unchanged).  */\n-\n-static tree\n-perm_mask_for_reverse (tree vectype, tree *mask)\n-{\n-  tree builtin_decl;\n-  tree mask_element_type, mask_type;\n-  tree mask_vec = NULL;\n-  int i;\n-  int nunits;\n-  if (!targetm.vectorize.builtin_vec_perm)\n-    return NULL;\n-\n-  builtin_decl = targetm.vectorize.builtin_vec_perm (vectype,\n-                                                     &mask_element_type);\n-  if (!builtin_decl || !mask_element_type)\n-    return NULL;\n-\n-  mask_type = get_vectype_for_scalar_type (mask_element_type);\n-  nunits = TYPE_VECTOR_SUBPARTS (vectype);\n-  if (TYPE_VECTOR_SUBPARTS (vectype) != TYPE_VECTOR_SUBPARTS (mask_type))\n-    return NULL;\n-\n-  for (i = 0; i < nunits; i++)\n-    mask_vec = tree_cons (NULL, build_int_cst (mask_element_type, i), mask_vec);\n-  mask_vec = build_vector (mask_type, mask_vec);\n-\n-  if (!targetm.vectorize.builtin_vec_perm_ok (vectype, mask_vec))\n-    return NULL;\n-  if (mask)\n-    *mask = mask_vec;\n-  return builtin_decl;\n-}\n-\n-/* Given a vector variable X, that was generated for the scalar LHS of\n-   STMT, generate instructions to reverse the vector elements of X,\n-   insert them a *GSI and return the permuted vector variable.  */\n-\n-static tree\n-reverse_vec_elements (tree x, gimple stmt, gimple_stmt_iterator *gsi)\n-{\n-  tree vectype = TREE_TYPE (x);\n-  tree mask_vec, builtin_decl;\n-  tree perm_dest, data_ref;\n-  gimple perm_stmt;\n-\n-  builtin_decl = perm_mask_for_reverse (vectype, &mask_vec);\n-\n-  perm_dest = vect_create_destination_var (gimple_assign_lhs (stmt), vectype);\n-\n-  /* Generate the permute statement.  */\n-  perm_stmt = gimple_build_call (builtin_decl, 3, x, x, mask_vec);\n-  data_ref = make_ssa_name (perm_dest, perm_stmt);\n-  gimple_call_set_lhs (perm_stmt, data_ref);\n-  vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n-\n-  return data_ref;\n-}\n-\n /* vectorizable_load.\n \n    Check if STMT reads a non scalar data-ref (array/pointer/structure) that\n@@ -3536,7 +3467,6 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   gimple first_stmt;\n   tree scalar_type;\n   bool inv_p;\n-  bool negative;\n   bool compute_in_loop = false;\n   struct loop *at_loop;\n   int vec_num;\n@@ -3599,14 +3529,6 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   if (!STMT_VINFO_DATA_REF (stmt_info))\n     return false;\n \n-  negative = tree_int_cst_compare (DR_STEP (dr), size_zero_node) < 0;\n-  if (negative && ncopies > 1)\n-    {\n-      if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"multiple types with negative step.\");\n-      return false;\n-    }\n-\n   scalar_type = TREE_TYPE (DR_REF (dr));\n   mode = TYPE_MODE (vectype);\n \n@@ -3641,25 +3563,6 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \treturn false;\n     }\n \n-  if (negative)\n-    {\n-      gcc_assert (!strided_load);\n-      alignment_support_scheme = vect_supportable_dr_alignment (dr, false);\n-      if (alignment_support_scheme != dr_aligned\n-\t  && alignment_support_scheme != dr_unaligned_supported)\n-\t{\n-\t  if (vect_print_dump_info (REPORT_DETAILS))\n-\t    fprintf (vect_dump, \"negative step but alignment required.\");\n-\t  return false;\n-\t}\n-      if (!perm_mask_for_reverse (vectype, NULL))\n-\t{\n-\t  if (vect_print_dump_info (REPORT_DETAILS))\n-\t    fprintf (vect_dump, \"negative step and reversing not supported.\");\n-\t  return false;\n-\t}\n-    }\n-\n   if (!vec_stmt) /* transformation not required.  */\n     {\n       STMT_VINFO_TYPE (stmt_info) = load_vec_info_type;\n@@ -3834,9 +3737,6 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   else\n     at_loop = loop;\n \n-  if (negative)\n-    offset = size_int (-TYPE_VECTOR_SUBPARTS (vectype) + 1);\n-\n   prev_stmt_info = NULL;\n   for (j = 0; j < ncopies; j++)\n     {\n@@ -4025,12 +3925,6 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\tgcc_unreachable (); /* FORNOW. */\n \t    }\n \n-\t  if (negative)\n-\t    {\n-\t      new_temp = reverse_vec_elements (new_temp, stmt, gsi);\n-\t      new_stmt = SSA_NAME_DEF_STMT (new_temp);\n-\t    }\n-\n \t  /* Collect vector loads and later create their permutation in\n \t     vect_transform_strided_load ().  */\n           if (strided_load || slp_perm)"}]}