{"sha": "3b8d33ef1d3979b83e0085ab8a87b06b48399441", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I4ZDMzZWYxZDM5NzliODNlMDA4NWFiOGE4N2IwNmI0ODM5OTQ0MQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-03-26T07:37:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:37:49Z"}, "message": "par.adb (Check_No_Right_Paren): Removed no longer used\n\n2008-03-26  Robert Dewar  <dewar@adacore.com>\n\n\t* par.adb (Check_No_Right_Paren): Removed no longer used\n\n\t* par-ch10.adb (N_Pragma): Chars field removed, use Chars\n\t(Pragma_Identifier (..  instead.\n\n\t* par-ch10.adb (P_Subunit): Improvement in error recovery and message\n\n\t* par-tchk.adb, par-ch5.adb, par-ch6.adb, par-ch3.adb,\n\tpar-ch4.adb: Minor improvements in error recovery and messages.\n\n\t* erroutc.adb (Test_Style_Warning_Serious_Msg): Treat style msgs as\n\tnon-serious\n\n\t* par-ch9.adb: Minor improvements in error recovery and messages\n\t(P_Protected): Better error recovery for \"protected type x;\"\n\n\t* par-util.adb: Minor improvements in error recovery and messages\n\t(Check_No_Right_Paren): Removed no longer used\n\nFrom-SVN: r133557", "tree": {"sha": "9d1f0e5b1c9f80ad8a1def0a2041c72ffa1a6555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d1f0e5b1c9f80ad8a1def0a2041c72ffa1a6555"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b8d33ef1d3979b83e0085ab8a87b06b48399441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8d33ef1d3979b83e0085ab8a87b06b48399441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8d33ef1d3979b83e0085ab8a87b06b48399441", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8d33ef1d3979b83e0085ab8a87b06b48399441/comments", "author": null, "committer": null, "parents": [{"sha": "14f1ec15bd8860dee913a2207f598baddf13ae94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f1ec15bd8860dee913a2207f598baddf13ae94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f1ec15bd8860dee913a2207f598baddf13ae94"}], "stats": {"total": 245, "additions": 139, "deletions": 106}, "files": [{"sha": "383f0189bc30bdfd6e04e4f3e4369d31ff6f2013", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=3b8d33ef1d3979b83e0085ab8a87b06b48399441", "patch": "@@ -1201,7 +1201,11 @@ package body Erroutc is\n \n       Is_Style_Msg :=\n         (Msg'Length > 7\n-           and then Msg (Msg'First .. Msg'First + 6) = \"(style)\");\n+         and then Msg (Msg'First .. Msg'First + 6) = \"(style)\");\n+\n+      if Is_Style_Msg then\n+         Is_Serious_Error := False;\n+      end if;\n \n       for J in Msg'Range loop\n          if Msg (J) = '?'"}, {"sha": "0a31616351ebbd700c2ec0733fd547859c83fb44", "filename": "gcc/ada/par-ch10.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch10.adb?ref=3b8d33ef1d3979b83e0085ab8a87b06b48399441", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -150,7 +150,7 @@ package body Ch10 is\n          Item := P_Pragma;\n \n          if Item = Error\n-           or else Chars (Item) /= Name_Source_Reference\n+           or else Pragma_Name (Item) /= Name_Source_Reference\n          then\n             Restore_Scan_State (Scan_State);\n \n@@ -180,7 +180,8 @@ package body Ch10 is\n          Item := P_Pragma;\n \n          if Item = Error\n-           or else not Is_Configuration_Pragma_Name (Chars (Item))\n+           or else not\n+             Is_Configuration_Pragma_Name (Pragma_Name (Item))\n          then\n             Restore_Scan_State (Scan_State);\n             exit;\n@@ -1024,10 +1025,7 @@ package body Ch10 is\n       Set_Name (Subunit_Node, P_Qualified_Simple_Name);\n       U_Right_Paren;\n \n-      if Token = Tok_Semicolon then\n-         Error_Msg_SC (\"unexpected semicolon ignored\");\n-         Scan;\n-      end if;\n+      Ignore (Tok_Semicolon);\n \n       if Token = Tok_Function or else Token = Tok_Procedure then\n          Body_Node := P_Subprogram (Pf_Pbod);"}, {"sha": "7889cd85a931bbf8fd0157bd28ff336668db7648", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=3b8d33ef1d3979b83e0085ab8a87b06b48399441", "patch": "@@ -1316,7 +1316,7 @@ package body Ch3 is\n             Check_Misspelling_Of (Tok_Renames);\n \n             if Token = Tok_Renames then\n-               Error_Msg_SP (\"extra \"\":\"\" ignored\");\n+               Error_Msg_SP (\"|extra \"\":\"\" ignored\");\n                Scan; -- past RENAMES\n                return True;\n             else\n@@ -2290,7 +2290,7 @@ package body Ch3 is\n       --  Handle decimal fixed-point defn with DIGITS/DELTA in wrong order\n \n       if Token = Tok_Delta then\n-         Error_Msg_SC (\"DELTA must come before DIGITS\");\n+         Error_Msg_SC (\"|DELTA must come before DIGITS\");\n          Def_Node := New_Node (N_Decimal_Fixed_Point_Definition, Digits_Loc);\n          Scan; -- past DELTA\n          Set_Delta_Expression (Def_Node, P_Expression_No_Right_Paren);\n@@ -3542,7 +3542,7 @@ package body Ch3 is\n          else\n             begin\n                Expr_Node := P_Expression_Or_Range_Attribute;\n-               Check_No_Right_Paren;\n+               Ignore (Tok_Right_Paren);\n \n                if Token = Tok_Colon\n                  and then Nkind (Expr_Node) = N_Identifier\n@@ -4176,7 +4176,7 @@ package body Ch3 is\n                   --  Otherwise we saved the semicolon position, so complain\n \n                   else\n-                     Error_Msg (\"\"\";\"\" should be IS\", SIS_Semicolon_Sloc);\n+                     Error_Msg (\"|\"\";\"\" should be IS\", SIS_Semicolon_Sloc);\n                   end if;\n \n                   --  The next job is to fix up any declarations that occurred"}, {"sha": "93c8f9ea98872b5c158979757be897c74a900762", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=3b8d33ef1d3979b83e0085ab8a87b06b48399441", "patch": "@@ -32,9 +32,7 @@ with Stringt; use Stringt;\n separate (Par)\n package body Ch4 is\n \n-   ---------------\n-   -- Local map --\n-   ---------------\n+   --  Attributes that cannot have arguments\n \n    Is_Parameterless_Attribute : constant Attribute_Class_Array :=\n      (Attribute_Body_Version => True,\n@@ -51,6 +49,14 @@ package body Ch4 is\n    --  list because it may denote a slice operation (X'Img (1 .. 2)) or\n    --  a type conversion (X'Class (Y)).\n \n+   --  Note that this map designates the minimum set of attributes where a\n+   --  construct in parentheses that is not an argument can appear right\n+   --  after the attribute. For attributes like 'Size, we do not put them\n+   --  in the map. If someone writes X'Size (3), that's illegal in any case,\n+   --  but we get a better error message by parsing the (3) as an illegal\n+   --  argument to the attribute, rather than some meaningless junk that\n+   --  follows the attribute.\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -405,7 +411,7 @@ package body Ch4 is\n             begin\n                if Token_Is_At_Start_Of_Line then\n                   Restore_Scan_State (Scan_State); -- to apostrophe\n-                  Error_Msg_SC (\"\"\"''\"\" should be \"\";\"\"\");\n+                  Error_Msg_SC (\"|\"\"''\"\" should be \"\";\"\"\");\n                   Token := Tok_Semicolon;\n                   return True;\n                else\n@@ -501,11 +507,12 @@ package body Ch4 is\n             Set_Prefix (Name_Node, Prefix_Node);\n             Set_Attribute_Name (Name_Node, Attr_Name);\n \n-            --  Scan attribute arguments/designator\n+            --  Scan attribute arguments/designator. We skip this if we know\n+            --  that the attribute cannot have an argument.\n \n             if Token = Tok_Left_Paren\n-                 and then\n-               not Is_Parameterless_Attribute (Get_Attribute_Id (Attr_Name))\n+              and then not\n+                Is_Parameterless_Attribute (Get_Attribute_Id (Attr_Name))\n             then\n                Set_Expressions (Name_Node, New_List);\n                Scan; -- past left paren\n@@ -1599,7 +1606,7 @@ package body Ch4 is\n    function P_Expression_No_Right_Paren return Node_Id is\n       Expr : constant Node_Id := P_Expression;\n    begin\n-      Check_No_Right_Paren;\n+      Ignore (Tok_Right_Paren);\n       return Expr;\n    end P_Expression_No_Right_Paren;\n \n@@ -2332,7 +2339,7 @@ package body Ch4 is\n                   return P_Identifier;\n \n                elsif Prev_Token = Tok_Comma then\n-                  Error_Msg_SP (\"extra \"\",\"\" ignored\");\n+                  Error_Msg_SP (\"|extra \"\",\"\" ignored\");\n                   raise Error_Resync;\n \n                else\n@@ -2430,7 +2437,7 @@ package body Ch4 is\n \n    begin\n       if Token = Tok_Box then\n-         Error_Msg_SC (\"\"\"'<'>\"\" should be \"\"/=\"\"\");\n+         Error_Msg_SC (\"|\"\"'<'>\"\" should be \"\"/=\"\"\");\n       end if;\n \n       Op_Kind := Relop_Node (Token);"}, {"sha": "a2318406a7e69ea76c3edf0f5e87fffbdc3078ee", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=3b8d33ef1d3979b83e0085ab8a87b06b48399441", "patch": "@@ -203,10 +203,7 @@ package body Ch5 is\n       Statement_Required := SS_Flags.Sreq;\n \n       loop\n-         while Token = Tok_Semicolon loop\n-            Error_Msg_SC (\"unexpected semicolon ignored\");\n-            Scan; -- past junk semicolon\n-         end loop;\n+         Ignore (Tok_Semicolon);\n \n          begin\n             if Style_Check then\n@@ -565,10 +562,7 @@ package body Ch5 is\n \n                      --  Skip junk right parens in this context\n \n-                     while Token = Tok_Right_Paren loop\n-                        Error_Msg_SC (\"extra right paren\");\n-                        Scan; -- past )\n-                     end loop;\n+                     Ignore (Tok_Right_Paren);\n \n                      --  Check context following call\n \n@@ -2200,7 +2194,7 @@ package body Ch5 is\n       --  What we are interested in is whether it was a case of a bad IS.\n \n       if Scope.Table (Scope.Last + 1).Etyp = E_Bad_Is then\n-         Error_Msg (\"IS should be \"\";\"\"\", Scope.Table (Scope.Last + 1).S_Is);\n+         Error_Msg (\"|IS should be \"\";\"\"\", Scope.Table (Scope.Last + 1).S_Is);\n          Set_Bad_Is_Detected (Parent, True);\n       end if;\n \n@@ -2235,7 +2229,7 @@ package body Ch5 is\n \n       if Token = Tok_And or else Token = Tok_Or then\n          Error_Msg_SC (\"unexpected logical operator\");\n-         Scan;\n+         Scan; -- past logical operator\n \n          if (Prev_Token = Tok_And and then Token = Tok_Then)\n               or else"}, {"sha": "2fc0ace4945fee6c96a99cf54ec60fd201434cc8", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=3b8d33ef1d3979b83e0085ab8a87b06b48399441", "patch": "@@ -64,9 +64,8 @@ package body Ch6 is\n \n          if Token = Tok_Return then\n             Restore_Scan_State (Scan_State);\n-            Error_Msg_SC (\"unexpected semicolon ignored\");\n+            Error_Msg_SC (\"|extra \"\";\"\" ignored\");\n             Scan; -- rescan past junk semicolon\n-\n          else\n             Restore_Scan_State (Scan_State);\n          end if;\n@@ -265,11 +264,7 @@ package body Ch6 is\n       end if;\n \n       Scope.Table (Scope.Last).Labl := Name_Node;\n-\n-      if Token = Tok_Colon then\n-         Error_Msg_SC (\"redundant colon ignored\");\n-         Scan; -- past colon\n-      end if;\n+      Ignore (Tok_Colon);\n \n       --  Deal with generic instantiation, the one case in which we do not\n       --  have a subprogram specification as part of whatever we are parsing\n@@ -411,6 +406,19 @@ package body Ch6 is\n          Discard_Junk_Node (P_Expression);\n       end if;\n \n+      --  Deal with semicolon followed by IS. We want to treat this as IS\n+\n+      if Token = Tok_Semicolon then\n+         Save_Scan_State (Scan_State);\n+         Scan; -- past semicolon\n+\n+         if Token = Tok_Is then\n+            Error_Msg_SP (\"extra \"\";\"\" ignored\");\n+         else\n+            Restore_Scan_State (Scan_State);\n+         end if;\n+      end if;\n+\n       --  Deal with case of semicolon ending a subprogram declaration\n \n       if Token = Tok_Semicolon then\n@@ -424,8 +432,8 @@ package body Ch6 is\n          --  semicolon, and go process the body.\n \n          if Token = Tok_Is then\n-            Error_Msg_SP (\"unexpected semicolon ignored\");\n-            T_Is; -- ignroe redundant IS's\n+            Error_Msg_SP (\"|extra \"\";\"\" ignored\");\n+            T_Is; -- scan past IS\n             goto Subprogram_Body;\n \n          --  If BEGIN follows in an appropriate column, we immediately\n@@ -436,7 +444,7 @@ package body Ch6 is\n          elsif Token = Tok_Begin\n             and then Start_Column >= Scope.Table (Scope.Last).Ecol\n          then\n-            Error_Msg_SP (\"\"\";\"\" should be IS!\");\n+            Error_Msg_SP (\"|\"\";\"\" should be IS!\");\n             goto Subprogram_Body;\n \n          else\n@@ -540,7 +548,7 @@ package body Ch6 is\n          --  semicolon which should really be an IS\n \n          else\n-            Error_Msg_AP (\"missing \"\";\"\"\");\n+            Error_Msg_AP (\"|missing \"\";\"\"\");\n             SIS_Missing_Semicolon_Message := Get_Msg_Id;\n             goto Subprogram_Declaration;\n          end if;\n@@ -1203,7 +1211,7 @@ package body Ch6 is\n             --  that semicolon should have been a right parenthesis and exit\n \n             if Token = Tok_Is or else Token = Tok_Return then\n-               Error_Msg_SP (\"expected \"\")\"\" in place of \"\";\"\"\");\n+               Error_Msg_SP (\"|\"\";\"\" should be \"\")\"\"\");\n                exit Specification_Loop;\n             end if;\n "}, {"sha": "241b2db54ef4b7b4e1aea402778703dee9299c45", "filename": "gcc/ada/par-ch9.adb", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch9.adb?ref=3b8d33ef1d3979b83e0085ab8a87b06b48399441", "patch": "@@ -154,7 +154,7 @@ package body Ch9 is\n             Scan; -- past semicolon\n \n             if Token = Tok_Entry then\n-               Error_Msg_SP (\"\"\";\"\" should be IS\");\n+               Error_Msg_SP (\"|\"\";\"\" should be IS\");\n                Set_Task_Definition (Task_Node, P_Task_Definition);\n             else\n                Pop_Scope_Stack; -- Remove unused entry\n@@ -371,6 +371,7 @@ package body Ch9 is\n       Name_Node      : Node_Id;\n       Protected_Node : Node_Id;\n       Protected_Sloc : Source_Ptr;\n+      Scan_State     : Saved_Scan_State;\n \n    begin\n       Push_Scope_Stack;\n@@ -439,6 +440,35 @@ package body Ch9 is\n             Scope.Table (Scope.Last).Labl := Name_Node;\n          end if;\n \n+         --  Check for semicolon not followed by IS, this is something like\n+\n+         --    protected type r;\n+\n+         --  where we want\n+\n+         --    protected type r IS END;\n+\n+         if Token = Tok_Semicolon then\n+            Save_Scan_State (Scan_State); -- at semicolon\n+            Scan; -- past semicolon\n+\n+            if Token /= Tok_Is then\n+               Restore_Scan_State (Scan_State);\n+               Error_Msg_SC (\"missing IS\");\n+               Set_Protected_Definition (Protected_Node,\n+                 Make_Protected_Definition (Token_Ptr,\n+                   Visible_Declarations => Empty_List,\n+                   End_Label           => Empty));\n+\n+               SIS_Entry_Active := False;\n+               End_Statements (Protected_Definition (Protected_Node));\n+               Scan; -- past semicolon\n+               return Protected_Node;\n+            end if;\n+\n+            Error_Msg_SP (\"|extra \"\"(\"\" ignored\");\n+         end if;\n+\n          T_Is;\n \n          --  Ada 2005 (AI-345)\n@@ -1081,7 +1111,7 @@ package body Ch9 is\n          Bnode := P_Expression_No_Right_Paren;\n \n          if Token = Tok_Colon_Equal then\n-            Error_Msg_SC (\"\"\":=\"\" should be \"\"=\"\"\");\n+            Error_Msg_SC (\"|\"\":=\"\" should be \"\"=\"\"\");\n             Scan;\n             Bnode := P_Expression_No_Right_Paren;\n          end if;"}, {"sha": "3ec1a2bea0677cc257f515c121c65dc99c3e40ff", "filename": "gcc/ada/par-tchk.adb", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-tchk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-tchk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-tchk.adb?ref=3b8d33ef1d3979b83e0085ab8a87b06b48399441", "patch": "@@ -83,11 +83,11 @@ package body Tchk is\n       --  A little recovery helper, accept then in place of =>\n \n       elsif Token = Tok_Then then\n-         Error_Msg_BC (\"missing \"\"='>\"\"\");\n+         Error_Msg_BC (\"|THEN should be \"\"='>\"\"\");\n          Scan; -- past THEN used in place of =>\n \n       elsif Token = Tok_Colon_Equal then\n-         Error_Msg_SC (\"\"\":=\"\" should be \"\"='>\"\"\");\n+         Error_Msg_SC (\"|\"\":=\"\" should be \"\"='>\"\"\");\n          Scan; -- past := used in place of =>\n \n       else\n@@ -149,15 +149,15 @@ package body Tchk is\n          Scan;\n \n       elsif Token = Tok_Equal then\n-         Error_Msg_SC (\"\"\"=\"\" should be \"\":=\"\"\");\n+         Error_Msg_SC (\"|\"\"=\"\" should be \"\":=\"\"\");\n          Scan;\n \n       elsif Token = Tok_Colon then\n-         Error_Msg_SC (\"\"\":\"\" should be \"\":=\"\"\");\n+         Error_Msg_SC (\"|\"\":\"\" should be \"\":=\"\"\");\n          Scan;\n \n       elsif Token = Tok_Is then\n-         Error_Msg_SC (\"IS should be \"\":=\"\"\");\n+         Error_Msg_SC (\"|IS should be \"\":=\"\"\");\n          Scan;\n \n       else\n@@ -257,25 +257,39 @@ package body Tchk is\n \n    procedure T_Is is\n    begin\n+      Ignore (Tok_Semicolon);\n+\n+      --  If we have IS scan past it\n+\n       if Token = Tok_Is then\n          Scan;\n \n+         --  And ignore any following semicolons\n+\n          Ignore (Tok_Semicolon);\n \n       --  Allow OF, => or = to substitute for IS with complaint\n \n-      elsif Token = Tok_Arrow\n-        or else Token = Tok_Of\n-        or else Token = Tok_Equal\n-      then\n-         Error_Msg_SC (\"missing IS\");\n-         Scan; -- token used in place of IS\n+      elsif Token = Tok_Arrow then\n+         Error_Msg_SC (\"|\"\"=>\"\" should be IS\");\n+         Scan; -- past =>\n+\n+      elsif Token = Tok_Of then\n+         Error_Msg_SC (\"|OF should be IS\");\n+         Scan; -- past OF\n+\n+      elsif Token = Tok_Equal then\n+         Error_Msg_SC (\"|\"\"=\"\" should be IS\");\n+         Scan; -- past =\n+\n       else\n          Wrong_Token (Tok_Is, AP);\n       end if;\n \n+      --  Ignore extra IS keywords\n+\n       while Token = Tok_Is loop\n-         Error_Msg_SC (\"extra IS ignored\");\n+         Error_Msg_SC (\"|extra IS ignored\");\n          Scan;\n       end loop;\n    end T_Is;\n@@ -379,7 +393,7 @@ package body Tchk is\n       if Token = Tok_Right_Paren then\n          Scan;\n       else\n-         Error_Msg_AP (\"missing \"\")\"\"\");\n+         Error_Msg_AP (\"|missing \"\")\"\"\");\n       end if;\n    end T_Right_Paren;\n \n@@ -394,24 +408,24 @@ package body Tchk is\n          Scan;\n \n          if Token = Tok_Semicolon then\n-            Error_Msg_SC (\"extra \"\";\"\" ignored\");\n+            Error_Msg_SC (\"|extra \"\";\"\" ignored\");\n             Scan;\n          end if;\n \n          return;\n \n       elsif Token = Tok_Colon then\n-         Error_Msg_SC (\"\"\":\"\" should be \"\";\"\"\");\n+         Error_Msg_SC (\"|\"\":\"\" should be \"\";\"\"\");\n          Scan;\n          return;\n \n       elsif Token = Tok_Comma then\n-         Error_Msg_SC (\"\"\",\"\" should be \"\";\"\"\");\n+         Error_Msg_SC (\"|\"\",\"\" should be \"\";\"\"\");\n          Scan;\n          return;\n \n       elsif Token = Tok_Dot then\n-         Error_Msg_SC (\"\"\".\"\" should be \"\";\"\"\");\n+         Error_Msg_SC (\"|\"\".\"\" should be \"\";\"\"\");\n          Scan;\n          return;\n \n@@ -434,7 +448,7 @@ package body Tchk is\n          return;\n \n       --  Deal with pragma. If pragma is not at start of line, it is considered\n-      --  misplaced otherwise we treat it as a normal missing semicolong case.\n+      --  misplaced otherwise we treat it as a normal missing semicolon case.\n \n       elsif Token = Tok_Pragma\n         and then not Token_Is_At_Start_Of_Line\n@@ -812,7 +826,7 @@ package body Tchk is\n       if Token = Tok_Right_Paren then\n          Scan;\n       else\n-         Error_Msg_AP (\"missing \"\")\"\"!\");\n+         Error_Msg_AP (\"|missing \"\")\"\"!\");\n       end if;\n    end U_Right_Paren;\n \n@@ -831,7 +845,7 @@ package body Tchk is\n          Scan;\n \n          if Token = T then\n-            Error_Msg_SP (\"extra \"\";\"\" ignored\");\n+            Error_Msg_SP (\"|extra \"\";\"\" ignored\");\n             Scan;\n          else\n             Error_Msg_SP (M);\n@@ -841,7 +855,7 @@ package body Tchk is\n          Scan;\n \n          if Token = T then\n-            Error_Msg_SP (\"extra \"\",\"\" ignored\");\n+            Error_Msg_SP (\"|extra \"\",\"\" ignored\");\n             Scan;\n \n          else"}, {"sha": "98f66c66ab87189336f35a246b6abc9cbd256c15", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=3b8d33ef1d3979b83e0085ab8a87b06b48399441", "patch": "@@ -109,7 +109,7 @@ package body Util is\n         and then S = Name_Buffer (1 .. SL)\n       then\n          Scan_Ptr := Token_Ptr + S'Length;\n-         Error_Msg_S (\"missing space\");\n+         Error_Msg_S (\"|missing space\");\n          Token := T;\n          return True;\n       end if;\n@@ -176,18 +176,6 @@ package body Util is\n       end if;\n    end Check_Misspelling_Of;\n \n-   --------------------------\n-   -- Check_No_Right_Paren --\n-   --------------------------\n-\n-   procedure Check_No_Right_Paren is\n-   begin\n-      if Token = Tok_Right_Paren then\n-         Error_Msg_SC (\"unexpected right parenthesis\");\n-         Scan; -- past unexpected right paren\n-      end if;\n-   end Check_No_Right_Paren;\n-\n    -----------------------------\n    -- Check_Simple_Expression --\n    -----------------------------\n@@ -343,7 +331,7 @@ package body Util is\n \n          <<Assume_Comma>>\n             Restore_Scan_State (Scan_State);\n-            Error_Msg_SC (\"\"\";\"\" illegal here, replaced by \"\",\"\"\");\n+            Error_Msg_SC (\"|\"\";\"\" should be \"\",\"\"\");\n             Scan; -- past the semicolon\n             return True;\n \n@@ -391,38 +379,33 @@ package body Util is\n \n    procedure Ignore (T : Token_Type) is\n    begin\n-      if Token = T then\n+      while Token = T loop\n          if T = Tok_Comma then\n-            Error_Msg_SC (\"unexpected \"\",\"\" ignored\");\n+            Error_Msg_SC (\"|extra \"\",\"\" ignored\");\n \n          elsif T = Tok_Left_Paren then\n-            Error_Msg_SC (\"unexpected \"\"(\"\" ignored\");\n+            Error_Msg_SC (\"|extra \"\"(\"\" ignored\");\n \n          elsif T = Tok_Right_Paren then\n-            Error_Msg_SC (\"unexpected \"\")\"\" ignored\");\n+            Error_Msg_SC (\"|extra \"\")\"\" ignored\");\n \n          elsif T = Tok_Semicolon then\n-            Error_Msg_SC (\"unexpected \"\";\"\" ignored\");\n+            Error_Msg_SC (\"|extra \"\";\"\" ignored\");\n+\n+         elsif T = Tok_Colon then\n+            Error_Msg_SC (\"|extra \"\":\"\" ignored\");\n \n          else\n             declare\n                Tname : constant String := Token_Type'Image (Token);\n-               Msg   : String := \"unexpected keyword ????????????????????????\";\n-\n             begin\n-               --  Loop to copy characters of keyword name (ignoring Tok_)\n-\n-               for J in 5 .. Tname'Last loop\n-                  Msg (J + 14) := Fold_Upper (Tname (J));\n-               end loop;\n-\n-               Msg (Tname'Last + 15 .. Tname'Last + 22) := \" ignored\";\n-               Error_Msg_SC (Msg (1 .. Tname'Last + 22));\n+               Error_Msg_SC\n+                 (\"|extra \" & Tname (5 .. Tname'Last) & \"ignored\");\n             end;\n          end if;\n \n          Scan; -- Scan past ignored token\n-      end if;\n+      end loop;\n    end Ignore;\n \n    ----------------------------\n@@ -438,7 +421,6 @@ package body Util is\n          declare\n             Ident_Casing : constant Casing_Type :=\n                              Identifier_Casing (Current_Source_File);\n-\n             Key_Casing   : constant Casing_Type :=\n                              Keyword_Casing (Current_Source_File);\n "}, {"sha": "016d5024846502e768f744ac80a099f077f012c9", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d33ef1d3979b83e0085ab8a87b06b48399441/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=3b8d33ef1d3979b83e0085ab8a87b06b48399441", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1050,10 +1050,6 @@ is\n       --  it is returned unchanged. Otherwise an error message is issued\n       --  and Error is returned.\n \n-      procedure Check_No_Right_Paren;\n-      --  Called to check that the current token is not a right paren. If it\n-      --  is, then an error is given, and the right parenthesis is scanned out.\n-\n       function Comma_Present return Boolean;\n       --  Used in comma delimited lists to determine if a comma is present, or\n       --  can reasonably be assumed to have been present (an error message is\n@@ -1256,10 +1252,10 @@ begin\n \n                   --  Give error if bad pragma\n \n-                  if not Is_Configuration_Pragma_Name (Chars (P_Node))\n-                    and then Chars (P_Node) /= Name_Source_Reference\n+                  if not Is_Configuration_Pragma_Name (Pragma_Name (P_Node))\n+                    and then Pragma_Name (P_Node) /= Name_Source_Reference\n                   then\n-                     if Is_Pragma_Name (Chars (P_Node)) then\n+                     if Is_Pragma_Name (Pragma_Name (P_Node)) then\n                         Error_Msg_N\n                           (\"only configuration pragmas allowed \" &\n                            \"in configuration file\", P_Node);"}]}