{"sha": "243874426dddf0cd56031eea8bbb7b3986f37baa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQzODc0NDI2ZGRkZjBjZDU2MDMxZWVhOGJiYjdiMzk4NmYzN2JhYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-03-05T18:37:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-03-05T18:37:24Z"}, "message": "Define midpoint and lerp functions for C++20 (P0811R3)\n\nThe implementation of midpoint used for integral types is due to Howard\nHinnant and avoids a branch for int and larger types (but not for chars\nand shorts).\n\nThe midpoint and lerp functions for floating point types come straight\nfrom the P0811R3 proposal, with no attempt at optimization.\n\n\t* include/c_compatibility/math.h [C++20] (lerp): Add using\n\tdeclaration.\n\t* include/c_global/cmath [C++20] (__cpp_lib_interpolate): Define.\n\t(__lerp): Define function template to implement lerp.\n\t(lerp(float, float, float), lerp(double, double, double))\n\t(lerp(long double, long double, long double)): Define for C++20.\n\t* include/std/numeric [C++20] (__cpp_lib_interpolate): Define.\n\t(midpoint(T, T), midpoint(T*, T*)): Define.\n\t* include/std::version [C++20] (__cpp_lib_interpolate): Define.\n\t* testsuite/26_numerics/lerp.cc: New test.\n\t* testsuite/26_numerics/midpoint/floating.cc: New test.\n\t* testsuite/26_numerics/midpoint/integral.cc: New test.\n\t* testsuite/26_numerics/midpoint/pointer.cc: New test.\n\nFrom-SVN: r269398", "tree": {"sha": "37e454c2ac25aa892570e55690083e4436b43bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e454c2ac25aa892570e55690083e4436b43bcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/243874426dddf0cd56031eea8bbb7b3986f37baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243874426dddf0cd56031eea8bbb7b3986f37baa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243874426dddf0cd56031eea8bbb7b3986f37baa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243874426dddf0cd56031eea8bbb7b3986f37baa/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c3b1337fbd9216c3c7c6c28066df8abf45cccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c3b1337fbd9216c3c7c6c28066df8abf45cccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c3b1337fbd9216c3c7c6c28066df8abf45cccb"}], "stats": {"total": 474, "additions": 473, "deletions": 1}, "files": [{"sha": "44bf6e72c6502ccfdccc5f47bca62ecfb8e82786", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=243874426dddf0cd56031eea8bbb7b3986f37baa", "patch": "@@ -1,3 +1,19 @@\n+2019-03-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/c_compatibility/math.h [C++20] (lerp): Add using\n+\tdeclaration.\n+\t* include/c_global/cmath [C++20] (__cpp_lib_interpolate): Define.\n+\t(__lerp): Define function template to implement lerp.\n+\t(lerp(float, float, float), lerp(double, double, double))\n+\t(lerp(long double, long double, long double)): Define for C++20.\n+\t* include/std/numeric [C++20] (__cpp_lib_interpolate): Define.\n+\t(midpoint(T, T), midpoint(T*, T*)): Define.\n+\t* include/std::version [C++20] (__cpp_lib_interpolate): Define.\n+\t* testsuite/26_numerics/lerp.cc: New test.\n+\t* testsuite/26_numerics/midpoint/floating.cc: New test.\n+\t* testsuite/26_numerics/midpoint/integral.cc: New test.\n+\t* testsuite/26_numerics/midpoint/pointer.cc: New test.\n+\n 2019-03-04  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR libstdc++/88996 Implement P0439R0"}, {"sha": "d9fe94ca26e4112e787e0f81daee0ccf39a7d47a", "filename": "libstdc++-v3/include/c_compatibility/math.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h?ref=243874426dddf0cd56031eea8bbb7b3986f37baa", "patch": "@@ -177,5 +177,9 @@ using std::sph_neumannl;\n using std::sph_neumann;\n #endif // _GLIBCXX_USE_STD_SPEC_FUNCS\n \n+#if __cplusplus > 201703L\n+using std::lerp;\n+#endif // C++20\n+\n #endif // _GLIBCXX_MATH_H\n #endif // __cplusplus"}, {"sha": "b843c18f1dac67fd70a2bfc2da1323a01e3483e4", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=243874426dddf0cd56031eea8bbb7b3986f37baa", "patch": "@@ -1885,6 +1885,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif // C++17\n \n+#if __cplusplus > 201703L\n+  // linear interpolation\n+# define __cpp_lib_interpolate 201902L\n+\n+  template<typename _Fp>\n+    constexpr _Fp\n+    __lerp(_Fp __a, _Fp __b, _Fp __t)\n+    {\n+      if (__a <= 0 && __b >= 0 || __a >= 0 && __b <= 0)\n+\treturn __t * __b + (1 - __t) * __a;\n+\n+      if (__t == 1)\n+\treturn __b;                        // exact\n+\n+      // Exact at __t=0, monotonic except near __t=1,\n+      // bounded, determinate, and consistent:\n+      const _Fp __x = __a + __t * (__b - __a);\n+      return __t > 1 == __b > __a\n+\t? (__b < __x ? __x : __b)\n+\t: (__b > __x ? __x : __b);  // monotonic near __t=1\n+    }\n+\n+  constexpr float\n+  lerp(float __a, float __b, float __t)\n+  { return std::__lerp(__a, __b, __t); }\n+\n+  constexpr double\n+  lerp(double __a, double __b, double __t)\n+  { return std::__lerp(__a, __b, __t); }\n+\n+  constexpr long double\n+  lerp(long double __a, long double __b, long double __t)\n+  { return std::__lerp(__a, __b, __t); }\n+#endif // C++20\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "ce02ee369f3698f4918811a796fc8040dcaa5517", "filename": "libstdc++-v3/include/std/numeric", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric?ref=243874426dddf0cd56031eea8bbb7b3986f37baa", "patch": "@@ -119,7 +119,7 @@ namespace __detail\n     }\n } // namespace __detail\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n \n #define __cpp_lib_gcd_lcm 201606\n // These were used in drafts of SD-6:\n@@ -156,6 +156,50 @@ namespace __detail\n \n #endif // C++17\n \n+#if __cplusplus > 201703L\n+  // midpoint\n+# define __cpp_lib_interpolate 201902L\n+\n+template<typename _Tp>\n+    constexpr\n+    enable_if_t<__and_<is_arithmetic<_Tp>, is_same<remove_cv_t<_Tp>, _Tp>,\n+\t\t       __not_<is_same<_Tp, bool>>>::value,\n+\t\t_Tp>\n+    midpoint(_Tp __a, _Tp __b) noexcept\n+    {\n+      if constexpr (is_integral_v<_Tp>)\n+\t{\n+\t  using _Up = make_unsigned_t<_Tp>;\n+\n+\t  int __k = 1;\n+\t  _Up __m = __a;\n+\t  _Up __M = __b;\n+\t  if (__a > __b)\n+\t    {\n+\t      __k = -1;\n+\t      __m = __b;\n+\t      __M = __a;\n+\t    }\n+\t  return __a + __k * _Tp(_Up(__M - __m) / 2);\n+\t}\n+      else\n+\t{\n+\t  return __builtin_isnormal(__a) && __builtin_isnormal(__b)\n+\t    ? __a / 2 + __b / 2\n+\t    : (__a + __b) / 2;\n+\t}\n+    }\n+\n+  template<typename _Tp>\n+    constexpr\n+    enable_if_t<__and_<is_object<_Tp>, bool_constant<sizeof(_Tp) != 0>>::value,\n+\t\t_Tp*>\n+    midpoint(_Tp* __a, _Tp* __b) noexcept\n+    {\n+      return __a > __b ? __b + (__a - __b) / 2 : __a + (__b - __a) / 2;\n+    }\n+#endif // C++20\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "785e8966dbfcd62c08e5ec445ef5dab4910765e0", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=243874426dddf0cd56031eea8bbb7b3986f37baa", "patch": "@@ -152,6 +152,7 @@\n # define __cpp_lib_destroying_delete 201806L\n #endif\n #define __cpp_lib_erase_if 201900L\n+#define __cpp_lib_interpolate 201902L\n #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n # define __cpp_lib_is_constant_evaluated 201811L\n #endif"}, {"sha": "fae74838554ba7c2cc1465e2286fce04407a1bb4", "filename": "libstdc++-v3/testsuite/26_numerics/lerp.cc", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp.cc?ref=243874426dddf0cd56031eea8bbb7b3986f37baa", "patch": "@@ -0,0 +1,124 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <cmath>\n+\n+#ifndef __cpp_lib_interpolate\n+# error \"Feature-test macro for midpoint and lerp missing\"\n+#elif __cpp_lib_interpolate != 201902L\n+# error \"Feature-test macro for midpoint and lerp has wrong value\"\n+#endif\n+\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using lim = std::numeric_limits<double>;\n+\n+  VERIFY( std::lerp(0.0, 1.0, 0.0) == 0.0 );\n+  VERIFY( std::lerp(-2.0, 10.0, 1.0) == 10.0 );\n+  VERIFY( std::lerp(2.0, -10.0, 1.0) == -10.0 );\n+  VERIFY( std::lerp(-8.0, 10.0, 0.5) == 1.0 );\n+  VERIFY( std::lerp(-10.0, 10.0, 0.25) == -5.0 );\n+  VERIFY( std::lerp(10.0, -10.0, 0.375) == 2.5 );\n+\n+  VERIFY( std::lerp(2.0, 2.0, 200.0) == 2.0 );\n+  VERIFY( std::lerp(2.0, 4.0, 200.0) == 402.0 );\n+  VERIFY( std::lerp(2.0, 4.0, -20.0) == -38.0 );\n+\n+  VERIFY( std::lerp(1.1, 30201.1, 0) == 1.1 );\n+  VERIFY( std::lerp(1.1, 30201.1, 1) == 30201.1 );\n+  VERIFY( std::lerp(1.1, -30201.1, 0) == 1.1 );\n+  VERIFY( std::lerp(1.1, -30201.1, 1) == -30201.1 );\n+\n+  VERIFY( std::lerp(1.1, 1.1, lim::infinity()) == 1.1 );\n+  VERIFY( std::isfinite(std::lerp(1.1, 1.1+lim::min(), lim::max())) );\n+\n+  VERIFY( std::lerp(lim::max(), lim::max(), 1) == lim::max() );\n+  VERIFY( std::lerp(lim::max(), lim::max()/9e9, 0) == lim::max() );\n+  VERIFY( std::lerp(lim::max()/9e9, lim::max(), 1) == lim::max() );\n+}\n+\n+void\n+test02()\n+{\n+  using lim = std::numeric_limits<float>;\n+\n+  VERIFY( std::lerp(0.0f, 1.0f, 0.0f) == 0.0f );\n+  VERIFY( std::lerp(-2.0f, 10.0f, 1.0f) == 10.0f );\n+  VERIFY( std::lerp(2.0f, -10.0f, 1.0f) == -10.0f );\n+  VERIFY( std::lerp(-8.0f, 10.0f, 0.5f) == 1.0f );\n+  VERIFY( std::lerp(-10.0f, 10.0f, 0.25f) == -5.0f );\n+  VERIFY( std::lerp(10.0f, -10.0f, 0.375f) == 2.5f );\n+\n+  VERIFY( std::lerp(2.0f, 2.0f, 200.0f) == 2.0f );\n+  VERIFY( std::lerp(2.0f, 4.0f, 200.0f) == 402.0f );\n+  VERIFY( std::lerp(2.0f, 4.0f, -20.0f) == -38.0f );\n+\n+  VERIFY( std::lerp(1.1f, 30201.1f, 0) == 1.1f );\n+  VERIFY( std::lerp(1.1f, 30201.1f, 1) == 30201.1f );\n+  VERIFY( std::lerp(1.1f, -30201.1f, 0) == 1.1f );\n+  VERIFY( std::lerp(1.1f, -30201.1f, 1) == -30201.1f );\n+\n+  VERIFY( std::lerp(1.1f, 1.1f, lim::infinity()) == 1.1f );\n+  VERIFY( std::isfinite(std::lerp(1.1f, 1.1f+lim::min(), lim::max())) );\n+\n+  VERIFY( std::lerp(lim::max(), lim::max(), 1) == lim::max() );\n+  VERIFY( std::lerp(lim::max(), lim::max()/9e9f, 0) == lim::max() );\n+  VERIFY( std::lerp(lim::max()/9e9f, lim::max(), 1) == lim::max() );\n+}\n+\n+void\n+test03()\n+{\n+  using lim = std::numeric_limits<long double>;\n+\n+  VERIFY( std::lerp(0.0l, 1.0l, 0.0l) == 0.0l );\n+  VERIFY( std::lerp(-2.0l, 10.0l, 1.0l) == 10.0l );\n+  VERIFY( std::lerp(2.0l, -10.0l, 1.0l) == -10.0l );\n+  VERIFY( std::lerp(-8.0l, 10.0l, 0.5l) == 1.0l );\n+  VERIFY( std::lerp(-10.0l, 10.0l, 0.25l) == -5.0l );\n+  VERIFY( std::lerp(10.0l, -10.0l, 0.375l) == 2.5l );\n+\n+  VERIFY( std::lerp(2.0l, 2.0l, 200.0l) == 2.0l );\n+  VERIFY( std::lerp(2.0l, 4.0l, 200.0l) == 402.0l );\n+  VERIFY( std::lerp(2.0l, 4.0l, -20.0l) == -38.0l );\n+\n+  VERIFY( std::lerp(1.1l, 30201.1l, 0) == 1.1l );\n+  VERIFY( std::lerp(1.1l, 30201.1l, 1) == 30201.1l );\n+  VERIFY( std::lerp(1.1l, -30201.1l, 0) == 1.1l );\n+  VERIFY( std::lerp(1.1l, -30201.1l, 1) == -30201.1l );\n+\n+  VERIFY( std::lerp(1.1l, 1.1l, lim::infinity()) == 1.1l );\n+  VERIFY( std::isfinite(std::lerp(1.1l, 1.1l+lim::min(), lim::max())) );\n+\n+  VERIFY( std::lerp(lim::max(), lim::max(), 1) == lim::max() );\n+  VERIFY( std::lerp(lim::max(), lim::max()/9e9l, 0) == lim::max() );\n+  VERIFY( std::lerp(lim::max()/9e9l, lim::max(), 1) == lim::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "9c6e4113b1820243b4e015fbeaa17ac5675e9aa3", "filename": "libstdc++-v3/testsuite/26_numerics/midpoint/floating.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fmidpoint%2Ffloating.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fmidpoint%2Ffloating.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fmidpoint%2Ffloating.cc?ref=243874426dddf0cd56031eea8bbb7b3986f37baa", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <numeric>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using lim = std::numeric_limits<double>;\n+\n+  VERIFY( std::midpoint(2.0, 4.0) == 3.0 );\n+  VERIFY( std::midpoint(0.0, 0.4) == 0.2 );\n+  VERIFY( std::midpoint(0.0, -0.0) == 0.0 );\n+  VERIFY( std::midpoint(9e9, -9e9) == 0.0 );\n+\n+  VERIFY( std::midpoint(lim::max(), lim::max()) == lim::max() );\n+}\n+\n+void\n+test02()\n+{\n+  using lim = std::numeric_limits<float>;\n+\n+  VERIFY( std::midpoint(2.0f, 4.0f) == 3.0f );\n+  VERIFY( std::midpoint(0.0f, 0.4f) == 0.2f );\n+  VERIFY( std::midpoint(0.0f, -0.0f) == 0.0f );\n+  VERIFY( std::midpoint(9e9f, -9e9f) == 0.0f );\n+}\n+\n+void\n+test03()\n+{\n+  using lim = std::numeric_limits<long double>;\n+\n+  VERIFY( std::midpoint(2.0l, 4.0l) == 3.0l );\n+  VERIFY( std::midpoint(0.0l, 0.4l) == 0.2l );\n+  VERIFY( std::midpoint(0.0l, -0.0l) == 0.0l );\n+  VERIFY( std::midpoint(9e9l, -9e9l) == 0.0l );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "4fe66df30624c0c551d36a29e47bad7b966fdd8f", "filename": "libstdc++-v3/testsuite/26_numerics/midpoint/integral.cc", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fmidpoint%2Fintegral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fmidpoint%2Fintegral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fmidpoint%2Fintegral.cc?ref=243874426dddf0cd56031eea8bbb7b3986f37baa", "patch": "@@ -0,0 +1,121 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <numeric>\n+\n+#ifndef __cpp_lib_interpolate\n+# error \"Feature-test macro for midpoint and lerp missing\"\n+#elif __cpp_lib_interpolate != 201902L\n+# error \"Feature-test macro for midpoint and lerp has wrong value\"\n+#endif\n+\n+#include <climits>\n+#include <testsuite_hooks.h>\n+\n+static_assert(std::is_same_v<decltype(std::midpoint(0, 1)), int>);\n+static_assert(noexcept(std::midpoint(1, 2)));\n+\n+struct test_type { };\n+template<typename T> decltype(std::midpoint<T>(T(), T())) try_midpoint(int);\n+template<typename T> test_type try_midpoint(...);\n+template<typename T> constexpr bool no_midpoint()\n+{ return std::is_same_v<decltype(try_midpoint<T>()), test_type>; }\n+\n+static_assert(no_midpoint<bool>());\n+static_assert(no_midpoint<const bool>());\n+static_assert(no_midpoint<const int>());\n+static_assert(no_midpoint<volatile int>());\n+\n+static_assert( std::midpoint(0, 0) == 0 );\n+static_assert( std::midpoint(1, 1) == 1 );\n+static_assert( std::midpoint(0, 1) == 0 );\n+static_assert( std::midpoint(1, 0) == 1 );\n+static_assert( std::midpoint(0, 2) == 1 );\n+static_assert( std::midpoint(3, 2) == 3 );\n+static_assert( std::midpoint(-5, 4) == -1 );\n+static_assert( std::midpoint(5, -4) == 1 );\n+static_assert( std::midpoint(-5, -4) == -5 );\n+static_assert( std::midpoint(-4, -5) == -4 );\n+static_assert( std::midpoint(INT_MIN, INT_MAX) == -1 );\n+static_assert( std::midpoint(INT_MAX, INT_MIN) == 0 );\n+static_assert( std::midpoint(INT_MAX, INT_MAX) == INT_MAX );\n+static_assert( std::midpoint(INT_MAX, INT_MAX-1) == INT_MAX );\n+static_assert( std::midpoint(INT_MAX-1, INT_MAX-1) == INT_MAX-1 );\n+static_assert( std::midpoint(INT_MAX-1, INT_MAX) == INT_MAX-1 );\n+static_assert( std::midpoint(INT_MAX, INT_MAX-2) == INT_MAX-1 );\n+\n+static_assert( std::midpoint(0u, 0u) == 0 );\n+static_assert( std::midpoint(0u, 1u) == 0 );\n+static_assert( std::midpoint(1u, 0u) == 1 );\n+static_assert( std::midpoint(0u, 2u) == 1 );\n+static_assert( std::midpoint(3u, 2u) == 3 );\n+static_assert( std::midpoint(0u, UINT_MAX) == UINT_MAX/2 );\n+static_assert( std::midpoint(UINT_MAX, 0u) == (UINT_MAX/2 + 1) );\n+static_assert( std::midpoint(UINT_MAX, UINT_MAX) == UINT_MAX );\n+static_assert( std::midpoint(UINT_MAX, UINT_MAX-1) == UINT_MAX );\n+static_assert( std::midpoint(UINT_MAX-1, UINT_MAX-1) == UINT_MAX-1 );\n+static_assert( std::midpoint(UINT_MAX-1, UINT_MAX) == UINT_MAX-1 );\n+static_assert( std::midpoint(UINT_MAX, UINT_MAX-2) == UINT_MAX-1 );\n+\n+static_assert( std::midpoint<short>(0, 0) == 0 );\n+static_assert( std::midpoint<short>(0, 1) == 0 );\n+static_assert( std::midpoint<short>(1, 0) == 1 );\n+static_assert( std::midpoint<short>(0, 2) == 1 );\n+static_assert( std::midpoint<short>(3, 2) == 3 );\n+static_assert( std::midpoint<short>(-5, 4) == -1 );\n+static_assert( std::midpoint<short>(5, -4) == 1 );\n+static_assert( std::midpoint<short>(-5, -4) == -5 );\n+static_assert( std::midpoint<short>(-4, -5) == -4 );\n+static_assert( std::midpoint<short>(SHRT_MIN, SHRT_MAX) == -1 );\n+static_assert( std::midpoint<short>(SHRT_MAX, SHRT_MIN) == 0 );\n+static_assert( std::midpoint<short>(SHRT_MAX, SHRT_MAX) == SHRT_MAX );\n+static_assert( std::midpoint<short>(SHRT_MAX, SHRT_MAX-1) == SHRT_MAX );\n+static_assert( std::midpoint<short>(SHRT_MAX-1, SHRT_MAX-1) == SHRT_MAX-1 );\n+static_assert( std::midpoint<short>(SHRT_MAX-1, SHRT_MAX) == SHRT_MAX-1 );\n+static_assert( std::midpoint<short>(SHRT_MAX, SHRT_MAX-2) == SHRT_MAX-1 );\n+\n+static_assert( std::midpoint<signed char>(0, 0) == 0 );\n+static_assert( std::midpoint<signed char>(1, 1) == 1 );\n+static_assert( std::midpoint<signed char>(0, 1) == 0 );\n+static_assert( std::midpoint<signed char>(1, 0) == 1 );\n+static_assert( std::midpoint<signed char>(0, 2) == 1 );\n+static_assert( std::midpoint<signed char>(3, 2) == 3 );\n+static_assert( std::midpoint<signed char>(-5, 4) == -1 );\n+static_assert( std::midpoint<signed char>(5, -4) == 1 );\n+static_assert( std::midpoint<signed char>(-5, -4) == -5 );\n+static_assert( std::midpoint<signed char>(-4, -5) == -4 );\n+static_assert( std::midpoint<signed char>(SCHAR_MIN, SCHAR_MAX) == -1 );\n+static_assert( std::midpoint<signed char>(SCHAR_MAX, SCHAR_MIN) == 0 );\n+static_assert( std::midpoint<signed char>(SCHAR_MAX, SCHAR_MAX) == SCHAR_MAX );\n+static_assert( std::midpoint<signed char>(SCHAR_MAX, SCHAR_MAX-1) == SCHAR_MAX);\n+\n+void\n+test01()\n+{\n+  // Test every possibility for signed char.\n+  for (int a = SCHAR_MIN; a <= SCHAR_MAX; ++a)\n+    for (int b = SCHAR_MIN; b <= SCHAR_MAX; ++b)\n+      VERIFY( std::midpoint(a, b) == std::midpoint<int>(a, b) );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "bd586d28ba011c890d34648399690bac9dfdadd2", "filename": "libstdc++-v3/testsuite/26_numerics/midpoint/pointer.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fmidpoint%2Fpointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/243874426dddf0cd56031eea8bbb7b3986f37baa/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fmidpoint%2Fpointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fmidpoint%2Fpointer.cc?ref=243874426dddf0cd56031eea8bbb7b3986f37baa", "patch": "@@ -0,0 +1,62 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <numeric>\n+#include <climits>\n+#include <testsuite_hooks.h>\n+\n+const int* p = nullptr;\n+static_assert(std::is_same_v<decltype(std::midpoint(p, p)), decltype(p)>);\n+// This is a GNU extension:\n+static_assert(noexcept(std::midpoint(p, p)));\n+\n+struct test_type { };\n+template<typename T> decltype(std::midpoint((T*)0, (T*)0)) try_midpoint(int);\n+template<typename T> test_type try_midpoint(...);\n+template<typename T> constexpr bool no_midpoint()\n+{ return std::is_same_v<decltype(try_midpoint<T>()), test_type>; }\n+\n+static_assert(no_midpoint<void>());\n+static_assert(no_midpoint<int()>());\n+static_assert(no_midpoint<int&>());\n+static_assert(no_midpoint<struct Incomplete>());\n+\n+constexpr int ca[3] = {};\n+static_assert( std::midpoint(ca, ca+3) == ca+1 );\n+\n+void\n+test01()\n+{\n+  int a[4];\n+  VERIFY( std::midpoint(a, a) == a );\n+  VERIFY( std::midpoint(a, a+1) == a );\n+  VERIFY( std::midpoint(a, a+2) == a+1 );\n+  VERIFY( std::midpoint(a, a+3) == a+1 );\n+  VERIFY( std::midpoint(a, a+4) == a+2 );\n+  VERIFY( std::midpoint(a+1, a) == a+1 );\n+  VERIFY( std::midpoint(a+2, a) == a+1 );\n+  VERIFY( std::midpoint(a+3, a) == a+2 );\n+  VERIFY( std::midpoint(a+4, a) == a+2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}