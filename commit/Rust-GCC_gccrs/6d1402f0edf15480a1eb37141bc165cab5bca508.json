{"sha": "6d1402f0edf15480a1eb37141bc165cab5bca508", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQxNDAyZjBlZGYxNTQ4MGExZWIzNzE0MWJjMTY1Y2FiNWJjYTUwOA==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2019-11-16T03:16:35Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2019-11-16T03:16:35Z"}, "message": "Implement the <tuple> part of C++20 p1032 Misc constexpr bits.\n\n2019-11-15  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement the <tuple> part of C++20 p1032 Misc constexpr bits.\n\t* include/std/tuple (_Head_base, _Tuple_impl(allocator_arg_t,...)\n\t(_M_assign, tuple(allocator_arg_t,...), _Inherited, operator=, _M_swap)\n\t(swap, pair(piecewise_construct_t,): Constexpr.\n\t* (__uses_alloc0::_Sink::operator=, __uses_alloc_t): Constexpr.\n\t* testsuite/20_util/tuple/cons/constexpr_allocator_arg_t.cc: New test.\n\t* testsuite/20_util/tuple/constexpr_swap.cc : New test.\n\t* testsuite/20_util/uses_allocator/69293_neg.cc: Extra error for C++20.\n\t* testsuite/20_util/uses_allocator/cons_neg.cc: : Extra error for C++20.\n\nFrom-SVN: r278331", "tree": {"sha": "d4a71d1c0b852e14c0a4887221516e3305aead66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4a71d1c0b852e14c0a4887221516e3305aead66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d1402f0edf15480a1eb37141bc165cab5bca508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1402f0edf15480a1eb37141bc165cab5bca508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d1402f0edf15480a1eb37141bc165cab5bca508", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1402f0edf15480a1eb37141bc165cab5bca508/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97e4a5ee37a81a969a0e52cd94c57750271e543c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e4a5ee37a81a969a0e52cd94c57750271e543c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e4a5ee37a81a969a0e52cd94c57750271e543c"}], "stats": {"total": 165, "additions": 164, "deletions": 1}, "files": [{"sha": "ccbb0b456da5d28c9abec19a34bcbb5132fb8d9e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6d1402f0edf15480a1eb37141bc165cab5bca508", "patch": "@@ -1,3 +1,15 @@\n+2019-11-15  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement the <tuple> part of C++20 p1032 Misc constexpr bits.\n+\t* include/std/tuple (_Head_base, _Tuple_impl(allocator_arg_t,...)\n+\t(_M_assign, tuple(allocator_arg_t,...), _Inherited, operator=, _M_swap)\n+\t(swap, pair(piecewise_construct_t,): Constexpr.\n+\t* (__uses_alloc0::_Sink::operator=, __uses_alloc_t): Constexpr.\n+\t* testsuite/20_util/tuple/cons/constexpr_allocator_arg_t.cc: New test.\n+\t* testsuite/20_util/tuple/constexpr_swap.cc : New test.\n+\t* testsuite/20_util/uses_allocator/69293_neg.cc: Extra error for C++20.\n+\t* testsuite/20_util/uses_allocator/cons_neg.cc: : Extra error for C++20.\n+\n 2019-11-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/stop_token: Reduce header dependencies by including"}, {"sha": "4844475d0d02d1546d163b4704fbfad5c6e1cdd8", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=6d1402f0edf15480a1eb37141bc165cab5bca508", "patch": "@@ -132,6 +132,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         constexpr _Head_base(_UHead&& __h)\n \t: _M_head_impl(std::forward<_UHead>(__h)) { }\n \n+      _GLIBCXX20_CONSTEXPR\n       _Head_base(allocator_arg_t, __uses_alloc0)\n       : _M_head_impl() { }\n \n@@ -144,6 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _M_head_impl(*__a._M_a) { }\n \n       template<typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(__uses_alloc0, _UHead&& __uhead)\n \t: _M_head_impl(std::forward<_UHead>(__uhead)) { }\n \n@@ -243,6 +245,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)\n \t: _Inherited(__tag, __a),\n           _Base(__tag, __use_alloc<_Head>(__a)) { }\n@@ -256,26 +259,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc, typename _UHead, typename... _UTail,\n                typename = typename enable_if<sizeof...(_Tail)\n \t\t\t\t\t     == sizeof...(_UTail)>::type>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            _UHead&& __head, _UTail&&... __tail)\n \t: _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),\n           _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n \t        std::forward<_UHead>(__head)) { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            const _Tuple_impl& __in)\n \t: _Inherited(__tag, __a, _M_tail(__in)),\n           _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            _Tuple_impl&& __in)\n \t: _Inherited(__tag, __a, std::move(_M_tail(__in))),\n \t  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n \t        std::forward<_Head>(_M_head(__in))) { }\n \n       template<typename _Alloc, typename... _UElements>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            const _Tuple_impl<_Idx, _UElements...>& __in)\n \t: _Inherited(__tag, __a,\n@@ -284,6 +291,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }\n \n       template<typename _Alloc, typename _UHead, typename... _UTails>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n \t: _Inherited(__tag, __a, std::move\n@@ -293,6 +301,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }\n \n       template<typename... _UElements>\n+\t_GLIBCXX20_CONSTEXPR\n         void\n         _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)\n         {\n@@ -302,6 +311,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _UHead, typename... _UTails>\n+\t_GLIBCXX20_CONSTEXPR\n         void\n         _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n         {\n@@ -312,6 +322,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n     protected:\n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_swap(_Tuple_impl& __in)\n       {\n@@ -369,6 +380,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)\n \t: _Base(__tag, __use_alloc<_Head>(__a)) { }\n \n@@ -378,43 +390,50 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }\n \n       template<typename _Alloc, typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            _UHead&& __head)\n \t: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n \t        std::forward<_UHead>(__head)) { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            const _Tuple_impl& __in)\n \t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            _Tuple_impl&& __in)\n \t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n \t        std::forward<_Head>(_M_head(__in))) { }\n \n       template<typename _Alloc, typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            const _Tuple_impl<_Idx, _UHead>& __in)\n \t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n \t\t_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }\n \n       template<typename _Alloc, typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            _Tuple_impl<_Idx, _UHead>&& __in)\n \t: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n                 std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))\n \t{ }\n \n       template<typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n         void\n         _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)\n         {\n \t  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);\n \t}\n \n       template<typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n         void\n         _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)\n         {\n@@ -423,6 +442,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n     protected:\n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_swap(_Tuple_impl& __in)\n       {\n@@ -680,17 +700,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Alloc,\n \t       _ImplicitDefaultCtor<is_object<_Alloc>::value> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a)\n \t: _Inherited(__tag, __a) { }\n \n       template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),\n \t       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      const _Elements&... __elements)\n \t: _Inherited(__tag, __a, __elements...) { }\n \n       template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),\n \t       _ExplicitCtor<_NotEmpty, const _Elements&...> = false>\n+\t_GLIBCXX20_CONSTEXPR\n \texplicit\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      const _Elements&... __elements)\n@@ -699,6 +722,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc, typename... _UElements,\n \t       bool _Valid = __valid_args<_UElements...>(),\n \t       _ImplicitCtor<_Valid, _UElements...> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      _UElements&&... __elements)\n \t: _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)\n@@ -707,24 +731,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc, typename... _UElements,\n \t\t bool _Valid = __valid_args<_UElements...>(),\n \t       _ExplicitCtor<_Valid, _UElements...> = false>\n+\t_GLIBCXX20_CONSTEXPR\n \texplicit\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      _UElements&&... __elements)\n \t: _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)\n \t{ }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)\n \t: _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)\n \t: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }\n \n       template<typename _Alloc, typename... _UElements,\n \t       bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\n \t\t\t     && !__use_other_ctor<const tuple<_UElements...>&>(),\n \t       _ImplicitCtor<_Valid, const _UElements&...> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      const tuple<_UElements...>& __in)\n \t: _Inherited(__tag, __a,\n@@ -735,6 +763,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\n \t\t\t     && !__use_other_ctor<const tuple<_UElements...>&>(),\n \t       _ExplicitCtor<_Valid, const _UElements&...> = false>\n+\t_GLIBCXX20_CONSTEXPR\n \texplicit\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      const tuple<_UElements...>& __in)\n@@ -746,6 +775,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\n \t\t\t     && !__use_other_ctor<tuple<_UElements...>&&>(),\n \t       _ImplicitCtor<_Valid, _UElements...> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      tuple<_UElements...>&& __in)\n \t: _Inherited(__tag, __a,\n@@ -756,6 +786,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))\n \t\t\t     && !__use_other_ctor<tuple<_UElements...>&&>(),\n \t       _ExplicitCtor<_Valid, _UElements...> = false>\n+\t_GLIBCXX20_CONSTEXPR\n \texplicit\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      tuple<_UElements...>&& __in)\n@@ -765,6 +796,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // tuple assignment\n \n+      _GLIBCXX20_CONSTEXPR\n       tuple&\n       operator=(typename conditional<__assignable<const _Elements&...>(),\n \t\t\t\t     const tuple&,\n@@ -775,6 +807,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       tuple&\n       operator=(typename conditional<__assignable<_Elements...>(),\n \t\t\t\t     tuple&&,\n@@ -786,6 +819,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<typename... _UElements>\n+\t_GLIBCXX20_CONSTEXPR\n \t__enable_if_t<__assignable<const _UElements&...>(), tuple&>\n \toperator=(const tuple<_UElements...>& __in)\n \tnoexcept(__nothrow_assignable<const _UElements&...>())\n@@ -795,6 +829,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename... _UElements>\n+\t_GLIBCXX20_CONSTEXPR\n \t__enable_if_t<__assignable<_UElements...>(), tuple&>\n \toperator=(tuple<_UElements...>&& __in)\n \tnoexcept(__nothrow_assignable<_UElements...>())\n@@ -804,6 +839,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       // tuple swap\n+      _GLIBCXX20_CONSTEXPR\n       void\n       swap(tuple& __in)\n       noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value)\n@@ -834,8 +870,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       tuple() = default;\n       // No-op allocator constructors.\n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t, const _Alloc&) noexcept { }\n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t, const _Alloc&, const tuple&) noexcept { }\n     };\n \n@@ -1015,46 +1053,54 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Alloc,\n \t       _ImplicitDefaultCtor<is_object<_Alloc>::value, _T1, _T2> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a)\n \t: _Inherited(__tag, __a) { }\n \n       template<typename _Alloc, bool _Dummy = true,\n \t       _ImplicitCtor<_Dummy, const _T1&, const _T2&> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      const _T1& __a1, const _T2& __a2)\n \t: _Inherited(__tag, __a, __a1, __a2) { }\n \n       template<typename _Alloc, bool _Dummy = true,\n \t       _ExplicitCtor<_Dummy, const _T1&, const _T2&> = false>\n \texplicit\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      const _T1& __a1, const _T2& __a2)\n \t: _Inherited(__tag, __a, __a1, __a2) { }\n \n       template<typename _Alloc, typename _U1, typename _U2,\n \t       _ImplicitCtor<true, _U1, _U2> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)\n \t: _Inherited(__tag, __a, std::forward<_U1>(__a1),\n \t             std::forward<_U2>(__a2)) { }\n \n       template<typename _Alloc, typename _U1, typename _U2,\n \t       _ExplicitCtor<true, _U1, _U2> = false>\n \texplicit\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      _U1&& __a1, _U2&& __a2)\n \t: _Inherited(__tag, __a, std::forward<_U1>(__a1),\n \t             std::forward<_U2>(__a2)) { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)\n \t: _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)\n \t: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }\n \n       template<typename _Alloc, typename _U1, typename _U2,\n \t       _ImplicitCtor<true, const _U1&, const _U2&> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      const tuple<_U1, _U2>& __in)\n \t: _Inherited(__tag, __a,\n@@ -1064,6 +1110,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc, typename _U1, typename _U2,\n \t       _ExplicitCtor<true, const _U1&, const _U2&> = false>\n \texplicit\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      const tuple<_U1, _U2>& __in)\n \t: _Inherited(__tag, __a,\n@@ -1072,43 +1119,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Alloc, typename _U1, typename _U2,\n \t       _ImplicitCtor<true, _U1, _U2> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\n \t: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))\n \t{ }\n \n       template<typename _Alloc, typename _U1, typename _U2,\n \t       _ExplicitCtor<true, _U1, _U2> = false>\n \texplicit\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\n \t: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))\n \t{ }\n \n       template<typename _Alloc, typename _U1, typename _U2,\n \t       _ImplicitCtor<true, const _U1&, const _U2&> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      const pair<_U1, _U2>& __in)\n \t: _Inherited(__tag, __a, __in.first, __in.second) { }\n \n       template<typename _Alloc, typename _U1, typename _U2,\n \t       _ExplicitCtor<true, const _U1&, const _U2&> = false>\n \texplicit\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n \t      const pair<_U1, _U2>& __in)\n \t: _Inherited(__tag, __a, __in.first, __in.second) { }\n \n       template<typename _Alloc, typename _U1, typename _U2,\n \t       _ImplicitCtor<true, _U1, _U2> = true>\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)\n \t: _Inherited(__tag, __a, std::forward<_U1>(__in.first),\n \t\t     std::forward<_U2>(__in.second)) { }\n \n       template<typename _Alloc, typename _U1, typename _U2,\n \t       _ExplicitCtor<true, _U1, _U2> = false>\n \texplicit\n+\t_GLIBCXX20_CONSTEXPR\n \ttuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)\n \t: _Inherited(__tag, __a, std::forward<_U1>(__in.first),\n \t\t     std::forward<_U2>(__in.second)) { }\n \n+      // Tuple assignment.\n+\n+      _GLIBCXX20_CONSTEXPR\n       tuple&\n       operator=(typename conditional<__assignable<const _T1&, const _T2&>(),\n \t\t\t\t     const tuple&,\n@@ -1119,6 +1175,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       tuple&\n       operator=(typename conditional<__assignable<_T1, _T2>(),\n \t\t\t\t     tuple&&,\n@@ -1130,6 +1187,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<typename _U1, typename _U2>\n+\t_GLIBCXX20_CONSTEXPR\n \t__enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>\n \toperator=(const tuple<_U1, _U2>& __in)\n \tnoexcept(__nothrow_assignable<const _U1&, const _U2&>())\n@@ -1139,6 +1197,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _U1, typename _U2>\n+\t_GLIBCXX20_CONSTEXPR\n \t__enable_if_t<__assignable<_U1, _U2>(), tuple&>\n \toperator=(tuple<_U1, _U2>&& __in)\n \tnoexcept(__nothrow_assignable<_U1, _U2>())\n@@ -1148,6 +1207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _U1, typename _U2>\n+\t_GLIBCXX20_CONSTEXPR\n \t__enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>\n \toperator=(const pair<_U1, _U2>& __in)\n \tnoexcept(__nothrow_assignable<const _U1&, const _U2&>())\n@@ -1158,6 +1218,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _U1, typename _U2>\n+\t_GLIBCXX20_CONSTEXPR\n \t__enable_if_t<__assignable<_U1, _U2>(), tuple&>\n \toperator=(pair<_U1, _U2>&& __in)\n \tnoexcept(__nothrow_assignable<_U1, _U2>())\n@@ -1167,6 +1228,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return *this;\n \t}\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       swap(tuple& __in)\n       noexcept(__and_<__is_nothrow_swappable<_T1>,\n@@ -1521,6 +1583,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// swap\n   template<typename... _Elements>\n+    _GLIBCXX20_CONSTEXPR\n     inline\n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n     // Constrained free swap overload, see p0185r1\n@@ -1535,6 +1598,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n   template<typename... _Elements>\n+    _GLIBCXX20_CONSTEXPR\n     typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type\n     swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;\n #endif\n@@ -1570,7 +1634,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<class _T1, class _T2>\n     template<typename... _Args1, typename... _Args2>\n-      _GLIBCXX20_CONSTEXPR inline\n+      _GLIBCXX20_CONSTEXPR\n+      inline\n       pair<_T1, _T2>::\n       pair(piecewise_construct_t,\n \t   tuple<_Args1...> __first, tuple<_Args2...> __second)"}, {"sha": "6497374b6ec98a87bb575575500df81c3f6936dc", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/constexpr_allocator_arg_t.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr_allocator_arg_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr_allocator_arg_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr_allocator_arg_t.cc?ref=6d1402f0edf15480a1eb37141bc165cab5bca508", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+//\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <tuple>\n+\n+const std::allocator<int> alloc{};\n+\n+constexpr bool\n+test_tuple()\n+{\n+  auto ok = true;\n+\n+  std::tuple<int, double, double> ta(std::allocator_arg, alloc);\n+  std::tuple<int, double, double> tb(std::allocator_arg, alloc, 0, 3.456, 6.789);\n+  std::tuple<int, double, double> tc(std::allocator_arg, alloc, 0, 3.456f, 6.789f);\n+  std::tuple<int, double, double> td(std::allocator_arg, alloc, tb);\n+  std::tuple<int, double, double> te(std::allocator_arg, alloc, std::move(tb));\n+\n+  std::tuple<int, float, float> tf(std::allocator_arg, alloc, 0, 3.456f, 6.789f);\n+  std::tuple<int, double, double> tg(std::allocator_arg, alloc, tf);\n+  std::tuple<int, double, double> th(std::allocator_arg, alloc, std::move(tf));\n+\n+  std::pair<int, float> pf(12, 3.142f);\n+  std::tuple<int, double> ti(std::allocator_arg, alloc, pf);\n+  std::tuple<int, double> tj(std::allocator_arg, alloc, std::move(pf));\n+\n+  return ok;\n+}\n+\n+static_assert(test_tuple());"}, {"sha": "eae14fd53f9743fc299a63bb8ebd8c302612d9d8", "filename": "libstdc++-v3/testsuite/20_util/tuple/constexpr_swap.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fconstexpr_swap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fconstexpr_swap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fconstexpr_swap.cc?ref=6d1402f0edf15480a1eb37141bc165cab5bca508", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+//\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+\n+constexpr bool\n+test_tuple()\n+{\n+  auto ok = true;\n+\n+  std::tuple<int, double, double> t1(1, 3.1415, 2.7182);\n+  std::tuple<int, double, double> t2(1, 4.1234, 3.3333);\n+  t1.swap(t2);\n+  std::swap(t1, t2);\n+\n+  return ok;\n+}\n+\n+static_assert(test_tuple());"}, {"sha": "e216a35d3498e7a3318de546ea9fa7217d2a0ec2", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc?ref=6d1402f0edf15480a1eb37141bc165cab5bca508", "patch": "@@ -45,4 +45,5 @@ test01()\n   alloc_type a;\n   std::tuple<X> t(std::allocator_arg, a); // this is required to be ill-formed\n   // { dg-error \"failed: .* uses_allocator is true\" \"\" { target *-*-* } 0 }\n+  // { dg-error \"no matching function for call\" \"\" { target c++2a } 0 }\n }"}, {"sha": "7955650bdad2a05b0e992a480598addd80c7e9e4", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1402f0edf15480a1eb37141bc165cab5bca508/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=6d1402f0edf15480a1eb37141bc165cab5bca508", "patch": "@@ -44,3 +44,4 @@ void test01()\n   tuple<Type> t(allocator_arg, a, 1);\n }\n // { dg-error \"failed: .* uses_allocator is true\" \"\" { target *-*-* } 0 }\n+// { dg-error \"no matching function for call\" \"\" { target c++2a } 0 }"}]}