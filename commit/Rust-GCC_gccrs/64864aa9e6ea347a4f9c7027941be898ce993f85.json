{"sha": "64864aa9e6ea347a4f9c7027941be898ce993f85", "node_id": "C_kwDOANBUbNoAKDY0ODY0YWE5ZTZlYTM0N2E0ZjljNzAyNzk0MWJlODk4Y2U5OTNmODU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-14T17:04:09Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-15T09:41:03Z"}, "message": "Convert vrange dumping facilities to pretty_printer.\n\nWe need to dump global ranges from the gimple pretty printer code, but\nall the vrange dumping facilities work with FILE handles.  This patch\nconverts all the dumping methods to work with pretty printers, and\nprovides a wrapper so the FILE * methods continue to work for\ndebugging.  I also cleaned up the code a bit.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* Makefile.in (OBJS): Add value-range-pretty-print.o.\n\t* pretty-print.h (pp_vrange): New.\n\t* value-range.cc (vrange::dump): Call pp version.\n\t(unsupported_range::dump): Move to its own file.\n\t(dump_bound_with_infinite_markers): Same.\n\t(irange::dump): Same.\n\t(irange::dump_bitmasks): Same.\n\t(vrange::debug): Remove.\n\t* value-range.h: Remove virtual designation for dump methods.\n\tRemove dump_bitmasks method.\n\t* value-range-pretty-print.cc: New file.\n\t* value-range-pretty-print.h: New file.", "tree": {"sha": "f26899fcf6deec978749c35d04c96ba9b5469fa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f26899fcf6deec978749c35d04c96ba9b5469fa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64864aa9e6ea347a4f9c7027941be898ce993f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64864aa9e6ea347a4f9c7027941be898ce993f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64864aa9e6ea347a4f9c7027941be898ce993f85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64864aa9e6ea347a4f9c7027941be898ce993f85/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91a7f30662cd8da14f0ae5eec1ce13aa29f1817c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a7f30662cd8da14f0ae5eec1ce13aa29f1817c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a7f30662cd8da14f0ae5eec1ce13aa29f1817c"}], "stats": {"total": 277, "additions": 172, "deletions": 105}, "files": [{"sha": "001506f8abf7b9da2a5e431d15f016e1889f1043", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=64864aa9e6ea347a4f9c7027941be898ce993f85", "patch": "@@ -1711,6 +1711,7 @@ OBJS = \\\n \tvalue-query.o \\\n \tvalue-range.o \\\n \tvalue-range-equiv.o \\\n+\tvalue-range-pretty-print.o \\\n \tvalue-range-storage.o \\\n \tvalue-relation.o \\\n \tvalue-prof.o \\"}, {"sha": "d810e57bb14bce51efeb3c2fe390f2f3c37d453d", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=64864aa9e6ea347a4f9c7027941be898ce993f85", "patch": "@@ -340,6 +340,13 @@ pp_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n       pp_string (PP, pp_buffer (PP)->digit_buffer);\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n+#define pp_vrange(PP, R)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      vrange_printer vrange_pp (PP);\t\t\t\t\\\n+      (R)->accept (vrange_pp);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n #define pp_double(PP, F)       pp_scalar (PP, \"%f\", F)\n #define pp_pointer(PP, P)      pp_scalar (PP, \"%p\", P)\n "}, {"sha": "b795e92d8fb65c91c0efa1888efc172bb09aceab", "filename": "gcc/value-range-pretty-print.cc", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2Fvalue-range-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2Fvalue-range-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-pretty-print.cc?ref=64864aa9e6ea347a4f9c7027941be898ce993f85", "patch": "@@ -0,0 +1,111 @@\n+/* Pretty print support for value ranges.\n+   Copyright (C) 2019-2022 Free Software Foundation, Inc.\n+   Contributed by Aldy Hernandez <aldyh@redhat.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"backend.h\"\n+#include \"tree.h\"\n+#include \"gimple.h\"\n+#include \"ssa.h\"\n+#include \"tree-pretty-print.h\"\n+#include \"fold-const.h\"\n+#include \"gimple-range.h\"\n+#include \"value-range-pretty-print.h\"\n+\n+void\n+vrange_printer::visit (const unsupported_range &r) const\n+{\n+  pp_string (pp, \"[unsupported_range] \");\n+  if (r.undefined_p ())\n+    {\n+      pp_string (pp, \"UNDEFINED\");\n+      return;\n+    }\n+  if (r.varying_p ())\n+    {\n+      pp_string (pp, \"VARYING\");\n+      return;\n+    }\n+  gcc_unreachable ();\n+}\n+\n+void\n+vrange_printer::visit (const irange &r) const\n+{\n+  pp_string (pp, \"[irange] \");\n+  if (r.undefined_p ())\n+    {\n+      pp_string (pp, \"UNDEFINED\");\n+      return;\n+    }\n+  dump_generic_node (pp, r.type (), 0, TDF_NONE, false);\n+  pp_character (pp, ' ');\n+  if (r.varying_p ())\n+    {\n+      pp_string (pp, \"VARYING\");\n+      return;\n+    }\n+ for (unsigned i = 0; i < r.num_pairs (); ++i)\n+    {\n+      tree lb = wide_int_to_tree (r.type (), r.lower_bound (i));\n+      tree ub = wide_int_to_tree (r.type (), r.upper_bound (i));\n+      pp_character (pp, '[');\n+      print_irange_bound (lb);\n+      pp_string (pp, \", \");\n+      print_irange_bound (ub);\n+      pp_character (pp, ']');\n+    }\n+ print_irange_bitmasks (r);\n+}\n+\n+void\n+vrange_printer::print_irange_bound (tree bound) const\n+{\n+  tree type = TREE_TYPE (bound);\n+  wide_int type_min = wi::min_value (TYPE_PRECISION (type), TYPE_SIGN (type));\n+  wide_int type_max = wi::max_value (TYPE_PRECISION (type), TYPE_SIGN (type));\n+\n+  if (INTEGRAL_TYPE_P (type)\n+      && !TYPE_UNSIGNED (type)\n+      && TREE_CODE (bound) == INTEGER_CST\n+      && wi::to_wide (bound) == type_min\n+      && TYPE_PRECISION (type) != 1)\n+    pp_string (pp, \"-INF\");\n+  else if (TREE_CODE (bound) == INTEGER_CST\n+\t   && wi::to_wide (bound) == type_max\n+\t   && TYPE_PRECISION (type) != 1)\n+    pp_string (pp, \"+INF\");\n+  else\n+    dump_generic_node (pp, bound, 0, TDF_NONE, false);\n+}\n+\n+void\n+vrange_printer::print_irange_bitmasks (const irange &r) const\n+{\n+  wide_int nz = r.get_nonzero_bits ();\n+  if (nz == -1)\n+    return;\n+\n+  pp_string (pp, \" NONZERO \");\n+  char buf[WIDE_INT_PRINT_BUFFER_SIZE];\n+  print_hex (nz, buf);\n+  pp_string (pp, buf);\n+}"}, {"sha": "6d2fb74cc7abfc5c39fcc32db22799d1b4b09528", "filename": "gcc/value-range-pretty-print.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2Fvalue-range-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2Fvalue-range-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-pretty-print.h?ref=64864aa9e6ea347a4f9c7027941be898ce993f85", "patch": "@@ -0,0 +1,37 @@\n+/* Pretty print support for value ranges.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+   Contributed by Aldy Hernandez <aldyh@redhat.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_VALUE_RANGE_PRETTY_H\n+#define GCC_VALUE_RANGE_PRETTY_H\n+\n+class vrange_printer : public vrange_visitor\n+{\n+public:\n+  vrange_printer (pretty_printer *pp_) : pp (pp_) { }\n+  void visit (const unsupported_range &) const override;\n+  void visit (const irange &) const override;\n+private:\n+  void print_irange_bound (tree bound) const;\n+  void print_irange_bitmasks (const irange &) const;\n+\n+  pretty_printer *pp;\n+};\n+\n+#endif // GCC_VALUE_RANGE_PRETTY_H"}, {"sha": "525e19240578c822a6a65680247831614904781f", "filename": "gcc/value-range.cc", "status": "modified", "additions": 14, "deletions": 99, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=64864aa9e6ea347a4f9c7027941be898ce993f85", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"ssa.h\"\n #include \"tree-pretty-print.h\"\n+#include \"value-range-pretty-print.h\"\n #include \"fold-const.h\"\n #include \"gimple-range.h\"\n \n@@ -212,6 +213,19 @@ vrange::operator== (const vrange &src) const\n   gcc_unreachable ();\n }\n \n+// Wrapper for vrange_printer to dump a range to a file.\n+\n+void\n+vrange::dump (FILE *file) const\n+{\n+  pretty_printer buffer;\n+  pp_needs_newline (&buffer) = true;\n+  buffer.buffer->stream = file;\n+  vrange_printer vrange_pp (&buffer);\n+  this->accept (vrange_pp);\n+  pp_flush (&buffer);\n+}\n+\n bool\n irange::supports_type_p (tree type) const\n {\n@@ -238,23 +252,6 @@ unsupported_range::unsupported_range ()\n   set_undefined ();\n }\n \n-void\n-unsupported_range::dump (FILE *file) const\n-{\n-  fprintf (file, \"[unsupported_range] \");\n-  if (undefined_p ())\n-    {\n-      fprintf (file, \"UNDEFINED\");\n-      return;\n-    }\n-  if (varying_p ())\n-    {\n-      fprintf (file, \"VARYING\");\n-      return;\n-    }\n-  gcc_unreachable ();\n-}\n-\n // Here we copy between any two irange's.  The ranges can be legacy or\n // multi-ranges, and copying between any combination works correctly.\n \n@@ -2461,88 +2458,6 @@ irange::union_nonzero_bits (const irange &r)\n   return false;\n }\n \n-static void\n-dump_bound_with_infinite_markers (FILE *file, tree bound)\n-{\n-  tree type = TREE_TYPE (bound);\n-  wide_int type_min = wi::min_value (TYPE_PRECISION (type), TYPE_SIGN (type));\n-  wide_int type_max = wi::max_value (TYPE_PRECISION (type), TYPE_SIGN (type));\n-\n-  if (INTEGRAL_TYPE_P (type)\n-      && !TYPE_UNSIGNED (type)\n-      && TREE_CODE (bound) == INTEGER_CST\n-      && wi::to_wide (bound) == type_min\n-      && TYPE_PRECISION (type) != 1)\n-    fprintf (file, \"-INF\");\n-  else if (TREE_CODE (bound) == INTEGER_CST\n-\t   && wi::to_wide (bound) == type_max\n-\t   && TYPE_PRECISION (type) != 1)\n-    fprintf (file, \"+INF\");\n-  else\n-    print_generic_expr (file, bound);\n-}\n-\n-void\n-irange::dump (FILE *file) const\n-{\n-  fprintf (file, \"[irange] \");\n-  if (undefined_p ())\n-    {\n-      fprintf (file, \"UNDEFINED\");\n-      return;\n-    }\n-  print_generic_expr (file, type ());\n-  fprintf (file, \" \");\n-  if (varying_p ())\n-    {\n-      fprintf (file, \"VARYING\");\n-      dump_bitmasks (file);\n-      return;\n-    }\n- if (legacy_mode_p ())\n-    {\n-      fprintf (file, \"%s[\", (m_kind == VR_ANTI_RANGE) ? \"~\" : \"\");\n-      dump_bound_with_infinite_markers (file, min ());\n-      fprintf (file, \", \");\n-      dump_bound_with_infinite_markers (file, max ());\n-      fprintf (file, \"]\");\n-      dump_bitmasks (file);\n-      return;\n-    }\n-  for (unsigned i = 0; i < m_num_ranges; ++i)\n-    {\n-      tree lb = m_base[i * 2];\n-      tree ub = m_base[i * 2 + 1];\n-      fprintf (file, \"[\");\n-      dump_bound_with_infinite_markers (file, lb);\n-      fprintf (file, \", \");\n-      dump_bound_with_infinite_markers (file, ub);\n-      fprintf (file, \"]\");\n-    }\n-  dump_bitmasks (file);\n-}\n-\n-void\n-irange::dump_bitmasks (FILE *file) const\n-{\n-  if (m_nonzero_mask)\n-    {\n-      wide_int nz = get_nonzero_bits ();\n-      if (nz != -1)\n-\t{\n-\t  fprintf (file, \" NONZERO \");\n-\t  print_hex (nz, file);\n-\t}\n-    }\n-}\n-\n-void\n-vrange::debug () const\n-{\n-  dump (stderr);\n-  fprintf (stderr, \"\\n\");\n-}\n-\n void\n dump_value_range (FILE *file, const vrange *vr)\n {"}, {"sha": "4af92fd65d96f15a7bbe55591f9ce6d113ea2a82", "filename": "gcc/value-range.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64864aa9e6ea347a4f9c7027941be898ce993f85/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=64864aa9e6ea347a4f9c7027941be898ce993f85", "patch": "@@ -79,7 +79,6 @@ class vrange\n   virtual bool supports_type_p (tree type) const;\n   virtual void set_varying (tree type);\n   virtual void set_undefined ();\n-  virtual void dump (FILE * = stderr) const = 0;\n   virtual bool union_ (const vrange &);\n   virtual bool intersect (const vrange &);\n   virtual bool singleton_p (tree *result = NULL) const;\n@@ -96,9 +95,9 @@ class vrange\n   vrange& operator= (const vrange &);\n   bool operator== (const vrange &) const;\n   bool operator!= (const vrange &r) const { return !(*this == r); }\n+  void dump (FILE *) const;\n \n   enum value_range_kind kind () const;\t\t// DEPRECATED\n-  void debug () const;\n \n protected:\n   ENUM_BITFIELD(value_range_kind) m_kind : 8;\n@@ -149,7 +148,6 @@ class GTY((user)) irange : public vrange\n \n   // Misc methods.\n   virtual bool fits_p (const vrange &r) const override;\n-  virtual void dump (FILE * = stderr) const override;\n   virtual void accept (const vrange_visitor &v) const override;\n \n   // Nonzero masks.\n@@ -206,7 +204,6 @@ class GTY((user)) irange : public vrange\n   void set_nonzero_bits (tree mask);\n   bool intersect_nonzero_bits (const irange &r);\n   bool union_nonzero_bits (const irange &r);\n-  void dump_bitmasks (FILE *) const;\n \n   bool intersect (const wide_int& lb, const wide_int& ub);\n   unsigned char m_num_ranges;\n@@ -252,7 +249,6 @@ class unsupported_range : public vrange\n {\n public:\n   unsupported_range ();\n-  virtual void dump (FILE *) const override;\n   virtual void accept (const vrange_visitor &v) const override;\n };\n \n@@ -339,7 +335,7 @@ class Value_Range\n   bool operator!= (const Value_Range &r) const;\n   operator vrange &();\n   operator const vrange &() const;\n-  void dump (FILE *out = stderr) const;\n+  void dump (FILE *) const;\n   static bool supports_type_p (tree type);\n \n   // Convenience methods for vrange compatability."}]}