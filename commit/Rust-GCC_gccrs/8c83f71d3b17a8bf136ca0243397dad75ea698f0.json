{"sha": "8c83f71d3b17a8bf136ca0243397dad75ea698f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM4M2Y3MWQzYjE3YThiZjEzNmNhMDI0MzM5N2RhZDc1ZWE2OThmMA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-06-14T13:39:03Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-06-14T13:39:03Z"}, "message": "[AArch64] Handle AND+ASHIFT form of UBFIZ correctly in costs\n\n\t* config/aarch64/aarch64.c (aarch64_mask_and_shift_for_ubfiz_p):\n\tNew function.\n\t(aarch64_rtx_costs): Use it.  Rewrite CONST_INT_P (op1) case to handle\n\tmask+shift version.\n\t* config/aarch64/aarch64-protos.h (aarch64_mask_and_shift_for_ubfiz_p):\n\tNew prototype.\n\t* config/aarch64/aarch64.md (*andim_ashift<mode>_bfiz): Replace\n\tmatching condition with aarch64_mask_and_shift_for_ubfiz_p.\n\nFrom-SVN: r237440", "tree": {"sha": "b5ebe211d89bb75e06aae3093f0f4a9f6892c9ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5ebe211d89bb75e06aae3093f0f4a9f6892c9ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c83f71d3b17a8bf136ca0243397dad75ea698f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c83f71d3b17a8bf136ca0243397dad75ea698f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c83f71d3b17a8bf136ca0243397dad75ea698f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c83f71d3b17a8bf136ca0243397dad75ea698f0/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "124bed29851cb5ece3d1218c6113a0774ffc26a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124bed29851cb5ece3d1218c6113a0774ffc26a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/124bed29851cb5ece3d1218c6113a0774ffc26a7"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "68366635e7a22e4dc8e097d70507681d760fe7ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c83f71d3b17a8bf136ca0243397dad75ea698f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c83f71d3b17a8bf136ca0243397dad75ea698f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c83f71d3b17a8bf136ca0243397dad75ea698f0", "patch": "@@ -1,3 +1,14 @@\n+2015-06-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_mask_and_shift_for_ubfiz_p):\n+\tNew function.\n+\t(aarch64_rtx_costs): Use it.  Rewrite CONST_INT_P (op1) case to handle\n+\tmask+shift version.\n+\t* config/aarch64/aarch64-protos.h (aarch64_mask_and_shift_for_ubfiz_p):\n+\tNew prototype.\n+\t* config/aarch64/aarch64.md (*andim_ashift<mode>_bfiz): Replace\n+\tmatching condition with aarch64_mask_and_shift_for_ubfiz_p.\n+\n 2016-06-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71522"}, {"sha": "e8c2ac8d25826ce77c49d103f64fb6b0f4b18ee6", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c83f71d3b17a8bf136ca0243397dad75ea698f0/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c83f71d3b17a8bf136ca0243397dad75ea698f0/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=8c83f71d3b17a8bf136ca0243397dad75ea698f0", "patch": "@@ -318,6 +318,7 @@ bool aarch64_is_noplt_call_p (rtx);\n bool aarch64_label_mentioned_p (rtx);\n void aarch64_declare_function_name (FILE *, const char*, tree);\n bool aarch64_legitimate_pic_operand_p (rtx);\n+bool aarch64_mask_and_shift_for_ubfiz_p (machine_mode, rtx, rtx);\n bool aarch64_modes_tieable_p (machine_mode mode1,\n \t\t\t      machine_mode mode2);\n bool aarch64_zero_extend_const_eq (machine_mode, rtx, machine_mode, rtx);"}, {"sha": "e91017bc0c2cb1ea0c873bec57c4fd40dc08c9c0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c83f71d3b17a8bf136ca0243397dad75ea698f0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c83f71d3b17a8bf136ca0243397dad75ea698f0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8c83f71d3b17a8bf136ca0243397dad75ea698f0", "patch": "@@ -6050,6 +6050,19 @@ aarch64_extend_bitfield_pattern_p (rtx x)\n   return op;\n }\n \n+/* Return true if the mask and a shift amount from an RTX of the form\n+   (x << SHFT_AMNT) & MASK are valid to combine into a UBFIZ instruction of\n+   mode MODE.  See the *andim_ashift<mode>_bfiz pattern.  */\n+\n+bool\n+aarch64_mask_and_shift_for_ubfiz_p (machine_mode mode, rtx mask, rtx shft_amnt)\n+{\n+  return CONST_INT_P (mask) && CONST_INT_P (shft_amnt)\n+\t && INTVAL (shft_amnt) < GET_MODE_BITSIZE (mode)\n+\t && exact_log2 ((INTVAL (mask) >> INTVAL (shft_amnt)) + 1) >= 0\n+\t && (INTVAL (mask) & ((1 << INTVAL (shft_amnt)) - 1)) == 0;\n+}\n+\n /* Calculate the cost of calculating X, storing it in *COST.  Result\n    is true if the total cost of the operation has now been calculated.  */\n static bool\n@@ -6624,17 +6637,31 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \n       if (GET_MODE_CLASS (mode) == MODE_INT)\n \t{\n-\t  /* We possibly get the immediate for free, this is not\n-\t     modelled.  */\n-\t  if (CONST_INT_P (op1)\n-\t      && aarch64_bitmask_imm (INTVAL (op1), mode))\n+\t  if (CONST_INT_P (op1))\n \t    {\n-\t      *cost += rtx_cost (op0, mode, (enum rtx_code) code, 0, speed);\n+\t      /* We have a mask + shift version of a UBFIZ\n+\t\t i.e. the *andim_ashift<mode>_bfiz pattern.  */\n+\t      if (GET_CODE (op0) == ASHIFT\n+\t\t  && aarch64_mask_and_shift_for_ubfiz_p (mode, op1,\n+\t\t\t\t\t\t\t  XEXP (op0, 1)))\n+\t\t{\n+\t\t  *cost += rtx_cost (XEXP (op0, 0), mode,\n+\t\t\t\t     (enum rtx_code) code, 0, speed);\n+\t\t  if (speed)\n+\t\t    *cost += extra_cost->alu.bfx;\n \n-\t      if (speed)\n-\t\t*cost += extra_cost->alu.logical;\n+\t\t  return true;\n+\t\t}\n+\t      else if (aarch64_bitmask_imm (INTVAL (op1), mode))\n+\t\t{\n+\t\t/* We possibly get the immediate for free, this is not\n+\t\t   modelled.  */\n+\t\t  *cost += rtx_cost (op0, mode, (enum rtx_code) code, 0, speed);\n+\t\t  if (speed)\n+\t\t    *cost += extra_cost->alu.logical;\n \n-\t      return true;\n+\t\t  return true;\n+\t\t}\n \t    }\n \t  else\n \t    {"}, {"sha": "b4e6ba0047e0b0ac9d143793dbc1475384291eb2", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c83f71d3b17a8bf136ca0243397dad75ea698f0/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c83f71d3b17a8bf136ca0243397dad75ea698f0/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=8c83f71d3b17a8bf136ca0243397dad75ea698f0", "patch": "@@ -4380,9 +4380,7 @@\n \t(and:GPI (ashift:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n \t\t\t     (match_operand 2 \"const_int_operand\" \"n\"))\n \t\t (match_operand 3 \"const_int_operand\" \"n\")))]\n-  \"(INTVAL (operands[2]) < (<GPI:sizen>))\n-   && exact_log2 ((INTVAL (operands[3]) >> INTVAL (operands[2])) + 1) >= 0\n-   && (INTVAL (operands[3]) & ((1 << INTVAL (operands[2])) - 1)) == 0\"\n+  \"aarch64_mask_and_shift_for_ubfiz_p (<MODE>mode, operands[3], operands[2])\"\n   \"ubfiz\\\\t%<w>0, %<w>1, %2, %P3\"\n   [(set_attr \"type\" \"bfm\")]\n )"}]}