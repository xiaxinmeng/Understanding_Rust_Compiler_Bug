{"sha": "4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3ZWQxM2E4ZmI2ZmI0NDg1NmEwMTg3M2E1ZjE4OGY1ZjQ4ZTk1ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-14T21:17:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-14T21:17:23Z"}, "message": "stl_algo.h (is_sorted, [...]): Add.\n\n2007-10-14  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algo.h (is_sorted, is_sorted_until): Add.\n\t* include/bits/algorithmfwd.h: Add.\n\t* include/ext/algorithm: Adjust.\n\t* testsuite/25_algorithms/is_sorted/requirements/\n\texplicit_instantiation/2.cc: New.\n\t* testsuite/25_algorithms/is_sorted/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\t* testsuite/25_algorithms/is_sorted/1.cc: Likewise.\n\t* testsuite/25_algorithms/is_sorted_until/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/25_algorithms/is_sorted_until/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\t* testsuite/25_algorithms/is_sorted_until/1.cc: Likewise.\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc:\n\tAdd is_sorted and is_sorted_until.\n\n\t* include/bits/stl_heap.h (is_heap_until): Add concept and\n\tdebug-mode checks.\n\nFrom-SVN: r129303", "tree": {"sha": "8fde0a4c243d36b17d1790b5131fc7591488d023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fde0a4c243d36b17d1790b5131fc7591488d023"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/comments", "author": null, "committer": null, "parents": [{"sha": "1954a27b0c3d427a8fddeab6b089cbbe10f9f049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1954a27b0c3d427a8fddeab6b089cbbe10f9f049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1954a27b0c3d427a8fddeab6b089cbbe10f9f049"}], "stats": {"total": 462, "additions": 456, "deletions": 6}, "files": [{"sha": "3e41f634904b3538d076fa4dea5fe589cdce5c8d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -1,3 +1,24 @@\n+2007-10-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algo.h (is_sorted, is_sorted_until): Add.\n+\t* include/bits/algorithmfwd.h: Add.\n+\t* include/ext/algorithm: Adjust.\n+\t* testsuite/25_algorithms/is_sorted/requirements/\n+\texplicit_instantiation/2.cc: New.\n+\t* testsuite/25_algorithms/is_sorted/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\t* testsuite/25_algorithms/is_sorted/1.cc: Likewise.\n+\t* testsuite/25_algorithms/is_sorted_until/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/is_sorted_until/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\t* testsuite/25_algorithms/is_sorted_until/1.cc: Likewise.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc:\n+\tAdd is_sorted and is_sorted_until.\n+\n+\t* include/bits/stl_heap.h (is_heap_until): Add concept and\n+\tdebug-mode checks.\n+\n 2007-10-12  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_heap.h (__is_heap_until): Add."}, {"sha": "9155f83cfbbaa7857101f428f3849e0d68252796", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -197,6 +197,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _RAIter, typename _Compare>\n     _RAIter \n     is_heap_until(_RAIter, _RAIter, _Compare);\n+\n+  template<typename _FIter>\n+    bool \n+    is_sorted(_FIter, _FIter);\n+\n+  template<typename _FIter, typename _Compare>\n+    bool \n+    is_sorted(_FIter, _FIter, _Compare);\n+\n+  template<typename _FIter>\n+    _FIter \n+    is_sorted_until(_FIter, _FIter);\n+\n+  template<typename _FIter, typename _Compare>\n+    _FIter \n+    is_sorted_until(_FIter, _FIter, _Compare);\n #endif\n \n   template<typename _FIter1, typename _FIter2>"}, {"sha": "dd6d7f338c430994f94f39f6dacc1892b7b0b651", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 88, "deletions": 4, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -3409,10 +3409,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Permute range into the next \"dictionary\" ordering using\n-   *  comparison functor.\n+   *          comparison functor.\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n-   *  @param  comp\n+   *  @param  comp   A comparison functor.\n    *  @return  False if wrapped to first permutation, true otherwise.\n    *\n    *  Treats all permutations of the range [first,last) as a set of\n@@ -3520,10 +3520,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Permute range into the previous \"dictionary\" ordering using\n-   *  comparison functor.\n+   *          comparison functor.\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n-   *  @param  comp\n+   *  @param  comp   A comparison functor.\n    *  @return  False if wrapped to last permutation, true otherwise.\n    *\n    *  Treats all permutations of the range [first,last) as a set of\n@@ -3651,6 +3651,90 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __result;\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  /**\n+   *  @brief  Determines whether the elements of a sequence are sorted.\n+   *  @param  first   An iterator.\n+   *  @param  last    Another iterator.\n+   *  @return  True if the elements are sorted, false otherwise.\n+  */\n+  template<typename _ForwardIterator>\n+    inline bool\n+    is_sorted(_ForwardIterator __first, _ForwardIterator __last)\n+    { return std::is_sorted_until(__first, __last) == __last; }\n+\n+  /**\n+   *  @brief  Determines whether the elements of a sequence are sorted\n+   *          according to a comparison functor.\n+   *  @param  first   An iterator.\n+   *  @param  last    Another iterator.\n+   *  @param  comp    A comparison functor.\n+   *  @return  True if the elements are sorted, false otherwise.\n+  */\n+  template<typename _ForwardIterator, typename _Compare>\n+    inline bool\n+    is_sorted(_ForwardIterator __first, _ForwardIterator __last,\n+\t      _Compare __comp)\n+    { return std::is_sorted_until(__first, __last, __comp) == __last; }\n+\n+  /**\n+   *  @brief  Determines the end of a sorted sequence.\n+   *  @param  first   An iterator.\n+   *  @param  last    Another iterator.\n+   *  @return  An iterator pointing to the last iterator i in [first, last)\n+   *           for which the range [first, i) is sorted.\n+  */\n+  template<typename _ForwardIterator>\n+    _ForwardIterator\n+    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n+\t    typename iterator_traits<_ForwardIterator>::value_type>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n+      if (__first == __last)\n+\treturn __last;\n+\n+      _ForwardIterator __next = __first;\n+      for (++__next; __next != __last; __first = __next, ++__next)\n+\tif (*__next < *__first)\n+\t  return __next;\n+      return __next;\n+    }\n+\n+  /**\n+   *  @brief  Determines the end of a sorted sequence using comparison functor.\n+   *  @param  first   An iterator.\n+   *  @param  last    Another iterator.\n+   *  @param  comp    A comparison functor.\n+   *  @return  An iterator pointing to the last iterator i in [first, last)\n+   *           for which the range [first, i) is sorted.\n+  */\n+  template<typename _ForwardIterator, typename _Compare>\n+    _ForwardIterator\n+    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,\n+\t\t    _Compare __comp)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n+\t    typename iterator_traits<_ForwardIterator>::value_type,\n+\t    typename iterator_traits<_ForwardIterator>::value_type>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n+      if (__first == __last)\n+\treturn __last;\n+\n+      _ForwardIterator __next = __first;\n+      for (++__next; __next != __last; __first = __next, ++__next)\n+\tif (__comp(*__next, *__first))\n+\t  return __next;\n+      return __next;\n+    }\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)"}, {"sha": "e800f65c28960a34fd1bf0e8124d737e4c2bd768", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -488,9 +488,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   /**\n-   *  @brief  Check whether a range is a heap.\n+   *  @brief  Determines whether a range is a heap.\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n+   *  @return  True if range is a heap, false otherwise.\n    *  @ingroup heap\n   */\n   template<typename _RandomAccessIterator>\n@@ -499,10 +500,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return std::is_heap_until(__first, __last) == __last; }\n \n   /**\n-   *  @brief  Check whether a range is a heap using comparison functor.\n+   *  @brief  Determines whether a range is a heap using comparison functor.\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @param  comp   Comparison functor to use.\n+   *  @return  True if range is a heap, false otherwise.\n    *  @ingroup heap\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n@@ -515,6 +517,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @brief  Search the end of a heap.\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n+   *  @return  An iterator pointing to the first element not in the heap.\n    *  @ingroup heap\n    *\n    *  This operation returns the last iterator i in [first, last) for which\n@@ -524,6 +527,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline _RandomAccessIterator\n     is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     {\n+      // concept requirements\n+      __glibcxx_function_requires(_RandomAccessIteratorConcept<\n+\t    _RandomAccessIterator>)\n+      __glibcxx_function_requires(_LessThanComparableConcept<\n+\t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n       return __first + std::__is_heap_until(__first, std::distance(__first,\n \t\t\t\t\t\t\t\t   __last));\n     }\n@@ -533,6 +543,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @param  comp   Comparison functor to use.\n+   *  @return  An iterator pointing to the first element not in the heap.\n    *  @ingroup heap\n    *\n    *  This operation returns the last iterator i in [first, last) for which\n@@ -543,6 +554,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t\t  _Compare __comp)\n     {\n+      // concept requirements\n+      __glibcxx_function_requires(_RandomAccessIteratorConcept<\n+\t    _RandomAccessIterator>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n       return __first + std::__is_heap_until(__first, std::distance(__first,\n \t\t\t\t\t\t\t\t   __last),\n \t\t\t\t\t    __comp);"}, {"sha": "5a24b7e6f488162d34f83726df85a61e5f46878a", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -428,6 +428,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t     __out_last - __out_first);\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  using std::is_heap;\n+  using std::is_sorted;\n+#else\n   /**\n    *  This is an SGI extension.\n    *  @ingroup SGIextensions\n@@ -523,6 +527,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  return false;\n       return true;\n     }\n+#endif\n \n _GLIBCXX_END_NAMESPACE\n "}, {"sha": "7a02610a3201a63d9434b5c341fc78dc4688ed6b", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -417,6 +417,22 @@ namespace std\n   template<typename _RAIter, typename _Compare>\n     _RAIter \n     is_heap_until(_RAIter, _RAIter, _Compare);\n+\n+  template<typename _FIter>\n+    bool \n+    is_sorted(_FIter, _FIter);\n+\n+  template<typename _FIter, typename _Compare>\n+    bool \n+    is_sorted(_FIter, _FIter, _Compare);\n+\n+  template<typename _FIter>\n+    _FIter \n+    is_sorted_until(_FIter, _FIter);\n+\n+  template<typename _FIter, typename _Compare>\n+    _FIter \n+    is_sorted_until(_FIter, _FIter, _Compare);\n #endif\n \n   // 25.3.7, minimum and maximum:"}, {"sha": "840597ba318b4c555bba3f02d04b37375a536517", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted/1.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2F1.cc?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-14  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.3.6 Heap operations [lib.alg.heap.operations]\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+int A[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n+int B[] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};\n+const int N = sizeof(A) / sizeof(int);\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (int i = 0; i <= N; ++i)\n+    {\n+      VERIFY( std::is_sorted(A, A + i) );\n+      VERIFY( std::is_sorted(A, A + i, std::less<int>()) );\n+      VERIFY( std::is_sorted(B, B + i, std::greater<int>()) );\n+      VERIFY( (i < 2) || !std::is_sorted(B, B + i) );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "40052015db55d7fb7f2cd2ea24017496483ee03d", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template bool is_sorted(iterator_type, iterator_type);\n+  template bool is_sorted(iterator_type, iterator_type, compare_type);\n+} "}, {"sha": "9a2e5560790d22ae5bb56b643409e5caf4f42e08", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template bool is_sorted(iterator_type, iterator_type);\n+  template bool is_sorted(iterator_type, iterator_type, compare_type);\n+} "}, {"sha": "7be31eedecd24110da338ac6d18baa48400e2250", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted_until/1.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2F1.cc?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-14  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.3.6 Heap operations [lib.alg.heap.operations]\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+int A[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n+int B[] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};\n+const int N = sizeof(A) / sizeof(int);\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (int i = 0; i <= N; ++i)\n+    {\n+      VERIFY( A + i == std::is_sorted_until(A, A + i) );\n+      VERIFY( A + i == std::is_sorted_until(A, A + i, std::less<int>()) );\n+      VERIFY( B + i == std::is_sorted_until(B, B + i, std::greater<int>()) );\n+      VERIFY( B + (i < 2 ? i : 1) == std::is_sorted_until(B, B + i) );      \n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f13f7b008b0e890ce5611e2a5611075a718d6612", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted_until/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template iterator_type is_sorted_until(iterator_type, iterator_type);\n+  template iterator_type is_sorted_until(iterator_type, iterator_type,\n+\t\t\t\t\t compare_type);\n+} "}, {"sha": "d6a473f34fc2a7aa726d3b3a89cd3a0b759b0557", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted_until/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7ed13a8fb6fb44856a01873a5f188f5f48e95e/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=4b7ed13a8fb6fb44856a01873a5f188f5f48e95e", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template iterator_type is_sorted_until(iterator_type, iterator_type);\n+  template iterator_type is_sorted_until(iterator_type, iterator_type,\n+\t\t\t\t\t compare_type);\n+} "}]}