{"sha": "25e515d2199d555848dfba01fd5364df94096496", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVlNTE1ZDIxOTlkNTU1ODQ4ZGZiYTAxZmQ1MzY0ZGY5NDA5NjQ5Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-29T10:35:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-29T10:35:32Z"}, "message": "fold-const: Fix ICE in extract_muldiv_1 [PR99777]\n\nextract_muldiv{,_1} is apparently only prepared to handle scalar integer\noperations, the callers ensure it by only calling it if the divisor or\none of the multiplicands is INTEGER_CST and because neither multiplication\nnor division nor modulo are really supported e.g. for pointer types, nullptr\ntype etc.  But the CASE_CONVERT handling doesn't really check if it isn't\na cast from some other type kind, so on the testcase we end up trying to\nbuild MULT_EXPR in POINTER_TYPE which ICEs.  A few years ago Marek has\nadded ANY_INTEGRAL_TYPE_P checks to two spots, but the code uses\nTYPE_PRECISION which means something completely different for vector types,\netc.\nSo IMNSHO we should just punt on conversions from non-integrals or\nnon-scalar integrals.\n\n2021-03-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/99777\n\t* fold-const.c (extract_muldiv_1): For conversions, punt on casts from\n\ttypes other than scalar integral types.\n\n\t* g++.dg/torture/pr99777.C: New test.", "tree": {"sha": "b827b27f3a4e58de250d8baa24b3fb58179cacae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b827b27f3a4e58de250d8baa24b3fb58179cacae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25e515d2199d555848dfba01fd5364df94096496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e515d2199d555848dfba01fd5364df94096496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25e515d2199d555848dfba01fd5364df94096496", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e515d2199d555848dfba01fd5364df94096496/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d579e2e76f9469e1b386d693af57c5c4f0ede410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d579e2e76f9469e1b386d693af57c5c4f0ede410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d579e2e76f9469e1b386d693af57c5c4f0ede410"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "d4c5a9c299f2cee787d600b8ee892d7f0e43d49c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e515d2199d555848dfba01fd5364df94096496/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e515d2199d555848dfba01fd5364df94096496/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=25e515d2199d555848dfba01fd5364df94096496", "patch": "@@ -6713,6 +6713,8 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n       break;\n \n     CASE_CONVERT: case NON_LVALUE_EXPR:\n+      if (!INTEGRAL_TYPE_P (TREE_TYPE (op0)))\n+\tbreak;\n       /* If op0 is an expression ...  */\n       if ((COMPARISON_CLASS_P (op0)\n \t   || UNARY_CLASS_P (op0)\n@@ -6721,8 +6723,7 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t   || EXPRESSION_CLASS_P (op0))\n \t  /* ... and has wrapping overflow, and its type is smaller\n \t     than ctype, then we cannot pass through as widening.  */\n-\t  && (((ANY_INTEGRAL_TYPE_P (TREE_TYPE (op0))\n-\t\t&& TYPE_OVERFLOW_WRAPS (TREE_TYPE (op0)))\n+\t  && ((TYPE_OVERFLOW_WRAPS (TREE_TYPE (op0))\n \t       && (TYPE_PRECISION (ctype)\n \t           > TYPE_PRECISION (TREE_TYPE (op0))))\n \t      /* ... or this is a truncation (t is narrower than op0),\n@@ -6737,8 +6738,7 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t      /* ... or has undefined overflow while the converted to\n \t\t type has not, we cannot do the operation in the inner type\n \t\t as that would introduce undefined overflow.  */\n-\t      || ((ANY_INTEGRAL_TYPE_P (TREE_TYPE (op0))\n-\t\t   && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (op0)))\n+\t      || (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (op0))\n \t\t  && !TYPE_OVERFLOW_UNDEFINED (type))))\n \tbreak;\n "}, {"sha": "3cddde58bdd2e9996e9a9811c9f1761da4d0818f", "filename": "gcc/testsuite/g++.dg/torture/pr99777.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e515d2199d555848dfba01fd5364df94096496/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr99777.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e515d2199d555848dfba01fd5364df94096496/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr99777.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr99777.C?ref=25e515d2199d555848dfba01fd5364df94096496", "patch": "@@ -0,0 +1,44 @@\n+// PR tree-optimization/99777\n+\n+template <typename T>\n+inline const T &\n+min (const T &a, const T &b)\n+{\n+  if (b < a)\n+    return b;\n+  return a;\n+}\n+\n+template <typename T>\n+inline const T &\n+max (const T &a, const T &b)\n+{\n+  if (a < b)\n+    return b;\n+  return a;\n+}\n+\n+extern int o, a, c;\n+long h;\n+unsigned long long e;\n+signed char d;\n+extern short p[][7][5][30];\n+\n+void\n+test (long long b, short f[][17][25][22][20])\n+{\n+  for (char i = 0; i < 7; i += 3)\n+    for (unsigned char l = e; l < 5; l += 2)\n+      {\n+\tif (max (0LL, min (7LL, b)))\n+\t  for (bool j = 0; j < 1; j = b)\n+\t    {\n+\t      for (unsigned k = d; k < 20; k++)\n+\t\th = f[0][i][l][b][k];\n+\t      for (int m = 0; m < 5; m++)\n+\t\tp[c][i][l][m] = 0;\n+\t    }\n+\tfor (int n = 0; n < 4; n += a)\n+\t  o = n;\n+      }\n+}"}]}