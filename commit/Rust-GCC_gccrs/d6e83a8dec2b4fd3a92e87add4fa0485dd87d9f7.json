{"sha": "d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlODNhOGRlYzJiNGZkM2E5MmU4N2FkZDRmYTA0ODVkZDg3ZDlmNw==", "commit": {"author": {"name": "Mikhail Maltsev", "email": "maltsevm@gmail.com", "date": "2016-05-11T20:23:37Z"}, "committer": {"name": "Mikhail Maltsev", "email": "miyuki@gcc.gnu.org", "date": "2016-05-11T20:23:37Z"}, "message": "PR43651: add warning for duplicate qualifier\n\ngcc/c/\n\n\tPR c/43651\n\t* c-decl.c (declspecs_add_qual): Warn when -Wduplicate-decl-specifier\n\tis enabled.\n\t* c-errors.c (pedwarn_c90): Return true if warned.\n\t* c-tree.h (pedwarn_c90): Change return type to bool.\n\t(enum c_declspec_word): Add new enumerator cdw_atomic.\n\ngcc/\n\n\tPR c/43651\n\t* doc/invoke.texi (Wduplicate-decl-specifier): Document new option.\n\ngcc/testsuite/\n\n\tPR c/43651\n\t* gcc.dg/Wduplicate-decl-specifier-c11.c: New test.\n\t* gcc.dg/Wduplicate-decl-specifier.c: Likewise.\n\ngcc/c-family/\n\n\tPR c/43651\n\t* c.opt (Wduplicate-decl-specifier): New option.\n\nFrom-SVN: r236142", "tree": {"sha": "53be56313df606591b5a5db27a863bed98dc7f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53be56313df606591b5a5db27a863bed98dc7f1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/comments", "author": {"login": "miyuki", "id": 4668268, "node_id": "MDQ6VXNlcjQ2NjgyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/4668268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miyuki", "html_url": "https://github.com/miyuki", "followers_url": "https://api.github.com/users/miyuki/followers", "following_url": "https://api.github.com/users/miyuki/following{/other_user}", "gists_url": "https://api.github.com/users/miyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/miyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miyuki/subscriptions", "organizations_url": "https://api.github.com/users/miyuki/orgs", "repos_url": "https://api.github.com/users/miyuki/repos", "events_url": "https://api.github.com/users/miyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/miyuki/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51e67ea376b70fd41542c1540d809a32f10ed9ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e67ea376b70fd41542c1540d809a32f10ed9ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e67ea376b70fd41542c1540d809a32f10ed9ca"}], "stats": {"total": 154, "additions": 151, "deletions": 3}, "files": [{"sha": "b6571813d52f7d1ad8ff28ece68d0a15cc66f58f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "patch": "@@ -1,3 +1,8 @@\n+2016-05-11  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\tPR c/43651\n+\t* doc/invoke.texi (Wduplicate-decl-specifier): Document new option.\n+\n 2016-05-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (legitimize_pic_address): Use"}, {"sha": "c8dd0bebae0082b6de56411dc3f41a9b0fba31de", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "patch": "@@ -1,3 +1,8 @@\n+2016-05-11  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\tPR c/43651\n+\t* c.opt (Wduplicate-decl-specifier): New option.\n+\n 2016-05-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/71024"}, {"sha": "918df16ea99af7bd61312ed6b760b086669d9b23", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "patch": "@@ -1008,6 +1008,10 @@ Wsubobject-linkage\n C++ ObjC++ Var(warn_subobject_linkage) Warning Init(1)\n Warn if a class type has a base or a field whose type uses the anonymous namespace or depends on a type with no linkage.\n \n+Wduplicate-decl-specifier\n+C ObjC Var(warn_duplicate_decl_specifier) Warning LangEnabledBy(C ObjC,Wall)\n+Warn when a declaration has duplicate const, volatile, restrict or _Atomic specifier.\n+\n ansi\n C ObjC C++ ObjC++\n A synonym for -std=c89 (for C) or -std=c++98 (for C++)."}, {"sha": "d17cd925c5b6996966ee7877318da1466569acaf", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "patch": "@@ -1,3 +1,12 @@\n+2016-05-11  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\tPR c/43651\n+\t* c-decl.c (declspecs_add_qual): Warn when -Wduplicate-decl-specifier\n+\tis enabled.\n+\t* c-errors.c (pedwarn_c90): Return true if warned.\n+\t* c-tree.h (pedwarn_c90): Change return type to bool.\n+\t(enum c_declspec_word): Add new enumerator cdw_atomic.\n+\n 2016-05-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/71024"}, {"sha": "88424a784c94c994d34665e1e1659ecf4c581601", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "patch": "@@ -9515,32 +9515,48 @@ declspecs_add_qual (source_location loc,\n   gcc_assert (TREE_CODE (qual) == IDENTIFIER_NODE\n \t      && C_IS_RESERVED_WORD (qual));\n   i = C_RID_CODE (qual);\n+  location_t prev_loc = 0;\n   switch (i)\n     {\n     case RID_CONST:\n       dupe = specs->const_p;\n       specs->const_p = true;\n+      prev_loc = specs->locations[cdw_const];\n       specs->locations[cdw_const] = loc;\n       break;\n     case RID_VOLATILE:\n       dupe = specs->volatile_p;\n       specs->volatile_p = true;\n+      prev_loc = specs->locations[cdw_volatile];\n       specs->locations[cdw_volatile] = loc;\n       break;\n     case RID_RESTRICT:\n       dupe = specs->restrict_p;\n       specs->restrict_p = true;\n+      prev_loc = specs->locations[cdw_restrict];\n       specs->locations[cdw_restrict] = loc;\n       break;\n     case RID_ATOMIC:\n       dupe = specs->atomic_p;\n       specs->atomic_p = true;\n+      prev_loc = specs->locations[cdw_atomic];\n+      specs->locations[cdw_atomic] = loc;\n       break;\n     default:\n       gcc_unreachable ();\n     }\n   if (dupe)\n-    pedwarn_c90 (loc, OPT_Wpedantic, \"duplicate %qE\", qual);\n+    {\n+      bool warned = pedwarn_c90 (loc, OPT_Wpedantic,\n+\t\t\t\t \"duplicate %qE declaration specifier\", qual);\n+      if (!warned\n+\t  && warn_duplicate_decl_specifier\n+\t  && prev_loc >= RESERVED_LOCATION_COUNT\n+\t  && !from_macro_expansion_at (prev_loc)\n+\t  && !from_macro_expansion_at (loc))\n+\twarning_at (loc, OPT_Wduplicate_decl_specifier,\n+\t\t    \"duplicate %qE declaration specifier\", qual);\n+    }\n   return specs;\n }\n "}, {"sha": "af157c00fc838df721698a74f29a8b02d4dec915", "filename": "gcc/c/c-errors.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-errors.c?ref=d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "patch": "@@ -71,11 +71,12 @@ pedwarn_c99 (location_t location, int opt, const char *gmsgid, ...)\n    ISO C99 but not supported in ISO C90, thus we explicitly don't pedwarn\n    when C99 is specified.  (There is no flag_c90.)  */\n \n-void\n+bool\n pedwarn_c90 (location_t location, int opt, const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n+  bool warned = false;\n   rich_location richloc (line_table, location);\n \n   va_start (ap, gmsgid);\n@@ -92,6 +93,7 @@ pedwarn_c90 (location_t location, int opt, const char *gmsgid, ...)\n \t\t\t       ? DK_PEDWARN : DK_WARNING);\n \t  diagnostic.option_index = opt;\n \t  report_diagnostic (&diagnostic);\n+\t  warned = true;\n \t  goto out;\n \t}\n     }\n@@ -114,7 +116,9 @@ pedwarn_c90 (location_t location, int opt, const char *gmsgid, ...)\n       diagnostic_set_info (&diagnostic, gmsgid, &ap, &richloc, DK_PEDWARN);\n       diagnostic.option_index = opt;\n       report_diagnostic (&diagnostic);\n+      warned = true;\n     }\n out:\n   va_end (ap);\n+  return warned;\n }"}, {"sha": "d97e5755bb784e870d42df700c07b9111dc150c0", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "patch": "@@ -253,6 +253,7 @@ enum c_declspec_word {\n   cdw_const,\n   cdw_volatile,\n   cdw_restrict,\n+  cdw_atomic,\n   cdw_saturating,\n   cdw_alignas,\n   cdw_address_space,\n@@ -716,7 +717,7 @@ extern void c_bind (location_t, tree, bool);\n extern bool tag_exists_p (enum tree_code, tree);\n \n /* In c-errors.c */\n-extern void pedwarn_c90 (location_t, int opt, const char *, ...)\n+extern bool pedwarn_c90 (location_t, int opt, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n extern bool pedwarn_c99 (location_t, int opt, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);"}, {"sha": "c72ec5b3d5b6132ae998bd703368a87a57e779b8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "patch": "@@ -3542,6 +3542,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wc++11-compat  -Wc++14-compat@gol\n -Wchar-subscripts  @gol\n -Wcomment  @gol\n+-Wduplicate-decl-specifier @r{(C and Objective-C only)} @gol\n -Wenum-compare @r{(in C/ObjC; this is on by default in C++)} @gol\n -Wformat   @gol\n -Wimplicit @r{(C and Objective-C only)} @gol\n@@ -3699,6 +3700,13 @@ float area(float radius)\n the compiler performs the entire computation with @code{double}\n because the floating-point literal is a @code{double}.\n \n+@item -Wduplicate-decl-specifier @r{(C and Objective-C only)}\n+@opindex Wduplicate-decl-specifier\n+@opindex Wno-duplicate-decl-specifier\n+Warn if a declaration has duplicate @code{const}, @code{volatile},\n+@code{restrict} or @code{_Atomic} specifier.  This warning is enabled by\n+@option{-Wall}.\n+\n @item -Wformat\n @itemx -Wformat=@var{n}\n @opindex Wformat"}, {"sha": "b9c541f8c5a9979e7b1fd238efe52ad636e4aa24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "patch": "@@ -1,3 +1,9 @@\n+2016-05-11  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\tPR c/43651\n+\t* gcc.dg/Wduplicate-decl-specifier-c11.c: New test.\n+\t* gcc.dg/Wduplicate-decl-specifier.c: Likewise.\n+\n 2016-05-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/sse-13.c: Add dg-add-options bind_pic_locally"}, {"sha": "c2db525aaf91ca3552915f97b06dff94a320bfbc", "filename": "gcc/testsuite/gcc.dg/Wduplicate-decl-specifier-c11.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Ftestsuite%2Fgcc.dg%2FWduplicate-decl-specifier-c11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Ftestsuite%2Fgcc.dg%2FWduplicate-decl-specifier-c11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWduplicate-decl-specifier-c11.c?ref=d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -Wduplicate-decl-specifier\" } */\n+\n+typedef _Atomic int AT1;\n+#define AT2 _Atomic int\n+\n+void\n+foo (void)\n+{\n+  _Atomic AT1 x1;\n+  _Atomic AT2 x2;\n+  AT1 _Atomic x3;\n+  AT2 _Atomic x4;\n+  _Atomic int _Atomic x5; /* { dg-warning \"duplicate ._Atomic.\" } */\n+}\n+\n+void a1(_Atomic AT1 t) { }\n+void a2(_Atomic AT2 t) { }\n+void a3(AT1 _Atomic t) { }\n+void a4(AT2 _Atomic t) { }\n+void a5(_Atomic int _Atomic t) { }  /* { dg-warning \"duplicate ._Atomic.\" } */\n+\n+typedef _Atomic AT1 AAT1;\n+typedef _Atomic AT2 AAT2;\n+typedef AT1 _Atomic AT1A;\n+typedef AT2 _Atomic AT2A;\n+typedef _Atomic int _Atomic AIA;    /* { dg-warning \"duplicate ._Atomic.\" } */"}, {"sha": "d7a3919649bf172eccb2283a85dac1b9835dea9d", "filename": "gcc/testsuite/gcc.dg/Wduplicate-decl-specifier.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Ftestsuite%2Fgcc.dg%2FWduplicate-decl-specifier.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7/gcc%2Ftestsuite%2Fgcc.dg%2FWduplicate-decl-specifier.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWduplicate-decl-specifier.c?ref=d6e83a8dec2b4fd3a92e87add4fa0485dd87d9f7", "patch": "@@ -0,0 +1,63 @@\n+/* PR43651 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wduplicate-decl-specifier\" } */\n+\n+typedef const int CT1;\n+#define CT2 const int\n+typedef volatile int VT1;\n+#define VT2 volatile int\n+typedef char *restrict RT1;\n+#define RT2 char *restrict\n+\n+void\n+foo (void)\n+{\n+  const CT1 x1;\n+  const CT2 x2;\n+  CT1 const x3;\n+  CT2 const x4;\n+  const int const x5; /* { dg-warning \"duplicate .const.\" } */\n+  const int *const x6;\n+  volatile VT1 y1;\n+  volatile VT2 y2;\n+  VT1 volatile y3;\n+  VT2 volatile y4;\n+  volatile int volatile y5; /* { dg-warning \"duplicate .volatile.\" } */\n+  volatile int *volatile y6;\n+  RT1 restrict r1;\n+  RT2 restrict r2;\n+  restrict RT1 r3;\n+  /* \"restrict RT2\" is invalid */\n+  char *restrict restrict r4; /* { dg-warning \"duplicate .restrict.\" } */\n+  char *restrict *restrict r5;\n+}\n+\n+void c1(const CT1 t) { }\n+void c2(const CT2 t) { }\n+void c3(CT1 const t) { }\n+void c4(CT2 const t) { }\n+void c5(const int const t) { }  /* { dg-warning \"duplicate .const.\" } */\n+void v1(volatile VT1 t) { }\n+void v2(volatile VT2 t) { }\n+void v3(VT1 volatile t) { }\n+void v4(VT2 volatile t) { }\n+void v5(volatile int volatile t) { } /* { dg-warning \"duplicate .volatile.\" } */\n+void r1(restrict RT1 t) { }\n+void r2(RT1 restrict t) { }\n+void r3(RT2 restrict t) { }\n+void r4(char *restrict restrict t) { }  /* { dg-warning \"duplicate .restrict.\" } */\n+\n+typedef const CT1 CCT1;\n+typedef const CT2 CCT2;\n+typedef CT1 const CT1C;\n+typedef CT2 const CT2C;\n+typedef const int const CIC;    /* { dg-warning \"duplicate .const.\" } */\n+typedef volatile VT1 VVT1;\n+typedef volatile VT2 VVT2;\n+typedef VT1 volatile VT1V;\n+typedef VT2 volatile VT2V;\n+typedef volatile int volatile VIV; /* { dg-warning \"duplicate .volatile.\" } */\n+typedef RT1 restrict RT1R;\n+typedef RT2 restrict RT2R;\n+typedef restrict RT1 RRT1;\n+typedef int *restrict restrict IRR; /* { dg-warning \"duplicate .restrict.\" } */"}]}