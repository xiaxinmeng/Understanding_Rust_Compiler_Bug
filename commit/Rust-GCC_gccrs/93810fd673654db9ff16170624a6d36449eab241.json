{"sha": "93810fd673654db9ff16170624a6d36449eab241", "node_id": "C_kwDOANBUbNoAKDkzODEwZmQ2NzM2NTRkYjlmZjE2MTcwNjI0YTZkMzY0NDllYWIyNDE", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-11-03T15:04:22Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-11-18T23:00:08Z"}, "message": "c++: Implement C++23 P0849R8 - auto(x) [PR103049]\n\nThis patch implements P0849R8 which allows auto in a functional cast,\nthe result of which is a prvalue.\n\n[expr.type.conv]/1 says that the type is determined by placeholder type\ndeduction.  We only accept 'auto', not 'decltype(auto)' -- that the\ntype shall be auto comes from [dcl.type.auto.deduct].  Therefore the\nrules are like for [temp.deduct.call], deducing template arguments from\na function call, so the result type will never be a reference, and we\ndecay arrays/functions.\n\n\tPR c++/103049\n\ngcc/cp/ChangeLog:\n\n\t* semantics.c (finish_compound_literal): Accept C++23 auto{x}.\n\t* typeck2.c (build_functional_cast_1): Accept C++23 auto(x).\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/auto25.C: Adjust dg-error.\n\t* g++.dg/cpp0x/auto9.C: Likewise.\n\t* g++.dg/cpp2a/concepts-pr84979-2.C: Likewise.\n\t* g++.dg/cpp2a/concepts-pr84979-3.C: Likewise.\n\t* g++.dg/cpp23/auto-fncast1.C: New test.\n\t* g++.dg/cpp23/auto-fncast2.C: New test.\n\t* g++.dg/cpp23/auto-fncast3.C: New test.\n\t* g++.dg/cpp23/auto-fncast4.C: New test.\n\t* g++.dg/cpp23/auto-fncast5.C: New test.\n\t* g++.dg/cpp23/auto-fncast6.C: New test.", "tree": {"sha": "f31a7d9ee315aff919b2dd0a393c981dae0e4b54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f31a7d9ee315aff919b2dd0a393c981dae0e4b54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93810fd673654db9ff16170624a6d36449eab241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93810fd673654db9ff16170624a6d36449eab241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93810fd673654db9ff16170624a6d36449eab241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93810fd673654db9ff16170624a6d36449eab241/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f4ac4f81f89caac7e74127ed2e6db6bbb3d7426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4ac4f81f89caac7e74127ed2e6db6bbb3d7426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4ac4f81f89caac7e74127ed2e6db6bbb3d7426"}], "stats": {"total": 228, "additions": 215, "deletions": 13}, "files": [{"sha": "d962b290211289eedf0a16c12ad6166890c0824b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -3134,6 +3134,20 @@ finish_compound_literal (tree type, tree compound_literal,\n       if (type == error_mark_node)\n \treturn error_mark_node;\n     }\n+  /* C++23 auto{x}.  */\n+  else if (is_auto (type)\n+\t   && !AUTO_IS_DECLTYPE (type)\n+\t   && CONSTRUCTOR_NELTS (compound_literal) == 1)\n+    {\n+      if (cxx_dialect < cxx23)\n+\tpedwarn (input_location, OPT_Wc__23_extensions,\n+\t\t \"%<auto{x}%> only available with \"\n+\t\t \"%<-std=c++2b%> or %<-std=gnu++2b%>\");\n+      type = do_auto_deduction (type, compound_literal, type, complain,\n+\t\t\t\tadc_variable_type);\n+      if (type == error_mark_node)\n+\treturn error_mark_node;\n+    }\n \n   /* Used to hold a copy of the compound literal in a template.  */\n   tree orig_cl = NULL_TREE;"}, {"sha": "3fb651a02ba1e2eb2b46b8cddc3331ed40d5c28d", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -2201,19 +2201,29 @@ build_functional_cast_1 (location_t loc, tree exp, tree parms,\n \n   if (tree anode = type_uses_auto (type))\n     {\n-      if (!CLASS_PLACEHOLDER_TEMPLATE (anode))\n+      tree init;\n+      if (CLASS_PLACEHOLDER_TEMPLATE (anode))\n+\tinit = parms;\n+      /* C++23 auto(x).  */\n+      else if (!AUTO_IS_DECLTYPE (anode)\n+\t       && list_length (parms) == 1)\n \t{\n-\t  if (complain & tf_error)\n-\t    error_at (loc, \"invalid use of %qT\", anode);\n-\t  return error_mark_node;\n+\t  init = TREE_VALUE (parms);\n+\t  if (cxx_dialect < cxx23)\n+\t    pedwarn (loc, OPT_Wc__23_extensions,\n+\t\t     \"%<auto(x)%> only available with \"\n+\t\t     \"%<-std=c++2b%> or %<-std=gnu++2b%>\");\n \t}\n       else\n \t{\n-\t  type = do_auto_deduction (type, parms, anode, complain,\n-\t\t\t\t    adc_variable_type);\n-\t  if (type == error_mark_node)\n-\t    return error_mark_node;\n+\t  if (complain & tf_error)\n+\t    error_at (loc, \"invalid use of %qT\", anode);\n+\t  return error_mark_node;\n \t}\n+      type = do_auto_deduction (type, init, anode, complain,\n+\t\t\t\tadc_variable_type);\n+      if (type == error_mark_node)\n+\treturn error_mark_node;\n     }\n \n   if (processing_template_decl)"}, {"sha": "3af089958fba6a6d015d74820b06e30a77b89ff6", "filename": "gcc/testsuite/g++.dg/cpp0x/auto25.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto25.C?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -3,10 +3,10 @@\n \n template<int> struct A\n {\n-  int a[auto(1)]; // { dg-error \"9:invalid use of\" }\n+  int a[auto(1)]; // { dg-error \"9:only available\" \"\" { target c++20_down } }\n };\n \n template<int> void foo()\n {\n-  int a[auto(1)]; // { dg-error \"9:invalid use of\" }\n+  int a[auto(1)]; // { dg-error \"9:only available\" \"\" { target c++20_down } }\n }"}, {"sha": "a3a6caf0a66f47612f5775921605720dce1edb23", "filename": "gcc/testsuite/g++.dg/cpp0x/auto9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -45,7 +45,7 @@ foo ()\n   C<int> c;\n   dynamic_cast<auto> (c);\t\t\t// { dg-error \"auto\" }\n   reinterpret_cast<auto> (c);\t\t\t// { dg-error \"auto\" }\n-  int i = auto (0);\t\t\t\t// { dg-error \"auto\" }\n+  int i = auto (0);\t\t\t\t// { dg-error \"auto\" \"\" { target c++20_down } }\n   auto p1 = new (auto);\t\t\t\t// { dg-error \"auto\" }\n   auto p2 = new (auto) (42);\t\t\t// { dg-error \"invalid use of|deduce\" }\n   offsetof (auto, fld);\t\t\t\t// { dg-error \"auto\" }"}, {"sha": "25e53c4d61ea7c4a69b429cb85d18ea1f9f6fcd7", "filename": "gcc/testsuite/g++.dg/cpp23/auto-fncast1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast1.C?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/103049\n+// P0849R8 - auto(x)\n+// { dg-do compile { target c++23 } }\n+// Testcase from P0849R8.\n+\n+struct A {};\n+void f(A&) = delete;  // #1\n+void f(A&&); // #2\n+A& g();\n+void h() {\n+//  f(g());      // calls #1\n+  f(A(g()));     // calls #2 with a temporary object\n+  f(auto(g()));  // calls #2 with a temporary object\n+}"}, {"sha": "327a4480030fee19a28542053389cda0dc6e9959", "filename": "gcc/testsuite/g++.dg/cpp23/auto-fncast2.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast2.C?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -0,0 +1,62 @@\n+// PR c++/103049\n+// P0849R8 - auto(x)\n+// { dg-do compile { target c++23 } }\n+\n+struct X { };\n+X& fn ();\n+X&& fnr ();\n+\n+void h()\n+{\n+  double v[] = { 1.2, 3.4 };\n+  +auto(v);\n+  +auto{v};\n+  static_assert (__is_same_as (decltype (auto(v)), double *));\n+  static_assert (__is_same_as (decltype (auto{v}), double *));\n+  auto a1 = fn ();\n+  static_assert (__is_same_as (decltype (auto(fn())), decltype (a1)));\n+  static_assert (__is_same_as (decltype (auto{fn()}), decltype (a1)));\n+  auto a2 = fnr ();\n+  static_assert (__is_same_as (decltype (auto(fnr())), decltype (a2)));\n+  static_assert (__is_same_as (decltype (auto{fnr()}), decltype (a2)));\n+  +auto(1);\n+  new auto(1);\n+  +auto{1};\n+  new auto{1};\n+}\n+\n+template<typename T>\n+void baz (T t, const T &tr, T &&trr)\n+{\n+  +auto(t);\n+  +auto{t};\n+  +auto(tr);\n+  +auto{tr};\n+  +auto(trr);\n+  +auto{trr};\n+  static_assert (__is_same_as (decltype (auto(t)), T));\n+  static_assert (__is_same_as (decltype (auto{t}), T));\n+  static_assert (__is_same_as (decltype (auto(tr)), T));\n+  static_assert (__is_same_as (decltype (auto{tr}), T));\n+  static_assert (__is_same_as (decltype (auto(trr)), T));\n+  static_assert (__is_same_as (decltype (auto{trr}), T));\n+}\n+\n+template<typename = decltype(auto(1))>\n+void foo ()\n+{\n+}\n+\n+template<int = auto(1)>\n+void bar ()\n+{\n+}\n+\n+void\n+g()\n+{\n+  foo<>();\n+  bar<>();\n+  int i = 42;\n+  baz (1, i, 42);\n+}"}, {"sha": "1204458c9316c2d5d2347800aa5784b20d8573c7", "filename": "gcc/testsuite/g++.dg/cpp23/auto-fncast3.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast3.C?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/103049\n+// P0849R8 - auto(x)\n+// { dg-do compile { target c++23 } }\n+// Test invalid use.\n+\n+void\n+f ()\n+{\n+  char x[] = \"foo\";\n+  +decltype(auto){x}; // { dg-error \"invalid use of .decltype\\\\(auto\\\\).\" }\n+  +decltype(auto)(x); // { dg-error \"invalid use of .decltype\\\\(auto\\\\).\" }\n+\n+  +auto(); // { dg-error \"invalid use of .auto.\" }\n+  new auto(); // { dg-error \"requires exactly one element\" }\n+  +auto{}; // { dg-error \"invalid use of .auto.\" }\n+  new auto{}; // { dg-error \"requires exactly one element\" }\n+  +auto(1, 2); // { dg-error \"invalid use of .auto.\" }\n+  new auto(1, 2); // { dg-error \"requires exactly one element\" }\n+  +auto{1, 2}; // { dg-error \"too many initializers\" }\n+  new auto{1, 2}; // { dg-error \"requires exactly one element\" }\n+}"}, {"sha": "0e26bf2bc6629b755f916b508f119b7bb866761d", "filename": "gcc/testsuite/g++.dg/cpp23/auto-fncast4.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast4.C?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/103049\n+// P0849R8 - auto(x)\n+// { dg-do compile { target c++23 } }\n+\n+class cmdline_parser\n+{\n+    public:\n+    cmdline_parser(char const*);\n+\n+    auto add_option(char const*, char const*) & -> cmdline_parser &;\n+    auto add_option(char const*, char const*) && -> cmdline_parser &&;\n+\n+    void parse(int, char**);\n+};\n+\n+int main(int argc, char *argv[])\n+{\n+    auto cmdline = cmdline_parser(\"driver\");\n+\n+    cmdline.add_option(\"-h\", \"show help messages\")\n+           .add_option(\"-v\", \"show version\");\n+\n+    auto internal = auto(cmdline).add_option(\"--logging-level\", \"set logging level to 1-3\")\n+                                 .add_option(\"--dump-full\", \"do not minimize dump\");\n+    internal.parse(argc, argv);\n+}"}, {"sha": "b29901ffea4d9bb58066638a0ef1ba067937c3c8", "filename": "gcc/testsuite/g++.dg/cpp23/auto-fncast5.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast5.C?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/103049\n+// P0849R8 - auto(x)\n+// { dg-do compile { target c++23 } }\n+\n+struct X {\n+  X() = default;\n+  X(const X&) = delete;\n+};\n+\n+void\n+g ()\n+{\n+  X x;\n+  +X(x); // { dg-error \"use of deleted function\" }\n+  +auto(x); // { dg-error \"use of deleted function\" }\n+}\n+\n+class A;\n+void f(A);\n+\n+class A {\n+    int x;\n+\n+public:\n+    A();\n+\n+    auto run() {\n+        f(A(*this));\n+        f(auto(*this));\n+    }\n+\n+protected:\n+    A(const A&);\n+};\n+\n+void z () {\n+  A a;\n+  a.run ();\n+}"}, {"sha": "6b7858d9de5729c9beb6cf616374cde450c06349", "filename": "gcc/testsuite/g++.dg/cpp23/auto-fncast6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-fncast6.C?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/103049\n+// P0849R8 - auto(x)\n+// { dg-do compile { target c++20 } }\n+\n+void f (int);\n+\n+void\n+g ()\n+{\n+  auto a1 = auto(f); // { dg-error \"only available with\" \"\" { target c++20_only } }\n+  auto a2 = auto{f}; // { dg-error \"only available with\" \"\" { target c++20_only } }\n+  static_assert (__is_same_as (decltype (a1), void(*)(int)));\n+  static_assert (__is_same_as (decltype (a2), void(*)(int)));\n+}"}, {"sha": "025bbf3bb938c552e400b356f28127f6f55fdaf1", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84979-2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-2.C?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -6,7 +6,8 @@ void foo1(T& t) {\n   typename T::template C<void> tcv = t;\n   typename T::template C<auto> u = tcv; // { dg-error \"not permitted\" \"\" { target c++20 } }\n   T::template C<auto>::f (tcv, u); // { dg-error \"incomplete|not permitted\" }\n-  (typename T::template D<auto> (t)); // { dg-error \"invalid|not permitted\" }\n+  (typename T::template D<auto> (t)); // { dg-error \"invalid|not permitted|unable\" }\n+// { dg-warning \"only available\" \"\" { target c++17_down } .-1 }\n }\n \n struct T1 {"}, {"sha": "80a388462eb4a9e9577707c8a73f70d225628652", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr84979-3.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93810fd673654db9ff16170624a6d36449eab241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr84979-3.C?ref=93810fd673654db9ff16170624a6d36449eab241", "patch": "@@ -10,7 +10,8 @@ void foo1(T& t) {\n   typename T::template C<void> tcv = t;\n   typename T::template C<auto> u = tcv; // { dg-error \"not permitted\" \"\" { target c++20 } }\n   T::template C<auto>::f (tcv, u); // { dg-error \"incomplete|not permitted\" }\n-  (typename T::template D<auto> (t)); // { dg-error \"invalid|not permitted\" }\n+  (typename T::template D<auto> (t)); // { dg-error \"invalid|not permitted|no class\" }\n+// { dg-warning \"only available\" \"\" { target c++17_down } .-1 }\n }\n \n struct T1 {"}]}