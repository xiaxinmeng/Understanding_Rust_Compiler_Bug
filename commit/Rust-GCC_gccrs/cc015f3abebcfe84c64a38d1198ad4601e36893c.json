{"sha": "cc015f3abebcfe84c64a38d1198ad4601e36893c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MwMTVmM2FiZWJjZmU4NGM2NGEzOGQxMTk4YWQ0NjAxZTM2ODkzYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-18T19:12:54Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-18T19:12:54Z"}, "message": "Allow calling diagnostic_show_locus without a diagnostic_info\n\nMuch of diagnostic-show-locus.c currently expects a diagnostic_info *,\nbut it only uses the rich_location and the diagnostic_t.\n\nChange the signature of diagnostic_show_locus from:\n\n  void\n  diagnostic_show_locus (diagnostic_context *,\n                         const diagnostic_info *);\n\nto:\n\n  void\n  diagnostic_show_locus (diagnostic_context *,\n                         rich_location *richloc,\n                         diagnostic_t diagnostic_kind);\n\nso that it can be used for things other than diagnostics.\n\nUse this flexibility to add selftests for diagnostic_show_locus.\n\ngcc/c-family/ChangeLog:\n\t* c-opts.c (c_diagnostic_finalizer): Update for change to\n\tdiagnostic_show_locus.\n\ngcc/ChangeLog:\n\t* diagnostic-show-locus.c (colorizer::colorizer): Replace diagnostic\n\tparam with diagnostic_kind.\n\t(class colorizer): Similarly replace field m_diagnostic with\n\tm_diagnostic_kind.\n\t(colorizer::colorizer): Replace diagnostic\n\tparam with diagnostic_kind.\n\t(colorizer::begin_state): Update for above field change.\n\t(layout::layout): Replace diagnostic param with rich_location *\n\tand diagnostic_kind.\n\t(diagnostic_show_locus): Replace diagnostic param with richloc\n\tand diagnostic_kind.\n\t(class selftest::test_diagnostic_context): New class.\n\t(selftest::test_diagnostic_show_locus_unknown_location): New\n\tfunction.\n\t(selftest::test_one_liner_simple_caret): New function.\n\t(selftest::test_one_liner_caret_and_range): New function.\n\t(selftest::test_one_liner_multiple_carets_and_ranges): New\n\tfunction.\n\t(selftest::test_one_liner_fixit_remove): New function.\n\t(selftest::test_one_liner_fixit_replace): New function.\n\t(selftest::test_diagnostic_show_locus_one_liner): New function.\n\t(selftest::diagnostic_show_locus_c_tests): Call the new test\n\tfunctions.\n\t* diagnostic.c (diagnostic_initialize): Initialize\n\tcolorize_source_p, show_ruler_p and parseable_fixits_p.\n\t(default_diagnostic_finalizer): Update for change to\n\tdiagnostic_show_locus.\n\t(diagnostic_append_note): Likewise.\n\t* diagnostic.h (diagnostic_show_locus): Replace\n\tconst diagnostic_info * param with location * and diagnostic_t.\n\ngcc/fortran/ChangeLog:\n\t* error.c (gfc_diagnostic_starter): Update for change to\n\tdiagnostic_show_locus.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n\t(custom_diagnostic_finalizer): Update for change to\n\tdiagnostic_show_locus.\n\nFrom-SVN: r239586", "tree": {"sha": "a7f2af441e7947ebe123aaf89cf1d965ee9c7728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7f2af441e7947ebe123aaf89cf1d965ee9c7728"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc015f3abebcfe84c64a38d1198ad4601e36893c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc015f3abebcfe84c64a38d1198ad4601e36893c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc015f3abebcfe84c64a38d1198ad4601e36893c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc015f3abebcfe84c64a38d1198ad4601e36893c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb18fd07f2962779c2651adc970541210d4ad98f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb18fd07f2962779c2651adc970541210d4ad98f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb18fd07f2962779c2651adc970541210d4ad98f"}], "stats": {"total": 309, "additions": 285, "deletions": 24}, "files": [{"sha": "c268e0001ababfc9f3de306fa86e3299fd6a4e01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc015f3abebcfe84c64a38d1198ad4601e36893c", "patch": "@@ -1,3 +1,36 @@\n+2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c (colorizer::colorizer): Replace diagnostic\n+\tparam with diagnostic_kind.\n+\t(class colorizer): Similarly replace field m_diagnostic with\n+\tm_diagnostic_kind.\n+\t(colorizer::colorizer): Replace diagnostic\n+\tparam with diagnostic_kind.\n+\t(colorizer::begin_state): Update for above field change.\n+\t(layout::layout): Replace diagnostic param with rich_location *\n+\tand diagnostic_kind.\n+\t(diagnostic_show_locus): Replace diagnostic param with richloc\n+\tand diagnostic_kind.\n+\t(class selftest::test_diagnostic_context): New class.\n+\t(selftest::test_diagnostic_show_locus_unknown_location): New\n+\tfunction.\n+\t(selftest::test_one_liner_simple_caret): New function.\n+\t(selftest::test_one_liner_caret_and_range): New function.\n+\t(selftest::test_one_liner_multiple_carets_and_ranges): New\n+\tfunction.\n+\t(selftest::test_one_liner_fixit_remove): New function.\n+\t(selftest::test_one_liner_fixit_replace): New function.\n+\t(selftest::test_diagnostic_show_locus_one_liner): New function.\n+\t(selftest::diagnostic_show_locus_c_tests): Call the new test\n+\tfunctions.\n+\t* diagnostic.c (diagnostic_initialize): Initialize\n+\tcolorize_source_p, show_ruler_p and parseable_fixits_p.\n+\t(default_diagnostic_finalizer): Update for change to\n+\tdiagnostic_show_locus.\n+\t(diagnostic_append_note): Likewise.\n+\t* diagnostic.h (diagnostic_show_locus): Replace\n+\tconst diagnostic_info * param with location * and diagnostic_t.\n+\n 2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* input.c (saved_line_table): New global."}, {"sha": "616ca132de32fa6e9e4eac5ac9519ceda085251a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=cc015f3abebcfe84c64a38d1198ad4601e36893c", "patch": "@@ -1,3 +1,8 @@\n+2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-opts.c (c_diagnostic_finalizer): Update for change to\n+\tdiagnostic_show_locus.\n+\n 2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.c: Include \"spellcheck.h\"."}, {"sha": "e83944c90ad702f0959fdf78b5608b0feb6ef337", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=cc015f3abebcfe84c64a38d1198ad4601e36893c", "patch": "@@ -164,7 +164,7 @@ static void\n c_diagnostic_finalizer (diagnostic_context *context,\n \t\t\tdiagnostic_info *diagnostic)\n {\n-  diagnostic_show_locus (context, diagnostic);\n+  diagnostic_show_locus (context, diagnostic->richloc, diagnostic->kind);\n   /* By default print macro expansion contexts in the diagnostic\n      finalizer -- for tokens resulting from macro expansion.  */\n   virt_loc_aware_diagnostic_finalizer (context, diagnostic);"}, {"sha": "4498f7ce5da3cb35198cc54affa61968efeebd82", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 225, "deletions": 18, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=cc015f3abebcfe84c64a38d1198ad4601e36893c", "patch": "@@ -74,7 +74,7 @@ class colorizer\n {\n  public:\n   colorizer (diagnostic_context *context,\n-\t     const diagnostic_info *diagnostic);\n+\t     diagnostic_t diagnostic_kind);\n   ~colorizer ();\n \n   void set_range (int range_idx) { set_state (range_idx); }\n@@ -90,7 +90,7 @@ class colorizer\n   static const int STATE_NORMAL_TEXT = -1;\n \n   diagnostic_context *m_context;\n-  const diagnostic_info *m_diagnostic;\n+  diagnostic_t m_diagnostic_kind;\n   int m_current_state;\n   const char *m_caret_cs;\n   const char *m_caret_ce;\n@@ -187,7 +187,8 @@ class layout\n {\n  public:\n   layout (diagnostic_context *context,\n-\t  const diagnostic_info *diagnostic);\n+\t  rich_location *richloc,\n+\t  diagnostic_t diagnostic_kind);\n \n   int get_num_line_spans () const { return m_line_spans.length (); }\n   const line_span *get_line_span (int idx) const { return &m_line_spans[idx]; }\n@@ -239,9 +240,9 @@ class layout\n    different kinds of things we might need to print.  */\n \n colorizer::colorizer (diagnostic_context *context,\n-\t\t      const diagnostic_info *diagnostic) :\n+\t\t      diagnostic_t diagnostic_kind) :\n   m_context (context),\n-  m_diagnostic (diagnostic),\n+  m_diagnostic_kind (diagnostic_kind),\n   m_current_state (STATE_NORMAL_TEXT)\n {\n   m_caret_ce = colorize_stop (pp_show_color (context->printer));\n@@ -288,7 +289,7 @@ colorizer::begin_state (int state)\n       pp_string\n \t(m_context->printer,\n \t colorize_start (pp_show_color (m_context->printer),\n-\t\t\t diagnostic_get_color_for_kind (m_diagnostic->kind)));\n+\t\t\t diagnostic_get_color_for_kind (m_diagnostic_kind)));\n       break;\n \n     case 1:\n@@ -699,18 +700,18 @@ compatible_locations_p (location_t loc_a, location_t loc_b)\n    will fit within the max_width provided by the diagnostic_context.  */\n \n layout::layout (diagnostic_context * context,\n-\t\tconst diagnostic_info *diagnostic)\n+\t\trich_location *richloc,\n+\t\tdiagnostic_t diagnostic_kind)\n : m_context (context),\n   m_pp (context->printer),\n-  m_diagnostic_kind (diagnostic->kind),\n-  m_exploc (diagnostic->richloc->get_expanded_location (0)),\n-  m_colorizer (context, diagnostic),\n+  m_diagnostic_kind (diagnostic_kind),\n+  m_exploc (richloc->get_expanded_location (0)),\n+  m_colorizer (context, diagnostic_kind),\n   m_colorize_source_p (context->colorize_source_p),\n   m_layout_ranges (rich_location::MAX_RANGES),\n   m_line_spans (1 + rich_location::MAX_RANGES),\n   m_x_offset (0)\n {\n-  rich_location *richloc = diagnostic->richloc;\n   source_location primary_loc = richloc->get_range (0)->m_loc;\n \n   for (unsigned int idx = 0; idx < richloc->get_num_locations (); idx++)\n@@ -1276,30 +1277,32 @@ layout::show_ruler (int max_column) const\n \n void\n diagnostic_show_locus (diagnostic_context * context,\n-\t\t       const diagnostic_info *diagnostic)\n+\t\t       rich_location *richloc,\n+\t\t       diagnostic_t diagnostic_kind)\n {\n   pp_newline (context->printer);\n \n+  location_t loc = richloc->get_loc ();\n   /* Do nothing if source-printing has been disabled.  */\n   if (!context->show_caret)\n     return;\n \n   /* Don't attempt to print source for UNKNOWN_LOCATION and for builtins.  */\n-  if (diagnostic_location (diagnostic, 0) <= BUILTINS_LOCATION)\n+  if (loc <= BUILTINS_LOCATION)\n     return;\n \n   /* Don't print the same source location twice in a row, unless we have\n      fix-it hints.  */\n-  if (diagnostic_location (diagnostic, 0) == context->last_location\n-      && diagnostic->richloc->get_num_fixit_hints () == 0)\n+  if (loc == context->last_location\n+      && richloc->get_num_fixit_hints () == 0)\n     return;\n \n-  context->last_location = diagnostic_location (diagnostic, 0);\n+  context->last_location = loc;\n \n   const char *saved_prefix = pp_get_prefix (context->printer);\n   pp_set_prefix (context->printer, NULL);\n \n-  layout layout (context, diagnostic);\n+  layout layout (context, richloc, diagnostic_kind);\n   for (int line_span_idx = 0; line_span_idx < layout.get_num_line_spans ();\n        line_span_idx++)\n     {\n@@ -1319,7 +1322,7 @@ diagnostic_show_locus (diagnostic_context * context,\n \t  if (layout.print_source_line (row, &lbounds))\n \t    {\n \t      layout.print_annotation_line (row, lbounds);\n-\t      layout.print_any_fixits (row, diagnostic->richloc);\n+\t      layout.print_any_fixits (row, richloc);\n \t    }\n \t}\n     }\n@@ -1331,6 +1334,206 @@ diagnostic_show_locus (diagnostic_context * context,\n \n namespace selftest {\n \n+/* Selftests for diagnostic_show_locus.  */\n+\n+/* Convenience subclass of diagnostic_context for testing\n+   diagnostic_show_locus.  */\n+\n+class test_diagnostic_context : public diagnostic_context\n+{\n+ public:\n+  test_diagnostic_context ()\n+  {\n+    diagnostic_initialize (this, 0);\n+    show_caret = true;\n+  }\n+  ~test_diagnostic_context ()\n+  {\n+    diagnostic_finish (this);\n+  }\n+};\n+\n+/* Verify that diagnostic_show_locus works sanely on UNKNOWN_LOCATION.  */\n+\n+static void\n+test_diagnostic_show_locus_unknown_location ()\n+{\n+  test_diagnostic_context dc;\n+  rich_location richloc (line_table, UNKNOWN_LOCATION);\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  ASSERT_STREQ (\"\\n\", pp_formatted_text (dc.printer));\n+}\n+\n+/* Verify that diagnostic_show_locus works sanely for various\n+   single-line cases.\n+\n+   All of these work on the following 1-line source file:\n+     .0000000001111111\n+     .1234567890123456\n+     \"foo = bar.field;\\n\"\n+   which is set up by test_diagnostic_show_locus_one_liner and calls\n+   them.  */\n+\n+/* Just a caret.  */\n+\n+static void\n+test_one_liner_simple_caret ()\n+{\n+  test_diagnostic_context dc;\n+  location_t caret = linemap_position_for_column (line_table, 10);\n+  rich_location richloc (line_table, caret);\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\" foo = bar.field;\\n\"\n+\t\t\"          ^\\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n+/* Caret and range.  */\n+\n+static void\n+test_one_liner_caret_and_range ()\n+{\n+  test_diagnostic_context dc;\n+  location_t caret = linemap_position_for_column (line_table, 10);\n+  location_t start = linemap_position_for_column (line_table, 7);\n+  location_t finish = linemap_position_for_column (line_table, 15);\n+  location_t loc = make_location (caret, start, finish);\n+  rich_location richloc (line_table, loc);\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\" foo = bar.field;\\n\"\n+\t\t\"       ~~~^~~~~~\\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n+/* Multiple ranges and carets.  */\n+\n+static void\n+test_one_liner_multiple_carets_and_ranges ()\n+{\n+  test_diagnostic_context dc;\n+  location_t foo\n+    = make_location (linemap_position_for_column (line_table, 2),\n+\t\t     linemap_position_for_column (line_table, 1),\n+\t\t     linemap_position_for_column (line_table, 3));\n+  dc.caret_chars[0] = 'A';\n+\n+  location_t bar\n+    = make_location (linemap_position_for_column (line_table, 8),\n+\t\t     linemap_position_for_column (line_table, 7),\n+\t\t     linemap_position_for_column (line_table, 9));\n+  dc.caret_chars[1] = 'B';\n+\n+  location_t field\n+    = make_location (linemap_position_for_column (line_table, 13),\n+\t\t     linemap_position_for_column (line_table, 11),\n+\t\t     linemap_position_for_column (line_table, 15));\n+  dc.caret_chars[2] = 'C';\n+\n+  rich_location richloc (line_table, foo);\n+  richloc.add_range (bar, true);\n+  richloc.add_range (field, true);\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\" foo = bar.field;\\n\"\n+\t\t\" ~A~   ~B~ ~~C~~\\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n+/* Insertion fix-it hint: adding an \"&\" to the front of \"bar.field\". */\n+\n+static void\n+test_one_liner_fixit_insert ()\n+{\n+  test_diagnostic_context dc;\n+  location_t caret = linemap_position_for_column (line_table, 7);\n+  rich_location richloc (line_table, caret);\n+  richloc.add_fixit_insert (caret, \"&\");\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\" foo = bar.field;\\n\"\n+\t\t\"       ^\\n\"\n+\t\t\"       &\\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n+/* Removal fix-it hint: removal of the \".field\". */\n+\n+static void\n+test_one_liner_fixit_remove ()\n+{\n+  test_diagnostic_context dc;\n+  location_t start = linemap_position_for_column (line_table, 10);\n+  location_t finish = linemap_position_for_column (line_table, 15);\n+  location_t dot = make_location (start, start, finish);\n+  rich_location richloc (line_table, dot);\n+  source_range range;\n+  range.m_start = start;\n+  range.m_finish = finish;\n+  richloc.add_fixit_remove (range);\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\" foo = bar.field;\\n\"\n+\t\t\"          ^~~~~~\\n\"\n+\t\t\"          ------\\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n+/* Replace fix-it hint: replacing \"field\" with \"m_field\". */\n+\n+static void\n+test_one_liner_fixit_replace ()\n+{\n+  test_diagnostic_context dc;\n+  location_t start = linemap_position_for_column (line_table, 11);\n+  location_t finish = linemap_position_for_column (line_table, 15);\n+  location_t field = make_location (start, start, finish);\n+  rich_location richloc (line_table, field);\n+  source_range range;\n+  range.m_start = start;\n+  range.m_finish = finish;\n+  richloc.add_fixit_replace (range, \"m_field\");\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\" foo = bar.field;\\n\"\n+\t\t\"           ^~~~~\\n\"\n+\t\t\"           m_field\\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n+/* Run the various one-liner tests.  */\n+\n+static void\n+test_diagnostic_show_locus_one_liner (const line_table_case &case_)\n+{\n+  /* Create a tempfile and write some text to it.\n+     ....................0000000001111111.\n+     ....................1234567890123456.  */\n+  const char *content = \"foo = bar.field;\\n\";\n+  temp_source_file tmp (SELFTEST_LOCATION, \".c\", content);\n+  line_table_test ltt (case_);\n+\n+  linemap_add (line_table, LC_ENTER, false, tmp.get_filename (), 1);\n+\n+  location_t line_end = linemap_position_for_column (line_table, 16);\n+\n+  /* Don't attempt to run the tests if column data might be unavailable.  */\n+  if (line_end > LINE_MAP_MAX_LOCATION_WITH_COLS)\n+    return;\n+\n+  ASSERT_STREQ (tmp.get_filename (), LOCATION_FILE (line_end));\n+  ASSERT_EQ (1, LOCATION_LINE (line_end));\n+  ASSERT_EQ (16, LOCATION_COLUMN (line_end));\n+\n+  test_one_liner_simple_caret ();\n+  test_one_liner_caret_and_range ();\n+  test_one_liner_multiple_carets_and_ranges ();\n+  test_one_liner_fixit_insert ();\n+  test_one_liner_fixit_remove ();\n+  test_one_liner_fixit_replace ();\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -1341,6 +1544,10 @@ diagnostic_show_locus_c_tests ()\n   test_range_contains_point_for_multiple_lines ();\n \n   test_get_line_width_without_trailing_whitespace ();\n+\n+  test_diagnostic_show_locus_unknown_location ();\n+\n+  for_each_line_table_case (test_diagnostic_show_locus_one_liner);\n }\n \n } // namespace selftest"}, {"sha": "fec48c4e441beaf2d261e67a59ebf4ee74ce9e84", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=cc015f3abebcfe84c64a38d1198ad4601e36893c", "patch": "@@ -171,6 +171,9 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->x_data = NULL;\n   context->lock = 0;\n   context->inhibit_notes_p = false;\n+  context->colorize_source_p = false;\n+  context->show_ruler_p = false;\n+  context->parseable_fixits_p = false;\n }\n \n /* Maybe initialize the color support. We require clients to do this\n@@ -575,7 +578,7 @@ void\n default_diagnostic_finalizer (diagnostic_context *context,\n \t\t\t      diagnostic_info *diagnostic)\n {\n-  diagnostic_show_locus (context, diagnostic);\n+  diagnostic_show_locus (context, diagnostic->richloc, diagnostic->kind);\n   pp_destroy_prefix (context->printer);\n   pp_flush (context->printer);\n }\n@@ -1025,7 +1028,7 @@ diagnostic_append_note (diagnostic_context *context,\n   pp_output_formatted_text (context->printer);\n   pp_destroy_prefix (context->printer);\n   pp_set_prefix (context->printer, saved_prefix);\n-  diagnostic_show_locus (context, &diagnostic);\n+  diagnostic_show_locus (context, &richloc, DK_NOTE);\n   va_end (ap);\n }\n "}, {"sha": "104e39c868a60d2dab9b41d5b00a39e3e5a98d89", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=cc015f3abebcfe84c64a38d1198ad4601e36893c", "patch": "@@ -284,7 +284,9 @@ extern void diagnostic_initialize (diagnostic_context *, int);\n extern void diagnostic_color_init (diagnostic_context *, int value = -1);\n extern void diagnostic_finish (diagnostic_context *);\n extern void diagnostic_report_current_module (diagnostic_context *, location_t);\n-extern void diagnostic_show_locus (diagnostic_context *, const diagnostic_info *);\n+extern void diagnostic_show_locus (diagnostic_context *,\n+\t\t\t\t   rich_location *richloc,\n+\t\t\t\t   diagnostic_t diagnostic_kind);\n \n /* Force diagnostics controlled by OPTIDX to be kind KIND.  */\n extern diagnostic_t diagnostic_classify_diagnostic (diagnostic_context *,"}, {"sha": "4d1c2ad4eabf2acf221466e30a9d550ddb35d72a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cc015f3abebcfe84c64a38d1198ad4601e36893c", "patch": "@@ -1,3 +1,8 @@\n+2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* error.c (gfc_diagnostic_starter): Update for change to\n+\tdiagnostic_show_locus.\n+\n 2016-08-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/67496"}, {"sha": "fe91419ce445ee868491488045c1a1c8b41be42d", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=cc015f3abebcfe84c64a38d1198ad4601e36893c", "patch": "@@ -1093,7 +1093,7 @@ gfc_diagnostic_starter (diagnostic_context *context,\n       free (locus_prefix);\n       /* Fortran uses an empty line between locus and caret line.  */\n       pp_newline (context->printer);\n-      diagnostic_show_locus (context, diagnostic);\n+      diagnostic_show_locus (context, diagnostic->richloc, diagnostic->kind);\n       /* If the caret line was shown, the prefix does not contain the\n \t locus.  */\n       pp_set_prefix (context->printer, kind_prefix);"}, {"sha": "7da55951e9a435a56a4b250ffa688053f0cf2630", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc015f3abebcfe84c64a38d1198ad4601e36893c", "patch": "@@ -1,3 +1,9 @@\n+2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n+\t(custom_diagnostic_finalizer): Update for change to\n+\tdiagnostic_show_locus.\n+\n 2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/cpp/misspelled-directive-1.c: New testcase."}, {"sha": "d57400d90fff5f223cad8cffc8837a10c6d38b2c", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc015f3abebcfe84c64a38d1198ad4601e36893c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=cc015f3abebcfe84c64a38d1198ad4601e36893c", "patch": "@@ -133,7 +133,7 @@ custom_diagnostic_finalizer (diagnostic_context *context,\n   bool old_show_color = pp_show_color (context->printer);\n   if (force_show_locus_color)\n     pp_show_color (context->printer) = true;\n-  diagnostic_show_locus (context, diagnostic);\n+  diagnostic_show_locus (context, diagnostic->richloc, diagnostic->kind);\n   pp_show_color (context->printer) = old_show_color;\n \n   pp_destroy_prefix (context->printer);"}]}