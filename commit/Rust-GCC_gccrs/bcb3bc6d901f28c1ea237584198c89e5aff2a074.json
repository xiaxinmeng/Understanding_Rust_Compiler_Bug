{"sha": "bcb3bc6d901f28c1ea237584198c89e5aff2a074", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiM2JjNmQ5MDFmMjhjMWVhMjM3NTg0MTk4Yzg5ZTVhZmYyYTA3NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-01-10T16:34:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-01-10T16:34:17Z"}, "message": "cfgcleanup.c (try_forward_edges): Properly initialize nthreaded_edges; update edge probabilities to match.\n\n\t* cfgcleanup.c (try_forward_edges): Properly initialize nthreaded_edges;\n        update edge probabilities to match.\n\nFrom-SVN: r48734", "tree": {"sha": "e6bfbcfd4a9ad86d0d36c4357e1d76fbda1b9fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6bfbcfd4a9ad86d0d36c4357e1d76fbda1b9fc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcb3bc6d901f28c1ea237584198c89e5aff2a074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb3bc6d901f28c1ea237584198c89e5aff2a074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb3bc6d901f28c1ea237584198c89e5aff2a074", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb3bc6d901f28c1ea237584198c89e5aff2a074/comments", "author": null, "committer": null, "parents": [{"sha": "0a553c7e1853074ee0616f92ce6b749f389e547a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a553c7e1853074ee0616f92ce6b749f389e547a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a553c7e1853074ee0616f92ce6b749f389e547a"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "d53102fd8afb56c0cfc76dadbb42dbc9fe3e83aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb3bc6d901f28c1ea237584198c89e5aff2a074/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb3bc6d901f28c1ea237584198c89e5aff2a074/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcb3bc6d901f28c1ea237584198c89e5aff2a074", "patch": "@@ -1,3 +1,8 @@\n+Thu Jan 10 17:19:12 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfgcleanup.c (try_forward_edges): Properly initialize nthreaded_edges;\n+        update edge probabilities to match.\n+\n 2002-01-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* Makefile.in ($(docdir)/gccint.info, gccint.dvi): Add additional"}, {"sha": "0af87b4b3a48da6a5ecd3acd28cab165ed6a5669", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb3bc6d901f28c1ea237584198c89e5aff2a074/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb3bc6d901f28c1ea237584198c89e5aff2a074/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=bcb3bc6d901f28c1ea237584198c89e5aff2a074", "patch": "@@ -370,13 +370,13 @@ try_forward_edges (mode, b)\n {\n   bool changed = false;\n   edge e, next, *threaded_edges = NULL;\n-  int nthreaded_edges = 0;\n \n   for (e = b->succ; e; e = next)\n     {\n       basic_block target, first;\n       int counter;\n       bool threaded = false;\n+      int nthreaded_edges = 0;\n \n       next = e->succ_next;\n \n@@ -412,7 +412,7 @@ try_forward_edges (mode, b)\n \t      edge t = thread_jump (mode, e, target);\n \t      if (t)\n \t\t{\n-\t\t  if (!nthreaded_edges)\n+\t\t  if (!threaded_edges)\n \t\t    threaded_edges = xmalloc (sizeof (*threaded_edges)\n \t\t\t\t\t      * n_basic_blocks);\n \t\t  else\n@@ -521,16 +521,44 @@ try_forward_edges (mode, b)\n \t      edge t;\n \n \t      first->count -= edge_count;\n-\t      first->succ->count -= edge_count;\n \t      first->frequency -= edge_frequency;\n \t      if (first->succ->succ_next)\n \t\t{\n+\t\t  edge e;\n+\t\t  int prob;\n \t\t  if (n >= nthreaded_edges)\n \t\t    abort ();\n \t\t  t = threaded_edges [n++];\n+\t\t  if (t->src != first)\n+\t\t    abort ();\n+\t\t  if (first->frequency)\n+\t\t    prob = edge_frequency * REG_BR_PROB_BASE / first->frequency;\n+\t\t  else\n+\t\t    prob = 0;\n+\t\t  t->probability -= prob;\n+\t\t  prob = REG_BR_PROB_BASE - prob;\n+\t\t  if (prob == 0)\n+\t\t    {\n+\t\t      first->succ->probability = REG_BR_PROB_BASE;\n+\t\t      first->succ->succ_next->probability = 0;\n+\t\t    }\n+\t\t  else\n+\t\t    for (e = first->succ; e; e = e->succ_next)\n+\t\t      e->probability = ((e->probability * REG_BR_PROB_BASE)\n+\t\t\t\t\t/ (double) prob);\n \t\t}\n \t      else\n-\t\tt = first->succ;\n+\t\t{\n+\t\t  /* It is possible that as the result of\n+\t\t     threading we've removed edge as it is\n+\t\t     threaded to the fallthru edge.  Avoid\n+\t\t     getting out of sync.  */\n+\t\t  if (n < nthreaded_edges\n+\t\t      && first == threaded_edges [n]->src)\n+\t\t    n++;\n+\t\t  t = first->succ;\n+\t\t }\n+\t      t->count -= edge_count;\n \n \t      first = t->dest;\n \t    }"}]}