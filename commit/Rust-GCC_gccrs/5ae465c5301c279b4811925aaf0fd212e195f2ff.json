{"sha": "5ae465c5301c279b4811925aaf0fd212e195f2ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlNDY1YzUzMDFjMjc5YjQ4MTE5MjVhYWYwZmQyMTJlMTk1ZjJmZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-11-13T16:49:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-11-13T16:49:40Z"}, "message": "Define std::experimental::randint etc.\n\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/experimental/random: New.\n\t* testsuite/experimental/random/randint.cc: New.\n\nFrom-SVN: r230332", "tree": {"sha": "9981a5a021f7346003dcdce5648f746a27d259d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9981a5a021f7346003dcdce5648f746a27d259d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ae465c5301c279b4811925aaf0fd212e195f2ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae465c5301c279b4811925aaf0fd212e195f2ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae465c5301c279b4811925aaf0fd212e195f2ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae465c5301c279b4811925aaf0fd212e195f2ff/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebedc9a3414d842274607b77597759bd36e0f3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebedc9a3414d842274607b77597759bd36e0f3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebedc9a3414d842274607b77597759bd36e0f3e0"}], "stats": {"total": 170, "additions": 170, "deletions": 0}, "files": [{"sha": "2a4cc86fae3d4b220eee6d7eda8b34edd66cc2ca", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae465c5301c279b4811925aaf0fd212e195f2ff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae465c5301c279b4811925aaf0fd212e195f2ff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ae465c5301c279b4811925aaf0fd212e195f2ff", "patch": "@@ -1,3 +1,10 @@\n+2015-11-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/experimental/random: New.\n+\t* testsuite/experimental/random/randint.cc: New.\n+\n 2015-11-13  John Marino  <gnugcc@marino.st>\n \n \t* testsuite/22_locale/codecvt/always_noconv/char/wrapped_env.cc:"}, {"sha": "5560b9e834e8c899340be507ea8cb67b94a1cdc6", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae465c5301c279b4811925aaf0fd212e195f2ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae465c5301c279b4811925aaf0fd212e195f2ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=5ae465c5301c279b4811925aaf0fd212e195f2ff", "patch": "@@ -660,6 +660,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/numeric \\\n \t${experimental_srcdir}/optional \\\n \t${experimental_srcdir}/propagate_const \\\n+\t${experimental_srcdir}/random \\\n \t${experimental_srcdir}/ratio \\\n \t${experimental_srcdir}/regex \\\n \t${experimental_srcdir}/set \\"}, {"sha": "077446b49b86aeb05767cf37dc39bad1ae57a0d4", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae465c5301c279b4811925aaf0fd212e195f2ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae465c5301c279b4811925aaf0fd212e195f2ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=5ae465c5301c279b4811925aaf0fd212e195f2ff", "patch": "@@ -949,6 +949,7 @@ experimental_headers = \\\n \t${experimental_srcdir}/numeric \\\n \t${experimental_srcdir}/optional \\\n \t${experimental_srcdir}/propagate_const \\\n+\t${experimental_srcdir}/random \\\n \t${experimental_srcdir}/ratio \\\n \t${experimental_srcdir}/regex \\\n \t${experimental_srcdir}/set \\"}, {"sha": "9be1d31647d309af3a2a0f9859b8f60748c7dc89", "filename": "libstdc++-v3/include/experimental/random", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae465c5301c279b4811925aaf0fd212e195f2ff/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae465c5301c279b4811925aaf0fd212e195f2ff/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Frandom?ref=5ae465c5301c279b4811925aaf0fd212e195f2ff", "patch": "@@ -0,0 +1,77 @@\n+// <experimental/random> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/random\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_RANDOM\n+#define _GLIBCXX_EXPERIMENTAL_RANDOM 1\n+\n+#include <random>\n+\n+namespace std {\n+namespace experimental {\n+inline namespace fundamentals_v2 {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+#define __cpp_lib_experimental_randint 201511\n+\n+  inline std::default_random_engine&\n+  _S_randint_engine()\n+  {\n+    static thread_local default_random_engine __eng{random_device{}()};\n+    return __eng;\n+  }\n+\n+  // 13.2.2.1, Function template randint\n+  template<typename _IntType>\n+    inline _IntType\n+    randint(_IntType __a, _IntType __b)\n+    {\n+      static_assert(is_integral<_IntType>::value && sizeof(_IntType) > 1,\n+\t\t    \"argument must be an integer type\");\n+      using _Dist = std::uniform_int_distribution<_IntType>;\n+      static thread_local _Dist __dist;\n+      return __dist(_S_randint_engine(), typename _Dist::param_type{__a, __b});\n+    }\n+\n+  inline void\n+  reseed()\n+  {\n+    _S_randint_engine().seed(random_device{}());\n+  }\n+\n+  inline void\n+  reseed(default_random_engine::result_type __value)\n+  {\n+    _S_randint_engine().seed(__value);\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif"}, {"sha": "d5238361f7fd0ab82dcbe835e7eadaa1e76520f2", "filename": "libstdc++-v3/testsuite/experimental/random/randint.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae465c5301c279b4811925aaf0fd212e195f2ff/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Frandom%2Frandint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae465c5301c279b4811925aaf0fd212e195f2ff/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Frandom%2Frandint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Frandom%2Frandint.cc?ref=5ae465c5301c279b4811925aaf0fd212e195f2ff", "patch": "@@ -0,0 +1,84 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-require-effective-target tls_runtime }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  for (int i = 0; i < 100; ++i)\n+  {\n+    const int n = std::experimental::randint(-10, i);\n+    VERIFY( -10 <= n && n <= i );\n+  }\n+\n+  std::experimental::reseed(99u);\n+  const long n1[] = {\n+    std::experimental::randint(0, 100),\n+    std::experimental::randint(0, 100),\n+    std::experimental::randint(0, 100),\n+    std::experimental::randint(0, 100),\n+    std::experimental::randint(0, 100)\n+  };\n+  std::experimental::reseed(99u);\n+  const long n2[] = {\n+    std::experimental::randint(0, 100),\n+    std::experimental::randint(0, 100),\n+    std::experimental::randint(0, 100),\n+    std::experimental::randint(0, 100),\n+    std::experimental::randint(0, 100)\n+  };\n+  for (int i = 0; i < 5; ++i)\n+    VERIFY( n1[i] == n2[i] );\n+\n+  std::experimental::reseed();\n+  const long n3[] = {\n+    std::experimental::randint(0, 100),\n+    std::experimental::randint(0, 100),\n+    std::experimental::randint(0, 100)\n+  };\n+  VERIFY( !(n3[0] == n1[0] && n3[1] == n1[1] && n3[2] == n1[2]) );\n+}\n+\n+void\n+test02()\n+{\n+  auto check = [](auto v) {\n+    auto n = std::experimental::randint(decltype(v)(0), v);\n+    static_assert(std::is_same<decltype(n), decltype(v)>::value,\n+        \"return type is correct\");\n+    VERIFY(0 <= n && n <= v);\n+  };\n+  check( (short)10 );\n+  check( 100 );\n+  check( 1000L );\n+  check( 10000LL );\n+  check( (unsigned short)10 );\n+  check( 100U );\n+  check( 1000UL );\n+  check( 10000ULL );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}