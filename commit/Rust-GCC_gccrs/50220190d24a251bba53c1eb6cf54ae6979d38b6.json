{"sha": "50220190d24a251bba53c1eb6cf54ae6979d38b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAyMjAxOTBkMjRhMjUxYmJhNTNjMWViNmNmNTRhZTY5NzlkMzhiNg==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-12-21T21:23:52Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-12-21T21:23:52Z"}, "message": "re PR fortran/38398 (g0.w edit descriptor: Update for F2008 Tokyo meeting changes)\n\n2008-12-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/38398\n\t* io/io.h (st_parameter_dt): Add new bit to keep track of when to\n\tsuppress blanks for g0 formatting.\n\t* io/transfer.c (formatted_transfer_scalar): Always call write_real_g0\n\tfor g0 formatting.\n\t* io.c (write.c): Do not use ES formatting and use new bit to suppress\n\tblanks.\n\t* io/write_float.def (output_float): Adjust the location of setting the\n\twidth so that it can be adjusted when suppressing blanks.  Set number of\n\tblanks to zero when dtp->u.p.g0_no_blanks is set. Do some minor code\n\tclean-up and add some white space for readability.\n\nFrom-SVN: r142871", "tree": {"sha": "a2782d026ced11088ac3bddad90c020959504cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2782d026ced11088ac3bddad90c020959504cdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50220190d24a251bba53c1eb6cf54ae6979d38b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50220190d24a251bba53c1eb6cf54ae6979d38b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50220190d24a251bba53c1eb6cf54ae6979d38b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50220190d24a251bba53c1eb6cf54ae6979d38b6/comments", "author": null, "committer": null, "parents": [{"sha": "c8129db1047d3133c1acea369d91424e150bce22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8129db1047d3133c1acea369d91424e150bce22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8129db1047d3133c1acea369d91424e150bce22"}], "stats": {"total": 65, "additions": 42, "deletions": 23}, "files": [{"sha": "f60c5d0e8def9ad464fc39e23c1bc7f74a4640fe", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50220190d24a251bba53c1eb6cf54ae6979d38b6/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50220190d24a251bba53c1eb6cf54ae6979d38b6/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=50220190d24a251bba53c1eb6cf54ae6979d38b6", "patch": "@@ -1,3 +1,17 @@\n+2008-12-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/38398\n+\t* io/io.h (st_parameter_dt): Add new bit to keep track of when to\n+\tsuppress blanks for g0 formatting.\n+\t* io/transfer.c (formatted_transfer_scalar): Always call write_real_g0\n+\tfor g0 formatting.\n+\t* io.c (write.c): Do not use ES formatting and use new bit to suppress\n+\tblanks.\n+\t* io/write_float.def (output_float): Adjust the location of setting the\n+\twidth so that it can be adjusted when suppressing blanks.  Set number of\n+\tblanks to zero when dtp->u.p.g0_no_blanks is set. Do some minor code\n+\tclean-up and add some white space for readability.\n+\t\n 2008-12-18  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure: Regenerate."}, {"sha": "1993158ef589f3ef1b27c788e3934ba9d0af4484", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50220190d24a251bba53c1eb6cf54ae6979d38b6/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50220190d24a251bba53c1eb6cf54ae6979d38b6/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=50220190d24a251bba53c1eb6cf54ae6979d38b6", "patch": "@@ -444,7 +444,9 @@ typedef struct st_parameter_dt\n \t  /* An internal unit specific flag to signify an EOF condition for list\n \t     directed read.  */\n \t  unsigned at_eof : 1;\n-\t  /* 16 unused bits.  */\n+\t  /* Used for g0 floating point output.  */\n+\t  unsigned g0_no_blanks : 1;\n+\t  /* 15 unused bits.  */\n \n \t  char last_char;\n \t  char nml_delim;"}, {"sha": "d50641bcce59fb2934b6e2210e10afff6fa89392", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50220190d24a251bba53c1eb6cf54ae6979d38b6/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50220190d24a251bba53c1eb6cf54ae6979d38b6/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=50220190d24a251bba53c1eb6cf54ae6979d38b6", "patch": "@@ -1221,12 +1221,7 @@ formatted_transfer_scalar (st_parameter_dt *dtp, bt type, void *p, int kind,\n \t\tbreak;\n \t      case BT_REAL:\n \t\tif (f->u.real.w == 0)\n-\t\t  {\n-\t\t    if (f->u.real.d == 0)\n-\t\t      write_real (dtp, p, kind);\n-\t\t    else\n-\t\t      write_real_g0 (dtp, p, kind, f->u.real.d);\n-\t\t  }\n+\t\t  write_real_g0 (dtp, p, kind, f->u.real.d);\n \t\telse\n \t\t  write_d (dtp, f, p, kind);\n \t\tbreak;"}, {"sha": "e3d38e638e800b272516ffe69bdb4b30a459fd64", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50220190d24a251bba53c1eb6cf54ae6979d38b6/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50220190d24a251bba53c1eb6cf54ae6979d38b6/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=50220190d24a251bba53c1eb6cf54ae6979d38b6", "patch": "@@ -1010,13 +1010,12 @@ void\n write_real_g0 (st_parameter_dt *dtp, const char *source, int length, int d)\n {\n   fnode f ;\n-  int org_scale = dtp->u.p.scale_factor;\n-  dtp->u.p.scale_factor = 1;\n   set_fnode_default (dtp, &f, length);\n-  f.format = FMT_ES;\n-  f.u.real.d = d;\n+  if (d > 0)\n+    f.u.real.d = d;\n+  dtp->u.p.g0_no_blanks = 1;\n   write_float (dtp, &f, source , length);\n-  dtp->u.p.scale_factor = org_scale;\n+  dtp->u.p.g0_no_blanks = 0;\n }\n \n "}, {"sha": "a5d292ca76cdb1053f0601f7c83daf33064b9ecf", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50220190d24a251bba53c1eb6cf54ae6979d38b6/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50220190d24a251bba53c1eb6cf54ae6979d38b6/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=50220190d24a251bba53c1eb6cf54ae6979d38b6", "patch": "@@ -333,15 +333,6 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n   else\n     edigits = 0;\n \n-  /* Pick a field size if none was specified.  */\n-  if (w <= 0)\n-    w = nbefore + nzero + nafter + (sign != S_NONE ? 2 : 1);\n-\n-  /* Create the ouput buffer.  */\n-  out = write_block (dtp, w);\n-  if (out == NULL)\n-    return;\n-\n   /* Zero values always output as positive, even if the value was negative\n      before rounding.  */\n   for (i = 0; i < ndigits; i++)\n@@ -359,11 +350,26 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \tsign = calculate_sign (dtp, 0);\n     }\n \n+  /* Pick a field size if none was specified.  */\n+  if (w <= 0)\n+    w = nbefore + nzero + nafter + (sign != S_NONE ? 2 : 1);\n+  \n   /* Work out how much padding is needed.  */\n   nblanks = w - (nbefore + nzero + nafter + edigits + 1);\n   if (sign != S_NONE)\n     nblanks--;\n \n+  if (dtp->u.p.g0_no_blanks)\n+    {\n+      w -= nblanks;\n+      nblanks = 0;\n+    }\n+\n+  /* Create the ouput buffer.  */\n+  out = write_block (dtp, w);\n+  if (out == NULL)\n+    return;\n+\n   /* Check the value fits in the specified field width.  */\n   if (nblanks < 0 || edigits == -1)\n     {\n@@ -419,6 +425,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n       digits += i;\n       out += nbefore;\n     }\n+\n   /* Output the decimal point.  */\n   *(out++) = dtp->u.p.current_unit->decimal_status == DECIMAL_POINT ? '.' : ',';\n \n@@ -461,12 +468,14 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n #endif\n       memcpy (out, buffer, edigits);\n     }\n+\n   if (dtp->u.p.no_leading_blank)\n     {\n       out += edigits;\n       memset( out , ' ' , nblanks );\n       dtp->u.p.no_leading_blank = 0;\n     }\n+\n #undef STR\n #undef STR1\n #undef MIN_FIELD_WIDTH\n@@ -606,7 +615,7 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n   int save_scale_factor, nb = 0;\\\n \\\n   save_scale_factor = dtp->u.p.scale_factor;\\\n-  newf = get_mem (sizeof (fnode));\\\n+  newf = (fnode *) get_mem (sizeof (fnode));\\\n \\\n   exp_d = calculate_exp_ ## x (d);\\\n   if ((m > 0.0 && m < 0.1 - 0.05 / exp_d) || (m >= exp_d - 0.5 ) ||\\\n@@ -680,7 +689,7 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n \\\n   free_mem(newf);\\\n \\\n-  if (nb > 0)\\\n+  if (nb > 0 && !dtp->u.p.g0_no_blanks)\\\n     { \\\n       p = write_block (dtp, nb);\\\n       if (p == NULL)\\"}]}