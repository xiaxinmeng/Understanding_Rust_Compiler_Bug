{"sha": "1058a848dcd220965dd4d126eb9f4159782dd586", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA1OGE4NDhkY2QyMjA5NjVkZDRkMTI2ZWI5ZjQxNTk3ODJkZDU4Ng==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-01-06T01:03:45Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-01-06T01:03:45Z"}, "message": "natThread.cc (finish_): Don't clear 'group'.\n\n\t* java/lang/natThread.cc (finish_): Don't clear 'group'.\n\t* sources.am, Makefile.in: Rebuilt.\n\t* java/lang/Runtime.java (exit): Merged with Classpath.\n\t(runShutdownHooks): New method from Classpath.\n\t* java/io/File.java (deleteOnExit): Use DeleteFileHelper, not\n\tFileDeleter.\n\t* gnu/gcj/runtime/FileDeleter.java: Removed.\n\t* java/lang/natRuntime.cc (runFinalizationForExit): New method.\n\t(exitInternal): Don't run finalizers or delete files.\n\nFrom-SVN: r109400", "tree": {"sha": "b1406d0aef45f9b54fc3cb3b56375bc3ce39b15c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1406d0aef45f9b54fc3cb3b56375bc3ce39b15c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1058a848dcd220965dd4d126eb9f4159782dd586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1058a848dcd220965dd4d126eb9f4159782dd586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1058a848dcd220965dd4d126eb9f4159782dd586", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1058a848dcd220965dd4d126eb9f4159782dd586/comments", "author": null, "committer": null, "parents": [{"sha": "0c158c887f3669dd47297b68b1aa490f5da5b7ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c158c887f3669dd47297b68b1aa490f5da5b7ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c158c887f3669dd47297b68b1aa490f5da5b7ad"}], "stats": {"total": 218, "additions": 122, "deletions": 96}, "files": [{"sha": "4cbb9e738ddf773f3c51fc1e62b29624421069aa", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1058a848dcd220965dd4d126eb9f4159782dd586", "patch": "@@ -1,3 +1,15 @@\n+2006-01-05  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/natThread.cc (finish_): Don't clear 'group'.\n+\t* sources.am, Makefile.in: Rebuilt.\n+\t* java/lang/Runtime.java (exit): Merged with Classpath.\n+\t(runShutdownHooks): New method from Classpath.\n+\t* java/io/File.java (deleteOnExit): Use DeleteFileHelper, not\n+\tFileDeleter.\n+\t* gnu/gcj/runtime/FileDeleter.java: Removed.\n+\t* java/lang/natRuntime.cc (runFinalizationForExit): New method.\n+\t(exitInternal): Don't run finalizers or delete files.\n+\n 2006-01-05  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/natPosixProcess.cc (reap): Ignore unknown children."}, {"sha": "66e5fc5c3c77b49040d61a78992b462de9da0dec", "filename": "libjava/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=1058a848dcd220965dd4d126eb9f4159782dd586", "patch": "@@ -1168,7 +1168,6 @@ gnu_gcj_io_header_files = $(patsubst %.java,%.h,$(gnu_gcj_io_source_files))\n gnu_gcj_runtime_source_files = \\\n gnu/gcj/runtime/BootClassLoader.java \\\n gnu/gcj/runtime/ExtensionClassLoader.java \\\n-gnu/gcj/runtime/FileDeleter.java \\\n gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/HelperClassLoader.java \\\n gnu/gcj/runtime/JNIWeakRef.java \\"}, {"sha": "d5f99d04c4712e457b8b0b57d36a454b62e888dd", "filename": "libjava/gnu/gcj/runtime/FileDeleter.java", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c158c887f3669dd47297b68b1aa490f5da5b7ad/libjava%2Fgnu%2Fgcj%2Fruntime%2FFileDeleter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c158c887f3669dd47297b68b1aa490f5da5b7ad/libjava%2Fgnu%2Fgcj%2Fruntime%2FFileDeleter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FFileDeleter.java?ref=0c158c887f3669dd47297b68b1aa490f5da5b7ad", "patch": "@@ -1,35 +0,0 @@\n-/* Copyright (C) 2000  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-package gnu.gcj.runtime;\n-\n-import java.io.*;\n-import java.util.*;\n-\n-public final class FileDeleter\n-{\n-  public synchronized static void add (File f)\n-  {\n-    if (deleteOnExitStack == null)\n-      deleteOnExitStack = new Stack ();\n-\n-    deleteOnExitStack.push (f);\n-  }\n-\n-  // Helper method called by java.lang.Runtime.exit() to perform\n-  // pending deletions.\n-  public synchronized static void deleteOnExitNow ()\n-  {\n-    if (deleteOnExitStack != null)\n-      while (!deleteOnExitStack.empty ())\n-\t((File)(deleteOnExitStack.pop ())).delete ();\n-  }\n-\n-  // A stack of files to delete upon normal termination.\n-  private static Stack deleteOnExitStack;\n-}"}, {"sha": "95626eb3a71a40e422ba108d8dae8c7a241e5feb", "filename": "libjava/gnu/java/lang/natMainThread.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fgnu%2Fjava%2Flang%2FnatMainThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fgnu%2Fjava%2Flang%2FnatMainThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Flang%2FnatMainThread.cc?ref=1058a848dcd220965dd4d126eb9f4159782dd586", "patch": "@@ -1,6 +1,6 @@\n // natMainThread.cc - Implementation of MainThread native methods.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2003  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2003, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -15,8 +15,11 @@ details.  */\n \n #include <gcj/cni.h>\n #include <jvm.h>\n+#include <java-threads.h>\n \n #include <gnu/java/lang/MainThread.h>\n+#include <java/lang/Runtime.h>\n+#include <java/lang/ThreadGroup.h>\n \n typedef void main_func (jobject);\n \n@@ -45,4 +48,15 @@ gnu::java::lang::MainThread::call_main (void)\n \n   main_func *real_main = (main_func *) meth->ncode;\n   (*real_main) (args);\n+\n+  // Note that we do thread cleanup here.  We have to do this here and\n+  // not in _Jv_RunMain; if we do if after the main thread has exited,\n+  // our ThreadGroup will be null, and if Runtime.exit tries to create\n+  // a new Thread (which it does when running shutdown hooks), it will\n+  // eventually NPE due to this.\n+  _Jv_ThreadWait ();\n+\n+  int status = (int) ::java::lang::ThreadGroup::had_uncaught_exception;\n+  ::java::lang::Runtime *runtime = ::java::lang::Runtime::getRuntime ();\n+  runtime->exit (status);\n }"}, {"sha": "1b02b601aaf6a48c81ebe01ba12957bd544d8656", "filename": "libjava/java/io/File.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fjava%2Fio%2FFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fjava%2Fio%2FFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFile.java?ref=1058a848dcd220965dd4d126eb9f4159782dd586", "patch": "@@ -1,5 +1,5 @@\n /* File.java -- Class representing a file on disk\n-   Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004, 2005\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -44,7 +44,6 @@\n import java.net.URISyntaxException;\n import java.net.URL;\n import gnu.classpath.Configuration;\n-import gnu.gcj.runtime.FileDeleter;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n@@ -1375,7 +1374,7 @@ public void deleteOnExit()\n     if (sm != null)\n       sm.checkDelete (getName());\n \n-    FileDeleter.add (this);\n+    DeleteFileHelper.add(this);\n   }\n \n   private void writeObject(ObjectOutputStream oos) throws IOException"}, {"sha": "519b4ac8c5ef7a081099441abf19706dbf5ab784", "filename": "libjava/java/lang/Runtime.java", "status": "modified", "additions": 80, "deletions": 40, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fjava%2Flang%2FRuntime.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fjava%2Flang%2FRuntime.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FRuntime.java?ref=1058a848dcd220965dd4d126eb9f4159782dd586", "patch": "@@ -1,5 +1,5 @@\n /* Runtime.java -- access to the VM process\n-   Copyright (C) 1998, 2002, 2003, 2004, 2005 Free Software Foundation\n+   Copyright (C) 1998, 2002, 2003, 2004, 2005, 2006 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -146,6 +146,56 @@ public void exit(int status)\n     SecurityManager sm = SecurityManager.current; // Be thread-safe!\n     if (sm != null)\n       sm.checkExit(status);\n+\n+    if (runShutdownHooks())\n+      halt(status);\n+\n+    // Someone else already called runShutdownHooks().\n+    // Make sure we are not/no longer in the shutdownHooks set.\n+    // And wait till the thread that is calling runShutdownHooks() finishes.\n+    synchronized (libpath)\n+      {\n+        if (shutdownHooks != null)\n+          {\n+            shutdownHooks.remove(Thread.currentThread());\n+            // Interrupt the exit sequence thread, in case it was waiting\n+            // inside a join on our thread.\n+            exitSequence.interrupt();\n+            // Shutdown hooks are still running, so we clear status to\n+\t    // make sure we don't halt.\n+\t    status = 0;\n+          }\n+      }\n+\n+    // If exit() is called again after the shutdown hooks have run, but\n+    // while finalization for exit is going on and the status is non-zero\n+    // we halt immediately.\n+    if (status != 0)\n+      halt(status);\n+\n+    while (true)\n+      try\n+        {\n+          exitSequence.join();\n+        }\n+      catch (InterruptedException e)\n+        {\n+          // Ignore, we've suspended indefinitely to let all shutdown\n+          // hooks complete, and to let any non-zero exits through, because\n+          // this is a duplicate call to exit(0).\n+        }\n+  }\n+\n+  /**\n+   * On first invocation, run all the shutdown hooks and return true.\n+   * Any subsequent invocations will simply return false.\n+   * Note that it is package accessible so that VMRuntime can call it\n+   * when VM exit is not triggered by a call to Runtime.exit().\n+   * \n+   * @return was the current thread the first one to call this method?\n+   */\n+  boolean runShutdownHooks()\n+  {\n     boolean first = false;\n     synchronized (libpath) // Synch on libpath, not this, to avoid deadlock.\n       {\n@@ -177,62 +227,47 @@ public void exit(int status)\n             // itself from the set, then waits indefinitely on the\n             // exitSequence thread. Once the set is empty, set it to null to\n             // signal all finalizer threads that halt may be called.\n-            while (! shutdownHooks.isEmpty())\n+            while (true)\n               {\n                 Thread[] hooks;\n                 synchronized (libpath)\n                   {\n                     hooks = new Thread[shutdownHooks.size()];\n                     shutdownHooks.toArray(hooks);\n                   }\n-                for (int i = hooks.length; --i >= 0; )\n-                  if (! hooks[i].isAlive())\n-                    synchronized (libpath)\n+                if (hooks.length == 0)\n+                  break;\n+                for (int i = 0; i < hooks.length; i++)\n+                  {\n+                    try\n                       {\n-                        shutdownHooks.remove(hooks[i]);\n+                        synchronized (libpath)\n+                          {\n+                            if (!shutdownHooks.contains(hooks[i]))\n+                              continue;\n+                          }\n+                        hooks[i].join();\n+                        synchronized (libpath)\n+                          {\n+                            shutdownHooks.remove(hooks[i]);\n+                          }\n+                      }\n+                    catch (InterruptedException x)\n+                      {\n+                        // continue waiting on the next thread\n                       }\n-                try\n-                  {\n-                    Thread.sleep(1); // Give other threads a chance.\n-                  }\n-                catch (InterruptedException e)\n-                  {\n-                    // Ignore, the next loop just starts sooner.\n                   }\n               }\n             synchronized (libpath)\n               {\n                 shutdownHooks = null;\n               }\n           }\n-        // XXX Right now, it is the VM that knows whether runFinalizersOnExit\n-        // is true; so the VM must look at exitSequence to decide whether\n-        // this should be run on every object.\n-        runFinalization();\n+\t// Run finalization on all finalizable objects (even if they are\n+\t// still reachable).\n+        runFinalizationForExit();\n       }\n-    else\n-      synchronized (libpath)\n-        {\n-          if (shutdownHooks != null)\n-            {\n-              shutdownHooks.remove(Thread.currentThread());\n-              status = 0; // Change status to enter indefinite wait.\n-            }\n-        }\n-    \n-    if (first || status > 0)\n-      halt(status);\n-    while (true)\n-      try\n-        {\n-          exitSequence.join();\n-        }\n-      catch (InterruptedException e)\n-        {\n-          // Ignore, we've suspended indefinitely to let all shutdown\n-          // hooks complete, and to let any non-zero exits through, because\n-          // this is a duplicate call to exit(0).\n-        }\n+    return first;\n   }\n \n   /**\n@@ -667,6 +702,11 @@ public OutputStream getLocalizedOutputStream(OutputStream out)\n    */\n   private static native void init ();\n \n+  /**\n+   * Run finalizers when exiting.\n+   */\n+  private native void runFinalizationForExit();\n+\n   /**\n    * Map a system-independent \"short name\" to the full file name, and append\n    * it to the path."}, {"sha": "5cca1b072a3d157263b0001f889bd041c2ba39ac", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=1058a848dcd220965dd4d126eb9f4159782dd586", "patch": "@@ -1,6 +1,6 @@\n // natRuntime.cc - Implementation of native side of Runtime class.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -21,7 +21,6 @@ details.  */\n #include <java/lang/Runtime.h>\n #include <java/lang/UnknownError.h>\n #include <java/lang/UnsatisfiedLinkError.h>\n-#include <gnu/gcj/runtime/FileDeleter.h>\n #include <gnu/gcj/runtime/FinalizerThread.h>\n #include <java/io/File.h>\n #include <java/util/TimeZone.h>\n@@ -90,19 +89,20 @@ _Jv_FindSymbolInExecutable (const char *)\n \n \f\n \n+void\n+java::lang::Runtime::runFinalizationForExit ()\n+{\n+  if (finalizeOnExit)\n+    _Jv_RunAllFinalizers ();\n+}\n+\n void\n java::lang::Runtime::exitInternal (jint status)\n {\n   // Make status right for Unix.  This is perhaps strange.\n   if (status < 0 || status > 255)\n     status = 255;\n \n-  if (finalizeOnExit)\n-    _Jv_RunAllFinalizers ();\n-\n-  // Delete all files registered with File.deleteOnExit()\n-  gnu::gcj::runtime::FileDeleter::deleteOnExitNow ();\n-\n   ::exit (status);\n }\n "}, {"sha": "da9dcbabfd0755de63af0117ae990c2deefb6055", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=1058a848dcd220965dd4d126eb9f4159782dd586", "patch": "@@ -1,6 +1,6 @@\n // natThread.cc - Native part of Thread class.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2005  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2005, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -213,8 +213,6 @@ java::lang::Thread::finish_ ()\n     }\n #endif\n \n-  group = NULL;\n-\n   // If a method cache was created, free it.\n   _Jv_FreeMethodCache();\n "}, {"sha": "09bca0b6f71f00ad8e737aaae4b60b1817501c26", "filename": "libjava/prims.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=1058a848dcd220965dd4d126eb9f4159782dd586", "patch": "@@ -1,6 +1,6 @@\n // prims.cc - Code for core of runtime environment.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -1387,10 +1387,10 @@ _Jv_RunMain (JvVMInitArgs *vm_args, jclass klass, const char *name, int argc,\n \n   _Jv_AttachCurrentThread (main_thread);\n   _Jv_ThreadRun (main_thread);\n-  _Jv_ThreadWait ();\n \n-  int status = (int) java::lang::ThreadGroup::had_uncaught_exception;\n-  runtime->exit (status);\n+  // If we got here then something went wrong, as MainThread is not\n+  // supposed to terminate.\n+  ::exit (1);\n }\n \n void"}, {"sha": "043621ad632e81e4f5d6baa0146c29b42081b58e", "filename": "libjava/sources.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1058a848dcd220965dd4d126eb9f4159782dd586/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=1058a848dcd220965dd4d126eb9f4159782dd586", "patch": "@@ -555,7 +555,6 @@ gnu/gcj/io.list: $(gnu_gcj_io_source_files)\n gnu_gcj_runtime_source_files = \\\n gnu/gcj/runtime/BootClassLoader.java \\\n gnu/gcj/runtime/ExtensionClassLoader.java \\\n-gnu/gcj/runtime/FileDeleter.java \\\n gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/HelperClassLoader.java \\\n gnu/gcj/runtime/JNIWeakRef.java \\"}]}