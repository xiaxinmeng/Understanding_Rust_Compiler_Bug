{"sha": "bf6319b96ade5c4e855b16250250ca0865856640", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY2MzE5Yjk2YWRlNWM0ZTg1NWIxNjI1MDI1MGNhMDg2NTg1NjY0MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-02-14T23:35:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-02-14T23:35:22Z"}, "message": "regex.h (sub_match::sub_match): Add.\n\n2011-02-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/bits/regex.h (sub_match::sub_match): Add.\n\t(match_results::ready): Add.\n\t(match_results::empty): Adjust.\n\t(match_results::length): Add missing dereference.\n\t(match_results::operator[],prefix,suffix): Add debug mode checks.\n\t(match_results::cend): Re-use end().\n\t(match_results::format): Adjust signatures.\n\t(operator==(match_results,match_results)): Implement.\n\t* include/bits/regex_compiler.h (_Scanner_base): Use constexpr.\n\t* include/bits/regex_constants.h (syntax_option_type): Likewise.\n\t* include/bits/regex_grep_matcher.h: Fix comment typo.\n\t(_Specialized_results::_Specialized_results): Simplify.\n\t* include/bits/regex_cursor.h: Fix comment typo.\n\t* include/bits/regex_nfa.h: Likewise.\n\t* testsuite/28_regex/basic_regex/ctors/basic/string_range_01_02_03.cc:\n\tFix error code, remove xfail.\n\t* testsuite/28_regex/basic_regex/ctors/extended/\n\tstring_range_01_02_03.cc: Likewise.\n\nFrom-SVN: r170158", "tree": {"sha": "59c2aee9d239a5d1cabd1cdec24ca3c791189f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59c2aee9d239a5d1cabd1cdec24ca3c791189f4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf6319b96ade5c4e855b16250250ca0865856640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6319b96ade5c4e855b16250250ca0865856640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf6319b96ade5c4e855b16250250ca0865856640", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6319b96ade5c4e855b16250250ca0865856640/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01efe923a3e625157653652d13c15836bb3a8c41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01efe923a3e625157653652d13c15836bb3a8c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01efe923a3e625157653652d13c15836bb3a8c41"}], "stats": {"total": 230, "additions": 152, "deletions": 78}, "files": [{"sha": "e43018d623a18f15c8f0b33b94966301ed751fcd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf6319b96ade5c4e855b16250250ca0865856640", "patch": "@@ -1,3 +1,24 @@\n+2011-02-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/regex.h (sub_match::sub_match): Add.\n+\t(match_results::ready): Add.\n+\t(match_results::empty): Adjust.\n+\t(match_results::length): Add missing dereference.\n+\t(match_results::operator[],prefix,suffix): Add debug mode checks.\n+\t(match_results::cend): Re-use end().\n+\t(match_results::format): Adjust signatures.\n+\t(operator==(match_results,match_results)): Implement.\n+\t* include/bits/regex_compiler.h (_Scanner_base): Use constexpr.\n+\t* include/bits/regex_constants.h (syntax_option_type): Likewise.\n+\t* include/bits/regex_grep_matcher.h: Fix comment typo.\n+\t(_Specialized_results::_Specialized_results): Simplify.\n+\t* include/bits/regex_cursor.h: Fix comment typo.\n+\t* include/bits/regex_nfa.h: Likewise.\n+\t* testsuite/28_regex/basic_regex/ctors/basic/string_range_01_02_03.cc:\n+\tFix error code, remove xfail.\n+\t* testsuite/28_regex/basic_regex/ctors/extended/\n+\tstring_range_01_02_03.cc: Likewise.\n+\n 2011-02-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/regex_compiler.h: Remove unnecessary bind() calls."}, {"sha": "627bdc0a0b410bd0d90fd80b0c7ef87245c67a3e", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 84, "deletions": 25, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=bf6319b96ade5c4e855b16250250ca0865856640", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -765,6 +765,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       bool matched;\n       \n+      constexpr sub_match() : matched() { }\n+\n       /**\n        * Gets the length of the matching sequence.\n        */\n@@ -1521,6 +1523,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       \n       //@}\n \n+      // 28.10.2, state:\n+      /**\n+       * @brief Indicates if the %match_results is ready.\n+       * @retval true   The object has a fully-established result state.\n+       * @retval false  The object is not ready.\n+       */\n+      bool ready() const { return !_Base_type::empty(); }\n+\n       /**\n        * @name 10.2 Size\n        */\n@@ -1553,7 +1563,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       bool\n       empty() const\n-      { return _Base_type::empty(); }\n+      { return size() == 0; }\n       \n       //@}\n \n@@ -1565,17 +1575,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        * @brief Gets the length of the indicated submatch.\n        * @param sub indicates the submatch.\n+       * @pre   ready() == true\n        *\n        * This function returns the length of the indicated submatch, or the\n        * length of the entire match if @p sub is zero (the default).\n        */\n       difference_type\n       length(size_type __sub = 0) const\n-      { return this[__sub].length(); }\n+      { return (*this)[__sub].length(); }\n \n       /**\n        * @brief Gets the offset of the beginning of the indicated submatch.\n        * @param sub indicates the submatch.\n+       * @pre   ready() == true\n        *\n        * This function returns the offset from the beginning of the target\n        * sequence to the beginning of the submatch, unless the value of @p sub\n@@ -1595,6 +1607,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        * @brief Gets the match or submatch converted to a string type.\n        * @param sub indicates the submatch.\n+       * @pre   ready() == true\n        *\n        * This function gets the submatch (or match, if @p sub is zero) extracted\n        * from the target range and converted to the associated string type.\n@@ -1606,6 +1619,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        * @brief Gets a %sub_match reference for the match or submatch.\n        * @param sub indicates the submatch.\n+       * @pre   ready() == true\n        *\n        * This function gets a reference to the indicated submatch, or the entire\n        * match if @p sub is zero.\n@@ -1616,13 +1630,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const_reference\n       operator[](size_type __sub) const\n       { \n+      \t_GLIBCXX_DEBUG_ASSERT( ready() );\n       \treturn __sub < size()\n \t       ?  _Base_type::operator[](__sub)\n \t       : __unmatched_sub<_Bi_iter>();\n       }\n \n       /**\n        * @brief Gets a %sub_match representing the match prefix.\n+       * @pre   ready() == true\n        *\n        * This function gets a reference to a %sub_match object representing the\n        * part of the target range between the start of the target range and the\n@@ -1631,13 +1647,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const_reference\n       prefix() const\n       {\n+      \t_GLIBCXX_DEBUG_ASSERT( ready() );\n       \treturn !empty()\n       \t       ? _Base_type::operator[](_Base_type::size() - 2)\n \t       : __unmatched_sub<_Bi_iter>();\n       }\n \n       /**\n        * @brief Gets a %sub_match representing the match suffix.\n+       * @pre   ready() == true\n        *\n        * This function gets a reference to a %sub_match object representing the\n        * part of the target range between the end of the match and the end of\n@@ -1646,8 +1664,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const_reference\n       suffix() const\n       {\n-      \treturn !empty()\n-      \t       ? _Base_type::operator[](_Base_type::size() - 1)\n+\t_GLIBCXX_DEBUG_ASSERT( ready() );\n+\treturn !empty()\n+\t       ? _Base_type::operator[](_Base_type::size() - 1)\n \t       : __unmatched_sub<_Bi_iter>();\n       }\n \n@@ -1670,52 +1689,79 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       const_iterator\n       end() const\n-      {\n-      \treturn !empty()\n-      \t       ? _Base_type::end() - 2\n-\t       : _Base_type::end();\n-      }\n+      { return !empty() ? _Base_type::end() - 2 : _Base_type::end(); }\n       \n       /**\n        * @brief Gets an iterator to one-past-the-end of the collection.\n        */\n       const_iterator\n       cend() const\n-      {\n-      \treturn !empty()\n-      \t       ? _Base_type::cend() - 2\n-\t       : _Base_type::cend();\n-      }\n+      { return end(); }\n \n       //@}\n \n       /**\n        * @name 10.4 Formatting\n        *\n-       * These functions perform formatted substitution of the matched character\n-       * sequences into their target.  The format specifiers and escape sequences\n-       * accepted by these functions are determined by their @p flags parameter \n-       * as documented above.\n+       * These functions perform formatted substitution of the matched\n+       * character sequences into their target.  The format specifiers and\n+       * escape sequences accepted by these functions are determined by\n+       * their @p flags parameter as documented above.\n        */\n        //@{\n \n       /**\n+       * @pre   ready() == true\n        * @todo Implement this function.\n        */\n       template<typename _Out_iter>\n         _Out_iter\n-        format(_Out_iter __out, const string_type& __fmt,\n+        format(_Out_iter __out, const char_type* __fmt_first,\n+\t       const char_type* __fmt_last,\n \t       regex_constants::match_flag_type __flags\n \t       = regex_constants::format_default) const\n         { return __out; }\n \n       /**\n-       * @todo Implement this function.\n+       * @pre   ready() == true\n+       */\n+      template<typename _Out_iter, typename _St, typename _Sa>\n+        _Out_iter\n+        format(_Out_iter __out, const basic_string<char_type, _St, _Sa>& __fmt,\n+\t       regex_constants::match_flag_type __flags\n+\t       = regex_constants::format_default) const\n+        {\n+          return format(__out, __fmt.data(), __fmt.data() + __fmt.size(),\n+                        __flags);\n+        }\n+\n+      /**\n+       * @pre   ready() == true\n+       */\n+      template<typename _Out_iter, typename _St, typename _Sa>\n+        basic_string<char_type, _St, _Sa>\n+        format(const basic_string<char_type, _St, _Sa>& __fmt,\n+\t       regex_constants::match_flag_type __flags\n+\t       = regex_constants::format_default) const\n+        {\n+          basic_string<char_type, _St, _Sa> __result;\n+          format(std::back_inserter(__result), __fmt, __flags);\n+          return __result;\n+        }\n+\n+      /**\n+       * @pre   ready() == true\n        */\n       string_type\n-      format(const string_type& __fmt,\n+      format(const char_type* __fmt,\n \t     regex_constants::match_flag_type __flags\n-\t     = regex_constants::format_default) const;\n+\t     = regex_constants::format_default) const\n+      {\n+        string_type __result;\n+        format(std::back_inserter(__result), __fmt + __builtin_strlen(__fmt),\n+               __flags);\n+        return __result;\n+      }\n \n       //@} \n \n@@ -1762,12 +1808,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @brief Compares two match_results for equality.\n    * @returns true if the two objects refer to the same match,\n    * false otherwise.\n-   * @todo Implement this function.\n    */\n   template<typename _Bi_iter, typename _Allocator>\n     inline bool\n     operator==(const match_results<_Bi_iter, _Allocator>& __m1,\n-\t       const match_results<_Bi_iter, _Allocator>& __m2);\n+\t       const match_results<_Bi_iter, _Allocator>& __m2)\n+    {\n+      if (__m1.ready() != __m2.ready())\n+        return false;\n+      if (!__m1.ready())  // both are not ready\n+        return true;\n+      if (__m1.empty() != __m2.empty())\n+        return false;\n+      if (__m1.empty())   // both are empty\n+        return true;\n+      return __m1.prefix() == __m2.prefix()\n+        && __m1.size() == __m2.size()\n+        && std::equal(__m1.begin(), __m1.end(), __m2.begin())\n+        && __m1.suffix() == __m2.suffix();\n+    }\n \n   /**\n    * @brief Compares two match_results for inequality."}, {"sha": "b979c8db14faf377a27e7410c4a183e521d025cd", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=bf6319b96ade5c4e855b16250250ca0865856640", "patch": "@@ -36,12 +36,11 @@ namespace __regex\n {\n   struct _Scanner_base\n   {\n-    // FIXME: replace these constanst with constexpr\n     typedef unsigned int _StateT;\n \n-    static const _StateT _S_state_at_start    = 1 << 0;\n-    static const _StateT _S_state_in_brace    = 1 << 2;\n-    static const _StateT _S_state_in_bracket  = 1 << 3;\n+    static constexpr _StateT _S_state_at_start    = 1 << 0;\n+    static constexpr _StateT _S_state_in_brace    = 1 << 2;\n+    static constexpr _StateT _S_state_in_bracket  = 1 << 3;\n   };\n \n   //\n@@ -51,8 +50,8 @@ namespace __regex\n   // range passed to its constructor as a sequence of parse tokens passed to\n   // the regular expression compiler.  The sequence of tokens provided depends\n   // on the flag settings passed to the constructor:  different regular\n-  // expression gramars will interpret the same input pattern in syntactically\n-  // different ways.\n+  // expression grammars will interpret the same input pattern in\n+  // syntactically different ways.\n   //\n   template<typename _InputIterator>\n     class _Scanner: public _Scanner_base"}, {"sha": "bddef3a26deedca48e8cbe58b731a5151e47ffbd", "filename": "libstdc++-v3/include/bits/regex_constants.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h?ref=bf6319b96ade5c4e855b16250250ca0865856640", "patch": "@@ -76,28 +76,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * Specifies that the matching of regular expressions against a character\n    * sequence shall be performed without regard to case.\n    */\n-  static const syntax_option_type icase      = 1 << _S_icase;\n+  static constexpr syntax_option_type icase      = 1 << _S_icase;\n \n   /**\n    * Specifies that when a regular expression is matched against a character\n    * container sequence, no sub-expression matches are to be stored in the\n    * supplied match_results structure.\n    */\n-  static const syntax_option_type nosubs     = 1 << _S_nosubs;\n+  static constexpr syntax_option_type nosubs     = 1 << _S_nosubs;\n \n   /**\n    * Specifies that the regular expression engine should pay more attention to\n    * the speed with which regular expressions are matched, and less to the\n    * speed with which regular expression objects are constructed. Otherwise\n    * it has no detectable effect on the program output.\n    */\n-  static const syntax_option_type optimize   = 1 << _S_optimize;\n+  static constexpr syntax_option_type optimize   = 1 << _S_optimize;\n \n   /**\n    * Specifies that character ranges of the form [a-b] should be locale\n    * sensitive.\n    */\n-  static const syntax_option_type collate    = 1 << _S_collate;\n+  static constexpr syntax_option_type collate    = 1 << _S_collate;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n@@ -107,7 +107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * in the PERL scripting language but extended with elements found in the\n    * POSIX regular expression grammar.\n    */\n-  static const syntax_option_type ECMAScript = 1 << _S_ECMAScript;\n+  static constexpr syntax_option_type ECMAScript = 1 << _S_ECMAScript;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n@@ -116,15 +116,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * Headers, Section 9, Regular Expressions [IEEE, Information Technology --\n    * Portable Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n    */\n-  static const syntax_option_type basic      = 1 << _S_basic;\n+  static constexpr syntax_option_type basic      = 1 << _S_basic;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n    * that used by POSIX extended regular expressions in IEEE Std 1003.1-2001,\n    * Portable Operating System Interface (POSIX), Base Definitions and Headers,\n    * Section 9, Regular Expressions.\n    */\n-  static const syntax_option_type extended   = 1 << _S_extended;\n+  static constexpr syntax_option_type extended   = 1 << _S_extended;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n@@ -134,23 +134,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * \\\\\\\\, \\\\a, \\\\b, \\\\f, \\\\n, \\\\r, \\\\t , \\\\v, \\\\&apos;, &apos;,\n    * and \\\\ddd (where ddd is one, two, or three octal digits).  \n    */\n-  static const syntax_option_type awk        = 1 << _S_awk;\n+  static constexpr syntax_option_type awk        = 1 << _S_awk;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n    * that used by POSIX utility grep in IEEE Std 1003.1-2001.  This option is\n    * identical to syntax_option_type basic, except that newlines are treated\n    * as whitespace.\n    */\n-  static const syntax_option_type grep       = 1 << _S_grep;\n+  static constexpr syntax_option_type grep       = 1 << _S_grep;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n    * that used by POSIX utility grep when given the -E option in\n    * IEEE Std 1003.1-2001.  This option is identical to syntax_option_type \n    * extended, except that newlines are treated as whitespace.\n    */\n-  static const syntax_option_type egrep      = 1 << _S_egrep;\n+  static constexpr syntax_option_type egrep      = 1 << _S_egrep;\n \n   //@}\n \n@@ -193,56 +193,56 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    * The default matching rules.\n    */\n-  static const match_flag_type match_default     = 0;\n+  static constexpr match_flag_type match_default     = 0;\n \n   /**\n    * The first character in the sequence [first, last) is treated as though it\n    * is not at the beginning of a line, so the character (^) in the regular\n    * expression shall not match [first, first).\n    */\n-  static const match_flag_type match_not_bol     = 1 << _S_not_bol;\n+  static constexpr match_flag_type match_not_bol     = 1 << _S_not_bol;\n \n   /**\n    * The last character in the sequence [first, last) is treated as though it\n    * is not at the end of a line, so the character ($) in the regular\n    * expression shall not match [last, last).\n    */\n-  static const match_flag_type match_not_eol     = 1 << _S_not_eol;\n+  static constexpr match_flag_type match_not_eol     = 1 << _S_not_eol;\n    \n   /**\n    * The expression \\\\b is not matched against the sub-sequence\n    * [first,first).\n    */\n-  static const match_flag_type match_not_bow     = 1 << _S_not_bow;\n+  static constexpr match_flag_type match_not_bow     = 1 << _S_not_bow;\n    \n   /**\n    * The expression \\\\b should not be matched against the sub-sequence\n    * [last,last).\n    */\n-  static const match_flag_type match_not_eow     = 1 << _S_not_eow;\n+  static constexpr match_flag_type match_not_eow     = 1 << _S_not_eow;\n    \n   /**\n    * If more than one match is possible then any match is an acceptable\n    * result.\n    */\n-  static const match_flag_type match_any         = 1 << _S_any;\n+  static constexpr match_flag_type match_any         = 1 << _S_any;\n    \n   /**\n    * The expression does not match an empty sequence.\n    */\n-  static const match_flag_type match_not_null    = 1 << _S_not_null;\n+  static constexpr match_flag_type match_not_null    = 1 << _S_not_null;\n    \n   /**\n    * The expression only matches a sub-sequence that begins at first .\n    */\n-  static const match_flag_type match_continuous  = 1 << _S_continuous;\n+  static constexpr match_flag_type match_continuous  = 1 << _S_continuous;\n    \n   /**\n    * --first is a valid iterator position.  When this flag is set then the\n    * flags match_not_bol and match_not_bow are ignored by the regular\n-   * expression algorithms 7.11 and iterators 7.12.\n+   * expression algorithms 28.11 and iterators 28.12.\n    */\n-  static const match_flag_type match_prev_avail  = 1 << _S_prev_avail;\n+  static constexpr match_flag_type match_prev_avail  = 1 << _S_prev_avail;\n \n   /**\n    * When a regular expression match is to be replaced by a new string, the\n@@ -270,28 +270,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *         undefined, use the empty string instead. If\n    *         nn > match_results::size(), the result is implementation-defined.\n    */\n-  static const match_flag_type format_default    = 0;\n+  static constexpr match_flag_type format_default    = 0;\n \n   /**\n    * When a regular expression match is to be replaced by a new string, the\n    * new string is constructed using the rules used by the POSIX sed utility\n    * in IEEE Std 1003.1- 2001 [IEEE, Information Technology -- Portable\n    * Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n    */\n-  static const match_flag_type format_sed        = 1 << _S_sed;\n+  static constexpr match_flag_type format_sed        = 1 << _S_sed;\n \n   /**\n    * During a search and replace operation, sections of the character\n    * container sequence being searched that do not match the regular\n    * expression shall not be copied to the output string.\n    */\n-  static const match_flag_type format_no_copy    = 1 << _S_no_copy;\n+  static constexpr match_flag_type format_no_copy    = 1 << _S_no_copy;\n \n   /**\n    * When specified during a search and replace operation, only the first\n    * occurrence of the regular expression shall be replaced.\n    */\n-  static const match_flag_type format_first_only = 1 << _S_first_only;\n+  static constexpr match_flag_type format_first_only = 1 << _S_first_only;\n \n   //@}\n "}, {"sha": "c53f7594c5f82d6cfa8193a7a5f02661ad30bd43", "filename": "libstdc++-v3/include/bits/regex_cursor.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h?ref=bf6319b96ade5c4e855b16250250ca0865856640", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -82,7 +82,7 @@ namespace __regex\n       _FwdIterT _M_e;\n     };\n \n-  // Helper funxtion to create a cursor specialized for an iterator class.\n+  // Helper function to create a cursor specialized for an iterator class.\n   template<typename _FwdIterT>\n     inline _SpecializedCursor<_FwdIterT>\n     __cursor(const _FwdIterT& __b, const _FwdIterT __e)"}, {"sha": "202a36eae74c8f715d335d50573a9aedbd17fbbb", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.h", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h?ref=bf6319b96ade5c4e855b16250250ca0865856640", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,7 +40,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   \n namespace __regex\n {\n-  // A _Results facade specialized for wrapping a templated sub_match.\n+  // A _Results facade specialized for wrapping a templated match_results.\n   template<typename _FwdIterT, typename _Alloc>\n     class _SpecializedResults\n     : public _Results\n@@ -68,17 +68,14 @@ namespace __regex\n                         match_results<_FwdIterT, _Alloc>& __m)\n     : _M_results(__m)\n     {\n-      typedef typename match_results<_FwdIterT, _Alloc>::size_type size_type;\n       _M_results.clear();\n-      std::sub_match<_FwdIterT> __sm;\n-      __sm.matched = false;\n-      size_type __result_count = __size + 2;\n-      for (size_type __i = 0; __i < __result_count; ++__i)\n-\t_M_results.push_back(__sm);\n-      _M_results.at(__size+0).first = __cursor._M_begin();\n-      _M_results.at(__size+0).second = __cursor._M_begin();\n-      _M_results.at(__size+1).first = __cursor._M_end();\n-      _M_results.at(__size+1).second = __cursor._M_end();\n+      _M_results.reserve(__size + 2);\n+      _M_results.resize(__size);\n+      typename match_results<_FwdIterT, _Alloc>::value_type __sm;\n+      __sm.first = __sm.second = __cursor._M_begin();\n+      _M_results.push_back(__sm);\n+      __sm.first = __sm.second = __cursor._M_end();\n+      _M_results.push_back(__sm);\n     }\n \n   template<typename _FwdIterT, typename _Alloc>"}, {"sha": "17982eb884b4f0b25d483b5ecedd78433b6afcd5", "filename": "libstdc++-v3/include/bits/regex_nfa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h?ref=bf6319b96ade5c4e855b16250250ca0865856640", "patch": "@@ -55,7 +55,7 @@ namespace __regex\n #endif\n   };\n \n-  // Generic shred pointer to an automaton.  \n+  // Generic shared pointer to an automaton.  \n   typedef std::shared_ptr<_Automaton> _AutomatonPtr;\n \n   // Operation codes that define the type of transitions within the base NFA"}, {"sha": "70ae2fa2a23f3ef7bd870e5c14b0b3887ee1afb5", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/basic/string_range_01_02_03.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fbasic%2Fstring_range_01_02_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fbasic%2Fstring_range_01_02_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fbasic%2Fstring_range_01_02_03.cc?ref=bf6319b96ade5c4e855b16250250ca0865856640", "patch": "@@ -1,10 +1,9 @@\n-// { dg-options \"-std=c++0x\" }\n-// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=gnu++0x\" }\n \n //\n // 2010-06-16  Stephen M. Webb <stephen.webb@bregmasoft.ca>\n //\n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,7 +37,7 @@ test01()\n \t}\n \tcatch (std::regex_error& ex)\n \t{\n-\t\tVERIFY( ex.code() == std::regex_constants::error_badbrace );\n+\t\tVERIFY( ex.code() == std::regex_constants::error_brace );\n \t}\n }\n "}, {"sha": "a6dddbaa1c2decd344fc1435b513999cf0f0937b", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/extended/string_range_01_02_03.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fextended%2Fstring_range_01_02_03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6319b96ade5c4e855b16250250ca0865856640/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fextended%2Fstring_range_01_02_03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fextended%2Fstring_range_01_02_03.cc?ref=bf6319b96ade5c4e855b16250250ca0865856640", "patch": "@@ -1,10 +1,9 @@\n-// { dg-options \"-std=c++0x\" }\n-// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=gnu++0x\" }\n \n //\n // 2010-06-16  Stephen M. Webb <stephen.webb@bregmasoft.ca>\n //\n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,7 +37,7 @@ test01()\n \t}\n \tcatch (std::regex_error& ex)\n \t{\n-\t\tVERIFY( ex.code() == std::regex_constants::error_badbrace );\n+\t\tVERIFY( ex.code() == std::regex_constants::error_brace );\n \t}\n }\n "}]}