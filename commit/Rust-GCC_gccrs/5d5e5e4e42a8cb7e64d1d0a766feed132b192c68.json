{"sha": "5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1ZTVlNGU0MmE4Y2I3ZTY0ZDFkMGE3NjZmZWVkMTMyYjE5MmM2OA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-09-17T23:24:40Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-09-17T23:24:40Z"}, "message": "configopts.html: HTML to XHTML change.\n\n2001-09-17  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/html/configopts.html:  HTML to XHTML change.  Lowercase tags.\n\t* docs/html/documentation.html:  Likewise.\n\t* docs/html/explanations.html:  Likewise.\n\t* docs/html/install.html:  Likewise.\n\t* docs/html/17_intro/howto.html:  Likewise.\n\t* docs/html/18_support/howto.html:  Likewise.\n\t* docs/html/19_diagnostics/howto.html:  Likewise.\n\t* docs/html/20_util/howto.html:  Likewise.\n\t* docs/html/21_strings/howto.html:  Likewise.\n\t* docs/html/22_locale/codecvt.html:  Likewise.\n\t* docs/html/22_locale/ctype.html:  Likewise.\n\t* docs/html/22_locale/howto.html:  Likewise.\n\t* docs/html/22_locale/locale.html:  Likewise.\n\t* docs/html/22_locale/messages.html:  Likewise.\n\t* docs/html/23_containers/howto.html:  Likewise.\n\t* docs/html/24_iterators/howto.html:  Likewise.\n\t* docs/html/25_algorithms/howto.html:  Likewise.\n\t* docs/html/26_numerics/howto.html:  Likewise.\n\t* docs/html/27_io/howto.html:  Likewise.\n\t* docs/html/ext/howto.html:  Likewise.\n\t* docs/html/faq/index.html:  Likewise.\n\t* docs/html/faq/index.txt:  Regenerated.\n\nFrom-SVN: r45668", "tree": {"sha": "74ce2b24b23a1ae2d24a36c9cd0622a7a5845ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74ce2b24b23a1ae2d24a36c9cd0622a7a5845ca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/comments", "author": null, "committer": null, "parents": [{"sha": "5c701bb10c0655503db698572b537f3a3df8f9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c701bb10c0655503db698572b537f3a3df8f9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c701bb10c0655503db698572b537f3a3df8f9d1"}], "stats": {"total": 5323, "additions": 2674, "deletions": 2649}, "files": [{"sha": "7a45a8deb362d88cb92cc9191b9516b229f20514", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,3 +1,28 @@\n+2001-09-17  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/html/configopts.html:  HTML to XHTML change.  Lowercase tags.\n+\t* docs/html/documentation.html:  Likewise.\n+\t* docs/html/explanations.html:  Likewise.\n+\t* docs/html/install.html:  Likewise.\n+\t* docs/html/17_intro/howto.html:  Likewise.\n+\t* docs/html/18_support/howto.html:  Likewise.\n+\t* docs/html/19_diagnostics/howto.html:  Likewise.\n+\t* docs/html/20_util/howto.html:  Likewise.\n+\t* docs/html/21_strings/howto.html:  Likewise.\n+\t* docs/html/22_locale/codecvt.html:  Likewise.\n+\t* docs/html/22_locale/ctype.html:  Likewise.\n+\t* docs/html/22_locale/howto.html:  Likewise.\n+\t* docs/html/22_locale/locale.html:  Likewise.\n+\t* docs/html/22_locale/messages.html:  Likewise.\n+\t* docs/html/23_containers/howto.html:  Likewise.\n+\t* docs/html/24_iterators/howto.html:  Likewise.\n+\t* docs/html/25_algorithms/howto.html:  Likewise.\n+\t* docs/html/26_numerics/howto.html:  Likewise.\n+\t* docs/html/27_io/howto.html:  Likewise.\n+\t* docs/html/ext/howto.html:  Likewise.\n+\t* docs/html/faq/index.html:  Likewise.\n+\t* docs/html/faq/index.txt:  Regenerated.\n+\n 2001-09-14  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/html/17_intro/headers_cc.txt:  \"Sync\"/copy real file over."}, {"sha": "5d638a1c42f61075e9c1fc5eebee1427929386f0", "filename": "libstdc++-v3/docs/html/17_intro/howto.html", "status": "modified", "additions": 100, "deletions": 100, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,76 +1,76 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, gcc, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for libstdc++ chapter 17.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Chapter 17</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.6 2001/06/08 03:53:35 ljrittle Exp $ -->\n-</HEAD>\n-<BODY>\n-\n-<H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 17:  Library Introduction</A></H1>\n-\n-<P>Chapter 17 is actually a list of definitions and descriptions used\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, gcc, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for libstdc++ chapter 17.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Chapter 17</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.7 2001/09/15 00:41:10 pme Exp $ -->\n+</head>\n+<body>\n+\n+<h1 CLASS=\"centered\"><a name=\"top\">Chapter 17:  Library Introduction</a></h1>\n+\n+<p>Chapter 17 is actually a list of definitions and descriptions used\n    in the following chapters of the Standard when describing the actual\n    library.  Here, we use &quot;Introduction&quot; as an introduction\n-   to the <EM>GNU implementation of</EM> the ISO Standard C++ Library.\n-</P>\n+   to the <em>GNU implementation of</em> the ISO Standard C++ Library.\n+</p>\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#2\">The Standard C++ header files</A>\n-   <LI><A HREF=\"#3\">Thread-safety</A>\n-   <LI><A HREF=\"#4\"><TT>&lt;foo&gt;</TT> vs <TT>&lt;foo.h&gt;</TT></A>\n-   <LI><A HREF=\"porting-howto.html\">Porting-howto</A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#2\">The Standard C++ header files</a>\n+   <li><a href=\"#3\">Thread-safety</a>\n+   <li><a href=\"#4\"><code>&lt;foo&gt;</code> vs <code>&lt;foo.h&gt;</code></a>\n+   <li><a href=\"porting-howto.html\">Porting-howto</a>\n+</ul>\n \n-<HR>\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"2\">The Standard C++ header files</A></H2>\n-   <P>The Standard C++ Library specifies 50 header files that must be\n+<h2><a name=\"2\">The Standard C++ header files</a></h2>\n+   <p>The Standard C++ Library specifies 50 header files that must be\n       available to all hosted implementations.  Actually, the word\n       &quot;files&quot; is a misnomer, since the contents of the headers\n       don't necessarily have to be in any kind of external file.  The\n-      only rule is that when you <TT>#include</TT> a certain header, the\n+      only rule is that when you <code>#include</code> a certain header, the\n       contents of that header, as defined by the Standard, become\n       available to you, no matter how.\n-   </P>\n-   <P>The names of the headers can be easily seen in\n-      <A HREF=\"headers_cc.txt\"><TT>testsuite/17_intro/headers.cc</TT></A>,\n+   </p>\n+   <p>The names of the headers can be easily seen in\n+      <a href=\"headers_cc.txt\"><code>testsuite/17_intro/headers.cc</code></a>,\n       which is a small testbed we use to make certain that the headers\n       all compile and run.\n-   </P>\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"3\">Thread-safety</A></H2>\n-   <P>This is a thorny issue that gets brought up on the libstdc++-v3\n+<hr>\n+<h2><a name=\"3\">Thread-safety</a></h2>\n+   <p>This is a thorny issue that gets brought up on the libstdc++-v3\n       and gcc mailing lists on a regular basis (probably by a cron job).\n       This entry will mention a very little bit about the general MT\n       issues with libstdc++.  The latest status and quick notes will be\n       in FAQ 5.6.  Some discussion about thread-safe containers will be\n       in section 6.8 (the HOWTOs on containers).  This section only applies\n       when gcc and libstdc++-v3 were configured with --enable-threads.\n-   </P>\n-   <P>The libstdc++ code (all of it, not just the containers) has been\n+   </p>\n+   <p>The libstdc++ code (all of it, not just the containers) has been\n       designed so that thread-safety will be easily possible.  The first\n-      (!) problem is finding a <EM>fast</EM> method of implementation\n+      (!) problem is finding a <em>fast</em> method of implementation\n       portable to all platforms.  A minor problem that pops up every so\n       often is different interpretations of what &quot;thread-safe&quot;\n       means for a library (not a general program).  We currently use the\n-      <A HREF=\"http://www.sgi.com/tech/stl/thread_safety.html\">same\n-      definition that SGI</A> uses for their STL subset.\n-      <EM>Please see the many cautions given in HOWTOs on containers.</EM>\n-   </P>\n-   <P>Here is another attempt at explaining the dangers of using the\n+      <a href=\"http://www.sgi.com/tech/stl/thread_safety.html\">same\n+      definition that SGI</a> uses for their STL subset.\n+      <em>Please see the many cautions given in HOWTOs on containers.</em>\n+   </p>\n+   <p>Here is another attempt at explaining the dangers of using the\n       STL with threading support without understanding some important\n       details.  The STL implementation is currently configured to use\n       the high-speed caching memory allocator.  If you absolutely\n@@ -80,8 +80,8 @@ <H2><A NAME=\"3\">Thread-safety</A></H2>\n       fully aware that you may change the external or internal ABI of\n       libstdc++-v3 when you provide -D__USE_MALLOC on the command line\n       or make a change to that configuration file.\n-   </P>\n-   <P>If you don't like caches of objects being retained inside the STL, then\n+   </p>\n+   <p>If you don't like caches of objects being retained inside the STL, then\n       you might be tempted to define __USE_MALLOC either on the command\n       line or by rebuilding c++config.h.  Please note, once you define\n       __USE_MALLOC, only the malloc allocator is visible to application code\n@@ -96,96 +96,96 @@ <H2><A NAME=\"3\">Thread-safety</A></H2>\n       <PRE>\n       std::list &lt;void*, std::malloc_alloc&gt;  my_malloc_based_list;\n       </PRE>\n-   </P>\n-   <P>A recent journal article has described &quot;atomic integer\n+   </p>\n+   <p>A recent journal article has described &quot;atomic integer\n       operations,&quot; which would allow us to, well, perform updates\n       on integers atomically, and without requiring an explicit mutex\n       lock.  This appears promising, but the major difficulty is that\n       these operations &quot;may not be available on all systems, and\n       if they are, may have different interfaces.&quot; [quoting from\n       mailing list messages]\n-   </P>\n-   <P>Here is a small link farm to threads (no pun) in the mail archives\n+   </p>\n+   <p>Here is a small link farm to threads (no pun) in the mail archives\n       that discuss the threading problem.  Each link is to the first\n       relevent message in the thread; from there you can use\n       &quot;Thread Next&quot; to move down the thread.  This farm is in\n       latest-to-oldest order.\n-      <UL>\n-        <LI><A HREF=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00384.html\">\n+      <ul>\n+        <li><a href=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00384.html\">\n         inspired this most recent updating of issues with threading\n         and the SGI STL library.  It also contains some example\n-        POSIX-multithreaded STL code.</A>\n-        <LI> <A HREF=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00136.html\">\n+        POSIX-multithreaded STL code.</a>\n+        <li> <a href=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00136.html\">\n         an early analysis of why __USE_MALLOC should be disabled for\n-        the 3.0 release of libstdc++.</A>\n-      </UL>\n-      <BR>\n+        the 3.0 release of libstdc++.</a>\n+      </ul>\n+      <br>\n       Here are discussions that took place before the current snapshot;\n       they are still relevant and instructive.  (Some of them may not work;\n       as the drive containing some of the 1999 archives crashed, and nobody\n       has had time to recover the backups.)\n-      <BR>\n-      <UL>\n-        <LI>One way of preventing memory leaks by the old default memory\n+      <br>\n+      <ul>\n+        <li>One way of preventing memory leaks by the old default memory\n             allocator in multithreaded code is\n-            <A HREF=\"http://gcc.gnu.org/ml/gcc/1999-11n/msg00431.html\">discussed here</A>.\n-        <LI><A HREF=\"http://gcc.gnu.org/ml/libstdc++/1999-q3/msg00167.html\">This thread\n-            concerns strings</A>.\n-        <LI><A HREF=\"http://gcc.gnu.org/ml/libstdc++/1999-q2/msg00339.html\">So does this\n-            one</A>.  This initial message also refers to another\n+            <a href=\"http://gcc.gnu.org/ml/gcc/1999-11n/msg00431.html\">discussed here</a>.\n+        <li><a href=\"http://gcc.gnu.org/ml/libstdc++/1999-q3/msg00167.html\">This thread\n+            concerns strings</a>.\n+        <li><a href=\"http://gcc.gnu.org/ml/libstdc++/1999-q2/msg00339.html\">So does this\n+            one</a>.  This initial message also refers to another\n             thread in the GCC mailing list...\n-        <LI><A HREF=\"http://gcc.gnu.org/ml/gcc/1999-06n/msg00680.html\">which is here</A>,\n+        <li><a href=\"http://gcc.gnu.org/ml/gcc/1999-06n/msg00680.html\">which is here</a>,\n             and goes on for some time.  Ironically, the initial message\n             in this thread also mentions another threading thread...\n-        <LI><A HREF=\"http://gcc.gnu.org/ml/gcc-bugs/1999-04n/msg00777.html\">beginning here</A>,\n+        <li><a href=\"http://gcc.gnu.org/ml/gcc-bugs/1999-04n/msg00777.html\">beginning here</a>,\n             and talking about pthreads.  (Note that a much more recent\n             message from the first thread in this list notes that\n-            <A HREF=\"http://gcc.gnu.org/ml/libstdc++/1999-q3/msg00176.html\">pthreads\n-            should not be used as a starting point</A> for making\n+            <a href=\"http://gcc.gnu.org/ml/libstdc++/1999-q3/msg00176.html\">pthreads\n+            should not be used as a starting point</a> for making\n             libstdc++ threadsafe.)\n-        <LI><A HREF=\"http://gcc.gnu.org/ml/libstdc++/1999-q2/msg00168.html\">This\n-            message</A>,\n-            <A HREF=\"http://gcc.gnu.org/ml/libstdc++/1999-q2/msg00159.html\">this one</A>,\n-            and <A HREF=\"http://gcc.gnu.org/ml/libstdc++/1999-q2/msg00156.html\">this one</A>\n+        <li><a href=\"http://gcc.gnu.org/ml/libstdc++/1999-q2/msg00168.html\">This\n+            message</a>,\n+            <a href=\"http://gcc.gnu.org/ml/libstdc++/1999-q2/msg00159.html\">this one</a>,\n+            and <a href=\"http://gcc.gnu.org/ml/libstdc++/1999-q2/msg00156.html\">this one</a>\n             are the tops of related threads (all within the same time\n             period) discussing threading and the IO library.  Much of it\n             is dealing with the C library, but C++ is included as well.\n-      </UL>\n-   </P>\n-   <P>This section will be updated as new and interesting issues come\n+      </ul>\n+   </p>\n+   <p>This section will be updated as new and interesting issues come\n       to light.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"4\"><TT>&lt;foo&gt;</TT> vs <TT>&lt;foo.h&gt;</TT></A></H2>\n-   <P>The new-style headers are fully supported in libstdc++-v3.  The compiler\n-      itself fully supports namespaces, including <TT>std::</TT>.\n-   </P>\n-   <P>For those of you new to ISO C++98, no, that isn't a typo, the headers\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"4\"><code>&lt;foo&gt;</code> vs <code>&lt;foo.h&gt;</code></a></h2>\n+   <p>The new-style headers are fully supported in libstdc++-v3.  The compiler\n+      itself fully supports namespaces, including <code>std::</code>.\n+   </p>\n+   <p>For those of you new to ISO C++98, no, that isn't a typo, the headers\n       really have new names.  Marshall Cline's C++ FAQ Lite has a good\n       explanation in\n-<A HREF=\"http://www.cerfnet.com/~mpcline/On-Line-C++-FAQ/coding-standards.html#[25.4]\">item [25.4]</A>.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+<a href=\"http://www.cerfnet.com/~mpcline/On-Line-C++-FAQ/coding-standards.html#[25.4]\">item [25.4]</a>.\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.6 2001/06/08 03:53:35 ljrittle Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.7 2001/09/15 00:41:10 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>\n \n "}, {"sha": "fd9c08ad31d2f9d03381ed6785238b3633f80929", "filename": "libstdc++-v3/docs/html/18_support/howto.html", "status": "modified", "additions": 108, "deletions": 108, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,61 +1,61 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 18.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Chapter 18</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.3 2001/05/30 21:54:58 pme Exp $ -->\n-</HEAD>\n-<BODY>\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 18.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Chapter 18</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.4 2001/09/15 00:41:11 pme Exp $ -->\n+</head>\n+<body>\n \n-<H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 18:  Library Support</A></H1>\n+<h1 CLASS=\"centered\"><a name=\"top\">Chapter 18:  Library Support</a></h1>\n \n-<P>Chapter 18 deals with the functions called and objects created\n+<p>Chapter 18 deals with the functions called and objects created\n    automatically during the course of a program's existence.\n-</P>\n-<P>While we can't reproduce the contents of the Standard here (you need to\n+</p>\n+<p>While we can't reproduce the contents of the Standard here (you need to\n    get your own copy from your nation's member body; see our homepage for\n    help), we can mention a couple of changes in what kind of support a C++\n    program gets from the Standard Library.\n-</P>\n+</p>\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#1\">Types</A>\n-   <LI><A HREF=\"#2\">Implementation properties</A>\n-   <LI><A HREF=\"#3\">Start and Termination</A>\n-   <LI><A HREF=\"#4\">Dynamic memory management</A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#1\">Types</a>\n+   <li><a href=\"#2\">Implementation properties</a>\n+   <li><a href=\"#3\">Start and Termination</a>\n+   <li><a href=\"#4\">Dynamic memory management</a>\n+</ul>\n \n-<HR>\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"1\">Types</A></H2>\n-   <P>All the types that you're used to in C are here in one form or\n+<h2><a name=\"1\">Types</a></h2>\n+   <p>All the types that you're used to in C are here in one form or\n       another.  The only change that might affect people is the type of\n       NULL:  while it is required to be a macro, the definition of that\n-      macro is <EM>not</EM> allowed to be <TT>(void*)0</TT>, which is\n+      macro is <em>not</em> allowed to be <code>(void*)0</code>, which is\n       often used in C.\n-   </P>\n-   <P>In g++, NULL is #define'd to be <TT>__null</TT>, a magic keyword\n+   </p>\n+   <p>In g++, NULL is #define'd to be <code>__null</code>, a magic keyword\n       extension of g++.\n-   </P>\n-   <P>The biggest problem of #defining NULL to be something like\n+   </p>\n+   <p>The biggest problem of #defining NULL to be something like\n       &quot;0L&quot; is that the compiler will view that as a long integer\n       before it views it as a pointer, so overloading won't do what you\n       expect.  (This is why g++ has a magic extension, so that NULL is\n       always a pointer.)\n-   </P>\n-   <P>In his book\n-      <A HREF=\"http://cseng.aw.com/bookdetail.qry?ISBN=0-201-92488-9&ptype=0\"><EM>Effective C++</EM></A>,\n+   </p>\n+   <p>In his book\n+      <a href=\"http://cseng.aw.com/bookdetail.qry?ISBN=0-201-92488-9&ptype=0\"><em>Effective C++</em></a>,\n       Scott Meyers points out that the best way to solve this problem is to\n       not overload on pointer-vs-integer types to begin with.  He also\n       offers a way to make your own magic NULL that will match pointers\n@@ -78,36 +78,36 @@ <H2><A NAME=\"1\">Types</A></H2>\n \n    } NULL;                           // and whose name is NULL\n       </PRE>(Cribbed from the published version of\n-      <A HREF=\"http://www.awlonline.com/cseng/meyerscddemo/\">the\n-      Effective C++ CD</A>, reproduced here with permission.)\n-   </P>\n-   <P>If you aren't using g++ (why?), but you do have a compiler which\n+      <a href=\"http://www.awlonline.com/cseng/meyerscddemo/\">the\n+      Effective C++ CD</a>, reproduced here with permission.)\n+   </p>\n+   <p>If you aren't using g++ (why?), but you do have a compiler which\n       supports member function templates, then you can use this definition\n       of NULL (be sure to #undef any existing versions).  It only helps if\n       you actually use NULL in function calls, though; if you make a call of\n-      <TT>foo(0);</TT> instead of <TT>foo(NULL);</TT>, then you're back\n+      <code>foo(0);</code> instead of <code>foo(NULL);</code>, then you're back\n       where you started.\n-   </P>\n-   <P><B>Added Note:</B>  When we contacted Dr. Meyers to ask permission to\n+   </p>\n+   <p><B>Added Note:</B>  When we contacted Dr. Meyers to ask permission to\n       print this stuff, it prompted him to run this code through current\n       compilers to see what the state of the art is with respect to member\n       template functions.  He posted\n-      <A HREF=\"http://www.deja.com/threadmsg_md.xp?AN=644660779.1&CONTEXT=964036823.871301239\">an\n-      article to Usenet</A> after discovering that the code above is not\n+      <a href=\"http://www.deja.com/threadmsg_md.xp?AN=644660779.1&CONTEXT=964036823.871301239\">an\n+      article to Usenet</a> after discovering that the code above is not\n       valid!  Even though it has no data members, it still needs a\n       user-defined constructor (which means that the class needs a type name\n       after all).  The ctor can have an empty body; it just needs to be\n       there.  (Stupid requirement?  We think so too, and this will probably\n       be changed in the language itself.)\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"2\">Implementation properties</A></H2>\n-   <P>\n-   <H3><CODE>&lt;limits&gt;</CODE></H3>\n+<hr>\n+<h2><a name=\"2\">Implementation properties</a></h2>\n+   <p>\n+   <h3><CODE>&lt;limits&gt;</CODE></h3>\n    This header mainly defines traits classes to give access to various\n    implementation defined-aspects of the fundamental types.  The\n    traits classes -- fourteen in total -- are all specilizations of the \n@@ -149,28 +149,28 @@ <H3><CODE>&lt;limits&gt;</CODE></H3>\n       static const bool tinyness_before;\n       static const float_round_style round_style;\n    };</PRE>\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"3\">Start and Termination</A></H2>\n-   <P>Not many changes here to <TT>&lt;cstdlib&gt;</TT> (the old stdlib.h).\n-      You should note that the <TT>abort()</TT> function does not call\n+<hr>\n+<h2><a name=\"3\">Start and Termination</a></h2>\n+   <p>Not many changes here to <code>&lt;cstdlib&gt;</code> (the old stdlib.h).\n+      You should note that the <code>abort()</code> function does not call\n       the destructors of automatic nor static objects, so if you're depending\n       on those to do cleanup, it isn't going to happen.  (The functions\n-      registered with <TT>atexit()</TT> don't get called either, so you\n+      registered with <code>atexit()</code> don't get called either, so you\n       can forget about that possibility, too.)\n-   </P>\n-   <P>The good old <TT>exit()</TT> function can be a bit funky, too, until\n+   </p>\n+   <p>The good old <code>exit()</code> function can be a bit funky, too, until\n       you look closer.  Basically, three points to remember are:\n-      <OL>\n-        <LI>Static objects are destroyed in reverse order of their creation.\n-        <LI>Functions registered with <TT>atexit()</TT> are called in\n+      <ol>\n+        <li>Static objects are destroyed in reverse order of their creation.\n+        <li>Functions registered with <code>atexit()</code> are called in\n             reverse order of registration, once per registration call.\n             (This isn't actually new.)\n-        <LI>The previous two actions are &quot;interleaved,&quot; that is,\n+        <li>The previous two actions are &quot;interleaved,&quot; that is,\n             given this pseudocode:\n             <PRE>\n               extern \"C or C++\" void  f1 (void);\n@@ -180,50 +180,50 @@ <H2><A NAME=\"3\">Start and Termination</A></H2>\n               atexit(f1);\n               static Thing obj2;\n               atexit(f2);\n-            </PRE>then at a call of <TT>exit()</TT>, f2 will be called, then\n+            </PRE>then at a call of <code>exit()</code>, f2 will be called, then\n             obj2 will be destroyed, then f1 will be called, and finally obj1\n             will be destroyed.  If f1 or f2 allow an exception to propogate\n             out of them, Bad Things happen.\n-      </OL>\n-   </P>\n-   <P>Note also that <TT>atexit()</TT> is only required to store 32\n+      </ol>\n+   </p>\n+   <p>Note also that <code>atexit()</code> is only required to store 32\n       functions, and the compiler/library might already be using some of\n       those slots.  If you think you may run out, we recommend using\n       the xatexit/xexit combination from libiberty, which has no such limit.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"4\">Dynamic memory management</A></H2>\n-   <P>There are six flavors each of <TT>new</TT> and <TT>delete</TT>, so\n+<hr>\n+<h2><a name=\"4\">Dynamic memory management</a></h2>\n+   <p>There are six flavors each of <code>new</code> and <code>delete</code>, so\n       make certain that you're using the right ones!  Here are quickie\n-      descriptions of <TT>new</TT>:\n-      <UL>\n-        <LI>single object form, throwing a <TT>bad_alloc</TT> on errors;\n+      descriptions of <code>new</code>:\n+      <ul>\n+        <li>single object form, throwing a <code>bad_alloc</code> on errors;\n             this is what most people are used to using\n-        <LI>single object &quot;nothrow&quot; form, returning NULL on errors\n-        <LI>array new, throwing <TT>bad_alloc</TT> on errors\n-        <LI>array nothrow new, returning NULL on errors\n-        <LI>placement new, which does nothing (like it's supposed to)\n-        <LI>placement array new, which also does nothing\n-      </UL>\n+        <li>single object &quot;nothrow&quot; form, returning NULL on errors\n+        <li>array new, throwing <code>bad_alloc</code> on errors\n+        <li>array nothrow new, returning NULL on errors\n+        <li>placement new, which does nothing (like it's supposed to)\n+        <li>placement array new, which also does nothing\n+      </ul>\n       They are distinguished by the parameters that you pass to them, like\n-      any other overloaded function.  The six flavors of <TT>delete</TT>\n+      any other overloaded function.  The six flavors of <code>delete</code>\n       are distinguished the same way, but none of them are allowed to throw\n       an exception under any circumstances anyhow.  (They match up for\n       completeness' sake.)\n-   </P>\n-   <P>Remember that it is perfectly okay to call <TT>delete</TT> on a\n+   </p>\n+   <p>Remember that it is perfectly okay to call <code>delete</code> on a\n       NULL pointer!  Nothing happens, by definition.  That is not the\n       same thing as deleting a pointer twice.\n-   </P>\n-   <P>By default, if one of the &quot;throwing <TT>new</TT>s&quot; can't\n+   </p>\n+   <p>By default, if one of the &quot;throwing <code>new</code>s&quot; can't\n       allocate the memory requested, it tosses an instance of a\n-      <TT>bad_alloc</TT> exception (or, technically, some class derived\n+      <code>bad_alloc</code> exception (or, technically, some class derived\n       from it).  You can change this by writing your own function (called\n-      a new-handler) and then registering it with <TT>set_new_handler()</TT>:\n+      a new-handler) and then registering it with <code>set_new_handler()</code>:\n       <PRE>\n    typedef void (*PFV)(void);\n \n@@ -247,27 +247,27 @@ <H2><A NAME=\"4\">Dynamic memory management</A></H2>\n        ...\n    }\n       </PRE>\n-   </P>\n-   <P><TT>bad_alloc</TT> is derived from the base <TT>exception</TT>\n+   </p>\n+   <p><code>bad_alloc</code> is derived from the base <code>exception</code>\n       class defined in Chapter 19.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n \n \n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.3 2001/05/30 21:54:58 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.4 2001/09/15 00:41:11 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "0cd031a833145a03b5aeccc75d0dc0e1306b353f", "filename": "libstdc++-v3/docs/html/19_diagnostics/howto.html", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F19_diagnostics%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,44 +1,44 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 19.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Chapter 19</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.4 2001/05/30 21:54:59 pme Exp $ -->\n-</HEAD>\n-<BODY>\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 19.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Chapter 19</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.5 2001/09/15 00:41:11 pme Exp $ -->\n+</head>\n+<body>\n \n-<H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 19:  Diagnostics</A></H1>\n+<h1 CLASS=\"centered\"><a name=\"top\">Chapter 19:  Diagnostics</a></h1>\n \n-<P>Chapter 19 deals with program diagnostics, such as exceptions\n+<p>Chapter 19 deals with program diagnostics, such as exceptions\n    and assertions.  You know, all the things we wish weren't even\n    necessary at all.\n-</P>\n+</p>\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#1\">Adding data to exceptions</A>\n-   <LI><A HREF=\"#2\">Exception class hierarchy diagram</A>\n-   <LI><A HREF=\"#3\">Concept checkers -- <STRONG>new and improved!</STRONG></A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#1\">Adding data to exceptions</a>\n+   <li><a href=\"#2\">Exception class hierarchy diagram</a>\n+   <li><a href=\"#3\">Concept checkers -- <strong>new and improved!</strong></a>\n+</ul>\n \n-<HR>\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"1\">Adding data to exceptions</A></H2>\n-   <P>The standard exception classes carry with them a single string as\n+<h2><a name=\"1\">Adding data to exceptions</a></h2>\n+   <p>The standard exception classes carry with them a single string as\n       data (usually describing what went wrong or where the 'throw' took\n       place).  It's good to remember that you can add your own data to\n       these exceptions when extending the heirarchy:\n-   </P>\n+   </p>\n    <PRE>\n    using std::runtime_error;\n    struct My_Exception : public runtime_error\n@@ -53,71 +53,71 @@ <H2><A NAME=\"1\">Adding data to exceptions</A></H2>\n        DBID   id;     // some user-defined type\n    };\n    </PRE>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"2\">Exception class hierarchy diagram</A></H2>\n-   <P>At one point we were going to make up a PDF of the exceptions\n+<hr>\n+<h2><a name=\"2\">Exception class hierarchy diagram</a></h2>\n+   <p>At one point we were going to make up a PDF of the exceptions\n       hierarchy, akin to the one done for the I/O class hierarchy.\n       Time was our enemy.  Since then we've moved to Doxygen, which has\n       the useful property of not sucking.  Specifically, when the source\n       code is changed, the diagrams are automatically brought up to date.\n       For the old way, we had to update the diagrams separately.\n-   </P>\n-   <P>There are several links to the Doxygen-generated pages from\n-      <A HREF=\"../documentation.html\">here</A>.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>There are several links to the Doxygen-generated pages from\n+      <a href=\"../documentation.html\">here</a>.\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"3\">Concept checkers -- <STRONG>new and improved!</STRONG></A></H2>\n-   <P>Better taste!  Less fat!  Literally!</P>\n-   <P>In 1999, SGI added <EM>concept checkers</EM> to their implementation\n+<hr>\n+<h2><a name=\"3\">Concept checkers -- <strong>new and improved!</strong></a></h2>\n+   <p>Better taste!  Less fat!  Literally!</p>\n+   <p>In 1999, SGI added <em>concept checkers</em> to their implementation\n       of the STL:  code which checked the template parameters of\n       instantiated pieces of the STL, in order to insure that the parameters\n       being used met the requirements of the standard.  For example,\n       the Standard requires that types passed as template parameters to\n-      <TT>vector</TT> be &quot;Assignable&quot; (which means what you think\n+      <code>vector</code> be &quot;Assignable&quot; (which means what you think\n       it means).  The checking was done during compilation, and none of\n       the code was executed at runtime.\n-   </P>\n-   <P>Unfortunately, the size of the compiler files grew significantly\n+   </p>\n+   <p>Unfortunately, the size of the compiler files grew significantly\n       as a result.  The checking code itself was cumbersome.  And bugs\n       were found in it on more than one occasion.\n-   </P>\n-   <P>The primary author of the checking code, Jeremy Siek, had already\n+   </p>\n+   <p>The primary author of the checking code, Jeremy Siek, had already\n       started work on a replcement implementation.  The new code has been\n       formally reviewed and accepted into\n-      <A HREF=\"http://www.boost.org/libs/concept_check/concept_check.htm\">the\n-      Boost libraries</A>, and we are pleased to incorporate it into the\n+      <a href=\"http://www.boost.org/libs/concept_check/concept_check.htm\">the\n+      Boost libraries</a>, and we are pleased to incorporate it into the\n       GNU C++ library.\n-   </P>\n-   <P>The new version imposes a much smaller space overhead on the generated\n+   </p>\n+   <p>The new version imposes a much smaller space overhead on the generated\n       object file.  The checks are also cleaner and easier to read and\n       understand.\n-   </P>\n-   <P>Right now they are off by default.  More will be added once\n+   </p>\n+   <p>Right now they are off by default.  More will be added once\n       GCC 3.0 is released and we have time to revisit this topic.\n-   </P>\n+   </p>\n \n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.4 2001/05/30 21:54:59 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.5 2001/09/15 00:41:11 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "ab73cdb776a8d2d7a60ba5438394308a1e792d8e", "filename": "libstdc++-v3/docs/html/20_util/howto.html", "status": "modified", "additions": 103, "deletions": 103, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,53 +1,53 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 20.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Chapter 20</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.3 2001/04/03 00:26:55 pme Exp $ -->\n-</HEAD>\n-<BODY>\n-\n-<H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 20:  General Utilities</A></H1>\n-\n-<P>Chapter 20 deals with utility classes and functions, such as\n-   the oft-debated <TT>auto_ptr&lt;&gt;</TT>.\n-</P>\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 20.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Chapter 20</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.4 2001/05/30 21:55:00 pme Exp $ -->\n+</head>\n+<body>\n+\n+<h1 CLASS=\"centered\"><a name=\"top\">Chapter 20:  General Utilities</a></h1>\n+\n+<p>Chapter 20 deals with utility classes and functions, such as\n+   the oft-debated <code>auto_ptr&lt;&gt;</code>.\n+</p>\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#1\"><TT>auto_ptr</TT> is not omnipotent</A>\n-   <LI><A HREF=\"#2\"><TT>auto_ptr</TT> inside container classes</A>\n-   <LI><A HREF=\"#3\">Functors</A>\n-   <LI><A HREF=\"#4\">Pairs</A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#1\"><code>auto_ptr</code> is not omnipotent</a>\n+   <li><a href=\"#2\"><code>auto_ptr</code> inside container classes</a>\n+   <li><a href=\"#3\">Functors</a>\n+   <li><a href=\"#4\">Pairs</a>\n+</ul>\n \n-<HR>\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"1\"><TT>auto_ptr</TT> is not omnipotent</A></H2>\n-   <P>I'm not going to try and explain all of the fun and delicious\n+<h2><a name=\"1\"><code>auto_ptr</code> is not omnipotent</a></h2>\n+   <p>I'm not going to try and explain all of the fun and delicious\n       things that can happen with misuse of the auto_ptr class template\n       (called AP here), nor am I going to try and teach you how to use\n       AP safely in the presence of copying.  The AP class is a really\n       nifty idea for a smart pointer, but it is one of the dumbest of\n       all the smart pointers -- and that's fine.\n-   </P>\n-   <P>AP is not meant to be a supersmart solution to all resource\n+   </p>\n+   <p>AP is not meant to be a supersmart solution to all resource\n       leaks everywhere.  Neither is it meant to be an effective form\n       of garbage collection (although it can help, a little bit).\n-      And it can <EM>not</EM> be used for arrays!\n-   </P>\n-   <P>AP <EM>is</EM> meant to prevent nasty leaks in the presence of\n-      exceptions.  That's <EM>all</EM>.  This code is AP-friendly:\n+      And it can <em>not</em> be used for arrays!\n+   </p>\n+   <p>AP <em>is</em> meant to prevent nasty leaks in the presence of\n+      exceptions.  That's <em>all</em>.  This code is AP-friendly:\n       <PRE>\n     // not a recommend naming scheme, but good for web-based FAQs\n     typedef std::auto_ptr&lt;MyClass&gt;  APMC;\n@@ -64,10 +64,10 @@ <H2><A NAME=\"1\"><TT>auto_ptr</TT> is not omnipotent</A></H2>\n         function_taking_MyClass_pointer (ap.get());\n     }\n       </PRE>When an exception gets thrown, the instance of MyClass that's\n-      been created on the heap will be <TT>delete</TT>'d as the stack is\n-      unwound past <TT>func()</TT>.\n-   </P>\n-   <P>Changing that code as follows is <EM>not</EM> AP-friendly:\n+      been created on the heap will be <code>delete</code>'d as the stack is\n+      unwound past <code>func()</code>.\n+   </p>\n+   <p>Changing that code as follows is <em>not</em> AP-friendly:\n       <PRE>\n         APMC  ap (new MyClass[22]);\n       </PRE>You will get the same problems as you would without the use\n@@ -77,20 +77,20 @@ <H2><A NAME=\"1\"><TT>auto_ptr</TT> is not omnipotent</A></H2>\n         ...\n         delete array;                      // ...but single-object delete\n       </PRE>\n-   </P>\n-   <P>AP cannot tell whether the pointer you've passed at creation points\n+   </p>\n+   <p>AP cannot tell whether the pointer you've passed at creation points\n       to one or many things.  If it points to many things, you are about\n       to die.  AP is trivial to write, however, so you could write your\n-      own <TT>auto_array_ptr</TT> for that situation (in fact, this has\n+      own <code>auto_array_ptr</code> for that situation (in fact, this has\n       been done many times; check the mailing lists, Usenet, Boost, etc).\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"2\"><TT>auto_ptr</TT> inside container classes</A></H2>\n-   <P>All of the <A HREF=\"../23_containers/howto.html\">containers</A>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"2\"><code>auto_ptr</code> inside container classes</a></h2>\n+   <p>All of the <a href=\"../23_containers/howto.html\">containers</a>\n       described in the standard library require their contained types\n       to have, among other things, a copy contructor like this:\n       <PRE>\n@@ -100,18 +100,18 @@ <H2><A NAME=\"2\"><TT>auto_ptr</TT> inside container classes</A></H2>\n     };\n       </PRE>\n       Note the const keyword; the object being copied shouldn't change.\n-      The template class <TT>auto_ptr</TT> (called AP here) does not\n+      The template class <code>auto_ptr</code> (called AP here) does not\n       meet this requirement.  Creating a new AP by copying an existing\n       one transfers ownership of the pointed-to object, which means that\n       the AP being copied must change, which in turn means that the\n       copy ctors of AP do not take const objects.\n-   </P>\n-   <P>The resulting rule is simple:  <EM>Never ever use a container of\n-      auto_ptr objects.</EM>  The standard says that undefined behavior\n+   </p>\n+   <p>The resulting rule is simple:  <em>Never ever use a container of\n+      auto_ptr objects.</em>  The standard says that undefined behavior\n       is the result, but it is guaranteed to be messy.\n-   </P>\n-   <P>To prevent you from doing this to yourself, the\n-      <A HREF=\"../19_diagnostics/howto.html#3\">concept checks</A> built\n+   </p>\n+   <p>To prevent you from doing this to yourself, the\n+      <a href=\"../19_diagnostics/howto.html#3\">concept checks</a> built\n       in to this implementation will issue an error if you try to\n       compile code like this:\n       <PRE>\n@@ -124,85 +124,85 @@ <H2><A NAME=\"2\"><TT>auto_ptr</TT> inside container classes</A></H2>\n     }\n       </PRE>\n       Should you try this with the checks enabled, you will see an error.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"3\">Functors</A></H2>\n-   <P>If you don't know what functors are, you're not alone.  Many people\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"3\">Functors</a></h2>\n+   <p>If you don't know what functors are, you're not alone.  Many people\n       get slightly the wrong idea.  In the interest of not reinventing\n       the wheel, we will refer you to the introduction to the functor\n       concept written by SGI as part of their STL, in\n-      <A HREF=\"http://www.sgi.com/Technology/STL/functors.html\">their\n-      http://www.sgi.com/Technology/STL/functors.html</A>.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"4\">Pairs</A></H2>\n-   <P>The <TT>pair&lt;T1,T2&gt;</TT> is a simple and handy way to\n+      <a href=\"http://www.sgi.com/Technology/STL/functors.html\">their\n+      http://www.sgi.com/Technology/STL/functors.html</a>.\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"4\">Pairs</a></h2>\n+   <p>The <code>pair&lt;T1,T2&gt;</code> is a simple and handy way to\n       carry around a pair of objects.  One is of type T1, and another of\n       type T2; they may be the same type, but you don't get anything\n       extra if they are.  The two members can be accessed directly, as\n-      <TT>.first</TT> and <TT>.second</TT>.\n-   </P>\n-   <P>Construction is simple.  The default ctor initializes each member\n+      <code>.first</code> and <code>.second</code>.\n+   </p>\n+   <p>Construction is simple.  The default ctor initializes each member\n       with its respective default ctor.  The other simple ctor,\n       <PRE>\n     pair (const T1&amp; x, const T2&amp; y);\n-      </PRE>does what you think it does, <TT>first</TT> getting <TT>x</TT>\n-      and <TT>second</TT> getting <TT>y</TT>.\n-   </P>\n-   <P>There is a copy constructor, but it requires that your compiler\n+      </PRE>does what you think it does, <code>first</code> getting <code>x</code>\n+      and <code>second</code> getting <code>y</code>.\n+   </p>\n+   <p>There is a copy constructor, but it requires that your compiler\n       handle member function templates:\n       <PRE>\n     template &lt;class U, class V&gt; pain (const pair&lt;U,V&gt;&amp; p);\n       </PRE>The compiler will convert as necessary from U to T1 and from\n       V to T2 in order to perform the respective initializations.\n-   </P>\n-   <P>The comparison operators are done for you.  Equality\n-      of two <TT>pair&lt;T1,T2&gt;</TT>s is defined as both <TT>first</TT>\n-      members comparing equal and both <TT>second</TT> members comparing\n+   </p>\n+   <p>The comparison operators are done for you.  Equality\n+      of two <code>pair&lt;T1,T2&gt;</code>s is defined as both <code>first</code>\n+      members comparing equal and both <code>second</code> members comparing\n       equal; this simply delegates responsibility to the respective\n-      <TT>operator==</TT> functions (for types like MyClass) or builtin\n+      <code>operator==</code> functions (for types like MyClass) or builtin\n       comparisons (for types like int, char, etc).\n-   </P>\n-   <P>The less-than operator is a bit odd the first time you see it.  It\n+   </p>\n+   <p>The less-than operator is a bit odd the first time you see it.  It\n       is defined as evaluating to:\n       <PRE>\n     x.first  &lt;  y.first  ||\n         ( !(y.first  &lt;  x.first)  &amp;&amp;  x.second  &lt;  y.second )\n       </PRE>\n-      The other operators are not defined using the <TT>rel_ops</TT>\n+      The other operators are not defined using the <code>rel_ops</code>\n       functions above, but their semantics are the same.\n-   </P>\n-   <P>Finally, there is a template function called <TT>make_pair</TT>\n+   </p>\n+   <p>Finally, there is a template function called <code>make_pair</code>\n       that takes two references-to-const objects and returns an\n       instance of a pair instantiated on their respective types:\n       <PRE>\n     pair&lt;int,MyClass&gt; p = make_pair(4,myobject);\n       </PRE>\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n \n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.3 2001/04/03 00:26:55 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.4 2001/05/30 21:55:00 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "bf47e406c413ae8fec705fd2f5160e9664190caf", "filename": "libstdc++-v3/docs/html/21_strings/howto.html", "status": "modified", "additions": 138, "deletions": 138, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,60 +1,60 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 21.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Chapter 21</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.2 2001/02/07 00:03:20 pme Exp $ -->\n-</HEAD>\n-<BODY>\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 21.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Chapter 21</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.3 2001/04/03 00:26:55 pme Exp $ -->\n+</head>\n+<body>\n \n-<H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 21:  Strings</A></H1>\n+<h1 CLASS=\"centered\"><a name=\"top\">Chapter 21:  Strings</a></h1>\n \n-<P>Chapter 21 deals with the C++ strings library (a welcome relief).\n-</P>\n+<p>Chapter 21 deals with the C++ strings library (a welcome relief).\n+</p>\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#1\">MFC's CString</A>\n-   <LI><A HREF=\"#2\">A case-insensitive string class</A>\n-   <LI><A HREF=\"#3\">Breaking a C++ string into tokens</A>\n-   <LI><A HREF=\"#4\">Simple transformations</A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#1\">MFC's CString</a>\n+   <li><a href=\"#2\">A case-insensitive string class</a>\n+   <li><a href=\"#3\">Breaking a C++ string into tokens</a>\n+   <li><a href=\"#4\">Simple transformations</a>\n+</ul>\n \n-<HR>\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"1\">MFC's CString</A></H2>\n-   <P>A common lament seen in various newsgroups deals with the Standard\n+<h2><a name=\"1\">MFC's CString</a></h2>\n+   <p>A common lament seen in various newsgroups deals with the Standard\n       string class as opposed to the Microsoft Foundation Class called\n       CString.  Often programmers realize that a standard portable\n       answer is better than a proprietary nonportable one, but in porting\n       their application from a Win32 platform, they discover that they\n       are relying on special functons offered by the CString class.\n-   </P>\n-   <P>Things are not as bad as they seem.  In\n-      <A HREF=\"http://gcc.gnu.org/ml/gcc/1999-04n/msg00236.html\">this\n-      message</A>, Joe Buck points out a few very important things:\n-      <UL>\n-         <LI>The Standard <TT>string</TT> supports all the operations\n+   </p>\n+   <p>Things are not as bad as they seem.  In\n+      <a href=\"http://gcc.gnu.org/ml/gcc/1999-04n/msg00236.html\">this\n+      message</a>, Joe Buck points out a few very important things:\n+      <ul>\n+         <li>The Standard <code>string</code> supports all the operations\n              that CString does, with three exceptions.\n-         <LI>Two of those exceptions (whitespace trimming and case \n+         <li>Two of those exceptions (whitespace trimming and case \n              conversion) are trivial to implement.  In fact, we do so\n              on this page.\n-         <LI>The third is <TT>CString::Format</TT>, which allows formatting\n-             in the style of <TT>sprintf</TT>.  This deserves some mention:\n-      </UL>\n-   </P>\n-   <A NAME=\"1.1internal\"> <!-- Coming from Chapter 27 -->\n-   <P>The old libg++ library had a function called form(), which did much\n+         <li>The third is <code>CString::Format</code>, which allows formatting\n+             in the style of <code>sprintf</code>.  This deserves some mention:\n+      </ul>\n+   </p>\n+   <a name=\"1.1internal\"> <!-- Coming from Chapter 27 -->\n+   <p>The old libg++ library had a function called form(), which did much\n       the same thing.  But for a Standard solution, you should use the\n       stringstream classes.  These are the bridge between the iostream\n       hierarchy and the string class, and they operate with regular\n@@ -80,8 +80,8 @@ <H2><A NAME=\"1\">MFC's CString</A></H2>\n \n        return output_stream.str();\n    } </PRE>\n-   </P></A>\n-   <P>A serious problem with CString is a design bug in its memory\n+   </p></a>\n+   <p>A serious problem with CString is a design bug in its memory\n       allocation.  Specifically, quoting from that same message:\n       <PRE>\n    CString suffers from a common programming error that results in\n@@ -105,40 +105,40 @@ <H2><A NAME=\"1\">MFC's CString</A></H2>\n    If you replace CString with string in the above function, the\n    performance is O(n).\n       </PRE>\n-   </P>\n-   <P>Joe Buck also pointed out some other things to keep in mind when\n+   </p>\n+   <p>Joe Buck also pointed out some other things to keep in mind when\n       comparing CString and the Standard string class:\n-      <UL>\n-         <LI>CString permits access to its internal representation; coders\n-             who exploited that may have problems moving to <TT>string</TT>.\n-         <LI>Microsoft ships the source to CString (in the files\n+      <ul>\n+         <li>CString permits access to its internal representation; coders\n+             who exploited that may have problems moving to <code>string</code>.\n+         <li>Microsoft ships the source to CString (in the files\n              MFC\\SRC\\Str{core,ex}.cpp), so you could fix the allocation\n              bug and rebuild your MFC libraries.\n-             <EM><B>Note:</B>  It looks like the the CString shipped with\n+             <em><B>Note:</B>  It looks like the the CString shipped with\n              VC++6.0 has fixed this, although it may in fact have been one\n-             of the VC++ SPs that did it.</EM>\n-         <LI><TT>string</TT> operations like this have O(n) complexity\n-             <EM>if the implementors do it correctly</EM>.  The libstdc++\n+             of the VC++ SPs that did it.</em>\n+         <li><code>string</code> operations like this have O(n) complexity\n+             <em>if the implementors do it correctly</em>.  The libstdc++\n              implementors did it correctly.  Other vendors might not.\n-         <LI>While parts of the SGI STL are used in libstdc++-v3, their\n-             string class is not.  The SGI <TT>string</TT> is essentially\n-             <TT>vector&lt;char&gt;</TT> and does not do any reference\n+         <li>While parts of the SGI STL are used in libstdc++-v3, their\n+             string class is not.  The SGI <code>string</code> is essentially\n+             <code>vector&lt;char&gt;</code> and does not do any reference\n              counting like libstdc++-v3's does.  (It is O(n), though.)\n              So if you're thinking about SGI's string or rope classes,\n              you're now looking at four possibilities:  CString, the\n              libstdc++ string, the SGI string, and the SGI rope, and this\n              is all before any allocator or traits customizations!  (More\n              choices than you can shake a stick at -- want fries with that?)\n-      </UL>\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+      </ul>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"2\">A case-insensitive string class</A></H2>\n-   <P>The well-known-and-if-it-isn't-well-known-it-ought-to-be\n-      <A HREF=\"http://www.peerdirect.com/resources/\">Guru of the Week</A>\n+<hr>\n+<h2><a name=\"2\">A case-insensitive string class</a></h2>\n+   <p>The well-known-and-if-it-isn't-well-known-it-ought-to-be\n+      <a href=\"http://www.peerdirect.com/resources/\">Guru of the Week</a>\n       discussions held on Usenet covered this topic in January of 1998.\n       Briefly, the challenge was, &quot;write a 'ci_string' class which\n       is identical to the standard 'string' class, but is\n@@ -154,57 +154,57 @@ <H2><A NAME=\"2\">A case-insensitive string class</A></H2>\n    // still case-preserving, of course\n    assert( strcmp( s.c_str(), \"AbCdE\" ) == 0 );\n    assert( strcmp( s.c_str(), \"abcde\" ) != 0 ); </PRE>\n-   </P>\n+   </p>\n \n-   <P>The solution is surprisingly easy.  The original answer pages\n+   <p>The solution is surprisingly easy.  The original answer pages\n       on the GotW website were removed into cold storage, in\n       preparation for\n-      <A HREF=\"http://cseng.aw.com/bookpage.taf?ISBN=0-201-61562-2\">a\n-      published book of GotW notes</A>.  Before being\n+      <a href=\"http://cseng.aw.com/bookpage.taf?ISBN=0-201-61562-2\">a\n+      published book of GotW notes</a>.  Before being\n       put on the web, of course, it was posted on Usenet, and that\n-      posting containing the answer is <A HREF=\"gotw29a.txt\">available\n-      here</A>.\n-   </P>\n-   <P>See?  Told you it was easy!</P>\n-   <P><B>Added June 2000:</B>  The May issue of <U>C++ Report</U> contains\n-      a fascinating article by Matt Austern (yes, <EM>the</EM> Matt Austern)\n+      posting containing the answer is <a href=\"gotw29a.txt\">available\n+      here</a>.\n+   </p>\n+   <p>See?  Told you it was easy!</p>\n+   <p><B>Added June 2000:</B>  The May issue of <U>C++ Report</U> contains\n+      a fascinating article by Matt Austern (yes, <em>the</em> Matt Austern)\n       on why case-insensitive comparisons are not as easy as they seem,\n-      and why creating a class is the <EM>wrong</EM> way to go about it in\n+      and why creating a class is the <em>wrong</em> way to go about it in\n       production code.  (The GotW answer mentions one of the principle\n       difficulties; his article mentions more.)\n-   </P>\n-   <P>Basically, this is &quot;easy&quot; only if you ignore some things,\n+   </p>\n+   <p>Basically, this is &quot;easy&quot; only if you ignore some things,\n       things which may be too important to your program to ignore.  (I chose\n       to ignore them when originally writing this entry, and am surprised\n       that nobody ever called me on it...)  The GotW question and answer\n       remain useful instructional tools, however.\n-   </P>\n-   <P><B>Added September 2000:</B>  James Kanze provided a link to a\n-      <A HREF=\"http://www.unicode.org/unicode/reports/tr21/\">Unicode\n-      Technical Report discussing case handling</A>, which provides some\n+   </p>\n+   <p><B>Added September 2000:</B>  James Kanze provided a link to a\n+      <a href=\"http://www.unicode.org/unicode/reports/tr21/\">Unicode\n+      Technical Report discussing case handling</a>, which provides some\n       very good information.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"3\">Breaking a C++ string into tokens</A></H2>\n-   <P>The Standard C (and C++) function <TT>strtok()</TT> leaves a lot to\n+<hr>\n+<h2><a name=\"3\">Breaking a C++ string into tokens</a></h2>\n+   <p>The Standard C (and C++) function <code>strtok()</code> leaves a lot to\n       be desired in terms of user-friendliness.  It's unintuitive, it\n       destroys the character string on which it operates, and it requires\n       you to handle all the memory problems.  But it does let the client\n       code decide what to use to break the string into pieces; it allows\n       you to choose the &quot;whitespace,&quot; so to speak.\n-   </P>\n-   <P>A C++ implementation lets us keep the good things and fix those\n+   </p>\n+   <p>A C++ implementation lets us keep the good things and fix those\n       annoyances.  The implementation here is more intuitive (you only\n       call it once, not in a loop with varying argument), it does not\n       affect the original string at all, and all the memory allocation\n       is handled for you.\n-   </P>\n-   <P>It's called stringtok, and it's a template function.  It's given\n-      <A HREF=\"stringtok_h.txt\">in this file</A> in a less-portable form than\n+   </p>\n+   <p>It's called stringtok, and it's a template function.  It's given\n+      <a href=\"stringtok_h.txt\">in this file</a> in a less-portable form than\n       it could be, to keep this example simple (for example, see the\n       comments on what kind of string it will accept).  The author uses\n       a more general (but less readable) form of it for parsing command\n@@ -223,39 +223,39 @@ <H2><A NAME=\"3\">Breaking a C++ string into tokens</A></H2>\n    :is:\n    :a:\n    :test:</PRE>\n-      with all the whitespace removed.  The original <TT>s</TT> is still\n-      available for use, <TT>ls</TT> will clean up after itself, and\n-      <TT>ls.size()</TT> will return how many tokens there were.\n-   </P>\n-   <P>As always, there is a price paid here, in that stringtok is not\n+      with all the whitespace removed.  The original <code>s</code> is still\n+      available for use, <code>ls</code> will clean up after itself, and\n+      <code>ls.size()</code> will return how many tokens there were.\n+   </p>\n+   <p>As always, there is a price paid here, in that stringtok is not\n       as fast as strtok.  The other benefits usually outweight that, however.\n-      <A HREF=\"stringtok_std_h.txt\">Another version of stringtok is given\n-      here</A>, suggested by Chris King and tweaked by Petr Prikryl,\n+      <a href=\"stringtok_std_h.txt\">Another version of stringtok is given\n+      here</a>, suggested by Chris King and tweaked by Petr Prikryl,\n       and this one uses the\n       transformation functions mentioned below.  If you are comfortable\n       with reading the new function names, this version is recommended\n       as an example.\n-   </P>\n-   <P><B>Added February 2001:</B>  Mark Wilden pointed out that the\n-      standard <TT>std::getline()</TT> function can be used with standard\n-      <A HREF=\"../27_io/howto.html\">istringstreams</A> to perform\n+   </p>\n+   <p><B>Added February 2001:</B>  Mark Wilden pointed out that the\n+      standard <code>std::getline()</code> function can be used with standard\n+      <a href=\"../27_io/howto.html\">istringstreams</a> to perform\n       tokenizing as well.  Build an istringstream from the input text,\n       and then use std::getline with varying delimiters (the three-argument\n       signature) to extract tokens into a string.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"4\">Simple transformations</A></H2>\n-   <P>Here are Standard, simple, and portable ways to perform common\n-      transformations on a <TT>string</TT> instance, such as &quot;convert\n+<hr>\n+<h2><a name=\"4\">Simple transformations</a></h2>\n+   <p>Here are Standard, simple, and portable ways to perform common\n+      transformations on a <code>string</code> instance, such as &quot;convert\n       to all upper case.&quot;  The word transformations is especially\n       apt, because the standard template function\n-      <TT>transform&lt;&gt;</TT> is used.\n-   </P>\n-   <P>This code will go through some iterations (no pun).  Here's the\n+      <code>transform&lt;&gt;</code> is used.\n+   </p>\n+   <p>This code will go through some iterations (no pun).  Here's the\n       simplistic version usually seen on Usenet:\n       <PRE>\n    #include &lt;string&gt;\n@@ -277,31 +277,31 @@ <H2><A NAME=\"4\">Simple transformations</A></H2>\n    std::transform (s.begin(), s.end(), capital_s.begin(), tolower); </PRE>\n       <SPAN CLASS=\"larger\"><B>Note</B></SPAN> that these calls all involve\n       the global C locale through the use of the C functions\n-      <TT>toupper/tolower</TT>.  This is absolutely guaranteed to work --\n-      but <EM>only</EM> if the string contains <EM>only</EM> characters\n-      from the basic source character set, and there are <EM>only</EM>\n+      <code>toupper/tolower</code>.  This is absolutely guaranteed to work --\n+      but <em>only</em> if the string contains <em>only</em> characters\n+      from the basic source character set, and there are <em>only</em>\n       96 of those.  Which means that not even all English text can be\n       represented (certain British spellings, proper names, and so forth).\n       So, if all your input forevermore consists of only those 96\n       characters (hahahahahaha), then you're done.\n-   </P>\n-   <P>At minimum, you can write short wrappers like\n+   </p>\n+   <p>At minimum, you can write short wrappers like\n       <PRE>\n    char toLower (char c)\n    {\n       return tolower(static_cast&lt;unsigned char&gt;(c));\n    }</PRE>\n-   </P>\n-   <P>The correct method is to use a facet for a particular locale\n+   </p>\n+   <p>The correct method is to use a facet for a particular locale\n       and call its conversion functions.  These are discussed more in\n       Chapter 22; the specific part is\n-      <A HREF=\"../22_locale/howto.html#5\">here</A>, which shows the\n+      <a href=\"../22_locale/howto.html#5\">here</a>, which shows the\n       final version of this code.  (Thanks to James Kanze for assistance\n       and suggestions on all of this.)\n-   </P>\n-   <P>Another common operation is trimming off excess whitespace.  Much\n+   </p>\n+   <p>Another common operation is trimming off excess whitespace.  Much\n       like transformations, this task is trivial with the use of string's\n-      <TT>find</TT> family.  These examples are broken into multiple\n+      <code>find</code> family.  These examples are broken into multiple\n       statements for readability:\n       <PRE>\n    std::string  str (\" \\t blah blah blah    \\n \");\n@@ -313,26 +313,26 @@ <H2><A NAME=\"4\">Simple transformations</A></H2>\n    // trim trailing whitespace\n    notwhite = str.find_last_not_of(\" \\t\\n\"); \n    str.erase(notwhite+1); </PRE>\n-      Obviously, the calls to <TT>find</TT> could be inserted directly\n-      into the calls to <TT>erase</TT>, in case your compiler does not\n+      Obviously, the calls to <code>find</code> could be inserted directly\n+      into the calls to <code>erase</code>, in case your compiler does not\n       optimize named temporaries out of existance.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n \n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.2 2001/02/07 00:03:20 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.3 2001/04/03 00:26:55 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "46147d9055621a684692d38c9cd969ec9483f034", "filename": "libstdc++-v3/docs/html/22_locale/codecvt.html", "status": "modified", "additions": 142, "deletions": 142, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,18 +1,18 @@\n-<HTML>\n-<HEAD>\n-  <H1>\n+<html>\n+<head>\n+  <h1>\n   Notes on the codecvt implementation.\n-  </H1>\n-</HEAD>\n+  </h1>\n+</head>\n <I>\n prepared by Benjamin Kosnik (bkoz@redhat.com) on August 28, 2000\n </I>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 1. Abstract\n-</H2>\n-<P>\n+</h2>\n+<p>\n The standard class codecvt attempts to address conversions between\n different character encoding schemes. In particular, the standard\n attempts to detail conversions between the implementation-defined wide\n@@ -26,12 +26,12 @@ <H2>\n examples of correct usage for both the required specializations for\n wide and narrow characters and the implementation-provided extended\n functionality are given.\n-</P>\n+</p>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 2. What the standard says\n-</H2>\n+</h2>\n Around page 425 of the C++ Standard, this charming heading comes into view:\n \n <BLOCKQUOTE>\n@@ -49,21 +49,21 @@ <H2>\n </I>\n </BLOCKQUOTE>\n \n-<P> \n+<p> \n Hmm. So, in some unspecified way, Unicode encodings and\n translations between other character sets should be handled by this\n class.  \n-</P>\n+</p>\n \n <BLOCKQUOTE>\n <I>\n -2- The stateT argument selects the pair of codesets being mapped between. \n </I>\n </BLOCKQUOTE>\n \n-<P>\n+<p>\n Ah ha! Another clue...\n-</P>\n+</p>\n \n <BLOCKQUOTE>\n <I>\n@@ -81,32 +81,32 @@ <H2>\n </I>\n </BLOCKQUOTE>\n \n-<P>\n+<p>\n At this point, a couple points become clear:\n \n-<P>\n+<p>\n One: The standard clearly implies that attempts to add non-required\n (yet useful and widely used) conversions need to do so through the\n-third template parameter, stateT.</P>\n+third template parameter, stateT.</p>\n \n-<P>\n+<p>\n Two: The required conversions, by specifying mbstate_t as the third\n template parameter, imply an implementation strategy that is mostly\n (or wholly) based on the underlying C library, and the functions\n-mcsrtombs and wcsrtombs in particular.</P>\n+mcsrtombs and wcsrtombs in particular.</p>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 3. Some thoughts on what would be useful\n-</H2>\n+</h2>\n Probably the most frequently asked question about code conversion is:\n &quot;So dudes, what's the deal with Unicode strings?&quot; The dude part is\n optional, but apparently the usefulness of Unicode strings is pretty\n widely appreciated. Sadly, this specific encoding (And other useful\n encodings like UTF8, UCS4, ISO 8859-10, etc etc etc) are not mentioned\n in the C++ standard.\n \n-<P>\n+<p>\n In particular, the simple implementation detail of wchar_t's size\n seems to repeatedly confound people. Many systems use a two byte,\n unsigned integral type to represent wide characters, and use an\n@@ -117,122 +117,122 @@ <H2>\n programming language (and thus C++) does not specify a specific size\n for the type wchar_t.\n \n-<P>\n+<p>\n Thus, portable C++ code cannot assume a byte size (or endianness) either.\n \n-<P>\n+<p>\n Getting back to the frequently asked question: What about Unicode strings?\n \n-<P>\n+<p>\n What magic spell will do this conversion?\n \n-<P>\n+<p>\n A couple of comments:\n-</P>\n+</p>\n \n-<P>\n+<p>\n The thought that all one needs to convert between two arbitrary\n codesets is two types and some kind of state argument is\n unfortunate. In particular, encodings may be stateless. The naming of\n the third parameter as stateT is unfortunate, as what is really needed\n is some kind of generalized type that accounts for the issues that\n abstract encodings will need. The minimum information that is required\n includes:\n-</P>\n+</p>\n \n-<UL>\n-<LI>\n-</P>\n+<ul>\n+<li>\n+</p>\n  Identifiers for each of the codesets involved in the conversion. For\n example, using the iconv family of functions from the Single Unix\n Specification (what used to be called X/Open) hosted on the GNU/Linux\n operating system allows bi-directional mapping between far more than\n the following tantalizing possibilities: \n-</P>\n+</p>\n \n-(An edited list taken from <TT>`iconv --list`</TT> on a Red Hat 6.2/Intel system:\n+(An edited list taken from <code>`iconv --list`</code> on a Red Hat 6.2/Intel system:\n \n <BLOCKQUOTE>\n <PRE>\n 8859_1, 8859_9, 10646-1:1993, 10646-1:1993/UCS4, ARABIC, ARABIC7,\n-ASCII, EUC-CN, EUC-JP, EUC-KR, EUC-TW, GREEK-CCITT, GREEK, GREEK7-OLD,\n+ASCII, EUC-CN, EUC-JP, EUC-KR, EUC-TW, GREEK-CCIcode, GREEK, GREEK7-OLD,\n GREEK7, GREEK8, HEBREW, ISO-8859-1, ISO-8859-2, ISO-8859-3,\n ISO-8859-4, ISO-8859-5, ISO-8859-6, ISO-8859-7, ISO-8859-8,\n ISO-8859-9, ISO-8859-10, ISO-8859-11, ISO-8859-13, ISO-8859-14,\n ISO-8859-15, ISO-10646, ISO-10646/UCS2, ISO-10646/UCS4,\n ISO-10646/UTF-8, ISO-10646/UTF8, SHIFT-JIS, SHIFT_JIS, UCS-2, UCS-4,\n-UCS2, UCS4, UNICODE, UNICODEBIG, UNICODELITTLE, US-ASCII, US, UTF-8,\n+UCS2, UCS4, UNICODE, UNICODEBIG, UNICODELIcodeLE, US-ASCII, US, UTF-8,\n UTF-16, UTF8, UTF16).\n </PRE>\n </BLOCKQUOTE>\n \n-<P>\n+<p>\n For iconv-based implementations, string literals for each of the\n encodings (ie. &quot;UCS-2&quot; and &quot;UTF-8&quot;) are necessary,\n although for other,\n non-iconv implementations a table of enumerated values or some other\n mechanism may be required.\n \n-<LI>\n+<li>\n  Maximum length of the identifying string literal.\n \n-<LI>\n+<li>\n  Some encodings are require explicit endian-ness. As such, some kind\n   of endian marker or other byte-order marker will be necessary. See\n   &quot;Footnotes for C/C++ developers&quot; in Haible for more information on\n   UCS-2/Unicode endian issues. (Summary: big endian seems most likely,\n   however implementations, most notably Microsoft, vary.)\n \n-<LI>\n+<li>\n  Types representing the conversion state, for conversions involving\n   the machinery in the &quot;C&quot; library, or the conversion descriptor, for\n   conversions using iconv (such as the type iconv_t.)  Note that the\n   conversion descriptor encodes more information than a simple encoding\n   state type.\n \n-<LI>\n+<li>\n  Conversion descriptors for both directions of encoding. (ie, both\n   UCS-2 to UTF-8 and UTF-8 to UCS-2.)\n \n-<LI>\n+<li>\n  Something to indicate if the conversion requested if valid.\n \n-<LI>\n+<li>\n  Something to represent if the conversion descriptors are valid.\n \n-<LI>\n+<li>\n  Some way to enforce strict type checking on the internal and\n   external types. As part of this, the size of the internal and\n   external types will need to be known.\n-</UL>\n+</ul>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 4. Problems with &quot;C&quot; code conversions : thread safety, global\n locales, termination.\n-</H2>\n+</h2>\n \n In addition, multi-threaded and multi-locale environments also impact\n the design and requirements for code conversions. In particular, they\n affect the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt;\n when implemented using standard &quot;C&quot; functions.\n \n-<P>\n+<p>\n Three problems arise, one big, one of medium importance, and one small. \n \n-<P>\n+<p>\n First, the small: mcsrtombs and wcsrtombs may not be multithread-safe\n on all systems required by the GNU tools. For GNU/Linux and glibc,\n this is not an issue.\n \n-<P>\n+<p>\n Of medium concern, in the grand scope of things, is that the functions\n used to implement this specialization work on null-terminated\n strings. Buffers, especially file buffers, may not be null-terminated,\n thus giving conversions that end prematurely or are otherwise\n incorrect. Yikes!\n \n-<P>\n+<p>\n The last, and fundamental problem, is the assumption of a global\n locale for all the &quot;C&quot; functions referenced above. For something like\n C++ iostreams (where codecvt is explicitly used) the notion of\n@@ -243,43 +243,43 @@ <H2>\n correct results. In short, libstdc++-v3 is trying to offer, as an\n option, a high-quality implementation, damn the additional complexity!\n \n-<P>\n+<p>\n For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,\n conversions are made between the internal character set (always UCS4\n on GNU/Linux) and whatever the currently selected locale for the\n LC_CTYPE category implements.\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 5. Design\n-</H2>\n+</h2>\n The two required specializations are implemented as follows:\n \n-<P>\n-<TT>\n+<p>\n+<code>\n codecvt&lt;char, char, mbstate_t&gt;\n-</TT>\n-<P>\n+</code>\n+<p>\n This is a degenerate (ie, does nothing) specialization. Implementing\n this was a piece of cake.\n \n-<P>\n-<TT>\n+<p>\n+<code>\n codecvt&lt;char, wchar_t, mbstate_t&gt;\n-</TT>\n-<P>\n+</code>\n+<p>\n This specialization, by specifying all the template parameters, pretty\n much ties the hands of implementors. As such, the implementation is\n straightforward, involving mcsrtombs for the conversions between char\n to wchar_t and wcsrtombs for conversions between wchar_t and char.\n \n-<P>\n+<p>\n Neither of these two required specializations deals with Unicode\n characters. As such, libstdc++-v3 implements a partial specialization\n of the codecvt class with and iconv wrapper class, __enc_traits as the\n third template parameter.\n \n-<P>\n+<p>\n This implementation should be standards conformant. First of all, the\n standard explicitly points out that instantiations on the third\n template parameter, stateT, are the proper way to implement\n@@ -289,34 +289,34 @@ <H2>\n (see 21.1.2 traits typedefs) only indicate that this type be copy\n constructible.\n \n-<P>\n+<p>\n As such, the type __enc_traits is defined as a non-templatized, POD\n type to be used as the third type of a codecvt instantiation. This\n type is just a wrapper class for iconv, and provides an easy interface\n to iconv functionality.\n \n-<P>\n+<p>\n There are two constructors for __enc_traits:\n \n-<P>\n-<TT> \n+<p>\n+<code> \n __enc_traits() : __in_desc(0), __out_desc(0)\n-</TT>\n-<P>\n+</code>\n+<p>\n This default constructor sets the internal encoding to some default\n (currently UCS4) and the external encoding to whatever is returned by\n nl_langinfo(CODESET).\n \n-<P>\n-<TT> \n+<p>\n+<code> \n __enc_traits(const char* __int, const char* __ext)\n-</TT>\n-<P>\n+</code>\n+<p>\n This constructor takes as parameters string literals that indicate the\n desired internal and external encoding. There are no defaults for\n either argument.\n \n-<P>\n+<p>\n One of the issues with iconv is that the string literals identifying\n conversions are not standardized. Because of this, the thought of\n mandating and or enforcing some set of pre-determined valid\n@@ -326,24 +326,24 @@ <H2>\n encodings. It is up to the user to make sure that these strings are\n valid on the target system.\n   \n-<P>\n-<TT> \n+<p>\n+<code> \n void\n _M_init()\n-</TT>\n-<P>\n+</code>\n+<p>\n Strangely enough, this member function attempts to open conversion\n descriptors for a given __enc_traits object. If the conversion\n descriptors are not valid, the conversion descriptors returned will\n not be valid and the resulting calls to the codecvt conversion\n functions will return error.\n \n-<P>\n-<TT> \n+<p>\n+<code> \n bool\n _M_good()\n-</TT>\n-<P>\n+</code>\n+<p>\n Provides a way to see if the given __enc_traits object has been\n properly initialized. If the string literals describing the desired\n internal and external encoding are not valid, initialization will\n@@ -352,29 +352,29 @@ <H2>\n descriptors, this will also return false. Otherwise, the object is\n ready to convert and will return true.\n \n-<P>\n-<TT> \n+<p>\n+<code> \n __enc_traits(const __enc_traits&amp;)\n-</TT>\n-<P>\n+</code>\n+<p>\n As iconv allocates memory and sets up conversion descriptors, the copy\n constructor can only copy the member data pertaining to the internal\n and external code conversions, and not the conversion descriptors\n themselves.\n \n-<P>\n+<p>\n Definitions for all the required codecvt member functions are provided\n for this specialization, and usage of codecvt&lt;internal character type,\n external character type, __enc_traits&gt; is consistent with other\n codecvt usage.\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 6.  Examples\n-</H2>\n+</h2>\n \n-<UL>\n-\t<LI>\n+<ul>\n+\t<li>\n \ta. conversions involving string literals\n \n <pre>\n@@ -415,106 +415,106 @@ <H2>\n   VERIFY( efrom_next == e_lit + size );\n   VERIFY( ito_next == i_arr + size );\n </pre>\n-\t<LI>\n+\t<li>\n \tb. conversions involving std::string\n-\t<LI>\n+\t<li>\n \tc. conversions involving std::filebuf and std::ostream\n-</UL>\n+</ul>\n \n More information can be found in the following testcases:\n-<UL>\n-<LI> testsuite/22_locale/codecvt_char_char.cc  \n-<LI> testsuite/22_locale/codecvt_unicode_wchar_t.cc\n-<LI> testsuite/22_locale/codecvt_unicode_char.cc  \n-<LI> testsuite/22_locale/codecvt_wchar_t_char.cc\n-</UL>\n-\n-<P>\n-<H2>\n+<ul>\n+<li> testsuite/22_locale/codecvt_char_char.cc  \n+<li> testsuite/22_locale/codecvt_unicode_wchar_t.cc\n+<li> testsuite/22_locale/codecvt_unicode_char.cc  \n+<li> testsuite/22_locale/codecvt_wchar_t_char.cc\n+</ul>\n+\n+<p>\n+<h2>\n 7.  Unresolved Issues\n-</H2>\n-<UL>\n-<LI>\n+</h2>\n+<ul>\n+<li>\n \ta. things that are sketchy, or remain unimplemented:\n \t\tdo_encoding, max_length and length member functions\n \t\tare only weakly implemented. I have no idea how to do\n \t\tthis correctly, and in a generic manner.  Nathan?\n \n-<LI>\n+<li>\n \tb. conversions involving std::string\n \n-\t<UL>\n-\t\t<LI>\n+\t<ul>\n+\t\t<li>\n \t\thow should operators != and == work for string of\n \t\tdifferent/same encoding?\n \n-\t\t<LI>\n+\t\t<li>\n \t\twhat is equal? A byte by byte comparison or an\n \t\tencoding then byte comparison?\n \t\t\n-\t\t<LI>\n+\t\t<li>\n \t\tconversions between narrow, wide, and unicode strings\n-\t</UL>\n-<LI>\n+\t</ul>\n+<li>\n \tc. conversions involving std::filebuf and std::ostream\n-\t<UL>\n-\t\t<LI>\n+\t<ul>\n+\t\t<li>\n \t\thow to initialize the state object in a\n \t\tstandards-conformant manner?\n \n-\t\t<LI>\n+\t\t<li>\n \t\thow to synchronize the &quot;C&quot; and &quot;C++&quot;\n         conversion information?\n \n-\t\t<LI>\n+\t\t<li>\n \t\twchar_t/char internal buffers and conversions between\n \t\tinternal/external buffers?\n-\t</UL>\n-</UL>\n+\t</ul>\n+</ul>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 8. Acknowledgments\n-</H2>\n+</h2>\n Ulrich Drepper for the iconv suggestions and patient answering of\n late-night questions, Jason Merrill for the template partial\n specialization hints, language clarification, and wchar_t fixes.\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 9. Bibliography / Referenced Documents\n-</H2>\n+</h2>\n \n Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters &quot;6. Character Set Handling&quot; and &quot;7 Locales and Internationalization&quot;\n \n-<P>\n+<p>\n Drepper, Ulrich, Numerous, late-night email correspondence\n \n-<P>\n+<p>\n Feather, Clive, &quot;A brief description of Normative Addendum 1,&quot; in particular the parts on Extended Character Sets\n http://www.lysator.liu.se/c/na1.html\n \n-<P>\n+<p>\n Haible, Bruno, &quot;The Unicode HOWTO&quot; v0.18, 4 August 2000\n ftp://ftp.ilog.fr/pub/Users/haible/utf8/Unicode-HOWTO.html\n \n-<P>\n+<p>\n ISO/IEC 14882:1998 Programming languages - C++\n \n-<P>\n+<p>\n ISO/IEC 9899:1999 Programming languages - C\n \n-<P>\n+<p>\n Khun, Markus, &quot;UTF-8 and Unicode FAQ for Unix/Linux&quot;\n http://www.cl.cam.ac.uk/~mgk25/unicode.html\n \n-<P>\n+<p>\n Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000\n \n-<P>\n+<p>\n Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n \n-<P>\n+<p>\n System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n http://www.opennc.org/austin/docreg.html"}, {"sha": "3568145c92e616b219127b8f2766d2fa3a9fe81c", "filename": "libstdc++-v3/docs/html/22_locale/ctype.html", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fctype.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fctype.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fctype.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,144 +1,144 @@\n-<HTML>\n-<HEAD>\n-  <H1>\n+<html>\n+<head>\n+  <h1>\n   Notes on the ctype implementation.\n-  </H1>\n-</HEAD>\n+  </h1>\n+</head>\n <I>\n prepared by Benjamin Kosnik (bkoz@redhat.com) on August 30, 2000\n </I>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 1. Abstract\n-</H2>\n-<P>\n+</h2>\n+<p>\n Woe is me.\n-</P>\n+</p>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 2. What the standard says\n-</H2>\n+</h2>\n \n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 3. Problems with &quot;C&quot; ctype : global locales, termination.\n-</H2>\n+</h2>\n \n-<P>\n+<p>\n For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,\n conversions are made between the internal character set (always UCS4\n on GNU/Linux) and whatever the currently selected locale for the\n LC_CTYPE category implements.\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 4. Design\n-</H2>\n+</h2>\n The two required specializations are implemented as follows:\n \n-<P>\n-<TT>\n+<p>\n+<code>\n ctype&lt;char&gt;\n-</TT>\n-<P>\n+</code>\n+<p>\n This is simple specialization. Implementing this was a piece of cake.\n \n-<P>\n-<TT>\n+<p>\n+<code>\n ctype&lt;wchar_t&gt;\n-</TT>\n-<P>\n+</code>\n+<p>\n This specialization, by specifying all the template parameters, pretty\n much ties the hands of implementors. As such, the implementation is\n straightforward, involving mcsrtombs for the conversions between char\n to wchar_t and wcsrtombs for conversions between wchar_t and char.\n \n-<P>\n+<p>\n Neither of these two required specializations deals with Unicode\n characters. As such, libstdc++-v3 implements \n \n \n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 5.  Examples\n-</H2>\n+</h2>\n \n <pre>\n   typedef ctype<char> cctype;\n </pre>\n \n More information can be found in the following testcases:\n-<UL>\n-<LI> testsuite/22_locale/ctype_char_members.cc \n-<LI> testsuite/22_locale/ctype_wchar_t_members.cc \n-</UL>\n+<ul>\n+<li> testsuite/22_locale/ctype_char_members.cc \n+<li> testsuite/22_locale/ctype_wchar_t_members.cc \n+</ul>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 6.  Unresolved Issues\n-</H2>\n+</h2>\n \n-<UL>\n-\t<LI> how to deal with the global locale issue?\n+<ul>\n+\t<li> how to deal with the global locale issue?\n \n-\t<LI> how to deal with different types than char, wchar_t?\n+\t<li> how to deal with different types than char, wchar_t?\n \n-\t<LI> codecvt/ctype overlap: narrow/widen\n+\t<li> codecvt/ctype overlap: narrow/widen\n \n-\t<LI> mask typedef in codecvt_base, argument types in codecvt.\n+\t<li> mask typedef in codecvt_base, argument types in codecvt.\n \twhat is know about this type?\n \n-\t<LI> why mask* argument in codecvt?\n+\t<li> why mask* argument in codecvt?\n \t\n-\t<LI> can this be made (more) generic? is there a simple way to\n+\t<li> can this be made (more) generic? is there a simple way to\n \tstraighten out the configure-time mess that is a by-product of\n \tthis class?\n \n-\t<LI> get the ctype<wchar_t>::mask stuff under control. Need to\n+\t<li> get the ctype<wchar_t>::mask stuff under control. Need to\n \tmake some kind of static table, and not do lookup evertime\n \tsomebody hits the do_is... functions. Too bad we can't just\n \tredefine mask for ctype<wchar_t>\n \t\n-\t<LI> rename abstract base class. See if just smash-overriding\n+\t<li> rename abstract base class. See if just smash-overriding\n \tis a better approach. Clarify, add sanity to naming.\n \n-</UL>\n+</ul>\n \n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 7. Acknowledgments\n-</H2>\n+</h2>\n Ulrich Drepper for patient answering of late-night questions, skeletal\n examples, and C language expertise.\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 8. Bibliography / Referenced Documents\n-</H2>\n+</h2>\n \n Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters &quot;6. Character Set Handling&quot; and &quot;7 Locales and Internationalization&quot;\n \n-<P>\n+<p>\n Drepper, Ulrich, Numerous, late-night email correspondence\n \n-<P>\n+<p>\n ISO/IEC 14882:1998 Programming languages - C++\n \n-<P>\n+<p>\n ISO/IEC 9899:1999 Programming languages - C\n \n-<P>\n+<p>\n Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000\n \n-<P>\n+<p>\n Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n \n-<P>\n+<p>\n System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n http://www.opennc.org/austin/docreg.html"}, {"sha": "ec9bf0a5da743148da95ae22f8928666b5c347c5", "filename": "libstdc++-v3/docs/html/22_locale/howto.html", "status": "modified", "additions": 96, "deletions": 96, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,55 +1,55 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 22.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Chapter 22</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.4 2001/08/08 02:48:58 bkoz Exp $ -->\n-</HEAD>\n-<BODY>\n-\n-<H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 22:  Localization</A></H1>\n-\n-<P>Chapter 22 deals with the C++ localization facilities.\n-</P>\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 22.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Chapter 22</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.5 2001/09/15 00:41:11 pme Exp $ -->\n+</head>\n+<body>\n+\n+<h1 CLASS=\"centered\"><a name=\"top\">Chapter 22:  Localization</a></h1>\n+\n+<p>Chapter 22 deals with the C++ localization facilities.\n+</p>\n <!-- I wanted to write that sentence in something requiring an exotic font,\n      like Cryllic or Kanji.  Probably more work than such cuteness is worth,\n      but I still think it'd be funny.\n  -->\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#1\">class locale</A>\n-   <LI><A HREF=\"#2\">class codecvt</A>\n-   <LI><A HREF=\"#3\">class ctype</A>\n-   <LI><A HREF=\"#4\">class messages</A>\n-   <LI><A HREF=\"#5\">Bjarne Stroustrup on Locales</A>\n-   <LI><A HREF=\"#6\">Nathan Myers on Locales</A>   \n-   <LI><A HREF=\"#7\">Correct Transformations</A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#1\">class locale</a>\n+   <li><a href=\"#2\">class codecvt</a>\n+   <li><a href=\"#3\">class ctype</a>\n+   <li><a href=\"#4\">class messages</a>\n+   <li><a href=\"#5\">Bjarne Stroustrup on Locales</a>\n+   <li><a href=\"#6\">Nathan Myers on Locales</a>   \n+   <li><a href=\"#7\">Correct Transformations</a>\n+</ul>\n \n <!-- ####################################################### -->\n \n-<HR>\n-<H2><A NAME=\"1\">class locale</A></H2>\n-   <P> Notes made during the implementation of locales can be found \n-       <A HREF=\"locale.html\">here</A>.\n-   </P>\n+<hr>\n+<h2><a name=\"1\">class locale</a></h2>\n+   <p> Notes made during the implementation of locales can be found \n+       <a href=\"locale.html\">here</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"2\">class codecvt</A></H2>\n-   <P> Notes made during the implementation of codecvt can be found \n-       <A HREF=\"codecvt.html\">here</A>.\n-   </P>\n+<hr>\n+<h2><a name=\"2\">class codecvt</a></h2>\n+   <p> Notes made during the implementation of codecvt can be found \n+       <a href=\"codecvt.html\">here</a>.\n+   </p>\n \n-   <P> The following is the abstract from the implementation notes:\n+   <p> The following is the abstract from the implementation notes:\n    <BLOCKQUOTE>\n    The standard class codecvt attempts to address conversions between\n    different character encoding schemes. In particular, the standard\n@@ -66,68 +66,68 @@ <H2><A NAME=\"2\">class codecvt</A></H2>\n    implementation-provided extended functionality are given.\n    </BLOCKQUOTE>\n \n-<HR>\n-<H2><A NAME=\"3\">class ctype</A></H2>\n-   <P> Notes made during the implementation of ctype can be found \n-       <A HREF=\"ctype.html\">here</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"4\">class messages</A></H2>\n-   <P> Notes made during the implementation of messages can be found \n-       <A HREF=\"messages.html\">here</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"5\">Stroustrup on Locales</A></H2>\n-   <P>Dr. Bjarne Stroustrup has released a\n-      <A HREF=\"http://www.research.att.com/~bs/3rd_loc0.html\">pointer</A>\n+<hr>\n+<h2><a name=\"3\">class ctype</a></h2>\n+   <p> Notes made during the implementation of ctype can be found \n+       <a href=\"ctype.html\">here</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"4\">class messages</a></h2>\n+   <p> Notes made during the implementation of messages can be found \n+       <a href=\"messages.html\">here</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"5\">Stroustrup on Locales</a></h2>\n+   <p>Dr. Bjarne Stroustrup has released a\n+      <a href=\"http://www.research.att.com/~bs/3rd_loc0.html\">pointer</a>\n       to Appendix D of his book,\n-      <A HREF=\"http://www.research.att.com/~bs/3rd.html\">The C++\n-      Programming Language (3rd Edition)</A>.  It is a detailed\n+      <a href=\"http://www.research.att.com/~bs/3rd.html\">The C++\n+      Programming Language (3rd Edition)</a>.  It is a detailed\n       description of locales and how to use them.\n-   </P>\n-   <P>He also writes:\n-      <BLOCKQUOTE><EM>\n+   </p>\n+   <p>He also writes:\n+      <BLOCKQUOTE><em>\n       Please note that I still consider this detailed description of\n       locales beyond the needs of most C++ programmers. It is written\n       with experienced programmers in mind and novices will do best to\n       avoid it.\n-      </EM></BLOCKQUOTE>\n-   </P>\n+      </em></BLOCKQUOTE>\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"6\">Nathan Myers on Locales</A></H2>\n-   <P> An article entitled &quot;The Standard C++ Locale&quot; was\n+<hr>\n+<h2><a name=\"6\">Nathan Myers on Locales</a></h2>\n+   <p> An article entitled &quot;The Standard C++ Locale&quot; was\n        published in Dr. Dobb's Journal and can be found\n-      <A HREF=\"http://www.cantrip.org/locale.html\">here</A>.\n-   </P>\n+      <a href=\"http://www.cantrip.org/locale.html\">here</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"7\">Correct Transformations</A></H2>\n+<hr>\n+<h2><a name=\"7\">Correct Transformations</a></h2>\n    <!-- Jumping directly here from chapter 21. -->\n-   <P>A very common question on newsgroups and mailing lists is, &quot;How\n+   <p>A very common question on newsgroups and mailing lists is, &quot;How\n       do I do &lt;foo&gt; to a character string?&quot; where &lt;foo&gt; is\n       a task such as changing all the letters to uppercase, to lowercase,\n       testing for digits, etc.  A skilled and conscientious programmer\n       will follow the question with another, &quot;And how do I make the\n       code portable?&quot;\n-   </P>\n-   <P>(Poor innocent programmer, you have no idea the depths of trouble\n+   </p>\n+   <p>(Poor innocent programmer, you have no idea the depths of trouble\n       you are getting yourself into.  'Twould be best for your sanity if\n       you dropped the whole idea and took up basket weaving instead.  No?\n       Fine, you asked for it...)\n-   </P>\n-   <P>The task of changing the case of a letter or classifying a character\n+   </p>\n+   <p>The task of changing the case of a letter or classifying a character\n       as numeric, graphical, etc, all depends on the cultural context of the\n       program at runtime.  So, first you must take the portability question\n       into account.  Once you have localized the program to a particular\n       natural language, only then can you perform the specific task.\n       Unfortunately, specializing a function for a human language is not\n       as simple as declaring\n-      <TT> extern &quot;Danish&quot; int tolower (int); </TT>.\n-   </P>\n-   <P>The C++ code to do all this proceeds in the same way.  First, a locale\n+      <code> extern &quot;Danish&quot; int tolower (int); </code>.\n+   </p>\n+   <p>The C++ code to do all this proceeds in the same way.  First, a locale\n       is created.  Then member functions of that locale are called to\n       perform minor tasks.  Continuing the example from Chapter 21, we wish\n       to use the following convenience functions:\n@@ -141,19 +141,19 @@ <H2><A NAME=\"7\">Correct Transformations</A></H2>\n        tolower (charT c, const locale&amp; loc) const;\n    }</PRE>\n       This function extracts the appropriate &quot;facet&quot; from the\n-      locale <EM>loc</EM> and calls the appropriate member function of that\n-      facet, passing <EM>c</EM> as its argument.  The resulting character\n+      locale <em>loc</em> and calls the appropriate member function of that\n+      facet, passing <em>c</em> as its argument.  The resulting character\n       is returned.\n-   </P>\n-   <P>For the C/POSIX locale, the results are the same as calling the\n-      classic C <TT>toupper/tolower</TT> function that was used in previous\n+   </p>\n+   <p>For the C/POSIX locale, the results are the same as calling the\n+      classic C <code>toupper/tolower</code> function that was used in previous\n       examples.  For other locales, the code should Do The Right Thing.\n-   </P>\n-   <P>Of course, these functions take a second argument, and the\n+   </p>\n+   <p>Of course, these functions take a second argument, and the\n       transformation algorithm's operator argument can only take a single\n       parameter.  So we write simple wrapper structs to handle that.\n-   </P>\n-   <P>The next-to-final version of the code started in Chapter 21 looks like:\n+   </p>\n+   <p>The next-to-final version of the code started in Chapter 21 looks like:\n       <PRE>\n    #include &lt;iterator&gt;    // for back_inserter\n    #include &lt;locale&gt;\n@@ -200,23 +200,23 @@ <H2><A NAME=\"7\">Correct Transformations</A></H2>\n                       up\n                      );\n    }</PRE>\n-   </P>\n-   <P>The final version of the code uses <TT>bind2nd</TT> to eliminate\n+   </p>\n+   <p>The final version of the code uses <code>bind2nd</code> to eliminate\n       the wrapper structs, but the resulting code is tricky.  I have not\n       shown it here because no compilers currently available to me will\n       handle it.\n-   </P>\n+   </p>\n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.4 2001/08/08 02:48:58 bkoz Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.5 2001/09/15 00:41:11 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "9a13bb33b7d7cf8ce35d0f3b3c04eb743c0b22ea", "filename": "libstdc++-v3/docs/html/22_locale/locale.html", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,45 +1,45 @@\n-<HTML>\n-<HEAD>\n-  <H1>\n+<html>\n+<head>\n+  <h1>\n   Notes on the locale implementation.\n-  </H1>\n-</HEAD>\n+  </h1>\n+</head>\n <I>\n prepared by Benjamin Kosnik (bkoz@redhat.com) on August 8, 2001\n </I>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 1. Abstract Describes the basic locale object, including nested\n classes id, facet, and the reference-counted implementation object,\n class _Impl.\n-</H2>\n-<P>\n-</P>\n+</h2>\n+<p>\n+</p>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 2. What the standard says\n See Chapter 22 of the standard.\n-</H2>\n+</h2>\n \n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 3. Problems with &quot;C&quot; locales : global locales, termination.\n-</H2>\n+</h2>\n \n-<P>\n+<p>\n The major problem is fitting an object-orientated and non-global locale\n design ontop of POSIX and other relevant stanards, which include the\n Single Unix (nee X/Open.)\n \n Because POSIX falls down so completely, portibility is an issue.\n-<P>\n+<p>\n \n-<H2>\n+<h2>\n 4. Design\n-</H2>\n+</h2>\n Class locale in non-templatized and has three distinct types nested\n inside of it:\n \n@@ -69,34 +69,34 @@ <H2>\n \n class _Impl\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 5.  Examples\n-</H2>\n+</h2>\n \n <pre>\n   typedef __locale_t locale;\n </pre>\n \n More information can be found in the following testcases:\n-<UL>\n-<LI> testsuite/22_locale/ctype_char_members.cc \n-<LI> testsuite/22_locale/ctype_wchar_t_members.cc \n-</UL>\n+<ul>\n+<li> testsuite/22_locale/ctype_char_members.cc \n+<li> testsuite/22_locale/ctype_wchar_t_members.cc \n+</ul>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 6.  Unresolved Issues\n-</H2>\n+</h2>\n \n-<UL>\n-\t<LI> locale -a displays available locales on linux\n+<ul>\n+\t<li> locale -a displays available locales on linux\n \n-\t<LI> locale initialization: at what point does _S_classic,\n+\t<li> locale initialization: at what point does _S_classic,\n \t_S_global get initialized? Can named locales assume this\n \tinitialization has already taken place?\n \n-\t<LI> document how named locales error check when filling data\n+\t<li> document how named locales error check when filling data\n \tmembers. Ie, a fr_FR locale that doesn't have\n \tnumpunct::truename(): does it use \"true\"? Or is it a blank\n \tstring? What's the convention?\n@@ -105,37 +105,37 @@ <H2>\n \tuse \"de\" information? What is the rule for locales composed of\n \tjust an ISO language code (say, \"de\") and locales with both an\n \tISO language code and ISO country code (say, \"de_DE\").\n-</UL>\n+</ul>\n \n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 7. Acknowledgments\n-</H2>\n+</h2>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 8. Bibliography / Referenced Documents\n-</H2>\n+</h2>\n \n Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters &quot;6. Character Set Handling&quot; and &quot;7 Locales and Internationalization&quot;\n \n-<P>\n+<p>\n Drepper, Ulrich, Numerous, late-night email correspondence\n \n-<P>\n+<p>\n ISO/IEC 14882:1998 Programming languages - C++\n \n-<P>\n+<p>\n ISO/IEC 9899:1999 Programming languages - C\n \n-<P>\n+<p>\n Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales, Advanced Programmer's Guide and Reference, Addison Wesley Longman, Inc. 2000\n \n-<P>\n+<p>\n Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000\n \n-<P>\n+<p>\n System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n http://www.opennc.org/austin/docreg.html"}, {"sha": "906bff867849a3273c0d8efa7b0dfb873d2b4451", "filename": "libstdc++-v3/docs/html/22_locale/messages.html", "status": "modified", "additions": 128, "deletions": 128, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fmessages.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fmessages.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fmessages.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,32 +1,32 @@\n-<HTML>\n-<HEAD>\n-  <H1>\n+<html>\n+<head>\n+  <h1>\n   Notes on the messages implementation.\n-  </H1>\n-</HEAD>\n+  </h1>\n+</head>\n <I>\n prepared by Benjamin Kosnik (bkoz@redhat.com) on August 8, 2001\n </I>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 1. Abstract\n-</H2>\n-<P>\n+</h2>\n+<p>\n The std::messages facet implements message retrieval functionality\n equivalent to Java's java.text.MessageFormat .using either GNU gettext\n or IEEE 1003.1-200 functions.\n-</P>\n+</p>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 2. What the standard says\n-</H2>\n+</h2>\n The std::messages facet is probably the most vaguely defined facet in\n the standard library. It's assumed that this facility was built into\n the standard library in order to convert string literals from one\n locale to the other. For instance, converting the \"C\" locale's\n-<TT>const char* c = \"please\"</TT> to a German-localized <TT>\"bitte\"</TT>\n+<code>const char* c = \"please\"</code> to a German-localized <code>\"bitte\"</code>\n during program execution.\n \n <BLOCKQUOTE>\n@@ -38,20 +38,20 @@ <H2>\n \n The public member functions are:\n \n-<P>\n-<TT>catalog open(const basic_string<char>&, const locale&) const</TT>\n+<p>\n+<code>catalog open(const basic_string<char>&, const locale&) const</code>\n \n-<P>\n-<TT>string_type get(catalog, int, int, const string_type&) const</TT>\n+<p>\n+<code>string_type get(catalog, int, int, const string_type&) const</code>\n \n-<P>\n-<TT>void close(catalog) const</TT>\n+<p>\n+<code>void close(catalog) const</code>\n \n-<P>\n+<p>\n While the virtual functions are:\n \n-<P>\n-<TT>catalog do_open(const basic_string<char>&, const locale&) const</TT>\n+<p>\n+<code>catalog do_open(const basic_string<char>&, const locale&) const</code>\n <BLOCKQUOTE>\n <I>\n -1- Returns: A value that may be passed to get() to retrieve a\n@@ -62,8 +62,8 @@ <H2>\n </I>\n </BLOCKQUOTE>\n \n-<P>\n-<TT>string_type do_get(catalog, int, int, const string_type&) const</TT>\n+<p>\n+<code>string_type do_get(catalog, int, int, const string_type&) const</code>\n <BLOCKQUOTE>\n <I>\n -3- Requires: A catalog cat obtained from open() and not yet closed. \n@@ -73,8 +73,8 @@ <H2>\n </I>\n </BLOCKQUOTE>\n \n-<P>\n-<TT>void do_close(catalog) const</TT>\n+<p>\n+<code>void do_close(catalog) const</code>\n <BLOCKQUOTE>\n <I>\n -5- Requires: A catalog cat obtained from open() and not yet closed. \n@@ -84,30 +84,30 @@ <H2>\n </BLOCKQUOTE>\n \n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 3. Problems with &quot;C&quot; messages: thread safety,\n over-specification, and assumptions.\n-</H2>\n+</h2>\n A couple of notes on the standard. \n \n <p>\n-First, why is <TT>messages_base::catalog</TT> specified as a typedef\n+First, why is <code>messages_base::catalog</code> specified as a typedef\n to int? This makes sense for implementations that use\n-<TT>catopen</TT>, but not for others. Fortunately, it's not heavily\n+<code>catopen</code>, but not for others. Fortunately, it's not heavily\n used and so only a minor irritant. \n \n <p>\n-Second, by making the member functions <TT>const</TT>, it is\n+Second, by making the member functions <code>const</code>, it is\n impossible to save state in them. Thus, storing away information used\n in the 'open' member function for use in 'get' is impossible. This is\n unfortunate.\n \n <p>\n The 'open' member function in particular seems to be oddly\n-designed. The signature seems quite peculiar. Why specify a <TT>const\n-string& </TT> argument, for instance, instead of just <TT>const\n-char*</TT>? Or, why specify a <TT>const locale&</TT> argument that is\n+designed. The signature seems quite peculiar. Why specify a <code>const\n+string& </code> argument, for instance, instead of just <code>const\n+char*</code>? Or, why specify a <code>const locale&</code> argument that is\n to be used in the 'get' member function? How, exactly, is this locale\n argument useful? What was the intent? It might make sense if a locale\n argument was associated with a given default message string in the\n@@ -126,129 +126,129 @@ <H2>\n to be written in English, so translations are always from \"en_US\" to\n other, explicitly named locales.\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 4. Design and Implementation Details\n-</H2>\n+</h2>\n This is a relatively simple class, on the face of it. The standard\n specifies very little in concrete terms, so generic implementations\n that are conforming yet do very little are the norm. Adding\n functionality that would be useful to programmers and comparable to\n Java's java.text.MessageFormat takes a bit of work, and is highly\n dependent on the capabilities of the underlying operating system.\n \n-<P>\n+<p>\n Three different mechanisms have been provided, selectable via\n configure flags:\n \n-<UL>\n-\t<LI> generic\n-\t<P>\n+<ul>\n+\t<li> generic\n+\t<p>\n \tThis model does very little, and is what is used by default.\t\n-\t</P>\n+\t</p>\n \n-\t<LI> gnu\n-\t<P>\n+\t<li> gnu\n+\t<p>\n \tThe gnu model is complete and fully tested. It's based on the\n \tGNU gettext package, which is part of glibc. It uses the functions\n-\t<TT>textdomain, bindtextdomain, gettext</TT>\n+\t<code>textdomain, bindtextdomain, gettext</code>\n \tto implement full functionality. Creating message\n \tcatalogs is a relatively straight-forward process and is\n \tlightly documented below, and fully documented in gettext's\n \tdistributed documentation.\n-\t</P>\n+\t</p>\n \n-\t<LI> ieee_1003.1-200x\n-\t<P>\n+\t<li> ieee_1003.1-200x\n+\t<p>\n \tThis is a complete, though untested, implementation based on\n \tthe IEEE standard. The functions\n-\t<TT>catopen, catgets, catclose</TT>\n+\t<code>catopen, catgets, catclose</code>\n \tare used to retrieve locale-specific messages given the\n \tappropriate message catalogs that have been constructed for\n-\ttheir use. Note, the script <TT> po2msg.sed</TT> that is part\n+\ttheir use. Note, the script <code> po2msg.sed</code> that is part\n \tof the gettext distribution can convert gettext catalogs into\n-\tcatalogs that <TT>catopen</TT> can use.\n-\t</P>\n-</UL>\n+\tcatalogs that <code>catopen</code> can use.\n+\t</p>\n+</ul>\n \n-<P>\n+<p>\n A new, standards-conformant non-virtual member function signature was\n added for 'open' so that a directory could be specified with a given\n message catalog. This simplifies calling conventions for the gnu\n model.\n \n-<P>\n+<p>\n The rest of this document discusses details of the GNU model.\n \n-<P>\n+<p>\n The messages facet, because it is retrieving and converting between\n characters sets, depends on the ctype and perhaps the codecvt facet in\n a given locale. In addition, underlying \"C\" library locale support is\n-necessary for more than just the <TT>LC_MESSAGES</TT> mask:\n-<TT>LC_CTYPE</TT> is also necessary. To avoid any unpleasantness, all\n-bits of the \"C\" mask (ie <TT>LC_ALL</TT>) are set before retrieving\n+necessary for more than just the <code>LC_MESSAGES</code> mask:\n+<code>LC_CTYPE</code> is also necessary. To avoid any unpleasantness, all\n+bits of the \"C\" mask (ie <code>LC_ALL</code>) are set before retrieving\n messages.\n \n <p>\n Making the message catalogs can be initially tricky, but become quite\n simple with practice. For complete info, see the gettext\n documentation. Here's an idea of what is required:\n \n-<UL>\n+<ul>\n \t<LI > Make a source file with the required string literals\n \tthat need to be translated. See\n-\t<TT>intl/string_literals.cc</TT> for an example.\n+\t<code>intl/string_literals.cc</code> for an example.\n \n \t<p>\n-\t<LI> Make initial catalog (see \"4 Making the PO Template File\"\n+\t<li> Make initial catalog (see \"4 Making the PO Template File\"\n \tfrom the gettext docs).\n \t<p>\n-\t<TT> xgettext --c++ --debug string_literals.cc -o libstdc++.pot </TT>\n+\t<code> xgettext --c++ --debug string_literals.cc -o libstdc++.pot </code>\n \t\n \t<p> \n-\t<LI> Make language and country-specific locale catalogs.\n+\t<li> Make language and country-specific locale catalogs.\n \t<p>\n-\t<TT>cp libstdc++.pot fr_FR.po</TT>\n+\t<code>cp libstdc++.pot fr_FR.po</code>\n \t<p>\n-\t<TT>cp libstdc++.pot de_DE.po</TT>\n+\t<code>cp libstdc++.pot de_DE.po</code>\n \n \t<p> \n-\t<LI> Edit localized catalogs in emacs so that strings are\n+\t<li> Edit localized catalogs in emacs so that strings are\n \ttranslated.\n \t<p>\n-\t<TT>emacs fr_FR.po</TT>\n+\t<code>emacs fr_FR.po</code>\n \t\n-\t<P>\n-\t<LI> Make the binary mo files.\n \t<p>\n-\t<TT>msgfmt fr_FR.po -o fr_FR.mo</TT>\n+\t<li> Make the binary mo files.\n+\t<p>\n+\t<code>msgfmt fr_FR.po -o fr_FR.mo</code>\n \t<p>\n-\t<TT>msgfmt de_DE.po -o de_DE.mo</TT>\n+\t<code>msgfmt de_DE.po -o de_DE.mo</code>\n \n-\t<P>\n-\t<LI> Copy the binary files into the correct directory structure.\n \t<p>\n-\t<TT>cp fr_FR.mo (dir)/fr_FR/LC_MESSAGES/libstdc++-v3.mo</TT>\n+\t<li> Copy the binary files into the correct directory structure.\n+\t<p>\n+\t<code>cp fr_FR.mo (dir)/fr_FR/LC_MESSAGES/libstdc++-v3.mo</code>\n \t<p>\n-\t<TT>cp de_DE.mo (dir)/de_DE/LC_MESSAGES/libstdc++-v3.mo</TT>\n+\t<code>cp de_DE.mo (dir)/de_DE/LC_MESSAGES/libstdc++-v3.mo</code>\n \n-\t<P>\n-\t<LI> Use the new message catalogs.\n \t<p>\n-\t<TT>locale loc_de(\"de_DE\");</TT>\n+\t<li> Use the new message catalogs.\n \t<p>\n-\t<TT>\n+\t<code>locale loc_de(\"de_DE\");</code>\n+\t<p>\n+\t<code>\n \tuse_facet<messages<char> >(loc_de).open(\"libstdc++\", locale(), dir);\n-\t</TT>\n-</UL>\n+\t</code>\n+</ul>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 5.  Examples\n-</H2>\n+</h2>\n \n-<UL>\n-\t<LI> message converting, simple example using the GNU model.\n+<ul>\n+\t<li> message converting, simple example using the GNU model.\n \n <pre>\n #include <locale>\n@@ -274,40 +274,40 @@ <H2>\n   mssg_de.close(cat_de);\n }\n </pre>\n-</UL>\n+</ul>\n \n More information can be found in the following testcases:\n-<UL>\n-<LI> testsuite/22_locale/messages.cc  \n-<LI> testsuite/22_locale/messages_byname.cc\n-<LI> testsuite/22_locale/messages_char_members.cc\n-</UL>\n-\n-<P>\n-<H2>\n+<ul>\n+<li> testsuite/22_locale/messages.cc  \n+<li> testsuite/22_locale/messages_byname.cc\n+<li> testsuite/22_locale/messages_char_members.cc\n+</ul>\n+\n+<p>\n+<h2>\n 6.  Unresolved Issues\n-</H2>\n-<UL>\n-<LI>\tThings that are sketchy, or remain unimplemented:\n-\t<UL>\n-\t\t<LI>_M_convert_from_char, _M_convert_to_char are in\n+</h2>\n+<ul>\n+<li>\tThings that are sketchy, or remain unimplemented:\n+\t<ul>\n+\t\t<li>_M_convert_from_char, _M_convert_to_char are in\n \t\tflux, depending on how the library ends up doing\n \t\tcharacter set conversions. It might not be possible to\n \t\tdo a real character set based conversion, due to the\n \t\tfact that the template parameter for messages is not\n \t\tenough to instantiate the codecvt facet (1 supplied,\n \t\tneed at least 2 but would prefer 3).\n \n-\t\t<LI> There are issues with gettext needing the global\n+\t\t<li> There are issues with gettext needing the global\n \t\tlocale set to extract a message. This dependence on\n \t\tthe global locale makes the current \"gnu\" model non\n \t\tMT-safe. Future versions of glibc, ie glibc 2.3.x will\n \t\tfix this, and the C++ library bits are already in\n \t\tplace.\n-\t</UL>\n+\t</ul>\n \t\t\n <p>\n-<LI>\tDevelopment versions of the GNU \"C\" library, glibc 2.3 will allow\n+<li>\tDevelopment versions of the GNU \"C\" library, glibc 2.3 will allow\n \ta more efficient, MT implementation of std::messages, and will\n \tallow the removal of the _M_name_messages data member. If this\n \tis done, it will change the library ABI. The C++ parts to\n@@ -316,7 +316,7 @@ <H2>\n \tparts of the messages implementation can be switched over to\n \tthe new \"C\" library functionality. \n <p>\t\t\n-<LI>    At some point in the near future, std::numpunct will probably use\n+<li>    At some point in the near future, std::numpunct will probably use\n \tstd::messages facilities to implement truename/falename\n \tcorrectly. This is currently not done, but entries in\n \tlibstdc++.pot have already been made for \"true\" and \"false\"\n@@ -327,78 +327,78 @@ <H2>\n \tmessages members.\n \n <p>\n-<LI>\tThe following member functions:\n+<li>\tThe following member functions:\n \n \t<p>\n-\t<TT>\n+\t<code>\n         catalog \n         open(const basic_string<char>& __s, const locale& __loc) const\n-\t</TT>\n+\t</code>\n \n \t<p>\n-\t<TT>\n+\t<code>\n \tcatalog \n \topen(const basic_string<char>&, const locale&, const char*) const;\n-\t</TT>\n+\t</code>\n \n \t<p>\n \tDon't actually return a \"value less than 0 if no such catalog\n \tcan be opened\" as required by the standard in the \"gnu\"\n \tmodel. As of this writing, it is unknown how to query to see\n \tif a specified message catalog exists using the gettext\n \tpackage.\n-</UL>\n+</ul>\n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 7. Acknowledgments\n-</H2>\n+</h2>\n Ulrich Drepper for the character set explanations, gettext details,\n and patient answering of late-night questions, Tom Tromey for the java details.\n \n \n-<P>\n-<H2>\n+<p>\n+<h2>\n 8. Bibliography / Referenced Documents\n-</H2>\n+</h2>\n \n Drepper, Ulrich, GNU libc (glibc) 2.2 manual. In particular, Chapters\n &quot;7 Locales and Internationalization&quot;\n \n-<P>\n+<p>\n Drepper, Ulrich, Thread-Aware Locale Model, A proposal. This is a\n draft document describing the design of glibc 2.3 MT locale\n functionality.\n \n-<P>\n+<p>\n Drepper, Ulrich, Numerous, late-night email correspondence\n \n-<P>\n+<p>\n ISO/IEC 9899:1999 Programming languages - C\n \n-<P>\n+<p>\n ISO/IEC 14882:1998 Programming languages - C++\n \n-<P>\n+<p>\n Java 2 Platform, Standard Edition, v 1.3.1 API Specification. In\n particular, java.util.Properties, java.text.MessageFormat,\n java.util.Locale, java.util.ResourceBundle.\n http://java.sun.com/j2se/1.3/docs/api\n \n-<P>\n+<p>\n System Interface Definitions, Issue 7 (IEEE Std. 1003.1-200x)\n The Open Group/The Institute of Electrical and Electronics Engineers, Inc.\n In particular see lines 5268-5427.\n http://www.opennc.org/austin/docreg.html\n \n-<P> GNU gettext tools, version 0.10.38, Native Language Support\n+<p> GNU gettext tools, version 0.10.38, Native Language Support\n Library and Tools. \n http://sources.redhat.com/gettext\n \n-<P>\n+<p>\n Langer, Angelika and Klaus Kreft, Standard C++ IOStreams and Locales,\n Advanced Programmer's Guide and Reference, Addison Wesley Longman,\n Inc. 2000. See page 725, Internationalized Messages.\n \n-<P>\n+<p>\n Stroustrup, Bjarne, Appendix D, The C++ Programming Language, Special Edition, Addison Wesley, Inc. 2000"}, {"sha": "5a7f39cfd9b95ac732969bc809d871f3136b7ff0", "filename": "libstdc++-v3/docs/html/23_containers/howto.html", "status": "modified", "additions": 175, "deletions": 175, "changes": 350, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,101 +1,101 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 23.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Chapter 23</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.7 2001/08/24 20:34:34 pme Exp $ -->\n-</HEAD>\n-<BODY>\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 23.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Chapter 23</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.8 2001/09/15 00:41:11 pme Exp $ -->\n+</head>\n+<body>\n \n-<H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 23:  Containers</A></H1>\n+<h1 CLASS=\"centered\"><a name=\"top\">Chapter 23:  Containers</a></h1>\n \n-<P>Chapter 23 deals with container classes and what they offer.\n-</P>\n+<p>Chapter 23 deals with container classes and what they offer.\n+</p>\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#1\">Making code unaware of the container/array difference</A>\n-   <LI><A HREF=\"#2\">Variable-sized bitmasks</A>\n-   <LI><A HREF=\"#3\">Containers and multithreading</A>\n-   <LI><A HREF=\"#4\">&quot;Hinting&quot; during insertion</A>\n-   <LI><A HREF=\"#5\">Bitmasks and string arguments</A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#1\">Making code unaware of the container/array difference</a>\n+   <li><a href=\"#2\">Variable-sized bitmasks</a>\n+   <li><a href=\"#3\">Containers and multithreading</a>\n+   <li><a href=\"#4\">&quot;Hinting&quot; during insertion</a>\n+   <li><a href=\"#5\">Bitmasks and string arguments</a>\n+</ul>\n \n-<HR>\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"1\">Making code unaware of the container/array difference</A></H2>\n-   <P>You're writing some code and can't decide whether to use builtin\n+<h2><a name=\"1\">Making code unaware of the container/array difference</a></h2>\n+   <p>You're writing some code and can't decide whether to use builtin\n       arrays or some kind of container.  There are compelling reasons \n       to use one of the container classes, but you're afraid that you'll\n       eventually run into difficulties, change everything back to arrays,\n       and then have to change all the code that uses those data types to\n       keep up with the change.\n-   </P>\n-   <P>If your code makes use of the standard algorithms, this isn't as\n+   </p>\n+   <p>If your code makes use of the standard algorithms, this isn't as\n       scary as it sounds.  The algorithms don't know, nor care, about\n       the kind of &quot;container&quot; on which they work, since the\n       algorithms are only given endpoints to work with.  For the container\n-      classes, these are iterators (usually <TT>begin()</TT> and\n-      <TT>end()</TT>, but not always).  For builtin arrays, these are\n+      classes, these are iterators (usually <code>begin()</code> and\n+      <code>end()</code>, but not always).  For builtin arrays, these are\n       the address of the first element and the\n-      <A HREF=\"../24_iterators/howto.html#2\">past-the-end</A> element.\n-   </P>\n-   <P>Some very simple wrapper functions can hide all of that from the\n+      <a href=\"../24_iterators/howto.html#2\">past-the-end</a> element.\n+   </p>\n+   <p>Some very simple wrapper functions can hide all of that from the\n       rest of the code.  For example, a pair of functions called\n-      <TT>beginof</TT> can be written, one that takes an array, another\n+      <code>beginof</code> can be written, one that takes an array, another\n       that takes a vector.  The first returns a pointer to the first\n-      element, and the second returns the vector's <TT>begin()</TT>\n+      element, and the second returns the vector's <code>begin()</code>\n       iterator.\n-   </P>\n-   <P>The functions should be made template functions, and should also \n+   </p>\n+   <p>The functions should be made template functions, and should also \n       be declared inline.  As pointed out in the comments in the code \n-      below, this can lead to <TT>beginof</TT> being optimized out of\n+      below, this can lead to <code>beginof</code> being optimized out of\n       existence, so you pay absolutely nothing in terms of increased\n       code size or execution time.\n-   </P>\n-   <P>The result is that if all your algorithm calls look like\n+   </p>\n+   <p>The result is that if all your algorithm calls look like\n       <PRE>\n    std::transform(beginof(foo), endof(foo), beginof(foo), SomeFunction);</PRE>\n       then the type of foo can change from an array of ints to a vector\n       of ints to a deque of ints and back again, without ever changing any\n       client code.\n-   </P>\n-   <P>This author has a collection of such functions, called &quot;*of&quot;\n+   </p>\n+   <p>This author has a collection of such functions, called &quot;*of&quot;\n       because they all extend the builtin &quot;sizeof&quot;.  It started\n       with some Usenet discussions on a transparent way to find the length\n       of an array.  A simplified and much-reduced version for easier\n-      reading is <A HREF=\"wrappers_h.txt\">given here</A>.\n-   </P>\n-   <P>Astute readers will notice two things at once:  first, that the\n-      container class is still a <TT>vector&lt;T&gt;</TT> instead of a\n-      more general <TT>Container&lt;T&gt;</TT>.  This would mean that\n-      three functions for <TT>deque</TT> would have to be added, another\n-      three for <TT>list</TT>, and so on.  This is due to problems with\n+      reading is <a href=\"wrappers_h.txt\">given here</a>.\n+   </p>\n+   <p>Astute readers will notice two things at once:  first, that the\n+      container class is still a <code>vector&lt;T&gt;</code> instead of a\n+      more general <code>Container&lt;T&gt;</code>.  This would mean that\n+      three functions for <code>deque</code> would have to be added, another\n+      three for <code>list</code>, and so on.  This is due to problems with\n       getting template resolution correct; I find it easier just to \n       give the extra three lines and avoid confusion.\n-   </P>\n-   <P>Second, the line\n+   </p>\n+   <p>Second, the line\n       <PRE>\n     inline unsigned int lengthof (T (&amp;)[sz]) { return sz; } </PRE>\n       looks just weird!  Hint:  unused parameters can be left nameless.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"2\">Variable-sized bitmasks</A></H2>\n-   <P>No, you cannot write code of the form\n+<hr>\n+<h2><a name=\"2\">Variable-sized bitmasks</a></h2>\n+   <p>No, you cannot write code of the form\n       <!-- Careful, the leading spaces in PRE show up directly. -->\n       <PRE>\n       #include &lt;bitset&gt;\n@@ -105,104 +105,104 @@ <H2><A NAME=\"2\">Variable-sized bitmasks</A></H2>\n           std::bitset&lt;n&gt;   bits;\n           ....\n       } </PRE>\n-      because <TT>n</TT> must be known at compile time.  Your compiler is\n+      because <code>n</code> must be known at compile time.  Your compiler is\n       correct; it is not a bug.  That's the way templates work.  (Yes, it\n-      <EM>is</EM> a feature.)\n-   </P>\n-   <P>There are a couple of ways to handle this kind of thing.  Please\n+      <em>is</em> a feature.)\n+   </p>\n+   <p>There are a couple of ways to handle this kind of thing.  Please\n       consider all of them before passing judgement.  They include, in\n       no particular order:\n-      <UL>\n-        <LI>A very large N in <TT>bitset&lt;N&gt;</TT>.\n-        <LI>A container&lt;bool&gt;.\n-        <LI>Extremely weird solutions.\n-      </UL>\n-   </P>\n-   <P><B>A very large N in <TT>bitset&lt;N&gt;</TT>.&nbsp;&nbsp;</B>  It has\n+      <ul>\n+        <li>A very large N in <code>bitset&lt;N&gt;</code>.\n+        <li>A container&lt;bool&gt;.\n+        <li>Extremely weird solutions.\n+      </ul>\n+   </p>\n+   <p><B>A very large N in <code>bitset&lt;N&gt;</code>.&nbsp;&nbsp;</B>  It has\n       been pointed out a few times in newsgroups that N bits only takes up\n       (N/8) bytes on most systems, and division by a factor of eight is pretty\n       impressive when speaking of memory.  Half a megabyte given over to a\n       bitset (recall that there is zero space overhead for housekeeping info;\n       it is known at compile time exactly how large the set is) will hold over\n       four million bits.  If you're using those bits as status flags (e.g.,\n-      &quot;changed&quot;/&quot;unchanged&quot; flags), that's a <EM>lot</EM>\n+      &quot;changed&quot;/&quot;unchanged&quot; flags), that's a <em>lot</em>\n       of state.\n-   </P>\n-   <P>You can then keep track of the &quot;maximum bit used&quot; during some\n+   </p>\n+   <p>You can then keep track of the &quot;maximum bit used&quot; during some\n       testing runs on representative data, make note of how many of those bits\n       really need to be there, and then reduce N to a smaller number.  Leave\n       some extra space, of course.  (If you plan to write code like the \n       incorrect example above, where the bitset is a local variable, then you\n       may have to talk your compiler into allowing that much stack space;\n       there may be zero space overhead, but it's all allocated inside the\n       object.)\n-   </P>\n-   <P><B>A container&lt;bool&gt;.&nbsp;&nbsp;</B>  The Committee made provision\n+   </p>\n+   <p><B>A container&lt;bool&gt;.&nbsp;&nbsp;</B>  The Committee made provision\n       for the space savings possible with that (N/8) usage previously mentioned,\n       so that you don't have to do wasteful things like\n-      <TT>Container&lt;char&gt;</TT> or <TT>Container&lt;short int&gt;</TT>.\n-      Specifically, <TT>vector&lt;bool&gt;</TT> is required to be\n+      <code>Container&lt;char&gt;</code> or <code>Container&lt;short int&gt;</code>.\n+      Specifically, <code>vector&lt;bool&gt;</code> is required to be\n       specialized for that space savings.\n-   </P>\n-   <P>The problem is that <TT>vector&lt;bool&gt;</TT> doesn't behave like a\n+   </p>\n+   <p>The problem is that <code>vector&lt;bool&gt;</code> doesn't behave like a\n       normal vector anymore.  There have been recent journal articles which\n       discuss the problems (the ones by Herb Sutter in the May and\n       July/August 1999 issues of\n-      <EM>C++ Report</EM> cover it well).  Future revisions of the ISO C++\n-      Standard will change the requirement for <TT>vector&lt;bool&gt;</TT>\n-      specialization.  In the meantime, <TT>deque&lt;bool&gt;</TT> is\n+      <em>C++ Report</em> cover it well).  Future revisions of the ISO C++\n+      Standard will change the requirement for <code>vector&lt;bool&gt;</code>\n+      specialization.  In the meantime, <code>deque&lt;bool&gt;</code> is\n       recommended (although its behavior is sane, you probably will not get\n       the space savings, but the allocation scheme is different than that\n       of vector).\n-   </P>\n-   <P><B>Extremely weird solutions.&nbsp;&nbsp;</B>  If you have access to\n+   </p>\n+   <p><B>Extremely weird solutions.&nbsp;&nbsp;</B>  If you have access to\n       the compiler and linker at runtime, you can do something insane, like\n       figuring out just how many bits you need, then writing a temporary \n-      source code file.  That file contains an instantiation of <TT>bitset</TT>\n+      source code file.  That file contains an instantiation of <code>bitset</code>\n       for the required number of bits, inside some wrapper functions with\n       unchanging signatures.  Have your program then call the\n       compiler on that file using Position Independant Code, then open the\n       newly-created object file and load those wrapper functions.  You'll have\n-      an instantiation of <TT>bitset&lt;N&gt;</TT> for the exact <TT>N</TT>\n+      an instantiation of <code>bitset&lt;N&gt;</code> for the exact <code>N</code>\n       that you need at the time.  Don't forget to delete the temporary files.\n-      (Yes, this <EM>can</EM> be, and <EM>has been</EM>, done.)\n-   </P>\n+      (Yes, this <em>can</em> be, and <em>has been</em>, done.)\n+   </p>\n    <!-- I wonder if this next paragraph will get me in trouble... -->\n-   <P>This would be the approach of either a visionary genius or a raving\n+   <p>This would be the approach of either a visionary genius or a raving\n       lunatic, depending on your programming and management style.  Probably\n       the latter.\n-   </P>\n-   <P>Which of the above techniques you use, if any, are up to you and your\n+   </p>\n+   <p>Which of the above techniques you use, if any, are up to you and your\n       intended application.  Some time/space profiling is indicated if it\n       really matters (don't just guess).  And, if you manage to do anything\n       along the lines of the third category, the author would love to hear\n       from you...\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"3\">Containers and multithreading</A></H2>\n-   <P>This section will mention some of the problems in designing MT\n+<hr>\n+<h2><a name=\"3\">Containers and multithreading</a></h2>\n+   <p>This section will mention some of the problems in designing MT\n       programs that use Standard containers.  For information on other\n       aspects of multithreading (e.g., the library as a whole), see\n       the Received Wisdom on Chapter 17.  This section only applies\n       when gcc and libstdc++-v3 were configured with --enable-threads.\n-   </P>\n-   <P>Two excellent pages to read when working with templatized containers\n+   </p>\n+   <p>Two excellent pages to read when working with templatized containers\n       and threads are\n-      <A HREF=\"http://www.sgi.com/tech/stl/thread_safety.html\">SGI's\n-      http://www.sgi.com/tech/stl/thread_safety.html</A> and\n-      <A HREF=\"http://www.sgi.com/tech/stl/Allocators.html\">SGI's\n-      http://www.sgi.com/tech/stl/Allocators.html</A>.  The\n+      <a href=\"http://www.sgi.com/tech/stl/thread_safety.html\">SGI's\n+      http://www.sgi.com/tech/stl/thread_safety.html</a> and\n+      <a href=\"http://www.sgi.com/tech/stl/Allocators.html\">SGI's\n+      http://www.sgi.com/tech/stl/Allocators.html</a>.  The\n       libstdc++-v3 uses the same definition of thread safety\n       when discussing design.  A key point that beginners may miss is the\n       fourth major paragraph of the first page mentioned above\n       (&quot;For most clients,&quot;...), pointing\n       out that locking must nearly always be done outside the container,\n       by client code (that'd be you, not us *grin*).\n-      <EM>However, please take caution when considering the discussion\n+      <em>However, please take caution when considering the discussion\n       about the user-level configuration of the mutex lock\n       implementation inside the STL container-memory allocator on that\n       page.  For the sake of this discussion, libstdc++-v3 configures\n@@ -222,38 +222,38 @@ <H2><A NAME=\"3\">Containers and multithreading</A></H2>\n       but you may have two internal ABIs in play within the\n       application.  This might produce races, memory leaks and fatal\n       crashes.  In any multithreaded application using STL, this\n-      is the first thing to study well before blaming the allocator.</EM>\n-   </P>\n-   <P>You didn't read it, did you?  *sigh*  I'm serious, go read the\n+      is the first thing to study well before blaming the allocator.</em>\n+   </p>\n+   <p>You didn't read it, did you?  *sigh*  I'm serious, go read the\n       SGI page.  It's really good and doesn't take long, and makes most\n       of the points that would otherwise have to be made here (and does\n       a better job).\n-   </P>\n-   <P>That's much better.  Now, the issue of MT has been brought up on\n+   </p>\n+   <p>That's much better.  Now, the issue of MT has been brought up on\n       the libstdc++-v3 mailing list as well as the main GCC mailing list\n       several times.  The Chapter 17 HOWTO has some links into the mail\n       archives, so you can see what's been thrown around.  The usual\n       container (or pseudo-container, depending on how you look at it)\n-      that people have in mind is <TT>string</TT>, which is one of the\n+      that people have in mind is <code>string</code>, which is one of the\n       points where libstdc++ departs from the SGI STL.  As of the\n       2.90.8 snapshot, the libstdc++-v3 string class is safe for\n       certain kinds of multithreaded access.\n-   </P>\n-   <P>For implementing a container which does its own locking, it is\n+   </p>\n+   <p>For implementing a container which does its own locking, it is\n       trivial to (as SGI suggests) provide a wrapper class which obtains\n       the lock, performs the container operation, then releases the lock.\n-      This could be templatized <EM>to a certain extent</EM>, on the\n+      This could be templatized <em>to a certain extent</em>, on the\n       underlying container and/or a locking mechanism.  Trying to provide\n       a catch-all general template solution would probably be more trouble\n       than it's worth.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"4\">&quot;Hinting&quot; during insertion</A></H2>\n-   <P>Section [23.1.2], Table 69, of the C++ standard lists this function\n+<hr>\n+<h2><a name=\"4\">&quot;Hinting&quot; during insertion</a></h2>\n+   <p>Section [23.1.2], Table 69, of the C++ standard lists this function\n       for all of the associative containers (map, set, etc):\n       <PRE>\n       a.insert(p,t);</PRE>\n@@ -263,86 +263,86 @@ <H2><A NAME=\"4\">&quot;Hinting&quot; during insertion</A></H2>\n       specifies nothing more.  (LWG Issue #233, currently in review,\n       addresses this topic, but I will ignore it here because it is not yet\n       finalized.)\n-   </P>\n-   <P>Here we'll describe how the hinting works in the libstdc++-v3\n+   </p>\n+   <p>Here we'll describe how the hinting works in the libstdc++-v3\n       implementation, and what you need to do in order to take advantage of\n       it.  (Insertions can change from logarithmic complexity to amortized\n       constant time, if the hint is properly used.)  Also, since the current\n       implementation is based on the SGI STL one, these points may hold true\n       for other library implementations also, since the HP/SGI code is used\n       in a lot of places.\n-   </P>\n-   <P>In the following text, the phrases <EM>greater than</EM> and <EM>less\n-      than</EM> refer to the results of the strict weak ordering imposed on\n+   </p>\n+   <p>In the following text, the phrases <em>greater than</em> and <em>less\n+      than</em> refer to the results of the strict weak ordering imposed on\n       the container by its comparison object, which defaults to (basically)\n       &quot;&lt;&quot;.  Using those phrases is semantically sloppy, but I\n       didn't want to get bogged down in syntax.  I assume that if you are\n       intelligent enough to use your own comparison objects, you are also\n       intelligent enough to assign &quot;greater&quot; and &quot;lesser&quot;\n       their new meanings in the next paragraph.  *grin*\n-   </P>\n-   <P>If the <TT>hint</TT> parameter ('p' above) is equivalent to:\n-     <UL>\n-      <LI><TT>begin()</TT>, then the item being inserted should have a key\n+   </p>\n+   <p>If the <code>hint</code> parameter ('p' above) is equivalent to:\n+     <ul>\n+      <li><code>begin()</code>, then the item being inserted should have a key\n           less than all the other keys in the container.  The item will\n           be inserted at the beginning of the container, becoming the new\n-          entry at <TT>begin()</TT>.\n-      <LI><TT>end()</TT>, then the item being inserted should have a key\n+          entry at <code>begin()</code>.\n+      <li><code>end()</code>, then the item being inserted should have a key\n           greater than all the other keys in the container.  The item will\n           be inserted at the end of the container, becoming the new entry\n-          at <TT>end()</TT>.\n-      <LI>neither <TT>begin()</TT> nor <TT>end()</TT>, then:  Let <TT>h</TT>\n-          be the entry in the container pointed to by <TT>hint</TT>, that\n-          is, <TT>h = *hint</TT>.  Then the item being inserted should have\n-          a key less than that of <TT>h</TT>, and greater than that of the\n-          item preceeding <TT>h</TT>.  The new item will be inserted\n-          between <TT>h</TT> and <TT>h</TT>'s predecessor.\n-     </UL>\n-   </P>\n-   <P>For <TT>multimap</TT> and <TT>multiset</TT>, the restrictions are\n+          at <code>end()</code>.\n+      <li>neither <code>begin()</code> nor <code>end()</code>, then:  Let <code>h</code>\n+          be the entry in the container pointed to by <code>hint</code>, that\n+          is, <code>h = *hint</code>.  Then the item being inserted should have\n+          a key less than that of <code>h</code>, and greater than that of the\n+          item preceeding <code>h</code>.  The new item will be inserted\n+          between <code>h</code> and <code>h</code>'s predecessor.\n+     </ul>\n+   </p>\n+   <p>For <code>multimap</code> and <code>multiset</code>, the restrictions are\n       slightly looser:  &quot;greater than&quot; should be replaced by\n       &quot;not less than&quot; and &quot;less than&quot; should be replaced\n       by &quot;not greater than.&quot;  (Why not replace greater with\n       greater-than-or-equal-to?  You probably could in your head, but the\n       mathematicians will tell you that it isn't the same thing.)\n-   </P>\n-   <P>If the conditions are not met, then the hint is not used, and the\n-      insertion proceeds as if you had called <TT> a.insert(t) </TT>\n-      instead.  (<STRONG>Note </STRONG> that GCC releases prior to 3.0.2\n-      had a bug in the case with <TT>hint == begin()</TT> for the\n-      <TT>map</TT> and <TT>set</TT> classes.  You should not use a hint\n+   </p>\n+   <p>If the conditions are not met, then the hint is not used, and the\n+      insertion proceeds as if you had called <code> a.insert(t) </code>\n+      instead.  (<strong>Note </strong> that GCC releases prior to 3.0.2\n+      had a bug in the case with <code>hint == begin()</code> for the\n+      <code>map</code> and <code>set</code> classes.  You should not use a hint\n       argument in those releases.)\n-   </P>\n-   <P>This behavior goes well with other container's <TT>insert()</TT>\n+   </p>\n+   <p>This behavior goes well with other container's <code>insert()</code>\n       functions which take an iterator:  if used, the new item will be\n       inserted before the iterator passed as an argument, same as the other\n       containers.  The exception\n-      (in a sense) is with a hint of <TT>end()</TT>:  the new item will\n-      actually be inserted after <TT>end()</TT>, but it also becomes the\n-      new <TT>end()</TT>.\n-   </P>\n-   <P><STRONG>Note </STRONG> also that the hint in this implementation is a\n+      (in a sense) is with a hint of <code>end()</code>:  the new item will\n+      actually be inserted after <code>end()</code>, but it also becomes the\n+      new <code>end()</code>.\n+   </p>\n+   <p><strong>Note </strong> also that the hint in this implementation is a\n       one-shot.  The insertion-with-hint routines check the immediately\n       surrounding entries to ensure that the new item would in fact belong\n       there.  If the hint does not point to the correct place, then no\n       further local searching is done; the search begins from scratch in\n       logarithmic time.  (Further local searching would only increase the\n       time required when the hint is too far off.)\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"5\">Bitmasks and string arguments</A></H2>\n-   <P>Bitmasks do not take char* nor const char* arguments in their\n+<hr>\n+<h2><a name=\"5\">Bitmasks and string arguments</a></h2>\n+   <p>Bitmasks do not take char* nor const char* arguments in their\n       constructors.  This is something of an accident, but you can read\n       about the problem:  follow the library's &quot;Links&quot; from the\n       homepage, and from the C++ information &quot;defect reflector&quot;\n       link, select the library issues list.  Issue number 116 describes the\n       problem.\n-   </P>\n-   <P>For now you can simply make a temporary string object using the\n+   </p>\n+   <p>For now you can simply make a temporary string object using the\n       constructor expression:\n       <PRE>\n       std::bitset&lt;5&gt; b ( std::string(&quot;10110&quot;) );\n@@ -351,21 +351,21 @@ <H2><A NAME=\"5\">Bitmasks and string arguments</A></H2>\n       <PRE>\n       std::bitset&lt;5&gt; b ( &quot;10110&quot; );    // invalid\n       </PRE>\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n  \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.7 2001/08/24 20:34:34 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.8 2001/09/15 00:41:11 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "9cdabd7be3a397ab6512d1edb2b25de86b3529fb", "filename": "libstdc++-v3/docs/html/24_iterators/howto.html", "status": "modified", "additions": 88, "deletions": 88, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,52 +1,52 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 24.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Chapter 24</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.2 2001/04/03 00:26:56 pme Exp $ -->\n-</HEAD>\n-<BODY>\n-\n-<H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 24:  Iterators</A></H1>\n-\n-<P>Chapter 24 deals with the FORTRAN subroutines for automatically\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 24.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Chapter 24</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.3 2001/05/30 21:55:01 pme Exp $ -->\n+</head>\n+<body>\n+\n+<h1 CLASS=\"centered\"><a name=\"top\">Chapter 24:  Iterators</a></h1>\n+\n+<p>Chapter 24 deals with the FORTRAN subroutines for automatically\n    transforming lemmings into gold.\n-</P>\n+</p>\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#1\">They ain't pointers!</A>\n-   <LI><A HREF=\"#2\">It ends <EM>where?</EM></A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#1\">They ain't pointers!</a>\n+   <li><a href=\"#2\">It ends <em>where?</em></a>\n+</ul>\n \n-<HR>\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"1\">They ain't pointers!</A></H2>\n-   <P><A HREF=\"../faq/index.html#5_1\">FAQ 5.1</A> points out that iterators\n+<h2><a name=\"1\">They ain't pointers!</a></h2>\n+   <p><a href=\"../faq/index.html#5_1\">FAQ 5.1</a> points out that iterators\n       are not implemented as pointers.  They are a generalization of\n       pointers, but they are implemented in libstdc++-v3 as separate classes.\n-   </P>\n-   <P>Keeping that simple fact in mind as you design your code will\n+   </p>\n+   <p>Keeping that simple fact in mind as you design your code will\n       prevent a whole lot of difficult-to-understand bugs.\n-   </P>\n-   <P>You can think of it the other way 'round, even.  Since iterators\n-      are a generalization, that means that <EM>pointers</EM> are\n-      <EM>iterators</EM>, and that pointers can be used whenever an\n+   </p>\n+   <p>You can think of it the other way 'round, even.  Since iterators\n+      are a generalization, that means that <em>pointers</em> are\n+      <em>iterators</em>, and that pointers can be used whenever an\n       iterator would be.  All those functions in the Algorithms chapter\n       of the Standard will work just as well on plain arrays and their\n       pointers.\n-   </P>\n-   <P>That doesn't mean that when you pass in a pointer, it gets wrapped\n+   </p>\n+   <p>That doesn't mean that when you pass in a pointer, it gets wrapped\n       into some special delegating iterator-to-pointer class with a layer\n       of overhead.  (If you think that's the case anywhere, you don't\n       understand templates to begin with...)  Oh, no; if you pass\n@@ -55,53 +55,53 @@ <H2><A NAME=\"1\">They ain't pointers!</A></H2>\n       its operations, so the resulting code will be doing exactly the same\n       things as it would be doing if you had hand-coded it yourself (for\n       the 273rd time).\n-   </P>\n-   <P>How much overhead <EM>is</EM> there when using an interator class?\n+   </p>\n+   <p>How much overhead <em>is</em> there when using an interator class?\n       Very little.  Most of the layering classes contain nothing but\n       typedefs, and typedefs are &quot;meta-information&quot; that simply\n       tell the compiler some nicknames; they don't create code.  That\n       information gets passed down through inheritance, so while the\n       compiler has to do work looking up all the names, your runtime code\n       does not.  (This has been a prime concern from the beginning.)\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"2\">It ends <EM>where?</EM></A></H2>\n-   <P>This starts off sounding complicated, but is actually very easy,\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"2\">It ends <em>where?</em></a></h2>\n+   <p>This starts off sounding complicated, but is actually very easy,\n       especially towards the end.  Trust me.\n-  </P>\n-   <P>Beginners usually have a little trouble understand the whole\n+  </p>\n+   <p>Beginners usually have a little trouble understand the whole\n       'past-the-end' thing, until they remember their early algebra classes\n-      (see, they </EM>told</EM> you that stuff would come in handy!) and\n+      (see, they </em>told</em> you that stuff would come in handy!) and\n       the concept of half-open ranges.\n-   </P>\n-   <P>First, some history, and a reminder of some of the funkier rules in\n+   </p>\n+   <p>First, some history, and a reminder of some of the funkier rules in\n       C and C++ for builtin arrays.  The following rules have always been\n       true for both languages:\n-      <OL>\n-       <LI>You can point anywhere in the array, <EM>or to the first element\n-           past the end of the array</EM>.  A pointer that points to one\n+      <ol>\n+       <li>You can point anywhere in the array, <em>or to the first element\n+           past the end of the array</em>.  A pointer that points to one\n            past the end of the array is guaranteed to be as unique as a\n            pointer to somewhere inside the array, so that you can compare\n            such pointers safely.\n-       <LI>You can only dereference a pointer that points into an array.\n+       <li>You can only dereference a pointer that points into an array.\n            If your array pointer points outside the array -- even to just\n            one past the end -- and you dereference it, Bad Things happen.\n-       <LI>Strictly speaking, simply pointing anywhere else invokes\n+       <li>Strictly speaking, simply pointing anywhere else invokes\n            undefined behavior.  Most programs won't puke until such a\n            pointer is actually dereferenced, but the standards leave that\n            up to the platform.\n-      </OL>\n+      </ol>\n       The reason this past-the-end addressing was allowed is to make it\n       easy to write a loop to go over an entire array, e.g.,\n       while (*d++ = *s++);.\n-   </P>\n-   <P>So, when you think of two pointers delimiting an array, don't think\n-      of them as indexing 0 through n-1.  Think of them as <EM>boundary\n-      markers</EM>:\n+   </p>\n+   <p>So, when you think of two pointers delimiting an array, don't think\n+      of them as indexing 0 through n-1.  Think of them as <em>boundary\n+      markers</em>:\n       <PRE>\n \n    beginning            end\n@@ -125,60 +125,60 @@ <H2><A NAME=\"2\">It ends <EM>where?</EM></A></H2>\n       </PRE>\n       See?  Everything between the boundary markers is part of the array.\n       Simple.\n-   </P>\n-   <P>Now think back to your junior-high school algebra course, when you\n+   </p>\n+   <p>Now think back to your junior-high school algebra course, when you\n       were learning how to draw graphs.  Remember that a graph terminating\n       with a solid dot meant, &quot;Everything up through this point,&quot;\n       and a graph terminating with an open dot meant, &quot;Everything up\n       to, but not including, this point,&quot; respectively called closed\n       and open ranges?  Remember how closed ranges were written with\n-      brackets, <EM>[a,b]</EM>, and open ranges were written with parentheses,\n-      <EM>(a,b)</EM>?\n-   </P>\n-   <P>The boundary markers for arrays describe a <EM>half-open range</EM>,\n+      brackets, <em>[a,b]</em>, and open ranges were written with parentheses,\n+      <em>(a,b)</em>?\n+   </p>\n+   <p>The boundary markers for arrays describe a <em>half-open range</em>,\n       starting with (and including) the first element, and ending with (but\n-      not including) the last element:  <EM>[beginning,end)</EM>.  See, I\n+      not including) the last element:  <em>[beginning,end)</em>.  See, I\n       told you it would be simple in the end.\n-   </P>\n-   <P>Iterators, and everything working with iterators, follows this same\n-      time-honored tradition.  A container's <TT>begin()</TT> method returns\n-      an iterator referring to the first element, and its <TT>end()</TT>\n+   </p>\n+   <p>Iterators, and everything working with iterators, follows this same\n+      time-honored tradition.  A container's <code>begin()</code> method returns\n+      an iterator referring to the first element, and its <code>end()</code>\n       method returns a past-the-end iterator, which is guaranteed to be\n       unique and comparable against any other iterator pointing into the\n       middle of the container.\n-   </P>\n-   <P>Container constructors, container methods, and algorithms, all take\n+   </p>\n+   <p>Container constructors, container methods, and algorithms, all take\n       pairs of iterators describing a range of values on which to operate.\n       All of these ranges are half-open ranges, so you pass the beginning\n       iterator as the starting parameter, and the one-past-the-end iterator\n       as the finishing parameter.\n-   </P>\n-   <P>This generalizes very well.  You can operate on sub-ranges quite\n-      easily this way; functions accepting a <EM>[first,last)</EM> range\n+   </p>\n+   <p>This generalizes very well.  You can operate on sub-ranges quite\n+      easily this way; functions accepting a <em>[first,last)</em> range\n       don't know or care whether they are the boundaries of an entire {array,\n       sequence, container, whatever}, or whether they only enclose a few\n       elements from the center.  This approach also makes zero-length\n       sequences very simple to recognize:  if the two endpoints compare\n       equal, then the {array, sequence, container, whatever} is empty.\n-   </P>\n-   <P>Just don't dereference <TT>end()</TT>.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Just don't dereference <code>end()</code>.\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n \n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.2 2001/04/03 00:26:56 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.3 2001/05/30 21:55:01 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "277031b99d4fa6946d330237c8373f226c1b1be8", "filename": "libstdc++-v3/docs/html/25_algorithms/howto.html", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F25_algorithms%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,95 +1,95 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 25.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Chapter 25</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.3 2001/05/30 21:55:02 pme Exp $ -->\n-</HEAD>\n-<BODY>\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 25.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Chapter 25</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.4 2001/09/15 00:41:11 pme Exp $ -->\n+</head>\n+<body>\n \n-<H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 25:  Algorithms</A></H1>\n+<h1 CLASS=\"centered\"><a name=\"top\">Chapter 25:  Algorithms</a></h1>\n \n-<P>Chapter 25 deals with the generalized subroutines for automatically\n+<p>Chapter 25 deals with the generalized subroutines for automatically\n    transforming lemmings into gold.\n-</P>\n+</p>\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#1\">Prerequisites</A>\n-   <LI><A HREF=\"#2\">Topic</A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#1\">Prerequisites</a>\n+   <li><a href=\"#2\">Topic</a>\n+</ul>\n \n-<HR>\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"1\">Prerequisites</A></H2>\n-   <P>The neatest accomplishment of the algorithms chapter is that all the\n+<h2><a name=\"1\">Prerequisites</a></h2>\n+   <p>The neatest accomplishment of the algorithms chapter is that all the\n       work is done via iterators, not containers directly.  This means two\n       important things:\n-      <OL>\n-        <LI>Anything that behaves like an iterator can be used in one of\n+      <ol>\n+        <li>Anything that behaves like an iterator can be used in one of\n             these algorithms.  Raw pointers make great candidates, thus\n             built-in arrays are fine containers, as well as your own iterators.\n-        <LI>The algorithms do not (and cannot) affect the container as a\n+        <li>The algorithms do not (and cannot) affect the container as a\n             whole; only the things between the two iterator endpoints.  If\n             you pass a range of iterators only enclosing the middle third of\n             a container, then anything outside that range is inviolate.\n-      </OL>\n-   </P>\n-   <P>Even strings can be fed through the algorithms here, although the\n+      </ol>\n+   </p>\n+   <p>Even strings can be fed through the algorithms here, although the\n       string class has specialized versions of many of these functions (for\n-      example, <TT>string::find()</TT>).  Most of the examples on this\n+      example, <code>string::find()</code>).  Most of the examples on this\n       page will use simple arrays of integers as a playground for\n       algorithms, just to keep things simple.\n-      <A NAME=\"Nsize\">The use of <B>N</B></A> as a size in the examples is\n+      <a name=\"Nsize\">The use of <B>N</B></a> as a size in the examples is\n       to keep things easy to read but probably won't be legal code.  You can\n       use wrappers such as those described in the\n-      <A HREF=\"../23_containers/howto.html\">containers chapter</A> to keep\n+      <a href=\"../23_containers/howto.html\">containers chapter</a> to keep\n       real code readable.\n-   </P>\n-   <P>The single thing that trips people up the most is the definition of \n-      <EM>range</EM> used with iterators; the famous\n+   </p>\n+   <p>The single thing that trips people up the most is the definition of \n+      <em>range</em> used with iterators; the famous\n       &quot;past-the-end&quot; rule that everybody loves to hate.  The\n-      <A HREF=\"../24_iterators/howto.html#2\">iterators chapter</A> of this\n+      <a href=\"../24_iterators/howto.html#2\">iterators chapter</a> of this\n       document has a complete explanation of this simple rule that seems to\n-      cause so much confusion.  Once you get <EM>range</EM> into your head\n+      cause so much confusion.  Once you get <em>range</em> into your head\n       (it's not that hard, honest!), then the algorithms are a cakewalk.\n-   </P>\n-   <P>\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"2\">Topic</A></H2>\n-   <P>Blah.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+<hr>\n+<h2><a name=\"2\">Topic</a></h2>\n+   <p>Blah.\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n \n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.3 2001/05/30 21:55:02 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.4 2001/09/15 00:41:11 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "04562b9cedf5348ed4658ae68ab4fb715fae1d2a", "filename": "libstdc++-v3/docs/html/26_numerics/howto.html", "status": "modified", "additions": 107, "deletions": 107, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F26_numerics%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,108 +1,108 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 26.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Chapter 26</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.2 2001/04/03 00:26:56 pme Exp $ -->\n-</HEAD>\n-<BODY>\n-\n-<H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 26:  Numerics</A></H1>\n-\n-<P>Chapter 26 deals with building block abstractions to aid in\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 26.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Chapter 26</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.3 2001/05/30 21:55:03 pme Exp $ -->\n+</head>\n+<body>\n+\n+<h1 CLASS=\"centered\"><a name=\"top\">Chapter 26:  Numerics</a></h1>\n+\n+<p>Chapter 26 deals with building block abstractions to aid in\n    numerical computing:\n-   <UL>\n-     <LI>Template data structures such as <TT>valarray&lt;&gt;</TT>\n-         and <TT>complex&lt;&gt;</TT>.\n-     <LI>Template numerical functions such as <TT>accumulate</TT>;\n-         <TT>inner_product</TT>; <TT>partial_sum</TT> and\n-         <TT>adjacent_difference</TT>.\n-   </UL>\n+   <ul>\n+     <li>Template data structures such as <code>valarray&lt;&gt;</code>\n+         and <code>complex&lt;&gt;</code>.\n+     <li>Template numerical functions such as <code>accumulate</code>;\n+         <code>inner_product</code>; <code>partial_sum</code> and\n+         <code>adjacent_difference</code>.\n+   </ul>\n    All of the Standard C math functions are of course included in C++,\n-   and overloaded versions for <TT>long</TT>, <TT>float</TT>, and\n-   <TT>long double</TT> have been added for all of them.\n-</P>\n+   and overloaded versions for <code>long</code>, <code>float</code>, and\n+   <code>long double</code> have been added for all of them.\n+</p>\n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#1\">Complex Number Processing</A>\n-   <LI><A HREF=\"#2\">Array Processing</A>\n-   <LI><A HREF=\"#3\">Numerical Functions</A>\n-   <LI><A HREF=\"#4\">C99</A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#1\">Complex Number Processing</a>\n+   <li><a href=\"#2\">Array Processing</a>\n+   <li><a href=\"#3\">Numerical Functions</a>\n+   <li><a href=\"#4\">C99</a>\n+</ul>\n \n-<HR>\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"1\">Complex Number Processing</A></H2>\n-   <P>Using <TT>complex&lt;&gt;</TT> becomes even more comple- er, sorry,\n-      <EM>complicated</EM>, with the not-quite-gratuitously-incompatible\n+<h2><a name=\"1\">Complex Number Processing</a></h2>\n+   <p>Using <code>complex&lt;&gt;</code> becomes even more comple- er, sorry,\n+      <em>complicated</em>, with the not-quite-gratuitously-incompatible\n       addition of complex types to the C language.  David Tribble has\n       compiled a list of C++98 and C99 conflict points; his description of\n       C's new type versus those of C++ and how to get them playing together\n       nicely is\n-<A HREF=\"http://home.flash.net/~dtribble/text/cdiffs.htm#C99.complex\">here</A>.\n-   </P>\n-   <P><TT>complex&lt;&gt;</TT> is intended to be instantiated with a\n+<a href=\"http://home.flash.net/~dtribble/text/cdiffs.htm#C99.complex\">here</a>.\n+   </p>\n+   <p><code>complex&lt;&gt;</code> is intended to be instantiated with a\n       floating-point type.  As long as you meet that and some other basic\n       requirements, then the resulting instantiation has all of the usual\n-      math operators defined, as well as definitions of <TT>op&lt;&lt;</TT>\n-      and <TT>op&gt;&gt;</TT> that work with iostreams: <TT>op&lt;&lt;</TT>\n-      prints <TT>(u,v)</TT> and <TT>op&gt;&gt;</TT> can read <TT>u</TT>,\n-      <TT>(u)</TT>, and <TT>(u,v)</TT>.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"2\">Array Processing</A></H2>\n-   <P>One of the major reasons why FORTRAN can chew through numbers so well\n+      math operators defined, as well as definitions of <code>op&lt;&lt;</code>\n+      and <code>op&gt;&gt;</code> that work with iostreams: <code>op&lt;&lt;</code>\n+      prints <code>(u,v)</code> and <code>op&gt;&gt;</code> can read <code>u</code>,\n+      <code>(u)</code>, and <code>(u,v)</code>.\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"2\">Array Processing</a></h2>\n+   <p>One of the major reasons why FORTRAN can chew through numbers so well\n       is that it is defined to be free of pointer aliasing, an assumption\n       that C89 is not allowed to make, and neither is C++.  C99 adds a new\n-      keyword, <TT>restrict</TT>, to apply to individual pointers.  The C++\n+      keyword, <code>restrict</code>, to apply to individual pointers.  The C++\n       solution is contained in the library rather than the language\n       (although many vendors can be expected to add this to their compilers\n       as an extension).\n-   </P>\n-   <P>That library solution is a set of two classes, five template classes,\n+   </p>\n+   <p>That library solution is a set of two classes, five template classes,\n       and &quot;a whole bunch&quot; of functions.  The classes are required\n       to be free of pointer aliasing, so compilers can optimize the\n       daylights out of them the same way that they have been for FORTRAN.\n-      They are collectively called <TT>valarray</TT>, although strictly\n+      They are collectively called <code>valarray</code>, although strictly\n       speaking this is only one of the five template classes, and they are\n       designed to be familiar to people who have worked with the BLAS\n       libraries before.\n-   </P>\n-   <P>Some more stuff should go here once somebody has time to write it.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"3\">Numerical Functions</A></H2>\n-   <P>There are four generalized functions in the &lt;numeric&gt; header\n+   </p>\n+   <p>Some more stuff should go here once somebody has time to write it.\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"3\">Numerical Functions</a></h2>\n+   <p>There are four generalized functions in the &lt;numeric&gt; header\n       that follow the same conventions as those in &lt;algorithm&gt;.  Each\n       of them is overloaded:  one signature for common default operations,\n       and a second for fully general operations.  Their names are\n       self-explanatory to anyone who works with numerics on a regular basis:\n-      <UL>\n-        <LI><TT>accumulate</TT>\n-        <LI><TT>inner_product</TT>\n-        <LI><TT>partial_sum</TT>\n-        <LI><TT>adjacent_difference</TT>\n-      </UL>\n-   </P>\n-   <P>Here is a simple example of the two forms of <TT>accumulate</TT>.\n+      <ul>\n+        <li><code>accumulate</code>\n+        <li><code>inner_product</code>\n+        <li><code>partial_sum</code>\n+        <li><code>adjacent_difference</code>\n+      </ul>\n+   </p>\n+   <p>Here is a simple example of the two forms of <code>accumulate</code>.\n       <PRE>\n    int   ar[50];\n    int   someval = somefunction();\n@@ -114,50 +114,50 @@ <H2><A NAME=\"3\">Numerical Functions</A></H2>\n    int  product   = std::accumulate(ar,ar+50,1,std::multiplies&lt;int&gt;());\n       </PRE>\n       The first call adds all the members of the array, using zero as an\n-      initial value for <TT>sum</TT>.  The second does the same, but uses\n-      <TT>someval</TT> as the starting value (thus, <TT>sum_stuff == sum +\n-      someval</TT>).  The final call uses the second of the two signatures,\n+      initial value for <code>sum</code>.  The second does the same, but uses\n+      <code>someval</code> as the starting value (thus, <code>sum_stuff == sum +\n+      someval</code>).  The final call uses the second of the two signatures,\n       and multiplies all the members of the array; here we must obviously\n       use 1 as a starting value instead of 0.\n-   </P>\n-   <P>The other three functions have similar dual-signature forms.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"4\">C99</A></H2>\n-   <P>In addition to the other topics on this page, we'll note here some\n+   </p>\n+   <p>The other three functions have similar dual-signature forms.\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"4\">C99</a></h2>\n+   <p>In addition to the other topics on this page, we'll note here some\n       of the C99 features that appear in libstdc++-v3.\n-   </P>\n-   <P>The C99 features depend on the <TT>--enable-c99</TT> configure flag.\n+   </p>\n+   <p>The C99 features depend on the <code>--enable-c99</code> configure flag.\n       This flag is already on by default, but it can be disabled by the\n       user.  Also, the configuration machinery will disable it if the\n       neccessary support for C99 (e.g., header files) cannot be found.\n-   </P>\n-   <P>As of GCC 3.0, C99 support includes classification functions\n-      such as <TT>isnormal</TT>, <TT>isgreater</TT>, <TT>isnan</TT>, etc.\n-      The functions used for 'long long' support such as <TT>strtoll</TT>\n-      are supported, as is the <TT>lldiv_t</TT> typedef.  Also supported\n+   </p>\n+   <p>As of GCC 3.0, C99 support includes classification functions\n+      such as <code>isnormal</code>, <code>isgreater</code>, <code>isnan</code>, etc.\n+      The functions used for 'long long' support such as <code>strtoll</code>\n+      are supported, as is the <code>lldiv_t</code> typedef.  Also supported\n       are the wide character functions using 'long long', like\n-      <TT>wcstoll</TT>.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+      <code>wcstoll</code>.\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.2 2001/04/03 00:26:56 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.3 2001/05/30 21:55:03 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "9edab19b849f431a09614dcb2f1d72a447ccfade", "filename": "libstdc++-v3/docs/html/27_io/howto.html", "status": "modified", "additions": 192, "deletions": 192, "changes": 384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,52 +1,52 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 27.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Chapter 27</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.7 2001/07/09 21:47:36 pme Exp $ -->\n-</HEAD>\n-<BODY>\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"HOWTO for the libstdc++ chapter 27.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Chapter 27</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.8 2001/07/18 21:37:06 pme Exp $ -->\n+</head>\n+<body>\n \n-<H1 CLASS=\"centered\"><A NAME=\"top\">Chapter 27:  Input/Output</A></H1>\n+<h1 CLASS=\"centered\"><a name=\"top\">Chapter 27:  Input/Output</a></h1>\n \n-<P>Chapter 27 deals with iostreams and all their subcomponents\n-   and extensions.  All <EM>kinds</EM> of fun stuff.\n-</P>\n+<p>Chapter 27 deals with iostreams and all their subcomponents\n+   and extensions.  All <em>kinds</em> of fun stuff.\n+</p>\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#1\">Copying a file</A>\n-   <LI><A HREF=\"#2\">The buffering is screwing up my program!</A>\n-   <LI><A HREF=\"#3\">Binary I/O</A>\n-   <LI><A HREF=\"#5\">What is this &lt;sstream&gt;/stringstreams thing?</A>\n-   <LI><A HREF=\"#6\">Deriving a stream buffer</A>\n-   <LI><A HREF=\"#7\">More on binary I/O</A>\n-   <LI><A HREF=\"#8\">Pathetic performance?  Ditch C.</A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#1\">Copying a file</a>\n+   <li><a href=\"#2\">The buffering is screwing up my program!</a>\n+   <li><a href=\"#3\">Binary I/O</a>\n+   <li><a href=\"#5\">What is this &lt;sstream&gt;/stringstreams thing?</a>\n+   <li><a href=\"#6\">Deriving a stream buffer</a>\n+   <li><a href=\"#7\">More on binary I/O</a>\n+   <li><a href=\"#8\">Pathetic performance?  Ditch C.</a>\n+</ul>\n \n-<HR>\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"1\">Copying a file</A></H2>\n-   <P>So you want to copy a file quickly and easily, and most important,\n+<h2><a name=\"1\">Copying a file</a></h2>\n+   <p>So you want to copy a file quickly and easily, and most important,\n       completely portably.  And since this is C++, you have an open\n       ifstream (call it IN) and an open ofstream (call it OUT):\n       <PRE>\n    #include &lt;fstream&gt;\n \n    std::ifstream  IN (\"input_file\");\n    std::ofstream  OUT (\"output_file\"); </PRE>\n-   </P>\n-   <P>Here's the easiest way to get it completely wrong:\n+   </p>\n+   <p>Here's the easiest way to get it completely wrong:\n       <PRE>\n    OUT &lt;&lt; IN;</PRE>\n       For those of you who don't already know why this doesn't work\n@@ -57,29 +57,29 @@ <H2><A NAME=\"1\">Copying a file</A></H2>\n    The quick brown fox jumped over the lazy dog.</PRE>\n       surrounded by blank lines.  Code it up and try it.  The contents\n       of &quot;output_file&quot; may surprise you.\n-   </P>\n-   <P>Seriously, go do it.  Get surprised, then come back.  It's worth it.\n-   </P>\n+   </p>\n+   <p>Seriously, go do it.  Get surprised, then come back.  It's worth it.\n+   </p>\n    <HR WIDTH=\"60%\">\n-   <P>The thing to remember is that the <TT>basic_[io]stream</TT> classes\n+   <p>The thing to remember is that the <code>basic_[io]stream</code> classes\n       handle formatting, nothing else.  In particular, they break up on\n       whitespace.  The actual reading, writing, and storing of data is\n-      handled by the <TT>basic_streambuf</TT> family.  Fortunately, the\n-      <TT>operator&lt;&lt;</TT> is overloaded to take an ostream and\n+      handled by the <code>basic_streambuf</code> family.  Fortunately, the\n+      <code>operator&lt;&lt;</code> is overloaded to take an ostream and\n       a pointer-to-streambuf, in order to help with just this kind of\n       &quot;dump the data verbatim&quot; situation.\n-   </P>\n-   <P>Why a <EM>pointer</EM> to streambuf and not just a streambuf?  Well,\n+   </p>\n+   <p>Why a <em>pointer</em> to streambuf and not just a streambuf?  Well,\n       the [io]streams hold pointers (or references, depending on the\n       implementation) to their buffers, not the actual\n       buffers.  This allows polymorphic behavior on the part of the buffers\n       as well as the streams themselves.  The pointer is easily retrieved\n-      using the <TT>rdbuf()</TT> member function.  Therefore, the easiest\n+      using the <code>rdbuf()</code> member function.  Therefore, the easiest\n       way to copy the file is:\n       <PRE>\n    OUT &lt;&lt; IN.rdbuf();</PRE>\n-   </P>\n-   <P>So what <EM>was</EM> happening with OUT&lt;&lt;IN?  Undefined\n+   </p>\n+   <p>So what <em>was</em> happening with OUT&lt;&lt;IN?  Undefined\n       behavior, since that particular &lt;&lt; isn't defined by the Standard.\n       I have seen instances where it is implemented, but the character\n       extraction process removes all the whitespace, leaving you with no\n@@ -88,35 +88,35 @@ <H2><A NAME=\"1\">Copying a file</A></H2>\n       member pointers) sometimes gets converted to a void*, and the output\n       file then contains a perfect text representation of a hexidecimal\n       address (quite a big surprise).  Others don't compile at all.\n-   </P>\n-   <P>Also note that none of this is specific to o<B>*f*</B>streams. \n+   </p>\n+   <p>Also note that none of this is specific to o<B>*f*</B>streams. \n       The operators shown above are all defined in the parent \n       basic_ostream class and are therefore available with all possible\n       descendents.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"2\">The buffering is screwing up my program!</A></H2>\n+<hr>\n+<h2><a name=\"2\">The buffering is screwing up my program!</a></h2>\n <!--\n   This is not written very well.  I need to redo this section.\n -->\n-   <P>First, are you sure that you understand buffering?  Particularly\n+   <p>First, are you sure that you understand buffering?  Particularly\n       the fact that C++ may not, in fact, have anything to do with it?\n-   </P>\n-   <P>The rules for buffering can be a little odd, but they aren't any\n+   </p>\n+   <p>The rules for buffering can be a little odd, but they aren't any\n       different from those of C.  (Maybe that's why they can be a bit\n       odd.)  Many people think that writing a newline to an output\n       stream automatically flushes the output buffer.  This is true only\n       when the output stream is, in fact, a terminal and not a file\n-      or some other device -- and <EM>that</EM> may not even be true\n+      or some other device -- and <em>that</em> may not even be true\n       since C++ says nothing about files nor terminals.  All of that is\n       system-dependant.  (The &quot;newline-buffer-flushing only occuring\n       on terminals&quot; thing is mostly true on Unix systems, though.)\n-   </P>\n-   <P>Some people also believe that sending <TT>endl</TT> down an\n+   </p>\n+   <p>Some people also believe that sending <code>endl</code> down an\n       output stream only writes a newline.  This is incorrect; after a\n       newline is written, the buffer is also flushed.  Perhaps this\n       is the effect you want when writing to a screen -- get the text\n@@ -136,20 +136,20 @@ <H2><A NAME=\"2\">The buffering is screwing up my program!</A></H2>\n       I have also joined the output statements into a single statement.\n       You could make the code prettier by moving the single newline to\n       the start of the quoted text on the thing line, for example.\n-   </P>\n-   <P>If you do need to flush the buffer above, you can send an\n-      <TT>endl</TT> if you also need a newline, or just flush the buffer\n+   </p>\n+   <p>If you do need to flush the buffer above, you can send an\n+      <code>endl</code> if you also need a newline, or just flush the buffer\n       yourself:\n       <PRE>\n    output &lt;&lt; ...... &lt;&lt; flush;    // can use std::flush manipulator\n    output.flush();               // or call a member fn </PRE>\n-   </P>\n-   <P>On the other hand, there are times when writing to a file should\n+   </p>\n+   <p>On the other hand, there are times when writing to a file should\n       be like writing to standard error; no buffering should be done \n       because the data needs to appear quickly (a prime example is a\n       log file for security-related information).  The way to do this is\n-      just to turn off the buffering <EM>before any I/O operations at\n-      all</EM> have been done, i.e., as soon as possible after opening:\n+      just to turn off the buffering <em>before any I/O operations at\n+      all</em> have been done, i.e., as soon as possible after opening:\n       <PRE>\n    std::ofstream    os (&quot;/foo/bar/baz&quot;);\n    std::ifstream    is (&quot;/qux/quux/quuux&quot;);\n@@ -160,48 +160,48 @@ <H2><A NAME=\"2\">The buffering is screwing up my program!</A></H2>\n    ...\n    os &lt;&lt; &quot;this data is written immediately\\n&quot;;\n    is &gt;&gt; i;   // and this will probably cause a disk read </PRE>\n-   </P>\n-   <P>Since all aspects of buffering are handled by a streambuf-derived\n-      member, it is necessary to get at that member with <TT>rdbuf()</TT>.\n-      Then the public version of <TT>setbuf</TT> can be called.  The \n+   </p>\n+   <p>Since all aspects of buffering are handled by a streambuf-derived\n+      member, it is necessary to get at that member with <code>rdbuf()</code>.\n+      Then the public version of <code>setbuf</code> can be called.  The \n       arguments are the same as those for the Standard C I/O Library\n       function (a buffer area followed by its size).\n-   </P>\n-   <P>A great deal of this is implementation-dependant.  For example,\n-      <TT>streambuf</TT> does not specify any actions for its own \n-      <TT>setbuf()</TT>-ish functions; the classes derived from\n-      <TT>streambuf</TT> each define behavior that &quot;makes \n+   </p>\n+   <p>A great deal of this is implementation-dependant.  For example,\n+      <code>streambuf</code> does not specify any actions for its own \n+      <code>setbuf()</code>-ish functions; the classes derived from\n+      <code>streambuf</code> each define behavior that &quot;makes \n       sense&quot; for that class:  an argument of (0,0) turns off\n-      buffering for <TT>filebuf</TT> but has undefined behavior for\n-      its sibling <TT>stringbuf</TT>, and specifying anything other\n+      buffering for <code>filebuf</code> but has undefined behavior for\n+      its sibling <code>stringbuf</code>, and specifying anything other\n       than (0,0) has varying effects.  Other user-defined class derived\n       from streambuf can do whatever they want.\n-   </P>\n-   <P>A last reminder:  there are usually more buffers involved than\n+   </p>\n+   <p>A last reminder:  there are usually more buffers involved than\n       just those at the language/library level.  Kernel buffers, disk\n       buffers, and the like will also have an effect.  Inspecting and\n       changing those are system-dependant.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"3\">Binary I/O</A></H2>\n-   <P>The first and most important thing to remember about binary I/O is\n-      that opening a file with <TT>ios::binary</TT> is not, repeat\n-      <EM>not</EM>, the only thing you have to do.  It is not a silver\n-      bullet, and will not allow you to use the <TT>&lt;&lt;/&gt;&gt;</TT>\n+<hr>\n+<h2><a name=\"3\">Binary I/O</a></h2>\n+   <p>The first and most important thing to remember about binary I/O is\n+      that opening a file with <code>ios::binary</code> is not, repeat\n+      <em>not</em>, the only thing you have to do.  It is not a silver\n+      bullet, and will not allow you to use the <code>&lt;&lt;/&gt;&gt;</code>\n       operators of the normal fstreams to do binary I/O.\n-   </P>\n-   <P>Sorry.  Them's the breaks.\n-   </P>\n-   <P>This isn't going to try and be a complete tutorial on reading and\n+   </p>\n+   <p>Sorry.  Them's the breaks.\n+   </p>\n+   <p>This isn't going to try and be a complete tutorial on reading and\n       writing binary files (because &quot;binary&quot;\n-      <A HREF=\"#7\">covers a lot of ground)</A>, but we will try and clear\n+      <a href=\"#7\">covers a lot of ground)</a>, but we will try and clear\n       up a couple of misconceptions and common errors.\n-   </P>\n-   <P>First, <TT>ios::binary</TT> has exactly one defined effect, no more\n+   </p>\n+   <p>First, <code>ios::binary</code> has exactly one defined effect, no more\n       and no less.  Normal text mode has to be concerned with the newline\n       characters, and the runtime system will translate between (for\n       example) '\\n' and the appropriate end-of-line sequence (LF on Unix,\n@@ -213,125 +213,125 @@ <H2><A NAME=\"3\">Binary I/O</A></H2>\n       if it is doing so in your program then you've discovered a bug in\n       your vendor's compiler (or some other part of the C++ implementation,\n       possibly the runtime system).\n-   </P>\n-   <P>Second, using <TT>&lt;&lt;</TT> to write and <TT>&gt;&gt;</TT> to\n+   </p>\n+   <p>Second, using <code>&lt;&lt;</code> to write and <code>&gt;&gt;</code> to\n       read isn't going to work with the standard file stream classes, even\n-      if you use <TT>skipws</TT> during reading.  Why not?  Because \n-      ifstream and ofstream exist for the purpose of <EM>formatting</EM>,\n+      if you use <code>skipws</code> during reading.  Why not?  Because \n+      ifstream and ofstream exist for the purpose of <em>formatting</em>,\n       not reading and writing.  Their job is to interpret the data into\n       text characters, and that's exactly what you don't want to happen\n       during binary I/O.\n-   </P>\n-   <P>Third, using the <TT>get()</TT> and <TT>put()/write()</TT> member\n+   </p>\n+   <p>Third, using the <code>get()</code> and <code>put()/write()</code> member\n       functions still aren't guaranteed to help you.  These are\n       &quot;unformatted&quot; I/O functions, but still character-based.\n       (This may or may not be what you want, see below.)\n-   </P>\n-   <P>Notice how all the problems here are due to the inappropriate use\n-      of <EM>formatting</EM> functions and classes to perform something\n-      which <EM>requires</EM> that formatting not be done?  There are a\n+   </p>\n+   <p>Notice how all the problems here are due to the inappropriate use\n+      of <em>formatting</em> functions and classes to perform something\n+      which <em>requires</em> that formatting not be done?  There are a\n       seemingly infinite number of solutions, and a few are listed here:\n-      <UL>\n-        <LI>&quot;Derive your own fstream-type classes and write your own\n+      <ul>\n+        <li>&quot;Derive your own fstream-type classes and write your own\n             &lt;&lt;/&gt;&gt; operators to do binary I/O on whatever data\n             types you're using.&quot;  This is a Bad Thing, because while\n             the compiler would probably be just fine with it, other humans\n             are going to be confused.  The overloaded bitshift operators\n             have a well-defined meaning (formatting), and this breaks it.\n-        <LI>&quot;Build the file structure in memory, then <TT>mmap()</TT>\n+        <li>&quot;Build the file structure in memory, then <code>mmap()</code>\n             the file and copy the structure.&quot;  Well, this is easy to\n             make work, and easy to break, and is pretty equivalent to\n-            using <TT>::read()</TT> and <TT>::write()</TT> directly, and\n+            using <code>::read()</code> and <code>::write()</code> directly, and\n             makes no use of the iostream library at all...\n-        <LI>&quot;Use streambufs, that's what they're there for.&quot;\n+        <li>&quot;Use streambufs, that's what they're there for.&quot;\n             While not trivial for the beginner, this is the best of all\n             solutions.  The streambuf/filebuf layer is the layer that is\n             responsible for actual I/O.  If you want to use the C++\n             library for binary I/O, this is where you start.\n-      </UL>\n-   </P>\n-   <P>How to go about using streambufs is a bit beyond the scope of this\n+      </ul>\n+   </p>\n+   <p>How to go about using streambufs is a bit beyond the scope of this\n       document (at least for now), but while streambufs go a long way,\n       they still leave a couple of things up to you, the programmer.\n       As an example, byte ordering is completely between you and the\n       operating system, and you have to handle it yourself.\n-   </P>\n-   <P>Deriving a streambuf or filebuf\n+   </p>\n+   <p>Deriving a streambuf or filebuf\n       class from the standard ones, one that is specific to your data\n       types (or an abstraction thereof) is probably a good idea, and\n       lots of examples exist in journals and on Usenet.  Using the\n       standard filebufs directly (either by declaring your own or by\n-      using the pointer returned from an fstream's <TT>rdbuf()</TT>)\n+      using the pointer returned from an fstream's <code>rdbuf()</code>)\n       is certainly feasible as well.\n-   </P>\n-   <P>One area that causes problems is trying to do bit-by-bit operations\n+   </p>\n+   <p>One area that causes problems is trying to do bit-by-bit operations\n       with filebufs.  C++ is no different from C in this respect:  I/O\n       must be done at the byte level.  If you're trying to read or write\n       a few bits at a time, you're going about it the wrong way.  You\n       must read/write an integral number of bytes and then process the\n       bytes.  (For example, the streambuf functions take and return\n-      variables of type <TT>int_type</TT>.)\n-   </P>\n-   <P>Another area of problems is opening text files in binary mode.\n+      variables of type <code>int_type</code>.)\n+   </p>\n+   <p>Another area of problems is opening text files in binary mode.\n       Generally, binary mode is intended for binary files, and opening\n       text files in binary mode means that you now have to deal with all of \n       those end-of-line and end-of-file problems that we mentioned before.\n       An instructive thread from comp.lang.c++.moderated delved off into\n       this topic starting more or less at\n-      <A HREF=\"http://www.deja.com/getdoc.xp?AN=436187505\">this</A>\n+      <a href=\"http://www.deja.com/getdoc.xp?AN=436187505\">this</a>\n       article and continuing to the end of the thread.  (You'll have to\n       sort through some flames every couple of paragraphs, but the points\n       made are good ones.)\n-   </P>\n+   </p>\n  \n-<HR>\n-<H2><A NAME=\"5\">What is this &lt;sstream&gt;/stringstreams thing?</A></H2>\n-   <P>Stringstreams (defined in the header <TT>&lt;sstream&gt;</TT>)\n+<hr>\n+<h2><a name=\"5\">What is this &lt;sstream&gt;/stringstreams thing?</a></h2>\n+   <p>Stringstreams (defined in the header <code>&lt;sstream&gt;</code>)\n       are in this author's opinion one of the coolest things since\n       sliced time.  An example of their use is in the Received Wisdom\n       section for Chapter 21 (Strings),\n-      <A HREF=\"../21_strings/howto.html#1.1internal\"> describing how to\n-      format strings</A>.\n-   </P>\n-   <P>The quick definition is:  they are siblings of ifstream and ofstream,\n-      and they do for <TT>std::string</TT> what their siblings do for\n-      files.  All that work you put into writing <TT>&lt;&lt;</TT> and\n-      <TT>&gt;&gt;</TT> functions for your classes now pays off\n-      <EM>again!</EM>  Need to format a string before passing the string\n-      to a function?  Send your stuff via <TT>&lt;&lt;</TT> to an\n+      <a href=\"../21_strings/howto.html#1.1internal\"> describing how to\n+      format strings</a>.\n+   </p>\n+   <p>The quick definition is:  they are siblings of ifstream and ofstream,\n+      and they do for <code>std::string</code> what their siblings do for\n+      files.  All that work you put into writing <code>&lt;&lt;</code> and\n+      <code>&gt;&gt;</code> functions for your classes now pays off\n+      <em>again!</em>  Need to format a string before passing the string\n+      to a function?  Send your stuff via <code>&lt;&lt;</code> to an\n       ostringstream.  You've read a string as input and need to parse it?\n       Initialize an istringstream with that string, and then pull pieces\n-      out of it with <TT>&gt;&gt;</TT>.  Have a stringstream and need to\n-      get a copy of the string inside?  Just call the <TT>str()</TT>\n+      out of it with <code>&gt;&gt;</code>.  Have a stringstream and need to\n+      get a copy of the string inside?  Just call the <code>str()</code>\n       member function.\n-   </P>\n-   <P>This only works if you've written your\n-      <TT>&lt;&lt;</TT>/<TT>&gt;&gt;</TT> functions correctly, though,\n+   </p>\n+   <p>This only works if you've written your\n+      <code>&lt;&lt;</code>/<code>&gt;&gt;</code> functions correctly, though,\n       and correctly means that they take istreams and ostreams as\n       parameters, not i<B>f</B>streams and o<B>f</B>streams.  If they\n       take the latter, then your I/O operators will work fine with\n       file streams, but with nothing else -- including stringstreams.\n-   </P>\n-   <P>If you are a user of the strstream classes, you need to update\n-      your code.  You don't have to explicitly append <TT>ends</TT> to\n+   </p>\n+   <p>If you are a user of the strstream classes, you need to update\n+      your code.  You don't have to explicitly append <code>ends</code> to\n       terminate the C-style character array, you don't have to mess with\n       &quot;freezing&quot; functions, and you don't have to manage the\n       memory yourself.  The strstreams have been officially deprecated,\n       which means that 1) future revisions of the C++ Standard won't\n       support them, and 2) if you use them, people will laugh at you.\n-   </P>\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"6\">Deriving a stream buffer</A></H2>\n-   <P>Creating your own stream buffers for I/O can be remarkably easy.\n+<hr>\n+<h2><a name=\"6\">Deriving a stream buffer</a></h2>\n+   <p>Creating your own stream buffers for I/O can be remarkably easy.\n       If you are interested in doing so, we highly recommend two very\n-      excellent books:  <EM>Standard C++ IOStreams and Locales</EM> by\n+      excellent books:  <em>Standard C++ IOStreams and Locales</em> by\n       Langer and Kreft, ISBN 0-201-18395-1, and\n-      <A HREF=\"http://www.josuttis.com/libbook/\">The C++ Standard Library</A>\n+      <a href=\"http://www.josuttis.com/libbook/\">The C++ Standard Library</a>\n       by Nicolai Josuttis, ISBN 0-201-37926-0.  Both are published by\n       Addison-Wesley, who isn't paying us a cent for saying that, honest.\n-   </P>\n-   <P>Here is a simple example, io/outbuf1, from the Josuttis text.  It\n+   </p>\n+   <p>Here is a simple example, io/outbuf1, from the Josuttis text.  It\n       transforms everything sent through it to uppercase.  This version\n       assumes many things about the nature of the character type being\n       used (for more information, read the books or the newsgroups):\n@@ -374,39 +374,39 @@ <H2><A NAME=\"6\">Deriving a stream buffer</A></H2>\n     }\n    </PRE>\n       Try it yourself!\n-   </P>\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"7\">More on binary I/O</A></H2>\n-   <P>Towards the beginning of February 2001, the subject of\n+<hr>\n+<h2><a name=\"7\">More on binary I/O</a></h2>\n+   <p>Towards the beginning of February 2001, the subject of\n       &quot;binary&quot; I/O was brought up in a couple of places at the\n       same time.  One notable place was Usenet, where James Kanze and\n       Dietmar K&uuml;hl separately posted articles on why attempting\n       generic binary I/O was not a good idea.  (Here are copies of\n-      <A HREF=\"binary_iostreams_kanze.txt\">Kanze's article</A> and\n-      <A HREF=\"binary_iostreams_kuehl.txt\">K&uuml;hl's article</A>.)\n-   </P>\n-   <P>Briefly, the problems of byte ordering and type sizes mean that\n-      the unformatted functions like <TT>ostream::put()</TT> and\n-      <TT>istream::get()</TT> cannot safely be used to communicate\n+      <a href=\"binary_iostreams_kanze.txt\">Kanze's article</a> and\n+      <a href=\"binary_iostreams_kuehl.txt\">K&uuml;hl's article</a>.)\n+   </p>\n+   <p>Briefly, the problems of byte ordering and type sizes mean that\n+      the unformatted functions like <code>ostream::put()</code> and\n+      <code>istream::get()</code> cannot safely be used to communicate\n       between arbitrary programs, or across a network, or from one\n       invocation of a program to another invocation of the same program\n       on a different platform, etc.\n-   </P>\n-   <P>The entire Usenet thread is instructive, and took place under the\n+   </p>\n+   <p>The entire Usenet thread is instructive, and took place under the\n       subject heading &quot;binary iostreams&quot; on both comp.std.c++\n       and comp.lang.c++.moderated in parallel.  Also in that thread,\n       Dietmar K&uuml;hl mentioned that he had written a pair of stream\n       classes that would read and write XDR, which is a good step towards\n       a portable binary format.\n-   </P>\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"8\">Pathetic performance?  Ditch C.</A></H2>\n-   <P>It sounds like a flame on C, but it isn't.  Really.  Calm down.\n+<hr>\n+<h2><a name=\"8\">Pathetic performance?  Ditch C.</a></h2>\n+   <p>It sounds like a flame on C, but it isn't.  Really.  Calm down.\n       I'm just saying it to get your attention.\n-   </P>\n-   <P>Because the C++ library includes the C library, both C-style and\n+   </p>\n+   <p>Because the C++ library includes the C library, both C-style and\n       C++-style I/O have to work at the same time.  For example:\n       <PRE>\n      #include &lt;iostream&gt;\n@@ -417,54 +417,54 @@ <H2><A NAME=\"8\">Pathetic performance?  Ditch C.</A></H2>\n      std::cout &lt;&lt; &quot;d!\\n&quot;;\n       </PRE>\n       This must do what you think it does.\n-   </P>\n-   <P>Alert members of the audience will immediately notice that buffering\n+   </p>\n+   <p>Alert members of the audience will immediately notice that buffering\n       is going to make a hash of the output unless special steps are taken.\n-   </P>\n-   <P>The special steps taken by libstdc++, at least for version 3.0,\n+   </p>\n+   <p>The special steps taken by libstdc++, at least for version 3.0,\n       involve doing very little buffering for the standard streams, leaving\n       most of the buffering to the underlying C library.  (This kind of\n-      thing is <A HREF=\"../explanations.html#cstdio\">tricky to get right</A>.)\n+      thing is <a href=\"../explanations.html#cstdio\">tricky to get right</a>.)\n       The upside is that correctness is ensured.  The downside is that\n-      writing through <TT>cout</TT> can quite easily lead to awful\n+      writing through <code>cout</code> can quite easily lead to awful\n       performance when the C++ I/O library is layered on top of the C I/O\n       library (as it is for 3.0 by default).  Some patches are in the\n       works which should improve the situation for 3.1.\n-   </P>\n-   <P>However, the C and C++ standard streams only need to be kept in sync\n+   </p>\n+   <p>However, the C and C++ standard streams only need to be kept in sync\n       when both libraries' facilities are in use.  If your program only uses\n       C++ I/O, then there's no need to sync with the C streams.  The right\n       thing to do in this case is to call\n       <PRE>\n-     #include <EM>any of the I/O headers such as ios, iostream, etc</EM>\n+     #include <em>any of the I/O headers such as ios, iostream, etc</em>\n \n      std::ios::sync_with_stdio(false);\n       </PRE>\n-   </P>\n-   <P>You must do this before performing any I/O via the C++ stream objects.\n+   </p>\n+   <p>You must do this before performing any I/O via the C++ stream objects.\n       Once you call this, the C++ streams will operate independantly of the\n-      (unused) C streams.  For GCC 3.0, this means that <TT>cout</TT> and\n+      (unused) C streams.  For GCC 3.0, this means that <code>cout</code> and\n       company will become fully buffered on their own.\n-   </P>\n-   <P>Note, by the way, that the synchronization requirement only applies to\n-      the standard streams (<TT>cin</TT>, <TT>cout</TT>, <TT>cerr</TT>,\n-      <TT>clog</TT>, and their wide-character counterparts).  File stream\n+   </p>\n+   <p>Note, by the way, that the synchronization requirement only applies to\n+      the standard streams (<code>cin</code>, <code>cout</code>, <code>cerr</code>,\n+      <code>clog</code>, and their wide-character counterparts).  File stream\n       objects that you create yourself have no such requirement and are fully\n       buffered.\n-   </P>\n+   </p>\n \n \n <!-- ####################################################### -->\n \n-<HR><BR><BR><BR><BR><BR><BR><BR><BR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr><br><br><br><br><br><br><br><br>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.7 2001/07/09 21:47:36 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.8 2001/07/18 21:37:06 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>\n \n "}, {"sha": "9a5b71fe8e440755a4adaec555443073a9e91ac8", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 102, "deletions": 102, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,117 +1,117 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"libstdc++, libstdc++-v3, GCC, g++\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"Configuration options for libstdc++-v3.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 configure options</TITLE>\n-<LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.12 2001/07/09 21:47:35 pme Exp $ -->\n-</HEAD>\n-<BODY>\n+<html>\n+<head>\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"libstdc++, libstdc++-v3, GCC, g++\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"Configuration options for libstdc++-v3.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 configure options</title>\n+<link REL=StyleSheet HREF=\"lib3styles.css\">\n+<!-- $Id: configopts.html,v 1.13 2001/08/08 02:48:58 bkoz Exp $ -->\n+</head>\n+<body>\n \n-<H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n-options</A></H1>\n+<h1 CLASS=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n+options</a></h1>\n \n-<P>The latest version of this document is always available at\n-   <A HREF=\"http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html\">\n-   http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html</A>.\n-</P>\n+<p>The latest version of this document is always available at\n+   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html\">\n+   http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html</a>.\n+</p>\n \n-<P>To the <A HREF=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</A>.\n+<p>To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</a>.\n \n \n <!-- ####################################################### -->\n-<HR>\n-<P>Here are some of the non-obvious options to libstdc++'s configure.\n+<hr>\n+<p>Here are some of the non-obvious options to libstdc++'s configure.\n    Keep in mind that\n    <!-- This SECnn should be the \"Choosing Package Options\" section. -->\n-   <A HREF=\"http://sources.redhat.com/autoconf/autoconf.html#SEC74\">they\n-   all have opposite forms as well</A>\n+   <a href=\"http://sources.redhat.com/autoconf/autoconf.html#SEC74\">they\n+   all have opposite forms as well</a>\n    (enable/disable and with/without).  The defaults are for current\n    development sources.\n-</P>\n-<P>The canonical way to find out the configure options that are\n+</p>\n+<p>The canonical way to find out the configure options that are\n    available for a given set of libstdc++ sources is to go to the\n-   source directory and then type:<TT>  ./configure --help</TT>\n+   source directory and then type:<code>  ./configure --help</code>\n \n-<DL>\n- <DT><TT>--enable-multilib  </TT>[default]\n- <DD><P>This is part of the generic multilib support for building cross\n+<dl>\n+ <dt><code>--enable-multilib  </code>[default]\n+ <dd><p>This is part of the generic multilib support for building cross\n         compilers.  As such, targets like &quot;powerpc-elf&quot; will have\n         libstdc++ built many different ways:  &quot;-msoft-float&quot;\n         and not, etc.  A different libstdc++ will be built for each of\n         the different multilib versions.  This option is on by default.\n-     </P>\n+     </p>\n \n- <DT><TT>--enable-debug  </TT>\n- <DD><P>The configure script will automatically detect the highest\n+ <dt><code>--enable-debug  </code>\n+ <dd><p>The configure script will automatically detect the highest\n         level of optimization that the compiler in use can use\n-        (certain versions of g++ will ICE if given the <TT>-O2</TT>\n+        (certain versions of g++ will ICE if given the <code>-O2</code>\n         option, but this is fixed in later versions of the compiler).\n         This --enable flag will disable all optimizations and instruct\n         the compiler to emit as much extra debugging information as it\n         can, for use inside GDB. Note this make command, executed in\n         the build directory, will do much the same thing, without the\n-        configuration difference:<TT>make CXXFLAGS='-g -O0' all</TT>\n-     </P>\n+        configuration difference:<code>make CXXFLAGS='-g -O0' all</code>\n+     </p>\n \n- <DT><TT>--enable-cstdio  </TT>\n- <DD><P>This is an abbreviated form of <TT>'--enable-cstdio=stdio'</TT>\n+ <dt><code>--enable-cstdio  </code>\n+ <dd><p>This is an abbreviated form of <code>'--enable-cstdio=stdio'</code>\n         (described next).\n-     </P>\n+     </p>\n \n- <DT><TT>--enable-cstdio=LIB  </TT>\n- <DD><P>Select a target-specific I/O package.  As of libstdc++-v3\n+ <dt><code>--enable-cstdio=LIB  </code>\n+ <dd><p>Select a target-specific I/O package.  As of libstdc++-v3\n         snapshot 2.91, the choices are 'libio' to specify the GNU\n         I/O package (from\n-        <A HREF=\"http://sources.redhat.com/glibc/\">glibc</A>, the\n+        <a href=\"http://sources.redhat.com/glibc/\">glibc</a>, the\n         GNU C library), or 'stdio' to use a generic &quot;C&quot;\n         abstraction.  The default is 'stdio'.  A longer explanation\n-        is <A HREF=\"explanations.html#cstdio\">here</A>.\n-     </P>\n+        is <a href=\"explanations.html#cstdio\">here</a>.\n+     </p>\n \n- <DT><TT>--enable-sjlj-exceptions  </TT>\n- <DD><P>Forces old, set-jump/long-jump exception handling model.  If\n+ <dt><code>--enable-sjlj-exceptions  </code>\n+ <dd><p>Forces old, set-jump/long-jump exception handling model.  If\n         at all possible, the new, frame unwinding exception handling routines\n         should be used instead, as they significantly reduce both runtime\n         memory usage and executable size.\n-     </P>\n+     </p>\n \n- <DT><TT>--enable-clocale  </TT>\n- <DD><P>This is an abbreviated form of <TT>'--enable-clocale=generic'</TT>\n+ <dt><code>--enable-clocale  </code>\n+ <dd><p>This is an abbreviated form of <code>'--enable-clocale=generic'</code>\n         (described next).\n-     </P>\n+     </p>\n \n- <DT><TT>--enable-clocale=MODEL  </TT>\n- <DD><P>Select a target-specific underlying locale package.  The\n+ <dt><code>--enable-clocale=MODEL  </code>\n+ <dd><p>Select a target-specific underlying locale package.  The\n         choices are 'ieee_1003.1' to specify an X/Open, Standard Unix\n         (IEEE Std. 1003.1-200x) model based on langinfo/iconv/catgets,\n         'gnu' to specify a model based on functionality from the GNU C\n         library (langinfo/iconv/gettext) (from <A\n-        HREF=\"http://sources.redhat.com/glibc/\">glibc</A>, the GNU C\n+        HREF=\"http://sources.redhat.com/glibc/\">glibc</a>, the GNU C\n         library), or 'generic' to use a generic &quot;C&quot;\n         abstraction which consists of &quot;C&quot; locale info.  The\n         default is 'generic'.\n-     </P>\n+     </p>\n \n- <DT><TT>--enable-c99  </TT>\n- <DD><P>The &quot;long long&quot; type was introduced in C99, along\n+ <dt><code>--enable-c99  </code>\n+ <dd><p>The &quot;long long&quot; type was introduced in C99, along\n         with many other functions for wide characters, and math\n         classification macros, etc.  If enabled, all C99 functions not\n-        specified by the C++ standard will be put into <TT>namespace\n-        __gnu_cxx</TT>, and then all these names will\n+        specified by the C++ standard will be put into <code>namespace\n+        __gnu_cxx</code>, and then all these names will\n         be injected into namespace std, so that C99 functions can be\n         used &quot;as if&quot; they were in the C++ standard (as they\n         will eventually be in some future revision of the standard,\n         without a doubt).  By default, C99 support is on, assuming the\n         configure probes find all the necessary functions and bits\n         necessary.\n-    </P>\n+    </p>\n \n- <DT><TT>--enable-long-long  </TT>\n- <DD><P>The &quot;long long&quot; type was introduced in C99.  It is\n+ <dt><code>--enable-long-long  </code>\n+ <dd><p>The &quot;long long&quot; type was introduced in C99.  It is\n         provided as a GNU extension to C++98 in g++.  This flag builds\n         support for &quot;long long&quot; into the library (specialized\n         templates and the like for iostreams).  This option is on by default:\n@@ -121,22 +121,22 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n         allow &quot;C&quot; visibility of this feature (on GNU/Linux,\n         the flag is -D_ISOC99_SOURCE, which is added automatically via\n         CPLUSPLUS_CPP_SPEC's addition of _GNU_SOURCE).\n-     </P>\n+     </p>\n \n- <DT><TT>--enable-cheaders=OPTION  </TT>\n- <DD><P>This allows the user to define what kind of C headers are\n+ <dt><code>--enable-cheaders=OPTION  </code>\n+ <dd><p>This allows the user to define what kind of C headers are\n         used.  Options are: c, c_std, and c_shadow. These correspond\n         to the source directory's include/c, include/c_std, and\n         include/c_shadow directories.  The default is c_std.\n-     </P>\n+     </p>\n \n- <DT><TT>--enable-threads  </TT>\n- <DD><P>This is an abbreviated form of <TT>'--enable-threads=yes'</TT>\n+ <dt><code>--enable-threads  </code>\n+ <dd><p>This is an abbreviated form of <code>'--enable-threads=yes'</code>\n         (described next).\n-     </P>\n+     </p>\n \n- <DT><TT>--enable-threads=LIB  </TT>\n- <DD><P>Select a threading library.  As of libstdc++-v3 snapshot 2.91,\n+ <dt><code>--enable-threads=LIB  </code>\n+ <dd><p>Select a threading library.  As of libstdc++-v3 snapshot 2.91,\n         the choices are:\n         'yes' for some kind of default (hmmmmm);\n         'decosf1', 'irix', 'mach', 'os2', 'posix'/'pthreads'\n@@ -145,80 +145,80 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n         corresponding interface;\n         and 'single', 'no', or 'none' for the null-case,\n         single-threaded library.\n-     </P>\n-     <P>All of this is currently undergoing a lot of changes.  As of\n+     </p>\n+     <p>All of this is currently undergoing a lot of changes.  As of\n         2.91, 'single' and 'posix' are the only implemented\n         models.  Default is single.\n-     </P>\n+     </p>\n \n- <DT><TT>--enable-version-specific-runtime-libs  </TT>\n- <DD><P>Specify that run-time libraries should be installed in the\n+ <dt><code>--enable-version-specific-runtime-libs  </code>\n+ <dd><p>Specify that run-time libraries should be installed in the\n         compiler-specific subdirectory (i.e.,\n-        <TT>${libdir}/gcc-lib/${target_alias}/${gcc_version}</TT>)\n-        instead of <TT>${libdir}</TT>.  This option is useful if you\n+        <code>${libdir}/gcc-lib/${target_alias}/${gcc_version}</code>)\n+        instead of <code>${libdir}</code>.  This option is useful if you\n         intend to use several versions of gcc in parallel.  In addition,\n         libstdc++'s include files will be installed in\n-        <TT>${libdir}/gcc-lib/${target_alias}/${gcc_version}/include/g++</TT>,\n+        <code>${libdir}/gcc-lib/${target_alias}/${gcc_version}/include/g++</code>,\n         unless you also specify\n-       <TT>--with-gxx-include-dir=<EM>dirname</EM></TT> during configuration.\n-     </P>\n+       <code>--with-gxx-include-dir=<em>dirname</em></code> during configuration.\n+     </p>\n \n- <DT><TT>--with-gxx-include-dir=&lt;include-files dir&gt;</TT>\n- <DD><P>Adds support for named libstdc++ include directory.  For instance,\n+ <dt><code>--with-gxx-include-dir=&lt;include-files dir&gt;</code>\n+ <dd><p>Adds support for named libstdc++ include directory.  For instance,\n         the following puts all the libstdc++ headers into a directory\n         called &quot;2.97-20001008&quot; instead of the usual\n         &quot;g++-v3&quot;.\n         <PRE>\n    --with-gxx-include-dir=/foo/H-x86-gcc-3-c-gxx-inc/include/2.97-20001008</PRE>\n-     </P>\n+     </p>\n \n- <DT><TT>--enable-cxx-flags=FLAGS</TT>\n- <DD><P>With this option, you can pass a string of -f (functionality)\n+ <dt><code>--enable-cxx-flags=FLAGS</code>\n+ <dd><p>With this option, you can pass a string of -f (functionality)\n         flags to the compiler to use when building libstdc++.  FLAGS\n         is a quoted string of options, like\n         <PRE>\n   --enable-cxx-flags='-fvtable-gc -fomit-frame-pointer -ansi'</PRE>\n         Note that the flags don't necessarily have to all be -f flags,\n         as shown, but usually those are the ones that will make sense\n         for experimentation and configure-time overriding.\n-     </P>\n-     <P>The advantage of --enable-cxx-flags over setting CXXFLAGS in\n+     </p>\n+     <p>The advantage of --enable-cxx-flags over setting CXXFLAGS in\n         the 'make' environment is that, if files are automatically\n         rebuilt, the same flags will be used when compiling those files\n         as well, so that everything matches.\n-     </P>\n-     <P>Fun flags to try might include combinations of\n+     </p>\n+     <p>Fun flags to try might include combinations of\n         <PRE>\n   -fstrict-aliasing\n   -fno-exceptions\n   -ffunction-sections\n   -fvtable-gc</PRE>\n         and opposite forms (-fno-) of the same.  Tell us (the mailing\n         list) if you discover more!\n-     </P>\n+     </p>\n \n- <DT><TT>--enable-c-mbchar  </TT>[default]\n- <DD><P>Certain template specializations are required for wide\n+ <dt><code>--enable-c-mbchar  </code>[default]\n+ <dd><p>Certain template specializations are required for wide\n         character conversion support.  This is tricky and currently\n         changing rapidly, and can cause problems on new platforms.\n         Disabling wide character specializations is useful for initial\n         porting steps, but builds only a subset of what is required by\n         ISO.  By default, this option is on.\n-     </P>\n-</DL>\n-</P>\n-<P>Return <A HREF=\"#top\">to the top of the page</A> or\n-   <A HREF=\"http://gcc.gnu.org/libstdc++/\">to the homepage</A>.\n-</P>\n+     </p>\n+</dl>\n+</p>\n+<p>Return <a href=\"#top\">to the top of the page</a> or\n+   <a href=\"http://gcc.gnu.org/libstdc++/\">to the homepage</a>.\n+</p>\n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.12 2001/07/09 21:47:35 pme Exp $\n-</EM></P>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n+$Id: configopts.html,v 1.13 2001/08/08 02:48:58 bkoz Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "6d5da262bc80c74f14750ea25dbeabf53157365b", "filename": "libstdc++-v3/docs/html/documentation.html", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,98 +1,98 @@\n-<HTML>\n-<HEAD>\n- <META NAME=\"KEYWORDS\" CONTENT=\"libstdc++, homepage, home, g++, libg++, STL\">\n- <TITLE>Standard C++ Library v3</TITLE>\n-<LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: documentation.html,v 1.4 2001/05/30 21:54:56 pme Exp $ -->\n-</HEAD>\n-<BODY>\n+<html>\n+<head>\n+ <meta NAME=\"KEYWORDS\" CONTENT=\"libstdc++, homepage, home, g++, libg++, STL\">\n+ <title>Standard C++ Library v3</title>\n+<link REL=StyleSheet HREF=\"lib3styles.css\">\n+<!-- $Id: documentation.html,v 1.5 2001/06/15 22:57:30 pme Exp $ -->\n+</head>\n+<body>\n \n \n-<P><B>All of these documents</B> (in fact, this entire homepage set) are\n-   bundled with the library source, under the <TT>docs</TT> subdirectory,\n+<p><B>All of these documents</B> (in fact, this entire homepage set) are\n+   bundled with the library source, under the <code>docs</code> subdirectory,\n    for releases and snapshots.  The sole exception is the\n    automatically-generated source documentation, available separately.\n-</P>\n+</p>\n \n-<HR>\n-<H2><A NAME=\"4\">Source Documentation</A></H2>\n-<P>In addition to the distribution documentation (these pages), we also\n+<hr>\n+<h2><a name=\"4\">Source Documentation</a></h2>\n+<p>In addition to the distribution documentation (these pages), we also\n    have a set of HTML documents generated from the sources themselves,\n    using the Doxygen tool.  These are useful for examining the signatures\n    of public member functions for the library classes, etc.\n-</P>\n-<P>\n+</p>\n+<p>\n    The latest collection is for the GCC 3.0 release,\n-   <TT>libstdc++-doxygen-3.0.tar.gz</TT> (3.8MB),\n-   <A HREF=\"libstdc++-doxygen-3.0/index.html\">viewable online</A>.\n+   <code>libstdc++-doxygen-3.0.tar.gz</code> (3.8MB),\n+   <a href=\"libstdc++-doxygen-3.0/index.html\">viewable online</a>.\n    The collection is also available in the libstdc++ snapshots directory at\n-   <TT>&lt;URL:ftp://gcc.gnu.org/pub/gcc/libstdc++/&gt;</TT>.  You will\n+   <code>&lt;URL:ftp://gcc.gnu.org/pub/gcc/libstdc++/&gt;</code>.  You will\n    almost certainly need to use one of the\n-   <A HREF=\"http://gcc.gnu.org/mirrors.html\">mirror sites</A> to download\n+   <a href=\"http://gcc.gnu.org/mirrors.html\">mirror sites</a> to download\n    the tarball.  After unpacking, simply load\n    libstdc++-doxygen-3.0/index.html <!-- also update this date -->\n    in a browser.  Feedback (and additional documentation!) is welcome.\n-</P>\n+</p>\n <!-- another paragraph here for post-release collections -->\n \n-<HR>\n-<H2><A NAME=\"2\">Configuring, Building, Installing</A></H2>\n-  <UL>\n-   <LI><A HREF=\"configopts.html\">Configure options</A>\n-   <LI><A HREF=\"install.html\">Getting started: configure, build, install</A><BR>\n-  </UL>\n+<hr>\n+<h2><a name=\"2\">Configuring, Building, Installing</a></h2>\n+  <ul>\n+   <li><a href=\"configopts.html\">Configure options</a>\n+   <li><a href=\"install.html\">Getting started: configure, build, install</a><br>\n+  </ul>\n \n-<HR>\n-<H2><A NAME=\"1\">Introductory notes for libstdc++</A></H2>\n-   <P>This is a short list of text files pertaining to this\n+<hr>\n+<h2><a name=\"1\">Introductory notes for libstdc++</a></h2>\n+   <p>This is a short list of text files pertaining to this\n    implementation of ISO 14882. A brief description follows the name\n    of the file.\n-   </P>\n-   <P>\n-      <UL>\n-         <LI><A HREF=\"17_intro/BADNAMES\">BADNAMES</A>\n+   </p>\n+   <p>\n+      <ul>\n+         <li><a href=\"17_intro/BADNAMES\">BADNAMES</a>\n          - names to avoid because of potential collisions\n-         <LI><A HREF=\"17_intro/BUGS\">BUGS</A>\n-         <LI><A HREF=\"17_intro/C++STYLE\">C++STYLE</A>\n+         <li><a href=\"17_intro/BUGS\">BUGS</a>\n+         <li><a href=\"17_intro/C++STYLE\">C++STYLE</a>\n          - coding style by example\n-         <LI><A HREF=\"17_intro/CHECKLIST\">CHECKLIST</A>\n+         <li><a href=\"17_intro/CHECKLIST\">CHECKLIST</a>\n          - a list of required features and their status.\n-         <LI><A HREF=\"17_intro/COPYING\">COPYING</A>\n+         <li><a href=\"17_intro/COPYING\">COPYING</a>\n          - GPL v2 license terms\n-         <LI><A HREF=\"17_intro/DESIGN\">DESIGN</A>\n+         <li><a href=\"17_intro/DESIGN\">DESIGN</a>\n          - overview of the implementation plan\n-         <LI><A HREF=\"17_intro/HEADER_POLICY\">HEADER_POLICY</A>\n+         <li><a href=\"17_intro/headER_POLICY\">headER_POLICY</a>\n          - header naming and sub-include structure\n-         <LI><A HREF=\"17_intro/PROBLEMS\">PROBLEMS</A>\n+         <li><a href=\"17_intro/PROBLEMS\">PROBLEMS</a>\n          <!-- Linking to \"../README\" doesn't work; we are at the top level\n               of the web pages.  Punt.  -->\n-         <LI>README - directory structure\n-         <LI><A HREF=\"17_intro/RELEASE-NOTES\">RELEASE-NOTES</A>\n+         <li>README - directory structure\n+         <li><a href=\"17_intro/RELEASE-NOTES\">RELEASE-NOTES</a>\n          - instructions for building, using\n-         <LI><A HREF=\"17_intro/TODO\">TODO</A>\n+         <li><a href=\"17_intro/TODO\">TODO</a>\n          - tasks and known bugs\n-         <LI><A HREF=\"17_intro/organization\">organization</A>\n-         <LI><A HREF=\"17_intro/contribute.html\">Contributor checklist</A>\n-         <LI><A HREF=\"17_intro/libstdc++-assign.txt\">Copyright assignment form for libstdc++-v3</A>\n-      </UL>\n-   </P>\n+         <li><a href=\"17_intro/organization\">organization</a>\n+         <li><a href=\"17_intro/contribute.html\">Contributor checklist</a>\n+         <li><a href=\"17_intro/libstdc++-assign.txt\">Copyright assignment form for libstdc++-v3</a>\n+      </ul>\n+   </p>\n \n-<HR>\n-<H2><A NAME=\"3\">Chapter-Specific Information, Extensions, Notes and Advice</A></H2>\n-      <OL>\n-         <LI><A HREF=\"17_intro/howto.html\">Chapter 17 (Intro)</A>\n-         <LI><A HREF=\"18_support/howto.html\">Chapter 18 (Library Support)</A>\n-         <LI><A HREF=\"19_diagnostics/howto.html\">Chapter 19 (Diagnostics)</A>\n-         <LI><A HREF=\"20_util/howto.html\">Chapter 20 (Utilities)</A>\n-         <LI><A HREF=\"21_strings/howto.html\">Chapter 21 (Strings)</A>\n-         <LI><A HREF=\"22_locale/howto.html\">Chapter 22 (Localization)</A>\n-         <LI><A HREF=\"23_containers/howto.html\">Chapter 23 (Containers)</A>\n-         <LI><A HREF=\"24_iterators/howto.html\">Chapter 24 (Iterators)</A>\n-         <LI><A HREF=\"25_algorithms/howto.html\">Chapter 25 (Algorithms)</A>\n-         <LI><A HREF=\"26_numerics/howto.html\">Chapter 26 (Numerics)</A>\n-         <LI><A HREF=\"27_io/howto.html\">Chapter 27 (I/O)</A>\n-         <LI><A HREF=\"ext/howto.html\">Extensions to the Standard Library</A>\n-      </OL>\n+<hr>\n+<h2><a name=\"3\">Chapter-Specific Information, Extensions, Notes and Advice</a></h2>\n+      <ol>\n+         <li><a href=\"17_intro/howto.html\">Chapter 17 (Intro)</a>\n+         <li><a href=\"18_support/howto.html\">Chapter 18 (Library Support)</a>\n+         <li><a href=\"19_diagnostics/howto.html\">Chapter 19 (Diagnostics)</a>\n+         <li><a href=\"20_util/howto.html\">Chapter 20 (Utilities)</a>\n+         <li><a href=\"21_strings/howto.html\">Chapter 21 (Strings)</a>\n+         <li><a href=\"22_locale/howto.html\">Chapter 22 (Localization)</a>\n+         <li><a href=\"23_containers/howto.html\">Chapter 23 (Containers)</a>\n+         <li><a href=\"24_iterators/howto.html\">Chapter 24 (Iterators)</a>\n+         <li><a href=\"25_algorithms/howto.html\">Chapter 25 (Algorithms)</a>\n+         <li><a href=\"26_numerics/howto.html\">Chapter 26 (Numerics)</a>\n+         <li><a href=\"27_io/howto.html\">Chapter 27 (I/O)</a>\n+         <li><a href=\"ext/howto.html\">Extensions to the Standard Library</a>\n+      </ol>\n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "076454f9b13d74b25ead32950e6d21a7626544ce", "filename": "libstdc++-v3/docs/html/explanations.html", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fexplanations.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fexplanations.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fexplanations.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,74 +1,74 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"libstdc++, libstdc++-v3, GCC, g++\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"Explanatory notes about libstdc++-v3.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>Explanatory notes about libstdc++-v3 design</TITLE>\n-<LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.10 2001/04/20 08:59:25 bkoz Exp $ -->\n-</HEAD>\n-<BODY>\n+<html>\n+<head>\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"libstdc++, libstdc++-v3, GCC, g++\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"Explanatory notes about libstdc++-v3.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>Explanatory notes about libstdc++-v3 design</title>\n+<link REL=StyleSheet HREF=\"lib3styles.css\">\n+<!-- $Id: explanations.html,v 1.1 2001/07/09 19:37:01 pme Exp $ -->\n+</head>\n+<body>\n \n-<H1 CLASS=\"centered\"><A NAME=\"top\">Explanatory notes about libstdc++-v3\n-design</A></H1>\n+<h1 CLASS=\"centered\"><a name=\"top\">Explanatory notes about libstdc++-v3\n+design</a></h1>\n \n-<P>The latest version of this document is always available at\n-   <A HREF=\"http://gcc.gnu.org/onlinedocs/libstdc++/explanations.html\">\n-   http://gcc.gnu.org/onlinedocs/libstdc++/explanations.html</A>.\n-</P>\n+<p>The latest version of this document is always available at\n+   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/explanations.html\">\n+   http://gcc.gnu.org/onlinedocs/libstdc++/explanations.html</a>.\n+</p>\n \n-<P>To the <A HREF=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</A>.\n+<p>To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</a>.\n \n \n <!-- ####################################################### -->\n-<HR>\n-<A NAME=\"cstdio\"><H3>&quot;I/O packages&quot;, <TT>--enable-cstdio</TT></H3></A>\n-<P>In addition to all the nifty things which C++ can do for I/O, its library\n+<hr>\n+<a name=\"cstdio\"><h3>&quot;I/O packages&quot;, <code>--enable-cstdio</code></h3></a>\n+<p>In addition to all the nifty things which C++ can do for I/O, its library\n    also includes all of the I/O capabilites of C.  Making them work together\n    can be a challenge, not only\n-   <A HREF=\"27_io/howto.html#8\">for the programmer</A> but for the\n+   <a href=\"27_io/howto.html#8\">for the programmer</a> but for the\n    implementors as well.\n-</P>\n-<P>There are two ways to do a C++ library:  the cool way, and the easy way.\n+</p>\n+<p>There are two ways to do a C++ library:  the cool way, and the easy way.\n    More specifically, the cool-but-easy-to-get-wrong way, and the\n    easy-to-guarantee-correct-behavior way.  For 3.0, the easy way is used.\n-</P>\n-<P>Choosing 'stdio' is the easy way.  It builds a C++ library which forwards\n+</p>\n+<p>Choosing 'stdio' is the easy way.  It builds a C++ library which forwards\n    all operations to the C library.  Many of the C++ I/O functions are\n    specified in the standard 'as if' they called a certain C function; the\n    easiest way to get it correct is to actually call that function.  The\n    disadvantage is that the C++ code will run slower (fortunately, the layer\n    is thin).\n-</P>\n-<P>Choosing 'libio' is the cool way; it allows C++ and C to share some\n+</p>\n+<p>Choosing 'libio' is the cool way; it allows C++ and C to share some\n    buffers.  It's disabled because of tricky synchronization issues.  Other\n    cool ways (various methods of sharing resources between C and C++\n    facilities, instead of layering) are possible.  This approach can speed\n    up I/O significantly.\n-</P>\n-<P>Other packages are possible.  For a new package, a header must be\n+</p>\n+<p>Other packages are possible.  For a new package, a header must be\n    written to provide types like streamsize (usually just a typedef), as\n-   well as some internal types like<TT> __c_file_type </TT> and\n-   <TT> __c_lock </TT> (for the stdio case, these are FILE (as in\n+   well as some internal types like<code> __c_file_type </code> and\n+   <code> __c_lock </code> (for the stdio case, these are FILE (as in\n    &quot;FILE*&quot;) and a simple POSIX mutex, respectively).  An\n-   interface class called <TT> __basic_file </TT> must also be filled in;\n+   interface class called <code> __basic_file </code> must also be filled in;\n    as an example, for the stdio case, these member functions are all\n    inline calles to fread, fwrite, etc.\n-</P>\n-<P>Return <A HREF=\"#top\">to the top of the page</A> or\n-   <A HREF=\"http://gcc.gnu.org/libstdc++/\">to the homepage</A>.\n-</P>\n+</p>\n+<p>Return <a href=\"#top\">to the top of the page</a> or\n+   <a href=\"http://gcc.gnu.org/libstdc++/\">to the homepage</a>.\n+</p>\n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n-$Id$\n-</EM></P>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n+$Id: explanations.html,v 1.1 2001/07/09 19:37:01 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "b34e61e463305bea1290eabececddbd95907edeb", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 106, "deletions": 106, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,174 +1,174 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"Notes for the libstdc++ extensions.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 HOWTO:  Extensions</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.4 2001/05/02 01:39:03 pme Exp $ -->\n-</HEAD>\n-<BODY>\n-\n-<H1 CLASS=\"centered\"><A NAME=\"top\">Extensions</A></H1>\n-\n-<P>Here we will make an attempt at describing the non-Standard extensions to\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"HOWTO, libstdc++, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"Notes for the libstdc++ extensions.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 HOWTO:  Extensions</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n+<!-- $Id: howto.html,v 1.5 2001/05/30 21:55:04 pme Exp $ -->\n+</head>\n+<body>\n+\n+<h1 CLASS=\"centered\"><a name=\"top\">Extensions</a></h1>\n+\n+<p>Here we will make an attempt at describing the non-Standard extensions to\n    the library.  Some of these are from SGI's STL, some of these are GNU's,\n    and some just seemed to appear on the doorstep.\n-</P>\n-<P><B>Before you leap in and use these</B>, be aware of two things:\n-   <OL>\n-    <LI>Non-Standard means exactly that.  The behavior, and the very\n+</p>\n+<p><B>Before you leap in and use these</B>, be aware of two things:\n+   <ol>\n+    <li>Non-Standard means exactly that.  The behavior, and the very\n         existence, of these extensions may change with little or no\n         warning.  (Ideally, the really good ones will appear in the next\n         revision of C++.)  Also, other platforms, other compilers, other\n         versions of g++ or libstdc++-v3 may not recognize these names, or\n         treat them differently, or...\n-    <LI>You should know how to <A HREF=\"../faq/index.html#5_4\">access\n-        these headers properly</A>.\n-   </OL>\n-</P>\n+    <li>You should know how to <a href=\"../faq/index.html#5_4\">access\n+        these headers properly</a>.\n+   </ol>\n+</p>\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Contents</H1>\n-<UL>\n-   <LI><A HREF=\"#1\">Ropes and trees and hashes, oh my!</A>\n-   <LI><A HREF=\"#2\">Added members</A>\n-   <LI><A HREF=\"#3\">Allocators</A>\n-   <LI><A HREF=\"#4\">Compile-time checks</A>\n-</UL>\n+<hr>\n+<h1>Contents</h1>\n+<ul>\n+   <li><a href=\"#1\">Ropes and trees and hashes, oh my!</a>\n+   <li><a href=\"#2\">Added members</a>\n+   <li><a href=\"#3\">Allocators</a>\n+   <li><a href=\"#4\">Compile-time checks</a>\n+</ul>\n \n-<HR>\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"1\">Ropes and trees and hashes, oh my!</A></H2>\n-   <P>The SGI headers\n+<h2><a name=\"1\">Ropes and trees and hashes, oh my!</a></h2>\n+   <p>The SGI headers\n      <PRE>\n      &lt;bvector&gt;\n      &lt;hash_map&gt;\n      &lt;hash_set&gt;\n      &lt;rope&gt;\n      &lt;slist&gt;\n      &lt;tree&gt;\n-     </PRE> are all here; <TT>&lt;bvector&gt;</TT> exposes the old bit_vector\n+     </PRE> are all here; <code>&lt;bvector&gt;</code> exposes the old bit_vector\n       class that was used before specialization of vector&lt;bool&gt; was\n       available (it's actually a typedef for the specialization now).\n-      <TT>&lt;hash_map&gt;</TT> and <TT>&lt;hash_set&gt;</TT>\n-      are discussed further below.  <TT>&lt;rope&gt;</TT> is the SGI\n+      <code>&lt;hash_map&gt;</code> and <code>&lt;hash_set&gt;</code>\n+      are discussed further below.  <code>&lt;rope&gt;</code> is the SGI\n       specialization for large strings (&quot;rope,&quot; &quot;large\n       strings,&quot; get it?  love those SGI folks).\n-      <TT>&lt;slist&gt;</TT> is a singly-linked list, for when the\n-      doubly-linked <TT>list&lt;&gt;</TT> is too much space overhead, and\n-      <TT>&lt;tree&gt;</TT> exposes the red-black tree classes used in the\n+      <code>&lt;slist&gt;</code> is a singly-linked list, for when the\n+      doubly-linked <code>list&lt;&gt;</code> is too much space overhead, and\n+      <code>&lt;tree&gt;</code> exposes the red-black tree classes used in the\n       implementation of the standard maps and sets.\n-   </P>\n-   <P>Okay, about those hashing classes...  I'm going to foist most of the\n+   </p>\n+   <p>Okay, about those hashing classes...  I'm going to foist most of the\n       work off onto SGI's own site.\n-   </P>\n-   <P>Each of the associative containers map, multimap, set, and multiset\n+   </p>\n+   <p>Each of the associative containers map, multimap, set, and multiset\n       have a counterpart which uses a\n-      <A HREF=\"http://www.sgi.com/Technology/STL/HashFunction.html\">hashing\n-      function</A> to do the arranging, instead of a strict weak ordering\n+      <a href=\"http://www.sgi.com/Technology/STL/HashFunction.html\">hashing\n+      function</a> to do the arranging, instead of a strict weak ordering\n       function.  The classes take as one of their template parameters a\n       function object that will return the hash value; by default, an\n       instantiation of\n-      <A HREF=\"http://www.sgi.com/Technology/STL/hash.html\">hash</A>.\n+      <a href=\"http://www.sgi.com/Technology/STL/hash.html\">hash</a>.\n       You should specialize this functor for your class, or define your own,\n       before trying to use one of the hashing classes.\n-   </P>\n-   <P>The hashing classes support all the usual associative container\n+   </p>\n+   <p>The hashing classes support all the usual associative container\n       functions, as well as some extra constructors specifying the number\n       of buckets, etc.\n-   </P>\n-   <P>Why would you want to use a hashing class instead of the\n+   </p>\n+   <p>Why would you want to use a hashing class instead of the\n       &quot;normal&quot; implementations?  Matt Austern writes:\n-      <BLOCKQUOTE><EM>[W]ith a well chosen hash function, hash tables\n+      <BLOCKQUOTE><em>[W]ith a well chosen hash function, hash tables\n       generally provide much better average-case performance than binary\n       search trees, and much worse worst-case performance.  So if your\n       implementation has hash_map, if you don't mind using nonstandard\n       components, and if you aren't scared about the possibility of\n       pathological cases, you'll probably get better performance from\n-      hash_map.</EM></BLOCKQUOTE>\n-   </P>\n-   <P>(Side note:  for those of you wondering, <B>&quot;Why wasn't a hash\n+      hash_map.</em></BLOCKQUOTE>\n+   </p>\n+   <p>(Side note:  for those of you wondering, <B>&quot;Why wasn't a hash\n       table included in the Standard in the first #!$@ place?&quot;</B> I'll\n       give a quick answer:  it was proposed, but too late and in too\n       unorganized a fashion.  Some sort of hashing will undoubtedly be\n       included in a future Standard.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"2\">Added members</A></H2>\n-   <P>Some of the classes in the Standard Library have additional\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"2\">Added members</a></h2>\n+   <p>Some of the classes in the Standard Library have additional\n       publicly-available members.  Of those, some are intended purely for\n       the implementors, for example, additional typedefs.  Those won't be\n       described here (or anywhere else).  This list will grow slowly, since\n       we expect it to be rare -- most extensions will be self-contained.\n-   </P>\n-   <P>\n-    <UL>\n-     <LI><TT>filebuf</TT>s have another ctor with this signature:<BR>\n-<TT>basic_filebuf(__c_file_type*, ios_base::openmode, int_type);</TT>\n-         <BR>This comes in very handy in a number of places, such as\n+   </p>\n+   <p>\n+    <ul>\n+     <li><code>filebuf</code>s have another ctor with this signature:<br>\n+<code>basic_filebuf(__c_file_type*, ios_base::openmode, int_type);</code>\n+         <br>This comes in very handy in a number of places, such as\n          attaching Unix sockets, pipes, and anything else which uses file\n          descriptors, into the IOStream buffering classes.  The three\n          arguments are as follows:\n-         <UL>\n-          <LI><TT>__c_file_type*      F   </TT>\n+         <ul>\n+          <li><code>__c_file_type*      F   </code>\n               // the __c_file_type typedef usually boils down to stdio's FILE\n-          <LI><TT>ios_base::openmode  M   </TT>\n+          <li><code>ios_base::openmode  M   </code>\n               // same as all the other uses of openmode\n-          <LI><TT>int_type            B   </TT>\n+          <li><code>int_type            B   </code>\n               // buffer size, defaults to BUFSIZ\n-         </UL>\n+         </ul>\n          For those wanting to use file descriptors instead of FILE*'s, I\n-         invite you to contemplate the mysteries of C's <TT>fdopen()</TT>.\n-    </UL>\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"3\">Allocators</A></H2>\n-   <P>This will be blank for a while.  It will describe all of the different\n+         invite you to contemplate the mysteries of C's <code>fdopen()</code>.\n+    </ul>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"3\">Allocators</a></h2>\n+   <p>This will be blank for a while.  It will describe all of the different\n       memory allocators, most inherited from SGI's code.  Input is solicited.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n-\n-<HR>\n-<H2><A NAME=\"4\">Compile-time checks</A></H2>\n-   <P>Currently libstdc++-v3 uses the concept checkers from the Boost\n-      library to perform <A HREF=\"../19_diagnostics/howto.html#3\">optional\n-      compile-time checking</A> of template instantiations of the standard\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n+\n+<hr>\n+<h2><a name=\"4\">Compile-time checks</a></h2>\n+   <p>Currently libstdc++-v3 uses the concept checkers from the Boost\n+      library to perform <a href=\"../19_diagnostics/howto.html#3\">optional\n+      compile-time checking</a> of template instantiations of the standard\n       containers.  They are described in the linked-to page.\n-   </P>\n-   <P>Return <A HREF=\"#top\">to top of page</A> or\n-      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n-   </P>\n+   </p>\n+   <p>Return <a href=\"#top\">to top of page</a> or\n+      <a href=\"../faq/index.html\">to the FAQ</a>.\n+   </p>\n \n \n \n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.4 2001/05/02 01:39:03 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: howto.html,v 1.5 2001/05/30 21:55:04 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>"}, {"sha": "e08f65ac99d39394138d503032da465ac55569a2", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 380, "deletions": 380, "changes": 760, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,377 +1,377 @@\n-<HTML>\n-<HEAD>\n-   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"libstdc++, libstdc++-v3, GCC, g++, libg++, STL\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"FAQ for the GNU libstdc++ effort.\">\n-   <TITLE>libstdc++-v3 FAQ</TITLE>\n-<LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n+<html>\n+<head>\n+   <meta HcodeP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"libstdc++, libstdc++-v3, GCC, g++, libg++, STL\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"FAQ for the GNU libstdc++ effort.\">\n+   <title>libstdc++-v3 FAQ</title>\n+<link REL=StyleSheet HREF=\"../lib3styles.css\">\n <!-- \n   ** Locations of \"the most recent snapshot is the Nth\" text are \n   ** answers 1_1, 1_4, 4_1, 5_6.\n -->\n-<!-- $Id: index.html,v 1.9 2001/05/30 21:55:04 pme Exp $ -->\n-</HEAD>\n-<BODY>\n+<!-- $Id: index.html,v 1.10 2001/07/18 21:37:06 pme Exp $ -->\n+</head>\n+<body>\n \n-<H1 CLASS=\"centered\">libstdc++ Frequently Asked Questions</H1>\n+<h1 CLASS=\"centered\">libstdc++ Frequently Asked Questions</h1>\n \n-<P>The latest version of this document is always available at\n-<A HREF=\"http://gcc.gnu.org/onlinedocs/libstdc++/faq/\">\n-http://gcc.gnu.org/onlinedocs/libstdc++/faq/</A>.</P>\n+<p>The latest version of this document is always available at\n+<a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/faq/\">\n+http://gcc.gnu.org/onlinedocs/libstdc++/faq/</a>.</p>\n \n-<P>To the <A HREF=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</A>.\n+<p>To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</a>.\n \n <!-- ####################################################### -->\n-<HR>\n-<H1>Questions</H1>\n-<OL>\n-   <LI><A HREF=\"#1_0\">General Information</A>\n+<hr>\n+<h1>Questions</h1>\n+<ol>\n+   <li><a href=\"#1_0\">General Information</a>\n    <!-- I suspect these will mostly be links to/into existing documents. -->\n-   <OL>\n-      <LI><A HREF=\"#1_1\">What is libstdc++-v3?</A>\n-      <LI><A HREF=\"#1_2\">Why should I use libstdc++?</A>\n-      <LI><A HREF=\"#1_3\">Who's in charge of it?</A>\n-      <LI><A HREF=\"#1_4\">How do I get libstdc++?</A>\n-      <LI><A HREF=\"#1_5\">When is libstdc++ going to be finished?</A>\n-      <LI><A HREF=\"#1_6\">How do I contribute to the effort?</A>\n-      <LI><A HREF=\"#1_7\">What happened to libg++?  I need that!</A>\n-      <LI><A HREF=\"#1_8\">What if I have more questions?</A>\n-   </OL>\n-\n-   <LI><A HREF=\"#2_0\">Installation</A>\n-      <OL>\n-         <LI><A HREF=\"#2_1\">How do I install libstdc++-v3?</A>\n-         <LI><A HREF=\"#2_2\">[removed]</A>\n-         <LI><A HREF=\"#2_3\">What is this CVS thing that you keep \n-                            mentioning?</A>\n-         <LI><A HREF=\"#2_4\">How do I know if it works?</A>\n-      </OL>\n-\n-   <LI><A HREF=\"#3_0\">Platform-Specific Issues</A>\n-      <OL>\n-         <LI><A HREF=\"#3_1\">Can libstdc++-v3 be used with &lt;my\n-                            favorite compiler&gt;?</A>\n-         <LI><A HREF=\"#3_2\">[removed]</A>\n-         <LI><A HREF=\"#3_3\">Building under DEC OSF kills the assembler</A>\n-      </OL>\n-\n-   <LI><A HREF=\"#4_0\">Known Bugs and Non-Bugs</A>\n-      <OL>\n-         <LI><A HREF=\"#4_1\">What works already?</A>\n-         <LI><A HREF=\"#4_2\">Bugs in gcc/g++ (not libstdc++-v3)</A>\n-         <LI><A HREF=\"#4_3\">Bugs in the C++ language/lib specification</A>\n-         <LI><A HREF=\"#4_4\">Things in libstdc++ that look like bugs</A>\n-           <UL>\n-             <LI><A HREF=\"#4_4_Weff\">-Weffc++ complains too much</A>\n-             <LI><A HREF=\"#4_4_rel_ops\">&quot;ambiguous overloads&quot;\n-                                 after including an old-style header</A>\n-             <LI><A HREF=\"#4_4_interface\">The g++-3 headers are\n-                                 <STRONG>not ours</STRONG></A>\n-             <LI><A HREF=\"#4_4_glibc\">compilation errors from streambuf.h</A>\n-             <LI><A HREF=\"#4_4_checks\">errors about <EM>*Cconcept</EM> and\n-                                 <EM>constraints</EM> in the STL...</A>\n-           </UL>\n-         <LI><A HREF=\"#4_5\">Aw, that's easy to fix!</A>\n-      </OL>\n-\n-   <LI><A HREF=\"#5_0\">Miscellaneous</A>\n-      <OL>\n-         <LI><A HREF=\"#5_1\">string::iterator is not char*;\n-                            vector&lt;T&gt;::iterator is not T*</A>\n-         <LI><A HREF=\"#5_2\">What's next after libstdc++-v3?</A>\n-         <LI><A HREF=\"#5_3\">What about the STL from SGI?</A>\n-         <LI><A HREF=\"#5_4\">Extensions and Backward Compatibility</A>\n-         <LI><A HREF=\"#5_5\">[removed]</A>\n-         <LI><A HREF=\"#5_6\">Is libstdc++-v3 thread-safe?</A>\n-         <LI><A HREF=\"#5_7\">How do I get a copy of the ISO C++ Standard?</A>\n-      </OL>\n-\n-</OL>\n-\n-<HR>\n+   <ol>\n+      <li><a href=\"#1_1\">What is libstdc++-v3?</a>\n+      <li><a href=\"#1_2\">Why should I use libstdc++?</a>\n+      <li><a href=\"#1_3\">Who's in charge of it?</a>\n+      <li><a href=\"#1_4\">How do I get libstdc++?</a>\n+      <li><a href=\"#1_5\">When is libstdc++ going to be finished?</a>\n+      <li><a href=\"#1_6\">How do I contribute to the effort?</a>\n+      <li><a href=\"#1_7\">What happened to libg++?  I need that!</a>\n+      <li><a href=\"#1_8\">What if I have more questions?</a>\n+   </ol>\n+\n+   <li><a href=\"#2_0\">Installation</a>\n+      <ol>\n+         <li><a href=\"#2_1\">How do I install libstdc++-v3?</a>\n+         <li><a href=\"#2_2\">[removed]</a>\n+         <li><a href=\"#2_3\">What is this CVS thing that you keep \n+                            mentioning?</a>\n+         <li><a href=\"#2_4\">How do I know if it works?</a>\n+      </ol>\n+\n+   <li><a href=\"#3_0\">Platform-Specific Issues</a>\n+      <ol>\n+         <li><a href=\"#3_1\">Can libstdc++-v3 be used with &lt;my\n+                            favorite compiler&gt;?</a>\n+         <li><a href=\"#3_2\">[removed]</a>\n+         <li><a href=\"#3_3\">Building under DEC OSF kills the assembler</a>\n+      </ol>\n+\n+   <li><a href=\"#4_0\">Known Bugs and Non-Bugs</a>\n+      <ol>\n+         <li><a href=\"#4_1\">What works already?</a>\n+         <li><a href=\"#4_2\">Bugs in gcc/g++ (not libstdc++-v3)</a>\n+         <li><a href=\"#4_3\">Bugs in the C++ language/lib specification</a>\n+         <li><a href=\"#4_4\">Things in libstdc++ that look like bugs</a>\n+           <ul>\n+             <li><a href=\"#4_4_Weff\">-Weffc++ complains too much</a>\n+             <li><a href=\"#4_4_rel_ops\">&quot;ambiguous overloads&quot;\n+                                 after including an old-style header</a>\n+             <li><a href=\"#4_4_interface\">The g++-3 headers are\n+                                 <strong>not ours</strong></a>\n+             <li><a href=\"#4_4_glibc\">compilation errors from streambuf.h</a>\n+             <li><a href=\"#4_4_checks\">errors about <em>*Cconcept</em> and\n+                                 <em>constraints</em> in the STL...</a>\n+           </ul>\n+         <li><a href=\"#4_5\">Aw, that's easy to fix!</a>\n+      </ol>\n+\n+   <li><a href=\"#5_0\">Miscellaneous</a>\n+      <ol>\n+         <li><a href=\"#5_1\">string::iterator is not char*;\n+                            vector&lt;T&gt;::iterator is not T*</a>\n+         <li><a href=\"#5_2\">What's next after libstdc++-v3?</a>\n+         <li><a href=\"#5_3\">What about the STL from SGI?</a>\n+         <li><a href=\"#5_4\">Extensions and Backward Compatibility</a>\n+         <li><a href=\"#5_5\">[removed]</a>\n+         <li><a href=\"#5_6\">Is libstdc++-v3 thread-safe?</a>\n+         <li><a href=\"#5_7\">How do I get a copy of the ISO C++ Standard?</a>\n+      </ol>\n+\n+</ol>\n+\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H1><A NAME=\"1_0\">1.0 General Information</A></H1>\n+<h1><a name=\"1_0\">1.0 General Information</a></h1>\n <!-- I suspect these will mostly be links to/into existing documents. -->\n-   <H2><A NAME=\"1_1\">1.1 What is libstdc++-v3?</A></H2>\n-      <P>The GNU Standard C++ Library v3, or libstdc++-2.9x, is an \n+   <h2><a name=\"1_1\">1.1 What is libstdc++-v3?</a></h2>\n+      <p>The GNU Standard C++ Library v3, or libstdc++-2.9x, is an \n          ongoing project to implement the ISO 14882 Standard C++ library \n          as described in chapters 17 through 27 and annex D.  As the \n          library reaches stable plateaus, it is captured in a snapshot\n          and released.  The current release is <A\n HREF=\"ftp://gcc.gnu.org/pub/libstdc++/libstdc++-2.92.tar.gz\">the\n-         eleventh snapshot</A>.  For those who want to see exactly how\n+         eleventh snapshot</a>.  For those who want to see exactly how\n          far the project has come, or just want the latest\n          bleeding-edge code, the up-to-date source is available over\n          anonymous CVS, and can even be browsed over the Web (see below). \n-      </P> \n-      <P>A more formal description of the V3 goals can be found in the\n-         official <A HREF=\"../17_intro/DESIGN\">design document</A>. \n-      </P> \n-\n-<HR>\n-   <H2><A NAME=\"1_2\">1.2 Why should I use libstdc++?</A></H2>\n-      <P>The completion of the ISO C++ standardization gave the\n+      </p> \n+      <p>A more formal description of the V3 goals can be found in the\n+         official <a href=\"../17_intro/DESIGN\">design document</a>. \n+      </p> \n+\n+<hr>\n+   <h2><a name=\"1_2\">1.2 Why should I use libstdc++?</a></h2>\n+      <p>The completion of the ISO C++ standardization gave the\n          C++ community a powerful set of reuseable tools in the form\n          of the C++ Standard Library.  However, all existing C++\n          implementations are (as the Draft Standard used to say)\n          &quot;incomplet and incorrekt,&quot; and many suffer from\n          limitations of the compilers that use them.\n-      </P> \n-      <P>The GNU C/C++/FORTRAN/&lt;pick-a-language&gt; compiler\n-         (<TT>gcc</TT>, <TT>g++</TT>, etc) is widely considered to be\n+      </p> \n+      <p>The GNU C/C++/FORTRAN/&lt;pick-a-language&gt; compiler\n+         (<code>gcc</code>, <code>g++</code>, etc) is widely considered to be\n          one of the leading compilers in the world.  Its development\n          has recently been taken over by the \n-         <A HREF=\"http://gcc.gnu.org/\">GCC team</A>.  All of\n+         <a href=\"http://gcc.gnu.org/\">GCC team</a>.  All of\n          the rapid development and near-legendary\n      <A\n-HREF=\"http://gcc.gnu.org/gcc-2.95/buildstat.html\">portability</A>\n+HREF=\"http://gcc.gnu.org/gcc-2.95/buildstat.html\">portability</a>\n          that are the hallmarks of an open-source project are being\n          applied to libstdc++.\n-      </P>\n-      <P>That means that all of the Standard classes and functions\n-         (such as <TT>string</TT>, <TT>vector&lt;&gt;</TT>, iostreams,\n+      </p>\n+      <p>That means that all of the Standard classes and functions\n+         (such as <code>string</code>, <code>vector&lt;&gt;</code>, iostreams,\n          and algorithms) will be freely available and fully compliant.\n          Programmers will no longer need to &quot;roll their own&quot;\n          nor be worried about platform-specific incompatabilities.\n-      </P>\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"1_3\">1.3 Who's in charge of it?</A></H2>\n-      <P>The libstdc++ project is contributed to by several developers\n+<hr>\n+   <h2><a name=\"1_3\">1.3 Who's in charge of it?</a></h2>\n+      <p>The libstdc++ project is contributed to by several developers\n          all over the world, in the same way as GCC or Linux.\n          Benjamin Kosnik, Gabriel Dos Reis, Phil Edwards, and Ulrich\n          Drepper are the lead maintainers of the CVS archive.\n-      </P>\n-      <P>Development and discussion is held on the libstdc++ mailing\n+      </p>\n+      <p>Development and discussion is held on the libstdc++ mailing\n          list.  Subscribing to the list, or searching the list\n          archives, is open to everyone.  You can read instructions for\n-         doing so on the <A HREF=\"http://gcc.gnu.org/libstdc++/\">homepage</A>.\n+         doing so on the <a href=\"http://gcc.gnu.org/libstdc++/\">homepage</a>.\n          If you have questions, ideas, code, or are just curious, sign up!\n-      </P>\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"1_4\">1.4 How do I get libstdc++?</A></H2>\n-      <P>The eleventh (and latest) snapshot of libstdc++-v3 is <A\n+<hr>\n+   <h2><a name=\"1_4\">1.4 How do I get libstdc++?</a></h2>\n+      <p>The eleventh (and latest) snapshot of libstdc++-v3 is <A\n HREF=\"ftp://gcc.gnu.org/pub/libstdc++/libstdc++-2.92.tar.gz\">\n-         available via ftp</A>.\n-      </P>\n-      <P>The <A HREF=\"http://gcc.gnu.org/libstdc++/\">homepage</A>\n+         available via ftp</a>.\n+      </p>\n+      <p>The <a href=\"http://gcc.gnu.org/libstdc++/\">homepage</a>\n          has instructions for retrieving the latest CVS sources, and for\n          browsing the CVS sources over the web.\n-      </P>\n-      <P>The subset commonly known as the Standard Template Library\n+      </p>\n+      <p>The subset commonly known as the Standard Template Library\n          (chapters 23 through 25, mostly) is adapted from the SGI STL,\n          which is also an ongoing work.<!-- Possibly a link to SGI's\n          STL here. -->\n-      </P> \n+      </p> \n \n-<HR>\n-   <H2><A NAME=\"1_5\">1.5 When is libstdc++ going to be finished?</A></H2>\n-<!--      <P>Nathan Myers gave the best of all possible answers in <A \n+<hr>\n+   <h2><a name=\"1_5\">1.5 When is libstdc++ going to be finished?</a></h2>\n+<!--      <p>Nathan Myers gave the best of all possible answers in <A \n          HREF=\"http://www.deja.com/getdoc.xp?AN=469581698&fmt=text\">a \n-         Usenet article</A>.</P>\n+         Usenet article</a>.</p>\n which is no longer available, thanks deja...-->\n-      <P>Nathan Myers gave the best of all possible answers, responding to a\n-         Usenet article asking this question:  <EM>Sooner, if you help.</EM>\n-      </P>\n+      <p>Nathan Myers gave the best of all possible answers, responding to a\n+         Usenet article asking this question:  <em>Sooner, if you help.</em>\n+      </p>\n \n \n-<HR>\n-   <H2><A NAME=\"1_6\">1.6 How do I contribute to the effort?</A></H2>\n-      <P>Here is <A HREF=\"../17_intro/contribute.html\">a\n-         page devoted to this topic</A>.  Subscribing to the mailing\n+<hr>\n+   <h2><a name=\"1_6\">1.6 How do I contribute to the effort?</a></h2>\n+      <p>Here is <a href=\"../17_intro/contribute.html\">a\n+         page devoted to this topic</a>.  Subscribing to the mailing\n          list (see above, or the homepage) is a very good idea if you\n          have something to contribute, or if you have spare time and\n          want to help.  Contributions don't have to be in the form of\n          source code; anybody who is willing to help write\n          documentation, for example, or has found a bug in code that\n          we all thought was working, is more than welcome!\n-      </P> \n+      </p> \n \n-<HR>\n-   <H2><A NAME=\"1_7\">1.7 What happened to libg++?  I need that!</A></H2>\n-      <P>The most recent libg++ README states that libg++ is no longer\n+<hr>\n+   <h2><a name=\"1_7\">1.7 What happened to libg++?  I need that!</a></h2>\n+      <p>The most recent libg++ README states that libg++ is no longer\n          being actively maintained.  It should not be used for new\n          projects, and is only being kicked along to support older code.\n-      </P>\n-      <P>The libg++ was designed and created when there was no Standard\n+      </p>\n+      <p>The libg++ was designed and created when there was no Standard\n          to provide guidance.  Classes like linked lists are now provided\n-         for by <TT>list&lt;T&gt;</TT> and do not need to be created by\n-         <TT>genclass</TT>.  (For that matter, templates exist now and\n+         for by <code>list&lt;T&gt;</code> and do not need to be created by\n+         <code>genclass</code>.  (For that matter, templates exist now and\n          are well-supported, whereas genclass (mostly) predates them.)\n-      </P>\n-      <P>There are other classes in libg++ that are not specified in the\n+      </p>\n+      <p>There are other classes in libg++ that are not specified in the\n          ISO Standard (e.g., statistical analysis).  While there are a\n          lot of really useful things that are used by a lot of people\n          (e.g., statistics :-), the Standards Committee couldn't include\n          everything, and so a lot of those &quot;obvious&quot; classes\n          didn't get included.\n-      </P>\n-      <P>Since libstdc++ is an implementation of the Standard Library, we\n+      </p>\n+      <p>Since libstdc++ is an implementation of the Standard Library, we\n          have no plans at this time to include non-Standard utilities\n          in the implementation, however handy they are.  (The extensions\n          provided in the SGI STL aren't maintained by us and don't get\n          a lot of our attention, because they don't require a lot of our\n          time.)  It is entirely plausable that the &quot;useful stuff&quot;\n          from libg++ might be extracted into an updated utilities library,\n          but nobody has stated such a project yet.\n-      </P>\n+      </p>\n       <!-- The advertisement, so to speak, might have to go.  Hmmmmm.  -->\n-      <P>(The <A HREF=\"http://www.boost.org/\">Boost</A> site houses free\n+      <p>(The <a href=\"http://www.boost.org/\">Boost</a> site houses free\n          C++ libraries that do varying things, and happened to be started\n          by members of the Standards Committee.  Certain &quot;useful\n          stuff&quot; classes will probably migrate there.)\n-      </P>\n-      <P>For the bold and/or desperate, the\n-         <A HREF=\"http://gcc.gnu.org/fom_serv/cache/33.html\">GCC FAQ</A>\n+      </p>\n+      <p>For the bold and/or desperate, the\n+         <a href=\"http://gcc.gnu.org/fom_serv/cache/33.html\">GCC FAQ</a>\n          describes where to find the last libg++ source.\n-      </P>\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"1_8\">1.8 What if I have more questions?</A></H2>\n-      <P>If you have read the README and RELEASE-NOTES files, and your\n+<hr>\n+   <h2><a name=\"1_8\">1.8 What if I have more questions?</a></h2>\n+      <p>If you have read the README and RELEASE-NOTES files, and your\n          question remains unanswered, then just ask the mailing list.\n          At present, you do not need to be subscribed to the list to\n          send a message to it.  More information is available on the\n          homepage (including how to browse the list archives); to send\n-         to the list, use <A HREF=\"mailto:libstdc++@gcc.gnu.org\">\n-         <CODE>libstdc++@gcc.gnu.org</CODE></A>.\n-      </P>\n-      <P>If you have a question that you think should be included here,\n-         or if you have a question <EM>about</EM> a question/answer here,\n-         contact <A HREF=\"mailto:pme@gcc.gnu.org\">Phil Edwards</A>\n-         or <A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-      </P>\n-\n-<HR>\n-\n-<H1><A NAME=\"2_0\">2.0 Installation</A></H1>\n-   <H2><A NAME=\"2_1\">2.1 How do I install libstdc++-v3?</A></H2>\n-      <P>Complete instructions are not given here (this is a FAQ, not\n+         to the list, use <a href=\"mailto:libstdc++@gcc.gnu.org\">\n+         <CODE>libstdc++@gcc.gnu.org</CODE></a>.\n+      </p>\n+      <p>If you have a question that you think should be included here,\n+         or if you have a question <em>about</em> a question/answer here,\n+         contact <a href=\"mailto:pme@gcc.gnu.org\">Phil Edwards</a>\n+         or <a href=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</a>.\n+      </p>\n+\n+<hr>\n+\n+<h1><a name=\"2_0\">2.0 Installation</a></h1>\n+   <h2><a name=\"2_1\">2.1 How do I install libstdc++-v3?</a></h2>\n+      <p>Complete instructions are not given here (this is a FAQ, not\n          an installation document), but the tools required are few:\n-      </P>\n-         <UL>\n-            <LI> A 3.x release of GCC.  Note that building GCC is much\n+      </p>\n+         <ul>\n+            <li> A 3.x release of GCC.  Note that building GCC is much\n                  easier and more automated than building the GCC 2.[78]\n                  series was.  If you are using GCC 2.95, you can still\n                  build earlier snapshots of libstdc++.\n-            <LI> GNU Make is recommended, but should not be required.\n-            <LI> The GNU Autotools are needed if you are messing with\n+            <li> GNU Make is recommended, but should not be required.\n+            <li> The GNU Autotools are needed if you are messing with\n                  the configury or makefiles.\n-         </UL>\n-      <P>The file <A HREF=\"../documentation.html\">documentation.html</A>\n+         </ul>\n+      <p>The file <a href=\"../documentation.html\">documentation.html</a>\n          provides a good overview of the steps necessary to build, install,\n          and use the library.  Instructions for configuring the library\n          with new flags such as --enable-threads are there also, as well as\n          patches and instructions for working with GCC 2.95.\n-      </P>\n-      <P>The top-level install.html and\n-         <A HREF=\"../17_intro/RELEASE-NOTES\">RELEASE-NOTES</A> files contain\n+      </p>\n+      <p>The top-level install.html and\n+         <a href=\"../17_intro/RELEASE-NOTES\">RELEASE-NOTES</a> files contain\n          the exact build and installation instructions.  You may wish to\n          browse those files over CVSweb ahead of time to get a feel for\n          what's required.  RELEASE-NOTES is located in the\n          &quot;.../docs/17_intro/&quot; directory of the distribution.\n-      </P> \n+      </p> \n \n-<HR>\n-   <H2><A NAME=\"2_2\">2.2 [removed]</A></H2>\n-      <P>This question has become moot and has been removed.  The stub\n+<hr>\n+   <h2><a name=\"2_2\">2.2 [removed]</a></h2>\n+      <p>This question has become moot and has been removed.  The stub\n          is here to preserve numbering (and hence links/bookmarks).\n-      </P>\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"2_3\">2.3 What is this CVS thing that you\n-                         keep mentioning?</A></H2>\n-      <P>The <EM>Concurrent Versions System</EM> is one of several revision\n+<hr>\n+   <h2><a name=\"2_3\">2.3 What is this CVS thing that you\n+                         keep mentioning?</a></h2>\n+      <p>The <em>Concurrent Versions System</em> is one of several revision\n          control packages.  It was selected for GNU projects because it's\n          free (speech), free (beer), and very high quality.  The <A\n          HREF=\"http://www.gnu.org/software/cvs/cvs.html\">CVS entry in\n-         the GNU software catalogue</A> has a better description as \n+         the GNU software catalogue</a> has a better description as \n          well as a\n-         <A HREF=\"http://www.cvshome.org/\">link to the makers of CVS</A>. \n-      </P>\n-      <P>The &quot;anonymous client checkout&quot; feature of CVS is\n+         <a href=\"http://www.cvshome.org/\">link to the makers of CVS</a>. \n+      </p>\n+      <p>The &quot;anonymous client checkout&quot; feature of CVS is\n          similar to anonymous FTP in that it allows anyone to retrieve\n          the latest libstdc++ sources.\n-      </P>\n-      <P>After the first of April, American users will have a\n+      </p>\n+      <p>After the first of April, American users will have a\n          &quot;/pharmacy&quot; command-line option...\n          <!-- wonder how long that'll live -->\n-      </P>\n-\n-<HR>\n-   <H2><A NAME=\"2_4\">2.4 How do I know if it works?</A></H2>\n-      <P>libstdc++-v3 comes with its own testsuite.  You do not need\n-         to actually install the library (&quot;<TT>make\n-         install</TT>&quot;) to run the testsuite.\n-      </P>\n-      <P>To run the testsuite on the library after building it, use\n+      </p>\n+\n+<hr>\n+   <h2><a name=\"2_4\">2.4 How do I know if it works?</a></h2>\n+      <p>libstdc++-v3 comes with its own testsuite.  You do not need\n+         to actually install the library (&quot;<code>make\n+         install</code>&quot;) to run the testsuite.\n+      </p>\n+      <p>To run the testsuite on the library after building it, use\n          &quot;make check&quot; while in your build directory.  To run\n          the testsuite on the library after building and installing it,\n          use &quot;make check-install&quot; instead.\n-      </P>\n-      <P>If you find bugs in the testsuite programs themselves, or if\n+      </p>\n+      <p>If you find bugs in the testsuite programs themselves, or if\n          you think of a new test program that should be added to the\n          suite, <B>please</B> write up your idea and send it to the list!\n-      </P>\n-\n-<HR>\n-<H1><A NAME=\"3_0\">3.0 Platform-Specific Issues</A></H1>\n-   <H2><A NAME=\"3_1\">3.1 Can libstdc++-v3 be used with &lt;my\n-                         favorite compiler&gt;?</A></H2>\n-      <P>Probably not.  Yet.</P>\n-      <P>Because GCC advances so rapidly, development and testing of\n+      </p>\n+\n+<hr>\n+<h1><a name=\"3_0\">3.0 Platform-Specific Issues</a></h1>\n+   <h2><a name=\"3_1\">3.1 Can libstdc++-v3 be used with &lt;my\n+                         favorite compiler&gt;?</a></h2>\n+      <p>Probably not.  Yet.</p>\n+      <p>Because GCC advances so rapidly, development and testing of\n          libstdc++ is being done almost entirely under that compiler.\n          If you are curious about whether other, lesser compilers\n          (*grin*) support libstdc++, you are more than welcome to try.\n          Configuring and building the library (see above) will still\n          require certain tools, however.  Also keep in mind that\n-         <EM>building</EM> libstdc++ does not imply that your compiler\n-         will be able to <EM>use</EM> all of the features found in the\n+         <em>building</em> libstdc++ does not imply that your compiler\n+         will be able to <em>use</em> all of the features found in the\n          C++ Standard Library.\n-      </P>\n-      <P>Since the goal of ISO Standardization is for all C++\n+      </p>\n+      <p>Since the goal of ISO Standardization is for all C++\n          implementations to be able to share code, the final libstdc++\n          should, in theory, be useable under any ISO-compliant\n          compiler.  It will still be targeted and optimized for\n          GCC/g++, however.\n-      </P> \n+      </p> \n \n-<HR>\n-   <H2><A NAME=\"3_2\">3.2 [removed]</A></H2>\n-      <P>This question has become moot and has been removed.  The stub\n+<hr>\n+   <h2><a name=\"3_2\">3.2 [removed]</a></h2>\n+      <p>This question has become moot and has been removed.  The stub\n          is here to preserve numbering (and hence links/bookmarks).\n-      </P>\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"3_3\">3.3 Building DEC OSF kills the assembler</A></H2>\n-      <P>The <TT>atomicity.h</TT> header for the Alpha processor\n+<hr>\n+   <h2><a name=\"3_3\">3.3 Building DEC OSF kills the assembler</a></h2>\n+      <p>The <code>atomicity.h</code> header for the Alpha processor\n          currently uses pseudo-operators which the DEC assembler\n          doesn't understand (in particular, .subsection and .previous).\n-         The simple solution is to install GNU <TT>as</TT> and arrange\n+         The simple solution is to install GNU <code>as</code> and arrange\n          for the GCC build to use it (or merge the sources and build\n          it during the bootstrap).\n-      </P>\n-      <P>Anyone who\n-         <A HREF=\"http://gcc.gnu.org/ml/libstdc++/2000-12/msg00279.html\">knows\n-         the DEC assembler well enough</A> to provide the equivalent of\n+      </p>\n+      <p>Anyone who\n+         <a href=\"http://gcc.gnu.org/ml/libstdc++/2000-12/msg00279.html\">knows\n+         the DEC assembler well enough</a> to provide the equivalent of\n          these two pseudos would win praise and accolades from many.\n-      </P>\n+      </p>\n \n \n-<HR>\n-<H1><A NAME=\"4_0\">4.0 Known Bugs and Non-Bugs</A></H1>\n-   <EM>Note that this section can get rapdily outdated -- such is the\n+<hr>\n+<h1><a name=\"4_0\">4.0 Known Bugs and Non-Bugs</a></h1>\n+   <em>Note that this section can get rapdily outdated -- such is the\n    nature of an open-source project.  For the latest information, join\n    the mailing list or look through recent archives.   The RELEASE-\n-   NOTES and BUGS files are generally kept up-to-date.</EM> \n+   NOTES and BUGS files are generally kept up-to-date.</em> \n \n-   <H2><A NAME=\"4_1\">4.1 What works already?</A></H2>\n-      <P>This is a verbatim clip from the &quot;Status&quot; section\n+   <h2><a name=\"4_1\">4.1 What works already?</a></h2>\n+      <p>This is a verbatim clip from the &quot;Status&quot; section\n           of the RELEASE-NOTES for the latest snapshot.\n-      </P> \n+      </p> \n \n <!-- Yeah, I meant that \"verbatim clip\" thing literally... :-)  -->\n \n@@ -402,88 +402,88 @@ <H2><A NAME=\"4_1\">4.1 What works already?</A></H2>\n </pre>\n \n \n-<HR>\n-   <H2><A NAME=\"4_2\">4.2 Bugs in gcc/g++ (not libstdc++-v3)</A></H2>\n-      <P>This is by no means meant to be complete nor exhaustive, but\n+<hr>\n+   <h2><a name=\"4_2\">4.2 Bugs in gcc/g++ (not libstdc++-v3)</a></h2>\n+      <p>This is by no means meant to be complete nor exhaustive, but\n          mentions some problems that users may encounter when building\n          or using libstdc++.  If you are experiencing one of these\n          problems, you can find more information on the libstdc++ and\n          the GCC mailing lists.\n-      </P>\n-      <UL>\n-         <LI>As of 2.91, these bugs have all been fixed.  We look forward\n+      </p>\n+      <ul>\n+         <li>As of 2.91, these bugs have all been fixed.  We look forward\n              to new ones, well, not exactly...\n-      </UL>\n+      </ul>\n \n-<HR>\n-   <H2><A NAME=\"4_3\">4.3 Bugs in the C++ language/lib specification</A></H2>\n-      <P>Yes, unfortunately, there are some.  In a <A \n+<hr>\n+   <h2><a name=\"4_3\">4.3 Bugs in the C++ language/lib specification</a></h2>\n+      <p>Yes, unfortunately, there are some.  In a <A \n HREF=\"http://gcc.gnu.org/ml/libstdc++/1998/msg00006.html\">message\n-to the list</A>, Nathan Myers announced that he has started a list of\n+to the list</a>, Nathan Myers announced that he has started a list of\n          problems in the ISO C++ Standard itself, especially with\n          regard to the chapters that concern the library.  The list\n          itself is <A\n          HREF=\"http://www.cantrip.org/draft-bugs.txt\">posted on his\n-         website</A>.  Developers who are having problems interpreting\n+         website</a>.  Developers who are having problems interpreting\n          the Standard may wish to consult his notes.\n-      </P>\n-      <P>For those people who are not part of the ISO Library Group\n+      </p>\n+      <p>For those people who are not part of the ISO Library Group\n          (i.e., nearly all of us needing to read this page in the first\n          place :-), a public list of the library defects is occasionally\n-         published <A HREF=\"http://anubis.dkuug.dk/jtc1/sc22/wg21/\">here</A>.\n-      </P>\n+         published <a href=\"http://anubis.dkuug.dk/jtc1/sc22/wg21/\">here</a>.\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"4_4\">4.4 Things in libstdc++ that look like bugs</A></H2>\n-      <P>There are things which are not bugs in the compiler (4.2) nor\n+<hr>\n+   <h2><a name=\"4_4\">4.4 Things in libstdc++ that look like bugs</a></h2>\n+      <p>There are things which are not bugs in the compiler (4.2) nor\n          the language specification (4.3), but aren't really bugs in\n          libstdc++, either.  Really!  Please do not report these as bugs.\n-      </P>\n-      <A NAME=\"4_4_Weff\">\n-        <P><STRONG>-Weffc++</STRONG>\n+      </p>\n+      <a name=\"4_4_Weff\">\n+        <p><strong>-Weffc++</strong>\n            The biggest of these is the quadzillions of warnings about the\n-           library headers emitted when <TT>-Weffc++</TT> is used.  Making\n+           library headers emitted when <code>-Weffc++</code> is used.  Making\n            libstdc++ &quot;-Weffc++-clean&quot; is not a goal of the project,\n            for a few reasons.  Mainly, that option tries to enforce\n            object-oriented programming, while the Standard Library isn't\n            necessarily trying to be OO.  There are multiple solutions\n            under discussion.\n-        </P>\n-      </A>\n-      <A NAME=\"4_4_rel_ops\">\n-        <P><STRONG>rel_ops</STRONG>\n-           Another is the <TT>rel_ops</TT> namespace and the template\n+        </p>\n+      </a>\n+      <a name=\"4_4_rel_ops\">\n+        <p><strong>rel_ops</strong>\n+           Another is the <code>rel_ops</code> namespace and the template\n            comparison operator functions contained therein.  If they become\n            visible in the same namespace as other comparison functions\n-           (e.g., '<TT>using</TT>' them and the &lt;iterator&gt; header),\n+           (e.g., '<code>using</code>' them and the &lt;iterator&gt; header),\n            then you will suddenly be faced with huge numbers of ambiguity\n            errors.  This was discussed on the -v3 list; Nathan Myers\n-           <A HREF=\"http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\">sums\n-           things up here</A>.\n-        </P>\n-      </A>\n-      <A NAME=\"4_4_interface\"><H3>The g++-3 headers are\n-                                      <EM>not ours</EM></H3>\n-        <P>If you have found an extremely broken header file which is\n+           <a href=\"http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\">sums\n+           things up here</a>.\n+        </p>\n+      </a>\n+      <a name=\"4_4_interface\"><h3>The g++-3 headers are\n+                                      <em>not ours</em></h3>\n+        <p>If you have found an extremely broken header file which is\n            causing problems for you, look carefully before submitting a\n            &quot;high&quot; priority bug report (which you probably shouldn't\n            do anyhow; see the last paragraph of the page describing\n-         <A HREF=\"http://gcc.gnu.org/gnatswrite.html\">the GCC bug database</A>).\n-        </P>\n-        <P>If the headers are in <CODE>${prefix}/include/g++-3</CODE>, then\n+         <a href=\"http://gcc.gnu.org/gnatswrite.html\">the GCC bug database</a>).\n+        </p>\n+        <p>If the headers are in <CODE>${prefix}/include/g++-3</CODE>, then\n            you are using the old libstdc++-v2 library, which is nonstandard\n            and unmaintained.  Do not report problems with -v2 to the -v3\n            mailing list.\n-        </P>\n-        <P>Currently our header files are installed in\n+        </p>\n+        <p>Currently our header files are installed in\n            <CODE>${prefix}/include/g++-v3</CODE> (see the 'v'?).  This may\n            change with the next release of GCC, as it may be too confusing,\n-           but <A HREF=\"http://gcc.gnu.org/ml/gcc/2000-10/msg00732.html\">the\n-           question has not yet been decided</A>.\n-        </P>\n-      </A>\n-      <A NAME=\"4_4_glibc\">\n-        <P><STRONG>glibc</STRONG>\n+           but <a href=\"http://gcc.gnu.org/ml/gcc/2000-10/msg00732.html\">the\n+           question has not yet been decided</a>.\n+        </p>\n+      </a>\n+      <a name=\"4_4_glibc\">\n+        <p><strong>glibc</strong>\n            If you're on a GNU/Linux system and have just upgraded to\n            glibc 2.2, but are still using gcc 2.95.2, then you should have\n            read the glibc FAQ, specifically 2.34:\n@@ -496,192 +496,192 @@ <H2><A NAME=\"4_4\">4.4 Things in libstdc++ that look like bugs</A></H2>\n http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n    </PRE>\n            Note that 2.95.x shipped with the\n-           <A HREF=\"#4_4_interface\">old v2 library</A> which is no longer\n+           <a href=\"#4_4_interface\">old v2 library</a> which is no longer\n            maintained.  Also note that gcc 2.95.3 fixes this problem, but\n            requires a separate patch for libstdc++-v3.\n-        </P>\n-      </A>\n-      <A NAME=\"4_4_checks\">\n-        <P><STRONG>concept checks</STRONG>\n+        </p>\n+      </a>\n+      <a name=\"4_4_checks\">\n+        <p><strong>concept checks</strong>\n            If you see compilation errors containing messages about\n-           <TT> <EM>foo</EM>Concept </TT>and a<TT> constraints </TT>\n+           <code> <em>foo</em>Concept </code>and a<code> constraints </code>\n            member function, then most likely you have violated one of the\n            requirements for types used during instantiation of template\n            containers and functions.  For example, EqualityComparableConcept\n            appears if your types must be comparable with == and you have not\n            provided this capability (a typo, or wrong visibility, or you\n            just plain forgot, etc).\n-        </P>\n-        <P>More information, including how to optionally enable/disable the\n+        </p>\n+        <p>More information, including how to optionally enable/disable the\n            checks, is available\n-           <A HREF=\"../19_diagnostics/howto.html#3\">here</A>.\n-        </P>\n-      </A>\n+           <a href=\"../19_diagnostics/howto.html#3\">here</a>.\n+        </p>\n+      </a>\n \n-<HR>\n-   <H2><A NAME=\"4_5\">4.5 Aw, that's easy to fix!</A></H2>\n-      <P>If you have found a bug in the library and you think you have\n+<hr>\n+   <h2><a name=\"4_5\">4.5 Aw, that's easy to fix!</a></h2>\n+      <p>If you have found a bug in the library and you think you have\n          a working fix, then send it in!  The main GCC site has a page\n-         on <A HREF=\"http://gcc.gnu.org/contribute.html\">submitting\n-         patches</A> that covers the procedure, but for libstdc++ you\n+         on <a href=\"http://gcc.gnu.org/contribute.html\">submitting\n+         patches</a> that covers the procedure, but for libstdc++ you\n          should also send the patch to our mailing list in addition to\n          the GCC patches mailing list.  The libstdc++\n-         <A HREF=\"../17_intro/contribute.html\">contributors' page</A>\n+         <a href=\"../17_intro/contribute.html\">contributors' page</a>\n          also talks about how to submit patches.\n-      </P>\n-      <P>In addition to the description, the patch, and the ChangeLog\n+      </p>\n+      <p>In addition to the description, the patch, and the ChangeLog\n          entry, it is a Good Thing if you can additionally create a small\n          test program to test for the presence of the bug that your\n          patch fixes.  Bugs have a way of being reintroduced; if an old\n          bug creeps back in, it will be caught immediately by the \n-         <A HREF=\"#2_4\">testsuite</A> -- but only if such a test exists.\n-      </P>\n-\n-<HR>\n-<H1><A NAME=\"5_0\">5.0 Miscellaneous</A></H1>\n-   <H2><A NAME=\"5_1\">5.1 string::iterator is not char*;\n-                     vector&lt;T&gt;::iterator is not T*</A></H2>\n-      <P>If you have code that depends on container&lt;T&gt; iterators\n+         <a href=\"#2_4\">testsuite</a> -- but only if such a test exists.\n+      </p>\n+\n+<hr>\n+<h1><a name=\"5_0\">5.0 Miscellaneous</a></h1>\n+   <h2><a name=\"5_1\">5.1 string::iterator is not char*;\n+                     vector&lt;T&gt;::iterator is not T*</a></h2>\n+      <p>If you have code that depends on container&lt;T&gt; iterators\n          being implemented as pointer-to-T, your code is broken.\n-      </P>\n-      <P>While there are arguments for iterators to be implemented in\n+      </p>\n+      <p>While there are arguments for iterators to be implemented in\n          that manner, A) they aren't very good ones in the long term,\n          and B) they were never guaranteed by the Standard anyway.  The\n          type-safety achieved by making iterators a real class rather\n-         than a typedef for <TT>T*</TT> outweighs nearly all opposing\n+         than a typedef for <code>T*</code> outweighs nearly all opposing\n          arguments.\n-      </P>\n-      <P>Code which does assume that a vector iterator <code> i </code>\n+      </p>\n+      <p>Code which does assume that a vector iterator <code> i </code>\n          is a pointer can often be fixed by changing <code> i </code> in\n          certain expressions to <code> &amp;*i </code>.  Future revisions\n          of the Standard are expected to bless this usage for\n          vector&lt;&gt; (but not for basic_string&lt;&gt;).\n-      </P>\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"5_2\">5.2 What's next after libstdc++-v3?</A></H2>\n-      <P>Hopefully, not much.  The goal of libstdc++-v3 is to produce\n+<hr>\n+   <h2><a name=\"5_2\">5.2 What's next after libstdc++-v3?</a></h2>\n+      <p>Hopefully, not much.  The goal of libstdc++-v3 is to produce\n          a fully-compliant, fully-portable Standard Library.  After that,\n-         we're mostly done:  there won't <EM>be</EM> any more compliance\n+         we're mostly done:  there won't <em>be</em> any more compliance\n          work to do.  However:\n-      </P>\n-      <OL>\n-      <LI><P>The ISO Committee will meet periodically to review Defect Reports\n+      </p>\n+      <ol>\n+      <li><p>The ISO Committee will meet periodically to review Defect Reports\n          in the C++ Standard.  Undoubtedly some of these will result in\n          changes to the Standard, which will be reflected in patches to\n          libstdc++.  Some of that is already happening, see 4.2.  Some of\n          those changes are being predicted by the library maintainers, and\n          we add code to the library based on what the current proposed\n          resolution specifies.\n-      </P>\n-      <LI><P>Performance tuning.  Lots of performance tuning.  This too is\n+      </p>\n+      <li><p>Performance tuning.  Lots of performance tuning.  This too is\n          already underway for post-3.0 releases, starting with memory\n          expansion in container classes and buffer usage in synchronized\n          stream objects.\n-      </P>\n-      <LI><P>An ABI for libstdc++ will eventually be developed, so that\n+      </p>\n+      <li><p>An ABI for libstdc++ will eventually be developed, so that\n          multiple binary-incompatible copies of the library can be replaced\n          with a single backwards-compatible library, like libgcc_s.so is.\n-      </P>\n-      <LI><P>The current libstdc++ contains extensions to the Library which\n+      </p>\n+      <li><p>The current libstdc++ contains extensions to the Library which\n          must be explicitly requested by client code (for example, the\n          hash tables from SGI).  Other extensions may be added to\n          libstdc++-v3 if they seem to be &quot;standard&quot; enough.\n          (For example, the &quot;long long&quot; type from C99.)\n          Bugfixes and rewrites (to improve or fix thread safety, for\n          instance) will of course be a continuing task.\n-      </P>\n-      </OL>\n-      <P><A\n+      </p>\n+      </ol>\n+      <p><A\n HREF=\"http://gcc.gnu.org/ml/libstdc++/1999/msg00080.html\">This\n-         question</A> about the next libstdc++ prompted some brief but\n+         question</a> about the next libstdc++ prompted some brief but\n          interesting <A\n-HREF=\"http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html\">speculation</A>.\n-      </P>\n+HREF=\"http://gcc.gnu.org/ml/libstdc++/1999/msg00084.html\">speculation</a>.\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"5_3\">5.3 What about the STL from SGI?</A></H2>\n-      <P>The <A HREF=\"http://www.sgi.com/Technology/STL/\">STL from SGI</A>,\n+<hr>\n+   <h2><a name=\"5_3\">5.3 What about the STL from SGI?</a></h2>\n+      <p>The <a href=\"http://www.sgi.com/Technology/STL/\">STL from SGI</a>,\n          version 3.3, was the most recent merge of the STL codebase.  The\n          code in libstdc++ contains many fixes and changes, and it is\n          very likely that the SGI code is no longer under active\n          development.  We expect that no future merges will take place.\n-      </P>\n-      <P>In particular, <TT>string</TT> is not from SGI and makes no\n+      </p>\n+      <p>In particular, <code>string</code> is not from SGI and makes no\n          use of their &quot;rope&quot; class (which is included as an\n-         optional extension), nor is <TT>valarray</TT> and some others.\n-         Classes like <TT>vector&lt;&gt;</TT> are, however.\n-      </P>\n-      <P>The FAQ for SGI's STL (one jump off of their main page) is\n+         optional extension), nor is <code>valarray</code> and some others.\n+         Classes like <code>vector&lt;&gt;</code> are, however.\n+      </p>\n+      <p>The FAQ for SGI's STL (one jump off of their main page) is\n          recommended reading.\n-      </P>\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"5_4\">5.4 Extensions and Backward Compatibility</A></H2>\n-      <P>Although you can specify <TT>-I</TT> options to make the\n+<hr>\n+   <h2><a name=\"5_4\">5.4 Extensions and Backward Compatibility</a></h2>\n+      <p>Although you can specify <code>-I</code> options to make the\n          preprocessor search the g++-v3/ext and /backward directories,\n          it is better to refer to files there by their path, as in:\n          <!-- Careful, the leading spaces in PRE show up directly. -->\n-      </P>\n+      </p>\n          <PRE>\n        #include &lt;ext/hash_map&gt;\n          </PRE>\n-      <P>Extensions to the library have\n-         <A HREF=\"../ext/howto.html\">their own page</A>.\n-      </P>\n+      <p>Extensions to the library have\n+         <a href=\"../ext/howto.html\">their own page</a>.\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"5_5\">5.5 [removed]</A></H2>\n-      <P>This question has become moot and has been removed.  The stub\n+<hr>\n+   <h2><a name=\"5_5\">5.5 [removed]</a></h2>\n+      <p>This question has become moot and has been removed.  The stub\n          is here to preserve numbering (and hence links/bookmarks).\n-      </P>\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"5_6\">5.6 Is libstdc++-v3 thread-safe?</A></H2>\n-      <P>Quick answer:  no, as of 2.92 (eleventh snapshot), the\n+<hr>\n+   <h2><a name=\"5_6\">5.6 Is libstdc++-v3 thread-safe?</a></h2>\n+      <p>Quick answer:  no, as of 2.92 (eleventh snapshot), the\n          library is not appropriate for multithreaded access.  The\n          string class is MT-safe.\n-      </P>\n-      <P>This is assuming that your idea of &quot;multithreaded&quot;\n+      </p>\n+      <p>This is assuming that your idea of &quot;multithreaded&quot;\n          is the same as ours...  The general question of multithreading\n          and libstdc++-v3 is addressed in the chapter-specific advice for\n-<A HREF=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/howto.html#3\">Library\n-         Introduction</A>.  Threadsafe containers are covered in\n+<a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/howto.html#3\">Library\n+         Introduction</a>.  Threadsafe containers are covered in\n          more detail in\n-<A HREF=\"http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html\">the\n-         Received Wisdom section on containers</A>.\n+<a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html\">the\n+         Received Wisdom section on containers</a>.\n          <!-- I have successfully evaded the topic; my work here is\n               done- no, wait, I have to write those other sections... -->\n-      </P>\n+      </p>\n \n-<HR>\n-   <H2><A NAME=\"5_7\">5.7 How do I get a copy of the ISO C++ Standard?</A></H2>\n-      <P>Copies of the full ISO 14882 standard are available on line via the\n+<hr>\n+   <h2><a name=\"5_7\">5.7 How do I get a copy of the ISO C++ Standard?</a></h2>\n+      <p>Copies of the full ISO 14882 standard are available on line via the\n          ISO mirror site for committee members.  Non-members, or those who\n          have not paid for the privilege of sitting on the committee and\n          sustained their two-meeting commitment for voting rights, may get a\n          copy of the standard from their respective national standards\n          organization.  In the USA, this national standards organization is\n-         ANSI and their website is right <A HREF=\"http://www.ansi.org\">here</A>.\n+         ANSI and their website is right <a href=\"http://www.ansi.org\">here</a>.\n          (And if you've already registered with them, clicking this link will\n          take you to directly to the place where you can\n-<A HREF=\"http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998\">buy\n-         the standard on-line</A>.\n-      </P>\n-      <P>Who is your country's member body?  Visit the\n-         <A HREF=\"http://www.iso.ch/\">ISO homepage</A> and find out!\n-      </P>\n+<a href=\"http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%2D1998\">buy\n+         the standard on-line</a>.\n+      </p>\n+      <p>Who is your country's member body?  Visit the\n+         <a href=\"http://www.iso.ch/\">ISO homepage</a> and find out!\n+      </p>\n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: index.html,v 1.9 2001/05/30 21:55:04 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: index.html,v 1.10 2001/07/18 21:37:06 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>\n "}, {"sha": "accb087bec95faed6f6d2c3eee730da15de2b45a", "filename": "libstdc++-v3/docs/html/faq/index.txt", "status": "modified", "additions": 177, "deletions": 177, "changes": 354, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,7 +1,7 @@\n \n                      libstdc++ Frequently Asked Questions\n \n-   The latest version of this document is always available at\n+   The   latest   version   of  this  document  is  always  available  at\n    [1]http://gcc.gnu.org/onlinedocs/libstdc++/faq/.\n \n    To the [2]libstdc++-v3 homepage.\n@@ -33,7 +33,7 @@\n          3. [24]Bugs in the C++ language/lib specification\n          4. [25]Things in libstdc++ that look like bugs\n                o [26]-Weffc++ complains too much\n-               o [27]\"ambiguous overloads\" after including an old-style\n+               o [27]\"ambiguous  overloads\"  after including an old-style\n                  header\n                o [28]The g++-3 headers are not ours\n                o [29]compilation errors from streambuf.h\n@@ -54,13 +54,13 @@\n \n 1.1 What is libstdc++-v3?\n \n-   The GNU Standard C++ Library v3, or libstdc++-2.9x, is an ongoing\n-   project to implement the ISO 14882 Standard C++ library as described\n-   in chapters 17 through 27 and annex D. As the library reaches stable\n-   plateaus, it is captured in a snapshot and released. The current\n-   release is [40]the eleventh snapshot. For those who want to see\n-   exactly how far the project has come, or just want the latest\n-   bleeding-edge code, the up-to-date source is available over anonymous\n+   The  GNU  Standard  C++  Library  v3, or libstdc++-2.9x, is an ongoing\n+   project  to  implement the ISO 14882 Standard C++ library as described\n+   in  chapters  17 through 27 and annex D. As the library reaches stable\n+   plateaus,  it  is  captured  in  a  snapshot and released. The current\n+   release  is  [40]the  eleventh  snapshot.  For  those  who want to see\n+   exactly  how  far  the  project  has  come,  or  just  want the latest\n+   bleeding-edge  code, the up-to-date source is available over anonymous\n    CVS, and can even be browsed over the Web (see below).\n \n    A more formal description of the V3 goals can be found in the official\n@@ -70,94 +70,94 @@\n 1.2 Why should I use libstdc++?\n \n    The completion of the ISO C++ standardization gave the C++ community a\n-   powerful set of reuseable tools in the form of the C++ Standard\n-   Library. However, all existing C++ implementations are (as the Draft\n-   Standard used to say) \"incomplet and incorrekt,\" and many suffer from\n+   powerful  set  of  reuseable  tools  in  the  form of the C++ Standard\n+   Library.  However,  all existing C++ implementations are (as the Draft\n+   Standard  used to say) \"incomplet and incorrekt,\" and many suffer from\n    limitations of the compilers that use them.\n \n-   The GNU C/C++/FORTRAN/<pick-a-language> compiler (gcc, g++, etc) is\n+   The  GNU  C/C++/FORTRAN/<pick-a-language>  compiler (gcc, g++, etc) is\n    widely considered to be one of the leading compilers in the world. Its\n-   development has recently been taken over by the [42]GCC team. All of\n-   the rapid development and near-legendary [43]portability that are the\n+   development  has  recently been taken over by the [42]GCC team. All of\n+   the  rapid development and near-legendary [43]portability that are the\n    hallmarks of an open-source project are being applied to libstdc++.\n \n-   That means that all of the Standard classes and functions (such as\n-   string, vector<>, iostreams, and algorithms) will be freely available\n-   and fully compliant. Programmers will no longer need to \"roll their\n+   That  means  that  all  of the Standard classes and functions (such as\n+   string,  vector<>, iostreams, and algorithms) will be freely available\n+   and  fully  compliant.  Programmers will no longer need to \"roll their\n    own\" nor be worried about platform-specific incompatabilities.\n      _________________________________________________________________\n \n 1.3 Who's in charge of it?\n \n    The libstdc++ project is contributed to by several developers all over\n-   the world, in the same way as GCC or Linux. Benjamin Kosnik, Gabriel\n+   the  world,  in the same way as GCC or Linux. Benjamin Kosnik, Gabriel\n    Dos Reis, Phil Edwards, and Ulrich Drepper are the lead maintainers of\n    the CVS archive.\n \n-   Development and discussion is held on the libstdc++ mailing list.\n-   Subscribing to the list, or searching the list archives, is open to\n-   everyone. You can read instructions for doing so on the [44]homepage.\n+   Development  and  discussion  is  held  on the libstdc++ mailing list.\n+   Subscribing  to  the  list, or searching the list archives, is open to\n+   everyone.  You can read instructions for doing so on the [44]homepage.\n    If you have questions, ideas, code, or are just curious, sign up!\n      _________________________________________________________________\n \n 1.4 How do I get libstdc++?\n \n-   The eleventh (and latest) snapshot of libstdc++-v3 is [45]available\n+   The  eleventh  (and  latest) snapshot of libstdc++-v3 is [45]available\n    via ftp.\n \n-   The [46]homepage has instructions for retrieving the latest CVS\n+   The  [46]homepage  has  instructions  for  retrieving  the  latest CVS\n    sources, and for browsing the CVS sources over the web.\n \n-   The subset commonly known as the Standard Template Library (chapters\n-   23 through 25, mostly) is adapted from the SGI STL, which is also an\n+   The  subset  commonly known as the Standard Template Library (chapters\n+   23  through  25, mostly) is adapted from the SGI STL, which is also an\n    ongoing work.\n      _________________________________________________________________\n \n 1.5 When is libstdc++ going to be finished?\n \n-   Nathan Myers gave the best of all possible answers, responding to a\n+   Nathan  Myers  gave  the best of all possible answers, responding to a\n    Usenet article asking this question: Sooner, if you help.\n      _________________________________________________________________\n \n 1.6 How do I contribute to the effort?\n \n-   Here is [47]a page devoted to this topic. Subscribing to the mailing\n-   list (see above, or the homepage) is a very good idea if you have\n-   something to contribute, or if you have spare time and want to help.\n+   Here  is  [47]a page devoted to this topic. Subscribing to the mailing\n+   list  (see  above,  or  the  homepage) is a very good idea if you have\n+   something  to  contribute, or if you have spare time and want to help.\n    Contributions don't have to be in the form of source code; anybody who\n-   is willing to help write documentation, for example, or has found a\n+   is  willing  to  help write documentation, for example, or has found a\n    bug in code that we all thought was working, is more than welcome!\n      _________________________________________________________________\n \n 1.7 What happened to libg++? I need that!\n \n-   The most recent libg++ README states that libg++ is no longer being\n-   actively maintained. It should not be used for new projects, and is\n+   The  most  recent  libg++ README states that libg++ is no longer being\n+   actively  maintained.  It  should not be used for new projects, and is\n    only being kicked along to support older code.\n \n-   The libg++ was designed and created when there was no Standard to\n-   provide guidance. Classes like linked lists are now provided for by\n-   list<T> and do not need to be created by genclass. (For that matter,\n-   templates exist now and are well-supported, whereas genclass (mostly)\n+   The  libg++  was  designed  and  created when there was no Standard to\n+   provide  guidance.  Classes  like linked lists are now provided for by\n+   list<T>  and  do not need to be created by genclass. (For that matter,\n+   templates  exist now and are well-supported, whereas genclass (mostly)\n    predates them.)\n \n-   There are other classes in libg++ that are not specified in the ISO\n+   There  are  other  classes in libg++ that are not specified in the ISO\n    Standard (e.g., statistical analysis). While there are a lot of really\n-   useful things that are used by a lot of people (e.g., statistics :-),\n-   the Standards Committee couldn't include everything, and so a lot of\n+   useful  things that are used by a lot of people (e.g., statistics :-),\n+   the  Standards  Committee couldn't include everything, and so a lot of\n    those \"obvious\" classes didn't get included.\n \n-   Since libstdc++ is an implementation of the Standard Library, we have\n-   no plans at this time to include non-Standard utilities in the\n-   implementation, however handy they are. (The extensions provided in\n-   the SGI STL aren't maintained by us and don't get a lot of our\n-   attention, because they don't require a lot of our time.) It is\n-   entirely plausable that the \"useful stuff\" from libg++ might be\n-   extracted into an updated utilities library, but nobody has stated\n+   Since  libstdc++ is an implementation of the Standard Library, we have\n+   no  plans  at  this  time  to  include  non-Standard  utilities in the\n+   implementation,  however  handy  they are. (The extensions provided in\n+   the  SGI  STL  aren't  maintained  by  us  and  don't get a lot of our\n+   attention,  because  they  don't  require  a  lot  of our time.) It is\n+   entirely  plausable  that  the  \"useful  stuff\"  from  libg++ might be\n+   extracted  into  an  updated  utilities library, but nobody has stated\n    such a project yet.\n \n-   (The [48]Boost site houses free C++ libraries that do varying things,\n-   and happened to be started by members of the Standards Committee.\n+   (The  [48]Boost site houses free C++ libraries that do varying things,\n+   and  happened  to  be  started  by members of the Standards Committee.\n    Certain \"useful stuff\" classes will probably migrate there.)\n \n    For the bold and/or desperate, the [49]GCC FAQ describes where to find\n@@ -168,60 +168,60 @@\n \n    If you have read the README and RELEASE-NOTES files, and your question\n    remains unanswered, then just ask the mailing list. At present, you do\n-   not need to be subscribed to the list to send a message to it. More\n-   information is available on the homepage (including how to browse the\n+   not  need  to  be subscribed to the list to send a message to it. More\n+   information  is available on the homepage (including how to browse the\n    list archives); to send to the list, use [50]libstdc++@gcc.gnu.org.\n \n-   If you have a question that you think should be included here, or if\n-   you have a question about a question/answer here, contact [51]Phil\n+   If  you  have a question that you think should be included here, or if\n+   you  have  a  question  about a question/answer here, contact [51]Phil\n    Edwards or [52]Gabriel Dos Reis.\n      _________________________________________________________________\n \n                                2.0 Installation\n \n 2.1 How do I install libstdc++-v3?\n \n-   Complete instructions are not given here (this is a FAQ, not an\n+   Complete  instructions  are  not  given  here  (this  is a FAQ, not an\n    installation document), but the tools required are few:\n-     * A 3.x release of GCC. Note that building GCC is much easier and\n+     * A  3.x  release  of GCC. Note that building GCC is much easier and\n        more automated than building the GCC 2.[78] series was. If you are\n-       using GCC 2.95, you can still build earlier snapshots of\n+       using   GCC  2.95,  you  can  still  build  earlier  snapshots  of\n        libstdc++.\n      * GNU Make is recommended, but should not be required.\n      * The GNU Autotools are needed if you are messing with the configury\n        or makefiles.\n \n-   The file [53]documentation.html provides a good overview of the steps\n-   necessary to build, install, and use the library. Instructions for\n-   configuring the library with new flags such as --enable-threads are\n-   there also, as well as patches and instructions for working with GCC\n+   The  file [53]documentation.html provides a good overview of the steps\n+   necessary  to  build,  install,  and use the library. Instructions for\n+   configuring  the  library  with new flags such as --enable-threads are\n+   there  also,  as well as patches and instructions for working with GCC\n    2.95.\n \n-   The top-level install.html and [54]RELEASE-NOTES files contain the\n-   exact build and installation instructions. You may wish to browse\n-   those files over CVSweb ahead of time to get a feel for what's\n-   required. RELEASE-NOTES is located in the \".../docs/17_intro/\"\n+   The  top-level  install.html  and  [54]RELEASE-NOTES files contain the\n+   exact  build  and  installation  instructions.  You may wish to browse\n+   those  files  over  CVSweb  ahead  of  time  to  get a feel for what's\n+   required.   RELEASE-NOTES   is  located  in  the  \".../docs/17_intro/\"\n    directory of the distribution.\n      _________________________________________________________________\n \n 2.2 [removed]\n \n-   This question has become moot and has been removed. The stub is here\n+   This  question  has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n \n 2.3 What is this CVS thing that you keep mentioning?\n \n-   The Concurrent Versions System is one of several revision control\n+   The  Concurrent  Versions  System  is  one of several revision control\n    packages. It was selected for GNU projects because it's free (speech),\n-   free (beer), and very high quality. The [55]CVS entry in the GNU\n-   software catalogue has a better description as well as a [56]link to\n+   free  (beer),  and  very  high  quality.  The [55]CVS entry in the GNU\n+   software  catalogue  has a better description as well as a [56]link to\n    the makers of CVS.\n \n    The \"anonymous client checkout\" feature of CVS is similar to anonymous\n    FTP in that it allows anyone to retrieve the latest libstdc++ sources.\n \n-   After the first of April, American users will have a \"/pharmacy\"\n+   After  the  first  of  April,  American  users will have a \"/pharmacy\"\n    command-line option...\n      _________________________________________________________________\n \n@@ -230,13 +230,13 @@\n    libstdc++-v3 comes with its own testsuite. You do not need to actually\n    install the library (\"make install\") to run the testsuite.\n \n-   To run the testsuite on the library after building it, use \"make\n-   check\" while in your build directory. To run the testsuite on the\n-   library after building and installing it, use \"make check-install\"\n+   To  run  the  testsuite  on  the  library after building it, use \"make\n+   check\"  while  in  your  build  directory. To run the testsuite on the\n+   library  after  building  and  installing it, use \"make check-install\"\n    instead.\n \n    If you find bugs in the testsuite programs themselves, or if you think\n-   of a new test program that should be added to the suite, please write\n+   of  a new test program that should be added to the suite, please write\n    up your idea and send it to the list!\n      _________________________________________________________________\n \n@@ -246,44 +246,44 @@\n \n    Probably not. Yet.\n \n-   Because GCC advances so rapidly, development and testing of libstdc++\n-   is being done almost entirely under that compiler. If you are curious\n-   about whether other, lesser compilers (*grin*) support libstdc++, you\n-   are more than welcome to try. Configuring and building the library\n-   (see above) will still require certain tools, however. Also keep in\n+   Because  GCC advances so rapidly, development and testing of libstdc++\n+   is  being done almost entirely under that compiler. If you are curious\n+   about  whether other, lesser compilers (*grin*) support libstdc++, you\n+   are  more  than  welcome  to try. Configuring and building the library\n+   (see  above)  will  still require certain tools, however. Also keep in\n    mind that building libstdc++ does not imply that your compiler will be\n    able to use all of the features found in the C++ Standard Library.\n \n-   Since the goal of ISO Standardization is for all C++ implementations\n-   to be able to share code, the final libstdc++ should, in theory, be\n-   useable under any ISO-compliant compiler. It will still be targeted\n+   Since  the  goal of ISO Standardization is for all C++ implementations\n+   to  be  able  to share code, the final libstdc++ should, in theory, be\n+   useable  under  any  ISO-compliant compiler. It will still be targeted\n    and optimized for GCC/g++, however.\n      _________________________________________________________________\n \n 3.2 [removed]\n \n-   This question has become moot and has been removed. The stub is here\n+   This  question  has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n \n 3.3 Building DEC OSF kills the assembler\n \n-   The atomicity.h header for the Alpha processor currently uses\n-   pseudo-operators which the DEC assembler doesn't understand (in\n-   particular, .subsection and .previous). The simple solution is to\n-   install GNU as and arrange for the GCC build to use it (or merge the\n+   The   atomicity.h  header  for  the  Alpha  processor  currently  uses\n+   pseudo-operators  which  the  DEC  assembler  doesn't  understand  (in\n+   particular,  .subsection  and  .previous).  The  simple solution is to\n+   install  GNU  as and arrange for the GCC build to use it (or merge the\n    sources and build it during the bootstrap).\n \n-   Anyone who [57]knows the DEC assembler well enough to provide the\n-   equivalent of these two pseudos would win praise and accolades from\n+   Anyone  who  [57]knows  the  DEC  assembler well enough to provide the\n+   equivalent  of  these  two pseudos would win praise and accolades from\n    many.\n      _________________________________________________________________\n \n                           4.0 Known Bugs and Non-Bugs\n \n-   Note that this section can get rapdily outdated -- such is the nature\n-   of an open-source project. For the latest information, join the\n-   mailing list or look through recent archives. The RELEASE- NOTES and\n+   Note  that this section can get rapdily outdated -- such is the nature\n+   of  an  open-source  project.  For  the  latest  information, join the\n+   mailing  list  or look through recent archives. The RELEASE- NOTES and\n    BUGS files are generally kept up-to-date.\n \n 4.1 What works already?\n@@ -317,8 +317,8 @@ New:\n \n 4.2 Bugs in gcc/g++ (not libstdc++-v3)\n \n-   This is by no means meant to be complete nor exhaustive, but mentions\n-   some problems that users may encounter when building or using\n+   This  is by no means meant to be complete nor exhaustive, but mentions\n+   some  problems  that  users  may  encounter  when  building  or  using\n    libstdc++. If you are experiencing one of these problems, you can find\n    more information on the libstdc++ and the GCC mailing lists.\n      * As of 2.91, these bugs have all been fixed. We look forward to new\n@@ -327,55 +327,55 @@ New:\n \n 4.3 Bugs in the C++ language/lib specification\n \n-   Yes, unfortunately, there are some. In a [58]message to the list,\n-   Nathan Myers announced that he has started a list of problems in the\n-   ISO C++ Standard itself, especially with regard to the chapters that\n-   concern the library. The list itself is [59]posted on his website.\n-   Developers who are having problems interpreting the Standard may wish\n+   Yes,  unfortunately,  there  are  some.  In a [58]message to the list,\n+   Nathan  Myers  announced that he has started a list of problems in the\n+   ISO  C++  Standard itself, especially with regard to the chapters that\n+   concern  the  library.  The  list itself is [59]posted on his website.\n+   Developers  who are having problems interpreting the Standard may wish\n    to consult his notes.\n \n-   For those people who are not part of the ISO Library Group (i.e.,\n-   nearly all of us needing to read this page in the first place :-), a\n+   For  those  people  who  are  not part of the ISO Library Group (i.e.,\n+   nearly  all  of us needing to read this page in the first place :-), a\n    public list of the library defects is occasionally published [60]here.\n      _________________________________________________________________\n \n 4.4 Things in libstdc++ that look like bugs\n \n-   There are things which are not bugs in the compiler (4.2) nor the\n-   language specification (4.3), but aren't really bugs in libstdc++,\n+   There  are  things  which  are  not bugs in the compiler (4.2) nor the\n+   language  specification  (4.3),  but  aren't really bugs in libstdc++,\n    either. Really! Please do not report these as bugs.\n \n-   -Weffc++ The biggest of these is the quadzillions of warnings about\n-   the library headers emitted when -Weffc++ is used. Making libstdc++\n-   \"-Weffc++-clean\" is not a goal of the project, for a few reasons.\n-   Mainly, that option tries to enforce object-oriented programming,\n-   while the Standard Library isn't necessarily trying to be OO. There\n+   -Weffc++  The  biggest  of these is the quadzillions of warnings about\n+   the  library  headers  emitted when -Weffc++ is used. Making libstdc++\n+   \"-Weffc++-clean\"  is  not  a  goal  of the project, for a few reasons.\n+   Mainly,  that  option  tries  to  enforce object-oriented programming,\n+   while  the  Standard  Library isn't necessarily trying to be OO. There\n    are multiple solutions under discussion.\n \n-   rel_ops Another is the rel_ops namespace and the template comparison\n-   operator functions contained therein. If they become visible in the\n-   same namespace as other comparison functions (e.g., 'using' them and\n-   the <iterator> header), then you will suddenly be faced with huge\n-   numbers of ambiguity errors. This was discussed on the -v3 list;\n+   rel_ops  Another  is the rel_ops namespace and the template comparison\n+   operator  functions  contained  therein. If they become visible in the\n+   same  namespace  as other comparison functions (e.g., 'using' them and\n+   the  <iterator>  header),  then  you  will suddenly be faced with huge\n+   numbers  of  ambiguity  errors.  This  was  discussed on the -v3 list;\n    Nathan Myers [61]sums things up here.\n \n   The g++-3 headers are not ours\n \n-   If you have found an extremely broken header file which is causing\n-   problems for you, look carefully before submitting a \"high\" priority\n-   bug report (which you probably shouldn't do anyhow; see the last\n+   If  you  have  found  an extremely broken header file which is causing\n+   problems  for  you, look carefully before submitting a \"high\" priority\n+   bug  report  (which  you  probably  shouldn't  do anyhow; see the last\n    paragraph of the page describing [62]the GCC bug database).\n \n-   If the headers are in ${prefix}/include/g++-3, then you are using the\n-   old libstdc++-v2 library, which is nonstandard and unmaintained. Do\n+   If  the headers are in ${prefix}/include/g++-3, then you are using the\n+   old  libstdc++-v2  library,  which is nonstandard and unmaintained. Do\n    not report problems with -v2 to the -v3 mailing list.\n \n-   Currently our header files are installed in ${prefix}/include/g++-v3\n-   (see the 'v'?). This may change with the next release of GCC, as it\n+   Currently  our  header files are installed in ${prefix}/include/g++-v3\n+   (see  the  'v'?).  This may change with the next release of GCC, as it\n    may be too confusing, but [63]the question has not yet been decided.\n \n-   glibc If you're on a GNU/Linux system and have just upgraded to glibc\n-   2.2, but are still using gcc 2.95.2, then you should have read the\n+   glibc  If you're on a GNU/Linux system and have just upgraded to glibc\n+   2.2,  but  are  still  using gcc 2.95.2, then you should have read the\n    glibc FAQ, specifically 2.34:\n 2.34.   When compiling C++ programs, I get a compilation error in streambuf.h.\n \n@@ -385,97 +385,97 @@ type has changed in glibc 2.2.  The patch is at\n http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n \n-   Note that 2.95.x shipped with the [64]old v2 library which is no\n-   longer maintained. Also note that gcc 2.95.3 fixes this problem, but\n+   Note  that  2.95.x  shipped  with  the  [64]old v2 library which is no\n+   longer  maintained.  Also note that gcc 2.95.3 fixes this problem, but\n    requires a separate patch for libstdc++-v3.\n \n    concept checks If you see compilation errors containing messages about\n-   fooConcept and a constraints member function, then most likely you\n-   have violated one of the requirements for types used during\n-   instantiation of template containers and functions. For example,\n-   EqualityComparableConcept appears if your types must be comparable\n-   with == and you have not provided this capability (a typo, or wrong\n+   fooConcept  and  a  constraints  member function, then most likely you\n+   have   violated   one  of  the  requirements  for  types  used  during\n+   instantiation  of  template  containers  and  functions.  For example,\n+   EqualityComparableConcept  appears  if  your  types must be comparable\n+   with  ==  and  you have not provided this capability (a typo, or wrong\n    visibility, or you just plain forgot, etc).\n \n-   More information, including how to optionally enable/disable the\n+   More  information,  including  how  to  optionally  enable/disable the\n    checks, is available [65]here.\n      _________________________________________________________________\n \n 4.5 Aw, that's easy to fix!\n \n-   If you have found a bug in the library and you think you have a\n-   working fix, then send it in! The main GCC site has a page on\n-   [66]submitting patches that covers the procedure, but for libstdc++\n-   you should also send the patch to our mailing list in addition to the\n-   GCC patches mailing list. The libstdc++ [67]contributors' page also\n+   If  you  have  found  a  bug  in  the library and you think you have a\n+   working  fix,  then  send  it  in!  The  main  GCC  site has a page on\n+   [66]submitting  patches  that  covers the procedure, but for libstdc++\n+   you  should also send the patch to our mailing list in addition to the\n+   GCC  patches  mailing  list. The libstdc++ [67]contributors' page also\n    talks about how to submit patches.\n \n    In addition to the description, the patch, and the ChangeLog entry, it\n    is a Good Thing if you can additionally create a small test program to\n-   test for the presence of the bug that your patch fixes. Bugs have a\n-   way of being reintroduced; if an old bug creeps back in, it will be\n-   caught immediately by the [68]testsuite -- but only if such a test\n+   test  for  the  presence of the bug that your patch fixes. Bugs have a\n+   way  of  being  reintroduced; if an old bug creeps back in, it will be\n+   caught  immediately  by  the  [68]testsuite -- but only if such a test\n    exists.\n      _________________________________________________________________\n \n                                5.0 Miscellaneous\n \n 5.1 string::iterator is not char*; vector<T>::iterator is not T*\n \n-   If you have code that depends on container<T> iterators being\n+   If  you  have  code  that  depends  on  container<T>  iterators  being\n    implemented as pointer-to-T, your code is broken.\n \n-   While there are arguments for iterators to be implemented in that\n-   manner, A) they aren't very good ones in the long term, and B) they\n+   While  there  are  arguments  for  iterators to be implemented in that\n+   manner,  A)  they  aren't very good ones in the long term, and B) they\n    were never guaranteed by the Standard anyway. The type-safety achieved\n-   by making iterators a real class rather than a typedef for T*\n+   by  making  iterators  a  real  class  rather  than  a  typedef for T*\n    outweighs nearly all opposing arguments.\n \n    Code which does assume that a vector iterator i is a pointer can often\n-   be fixed by changing i in certain expressions to &*i . Future\n-   revisions of the Standard are expected to bless this usage for\n+   be  fixed  by  changing  i  in  certain  expressions  to  &*i . Future\n+   revisions  of  the  Standard  are  expected  to  bless  this usage for\n    vector<> (but not for basic_string<>).\n      _________________________________________________________________\n \n 5.2 What's next after libstdc++-v3?\n \n-   Hopefully, not much. The goal of libstdc++-v3 is to produce a\n-   fully-compliant, fully-portable Standard Library. After that, we're\n+   Hopefully,  not  much.  The  goal  of  libstdc++-v3  is  to  produce a\n+   fully-compliant,  fully-portable  Standard  Library. After that, we're\n    mostly done: there won't be any more compliance work to do. However:\n-    1. The ISO Committee will meet periodically to review Defect Reports\n-       in the C++ Standard. Undoubtedly some of these will result in\n-       changes to the Standard, which will be reflected in patches to\n-       libstdc++. Some of that is already happening, see 4.2. Some of\n-       those changes are being predicted by the library maintainers, and\n-       we add code to the library based on what the current proposed\n+    1. The  ISO Committee will meet periodically to review Defect Reports\n+       in  the  C++  Standard.  Undoubtedly  some of these will result in\n+       changes  to  the  Standard,  which will be reflected in patches to\n+       libstdc++.  Some  of  that  is already happening, see 4.2. Some of\n+       those  changes are being predicted by the library maintainers, and\n+       we  add  code  to  the  library based on what the current proposed\n        resolution specifies.\n-    2. Performance tuning. Lots of performance tuning. This too is\n-       already underway for post-3.0 releases, starting with memory\n-       expansion in container classes and buffer usage in synchronized\n+    2. Performance  tuning.  Lots  of  performance  tuning.  This  too is\n+       already  underway  for  post-3.0  releases,  starting  with memory\n+       expansion  in  container  classes and buffer usage in synchronized\n        stream objects.\n-    3. An ABI for libstdc++ will eventually be developed, so that\n+    3. An  ABI  for  libstdc++  will  eventually  be  developed,  so that\n        multiple binary-incompatible copies of the library can be replaced\n        with a single backwards-compatible library, like libgcc_s.so is.\n-    4. The current libstdc++ contains extensions to the Library which\n+    4. The  current  libstdc++  contains  extensions to the Library which\n        must be explicitly requested by client code (for example, the hash\n        tables from SGI). Other extensions may be added to libstdc++-v3 if\n-       they seem to be \"standard\" enough. (For example, the \"long long\"\n-       type from C99.) Bugfixes and rewrites (to improve or fix thread\n+       they  seem  to be \"standard\" enough. (For example, the \"long long\"\n+       type  from  C99.)  Bugfixes and rewrites (to improve or fix thread\n        safety, for instance) will of course be a continuing task.\n \n-   [69]This question about the next libstdc++ prompted some brief but\n+   [69]This  question  about  the  next libstdc++ prompted some brief but\n    interesting [70]speculation.\n      _________________________________________________________________\n \n 5.3 What about the STL from SGI?\n \n-   The [71]STL from SGI, version 3.3, was the most recent merge of the\n-   STL codebase. The code in libstdc++ contains many fixes and changes,\n-   and it is very likely that the SGI code is no longer under active\n+   The  [71]STL  from  SGI, version 3.3, was the most recent merge of the\n+   STL  codebase.  The code in libstdc++ contains many fixes and changes,\n+   and  it  is  very  likely  that the SGI code is no longer under active\n    development. We expect that no future merges will take place.\n \n    In particular, string is not from SGI and makes no use of their \"rope\"\n-   class (which is included as an optional extension), nor is valarray\n+   class  (which  is  included as an optional extension), nor is valarray\n    and some others. Classes like vector<> are, however.\n \n    The FAQ for SGI's STL (one jump off of their main page) is recommended\n@@ -484,8 +484,8 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n 5.4 Extensions and Backward Compatibility\n \n-   Although you can specify -I options to make the preprocessor search\n-   the g++-v3/ext and /backward directories, it is better to refer to\n+   Although  you  can  specify -I options to make the preprocessor search\n+   the  g++-v3/ext  and  /backward  directories, it is better to refer to\n    files there by their path, as in:\n        #include <ext/hash_map>\n \n@@ -495,41 +495,41 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n 5.5 [removed]\n \n-   This question has become moot and has been removed. The stub is here\n+   This  question  has become moot and has been removed. The stub is here\n    to preserve numbering (and hence links/bookmarks).\n      _________________________________________________________________\n \n 5.6 Is libstdc++-v3 thread-safe?\n \n-   Quick answer: no, as of 2.92 (eleventh snapshot), the library is not\n+   Quick  answer:  no, as of 2.92 (eleventh snapshot), the library is not\n    appropriate for multithreaded access. The string class is MT-safe.\n \n-   This is assuming that your idea of \"multithreaded\" is the same as\n-   ours... The general question of multithreading and libstdc++-v3 is\n+   This  is  assuming  that  your  idea of \"multithreaded\" is the same as\n+   ours...  The  general  question  of multithreading and libstdc++-v3 is\n    addressed in the chapter-specific advice for [73]Library Introduction.\n-   Threadsafe containers are covered in more detail in [74]the Received\n+   Threadsafe  containers  are covered in more detail in [74]the Received\n    Wisdom section on containers.\n      _________________________________________________________________\n \n 5.7 How do I get a copy of the ISO C++ Standard?\n \n-   Copies of the full ISO 14882 standard are available on line via the\n-   ISO mirror site for committee members. Non-members, or those who have\n-   not paid for the privilege of sitting on the committee and sustained\n-   their two-meeting commitment for voting rights, may get a copy of the\n+   Copies  of  the  full ISO 14882 standard are available on line via the\n+   ISO  mirror site for committee members. Non-members, or those who have\n+   not  paid  for the privilege of sitting on the committee and sustained\n+   their  two-meeting commitment for voting rights, may get a copy of the\n    standard from their respective national standards organization. In the\n    USA, this national standards organization is ANSI and their website is\n-   right [75]here. (And if you've already registered with them, clicking\n+   right  [75]here. (And if you've already registered with them, clicking\n    this link will take you to directly to the place where you can [76]buy\n    the standard on-line.\n \n    Who is your country's member body? Visit the [77]ISO homepage and find\n    out!\n      _________________________________________________________________\n \n-   Comments and suggestions are welcome, and may be sent to [78]the\n+   Comments  and  suggestions  are  welcome,  and  may be sent to [78]the\n    mailing list.\n-   $Id: index.html,v 1.9 2001/05/30 21:55:04 pme Exp $ \n+   $Id: index.html,v 1.10 2001/07/18 21:37:06 pme Exp $ \n \n References\n "}, {"sha": "c3627b462fd513f7519c3adc9d8953dc7cd9a34f", "filename": "libstdc++-v3/docs/html/install.html", "status": "modified", "additions": 166, "deletions": 166, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5e5e4e42a8cb7e64d1d0a766feed132b192c68/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html?ref=5d5e5e4e42a8cb7e64d1d0a766feed132b192c68", "patch": "@@ -1,53 +1,53 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n-<HTML>\n-<HEAD>\n-   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n-   <META NAME=\"KEYWORDS\" CONTENT=\"libstdc++, libstdc++-v3, GCC, g++\">\n-   <META NAME=\"DESCRIPTION\" CONTENT=\"README for the GNU libstdc++ effort.\">\n-   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n-   <TITLE>libstdc++-v3 Installation Instructions</TITLE>\n-<LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: install.html,v 1.5 2001/04/03 00:26:54 pme Exp $ -->\n-</HEAD>\n-<BODY>\n+<html>\n+<head>\n+   <meta NAME=\"AUTHOR\" CONTENT=\"pme@gcc.gnu.org (Phil Edwards)\">\n+   <meta NAME=\"KEYWORDS\" CONTENT=\"libstdc++, libstdc++-v3, GCC, g++\">\n+   <meta NAME=\"DESCRIPTION\" CONTENT=\"README for the GNU libstdc++ effort.\">\n+   <meta NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <title>libstdc++-v3 Installation Instructions</title>\n+<link REL=StyleSheet HREF=\"lib3styles.css\">\n+<!-- $Id: install.html,v 1.6 2001/05/30 21:54:56 pme Exp $ -->\n+</head>\n+<body>\n \n-<H1 CLASS=\"centered\"><A NAME=\"top\">libstdc++-v3 INSTALL</A></H1>\n+<h1 CLASS=\"centered\"><a name=\"top\">libstdc++-v3 INSTALL</a></h1>\n \n-<P>The latest version of this document is always available at\n-   <A HREF=\"http://gcc.gnu.org/onlinedocs/libstdc++/install.html\">\n-   http://gcc.gnu.org/onlinedocs/libstdc++/install.html</A>.\n-</P>\n+<p>The latest version of this document is always available at\n+   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/install.html\">\n+   http://gcc.gnu.org/onlinedocs/libstdc++/install.html</a>.\n+</p>\n \n-<P>To the <A HREF=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</A>.\n+<p>To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</a>.\n \n \n <!-- ####################################################### -->\n-<HR>\n-<H2>Contents</H2>\n-<UL>\n-   <LI><A HREF=\"#prereqs\">Tools you will need beforehand</A>\n-   <LI><A HREF=\"#srcsetup\">Setting up the source directories</A>\n-   <LI><A HREF=\"#config\">Configuring</A>\n-   <LI><A HREF=\"#install\">Building and installing the library</A>\n-   <LI><A HREF=\"#postinstall\">Post-installation</A>\n-   <LI><A HREF=\"#usage\">Using the library</A>\n-</UL>\n-\n-<HR>\n+<hr>\n+<h2>Contents</h2>\n+<ul>\n+   <li><a href=\"#prereqs\">Tools you will need beforehand</a>\n+   <li><a href=\"#srcsetup\">Setting up the source directories</a>\n+   <li><a href=\"#config\">Configuring</a>\n+   <li><a href=\"#install\">Building and installing the library</a>\n+   <li><a href=\"#postinstall\">Post-installation</a>\n+   <li><a href=\"#usage\">Using the library</a>\n+</ul>\n+\n+<hr>\n \n <!-- ####################################################### -->\n \n-<H2><A NAME=\"prereqs\">Tools you will need beforehand</A></H2>\n-   <P>You will need a recent version of g++ to compile the snapshot of\n+<h2><a name=\"prereqs\">Tools you will need beforehand</a></h2>\n+   <p>You will need a recent version of g++ to compile the snapshot of\n       libstdc++, such as one of the GCC 3.x snapshots (insert standard\n       caveat about using snapshots rather than formal releases).  You\n       will need the full source\n       distribution to whatever compiler release you are using.  The\n       GCC snapshots can be had from one of the sites on their\n-      <A HREF=\"http://gcc.gnu.org/mirrors.html\">mirror list</A>.\n-   </P>\n+      <a href=\"http://gcc.gnu.org/mirrors.html\">mirror list</a>.\n+   </p>\n \n-   <P>In addition, if you plan to modify the makefiles or regenerate the\n+   <p>In addition, if you plan to modify the makefiles or regenerate the\n       configure scripts you'll need recent versions of the GNU Autotools:\n       autoconf (version 2.50 or later),\n       automake (version 1.4 or later),    <!-- special version? -->\n@@ -56,238 +56,238 @@ <H2><A NAME=\"prereqs\">Tools you will need beforehand</A></H2>\n       These tools are all required to be installed in the same location\n       (most linux distributions install these tools by default, so no\n       worries as long as the versions are correct).\n-   </P>\n+   </p>\n \n-   <P>GNU Make is the only 'make' that will parse the makefiles correctly.\n-   </P>\n+   <p>GNU Make is the only 'make' that will parse the makefiles correctly.\n+   </p>\n \n-   <P>To test your build, you will need either DejaGNU 1.4 (to run\n-      <TT>'make check'</TT> like\n-      <A HREF=\"http://gcc.gnu.org/install/test.html\">the rest of GCC</A>),\n-      or Bash 2.x (to run <TT>'make check-script'</TT>).\n-   </P>\n+   <p>To test your build, you will need either DejaGNU 1.4 (to run\n+      <code>'make check'</code> like\n+      <a href=\"http://gcc.gnu.org/install/test.html\">the rest of GCC</a>),\n+      or Bash 2.x (to run <code>'make check-script'</code>).\n+   </p>\n \n-   <P>As of June 19, 2000, libstdc++ attempts to use tricky and\n+   <p>As of June 19, 2000, libstdc++ attempts to use tricky and\n       space-saving features of the GNU toolchain, enabled with\n-      <TT>-ffunction-sections -fdata-sections -Wl,--gc-sections</TT>.\n+      <code>-ffunction-sections -fdata-sections -Wl,--gc-sections</code>.\n       To obtain maximum benefit from this, binutils after this date\n       should also be used (bugs were fixed with C++ exception handling\n       related to this change in libstdc++-v3).  The version of these\n-      tools should be <TT>2.10.90</TT>, and you can get snapshots (as\n+      tools should be <code>2.10.90</code>, and you can get snapshots (as\n       well as releases) of binutils\n-      <A HREF=\"ftp://sources.redhat.com/pub/binutils\">here</A>.\n-   </P>\n+      <a href=\"ftp://sources.redhat.com/pub/binutils\">here</a>.\n+   </p>\n  \n  <!-- Commented until some system-specific requirements appear.\n-   <P>Finally, a few system-specific requirements:\n-      <DL>\n-        <DT>Cygwin\n-        <DD>If you are using Cygwin to compile libstdc++-v3 on Win32, you'll\n+   <p>Finally, a few system-specific requirements:\n+      <dl>\n+        <dt>Cygwin\n+        <dd>If you are using Cygwin to compile libstdc++-v3 on Win32, you'll\n             [snip]\n \n-      </DL>\n-   </P>\n+      </dl>\n+   </p>\n -->\n \n-<HR>\n+<hr>\n \n-<H2><A NAME=\"srcsetup\">Setting up the source directories</A></H2>\n-   <P>The following definitions will be used throughout the rest of this\n+<h2><a name=\"srcsetup\">Setting up the source directories</a></h2>\n+   <p>The following definitions will be used throughout the rest of this\n       document:\n-      <UL>\n-         <LI><EM>gccsrcdir</EM>:  The directory holding the source of the\n+      <ul>\n+         <li><em>gccsrcdir</em>:  The directory holding the source of the\n                  compiler.  It should have several subdirectories like\n-                 <EM>gccsrcdir</EM>/libio and <EM>gccsrcdir</EM>/gcc.\n-         <LI><EM>libsrcdir</EM>:  The directory holding the source of the\n+                 <em>gccsrcdir</em>/libio and <em>gccsrcdir</em>/gcc.\n+         <li><em>libsrcdir</em>:  The directory holding the source of the\n                  C++ library.\n-         <LI><EM>gccbuilddir</EM>:  The build directory for the compiler\n-                 in <EM>gccsrcdir</EM>.  GCC requires that it be built in\n+         <li><em>gccbuilddir</em>:  The build directory for the compiler\n+                 in <em>gccsrcdir</em>.  GCC requires that it be built in\n                  a different directory than its sources.\n-         <LI><EM>libbuilddir</EM>:  The build directory for libstdc++.\n-         <LI><EM>destdir</EM>:  The eventual installation directory for\n+         <li><em>libbuilddir</em>:  The build directory for libstdc++.\n+         <li><em>destdir</em>:  The eventual installation directory for\n                  the compiler/libraries, set with the --prefix option to\n                  the configure script.\n-      </UL>\n+      </ul>\n       Note:\n-      <OL>\n-         <LI>The 3.0 version and following are intended to replace the\n-             library that comes with the compiler, so <EM>libsrcdir</EM>\n-             and <EM>libbuilddir</EM> must be contained under\n-             <EM>gccsrcdir</EM> and <EM>gccbuilddir</EM>, respectively.\n-         <LI>The source, build, and installation directories should\n+      <ol>\n+         <li>The 3.0 version and following are intended to replace the\n+             library that comes with the compiler, so <em>libsrcdir</em>\n+             and <em>libbuilddir</em> must be contained under\n+             <em>gccsrcdir</em> and <em>gccbuilddir</em>, respectively.\n+         <li>The source, build, and installation directories should\n              not be parents of one another; i.e., these should all be\n              separate directories. Please don't build out of the\n              source directory.\n-      </OL>\n-   </P>\n+      </ol>\n+   </p>\n \n-   <P>Check out or download the gcc sources: the resulting source directory\n-      (<TT>gcc</TT> or <TT>gcc-3.0</TT>, for example) is <EM>gccsrcdir</EM>.\n-      Once in <EM>gccsrcdir</EM>, you'll need to rename or delete the\n+   <p>Check out or download the gcc sources: the resulting source directory\n+      (<code>gcc</code> or <code>gcc-3.0</code>, for example) is <em>gccsrcdir</em>.\n+      Once in <em>gccsrcdir</em>, you'll need to rename or delete the\n       libstdc++-v3 directory which comes with that snapshot:\n       <PRE>\n-   mv libstdc++-v3 libstdc++-v3-previous  <STRONG>[OR]</STRONG>\n+   mv libstdc++-v3 libstdc++-v3-previous  <strong>[OR]</strong>\n    rm -r libstdc++-v3</PRE>\n-   </P>\n-   <P>Next, unpack the libstdc++-v3 library tarball into this\n-      <EM>gccsrcdir</EM> directory; it will create a\n-      <EM>libsrcdir</EM> called <TT>libstdc++-<EM>version</EM></TT>:\n+   </p>\n+   <p>Next, unpack the libstdc++-v3 library tarball into this\n+      <em>gccsrcdir</em> directory; it will create a\n+      <em>libsrcdir</em> called <code>libstdc++-<em>version</em></code>:\n       <PRE>\n    gzip -dc libstdc++-version.tar.gz | tar xf -</PRE>\n-   </P>\n-   <P>Finally, rename <EM>libsrcdir</EM> to <TT>libstdc++-v3</TT> so that\n+   </p>\n+   <p>Finally, rename <em>libsrcdir</em> to <code>libstdc++-v3</code> so that\n       gcc's configure flags will be able to deal with the new library.\n       <PRE>\n-   mv <EM>libsrcdir</EM> libstdc++-v3</PRE>\n-   </P>\n-\n-\n-<HR>\n-<H2><A NAME=\"config\">Configuring</A></H2>\n-   <P>If you have never done this before, you should read the basic\n-      <A HREF=\"http://gcc.gnu.org/install/\">GCC Installation\n-      Instructions</A> first.\n-   </P>\n-   <P>When building libstdc++-v3 you'll have to configure\n-      the entire <EM>gccsrcdir</EM> directory.  The full list of libstdc++-v3\n+   mv <em>libsrcdir</em> libstdc++-v3</PRE>\n+   </p>\n+\n+\n+<hr>\n+<h2><a name=\"config\">Configuring</a></h2>\n+   <p>If you have never done this before, you should read the basic\n+      <a href=\"http://gcc.gnu.org/install/\">GCC Installation\n+      Instructions</a> first.\n+   </p>\n+   <p>When building libstdc++-v3 you'll have to configure\n+      the entire <em>gccsrcdir</em> directory.  The full list of libstdc++-v3\n       specific configuration options, not dependent on the specific compiler\n-      release being used, can be found <A HREF=\"configopts.html\">here</A>.\n-   </P>\n-   <P>Consider possibly using --enable-languages=c++ to save time by only\n+      release being used, can be found <a href=\"configopts.html\">here</a>.\n+   </p>\n+   <p>Consider possibly using --enable-languages=c++ to save time by only\n       building the C++ language parts.\n-   </P>\n+   </p>\n \n-   <P><PRE>\n-   cd <EM>gccbuilddir</EM>\n-   <EM>gccsrcdir</EM>/configure --prefix=<EM>destdir</EM> --other-opts...</PRE>\n-   </P>\n+   <p><PRE>\n+   cd <em>gccbuilddir</em>\n+   <em>gccsrcdir</em>/configure --prefix=<em>destdir</em> --other-opts...</PRE>\n+   </p>\n \n \n-<HR>\n-<H2><A NAME=\"install\">Building and installing the library</A></H2>\n-   <P>Now you have a few options:</P>\n-   <H3>[re]building <EM>everything</EM></H3>\n-   <P>If you're building GCC from scratch, you can do the usual\n-      <TT> 'make bootstrap' </TT> here, and libstdc++-v3 will be built\n+<hr>\n+<h2><a name=\"install\">Building and installing the library</a></h2>\n+   <p>Now you have a few options:</p>\n+   <h3>[re]building <em>everything</em></h3>\n+   <p>If you're building GCC from scratch, you can do the usual\n+      <code> 'make bootstrap' </code> here, and libstdc++-v3 will be built\n       as its default C++ library.  The generated g++ will magically\n       use the correct headers, link against the correct library\n       binary, and in general using libstdc++-v3 will be a piece of\n-      cake.  You're done; run <TT>'make install'</TT> (see the GCC\n+      cake.  You're done; run <code>'make install'</code> (see the GCC\n       installation instructions) to put the new compiler and libraries\n       into place.\n-   </P>\n+   </p>\n \n-   <H3>[re]building only libstdc++</H3>\n-   <P>To rebuild just libstdc++, use:\n+   <h3>[re]building only libstdc++</h3>\n+   <p>To rebuild just libstdc++, use:\n       <PRE>\n-   make all-target-<EM>libstdc++-v3</EM></PRE>\n+   make all-target-<em>libstdc++-v3</em></PRE>\n       This will configure and build the C++ library in the\n-      <EM>gccbuilddir/cpu-vendor-os/</EM>libstdc++ directory.\n-   </P>\n-   <P>If you are rebuilding from a previous build [attempt], some\n+      <em>gccbuilddir/cpu-vendor-os/</em>libstdc++ directory.\n+   </p>\n+   <p>If you are rebuilding from a previous build [attempt], some\n       information is kept in a cache file.  This is stored in\n-      <EM>gccbuilddir/cpu-vendor-os/</EM> if you are building with\n+      <em>gccbuilddir/cpu-vendor-os/</em> if you are building with\n       multilibs (the default), or in\n-      <EM>gccbuilddir/cpu-vendor-os/</EM>libstdc++-v3 if you have\n+      <em>gccbuilddir/cpu-vendor-os/</em>libstdc++-v3 if you have\n       multilibs disabled.  The filename is config.cache; if previous\n       information is causing problems, you can delete it entirely, or\n       simply edit it and remove lines.\n-   </P>\n-   <P>You're done.  Now install the rebuilt pieces with\n+   </p>\n+   <p>You're done.  Now install the rebuilt pieces with\n       <PRE>\n    make install</PRE>\n       or \n       <PRE>\n    make install-gcc\n    make install-target-libstdc++-v3</PRE>\n-   </P>\n+   </p>\n \n \n-<HR>\n-<H2><A NAME=\"postinstall\">Post-installation</A></H2>\n-   <P>Installation will create the <EM>destdir</EM> directory and\n+<hr>\n+<h2><a name=\"postinstall\">Post-installation</a></h2>\n+   <p>Installation will create the <em>destdir</em> directory and\n       populate it with subdirectories:\n       <PRE>\n    lib/\n    include/g++-v3/\n       backward/\n       bits/\n-      <EM>cpu-vendor-os</EM>/bits/\n+      <em>cpu-vendor-os</em>/bits/\n       ext/</PRE>\n-   </P>\n-   <P>You can check the status of the build without installing it using\n+   </p>\n+   <p>You can check the status of the build without installing it using\n       <PRE>\n    make check</PRE>\n       or you can check the status of the installed library using\n       <PRE>\n    make check-install</PRE>\n-      in the <EM>libbuilddir</EM> directory.\n+      in the <em>libbuilddir</em> directory.\n       These commands will create a 'testsuite' directory underneath\n-      <EM>libbuilddir</EM> containing the results of the tests.  We are\n+      <em>libbuilddir</em> containing the results of the tests.  We are\n       interested in any strange failures of the testsuite; please see\n-      <A HREF=\"faq/index.html#2_4\">FAQ 2.4</A> for which files to examine.\n-   </P>\n+      <a href=\"faq/index.html#2_4\">FAQ 2.4</a> for which files to examine.\n+   </p>\n \n \n-<HR>\n-<H2><A NAME=\"usage\">Using the library</A></H2>\n-   <LI><B>Find the new library at runtime (shared linking only)</B>\n-       <P>If you only built a static library (libstdc++.a), or if you\n+<hr>\n+<h2><a name=\"usage\">Using the library</a></h2>\n+   <li><B>Find the new library at runtime (shared linking only)</B>\n+       <p>If you only built a static library (libstdc++.a), or if you\n           specified static linking, you don't have to worry about this.\n           But if you built a shared library (libstdc++.so) and linked\n           against it, then you will need to find that library when you\n           run the executable.\n-       </P>\n-       <P>Methods vary for different platforms and different styles, but\n+       </p>\n+       <p>Methods vary for different platforms and different styles, but\n           the usual ones are printed to the screen during installation.\n           They include:\n-          <UL>\n-          <LI>At runtime set LD_LIBRARY_PATH in your environment correctly,\n+          <ul>\n+          <li>At runtime set LD_LIBRARY_PATH in your environment correctly,\n               so that the shared library for libstdc++ can be found and\n               loaded.  Be certain that you understand all of the other\n               implications and behavior of LD_LIBRARY_PATH first (few\n               people do, and they get into trouble).\n-          <LI>Compile the path to find the library at runtime into the\n+          <li>Compile the path to find the library at runtime into the\n               program.  This can be done by passing certain options to g++,\n               which will in turn pass them on to the linker.  The exact\n               format of the options is dependent on which linker you use:\n-              <UL>\n-  <LI>GNU ld (default on Linux):<TT>  -Wl,--rpath,<EM>destdir</EM>/lib</TT>\n-  <LI>IRIX ld:<TT>  -Wl,-rpath,<EM>destdir</EM>/lib</TT>\n-  <LI>Solaris ld:<TT>  -Wl,-R<EM>destdir</EM>/lib</TT>\n-  <LI>More...?\n-              </UL>\n-          </UL>\n-       </P>\n-       <P>Use the <TT>ldd(1)</TT> utility to show which library the system\n+              <ul>\n+  <li>GNU ld (default on Linux):<code>  -Wl,--rpath,<em>destdir</em>/lib</code>\n+  <li>IRIX ld:<code>  -Wl,-rpath,<em>destdir</em>/lib</code>\n+  <li>Solaris ld:<code>  -Wl,-R<em>destdir</em>/lib</code>\n+  <li>More...?\n+              </ul>\n+          </ul>\n+       </p>\n+       <p>Use the <code>ldd(1)</code> utility to show which library the system\n           thinks it will get at runtime.\n-       </P>\n-       <P>A libstdc++.la file is also installed, for use with Libtool.  If\n+       </p>\n+       <p>A libstdc++.la file is also installed, for use with Libtool.  If\n           you use Libtool to create your executables, these details are\n           taken care of for you.\n-       </P>\n-   </OL>\n-   </P>\n+       </p>\n+   </ol>\n+   </p>\n \n \n <!--\n-<HR>\n-<H2><A NAME=\"\"></A></H2>\n-   <P>\n-   </P>\n+<hr>\n+<h2><a name=\"\"></a></h2>\n+   <p>\n+   </p>\n \n -->\n \n <!-- ####################################################### -->\n \n-<HR>\n-<P CLASS=\"fineprint\"><EM>\n+<hr>\n+<P CLASS=\"fineprint\"><em>\n Comments and suggestions are welcome, and may be sent to\n-<A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: install.html,v 1.5 2001/04/03 00:26:54 pme Exp $\n-</EM></P>\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</a>.\n+<br> $Id: install.html,v 1.6 2001/05/30 21:54:56 pme Exp $\n+</em></p>\n \n \n-</BODY>\n-</HTML>\n+</body>\n+</html>\n "}]}