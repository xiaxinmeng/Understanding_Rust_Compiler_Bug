{"sha": "6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkMWQ0OGU5ZTRkZDdjZWI4MGE2ZGZmNmYxMTNkNTAyMGM1ZDlkNg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-08-21T16:35:28Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-08-21T16:35:28Z"}, "message": "re PR fortran/47659 (-Wconversion[-extra] should emit warning for constant expressions)\n\n2011-08-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/47659\n\t* expr.c (gfc_check_assign): Check for type conversions when the\n\tright-hand side is a constant REAL/COMPLEX contstant the left-hand\n\tside is also REAL/COMPLEX.  Don't warn when a narrowing conversion\n\tfor REAL does not change the value of the constant.\n\n2011-08-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/47659\n\t* gfortran.dg/warn_conversion_2.f90:  Also warn about conversion\n\tof a constant resulting from simplification.\n\t* gfortran.dg/warn_conversion_3.f90:  New test.\n\nFrom-SVN: r177942", "tree": {"sha": "1f4e191a57eb5e520ee4afb6a3a660851d2d1f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f4e191a57eb5e520ee4afb6a3a660851d2d1f2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6/comments", "author": null, "committer": null, "parents": [{"sha": "38acd2910a3a23bc48131ceef153ac52f23b8ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38acd2910a3a23bc48131ceef153ac52f23b8ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38acd2910a3a23bc48131ceef153ac52f23b8ed6"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "e0ad71c34dfba2fe9994b3c811218159d6724b95", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6", "patch": "@@ -1,3 +1,11 @@\n+2011-08-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/47659\n+\t* expr.c (gfc_check_assign): Check for type conversions when the\n+\tright-hand side is a constant REAL/COMPLEX contstant the left-hand\n+\tside is also REAL/COMPLEX.  Don't warn when a narrowing conversion\n+\tfor REAL does not change the value of the constant.\n+\n 2011-08-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/50130"}, {"sha": "6d94369c54382f2be7b6b7f0cc9bc685425967b1", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6", "patch": "@@ -3190,6 +3190,53 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n \t}\n     }\n \n+  /*  Warn about type-changing conversions for REAL or COMPLEX constants.\n+      If lvalue and rvalue are mixed REAL and complex, gfc_compare_types\n+      will warn anyway, so there is no need to to so here.  */\n+\n+  if (rvalue->expr_type == EXPR_CONSTANT && lvalue->ts.type == rvalue->ts.type\n+      && (lvalue->ts.type == BT_REAL || lvalue->ts.type == BT_COMPLEX))\n+    {\n+      if (lvalue->ts.kind < rvalue->ts.kind && gfc_option.gfc_warn_conversion)\n+\t{\n+\t  /* As a special bonus, don't warn about REAL rvalues which are not\n+\t     changed by the conversion if -Wconversion is specified.  */\n+\t  if (rvalue->ts.type == BT_REAL && mpfr_number_p (rvalue->value.real))\n+\t    {\n+\t      /* Calculate the difference between the constant and the rounded\n+\t\t value and check it against zero.  */\n+\t      mpfr_t rv, diff;\n+\t      gfc_set_model_kind (lvalue->ts.kind);\n+\t      mpfr_init (rv);\n+\t      gfc_set_model_kind (rvalue->ts.kind);\n+\t      mpfr_init (diff);\n+\t      \n+\t      mpfr_set (rv, rvalue->value.real, GFC_RND_MODE);\n+\t      mpfr_sub (diff, rv, rvalue->value.real, GFC_RND_MODE);\n+\t  \n+\t      if (!mpfr_zero_p (diff))\n+\t\tgfc_warning (\"Change of value in conversion from \"\n+\t\t\t     \" %s to %s at %L\", gfc_typename (&rvalue->ts),\n+\t\t\t     gfc_typename (&lvalue->ts), &rvalue->where);\n+\t      \n+\t      mpfr_clear (rv);\n+\t      mpfr_clear (diff);\n+\t    }\n+\t  else\n+\t    gfc_warning (\"Possible change of value in conversion from %s \"\n+\t\t\t \"to %s at %L\",gfc_typename (&rvalue->ts),\n+\t\t\t gfc_typename (&lvalue->ts), &rvalue->where);\n+\n+\t}\n+      else if (gfc_option.warn_conversion_extra\n+\t       && lvalue->ts.kind > rvalue->ts.kind)\n+\t{\n+\t  gfc_warning (\"Conversion from %s to %s at %L\",\n+\t\t       gfc_typename (&rvalue->ts),\n+\t\t       gfc_typename (&lvalue->ts), &rvalue->where);\n+\t}\n+    }\n+\n   if (gfc_compare_types (&lvalue->ts, &rvalue->ts))\n     return SUCCESS;\n "}, {"sha": "b0b54dece75c0a257b5ef313d31112e1c2ff1714", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6", "patch": "@@ -1,3 +1,10 @@\n+2011-08-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/47659\n+\t* gfortran.dg/warn_conversion_2.f90:  Also warn about conversion\n+\tof a constant resulting from simplification.\n+\t* gfortran.dg/warn_conversion_3.f90:  New test.\n+\n 2011-08-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/50130"}, {"sha": "d071a3c322f382212c4a2cf88613d64809206953", "filename": "gcc/testsuite/gfortran.dg/warn_conversion_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_2.f90?ref=6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6", "patch": "@@ -7,5 +7,5 @@\n   x = 2.0\n   sqrt2 = sqrt(x)      ! { dg-warning \"Conversion\" }\n \n-  sqrt2 = sqrt(2.0)    ! no warning; simplified to a constant and range checked\n+  sqrt2 = sqrt(2.0)    ! { dg-warning \"Conversion\" }\n end"}, {"sha": "38d701851cc8d29c1a9bdf7b5cd5b93424f15764", "filename": "gcc/testsuite/gfortran.dg/warn_conversion_3.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_3.f90?ref=6cd1d48e9e4dd7ceb80a6dff6f113d5020c5d9d6", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-options \"-Wconversion -Wconversion-extra\" }\n+! PR 47659 - warning about conversions on assignment\n+! Based on a test case by Thomas Henlich\n+program main\n+  double precision d1, d2\n+  complex(8), parameter :: z = cmplx (0.5, 0.5)  ! { dg-warning \"Conversion\" }\n+  real :: r1, r2\n+  r1 = 2.3d0 ! { dg-warning \"Change of value in conversion\" }\n+  r2 = 2.5d0 ! No warning because the value does not change\n+  d1 = .13 ! { dg-warning \"Conversion\" }\n+  d2 = .13d0\n+  d1 = z     ! { dg-warning \"change of value in conversion\" }\n+end program main"}]}