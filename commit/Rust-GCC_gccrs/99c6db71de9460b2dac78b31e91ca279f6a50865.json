{"sha": "99c6db71de9460b2dac78b31e91ca279f6a50865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTljNmRiNzFkZTk0NjBiMmRhYzc4YjMxZTkxY2EyNzlmNmE1MDg2NQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-03-10T03:15:36Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-03-10T03:15:36Z"}, "message": "re PR libfortran/26499 (gfortran - End of File incorrectly positioned after binary I/O.)\n\n2006-03-09  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/26499\n\t* io/file_pos (st_rewind): Flush always.\n\t* io/unix.c (fd_truncate): Return SUCCESS rather than FAILURE for\n\tspecial files like /dev/null.\n\t* io/transfer.c (st_write_done): Remove broken logic that prevented\n\tcalling fd_truncate.\n\nFrom-SVN: r111924", "tree": {"sha": "5d99f9aecf1933262d78a6b92507191c382b4017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d99f9aecf1933262d78a6b92507191c382b4017"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99c6db71de9460b2dac78b31e91ca279f6a50865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c6db71de9460b2dac78b31e91ca279f6a50865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99c6db71de9460b2dac78b31e91ca279f6a50865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c6db71de9460b2dac78b31e91ca279f6a50865/comments", "author": null, "committer": null, "parents": [{"sha": "d1781ab0f5ec5929a1f2eef0a3b4ae6fdb0bf2e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1781ab0f5ec5929a1f2eef0a3b4ae6fdb0bf2e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1781ab0f5ec5929a1f2eef0a3b4ae6fdb0bf2e3"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "a0f81f4b3ecbe66bbcfe009c13d11619b7ded87f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c6db71de9460b2dac78b31e91ca279f6a50865/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c6db71de9460b2dac78b31e91ca279f6a50865/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=99c6db71de9460b2dac78b31e91ca279f6a50865", "patch": "@@ -1,3 +1,12 @@\n+2006-03-09  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/26499\n+\t* io/file_pos (st_rewind): Flush always.\n+\t* io/unix.c (fd_truncate): Return SUCCESS rather than FAILURE for\n+\tspecial files like /dev/null.\n+\t* io/transfer.c (st_write_done): Remove broken logic that prevented\n+\tcalling fd_truncate.\n+\n 2006-03-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/26554"}, {"sha": "5d247d9c6b3c3f031fc5b0d2f0a33610db4f8c6a", "filename": "libgfortran/io/file_pos.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c6db71de9460b2dac78b31e91ca279f6a50865/libgfortran%2Fio%2Ffile_pos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c6db71de9460b2dac78b31e91ca279f6a50865/libgfortran%2Fio%2Ffile_pos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ffile_pos.c?ref=99c6db71de9460b2dac78b31e91ca279f6a50865", "patch": "@@ -246,15 +246,14 @@ st_rewind (st_parameter_filepos *fpp)\n \t\t\t\"Cannot REWIND a file opened for DIRECT access\");\n       else\n \t{\n-\t  /* If we have been writing to the file, the last written record\n-\t     is the last record in the file, so truncate the file now.\n-\t     Reset to read mode so two consecutive rewind statements do not\n-\t     delete the file contents.  Flush buffer when switching mode.  */\n-          if (u->mode == WRITING)\n-\t    {\n-\t      flush (u->s);\n-\t      struncate (u->s);\n-\t    }\n+\t  /* Flush the buffers.  If we have been writing to the file, the last\n+\t       written record is the last record in the file, so truncate the\n+\t       file now.  Reset to read mode so two consecutive rewind\n+\t       statements do not delete the file contents.  */\n+\t  flush (u->s);\n+\t  if (u->mode == WRITING)\n+\t    struncate (u->s);\n+\n \t  u->mode = READING;\n \t  u->last_record = 0;\n \t  if (sseek (u->s, 0) == FAILURE)"}, {"sha": "8c43efc26f6a6223e3cf086e26f146af815e25a9", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c6db71de9460b2dac78b31e91ca279f6a50865/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c6db71de9460b2dac78b31e91ca279f6a50865/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=99c6db71de9460b2dac78b31e91ca279f6a50865", "patch": "@@ -2189,7 +2189,8 @@ st_write_done (st_parameter_dt *dtp)\n \n   /* Deal with endfile conditions associated with sequential files.  */\n \n-  if (dtp->u.p.current_unit != NULL && dtp->u.p.current_unit->flags.access == ACCESS_SEQUENTIAL)\n+  if (dtp->u.p.current_unit != NULL \n+      && dtp->u.p.current_unit->flags.access == ACCESS_SEQUENTIAL)\n     switch (dtp->u.p.current_unit->endfile)\n       {\n       case AT_ENDFILE:\t\t/* Remain at the endfile record.  */\n@@ -2200,12 +2201,10 @@ st_write_done (st_parameter_dt *dtp)\n \tbreak;\n \n       case NO_ENDFILE:\n-\tif (dtp->u.p.current_unit->current_record > dtp->u.p.current_unit->last_record)\n-\t  {\n-\t    /* Get rid of whatever is after this record.  */\n-\t    if (struncate (dtp->u.p.current_unit->s) == FAILURE)\n-\t      generate_error (&dtp->common, ERROR_OS, NULL);\n-\t  }\n+\t/* Get rid of whatever is after this record.  */\n+\tflush (dtp->u.p.current_unit->s);\n+\tif (struncate (dtp->u.p.current_unit->s) == FAILURE)\n+\t  generate_error (&dtp->common, ERROR_OS, NULL);\n \n \tdtp->u.p.current_unit->endfile = AT_ENDFILE;\n \tbreak;"}, {"sha": "550ddabff740edc57f6396e46051ba3e100ebb69", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c6db71de9460b2dac78b31e91ca279f6a50865/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c6db71de9460b2dac78b31e91ca279f6a50865/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=99c6db71de9460b2dac78b31e91ca279f6a50865", "patch": "@@ -586,7 +586,7 @@ fd_truncate (unix_stream * s)\n \n   /* non-seekable files, like terminals and fifo's fail the lseek.\n      Using ftruncate on a seekable special file (like /dev/null)\n-     is undefined, so we treat it as if the ftruncate failed.\n+     is undefined, so we treat it as if the ftruncate succeeded.\n   */\n #ifdef HAVE_FTRUNCATE\n   if (s->special_file || ftruncate (s->fd, s->logical_offset))\n@@ -597,7 +597,7 @@ fd_truncate (unix_stream * s)\n #endif\n     {\n       s->physical_offset = s->file_length = 0;\n-      return FAILURE;\n+      return SUCCESS;\n     }\n \n   s->physical_offset = s->file_length = s->logical_offset;"}]}