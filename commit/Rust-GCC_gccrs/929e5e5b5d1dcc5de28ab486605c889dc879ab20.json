{"sha": "929e5e5b5d1dcc5de28ab486605c889dc879ab20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI5ZTVlNWI1ZDFkY2M1ZGUyOGFiNDg2NjA1Yzg4OWRjODc5YWIyMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-01-27T16:17:39Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-01-27T16:17:39Z"}, "message": "rtl.texi (SYMBOL_REF_DATA): Adjust documentation for new opaque type.\n\n\t* doc/rtl.texi (SYMBOL_REF_DATA): Adjust documentation for new\n\topaque type.\n\t* optabs.c (init_one_libfunc): Use SET_SYMBOL_REF_DECL.\n\t* varasm.c (make_decl_rtl, build_constant_desc): Likewise.\n\t(force_const_mem): Use SET_SYMBOL_REF_CONSTANT.\n\t* rtl.h (rtunion_def): Remove rt_ptr.\n\t(X0PTR): Delete.\n\t(SYMBOL_REF_DATA): Use X0ANY instead of X0PTR.\n\t(SET_SYMBOL_REF_DECL, SET_SYMBOL_REF_CONSTANT): New macros.\n\t* config/i386/winnt.c (i386_pe_mark_dllexport)\n\t(i386_pe_mark_dllimport): Use SET_SYMBOL_REF_DECL.\n\nFrom-SVN: r110300", "tree": {"sha": "612feb4365b6606ca8a5b752114f712698b2215a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/612feb4365b6606ca8a5b752114f712698b2215a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/929e5e5b5d1dcc5de28ab486605c889dc879ab20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929e5e5b5d1dcc5de28ab486605c889dc879ab20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/929e5e5b5d1dcc5de28ab486605c889dc879ab20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929e5e5b5d1dcc5de28ab486605c889dc879ab20/comments", "author": null, "committer": null, "parents": [{"sha": "dccb60e93b6fe1b6acf55c4795815177981595e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dccb60e93b6fe1b6acf55c4795815177981595e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dccb60e93b6fe1b6acf55c4795815177981595e6"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "589ef6fedc3be3d887cf748458462a13b9be038f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=929e5e5b5d1dcc5de28ab486605c889dc879ab20", "patch": "@@ -1,3 +1,17 @@\n+2006-01-27  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* doc/rtl.texi (SYMBOL_REF_DATA): Adjust documentation for new\n+\topaque type.\n+\t* optabs.c (init_one_libfunc): Use SET_SYMBOL_REF_DECL.\n+\t* varasm.c (make_decl_rtl, build_constant_desc): Likewise.\n+\t(force_const_mem): Use SET_SYMBOL_REF_CONSTANT.\n+\t* rtl.h (rtunion_def): Remove rt_ptr.\n+\t(X0PTR): Delete.\n+\t(SYMBOL_REF_DATA): Use X0ANY instead of X0PTR.\n+\t(SET_SYMBOL_REF_DECL, SET_SYMBOL_REF_CONSTANT): New macros.\n+\t* config/i386/winnt.c (i386_pe_mark_dllexport)\n+\t(i386_pe_mark_dllimport): Use SET_SYMBOL_REF_DECL.\n+\n 2006-01-27 Gabor Loki <loki@gcc.gnu.org>\n \n \t* cfgcleanup.c (try_crossjump_to_edge): Fix comment typo."}, {"sha": "c7eae6cb85d65a99735e09490e91921f62fb50cf", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=929e5e5b5d1dcc5de28ab486605c889dc879ab20", "patch": "@@ -229,7 +229,7 @@ i386_pe_mark_dllexport (tree decl)\n   idp = get_identifier (newname);\n \n   symref = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (idp));\n-  SYMBOL_REF_DATA (symref) = decl;\n+  SET_SYMBOL_REF_DECL (symref, decl);\n   XEXP (DECL_RTL (decl), 0) = symref;\n }\n \n@@ -274,7 +274,7 @@ i386_pe_mark_dllimport (tree decl)\n   idp = get_identifier (newname);\n \n   symref = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (idp));\n-  SYMBOL_REF_DATA (symref) = decl;\n+  SET_SYMBOL_REF_DECL (symref, decl);\n   newrtl = gen_rtx_MEM (Pmode,symref);\n   XEXP (DECL_RTL (decl), 0) = newrtl;\n "}, {"sha": "c9f7c8750934ecca102445bf5c2667857fb9baa6", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=929e5e5b5d1dcc5de28ab486605c889dc879ab20", "patch": "@@ -462,7 +462,7 @@ pool entry for @var{x}.  It is null otherwise.\n \n @findex SYMBOL_REF_DATA\n @item SYMBOL_REF_DATA (@var{x})\n-A @samp{void *} pointer used to store @code{SYMBOL_REF_DECL} or\n+A field of opaque type used to store @code{SYMBOL_REF_DECL} or\n @code{SYMBOL_REF_CONSTANT}.\n \n @findex SYMBOL_REF_FLAGS"}, {"sha": "48a3406dc6bb0b4e15405eef2d052dfdb40cbb97", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=929e5e5b5d1dcc5de28ab486605c889dc879ab20", "patch": "@@ -5133,7 +5133,7 @@ init_one_libfunc (const char *name)\n \n   /* Zap the nonsensical SYMBOL_REF_DECL for this.  What we're left with\n      are the flags assigned by targetm.encode_section_info.  */\n-  SYMBOL_REF_DATA (symbol) = 0;\n+  SET_SYMBOL_REF_DECL (symbol, 0);\n \n   return symbol;\n }"}, {"sha": "250f383307c4db602a08d7b1663080e946c84e97", "filename": "gcc/rtl.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=929e5e5b5d1dcc5de28ab486605c889dc879ab20", "patch": "@@ -172,7 +172,6 @@ union rtunion_def\n   mem_attrs *rt_mem;\n   reg_attrs *rt_reg;\n   struct constant_descriptor_rtx *rt_constant;\n-  void *rt_ptr;\n };\n typedef union rtunion_def rtunion;\n \n@@ -633,7 +632,6 @@ extern void rtl_check_failed_flag (const char *, rtx, const char *,\n #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)\n #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)\n #define X0CONSTANT(RTX, N) (RTL_CHECK1 (RTX, N, '0').rt_constant)\n-#define X0PTR(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_ptr)\n \n /* Access a '0' field with any type.  */\n #define X0ANY(RTX, N)\t   RTL_CHECK1 (RTX, N, '0')\n@@ -1199,12 +1197,21 @@ do {\t\t\t\t\t\t\\\n \n /* A pointer attached to the SYMBOL_REF; either SYMBOL_REF_DECL or\n    SYMBOL_REF_CONSTANT.  */\n-#define SYMBOL_REF_DATA(RTX) X0PTR ((RTX), 2)\n+#define SYMBOL_REF_DATA(RTX) X0ANY ((RTX), 2)\n+\n+/* Set RTX's SYMBOL_REF_DECL to DECL.  RTX must not be a constant\n+   pool symbol.  */\n+#define SET_SYMBOL_REF_DECL(RTX, DECL) \\\n+  (gcc_assert (!CONSTANT_POOL_ADDRESS_P (RTX)), X0TREE ((RTX), 2) = (DECL))\n \n /* The tree (decl or constant) associated with the symbol, or null.  */\n #define SYMBOL_REF_DECL(RTX) \\\n   (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))\n \n+/* Set RTX's SYMBOL_REF_CONSTANT to C.  RTX must be a constant pool symbol.  */\n+#define SET_SYMBOL_REF_CONSTANT(RTX, C) \\\n+  (gcc_assert (CONSTANT_POOL_ADDRESS_P (RTX)), X0CONSTANT ((RTX), 2) = (C))\n+\n /* The rtx constant pool entry for a symbol, or null.  */\n #define SYMBOL_REF_CONSTANT(RTX) \\\n   (CONSTANT_POOL_ADDRESS_P (RTX) ? X0CONSTANT ((RTX), 2) : NULL)"}, {"sha": "b398b59a6b6192d039fa85c7dc79e7162b8c6190", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929e5e5b5d1dcc5de28ab486605c889dc879ab20/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=929e5e5b5d1dcc5de28ab486605c889dc879ab20", "patch": "@@ -845,7 +845,7 @@ make_decl_rtl (tree decl)\n \n   x = gen_rtx_SYMBOL_REF (Pmode, name);\n   SYMBOL_REF_WEAK (x) = DECL_WEAK (decl);\n-  SYMBOL_REF_DATA (x) = decl;\n+  SET_SYMBOL_REF_DECL (x, decl);\n \n   x = gen_rtx_MEM (DECL_MODE (decl), x);\n   if (TREE_CODE (decl) != FUNCTION_DECL)\n@@ -2573,7 +2573,7 @@ build_constant_desc (tree exp)\n   /* We have a symbol name; construct the SYMBOL_REF and the MEM.  */\n   symbol = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (label));\n   SYMBOL_REF_FLAGS (symbol) = SYMBOL_FLAG_LOCAL;\n-  SYMBOL_REF_DATA (symbol) = desc->value;\n+  SET_SYMBOL_REF_DECL (symbol, desc->value);\n   TREE_CONSTANT_POOL_ADDRESS_P (symbol) = 1;\n \n   rtl = gen_rtx_MEM (TYPE_MODE (TREE_TYPE (exp)), symbol);\n@@ -2978,8 +2978,8 @@ force_const_mem (enum machine_mode mode, rtx x)\n      the constants pool.  */\n   desc->sym = symbol = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (label));\n   SYMBOL_REF_FLAGS (symbol) = SYMBOL_FLAG_LOCAL;\n-  SYMBOL_REF_DATA (symbol) = desc;\n   CONSTANT_POOL_ADDRESS_P (symbol) = 1;\n+  SET_SYMBOL_REF_CONSTANT (symbol, desc);\n   current_function_uses_const_pool = 1;\n \n   /* Construct the MEM.  */"}]}