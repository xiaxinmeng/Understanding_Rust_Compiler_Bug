{"sha": "6b55f8c92b1ea138ac851389c456820fde8cf026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI1NWY4YzkyYjFlYTEzOGFjODUxMzg5YzQ1NjgyMGZkZThjZjAyNg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-01-26T11:33:22Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-01-26T11:33:22Z"}, "message": "[ARC] Add JLI support.\n\nThe ARCv2 ISA provides the JLI instruction, which is two-byte instructions\nthat can be used to reduce code size in an application. To make use of it,\nwe provide two new function attributes 'jli_always' and 'jli_fixed' which\nwill force the compiler to call the indicated function using a jli_s\ninstruction. The compiler also generates the entries in the JLI table for\nthe case when we use 'jli_always' attribute. In the case of 'jli_fixed'\nthe compiler assumes a fixed position of the function into JLI\ntable. Thus, the user needs to provide an assembly file with the JLI table\nfor the final link. This is usefully when we want to have a table in ROM\nand a second table in the RAM memory.\n\nThe jli instruction usage can be also forced without the need to annotate\nthe source code via '-mjli-always' command.\n\ngcc/\n2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n            John Eric Martin <John.Martin@emmicro-us.com>\n\n        * config/arc/arc-protos.h: Add arc_is_jli_call_p proto.\n        * config/arc/arc.c (_arc_jli_section): New struct.\n        (arc_jli_section): New type.\n        (rc_jli_sections): New static variable.\n        (arc_handle_jli_attribute): New function.\n        (arc_attribute_table): Add jli_always and jli_fixed attribute.\n        (arc_file_end): New function.\n        (TARGET_ASM_FILE_END): Define.\n        (arc_print_operand): Reuse 'S' letter for JLI output instruction.\n        (arc_add_jli_section): New function.\n        (jli_call_scan): Likewise.\n        (arc_reorg): Call jli_call_scan.\n        (arc_output_addsi): Remove 'S' from printing asm operand.\n        (arc_is_jli_call_p): New function.\n        * config/arc/arc.md (movqi_insn): Remove 'S' from printing asm\n        operand.\n        (movhi_insn): Likewise.\n        (movsi_insn): Likewise.\n        (movsi_set_cc_insn): Likewise.\n        (loadqi_update): Likewise.\n        (load_zeroextendqisi_update): Likewise.\n        (load_signextendqisi_update): Likewise.\n        (loadhi_update): Likewise.\n        (load_zeroextendhisi_update): Likewise.\n        (load_signextendhisi_update): Likewise.\n        (loadsi_update): Likewise.\n        (loadsf_update): Likewise.\n        (movsicc_insn): Likewise.\n        (bset_insn): Likewise.\n        (bxor_insn): Likewise.\n        (bclr_insn): Likewise.\n        (bmsk_insn): Likewise.\n        (bicsi3_insn): Likewise.\n        (cmpsi_cc_c_insn): Likewise.\n        (movsi_ne): Likewise.\n        (movsi_cond_exec): Likewise.\n        (clrsbsi2): Likewise.\n        (norm_f): Likewise.\n        (normw): Likewise.\n        (swap): Likewise.\n        (divaw): Likewise.\n        (flag): Likewise.\n        (sr): Likewise.\n        (kflag): Likewise.\n        (ffs): Likewise.\n        (ffs_f): Likewise.\n        (fls): Likewise.\n        (call_i): Remove 'S' asm letter, add jli instruction.\n        (call_value_i): Likewise.\n        * config/arc/arc.op (mjli-always): New option.\n        * config/arc/constraints.md (Cji): New constraint.\n        * config/arc/fpx.md (addsf3_fpx): Remove 'S' from printing asm\n        operand.\n        (subsf3_fpx): Likewise.\n        (mulsf3_fpx): Likewise.\n        * config/arc/simdext.md (vendrec_insn): Remove 'S' from printing\n        asm operand.\n        * doc/extend.texi (ARC): Document 'jli-always' and 'jli-fixed'\n        function attrbutes.\n        * doc/invoke.texi (ARC): Document mjli-always option.\n\ngcc/testsuite\n2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * gcc.target/arc/jli-1.c: New file.\n        * gcc.target/arc/jli-2.c: Likewise.\n\nCo-Authored-By: John Eric Martin <John.Martin@emmicro-us.com>\n\nFrom-SVN: r257081", "tree": {"sha": "70d2aef6a7c1b68ee263d94226cfc33eb32ae1c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70d2aef6a7c1b68ee263d94226cfc33eb32ae1c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b55f8c92b1ea138ac851389c456820fde8cf026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b55f8c92b1ea138ac851389c456820fde8cf026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b55f8c92b1ea138ac851389c456820fde8cf026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b55f8c92b1ea138ac851389c456820fde8cf026/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c921c45fdb3b6a6106e2de835a4a9e0e44b7afaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c921c45fdb3b6a6106e2de835a4a9e0e44b7afaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c921c45fdb3b6a6106e2de835a4a9e0e44b7afaf"}], "stats": {"total": 511, "additions": 430, "deletions": 81}, "files": [{"sha": "61a85f8c9d716dcf0a7db65c92a9257395790fa1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -1,3 +1,67 @@\n+2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n+\t    John Eric Martin <John.Martin@emmicro-us.com>\n+\n+\t* config/arc/arc-protos.h: Add arc_is_jli_call_p proto.\n+\t* config/arc/arc.c (_arc_jli_section): New struct.\n+\t(arc_jli_section): New type.\n+\t(rc_jli_sections): New static variable.\n+\t(arc_handle_jli_attribute): New function.\n+\t(arc_attribute_table): Add jli_always and jli_fixed attribute.\n+\t(arc_file_end): New function.\n+\t(TARGET_ASM_FILE_END): Define.\n+\t(arc_print_operand): Reuse 'S' letter for JLI output instruction.\n+\t(arc_add_jli_section): New function.\n+\t(jli_call_scan): Likewise.\n+\t(arc_reorg): Call jli_call_scan.\n+\t(arc_output_addsi): Remove 'S' from printing asm operand.\n+\t(arc_is_jli_call_p): New function.\n+\t* config/arc/arc.md (movqi_insn): Remove 'S' from printing asm\n+\toperand.\n+\t(movhi_insn): Likewise.\n+\t(movsi_insn): Likewise.\n+\t(movsi_set_cc_insn): Likewise.\n+\t(loadqi_update): Likewise.\n+\t(load_zeroextendqisi_update): Likewise.\n+\t(load_signextendqisi_update): Likewise.\n+\t(loadhi_update): Likewise.\n+\t(load_zeroextendhisi_update): Likewise.\n+\t(load_signextendhisi_update): Likewise.\n+\t(loadsi_update): Likewise.\n+\t(loadsf_update): Likewise.\n+\t(movsicc_insn): Likewise.\n+\t(bset_insn): Likewise.\n+\t(bxor_insn): Likewise.\n+\t(bclr_insn): Likewise.\n+\t(bmsk_insn): Likewise.\n+\t(bicsi3_insn): Likewise.\n+\t(cmpsi_cc_c_insn): Likewise.\n+\t(movsi_ne): Likewise.\n+\t(movsi_cond_exec): Likewise.\n+\t(clrsbsi2): Likewise.\n+\t(norm_f): Likewise.\n+\t(normw): Likewise.\n+\t(swap): Likewise.\n+\t(divaw): Likewise.\n+\t(flag): Likewise.\n+\t(sr): Likewise.\n+\t(kflag): Likewise.\n+\t(ffs): Likewise.\n+\t(ffs_f): Likewise.\n+\t(fls): Likewise.\n+\t(call_i): Remove 'S' asm letter, add jli instruction.\n+\t(call_value_i): Likewise.\n+\t* config/arc/arc.op (mjli-always): New option.\n+\t* config/arc/constraints.md (Cji): New constraint.\n+\t* config/arc/fpx.md (addsf3_fpx): Remove 'S' from printing asm\n+\toperand.\n+\t(subsf3_fpx): Likewise.\n+\t(mulsf3_fpx): Likewise.\n+\t* config/arc/simdext.md (vendrec_insn): Remove 'S' from printing\n+\tasm operand.\n+\t* doc/extend.texi (ARC): Document 'jli-always' and 'jli-fixed'\n+\tfunction attrbutes.\n+\t* doc/invoke.texi (ARC): Document mjli-always option.\n+\n 2018-01-26  Sebastian Perta  <sebastian.perta@renesas.com>\n \n \t* config/rl78/rl78.c: if operand 2 is const avoid addition with 0"}, {"sha": "7274fe0e4a0b2942d7d554b06ff20e316a3102a1", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -116,3 +116,5 @@ extern void arc_secondary_reload_conv (rtx, rtx, rtx, bool);\n extern void arc_cpu_cpp_builtins (cpp_reader *);\n extern bool arc_store_addr_hazard_p (rtx_insn *, rtx_insn *);\n extern rtx arc_eh_return_address_location (void);\n+extern bool arc_is_jli_call_p (rtx);\n+extern void arc_file_end (void);"}, {"sha": "78cf323a0367273931a1b79b0f8b24e0ba1b8120", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 214, "deletions": 6, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -73,6 +73,14 @@ along with GCC; see the file COPYING3.  If not see\n static char arc_cpu_name[10] = \"\";\n static const char *arc_cpu_string = arc_cpu_name;\n \n+typedef struct GTY (()) _arc_jli_section\n+{\n+  const char *name;\n+  struct _arc_jli_section *next;\n+} arc_jli_section;\n+\n+static arc_jli_section *arc_jli_sections = NULL;\n+\n /* Track which regs are set fixed/call saved/call used from commnad line.  */\n HARD_REG_SET overrideregs;\n \n@@ -217,6 +225,8 @@ static int get_arc_condition_code (rtx);\n \n static tree arc_handle_interrupt_attribute (tree *, tree, tree, int, bool *);\n static tree arc_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n+static tree arc_handle_jli_attribute (tree *, tree, tree, int, bool *);\n+\n \n /* Initialized arc_attribute_table to NULL since arc doesnot have any\n    machine specific supported attributes.  */\n@@ -240,6 +250,13 @@ const struct attribute_spec arc_attribute_table[] =\n      by the compiler.  */\n   { \"naked\", 0, 0, true, false, false,  false, arc_handle_fndecl_attribute,\n     NULL },\n+  /* Functions calls made using jli instruction.  The pointer in JLI\n+     table is found latter.  */\n+  { \"jli_always\",    0, 0, false, true,  true,  NULL, NULL },\n+  /* Functions calls made using jli instruction.  The pointer in JLI\n+     table is given as input parameter.  */\n+  { \"jli_fixed\",    1, 1, false, true,  true,  arc_handle_jli_attribute,\n+    NULL },\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n static int arc_comp_type_attributes (const_tree, const_tree);\n@@ -3754,7 +3771,7 @@ static int output_scaled = 0;\n     'd'\n     'D'\n     'R': Second word\n-    'S'\n+    'S': JLI instruction\n     'B': Branch comparison operand - suppress sda reference\n     'H': Most significant word\n     'L': Least significant word\n@@ -3970,8 +3987,27 @@ arc_print_operand (FILE *file, rtx x, int code)\n \toutput_operand_lossage (\"invalid operand to %%R code\");\n       return;\n     case 'S' :\n-\t/* FIXME: remove %S option.  */\n-\tbreak;\n+      if (GET_CODE (x) == SYMBOL_REF\n+\t  && arc_is_jli_call_p (x))\n+\t{\n+\t  if (SYMBOL_REF_DECL (x))\n+\t    {\n+\t      tree attrs = (TREE_TYPE (SYMBOL_REF_DECL (x)) != error_mark_node\n+\t\t\t    ? TYPE_ATTRIBUTES (TREE_TYPE (SYMBOL_REF_DECL (x)))\n+\t\t\t    : NULL_TREE);\n+\t      if (lookup_attribute (\"jli_fixed\", attrs))\n+\t\t{\n+\t\t  fprintf (file, \"%ld\\t; @\",\n+\t\t\t   TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (attrs))));\n+\t\t  assemble_name (file, XSTR (x, 0));\n+\t\t  return;\n+\t\t}\n+\t    }\n+\t  fprintf (file, \"@__jli.\");\n+\t  assemble_name (file, XSTR (x, 0));\n+\t  return;\n+\t}\n+      break;\n     case 'B' /* Branch or other LIMM ref - must not use sda references.  */ :\n       if (CONSTANT_P (x))\n \t{\n@@ -5084,6 +5120,36 @@ static void arc_file_start (void)\n   fprintf (asm_out_file, \"\\t.cpu %s\\n\", arc_cpu_string);\n }\n \n+/* Implement `TARGET_ASM_FILE_END'.  */\n+/* Outputs to the stdio stream FILE jli related text.  */\n+\n+void arc_file_end (void)\n+{\n+  arc_jli_section *sec = arc_jli_sections;\n+\n+  while (sec != NULL)\n+    {\n+      fprintf (asm_out_file, \"\\n\");\n+      fprintf (asm_out_file, \"# JLI entry for function \");\n+      assemble_name (asm_out_file, sec->name);\n+      fprintf (asm_out_file, \"\\n\\t.section .jlitab, \\\"axG\\\", @progbits, \"\n+\t       \".jlitab.\");\n+      assemble_name (asm_out_file, sec->name);\n+      fprintf (asm_out_file,\", comdat\\n\");\n+\n+      fprintf (asm_out_file, \"\\t.align\\t4\\n\");\n+      fprintf (asm_out_file, \"__jli.\");\n+      assemble_name (asm_out_file, sec->name);\n+      fprintf (asm_out_file, \":\\n\\t.weak __jli.\");\n+      assemble_name (asm_out_file, sec->name);\n+      fprintf (asm_out_file, \"\\n\\tb\\t@\");\n+      assemble_name (asm_out_file, sec->name);\n+      fprintf (asm_out_file, \"\\n\");\n+      sec = sec->next;\n+    }\n+  file_end_indicate_exec_stack ();\n+}\n+\n /* Cost functions.  */\n \n /* Compute a (partial) cost for rtx X.  Return true if the complete\n@@ -6866,13 +6932,25 @@ check_if_valid_sleep_operand (rtx *operands, int opno)\n /* Return true if it is ok to make a tail-call to DECL.  */\n \n static bool\n-arc_function_ok_for_sibcall (tree decl ATTRIBUTE_UNUSED,\n+arc_function_ok_for_sibcall (tree decl,\n \t\t\t     tree exp ATTRIBUTE_UNUSED)\n {\n+  tree attrs = NULL_TREE;\n+\n   /* Never tailcall from an ISR routine - it needs a special exit sequence.  */\n   if (ARC_INTERRUPT_P (arc_compute_function_type (cfun)))\n     return false;\n \n+  if (decl)\n+    {\n+      attrs = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n+\n+      if (lookup_attribute (\"jli_always\", attrs))\n+\treturn false;\n+      if (lookup_attribute (\"jli_fixed\", attrs))\n+\treturn false;\n+    }\n+\n   /* Everything else is ok.  */\n   return true;\n }\n@@ -7577,6 +7655,73 @@ arc_reorg_loops (void)\n   reorg_loops (true, &arc_doloop_hooks);\n }\n \n+/* Add the given function declaration to emit code in JLI section.  */\n+\n+static void\n+arc_add_jli_section (rtx pat)\n+{\n+  const char *name;\n+  tree attrs;\n+  arc_jli_section *sec = arc_jli_sections, *new_section;\n+  tree decl = SYMBOL_REF_DECL (pat);\n+\n+  if (!pat)\n+    return;\n+\n+  if (decl)\n+    {\n+      /* For fixed locations do not generate the jli table entry.  It\n+\t should be provided by the user as an asm file.  */\n+      attrs = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n+      if (lookup_attribute (\"jli_fixed\", attrs))\n+\treturn;\n+    }\n+\n+  name = XSTR (pat, 0);\n+\n+  /* Don't insert the same symbol twice.  */\n+  while (sec != NULL)\n+    {\n+      if(strcmp (name, sec->name) == 0)\n+\treturn;\n+      sec = sec->next;\n+    }\n+\n+  /* New name, insert it.  */\n+  new_section = (arc_jli_section *) xmalloc (sizeof (arc_jli_section));\n+  gcc_assert (new_section != NULL);\n+  new_section->name = name;\n+  new_section->next = arc_jli_sections;\n+  arc_jli_sections = new_section;\n+}\n+\n+/* Scan all calls and add symbols to be emitted in the jli section if\n+   needed.  */\n+\n+static void\n+jli_call_scan (void)\n+{\n+  rtx_insn *insn;\n+\n+  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+    {\n+      if (!CALL_P (insn))\n+\tcontinue;\n+\n+      rtx pat = PATTERN (insn);\n+      if (GET_CODE (pat) == COND_EXEC)\n+\tpat = COND_EXEC_CODE (pat);\n+      pat =  XVECEXP (pat, 0, 0);\n+      if (GET_CODE (pat) == SET)\n+\tpat = SET_SRC (pat);\n+\n+      pat = XEXP (XEXP (pat, 0), 0);\n+      if (GET_CODE (pat) == SYMBOL_REF\n+\t  && arc_is_jli_call_p (pat))\n+\tarc_add_jli_section (pat);\n+    }\n+}\n+\n static int arc_reorg_in_progress = 0;\n \n /* ARC's machince specific reorg function.  */\n@@ -7601,6 +7746,7 @@ arc_reorg (void)\n   arc_reorg_loops ();\n \n   workaround_arc_anomaly ();\n+  jli_call_scan ();\n \n /* FIXME: should anticipate ccfsm action, generate special patterns for\n    to-be-deleted branches that have no delay slot and have at least the\n@@ -8279,11 +8425,11 @@ arc_output_addsi (rtx *operands, bool cond_p, bool output_p)\n   /* Try to emit a 16 bit opcode with long immediate.  */\n   ret = 6;\n   if (short_p && match)\n-    ADDSI_OUTPUT1 (\"add%? %0,%1,%S2\");\n+    ADDSI_OUTPUT1 (\"add%? %0,%1,%2\");\n \n   /* We have to use a 32 bit opcode, and with a long immediate.  */\n   ret = 8;\n-  ADDSI_OUTPUT1 (intval < 0 ? \"sub%? %0,%1,%n2\" : \"add%? %0,%1,%S2\");\n+  ADDSI_OUTPUT1 (intval < 0 ? \"sub%? %0,%1,%n2\" : \"add%? %0,%1,%2\");\n }\n \n /* Emit code for an commutative_cond_exec instruction with OPERANDS.\n@@ -10822,6 +10968,68 @@ arc_builtin_setjmp_frame_value (void)\n   return gen_raw_REG (Pmode, FRAME_POINTER_REGNUM);\n }\n \n+/* Return nonzero if a jli call should be generated for a call from\n+   the current function to DECL.  */\n+\n+bool\n+arc_is_jli_call_p (rtx pat)\n+{\n+  tree attrs;\n+  tree decl = SYMBOL_REF_DECL (pat);\n+\n+  /* If it is not a well defined public function then return false.  */\n+  if (!decl || !SYMBOL_REF_FUNCTION_P (pat) || !TREE_PUBLIC (decl))\n+    return false;\n+\n+  attrs = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n+  if (lookup_attribute (\"jli_always\", attrs))\n+    return true;\n+\n+  if (lookup_attribute (\"jli_fixed\", attrs))\n+    return true;\n+\n+  return TARGET_JLI_ALWAYS;\n+}\n+\n+/* Handle and \"jli\" attribute; arguments as in struct\n+   attribute_spec.handler.  */\n+\n+static tree\n+arc_handle_jli_attribute (tree *node ATTRIBUTE_UNUSED,\n+\t\t\t  tree name, tree args, int,\n+\t\t\t  bool *no_add_attrs)\n+{\n+  if (!TARGET_V2)\n+    {\n+      warning (OPT_Wattributes,\n+\t       \"%qE attribute only valid for ARCv2 architecture\",\n+\t       name);\n+      *no_add_attrs = true;\n+    }\n+\n+  if (args == NULL_TREE)\n+    {\n+      warning (OPT_Wattributes,\n+\t       \"argument of %qE attribute is missing\",\n+\t       name);\n+      *no_add_attrs = true;\n+    }\n+  else\n+    {\n+      if (TREE_CODE (TREE_VALUE (args)) == NON_LVALUE_EXPR)\n+\tTREE_VALUE (args) = TREE_OPERAND (TREE_VALUE (args), 0);\n+      tree arg = TREE_VALUE (args);\n+      if (TREE_CODE (arg) != INTEGER_CST)\n+\t{\n+\t  warning (0, \"%qE attribute allows only an integer constant argument\",\n+\t\t   name);\n+\t  *no_add_attrs = true;\n+\t}\n+      /* FIXME! add range check.  TREE_INT_CST_LOW (arg) */\n+    }\n+   return NULL_TREE;\n+}\n+\n /* Implement TARGET_USE_ANCHORS_FOR_SYMBOL_P.  We don't want to use\n    anchors for small data: the GP register acts as an anchor in that\n    case.  We also don't want to use them for PC-relative accesses,"}, {"sha": "233e6f5379e61be1d5e57fdb6b702c27262066c5", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -641,7 +641,7 @@\n    mov%? %0,%1\n    mov%? %0,%1\n    mov%? %0,%1\n-   mov%? %0,%S1\n+   mov%? %0,%1\n    ldb%? %0,%1%&\n    stb%? %1,%0%&\n    ldb%? %0,%1%&\n@@ -682,18 +682,18 @@\n    mov%? %0,%1\n    mov%? %0,%1\n    mov%? %0,%1\n-   mov%? %0,%S1%&\n-   mov%? %0,%S1\n-   mov%? %0,%S1\n+   mov%? %0,%1%&\n+   mov%? %0,%1\n+   mov%? %0,%1\n    ld%_%? %0,%1%&\n    st%_%? %1,%0%&\n    xld%_%U1 %0,%1\n    ld%_%U1%V1 %0,%1\n    xst%_%U0 %1,%0\n    st%_%U0%V0 %1,%0\n    st%_%U0%V0 %1,%0\n-   st%_%U0%V0 %S1,%0\n-   st%_%U0%V0 %S1,%0\"\n+   st%_%U0%V0 %1,%0\n+   st%_%U0%V0 %1,%0\"\n   [(set_attr \"type\" \"move,move,move,move,move,move,move,move,move,move,move,load,store,load,load,store,store,store,store,store\")\n    (set_attr \"iscompact\" \"maybe,maybe,maybe,true,true,false,false,false,maybe_limm,maybe_limm,false,true,true,false,false,false,false,false,false,false\")\n    (set_attr \"predicable\" \"yes,no,yes,no,no,yes,no,yes,yes,yes,yes,no,no,no,no,no,no,no,no,no\")\n@@ -738,7 +738,7 @@\n    movh.cl %0,%L1>>16   ;9\n    * return INTVAL (operands[1]) & 0xffffff ? \\\"movbi.cl %0,%1 >> %p1,%p1,8;10\\\" : \\\"movbi.cl %0,%L1 >> 24,24,8;10\\\";\n    mov%? %0,%1\t\t;11\n-   add %0,%S1\t\t;12\n+   add %0,%1\t\t;12\n    add %0,pcl,%1@pcl    ;13\n    mov%? %0,%1  \t;14\n    mov%? %0,%1\t\t;15\n@@ -799,7 +799,7 @@\n    (set (match_operand:SI 0 \"register_operand\" \"=w,w,w\")\n \t(match_dup 1))]\n   \"\"\n-  \"mov%?.f %0,%S1\"\n+  \"mov%?.f %0,%1\"\n   ; splitting to 'tst' allows short insns and combination into brcc.\n   \"reload_completed && operands_match_p (operands[0], operands[1])\"\n   [(set (match_dup 2) (match_dup 3))]\n@@ -1287,7 +1287,7 @@\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldb.a%V4 %3,[%0,%S2]\"\n+  \"ldb.a%V4 %3,[%0,%2]\"\n   [(set_attr \"type\" \"load,load\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -1299,7 +1299,7 @@\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldb.a%V4 %3,[%0,%S2]\"\n+  \"ldb.a%V4 %3,[%0,%2]\"\n   [(set_attr \"type\" \"load,load\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -1311,7 +1311,7 @@\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldb.x.a%V4 %3,[%0,%S2]\"\n+  \"ldb.x.a%V4 %3,[%0,%2]\"\n   [(set_attr \"type\" \"load,load\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -1337,7 +1337,7 @@\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=w,w\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ld%_.a%V4 %3,[%0,%S2]\"\n+  \"ld%_.a%V4 %3,[%0,%2]\"\n   [(set_attr \"type\" \"load,load\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -1349,7 +1349,7 @@\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ld%_.a%V4 %3,[%0,%S2]\"\n+  \"ld%_.a%V4 %3,[%0,%2]\"\n   [(set_attr \"type\" \"load,load\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -1362,7 +1362,7 @@\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=w,w\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ld%_.x.a%V4 %3,[%0,%S2]\"\n+  \"ld%_.x.a%V4 %3,[%0,%2]\"\n   [(set_attr \"type\" \"load,load\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -1387,7 +1387,7 @@\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=w,w\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ld.a%V4 %3,[%0,%S2]\"\n+  \"ld.a%V4 %3,[%0,%2]\"\n   [(set_attr \"type\" \"load,load\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -1411,7 +1411,7 @@\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=w,w\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ld.a%V4 %3,[%0,%S2]\"\n+  \"ld.a%V4 %3,[%0,%2]\"\n   [(set_attr \"type\" \"load,load\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -1479,7 +1479,7 @@\n       && rtx_equal_p (operands[1], constm1_rtx)\n       && GET_CODE (operands[3]) == LTU)\n     return \"sbc.cs %0,%0,%0\";\n-  return \"mov.%d3 %0,%S1\";\n+  return \"mov.%d3 %0,%1\";\n }\n   [(set_attr \"type\" \"cmove,cmove\")\n    (set_attr \"length\" \"4,8\")])\n@@ -3144,7 +3144,7 @@\n   \"@\n      bset%? %0,%1,%2 ;;peep2, constr 1\n      bset %0,%1,%2 ;;peep2, constr 2\n-     bset %0,%S1,%2 ;;peep2, constr 3\"\n+     bset %0,%1,%2 ;;peep2, constr 3\"\n   [(set_attr \"length\" \"4,4,8\")\n    (set_attr \"predicable\" \"yes,no,no\")\n    (set_attr \"cond\" \"canuse,nocond,nocond\")]\n@@ -3160,7 +3160,7 @@\n   \"@\n      bxor%? %0,%1,%2\n      bxor %0,%1,%2\n-     bxor %0,%S1,%2\"\n+     bxor %0,%1,%2\"\n   [(set_attr \"length\" \"4,4,8\")\n    (set_attr \"predicable\" \"yes,no,no\")\n    (set_attr \"cond\" \"canuse,nocond,nocond\")]\n@@ -3176,7 +3176,7 @@\n   \"@\n      bclr%? %0,%1,%2\n      bclr %0,%1,%2\n-     bclr %0,%S1,%2\"\n+     bclr %0,%1,%2\"\n   [(set_attr \"length\" \"4,4,8\")\n    (set_attr \"predicable\" \"yes,no,no\")\n    (set_attr \"cond\" \"canuse,nocond,nocond\")]\n@@ -3192,9 +3192,9 @@\n \t\t\t (const_int -1))))]\n   \"\"\n   \"@\n-     bmsk%? %0,%S1,%2\n+     bmsk%? %0,%1,%2\n      bmsk %0,%1,%2\n-     bmsk %0,%S1,%2\"\n+     bmsk %0,%1,%2\"\n   [(set_attr \"length\" \"4,4,8\")\n    (set_attr \"predicable\" \"yes,no,no\")\n    (set_attr \"cond\" \"canuse,nocond,nocond\")]\n@@ -3306,10 +3306,10 @@\n    bic%? %0, %2, %1%& ;;constraint 0\n    bic%? %0,%2,%1  ;;constraint 1\n    bic %0,%2,%1    ;;constraint 2, FIXME: will it ever get generated ???\n-   bic%? %0,%2,%S1 ;;constraint 3, FIXME: will it ever get generated ???\n+   bic%? %0,%2,%1  ;;constraint 3, FIXME: will it ever get generated ???\n    bic %0,%2,%1    ;;constraint 4\n-   bic %0,%2,%S1   ;;constraint 5, FIXME: will it ever get generated ???\n-   bic %0,%S2,%1   ;;constraint 6\"\n+   bic %0,%2,%1    ;;constraint 5, FIXME: will it ever get generated ???\n+   bic %0,%2,%1    ;;constraint 6\"\n   [(set_attr \"length\" \"*,4,4,8,4,8,8\")\n   (set_attr \"iscompact\" \"maybe, false, false, false, false, false, false\")\n   (set_attr \"predicable\" \"no,yes,no,yes,no,no,no\")\n@@ -3640,7 +3640,7 @@\n \t(compare:CC_C (match_operand:SI 0 \"register_operand\"  \"Rcqq,Rcqq,  h, c,Rcqq,  c\")\n \t\t      (match_operand:SI 1 \"nonmemory_operand\"   \"cO,  hO,Cm1,cI, Cal,Cal\")))]\n   \"\"\n-  \"cmp%? %0,%S1%&\"\n+  \"cmp%? %0,%1%&\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"iscompact\" \"true,true,true,false,true_limm,false\")\n    (set_attr \"cond\" \"set\")\n@@ -3747,7 +3747,7 @@\n \t* current_insn_predicate = 0; return \\\"mov%?.ne %0,%1\\\";\n \t* current_insn_predicate = 0; return \\\"mov%?.ne %0,%1\\\";\n \tmov.ne %0,%1\n-\tmov.ne %0,%S1\"\n+\tmov.ne %0,%1\"\n   [(set_attr \"type\" \"cmove\")\n    (set_attr \"iscompact\" \"true,true,true_limm,false,false\")\n    (set_attr \"length\" \"2,2,6,4,8\")\n@@ -3760,7 +3760,7 @@\n      (set (match_operand:SI 0 \"dest_reg_operand\" \"=w,w\")\n \t  (match_operand:SI 1 \"nonmemory_operand\" \"LRac,?Cal\")))]\n   \"\"\n-  \"mov.%d3 %0,%S1\"\n+  \"mov.%d3 %0,%1\"\n   [(set_attr \"type\" \"cmove\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -4228,29 +4228,29 @@\n   }\n \")\n \n-\n ; Rcq, which is used in alternative 0, checks for conditional execution.\n ; At instruction output time, if it doesn't match and we end up with\n ; alternative 1 (\"q\"), that means that we can't use the short form.\n (define_insn \"*call_i\"\n   [(call (mem:SI (match_operand:SI 0\n-\t\t  \"call_address_operand\" \"Rcq,q,c,Cbp,Cbr,L,I,Cal\"))\n+\t\t  \"call_address_operand\" \"Rcq,q,c,Cji,Cbp,Cbr,L,I,Cal\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:SI 31))]\n   \"\"\n   \"@\n    jl%!%* [%0]%&\n    jl%!%* [%0]%&\n    jl%!%* [%0]\n+   jli_s %S0\n    bl%!%* %P0\n    bl%!%* %P0\n-   jl%!%* %S0\n-   jl%* %S0\n-   jl%! %S0\"\n-  [(set_attr \"type\" \"call,call,call,call,call,call,call,call_no_delay_slot\")\n-   (set_attr \"iscompact\" \"maybe,false,*,*,*,*,*,*\")\n-   (set_attr \"predicable\" \"no,no,yes,yes,no,yes,no,yes\")\n-   (set_attr \"length\" \"*,*,4,4,4,4,4,8\")])\n+   jl%!%* %0\n+   jl%* %0\n+   jl%! %0\"\n+  [(set_attr \"type\" \"call,call,call,call_no_delay_slot,call,call,call,call,call_no_delay_slot\")\n+   (set_attr \"iscompact\" \"maybe,false,*,true,*,*,*,*,*\")\n+   (set_attr \"predicable\" \"no,no,yes,no,yes,no,yes,no,yes\")\n+   (set_attr \"length\" \"*,*,4,2,4,4,4,4,8\")])\n \n (define_expand \"call_value\"\n   ;; operand 2 is stack_size_rtx\n@@ -4272,30 +4272,30 @@\n       XEXP (operands[1], 0) = force_reg (Pmode, callee);\n   }\")\n \n-\n ; Rcq, which is used in alternative 0, checks for conditional execution.\n ; At instruction output time, if it doesn't match and we end up with\n ; alternative 1 (\"q\"), that means that we can't use the short form.\n (define_insn \"*call_value_i\"\n-  [(set (match_operand 0 \"dest_reg_operand\"  \"=Rcq,q,w,  w,  w,w,w,  w\")\n+  [(set (match_operand 0 \"dest_reg_operand\"  \"=Rcq,q,w,  w,  w,  w,w,w,  w\")\n \t(call (mem:SI (match_operand:SI 1\n-\t\t       \"call_address_operand\" \"Rcq,q,c,Cbp,Cbr,L,I,Cal\"))\n+\t\t       \"call_address_operand\" \"Rcq,q,c,Cji,Cbp,Cbr,L,I,Cal\"))\n \t      (match_operand 2 \"\" \"\")))\n    (clobber (reg:SI 31))]\n   \"\"\n   \"@\n    jl%!%* [%1]%&\n    jl%!%* [%1]%&\n    jl%!%* [%1]\n+   jli_s %S1\n    bl%!%* %P1;1\n    bl%!%* %P1;1\n-   jl%!%* %S1\n-   jl%* %S1\n-   jl%! %S1\"\n-  [(set_attr \"type\" \"call,call,call,call,call,call,call,call_no_delay_slot\")\n-   (set_attr \"iscompact\" \"maybe,false,*,*,*,*,*,*\")\n-   (set_attr \"predicable\" \"no,no,yes,yes,no,yes,no,yes\")\n-   (set_attr \"length\" \"*,*,4,4,4,4,4,8\")])\n+   jl%!%* %1\n+   jl%* %1\n+   jl%! %1\"\n+  [(set_attr \"type\" \"call,call,call,call_no_delay_slot,call,call,call,call,call_no_delay_slot\")\n+   (set_attr \"iscompact\" \"maybe,false,*,true,*,*,*,*,*\")\n+   (set_attr \"predicable\" \"no,no,yes,no,yes,no,yes,no,yes\")\n+   (set_attr \"length\" \"*,*,4,2,4,4,4,4,8\")])\n \n ; There is a bl_s instruction (16 bit opcode branch-and-link), but we can't\n ; use it for lack of inter-procedural branch shortening.\n@@ -4467,7 +4467,7 @@\n   \"TARGET_NORM\"\n   \"@\n    norm \\t%0, %1\n-   norm \\t%0, %S1\"\n+   norm \\t%0, %1\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"two_cycle_core,two_cycle_core\")])\n \n@@ -4479,7 +4479,7 @@\n   \"TARGET_NORM\"\n   \"@\n    norm.f\\t%0, %1\n-   norm.f\\t%0, %S1\"\n+   norm.f\\t%0, %1\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"two_cycle_core,two_cycle_core\")])\n \n@@ -4499,7 +4499,7 @@\n   \"TARGET_NORM\"\n   \"@\n    norm%_ \\t%0, %1\n-   norm%_ \\t%0, %S1\"\n+   norm%_ \\t%0, %1\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"two_cycle_core,two_cycle_core\")])\n \n@@ -4588,7 +4588,7 @@\n   \"TARGET_SWAP\"\n   \"@\n    swap \\t%0, %1\n-   swap \\t%0, %S1\n+   swap \\t%0, %1\n    swap \\t%0, %1\"\n   [(set_attr \"length\" \"4,8,4\")\n    (set_attr \"type\" \"two_cycle_core,two_cycle_core,two_cycle_core\")])\n@@ -4601,8 +4601,8 @@\n   \"TARGET_ARC700 || TARGET_EA_SET\"\n   \"@\n    divaw \\t%0, %1, %2\n-   divaw \\t%0, %S1, %2\n-   divaw \\t%0, %1, %S2\"\n+   divaw \\t%0, %1, %2\n+   divaw \\t%0, %1, %2\"\n   [(set_attr \"length\" \"4,8,8\")\n    (set_attr \"type\" \"divaw,divaw,divaw\")])\n \n@@ -4613,7 +4613,7 @@\n   \"@\n     flag%? %0\n     flag %0\n-    flag%? %S0\"\n+    flag%? %0\"\n   [(set_attr \"length\" \"4,4,8\")\n    (set_attr \"type\" \"misc,misc,misc\")\n    (set_attr \"predicable\" \"yes,no,yes\")\n@@ -4707,7 +4707,7 @@\n \t\t     (match_operand:SI 1 \"general_operand\" \"Ir,I,HCal,r\")]\n \t\t   VUNSPEC_ARC_SR)]\n   \"\"\n-  \"sr\\t%S0, [%1]\"\n+  \"sr\\t%0, [%1]\"\n   [(set_attr \"length\" \"8,4,8,4\")\n    (set_attr \"type\" \"sr,sr,sr,sr\")])\n \n@@ -5283,7 +5283,7 @@\n ;; ??? Should this use arc_output_libcall and set is_sfunc?\n (define_insn \"*millicode_thunk_st\"\n   [(match_parallel 0 \"millicode_store_operation\"\n-     [(set (mem:SI (reg:SI SP_REG)) (reg:SI 13))])]\n+\t\t   [(set (mem:SI (reg:SI SP_REG)) (reg:SI 13))])]\n   \"\"\n {\n   output_asm_insn (\"bl%* __st_r13_to_%0\",\n@@ -5295,7 +5295,7 @@\n \n (define_insn \"*millicode_thunk_ld\"\n   [(match_parallel 0 \"millicode_load_clob_operation\"\n-     [(set (reg:SI 13) (mem:SI (reg:SI SP_REG)))])]\n+\t\t   [(set (reg:SI 13) (mem:SI (reg:SI SP_REG)))])]\n   \"\"\n {\n   output_asm_insn (\"bl%* __ld_r13_to_%0\",\n@@ -5308,9 +5308,9 @@\n ; the sibthunk restores blink, so we use the return rtx.\n (define_insn \"*millicode_sibthunk_ld\"\n   [(match_parallel 0 \"millicode_load_operation\"\n-     [(return)\n-      (set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (reg:SI 12)))\n-      (set (reg:SI 13) (mem:SI (reg:SI SP_REG)))])]\n+\t\t   [(return)\n+\t\t    (set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (reg:SI 12)))\n+\t\t    (set (reg:SI 13) (mem:SI (reg:SI SP_REG)))])]\n   \"\"\n {\n   output_asm_insn (\"b%* __ld_r13_to_%0_ret\",\n@@ -5629,7 +5629,7 @@\n   \"@\n     kflag%? %0\n     kflag %0\n-    kflag%? %S0\"\n+    kflag%? %0\"\n   [(set_attr \"length\" \"4,4,8\")\n    (set_attr \"type\" \"misc,misc,misc\")\n    (set_attr \"predicable\" \"yes,no,yes\")\n@@ -5651,7 +5651,7 @@\n   \"TARGET_NORM && TARGET_V2\"\n   \"@\n    ffs \\t%0, %1\n-   ffs \\t%0, %S1\"\n+   ffs \\t%0, %1\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"two_cycle_core,two_cycle_core\")])\n \n@@ -5664,7 +5664,7 @@\n   \"TARGET_NORM && TARGET_V2\"\n   \"@\n    ffs.f\\t%0, %1\n-   ffs.f\\t%0, %S1\"\n+   ffs.f\\t%0, %1\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"two_cycle_core,two_cycle_core\")])\n \n@@ -5691,7 +5691,7 @@\n   \"TARGET_NORM && TARGET_V2\"\n   \"@\n    fls \\t%0, %1\n-   fls \\t%0, %S1\"\n+   fls \\t%0, %1\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"two_cycle_core,two_cycle_core\")])\n "}, {"sha": "5f10c0ee0051715b70058da291128ccfafd97989", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -53,6 +53,10 @@ mARC700\n Target Report\n Same as -mA7.\n \n+mjli-always\n+Target Report Mask(JLI_ALWAYS)\n+Force all calls to be made via a jli instruction.\n+\n mmpy-option=\n Target RejectNegative Joined Enum(arc_mpy) Var(arc_mpy_option) Init(DEFAULT_arc_mpy_option)\n -mmpy-option=MPY Compile ARCv2 code with a multiplier design option."}, {"sha": "565d8608e85099fdc3ef43f9d12d5381217f095d", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -401,6 +401,12 @@\n \t    (match_test \"arc_is_shortcall_p (op)\"))\n        (match_code \"label_ref\")))\n \n+(define_constraint \"Cji\"\n+  \"JLI call\"\n+  (and (match_code \"symbol_ref\")\n+       (match_test \"TARGET_CODE_DENSITY\")\n+       (match_test \"arc_is_jli_call_p (op)\")))\n+\n (define_constraint \"Cpc\"\n   \"pc-relative constant\"\n   (match_test \"arc_legitimate_pic_addr_p (op)\"))"}, {"sha": "3bb9cb012ae5947afcfafff75898290ccdb5efe0", "filename": "gcc/config/arc/elf.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Felf.h?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -66,3 +66,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Pre/post modify with register displacement are default.  */\n #undef TARGET_AUTO_MODIFY_REG_DEFAULT\n #define TARGET_AUTO_MODIFY_REG_DEFAULT 1\n+\n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END arc_file_end"}, {"sha": "8f65df1ba0f04d29165408e7d4b0b16491a22648", "filename": "gcc/config/arc/fpx.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Ffpx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Ffpx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ffpx.md?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -59,9 +59,9 @@\n   \"@\n    fadd %0,%1,%2\n    fadd %0,%1,%2\n-   fadd   %0,%S1,%2\n-   fadd   %0,%1,%S2\n-   fadd%? %0,%1,%S2\"\n+   fadd   %0,%1,%2\n+   fadd   %0,%1,%2\n+   fadd%? %0,%1,%2\"\n   [(set_attr \"type\" \"spfp\")\n   (set_attr \"length\" \"4,4,8,8,8\")])\n \n@@ -74,9 +74,9 @@\n   \"@\n    fsub %0,%1,%2\n    fsub %0,%1,%2\n-   fsub   %0,%S1,%2\n-   fsub   %0,%1,%S2\n-   fsub%? %0,%1,%S2\"\n+   fsub   %0,%1,%2\n+   fsub   %0,%1,%2\n+   fsub%? %0,%1,%2\"\n   [(set_attr \"type\" \"spfp\")\n   (set_attr \"length\" \"4,4,8,8,8\")])\n \n@@ -89,9 +89,9 @@\n   \"@\n    fmul %0,%1,%2\n    fmul %0,%1,%2\n-   fmul   %0,%S1,%2\n-   fmul   %0,%1,%S2\n-   fmul%? %0,%1,%S2\"\n+   fmul   %0,%1,%2\n+   fmul   %0,%1,%2\n+   fmul%? %0,%1,%2\"\n   [(set_attr \"type\" \"spfp\")\n   (set_attr \"length\" \"4,4,8,8,8\")])\n "}, {"sha": "385083331d5469bfd36a33c797fc6577507734a3", "filename": "gcc/config/arc/linux.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Flinux.h?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -61,6 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n    %{shared:-lc} \\\n    %{!shared:%{profile:-lc_p}%{!profile:-lc}}\"\n \n+#undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n /* No SDATA default for linux.  */"}, {"sha": "8885a6ae47d923d991158108cde5c7ac04b0d545", "filename": "gcc/config/arc/simdext.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Fsimdext.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fconfig%2Farc%2Fsimdext.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fsimdext.md?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -1190,7 +1190,7 @@\n (define_insn \"vendrec_insn\"\n   [(unspec_volatile [(match_operand:SI 0 \"nonmemory_operand\"  \"r\")] UNSPEC_ARC_SIMD_VENDREC)]\n   \"TARGET_SIMD_SET\"\n-  \"vendrec %S0\"\n+  \"vendrec %0\"\n   [(set_attr \"type\" \"simd_vcontrol\")\n    (set_attr \"length\" \"4\")\n    (set_attr \"cond\" \"nocond\")])"}, {"sha": "478894be0ea80f2e3b3275807bac3fcffaeee0b4", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -3762,6 +3762,19 @@ the call site.  A function marked with the @code{short_call}\n attribute will always be close enough to be called with a conditional\n branch-and-link instruction, which has a 21-bit offset from\n the call site.\n+\n+@item jli_always\n+@cindex @code{jli_always} function attribute, ARC\n+Forces a particular function to be called using @code{jli}\n+instruction.  The @code{jli} instruction makes use of a table stored\n+into @code{.jlitab} section, which holds the location of the functions\n+which are addressed using this instruction.\n+\n+@item jli_fixed\n+@cindex @code{jli_fixed} function attribute, ARC\n+Identical like the above one, but the location of the function in the\n+@code{jli} table is known and given as an attribute parameter.\n+\n @end table\n \n @node ARM Function Attributes"}, {"sha": "328ee849b0beb00d3eaac9d639eea6cc97bc53fa", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -611,7 +611,7 @@ Objective-C and Objective-C++ Dialects}.\n -msplit-vecmove-early  -m1reg-@var{reg}}\n \n @emph{ARC Options}\n-@gccoptlist{-mbarrel-shifter @gol\n+@gccoptlist{-mbarrel-shifter -mjli-always @gol\n -mcpu=@var{cpu}  -mA6  -mARC600  -mA7  -mARC700 @gol\n -mdpfp  -mdpfp-compact  -mdpfp-fast  -mno-dpfp-lrsr @gol\n -mea  -mno-mpy  -mmul32x16  -mmul64  -matomic @gol\n@@ -14874,6 +14874,11 @@ is being compiled:\n Generate instructions supported by barrel shifter.  This is the default\n unless @option{-mcpu=ARC601} or @samp{-mcpu=ARCEM} is in effect.\n \n+@item -mjli-always\n+@opindex mjli-alawys\n+Force to call a function using jli_s instruction.  This option is\n+valid only for ARCv2 architecture.\n+\n @item -mcpu=@var{cpu}\n @opindex mcpu\n Set architecture type, register usage, and instruction scheduling"}, {"sha": "4e02b1e6c6488237379fec14e20a307f906bedb0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -1,3 +1,8 @@\n+2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/jli-1.c: New file.\n+\t* gcc.target/arc/jli-2.c: Likewise.\n+\n 2018-01-26  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \t* gcc.target/aarch64/sve/peel_ind_1.c: Match (adrp|adr) in scan-assembler."}, {"sha": "f7259b357728b7c772e1038f941ea3d317555e5a", "filename": "gcc/testsuite/gcc.target/arc/jli-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjli-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjli-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjli-1.c?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"jli only available for ARCv2\" { arc700 || arc6xx } } */\n+/* { dg-options \"-O0 -mcode-density\" } */\n+\n+int func(int i) __attribute__((jli_always));\n+\n+int func(int i)\n+{\n+  return i*i;\n+}\n+\n+int main()\n+{\n+  return func(100);\n+}\n+\n+/* { dg-final { scan-assembler \"jli_s @__jli.func\" } } */\n+/* { dg-final { scan-assembler \".weak __jli.func\" } } */\n+/* { dg-final { scan-assembler \"b\\\\\\s+@func\" } } */"}, {"sha": "96a35a4c09036259b01748208fa524e15050a41f", "filename": "gcc/testsuite/gcc.target/arc/jli-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjli-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b55f8c92b1ea138ac851389c456820fde8cf026/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjli-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjli-2.c?ref=6b55f8c92b1ea138ac851389c456820fde8cf026", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"jli only available for ARCv2\" { arc700 || arc6xx } } */\n+/* { dg-options \"-O0 -mcode-density\" } */\n+\n+int func(int i) __attribute__((jli_fixed(2)));\n+\n+int func(int i)\n+{\n+  return i*i;\n+}\n+\n+int main()\n+{\n+  return func(100);\n+}\n+\n+/* { dg-final { scan-assembler \"jli_s 2\" } } */\n+/* { dg-final { scan-assembler-not \".weak __jli.func\" } } */\n+/* { dg-final { scan-assembler-not \"b\\\\\\s+@func\" } } */"}]}