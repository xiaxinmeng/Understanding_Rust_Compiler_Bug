{"sha": "cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I3ZGM0ZGE0Y2NjNDc1Njc1YjVhZWM2YTA4ZDNlOGMwYTE3NjFlNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-11-07T09:33:54Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-11-07T09:33:54Z"}, "message": "Libsanitizer: merge from trunk\n\n2019-11-07  Martin Liska  <mliska@suse.cz>\n\n\t* merge.sh: Update to use llvm-project git repository.\n\t* all source files: Merge from upstream\n\t82588e05cc32bb30807e480abd4e689b0dee132a.\n\nFrom-SVN: r277909", "tree": {"sha": "610840af295a13e6f4c2e87e7bfe52a4723ca534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/610840af295a13e6f4c2e87e7bfe52a4723ca534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29f3def30844dd13e79972fa03a50af68120f7ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f3def30844dd13e79972fa03a50af68120f7ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f3def30844dd13e79972fa03a50af68120f7ac"}], "stats": {"total": 426, "additions": 292, "deletions": 134}, "files": [{"sha": "7054bce53bcccf51c6c4530926cd350fd8c91799", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -1,3 +1,9 @@\n+2019-11-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* merge.sh: Update to use llvm-project git repository.\n+\t* all source files: Merge from upstream\n+\t82588e05cc32bb30807e480abd4e689b0dee132a.\n+\n 2019-11-05  Martin Liska  <mliska@suse.cz>\n \n \t* ubsan/ubsan_flags.cpp (InitializeFlags): Trunk decided to print"}, {"sha": "49ee2c3bab80107f1245f2a86c4663f3e5c12e53", "filename": "libsanitizer/MERGE", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FMERGE?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -1,4 +1,4 @@\n-375507\n+82588e05cc32bb30807e480abd4e689b0dee132a\n \n-The first line of this file holds the svn revision number of the\n+The first line of this file holds the git revision number of the\n last merge done from the master library sources."}, {"sha": "65c51fbafdd0c1c0bbfbdfd784cf8aedcae05224", "filename": "libsanitizer/asan/asan_allocator.cpp", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_allocator.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_allocator.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_allocator.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -246,6 +246,7 @@ struct Allocator {\n   AllocatorCache fallback_allocator_cache;\n   QuarantineCache fallback_quarantine_cache;\n \n+  uptr max_user_defined_malloc_size;\n   atomic_uint8_t rss_limit_exceeded;\n \n   // ------------------- Options --------------------------\n@@ -280,6 +281,10 @@ struct Allocator {\n     SetAllocatorMayReturnNull(options.may_return_null);\n     allocator.InitLinkerInitialized(options.release_to_os_interval_ms);\n     SharedInitCode(options);\n+    max_user_defined_malloc_size = common_flags()->max_allocation_size_mb\n+                                       ? common_flags()->max_allocation_size_mb\n+                                             << 20\n+                                       : kMaxAllowedMallocSize;\n   }\n \n   bool RssLimitExceeded() {\n@@ -394,6 +399,16 @@ struct Allocator {\n     return right_chunk;\n   }\n \n+  bool UpdateAllocationStack(uptr addr, BufferedStackTrace *stack) {\n+    AsanChunk *m = GetAsanChunkByAddr(addr);\n+    if (!m) return false;\n+    if (m->chunk_state != CHUNK_ALLOCATED) return false;\n+    if (m->Beg() != addr) return false;\n+    atomic_store((atomic_uint32_t *)&m->alloc_context_id, StackDepotPut(*stack),\n+                 memory_order_relaxed);\n+    return true;\n+  }\n+\n   // -------------------- Allocation/Deallocation routines ---------------\n   void *Allocate(uptr size, uptr alignment, BufferedStackTrace *stack,\n                  AllocType alloc_type, bool can_fill) {\n@@ -435,14 +450,16 @@ struct Allocator {\n       using_primary_allocator = false;\n     }\n     CHECK(IsAligned(needed_size, min_alignment));\n-    if (size > kMaxAllowedMallocSize || needed_size > kMaxAllowedMallocSize) {\n+    if (size > kMaxAllowedMallocSize || needed_size > kMaxAllowedMallocSize ||\n+        size > max_user_defined_malloc_size) {\n       if (AllocatorMayReturnNull()) {\n         Report(\"WARNING: AddressSanitizer failed to allocate 0x%zx bytes\\n\",\n                (void*)size);\n         return nullptr;\n       }\n-      ReportAllocationSizeTooBig(size, needed_size, kMaxAllowedMallocSize,\n-                                 stack);\n+      uptr malloc_limit =\n+          Min(kMaxAllowedMallocSize, max_user_defined_malloc_size);\n+      ReportAllocationSizeTooBig(size, needed_size, malloc_limit, stack);\n     }\n \n     AsanThread *t = GetCurrentThread();\n@@ -1105,6 +1122,11 @@ void __sanitizer_purge_allocator() {\n   instance.Purge(&stack);\n }\n \n+int __asan_update_allocation_context(void* addr) {\n+  GET_STACK_TRACE_MALLOC;\n+  return instance.UpdateAllocationStack((uptr)addr, &stack);\n+}\n+\n #if !SANITIZER_SUPPORTS_WEAK_HOOKS\n // Provide default (no-op) implementation of malloc hooks.\n SANITIZER_INTERFACE_WEAK_DEF(void, __sanitizer_malloc_hook,"}, {"sha": "9d7dbc6f264cea7b80a71a91da37cfa0cfbbd0db", "filename": "libsanitizer/asan/asan_globals.cpp", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_globals.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_globals.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_globals.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -154,6 +154,23 @@ static void CheckODRViolationViaIndicator(const Global *g) {\n   }\n }\n \n+// Check ODR violation for given global G by checking if it's already poisoned.\n+// We use this method in case compiler doesn't use private aliases for global\n+// variables.\n+static void CheckODRViolationViaPoisoning(const Global *g) {\n+  if (__asan_region_is_poisoned(g->beg, g->size_with_redzone)) {\n+    // This check may not be enough: if the first global is much larger\n+    // the entire redzone of the second global may be within the first global.\n+    for (ListOfGlobals *l = list_of_all_globals; l; l = l->next) {\n+      if (g->beg == l->g->beg &&\n+          (flags()->detect_odr_violation >= 2 || g->size != l->g->size) &&\n+          !IsODRViolationSuppressed(g->name))\n+        ReportODRViolation(g, FindRegistrationSite(g),\n+                           l->g, FindRegistrationSite(l->g));\n+    }\n+  }\n+}\n+\n // Clang provides two different ways for global variables protection:\n // it can poison the global itself or its private alias. In former\n // case we may poison same symbol multiple times, that can help us to\n@@ -199,6 +216,8 @@ static void RegisterGlobal(const Global *g) {\n     // where two globals with the same name are defined in different modules.\n     if (UseODRIndicator(g))\n       CheckODRViolationViaIndicator(g);\n+    else\n+      CheckODRViolationViaPoisoning(g);\n   }\n   if (CanPoisonMemory())\n     PoisonRedZones(*g);"}, {"sha": "344a64bd83d330553bca41f066b004092b6632df", "filename": "libsanitizer/asan/asan_interceptors.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_interceptors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_interceptors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interceptors.h?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -80,12 +80,7 @@ void InitializePlatformInterceptors();\n #if ASAN_HAS_EXCEPTIONS && !SANITIZER_WINDOWS && !SANITIZER_SOLARIS && \\\n     !SANITIZER_NETBSD\n # define ASAN_INTERCEPT___CXA_THROW 1\n-# if ! defined(ASAN_HAS_CXA_RETHROW_PRIMARY_EXCEPTION) \\\n-     || ASAN_HAS_CXA_RETHROW_PRIMARY_EXCEPTION\n-#   define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 1\n-# else\n-#   define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 0\n-# endif\n+# define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 1\n # if defined(_GLIBCXX_SJLJ_EXCEPTIONS) || (SANITIZER_IOS && defined(__arm__))\n #  define ASAN_INTERCEPT__UNWIND_SJLJ_RAISEEXCEPTION 1\n # else"}, {"sha": "9480104398276ae6963375de0eb54e9ef3747654", "filename": "libsanitizer/asan/asan_interface.inc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_interface.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_interface.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interface.inc?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -164,6 +164,7 @@ INTERFACE_FUNCTION(__sanitizer_unaligned_load64)\n INTERFACE_FUNCTION(__sanitizer_unaligned_store16)\n INTERFACE_FUNCTION(__sanitizer_unaligned_store32)\n INTERFACE_FUNCTION(__sanitizer_unaligned_store64)\n+INTERFACE_FUNCTION(__asan_update_allocation_context)\n INTERFACE_WEAK_FUNCTION(__asan_default_options)\n INTERFACE_WEAK_FUNCTION(__asan_default_suppressions)\n INTERFACE_WEAK_FUNCTION(__asan_on_error)"}, {"sha": "f14cbbcb76a35856f377cdd28c1ecf3e7b267c2f", "filename": "libsanitizer/asan/asan_interface_internal.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_interface_internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_interface_internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interface_internal.h?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -251,6 +251,9 @@ extern \"C\" {\n   const char* __asan_default_suppressions();\n \n   SANITIZER_INTERFACE_ATTRIBUTE void __asan_handle_vfork(void *sp);\n+\n+  SANITIZER_INTERFACE_ATTRIBUTE int __asan_update_allocation_context(\n+      void *addr);\n }  // extern \"C\"\n \n #endif  // ASAN_INTERFACE_INTERNAL_H"}, {"sha": "4b76d4ebd3eb4ed1c1a9d897b4585a2d420b9694", "filename": "libsanitizer/asan/asan_malloc_win.cpp", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_malloc_win.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_malloc_win.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_malloc_win.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -35,11 +35,8 @@ constexpr unsigned long HEAP_REALLOC_IN_PLACE_ONLY = 0x00000010;\n constexpr unsigned long HEAP_ALLOCATE_SUPPORTED_FLAGS = (HEAP_ZERO_MEMORY);\n constexpr unsigned long HEAP_ALLOCATE_UNSUPPORTED_FLAGS =\n     (~HEAP_ALLOCATE_SUPPORTED_FLAGS);\n-constexpr unsigned long HEAP_FREE_SUPPORTED_FLAGS = (0);\n constexpr unsigned long HEAP_FREE_UNSUPPORTED_FLAGS =\n     (~HEAP_ALLOCATE_SUPPORTED_FLAGS);\n-constexpr unsigned long HEAP_REALLOC_SUPPORTED_FLAGS =\n-    (HEAP_REALLOC_IN_PLACE_ONLY | HEAP_ZERO_MEMORY);\n constexpr unsigned long HEAP_REALLOC_UNSUPPORTED_FLAGS =\n     (~HEAP_ALLOCATE_SUPPORTED_FLAGS);\n "}, {"sha": "41fb49ee46d460774a487c638b2c58531b8ac8d0", "filename": "libsanitizer/asan/asan_mapping.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fasan%2Fasan_mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_mapping.h?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -163,7 +163,7 @@ static const u64 kDefaultShort64bitShadowOffset =\n static const u64 kAArch64_ShadowOffset64 = 1ULL << 36;\n static const u64 kMIPS32_ShadowOffset32 = 0x0aaa0000;\n static const u64 kMIPS64_ShadowOffset64 = 1ULL << 37;\n-static const u64 kPPC64_ShadowOffset64 = 1ULL << 41;\n+static const u64 kPPC64_ShadowOffset64 = 1ULL << 44;\n static const u64 kSystemZ_ShadowOffset64 = 1ULL << 52;\n static const u64 kSPARC64_ShadowOffset64 = 1ULL << 43;  // 0x80000000000\n static const u64 kFreeBSD_ShadowOffset32 = 1ULL << 30;  // 0x40000000"}, {"sha": "6af93aad6512ff646ba77bca9df3bab3ed45aff3", "filename": "libsanitizer/include/sanitizer/asan_interface.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Finclude%2Fsanitizer%2Fasan_interface.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Finclude%2Fsanitizer%2Fasan_interface.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Finclude%2Fsanitizer%2Fasan_interface.h?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -315,6 +315,10 @@ void *__asan_addr_is_in_fake_stack(void *fake_stack, void *addr, void **beg,\n /// functions like <c>_exit()</c> and <c>execl()</c>.\n void __asan_handle_no_return(void);\n \n+/// Update allocation stack trace for the given allocation to the current stack\n+/// trace. Returns 1 if successfull, 0 if not.\n+int __asan_update_allocation_context(void* addr);\n+\n #ifdef __cplusplus\n }  // extern \"C\"\n #endif"}, {"sha": "174b4bf06de6ca71171d0ec4ed32e2a61f626712", "filename": "libsanitizer/include/sanitizer/netbsd_syscall_hooks.h", "status": "modified", "additions": 123, "deletions": 42, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Finclude%2Fsanitizer%2Fnetbsd_syscall_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Finclude%2Fsanitizer%2Fnetbsd_syscall_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Finclude%2Fsanitizer%2Fnetbsd_syscall_hooks.h?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -20,8 +20,8 @@\n // DO NOT EDIT! THIS FILE HAS BEEN GENERATED!\n //\n // Generated with: generate_netbsd_syscalls.awk\n-// Generated date: 2018-10-30\n-// Generated from: syscalls.master,v 1.293 2018/07/31 13:00:13 rjs Exp\n+// Generated date: 2019-11-01\n+// Generated from: syscalls.master,v 1.296 2019/09/22 22:59:39 christos Exp\n //\n //===----------------------------------------------------------------------===//\n #ifndef SANITIZER_NETBSD_SYSCALL_HOOKS_H\n@@ -1839,23 +1839,24 @@\n #define __sanitizer_syscall_post_uuidgen(res, store, count)                    \\\n   __sanitizer_syscall_post_impl_uuidgen(res, (long long)(store),               \\\n                                         (long long)(count))\n-#define __sanitizer_syscall_pre_getvfsstat(buf, bufsize, flags)                \\\n-  __sanitizer_syscall_pre_impl_getvfsstat(                                     \\\n+#define __sanitizer_syscall_pre_compat_90_getvfsstat(buf, bufsize, flags)      \\\n+  __sanitizer_syscall_pre_impl_compat_90_getvfsstat(                           \\\n       (long long)(buf), (long long)(bufsize), (long long)(flags))\n-#define __sanitizer_syscall_post_getvfsstat(res, buf, bufsize, flags)          \\\n-  __sanitizer_syscall_post_impl_getvfsstat(                                    \\\n+#define __sanitizer_syscall_post_compat_90_getvfsstat(res, buf, bufsize,       \\\n+                                                      flags)                   \\\n+  __sanitizer_syscall_post_impl_compat_90_getvfsstat(                          \\\n       res, (long long)(buf), (long long)(bufsize), (long long)(flags))\n-#define __sanitizer_syscall_pre_statvfs1(path, buf, flags)                     \\\n-  __sanitizer_syscall_pre_impl_statvfs1((long long)(path), (long long)(buf),   \\\n-                                        (long long)(flags))\n-#define __sanitizer_syscall_post_statvfs1(res, path, buf, flags)               \\\n-  __sanitizer_syscall_post_impl_statvfs1(res, (long long)(path),               \\\n-                                         (long long)(buf), (long long)(flags))\n-#define __sanitizer_syscall_pre_fstatvfs1(fd, buf, flags)                      \\\n-  __sanitizer_syscall_pre_impl_fstatvfs1((long long)(fd), (long long)(buf),    \\\n-                                         (long long)(flags))\n-#define __sanitizer_syscall_post_fstatvfs1(res, fd, buf, flags)                \\\n-  __sanitizer_syscall_post_impl_fstatvfs1(                                     \\\n+#define __sanitizer_syscall_pre_compat_90_statvfs1(path, buf, flags)           \\\n+  __sanitizer_syscall_pre_impl_compat_90_statvfs1(                             \\\n+      (long long)(path), (long long)(buf), (long long)(flags))\n+#define __sanitizer_syscall_post_compat_90_statvfs1(res, path, buf, flags)     \\\n+  __sanitizer_syscall_post_impl_compat_90_statvfs1(                            \\\n+      res, (long long)(path), (long long)(buf), (long long)(flags))\n+#define __sanitizer_syscall_pre_compat_90_fstatvfs1(fd, buf, flags)            \\\n+  __sanitizer_syscall_pre_impl_compat_90_fstatvfs1(                            \\\n+      (long long)(fd), (long long)(buf), (long long)(flags))\n+#define __sanitizer_syscall_post_compat_90_fstatvfs1(res, fd, buf, flags)      \\\n+  __sanitizer_syscall_post_impl_compat_90_fstatvfs1(                           \\\n       res, (long long)(fd), (long long)(buf), (long long)(flags))\n #define __sanitizer_syscall_pre_compat_30_fhstatvfs1(fhp, buf, flags)          \\\n   __sanitizer_syscall_pre_impl_compat_30_fhstatvfs1(                           \\\n@@ -2143,12 +2144,13 @@\n #define __sanitizer_syscall_post___fhopen40(res, fhp, fh_size, flags)          \\\n   __sanitizer_syscall_post_impl___fhopen40(                                    \\\n       res, (long long)(fhp), (long long)(fh_size), (long long)(flags))\n-#define __sanitizer_syscall_pre___fhstatvfs140(fhp, fh_size, buf, flags)       \\\n-  __sanitizer_syscall_pre_impl___fhstatvfs140(                                 \\\n+#define __sanitizer_syscall_pre_compat_90_fhstatvfs1(fhp, fh_size, buf, flags) \\\n+  __sanitizer_syscall_pre_impl_compat_90_fhstatvfs1(                           \\\n       (long long)(fhp), (long long)(fh_size), (long long)(buf),                \\\n       (long long)(flags))\n-#define __sanitizer_syscall_post___fhstatvfs140(res, fhp, fh_size, buf, flags) \\\n-  __sanitizer_syscall_post_impl___fhstatvfs140(                                \\\n+#define __sanitizer_syscall_post_compat_90_fhstatvfs1(res, fhp, fh_size, buf,  \\\n+                                                      flags)                   \\\n+  __sanitizer_syscall_post_impl_compat_90_fhstatvfs1(                          \\\n       res, (long long)(fhp), (long long)(fh_size), (long long)(buf),           \\\n       (long long)(flags))\n #define __sanitizer_syscall_pre_compat_50___fhstat40(fhp, fh_size, sb)         \\\n@@ -2703,6 +2705,53 @@\n                                                       clock_id)                \\\n   __sanitizer_syscall_post_impl_clock_getcpuclockid2(                          \\\n       res, (long long)(idtype), (long long)(id), (long long)(clock_id))\n+#define __sanitizer_syscall_pre___getvfsstat90(buf, bufsize, flags)            \\\n+  __sanitizer_syscall_pre_impl___getvfsstat90(                                 \\\n+      (long long)(buf), (long long)(bufsize), (long long)(flags))\n+#define __sanitizer_syscall_post___getvfsstat90(res, buf, bufsize, flags)      \\\n+  __sanitizer_syscall_post_impl___getvfsstat90(                                \\\n+      res, (long long)(buf), (long long)(bufsize), (long long)(flags))\n+#define __sanitizer_syscall_pre___statvfs190(path, buf, flags)                 \\\n+  __sanitizer_syscall_pre_impl___statvfs190(                                   \\\n+      (long long)(path), (long long)(buf), (long long)(flags))\n+#define __sanitizer_syscall_post___statvfs190(res, path, buf, flags)           \\\n+  __sanitizer_syscall_post_impl___statvfs190(                                  \\\n+      res, (long long)(path), (long long)(buf), (long long)(flags))\n+#define __sanitizer_syscall_pre___fstatvfs190(fd, buf, flags)                  \\\n+  __sanitizer_syscall_pre_impl___fstatvfs190(                                  \\\n+      (long long)(fd), (long long)(buf), (long long)(flags))\n+#define __sanitizer_syscall_post___fstatvfs190(res, fd, buf, flags)            \\\n+  __sanitizer_syscall_post_impl___fstatvfs190(                                 \\\n+      res, (long long)(fd), (long long)(buf), (long long)(flags))\n+#define __sanitizer_syscall_pre___fhstatvfs190(fhp, fh_size, buf, flags)       \\\n+  __sanitizer_syscall_pre_impl___fhstatvfs190(                                 \\\n+      (long long)(fhp), (long long)(fh_size), (long long)(buf),                \\\n+      (long long)(flags))\n+#define __sanitizer_syscall_post___fhstatvfs190(res, fhp, fh_size, buf, flags) \\\n+  __sanitizer_syscall_post_impl___fhstatvfs190(                                \\\n+      res, (long long)(fhp), (long long)(fh_size), (long long)(buf),           \\\n+      (long long)(flags))\n+\n+/* Compat with older releases */\n+#define __sanitizer_syscall_pre_getvfsstat                                     \\\n+  __sanitizer_syscall_pre_compat_90_getvfsstat\n+#define __sanitizer_syscall_post_getvfsstat                                    \\\n+  __sanitizer_syscall_post_compat_90_getvfsstat\n+\n+#define __sanitizer_syscall_pre_statvfs1                                       \\\n+  __sanitizer_syscall_pre_compat_90_statvfs1\n+#define __sanitizer_syscall_post_statvfs1                                      \\\n+  __sanitizer_syscall_post_compat_90_statvfs1\n+\n+#define __sanitizer_syscall_pre_fstatvfs1                                      \\\n+  __sanitizer_syscall_pre_compat_90_fstatvfs1\n+#define __sanitizer_syscall_post_fstatvfs1                                     \\\n+  __sanitizer_syscall_post_compat_90_fstatvfs1\n+\n+#define __sanitizer_syscall_pre___fhstatvfs140                                 \\\n+  __sanitizer_syscall_pre_compat_90_fhstatvfs1\n+#define __sanitizer_syscall_post___fhstatvfs140                                \\\n+  __sanitizer_syscall_post_compat_90_fhstatvfs1\n \n #ifdef __cplusplus\n extern \"C\" {\n@@ -4066,19 +4115,27 @@ void __sanitizer_syscall_post_impl_fsync_range(long long res, long long fd,\n void __sanitizer_syscall_pre_impl_uuidgen(long long store, long long count);\n void __sanitizer_syscall_post_impl_uuidgen(long long res, long long store,\n                                            long long count);\n-void __sanitizer_syscall_pre_impl_getvfsstat(long long buf, long long bufsize,\n-                                             long long flags);\n-void __sanitizer_syscall_post_impl_getvfsstat(long long res, long long buf,\n-                                              long long bufsize,\n-                                              long long flags);\n-void __sanitizer_syscall_pre_impl_statvfs1(long long path, long long buf,\n-                                           long long flags);\n-void __sanitizer_syscall_post_impl_statvfs1(long long res, long long path,\n-                                            long long buf, long long flags);\n-void __sanitizer_syscall_pre_impl_fstatvfs1(long long fd, long long buf,\n-                                            long long flags);\n-void __sanitizer_syscall_post_impl_fstatvfs1(long long res, long long fd,\n-                                             long long buf, long long flags);\n+void __sanitizer_syscall_pre_impl_compat_90_getvfsstat(long long buf,\n+                                                       long long bufsize,\n+                                                       long long flags);\n+void __sanitizer_syscall_post_impl_compat_90_getvfsstat(long long res,\n+                                                        long long buf,\n+                                                        long long bufsize,\n+                                                        long long flags);\n+void __sanitizer_syscall_pre_impl_compat_90_statvfs1(long long path,\n+                                                     long long buf,\n+                                                     long long flags);\n+void __sanitizer_syscall_post_impl_compat_90_statvfs1(long long res,\n+                                                      long long path,\n+                                                      long long buf,\n+                                                      long long flags);\n+void __sanitizer_syscall_pre_impl_compat_90_fstatvfs1(long long fd,\n+                                                      long long buf,\n+                                                      long long flags);\n+void __sanitizer_syscall_post_impl_compat_90_fstatvfs1(long long res,\n+                                                       long long fd,\n+                                                       long long buf,\n+                                                       long long flags);\n void __sanitizer_syscall_pre_impl_compat_30_fhstatvfs1(long long fhp,\n                                                        long long buf,\n                                                        long long flags);\n@@ -4304,14 +4361,15 @@ void __sanitizer_syscall_pre_impl___fhopen40(long long fhp, long long fh_size,\n void __sanitizer_syscall_post_impl___fhopen40(long long res, long long fhp,\n                                               long long fh_size,\n                                               long long flags);\n-void __sanitizer_syscall_pre_impl___fhstatvfs140(long long fhp,\n-                                                 long long fh_size,\n-                                                 long long buf,\n-                                                 long long flags);\n-void __sanitizer_syscall_post_impl___fhstatvfs140(long long res, long long fhp,\n-                                                  long long fh_size,\n-                                                  long long buf,\n-                                                  long long flags);\n+void __sanitizer_syscall_pre_impl_compat_90_fhstatvfs1(long long fhp,\n+                                                       long long fh_size,\n+                                                       long long buf,\n+                                                       long long flags);\n+void __sanitizer_syscall_post_impl_compat_90_fhstatvfs1(long long res,\n+                                                        long long fhp,\n+                                                        long long fh_size,\n+                                                        long long buf,\n+                                                        long long flags);\n void __sanitizer_syscall_pre_impl_compat_50___fhstat40(long long fhp,\n                                                        long long fh_size,\n                                                        long long sb);\n@@ -4721,6 +4779,29 @@ void __sanitizer_syscall_post_impl_clock_getcpuclockid2(long long res,\n                                                         long long idtype,\n                                                         long long id,\n                                                         long long clock_id);\n+void __sanitizer_syscall_pre_impl___getvfsstat90(long long buf,\n+                                                 long long bufsize,\n+                                                 long long flags);\n+void __sanitizer_syscall_post_impl___getvfsstat90(long long res, long long buf,\n+                                                  long long bufsize,\n+                                                  long long flags);\n+void __sanitizer_syscall_pre_impl___statvfs190(long long path, long long buf,\n+                                               long long flags);\n+void __sanitizer_syscall_post_impl___statvfs190(long long res, long long path,\n+                                                long long buf, long long flags);\n+void __sanitizer_syscall_pre_impl___fstatvfs190(long long fd, long long buf,\n+                                                long long flags);\n+void __sanitizer_syscall_post_impl___fstatvfs190(long long res, long long fd,\n+                                                 long long buf,\n+                                                 long long flags);\n+void __sanitizer_syscall_pre_impl___fhstatvfs190(long long fhp,\n+                                                 long long fh_size,\n+                                                 long long buf,\n+                                                 long long flags);\n+void __sanitizer_syscall_post_impl___fhstatvfs190(long long res, long long fhp,\n+                                                  long long fh_size,\n+                                                  long long buf,\n+                                                  long long flags);\n \n #ifdef __cplusplus\n } // extern \"C\""}, {"sha": "d86c3921395cb2bcb8d263c4171b4fbba10b2ffd", "filename": "libsanitizer/lsan/lsan_allocator.cpp", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Flsan%2Flsan_allocator.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Flsan%2Flsan_allocator.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flsan%2Flsan_allocator.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -36,10 +36,17 @@ static const uptr kMaxAllowedMallocSize = 8UL << 30;\n \n static Allocator allocator;\n \n+static uptr max_malloc_size;\n+\n void InitializeAllocator() {\n   SetAllocatorMayReturnNull(common_flags()->allocator_may_return_null);\n   allocator.InitLinkerInitialized(\n       common_flags()->allocator_release_to_os_interval_ms);\n+  if (common_flags()->max_allocation_size_mb)\n+    max_malloc_size = Min(common_flags()->max_allocation_size_mb << 20,\n+                          kMaxAllowedMallocSize);\n+  else\n+    max_malloc_size = kMaxAllowedMallocSize;\n }\n \n void AllocatorThreadFinish() {\n@@ -72,14 +79,14 @@ static void *ReportAllocationSizeTooBig(uptr size, const StackTrace &stack) {\n     Report(\"WARNING: LeakSanitizer failed to allocate 0x%zx bytes\\n\", size);\n     return nullptr;\n   }\n-  ReportAllocationSizeTooBig(size, kMaxAllowedMallocSize, &stack);\n+  ReportAllocationSizeTooBig(size, max_malloc_size, &stack);\n }\n \n void *Allocate(const StackTrace &stack, uptr size, uptr alignment,\n                bool cleared) {\n   if (size == 0)\n     size = 1;\n-  if (size > kMaxAllowedMallocSize)\n+  if (size > max_malloc_size)\n     return ReportAllocationSizeTooBig(size, stack);\n   void *p = allocator.Allocate(GetAllocatorCache(), size, alignment);\n   if (UNLIKELY(!p)) {\n@@ -117,7 +124,7 @@ void Deallocate(void *p) {\n void *Reallocate(const StackTrace &stack, void *p, uptr new_size,\n                  uptr alignment) {\n   RegisterDeallocation(p);\n-  if (new_size > kMaxAllowedMallocSize) {\n+  if (new_size > max_malloc_size) {\n     allocator.Deallocate(GetAllocatorCache(), p);\n     return ReportAllocationSizeTooBig(new_size, stack);\n   }"}, {"sha": "dfa7bf3d196b5960c8e49da24dff47ca53bec014", "filename": "libsanitizer/merge.sh", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fmerge.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fmerge.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fmerge.sh?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -8,13 +8,12 @@ VCS=${1:-svn}\n \n get_upstream() {\n   rm -rf upstream\n-  #cp -rf orig upstream\n-  svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk upstream\n+  git clone https://github.com/llvm/llvm-project.git upstream\n }\n \n get_current_rev() {\n   cd upstream\n-  svn info | grep Revision | grep -o '[0-9]*'\n+  git rev-parse HEAD\n }\n \n list_files() {\n@@ -85,6 +84,6 @@ rm -rf upstream\n cat << EOF > MERGE\n $CUR_REV\n \n-The first line of this file holds the svn revision number of the\n+The first line of this file holds the git revision number of the\n last merge done from the master library sources.\n EOF"}, {"sha": "065258a5a6e1343ae2d433a024cb3eebb94def94", "filename": "libsanitizer/sanitizer_common/sanitizer_flags.inc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_flags.inc?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -132,6 +132,9 @@ COMMON_FLAG(uptr, soft_rss_limit_mb, 0,\n             \" until the RSS goes below the soft limit.\"\n             \" This limit does not affect memory allocations other than\"\n             \" malloc/new.\")\n+COMMON_FLAG(uptr, max_allocation_size_mb, 0,\n+            \"If non-zero, malloc/new calls larger than this size will return \"\n+            \"nullptr (or crash if allocator_may_return_null=false).\")\n COMMON_FLAG(bool, heap_profile, false, \"Experimental heap profiler, asan-only\")\n COMMON_FLAG(s32, allocator_release_to_os_interval_ms,\n             ((bool)SANITIZER_FUCHSIA || (bool)SANITIZER_WINDOWS) ? -1 : 5000,"}, {"sha": "3807a79b1cdb9f1922af9386380132ed9167ca40", "filename": "libsanitizer/sanitizer_common/sanitizer_linux.cpp", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -407,7 +407,10 @@ uptr internal_unlink(const char *path) {\n }\n \n uptr internal_rename(const char *oldpath, const char *newpath) {\n-#if SANITIZER_USES_CANONICAL_LINUX_SYSCALLS || SANITIZER_OPENBSD\n+#if defined(__riscv)\n+  return internal_syscall(SYSCALL(renameat2), AT_FDCWD, (uptr)oldpath, AT_FDCWD,\n+                          (uptr)newpath, 0);\n+#elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS || SANITIZER_OPENBSD\n   return internal_syscall(SYSCALL(renameat), AT_FDCWD, (uptr)oldpath, AT_FDCWD,\n                           (uptr)newpath);\n #else\n@@ -1972,6 +1975,11 @@ static void GetPcSpBp(void *context, uptr *pc, uptr *sp, uptr *bp) {\n # endif\n   *bp = ucontext->uc_mcontext.gregs[11];\n   *sp = ucontext->uc_mcontext.gregs[15];\n+#elif defined(__riscv)\n+  ucontext_t *ucontext = (ucontext_t*)context;\n+  *pc = ucontext->uc_mcontext.__gregs[REG_PC];\n+  *bp = ucontext->uc_mcontext.__gregs[REG_S0];\n+  *sp = ucontext->uc_mcontext.__gregs[REG_SP];\n #else\n # error \"Unsupported arch\"\n #endif"}, {"sha": "cd503718205a18807445b65c126296005d3ecd77", "filename": "libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -698,13 +698,9 @@ u32 GetNumberOfCPUs() {\n #elif SANITIZER_SOLARIS\n   return sysconf(_SC_NPROCESSORS_ONLN);\n #else\n-#if defined(CPU_COUNT)\n   cpu_set_t CPUs;\n   CHECK_EQ(sched_getaffinity(0, sizeof(cpu_set_t), &CPUs), 0);\n   return CPU_COUNT(&CPUs);\n-#else\n-  return 1;\n-#endif\n #endif\n }\n "}, {"sha": "ea4bd02aa92e4580bcf4f1c49a540722d70af9b7", "filename": "libsanitizer/sanitizer_common/sanitizer_mac.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -37,7 +37,7 @@\n extern char **environ;\n #endif\n \n-#if defined(__has_include) && __has_include(<os/trace.h>) && defined(__BLOCKS__)\n+#if defined(__has_include) && __has_include(<os/trace.h>)\n #define SANITIZER_OS_TRACE 1\n #include <os/trace.h>\n #else"}, {"sha": "c68bfa25875585818721029b099bd4da4cddcb78", "filename": "libsanitizer/sanitizer_common/sanitizer_platform.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -255,11 +255,11 @@\n #define SANITIZER_SIGN_EXTENDED_ADDRESSES 0\n #endif\n \n-// The AArch64 linux port uses the canonical syscall set as mandated by\n-// the upstream linux community for all new ports. Other ports may still\n-// use legacy syscalls.\n+// The AArch64 and RISC-V linux ports use the canonical syscall set as\n+// mandated by the upstream linux community for all new ports. Other ports\n+// may still use legacy syscalls.\n #ifndef SANITIZER_USES_CANONICAL_LINUX_SYSCALLS\n-# if defined(__aarch64__) && SANITIZER_LINUX\n+# if (defined(__aarch64__) || defined(__riscv)) && SANITIZER_LINUX\n # define SANITIZER_USES_CANONICAL_LINUX_SYSCALLS 1\n # else\n # define SANITIZER_USES_CANONICAL_LINUX_SYSCALLS 0"}, {"sha": "c51327e1269e081cb0e231b75cbce71b62601e88", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_linux.cpp", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -26,12 +26,9 @@\n \n // With old kernels (and even new kernels on powerpc) asm/stat.h uses types that\n // are not defined anywhere in userspace headers. Fake them. This seems to work\n-// fine with newer headers, too.  Beware that with <sys/stat.h>, struct stat\n-// takes the form of struct stat64 on 32-bit platforms if _FILE_OFFSET_BITS=64.\n-// Also, for some platforms (e.g. mips) there are additional members in the\n-// <sys/stat.h> struct stat:s.\n+// fine with newer headers, too.\n #include <linux/posix_types.h>\n-#if defined(__x86_64__)\n+#if defined(__x86_64__) ||  defined(__mips__)\n #include <sys/stat.h>\n #else\n #define ino_t __kernel_ino_t\n@@ -68,7 +65,7 @@ namespace __sanitizer {\n \n #if !defined(__powerpc64__) && !defined(__x86_64__) && !defined(__aarch64__)\\\n                             && !defined(__mips__) && !defined(__s390__)\\\n-                            && !defined(__sparc__)\n+                            && !defined(__sparc__) && !defined(__riscv)\n COMPILER_CHECK(struct___old_kernel_stat_sz == sizeof(struct __old_kernel_stat));\n #endif\n "}, {"sha": "419d830c69efe70039b59f50b212fe21bb792371", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_netbsd.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_netbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_netbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_netbsd.h?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -354,7 +354,13 @@ struct __sanitizer_addrinfo {\n   int ai_family;\n   int ai_socktype;\n   int ai_protocol;\n+#if defined(__sparc__) && defined(_LP64)\n+  int __ai_pad0;\n+#endif\n   unsigned ai_addrlen;\n+#if defined(__alpha__) || (defined(__i386__) && defined(_LP64))\n+  int __ai_pad0;\n+#endif\n   char *ai_canonname;\n   void *ai_addr;\n   struct __sanitizer_addrinfo *ai_next;"}, {"sha": "b4f8f67b664c7b67ea348f04b85eb99230cac73a", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -230,7 +230,7 @@ namespace __sanitizer {\n   // has been removed from glibc 2.28.\n #if defined(__aarch64__) || defined(__s390x__) || defined (__mips64) \\\n   || defined(__powerpc64__) || defined(__arch64__) || defined(__sparcv9) \\\n-  || defined(__x86_64__)\n+  || defined(__x86_64__) || (defined(__riscv) && __riscv_xlen == 64)\n #define SIZEOF_STRUCT_USTAT 32\n #elif defined(__arm__) || defined(__i386__) || defined(__mips__) \\\n   || defined(__powerpc__) || defined(__s390__) || defined(__sparc__)"}, {"sha": "7789bc5887a470456e501f36755e31702b220070", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -82,7 +82,7 @@ const unsigned struct_kernel_stat64_sz = 104;\n #elif defined(__mips__)\n const unsigned struct_kernel_stat_sz = SANITIZER_ANDROID\n                                            ? FIRST_32_SECOND_64(104, 128)\n-                                           : FIRST_32_SECOND_64(144, 216);\n+                                           : FIRST_32_SECOND_64(160, 216);\n const unsigned struct_kernel_stat64_sz = 104;\n #elif defined(__s390__) && !defined(__s390x__)\n const unsigned struct_kernel_stat_sz = 64;\n@@ -98,6 +98,9 @@ const unsigned struct_kernel_stat64_sz = 144;\n const unsigned struct___old_kernel_stat_sz = 0;\n const unsigned struct_kernel_stat_sz = 64;\n const unsigned struct_kernel_stat64_sz = 104;\n+#elif defined(__riscv) && __riscv_xlen == 64\n+const unsigned struct_kernel_stat_sz = 128;\n+const unsigned struct_kernel_stat64_sz = 104;\n #endif\n struct __sanitizer_perf_event_attr {\n   unsigned type;"}, {"sha": "ef14fb704eed394acf0be36505eaae5f952fa6d2", "filename": "libsanitizer/sanitizer_common/sanitizer_stacktrace.cpp", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -60,8 +60,8 @@ static inline uhwptr *GetCanonicFrame(uptr bp,\n   // Nope, this does not look right either. This means the frame after next does\n   // not have a valid frame pointer, but we can still extract the caller PC.\n   // Unfortunately, there is no way to decide between GCC and LLVM frame\n-  // layouts. Assume GCC.\n-  return bp_prev - 1;\n+  // layouts. Assume LLVM.\n+  return bp_prev;\n #else\n   return (uhwptr*)bp;\n #endif\n@@ -84,21 +84,14 @@ void BufferedStackTrace::UnwindFast(uptr pc, uptr bp, uptr stack_top,\n          IsAligned((uptr)frame, sizeof(*frame)) &&\n          size < max_depth) {\n #ifdef __powerpc__\n-    // PowerPC ABIs specify that the return address is saved on the\n-    // *caller's* stack frame.  Thus we must dereference the back chain\n-    // to find the caller frame before extracting it.\n+    // PowerPC ABIs specify that the return address is saved at offset\n+    // 16 of the *caller's* stack frame.  Thus we must dereference the\n+    // back chain to find the caller frame before extracting it.\n     uhwptr *caller_frame = (uhwptr*)frame[0];\n     if (!IsValidFrame((uptr)caller_frame, stack_top, bottom) ||\n         !IsAligned((uptr)caller_frame, sizeof(uhwptr)))\n       break;\n-    // For most ABIs the offset where the return address is saved is two\n-    // register sizes.  The exception is the SVR4 ABI, which uses an\n-    // offset of only one register size.\n-#ifdef _CALL_SYSV\n-    uhwptr pc1 = caller_frame[1];\n-#else\n     uhwptr pc1 = caller_frame[2];\n-#endif\n #elif defined(__s390__)\n     uhwptr pc1 = frame[14];\n #else"}, {"sha": "69e59871874133a33420165c9062be2b78217c0a", "filename": "libsanitizer/sanitizer_common/sanitizer_syscalls_netbsd.inc", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_syscalls_netbsd.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fsanitizer_common%2Fsanitizer_syscalls_netbsd.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_syscalls_netbsd.inc?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -42,8 +42,8 @@\n // DO NOT EDIT! THIS FILE HAS BEEN GENERATED!\n //\n // Generated with: generate_netbsd_syscalls.awk\n-// Generated date: 2018-10-30\n-// Generated from: syscalls.master,v 1.293 2018/07/31 13:00:13 rjs Exp\n+// Generated date: 2019-11-01\n+// Generated from: syscalls.master,v 1.296 2019/09/22 22:59:39 christos Exp\n //\n //===----------------------------------------------------------------------===//\n \n@@ -2433,30 +2433,31 @@ PRE_SYSCALL(uuidgen)(void *store_, long long count_) { /* Nothing to do */ }\n POST_SYSCALL(uuidgen)(long long res, void *store_, long long count_) {\n   /* Nothing to do */\n }\n-PRE_SYSCALL(getvfsstat)(void *buf_, long long bufsize_, long long flags_) {\n+PRE_SYSCALL(compat_90_getvfsstat)\n+(void *buf_, long long bufsize_, long long flags_) {\n   /* Nothing to do */\n }\n-POST_SYSCALL(getvfsstat)\n+POST_SYSCALL(compat_90_getvfsstat)\n (long long res, void *buf_, long long bufsize_, long long flags_) {\n   /* Nothing to do */\n }\n-PRE_SYSCALL(statvfs1)(void *path_, void *buf_, long long flags_) {\n+PRE_SYSCALL(compat_90_statvfs1)(void *path_, void *buf_, long long flags_) {\n   const char *path = (const char *)path_;\n   if (path) {\n     PRE_READ(path, __sanitizer::internal_strlen(path) + 1);\n   }\n }\n-POST_SYSCALL(statvfs1)\n+POST_SYSCALL(compat_90_statvfs1)\n (long long res, void *path_, void *buf_, long long flags_) {\n   const char *path = (const char *)path_;\n   if (path) {\n     POST_READ(path, __sanitizer::internal_strlen(path) + 1);\n   }\n }\n-PRE_SYSCALL(fstatvfs1)(long long fd_, void *buf_, long long flags_) {\n+PRE_SYSCALL(compat_90_fstatvfs1)(long long fd_, void *buf_, long long flags_) {\n   /* Nothing to do */\n }\n-POST_SYSCALL(fstatvfs1)\n+POST_SYSCALL(compat_90_fstatvfs1)\n (long long res, long long fd_, void *buf_, long long flags_) {\n   /* Nothing to do */\n }\n@@ -2853,13 +2854,13 @@ PRE_SYSCALL(__fhopen40)(void *fhp_, long long fh_size_, long long flags_) {\n }\n POST_SYSCALL(__fhopen40)\n (long long res, void *fhp_, long long fh_size_, long long flags_) {}\n-PRE_SYSCALL(__fhstatvfs140)\n+PRE_SYSCALL(compat_90_fhstatvfs1)\n (void *fhp_, long long fh_size_, void *buf_, long long flags_) {\n   if (fhp_) {\n     PRE_READ(fhp_, fh_size_);\n   }\n }\n-POST_SYSCALL(__fhstatvfs140)\n+POST_SYSCALL(compat_90_fhstatvfs1)\n (long long res, void *fhp_, long long fh_size_, void *buf_, long long flags_) {}\n PRE_SYSCALL(compat_50___fhstat40)(void *fhp_, long long fh_size_, void *sb_) {\n   if (fhp_) {\n@@ -3768,6 +3769,41 @@ POST_SYSCALL(clock_getcpuclockid2)\n (long long res, long long idtype_, long long id_, void *clock_id_) {\n   /* Nothing to do */\n }\n+PRE_SYSCALL(__getvfsstat90)(void *buf_, long long bufsize_, long long flags_) {\n+  /* Nothing to do */\n+}\n+POST_SYSCALL(__getvfsstat90)\n+(long long res, void *buf_, long long bufsize_, long long flags_) {\n+  /* Nothing to do */\n+}\n+PRE_SYSCALL(__statvfs190)(void *path_, void *buf_, long long flags_) {\n+  const char *path = (const char *)path_;\n+  if (path) {\n+    PRE_READ(path, __sanitizer::internal_strlen(path) + 1);\n+  }\n+}\n+POST_SYSCALL(__statvfs190)\n+(long long res, void *path_, void *buf_, long long flags_) {\n+  const char *path = (const char *)path_;\n+  if (path) {\n+    POST_READ(path, __sanitizer::internal_strlen(path) + 1);\n+  }\n+}\n+PRE_SYSCALL(__fstatvfs190)(long long fd_, void *buf_, long long flags_) {\n+  /* Nothing to do */\n+}\n+POST_SYSCALL(__fstatvfs190)\n+(long long res, long long fd_, void *buf_, long long flags_) {\n+  /* Nothing to do */\n+}\n+PRE_SYSCALL(__fhstatvfs190)\n+(void *fhp_, long long fh_size_, void *buf_, long long flags_) {\n+  if (fhp_) {\n+    PRE_READ(fhp_, fh_size_);\n+  }\n+}\n+POST_SYSCALL(__fhstatvfs190)\n+(long long res, void *fhp_, long long fh_size_, void *buf_, long long flags_) {}\n #undef SYS_MAXSYSARGS\n } // extern \"C\"\n "}, {"sha": "743e67bf2f7d96f910d46efd888a8b9130d264b8", "filename": "libsanitizer/tsan/tsan_mman.cpp", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Ftsan%2Ftsan_mman.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Ftsan%2Ftsan_mman.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_mman.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -113,9 +113,16 @@ ScopedGlobalProcessor::~ScopedGlobalProcessor() {\n   gp->mtx.Unlock();\n }\n \n+static constexpr uptr kMaxAllowedMallocSize = 1ull << 40;\n+static uptr max_user_defined_malloc_size;\n+\n void InitializeAllocator() {\n   SetAllocatorMayReturnNull(common_flags()->allocator_may_return_null);\n   allocator()->Init(common_flags()->allocator_release_to_os_interval_ms);\n+  max_user_defined_malloc_size = common_flags()->max_allocation_size_mb\n+                                     ? common_flags()->max_allocation_size_mb\n+                                           << 20\n+                                     : kMaxAllowedMallocSize;\n }\n \n void InitializeAllocatorLate() {\n@@ -150,15 +157,17 @@ static void SignalUnsafeCall(ThreadState *thr, uptr pc) {\n   OutputReport(thr, rep);\n }\n \n-static constexpr uptr kMaxAllowedMallocSize = 1ull << 40;\n \n void *user_alloc_internal(ThreadState *thr, uptr pc, uptr sz, uptr align,\n                           bool signal) {\n-  if (sz >= kMaxAllowedMallocSize || align >= kMaxAllowedMallocSize) {\n+  if (sz >= kMaxAllowedMallocSize || align >= kMaxAllowedMallocSize ||\n+      sz > max_user_defined_malloc_size) {\n     if (AllocatorMayReturnNull())\n       return nullptr;\n+    uptr malloc_limit =\n+        Min(kMaxAllowedMallocSize, max_user_defined_malloc_size);\n     GET_STACK_TRACE_FATAL(thr, pc);\n-    ReportAllocationSizeTooBig(sz, kMaxAllowedMallocSize, &stack);\n+    ReportAllocationSizeTooBig(sz, malloc_limit, &stack);\n   }\n   void *p = allocator()->Allocate(&thr->proc()->alloc_cache, sz, align);\n   if (UNLIKELY(!p)) {"}, {"sha": "8285e21aa1ec7a797dfcf4840ee5a7851106b497", "filename": "libsanitizer/tsan/tsan_rtl_ppc64.S", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -1,6 +1,5 @@\n #include \"tsan_ppc_regs.h\"\n \n-        .machine altivec\n         .section .text\n         .hidden __tsan_setjmp\n         .globl _setjmp"}, {"sha": "721c2273f133a3b4f7158b7e7297d7e9078eaffa", "filename": "libsanitizer/ubsan/ubsan_flags.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fubsan%2Fubsan_flags.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fubsan%2Fubsan_flags.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_flags.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -54,7 +54,6 @@ void InitializeFlags() {\n   {\n     CommonFlags cf;\n     cf.CopyFrom(*common_flags());\n-    cf.print_summary = false;\n     cf.external_symbolizer_path = GetFlag(\"UBSAN_SYMBOLIZER_PATH\");\n     OverrideCommonFlags(cf);\n   }"}, {"sha": "3f9da75a12a8d34386977ba9e959eda2af27f298", "filename": "libsanitizer/ubsan/ubsan_handlers.cpp", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fubsan%2Fubsan_handlers.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fubsan%2Fubsan_handlers.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.cpp?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -819,21 +819,6 @@ void __ubsan_handle_cfi_bad_type(CFICheckFailData *Data, ValueHandle Vtable,\n \n }  // namespace __ubsan\n \n-void __ubsan::__ubsan_handle_cfi_bad_icall(CFIBadIcallData *CallData,\n-                                           ValueHandle Function) {\n-  GET_REPORT_OPTIONS(false);\n-  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n-  handleCFIBadIcall(&Data, Function, Opts);\n-}\n-\n-void __ubsan::__ubsan_handle_cfi_bad_icall_abort(CFIBadIcallData *CallData,\n-                                                 ValueHandle Function) {\n-  GET_REPORT_OPTIONS(true);\n-  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n-  handleCFIBadIcall(&Data, Function, Opts);\n-  Die();\n-}\n-\n void __ubsan::__ubsan_handle_cfi_check_fail(CFICheckFailData *Data,\n                                             ValueHandle Value,\n                                             uptr ValidVtable) {"}, {"sha": "22ca96422381c104798588f64c5ae370f3ef2f07", "filename": "libsanitizer/ubsan/ubsan_handlers.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fubsan%2Fubsan_handlers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fubsan%2Fubsan_handlers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.h?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -207,20 +207,12 @@ enum CFITypeCheckKind : unsigned char {\n   CFITCK_VMFCall,\n };\n \n-struct CFIBadIcallData {\n-  SourceLocation Loc;\n-  const TypeDescriptor &Type;\n-};\n-\n struct CFICheckFailData {\n   CFITypeCheckKind CheckKind;\n   SourceLocation Loc;\n   const TypeDescriptor &Type;\n };\n \n-/// \\brief Handle control flow integrity failure for indirect function calls.\n-RECOVERABLE(cfi_bad_icall, CFIBadIcallData *Data, ValueHandle Function)\n-\n /// \\brief Handle control flow integrity failures.\n RECOVERABLE(cfi_check_fail, CFICheckFailData *Data, ValueHandle Function,\n             uptr VtableIsValid)"}, {"sha": "71d7fb18c9b3a5e94039e3843113050f31fa1c9f", "filename": "libsanitizer/ubsan/ubsan_platform.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fubsan%2Fubsan_platform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4/libsanitizer%2Fubsan%2Fubsan_platform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_platform.h?ref=cb7dc4da4ccc475675b5aec6a08d3e8c0a1761e4", "patch": "@@ -12,7 +12,6 @@\n #ifndef UBSAN_PLATFORM_H\n #define UBSAN_PLATFORM_H\n \n-#ifndef CAN_SANITIZE_UB\n // Other platforms should be easy to add, and probably work as-is.\n #if defined(__linux__) || defined(__FreeBSD__) || defined(__APPLE__) ||        \\\n     defined(__NetBSD__) || defined(__OpenBSD__) || \\\n@@ -22,6 +21,5 @@\n #else\n # define CAN_SANITIZE_UB 0\n #endif\n-#endif //CAN_SANITIZE_UB\n \n #endif"}]}