{"sha": "bee2f80b901d73f50275f2b44932067ffcf616ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVlMmY4MGI5MDFkNzNmNTAyNzVmMmI0NDkzMjA2N2ZmY2Y2MTZjYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-07-16T19:58:01Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-07-27T15:38:59Z"}, "message": "c++: Reject ordered comparison of null pointers [PR99701]\n\nWhen implementing DR 1512 in r11-467 I neglected to reject ordered\ncomparison of two null pointers, like nullptr < nullptr.  This patch\nfixes that omission.\n\n\tDR 1512\n\tPR c++/99701\n\ngcc/cp/ChangeLog:\n\n\t* cp-gimplify.c (cp_fold): Remove {LE,LT,GE,GT_EXPR} from\n\ta switch.\n\t* typeck.c (cp_build_binary_op): Reject ordered comparison\n\tof two null pointers.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/nullptr11.C: Remove invalid tests.\n\t* g++.dg/cpp0x/nullptr46.C: Add dg-error.\n\t* g++.dg/cpp2a/spaceship-err7.C: New test.\n\t* g++.dg/expr/ptr-comp4.C: New test.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/20_util/tuple/comparison_operators/overloaded.cc:\n\tMove a line...\n\t* testsuite/20_util/tuple/comparison_operators/overloaded2.cc:\n\t...here.  New test.", "tree": {"sha": "36072f98168cd54913f966c53cb37b88320873e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36072f98168cd54913f966c53cb37b88320873e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bee2f80b901d73f50275f2b44932067ffcf616ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee2f80b901d73f50275f2b44932067ffcf616ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee2f80b901d73f50275f2b44932067ffcf616ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee2f80b901d73f50275f2b44932067ffcf616ca/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ffba77d01a2445c73ec487ba350c7fbf75a4500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffba77d01a2445c73ec487ba350c7fbf75a4500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffba77d01a2445c73ec487ba350c7fbf75a4500"}], "stats": {"total": 126, "additions": 92, "deletions": 34}, "files": [{"sha": "0520fa45b9113343b68c4dfe6cef0043f060b056", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=bee2f80b901d73f50275f2b44932067ffcf616ca", "patch": "@@ -2433,13 +2433,9 @@ cp_fold (tree x)\n \t  switch (code)\n \t    {\n \t    case EQ_EXPR:\n-\t    case LE_EXPR:\n-\t    case GE_EXPR:\n \t      x = constant_boolean_node (true, TREE_TYPE (x));\n \t      break;\n \t    case NE_EXPR:\n-\t    case LT_EXPR:\n-\t    case GT_EXPR:\n \t      x = constant_boolean_node (false, TREE_TYPE (x));\n \t      break;\n \t    default:"}, {"sha": "738e69a0440f2a13136fe86508a6f9145d855ce2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=bee2f80b901d73f50275f2b44932067ffcf616ca", "patch": "@@ -5483,25 +5483,16 @@ cp_build_binary_op (const op_location_t &location,\n \tresult_type = composite_pointer_type (location,\n \t\t\t\t\t      type0, type1, op0, op1,\n \t\t\t\t\t      CPO_COMPARISON, complain);\n-      else if (code0 == POINTER_TYPE && null_ptr_cst_p (orig_op1))\n+      else if ((code0 == POINTER_TYPE && null_ptr_cst_p (orig_op1))\n+\t       || (code1 == POINTER_TYPE && null_ptr_cst_p (orig_op0))\n+\t       || (null_ptr_cst_p (orig_op0) && null_ptr_cst_p (orig_op1)))\n \t{\n \t  /* Core Issue 1512 made this ill-formed.  */\n \t  if (complain & tf_error)\n \t    error_at (location, \"ordered comparison of pointer with \"\n \t\t      \"integer zero (%qT and %qT)\", type0, type1);\n \t  return error_mark_node;\n \t}\n-      else if (code1 == POINTER_TYPE && null_ptr_cst_p (orig_op0))\n-\t{\n-\t  /* Core Issue 1512 made this ill-formed.  */\n-\t  if (complain & tf_error)\n-\t    error_at (location, \"ordered comparison of pointer with \"\n-\t\t      \"integer zero (%qT and %qT)\", type0, type1);\n-\t  return error_mark_node;\n-\t}\n-      else if (null_ptr_cst_p (orig_op0) && null_ptr_cst_p (orig_op1))\n-\t/* One of the operands must be of nullptr_t type.  */\n-        result_type = TREE_TYPE (nullptr_node);\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  result_type = type0;"}, {"sha": "b8bc682f2eac5ae06b397fff18856bc2e4e09cdc", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr11.C", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr11.C?ref=bee2f80b901d73f50275f2b44932067ffcf616ca", "patch": "@@ -9,31 +9,15 @@ void fun()\n {\n   assert_true(nullptr == nullptr);\n   assert_false(nullptr != nullptr);\n-  assert_false(nullptr < nullptr);\n-  assert_false(nullptr > nullptr);\n-  assert_true(nullptr <= nullptr);\n-  assert_true(nullptr >= nullptr);\n \n   decltype(nullptr) mynull = 0;\n \n   assert_true(mynull == nullptr);\n   assert_false(mynull != nullptr);\n-  assert_false(mynull < nullptr);\n-  assert_false(mynull > nullptr);\n-  assert_true(mynull <= nullptr);\n-  assert_true(mynull >= nullptr);\n \n   assert_true(nullptr == mynull);\n   assert_false(nullptr != mynull);\n-  assert_false(nullptr < mynull);\n-  assert_false(nullptr > mynull);\n-  assert_true(nullptr <= mynull);\n-  assert_true(nullptr >= mynull);\n \n   assert_true(mynull == mynull);\n   assert_false(mynull != mynull);\n-  assert_false(mynull < mynull);\n-  assert_false(mynull > mynull);\n-  assert_true(mynull <= mynull);\n-  assert_true(mynull >= mynull);\n }"}, {"sha": "6c08eaa4d8fe170e17a26baefea4c79f25f26772", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr46.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr46.C?ref=bee2f80b901d73f50275f2b44932067ffcf616ca", "patch": "@@ -7,5 +7,6 @@ decltype(nullptr) foo ();\n bool\n bar ()\n {\n-  return foo () > nullptr || foo () < nullptr;\n+  return foo () > nullptr // { dg-error \"ordered comparison\" }\n+    || foo () < nullptr; // { dg-error \"ordered comparison\" }\n }"}, {"sha": "bc309230239a18aa4931c070f1eb1e79b38ff1e5", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-err7.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-err7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-err7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-err7.C?ref=bee2f80b901d73f50275f2b44932067ffcf616ca", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/99701\n+// { dg-do compile { target c++20 } }\n+\n+#include <compare>\n+\n+decltype(nullptr) foo ();\n+\n+auto b0 = nullptr <=> nullptr; // { dg-error \"ordered comparison\" }\n+auto b1 = 0 <=> nullptr; // { dg-error \"ordered comparison\" }\n+auto b2 = nullptr <=> 0; // { dg-error \"ordered comparison\" }\n+auto b3 = foo () <=> 0; // { dg-error \"ordered comparison\" }\n+auto b4 = 0 <=> foo (); // { dg-error \"ordered comparison\" }\n+auto b5 = foo () <=> nullptr; // { dg-error \"ordered comparison\" }\n+auto b6 = nullptr <=> foo (); // { dg-error \"ordered comparison\" }"}, {"sha": "da4951806c1958c8d3e74913666ccb3f09aae40d", "filename": "gcc/testsuite/g++.dg/expr/ptr-comp4.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptr-comp4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee2f80b901d73f50275f2b44932067ffcf616ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptr-comp4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptr-comp4.C?ref=bee2f80b901d73f50275f2b44932067ffcf616ca", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/99701\n+// DR 1512\n+// { dg-do compile { target c++11 } }\n+\n+/* Relational comparisons between null pointer constants and pointers are\n+   ill-formed.  */\n+\n+decltype(nullptr) foo ();\n+\n+auto lt = nullptr < nullptr; // { dg-error \"ordered comparison\" }\n+auto gt = nullptr > nullptr; // { dg-error \"ordered comparison\" }\n+auto le = nullptr <= nullptr; // { dg-error \"ordered comparison\" }\n+auto ge = nullptr >= nullptr; // { dg-error \"ordered comparison\" }\n+auto eq = nullptr == nullptr;\n+auto ne = nullptr != nullptr;\n+auto a1 = nullptr > 0; // { dg-error \"ordered comparison\" }\n+auto a2 = 0 < nullptr; // { dg-error \"ordered comparison\" }\n+auto a3 = foo () > 0; // { dg-error \"ordered comparison\" }\n+auto a4 = 0 < foo (); // { dg-error \"ordered comparison\" }\n+auto a5 = 0 <= foo (); // { dg-error \"ordered comparison\" }\n+auto a6 = foo () >= 0; // { dg-error \"ordered comparison\" }"}, {"sha": "ef90b6b5b73b21086474b32bb440dce7d2eb26f0", "filename": "libstdc++-v3/testsuite/20_util/tuple/comparison_operators/overloaded.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee2f80b901d73f50275f2b44932067ffcf616ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Foverloaded.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee2f80b901d73f50275f2b44932067ffcf616ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Foverloaded.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Foverloaded.cc?ref=bee2f80b901d73f50275f2b44932067ffcf616ca", "patch": "@@ -48,4 +48,3 @@ TwistedLogic operator<(const Compares&, const Compares&) { return {false}; }\n \n auto a = std::make_tuple(nullptr, Compares{}, 2, 'U');\n auto b = a == a;\n-auto c = a < a;"}, {"sha": "fc3118f85a8969d4082d863225e3785810675519", "filename": "libstdc++-v3/testsuite/20_util/tuple/comparison_operators/overloaded2.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee2f80b901d73f50275f2b44932067ffcf616ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Foverloaded2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee2f80b901d73f50275f2b44932067ffcf616ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Foverloaded2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Foverloaded2.cc?ref=bee2f80b901d73f50275f2b44932067ffcf616ca", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Copyright (C) 2014-2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+\n+// A type that is contextually convertible to bool but cannot be used with\n+// the usual logical operators, and/or/not.\n+struct TwistedLogic {\n+  bool value;\n+\n+  explicit operator bool() const noexcept { return value; }\n+};\n+\n+template<typename T>\n+bool operator&&(const T&, TwistedLogic) = delete;\n+\n+template<typename T>\n+bool operator&&(TwistedLogic, const T&) = delete;\n+\n+template<typename T>\n+bool operator||(const T&, TwistedLogic) = delete;\n+\n+template<typename T>\n+bool operator||(TwistedLogic, const T&) = delete;\n+\n+bool operator!(TwistedLogic) noexcept = delete;\n+\n+struct Compares {};\n+\n+TwistedLogic operator==(const Compares&, const Compares&) { return {true}; }\n+TwistedLogic operator<(const Compares&, const Compares&) { return {false}; }\n+\n+auto a = std::make_tuple(nullptr, Compares{}, 2, 'U');\n+auto b = a < a;\n+\n+// { dg-error \"ordered comparison\" \"\" { target *-*-* } 0 }"}]}