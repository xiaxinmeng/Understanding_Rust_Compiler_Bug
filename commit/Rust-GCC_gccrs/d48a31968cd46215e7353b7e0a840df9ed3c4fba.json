{"sha": "d48a31968cd46215e7353b7e0a840df9ed3c4fba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4YTMxOTY4Y2Q0NjIxNWU3MzUzYjdlMGE4NDBkZjllZDNjNGZiYQ==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2009-10-29T07:08:03Z"}, "committer": {"name": "Chao-ying Fu", "email": "chaoyingfu@gcc.gnu.org", "date": "2009-10-29T07:08:03Z"}, "message": "mips.c (mips_emit_unary, [...]): New functions.\n\n2009-10-29  Chao-ying Fu  <fu@mips.com>\n\n\t* config/mips/mips.c (mips_emit_unary, mips_force_unary): New\n\tfunctions.\n\t(mips_expand_synci_loop):  Use the length rtx to control the\n\tsynci loop from the begin rtx that points to the first byte of\n\tthe cache line.\n\nFrom-SVN: r153696", "tree": {"sha": "90d4933665b6a8903ddffdaef5e3e06df80b8951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90d4933665b6a8903ddffdaef5e3e06df80b8951"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d48a31968cd46215e7353b7e0a840df9ed3c4fba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48a31968cd46215e7353b7e0a840df9ed3c4fba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48a31968cd46215e7353b7e0a840df9ed3c4fba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48a31968cd46215e7353b7e0a840df9ed3c4fba/comments", "author": null, "committer": null, "parents": [{"sha": "18ab0fc8c7cbed25c1f985a42cb6bca3e9d98641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18ab0fc8c7cbed25c1f985a42cb6bca3e9d98641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18ab0fc8c7cbed25c1f985a42cb6bca3e9d98641"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "98d35a30adfa4074ba603a906d2a3669a055dd41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48a31968cd46215e7353b7e0a840df9ed3c4fba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48a31968cd46215e7353b7e0a840df9ed3c4fba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d48a31968cd46215e7353b7e0a840df9ed3c4fba", "patch": "@@ -1,3 +1,11 @@\n+2009-10-29  Chao-ying Fu  <fu@mips.com>\n+\n+\t* config/mips/mips.c (mips_emit_unary, mips_force_unary): New\n+\tfunctions.\n+\t(mips_expand_synci_loop):  Use the length rtx to control the\n+\tsynci loop from the begin rtx that points to the first byte of\n+\tthe cache line.\n+\n 2009-10-28  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* doc/invoke.texi: Rename -use-linker-plugin -fuse-linker-plugin."}, {"sha": "6af8d03cb324a0c050f96ef347e26fc03e939bc1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48a31968cd46215e7353b7e0a840df9ed3c4fba/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48a31968cd46215e7353b7e0a840df9ed3c4fba/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d48a31968cd46215e7353b7e0a840df9ed3c4fba", "patch": "@@ -2444,6 +2444,28 @@ mips_emit_move (rtx dest, rtx src)\n \t  : emit_move_insn_1 (dest, src));\n }\n \n+/* Emit an instruction of the form (set TARGET (CODE OP0)).  */\n+\n+static void\n+mips_emit_unary (enum rtx_code code, rtx target, rtx op0)\n+{\n+  emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t  gen_rtx_fmt_e (code, GET_MODE (op0), op0)));\n+}\n+\n+/* Compute (CODE OP0) and store the result in a new register of mode MODE.\n+   Return that new register.  */\n+\n+static rtx\n+mips_force_unary (enum machine_mode mode, enum rtx_code code, rtx op0)\n+{\n+  rtx reg;\n+\n+  reg = gen_reg_rtx (mode);\n+  mips_emit_unary (code, reg, op0);\n+  return reg;\n+}\n+\n /* Emit an instruction of the form (set TARGET (CODE OP0 OP1)).  */\n \n static void\n@@ -6689,26 +6711,51 @@ mips_expand_block_move (rtx dest, rtx src, rtx length)\n void\n mips_expand_synci_loop (rtx begin, rtx end)\n {\n-  rtx inc, label, cmp, cmp_result;\n+  rtx inc, label, end_label, cmp_result, mask, length;\n+\n+  /* Create end_label.  */\n+  end_label = gen_label_rtx ();\n+\n+  /* Check if begin equals end.  */\n+  cmp_result = gen_rtx_EQ (VOIDmode, begin, end);\n+  emit_jump_insn (gen_condjump (cmp_result, end_label));\n \n   /* Load INC with the cache line size (rdhwr INC,$1).  */\n   inc = gen_reg_rtx (Pmode);\n   emit_insn (Pmode == SImode\n \t     ? gen_rdhwr_synci_step_si (inc)\n \t     : gen_rdhwr_synci_step_di (inc));\n \n+  /* Check if inc is 0.  */\n+  cmp_result = gen_rtx_EQ (VOIDmode, inc, const0_rtx);\n+  emit_jump_insn (gen_condjump (cmp_result, end_label));\n+\n+  /* Calculate mask.  */\n+  mask = mips_force_unary (Pmode, NEG, inc);\n+\n+  /* Mask out begin by mask.  */\n+  begin = mips_force_binary (Pmode, AND, begin, mask);\n+\n+  /* Calculate length.  */\n+  length = mips_force_binary (Pmode, MINUS, end, begin);\n+\n   /* Loop back to here.  */\n   label = gen_label_rtx ();\n   emit_label (label);\n \n   emit_insn (gen_synci (begin));\n \n-  cmp = mips_force_binary (Pmode, GTU, begin, end);\n+  /* Update length.  */\n+  mips_emit_binary (MINUS, length, length, inc);\n \n+  /* Update begin.  */\n   mips_emit_binary (PLUS, begin, begin, inc);\n \n-  cmp_result = gen_rtx_EQ (VOIDmode, cmp, const0_rtx);\n+  /* Check if length is greater than 0.  */\n+  cmp_result = gen_rtx_GT (VOIDmode, length, const0_rtx);\n   emit_jump_insn (gen_condjump (cmp_result, label));\n+\n+  emit_label (end_label);\n }\n \f\n /* Expand a QI or HI mode atomic memory operation."}]}