{"sha": "03f8c4cc9cb16acfb1079e13cfbaae90b8b5847a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmOGM0Y2M5Y2IxNmFjZmIxMDc5ZTEzY2ZiYWFlOTBiOGI1ODQ3YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-12T22:36:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-12T22:36:25Z"}, "message": "(TARGET_SWITCHES): Add gas option.\n\n(ASM_DECLARE_FUNCTION_NAME): Moved output of .ent directive to output_prolog.\n(DBX_NO_XREFS): Removed, gdb understands cross references and the native\ndebugger can't handle embedded stabs.\n(ASM_FILE_START): Replace output of .file directive by\nASM_OUTPUT_SOURCE_FILENAME call.\n(TARGET_GAS, MASK_GAS, SDB_DEBUGGING_INFO, DBX_DEBUGGING_INFO,\nMIPS_DEBUGGING_INFO, PREFERRED_DEBUGGING_TYPE, DEBUGGER_AUTO_OFFSET,\nDEBUGGER_ARG_OFFSET, ASM_OUTPUT_SOURCE_LINE,\nASM_OUTPUT_SOURCE_FILENAME, DEFAULT_GDB_EXTENSIONS, ASM_STABS_OP,\nASM_STABN_OP, ASM_STABD_OP, SDB_ALLOW_FORWARD_REFERENCES,\nSDB_ALLOW_UNKNOWN_REFERENCES, PUT_SDB_DEF, PUT_SDB_PLAIN_DEF,\nPUT_SDB_TYPE, PUT_SDB_BLOCK_START, PUT_SDB_BLOCK_END,\nPUT_SDB_FUNCTION_START, PUT_SDB_FUNCTION_END, PUT_SDB_EPILOGUE_END,\nASM_FINAL_SPEC, CODE_MASK, MIPS_IS_STAB, MIPS_MARK_STAB,\nMIPS_UNMARK_STAB, SHASH_SIZE, THASH_SIZE): New macros.\n\nFrom-SVN: r5760", "tree": {"sha": "7296299a3f5f014b0e04bc728258e1dda585edaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7296299a3f5f014b0e04bc728258e1dda585edaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03f8c4cc9cb16acfb1079e13cfbaae90b8b5847a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f8c4cc9cb16acfb1079e13cfbaae90b8b5847a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f8c4cc9cb16acfb1079e13cfbaae90b8b5847a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f8c4cc9cb16acfb1079e13cfbaae90b8b5847a/comments", "author": null, "committer": null, "parents": [{"sha": "48f6bfac395697f131fc89a52fad6b20e3612471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f6bfac395697f131fc89a52fad6b20e3612471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f6bfac395697f131fc89a52fad6b20e3612471"}], "stats": {"total": 197, "additions": 169, "deletions": 28}, "files": [{"sha": "8cda68ea8f298847b0ad7cc9c021f7e5a5cab477", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 169, "deletions": 28, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f8c4cc9cb16acfb1079e13cfbaae90b8b5847a/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f8c4cc9cb16acfb1079e13cfbaae90b8b5847a/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=03f8c4cc9cb16acfb1079e13cfbaae90b8b5847a", "patch": "@@ -75,7 +75,12 @@ extern int target_flags;\n    that Alpha implementations without FP operations are required to\n    provide the FP registers.  */\n \n-#define TARGET_FPREGS (target_flags & 2)\n+#define TARGET_FPREGS\t(target_flags & 2)\n+\n+/* This means that gas is used to process the assembler file.  */\n+\n+#define MASK_GAS 4\n+#define TARGET_GAS\t(target_flags & MASK_GAS)\n \n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n@@ -88,6 +93,8 @@ extern int target_flags;\n     {\"soft-float\", -1},\t\t\t\\\n     {\"fp-regs\", 2},\t\t\t\\\n     {\"no-fp-regs\", -3},\t\t\t\\\n+    {\"alpha-as\", -MASK_GAS},\t\t\\\n+    {\"gas\", MASK_GAS},\t\t\t\\\n     {\"\", TARGET_DEFAULT} }\n \n #define TARGET_DEFAULT 3\n@@ -838,18 +845,12 @@ extern struct rtx_def *alpha_compare_op0, *alpha_compare_op1;\n extern int alpha_compare_fp_p;\n \n /* This macro produces the initial definition of a function name.  On the\n-   Alpha, we need to save the function name for the epilogue.  */\n+   Alpha, we need to save the function name for the prologue and epilogue.  */\n \n extern char *alpha_function_name;\n \n #define ASM_DECLARE_FUNCTION_NAME(FILE,NAME,DECL)\t\\\n- { int _level;\t\t\t\t\t\t\\\n-   tree _context;\t\t\t\t\t\\\n-   for (_level = -1, _context = (DECL); _context;\t\\\n-\t_context = DECL_CONTEXT (_context), _level++) \\\n-     ;\t\t\t\t\t\t\t\\\n-   fprintf (FILE, \"\\t.ent %s %d\\n\", NAME, _level);\t\\\n-   ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n    alpha_function_name = NAME;\t\t\t\t\\\n }\n    \n@@ -1241,17 +1242,6 @@ extern char *current_function_name;\n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND\n \n-/* We aren't doing ANYTHING about debugging for now.  */\n-/* #define SDB_DEBUGGING_INFO */\n-\n-/* Do not break .stabs pseudos into continuations.  */\n-#define DBX_CONTIN_LENGTH 0\n-\n-/* Don't try to use the `x' type-cross-reference character in DBX data.\n-   Also has the consequence of putting each struct, union or enum\n-   into a separate .stabs, containing only cross-refs to the others.  */\n-#define DBX_NO_XREFS\n-\n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n@@ -1354,17 +1344,11 @@ extern char *current_function_name;\n /* Output at beginning of assembler file.  */\n \n #define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-{ char *p, *after_dir = main_input_filename;\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n   alpha_write_verstamp (FILE);\t\t\t\t\t\\\n   fprintf (FILE, \"\\t.set noreorder\\n\");\t\t\t\t\\\n   fprintf (FILE, \"\\t.set noat\\n\");\t\t\t\t\\\n-  for (p = main_input_filename; *p; p++)\t\t\t\\\n-    if (*p == '/')\t\t\t\t\t\t\\\n-      after_dir = p + 1;\t\t\t\t\t\\\n-  fprintf (FILE, \"\\n\\t.file 2 \");\t\t\t        \\\n-  output_quoted_string (FILE, after_dir);\t\t        \\\n-  fprintf (FILE, \"\\n\");\t\t\t\t\t        \\\n+  ASM_OUTPUT_SOURCE_FILENAME (FILE, main_input_filename);\t\\\n }\n \n /* Output to assembler file text saying following lines\n@@ -1730,3 +1714,160 @@ literal_section ()\t\t\t\t\t\t\\\n   {\"aligned_memory_operand\", {MEM}},\t\t\t\\\n   {\"unaligned_memory_operand\", {MEM}},\t\t\t\\\n   {\"any_memory_operand\", {MEM}},\n+\f\n+/* Definitions for debugging.  */\n+\n+#define SDB_DEBUGGING_INFO\t\t/* generate info for mips-tfile */\n+#define DBX_DEBUGGING_INFO\t\t/* generate embedded stabs */\n+#define MIPS_DEBUGGING_INFO\t\t/* MIPS specific debugging info */\n+\n+#ifndef PREFERRED_DEBUGGING_TYPE\t/* assume SDB_DEBUGGING_INFO */\n+#define PREFERRED_DEBUGGING_TYPE ((len > 1 && !strncmp (str, \"ggdb\", len)) ? DBX_DEBUG : SDB_DEBUG)\n+#endif\n+\n+\n+/* Correct the offset of automatic variables and arguments.  Note that\n+   the Alpha debug format wants all automatic variables and arguments\n+   to be in terms of two different offsets from the virtual frame pointer,\n+   which is the stack pointer before any adjustment in the function.\n+   The offset for the argument pointer is fixed for the native compiler,\n+   it is either zero (for the no arguments case) or large enough to hold\n+   all argument registers.\n+   The offset for the auto pointer is the fourth argument to the .frame\n+   directive (local_offset).\n+   To stay compatible with the native tools we use the same offsets\n+   from the virtual frame pointer and adjust the debugger arg/auto offsets\n+   accordingly. These debugger offsets are set up in output_prolog.  */\n+\n+long alpha_arg_offset;\n+long alpha_auto_offset;\n+#define DEBUGGER_AUTO_OFFSET(X) \\\n+  ((GET_CODE (X) == PLUS ? INTVAL (XEXP (X, 1)) : 0) + alpha_auto_offset)\n+#define DEBUGGER_ARG_OFFSET(OFFSET, X) (OFFSET + alpha_arg_offset)\n+\n+\n+#define ASM_OUTPUT_SOURCE_LINE(STREAM, LINE)\t\t\t\t\\\n+  alpha_output_lineno (STREAM, LINE)\n+extern void alpha_output_lineno ();\n+\n+#define ASM_OUTPUT_SOURCE_FILENAME(STREAM, NAME)\t\t\t\\\n+  alpha_output_filename (STREAM, NAME)\n+extern void alpha_output_filename ();\n+\n+\n+/* Do not break .stabs pseudos into continuations.  */\n+#define DBX_CONTIN_LENGTH 0\n+\n+/* By default, turn on GDB extensions.  */\n+#define DEFAULT_GDB_EXTENSIONS 1\n+\n+/* If we are smuggling stabs through the ALPHA ECOFF object\n+   format, put a comment in front of the .stab<x> operation so\n+   that the ALPHA assembler does not choke.  The mips-tfile program\n+   will correctly put the stab into the object file.  */\n+\n+#define ASM_STABS_OP\t((TARGET_GAS) ? \".stabs\" : \" #.stabs\")\n+#define ASM_STABN_OP\t((TARGET_GAS) ? \".stabn\" : \" #.stabn\")\n+#define ASM_STABD_OP\t((TARGET_GAS) ? \".stabd\" : \" #.stabd\")\n+\n+/* Forward references to tags are allowed.  */\n+#define SDB_ALLOW_FORWARD_REFERENCES\n+\n+/* Unknown tags are also allowed.  */\n+#define SDB_ALLOW_UNKNOWN_REFERENCES\n+\n+#define PUT_SDB_DEF(a)\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  fprintf (asm_out_file, \"\\t%s.def\\t\",\t\t\t\\\n+\t   (TARGET_GAS) ? \"\" : \"#\");\t\t\t\\\n+  ASM_OUTPUT_LABELREF (asm_out_file, a); \t\t\\\n+  fputc (';', asm_out_file);\t\t\t\t\\\n+} while (0)\n+\n+#define PUT_SDB_PLAIN_DEF(a)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  fprintf (asm_out_file, \"\\t%s.def\\t.%s;\",\t\t\\\n+\t   (TARGET_GAS) ? \"\" : \"#\", (a));\t\t\\\n+} while (0)\n+\n+#define PUT_SDB_TYPE(a)\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  fprintf (asm_out_file, \"\\t.type\\t0x%x;\", (a));\t\\\n+} while (0)\n+\n+/* For block start and end, we create labels, so that\n+   later we can figure out where the correct offset is.\n+   The normal .ent/.end serve well enough for functions,\n+   so those are just commented out.  */\n+\n+extern int sdb_label_count;\t\t/* block start/end next label # */\n+\n+#define PUT_SDB_BLOCK_START(LINE)\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  fprintf (asm_out_file,\t\t\t\t\\\n+\t   \"$Lb%d:\\n\\t%s.begin\\t$Lb%d\\t%d\\n\",\t\t\\\n+\t   sdb_label_count,\t\t\t\t\\\n+\t   (TARGET_GAS) ? \"\" : \"#\",\t\t\t\\\n+\t   sdb_label_count,\t\t\t\t\\\n+\t   (LINE));\t\t\t\t\t\\\n+  sdb_label_count++;\t\t\t\t\t\\\n+} while (0)\n+\n+#define PUT_SDB_BLOCK_END(LINE)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  fprintf (asm_out_file,\t\t\t\t\\\n+\t   \"$Le%d:\\n\\t%s.bend\\t$Le%d\\t%d\\n\",\t\t\\\n+\t   sdb_label_count,\t\t\t\t\\\n+\t   (TARGET_GAS) ? \"\" : \"#\",\t\t\t\\\n+\t   sdb_label_count,\t\t\t\t\\\n+\t   (LINE));\t\t\t\t\t\\\n+  sdb_label_count++;\t\t\t\t\t\\\n+} while (0)\n+\n+#define PUT_SDB_FUNCTION_START(LINE)\n+\n+#define PUT_SDB_FUNCTION_END(LINE)\n+\n+#define PUT_SDB_EPILOGUE_END(NAME)\n+\n+/* Specify to run a post-processor, mips-tfile after the assembler\n+   has run to stuff the ecoff debug information into the object file.\n+   This is needed because the Alpha assembler provides no way\n+   of specifying such information in the assembly file.  */\n+\n+#if (TARGET_DEFAULT & MASK_GAS) != 0\n+\n+#define ASM_FINAL_SPEC \"\\\n+%{malpha-as: %{!mno-mips-tfile: \\\n+\t\\n mips-tfile %{v*: -v} \\\n+\t\t%{K: -I %b.o~} \\\n+\t\t%{!K: %{save-temps: -I %b.o~}} \\\n+\t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n+\t\t%{.s:%i} %{!.s:%g.s}}}\"\n+\n+#else\n+#define ASM_FINAL_SPEC \"\\\n+%{!mgas: %{!mno-mips-tfile: \\\n+\t\\n mips-tfile %{v*: -v} \\\n+\t\t%{K: -I %b.o~} \\\n+\t\t%{!K: %{save-temps: -I %b.o~}} \\\n+\t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n+\t\t%{.s:%i} %{!.s:%g.s}}}\"\n+\n+#endif\n+\n+/* Macros for mips-tfile.c to encapsulate stabs in ECOFF, and for\n+   mips-tdump.c to print them out.\n+\n+   These must match the corresponding definitions in gdb/mipsread.c.\n+   Unfortunately, gcc and gdb do not currently share any directories. */\n+\n+#define CODE_MASK 0x8F300\n+#define MIPS_IS_STAB(sym) (((sym)->index & 0xFFF00) == CODE_MASK)\n+#define MIPS_MARK_STAB(code) ((code)+CODE_MASK)\n+#define MIPS_UNMARK_STAB(code) ((code)-CODE_MASK)\n+\n+/* Override some mips-tfile definitions.  */\n+\n+#define SHASH_SIZE 511\n+#define THASH_SIZE 55"}]}