{"sha": "473469230a0224c19584317db7c2b9e9bb07c5c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDczNDY5MjMwYTAyMjRjMTk1ODQzMTdkYjdjMmI5ZTliYjA3YzVjMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T08:11:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T08:11:25Z"}, "message": "[multiple changes]\n\n2015-05-12  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_prag.adb (Expand_N_Pragma): Rewrite ignored pragma as\n\tNull statements.\n\t* namet.ads (Boolean3): Document this flag used for Ignore_Pragma.\n\t* par-prag.adb (Prag): Implement Ignore_Pragma.\n\t* sem_prag.adb: Implement Ignore_Pragma.\n\t* snames.ads-tmpl: Add entries for pragma Ignore_Pragma.\n\n2015-05-12  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch10.adb (Build_Shadow_Entity): Link the class-wide shadow\n\tentity with its corresponding real entity.\n\t(Decorate_Type): Unconditionally build the class-wide shadow entity of\n\ttagged types.\n\t* einfo.ads, einfo.adb (Has_Non_Limited_View): New synthesized\n\tattribute.\n\t(Non_Limited_View): Moved from field 17 to field 19 be available\n\tin class-wide entities.\n\t* exp_attr.adb (Access_Cases): Code cleanup.\n\t* exp_disp.adb (Expand_Interface_Actuals): Ditto.\n\t* exp_util.adb (Non_Limited_Designated_Type): Ditto.\n\t* freeze.adb (Build_Renamed_Bdody): Ditto.\n\t* sem_aux.adb (Available_View): Ditto.\n\t* sem_ch4.adb (Analyze_Selected_Component): Ditto.\n\t(Try_One_Prefix_Interpretation): Ditto.\n\t* sem_ch5.adb (Analyze_Assignment): Ditto.\n\t* sem_ch6.adb (Detect_And_Exchange): Ditto.\n\t* sem_ch8.adb (Find_Expanded_Name): Ditto.\n\t* sem_disp.adb (Check_Controlling_Type): Ditto.\n\t* sem_res.adb (Resolve_Type_Conversion): Ditto.\n\t(Full_Designated_Type): Ditto.\n\t* sem_type.adb (Covers): Ditto.\n\t* sem_util.adb: Fix typo in comment.\n\nFrom-SVN: r223038", "tree": {"sha": "437c2d0856bbb6a4ed19c76af7be237db1cd11ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/437c2d0856bbb6a4ed19c76af7be237db1cd11ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/473469230a0224c19584317db7c2b9e9bb07c5c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473469230a0224c19584317db7c2b9e9bb07c5c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/473469230a0224c19584317db7c2b9e9bb07c5c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473469230a0224c19584317db7c2b9e9bb07c5c1/comments", "author": null, "committer": null, "parents": [{"sha": "0cc1540d55a2e7ff710588b78c0b6efc8dc6a51f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cc1540d55a2e7ff710588b78c0b6efc8dc6a51f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cc1540d55a2e7ff710588b78c0b6efc8dc6a51f"}], "stats": {"total": 383, "additions": 205, "deletions": 178}, "files": [{"sha": "5de8f0026598634893ff8390dd88c5194cbfe403", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -1,3 +1,38 @@\n+2015-05-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_prag.adb (Expand_N_Pragma): Rewrite ignored pragma as\n+\tNull statements.\n+\t* namet.ads (Boolean3): Document this flag used for Ignore_Pragma.\n+\t* par-prag.adb (Prag): Implement Ignore_Pragma.\n+\t* sem_prag.adb: Implement Ignore_Pragma.\n+\t* snames.ads-tmpl: Add entries for pragma Ignore_Pragma.\n+\n+2015-05-12  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch10.adb (Build_Shadow_Entity): Link the class-wide shadow\n+\tentity with its corresponding real entity.\n+\t(Decorate_Type): Unconditionally build the class-wide shadow entity of\n+\ttagged types.\n+\t* einfo.ads, einfo.adb (Has_Non_Limited_View): New synthesized\n+\tattribute.\n+\t(Non_Limited_View): Moved from field 17 to field 19 be available\n+\tin class-wide entities.\n+\t* exp_attr.adb (Access_Cases): Code cleanup.\n+\t* exp_disp.adb (Expand_Interface_Actuals): Ditto.\n+\t* exp_util.adb (Non_Limited_Designated_Type): Ditto.\n+\t* freeze.adb (Build_Renamed_Bdody): Ditto.\n+\t* sem_aux.adb (Available_View): Ditto.\n+\t* sem_ch4.adb (Analyze_Selected_Component): Ditto.\n+\t(Try_One_Prefix_Interpretation): Ditto.\n+\t* sem_ch5.adb (Analyze_Assignment): Ditto.\n+\t* sem_ch6.adb (Detect_And_Exchange): Ditto.\n+\t* sem_ch8.adb (Find_Expanded_Name): Ditto.\n+\t* sem_disp.adb (Check_Controlling_Type): Ditto.\n+\t* sem_res.adb (Resolve_Type_Conversion): Ditto.\n+\t(Full_Designated_Type): Ditto.\n+\t* sem_type.adb (Covers): Ditto.\n+\t* sem_util.adb: Fix typo in comment.\n+\n 2015-05-12  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_unst.adb (Get_Real_Subp): New subprogram."}, {"sha": "2e7d51980c7b127745196e42f424fbed3ac90a00", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -146,7 +146,6 @@ package body Einfo is\n    --    First_Literal                   Node17\n    --    Master_Id                       Node17\n    --    Modulus                         Uint17\n-   --    Non_Limited_View                Node17\n    --    Prival                          Node17\n \n    --    Alias                           Node18\n@@ -168,6 +167,7 @@ package body Einfo is\n    --    Default_Aspect_Value            Node19\n    --    Entry_Bodies_Array              Node19\n    --    Extra_Accessibility_Of_Result   Node19\n+   --    Non_Limited_View                Node19\n    --    Parent_Subtype                  Node19\n    --    Size_Check_Code                 Node19\n    --    Spec_Entity                     Node19\n@@ -2683,8 +2683,10 @@ package body Einfo is\n    function Non_Limited_View (Id : E) return E is\n    begin\n       pragma Assert\n-        (Ekind (Id) in Incomplete_Kind or else Ekind (Id) = E_Abstract_State);\n-      return Node17 (Id);\n+        (Ekind (Id) in Incomplete_Kind\n+           or else Ekind (Id) in Class_Wide_Kind\n+           or else Ekind (Id) = E_Abstract_State);\n+      return Node19 (Id);\n    end Non_Limited_View;\n \n    function Nonzero_Is_True (Id : E) return B is\n@@ -5629,8 +5631,10 @@ package body Einfo is\n    procedure Set_Non_Limited_View (Id : E; V : E) is\n    begin\n       pragma Assert\n-        (Ekind (Id) in Incomplete_Kind or else Ekind (Id) = E_Abstract_State);\n-      Set_Node17 (Id, V);\n+        (Ekind (Id) in Incomplete_Kind\n+           or else Ekind (Id) = E_Abstract_State\n+           or else Ekind (Id) = E_Class_Wide_Type);\n+      Set_Node19 (Id, V);\n    end Set_Non_Limited_View;\n \n    procedure Set_Nonzero_Is_True (Id : E; V : B := True) is\n@@ -7105,6 +7109,18 @@ package body Einfo is\n       return False;\n    end Has_Interrupt_Handler;\n \n+   --------------------------\n+   -- Has_Non_Limited_View --\n+   --------------------------\n+\n+   function Has_Non_Limited_View (Id : E) return B is\n+   begin\n+      return (Ekind (Id) in Incomplete_Kind\n+          or else Ekind (Id) in Class_Wide_Kind\n+          or else Ekind (Id) = E_Abstract_State)\n+        and then Present (Non_Limited_View (Id));\n+   end Has_Non_Limited_View;\n+\n    -----------------------------\n    -- Has_Non_Null_Refinement --\n    -----------------------------\n@@ -9390,10 +9406,6 @@ package body Einfo is\n          when Modular_Integer_Kind                         =>\n             Write_Str (\"Modulus\");\n \n-         when E_Abstract_State                             |\n-              E_Incomplete_Type                            =>\n-            Write_Str (\"Non_Limited_View\");\n-\n          when E_Incomplete_Subtype                         =>\n             if From_Limited_With (Id) then\n                Write_Str (\"Non_Limited_View\");\n@@ -9489,6 +9501,11 @@ package body Einfo is\n          when Scalar_Kind                                  =>\n             Write_Str (\"Default_Aspect_Value\");\n \n+         when E_Abstract_State                             |\n+              E_Class_Wide_Type                            |\n+              E_Incomplete_Type                            =>\n+            Write_Str (\"Non_Limited_View\");\n+\n          when E_Array_Type                                 =>\n             Write_Str (\"Default_Component_Value\");\n "}, {"sha": "6779a4b483c0cd56db1b0de056c136e33e9d33fc", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -1706,7 +1706,12 @@ package Einfo is\n --      Defined in subprogram entities. Set for a subprogram which contains at\n --      least one nested subprogram.\n \n-   --    Has_Non_Null_Refinement (synth)\n+--    Has_Non_Limited_View (synth)\n+--       Defined in E_Incomplete_Type, E_Incomplete_Subtype, E_Class_Wide_Type,\n+--       E_Abstract_State entities. True if their Non_Limited_View attribute\n+--       is present.\n+\n+--    Has_Non_Null_Refinement (synth)\n --       Defined in E_Abstract_State entities. True if the state has at least\n --       one variable or state constituent in aspect/pragma Refined_State.\n \n@@ -3449,7 +3454,7 @@ package Einfo is\n --       Defined in all subtype and type entities. Set for modular integer\n --       types if the modulus value is other than a power of 2.\n \n---    Non_Limited_View (Node17)\n+--    Non_Limited_View (Node19)\n --       Defined in abstract states and incomplete types that act as shadow\n --       entities created when analysing a limited with clause (Ada 2005:\n --       AI-50217). Points to the defining entity of the original declaration.\n@@ -5445,9 +5450,10 @@ package Einfo is\n    --    Part_Of_Constituents                (Elist9)\n    --    Encapsulating_State                 (Node10)\n    --    Body_References                     (Elist16)\n-   --    Non_Limited_View                    (Node17)\n+   --    Non_Limited_View                    (Node19)\n    --    From_Limited_With                   (Flag159)\n    --    Has_Visible_Refinement              (Flag263)\n+   --    Has_Non_Limited_View                (synth)\n    --    Has_Non_Null_Refinement             (synth)\n    --    Has_Null_Refinement                 (synth)\n    --    Is_External_State                   (synth)\n@@ -5548,10 +5554,12 @@ package Einfo is\n    --    First_Entity                        (Node17)\n    --    Equivalent_Type                     (Node18)   (always Empty for type)\n    --    Last_Entity                         (Node20)\n+   --    Non_Limited_View                    (Node19)\n    --    SSO_Set_High_By_Default             (Flag273)  (base type only)\n    --    SSO_Set_Low_By_Default              (Flag272)  (base type only)\n    --    First_Component                     (synth)\n    --    First_Component_Or_Discriminant     (synth)\n+   --    Has_Non_Limited_View                (synth)\n    --    (plus type attributes)\n \n    --  E_Component\n@@ -5867,10 +5875,11 @@ package Einfo is\n    --  E_Incomplete_Type\n    --  E_Incomplete_Subtype\n    --    Direct_Primitive_Operations         (Elist10)\n-   --    Non_Limited_View                    (Node17)\n+   --    Non_Limited_View                    (Node19)\n    --    Private_Dependents                  (Elist18)\n    --    Discriminant_Constraint             (Elist21)\n    --    Stored_Constraint                   (Elist23)\n+   --    Has_Non_Limited_View                (synth)\n    --    (plus type attributes)\n \n    --  E_In_Parameter\n@@ -7123,6 +7132,7 @@ package Einfo is\n    function Has_Attach_Handler                  (Id : E) return B;\n    function Has_Entries                         (Id : E) return B;\n    function Has_Foreign_Convention              (Id : E) return B;\n+   function Has_Non_Limited_View                (Id : E) return B;\n    function Has_Non_Null_Refinement             (Id : E) return B;\n    function Has_Null_Abstract_State             (Id : E) return B;\n    function Has_Null_Refinement                 (Id : E) return B;"}, {"sha": "ef11b1911f1ee6adebb0832e03d1ee5f14384782", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -1787,21 +1787,10 @@ package body Exp_Attr is\n \n             --  Handle designated types that come from the limited view\n \n-            if Ekind (Btyp_DDT) = E_Incomplete_Type\n-              and then From_Limited_With (Btyp_DDT)\n-              and then Present (Non_Limited_View (Btyp_DDT))\n+            if From_Limited_With (Btyp_DDT)\n+              and then Has_Non_Limited_View (Btyp_DDT)\n             then\n                Btyp_DDT := Non_Limited_View (Btyp_DDT);\n-\n-            elsif Is_Class_Wide_Type (Btyp_DDT)\n-               and then Ekind (Etype (Btyp_DDT)) = E_Incomplete_Type\n-               and then From_Limited_With (Etype (Btyp_DDT))\n-               and then Present (Non_Limited_View (Etype (Btyp_DDT)))\n-               and then Present (Class_Wide_Type\n-                                  (Non_Limited_View (Etype (Btyp_DDT))))\n-            then\n-               Btyp_DDT :=\n-                 Class_Wide_Type (Non_Limited_View (Etype (Btyp_DDT)));\n             end if;\n \n             --  In order to improve the text of error messages, the designated"}, {"sha": "68f504d0ae406e687fa8ad3f5419c4d712667bec", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -1605,9 +1605,7 @@ package body Exp_Disp is\n                   --  a duplicate declaration whose designated type is the\n                   --  non-limited view.\n \n-                  if Ekind (Actual_DDT) = E_Incomplete_Type\n-                    and then Present (Non_Limited_View (Actual_DDT))\n-                  then\n+                  if Has_Non_Limited_View (Actual_DDT) then\n                      Anon := New_Copy (Actual_Typ);\n \n                      if Is_Itype (Anon) then\n@@ -1617,27 +1615,6 @@ package body Exp_Disp is\n                      Set_Directly_Designated_Type (Anon,\n                        Non_Limited_View (Actual_DDT));\n                      Set_Etype (Actual_Dup, Anon);\n-\n-                  elsif Is_Class_Wide_Type (Actual_DDT)\n-                    and then Ekind (Etype (Actual_DDT)) = E_Incomplete_Type\n-                    and then Present (Non_Limited_View (Etype (Actual_DDT)))\n-                  then\n-                     Anon := New_Copy (Actual_Typ);\n-\n-                     if Is_Itype (Anon) then\n-                        Set_Scope (Anon, Current_Scope);\n-                     end if;\n-\n-                     Set_Directly_Designated_Type (Anon,\n-                       New_Copy (Actual_DDT));\n-                     Set_Class_Wide_Type (Directly_Designated_Type (Anon),\n-                       New_Copy (Class_Wide_Type (Actual_DDT)));\n-                     Set_Etype (Directly_Designated_Type (Anon),\n-                       Non_Limited_View (Etype (Actual_DDT)));\n-                     Set_Etype (\n-                       Class_Wide_Type (Directly_Designated_Type (Anon)),\n-                       Non_Limited_View (Etype (Actual_DDT)));\n-                     Set_Etype (Actual_Dup, Anon);\n                   end if;\n                end if;\n "}, {"sha": "16096a412b715ae8fd179e96c65244380e443fcb", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -843,6 +843,15 @@ package body Exp_Prag is\n       Pname : constant Name_Id := Pragma_Name (N);\n \n    begin\n+      --  Rewrite pragma ignored by Ignore_Pragma to null statement, so that/\n+      --  back end or the expander here does not get over-enthusiastic and\n+      --  start processing such a pragma!\n+\n+      if Get_Name_Table_Boolean3 (Pname) then\n+         Rewrite (N, Make_Null_Statement (Sloc (N)));\n+         return;\n+      end if;\n+\n       --  Note: we may have a pragma whose Pragma_Identifier field is not a\n       --  recognized pragma, and we must ignore it at this stage.\n "}, {"sha": "6a7f052f0a68ae6764bcdba82c1e354b0239efbf", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -6874,9 +6874,7 @@ package body Exp_Util is\n    function Non_Limited_Designated_Type (T : Entity_Id) return Entity_Id is\n       Desig : constant Entity_Id := Designated_Type (T);\n    begin\n-      if Ekind (Desig) = E_Incomplete_Type\n-        and then Present (Non_Limited_View (Desig))\n-      then\n+      if Has_Non_Limited_View (Desig) then\n          return Non_Limited_View (Desig);\n       else\n          return Desig;"}, {"sha": "d43a9fcfc8139d8fa8b2c3ffa17add29555a17dc", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -424,9 +424,7 @@ package body Freeze is\n          declare\n             Ret_Type : constant Entity_Id := Etype (Result_Definition (Spec));\n          begin\n-            if Ekind (Ret_Type) = E_Incomplete_Type\n-              and then Present (Non_Limited_View (Ret_Type))\n-            then\n+            if Has_Non_Limited_View (Ret_Type) then\n                Set_Result_Definition (Spec,\n                   New_Occurrence_Of (Non_Limited_View (Ret_Type), Loc));\n             end if;"}, {"sha": "4a21ef5b87cebc923df2ebf16013e206c3cd81bb", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -135,7 +135,8 @@ package Namet is\n --      Restriction[_Warning]s pragmas for No_Use_Of_Entity. This avoids most\n --      unnecessary searches of the No_Use_Of_Entity table.\n \n---      The Boolean3 field is not used\n+--      The Boolean3 field is set for names of pragmas that are to be ignored\n+--      because of the occurrence of a corresponding pragma Ignore_Pragma.\n \n --    In the binder, we have the following uses:\n "}, {"sha": "ec8df4a98b7e56f209d9c7fb9dc2f13394c421b3", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -290,6 +290,12 @@ begin\n       return Pragma_Node;\n    end if;\n \n+   --  Ignore pragma previously flagged by Ignore_Pragma\n+\n+   if Get_Name_Table_Boolean3 (Prag_Name) then\n+      return Pragma_Node;\n+   end if;\n+\n    --  Count number of arguments. This loop also checks if any of the arguments\n    --  are Error, indicating a syntax error as they were parsed. If so, we\n    --  simply return, because we get into trouble with cascaded errors if we\n@@ -425,6 +431,28 @@ begin\n             Ada_Version := Ada_Version_Explicit;\n          end if;\n \n+      -------------------\n+      -- Ignore_Pragma --\n+      -------------------\n+\n+      --  Processing for this pragma must be done at parse time, since we want\n+      --  be able to ignore pragmas that are otherwise processed at parse time.\n+\n+      when Pragma_Ignore_Pragma => Ignore_Pragma : declare\n+         A : Node_Id;\n+\n+      begin\n+         Check_Arg_Count (1);\n+         Check_No_Identifier (Arg1);\n+         A := Expression (Arg1);\n+\n+         if Nkind (A) /= N_Identifier then\n+            Error_Msg (\"incorrect argument for pragma %\", Sloc (A));\n+         else\n+            Set_Name_Table_Boolean3 (Chars (A), True);\n+         end if;\n+      end Ignore_Pragma;\n+\n       ----------------\n       -- List (2.8) --\n       ----------------"}, {"sha": "a6ba49f5da19c71f78e8dab0916109f65f5598d5", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -78,31 +78,11 @@ package body Sem_Aux is\n \n    function Available_View (Ent : Entity_Id) return Entity_Id is\n    begin\n-      --  Obtain the non-limited (non-abstract) view of a state or variable\n+      --  Obtain the non-limited view (if available)\n \n-      if Ekind (Ent) = E_Abstract_State\n-        and then Present (Non_Limited_View (Ent))\n-      then\n-         return Non_Limited_View (Ent);\n-\n-      --  The non-limited view of an incomplete type may itself be incomplete\n-      --  in which case obtain its full view.\n-\n-      elsif Is_Incomplete_Type (Ent)\n-        and then Present (Non_Limited_View (Ent))\n-      then\n+      if Has_Non_Limited_View (Ent) then\n          return Get_Full_View (Non_Limited_View (Ent));\n \n-      --  If it is class_wide, check whether the specific type comes from a\n-      --  limited_with.\n-\n-      elsif Is_Class_Wide_Type (Ent)\n-        and then Is_Incomplete_Type (Etype (Ent))\n-        and then From_Limited_With (Etype (Ent))\n-        and then Present (Non_Limited_View (Etype (Ent)))\n-      then\n-         return Class_Wide_Type (Non_Limited_View (Etype (Ent)));\n-\n       --  In all other cases, return entity unchanged\n \n       else"}, {"sha": "4973dc15c8092ea332012aa7ac6ed9be7ca3b971", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -5604,6 +5604,11 @@ package body Sem_Ch10 is\n             Decorate_Type        (Shadow, Scop, Is_Tagged);\n             Set_Non_Limited_View (Shadow, Ent);\n \n+            if Is_Tagged then\n+               Set_Non_Limited_View (Class_Wide_Type (Shadow),\n+                 Class_Wide_Type (Ent));\n+            end if;\n+\n             if Is_Incomplete_Or_Private_Type (Ent) then\n                Set_Private_Dependents (Shadow, New_Elmt_List);\n             end if;\n@@ -5671,35 +5676,33 @@ package body Sem_Ch10 is\n             Set_Is_Tagged_Type (Ent);\n             Set_Direct_Primitive_Operations (Ent, New_Elmt_List);\n \n-            if No (Class_Wide_Type (Ent)) then\n-               CW_Typ :=\n-                 New_External_Entity\n-                   (E_Void, Scope (Ent), Sloc (Ent), Ent, 'C', 0, 'T');\n-\n-               Set_Class_Wide_Type (Ent, CW_Typ);\n-\n-               --  Set parent to be the same as the parent of the tagged type.\n-               --  We need a parent field set, and it is supposed to point to\n-               --  the declaration of the type. The tagged type declaration\n-               --  essentially declares two separate types, the tagged type\n-               --  itself and the corresponding class-wide type, so it is\n-               --  reasonable for the parent fields to point to the declaration\n-               --  in both cases.\n-\n-               Set_Parent (CW_Typ, Parent (Ent));\n-\n-               Set_Ekind                     (CW_Typ, E_Class_Wide_Type);\n-               Set_Etype                     (CW_Typ, Ent);\n-               Set_Scope                     (CW_Typ, Scop);\n-               Set_Is_Tagged_Type            (CW_Typ);\n-               Set_Is_First_Subtype          (CW_Typ);\n-               Init_Size_Align               (CW_Typ);\n-               Set_Has_Unknown_Discriminants (CW_Typ);\n-               Set_Class_Wide_Type           (CW_Typ, CW_Typ);\n-               Set_Equivalent_Type           (CW_Typ, Empty);\n-               Set_From_Limited_With         (CW_Typ, From_Limited_With (Ent));\n-               Set_Materialize_Entity        (CW_Typ, Materialize);\n-            end if;\n+            CW_Typ :=\n+              New_External_Entity\n+                (E_Void, Scope (Ent), Sloc (Ent), Ent, 'C', 0, 'T');\n+\n+            Set_Class_Wide_Type (Ent, CW_Typ);\n+\n+            --  Set parent to be the same as the parent of the tagged type.\n+            --  We need a parent field set, and it is supposed to point to\n+            --  the declaration of the type. The tagged type declaration\n+            --  essentially declares two separate types, the tagged type\n+            --  itself and the corresponding class-wide type, so it is\n+            --  reasonable for the parent fields to point to the declaration\n+            --  in both cases.\n+\n+            Set_Parent (CW_Typ, Parent (Ent));\n+\n+            Set_Ekind                     (CW_Typ, E_Class_Wide_Type);\n+            Set_Etype                     (CW_Typ, Ent);\n+            Set_Scope                     (CW_Typ, Scop);\n+            Set_Is_Tagged_Type            (CW_Typ);\n+            Set_Is_First_Subtype          (CW_Typ);\n+            Init_Size_Align               (CW_Typ);\n+            Set_Has_Unknown_Discriminants (CW_Typ);\n+            Set_Class_Wide_Type           (CW_Typ, CW_Typ);\n+            Set_Equivalent_Type           (CW_Typ, Empty);\n+            Set_From_Limited_With         (CW_Typ, From_Limited_With (Ent));\n+            Set_Materialize_Entity        (CW_Typ, Materialize);\n          end if;\n       end Decorate_Type;\n "}, {"sha": "0af8a4624af197a1d977a92e86107fe5c0ce23c7", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -4116,26 +4116,14 @@ package body Sem_Ch4 is\n       --  If the non-limited view is itself an incomplete type, get the\n       --  full view if available.\n \n-      if Is_Incomplete_Type (Prefix_Type)\n-        and then From_Limited_With (Prefix_Type)\n-        and then Present (Non_Limited_View (Prefix_Type))\n+      if From_Limited_With (Prefix_Type)\n+        and then Has_Non_Limited_View (Prefix_Type)\n       then\n          Prefix_Type := Get_Full_View (Non_Limited_View (Prefix_Type));\n \n          if Nkind (N) = N_Explicit_Dereference then\n             Set_Etype (Prefix (N), Prefix_Type);\n          end if;\n-\n-      elsif Ekind (Prefix_Type) = E_Class_Wide_Type\n-        and then From_Limited_With (Prefix_Type)\n-        and then Present (Non_Limited_View (Etype (Prefix_Type)))\n-      then\n-         Prefix_Type :=\n-           Class_Wide_Type (Non_Limited_View (Etype (Prefix_Type)));\n-\n-         if Nkind (N) = N_Explicit_Dereference then\n-            Set_Etype (Prefix (N), Prefix_Type);\n-         end if;\n       end if;\n \n       if Ekind (Prefix_Type) = E_Private_Subtype then\n@@ -7976,6 +7964,7 @@ package body Sem_Ch4 is\n \n          if Ekind (Obj_Type) = E_Incomplete_Type\n            and then From_Limited_With (Obj_Type)\n+           and then Has_Non_Limited_View (Obj_Type)\n          then\n             Obj_Type := Get_Full_View (Non_Limited_View (Obj_Type));\n          end if;"}, {"sha": "1c85f9143630be3d79cec76f5acc1534e29eeee2", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -548,9 +548,8 @@ package body Sem_Ch5 is\n       --  types, use the non-limited view if available\n \n       if Nkind (Rhs) = N_Explicit_Dereference\n-        and then Ekind (T2) = E_Incomplete_Type\n         and then Is_Tagged_Type (T2)\n-        and then Present (Non_Limited_View (T2))\n+        and then Has_Non_Limited_View (T2)\n       then\n          T2 := Non_Limited_View (T2);\n       end if;"}, {"sha": "eb09ee3b59713a0eba333c032e372fb19ff658f9", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -2923,9 +2923,8 @@ package body Sem_Ch6 is\n             Typ : constant Entity_Id := Etype (Id);\n \n          begin\n-            if Ekind (Typ) = E_Incomplete_Type\n-              and then From_Limited_With (Typ)\n-              and then Present (Non_Limited_View (Typ))\n+            if From_Limited_With (Typ)\n+              and then Has_Non_Limited_View (Typ)\n             then\n                Set_Etype (Id, Non_Limited_View (Typ));\n             end if;"}, {"sha": "2a74e6f08c3518bdb5e9ca3ca14ae552ecd23cb5", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -5767,18 +5767,20 @@ package body Sem_Ch8 is\n                   end if;\n                end if;\n \n-            --  Ada 2005 (AI-217): Handle shadow entities associated with types\n-            --  declared in limited-withed nested packages. We don't need to\n-            --  handle E_Incomplete_Subtype entities because the entities in\n-            --  the limited view are always E_Incomplete_Type entities (see\n-            --  Build_Limited_Views). Regarding the expression used to evaluate\n-            --  the scope, it is important to note that the limited view also\n-            --  has shadow entities associated nested packages. For this reason\n-            --  the correct scope of the entity is the scope of the real entity\n+            --  Ada 2005 (AI-217): Handle shadow entities associated with\n+            --  types declared in limited-withed nested packages. We don't need\n+            --  to handle E_Incomplete_Subtype entities because the entities\n+            --  in the limited view are always E_Incomplete_Type and\n+            --  E_Class_Wide_Type entities (see Build_Limited_Views).\n+\n+            --  Regarding the expression used to evaluate the scope, it\n+            --  is important to note that the limited view also has shadow\n+            --  entities associated nested packages. For this reason the\n+            --  correct scope of the entity is the scope of the real entity.\n             --  The non-limited view may itself be incomplete, in which case\n             --  get the full view if available.\n \n-            elsif Ekind (Id) = E_Incomplete_Type\n+            elsif Ekind_In (Id, E_Incomplete_Type, E_Class_Wide_Type)\n               and then From_Limited_With (Id)\n               and then Present (Non_Limited_View (Id))\n               and then Scope (Non_Limited_View (Id)) = P_Name\n@@ -6725,17 +6727,15 @@ package body Sem_Ch8 is\n \n          --  The designated type may be a limited view with no components.\n          --  Check whether the non-limited view is available, because in some\n-         --  cases this will not be set when instlling the context.\n+         --  cases this will not be set when installing the context.\n \n          if Is_Access_Type (P_Type) then\n             declare\n                D : constant Entity_Id := Directly_Designated_Type (P_Type);\n             begin\n                if Is_Incomplete_Type (D)\n-                 and then not Is_Class_Wide_Type (D)\n                  and then From_Limited_With (D)\n                  and then Present (Non_Limited_View (D))\n-                 and then not Is_Class_Wide_Type (Non_Limited_View (D))\n                then\n                   Set_Directly_Designated_Type (P_Type,  Non_Limited_View (D));\n                end if;"}, {"sha": "26b3df252890dece8d97b2edd77ef106fd6de08f", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -336,7 +336,7 @@ package body Sem_Disp is\n          --  Ada 2005 (AI-50217)\n \n          elsif From_Limited_With (Designated_Type (T))\n-           and then Present (Non_Limited_View (Designated_Type (T)))\n+           and then Has_Non_Limited_View (Designated_Type (T))\n            and then Scope (Designated_Type (T)) = Scope (Subp)\n          then\n             if Is_First_Subtype (Non_Limited_View (Designated_Type (T))) then"}, {"sha": "f3f10cd1917bbf3a34baae2c493e6aea4da5b6a1", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -9373,6 +9373,12 @@ package body Sem_Prag is\n          return;\n       end if;\n \n+      --  Ignore pragma if Ignore_Pragma applies\n+\n+      if Get_Name_Table_Boolean3 (Pname) then\n+         return;\n+      end if;\n+\n       --  Here to start processing for recognized pragma\n \n       Prag_Id := Get_Pragma_Id (Pname);\n@@ -14239,6 +14245,17 @@ package body Sem_Prag is\n             end;\n          end Ident;\n \n+         -------------------\n+         -- Ignore_Pragma --\n+         -------------------\n+\n+         --  pragma Ignore_Pragma (pragma_IDENTIFIER);\n+\n+         --  Entirely handled in the parser, nothing to do here\n+\n+         when Pragma_Ignore_Pragma =>\n+            null;\n+\n          ----------------------------\n          -- Implementation_Defined --\n          ----------------------------\n@@ -25690,6 +25707,7 @@ package body Sem_Prag is\n       Pragma_Ghost                          =>  0,\n       Pragma_Global                         => -1,\n       Pragma_Ident                          => -1,\n+      Pragma_Ignore_Pragma                  =>  0,\n       Pragma_Implementation_Defined         => -1,\n       Pragma_Implemented                    => -1,\n       Pragma_Implicit_Packing               =>  0,"}, {"sha": "b838e25b4cbadc1b71aa87df7d7521d2bbefa4d0", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -10744,19 +10744,11 @@ package body Sem_Res is\n             --  view when available. If it is a class-wide type, recover the\n             --  class-wide type of the nonlimited view.\n \n-            if From_Limited_With (Opnd) then\n-               if Ekind (Opnd) in Incomplete_Kind\n-                 and then Present (Non_Limited_View (Opnd))\n-               then\n-                  Opnd := Non_Limited_View (Opnd);\n-                  Set_Etype (Expression (N), Opnd);\n-\n-               elsif Is_Class_Wide_Type (Opnd)\n-                 and then Present (Non_Limited_View (Etype (Opnd)))\n-               then\n-                  Opnd := Class_Wide_Type (Non_Limited_View (Etype (Opnd)));\n-                  Set_Etype (Expression (N), Opnd);\n-               end if;\n+            if From_Limited_With (Opnd)\n+              and then Has_Non_Limited_View (Opnd)\n+            then\n+               Opnd := Non_Limited_View (Opnd);\n+               Set_Etype (Expression (N), Opnd);\n             end if;\n \n             if Is_Access_Type (Opnd) then\n@@ -12342,9 +12334,8 @@ package body Sem_Res is\n             begin\n                --  Handle the limited view of a type\n \n-               if Is_Incomplete_Type (Desig)\n-                 and then From_Limited_With (Desig)\n-                 and then Present (Non_Limited_View (Desig))\n+               if From_Limited_With (Desig)\n+                 and then Has_Non_Limited_View (Desig)\n                then\n                   return Available_View (Desig);\n                else"}, {"sha": "b4d752d32588a216ddb3e4944902cf8c44307703", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -1227,33 +1227,17 @@ package body Sem_Type is\n          --  expression may have the limited view. If that one in turn is\n          --  incomplete, get full view if available.\n \n-         if Is_Incomplete_Type (T1) then\n-            return Covers (Get_Full_View (Non_Limited_View (T1)), T2);\n-\n-         elsif Ekind (T1) = E_Class_Wide_Type then\n-            return\n-              Covers (Class_Wide_Type (Non_Limited_View (Etype (T1))), T2);\n-         else\n-            return False;\n-         end if;\n+         return Has_Non_Limited_View (T1)\n+            and then Covers (Get_Full_View (Non_Limited_View (T1)), T2);\n \n       elsif From_Limited_With (T2) then\n \n          --  If units in the context have Limited_With clauses on each other,\n          --  either type might have a limited view. Checks performed elsewhere\n          --  verify that the context type is the nonlimited view.\n \n-         if Is_Incomplete_Type (T2) then\n-            return Covers (T1, Get_Full_View (Non_Limited_View (T2)));\n-\n-         elsif Ekind (T2) = E_Class_Wide_Type then\n-            return\n-              Present (Non_Limited_View (Etype (T2)))\n-                and then\n-                  Covers (T1, Class_Wide_Type (Non_Limited_View (Etype (T2))));\n-         else\n-            return False;\n-         end if;\n+         return Has_Non_Limited_View (T2)\n+            and then Covers (T1, Get_Full_View (Non_Limited_View (T2)));\n \n       --  Ada 2005 (AI-412): Coverage for regular incomplete subtypes\n "}, {"sha": "f6b76e11a7f0f0b0e3bcd43f72000d41dd8984fe", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -4941,7 +4941,7 @@ package body Sem_Util is\n \n       --  Both names are selected_components, their prefixes are known to\n       --  denote the same object, and their selector_names denote the same\n-      --  component (RM 6.4.1(6.6/3)\n+      --  component (RM 6.4.1(6.6/3))\n \n       elsif Nkind (Obj1) = N_Selected_Component then\n          return Denotes_Same_Object (Prefix (Obj1), Prefix (Obj2))"}, {"sha": "534d0d09d3b2c7681c84696e3738d664a86cb6ef", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473469230a0224c19584317db7c2b9e9bb07c5c1/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=473469230a0224c19584317db7c2b9e9bb07c5c1", "patch": "@@ -401,6 +401,7 @@ package Snames is\n    --  Fast_Math.\n \n    Name_Favor_Top_Level                : constant Name_Id := N + $; -- GNAT\n+   Name_Ignore_Pragma                  : constant Name_Id := N + $; -- GNAT\n    Name_Implicit_Packing               : constant Name_Id := N + $; -- GNAT\n    Name_Initialize_Scalars             : constant Name_Id := N + $; -- GNAT\n    Name_Interrupt_State                : constant Name_Id := N + $; -- GNAT\n@@ -1749,6 +1750,7 @@ package Snames is\n       Pragma_Extensions_Allowed,\n       Pragma_External_Name_Casing,\n       Pragma_Favor_Top_Level,\n+      Pragma_Ignore_Pragma,\n       Pragma_Implicit_Packing,\n       Pragma_Initialize_Scalars,\n       Pragma_Interrupt_State,"}]}