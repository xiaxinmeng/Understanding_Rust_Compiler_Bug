{"sha": "c21723389538275d17f3892a24c50b035baef829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxNzIzMzg5NTM4Mjc1ZDE3ZjM4OTJhMjRjNTBiMDM1YmFlZjgyOQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2010-03-15T16:13:28Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2010-03-15T16:13:28Z"}, "message": "re PR middle-end/43300 (ICE: in emit_move_insn, at expr.c:3432)\n\n\tPR middle-end/43300\n\t* tree-outof-ssa.c (emit_partition_copy): New argument sizeexp,\n\tuse it to expand block copies.\n\t(insert_partition_copy_on_edge, insert_rtx_to_part_on_edge,\n\tinsert_part_to_rtx_on_edge): Adjust callers of emit_partition_copy.\n\t(insert_value_copy_on_edge): Use store_expr for BLKmode values.\n\ntestsuite/\n\t* gcc.dg/pr43300.c: New testcase.\n\nFrom-SVN: r157461", "tree": {"sha": "5a505839c11d52bcf64285b3e5d865e171c3e908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a505839c11d52bcf64285b3e5d865e171c3e908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c21723389538275d17f3892a24c50b035baef829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21723389538275d17f3892a24c50b035baef829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21723389538275d17f3892a24c50b035baef829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21723389538275d17f3892a24c50b035baef829/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "610b64e2a274bb1021ee5891fd68e8b2f95e7c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610b64e2a274bb1021ee5891fd68e8b2f95e7c1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/610b64e2a274bb1021ee5891fd68e8b2f95e7c1d"}], "stats": {"total": 70, "additions": 61, "deletions": 9}, "files": [{"sha": "73ec8c16a91505acb62fd5c1e25aeabd0a798958", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,3 +1,12 @@\n+2010-03-15  Michael Matz  <matz@suse.de>\n+\n+\tPR middle-end/43300\n+\t* tree-outof-ssa.c (emit_partition_copy): New argument sizeexp,\n+\tuse it to expand block copies.\n+\t(insert_partition_copy_on_edge, insert_rtx_to_part_on_edge,\n+\tinsert_part_to_rtx_on_edge): Adjust callers of emit_partition_copy.\n+\t(insert_value_copy_on_edge): Use store_expr for BLKmode values.\n+\n 2010-03-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43367"}, {"sha": "f99a576912a6e1c77cb5ca71f879e9611c7a0344", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,3 +1,8 @@\n+2010-03-15  Michael Matz  <matz@suse.de>\n+\n+\tPR middle-end/43300\n+\t* gcc.dg/pr43300.c: New testcase.\n+\n 2010-03-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43367"}, {"sha": "3fc130ef292652b9544e4d4176e5d906bd879673", "filename": "gcc/testsuite/gcc.dg/pr43300.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43300.c?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+typedef float V2SF __attribute__ ((vector_size (128)));\n+\n+V2SF\n+foo (int x, V2SF a)\n+{\n+  V2SF b;\n+  if (x & 42)\n+    b = a;\n+  else\n+    b = a + (V2SF) {1.0f/0.0f - 1.0f/0.0f, 1.0f/0.0f - 1.0f/0.0f};\n+  while (x--)\n+    a += b;\n+      \n+  return a;\n+}"}, {"sha": "ac1641fc8e8d419c129f7370872114478784f402", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -140,18 +140,26 @@ set_location_for_edge (edge e)\n     }\n }\n \n-/* Emit insns to copy SRC into DEST converting SRC if necessary.  */\n+/* Emit insns to copy SRC into DEST converting SRC if necessary.  As\n+   SRC/DEST might be BLKmode memory locations SIZEEXP is a tree from\n+   which we deduce the size to copy in that case.  */\n \n static inline rtx\n-emit_partition_copy (rtx dest, rtx src, int unsignedsrcp)\n+emit_partition_copy (rtx dest, rtx src, int unsignedsrcp, tree sizeexp)\n {\n   rtx seq;\n \n   start_sequence ();\n \n   if (GET_MODE (src) != VOIDmode && GET_MODE (src) != GET_MODE (dest))\n     src = convert_to_mode (GET_MODE (dest), src, unsignedsrcp);\n-  emit_move_insn (dest, src);\n+  if (GET_MODE (src) == BLKmode)\n+    {\n+      gcc_assert (GET_MODE (dest) == BLKmode);\n+      emit_block_move (dest, src, expr_size (sizeexp), BLOCK_OP_NORMAL);\n+    }\n+  else\n+    emit_move_insn (dest, src);\n \n   seq = get_insns ();\n   end_sequence ();\n@@ -164,6 +172,7 @@ emit_partition_copy (rtx dest, rtx src, int unsignedsrcp)\n static void\n insert_partition_copy_on_edge (edge e, int dest, int src, source_location locus)\n {\n+  tree var;\n   rtx seq;\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -183,10 +192,11 @@ insert_partition_copy_on_edge (edge e, int dest, int src, source_location locus)\n   if (locus)\n     set_curr_insn_source_location (locus);\n \n+  var = partition_to_var (SA.map, src);\n   seq = emit_partition_copy (SA.partition_to_pseudo[dest],\n \t\t\t     SA.partition_to_pseudo[src],\n-\t\t\t     TYPE_UNSIGNED (TREE_TYPE (\n-\t\t\t       partition_to_var (SA.map, src))));\n+\t\t\t     TYPE_UNSIGNED (TREE_TYPE (var)),\n+\t\t\t     var);\n \n   insert_insn_on_edge (seq, e);\n }\n@@ -232,6 +242,11 @@ insert_value_copy_on_edge (edge e, int dest, tree src, source_location locus)\n       x = expand_expr (src, NULL, src_mode, EXPAND_NORMAL);\n       x = convert_modes (dest_mode, src_mode, x, unsignedp);\n     }\n+  else if (src_mode == BLKmode)\n+    {\n+      x = SA.partition_to_pseudo[dest];\n+      store_expr (src, x, 0, false);\n+    }\n   else\n     x = expand_expr (src, SA.partition_to_pseudo[dest],\n \t\t     dest_mode, EXPAND_NORMAL);\n@@ -269,9 +284,13 @@ insert_rtx_to_part_on_edge (edge e, int dest, rtx src, int unsignedsrcp,\n   if (locus)\n     set_curr_insn_source_location (locus);\n \n+  /* We give the destination as sizeexp in case src/dest are BLKmode\n+     mems.  Usually we give the source.  As we result from SSA names\n+     the left and right size should be the same (and no WITH_SIZE_EXPR\n+     involved), so it doesn't matter.  */\n   seq = emit_partition_copy (SA.partition_to_pseudo[dest],\n-\t\t\t     src,\n-\t\t\t     unsignedsrcp);\n+\t\t\t     src, unsignedsrcp,\n+\t\t\t     partition_to_var (SA.map, dest));\n \n   insert_insn_on_edge (seq, e);\n }\n@@ -282,6 +301,7 @@ insert_rtx_to_part_on_edge (edge e, int dest, rtx src, int unsignedsrcp,\n static void\n insert_part_to_rtx_on_edge (edge e, rtx dest, int src, source_location locus)\n {\n+  tree var;\n   rtx seq;\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -300,10 +320,11 @@ insert_part_to_rtx_on_edge (edge e, rtx dest, int src, source_location locus)\n   if (locus)\n     set_curr_insn_source_location (locus);\n \n+  var = partition_to_var (SA.map, src);\n   seq = emit_partition_copy (dest,\n \t\t\t     SA.partition_to_pseudo[src],\n-\t\t\t     TYPE_UNSIGNED (TREE_TYPE (\n-\t\t\t       partition_to_var (SA.map, src))));\n+\t\t\t     TYPE_UNSIGNED (TREE_TYPE (var)),\n+\t\t\t     var);\n \n   insert_insn_on_edge (seq, e);\n }"}]}