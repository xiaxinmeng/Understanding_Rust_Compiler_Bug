{"sha": "15b68e0201298c5b54ec278f3ee223075d3b3134", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTViNjhlMDIwMTI5OGM1YjU0ZWMyNzhmM2VlMjIzMDc1ZDNiMzEzNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-08-02T06:31:02Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-08-02T06:31:02Z"}, "message": "2003-08-02  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/URL.java\n\t(URL): Added paragraph about the\n\tgnu.java.net.nocache_protocol_handlers property.\n\t(ph_cache): Renamed from handlers to match classpath's implementation.\n\tReordered it with factory and serialVersionUID member variables.\n\t(cache_handlers): New member variable.\n\t(static): New static initializer to initialize cache_handlers from\n\tgnu.java.net.nocache_protocol_handlers property.\n\t(URL): Use ph_cache instead of handlers, reformatted some code to\n\tmatch classpath's implementation.\n\nFrom-SVN: r70098", "tree": {"sha": "7b2f6e5c392024b377e477d45f23442dc5a9e8fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b2f6e5c392024b377e477d45f23442dc5a9e8fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15b68e0201298c5b54ec278f3ee223075d3b3134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b68e0201298c5b54ec278f3ee223075d3b3134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b68e0201298c5b54ec278f3ee223075d3b3134", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b68e0201298c5b54ec278f3ee223075d3b3134/comments", "author": null, "committer": null, "parents": [{"sha": "f53b62e15ccd784e0e150493a8000976f6023572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f53b62e15ccd784e0e150493a8000976f6023572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f53b62e15ccd784e0e150493a8000976f6023572"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "b497299a81f45f211e6fd7ff67a0711a87a82f36", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b68e0201298c5b54ec278f3ee223075d3b3134/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b68e0201298c5b54ec278f3ee223075d3b3134/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=15b68e0201298c5b54ec278f3ee223075d3b3134", "patch": "@@ -1,3 +1,16 @@\n+2003-08-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/URL.java\n+\t(URL): Added paragraph about the\n+\tgnu.java.net.nocache_protocol_handlers property.\n+\t(ph_cache): Renamed from handlers to match classpath's implementation.\n+\tReordered it with factory and serialVersionUID member variables.\n+\t(cache_handlers): New member variable.\n+\t(static): New static initializer to initialize cache_handlers from\n+\tgnu.java.net.nocache_protocol_handlers property.\n+\t(URL): Use ph_cache instead of handlers, reformatted some code to\n+\tmatch classpath's implementation.\n+\n 2003-08-01  Tom Tromey  <tromey@redhat.com>\n \n \tFix for PR libgcj/11241:"}, {"sha": "2db8c4dd1cd89947a62bf46db51557aff624db82", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b68e0201298c5b54ec278f3ee223075d3b3134/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b68e0201298c5b54ec278f3ee223075d3b3134/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=15b68e0201298c5b54ec278f3ee223075d3b3134", "patch": "@@ -98,6 +98,14 @@\n   * <p>\n   * Please note that a protocol handler must be a subclass of\n   * URLStreamHandler.\n+  * <p>\n+  * Normally, this class caches protocol handlers.  Once it finds a handler\n+  * for a particular protocol, it never tries to look up a new handler\n+  * again.  However, if the system property\n+  * gnu.java.net.nocache_protocol_handlers is set, then this\n+  * caching behavior is disabled.  This property is specific to this\n+  * implementation.  Sun's JDK may or may not do protocol caching, but it\n+  * almost certainly does not examine this property.\n   *\n   * @author Aaron M. Renn <arenn@urbanophile.com>\n   * @author Warren Levy <warrenl@cygnus.com>\n@@ -149,19 +157,33 @@ public final class URL implements Serializable\n    */\n   transient URLStreamHandler ph;\n \n+  /**\n+   * If an application installs its own protocol handler factory, this is\n+   * where we keep track of it.\n+   */\n+  private static URLStreamHandlerFactory factory;\n+\n+  private static final long serialVersionUID = -7627629688361524110L;\n+\n   /**\n    * This a table where we cache protocol handlers to avoid the overhead\n    * of looking them up each time.\n    */\n-  private static Hashtable handlers = new Hashtable();\n+  private static Hashtable ph_cache = new Hashtable();\n \n   /**\n-   * If an application installs its own protocol handler factory, this is\n-   * where we keep track of it.\n+   * Whether or not to cache protocol handlers.\n    */\n-  private static URLStreamHandlerFactory factory;\n+  private static boolean cache_handlers;\n \n-  private static final long serialVersionUID = -7627629688361524110L;\n+  static\n+    {\n+      String s = System.getProperty(\"gnu.java.net.nocache_protocol_handlers\");\n+      if (s == null)\n+        cache_handlers = true;\n+      else\n+        cache_handlers = false;\n+    }\n \n   /**\n    * Constructs a URL and loads a protocol handler for the values passed as\n@@ -732,12 +754,14 @@ public String toString()\n     URLStreamHandler ph;\n \n     // See if a handler has been cached for this protocol.\n-    if ((ph = (URLStreamHandler) handlers.get(protocol)) != null)\n+    if ((ph = (URLStreamHandler) ph_cache.get(protocol)) != null)\n       return ph;\n \n     // If a non-default factory has been set, use it to find the protocol.\n     if (factory != null)\n-      ph = factory.createURLStreamHandler(protocol);\n+      {\n+\tph = factory.createURLStreamHandler(protocol);\n+      }\n     else if (protocol.equals (\"core\"))\n       {\n  \tph = new gnu.gcj.protocol.core.Handler ();\n@@ -788,9 +812,10 @@ else if (protocol.equals (\"file\"))\n       }\n \n     // Update the hashtable with the new protocol handler.\n-    if (ph != null)\n+    if (ph != null\n+        && cache_handlers)\n       if (ph instanceof URLStreamHandler)\n-\thandlers.put(protocol, ph);\n+\tph_cache.put(protocol, ph);\n       else\n \tph = null;\n "}]}