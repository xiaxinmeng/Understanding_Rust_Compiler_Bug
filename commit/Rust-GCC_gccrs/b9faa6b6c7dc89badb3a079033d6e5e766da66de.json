{"sha": "b9faa6b6c7dc89badb3a079033d6e5e766da66de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlmYWE2YjZjN2RjODliYWRiM2EwNzkwMzNkNmU1ZTc2NmRhNjZkZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-07-16T18:05:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-07-16T18:05:46Z"}, "message": "* gcc_build: New script.\n\nFrom-SVN: r35060", "tree": {"sha": "dda7b33576a4105644f8f1a2a300570e40e0e2ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dda7b33576a4105644f8f1a2a300570e40e0e2ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9faa6b6c7dc89badb3a079033d6e5e766da66de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9faa6b6c7dc89badb3a079033d6e5e766da66de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9faa6b6c7dc89badb3a079033d6e5e766da66de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9faa6b6c7dc89badb3a079033d6e5e766da66de/comments", "author": null, "committer": null, "parents": [{"sha": "fd589a2a868b4c20140fb265ef9e7dd18d7b9ce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd589a2a868b4c20140fb265ef9e7dd18d7b9ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd589a2a868b4c20140fb265ef9e7dd18d7b9ce6"}], "stats": {"total": 299, "additions": 299, "deletions": 0}, "files": [{"sha": "0a934906295200de6ff9c1624eb3c6f875eafebc", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9faa6b6c7dc89badb3a079033d6e5e766da66de/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9faa6b6c7dc89badb3a079033d6e5e766da66de/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=b9faa6b6c7dc89badb3a079033d6e5e766da66de", "patch": "@@ -1,3 +1,7 @@\n+Sun Jul 16 12:04:33 2000  Mark P Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc_build: New script.\n+\n 2000-07-13  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc_update (files_and_dependencies): Remove generated YACC files."}, {"sha": "a5bf8649c92a98034c1f7b35c969e9bcab1b479b", "filename": "contrib/gcc_build", "status": "added", "additions": 295, "deletions": 0, "changes": 295, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9faa6b6c7dc89badb3a079033d6e5e766da66de/contrib%2Fgcc_build", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9faa6b6c7dc89badb3a079033d6e5e766da66de/contrib%2Fgcc_build", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_build?ref=b9faa6b6c7dc89badb3a079033d6e5e766da66de", "patch": "@@ -0,0 +1,295 @@\n+#! /bin/sh\n+\n+########################################################################\n+#\n+# File:   build-gcc.sh\n+# Author: Mark Mitchell\n+# Date:   07/10/2000\n+#\n+# Contents:\n+#   Script to automatically download and build GCC.\n+#\n+# Copyright (c) 2000 Free Software Foundation.\n+#\n+# This file is part of GNU CC.\n+#\n+# GNU CC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+#\n+# GNU CC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GNU CC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+#\n+########################################################################\n+\n+########################################################################\n+# Notes\n+########################################################################\n+\n+# If you are using password-based CVS, you must manually log in, and\n+# not log out from, the CVS server before running this script.\n+\n+########################################################################\n+# Functions\n+########################################################################\n+\n+# Issue the error message given by $1 and exit with a non-zero\n+# exit code.\n+\n+error() {\n+    echo \"build-gcc.sh: error: $1\"\n+    exit 1\n+}\n+\n+# Issue a usage message explaining how to use this script.\n+\n+usage() {\n+cat <<EOF\n+build-gcc.sh [-c configure_options] \n+\t\t [-d destination_directory]\n+\t\t [-m make_options]\n+\t\t [-u username]\n+\t\t [-p protocol]\n+\t\t [-t tarfile]\n+\t\t [build]\n+\t\t [checkout]\n+\t\t [export]\n+\t\t [install]\n+\t\t [test]\n+\t\t [update]\n+EOF\n+    exit 1\n+}\n+\n+# Change to the directory given by $1.\n+\n+changedir() {\n+    cd $1 || \\\n+\terror \"Could not change directory to $1\"\n+}\n+\n+# Set up CVS environment variables\n+\n+cvs_setup() {\n+    CVSROOT=\":${CVS_PROTOCOL}:${CVS_USERNAME}@\"\n+    CVSROOT=\"${CVSROOT}${CVS_SERVER}:${CVS_REPOSITORY}\"\n+    export CVSROOT\n+}\n+\n+# Checkout a fresh copy of the GCC build tree.\n+\n+checkout_gcc() {\n+    # Tell CVS where to find everything.\n+    cvs_setup\n+\n+    # If the destination already exists, don't risk destroying it.\n+    test -e ${DESTINATION} && \\\n+\terror \"${DESTINATION} already exists\"\n+\n+    # CVS doesn't allow an absolute path for the destination directory.\n+    DESTINATION_PARENT=`dirname ${DESTINATION}`\n+    test -d ${DESTINATION_PARENT} || \\\n+\terror \"${DESTINATION_PARENT} is not a directory\"\n+    changedir ${DESTINATION_PARENT}\n+\n+    # Checkout the tree\n+    cvs -z 9 co -d `basename ${DESTINATION}` gcc || \\\n+\terror \"Could not check out GCC\"\n+}\n+\n+# Update GCC.\n+\n+update_gcc() {\n+    # Tell CVS where to find everything\n+    cvs_setup\n+\n+    # If the destination does not already exist, complain.\n+    test -d ${DESTINATION} || \\\n+\terror \"{$DESTINATION} does not exist\"\n+    # Enter the destination directory.\n+    changedir ${DESTINATION}\n+\n+    # Update the tree\n+    ./contrib/gcc_update || \\\n+\terror \"Could not update GCC\"\n+}\n+\n+# Build GCC.\n+\n+build_gcc() {\n+    # Go to the source directory.\n+    changedir ${DESTINATION}\n+\n+    # Remove the object directory.\n+    rm -rf ${OBJDIR}\n+    # Create it again.\n+    mkdir ${OBJDIR} || \\\n+\terror \"Could not create ${OBJDIR}\"\n+    # Enter it.\n+    changedir ${OBJDIR}\n+\n+    # Configure the tree.\n+    (eval ${DESTINATION}/configure ${CONFIGURE_OPTIONS} | \n+        tee -a ${LOGFILE}) 2>&1 || \\\n+\terror \"Could not configure the compiler\"\n+\n+    # Bootstrap the compiler\n+    (eval make ${MAKE_OPTIONS} bootstrap |\n+\ttee -a ${LOGFILE}) 2>&1 || \\\n+\terror \"Could not build the compiler\"\n+}\n+\n+# Test GCC.\n+\n+test_gcc() {\n+    # Go to the source directory.\n+    changedir ${DESTINATION}\n+    # Go to the object directory.\n+    changedir ${OBJDIR}\n+\n+    echo \"Running tests...  This will take a while.\"\n+    (make -k check | tee -a ${LOGFILE}) 2>&1\n+    (${DESTINATION}/contrib/test_summary | tee -a ${LOGFILE})\n+}\n+\n+# Export the GCC source tree.\n+\n+export_gcc() {\n+    # Go to the source directory.\n+    changedir ${DESTINATION}\n+    # Go up one level.\n+    changedir ..\n+    # Build a tarbal off the source directory.\n+    tar czf ${TARFILE} \\\n+\t--exclude=${OBJDIR} \\\n+\t--exclude=CVS \\\n+\t--exclude='.#*' \\\n+\t--exclude='*~' \\\n+\t`basename ${DESTINATION}`\n+}\n+\n+# Install GCC.\n+\n+install_gcc() {\n+    # Go to the source directory.\n+    changedir ${DESTINATION}\n+    # Go to the object directory.\n+    changedir ${OBJDIR}\n+\n+    make install > ${LOGFILE} 2>&1 || \\\n+\terror \"Installation failed\"\n+}\n+\n+########################################################################\n+# Initialization\n+########################################################################\n+\n+# The CVS server containing the GCC repository.\n+CVS_SERVER=\"gcc.gnu.org\"\n+# The path to the repository on that server.\n+CVS_REPOSITORY=\"/cvs/gcc\"\n+# The CVS protocol to use.\n+CVS_PROTOCOL=\"pserver\"\n+# The username to use when connecting to the server.\n+CVS_USERNAME=\"anoncvs\"\n+\n+# The directory where the checked out GCC will be placed.\n+DESTINATION=\"${HOME}/dev/gcc\"\n+# The relative path from the top of the source tree to the \n+# object directory.\n+OBJDIR=\"objdir\"\n+\n+# The file where information will be logged.\n+LOGFILE=${HOME}/build-gcc.$$.log\n+# The file where the tarred up sources will be placed.\n+TARFILE=\"${HOME}/dev/gcc.tgz\"\n+\n+# Options to pass to configure.\n+CONFIGURE_OPTIONS=\n+# Options to pass to make.\n+MAKE_OPTIONS=\n+\n+# Modes of operation\n+BUILD=0\n+CHECKOUT=0\n+EXPORT=0\n+INSTALL=0\n+TEST=0\n+UPDATE=0\n+\n+########################################################################\n+# Main Program\n+########################################################################\n+\n+# Parse the options.\n+while getopts \"c:d:m:t:\" ARG; do\n+    case $ARG in\n+    c)    CONFIGURE_OPTIONS=\"${OPTARG}\";;\n+    d)    DESTINATION=\"${OPTARG}\";;\n+    m)    MAKE_OPTIONS=\"${OPTARG}\";;\n+    u)    CVS_USERNAME=\"${OPTARG}\";;\n+    p)    CVS_PROTOCOL=\"${OPTARG}\";;\n+    t)    CVS_TARGFILE=\"${OPTARG}\";;\n+    \\?)   usage;;\n+    esac\n+done\n+shift `expr ${OPTIND} - 1`\n+\n+# Handle the major modes.\n+while [ $# -ne 0 ]; do\n+    case $1 in\n+    build)    BUILD=1;;\n+    checkout) CHECKOUT=1;;\n+    export)   EXPORT=1;;\n+    install)  INSTALL=1;;\n+    test)     TEST=1;;\n+    update)   UPDATE=1;;\n+    *)        usage;;\n+    esac\n+    shift\n+done\n+\n+# Check the arguments for sanity.\n+if [ ${CHECKOUT} -ne 0 ] && [ ${UPDATE} -ne 0 ]; then\n+    error \"Cannot checkout and update simultaneously\"\n+fi\n+\n+# Remove any old logfiles.\n+rm -f ${LOGFILE}\n+# Tell the user where to find the logfile.\n+echo \"build-gcc.sh: The logfile for this run is ${LOGFILE}\"\n+\n+# Checkout the tree.\n+if [ ${CHECKOUT} -ne 0 ]; then\n+    checkout_gcc\n+elif [ ${UPDATE} -ne 0 ]; then\n+    update_gcc\n+fi\n+\n+# Build the compiler.\n+if [ ${BUILD} -ne 0 ]; then\n+    build_gcc\n+fi\n+\n+# Test the compiler\n+if [ ${TEST} -ne 0 ]; then\n+    test_gcc\n+fi\n+\n+# Install the compiler.\n+if [ ${INSTALL} -ne 0 ]; then\n+    install_gcc\n+fi\n+\n+# Export the sources\n+if [ ${EXPORT} -ne 0 ]; then\n+    export_gcc\n+fi"}]}