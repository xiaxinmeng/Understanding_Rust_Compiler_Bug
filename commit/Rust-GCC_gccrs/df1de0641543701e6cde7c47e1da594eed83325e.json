{"sha": "df1de0641543701e6cde7c47e1da594eed83325e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYxZGUwNjQxNTQzNzAxZTZjZGU3YzQ3ZTFkYTU5NGVlZDgzMzI1ZQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-16T07:46:56Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-16T07:46:56Z"}, "message": "[libbacktrace] Unify function name preference handling\n\nBoth read_function_entry and read_referenced_name implement a priority scheme\nfor names.  The priorities are:\n- 1st: DW_AT_linkage_name\n- 2nd: Name from DW_AT_abstract_origin or DW_AT_specification\n- 3rd: DW_AT_name.\n\nEnsure both functions fully adhere to it.\n\n2019-01-16  Tom de Vries  <tdevries@suse.de>\n\n\t* dwarf.c (read_referenced_name): Don't allow DW_AT_name to override any\n\tname.\n\t(read_function_entry): Same.  Don't allow name found via\n\tDW_AT_abstract_origin or case DW_AT_specification to override linkage\n\tname.\n\nFrom-SVN: r267963", "tree": {"sha": "2bc7148a6377ff8cff86a81fd15244165864d1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bc7148a6377ff8cff86a81fd15244165864d1ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df1de0641543701e6cde7c47e1da594eed83325e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1de0641543701e6cde7c47e1da594eed83325e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df1de0641543701e6cde7c47e1da594eed83325e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1de0641543701e6cde7c47e1da594eed83325e/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a60361196767f7ebf9bd088661512822d06aa66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a60361196767f7ebf9bd088661512822d06aa66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a60361196767f7ebf9bd088661512822d06aa66"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "a64537d4dd3ad315c3cf702145be462a9f13d16f", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1de0641543701e6cde7c47e1da594eed83325e/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1de0641543701e6cde7c47e1da594eed83325e/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=df1de0641543701e6cde7c47e1da594eed83325e", "patch": "@@ -1,3 +1,11 @@\n+2019-01-16  Tom de Vries  <tdevries@suse.de>\n+\n+\t* dwarf.c (read_referenced_name): Don't allow DW_AT_name to override any\n+\tname.\n+\t(read_function_entry): Same.  Don't allow name found via\n+\tDW_AT_abstract_origin or case DW_AT_specification to override linkage\n+\tname.\n+\n 2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR other/16615"}, {"sha": "af864d68b00ce152ef2317da5a65568a176adefe", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1de0641543701e6cde7c47e1da594eed83325e/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1de0641543701e6cde7c47e1da594eed83325e/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=df1de0641543701e6cde7c47e1da594eed83325e", "patch": "@@ -2151,18 +2151,25 @@ read_referenced_name (struct dwarf_data *ddata, struct unit *u,\n       switch (abbrev->attrs[i].name)\n \t{\n \tcase DW_AT_name:\n-\t  /* We prefer the linkage name if get one.  */\n+\t  /* Third name preference: don't override.  A name we found in some\n+\t     other way, will normally be more useful -- e.g., this name is\n+\t     normally not mangled.  */\n+\t  if (ret != NULL)\n+\t    break;\n \t  if (val.encoding == ATTR_VAL_STRING)\n \t    ret = val.u.string;\n \t  break;\n \n \tcase DW_AT_linkage_name:\n \tcase DW_AT_MIPS_linkage_name:\n+\t  /* First name preference: override all.  */\n \t  if (val.encoding == ATTR_VAL_STRING)\n \t    return val.u.string;\n \t  break;\n \n \tcase DW_AT_specification:\n+\t  /* Second name preference: override DW_AT_name, don't override\n+\t     DW_AT_linkage_name.  */\n \t  if (abbrev->attrs[i].form == DW_FORM_ref_addr\n \t      || abbrev->attrs[i].form == DW_FORM_ref_sig8)\n \t    {\n@@ -2315,6 +2322,7 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n       int highpc_is_relative;\n       uint64_t ranges;\n       int have_ranges;\n+      int have_linkage_name;\n \n       code = read_uleb128 (unit_buf);\n       if (code == 0)\n@@ -2351,6 +2359,7 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n       highpc_is_relative = 0;\n       ranges = 0;\n       have_ranges = 0;\n+      have_linkage_name = 0;\n       for (i = 0; i < abbrev->num_attrs; ++i)\n \t{\n \t  struct attr_val val;\n@@ -2399,6 +2408,10 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \n \t\tcase DW_AT_abstract_origin:\n \t\tcase DW_AT_specification:\n+\t\t  /* Second name preference: override DW_AT_name, don't override\n+\t\t     DW_AT_linkage_name.  */\n+\t\t  if (have_linkage_name)\n+\t\t    break;\n \t\t  if (abbrev->attrs[i].form == DW_FORM_ref_addr\n \t\t      || abbrev->attrs[i].form == DW_FORM_ref_sig8)\n \t\t    {\n@@ -2420,21 +2433,21 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t  break;\n \n \t\tcase DW_AT_name:\n+\t\t  /* Third name preference: don't override.  */\n+\t\t  if (function->name != NULL)\n+\t\t    break;\n \t\t  if (val.encoding == ATTR_VAL_STRING)\n-\t\t    {\n-\t\t      /* Don't override a name we found in some other\n-\t\t\t way, as it will normally be more\n-\t\t\t useful--e.g., this name is normally not\n-\t\t\t mangled.  */\n-\t\t      if (function->name == NULL)\n-\t\t\tfunction->name = val.u.string;\n-\t\t    }\n+\t\t    function->name = val.u.string;\n \t\t  break;\n \n \t\tcase DW_AT_linkage_name:\n \t\tcase DW_AT_MIPS_linkage_name:\n+\t\t  /* First name preference: override all.  */\n \t\t  if (val.encoding == ATTR_VAL_STRING)\n-\t\t    function->name = val.u.string;\n+\t\t    {\n+\t\t      function->name = val.u.string;\n+\t\t      have_linkage_name = 1;\n+\t\t    }\n \t\t  break;\n \n \t\tcase DW_AT_low_pc:"}]}