{"sha": "ed4c4348a5c602d11652d3b2b3f449122142d3dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ0YzQzNDhhNWM2MDJkMTE2NTJkM2IyYjNmNDQ5MTIyMTQyZDNkYw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1998-06-26T07:13:25Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1998-06-26T07:13:25Z"}, "message": "arm.h (SECONDARY_INPUT_RELOAD_CLASS): Only need a secondary reload if reloading a MEM.\n\n* arm.h (SECONDARY_INPUT_RELOAD_CLASS): Only need a secondary reload\nif reloading a MEM.\n* arm.h (arm_adjust_cost): Renamed bogus prototype from\narm_adjust_code.\n(bad_signed_byte_operand): Add prototype.\n* arm.c (arm_override_options): Make I unsigned.\n(const_ok_for_arm): Add casts to the constants.\n(load_multiple_operation): Don't redeclare elt in sub-block.\n(arm_gen_movstrqi): Delete external declaration of optimize.\n(gen_compare_reg): Declare parameter fp.\n* arm.c (final_prescan_insn): Only initialize scanbody if the insn\nhas a pattern.\n\nFrom-SVN: r20738", "tree": {"sha": "33c5377dca4a89bfccab7efe7f44b5a94bd144fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33c5377dca4a89bfccab7efe7f44b5a94bd144fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed4c4348a5c602d11652d3b2b3f449122142d3dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4c4348a5c602d11652d3b2b3f449122142d3dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4c4348a5c602d11652d3b2b3f449122142d3dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4c4348a5c602d11652d3b2b3f449122142d3dc/comments", "author": null, "committer": null, "parents": [{"sha": "3c303f52ac1d1a462c9dd285493c1c46850014b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c303f52ac1d1a462c9dd285493c1c46850014b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c303f52ac1d1a462c9dd285493c1c46850014b9"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "9ac7679cc5cf0190150d28b9607b5e30856159e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4c4348a5c602d11652d3b2b3f449122142d3dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4c4348a5c602d11652d3b2b3f449122142d3dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed4c4348a5c602d11652d3b2b3f449122142d3dc", "patch": "@@ -1,3 +1,20 @@\n+Fri Jun 26 06:58:54 1998  Richard Earnshaw (rearnsha@arm.com)\n+\n+\t* arm.h (SECONDARY_INPUT_RELOAD_CLASS): Only need a secondary reload\n+\tif reloading a MEM.\n+\n+\t* arm.h (arm_adjust_cost): Renamed bogus prototype from \n+\tarm_adjust_code.\n+\t(bad_signed_byte_operand): Add prototype.\n+\t* arm.c (arm_override_options): Make I unsigned.\n+\t(const_ok_for_arm): Add casts to the constants.\t\n+\t(load_multiple_operation): Don't redeclare elt in sub-block.\n+\t(arm_gen_movstrqi): Delete external declaration of optimize.\n+\t(gen_compare_reg): Declare parameter fp.\n+\n+\t* arm.c (final_prescan_insn): Only initialize scanbody if the insn\n+\thas a pattern.\n+\n Fri Jun 26 09:31:24 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alpha.c: Include system.h and toplev.h."}, {"sha": "947b65d785129f23f34198e53cc2610fbd97258e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4c4348a5c602d11652d3b2b3f449122142d3dc/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4c4348a5c602d11652d3b2b3f449122142d3dc/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ed4c4348a5c602d11652d3b2b3f449122142d3dc", "patch": "@@ -221,7 +221,7 @@ arm_override_options ()\n {\n   int arm_thumb_aware = 0;\n   int flags = 0;\n-  int i;\n+  unsigned i;\n   struct arm_cpu_select *ptr;\n   static struct cpu_default {\n     int cpu;\n@@ -406,13 +406,14 @@ int\n const_ok_for_arm (i)\n      HOST_WIDE_INT i;\n {\n-  unsigned HOST_WIDE_INT mask = ~0xFF;\n+  unsigned HOST_WIDE_INT mask = ~(unsigned HOST_WIDE_INT)0xFF;\n \n   /* For machines with >32 bit HOST_WIDE_INT, the bits above bit 31 must \n      be all zero, or all one.  */\n   if ((i & ~(unsigned HOST_WIDE_INT) 0xffffffff) != 0\n       && ((i & ~(unsigned HOST_WIDE_INT) 0xffffffff) \n-\t  != (((HOST_WIDE_INT) -1) & ~(unsigned HOST_WIDE_INT) 0xffffffff)))\n+\t  != ((~(unsigned HOST_WIDE_INT) 0)\n+\t      & ~(unsigned HOST_WIDE_INT) 0xffffffff)))\n     return FALSE;\n   \n   /* Fast return for 0 and powers of 2 */\n@@ -426,7 +427,7 @@ const_ok_for_arm (i)\n       mask =\n \t  (mask << 2) | ((mask & (unsigned HOST_WIDE_INT) 0xffffffff)\n \t\t\t >> (32 - 2)) | ~((unsigned HOST_WIDE_INT) 0xffffffff);\n-    } while (mask != ~0xFF);\n+    } while (mask != ~(unsigned HOST_WIDE_INT) 0xFF);\n \n   return FALSE;\n }\n@@ -2293,7 +2294,7 @@ load_multiple_operation (op, mode)\n \n   for (; i < count; i++)\n     {\n-      rtx elt = XVECEXP (op, 0, i);\n+      elt = XVECEXP (op, 0, i);\n \n       if (GET_CODE (elt) != SET\n           || GET_CODE (SET_DEST (elt)) != REG\n@@ -2922,7 +2923,6 @@ arm_gen_movstrqi (operands)\n   rtx part_bytes_reg = NULL;\n   rtx mem;\n   int dst_unchanging_p, dst_in_struct_p, src_unchanging_p, src_in_struct_p;\n-  extern int optimize;\n \n   if (GET_CODE (operands[2]) != CONST_INT\n       || GET_CODE (operands[3]) != CONST_INT\n@@ -3294,6 +3294,7 @@ rtx\n gen_compare_reg (code, x, y, fp)\n      enum rtx_code code;\n      rtx x, y;\n+     int fp;\n {\n   enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n   rtx cc_reg = gen_rtx (REG, mode, 24);\n@@ -5727,8 +5728,6 @@ final_prescan_insn (insn, opvec, noperands)\n \t  if (!this_insn)\n \t    break;\n \n-\t  scanbody = PATTERN (this_insn);\n-\n \t  switch (GET_CODE (this_insn))\n \t    {\n \t    case CODE_LABEL:\n@@ -5803,8 +5802,9 @@ final_prescan_insn (insn, opvec, noperands)\n       \t      /* If this is an unconditional branch to the same label, succeed.\n \t\t If it is to another label, do nothing.  If it is conditional,\n \t\t fail.  */\n-\t      /* XXX Probably, the test for the SET and the PC are unnecessary. */\n+\t      /* XXX Probably, the tests for SET and the PC are unnecessary. */\n \n+\t      scanbody = PATTERN (this_insn);\n \t      if (GET_CODE (scanbody) == SET\n \t\t  && GET_CODE (SET_DEST (scanbody)) == PC)\n \t\t{\n@@ -5839,6 +5839,7 @@ final_prescan_insn (insn, opvec, noperands)\n \t    case INSN:\n \t      /* Instructions using or affecting the condition codes make it\n \t\t fail.  */\n+\t      scanbody = PATTERN (this_insn);\n \t      if ((GET_CODE (scanbody) == SET\n \t\t   || GET_CODE (scanbody) == PARALLEL)\n \t\t  && get_attr_conds (this_insn) != CONDS_NOCOND)"}, {"sha": "fae70521be71ed1fdaf5b4bc2a9cdc16080bf8a5", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4c4348a5c602d11652d3b2b3f449122142d3dc/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4c4348a5c602d11652d3b2b3f449122142d3dc/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ed4c4348a5c602d11652d3b2b3f449122142d3dc", "patch": "@@ -873,8 +873,11 @@ enum reg_class\n    ? GENERAL_REGS : NO_REGS)\n \n /* If we need to load shorts byte-at-a-time, then we need a scratch. */\n-#define SECONDARY_INPUT_RELOAD_CLASS(CLASS,MODE,X)\t\t\t\\\n-  (((MODE) == HImode && TARGET_SHORT_BY_BYTES && true_regnum (X) == -1)\t\\\n+#define SECONDARY_INPUT_RELOAD_CLASS(CLASS,MODE,X)\t\t\\\n+  (((MODE) == HImode && TARGET_SHORT_BY_BYTES\t\t\t\\\n+    && (GET_CODE (X) == MEM\t\t\t\t\t\\\n+\t|| ((GET_CODE (X) == REG || GET_CODE (X) == SUBREG)\t\\\n+\t    && true_regnum (X) == -1)))\t\t\t\t\\\n    ? GENERAL_REGS : NO_REGS)\n \n /* Try a machine-dependent way of reloading an illegitimate address\n@@ -2028,7 +2031,7 @@ struct rtx_def *legitimize_pic_address (/* struct rtx_def *,\n int is_pic (/* struct rtx_def * */);\n void arm_finalize_pic (/* void */);\n int arm_rtx_costs (/* struct rtx_def *, enum rtx_code, enum rtx_code */);\n-int arm_adjust_code (/* struct rtx_def *, struct rtx_def *, \n+int arm_adjust_cost (/* struct rtx_def *, struct rtx_def *, \n \t\t\tstruct rtx_def *, int */);\n int const_double_rtx_ok_for_fpu (/* struct rtx_def * */);\n int neg_const_double_rtx_ok_for_fpu (/* struct rtx_def * */);\n@@ -2042,6 +2045,7 @@ int arm_add_operand (/* struct rtx_def *, enum machine_mode */);\n int arm_not_operand (/* struct rtx_def *, enum machine_mode */);\n int offsettable_memory_operand (/* struct rtx_def *, enum machine_mode */);\n int alignable_memory_operand (/* struct rtx_def *, enum machine_mode */);\n+int bad_signed_byte_operand (/* struct rtx_def *, enum machine_mode */);\n int fpu_rhs_operand (/* struct rtx_def *, enum machine_mode */);\n int fpu_add_operand (/* struct rtx_def *, enum machine_mode */);\n int power_of_two_operand (/* struct rtx_def *, enum machine_mode */);"}]}