{"sha": "4ac8340c316fb9f22630f419498847e0c6baf2cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFjODM0MGMzMTZmYjlmMjI2MzBmNDE5NDk4ODQ3ZTBjNmJhZjJjYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-18T03:29:04Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-18T03:29:04Z"}, "message": "calls.c (expand_call): Update comments.\n\n\t* calls.c (expand_call): Update comments.\n\t* system.h (PRETEND_OUTGOING_VARARGS_NAMED): Poison.\n\t* targhooks.c: Do not refer to PRETEND_OUTGOING_VARARGS_NAMED.\n\nFrom-SVN: r74770", "tree": {"sha": "9d2bd76e18f5fbed09b4d35fad46609603fa1cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d2bd76e18f5fbed09b4d35fad46609603fa1cf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ac8340c316fb9f22630f419498847e0c6baf2cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac8340c316fb9f22630f419498847e0c6baf2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ac8340c316fb9f22630f419498847e0c6baf2cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac8340c316fb9f22630f419498847e0c6baf2cb/comments", "author": null, "committer": null, "parents": [{"sha": "b0656d8b259f9035873700b7fc657f495044b75d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0656d8b259f9035873700b7fc657f495044b75d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0656d8b259f9035873700b7fc657f495044b75d"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "ce2fa51b499b5b19c3317b16b8d561bc70c7ca9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac8340c316fb9f22630f419498847e0c6baf2cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac8340c316fb9f22630f419498847e0c6baf2cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ac8340c316fb9f22630f419498847e0c6baf2cb", "patch": "@@ -1,3 +1,9 @@\n+2003-12-17  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* calls.c (expand_call): Update comments.\n+\t* system.h (PRETEND_OUTGOING_VARARGS_NAMED): Poison.\n+\t* targhooks.c: Do not refer to PRETEND_OUTGOING_VARARGS_NAMED.\n+\n 2003-12-17  James E Wilson  <wilson@specifixinc.com>\n \t    Roger Sayle  <roger@eyesopen.com>\n \t"}, {"sha": "b89ec5279b138d34b08d9081d8701645f0cf9a78", "filename": "gcc/calls.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac8340c316fb9f22630f419498847e0c6baf2cb/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac8340c316fb9f22630f419498847e0c6baf2cb/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=4ac8340c316fb9f22630f419498847e0c6baf2cb", "patch": "@@ -2413,15 +2413,16 @@ expand_call (tree exp, rtx target, int ignore)\n      (If no anonymous args follow, the result of list_length is actually\n      one too large.  This is harmless.)\n \n-     If PRETEND_OUTGOING_VARARGS_NAMED is set and STRICT_ARGUMENT_NAMING is\n-     zero, this machine will be able to place unnamed args that were\n-     passed in registers into the stack.  So treat all args as named.\n-     This allows the insns emitting for a specific argument list to be\n-     independent of the function declaration.\n-\n-     If PRETEND_OUTGOING_VARARGS_NAMED is not set, we do not have any\n-     reliable way to pass unnamed args in registers, so we must force\n-     them into memory.  */\n+     If targetm.calls.pretend_outgoing_varargs_named() returns\n+     nonzero, and STRICT_ARGUMENT_NAMING is zero, this machine will be\n+     able to place unnamed args that were passed in registers into the\n+     stack.  So treat all args as named.  This allows the insns\n+     emitting for a specific argument list to be independent of the\n+     function declaration.\n+\n+     If targetm.calls.pretend_outgoing_varargs_named() returns zero,\n+     we do not have any reliable way to pass unnamed args in\n+     registers, so we must force them into memory.  */\n \n   if ((targetm.calls.strict_argument_naming (&args_so_far)\n        || ! targetm.calls.pretend_outgoing_varargs_named (&args_so_far))"}, {"sha": "6206ad1df8223f074bc468303118fc805f501737", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac8340c316fb9f22630f419498847e0c6baf2cb/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac8340c316fb9f22630f419498847e0c6baf2cb/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=4ac8340c316fb9f22630f419498847e0c6baf2cb", "patch": "@@ -594,7 +594,8 @@ typedef char _Bool;\n \tASM_SIMPLIFY_DWARF_ADDR INIT_TARGET_OPTABS INIT_SUBTARGET_OPTABS \\\n \tINIT_GOFAST_OPTABS MULSI3_LIBCALL MULDI3_LIBCALL DIVSI3_LIBCALL \\\n \tDIVDI3_LIBCALL UDIVSI3_LIBCALL UDIVDI3_LIBCALL MODSI3_LIBCALL\t\\\n-\tMODDI3_LIBCALL UMODSI3_LIBCALL UMODDI3_LIBCALL BUILD_VA_LIST_TYPE\n+\tMODDI3_LIBCALL UMODSI3_LIBCALL UMODDI3_LIBCALL BUILD_VA_LIST_TYPE \\\n+\tPRETEND_OUTGOING_VARARGS_NAMED\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "18d3be3ad0c4bfdf3ed714d5258b37e7a73d0bbd", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac8340c316fb9f22630f419498847e0c6baf2cb/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac8340c316fb9f22630f419498847e0c6baf2cb/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=4ac8340c316fb9f22630f419498847e0c6baf2cb", "patch": "@@ -185,15 +185,11 @@ default_strict_argument_naming (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n bool\n default_pretend_outgoing_varargs_named(CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n {\n-#ifdef PRETEND_OUTGOING_VARARGS_NAMED\n-  return PRETEND_OUTGOING_VARARGS_NAMED;\n-#else\n #ifdef SETUP_INCOMING_VARARGS\n   return 1;\n #else\n   return (targetm.calls.setup_incoming_varargs != default_setup_incoming_varargs);\n #endif\n-#endif\n }\n \n /* Generic hook that takes a CUMULATIVE_ARGS pointer and returns true.  */"}]}