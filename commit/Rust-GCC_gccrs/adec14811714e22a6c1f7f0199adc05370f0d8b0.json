{"sha": "adec14811714e22a6c1f7f0199adc05370f0d8b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRlYzE0ODExNzE0ZTIyYTZjMWY3ZjAxOTlhZGMwNTM3MGYwZDhiMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-07T12:02:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-07T14:45:14Z"}, "message": "libstdc++: Constrain three-way comparison for std::optional [PR 98842]\n\nThe operator<=>(const optional<T>&, const U&) operator is supposed to be\nconstrained with three_way_comparable_with<U, T> so that it can only be\nused when T and U are weakly-equality-comparable and also three-way\ncomparable.\n\nAdding that constrain completely breaks std::optional comparisons,\nbecause it causes constraint recursion. To avoid that, an additional\ncheck that U is not a specialization of std::optional is needed. That\nappears to be a defect in the standard and should be reported to LWG.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/98842\n\t* include/std/optional (operator<=>(const optional<T>& const U&)):\n\tAdd missing constraint and add workaround for template\n\trecursion.\n\t* testsuite/20_util/optional/relops/three_way.cc: Check that\n\ttype without equality comparison cannot be compared when wrapped\n\tin std::optional.", "tree": {"sha": "acb3e4c20ae53a19daa2b81b7d86e2b619b934d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acb3e4c20ae53a19daa2b81b7d86e2b619b934d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adec14811714e22a6c1f7f0199adc05370f0d8b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adec14811714e22a6c1f7f0199adc05370f0d8b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adec14811714e22a6c1f7f0199adc05370f0d8b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adec14811714e22a6c1f7f0199adc05370f0d8b0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0d1a675e0f621fc12c7a9db47446ae38289408a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d1a675e0f621fc12c7a9db47446ae38289408a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0d1a675e0f621fc12c7a9db47446ae38289408a"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "415f8c49ef42d87290989aee894eef3be925fb08", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adec14811714e22a6c1f7f0199adc05370f0d8b0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adec14811714e22a6c1f7f0199adc05370f0d8b0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=adec14811714e22a6c1f7f0199adc05370f0d8b0", "patch": "@@ -1234,7 +1234,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return !__rhs || __lhs >= *__rhs; }\n \n #ifdef __cpp_lib_three_way_comparison\n+  template<typename _Tp>\n+    inline constexpr bool __is_optional_v = false;\n+  template<typename _Tp>\n+    inline constexpr bool __is_optional_v<optional<_Tp>> = true;\n+\n   template<typename _Tp, typename _Up>\n+    requires (!__is_optional_v<_Up>)\n+      && three_way_comparable_with<_Tp, _Up>\n     constexpr compare_three_way_result_t<_Tp, _Up>\n     operator<=>(const optional<_Tp>& __x, const _Up& __v)\n     { return bool(__x) ? *__x <=> __v : strong_ordering::less; }"}, {"sha": "5fc5eec5abf59db4d2379dc5a5bb758398a8c959", "filename": "libstdc++-v3/testsuite/20_util/optional/relops/three_way.cc", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adec14811714e22a6c1f7f0199adc05370f0d8b0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2Fthree_way.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adec14811714e22a6c1f7f0199adc05370f0d8b0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2Fthree_way.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2Fthree_way.cc?ref=adec14811714e22a6c1f7f0199adc05370f0d8b0", "patch": "@@ -15,8 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++2a\" }\n-// { dg-do compile { target c++2a } }\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n \n #include <optional>\n \n@@ -74,3 +74,21 @@ test02()\n   static_assert( nullopt <= O{} );\n   static_assert( nullopt <= O{1} );\n }\n+\n+template<typename T>\n+  concept has_spaceship = requires (const T& t) { t <=> t; };\n+\n+void\n+test03()\n+{\n+  struct E\n+  {\n+    auto operator<=>(const E&) const { return std::strong_ordering::equal; }\n+  };\n+  static_assert( !std::three_way_comparable<E> ); // not equality comparable\n+  using O = std::optional<E>;\n+  static_assert( !std::three_way_comparable<O> );\n+  static_assert( ! has_spaceship<O> ); // PR libstdc++/98842\n+  struct U : O { };\n+  static_assert( ! has_spaceship<U> );\n+}"}]}