{"sha": "e58703e2c1b09d39714740e00933d32df965de32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU4NzAzZTJjMWIwOWQzOTcxNDc0MGUwMDkzM2QzMmRmOTY1ZGUzMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-16T11:07:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-16T11:07:23Z"}, "message": "[AArch64] Add sign and zero extension for partial SVE modes\n\nThis patch adds support for extending from partial SVE modes\nto both full vector modes and wider partial modes.\n\nSome tests now need --param aarch64-sve-compare-costs=0 to force\nthe original full-vector code.\n\n2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_HSDI): New mode iterator.\n\t(narrower_mask): Handle VNx4HI, VNx2HI and VNx2SI.\n\t* config/aarch64/aarch64-sve.md\n\t(<ANY_EXTEND:optab><SVE_PARTIAL_I:mode><SVE_HSDI:mode>2): New pattern.\n\t(*<ANY_EXTEND:optab><SVE_PARTIAL_I:mode><SVE_HSDI:mode>2): Likewise.\n\t(@aarch64_pred_sxt<SVE_FULL_HSDI:mode><SVE_PARTIAL_I:mode>): Update\n\tcomment.  Avoid new narrower_mask ambiguity.\n\t(@aarch64_cond_sxt<SVE_FULL_HSDI:mode><SVE_PARTIAL_I:mode>): Likewise.\n\t(*cond_uxt<mode>_2): Update comment.\n\t(*cond_uxt<mode>_any): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cost_model_1.c: Expect the loop to be\n\tvectorized with bytes stored in 32-bit containers.\n\t* gcc.target/aarch64/sve/extend_1.c: New test.\n\t* gcc.target/aarch64/sve/extend_2.c: New test.\n\t* gcc.target/aarch64/sve/extend_3.c: New test.\n\t* gcc.target/aarch64/sve/extend_4.c: New test.\n\t* gcc.target/aarch64/sve/load_const_offset_3.c: Add\n\t--param aarch64-sve-compare-costs=0.\n\t* gcc.target/aarch64/sve/mask_struct_store_1.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_store_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_store_2.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_store_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_unsigned_1.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_unsigned_1_run.c: Likewise.\n\nFrom-SVN: r278342", "tree": {"sha": "40e761cc115f68b373d1f519ff642533d4c20111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40e761cc115f68b373d1f519ff642533d4c20111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e58703e2c1b09d39714740e00933d32df965de32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58703e2c1b09d39714740e00933d32df965de32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58703e2c1b09d39714740e00933d32df965de32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58703e2c1b09d39714740e00933d32df965de32/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc68f7c2dabbf9d90ebe025a11f6d6ed5d49a113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc68f7c2dabbf9d90ebe025a11f6d6ed5d49a113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc68f7c2dabbf9d90ebe025a11f6d6ed5d49a113"}], "stats": {"total": 251, "additions": 220, "deletions": 31}, "files": [{"sha": "cccc042e8bf3560441fa4f17038759595796a673", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -1,3 +1,16 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_HSDI): New mode iterator.\n+\t(narrower_mask): Handle VNx4HI, VNx2HI and VNx2SI.\n+\t* config/aarch64/aarch64-sve.md\n+\t(<ANY_EXTEND:optab><SVE_PARTIAL_I:mode><SVE_HSDI:mode>2): New pattern.\n+\t(*<ANY_EXTEND:optab><SVE_PARTIAL_I:mode><SVE_HSDI:mode>2): Likewise.\n+\t(@aarch64_pred_sxt<SVE_FULL_HSDI:mode><SVE_PARTIAL_I:mode>): Update\n+\tcomment.  Avoid new narrower_mask ambiguity.\n+\t(@aarch64_cond_sxt<SVE_FULL_HSDI:mode><SVE_PARTIAL_I:mode>): Likewise.\n+\t(*cond_uxt<mode>_2): Update comment.\n+\t(*cond_uxt<mode>_any): Likewise.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-modes.def: Define partial SVE vector"}, {"sha": "40aeb95f1f58f44d8d26480a143d5c15b0b20df5", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -71,8 +71,7 @@\n ;; == Unary arithmetic\n ;; ---- [INT] General unary arithmetic corresponding to rtx codes\n ;; ---- [INT] General unary arithmetic corresponding to unspecs\n-;; ---- [INT] Sign extension\n-;; ---- [INT] Zero extension\n+;; ---- [INT] Sign and zero extension\n ;; ---- [INT] Logical inverse\n ;; ---- [FP<-INT] General unary arithmetic that maps to unspecs\n ;; ---- [FP] General unary arithmetic corresponding to unspecs\n@@ -2812,15 +2811,44 @@\n )\n \n ;; -------------------------------------------------------------------------\n-;; ---- [INT] Sign extension\n+;; ---- [INT] Sign and zero extension\n ;; -------------------------------------------------------------------------\n ;; Includes:\n ;; - SXTB\n ;; - SXTH\n ;; - SXTW\n+;; - UXTB\n+;; - UXTH\n+;; - UXTW\n ;; -------------------------------------------------------------------------\n \n-;; Predicated SXT[BHW].\n+;; Unpredicated sign and zero extension from a narrower mode.\n+(define_expand \"<optab><SVE_PARTIAL_I:mode><SVE_HSDI:mode>2\"\n+  [(set (match_operand:SVE_HSDI 0 \"register_operand\")\n+\t(unspec:SVE_HSDI\n+\t  [(match_dup 2)\n+\t   (ANY_EXTEND:SVE_HSDI\n+\t     (match_operand:SVE_PARTIAL_I 1 \"register_operand\"))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE && (~<SVE_HSDI:narrower_mask> & <SVE_PARTIAL_I:self_mask>) == 0\"\n+  {\n+    operands[2] = aarch64_ptrue_reg (<SVE_HSDI:VPRED>mode);\n+  }\n+)\n+\n+;; Predicated sign and zero extension from a narrower mode.\n+(define_insn \"*<optab><SVE_PARTIAL_I:mode><SVE_HSDI:mode>2\"\n+  [(set (match_operand:SVE_HSDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_HSDI\n+\t  [(match_operand:<SVE_HSDI:VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (ANY_EXTEND:SVE_HSDI\n+\t     (match_operand:SVE_PARTIAL_I 2 \"register_operand\" \"w\"))]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE && (~<SVE_HSDI:narrower_mask> & <SVE_PARTIAL_I:self_mask>) == 0\"\n+  \"<su>xt<SVE_PARTIAL_I:Vesize>\\t%0.<SVE_HSDI:Vetype>, %1/m, %2.<SVE_HSDI:Vetype>\"\n+)\n+\n+;; Predicated truncate-and-sign-extend operations.\n (define_insn \"@aarch64_pred_sxt<SVE_FULL_HSDI:mode><SVE_PARTIAL_I:mode>\"\n   [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_FULL_HSDI\n@@ -2829,11 +2857,12 @@\n \t     (truncate:SVE_PARTIAL_I\n \t       (match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"w\")))]\n \t  UNSPEC_PRED_X))]\n-  \"TARGET_SVE && (~<narrower_mask> & <self_mask>) == 0\"\n+  \"TARGET_SVE\n+   && (~<SVE_FULL_HSDI:narrower_mask> & <SVE_PARTIAL_I:self_mask>) == 0\"\n   \"sxt<SVE_PARTIAL_I:Vesize>\\t%0.<SVE_FULL_HSDI:Vetype>, %1/m, %2.<SVE_FULL_HSDI:Vetype>\"\n )\n \n-;; Predicated SXT[BHW] with merging.\n+;; Predicated truncate-and-sign-extend operations with merging.\n (define_insn \"@aarch64_cond_sxt<SVE_FULL_HSDI:mode><SVE_PARTIAL_I:mode>\"\n   [(set (match_operand:SVE_FULL_HSDI 0 \"register_operand\" \"=w, ?&w, ?&w\")\n \t(unspec:SVE_FULL_HSDI\n@@ -2843,25 +2872,20 @@\n \t       (match_operand:SVE_FULL_HSDI 2 \"register_operand\" \"w, w, w\")))\n \t   (match_operand:SVE_FULL_HSDI 3 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n \t  UNSPEC_SEL))]\n-  \"TARGET_SVE && (~<narrower_mask> & <self_mask>) == 0\"\n+  \"TARGET_SVE\n+   && (~<SVE_FULL_HSDI:narrower_mask> & <SVE_PARTIAL_I:self_mask>) == 0\"\n   \"@\n    sxt<SVE_PARTIAL_I:Vesize>\\t%0.<SVE_FULL_HSDI:Vetype>, %1/m, %2.<SVE_FULL_HSDI:Vetype>\n    movprfx\\t%0.<SVE_FULL_HSDI:Vetype>, %1/z, %2.<SVE_FULL_HSDI:Vetype>\\;sxt<SVE_PARTIAL_I:Vesize>\\t%0.<SVE_FULL_HSDI:Vetype>, %1/m, %2.<SVE_FULL_HSDI:Vetype>\n    movprfx\\t%0, %3\\;sxt<SVE_PARTIAL_I:Vesize>\\t%0.<SVE_FULL_HSDI:Vetype>, %1/m, %2.<SVE_FULL_HSDI:Vetype>\"\n   [(set_attr \"movprfx\" \"*,yes,yes\")]\n )\n \n-;; -------------------------------------------------------------------------\n-;; ---- [INT] Zero extension\n-;; -------------------------------------------------------------------------\n-;; Includes:\n-;; - UXTB\n-;; - UXTH\n-;; - UXTW\n-;; -------------------------------------------------------------------------\n-\n-;; Match UXT[BHW] as a conditional AND of a constant, merging with the\n+;; Predicated truncate-and-zero-extend operations, merging with the\n ;; first input.\n+;;\n+;; The canonical form of this operation is an AND of a constant rather\n+;; than (zero_extend (truncate ...)).\n (define_insn \"*cond_uxt<mode>_2\"\n   [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n \t(unspec:SVE_FULL_I\n@@ -2878,7 +2902,7 @@\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n-;; Match UXT[BHW] as a conditional AND of a constant, merging with an\n+;; Predicated truncate-and-zero-extend operations, merging with an\n ;; independent value.\n ;;\n ;; The earlyclobber isn't needed for the first alternative, but omitting"}, {"sha": "06e91eb12c543df88c2c1e14338e435bcc763a53", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -359,6 +359,11 @@\n \t\t\t     VNx4SI VNx2SI\n \t\t\t     VNx2DI])\n \n+;; SVE integer vector modes whose elements are 16 bits or wider.\n+(define_mode_iterator SVE_HSDI [VNx8HI VNx4HI VNx2HI\n+\t\t\t\tVNx4SI VNx2SI\n+\t\t\t\tVNx2DI])\n+\n ;; Modes involved in extending or truncating SVE data, for 8 elements per\n ;; 128-bit block.\n (define_mode_iterator VNx8_NARROW [VNx8QI])\n@@ -1364,9 +1369,10 @@\n \t\t\t     (VNx2HI \"0x22\")\n \t\t\t     (VNx2SI \"0x24\")])\n \n-;; For full vector modes, the mask of narrower modes, encoded as above.\n-(define_mode_attr narrower_mask [(VNx8HI \"0x81\")\n-\t\t\t\t (VNx4SI \"0x43\")\n+;; For SVE_HSDI vector modes, the mask of narrower modes, encoded as above.\n+(define_mode_attr narrower_mask [(VNx8HI \"0x81\") (VNx4HI \"0x41\")\n+\t\t\t\t (VNx2HI \"0x21\")\n+\t\t\t\t (VNx4SI \"0x43\") (VNx2SI \"0x23\")\n \t\t\t\t (VNx2DI \"0x27\")])\n \n ;; The constraint to use for an SVE [SU]DOT, FMUL, FMLA or FMLS lane index."}, {"sha": "6a753a28b5ec378e2c10c16723b05dc126eea802", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -1,3 +1,20 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cost_model_1.c: Expect the loop to be\n+\tvectorized with bytes stored in 32-bit containers.\n+\t* gcc.target/aarch64/sve/extend_1.c: New test.\n+\t* gcc.target/aarch64/sve/extend_2.c: New test.\n+\t* gcc.target/aarch64/sve/extend_3.c: New test.\n+\t* gcc.target/aarch64/sve/extend_4.c: New test.\n+\t* gcc.target/aarch64/sve/load_const_offset_3.c: Add\n+\t--param aarch64-sve-compare-costs=0.\n+\t* gcc.target/aarch64/sve/mask_struct_store_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_store_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_store_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_store_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_unsigned_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_unsigned_1_run.c: Likewise.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/mixed_size_1.c: New test."}, {"sha": "b4cc1c4295942dc8dab9ba13591e5f6d7f873288", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_1.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details\" } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n \n void\n f (unsigned int *restrict x, unsigned int *restrict y,\n@@ -8,5 +8,4 @@ f (unsigned int *restrict x, unsigned int *restrict y,\n     x[i] = x[i] + y[i] + z[i];\n }\n \n-/* { dg-final { scan-tree-dump \"not vectorized: estimated iteration count too small\" vect } } */\n-/* { dg-final { scan-tree-dump \"vectorized 0 loops\" vect } } */\n+/* { dg-final { scan-assembler {\\tld1b\\tz[0-9]+\\.s, p[0-7]/z, \\[x2\\]\\n} } } */"}, {"sha": "c656e3682756e9e0939f805b0f8f5c95a7ca38f6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extend_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_1.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE1, TYPE2)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict dst, TYPE1 *restrict src1,\t\\\n+\t\t       TYPE2 *restrict src2, int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dst[i] += src1[i] + (TYPE2) (src2[i] + 1);\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (uint16_t, uint8_t) \\\n+  T (uint32_t, uint8_t) \\\n+  T (uint64_t, uint8_t) \\\n+  T (uint32_t, uint16_t) \\\n+  T (uint64_t, uint16_t) \\\n+  T (uint64_t, uint32_t)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.h,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuxtb\\tz[0-9]+\\.h,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtb\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtb\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxth\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxth\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtw\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "c270e64a0d23e8c427461aa47ffee04ce6f4f29c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extend_2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_2.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE1, TYPE2)\t\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict dst, TYPE1 *restrict src1,\t\\\n+\t\t       TYPE2 *restrict src2, int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dst[i] += src1[i] + (TYPE2) (src2[i] + 1);\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t) \\\n+  T (int32_t, int8_t) \\\n+  T (int64_t, int8_t) \\\n+  T (int32_t, int16_t) \\\n+  T (int64_t, int16_t) \\\n+  T (int64_t, int32_t)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.h,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsxtb\\tz[0-9]+\\.h,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxtb\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxtb\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxth\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxth\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxtw\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "8ab1701ec85bab05ac38b800a6164917eea9127a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extend_3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_3.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f (uint64_t *dst, uint32_t *restrict src1, uint16_t *restrict src2,\n+   uint8_t *restrict src3)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (uint32_t) (src1[i] + (uint16_t) (src2[i]\n+\t\t\t\t\t\t+ (uint8_t) (src3[i] + 1)));\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuxtb\\tz[0-9]+\\.h,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxth\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuxtw\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "198c5e4d9b88e64646dfe4511cd2af24e662865c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extend_4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextend_4.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=512\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f (int64_t *dst, int32_t *restrict src1, int16_t *restrict src2,\n+   int8_t *restrict src3)\n+{\n+  for (int i = 0; i < 7; ++i)\n+    dst[i] += (int32_t) (src1[i] + (int16_t) (src2[i]\n+\t\t\t\t\t      + (int8_t) (src3[i] + 1)));\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsxtb\\tz[0-9]+\\.h,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxth\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsxtw\\tz[0-9]+\\.d,} 1 } } */"}, {"sha": "5b306f793335546c116090f2245b19159d1fc58d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_const_offset_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_3.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize -save-temps -msve-vector-bits=256\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -save-temps -msve-vector-bits=256 --param aarch64-sve-compare-costs=0\" } */\n \n #include \"load_const_offset_2.c\"\n "}, {"sha": "a75a694f9c38cf17675263f98d91a40c5e591189", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_store_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_1.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "2764d75c8e0a50bf41ce7126459824172ab97f88", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_store_1_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_1_run.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --param aarch64-sve-compare-costs=0\" } */\n \n #include \"mask_struct_store_1.c\"\n "}, {"sha": "0fd35f2ff52474e8e54324de0ca482fec0de51d0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_store_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_2.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "54cfaec36a9530bebe5f8665bff4036aae668e7b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_store_2_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_store_2_run.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --param aarch64-sve-compare-costs=0\" } */\n \n #include \"mask_struct_store_2.c\"\n "}, {"sha": "c4a022b84d35ee7ece1c8c979bbcb2561630082c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_unsigned_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -fno-inline\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-inline --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "6ee7e92a5167446f1b8c50a5787d62cab80583d6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_unsigned_1_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58703e2c1b09d39714740e00933d32df965de32/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1_run.c?ref=e58703e2c1b09d39714740e00933d32df965de32", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n-/* { dg-options \"-O2 -ftree-vectorize -fno-inline\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-inline --param aarch64-sve-compare-costs=0\" } */\n \n #include \"unpack_unsigned_1.c\"\n "}]}