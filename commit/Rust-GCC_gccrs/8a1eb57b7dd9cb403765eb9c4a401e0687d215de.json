{"sha": "8a1eb57b7dd9cb403765eb9c4a401e0687d215de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGExZWI1N2I3ZGQ5Y2I0MDM3NjVlYjljNGE0MDFlMDY4N2QyMTVkZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-11-12T07:30:05Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-11-12T07:30:05Z"}, "message": "re PR middle-end/41930 (cc1 SEGV compiling maxval_r16.c)\n\n\tPR middle-end/41930\n\t* simplify-rtx.c (simplify_replace_fn_rtx) <case 'e'>: Skip\n\tprocessing if XEXP (x, i) is NULL.\n\nFrom-SVN: r154116", "tree": {"sha": "9b992f0744c5928eb8918d446171b3cfd011a7c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b992f0744c5928eb8918d446171b3cfd011a7c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a1eb57b7dd9cb403765eb9c4a401e0687d215de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a1eb57b7dd9cb403765eb9c4a401e0687d215de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a1eb57b7dd9cb403765eb9c4a401e0687d215de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a1eb57b7dd9cb403765eb9c4a401e0687d215de/comments", "author": null, "committer": null, "parents": [{"sha": "fcc993f6f58f66f6d34bf3de8da27bf9f34680c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc993f6f58f66f6d34bf3de8da27bf9f34680c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc993f6f58f66f6d34bf3de8da27bf9f34680c7"}], "stats": {"total": 107, "additions": 57, "deletions": 50}, "files": [{"sha": "0fe06ac7dfb18a4ad15e5d67d97bedf46936b210", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 45, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1eb57b7dd9cb403765eb9c4a401e0687d215de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1eb57b7dd9cb403765eb9c4a401e0687d215de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a1eb57b7dd9cb403765eb9c4a401e0687d215de", "patch": "@@ -1,3 +1,9 @@\n+2009-11-12 Uros Bizjak <ubizjak@gmail.com>\n+\n+\tPR middle-end/41930\n+\t* simplify-rtx.c (simplify_replace_fn_rtx) <case 'e'>: Skip\n+\tprocessing if XEXP (x, i) is NULL.\n+\n 2009-11-12  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa.c (function_and_variable_visibility): Verify that WEAK || COMMON\n@@ -43,17 +49,15 @@\n \n 2009-11-11  Kai Tietz  <kai.tietz@onevision.com>\n \n-\t* config/i386/cygming.h (HANDLE_PRAGMA_PUSH_POP_MACRO):\n-\tRemoved.\n+\t* config/i386/cygming.h (HANDLE_PRAGMA_PUSH_POP_MACRO): Removed.\n \t* c-pragma.c (def_pragma_macro_value): Likewise.\n \t(def_pragma_macro): Likewise.\n \t(pushed_macro_table): Likewise.\n-\t(HANDLE_PRAGMA_PUSH_POP_MACRO): Remove guarded\n-\tcode.\n-\t* doc/tm.texi (HANDLE_PRAGMA_PUSH_POP_MACRO):\n-\tRemoved.\n+\t(HANDLE_PRAGMA_PUSH_POP_MACRO): Remove guarded code.\n+\t* doc/tm.texi (HANDLE_PRAGMA_PUSH_POP_MACRO): Removed.\n \n 2009-11-11  Basile Starynkevitch  <basile@starynkevitch.net>\n+\n \t* doc/plugins.texi (Registering custom attributes): section\n \trenamed as (Registering custom attributes or pragmas).\n \tMentions custom attributes & pragmas, and c_register_pragma, with\n@@ -65,21 +69,21 @@\n \n 2009-11-11  Jon Beniston <jon@beniston.com>\n \n-        * config.gcc: Add lm32 elf and uclinux targets.\n-        * config/lm32: New directory.\n-        * config/lm32/lm32.c: New file.\n-        * config/lm32/lm32.h: New file.\n-        * config/lm32/lm32.md: New file.\n-        * config/lm32/lm32.opt: New file.\n-        * config/lm32/lm32-protos.h: New file.\n-        * config/lm32/constraints.md: New file.\n-        * config/lm32/predicates.md: New file.\n-        * config/lm32/sfp-machine.h: New file.\n-        * config/lm32/t-fprules-softfp: New file.\n-        * config/lm32/uclinux-elf.h: New file.\n-        * doc/invoke.texi: Document lm32 options. \n-        * doc/contrib.texi: Document lm32 porter.\n-        * doc/install.texi: Document lm32 targets.\n+\t* config.gcc: Add lm32 elf and uclinux targets.\n+\t* config/lm32: New directory.\n+\t* config/lm32/lm32.c: New file.\n+\t* config/lm32/lm32.h: New file.\n+\t* config/lm32/lm32.md: New file.\n+\t* config/lm32/lm32.opt: New file.\n+\t* config/lm32/lm32-protos.h: New file.\n+\t* config/lm32/constraints.md: New file.\n+\t* config/lm32/predicates.md: New file.\n+\t* config/lm32/sfp-machine.h: New file.\n+\t* config/lm32/t-fprules-softfp: New file.\n+\t* config/lm32/uclinux-elf.h: New file.\n+\t* doc/invoke.texi: Document lm32 options.\n+\t* doc/contrib.texi: Document lm32 porter.\n+\t* doc/install.texi: Document lm32 targets.\n \n 2009-11-11  Martin Jambor  <mjambor@suse.cz>\n \n@@ -173,8 +177,8 @@\n \t* gdbinit.in (pgq): New function for printing gimple sequence.\n \n 2009-11-09  Paul Brook  <paul@codesourcery.com>\n-\tDaniel Jacobowitz  <dan@codesourcery.com>\n-\tSandra Loosemore  <sandra@codesourcery.com>\n+\t    Daniel Jacobowitz  <dan@codesourcery.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/extend.texi (Half-Precision): Update wording to reflect\n \tthat there are now multiple -mfpu options that enable fp16\n@@ -188,9 +192,9 @@\n \twhen undesirable.\n \t(aapcs_vfp_is_return_candidate, aapcs_vfp_is_call_candidate,\n \taapcs_vfp_allocate_return_reg): Use use_vfp_abi.\n-        (arm_rtx_costs_1, arm_size_rtx_costs, arm_fastmul_rtx_costs,\n-        arm_9e_rtx_costs): Only expect double-precision operations if the FPU\n-        provides them.\n+\t(arm_rtx_costs_1, arm_size_rtx_costs, arm_fastmul_rtx_costs,\n+\tarm_9e_rtx_costs): Only expect double-precision operations if the FPU\n+\tprovides them.\n \t(coproc_secondary_reload_class): Reload HFmode via GENERAL_REGS if no\n \tNEON.\n \t(arm_print_operand): Handle 'p' modifier.\n@@ -202,8 +206,8 @@\n \tdoes not provide them.\n \t(arm_movdi_vfp, thumb2_movdi_vfp): Use fcpys to move\n \tdouble-precision values on a single-precision FPU.\n-        (movdf_vfp, thumb2_movdf_vfp): Likewise.  Use \"Dy\" for\n-        double-precision constants.\n+\t(movdf_vfp, thumb2_movdf_vfp): Likewise.  Use \"Dy\" for\n+\tdouble-precision constants.\n \t(movhf_vfp_neon): New pattern (was movhf_vfp).\n \t(movhf_vfp): Remove NEON instructions.\n \t* config/arm/constraints.md: Add new \"Dy\" constraint for\n@@ -403,7 +407,7 @@\n 2009-11-04  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n \t* df-scan.c (df-uses-record): Add case zero_extract of mem.\n-\t\n+\n 2009-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/10127\n@@ -423,11 +427,11 @@\n \t* config/i386/cpuid.h (bit_LWP): Define LWP bit.\n \t* config/i386/x86intrin.h: Add LWP check and lwpintrin.h.\n \t* config/i386/i386-c.c (ix86_target_macros_internal): Check\n-\tISA_FLAG for LWP. \n+\tISA_FLAG for LWP.\n \t* config/i386/i386.h (TARGET_LWP): New macro for LWP.\n \t* config/i386/i386.opt (-mlwp): New switch for LWP support.\n \t* config/i386/i386.c (OPTION_MASK_ISA_LWP_SET): New.\n-\t(OPTION_MASK_ISA_LWP_UNSET): New.\t\n+\t(OPTION_MASK_ISA_LWP_UNSET): New.\n \t(ix86_handle_option): Handle -mlwp.\n \t(isa_opts): Handle -mlwp.\n \t(enum pta_flags): Add PTA_LWP.\n@@ -448,7 +452,7 @@\n \t(builtin_description): Ditto.\n \t(ix86_init_mmx_sse_builtins): Ditto.\n \t(ix86_expand_special_args_builtin): Ditto.\n-\t* config/i386/i386.md (UNSPEC_LLWP_INTRINSIC): Add new UNSPEC for \n+\t* config/i386/i386.md (UNSPEC_LLWP_INTRINSIC): Add new UNSPEC for\n \tLWP support.\n \t(UNSPEC_SLWP_INTRINSIC): Ditto.\n \t(UNSPECV_LWPVAL_INTRINSIC): Ditto.\n@@ -465,30 +469,30 @@\n \t(lwp_lwpinshi3): Ditto.\n \t(lwp_lwpinssi3): Ditto.\n \t(lwp_lwpinsdi3): Ditto.\n-\t\n+\n 2009-11-04  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n-            Trevor Smigiel <Trevor_Smigiel@playstation.sony.com>\n+\t    Trevor Smigiel <Trevor_Smigiel@playstation.sony.com>\n \n \tPR rtl-opt/41833\n \t* simplify-rtx.c (simplify_binary_operation_1): Simplify vec_select of\n \ta vec_duplicate.\n \n 2009-11-04  Richard Guenther  <rguenther@suse.de>\n-            Rafael Avila de Espindola  <espindola@google.com>\n- \n+\t    Rafael Avila de Espindola  <espindola@google.com>\n+\n \t* gcc.c (process_command): Handle arguments name@offset.\n \n 2009-11-04  Harsha Jagasia  <harsha.jagasia@amd.com>\n \t    Dwarakanath Rajagopal  <dwarak.rajagopal@amd.com>\n-\t\n+\n \t* config.gcc (i[34567]86-*-*): Include xopintrin.h.\n \t(x86_64-*-*): Ditto.\n \t* config/i386/xopintrin.h: New file, provide common x86 compiler\n \tintrinisics for XOP.\n \t* config/i386/cpuid.h (bit_XOP): Define XOP bit.\n \t* config/i386/x86intrin.h: Add XOP check and xopintrin.h.\n \t* config/i386/i386-c.c(ix86_target_macros_internal): Check\n-\tISA_FLAG for XOP. \n+\tISA_FLAG for XOP.\n \t* config/i386/i386.h(TARGET_XOP): New macro for XOP.\n \t* config/i386/i386.opt (-mxop): New switch for XOP support.\n \t* config/i386/i386.md (UNSPEC_XOP_UNSIGNED_CMP)\n@@ -498,7 +502,7 @@\n \t(PPERM_*): New constants for vpperm instruction.\n \t(xop_pcmov_<mode>): Add XOP conditional mov instructions.\n \t* config/i386/i386.c (OPTION_MASK_ISA_XOP_SET): New.\n-\t(OPTION_MASK_ISA_XOP_UNSET): New.\t\n+\t(OPTION_MASK_ISA_XOP_UNSET): New.\n \t(OPTION_MASK_ISA_XOP_UNSET): Change definition to depend on XOP.\n \t(ix86_handle_option): Handle -mxop.\n \t(isa_opts): Handle -mxop.\n@@ -677,7 +681,7 @@\n \t(xop_pmadcsswd): Ditto.\n \t(xop_pmadcswd): Ditto.\n \t(xop_pcmov_<mode>): Ditto.\n-\t(xop_pcmov_<mode>)256: Ditto.\n+\t(xop_pcmov_<mode>256): Ditto.\n \t(xop_phaddbw): Ditto.\n \t(xop_phaddbd): Ditto.\n \t(xop_phaddbq): Ditto.\n@@ -712,15 +716,15 @@\n \t(ashrv2di3): Ditto.\n \t(xop_frcz<mode>2): Ditto.\n \t(xop_vmfrcz<mode>2): Ditto.\n-\t(xop_frcz<mode>2256): Ditto.\t\n+\t(xop_frcz<mode>2256): Ditto.\n \t(xop_maskcmp<mode>3): Ditto.\n \t(xop_maskcmp_uns<mode>3): Ditto.\n \t(xop_maskcmp_uns2<mode>3): Ditto.\n \t(xop_pcom_tf<mode>3): Ditto.\n \n \t* doc/invoke.texi (-mxop): Add documentation.\n \t* doc/extend.texi (x86 intrinsics): Add XOP intrinsics.\n-\t\n+\n 2009-11-03  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR driver/11810\n@@ -996,7 +1000,7 @@\n \t* config/frv/frv.c (frv_function_value, frv_libcall_value,\n \tfrv_function_value_regno_p): New functions.\n \t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n-\t* config/frv/frv.h: (FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n+\t* config/frv/frv.h (FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n \t(FUNCTION_VALUE_REGNO_P): Redefine, use frv_function_value_regno_p.\n \t* config/frv/frv-protos.h (frv_function_value_regno_p): Declare.\n \n@@ -1006,15 +1010,15 @@\n \tnew 'outgoing' argument.\n \t(mn10300_libcall_value, mn10300_function_value_regno_p): New functions.\n \t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n-\t* config/mn10300/mn10300.h: (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n+\t* config/mn10300/mn10300.h (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n \tLIBCALL_VALUE): Remove.\n \t(FUNCTION_VALUE_REGNO_P): Redefine, use mn10300_function_value_regno_p.\n \t* config/mn10300/mn10300-protos.h (mn10300_function_value): Remove.\n \t(mh10300_function_value_regno_p): Declare.\n \n 2009-10-31  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n-        * config/arm/cortex-a9.md: New - integer pipeline description.\n+\t* config/arm/cortex-a9.md: New - integer pipeline description.\n \n 2009-10-31  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "c0427770267f4daf748ebf8ad377c5c22dd0a066", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1eb57b7dd9cb403765eb9c4a401e0687d215de/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1eb57b7dd9cb403765eb9c4a401e0687d215de/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=8a1eb57b7dd9cb403765eb9c4a401e0687d215de", "patch": "@@ -489,12 +489,15 @@ simplify_replace_fn_rtx (rtx x, const_rtx old_rtx,\n \tbreak;\n \n       case 'e':\n-\top = simplify_replace_fn_rtx (XEXP (x, i), old_rtx, fn, data);\n-\tif (op != XEXP (x, i))\n+\tif (XEXP (x, i))\n \t  {\n-\t    if (x == newx)\n-\t      newx = shallow_copy_rtx (x);\n-\t    XEXP (newx, i) = op;\n+\t    op = simplify_replace_fn_rtx (XEXP (x, i), old_rtx, fn, data);\n+\t    if (op != XEXP (x, i))\n+\t      {\n+\t\tif (x == newx)\n+\t\t  newx = shallow_copy_rtx (x);\n+\t\tXEXP (newx, i) = op;\n+\t      }\n \t  }\n \tbreak;\n       }"}]}