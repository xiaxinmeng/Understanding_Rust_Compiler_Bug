{"sha": "4fd7321445500c8283d94b38e2e728b4fa4517a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkNzMyMTQ0NTUwMGM4MjgzZDk0YjM4ZTJlNzI4YjRmYTQ1MTdhNw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-02-09T11:48:09Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-02-09T11:48:09Z"}, "message": "re PR middle-end/45505 (gfortran.dg/pr25923.f90)\n\n2011-02-09  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/45505\n\t* tree-sra.c (struct access): New flags grp_scalar_read and\n\tgrp_scalar_write.  Changed description of assignment read and write\n\tflags.\n\t(dump_access): Dump new flags, reorder all of them.\n\t(sort_and_splice_var_accesses): Set the new flag accordingly, use them\n\tto detect multiple scalar reads.\n\t(analyze_access_subtree): Use the new scalar read write flags instead\n\tof the old flags.  Adjusted comments.\n\n\t* testsuite/gfortran.dg/pr25923.f90: Remove xfails.\n\nFrom-SVN: r169964", "tree": {"sha": "6eb9fcbf5f662ad5fe9a681d1dc716caf7795eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eb9fcbf5f662ad5fe9a681d1dc716caf7795eee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fd7321445500c8283d94b38e2e728b4fa4517a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd7321445500c8283d94b38e2e728b4fa4517a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd7321445500c8283d94b38e2e728b4fa4517a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd7321445500c8283d94b38e2e728b4fa4517a7/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1bbb474148a83811771b36b76a62e3f59aae5ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bbb474148a83811771b36b76a62e3f59aae5ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bbb474148a83811771b36b76a62e3f59aae5ba2"}], "stats": {"total": 85, "additions": 62, "deletions": 23}, "files": [{"sha": "7dc0847ced22615b726d00a43366780ecef12286", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd7321445500c8283d94b38e2e728b4fa4517a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd7321445500c8283d94b38e2e728b4fa4517a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fd7321445500c8283d94b38e2e728b4fa4517a7", "patch": "@@ -1,3 +1,15 @@\n+2011-02-09  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/45505\n+\t* tree-sra.c (struct access): New flags grp_scalar_read and\n+\tgrp_scalar_write.  Changed description of assignment read and write\n+\tflags.\n+\t(dump_access): Dump new flags, reorder all of them.\n+\t(sort_and_splice_var_accesses): Set the new flag accordingly, use them\n+\tto detect multiple scalar reads.\n+\t(analyze_access_subtree): Use the new scalar read write flags instead\n+\tof the old flags.  Adjusted comments.\n+\n 2011-02-08  DJ Delorie  <dj@redhat.com>\n \n \tPR target/47548"}, {"sha": "3483b509e3072a3330b9161b952c314b7d613c93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd7321445500c8283d94b38e2e728b4fa4517a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd7321445500c8283d94b38e2e728b4fa4517a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4fd7321445500c8283d94b38e2e728b4fa4517a7", "patch": "@@ -1,3 +1,8 @@\n+2011-02-09  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/45505\n+\t* gfortran.dg/pr25923.f90: Remove xfails.\n+\n 2011-02-08  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/47583"}, {"sha": "e0df5b0c81e64195c997dbe0645f9234a294427e", "filename": "gcc/testsuite/gfortran.dg/pr25923.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd7321445500c8283d94b38e2e728b4fa4517a7/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr25923.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd7321445500c8283d94b38e2e728b4fa4517a7/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr25923.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr25923.f90?ref=4fd7321445500c8283d94b38e2e728b4fa4517a7", "patch": "@@ -10,7 +10,7 @@ module foo\n \n contains\n \n-  function baz(arg) result(res) ! { dg-bogus \"res.yr' may be\" \"PR45505\" { xfail ilp32 } }\n+  function baz(arg) result(res) ! { dg-bogus \"res.yr' may be\" }\n     type(bar), intent(in) :: arg\n     type(bar) :: res\n     logical, external:: some_func\n@@ -19,7 +19,7 @@ function baz(arg) result(res) ! { dg-bogus \"res.yr' may be\" \"PR45505\" { xfail il\n     else\n       res = arg\n     end if\n-  end function baz ! { dg-warning \"res.yr' may be\" \"PR45505\" { xfail ilp32 } }\n+  end function baz ! { dg-warning \"res.yr' may be\" }\n \n end module foo\n "}, {"sha": "27cb303339cc80f388512ba697595cc0619b2d2e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd7321445500c8283d94b38e2e728b4fa4517a7/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd7321445500c8283d94b38e2e728b4fa4517a7/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=4fd7321445500c8283d94b38e2e728b4fa4517a7", "patch": "@@ -195,6 +195,14 @@ struct access\n      statement?  This flag is propagated down the access tree.  */\n   unsigned grp_assignment_write : 1;\n \n+  /* Does this group contain a read access through a scalar type?  This flag is\n+     not propagated in the access tree in any direction.  */\n+  unsigned grp_scalar_read : 1;\n+\n+  /* Does this group contain a write access through a scalar type?  This flag\n+     is not propagated in the access tree in any direction.  */\n+  unsigned grp_scalar_write : 1;\n+\n   /* Other passes of the analysis use this bit to make function\n      analyze_access_subtree create scalar replacements for this group if\n      possible.  */\n@@ -368,16 +376,18 @@ dump_access (FILE *f, struct access *access, bool grp)\n   fprintf (f, \", type = \");\n   print_generic_expr (f, access->type, 0);\n   if (grp)\n-    fprintf (f, \", grp_write = %d, total_scalarization = %d, \"\n-\t     \"grp_read = %d, grp_hint = %d, grp_assignment_read = %d,\"\n-\t     \"grp_assignment_write = %d, grp_covered = %d, \"\n+    fprintf (f, \", total_scalarization = %d, grp_read = %d, grp_write = %d, \"\n+\t     \"grp_assignment_read = %d, grp_assignment_write = %d, \"\n+\t     \"grp_scalar_read = %d, grp_scalar_write = %d, \"\n+\t     \"grp_hint = %d, grp_covered = %d, \"\n \t     \"grp_unscalarizable_region = %d, grp_unscalarized_data = %d, \"\n \t     \"grp_partial_lhs = %d, grp_to_be_replaced = %d, \"\n \t     \"grp_maybe_modified = %d, \"\n \t     \"grp_not_necessarilly_dereferenced = %d\\n\",\n-\t     access->grp_write, access->total_scalarization,\n-\t     access->grp_read, access->grp_hint, access->grp_assignment_read,\n-\t     access->grp_assignment_write, access->grp_covered,\n+\t     access->total_scalarization, access->grp_read, access->grp_write,\n+\t     access->grp_assignment_read, access->grp_assignment_write,\n+\t     access->grp_scalar_read, access->grp_scalar_write,\n+\t     access->grp_hint, access->grp_covered,\n \t     access->grp_unscalarizable_region, access->grp_unscalarized_data,\n \t     access->grp_partial_lhs, access->grp_to_be_replaced,\n \t     access->grp_maybe_modified,\n@@ -1593,9 +1603,13 @@ sort_and_splice_var_accesses (tree var)\n       struct access *access = VEC_index (access_p, access_vec, i);\n       bool grp_write = access->write;\n       bool grp_read = !access->write;\n+      bool grp_scalar_write = access->write\n+\t&& is_gimple_reg_type (access->type);\n+      bool grp_scalar_read = !access->write\n+\t&& is_gimple_reg_type (access->type);\n       bool grp_assignment_read = access->grp_assignment_read;\n       bool grp_assignment_write = access->grp_assignment_write;\n-      bool multiple_reads = false;\n+      bool multiple_scalar_reads = false;\n       bool total_scalarization = access->total_scalarization;\n       bool grp_partial_lhs = access->grp_partial_lhs;\n       bool first_scalar = is_gimple_reg_type (access->type);\n@@ -1620,13 +1634,21 @@ sort_and_splice_var_accesses (tree var)\n \t  if (ac2->offset != access->offset || ac2->size != access->size)\n \t    break;\n \t  if (ac2->write)\n-\t    grp_write = true;\n+\t    {\n+\t      grp_write = true;\n+\t      grp_scalar_write = (grp_scalar_write\n+\t\t\t\t  || is_gimple_reg_type (ac2->type));\n+\t    }\n \t  else\n \t    {\n-\t      if (grp_read)\n-\t\tmultiple_reads = true;\n-\t      else\n-\t\tgrp_read = true;\n+\t      grp_read = true;\n+\t      if (is_gimple_reg_type (ac2->type))\n+\t\t{\n+\t\t  if (grp_scalar_read)\n+\t\t    multiple_scalar_reads = true;\n+\t\t  else\n+\t\t    grp_scalar_read = true;\n+\t\t}\n \t    }\n \t  grp_assignment_read |= ac2->grp_assignment_read;\n \t  grp_assignment_write |= ac2->grp_assignment_write;\n@@ -1648,9 +1670,11 @@ sort_and_splice_var_accesses (tree var)\n       access->group_representative = access;\n       access->grp_write = grp_write;\n       access->grp_read = grp_read;\n+      access->grp_scalar_read = grp_scalar_read;\n+      access->grp_scalar_write = grp_scalar_write;\n       access->grp_assignment_read = grp_assignment_read;\n       access->grp_assignment_write = grp_assignment_write;\n-      access->grp_hint = multiple_reads || total_scalarization;\n+      access->grp_hint = multiple_scalar_reads || total_scalarization;\n       access->grp_partial_lhs = grp_partial_lhs;\n       access->grp_unscalarizable_region = unscalarizable_region;\n       if (access->first_link)\n@@ -1851,13 +1875,13 @@ enum mark_rw_status { SRA_MRRW_NOTHING, SRA_MRRW_DIRECT, SRA_MRRW_ASSIGN};\n    there is more than one direct read access) or according to the following\n    table:\n \n-   Access written to individually (once or more times)\n+   Access written to through a scalar type (once or more times)\n    |\n-   |\tParent written to in an assignment statement\n+   |\tWritten to in an assignment statement\n    |\t|\n-   |\t|\tAccess read individually _once_\n+   |\t|\tAccess read as scalar _once_\n    |\t|\t|\n-   |   \t|\t|\tParent read in an assignment statement\n+   |   \t|\t|\tRead in an assignment statement\n    |\t|\t|\t|\n    |   \t|\t|\t|\tScalarize\tComment\n -----------------------------------------------------------------------------\n@@ -1888,8 +1912,6 @@ analyze_access_subtree (struct access *root, bool allow_replacements,\n   HOST_WIDE_INT covered_to = root->offset;\n   bool scalar = is_gimple_reg_type (root->type);\n   bool hole = false, sth_created = false;\n-  bool direct_read = root->grp_read;\n-  bool direct_write = root->grp_write;\n \n   if (root->grp_assignment_read)\n     mark_read = SRA_MRRW_ASSIGN;\n@@ -1938,8 +1960,8 @@ analyze_access_subtree (struct access *root, bool allow_replacements,\n \n   if (allow_replacements && scalar && !root->first_child\n       && (root->grp_hint\n-\t  || ((direct_write || root->grp_assignment_write)\n-\t      && (direct_read || root->grp_assignment_read))))\n+\t  || ((root->grp_scalar_read || root->grp_assignment_read)\n+\t      && (root->grp_scalar_write || root->grp_assignment_write))))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{"}]}