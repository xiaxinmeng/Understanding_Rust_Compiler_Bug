{"sha": "5b4994bc7605b15cda980714cb4b9db3ad1f3771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI0OTk0YmM3NjA1YjE1Y2RhOTgwNzE0Y2I0YjlkYjNhZDFmMzc3MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-12-05T10:24:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-12-05T10:24:05Z"}, "message": "[multiple changes]\n\n2003-12-05  Thomas Quinot  <quinot@act-europe.fr>\n\n\t* 3ssoliop.ads: Fix comment (this is the Solaris, not the UnixWare,\n\tversion of this unit).\n\n2003-12-05  Olivier Hainque  <hainque@act-europe.fr>\n\n\t* 53osinte.ads, 54osinte.ads, 55osinte.ads, 56osinte.ads, 5bosinte.ads,\n\t5cosinte.ads, 5hosinte.ads, 5iosinte.ads, 5losinte.ads,\n\t5tosinte.ads: Define the SA_SIGINFO constant, to allow references from\n\tthe body of System.Interrupt_Management common to several targets.\n\tUpdate copyright notice when appropriate.\n\n\t* 52osinte.ads, 5posinte.ads: Define a dummy value for the SA_SIGINFO\n\tconstant.\n\n\t* 7sintman.adb (elaboration): Set SA_SIGINFO in the sigaction flags,\n\tto ensure that the kernel fills in the interrupted context structure\n\tbefore calling a signal handler, which is necessary to be able to\n\tunwind past it. Update the copyright notice.\n\n2003-12-05  Jerome Guitton  <guitton@act-europe.fr>\n\n\t* a-elchha.ads: New file.\n\n\t* a-elchha.adb: New default last chance handler. Contents taken from\n\tAda.Exceptions.Exception_Traces.Unhandled_Exception_Terminate.\n\n\t* a-exextr.adb (Unhandled_Exception_Terminate): Most of this routine\n\tis moved to a-elchha.adb to provide a target-independent default last\n\tchance handler.\n\n\t* Makefile.rtl: Add a-elchha.o\n\n\t* Make-lang.in (GNAT_ADA_OBJS, GNATBIND_OBJS): Add a-elchha.o.\n\n2003-12-05  Ed Schonberg  <schonberg@gnat.com>\n\n\t* exp_ch6.adb (Expand_Call): If the subprogram is inlined and is\n\tdeclared in an instance, do not inline the call if the instance is not\n\tfrozen yet, to prevent order of elaboration problems.\n\n\t* sem_prag.adb: Add comments for previous fix.\n\n2003-12-05  Samuel Tardieu  <tardieu@act-europe.fr>\n\n\t* g-table.adb: Use the right variable in Set_Item.\n\tUpdate copyright notice.\n\n2003-12-05  Arnaud Charlet  <charlet@act-europe.fr>\n\n\t* Makefile.in: Remove unused rules.\n\n2003-12-05  Vincent Celier  <celier@gnat.com>\n\n\t* switch-c.adb (Scan_Front_End_Switches): Remove processing of\n\t-nostdlib. Not needed here after all.\n\nFrom-SVN: r74319", "tree": {"sha": "5224f98552233f79c9df85272ca71ff1d098452a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5224f98552233f79c9df85272ca71ff1d098452a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b4994bc7605b15cda980714cb4b9db3ad1f3771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4994bc7605b15cda980714cb4b9db3ad1f3771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b4994bc7605b15cda980714cb4b9db3ad1f3771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4994bc7605b15cda980714cb4b9db3ad1f3771/comments", "author": null, "committer": null, "parents": [{"sha": "b98d4eb5a91e0def82e5a650f1eb37fbdd507c65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98d4eb5a91e0def82e5a650f1eb37fbdd507c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b98d4eb5a91e0def82e5a650f1eb37fbdd507c65"}], "stats": {"total": 665, "additions": 357, "deletions": 308}, "files": [{"sha": "82ac94ff28061af3739b48a9e7f6f501443811b8", "filename": "gcc/ada/3ssoliop.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F3ssoliop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F3ssoliop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F3ssoliop.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -34,7 +34,7 @@\n --  This package is used to provide target specific linker_options for the\n --  support of scokets as required by the package GNAT.Sockets.\n \n---  This is the UnixWare version of this package\n+--  This is the Solaris version of this package\n \n package GNAT.Sockets.Linker_Options is\n private"}, {"sha": "b6f302331937d1bbb2412344dcb1c820dedc1f03", "filename": "gcc/ada/52osinte.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F52osinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F52osinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F52osinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -153,6 +153,8 @@ package System.OS_Interface is\n    pragma Convention (C, struct_sigaction);\n    type struct_sigaction_ptr is access all struct_sigaction;\n \n+   SA_SIGINFO  : constant := 16#80#;\n+\n    SIG_BLOCK   : constant := 0;\n    SIG_UNBLOCK : constant := 1;\n    SIG_SETMASK : constant := 2;"}, {"sha": "6ade0986762256820bbce68c5f186eb25068d43a", "filename": "gcc/ada/53osinte.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F53osinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F53osinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F53osinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1999-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1999-2003 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -153,6 +153,8 @@ package System.OS_Interface is\n    pragma Convention (C, struct_sigaction);\n    type struct_sigaction_ptr is access all struct_sigaction;\n \n+   SA_SIGINFO  : constant := 16#10#;\n+\n    SIG_BLOCK   : constant := 0;\n    SIG_UNBLOCK : constant := 1;\n    SIG_SETMASK : constant := 2;"}, {"sha": "cced53c4fc66ef9e8fc3d18f3926bb934b15ca72", "filename": "gcc/ada/54osinte.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F54osinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F54osinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F54osinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---            Copyright (C) 2000-2002 Ada Core Technologies, Inc.           --\n+--            Copyright (C) 2000-2003 Ada Core Technologies, Inc.           --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -157,6 +157,8 @@ package System.OS_Interface is\n    pragma Convention (C, struct_sigaction);\n    type struct_sigaction_ptr is access all struct_sigaction;\n \n+   SA_SIGINFO : constant := 16#0008#;\n+\n    SIG_BLOCK   : constant := 1;\n    SIG_UNBLOCK : constant := 2;\n    SIG_SETMASK : constant := 3;"}, {"sha": "581870c63f71b59c2373de0f44b8db3f4a54aeb3", "filename": "gcc/ada/55osinte.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F55osinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F55osinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F55osinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -171,6 +171,8 @@ package System.OS_Interface is\n    SIG_DFL : constant := 0;\n    SIG_IGN : constant := 1;\n \n+   SA_SIGINFO : constant := 16#0040#;\n+\n    function sigaction\n      (sig  : Signal;\n       act  : struct_sigaction_ptr;"}, {"sha": "3d7ff038f59065fd8b40820b5a29efba61869833", "filename": "gcc/ada/56osinte.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F56osinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F56osinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F56osinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -167,6 +167,8 @@ package System.OS_Interface is\n    pragma Convention (C, struct_sigaction);\n    type struct_sigaction_ptr is access all struct_sigaction;\n \n+   SA_SIGINFO  : constant := 16#80#;\n+\n    SIG_BLOCK   : constant := 0;\n    SIG_UNBLOCK : constant := 1;\n    SIG_SETMASK : constant := 2;"}, {"sha": "9d43a19bc93e3a985a7ec92348382545b781ab17", "filename": "gcc/ada/5bosinte.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5bosinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5bosinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5bosinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1997-2001 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2003 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -162,6 +162,7 @@ package System.OS_Interface is\n    pragma Convention (C, struct_sigaction);\n    type struct_sigaction_ptr is access all struct_sigaction;\n \n+   SA_SIGINFO  : constant := 16#0100#;\n \n    SIG_BLOCK   : constant := 0;\n    SIG_UNBLOCK : constant := 1;"}, {"sha": "3dfe47d2f24e6d9cc1bb1c005b8f86f5bd4a0ae4", "filename": "gcc/ada/5cosinte.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5cosinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5cosinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5cosinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -162,6 +162,8 @@ package System.OS_Interface is\n    pragma Convention (C, struct_sigaction);\n    type struct_sigaction_ptr is access all struct_sigaction;\n \n+   SA_SIGINFO  : constant := 16#0100#;\n+\n    SIG_BLOCK   : constant := 0;\n    SIG_UNBLOCK : constant := 1;\n    SIG_SETMASK : constant := 2;"}, {"sha": "379f0dc0a20329e61588d29716e1dc736b5bc8ce", "filename": "gcc/ada/5hosinte.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5hosinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5hosinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5hosinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -164,6 +164,7 @@ package System.OS_Interface is\n    type struct_sigaction_ptr is access all struct_sigaction;\n \n    SA_RESTART  : constant  := 16#40#;\n+   SA_SIGINFO  : constant  := 16#10#;\n \n    SIG_BLOCK   : constant  := 0;\n    SIG_UNBLOCK : constant  := 1;"}, {"sha": "4dceebfac9650f990e17e9a820df1fbb40ea4b98", "filename": "gcc/ada/5iosinte.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5iosinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5iosinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5iosinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -196,6 +196,8 @@ package System.OS_Interface is\n    end record;\n    type Machine_State_Ptr is access all Machine_State;\n \n+   SA_SIGINFO  : constant := 16#04#;\n+\n    SIG_BLOCK   : constant := 0;\n    SIG_UNBLOCK : constant := 1;\n    SIG_SETMASK : constant := 2;"}, {"sha": "8ca3d6160723316213f6be558c9cbafb44c9ce2a", "filename": "gcc/ada/5losinte.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5losinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5losinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5losinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2001 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1991-2003 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -162,6 +162,8 @@ package System.OS_Interface is\n    end record;\n    type Machine_State_Ptr is access all Machine_State;\n \n+   SA_SIGINFO  : constant := 16#04#;\n+\n    SIG_BLOCK   : constant := 0;\n    SIG_UNBLOCK : constant := 1;\n    SIG_SETMASK : constant := 2;"}, {"sha": "57f04a82c175b5f09f47bc5e3a3500199d6e7c27", "filename": "gcc/ada/5posinte.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5posinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5posinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5posinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1997-2001 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2003 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -155,6 +155,10 @@ package System.OS_Interface is\n    SIG_DFL : constant := 0;\n    SIG_IGN : constant := 1;\n \n+   SA_SIGINFO : constant := 0;\n+   --  Dummy constant for a sa_flags bit. A proper definition is needed only\n+   --  for the GCC/ZCX EH scheme (see System.Interrupt_Management).\n+\n    function sigaction\n      (sig  : Signal;\n       act  : struct_sigaction_ptr;"}, {"sha": "0cd80d901ed38c34d3aa3b65002c2dc69d7ceeac", "filename": "gcc/ada/5tosinte.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5tosinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F5tosinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5tosinte.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1997-2002, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2003, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -249,6 +249,8 @@ package System.OS_Interface is\n    pragma Convention (C, struct_sigaction);\n    type struct_sigaction_ptr is access all struct_sigaction;\n \n+   SA_SIGINFO  : constant := 16#08;\n+\n    SIG_BLOCK   : constant := 1;\n    SIG_UNBLOCK : constant := 2;\n    SIG_SETMASK : constant := 3;"}, {"sha": "4e9b6d08635850c648b99a0fc2ec5e410b06e950", "filename": "gcc/ada/7sintman.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F7sintman.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2F7sintman.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F7sintman.adb?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2002, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2003, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -175,7 +175,16 @@ begin\n \n       act.sa_handler := Notify_Exception'Address;\n \n-      act.sa_flags := 0;\n+      act.sa_flags := SA_SIGINFO;\n+\n+      --  Setting SA_SIGINFO asks the kernel to pass more than just the signal\n+      --  number argument to the handler when it is called.  The set of extra\n+      --  parameters typically includes a pointer to a structure describing\n+      --  the interrupted context.  Although the Notify_Exception handler does\n+      --  not use this information, it is actually required for the GCC/ZCX\n+      --  exception propagation scheme because on some targets (at least\n+      --  alpha-tru64), the structure contents are not even filled when this\n+      --  flag is not set.\n \n       --  On some targets, we set sa_flags to SA_NODEFER so that during the\n       --  handler execution we do not change the Signal_Mask to be masked for"}, {"sha": "c03196bbe8bfa5a434d7d3eb68d3d04460ccbb40", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -1,3 +1,61 @@\n+2003-12-05  Thomas Quinot  <quinot@act-europe.fr>\n+\n+\t* 3ssoliop.ads: Fix comment (this is the Solaris, not the UnixWare,\n+\tversion of this unit).\n+\n+2003-12-05  Olivier Hainque  <hainque@act-europe.fr>\n+\n+\t* 53osinte.ads, 54osinte.ads, 55osinte.ads, 56osinte.ads, 5bosinte.ads,\n+\t5cosinte.ads, 5hosinte.ads, 5iosinte.ads, 5losinte.ads,\n+\t5tosinte.ads: Define the SA_SIGINFO constant, to allow references from\n+\tthe body of System.Interrupt_Management common to several targets.\n+\tUpdate copyright notice when appropriate.\n+\n+\t* 52osinte.ads, 5posinte.ads: Define a dummy value for the SA_SIGINFO\n+\tconstant.\n+\n+\t* 7sintman.adb (elaboration): Set SA_SIGINFO in the sigaction flags,\n+\tto ensure that the kernel fills in the interrupted context structure\n+\tbefore calling a signal handler, which is necessary to be able to\n+\tunwind past it. Update the copyright notice.\n+\n+2003-12-05  Jerome Guitton  <guitton@act-europe.fr>\n+\n+\t* a-elchha.ads: New file.\n+\n+\t* a-elchha.adb: New default last chance handler. Contents taken from\n+\tAda.Exceptions.Exception_Traces.Unhandled_Exception_Terminate.\n+\n+\t* a-exextr.adb (Unhandled_Exception_Terminate): Most of this routine\n+\tis moved to a-elchha.adb to provide a target-independent default last\n+\tchance handler.\n+\n+\t* Makefile.rtl: Add a-elchha.o\n+\n+\t* Make-lang.in (GNAT_ADA_OBJS, GNATBIND_OBJS): Add a-elchha.o.\n+\n+2003-12-05  Ed Schonberg  <schonberg@gnat.com>\n+\n+\t* exp_ch6.adb (Expand_Call): If the subprogram is inlined and is\n+\tdeclared in an instance, do not inline the call if the instance is not\n+\tfrozen yet, to prevent order of elaboration problems.\n+\n+\t* sem_prag.adb: Add comments for previous fix.\n+\n+2003-12-05  Samuel Tardieu  <tardieu@act-europe.fr>\n+\n+\t* g-table.adb: Use the right variable in Set_Item.\n+\tUpdate copyright notice.\n+\n+2003-12-05  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\t* Makefile.in: Remove unused rules.\n+\n+2003-12-05  Vincent Celier  <celier@gnat.com>\n+\n+\t* switch-c.adb (Scan_Front_End_Switches): Remove processing of\n+\t-nostdlib. Not needed here after all.\n+\n 2003-12-03  Thomas Quinot  <quinot@act-europe.fr>\n \n \tPR ada/11724"}, {"sha": "8dcd896282ad134a4584b7eade17ce15d5730af5", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -118,7 +118,7 @@ GNAT1_C_OBJS = ada/b_gnat1.o ada/adadecode.o ada/adaint.o ada/cstreams.o \\\n # Object files from Ada sources that are used by gnat1\n \n GNAT_ADA_OBJS = ada/ada.o ada/a-charac.o ada/a-chlat1.o ada/a-except.o \\\n- ada/a-ioexce.o \\\n+ ada/a-elchha.o ada/a-ioexce.o \\\n  ada/s-memory.o ada/s-carun8.o ada/s-casuti.o ada/s-strcom.o ada/s-purexc.o \\\n  ada/s-htable.o ada/s-traceb.o ada/s-mastop.o ada/s-except.o ada/ali.o \\\n  ada/alloc.o ada/atree.o ada/butil.o ada/casing.o ada/checks.o ada/comperr.o \\\n@@ -173,6 +173,7 @@ GNATBIND_OBJS = \\\n  ada/tracebak.o   \\\n  ada/a-except.o   \\\n  ada/ada.o        \\\n+ ada/a-elchha.o   \\\n  ada/ali-util.o   \\\n  ada/ali.o        \\\n  ada/alloc.o      \\"}, {"sha": "28f2bea066101804f9ee48c58d4b257877f99cda", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 0, "deletions": 199, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -589,106 +589,6 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks,$(targ))),)\n   endif\n endif\n \n-\n-ifeq ($(strip $(filter-out powerpc% wrs vxworksae,$(targ))),)\n-  LIBGNAT_TARGET_PAIRS = \\\n-  a-sytaco.ads<4zsytaco.ads \\\n-  a-sytaco.adb<4zsytaco.adb \\\n-  a-intnam.ads<4zintnam.ads \\\n-  a-numaux.ads<4znumaux.ads \\\n-  s-inmaop.adb<7sinmaop.adb \\\n-  s-interr.adb<5zinterr.adb \\\n-  s-intman.ads<5zintman.ads \\\n-  s-intman.adb<5zintman.adb \\\n-  s-osinte.adb<5zosinte.adb \\\n-  s-osinte.ads<5zosinte.ads \\\n-  s-osprim.adb<5zosprim.adb \\\n-  s-parame.ads<5yparame.ads \\\n-  s-taprop.adb<5ztaprop.adb \\\n-  s-taspri.ads<5ztaspri.ads \\\n-  s-thread.adb<5zthread.adb \\\n-  s-tpopsp.adb<5ztpopsp.adb \\\n-  s-vxwork.ads<5pvxwork.ads \\\n-  g-soccon.ads<3zsoccon.ads \\\n-  g-socthi.ads<3zsocthi.ads \\\n-  g-socthi.adb<3zsocthi.adb \\\n-  system.ads<5ysystem.ads\n-\n-  TOOLS_TARGET_PAIRS=mlib-tgt.adb<5zml-tgt.adb\n-\n-  EXTRA_HIE_NONE_TARGET_PAIRS= \\\n-  system.ads<50system.ads\n-\n-  EXTRA_RAVEN_SOURCES=i-vxwork.ads s-vxwork.ads\n-  EXTRA_RAVEN_OBJS=i-vxwork.o s-vxwork.o\n-  EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o s-thread.o\n-  EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o\n-  HIE_RAVEN_TARGET_PAIRS=\\\n-  $(HIE_NONE_TARGET_PAIRS) \\\n-  a-reatim.ads<1areatim.ads \\\n-  a-reatim.adb<1areatim.adb \\\n-  a-retide.adb<1aretide.adb \\\n-  a-interr.adb<1ainterr.adb \\\n-  s-interr.ads<1sinterr.ads \\\n-  s-interr.adb<1sinterr.adb \\\n-  s-taskin.ads<1staskin.ads \\\n-  s-taskin.adb<1staskin.adb \\\n-  s-tarest.adb<1starest.adb \\\n-  s-tposen.ads<1stposen.ads \\\n-  s-tposen.adb<1stposen.adb \\\n-  s-osinte.adb<1sosinte.adb \\\n-  s-taprop.ads<1staprop.ads \\\n-  s-taprop.adb<1staprop.adb \\\n-  s-taprob.ads<1staprob.ads \\\n-  s-taprob.adb<1staprob.adb \\\n-  a-sytaco.ads<1asytaco.ads \\\n-  a-sytaco.adb<1asytaco.adb \\\n-  a-intnam.ads<4zintnam.ads \\\n-  s-osinte.ads<5zosinte.ads \\\n-  s-parame.ads<5zparame.ads \\\n-  s-taspri.ads<5ztaspri.ads \\\n-  s-vxwork.ads<5pvxwork.ads \\\n-  a-taside.adb<1ataside.adb \\\n-\n-  CERT_LEVEL_B_TARGET_PAIRS=\\\n-  a-tags.ads<1atags.ads     \\\n-  a-tags.adb<1atags.adb     \\\n-  a-elchha.ads<2aelchha.ads \\\n-  a-elchha.adb<2aelchha.adb.empty \\\n-  a-elchha.adb.full<2aelchha.adb.full \\\n-  a-except.adb<2aexcept.adb \\\n-  a-except.ads<2aexcept.ads \\\n-  a-excach.adb<2aexcach.adb \\\n-  i-c.ads<1ic.ads           \\\n-  g-io.adb<2gio.adb         \\\n-  s-init.ads<2sinit.ads     \\\n-  s-init.adb<5zinit.adb     \\\n-  s-memory.adb<2smemory.adb \\\n-  s-memory.ads<2smemory.ads \\\n-  s-osinte.ads<2sosinte.ads \\\n-  s-secsta.ads<2ssecsta.ads \\\n-  s-secsta.adb<2ssecsta.adb \\\n-  s-soflin.adb<2ssoflin.adb \\\n-  s-soflin.ads<2ssoflin.ads \\\n-  s-stalib.adb<1sstalib.adb \\\n-  s-stalib.ads<1sstalib.ads \\\n-  s-thread.adb<5zthread.adb \\\n-  s-traceb.adb<2straceb.adb \\\n-  s-traceb.ads<2straceb.ads \\\n-  system.ads<5isystem.ads\n-\n-  CERT_LEVEL_B_EXTRA_OBJECT_FILES=a-elchha.adb\n-\n-  ifeq ($(strip $(filter-out yes,$(TRACE))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-traces.adb<7straces.adb \\\n-    s-trafor.adb<7strafor.adb \\\n-    s-trafor.ads<7strafor.ads \\\n-    s-tratas.adb<7stratas.adb \\\n-    s-tfsetr.adb<5ztfsetr.adb \n-  endif\n-endif\n-\n ifeq ($(strip $(filter-out powerpc% unknown elf,$(targ))),)\n   EXTRA_HIE_NONE_TARGET_PAIRS= \\\n   system.ads<59system.ads\n@@ -1524,78 +1424,6 @@ RAVEN_OBJS = \\\n  a-sytaco.o \\\n  a-taside.o $(EXTRA_RAVEN_OBJS)\n \n-\n-# Files which are needed for the cert level B runtime\n-\n-COMPILABLE_CERT_LEVEL_B_SOURCES = \\\n-$(COMPILABLE_HIE_SOURCES) \\\n- a-except.adb \\\n- a-except.ads \\\n- a-exctra.ads \\\n- a-exctra.adb \\\n- s-init.adb   \\\n- s-init.ads   \\\n- s-memory.adb \\\n- s-memory.ads \\\n- s-osinte.ads \\\n- s-soflin.adb \\\n- s-soflin.ads \\\n- s-stalib.adb \\\n- s-stalib.ads \\\n- s-assert.adb \\\n- s-assert.ads \\\n- s-exnint.adb \\\n- s-exnint.ads \\\n- s-strops.adb \\\n- s-strops.ads \\\n- s-thread.adb \\\n- s-thread.ads \\\n- s-traceb.adb \\\n- s-traceb.ads \\\n- s-traent.ads \\\n- s-traent.adb \\\n- g-debuti.ads \\\n- g-debuti.adb \\\n- g-io.adb     \\\n- g-io.ads     \\\n- $(EXTRA_CERT_LEVEL_B_SOURCES)\n-\n-NON_COMPILABLE_CERT_LEVEL_B_SOURCES= \\\n- a-elchha.ads \\\n- a-elchha.adb \\\n- a-elchha.adb.full \\\n- a-excach.adb \\\n- $(NON_COMPILABLE_HIE_SOURCES)\n-\n-CERT_LEVEL_B_SOURCES = \\\n-$(NON_COMPILABLE_CERT_LEVEL_B_SOURCES) \\\n-$(COMPILABLE_CERT_LEVEL_B_SOURCES)\n-\n-# Objects to generate for the cert level B run time\n-\n-CERT_LEVEL_B_OBJS = \\\n- $(HIE_OBJS) \\\n- a-except.o  \\\n- s-init.o    \\\n- s-memory.o  \\\n- s-soflin.o  \\\n- s-stalib.o  \\\n- s-thrini.o  \\\n- s-traceb.o  \\\n- s-assert.o  \\\n- s-exnint.o  \\\n- s-strops.o  \\\n- s-thread.o  \\\n- g-debuti.o  \\\n- g-io.o      \\\n- $(EXTRA_CERT_LEVEL_B_OBJS)\n-\n-# C files for the cert level B run time (without the .c extension)\n-\n-CERT_LEVEL_B_C_FILES = \\\n-2raise \\\n-$(EXTRA_CERT_LEVEL_B_C_FILES)\n-\n # Default run time files\n \n ADA_INCLUDE_SRCS =\\\n@@ -2016,33 +1844,6 @@ rts-zfp: force\n \t$(RM) rts-zfp/adalib/*.o\n \t$(CHMOD) a-wx rts-zfp/adalib/*.ali\n \n-rts-cert: force\n-# First compile the Ada files ...\n-\t$(MAKE) $(FLAGS_TO_PASS) prepare-rts \\\n-\t   RTS_NAME=cert RTS_SRCS=\"$(CERT_LEVEL_B_SOURCES)\" \\\n-\t   RTS_TARGET_PAIRS=\"$(CERT_LEVEL_B_TARGET_PAIRS)\" \\\n-\t   COMPILABLE_SOURCES=\"$(COMPILABLE_CERT_LEVEL_B_SOURCES)\"\n-\t$(GNATMAKE) -Prts-cert/cert.gpr --GCC=\"../../../xgcc -B../../../\"\n-# ... then the C files. This section will eventually be removed.\n-\t$(foreach f,$(CERT_LEVEL_B_C_FILES), \\\n-\t  $(CP) $(fsrcpfx)$(f).c rts-cert/adainclude/ ;)\n-\tcd rts-cert/adalib ; \\\n-\t$(foreach f,$(CERT_LEVEL_B_C_FILES), \\\n-\t../../../$(GCC_FOR_TARGET) -B../../../ $(TARGET_LIBGCC2_CFLAGS) \\\n-\t$(ALL_CFLAGS) $(GNATLIBCFLAGS_FOR_C) -c ../adainclude/$(f).c \\\n-\t-I../adainclude $(INCLUDES_FOR_SUBDIR) -I../../../ ;) \\\n-# ... Finally, generate the libs:\n-\tcd rts-cert/adalib ; \\\n-\t../../../xgcc -B../../../ *.o -o libgnat ; \\\n-\t$(RM) *.o ; \\\n-\t$(MV) libgnat libgnat.o ; \\\n-\t$(AR) $(ARFLAGS) libgnat.a libgnat.o ; \\\n-\t$(foreach f,$(CERT_LEVEL_B_EXTRA_OBJECT_FILES), \\\n-\t../../../xgcc -c -B../../../ $(GNATLIBFLAGS) ../adainclude/$(f) \\\n-\t-I../adainclude; \\\n-\t$(AR) $(ARFLAGS) libgnat.a $(subst .adb,.o,$(f))) ; \\\n-\t$(CHMOD) a-wx *.ali *.o *.a ; \\\n-\n rts-none: force\n \t$(MAKE) $(FLAGS_TO_PASS) prepare-rts \\\n \t   RTS_NAME=none RTS_SRCS=\"$(HIE_SOURCES)\" \\"}, {"sha": "445d377eddc9cdd79c3c99062a3e0d166020f1ad", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -87,6 +87,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-diocst$(objext) \\\n   a-direio$(objext) \\\n   a-einuoc$(objext) \\\n+  a-elchha$(objext) \\\n   a-except$(objext) \\\n   a-exctra$(objext) \\\n   a-filico$(objext) \\"}, {"sha": "12699fee22543a9cace01f596109d70dd918b841", "filename": "gcc/ada/a-elchha.adb", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fa-elchha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fa-elchha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-elchha.adb?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -0,0 +1,169 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--    A D A . E X C E P T I O N S . L A S T _ C H A N C E _ H A N D L E R   --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--             Copyright (C) 2003 Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Default version for most targets\n+\n+procedure Ada.Exceptions.Last_Chance_Handler\n+  (Except : Exception_Occurrence) is\n+\n+   procedure Unhandled_Terminate;\n+   pragma No_Return (Unhandled_Terminate);\n+   pragma Import (C, Unhandled_Terminate, \"__gnat_unhandled_terminate\");\n+   --  Perform system dependent shutdown code\n+\n+   function Tailored_Exception_Information\n+     (X    : Exception_Occurrence)\n+     return String;\n+   --  Exception information to be output in the case of automatic tracing\n+   --  requested through GNAT.Exception_Traces.\n+   --\n+   --  This is the same as Exception_Information if no backtrace decorator\n+   --  is currently in place. Otherwise, this is Exception_Information with\n+   --  the call chain raw addresses replaced by the result of a call to the\n+   --  current decorator provided with the call chain addresses.\n+\n+   pragma Import\n+     (Ada, Tailored_Exception_Information,\n+        \"__gnat_tailored_exception_information\");\n+\n+   procedure Tailored_Exception_Information\n+     (X    : Exception_Occurrence;\n+      Buff : in out String;\n+      Last : in out Integer);\n+   --  Procedural version of the above function. Instead of returning the\n+   --  result, this one is put in Buff (Buff'first .. Buff'first + Last)\n+\n+   procedure To_Stderr (S : String);\n+   pragma Import (Ada, To_Stderr, \"__gnat_to_stderr\");\n+   --  Little routine to output string to stderr\n+\n+   Nline : constant String := String'(1 => ASCII.LF);\n+   --  Convenient shortcut\n+\n+   Msg : constant String := Except.Msg (1 .. Except.Msg_Length);\n+\n+   Max_Static_Exc_Info : constant := 1024;\n+   --  This should be enough for most exception information cases\n+   --  even though tailoring introduces some uncertainty.  The\n+   --  name+message should not exceed 320 chars, so that leaves at\n+   --  least 35 backtrace slots (each slot needs 19 chars for\n+   --  representing a 64 bit address).\n+\n+   subtype Exc_Info_Type is String (1 .. Max_Static_Exc_Info);\n+   type Str_Ptr is access Exc_Info_Type;\n+   Exc_Info : Str_Ptr;\n+   Exc_Info_Last : Natural := 0;\n+   --  Buffer that is allocated to store the tailored exception\n+   --  information while Adafinal is run. This buffer is allocated\n+   --  on the heap only when it is needed. It is better to allocate\n+   --  on the heap than on the stack since stack overflows are more\n+   --  common than heap overflows.\n+\n+   procedure Tailored_Exception_Information\n+     (X    : Exception_Occurrence;\n+      Buff : in out String;\n+      Last : in out Integer) is\n+\n+      Info : String := Tailored_Exception_Information (X);\n+   begin\n+      Last := Info'Last;\n+      Buff (1 .. Last) := Info;\n+   end Tailored_Exception_Information;\n+\n+\n+\n+begin\n+   --  First allocate & store the exception info in a buffer when\n+   --  we know it will be needed. This needs to be done before\n+   --  Adafinal because it implicitly uses the secondary stack.\n+\n+   if Except.Id.Full_Name.all (1) /= '_'\n+     and then Except.Num_Tracebacks /= 0\n+   then\n+      Exc_Info := new Exc_Info_Type;\n+      if Exc_Info /= null then\n+         Tailored_Exception_Information\n+           (Except, Exc_Info.all, Exc_Info_Last);\n+      end if;\n+   end if;\n+\n+   --  Let's shutdown the runtime now. The rest of the procedure\n+   --  needs to be careful not to use anything that would require\n+   --  runtime support. In particular, functions returning strings\n+   --  are banned since the sec stack is no longer functional.\n+   System.Standard_Library.Adafinal;\n+\n+   --  Check for special case of raising _ABORT_SIGNAL, which is not\n+   --  really an exception at all. We recognize this by the fact that\n+   --  it is the only exception whose name starts with underscore.\n+\n+   if Except.Id.Full_Name.all (1) = '_' then\n+      To_Stderr (Nline);\n+      To_Stderr (\"Execution terminated by abort of environment task\");\n+      To_Stderr (Nline);\n+\n+   --  If no tracebacks, we print the unhandled exception in the old style\n+   --  (i.e. the style used before ZCX was implemented). We do this to\n+   --  retain compatibility.\n+\n+   elsif Except.Num_Tracebacks = 0 then\n+      To_Stderr (Nline);\n+      To_Stderr (\"raised \");\n+      To_Stderr (Except.Id.Full_Name.all (1 .. Except.Id.Name_Length - 1));\n+\n+      if Msg'Length /= 0 then\n+         To_Stderr (\" : \");\n+         To_Stderr (Msg);\n+      end if;\n+\n+      To_Stderr (Nline);\n+\n+   else\n+      --  Traceback exists\n+\n+      --  Note we can have this whole information output twice if\n+      --  this occurrence gets reraised up to here.\n+\n+      To_Stderr (Nline);\n+      To_Stderr (\"Execution terminated by unhandled exception\");\n+      To_Stderr (Nline);\n+      To_Stderr (Exc_Info (1 .. Exc_Info_Last));\n+   end if;\n+\n+   Unhandled_Terminate;\n+\n+end Ada.Exceptions.Last_Chance_Handler;"}, {"sha": "7efbe0f55585247df092cec7c52c600e056c77b6", "filename": "gcc/ada/a-elchha.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fa-elchha.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fa-elchha.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-elchha.ads?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--    A D A . E X C E P T I O N S . L A S T _ C H A N C E _ H A N D L E R   --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2003 Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Last chance handler. Unhandled exceptions are passed to this\n+--  routine.\n+\n+procedure Ada.Exceptions.Last_Chance_Handler\n+  (Except :  Exception_Occurrence);\n+pragma Export (C,\n+               Last_Chance_Handler,\n+               \"__gnat_last_chance_handler\");\n+pragma No_Return (Last_Chance_Handler);"}, {"sha": "2f516b7fd1bd18d43dede5a6622dc5dfb7910569", "filename": "gcc/ada/a-exextr.adb", "status": "modified", "additions": 9, "deletions": 87, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fa-exextr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fa-exextr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exextr.adb?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -50,6 +50,14 @@ package body Exception_Traces is\n    pragma Export\n      (Ada, Raise_Hook_Initialized, \"__gnat_exception_actions_initialized\");\n \n+   procedure Last_Chance_Handler\n+     (Except :  Exception_Occurrence);\n+   pragma Import\n+     (C, Last_Chance_Handler, \"__gnat_last_chance_handler\");\n+   pragma No_Return (Last_Chance_Handler);\n+   --  Users can replace the default version of this routine,\n+   --  Ada.Exceptions.Last_Chance_Handler.\n+\n    function To_Action is new Unchecked_Conversion\n      (Raise_Action, Exception_Action);\n \n@@ -95,11 +103,6 @@ package body Exception_Traces is\n \n    pragma Propagate_Exceptions;\n \n-   procedure Unhandled_Terminate;\n-   pragma No_Return (Unhandled_Terminate);\n-   pragma Import (C, Unhandled_Terminate, \"__gnat_unhandled_terminate\");\n-   --  Perform system dependent shutdown code\n-\n    ----------------------\n    -- Notify_Exception --\n    ----------------------\n@@ -186,89 +189,8 @@ package body Exception_Traces is\n       --  could be overwritten if an exception is raised during finalization\n       --  (even if that exception is caught).\n \n-      Msg : constant String := Excep.Msg (1 .. Excep.Msg_Length);\n-\n-      Max_Static_Exc_Info : constant := 1024;\n-      --  That should be enough for most exception information cases\n-      --  eventhough tailorising introduces some uncertainty.  the\n-      --  name+message should not exceed 320 chars, so that leaves at\n-      --  least 35 backtrace slots (each slot needs 19 chars for\n-      --  representing a 64 bit address).\n-      --  And what happens on overflow ???\n-\n-      subtype Exc_Info_Type is String (1 .. Max_Static_Exc_Info);\n-      type Str_Ptr is access Exc_Info_Type;\n-      Exc_Info : Str_Ptr;\n-      Exc_Info_Last : Natural := 0;\n-      --  Buffer that is allocated to store the tailored exception\n-      --  information while Adafinal is run. This buffer is allocated\n-      --  on the heap only when it is needed. It is better to allocate\n-      --  on the heap than on the stack since stack overflows are more\n-      --  common that heap overflows.\n-\n-   --  Start of processing for Unhandled_Exception_Terminate\n-\n    begin\n-      --  First allocate & store the exception info in a buffer when\n-      --  we know it will be needed. This needs to be done before\n-      --  Adafinal because it implicitly uses the secondary stack.\n-\n-      if Excep.Id.Full_Name.all (1) /= '_'\n-        and then Excep.Num_Tracebacks /= 0\n-      then\n-         Exc_Info := new Exc_Info_Type;\n-         if Exc_Info /= null then\n-            Tailored_Exception_Information\n-              (Excep.all, Exc_Info.all, Exc_Info_Last);\n-         end if;\n-      end if;\n-\n-      --  Let's shutdown the runtime now. The rest of the procedure\n-      --  needs to be careful not to use anything that would require\n-      --  runtime support. In particular, function returing strings\n-      --  are banned since the sec stack is not functional anymore\n-\n-      System.Standard_Library.Adafinal;\n-\n-      --  Check for special case of raising _ABORT_SIGNAL, which is not\n-      --  really an exception at all. We recognize this by the fact that\n-      --  it is the only exception whose name starts with underscore.\n-\n-      if Excep.Id.Full_Name.all (1) = '_' then\n-         To_Stderr (Nline);\n-         To_Stderr (\"Execution terminated by abort of environment task\");\n-         To_Stderr (Nline);\n-\n-      --  If no tracebacks, we print the unhandled exception in the old style\n-      --  (i.e. the style used before ZCX was implemented). We do this to\n-      --  retain compatibility, especially with the nightly scripts, but\n-      --  this can be removed at some point ???\n-\n-      elsif Excep.Num_Tracebacks = 0 then\n-         To_Stderr (Nline);\n-         To_Stderr (\"raised \");\n-         To_Stderr (Excep.Id.Full_Name.all (1 .. Excep.Id.Name_Length - 1));\n-\n-         if Msg'Length /= 0 then\n-            To_Stderr (\" : \");\n-            To_Stderr (Msg);\n-         end if;\n-\n-         To_Stderr (Nline);\n-\n-      else\n-         --  Traceback exists\n-\n-         --  Note we can have this whole information output twice if\n-         --  this occurrence gets reraised up to here.\n-\n-         To_Stderr (Nline);\n-         To_Stderr (\"Execution terminated by unhandled exception\");\n-         To_Stderr (Nline);\n-         To_Stderr (Exc_Info (1 .. Exc_Info_Last));\n-      end if;\n-\n-      Unhandled_Terminate;\n+      Last_Chance_Handler (Excep.all);\n    end Unhandled_Exception_Terminate;\n \n    ---------------"}, {"sha": "6f3e666776b3460002dbdce0f0eb8d93cbb47d93", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -1941,6 +1941,7 @@ package body Exp_Ch6 is\n                Bod         : Node_Id;\n                Must_Inline : Boolean := False;\n                Spec        : constant Node_Id := Unit_Declaration_Node (Subp);\n+               Scop        : constant Entity_Id := Scope (Subp);\n \n             begin\n                --  Verify that the body to inline has already been seen,\n@@ -1954,6 +1955,26 @@ package body Exp_Ch6 is\n                then\n                   Must_Inline := False;\n \n+               --  If this an inherited function that returns a private\n+               --  type, do not inline if the full view is an unconstrained\n+               --  array, because such calls cannot be inlined.\n+\n+               elsif Present (Orig_Subp)\n+                 and then Is_Array_Type (Etype (Orig_Subp))\n+                 and then not Is_Constrained (Etype (Orig_Subp))\n+               then\n+                  Must_Inline := False;\n+\n+               --  If the subprogram comes from an instance in the same\n+               --  unit, and the instance is not yet frozen, inlining might\n+               --  trigger order-of-elaboration problems in gigi.\n+\n+               elsif Is_Generic_Instance (Scop)\n+                 and then Present (Freeze_Node (Scop))\n+                 and then not Analyzed (Freeze_Node (Scop))\n+               then\n+                  Must_Inline := False;\n+\n                else\n                   Bod := Body_To_Inline (Spec);\n \n@@ -2531,7 +2552,8 @@ package body Exp_Ch6 is\n             Temp_Typ := Etype (A);\n          end if;\n \n-         --  Comments needed here ???\n+         --  If the actual is a simple name or a literal, no need to\n+         --  create a temporary, object can be used directly.\n \n          if (Is_Entity_Name (A)\n               and then"}, {"sha": "e3eaa23b039d06e56ac9604b584793ff907cfcb8", "filename": "gcc/ada/g-table.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fg-table.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fg-table.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.adb?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 1998-2002 Ada Core Technologies, Inc.           --\n+--            Copyright (C) 1998-2003 Ada Core Technologies, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -224,7 +224,7 @@ package body GNAT.Table is\n       Item  : Table_Component_Type)\n    is\n    begin\n-      if Integer (Index) > Max then\n+      if Integer (Index) > Last_Val then\n          Set_Last (Index);\n       end if;\n "}, {"sha": "77235fd8502e81dd57c63f9933019f211bd5c231", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -9631,6 +9631,10 @@ package body Sem_Prag is\n                   E_Id := Expression (Arg2);\n                   Analyze (E_Id);\n \n+                  --  In the expansion of an inlined body, a reference to\n+                  --  the formal may be wrapped in a conversion if the actual\n+                  --  is a conversion. Retrieve the real entity name.\n+\n                   if In_Instance_Body\n                     and then Nkind (E_Id) = N_Unchecked_Type_Conversion\n                   then"}, {"sha": "2387cec446f05914276adaceb14a7ac158f4f268", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4994bc7605b15cda980714cb4b9db3ad1f3771/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=5b4994bc7605b15cda980714cb4b9db3ad1f3771", "patch": "@@ -97,7 +97,7 @@ package body Switch.C is\n             when False =>\n \n             --  There are few front-end switches that\n-            --  do not start with -gnat: -I, --RTS, -nostdlib\n+            --  do not start with -gnat: -I, --RTS\n \n                if Switch_Chars (Ptr) = 'I' then\n                   Store_Switch := False;\n@@ -119,14 +119,6 @@ package body Switch.C is\n \n                   Ptr := Max + 1;\n \n-               --  Processing of -nostdlib\n-\n-               elsif Ptr + 7 = Max\n-                 and then Switch_Chars (Ptr .. Ptr + 7) = \"nostdlib\"\n-               then\n-                  Opt.No_Stdlib := True;\n-                  Ptr := Max + 1;\n-\n                --  Processing of the --RTS switch. --RTS has been modified by\n                --  gcc and is now of the form -fRTS\n "}]}