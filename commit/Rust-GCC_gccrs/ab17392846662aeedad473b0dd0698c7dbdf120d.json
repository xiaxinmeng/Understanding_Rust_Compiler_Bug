{"sha": "ab17392846662aeedad473b0dd0698c7dbdf120d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIxNzM5Mjg0NjY2MmFlZWRhZDQ3M2IwZGQwNjk4YzdkYmRmMTIwZA==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-08-31T07:49:27Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2005-08-31T07:49:27Z"}, "message": "builtins.c: (expand_builtin_strcpy...\n\n2005-08-31  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* builtins.c: (expand_builtin_strcpy, expand_builtin_strcat): Change\n\targuments, adjust all callers.\n\t(expand_builtin_strcat): Rewrite to call strcpy instead of mempcpy.\n\nFrom-SVN: r103661", "tree": {"sha": "7b1acf6677799a7fcd1413dacb55322d7ca89a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1acf6677799a7fcd1413dacb55322d7ca89a61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab17392846662aeedad473b0dd0698c7dbdf120d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab17392846662aeedad473b0dd0698c7dbdf120d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab17392846662aeedad473b0dd0698c7dbdf120d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab17392846662aeedad473b0dd0698c7dbdf120d/comments", "author": null, "committer": null, "parents": [{"sha": "fabaaf3678cfd69f97e166e12c30dfa38ec5155c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabaaf3678cfd69f97e166e12c30dfa38ec5155c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabaaf3678cfd69f97e166e12c30dfa38ec5155c"}], "stats": {"total": 107, "additions": 56, "deletions": 51}, "files": [{"sha": "94a82fab066a052ef06508df00423f26ef06b4a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab17392846662aeedad473b0dd0698c7dbdf120d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab17392846662aeedad473b0dd0698c7dbdf120d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab17392846662aeedad473b0dd0698c7dbdf120d", "patch": "@@ -1,3 +1,9 @@\n+2005-08-31  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* builtins.c: (expand_builtin_strcpy, expand_builtin_strcat): Change\n+\targuments, adjust all callers.\n+\t(expand_builtin_strcat): Rewrite to call strcpy instead of mempcpy.\n+\n 2005-08-30  Richard Henderson  <rth@redhat.com>\n \n \tPR target/23630"}, {"sha": "da8c1d41c7e2f28442ca4ba4cc19178479682228", "filename": "gcc/builtins.c", "status": "modified", "additions": 50, "deletions": 51, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab17392846662aeedad473b0dd0698c7dbdf120d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab17392846662aeedad473b0dd0698c7dbdf120d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ab17392846662aeedad473b0dd0698c7dbdf120d", "patch": "@@ -113,7 +113,7 @@ static rtx expand_builtin_memcpy (tree, rtx, enum machine_mode);\n static rtx expand_builtin_mempcpy (tree, tree, rtx, enum machine_mode, int);\n static rtx expand_builtin_memmove (tree, tree, rtx, enum machine_mode, tree);\n static rtx expand_builtin_bcopy (tree);\n-static rtx expand_builtin_strcpy (tree, rtx, enum machine_mode);\n+static rtx expand_builtin_strcpy (tree, tree, rtx, enum machine_mode);\n static rtx expand_builtin_stpcpy (tree, rtx, enum machine_mode);\n static rtx builtin_strncpy_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n static rtx expand_builtin_strncpy (tree, rtx, enum machine_mode);\n@@ -3178,10 +3178,8 @@ expand_movstr (tree dest, tree src, rtx target, int endp)\n    convenient).  */\n \n static rtx\n-expand_builtin_strcpy (tree exp, rtx target, enum machine_mode mode)\n+expand_builtin_strcpy (tree fndecl, tree arglist, rtx target, enum machine_mode mode)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   if (validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     {\n       tree result = fold_builtin_strcpy (fndecl, arglist, 0);\n@@ -3250,7 +3248,8 @@ expand_builtin_stpcpy (tree exp, rtx target, enum machine_mode mode)\n \n \t  if (GET_CODE (len_rtx) == CONST_INT)\n \t    {\n-\t      ret = expand_builtin_strcpy (exp, target, mode);\n+\t      ret = expand_builtin_strcpy (get_callee_fndecl (exp), \n+\t\t\t\t\t   arglist, target, mode);\n \n \t      if (ret)\n \t\t{\n@@ -3916,61 +3915,61 @@ expand_builtin_strncmp (tree exp, rtx target, enum machine_mode mode)\n    otherwise try to get the result in TARGET, if convenient.  */\n \n static rtx\n-expand_builtin_strcat (tree arglist, tree type, rtx target, enum machine_mode mode)\n+expand_builtin_strcat (tree fndecl, tree arglist, rtx target, enum machine_mode mode)\n {\n   if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return 0;\n   else\n     {\n       tree dst = TREE_VALUE (arglist),\n-\tsrc = TREE_VALUE (TREE_CHAIN (arglist));\n+      src = TREE_VALUE (TREE_CHAIN (arglist));\n       const char *p = c_getstr (src);\n \n-      if (p)\n+      /* If the string length is zero, return the dst parameter.  */\n+      if (p && *p == '\\0')\t  \n+\treturn expand_expr (dst, target, mode, EXPAND_NORMAL);\n+      \n+      if (!optimize_size)\n \t{\n-\t  /* If the string length is zero, return the dst parameter.  */\n-\t  if (*p == '\\0')\n-\t    return expand_expr (dst, target, mode, EXPAND_NORMAL);\n-\t  else if (!optimize_size)\n+\t  /* See if we can store by pieces into (dst + strlen(dst)).  */\n+\t  tree newsrc, newdst,\n+\t    strlen_fn = implicit_built_in_decls[BUILT_IN_STRLEN];\n+\t  rtx insns;\n+\n+\t  /* Stabilize the argument list.  */\n+\t  newsrc = builtin_save_expr (src);\n+\t  if (newsrc != src)\n+\t    arglist = build_tree_list (NULL_TREE, newsrc);\n+\t  else \n+\t    arglist = TREE_CHAIN (arglist); /* Reusing arglist if safe.  */\n+\n+\t  dst = builtin_save_expr (dst);\n+\n+\t  start_sequence ();\n+\n+\t  /* Create strlen (dst).  */\n+\t  newdst =\n+\t    build_function_call_expr (strlen_fn,\n+\t\t\t\t      build_tree_list (NULL_TREE, dst));\n+\t  /* Create (dst + (cast) strlen (dst)).  */\n+\t  newdst = fold_convert (TREE_TYPE (dst), newdst);\n+\t  newdst = fold_build2 (PLUS_EXPR, TREE_TYPE (dst), dst, newdst);\n+\n+\t  newdst = builtin_save_expr (newdst);\n+\t  arglist = tree_cons (NULL_TREE, newdst, arglist);\n+\n+\t  if (!expand_builtin_strcpy (fndecl, arglist, target, mode))\n \t    {\n-\t      /* Otherwise if !optimize_size, see if we can store by\n-                 pieces into (dst + strlen(dst)).  */\n-\t      tree newdst, arglist,\n-\t\tstrlen_fn = implicit_built_in_decls[BUILT_IN_STRLEN];\n-\n-\t      /* This is the length argument.  */\n-\t      arglist = build_tree_list (NULL_TREE,\n-\t\t\t\t\t fold (size_binop (PLUS_EXPR,\n-\t\t\t\t\t\t\t   c_strlen (src, 0),\n-\t\t\t\t\t\t\t   ssize_int (1))));\n-\t      /* Prepend src argument.  */\n-\t      arglist = tree_cons (NULL_TREE, src, arglist);\n-\n-\t      /* We're going to use dst more than once.  */\n-\t      dst = builtin_save_expr (dst);\n-\n-\t      /* Create strlen (dst).  */\n-\t      newdst =\n-\t\tbuild_function_call_expr (strlen_fn,\n-\t\t\t\t\t  build_tree_list (NULL_TREE, dst));\n-\t      /* Create (dst + (cast) strlen (dst)).  */\n-\t      newdst = fold_convert (TREE_TYPE (dst), newdst);\n-\t      newdst = fold_build2 (PLUS_EXPR, TREE_TYPE (dst), dst, newdst);\n-\n-\t      /* Prepend the new dst argument.  */\n-\t      arglist = tree_cons (NULL_TREE, newdst, arglist);\n-\n-\t      /* We don't want to get turned into a memcpy if the\n-                 target is const0_rtx, i.e. when the return value\n-                 isn't used.  That would produce pessimized code so\n-                 pass in a target of zero, it should never actually be\n-                 used.  If this was successful return the original\n-                 dst, not the result of mempcpy.  */\n-\t      if (expand_builtin_mempcpy (arglist, type, /*target=*/0, mode, /*endp=*/0))\n-\t\treturn expand_expr (dst, target, mode, EXPAND_NORMAL);\n-\t      else\n-\t\treturn 0;\n+\t      end_sequence (); /* Stop sequence.  */\n+\t      return 0;\n \t    }\n+\t  \n+\t  /* Output the entire sequence.  */\n+\t  insns = get_insns ();\n+\t  end_sequence ();\n+\t  emit_insn (insns);\n+\t  \n+\t  return expand_expr (dst, target, mode, EXPAND_NORMAL);\n \t}\n \n       return 0;\n@@ -5919,7 +5918,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     case BUILT_IN_STRCPY:\n-      target = expand_builtin_strcpy (exp, target, mode);\n+      target = expand_builtin_strcpy (fndecl, arglist, target, mode);\n       if (target)\n \treturn target;\n       break;\n@@ -5937,7 +5936,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     case BUILT_IN_STRCAT:\n-      target = expand_builtin_strcat (arglist, TREE_TYPE (exp), target, mode);\n+      target = expand_builtin_strcat (fndecl, arglist, target, mode);\n       if (target)\n \treturn target;\n       break;"}]}