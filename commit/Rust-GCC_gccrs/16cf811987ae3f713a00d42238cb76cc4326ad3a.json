{"sha": "16cf811987ae3f713a00d42238cb76cc4326ad3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjZjgxMTk4N2FlM2Y3MTNhMDBkNDIyMzhjYjc2Y2M0MzI2YWQzYQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@pierdol.cobaltmicro.com", "date": "1998-08-11T23:50:23Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-08-11T23:50:23Z"}, "message": "sparc.md (define_insn addx_extend): Rename to addx_extend_sp64, only allow when TARGET_ARCH64.\n\n\t* config/sparc/sparc.md (define_insn addx_extend): Rename to\n\taddx_extend_sp64, only allow when TARGET_ARCH64.\n\t(define_insn addx_extend_sp32 and split): Version that works when\n\tnot TARGET_ARCH64.\n\t(define_insn subx_extend): Likewise.\n\t(define_split adddi3 and subdi3 with zero extension): Fixup and\n\tcorrect bugs when not TARGET_ARCH64.\n\nFrom-SVN: r21677", "tree": {"sha": "f70da573021120b4114c290f6035292042730100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f70da573021120b4114c290f6035292042730100"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16cf811987ae3f713a00d42238cb76cc4326ad3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16cf811987ae3f713a00d42238cb76cc4326ad3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16cf811987ae3f713a00d42238cb76cc4326ad3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16cf811987ae3f713a00d42238cb76cc4326ad3a/comments", "author": null, "committer": null, "parents": [{"sha": "abf82aabd14f1736ee2014dc0ae199024635af0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf82aabd14f1736ee2014dc0ae199024635af0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abf82aabd14f1736ee2014dc0ae199024635af0b"}], "stats": {"total": 96, "additions": 78, "deletions": 18}, "files": [{"sha": "7e6b5d0ae87b6dea7fdadbe6bda479de2523c414", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cf811987ae3f713a00d42238cb76cc4326ad3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cf811987ae3f713a00d42238cb76cc4326ad3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16cf811987ae3f713a00d42238cb76cc4326ad3a", "patch": "@@ -1,3 +1,13 @@\n+Tue Aug 11 22:42:01 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n+\n+\t* config/sparc/sparc.md (define_insn addx_extend): Rename to\n+\taddx_extend_sp64, only allow when TARGET_ARCH64.\n+\t(define_insn addx_extend_sp32 and split): Version that works when\n+\tnot TARGET_ARCH64.\n+\t(define_insn subx_extend): Likewise.\n+\t(define_split adddi3 and subdi3 with zero extension): Fixup and\n+\tcorrect bugs when not TARGET_ARCH64.\n+\n Tue Aug 11 16:04:34 1998  John Carr  <jfc@mit.edu>\n \n \t* except.c (set_exception_lang_code, set_exception_version_code):"}, {"sha": "2245b363e68894fc500d39c57214d268007c9bcb", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 68, "deletions": 18, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cf811987ae3f713a00d42238cb76cc4326ad3a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cf811987ae3f713a00d42238cb76cc4326ad3a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=16cf811987ae3f713a00d42238cb76cc4326ad3a", "patch": "@@ -4444,12 +4444,34 @@ movtf_is_ok:\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"*addx_extend\"\n+(define_insn \"*addx_extend_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:SI (plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ\")\n \t\t\t  (match_operand:SI 2 \"arith_operand\" \"rI\"))\n \t\t (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n-  \"\"\n+  \"! TARGET_ARCH64\"\n+  \"#\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(plus:SI (plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n+\t\t\t  (match_operand:SI 2 \"arith_operand\" \"\"))\n+\t\t (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n+  \"! TARGET_ARCH64 && reload_completed\"\n+  [(set (match_dup 3) (plus:SI (plus:SI (match_dup 1) (match_dup 2))\n+                               (ltu:SI (reg:CC_NOOV 100) (const_int 0))))\n+   (set (match_dup 4) (const_int 0))]\n+  \"operands[3] = gen_lowpart (SImode, operands[0]);\n+   operands[4] = gen_highpart (SImode, operands[1]);\")\n+\n+(define_insn \"*addx_extend_sp64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ\")\n+\t\t\t  (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n+  \"TARGET_ARCH64\"\n   \"addx\\\\t%r1, %2, %0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"1\")])\n@@ -4464,16 +4486,38 @@ movtf_is_ok:\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"*subx_extend\"\n+(define_insn \"*subx_extend_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:SI (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n \t\t  (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n-  \"\"\n+  \"TARGET_ARCH64\"\n   \"subx\\\\t%r1, %2, %0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"1\")])\n \n+(define_insn \"*subx_extend\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n+\t\t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t  (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n+  \"! TARGET_ARCH64\"\n+  \"#\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n+\t\t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t  (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n+  \"! TARGET_ARCH64 && reload_completed\"\n+  [(set (match_dup 3) (minus:SI (minus:SI (match_dup 1) (match_dup 2))\n+                                (ltu:SI (reg:CC_NOOV 100) (const_int 0))))\n+   (set (match_dup 4) (const_int 0))]\n+  \"operands[3] = gen_lowpart (SImode, operands[0]);\n+   operands[4] = gen_highpart (SImode, operands[0]);\")\n+\n ;; This is only for splits at the moment.\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -4487,8 +4531,8 @@ movtf_is_ok:\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-      (plus:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-               (match_operand:DI 2 \"register_operand\" \"r\")))\n+        (plus:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+                 (match_operand:DI 2 \"register_operand\" \"r\")))\n    (clobber (reg:CC 100))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n@@ -4501,14 +4545,17 @@ movtf_is_ok:\n                  (match_operand:DI 2 \"register_operand\" \"\")))\n    (clobber (reg:CC 100))]\n   \"! TARGET_ARCH64\"\n-  [(set (reg:CC_NOOV 100)\n-        (compare:CC_NOOV (plus:SI (match_dup 3) (match_dup 1))\n-                         (const_int 0)))\n-   (set (match_dup 0)\n+  [(parallel [(set (reg:CC_NOOV 100)\n+                   (compare:CC_NOOV (plus:SI (match_dup 3) (match_dup 1))\n+                                    (const_int 0)))\n+              (set (match_dup 5) (plus:SI (match_dup 3) (match_dup 1)))])\n+   (set (match_dup 6)\n         (plus:SI (plus:SI (match_dup 4) (const_int 0))\n                  (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n   \"operands[3] = gen_lowpart (SImode, operands[2]);\n-   operands[4] = gen_highpart (SImode, operands[2]);\")\n+   operands[4] = gen_highpart (SImode, operands[2]);\n+   operands[5] = gen_lowpart (SImode, operands[0]);\n+   operands[6] = gen_highpart (SImode, operands[0]);\")\n \n (define_insn \"*adddi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -4672,14 +4719,17 @@ movtf_is_ok:\n                   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"\"))))\n    (clobber (reg:CC 100))]\n   \"! TARGET_ARCH64\"\n-  [(set (reg:CC_NOOV 100)\n-        (compare:CC_NOOV (minus:SI (match_dup 3) (match_dup 2))\n-                         (const_int 0)))\n-   (set (match_dup 0)\n-        (plus:SI (plus:SI (match_dup 4) (const_int 0))\n-                 (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n+  [(parallel [(set (reg:CC_NOOV 100)\n+                   (compare:CC_NOOV (minus:SI (match_dup 3) (match_dup 2))\n+                                    (const_int 0)))\n+              (set (match_dup 5) (minus:SI (match_dup 3) (match_dup 2)))])\n+   (set (match_dup 6)\n+        (minus:SI (minus:SI (match_dup 4) (const_int 0))\n+                  (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n   \"operands[3] = gen_lowpart (SImode, operands[1]);\n-   operands[4] = gen_highpart (SImode, operands[1]);\")\n+   operands[4] = gen_highpart (SImode, operands[1]);\n+   operands[5] = gen_lowpart (SImode, operands[0]);\n+   operands[6] = gen_highpart (SImode, operands[0]);\")\n \n (define_insn \"*subdi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}]}