{"sha": "653a996d860db18ac866140102109f8fb30b8670", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUzYTk5NmQ4NjBkYjE4YWM4NjYxNDAxMDIxMDlmOGZiMzBiODY3MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-31T22:17:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-31T22:17:13Z"}, "message": "(alpha_builtin_saveregs): Properly compute address of __offset both\nboth OSF and WINNT.\n\nFrom-SVN: r10300", "tree": {"sha": "0ac0bf42672fbfbb35fb1f3d7e0cd2a18aac8382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ac0bf42672fbfbb35fb1f3d7e0cd2a18aac8382"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/653a996d860db18ac866140102109f8fb30b8670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653a996d860db18ac866140102109f8fb30b8670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/653a996d860db18ac866140102109f8fb30b8670", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653a996d860db18ac866140102109f8fb30b8670/comments", "author": null, "committer": null, "parents": [{"sha": "1d820a2a0d8f41f94df565d8053873b7a4adf198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d820a2a0d8f41f94df565d8053873b7a4adf198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d820a2a0d8f41f94df565d8053873b7a4adf198"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "e26e8bed9fe87e469645221c789ee13b81bb0a28", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653a996d860db18ac866140102109f8fb30b8670/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653a996d860db18ac866140102109f8fb30b8670/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=653a996d860db18ac866140102109f8fb30b8670", "patch": "@@ -1158,14 +1158,12 @@ alpha_builtin_saveregs (arglist)\n \n   addr = force_operand (addr, NULL_RTX);\n \n-  /* Allocate the va_list constructor */\n+-  /* Allocate the va_list constructor */\n   block = assign_stack_local (BLKmode, 2 * UNITS_PER_WORD, BITS_PER_WORD);\n   RTX_UNCHANGING_P (block) = 1;\n   RTX_UNCHANGING_P (XEXP (block, 0)) = 1;\n \n-  /* Store the address of the first integer register in the __base member.\n-     Note that our offsets are correct for both 32- and 64-bit pointers\n-     due to the alignment of the __offset field (a long).  */\n+  /* Store the address of the first integer register in the __base member.  */\n \n #ifdef POINTERS_EXTEND_UNSIGNED\n   addr = convert_memory_address (ptr_mode, addr);\n@@ -1174,10 +1172,10 @@ alpha_builtin_saveregs (arglist)\n   emit_move_insn (change_address (block, ptr_mode, XEXP (block, 0)), addr);\n \n   /* Store the argsize as the __va_offset member.  */\n-  emit_move_insn (change_address (block, ptr_mode,\n+  emit_move_insn (change_address (block, TYPE_MODE (integer_type_node),\n \t\t\t\t  plus_constant (XEXP (block, 0),\n-\t\t\t\t\t\t GET_MODE_SIZE (ptr_mode))),\n-\t\t  force_operand (argsize, NULL_RTX));\n+\t\t\t\t\t\t POINTER_SIZE/BITS_PER_UNIT)),\n+\t\t  argsize);\n \n   /* Return the address of the va_list constructor, but don't put it in a\n      register.  Doing so would fail when not optimizing and produce worse"}]}