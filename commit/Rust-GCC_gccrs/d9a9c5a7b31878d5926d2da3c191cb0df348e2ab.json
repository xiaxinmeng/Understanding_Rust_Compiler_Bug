{"sha": "d9a9c5a7b31878d5926d2da3c191cb0df348e2ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhOWM1YTdiMzE4NzhkNTkyNmQyZGEzYzE5MWNiMGRmMzQ4ZTJhYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-28T10:16:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-28T10:16:57Z"}, "message": "(convert_to_integer): When we want to return zero, be sure we honor\nany side-effects in our operand.\n\nFrom-SVN: r4255", "tree": {"sha": "8cd22dd5e09259b9190a5755aeae38042ba9a184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cd22dd5e09259b9190a5755aeae38042ba9a184"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9a9c5a7b31878d5926d2da3c191cb0df348e2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a9c5a7b31878d5926d2da3c191cb0df348e2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9a9c5a7b31878d5926d2da3c191cb0df348e2ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a9c5a7b31878d5926d2da3c191cb0df348e2ab/comments", "author": null, "committer": null, "parents": [{"sha": "3dc4a939b9f5f053b924c1f6451be638983ab233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dc4a939b9f5f053b924c1f6451be638983ab233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dc4a939b9f5f053b924c1f6451be638983ab233"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "d073ac3ee625fa707334b60cdc9db2803ec4a85e", "filename": "gcc/convert.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a9c5a7b31878d5926d2da3c191cb0df348e2ab/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a9c5a7b31878d5926d2da3c191cb0df348e2ab/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=d9a9c5a7b31878d5926d2da3c191cb0df348e2ab", "patch": "@@ -199,11 +199,22 @@ convert_to_integer (type, expr)\n \t\t/* In this case, shifting is like multiplication.  */\n \t\tgoto trunc1;\n \t      else\n-\t\t/* If it is >= that width, result is zero.\n-\t\t   Handling this with trunc1 would give the wrong result:\n-\t\t   (int) ((long long) a << 32) is well defined (as 0)\n-\t\t   but (int) a << 32 is undefined and would get a warning.  */\n-\t\treturn convert_to_integer (type, integer_zero_node);\n+\t\t{\n+\t\t  /* If it is >= that width, result is zero.\n+\t\t     Handling this with trunc1 would give the wrong result:\n+\t\t     (int) ((long long) a << 32) is well defined (as 0)\n+\t\t     but (int) a << 32 is undefined and would get a\n+\t\t     warning.  */\n+\n+\t\t  tree t = convert_to_integer (type, integer_zero_node);\n+\n+\t\t  /* If the original expression had side-effects, we must\n+\t\t     preserve it.  */\n+\t\t  if (TREE_SIDE_EFFECTS (expr))\n+\t\t    return build (COMPOUND_EXPR, type, expr, t);\n+\t\t  else\n+\t\t    return t;\n+\t\t}\n \t    }\n \t  break;\n "}]}