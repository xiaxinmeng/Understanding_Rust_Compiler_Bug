{"sha": "dbeaa7ab81a37acadc9af6e7990332604252de20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlYWE3YWI4MWEzN2FjYWRjOWFmNmU3OTkwMzMyNjA0MjUyZGUyMA==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-04-23T09:33:14Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-05-11T08:27:32Z"}, "message": "Fortran : Spurious warning message with -Wsurprising PR59107\n\nThis change is from a patch developed for gcc-5.  The code\nhas moved on since then requiring a change to interface.c\n\n2020-05-11  Janus Weil  <janus@gcc.gnu.org>\n\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n\ngcc/fortran/\n\n\tPR fortran/59107\n\t* gfortran.h: Rename field resolved as resolve_symbol_called\n\tand assign two 2 bits instead of 1.\n\t* interface.c (check_dtio_interface1): Use new field name.\n\t(gfc_find_typebound_dtio_proc): Use new field name.\n\t* resolve.c (gfc_resolve_intrinsic): Replace check of the formal\n\tfield with resolve_symbol_called is at least 2, if it is not\n\tset the field to 2.  (resolve_typebound_procedure): Use new field\n\tname.  (resolve_symbol): Use new field name and check whether it\n\tis at least 1, if it is not set the field to 1.\n\n2020-05-11  Mark Eggleston  <markeggleston@gcc.gnu.org>\n\ngcc/testsuite/\n\n\tPR fortran/59107\n\t* gfortran.dg/pr59107.f90: New test.", "tree": {"sha": "42a646f5e6eb6cedfaf2cdcc4eb2f131c395bf65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42a646f5e6eb6cedfaf2cdcc4eb2f131c395bf65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbeaa7ab81a37acadc9af6e7990332604252de20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbeaa7ab81a37acadc9af6e7990332604252de20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbeaa7ab81a37acadc9af6e7990332604252de20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbeaa7ab81a37acadc9af6e7990332604252de20/comments", "author": null, "committer": null, "parents": [{"sha": "850322dff702aa538919daf165d3dff5c8f723ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850322dff702aa538919daf165d3dff5c8f723ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/850322dff702aa538919daf165d3dff5c8f723ca"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "005f68668dd2cdd8e2b2a1f4266135c860c80c0a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dbeaa7ab81a37acadc9af6e7990332604252de20", "patch": "@@ -1,3 +1,17 @@\n+2020-05-11  Janus Weil  <janus@gcc.gnu.org>\n+\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n+    \n+\tPR fortran/59107\n+\t* gfortran.h: Rename field resolved as resolve_symbol_called\n+\tand assign two 2 bits instead of 1.\n+\t* interface.c (check_dtio_interface1): Use new field name.\n+\t(gfc_find_typebound_dtio_proc): Use new field name.\n+\t* resolve.c (gfc_resolve_intrinsic): Replace check of the formal\n+\tfield with resolve_symbol_called is at least 2, if it is not\n+\tset the field to 2.  (resolve_typebound_procedure): Use new field\n+\tname.  (resolve_symbol): Use new field name and check whether it\n+\tis at least 1, if it is not set the field to 1.\n+\n 2020-05-10  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/93499"}, {"sha": "7094791e8716c4dd9129fd29b8bd5b05d87f2f3b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=dbeaa7ab81a37acadc9af6e7990332604252de20", "patch": "@@ -1621,7 +1621,10 @@ typedef struct gfc_symbol\n   /* Set if the symbol is used in a function result specification .  */\n   unsigned fn_result_spec:1;\n   /* Used to avoid multiple resolutions of a single symbol.  */\n-  unsigned resolved:1;\n+  /* = 2 if this has already been resolved as an intrinsic,\n+       in gfc_resolve_intrinsic,\n+     = 1 if it has been resolved in resolve_symbol.  */\n+  unsigned resolve_symbol_called:2;\n   /* Set if this is a module function or subroutine with the\n      abreviated declaration in a submodule.  */\n   unsigned abr_modproc_decl:1;"}, {"sha": "f33c6632b45b53033367d671a3da95af982aae94", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=dbeaa7ab81a37acadc9af6e7990332604252de20", "patch": "@@ -5015,7 +5015,7 @@ check_dtio_interface1 (gfc_symbol *derived, gfc_symtree *tb_io_st,\n     gfc_error (\"DTIO procedure %qs at %L must be a subroutine\",\n \t       dtio_sub->name, &dtio_sub->declared_at);\n \n-  if (!dtio_sub->resolved)\n+  if (!dtio_sub->resolve_symbol_called)\n     gfc_resolve_formal_arglist (dtio_sub);\n \n   arg_num = 0;\n@@ -5149,7 +5149,8 @@ gfc_find_typebound_dtio_proc (gfc_symbol *derived, bool write, bool formatted)\n   gfc_symtree *tb_io_st = NULL;\n   bool t = false;\n \n-  if (!derived || !derived->resolved || derived->attr.flavor != FL_DERIVED)\n+  if (!derived || !derived->resolve_symbol_called\n+      || derived->attr.flavor != FL_DERIVED)\n     return NULL;\n \n   /* Try to find a typebound DTIO binding.  */"}, {"sha": "88ba88d8bf300e676f06ff76fc5194d841b5331b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=dbeaa7ab81a37acadc9af6e7990332604252de20", "patch": "@@ -1753,9 +1753,11 @@ gfc_resolve_intrinsic (gfc_symbol *sym, locus *loc)\n   gfc_intrinsic_sym* isym = NULL;\n   const char* symstd;\n \n-  if (sym->formal)\n+  if (sym->resolve_symbol_called >= 2)\n     return true;\n \n+  sym->resolve_symbol_called = 2;\n+\n   /* Already resolved.  */\n   if (sym->from_intmod && sym->ts.type != BT_UNKNOWN)\n     return true;\n@@ -13909,7 +13911,7 @@ resolve_typebound_procedure (gfc_symtree* stree)\n     {\n       /* If proc has not been resolved at this point, proc->name may\n \t actually be a USE associated entity. See PR fortran/89647. */\n-      if (!proc->resolved\n+      if (!proc->resolve_symbol_called\n \t  && proc->attr.function == 0 && proc->attr.subroutine == 0)\n \t{\n \t  gfc_symbol *tmp;\n@@ -15154,9 +15156,9 @@ resolve_symbol (gfc_symbol *sym)\n   gfc_array_spec *as;\n   bool saved_specification_expr;\n \n-  if (sym->resolved)\n+  if (sym->resolve_symbol_called >= 1)\n     return;\n-  sym->resolved = 1;\n+  sym->resolve_symbol_called = 1;\n \n   /* No symbol will ever have union type; only components can be unions.\n      Union type declaration symbols have type BT_UNKNOWN but flavor FL_UNION"}, {"sha": "ea329c740a36cd62f87a25be15931543a238070b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dbeaa7ab81a37acadc9af6e7990332604252de20", "patch": "@@ -1,3 +1,8 @@\n+2020-05-11  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+    \n+\tPR fortran/59107\n+\t* gfortran.dg/pr59107.f90: New test.\n+\n 2020-05-11  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n \n \tPR tree-optimization/83403"}, {"sha": "a84328f08519eef5ea7083154315c57b6f752364", "filename": "gcc/testsuite/gfortran.dg/pr59107.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59107.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbeaa7ab81a37acadc9af6e7990332604252de20/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59107.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59107.f90?ref=dbeaa7ab81a37acadc9af6e7990332604252de20", "patch": "@@ -0,0 +1,11 @@\n+! { dg-compile }\n+! { dg-options \"-Wsurprising\" }\n+\n+! There should be no surprising warnings\n+\n+program p\n+  Integer :: nargs\n+  intrinsic :: command_argument_count\n+  nargs = command_argument_count()\n+end\n+"}]}