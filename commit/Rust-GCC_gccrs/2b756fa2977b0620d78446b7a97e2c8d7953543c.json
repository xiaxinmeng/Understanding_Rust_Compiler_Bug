{"sha": "2b756fa2977b0620d78446b7a97e2c8d7953543c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI3NTZmYTI5NzdiMDYyMGQ3ODQ0NmI3YTk3ZTJjOGQ3OTUzNTQzYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-08-02T18:08:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-08-02T18:08:58Z"}, "message": "re PR c++/49834 ([C++0x] type deduction in for-each loop in template function)\n\n\tPR c++/49834\n\t* parser.c (build_range_temp): Split out from...\n\t(cp_convert_range_for): ...here.\n\t(do_range_for_auto_deduction): New.\n\t(cp_parser_range_for): Use it.\n\nFrom-SVN: r177199", "tree": {"sha": "877c7816cb34d419062402adb5b5edd7c41f80f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/877c7816cb34d419062402adb5b5edd7c41f80f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b756fa2977b0620d78446b7a97e2c8d7953543c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b756fa2977b0620d78446b7a97e2c8d7953543c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b756fa2977b0620d78446b7a97e2c8d7953543c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b756fa2977b0620d78446b7a97e2c8d7953543c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "979d459888df360b584c17ca72d7a9b76fe50f52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979d459888df360b584c17ca72d7a9b76fe50f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979d459888df360b584c17ca72d7a9b76fe50f52"}], "stats": {"total": 107, "additions": 95, "deletions": 12}, "files": [{"sha": "bba80e889184dbf7ddacc09800ab254de322abcc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b756fa2977b0620d78446b7a97e2c8d7953543c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b756fa2977b0620d78446b7a97e2c8d7953543c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2b756fa2977b0620d78446b7a97e2c8d7953543c", "patch": "@@ -1,3 +1,11 @@\n+2011-08-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49834\n+\t* parser.c (build_range_temp): Split out from...\n+\t(cp_convert_range_for): ...here.\n+\t(do_range_for_auto_deduction): New.\n+\t(cp_parser_range_for): Use it.\n+\n 2011-08-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-tree.h (finish_omp_atomic): Adjust prototype."}, {"sha": "2d8f457e737926896ff9e723c25ac082bf210e01", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b756fa2977b0620d78446b7a97e2c8d7953543c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b756fa2977b0620d78446b7a97e2c8d7953543c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2b756fa2977b0620d78446b7a97e2c8d7953543c", "patch": "@@ -1629,6 +1629,8 @@ static tree cp_parser_c_for\n   (cp_parser *, tree, tree);\n static tree cp_parser_range_for\n   (cp_parser *, tree, tree, tree);\n+static void do_range_for_auto_deduction\n+  (tree, tree);\n static tree cp_parser_perform_range_for_lookup\n   (tree, tree *, tree *);\n static tree cp_parser_range_for_member_function\n@@ -8673,6 +8675,7 @@ cp_parser_range_for (cp_parser *parser, tree scope, tree init, tree range_decl)\n     {\n       stmt = begin_range_for_stmt (scope, init);\n       finish_range_for_decl (stmt, range_decl, range_expr);\n+      do_range_for_auto_deduction (range_decl, range_expr);\n     }\n   else\n     {\n@@ -8682,6 +8685,52 @@ cp_parser_range_for (cp_parser *parser, tree scope, tree init, tree range_decl)\n   return stmt;\n }\n \n+/* Subroutine of cp_convert_range_for: given the initializer expression,\n+   builds up the range temporary.  */\n+\n+static tree\n+build_range_temp (tree range_expr)\n+{\n+  tree range_type, range_temp;\n+\n+  /* Find out the type deduced by the declaration\n+     `auto &&__range = range_expr'.  */\n+  range_type = cp_build_reference_type (make_auto (), true);\n+  range_type = do_auto_deduction (range_type, range_expr,\n+\t\t\t\t  type_uses_auto (range_type));\n+\n+  /* Create the __range variable.  */\n+  range_temp = build_decl (input_location, VAR_DECL,\n+\t\t\t   get_identifier (\"__for_range\"), range_type);\n+  TREE_USED (range_temp) = 1;\n+  DECL_ARTIFICIAL (range_temp) = 1;\n+\n+  return range_temp;\n+}\n+\n+/* Used by cp_parser_range_for in template context: we aren't going to\n+   do a full conversion yet, but we still need to resolve auto in the\n+   type of the for-range-declaration if present.  This is basically\n+   a shortcut version of cp_convert_range_for.  */\n+\n+static void\n+do_range_for_auto_deduction (tree decl, tree range_expr)\n+{\n+  tree auto_node = type_uses_auto (TREE_TYPE (decl));\n+  if (auto_node)\n+    {\n+      tree begin_dummy, end_dummy, range_temp, iter_type, iter_decl;\n+      range_temp = convert_from_reference (build_range_temp (range_expr));\n+      iter_type = (cp_parser_perform_range_for_lookup\n+\t\t   (range_temp, &begin_dummy, &end_dummy));\n+      iter_decl = build_decl (input_location, VAR_DECL, NULL_TREE, iter_type);\n+      iter_decl = build_x_indirect_ref (iter_decl, RO_NULL,\n+\t\t\t\t\ttf_warning_or_error);\n+      TREE_TYPE (decl) = do_auto_deduction (TREE_TYPE (decl),\n+\t\t\t\t\t    iter_decl, auto_node);\n+    }\n+}\n+\n /* Converts a range-based for-statement into a normal\n    for-statement, as per the definition.\n \n@@ -8720,7 +8769,6 @@ cp_parser_range_for (cp_parser *parser, tree scope, tree init, tree range_decl)\n tree\n cp_convert_range_for (tree statement, tree range_decl, tree range_expr)\n {\n-  tree range_type, range_temp;\n   tree begin, end;\n   tree iter_type, begin_expr, end_expr;\n   tree condition, expression;\n@@ -8731,17 +8779,7 @@ cp_convert_range_for (tree statement, tree range_decl, tree range_expr)\n     begin_expr = end_expr = iter_type = error_mark_node;\n   else\n     {\n-      /* Find out the type deduced by the declaration\n-         `auto &&__range = range_expr'.  */\n-      range_type = cp_build_reference_type (make_auto (), true);\n-      range_type = do_auto_deduction (range_type, range_expr,\n-\t\t\t\t      type_uses_auto (range_type));\n-\n-      /* Create the __range variable.  */\n-      range_temp = build_decl (input_location, VAR_DECL,\n-\t\t\t       get_identifier (\"__for_range\"), range_type);\n-      TREE_USED (range_temp) = 1;\n-      DECL_ARTIFICIAL (range_temp) = 1;\n+      tree range_temp = build_range_temp (range_expr);\n       pushdecl (range_temp);\n       cp_finish_decl (range_temp, range_expr,\n \t\t      /*is_constant_init*/false, NULL_TREE,"}, {"sha": "3ef97ac5346f9763d1c953e895be8321ee2bb7be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b756fa2977b0620d78446b7a97e2c8d7953543c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b756fa2977b0620d78446b7a97e2c8d7953543c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b756fa2977b0620d78446b7a97e2c8d7953543c", "patch": "@@ -1,3 +1,8 @@\n+2011-08-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49834\n+\t* g++.dg/cpp0x/range-for20.C: New.\n+\n 2011-08-02  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/coarray_lib_token_3.f90: New."}, {"sha": "8205b228df30447317fb5551386bf6d2a3840b9b", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for20.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b756fa2977b0620d78446b7a97e2c8d7953543c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b756fa2977b0620d78446b7a97e2c8d7953543c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for20.C?ref=2b756fa2977b0620d78446b7a97e2c8d7953543c", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/49834\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  template <typename T> T get_value() const;\n+};\n+\n+struct B {\n+  A first, second;\n+};\n+\n+struct C\n+{\n+  B* begin() const;\n+  B* end() const;\n+};\n+\n+template <typename Ret>\n+Ret f(const C &p)\n+{\n+  for (const B &i: p)\t\t// OK\n+    i.second.get_value<int>();\n+  for (const auto &i: p)\t// ERROR\n+    i.second.get_value<int>();\n+  return Ret(0);\n+}\n+\n+void g()\n+{\n+  f<int>(C());\n+}"}]}