{"sha": "82b3da6a714493644a4333bfd8205e3341ed3b8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJiM2RhNmE3MTQ0OTM2NDRhNDMzM2JmZDgyMDVlMzM0MWVkM2I4ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-06-04T22:30:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-06-04T22:30:39Z"}, "message": "re PR c++/43453 (Initialization of char array with string literal fails in mem-initializer)\n\n/cp\n2014-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/43453\n\t* typeck.c (cp_build_modify_expr): Handle array of characters\n\tinitialized by a string literal.\n\t* decl.c (check_initializer): Handle parenthesized string literal\n\tas initializer.\n\t* typeck2.c (store_init_value): Remove redundant check.\n\n/testsuite\n2014-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/43453\n\t* g++.dg/init/pr43453.C: New.\n\nFrom-SVN: r211248", "tree": {"sha": "b9756029ec20b53787ad1ff9ea1241b49d180f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9756029ec20b53787ad1ff9ea1241b49d180f5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82b3da6a714493644a4333bfd8205e3341ed3b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b3da6a714493644a4333bfd8205e3341ed3b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b3da6a714493644a4333bfd8205e3341ed3b8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b3da6a714493644a4333bfd8205e3341ed3b8e/comments", "author": null, "committer": null, "parents": [{"sha": "357ddc7d3df9dbbd89c0e80a7d9dafcbe10a9263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357ddc7d3df9dbbd89c0e80a7d9dafcbe10a9263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357ddc7d3df9dbbd89c0e80a7d9dafcbe10a9263"}], "stats": {"total": 79, "additions": 69, "deletions": 10}, "files": [{"sha": "21374244ba50b6b259c0a677479d61115bffb26d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=82b3da6a714493644a4333bfd8205e3341ed3b8e", "patch": "@@ -1,3 +1,12 @@\n+2014-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/43453\n+\t* typeck.c (cp_build_modify_expr): Handle array of characters\n+\tinitialized by a string literal.\n+\t* decl.c (check_initializer): Handle parenthesized string literal\n+\tas initializer.\n+\t* typeck2.c (store_init_value): Remove redundant check.\n+\n 2014-06-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51253"}, {"sha": "3d4058c2d9158dc4f554ee24e46b7cdd0554f602", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=82b3da6a714493644a4333bfd8205e3341ed3b8e", "patch": "@@ -5758,6 +5758,13 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t\tcheck_narrowing (type, init);\n \t    }\n \t}\n+      else if (TREE_CODE (type) == ARRAY_TYPE\n+\t       && TREE_CODE (init) == TREE_LIST\n+\t       && char_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (type)))\n+\t       && list_length (init) == 1\n+\t       && TREE_CODE (TREE_VALUE (init)) == STRING_CST)\n+\t/* We get here with code like `char s[] (\"abc\");' */\n+\tinit = TREE_VALUE (init);\n \n       /* If DECL has an array type without a specific bound, deduce the\n \t array size from the initializer.  */"}, {"sha": "4a876f94888862ba34aa6174d2041a7af3c0cae9", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=82b3da6a714493644a4333bfd8205e3341ed3b8e", "patch": "@@ -7511,6 +7511,18 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n \t    return error_mark_node;\n \t}\n \n+      /* C++11 8.5/17: \"If the destination type is an array of characters,\n+\t an array of char16_t, an array of char32_t, or an array of wchar_t,\n+\t and the initializer is a string literal...\".  */\n+      else if (TREE_CODE (newrhs) == STRING_CST\n+\t       && char_type_p (TREE_TYPE (TYPE_MAIN_VARIANT (lhstype)))\n+\t       && modifycode == INIT_EXPR)\n+\t{\n+\t  newrhs = digest_init (lhstype, newrhs, complain);\n+\t  if (newrhs == error_mark_node)\n+\t    return error_mark_node;\n+\t}\n+\n       else if (!same_or_base_type_p (TYPE_MAIN_VARIANT (lhstype),\n \t\t\t\t     TYPE_MAIN_VARIANT (TREE_TYPE (newrhs))))\n \t{"}, {"sha": "3ed5c1dd06bfb439a37a200b1114e6f370aa4ae8", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=82b3da6a714493644a4333bfd8205e3341ed3b8e", "patch": "@@ -785,16 +785,9 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n     {\n       gcc_assert (TREE_CODE (decl) != RESULT_DECL);\n \n-      if (TREE_CODE (init) == TREE_LIST\n-\t       && TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n-\t{\n-\t  error (\"cannot initialize arrays using this syntax\");\n-\t  return NULL_TREE;\n-\t}\n-      else\n-\t/* We get here with code like `int a (2);' */\n-\tinit = build_x_compound_expr_from_list (init, ELK_INIT,\n-\t\t\t\t\t\ttf_warning_or_error);\n+      /* We get here with code like `int a (2);' */\n+      init = build_x_compound_expr_from_list (init, ELK_INIT,\n+\t\t\t\t\t      tf_warning_or_error);\n     }\n \n   /* End of special C++ code.  */"}, {"sha": "c19c8d065cedf1eb3793b5817f10d5335f7c8eee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82b3da6a714493644a4333bfd8205e3341ed3b8e", "patch": "@@ -1,3 +1,8 @@\n+2014-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/43453\n+\t* g++.dg/init/pr43453.C: New.\n+\n 2014-06-04  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/61385"}, {"sha": "4c91282d42527ce578a334acfa2de5044acf812c", "filename": "gcc/testsuite/g++.dg/init/pr43453.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43453.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b3da6a714493644a4333bfd8205e3341ed3b8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43453.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43453.C?ref=82b3da6a714493644a4333bfd8205e3341ed3b8e", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/43453\n+\n+struct A {\n+  char x[4]; \n+  A() : x(\"bug\") { };\n+};\n+\n+char x [4] (\"bug\");\n+\n+struct CA {\n+  const char cx[4]; \n+  CA() : cx(\"bug\") { };\n+};\n+\n+const char cx [4] (\"bug\");\n+\n+struct B {\n+  char y[4]; \n+  B() : y(\"bu\") { };\n+};\n+\n+char y [4] (\"bu\");\n+\n+struct C {\n+  char z[4]; \n+  C() : z(\"bugs\") { };  // { dg-error \"too long\" }\n+};\n+\n+char z [4] (\"bugs\");    // { dg-error \"too long\" }\n+\n+char k [] (\"bug\");\n+\n+const char ck [] (\"bug\");"}]}