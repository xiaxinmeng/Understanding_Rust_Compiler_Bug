{"sha": "1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA0OWU1NDA4ZmEzNDNiNWJmMGE2MzgwMjEyYThlYzhkZmUyYjZmYw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-25T10:41:45Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-25T19:11:36Z"}, "message": "Add 'g++.dg/gomp/map-{1,2}.C'\n\n\tgcc/testsuite/\n\t* g++.dg/gomp/map-1.C: New.\n\t* g++.dg/gomp/map-2.C: Likewise.\n\t* c-c++-common/gomp/map-1.c: Adjust.\n\t* c-c++-common/gomp/map-2.c: Likewise.", "tree": {"sha": "486b402c5cc6acd9327fc95c4c254e36326368b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/486b402c5cc6acd9327fc95c4c254e36326368b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cab70604cfda30bc64351b39493ef884ff7ba10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cab70604cfda30bc64351b39493ef884ff7ba10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cab70604cfda30bc64351b39493ef884ff7ba10"}], "stats": {"total": 179, "additions": 175, "deletions": 4}, "files": [{"sha": "31100b0396bd8469a26ce057d0c24027a1bfb690", "filename": "gcc/testsuite/c-c++-common/gomp/map-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-1.c?ref=1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc", "patch": "@@ -1,5 +1,6 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fopenmp\" } */\n+/* Test 'map' clause diagnostics.  */\n+\n+/* See also corresponding C++ variant: '../../g++.dg/gomp/map-1.C'.  */\n \n extern int a[][10], a2[][10];\n int b[10], c[10][2], d[10], e[10], f[10];"}, {"sha": "cd69f6b9a57a469fb33151a3caa76d69534915e3", "filename": "gcc/testsuite/c-c++-common/gomp/map-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-2.c?ref=1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc", "patch": "@@ -1,5 +1,6 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fopenmp\" } */\n+/* Test 'map' clause diagnostics.  */\n+\n+/* See also corresponding C++ variant: '../../g++.dg/gomp/map-2.C'.  */\n \n void\n foo (int *p, int (*q)[10], int r[10], int s[10][10])"}, {"sha": "11275efff4a7aaf1a63502152229f624c4c32dfa", "filename": "gcc/testsuite/g++.dg/gomp/map-1.C", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-1.C?ref=1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc", "patch": "@@ -0,0 +1,117 @@\n+/* Test 'map' clause diagnostics.  */\n+\n+/* See also corresponding C/C++ variant: '../../c-c++-common/gomp/map-1.c'.  */\n+\n+extern int a[][10], a2[][10];\n+int b[10], c[10][2], d[10], e[10], f[10];\n+int b2[10], c2[10][2], d2[10], e2[10], f2[10];\n+int k[10], l[10], m[10], n[10], o;\n+int *p;\n+int **q;\n+int r[4][4][4][4][4];\n+extern struct s s1;\n+extern struct s s2[1]; /* { dg-error \"array type has incomplete element type\" \"\" { target c } } */\n+int t[10];\n+#pragma omp threadprivate (t)\n+#pragma omp declare target\n+void bar (int *);\n+#pragma omp end declare target\n+\n+template <int N>\n+void\n+foo (int g[3][10], int h[4][8], int i[2][10], int j[][9],\n+     int g2[3][10], int h2[4][8], int i2[2][10], int j2[][9])\n+{\n+  #pragma omp target map(to: bar[2:5]) /* { dg-error \"is not a variable\" } */\n+    ;\n+  #pragma omp target map(from: t[2:5]) /* { dg-error \"is threadprivate variable\" } */\n+    ;\n+  #pragma omp target map(tofrom: k[0.5:]) /* { dg-error \"low bound \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma omp target map(from: l[:7.5f]) /* { dg-error \"length \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma omp target map(to: m[p:]) /* { dg-error \"low bound \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma omp target map(tofrom: n[:p]) /* { dg-error \"length \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma omp target map(to: o[2:5]) /* { dg-error \"does not have pointer or array type\" } */\n+    ;\n+  #pragma omp target map(alloc: s1) /* { dg-error \"'s1' does not have a mappable type in 'map' clause\" } */\n+    ;\n+  #pragma omp target map(alloc: s2) /* { dg-error \"'s2' does not have a mappable type in 'map' clause\" } */\n+    ;\n+  #pragma omp target map(to: a[:][:]) /* { dg-error \"array type length expression must be specified\" } */\n+    bar (&a[0][0]); /* { dg-error \"referenced in target region does not have a mappable type\" \"TODO\" { xfail *-*-* } } */\n+  #pragma omp target map(tofrom: b[-1:]) /* { dg-error \"negative low bound in array section\" } */\n+    bar (b);\n+  #pragma omp target map(tofrom: c[:-3][:]) /* { dg-error \"negative length in array section\" } */\n+    bar (&c[0][0]);\n+  #pragma omp target map(from: d[11:]) /* { dg-error \"low bound \\[^\\n\\r]* above array section size\" } */\n+    bar (d);\n+  #pragma omp target map(to: e[:11]) /* { dg-error \"length \\[^\\n\\r]* above array section size\" } */\n+    bar (e);\n+  #pragma omp target map(to: f[1:10]) /* { dg-error \"high bound \\[^\\n\\r]* above array section size\" } */\n+    bar (f);\n+  #pragma omp target map(from: g[:][0:10]) /* { dg-error \"for array function parameter length expression must be specified\" } */\n+    bar (&g[0][0]);\n+  #pragma omp target map(from: h[2:1][-1:]) /* { dg-error \"negative low bound in array section\" } */\n+    bar (&h[0][0]);\n+  #pragma omp target map(tofrom: h[:1][:-3]) /* { dg-error \"negative length in array section\" } */\n+    bar (&h[0][0]);\n+  #pragma omp target map(i[:1][11:]) /* { dg-error \"low bound \\[^\\n\\r]* above array section size\" } */\n+    bar (&i[0][0]);\n+  #pragma omp target map(from: j[3:1][:10]) /* { dg-error \"length \\[^\\n\\r]* above array section size\" } */\n+    bar (&j[0][0]);\n+  #pragma omp target map(to: j[30:1][5:5]) /* { dg-error \"high bound \\[^\\n\\r]* above array section size\" } */\n+    bar (&j[0][0]);\n+  #pragma omp target map(to: a2[:1][2:4])\n+    bar (&a2[0][0]);\n+  #pragma omp target map(a2[3:5][:])\n+    bar (&a2[0][0]);\n+  #pragma omp target map(to: a2[3:5][:10])\n+    bar (&a2[0][0]);\n+  #pragma omp target map(tofrom: b2[0:])\n+    bar (b2);\n+  #pragma omp target map(tofrom: c2[:3][:])\n+    bar (&c2[0][0]);\n+  #pragma omp target map(from: d2[9:])\n+    bar (d2);\n+  #pragma omp target map(to: e2[:10])\n+    bar (e2);\n+  #pragma omp target map(to: f2[1:9])\n+    bar (f2);\n+  #pragma omp target map(g2[:1][2:4])\n+    bar (&g2[0][0]);\n+  #pragma omp target map(from: h2[2:2][0:])\n+    bar (&h2[0][0]);\n+  #pragma omp target map(tofrom: h2[:1][:3])\n+    bar (&h2[0][0]);\n+  #pragma omp target map(to: i2[:1][9:])\n+    bar (&i2[0][0]);\n+  #pragma omp target map(from: j2[3:4][:9])\n+    bar (&j2[0][0]);\n+  #pragma omp target map(to: j2[30:1][5:4])\n+    bar (&j2[0][0]);\n+  #pragma omp target map(q[1:2])\n+    ;\n+  #pragma omp target map(tofrom: q[3:5][:10]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma omp target map(r[3:][2:1][1:2])\n+    ;\n+  #pragma omp target map(r[3:][2:1][1:2][:][0:4])\n+    ;\n+  #pragma omp target map(r[3:][2:1][1:2][1:][0:4]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma omp target map(r[3:][2:1][1:2][:3][0:4]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma omp target map(r[3:][2:1][1:2][:][1:]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma omp target map(r[3:][2:1][1:2][:][:3]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+}\n+\n+static void\n+instantiate ()\n+{\n+  &foo<0>;\n+}"}, {"sha": "10eaaa948b896946489516535df5ab438b5077ba", "filename": "gcc/testsuite/g++.dg/gomp/map-2.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-2.C?ref=1049e5408fa343b5bf0a6380212a8ec8dfe2b6fc", "patch": "@@ -0,0 +1,52 @@\n+/* Test 'map' clause diagnostics.  */\n+\n+/* See also corresponding C/C++ variant: '../../c-c++-common/gomp/map-2.c'.  */\n+\n+template <int N>\n+void\n+foo (int *p, int (*q)[10], int r[10], int s[10][10])\n+{\n+  int a[10], b[10][10];\n+  #pragma omp target map (tofrom: p[-1:2])\n+  ;\n+  #pragma omp target map (tofrom: q[-1:2][0:10])\n+  ;\n+  #pragma omp target map (tofrom: q[-1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: r[-1:2])\n+  ;\n+  #pragma omp target map (tofrom: s[-1:2][:])\n+  ;\n+  #pragma omp target map (tofrom: s[-1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: a[-1:2])\t /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: b[-1:2][0:])\t /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: b[1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: p[2:-3])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: q[2:-3][:])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: q[2:3][0:-1])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: r[2:-5])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: s[2:-5][:])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: s[2:5][0:-4])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: a[2:-5])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: b[2:-5][0:10]) /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma omp target map (tofrom: b[2:5][0:-4]) /* { dg-error \"negative length in array section in\" } */\n+  ;\n+}\n+\n+static void\n+instantiate ()\n+{\n+  &foo<0>;\n+}"}]}