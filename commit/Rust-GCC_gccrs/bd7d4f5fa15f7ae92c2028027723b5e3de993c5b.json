{"sha": "bd7d4f5fa15f7ae92c2028027723b5e3de993c5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ3ZDRmNWZhMTVmN2FlOTJjMjAyODAyNzcyM2I1ZTNkZTk5M2M1Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-08T02:48:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-08T02:48:25Z"}, "message": "complex (fabs): In C++0x mode adjust return type per DR 595 [Ready].\n\n2007-11-07  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1_impl/complex (fabs): In C++0x mode adjust\n\treturn type per DR 595 [Ready].\n\nFrom-SVN: r129983", "tree": {"sha": "27257f900d75f1b911cdaf22e2f8691ffebcf1fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27257f900d75f1b911cdaf22e2f8691ffebcf1fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd7d4f5fa15f7ae92c2028027723b5e3de993c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7d4f5fa15f7ae92c2028027723b5e3de993c5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7d4f5fa15f7ae92c2028027723b5e3de993c5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7d4f5fa15f7ae92c2028027723b5e3de993c5b/comments", "author": null, "committer": null, "parents": [{"sha": "24c1b08d6947646c763411d4a17b8b54049fea74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c1b08d6947646c763411d4a17b8b54049fea74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c1b08d6947646c763411d4a17b8b54049fea74"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "fd480597f31fe85ae72a54e021948d896af4b145", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7d4f5fa15f7ae92c2028027723b5e3de993c5b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7d4f5fa15f7ae92c2028027723b5e3de993c5b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bd7d4f5fa15f7ae92c2028027723b5e3de993c5b", "patch": "@@ -1,3 +1,8 @@\n+2007-11-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1_impl/complex (fabs): In C++0x mode adjust\n+\treturn type per DR 595 [Ready].\n+\n 2007-11-07  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_iterator.h (move_iterator<>::pointer): Adjust"}, {"sha": "5c25cae4fb4dfd6fbc41541fbac66f74ce846415", "filename": "libstdc++-v3/include/tr1_impl/complex", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7d4f5fa15f7ae92c2028027723b5e3de993c5b/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7d4f5fa15f7ae92c2028027723b5e3de993c5b/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex?ref=bd7d4f5fa15f7ae92c2028027723b5e3de993c5b", "patch": "@@ -44,7 +44,12 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   template<typename _Tp> std::complex<_Tp> acosh(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> asinh(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> atanh(const std::complex<_Tp>&);\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+  // DR 595.\n+  template<typename _Tp> _Tp               fabs(const std::complex<_Tp>&);\n+#else\n   template<typename _Tp> std::complex<_Tp> fabs(const std::complex<_Tp>&);\n+#endif\n \n   /// @brief acos(__z) [8.1.2].\n   //  Effects:  Behaves the same as C99 function cacos, defined\n@@ -288,7 +293,11 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   //  Effects:  Behaves the same as C99 function cabs, defined\n   //            in subclause 7.3.8.1.\n   template<typename _Tp>\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+    inline _Tp\n+#else\n     inline std::complex<_Tp>\n+#endif\n     fabs(const std::complex<_Tp>& __z)\n     { return std::abs(__z); }\n "}]}