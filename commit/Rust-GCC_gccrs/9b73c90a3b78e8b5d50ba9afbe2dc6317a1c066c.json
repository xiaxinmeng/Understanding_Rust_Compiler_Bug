{"sha": "9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI3M2M5MGEzYjc4ZThiNWQ1MGJhOWFmYmUyZGM2MzE3YTFjMDY2Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-03-12T08:53:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-03-12T08:53:27Z"}, "message": "re PR rtl-optimization/9888 (-mcpu=k6 -Os produces out of range loop instructions)\n\n\tPR optimization/9888\n\t* config/i386/i386.md (movsi_1): Remove special alternatives\n\tfor %eax register.\n\t(movsi_1_nointernunit): Likewise.\n\t(movhi_1): Likewise.\n\t* config/i386/i386.c (memory_address_length): Do not use\n\tshort displacement when there is no base.\n\t(ix86_attr_length_address_default): Handle LEA instructions.\n\nFrom-SVN: r64225", "tree": {"sha": "d626f0a499e0af37584e18d247955af9d7809726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d626f0a499e0af37584e18d247955af9d7809726"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57f989ce5dfeea5bcf1b590543b5d6382f4946cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f989ce5dfeea5bcf1b590543b5d6382f4946cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57f989ce5dfeea5bcf1b590543b5d6382f4946cb"}], "stats": {"total": 83, "additions": 51, "deletions": 32}, "files": [{"sha": "a494fa76bb0718fafe53ee541707e6ce10f241cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c", "patch": "@@ -1,3 +1,14 @@\n+2003-03-12  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/9888\n+\t* config/i386/i386.md (movsi_1): Remove special alternatives\n+\tfor %eax register.\n+\t(movsi_1_nointernunit): Likewise.\n+\t(movhi_1): Likewise.\n+\t* config/i386/i386.c (memory_address_length): Do not use\n+\tshort displacement when there is no base.\n+\t(ix86_attr_length_address_default): Handle LEA instructions.\n+\n 2003-03-12  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c-cppbuiltin.c (builtin_define_std): Make non-static."}, {"sha": "e2400d0b1622b505f3b919b32f29acff70692b1b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c", "patch": "@@ -11857,7 +11857,8 @@ memory_address_length (addr)\n       if (disp)\n \t{\n \t  if (GET_CODE (disp) == CONST_INT\n-\t      && CONST_OK_FOR_LETTER_P (INTVAL (disp), 'K'))\n+\t      && CONST_OK_FOR_LETTER_P (INTVAL (disp), 'K')\n+\t      && base)\n \t    len = 1;\n \t  else\n \t    len = 4;\n@@ -11920,6 +11921,26 @@ ix86_attr_length_address_default (insn)\n      rtx insn;\n {\n   int i;\n+\n+  if (get_attr_type (insn) == TYPE_LEA)\n+    {\n+      rtx set = PATTERN (insn);\n+      if (GET_CODE (set) == SET)\n+\t;\n+      else if (GET_CODE (set) == PARALLEL\n+\t       && GET_CODE (XVECEXP (set, 0, 0)) == SET)\n+\tset = XVECEXP (set, 0, 0);\n+      else\n+\t{\n+#ifdef ENABLE_CHECKING\n+\t  abort ();\n+#endif\n+\t  return 0;\n+\t}\n+\n+      return memory_address_length (SET_SRC (set));\n+    }\n+\n   extract_insn_cached (insn);\n   for (i = recog_data.n_operands - 1; i >= 0; --i)\n     if (GET_CODE (recog_data.operand[i]) == MEM)"}, {"sha": "3ac6af1233e2a1a3913e5d381801315c29271198", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9b73c90a3b78e8b5d50ba9afbe2dc6317a1c066c", "patch": "@@ -1161,14 +1161,9 @@\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"length_immediate\" \"1\")])\n \n-; The first alternative is used only to compute proper length of instruction.\n-; Reload's algorithm does not take into account the cost of spill instructions\n-; needed to free register in given class, so avoid it from choosing the first\n-; alternative when eax is not available.\n-\n (define_insn \"*movsi_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=*?a,r,*?a,m,!*y,!rm,!*y,!*Y,!rm,!*Y\")\n-\t(match_operand:SI 1 \"general_operand\" \"im,rinm,rinm,rin,*y,*y,rm,*Y,*Y,rm\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,m,!*y,!rm,!*y,!*Y,!rm,!*Y\")\n+\t(match_operand:SI 1 \"general_operand\" \"rinm,rin,*y,*y,rm,*Y,*Y,rm\"))]\n   \"(TARGET_INTER_UNIT_MOVES || optimize_size)\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n@@ -1194,21 +1189,20 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"4,5,6\")\n+     (cond [(eq_attr \"alternative\" \"2,3,4\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"7,8,9\")\n+\t    (eq_attr \"alternative\" \"5,6,7\")\n \t      (const_string \"ssemov\")\n \t    (and (ne (symbol_ref \"flag_pic\") (const_int 0))\n \t\t (match_operand:SI 1 \"symbolic_operand\" \"\"))\n \t      (const_string \"lea\")\n \t   ]\n \t   (const_string \"imov\")))\n-   (set_attr \"modrm\" \"0,*,0,*,*,*,*,*,*,*\")\n-   (set_attr \"mode\" \"SI,SI,SI,SI,DI,SI,SI,TI,SI,SI\")])\n+   (set_attr \"mode\" \"SI,SI,DI,SI,SI,TI,SI,SI\")])\n \n (define_insn \"*movsi_1_nointernunit\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=*?a,r,*?a,m,!*y,!m,!*y,!*Y,!m,!*Y\")\n-\t(match_operand:SI 1 \"general_operand\" \"im,rinm,rinm,rin,*y,*y,m,*Y,*Y,m\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,m,!*y,!m,!*y,!*Y,!m,!*Y\")\n+\t(match_operand:SI 1 \"general_operand\" \"rinm,rin,*y,*y,m,*Y,*Y,m\"))]\n   \"(!TARGET_INTER_UNIT_MOVES && !optimize_size)\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n@@ -1234,17 +1228,16 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"4,5,6\")\n+     (cond [(eq_attr \"alternative\" \"2,3,4\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"7,8,9\")\n+\t    (eq_attr \"alternative\" \"5,6,7\")\n \t      (const_string \"ssemov\")\n \t    (and (ne (symbol_ref \"flag_pic\") (const_int 0))\n \t\t (match_operand:SI 1 \"symbolic_operand\" \"\"))\n \t      (const_string \"lea\")\n \t   ]\n \t   (const_string \"imov\")))\n-   (set_attr \"modrm\" \"0,*,0,*,*,*,*,*,*,*\")\n-   (set_attr \"mode\" \"SI,SI,SI,SI,DI,SI,SI,TI,SI,SI\")])\n+   (set_attr \"mode\" \"SI,SI,DI,SI,SI,TI,SI,SI\")])\n \n ;; Stores and loads of ax to arbitrary constant address.\n ;; We fake an second form of instruction to force reload to load address\n@@ -1317,14 +1310,9 @@\n   [(set_attr \"type\" \"push\")\n    (set_attr \"mode\" \"QI\")])\n \n-; The first alternative is used only to compute proper length of instruction.\n-; Reload's algorithm does not take into account the cost of spill instructions\n-; needed to free register in given class, so avoid it from choosing the first\n-; alternative when eax is not available.\n-\n (define_insn \"*movhi_1\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=*?a,r,r,*?a,r,m\")\n-\t(match_operand:HI 1 \"general_operand\" \"i,r,rn,rm,rm,rn\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,m\")\n+\t(match_operand:HI 1 \"general_operand\" \"r,rn,rm,rn\"))]\n   \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n {\n   switch (get_attr_type (insn))\n@@ -1341,36 +1329,35 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(and (eq_attr \"alternative\" \"0,1\")\n+     (cond [(and (eq_attr \"alternative\" \"0\")\n \t\t (ior (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n \t\t\t  (const_int 0))\n \t\t      (eq (symbol_ref \"TARGET_HIMODE_MATH\")\n \t\t\t  (const_int 0))))\n \t      (const_string \"imov\")\n-\t    (and (eq_attr \"alternative\" \"2,3,4\")\n+\t    (and (eq_attr \"alternative\" \"1,2\")\n \t\t (match_operand:HI 1 \"aligned_operand\" \"\"))\n \t      (const_string \"imov\")\n \t    (and (ne (symbol_ref \"TARGET_MOVX\")\n \t\t     (const_int 0))\n-\t\t (eq_attr \"alternative\" \"0,1,3,4\"))\n+\t\t (eq_attr \"alternative\" \"0,2\"))\n \t      (const_string \"imovx\")\n \t   ]\n \t   (const_string \"imov\")))\n     (set (attr \"mode\")\n       (cond [(eq_attr \"type\" \"imovx\")\n \t       (const_string \"SI\")\n-\t     (and (eq_attr \"alternative\" \"2,3,4\")\n+\t     (and (eq_attr \"alternative\" \"1,2\")\n \t\t  (match_operand:HI 1 \"aligned_operand\" \"\"))\n \t       (const_string \"SI\")\n-\t     (and (eq_attr \"alternative\" \"0,1\")\n+\t     (and (eq_attr \"alternative\" \"0\")\n \t\t  (ior (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n \t\t\t   (const_int 0))\n \t\t       (eq (symbol_ref \"TARGET_HIMODE_MATH\")\n \t\t\t   (const_int 0))))\n \t       (const_string \"SI\")\n \t    ]\n-\t    (const_string \"HI\")))\n-   (set_attr \"modrm\" \"0,*,*,0,*,*\")])\n+\t    (const_string \"HI\")))])\n \n ;; Stores and loads of ax to arbitrary constant address.\n ;; We fake an second form of instruction to force reload to load address"}]}