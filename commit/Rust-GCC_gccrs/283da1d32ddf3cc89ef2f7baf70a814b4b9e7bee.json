{"sha": "283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgzZGExZDMyZGRmM2NjODllZjJmN2JhZjcwYTgxNGI0YjllN2JlZQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@redhat.com", "date": "2000-12-02T19:46:32Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-12-02T19:46:32Z"}, "message": "Prepare for fixincludes on BeOS\n\nCo-Authored-By: Bruce Korb <bkorb@gnu.org>\n\nFrom-SVN: r37959", "tree": {"sha": "ccfe1ea6a87a6da40b3cc3a990276d4466c50459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccfe1ea6a87a6da40b3cc3a990276d4466c50459"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/comments", "author": null, "committer": null, "parents": [{"sha": "6864a6c66c57b923147829e96f0dd04402166307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6864a6c66c57b923147829e96f0dd04402166307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6864a6c66c57b923147829e96f0dd04402166307"}], "stats": {"total": 160, "additions": 109, "deletions": 51}, "files": [{"sha": "97fd77a90809c4d22600f60a7035464d4e226f92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee", "patch": "@@ -1,3 +1,15 @@\n+2000-12-02  Daniel Berlin  <dberlin@redhat.com>\n+            Bruce Korb  <bkorb@gnu.org>\n+\n+        * fixinc/*: global substitute /__MSDOS__/SEPARATE_FIX_PROC/\n+        * fixinc/mkfixinc.sh: prepare to use Makefile.BEOS for *-*-beos*\n+        * fixinc/Makefile.DOS: define SEPARATE_FIX_PROC for build\n+        * fixinc/fixfix.c(wrap_fix): avoid wrapping files that\n+        use the \"__need_\" hackery.  It breaks them.\n+        * fixinc/fixincl.c(process - SEPARATE_FIX_PROC):\n+        Sometimes on DOS and BeOS the temp output file cannot be opened.\n+        Skip the file noisily.  Ought to be fixed instead.\n+\n 2000-12-02  Bruce Korb  <bkorb@gnu.org>\n \n \tFrom: 2000-11-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>"}, {"sha": "b207ad260b080862d264a1627ae431bc042f8ce4", "filename": "gcc/fixinc/Makefile.DOS", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2FMakefile.DOS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2FMakefile.DOS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2FMakefile.DOS?ref=283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee", "patch": "@@ -24,7 +24,8 @@\n # the DJGPP (aka MS-DOS) port of GCC.\n \n CFLAGS = -Wall -g -O2\n-FIXINC_DEFS = -DIN_GCC -D__MSDOS__ $(CFLAGS) $(CPPFLAGS) $(INCLUDES)\n+FIXINC_DEFS = -DIN_GCC $(CFLAGS) $(CPPFLAGS) $(INCLUDES) \\\n+ -D__MSDOS__ -DSEPARATE_FIX_PROC\n \n CC = gcc\n SHELL = /bin/sh"}, {"sha": "3e0d185ae16f492a2b02ca843f3fb5f7cef7c2ab", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee", "patch": "@@ -60,7 +60,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"fixlib.h\"\n #define    GTYPE_SE_CT 1\n \n-#ifdef __MSDOS__\n+#ifdef SEPARATE_FIX_PROC\n #include \"fixincl.x\"\n #endif\n \n@@ -597,12 +597,20 @@ FIX_PROC_HEAD( machine_name_fix )\n \n FIX_PROC_HEAD( wrap_fix )\n {\n+  tSCC   z_no_wrap_pat[] = \"^#if.*__need_\";\n+  static regex_t no_wrapping_re = { NULL, 0, 0 };\n+\n   char   z_fixname[ 64 ];\n   tCC*   pz_src  = p_fixd->fix_name;\n   tCC*   pz_name = z_fixname;\n   char*  pz_dst  = z_fixname;\n+  int    do_end  = 0;\n   size_t len     = 0;\n \n+  if (no_wrapping_re.allocated == 0)\n+    compile_re( z_no_wrap_pat, &no_wrapping_re, 0, \"no-wrap pattern\",\n+                \"wrap-fix\" );\n+\n   for (;;) {\n     char ch = *(pz_src++);\n \n@@ -627,8 +635,16 @@ FIX_PROC_HEAD( wrap_fix )\n     }\n   }\n \n-  printf( \"#ifndef FIXINC_%s_CHECK\\n\", pz_name );\n-  printf( \"#define FIXINC_%s_CHECK 1\\n\\n\", pz_name );\n+  /*\n+   *  IF we do *not* match the no-wrap re, then we have a double negative.\n+   *  A double negative means YES.\n+   */\n+  if (regexec (&no_wrapping_re, text, 0, NULL, 0) != 0)\n+    {\n+      printf( \"#ifndef FIXINC_%s_CHECK\\n\", pz_name );\n+      printf( \"#define FIXINC_%s_CHECK 1\\n\\n\", pz_name );\n+      do_end = 1;\n+    }\n \n   if (p_fixd->patch_args[1] == (tCC*)NULL)\n     fputs( text, stdout );\n@@ -640,7 +656,9 @@ FIX_PROC_HEAD( wrap_fix )\n       fputs( p_fixd->patch_args[2], stdout );\n   }\n \n-  printf( \"\\n#endif  /* FIXINC_%s_CHECK */\\n\", pz_name );\n+  if (do_end != 0)\n+    printf( \"\\n#endif  /* FIXINC_%s_CHECK */\\n\", pz_name );\n+\n   if (pz_name != z_fixname)\n     free( (void*)pz_name );\n }\n@@ -731,7 +749,7 @@ apply_fix( p_fixd, filname )\n   (*pfe->fix_proc)( filname, buf, p_fixd );\n }\n \n-#ifdef __MSDOS__\n+#ifdef SEPARATE_FIX_PROC\n tSCC z_usage[] =\n \"USAGE: applyfix <fix-name> <file-to-fix> <file-source> <file-destination>\\n\";\n tSCC z_reopen[] =\n@@ -750,7 +768,7 @@ main( argc, argv )\n   if (argc != 5)\n     {\n     usage_failure:\n-      fputs( z_usage, stderr );\n+      fputs (z_usage, stderr);\n       return EXIT_FAILURE;\n     }\n \n@@ -761,15 +779,15 @@ main( argc, argv )\n     if (! ISDIGIT ( *pz ))\n       goto usage_failure;\n \n-    idx = strtol( pz, &pz, 10 );\n+    idx = strtol (pz, &pz, 10);\n     if ((*pz != NUL) || ((unsigned)idx >= FIX_COUNT))\n       goto usage_failure;\n     pFix = fixDescList + idx;\n   }\n \n-  if (freopen( argv[3], \"r\", stdin ) != stdin)\n+  if (freopen (argv[3], \"r\", stdin) != stdin)\n     {\n-      fprintf( stderr, z_reopen, errno, strerror( errno ), argv[3], \"in\" );\n+      fprintf (stderr, z_reopen, errno, strerror( errno ), argv[3], \"in\");\n       return EXIT_FAILURE;\n     }\n \n@@ -783,23 +801,23 @@ main( argc, argv )\n   pz_tmp_dot = strchr( pz_tmp_base, '.' );\n   if (pathconf( pz_tmptmp, _PC_NAME_MAX ) <= 12\t/* is this DOS or Windows9X? */\n       && pz_tmp_dot != (char*)NULL)\n-    strcpy( pz_tmp_dot+1, \"X\" ); /* nuke the original extension */\n+    strcpy (pz_tmp_dot+1, \"X\"); /* nuke the original extension */\n   else\n-    strcat( pz_tmptmp, \".X\" );\n-  if (freopen( pz_tmptmp, \"w\", stdout ) != stdout)\n+    strcat (pz_tmptmp, \".X\");\n+  if (freopen (pz_tmptmp, \"w\", stdout) != stdout)\n     {\n-      fprintf( stderr, z_reopen, errno, strerror( errno ), pz_tmptmp, \"out\" );\n+      fprintf (stderr, z_reopen, errno, strerror( errno ), pz_tmptmp, \"out\");\n       return EXIT_FAILURE;\n     }\n \n-  apply_fix( pFix, argv[1] );\n-  close( STDOUT_FILENO );\n-  close( STDIN_FILENO );\n-  unlink( argv[4] );\n-  if (rename( pz_tmptmp, argv[4] ) != 0)\n+  apply_fix (pFix, argv[1]);\n+  fclose (stdout);\n+  fclose (stdin);\n+  unlink (argv[4]);\n+  if (rename (pz_tmptmp, argv[4]) != 0)\n     {\n-      fprintf( stderr, \"error %d (%s) renaming %s to %s\\n\", errno,\n-               strerror( errno ), pz_tmptmp, argv[4] );\n+      fprintf (stderr, \"error %d (%s) renaming %s to %s\\n\", errno,\n+               strerror( errno ), pz_tmptmp, argv[4]);\n       return EXIT_FAILURE;\n     }\n "}, {"sha": "2601506c096e560b7c2971a2bafafb06b62a53f9", "filename": "gcc/fixinc/fixincl.c", "status": "modified", "additions": 49, "deletions": 27, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.c?ref=283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #include <signal.h>\n-#ifndef __MSDOS__\n+#ifndef SEPARATE_FIX_PROC\n #include \"server.h\"\n #endif\n \n@@ -182,7 +182,7 @@ Altering  %5d of them\\n\";\n   }\n #endif /* DO_STATS */\n \n-# ifdef __MSDOS__\n+# ifdef SEPARATE_FIX_PROC\n   unlink( pz_temp_file );\n # endif\n   return EXIT_SUCCESS;\n@@ -202,7 +202,7 @@ do_version ()\n   */\n   run_compiles ();\n   sprintf (zBuf, zFmt, program_id);\n-#ifndef __MSDOS__\n+#ifndef SEPARATE_FIX_PROC\n   puts (zBuf + 5);\n   exit (strcmp (run_shell (zBuf), program_id));\n #else\n@@ -298,7 +298,7 @@ ENV_TABLE\n       */\n   run_compiles ();\n \n-# ifdef __MSDOS__\n+# ifdef SEPARATE_FIX_PROC\n   /* NULL as the first argument to `tempnam' causes it to DTRT\n      wrt the temporary directory where the file will be created.  */\n   pz_temp_file = tempnam( NULL, \"fxinc\" );\n@@ -382,7 +382,7 @@ static int\n machine_matches( p_fixd )\n   tFixDesc *p_fixd;\n         {\n-# ifndef __MSDOS__\n+# ifndef SEPARATE_FIX_PROC\n           tSCC case_fmt[] = \"case %s in\\n\";     /*  9 bytes, plus string */\n           tSCC esac_fmt[] =\n                \" )\\n    echo %s ;;\\n* ) echo %s ;;\\nesac\";/*  4 bytes */\n@@ -449,7 +449,7 @@ machine_matches( p_fixd )\n \t  }\n \n   return BOOL_TRUE;\n-# else /* is __MSDOS__ */\n+# else /* is SEPARATE_FIX_PROC */\n   const char **papz_machs = p_fixd->papz_machs;\n   int invert = (p_fixd->fd_flags & FD_MACH_IFNOT) != 0;\n   for (;;)\n@@ -613,7 +613,7 @@ create_file ()\n           the name of the file that we might want to fix\n   Result: APPLY_FIX or SKIP_FIX, depending on the result of the\n           shell script we run.  */\n-#ifndef __MSDOS__\n+#ifndef SEPARATE_FIX_PROC\n static int test_test PARAMS ((tTestDesc *, char *));\n static int\n test_test (p_test, pz_test_file)\n@@ -812,7 +812,7 @@ extract_quoted_files (pz_data, pz_fixed_file, p_re_match)\n \n     Somebody wrote a *_fix subroutine that we must call.\n     */\n-#ifndef __MSDOS__\n+#ifndef SEPARATE_FIX_PROC\n static int internal_fix PARAMS ((int, tFixDesc *));\n static int\n internal_fix (read_fd, p_fixd)\n@@ -879,10 +879,10 @@ internal_fix (read_fd, p_fixd)\n   apply_fix (p_fixd, pz_curr_file);\n   exit (0);\n }\n-#endif /* !__MSDOS__ */\n+#endif /* !SEPARATE_FIX_PROC */\n \n \n-#ifdef __MSDOS__\n+#ifdef SEPARATE_FIX_PROC\n static void\n fix_with_system (p_fixd, pz_fix_file, pz_file_source, pz_temp_file)\n   tFixDesc* p_fixd;\n@@ -922,16 +922,25 @@ fix_with_system (p_fixd, pz_fix_file, pz_file_source, pz_temp_file)\n   else /* NOT an \"internal\" fix: */\n     {\n       size_t parg_size;\n+#ifdef __MSDOS__\n       /* Don't use the \"src > dstX; rm -f dst; mv -f dstX dst\" trick:\n-\t dst is a temporary file anyway, so we know there's no other\n-\t file by that name; and DOS's system(3) doesn't mind to\n+         dst is a temporary file anyway, so we know there's no other\n+         file by that name; and DOS's system(3) doesn't mind to\n          clobber existing file in redirection.  Besides, with DOS 8+3\n          limited file namespace, we can easily lose if dst already has\n          an extension that is 3 or more characters long.\n-         The following bizarre use of 'cat' only works on DOS boxes.\n-         It is causing the file to be dropped into a temporary file for\n+\n+         I do not think the 8+3 issue is relevant because all the files\n+         we operate on are named \"*.h\", making 8+2 adequate.  Anyway,\n+         the following bizarre use of 'cat' only works on DOS boxes.\n+         It causes the file to be dropped into a temporary file for\n          'cat' to read (pipes do not work on DOS).  */\n       tSCC   z_cmd_fmt[] = \" %s | cat > %s\";\n+#else\n+      /* Don't use positional formatting arguments because some lame-o\n+         implementations cannot cope  :-(.  */\n+      tSCC   z_cmd_fmt[] = \" %s > %sX ; rm -f %s; mv -f %sX %s\";\n+#endif\n       tCC**  ppArgs = p_fixd->patch_args;\n \n       argsize = sizeof( z_cmd_fmt ) + strlen( pz_temp_file )\n@@ -1006,7 +1015,12 @@ fix_with_system (p_fixd, pz_fix_file, pz_file_source, pz_temp_file)\n       /*\n        *  add the file machinations.\n        */\n-      sprintf( pz_scan, z_cmd_fmt, pz_file_source, pz_temp_file );\n+#ifdef SEPARATE_FIX_PROC\n+      sprintf (pz_scan, z_cmd_fmt, pz_file_source, pz_temp_file );\n+#else\n+      sprintf (pz_scan, z_cmd_fmt, pz_file_source, pz_temp_file,\n+               pz_temp_file, pz_temp_file, pz_temp_file);\n+#endif\n     }\n   system( pz_cmd );\n   free( (void*)pz_cmd );\n@@ -1019,7 +1033,7 @@ fix_with_system (p_fixd, pz_fix_file, pz_file_source, pz_temp_file)\n     its stdin and returns the new fd this process will use\n     for stdout.  */\n \n-#else /* is *NOT* __MSDOS__ */\n+#else /* is *NOT* SEPARATE_FIX_PROC */\n static int start_fixer PARAMS ((int, tFixDesc *, char *));\n static int\n start_fixer (read_fd, p_fixd, pz_fix_file)\n@@ -1105,7 +1119,7 @@ fix_applies (p_fixd)\n   int test_ct;\n   tTestDesc *p_test;\n \n-# ifdef __MSDOS__\n+# ifdef SEPARATE_FIX_PROC\n   /*\n    *  There is only one fix that uses a shell script as of this writing.\n    *  I hope to nuke it anyway, it does not apply to DOS and it would\n@@ -1314,9 +1328,9 @@ process ()\n   tFixDesc *p_fixd = fixDescList;\n   int todo_ct = FIX_COUNT;\n   int read_fd = -1;\n-# ifndef __MSDOS__\n+# ifndef SEPARATE_FIX_PROC\n   int num_children = 0;\n-# else /* is __MSDOS__ */\n+# else /* is SEPARATE_FIX_PROC */\n   char* pz_file_source = pz_curr_file;\n # endif\n \n@@ -1339,7 +1353,7 @@ process ()\n   if (VLEVEL( VERB_PROGRESS ) && have_tty)\n     fprintf (stderr, \"%6d %-50s   \\r\", data_map_size, pz_curr_file );\n \n-# ifndef __MSDOS__\n+# ifndef SEPARATE_FIX_PROC\n   process_chain_head = NOPROCESS;\n \n   /* For every fix in our fix list, ...  */\n@@ -1400,7 +1414,7 @@ process ()\n       } while (--num_children > 0);\n     }\n \n-# else /* is __MSDOS__ */\n+# else /* is SEPARATE_FIX_PROC */\n \n   for (; todo_ct > 0; p_fixd++, todo_ct--)\n     {\n@@ -1421,12 +1435,20 @@ process ()\n       pz_file_source = pz_temp_file;\n     }\n \n-  read_fd = open( pz_temp_file, O_RDONLY );\n-  test_for_changes( read_fd );\n-  /* Unlinking a file while it is still open is a Bad Idea on\n-     DOS/Windows.  */\n-  close( read_fd );\n-  unlink( pz_temp_file );\n+  read_fd = open (pz_temp_file, O_RDONLY);\n+  if (read_fd < 0)\n+    {\n+      fprintf (stderr, \"error %d (%s) opening output (%s) for read\\n\",\n+               errno, xstrerror (errno), pz_temp_file);\n+    }\n+  else\n+    {\n+      test_for_changes (read_fd);\n+      /* Unlinking a file while it is still open is a Bad Idea on\n+         DOS/Windows.  */\n+      close (read_fd);\n+      unlink (pz_temp_file);\n+    }\n \n # endif\n   UNLOAD_DATA();"}, {"sha": "7bf8cbcb957f557694cf975c884f0641b4937652", "filename": "gcc/fixinc/fixlib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2Ffixlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2Ffixlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.c?ref=283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee", "patch": "@@ -244,7 +244,7 @@ mn_get_regexps( label_re, name_re, who )\n #endif\n \n \n-#ifdef __MSDOS__\n+#ifdef SEPARATE_FIX_PROC\n \n char*\n make_raw_shell_str( pz_d, pz_s, smax )"}, {"sha": "9bef8b1486376ccb50c958b8bfa0642bac546fea", "filename": "gcc/fixinc/fixlib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.h?ref=283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee", "patch": "@@ -209,7 +209,7 @@ void   apply_fix   PARAMS(( tFixDesc* p_fixd, tCC* filname ));\n apply_fix_p_t\n        run_test    PARAMS(( tCC* t_name, tCC* f_name, tCC* text ));\n \n-#ifdef __MSDOS__\n+#ifdef SEPARATE_FIX_PROC\n char*  make_raw_shell_str\n                    PARAMS(( char* pz_d, tCC* pz_s, size_t smax ));\n #endif"}, {"sha": "98821ba6ee8291d55a6afd7f64aef8327a42e628", "filename": "gcc/fixinc/mkfixinc.sh", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2Fmkfixinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee/gcc%2Ffixinc%2Fmkfixinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fmkfixinc.sh?ref=283da1d32ddf3cc89ef2f7baf70a814b4b9e7bee", "patch": "@@ -49,6 +49,12 @@ case $machine in\n \t\tMAKE=\"${MAKE} -f ${srcdir}/Makefile.DOS srcdir=${srcdir}\"\n \t\t;;\n \n+\t*-*-beos* )\n+\t\tMAKE=\"${MAKE} -f ${srcdir}/Makefile.BEOS srcdir=${srcdir}\"\n+\t\t# Remove the following line to enable fixincludes\n+\t\tfixincludes=\n+\t\t;;\n+\n \talpha*-dec-vms* | \\\n \tarm-semi-aout | armel-semi-aout | \\\n \tarm-semi-aof | armel-semi-aof | \\\n@@ -59,7 +65,6 @@ case $machine in\n \thppa1.1-*-bsd* | \\\n \thppa1.0-*-bsd* | \\\n \thppa*-*-lites* | \\\n-\t*-*-beos* | \\\n \t*-*-gnu* | \\\n \ti?86-moss-msdos* | i?86-*-moss* | \\\n \ti?86-*-osf1* | \\"}]}