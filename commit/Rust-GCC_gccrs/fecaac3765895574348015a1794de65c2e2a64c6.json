{"sha": "fecaac3765895574348015a1794de65c2e2a64c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVjYWFjMzc2NTg5NTU3NDM0ODAxNWExNzk0ZGU2NWMyZTJhNjRjNg==", "commit": {"author": {"name": "Hartmut Penner", "email": "hpenner@de.ibm.com", "date": "2002-02-04T08:29:08Z"}, "committer": {"name": "Hartmut Penner", "email": "hpenner@gcc.gnu.org", "date": "2002-02-04T08:29:08Z"}, "message": "varasm.c (decode_rtx_const): Allow unspec (symbol_ref) in constant pool to be identical by string address...\n\n     * varasm.c (decode_rtx_const): Allow unspec (symbol_ref) in\n     constant pool to be identical by string address and index.\n\nFrom-SVN: r49471", "tree": {"sha": "0b0401d8a5494b815018a2a77fed5e03b51a5fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b0401d8a5494b815018a2a77fed5e03b51a5fb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fecaac3765895574348015a1794de65c2e2a64c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fecaac3765895574348015a1794de65c2e2a64c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fecaac3765895574348015a1794de65c2e2a64c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fecaac3765895574348015a1794de65c2e2a64c6/comments", "author": null, "committer": null, "parents": [{"sha": "f7948d51468a9c45abd8fd21a0efee1ec479ad37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7948d51468a9c45abd8fd21a0efee1ec479ad37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7948d51468a9c45abd8fd21a0efee1ec479ad37"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "1b6153b6000ce710940bd2508535e17b2f274329", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecaac3765895574348015a1794de65c2e2a64c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecaac3765895574348015a1794de65c2e2a64c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fecaac3765895574348015a1794de65c2e2a64c6", "patch": "@@ -1,3 +1,8 @@\n+2002-02-04  Hartmut Penner  <hpenner@de.ibm.com>\n+\n+        * varasm.c (decode_rtx_const): Allow unspec (symbol_ref) in\n+        constant pool to be identical by string address and index.\n+\n 2002-02-04  Anthony Green  <green@redhat.com>\n \n \t* output.h (SECTION_OVERRIDE): Define."}, {"sha": "18d200863ab35e362cbc6ec3717a9b34f61410c7", "filename": "gcc/varasm.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fecaac3765895574348015a1794de65c2e2a64c6/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fecaac3765895574348015a1794de65c2e2a64c6/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fecaac3765895574348015a1794de65c2e2a64c6", "patch": "@@ -2382,7 +2382,7 @@ decode_addr_const (exp, value)\n   value->offset = offset;\n }\n \f\n-enum kind { RTX_DOUBLE, RTX_INT };\n+enum kind { RTX_DOUBLE, RTX_INT, RTX_UNSPEC };\n struct rtx_const\n {\n   ENUM_BITFIELD(kind) kind : 16;\n@@ -3613,7 +3613,24 @@ decode_rtx_const (mode, x, value)\n       abort ();\n     }\n \n-  if (value->kind == RTX_INT && value->un.addr.base != 0)\n+  if (value->kind == RTX_INT && value->un.addr.base != 0\n+      && GET_CODE (value->un.addr.base) == UNSPEC)\n+    {      \n+      /* For a simple UNSPEC, the base is set to the\n+\t operand, the kind field is set to the index of\n+\t the unspec expression. \n+\t Together with the code below, in case that\n+\t the operand is a SYMBOL_REF or LABEL_REF, \n+\t the address of the string or the code_label \n+\t is taken as base.  */\n+      if (XVECLEN (value->un.addr.base, 0) == 1)\n+        {\n+\t  value->kind = RTX_UNSPEC + XINT (value->un.addr.base, 1);\n+\t  value->un.addr.base = XVECEXP (value->un.addr.base, 0, 0);\n+\t}\n+    }\n+\n+  if (value->kind != RTX_DOUBLE && value->un.addr.base != 0)\n     switch (GET_CODE (value->un.addr.base))\n       {\n       case SYMBOL_REF:\n@@ -3643,7 +3660,8 @@ simplify_subtraction (x)\n   decode_rtx_const (GET_MODE (x), XEXP (x, 0), &val0);\n   decode_rtx_const (GET_MODE (x), XEXP (x, 1), &val1);\n \n-  if (val0.un.addr.base == val1.un.addr.base)\n+  if (val0.kind != RTX_DOUBLE && val0.kind == val1.kind\n+      && val0.un.addr.base == val1.un.addr.base)\n     return GEN_INT (val0.un.addr.offset - val1.un.addr.offset);\n   return x;\n }"}]}