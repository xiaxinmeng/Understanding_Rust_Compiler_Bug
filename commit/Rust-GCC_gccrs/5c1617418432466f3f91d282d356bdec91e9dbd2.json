{"sha": "5c1617418432466f3f91d282d356bdec91e9dbd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMxNjE3NDE4NDMyNDY2ZjNmOTFkMjgyZDM1NmJkZWM5MWU5ZGJkMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-24T22:25:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-24T22:25:18Z"}, "message": "c++: Fix template parm with dependent type in concepts.\n\nWhile looking at PR94186 I also noticed this regression; if a non-type\ntemplate parameter uses a type parameter in its type, we need to map both\ntemplate parameters.\n\ngcc/cp/ChangeLog\n2020-03-24  Jason Merrill  <jason@redhat.com>\n\n\t* pt.c (any_template_parm_r): Look into the type of a non-type\n\ttemplate parm.", "tree": {"sha": "aac1fbf15d6cdc9db1491fd3cc0ab70d2ba8e23c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aac1fbf15d6cdc9db1491fd3cc0ab70d2ba8e23c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c1617418432466f3f91d282d356bdec91e9dbd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1617418432466f3f91d282d356bdec91e9dbd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1617418432466f3f91d282d356bdec91e9dbd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1617418432466f3f91d282d356bdec91e9dbd2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e771c087b10d5b730240ea35478eab8694c9c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e771c087b10d5b730240ea35478eab8694c9c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e771c087b10d5b730240ea35478eab8694c9c5d"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "a4b132d6961367c9255630afd4045785507f1b8a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1617418432466f3f91d282d356bdec91e9dbd2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1617418432466f3f91d282d356bdec91e9dbd2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5c1617418432466f3f91d282d356bdec91e9dbd2", "patch": "@@ -1,3 +1,8 @@\n+2020-03-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (any_template_parm_r): Look into the type of a non-type\n+\ttemplate parm.\n+\n 2020-03-24  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (cp_expr): When constructing from an expr and a"}, {"sha": "3c96eeca1912399f32a2cd3d6178c6f69e9a7d6b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1617418432466f3f91d282d356bdec91e9dbd2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1617418432466f3f91d282d356bdec91e9dbd2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5c1617418432466f3f91d282d356bdec91e9dbd2", "patch": "@@ -10431,6 +10431,7 @@ any_template_parm_r (tree t, void *data)\n       WALK_SUBTREE (TREE_OPERAND (t, 1));\n       break;\n \n+    case TEMPLATE_PARM_INDEX:\n     case PARM_DECL:\n       /* A parameter or constraint variable may also depend on a template\n \t parameter without explicitly naming it.  */"}, {"sha": "ebede46b368775be4ecea55a08d5be515c63284d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-nonbool2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1617418432466f3f91d282d356bdec91e9dbd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nonbool2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1617418432466f3f91d282d356bdec91e9dbd2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nonbool2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-nonbool2.C?ref=5c1617418432466f3f91d282d356bdec91e9dbd2", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target concepts } }\n+\n+template<class X, X x>\n+concept C = requires {\n+    requires x;\t\t\t// { dg-error \"bool\" }\n+  };\n+\n+int main() {\n+  C<int, 0>;\n+  return 0;\n+}"}]}