{"sha": "4af797b5020e8071630f8f48641fc071b2d8350c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFmNzk3YjUwMjBlODA3MTYzMGY4ZjQ4NjQxZmMwNzFiMmQ4MzUwYw==", "commit": {"author": {"name": "Jie Zhang", "email": "jie.zhang@analog.com", "date": "2007-08-29T09:15:14Z"}, "committer": {"name": "Jie Zhang", "email": "jiez@gcc.gnu.org", "date": "2007-08-29T09:15:14Z"}, "message": "bfin.c (bfin_expand_call): Inline PLT with l1_text attribute when appropriate.\n\n\t* config/bfin/bfin.c (bfin_expand_call): Inline PLT with l1_text\n\tattribute when appropriate.\n\t(bfin_handle_l1_text_attribute): New.\n\t(bfin_handle_l1_data_attribute): New.\n\t(bfin_attribute_table): Add attributes: l1_text, l1_data,\n\tl1_data_A and l1_data_B.\n\t* doc/extend.texi (node Function Attributes): Document l1_text\n\tfunction attribute.\n\t(Variable Attributes): Add Blackfin subsection. Document l1_data,\n\tl1_data_A and l1_data_B variable attributes.\n\nFrom-SVN: r127887", "tree": {"sha": "438744c9ed8948abcf533896717c5442e8fddf9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/438744c9ed8948abcf533896717c5442e8fddf9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4af797b5020e8071630f8f48641fc071b2d8350c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af797b5020e8071630f8f48641fc071b2d8350c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af797b5020e8071630f8f48641fc071b2d8350c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af797b5020e8071630f8f48641fc071b2d8350c/comments", "author": {"login": "jiez-adi", "id": 103514486, "node_id": "U_kgDOBiuBdg", "avatar_url": "https://avatars.githubusercontent.com/u/103514486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiez-adi", "html_url": "https://github.com/jiez-adi", "followers_url": "https://api.github.com/users/jiez-adi/followers", "following_url": "https://api.github.com/users/jiez-adi/following{/other_user}", "gists_url": "https://api.github.com/users/jiez-adi/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiez-adi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiez-adi/subscriptions", "organizations_url": "https://api.github.com/users/jiez-adi/orgs", "repos_url": "https://api.github.com/users/jiez-adi/repos", "events_url": "https://api.github.com/users/jiez-adi/events{/privacy}", "received_events_url": "https://api.github.com/users/jiez-adi/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e874e49fdf1e637d510c38b8ca031f6843e3c878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e874e49fdf1e637d510c38b8ca031f6843e3c878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e874e49fdf1e637d510c38b8ca031f6843e3c878"}], "stats": {"total": 148, "additions": 147, "deletions": 1}, "files": [{"sha": "e4e1bd9f434a59c4e0b5a7a58c408f6489b26559", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af797b5020e8071630f8f48641fc071b2d8350c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af797b5020e8071630f8f48641fc071b2d8350c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4af797b5020e8071630f8f48641fc071b2d8350c", "patch": "@@ -1,3 +1,16 @@\n+2007-08-29  Jie Zhang  <jie.zhang@analog.com>\n+\n+\t* config/bfin/bfin.c (bfin_expand_call): Inline PLT with l1_text\n+\tattribute when appropriate.\n+\t(bfin_handle_l1_text_attribute): New.\n+\t(bfin_handle_l1_data_attribute): New.\n+\t(bfin_attribute_table): Add attributes: l1_text, l1_data,\n+\tl1_data_A and l1_data_B.\n+\t* doc/extend.texi (node Function Attributes): Document l1_text\n+\tfunction attribute.\n+\t(Variable Attributes): Add Blackfin subsection. Document l1_data,\n+\tl1_data_A and l1_data_B variable attributes.\n+\n 2007-08-28  Jie Zhang  <jie.zhang@analog.com>\n \n \t* config/bfin/bfin.opt (minline-plt): Add."}, {"sha": "c97f3a7ef6132c3d55e1d486ffbdefb84ea9609f", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 109, "deletions": 1, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af797b5020e8071630f8f48641fc071b2d8350c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af797b5020e8071630f8f48641fc071b2d8350c/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=4af797b5020e8071630f8f48641fc071b2d8350c", "patch": "@@ -1879,11 +1879,30 @@ bfin_expand_call (rtx retval, rtx fnaddr, rtx callarg1, rtx cookie, int sibcall)\n \n   if (TARGET_FDPIC)\n     {\n+      int caller_has_l1_text, callee_has_l1_text;\n+\n+      caller_has_l1_text = callee_has_l1_text = 0;\n+\n+      if (lookup_attribute (\"l1_text\",\n+\t\t\t    DECL_ATTRIBUTES (cfun->decl)) != NULL_TREE)\n+\tcaller_has_l1_text = 1;\n+\n+      if (GET_CODE (callee) == SYMBOL_REF\n+\t  && SYMBOL_REF_DECL (callee) && DECL_P (SYMBOL_REF_DECL (callee))\n+\t  && lookup_attribute\n+\t       (\"l1_text\",\n+\t\tDECL_ATTRIBUTES (SYMBOL_REF_DECL (callee))) != NULL_TREE)\n+\tcallee_has_l1_text = 1;\n+\n       if (GET_CODE (callee) != SYMBOL_REF\n \t  || bfin_longcall_p (callee, INTVAL (cookie))\n \t  || (GET_CODE (callee) == SYMBOL_REF\n \t      && !SYMBOL_REF_LOCAL_P (callee)\n-\t      && TARGET_INLINE_PLT))\n+\t      && TARGET_INLINE_PLT)\n+\t  || caller_has_l1_text != callee_has_l1_text\n+\t  || (caller_has_l1_text && callee_has_l1_text\n+\t      && (GET_CODE (callee) != SYMBOL_REF\n+\t\t  || !SYMBOL_REF_LOCAL_P (callee))))\n \t{\n \t  rtx addr = callee;\n \t  if (! address_operand (addr, Pmode))\n@@ -4646,6 +4665,91 @@ bfin_handle_longcall_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n+/* Handle a \"l1_text\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+bfin_handle_l1_text_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  tree decl = *node;\n+\n+  if (TREE_CODE (decl) != FUNCTION_DECL)\n+    {\n+      error (\"`%s' attribute only applies to functions\",\n+\t     IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  /* The decl may have already been given a section attribute\n+     from a previous declaration. Ensure they match.  */\n+  else if (DECL_SECTION_NAME (decl) != NULL_TREE\n+\t   && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+\t\t      \".l1.text\") != 0)\n+    {\n+      error (\"section of %q+D conflicts with previous declaration\",\n+\t     decl);\n+      *no_add_attrs = true;\n+    }\n+  else\n+    DECL_SECTION_NAME (decl) = build_string (9, \".l1.text\");\n+\n+  return NULL_TREE;\n+}\n+\n+/* Handle a \"l1_data\", \"l1_data_A\" or \"l1_data_B\" attribute;\n+   arguments as in struct attribute_spec.handler.  */\n+\n+static tree\n+bfin_handle_l1_data_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  tree decl = *node;\n+\n+  if (TREE_CODE (decl) != VAR_DECL)\n+    {\n+      error (\"`%s' attribute only applies to variables\",\n+\t     IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+  else if (current_function_decl != NULL_TREE\n+\t   && !TREE_STATIC (decl))\n+    {\n+      error (\"`%s' attribute cannot be specified for local variables\",\n+\t     IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+  else\n+    {\n+      const char *section_name;\n+\n+      if (strcmp (IDENTIFIER_POINTER (name), \"l1_data\") == 0)\n+\tsection_name = \".l1.data\";\n+      else if (strcmp (IDENTIFIER_POINTER (name), \"l1_data_A\") == 0)\n+\tsection_name = \".l1.data.A\";\n+      else if (strcmp (IDENTIFIER_POINTER (name), \"l1_data_B\") == 0)\n+\tsection_name = \".l1.data.B\";\n+      else\n+\tgcc_unreachable ();\n+\n+      /* The decl may have already been given a section attribute\n+\t from a previous declaration. Ensure they match.  */\n+      if (DECL_SECTION_NAME (decl) != NULL_TREE\n+\t  && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+\t\t     section_name) != 0)\n+\t{\n+\t  error (\"section of %q+D conflicts with previous declaration\",\n+\t\t decl);\n+\t  *no_add_attrs = true;\n+\t}\n+      else\n+\tDECL_SECTION_NAME (decl)\n+\t  = build_string (strlen (section_name) + 1, section_name);\n+    }\n+\n+ return NULL_TREE;\n+}\n+\n /* Table of valid machine attributes.  */\n const struct attribute_spec bfin_attribute_table[] =\n {\n@@ -4658,6 +4762,10 @@ const struct attribute_spec bfin_attribute_table[] =\n   { \"saveall\", 0, 0, false, true,  true, NULL },\n   { \"longcall\",  0, 0, false, true,  true,  bfin_handle_longcall_attribute },\n   { \"shortcall\", 0, 0, false, true,  true,  bfin_handle_longcall_attribute },\n+  { \"l1_text\", 0, 0, true, false, false,  bfin_handle_l1_text_attribute },\n+  { \"l1_data\", 0, 0, true, false, false,  bfin_handle_l1_data_attribute },\n+  { \"l1_data_A\", 0, 0, true, false, false, bfin_handle_l1_data_attribute },\n+  { \"l1_data_B\", 0, 0, true, false, false,  bfin_handle_l1_data_attribute },\n   { NULL, 0, 0, false, false, false, NULL }\n };\n \f"}, {"sha": "5ae033c09462d2b249cd22418dac749bd9308cd5", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af797b5020e8071630f8f48641fc071b2d8350c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af797b5020e8071630f8f48641fc071b2d8350c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4af797b5020e8071630f8f48641fc071b2d8350c", "patch": "@@ -2148,6 +2148,13 @@ When used together with @code{interrupt_handler}, @code{exception_handler}\n or @code{nmi_handler}, code will be generated to load the stack pointer\n from the USP register in the function prologue.\n \n+@item l1_text\n+@cindex @code{l1_text} function attribute\n+This attribute specifies a function to be placed into L1 Instruction\n+SRAM. The function will be put into a specific section named @code{.l1.text}.\n+With @option{-mfdpic}, function calls with a such function as the callee\n+or caller will use inlined PLT.\n+\n @item long_call/short_call\n @cindex indirect calls on ARM\n This attribute specifies how a particular function is called on\n@@ -3465,6 +3472,24 @@ The @code{dllexport} attribute is described in @xref{Function Attributes}.\n \n @end table\n \n+@subsection Blackfin Variable Attributes\n+\n+Three attributes are currently defined for the Blackfin.\n+\n+@table @code\n+@item l1_data\n+@item l1_data_A\n+@item l1_data_B\n+@cindex @code{l1_data} variable attribute\n+@cindex @code{l1_data_A} variable attribute\n+@cindex @code{l1_data_B} variable attribute\n+Use these attributes on the Blackfin to place the variable into L1 Data SRAM.\n+Variables with @code{l1_data} attribute will be put into the specific section\n+named @code{.l1.data}. Those with @code{l1_data_A} attribute will be put into\n+the specific section named @code{.l1.data.A}. Those with @code{l1_data_B}\n+attribute will be put into the specific section named @code{.l1.data.B}.\n+@end table\n+\n @subsection M32R/D Variable Attributes\n \n One attribute is currently defined for the M32R/D@."}]}