{"sha": "e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyMjNlYTI5MzhlNzg1MDk0YzJjOGM4N2NkYjhkODZmYjU5NmM2ZA==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@overta.ru", "date": "2002-06-30T19:27:48Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2002-06-30T19:27:48Z"}, "message": "extend.texi: Add ip2k port to description of attribute naked.\n\n\t* doc/extend.texi: Add ip2k port to description of attribute\n\tnaked.\n\t* doc/install.texi (Specific): Add ip2k description.\n\t* doc/install-old.texi (Configurations): Add ip2k to possible\n\tcpu types.\n\t* doc/md.texi: Document ip2k constraints.\n\t* config/ip2k/crt0.S: New file.\n\t* config/ip2k/ip2k-protos.h: New file.\n\t* config/ip2k/ip2k.c: New file.\n\t* config/ip2k/ip2k.h: New file.\n\t* config/ip2k/ip2k.md: New file.\n\t* config/ip2k/libgcc.S: New file.\n\t* config/ip2k/t-ip2k: New file.\n\nCo-Authored-By: Alan Lehotsky <apl@alum.mit.edu>\nCo-Authored-By: Bernd Schmidt <bernds@redhat.com>\nCo-Authored-By: Dave Hudson <dave.hudson@ubicom.com>\nCo-Authored-By: Frank Ch. Eigler <fche@redhat.com>\nCo-Authored-By: Graham Stott <grahams@redhat.com>\nCo-Authored-By: Jeff Johnston <jjohnstn@redhat.com>\nCo-Authored-By: Matthew Green <mrg@redhat.com>\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r55122", "tree": {"sha": "4ca44e58c240c4469feb14624166d0d8306a61ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ca44e58c240c4469feb14624166d0d8306a61ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/comments", "author": null, "committer": null, "parents": [{"sha": "66b8c57f68eb301eddf4ad22c96462ec452662ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b8c57f68eb301eddf4ad22c96462ec452662ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b8c57f68eb301eddf4ad22c96462ec452662ae"}], "stats": {"total": 17572, "additions": 17567, "deletions": 5}, "files": [{"sha": "ce3428bf7dc081ead97a9e72c472094f1624d9e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "patch": "@@ -1,3 +1,27 @@\n+Fri Jun 28 17:22:37 2002  Denis Chertykov  <denisc@overta.ru>\n+\t\t\t  Frank Ch. Eigler  <fche@redhat.com>\n+\t                  Matthew Green  <mrg@redhat.com>\n+\t\t\t  Richard Henderson <rtl@redhat.com>\n+\t\t\t  Dave Hudson  <dave.hudson@ubicom.com>\n+\t\t\t  Jeff Johnston  <jjohnstn@redhat.com>\n+\t\t\t  Alan Lehotsky <apl@alum.mit.edu>\n+\t\t\t  Bernd Schmidt  <bernds@redhat.com>\n+\t\t\t  Graham Stott  <grahams@redhat.com>\n+\t\t\t  \n+\t* doc/extend.texi: Add ip2k port to description of attribute\n+\tnaked.\n+\t* doc/install.texi (Specific): Add ip2k description.\n+\t* doc/install-old.texi (Configurations): Add ip2k to possible\n+\tcpu types.\n+\t* doc/md.texi: Document ip2k constraints.\n+\t* config/ip2k/crt0.S: New file.\n+\t* config/ip2k/ip2k-protos.h: New file.\n+\t* config/ip2k/ip2k.c: New file.\n+\t* config/ip2k/ip2k.h: New file.\n+\t* config/ip2k/ip2k.md: New file.\n+\t* config/ip2k/libgcc.S: New file.\n+\t* config/ip2k/t-ip2k: New file.\n+\n 2002-06-30  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/mmix/mmix.md (\"return\"): New pattern."}, {"sha": "131ccb6ec6e796fd725ad412443eabe0fd41579d", "filename": "gcc/config/ip2k/crt0.S", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Fcrt0.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Fcrt0.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fcrt0.S?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "patch": "@@ -0,0 +1,53 @@\n+;\n+;   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+;   Contributed by Red Hat, Inc.\n+;\n+; This file is part of GNU CC.\n+;\n+; GNU CC is free software; you can redistribute it and/or modify\n+; it under the terms of the GNU General Public License as published by\n+; the Free Software Foundation; either version 2, or (at your option)\n+; any later version.\n+;\n+; In addition to the permissions in the GNU General Public License, the\n+; Free Software Foundation gives you unlimited permission to link the\n+; compiled version of this file with other programs, and to distribute\n+; those programs without any restriction coming from the use of this\n+; file.  (The General Public License restrictions do apply in other\n+; respects; for example, they cover modification of the file, and\n+; distribution when not linked into another program.)\n+;\n+; GNU CC is distributed in the hope that it will be useful,\n+; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+; GNU General Public License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GNU CC; see the file COPYING.  If not, write to\n+; the Free Software Foundation, 59 Temple Place - Suite 330,\n+; Boston, MA 02111-1307, USA.\n+;\n+\t\n+\t.file\t\"crt0.S\"\n+\t.text\n+\t.global\t__start\n+\t.func\t__start\n+__start:\n+\tclr\t$ff\t\t; Insure we have a zero available\n+\tmov\tw,#%hi8data(__stack) ; set up stack\n+\tmov\tsph,w\t\t;  \n+\tmov\tw,#%lo8data(__stack)\n+\tmov\tspl,w\n+\n+\tpush\t#0\t\t; Set argc/argv.\n+\tpush\t#0\t\t; Only required for testing\n+\tpush\t#0\t\t;  purposes and \"ansi\" main.\n+\tpush\t#0\n+\tpage\t_main\n+\tcall\t_main\n+\tpush\t$81\t\t; use return value to call exit()\n+\tpush\t$80\n+\tpage\t_exit\n+\tcall\t_exit\n+\tbreak\t\t\t; Should never return\n+\t.endfunc"}, {"sha": "3d9c16793677b982ac95a1798c6faae419ca42ea", "filename": "gcc/config/ip2k/ip2k-protos.h", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "patch": "@@ -0,0 +1,99 @@\n+/* Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Contributed by Red Hat, Inc and Ubicom, Inc.\n+\n+   This file is part of GNU CC.\n+\n+   GNU CC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+extern void asm_file_start PARAMS ((FILE *));\n+extern void asm_file_end PARAMS ((FILE *));\n+\n+extern void function_prologue PARAMS ((FILE *, int));\n+extern void function_epilogue PARAMS ((FILE *, int));\n+extern int find_one_set_bit_p PARAMS ((HOST_WIDE_INT));\n+extern int find_one_clear_bit_p PARAMS ((HOST_WIDE_INT));\n+\n+#ifdef TREE_CODE\n+extern void unique_section PARAMS ((tree, int));\n+extern void encode_section_info PARAMS ((tree));\n+extern void asm_output_section_name PARAMS ((FILE *, tree, const char *,\n+\t\t\t\t\t     int));\n+extern int valid_machine_type_attribute PARAMS ((tree, tree, tree, tree));\n+extern int valid_machine_decl_attribute PARAMS ((tree, tree, tree, tree));\n+extern int ip2k_return_pops_args PARAMS ((tree, tree, int));\n+#endif /* TREE_CODE */\n+\n+#ifdef RTX_CODE\n+extern int legitimate_address_p PARAMS ((enum machine_mode, rtx, int));\n+extern void machine_dependent_reorg PARAMS ((rtx));\n+extern int ip2k_address_cost PARAMS ((rtx));\n+extern int ip2k_extra_constraint PARAMS ((rtx, int));\n+extern rtx legitimize_address PARAMS ((rtx, rtx, enum machine_mode, rtx));\n+extern int adjust_insn_length PARAMS ((rtx insn, int len));\n+extern int default_rtx_costs PARAMS ((rtx, enum rtx_code, enum rtx_code));\n+extern void asm_output_char PARAMS ((FILE *, rtx));\n+extern void asm_output_short PARAMS ((FILE *, rtx));\n+extern void asm_output_byte PARAMS ((FILE *, int));\n+extern void print_operand PARAMS ((FILE *, rtx, int));\n+extern void print_operand_address PARAMS ((FILE *, rtx));\n+extern int ip2k_jump_mode PARAMS ((rtx, rtx));\n+extern void ip2k_split_words PARAMS ((enum machine_mode, enum machine_mode,\n+\t\t\t\t      rtx *));\n+extern rtx ip2k_get_low_half PARAMS ((rtx, enum machine_mode));\n+extern rtx ip2k_get_high_half PARAMS ((rtx, enum machine_mode));\n+extern int ip2k_nonptr_operand PARAMS ((rtx, enum machine_mode));\n+extern int ip2k_ptr_operand PARAMS ((rtx, enum machine_mode));\n+extern int ip2k_ip_operand PARAMS ((rtx, enum machine_mode));\n+extern int ip2k_short_operand PARAMS ((rtx, enum machine_mode));\n+extern int ip2k_gen_operand PARAMS ((rtx, enum machine_mode));\n+extern int ip2k_nonsp_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int ip2k_symbol_ref_operand PARAMS ((rtx, enum machine_mode));\n+extern const char *ip2k_set_compare PARAMS ((rtx, rtx));\n+extern const char *ip2k_gen_sCOND PARAMS ((rtx, enum rtx_code, rtx));\n+extern const char *ip2k_gen_signed_comp_branch PARAMS ((rtx,\n+\t\t\t\t\t\t\tenum rtx_code,\n+\t\t\t\t\t\t\trtx));\n+extern const char *ip2k_gen_unsigned_comp_branch PARAMS ((rtx,\n+\t\t\t\t\t\t\t  enum rtx_code,\n+\t\t\t\t\t\t\t  rtx));\n+extern int is_regfile_address PARAMS ((rtx));\n+extern int ip2k_mode_dependent_address PARAMS ((rtx));\n+extern int ip2k_address_uses_reg_p PARAMS ((rtx, unsigned int));\n+extern int ip2k_xexp_not_uses_reg_p PARAMS ((rtx, unsigned int, int));\n+extern int ip2k_composite_xexp_not_uses_reg_p PARAMS ((rtx, unsigned int, int));\n+extern int ip2k_composite_xexp_not_uses_cc0_p PARAMS ((rtx));\n+extern int ip2k_signed_comparison_operator PARAMS ((rtx,\n+\t\t\t\t\t\t    enum machine_mode));\n+extern int ip2k_unsigned_comparison_operator PARAMS ((rtx,\n+\t\t\t\t\t\t      enum machine_mode));\n+extern int ip2k_unary_operator PARAMS ((rtx, enum machine_mode));\n+extern int ip2k_binary_operator PARAMS ((rtx, enum machine_mode));\n+\n+extern rtx ip2k_compare_operands[3];\n+#endif /* RTX_CODE */\n+\n+#ifdef HAVE_MACHINE_MODES\n+extern int class_max_nregs PARAMS ((enum reg_class, enum machine_mode));\n+extern enum reg_class class_likely_spilled_p PARAMS ((int c));\n+#endif /* HAVE_MACHINE_MODES */\n+\n+#ifdef REAL_VALUE_TYPE\n+extern void asm_output_float PARAMS ((FILE *, REAL_VALUE_TYPE));\n+#endif \n+\n+extern int ip2k_init_elim_offset PARAMS ((int, int));\n+extern void ip2k_init_local_alloc PARAMS ((int *));\n+"}, {"sha": "9a6aa2818ada0636538dab21ceac6e20b93e63f6", "filename": "gcc/config/ip2k/ip2k.c", "status": "added", "additions": 6247, "deletions": 0, "changes": 6247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d"}, {"sha": "8d214460c207ba79d8c5a37fea071befe91b0147", "filename": "gcc/config/ip2k/ip2k.h", "status": "added", "additions": 2604, "deletions": 0, "changes": 2604, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d"}, {"sha": "6b52802bcb24db6826b26f18756ef2e49d44032a", "filename": "gcc/config/ip2k/ip2k.md", "status": "added", "additions": 6866, "deletions": 0, "changes": 6866, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Fip2k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Fip2k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.md?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d"}, {"sha": "1af9ef873ce75d2a6856737f0de8cb8eb6fc469d", "filename": "gcc/config/ip2k/libgcc.S", "status": "added", "additions": 1532, "deletions": 0, "changes": 1532, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Flibgcc.S?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "patch": "@@ -0,0 +1,1532 @@\n+; libgcc.S for the Ubicom IP2k architecture.\n+;\n+; Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+; Contributed by Red Hat, Inc and Ubicom, Inc.\n+;\n+; This file is part of GNU CC.\n+;\n+; GNU CC is free software; you can redistribute it and/or modify\n+; it under the terms of the GNU General Public License as published by\n+; the Free Software Foundation; either version 2, or (at your option)\n+; any later version.\n+;\n+; In addition to the permissions in the GNU General Public License, the\n+; Free Software Foundation gives you unlimited permission to link the\n+; compiled version of this file with other programs, and to distribute\n+; those programs without any restriction coming from the use of this\n+; file.  (The General Public License restrictions do apply in other\n+; respects; for example, they cover modification of the file, and\n+; distribution when not linked into another program.)\n+;\n+; GNU CC is distributed in the hope that it will be useful,\n+; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+; GNU General Public License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GNU CC; see the file COPYING.  If not, write to\n+; the Free Software Foundation, 59 Temple Place - Suite 330,\n+; Boston, MA 02111-1307, USA.  */\n+\n+/*******************************************************\n+\tload byte from arbitrary memory\n+\taddress passed in first bank register, result in W\n+\n+*******************************************************/\n+\t.macro\tmovb\tto, from\n+\tmov\tw, \\from\n+\tmov\t\\to, w\n+\t.endm\n+\n+\f\n+#if defined (L_indcall)\n+/* __indcall - given register containing an address, call the function\n+ *\tat that address.\n+ */\n+\n+\t.sect\t.pram.libgcc,\"ax\"\n+\t.global\t__indcall\n+\t.func\t_indcall,__indcall\n+\n+__indcall:\n+\tpage\t1f\n+\tcall\t1f\n+1:\tpop\tcallh\t\t\t; Get the call target\n+\tpop\tcalll\n+\tret\t\t\t\t; Transfer to new function\n+\n+\t.endfunc\n+#endif\n+\f\n+\n+#if defined (L_mulhi3)\n+\t.sect\t.pram.libgcc,\"ax\"\n+\t.global\t__mulhi3\n+\t.func\t_mulhi3, __mulhi3\n+\n+__mulhi3:\n+\tmov\tw, 2(SP)\t\t; First upper half partial product\n+\tmulu\tw, 3(SP)\n+\tmov\t3(SP), w\n+\tmov\tw, 1(SP)\t\t; Second upper half partial product\n+\tmulu\tw, 4(SP)\n+\tadd\t3(SP), w\n+\tmov\tw, 2(SP)\t\t; Lower half partial product\n+\tmulu\tw, 4(SP)\n+\tmov\t4(SP), w\n+\tmov\tw, MULH\n+\tadd\t3(SP), w\n+\n+\tmov\tw, #2\t\t\t; Adjust the stack leaving the result to\n+\tadd\tspl, w\t\t\t; be popped off later.\n+\tret\n+\n+\t.endfunc\n+\n+#endif /* defined (L_mulhi3) */\n+\n+#if defined (L_mulsi3)\n+/*******************************************************\n+               Multiplication  32 x 32\n+*******************************************************/\n+\t\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__mulsi3\n+\t.func\t_mulsi3, __mulsi3\n+\n+__mulsi3:\n+\tclr\t$80\t\t\t; Assume zero result\n+\tclr\t$81\n+\tclr\t$82\n+\tclr\t$83\n+\n+2:\tmov\tw, 1(sp)\n+\tor\tw, 2(sp)\n+\tor\tw, 3(sp)\n+\tor\tw, 4(sp)\n+\tsnz\t\t\t\t; Any more significant bits to multiply?\n+\tpage\t3f\n+\tjmp\t3f\n+\n+\tsb\t4(sp), 0\t\t; Check LSB of multiplier\n+\tpage\t1f\t\t\t; zero => scale multiplicand & multiplier\n+\tjmp\t1f\n+\n+\tmov\tw, 8(sp)\t\t; Accumulate product\n+\tadd\t$83, w\n+\tmov\tw, 7(sp)\n+\taddc\t$82, w\n+\tmov\tw, 6(sp)\n+\taddc\t$81, w\n+\tmov\tw, 5(sp)\n+\taddc\t$80, w\n+1:\tclrb\tstatus, 0\t\t; scale multiplier down\n+\trr\t1(sp)\t\n+\trr\t2(sp)\n+\trr\t3(sp)\n+\trr\t4(sp)\n+\tclrb\tstatus, 0\n+\trl\t8(sp)\n+\trl\t7(sp)\n+\trl\t6(sp)\n+\trl\t5(sp)\n+\tpage\t2b\n+\tjmp\t2b\n+\n+3:\tmov\tw, #8\n+\tadd\tspl ,w\n+\tret\n+\n+\t.endfunc\n+\n+#endif /* defined (L_mulsi3) */\n+\t\n+#if defined (L_muldi3)\n+/*******************************************************\n+               Multiplication  64 x 64\n+*******************************************************/\n+\t\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__muldi3\n+\t.func\t_muldi3, __muldi3\n+\n+__muldi3:\n+\tclr\t$80\t\t\t; Assume zero result\n+\tclr\t$81\n+\tclr\t$82\n+\tclr\t$83\n+\tclr\t$84\n+\tclr\t$85\n+\tclr\t$86\n+\tclr\t$87\n+\n+2:\tmov\tw, 1(sp)\n+\tor\tw, 2(sp)\n+\tor\tw, 3(sp)\n+\tor\tw, 4(sp)\n+\tor\tw, 5(sp)\n+\tor\tw, 6(sp)\n+\tor\tw, 7(sp)\n+\tor\tw, 8(sp)\n+\tsnz\t\t\t\t; Any more significant bits to multiply?\n+\tpage\t3f\n+\tjmp\t3f\n+\n+\tsb\t8(sp), 0\t\t; Check LSB of multiplier\n+\tpage\t1f\t\t\t; zero => scale multiplicand & multiplier\n+\tjmp\t1f\n+\n+\tmov\tw, 16(sp)\t\t; Accumulate product\n+\tadd\t$87, w\n+\tmov\tw, 15(sp)\n+\taddc\t$86, w\n+\tmov\tw, 14(sp)\n+\taddc\t$85, w\n+\tmov\tw, 13(sp)\n+\taddc\t$84, w\n+\tmov\tw, 12(sp)\n+\taddc\t$83, w\n+\tmov\tw, 11(sp)\n+\taddc\t$82, w\n+\tmov\tw, 10(sp)\n+\taddc\t$81, w\n+\tmov\tw, 9(sp)\n+\taddc\t$80, w\n+\n+1:\tclrb\tstatus, 0\t\t; scale multiplier down\n+\trr\t1(sp)\t\n+\trr\t2(sp)\n+\trr\t3(sp)\n+\trr\t4(sp)\n+\trr\t5(sp)\n+\trr\t6(sp)\n+\trr\t7(sp)\n+\trr\t8(sp)\n+\tclrb\tstatus, 0\n+\trl\t16(sp)\n+\trl\t15(sp)\n+\trl\t14(sp)\n+\trl\t13(sp)\n+\trl\t12(sp)\n+\trl\t11(sp)\n+\trl\t10(sp)\n+\trl\t9(sp)\n+\tpage\t2b\n+\tjmp\t2b\n+\n+3:\tmov\tw, #16\n+\tadd\tspl, w\n+\tret\n+\n+\t.endfunc\n+\n+#endif /* defined (L_muldi3) */\n+\n+#if defined (L_divmodhi4)\n+#define\targ1h 1(SP)\n+#define arg1l 2(SP)\n+#define arg2h 3(SP)\n+#define arg2l 4(SP)\n+#define resl $81\n+#define resh $80\n+#define reml $83\n+#define remh $82\n+#define tmp_var\t$84\n+#define cnt $85\n+#define arg1_sign $86\n+#define res_sign $87\n+\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__divmodhi4\n+\t.func\t_divmodhi4, __divmodhi4\n+\n+__divmodhi4:\n+\tmov\tw,arg2h\n+\tmov\tres_sign,w\n+\tmov\tw,arg1h\n+\tmov\targ1_sign,w\n+\txor\tres_sign,w\n+\n+\tsb\targ1h,7\n+\tpage\t1f\n+\tjmp\t1f\n+\n+\tnot\targ1h\n+\tnot\targ1l\n+\tincsnz\targ1l\n+\tinc\targ1h\n+\n+1:\tsb\targ2h, 7\n+\tpage\t1f\n+\tjmp\t1f\n+\n+\tnot\targ2h\n+\tnot\targ2l\n+\tincsnz\targ2l\n+\tinc\targ2h\n+\n+1:\tpage\t__udivmodhi4\t\t; Do the unsigned div/mod\n+\tcall\t__udivmodhi4\n+\n+\tsb\targ1_sign, 7\n+\tpage\t1f\n+\tjmp\t1f\n+\n+\tnot\treml\n+\tnot\tremh\n+\tincsnz\treml\n+\tinc\tremh\n+\n+1:\tsb\tres_sign, 7\n+\tret\n+\n+\tnot\tresl\n+\tnot\tresh\n+\tincsnz\tresl\n+\tinc\tresh\n+\tret\n+\n+\t.endfunc\n+\n+#undef arg1h\n+#undef arg1l\n+#undef arg2h\n+#undef arg2l\n+#undef resl\n+#undef resh\n+#undef reml\n+#undef remh\n+#undef tmp_var\n+#undef cnt\n+#undef arg1_sign\n+#undef res_sign\n+\n+#endif /* defined (L_divmodhi4) */\n+\t\n+#if defined (L_udivmodhi4)\n+\n+#define\targ1h 1(SP)\n+#define arg1l 2(SP)\n+#define arg2h 3(SP)\n+#define arg2l 4(SP)\n+#define resl $81\n+#define resh $80\n+#define reml $83\n+#define remh $82\n+#define tmp_var\t$84\n+#define cnt $85\n+\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__udivmodhi4\n+\t.func\t_udivmodhi4, __udivmodhi4\n+\n+__udivmodhi4:\n+\tclr\treml\n+\tclr\tremh\n+\tmov\tw, #17\n+\tmov\tcnt,w\n+\tclrb\tstatus, 0\n+\tpage\t1f\n+\tjmp\t1f\n+\n+2:\trl\treml\n+\trl\tremh\n+\tmov\tw, arg2l\n+\tsub\tw, reml\n+\tmov\ttmp_var, w\n+\tmov\tw, arg2h\n+\tsubc\tw, remh\n+\tsc\n+\tpage\t1f\n+\tjmp\t1f\n+\tmov\tremh, w\n+\tmov\tw, tmp_var\n+\tmov\treml, w\n+\n+1:\trl\targ1l\n+\trl\targ1h\n+\tdecsz\tcnt\n+\tpage\t2b\n+\tjmp\t2b\n+\t\n+\tpop\tresh\n+\tpop\tresl\t\n+\tmov\tw, #2\n+\tadd\tspl, w\n+\tret\n+\n+\t.endfunc\n+\n+#undef arg1h\n+#undef arg1l\n+#undef arg2h\n+#undef arg2l\n+#undef resl\n+#undef resh\n+#undef reml\n+#undef remh\n+#undef tmp_var\n+#undef cnt\n+\n+#endif\t/* defined (L_udivmodhi4) */\n+\n+#if defined (L_divmodsi4)\n+\n+#define\targ1a 1(SP)\n+#define arg1b 2(SP)\n+#define arg1c 3(SP)\n+#define arg1d 4(SP)\n+\n+#define arg2a 5(SP)\n+#define arg2b 6(SP)\n+#define arg2c 7(SP)\n+#define arg2d 8(SP)\n+\t\n+#define resa $80\n+#define resb $81\n+#define resc $82\n+#define resd $83\n+\n+#define rema $84\n+#define remb $85\n+#define remc $86\n+#define remd $87\n+\n+#define tmp_var\t$88\n+#define tmp_var1 $89\n+#define tmp_var2 $8a\n+#define cnt $8b\n+#define arg1_sign $8c\n+#define res_sign $8d\n+\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__divmodsi4\n+\t.func\t_divmodsi4, __divmodsi4\n+\n+__divmodsi4:\n+\tmov\tw, arg2a\n+\tmov\tres_sign, w\n+\tmov\tw, arg1a\n+\tmov\targ1_sign, w\n+\txor\tres_sign, w\n+\n+\tsb\targ1a, 7\n+\tpage\t1f\n+\tjmp\t1f\n+\n+\tnot\targ1d\n+\tnot\targ1c\n+\tnot\targ1b\n+\tnot\targ1a\n+\tincsnz\targ1d\n+\tincsz\targ1c\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\targ1b\n+\tinc\targ1a\n+\n+1:\tsb\targ2a, 7\n+\tpage\t1f\n+\tjmp\t1f\n+\n+\tnot\targ2d\n+\tnot\targ2c\n+\tnot\targ2b\n+\tnot\targ2a\n+\tincsnz\targ2d\n+\tincsz\targ2c\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\targ2b\n+\tinc\targ2a\n+\n+1:\tpage\t__udivmodsi4\t\t; Do the unsigned div/mod.\n+\tcall\t__udivmodsi4\n+\n+\tsb\targ1_sign, 7\n+\tpage\t1f\n+\tjmp\t1f\n+\n+\tnot\tremd\n+\tnot\tremc\n+\tnot\tremb\n+\tnot\trema\n+\tincsnz\tremd\n+\tincsz\tremc\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\tremb\n+\tinc\trema\n+\n+1:\tsb\tres_sign, 7\n+\tret\n+\n+\tnot\tresd\n+\tnot\tresc\n+\tnot\tresb\n+\tnot\tresa\n+\tincsnz\tresd\n+\tincsz\tresc\n+\tret\n+\tincsnz\tresb\n+\tinc\tresa\n+\tret\n+\n+\t.endfunc\n+\n+#undef arg1a\n+#undef arg1b\n+#undef arg1c\n+#undef arg1d\n+\n+#undef arg2a\n+#undef arg2b\n+#undef arg2c\n+#undef arg2d\n+\t\n+#undef resa\n+#undef resb\n+#undef resc\n+#undef resd\n+\n+#undef rema\n+#undef remb\n+#undef remc\n+#undef remd\n+\n+#undef tmp_var\n+#undef tmp_var1\n+#undef tmp_var2\n+#undef cnt\n+#undef arg1_sign\n+#undef res_sign\n+\n+#endif /* defined (L_divmodsi4) */\n+\n+#if defined (L_udivmodsi4)\t\t\n+#define\targ1a 1(SP)\n+#define arg1b 2(SP)\n+#define arg1c 3(SP)\n+#define arg1d 4(SP)\n+\n+#define arg2a 5(SP)\n+#define arg2b 6(SP)\n+#define arg2c 7(SP)\n+#define arg2d 8(SP)\n+\t\n+#define resa $80\n+#define resb $81\n+#define resc $82\n+#define resd $83\n+\n+#define rema $84\n+#define remb $85\n+#define remc $86\n+#define remd $87\n+\n+#define tmp_var\t$88\n+#define tmp_var1 $89\n+#define tmp_var2 $8a\n+#define cnt $8b\n+\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__udivmodsi4\n+\t.func\t_udivmodsi4, __udivmodsi4\n+\n+__udivmodsi4:\n+\tclr\tremd\n+\tclr\tremc\n+\tclr\tremb\n+\tclr\trema\n+\tmov\tw, #33\n+\tmov\tcnt, w\n+\tclrb\tstatus, 0\n+\tpage\t1f\n+\tjmp\t1f\n+\n+2:\trl\tremd\n+\trl\tremc\n+\trl\tremb\n+\trl\trema\n+\tmov\tw, arg2d\n+\tsub\tw, remd\n+\tmov\ttmp_var, w\n+\tmov\tw, arg2c\n+\tsubc\tw, remc\n+\tmov\ttmp_var1, w\n+\tmov\tw, arg2b\n+\tsubc\tw, remb\n+\tmov\ttmp_var2, w\n+\tmov\tw, arg2a\n+\tsubc\tw, rema\n+\tsc\n+\tpage\t1f\n+\tjmp\t1f\n+\n+\tmov\trema, w\n+\tmov\tw, tmp_var2\n+\tmov\tremb, w\n+\tmov\tw, tmp_var1\n+\tmov\tremc, w\n+\tmov\tw, tmp_var\n+\tmov\tremd, w\n+\n+1:\trl\targ1d\n+\trl\targ1c\n+\trl\targ1b\n+\trl\targ1a\n+\tdecsz\tcnt\n+\tpage\t2b\n+\tjmp\t2b\n+\n+\tpop\tresa\n+\tpop\tresb\n+\tpop\tresc\n+\tpop\tresd\n+\tmov\tw, #4\n+\tadd\tspl, w\n+\tret\n+\n+\t.endfunc\n+\n+#undef arg1a\n+#undef arg1b\n+#undef arg1c\n+#undef arg1d\n+\n+#undef arg2a\n+#undef arg2b\n+#undef arg2c\n+#undef arg2d\n+\t\n+#undef resa\n+#undef resb\n+#undef resc\n+#undef resd\n+\n+#undef rema\n+#undef remb\n+#undef remc\n+#undef remd\n+\n+#undef tmp_var\n+#undef tmp_var1\n+#undef tmp_var2\n+#undef cnt\n+\n+#endif /* defined (L_udivmodsi4) */\n+\n+#if defined (L_divmoddi4)\n+\n+#define\targ1s 1(SP)\n+#define arg1t 2(SP)\n+#define arg1u 3(SP)\n+#define arg1v 4(SP)\n+#define arg1w 5(SP)\n+#define arg1x 6(SP)\n+#define arg1y 7(SP)\n+#define arg1z 8(SP)\n+\n+#define arg2s 9(SP)\n+#define arg2t 10(SP)\n+#define arg2u 11(SP)\n+#define arg2v 12(SP)\n+#define arg2w 13(SP)\n+#define arg2x 14(SP)\n+#define arg2y 15(SP)\n+#define arg2z 16(SP)\n+\t\n+#define ress $80\n+#define rest $81\n+#define resu $82\n+#define resv $83\n+#define resw $84\n+#define resx $85\n+#define resy $86\n+#define resz $87\n+\n+#define rems $88\n+#define remt $89\n+#define remu $8a\n+#define remv $8b\n+#define remw $8c\n+#define remx $8d\n+#define remy $8e\n+#define remz $8f\n+\n+#define tmp_var\t$90\n+#define tmp_var1 $91\n+#define tmp_var2 $92\n+#define tmp_var3 $93\n+#define tmp_var4 $94\n+#define tmp_var5 $95\n+#define tmp_var6 $96\n+#define cnt $97\n+\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__divmoddi4\n+\t.func\t_divmoddi4, __divmoddi4\n+\n+__divmoddi4:\n+\trl\tw, arg2s\t\t; Use MULH to track sign bits.\n+\trl\tMULH\n+\trl\tw, arg1s\n+\trl\tWREG\n+\txor\tMULH, w\n+\trl\tw, arg1s\n+\trl\tMULH\n+\n+\tsb\targ1s, 7\n+\tpage\t1f\n+\tjmp\t1f\n+\n+\tnot\targ1s\n+\tnot\targ1t\n+\tnot\targ1u\n+\tnot\targ1v\n+\tnot\targ1w\n+\tnot\targ1x\n+\tnot\targ1y\n+\tnot\targ1z\n+\tincsnz\targ1z\n+\tincsz\targ1y\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\targ1x\n+\tincsz\targ1w\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\targ1v\n+\tincsz\targ1u\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\targ1t\n+\tinc\targ1s\n+\n+1:\tsb\targ2s, 7\n+\tpage\t1f\n+\tjmp\t1f\n+\n+\tnot\targ2s\n+\tnot\targ2t\n+\tnot\targ2u\n+\tnot\targ2v\n+\tnot\targ2w\n+\tnot\targ2x\n+\tnot\targ2y\n+\tnot\targ2z\n+\tincsnz\targ2z\n+\tincsz\targ2y\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\targ2x\n+\tincsz\targ2w\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\targ2v\n+\tincsz\targ2u\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\targ2t\n+\tinc\targ2s\n+\n+1:\tpage\t__udivmoddi4\t\t; Do the unsigned div/mod.\n+\tcall\t__udivmoddi4\n+\n+\tsb\tMULH, 0\t\t\t; Look at the save sign bit for arg 1.\n+\tpage\t1f\n+\tjmp\t1f\n+\n+\tnot\trems\n+\tnot\tremt\n+\tnot\tremu\n+\tnot\tremv\n+\tnot\tremw\n+\tnot\tremx\n+\tnot\tremy\n+\tnot\tremz\n+\tincsnz\tremz\n+\tincsz\tremy\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\tremx\n+\tincsz\tremw\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\tremv\n+\tincsz\tremu\n+\tpage\t1f\n+\tjmp\t1f\n+\tincsnz\tremt\n+\tinc\trems\n+\n+1:\tsb\tMULH, 1\n+\tret\n+\n+\tnot\tress\n+\tnot\trest\n+\tnot\tresu\n+\tnot\tresv\n+\tnot\tresw\n+\tnot\tresx\n+\tnot\tresy\n+\tnot\tresz\n+\tincsnz\tresz\n+\tincsz\tresy\n+\tret\n+\tincsnz\tresx\n+\tincsz\tresw\n+\tret\n+\tincsnz\tresv\n+\tincsz\tresu\n+\tret\n+\tincsnz\trest\n+\tinc\tress\n+\tret\n+\n+\t.endfunc\n+\n+#undef arg1s\n+#undef arg1t\n+#undef arg1u\n+#undef arg1v\n+#undef arg1w\n+#undef arg1x\n+#undef arg1y\n+#undef arg1z\n+\n+#undef arg2s\n+#undef arg2t\n+#undef arg2u\n+#undef arg2v\n+#undef arg2w\n+#undef arg2x\n+#undef arg2y\n+#undef arg2z\n+\t\n+#undef ress\n+#undef rest\n+#undef resu\n+#undef resv\n+#undef resw\n+#undef resx\n+#undef resy\n+#undef resz\n+\n+#undef rems\n+#undef remt\n+#undef remu\n+#undef remv\n+#undef remw\n+#undef remx\n+#undef remy\n+#undef remz\n+\n+#undef tmp_var\n+#undef tmp_var1\n+#undef tmp_var2\n+#undef tmp_var3\n+#undef tmp_var4\n+#undef tmp_var5\n+#undef tmp_var6\n+#undef cnt\n+\n+#endif /* defined (L_divmoddi4) */\n+\n+#if defined (L_udivmoddi4)\t\t\n+#define\targ1s 1(SP)\n+#define arg1t 2(SP)\n+#define arg1u 3(SP)\n+#define arg1v 4(SP)\n+#define arg1w 5(SP)\n+#define arg1x 6(SP)\n+#define arg1y 7(SP)\n+#define arg1z 8(SP)\n+\n+#define arg2s 9(SP)\n+#define arg2t 10(SP)\n+#define arg2u 11(SP)\n+#define arg2v 12(SP)\n+#define arg2w 13(SP)\n+#define arg2x 14(SP)\n+#define arg2y 15(SP)\n+#define arg2z 16(SP)\n+\t\n+#define ress $80\n+#define rest $81\n+#define resu $82\n+#define resv $83\n+#define resw $84\n+#define resx $85\n+#define resy $86\n+#define resz $87\n+\n+#define rems $88\n+#define remt $89\n+#define remu $8a\n+#define remv $8b\n+#define remw $8c\n+#define remx $8d\n+#define remy $8e\n+#define remz $8f\n+\n+#define tmp_var\t$90\n+#define tmp_var1 $91\n+#define tmp_var2 $92\n+#define tmp_var3 $93\n+#define tmp_var4 $94\n+#define tmp_var5 $95\n+#define tmp_var6 $96\n+#define cnt $97\n+\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__udivmoddi4\n+\t.func\t_udivmoddi4, __udivmoddi4\n+\n+__udivmoddi4:\n+\tclr\trems\n+\tclr\tremt\n+\tclr\tremu\n+\tclr\tremv\n+\tclr\tremw\n+\tclr\tremx\n+\tclr\tremy\n+\tclr\tremz\n+\tmov\tw, #65\n+\tmov\tcnt, w\n+\tclrb\tstatus, 0\n+\tpage\t1f\n+\tjmp\t1f\n+\n+2:\trl\tremz\n+\trl\tremy\n+\trl\tremx\n+\trl\tremw\n+\trl\tremv\n+\trl\tremu\n+\trl\tremt\n+\trl\trems\n+\tmov\tw, arg2z\n+\tsub\tw, remz\n+\tmov\ttmp_var, w\n+\tmov\tw, arg2y\n+\tsubc\tw, remy\n+\tmov\ttmp_var1, w\n+\tmov\tw, arg2x\n+\tsubc\tw, remx\n+\tmov\ttmp_var2, w\n+\tmov\tw, arg2w\n+\tsubc\tw, remw\n+\tmov\ttmp_var3, w\n+\tmov\tw, arg2v\n+\tsubc\tw, remv\n+\tmov\ttmp_var4, w\n+\tmov\tw, arg2u\n+\tsubc\tw, remu\n+\tmov\ttmp_var5, w\n+\tmov\tw, arg2t\n+\tsubc\tw, remt\n+\tmov\ttmp_var6, w\n+\tmov\tw, arg2s\n+\tsubc\tw, rems\n+\tsc\n+\tpage\t1f\n+\tjmp\t1f\n+\n+\tmov\trems, w\n+\tmov\tw, tmp_var6\n+\tmov\tremt, w\n+\tmov\tw, tmp_var5\n+\tmov\tremu, w\n+\tmov\tw, tmp_var4\n+\tmov\tremv, w\n+\tmov\tw, tmp_var3\n+\tmov\tremw, w\n+\tmov\tw, tmp_var2\n+\tmov\tremx, w\n+\tmov\tw, tmp_var1\n+\tmov\tremy, w\n+\tmov\tw, tmp_var\n+\tmov\tremz, w\n+\n+1:\trl\targ1z\n+\trl\targ1y\n+\trl\targ1x\n+\trl\targ1w\n+\trl\targ1v\n+\trl\targ1u\n+\trl\targ1t\n+\trl\targ1s\n+\tdecsz\tcnt\n+\tpage\t2b\n+\tjmp\t2b\n+\n+\tpop\tress\n+\tpop\trest\n+\tpop\tresu\n+\tpop\tresv\n+\tpop\tresw\n+\tpop\tresx\n+\tpop\tresy\n+\tpop\tresz\n+\tmov\tw, #8\n+\tadd\tspl, w\n+\tret\n+\n+\t.endfunc\n+\n+#undef arg1s\n+#undef arg1t\n+#undef arg1u\n+#undef arg1v\n+#undef arg1w\n+#undef arg1x\n+#undef arg1y\n+#undef arg1z\n+\n+#undef arg2s\n+#undef arg2t\n+#undef arg2u\n+#undef arg2v\n+#undef arg2w\n+#undef arg2x\n+#undef arg2y\n+#undef arg2z\n+\t\n+#undef ress\n+#undef rest\n+#undef resu\n+#undef resv\n+#undef resw\n+#undef resx\n+#undef resy\n+#undef resz\n+\n+#undef rems\n+#undef remt\n+#undef remu\n+#undef remv\n+#undef remw\n+#undef remx\n+#undef remy\n+#undef remz\n+\n+#undef tmp_var\n+#undef tmp_var1\n+#undef tmp_var2\n+#undef tmp_var3\n+#undef tmp_var4\n+#undef tmp_var5\n+#undef tmp_var6\n+#undef cnt\n+\n+#endif /* defined (L_udivmoddi4) */\n+\n+#define LT\t#0\n+#define EQ\t#1\n+#define GT\t#2\n+\n+#if defined(L_cmphi2)\n+#define arg1l 2(sp)\n+#define arg1h 1(sp)\n+#define arg2l 4(sp)\n+#define arg2h 3(sp)\n+\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__cmphi2\n+\t.global\t__cmp_ret\n+\t.global\t__cmpqi_ret\n+\t.func\t_cmphi2, __cmphi2\n+\n+__cmphi2:\n+\tmov\tw,arg1l\t\n+\tsub\tw,arg2l\n+\tsnz\n+\tpage\t2f\n+\tjmp\t2f\n+\tmov\tw,arg1h\n+1:\n+\tsubc\tw,arg2h\n+\tclr\targ2l\n+\trl\targ2l\n+\tsnb\targ1h,7\n+\tsetb\targ2l,2\n+\tsnb\targ2h,7\n+\tsetb\targ2l,1\n+\tmov\tw,#3\n+\n+__cmp_ret:\n+\tadd\tspl,w\t\t\t;  sign1\n+\tpop\twreg\t\t\t;   sign2\n+\n+__cmpqi_ret:\n+\tadd\tpcl,w\t\t\t;    carry of arg1 - arg2\n+\tretw\tGT\t\t\t; [000] arg1 > arg2\n+\tretw\tLT\t\t\t; [001] arg1 < arg2\n+\tretw\tGT\t\t\t; [010] arg1 > arg2\n+\tretw\tGT\t\t\t; [011] arg1 > arg2\n+\tretw\tLT\t\t\t; [100] arg1 < arg2\n+\tretw\tLT\t\t\t; [101] arg1 < arg2\n+\tretw\tGT\t\t\t; [110] arg1 > arg2\n+\tretw\tLT\t\t\t; [111] arg1 < arg2\n+2:\n+\tmov\tw,arg1h\n+\tcse\tw,arg2h\n+\tpage\t1b\n+\tjmp\t1b\n+\tmov\tw,#4\n+\tadd\tspl,w\n+\tretw\tEQ\n+\n+\t.endfunc\n+#undef arg1l\n+#undef arg1h\n+#undef arg2l\n+#undef arg2h\n+#endif  /* L_cmphi2 */\n+\n+#if defined(L_cmpqi2)\n+#define arg1 1(sp)\n+#define arg2 2(sp)\n+\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__cmpqi2\n+\t.func\t_cmpqi2, __cmpqi2\n+\n+__cmpqi2:\n+\tmov\tw, arg1\n+\tsub\tw, arg2\n+\tsnz\n+\tpage\t2f\n+\tjmp\t2f\n+\n+\tclr\twreg\n+\trl\twreg\n+\tsnb\targ1, 7\n+\tsetb\twreg, 2\n+\tsnb\targ2, 7\n+\tsetb\twreg, 1\n+\tinc\tspl\n+\tinc\tspl\n+\tpage\t__cmpqi_ret\n+\tjmp\t__cmpqi_ret\n+\n+2:\tmov\tw, #2\n+\tadd\tspl, w\n+\tretw\tEQ\n+\n+\t.endfunc\n+#undef arg1l\n+#undef arg2l\n+#endif  /* L_cmpqi2 */\n+\n+#if defined(L_cmpsi2)\n+#define arg1d 4(sp)\n+#define arg1c 3(sp)\n+#define arg1b 2(sp)\n+#define arg1a 1(sp)\n+#define arg2d 8(sp)\n+#define arg2c 7(sp)\n+#define arg2b 6(sp)\n+#define arg2a 5(sp)\n+\t\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__cmpsi2\n+\t.func\t_cmpsi2, __cmpsi2\n+\n+__cmpsi2:\n+\tmov\tw, arg1d\n+\tsub\tw, arg2d\n+\tsnz\n+\tpage\t2f\n+\tjmp\t2f\n+\n+1:\tmov\tw, arg1c\n+\tsubc\tw, arg2c\n+\tmov\tw, arg1b\n+\tsubc\tw, arg2b\n+\tmov\tw, arg1a\n+\tsubc\tw, arg2a\n+\n+\tclr\targ2d\n+\trl\targ2d\n+\tsnb\targ1a, 7\n+\tsetb\targ2d, 2\n+\tsnb\targ2a, 7\n+\tsetb\targ2d, 1\n+\tmov\tw, #7\n+\tpage\t__cmp_ret\n+\tjmp\t__cmp_ret\n+\n+2:\tmov\tw, arg1c\n+\tcse\tw, arg2c\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tmov\tw, arg1b\n+\tcse\tw, arg2b\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tmov\tw, arg1a\n+\tcse\tw, arg2a\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tmov\tw, #8\n+\tadd\tspl, w\n+\tretw\tEQ\n+\n+\t.endfunc\n+\n+#undef arg1d\n+#undef arg1c\n+#undef arg1b\n+#undef arg1a\n+#undef arg2d\n+#undef arg2c\n+#undef arg2b\n+#undef arg2a\n+#endif  /* L_cmpsi2 */\n+\n+#if defined(L_cmpdi2)\n+#define arg1z 8(sp)\n+#define arg1y 7(sp)\n+#define arg1x 6(sp)\n+#define arg1w 5(sp)\n+#define arg1v 4(sp)\n+#define arg1u 3(sp)\n+#define arg1t 2(sp)\n+#define arg1s 1(sp)\n+\n+#define arg2z 16(sp)\n+#define arg2y 15(sp)\n+#define arg2x 14(sp)\n+#define arg2w 13(sp)\n+#define arg2v 12(sp)\n+#define arg2u 11(sp)\n+#define arg2t 10(sp)\n+#define arg2s 9(sp)\n+\t\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__cmpdi2\n+\t.func\t_cmpdi2, __cmpdi2\n+\n+__cmpdi2:\n+\tmov\tw, arg1z\n+\tsub\tw, arg2z\n+\tsnz\n+\tpage\t2f\n+\tjmp\t2f\n+\n+1:\tmov\tw, arg1y\n+\tsubc\tw, arg2y\n+\tmov\tw, arg1x\n+\tsubc\tw, arg2x\n+\tmov\tw, arg1w\n+\tsubc\tw, arg2w\n+\tmov\tw, arg1v\n+\tsubc\tw, arg2v\n+\tmov\tw, arg1u\n+\tsubc\tw, arg2u\n+\tmov\tw, arg1t\n+\tsubc\tw, arg2t\n+\tmov\tw, arg1s\n+\tsubc\tw, arg2s\n+\tclr\targ2z\n+\trl\targ2z\n+\tsnb\targ1s, 7\n+\tsetb\targ2z, 2\n+\tsnb\targ2s, 7\n+\tsetb\targ2z, 1\n+\tmov\tw, #15\n+\tpage\t__cmp_ret\n+\tjmp\t__cmp_ret\n+\n+2:\tmov\tw, arg1y\n+\tcse\tw, arg2y\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tmov\tw, arg1x\n+\tcse\tw, arg2x\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tmov\tw, arg1w\n+\tcse\tw, arg2w\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tmov\tw, arg1v\n+\tcse\tw, arg2v\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tmov\tw, arg1u\n+\tcse\tw, arg2u\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tmov\tw, arg1t\n+\tcse\tw, arg2t\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tmov\tw, arg1s\n+\tcse\tw, arg2s\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tmov\tw, #16\n+\tadd\tspl, w\n+\tretw\tEQ\n+\n+\t.endfunc\n+\t\n+#undef arg1z\n+#undef arg1y\n+#undef arg1x\n+#undef arg1w\n+#undef arg1v\n+#undef arg1u\n+#undef arg1t\n+#undef arg1s\n+#undef arg2z\n+#undef arg2y\n+#undef arg2x\n+#undef arg2w\n+#undef arg2v\n+#undef arg2u\n+#undef arg2t\n+#undef arg2s\n+\n+#endif  /* L_cmpdi2 */\n+\t\n+#if defined(L_cmpdi2_dp)\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__cmpdi2_dp\n+\t.func\t_cmpdi2_dp, __cmpdi2_dp\n+\n+__cmpdi2_dp:\n+\tpush\t7(dp)\n+\tpush\t6(dp)\n+\tpush\t5(dp)\n+\tpush\t4(dp)\n+\tpush\t3(dp)\n+\tpush\t2(dp)\n+\tpush\t1(dp)\n+\tpush\t(dp)\n+\tpage\t__cmpdi2\n+\tjmp\t__cmpdi2\n+\n+\t.endfunc\n+#endif  /* L_cmpdi2_dp */\n+\n+#if defined(L_fp_pop_args_ret)\n+\t.sect\t.pram.libgcc,\"ax\"\n+\t.global\t__fp_pop_args_ret\n+\t.global\t__pop_args_ret\n+\t.func\t__fp_pop_args_ret, __fp_pop_args_ret\n+\n+__fp_pop_args_ret:\n+\tpop\t0xfd\n+\tpop\t0xfe\n+__pop_args_ret:\n+\tpop\tcallh\n+\tpop\tcalll\n+\tadd\tspl, w\n+\tret\n+\n+\t.endfunc\n+#endif /* L_fp_pop_args_ret */\n+\n+#if defined(L_leaf_fp_pop_args_ret)\n+\t.sect\t.pram.libgcc,\"ax\"\n+\t.global\t__leaf_fp_pop_args_ret\n+\t.func\t__leaf_fp_pop_args_ret, __leaf_fp_pop_args_ret\n+\n+__leaf_fp_pop_args_ret:\n+\tpop\t0xfd\n+\tpop\t0xfe\n+\tadd\tspl, w\n+\tret\n+\n+\t.endfunc\n+#endif /* L_leaf_fp_pop_args_ret */\n+\n+#if defined(L_fp_pop2_args_ret)\n+\t.sect\t.pram.libgcc,\"ax\"\n+\t.global\t__fp_pop2_args_ret\n+\t.global\t__pop2_args_ret\n+\t.func\t__fp_pop2_args_ret, __fp_pop2_args_ret\n+\n+__fp_pop2_args_ret:\n+\tpop\t0xfd\n+\tpop\t0xfe\n+__pop2_args_ret:\n+\tmov\tw, #2\n+\tpop\tcallh\n+\tpop\tcalll\n+\tadd\tspl, w\n+\tret\n+\n+\t.endfunc\n+#endif /* L_fp_pop2_args_ret */\n+\n+#if defined(L_leaf_fp_pop2_args_ret)\n+\t.sect\t.pram.libgcc,\"ax\"\n+\t.global\t__leaf_fp_pop2_args_ret\n+\t.func\t__leaf_fp_pop2_args_ret, __leaf_fp_pop2_args_ret\n+\n+__leaf_fp_pop2_args_ret:\n+\tpop\t0xfd\n+\tpop\t0xfe\n+\tmov\tw, #2\n+\tadd\tspl, w\n+\tret\n+\n+\t.endfunc\n+#endif /* L_leaf_fp_pop2_args_ret */\n+\n+#if defined(L_movstrhi_countqi)\n+\t.sect\t.pram.libgcc,\"ax\"\n+\t.global\t__movstrhi_countqi\n+\t.func\t_movstrhi_countqi, __movstrhi_countqi\n+\n+__movstrhi_countqi:\n+\tpush\tdph\t\t\t; Save our pointer regs\n+\tpush\tdpl\n+\tpush\tiph\n+\tpush\tipl\n+\n+\tmov\tw, 5(SP)\t\t; Get our dest pointer\n+\tmov\tdph, w\n+\tmov\tw, 6(SP)\n+\tmov\tdpl, w\n+\tmov\tw, 7(SP)\t\t; And our source pointer\n+\tmov\tiph, w\n+\tmov\tw, 8(SP)\n+\tmov\tipl, w\n+\n+1:\tpush\t(IP)\t\t\t; *dest++ = *src++\n+\tpop\t0(DP)\n+\tinc\tipl\n+\tinc\tdpl\n+\tdecsz\t9(SP)\t\t\t; Loop until completed\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tpop\tipl\t\t\t; Restore our pointer regs\n+\tpop\tiph\n+\tpop\tdpl\n+\tpop\tdph\n+\n+\tmov\tw, #5\t\t\t; Tidy up our stack args\n+\tadd\tspl, w\n+\tret\n+\n+\t.endfunc\n+#endif\n+\n+#if defined(L_movstrhi_counthi)\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__movstrhi_counthi\n+\t.func\t_movstrhi_counthi, __movstrhi_counthi\n+\n+__movstrhi_counthi:\n+\tpush\tdph\t\t\t; Save our pointer regs\n+\tpush\tdpl\n+\tpush\tiph\n+\tpush\tipl\n+\n+\tmov\tw, 5(SP)\t\t; Get our dest pointer\n+\tmov\tdph, w\n+\tmov\tw, 6(SP)\n+\tmov\tdpl, w\n+\tmov\tw, 7(SP)\t\t; And our source pointer\n+\tmov\tiph, w\n+\tmov\tw, 8(SP)\n+\tmov\tipl, w\n+\n+\ttest\t10(SP)\t\t\t; If we have a non-zero LSB then adjust the\n+\tsz\t\t\t\t; MSB of the loop count to allow us to use\n+\tinc\t9(SP)\t\t\t; skip tricks!\n+\n+1:\tpush\t(IP)\t\t\t; *dest++ = *src++\n+\tpop\t0(DP)\n+\tinc\tipl\n+\tinc\tdpl\n+\tdecsnz\t10(SP)\t\t\t; Loop until completed - note the skip trick\n+\tdecsz\t9(SP)\t\t\t; on the MSB!\n+\tpage\t1b\n+\tjmp\t1b\n+\n+\tpop\tipl\t\t\t; Restore our pointer regs\n+\tpop\tiph\n+\tpop\tdpl\n+\tpop\tdph\n+\n+\tmov\tw, #6\t\t\t; Tidy up our stacked args.\n+\tadd\tspl, w\n+\tret\n+\n+\t.endfunc\n+#endif\n+\n+#if defined(L_exit)\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t__exit\n+\t.global\t_exit\n+\t.func\t_exit, __exit\n+\t.weak\t__exit\n+\t.weak\t_exit\n+\n+_exit:\t\t\n+__exit:\n+\tpop\t$88\n+\tpop\twreg\n+\tor\tw, $88\n+\tpush    wreg\n+\tpush\t#0\n+\tpush\t#1\n+\tsystem\t\t\t\t; Exit wreg\n+\tpage\t__exit\t\t\t; Never return\n+\tjmp\t__exit\n+\n+\t.endfunc\n+#endif\n+\n+#if defined(Labort)\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t_abort\n+\t.func\tabort, _abort\n+\n+_abort:\n+\tpush\t#1\n+\tpush\t#0\n+\tpush\t#1\n+\tsystem\t\t\t\t; Exit 1\n+\tret\n+\n+\t.endfunc\n+#endif\n+\n+#if defined(Lwrite)\n+\t/* Dummy entrypoint to suppress problems with glue code. */\n+\t.sect\t.text.libgcc,\"ax\"\n+\t.global\t_write\n+\t.func\twrite, _write\n+;;\n+;; write (fil,buf,len) - say that write succeeds....\n+;; \n+_write:\n+\tmovb\t$80, 5(SP)\n+\tmovb\t$81, 6(SP)\t\t; Return length written\n+\tmov\tw, #6\n+\tadd\tspl, w\n+\tret\n+\t\n+\t.endfunc\n+#endif\n+"}, {"sha": "3c8d2f9dab5ee10f87f87431508efeed72456fc7", "filename": "gcc/config/ip2k/t-ip2k", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Ft-ip2k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fconfig%2Fip2k%2Ft-ip2k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Ft-ip2k?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "patch": "@@ -0,0 +1,54 @@\n+CROSS_LIBGCC1 = libgcc1-asm.a\n+LIB1ASMSRC = ip2k/libgcc.S\n+\n+LIB1ASMFUNCS = \\\n+\t_indcall \\\n+\t_mulhi3 \\\n+\t_mulsi3 \\\n+\t_muldi3 \\\n+\t_udivmodhi4 \\\n+\t_divmodhi4 \\\n+\t_udivmodsi4 \\\n+\t_divmodsi4 \\\n+\t_udivmoddi4 \\\n+\t_divmoddi4 \\\n+\t_cmpqi2 \\\n+\t_cmphi2 \\\n+\t_cmpsi2 \\\n+\t_cmpdi2 \\\n+\t_cmpdi2_dp \\\n+\t_fp_pop_args_ret \\\n+\t_leaf_fp_pop_args_ret \\\n+\t_fp_pop2_args_ret \\\n+\t_leaf_fp_pop2_args_ret \\\n+\t_movstrhi_countqi \\\n+\t_movstrhi_counthi \\\n+\tabort \\\n+\t_exit\n+\n+# libgcc...\n+LIBGCC1_TEST =\n+\n+# libgcc2.h thinks that nobody would have SI mode when\n+# MIN_UNITS_PER_WORD == 1, so lie to keep from major compiler errors.\n+\n+TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -DDF=SF -g -DMIN_UNITS_PER_WORD=2\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/ip2k/t-ip2k crt0.o\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#define FLOAT_ONLY' >> fp-bit.c\n+\techo '#define DF SF' >> fp-bit.c\n+\techo '#define DI SI' >> fp-bit.c\n+\techo '#define CMPtype QItype' >> fp-bit.c\n+\techo '#define SMALL_MACHINE' >> fp-bit.c\n+\techo 'typedef int QItype __attribute__ ((mode (QI)));' >> fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+\n+FPBIT = fp-bit.c\n+\n+# Our crt0 is written in assembler and we don't really support profiling.\n+\n+CRT0_S = $(srcdir)/config/ip2k/crt0.S\n+MCRT0_S = $(CRT0_S)\n+"}, {"sha": "c8048277fed56e11400103062b85dd67fcf15317", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "patch": "@@ -2444,9 +2444,9 @@ attribute is present.  Interrupts will be disabled inside function.\n \n @item naked\n @cindex function without a prologue/epilogue code\n-Use this attribute on the ARM or AVR ports to indicate that the specified\n-function do not need prologue/epilogue sequences generated by the\n-compiler.  It is up to the programmer to provide these sequences.\n+Use this attribute on the ARM, AVR and IP2K ports to indicate that the\n+specified function do not need prologue/epilogue sequences generated by\n+the compiler.  It is up to the programmer to provide these sequences.\n \n @item model (@var{model-name})\n @cindex function addressability on the M32R/D"}, {"sha": "7529362efd64d1c4556a40601c368e4d8b790515", "filename": "gcc/doc/install-old.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fdoc%2Finstall-old.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fdoc%2Finstall-old.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall-old.texi?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file install.texi.\n \n@@ -107,7 +107,7 @@ Here are the possible CPU types:\n @quotation\n @c gmicro, fx80, spur and tahoe omitted since they don't work.\n 1750a, a29k, alpha, arm, avr, c@var{n}, clipper, dsp16xx, elxsi, fr30, h8300,\n-hppa1.0, hppa1.1, i370, i386, i486, i586, i686, i786, i860, i960, m32r,\n+hppa1.0, hppa1.1, i370, i386, i486, i586, i686, i786, i860, i960, ip2k, m32r,\n m68000, m68k, m6811, m6812, m88k, mcore, mips, mipsel, mips64, mips64el,\n mn10200, mn10300, ns32k, pdp11, powerpc, powerpcle, romp, rs6000, sh, sparc,\n sparclite, sparc64, v850, vax, we32k."}, {"sha": "526d212ec6ec40a10fe8aee9995399f88de73c62", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "patch": "@@ -1543,6 +1543,8 @@ GNU Compiler Collection on your machine.\n @item\n @uref{#*-ibm-aix*,,*-ibm-aix*}\n @item\n+@uref{#ip2k-*-elf,,ip2k-*-elf}\n+@item\n @uref{#m32r-*-elf,,m32r-*-elf}\n @item\n @uref{#m68000-hp-bsd,,m68000-hp-bsd}\n@@ -2379,6 +2381,17 @@ both Power or PowerPC processors.\n A default can be specified with the @option{-mcpu=@var{cpu_type}}\n switch and using the configure option @option{--with-cpu-@var{cpu_type}}.\n \n+@html\n+</p>\n+<hr>\n+@end html\n+@heading @anchor{ip2k-*-elf}ip2k-*-elf\n+Ubicom IP2022 micro controller.\n+This configuration is intended for embedded systems.\n+There are no standard Unix configurations.\n+\n+Use @samp{configure --target=ip2k-elf --enable-languages=c} to configure GCC@.\n+\n @html\n </p>\n <hr>"}, {"sha": "d8e68faf3dc7cc1478e98e3c9e5a548a25f84833", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3223ea2938e785094c2c8c87cdb8d86fb596c6d/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e3223ea2938e785094c2c8c87cdb8d86fb596c6d", "patch": "@@ -1808,6 +1808,76 @@ Memory reference in external OSF/rose PIC format\n (@samp{m} is preferable for @code{asm} statements)\n @end table\n \n+@item IP2K---@file{ip2k.h}\n+@table @code\n+@item a\n+@samp{DP} or @samp{IP} registers (general address)\n+\n+@item f\n+@samp{IP} register\n+\n+@item j\n+@samp{IPL} register\n+\n+@item k\n+@samp{IPH} register\n+\n+@item b\n+@samp{DP} register\n+\n+@item y\n+@samp{DPH} register\n+\n+@item z\n+@samp{DPL} register\n+\n+@item q\n+@samp{SP} register\n+\n+@item c\n+@samp{DP} or @samp{SP} registers (offsettable address)\n+\n+@item d\n+Non-pointer registers (not @samp{SP}, @samp{DP}, @samp{IP})\n+\n+@item u\n+Non-SP registers (everything except @samp{SP})\n+\n+@item R\n+Indirect thru @samp{IP} - Avoid this except for @code{QImode}, since we\n+can't access extra bytes\n+\n+@item S\n+Indirect thru @samp{SP} or @samp{DP} with short displacement (0..127)\n+\n+@item T\n+Data-section immediate value\n+\n+@item I\n+Integers from @minus{}255 to @minus{}1\n+\n+@item J\n+Integers from 0 to 7---valid bit number in a register\n+\n+@item K\n+Integers from 0 to 127---valid displacement for addressing mode\n+\n+@item L\n+Integers from 1 to 127\n+\n+@item M\n+Integer @minus{}1\n+\n+@item N\n+Integer 1\n+\n+@item O\n+Zero\n+\n+@item P\n+Integers from 0 to 255\n+@end table\n+\n @item Motorola 680x0---@file{m68k.h}\n @table @code\n @item a"}]}