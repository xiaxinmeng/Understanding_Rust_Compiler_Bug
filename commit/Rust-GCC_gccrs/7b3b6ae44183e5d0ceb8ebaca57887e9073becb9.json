{"sha": "7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzYjZhZTQ0MTgzZTVkMGNlYjhlYmFjYTU3ODg3ZTkwNzNiZWNiOQ==", "commit": {"author": {"name": "Lawrence Crowl", "email": "crowl@google.com", "date": "2013-03-29T03:42:21Z"}, "committer": {"name": "Lawrence Crowl", "email": "crowl@gcc.gnu.org", "date": "2013-03-29T03:42:21Z"}, "message": "Add uniform debug dump function names.\n\n\nAdd some overloaded functions that provide uniform debug dump\nfunction names.  These names are:\n\n  debug: the general debug dumper\n  debug_verbose: for more details\n  debug_raw: for the gory details\n  debug_head: for the heads of declarations, e.g. function heads\n  debug_body: for the bodies of declarations, e.g. function bodies\n\nNot all types have the last four versions.\n\nThe debug functions come in two flavors, those that take pointers\nto the type, and those that take references to the type.  The first\nhandles printing of '<nil>' for null pointers.  The second assumes\na valid reference, and prints the content.\n\n\nExample uses are as follows:\n\n  cp_token t, *p;\n  debug (t);\n  debug (p);\n\nFrom the debugger, use\n\n  call debug (t)\n\n\nThe functions sets implemented are:\n\ndebug (only)\n\n    basic_block_def, const bitmap_head_def, cp_binding_level,\n    cp_parser, cp_token, data_reference, die_struct, edge_def,\n    gimple_statement_d, ira_allocno, ira_allocno_copy, live_range,\n    lra_live_range, omega_pb_d, pt_solution, const rtx_def, sreal,\n    tree_live_info_d, _var_map,\n\n    vec<cp_token, va_gc>, vec<data_reference_p>, vec<ddr_p>,\n    vec<rtx>, vec<tree, va_gc>,\n\ndebug and debug_raw\n\n    simple_bitmap_def\n\ndebug and debug_verbose\n\n    expr_def, struct loop, vinsn_def\n\ndebug, debug_raw, debug_verbose, debug_head, debug_body\n\n    const tree_node\n\n\nThis patch is somewhat different from the original plan at\ngcc.gnu.org/wiki/cxx-conversion/debugging-dumps.  The reason\nis that gdb has an incomplete implementation of C++ call syntax;\nrequiring explicit specification of template arguments and explicit\nspecification of function arguments even when they have default\nvalues.  So, the original plan would have required typing\n\n  call dump <cp_token> (t, 0, 0, stderr)\n\nwhich is undesireable.  Instead instead of templates, we overload\nplain functions.  This adds a small burden of manually adding\nthe pointer version of dump for each type.  Instead of default\nfunction arguments, we simply assume the default values.  Most of\nthe underlying dump functions did not use the options and indent\nparameters anyway.  Several provide FILE* parameters, but we expect\ndebugging to use stderr anyway.  So, the explicit specification of\narguments was not as valuable as we thought initially.  Finally,\na change of name from dump to debug reflect the implicit output\nto stderr.\n\n\nIndex: gcc/ChangeLog\n\n2013-03-28  Lawrence Crowl  <crowl@google.com>\n\n\t* Makefile.in: Add several missing include dependences.\n\t(DUMPFILE_H): New.\n\t(test-dump.o): New.  This object is not added to any executable,\n\tbut is present for ad-hoc testing.\n\t* bitmap.c\n\t(debug (const bitmap_head_def &)): New.\n\t(debug (const bitmap_head_def *)): New.\n\t* bitmap.h\n\t(extern debug (const bitmap_head_def &)): New.\n\t(extern debug (const bitmap_head_def *)): New.\n\t* cfg.c\n\t(debug (edge_def &)): New.\n\t(debug (edge_def *)): New.\n\t* cfghooks.c\n\t(debug (basic_block_def &)): New.\n\t(debug (basic_block_def *)): New.\n\t* dumpfile.h\n\t(dump_node (const_tree, int, FILE *)): Correct source file.\n\t* dwarf2out.c\n\t(debug (die_struct &)): New.\n\t(debug (die_struct *)): New.\n\t* dwarf2out.h\n\t(extern debug (die_struct &)): New.\n\t(extern debug (die_struct *)): New.\n\t* gimple-pretty-print.c\n\t(debug (gimple_statement_d &)): New.\n\t(debug (gimple_statement_d *)): New.\n\t* gimple-pretty-print.h\n\t(extern debug (gimple_statement_d &)): New.\n\t(extern debug (gimple_statement_d *)): New.\n\t* ira-build.c\n\t(debug (ira_allocno_copy &)): New.\n\t(debug (ira_allocno_copy *)): New.\n\t(debug (ira_allocno &)): New.\n\t(debug (ira_allocno *)): New.\n\t* ira-int.h\n\t(extern debug (ira_allocno_copy &)): New.\n\t(extern debug (ira_allocno_copy *)): New.\n\t(extern debug (ira_allocno &)): New.\n\t(extern debug (ira_allocno *)): New.\n\t* ira-lives.c\n\t(debug (live_range &)): New.\n\t(debug (live_range *)): New.\n\t* lra-int.h\n\t(debug (lra_live_range &)): New.\n\t(debug (lra_live_range *)): New.\n\t* lra-lives.c\n\t(debug (lra_live_range &)): New.\n\t(debug (lra_live_range *)): New.\n\t* omega.c\n\t(debug (omega_pb_d &)): New.\n\t(debug (omega_pb_d *)): New.\n\t* omega.h\n\t(extern debug (omega_pb_d &)): New.\n\t(extern debug (omega_pb_d *)): New.\n\t* print-rtl.c\n\t(debug (const rtx_def &)): New.\n\t(debug (const rtx_def *)): New.\n\t* print-tree.c\n\t(debug_tree (tree): Move within file.\n\t(debug_raw (const tree_node &)): New.\n\t(debug_raw (const tree_node *)): New.\n\t(dump_tree_via_hooks (const tree_node *, int)): New.\n\t(debug (const tree_node &)): New.\n\t(debug (const tree_node *)): New.\n\t(debug_verbose (const tree_node &)): New.\n\t(debug_verbose (const tree_node *)): New.\n\t(debug_head (const tree_node &)): New.\n\t(debug_head (const tree_node *)): New.\n\t(debug_body (const tree_node &)): New.\n\t(debug_body (const tree_node *)): New.\n\t(debug_vec_tree (tree): Move and reimplement in terms of dump.\n\t(debug (vec<tree, va_gc> &)): New.\n\t(debug (vec<tree, va_gc> *)): New.\n\t* rtl.h\n\t(extern debug (const rtx_def &)): New.\n\t(extern debug (const rtx_def *)): New.\n\t* sbitmap.c\n\t(debug_raw (simple_bitmap_def &)): New.\n\t(debug_raw (simple_bitmap_def *)): New.\n\t(debug (simple_bitmap_def &)): New.\n\t(debug (simple_bitmap_def *)): New.\n\t* sbitmap.h\n\t(extern debug (simple_bitmap_def &)): New.\n\t(extern debug (simple_bitmap_def *)): New.\n\t(extern debug_raw (simple_bitmap_def &)): New.\n\t(extern debug_raw (simple_bitmap_def *)): New.\n\t* sel-sched-dump.c\n\t(debug (vinsn_def &)): New.\n\t(debug (vinsn_def *)): New.\n\t(debug_verbose (vinsn_def &)): New.\n\t(debug_verbose (vinsn_def *)): New.\n\t(debug (expr_def &)): New.\n\t(debug (expr_def *)): New.\n\t(debug_verbose (expr_def &)): New.\n\t(debug_verbose (expr_def *)): New.\n\t(debug (vec<rtx> &)): New.\n\t(debug (vec<rtx> *)): New.\n\t* sel-sched-dump.h\n\t(extern debug (vinsn_def &)): New.\n\t(extern debug (vinsn_def *)): New.\n\t(extern debug_verbose (vinsn_def &)): New.\n\t(extern debug_verbose (vinsn_def *)): New.\n\t(extern debug (expr_def &)): New.\n\t(extern debug (expr_def *)): New.\n\t(extern debug_verbose (expr_def &)): New.\n\t(extern debug_verbose (expr_def *)): New.\n\t(extern debug (vec<rtx> &)): New.\n\t(extern debug (vec<rtx> *)): New.\n\t* sel-sched-ir.h\n\t(_list_iter_cond_expr): Make inline instead of static.\n\t* sreal.c\n\t(debug (sreal &)): New.\n\t(debug (sreal *)): New.\n\t* sreal.h\n\t(extern debug (sreal &)): New.\n\t(extern debug (sreal *)): New.\n\t* tree.h\n\t(extern debug_raw (const tree_node &)): New.\n\t(extern debug_raw (const tree_node *)): New.\n\t(extern debug (const tree_node &)): New.\n\t(extern debug (const tree_node *)): New.\n\t(extern debug_verbose (const tree_node &)): New.\n\t(extern debug_verbose (const tree_node *)): New.\n\t(extern debug_head (const tree_node &)): New.\n\t(extern debug_head (const tree_node *)): New.\n\t(extern debug_body (const tree_node &)): New.\n\t(extern debug_body (const tree_node *)): New.\n\t(extern debug (vec<tree, va_gc> &)): New.\n\t(extern debug (vec<tree, va_gc> *)): New.\n\t* tree-cfg.c\n\t(debug (struct loop &)): New.\n\t(debug (struct loop *)): New.\n\t(debug_verbose (struct loop &)): New.\n\t(debug_verbose (struct loop *)): New.\n\t* tree-dump.c: Add header dependence.\n\t* tree-flow.h\n\t(extern debug (struct loop &)): New.\n\t(extern debug (struct loop *)): New.\n\t(extern debug_verbose (struct loop &)): New.\n\t(extern debug_verbose (struct loop *)): New.\n\t* tree-data-ref.c\n\t(debug (data_reference &)): New.\n\t(debug (data_reference *)): New.\n\t(debug (vec<data_reference_p> &)): New.\n\t(debug (vec<data_reference_p> *)): New.\n\t(debug (vec<ddr_p> &)): New.\n\t(debug (vec<ddr_p> *)): New.\n\t* tree-data-ref.h\n\t(extern debug (data_reference &)): New.\n\t(extern debug (data_reference *)): New.\n\t(extern debug (vec<data_reference_p> &)): New.\n\t(extern debug (vec<data_reference_p> *)): New.\n\t(extern debug (vec<ddr_p> &)): New.\n\t(extern debug (vec<ddr_p> *)): New.\n\t* tree-ssa-alias.c\n\t(debug (pt_solution &)): New.\n\t(debug (pt_solution *)): New.\n\t* tree-ssa-alias.h\n\t(extern debug (pt_solution &)): New.\n\t(extern debug (pt_solution *)): New.\n\t* tree-ssa-alias.c\n\t(debug (_var_map &)): New.\n\t(debug (_var_map *)): New.\n\t(debug (tree_live_info_d &)): New.\n\t(debug (tree_live_info_d *)): New.\n\t* tree-ssa-alias.h\n\t(extern debug (_var_map &)): New.\n\t(extern debug (_var_map *)): New.\n\t(extern debug (tree_live_info_d &)): New.\n\t(extern debug (tree_live_info_d *)): New.\n\nIndex: gcc/cp/ChangeLog\n\n2013-03-28  Lawrence Crowl  <crowl@google.com>\n\n\t* Make-lang.in\n\t(CXX_PARSER_H): Add header dependence.\n\t* cp-tree.h\n\t(extern debug (cp_binding_level &)): New.\n\t(extern debug (cp_binding_level *)): New.\n\t* name-lookup.h\n\t(debug (cp_binding_level &)): New.\n\t(debug (cp_binding_level *)): New.\n\t* parser.c\n\t(debug (cp_parser &)): New.\n\t(debug (cp_parser *)): New.\n\t(debug (cp_token &)): New.\n\t(debug (cp_token *)): New.\n\t(debug (vec<cp_token, va_gc> &)): New.\n\t(debug (vec<cp_token, va_gc> *)): New.\n\t* parser.c: Add header dependence.\n\t(extern debug (cp_parser &)): New.\n\t(extern debug (cp_parser *)): New.\n\t(extern debug (cp_token &)): New.\n\t(extern debug (cp_token *)): New.\n\t(extern debug (vec<cp_token, va_gc> &)): New.\n\t(extern debug (vec<cp_token, va_gc> *)): New.\n\nFrom-SVN: r197224", "tree": {"sha": "de528ea277ef392f070fe1bc36b914944d19a24d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de528ea277ef392f070fe1bc36b914944d19a24d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/comments", "author": null, "committer": null, "parents": [{"sha": "0ffa6c37e428bbeea2cd929cbb72f9762eb8aef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ffa6c37e428bbeea2cd929cbb72f9762eb8aef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ffa6c37e428bbeea2cd929cbb72f9762eb8aef0"}], "stats": {"total": 1181, "additions": 1063, "deletions": 118}, "files": [{"sha": "4bbae632d8e6253efbb89677d7fb0d7db46e9f7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -1,3 +1,177 @@\n+2013-03-28  Lawrence Crowl  <crowl@google.com>\n+\n+\t* Makefile.in: Add several missing include dependences.\n+\t(DUMPFILE_H): New.\n+\t(test-dump.o): New.  This object is not added to any executable,\n+\tbut is present for ad-hoc testing.\n+\t* bitmap.c\n+\t(debug (const bitmap_head_def &)): New.\n+\t(debug (const bitmap_head_def *)): New.\n+\t* bitmap.h\n+\t(extern debug (const bitmap_head_def &)): New.\n+\t(extern debug (const bitmap_head_def *)): New.\n+\t* cfg.c\n+\t(debug (edge_def &)): New.\n+\t(debug (edge_def *)): New.\n+\t* cfghooks.c\n+\t(debug (basic_block_def &)): New.\n+\t(debug (basic_block_def *)): New.\n+\t* dumpfile.h\n+\t(dump_node (const_tree, int, FILE *)): Correct source file.\n+\t* dwarf2out.c\n+\t(debug (die_struct &)): New.\n+\t(debug (die_struct *)): New.\n+\t* dwarf2out.h\n+\t(extern debug (die_struct &)): New.\n+\t(extern debug (die_struct *)): New.\n+\t* gimple-pretty-print.c\n+\t(debug (gimple_statement_d &)): New.\n+\t(debug (gimple_statement_d *)): New.\n+\t* gimple-pretty-print.h\n+\t(extern debug (gimple_statement_d &)): New.\n+\t(extern debug (gimple_statement_d *)): New.\n+\t* ira-build.c\n+\t(debug (ira_allocno_copy &)): New.\n+\t(debug (ira_allocno_copy *)): New.\n+\t(debug (ira_allocno &)): New.\n+\t(debug (ira_allocno *)): New.\n+\t* ira-int.h\n+\t(extern debug (ira_allocno_copy &)): New.\n+\t(extern debug (ira_allocno_copy *)): New.\n+\t(extern debug (ira_allocno &)): New.\n+\t(extern debug (ira_allocno *)): New.\n+\t* ira-lives.c\n+\t(debug (live_range &)): New.\n+\t(debug (live_range *)): New.\n+\t* lra-int.h\n+\t(debug (lra_live_range &)): New.\n+\t(debug (lra_live_range *)): New.\n+\t* lra-lives.c\n+\t(debug (lra_live_range &)): New.\n+\t(debug (lra_live_range *)): New.\n+\t* omega.c\n+\t(debug (omega_pb_d &)): New.\n+\t(debug (omega_pb_d *)): New.\n+\t* omega.h\n+\t(extern debug (omega_pb_d &)): New.\n+\t(extern debug (omega_pb_d *)): New.\n+\t* print-rtl.c\n+\t(debug (const rtx_def &)): New.\n+\t(debug (const rtx_def *)): New.\n+\t* print-tree.c\n+\t(debug_tree (tree): Move within file.\n+\t(debug_raw (const tree_node &)): New.\n+\t(debug_raw (const tree_node *)): New.\n+\t(dump_tree_via_hooks (const tree_node *, int)): New.\n+\t(debug (const tree_node &)): New.\n+\t(debug (const tree_node *)): New.\n+\t(debug_verbose (const tree_node &)): New.\n+\t(debug_verbose (const tree_node *)): New.\n+\t(debug_head (const tree_node &)): New.\n+\t(debug_head (const tree_node *)): New.\n+\t(debug_body (const tree_node &)): New.\n+\t(debug_body (const tree_node *)): New.\n+\t(debug_vec_tree (tree): Move and reimplement in terms of dump.\n+\t(debug (vec<tree, va_gc> &)): New.\n+\t(debug (vec<tree, va_gc> *)): New.\n+\t* rtl.h\n+\t(extern debug (const rtx_def &)): New.\n+\t(extern debug (const rtx_def *)): New.\n+\t* sbitmap.c\n+\t(debug_raw (simple_bitmap_def &)): New.\n+\t(debug_raw (simple_bitmap_def *)): New.\n+\t(debug (simple_bitmap_def &)): New.\n+\t(debug (simple_bitmap_def *)): New.\n+\t* sbitmap.h\n+\t(extern debug (simple_bitmap_def &)): New.\n+\t(extern debug (simple_bitmap_def *)): New.\n+\t(extern debug_raw (simple_bitmap_def &)): New.\n+\t(extern debug_raw (simple_bitmap_def *)): New.\n+\t* sel-sched-dump.c\n+\t(debug (vinsn_def &)): New.\n+\t(debug (vinsn_def *)): New.\n+\t(debug_verbose (vinsn_def &)): New.\n+\t(debug_verbose (vinsn_def *)): New.\n+\t(debug (expr_def &)): New.\n+\t(debug (expr_def *)): New.\n+\t(debug_verbose (expr_def &)): New.\n+\t(debug_verbose (expr_def *)): New.\n+\t(debug (vec<rtx> &)): New.\n+\t(debug (vec<rtx> *)): New.\n+\t* sel-sched-dump.h\n+\t(extern debug (vinsn_def &)): New.\n+\t(extern debug (vinsn_def *)): New.\n+\t(extern debug_verbose (vinsn_def &)): New.\n+\t(extern debug_verbose (vinsn_def *)): New.\n+\t(extern debug (expr_def &)): New.\n+\t(extern debug (expr_def *)): New.\n+\t(extern debug_verbose (expr_def &)): New.\n+\t(extern debug_verbose (expr_def *)): New.\n+\t(extern debug (vec<rtx> &)): New.\n+\t(extern debug (vec<rtx> *)): New.\n+\t* sel-sched-ir.h\n+\t(_list_iter_cond_expr): Make inline instead of static.\n+\t* sreal.c\n+\t(debug (sreal &)): New.\n+\t(debug (sreal *)): New.\n+\t* sreal.h\n+\t(extern debug (sreal &)): New.\n+\t(extern debug (sreal *)): New.\n+\t* tree.h\n+\t(extern debug_raw (const tree_node &)): New.\n+\t(extern debug_raw (const tree_node *)): New.\n+\t(extern debug (const tree_node &)): New.\n+\t(extern debug (const tree_node *)): New.\n+\t(extern debug_verbose (const tree_node &)): New.\n+\t(extern debug_verbose (const tree_node *)): New.\n+\t(extern debug_head (const tree_node &)): New.\n+\t(extern debug_head (const tree_node *)): New.\n+\t(extern debug_body (const tree_node &)): New.\n+\t(extern debug_body (const tree_node *)): New.\n+\t(extern debug (vec<tree, va_gc> &)): New.\n+\t(extern debug (vec<tree, va_gc> *)): New.\n+\t* tree-cfg.c\n+\t(debug (struct loop &)): New.\n+\t(debug (struct loop *)): New.\n+\t(debug_verbose (struct loop &)): New.\n+\t(debug_verbose (struct loop *)): New.\n+\t* tree-dump.c: Add header dependence.\n+\t* tree-flow.h\n+\t(extern debug (struct loop &)): New.\n+\t(extern debug (struct loop *)): New.\n+\t(extern debug_verbose (struct loop &)): New.\n+\t(extern debug_verbose (struct loop *)): New.\n+\t* tree-data-ref.c\n+\t(debug (data_reference &)): New.\n+\t(debug (data_reference *)): New.\n+\t(debug (vec<data_reference_p> &)): New.\n+\t(debug (vec<data_reference_p> *)): New.\n+\t(debug (vec<ddr_p> &)): New.\n+\t(debug (vec<ddr_p> *)): New.\n+\t* tree-data-ref.h\n+\t(extern debug (data_reference &)): New.\n+\t(extern debug (data_reference *)): New.\n+\t(extern debug (vec<data_reference_p> &)): New.\n+\t(extern debug (vec<data_reference_p> *)): New.\n+\t(extern debug (vec<ddr_p> &)): New.\n+\t(extern debug (vec<ddr_p> *)): New.\n+\t* tree-ssa-alias.c\n+\t(debug (pt_solution &)): New.\n+\t(debug (pt_solution *)): New.\n+\t* tree-ssa-alias.h\n+\t(extern debug (pt_solution &)): New.\n+\t(extern debug (pt_solution *)): New.\n+\t* tree-ssa-alias.c\n+\t(debug (_var_map &)): New.\n+\t(debug (_var_map *)): New.\n+\t(debug (tree_live_info_d &)): New.\n+\t(debug (tree_live_info_d *)): New.\n+\t* tree-ssa-alias.h\n+\t(extern debug (_var_map &)): New.\n+\t(extern debug (_var_map *)): New.\n+\t(extern debug (tree_live_info_d &)): New.\n+\t(extern debug (tree_live_info_d *)): New.\n+\n 2013-03-28  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-cgraph.c (merge_profile_summaries): Fix overflows."}, {"sha": "44533772722b51075432c7223332346663dfe3a1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 109, "deletions": 84, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -834,6 +834,7 @@ REVISION_s  := \"\\\"\\\"\"\n endif\n \n # Shorthand variables for dependency lists.\n+DUMPFILE_H = $(srcdir)/../libcpp/include/line-map.h dumpfile.h\n VEC_H = vec.h statistics.h $(GGC_H)\n HASH_TABLE_H = $(HASHTAB_H) hash-table.h\n EXCEPT_H = except.h $(HASHTAB_H)\n@@ -931,8 +932,8 @@ MKDEPS_H = $(srcdir)/../libcpp/include/mkdeps.h\n SYMTAB_H = $(srcdir)/../libcpp/include/symtab.h $(OBSTACK_H)\n CPP_ID_DATA_H = $(CPPLIB_H) $(srcdir)/../libcpp/include/cpp-id-data.h\n CPP_INTERNAL_H = $(srcdir)/../libcpp/internal.h $(CPP_ID_DATA_H)\n-TREE_DUMP_H = tree-dump.h $(SPLAY_TREE_H) dumpfile.h\n-TREE_PASS_H = tree-pass.h $(TIMEVAR_H) dumpfile.h\n+TREE_DUMP_H = tree-dump.h $(SPLAY_TREE_H) $(DUMPFILE_H)\n+TREE_PASS_H = tree-pass.h $(TIMEVAR_H) $(DUMPFILE_H)\n TREE_FLOW_H = tree-flow.h tree-flow-inline.h tree-ssa-operands.h \\\n \t\t$(BITMAP_H) sbitmap.h $(BASIC_BLOCK_H) $(GIMPLE_H) \\\n \t\t$(HASHTAB_H) $(CGRAPH_H) $(IPA_REFERENCE_H) \\\n@@ -953,7 +954,8 @@ TREE_DATA_REF_H = tree-data-ref.h $(OMEGA_H) graphds.h $(SCEV_H)\n TREE_INLINE_H = tree-inline.h\n REAL_H = real.h $(MACHMODE_H)\n IRA_INT_H = ira.h ira-int.h $(CFGLOOP_H) alloc-pool.h\n-LRA_INT_H = lra.h $(BITMAP_H) $(RECOG_H) $(INSN_ATTR_H) insn-codes.h lra-int.h\n+LRA_INT_H = lra.h $(BITMAP_H) $(RECOG_H) $(INSN_ATTR_H) insn-codes.h \\\n+   insn-config.h $(REGS_H) lra-int.h\n DBGCNT_H = dbgcnt.h dbgcnt.def\n LTO_STREAMER_H = lto-streamer.h $(LINKER_PLUGIN_API_H) $(TARGET_H) \\\n \t\t$(CGRAPH_H) $(VEC_H) $(TREE_H) $(GIMPLE_H) \\\n@@ -1851,7 +1853,7 @@ gcc.srcextra: gengtype-lex.c\n \n graph.o: graph.c graph.h $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n     $(DIAGNOSTIC_CORE_H) sbitmap.h $(BASIC_BLOCK_H) $(CFGLOOP_H) \\\n-    $(PRETTY_PRINT_H) dumpfile.h\n+    $(PRETTY_PRINT_H) $(DUMPFILE_H)\n \n sbitmap.o: sbitmap.c sbitmap.h $(CONFIG_H) $(SYSTEM_H) coretypes.h\n sparseset.o: sparseset.c $(SYSTEM_H) sparseset.h $(CONFIG_H)\n@@ -1956,7 +1958,7 @@ c-family/c-gimplify.o : c-family/c-gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H)\n \t$(C_COMMON_H) $(DIAGNOSTIC_CORE_H) $(GIMPLE_H) \\\n \t$(FLAGS_H) langhooks.h $(LANGHOOKS_DEF_H) \\\n \t$(TM_H) coretypes.h $(C_PRETTY_PRINT_H) $(CGRAPH_H) \\\n-\tdumpfile.h $(TREE_INLINE_H)\n+\t$(DUMPFILE_H) $(TREE_INLINE_H)\n \n c-family/c-lex.o : c-family/c-lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(TREE_H) $(FIXED_VALUE_H) debug.h $(C_COMMON_H) $(SPLAY_TREE_H) \\\n@@ -2000,7 +2002,7 @@ c-family/c-semantics.o : c-family/c-semantics.c $(CONFIG_H) $(SYSTEM_H) \\\n \n c-family/c-ada-spec.o : c-family/c-ada-spec.c c-family/c-ada-spec.h \\\n \t$(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(CPP_ID_DATA_H) $(TM_H) \\\n-\tcoretypes.h tree-iterator.h dumpfile.h\n+\tcoretypes.h tree-iterator.h $(DUMPFILE_H)\n \n c-family/stub-objc.o : c-family/stub-objc.c $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TREE_H) $(C_COMMON_H) c-family/c-objc.h\n@@ -2202,6 +2204,11 @@ langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TIMEVAR_\n    $(TREE_H) toplev.h $(DIAGNOSTIC_CORE_H) $(TREE_INLINE_H) $(RTL_H) insn-config.h \\\n    langhooks.h $(TARGET_H) $(LANGHOOKS_DEF_H) $(FLAGS_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n    intl.h $(GIMPLE_H) $(CGRAPH_H) output.h tree-diagnostic.h\n+test-dump.o : test-dump.c $(CONFIG_H) $(SYSTEM_H) $(CORETYPES_H) \\\n+   $(BITMAP_H) sbitmap.h sreal.h $(TREE_H) $(CXX_PARSER_H) $(DWARF2OUT_H) \\\n+   $(GIMPLE_PRETTY_PRINT_H) $(BASIC_BLOCK_H) insn-config.h $(LRA_INT.H) \\\n+   $(SEL_SCHED_DUMP_H) $(IRA_INT_H) $(TREE_DATA_REF_H) $(TREE_FLOW_H) \\\n+   $(TREE_SSA_LIVE_H) tree-ssa-alias.h $(OMEGA_H) $(RTL_H)\n tree.o: tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    all-tree.def $(FLAGS_H) $(FUNCTION_H) $(PARAMS_H) \\\n    toplev.h $(DIAGNOSTIC_CORE_H) $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) \\\n@@ -2211,17 +2218,17 @@ tree.o: tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(EXCEPT_H) debug.h intl.h tree-diagnostic.h $(TREE_PRETTY_PRINT_H) \\\n    $(COMMON_TARGET_H)\n tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) $(TM_H) $(TREE_H) \\\n-   langhooks.h $(TREE_DUMP_H) tree-iterator.h\n+   langhooks.h $(TREE_DUMP_H) tree-iterator.h $(TREE_PRETTY_PRINT_H)\n tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(FLAGS_H) $(PARAMS_H) $(INPUT_H) insn-config.h \\\n    $(HASHTAB_H) langhooks.h $(TREE_INLINE_H) $(CGRAPH_H) \\\n    intl.h $(FUNCTION_H) $(GIMPLE_H) \\\n    debug.h $(DIAGNOSTIC_H) $(EXCEPT_H) $(TREE_FLOW_H) tree-iterator.h tree-mudflap.h \\\n    $(IPA_PROP_H) value-prof.h $(TREE_PASS_H) $(TARGET_H) \\\n    $(TREE_PRETTY_PRINT_H)\n-print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TM_H) $(TREE_H) $(GGC_H) langhooks.h tree-iterator.h \\\n-   $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(GIMPLE_PRETTY_PRINT_H)\n+   $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(GIMPLE_PRETTY_PRINT_H) $(TREE_DUMP_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(PARAMS_H) $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) $(RTL_H) \\\n    $(GGC_H) $(TM_P_H) $(TARGET_H) langhooks.h $(REGS_H) gt-stor-layout.h \\\n@@ -2271,15 +2278,15 @@ tree-into-ssa.o : tree-into-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(BITMAP_H) $(CFGLOOP_H) $(FLAGS_H) $(HASHTAB_H) \\\n    $(GIMPLE_H) $(TREE_INLINE_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-ssa-ter.o : tree-ssa-ter.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h dumpfile.h \\\n+   $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TREE_SSA_LIVE_H) $(BITMAP_H) $(FLAGS_H) \\\n    $(GIMPLE_PRETTY_PRINT_H)\n tree-ssa-coalesce.o : tree-ssa-coalesce.c $(TREE_FLOW_H) $(CONFIG_H) \\\n-   $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h dumpfile.h \\\n+   $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TREE_SSA_LIVE_H) $(BITMAP_H) $(FLAGS_H) $(HASH_TABLE_H) \\\n    $(TREE_PRETTY_PRINT_H)\n tree-outof-ssa.o : tree-outof-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h dumpfile.h \\\n+   $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TREE_SSA_LIVE_H) $(BASIC_BLOCK_H) $(BITMAP_H) $(GGC_H) \\\n    $(EXPR_H) $(SSAEXPAND_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-ssa-dse.o : tree-ssa-dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -2316,7 +2323,7 @@ tree-ssa-copy.o : tree-ssa-copy.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(FLAGS_H) $(CFGLOOP_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-ssa-propagate.o : tree-ssa-propagate.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) \\\n-   $(DIAGNOSTIC_H) $(FUNCTION_H) $(TM_H) coretypes.h dumpfile.h \\\n+   $(DIAGNOSTIC_H) $(FUNCTION_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(BASIC_BLOCK_H) langhooks.h \\\n    tree-ssa-propagate.h $(VEC_H) value-prof.h gt-tree-ssa-propagate.h $(FLAGS_H) \\\n    $(GIMPLE_H) $(GIMPLE_PRETTY_PRINT_H)\n@@ -2332,14 +2339,14 @@ tree-ssa-uncprop.o : tree-ssa-uncprop.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(BASIC_BLOCK_H) domwalk.h $(TREE_PASS_H) $(FLAGS_H) \\\n    tree-ssa-propagate.h\n tree-ssa-threadedge.o : tree-ssa-threadedge.c $(TREE_FLOW_H) $(CONFIG_H) \\\n-   $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) $(TREE_H) $(FLAGS_H) $(TM_P_H) \\\n-   $(BASIC_BLOCK_H) $(CFGLOOP_H) \\\n+   $(SYSTEM_H) coretypes.h $(DUMPFILE_H) $(TM_H) $(TREE_H) $(FLAGS_H) \\\n+   $(TM_P_H) $(BASIC_BLOCK_H) $(CFGLOOP_H) \\\n    $(FUNCTION_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TREE_FLOW_H) \\\n    tree-ssa-propagate.h langhooks.h \\\n    $(PARAMS_H)\n tree-ssa-threadupdate.o : tree-ssa-threadupdate.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(HASH_TABLE_H) \\\n-   $(DIAGNOSTIC_H) $(FUNCTION_H) $(TM_H) coretypes.h dumpfile.h \\\n+   $(DIAGNOSTIC_H) $(FUNCTION_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(BASIC_BLOCK_H) $(FLAGS_H) $(CFGLOOP_H)\n tree-ssanames.o : tree-ssanames.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(TREE_FLOW_H) $(TREE_PASS_H)\n@@ -2349,7 +2356,7 @@ tree-phinodes.o : tree-phinodes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n domwalk.o : domwalk.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(BASIC_BLOCK_H) domwalk.h sbitmap.h\n tree-ssa-live.o : tree-ssa-live.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h dumpfile.h $(TIMEVAR_H) \\\n+   $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) $(TIMEVAR_H) \\\n    $(TREE_SSA_LIVE_H) $(BITMAP_H) debug.h $(FLAGS_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(GIMPLE_H)\n tree-ssa-copyrename.o : tree-ssa-copyrename.c $(TREE_FLOW_H) $(CONFIG_H) \\\n@@ -2365,7 +2372,7 @@ tree-ssa-pre.o : tree-ssa-pre.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(DBGCNT_H) tree-scalar-evolution.h $(GIMPLE_PRETTY_PRINT_H) domwalk.h\n tree-ssa-sccvn.o : tree-ssa-sccvn.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) \\\n-   $(TM_H) coretypes.h dumpfile.h $(FLAGS_H) $(CFGLOOP_H) \\\n+   $(TM_H) coretypes.h $(DUMPFILE_H) $(FLAGS_H) $(CFGLOOP_H) \\\n    alloc-pool.h $(BASIC_BLOCK_H) $(BITMAP_H) $(HASHTAB_H) $(GIMPLE_H) \\\n    $(TREE_INLINE_H) tree-ssa-propagate.h tree-ssa-sccvn.h \\\n    $(PARAMS_H) $(GIMPLE_PRETTY_PRINT_H) gimple-fold.h\n@@ -2420,8 +2427,8 @@ tree-dfa.o : tree-dfa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_PRETTY_PRINT_H)\n tree-ssa-operands.o : tree-ssa-operands.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) $(TREE_INLINE_H) \\\n-   $(FLAGS_H) $(FUNCTION_H) $(TM_H) $(TIMEVAR_H) \\\n-   coretypes.h dumpfile.h langhooks.h $(IPA_REFERENCE_H) $(GIMPLE_PRETTY_PRINT_H)\n+   $(FLAGS_H) $(FUNCTION_H) $(TM_H) $(TIMEVAR_H) coretypes.h $(DUMPFILE_H) \\\n+   langhooks.h $(IPA_REFERENCE_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-eh.o : tree-eh.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_H) $(FLAGS_H) $(FUNCTION_H) $(EXCEPT_H) langhooks.h \\\n    $(GGC_H) $(TREE_PASS_H) coretypes.h pointer-set.h \\\n@@ -2438,13 +2445,13 @@ tree-ssa-loop-unswitch.o : tree-ssa-loop-unswitch.c $(TREE_FLOW_H) \\\n     $(TREE_INLINE_H)\n tree-ssa-address.o : tree-ssa-address.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) \\\n-   $(DIAGNOSTIC_H) $(TM_H) coretypes.h dumpfile.h \\\n+   $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(FLAGS_H) $(TREE_INLINE_H) $(RECOG_H) insn-config.h \\\n    $(EXPR_H) gt-tree-ssa-address.h $(GGC_H) tree-affine.h $(TARGET_H) \\\n    $(TREE_PRETTY_PRINT_H) expmed.h\n tree-ssa-loop-niter.o : tree-ssa-loop-niter.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(PARAMS_H) \\\n-   $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h dumpfile.h \\\n+   $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(TREE_DATA_REF_H) \\\n    $(BASIC_BLOCK_H) $(GGC_H) intl.h $(GIMPLE_PRETTY_PRINT_H) $(TREE_PASS_H)\n tree-ssa-loop-ivcanon.o : tree-ssa-loop-ivcanon.c $(TREE_FLOW_H) $(CONFIG_H) \\\n@@ -2476,10 +2483,10 @@ tree-ssa-loop-ivopts.o : tree-ssa-loop-ivopts.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) tree-ssa-propagate.h\n tree-affine.o : tree-affine.c tree-affine.h $(CONFIG_H) pointer-set.h \\\n    $(SYSTEM_H) $(TREE_H) $(GIMPLE_H) \\\n-   coretypes.h dumpfile.h $(FLAGS_H) \\\n+   coretypes.h $(DUMPFILE_H) $(FLAGS_H) \\\n    $(TREE_PRETTY_PRINT_H)\n tree-ssa-loop-manip.o : tree-ssa-loop-manip.c $(TREE_FLOW_H) $(CONFIG_H) \\\n-   $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) $(TREE_H) \\\n+   $(SYSTEM_H) coretypes.h $(DUMPFILE_H) $(TM_H) $(TREE_H) \\\n    $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) \\\n    $(CFGLOOP_H) $(TREE_PASS_H) \\\n    $(SCEV_H) $(PARAMS_H) $(TREE_INLINE_H) langhooks.h\n@@ -2494,7 +2501,7 @@ tree-ssa-math-opts.o : tree-ssa-math-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\n    $(DIAGNOSTIC_H) $(RTL_H) $(EXPR_H) $(OPTABS_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-ssa-alias.o : tree-ssa-alias.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(GGC_H) $(TREE_INLINE_H) $(FLAGS_H) \\\n-   $(FUNCTION_H) $(TIMEVAR_H) convert.h $(TM_H) coretypes.h dumpfile.h \\\n+   $(FUNCTION_H) $(TIMEVAR_H) convert.h $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    langhooks.h \\\n    $(PARAMS_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) \\\n    $(GIMPLE_H) $(VEC_H) $(TARGET_H) \\\n@@ -2522,8 +2529,8 @@ gimplify.o : gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(GIMPLE_H) \\\n    $(SPLAY_TREE_H) $(VEC_H) tree-iterator.h $(TREE_PASS_H) $(TREE_PRETTY_PRINT_H)\n gimple-iterator.o : gimple-iterator.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TREE_H) $(GIMPLE_H) $(TREE_FLOW_H) value-prof.h\n-gimple-fold.o : gimple-fold.c $(TREE_FLOW_H) $(CONFIG_H) coretypes.h dumpfile.h \\\n-   $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(GGC_H) \\\n+gimple-fold.o : gimple-fold.c $(TREE_FLOW_H) $(CONFIG_H) coretypes.h \\\n+   $(DUMPFILE_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(GGC_H) \\\n    $(FUNCTION_H) $(TM_H) $(BASIC_BLOCK_H) langhooks.h \\\n    tree-ssa-propagate.h $(FLAGS_H) $(TARGET_H) gimple-fold.h\n gimple-low.o : gimple-low.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n@@ -2538,15 +2545,16 @@ omp-low.o : omp-low.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(CFGLOOP_H) tree-iterator.h gt-omp-low.h\n tree-browser.o : tree-browser.c tree-browser.def $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_H) $(TREE_PRETTY_PRINT_H)\n-omega.o : omega.c $(OMEGA_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+omega.o : omega.c $(OMEGA_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TREE_H) $(DIAGNOSTIC_CORE_H)\n-tree-chrec.o : tree-chrec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+tree-chrec.o : tree-chrec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TREE_PRETTY_PRINT_H) $(CFGLOOP_H) $(TREE_FLOW_H) $(SCEV_H) \\\n    $(PARAMS_H)\n tree-scalar-evolution.o : tree-scalar-evolution.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h dumpfile.h $(GIMPLE_PRETTY_PRINT_H) $(TREE_FLOW_H) $(CFGLOOP_H) $(SCEV_H) \\\n-   $(PARAMS_H) gt-tree-scalar-evolution.h\n-tree-data-ref.o : tree-data-ref.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+   coretypes.h $(DUMPFILE_H) $(GIMPLE_PRETTY_PRINT_H) $(TREE_FLOW_H) \\\n+   $(CFGLOOP_H) $(SCEV_H) $(PARAMS_H) gt-tree-scalar-evolution.h\n+tree-data-ref.o : tree-data-ref.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(DUMPFILE_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n    langhooks.h tree-affine.h $(PARAMS_H)\n sese.o : sese.c sese.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_PRETTY_PRINT_H) \\\n@@ -2556,7 +2564,7 @@ graphite.o : graphite.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DIAGNOSTIC_CORE_H)\n    $(DBGCNT_H) graphite-poly.h graphite-scop-detection.h \\\n    graphite-clast-to-gimple.h graphite-sese-to-poly.h\n graphite-blocking.o : graphite-blocking.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h dumpfile.h $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n+   coretypes.h $(DUMPFILE_H) $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n    sese.h graphite-poly.h\n graphite-clast-to-gimple.o : graphite-clast-to-gimple.c $(CONFIG_H) \\\n    $(SYSTEM_H) coretypes.h $(DIAGNOSTIC_CORE_H) $(TREE_FLOW_H) $(TREE_PASS_H) \\\n@@ -2566,10 +2574,10 @@ graphite-dependences.o : graphite-dependences.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_FLOW_H) $(TREE_PASS_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n    sese.h graphite-poly.h\n graphite-interchange.o : graphite-interchange.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h dumpfile.h $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n+   coretypes.h $(DUMPFILE_H) $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n    sese.h graphite-poly.h\n-graphite-poly.o : graphite-poly.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n-   $(DIAGNOSTIC_CORE_H) $(TREE_FLOW_H) $(GIMPLE_PRETTY_PRINT_H) \\\n+graphite-poly.o : graphite-poly.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(DUMPFILE_H) $(DIAGNOSTIC_CORE_H) $(TREE_FLOW_H) $(GIMPLE_PRETTY_PRINT_H) \\\n    $(CFGLOOP_H) $(TREE_DATA_REF_H) sese.h graphite-poly.h\n graphite-scop-detection.o : graphite-scop-detection.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) $(TREE_PASS_H) \\\n@@ -2579,40 +2587,40 @@ graphite-sese-to-poly.o : graphite-sese-to-poly.c $(CONFIG_H) \\\n    $(TREE_DATA_REF_H) domwalk.h sese.h graphite-poly.h \\\n    graphite-sese-to-poly.h\n graphite-optimize-isl.o : graphite-optimize-isl.c $(CONFIG_H) $(SYSTEM_H) \\\n-    coretypes.h dumpfile.h $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) $(SCEV_H) \\\n-    sese.h graphite-poly.h\n+    coretypes.h $(DUMPFILE_H) $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n+    $(SCEV_H) sese.h graphite-poly.h\n tree-vect-loop.o: tree-vect-loop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(GGC_H) $(TREE_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) dumpfile.h \\\n+   $(TM_H) $(GGC_H) $(TREE_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(DUMPFILE_H) \\\n    $(CFGLOOP_H) $(EXPR_H) $(RECOG_H) $(OPTABS_H) \\\n    $(DIAGNOSTIC_CORE_H) $(SCEV_H) $(TREE_VECTORIZER_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(TARGET_H) $(TREE_DATA_REF_H)\n tree-vect-loop-manip.o: tree-vect-loop-manip.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h dumpfile.h $(TM_H) $(GGC_H) $(TREE_H) $(BASIC_BLOCK_H) \\\n+   coretypes.h $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) $(CFGLOOP_H) $(DIAGNOSTIC_CORE_H) \\\n    $(SCEV_H) $(TREE_VECTORIZER_H) langhooks.h $(GIMPLE_PRETTY_PRINT_H)\n tree-vect-patterns.o: tree-vect-patterns.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h dumpfile.h \\\n+   coretypes.h $(DUMPFILE_H) \\\n    $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) $(CFGLOOP_H) $(EXPR_H) $(OPTABS_H) $(PARAMS_H) \\\n    $(TREE_DATA_REF_H) $(TREE_VECTORIZER_H) $(RECOG_H) $(DIAGNOSTIC_CORE_H) \\\n    $(GIMPLE_PRETTY_PRINT_H)\n tree-vect-slp.o: tree-vect-slp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   dumpfile.h $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) $(BASIC_BLOCK_H) \\\n+   $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) $(BASIC_BLOCK_H) \\\n    $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(CFGLOOP_H) \\\n    $(EXPR_H) $(RECOG_H) $(OPTABS_H) $(TREE_VECTORIZER_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(TREE_DATA_REF_H) langhooks.h\n tree-vect-stmts.o: tree-vect-stmts.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h dumpfile.h $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) \\\n+   coretypes.h $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) \\\n    $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(CFGLOOP_H) \\\n    $(EXPR_H) $(RECOG_H) $(OPTABS_H) $(TREE_VECTORIZER_H) \\\n    langhooks.h $(GIMPLE_PRETTY_PRINT_H)\n tree-vect-data-refs.o: tree-vect-data-refs.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h dumpfile.h $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) $(BASIC_BLOCK_H) \\\n-   $(TREE_FLOW_H) $(CFGLOOP_H) \\\n+   coretypes.h $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) \\\n+   $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(CFGLOOP_H) \\\n    $(EXPR_H) $(OPTABS_H) $(SCEV_H) $(TREE_VECTORIZER_H) \\\n    $(DIAGNOSTIC_CORE_H) $(TM_P_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-vectorizer.o: tree-vectorizer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   dumpfile.h $(TM_H) $(GGC_H) $(TREE_H) $(TREE_FLOW_H) \\\n+   $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(TREE_FLOW_H) \\\n    $(CFGLOOP_H) $(TREE_PASS_H) $(TREE_VECTORIZER_H) \\\n    $(TREE_PRETTY_PRINT_H)\n tree-loop-distribution.o: tree-loop-distribution.c $(CONFIG_H) $(SYSTEM_H) \\\n@@ -2633,7 +2641,7 @@ gimple.o : gimple.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(TREE_FLOW_H) value-prof.h $(FLAGS_H) $(DEMANGLE_H) \\\n    $(TARGET_H) $(ALIAS_H)\n gimple-pretty-print.o : gimple-pretty-print.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h dumpfile.h \\\n+   coretypes.h $(DUMPFILE_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) $(TREE_FLOW_H) \\\n    $(TM_H) $(GIMPLE_H) value-prof.h \\\n    $(TRANS_MEM_H) $(GIMPLE_PRETTY_PRINT_H)\n@@ -2648,9 +2656,10 @@ tree-nomudflap.o : $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TREE_INLINE_H) \\\n    $(GGC_H) gt-tree-mudflap.h $(TREE_PASS_H) $(DIAGNOSTIC_CORE_H)\n tree-pretty-print.o : tree-pretty-print.c $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) $(TREE_FLOW_H) \\\n-   $(TM_H) coretypes.h dumpfile.h tree-iterator.h $(SCEV_H) langhooks.h \\\n+   $(TM_H) coretypes.h $(DUMPFILE_H) tree-iterator.h $(SCEV_H) langhooks.h \\\n    value-prof.h output.h $(TREE_PRETTY_PRINT_H)\n-tree-diagnostic.o : tree-diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+tree-diagnostic.o : tree-diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(DUMPFILE_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) tree-diagnostic.h langhooks.h $(LANGHOOKS_DEF_H) \\\n    $(VEC_H) $(TREE_PRETTY_PRINT_H)\n fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -2661,7 +2670,7 @@ diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(DEMANGLE_H) $(INPUT_H) intl.h $(BACKTRACE_H) $(DIAGNOSTIC_H) \\\n    diagnostic.def\n opts.o : opts.c $(OPTS_H) $(OPTIONS_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h dumpfile.h $(TM_H) \\\n+   coretypes.h $(DUMPFILE_H) $(TM_H) \\\n    $(DIAGNOSTIC_H) insn-attr-common.h intl.h $(COMMON_TARGET_H) \\\n    $(FLAGS_H) $(PARAMS_H) opts-diagnostic.h\n opts-global.o : opts-global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -2731,8 +2740,8 @@ rtl-error.o: rtl-error.c $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_H) \\\n rtl.o : rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n   $(GGC_H) $(BCONFIG_H) insn-notes.def reg-notes.def $(DIAGNOSTIC_CORE_H)\n \n-print-rtl.o : print-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) \\\n-    $(RTL_H) $(TREE_H) hard-reg-set.h $(BASIC_BLOCK_H) $(FLAGS_H) \\\n+print-rtl.o : print-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n+    $(TM_H) $(RTL_H) $(TREE_H) hard-reg-set.h $(BASIC_BLOCK_H) $(FLAGS_H) \\\n     $(BCONFIG_H) $(DIAGNOSTIC_H) cselib.h $(TREE_PRETTY_PRINT_H) \\\n     $(DWARF2OUT_H)\n rtlanal.o : rtlanal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(DIAGNOSTIC_CORE_H) \\\n@@ -2755,7 +2764,8 @@ function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_\n    $(COMMON_TARGET_H)\n statistics.o : statistics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TREE_PASS_H) $(TREE_DUMP_H) $(HASHTAB_H) statistics.h $(FUNCTION_H)\n-stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) $(RTL_H) \\\n+stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) $(TM_H) \\\n+   $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) insn-config.h hard-reg-set.h $(EXPR_H) \\\n    $(LIBFUNCS_H) $(EXCEPT_H) $(RECOG_H) $(DIAGNOSTIC_CORE_H) \\\n    output.h $(GGC_H) $(TM_P_H) langhooks.h $(PREDICT_H) $(OPTABS_H) \\\n@@ -2814,7 +2824,7 @@ sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) debug.h \\\n    $(TREE_H) $(GGC_H) $(RTL_H) $(REGS_H) $(FLAGS_H) insn-config.h \\\n    output.h $(DIAGNOSTIC_CORE_H) $(TM_P_H) gsyms.h langhooks.h $(TARGET_H) sdbout.h \\\n    gt-sdbout.h reload.h\n-dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TM_H) $(TREE_H) version.h $(RTL_H) $(DWARF2_H) debug.h $(FLAGS_H) \\\n    insn-config.h output.h $(DIAGNOSTIC_H) hard-reg-set.h $(REGS_H) $(EXPR_H) \\\n    toplev.h $(DIAGNOSTIC_CORE_H) $(DWARF2OUT_H) reload.h \\\n@@ -2860,7 +2870,7 @@ simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n symtab.o : symtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    langhooks.h $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(GGC_H) $(TARGET_H) $(CGRAPH_H) \\\n    $(TIMEVAR_H) $(HASHTAB_H) gt-symtab.h\n-cgraph.o : cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+cgraph.o : cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TM_H) $(TREE_H) $(TIMEVAR_H) \\\n    langhooks.h toplev.h $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(GGC_H) $(TARGET_H) $(CGRAPH_H) \\\n    gt-cgraph.h intl.h $(BASIC_BLOCK_H) debug.h $(HASHTAB_H) \\\n@@ -2929,7 +2939,7 @@ ipa-inline-transform.o : ipa-inline-transform.c $(CONFIG_H) $(SYSTEM_H) coretype\n    $(HASHTAB_H) $(COVERAGE_H) $(GGC_H) $(TREE_FLOW_H) $(IPA_PROP_H) \\\n    $(TREE_PASS_H)\n ipa-utils.o : ipa-utils.c $(IPA_UTILS_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h dumpfile.h $(TM_H) $(TREE_H) $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n+   coretypes.h $(DUMPFILE_H) $(TM_H) $(TREE_H) $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n    langhooks.h pointer-set.h $(GGC_H) $(GIMPLE_H) $(SPLAY_TREE_H) \\\n    $(CGRAPH_H) $(FLAGS_H) $(DIAGNOSTIC_H)\n ipa-reference.o : ipa-reference.c $(CONFIG_H) $(SYSTEM_H) \\\n@@ -2944,12 +2954,14 @@ ipa-pure-const.o : ipa-pure-const.c $(CONFIG_H) $(SYSTEM_H) \\\n    $(GIMPLE_H) $(CGRAPH_H) $(FLAGS_H) $(TREE_PASS_H) \\\n    $(DIAGNOSTIC_H) $(CFGLOOP_H) $(SCEV_H) $(LTO_STREAMER_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(DATA_STREAMER_H) $(TREE_STREAMER_H)\n-coverage.o : coverage.c $(GCOV_IO_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+coverage.o : coverage.c $(GCOV_IO_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(DUMPFILE_H) \\\n    $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) \\\n    $(FUNCTION_H) $(BASIC_BLOCK_H) toplev.h $(DIAGNOSTIC_CORE_H) $(GGC_H) langhooks.h $(COVERAGE_H) \\\n    tree-iterator.h $(CGRAPH_H) gcov-io.c $(TM_P_H) \\\n    $(DIAGNOSTIC_CORE_H) intl.h gt-coverage.h $(TARGET_H) $(HASH_TABLE_H)\n-cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) $(RTL_H) \\\n+cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n+   $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(RECOG_H) \\\n    $(EMIT_RTL_H) $(DIAGNOSTIC_CORE_H) $(FUNCTION_H) \\\n    cselib.h gt-cselib.h $(GGC_H) $(TM_P_H) $(PARAMS_H) alloc-pool.h \\\n@@ -2963,7 +2975,7 @@ dce.o : dce.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) $(EXCEPT_H) $(DF_H) cselib.h \\\n    $(DBGCNT_H) dce.h $(VALTRACK_H) $(TREE_PASS_H) $(DBGCNT_H) $(TM_P_H) \\\n    $(EMIT_RTL_H)\n-dumpfile.o: dumpfile.c dumpfile.h $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+dumpfile.o: dumpfile.c $(DUMPFILE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DIAGNOSTIC_CORE_H) $(GIMPLE_PRETTY_PRINT_H) $(TREE_H)\n dse.o : dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(TM_P_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n@@ -3002,7 +3014,8 @@ store-motion.o : store-motion.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RT\n resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(REGS_H) $(FLAGS_H) output.h $(RESOURCE_H) $(DF_H) \\\n    $(FUNCTION_H) $(DIAGNOSTIC_CORE_H) $(INSN_ATTR_H) $(EXCEPT_H) $(PARAMS_H) $(TM_P_H)\n-lcm.o : lcm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) $(RTL_H) $(REGS_H) \\\n+lcm.o : lcm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) $(TM_H) \\\n+   $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h $(FLAGS_H) insn-config.h $(INSN_ATTR_H) $(RECOG_H) \\\n    $(BASIC_BLOCK_H) $(TM_P_H) $(FUNCTION_H) sbitmap.h\n mode-switching.o : mode-switching.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -3053,11 +3066,13 @@ df-core.o : df-core.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(RECOG_H) $(FUNCTION_H) $(REGS_H) alloc-pool.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) $(BITMAP_H) sbitmap.h \\\n    $(TM_P_H) $(FLAGS_H) output.h $(TREE_PASS_H) $(PARAMS_H)\n-df-problems.o : df-problems.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) \\\n+df-problems.o : df-problems.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(DUMPFILE_H) $(TM_H) \\\n    $(RTL_H) insn-config.h $(RECOG_H) $(FUNCTION_H) $(REGS_H) alloc-pool.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) $(BITMAP_H) sbitmap.h $(TIMEVAR_H) \\\n    $(TM_P_H) $(TARGET_H) $(FLAGS_H) $(EXCEPT_H) dce.h $(VALTRACK_H)\n-df-scan.o : df-scan.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) $(RTL_H) \\\n+df-scan.o : df-scan.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n+   $(TM_H) $(RTL_H) \\\n    insn-config.h $(RECOG_H) $(FUNCTION_H) $(REGS_H) alloc-pool.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) $(BITMAP_H) sbitmap.h \\\n    $(TM_P_H) $(FLAGS_H) $(TARGET_H) $(TARGET_DEF_H) $(TREE_H) \\\n@@ -3073,31 +3088,35 @@ var-tracking.o : var-tracking.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(REGS_H) $(EXPR_H) $(TREE_PASS_H) $(TREE_FLOW_H) \\\n    cselib.h $(TARGET_H) $(DIAGNOSTIC_CORE_H) $(PARAMS_H) $(DIAGNOSTIC_H) \\\n    pointer-set.h $(RECOG_H) $(TM_P_H) $(TREE_PRETTY_PRINT_H) $(ALIAS_H)\n-profile.o : profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) $(RTL_H) \\\n+profile.o : profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n+   $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(REGS_H) $(EXPR_H) $(FUNCTION_H) $(BASIC_BLOCK_H) \\\n    $(DIAGNOSTIC_CORE_H) $(COVERAGE_H) $(TREE_FLOW_H) value-prof.h \\\n    $(CFGLOOP_H) profile.h\n-mcf.o : mcf.c profile.h $(CONFIG_H) $(SYSTEM_H) $(TM_H) coretypes.h dumpfile.h \\\n-   $(BASIC_BLOCK_H) langhooks.h $(GCOV_IO_H) $(TREE_H) \n+mcf.o : mcf.c profile.h $(CONFIG_H) $(SYSTEM_H) $(TM_H) coretypes.h \\\n+   $(DUMPFILE_H) $(BASIC_BLOCK_H) langhooks.h $(GCOV_IO_H) $(TREE_H) \n tree-profile.o : tree-profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TARGET_H) $(TREE_H) $(FLAGS_H) $(FUNCTION_H) \\\n    $(BASIC_BLOCK_H) $(DIAGNOSTIC_CORE_H) $(COVERAGE_H) $(TREE_H) value-prof.h \\\n    $(TREE_PASS_H) $(TREE_FLOW_H) gt-tree-profile.h $(CGRAPH_H)\n-value-prof.o : value-prof.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) \\\n+value-prof.o : value-prof.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n+   $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h profile.h value-prof.h $(EXPR_H) $(FLAGS_H) \\\n    $(RECOG_H) insn-config.h $(OPTABS_H) $(REGS_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n    $(TREE_H) $(COVERAGE_H) $(RTL_H) $(GCOV_IO_H) $(TREE_FLOW_H) \\\n    tree-flow-inline.h $(TIMEVAR_H) $(DIAGNOSTIC_CORE_H) pointer-set.h \\\n    $(GIMPLE_PRETTY_PRINT_H) $(DATA_STREAMER_H)\n-loop-doloop.o : loop-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) \\\n+loop-doloop.o : loop-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(DUMPFILE_H) $(TM_H) \\\n    $(RTL_H) $(FLAGS_H) $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H) \\\n    $(DIAGNOSTIC_CORE_H) $(CFGLOOP_H) $(PARAMS_H) $(TARGET_H)\n alloc-pool.o : alloc-pool.c $(CONFIG_H) $(SYSTEM_H) alloc-pool.h $(HASHTAB_H)\n auto-inc-dec.o : auto-inc-dec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(TM_P_H) hard-reg-set.h $(BASIC_BLOCK_H) insn-config.h \\\n    $(REGS_H) $(FLAGS_H) $(FUNCTION_H) $(EXCEPT_H) $(DIAGNOSTIC_CORE_H) $(RECOG_H) \\\n    $(EXPR_H) $(TREE_PASS_H) $(DF_H) $(DBGCNT_H) $(TARGET_H)\n-cfg.o : cfg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(DIAGNOSTIC_CORE_H) \\\n+cfg.o : cfg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n+   $(DIAGNOSTIC_CORE_H) \\\n    $(GGC_H) $(OBSTACK_H) alloc-pool.h $(HASH_TABLE_H) $(CFGLOOP_H) $(TREE_H) \\\n    $(BASIC_BLOCK_H)\n cfghooks.o: cfghooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n@@ -3125,20 +3144,23 @@ cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(DIAGNOSTIC_CORE_H) insn-config.h cselib.h $(TARGET_H) $(TM_P_H) $(PARAMS_H) \\\n    $(REGS_H) $(EMIT_RTL_H) $(FUNCTION_H) $(TREE_PASS_H) $(CFGLOOP_H) $(EXPR_H) \\\n    $(DF_H) $(DBGCNT_H) dce.h\n-cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) coretypes.h dumpfile.h $(TM_H) \\\n+cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) coretypes.h \\\n+   $(DUMPFILE_H) $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(FLAGS_H) $(FUNCTION_H) \\\n    $(OBSTACK_H) toplev.h $(DIAGNOSTIC_CORE_H) $(TREE_FLOW_H) $(TREE_H) pointer-set.h \\\n    $(GGC_H)\n-cfgloopanal.o : cfgloopanal.c coretypes.h dumpfile.h $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n+cfgloopanal.o : cfgloopanal.c coretypes.h $(DUMPFILE_H) $(CONFIG_H) \\\n+   $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) $(TM_H) \\\n    $(OBSTACK_H) graphds.h $(PARAMS_H)\n graphds.o : graphds.c graphds.h $(CONFIG_H) $(SYSTEM_H) $(BITMAP_H) $(OBSTACK_H) \\\n    coretypes.h $(VEC_H)\n-loop-iv.o : loop-iv.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+loop-iv.o : loop-iv.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(RTL_H) $(BASIC_BLOCK_H) \\\n    hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) $(TM_H) $(OBSTACK_H) \\\n    intl.h $(DIAGNOSTIC_CORE_H) $(DF_H) $(HASHTAB_H)\n-loop-invariant.o : loop-invariant.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+loop-invariant.o : loop-invariant.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(DUMPFILE_H) \\\n    $(RTL_H) $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) $(RECOG_H) \\\n    $(TM_H) $(TM_P_H) $(FUNCTION_H) $(FLAGS_H) $(DF_H) $(TARGET_H) \\\n    $(OBSTACK_H) $(HASHTAB_H) $(EXCEPT_H) $(PARAMS_H) $(REGS_H) ira.h\n@@ -3149,10 +3171,11 @@ loop-init.o : loop-init.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) \\\n    coretypes.h $(TM_H) $(OBSTACK_H) $(TREE_PASS_H) $(FLAGS_H) \\\n    $(REGS_H) $(DF_H)\n-loop-unswitch.o : loop-unswitch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+loop-unswitch.o : loop-unswitch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(DUMPFILE_H) \\\n    $(RTL_H) $(TM_H) $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(PARAMS_H) \\\n    $(EXPR_H) $(TM_H) $(OBSTACK_H)\n-loop-unroll.o: loop-unroll.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+loop-unroll.o: loop-unroll.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(RTL_H) $(TM_H) $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(PARAMS_H) \\\n    $(EXPR_H) $(TM_H) $(HASHTAB_H) $(RECOG_H) \\\n    $(OBSTACK_H)\n@@ -3183,7 +3206,7 @@ reload.o : reload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_H) \\\n    $(FLAGS_H) $(EXPR_H) $(OPTABS_H) reload.h $(RECOG_H) \\\n    hard-reg-set.h insn-config.h $(REGS_H) $(FUNCTION_H) real.h \\\n    addresses.h $(TM_P_H) $(PARAMS_H) $(TARGET_H) $(DF_H) ira.h $(DIAGNOSTIC_CORE_H)\n-reload1.o : reload1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+reload1.o : reload1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TM_H) $(RTL_ERROR_H) \\\n    $(EXPR_H) $(OPTABS_H) reload.h $(REGS_H) hard-reg-set.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) $(FUNCTION_H)  $(TM_P_H) \\\n@@ -3201,8 +3224,8 @@ postreload-gcse.o : postreload-gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) $(DIAGNOSTIC_CORE_H) \\\n    $(TM_P_H) $(EXCEPT_H) $(TREE_H) $(TARGET_H) $(HASHTAB_H) intl.h $(OBSTACK_H) \\\n    $(PARAMS_H) $(TREE_PASS_H) $(DBGCNT_H)\n-caller-save.o : caller-save.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n-   $(TM_H) $(RTL_H) \\\n+caller-save.o : caller-save.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(DUMPFILE_H) $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(REGS_H) hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) $(FUNCTION_H) \\\n    addresses.h $(RECOG_H) reload.h $(EXPR_H) $(DIAGNOSTIC_CORE_H) $(TM_P_H) $(DF_H) \\\n    gt-caller-save.h $(GGC_H)\n@@ -3215,7 +3238,8 @@ reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(INSN_ATTR_H) $(EXCEPT_H) $(RECOG_H) $(FUNCTION_H) $(FLAGS_H) output.h \\\n    $(EXPR_H) $(DIAGNOSTIC_CORE_H) $(PARAMS_H) $(TM_P_H) $(OBSTACK_H) $(RESOURCE_H) \\\n    $(TARGET_H) $(TREE_PASS_H)\n-alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) $(RTL_H) \\\n+alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n+   $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) $(DIAGNOSTIC_CORE_H) \\\n    $(ALIAS_H) $(EMIT_RTL_H) $(GGC_H) $(FUNCTION_H) cselib.h $(TREE_H) $(TM_P_H) \\\n    langhooks.h $(TARGET_H) gt-alias.h $(TIMEVAR_H) $(CGRAPH_H) \\\n@@ -3315,8 +3339,8 @@ modulo-sched.o : modulo-sched.c $(DDG_H) $(CONFIG_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(SCHED_INT_H) $(CFGLOOP_H) $(EXPR_H) $(PARAMS_H) \\\n    $(GCOV_IO_H) hard-reg-set.h $(TM_H) $(TREE_PASS_H) \\\n    $(DF_H) $(DBGCNT_H)\n-haifa-sched.o : haifa-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n-   $(TM_H) $(RTL_H) \\\n+haifa-sched.o : haifa-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+   $(DUMPFILE_H) $(TM_H) $(RTL_H) \\\n    $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(FUNCTION_H) \\\n    $(INSN_ATTR_H) $(DIAGNOSTIC_CORE_H) $(RECOG_H) $(EXCEPT_H) $(TM_P_H) $(TARGET_H) \\\n    $(PARAMS_H) $(DBGCNT_H) $(CFGLOOP_H) ira.h $(EMIT_RTL_H) $(COMMON_TARGET_H) \\\n@@ -3334,8 +3358,8 @@ sched-ebb.o : sched-ebb.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(FUNCTION_H) $(INSN_ATTR_H) $(DIAGNOSTIC_CORE_H) $(RECOG_H) $(EXCEPT_H) $(TM_P_H) \\\n    $(PARAMS_H) $(TARGET_H)\n-sched-vis.o : sched-vis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) \\\n-   $(INSN_ATTR_H) $(RTL_H) $(TREE_H) $(BASIC_BLOCK_H) $(PRETTY_PRINT_H)\n+sched-vis.o : sched-vis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n+   $(TM_H) $(INSN_ATTR_H) $(RTL_H) $(TREE_H) $(BASIC_BLOCK_H) $(PRETTY_PRINT_H)\n sel-sched.o : sel-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_ERROR_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(FUNCTION_H) $(INSN_ATTR_H)  $(RECOG_H) $(EXCEPT_H) $(PARAMS_H) \\\n@@ -3411,7 +3435,7 @@ pointer-set.o: pointer-set.c pointer-set.h $(CONFIG_H) $(SYSTEM_H)\n hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(HOOKS_H)\n pretty-print.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h $(PRETTY_PRINT_H)\n errors.o : errors.c $(CONFIG_H) $(SYSTEM_H) errors.h\n-dbgcnt.o: dbgcnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n+dbgcnt.o: dbgcnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n     $(DIAGNOSTIC_CORE_H) $(DBGCNT_H)\n lower-subreg.o : lower-subreg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(MACHMODE_H) $(TM_H) $(RTL_H) $(TM_P_H) $(FLAGS_H) \\\n@@ -3423,7 +3447,8 @@ target-globals.o : target-globals.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(FLAGS_H) $(REGS_H) $(RTL_H) reload.h expmed.h $(EXPR_H) $(OPTABS_H) \\\n    $(LIBFUNCS_H) $(CFGLOOP_H) $(IRA_INT_H) builtins.h gcse.h bb-reorder.h \\\n    lower-subreg.h\n-hw-doloop.o : hw-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h $(TM_H) \\\n+hw-doloop.o : hw-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n+   $(TM_H) \\\n    $(RTL_H) $(FLAGS_H) $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H) \\\n    $(DF_H) $(CFGLOOP_H) $(RECOG_H) $(TARGET_H) \\\n    $(REGS_H) hw-doloop.h"}, {"sha": "69876e0a188e9d36322e7c6f8e9200732f1fdf45", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -437,6 +437,8 @@ extern basic_block create_basic_block_structure (rtx, rtx, rtx, basic_block);\n extern void clear_bb_flags (void);\n extern void dump_bb_info (FILE *, basic_block, int, int, bool, bool);\n extern void dump_edge_info (FILE *, edge, int, int);\n+extern void debug (edge_def &ref);\n+extern void debug (edge_def *ptr);\n extern void brief_dump_cfg (FILE *, int);\n extern void clear_edges (void);\n extern void scale_bbs_frequencies_int (basic_block *, int, int, int);"}, {"sha": "f0fba9cec0507b226acb0fdf76deb919600c0c31", "filename": "gcc/bitmap.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -2117,7 +2117,8 @@ debug_bitmap (const_bitmap head)\n    it does not print anything but the bits.  */\n \n DEBUG_FUNCTION void\n-bitmap_print (FILE *file, const_bitmap head, const char *prefix, const char *suffix)\n+bitmap_print (FILE *file, const_bitmap head, const char *prefix,\n+\t      const char *suffix)\n {\n   const char *comma = \"\";\n   unsigned i;\n@@ -2199,4 +2200,20 @@ dump_bitmap_statistics (void)\n   fprintf (stderr, \"---------------------------------------------------------------------------------\\n\");\n }\n \n+DEBUG_FUNCTION void\n+debug (const bitmap_head_def &ref)\n+{\n+  dump_bitmap (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const bitmap_head_def *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n #include \"gt-bitmap.h\""}, {"sha": "ada414d88367fb8f4cc4bd2684b6a09f5ca36fb5", "filename": "gcc/bitmap.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -293,6 +293,8 @@ inline void dump_bitmap (FILE *file, const_bitmap map)\n {\n   bitmap_print (file, map, \"\", \"\\n\");\n }\n+extern void debug (const bitmap_head_def &ref);\n+extern void debug (const bitmap_head_def *ptr);\n \n extern unsigned bitmap_first_set_bit (const_bitmap);\n extern unsigned bitmap_last_set_bit (const_bitmap);"}, {"sha": "0c1e425a00d34d4eb0854890431052f24813148e", "filename": "gcc/cfg.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -504,6 +504,23 @@ dump_edge_info (FILE *file, edge e, int flags, int do_succ)\n       fputc (')', file);\n     }\n }\n+\n+DEBUG_FUNCTION void\n+debug (edge_def &ref)\n+{\n+  /* FIXME (crowl): Is this desireable?  */\n+  dump_edge_info (stderr, &ref, 0, false);\n+  dump_edge_info (stderr, &ref, 0, true);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (edge_def *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n \f\n /* Simple routines to easily allocate AUX fields of basic blocks.  */\n "}, {"sha": "5354624d91c3727355529ce300000bf595350ba1", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -279,6 +279,22 @@ dump_bb (FILE *outf, basic_block bb, int indent, int flags)\n   fputc ('\\n', outf);\n }\n \n+DEBUG_FUNCTION void\n+debug (basic_block_def &ref)\n+{\n+  dump_bb (stderr, &ref, 0, 0);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (basic_block_def *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n /* Dumps basic block BB to pretty-printer PP, for use as a label of\n    a DOT graph record-node.  The implementation of this hook is\n    expected to write the label to the stream that is attached to PP."}, {"sha": "e68d8eee2e750de580e4c3b2cbcf50ac200dc8c3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -1,3 +1,28 @@\n+2013-03-28  Lawrence Crowl  <crowl@google.com>\n+\n+\t* Make-lang.in\n+\t(CXX_PARSER_H): Add header dependence.\n+\t* cp-tree.h\n+\t(extern debug (cp_binding_level &)): New.\n+\t(extern debug (cp_binding_level *)): New.\n+\t* name-lookup.h\n+\t(debug (cp_binding_level &)): New.\n+\t(debug (cp_binding_level *)): New.\n+\t* parser.c\n+\t(debug (cp_parser &)): New.\n+\t(debug (cp_parser *)): New.\n+\t(debug (cp_token &)): New.\n+\t(debug (cp_token *)): New.\n+\t(debug (vec<cp_token, va_gc> &)): New.\n+\t(debug (vec<cp_token, va_gc> *)): New.\n+\t* parser.c: Add header dependence.\n+\t(extern debug (cp_parser &)): New.\n+\t(extern debug (cp_parser *)): New.\n+\t(extern debug (cp_token &)): New.\n+\t(extern debug (cp_token *)): New.\n+\t(extern debug (vec<cp_token, va_gc> &)): New.\n+\t(extern debug (vec<cp_token, va_gc> *)): New.\n+\n 2013-03-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/17232"}, {"sha": "cda4897ceae4a3dd9bd78d211ea0d6ff613f2075", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -260,7 +260,7 @@ CXX_TREE_H = $(TREE_H) cp/name-lookup.h cp/cp-tree.h $(C_COMMON_H) \\\n \t$(FUNCTION_H) \\\n \t$(SYSTEM_H) coretypes.h $(CONFIG_H) $(TARGET_H) $(GGC_H) \\\n \t$(srcdir)/../include/hashtab.h\n-CXX_PARSER_H = tree.h c-family/c-pragma.h cp/parser.h\n+CXX_PARSER_H = tree.h $(CXX_TREE_H) c-family/c-pragma.h cp/parser.h\n CXX_PRETTY_PRINT_H = cp/cxx-pretty-print.h $(C_PRETTY_PRINT_H)\n \n cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\"}, {"sha": "f24dcb35f5335bfd13307de86a3874e5074401c2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -5102,6 +5102,8 @@ extern tree make_anon_name\t\t\t(void);\n extern tree pushdecl_top_level_maybe_friend\t(tree, bool);\n extern tree pushdecl_top_level_and_finish\t(tree, tree);\n extern tree check_for_out_of_scope_variable\t(tree);\n+extern void dump\t\t\t\t(cp_binding_level &ref);\n+extern void dump\t\t\t\t(cp_binding_level *ptr);\n extern void print_other_binding_stack\t\t(cp_binding_level *);\n extern tree maybe_push_decl\t\t\t(tree);\n extern tree current_decl_namespace\t\t(void);"}, {"sha": "88a516a4282c4410ef6306c53a837ba8861bd609", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -1800,6 +1800,22 @@ print_binding_level (cp_binding_level* lvl)\n     }\n }\n \n+DEBUG_FUNCTION void\n+debug (cp_binding_level &ref)\n+{\n+  print_binding_level (&ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (cp_binding_level *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n void\n print_other_binding_stack (cp_binding_level *stack)\n {"}, {"sha": "ff2ef3dd43e0def96ed8a3aa6324cb5a7d1a9be1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -327,6 +327,21 @@ cp_lexer_debug_tokens (vec<cp_token, va_gc> *buffer)\n   cp_lexer_dump_tokens (stderr, buffer, NULL, 0, NULL);\n }\n \n+DEBUG_FUNCTION void\n+debug (vec<cp_token, va_gc> &ref)\n+{\n+  cp_lexer_dump_tokens (stderr, &ref, NULL, 0, NULL);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (vec<cp_token, va_gc> *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n \n /* Dump the cp_parser tree field T to FILE if T is non-NULL.  DESC is the\n    description for T.  */\n@@ -545,6 +560,20 @@ cp_debug_parser (FILE *file, cp_parser *parser)\n   fprintf (file, \"\\tColumn: %d\\n\", eloc.column);\n }\n \n+DEBUG_FUNCTION void\n+debug (cp_parser &ref)\n+{\n+  cp_debug_parser (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (cp_parser *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n \n /* Allocate memory for a new lexer object and return it.  */\n \n@@ -1140,6 +1169,23 @@ cp_lexer_print_token (FILE * stream, cp_token *token)\n     }\n }\n \n+DEBUG_FUNCTION void\n+debug (cp_token &ref)\n+{\n+  cp_lexer_print_token (stderr, &ref);\n+  fprintf (stderr, \"\\n\");\n+}\n+\n+DEBUG_FUNCTION void\n+debug (cp_token *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n /* Start emitting debugging information.  */\n \n static void"}, {"sha": "3d8bb742d221c4bf3814257ac9adb9f81ba8eedd", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_CP_PARSER_H\n \n #include \"tree.h\"\n+#include \"cp/cp-tree.h\"\n #include \"c-family/c-pragma.h\"\n \n /* A token's value and its associated deferred access checks and\n@@ -343,7 +344,13 @@ typedef struct GTY(()) cp_parser {\n } cp_parser;\n \n /* In parser.c  */\n+extern void debug (cp_token &ref);\n+extern void debug (cp_token *ptr);\n extern void cp_lexer_debug_tokens (vec<cp_token, va_gc> *);\n+extern void debug (vec<cp_token, va_gc> &ref);\n+extern void debug (vec<cp_token, va_gc> *ptr);\n extern void cp_debug_parser (FILE *, cp_parser *);\n+extern void debug (cp_parser &ref);\n+extern void debug (cp_parser *ptr);\n \n #endif  /* GCC_CP_PARSER_H  */"}, {"sha": "77f5de68c4d0ea4505412ebcb2e69d0095e62c41", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -125,7 +125,6 @@ extern FILE *dump_begin (int, int *);\n extern void dump_end (int, FILE *);\n extern int dump_start (int, int *);\n extern void dump_finish (int);\n-extern void dump_node (const_tree, int, FILE *);\n extern int dump_switch_p (const char *);\n extern int opt_info_switch_p (const char *);\n extern const char *dump_flag_name (int);\n@@ -142,6 +141,9 @@ extern unsigned int dump_register (const char *, const char *, const char *,\n                                    int, int);\n extern bool enable_rtl_dump_file (void);\n \n+/* In tree-dump.c  */\n+extern void dump_node (const_tree, int, FILE *);\n+\n /* In combine.c  */\n extern void dump_combine_total_stats (FILE *);\n /* In cfghooks.c  */"}, {"sha": "04e1bd3e222f39773c594aa6cd1026a76ae9da9d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -5351,6 +5351,22 @@ debug_dwarf_die (dw_die_ref die)\n   print_die (die, stderr);\n }\n \n+DEBUG_FUNCTION void\n+debug (die_struct &ref)\n+{\n+  print_die (&ref, stderr);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (die_struct *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n /* Print all DWARF information collected for the compilation unit.\n    This routine is a debugging aid only.  */\n "}, {"sha": "ad03a34021d4bca394d971ba4e269cf0793a5131", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -257,6 +257,8 @@ extern void dwarf2out_emit_cfi (dw_cfi_ref cfi);\n extern void debug_dwarf (void);\n struct die_struct;\n extern void debug_dwarf_die (struct die_struct *);\n+extern void debug (die_struct &ref);\n+extern void debug (die_struct *ptr);\n extern void dwarf2out_set_demangle_name_func (const char *(*) (const char *));\n #ifdef VMS_DEBUGGING_INFO\n extern void dwarf2out_vms_debug_main_pointer (void);"}, {"sha": "f3e66d67ababc19d674d96cccb7cc7039e338c80", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -99,6 +99,21 @@ print_gimple_stmt (FILE *file, gimple g, int spc, int flags)\n   pp_newline_and_flush (&buffer);\n }\n \n+DEBUG_FUNCTION void\n+debug (gimple_statement_d &ref)\n+{\n+  print_gimple_stmt (stderr, &ref, 0, 0);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (gimple_statement_d *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n \n /* Print GIMPLE statement G to FILE using SPC indentation spaces and\n    FLAGS as in pp_gimple_stmt_1.  Print only the right-hand side"}, {"sha": "2b0285d356c1fefc335384946f3756c01224c48b", "filename": "gcc/gimple-pretty-print.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fgimple-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fgimple-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -29,6 +29,8 @@ extern void debug_gimple_stmt (gimple);\n extern void debug_gimple_seq (gimple_seq);\n extern void print_gimple_seq (FILE *, gimple_seq, int, int);\n extern void print_gimple_stmt (FILE *, gimple, int, int);\n+extern void debug (gimple_statement_d &ref);\n+extern void debug (gimple_statement_d *ptr);\n extern void print_gimple_expr (FILE *, gimple, int, int);\n extern void pp_gimple_stmt_1 (pretty_printer *, gimple, int, int);\n extern void gimple_dump_bb_for_graph (pretty_printer *, basic_block);"}, {"sha": "70be92174a4066b0d568b1151083a14876764635", "filename": "gcc/ira-build.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -1321,6 +1321,21 @@ print_copy (FILE *f, ira_copy_t cp)\n \t   ? \"move\" : cp->constraint_p ? \"constraint\" : \"shuffle\");\n }\n \n+DEBUG_FUNCTION void\n+debug (ira_allocno_copy &ref)\n+{\n+  print_copy (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (ira_allocno_copy *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n /* Print info about copy CP into stderr.  */\n void\n ira_debug_copy (ira_copy_t cp)\n@@ -1374,6 +1389,22 @@ print_allocno_copies (FILE *f, ira_allocno_t a)\n   fprintf (f, \"\\n\");\n }\n \n+DEBUG_FUNCTION void\n+debug (ira_allocno &ref)\n+{\n+  print_allocno_copies (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (ira_allocno *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n /* Print info about copies involving allocno A into stderr.  */\n void\n ira_debug_allocno_copies (ira_allocno_t a)"}, {"sha": "519f656f652bcfcad4b1f70c312932587d2a82c8", "filename": "gcc/ira-int.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #define ira_assert(c) gcc_assert (c)\n #else\n /* Always define and include C, so that warnings for empty body in an\n-  \u2018if\u2019 statement and unused variable do not occur.  */\n+  'if' statement and unused variable do not occur.  */\n #define ira_assert(c) ((void)(0 && (c)))\n #endif\n \n@@ -933,8 +933,13 @@ extern ira_loop_tree_node_t ira_curr_loop_tree_node;\n extern ira_allocno_t *ira_curr_regno_allocno_map;\n \n extern void ira_debug_copy (ira_copy_t);\n+extern void debug (ira_allocno_copy &ref);\n+extern void debug (ira_allocno_copy *ptr);\n+\n extern void ira_debug_copies (void);\n extern void ira_debug_allocno_copies (ira_allocno_t);\n+extern void debug (ira_allocno &ref);\n+extern void debug (ira_allocno *ptr);\n \n extern void ira_traverse_loop_tree (bool, ira_loop_tree_node_t,\n \t\t\t\t    void (*) (ira_loop_tree_node_t),\n@@ -983,6 +988,8 @@ extern void ira_tune_allocno_costs (void);\n \n extern void ira_rebuild_start_finish_chains (void);\n extern void ira_print_live_range_list (FILE *, live_range_t);\n+extern void debug (live_range &ref);\n+extern void debug (live_range *ptr);\n extern void ira_debug_live_range_list (live_range_t);\n extern void ira_debug_allocno_live_ranges (ira_allocno_t);\n extern void ira_debug_live_ranges (void);"}, {"sha": "59f2b21468b6a62a5be86ce3e782869e48cc9a32", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -1522,6 +1522,21 @@ ira_print_live_range_list (FILE *f, live_range_t r)\n   fprintf (f, \"\\n\");\n }\n \n+DEBUG_FUNCTION void\n+debug (live_range &ref)\n+{\n+  ira_print_live_range_list (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (live_range *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n /* Print live ranges R to stderr.  */\n void\n ira_debug_live_range_list (live_range_t r)"}, {"sha": "5ec7fa12502747445710067dbc7df687120d2135", "filename": "gcc/lra-int.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -23,6 +23,8 @@ along with GCC; see the file COPYING3.\tIf not see\n #include \"recog.h\"\n #include \"insn-attr.h\"\n #include \"insn-codes.h\"\n+#include \"insn-config.h\"\n+#include \"regs.h\"\n \n #define lra_assert(c) gcc_checking_assert (c)\n \n@@ -350,6 +352,8 @@ extern lra_live_range_t lra_merge_live_ranges (lra_live_range_t,\n extern bool lra_intersected_live_ranges_p (lra_live_range_t,\n \t\t\t\t\t   lra_live_range_t);\n extern void lra_print_live_range_list (FILE *, lra_live_range_t);\n+extern void debug (lra_live_range &ref);\n+extern void debug (lra_live_range *ptr);\n extern void lra_debug_live_range_list (lra_live_range_t);\n extern void lra_debug_pseudo_live_ranges (int);\n extern void lra_debug_live_ranges (void);"}, {"sha": "6eaeb2d7779c907cbbe788bf7da712186bcbd4fe", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -848,6 +848,21 @@ lra_print_live_range_list (FILE *f, lra_live_range_t r)\n   fprintf (f, \"\\n\");\n }\n \n+DEBUG_FUNCTION void\n+debug (lra_live_range &ref)\n+{\n+  lra_print_live_range_list (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (lra_live_range *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n /* Print live ranges R to stderr.  */\n void\n lra_debug_live_range_list (lra_live_range_t r)"}, {"sha": "8829a71a91db5e9cf85414311637d8c87df89e29", "filename": "gcc/omega.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fomega.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fomega.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomega.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -309,6 +309,23 @@ omega_print_vars (FILE *file, omega_pb pb)\n   fprintf (file, \"\\n\");\n }\n \n+/* Dump problem PB.  */\n+\n+DEBUG_FUNCTION void\n+debug (omega_pb_d &ref)\n+{\n+  omega_print_problem (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (omega_pb_d *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n /* Debug problem PB.  */\n \n DEBUG_FUNCTION void"}, {"sha": "0b217a93516f56d785ccdb1c95425ee3eb0fcb8a", "filename": "gcc/omega.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fomega.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fomega.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomega.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -122,6 +122,8 @@ extern enum omega_result omega_simplify_approximate (omega_pb);\n extern enum omega_result omega_constrain_variable_sign (omega_pb,\n \t\t\t\t\t\t\tenum omega_eqn_color,\n \t\t\t\t\t\t\tint, int);\n+extern void debug (omega_pb_d &ref);\n+extern void debug (omega_pb_d *ptr);\n extern void debug_omega_problem (omega_pb);\n extern void omega_print_problem (FILE *, omega_pb);\n extern void omega_print_red_equations (FILE *, omega_pb);"}, {"sha": "f870e0d4889d3ce18af5aaaeff82e14b4eb38b17", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -662,6 +662,23 @@ debug_rtx (const_rtx x)\n   fprintf (stderr, \"\\n\");\n }\n \n+/* Dump rtx REF.  */\n+\n+DEBUG_FUNCTION void\n+debug (const rtx_def &ref)\n+{\n+  debug_rtx (&ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const rtx_def *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n /* Count of rtx's to print with debug_rtx_list.\n    This global exists because gdb user defined commands have no arguments.  */\n "}, {"sha": "689eeb9fe52bfab83d1c95010a092ed4743da0da", "filename": "gcc/print-tree.c", "status": "modified", "additions": 144, "deletions": 28, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"gimple-pretty-print.h\" /* FIXME */\n #include \"tree-flow.h\"\n+#include \"tree-dump.h\"\n #include \"dumpfile.h\"\n \n /* Define the hash table of nodes already seen.\n@@ -44,34 +45,6 @@ struct bucket\n \n static struct bucket **table;\n \n-/* Print the node NODE on standard error, for debugging.\n-   Most nodes referred to by this one are printed recursively\n-   down to a depth of six.  */\n-\n-DEBUG_FUNCTION void\n-debug_tree (tree node)\n-{\n-  table = XCNEWVEC (struct bucket *, HASH_SIZE);\n-  print_node (stderr, \"\", node, 0);\n-  free (table);\n-  table = 0;\n-  putc ('\\n', stderr);\n-}\n-\n-/* Print the vector of trees VEC on standard error, for debugging.\n-   Most nodes referred to by this one are printed recursively\n-   down to a depth of six.  */\n-\n-DEBUG_FUNCTION void\n-debug_vec_tree (vec<tree, va_gc> *vec)\n-{\n-  table = XCNEWVEC (struct bucket *, HASH_SIZE);\n-  print_vec_tree (stderr, \"\", vec, 0);\n-  free (table);\n-  table = 0;\n-  putc ('\\n', stderr);\n-}\n-\n /* Print PREFIX and ADDR to FILE.  */\n void\n dump_addr (FILE *file, const char *prefix, const void *addr)\n@@ -1011,3 +984,146 @@ print_vec_tree (FILE *file, const char *prefix, vec<tree, va_gc> *vec, int inden\n       print_node (file, temp, elt, indent + 4);\n     }\n }\n+\n+\n+/* Print the node NODE on standard error, for debugging.\n+   Most nodes referred to by this one are printed recursively\n+   down to a depth of six.  */\n+\n+DEBUG_FUNCTION void\n+debug_tree (tree node)\n+{\n+  table = XCNEWVEC (struct bucket *, HASH_SIZE);\n+  print_node (stderr, \"\", node, 0);\n+  free (table);\n+  table = 0;\n+  putc ('\\n', stderr);\n+}\n+\n+DEBUG_FUNCTION void\n+debug_raw (const tree_node &ref)\n+{\n+  debug_tree (const_cast <tree> (&ref));\n+}\n+\n+DEBUG_FUNCTION void\n+debug_raw (const tree_node *ptr)\n+{\n+  if (ptr)\n+    debug_raw (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+static void\n+dump_tree_via_hooks (const tree_node *ptr, int options)\n+{\n+  if (DECL_P (ptr))\n+    lang_hooks.print_decl (stderr, const_cast <tree_node*> (ptr), 0);\n+  else if (TYPE_P (ptr))\n+    lang_hooks.print_type (stderr, const_cast <tree_node*> (ptr), 0);\n+  else if (TREE_CODE (ptr) == IDENTIFIER_NODE)\n+    lang_hooks.print_identifier (stderr, const_cast <tree_node*> (ptr), 0);\n+  else\n+    print_generic_expr (stderr, const_cast <tree_node*> (ptr), options);\n+  fprintf (stderr, \"\\n\");\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const tree_node &ref)\n+{\n+  dump_tree_via_hooks (&ref, 0);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const tree_node *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+DEBUG_FUNCTION void\n+debug_verbose (const tree_node &ref)\n+{\n+  dump_tree_via_hooks (&ref, TDF_VERBOSE);\n+}\n+\n+DEBUG_FUNCTION void\n+debug_verbose (const tree_node *ptr)\n+{\n+  if (ptr)\n+    debug_verbose (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+DEBUG_FUNCTION void\n+debug_head (const tree_node &ref)\n+{\n+  debug (ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug_head (const tree_node *ptr)\n+{\n+  if (ptr)\n+    debug_head (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+DEBUG_FUNCTION void\n+debug_body (const tree_node &ref)\n+{\n+  if (TREE_CODE (&ref) == FUNCTION_DECL)\n+    dump_function_to_file (const_cast <tree_node*> (&ref), stderr, 0);\n+  else\n+    debug (ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug_body (const tree_node *ptr)\n+{\n+  if (ptr)\n+    debug_body (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+/* Print the vector of trees VEC on standard error, for debugging.\n+   Most nodes referred to by this one are printed recursively\n+   down to a depth of six.  */\n+\n+DEBUG_FUNCTION void\n+debug_vec_tree (vec<tree, va_gc> *vec)\n+{\n+  tree elt;\n+  unsigned ix;\n+\n+  /* Print the slot this node is in, and its code, and address.  */\n+  fprintf (stderr, \"<VEC\");\n+  dump_addr (stderr, \" \", vec->address ());\n+\n+  FOR_EACH_VEC_ELT (*vec, ix, elt)\n+    {\n+      fprintf (stderr, \"elt %d \", ix);\n+      debug (elt);\n+    }\n+}\n+\n+DEBUG_FUNCTION void\n+debug (vec<tree, va_gc> &ref)\n+{\n+  debug_vec_tree (&ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (vec<tree, va_gc> *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}"}, {"sha": "419910e8a38fb108a22d55246915cd1a656c1980", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -2586,6 +2586,8 @@ extern void sel_sched_fix_param (const char *param, const char *val);\n \n /* In print-rtl.c */\n extern const char *print_rtx_head;\n+extern void debug (const rtx_def &ref);\n+extern void debug (const rtx_def *ptr);\n extern void debug_rtx (const_rtx);\n extern void debug_rtx_list (const_rtx, int);\n extern void debug_rtx_range (const_rtx, const_rtx);"}, {"sha": "bc77d43a6177f42d9d7b26f3af6086aa5620307d", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -655,6 +655,21 @@ dump_bitmap (FILE *file, const_sbitmap bmap)\n   fprintf (file, \"\\n\");\n }\n \n+DEBUG_FUNCTION void\n+debug_raw (simple_bitmap_def &ref)\n+{\n+  dump_bitmap (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug_raw (simple_bitmap_def *ptr)\n+{\n+  if (ptr)\n+    debug_raw (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n void\n dump_bitmap_file (FILE *file, const_sbitmap bmap)\n {\n@@ -684,6 +699,21 @@ debug_bitmap (const_sbitmap bmap)\n   dump_bitmap_file (stderr, bmap);\n }\n \n+DEBUG_FUNCTION void\n+debug (simple_bitmap_def &ref)\n+{\n+  dump_bitmap_file (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (simple_bitmap_def *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n void\n dump_bitmap_vector (FILE *file, const char *title, const char *subtitle,\n \t\t     sbitmap *bmaps, int n_maps)"}, {"sha": "9a0852a670b3c2783d2e5ca66a6173e8d7604d62", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -223,7 +223,11 @@ inline void sbitmap_vector_free (sbitmap * vec)\n }\n \n extern void dump_bitmap (FILE *, const_sbitmap);\n+extern void debug_raw (const simple_bitmap_def &ref);\n+extern void debug_raw (const simple_bitmap_def *ptr);\n extern void dump_bitmap_file (FILE *, const_sbitmap);\n+extern void debug (const simple_bitmap_def &ref);\n+extern void debug (const simple_bitmap_def *ptr);\n extern void dump_bitmap_vector (FILE *, const char *, const char *, sbitmap *,\n \t\t\t\t int);\n extern sbitmap sbitmap_alloc (unsigned int);"}, {"sha": "347b5eb41e7cc22b98524111d8be4b488980503a", "filename": "gcc/sel-sched-dump.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsel-sched-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsel-sched-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-dump.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -207,6 +207,42 @@ dump_vinsn (vinsn_t vi)\n   dump_vinsn_1 (vi, dump_vinsn_flags);\n }\n \n+DEBUG_FUNCTION void\n+debug (vinsn_def &ref)\n+{\n+  switch_dump (stderr);\n+  dump_vinsn_1 (&ref, dump_vinsn_flags);\n+  sel_print (\"\\n\");\n+  restore_dump ();\n+}\n+\n+DEBUG_FUNCTION void\n+debug (vinsn_def *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+DEBUG_FUNCTION void\n+debug_verbose (vinsn_def &ref)\n+{\n+  switch_dump (stderr);\n+  dump_vinsn_1 (&ref, debug_vinsn_flags);\n+  sel_print (\"\\n\");\n+  restore_dump ();\n+}\n+\n+DEBUG_FUNCTION void\n+debug_verbose (vinsn_def *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n /* Dump vinsn VI to stderr.  */\n DEBUG_FUNCTION void\n debug_vinsn (vinsn_t vi)\n@@ -298,6 +334,46 @@ debug_expr (expr_t expr)\n   restore_dump ();\n }\n \n+/* Dump expression REF.  */\n+\n+DEBUG_FUNCTION void\n+debug (expr_def &ref)\n+{\n+  switch_dump (stderr);\n+  dump_expr_1 (&ref, 0);\n+  sel_print (\"\\n\");\n+  restore_dump ();\n+}\n+\n+DEBUG_FUNCTION void\n+debug (expr_def *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+/* Dump expression REF verbosely.  */\n+\n+DEBUG_FUNCTION void\n+debug_verbose (expr_def &ref)\n+{\n+  switch_dump (stderr);\n+  dump_expr_1 (&ref, DUMP_EXPR_ALL);\n+  sel_print (\"\\n\");\n+  restore_dump ();\n+}\n+\n+DEBUG_FUNCTION void\n+debug_verbose (expr_def *ptr)\n+{\n+  if (ptr)\n+    debug_verbose (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n /* Dump insn I honoring FLAGS.  */\n void\n dump_insn_1 (insn_t i, int flags)\n@@ -918,6 +994,25 @@ debug_blist (blist_t bnds)\n   restore_dump ();\n }\n \n+/* Dump a rtx vector REF.  */\n+DEBUG_FUNCTION void\n+debug (vec<rtx> &ref)\n+{\n+  switch_dump (stderr);\n+  dump_insn_vector (ref);\n+  sel_print (\"\\n\");\n+  restore_dump ();\n+}\n+\n+DEBUG_FUNCTION void\n+debug (vec<rtx> *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n /* Dump an insn vector SUCCS.  */\n DEBUG_FUNCTION void\n debug_insn_vector (rtx_vec_t succs)"}, {"sha": "e762c929c82f5863fe177c5cf6ce0a8cb7c87f1b", "filename": "gcc/sel-sched-dump.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsel-sched-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsel-sched-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-dump.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -111,6 +111,12 @@ extern void dump_vinsn_1 (vinsn_t, int);\n extern void dump_vinsn (vinsn_t);\n extern void debug_vinsn (vinsn_t);\n \n+extern void debug (vinsn_def &ref);\n+extern void debug (vinsn_def *ptr);\n+extern void debug_verbose (vinsn_def &ref);\n+extern void debug_verbose (vinsn_def *ptr);\n+\n+\n /* These values control dumping of expressions.  The meaning of the fields\n    is explained in sel-sched-ir.h.  */\n enum dump_expr_def\n@@ -146,6 +152,12 @@ extern void dump_expr_1 (expr_t, int);\n extern void dump_expr (expr_t);\n extern void debug_expr (expr_t);\n \n+extern void debug (expr_def &ref);\n+extern void debug (expr_def *ptr);\n+extern void debug_verbose (expr_def &ref);\n+extern void debug_verbose (expr_def *ptr);\n+\n+\n /* A enumeration for dumping flags of an insn.  The difference from\n    dump_insn_rtx_def is that these fields are for insns in stream only.  */\n enum dump_insn_def\n@@ -214,6 +226,8 @@ extern void debug_av_set (av_set_t);\n extern void debug_lv_set (regset);\n extern void debug_ilist (ilist_t);\n extern void debug_blist (blist_t);\n+extern void debug (vec<rtx> &ref);\n+extern void debug (vec<rtx> *ptr);\n extern void debug_insn_vector (rtx_vec_t);\n extern void debug_hard_reg_set (HARD_REG_SET);\n extern rtx debug_mem_addr_value (rtx);"}, {"sha": "6d9394a4428530304203cc5f167b51895bafc9a9", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -530,7 +530,7 @@ typedef _list_iterator av_set_iterator;\n #define FOR_EACH_EXPR(EXPR, I, AV) _FOR_EACH (expr, (EXPR), (I), (AV))\n #define FOR_EACH_EXPR_1(EXPR, I, AV) _FOR_EACH_1 (expr, (EXPR), (I), (AV))\n \n-static bool\n+inline bool\n _list_iter_cond_expr (av_set_t av, expr_t *exprp)\n {\n   if (av)"}, {"sha": "f760021247641a097cef133b65cf6ff7e1ad25d8", "filename": "gcc/sreal.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsreal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsreal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -72,6 +72,22 @@ dump_sreal (FILE *file, sreal *x)\n #endif\n }\n \n+DEBUG_FUNCTION void\n+debug (sreal &ref)\n+{\n+  dump_sreal (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (sreal *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n /* Copy the sreal number.  */\n \n static inline void"}, {"sha": "71cb91ea3e5e731fcd285ff7bcc4aa4bdd95ec4c", "filename": "gcc/sreal.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsreal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Fsreal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -53,6 +53,8 @@ typedef struct sreal\n } sreal;\n \n extern void dump_sreal (FILE *, sreal *);\n+extern void debug (sreal &ref);\n+extern void debug (sreal *ptr);\n extern sreal *sreal_init (sreal *, unsigned HOST_WIDE_INT, signed int);\n extern HOST_WIDE_INT sreal_to_int (sreal *);\n extern int sreal_compare (sreal *, sreal *);"}, {"sha": "6be417b0f25f5345a8f5235d84a7e380c9364179", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -7062,7 +7062,8 @@ print_loop (FILE *file, struct loop *loop, int indent, int verbosity)\n    loop, or just its structure.  */\n \n static void\n-print_loop_and_siblings (FILE *file, struct loop *loop, int indent, int verbosity)\n+print_loop_and_siblings (FILE *file, struct loop *loop, int indent,\n+\t\t\t int verbosity)\n {\n   if (loop == NULL)\n     return;\n@@ -7084,6 +7085,40 @@ print_loops (FILE *file, int verbosity)\n     print_loop_and_siblings (file, bb->loop_father, 0, verbosity);\n }\n \n+/* Dump a loop.  */\n+\n+DEBUG_FUNCTION void\n+debug (struct loop &ref)\n+{\n+  print_loop (stderr, &ref, 0, /*verbosity*/0);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (struct loop *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+/* Dump a loop verbosely.  */\n+\n+DEBUG_FUNCTION void\n+debug_verbose (struct loop &ref)\n+{\n+  print_loop (stderr, &ref, 0, /*verbosity*/3);\n+}\n+\n+DEBUG_FUNCTION void\n+debug_verbose (struct loop *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n \n /* Debugging loops structure at tree level, at some VERBOSITY level.  */\n "}, {"sha": "10431c092371f0681c1c2c6c30e439f7a5de54a1", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -149,6 +149,24 @@ dump_data_references (FILE *file, vec<data_reference_p> datarefs)\n     dump_data_reference (file, dr);\n }\n \n+/* Unified dump into FILE all the data references from DATAREFS.  */\n+\n+DEBUG_FUNCTION void\n+debug (vec<data_reference_p> &ref)\n+{\n+  dump_data_references (stderr, ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (vec<data_reference_p> *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n /* Dump into STDERR all the data references from DATAREFS.  */\n \n DEBUG_FUNCTION void\n@@ -190,6 +208,24 @@ dump_data_reference (FILE *outf,\n   fprintf (outf, \"#)\\n\");\n }\n \n+/* Unified dump function for a DATA_REFERENCE structure.  */\n+\n+DEBUG_FUNCTION void\n+debug (data_reference &ref)\n+{\n+  dump_data_reference (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (data_reference *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n /* Dumps the affine function described by FN to the file OUTF.  */\n \n static void\n@@ -442,6 +478,22 @@ dump_data_dependence_relations (FILE *file,\n     dump_data_dependence_relation (file, ddr);\n }\n \n+DEBUG_FUNCTION void\n+debug (vec<ddr_p> &ref)\n+{\n+  dump_data_dependence_relations (stderr, ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (vec<ddr_p> *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n /* Dump to STDERR all the dependence relations from DDRS.  */\n \n DEBUG_FUNCTION void"}, {"sha": "27737262b1f985b7262d292ff045b62893daecda", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -369,10 +369,16 @@ extern bool compute_data_dependences_for_bb (basic_block, bool,\n                                              vec<ddr_p> *);\n extern void debug_ddrs (vec<ddr_p> );\n extern void dump_data_reference (FILE *, struct data_reference *);\n+extern void debug (data_reference &ref);\n+extern void debug (data_reference *ptr);\n extern void debug_data_reference (struct data_reference *);\n extern void debug_data_references (vec<data_reference_p> );\n+extern void debug (vec<data_reference_p> &ref);\n+extern void debug (vec<data_reference_p> *ptr);\n extern void debug_data_dependence_relation (struct data_dependence_relation *);\n extern void dump_data_dependence_relations (FILE *, vec<ddr_p> );\n+extern void debug (vec<ddr_p> &ref);\n+extern void debug (vec<ddr_p> *ptr);\n extern void debug_data_dependence_relations (vec<ddr_p> );\n extern void free_dependence_relation (struct data_dependence_relation *);\n extern void free_dependence_relations (vec<ddr_p> );"}, {"sha": "12a2be7e49e05e931e22dd3d90e9e239cf3b8a75", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-dump.h\"\n #include \"langhooks.h\"\n #include \"tree-iterator.h\"\n+#include \"tree-pretty-print.h\"\n \n static unsigned int queue (dump_info_p, const_tree, int);\n static void dump_index (dump_info_p, unsigned int);"}, {"sha": "389246d406fb2e3e5d3ab132e09c4e3afb20b427", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -378,6 +378,10 @@ extern void dot_cfg (void);\n extern void debug_cfg_stats (void);\n extern void debug_loops (int);\n extern void debug_loop (struct loop *, int);\n+extern void debug (struct loop &ref);\n+extern void debug (struct loop *ptr);\n+extern void debug_verbose (struct loop &ref);\n+extern void debug_verbose (struct loop *ptr);\n extern void debug_loop_num (unsigned, int);\n extern void print_loops (FILE *, int);\n extern void print_loops_bb (FILE *, basic_block, int, int);"}, {"sha": "a83e35165d7b81ac7ac38b5cbe957faa0d8aba42", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -454,6 +454,25 @@ dump_points_to_solution (FILE *file, struct pt_solution *pt)\n     }\n }\n \n+\n+/* Unified dump function for pt_solution.  */\n+\n+DEBUG_FUNCTION void\n+debug (pt_solution &ref)\n+{\n+  dump_points_to_solution (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (pt_solution *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n /* Dump points-to information for SSA_NAME PTR into FILE.  */\n \n void"}, {"sha": "96d01928e9dc90f98f3fd6c253717e3476ef8673", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -120,6 +120,8 @@ extern struct ptr_info_def *get_ptr_info (tree);\n extern void dump_alias_info (FILE *);\n extern void debug_alias_info (void);\n extern void dump_points_to_solution (FILE *, struct pt_solution *);\n+extern void debug (pt_solution &ref);\n+extern void debug (pt_solution *ptr);\n extern void dump_points_to_info_for (FILE *, tree);\n extern void debug_points_to_info_for (tree);\n extern void dump_alias_stats (FILE *);"}, {"sha": "756fa37384788c08859b6e559a4bc2185c2990f9", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -1214,6 +1214,24 @@ dump_var_map (FILE *f, var_map map)\n }\n \n \n+/* Generic dump for the above.  */\n+\n+DEBUG_FUNCTION void\n+debug (_var_map &ref)\n+{\n+  dump_var_map (stderr, &ref);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (_var_map *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n /* Output live range info LIVE to file F, controlled by FLAG.  */\n \n void\n@@ -1253,6 +1271,25 @@ dump_live_info (FILE *f, tree_live_info_p live, int flag)\n     }\n }\n \n+\n+/* Generic dump for the above.  */\n+\n+DEBUG_FUNCTION void\n+debug (tree_live_info_d &ref)\n+{\n+  dump_live_info (stderr, &ref, 0);\n+}\n+\n+DEBUG_FUNCTION void\n+debug (tree_live_info_d *ptr)\n+{\n+  if (ptr)\n+    debug (*ptr);\n+  else\n+    fprintf (stderr, \"<nil>\\n\");\n+}\n+\n+\n #ifdef ENABLE_CHECKING\n /* Verify that SSA_VAR is a non-virtual SSA_NAME.  */\n "}, {"sha": "8fd1e80d54939a5097f2714276bc8770a7bdf9b6", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -71,6 +71,8 @@ typedef struct _var_map\n extern var_map init_var_map (int);\n extern void delete_var_map (var_map);\n extern void dump_var_map (FILE *, var_map);\n+extern void debug (_var_map &ref);\n+extern void debug (_var_map *ptr);\n extern int var_union (var_map, tree, tree);\n extern void partition_view_normal (var_map, bool);\n extern void partition_view_bitmap (var_map, bitmap, bool);\n@@ -247,6 +249,8 @@ extern void delete_tree_live_info (tree_live_info_p);\n #define LIVEDUMP_EXIT\t0x02\n #define LIVEDUMP_ALL\t(LIVEDUMP_ENTRY | LIVEDUMP_EXIT)\n extern void dump_live_info (FILE *, tree_live_info_p, int);\n+extern void debug (tree_live_info_d &ref);\n+extern void debug (tree_live_info_d *ptr);\n \n \n /*  Return TRUE if P is marked as a global in LIVE.  */"}, {"sha": "1eedf1f5c3ec0e36b0453948fc8f83dc538f6a51", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3b6ae44183e5d0ceb8ebaca57887e9073becb9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7b3b6ae44183e5d0ceb8ebaca57887e9073becb9", "patch": "@@ -5985,7 +5985,19 @@ extern void print_rtl (FILE *, const_rtx);\n \n /* In print-tree.c */\n extern void debug_tree (tree);\n+extern void debug_raw (const tree_node &ref);\n+extern void debug_raw (const tree_node *ptr);\n+extern void debug (const tree_node &ref);\n+extern void debug (const tree_node *ptr);\n+extern void debug_verbose (const tree_node &ref);\n+extern void debug_verbose (const tree_node *ptr);\n+extern void debug_head (const tree_node &ref);\n+extern void debug_head (const tree_node *ptr);\n+extern void debug_body (const tree_node &ref);\n+extern void debug_body (const tree_node *ptr);\n extern void debug_vec_tree (vec<tree, va_gc> *);\n+extern void debug (vec<tree, va_gc> &ref);\n+extern void debug (vec<tree, va_gc> *ptr);\n #ifdef BUFSIZ\n extern void dump_addr (FILE*, const char *, const void *);\n extern void print_node (FILE *, const char *, tree, int);"}]}