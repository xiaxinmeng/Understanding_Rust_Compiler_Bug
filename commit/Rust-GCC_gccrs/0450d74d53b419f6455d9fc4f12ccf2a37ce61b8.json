{"sha": "0450d74d53b419f6455d9fc4f12ccf2a37ce61b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1MGQ3NGQ1M2I0MTlmNjQ1NWQ5ZmM0ZjEyY2NmMmEzN2NlNjFiOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-04-10T16:49:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-04-10T16:49:29Z"}, "message": "typeck.c (build_array_ref): Push the array reference inside COMPOUND_EXPR and COND_EXPR.\n\n        * typeck.c (build_array_ref): Push the array reference inside\n        COMPOUND_EXPR and COND_EXPR.\n\nFrom-SVN: r41223", "tree": {"sha": "1c742baeba4be52ff039f6119be7f276cbe2b88a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c742baeba4be52ff039f6119be7f276cbe2b88a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0450d74d53b419f6455d9fc4f12ccf2a37ce61b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0450d74d53b419f6455d9fc4f12ccf2a37ce61b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0450d74d53b419f6455d9fc4f12ccf2a37ce61b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0450d74d53b419f6455d9fc4f12ccf2a37ce61b8/comments", "author": null, "committer": null, "parents": [{"sha": "c050ec51a4c3deb40a07387469152d6f26e5a765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c050ec51a4c3deb40a07387469152d6f26e5a765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c050ec51a4c3deb40a07387469152d6f26e5a765"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "1b0c470aba7ef4a2c7c63574bf80eba8f68d0d50", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0450d74d53b419f6455d9fc4f12ccf2a37ce61b8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0450d74d53b419f6455d9fc4f12ccf2a37ce61b8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0450d74d53b419f6455d9fc4f12ccf2a37ce61b8", "patch": "@@ -1,3 +1,8 @@\n+2001-04-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* typeck.c (build_array_ref): Push the array reference inside\n+\tCOMPOUND_EXPR and COND_EXPR.\n+\n 2001-04-05  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (DECL_THIS_INLINE): Rename to DECL_DECLARED_INLINE_P."}, {"sha": "139290bb166179d2114afbe02517f09562a64682", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0450d74d53b419f6455d9fc4f12ccf2a37ce61b8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0450d74d53b419f6455d9fc4f12ccf2a37ce61b8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0450d74d53b419f6455d9fc4f12ccf2a37ce61b8", "patch": "@@ -2433,6 +2433,27 @@ build_array_ref (array, idx)\n       || TREE_TYPE (idx) == error_mark_node)\n     return error_mark_node;\n \n+  /* If ARRAY is a COMPOUND_EXPR or COND_EXPR, move our reference\n+     inside it.  */\n+  switch (TREE_CODE (array))\n+    {\n+    case COMPOUND_EXPR:\n+      {\n+\ttree value = build_array_ref (TREE_OPERAND (array, 1), idx);\n+\treturn build (COMPOUND_EXPR, TREE_TYPE (value),\n+\t\t      TREE_OPERAND (array, 0), value);\n+      }\n+\n+    case COND_EXPR:\n+      return build_conditional_expr\n+\t(TREE_OPERAND (array, 0),\n+\t build_array_ref (TREE_OPERAND (array, 1), idx),\n+\t build_array_ref (TREE_OPERAND (array, 2), idx));\n+\n+    default:\n+      break;\n+    }\n+\n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE\n       && TREE_CODE (array) != INDIRECT_REF)\n     {\n@@ -2469,6 +2490,7 @@ build_array_ref (array, idx)\n \t  if (mark_addressable (array) == 0)\n \t    return error_mark_node;\n \t}\n+\n       /* An array that is indexed by a constant value which is not within\n \t the array bounds cannot be stored in a register either; because we\n \t would get a crash in store_bit_field/extract_bit_field when trying"}]}