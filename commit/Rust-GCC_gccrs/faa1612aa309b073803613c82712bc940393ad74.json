{"sha": "faa1612aa309b073803613c82712bc940393ad74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFhMTYxMmFhMzA5YjA3MzgwMzYxM2M4MjcxMmJjOTQwMzkzYWQ3NA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-07-22T13:22:03Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-07-22T13:22:03Z"}, "message": "tree-ssa-loop-niter.h (number_of_iterations_exit_assumptions): New Parameter.\n\n\t* tree-ssa-loop-niter.h (number_of_iterations_exit_assumptions): New\n\tParameter.\n\t* tree-ssa-loop-niter.c (number_of_iterations_exit_assumptions): New\n\tParameter.\n\t(number_of_iterations_exit): Warn missed loop optimization for\n\tpossible infinite loops.\n\n\tgcc/testsuite\n\t* gcc.dg/tree-ssa/pr19210-1.c: Refine test strings.\n\t* gcc.dg/tree-ssa/pr19210-2.c: Delete.\n\nFrom-SVN: r238641", "tree": {"sha": "576e003c572da7e4109e775e6be5e94022b7de89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/576e003c572da7e4109e775e6be5e94022b7de89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faa1612aa309b073803613c82712bc940393ad74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa1612aa309b073803613c82712bc940393ad74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa1612aa309b073803613c82712bc940393ad74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa1612aa309b073803613c82712bc940393ad74/comments", "author": null, "committer": null, "parents": [{"sha": "01a0d7f57b8a0e87cde0aac7e0693bcaa5745898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a0d7f57b8a0e87cde0aac7e0693bcaa5745898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01a0d7f57b8a0e87cde0aac7e0693bcaa5745898"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "e8c40d829e9a4ae01b47e77cc11a526d1d2206f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa1612aa309b073803613c82712bc940393ad74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa1612aa309b073803613c82712bc940393ad74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=faa1612aa309b073803613c82712bc940393ad74", "patch": "@@ -1,3 +1,12 @@\n+2016-07-22  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-loop-niter.h (number_of_iterations_exit_assumptions): New\n+\tParameter.\n+\t* tree-ssa-loop-niter.c (number_of_iterations_exit_assumptions): New\n+\tParameter.\n+\t(number_of_iterations_exit): Warn missed loop optimization for\n+\tpossible infinite loops.\n+\n 2016-07-22  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (rs6000_file_start): Fix condition for"}, {"sha": "7cef33787ad0fc432513d8f13f15fc725f24e53e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa1612aa309b073803613c82712bc940393ad74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa1612aa309b073803613c82712bc940393ad74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=faa1612aa309b073803613c82712bc940393ad74", "patch": "@@ -1,3 +1,8 @@\n+2016-07-22  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* gcc.dg/tree-ssa/pr19210-1.c: Refine test strings.\n+\t* gcc.dg/tree-ssa/pr19210-2.c: Delete.\n+\n 2016-07-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/71795"}, {"sha": "3c8ee06016fe3678c263c5b582f6d7f5823d8e14", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr19210-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa1612aa309b073803613c82712bc940393ad74/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa1612aa309b073803613c82712bc940393ad74/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c?ref=faa1612aa309b073803613c82712bc940393ad74", "patch": "@@ -6,10 +6,10 @@ void\n f (unsigned n)\n {\n   unsigned k;\n-  for(k = 0;k <= n;k++) /* { dg-warning \"cannot optimize.*infinite loops\" } */\n+  for(k = 0;k <= n;k++) /* { dg-warning \"missed loop optimization.*overflow\" } */\n     g();\n \n-  for(k = 0;k <= n;k += 4) /* { dg-warning \"cannot optimize.*overflow\" } */\n+  for(k = 0;k <= n;k += 4) /* { dg-warning \"missed loop optimization.*overflow\" } */\n     g();\n \n   /* We used to get warning for this loop.  However, since then # of iterations\n@@ -21,9 +21,9 @@ f (unsigned n)\n     g();\n \n   /* So we need the following loop, instead.  */\n-  for(k = 4;k <= n;k += 5) /* { dg-warning \"cannot optimize.*overflow\" } */\n+  for(k = 4;k <= n;k += 5) /* { dg-warning \"missed loop optimization.*overflow\" } */\n     g();\n   \n-  for(k = 15;k >= n;k--) /* { dg-warning \"cannot optimize.*infinite\" } */\n+  for(k = 15;k >= n;k--) /* { dg-warning \"missed loop optimization.*overflow\" } */\n     g();\n }"}, {"sha": "9116e97ec4f043b74967bc31445581d594073e6b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr19210-2.c", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a0d7f57b8a0e87cde0aac7e0693bcaa5745898/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a0d7f57b8a0e87cde0aac7e0693bcaa5745898/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-2.c?ref=01a0d7f57b8a0e87cde0aac7e0693bcaa5745898", "patch": "@@ -1,29 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -funsafe-loop-optimizations -Wunsafe-loop-optimizations\" } */\n-extern void g(void);\n-\n-void\n-f (unsigned n)\n-{\n-  unsigned k;\n-  for(k = 0;k <= n;k++) /* { dg-warning \"assuming.*not infinite\" } */\n-    g();\n-\n-  for(k = 5;k <= n;k += 4) /* { dg-warning \"assuming.*not overflow\" } */\n-    g();\n-\n-  /* We used to get warning for this loop.  However, since then # of iterations\n-     analysis improved, and we can now prove that this loop does not verflow.\n-     This is because the only case when it would overflow is if n = ~0 (since\n-     ~0 is divisible by 5), and this cannot be the case, since when we got\n-     here, the previous loop exited, thus there exists k > n.  */\n-  for(k = 5;k <= n;k += 5)\n-    g();\n-\n-  for(k = 4;k <= n;k += 5) /* { dg-warning \"assuming.*not overflow\" } */\n-    g();\n-\n-  for(k = 15;k >= n;k--) /* { dg-warning \"assuming.*not infinite\" } */\n-    g();\n-\n-}"}, {"sha": "ee6d5cfe0fdeb50ade8cc8d712188daea2892bf7", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa1612aa309b073803613c82712bc940393ad74/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa1612aa309b073803613c82712bc940393ad74/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=faa1612aa309b073803613c82712bc940393ad74", "patch": "@@ -2132,12 +2132,13 @@ loop_only_exit_p (const struct loop *loop, const_edge exit)\n    in comments at struct tree_niter_desc declaration), false otherwise.\n    When EVERY_ITERATION is true, only tests that are known to be executed\n    every iteration are considered (i.e. only test that alone bounds the loop).\n- */\n+   If AT_STMT is not NULL, this function stores LOOP's condition statement in\n+   it when returning true.  */\n \n bool\n number_of_iterations_exit_assumptions (struct loop *loop, edge exit,\n \t\t\t\t       struct tree_niter_desc *niter,\n-\t\t\t\t       bool every_iteration)\n+\t\t\t\t       gcond **at_stmt, bool every_iteration)\n {\n   gimple *last;\n   gcond *stmt;\n@@ -2254,6 +2255,9 @@ number_of_iterations_exit_assumptions (struct loop *loop, edge exit,\n   if (TREE_CODE (niter->niter) == INTEGER_CST)\n     niter->max = wi::to_widest (niter->niter);\n \n+  if (at_stmt)\n+    *at_stmt = stmt;\n+\n   return (!integer_zerop (niter->assumptions));\n }\n \n@@ -2263,13 +2267,26 @@ number_of_iterations_exit_assumptions (struct loop *loop, edge exit,\n bool\n number_of_iterations_exit (struct loop *loop, edge exit,\n \t\t\t   struct tree_niter_desc *niter,\n-\t\t\t   bool, bool every_iteration)\n+\t\t\t   bool warn, bool every_iteration)\n {\n+  gcond *stmt;\n   if (!number_of_iterations_exit_assumptions (loop, exit, niter,\n-\t\t\t\t\t      every_iteration))\n+\t\t\t\t\t      &stmt, every_iteration))\n     return false;\n \n-  return (integer_nonzerop (niter->assumptions));\n+  if (integer_nonzerop (niter->assumptions))\n+    return true;\n+\n+  if (warn)\n+    {\n+      const char *wording;\n+\n+      wording = N_(\"missed loop optimization, the loop counter may overflow\");\n+      warning_at (gimple_location_safe (stmt),\n+\t\t  OPT_Wunsafe_loop_optimizations, \"%s\", gettext (wording));\n+    }\n+\n+  return false;\n }\n \n /* Try to determine the number of iterations of LOOP.  If we succeed,"}, {"sha": "f5e2259186f91dc401b16d074141ac6aba0491d1", "filename": "gcc/tree-ssa-loop-niter.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa1612aa309b073803613c82712bc940393ad74/gcc%2Ftree-ssa-loop-niter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa1612aa309b073803613c82712bc940393ad74/gcc%2Ftree-ssa-loop-niter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.h?ref=faa1612aa309b073803613c82712bc940393ad74", "patch": "@@ -29,7 +29,7 @@ extern bool number_of_iterations_exit (struct loop *, edge,\n \t\t\t\t       bool every_iteration = true);\n extern bool number_of_iterations_exit_assumptions (struct loop *, edge,\n \t\t\t\t\t\t   struct tree_niter_desc *,\n-\t\t\t\t\t\t   bool = true);\n+\t\t\t\t\t\t   gcond **, bool = true);\n extern tree find_loop_niter (struct loop *, edge *);\n extern bool finite_loop_p (struct loop *);\n extern tree loop_niter_by_eval (struct loop *, edge);"}]}