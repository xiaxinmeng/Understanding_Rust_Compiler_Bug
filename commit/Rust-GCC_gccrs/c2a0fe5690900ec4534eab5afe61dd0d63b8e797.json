{"sha": "c2a0fe5690900ec4534eab5afe61dd0d63b8e797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhMGZlNTY5MDkwMGVjNDUzNGVhYjVhZmU2MWRkMGQ2M2I4ZTc5Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2018-02-02T15:19:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-02T15:19:44Z"}, "message": "go-gcc.cc (Gcc_backend::type_size): Return 0 for void_type_node.\n\n\t* go-gcc.cc (Gcc_backend::type_size): Return 0 for\n\tvoid_type_node.\n\t(Gcc_backend::convert_expression): Don't convert if the type of\n\texpr_tree is void_type_node.\n\t(Gcc_backend::array_index_expression): Don't index if the type of\n\tthe array expression is void_type_node.\n\t(Gcc_backend::init_statement): Don't initialize if the type of the\n\tinitializer expression is void_type_node.\n\t(Gcc_backend::assignment_statement): Don't assign if the type of\n\teither the left or right hand side is void_type_node.\n\t(Gcc_backend::temporary_variable): Don't initialize if the type of\n\tthe initializer expression is void_type_node.\n\nFrom-SVN: r257334", "tree": {"sha": "37dde9cfd8e1e3b89f35af1120912a2718521e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37dde9cfd8e1e3b89f35af1120912a2718521e1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2a0fe5690900ec4534eab5afe61dd0d63b8e797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a0fe5690900ec4534eab5afe61dd0d63b8e797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a0fe5690900ec4534eab5afe61dd0d63b8e797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a0fe5690900ec4534eab5afe61dd0d63b8e797/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "584d9d585bf041ec45fa1a8c2c4e30f015b29f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584d9d585bf041ec45fa1a8c2c4e30f015b29f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584d9d585bf041ec45fa1a8c2c4e30f015b29f1a"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "720b0e4d934e95fc5231a85908a871bde52e9052", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a0fe5690900ec4534eab5afe61dd0d63b8e797/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a0fe5690900ec4534eab5afe61dd0d63b8e797/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=c2a0fe5690900ec4534eab5afe61dd0d63b8e797", "patch": "@@ -1,3 +1,18 @@\n+2018-02-02  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go-gcc.cc (Gcc_backend::type_size): Return 0 for\n+\tvoid_type_node.\n+\t(Gcc_backend::convert_expression): Don't convert if the type of\n+\texpr_tree is void_type_node.\n+\t(Gcc_backend::array_index_expression): Don't index if the type of\n+\tthe array expression is void_type_node.\n+\t(Gcc_backend::init_statement): Don't initialize if the type of the\n+\tinitializer expression is void_type_node.\n+\t(Gcc_backend::assignment_statement): Don't assign if the type of\n+\teither the left or right hand side is void_type_node.\n+\t(Gcc_backend::temporary_variable): Don't initialize if the type of\n+\tthe initializer expression is void_type_node.\n+\n 2018-02-01  Cherry Zhang  <cherryyz@google.com>\n \n \t* lang.opt (fgo-optimize): Remove RejectNegative."}, {"sha": "71029dd609adec6df28144675b478a9b98aef58d", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a0fe5690900ec4534eab5afe61dd0d63b8e797/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a0fe5690900ec4534eab5afe61dd0d63b8e797/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=c2a0fe5690900ec4534eab5afe61dd0d63b8e797", "patch": "@@ -1197,6 +1197,8 @@ Gcc_backend::type_size(Btype* btype)\n   tree t = btype->get_tree();\n   if (t == error_mark_node)\n     return 1;\n+  if (t == void_type_node)\n+    return 0;\n   t = TYPE_SIZE_UNIT(t);\n   gcc_assert(tree_fits_uhwi_p (t));\n   unsigned HOST_WIDE_INT val_wide = TREE_INT_CST_LOW(t);\n@@ -1466,7 +1468,8 @@ Gcc_backend::convert_expression(Btype* type, Bexpression* expr,\n     return this->error_expression();\n \n   tree ret;\n-  if (this->type_size(type) == 0)\n+  if (this->type_size(type) == 0\n+      || TREE_TYPE(expr_tree) == void_type_node)\n     {\n       // Do not convert zero-sized types.\n       ret = expr_tree;\n@@ -1894,9 +1897,18 @@ Gcc_backend::array_index_expression(Bexpression* array, Bexpression* index,\n       || index_tree == error_mark_node)\n     return this->error_expression();\n \n-  tree ret = build4_loc(location.gcc_location(), ARRAY_REF,\n-\t\t\tTREE_TYPE(TREE_TYPE(array_tree)), array_tree,\n-                        index_tree, NULL_TREE, NULL_TREE);\n+  // A function call that returns a zero sized object will have been\n+  // changed to return void.  If we see void here, assume we are\n+  // dealing with a zero sized type and just evaluate the operands.\n+  tree ret;\n+  if (TREE_TYPE(array_tree) != void_type_node)\n+    ret = build4_loc(location.gcc_location(), ARRAY_REF,\n+\t\t     TREE_TYPE(TREE_TYPE(array_tree)), array_tree,\n+\t\t     index_tree, NULL_TREE, NULL_TREE);\n+  else\n+    ret = fold_build2_loc(location.gcc_location(), COMPOUND_EXPR,\n+\t\t\t  void_type_node, array_tree, index_tree);\n+\n   return this->make_expression(ret);\n }\n \n@@ -2020,6 +2032,7 @@ Gcc_backend::init_statement(Bfunction*, Bvariable* var, Bexpression* init)\n   // initializer.  Such initializations don't mean anything anyhow.\n   if (int_size_in_bytes(TREE_TYPE(var_tree)) != 0\n       && init_tree != NULL_TREE\n+      && TREE_TYPE(init_tree) != void_type_node\n       && int_size_in_bytes(TREE_TYPE(init_tree)) != 0)\n     {\n       DECL_INITIAL(var_tree) = init_tree;\n@@ -2052,7 +2065,9 @@ Gcc_backend::assignment_statement(Bfunction* bfn, Bexpression* lhs,\n   // expression; avoid crashes here by avoiding assignments of\n   // zero-sized expressions.  Such assignments don't really mean\n   // anything anyhow.\n-  if (int_size_in_bytes(TREE_TYPE(lhs_tree)) == 0\n+  if (TREE_TYPE(lhs_tree) == void_type_node\n+      || int_size_in_bytes(TREE_TYPE(lhs_tree)) == 0\n+      || TREE_TYPE(rhs_tree) == void_type_node\n       || int_size_in_bytes(TREE_TYPE(rhs_tree)) == 0)\n     return this->compound_statement(this->expression_statement(bfn, lhs),\n \t\t\t\t    this->expression_statement(bfn, rhs));\n@@ -2733,7 +2748,9 @@ Gcc_backend::temporary_variable(Bfunction* function, Bblock* bblock,\n       BIND_EXPR_VARS(bind_tree) = BLOCK_VARS(block_tree);\n     }\n \n-  if (this->type_size(btype) != 0 && init_tree != NULL_TREE)\n+  if (this->type_size(btype) != 0\n+      && init_tree != NULL_TREE\n+      && TREE_TYPE(init_tree) != void_type_node)\n     DECL_INITIAL(var) = this->convert_tree(type_tree, init_tree, location);\n \n   if (is_address_taken)\n@@ -2743,9 +2760,11 @@ Gcc_backend::temporary_variable(Bfunction* function, Bblock* bblock,\n                                                 DECL_EXPR,\n \t\t\t\t\t\tvoid_type_node, var));\n \n-  // Don't initialize VAR with BINIT, but still evaluate BINIT for\n-  // its side effects.\n-  if (this->type_size(btype) == 0 && init_tree != NULL_TREE)\n+  // For a zero sized type, don't initialize VAR with BINIT, but still\n+  // evaluate BINIT for its side effects.\n+  if (init_tree != NULL_TREE\n+      && (this->type_size(btype) == 0\n+\t  || TREE_TYPE(init_tree) == void_type_node))\n     *pstatement =\n       this->compound_statement(this->expression_statement(function, binit),\n \t\t\t       *pstatement);"}]}