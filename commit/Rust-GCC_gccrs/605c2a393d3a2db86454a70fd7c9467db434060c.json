{"sha": "605c2a393d3a2db86454a70fd7c9467db434060c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1YzJhMzkzZDNhMmRiODY0NTRhNzBmZDdjOTQ2N2RiNDM0MDYwYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-23T06:40:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-26T11:28:30Z"}, "message": "middle-end/97521 - always use single-bit bools in mask vector types\n\nThis makes us always use a single-bit boolean type component type\nfor integer mode mask VECTOR_BOOLEAN_TYPE_P to match the RTL and target\nrepresentation.  This aovids the need for magic translation and\nthe inconsistencies from the translation requirement now that\nwe expose temporaries of those types on the GIMPLE level.\n\n2020-10-23  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/97521\n\t* expr.c (const_scalar_mask_from_tree): Remove.\n\t(expand_expr_real_1): Always VIEW_CONVERT integer mode\n\tvector constants to an integer type.\n\t* tree.c (build_truth_vector_type_for_mode): Use a single-bit\n\tboolean component type for non-vector-mode mask_mode.\n\n\t* gcc.target/i386/pr97521.c: New testcase.", "tree": {"sha": "0e268ceb12720c4f1395e88440321b79dab85230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e268ceb12720c4f1395e88440321b79dab85230"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/605c2a393d3a2db86454a70fd7c9467db434060c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605c2a393d3a2db86454a70fd7c9467db434060c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605c2a393d3a2db86454a70fd7c9467db434060c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605c2a393d3a2db86454a70fd7c9467db434060c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4052c05e5b30fee0fb95a51e74e12a56dce29491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4052c05e5b30fee0fb95a51e74e12a56dce29491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4052c05e5b30fee0fb95a51e74e12a56dce29491"}], "stats": {"total": 77, "additions": 40, "deletions": 37}, "files": [{"sha": "ae16f07775870792729e3805436d7f2debafb6ca", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605c2a393d3a2db86454a70fd7c9467db434060c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605c2a393d3a2db86454a70fd7c9467db434060c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=605c2a393d3a2db86454a70fd7c9467db434060c", "patch": "@@ -96,7 +96,6 @@ static void emit_single_push_insn (machine_mode, rtx, tree);\n static void do_tablejump (rtx, machine_mode, rtx, rtx, rtx,\n \t\t\t  profile_probability);\n static rtx const_vector_from_tree (tree);\n-static rtx const_scalar_mask_from_tree (scalar_int_mode, tree);\n static tree tree_expr_size (const_tree);\n static HOST_WIDE_INT int_expr_size (tree);\n static void convert_mode_scalar (rtx, rtx, int);\n@@ -10356,16 +10355,10 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \tscalar_int_mode int_mode;\n \tif (is_int_mode (mode, &int_mode))\n \t  {\n-\t    if (VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (exp)))\n-\t      return const_scalar_mask_from_tree (int_mode, exp);\n-\t    else\n-\t      {\n-\t\ttree type_for_mode\n-\t\t  = lang_hooks.types.type_for_mode (int_mode, 1);\n-\t\tif (type_for_mode)\n-\t\t  tmp = fold_unary_loc (loc, VIEW_CONVERT_EXPR,\n-\t\t\t\t\ttype_for_mode, exp);\n-\t      }\n+\t    tree type_for_mode = lang_hooks.types.type_for_mode (int_mode, 1);\n+\t    if (type_for_mode)\n+\t      tmp = fold_unary_loc (loc, VIEW_CONVERT_EXPR,\n+\t\t\t\t    type_for_mode, exp);\n \t  }\n \tif (!tmp)\n \t  {\n@@ -12739,30 +12732,6 @@ const_vector_mask_from_tree (tree exp)\n   return builder.build ();\n }\n \n-/* EXP is a VECTOR_CST in which each element is either all-zeros or all-ones.\n-   Return a constant scalar rtx of mode MODE in which bit X is set if element\n-   X of EXP is nonzero.  */\n-static rtx\n-const_scalar_mask_from_tree (scalar_int_mode mode, tree exp)\n-{\n-  wide_int res = wi::zero (GET_MODE_PRECISION (mode));\n-  tree elt;\n-\n-  /* The result has a fixed number of bits so the input must too.  */\n-  unsigned int nunits = VECTOR_CST_NELTS (exp).to_constant ();\n-  for (unsigned int i = 0; i < nunits; ++i)\n-    {\n-      elt = VECTOR_CST_ELT (exp, i);\n-      gcc_assert (TREE_CODE (elt) == INTEGER_CST);\n-      if (integer_all_onesp (elt))\n-\tres = wi::set_bit (res, i);\n-      else\n-\tgcc_assert (integer_zerop (elt));\n-    }\n-\n-  return immed_wide_int_const (res, mode);\n-}\n-\n /* Return a CONST_VECTOR rtx for a VECTOR_CST tree.  */\n static rtx\n const_vector_from_tree (tree exp)"}, {"sha": "804ffd61e131a420e9eb8e1a3f2b42fb73b549be", "filename": "gcc/testsuite/gcc.target/i386/pr97521.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605c2a393d3a2db86454a70fd7c9467db434060c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97521.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605c2a393d3a2db86454a70fd7c9467db434060c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97521.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97521.c?ref=605c2a393d3a2db86454a70fd7c9467db434060c", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -mno-sse2\" } */\n+\n+typedef unsigned char __attribute__ ((__vector_size__ (8))) V;\n+typedef unsigned long long __attribute__ ((__vector_size__ (16))) W;\n+\n+V c;\n+W d, e;\n+\n+V\n+foo (W f)\n+{\n+  W g = (W) { 0, 209 } <7 <= (0 < f);\n+  W h = e + g + d;\n+  V j = (V) (h[0]) + (V) c;\n+  return j;\n+}\n+\n+int\n+main (void)\n+{\n+  V x = foo ((W) { 3 });\n+  for (unsigned i = 0; i < sizeof (x); i++)\n+    if (x[i] != 0xff)\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "6759ac8179a339753601f7e535c46f9e8f324404", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605c2a393d3a2db86454a70fd7c9467db434060c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605c2a393d3a2db86454a70fd7c9467db434060c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=605c2a393d3a2db86454a70fd7c9467db434060c", "patch": "@@ -10926,8 +10926,15 @@ build_truth_vector_type_for_mode (poly_uint64 nunits, machine_mode mask_mode)\n {\n   gcc_assert (mask_mode != BLKmode);\n \n-  poly_uint64 vsize = GET_MODE_BITSIZE (mask_mode);\n-  unsigned HOST_WIDE_INT esize = vector_element_size (vsize, nunits);\n+  unsigned HOST_WIDE_INT esize;\n+  if (VECTOR_MODE_P (mask_mode))\n+    {\n+      poly_uint64 vsize = GET_MODE_BITSIZE (mask_mode);\n+      esize = vector_element_size (vsize, nunits);\n+    }\n+  else\n+    esize = 1;\n+\n   tree bool_type = build_nonstandard_boolean_type (esize);\n \n   return make_vector_type (bool_type, nunits, mask_mode);"}]}