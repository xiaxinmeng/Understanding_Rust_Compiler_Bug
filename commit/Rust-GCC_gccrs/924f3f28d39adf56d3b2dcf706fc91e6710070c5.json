{"sha": "924f3f28d39adf56d3b2dcf706fc91e6710070c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI0ZjNmMjhkMzlhZGY1NmQzYjJkY2Y3MDZmYzkxZTY3MTAwNzBjNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-11T19:15:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-11T19:15:49Z"}, "message": "(movsi+1): Allow r->m move during reloading.\n\nFrom-SVN: r8424", "tree": {"sha": "a20abb6b0f20d68022fad8a8f62c46d14b41ff0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a20abb6b0f20d68022fad8a8f62c46d14b41ff0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/924f3f28d39adf56d3b2dcf706fc91e6710070c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924f3f28d39adf56d3b2dcf706fc91e6710070c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/924f3f28d39adf56d3b2dcf706fc91e6710070c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924f3f28d39adf56d3b2dcf706fc91e6710070c5/comments", "author": null, "committer": null, "parents": [{"sha": "a205e34b227a13e890ab1071f956799906cfe689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a205e34b227a13e890ab1071f956799906cfe689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a205e34b227a13e890ab1071f956799906cfe689"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "50104bf81debdd229dc8f45dae47ddf8e1d7c0ac", "filename": "gcc/config/clipper/clipper.md", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924f3f28d39adf56d3b2dcf706fc91e6710070c5/gcc%2Fconfig%2Fclipper%2Fclipper.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924f3f28d39adf56d3b2dcf706fc91e6710070c5/gcc%2Fconfig%2Fclipper%2Fclipper.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.md?ref=924f3f28d39adf56d3b2dcf706fc91e6710070c5", "patch": "@@ -385,14 +385,19 @@\n     operands[1] = force_reg (SImode, operands[1]);\n }\")\n \n-;; provide 2 patterns with different predicates as 'general_operand' in both\n-;; positions results in a 'mem -> mem' move from combine that must be reloaded \n+;; Reject both args with `general_operand' if not reloading because a\n+;; mem -> mem move that was split by 'movsi' can be recombined to\n+;; mem -> mem by the combiner.\n ;;\n-\n+;; As a pseudo register can end up in a stack slot during reloading we must\n+;; allow a r->m move for the next pattern. \n+;; The first predicate must be `general_operand' because a predicate must\n+;; be true for each constraint.\n+;;  \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(match_operand:SI 1 \"general_operand\"   \"r,m,n,i\"))]\n-  \"\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,r,m\")\n+\t(match_operand:SI 1 \"general_operand\"  \"r,m,n,i,r\"))]\n+  \"reload_in_progress || register_operand (operands[0], SImode)\"\n   \"*\n {\n   int val;\n@@ -418,9 +423,11 @@\n \n   if (which_alternative == 3)\t\t/* unknown const */\n     return \\\"loada  %a1,%0\\\";\n+\n+  return \\\"storw  %1,%0\\\";\n }\"\n-[(set_attr \"type\" \"arith,load,arith,load\")\n- (set_attr \"cc\" \"set2,change0,set1,change0\")])\n+[(set_attr \"type\" \"arith,load,arith,load,store\")\n+ (set_attr \"cc\" \"set2,change0,set1,change0,unchanged\")])\n \n \n (define_insn \"\""}]}