{"sha": "7ff2d2343921f5baeba0b47983202a84852e2957", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZmMmQyMzQzOTIxZjViYWViYTBiNDc5ODMyMDJhODQ4NTJlMjk1Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T08:16:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T08:16:45Z"}, "message": "[multiple changes]\n\n2011-08-02  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch6.adb (Expand_N_Subprogram_Declaration): issue error in formal\n\tmode on subprogram declaration outside of package specification, unless\n\tit is followed by a pragma Import\n\t* sem_ch3.adb (Access_Definition, Access_Subprogram_Declaration,\n\tAccess_Type_Declaration): issue error in formal mode on access type\n\t(Analyze_Incomplete_Type_Decl): issue error in formal mode on\n\tincomplete type\n\t(Analyze_Object_Declaration): issue error in formal mode on object\n\tdeclaration which does not respect SPARK restrictions\n\t(Analyze_Subtype_Declaration): issue error in formal mode on subtype\n\tdeclaration which does not respect SPARK restrictions\n\t(Constrain_Decimal, Constrain_Float, Constrain_Ordinary_Fixed): issue\n\terror in formal mode on digits or delta constraint\n\t(Decimal_Fixed_Point_Type_Declaration): issue error in formal mode on\n\tdecimal fixed point type\n\t(Derived_Type_Declaration): issue error in formal mode on derived type\n\tother than type extensions of tagged record types\n\t* sem_ch6.adb (Process_Formals): remove check in formal mode, redundant\n\twith check on access definition\n\t* sem_ch9.adb (Analyze_Protected_Definition): issue error in formal\n\tmode on protected definition.\n\t(Analyze_Task_Definition): issue error in formal mode on task definition\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* make.adb, sem_ch8.adb, s-inmaop-vxworks.adb: Minor reformatting.\n\nFrom-SVN: r177093", "tree": {"sha": "c8d327701f09d54f9297eb72db5645ca2a9a824a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8d327701f09d54f9297eb72db5645ca2a9a824a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ff2d2343921f5baeba0b47983202a84852e2957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff2d2343921f5baeba0b47983202a84852e2957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ff2d2343921f5baeba0b47983202a84852e2957", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff2d2343921f5baeba0b47983202a84852e2957/comments", "author": null, "committer": null, "parents": [{"sha": "806f6d372157633408dc26c7903e43b732710530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806f6d372157633408dc26c7903e43b732710530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806f6d372157633408dc26c7903e43b732710530"}], "stats": {"total": 305, "additions": 258, "deletions": 47}, "files": [{"sha": "65fb0dcdd3633b4f5bc805990ab2a8e462a78411", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7ff2d2343921f5baeba0b47983202a84852e2957", "patch": "@@ -1,3 +1,32 @@\n+2011-08-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_N_Subprogram_Declaration): issue error in formal\n+\tmode on subprogram declaration outside of package specification, unless\n+\tit is followed by a pragma Import\n+\t* sem_ch3.adb (Access_Definition, Access_Subprogram_Declaration,\n+\tAccess_Type_Declaration): issue error in formal mode on access type\n+\t(Analyze_Incomplete_Type_Decl): issue error in formal mode on\n+\tincomplete type\n+\t(Analyze_Object_Declaration): issue error in formal mode on object\n+\tdeclaration which does not respect SPARK restrictions\n+\t(Analyze_Subtype_Declaration): issue error in formal mode on subtype\n+\tdeclaration which does not respect SPARK restrictions\n+\t(Constrain_Decimal, Constrain_Float, Constrain_Ordinary_Fixed): issue\n+\terror in formal mode on digits or delta constraint\n+\t(Decimal_Fixed_Point_Type_Declaration): issue error in formal mode on\n+\tdecimal fixed point type\n+\t(Derived_Type_Declaration): issue error in formal mode on derived type\n+\tother than type extensions of tagged record types\n+\t* sem_ch6.adb (Process_Formals): remove check in formal mode, redundant\n+\twith check on access definition\n+\t* sem_ch9.adb (Analyze_Protected_Definition): issue error in formal\n+\tmode on protected definition.\n+\t(Analyze_Task_Definition): issue error in formal mode on task definition\n+\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* make.adb, sem_ch8.adb, s-inmaop-vxworks.adb: Minor reformatting.\n+\n 2011-08-02  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch6.adb (Can_Override_Operator): New function."}, {"sha": "33e8bd157ec89d6ae842e426ad544336ed75c4e4", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=7ff2d2343921f5baeba0b47983202a84852e2957", "patch": "@@ -5406,6 +5406,28 @@ package body Exp_Ch6 is\n       Prot_Id   : Entity_Id;\n \n    begin\n+      --  In SPARK or ALFA, subprogram declarations are only allowed in\n+      --  package specifications.\n+\n+      if Formal_Verification_Mode\n+        and then Comes_From_Source (Original_Node (N))\n+        and then Nkind (Parent (N)) /= N_Package_Specification\n+      then\n+         if Present (Next (N))\n+           and then Nkind (Next (N)) = N_Pragma\n+           and then Get_Pragma_Id (Pragma_Name (Next (N))) = Pragma_Import\n+         then\n+            --  In SPARK or ALFA, subprogram declarations are also permitted in\n+            --  declarative parts when immediately followed by a corresponding\n+            --  pragma Import. We only check here that there is some pragma\n+            --  Import.\n+\n+            null;\n+         else\n+            Error_Msg_F (\"|~~subprogram declaration is not allowed here\", N);\n+         end if;\n+      end if;\n+\n       --  Deal with case of protected subprogram. Do not generate protected\n       --  operation if operation is flagged as eliminated.\n "}, {"sha": "4aac5b86a656791ed30305c107ed95cfe0fd8dea", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=7ff2d2343921f5baeba0b47983202a84852e2957", "patch": "@@ -6066,8 +6066,8 @@ package body Make is\n                      end loop;\n \n                      for Index in 1 .. Library_Projs.Last loop\n-                        if\n-                          Library_Projs.Table (Index).Library_Kind = Static\n+                        if Library_Projs.Table\n+                            (Index).Library_Kind = Static\n                         then\n                            Linker_Switches.Increment_Last;\n                            Linker_Switches.Table (Linker_Switches.Last) :="}, {"sha": "5b602834af6cb5aa004af66a888977dba8782cb1", "filename": "gcc/ada/s-inmaop-vxworks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fs-inmaop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fs-inmaop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-inmaop-vxworks.adb?ref=7ff2d2343921f5baeba0b47983202a84852e2957", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n --                                                                          --\n---                  SYSTEM.INTERRUPT_MANAGEMENT.OPERATIONS                  --\n+--                   SYSTEM.INTERRUPT_MANAGEMENT.OPERATIONS                 --\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --"}, {"sha": "04919c004bde64c550625aae0ba0927d0c75f7c8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 147, "deletions": 1, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7ff2d2343921f5baeba0b47983202a84852e2957", "patch": "@@ -716,6 +716,16 @@ package body Sem_Ch3 is\n       Enclosing_Prot_Type : Entity_Id := Empty;\n \n    begin\n+      --  Access type is not allowed in SPARK or ALFA\n+\n+      if Formal_Verification_Mode\n+        and then Comes_From_Source (N)\n+      then\n+         Error_Msg_F (\"|~~access type is not allowed\", N);\n+      end if;\n+\n+      --  Proceed with analysis\n+\n       if Is_Entry (Current_Scope)\n         and then Is_Task_Type (Etype (Scope (Current_Scope)))\n       then\n@@ -1028,6 +1038,14 @@ package body Sem_Ch3 is\n    --  Start of processing for Access_Subprogram_Declaration\n \n    begin\n+      --  Access type is not allowed in SPARK or ALFA\n+\n+      if Formal_Verification_Mode\n+        and then Comes_From_Source (T_Def)\n+      then\n+         Error_Msg_F (\"|~~access type is not allowed\", T_Def);\n+      end if;\n+\n       --  Associate the Itype node with the inner full-type declaration or\n       --  subprogram spec or entry body. This is required to handle nested\n       --  anonymous declarations. For example:\n@@ -1280,6 +1298,14 @@ package body Sem_Ch3 is\n       S : constant Node_Id := Subtype_Indication (Def);\n       P : constant Node_Id := Parent (Def);\n    begin\n+      --  Access type is not allowed in SPARK or ALFA\n+\n+      if Formal_Verification_Mode\n+        and then Comes_From_Source (Def)\n+      then\n+         Error_Msg_F (\"|~~access type is not allowed\", Def);\n+      end if;\n+\n       --  Check for permissible use of incomplete type\n \n       if Nkind (S) /= N_Subtype_Indication then\n@@ -2477,6 +2503,16 @@ package body Sem_Ch3 is\n       T : Entity_Id;\n \n    begin\n+      --  Incomplete type is not allowed in SPARK or ALFA\n+\n+      if Formal_Verification_Mode\n+        and then Comes_From_Source (Original_Node (N))\n+      then\n+         Error_Msg_F (\"|~~incomplete type is not allowed\", N);\n+      end if;\n+\n+      --  Proceed with analysis\n+\n       Generate_Definition (Defining_Identifier (N));\n \n       --  Process an incomplete declaration. The identifier must not have been\n@@ -2805,7 +2841,7 @@ package body Sem_Ch3 is\n       --  There are three kinds of implicit types generated by an\n       --  object declaration:\n \n-      --   1. Those for generated by the original Object Definition\n+      --   1. Those generated by the original Object Definition\n \n       --   2. Those generated by the Expression\n \n@@ -3010,6 +3046,39 @@ package body Sem_Ch3 is\n \n       Act_T := T;\n \n+      --  These checks should be performed before the initialization expression\n+      --  is considered, so that the Object_Definition node is still the same\n+      --  as in source code.\n+\n+      if Formal_Verification_Mode\n+        and then Comes_From_Source (Original_Node (N))\n+      then\n+         --  In SPARK or ALFA, the nominal subtype shall be given by a subtype\n+         --  mark and shall not be unconstrained. (The only exception to this\n+         --  is the admission of declarations of constants of type String.)\n+\n+         if not Nkind_In (Object_Definition (N),\n+                          N_Identifier,\n+                          N_Expanded_Name)\n+         then\n+            Error_Msg_F (\"|~~subtype mark expected\", Object_Definition (N));\n+         elsif Is_Array_Type (T)\n+           and then not Is_Constrained (T)\n+           and then T /= Standard_String\n+         then\n+            Error_Msg_F (\"|~~subtype mark of constrained type expected\",\n+                         Object_Definition (N));\n+         else\n+            null;\n+         end if;\n+\n+         --  There are no aliased objects in SPARK or ALFA\n+\n+         if Aliased_Present (N) then\n+            Error_Msg_F (\"|~~aliased object is not allowed\", N);\n+         end if;\n+      end if;\n+\n       --  Process initialization expression if present and not in error\n \n       if Present (E) and then E /= Error then\n@@ -3949,13 +4018,38 @@ package body Sem_Ch3 is\n          Set_Has_Delayed_Freeze (Id);\n       end if;\n \n+      --  Subtype of Boolean is not allowed to have a constraint in SPARK or\n+      --  ALFA.\n+\n+      if Formal_Verification_Mode\n+        and then Comes_From_Source (Original_Node (N))\n+        and then Is_Boolean_Type (T)\n+        and then Nkind (Subtype_Indication (N)) = N_Subtype_Indication\n+      then\n+         Error_Msg_F (\"|~~subtype of Boolean cannot have constraint\", N);\n+      end if;\n+\n       --  In the case where there is no constraint given in the subtype\n       --  indication, Process_Subtype just returns the Subtype_Mark, so its\n       --  semantic attributes must be established here.\n \n       if Nkind (Subtype_Indication (N)) /= N_Subtype_Indication then\n          Set_Etype (Id, Base_Type (T));\n \n+         --  Subtype of unconstrained array without constraint is not allowed\n+         --  in SPARK or ALFA.\n+\n+         if Formal_Verification_Mode\n+           and then Comes_From_Source (Original_Node (N))\n+           and then Is_Array_Type (T)\n+           and then not Is_Constrained (T)\n+         then\n+            Error_Msg_F\n+              (\"|~~subtype of unconstrained array must have constraint\", N);\n+         end if;\n+\n+         --  Proceed with analysis\n+\n          case Ekind (T) is\n             when Array_Kind =>\n                Set_Ekind                       (Id, E_Array_Subtype);\n@@ -11149,6 +11243,17 @@ package body Sem_Ch3 is\n \n       else\n          pragma Assert (Nkind (C) = N_Digits_Constraint);\n+\n+         --  Digits constraint is not allowed in SPARK or ALFA\n+\n+         if Formal_Verification_Mode\n+           and then Comes_From_Source (Original_Node (S))\n+         then\n+            Error_Msg_F (\"|~~digits constraint is not allowed\", S);\n+         end if;\n+\n+         --  Proceed with analysis\n+\n          Digits_Expr := Digits_Expression (C);\n          Analyze_And_Resolve (Digits_Expr, Any_Integer);\n \n@@ -11375,6 +11480,17 @@ package body Sem_Ch3 is\n       --  Digits constraint present\n \n       if Nkind (C) = N_Digits_Constraint then\n+\n+         --  Digits constraint is not allowed in SPARK or ALFA\n+\n+         if Formal_Verification_Mode\n+           and then Comes_From_Source (Original_Node (S))\n+         then\n+            Error_Msg_F (\"|~~digits constraint is not allowed\", S);\n+         end if;\n+\n+         --  Proceed with analysis\n+\n          Check_Restriction (No_Obsolescent_Features, C);\n \n          if Warn_On_Obsolescent_Feature then\n@@ -11595,6 +11711,16 @@ package body Sem_Ch3 is\n       --  Delta constraint present\n \n       if Nkind (C) = N_Delta_Constraint then\n+         --  Delta constraint is not allowed in SPARK or ALFA\n+\n+         if Formal_Verification_Mode\n+           and then Comes_From_Source (Original_Node (S))\n+         then\n+            Error_Msg_F (\"|~~delta constraint is not allowed\", S);\n+         end if;\n+\n+         --  Proceed with analysis\n+\n          Check_Restriction (No_Obsolescent_Features, C);\n \n          if Warn_On_Obsolescent_Feature then\n@@ -12251,6 +12377,17 @@ package body Sem_Ch3 is\n       Bound_Val     : Ureal;\n \n    begin\n+      --  Decimal fixed point type is not allowed in SPARK or ALFA\n+\n+      if Formal_Verification_Mode\n+        and then Comes_From_Source (Original_Node (Def))\n+      then\n+         Error_Msg_F\n+           (\"|~~decimal fixed point type is not allowed\", Def);\n+      end if;\n+\n+      --  Proceed with analysis\n+\n       Check_Restriction (No_Fixed_Point, Def);\n \n       --  Create implicit base type\n@@ -14198,6 +14335,15 @@ package body Sem_Ch3 is\n             end if;\n          end if;\n       end if;\n+\n+      --  In SPARK or ALFA, there are no derived type definitions other than\n+      --  type extensions of tagged record types.\n+\n+      if Formal_Verification_Mode\n+        and then No (Extension)\n+      then\n+         Error_Msg_F (\"|~~derived type is not allowed\", N);\n+      end if;\n    end Derived_Type_Declaration;\n \n    ------------------------"}, {"sha": "61ce6f60f403bee180ab8407921f473e193811e6", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7ff2d2343921f5baeba0b47983202a84852e2957", "patch": "@@ -8785,14 +8785,6 @@ package body Sem_Ch6 is\n          Set_Etype (Formal, Formal_Type);\n          Default := Expression (Param_Spec);\n \n-         --  Access parameter is not allowed in SPARK or ALFA\n-\n-         if Formal_Verification_Mode\n-           and then Ekind (Formal_Type) = E_Anonymous_Access_Type\n-         then\n-            Error_Msg_F (\"|~~access parameter is not allowed\", Param_Spec);\n-         end if;\n-\n          if Present (Default) then\n             --  Default expression is not allowed in SPARK or ALFA\n "}, {"sha": "2472474a4665c0226d69cb4b5da90efcfa37801c", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=7ff2d2343921f5baeba0b47983202a84852e2957", "patch": "@@ -506,9 +506,12 @@ package body Sem_Ch8 is\n    --  re-installing use clauses of parent units. N is the use_clause that\n    --  names P (and possibly other packages).\n \n-   procedure Use_One_Type (Id : Node_Id);\n+   procedure Use_One_Type (Id : Node_Id; Installed : Boolean := False);\n    --  Id is the subtype mark from a use type clause. This procedure makes\n-   --  the primitive operators of the type potentially use-visible.\n+   --  the primitive operators of the type potentially use-visible. The\n+   --  boolean flag Installed indicates that the clause is being reinstalled\n+   --  after previous analysis, and primitive operations are already chained\n+   --  on the Used_Operations list of the clause.\n \n    procedure Write_Info;\n    --  Write debugging information on entities declared in current scope\n@@ -2693,11 +2696,8 @@ package body Sem_Ch8 is\n          begin\n             Mark := First (Subtype_Marks (N));\n             while Present (Mark) loop\n-               if not In_Use (Entity (Mark))\n-                 and then not Is_Potentially_Use_Visible (Entity (Mark))\n-               then\n-                  Set_In_Use (Base_Type (Entity (Mark)));\n-               end if;\n+               Use_One_Type (Mark, Installed => True);\n+\n                Next (Mark);\n             end loop;\n \n@@ -7565,7 +7565,7 @@ package body Sem_Ch8 is\n    -- Use_One_Type --\n    ------------------\n \n-   procedure Use_One_Type (Id : Node_Id) is\n+   procedure Use_One_Type (Id : Node_Id; Installed : Boolean := False) is\n       Elmt          : Elmt_Id;\n       Is_Known_Used : Boolean;\n       Op_List       : Elist_Id;\n@@ -7719,40 +7719,46 @@ package body Sem_Ch8 is\n          end if;\n \n          Set_Current_Use_Clause (T, Parent (Id));\n-         Op_List := Collect_Primitive_Operations (T);\n \n          --  Iterate over primitive operations of the type. If an operation is\n          --  already use_visible, it is the result of a previous use_clause,\n-         --  and already appears on the corresponding entity chain.\n+         --  and already appears on the corresponding entity chain. If the\n+         --  clause is being reinstalled, operations are already use-visible.\n \n-         Elmt := First_Elmt (Op_List);\n-         while Present (Elmt) loop\n-            if (Nkind (Node (Elmt)) = N_Defining_Operator_Symbol\n-                 or else Chars (Node (Elmt)) in Any_Operator_Name)\n-              and then not Is_Hidden (Node (Elmt))\n-              and then not Is_Potentially_Use_Visible (Node (Elmt))\n-            then\n-               Set_Is_Potentially_Use_Visible (Node (Elmt));\n-               Append_Elmt (Node (Elmt), Used_Operations (Parent (Id)));\n+         if Installed then\n+            null;\n \n-            elsif Ada_Version >= Ada_2012\n-              and then All_Present (Parent (Id))\n-              and then not Is_Hidden (Node (Elmt))\n-              and then not Is_Potentially_Use_Visible (Node (Elmt))\n-            then\n-               Set_Is_Potentially_Use_Visible (Node (Elmt));\n-               Append_Elmt (Node (Elmt), Used_Operations (Parent (Id)));\n-            end if;\n+         else\n+            Op_List := Collect_Primitive_Operations (T);\n+            Elmt := First_Elmt (Op_List);\n+            while Present (Elmt) loop\n+               if (Nkind (Node (Elmt)) = N_Defining_Operator_Symbol\n+                    or else Chars (Node (Elmt)) in Any_Operator_Name)\n+                 and then not Is_Hidden (Node (Elmt))\n+                 and then not Is_Potentially_Use_Visible (Node (Elmt))\n+               then\n+                  Set_Is_Potentially_Use_Visible (Node (Elmt));\n+                  Append_Elmt (Node (Elmt), Used_Operations (Parent (Id)));\n \n-            Next_Elmt (Elmt);\n-         end loop;\n-      end if;\n+               elsif Ada_Version >= Ada_2012\n+                 and then All_Present (Parent (Id))\n+                 and then not Is_Hidden (Node (Elmt))\n+                 and then not Is_Potentially_Use_Visible (Node (Elmt))\n+               then\n+                  Set_Is_Potentially_Use_Visible (Node (Elmt));\n+                  Append_Elmt (Node (Elmt), Used_Operations (Parent (Id)));\n+               end if;\n \n-      if Ada_Version >= Ada_2012\n-        and then All_Present (Parent (Id))\n-        and then Is_Tagged_Type (T)\n-      then\n-         Use_Class_Wide_Operations (T);\n+               Next_Elmt (Elmt);\n+            end loop;\n+         end if;\n+\n+         if Ada_Version >= Ada_2012\n+           and then All_Present (Parent (Id))\n+           and then Is_Tagged_Type (T)\n+         then\n+            Use_Class_Wide_Operations (T);\n+         end if;\n       end if;\n \n       --  If warning on redundant constructs, check for unnecessary WITH"}, {"sha": "9d1a84d4fbd1c1aa6735f9627c511c8c413ab487", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff2d2343921f5baeba0b47983202a84852e2957/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=7ff2d2343921f5baeba0b47983202a84852e2957", "patch": "@@ -1158,6 +1158,14 @@ package body Sem_Ch9 is\n    --  Start of processing for Analyze_Protected_Definition\n \n    begin\n+      --  Protected definition is not allowed in SPARK or ALFA\n+\n+      if Formal_Verification_Mode then\n+         Error_Msg_F (\"|~~protected definition is not allowed\", N);\n+      end if;\n+\n+      --  Proceed with analysis\n+\n       Tasking_Used := True;\n       Analyze_Declarations (Visible_Declarations (N));\n \n@@ -2009,6 +2017,14 @@ package body Sem_Ch9 is\n       L : Entity_Id;\n \n    begin\n+      --  Task definition is not allowed in SPARK or ALFA\n+\n+      if Formal_Verification_Mode then\n+         Error_Msg_F (\"|~~task definition is not allowed\", N);\n+      end if;\n+\n+      --  Proceed with analysis\n+\n       Tasking_Used := True;\n \n       if Present (Visible_Declarations (N)) then"}]}