{"sha": "4ed1b019f60ffc7d367baf51dc3cfa36f536a395", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVkMWIwMTlmNjBmZmM3ZDM2N2JhZjUxZGMzY2ZhMzZmNTM2YTM5NQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-01-29T20:02:19Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-01-29T20:02:19Z"}, "message": "re PR fortran/51972 ([OOP] Wrong code as _copy does not honor CLASS components)\n\n2012-01-29  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51972\n        * trans-array.c (structure_alloc_comps): Fix assignment of\n        polymorphic components (polymorphic deep copying).\n\n2012-01-29  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51972\n        * gfortran.dg/class_allocate_12.f90: Enable disabled test.\n        * gfortran.dg/class_48.f90: New.\n\nFrom-SVN: r183680", "tree": {"sha": "d83aaa3db2f9ca3b7af658301c7d70891984792f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d83aaa3db2f9ca3b7af658301c7d70891984792f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ed1b019f60ffc7d367baf51dc3cfa36f536a395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed1b019f60ffc7d367baf51dc3cfa36f536a395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed1b019f60ffc7d367baf51dc3cfa36f536a395", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed1b019f60ffc7d367baf51dc3cfa36f536a395/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9975a30b5c5cab71620d94ddaec21517da9db12a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9975a30b5c5cab71620d94ddaec21517da9db12a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9975a30b5c5cab71620d94ddaec21517da9db12a"}], "stats": {"total": 178, "additions": 173, "deletions": 5}, "files": [{"sha": "48517f504499dab8821a712a4d66462c75ff49c1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed1b019f60ffc7d367baf51dc3cfa36f536a395/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed1b019f60ffc7d367baf51dc3cfa36f536a395/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4ed1b019f60ffc7d367baf51dc3cfa36f536a395", "patch": "@@ -1,3 +1,9 @@\n+2012-01-29  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51972\n+\t* trans-array.c (structure_alloc_comps): Fix assignment of\n+\tpolymorphic components (polymorphic deep copying).\n+\n 2012-01-29  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/51808"}, {"sha": "d3c81a82ab8381ab02143267d02606e1a7bd0b4c", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed1b019f60ffc7d367baf51dc3cfa36f536a395/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed1b019f60ffc7d367baf51dc3cfa36f536a395/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=4ed1b019f60ffc7d367baf51dc3cfa36f536a395", "patch": "@@ -7532,6 +7532,57 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t\t\t\t  cdecl, NULL_TREE);\n \t  dcmp = fold_convert (TREE_TYPE (comp), dcmp);\n \n+\t  if (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.allocatable)\n+\t    {\n+\t      tree ftn_tree;\n+\t      tree size;\n+\t      tree dst_data;\n+\t      tree src_data;\n+\t      tree null_data;\n+\n+\t      dst_data = gfc_class_data_get (dcmp);\n+\t      src_data = gfc_class_data_get (comp);\n+\t      size = fold_convert (size_type_node, gfc_vtable_size_get (comp));\n+\n+\t      if (CLASS_DATA (c)->attr.dimension)\n+\t\t{\n+\t\t  nelems = gfc_conv_descriptor_size (src_data,\n+\t\t\t\t\t\t     CLASS_DATA (c)->as->rank);\n+\t\t  src_data = gfc_conv_descriptor_data_get (src_data);\n+\t\t  dst_data = gfc_conv_descriptor_data_get (dst_data);\n+\t\t}\n+\t      else\n+\t\tnelems = build_int_cst (size_type_node, 1);\n+\n+\t      gfc_init_block (&tmpblock);\n+\n+\t      /* We need to use CALLOC as _copy might try to free allocatable\n+\t\t components of the destination.  */\n+\t      ftn_tree = builtin_decl_explicit (BUILT_IN_CALLOC);\n+              tmp = build_call_expr_loc (input_location, ftn_tree, 2, nelems,\n+\t\t\t\t\t size);\n+\t      gfc_add_modify (&tmpblock, dst_data,\n+\t\t\t      fold_convert (TREE_TYPE (dst_data), tmp));\n+\n+\t      tmp = gfc_copy_class_to_class (comp, dcmp, nelems);\n+\t      gfc_add_expr_to_block (&tmpblock, tmp);\n+\t      tmp = gfc_finish_block (&tmpblock);\n+\n+\t      gfc_init_block (&tmpblock);\n+\t      gfc_add_modify (&tmpblock, dst_data,\n+\t\t\t      fold_convert (TREE_TYPE (dst_data),\n+\t\t\t\t\t    null_pointer_node));\n+\t      null_data = gfc_finish_block (&tmpblock);\n+\n+\t      null_cond = fold_build2_loc (input_location, NE_EXPR,\n+\t\t\t\t\t   boolean_type_node, src_data,\n+\t\t\t\t           null_pointer_node); \t\n+\n+\t      gfc_add_expr_to_block (&fnblock, build3_v (COND_EXPR, null_cond,\n+\t\t\t\t\t\t\t tmp, null_data));\n+\t      continue;\n+\t    }\n+\n \t  if (c->attr.allocatable && !cmp_has_alloc_comps)\n \t    {\n \t      rank = c->as ? c->as->rank : 0;"}, {"sha": "f0ecfab3f25805fdf309b72485ded6c7d7bc872f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed1b019f60ffc7d367baf51dc3cfa36f536a395/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed1b019f60ffc7d367baf51dc3cfa36f536a395/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ed1b019f60ffc7d367baf51dc3cfa36f536a395", "patch": "@@ -1,3 +1,9 @@\n+2012-01-29  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51972\n+\t* gfortran.dg/class_allocate_12.f90: Enable disabled test.\n+\t* gfortran.dg/class_48.f90: New.\n+\n 2012-01-29  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/51808"}, {"sha": "c61a8e5ddb5522b4956060046449e74bf7554178", "filename": "gcc/testsuite/gfortran.dg/class_48.f90", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed1b019f60ffc7d367baf51dc3cfa36f536a395/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_48.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed1b019f60ffc7d367baf51dc3cfa36f536a395/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_48.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_48.f90?ref=4ed1b019f60ffc7d367baf51dc3cfa36f536a395", "patch": "@@ -0,0 +1,110 @@\n+! { dg-do run }\n+!\n+! PR fortran/51972\n+!\n+! Check whether DT assignment with polymorphic components works.\n+!\n+\n+subroutine test1 ()\n+  type t\n+    integer :: x\n+  end type t\n+\n+  type t2\n+    class(t), allocatable :: a\n+  end type t2\n+\n+  type(t2) :: one, two\n+\n+  one = two\n+  if (allocated (one%a)) call abort ()\n+\n+  allocate (two%a)\n+  two%a%x = 7890\n+  one = two\n+  if (one%a%x /= 7890) call abort ()\n+\n+  deallocate (two%a)\n+  one = two\n+  if (allocated (one%a)) call abort ()\n+end subroutine test1\n+\n+subroutine test2 ()\n+  type t\n+    integer, allocatable :: x(:)\n+  end type t\n+\n+  type t2\n+    class(t), allocatable :: a\n+  end type t2\n+\n+  type(t2) :: one, two\n+\n+  one = two\n+  if (allocated (one%a)) call abort ()\n+\n+  allocate (two%a)\n+  one = two\n+  if (.not.allocated (one%a)) call abort ()\n+  if (allocated (one%a%x)) call abort ()\n+\n+  allocate (two%a%x(2))\n+  two%a%x(:) = 7890\n+  one = two\n+  if (any (one%a%x /= 7890)) call abort ()\n+\n+  deallocate (two%a)\n+  one = two\n+  if (allocated (one%a)) call abort ()\n+end subroutine test2\n+\n+\n+subroutine test3 ()\n+  type t\n+    integer :: x\n+  end type t\n+\n+  type t2\n+    class(t), allocatable :: a(:)\n+  end type t2\n+\n+  type(t2) :: one, two\n+\n+  one = two\n+  if (allocated (one%a)) call abort ()\n+\n+  allocate (two%a(2), source=[t(4), t(6)])\n+  one = two\n+  if (.not.allocated (one%a)) call abort ()\n+! FIXME: Check value\n+\n+  deallocate (two%a)\n+  one = two\n+  if (allocated (one%a)) call abort ()\n+end subroutine test3\n+\n+subroutine test4 ()\n+  type t\n+    integer, allocatable :: x(:)\n+  end type t\n+\n+  type t2\n+    class(t), allocatable :: a(:)\n+  end type t2\n+\n+  type(t2) :: one, two\n+\n+  one = two\n+  if (allocated (one%a)) call abort ()\n+\n+!  allocate (two%a(2)) ! ICE: SEGFAULT\n+!  one = two\n+!  if (.not. allocated (one%a)) call abort ()\n+end subroutine test4\n+\n+\n+call test1 ()\n+call test2 ()\n+call test3 ()\n+call test4 ()\n+end"}, {"sha": "2dce84e6133b300850d79869bdcc661a36ab84e5", "filename": "gcc/testsuite/gfortran.dg/class_allocate_12.f90", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed1b019f60ffc7d367baf51dc3cfa36f536a395/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed1b019f60ffc7d367baf51dc3cfa36f536a395/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_12.f90?ref=4ed1b019f60ffc7d367baf51dc3cfa36f536a395", "patch": "@@ -4,10 +4,6 @@\n !\n ! Contributed by Damian Rouson\n !\n-! TODO: Remove the STOP line below after fixing\n-!       The remaining issue of the PR\n-!\n-\n module surrogate_module\n   type ,abstract :: surrogate\n   end type\n@@ -78,7 +74,6 @@ subroutine integrate(this)\n       class is (integrand)\n         allocate (this_half, source=this)\n     end select\n-    STOP 'SUCESS!' ! See TODO above\n   end subroutine\n end module \n "}]}