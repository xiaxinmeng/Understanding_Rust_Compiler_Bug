{"sha": "8fd5cc193d815779f1546dcd548dec611f79db99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkNWNjMTkzZDgxNTc3OWYxNTQ2ZGNkNTQ4ZGVjNjExZjc5ZGI5OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-17T13:48:18Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-17T13:48:18Z"}, "message": "compiler: use SHA1-hash for symname for long gcbits symbols\n    \n    The current scheme used by the compiler for \"gcbits\" symbols involves\n    generating a symbol name based on a 32-char encoding of the bits data.\n    This scheme works well in most cases but can generate very long symbol\n    names in rare cases. To help avoid such long symbol names, switch to a\n    different encoding scheme based on the SHA1 digest of the payload if\n    the symbol size would be too large.\n    \n    Fixes golang/go#32083.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/177598\n\nFrom-SVN: r271322", "tree": {"sha": "9c3427f65a71ef2e1e9898a94bca32ad10c9b59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c3427f65a71ef2e1e9898a94bca32ad10c9b59e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fd5cc193d815779f1546dcd548dec611f79db99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd5cc193d815779f1546dcd548dec611f79db99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd5cc193d815779f1546dcd548dec611f79db99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd5cc193d815779f1546dcd548dec611f79db99/comments", "author": null, "committer": null, "parents": [{"sha": "5719731f479e4aa29035cfa540a67245cfe15321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5719731f479e4aa29035cfa540a67245cfe15321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5719731f479e4aa29035cfa540a67245cfe15321"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "2cd7a0e94fec899ec83f1c1f177faba812b91734", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd5cc193d815779f1546dcd548dec611f79db99/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd5cc193d815779f1546dcd548dec611f79db99/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=8fd5cc193d815779f1546dcd548dec611f79db99", "patch": "@@ -1,4 +1,4 @@\n-b5ab7b419d6328f5126ba8d6795280129eaf6e79\n+54aacecc8167bfba8420cb7b245787ff80bde61b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "f6c104cef8a23b59669929c7563277ad54ca55d5", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd5cc193d815779f1546dcd548dec611f79db99/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd5cc193d815779f1546dcd548dec611f79db99/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=8fd5cc193d815779f1546dcd548dec611f79db99", "patch": "@@ -12,6 +12,7 @@\n #include \"gogo.h\"\n #include \"go-diagnostics.h\"\n #include \"go-encode-id.h\"\n+#include \"go-sha1.h\"\n #include \"operator.h\"\n #include \"expressions.h\"\n #include \"statements.h\"\n@@ -2776,22 +2777,43 @@ Ptrmask::set_from(Gogo* gogo, Type* type, int64_t ptrsize, int64_t offset)\n     }\n }\n \n-// Return a symbol name for this ptrmask.  This is used to coalesce\n-// identical ptrmasks, which are common.  The symbol name must use\n-// only characters that are valid in symbols.  It's nice if it's\n-// short.  We convert it to a string that uses only 32 characters,\n-// avoiding digits and u and U.\n-\n+// Return a symbol name for this ptrmask. This is used to coalesce identical\n+// ptrmasks, which are common. The symbol name must use only characters that are\n+// valid in symbols. It's nice if it's short. For smaller ptrmasks, we convert\n+// it to a string that uses only 32 characters, avoiding digits and u and U. For\n+// longer pointer masks, apply the same process to the SHA1 digest of the bits,\n+// so as to avoid pathologically long symbol names (see related Go issues #32083\n+// and #11583 for more on this). To avoid collisions between the two encoding\n+// schemes, use a prefix (\"X\") for the SHA form to disambiguate.\n std::string\n Ptrmask::symname() const\n {\n+  const std::vector<unsigned char>* bits(&this->bits_);\n+  std::vector<unsigned char> shabits;\n+  std::string prefix;\n+\n+  if (this->bits_.size() > 128)\n+    {\n+      // Produce a SHA1 digest of the data.\n+      Go_sha1_helper* sha1_helper = go_create_sha1_helper();\n+      sha1_helper->process_bytes(&this->bits_[0], this->bits_.size());\n+      std::string digest = sha1_helper->finish();\n+      delete sha1_helper;\n+\n+      // Redirect the bits vector to the digest, and update the prefix.\n+      prefix = \"X\";\n+      for (char c : digest)\n+        shabits.push_back((unsigned char) c);\n+      bits = &shabits;\n+    }\n+\n   const char chars[33] = \"abcdefghijklmnopqrstvwxyzABCDEFG\";\n   go_assert(chars[32] == '\\0');\n-  std::string ret;\n+  std::string ret(prefix);\n   unsigned int b = 0;\n   int remaining = 0;\n-  for (std::vector<unsigned char>::const_iterator p = this->bits_.begin();\n-       p != this->bits_.end();\n+  for (std::vector<unsigned char>::const_iterator p = bits->begin();\n+       p != bits->end();\n        ++p)\n     {\n       b |= *p << remaining;"}]}