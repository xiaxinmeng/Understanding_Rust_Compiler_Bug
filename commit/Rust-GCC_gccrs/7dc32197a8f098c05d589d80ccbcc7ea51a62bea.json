{"sha": "7dc32197a8f098c05d589d80ccbcc7ea51a62bea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjMzIxOTdhOGYwOThjMDVkNTg5ZDgwY2NiY2M3ZWE1MWE2MmJlYQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2006-02-09T12:38:35Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2006-02-09T12:38:35Z"}, "message": "re PR tree-optimization/26180 (wrong code due to VRP and unsigned multiplies with wraps)\n\n\n\tPR 26180\n\t* tree-vrp.c (vrp_int_const_binop): Detect overflow when\n\tmultiplying unsigned values.\n\tTidy comments.\n\ntestsuite\n\n\tPR 26180\n\t* gcc.dg/tree-ssa/pr26180.c: New test.\n\nFrom-SVN: r110794", "tree": {"sha": "33ef846a4e5a0e2ffd2f172f144a0e07e597bf8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33ef846a4e5a0e2ffd2f172f144a0e07e597bf8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc32197a8f098c05d589d80ccbcc7ea51a62bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc32197a8f098c05d589d80ccbcc7ea51a62bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc32197a8f098c05d589d80ccbcc7ea51a62bea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc32197a8f098c05d589d80ccbcc7ea51a62bea/comments", "author": null, "committer": null, "parents": [{"sha": "e10fbf96398ce612c334754e0614c998e3ec3335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10fbf96398ce612c334754e0614c998e3ec3335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10fbf96398ce612c334754e0614c998e3ec3335"}], "stats": {"total": 69, "additions": 63, "deletions": 6}, "files": [{"sha": "ee54252a2a4e19200bff98a1e91a94d3b9b30431", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc32197a8f098c05d589d80ccbcc7ea51a62bea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc32197a8f098c05d589d80ccbcc7ea51a62bea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7dc32197a8f098c05d589d80ccbcc7ea51a62bea", "patch": "@@ -1,3 +1,10 @@\n+2006-02-09  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 26180\n+\t* tree-vrp.c (vrp_int_const_binop): Detect overflow when\n+\tmultiplying unsigned values.\n+\tTidy comments.\n+\n 2006-02-09  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (tls_call_delay): Fix oversight."}, {"sha": "e13068379a9d9305ef975b59f40764fab77b5499", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc32197a8f098c05d589d80ccbcc7ea51a62bea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc32197a8f098c05d589d80ccbcc7ea51a62bea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7dc32197a8f098c05d589d80ccbcc7ea51a62bea", "patch": "@@ -1,3 +1,8 @@\n+2006-02-09  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 26180\n+\t* gcc.dg/tree-ssa/pr26180.c: New test.\n+\n 2006-02-08  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/pr21417.c: New test."}, {"sha": "730115b686b89295fc6ceadf64f3c8a947699680", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr26180.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc32197a8f098c05d589d80ccbcc7ea51a62bea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26180.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc32197a8f098c05d589d80ccbcc7ea51a62bea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26180.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26180.c?ref=7dc32197a8f098c05d589d80ccbcc7ea51a62bea", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+void abort(void);\n+int bar(int x, int y)\n+{\n+    int x1, y1;\n+    int x2, y2;\n+    unsigned int x3, y3, w;\n+    int z = 1;\n+\n+    x1 = (x < (1 << 30));\n+    y1 = (y < (1 << 30));\n+    if (x1)\n+    if (y1) {\n+        x2 = ((x > 0)? (x): -(x));\n+        y2 = ((y > 0)? (y): -(y));\n+\n+        x3 = x2;\n+        y3 = y2;\n+        w = x3 * y3;\n+\n+        if (w >= (1 << 30)) {\n+          z = 1;\n+        } else    {\n+          z = -1;\n+        }\n+    }\n+\n+        return z;\n+}\n+\n+\n+int main()\n+{\n+  int x, y, z;\n+  x = 536870912;  /* 2^29 */\n+  y = 2;\n+  z = bar(x, y);\n+  if (z != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "8734f514e5e6565d744d20442a8c0344ee5cc5f0", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc32197a8f098c05d589d80ccbcc7ea51a62bea/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc32197a8f098c05d589d80ccbcc7ea51a62bea/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=7dc32197a8f098c05d589d80ccbcc7ea51a62bea", "patch": "@@ -1191,22 +1191,24 @@ vrp_int_const_binop (enum tree_code code, tree val1, tree val2)\n     {\n       int checkz = compare_values (res, val1);\n \n-      /* Ensure that res = val1 + val2 >= val1\n+      /* Ensure that res = val1 [+*] val2 >= val1\n          or that res = val1 - val2 <= val1.  */\n-      if ((code == PLUS_EXPR && !(checkz == 1 || checkz == 0))\n-          || (code == MINUS_EXPR && !(checkz == 0 || checkz == -1)))\n+      if (((code == PLUS_EXPR || code == MULT_EXPR)\n+\t   && !(checkz == 1 || checkz == 0))\n+          || (code == MINUS_EXPR\n+\t      && !(checkz == 0 || checkz == -1)))\n \t{\n \t  res = copy_node (res);\n \t  TREE_OVERFLOW (res) = 1;\n \t}\n     }\n-  /* If the operation overflowed but neither VAL1 nor VAL2 are\n-     overflown, return -INF or +INF depending on the operation\n-     and the combination of signs of the operands.  */\n   else if (TREE_OVERFLOW (res)\n \t   && !TREE_OVERFLOW (val1)\n \t   && !TREE_OVERFLOW (val2))\n     {\n+      /* If the operation overflowed but neither VAL1 nor VAL2 are\n+\t overflown, return -INF or +INF depending on the operation\n+\t and the combination of signs of the operands.  */\n       int sgn1 = tree_int_cst_sgn (val1);\n       int sgn2 = tree_int_cst_sgn (val2);\n "}]}