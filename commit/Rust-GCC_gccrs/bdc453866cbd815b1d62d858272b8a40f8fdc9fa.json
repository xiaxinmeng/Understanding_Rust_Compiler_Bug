{"sha": "bdc453866cbd815b1d62d858272b8a40f8fdc9fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRjNDUzODY2Y2JkODE1YjFkNjJkODU4MjcyYjhhNDBmOGZkYzlmYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-05T13:06:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-05T13:06:07Z"}, "message": "double-int.h (double_int_sub): Declare.\n\n2010-07-05  Richard Guenther  <rguenther@suse.de>\n\n\t* double-int.h (double_int_sub): Declare.\n\t* double-int.c (double_int_sub): New function.\n\t* dwarf2out.c (field_byte_offset): Use it.\n\t* fixed-value.c (do_fixed_add): Likewise.\n\t(do_fixed_multiply): Likewise.\n\t(do_fixed_divide): Likewise.\n\t* tree-predcom.c (add_ref_to_chain): Likewise.\n\t(determine_roots_comp): Likewise.\n\t* tree-ssa-loop-niter.c (derive_constant_upper_bound_ops): Likewise.\n\nFrom-SVN: r161835", "tree": {"sha": "04c9b9fa1818c750489682948c3f7dda525bc7e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04c9b9fa1818c750489682948c3f7dda525bc7e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdc453866cbd815b1d62d858272b8a40f8fdc9fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc453866cbd815b1d62d858272b8a40f8fdc9fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc453866cbd815b1d62d858272b8a40f8fdc9fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/comments", "author": null, "committer": null, "parents": [{"sha": "989ea525bec01e16c29b69bf5194310c551d9c34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/989ea525bec01e16c29b69bf5194310c551d9c34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/989ea525bec01e16c29b69bf5194310c551d9c34"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "0bfe514238d0cf5f02097bfc72418c5f49d6847c", "filename": "gcc/double-int.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=bdc453866cbd815b1d62d858272b8a40f8fdc9fa", "patch": "@@ -792,6 +792,17 @@ double_int_add (double_int a, double_int b)\n   return ret;\n }\n \n+/* Returns A - B.  */\n+\n+double_int\n+double_int_sub (double_int a, double_int b)\n+{\n+  double_int ret;\n+  neg_double (b.low, b.high, &b.low, &b.high);\n+  add_double (a.low, a.high, b.low, b.high, &ret.low, &ret.high);\n+  return ret;\n+}\n+\n /* Returns -A.  */\n \n double_int"}, {"sha": "1fa9d8818a7d9d9de49aa29f113f884a585389cd", "filename": "gcc/double-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=bdc453866cbd815b1d62d858272b8a40f8fdc9fa", "patch": "@@ -133,6 +133,7 @@ double_int_fits_in_uhwi_p (double_int cst)\n \n double_int double_int_mul (double_int, double_int);\n double_int double_int_add (double_int, double_int);\n+double_int double_int_sub (double_int, double_int);\n double_int double_int_neg (double_int);\n \n /* You must ensure that double_int_ext is called on the operands"}, {"sha": "55fef55ed3f33007147a2880ce54a4c717d314e0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=bdc453866cbd815b1d62d858272b8a40f8fdc9fa", "patch": "@@ -15745,7 +15745,7 @@ field_byte_offset (const_tree decl)\n \t where the lowest addressed bit of the containing object must\n \t be.  */\n       object_offset_in_bits\n-\t= double_int_add (deepest_bitpos, double_int_neg (type_size_in_bits));\n+\t= double_int_sub (deepest_bitpos, type_size_in_bits);\n \n       /* Round up to type_align by default.  This works best for\n \t bitfields.  */\n@@ -15755,8 +15755,7 @@ field_byte_offset (const_tree decl)\n       if (double_int_ucmp (object_offset_in_bits, bitpos_int) > 0)\n \t{\n \t  object_offset_in_bits\n-\t    = double_int_add (deepest_bitpos,\n-\t\t\t      double_int_neg (type_size_in_bits));\n+\t    = double_int_sub (deepest_bitpos, type_size_in_bits);\n \n \t  /* Round up to decl_align instead.  */\n \t  object_offset_in_bits"}, {"sha": "50dc14ed59d18250b50001be91925ff5892e13db", "filename": "gcc/fixed-value.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Ffixed-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Ffixed-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.c?ref=bdc453866cbd815b1d62d858272b8a40f8fdc9fa", "patch": "@@ -361,7 +361,7 @@ do_fixed_add (FIXED_VALUE_TYPE *f, const FIXED_VALUE_TYPE *a,\n \t\t  double_int one;\n \t\t  one.low = 1;\n \t\t  one.high = 0;\n-\t\t  f->data = double_int_add (f->data, double_int_neg (one));\n+\t\t  f->data = double_int_sub (f->data, one);\n \t\t}\n \t    }\n \t  else\n@@ -443,12 +443,12 @@ do_fixed_multiply (FIXED_VALUE_TYPE *f, const FIXED_VALUE_TYPE *a,\n       temp1.high = 0;\n       r = double_int_add (r, temp1);\n \n-      /* We need to add neg(b) to r, if a < 0.  */\n+      /* We need to subtract b from r, if a < 0.  */\n       if (!unsigned_p && a->data.high < 0)\n-\tr = double_int_add (r, double_int_neg (b->data));\n-      /* We need to add neg(a) to r, if b < 0.  */\n+\tr = double_int_sub (r, b->data);\n+      /* We need to subtract a from r, if b < 0.  */\n       if (!unsigned_p && b->data.high < 0)\n-\tr = double_int_add (r, double_int_neg (a->data));\n+\tr = double_int_sub (r, a->data);\n \n       /* Shift right the result by FBIT.  */\n       if (GET_MODE_FBIT (f->mode) == 2 * HOST_BITS_PER_WIDE_INT)\n@@ -588,7 +588,7 @@ do_fixed_divide (FIXED_VALUE_TYPE *f, const FIXED_VALUE_TYPE *a,\n \t\t\t &quo_s.low, &quo_s.high, 0);\n \n \t  /* Try to calculate (mod - pos_b).  */\n-\t  temp = double_int_add (mod, double_int_neg (pos_b));\n+\t  temp = double_int_sub (mod, pos_b);\n \n \t  if (leftmost_mod == 1 || double_int_cmp (mod, pos_b, 1) != -1)\n \t    {"}, {"sha": "49683d5093bad9f0f29bbe6494e63140f72a96bc", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=bdc453866cbd815b1d62d858272b8a40f8fdc9fa", "patch": "@@ -925,7 +925,7 @@ add_ref_to_chain (chain_p chain, dref ref)\n   double_int dist;\n \n   gcc_assert (double_int_scmp (root->offset, ref->offset) <= 0);\n-  dist = double_int_add (ref->offset, double_int_neg (root->offset));\n+  dist = double_int_sub (ref->offset, root->offset);\n   if (double_int_ucmp (uhwi_to_double_int (MAX_DISTANCE), dist) <= 0)\n     {\n       free (ref);\n@@ -1199,8 +1199,7 @@ determine_roots_comp (struct loop *loop,\n     {\n       if (!chain || !DR_IS_READ (a->ref)\n \t  || double_int_ucmp (uhwi_to_double_int (MAX_DISTANCE),\n-\t\t\t      double_int_add (a->offset,\n-\t\t\t\t\t      double_int_neg (last_ofs))) <= 0)\n+\t\t\t      double_int_sub (a->offset, last_ofs)) <= 0)\n \t{\n \t  if (nontrivial_chain_p (chain))\n \t    {"}, {"sha": "b343b60d35f61cb169ad3835f5cc09192767d64b", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc453866cbd815b1d62d858272b8a40f8fdc9fa/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=bdc453866cbd815b1d62d858272b8a40f8fdc9fa", "patch": "@@ -2397,7 +2397,7 @@ derive_constant_upper_bound_ops (tree type, tree op0,\n \t  /* OP0 + CST.  We need to check that\n \t     BND <= MAX (type) - CST.  */\n \n-\t  mmax = double_int_add (max, double_int_neg (cst));\n+\t  mmax = double_int_sub (max, cst);\n \t  if (double_int_ucmp (bnd, mmax) > 0)\n \t    return max;\n \n@@ -2429,7 +2429,7 @@ derive_constant_upper_bound_ops (tree type, tree op0,\n \t\treturn max;\n \t    }\n \n-\t  bnd = double_int_add (bnd, double_int_neg (cst));\n+\t  bnd = double_int_sub (bnd, cst);\n \t}\n \n       return bnd;"}]}