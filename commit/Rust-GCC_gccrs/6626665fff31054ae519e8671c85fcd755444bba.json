{"sha": "6626665fff31054ae519e8671c85fcd755444bba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYyNjY2NWZmZjMxMDU0YWU1MTllODY3MWM4NWZjZDc1NTQ0NGJiYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-11-21T01:28:11Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-11-21T01:28:11Z"}, "message": "Reword comments that mention ENTRY_BLOCK_PTR and EXIT_BLOCK_PTR macros\n\ngcc/\n2013-11-20  David Malcolm  <dmalcolm@redhat.com>\n\n\t* cfg.c (dump_edge_info): Remove redundant comment.\n\t* cfgcleanup.c (outgoing_edges_match): Reword reference to\n\tEXIT_BLOCK_PTR in comment.\n\t(try_optimize_cfg): Likewise.\n\t* cfgrtl.c (last_bb_in_partition): Likewise.\n\t* cgraph.c (cgraph_node_cannot_return): Likewise.\n\t* function.c (thread_prologue_and_epilogue_insns): Likewise.\n\t* graphite-scop-detection.c (scopdet_basic_block_info): Likewise.\n\t* ipa-split.c (consider_split): Likewise.\n\t* profile.c (find_spanning_tree): Likewise.\n\t* sched-int.h (common_sched_info_def.add_block): Likewise.\n\t* dominance.c (calc_dfs_tree_nonrec): Reword references in\n\tcomments to now removed ENTRY_BLOCK_PTR and EXIT_BLOCK_PTR macros.\n\t* tree-cfgcleanup.c (cleanup_control_flow_bb): Reword references\n\tin comments to now removed ENTRY_BLOCK_PTR macro.\n\t(tree_forwarder_block_p): Reword reference in comment to\n\tEXIT_BLOCK_PTR.\n\t* tree-inline.c (copy_cfg_body): Reword references in comments to\n\tnow removed ENTRY_BLOCK_PTR macro.\n\t* tree-ssa-propagate.c (ssa_prop_init): Likewise.\n\t* tree-scalar-evolution.h ( block_before_loop): Likewise.  Add\n\ta comma to the comment to clarify the meaning.\n\nFrom-SVN: r205182", "tree": {"sha": "c7ef06a8a97a644d73b04a16ac91325dcebcb109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ef06a8a97a644d73b04a16ac91325dcebcb109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6626665fff31054ae519e8671c85fcd755444bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6626665fff31054ae519e8671c85fcd755444bba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6626665fff31054ae519e8671c85fcd755444bba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6626665fff31054ae519e8671c85fcd755444bba/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21092e8a28e7668b47a123cb3a1eec4c90ed8527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21092e8a28e7668b47a123cb3a1eec4c90ed8527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21092e8a28e7668b47a123cb3a1eec4c90ed8527"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "98ac033b5903aad1f6aaec9e21ca321d819b9127", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -1,3 +1,28 @@\n+2013-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cfg.c (dump_edge_info): Remove redundant comment.\n+\t* cfgcleanup.c (outgoing_edges_match): Reword reference to\n+\tEXIT_BLOCK_PTR in comment.\n+\t(try_optimize_cfg): Likewise.\n+\t* cfgrtl.c (last_bb_in_partition): Likewise.\n+\t* cgraph.c (cgraph_node_cannot_return): Likewise.\n+\t* function.c (thread_prologue_and_epilogue_insns): Likewise.\n+\t* graphite-scop-detection.c (scopdet_basic_block_info): Likewise.\n+\t* ipa-split.c (consider_split): Likewise.\n+\t* profile.c (find_spanning_tree): Likewise.\n+\t* sched-int.h (common_sched_info_def.add_block): Likewise.\n+\t* dominance.c (calc_dfs_tree_nonrec): Reword references in\n+\tcomments to now removed ENTRY_BLOCK_PTR and EXIT_BLOCK_PTR macros.\n+\t* tree-cfgcleanup.c (cleanup_control_flow_bb): Reword references\n+\tin comments to now removed ENTRY_BLOCK_PTR macro.\n+\t(tree_forwarder_block_p): Reword reference in comment to\n+\tEXIT_BLOCK_PTR.\n+\t* tree-inline.c (copy_cfg_body): Reword references in comments to\n+\tnow removed ENTRY_BLOCK_PTR macro.\n+\t* tree-ssa-propagate.c (ssa_prop_init): Likewise.\n+\t* tree-scalar-evolution.h ( block_before_loop): Likewise.  Add\n+\ta comma to the comment to clarify the meaning.\n+\n 2013-11-20  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimplify.h (gimplify_hasher : typed_free_remove, struct gimplify_ctx):"}, {"sha": "6bceca5ed26f14deda54d17ad82ed4f4b7dfa792", "filename": "gcc/cfg.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -473,8 +473,6 @@ dump_edge_info (FILE *file, edge e, int flags, int do_succ)\n       && (flags & TDF_SLIM) == 0)\n     do_details = true;\n \n-  /* ENTRY_BLOCK_PTR/EXIT_BLOCK_PTR depend on cfun.\n-     Compare against ENTRY_BLOCK/EXIT_BLOCK to avoid that dependency.  */\n   if (side->index == ENTRY_BLOCK)\n     fputs (\" ENTRY\", file);\n   else if (side->index == EXIT_BLOCK)"}, {"sha": "dbaee9667ab36928de88308d5cd3177184c32a44", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -1535,7 +1535,7 @@ outgoing_edges_match (int mode, basic_block bb1, basic_block bb2)\n   edge e1, e2;\n   edge_iterator ei;\n \n-  /* If we performed shrink-wrapping, edges to the EXIT_BLOCK_PTR can\n+  /* If we performed shrink-wrapping, edges to the exit block can\n      only be distinguished for JUMP_INSNs.  The two paths may differ in\n      whether they went through the prologue.  Sibcalls are fine, we know\n      that we either didn't need or inserted an epilogue before them.  */\n@@ -2684,7 +2684,7 @@ try_optimize_cfg (int mode)\n \t\t    }\n \t\t  delete_basic_block (b);\n \t\t  changed = true;\n-\t\t  /* Avoid trying to remove ENTRY_BLOCK_PTR.  */\n+\t\t  /* Avoid trying to remove the exit block.  */\n \t\t  b = (c == ENTRY_BLOCK_PTR_FOR_FN (cfun) ? c->next_bb : c);\n \t\t  continue;\n \t\t}"}, {"sha": "63f44afbbae1eb15c41ba6970e328881005fd2eb", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -1795,7 +1795,7 @@ last_bb_in_partition (basic_block start_bb)\n       if (BB_PARTITION (start_bb) != BB_PARTITION (bb->next_bb))\n         return bb;\n     }\n-  /* Return bb before EXIT_BLOCK_PTR.  */\n+  /* Return bb before the exit block.  */\n   return bb->prev_bb;\n }\n "}, {"sha": "009a165cdfae57308cbc30f5c42b19363dfca9de", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -2334,7 +2334,7 @@ cgraph_node_cannot_return (struct cgraph_node *node)\n    and thus it is safe to ignore its side effects for IPA analysis\n    when computing side effects of the caller.\n    FIXME: We could actually mark all edges that have no reaching\n-   patch to EXIT_BLOCK_PTR or throw to get better results.  */\n+   patch to the exit block or throw to get better results.  */\n bool\n cgraph_edge_cannot_lead_to_return (struct cgraph_edge *e)\n {"}, {"sha": "5ece3f68b94eeb152ad55fd7c2b554d2e8e466d1", "filename": "gcc/dominance.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -227,7 +227,7 @@ calc_dfs_tree_nonrec (struct dom_info *di, basic_block bb, bool reverse)\n   edge_iterator *stack;\n   edge_iterator ei, einext;\n   int sp;\n-  /* Start block (ENTRY_BLOCK_PTR for forward problem, EXIT_BLOCK for backward\n+  /* Start block (the entry block for forward problem, exit block for backward\n      problem).  */\n   basic_block en_block;\n   /* Ending block.  */"}, {"sha": "5b33c46559b103925fa47fbbe920b7bfd57acaf1", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -6349,7 +6349,7 @@ thread_prologue_and_epilogue_insns (void)\n \t{\n \t  unsigned i, last;\n \n-\t  /* convert_jumps_to_returns may add to EXIT_BLOCK_PTR->preds\n+\t  /* convert_jumps_to_returns may add to preds of the exit block\n \t     (but won't remove).  Stop at end of current preds.  */\n \t  last = EDGE_COUNT (EXIT_BLOCK_PTR_FOR_FN (cfun)->preds);\n \t  for (i = 0; i < last; i++)"}, {"sha": "15c4c0f99ea78dd00fc4b79b519a91b3137ad629", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -518,7 +518,7 @@ scopdet_basic_block_info (basic_block bb, loop_p outermost_loop,\n \t    result.next = exit_e->dest;\n \n \t    /* If we do not dominate result.next, remove it.  It's either\n-\t       the EXIT_BLOCK_PTR, or another bb dominates it and will\n+\t       the exit block, or another bb dominates it and will\n \t       call the scop detection for this bb.  */\n \t    if (!dominated_by_p (CDI_DOMINATORS, result.next, bb))\n \t      result.next = NULL;"}, {"sha": "2e8a062da6b59ffa3bf8fe53d38aa45bf8895558", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -635,7 +635,7 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n    <retval> = tmp_var;\n    return <retval>\n    but return_bb can not be more complex than this.\n-   If nothing is found, return EXIT_BLOCK_PTR.\n+   If nothing is found, return the exit block.\n \n    When there are multiple RETURN statement, chose one with return value,\n    since that one is more likely shared by multiple code paths."}, {"sha": "1d0e78ab4dc779b7c192122ed55837be50c84fc4", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -1392,7 +1392,7 @@ find_spanning_tree (struct edge_list *el)\n   union_groups (EXIT_BLOCK_PTR_FOR_FN (cfun), ENTRY_BLOCK_PTR_FOR_FN (cfun));\n \n   /* First add all abnormal edges to the tree unless they form a cycle. Also\n-     add all edges to EXIT_BLOCK_PTR to avoid inserting profiling code behind\n+     add all edges to the exit block to avoid inserting profiling code behind\n      setting return value from function.  */\n   for (i = 0; i < num_edges; i++)\n     {"}, {"sha": "84b5cb58c960e88bc758e1b9f975c793aab7fe1a", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -70,7 +70,7 @@ struct common_sched_info_def\n   /* Called to notify frontend, that new basic block is being added.\n      The first parameter - new basic block.\n      The second parameter - block, after which new basic block is being added,\n-     or EXIT_BLOCK_PTR, if recovery block is being added,\n+     or the exit block, if recovery block is being added,\n      or NULL, if standalone block is being added.  */\n   void (*add_block) (basic_block, basic_block);\n "}, {"sha": "5ae70abc29e92cd6db65b7ea31b06a705e8c2759", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -237,7 +237,7 @@ cleanup_control_flow_bb (basic_block bb)\n    the start of the successor block.\n \n    As a precondition, we require that BB be not equal to\n-   ENTRY_BLOCK_PTR.  */\n+   the entry block.  */\n \n static bool\n tree_forwarder_block_p (basic_block bb, bool phi_wanted)\n@@ -250,7 +250,7 @@ tree_forwarder_block_p (basic_block bb, bool phi_wanted)\n       /* If PHI_WANTED is false, BB must not have any PHI nodes.\n \t Otherwise, BB must have PHI nodes.  */\n       || gimple_seq_empty_p (phi_nodes (bb)) == phi_wanted\n-      /* BB may not be a predecessor of EXIT_BLOCK_PTR.  */\n+      /* BB may not be a predecessor of the exit block.  */\n       || single_succ (bb) == EXIT_BLOCK_PTR_FOR_FN (cfun)\n       /* Nor should this be an infinite loop.  */\n       || single_succ (bb) == bb"}, {"sha": "224788222f6f0f97c1c8e7c879e8c12c70d2a7ef", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -2433,9 +2433,10 @@ copy_cfg_body (copy_body_data * id, gcov_type count, int frequency_scale,\n   /* Register specific tree functions.  */\n   gimple_register_cfg_hooks ();\n \n-  /* If we are inlining just region of the function, make sure to connect new entry\n-     to ENTRY_BLOCK_PTR.  Since new entry can be part of loop, we must compute\n-     frequency and probability of ENTRY_BLOCK_PTR based on the frequencies and\n+  /* If we are inlining just region of the function, make sure to connect\n+     new entry to ENTRY_BLOCK_PTR_FOR_FN (cfun).  Since new entry can be\n+     part of loop, we must compute frequency and probability of\n+     ENTRY_BLOCK_PTR_FOR_FN (cfun) based on the frequencies and\n      probabilities of edges incoming from nonduplicated region.  */\n   if (new_entry)\n     {"}, {"sha": "fc87251cabeaac21823ecdd992a635404bd8e82f", "filename": "gcc/tree-scalar-evolution.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Ftree-scalar-evolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Ftree-scalar-evolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.h?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -40,8 +40,8 @@ extern bool simple_iv (struct loop *, struct loop *, tree, struct affine_iv_d *,\n \t\t       bool);\n extern tree compute_overall_effect_of_inner_loop (struct loop *, tree);\n \n-/* Returns the basic block preceding LOOP or ENTRY_BLOCK_PTR when the\n-   loop is function's body.  */\n+/* Returns the basic block preceding LOOP, or the CFG entry block when\n+   the loop is function's body.  */\n \n static inline basic_block\n block_before_loop (loop_p loop)"}, {"sha": "b45ff4755c2862fae8a61701e22bb1e3e1375a68", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6626665fff31054ae519e8671c85fcd755444bba/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=6626665fff31054ae519e8671c85fcd755444bba", "patch": "@@ -503,7 +503,7 @@ ssa_prop_init (void)\n   cfg_blocks.safe_grow_cleared (20);\n \n   /* Initially assume that every edge in the CFG is not executable.\n-     (including the edges coming out of ENTRY_BLOCK_PTR).  */\n+     (including the edges coming out of the entry block).  */\n   FOR_ALL_BB (bb)\n     {\n       gimple_stmt_iterator si;"}]}