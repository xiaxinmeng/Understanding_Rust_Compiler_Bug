{"sha": "a10df8a219b6aabcb9af73f1134021083d511538", "node_id": "C_kwDOANBUbNoAKGExMGRmOGEyMTliNmFhYmNiOWFmNzNmMTEzNDAyMTA4M2Q1MTE1Mzg", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-02-06T17:46:07Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-02-14T22:55:07Z"}, "message": "gccrs: Extract query_type from TypeCheckBase to be a simple extern\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* Make-lang.in: add new dependancy\n\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::query_type): refactor\n\t* typecheck/rust-hir-type-check-base.h: refactor\n\t* typecheck/rust-hir-type-check.h (RUST_HIR_TYPE_CHECK): refactor\n\t* typecheck/rust-type-util.cc: New file.\n\t* typecheck/rust-type-util.h: New file.", "tree": {"sha": "a2080ff9be2cd05668956b2ca22f08a69b2589a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2080ff9be2cd05668956b2ca22f08a69b2589a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a10df8a219b6aabcb9af73f1134021083d511538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10df8a219b6aabcb9af73f1134021083d511538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10df8a219b6aabcb9af73f1134021083d511538", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10df8a219b6aabcb9af73f1134021083d511538/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92d6dc8443acbd273333cab411bfd68eaca56a89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d6dc8443acbd273333cab411bfd68eaca56a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d6dc8443acbd273333cab411bfd68eaca56a89"}], "stats": {"total": 223, "additions": 148, "deletions": 75}, "files": [{"sha": "8726e8592602e6edf8e3a6538b2a5803e0b01f04", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=a10df8a219b6aabcb9af73f1134021083d511538", "patch": "@@ -133,6 +133,7 @@ GRS_OBJS = \\\n     rust/rust-hir-type-check-implitem.o \\\n     rust/rust-hir-dot-operator.o \\\n     rust/rust-hir-path-probe.o \\\n+    rust/rust-type-util.o \\\n     rust/rust-coercion.o \\\n     rust/rust-casts.o \\\n     rust/rust-unify.o \\"}, {"sha": "e302e27f4abe81e590c5170fd9d8cb5856d4a371", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=a10df8a219b6aabcb9af73f1134021083d511538", "patch": "@@ -483,78 +483,5 @@ TypeCheckBase::resolve_generic_params (\n     }\n }\n \n-bool\n-TypeCheckBase::query_type (HirId reference, TyTy::BaseType **result)\n-{\n-  if (context->query_in_progress (reference))\n-    return false;\n-\n-  if (context->lookup_type (reference, result))\n-    return true;\n-\n-  context->insert_query (reference);\n-\n-  HIR::Item *item = mappings->lookup_hir_item (reference);\n-  if (item != nullptr)\n-    {\n-      rust_debug_loc (item->get_locus (), \"resolved item {%u} to\", reference);\n-      *result = TypeCheckItem::Resolve (*item);\n-      context->query_completed (reference);\n-      return true;\n-    }\n-\n-  HirId parent_impl_id = UNKNOWN_HIRID;\n-  HIR::ImplItem *impl_item\n-    = mappings->lookup_hir_implitem (reference, &parent_impl_id);\n-  if (impl_item != nullptr)\n-    {\n-      HIR::ImplBlock *impl_block\n-\t= mappings->lookup_hir_impl_block (parent_impl_id);\n-      rust_assert (impl_block != nullptr);\n-\n-      // found an impl item\n-      rust_debug_loc (impl_item->get_locus (), \"resolved impl-item {%u} to\",\n-\t\t      reference);\n-\n-      *result = TypeCheckItem::ResolveImplItem (*impl_block, *impl_item);\n-      context->query_completed (reference);\n-      return true;\n-    }\n-\n-  // is it an impl_type?\n-  HIR::ImplBlock *impl_block_by_type = nullptr;\n-  bool found_impl_block_type\n-    = mappings->lookup_impl_block_type (reference, &impl_block_by_type);\n-  if (found_impl_block_type)\n-    {\n-      *result = TypeCheckItem::ResolveImplBlockSelf (*impl_block_by_type);\n-      context->query_completed (reference);\n-      return true;\n-    }\n-\n-  // is it an extern item?\n-  HirId parent_extern_block_id = UNKNOWN_HIRID;\n-  HIR::ExternalItem *extern_item\n-    = mappings->lookup_hir_extern_item (reference, &parent_extern_block_id);\n-  if (extern_item != nullptr)\n-    {\n-      HIR::ExternBlock *block\n-\t= mappings->lookup_hir_extern_block (parent_extern_block_id);\n-      rust_assert (block != nullptr);\n-\n-      *result = TypeCheckTopLevelExternItem::Resolve (extern_item, *block);\n-      context->query_completed (reference);\n-      return true;\n-    }\n-\n-  // more?\n-  Location possible_locus = mappings->lookup_location (reference);\n-  rust_debug_loc (possible_locus, \"query system failed to resolve: [%u]\",\n-\t\t  reference);\n-  context->query_completed (reference);\n-\n-  return false;\n-}\n-\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "b8ff2cf6dc9784190417c00825eba49326416c13", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=a10df8a219b6aabcb9af73f1134021083d511538", "patch": "@@ -69,8 +69,6 @@ class TypeCheckBase\n     const std::vector<std::unique_ptr<HIR::GenericParam>> &generic_params,\n     std::vector<TyTy::SubstitutionParamMapping> &substitutions);\n \n-  bool query_type (HirId reference, TyTy::BaseType **result);\n-\n   Analysis::Mappings *mappings;\n   Resolver *resolver;\n   TypeCheckContext *context;"}, {"sha": "6d4b9b8a62f52244cd39a0a63f0292932cfa350f", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=a10df8a219b6aabcb9af73f1134021083d511538", "patch": "@@ -19,6 +19,7 @@\n #ifndef RUST_HIR_TYPE_CHECK\n #define RUST_HIR_TYPE_CHECK\n \n+#include \"rust-type-util.h\"\n #include \"rust-hir-full-decls.h\"\n #include \"rust-hir-map.h\"\n #include \"rust-tyty.h\""}, {"sha": "4e38826686bbfc4d630b9ce17a7e38e8b45ba0b7", "filename": "gcc/rust/typecheck/rust-type-util.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc?ref=a10df8a219b6aabcb9af73f1134021083d511538", "patch": "@@ -0,0 +1,108 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-type-util.h\"\n+#include \"rust-diagnostics.h\"\n+#include \"rust-hir-type-check.h\"\n+#include \"rust-name-resolver.h\"\n+#include \"rust-hir-visitor.h\"\n+#include \"rust-hir-map.h\"\n+#include \"rust-hir-type-check-item.h\"\n+#include \"rust-hir-type-check-implitem.h\"\n+\n+namespace Rust {\n+namespace Resolver {\n+\n+bool\n+query_type (HirId reference, TyTy::BaseType **result)\n+{\n+  Analysis::Mappings *mappings = Analysis::Mappings::get ();\n+  TypeCheckContext *context = TypeCheckContext::get ();\n+\n+  if (context->query_in_progress (reference))\n+    return false;\n+\n+  if (context->lookup_type (reference, result))\n+    return true;\n+\n+  context->insert_query (reference);\n+\n+  HIR::Item *item = mappings->lookup_hir_item (reference);\n+  if (item != nullptr)\n+    {\n+      rust_debug_loc (item->get_locus (), \"resolved item {%u} to\", reference);\n+      *result = TypeCheckItem::Resolve (*item);\n+      context->query_completed (reference);\n+      return true;\n+    }\n+\n+  HirId parent_impl_id = UNKNOWN_HIRID;\n+  HIR::ImplItem *impl_item\n+    = mappings->lookup_hir_implitem (reference, &parent_impl_id);\n+  if (impl_item != nullptr)\n+    {\n+      HIR::ImplBlock *impl_block\n+\t= mappings->lookup_hir_impl_block (parent_impl_id);\n+      rust_assert (impl_block != nullptr);\n+\n+      // found an impl item\n+      rust_debug_loc (impl_item->get_locus (), \"resolved impl-item {%u} to\",\n+\t\t      reference);\n+\n+      *result = TypeCheckItem::ResolveImplItem (*impl_block, *impl_item);\n+      context->query_completed (reference);\n+      return true;\n+    }\n+\n+  // is it an impl_type?\n+  HIR::ImplBlock *impl_block_by_type = nullptr;\n+  bool found_impl_block_type\n+    = mappings->lookup_impl_block_type (reference, &impl_block_by_type);\n+  if (found_impl_block_type)\n+    {\n+      *result = TypeCheckItem::ResolveImplBlockSelf (*impl_block_by_type);\n+      context->query_completed (reference);\n+      return true;\n+    }\n+\n+  // is it an extern item?\n+  HirId parent_extern_block_id = UNKNOWN_HIRID;\n+  HIR::ExternalItem *extern_item\n+    = mappings->lookup_hir_extern_item (reference, &parent_extern_block_id);\n+  if (extern_item != nullptr)\n+    {\n+      HIR::ExternBlock *block\n+\t= mappings->lookup_hir_extern_block (parent_extern_block_id);\n+      rust_assert (block != nullptr);\n+\n+      *result = TypeCheckTopLevelExternItem::Resolve (extern_item, *block);\n+      context->query_completed (reference);\n+      return true;\n+    }\n+\n+  // more?\n+  Location possible_locus = mappings->lookup_location (reference);\n+  rust_debug_loc (possible_locus, \"query system failed to resolve: [%u]\",\n+\t\t  reference);\n+  context->query_completed (reference);\n+\n+  return false;\n+}\n+\n+} // namespace Resolver\n+} // namespace Rust"}, {"sha": "a3f9efc003b8b83af5eb7d2fc42ba94b1c4fd180", "filename": "gcc/rust/typecheck/rust-type-util.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10df8a219b6aabcb9af73f1134021083d511538/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.h?ref=a10df8a219b6aabcb9af73f1134021083d511538", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_TYPE_UTIL\n+#define RUST_TYPE_UTIL\n+\n+#include \"rust-mapping-common.h\"\n+\n+namespace Rust {\n+\n+namespace TyTy {\n+class BaseType;\n+}\n+\n+namespace Resolver {\n+\n+extern bool\n+query_type (HirId reference, TyTy::BaseType **result);\n+\n+} // namespace Resolver\n+} // namespace Rust\n+\n+#endif // RUST_TYPE_UTIL"}]}