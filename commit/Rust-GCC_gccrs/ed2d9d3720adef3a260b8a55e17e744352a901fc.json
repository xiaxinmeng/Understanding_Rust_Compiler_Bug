{"sha": "ed2d9d3720adef3a260b8a55e17e744352a901fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQyZDlkMzcyMGFkZWYzYTI2MGI4YTU1ZTE3ZTc0NDM1MmE5MDFmYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-09-28T17:40:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-09-28T17:40:04Z"}, "message": "dumpfile.c: use prefixes other than 'note: ' for MSG_{OPTIMIZED_LOCATIONS|MISSED_OPTIMIZATION}\n\nAs noted at Cauldron, dumpfile.c currently emits \"note: \" for all kinds\nof dump message, so that (after filtering) there's no distinction between\nMSG_OPTIMIZED_LOCATIONS vs MSG_NOTE vs MSG_MISSED_OPTIMIZATION in the\ntextual output.\n\nThis patch changes dumpfile.c so that the \"note: \" varies to show\nwhich MSG_* was used, with the string prefix matching that used for\nfiltering in -fopt-info, hence e.g.\n  directive_unroll_3.f90:24:0: optimized: loop unrolled 7 times\nand:\n  pr19210-1.c:24:3: missed: missed loop optimization: niters analysis ends up with assumptions.\n\nThe patch adds \"dg-optimized\" and \"dg-missed\" directives for use\nin the testsuite for matching these (with -fopt-info on stderr; they\ndon't help for dumpfile output).\n\nThe patch also converts the various problem-reporting dump messages\nin coverage.c:get_coverage_counts to use MSG_MISSED_OPTIMIZATION\nrather than MSG_OPTIMIZED_LOCATIONS, as the docs call out \"optimized\"\nas\n  \"information when an optimization is successfully applied\",\nwhereas \"missed\" is for\n  \"information about missed optimizations\",\nand problems with profile data seem to me to fall much more into the\nlatter category than the former.  Doing so requires converting a few\ntests from using \"-fopt-info\" (which is implicitly\n\"-fopt-info-optimized-optall\") to getting the \"missed\" optimizations.\nChanging them to \"-fopt-info-missed\" added lots of noise from the\nvectorizer, so I changed these tests to use \"-fopt-info-missed-ipa\".\n\ngcc/ChangeLog:\n\t* coverage.c (get_coverage_counts): Convert problem-reporting dump\n\tmessages from MSG_OPTIMIZED_LOCATIONS to MSG_MISSED_OPTIMIZATION.\n\t* dumpfile.c (kind_as_string): New function.\n\t(dump_loc): Rather than a hardcoded prefix of \"note: \", use\n\tkind_as_string to vary the prefix based on dump_kind.\n\t(selftest::test_capture_of_dump_calls): Update for above.\n\ngcc/testsuite/ChangeLog:\n\t* c-c++-common/unroll-1.c: Update expected output from \"note\" to\n\t\"optimized\".\n\t* c-c++-common/unroll-2.c: Likewise.\n\t* c-c++-common/unroll-3.c: Likewise.\n\t* g++.dg/tree-ssa/dom-invalid.C: Update expected output from\n\tdg-message to dg-missed.  Convert param from -fopt-info to\n\t-fopt-info-missed-ipa.\n\t* g++.dg/tree-ssa/pr81408.C: Update expected output from\n\tdg-message to dg-missed.\n\t* g++.dg/vect/slp-pr56812.cc: Update expected output from\n\tdg-message to dg-optimized.\n\t* gcc.dg/pr26570.c: Update expected output from dg-message to\n\tdg-missed.  Convert param from -fopt-info to\n\t-fopt-info-missed-ipa.\n\t* gcc.dg/pr32773.c: Likewise.\n\t* gcc.dg/tree-ssa/pr19210-1.c: Update expected output from\n\tdg-message to dg-missed.\n\t* gcc.dg/unroll-2.c: Update expected output from dg-message to\n\tdg-optimized.\n\t* gcc.dg/vect/nodump-vect-opt-info-1.c: Likewise.  Convert param\n\tfrom -fopt-info to -fopt-info-vec.\n\t* gfortran.dg/directive_unroll_1.f90: Update expected output from\n\t\"note\" to \"optimized\".\n\t* gfortran.dg/directive_unroll_2.f90: Likewise.\n\t* gfortran.dg/directive_unroll_3.f90: Likewise.\n\t* gnat.dg/unroll4.adb: Likewise.\n\t* lib/gcc-dg.exp (dg-optimized): New procedure.\n\t(dg-missed): New procedure.\n\nFrom-SVN: r264697", "tree": {"sha": "53b1bfbea366b01dd4b7d2ab8e3c405d9b2c7509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53b1bfbea366b01dd4b7d2ab8e3c405d9b2c7509"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed2d9d3720adef3a260b8a55e17e744352a901fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2d9d3720adef3a260b8a55e17e744352a901fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2d9d3720adef3a260b8a55e17e744352a901fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2d9d3720adef3a260b8a55e17e744352a901fc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5718d9d95fd9457c9f6cf49526ef52f974d9419c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5718d9d95fd9457c9f6cf49526ef52f974d9419c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5718d9d95fd9457c9f6cf49526ef52f974d9419c"}], "stats": {"total": 189, "additions": 136, "deletions": 53}, "files": [{"sha": "856a72eae10c380e81541fe549d0276ab74c5490", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -1,3 +1,12 @@\n+2018-09-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* coverage.c (get_coverage_counts): Convert problem-reporting dump\n+\tmessages from MSG_OPTIMIZED_LOCATIONS to MSG_MISSED_OPTIMIZATION.\n+\t* dumpfile.c (kind_as_string): New function.\n+\t(dump_loc): Rather than a hardcoded prefix of \"note: \", use\n+\tkind_as_string to vary the prefix based on dump_kind.\n+\t(selftest::test_capture_of_dump_calls): Update for above.\n+\n 2018-09-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (SSE_REGNO): Fix check for FIRST_REX_SSE_REG."}, {"sha": "701460cf929fabe47283b817f0e02de535af02e1", "filename": "gcc/coverage.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -313,7 +313,7 @@ get_coverage_counts (unsigned counter, unsigned cfg_checksum,\n \t    {\n \t      dump_user_location_t loc\n \t\t= dump_user_location_t::from_location_t (input_location);\n-\t      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n \t\t\t       \"file %s not found, %s\\n\", da_file_name,\n \t\t\t       (flag_guess_branch_prob\n \t\t\t\t? \"execution counts estimated\"\n@@ -359,22 +359,22 @@ get_coverage_counts (unsigned counter, unsigned cfg_checksum,\n \t{\n \t  dump_user_location_t loc\n \t    = dump_user_location_t::from_location_t (input_location);\n-          dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+          dump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n                            \"use -Wno-error=coverage-mismatch to tolerate \"\n                            \"the mismatch but performance may drop if the \"\n                            \"function is hot\\n\");\n \t  \n \t  if (!seen_error ()\n \t      && !warned++)\n \t    {\n-\t      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n                                \"coverage mismatch ignored\\n\");\n-\t      dump_printf (MSG_OPTIMIZED_LOCATIONS,\n+\t      dump_printf (MSG_MISSED_OPTIMIZATION,\n                            flag_guess_branch_prob\n                            ? G_(\"execution counts estimated\\n\")\n                            : G_(\"execution counts assumed to be zero\\n\"));\n \t      if (!flag_guess_branch_prob)\n-\t\tdump_printf (MSG_OPTIMIZED_LOCATIONS,\n+\t\tdump_printf (MSG_MISSED_OPTIMIZATION,\n                              \"this can result in poorly optimized code\\n\");\n \t    }\n \t}"}, {"sha": "d430ea3ff9c28647fdcb244e6f0ef3cc3a4b1a9e", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -437,6 +437,27 @@ dump_user_location_t::from_function_decl (tree fndecl)\n \t\t\t       DECL_SOURCE_LOCATION (fndecl));\n }\n \n+/* Extract the MSG_* component from DUMP_KIND and return a string for use\n+   as a prefix to dump messages.\n+   These match the strings in optinfo_verbosity_options and thus the\n+   \"OPTIONS\" within \"-fopt-info-OPTIONS\".  */\n+\n+static const char *\n+kind_as_string (dump_flags_t dump_kind)\n+{\n+  switch (dump_kind & MSG_ALL)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case MSG_OPTIMIZED_LOCATIONS:\n+      return \"optimized\";\n+    case MSG_MISSED_OPTIMIZATION:\n+      return \"missed\";\n+    case MSG_NOTE:\n+      return \"note\";\n+    }\n+}\n+\n /* Print source location on DFILE if enabled.  */\n \n static void\n@@ -445,13 +466,14 @@ dump_loc (dump_flags_t dump_kind, FILE *dfile, source_location loc)\n   if (dump_kind)\n     {\n       if (LOCATION_LOCUS (loc) > BUILTINS_LOCATION)\n-        fprintf (dfile, \"%s:%d:%d: note: \", LOCATION_FILE (loc),\n+        fprintf (dfile, \"%s:%d:%d: \", LOCATION_FILE (loc),\n                  LOCATION_LINE (loc), LOCATION_COLUMN (loc));\n       else if (current_function_decl)\n-        fprintf (dfile, \"%s:%d:%d: note: \",\n+        fprintf (dfile, \"%s:%d:%d: \",\n                  DECL_SOURCE_FILE (current_function_decl),\n                  DECL_SOURCE_LINE (current_function_decl),\n                  DECL_SOURCE_COLUMN (current_function_decl));\n+      fprintf (dfile, \"%s: \", kind_as_string (dump_kind));\n       /* Indentation based on scope depth.  */\n       fprintf (dfile, \"%*s\", get_dump_scope_depth (), \"\");\n     }\n@@ -465,13 +487,14 @@ dump_loc (dump_flags_t dump_kind, pretty_printer *pp, source_location loc)\n   if (dump_kind)\n     {\n       if (LOCATION_LOCUS (loc) > BUILTINS_LOCATION)\n-\tpp_printf (pp, \"%s:%d:%d: note: \", LOCATION_FILE (loc),\n+\tpp_printf (pp, \"%s:%d:%d: \", LOCATION_FILE (loc),\n \t\t   LOCATION_LINE (loc), LOCATION_COLUMN (loc));\n       else if (current_function_decl)\n-\tpp_printf (pp, \"%s:%d:%d: note: \",\n+\tpp_printf (pp, \"%s:%d:%d: \",\n \t\t   DECL_SOURCE_FILE (current_function_decl),\n \t\t   DECL_SOURCE_LINE (current_function_decl),\n \t\t   DECL_SOURCE_COLUMN (current_function_decl));\n+      pp_printf (pp, \"%s: \", kind_as_string (dump_kind));\n       /* Indentation based on scope depth.  */\n       for (unsigned i = 0; i < get_dump_scope_depth (); i++)\n \tpp_character (pp, ' ');\n@@ -2325,7 +2348,7 @@ test_capture_of_dump_calls (const line_table_case &case_)\n     }\n     dump_printf_loc (MSG_NOTE, stmt, \"msg 7\\n\");\n \n-    ASSERT_DUMPED_TEXT_EQ (tmp, \"test.txt:5:10: note:    msg 4\\n\");\n+    ASSERT_DUMPED_TEXT_EQ (tmp, \"test.txt:5:10: optimized:    msg 4\\n\");\n   }\n }\n "}, {"sha": "2a81011d61a862ac561dff76e7570f608bc83dfc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -1,3 +1,34 @@\n+2018-09-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-c++-common/unroll-1.c: Update expected output from \"note\" to\n+\t\"optimized\".\n+\t* c-c++-common/unroll-2.c: Likewise.\n+\t* c-c++-common/unroll-3.c: Likewise.\n+\t* g++.dg/tree-ssa/dom-invalid.C: Update expected output from\n+\tdg-message to dg-missed.  Convert param from -fopt-info to\n+\t-fopt-info-missed-ipa.\n+\t* g++.dg/tree-ssa/pr81408.C: Update expected output from\n+\tdg-message to dg-missed.\n+\t* g++.dg/vect/slp-pr56812.cc: Update expected output from\n+\tdg-message to dg-optimized.\n+\t* gcc.dg/pr26570.c: Update expected output from dg-message to\n+\tdg-missed.  Convert param from -fopt-info to\n+\t-fopt-info-missed-ipa.\n+\t* gcc.dg/pr32773.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr19210-1.c: Update expected output from\n+\tdg-message to dg-missed.\n+\t* gcc.dg/unroll-2.c: Update expected output from dg-message to\n+\tdg-optimized.\n+\t* gcc.dg/vect/nodump-vect-opt-info-1.c: Likewise.  Convert param\n+\tfrom -fopt-info to -fopt-info-vec.\n+\t* gfortran.dg/directive_unroll_1.f90: Update expected output from\n+\t\"note\" to \"optimized\".\n+\t* gfortran.dg/directive_unroll_2.f90: Likewise.\n+\t* gfortran.dg/directive_unroll_3.f90: Likewise.\n+\t* gnat.dg/unroll4.adb: Likewise.\n+\t* lib/gcc-dg.exp (dg-optimized): New procedure.\n+\t(dg-missed): New procedure.\n+\n 2018-09-28  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/87390"}, {"sha": "fe7f4f31912cb3aea94f4b41d3cfc05158ee0d71", "filename": "gcc/testsuite/c-c++-common/unroll-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funroll-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funroll-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funroll-1.c?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -20,22 +20,22 @@ void test (void)\n   #pragma GCC unroll 8\n   for (unsigned long i = 1; i <= 15; ++i)\n     bar(i);\n-  /* { dg-final { scan-rtl-dump \"21:.*: note: loop unrolled 7 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"21:.*: optimized: loop unrolled 7 times\" \"loop2_unroll\" } } */\n \n   #pragma GCC unroll 8\n   for (unsigned long i = 1; i <= j; ++i)\n     bar(i);\n-  /* { dg-final { scan-rtl-dump \"26:.*: note: loop unrolled 7 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"26:.*: optimized: loop unrolled 7 times\" \"loop2_unroll\" } } */\n \n   #pragma GCC unroll 7\n   for (unsigned long i = 1; i <= j; ++i)\n     bar(i);\n-  /* { dg-final { scan-rtl-dump \"31:.*: note: loop unrolled 3 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"31:.*: optimized: loop unrolled 3 times\" \"loop2_unroll\" } } */\n \n   unsigned long i = 0;\n   #pragma GCC unroll 3\n   do {\n     bar(i);\n   } while (++i < 9);\n-  /* { dg-final { scan-rtl-dump \"3\\[79\\]:.*: note: loop unrolled 2 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"3\\[79\\]:.*: optimized: loop unrolled 2 times\" \"loop2_unroll\" } } */\n }"}, {"sha": "0bb4bbb1aed840c1528b7a3cbf862dac3f78ead2", "filename": "gcc/testsuite/c-c++-common/unroll-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funroll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funroll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funroll-2.c?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -20,22 +20,22 @@ void test (void)\n   #pragma GCC unroll 8\n   for (unsigned long i = 1; i <= 15; ++i)\n     bar(i);\n-  /* { dg-final { scan-rtl-dump \"21:.*: note: loop unrolled 7 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"21:.*: optimized: loop unrolled 7 times\" \"loop2_unroll\" } } */\n \n   #pragma GCC unroll 8\n   for (unsigned long i = 1; i <= j; ++i)\n     bar(i);\n-  /* { dg-final { scan-rtl-dump \"26:.*: note: loop unrolled 7 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"26:.*: optimized: loop unrolled 7 times\" \"loop2_unroll\" } } */\n \n   #pragma GCC unroll 7\n   for (unsigned long i = 1; i <= j; ++i)\n     bar(i);\n-  /* { dg-final { scan-rtl-dump \"31:.*: note: loop unrolled 3 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"31:.*: optimized: loop unrolled 3 times\" \"loop2_unroll\" } } */\n \n   unsigned long i = 0;\n   #pragma GCC unroll 3\n   do {\n     bar(i);\n   } while (++i < 9);\n-  /* { dg-final { scan-rtl-dump \"3\\[79\\]:.*: note: loop unrolled 2 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"3\\[79\\]:.*: optimized: loop unrolled 2 times\" \"loop2_unroll\" } } */\n }"}, {"sha": "541accb7e9317fdb6e4e53124692791ed1b622f4", "filename": "gcc/testsuite/c-c++-common/unroll-3.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funroll-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funroll-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funroll-3.c?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -10,32 +10,32 @@ void test (void)\n   #pragma GCC unroll 8\n   for (unsigned long i = 1; i <= 8; ++i)\n     bar(i);\n-  /* { dg-final { scan-rtl-dump-not \"11:.*: note: loop unrolled\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump-not \"11:.*: optimized: loop unrolled\" \"loop2_unroll\" } } */\n \n   #pragma GCC unroll 8\n   for (unsigned long i = 1; i <= 7; ++i)\n     bar(i);\n-  /* { dg-final { scan-rtl-dump-not \"16:.*: note: loop unrolled\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump-not \"16:.*: optimized: loop unrolled\" \"loop2_unroll\" } } */\n \n   #pragma GCC unroll 8\n   for (unsigned long i = 1; i <= 15; ++i)\n     bar(i);\n-  /* { dg-final { scan-rtl-dump \"21:.*: note: loop unrolled 7 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"21:.*: optimized: loop unrolled 7 times\" \"loop2_unroll\" } } */\n \n   #pragma GCC unroll 8\n   for (unsigned long i = 1; i <= j; ++i)\n     bar(i);\n-  /* { dg-final { scan-rtl-dump \"26:.*: note: loop unrolled 7 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"26:.*: optimized: loop unrolled 7 times\" \"loop2_unroll\" } } */\n \n   #pragma GCC unroll 7\n   for (unsigned long i = 1; i <= j; ++i)\n     bar(i);\n-  /* { dg-final { scan-rtl-dump \"31:.*: note: loop unrolled 3 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"31:.*: optimized: loop unrolled 3 times\" \"loop2_unroll\" } } */\n \n   unsigned long i = 0;\n   #pragma GCC unroll 3\n   do {\n     bar(i);\n   } while (++i < 9);\n-  /* { dg-final { scan-rtl-dump \"3\\[79\\]:.*: note: loop unrolled 2 times\" \"loop2_unroll\" } } */\n+  /* { dg-final { scan-rtl-dump \"3\\[79\\]:.*: optimized: loop unrolled 2 times\" \"loop2_unroll\" } } */\n }"}, {"sha": "9aed74a4eb65f6bb3ad1df5a402f0cb32bd494a1", "filename": "gcc/testsuite/g++.dg/tree-ssa/dom-invalid.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fdom-invalid.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fdom-invalid.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fdom-invalid.C?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -1,7 +1,7 @@\n // PR tree-optimization/39557\n // invalid post-dom info leads to infinite loop\n // { dg-do run }\n-// { dg-options \"-Wall -fno-exceptions -O2 -fprofile-use -fopt-info -fno-rtti -Wno-missing-profile\" }\n+// { dg-options \"-Wall -fno-exceptions -O2 -fprofile-use -fopt-info-missed-ipa -fno-rtti -Wno-missing-profile\" }\n \n struct C\n {\n@@ -49,4 +49,4 @@ main ()\n {\n  E e;\n  e.bar ();\n-} // { dg-message  \"note: file\" }\n+} // { dg-missed \"file .* not found\" }"}, {"sha": "39e32fd4bc982d8e6ea338d8d1acbdfb266225cb", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr81408.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81408.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81408.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81408.C?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -86,7 +86,7 @@ a::H t;\n void\n ShowHelpListCommands ()\n {\n-  for (auto c : t) /* { dg-message \"note: missed loop optimization: niters analysis .*\" } */\n+  for (auto c : t) /* { dg-missed \"missed loop optimization: niters analysis .*\" } */\n     a::ax << c.ay << a::av;\n }\n "}, {"sha": "3e7a495aadd41bc6f6c436b9098553ff7acd1d94", "filename": "gcc/testsuite/g++.dg/vect/slp-pr56812.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr56812.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr56812.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr56812.cc?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -14,6 +14,6 @@ class mydata {\n void mydata::Set (float x)\n {\n   /* We want to vectorize this either as loop or basic-block.  */\n-  for (int i=0; i<upper(); i++) /* { dg-message \"note: \\[^\\n\\]* vectorized\" } */\n+  for (int i=0; i<upper(); i++) /* { dg-optimized \"\\[^\\n\\]* vectorized\" } */\n     data[i] = x;\n }"}, {"sha": "87b644a1d8fd3be2b88a4cfb7caf1a839c713656", "filename": "gcc/testsuite/gcc.dg/pr26570.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26570.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26570.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26570.c?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fprofile-generate -fprofile-use -fopt-info -Wno-missing-profile\" } */\n+/* { dg-options \"-O2 -fprofile-generate -fprofile-use -fopt-info-missed-ipa -Wno-missing-profile\" } */\n /* { dg-require-profiling \"-fprofile-generate\" } */\n \n unsigned test (unsigned a, unsigned b)\n {\n   return a / b;\n-} /* { dg-message \"note: \\[^\\n\\]*execution counts estimated\" } */\n+} /* { dg-missed \"\\[^\\n\\]*execution counts estimated\" } */"}, {"sha": "55b6b1c4962058dc7cb226b596f0a9e5ee6b4d73", "filename": "gcc/testsuite/gcc.dg/pr32773.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32773.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32773.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32773.c?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fprofile-use -fopt-info -Wno-missing-profile\" } */\n-/* { dg-options \"-O -m4 -fprofile-use -fopt-info -Wno-missing-profile\" { target sh-*-* } } */\n+/* { dg-options \"-O -fprofile-use -fopt-info-missed-ipa -Wno-missing-profile\" } */\n+/* { dg-options \"-O -m4 -fprofile-use -fopt-info-missed-ipa -Wno-missing-profile\" { target sh-*-* } } */\n \n void foo (int *p)\n {\n   if (p)\n     *p = 0;\n-} /* { dg-message \"note: \\[^\\n\\]*execution counts estimated\" } */\n+} /* { dg-missed \"\\[^\\n\\]*execution counts estimated\" } */"}, {"sha": "50d86a004854b9059119a7dd0dfa7ba3c46c45f0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr19210-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19210-1.c?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -6,10 +6,10 @@ void\n f (unsigned n)\n {\n   unsigned k;\n-  for(k = 0;k <= n;k++) /* { dg-message \"note: missed loop optimization: niters analysis .*\" } */\n+  for(k = 0;k <= n;k++) /* { dg-missed \"missed loop optimization: niters analysis .*\" } */\n     g();\n \n-  for(k = 0;k <= n;k += 4) /* { dg-message \"note: missed loop optimization: niters analysis .*\" } */\n+  for(k = 0;k <= n;k += 4) /* { dg-missed \"missed loop optimization: niters analysis .*\" } */\n     g();\n \n   /* We used to get warning for this loop.  However, since then # of iterations\n@@ -21,9 +21,9 @@ f (unsigned n)\n     g();\n \n   /* So we need the following loop, instead.  */\n-  for(k = 4;k <= n;k += 5) /* { dg-message \"note: missed loop optimization: niters analysis .*\" } */\n+  for(k = 4;k <= n;k += 5) /* { dg-missed \"missed loop optimization: niters analysis .*\" } */\n     g();\n   \n-  for(k = 15;k >= n;k--) /* { dg-message \"note: missed loop optimization: niters analysis .*\" } */\n+  for(k = 15;k >= n;k--) /* { dg-missed \"missed loop optimization: niters analysis .*\" } */\n     g();\n }"}, {"sha": "8baceaac1699dac131ae45b044fad9e7f61ed136", "filename": "gcc/testsuite/gcc.dg/unroll-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-2.c?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -15,7 +15,7 @@ int foo(void)\n {\n   int i;\n   bar();\n-  for (i = 0; i < 2; i++) /* { dg-message \"note: loop with 2 iterations completely unrolled\" } */\n+  for (i = 0; i < 2; i++) /* { dg-optimized \"loop with 2 iterations completely unrolled\" } */\n   {\n      a[i]= b[i] + 1;\n   }\n@@ -25,7 +25,7 @@ int foo(void)\n int foo2(void)\n {\n   int i;\n-  for (i = 0; i < 2; i++) /* { dg-message \"note: loop with 2 iterations completely unrolled\" } */\n+  for (i = 0; i < 2; i++) /* { dg-optimized \"loop with 2 iterations completely unrolled\" } */\n   {\n      a[i]= b[i] + 1;\n   }"}, {"sha": "258e37850380d8eb9b1c6e3be0fd32663e6097fd", "filename": "gcc/testsuite/gcc.dg/vect/nodump-vect-opt-info-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fnodump-vect-opt-info-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fnodump-vect-opt-info-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fnodump-vect-opt-info-1.c?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile { target vect_int } } */\n-/* { dg-additional-options \"-std=c99 -fopt-info -O3\" } */\n+/* { dg-additional-options \"-std=c99 -fopt-info-vec -O3\" } */\n \n void\n vadd (int *dst, int *op1, int *op2, int count)\n {\n-/* { dg-message \"loop vectorized\" \"\" { target *-*-* } .+2 } */\n-/* { dg-message \"loop versioned for vectorization because of possible aliasing\" \"\" { target *-*-* } .+1 } */\n+/* { dg-optimized \"loop vectorized\" \"\" { target *-*-* } .+2 } */\n+/* { dg-optimized \"loop versioned for vectorization because of possible aliasing\" \"\" { target *-*-* } .+1 } */\n   for (int i = 0; i < count; ++i)\n     dst[i] = op1[i] + op2[i];\n }"}, {"sha": "d758ad74395b89e0a9a3e9a12d992998d8ac88e8", "filename": "gcc/testsuite/gfortran.dg/directive_unroll_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirective_unroll_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirective_unroll_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirective_unroll_1.f90?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -24,7 +24,7 @@ subroutine test2(a, n)\n   DO i=1, n, 1\n     call dummy(a(i))\n   ENDDO\n-! { dg-final { scan-rtl-dump \"24:.: note: loop unrolled 7 times\" \"loop2_unroll\" } }\n+! { dg-final { scan-rtl-dump \"24:.: optimized: loop unrolled 7 times\" \"loop2_unroll\" } }\n end subroutine test2\n \n subroutine test3(a, n)\n@@ -36,7 +36,7 @@ subroutine test3(a, n)\n   DO i=n, 1, -1\n     call dummy(a(i))\n   ENDDO\n-! { dg-final { scan-rtl-dump \"36:.: note: loop unrolled 7 times\" \"loop2_unroll\" } }\n+! { dg-final { scan-rtl-dump \"36:.: optimized: loop unrolled 7 times\" \"loop2_unroll\" } }\n end subroutine test3\n \n subroutine test4(a, n)\n@@ -48,5 +48,5 @@ subroutine test4(a, n)\n   DO i=1, n, 2\n     call dummy(a(i))\n   ENDDO\n-! { dg-final { scan-rtl-dump \"48:.: note: loop unrolled 7 times\" \"loop2_unroll\" } }\n+! { dg-final { scan-rtl-dump \"48:.: optimized: loop unrolled 7 times\" \"loop2_unroll\" } }\n end subroutine test4"}, {"sha": "c72622709ae3366b4187d0eda4fad573b9aadee3", "filename": "gcc/testsuite/gfortran.dg/directive_unroll_2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirective_unroll_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirective_unroll_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirective_unroll_2.f90?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -24,7 +24,7 @@ subroutine test2(a, n)\n   DO i=1, n, 1\n     call dummy(a(i))\n   ENDDO\n-! { dg-final { scan-rtl-dump \"24:.: note: loop unrolled 7 times\" \"loop2_unroll\" } }\n+! { dg-final { scan-rtl-dump \"24:.: optimized: loop unrolled 7 times\" \"loop2_unroll\" } }\n end subroutine test2\n \n subroutine test3(a, n)\n@@ -36,7 +36,7 @@ subroutine test3(a, n)\n   DO i=n, 1, -1\n     call dummy(a(i))\n   ENDDO\n-! { dg-final { scan-rtl-dump \"36:.: note: loop unrolled 7 times\" \"loop2_unroll\" } }\n+! { dg-final { scan-rtl-dump \"36:.: optimized: loop unrolled 7 times\" \"loop2_unroll\" } }\n end subroutine test3\n \n subroutine test4(a, n)\n@@ -48,5 +48,5 @@ subroutine test4(a, n)\n   DO i=1, n, 2\n     call dummy(a(i))\n   ENDDO\n-! { dg-final { scan-rtl-dump \"48:.: note: loop unrolled 7 times\" \"loop2_unroll\" } }\n+! { dg-final { scan-rtl-dump \"48:.: optimized: loop unrolled 7 times\" \"loop2_unroll\" } }\n end subroutine test4"}, {"sha": "59a8e02c9ebb83eba114289058abe0f9233c8e60", "filename": "gcc/testsuite/gfortran.dg/directive_unroll_3.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirective_unroll_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirective_unroll_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdirective_unroll_3.f90?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -12,7 +12,7 @@ subroutine test1(a)\n   DO i=1, 8, 1\n     call dummy(a(i))\n   ENDDO\n-! { dg-final { scan-rtl-dump-not \"12:.: note: loop unrolled\" \"loop2_unroll\" } }\n+! { dg-final { scan-rtl-dump-not \"12:.: optimized: loop unrolled\" \"loop2_unroll\" } }\n end subroutine test1\n \n subroutine test2(a, n)\n@@ -24,7 +24,7 @@ subroutine test2(a, n)\n   DO i=1, n, 1\n     call dummy(a(i))\n   ENDDO\n-! { dg-final { scan-rtl-dump \"24:.: note: loop unrolled 7 times\" \"loop2_unroll\" } }\n+! { dg-final { scan-rtl-dump \"24:.: optimized: loop unrolled 7 times\" \"loop2_unroll\" } }\n end subroutine test2\n \n subroutine test3(a, n)\n@@ -36,7 +36,7 @@ subroutine test3(a, n)\n   DO i=n, 1, -1\n     call dummy(a(i))\n   ENDDO\n-! { dg-final { scan-rtl-dump \"36:.: note: loop unrolled 7 times\" \"loop2_unroll\" } }\n+! { dg-final { scan-rtl-dump \"36:.: optimized: loop unrolled 7 times\" \"loop2_unroll\" } }\n end subroutine test3\n \n subroutine test4(a, n)\n@@ -48,5 +48,5 @@ subroutine test4(a, n)\n   DO i=1, n, 2\n     call dummy(a(i))\n   ENDDO\n-! { dg-final { scan-rtl-dump \"48:.: note: loop unrolled 7 times\" \"loop2_unroll\" } }\n+! { dg-final { scan-rtl-dump \"48:.: optimized: loop unrolled 7 times\" \"loop2_unroll\" } }\n end subroutine test4"}, {"sha": "0cea4e89e63d4ea06586218017d2b19f6964f049", "filename": "gcc/testsuite/gnat.dg/unroll4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgnat.dg%2Funroll4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Fgnat.dg%2Funroll4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Funroll4.adb?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -23,4 +23,4 @@ package body Unroll4 is\n \n end Unroll4;\n \n--- { dg-final { scan-rtl-dump-times \"note: loop unrolled 7 times\" 2 \"loop2_unroll\" } }\n+-- { dg-final { scan-rtl-dump-times \"optimized: loop unrolled 7 times\" 2 \"loop2_unroll\" } }"}, {"sha": "c33a50c0b13302277cc0363d8f10082e3af83b73", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2d9d3720adef3a260b8a55e17e744352a901fc/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=ed2d9d3720adef3a260b8a55e17e744352a901fc", "patch": "@@ -1194,6 +1194,26 @@ proc dg-locus { args } {\n     verbose \"process-message:\\n${dg-messages}\" 2\n }\n \n+# Handle output from -fopt-info for MSG_OPTIMIZED_LOCATIONS:\n+# a successful optimization.\n+\n+proc dg-optimized { args } {\n+    # Make this variable available here and to the saved proc.\n+    upvar dg-messages dg-messages\n+\n+    process-message saved-dg-error \"optimized: \" \"$args\"\n+}\n+\n+# Handle output from -fopt-info for MSG_MISSED_OPTIMIZATION:\n+# a missed optimization.\n+\n+proc dg-missed { args } {\n+    # Make this variable available here and to the saved proc.\n+    upvar dg-messages dg-messages\n+\n+    process-message saved-dg-error \"missed: \" \"$args\"\n+}\n+\n # Check the existence of a gdb in the path, and return true if there\n # is one.\n #"}]}