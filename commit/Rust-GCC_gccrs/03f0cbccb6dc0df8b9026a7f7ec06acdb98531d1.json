{"sha": "03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmMGNiY2NiNmRjMGRmOGI5MDI2YTdmN2VjMDZhY2RiOTg1MzFkMQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:02:57Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-14T04:34:56Z"}, "message": "AVX512FP16: Add testcase for vrcpph/vrcpsh/vscalefph/vscalefsh.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vrcpph-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vrcpph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vrcpsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vrcpsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vscalefph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vscalefph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vscalefsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vscalefsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vrcpph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vrcpph-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vscalefph-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16vl-vscalefph-1b.c: Ditto.", "tree": {"sha": "7983176f508dbdbe770ca7a9a99710b78fe78b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7983176f508dbdbe770ca7a9a99710b78fe78b97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf4c12404fbbc6b21ab4ca2e5e8c6b6b1afe4190"}], "stats": {"total": 463, "additions": 463, "deletions": 0}, "files": [{"sha": "6a5c642d7d8d7757ff66d00829b3022c510c6676", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrcpph-1a.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpph-1a.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrcpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h res;\n+volatile __m512h x1;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_rcp_ph (x1);\n+  res = _mm512_mask_rcp_ph (res, m32, x1);\n+  res = _mm512_maskz_rcp_ph (m32, x1);\n+}"}, {"sha": "4a65451af3b450b63f7e7f1bc5f6fadf57cdf22f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrcpph-1b.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpph-1b.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(rcp_ph) (V512 * dest, V512 op1,\n+\t       __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+      if (((1 << i) & m1) == 0) {\n+\t  if (zero_mask) {\n+\t      v5.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v5.u32[i] = v7.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  v5.f32[i] = 1. / v1.f32[i];\n+\n+      }\n+\n+      if (((1 << i) & m2) == 0) {\n+\t  if (zero_mask) {\n+\t      v6.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v6.u32[i] = v8.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  v6.f32[i] = 1. / v2.f32[i];\n+      }\n+\n+  }\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(rcp_ph) (&exp, src1,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_rcp_ph) (HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _rcp_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(rcp_ph) (&exp, src1, MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_rcp_ph) (HF(res), MASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_rcp_ph);\n+\n+  EMULATE(rcp_ph) (&exp, src1,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_rcp_ph) (ZMASK_VALUE, HF(src1));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_rcp_ph);\n+\n+  if (n_errs != 0)\n+    abort ();\n+}\n+\n+"}, {"sha": "0a5a18e8b84b086666ccd30828a6ea617bf7a473", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrcpsh-1a.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpsh-1a.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrcpsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcpsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcpsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, x1, x2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_rcp_sh (x1, x2);\n+  res = _mm_mask_rcp_sh (res, m8, x1, x2);\n+  res = _mm_maskz_rcp_sh (m8, x1, x2);\n+}"}, {"sha": "531689569cb3ca61e019f8d955f2f956aa2b9bd5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vrcpsh-1b.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vrcpsh-1b.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_rcp_sh(V512 * dest, V512 op1,\n+                __mmask32 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = 1. / v1.f32[0]; \n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+   \n+    for (i = 1; i < 8; i++)\n+      v5.f32[i] = v1.f32[i];\n+\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  emulate_rcp_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_rcp_sh(exp.xmmh[0], src1.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_rcp_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_rcp_sh(&exp, src1,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_rcp_sh(res.xmmh[0], 0x1, exp.xmmh[0], src1.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_rcp_sh\");\n+\n+  emulate_rcp_sh(&exp, src1,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_rcp_sh(0x3, exp.xmmh[0], src1.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_rcp_sh\");\n+\n+  if (n_errs != 0)\n+    abort ();\n+}\n+"}, {"sha": "f3d27898f271ec0cdd9f4dd88d374cb8051a3cd5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vscalefph-1a.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefph-1a.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h res, res1, res2;\n+volatile __m512h x1, x2;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_scalef_ph (x1, x2);\n+  res1 = _mm512_mask_scalef_ph (res1, m32, x1, x2);\n+  res2 = _mm512_maskz_scalef_ph (m32, x1, x2);\n+  res = _mm512_scalef_round_ph (x1, x2, 8);\n+  res1 = _mm512_mask_scalef_round_ph (res1, m32, x1, x2, 8);\n+  res2 = _mm512_maskz_scalef_round_ph (m32, x1, x2, 11);\n+}"}, {"sha": "7c7288d6eb397af0cfd1aad536ca617a40dff9c7", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vscalefph-1b.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefph-1b.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define DEBUG\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS (AVX512F_LEN / 16)\n+\n+void NOINLINE\n+EMULATE(scalef_ph) (V512 * dest, V512 op1, V512 op2,\n+\t\t  __mmask32 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8; \n+  int i;\n+  __mmask16 m1, m2;\n+\n+  m1 = k & 0xffff;\n+  m2 = (k >> 16) & 0xffff;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  for (i = 0; i < 16; i++) {\n+      if (((1 << i) & m1) == 0) {\n+\t  if (zero_mask) {\n+\t      v5.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v5.u32[i] = v7.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  v5.f32[i] = v1.f32[i] * powf(2.0f, floorf(v3.f32[i]));\n+      }\n+\n+      if (((1 << i) & m2) == 0) {\n+\t  if (zero_mask) {\n+\t      v6.f32[i] = 0;\n+\t  }\n+\t  else {\n+\t      v6.u32[i] = v8.u32[i];\n+\t  }\n+      }\n+      else {\n+\t  v6.f32[i] = v2.f32[i] * powf(2.0f, floorf(v4.f32[i]));\n+      }\n+  }\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  EMULATE(scalef_ph) (&exp, src1, src2,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_scalef_ph) (HF(src1), HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _scalef_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(scalef_ph) (&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_scalef_ph) (HF(res), MASK_VALUE, HF(src1), HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_scalef_ph);\n+\n+  EMULATE(scalef_ph) (&exp, src1, src2,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_scalef_ph) (ZMASK_VALUE, HF(src1), HF(src2));\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_scalef_ph);\n+\n+#if AVX512F_LEN == 512\n+  EMULATE(scalef_ph) (&exp, src1, src2,  NET_MASK, 0);\n+  HF(res) = INTRINSIC (_scalef_round_ph) (HF(src1), HF(src2), 0x04);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _scalef_round_ph);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(scalef_ph) (&exp, src1, src2,  MASK_VALUE, 0);\n+  HF(res) = INTRINSIC (_mask_scalef_round_ph) (HF(res), MASK_VALUE, HF(src1), HF(src2), 0x04);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mask_scalef_round_ph);\n+\n+  EMULATE(scalef_ph) (&exp, src1, src2,  ZMASK_VALUE, 1);\n+  HF(res) = INTRINSIC (_maskz_scalef_round_ph) (ZMASK_VALUE, HF(src1), HF(src2), 0x04);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _maskz_scalef_round_ph);\n+#endif\n+\n+  if (n_errs != 0)\n+    abort ();\n+}\n+"}, {"sha": "999c04849e9b03cf29b7a801c68ab0957a18f330", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vscalefsh-1a.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefsh-1a.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscalefsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscalefsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, x1, x2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_scalef_sh (x1, x2);\n+  res = _mm_mask_scalef_sh (res, m8, x1, x2);\n+  res = _mm_maskz_scalef_sh (m8, x1, x2);\n+  res = _mm_scalef_round_sh (x1, x2, 4);\n+  res = _mm_mask_scalef_round_sh (res, m8, x1, x2, 8);\n+  res = _mm_maskz_scalef_round_sh (m8, x1, x2, 11);\n+}"}, {"sha": "5db7be0715fdeb2b6e7b157fd11fd24333ea6ba9", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vscalefsh-1b.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vscalefsh-1b.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_scalef_sh(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = v1.f32[0] * powf(2.0f, floorf(v3.f32[0])); \n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+   \n+    for (i = 1; i < 8; i++)\n+      v5.f32[i] = v1.f32[i];\n+\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+  emulate_scalef_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_scalef_round_sh(src1.xmmh[0], src2.xmmh[0], (0x00 | 0x08));\n+  check_results(&res, &exp, N_ELEMS, \"_mm_scalef_round_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_scalef_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_scalef_round_sh(res.xmmh[0], 0x1, src1.xmmh[0], src2.xmmh[0], (0x00 | 0x08));\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_scalef_round_sh\");\n+\n+  emulate_scalef_sh(&exp, src1, src2,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_scalef_round_sh(0x3, src1.xmmh[0], src2.xmmh[0], (0x00 | 0x08));\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_scalef_round_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "5894dbc679f3ca5ee3e796a9fc2a01c814e52516", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vrcpph-1a.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrcpph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrcpph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrcpph-1a.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrcpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcpph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res1;\n+volatile __m128h res2;\n+volatile __m256h x1;\n+volatile __m128h x2;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_rcp_ph (x1);\n+  res1 = _mm256_mask_rcp_ph (res1, m16, x1);\n+  res1 = _mm256_maskz_rcp_ph (m16, x1);\n+\n+  res2 = _mm_rcp_ph (x2);\n+  res2 = _mm_mask_rcp_ph (res2, m8, x2);\n+  res2 = _mm_maskz_rcp_ph (m8, x2);\n+}"}, {"sha": "a6b1e376a8e3f907bfd6fd07d9e08b39fd5ce709", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vrcpph-1b.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrcpph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrcpph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vrcpph-1b.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define DEBUG\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vrcpph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vrcpph-1b.c\"\n+"}, {"sha": "22231d628cf7f4befb799b1d15d747239b1ef849", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vscalefph-1a.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vscalefph-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vscalefph-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vscalefph-1a.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefph\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256h res1;\n+volatile __m128h res2;\n+volatile __m256h x1,x2;\n+volatile __m128h x3, x4;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res1 = _mm256_scalef_ph (x1, x2);\n+  res1 = _mm256_mask_scalef_ph (res1, m16, x1, x2);\n+  res1 = _mm256_maskz_scalef_ph (m16, x1, x2);\n+\n+  res2 = _mm_scalef_ph (x3, x4);\n+  res2 = _mm_mask_scalef_ph (res2, m8, x3, x4);\n+  res2 = _mm_maskz_scalef_ph (m8, x3, x4);\n+}"}, {"sha": "5c12d08e2e14a4ec1bce1f50d0c4ee5971034af9", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-vscalefph-1b.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vscalefph-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vscalefph-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-vscalefph-1b.c?ref=03f0cbccb6dc0df8b9026a7f7ec06acdb98531d1", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+\n+#define DEBUG\n+#define AVX512VL\n+#define AVX512F_LEN 256      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vscalefph-1b.c\"\n+                             \n+#undef AVX512F_LEN           \n+#undef AVX512F_LEN_HALF      \n+                             \n+#define AVX512F_LEN 128      \n+#define AVX512F_LEN_HALF 128 \n+#include \"avx512fp16-vscalefph-1b.c\"\n+"}]}