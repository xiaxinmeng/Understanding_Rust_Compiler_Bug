{"sha": "77ce3fbfc8cb6e383234b4a4f8ee142419ce341c", "node_id": "C_kwDOANBUbNoAKDc3Y2UzZmJmYzhjYjZlMzgzMjM0YjRhNGY4ZWUxNDI0MTljZTM0MWM", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-04-19T09:07:32Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-09-29T14:58:46Z"}, "message": "Remove TARGET_FLOAT128_ENABLE_TYPE setting for VxWorks\n\nWe have, in vxworks.h:\n\n /* linux64.h enables this, not supported in vxWorks.  */\n #undef TARGET_FLOAT128_ENABLE_TYPE\n #define TARGET_FLOAT128_ENABLE_TYPE 0\n\nWe inherit linux64.h for a few reasons, but don't really support\nfloat128 for vxworks, so the setting made sense.\n\nMany tests rely on the linux default (1) though, so resetting is\ncausing lots of failures on compilation tests that would pass otherwise.\n\nNot resetting lets users write code declaring floa128\nobjects but linking will typically fail at some point, so\nthere's no real adverse effect.\n\nBottom line is we don't have any particular incentive to alter\nthe default, whatever the default, so better leave the parameter\nalone.\n\n2022-09-29  Olivier Hainque  <hainque@adacore.com>\n\ngcc/\n\t* config/rs6000/vxworks.h (TARGET_FLOAT128_ENABLE_TYPE): Remove\n\tresetting to 0.", "tree": {"sha": "8e55da800fd667207cdbb21c8b62a749158bc601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e55da800fd667207cdbb21c8b62a749158bc601"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77ce3fbfc8cb6e383234b4a4f8ee142419ce341c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ce3fbfc8cb6e383234b4a4f8ee142419ce341c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77ce3fbfc8cb6e383234b4a4f8ee142419ce341c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ce3fbfc8cb6e383234b4a4f8ee142419ce341c/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2813f529ab8df6daef739d996688caab615eb1a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2813f529ab8df6daef739d996688caab615eb1a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2813f529ab8df6daef739d996688caab615eb1a9"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "b220a1ab87fe5c94b0a72dec1881353749a104e0", "filename": "gcc/config/rs6000/vxworks.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ce3fbfc8cb6e383234b4a4f8ee142419ce341c/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ce3fbfc8cb6e383234b4a4f8ee142419ce341c/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxworks.h?ref=77ce3fbfc8cb6e383234b4a4f8ee142419ce341c", "patch": "@@ -265,9 +265,10 @@ along with GCC; see the file COPYING3.  If not see\n #undef LINK_OS_EXTRA_SPEC64\n #define LINK_OS_EXTRA_SPEC64 VXWORKS_LINK_SPEC\n \n-/* linux64.h enables this, not supported in vxWorks.  */\n-#undef TARGET_FLOAT128_ENABLE_TYPE\n-#define TARGET_FLOAT128_ENABLE_TYPE 0\n+/* Leave TARGET_FLOAT128_ENABLE_TYPE alone here, possibly inherited from\n+   a linux configuration file.  This lets compilation tests pass and will\n+   trigger visible link errors (hence remain harmless) if the support isn't\n+   really there.  */\n \n #endif /* TARGET_VXWORKS7 */\n "}]}