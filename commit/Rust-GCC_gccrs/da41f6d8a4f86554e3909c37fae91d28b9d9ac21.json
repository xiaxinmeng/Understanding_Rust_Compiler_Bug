{"sha": "da41f6d8a4f86554e3909c37fae91d28b9d9ac21", "node_id": "C_kwDOANBUbNoAKGRhNDFmNmQ4YTRmODY1NTRlMzkwOWMzN2ZhZTkxZDI4YjlkOWFjMjE", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-04-03T10:38:50Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-05T08:20:48Z"}, "message": "expand: Add outer attribute expansion on expr\n\nAdd additional outer attribute expansion on some expressions.\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-expand-visitor.cc (ExpandVisitor::visit): Add call\n\tto attribute expansion function.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "234f7e295403494ee2a0c3a16bcc9dae02f84f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/234f7e295403494ee2a0c3a16bcc9dae02f84f21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da41f6d8a4f86554e3909c37fae91d28b9d9ac21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da41f6d8a4f86554e3909c37fae91d28b9d9ac21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da41f6d8a4f86554e3909c37fae91d28b9d9ac21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da41f6d8a4f86554e3909c37fae91d28b9d9ac21/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "865f3b05ad3085e7fe1545fdffb9b5fca3db6412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865f3b05ad3085e7fe1545fdffb9b5fca3db6412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/865f3b05ad3085e7fe1545fdffb9b5fca3db6412"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "be6bb06b6a4e1dc35a533a43f529ad7477aa922d", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da41f6d8a4f86554e3909c37fae91d28b9d9ac21/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da41f6d8a4f86554e3909c37fae91d28b9d9ac21/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=da41f6d8a4f86554e3909c37fae91d28b9d9ac21", "patch": "@@ -233,7 +233,9 @@ ExpandVisitor::visit (AST::AttrInputMetaItemContainer &)\n \n void\n ExpandVisitor::visit (AST::IdentifierExpr &ident_expr)\n-{}\n+{\n+  visit_outer_attrs (ident_expr);\n+}\n \n void\n ExpandVisitor::visit (AST::Lifetime &)\n@@ -257,6 +259,7 @@ ExpandVisitor::visit (AST::MacroInvocation &macro_invoc)\n void\n ExpandVisitor::visit (AST::PathInExpression &path)\n {\n+  visit_outer_attrs (path);\n   for (auto &segment : path.get_segments ())\n     if (segment.has_generic_args ())\n       expand_generic_args (segment.get_generic_args ());\n@@ -292,6 +295,7 @@ ExpandVisitor::visit (AST::TypePath &path)\n void\n ExpandVisitor::visit (AST::QualifiedPathInExpression &path)\n {\n+  visit_outer_attrs (path);\n   expand_qualified_path_type (path.get_qualified_path_type ());\n \n   for (auto &segment : path.get_segments ())\n@@ -311,7 +315,9 @@ ExpandVisitor::visit (AST::QualifiedPathInType &path)\n \n void\n ExpandVisitor::visit (AST::LiteralExpr &expr)\n-{}\n+{\n+  visit_outer_attrs (expr);\n+}\n \n void\n ExpandVisitor::visit (AST::AttrInputLiteral &)\n@@ -328,51 +334,59 @@ ExpandVisitor::visit (AST::MetaItemPathLit &)\n void\n ExpandVisitor::visit (AST::BorrowExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_borrowed_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::DereferenceExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_dereferenced_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::ErrorPropagationExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_propagating_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::NegationExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_negated_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::ArithmeticOrLogicalExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_left_expr ());\n   maybe_expand_expr (expr.get_right_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::ComparisonExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_left_expr ());\n   maybe_expand_expr (expr.get_right_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::LazyBooleanExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_left_expr ());\n   maybe_expand_expr (expr.get_right_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::TypeCastExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_casted_expr ());\n \n   visit (expr.get_type_to_cast_to ());\n@@ -381,20 +395,23 @@ ExpandVisitor::visit (AST::TypeCastExpr &expr)\n void\n ExpandVisitor::visit (AST::AssignmentExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_left_expr ());\n   maybe_expand_expr (expr.get_right_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::CompoundAssignmentExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_left_expr ());\n   maybe_expand_expr (expr.get_right_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::GroupedExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_expr_in_parens ());\n }\n \n@@ -415,34 +432,40 @@ ExpandVisitor::visit (AST::ArrayElemsCopied &elems)\n void\n ExpandVisitor::visit (AST::ArrayExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_array_elems ());\n }\n \n void\n ExpandVisitor::visit (AST::ArrayIndexExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_array_expr ());\n   visit (expr.get_index_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::TupleExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   for (auto &element : expr.get_tuple_elems ())\n     visit (element);\n }\n \n void\n ExpandVisitor::visit (AST::TupleIndexExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_tuple_expr ());\n \n   // We can't have macro invocations for tuple indexes, right? Need a test!\n }\n \n void\n ExpandVisitor::visit (AST::StructExprStruct &expr)\n-{}\n+{\n+  visit_outer_attrs (expr);\n+}\n \n void\n ExpandVisitor::visit (AST::StructExprFieldIdentifier &)\n@@ -479,6 +502,7 @@ ExpandVisitor::visit (AST::StructExprStructBase &expr)\n void\n ExpandVisitor::visit (AST::CallExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_function_expr ());\n \n   for (auto &param : expr.get_params ())\n@@ -488,6 +512,7 @@ ExpandVisitor::visit (AST::CallExpr &expr)\n void\n ExpandVisitor::visit (AST::MethodCallExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_receiver_expr ());\n \n   for (auto &param : expr.get_params ())\n@@ -497,12 +522,14 @@ ExpandVisitor::visit (AST::MethodCallExpr &expr)\n void\n ExpandVisitor::visit (AST::FieldAccessExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_receiver_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::ClosureExprInner &expr)\n {\n+  visit_outer_attrs (expr);\n   expand_closure_params (expr.get_params ());\n \n   visit (expr.get_definition_expr ());\n@@ -529,6 +556,7 @@ ExpandVisitor::visit (AST::BlockExpr &expr)\n void\n ExpandVisitor::visit (AST::ClosureExprInnerTyped &expr)\n {\n+  visit_outer_attrs (expr);\n   expand_closure_params (expr.get_params ());\n \n   maybe_expand_type (expr.get_return_type ());\n@@ -538,11 +566,14 @@ ExpandVisitor::visit (AST::ClosureExprInnerTyped &expr)\n \n void\n ExpandVisitor::visit (AST::ContinueExpr &expr)\n-{}\n+{\n+  visit_outer_attrs (expr);\n+}\n \n void\n ExpandVisitor::visit (AST::BreakExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   if (expr.has_break_expr ())\n     visit (expr.get_break_expr ());\n }\n@@ -586,19 +617,22 @@ ExpandVisitor::visit (AST::RangeToInclExpr &expr)\n void\n ExpandVisitor::visit (AST::ReturnExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   if (expr.has_returned_expr ())\n     visit (expr.get_returned_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::UnsafeBlockExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_block_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::LoopExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_loop_block ());\n }\n \n@@ -612,6 +646,7 @@ ExpandVisitor::visit (AST::WhileLoopExpr &expr)\n void\n ExpandVisitor::visit (AST::WhileLetLoopExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   for (auto &pattern : expr.get_patterns ())\n     visit (pattern);\n \n@@ -622,6 +657,7 @@ ExpandVisitor::visit (AST::WhileLetLoopExpr &expr)\n void\n ExpandVisitor::visit (AST::ForLoopExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_pattern ());\n   visit (expr.get_iterator_expr ());\n   visit (expr.get_loop_block ());\n@@ -630,6 +666,7 @@ ExpandVisitor::visit (AST::ForLoopExpr &expr)\n void\n ExpandVisitor::visit (AST::IfExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_condition_expr ());\n \n   visit (expr.get_if_block ());\n@@ -665,6 +702,7 @@ ExpandVisitor::visit (AST::IfExprConseqIfLet &expr)\n void\n ExpandVisitor::visit (AST::IfLetExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_value_expr ());\n \n   visit (expr.get_if_block ());\n@@ -700,6 +738,7 @@ ExpandVisitor::visit (AST::IfLetExprConseqIfLet &expr)\n void\n ExpandVisitor::visit (AST::MatchExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_scrutinee_expr ());\n \n   for (auto &match_case : expr.get_match_cases ())\n@@ -720,12 +759,14 @@ ExpandVisitor::visit (AST::MatchExpr &expr)\n void\n ExpandVisitor::visit (AST::AwaitExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_awaited_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::AsyncBlockExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   visit (expr.get_block_expr ());\n }\n "}]}