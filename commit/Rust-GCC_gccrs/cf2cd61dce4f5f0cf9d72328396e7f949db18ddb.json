{"sha": "cf2cd61dce4f5f0cf9d72328396e7f949db18ddb", "node_id": "C_kwDOANBUbNoAKGNmMmNkNjFkY2U0ZjVmMGNmOWQ3MjMyODM5NmU3Zjk0OWRiMThkZGI", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-07T21:06:19Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-07T21:08:20Z"}, "message": "c++: Fix decltype-bitfield1.C on i?86\n\nThis test was failing on i?86 because of:\n\nwarning: width of 'A::l' exceeds its type\n\nso change the type to 'long long' and make the test run only on arches\nwhere sizeof(long long) == 8 to avoid failing like this again.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/decltype-bitfield1.C: Change a type to unsigned\n\tlong long.  Only run on longlong64 targets.", "tree": {"sha": "a602d3440438aa84a6b106f15733edc56c556e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a602d3440438aa84a6b106f15733edc56c556e76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf2cd61dce4f5f0cf9d72328396e7f949db18ddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2cd61dce4f5f0cf9d72328396e7f949db18ddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf2cd61dce4f5f0cf9d72328396e7f949db18ddb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2cd61dce4f5f0cf9d72328396e7f949db18ddb/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4394fd67264f5de650c2c3509c001c5f7203449d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4394fd67264f5de650c2c3509c001c5f7203449d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4394fd67264f5de650c2c3509c001c5f7203449d"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "27289fb8580466ec665d5fa10d134780a8e3fb1d", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-bitfield1.C", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf2cd61dce4f5f0cf9d72328396e7f949db18ddb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-bitfield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf2cd61dce4f5f0cf9d72328396e7f949db18ddb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-bitfield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-bitfield1.C?ref=cf2cd61dce4f5f0cf9d72328396e7f949db18ddb", "patch": "@@ -1,5 +1,5 @@\n // PR c++/95009\n-// { dg-do compile { target c++11 } }\n+// { dg-do compile { target { c++11 && longlong64 } } }\n \n struct false_type { static constexpr bool value = false; };\n struct true_type { static constexpr bool value = true; };\n@@ -10,7 +10,7 @@ struct is_same<T, T> : true_type {};\n \n struct A {\n   int i : 31;\n-  unsigned long l : 37;\n+  unsigned long long l : 37;\n } a;\n \n void\n@@ -40,26 +40,26 @@ g ()\n   static_assert (is_same<decltype(~a.i), int>::value, \"\");\n   static_assert (is_same<decltype((~a.i)), int>::value, \"\");\n \n-  static_assert (is_same<decltype(a.l), unsigned long>::value, \"\");\n-  static_assert (is_same<decltype((a.l)), unsigned long&>::value, \"\");\n-  static_assert (is_same<decltype(++a.l), unsigned long&>::value, \"\");\n-  static_assert (is_same<decltype((++a.l)), unsigned long&>::value, \"\");\n-  static_assert (is_same<decltype(a.l++), unsigned long>::value, \"\");\n-  static_assert (is_same<decltype((a.l++)), unsigned long>::value, \"\");\n-  static_assert (is_same<decltype(--a.l), unsigned long&>::value, \"\");\n-  static_assert (is_same<decltype((--a.l)), unsigned long&>::value, \"\");\n-  static_assert (is_same<decltype(a.l--), unsigned long>::value, \"\");\n-  static_assert (is_same<decltype((a.l--)), unsigned long>::value, \"\");\n-  static_assert (is_same<decltype(a.l += 1), unsigned long&>::value, \"\");\n-  static_assert (is_same<decltype((a.l += 1)), unsigned long&>::value, \"\");\n-  static_assert (is_same<decltype(a.l -= 1), unsigned long&>::value, \"\");\n-  static_assert (is_same<decltype((a.l -= 1)), unsigned long&>::value, \"\");\n-  static_assert (is_same<decltype(a.l *= 1), unsigned long&>::value, \"\");\n-  static_assert (is_same<decltype((a.l *= 1)), unsigned long&>::value, \"\");\n-  static_assert (is_same<decltype(+a.l), unsigned long>::value, \"\");\n-  static_assert (is_same<decltype((+a.l)), unsigned long>::value, \"\");\n-  static_assert (is_same<decltype(-a.l), unsigned long>::value, \"\");\n-  static_assert (is_same<decltype((-a.l)), unsigned long>::value, \"\");\n-  static_assert (is_same<decltype(~a.l), unsigned long>::value, \"\");\n-  static_assert (is_same<decltype((~a.l)), unsigned long>::value, \"\");\n+  static_assert (is_same<decltype(a.l), unsigned long long>::value, \"\");\n+  static_assert (is_same<decltype((a.l)), unsigned long long&>::value, \"\");\n+  static_assert (is_same<decltype(++a.l), unsigned long long&>::value, \"\");\n+  static_assert (is_same<decltype((++a.l)), unsigned long long&>::value, \"\");\n+  static_assert (is_same<decltype(a.l++), unsigned long long>::value, \"\");\n+  static_assert (is_same<decltype((a.l++)), unsigned long long>::value, \"\");\n+  static_assert (is_same<decltype(--a.l), unsigned long long&>::value, \"\");\n+  static_assert (is_same<decltype((--a.l)), unsigned long long&>::value, \"\");\n+  static_assert (is_same<decltype(a.l--), unsigned long long>::value, \"\");\n+  static_assert (is_same<decltype((a.l--)), unsigned long long>::value, \"\");\n+  static_assert (is_same<decltype(a.l += 1), unsigned long long&>::value, \"\");\n+  static_assert (is_same<decltype((a.l += 1)), unsigned long long&>::value, \"\");\n+  static_assert (is_same<decltype(a.l -= 1), unsigned long long&>::value, \"\");\n+  static_assert (is_same<decltype((a.l -= 1)), unsigned long long&>::value, \"\");\n+  static_assert (is_same<decltype(a.l *= 1), unsigned long long&>::value, \"\");\n+  static_assert (is_same<decltype((a.l *= 1)), unsigned long long&>::value, \"\");\n+  static_assert (is_same<decltype(+a.l), unsigned long long>::value, \"\");\n+  static_assert (is_same<decltype((+a.l)), unsigned long long>::value, \"\");\n+  static_assert (is_same<decltype(-a.l), unsigned long long>::value, \"\");\n+  static_assert (is_same<decltype((-a.l)), unsigned long long>::value, \"\");\n+  static_assert (is_same<decltype(~a.l), unsigned long long>::value, \"\");\n+  static_assert (is_same<decltype((~a.l)), unsigned long long>::value, \"\");\n }"}]}