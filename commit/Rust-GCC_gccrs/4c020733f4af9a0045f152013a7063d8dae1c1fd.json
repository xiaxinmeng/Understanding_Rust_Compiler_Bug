{"sha": "4c020733f4af9a0045f152013a7063d8dae1c1fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMwMjA3MzNmNGFmOWEwMDQ1ZjE1MjAxM2E3MDYzZDhkYWUxYzFmZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-04-23T16:58:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-23T16:58:24Z"}, "message": "alpha.c (alpha_write_verstamp): Mark `file' unused.\n\n        * alpha.c (alpha_write_verstamp): Mark `file' unused.\n        * alpha.h (FUNCTION_VALUE): Use gen_rtx_REG not gen_rtx.\n        (LIBCALL_VALUE): Likewise.\n        (GO_IF_LEGITIMATE_SIMPLE_ADDRESS): Handle normal subregs.\n\nFrom-SVN: r26607", "tree": {"sha": "91630a93de25924277f4069f7aae310a7a048c1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91630a93de25924277f4069f7aae310a7a048c1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c020733f4af9a0045f152013a7063d8dae1c1fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c020733f4af9a0045f152013a7063d8dae1c1fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c020733f4af9a0045f152013a7063d8dae1c1fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c020733f4af9a0045f152013a7063d8dae1c1fd/comments", "author": null, "committer": null, "parents": [{"sha": "4cb02ea1625e1a5293342c26a904d4bb557dbc48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb02ea1625e1a5293342c26a904d4bb557dbc48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cb02ea1625e1a5293342c26a904d4bb557dbc48"}], "stats": {"total": 83, "additions": 51, "deletions": 32}, "files": [{"sha": "6260333197c9e6b1568eb37a773b6cbd76a2e083", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c020733f4af9a0045f152013a7063d8dae1c1fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c020733f4af9a0045f152013a7063d8dae1c1fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c020733f4af9a0045f152013a7063d8dae1c1fd", "patch": "@@ -1,3 +1,10 @@\n+Fri Apr 23 16:57:40 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (alpha_write_verstamp): Mark `file' unused.\n+\t* alpha.h (FUNCTION_VALUE): Use gen_rtx_REG not gen_rtx.\n+\t(LIBCALL_VALUE): Likewise.\n+\t(GO_IF_LEGITIMATE_SIMPLE_ADDRESS): Handle normal subregs.\n+\n Fri Apr 23 14:57:33 1999  Donn Terry  <donn@interix.com>\n \n \t* alpha32.h (INITIALIZE_TRAMPOLINE): Get offsets right."}, {"sha": "cf60507634d52592c44f55dbf2c6b16d88315854", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c020733f4af9a0045f152013a7063d8dae1c1fd/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c020733f4af9a0045f152013a7063d8dae1c1fd/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=4c020733f4af9a0045f152013a7063d8dae1c1fd", "patch": "@@ -3297,7 +3297,7 @@ alpha_does_function_need_gp ()\n \n void\n alpha_write_verstamp (file)\n-     FILE *file;\n+     FILE *file ATTRIBUTE_UNUSED;\n {\n #ifdef MS_STAMP\n   fprintf (file, \"\\t.verstamp %d %d\\n\", MS_STAMP, LS_STAMP);"}, {"sha": "bf41334aaf11498b62be95bbf50f0c857bf33153", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c020733f4af9a0045f152013a7063d8dae1c1fd/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c020733f4af9a0045f152013a7063d8dae1c1fd/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=4c020733f4af9a0045f152013a7063d8dae1c1fd", "patch": "@@ -1002,26 +1002,25 @@ extern int alpha_memory_latency;\n    On Alpha the value is found in $0 for integer functions and\n    $f0 for floating-point functions.  */\n \n-#define FUNCTION_VALUE(VALTYPE, FUNC)\t\\\n-  gen_rtx (REG,\t\t\t\t\t\t\t\\\n-\t   ((INTEGRAL_TYPE_P (VALTYPE)\t\t\t\t\\\n-\t     && TYPE_PRECISION (VALTYPE) < BITS_PER_WORD)\t\\\n-\t    || POINTER_TYPE_P (VALTYPE))\t\t\t\\\n-\t   ? word_mode : TYPE_MODE (VALTYPE),\t\t\t\\\n-\t   ((TARGET_FPREGS\t\t\t\t\t\\\n-\t     && (TREE_CODE (VALTYPE) == REAL_TYPE\t\t\\\n-\t\t || TREE_CODE (VALTYPE) == COMPLEX_TYPE))\t\\\n-\t    ? 32 : 0))\n+#define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\\\n+  gen_rtx_REG (((INTEGRAL_TYPE_P (VALTYPE)\t\t\t\\\n+\t         && TYPE_PRECISION (VALTYPE) < BITS_PER_WORD)\t\\\n+\t        || POINTER_TYPE_P (VALTYPE))\t\t\t\\\n+\t       ? word_mode : TYPE_MODE (VALTYPE),\t\t\\\n+\t       ((TARGET_FPREGS\t\t\t\t\t\\\n+\t         && (TREE_CODE (VALTYPE) == REAL_TYPE\t\t\\\n+\t\t     || TREE_CODE (VALTYPE) == COMPLEX_TYPE))\t\\\n+\t        ? 32 : 0))\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n \n-#define LIBCALL_VALUE(MODE)\t\\\n-   gen_rtx (REG, MODE,\t\t\t\t\t\t\\\n-\t    (TARGET_FPREGS\t\t\t\t\t\\\n-\t     && (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\\\n-\t\t || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT) \\\n-\t     ? 32 : 0))\n+#define LIBCALL_VALUE(MODE)\t\t\t\t\t\\\n+   gen_rtx_REG (MODE,\t\t\t\t\t\t\\\n+\t        (TARGET_FPREGS\t\t\t\t\t\\\n+\t         && (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\\\n+\t\t     || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT) \\\n+\t         ? 32 : 0))\n \n /* The definition of this macro implies that there are cases where\n    a scalar value cannot be returned in registers.\n@@ -1426,21 +1425,34 @@ extern void alpha_init_expanders ();\n \n    First define the basic valid address.  */\n \n-#define GO_IF_LEGITIMATE_SIMPLE_ADDRESS(MODE, X, ADDR)\t\\\n-{ if (REG_P (X) && REG_OK_FOR_BASE_P (X))\t\t\\\n-    goto ADDR;\t\t\t\t\t\t\\\n-  if (CONSTANT_ADDRESS_P (X))\t\t\t\t\\\n-    goto ADDR;\t\t\t\t\t\t\\\n-  if (GET_CODE (X) == PLUS\t\t\t\t\\\n-      && REG_P (XEXP (X, 0)))\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      if (REG_OK_FP_BASE_P (XEXP (X, 0))\t\t\\\n-\t  && GET_CODE (XEXP (X, 1)) == CONST_INT)\t\\\n-\tgoto ADDR;\t\t\t\t\t\\\n-      if (REG_OK_FOR_BASE_P (XEXP (X, 0))\t\t\\\n-\t  && CONSTANT_ADDRESS_P (XEXP (X, 1)))\t\t\\\n-\tgoto ADDR;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+#define GO_IF_LEGITIMATE_SIMPLE_ADDRESS(MODE, X, ADDR)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  rtx tmp = (X);\t\t\t\t\t\t\t\\\n+  if (GET_CODE (tmp) == SUBREG\t\t\t\t\t\t\\\n+      && (GET_MODE_SIZE (GET_MODE (tmp))\t\t\t\t\\\n+\t  < GET_MODE_SIZE (GET_MODE (SUBREG_REG (tmp)))))\t\t\\\n+    tmp = SUBREG_REG (tmp);\t\t\t\t\t\t\\\n+  if (REG_P (tmp) && REG_OK_FOR_BASE_P (tmp))\t\t\t\t\\\n+    goto ADDR;\t\t\t\t\t\t\t\t\\\n+  if (CONSTANT_ADDRESS_P (X))\t\t\t\t\t\t\\\n+    goto ADDR;\t\t\t\t\t\t\t\t\\\n+  if (GET_CODE (X) == PLUS)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      tmp = XEXP (X, 0);\t\t\t\t\t\t\\\n+      if (GET_CODE (tmp) == SUBREG\t\t\t\t\t\\\n+          && (GET_MODE_SIZE (GET_MODE (tmp))\t\t\t\t\\\n+\t      < GET_MODE_SIZE (GET_MODE (SUBREG_REG (tmp)))))\t\t\\\n+        tmp = SUBREG_REG (tmp);\t\t\t\t\t\t\\\n+      if (REG_P (tmp))\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  if (REG_OK_FP_BASE_P (tmp)\t\t\t\t\t\\\n+\t      && GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\t\\\n+\t    goto ADDR;\t\t\t\t\t\t\t\\\n+\t  if (REG_OK_FOR_BASE_P (tmp)\t\t\t\t\t\\\n+\t      && CONSTANT_ADDRESS_P (XEXP (X, 1)))\t\t\t\\\n+\t    goto ADDR;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n }\n \n /* Now accept the simple address, or, for DImode only, an AND of a simple"}]}