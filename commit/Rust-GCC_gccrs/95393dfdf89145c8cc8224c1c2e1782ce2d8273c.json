{"sha": "95393dfdf89145c8cc8224c1c2e1782ce2d8273c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUzOTNkZmRmODkxNDVjOGNjODIyNGMxYzJlMTc4MmNlMmQ4MjczYw==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-06T21:48:21Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-06T21:48:21Z"}, "message": "entered into RCS\n\nFrom-SVN: r1481", "tree": {"sha": "8f2ed1cdc517608a7876eac66f18bb930ef17afe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f2ed1cdc517608a7876eac66f18bb930ef17afe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95393dfdf89145c8cc8224c1c2e1782ce2d8273c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95393dfdf89145c8cc8224c1c2e1782ce2d8273c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95393dfdf89145c8cc8224c1c2e1782ce2d8273c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95393dfdf89145c8cc8224c1c2e1782ce2d8273c/comments", "author": null, "committer": null, "parents": [{"sha": "9b4e97b0d01f1ddae5bbbace17eed0e9812f5b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4e97b0d01f1ddae5bbbace17eed0e9812f5b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4e97b0d01f1ddae5bbbace17eed0e9812f5b6b"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "a03b582a9cc6b096040d83e4072ba28db220db3e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95393dfdf89145c8cc8224c1c2e1782ce2d8273c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95393dfdf89145c8cc8224c1c2e1782ce2d8273c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=95393dfdf89145c8cc8224c1c2e1782ce2d8273c", "patch": "@@ -37,6 +37,20 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define I386 1\n \n+/* Stubs for half-pic support if not OSF/1 reference platform.  */\n+\n+#ifndef HALF_PIC_P\n+#define HALF_PIC_P() 0\n+#define HALF_PIC_NUMBER_PTRS 0\n+#define HALF_PIC_NUMBER_REFS 0\n+#define HALF_PIC_ENCODE(DECL)\n+#define HALF_PIC_DECLARE(NAME)\n+#define HALF_PIC_INIT()\terror (\"half-pic init called on systems that don't support it.\")\n+#define HALF_PIC_ADDRESS_P(X) 0\n+#define HALF_PIC_PTR(X) X\n+#define HALF_PIC_FINISH(STREAM)\n+#endif\n+\n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n extern int target_flags;\n@@ -86,7 +100,12 @@ extern int target_flags;\n     { \"nosvr3-shlib\", -040},\t\t\t\\\n     { \"ieee-fp\", 0100},\t\t\t\t\\\n     { \"noieee-fp\", -0100},\t\t\t\\\n+    SUBTARGET_SWITCHES                          \\\n     { \"\", TARGET_DEFAULT}}\n+\n+/* This is meant to be redefined in the host dependent files */\n+#define SUBTARGET_SWITCHES\n+\n \f\n /* target machine storage layout */\n "}, {"sha": "ee7268b0a0c857a2f63848e087f015191fee3d5a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95393dfdf89145c8cc8224c1c2e1782ce2d8273c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95393dfdf89145c8cc8224c1c2e1782ce2d8273c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=95393dfdf89145c8cc8224c1c2e1782ce2d8273c", "patch": "@@ -572,6 +572,18 @@\n \n   if (flag_pic && SYMBOLIC_CONST (operands[1]))\n     emit_pic_move (operands, SImode);\n+  else if (HALF_PIC_P()\n+\t   && GET_CODE (operands[0]) == REG\n+           && GET_CODE (operands[1]) == SYMBOL_REF\n+           && HALF_PIC_ADDRESS_P (operands[1]))\n+    {\n+      rtx ptr = HALF_PIC_PTR (operands[1]);\n+      if (XSTR (ptr, 0) != XSTR (operands[1], 0))\n+\t{\n+\t  emit_move_insn (operands[0], gen_rtx (MEM, Pmode, ptr));\n+\t  DONE;\n+\t}\n+    }\n }\")\n \n ;; On i486, incl reg is faster than movl $1,reg."}]}