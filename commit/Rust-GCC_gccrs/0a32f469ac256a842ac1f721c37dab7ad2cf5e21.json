{"sha": "0a32f469ac256a842ac1f721c37dab7ad2cf5e21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEzMmY0NjlhYzI1NmE4NDJhYzFmNzIxYzM3ZGFiN2FkMmNmNWUyMQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-02-01T20:34:08Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-02-01T20:34:08Z"}, "message": "Calendar.java: Implement Comparable<Calendar>.\n\n\t* java/util/Calendar.java: Implement Comparable<Calendar>.  Update\n\tcomments.\n\t(clear): Call complete.\n\t(setTimeZone): Call computeTime, computeFields.\n\t(compareTo): New method.\n\t* java/nio/charset/Charset.java: Implement Comparable<Charset>.\n\t(availableCharsets): Genericized.\n\t(aliases): Likewise.\n\t(compareTo): Changed argument type.\n\t* java/lang/ClassLoader.java (loadClass): Genericized.\n\t(findClass): Likewise.\n\t(defineClass): Likewise.\n\t(resolveClass): Likewise.\n\t(findSystemClass): Likewise.\n\t(setSigners): Likewise.\n\t(findLoadedClass): Likewise.\n\t(getResources): Likewise.\n\t(findResources): Likewise.\n\t(getSystemResources): Likewise.\n\t(checkInitialized): New method.\n\t* java/lang/Class.java (getCanonicalName): New method.\n\nFrom-SVN: r121471", "tree": {"sha": "045d28c226132bbb212ffd4956739e8e6fde799b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/045d28c226132bbb212ffd4956739e8e6fde799b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a32f469ac256a842ac1f721c37dab7ad2cf5e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a32f469ac256a842ac1f721c37dab7ad2cf5e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a32f469ac256a842ac1f721c37dab7ad2cf5e21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/comments", "author": null, "committer": null, "parents": [{"sha": "62e5bf5d4203458b41813a79213b3f513a4ca98c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e5bf5d4203458b41813a79213b3f513a4ca98c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e5bf5d4203458b41813a79213b3f513a4ca98c"}], "stats": {"total": 239, "additions": 193, "deletions": 46}, "files": [{"sha": "a19a97c57ae5cff10838f12840694cb03b5c665e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0a32f469ac256a842ac1f721c37dab7ad2cf5e21", "patch": "@@ -1,3 +1,27 @@\n+2007-02-01  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/util/Calendar.java: Implement Comparable<Calendar>.  Update\n+\tcomments.\n+\t(clear): Call complete.\n+\t(setTimeZone): Call computeTime, computeFields.\n+\t(compareTo): New method.\n+\t* java/nio/charset/Charset.java: Implement Comparable<Charset>.\n+\t(availableCharsets): Genericized.\n+\t(aliases): Likewise.\n+\t(compareTo): Changed argument type.\n+\t* java/lang/ClassLoader.java (loadClass): Genericized.\n+\t(findClass): Likewise.\n+\t(defineClass): Likewise.\n+\t(resolveClass): Likewise.\n+\t(findSystemClass): Likewise.\n+\t(setSigners): Likewise.\n+\t(findLoadedClass): Likewise.\n+\t(getResources): Likewise.\n+\t(findResources): Likewise.\n+\t(getSystemResources): Likewise.\n+\t(checkInitialized): New method.\n+\t* java/lang/Class.java (getCanonicalName): New method.\n+\n 2007-01-31  Keith Seitz  <keiths@redhat.com>\n \n \t* include/jvmti-int.h (JVMTI): Declare member \"enabled\"."}, {"sha": "7dbfdcee51d3cc64d56e2c485d89a80df5fbc72f", "filename": "libjava/classpath/lib/java/lang/Class.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClass.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClass.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClass.class?ref=0a32f469ac256a842ac1f721c37dab7ad2cf5e21"}, {"sha": "03de2da433497001e6c4ba1c6614d303d34d6d47", "filename": "libjava/classpath/lib/java/lang/ClassLoader$AnnotationsKey.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader%24AnnotationsKey.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader%24AnnotationsKey.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader%24AnnotationsKey.class?ref=0a32f469ac256a842ac1f721c37dab7ad2cf5e21"}, {"sha": "59ba15cac39507612d1a35c8ba1e34c509eb7250", "filename": "libjava/classpath/lib/java/lang/ClassLoader.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader.class?ref=0a32f469ac256a842ac1f721c37dab7ad2cf5e21"}, {"sha": "54db32a285d2e492539c1ccf60c6c0917bb97d3d", "filename": "libjava/classpath/lib/java/nio/charset/Charset.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fclasspath%2Flib%2Fjava%2Fnio%2Fcharset%2FCharset.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fclasspath%2Flib%2Fjava%2Fnio%2Fcharset%2FCharset.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Fnio%2Fcharset%2FCharset.class?ref=0a32f469ac256a842ac1f721c37dab7ad2cf5e21"}, {"sha": "9ffbe347ebb3cecfdbce980a78c10b68207c7901", "filename": "libjava/classpath/lib/java/util/Calendar.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fclasspath%2Flib%2Fjava%2Futil%2FCalendar.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fclasspath%2Flib%2Fjava%2Futil%2FCalendar.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Futil%2FCalendar.class?ref=0a32f469ac256a842ac1f721c37dab7ad2cf5e21"}, {"sha": "b0151db7e2d5306d0a14714b05b73c3b67f17a6a", "filename": "libjava/java/lang/Class.java", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fjava%2Flang%2FClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fjava%2Flang%2FClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.java?ref=0a32f469ac256a842ac1f721c37dab7ad2cf5e21", "patch": "@@ -1,5 +1,5 @@\n /* Class.java -- Representation of a Java class.\n-   Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006\n+   Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation\n \n This file is part of GNU Classpath.\n@@ -1290,6 +1290,59 @@ public Annotation[] getAnnotations()\n     return v.toArray(new Annotation[v.size()]);\n   }\n \n+  /**\n+   * <p>\n+   * Returns the canonical name of this class, as defined by section\n+   * 6.7 of the Java language specification.  Each package, top-level class,\n+   * top-level interface and primitive type has a canonical name.  A member\n+   * class has a canonical name, if its parent class has one.  Likewise,\n+   * an array type has a canonical name, if its component type does.\n+   * Local or anonymous classes do not have canonical names.\n+   * </p>\n+   * <p>\n+   * The canonical name for top-level classes, top-level interfaces and\n+   * primitive types is always the same as the fully-qualified name.\n+   * For array types, the canonical name is the canonical name of its\n+   * component type with `[]' appended.  \n+   * </p>\n+   * <p>\n+   * The canonical name of a member class always refers to the place where\n+   * the class was defined, and is composed of the canonical name of the\n+   * defining class and the simple name of the member class, joined by `.'.\n+   *  For example, if a <code>Person</code> class has an inner class,\n+   * <code>M</code>, then both its fully-qualified name and canonical name\n+   * is <code>Person.M</code>.  A subclass, <code>Staff</code>, of\n+   * <code>Person</code> refers to the same inner class by the fully-qualified\n+   * name of <code>Staff.M</code>, but its canonical name is still\n+   * <code>Person.M</code>.\n+   * </p>\n+   * <p>\n+   * Where no canonical name is present, <code>null</code> is returned.\n+   * </p>\n+   *\n+   * @return the canonical name of the class, or <code>null</code> if the\n+   *         class doesn't have a canonical name.\n+   * @since 1.5\n+   */\n+  public String getCanonicalName()\n+  {\n+    if (isArray())\n+      {\n+\tString componentName = getComponentType().getCanonicalName();\n+\tif (componentName != null)\n+\t  return componentName + \"[]\";\n+      }\n+    if (isMemberClass())\n+      {\n+\tString memberName = getDeclaringClass().getCanonicalName();\n+\tif (memberName != null)\n+\t  return memberName + \".\" + getSimpleName();\n+      }\n+    if (isLocalClass() || isAnonymousClass())\n+      return null;\n+    return getName();\n+  }\n+\n   /**\n    * Returns all annotations directly defined by this class.  If there are\n    * no annotations associated with this class, then a zero-length array"}, {"sha": "92b2f0ad8b7dccdee93ca1a07aa7751a499618e0", "filename": "libjava/java/lang/ClassLoader.java", "status": "modified", "additions": 40, "deletions": 24, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fjava%2Flang%2FClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fjava%2Flang%2FClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassLoader.java?ref=0a32f469ac256a842ac1f721c37dab7ad2cf5e21", "patch": "@@ -1,5 +1,5 @@\n /* ClassLoader.java -- responsible for loading classes into the VM\n-   Copyright (C) 1998, 1999, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -118,7 +118,6 @@\n  * @author Eric Blake (ebb9@email.byu.edu)\n  * @see Class\n  * @since 1.0\n- * @status still missing 1.4 functionality\n  */\n public abstract class ClassLoader\n {\n@@ -373,7 +372,7 @@ protected ClassLoader(ClassLoader parent)\n    * @return the loaded class\n    * @throws ClassNotFoundException if the class cannot be found\n    */\n-  public Class loadClass(String name) throws ClassNotFoundException\n+  public Class<?> loadClass(String name) throws ClassNotFoundException\n   {\n     return loadClass(name, false);\n   }\n@@ -401,7 +400,7 @@ private native Class loadClassFromSig(String name)\n    * @return the loaded class\n    * @throws ClassNotFoundException if the class cannot be found\n    */\n-  protected synchronized Class loadClass(String name, boolean resolve)\n+  protected synchronized Class<?> loadClass(String name, boolean resolve)\n     throws ClassNotFoundException\n   {\n     SecurityManager sm = SecurityManager.current;\n@@ -490,7 +489,7 @@ protected synchronized Class loadClass(String name, boolean resolve)\n    * @throws ClassNotFoundException when the class can not be found\n    * @since 1.2\n    */\n-  protected Class findClass(String name) throws ClassNotFoundException\n+  protected Class<?> findClass(String name) throws ClassNotFoundException\n   {\n     throw new ClassNotFoundException(name);\n   }\n@@ -508,7 +507,7 @@ protected Class findClass(String name) throws ClassNotFoundException\n    *         offset + len exceeds data\n    * @deprecated use {@link #defineClass(String, byte[], int, int)} instead\n    */\n-  protected final Class defineClass(byte[] data, int offset, int len)\n+  protected final Class<?> defineClass(byte[] data, int offset, int len)\n     throws ClassFormatError\n   {\n     return defineClass(null, data, offset, len);\n@@ -533,8 +532,8 @@ protected final Class defineClass(byte[] data, int offset, int len)\n    * @throws SecurityException if name starts with \"java.\"\n    * @since 1.1\n    */\n-  protected final Class defineClass(String name, byte[] data, int offset,\n-                                    int len) throws ClassFormatError\n+  protected final Class<?> defineClass(String name, byte[] data, int offset,\n+\t\t\t\t       int len) throws ClassFormatError\n   {\n     return defineClass(name, data, offset, len, null);\n   }\n@@ -562,15 +561,14 @@ protected final Class defineClass(String name, byte[] data, int offset,\n    *         do not match up\n    * @since 1.2\n    */\n-  protected final synchronized Class defineClass(String name, byte[] data,\n-\t\t\t\t\t\t int offset, int len,\n-\t\t\t\t\t\t ProtectionDomain domain)\n+  protected final synchronized Class<?> defineClass(String name, byte[] data,\n+\t\t\t\t\t\t    int offset, int len,\n+\t\t\t\t\t\t    ProtectionDomain domain)\n     throws ClassFormatError\n   {\n+    checkInitialized();\n     if (domain == null)\n       domain = defaultProtectionDomain;\n-    if (! initialized)\n-      throw new SecurityException(\"attempt to define class from uninitialized class loader\");\n     \n     Class retval = VMClassLoader.defineClass(this, name, data,\n \t\t\t\t\t     offset, len, domain);\n@@ -615,8 +613,9 @@ protected final Class<?> defineClass(String name, ByteBuffer buf,\n    * @throws NullPointerException if c is null\n    * @throws LinkageError if linking fails\n    */\n-  protected final void resolveClass(Class c)\n+  protected final void resolveClass(Class<?> c)\n   {\n+    checkInitialized();\n     VMClassLoader.resolveClass(c);\n   }\n \n@@ -629,9 +628,10 @@ protected final void resolveClass(Class c)\n    * @return the found class\n    * @throws ClassNotFoundException if the class cannot be found\n    */\n-  protected final Class findSystemClass(String name)\n+  protected final Class<?> findSystemClass(String name)\n     throws ClassNotFoundException\n   {\n+    checkInitialized();\n     return Class.forName(name, false, systemClassLoader);\n   }\n \n@@ -666,8 +666,9 @@ public final ClassLoader getParent()\n    * @param signers the signers to set\n    * @since 1.1\n    */\n-  protected final void setSigners(Class c, Object[] signers)\n+  protected final void setSigners(Class<?> c, Object[] signers)\n   {\n+    checkInitialized();\n     c.setSigners(signers);\n   }\n \n@@ -678,8 +679,9 @@ protected final void setSigners(Class c, Object[] signers)\n    * @return the found Class, or null if it is not found\n    * @since 1.1\n    */\n-  protected final synchronized Class findLoadedClass(String name)\n+  protected final synchronized Class<?> findLoadedClass(String name)\n   {\n+    checkInitialized();\n     // NOTE: If the VM is keeping its own cache, it may make sense to have\n     // this method be native.\n     return (Class) loadedClasses.get(name);\n@@ -732,15 +734,16 @@ public URL getResource(String name)\n    * @return an enumaration of all resources found\n    * @throws IOException if I/O errors occur in the process\n    * @since 1.2\n+   * @specnote this was <code>final</code> prior to 1.5\n    */\n-  public final Enumeration getResources(String name) throws IOException\n+  public final Enumeration<URL> getResources(String name) throws IOException\n   {\n-    Enumeration parentResources;\n+    Enumeration<URL> parentResources;\n     if (parent == null)\n       parentResources = VMClassLoader.getResources(name);\n     else\n       parentResources = parent.getResources(name);\n-    return new DoubleEnumeration(parentResources, findResources(name));\n+    return new DoubleEnumeration<URL>(parentResources, findResources(name));\n   }\n \n   /**\n@@ -760,9 +763,9 @@ public final Enumeration getResources(String name) throws IOException\n    * @throws IOException if I/O errors occur in the process\n    * @since 1.2\n    */\n-  protected Enumeration findResources(String name) throws IOException\n+  protected Enumeration<URL> findResources(String name) throws IOException\n   {\n-    return EmptyEnumeration.getInstance();\n+    return (Enumeration<URL>) EmptyEnumeration.getInstance();\n   }\n \n   /**\n@@ -807,7 +810,8 @@ public static final URL getSystemResource(String name)\n    * @throws IOException if I/O errors occur in the process\n    * @since 1.2\n    */\n-  public static Enumeration getSystemResources(String name) throws IOException\n+  public static Enumeration<URL> getSystemResources(String name)\n+    throws IOException\n   {\n     return systemClassLoader.getResources(name);\n   }\n@@ -939,7 +943,7 @@ protected Package definePackage(String name, String specTitle,\n       throw new IllegalArgumentException(\"Package \" + name\n                                          + \" already defined\");\n     Package p = new Package(name, specTitle, specVendor, specVersion,\n-                            implTitle, implVendor, implVersion, sealed);\n+                            implTitle, implVendor, implVersion, sealed, this);\n     synchronized (definedPackages)\n       {\n         definedPackages.put(name, p);\n@@ -1115,4 +1119,16 @@ final boolean isAncestorOf(ClassLoader loader)\n       }\n     return false;\n   }\n+\n+  /**\n+   * Before doing anything \"dangerous\" please call this method to make sure\n+   * this class loader instance was properly constructed (and not obtained\n+   * by exploiting the finalizer attack)\n+   * @see #initialized\n+   */\n+  private void checkInitialized()\n+  {\n+    if (! initialized)\n+      throw new SecurityException(\"attempt to use uninitialized class loader\");\n+  }\n }"}, {"sha": "bef9dd8d5f76dfbeb6dead6c832df3c33a237f8d", "filename": "libjava/java/lang/Thread.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fjava%2Flang%2FThread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fjava%2Flang%2FThread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.h?ref=0a32f469ac256a842ac1f721c37dab7ad2cf5e21", "patch": "@@ -145,7 +145,7 @@ class java::lang::Thread : public ::java::lang::Object\n   ::java::lang::Object * accessControlState;\n   ::gnu::gcj::RawData * interp_frame;\n   ::gnu::gcj::RawData * frame;\n-  volatile jint state;\n+  jint volatile state;\n   ::gnu::gcj::RawDataManaged * data;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "04b3819481aa56580cbd5bcdf559f1d2a88e5c74", "filename": "libjava/java/nio/charset/Charset.java", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java?ref=0a32f469ac256a842ac1f721c37dab7ad2cf5e21", "patch": "@@ -1,5 +1,5 @@\n /* Charset.java -- \n-   Copyright (C) 2002, 2004, 2005  Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004, 2005, 2007  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -61,14 +61,15 @@\n /**\n  * @author Jesse Rosenstock\n  * @since 1.4\n+ * @status updated to 1.5\n  */\n-public abstract class Charset implements Comparable\n+public abstract class Charset implements Comparable<Charset>\n {\n   private CharsetEncoder cachedEncoder;\n   private CharsetDecoder cachedDecoder;\n  \n   /**\n-   * Charset providers.\n+   * Extra Charset providers.\n    */\n   private static CharsetProvider[] providers;\n   \n@@ -174,7 +175,7 @@ public static boolean isSupported (String charsetName)\n    * Returns the Charset instance for the charset of the given name.\n    * \n    * @param charsetName\n-   * @return\n+   * @return the Charset instance for the indicated charset\n    * @throws UnsupportedCharsetException if this VM does not support\n    * the charset of the given name.\n    * @throws IllegalCharsetNameException if the given charset name is\n@@ -221,19 +222,20 @@ private static Charset charsetForName(String charsetName)\n     return cs;\n   }\n \n-  public static SortedMap availableCharsets()\n+  public static SortedMap<String, Charset> availableCharsets()\n   {\n-    TreeMap charsets = new TreeMap(String.CASE_INSENSITIVE_ORDER);\n-    for (Iterator i = provider().charsets(); i.hasNext(); )\n+    TreeMap<String, Charset> charsets\n+      = new TreeMap(String.CASE_INSENSITIVE_ORDER);\n+    for (Iterator<Charset> i = provider().charsets(); i.hasNext(); )\n       {\n-\tCharset cs = (Charset) i.next();\n+\tCharset cs = i.next();\n \tcharsets.put(cs.name(), cs);\n       }\n \n     CharsetProvider[] providers = providers2();\n     for (int j = 0; j < providers.length; j++)\n       {\n-        for (Iterator i = providers[j].charsets(); i.hasNext(); )\n+        for (Iterator<Charset> i = providers[j].charsets(); i.hasNext(); )\n           {\n             Charset cs = (Charset) i.next();\n             charsets.put(cs.name(), cs);\n@@ -295,14 +297,14 @@ public final String name ()\n     return canonicalName;\n   }\n \n-  public final Set aliases ()\n+  public final Set<String> aliases ()\n   {\n     if (aliases == null)\n-      return Collections.EMPTY_SET;\n+      return Collections.<String>emptySet();\n \n     // should we cache the aliasSet instead?\n     int n = aliases.length;\n-    HashSet aliasSet = new HashSet (n);\n+    HashSet<String> aliasSet = new HashSet<String> (n);\n     for (int i = 0; i < n; ++i)\n         aliasSet.add (aliases[i]);\n     return Collections.unmodifiableSet (aliasSet);\n@@ -387,9 +389,9 @@ public final synchronized CharBuffer decode (ByteBuffer bb)\n       }\n   }\n \n-  public final int compareTo (Object ob)\n+  public final int compareTo (Charset other)\n   {\n-    return canonicalName.compareToIgnoreCase (((Charset) ob).canonicalName);\n+    return canonicalName.compareToIgnoreCase (other.canonicalName);\n   }\n \n   public final int hashCode ()"}, {"sha": "6c0d7213dea2ab1cdc784b80fd858aabe18f99ca", "filename": "libjava/java/util/Calendar.java", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fjava%2Futil%2FCalendar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32f469ac256a842ac1f721c37dab7ad2cf5e21/libjava%2Fjava%2Futil%2FCalendar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCalendar.java?ref=0a32f469ac256a842ac1f721c37dab7ad2cf5e21", "patch": "@@ -1,5 +1,6 @@\n /* Calendar.java --\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005  Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -103,7 +104,8 @@\n  * @see TimeZone\n  * @see java.text.DateFormat\n  */\n-public abstract class Calendar implements Serializable, Cloneable\n+public abstract class Calendar\n+  implements Serializable, Cloneable, Comparable<Calendar>\n {\n   /**\n    * Constant representing the era time field.\n@@ -460,6 +462,8 @@ protected Calendar(TimeZone zone, Locale locale)\n   /**\n    * Creates a calendar representing the actual time, using the default\n    * time zone and locale.\n+   * \n+   * @return The new calendar.\n    */\n   public static synchronized Calendar getInstance()\n   {\n@@ -469,7 +473,12 @@ public static synchronized Calendar getInstance()\n   /**\n    * Creates a calendar representing the actual time, using the given\n    * time zone and the default locale.\n-   * @param zone a time zone.\n+   * \n+   * @param zone a time zone (<code>null</code> not permitted).\n+   * \n+   * @return The new calendar.\n+   * \n+   * @throws NullPointerException if <code>zone</code> is <code>null</code>.\n    */\n   public static synchronized Calendar getInstance(TimeZone zone)\n   {\n@@ -479,7 +488,12 @@ public static synchronized Calendar getInstance(TimeZone zone)\n   /**\n    * Creates a calendar representing the actual time, using the default\n    * time zone and the given locale.\n-   * @param locale a locale.\n+   * \n+   * @param locale a locale (<code>null</code> not permitted).\n+   * \n+   * @return The new calendar.\n+   * \n+   * @throws NullPointerException if <code>locale</code> is <code>null</code>.\n    */\n   public static synchronized Calendar getInstance(Locale locale)\n   {\n@@ -501,8 +515,14 @@ public static synchronized Calendar getInstance(Locale locale)\n   /**\n    * Creates a calendar representing the actual time, using the given\n    * time zone and locale.\n-   * @param zone a time zone.\n-   * @param locale a locale.\n+   * \n+   * @param zone a time zone (<code>null</code> not permitted).\n+   * @param locale a locale (<code>null</code> not permitted).\n+   * \n+   * @return The new calendar.\n+   * \n+   * @throws NullPointerException if <code>zone</code> or <code>locale</code>\n+   *     is <code>null</code>.\n    */\n   public static synchronized Calendar getInstance(TimeZone zone, Locale locale)\n   {\n@@ -600,6 +620,10 @@ public final Date getTime()\n   /**\n    * Sets this Calendar's time to the given Date.  All time fields\n    * are invalidated by this method.\n+   * \n+   * @param date  the date (<code>null</code> not permitted).\n+   * \n+   * @throws NullPointerException if <code>date</code> is <code>null</code>.\n    */\n   public final void setTime(Date date)\n   {\n@@ -860,6 +884,7 @@ public final void clear(int field)\n                          1, 1970, JANUARY, 1, 1, 1, 1, THURSDAY, 1, AM, 0, 0, 0,\n                          0, 0, zone.getRawOffset(), 0\n                        };\n+    complete();\n     isTimeSet = false;\n     areFieldsSet = false;\n     isSet[field] = false;\n@@ -1020,6 +1045,8 @@ public void roll(int field, int amount)\n   public void setTimeZone(TimeZone zone)\n   {\n     this.zone = zone;\n+    computeTime();\n+    computeFields();\n   }\n \n   /**\n@@ -1175,6 +1202,31 @@ public int getActualMaximum(int field)\n     return max;\n   }\n \n+  /**\n+   * Compares the time of two calendar instances.\n+   * @param calendar the calendar to which the time should be compared.\n+   * @return 0 if the two calendars are set to the same time, \n+   * less than 0 if the time of this calendar is before that of \n+   * <code>cal</code>, or more than 0 if the time of this calendar is after\n+   * that of <code>cal</code>.\n+   *\n+   * @param cal the calendar to compare this instance with.\n+   * @throws NullPointerException if <code>cal</code> is null.\n+   * @throws IllegalArgumentException if either calendar has fields set to \n+   * invalid values.\n+   * @since 1.5\n+   */\n+  public int compareTo(Calendar cal)\n+  {\n+    long t1 = getTimeInMillis();\n+    long t2 = cal.getTimeInMillis();\n+    if(t1 == t2)\n+      return 0;\n+    if(t1 > t2)\n+      return 1;\n+    return -1;\n+  }\n+\n   /**\n    * Return a clone of this object.\n    */"}]}