{"sha": "e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExYjIxMGE5YzFiNjhjMzYxYTlmOWYxNzJhNGQyNmUwZDM3ZWQ4Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-06-16T22:13:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-16T22:13:13Z"}, "message": "locale_facets.tcc (time_get<>::_M_extract_via_format): Ignore the value of the __err argument.\n\n2006-06-17  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (time_get<>::_M_extract_via_format):\n\tIgnore the value of the __err argument.\n\t(time_get<>::do_get_weekday): Likewise.\n\t(time_get<>::do_get_monthname): Likewise.\n\t* testsuite/22_locale/time_get/get_year/wchar_t/5.cc: New.\n\t* testsuite/22_locale/time_get/get_year/char/5.cc: Likewise.\n\t* testsuite/22_locale/time_get/get_monthname/wchar_t/5.cc: Likewise.\n\t* testsuite/22_locale/time_get/get_monthname/char/5.cc: Likewise.\n\t* testsuite/22_locale/time_get/get_weekday/wchar_t/5.cc: Likewise.\n\t* testsuite/22_locale/time_get/get_weekday/char/5.cc: Likewise.\n\t* testsuite/22_locale/time_get/get_date/wchar_t/5.cc: Likewise.\n\t* testsuite/22_locale/time_get/get_date/char/5.cc: Likewise.\n\t* testsuite/22_locale/time_get/get_time/wchar_t/5.cc: Likewise.\n\t* testsuite/22_locale/time_get/get_time/char/5.cc: Likewise.\n\nFrom-SVN: r114728", "tree": {"sha": "1ed1991be78b30dd38f0876596509661868e5821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed1991be78b30dd38f0876596509661868e5821"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/comments", "author": null, "committer": null, "parents": [{"sha": "75a829785fbfeedcb435e7aa3b43d96ad44926b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a829785fbfeedcb435e7aa3b43d96ad44926b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a829785fbfeedcb435e7aa3b43d96ad44926b0"}], "stats": {"total": 806, "additions": 765, "deletions": 41}, "files": [{"sha": "e3b3442c110c9fd8ed1cf301b179927fad55591a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -1,3 +1,20 @@\n+2006-06-17  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (time_get<>::_M_extract_via_format):\n+\tIgnore the value of the __err argument.\n+\t(time_get<>::do_get_weekday): Likewise.\n+\t(time_get<>::do_get_monthname): Likewise.\n+\t* testsuite/22_locale/time_get/get_year/wchar_t/5.cc: New.\n+\t* testsuite/22_locale/time_get/get_year/char/5.cc: Likewise.\n+\t* testsuite/22_locale/time_get/get_monthname/wchar_t/5.cc: Likewise.\n+\t* testsuite/22_locale/time_get/get_monthname/char/5.cc: Likewise.\n+\t* testsuite/22_locale/time_get/get_weekday/wchar_t/5.cc: Likewise.\n+\t* testsuite/22_locale/time_get/get_weekday/char/5.cc: Likewise.\n+\t* testsuite/22_locale/time_get/get_date/wchar_t/5.cc: Likewise.\n+\t* testsuite/22_locale/time_get/get_date/char/5.cc: Likewise.\n+\t* testsuite/22_locale/time_get/get_time/wchar_t/5.cc: Likewise.\n+\t* testsuite/22_locale/time_get/get_time/char/5.cc: Likewise.\n+\n 2006-06-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/pb_ds/detail/type_utils.hpp (numeric_traits): Add,"}, {"sha": "fd9b0bd1ed1a6c3f08d4e0370bbd0d4698f5e306", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 56, "deletions": 41, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -1891,7 +1891,8 @@ _GLIBCXX_END_LDBL_NAMESPACE\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n       const size_t __len = char_traits<_CharT>::length(__format);\n \n-      for (size_t __i = 0; __beg != __end && __i < __len && !__err; ++__i)\n+      ios_base::iostate __tmperr = ios_base::goodbit;\n+      for (size_t __i = 0; __beg != __end && __i < __len && !__tmperr; ++__i)\n \t{\n \t  if (__ctype.narrow(__format[__i], 0) == '%')\n \t    {\n@@ -1909,92 +1910,92 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \t\t  const char_type*  __days1[7];\n \t\t  __tp._M_days_abbreviated(__days1);\n \t\t  __beg = _M_extract_name(__beg, __end, __tm->tm_wday, __days1,\n-\t\t\t\t\t  7, __io, __err);\n+\t\t\t\t\t  7, __io, __tmperr);\n \t\t  break;\n \t\tcase 'A':\n \t\t  // Weekday name [tm_wday].\n \t\t  const char_type*  __days2[7];\n \t\t  __tp._M_days(__days2);\n \t\t  __beg = _M_extract_name(__beg, __end, __tm->tm_wday, __days2,\n-\t\t\t\t\t  7, __io, __err);\n+\t\t\t\t\t  7, __io, __tmperr);\n \t\t  break;\n \t\tcase 'h':\n \t\tcase 'b':\n \t\t  // Abbreviated month name [tm_mon]\n \t\t  const char_type*  __months1[12];\n \t\t  __tp._M_months_abbreviated(__months1);\n \t\t  __beg = _M_extract_name(__beg, __end, __tm->tm_mon, \n-\t\t\t\t\t  __months1, 12, __io, __err);\n+\t\t\t\t\t  __months1, 12, __io, __tmperr);\n \t\t  break;\n \t\tcase 'B':\n \t\t  // Month name [tm_mon].\n \t\t  const char_type*  __months2[12];\n \t\t  __tp._M_months(__months2);\n \t\t  __beg = _M_extract_name(__beg, __end, __tm->tm_mon, \n-\t\t\t\t\t  __months2, 12, __io, __err);\n+\t\t\t\t\t  __months2, 12, __io, __tmperr);\n \t\t  break;\n \t\tcase 'c':\n \t\t  // Default time and date representation.\n \t\t  const char_type*  __dt[2];\n \t\t  __tp._M_date_time_formats(__dt);\n-\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __err, \n+\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n \t\t\t\t\t\t__tm, __dt[0]);\n \t\t  break;\n \t\tcase 'd':\n \t\t  // Day [01, 31]. [tm_mday]\n \t\t  __beg = _M_extract_num(__beg, __end, __tm->tm_mday, 1, 31, 2,\n-\t\t\t\t\t __io, __err);\n+\t\t\t\t\t __io, __tmperr);\n \t\t  break;\n \t\tcase 'e':\n \t\t  // Day [1, 31], with single digits preceded by\n \t\t  // space. [tm_mday]\n \t\t  if (__ctype.is(ctype_base::space, *__beg))\n \t\t    __beg = _M_extract_num(++__beg, __end, __tm->tm_mday, 1, 9,\n-\t\t\t\t\t   1, __io, __err);\n+\t\t\t\t\t   1, __io, __tmperr);\n \t\t  else\n \t\t    __beg = _M_extract_num(__beg, __end, __tm->tm_mday, 10, 31,\n-\t\t\t\t\t   2, __io, __err);\n+\t\t\t\t\t   2, __io, __tmperr);\n \t\t  break;\n \t\tcase 'D':\n \t\t  // Equivalent to %m/%d/%y.[tm_mon, tm_mday, tm_year]\n \t\t  __cs = \"%m/%d/%y\";\n \t\t  __ctype.widen(__cs, __cs + 9, __wcs);\n-\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __err, \n+\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n \t\t\t\t\t\t__tm, __wcs);\n \t\t  break;\n \t\tcase 'H':\n \t\t  // Hour [00, 23]. [tm_hour]\n \t\t  __beg = _M_extract_num(__beg, __end, __tm->tm_hour, 0, 23, 2,\n-\t\t\t\t\t __io, __err);\n+\t\t\t\t\t __io, __tmperr);\n \t\t  break;\n \t\tcase 'I':\n \t\t  // Hour [01, 12]. [tm_hour]\n \t\t  __beg = _M_extract_num(__beg, __end, __tm->tm_hour, 1, 12, 2,\n-\t\t\t\t\t __io, __err);\n+\t\t\t\t\t __io, __tmperr);\n \t\t  break;\n \t\tcase 'm':\n \t\t  // Month [01, 12]. [tm_mon]\n \t\t  __beg = _M_extract_num(__beg, __end, __mem, 1, 12, 2, \n-\t\t\t\t\t __io, __err);\n-\t\t  if (!__err)\n+\t\t\t\t\t __io, __tmperr);\n+\t\t  if (!__tmperr)\n \t\t    __tm->tm_mon = __mem - 1;\n \t\t  break;\n \t\tcase 'M':\n \t\t  // Minute [00, 59]. [tm_min]\n \t\t  __beg = _M_extract_num(__beg, __end, __tm->tm_min, 0, 59, 2,\n-\t\t\t\t\t __io, __err);\n+\t\t\t\t\t __io, __tmperr);\n \t\t  break;\n \t\tcase 'n':\n \t\t  if (__ctype.narrow(*__beg, 0) == '\\n')\n \t\t    ++__beg;\n \t\t  else\n-\t\t    __err |= ios_base::failbit;\n+\t\t    __tmperr |= ios_base::failbit;\n \t\t  break;\n \t\tcase 'R':\n \t\t  // Equivalent to (%H:%M).\n \t\t  __cs = \"%H:%M\";\n \t\t  __ctype.widen(__cs, __cs + 6, __wcs);\n-\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __err, \n+\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n \t\t\t\t\t\t__tm, __wcs);\n \t\t  break;\n \t\tcase 'S':\n@@ -2005,46 +2006,46 @@ _GLIBCXX_END_LDBL_NAMESPACE\n #else\n \t\t  __beg = _M_extract_num(__beg, __end, __tm->tm_sec, 0, 61, 2,\n #endif\n-\t\t\t\t\t __io, __err);\n+\t\t\t\t\t __io, __tmperr);\n \t\t  break;\n \t\tcase 't':\n \t\t  if (__ctype.narrow(*__beg, 0) == '\\t')\n \t\t    ++__beg;\n \t\t  else\n-\t\t    __err |= ios_base::failbit;\n+\t\t    __tmperr |= ios_base::failbit;\n \t\t  break;\n \t\tcase 'T':\n \t\t  // Equivalent to (%H:%M:%S).\n \t\t  __cs = \"%H:%M:%S\";\n \t\t  __ctype.widen(__cs, __cs + 9, __wcs);\n-\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __err, \n+\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n \t\t\t\t\t\t__tm, __wcs);\n \t\t  break;\n \t\tcase 'x':\n \t\t  // Locale's date.\n \t\t  const char_type*  __dates[2];\n \t\t  __tp._M_date_formats(__dates);\n-\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __err, \n+\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n \t\t\t\t\t\t__tm, __dates[0]);\n \t\t  break;\n \t\tcase 'X':\n \t\t  // Locale's time.\n \t\t  const char_type*  __times[2];\n \t\t  __tp._M_time_formats(__times);\n-\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __err, \n+\t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n \t\t\t\t\t\t__tm, __times[0]);\n \t\t  break;\n \t\tcase 'y':\n \t\tcase 'C': // C99\n \t\t  // Two digit year. [tm_year]\n \t\t  __beg = _M_extract_num(__beg, __end, __tm->tm_year, 0, 99, 2,\n-\t\t\t\t\t __io, __err);\n+\t\t\t\t\t __io, __tmperr);\n \t\t  break;\n \t\tcase 'Y':\n \t\t  // Year [1900). [tm_year]\n \t\t  __beg = _M_extract_num(__beg, __end, __mem, 0, 9999, 4,\n-\t\t\t\t\t __io, __err);\n-\t\t  if (!__err)\n+\t\t\t\t\t __io, __tmperr);\n+\t\t  if (!__tmperr)\n \t\t    __tm->tm_year = __mem - 1900;\n \t\t  break;\n \t\tcase 'Z':\n@@ -2054,25 +2055,25 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \t\t      int __tmp;\n \t\t      __beg = _M_extract_name(__beg, __end, __tmp,\n \t\t\t\t       __timepunct_cache<_CharT>::_S_timezones,\n-\t\t\t\t\t      14, __io, __err);\n+\t\t\t\t\t      14, __io, __tmperr);\n \n \t\t      // GMT requires special effort.\n-\t\t      if (__beg != __end && !__err && __tmp == 0\n+\t\t      if (__beg != __end && !__tmperr && __tmp == 0\n \t\t\t  && (*__beg == __ctype.widen('-')\n \t\t\t      || *__beg == __ctype.widen('+')))\n \t\t\t{\n \t\t\t  __beg = _M_extract_num(__beg, __end, __tmp, 0, 23, 2,\n-\t\t\t\t\t\t __io, __err);\n+\t\t\t\t\t\t __io, __tmperr);\n \t\t\t  __beg = _M_extract_num(__beg, __end, __tmp, 0, 59, 2,\n-\t\t\t\t\t\t __io, __err);\n+\t\t\t\t\t\t __io, __tmperr);\n \t\t\t}\n \t\t    }\n \t\t  else\n-\t\t    __err |= ios_base::failbit;\n+\t\t    __tmperr |= ios_base::failbit;\n \t\t  break;\n \t\tdefault:\n \t\t  // Not recognized.\n-\t\t  __err |= ios_base::failbit;\n+\t\t  __tmperr |= ios_base::failbit;\n \t\t}\n \t    }\n \t  else\n@@ -2081,9 +2082,13 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \t      if (__format[__i] == *__beg)\n \t\t++__beg;\n \t      else\n-\t\t__err |= ios_base::failbit;\n+\t\t__tmperr |= ios_base::failbit;\n \t    }\n \t}\n+\n+      if (__tmperr)\n+\t__err |= ios_base::failbit;\n+  \n       return __beg;\n     }\n \n@@ -2121,6 +2126,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \t__member = __value;\n       else\n \t__err |= ios_base::failbit;\n+\n       return __beg;\n     }\n \n@@ -2196,6 +2202,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \t__testvalid = false;\n       if (!__testvalid)\n \t__err |= ios_base::failbit;\n+\n       return __beg;\n     }\n \n@@ -2246,15 +2253,17 @@ _GLIBCXX_END_LDBL_NAMESPACE\n       const char_type*  __days[7];\n       __tp._M_days_abbreviated(__days);\n       int __tmpwday;\n-      __beg = _M_extract_name(__beg, __end, __tmpwday, __days, 7, __io, __err);\n+      ios_base::iostate __tmperr = ios_base::goodbit;\n+      __beg = _M_extract_name(__beg, __end, __tmpwday, __days, 7,\n+\t\t\t      __io, __tmperr);\n \n       // Check to see if non-abbreviated name exists, and extract.\n       // NB: Assumes both _M_days and _M_days_abbreviated organized in\n       // exact same order, first to last, such that the resulting\n       // __days array with the same index points to a day, and that\n       // day's abbreviated form.\n       // NB: Also assumes that an abbreviated name is a subset of the name.\n-      if (!__err && __beg != __end)\n+      if (!__tmperr && __beg != __end)\n \t{\n \t  size_t __pos = __traits_type::length(__days[__tmpwday]);\n \t  __tp._M_days(__days);\n@@ -2267,12 +2276,14 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \t\t     && __name[__pos] == *__beg)\n \t\t++__beg, ++__pos;\n \t      if (__len != __pos)\n-\t\t__err |= ios_base::failbit;\n+\t\t__tmperr |= ios_base::failbit;\n \t    }\n \t}\n-      if (!__err)\n+      if (!__tmperr)\n \t__tm->tm_wday = __tmpwday;\n-      \n+      else\n+\t__err |= ios_base::failbit;\n+\n       if (__beg == __end)\n \t__err |= ios_base::eofbit;\n       return __beg;\n@@ -2291,16 +2302,17 @@ _GLIBCXX_END_LDBL_NAMESPACE\n       const char_type*  __months[12];\n       __tp._M_months_abbreviated(__months);\n       int __tmpmon;\n+      ios_base::iostate __tmperr = ios_base::goodbit;\n       __beg = _M_extract_name(__beg, __end, __tmpmon, __months, 12, \n-\t\t\t      __io, __err);\n+\t\t\t      __io, __tmperr);\n \n       // Check to see if non-abbreviated name exists, and extract.\n       // NB: Assumes both _M_months and _M_months_abbreviated organized in\n       // exact same order, first to last, such that the resulting\n       // __months array with the same index points to a month, and that\n       // month's abbreviated form.\n       // NB: Also assumes that an abbreviated name is a subset of the name.\n-      if (!__err && __beg != __end)\n+      if (!__tmperr && __beg != __end)\n \t{\n \t  size_t __pos = __traits_type::length(__months[__tmpmon]);\n \t  __tp._M_months(__months);\n@@ -2313,11 +2325,13 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \t\t     && __name[__pos] == *__beg)\n \t\t++__beg, ++__pos;\n \t      if (__len != __pos)\n-\t\t__err |= ios_base::failbit;\n+\t\t__tmperr |= ios_base::failbit;\n \t    }\n \t}\n-      if (!__err)\n+      if (!__tmperr)\n \t__tm->tm_mon = __tmpmon;\n+      else\n+\t__err |= ios_base::failbit;\n \n       if (__beg == __end)\n \t__err |= ios_base::eofbit;\n@@ -2347,6 +2361,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \t__tm->tm_year = __i == 2 ? __value : __value - 1900;\n       else\n \t__err |= ios_base::failbit;\n+\n       if (__beg == __end)\n \t__err |= ios_base::eofbit;\n       return __beg;"}, {"sha": "e20b0063955139e69c6ef6c1852eb8d4d10ce84c", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/char/5.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F5.cc?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -0,0 +1,71 @@\n+// 2006-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Check that the err argument is ignored by get_date.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef string::const_iterator iter_type;\n+  typedef time_get<char, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  const tm time_sanity = __gnu_test::test_tm(0, 0, 12, 26, 5, 97, 2, 0, 0);\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  istringstream iss; \n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const string str0 = \"1\";\n+  iter_type end0 = tg.get_date(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm0.tm_year == 0 );\n+  VERIFY( tm0.tm_mon == 0 );\n+  VERIFY( tm0.tm_mday == 0 );\n+\n+  const string str1 = \"06/26/97 \";\n+  iter_type end1 = tg.get_date(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_year == time_sanity.tm_year );\n+  VERIFY( tm1.tm_mon == time_sanity.tm_mon );\n+  VERIFY( tm1.tm_mday == time_sanity.tm_mday );\n+  VERIFY( *end1 == ' ' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4ad37d9445ca055f229c5cfeabebb090e42a687e", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/5.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F5.cc?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -0,0 +1,71 @@\n+// 2006-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Check that the err argument is ignored by get_date.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef wstring::const_iterator iter_type;\n+  typedef time_get<wchar_t, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  const tm time_sanity = __gnu_test::test_tm(0, 0, 12, 26, 5, 97, 2, 0, 0);\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  wistringstream iss; \n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const wstring str0 = L\"1\";\n+  iter_type end0 = tg.get_date(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm0.tm_year == 0 );\n+  VERIFY( tm0.tm_mon == 0 );\n+  VERIFY( tm0.tm_mday == 0 );\n+\n+  const wstring str1 = L\"06/26/97 \";\n+  iter_type end1 = tg.get_date(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_year == time_sanity.tm_year );\n+  VERIFY( tm1.tm_mon == time_sanity.tm_mon );\n+  VERIFY( tm1.tm_mday == time_sanity.tm_mday );\n+  VERIFY( *end1 == L' ' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bd6bfb5286b0824449b6066124f7617ff584abe6", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/char/5.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F5.cc?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -0,0 +1,67 @@\n+// 2006-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Check that the err argument is ignored by get_monthname.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef string::const_iterator iter_type;\n+  typedef time_get<char, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  istringstream iss; \n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const string str0 = \"S\";\n+  iter_type end0 = tg.get_monthname(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm0.tm_mon == 0 );\n+\n+  const string str1 = \"September \";\n+  iter_type end1 = tg.get_monthname(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_mon == 8 );\n+  VERIFY( *end1 == ' ' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e209a0a0925dcfbbd6dd9224848a1e1a52d5c294", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/wchar_t/5.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F5.cc?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -0,0 +1,67 @@\n+// 2006-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Check that the err argument is ignored by get_monthname.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef wstring::const_iterator iter_type;\n+  typedef time_get<wchar_t, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  wistringstream iss; \n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const wstring str0 = L\"S\";\n+  iter_type end0 = tg.get_monthname(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm0.tm_mon == 0 );\n+\n+  const wstring str1 = L\"September \";\n+  iter_type end1 = tg.get_monthname(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_mon == 8 );\n+  VERIFY( *end1 == L' ' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d4b5bafb1efe2241f8d35822e91fb3c4445e1052", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/char/5.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F5.cc?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -0,0 +1,72 @@\n+// 2006-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Check that the err argument is ignored by get_time.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef string::const_iterator iter_type;\n+  typedef time_get<char, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  const tm time_sanity = __gnu_test::test_tm(0, 0, 12, 26, 5, 97, 2, 0, 0);\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  istringstream iss; \n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const string str0 = \"1\";\n+  iter_type end0 = tg.get_time(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm0.tm_sec == 0 );\n+  VERIFY( tm0.tm_min == 0 );\n+  VERIFY( tm0.tm_hour == 0 );\n+\n+  const string str1 = \"12:00:00 \";\n+  iter_type end1 = tg.get_time(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_sec == time_sanity.tm_sec );\n+  VERIFY( tm1.tm_min == time_sanity.tm_min );\n+  VERIFY( tm1.tm_hour == time_sanity.tm_hour );\n+  VERIFY( *end1 == ' ' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fb6b36f2541643801100f080cfebdb296ec3cc4b", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/wchar_t/5.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F5.cc?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -0,0 +1,72 @@\n+// 2006-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Check that the err argument is ignored by get_time.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef wstring::const_iterator iter_type;\n+  typedef time_get<wchar_t, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  const tm time_sanity = __gnu_test::test_tm(0, 0, 12, 26, 5, 97, 2, 0, 0);\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  wistringstream iss; \n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const wstring str0 = L\"1\";\n+  iter_type end0 = tg.get_time(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm0.tm_sec == 0 );\n+  VERIFY( tm0.tm_min == 0 );\n+  VERIFY( tm0.tm_hour == 0 );\n+\n+  const wstring str1 = L\"12:00:00 \";\n+  iter_type end1 = tg.get_time(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_sec == time_sanity.tm_sec );\n+  VERIFY( tm1.tm_min == time_sanity.tm_min );\n+  VERIFY( tm1.tm_hour == time_sanity.tm_hour );\n+  VERIFY( *end1 == L' ' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "457cb3c138fbe3ad99d6b474732f697411a3e58e", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/char/5.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F5.cc?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -0,0 +1,68 @@\n+// 2006-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Check that the err argument is ignored by get_weekday.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef string::const_iterator iter_type;\n+  typedef time_get<char, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  const tm time_sanity = __gnu_test::test_tm(0, 0, 12, 26, 5, 97, 2, 0, 0);\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  istringstream iss; \n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const string str0 = \"T\";\n+  iter_type end0 = tg.get_weekday(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_wday == 0 );\n+\n+  const string str1 = \"Tuesday \";\n+  iter_type end1 = tg.get_weekday(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_wday == time_sanity.tm_wday );\n+  VERIFY( *end1 == ' ' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "402c949f19c13e1034f2dbdb33c0c790bbb1fa8c", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/wchar_t/5.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F5.cc?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -0,0 +1,68 @@\n+// 2006-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Check that the err argument is ignored by get_weekday.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef wstring::const_iterator iter_type;\n+  typedef time_get<wchar_t, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  const tm time_sanity = __gnu_test::test_tm(0, 0, 12, 26, 5, 97, 2, 0, 0);\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  wistringstream iss; \n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const wstring str0 = L\"T\";\n+  iter_type end0 = tg.get_weekday(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_wday == 0 );\n+\n+  const wstring str1 = L\"Tuesday \";\n+  iter_type end1 = tg.get_weekday(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_wday == time_sanity.tm_wday );\n+  VERIFY( *end1 == L' ' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3182719c74fa04583f8ca18c248524b3f41d4759", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/char/5.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F5.cc?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -0,0 +1,68 @@\n+// 2006-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006  Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Check that the err argument is ignored by get_year.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef string::const_iterator iter_type;\n+  typedef time_get<char, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  const tm time_sanity = __gnu_test::test_tm(0, 0, 12, 26, 5, 97, 2, 0, 0);\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  istringstream iss;\n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const string str0 = \"1\";\n+  iter_type end0 = tg.get_year(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm0.tm_year == 0 );\n+\n+  const string str1 = \"1997 \";\n+  iter_type end1 = tg.get_year(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_year == time_sanity.tm_year );\n+  VERIFY( *end1 ==  ' ' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9fc14354301672bfa4333769cc41bf2a8f9d8c51", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/wchar_t/5.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b210a9c1b68c361a9f9f172a4d26e0d37ed87/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F5.cc?ref=e11b210a9c1b68c361a9f9f172a4d26e0d37ed87", "patch": "@@ -0,0 +1,68 @@\n+// 2006-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006  Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Check that the err argument is ignored by get_year.\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef wstring::const_iterator iter_type;\n+  typedef time_get<wchar_t, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;  \n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  const tm time_sanity = __gnu_test::test_tm(0, 0, 12, 26, 5, 97, 2, 0, 0);\n+  tm tm0 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+  tm tm1 = __gnu_test::test_tm(0, 0, 0, 0, 0, 0, 0, 0, 0);\n+\n+  wistringstream iss;\n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  const wstring str0 = L\"1\";\n+  iter_type end0 = tg.get_year(str0.begin(), str0.end(), iss, err, &tm0);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm0.tm_year == 0 );\n+\n+  const wstring str1 = L\"1997 \";\n+  iter_type end1 = tg.get_year(str1.begin(), str1.end(), iss, err, &tm1);\n+  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( tm1.tm_year == time_sanity.tm_year );\n+  VERIFY( *end1 ==  L' ' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}