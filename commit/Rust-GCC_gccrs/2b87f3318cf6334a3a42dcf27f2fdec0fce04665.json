{"sha": "2b87f3318cf6334a3a42dcf27f2fdec0fce04665", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4N2YzMzE4Y2Y2MzM0YTNhNDJkY2YyN2YyZmRlYzBmY2UwNDY2NQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-17T13:46:07Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-17T13:46:07Z"}, "message": "libstdc++: Non-triv-copyable extra args aren't simple [PR100940]\n\nThis force-enables perfect forwarding call wrapper semantics whenever\nthe extra arguments of a partially applied range adaptor aren't all\ntrivially copyable, so as to avoid incurring unnecessary copies of\npotentially expensive-to-copy objects (such as std::function objects)\nwhen invoking the adaptor.\n\n\tPR libstdc++/100940\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (__adaptor::_Partial): For the \"simple\"\n\tforwarding partial specializations, also require that\n\tthe extra arguments are trivially copyable.\n\t* testsuite/std/ranges/adaptors/100577.cc (test04): New test.", "tree": {"sha": "78afc686951f29d137c7725b3d71d345885645b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78afc686951f29d137c7725b3d71d345885645b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b87f3318cf6334a3a42dcf27f2fdec0fce04665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b87f3318cf6334a3a42dcf27f2fdec0fce04665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b87f3318cf6334a3a42dcf27f2fdec0fce04665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b87f3318cf6334a3a42dcf27f2fdec0fce04665/comments", "author": null, "committer": null, "parents": [{"sha": "0f4a2fb44dad6c9c140226fc19ed16109b85e6f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4a2fb44dad6c9c140226fc19ed16109b85e6f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f4a2fb44dad6c9c140226fc19ed16109b85e6f4"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "73c35dafd294425ae1eee66d0139436d2aff3bf9", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b87f3318cf6334a3a42dcf27f2fdec0fce04665/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b87f3318cf6334a3a42dcf27f2fdec0fce04665/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=2b87f3318cf6334a3a42dcf27f2fdec0fce04665", "patch": "@@ -896,11 +896,12 @@ namespace views::__adaptor\n     };\n \n   // Partial specialization of the primary template for the case where the extra\n-  // arguments of the adaptor can always be safely forwarded by const reference.\n-  // This lets us get away with a single operator() overload, which makes\n-  // overload resolution failure diagnostics more concise.\n+  // arguments of the adaptor can always be safely and efficiently forwarded by\n+  // const reference.  This lets us get away with a single operator() overload,\n+  // which makes overload resolution failure diagnostics more concise.\n   template<typename _Adaptor, typename... _Args>\n     requires __adaptor_has_simple_extra_args<_Adaptor, _Args...>\n+      && (is_trivially_copyable_v<_Args> && ...)\n     struct _Partial<_Adaptor, _Args...> : _RangeAdaptorClosure\n     {\n       tuple<_Args...> _M_args;\n@@ -930,6 +931,7 @@ namespace views::__adaptor\n   // where _Adaptor accepts a single extra argument.\n   template<typename _Adaptor, typename _Arg>\n     requires __adaptor_has_simple_extra_args<_Adaptor, _Arg>\n+      && is_trivially_copyable_v<_Arg>\n     struct _Partial<_Adaptor, _Arg> : _RangeAdaptorClosure\n     {\n       _Arg _M_arg;"}, {"sha": "06be4980ddb07f057dd131d73be613c078ff6561", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/100577.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b87f3318cf6334a3a42dcf27f2fdec0fce04665/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b87f3318cf6334a3a42dcf27f2fdec0fce04665/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F100577.cc?ref=2b87f3318cf6334a3a42dcf27f2fdec0fce04665", "patch": "@@ -21,6 +21,7 @@\n // PR libstdc++/100577\n \n #include <ranges>\n+#include <functional>\n \n namespace ranges = std::ranges;\n namespace views = std::ranges::views;\n@@ -113,4 +114,17 @@ test03()\n   x | std::views::drop(S{});\n }\n \n+void\n+test04()\n+{\n+  // Non-trivially-copyable extra arguments make a closure not simple.\n+  using F = std::function<bool(bool)>;\n+  static_assert(!std::is_trivially_copyable_v<F>);\n+  using views::__adaptor::__closure_has_simple_call_op;\n+  static_assert(!__closure_has_simple_call_op<decltype(views::take_while(std::declval<F>()))>);\n+  static_assert(!__closure_has_simple_call_op<decltype(views::drop_while(std::declval<F>()))>);\n+  static_assert(!__closure_has_simple_call_op<decltype(views::filter(std::declval<F>()))>);\n+  static_assert(!__closure_has_simple_call_op<decltype(views::transform(std::declval<F>()))>);\n+}\n+\n // { dg-prune-output \"in requirements\" }"}]}