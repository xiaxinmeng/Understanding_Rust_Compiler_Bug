{"sha": "3a09e0260a6ed1b8e16f6b2eaa29ec5bf51d1e61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwOWUwMjYwYTZlZDFiOGUxNmY2YjJlYWEyOWVjNWJmNTFkMWU2MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-07-17T08:09:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-17T08:09:54Z"}, "message": "[Ada] Minor fix for imported C++ constructors\n\nC++ constructors are imported as functions and then internally rewritten into\nprocedures taking the \"this\" pointer as first parameter.  Now this parameter is\nnot of an access type but of the type directly, so it must be In/Out and not\njust In.\n\n2018-07-17  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_disp.adb (Gen_Parameters_Profile): Make the _Init parameter an\n\tIn/Out parameter.\n\t(Set_CPP_Constructors): Adjust comment accordingly.\n\nFrom-SVN: r262790", "tree": {"sha": "a439063f7b4d4680f59e0bbb7169aec3ad699fad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a439063f7b4d4680f59e0bbb7169aec3ad699fad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a09e0260a6ed1b8e16f6b2eaa29ec5bf51d1e61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a09e0260a6ed1b8e16f6b2eaa29ec5bf51d1e61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a09e0260a6ed1b8e16f6b2eaa29ec5bf51d1e61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a09e0260a6ed1b8e16f6b2eaa29ec5bf51d1e61/comments", "author": null, "committer": null, "parents": [{"sha": "db38c41b4b5529cb491116f090b1894ff6f9e9ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db38c41b4b5529cb491116f090b1894ff6f9e9ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db38c41b4b5529cb491116f090b1894ff6f9e9ae"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "d078d6bb05b6ee258d0497c11a725826dd886540", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a09e0260a6ed1b8e16f6b2eaa29ec5bf51d1e61/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a09e0260a6ed1b8e16f6b2eaa29ec5bf51d1e61/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3a09e0260a6ed1b8e16f6b2eaa29ec5bf51d1e61", "patch": "@@ -1,3 +1,9 @@\n+2018-07-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_disp.adb (Gen_Parameters_Profile): Make the _Init parameter an\n+\tIn/Out parameter.\n+\t(Set_CPP_Constructors): Adjust comment accordingly.\n+\n 2018-07-17  Bob Duff  <duff@adacore.com>\n \n \t* exp_disp.adb (Build_Class_Wide_Check): Return early if the"}, {"sha": "298265aa813f7750e0ad883c85cc2ab04a40d88c", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a09e0260a6ed1b8e16f6b2eaa29ec5bf51d1e61/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a09e0260a6ed1b8e16f6b2eaa29ec5bf51d1e61/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=3a09e0260a6ed1b8e16f6b2eaa29ec5bf51d1e61", "patch": "@@ -8181,7 +8181,8 @@ package body Exp_Disp is\n \n       function Gen_Parameters_Profile (E : Entity_Id) return List_Id;\n       --  Duplicate the parameters profile of the imported C++ constructor\n-      --  adding an access to the object as an additional parameter.\n+      --  adding the \"this\" pointer to the object as the additional first\n+      --  parameter under the usual form _Init : in out Typ.\n \n       ----------------------------\n       -- Gen_Parameters_Profile --\n@@ -8198,6 +8199,8 @@ package body Exp_Disp is\n              Make_Parameter_Specification (Loc,\n                Defining_Identifier =>\n                  Make_Defining_Identifier (Loc, Name_uInit),\n+               In_Present          => True,\n+               Out_Present         => True,\n                Parameter_Type      => New_Occurrence_Of (Typ, Loc)));\n \n          if Present (Parameter_Specifications (Parent (E))) then\n@@ -8244,9 +8247,7 @@ package body Exp_Disp is\n             Found := True;\n             Loc   := Sloc (E);\n             Parms := Gen_Parameters_Profile (E);\n-            IP    :=\n-              Make_Defining_Identifier (Loc,\n-                Chars => Make_Init_Proc_Name (Typ));\n+            IP    := Make_Defining_Identifier (Loc, Make_Init_Proc_Name (Typ));\n \n             --  Case 1: Constructor of untagged type\n \n@@ -8273,14 +8274,14 @@ package body Exp_Disp is\n \n             --  Case 2: Constructor of a tagged type\n \n-            --  In this case we generate the IP as a wrapper of the the\n-            --  C++ constructor because IP must also save copy of the _tag\n+            --  In this case we generate the IP routine as a wrapper of the\n+            --  C++ constructor because IP must also save a copy of the _tag\n             --  generated in the C++ side. The copy of the _tag is used by\n             --  Build_CPP_Init_Procedure to elaborate derivations of C++ types.\n \n             --  Generate:\n-            --     procedure IP (_init : Typ; ...) is\n-            --        procedure ConstructorP (_init : Typ; ...);\n+            --     procedure IP (_init : in out Typ; ...) is\n+            --        procedure ConstructorP (_init : in out Typ; ...);\n             --        pragma Import (ConstructorP);\n             --     begin\n             --        ConstructorP (_init, ...);\n@@ -8352,7 +8353,7 @@ package body Exp_Disp is\n                      loop\n                         --  Skip the following assertion with primary tags\n                         --  because Related_Type is not set on primary tag\n-                        --  components\n+                        --  components.\n \n                         pragma Assert\n                           (Tag_Comp = First_Tag_Component (Typ)"}]}