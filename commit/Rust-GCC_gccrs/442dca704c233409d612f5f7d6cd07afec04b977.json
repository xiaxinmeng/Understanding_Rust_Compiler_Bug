{"sha": "442dca704c233409d612f5f7d6cd07afec04b977", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQyZGNhNzA0YzIzMzQwOWQ2MTJmNWY3ZDZjZDA3YWZlYzA0Yjk3Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-03-03T13:52:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-03-03T13:52:20Z"}, "message": "type_traits: Implemenet is_polymorphic.\n\n2005-03-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implemenet is_polymorphic.\n\t(is_empty): Minor tweaks.\n\t* testsuite/testsuite_tr1.h: Add test types.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\tis_polymorphic/is_polymorphic.cc: New.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\tis_polymorphic/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_union_or_class/is_union_or_class.cc: Add tests.\n\nFrom-SVN: r95829", "tree": {"sha": "95a9725da00f165a8f85e69cb98156252b72fe69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95a9725da00f165a8f85e69cb98156252b72fe69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/442dca704c233409d612f5f7d6cd07afec04b977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442dca704c233409d612f5f7d6cd07afec04b977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442dca704c233409d612f5f7d6cd07afec04b977", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442dca704c233409d612f5f7d6cd07afec04b977/comments", "author": null, "committer": null, "parents": [{"sha": "2a60a1b116478bdceee5c33a0836d1e8eca45590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a60a1b116478bdceee5c33a0836d1e8eca45590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a60a1b116478bdceee5c33a0836d1e8eca45590"}], "stats": {"total": 184, "additions": 159, "deletions": 25}, "files": [{"sha": "22a7ed4fdb002d9aa24a57155d0c741a40dbc6ee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=442dca704c233409d612f5f7d6cd07afec04b977", "patch": "@@ -1,29 +1,41 @@\n+2005-03-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implemenet is_polymorphic.\n+\t(is_empty): Minor tweaks.\n+\t* testsuite/testsuite_tr1.h: Add test types.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\tis_polymorphic/is_polymorphic.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\tis_polymorphic/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_union_or_class/is_union_or_class.cc: Add tests.\n+\n 2005-03-02  Douglas Gregor  <doug.gregor@gmail.com>\n \n-        * include/tr1/functional (_Has_result_type): Cleanup.\n-        (_Result_of_impl): Handle member data pointers correctly.\n-        (reference_wrapper): Support invocation.\n-        Move repetition code into new file include/tr1/repeat.h.\n-        * include/tr1/functional_iterate.h (reference_wrapper): Support\n-        invocation.  Cleanup long lines.\n-        * include/tr1/ref_wrap_iterate.h (reference_wrapper): Declare\n-        invocation operators.\n-        * include/tr1/repeat.h: Code repetition header.\n-        * include/Makefile.am: Add ref_wrap_iterate.h, repeat.h\n-        * include/Makefile.in: Add ref_wrap_iterate.h, repeat.h\n-        * testsuite/tr1/3_function_objects/reference_wrapper/invoke.cc:\n-        New test of reference_wrapper invocation.\n-        * testsuite/tr1/3_function_objects/reference_wrapper/typedefs.cc:\n-        New test of reference_wrapper typedefs and base classes.\n-        * testsuite/tr1/3_function_objects/result_of.cc: Trivial cleanup\n-        (e-mail address).\n+\t* include/tr1/functional (_Has_result_type): Cleanup.\n+\t(_Result_of_impl): Handle member data pointers correctly.\n+\t(reference_wrapper): Support invocation.\n+\tMove repetition code into new file include/tr1/repeat.h.\n+\t* include/tr1/functional_iterate.h (reference_wrapper): Support\n+\tinvocation.  Cleanup long lines.\n+\t* include/tr1/ref_wrap_iterate.h (reference_wrapper): Declare\n+\tinvocation operators.\n+\t* include/tr1/repeat.h: Code repetition header.\n+\t* include/Makefile.am: Add ref_wrap_iterate.h, repeat.h.\n+\t* include/Makefile.in: Add ref_wrap_iterate.h, repeat.h.\n+\t* testsuite/tr1/3_function_objects/reference_wrapper/invoke.cc:\n+\tNew test of reference_wrapper invocation.\n+\t* testsuite/tr1/3_function_objects/reference_wrapper/typedefs.cc:\n+\tNew test of reference_wrapper typedefs and base classes.\n+\t* testsuite/tr1/3_function_objects/result_of.cc: Trivial cleanup\n+\t(e-mail address).\n \t\n 2005-03-02  Douglas Gregor  <doug.gregor@gmail.com>\n \n-        * include/tr1/function (result_of): New class template.\n-        * include/tr1/functional/iterator.h: Implementation of TR1\n-        result_of.\n-        * testsuite/tr1/3_function_objects/result_of.cc: New test\n+\t* include/tr1/function (result_of): New class template.\n+\t* include/tr1/functional/iterator.h: Implementation of TR1\n+\tresult_of.\n+\t* testsuite/tr1/3_function_objects/result_of.cc: New test\n \t\n 2005-03-01  Vladimir Merzliakov  <wanderer@rsu.ru>\n "}, {"sha": "37415881c7a4392b3583683e88b70d8c96f61d21", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=442dca704c233409d612f5f7d6cd07afec04b977", "patch": "@@ -285,19 +285,19 @@ namespace tr1\n     { };\n \n   // N.B. Without compiler support we cannot tell union from class types,\n-  // and is_empty doesn't work at all with the former. \n+  // and is_empty and is_polymorphic don't work at all with the former. \n   template<typename _Tp, bool = !__is_union_or_class<_Tp>::value>\n     struct __is_empty_helper\n     { \n     private:\n       template<typename>\n-        struct __ebo_1 { };\n+        struct __first { };\n       template<typename _Up>\n-        struct __ebo_2\n+        struct __second\n         : public _Up { };\n            \n     public:\n-      static const bool __value = sizeof(__ebo_1<_Tp>) == sizeof(__ebo_2<_Tp>);\n+      static const bool __value = sizeof(__first<_Tp>) == sizeof(__second<_Tp>);\n     };\n \n   template<typename _Tp>\n@@ -309,6 +309,31 @@ namespace tr1\n     : public integral_constant<bool, __is_empty_helper<_Tp>::__value>\n     { };\n \n+  template<typename _Tp, bool = !__is_union_or_class<_Tp>::value>\n+    struct __is_polymorphic_helper\n+    { \n+    private:\n+      template<typename _Up>\n+        struct __first\n+        : public _Up { };\n+      template<typename _Up>\n+        struct __second\n+        : public _Up\n+\t{ virtual void __dummy(); };\n+           \n+    public:\n+      static const bool __value = sizeof(__first<_Tp>) == sizeof(__second<_Tp>);\n+    };\n+\n+  template<typename _Tp>\n+    struct __is_polymorphic_helper<_Tp, true>\n+    { static const bool __value = false; };\n+\n+  template<typename _Tp>\n+    struct is_polymorphic\n+    : public integral_constant<bool, __is_polymorphic_helper<_Tp>::__value>\n+    { };\n+\n   // Exploit the resolution DR core/337.\n   template<typename _Tp, bool = !is_object<_Tp>::value>\n     struct __is_abstract_helper"}, {"sha": "cb93225a08d06ebbe0614b6402e4b6dfbfe81800", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=442dca704c233409d612f5f7d6cd07afec04b977", "patch": "@@ -123,6 +123,11 @@ namespace __gnu_test\n   class AbstractClass\n   { virtual void rotate(int) = 0; };\n \n+  class PolymorphicClass\n+  { virtual void rotate(int); };\n+\n+  class DerivedPolymorphic : public PolymorphicClass { }; \n+\n   union UnionType { };\n \n "}, {"sha": "073128a00f586f1336808e29b1ac5636acf2b2f2", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_union_or_class/is_union_or_class.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_union_or_class%2Fis_union_or_class.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_union_or_class%2Fis_union_or_class.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_union_or_class%2Fis_union_or_class.cc?ref=442dca704c233409d612f5f7d6cd07afec04b977", "patch": "@@ -36,6 +36,8 @@ void test01()\n   VERIFY( (test_category<__is_union_or_class, DerivedType>(true)) );\n   VERIFY( (test_category<__is_union_or_class, ConvType>(true)) );\n   VERIFY( (test_category<__is_union_or_class, AbstractClass>(true)) );\n+  VERIFY( (test_category<__is_union_or_class, PolymorphicClass>(true)) );\n+  VERIFY( (test_category<__is_union_or_class, DerivedPolymorphic>(true)) );\n \n   // Negative tests.\n   VERIFY( (test_category<__is_union_or_class, void>(false)) );"}, {"sha": "8945310f6399c05b0633d8b56a40d206aa13d071", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_polymorphic/is_polymorphic.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2Fis_polymorphic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2Fis_polymorphic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2Fis_polymorphic.cc?ref=442dca704c233409d612f5f7d6cd07afec04b977", "patch": "@@ -0,0 +1,54 @@\n+// 2005-03-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_polymorphic;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_polymorphic, PolymorphicClass>(true)) );\n+  VERIFY( (test_category<is_polymorphic, DerivedPolymorphic>(true)) );\n+  VERIFY( (test_category<is_polymorphic, AbstractClass>(true)) );\n+  VERIFY( (test_category<is_polymorphic, std::iostream>(true)) );\n+  VERIFY( (test_category<is_polymorphic, std::streambuf>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_polymorphic, void>(false)) );\n+  VERIFY( (test_category<is_polymorphic, int (int)>(false)) );\n+  VERIFY( (test_category<is_polymorphic, int&>(false)) );\n+  VERIFY( (test_category<is_polymorphic, EnumType>(false)) );\n+  VERIFY( (test_category<is_polymorphic, ClassType>(false)) );\n+  VERIFY( (test_category<is_polymorphic, DerivedType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "44ef1646fa1ed39490fb76bef93789d93b128dd8", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_polymorphic/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442dca704c233409d612f5f7d6cd07afec04b977/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2Ftypedefs.cc?ref=442dca704c233409d612f5f7d6cd07afec04b977", "patch": "@@ -0,0 +1,36 @@\n+// 2005-03-03  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_polymorphic<int>       test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}