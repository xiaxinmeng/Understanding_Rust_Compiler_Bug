{"sha": "04284176d549ff2565406406a6d53ab4ba8e507d", "node_id": "C_kwDOANBUbNoAKDA0Mjg0MTc2ZDU0OWZmMjU2NTQwNjQwNmE2ZDUzYWI0YmE4ZTUwN2Q", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-08-09T10:48:14Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-08-09T12:41:22Z"}, "message": "d: Fix undefined reference to pragma(inline) symbol (PR106563)\n\nFunctions that are declared `pragma(inline)' should be treated as if\nthey are defined in every translation unit they are referenced from,\nregardless of visibility protection.  Ensure they always get\nDECL_ONE_ONLY linkage, and start emitting them into other modules that\nimport them.\n\n\tPR d/106563\n\ngcc/d/ChangeLog:\n\n\t* decl.cc (DeclVisitor::visit (FuncDeclaration *)): Set semanticRun\n\tbefore generating its symbol.\n\t(function_defined_in_root_p): New function.\n\t(function_needs_inline_definition_p): New function.\n\t(maybe_build_decl_tree): New function.\n\t(get_symbol_decl): Call maybe_build_decl_tree before returning symbol.\n\t(start_function): Use function_defined_in_root_p instead of inline\n\ttest for locally defined symbols.\n\t(set_linkage_for_decl): Check for inline functions before private or\n\tprotected symbols.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/torture/torture.exp (srcdir): New proc.\n\t* gdc.dg/torture/imports/pr106563math.d: New test.\n\t* gdc.dg/torture/imports/pr106563regex.d: New test.\n\t* gdc.dg/torture/imports/pr106563uni.d: New test.\n\t* gdc.dg/torture/pr106563.d: New test.", "tree": {"sha": "9b1c7a1daa2d74ef1e11196974687503345618cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b1c7a1daa2d74ef1e11196974687503345618cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04284176d549ff2565406406a6d53ab4ba8e507d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04284176d549ff2565406406a6d53ab4ba8e507d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04284176d549ff2565406406a6d53ab4ba8e507d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04284176d549ff2565406406a6d53ab4ba8e507d/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e1914625dec4aa09a5671c6294e877dbf4518f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1914625dec4aa09a5671c6294e877dbf4518f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1914625dec4aa09a5671c6294e877dbf4518f5"}], "stats": {"total": 180, "additions": 161, "deletions": 19}, "files": [{"sha": "0131b01dcc9a403e7b38e8994dd05f437cdc13f5", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 102, "deletions": 19, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=04284176d549ff2565406406a6d53ab4ba8e507d", "patch": "@@ -828,6 +828,10 @@ class DeclVisitor : public Visitor\n     if (global.errors)\n       return;\n \n+    /* Start generating code for this function.  */\n+    gcc_assert (d->semanticRun == PASS::semantic3done);\n+    d->semanticRun = PASS::obj;\n+\n     /* Duplicated FuncDeclarations map to the same symbol.  Check if this\n        is the one declaration which will be emitted.  */\n     tree fndecl = get_symbol_decl (d);\n@@ -844,10 +848,6 @@ class DeclVisitor : public Visitor\n     if (global.params.verbose)\n       message (\"function  %s\", d->toPrettyChars ());\n \n-    /* Start generating code for this function.  */\n-    gcc_assert (d->semanticRun == PASS::semantic3done);\n-    d->semanticRun = PASS::obj;\n-\n     tree old_context = start_function (d);\n \n     tree parm_decl = NULL_TREE;\n@@ -1020,13 +1020,103 @@ build_decl_tree (Dsymbol *d)\n   input_location = saved_location;\n }\n \n+/* Returns true if function FD is defined or instantiated in a root module.  */\n+\n+static bool\n+function_defined_in_root_p (FuncDeclaration *fd)\n+{\n+  Module *md = fd->getModule ();\n+  if (md && md->isRoot ())\n+    return true;\n+\n+  TemplateInstance *ti = fd->isInstantiated ();\n+  if (ti && ti->minst && ti->minst->isRoot ())\n+    return true;\n+\n+  return false;\n+}\n+\n+/* Returns true if function FD always needs to be implicitly defined, such as\n+   it was declared `pragma(inline)'.  */\n+\n+static bool\n+function_needs_inline_definition_p (FuncDeclaration *fd)\n+{\n+  /* Function has already been defined.  */\n+  if (!DECL_EXTERNAL (fd->csym))\n+    return false;\n+\n+  /* Non-inlineable functions are always external.  */\n+  if (DECL_UNINLINABLE (fd->csym))\n+    return false;\n+\n+  /* No function body available for inlining.  */\n+  if (!fd->fbody)\n+    return false;\n+\n+  /* Ignore functions that aren't decorated with `pragma(inline)'.  */\n+  if (fd->inlining != PINLINE::always)\n+    return false;\n+\n+  /* These functions are tied to the module they are defined in.  */\n+  if (fd->isFuncLiteralDeclaration ()\n+      || fd->isUnitTestDeclaration ()\n+      || fd->isFuncAliasDeclaration ()\n+      || fd->isInvariantDeclaration ())\n+    return false;\n+\n+  /* Check whether function will be regularly defined later in the current\n+     translation unit.  */\n+  if (function_defined_in_root_p (fd))\n+    return false;\n+\n+  /* Weak functions cannot be inlined.  */\n+  if (lookup_attribute (\"weak\", DECL_ATTRIBUTES (fd->csym)))\n+    return false;\n+\n+  /* Naked functions cannot be inlined.  */\n+  if (lookup_attribute (\"naked\", DECL_ATTRIBUTES (fd->csym)))\n+    return false;\n+\n+  return true;\n+}\n+\n+/* If the variable or function declaration in DECL needs to be defined, call\n+   build_decl_tree on it now before returning its back-end symbol.  */\n+\n+static tree\n+maybe_build_decl_tree (Declaration *decl)\n+{\n+  gcc_assert (decl->csym != NULL_TREE);\n+\n+  /* Still running semantic analysis on declaration, or it has already had its\n+     code generated.  */\n+  if (doing_semantic_analysis_p || decl->semanticRun >= PASS::obj)\n+    return decl->csym;\n+\n+  if (error_operand_p (decl->csym))\n+    return decl->csym;\n+\n+  if (FuncDeclaration *fd = decl->isFuncDeclaration ())\n+    {\n+      /* Externally defined inline functions need to be emitted.  */\n+      if (function_needs_inline_definition_p (fd))\n+\t{\n+\t  DECL_EXTERNAL (fd->csym) = 0;\n+\t  build_decl_tree (fd);\n+\t}\n+    }\n+\n+  return decl->csym;\n+}\n+\n /* Return the decl for the symbol, create it if it doesn't already exist.  */\n \n tree\n get_symbol_decl (Declaration *decl)\n {\n   if (decl->csym)\n-    return decl->csym;\n+    return maybe_build_decl_tree (decl);\n \n   /* Deal with placeholder symbols immediately:\n      SymbolDeclaration is used as a shell around an initializer symbol.  */\n@@ -1404,7 +1494,7 @@ get_symbol_decl (Declaration *decl)\n   TREE_USED (decl->csym) = 1;\n   d_keep (decl->csym);\n \n-  return decl->csym;\n+  return maybe_build_decl_tree (decl);\n }\n \n /* Returns a declaration for a VAR_DECL.  Used to create compiler-generated\n@@ -1895,15 +1985,8 @@ start_function (FuncDeclaration *fd)\n   /* Function has been defined, check now whether we intend to send it to\n      object file, or it really is extern.  Such as inlinable functions from\n      modules not in this compilation, or thunk aliases.  */\n-  TemplateInstance *ti = fd->isInstantiated ();\n-  if (ti && ti->needsCodegen ())\n+  if (function_defined_in_root_p (fd))\n     DECL_EXTERNAL (fndecl) = 0;\n-  else\n-    {\n-      Module *md = fd->getModule ();\n-      if (md && md->isRoot ())\n-\tDECL_EXTERNAL (fndecl) = 0;\n-    }\n \n   DECL_INITIAL (fndecl) = error_mark_node;\n \n@@ -2422,16 +2505,16 @@ set_linkage_for_decl (tree decl)\n   if (!TREE_PUBLIC (decl))\n     return;\n \n-  /* Don't need to give private or protected symbols a special linkage.  */\n-  if ((TREE_PRIVATE (decl) || TREE_PROTECTED (decl))\n-      && !DECL_INSTANTIATED (decl))\n-    return;\n-\n   /* Functions declared as `pragma(inline, true)' can appear in multiple\n      translation units.  */\n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl))\n     return d_comdat_linkage (decl);\n \n+  /* Don't need to give private or protected symbols a special linkage.  */\n+  if ((TREE_PRIVATE (decl) || TREE_PROTECTED (decl))\n+      && !DECL_INSTANTIATED (decl))\n+    return;\n+\n   /* If all instantiations must go in COMDAT, give them that linkage.\n      This also applies to other extern declarations, so that it is possible\n      for them to override template declarations.  */"}, {"sha": "b9351ea74e27ab1641112d19cf06f22f68cb06e7", "filename": "gcc/testsuite/gdc.dg/torture/imports/pr106563math.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr106563math.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr106563math.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr106563math.d?ref=04284176d549ff2565406406a6d53ab4ba8e507d", "patch": "@@ -0,0 +1,12 @@\n+module imports.pr106563math;\n+\n+T nextPow2(T)(const T val)\n+{\n+    return powIntegralImpl(val);\n+}\n+\n+pragma(inline, true)\n+T powIntegralImpl(T)(T)\n+{\n+    return 1;\n+}"}, {"sha": "a2cd90c3d8b84a957ddce4033263ed4ca74e7bfc", "filename": "gcc/testsuite/gdc.dg/torture/imports/pr106563regex.d", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr106563regex.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr106563regex.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr106563regex.d?ref=04284176d549ff2565406406a6d53ab4ba8e507d", "patch": "@@ -0,0 +1,7 @@\n+module imports.pr106563regex;\n+import imports.pr106563uni;\n+\n+struct CharMatcher\n+{\n+    typeof(MultiArray!().length) trie;\n+}"}, {"sha": "16e3bc85cc03de387a1d38f7f1c4b22d3a5e55aa", "filename": "gcc/testsuite/gdc.dg/torture/imports/pr106563uni.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr106563uni.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr106563uni.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr106563uni.d?ref=04284176d549ff2565406406a6d53ab4ba8e507d", "patch": "@@ -0,0 +1,15 @@\n+module imports.pr106563uni;\n+\n+struct MultiArray()\n+{\n+    @property length()\n+    {\n+        return spaceFor!0();\n+    }\n+}\n+\n+size_t spaceFor(size_t bits)()\n+{\n+    import imports.pr106563math;\n+    return nextPow2(bits);\n+}"}, {"sha": "7e15442c0bb7a7d81140315f0834d14de0ac1872", "filename": "gcc/testsuite/gdc.dg/torture/pr106563.d", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr106563.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr106563.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr106563.d?ref=04284176d549ff2565406406a6d53ab4ba8e507d", "patch": "@@ -0,0 +1,16 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106563\n+// { dg-do link }\n+// { dg-additional-files \"imports/pr106563math.d imports/pr106563regex.d imports/pr106563uni.d\" }\n+// { dg-additional-options \"-I[srcdir] -fno-druntime\" }\n+import imports.pr106563math;\n+import imports.pr106563regex;\n+\n+auto requireSize()(size_t size)\n+{\n+    return nextPow2(size);\n+}\n+\n+extern(C) int main()\n+{\n+    return cast(int)requireSize(0);\n+}"}, {"sha": "d9c6a79cfe2d045d526d0cc7cd7ec0f934eb9408", "filename": "gcc/testsuite/gdc.dg/torture/torture.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Ftorture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04284176d549ff2565406406a6d53ab4ba8e507d/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Ftorture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Ftorture.exp?ref=04284176d549ff2565406406a6d53ab4ba8e507d", "patch": "@@ -19,6 +19,15 @@\n # Load support procs.\n load_lib gdc-dg.exp\n \n+# Helper function allows adding tests that use imports/*, but don't compile\n+# the sources in with dg-additional-sources.\n+global testdir\n+set testdir $srcdir/$subdir\n+proc srcdir {} {\n+    global testdir\n+    return $testdir\n+}\n+\n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n "}]}