{"sha": "615cb001bb90ef2acb21c011918b456c59ddb5de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE1Y2IwMDFiYjkwZWYyYWNiMjFjMDExOTE4YjQ1NmM1OWRkYjVkZQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2008-12-10T20:13:39Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2008-12-10T20:13:39Z"}, "message": "re PR tree-optimization/36792 (Revision 137631 causes many failures)\n\n2008-12-10  Daniel Berlin  <dberlin@dberlin.org>\n\n\tPR tree-optimization/36792\n\t* tree-ssa-pre.c (compute_avail): Don't insert defs into maximal\n\tset.\n\nFrom-SVN: r142659", "tree": {"sha": "b08c803fbd7196874d21e18a044498506078f1d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b08c803fbd7196874d21e18a044498506078f1d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/615cb001bb90ef2acb21c011918b456c59ddb5de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/615cb001bb90ef2acb21c011918b456c59ddb5de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/615cb001bb90ef2acb21c011918b456c59ddb5de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/615cb001bb90ef2acb21c011918b456c59ddb5de/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db89a3be51359d6fec17fbbfba81a166440623fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db89a3be51359d6fec17fbbfba81a166440623fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db89a3be51359d6fec17fbbfba81a166440623fb"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "a544a15b2970c9e0e0eae4b8823be080dc17a2a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/615cb001bb90ef2acb21c011918b456c59ddb5de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/615cb001bb90ef2acb21c011918b456c59ddb5de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=615cb001bb90ef2acb21c011918b456c59ddb5de", "patch": "@@ -1,3 +1,9 @@\n+2008-12-10  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tPR tree-optimization/36792\n+\t* tree-ssa-pre.c (compute_avail): Don't insert defs into maximal\n+\tset.\n+\n 2008-12-10  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR target/37033"}, {"sha": "659a5bf24e0dfa69dc1fb819d4220753d9d2c40f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/615cb001bb90ef2acb21c011918b456c59ddb5de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/615cb001bb90ef2acb21c011918b456c59ddb5de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=615cb001bb90ef2acb21c011918b456c59ddb5de", "patch": "@@ -1,3 +1,8 @@\n+2008-12-10  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tPR tree-optimization/36792\n+\t* gcc.dg/tree-ssa/ssa-fre-10.c: Update expected results.\n+\n 2008-12-10  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR middle-end/38271"}, {"sha": "a27f2d6c023c9cc39e246de63917c3dcc4b6cd48", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-10.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/615cb001bb90ef2acb21c011918b456c59ddb5de/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/615cb001bb90ef2acb21c011918b456c59ddb5de/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-10.c?ref=615cb001bb90ef2acb21c011918b456c59ddb5de", "patch": "@@ -4,6 +4,8 @@\n union loc {  unsigned reg; signed offset; };\n void __frame_state_for (volatile char *state_in, int x)\n {\n+  /* We should move all the loads out of this loop. Right now, we only\n+     move one.  It takes two insertions because we insert a cast.  */\n     union loc fs;\n     int reg;\n     for (;;)     {\n@@ -16,5 +18,5 @@ void __frame_state_for (volatile char *state_in, int x)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-not \"Insertions:\" \"pre\" } } */\n+/* { dg-final { scan-tree-dump \"Insertions: 2\" \"pre\" } } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "61448fd72957b78eac5c44857cd0fcfcb424a3b4", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/615cb001bb90ef2acb21c011918b456c59ddb5de/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/615cb001bb90ef2acb21c011918b456c59ddb5de/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=615cb001bb90ef2acb21c011918b456c59ddb5de", "patch": "@@ -3644,10 +3644,7 @@ compute_avail (void)\n \n \t      add_to_value (get_expr_value_id (e), e);\n \t      if (!in_fre)\n-\t\t{\n-\t\t  bitmap_insert_into_set (TMP_GEN (block), e);\n-\t\t  bitmap_value_insert_into_set (maximal_set, e);\n-\t\t}\n+\t\tbitmap_insert_into_set (TMP_GEN (block), e);\n \t      bitmap_value_insert_into_set (AVAIL_OUT (block), e);\n \t    }\n "}]}