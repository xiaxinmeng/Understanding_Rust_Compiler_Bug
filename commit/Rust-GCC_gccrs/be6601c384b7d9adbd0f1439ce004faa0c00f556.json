{"sha": "be6601c384b7d9adbd0f1439ce004faa0c00f556", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2NjAxYzM4NGI3ZDlhZGJkMGYxNDM5Y2UwMDRmYWEwYzAwZjU1Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-11-24T04:31:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-11-24T04:31:58Z"}, "message": "hwint.h (HOST_LONG_LONG_FORMAT): New macro.\n\n\t* hwint.h (HOST_LONG_LONG_FORMAT): New macro.  Use it throughout.\n\t* config/i386/xm-mingw32.h (HOST_LONG_LONG_FORMAT): Define.\n\t* doc/hostconfig.texi (HOST_LONG_LONG_FORMAT): Document.\n\nFrom-SVN: r91136", "tree": {"sha": "5905642c3e12503195a58b5985d3bb2c2dc7bec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5905642c3e12503195a58b5985d3bb2c2dc7bec8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be6601c384b7d9adbd0f1439ce004faa0c00f556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6601c384b7d9adbd0f1439ce004faa0c00f556", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6601c384b7d9adbd0f1439ce004faa0c00f556", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6601c384b7d9adbd0f1439ce004faa0c00f556/comments", "author": null, "committer": null, "parents": [{"sha": "0aa06b18fc9f79ec12ab65a34913b4f67d2177d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa06b18fc9f79ec12ab65a34913b4f67d2177d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa06b18fc9f79ec12ab65a34913b4f67d2177d8"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "8c29f0f57ba9bd5da5c5f3dc0d3d7d9b330591d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6601c384b7d9adbd0f1439ce004faa0c00f556/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6601c384b7d9adbd0f1439ce004faa0c00f556/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be6601c384b7d9adbd0f1439ce004faa0c00f556", "patch": "@@ -1,3 +1,9 @@\n+2004-11-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* hwint.h (HOST_LONG_LONG_FORMAT): New macro.  Use it throughout.\n+\t* config/i386/xm-mingw32.h (HOST_LONG_LONG_FORMAT): Define.\n+\t* doc/hostconfig.texi (HOST_LONG_LONG_FORMAT): Document.\n+\n 2004-11-24  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* config/i386/i386.c (override_options): Move"}, {"sha": "d4de258a247237a46532ddb5699f9836ece03b46", "filename": "gcc/config/i386/xm-mingw32.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6601c384b7d9adbd0f1439ce004faa0c00f556/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6601c384b7d9adbd0f1439ce004faa0c00f556/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h?ref=be6601c384b7d9adbd0f1439ce004faa0c00f556", "patch": "@@ -30,3 +30,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /*  The st_ino field of struct stat is always 0.  */\n #define HOST_LACKS_INODE_NUMBERS\n+\n+/* MSVCRT does not support the \"ll\" format specifier for printing\n+   \"long long\" values.  Instead, we use \"I64\".  */\n+#define HOST_LONG_LONG_FORMAT \"I64\""}, {"sha": "98dadafe360cf0212568b481c682cf8115e33ac6", "filename": "gcc/doc/hostconfig.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6601c384b7d9adbd0f1439ce004faa0c00f556/gcc%2Fdoc%2Fhostconfig.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6601c384b7d9adbd0f1439ce004faa0c00f556/gcc%2Fdoc%2Fhostconfig.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fhostconfig.texi?ref=be6601c384b7d9adbd0f1439ce004faa0c00f556", "patch": "@@ -212,6 +212,11 @@ initialization when a compilation driver is being initialized.\n Define this macro if the host system has a small limit on the total\n size of an argument vector.  This causes the driver to take more care\n not to pass unnecessary arguments to subprocesses.\n+\n+@item HOST_LONG_LONG_FORMAT\n+If defined, the string used to indicate an argument of type @code{long\n+long} to functions like @code{printf}.  The default value is\n+@code{\"ll\"}. \n @end ftable\n \n In addition, if @command{configure} generates an incorrect definition of"}, {"sha": "84ca84281d61bc0f3117f242c6d68dad65fe83f6", "filename": "gcc/hwint.h", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6601c384b7d9adbd0f1439ce004faa0c00f556/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6601c384b7d9adbd0f1439ce004faa0c00f556/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=be6601c384b7d9adbd0f1439ce004faa0c00f556", "patch": "@@ -15,6 +15,12 @@\n #define HOST_BITS_PER_INT   (CHAR_BIT * SIZEOF_INT)\n #define HOST_BITS_PER_LONG  (CHAR_BIT * SIZEOF_LONG)\n \n+/* The string that should be inserted into a printf style format to\n+   indicate a \"long long\" operand.  */\n+#ifndef HOST_LONG_LONG_FORMAT \n+#define HOST_LONG_LONG_FORMAT \"ll\"\n+#endif\n+\n /* If HAVE_LONG_LONG and SIZEOF_LONG_LONG aren't defined, but\n    GCC_VERSION >= 3000, assume this is the second or later stage of a\n    bootstrap, we do have long long, and it's 64 bits.  (This is\n@@ -77,7 +83,8 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n # define HOST_WIDE_INT_PRINT \"ll\"\n # define HOST_WIDE_INT_PRINT_C \"LL\"\n   /* We can assume that 'long long' is at least 64 bits.  */\n-# define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%llx%016llx\"\n+# define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n+    \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n #endif /* HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG */\n \n #define HOST_WIDE_INT_PRINT_DEC \"%\" HOST_WIDE_INT_PRINT \"d\"\n@@ -109,11 +116,12 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n     #error \"This line should be impossible to reach\"\n #  endif\n # endif\n-# define HOST_WIDEST_INT_PRINT_DEC\t      \"%lld\"\n-# define HOST_WIDEST_INT_PRINT_DEC_C\t      \"%lldLL\"\n-# define HOST_WIDEST_INT_PRINT_UNSIGNED\t      \"%llu\"\n-# define HOST_WIDEST_INT_PRINT_HEX\t      \"0x%llx\"\n-# define HOST_WIDEST_INT_PRINT_DOUBLE_HEX     \"0x%llx%016llx\"\n+# define HOST_WIDEST_INT_PRINT_DEC\t      \"%\" HOST_LONG_LONG_FORMAT \"d\"\n+# define HOST_WIDEST_INT_PRINT_DEC_C\t      \"%\" HOST_LONG_LONG_FORMAT \"dLL\"\n+# define HOST_WIDEST_INT_PRINT_UNSIGNED\t      \"%\" HOST_LONG_LONG_FORMAT \"u\"\n+# define HOST_WIDEST_INT_PRINT_HEX\t      \"0x%\" HOST_LONG_LONG_FORMAT \"x\"\n+# define HOST_WIDEST_INT_PRINT_DOUBLE_HEX     \\\n+    \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n #endif\n \n /* Define HOST_WIDEST_FAST_INT to the widest integer type supported"}]}