{"sha": "7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UzNWZjYjMwZWQ4YmViYmRmYzI0MGFjMjVjYjIxOTBmOGJkYjUyNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-11-01T11:38:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-11-01T11:38:06Z"}, "message": "i386.c (ix86_expand_rint): Fix issues with signed zeros.\n\n2006-11-01  Richard Guenther  <rguenther@suse.de>\n\n\t* config/i386/i386.c (ix86_expand_rint): Fix issues with\n\tsigned zeros.\n\t(ix86_expand_floorceildf_32): Likewise.\n\t(ix86_expand_floorceil): Likewise.\n\t(ix86_expand_trunc): Likewise.\n\n\t* testsuite/gcc.target/i386/fpprec-1.c: New testcase.\n\nFrom-SVN: r118373", "tree": {"sha": "0cefadecdf1c0660b3b900372a1eae74e1944aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cefadecdf1c0660b3b900372a1eae74e1944aa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a574196f549f74d931ad501885b3df0272b483a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a574196f549f74d931ad501885b3df0272b483a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a574196f549f74d931ad501885b3df0272b483a"}], "stats": {"total": 147, "additions": 132, "deletions": 15}, "files": [{"sha": "322bb4b852baf186323946850e1d0fe8a98c13b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526", "patch": "@@ -1,3 +1,11 @@\n+2006-11-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* config/i386/i386.c (ix86_expand_rint): Fix issues with\n+\tsigned zeros.\n+\t(ix86_expand_floorceildf_32): Likewise.\n+\t(ix86_expand_floorceil): Likewise.\n+\t(ix86_expand_trunc): Likewise.\n+\n 2006-10-31  Andrew Pinski  <pinskia@gmail.com>\n \n \t* doc/invoke.texi (-fkeep-inline-functions): Change \"GNU C\""}, {"sha": "d2e19a0c293f6dec1759a2207461811d23f46593", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526", "patch": "@@ -19423,10 +19423,11 @@ void\n ix86_expand_rint (rtx operand0, rtx operand1)\n {\n   /* C code for the stuff we're doing below:\n-        if (!isless (fabs (operand1), 2**52))\n+\txa = fabs (operand1);\n+        if (!isless (xa, 2**52))\n \t  return operand1;\n-        tmp = copysign (2**52, operand1);\n-        return operand1 + tmp - tmp;\n+        xa = xa + 2**52 - 2**52;\n+        return copysign (xa, operand1);\n    */\n   enum machine_mode mode = GET_MODE (operand0);\n   rtx res, xa, label, TWO52, mask;\n@@ -19441,10 +19442,10 @@ ix86_expand_rint (rtx operand0, rtx operand1)\n   TWO52 = ix86_gen_TWO52 (mode);\n   label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n \n-  ix86_sse_copysign_to_positive (TWO52, TWO52, res, mask);\n+  expand_simple_binop (mode, PLUS, xa, TWO52, xa, 0, OPTAB_DIRECT);\n+  expand_simple_binop (mode, MINUS, xa, TWO52, xa, 0, OPTAB_DIRECT);\n \n-  expand_simple_binop (mode, PLUS, res, TWO52, res, 0, OPTAB_DIRECT);\n-  expand_simple_binop (mode, MINUS, res, TWO52, res, 0, OPTAB_DIRECT);\n+  ix86_sse_copysign_to_positive (res, xa, res, mask);\n \n   emit_label (label);\n   LABEL_NUSES (label) = 1;\n@@ -19468,7 +19469,7 @@ ix86_expand_floorceildf_32 (rtx operand0, rtx operand1, bool do_floor)\n           x2 -= 1;\n      Compensate.  Ceil:\n         if (x2 < x)\n-          x2 += 1;\n+          x2 -= -1;\n         return x2;\n    */\n   enum machine_mode mode = GET_MODE (operand0);\n@@ -19494,14 +19495,17 @@ ix86_expand_floorceildf_32 (rtx operand0, rtx operand1, bool do_floor)\n   /* xa = copysign (xa, operand1) */\n   ix86_sse_copysign_to_positive (xa, xa, res, mask);\n \n-  /* generate 1.0 */\n-  one = force_reg (mode, const_double_from_real_value (dconst1, mode));\n+  /* generate 1.0 or -1.0 */\n+  one = force_reg (mode,\n+\t           const_double_from_real_value (do_floor\n+\t\t\t\t\t\t ? dconst1 : dconstm1, mode));\n \n   /* Compensate: xa = xa - (xa > operand1 ? 1 : 0) */\n   tmp = ix86_expand_sse_compare_mask (UNGT, xa, res, !do_floor);\n   emit_insn (gen_rtx_SET (VOIDmode, tmp,\n                           gen_rtx_AND (mode, one, tmp)));\n-  expand_simple_binop (mode, do_floor ? MINUS : PLUS,\n+  /* We always need to subtract here to preserve signed zero.  */\n+  expand_simple_binop (mode, MINUS,\n                        xa, tmp, res, 0, OPTAB_DIRECT);\n \n   emit_label (label);\n@@ -19526,10 +19530,12 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n      Compensate.  Ceil:\n \tif (x2 < x)\n \t  x2 += 1;\n+\tif (HONOR_SIGNED_ZEROS (mode))\n+\t  return copysign (x2, x);\n \treturn x2;\n    */\n   enum machine_mode mode = GET_MODE (operand0);\n-  rtx xa, xi, TWO52, tmp, label, one, res;\n+  rtx xa, xi, TWO52, tmp, label, one, res, mask;\n \n   TWO52 = ix86_gen_TWO52 (mode);\n \n@@ -19539,7 +19545,7 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n   emit_move_insn (res, operand1);\n \n   /* xa = abs (operand1) */\n-  xa = ix86_expand_sse_fabs (res, NULL);\n+  xa = ix86_expand_sse_fabs (res, &mask);\n \n   /* if (!isless (xa, TWO52)) goto label; */\n   label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n@@ -19559,6 +19565,9 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n   expand_simple_binop (mode, do_floor ? MINUS : PLUS,\n                        xa, tmp, res, 0, OPTAB_DIRECT);\n \n+  if (HONOR_SIGNED_ZEROS (mode))\n+    ix86_sse_copysign_to_positive (res, res, force_reg (mode, operand1), mask);\n+\n   emit_label (label);\n   LABEL_NUSES (label) = 1;\n \n@@ -19650,10 +19659,13 @@ ix86_expand_trunc (rtx operand0, rtx operand1)\n         double xa = fabs (x), x2;\n         if (!isless (xa, TWO52))\n           return x;\n-        return (double)(long)x;\n+        x2 = (double)(long)x;\n+\tif (HONOR_SIGNED_ZEROS (mode))\n+\t  return copysign (x2, x);\n+\treturn x2;\n    */\n   enum machine_mode mode = GET_MODE (operand0);\n-  rtx xa, xi, TWO52, label, res;\n+  rtx xa, xi, TWO52, label, res, mask;\n \n   TWO52 = ix86_gen_TWO52 (mode);\n \n@@ -19663,7 +19675,7 @@ ix86_expand_trunc (rtx operand0, rtx operand1)\n   emit_move_insn (res, operand1);\n \n   /* xa = abs (operand1) */\n-  xa = ix86_expand_sse_fabs (res, NULL);\n+  xa = ix86_expand_sse_fabs (res, &mask);\n \n   /* if (!isless (xa, TWO52)) goto label; */\n   label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n@@ -19673,6 +19685,9 @@ ix86_expand_trunc (rtx operand0, rtx operand1)\n   expand_fix (xi, res, 0);\n   expand_float (res, xi, 0);\n \n+  if (HONOR_SIGNED_ZEROS (mode))\n+    ix86_sse_copysign_to_positive (res, res, force_reg (mode, operand1), mask);\n+\n   emit_label (label);\n   LABEL_NUSES (label) = 1;\n "}, {"sha": "4ca24be242c14337eb696010090bbc79b8f0bdc7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526", "patch": "@@ -1,3 +1,7 @@\n+2006-11-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* testsuite/gcc.target/i386/fpprec-1.c: New testcase.\n+\n 2006-11-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-attr-1.c: Don't test gamma/lgamma."}, {"sha": "ff600b26198bd6a5bdca880e37e10770a9c11c95", "filename": "gcc/testsuite/gcc.target/i386/fpprec-1.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffpprec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffpprec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffpprec-1.c?ref=7e35fcb30ed8bebbdfc240ac25cb2190f8bdb526", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-math-errno -fno-trapping-math -msse2 -mfpmath=sse\" } */\n+\n+#include \"../../gcc.dg/i386-cpuid.h\"\n+\n+extern void abort(void);\n+extern int printf(const char *format, ...);\n+\n+double x[] = { __builtin_nan(\"\"), __builtin_inf(), -__builtin_inf(),\n+\t-0x1.fffffffffffffp+1023, 0x1.fffffffffffffp+1023,  /* +-DBL_MAX */\n+\t-0x1p-52, 0x1p-52,\t\t\t\t    /* +-DBL_EPSILON */\n+\t/* nextafter/before 0.5, 1.0 and 1.5 */\n+\t0x1.0000000000001p-1, 0x1.fffffffffffffp-2,\n+\t0x1.0000000000001p+0, 0x1.fffffffffffffp-1,\n+\t0x1.8000000000001p+0, 0x1.7ffffffffffffp+0,\n+\t-0.0, 0.0, -0.5, 0.5, -1.0, 1.0, -1.5, 1.5, -2.0, 2.0,\n+\t-2.5, 2.5 };\n+#define NUM (sizeof(x)/sizeof(double))\n+\n+double expect_round[] = { __builtin_nan(\"\"), __builtin_inf(), -__builtin_inf(),\n+\t-0x1.fffffffffffffp+1023, 0x1.fffffffffffffp+1023,\n+\t-0.0, 0.0,\n+\t1.0, 0.0, 1.0, 1.0, 2.0, 1.0,\n+\t-0.0, 0.0, -1.0, 1.0, -1.0, 1.0, -2.0, 2.0, -2.0, 2.0,\n+\t-3.0, 3.0 };\n+\n+double expect_rint[] = { __builtin_nan(\"\"), __builtin_inf(), -__builtin_inf(),\n+        -0x1.fffffffffffffp+1023, 0x1.fffffffffffffp+1023,\n+        -0.0, 0.0,\n+        1.0, 0.0, 1.0, 1.0, 2.0, 1.0,\n+        -0.0, 0.0, -0.0, 0.0, -1.0, 1.0, -2.0, 2.0, -2.0, 2.0,\n+        -2.0, 2.0 };\n+\n+double expect_floor[] = { __builtin_nan(\"\"), __builtin_inf(), -__builtin_inf(),\n+        -0x1.fffffffffffffp+1023, 0x1.fffffffffffffp+1023,\n+        -1.0, 0.0,\n+        0.0, 0.0, 1.0, 0.0, 1.0, 1.0,\n+        -0.0, 0.0, -1.0, 0.0, -1.0, 1.0, -2.0, 1.0, -2.0, 2.0,\n+        -3.0, 2.0 };\n+\n+double expect_ceil[] = { __builtin_nan(\"\"), __builtin_inf(), -__builtin_inf(),\n+        -0x1.fffffffffffffp+1023, 0x1.fffffffffffffp+1023,\n+        -0.0, 1.0,\n+        1.0, 1.0, 2.0, 1.0, 2.0, 2.0,\n+        -0.0, 0.0, -0.0, 1.0, -1.0, 1.0, -1.0, 2.0, -2.0, 2.0,\n+        -2.0, 3.0 };\n+\n+double expect_trunc[] = { __builtin_nan(\"\"), __builtin_inf(), -__builtin_inf(),\n+        -0x1.fffffffffffffp+1023, 0x1.fffffffffffffp+1023,\n+        -0.0, 0.0,\n+        0.0, 0.0, 1.0, 0.0, 1.0, 1.0,\n+        -0.0, 0.0, -0.0, 0.0, -1.0, 1.0, -1.0, 1.0, -2.0, 2.0,\n+        -2.0, 2.0 };\n+\n+\n+#define CHECK(fn) \\\n+void check_ ## fn (void) \\\n+{ \\\n+  int i; \\\n+  for (i = 0; i < NUM; ++i) \\\n+    { \\\n+      double res = __builtin_ ## fn (x[i]); \\\n+      if (__builtin_memcmp (&res, &expect_ ## fn [i], sizeof(double)) != 0) \\\n+        printf( # fn \" [%i]: %.18e %.18e\\n\", i, expect_ ## fn [i], res), abort (); \\\n+    } \\\n+}\n+\n+CHECK(round)\n+CHECK(rint)\n+CHECK(floor)\n+CHECK(ceil)\n+CHECK(trunc)\n+\n+int main()\n+{\n+  unsigned long cpu_facilities;\n+\n+  cpu_facilities = i386_cpuid ();\n+\n+  if ((cpu_facilities & bit_SSE2) != bit_SSE2)\n+    /* If host has no SSE2 support, pass.  */\n+    return 0;\n+\n+  check_round ();\n+  check_rint ();\n+  check_floor ();\n+  check_ceil ();\n+  check_trunc ();\n+  return 0;\n+}"}]}