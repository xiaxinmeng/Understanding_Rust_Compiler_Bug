{"sha": "9686a2e668aad033ef12b48c2d1e7f1ce6796838", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY4NmEyZTY2OGFhZDAzM2VmMTJiNDhjMmQxZTdmMWNlNjc5NjgzOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-09-08T12:22:56Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-09-08T12:22:56Z"}, "message": "Remove no-longer-needed fp-bit target macros.\n\ngcc:\n\t* defaults.h (LARGEST_EXPONENT_IS_NORMAL, ROUND_TOWARDS_ZERO):\n\tRemove.\n\t* doc/tm.texi.in (ROUND_TOWARDS_ZERO, LARGEST_EXPONENT_IS_NORMAL):\n\tRemove.\n\t* doc/tm.texi: Regenerate.\n\t* system.h (LARGEST_EXPONENT_IS_NORMAL, ROUND_TOWARDS_ZERO):\n\tPoison.\n\t* config/arm/arm.h (LARGEST_EXPONENT_IS_NORMAL): Remove.\n\t* config/cris/cris.h (__make_dp): Remove.\n\nlibgcc:\n\t* fp-bit.c (pack_d, unpack_d): Remove LARGEST_EXPONENT_IS_NORMAL\n\tand ROUND_TOWARDS_ZERO conditionals.\n\nFrom-SVN: r215013", "tree": {"sha": "6dbbe825a64b695203807e29716fb3fb42988da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dbbe825a64b695203807e29716fb3fb42988da6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9686a2e668aad033ef12b48c2d1e7f1ce6796838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9686a2e668aad033ef12b48c2d1e7f1ce6796838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9686a2e668aad033ef12b48c2d1e7f1ce6796838", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9686a2e668aad033ef12b48c2d1e7f1ce6796838/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45fcf805f672888582a67ae5b5e99dce292c581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45fcf805f672888582a67ae5b5e99dce292c581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45fcf805f672888582a67ae5b5e99dce292c581"}], "stats": {"total": 141, "additions": 39, "deletions": 102}, "files": [{"sha": "4d882a16691c4da29a1709bd7eb8048dbf2cc0c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9686a2e668aad033ef12b48c2d1e7f1ce6796838", "patch": "@@ -1,3 +1,15 @@\n+2014-09-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* defaults.h (LARGEST_EXPONENT_IS_NORMAL, ROUND_TOWARDS_ZERO):\n+\tRemove.\n+\t* doc/tm.texi.in (ROUND_TOWARDS_ZERO, LARGEST_EXPONENT_IS_NORMAL):\n+\tRemove.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h (LARGEST_EXPONENT_IS_NORMAL, ROUND_TOWARDS_ZERO):\n+\tPoison.\n+\t* config/arm/arm.h (LARGEST_EXPONENT_IS_NORMAL): Remove.\n+\t* config/cris/cris.h (__make_dp): Remove.\n+\n 2014-09-08  Richard Biener  <rguenther@suse.de>\n \n \tPR bootstrap/63204"}, {"sha": "ff4ddace2b5e27dba01d18e68924acc5355f6c33", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=9686a2e668aad033ef12b48c2d1e7f1ce6796838", "patch": "@@ -440,9 +440,6 @@ extern int arm_fpu_attr;\n #define TARGET_DEFAULT_FLOAT_ABI ARM_FLOAT_ABI_SOFT\n #endif\n \n-#define LARGEST_EXPONENT_IS_NORMAL(bits) \\\n-    ((bits) == 16 && arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE)\n-\n #ifndef ARM_DEFAULT_ABI\n #define ARM_DEFAULT_ABI ARM_ABI_APCS\n #endif"}, {"sha": "fb8ec933cbdfa067c39136f5ef3c712aec18e0bd", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=9686a2e668aad033ef12b48c2d1e7f1ce6796838", "patch": "@@ -80,14 +80,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Which CPU version this is.  The parsed and adjusted cris_cpu_str.  */\n extern int cris_cpu_version;\n \n-/* Changing the order used to be necessary to put the fourth __make_dp\n-   argument (a DImode parameter) in registers, to fit with the libfunc\n-   parameter passing scheme used for intrinsic functions.  FIXME: Check\n-   performance.  */\n-#ifdef IN_LIBGCC2\n-#define __make_dp(a,b,c,d) __cris_make_dp(d,a,b,c)\n-#endif\n-\n \n /* Node: Driver */\n "}, {"sha": "c1776b05690537424cdfdd6e35a45577cf707713", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=9686a2e668aad033ef12b48c2d1e7f1ce6796838", "patch": "@@ -926,14 +926,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define PREFERRED_DEBUGGING_TYPE NO_DEBUG\n #endif\n \n-#ifndef LARGEST_EXPONENT_IS_NORMAL\n-#define LARGEST_EXPONENT_IS_NORMAL(SIZE) 0\n-#endif\n-\n-#ifndef ROUND_TOWARDS_ZERO\n-#define ROUND_TOWARDS_ZERO 0\n-#endif\n-\n #ifndef FLOAT_LIB_COMPARE_RETURNS_BOOL\n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) false\n #endif"}, {"sha": "904ee5af3ef5e2bf078ad15f72c60297ac6b5f2f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9686a2e668aad033ef12b48c2d1e7f1ce6796838", "patch": "@@ -1341,27 +1341,6 @@ Return machine mode to be used for @code{_Unwind_Word} type.\n The default is to use @code{word_mode}.\n @end deftypefn\n \n-@defmac ROUND_TOWARDS_ZERO\n-If defined, this macro should be true if the prevailing rounding\n-mode is towards zero.\n-\n-Defining this macro only affects the way @file{libgcc.a} emulates\n-floating-point arithmetic.\n-\n-Not defining this macro is equivalent to returning zero.\n-@end defmac\n-\n-@defmac LARGEST_EXPONENT_IS_NORMAL (@var{size})\n-This macro should return true if floats with @var{size}\n-bits do not have a NaN or infinity representation, but use the largest\n-exponent for normal numbers instead.\n-\n-Defining this macro only affects the way @file{libgcc.a} emulates\n-floating-point arithmetic.\n-\n-The default definition of this macro returns false for all sizes.\n-@end defmac\n-\n @deftypefn {Target Hook} bool TARGET_MS_BITFIELD_LAYOUT_P (const_tree @var{record_type})\n This target hook returns @code{true} if bit-fields in the given\n @var{record_type} are to be laid out following the rules of Microsoft"}, {"sha": "50d1ac1cff80e9cab22436e02c38d7a9c7b3092f", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=9686a2e668aad033ef12b48c2d1e7f1ce6796838", "patch": "@@ -1255,27 +1255,6 @@ pattern needs to support both a 32- and a 64-bit mode.\n \n @hook TARGET_UNWIND_WORD_MODE\n \n-@defmac ROUND_TOWARDS_ZERO\n-If defined, this macro should be true if the prevailing rounding\n-mode is towards zero.\n-\n-Defining this macro only affects the way @file{libgcc.a} emulates\n-floating-point arithmetic.\n-\n-Not defining this macro is equivalent to returning zero.\n-@end defmac\n-\n-@defmac LARGEST_EXPONENT_IS_NORMAL (@var{size})\n-This macro should return true if floats with @var{size}\n-bits do not have a NaN or infinity representation, but use the largest\n-exponent for normal numbers instead.\n-\n-Defining this macro only affects the way @file{libgcc.a} emulates\n-floating-point arithmetic.\n-\n-The default definition of this macro returns false for all sizes.\n-@end defmac\n-\n @hook TARGET_MS_BITFIELD_LAYOUT_P\n \n @hook TARGET_DECIMAL_FLOAT_SUPPORTED_P"}, {"sha": "a1e89f4fb2269b05963c15987c77462d65f03195", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9686a2e668aad033ef12b48c2d1e7f1ce6796838/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=9686a2e668aad033ef12b48c2d1e7f1ce6796838", "patch": "@@ -934,7 +934,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tREG_CLASS_FROM_CONSTRAINT REG_CLASS_FOR_CONSTRAINT\t\t   \\\n \tEXTRA_CONSTRAINT_STR EXTRA_MEMORY_CONSTRAINT\t\t\t   \\\n \tEXTRA_ADDRESS_CONSTRAINT CONST_DOUBLE_OK_FOR_CONSTRAINT_P\t   \\\n-\tCALLER_SAVE_PROFITABLE\n+\tCALLER_SAVE_PROFITABLE LARGEST_EXPONENT_IS_NORMAL\t\t   \\\n+\tROUND_TOWARDS_ZERO\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "8133025a6482c8abfe6c57623825d198d57b9863", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9686a2e668aad033ef12b48c2d1e7f1ce6796838/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9686a2e668aad033ef12b48c2d1e7f1ce6796838/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9686a2e668aad033ef12b48c2d1e7f1ce6796838", "patch": "@@ -1,3 +1,8 @@\n+2014-09-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* fp-bit.c (pack_d, unpack_d): Remove LARGEST_EXPONENT_IS_NORMAL\n+\tand ROUND_TOWARDS_ZERO conditionals.\n+\n 2014-09-07  Nathan sidwell  <nathan@acm.org>\n \n \t* libgcov-interface.c (STRONG_ALIAS): Rename to ..."}, {"sha": "5f67e07d57ae7a2a844cfda545b1d954f2c93998", "filename": "libgcc/fp-bit.c", "status": "modified", "additions": 20, "deletions": 40, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9686a2e668aad033ef12b48c2d1e7f1ce6796838/libgcc%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9686a2e668aad033ef12b48c2d1e7f1ce6796838/libgcc%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Ffp-bit.c?ref=9686a2e668aad033ef12b48c2d1e7f1ce6796838", "patch": "@@ -202,15 +202,7 @@ pack_d (const fp_number_type *src)\n   int sign = src->sign;\n   int exp = 0;\n \n-  if (LARGEST_EXPONENT_IS_NORMAL (FRAC_NBITS) && (isnan (src) || isinf (src)))\n-    {\n-      /* We can't represent these values accurately.  By using the\n-\t largest possible magnitude, we guarantee that the conversion\n-\t of infinity is at least as big as any finite number.  */\n-      exp = EXPMAX;\n-      fraction = ((fractype) 1 << FRACBITS) - 1;\n-    }\n-  else if (isnan (src))\n+  if (isnan (src))\n     {\n       exp = EXPMAX;\n       /* Restore the NaN's payload.  */\n@@ -291,44 +283,33 @@ pack_d (const fp_number_type *src)\n \t  fraction >>= NGARDS;\n #endif /* NO_DENORMALS */\n \t}\n-      else if (!LARGEST_EXPONENT_IS_NORMAL (FRAC_NBITS)\n-\t       && __builtin_expect (src->normal_exp > EXPBIAS, 0))\n+      else if (__builtin_expect (src->normal_exp > EXPBIAS, 0))\n \t{\n \t  exp = EXPMAX;\n \t  fraction = 0;\n \t}\n       else\n \t{\n \t  exp = src->normal_exp + EXPBIAS;\n-\t  if (!ROUND_TOWARDS_ZERO)\n+\t  /* IF the gard bits are the all zero, but the first, then we're\n+\t     half way between two numbers, choose the one which makes the\n+\t     lsb of the answer 0.  */\n+\t  if ((fraction & GARDMASK) == GARDMSB)\n \t    {\n-\t      /* IF the gard bits are the all zero, but the first, then we're\n-\t\t half way between two numbers, choose the one which makes the\n-\t\t lsb of the answer 0.  */\n-\t      if ((fraction & GARDMASK) == GARDMSB)\n-\t\t{\n-\t\t  if (fraction & (1 << NGARDS))\n-\t\t    fraction += GARDROUND + 1;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  /* Add a one to the guards to round up */\n-\t\t  fraction += GARDROUND;\n-\t\t}\n-\t      if (fraction >= IMPLICIT_2)\n-\t\t{\n-\t\t  fraction >>= 1;\n-\t\t  exp += 1;\n-\t\t}\n+\t      if (fraction & (1 << NGARDS))\n+\t\tfraction += GARDROUND + 1;\n \t    }\n-\t  fraction >>= NGARDS;\n-\n-\t  if (LARGEST_EXPONENT_IS_NORMAL (FRAC_NBITS) && exp > EXPMAX)\n+\t  else\n+\t    {\n+\t      /* Add a one to the guards to round up */\n+\t      fraction += GARDROUND;\n+\t    }\n+\t  if (fraction >= IMPLICIT_2)\n \t    {\n-\t      /* Saturate on overflow.  */\n-\t      exp = EXPMAX;\n-\t      fraction = ((fractype) 1 << FRACBITS) - 1;\n+\t      fraction >>= 1;\n+\t      exp += 1;\n \t    }\n+\t  fraction >>= NGARDS;\n \t}\n     }\n \n@@ -556,8 +537,7 @@ unpack_d (FLO_union_type * src, fp_number_type * dst)\n \t  dst->fraction.ll = fraction;\n \t}\n     }\n-  else if (!LARGEST_EXPONENT_IS_NORMAL (FRAC_NBITS)\n-\t   && __builtin_expect (exp == EXPMAX, 0))\n+  else if (__builtin_expect (exp == EXPMAX, 0))\n     {\n       /* Huge exponent*/\n       if (fraction == 0)\n@@ -915,7 +895,7 @@ _fpmul_parts ( fp_number_type *  a,\n       low <<= 1;\n     }\n \n-  if (!ROUND_TOWARDS_ZERO && (high & GARDMASK) == GARDMSB)\n+  if ((high & GARDMASK) == GARDMSB)\n     {\n       if (high & (1 << NGARDS))\n \t{\n@@ -1035,7 +1015,7 @@ _fpdiv_parts (fp_number_type * a,\n \tnumerator *= 2;\n       }\n \n-    if (!ROUND_TOWARDS_ZERO && (quotient & GARDMASK) == GARDMSB)\n+    if ((quotient & GARDMASK) == GARDMSB)\n       {\n \tif (quotient & (1 << NGARDS))\n \t  {"}]}