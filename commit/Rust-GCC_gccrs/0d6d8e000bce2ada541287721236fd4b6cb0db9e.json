{"sha": "0d6d8e000bce2ada541287721236fd4b6cb0db9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ2ZDhlMDAwYmNlMmFkYTU0MTI4NzcyMTIzNmZkNGI2Y2IwZGI5ZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-05-02T15:13:03Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-05-02T15:13:03Z"}, "message": "re PR fortran/18918 (Eventually support Fortran 2008's coarrays [co-arrays])\n\n2010-05-02  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * intrinsic.c (add_functions): Fix GFC_STD and add gfc_resolve_*\n        calls for lcobound, ucobound, image_index and this_image.\n        * intrinsic.h (gfc_resolve_lcobound, gfc_resolve_this_image,\n        gfc_resolve_image_index, gfc_resolve_ucobound): New prototypes.\n        * iresolve.c (gfc_resolve_lcobound, gfc_resolve_this_image,\n        gfc_resolve_image_index, gfc_resolve_ucobound, resolve_bound): New\n        functions.\n        (gfc_resolve_lbound, gfc_resolve_ubound): Use resolve_bound.\n\nFrom-SVN: r158974", "tree": {"sha": "b8fbd9223b184de9811b2cbead201ba1c9ed75d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8fbd9223b184de9811b2cbead201ba1c9ed75d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d6d8e000bce2ada541287721236fd4b6cb0db9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d6d8e000bce2ada541287721236fd4b6cb0db9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d6d8e000bce2ada541287721236fd4b6cb0db9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d6d8e000bce2ada541287721236fd4b6cb0db9e/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34a47f6fa975c142898ced6c8d036d6a4a1cd4d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8"}], "stats": {"total": 112, "additions": 75, "deletions": 37}, "files": [{"sha": "085e9fa51c6b2aa4dd1a98adb04739584ef6c740", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6d8e000bce2ada541287721236fd4b6cb0db9e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6d8e000bce2ada541287721236fd4b6cb0db9e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0d6d8e000bce2ada541287721236fd4b6cb0db9e", "patch": "@@ -1,4 +1,16 @@\n-2010-04-30  Tobias Burnus  Mburnus@net-b.de>\n+2010-05-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* intrinsic.c (add_functions): Fix GFC_STD and add gfc_resolve_ calls\n+\tfor lcobound, ucobound, image_index and this_image.\n+\t* intrinsic.h (gfc_resolve_lcobound, gfc_resolve_this_image,\n+\tgfc_resolve_image_index, gfc_resolve_ucobound): New prototypes.\n+\t* iresolve.c (gfc_resolve_lcobound, gfc_resolve_this_image,\n+\tgfc_resolve_image_index, gfc_resolve_ucobound, resolve_bound): New\n+\tfunctions.\n+\t(gfc_resolve_lbound, gfc_resolve_ubound): Use resolve_bound.\n+\n+2010-04-30  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918\n \tPR fortran/43931"}, {"sha": "34afabc3d2237d394ee0e1601d52598143acbfd0", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6d8e000bce2ada541287721236fd4b6cb0db9e/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6d8e000bce2ada541287721236fd4b6cb0db9e/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=0d6d8e000bce2ada541287721236fd4b6cb0db9e", "patch": "@@ -1786,7 +1786,7 @@ add_functions (void)\n   make_generic (\"ierrno\", GFC_ISYM_IERRNO, GFC_STD_GNU);\n \n   add_sym_2 (\"image_index\", GFC_ISYM_IMAGE_INDEX, CLASS_INQUIRY, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F2008,\n-\t     gfc_check_image_index, gfc_simplify_image_index, NULL,\n+\t     gfc_check_image_index, gfc_simplify_image_index, gfc_resolve_image_index,\n \t     ca, BT_REAL, dr, REQUIRED, sub, BT_INTEGER, ii, REQUIRED);\n \n   /* The resolution function for INDEX is called gfc_resolve_index_func\n@@ -1925,12 +1925,12 @@ add_functions (void)\n   make_generic (\"lbound\", GFC_ISYM_LBOUND, GFC_STD_F95);\n \n   add_sym_3 (\"lcobound\", GFC_ISYM_LCOBOUND, CLASS_INQUIRY, ACTUAL_NO,\n-\t     BT_INTEGER, di, GFC_STD_F95,\n-\t     gfc_check_lcobound, gfc_simplify_lcobound, NULL,\n+\t     BT_INTEGER, di, GFC_STD_F2008,\n+\t     gfc_check_lcobound, gfc_simplify_lcobound, gfc_resolve_lcobound,\n \t     ca, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t     kind, BT_INTEGER, di, OPTIONAL);\n \n-  make_generic (\"lcobound\", GFC_ISYM_LCOBOUND, GFC_STD_F95);\n+  make_generic (\"lcobound\", GFC_ISYM_LCOBOUND, GFC_STD_F2008);\n \n   add_sym_1 (\"leadz\", GFC_ISYM_LEADZ, CLASS_ELEMENTAL, ACTUAL_NO,\n \t     BT_INTEGER, di, GFC_STD_F2008,\n@@ -2540,7 +2540,7 @@ add_functions (void)\n   make_generic (\"tanh\", GFC_ISYM_TANH, GFC_STD_F77);\n \n   add_sym_2 (\"this_image\", GFC_ISYM_THIS_IMAGE, CLASS_INQUIRY, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F2008,\n-\t     gfc_check_this_image, gfc_simplify_this_image, NULL,\n+\t     gfc_check_this_image, gfc_simplify_this_image, gfc_resolve_this_image,\n \t     ca, BT_REAL, dr, OPTIONAL, dm, BT_INTEGER, ii, OPTIONAL);\n \n   add_sym_0 (\"time\", GFC_ISYM_TIME, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n@@ -2600,12 +2600,12 @@ add_functions (void)\n   make_generic (\"ubound\", GFC_ISYM_UBOUND, GFC_STD_F95);\n \n   add_sym_3 (\"ucobound\", GFC_ISYM_UCOBOUND, CLASS_INQUIRY, ACTUAL_NO,\n-            BT_INTEGER, di, GFC_STD_F95,\n-            gfc_check_ucobound, gfc_simplify_ucobound, NULL,\n+            BT_INTEGER, di, GFC_STD_F2008,\n+            gfc_check_ucobound, gfc_simplify_ucobound, gfc_resolve_ucobound,\n             ca, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n             kind, BT_INTEGER, di, OPTIONAL);\n \n-  make_generic (\"ucobound\", GFC_ISYM_UCOBOUND, GFC_STD_F95);\n+  make_generic (\"ucobound\", GFC_ISYM_UCOBOUND, GFC_STD_F2008);\n \n   /* g77 compatibility for UMASK.  */\n   add_sym_1 (\"umask\", GFC_ISYM_UMASK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,"}, {"sha": "72dcc9ca8b39a9e05a1984423fa55106f66de4f8", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6d8e000bce2ada541287721236fd4b6cb0db9e/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6d8e000bce2ada541287721236fd4b6cb0db9e/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=0d6d8e000bce2ada541287721236fd4b6cb0db9e", "patch": "@@ -422,6 +422,7 @@ void gfc_resolve_iand (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ibclr (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ibits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ibset (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_image_index (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_index_func (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t     gfc_expr *);\n void gfc_resolve_ierrno (gfc_expr *);\n@@ -441,6 +442,7 @@ void gfc_resolve_ishft (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ishftc (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_kill (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_lbound (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_lcobound (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_len (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_len_trim (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_lgamma (gfc_expr *, gfc_expr *);\n@@ -498,13 +500,15 @@ void gfc_resolve_symlnk (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_system (gfc_expr *, gfc_expr *);\n void gfc_resolve_tan (gfc_expr *, gfc_expr *);\n void gfc_resolve_tanh (gfc_expr *, gfc_expr *);\n+void gfc_resolve_this_image (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_time (gfc_expr *);\n void gfc_resolve_time8 (gfc_expr *);\n void gfc_resolve_transfer (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_transpose (gfc_expr *, gfc_expr *);\n void gfc_resolve_trim (gfc_expr *, gfc_expr *);\n void gfc_resolve_ttynam (gfc_expr *, gfc_expr *);\n void gfc_resolve_ubound (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_ucobound (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_umask (gfc_expr *, gfc_expr *);\n void gfc_resolve_unlink (gfc_expr *, gfc_expr *);\n void gfc_resolve_unpack (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "8f764ef90835c27059cfa2162dac67b543911c21", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 50, "deletions": 28, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6d8e000bce2ada541287721236fd4b6cb0db9e/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6d8e000bce2ada541287721236fd4b6cb0db9e/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=0d6d8e000bce2ada541287721236fd4b6cb0db9e", "patch": "@@ -119,6 +119,27 @@ resolve_mask_arg (gfc_expr *mask)\n     }\n }\n \n+\n+static void\n+resolve_bound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind,\n+\t       const char *name)\n+{\n+  f->ts.type = BT_INTEGER;\n+  if (kind)\n+    f->ts.kind = mpz_get_si (kind->value.integer);\n+  else\n+    f->ts.kind = gfc_default_integer_kind;\n+\n+  if (dim == NULL)\n+    {\n+      f->rank = 1;\n+      f->shape = gfc_get_shape (1);\n+      mpz_init_set_ui (f->shape[0], array->rank);\n+    }\n+\n+  f->value.function.name = xstrdup (name);\n+}\n+\n /********************** Resolution functions **********************/\n \n \n@@ -1247,22 +1268,14 @@ gfc_resolve_kill (gfc_expr *f, gfc_expr *p ATTRIBUTE_UNUSED,\n void\n gfc_resolve_lbound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n {\n-  static char lbound[] = \"__lbound\";\n+  resolve_bound (f, array, dim, kind, \"__lbound\");\n+}\n \n-  f->ts.type = BT_INTEGER;\n-  if (kind)\n-    f->ts.kind = mpz_get_si (kind->value.integer);\n-  else\n-    f->ts.kind = gfc_default_integer_kind;\n \n-  if (dim == NULL)\n-    {\n-      f->rank = 1;\n-      f->shape = gfc_get_shape (1);\n-      mpz_init_set_ui (f->shape[0], array->rank);\n-    }\n-\n-  f->value.function.name = lbound;\n+void\n+gfc_resolve_lcobound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n+{\n+  resolve_bound (f, array, dim, kind, \"__lcobound\");\n }\n \n \n@@ -2375,6 +2388,23 @@ gfc_resolve_tanh (gfc_expr *f, gfc_expr *x)\n }\n \n \n+void\n+gfc_resolve_image_index (gfc_expr *f, gfc_expr *array ATTRIBUTE_UNUSED,\n+\t\t\t gfc_expr *sub ATTRIBUTE_UNUSED)\n+{\n+  static char this_image[] = \"__image_index\";\n+  f->ts.kind = gfc_default_integer_kind;\n+  f->value.function.name = this_image;\n+}\n+\n+\n+void\n+gfc_resolve_this_image (gfc_expr *f, gfc_expr *array, gfc_expr *dim)\n+{\n+  resolve_bound (f, array, dim, NULL, \"__this_image\");\n+}\n+\n+\n void\n gfc_resolve_time (gfc_expr *f)\n {\n@@ -2510,22 +2540,14 @@ gfc_resolve_trim (gfc_expr *f, gfc_expr *string)\n void\n gfc_resolve_ubound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n {\n-  static char ubound[] = \"__ubound\";\n-\n-  f->ts.type = BT_INTEGER;\n-  if (kind)\n-    f->ts.kind = mpz_get_si (kind->value.integer);\n-  else\n-    f->ts.kind = gfc_default_integer_kind;\n+  resolve_bound (f, array, dim, kind, \"__ubound\");\n+}\n \n-  if (dim == NULL)\n-    {\n-      f->rank = 1;\n-      f->shape = gfc_get_shape (1);\n-      mpz_init_set_ui (f->shape[0], array->rank);\n-    }\n \n-  f->value.function.name = ubound;\n+void\n+gfc_resolve_ucobound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n+{\n+  resolve_bound (f, array, dim, kind, \"__ucobound\");\n }\n \n "}]}