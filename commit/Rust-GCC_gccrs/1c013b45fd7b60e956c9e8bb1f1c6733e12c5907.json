{"sha": "1c013b45fd7b60e956c9e8bb1f1c6733e12c5907", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMwMTNiNDVmZDdiNjBlOTU2YzllOGJiMWYxYzY3MzNlMTJjNTkwNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-17T16:54:50Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-17T16:54:50Z"}, "message": "(convert_to_integer): If TYPE is a enumeral type or if its precision is not the same as the size of its mode...\n\n(convert_to_integer): If TYPE is a enumeral type or if its precision\nis not the same as the size of its mode, convert in two steps.\n\nFrom-SVN: r10140", "tree": {"sha": "a8cd1f18cfbdc7fa335dc96d2fbd361c959f438a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8cd1f18cfbdc7fa335dc96d2fbd361c959f438a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c013b45fd7b60e956c9e8bb1f1c6733e12c5907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c013b45fd7b60e956c9e8bb1f1c6733e12c5907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c013b45fd7b60e956c9e8bb1f1c6733e12c5907", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c013b45fd7b60e956c9e8bb1f1c6733e12c5907/comments", "author": null, "committer": null, "parents": [{"sha": "b83b72a6fa53139ea1e2a39186c108925d66be6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83b72a6fa53139ea1e2a39186c108925d66be6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b83b72a6fa53139ea1e2a39186c108925d66be6c"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "17e755243af1b3d469ef8a9ac7ec2558d8351d0a", "filename": "gcc/convert.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c013b45fd7b60e956c9e8bb1f1c6733e12c5907/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c013b45fd7b60e956c9e8bb1f1c6733e12c5907/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=1c013b45fd7b60e956c9e8bb1f1c6733e12c5907", "patch": "@@ -1,5 +1,5 @@\n /* Utility routines for data type conversion for GNU C.\n-   Copyright (C) 1987, 1988, 1991, 1992, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 91, 92, 94, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU C.\n \n@@ -171,6 +171,17 @@ convert_to_integer (type, expr)\n       else if (outprec >= inprec)\n \treturn build1 (NOP_EXPR, type, expr);\n \n+      /* If TYPE is an enumeral type or a type with a precision less\n+\t than the number of bits in its mode, do the conversion to the\n+\t type corresponding to its mode, then do a nop conversion\n+\t to TYPE.  */\n+      else if (TREE_CODE (type) == ENUMERAL_TYPE\n+\t       || outprec != GET_MODE_BITSIZE (TYPE_MODE (type)))\n+\treturn build1 (NOP_EXPR, type,\n+\t\t       convert (type_for_mode (TYPE_MODE (type),\n+\t\t\t\t\t       TREE_UNSIGNED (type)),\n+\t\t\t\texpr));\n+\n       /* Here detect when we can distribute the truncation down past some\n \t arithmetic.  For example, if adding two longs and converting to an\n \t int, we can equally well convert both to ints and then add."}]}