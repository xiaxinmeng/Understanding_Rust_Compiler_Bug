{"sha": "4c24ec6d58db238f64bda456ebdb0b5c82347d78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyNGVjNmQ1OGRiMjM4ZjY0YmRhNDU2ZWJkYjBiNWM4MjM0N2Q3OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-05-22T08:17:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-05-22T08:17:40Z"}, "message": "decl.c (gnat_to_gnu_field): Do not enforce strict alignment for simple volatile fields and remove...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_field): Do not enforce strict\n\talignment for simple volatile fields and remove associated errors.\ntestsuite/\n\t* gnat.dg/specs/volatile1.ads: Remove obsolete errors.\n\t* gnat.dg/specs/clause_on_volatile.ads: Likewise.\n\nFrom-SVN: r248320", "tree": {"sha": "8656c279a45119f7d0d0882057fc590a6e2d760c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8656c279a45119f7d0d0882057fc590a6e2d760c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c24ec6d58db238f64bda456ebdb0b5c82347d78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c24ec6d58db238f64bda456ebdb0b5c82347d78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c24ec6d58db238f64bda456ebdb0b5c82347d78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c24ec6d58db238f64bda456ebdb0b5c82347d78/comments", "author": null, "committer": null, "parents": [{"sha": "772cd69487596ab91845ef4a0e4ace6c8433892a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772cd69487596ab91845ef4a0e4ace6c8433892a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/772cd69487596ab91845ef4a0e4ace6c8433892a"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "e7d5692a286cb0e242d9f9d5fde1c8eba6f19e34", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c24ec6d58db238f64bda456ebdb0b5c82347d78/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c24ec6d58db238f64bda456ebdb0b5c82347d78/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4c24ec6d58db238f64bda456ebdb0b5c82347d78", "patch": "@@ -1,3 +1,8 @@\n+2017-05-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_field): Do not enforce strict\n+\talignment for simple volatile fields and remove associated errors.\n+\n 2017-05-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (get_elaboration_procedure): Delete."}, {"sha": "4bf14649d97459ac89e6738a9caf3267b2309fad", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c24ec6d58db238f64bda456ebdb0b5c82347d78/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c24ec6d58db238f64bda456ebdb0b5c82347d78/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=4c24ec6d58db238f64bda456ebdb0b5c82347d78", "patch": "@@ -6783,19 +6783,24 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n {\n   const Entity_Id gnat_record_type = Underlying_Type (Scope (gnat_field));\n   const Entity_Id gnat_field_type = Etype (gnat_field);\n-  const bool is_aliased\n-    = Is_Aliased (gnat_field);\n   const bool is_atomic\n     = (Is_Atomic_Or_VFA (gnat_field) || Is_Atomic_Or_VFA (gnat_field_type));\n+  const bool is_aliased = Is_Aliased (gnat_field);\n   const bool is_independent\n     = (Is_Independent (gnat_field) || Is_Independent (gnat_field_type));\n   const bool is_volatile\n     = (Treat_As_Volatile (gnat_field) || Treat_As_Volatile (gnat_field_type));\n+  const bool is_strict_alignment = Strict_Alignment (gnat_field_type);\n+  /* We used to consider that volatile fields also require strict alignment,\n+     but that was an interpolation and would cause us to reject a pragma\n+     volatile on a packed record type containing boolean components, while\n+     there is no basis to do so in the RM.  In such cases, the writes will\n+     involve load-modify-store sequences, but that's OK for volatile.  The\n+     only constraint is the implementation advice whereby only the bits of\n+     the components should be accessed if they both start and end on byte\n+     boundaries, but that should be guaranteed by the GCC memory model.  */\n   const bool needs_strict_alignment\n-    = (is_aliased\n-       || is_independent\n-       || is_volatile\n-       || Strict_Alignment (gnat_field_type));\n+    = (is_atomic || is_aliased || is_independent || is_strict_alignment);\n   tree gnu_field_type = gnat_to_gnu_type (gnat_field_type);\n   tree gnu_field_id = get_entity_name (gnat_field);\n   tree gnu_field, gnu_size, gnu_pos;\n@@ -6917,9 +6922,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t\ts = \"position of aliased field& must be multiple of ^ bits\";\n \t      else if (is_independent)\n \t\ts = \"position of independent field& must be multiple of ^ bits\";\n-\t      else if (is_volatile)\n-\t\ts = \"position of volatile field& must be multiple of ^ bits\";\n-\t      else if (Strict_Alignment (gnat_field_type))\n+\t      else if (is_strict_alignment)\n \t\ts = \"position of & with aliased or tagged part must be\"\n \t\t    \" multiple of ^ bits\";\n \t      else\n@@ -6947,9 +6950,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t\t    s = \"size of aliased field& must be ^ bits\";\n \t\t  else if (is_independent)\n \t\t    s = \"size of independent field& must be at least ^ bits\";\n-\t\t  else if (is_volatile)\n-\t\t    s = \"size of volatile field& must be at least ^ bits\";\n-\t\t  else if (Strict_Alignment (gnat_field_type))\n+\t\t  else if (is_strict_alignment)\n \t\t    s = \"size of & with aliased or tagged part must be\"\n \t\t\t\" at least ^ bits\";\n \t\t  else\n@@ -6969,10 +6970,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t\t  if (is_independent)\n \t\t    s = \"size of independent field& must be multiple of\"\n \t\t\t\" Storage_Unit\";\n-\t\t  else if (is_volatile)\n-\t\t    s = \"size of volatile field& must be multiple of\"\n-\t\t\t\" Storage_Unit\";\n-\t\t  else if (Strict_Alignment (gnat_field_type))\n+\t\t  else if (is_strict_alignment)\n \t\t    s = \"size of & with aliased or tagged part must be\"\n \t\t\t\" multiple of Storage_Unit\";\n \t\t  else\n@@ -7079,9 +7077,9 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n   /* Now create the decl for the field.  */\n   gnu_field\n     = create_field_decl (gnu_field_id, gnu_field_type, gnu_record_type,\n-\t\t\t gnu_size, gnu_pos, packed, Is_Aliased (gnat_field));\n+\t\t\t gnu_size, gnu_pos, packed, is_aliased);\n   Sloc_to_locus (Sloc (gnat_field), &DECL_SOURCE_LOCATION (gnu_field));\n-  DECL_ALIASED_P (gnu_field) = Is_Aliased (gnat_field);\n+  DECL_ALIASED_P (gnu_field) = is_aliased;\n   TREE_SIDE_EFFECTS (gnu_field) = TREE_THIS_VOLATILE (gnu_field) = is_volatile;\n \n   if (Ekind (gnat_field) == E_Discriminant)"}, {"sha": "575ed96c46a1f572557314ed83676f155054ae21", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c24ec6d58db238f64bda456ebdb0b5c82347d78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c24ec6d58db238f64bda456ebdb0b5c82347d78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c24ec6d58db238f64bda456ebdb0b5c82347d78", "patch": "@@ -1,3 +1,8 @@\n+2017-05-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/volatile1.ads: Remove obsolete errors.\n+\t* gnat.dg/specs/clause_on_volatile.ads: Likewise.\n+\n 2017-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/70265"}, {"sha": "f4c0b985b54f8da3331a8bc4f730544a225c70a5", "filename": "gcc/testsuite/gnat.dg/specs/clause_on_volatile.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c24ec6d58db238f64bda456ebdb0b5c82347d78/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fclause_on_volatile.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c24ec6d58db238f64bda456ebdb0b5c82347d78/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fclause_on_volatile.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fclause_on_volatile.ads?ref=4c24ec6d58db238f64bda456ebdb0b5c82347d78", "patch": "@@ -57,7 +57,7 @@ package Clause_On_Volatile is\n   end record;\n   For V1'Alignment use 4;\n   for V1 use record\n-     VW at 0 range 0 .. 15; -- { dg-error \"must be at least\" }\n+     VW at 0 range 0 .. 15;\n   end record;\n \n   type V2 is record\n@@ -67,7 +67,7 @@ package Clause_On_Volatile is\n   For V2'Alignment use 4;\n   for V2 use record\n      B at 0 range 0 .. 7;\n-     VW at 1 range 0 .. 31; -- { dg-error \"must be multiple\" }\n+     VW at 1 range 0 .. 31;\n   end record;\n \n   type V3 is record\n@@ -77,7 +77,7 @@ package Clause_On_Volatile is\n   For V3'Alignment use 4;\n   for V3 use record\n      B at 0 range 0 .. 7;\n-     VW at 1 range 0 .. 15; -- { dg-error \"must be (multiple|at least)\" }\n+     VW at 1 range 0 .. 15;\n   end record;\n \n end Clause_On_Volatile;"}, {"sha": "6f9421af45f18233a254a775b3c5e013f754c3f3", "filename": "gcc/testsuite/gnat.dg/specs/volatile1.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c24ec6d58db238f64bda456ebdb0b5c82347d78/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvolatile1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c24ec6d58db238f64bda456ebdb0b5c82347d78/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvolatile1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvolatile1.ads?ref=4c24ec6d58db238f64bda456ebdb0b5c82347d78", "patch": "@@ -19,7 +19,7 @@ package Volatile1 is\n     pragma Volatile (C);\n   end record;\n   for R2 use record\n-    C at 0 range 0 .. 10; -- { dg-error \"size of volatile field\" }\n+    C at 0 range 0 .. 10;\n   end record;\n \n end Volatile1;"}]}