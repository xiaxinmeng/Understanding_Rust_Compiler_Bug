{"sha": "c18101f5d1d45dd340a753bbb9c51478cfe522d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE4MTAxZjVkMWQ0NWRkMzQwYTc1M2JiYjljNTE0NzhjZmU1MjJkNg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-06-07T10:45:03Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-06-07T10:45:03Z"}, "message": "tree-ssa-loop-ivopts.c (ivopts_estimate_reg_pressure): New reg_pressure model function.\n\n\t* tree-ssa-loop-ivopts.c (ivopts_estimate_reg_pressure): New\n\treg_pressure model function.\n\t(ivopts_global_cost_for_size): Delete.\n\t(determine_set_costs, iv_ca_recount_cost): Call new model function\n\tivopts_estimate_reg_pressure.\n\nFrom-SVN: r248954", "tree": {"sha": "38c3919ff62bb5092c7294fbfa141bd22ad792e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38c3919ff62bb5092c7294fbfa141bd22ad792e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c18101f5d1d45dd340a753bbb9c51478cfe522d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18101f5d1d45dd340a753bbb9c51478cfe522d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c18101f5d1d45dd340a753bbb9c51478cfe522d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18101f5d1d45dd340a753bbb9c51478cfe522d6/comments", "author": null, "committer": null, "parents": [{"sha": "cb9ac430cbadfe075164c86e9f1fe190138da15d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb9ac430cbadfe075164c86e9f1fe190138da15d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb9ac430cbadfe075164c86e9f1fe190138da15d"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "cda475c6caeb6357c4efce4796df83c81a615a1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18101f5d1d45dd340a753bbb9c51478cfe522d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18101f5d1d45dd340a753bbb9c51478cfe522d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c18101f5d1d45dd340a753bbb9c51478cfe522d6", "patch": "@@ -1,3 +1,11 @@\n+2017-06-07  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-loop-ivopts.c (ivopts_estimate_reg_pressure): New\n+\treg_pressure model function.\n+\t(ivopts_global_cost_for_size): Delete.\n+\t(determine_set_costs, iv_ca_recount_cost): Call new model function\n+\tivopts_estimate_reg_pressure.\n+\n 2017-06-07  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_rtx_costs): Make sdiv more expensive than udiv."}, {"sha": "1cbff04d1e5bf394dd8294b41d2dc3759cfeea04", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18101f5d1d45dd340a753bbb9c51478cfe522d6/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18101f5d1d45dd340a753bbb9c51478cfe522d6/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=c18101f5d1d45dd340a753bbb9c51478cfe522d6", "patch": "@@ -5531,17 +5531,46 @@ determine_iv_costs (struct ivopts_data *data)\n     fprintf (dump_file, \"\\n\");\n }\n \n-/* Calculates cost for having N_REGS registers.  This number includes\n-   induction variables, invariant variables and invariant expressions.  */\n+/* Estimate register pressure for loop having N_INVS invariants and N_CANDS\n+   induction variables.  Note N_INVS includes both invariant variables and\n+   invariant expressions.  */\n \n static unsigned\n-ivopts_global_cost_for_size (struct ivopts_data *data, unsigned n_regs)\n+ivopts_estimate_reg_pressure (struct ivopts_data *data, unsigned n_invs,\n+\t\t\t      unsigned n_cands)\n {\n-  unsigned cost = estimate_reg_pressure_cost (n_regs,\n-\t\t\t\t\t      data->regs_used, data->speed,\n-\t\t\t\t\t      data->body_includes_call);\n-  /* Add n_regs to the cost, so that we prefer eliminating ivs if possible.  */\n-  return n_regs + cost;\n+  unsigned cost;\n+  unsigned n_old = data->regs_used, n_new = n_invs + n_cands;\n+  unsigned regs_needed = n_new + n_old, available_regs = target_avail_regs;\n+  bool speed = data->speed;\n+\n+  /* If there is a call in the loop body, the call-clobbered registers\n+     are not available for loop invariants.  */\n+  if (data->body_includes_call)\n+    available_regs = available_regs - target_clobbered_regs;\n+\n+  /* If we have enough registers.  */\n+  if (regs_needed + target_res_regs < available_regs)\n+    cost = n_new;\n+  /* If close to running out of registers, try to preserve them.  */\n+  else if (regs_needed <= available_regs)\n+    cost = target_reg_cost [speed] * regs_needed;\n+  /* If we run out of available registers but the number of candidates\n+     does not, we penalize extra registers using target_spill_cost.  */\n+  else if (n_cands <= available_regs)\n+    cost = target_reg_cost [speed] * available_regs\n+\t   + target_spill_cost [speed] * (regs_needed - available_regs);\n+  /* If the number of candidates runs out available registers, we penalize\n+     extra candidate registers using target_spill_cost * 2.  Because it is\n+     more expensive to spill induction variable than invariant.  */\n+  else\n+    cost = target_reg_cost [speed] * available_regs\n+\t   + target_spill_cost [speed] * (n_cands - available_regs) * 2\n+\t   + target_spill_cost [speed] * (regs_needed - n_cands);\n+\n+  /* Finally, add the number of candidates, so that we prefer eliminating\n+     induction variables if possible.  */\n+  return cost + n_cands;\n }\n \n /* For each size of the induction variable set determine the penalty.  */\n@@ -5602,7 +5631,7 @@ determine_set_costs (struct ivopts_data *data)\n       fprintf (dump_file, \"  ivs\\tcost\\n\");\n       for (j = 0; j <= 2 * target_avail_regs; j++)\n \tfprintf (dump_file, \"  %d\\t%d\\n\", j,\n-\t\t ivopts_global_cost_for_size (data, j));\n+\t\t ivopts_estimate_reg_pressure (data, 0, j));\n       fprintf (dump_file, \"\\n\");\n     }\n }\n@@ -5661,7 +5690,7 @@ iv_ca_recount_cost (struct ivopts_data *data, struct iv_ca *ivs)\n   comp_cost cost = ivs->cand_use_cost;\n \n   cost += ivs->cand_cost;\n-  cost += ivopts_global_cost_for_size (data, ivs->n_invs + ivs->n_cands);\n+  cost += ivopts_estimate_reg_pressure (data, ivs->n_invs, ivs->n_cands);\n   ivs->cost = cost;\n }\n "}]}