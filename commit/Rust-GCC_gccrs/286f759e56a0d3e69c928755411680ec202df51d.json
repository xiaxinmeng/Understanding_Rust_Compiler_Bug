{"sha": "286f759e56a0d3e69c928755411680ec202df51d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg2Zjc1OWU1NmEwZDNlNjljOTI4NzU1NDExNjgwZWMyMDJkZjUxZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-12-07T19:53:34Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-12-07T19:53:34Z"}, "message": "verify.cc (_Jv_BytecodeVerifier::branch_prepass): Set start_PC earlier, for error handling.\n\n\t* verify.cc (_Jv_BytecodeVerifier::branch_prepass): Set start_PC\n\tearlier, for error handling.\n\t(_Jv_BytecodeVerifier::note_branch_target): Fixed branch target\n\tcheck.\n\nFrom-SVN: r47769", "tree": {"sha": "b6eb11f7031ce5947f079299716c4a7c77c524a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6eb11f7031ce5947f079299716c4a7c77c524a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/286f759e56a0d3e69c928755411680ec202df51d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/286f759e56a0d3e69c928755411680ec202df51d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/286f759e56a0d3e69c928755411680ec202df51d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/286f759e56a0d3e69c928755411680ec202df51d/comments", "author": null, "committer": null, "parents": [{"sha": "8f25dc2806108d4339d8a0af97788068a8695bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f25dc2806108d4339d8a0af97788068a8695bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f25dc2806108d4339d8a0af97788068a8695bed"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "067b30178fa2d9f99b9b03ae5f8c3ef94a29abf3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/286f759e56a0d3e69c928755411680ec202df51d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/286f759e56a0d3e69c928755411680ec202df51d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=286f759e56a0d3e69c928755411680ec202df51d", "patch": "@@ -1,3 +1,10 @@\n+2001-12-07  Tom Tromey  <tromey@redhat.com>\n+\n+\t* verify.cc (_Jv_BytecodeVerifier::branch_prepass): Set start_PC\n+\tearlier, for error handling.\n+\t(_Jv_BytecodeVerifier::note_branch_target): Fixed branch target\n+\tcheck.\n+\n 2001-12-06  Tom Tromey  <tromey@redhat.com>\n \n \t* verify.cc (_Jv_BytecodeVerifier::FLAG_JSR_TARGET): Removed."}, {"sha": "b0206d15f983c202da89b5d0e1a6c9a4a6f69b30", "filename": "libjava/verify.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/286f759e56a0d3e69c928755411680ec202df51d/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/286f759e56a0d3e69c928755411680ec202df51d/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=286f759e56a0d3e69c928755411680ec202df51d", "patch": "@@ -1254,8 +1254,11 @@ class _Jv_BytecodeVerifier\n \n   void note_branch_target (int pc, bool is_jsr_target = false)\n   {\n-    if (pc <= PC && ! (flags[pc] & FLAG_INSN_START))\n-      verify_fail (\"branch not to instruction start\");\n+    // Don't check `pc <= PC', because we've advanced PC after\n+    // fetching the target and we haven't yet checked the next\n+    // instruction.\n+    if (pc < PC && ! (flags[pc] & FLAG_INSN_START))\n+      verify_fail (\"branch not to instruction start\", start_PC);\n     flags[pc] |= FLAG_BRANCH_TARGET;\n     if (is_jsr_target)\n       {\n@@ -1395,6 +1398,9 @@ class _Jv_BytecodeVerifier\n     PC = 0;\n     while (PC < current_method->code_length)\n       {\n+\t// Set `start_PC' early so that error checking can have the\n+\t// correct value.\n+\tstart_PC = PC;\n \tflags[PC] |= FLAG_INSN_START;\n \n \t// If the previous instruction was a jsr, then the next\n@@ -1404,7 +1410,6 @@ class _Jv_BytecodeVerifier\n \t  note_branch_target (PC);\n \tlast_was_jsr = false;\n \n-\tstart_PC = PC;\n \tjava_opcode opcode = (java_opcode) bytecode[PC++];\n \tswitch (opcode)\n \t  {"}]}