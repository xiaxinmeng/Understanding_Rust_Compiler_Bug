{"sha": "8f80d39dcb18e52ee752752d24bb36b5b4f21825", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4MGQzOWRjYjE4ZTUyZWU3NTI3NTJkMjRiYjM2YjViNGYyMTgyNQ==", "commit": {"author": {"name": "Gerald Baumgartner", "email": "gb@alexander.cs.purdue.edu", "date": "1995-07-26T13:37:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-26T13:37:13Z"}, "message": "(build_signature_method_call): Renamed offset_identifier and local variable offset to vt_off_identifer and vt_off...\n\n(build_signature_method_call): Renamed offset_identifier and\nlocal variable offset to vt_off_identifer and vt_off, respecitively.\n(build_signature_table_constructor): Renamed offset to vt_off.\n(build_signature_table_constructor): Build the constructor\naccording to the new layout.  Set the vb_off field to -1 for now.\n\nFrom-SVN: r10172", "tree": {"sha": "64b2f030afe342ff1f644938e5435cc0f4a29396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b2f030afe342ff1f644938e5435cc0f4a29396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f80d39dcb18e52ee752752d24bb36b5b4f21825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f80d39dcb18e52ee752752d24bb36b5b4f21825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f80d39dcb18e52ee752752d24bb36b5b4f21825", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f80d39dcb18e52ee752752d24bb36b5b4f21825/comments", "author": null, "committer": null, "parents": [{"sha": "9dd70aa4d97c28b087499366f7af19eac41c4d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd70aa4d97c28b087499366f7af19eac41c4d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd70aa4d97c28b087499366f7af19eac41c4d5c"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "b50eee46b81123e1290d51915c60a685d900fef2", "filename": "gcc/cp/sig.c", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f80d39dcb18e52ee752752d24bb36b5b4f21825/gcc%2Fcp%2Fsig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f80d39dcb18e52ee752752d24bb36b5b4f21825/gcc%2Fcp%2Fsig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsig.c?ref=8f80d39dcb18e52ee752752d24bb36b5b4f21825", "patch": "@@ -559,32 +559,41 @@ build_signature_table_constructor (sig_ty, rhs)\n \t}\n       else\n \t{\n-\t  tree tag, delta, pfn, offset, index;\n-\t  tree tag_decl, delta_decl, pfn_decl, offset_decl, index_decl;\n+\t  tree tag, vb_off, delta, index, pfn, vt_off;\n+\t  tree tag_decl, vb_off_decl, delta_decl, index_decl;\n+\t  tree pfn_decl, vt_off_decl;\n \n \t  if (rhs_method == sig_method)\n \t    {\n+\t      /* default implementation */\n \t      tag = build_unary_op (NEGATE_EXPR, integer_one_node, 0);\n+\t      vb_off = build_unary_op (NEGATE_EXPR, integer_one_node, 0);\n \t      delta = integer_zero_node;\n+\t      index = integer_zero_node;\n \t      pfn = build_unary_op (ADDR_EXPR, rhs_method, 0);\n \t      TREE_TYPE (pfn) = ptr_type_node;\n+\t      TREE_ADDRESSABLE (rhs_method) = 1;\n \t      offset_p = 0;\t/* we can't offset the rhs sig table */\n \t    }\n \t  else if (DECL_VINDEX (rhs_method))\n \t    {\n+\t      /* virtual member function */\n \t      tag = integer_one_node;\n+\t      vb_off = build_unary_op (NEGATE_EXPR, integer_one_node, 0);\n \t      delta = BINFO_OFFSET (get_binfo (DECL_CLASS_CONTEXT (rhs_method),\n \t\t\t\t\t       rhstype, 1));\n-\t      pfn = null_pointer_node;\n-\t      offset = get_vfield_offset (get_binfo (DECL_CONTEXT (rhs_method),\n-\t\t\t\t\t\t     rhstype, 0));\n \t      index = DECL_VINDEX (rhs_method);\n+\t      vt_off = get_vfield_offset (get_binfo (DECL_CONTEXT (rhs_method),\n+\t\t\t\t\t\t     rhstype, 0));\n \t    }\n \t  else\n \t    {\n+\t      /* non-virtual member function */\n \t      tag = integer_zero_node;\n+\t      vb_off = build_unary_op (NEGATE_EXPR, integer_one_node, 0);\n \t      delta = BINFO_OFFSET (get_binfo (DECL_CLASS_CONTEXT (rhs_method),\n \t\t\t\t\t       rhstype, 1));\n+\t      index = integer_zero_node;\n \t      pfn = build_unary_op (ADDR_EXPR, rhs_method, 0);\n \t      TREE_TYPE (pfn) = ptr_type_node;\n \t      TREE_ADDRESSABLE (rhs_method) = 1;\n@@ -594,30 +603,33 @@ build_signature_table_constructor (sig_ty, rhs)\n \t     of a struct (i.e., anonymous union), we build the constructor\n \t     by hand, without calling digest_init.  */\n \t  tag_decl = TYPE_FIELDS (sigtable_entry_type);\n-\t  delta_decl = TREE_CHAIN (tag_decl);\n-\t  pfn_decl = TREE_CHAIN (delta_decl);\n-\t  offset_decl = TREE_CHAIN (pfn_decl);\n-\t  index_decl = TREE_CHAIN (offset_decl);\n+\t  vb_off_decl = TREE_CHAIN (tag_decl);\n+\t  delta_decl = TREE_CHAIN (vb_off_decl);\n+\t  index_decl = TREE_CHAIN (delta_decl);\n+\t  pfn_decl = TREE_CHAIN (index_decl);\n+\t  vt_off_decl = TREE_CHAIN (pfn_decl);\n \t  \n \t  tag = convert (TREE_TYPE (tag_decl), tag);\n+\t  vb_off = convert (TREE_TYPE (vb_off_decl), vb_off);\n \t  delta = convert (TREE_TYPE (delta_decl), delta);\n+\t  index = convert (TREE_TYPE (index_decl), index);\n \n \t  if (DECL_VINDEX (rhs_method))\n \t    {\n-\t      offset = convert (TREE_TYPE (offset_decl), offset);\n-\t      index = convert (TREE_TYPE (index_decl), index);\n+\t      vt_off = convert (TREE_TYPE (vt_off_decl), vt_off);\n \n-\t      tbl_entry = tree_cons (offset_decl, offset,\n-\t\t\t\t     build_tree_list (index_decl, index));\n+\t      tbl_entry = build_tree_list (vt_off_decl, vt_off);\n \t    }\n \t  else\n \t    {\n \t      pfn = convert (TREE_TYPE (pfn_decl), pfn);\n \n \t      tbl_entry = build_tree_list (pfn_decl, pfn);\n \t    }\n+\t  tbl_entry = tree_cons (delta_decl, delta,\n+\t\t\t\t tree_cons (index_decl, index, tbl_entry));\n \t  tbl_entry = tree_cons (tag_decl, tag,\n-\t\t\t\t tree_cons (delta_decl, delta, tbl_entry));\n+\t\t\t\t tree_cons (vb_off_decl, vb_off, tbl_entry));\n \t  tbl_entry = build (CONSTRUCTOR, sigtable_entry_type,\n \t\t\t     NULL_TREE, tbl_entry);\n \n@@ -913,14 +925,14 @@ build_signature_method_call (basetype, instance, function, parms)\n   tree tbl_entry = build_component_ref (build1 (INDIRECT_REF, basetype,\n \t\t\t\t\t\tsignature_tbl_ptr),\n \t\t\t\t\tsig_field_name, basetype_path, 1);\n-  tree tag, delta, pfn, offset, index, vfn;\n+  tree tag, delta, pfn, vt_off, index, vfn;\n   tree deflt_call = NULL_TREE, direct_call, virtual_call, result;\n \n   tbl_entry = save_expr (tbl_entry);\n   tag = build_component_ref (tbl_entry, tag_identifier, NULL_TREE, 1);\n   delta = build_component_ref (tbl_entry, delta_identifier, NULL_TREE, 1);\n   pfn = build_component_ref (tbl_entry, pfn_identifier, NULL_TREE, 1);\n-  offset = build_component_ref (tbl_entry, offset_identifier, NULL_TREE, 1);\n+  vt_off = build_component_ref (tbl_entry, vt_off_identifier, NULL_TREE, 1);\n   index = build_component_ref (tbl_entry, index_identifier, NULL_TREE, 1);\n   TREE_TYPE (pfn) = build_pointer_type (TREE_TYPE (function)); \n \n@@ -956,7 +968,7 @@ build_signature_method_call (basetype, instance, function, parms)\n       vfld = build (PLUS_EXPR,\n \t\t    build_pointer_type (build_pointer_type (vtbl_type_node)),\n \t\t    convert (ptrdiff_type_node, object_ptr),\n-\t\t    convert (ptrdiff_type_node, offset));\n+\t\t    convert (ptrdiff_type_node, vt_off));\n       vtbl = build_indirect_ref (build_indirect_ref (vfld, NULL_PTR),\n \t\t\t\t NULL_PTR);\n       aref = build_array_ref (vtbl, index);"}]}