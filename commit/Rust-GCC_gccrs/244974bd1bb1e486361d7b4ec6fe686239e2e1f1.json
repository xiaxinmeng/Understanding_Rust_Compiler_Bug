{"sha": "244974bd1bb1e486361d7b4ec6fe686239e2e1f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ0OTc0YmQxYmIxZTQ4NjM2MWQ3YjRlYzZmZTY4NjIzOWUyZTFmMQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-05-21T22:02:26Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-05-21T22:02:26Z"}, "message": "re PR fortran/32027 (The \"DO\" variable isn't consistent after loop)\n\n\tPR fortran/32027\n\n\t* trans-stmt.c (gfc_trans_do): Fix the value of loop variable\n\twhen the loop ends.\n\n\t* gfortran.dg/do_3.F90: Add checks for the final value of the\n\tloop variable.\n\nFrom-SVN: r124923", "tree": {"sha": "c08086a86a965927acdec1f1d221c9d3afc7c69d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c08086a86a965927acdec1f1d221c9d3afc7c69d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/244974bd1bb1e486361d7b4ec6fe686239e2e1f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/244974bd1bb1e486361d7b4ec6fe686239e2e1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/244974bd1bb1e486361d7b4ec6fe686239e2e1f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/244974bd1bb1e486361d7b4ec6fe686239e2e1f1/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76dac339660714a2de931e371d89bc54a5cc9782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76dac339660714a2de931e371d89bc54a5cc9782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76dac339660714a2de931e371d89bc54a5cc9782"}], "stats": {"total": 151, "additions": 83, "deletions": 68}, "files": [{"sha": "ab99113b8f66d949e4e7fd6e27b909562dac70ee", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244974bd1bb1e486361d7b4ec6fe686239e2e1f1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244974bd1bb1e486361d7b4ec6fe686239e2e1f1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=244974bd1bb1e486361d7b4ec6fe686239e2e1f1", "patch": "@@ -1,3 +1,9 @@\n+2007-05-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32027\n+\t* trans-stmt.c (gfc_trans_do): Fix the value of loop variable\n+\twhen the loop ends.\n+\n 2007-05-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* trans-stmt.c (gfc_trans_do): Fix a typo in comment."}, {"sha": "444d880964fdf1c75d20257ee46aa59641f919d9", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244974bd1bb1e486361d7b4ec6fe686239e2e1f1/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244974bd1bb1e486361d7b4ec6fe686239e2e1f1/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=244974bd1bb1e486361d7b4ec6fe686239e2e1f1", "patch": "@@ -947,6 +947,10 @@ gfc_trans_do (gfc_code * code)\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n+  /* Increment the loop variable.  */\n+  tmp = build2 (PLUS_EXPR, type, dovar, step);\n+  gfc_add_modify_expr (&body, dovar, tmp);\n+\n   /* End with the loop condition.  Loop until countm1 == 0.  */\n   cond = fold_build2 (EQ_EXPR, boolean_type_node, countm1,\n \t\t      build_int_cst (utype, 0));\n@@ -955,10 +959,6 @@ gfc_trans_do (gfc_code * code)\n \t\t     cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&body, tmp);\n \n-  /* Increment the loop variable.  */\n-  tmp = build2 (PLUS_EXPR, type, dovar, step);\n-  gfc_add_modify_expr (&body, dovar, tmp);\n-\n   /* Decrement the loop count.  */\n   tmp = build2 (MINUS_EXPR, utype, countm1, build_int_cst (utype, 1));\n   gfc_add_modify_expr (&body, countm1, tmp);"}, {"sha": "6de884bd5887113b6bd21d228909b9a9a915e7b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244974bd1bb1e486361d7b4ec6fe686239e2e1f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244974bd1bb1e486361d7b4ec6fe686239e2e1f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=244974bd1bb1e486361d7b4ec6fe686239e2e1f1", "patch": "@@ -1,3 +1,9 @@\n+2007-05-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32027\n+\t* gfortran.dg/do_3.F90: Add checks for the final value of the\n+\tloop variable.\n+\n 2007-05-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.c-torture/execute/990127-2.x: New file."}, {"sha": "a022fc1fa8c6b733938e6f2a0bed2955ab742638", "filename": "gcc/testsuite/gfortran.dg/do_3.F90", "status": "modified", "additions": 67, "deletions": 64, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244974bd1bb1e486361d7b4ec6fe686239e2e1f1/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_3.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244974bd1bb1e486361d7b4ec6fe686239e2e1f1/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_3.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_3.F90?ref=244974bd1bb1e486361d7b4ec6fe686239e2e1f1", "patch": "@@ -1,110 +1,113 @@\n ! { dg-do run }\n-! { dg-options \"-std=legacy -ffree-line-length-none\" }\n+! { dg-options \"-std=legacy -ffree-line-length-none -fno-range-check\" }\n program test\n   integer :: count\n   integer :: i\n   integer(kind=1) :: i1\n   real :: r\n \n-#define TEST_LOOP(var,from,to,step,total,test) \\\n+#define TEST_LOOP(var,from,to,step,total,test,final) \\\n   count = 0 ; do var = from, to, step ; count = count + 1 ; end do ; \\\n   if (count /= total) call abort ; \\\n-  if (test (from, to, step) /= total) call abort\n+  if (test (from, to, step, final) /= total) call abort\n \n   ! Integer loops\n-  TEST_LOOP(i, 0, 0, 1, 1, test_i)\n-  TEST_LOOP(i, 0, 0, 2, 1, test_i)\n-  TEST_LOOP(i, 0, 0, -1, 1, test_i)\n-  TEST_LOOP(i, 0, 0, -2, 1, test_i)\n-\n-  TEST_LOOP(i, 0, 1, 1, 2, test_i)\n-  TEST_LOOP(i, 0, 1, 2, 1, test_i)\n-  TEST_LOOP(i, 0, 1, 3, 1, test_i)\n-  TEST_LOOP(i, 0, 1, huge(0), 1, test_i)\n-  TEST_LOOP(i, 0, 1, -1, 0, test_i)\n-  TEST_LOOP(i, 0, 1, -2, 0, test_i)\n-  TEST_LOOP(i, 0, 1, -3, 0, test_i)\n-  TEST_LOOP(i, 0, 1, -huge(0), 0, test_i)\n-  TEST_LOOP(i, 0, 1, -huge(0)-1, 0, test_i)\n-\n-  TEST_LOOP(i, 1, 0, 1, 0, test_i)\n-  TEST_LOOP(i, 1, 0, 2, 0, test_i)\n-  TEST_LOOP(i, 1, 0, 3, 0, test_i)\n-  TEST_LOOP(i, 1, 0, huge(0), 0, test_i)\n-  TEST_LOOP(i, 1, 0, -1, 2, test_i)\n-  TEST_LOOP(i, 1, 0, -2, 1, test_i)\n-  TEST_LOOP(i, 1, 0, -3, 1, test_i)\n-  TEST_LOOP(i, 1, 0, -huge(0), 1, test_i)\n-  TEST_LOOP(i, 1, 0, -huge(0)-1, 1, test_i)\n-\n-  TEST_LOOP(i, 0, 17, 1, 18, test_i)\n-  TEST_LOOP(i, 0, 17, 2, 9, test_i)\n-  TEST_LOOP(i, 0, 17, 3, 6, test_i)\n-  TEST_LOOP(i, 0, 17, 4, 5, test_i)\n-  TEST_LOOP(i, 0, 17, 5, 4, test_i)\n-  TEST_LOOP(i, 17, 0, -1, 18, test_i)\n-  TEST_LOOP(i, 17, 0, -2, 9, test_i)\n-  TEST_LOOP(i, 17, 0, -3, 6, test_i)\n-  TEST_LOOP(i, 17, 0, -4, 5, test_i)\n-  TEST_LOOP(i, 17, 0, -5, 4, test_i)\n-\n-  TEST_LOOP(i1, -huge(i1)-1_1, huge(i1), 1_1, int(huge(i1))*2+2, test_i1)\n-  TEST_LOOP(i1, -huge(i1)-1_1, huge(i1), 2_1, int(huge(i1))+1, test_i1)\n-  TEST_LOOP(i1, -huge(i1)-1_1, huge(i1), huge(i1), 3, test_i1)\n-\n-  TEST_LOOP(i1, huge(i1), -huge(i1)-1_1, -1_1, int(huge(i1))*2+2, test_i1)\n-  TEST_LOOP(i1, huge(i1), -huge(i1)-1_1, -2_1, int(huge(i1))+1, test_i1)\n-  TEST_LOOP(i1, huge(i1), -huge(i1)-1_1, -huge(i1), 3, test_i1)\n-  TEST_LOOP(i1, huge(i1), -huge(i1)-1_1, -huge(i1)-1_1, 2, test_i1)\n-\n-  TEST_LOOP(i1, -2_1, 3_1, huge(i1), 1, test_i1)\n-  TEST_LOOP(i1, -2_1, 3_1, -huge(i1), 0, test_i1)\n-  TEST_LOOP(i1, 2_1, -3_1, -huge(i1), 1, test_i1)\n-  TEST_LOOP(i1, 2_1, -3_1, huge(i1), 0, test_i1)\n+  TEST_LOOP(i, 0, 0, 1, 1, test_i, 1)\n+  TEST_LOOP(i, 0, 0, 2, 1, test_i, 2)\n+  TEST_LOOP(i, 0, 0, -1, 1, test_i, -1)\n+  TEST_LOOP(i, 0, 0, -2, 1, test_i, -2)\n+\n+  TEST_LOOP(i, 0, 1, 1, 2, test_i, 2)\n+  TEST_LOOP(i, 0, 1, 2, 1, test_i, 2)\n+  TEST_LOOP(i, 0, 1, 3, 1, test_i, 3)\n+  TEST_LOOP(i, 0, 1, huge(0), 1, test_i, huge(0))\n+  TEST_LOOP(i, 0, 1, -1, 0, test_i, 0)\n+  TEST_LOOP(i, 0, 1, -2, 0, test_i, 0)\n+  TEST_LOOP(i, 0, 1, -3, 0, test_i, 0)\n+  TEST_LOOP(i, 0, 1, -huge(0), 0, test_i, 0)\n+  TEST_LOOP(i, 0, 1, -huge(0)-1, 0, test_i, 0)\n+\n+  TEST_LOOP(i, 1, 0, 1, 0, test_i, 1)\n+  TEST_LOOP(i, 1, 0, 2, 0, test_i, 1)\n+  TEST_LOOP(i, 1, 0, 3, 0, test_i, 1)\n+  TEST_LOOP(i, 1, 0, huge(0), 0, test_i, 1)\n+  TEST_LOOP(i, 1, 0, -1, 2, test_i, -1)\n+  TEST_LOOP(i, 1, 0, -2, 1, test_i, -1)\n+  TEST_LOOP(i, 1, 0, -3, 1, test_i, -2)\n+  TEST_LOOP(i, 1, 0, -huge(0), 1, test_i, 1-huge(0))\n+  TEST_LOOP(i, 1, 0, -huge(0)-1, 1, test_i, -huge(0))\n+\n+  TEST_LOOP(i, 0, 17, 1, 18, test_i, 18)\n+  TEST_LOOP(i, 0, 17, 2, 9, test_i, 18)\n+  TEST_LOOP(i, 0, 17, 3, 6, test_i, 18)\n+  TEST_LOOP(i, 0, 17, 4, 5, test_i, 20)\n+  TEST_LOOP(i, 0, 17, 5, 4, test_i, 20)\n+  TEST_LOOP(i, 17, 0, -1, 18, test_i, -1)\n+  TEST_LOOP(i, 17, 0, -2, 9, test_i, -1)\n+  TEST_LOOP(i, 17, 0, -3, 6, test_i, -1)\n+  TEST_LOOP(i, 17, 0, -4, 5, test_i, -3)\n+  TEST_LOOP(i, 17, 0, -5, 4, test_i, -3)\n+\n+  TEST_LOOP(i1, -huge(i1)-1_1, huge(i1), 1_1, int(huge(i1))*2+2, test_i1, huge(i1)+1_1)\n+  TEST_LOOP(i1, -huge(i1)-1_1, huge(i1), 2_1, int(huge(i1))+1, test_i1, huge(i1)+1_1)\n+  TEST_LOOP(i1, -huge(i1)-1_1, huge(i1), huge(i1), 3, test_i1, 2_1*huge(i1)-1_1)\n+\n+  TEST_LOOP(i1, huge(i1), -huge(i1)-1_1, -1_1, int(huge(i1))*2+2, test_i1, -huge(i1)-2_1)\n+  TEST_LOOP(i1, huge(i1), -huge(i1)-1_1, -2_1, int(huge(i1))+1, test_i1, -huge(i1)-2_1)\n+  TEST_LOOP(i1, huge(i1), -huge(i1)-1_1, -huge(i1), 3, test_i1, -2_1*huge(i1))\n+  TEST_LOOP(i1, huge(i1), -huge(i1)-1_1, -huge(i1)-1_1, 2, test_i1, -huge(i1)-2_1)\n+\n+  TEST_LOOP(i1, -2_1, 3_1, huge(i1), 1, test_i1, huge(i1)-2_1)\n+  TEST_LOOP(i1, -2_1, 3_1, -huge(i1), 0, test_i1, -2_1)\n+  TEST_LOOP(i1, 2_1, -3_1, -huge(i1), 1, test_i1, 2_1-huge(i1))\n+  TEST_LOOP(i1, 2_1, -3_1, huge(i1), 0, test_i1, 2_1)\n \n   ! Real loops\n-  TEST_LOOP(r, 0.0, 1.0, 0.11, 1 + int(1.0/0.11), test_r)\n-  TEST_LOOP(r, 0.0, 1.0, -0.11, 0, test_r)\n-  TEST_LOOP(r, 0.0, -1.0, 0.11, 0, test_r)\n-  TEST_LOOP(r, 0.0, -1.0, -0.11, 1 + int(1.0/0.11), test_r)\n-  TEST_LOOP(r, 0.0, 0.0, 0.11, 1, test_r)\n-  TEST_LOOP(r, 0.0, 0.0, -0.11, 1, test_r)\n+  TEST_LOOP(r, 0.0, 1.0, 0.11, 1 + int(1.0/0.11), test_r, 0.0)\n+  TEST_LOOP(r, 0.0, 1.0, -0.11, 0, test_r, 0.0)\n+  TEST_LOOP(r, 0.0, -1.0, 0.11, 0, test_r, 0.0)\n+  TEST_LOOP(r, 0.0, -1.0, -0.11, 1 + int(1.0/0.11), test_r, 0.0)\n+  TEST_LOOP(r, 0.0, 0.0, 0.11, 1, test_r, 0.0)\n+  TEST_LOOP(r, 0.0, 0.0, -0.11, 1, test_r, 0.0)\n \n #undef TEST_LOOP\n \n contains\n \n-  function test_i1 (from, to, step) result(res)\n-    integer(kind=1), intent(in) :: from, to, step\n+  function test_i1 (from, to, step, final) result(res)\n+    integer(kind=1), intent(in) :: from, to, step, final\n     integer(kind=1) :: i\n     integer :: res\n \n     res = 0\n     do i = from, to, step\n       res = res + 1\n     end do\n+    if (i /= final) call abort\n   end function test_i1\n \n-  function test_i (from, to, step) result(res)\n-    integer, intent(in) :: from, to, step\n+  function test_i (from, to, step, final) result(res)\n+    integer, intent(in) :: from, to, step, final\n     integer :: i\n     integer :: res\n \n     res = 0\n     do i = from, to, step\n       res = res + 1\n     end do\n+    if (i /= final) call abort\n   end function test_i\n \n-  function test_r (from, to, step) result(res)\n-    real, intent(in) :: from, to, step\n+  function test_r (from, to, step, final) result(res)\n+    real, intent(in) :: from, to, step, final\n     real :: i\n     integer :: res\n \n     res = 0\n     do i = from, to, step\n       res = res + 1\n     end do\n+    ! final is ignored\n   end function test_r\n \n end program test"}]}