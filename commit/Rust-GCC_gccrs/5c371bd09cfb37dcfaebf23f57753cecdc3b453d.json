{"sha": "5c371bd09cfb37dcfaebf23f57753cecdc3b453d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzNzFiZDA5Y2ZiMzdkY2ZhZWJmMjNmNTc3NTNjZWNkYzNiNDUzZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-13T17:20:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-13T17:20:53Z"}, "message": "Simplified GC interface and other goodies.\n\nFrom-SVN: r29947", "tree": {"sha": "88222ac4780a51faaebd7fae01d53ce93e87acf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88222ac4780a51faaebd7fae01d53ce93e87acf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c371bd09cfb37dcfaebf23f57753cecdc3b453d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c371bd09cfb37dcfaebf23f57753cecdc3b453d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c371bd09cfb37dcfaebf23f57753cecdc3b453d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c371bd09cfb37dcfaebf23f57753cecdc3b453d/comments", "author": null, "committer": null, "parents": [{"sha": "005537dfed601a7ec39b4d40f9d0e3bc954f167f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005537dfed601a7ec39b4d40f9d0e3bc954f167f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005537dfed601a7ec39b4d40f9d0e3bc954f167f"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "de10c4b613983e0a83d63e51fb34fff9d70dd342", "filename": "gcc/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c371bd09cfb37dcfaebf23f57753cecdc3b453d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c371bd09cfb37dcfaebf23f57753cecdc3b453d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c371bd09cfb37dcfaebf23f57753cecdc3b453d", "patch": "@@ -1,3 +1,79 @@\n+Wed Oct 13 10:07:54 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* Makefile.in (genrtl.o): Depend on ggc.h.\n+\t* configure.in (valloc): Probe for it.\n+\t(with-gc): Use ggc-page if valloc present.\n+\t* ggc-common.c (ggc_mark_rtx_children): Use ggc_mark_if_gcable.\n+\t(ggc_mark_rtvec_children): New from corpse of ggc_mark_rtvec.\n+\t(ggc_alloc_string): Moved from ggc-page.c.\n+\t* ggc-none.c (ggc_alloc_obj): New.\n+\t(ggc_alloc_rtx, ggc_alloc_rtvec): Remove.\n+\t* ggc-page.c (sys/mman.h): Only include if HAVE_MMAP.\n+\t(struct globals): Likewise for dev_zero_fd.\n+\t(init_ggc): Likewise for it's initialization.\n+\t(ggc_allocated_p): Move careful dereference from ...\n+\t(ggc_lookup_page_table): ... here.  Delete.\n+\t(lookup_page_table_entry): Don't use ggc_lookup_page_table.\n+\t(alloc_anon): Use valloc if no mmap.\n+\t(release_pages): Use free if using valloc.\n+\t(ggc_alloc_obj): Renamed from alloc_obj.\n+\t(ggc_set_mark): Renamed from mark_obj.\n+\t(ggc_mark_if_gcable): Renamed from ggc_mark_string_if_gcable.\n+\t(ggc_alloc_rtx, ggc_alloc_rtvec): Delete.\n+\t(ggc_alloc_tree, ggc_alloc_string, ggc_alloc): Delete.\n+\t(ggc_set_mark_rtx, ggc_set_mark_rtvec): Delete.\t\n+\t(ggc_set_mark_tree, ggc_mark_string, ggc_mark): Delete.\n+\t(ggc_collect): Use fp printing instead of our own rounding.\n+\t* ggc-simple.c (IS_MARKED, IGNORE_MARK): Delete.\n+\t(GGC_STRING_MAGIC, GGC_STRING_MAGIC_MARK): Delete.\n+\t(GGC_ANY_MAGIC, GGC_ANY_MAGIC_MARK): Delete.\n+\t(struct ggc_rtx, struct ggc_rtvec, struct ggc_tree): Delete.\n+\t(struct ggc_string, struct ggc_any): Delete.\n+\t(offsetof): Provide default definition.\n+\t(GGC_BALANCE, GGC_ALWAYS_COLLECT, GGC_ALWAYS_VERIFY): New.\n+\t(PTR_KEY): New.\n+\t(struct ggc_mem): New, from corpse of ggc_any.\n+\t(struct ggc_status): Delete.\n+\t(ggc_chain, ggc_allocated_strings, ggc_strings_used): Delete.\n+\t(n_rtxs_collected, n_vecs_collected, n_trees_collected): Delete.\n+\t(n_strings_collected, n_anys_collected): Delete.\n+\t(ggc_alloc_rtx, ggc_alloc_rtvec, ggc_alloc_tree): Delete.\n+\t(ggc_alloc_string, ggc_alloc): Delete.\n+\t(ggc_free_rtx, ggc_free_rtvec, ggc_free_tree): Delete.\n+\t(ggc_free_string, ggc_free_any): Delete.\n+\t(ggc_set_mark_rtx, ggc_set_mark_rtvec, ggc_set_mark_tree): Delete.\n+\t(ggc_compare_addresses, ggc_mark_string): Delete.\n+\t(ggc_mark_string_if_gcable, ggc_mark): Delete.\n+\t(search_data): Delete.\n+\t(struct globals): New.\n+\t(GGC_MIN_EXPAND_FOR_GC, GGC_MIN_LAST_ALLOCATED): New.\t\n+\t(tree_insert, tree_lookup): New.\n+\t(ggc_alloc_obj, ggc_set_mark, ggc_mark_if_gcable): New.\n+\t(clear_marks, sweep_objs): New.\n+\t(ggc_collect): Gut.  Use clear_marks, sweep_objs.\n+\t(init_ggc): Set allocated_last_gc.\n+\t(ggc_push_context): Gut.  Use G.context.\n+\t(ggc_pop_context): Likewise.\n+\t(ggc_pop_context_1): New.\n+\t(debug_ggc_tree): New.\n+\t(debug_ggc_balance, tally_leaves): New.\n+\t* ggc.h (ggc_mark_rtvec, ggc_mark_string, ggc_mark): Remove decl.\n+\t(ggc_mark_string_if_gcable): Remove decl.\n+\t(ggc_mark_rtx, ggc_mark_tree): Use ggc_set_mark.\n+\t(ggc_mark_rtvec_children): New.\n+\t(ggc_mark_rtvec, ggc_mark_string, ggc_mark): New.\n+\t(ggc_mark_if_gcable): New decl.\n+\t(ggc_alloc_rtx, ggc_alloc_rtvec): Remove decl.\n+\t(ggc_alloc_tree, ggc_alloc): Likewise.\n+\t(ggc_set_mark_rtx, ggc_set_mark_rtvec, ggc_set_mark_tree): Likewise.\n+\t(ggc_alloc_obj): New decl.\n+\t(ggc_alloc_rtx, ggc_alloc_rtvec): New macros.\n+\t(ggc_alloc_tree, ggc_alloc): Likewise.\n+\t(ggc_set_mark): New decl.\n+\t* rtl.h (struct rtx_def): Remove gc_mark.\n+\t(struct rtvec_def): Likewise.\n+\t* tree.h (struct tree_common): Likewise.\n+\n Wed Oct 13 01:44:29 1999  Carol LePage  <carolo@hal.com>\n \n         * configure.in (sparc-hal-solaris2*): Fix xm_file, xm_defines,"}]}