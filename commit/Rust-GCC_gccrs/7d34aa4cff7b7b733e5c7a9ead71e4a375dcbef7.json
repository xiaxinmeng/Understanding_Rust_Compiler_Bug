{"sha": "7d34aa4cff7b7b733e5c7a9ead71e4a375dcbef7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QzNGFhNGNmZjdiN2I3MzNlNWM3YTllYWQ3MWU0YTM3NWRjYmVmNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-02-01T21:04:44Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-02-01T21:04:44Z"}, "message": "* include/jni.h (class _Jv_JNIEnv): Added all C++ inline methods.\n\nFrom-SVN: r31739", "tree": {"sha": "379d09e44d8063dc224e02cfe2bc60a31891131d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/379d09e44d8063dc224e02cfe2bc60a31891131d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d34aa4cff7b7b733e5c7a9ead71e4a375dcbef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d34aa4cff7b7b733e5c7a9ead71e4a375dcbef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d34aa4cff7b7b733e5c7a9ead71e4a375dcbef7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d34aa4cff7b7b733e5c7a9ead71e4a375dcbef7/comments", "author": null, "committer": null, "parents": [{"sha": "d33ebef630f22643379d875b4e4bb62c1d21d024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33ebef630f22643379d875b4e4bb62c1d21d024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33ebef630f22643379d875b4e4bb62c1d21d024"}], "stats": {"total": 863, "additions": 858, "deletions": 5}, "files": [{"sha": "c80e84ed7f2e52b2fc364635e2d5be69ea2dc7e6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d34aa4cff7b7b733e5c7a9ead71e4a375dcbef7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d34aa4cff7b7b733e5c7a9ead71e4a375dcbef7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7d34aa4cff7b7b733e5c7a9ead71e4a375dcbef7", "patch": "@@ -1,5 +1,7 @@\n 2000-02-01  Tom Tromey  <tromey@cygnus.com>\n \n+\t* include/jni.h (class _Jv_JNIEnv): Added all C++ inline methods.\n+\n \t* jni.cc (_Jv_JNI_PopLocalFrame): Leave loop when `n == NULL'.\n \t(_Jv_JNI_conversion_call): _Jv_JNI_PopLocalFrame will never leave\n \t`locals == NULL'."}, {"sha": "235a3799917373562384d31ca432b9789bea8ddb", "filename": "libjava/include/jni.h", "status": "modified", "additions": 856, "deletions": 5, "changes": 861, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d34aa4cff7b7b733e5c7a9ead71e4a375dcbef7/libjava%2Finclude%2Fjni.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d34aa4cff7b7b733e5c7a9ead71e4a375dcbef7/libjava%2Finclude%2Fjni.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjni.h?ref=7d34aa4cff7b7b733e5c7a9ead71e4a375dcbef7", "patch": "@@ -542,13 +542,864 @@ class _Jv_JNIEnv\n   struct _Jv_JNI_LocalFrame *locals;\n \n public:\n-  jclass GetSuperclass (jclass cl)\n-  { return p->GetSuperclass (this, cl); }\n+  jint GetVersion ()\n+  { return p->GetVersion (this); }\n \n-  jsize GetStringLength (jstring str)\n-  { return p->GetStringLength (this, str); }\n-};\n+  jclass DefineClass (jobject obj0, const jbyte * val1, jsize val2)\n+  { return p->DefineClass (this, obj0, val1, val2); }\n+\n+  jclass FindClass (const char * val0)\n+  { return p->FindClass (this, val0); }\n+\n+  jmethodID FromReflectedMethod (jobject obj0)\n+  { return p->FromReflectedMethod (this, obj0); }\n+\n+  jfieldID FromReflectedField (jobject obj0)\n+  { return p->FromReflectedField (this, obj0); }\n+\n+  jobject ToReflectedMethod (jclass cl0, jmethodID meth1, jboolean val2)\n+  { return p->ToReflectedMethod (this, cl0, meth1, val2); }\n+\n+  jclass GetSuperclass (jclass cl0)\n+  { return p->GetSuperclass (this, cl0); }\n+\n+  jboolean IsAssignableFrom (jclass cl0, jclass cl1)\n+  { return p->IsAssignableFrom (this, cl0, cl1); }\n+\n+  jobject ToReflectedField (jclass cl0, jfieldID fld1, jboolean val2)\n+  { return p->ToReflectedField (this, cl0, fld1, val2); }\n+\n+  jint Throw (jthrowable val0)\n+  { return p->Throw (this, val0); }\n+\n+  jint ThrowNew (jclass cl0, const char * val1)\n+  { return p->ThrowNew (this, cl0, val1); }\n+\n+  jthrowable ExceptionOccurred ()\n+  { return p->ExceptionOccurred (this); }\n+\n+  void ExceptionDescribe ()\n+  { p->ExceptionDescribe (this); }\n+\n+  void ExceptionClear ()\n+  { p->ExceptionClear (this); }\n+\n+  void FatalError (const char * val0)\n+  { p->FatalError (this, val0); }\n+\n+  jint PushLocalFrame (jint val0)\n+  { return p->PushLocalFrame (this, val0); }\n+\n+  jobject PopLocalFrame (jobject obj0)\n+  { return p->PopLocalFrame (this, obj0); }\n+\n+  jobject NewGlobalRef (jobject obj0)\n+  { return p->NewGlobalRef (this, obj0); }\n+\n+  void DeleteGlobalRef (jobject obj0)\n+  { p->DeleteGlobalRef (this, obj0); }\n+\n+  void DeleteLocalRef (jobject obj0)\n+  { p->DeleteLocalRef (this, obj0); }\n+\n+  jboolean IsSameObject (jobject obj0, jobject obj1)\n+  { return p->IsSameObject (this, obj0, obj1); }\n+\n+  jobject NewLocalRef (jobject obj0)\n+  { return p->NewLocalRef (this, obj0); }\n+\n+  jint EnsureLocalCapacity (jint val0)\n+  { return p->EnsureLocalCapacity (this, val0); }\n+\n+  jobject AllocObject (jclass cl0)\n+  { return p->AllocObject (this, cl0); }\n+\n+  jobject NewObject (jclass cl0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jobject result = p->NewObjectV (this, cl0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jobject NewObjectV (jclass cl0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->NewObjectV (this, cl0, meth1, val2); }\n+\n+  jobject NewObjectA (jclass cl0, jmethodID meth1, jvalue * val2)\n+  { return p->NewObjectA (this, cl0, meth1, val2); }\n+\n+  jclass GetObjectClass (jobject obj0)\n+  { return p->GetObjectClass (this, obj0); }\n+\n+  jboolean IsInstanceOf (jobject obj0, jclass cl1)\n+  { return p->IsInstanceOf (this, obj0, cl1); }\n+\n+  jmethodID GetMethodID (jclass cl0, const char * val1, const char * val2)\n+  { return p->GetMethodID (this, cl0, val1, val2); }\n+\n+  jobject CallObjectMethod (jobject obj0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jobject result = p->CallObjectMethodV (this, obj0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jobject CallObjectMethodV (jobject obj0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallObjectMethodV (this, obj0, meth1, val2); }\n+\n+  jobject CallObjectMethodA (jobject obj0, jmethodID meth1, jvalue * val2)\n+  { return p->CallObjectMethodA (this, obj0, meth1, val2); }\n+\n+  jboolean CallBooleanMethod (jobject obj0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jboolean result = p->CallBooleanMethodV (this, obj0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jboolean CallBooleanMethodV (jobject obj0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallBooleanMethodV (this, obj0, meth1, val2); }\n+\n+  jboolean CallBooleanMethodA (jobject obj0, jmethodID meth1, jvalue * val2)\n+  { return p->CallBooleanMethodA (this, obj0, meth1, val2); }\n+\n+  jbyte CallByteMethod (jobject obj0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jbyte result = p->CallByteMethodV (this, obj0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jbyte CallByteMethodV (jobject obj0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallByteMethodV (this, obj0, meth1, val2); }\n+\n+  jbyte CallByteMethodA (jobject obj0, jmethodID meth1, jvalue * val2)\n+  { return p->CallByteMethodA (this, obj0, meth1, val2); }\n+\n+  jchar CallCharMethod (jobject obj0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jchar result = p->CallCharMethodV (this, obj0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jchar CallCharMethodV (jobject obj0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallCharMethodV (this, obj0, meth1, val2); }\n+\n+  jchar CallCharMethodA (jobject obj0, jmethodID meth1, jvalue * val2)\n+  { return p->CallCharMethodA (this, obj0, meth1, val2); }\n+\n+  jshort CallShortMethod (jobject obj0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jshort result = p->CallShortMethodV (this, obj0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jshort CallShortMethodV (jobject obj0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallShortMethodV (this, obj0, meth1, val2); }\n+\n+  jshort CallShortMethodA (jobject obj0, jmethodID meth1, jvalue * val2)\n+  { return p->CallShortMethodA (this, obj0, meth1, val2); }\n+\n+  jint CallIntMethod (jobject obj0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jint result = p->CallIntMethodV (this, obj0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jint CallIntMethodV (jobject obj0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallIntMethodV (this, obj0, meth1, val2); }\n+\n+  jint CallIntMethodA (jobject obj0, jmethodID meth1, jvalue * val2)\n+  { return p->CallIntMethodA (this, obj0, meth1, val2); }\n+\n+  jlong CallLongMethod (jobject obj0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jlong result = p->CallLongMethodV (this, obj0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jlong CallLongMethodV (jobject obj0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallLongMethodV (this, obj0, meth1, val2); }\n+\n+  jlong CallLongMethodA (jobject obj0, jmethodID meth1, jvalue * val2)\n+  { return p->CallLongMethodA (this, obj0, meth1, val2); }\n+\n+  jfloat CallFloatMethod (jobject obj0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jfloat result = p->CallFloatMethodV (this, obj0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jfloat CallFloatMethodV (jobject obj0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallFloatMethodV (this, obj0, meth1, val2); }\n+\n+  jfloat CallFloatMethodA (jobject obj0, jmethodID meth1, jvalue * val2)\n+  { return p->CallFloatMethodA (this, obj0, meth1, val2); }\n+\n+  jdouble CallDoubleMethod (jobject obj0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jdouble result = p->CallDoubleMethodV (this, obj0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jdouble CallDoubleMethodV (jobject obj0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallDoubleMethodV (this, obj0, meth1, val2); }\n+\n+  jdouble CallDoubleMethodA (jobject obj0, jmethodID meth1, jvalue * val2)\n+  { return p->CallDoubleMethodA (this, obj0, meth1, val2); }\n+\n+  void CallVoidMethod (jobject obj0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    p->CallVoidMethodV (this, obj0, meth1, args);\n+    va_end (args);\n+  }\n+\n+  void CallVoidMethodV (jobject obj0, jmethodID meth1, _Jv_va_list val2)\n+  { p->CallVoidMethodV (this, obj0, meth1, val2); }\n+\n+  void CallVoidMethodA (jobject obj0, jmethodID meth1, jvalue * val2)\n+  { p->CallVoidMethodA (this, obj0, meth1, val2); }\n+\n+  jobject CallNonvirtualObjectMethod (jobject obj0, jclass cl1, jmethodID meth2, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, cl1);\n+    jobject result = p->CallNonvirtualObjectMethodV (this, obj0, cl1, meth2, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jobject CallNonvirtualObjectMethodV (jobject obj0, jclass cl1, jmethodID meth2, _Jv_va_list val3)\n+  { return p->CallNonvirtualObjectMethodV (this, obj0, cl1, meth2, val3); }\n+\n+  jobject CallNonvirtualObjectMethodA (jobject obj0, jclass cl1, jmethodID meth2, jvalue * val3)\n+  { return p->CallNonvirtualObjectMethodA (this, obj0, cl1, meth2, val3); }\n+\n+  jboolean CallNonvirtualBooleanMethod (jobject obj0, jclass cl1, jmethodID meth2, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, cl1);\n+    jboolean result = p->CallNonvirtualBooleanMethodV (this, obj0, cl1, meth2, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jboolean CallNonvirtualBooleanMethodV (jobject obj0, jclass cl1, jmethodID meth2, _Jv_va_list val3)\n+  { return p->CallNonvirtualBooleanMethodV (this, obj0, cl1, meth2, val3); }\n+\n+  jboolean CallNonvirtualBooleanMethodA (jobject obj0, jclass cl1, jmethodID meth2, jvalue * val3)\n+  { return p->CallNonvirtualBooleanMethodA (this, obj0, cl1, meth2, val3); }\n+\n+  jbyte CallNonvirtualByteMethod (jobject obj0, jclass cl1, jmethodID meth2, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, cl1);\n+    jbyte result = p->CallNonvirtualByteMethodV (this, obj0, cl1, meth2, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jbyte CallNonvirtualByteMethodV (jobject obj0, jclass cl1, jmethodID meth2, _Jv_va_list val3)\n+  { return p->CallNonvirtualByteMethodV (this, obj0, cl1, meth2, val3); }\n+\n+  jbyte CallNonvirtualByteMethodA (jobject obj0, jclass cl1, jmethodID meth2, jvalue * val3)\n+  { return p->CallNonvirtualByteMethodA (this, obj0, cl1, meth2, val3); }\n+\n+  jchar CallNonvirtualCharMethod (jobject obj0, jclass cl1, jmethodID meth2, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, cl1);\n+    jchar result = p->CallNonvirtualCharMethodV (this, obj0, cl1, meth2, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jchar CallNonvirtualCharMethodV (jobject obj0, jclass cl1, jmethodID meth2, _Jv_va_list val3)\n+  { return p->CallNonvirtualCharMethodV (this, obj0, cl1, meth2, val3); }\n+\n+  jchar CallNonvirtualCharMethodA (jobject obj0, jclass cl1, jmethodID meth2, jvalue * val3)\n+  { return p->CallNonvirtualCharMethodA (this, obj0, cl1, meth2, val3); }\n+\n+  jshort CallNonvirtualShortMethod (jobject obj0, jclass cl1, jmethodID meth2, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, cl1);\n+    jshort result = p->CallNonvirtualShortMethodV (this, obj0, cl1, meth2, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jshort CallNonvirtualShortMethodV (jobject obj0, jclass cl1, jmethodID meth2, _Jv_va_list val3)\n+  { return p->CallNonvirtualShortMethodV (this, obj0, cl1, meth2, val3); }\n+\n+  jshort CallNonvirtualShortMethodA (jobject obj0, jclass cl1, jmethodID meth2, jvalue * val3)\n+  { return p->CallNonvirtualShortMethodA (this, obj0, cl1, meth2, val3); }\n+\n+  jint CallNonvirtualIntMethod (jobject obj0, jclass cl1, jmethodID meth2, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, cl1);\n+    jint result = p->CallNonvirtualIntMethodV (this, obj0, cl1, meth2, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jint CallNonvirtualIntMethodV (jobject obj0, jclass cl1, jmethodID meth2, _Jv_va_list val3)\n+  { return p->CallNonvirtualIntMethodV (this, obj0, cl1, meth2, val3); }\n+\n+  jint CallNonvirtualIntMethodA (jobject obj0, jclass cl1, jmethodID meth2, jvalue * val3)\n+  { return p->CallNonvirtualIntMethodA (this, obj0, cl1, meth2, val3); }\n+\n+  jlong CallNonvirtualLongMethod (jobject obj0, jclass cl1, jmethodID meth2, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, cl1);\n+    jlong result = p->CallNonvirtualLongMethodV (this, obj0, cl1, meth2, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jlong CallNonvirtualLongMethodV (jobject obj0, jclass cl1, jmethodID meth2, _Jv_va_list val3)\n+  { return p->CallNonvirtualLongMethodV (this, obj0, cl1, meth2, val3); }\n+\n+  jlong CallNonvirtualLongMethodA (jobject obj0, jclass cl1, jmethodID meth2, jvalue * val3)\n+  { return p->CallNonvirtualLongMethodA (this, obj0, cl1, meth2, val3); }\n+\n+  jfloat CallNonvirtualFloatMethod (jobject obj0, jclass cl1, jmethodID meth2, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, cl1);\n+    jfloat result = p->CallNonvirtualFloatMethodV (this, obj0, cl1, meth2, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jfloat CallNonvirtualFloatMethodV (jobject obj0, jclass cl1, jmethodID meth2, _Jv_va_list val3)\n+  { return p->CallNonvirtualFloatMethodV (this, obj0, cl1, meth2, val3); }\n+\n+  jfloat CallNonvirtualFloatMethodA (jobject obj0, jclass cl1, jmethodID meth2, jvalue * val3)\n+  { return p->CallNonvirtualFloatMethodA (this, obj0, cl1, meth2, val3); }\n+\n+  jdouble CallNonvirtualDoubleMethod (jobject obj0, jclass cl1, jmethodID meth2, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, cl1);\n+    jdouble result = p->CallNonvirtualDoubleMethodV (this, obj0, cl1, meth2, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jdouble CallNonvirtualDoubleMethodV (jobject obj0, jclass cl1, jmethodID meth2, _Jv_va_list val3)\n+  { return p->CallNonvirtualDoubleMethodV (this, obj0, cl1, meth2, val3); }\n+\n+  jdouble CallNonvirtualDoubleMethodA (jobject obj0, jclass cl1, jmethodID meth2, jvalue * val3)\n+  { return p->CallNonvirtualDoubleMethodA (this, obj0, cl1, meth2, val3); }\n+\n+  void CallNonvirtualVoidMethod (jobject obj0, jclass cl1, jmethodID meth2, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, cl1);\n+    p->CallNonvirtualVoidMethodV (this, obj0, cl1, meth2, args);\n+    va_end (args);\n+  }\n+\n+  void CallNonvirtualVoidMethodV (jobject obj0, jclass cl1, jmethodID meth2, _Jv_va_list val3)\n+  { p->CallNonvirtualVoidMethodV (this, obj0, cl1, meth2, val3); }\n+\n+  void CallNonvirtualVoidMethodA (jobject obj0, jclass cl1, jmethodID meth2, jvalue * val3)\n+  { p->CallNonvirtualVoidMethodA (this, obj0, cl1, meth2, val3); }\n+\n+  jfieldID GetFieldID (jclass cl0, const char * val1, const char * val2)\n+  { return p->GetFieldID (this, cl0, val1, val2); }\n+\n+  jobject GetObjectField (jobject obj0, jfieldID fld1)\n+  { return p->GetObjectField (this, obj0, fld1); }\n+\n+  jboolean GetBooleanField (jobject obj0, jfieldID fld1)\n+  { return p->GetBooleanField (this, obj0, fld1); }\n+\n+  jbyte GetByteField (jobject obj0, jfieldID fld1)\n+  { return p->GetByteField (this, obj0, fld1); }\n+\n+  jchar GetCharField (jobject obj0, jfieldID fld1)\n+  { return p->GetCharField (this, obj0, fld1); }\n+\n+  jshort GetShortField (jobject obj0, jfieldID fld1)\n+  { return p->GetShortField (this, obj0, fld1); }\n+\n+  jint GetIntField (jobject obj0, jfieldID fld1)\n+  { return p->GetIntField (this, obj0, fld1); }\n+\n+  jlong GetLongField (jobject obj0, jfieldID fld1)\n+  { return p->GetLongField (this, obj0, fld1); }\n+\n+  jfloat GetFloatField (jobject obj0, jfieldID fld1)\n+  { return p->GetFloatField (this, obj0, fld1); }\n+\n+  jdouble GetDoubleField (jobject obj0, jfieldID fld1)\n+  { return p->GetDoubleField (this, obj0, fld1); }\n+\n+  void SetObjectField (jobject obj0, jfieldID fld1, jobject obj2)\n+  { p->SetObjectField (this, obj0, fld1, obj2); }\n+\n+  void SetBooleanField (jobject obj0, jfieldID fld1, jboolean val2)\n+  { p->SetBooleanField (this, obj0, fld1, val2); }\n+\n+  void SetByteField (jobject obj0, jfieldID fld1, jbyte val2)\n+  { p->SetByteField (this, obj0, fld1, val2); }\n+\n+  void SetCharField (jobject obj0, jfieldID fld1, jchar val2)\n+  { p->SetCharField (this, obj0, fld1, val2); }\n+\n+  void SetShortField (jobject obj0, jfieldID fld1, jshort val2)\n+  { p->SetShortField (this, obj0, fld1, val2); }\n+\n+  void SetIntField (jobject obj0, jfieldID fld1, jint val2)\n+  { p->SetIntField (this, obj0, fld1, val2); }\n+\n+  void SetLongField (jobject obj0, jfieldID fld1, jlong val2)\n+  { p->SetLongField (this, obj0, fld1, val2); }\n+\n+  void SetFloatField (jobject obj0, jfieldID fld1, jfloat val2)\n+  { p->SetFloatField (this, obj0, fld1, val2); }\n+\n+  void SetDoubleField (jobject obj0, jfieldID fld1, jdouble val2)\n+  { p->SetDoubleField (this, obj0, fld1, val2); }\n+\n+  jmethodID GetStaticMethodID (jclass cl0, const char * val1, const char * val2)\n+  { return p->GetStaticMethodID (this, cl0, val1, val2); }\n+\n+  jobject CallStaticObjectMethod (jclass cl0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jobject result = p->CallStaticObjectMethodV (this, cl0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jobject CallStaticObjectMethodV (jclass cl0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallStaticObjectMethodV (this, cl0, meth1, val2); }\n+\n+  jobject CallStaticObjectMethodA (jclass cl0, jmethodID meth1, jvalue * val2)\n+  { return p->CallStaticObjectMethodA (this, cl0, meth1, val2); }\n+\n+  jboolean CallStaticBooleanMethod (jclass cl0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jboolean result = p->CallStaticBooleanMethodV (this, cl0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jboolean CallStaticBooleanMethodV (jclass cl0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallStaticBooleanMethodV (this, cl0, meth1, val2); }\n+\n+  jboolean CallStaticBooleanMethodA (jclass cl0, jmethodID meth1, jvalue * val2)\n+  { return p->CallStaticBooleanMethodA (this, cl0, meth1, val2); }\n+\n+  jbyte CallStaticByteMethod (jclass cl0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jbyte result = p->CallStaticByteMethodV (this, cl0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jbyte CallStaticByteMethodV (jclass cl0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallStaticByteMethodV (this, cl0, meth1, val2); }\n+\n+  jbyte CallStaticByteMethodA (jclass cl0, jmethodID meth1, jvalue * val2)\n+  { return p->CallStaticByteMethodA (this, cl0, meth1, val2); }\n+\n+  jchar CallStaticCharMethod (jclass cl0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jchar result = p->CallStaticCharMethodV (this, cl0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jchar CallStaticCharMethodV (jclass cl0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallStaticCharMethodV (this, cl0, meth1, val2); }\n+\n+  jchar CallStaticCharMethodA (jclass cl0, jmethodID meth1, jvalue * val2)\n+  { return p->CallStaticCharMethodA (this, cl0, meth1, val2); }\n+\n+  jshort CallStaticShortMethod (jclass cl0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jshort result = p->CallStaticShortMethodV (this, cl0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jshort CallStaticShortMethodV (jclass cl0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallStaticShortMethodV (this, cl0, meth1, val2); }\n+\n+  jshort CallStaticShortMethodA (jclass cl0, jmethodID meth1, jvalue * val2)\n+  { return p->CallStaticShortMethodA (this, cl0, meth1, val2); }\n+\n+  jint CallStaticIntMethod (jclass cl0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jint result = p->CallStaticIntMethodV (this, cl0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jint CallStaticIntMethodV (jclass cl0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallStaticIntMethodV (this, cl0, meth1, val2); }\n+\n+  jint CallStaticIntMethodA (jclass cl0, jmethodID meth1, jvalue * val2)\n+  { return p->CallStaticIntMethodA (this, cl0, meth1, val2); }\n+\n+  jlong CallStaticLongMethod (jclass cl0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jlong result = p->CallStaticLongMethodV (this, cl0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jlong CallStaticLongMethodV (jclass cl0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallStaticLongMethodV (this, cl0, meth1, val2); }\n+\n+  jlong CallStaticLongMethodA (jclass cl0, jmethodID meth1, jvalue * val2)\n+  { return p->CallStaticLongMethodA (this, cl0, meth1, val2); }\n+\n+  jfloat CallStaticFloatMethod (jclass cl0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jfloat result = p->CallStaticFloatMethodV (this, cl0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jfloat CallStaticFloatMethodV (jclass cl0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallStaticFloatMethodV (this, cl0, meth1, val2); }\n+\n+  jfloat CallStaticFloatMethodA (jclass cl0, jmethodID meth1, jvalue * val2)\n+  { return p->CallStaticFloatMethodA (this, cl0, meth1, val2); }\n+\n+  jdouble CallStaticDoubleMethod (jclass cl0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    jdouble result = p->CallStaticDoubleMethodV (this, cl0, meth1, args);\n+    va_end (args);\n+    return result;\n+  }\n+\n+  jdouble CallStaticDoubleMethodV (jclass cl0, jmethodID meth1, _Jv_va_list val2)\n+  { return p->CallStaticDoubleMethodV (this, cl0, meth1, val2); }\n+\n+  jdouble CallStaticDoubleMethodA (jclass cl0, jmethodID meth1, jvalue * val2)\n+  { return p->CallStaticDoubleMethodA (this, cl0, meth1, val2); }\n+\n+  void CallStaticVoidMethod (jclass cl0, jmethodID meth1, ...)\n+  {\n+    _Jv_va_list args;\n+    va_start (args, meth1);\n+    p->CallStaticVoidMethodV (this, cl0, meth1, args);\n+    va_end (args);\n+  }\n+\n+  void CallStaticVoidMethodV (jclass cl0, jmethodID meth1, _Jv_va_list val2)\n+  { p->CallStaticVoidMethodV (this, cl0, meth1, val2); }\n+\n+  void CallStaticVoidMethodA (jclass cl0, jmethodID meth1, jvalue * val2)\n+  { p->CallStaticVoidMethodA (this, cl0, meth1, val2); }\n+\n+  jfieldID GetStaticFieldID (jclass cl0, const char * val1, const char * val2)\n+  { return p->GetStaticFieldID (this, cl0, val1, val2); }\n+\n+  jobject GetStaticObjectField (jclass cl0, jfieldID fld1)\n+  { return p->GetStaticObjectField (this, cl0, fld1); }\n+\n+  jboolean GetStaticBooleanField (jclass cl0, jfieldID fld1)\n+  { return p->GetStaticBooleanField (this, cl0, fld1); }\n+\n+  jbyte GetStaticByteField (jclass cl0, jfieldID fld1)\n+  { return p->GetStaticByteField (this, cl0, fld1); }\n+\n+  jchar GetStaticCharField (jclass cl0, jfieldID fld1)\n+  { return p->GetStaticCharField (this, cl0, fld1); }\n+\n+  jshort GetStaticShortField (jclass cl0, jfieldID fld1)\n+  { return p->GetStaticShortField (this, cl0, fld1); }\n+\n+  jint GetStaticIntField (jclass cl0, jfieldID fld1)\n+  { return p->GetStaticIntField (this, cl0, fld1); }\n+\n+  jlong GetStaticLongField (jclass cl0, jfieldID fld1)\n+  { return p->GetStaticLongField (this, cl0, fld1); }\n+\n+  jfloat GetStaticFloatField (jclass cl0, jfieldID fld1)\n+  { return p->GetStaticFloatField (this, cl0, fld1); }\n+\n+  jdouble GetStaticDoubleField (jclass cl0, jfieldID fld1)\n+  { return p->GetStaticDoubleField (this, cl0, fld1); }\n+\n+  void SetStaticObjectField (jclass cl0, jfieldID fld1, jobject obj2)\n+  { p->SetStaticObjectField (this, cl0, fld1, obj2); }\n+\n+  void SetStaticBooleanField (jclass cl0, jfieldID fld1, jboolean val2)\n+  { p->SetStaticBooleanField (this, cl0, fld1, val2); }\n+\n+  void SetStaticByteField (jclass cl0, jfieldID fld1, jbyte val2)\n+  { p->SetStaticByteField (this, cl0, fld1, val2); }\n+\n+  void SetStaticCharField (jclass cl0, jfieldID fld1, jchar val2)\n+  { p->SetStaticCharField (this, cl0, fld1, val2); }\n+\n+  void SetStaticShortField (jclass cl0, jfieldID fld1, jshort val2)\n+  { p->SetStaticShortField (this, cl0, fld1, val2); }\n+\n+  void SetStaticIntField (jclass cl0, jfieldID fld1, jint val2)\n+  { p->SetStaticIntField (this, cl0, fld1, val2); }\n+\n+  void SetStaticLongField (jclass cl0, jfieldID fld1, jlong val2)\n+  { p->SetStaticLongField (this, cl0, fld1, val2); }\n+\n+  void SetStaticFloatField (jclass cl0, jfieldID fld1, jfloat val2)\n+  { p->SetStaticFloatField (this, cl0, fld1, val2); }\n+\n+  void SetStaticDoubleField (jclass cl0, jfieldID fld1, jdouble val2)\n+  { p->SetStaticDoubleField (this, cl0, fld1, val2); }\n+\n+  jstring NewString (const jchar * val0, jsize val1)\n+  { return p->NewString (this, val0, val1); }\n+\n+  jint GetStringLength (jstring val0)\n+  { return p->GetStringLength (this, val0); }\n+\n+  const jchar * GetStringChars (jstring val0, jboolean * val1)\n+  { return p->GetStringChars (this, val0, val1); }\n+\n+  void ReleaseStringChars (jstring val0, const jchar * val1)\n+  { p->ReleaseStringChars (this, val0, val1); }\n+\n+  jstring NewStringUTF (const char * val0)\n+  { return p->NewStringUTF (this, val0); }\n \n+  jsize GetStringUTFLength (jstring val0)\n+  { return p->GetStringUTFLength (this, val0); }\n+\n+  const char * GetStringUTFChars (jstring val0, jboolean * val1)\n+  { return p->GetStringUTFChars (this, val0, val1); }\n+\n+  void ReleaseStringUTFChars (jstring val0, const char * val1)\n+  { p->ReleaseStringUTFChars (this, val0, val1); }\n+\n+  jsize GetArrayLength (jarray val0)\n+  { return p->GetArrayLength (this, val0); }\n+\n+  jarray NewObjectArray (jsize val0, jclass cl1, jobject obj2)\n+  { return p->NewObjectArray (this, val0, cl1, obj2); }\n+\n+  jobject GetObjectArrayElement (jobjectArray val0, jsize val1)\n+  { return p->GetObjectArrayElement (this, val0, val1); }\n+\n+  void SetObjectArrayElement (jobjectArray val0, jsize val1, jobject obj2)\n+  { p->SetObjectArrayElement (this, val0, val1, obj2); }\n+\n+  jbooleanArray NewBooleanArray (jsize val0)\n+  { return p->NewBooleanArray (this, val0); }\n+\n+  jbyteArray NewByteArray (jsize val0)\n+  { return p->NewByteArray (this, val0); }\n+\n+  jcharArray NewCharArray (jsize val0)\n+  { return p->NewCharArray (this, val0); }\n+\n+  jshortArray NewShortArray (jsize val0)\n+  { return p->NewShortArray (this, val0); }\n+\n+  jintArray NewIntArray (jsize val0)\n+  { return p->NewIntArray (this, val0); }\n+\n+  jlongArray NewLongArray (jsize val0)\n+  { return p->NewLongArray (this, val0); }\n+\n+  jfloatArray NewFloatArray (jsize val0)\n+  { return p->NewFloatArray (this, val0); }\n+\n+  jdoubleArray NewDoubleArray (jsize val0)\n+  { return p->NewDoubleArray (this, val0); }\n+\n+  jboolean * GetBooleanArrayElements (jbooleanArray val0, jboolean * val1)\n+  { return p->GetBooleanArrayElements (this, val0, val1); }\n+\n+  jbyte * GetByteArrayElements (jbyteArray val0, jboolean * val1)\n+  { return p->GetByteArrayElements (this, val0, val1); }\n+\n+  jchar * GetCharArrayElements (jcharArray val0, jboolean * val1)\n+  { return p->GetCharArrayElements (this, val0, val1); }\n+\n+  jshort * GetShortArrayElements (jshortArray val0, jboolean * val1)\n+  { return p->GetShortArrayElements (this, val0, val1); }\n+\n+  jint * GetIntArrayElements (jintArray val0, jboolean * val1)\n+  { return p->GetIntArrayElements (this, val0, val1); }\n+\n+  jlong * GetLongArrayElements (jlongArray val0, jboolean * val1)\n+  { return p->GetLongArrayElements (this, val0, val1); }\n+\n+  jfloat * GetFloatArrayElements (jfloatArray val0, jboolean * val1)\n+  { return p->GetFloatArrayElements (this, val0, val1); }\n+\n+  jdouble * GetDoubleArrayElements (jdoubleArray val0, jboolean * val1)\n+  { return p->GetDoubleArrayElements (this, val0, val1); }\n+\n+  void ReleaseBooleanArrayElements (jbooleanArray val0, jboolean * val1, jint val2)\n+  { p->ReleaseBooleanArrayElements (this, val0, val1, val2); }\n+\n+  void ReleaseByteArrayElements (jbyteArray val0, jbyte * val1, jint val2)\n+  { p->ReleaseByteArrayElements (this, val0, val1, val2); }\n+\n+  void ReleaseCharArrayElements (jcharArray val0, jchar * val1, jint val2)\n+  { p->ReleaseCharArrayElements (this, val0, val1, val2); }\n+\n+  void ReleaseShortArrayElements (jshortArray val0, jshort * val1, jint val2)\n+  { p->ReleaseShortArrayElements (this, val0, val1, val2); }\n+\n+  void ReleaseIntArrayElements (jintArray val0, jint * val1, jint val2)\n+  { p->ReleaseIntArrayElements (this, val0, val1, val2); }\n+\n+  void ReleaseLongArrayElements (jlongArray val0, jlong * val1, jint val2)\n+  { p->ReleaseLongArrayElements (this, val0, val1, val2); }\n+\n+  void ReleaseFloatArrayElements (jfloatArray val0, jfloat * val1, jint val2)\n+  { p->ReleaseFloatArrayElements (this, val0, val1, val2); }\n+\n+  void ReleaseDoubleArrayElements (jdoubleArray val0, jdouble * val1, jint val2)\n+  { p->ReleaseDoubleArrayElements (this, val0, val1, val2); }\n+\n+  void GetBooleanArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->GetBooleanArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void GetByteArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->GetByteArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void GetCharArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->GetCharArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void GetShortArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->GetShortArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void GetIntArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->GetIntArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void GetLongArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->GetLongArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void GetFloatArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->GetFloatArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void GetDoubleArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->GetDoubleArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void SetBooleanArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->SetBooleanArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void SetByteArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->SetByteArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void SetCharArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->SetCharArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void SetShortArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->SetShortArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void SetIntArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->SetIntArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void SetLongArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->SetLongArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void SetFloatArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->SetFloatArrayRegion (this, val0, val1, val2, val3); }\n+\n+  void SetDoubleArrayRegion (jbooleanArray val0, jsize val1, jsize val2, jboolean * val3)\n+  { p->SetDoubleArrayRegion (this, val0, val1, val2, val3); }\n+\n+  jint RegisterNatives (jclass cl0, const JNINativeMethod * val1, jint val2)\n+  { return p->RegisterNatives (this, cl0, val1, val2); }\n+\n+  jint UnregisterNatives (jclass cl0)\n+  { return p->UnregisterNatives (this, cl0); }\n+\n+  jint MonitorEnter (jobject obj0)\n+  { return p->MonitorEnter (this, obj0); }\n+\n+  jint MonitorExit (jobject obj0)\n+  { return p->MonitorExit (this, obj0); }\n+\n+  jint GetJavaVM (JavaVM ** val0)\n+  { return p->GetJavaVM (this, val0); }\n+\n+  void GetStringRegion (jstring val0, jsize val1, jsize val2, jchar * val3)\n+  { p->GetStringRegion (this, val0, val1, val2, val3); }\n+\n+  void GetStringUTFRegion (jstring val0, jsize val1, jsize val2, char * val3)\n+  { p->GetStringUTFRegion (this, val0, val1, val2, val3); }\n+\n+  void * GetPrimitiveArrayCritical (jarray val0, jboolean * val1)\n+  { return p->GetPrimitiveArrayCritical (this, val0, val1); }\n+\n+  void ReleasePrimitiveArrayCritical (jarray val0, void * val1, jint val2)\n+  { p->ReleasePrimitiveArrayCritical (this, val0, val1, val2); }\n+\n+  const jchar * GetStringCritical (jstring val0, jboolean * val1)\n+  { return p->GetStringCritical (this, val0, val1); }\n+\n+  void ReleaseStringCritical (jstring val0, const jchar * val1)\n+  { p->ReleaseStringCritical (this, val0, val1); }\n+\n+  jweak NewWeakGlobalRef (jobject obj0)\n+  { return p->NewWeakGlobalRef (this, obj0); }\n+\n+  void DeleteWeakGlobalRef (jweak val0)\n+  { p->DeleteWeakGlobalRef (this, val0); }\n+\n+  jboolean ExceptionCheck ()\n+  { return p->ExceptionCheck (this); }\n+};\n #endif /* __cplusplus */\n \n #endif /* __GCJ_JNI_H__ */"}]}