{"sha": "53096259e6fb2000ca4bfd279e3f6b190d531090", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMwOTYyNTllNmZiMjAwMGNhNGJmZDI3OWUzZjZiMTkwZDUzMTA5MA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-11-01T05:53:29Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-11-01T05:53:29Z"}, "message": "re PR fortran/21565 (namelist in block data is illegal)\n\n2005-11-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/21565\n\t* symbol.c (check_conflict): An object cannot be in a namelist and in\n\tblock data.\n\n\tPR fortran/18737\n\t* resolve.c (resolve_symbol): Set the error flag to\n\tgfc_set_default_type, in the case of an external symbol, so that\n\tan error message is emitted if IMPLICIT NONE is set.\n\n\tPR fortran/14994\n\t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_SECNDS to enum.\n\t* check.c (gfc_check_secnds): New function.\n\t* intrinsic.c (add_functions): Add call to secnds.\n\t* iresolve.c (gfc_resolve_secnds): New function.\n\t* trans-intrinsic (gfc_conv_intrinsic_function): Add call to\n\tsecnds via case GFC_ISYM_SECNDS.\n\t* intrinsic.texi: Add documentation for secnds.\n\n2005-11-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/14994\n\t* libgfortran/intrinsics/date_and_time.c: Add interface to\n\tthe functions date_and_time for the intrinsic function secnds.\n\n2005-11-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/21565\n\tgfortran.dg/namelist_blockdata.f90: New test.\n\n\tPR fortran/18737\n\tgfortran.dg/external_implicit_none.f90: New test.\n\n\tPR fortran/14994\n\t* gfortran.dg/secnds.f: New test.\n\nFrom-SVN: r106317", "tree": {"sha": "f43ca2a90a1161ac81c75432afec4935809322c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f43ca2a90a1161ac81c75432afec4935809322c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53096259e6fb2000ca4bfd279e3f6b190d531090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53096259e6fb2000ca4bfd279e3f6b190d531090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53096259e6fb2000ca4bfd279e3f6b190d531090", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53096259e6fb2000ca4bfd279e3f6b190d531090/comments", "author": null, "committer": null, "parents": [{"sha": "4b2a5715eed5ff35731dc7eef78818fcd9aa4aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b2a5715eed5ff35731dc7eef78818fcd9aa4aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b2a5715eed5ff35731dc7eef78818fcd9aa4aa8"}], "stats": {"total": 230, "additions": 229, "deletions": 1}, "files": [{"sha": "e28464b4d0b3468ebec6324d9631214fc26ab760", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -1,3 +1,23 @@\n+2005-11-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/21565\n+\t* symbol.c (check_conflict): An object cannot be in a namelist and in\n+\tblock data.\n+\n+\tPR fortran/18737\n+\t* resolve.c (resolve_symbol): Set the error flag to\n+\tgfc_set_default_type, in the case of an external symbol, so that\n+\tan error message is emitted if IMPLICIT NONE is set.\n+\n+\tPR fortran/14994\n+\t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_SECNDS to enum.\n+\t* check.c (gfc_check_secnds): New function.\n+\t* intrinsic.c (add_functions): Add call to secnds.\n+\t* iresolve.c (gfc_resolve_secnds): New function.\n+\t* trans-intrinsic (gfc_conv_intrinsic_function): Add call to\n+\tsecnds via case GFC_ISYM_SECNDS.\n+\t* intrinsic.texi: Add documentation for secnds.\n+\n 2005-10-31  Andreas Schwab  <schwab@suse.de>\n \n \t* Make-lang.in (GFORTRAN_TARGET_INSTALL_NAME): Define."}, {"sha": "fe96ea4dc9171b9f9ad0ade607dec48c6af54e7b", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -1831,6 +1831,23 @@ gfc_check_scan (gfc_expr * x, gfc_expr * y, gfc_expr * z)\n }\n \n \n+try\n+gfc_check_secnds (gfc_expr * r)\n+{\n+\n+  if (type_check (r, 0, BT_REAL) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check (r, 0, 4) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (r, 0) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_selected_int_kind (gfc_expr * r)\n {"}, {"sha": "46c5bd2186fcbe6cc38a1229c4a3d3e9b9f90934", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -389,6 +389,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_SCALE,\n   GFC_ISYM_SCAN,\n   GFC_ISYM_SECOND,\n+  GFC_ISYM_SECNDS,\n   GFC_ISYM_SET_EXPONENT,\n   GFC_ISYM_SHAPE,\n   GFC_ISYM_SI_KIND,"}, {"sha": "a577ed9f9d79689827f8fe7f3241de27c3c62efd", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -1882,6 +1882,13 @@ add_functions (void)\n \n   make_generic (\"second\", GFC_ISYM_SECOND, GFC_STD_GNU);\n \n+  /* Added for G77 compatibility.  */\n+  add_sym_1 (\"secnds\", 0, 1, BT_REAL, dr, GFC_STD_GNU,\n+\t     gfc_check_secnds, NULL, gfc_resolve_secnds,\n+\t     x, BT_REAL, dr, REQUIRED);\n+\n+  make_generic (\"secnds\", GFC_ISYM_SECNDS, GFC_STD_GNU);\n+\n   add_sym_1 (\"selected_int_kind\", 0, 1, BT_INTEGER, di,  GFC_STD_F95,\n \t     gfc_check_selected_int_kind, gfc_simplify_selected_int_kind, NULL,\n \t     r, BT_INTEGER, di, REQUIRED);"}, {"sha": "51334b4336abcab8a5bef56d065420a87f675667", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -104,6 +104,7 @@ try gfc_check_reshape (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_scale (gfc_expr *, gfc_expr *);\n try gfc_check_scan (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_second_sub (gfc_expr *);\n+try gfc_check_secnds (gfc_expr *);\n try gfc_check_selected_int_kind (gfc_expr *);\n try gfc_check_selected_real_kind (gfc_expr *, gfc_expr *);\n try gfc_check_set_exponent (gfc_expr *, gfc_expr *);\n@@ -363,6 +364,7 @@ void gfc_resolve_rrspacing (gfc_expr *, gfc_expr *);\n void gfc_resolve_scale (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_scan (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_second_sub (gfc_code *);\n+void gfc_resolve_secnds (gfc_expr *, gfc_expr *);\n void gfc_resolve_set_exponent (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_shape (gfc_expr *, gfc_expr *);\n void gfc_resolve_sign (gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "dae94cc7ab85d379db508dd314f34bfced446ffd", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -94,6 +94,7 @@ and editing.  All contributions and corrections are strongly encouraged.\n * @code{LOG10}:         LOG10,     Base 10 logarithm function \n * @code{MALLOC}:        MALLOC,    Dynamic memory allocation function\n * @code{REAL}:          REAL,      Convert to real type \n+* @code{SECNDS}:        SECNDS,    Time function\n * @code{SIGNAL}:        SIGNAL,    Signal handling subroutine (or function)\n * @code{SIN}:           SIN,       Sine function\n * @code{SINH}:          SINH,      Hyperbolic sine function\n@@ -3135,6 +3136,54 @@ end program test_signal\n \n \n \n+\n+@node SECNDS\n+@section @code{SECNDS} --- Time subroutine\n+@findex @code{SECNDS} intrinsic\n+@cindex SECNDS\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{SECNDS(X)} gets the time in seconds from the real-time system clock.\n+@var{X} is a reference time, also in seconds. If this is zero, the time in\n+seconds from midnight is returned. This function is non-standard and its\n+use is discouraged.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+function\n+\n+@item @emph{Syntax}:\n+@code{T = SECNDS (X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item Name        @tab Type\n+@item @var{T}     @tab REAL(4)\n+@item @var{X}     @tab REAL(4)\n+@end multitable\n+\n+@item @emph{Return value}:\n+None\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_secnds\n+    real(4) :: t1, t2\n+    print *, secnds (0.0)   ! seconds since midnight\n+    t1 = secnds (0.0)       ! reference time\n+    do i = 1, 10000000      ! do something\n+    end do\n+    t2 = secnds (t1)        ! elapsed time\n+    print *, \"Something took \", t2, \" seconds.\"\n+end program test_secnds\n+@end smallexample\n+@end table\n+\n+\n+\n @node SIN\n @section @code{SIN} --- Sine function \n @findex @code{SIN} intrinsic"}, {"sha": "47a494dd0fb98d2f17605221efbeb4521e94962c", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -1366,6 +1366,15 @@ gfc_resolve_scan (gfc_expr * f, gfc_expr * string,\n }\n \n \n+void\n+gfc_resolve_secnds (gfc_expr * t1, gfc_expr * t0)\n+{\n+  t1->ts = t0->ts;\n+  t1->value.function.name =\n+    gfc_get_string (PREFIX(\"secnds\"));\n+}\n+\n+\n void\n gfc_resolve_set_exponent (gfc_expr * f, gfc_expr * x, gfc_expr * i)\n {"}, {"sha": "5d5ca780ba759e962247635227865a239ec6019f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -4238,8 +4238,10 @@ resolve_symbol (gfc_symbol * sym)\n \n       if (sym->attr.flavor == FL_PROCEDURE && sym->attr.function)\n \t{\n+\t  /* The specific case of an external procedure should emit an error\n+\t     in the case that there is no implicit type.  */\n \t  if (!mp_flag)\n-\t    gfc_set_default_type (sym, 0, NULL);\n+\t    gfc_set_default_type (sym, sym->attr.external, NULL);\n \t  else\n \t    {\n               /* Result may be in another namespace.  */"}, {"sha": "43209e4ccaea5eeb4358bc60600ed8804a5c6604", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -283,6 +283,8 @@ check_conflict (symbol_attribute * attr, const char * name, locus * where)\n     {\n       a1 = NULL;\n \n+      if (attr->in_namelist)\n+\ta1 = in_namelist;\n       if (attr->allocatable)\n \ta1 = allocatable;\n       if (attr->external)"}, {"sha": "b81b543a2710cc68581cb5e1569b4ac248157283", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -3101,6 +3101,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n     case GFC_ISYM_RAND:\n     case GFC_ISYM_RENAME:\n     case GFC_ISYM_SECOND:\n+    case GFC_ISYM_SECNDS:\n     case GFC_ISYM_SIGNAL:\n     case GFC_ISYM_STAT:\n     case GFC_ISYM_SYMLNK:"}, {"sha": "388c59f8173c4066cd44a06ed4bc10286e22ed04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -1,3 +1,14 @@\n+2005-11-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/21565\n+\tgfortran.dg/namelist_blockdata.f90: New test.\n+\n+\tPR fortran/18737\n+\tgfortran.dg/external_implicit_none.f90: New test.\n+\n+\tPR fortran/14994\n+\t* gfortran.dg/secnds.f: New test.\n+\n 2005-10-31  Jan Hubicka  <jh@suse.cz>\n \n \tPR target/20928"}, {"sha": "43cfb2848046e0eb4ecfae7138e323cce395d139", "filename": "gcc/testsuite/gfortran.dg/external_implicit_none.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_implicit_none.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_implicit_none.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_implicit_none.f90?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! Tests fix for PR18737 - ICE on external symbol of unknown type.\n+program test\n+  implicit none\n+  real(8) :: x\n+  external bug  ! { dg-error \"has no IMPLICIT type\" }\n+\n+  x = 2\n+  print *, bug(x)\n+  \n+end program test\n\\ No newline at end of file"}, {"sha": "c1a7a5b4e9bfc1c77d4913b72b78d0dbd6922ec5", "filename": "gcc/testsuite/gfortran.dg/namelist_blockdata.f", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_blockdata.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_blockdata.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_blockdata.f?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+! Tests fix for PR21565 - object cannot be in namelist and block data.\n+      block data\n+      common /foo/ a\n+      namelist /foo_n/ a ! { dg-error \"not allowed in BLOCK DATA\" }\n+      data a /1.0/\n+      end"}, {"sha": "d9a0f0dc35744c34bd159b5de9336c582fc5f25a", "filename": "gcc/testsuite/gfortran.dg/secnds.f", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsecnds.f?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -0,0 +1,29 @@\n+C { dg-do run }\n+C { dg-options \"-O0\" }\n+C Tests fix for PR14994 - SECNDS intrinsic not supported.\n+C Note1: The test uses +/-20ms accuracy in the check that\n+C date_and_time and secnds give the same values.\n+C\n+C Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+C\n+      character*20 dum1, dum2, dum3\n+      real*4 t1, t2\n+      real*4 dat1, dat2\n+      real*4 dt\n+      integer*4 i, j, values(8)\n+      dt = 40e-3\n+      t1 = secnds (0.0)\n+      call date_and_time (dum1, dum2, dum3, values)\n+      dat1 = 0.001*real (values(8)) + real (values(7)) +\n+     &        60.0*real (values(6)) + 3600.0* real (values(5))\n+      if (int ((dat1 - t1 + dt * 0.5) / dt) .ne. 0) call abort ()\n+      do j=1,10000\n+        do i=1,10000\n+        end do\n+      end do\n+      call date_and_time (dum1, dum2, dum3, values)\n+      dat2 = 0.001*real (values(8)) + real (values(7)) +\n+     &        60.0*real (values(6)) + 3600.0* real (values(5))\n+      t2 = secnds (t1)\n+      if (int ((dat1-dat2 + t2 + dt * 0.5) / dt) .ne. 0.0) call abort ()\n+      end"}, {"sha": "fe10fb9cb65e482249a09296e73302e29fa22d95", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -1,3 +1,9 @@\n+2005-11-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/14994\n+\t* libgfortran/intrinsics/date_and_time.c: Add interface to\n+\tthe functions date_and_time for the intrinsic function secnds.\n+\n 2005-10-31  Jerry DeLisle  <jvdelisle@verizon.net>\n \n         PR libgfortran/24584"}, {"sha": "c52ccfec4a65d8994c6c7c3a2d51f3ff9b45a9dc", "filename": "libgfortran/intrinsics/date_and_time.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53096259e6fb2000ca4bfd279e3f6b190d531090/libgfortran%2Fintrinsics%2Fdate_and_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53096259e6fb2000ca4bfd279e3f6b190d531090/libgfortran%2Fintrinsics%2Fdate_and_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fdate_and_time.c?ref=53096259e6fb2000ca4bfd279e3f6b190d531090", "patch": "@@ -305,3 +305,57 @@ date_and_time (char *__date, char *__time, char *__zone,\n       fstrcpy (__date, DATE_LEN, date, DATE_LEN);\n     }\n }\n+\n+\n+/* SECNDS (X) - Non-standard\n+\n+   Description: Returns the system time of day, or elapsed time, as a GFC_REAL_4\n+   in seconds.\n+\n+   Class: Non-elemental subroutine.\n+\n+   Arguments:\n+\n+   X must be REAL(4) and the result is of the same type.  The accuracy is system\n+   dependent.\n+\n+   Usage:\n+\n+\tT = SECNDS (X)\n+\n+   yields the time in elapsed seconds since X.  If X is 0.0, T is the time in\n+   seconds since midnight. Note that a time that spans midnight but is less than\n+   24hours will be calculated correctly.  */\n+\n+extern GFC_REAL_4 secnds (GFC_REAL_4 *);\n+export_proto(secnds);\n+\n+GFC_REAL_4\n+secnds (GFC_REAL_4 *x)\n+{\n+  GFC_INTEGER_4 values[VALUES_SIZE];\n+  GFC_REAL_4 temp1, temp2;\n+\n+  /* Make the INTEGER*4 array for passing to date_and_time.  */\n+  gfc_array_i4 *avalues = internal_malloc_size (sizeof (gfc_array_i4));\n+  avalues->data = &values[0];\n+  GFC_DESCRIPTOR_DTYPE (avalues) = ((GFC_DTYPE_REAL << GFC_DTYPE_TYPE_SHIFT)\n+\t\t\t\t        & GFC_DTYPE_TYPE_MASK) +\n+\t\t\t\t    (4 << GFC_DTYPE_SIZE_SHIFT);\n+\n+  avalues->dim[0].ubound = 7;\n+  avalues->dim[0].lbound = 0;\n+  avalues->dim[0].stride = 1;\n+\n+  date_and_time (NULL, NULL, NULL, avalues, 0, 0, 0);\n+\n+  free_mem (avalues);\n+\n+  temp1 = 3600.0 * (GFC_REAL_4)values[4] +\n+\t    60.0 * (GFC_REAL_4)values[5] +\n+\t\t   (GFC_REAL_4)values[6] +\n+\t   0.001 * (GFC_REAL_4)values[7];\n+  temp2 = fmod (*x, 86400.0);\n+  temp2 = (temp1 - temp2 > 0.0) ? temp2 : (temp2 - 86400.0);\n+  return temp1 - temp2;\n+}"}]}