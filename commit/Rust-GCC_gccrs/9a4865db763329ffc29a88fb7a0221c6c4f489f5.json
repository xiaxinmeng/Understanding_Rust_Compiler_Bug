{"sha": "9a4865db763329ffc29a88fb7a0221c6c4f489f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE0ODY1ZGI3NjMzMjlmZmMyOWE4OGZiN2EwMjIxYzZjNGY0ODlmNQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2015-09-20T16:46:12Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-09-20T16:46:12Z"}, "message": "[AArch64][5/5] Cleanup immediate generation code in aarch64_internal_mov_immediate\n\n2015-09-20  Wilco Dijkstra  <wdijkstr@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_internal_mov_immediate): Cleanup\n\timmediate generation code.\n\nFrom-SVN: r227950", "tree": {"sha": "033e73435ef505b3d4e61870128852b70f35f903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/033e73435ef505b3d4e61870128852b70f35f903"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a4865db763329ffc29a88fb7a0221c6c4f489f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4865db763329ffc29a88fb7a0221c6c4f489f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4865db763329ffc29a88fb7a0221c6c4f489f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4865db763329ffc29a88fb7a0221c6c4f489f5/comments", "author": null, "committer": null, "parents": [{"sha": "feca59ff1144d0657b03da31bfcc79948a9b3c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feca59ff1144d0657b03da31bfcc79948a9b3c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feca59ff1144d0657b03da31bfcc79948a9b3c2c"}], "stats": {"total": 142, "additions": 44, "deletions": 98}, "files": [{"sha": "9a76fc4e9ea2f403398f5357eb4f217356bbf2db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4865db763329ffc29a88fb7a0221c6c4f489f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4865db763329ffc29a88fb7a0221c6c4f489f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a4865db763329ffc29a88fb7a0221c6c4f489f5", "patch": "@@ -1,3 +1,8 @@\n+2015-09-20  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_internal_mov_immediate): Cleanup\n+\timmediate generation code.\n+\n 2015-09-20  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_internal_mov_immediate): Remove"}, {"sha": "39ed15e3b609406cf84270f6e7921f581b6cb623", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 39, "deletions": 98, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4865db763329ffc29a88fb7a0221c6c4f489f5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4865db763329ffc29a88fb7a0221c6c4f489f5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9a4865db763329ffc29a88fb7a0221c6c4f489f5", "patch": "@@ -1433,75 +1433,42 @@ static int\n aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t\t\t\tmachine_mode mode)\n {\n-  unsigned HOST_WIDE_INT mask;\n   int i;\n-  bool first;\n-  unsigned HOST_WIDE_INT val, val2;\n-  int one_match, zero_match, first_not_ffff_match;\n-  int num_insns = 0;\n+  unsigned HOST_WIDE_INT val, val2, mask;\n+  int one_match, zero_match;\n+  int num_insns;\n \n-  if (CONST_INT_P (imm) && aarch64_move_imm (INTVAL (imm), mode))\n+  val = INTVAL (imm);\n+\n+  if (aarch64_move_imm (val, mode))\n     {\n       if (generate)\n \temit_insn (gen_rtx_SET (dest, imm));\n-      num_insns++;\n-      return num_insns;\n+      return 1;\n     }\n \n-  if (mode == SImode)\n+  if ((val >> 32) == 0 || mode == SImode)\n     {\n-      /* We know we can't do this in 1 insn, and we must be able to do it\n-\t in two; so don't mess around looking for sequences that don't buy\n-\t us anything.  */\n       if (generate)\n \t{\n-\t  emit_insn (gen_rtx_SET (dest, GEN_INT (INTVAL (imm) & 0xffff)));\n-\t  emit_insn (gen_insv_immsi (dest, GEN_INT (16),\n-\t\t\t\t     GEN_INT ((INTVAL (imm) >> 16) & 0xffff)));\n+\t  emit_insn (gen_rtx_SET (dest, GEN_INT (val & 0xffff)));\n+\t  if (mode == SImode)\n+\t    emit_insn (gen_insv_immsi (dest, GEN_INT (16),\n+\t\t\t\t       GEN_INT ((val >> 16) & 0xffff)));\n+\t  else\n+\t    emit_insn (gen_insv_immdi (dest, GEN_INT (16),\n+\t\t\t\t       GEN_INT ((val >> 16) & 0xffff)));\n \t}\n-      num_insns += 2;\n-      return num_insns;\n+      return 2;\n     }\n \n   /* Remaining cases are all for DImode.  */\n \n-  val = INTVAL (imm);\n-\n-  one_match = 0;\n-  zero_match = 0;\n   mask = 0xffff;\n-  first_not_ffff_match = -1;\n-\n-  for (i = 0; i < 64; i += 16, mask <<= 16)\n-    {\n-      if ((val & mask) == mask)\n-\tone_match++;\n-      else\n-\t{\n-\t  if (first_not_ffff_match < 0)\n-\t    first_not_ffff_match = i;\n-\t  if ((val & mask) == 0)\n-\t    zero_match++;\n-\t}\n-    }\n-\n-  if (one_match == 2)\n-    {\n-      /* Set one of the quarters and then insert back into result.  */\n-      mask = 0xffffll << first_not_ffff_match;\n-      if (generate)\n-\t{\n-\t  emit_insn (gen_rtx_SET (dest, GEN_INT (val | mask)));\n-\t  emit_insn (gen_insv_immdi (dest, GEN_INT (first_not_ffff_match),\n-\t\t\t\t     GEN_INT ((val >> first_not_ffff_match)\n-\t\t\t\t\t      & 0xffff)));\n-\t}\n-      num_insns += 2;\n-      return num_insns;\n-    }\n-\n-  if (zero_match == 2)\n-    goto simple_sequence;\n+  zero_match = ((val & mask) == 0) + ((val & (mask << 16)) == 0) +\n+    ((val & (mask << 32)) == 0) + ((val & (mask << 48)) == 0);\n+  one_match = ((~val & mask) == 0) + ((~val & (mask << 16)) == 0) +\n+    ((~val & (mask << 32)) == 0) + ((~val & (mask << 48)) == 0);\n \n   if (zero_match != 2 && one_match != 2)\n     {\n@@ -1529,58 +1496,32 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t    {\n \t      emit_insn (gen_rtx_SET (dest, GEN_INT (val2)));\n \t      emit_insn (gen_insv_immdi (dest, GEN_INT (i),\n-\t\t\t GEN_INT ((val >> i) & 0xffff)));\n+\t\t\t\t\t GEN_INT ((val >> i) & 0xffff)));\n \t    }\n-\t  return 2;\n \t}\n     }\n \n-  if (one_match > zero_match)\n-    {\n-      /* Set either first three quarters or all but the third.\t */\n-      mask = 0xffffll << (16 - first_not_ffff_match);\n-      if (generate)\n-\temit_insn (gen_rtx_SET (dest,\n-\t\t\t\tGEN_INT (val | mask | 0xffffffff00000000ull)));\n-      num_insns ++;\n+  /* Generate 2-4 instructions, skipping 16 bits of all zeroes or ones which\n+     are emitted by the initial mov.  If one_match > zero_match, skip set bits,\n+     otherwise skip zero bits.  */\n \n-      /* Now insert other two quarters.\t */\n-      for (i = first_not_ffff_match + 16, mask <<= (first_not_ffff_match << 1);\n-\t   i < 64; i += 16, mask <<= 16)\n-\t{\n-\t  if ((val & mask) != mask)\n-\t    {\n-\t      if (generate)\n-\t\temit_insn (gen_insv_immdi (dest, GEN_INT (i),\n-\t\t\t\t\t   GEN_INT ((val >> i) & 0xffff)));\n-\t      num_insns ++;\n-\t    }\n-\t}\n-      return num_insns;\n-    }\n-\n- simple_sequence:\n-  first = true;\n+  num_insns = 1;\n   mask = 0xffff;\n-  for (i = 0; i < 64; i += 16, mask <<= 16)\n+  val2 = one_match > zero_match ? ~val : val;\n+  i = (val2 & mask) != 0 ? 0 : (val2 & (mask << 16)) != 0 ? 16 : 32;\n+\n+  if (generate)\n+    emit_insn (gen_rtx_SET (dest, GEN_INT (one_match > zero_match\n+\t\t\t\t\t   ? (val | ~(mask << i))\n+\t\t\t\t\t   : (val & (mask << i)))));\n+  for (i += 16; i < 64; i += 16)\n     {\n-      if ((val & mask) != 0)\n-\t{\n-\t  if (first)\n-\t    {\n-\t      if (generate)\n-\t\temit_insn (gen_rtx_SET (dest, GEN_INT (val & mask)));\n-\t      num_insns ++;\n-\t      first = false;\n-\t    }\n-\t  else\n-\t    {\n-\t      if (generate)\n-\t\temit_insn (gen_insv_immdi (dest, GEN_INT (i),\n-\t\t\t\t\t   GEN_INT ((val >> i) & 0xffff)));\n-\t      num_insns ++;\n-\t    }\n-\t}\n+      if ((val2 & (mask << i)) == 0)\n+\tcontinue;\n+      if (generate)\n+\temit_insn (gen_insv_immdi (dest, GEN_INT (i),\n+\t\t\t\t   GEN_INT ((val >> i) & 0xffff)));\n+      num_insns ++;\n     }\n \n   return num_insns;"}]}