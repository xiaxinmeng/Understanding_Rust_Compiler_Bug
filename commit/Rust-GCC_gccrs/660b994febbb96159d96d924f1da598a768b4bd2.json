{"sha": "660b994febbb96159d96d924f1da598a768b4bd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYwYjk5NGZlYmJiOTYxNTlkOTZkOTI0ZjFkYTU5OGE3NjhiNGJkMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-12-02T15:48:36Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2010-12-02T15:48:36Z"}, "message": "DFA model for Core 2 and Core i7 scheduling.\n\n\t* config/i386/core2.md: New DFA model for Core 2 and Core i7.\n\t* config/i386/i386.c (ix86_option_override_internal): Update entries\n\tfor Core 2 and Core i7.\n\t(ix86_issue_rate): Set issue rate to 3 [be realistic].\n\t* config/i386/i386.md: Include \"core2.md\".\n\t(define_attr cpu): Add \"corei7\".\n\nFrom-SVN: r167375", "tree": {"sha": "68a0c47a5abe78db7a2861ab49a4d06ed4ef9c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68a0c47a5abe78db7a2861ab49a4d06ed4ef9c93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/660b994febbb96159d96d924f1da598a768b4bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660b994febbb96159d96d924f1da598a768b4bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/660b994febbb96159d96d924f1da598a768b4bd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660b994febbb96159d96d924f1da598a768b4bd2/comments", "author": null, "committer": null, "parents": [{"sha": "ab2477624b15b5d1fe43972f8f4d6082c6893624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab2477624b15b5d1fe43972f8f4d6082c6893624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab2477624b15b5d1fe43972f8f4d6082c6893624"}], "stats": {"total": 717, "additions": 711, "deletions": 6}, "files": [{"sha": "f73b43b983fb365cf0d45cc090f25cd004e23b71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660b994febbb96159d96d924f1da598a768b4bd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660b994febbb96159d96d924f1da598a768b4bd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=660b994febbb96159d96d924f1da598a768b4bd2", "patch": "@@ -1,3 +1,14 @@\n+2010-12-02  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tDFA model for Core 2 and Core i7 scheduling.\n+\n+\t* config/i386/core2.md: New DFA model for Core 2 and Core i7.\n+\t* config/i386/i386.c (ix86_option_override_internal): Update entries\n+\tfor Core 2 and Core i7.\n+\t(ix86_issue_rate): Set issue rate to 3 [be realistic].\n+\t* config/i386/i386.md: Include \"core2.md\".\n+\t(define_attr cpu): Add \"corei7\".\n+\n 2010-12-02  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \tDefine tuning for Core 2 and Core i7."}, {"sha": "d154cdc077f2431736c58aeb5ca5fac1dbb6e050", "filename": "gcc/config/i386/core2.md", "status": "added", "additions": 691, "deletions": 0, "changes": 691, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660b994febbb96159d96d924f1da598a768b4bd2/gcc%2Fconfig%2Fi386%2Fcore2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660b994febbb96159d96d924f1da598a768b4bd2/gcc%2Fconfig%2Fi386%2Fcore2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcore2.md?ref=660b994febbb96159d96d924f1da598a768b4bd2", "patch": "@@ -0,0 +1,691 @@\n+;; Scheduling for Core 2 and derived processors.\n+;; Copyright (C) 2004, 2005, 2007, 2008, 2010 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.  */\n+\n+;; The scheduling description in this file is based on the one in ppro.md,\n+;; with additional information obtained from\n+;;\n+;;    \"How to optimize for the Pentium family of microprocessors\",\n+;;    by Agner Fog, PhD.\n+;;\n+;; The major difference from the P6 pipeline is one extra decoder, and\n+;; one extra execute unit.  Due to micro-op fusion, many insns no longer\n+;; need to be decoded in decoder 0, but can be handled by all of them.\n+\n+;; The core2_idiv, core2_fdiv and core2_ssediv automata are used to\n+;; model issue latencies of idiv, fdiv and ssediv type insns.\n+(define_automaton \"core2_decoder,core2_core,core2_idiv,core2_fdiv,core2_ssediv,core2_load,core2_store\")\n+\n+;; The CPU domain, used for Core i7 bypass latencies\n+(define_attr \"i7_domain\" \"int,float,simd\"\n+  (cond [(eq_attr \"type\" \"fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,fisttp,frndint\")\n+\t   (const_string \"float\")\n+\t (eq_attr \"type\" \"sselog,sselog1,sseiadd,sseiadd1,sseishft,sseishft1,sseimul,\n+\t\t\t  sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,\n+\t\t\t  ssecvt1,sseicvt,ssediv,sseins,ssemuladd,sse4arg\")\n+\t   (cond [(eq_attr \"mode\" \"V4DF,V8SF,V2DF,V4SF,SF,DF\")\n+\t\t    (const_string \"float\")\n+\t\t  (eq_attr \"mode\" \"SI\")\n+\t\t    (const_string \"int\")]\n+\t\t  (const_string \"simd\"))\n+\t (eq_attr \"type\" \"mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\")\n+\t   (const_string \"simd\")]\n+\t(const_string \"int\")))\n+\n+;; As for the Pentium Pro,\n+;;  - an instruction with 1 uop can be decoded by any of the three\n+;;    decoders in one cycle.\n+;;  - an instruction with 1 to 4 uops can be decoded only by decoder 0\n+;;    but still in only one cycle.\n+;;  - a complex (microcode) instruction can also only be decoded by\n+;;    decoder 0, and this takes an unspecified number of cycles.\n+;;\n+;; The goal is to schedule such that we have a few-one-one uops sequence\n+;; in each cycle, to decode as many instructions per cycle as possible.\n+(define_cpu_unit \"c2_decoder0\" \"core2_decoder\")\n+(define_cpu_unit \"c2_decoder1\" \"core2_decoder\")\n+(define_cpu_unit \"c2_decoder2\" \"core2_decoder\")\n+(define_cpu_unit \"c2_decoder3\" \"core2_decoder\")\n+\n+;; We first wish to find an instruction for c2_decoder0, so exclude\n+;; c2_decoder1 and c2_decoder2 from being reserved until c2_decoder 0 is\n+;; reserved.\n+(presence_set \"c2_decoder1\" \"c2_decoder0\")\n+(presence_set \"c2_decoder2\" \"c2_decoder0\")\n+(presence_set \"c2_decoder3\" \"c2_decoder0\")\n+\n+;; Most instructions can be decoded on any of the three decoders.\n+(define_reservation \"c2_decodern\" \"(c2_decoder0|c2_decoder1|c2_decoder2|c2_decoder3)\")\n+\n+;; The out-of-order core has six pipelines.  These are similar to the\n+;; Pentium Pro's five pipelines.  Port 2 is responsible for memory loads,\n+;; port 3 for store address calculations, port 4 for memory stores, and\n+;; ports 0, 1 and 5 for everything else.\n+\n+(define_cpu_unit \"c2_p0,c2_p1,c2_p5\" \"core2_core\")\n+(define_cpu_unit \"c2_p2\" \"core2_load\")\n+(define_cpu_unit \"c2_p3,c2_p4\" \"core2_store\")\n+(define_cpu_unit \"c2_idiv\" \"core2_idiv\")\n+(define_cpu_unit \"c2_fdiv\" \"core2_fdiv\")\n+(define_cpu_unit \"c2_ssediv\" \"core2_ssediv\")\n+\n+;; Only the irregular instructions have to be modeled here.  A load\n+;; increases the latency by 2 or 3, or by nothing if the manual gives\n+;; a latency already.  Store latencies are not accounted for.\n+;;\n+;; The simple instructions follow a very regular pattern of 1 uop per\n+;; reg-reg operation, 1 uop per load on port 2. and 2 uops per store\n+;; on port 4 and port 3.  These instructions are modelled at the bottom\n+;; of this file.\n+;;\n+;; For microcoded instructions we don't know how many uops are produced.\n+;; These instructions are the \"complex\" ones in the Intel manuals.  All\n+;; we _do_ know is that they typically produce four or more uops, so\n+;; they can only be decoded on c2_decoder0.  Modelling their latencies\n+;; doesn't make sense because we don't know how these instructions are\n+;; executed in the core.  So we just model that they can only be decoded\n+;; on decoder 0, and say that it takes a little while before the result\n+;; is available.\n+(define_insn_reservation \"c2_complex_insn\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (eq_attr \"type\" \"other,multi,str\"))\n+\t\t\t \"c2_decoder0\")\n+\n+(define_insn_reservation \"c2_call\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (eq_attr \"type\" \"call,callv\"))\n+\t\t\t \"c2_decoder0\")\n+\n+;; imov with memory operands does not use the integer units.\n+;; imovx always decodes to one uop, and also doesn't use the integer\n+;; units if it has memory operands.\n+(define_insn_reservation \"c2_imov\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"imov,imovx\")))\n+\t\t\t \"c2_decodern,(c2_p0|c2_p1|c2_p5)\")\n+\n+(define_insn_reservation \"c2_imov_load\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"imov,imovx\")))\n+\t\t\t \"c2_decodern,c2_p2\")\n+\n+(define_insn_reservation \"c2_imov_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"imov\")))\n+\t\t\t \"c2_decodern,c2_p4+c2_p3\")\n+\n+(define_insn_reservation \"c2_icmov\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"icmov\")))\n+\t\t\t \"c2_decoder0,(c2_p0|c2_p1|c2_p5)*2\")\n+\n+(define_insn_reservation \"c2_icmov_load\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"icmov\")))\n+\t\t\t \"c2_decoder0,c2_p2,(c2_p0|c2_p1|c2_p5)*2\")\n+\n+(define_insn_reservation \"c2_push_reg\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"push\")))\n+\t\t\t \"c2_decodern,c2_p4+c2_p3\")\n+\n+(define_insn_reservation \"c2_push_mem\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"both\")\n+\t\t\t\t   (eq_attr \"type\" \"push\")))\n+\t\t\t \"c2_decoder0,c2_p2,c2_p4+c2_p3\")\n+\n+;; lea executes on port 0 with latency one and throughput 1.\n+(define_insn_reservation \"c2_lea\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"lea\")))\n+\t\t\t \"c2_decodern,c2_p0\")\n+\n+;; Shift and rotate decode as two uops which can go to port 0 or 5.\n+;; The load and store units need to be reserved when memory operands\n+;; are involved.\n+(define_insn_reservation \"c2_shift_rotate\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1\")))\n+\t\t\t \"c2_decodern,(c2_p0|c2_p5)\")\n+\n+(define_insn_reservation \"c2_shift_rotate_mem\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1\")))\n+\t\t\t \"c2_decoder0,c2_p2,(c2_p0|c2_p5),c2_p4+c2_p3\")\n+\n+;; See comments in ppro.md for the corresponding reservation.\n+(define_insn_reservation \"c2_branch\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"ibr\")))\n+\t\t\t \"c2_decodern,c2_p5\")\n+\n+;; ??? Indirect branches probably have worse latency than this.\n+(define_insn_reservation \"c2_indirect_branch\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (eq_attr \"type\" \"ibr\")))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p5\")\n+\n+(define_insn_reservation \"c2_leave\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (eq_attr \"type\" \"leave\"))\n+\t\t\t \"c2_decoder0,c2_p2+(c2_p0|c2_p1),(c2_p0|c2_p1)\")\n+\n+;; mul and imul with two/three operands only execute on port 1 for HImode\n+;; and SImode, port 0 for DImode.\n+(define_insn_reservation \"c2_imul_hisi\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"HI,SI\")\n+\t\t\t\t\t(eq_attr \"type\" \"imul\"))))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+(define_insn_reservation \"c2_imul_hisi_mem\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"HI,SI\")\n+\t\t\t\t\t(eq_attr \"type\" \"imul\"))))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p1\")\n+\n+(define_insn_reservation \"c2_imul_di\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n+\t\t\t\t\t(eq_attr \"type\" \"imul\"))))\n+\t\t\t \"c2_decodern,c2_p0\")\n+\n+(define_insn_reservation \"c2_imul_di_mem\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n+\t\t\t\t\t(eq_attr \"type\" \"imul\"))))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p0\")\n+\n+;; div and idiv are very similar, so we model them the same.\n+;; QI, HI, and SI have issue latency 12, 21, and 37, respectively.\n+;; These issue latencies are modelled via the c2_div automaton.\n+(define_insn_reservation \"c2_idiv_QI\" 19\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"QI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"c2_decoder0,(c2_p0+c2_idiv)*2,(c2_p0|c2_p1)+c2_idiv,c2_idiv*9\")\n+\n+(define_insn_reservation \"c2_idiv_QI_load\" 19\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"QI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p0+c2_idiv,c2_p0+c2_idiv,(c2_p0|c2_p1)+c2_idiv,c2_idiv*9\")\n+\n+(define_insn_reservation \"c2_idiv_HI\" 23\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"HI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"c2_decoder0,(c2_p0+c2_idiv)*3,(c2_p0|c2_p1)+c2_idiv,c2_idiv*17\")\n+\n+(define_insn_reservation \"c2_idiv_HI_load\" 23\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"HI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p0+c2_idiv,c2_p0+c2_idiv,(c2_p0|c2_p1)+c2_idiv,c2_idiv*18\")\n+\n+(define_insn_reservation \"c2_idiv_SI\" 39\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"c2_decoder0,(c2_p0+c2_idiv)*3,(c2_p0|c2_p1)+c2_idiv,c2_idiv*33\")\n+\n+(define_insn_reservation \"c2_idiv_SI_load\" 39\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p0+c2_idiv,c2_p0+c2_idiv,(c2_p0|c2_p1)+c2_idiv,c2_idiv*34\")\n+\n+;; x87 floating point operations.\n+\n+(define_insn_reservation \"c2_fxch\" 0\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (eq_attr \"type\" \"fxch\"))\n+\t\t\t \"c2_decodern\")\n+\n+(define_insn_reservation \"c2_fop\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none,unknown\")\n+\t\t\t\t   (eq_attr \"type\" \"fop\")))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+(define_insn_reservation \"c2_fop_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"fop\")))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p1,c2_p1\")\n+\n+(define_insn_reservation \"c2_fop_store\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"fop\")))\n+\t\t\t \"c2_decoder0,c2_p0,c2_p0,c2_p0+c2_p4+c2_p3\")\n+\n+(define_insn_reservation \"c2_fop_both\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"both\")\n+\t\t\t\t   (eq_attr \"type\" \"fop\")))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p0,c2_p0+c2_p4+c2_p3\")\n+\n+(define_insn_reservation \"c2_fsgn\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (eq_attr \"type\" \"fsgn\"))\n+\t\t\t \"c2_decodern,c2_p0\")\n+\n+(define_insn_reservation \"c2_fistp\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (eq_attr \"type\" \"fistp\"))\n+\t\t\t \"c2_decoder0,c2_p0*2,c2_p4+c2_p3\")\n+\n+(define_insn_reservation \"c2_fcmov\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (eq_attr \"type\" \"fcmov\"))\n+\t\t\t \"c2_decoder0,c2_p0*2\")\n+\n+(define_insn_reservation \"c2_fcmp\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"fcmp\")))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+(define_insn_reservation \"c2_fcmp_load\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"fcmp\")))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p1\")\n+\n+(define_insn_reservation \"c2_fmov\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"fmov\")))\n+\t\t\t \"c2_decodern,c2_p0\")\n+\n+(define_insn_reservation \"c2_fmov_load\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"!XF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n+\t\t\t \"c2_decodern,c2_p2\")\n+\n+(define_insn_reservation \"c2_fmov_XF_load\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n+\t\t\t \"c2_decoder0,(c2_p2+c2_p0)*2\")\n+\n+(define_insn_reservation \"c2_fmov_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"!XF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n+\t\t\t \"c2_decodern,c2_p3+c2_p4\")\n+\n+(define_insn_reservation \"c2_fmov_XF_store\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n+\t\t\t \"c2_decoder0,(c2_p3+c2_p4),(c2_p3+c2_p4)\")\n+\n+;; fmul executes on port 0 with latency 5.  It has issue latency 2,\n+;; but we don't model this.\n+(define_insn_reservation \"c2_fmul\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"fmul\")))\n+\t\t\t \"c2_decoder0,c2_p0*2\")\n+\n+(define_insn_reservation \"c2_fmul_load\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"fmul\")))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p0,c2_p0\")\n+\n+;; fdiv latencies depend on the mode of the operands.  XFmode gives\n+;; a latency of 38 cycles, DFmode gives 32, and SFmode gives latency 18.\n+;; Division by a power of 2 takes only 9 cycles, but we cannot model\n+;; that.  Throughput is equal to latency - 1, which we model using the\n+;; c2_div automaton.\n+(define_insn_reservation \"c2_fdiv_SF\" 18\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"c2_decodern,c2_p0+c2_fdiv,c2_fdiv*16\")\n+\n+(define_insn_reservation \"c2_fdiv_SF_load\" 19\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p0+c2_fdiv,c2_fdiv*16\")\n+\n+(define_insn_reservation \"c2_fdiv_DF\" 32\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"c2_decodern,c2_p0+c2_fdiv,c2_fdiv*30\")\n+\n+(define_insn_reservation \"c2_fdiv_DF_load\" 33\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p0+c2_fdiv,c2_fdiv*30\")\n+\n+(define_insn_reservation \"c2_fdiv_XF\" 38\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"c2_decodern,c2_p0+c2_fdiv,c2_fdiv*36\")\n+\n+(define_insn_reservation \"c2_fdiv_XF_load\" 39\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p0+c2_fdiv,c2_fdiv*36\")\n+\n+;; MMX instructions.\n+\n+(define_insn_reservation \"c2_mmx_add\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"mmxadd,sseiadd\")))\n+\t\t\t \"c2_decodern,c2_p0|c2_p5\")\n+\n+(define_insn_reservation \"c2_mmx_add_load\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"mmxadd,sseiadd\")))\n+\t\t\t \"c2_decodern,c2_p2+c2_p0|c2_p5\")\n+\n+(define_insn_reservation \"c2_mmx_shft\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"mmxshft\")))\n+\t\t\t \"c2_decodern,c2_p0|c2_p5\")\n+\n+(define_insn_reservation \"c2_mmx_shft_load\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"mmxshft\")))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p1\")\n+\n+(define_insn_reservation \"c2_mmx_sse_shft\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseishft\")\n+\t\t\t\t\t(eq_attr \"length_immediate\" \"!0\"))))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+(define_insn_reservation \"c2_mmx_sse_shft_load\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseishft\")\n+\t\t\t\t\t(eq_attr \"length_immediate\" \"!0\"))))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+(define_insn_reservation \"c2_mmx_sse_shft1\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseishft\")\n+\t\t\t\t\t(eq_attr \"length_immediate\" \"0\"))))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+(define_insn_reservation \"c2_mmx_sse_shft1_load\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseishft\")\n+\t\t\t\t\t(eq_attr \"length_immediate\" \"0\"))))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+(define_insn_reservation \"c2_mmx_mul\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"mmxmul,sseimul\")))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+(define_insn_reservation \"c2_mmx_mul_load\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"mmxmul,sseimul\")))\n+\t\t\t \"c2_decoder0,c2_p2+c2_p1\")\n+\n+(define_insn_reservation \"c2_sse_mmxcvt\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"mode\" \"DI\")\n+\t\t\t\t   (eq_attr \"type\" \"mmxcvt\")))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+;; FIXME: These are Pentium III only, but we cannot tell here if\n+;; we're generating code for PentiumPro/Pentium II or Pentium III\n+;; (define_insn_reservation \"c2_sse_mmxshft\" 2\n+;;\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+;;\t\t\t      (and (eq_attr \"mode\" \"TI\")\n+;;\t\t\t\t   (eq_attr \"type\" \"mmxshft\")))\n+;;\t\t\t \"c2_decodern,c2_p0\")\n+\n+;; The sfence instruction.\n+(define_insn_reservation \"c2_sse_sfence\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"unknown\")\n+\t\t\t\t   (eq_attr \"type\" \"sse\")))\n+\t\t\t \"c2_decoder0,c2_p4+c2_p3\")\n+\n+;; FIXME: This reservation is all wrong when we're scheduling sqrtss.\n+(define_insn_reservation \"c2_sse_SFDF\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF\")\n+\t\t\t\t   (eq_attr \"type\" \"sse\")))\n+\t\t\t \"c2_decodern,c2_p0\")\n+\n+(define_insn_reservation \"c2_sse_V4SF\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4SF\")\n+\t\t\t\t   (eq_attr \"type\" \"sse\")))\n+\t\t\t \"c2_decoder0,c2_p1*2\")\n+\n+(define_insn_reservation \"c2_sse_addcmp\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"sseadd,ssecmp,ssecomi\")))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+(define_insn_reservation \"c2_sse_addcmp_load\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"sseadd,ssecmp,ssecomi\")))\n+\t\t\t \"c2_decodern,c2_p2+c2_p1\")\n+\n+(define_insn_reservation \"c2_sse_mul_SF\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF,V4SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n+\t\t\t\"c2_decodern,c2_p0\")\n+\n+(define_insn_reservation \"c2_sse_mul_SF_load\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF,V4SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n+\t\t\t\"c2_decodern,c2_p2+c2_p0\")\n+\n+(define_insn_reservation \"c2_sse_mul_DF\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF,V2DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n+\t\t\t\"c2_decodern,c2_p0\")\n+\n+(define_insn_reservation \"c2_sse_mul_DF_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF,V2DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n+\t\t\t\"c2_decodern,c2_p2+c2_p0\")\n+\n+(define_insn_reservation \"c2_sse_div_SF\" 18\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF,V4SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"c2_decodern,c2_p0,c2_ssediv*17\")\n+\n+(define_insn_reservation \"c2_sse_div_SF_load\" 18\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF,V4SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"c2_decodern,(c2_p2+c2_p0),c2_ssediv*17\")\n+\n+(define_insn_reservation \"c2_sse_div_DF\" 32\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF,V2DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"c2_decodern,c2_p0,c2_ssediv*31\")\n+\n+(define_insn_reservation \"c2_sse_div_DF_load\" 32\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF,V2DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"c2_decodern,(c2_p2+c2_p0),c2_ssediv*31\")\n+\n+;; FIXME: these have limited throughput\n+(define_insn_reservation \"c2_sse_icvt_SF\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"sseicvt\"))))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+(define_insn_reservation \"c2_sse_icvt_SF_load\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"sseicvt\"))))\n+\t\t\t \"c2_decodern,c2_p2+c2_p1\")\n+\n+(define_insn_reservation \"c2_sse_icvt_DF\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"sseicvt\"))))\n+\t\t\t \"c2_decoder0,c2_p0+c2_p1\")\n+\n+(define_insn_reservation \"c2_sse_icvt_DF_load\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"sseicvt\"))))\n+\t\t\t \"c2_decoder0,(c2_p2+c2_p1)\")\n+\n+(define_insn_reservation \"c2_sse_icvt_SI\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t\t(eq_attr \"type\" \"sseicvt\"))))\n+\t\t\t \"c2_decodern,c2_p1\")\n+\n+(define_insn_reservation \"c2_sse_icvt_SI_load\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t\t(eq_attr \"type\" \"sseicvt\"))))\n+\t\t\t \"c2_decodern,(c2_p2+c2_p1)\")\n+\n+(define_insn_reservation \"c2_sse_mov\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"ssemov\")))\n+\t\t\t \"c2_decodern,(c2_p0|c2_p1|c2_p5)\")\n+\n+(define_insn_reservation \"c2_sse_mov_load\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"ssemov\")))\n+\t\t\t \"c2_decodern,c2_p2\")\n+\n+(define_insn_reservation \"c2_sse_mov_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"ssemov\")))\n+\t\t\t \"c2_decodern,c2_p4+c2_p3\")\n+\n+;; All other instructions are modelled as simple instructions.\n+;; We have already modelled all i387 floating point instructions, so all\n+;; other instructions execute on either port 0, 1 or 5.  This includes\n+;; the ALU units, and the MMX units.\n+;;\n+;; reg-reg instructions produce 1 uop so they can be decoded on any of\n+;; the three decoders.  Loads benefit from micro-op fusion and can be\n+;; treated in the same way.\n+(define_insn_reservation \"c2_insn\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"none,unknown\")\n+\t\t\t\t   (eq_attr \"type\" \"alu,alu1,negnot,incdec,icmp,test,setcc,sseishft1,mmx,mmxcmp\")))\n+\t\t\t \"c2_decodern,(c2_p0|c2_p1|c2_p5)\")\n+\n+(define_insn_reservation \"c2_insn_load\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"alu,alu1,negnot,incdec,icmp,test,setcc,pop,sseishft1,mmx,mmxcmp\")))\n+\t\t\t \"c2_decodern,c2_p2,(c2_p0|c2_p1|c2_p5)\")\n+\n+;; register-memory instructions have three uops,  so they have to be\n+;; decoded on c2_decoder0.\n+(define_insn_reservation \"c2_insn_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"alu,alu1,negnot,incdec,icmp,test,setcc,sseishft1,mmx,mmxcmp\")))\n+\t\t\t \"c2_decoder0,(c2_p0|c2_p1|c2_p5),c2_p4+c2_p3\")\n+\n+;; read-modify-store instructions produce 4 uops so they have to be\n+;; decoded on c2_decoder0 as well.\n+(define_insn_reservation \"c2_insn_both\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"core2,corei7\")\n+\t\t\t      (and (eq_attr \"memory\" \"both\")\n+\t\t\t\t   (eq_attr \"type\" \"alu,alu1,negnot,incdec,icmp,test,setcc,pop,sseishft1,mmx,mmxcmp\")))\n+\t\t\t \"c2_decoder0,c2_p2,(c2_p0|c2_p1|c2_p5),c2_p4+c2_p3\")"}, {"sha": "f5fc2b607a681da9cb8fc1aa73562941c94e365b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660b994febbb96159d96d924f1da598a768b4bd2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660b994febbb96159d96d924f1da598a768b4bd2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=660b994febbb96159d96d924f1da598a768b4bd2", "patch": "@@ -3231,10 +3231,10 @@ ix86_option_override_internal (bool main_args_p)\n       {\"nocona\", PROCESSOR_NOCONA, CPU_NONE,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_CX16 | PTA_NO_SAHF},\n-      {\"core2\", PROCESSOR_CORE2_64, CPU_GENERIC64,\n+      {\"core2\", PROCESSOR_CORE2_64, CPU_CORE2,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_CX16},\n-      {\"corei7\", PROCESSOR_COREI7_64, CPU_GENERIC64,\n+      {\"corei7\", PROCESSOR_COREI7_64, CPU_COREI7,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_CX16},\n       {\"atom\", PROCESSOR_ATOM, CPU_ATOM,\n@@ -3613,12 +3613,10 @@ ix86_option_override_internal (bool main_args_p)\n \n \t      case PROCESSOR_CORE2_64:\n \t\tix86_tune = PROCESSOR_CORE2_32;\n-\t\tix86_schedule = CPU_PENTIUMPRO;\n \t\tbreak;\n \n \t      case PROCESSOR_COREI7_64:\n \t\tix86_tune = PROCESSOR_COREI7_32;\n-\t\tix86_schedule = CPU_PENTIUMPRO;\n \t\tbreak;\n \n \t      default:\n@@ -22173,6 +22171,10 @@ ix86_issue_rate (void)\n \n     case PROCESSOR_PENTIUMPRO:\n     case PROCESSOR_PENTIUM4:\n+    case PROCESSOR_CORE2_32:\n+    case PROCESSOR_CORE2_64:\n+    case PROCESSOR_COREI7_32:\n+    case PROCESSOR_COREI7_64:\n     case PROCESSOR_ATHLON:\n     case PROCESSOR_K8:\n     case PROCESSOR_AMDFAM10:"}, {"sha": "88e6245105bb09cd1684ff30738dd5ca9bdfff8b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660b994febbb96159d96d924f1da598a768b4bd2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660b994febbb96159d96d924f1da598a768b4bd2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=660b994febbb96159d96d924f1da598a768b4bd2", "patch": "@@ -356,8 +356,8 @@\n \n \f\n ;; Processor type.\n-(define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,atom,\n-\t\t    generic64,amdfam10,bdver1\"\n+(define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,corei7,\n+\t\t    atom,generic64,amdfam10,bdver1\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be\n@@ -937,6 +937,7 @@\n (include \"bdver1.md\")\n (include \"geode.md\")\n (include \"atom.md\")\n+(include \"core2.md\")\n \n \f\n ;; Operand and operator predicates and constraints"}]}