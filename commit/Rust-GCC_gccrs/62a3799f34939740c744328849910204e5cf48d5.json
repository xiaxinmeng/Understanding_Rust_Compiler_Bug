{"sha": "62a3799f34939740c744328849910204e5cf48d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhMzc5OWYzNDkzOTc0MGM3NDQzMjg4NDk5MTAyMDRlNWNmNDhkNQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2021-04-06T23:07:39Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-21T10:45:21Z"}, "message": "[Ada] Implement fixed-lower-bound consistency checks for qualified_expressions\n\ngcc/ada/\n\n\t* checks.adb (Selected_Range_Checks): In the case of a\n\tqualified_expression where the qualifying subtype is an\n\tunconstrained array subtype with fixed lower bounds for some of\n\tits indexes, generate tests to check that those bounds are equal\n\tto the corresponding lower bounds of the qualified array object.", "tree": {"sha": "4fb0af1969d1ca9a7ce819f2600c142734371da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fb0af1969d1ca9a7ce819f2600c142734371da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62a3799f34939740c744328849910204e5cf48d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a3799f34939740c744328849910204e5cf48d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a3799f34939740c744328849910204e5cf48d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a3799f34939740c744328849910204e5cf48d5/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a61fd32dd1f8a4f8a65564f7d2f3b7fbc73167c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61fd32dd1f8a4f8a65564f7d2f3b7fbc73167c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a61fd32dd1f8a4f8a65564f7d2f3b7fbc73167c4"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "907641fca172908413888136ba6456c3f64d3210", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a3799f34939740c744328849910204e5cf48d5/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a3799f34939740c744328849910204e5cf48d5/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=62a3799f34939740c744328849910204e5cf48d5", "patch": "@@ -11106,6 +11106,56 @@ package body Checks is\n                end;\n             end if;\n \n+         --  If the context is a qualified_expression where the subtype is\n+         --  an unconstrained array subtype with fixed-lower-bound indexes,\n+         --  then consistency checks must be done between the lower bounds\n+         --  of any such indexes and the corresponding lower bounds of the\n+         --  qualified array object.\n+\n+         elsif Is_Fixed_Lower_Bound_Array_Subtype (T_Typ)\n+           and then Nkind (Parent (Expr)) = N_Qualified_Expression\n+           and then not Do_Access\n+         then\n+            declare\n+               Ndims : constant Pos := Number_Dimensions (T_Typ);\n+\n+               Qual_Index : Node_Id;\n+               Expr_Index : Node_Id;\n+\n+            begin\n+               Expr_Actual := Get_Referenced_Object (Expr);\n+               Exptyp      := Get_Actual_Subtype (Expr_Actual);\n+\n+               Qual_Index := First_Index (T_Typ);\n+               Expr_Index := First_Index (Exptyp);\n+\n+               for Indx in 1 .. Ndims loop\n+                  if Nkind (Expr_Index) /= N_Raise_Constraint_Error then\n+\n+                     --  If this index of the qualifying array subtype has\n+                     --  a fixed lower bound, then apply a check that the\n+                     --  corresponding lower bound of the array expression\n+                     --  is equal to it.\n+\n+                     if Is_Fixed_Lower_Bound_Index_Subtype (Etype (Qual_Index))\n+                     then\n+                        Evolve_Or_Else\n+                          (Cond,\n+                           Make_Op_Ne (Loc,\n+                             Left_Opnd   =>\n+                               Get_E_First_Or_Last\n+                                 (Loc, Exptyp, Indx, Name_First),\n+                             Right_Opnd  =>\n+                               New_Copy_Tree\n+                                 (Type_Low_Bound (Etype (Qual_Index)))));\n+                     end if;\n+\n+                     Next (Qual_Index);\n+                     Next (Expr_Index);\n+                  end if;\n+               end loop;\n+            end;\n+\n          else\n             --  For a conversion to an unconstrained array type, generate an\n             --  Action to check that the bounds of the source value are within"}]}