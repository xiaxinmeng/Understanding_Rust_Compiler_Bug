{"sha": "7067f8c814088c1d02e40adf79a80f5ec53dbdde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA2N2Y4YzgxNDA4OGMxZDAyZTQwYWRmNzlhODBmNWVjNTNkYmRkZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@pc30.home", "date": "2020-03-01T16:04:38Z"}, "committer": {"name": "Paul Thomas", "email": "pault@pc30.home", "date": "2020-03-01T16:04:38Z"}, "message": "Patch for PR92959", "tree": {"sha": "e125c995cd90503416bc6c26ecb7224826889fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e125c995cd90503416bc6c26ecb7224826889fdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7067f8c814088c1d02e40adf79a80f5ec53dbdde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7067f8c814088c1d02e40adf79a80f5ec53dbdde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7067f8c814088c1d02e40adf79a80f5ec53dbdde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7067f8c814088c1d02e40adf79a80f5ec53dbdde/comments", "author": null, "committer": null, "parents": [{"sha": "63cc547f6d85819192afa795e9ade14f0800eda9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63cc547f6d85819192afa795e9ade14f0800eda9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63cc547f6d85819192afa795e9ade14f0800eda9"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "00bec1ec1dfb97aa62f9458336279ff66133b8c6", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7067f8c814088c1d02e40adf79a80f5ec53dbdde/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7067f8c814088c1d02e40adf79a80f5ec53dbdde/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=7067f8c814088c1d02e40adf79a80f5ec53dbdde", "patch": "@@ -8573,7 +8573,6 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n   gfc_se arg2se;\n   tree tmp2;\n   tree tmp;\n-  tree nonzero_charlen;\n   tree nonzero_arraylen;\n   gfc_ss *ss;\n   bool scalar;\n@@ -8629,13 +8628,6 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n       if (arg2->expr->ts.type == BT_CLASS)\n \tgfc_add_data_component (arg2->expr);\n \n-      nonzero_charlen = NULL_TREE;\n-      if (arg1->expr->ts.type == BT_CHARACTER)\n-\tnonzero_charlen = fold_build2_loc (input_location, NE_EXPR,\n-\t\t\t\t\t   logical_type_node,\n-\t\t\t\t\t   arg1->expr->ts.u.cl->backend_decl,\n-\t\t\t\t\t   build_zero_cst\n-\t\t\t\t\t   (TREE_TYPE (arg1->expr->ts.u.cl->backend_decl)));\n       if (scalar)\n         {\n \t  /* A pointer to a scalar.  */\n@@ -8705,10 +8697,15 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n \n       /* If target is present zero character length pointers cannot\n \t be associated.  */\n-      if (nonzero_charlen != NULL_TREE)\n-\tse->expr = fold_build2_loc (input_location, TRUTH_AND_EXPR,\n-\t\t\t\t    logical_type_node,\n-\t\t\t\t    se->expr, nonzero_charlen);\n+      if (arg1->expr->ts.type == BT_CHARACTER)\n+\t{\n+\t  tmp = arg1se.string_length;\n+\t  tmp = fold_build2_loc (input_location, NE_EXPR,\n+\t\t\t\t logical_type_node, tmp,\n+\t\t\t\t build_zero_cst (TREE_TYPE (tmp)));\n+\t  se->expr = fold_build2_loc (input_location, TRUTH_AND_EXPR,\n+\t\t\t\t      logical_type_node, se->expr, tmp);\n+\t}\n     }\n \n   se->expr = convert (gfc_typenode_for_spec (&expr->ts), se->expr);"}, {"sha": "ca6e08e6464ae570235bee6785ea27d59d61a685", "filename": "gcc/testsuite/gfortran.dg/associated_8.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7067f8c814088c1d02e40adf79a80f5ec53dbdde/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7067f8c814088c1d02e40adf79a80f5ec53dbdde/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_8.f90?ref=7067f8c814088c1d02e40adf79a80f5ec53dbdde", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR92959, where compilation of ASSOCIATED segfaulted in 's1' and 's2'.\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   character(:), pointer :: x, y => NULL()\n+   character, pointer :: u, v => NULL ()\n+   character(4), target :: tgt = \"abcd\"\n+\n+! Manifestly not associated\n+   x => tgt\n+   u => tgt(1:1)\n+   call s1 (.false., 1)\n+   call s2 (.false., 2)\n+! Manifestly associated\n+   y => x\n+   v => u\n+   call s1 (.true., 3)\n+   call s2 (.true., 4)\n+! Zero sized storage sequences must give a false.\n+   y => tgt(1:0)\n+   x => y\n+   call s1 (.false., 5)\n+contains\n+   subroutine s1 (state, err_no)\n+      logical :: state\n+      integer :: err_no\n+      if (associated(x, y) .neqv. state) stop err_no\n+   end\n+   subroutine s2 (state, err_no)\n+      logical :: state\n+      integer :: err_no\n+      if (associated(u, v) .neqv. state) stop err_no\n+    end\n+end"}]}