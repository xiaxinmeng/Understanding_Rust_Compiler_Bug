{"sha": "9638f320ec3f396f57df753a70785a0390d40f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYzOGYzMjBlYzNmMzk2ZjU3ZGY3NTNhNzA3ODVhMDM5MGQ0MGYzZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-01-17T20:28:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-01-17T20:28:47Z"}, "message": "re PR c++/81054 (ICE with volatile variable in constexpr function)\n\n/cp\n2018-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/81054\n\t* constexpr.c (ensure_literal_type_for_constexpr_object): Return\n\terror_mark_node when we give an error.\n\t* decl.c (cp_finish_decl): Use the latter.\n\n/testsuite\n2018-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/81054\n\t* g++.dg/cpp0x/constexpr-ice19.C: New.\n\nFrom-SVN: r256816", "tree": {"sha": "ed0135709c9dceaaf7b59ef3148f972459c12f4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed0135709c9dceaaf7b59ef3148f972459c12f4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9638f320ec3f396f57df753a70785a0390d40f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9638f320ec3f396f57df753a70785a0390d40f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9638f320ec3f396f57df753a70785a0390d40f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9638f320ec3f396f57df753a70785a0390d40f3e/comments", "author": null, "committer": null, "parents": [{"sha": "95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f94b38bbc1f65ddb5287b8fe1e357bfba36aef"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "17b41921db93e66e6fb050ea4fdf99dc16b02f51", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9638f320ec3f396f57df753a70785a0390d40f3e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9638f320ec3f396f57df753a70785a0390d40f3e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9638f320ec3f396f57df753a70785a0390d40f3e", "patch": "@@ -1,3 +1,10 @@\n+2018-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/81054\n+\t* constexpr.c (ensure_literal_type_for_constexpr_object): Return\n+\terror_mark_node when we give an error.\n+\t* decl.c (cp_finish_decl): Use the latter.\n+\n 2018-01-17  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/83287"}, {"sha": "8984613aa4169ecb41385b0a91cbdae4cbf407e3", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9638f320ec3f396f57df753a70785a0390d40f3e/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9638f320ec3f396f57df753a70785a0390d40f3e/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=9638f320ec3f396f57df753a70785a0390d40f3e", "patch": "@@ -75,7 +75,8 @@ literal_type_p (tree t)\n }\n \n /* If DECL is a variable declared `constexpr', require its type\n-   be literal.  Return the DECL if OK, otherwise NULL.  */\n+   be literal.  Return error_mark_node if we give an error, the\n+   DECL otherwise.  */\n \n tree\n ensure_literal_type_for_constexpr_object (tree decl)\n@@ -97,6 +98,7 @@ ensure_literal_type_for_constexpr_object (tree decl)\n \t      error (\"the type %qT of %<constexpr%> variable %qD \"\n \t\t     \"is not literal\", type, decl);\n \t      explain_non_literal_class (type);\n+\t      decl = error_mark_node;\n \t    }\n \t  else\n \t    {\n@@ -105,10 +107,10 @@ ensure_literal_type_for_constexpr_object (tree decl)\n \t\t  error (\"variable %qD of non-literal type %qT in %<constexpr%> \"\n \t\t\t \"function\", decl, type);\n \t\t  explain_non_literal_class (type);\n+\t\t  decl = error_mark_node;\n \t\t}\n \t      cp_function_chain->invalid_constexpr = true;\n \t    }\n-\t  return NULL;\n \t}\n     }\n   return decl;"}, {"sha": "148afa6c9ace158ae5ded668460c9c9520c8c26b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9638f320ec3f396f57df753a70785a0390d40f3e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9638f320ec3f396f57df753a70785a0390d40f3e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9638f320ec3f396f57df753a70785a0390d40f3e", "patch": "@@ -6810,8 +6810,12 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       cp_apply_type_quals_to_decl (cp_type_quals (type), decl);\n     }\n \n-  if (!ensure_literal_type_for_constexpr_object (decl))\n-    DECL_DECLARED_CONSTEXPR_P (decl) = 0;\n+  if (ensure_literal_type_for_constexpr_object (decl)\n+      == error_mark_node)\n+    {\n+      DECL_DECLARED_CONSTEXPR_P (decl) = 0;\n+      return;\n+    }\n \n   if (VAR_P (decl)\n       && DECL_CLASS_SCOPE_P (decl)"}, {"sha": "7066eabdfc70384c3d2c63bc54a4b75001b4341e", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ice19.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9638f320ec3f396f57df753a70785a0390d40f3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9638f320ec3f396f57df753a70785a0390d40f3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice19.C?ref=9638f320ec3f396f57df753a70785a0390d40f3e", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/81054\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  volatile int i;\n+  constexpr A() : i() {}\n+};\n+\n+struct B\n+{\n+  static constexpr A a {};  // { dg-error \"not literal\" }\n+};"}]}