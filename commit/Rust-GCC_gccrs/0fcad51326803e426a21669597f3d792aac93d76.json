{"sha": "0fcad51326803e426a21669597f3d792aac93d76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZjYWQ1MTMyNjgwM2U0MjZhMjE2Njk1OTdmM2Q3OTJhYWM5M2Q3Ng==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-03-22T07:47:01Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-03-22T07:47:01Z"}, "message": "(movsf,movdf): Use an input reload for MEM-MEM moves.\n\n(extendsfdf2): Don't allow GENERAL_REGS in any operand.\n(truncdfsf2): Allocate a stack temp in expander.\nUse that in the output function.\n(fix_truncMN2,fixuns_truncMN2): Likewise.\nAllocate scratch reg from Q_REGS.\n\nFrom-SVN: r3830", "tree": {"sha": "af26a8a7216381d6dfdd2f8028af2670cd3b4fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af26a8a7216381d6dfdd2f8028af2670cd3b4fee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fcad51326803e426a21669597f3d792aac93d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcad51326803e426a21669597f3d792aac93d76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fcad51326803e426a21669597f3d792aac93d76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcad51326803e426a21669597f3d792aac93d76/comments", "author": null, "committer": null, "parents": [{"sha": "305f097e74f86cc189883348ac08841599af9722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305f097e74f86cc189883348ac08841599af9722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305f097e74f86cc189883348ac08841599af9722"}], "stats": {"total": 157, "additions": 98, "deletions": 59}, "files": [{"sha": "cdb9e3ca9b12d0b70d1ba3d2a35d57b03d4e444e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 98, "deletions": 59, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcad51326803e426a21669597f3d792aac93d76/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcad51326803e426a21669597f3d792aac93d76/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0fcad51326803e426a21669597f3d792aac93d76", "patch": "@@ -858,8 +858,8 @@\n ;; GENERAL_REGS.  For the purposes of regclass, prefer FLOAT_REGS.\n \n (define_insn \"movsf\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=*rf,*rfm,f,!*rm\")\n-\t(match_operand:SF 1 \"general_operand\" \"*rfm,*rf,fG,fF\"))]\n+  [(set (match_operand:SF 0 \"general_operand\" \"=*rfm,*rf,f,!*rm\")\n+\t(match_operand:SF 1 \"general_operand\" \"*rf,*rfm,fG,fF\"))]\n   \"\"\n   \"*\n {\n@@ -959,8 +959,8 @@\n ;; GENERAL_REGS.  For the purposes of regclass, prefer FLOAT_REGS.\n \n (define_insn \"movdf\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=*rf,*rfm,f,!*rm\")\n-\t(match_operand:DF 1 \"general_operand\" \"*rfm,*rf,fG,fF\"))]\n+  [(set (match_operand:DF 0 \"general_operand\" \"=*rfm,*rf,f,!*rm\")\n+\t(match_operand:DF 1 \"general_operand\" \"*rf,*rfm,fG,fF\"))]\n   \"\"\n   \"*\n {\n@@ -1200,9 +1200,9 @@\n ;; Conversions between float and double.\n \n (define_insn \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=fm,f,f,!*r\")\n+  [(set (match_operand:DF 0 \"general_operand\" \"=fm,f\")\n \t(float_extend:DF\n-\t (match_operand:SF 1 \"general_operand\" \"f,fm,!*r,f\")))]\n+\t (match_operand:SF 1 \"general_operand\" \"f,fm\")))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -1234,14 +1234,27 @@\n   abort ();\n }\")\n \n+(define_expand \"truncdfsf2\"\n+  [(parallel [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n+\t\t   (float_truncate:SF\n+\t\t    (match_operand:DF 1 \"register_operand\" \"\")))\n+\t      (clobber (match_dup 2))])]\n+  \"TARGET_80387\"\n+  \"\n+{\n+  operands[2] = (rtx) assign_386_stack_local (SFmode, 0);\n+}\")\n+\n ;; This cannot output into an f-reg because there is no way to be sure\n ;; of truncating in that case.  Otherwise this is just like a simple move\n-;; insn.\n+;; insn.  So we pretend we can output to a reg in order to get better\n+;; register preferencing, but we really use a stack slot.\n \n-(define_insn \"truncdfsf2\"\n+(define_insn \"\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,m\")\n \t(float_truncate:SF\n-\t (match_operand:DF 1 \"register_operand\" \"0,f\")))]\n+\t (match_operand:DF 1 \"register_operand\" \"0,f\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"m,m\"))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -1256,18 +1269,8 @@\n     }\n   else if (STACK_TOP_P (operands[0]))\n     {\n-      rtx xops[4];\n-\n-      xops[0] = AT_SP (SFmode);\n-      xops[1] = stack_pointer_rtx;\n-      xops[2] = GEN_INT (GET_MODE_SIZE (SFmode));\n-      xops[3] = operands[0];\n-\n-      output_asm_insn (AS2 (sub%L1,%2,%1), xops);\n-      output_asm_insn (AS1 (fstp%z0,%y0), xops);\n-      output_asm_insn (AS1 (fld%z0,%y0), xops);\n-      output_asm_insn (AS2 (add%L1,%2,%1), xops);\n-      RET;\n+      output_asm_insn (AS1 (fstp%z2,%y2), operands);\n+      return AS1 (fld%z2,%y2);\n     }\n   else\n     abort ();\n@@ -1280,84 +1283,104 @@\n ;; part.\n \n (define_expand \"fixuns_truncdfsi2\"\n-  [(set (match_dup 5)\n+  [(set (match_dup 4)\n \t(match_operand:DF 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 3)\n-\t\t   (fix:DI (fix:DF (match_dup 5))))\n-\t      (clobber (match_scratch:HI 2 \"\"))\n-\t      (clobber (match_dup 5))])\n+   (parallel [(set (match_dup 2)\n+\t\t   (fix:DI (fix:DF (match_dup 4))))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_dup 5))\n+\t      (clobber (match_dup 6))\n+\t      (clobber (match_scratch:SI 7 \"\"))])\n    (set (match_operand:SI 0 \"general_operand\" \"\")\n-\t(match_dup 4))]\n+\t(match_dup 3))]\n   \"TARGET_80387\"\n   \"\n {\n-  operands[3] = gen_reg_rtx (DImode);\n-  operands[4] = gen_lowpart (SImode, operands[3]);\n-  operands[5] = gen_reg_rtx (DFmode);\n+  operands[2] = gen_reg_rtx (DImode);\n+  operands[3] = gen_lowpart (SImode, operands[2]);\n+  operands[4] = gen_reg_rtx (DFmode);\n+  operands[5] = (rtx) assign_386_stack_local (SImode, 0);\n+  operands[6] = (rtx) assign_386_stack_local (SImode, 1);\n }\")\n \n (define_expand \"fixuns_truncsfsi2\"\n-  [(set (match_dup 5)\n+  [(set (match_dup 4)\n \t(match_operand:SF 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 3)\n-\t\t   (fix:DI (fix:SF (match_dup 5))))\n-\t      (clobber (match_scratch:HI 2 \"\"))\n-\t      (clobber (match_dup 5))])\n+   (parallel [(set (match_dup 2)\n+\t\t   (fix:DI (fix:SF (match_dup 4))))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_dup 5))\n+\t      (clobber (match_dup 6))\n+\t      (clobber (match_scratch:SI 7 \"\"))])\n    (set (match_operand:SI 0 \"general_operand\" \"\")\n-\t(match_dup 4))]\n+\t(match_dup 3))]\n   \"TARGET_80387\"\n   \"\n {\n-  operands[3] = gen_reg_rtx (DImode);\n-  operands[4] = gen_lowpart (SImode, operands[3]);\n-  operands[5] = gen_reg_rtx (SFmode);\n+  operands[2] = gen_reg_rtx (DImode);\n+  operands[3] = gen_lowpart (SImode, operands[2]);\n+  operands[4] = gen_reg_rtx (SFmode);\n+  operands[5] = (rtx) assign_386_stack_local (SImode, 0);\n+  operands[6] = (rtx) assign_386_stack_local (SImode, 1);\n }\")\n \n ;; Signed conversion to DImode.\n \n (define_expand \"fix_truncdfdi2\"\n-  [(set (match_dup 3)\n+  [(set (match_dup 2)\n \t(match_operand:DF 1 \"register_operand\" \"\"))\n    (parallel [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t\t   (fix:DI (fix:DF (match_dup 3))))\n-\t      (clobber (match_scratch:HI 2 \"\"))\n-\t      (clobber (match_dup 3))])]\n+\t\t   (fix:DI (fix:DF (match_dup 2))))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (match_dup 3))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_scratch:SI 5 \"\"))])]\n   \"TARGET_80387\"\n   \"\n {\n   operands[1] = copy_to_mode_reg (DFmode, operands[1]);\n-  operands[3] = gen_reg_rtx (DFmode);\n+  operands[2] = gen_reg_rtx (DFmode);\n+  operands[3] = (rtx) assign_386_stack_local (SImode, 0);\n+  operands[4] = (rtx) assign_386_stack_local (SImode, 1);\n }\")\n \n (define_expand \"fix_truncsfdi2\"\n-  [(set (match_dup 3)\n+  [(set (match_dup 2)\n \t(match_operand:SF 1 \"register_operand\" \"\"))\n    (parallel [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t\t   (fix:DI (fix:SF (match_dup 3))))\n-\t      (clobber (match_scratch:HI 2 \"\"))\n-\t      (clobber (match_dup 3))])]\n+\t\t   (fix:DI (fix:SF (match_dup 2))))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (match_dup 3))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_scratch:SI 5 \"\"))])]\n   \"TARGET_80387\"\n   \"\n {\n   operands[1] = copy_to_mode_reg (SFmode, operands[1]);\n-  operands[3] = gen_reg_rtx (SFmode);\n+  operands[2] = gen_reg_rtx (SFmode);\n+  operands[3] = (rtx) assign_386_stack_local (SImode, 0);\n+  operands[4] = (rtx) assign_386_stack_local (SImode, 1);\n }\")\n \n ;; These match a signed conversion of either DFmode or SFmode to DImode.\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n \t(fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))\n-   (clobber (match_scratch:HI 2 \"=&r\"))\n-   (clobber (match_dup 1))]\n+   (clobber (match_dup 1))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n+   (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n+   (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n   \"* return (char *) output_fix_trunc (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n \t(fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n-   (clobber (match_scratch:HI 2 \"=&r\"))\n-   (clobber (match_dup 1))]\n+   (clobber (match_dup 1))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n+   (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n+   (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n   \"* return (char *) output_fix_trunc (insn, operands);\")\n \n@@ -1367,29 +1390,45 @@\n   [(parallel [(set (match_operand:SI 0 \"general_operand\" \"\")\n \t\t   (fix:SI\n \t\t    (fix:DF (match_operand:DF 1 \"register_operand\" \"\"))))\n-\t      (clobber (match_scratch:HI 2 \"\"))])]\n+\t      (clobber (match_dup 2))\n+\t      (clobber (match_dup 3))\n+\t      (clobber (match_scratch:SI 4 \"\"))])]\n   \"TARGET_80387\"\n-  \"\")\n+  \"\n+{\n+  operands[2] = (rtx) assign_386_stack_local (SImode, 0);\n+  operands[3] = (rtx) assign_386_stack_local (SImode, 1);\n+}\")\n \n (define_expand \"fix_truncsfsi2\"\n   [(parallel [(set (match_operand:SI 0 \"general_operand\" \"\")\n \t\t   (fix:SI\n \t\t    (fix:SF (match_operand:SF 1 \"register_operand\" \"\"))))\n-\t      (clobber (match_scratch:HI 2 \"\"))])]\n+\t      (clobber (match_dup 2))\n+\t      (clobber (match_dup 3))\n+\t      (clobber (match_scratch:SI 4 \"\"))])]\n   \"TARGET_80387\"\n-  \"\")\n+  \"\n+{\n+  operands[2] = (rtx) assign_386_stack_local (SImode, 0);\n+  operands[3] = (rtx) assign_386_stack_local (SImode, 1);\n+}\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n \t(fix:SI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))\n-   (clobber (match_scratch:HI 2 \"=&r\"))]\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n+   (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n+   (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n   \"* return (char *) output_fix_trunc (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n \t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n-   (clobber (match_scratch:HI 2 \"=&r\"))]\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n+   (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n+   (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n   \"* return (char *) output_fix_trunc (insn, operands);\")\n \f"}]}