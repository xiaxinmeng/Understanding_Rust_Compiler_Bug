{"sha": "9d6b7c09886bd1c966abfd9bb13be2a86ba960c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ2YjdjMDk4ODZiZDFjOTY2YWJmZDliYjEzYmUyYTg2YmE5NjBjMg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-07-23T15:53:31Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-07-23T15:53:31Z"}, "message": "PR target/11607 and PR target/11516\n\n\tPR target/11607 and PR target/11516\n\t* pa.md (extzv, extv, insv): Revert latter half of last patch.\n\nFrom-SVN: r69707", "tree": {"sha": "e86f17a40ad92981485766abbdfd06edc00519c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e86f17a40ad92981485766abbdfd06edc00519c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d6b7c09886bd1c966abfd9bb13be2a86ba960c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6b7c09886bd1c966abfd9bb13be2a86ba960c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d6b7c09886bd1c966abfd9bb13be2a86ba960c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6b7c09886bd1c966abfd9bb13be2a86ba960c2/comments", "author": null, "committer": null, "parents": [{"sha": "ed6d7413173eb6caaab948e40b53c8cdb31de061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6d7413173eb6caaab948e40b53c8cdb31de061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed6d7413173eb6caaab948e40b53c8cdb31de061"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "5c393a878aec7ceaab25f97621552f3c2f2f715e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6b7c09886bd1c966abfd9bb13be2a86ba960c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6b7c09886bd1c966abfd9bb13be2a86ba960c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d6b7c09886bd1c966abfd9bb13be2a86ba960c2", "patch": "@@ -1,3 +1,8 @@\n+2003-07-23  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/11607 and PR target/11516\n+\t* pa.md (extzv, extv, insv): Revert latter half of last patch.\n+\n 2003-07-22  Mark Mitchell  <mark@codesourcery.com>\n \n \t* fold-const.c (force_fit_type): Handle OFFSET_TYPE."}, {"sha": "053775687e560279acc967e6917cb7b4f265a265", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 18, "deletions": 33, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6b7c09886bd1c966abfd9bb13be2a86ba960c2/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6b7c09886bd1c966abfd9bb13be2a86ba960c2/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=9d6b7c09886bd1c966abfd9bb13be2a86ba960c2", "patch": "@@ -7158,17 +7158,12 @@\n     FAIL;\n \n   if (TARGET_64BIT)\n-    {\n-      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 64\n-          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 63)\n-\tFAIL;\n-      emit_insn (gen_extzv_64 (operands[0], operands[1],\n-\t\t\t       operands[2], operands[3]));\n-    }\n+    emit_insn (gen_extzv_64 (operands[0], operands[1],\n+\t\t\t     operands[2], operands[3]));\n   else\n     {\n-      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 32\n-          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 31)\n+      if (! uint5_operand (operands[2], SImode)\n+\t  || ! uint5_operand (operands[3], SImode))\n \tFAIL;\n       emit_insn (gen_extzv_32 (operands[0], operands[1],\n \t\t\t       operands[2], operands[3]));\n@@ -7179,8 +7174,8 @@\n (define_insn \"extzv_32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"uint32_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"uint32_operand\" \"\")))]\n+\t\t\t (match_operand:SI 2 \"uint5_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"uint5_operand\" \"\")))]\n   \"\"\n   \"{extru|extrw,u} %1,%3+%2-1,%2,%0\"\n   [(set_attr \"type\" \"shift\")\n@@ -7229,17 +7224,12 @@\n     FAIL;\n \n   if (TARGET_64BIT)\n-    {\n-      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 64\n-          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 63)\n-\tFAIL;\n-      emit_insn (gen_extv_64 (operands[0], operands[1],\n-\t\t\t      operands[2], operands[3]));\n-    }\n+    emit_insn (gen_extv_64 (operands[0], operands[1],\n+\t\t\t    operands[2], operands[3]));\n   else\n     {\n-      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 32\n-          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 31)\n+      if (! uint5_operand (operands[2], SImode)\n+\t  || ! uint5_operand (operands[3], SImode))\n \tFAIL;\n       emit_insn (gen_extv_32 (operands[0], operands[1],\n \t\t\t      operands[2], operands[3]));\n@@ -7250,8 +7240,8 @@\n (define_insn \"extv_32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"uint32_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"uint32_operand\" \"\")))]\n+\t\t\t (match_operand:SI 2 \"uint5_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"uint5_operand\" \"\")))]\n   \"\"\n   \"{extrs|extrw,s} %1,%3+%2-1,%2,%0\"\n   [(set_attr \"type\" \"shift\")\n@@ -7297,17 +7287,12 @@\n   \"\n {\n   if (TARGET_64BIT)\n-    {\n-      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 64\n-          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 63)\n-\tFAIL;\n-      emit_insn (gen_insv_64 (operands[0], operands[1],\n-\t\t\t      operands[2], operands[3]));\n-    }\n+    emit_insn (gen_insv_64 (operands[0], operands[1],\n+\t\t\t    operands[2], operands[3]));\n   else\n     {\n-      if ((unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 32\n-          || (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > 31)\n+      if (! uint5_operand (operands[2], SImode)\n+\t  || ! uint5_operand (operands[3], SImode))\n \tFAIL;\n       emit_insn (gen_insv_32 (operands[0], operands[1],\n \t\t\t      operands[2], operands[3]));\n@@ -7317,8 +7302,8 @@\n \n (define_insn \"insv_32\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r,r\")\n-\t\t\t (match_operand:SI 1 \"uint32_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"uint32_operand\" \"\"))\n+\t\t\t (match_operand:SI 1 \"uint5_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"uint5_operand\" \"\"))\n \t(match_operand:SI 3 \"arith5_operand\" \"r,L\"))]\n   \"\"\n   \"@"}]}