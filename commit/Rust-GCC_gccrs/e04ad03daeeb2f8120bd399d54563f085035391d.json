{"sha": "e04ad03daeeb2f8120bd399d54563f085035391d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA0YWQwM2RhZWViMmY4MTIwYmQzOTlkNTQ1NjNmMDg1MDM1MzkxZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-09-01T09:27:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-09-01T09:27:39Z"}, "message": "expr.c (MOVE_BY_PIECES_P, [...]): Pass speed operand.\n\n\n\t* expr.c (MOVE_BY_PIECES_P, CLEAR_BY_PIECES_P, SET_BY_PIECES_P): Pass speed operand.\n\t* expr.h (MOVE_RATIO, CLEAR_RATIO, SET_RATIO): Update.\n\t* gimplify.c (gimplify_init_constructor): Add speed operand.\n\t* tree-sra.c (decide_block_copy): Likewise.\n\t* tree-inline.c (estimate_move_cost): Likewise.\n\t* config/alpha/alpha.h (MOVE_RATIO): Update.\n\t* config/frv/frv.c (MOVE_RATIO): Update.\n\t* config/spu/spu.h (MOVE_RATIO): Update.\n\t* config/sparc/sparc.h (MOVE_RATIO): Update.\n\t* config/i386/i386.h (MOVE_RATIO, CLEAR_RATIO): Update.\n\t* config/m68hc11/m68hc11.h (MOVE_RATIO): Update.\n\t* config/cris/cris.h (MOVE_RATIO): Update.\n\t* config/mn10300/mn10300.h (MOVE_RATIO): Update.\n\t* config/arm/arm.h (MOVE_RATIO): Update.\n\t* config/pa/pa.md: Update uses of MOVE_RATIO\n\t* config/pa/pa.h (MOVE_RATIO): Update.\n\t* config/mips/mips.h (MOVE_RATIO, MOVE_BY_PIECES, CLEAR_RATIO, SET_RATIO): Update.\n\t* config/h8300/h8300.h (MOVE_RATIO): Update.\n\t* config/v850/v850.h (MOVE_RATIO): Update.\n\t* config/bfin/bfin.h (MOVE_RATIO): Update.\n\nFrom-SVN: r139855", "tree": {"sha": "c411e2176e124778ff2eefc610f88cabc4e42a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c411e2176e124778ff2eefc610f88cabc4e42a85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e04ad03daeeb2f8120bd399d54563f085035391d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e04ad03daeeb2f8120bd399d54563f085035391d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e04ad03daeeb2f8120bd399d54563f085035391d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e04ad03daeeb2f8120bd399d54563f085035391d/comments", "author": null, "committer": null, "parents": [{"sha": "e855c69d162c023bae5236ea75bab646c5e84fed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e855c69d162c023bae5236ea75bab646c5e84fed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e855c69d162c023bae5236ea75bab646c5e84fed"}], "stats": {"total": 100, "additions": 61, "deletions": 39}, "files": [{"sha": "b2bbce1a0b78c13b5bfdc667882efaf684790d33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -1,3 +1,26 @@\n+2008-00-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* expr.c (MOVE_BY_PIECES_P, CLEAR_BY_PIECES_P, SET_BY_PIECES_P): Pass speed operand.\n+\t* expr.h (MOVE_RATIO, CLEAR_RATIO, SET_RATIO): Update.\n+\t* gimplify.c (gimplify_init_constructor): Add speed operand.\n+\t* tree-sra.c (decide_block_copy): Likewise.\n+\t* tree-inline.c (estimate_move_cost): Likewise.\n+\t* config/alpha/alpha.h (MOVE_RATIO): Update.\n+\t* config/frv/frv.c (MOVE_RATIO): Update.\n+\t* config/spu/spu.h (MOVE_RATIO): Update.\n+\t* config/sparc/sparc.h (MOVE_RATIO): Update.\n+\t* config/i386/i386.h (MOVE_RATIO, CLEAR_RATIO): Update.\n+\t* config/m68hc11/m68hc11.h (MOVE_RATIO): Update.\n+\t* config/cris/cris.h (MOVE_RATIO): Update.\n+\t* config/mn10300/mn10300.h (MOVE_RATIO): Update.\n+\t* config/arm/arm.h (MOVE_RATIO): Update.\n+\t* config/pa/pa.md: Update uses of MOVE_RATIO\n+\t* config/pa/pa.h (MOVE_RATIO): Update.\n+\t* config/mips/mips.h (MOVE_RATIO, MOVE_BY_PIECES, CLEAR_RATIO, SET_RATIO): Update.\n+\t* config/h8300/h8300.h (MOVE_RATIO): Update.\n+\t* config/v850/v850.h (MOVE_RATIO): Update.\n+\t* config/bfin/bfin.h (MOVE_RATIO): Update.\n+\n 2008-08-31  Andrey Belevantsev  <abel@ispras.ru>\n         Dmitry Melnik  <dm@ispras.ru>\n         Dmitry Zhurikhin  <zhur@ispras.ru>"}, {"sha": "c462f71fb1d066964df91a23fa85a8d28913500e", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -1079,7 +1079,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    Without byte/word accesses, we want no more than four instructions;\n    with, several single byte accesses are better.  */\n \n-#define MOVE_RATIO  (TARGET_BWX ? 7 : 2)\n+#define MOVE_RATIO(speed)  (TARGET_BWX ? 7 : 2)\n \n /* Largest number of bytes of an object that can be placed in a register.\n    On the Alpha we have plenty of registers, so use TImode.  */"}, {"sha": "a8820cbdcb3f9d8a55e5278c2bcd21fb955c9984", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -2244,7 +2244,7 @@ do {\t\t\t\t\t\t\t\\\n #define MOVE_MAX 4\n \n #undef  MOVE_RATIO\n-#define MOVE_RATIO (arm_tune_xscale ? 4 : 2)\n+#define MOVE_RATIO(speed) (arm_tune_xscale ? 4 : 2)\n \n /* Define if operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */"}, {"sha": "4ac369f10ba9de1a24a627467c6eca8f29cfe0ca", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -998,7 +998,7 @@ do {\t\t\t\t\t       \\\n /* If a memory-to-memory move would take MOVE_RATIO or more simple\n    move-instruction pairs, we will do a movmem or libcall instead.  */\n \n-#define MOVE_RATIO 5\n+#define MOVE_RATIO(speed) 5\n \n /* STORAGE LAYOUT: target machine storage layout\n    Define this macro as a C expression which is nonzero if accessing"}, {"sha": "ed1ec3deb062e6a8fc04371b963b168d6a2ecdec", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -1242,7 +1242,7 @@ struct cum_args {int regs;};\n    word-length sizes will be emitted.  The \"9\" will translate to\n    (9 - 1) * 4 = 32 bytes maximum moved, but using 16 instructions\n    (8 instruction sequences) or less.  */\n-#define MOVE_RATIO 9\n+#define MOVE_RATIO(speed) 9\n \n \n /* Node: Sections */"}, {"sha": "4edbb2f6ba2e86e0bbbc26af8ff714581544b254", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -1189,10 +1189,8 @@ struct cum_arg\n #define FINAL_PRESCAN_INSN(insn, operand, nop)\t\\\n   final_prescan_insn (insn, operand, nop)\n \n-#define MOVE_RATIO 3\n extern int h8300_move_ratio;\n-#undef  MOVE_RATIO\n-#define MOVE_RATIO h8300_move_ratio\n+#define MOVE_RATIO(speed) h8300_move_ratio\n \n /* Machine-specific symbol_ref flags.  */\n #define SYMBOL_FLAG_FUNCVEC_FUNCTION\t(SYMBOL_FLAG_MACH_DEP << 0)"}, {"sha": "cb1dca7354be57a703c8eabbd0540882db4b38ee", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -1906,12 +1906,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n    If you don't define this, a reasonable default is used.  */\n \n-#define MOVE_RATIO (optimize_size ? 3 : ix86_cost->move_ratio)\n+#define MOVE_RATIO(speed) ((speed) ? ix86_cost->move_ratio : 3)\n \n /* If a clear memory operation would take CLEAR_RATIO or more simple\n    move-instruction sequences, we will do a clrmem or libcall instead.  */\n \n-#define CLEAR_RATIO (optimize_size ? 2 : MIN (6, ix86_cost->move_ratio))\n+#define CLEAR_RATIO(speed) ((speed) ? MIN (6, ix86_cost->move_ratio) : 2)\n \n /* Define if shifts truncate the shift count\n    which implies one can omit a sign-extension or zero-extension"}, {"sha": "302c414bb5ca67b088fe5373a79d634d7eb84349", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -1505,7 +1505,7 @@ do {                                                                    \\\n /* MOVE_RATIO is the number of move instructions that is better than a\n    block move.  Make this small on 6811, since the code size grows very\n    large with each move.  */\n-#define MOVE_RATIO\t\t3\n+#define MOVE_RATIO(speed)\t3\n \n /* Define if shifts truncate the shift count which implies one can omit\n    a sign-extension or zero-extension of a shift count.  */"}, {"sha": "86b886a373f00a88431af21717edd2c1da7d198c", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -2940,7 +2940,7 @@ while (0)\n    we'll have to generate a load/store pair for each, halve the\n    value of MIPS_CALL_RATIO to take that into account.  */\n \n-#define MOVE_RATIO\t\t\t\t\t\\\n+#define MOVE_RATIO(speed)\t\t\t\t\\\n   (HAVE_movmemsi\t\t\t\t\t\\\n    ? MIPS_MAX_MOVE_BYTES_STRAIGHT / MOVE_MAX\t\t\\\n    : MIPS_CALL_RATIO / 2)\n@@ -2961,20 +2961,20 @@ while (0)\n \t  ? (SIZE) < UNITS_PER_WORD\t\t\t\t\\\n \t  : (SIZE) <= MIPS_MAX_MOVE_BYTES_STRAIGHT))\t\t\\\n    : (move_by_pieces_ninsns (SIZE, ALIGN, MOVE_MAX_PIECES + 1)\t\\\n-      < (unsigned int) MOVE_RATIO))\n+      < (unsigned int) MOVE_RATIO (false)))\n \n /* For CLEAR_RATIO, when optimizing for size, give a better estimate\n    of the length of a memset call, but use the default otherwise.  */\n \n-#define CLEAR_RATIO \\\n-  (optimize_size ? MIPS_CALL_RATIO : 15)\n+#define CLEAR_RATIO(speed)\\\n+  ((speed) ? 15 : MIPS_CALL_RATIO)\n \n /* This is similar to CLEAR_RATIO, but for a non-zero constant, so when\n    optimizing for size adjust the ratio to account for the overhead of\n    loading the constant and replicating it across the word.  */\n \n-#define SET_RATIO \\\n-  (optimize_size ? MIPS_CALL_RATIO - 2 : 15)\n+#define SET_RATIO(speed) \\\n+  ((speed) ? 15 : MIPS_CALL_RATIO - 2)\n \n /* STORE_BY_PIECES_P can be used when copying a constant string, but\n    in that case each word takes 3 insns (lui, ori, sw), or more in"}, {"sha": "c1c8057942778f1cb66cd4325dfd16c86d830645", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -814,7 +814,7 @@ while (0)\n \n /* According expr.c, a value of around 6 should minimize code size, and\n    for the MN10300 series, that's our primary concern.  */\n-#define MOVE_RATIO 6\n+#define MOVE_RATIO(speed) 6\n \n #define TEXT_SECTION_ASM_OP \"\\t.section .text\"\n #define DATA_SECTION_ASM_OP \"\\t.section .data\""}, {"sha": "2966a42ddb2fd427a0e54be999011ac528617c84", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -1506,7 +1506,7 @@ do { \t\t\t\t\t\t\t\t\t\\\n    arguments passed in registers to avoid infinite recursion during argument\n    setup for a function call.  Why?  Consider how we copy the stack slots\n    reserved for parameters when they may be trashed by a call.  */\n-#define MOVE_RATIO (TARGET_64BIT ? 8 : 4)\n+#define MOVE_RATIO(speed) (TARGET_64BIT ? 8 : 4)\n \n /* Define if operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */"}, {"sha": "b50ab4cb6e3b1fc625d2f468db320a0d1ef0c17a", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -3487,7 +3487,7 @@\n     FAIL;\n \n   /* This does happen, but not often enough to worry much about.  */\n-  if (size / align < MOVE_RATIO)\n+  if (size / align < MOVE_RATIO (optimize_insn_for_speed_p ()))\n     FAIL;\n   \n   /* Fall through means we're going to use our block move pattern.  */\n@@ -3675,7 +3675,7 @@\n     FAIL;\n \n   /* This does happen, but not often enough to worry much about.  */\n-  if (size / align < MOVE_RATIO)\n+  if (size / align < MOVE_RATIO (optimize_insn_for_speed_p ()))\n     FAIL;\n   \n   /* Fall through means we're going to use our block move pattern.  */\n@@ -3842,7 +3842,7 @@\n     FAIL;\n \n   /* This does happen, but not often enough to worry much about.  */\n-  if (size / align < MOVE_RATIO)\n+  if (size / align < MOVE_RATIO (optimize_insn_for_speed_p ()))\n     FAIL;\n   \n   /* Fall through means we're going to use our block clear pattern.  */\n@@ -3956,7 +3956,7 @@\n     FAIL;\n \n   /* This does happen, but not often enough to worry much about.  */\n-  if (size / align < MOVE_RATIO)\n+  if (size / align < MOVE_RATIO (optimize_insn_for_speed_p ()))\n     FAIL;\n   \n   /* Fall through means we're going to use our block clear pattern.  */"}, {"sha": "32ec03624bb5b1820a8c1109331d90b1d8008976", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -872,7 +872,7 @@ extern struct rtx_def *s390_compare_op0, *s390_compare_op1, *s390_compare_emitte\n    in tree-sra with UNITS_PER_WORD to make a decision so we adjust it\n    here to compensate for that factor since mvc costs exactly the same\n    on 31 and 64 bit.  */\n-#define MOVE_RATIO (TARGET_64BIT? 2 : 4)\n+#define MOVE_RATIO(speed) (TARGET_64BIT? 2 : 4)\n \n \n /* Sections.  */"}, {"sha": "2e39082e1f64b3f991e859031310a17487906f26", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -2099,7 +2099,7 @@ do {                                                                    \\\n /* If a memory-to-memory move would take MOVE_RATIO or more simple\n    move-instruction pairs, we will do a movmem or libcall instead.  */\n \n-#define MOVE_RATIO (optimize_size ? 3 : 8)\n+#define MOVE_RATIO(speed) ((speed) ? 8 : 3)\n \n /* Define if operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */"}, {"sha": "9839822885e842420e984e03739e47ff969b0cbd", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -438,7 +438,7 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \n #define SLOW_BYTE_ACCESS 0\n \n-#define MOVE_RATIO 32\n+#define MOVE_RATIO(speed) 32\n \n #define NO_FUNCTION_CSE\n "}, {"sha": "65e731fef796faef8725c4c229c6ecfcd6533b17", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -865,7 +865,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* According expr.c, a value of around 6 should minimize code size, and\n    for the V850 series, that's our primary concern.  */\n-#define MOVE_RATIO 6\n+#define MOVE_RATIO(speed) 6\n \n /* Indirect calls are expensive, never turn a direct call\n    into an indirect call.  */"}, {"sha": "69b40d8af7a49aa624ef86b015e0e821aecf0e24", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -175,31 +175,31 @@ static bool float_extend_from_mem[NUM_MACHINE_MODES][NUM_MACHINE_MODES];\n #ifndef MOVE_BY_PIECES_P\n #define MOVE_BY_PIECES_P(SIZE, ALIGN) \\\n   (move_by_pieces_ninsns (SIZE, ALIGN, MOVE_MAX_PIECES + 1) \\\n-   < (unsigned int) MOVE_RATIO)\n+   < (unsigned int) MOVE_RATIO (optimize_insn_for_speed_p ()))\n #endif\n \n /* This macro is used to determine whether clear_by_pieces should be\n    called to clear storage.  */\n #ifndef CLEAR_BY_PIECES_P\n #define CLEAR_BY_PIECES_P(SIZE, ALIGN) \\\n   (move_by_pieces_ninsns (SIZE, ALIGN, STORE_MAX_PIECES + 1) \\\n-   < (unsigned int) CLEAR_RATIO)\n+   < (unsigned int) CLEAR_RATIO (optimize_insn_for_speed_p ()))\n #endif\n \n /* This macro is used to determine whether store_by_pieces should be\n    called to \"memset\" storage with byte values other than zero.  */\n #ifndef SET_BY_PIECES_P\n #define SET_BY_PIECES_P(SIZE, ALIGN) \\\n   (move_by_pieces_ninsns (SIZE, ALIGN, STORE_MAX_PIECES + 1) \\\n-   < (unsigned int) SET_RATIO)\n+   < (unsigned int) SET_RATIO (optimize_insn_for_speed_p ()))\n #endif\n \n /* This macro is used to determine whether store_by_pieces should be\n    called to \"memcpy\" storage when the source is a constant string.  */\n #ifndef STORE_BY_PIECES_P\n #define STORE_BY_PIECES_P(SIZE, ALIGN) \\\n   (move_by_pieces_ninsns (SIZE, ALIGN, STORE_MAX_PIECES + 1) \\\n-   < (unsigned int) MOVE_RATIO)\n+   < (unsigned int) MOVE_RATIO (optimize_insn_for_speed_p ()))\n #endif\n \n /* This array records the insn_code of insns to perform block moves.  */"}, {"sha": "48e0e2d6dcddaeda7e71993f692b71fbff0a97e9", "filename": "gcc/expr.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -66,10 +66,10 @@ enum expand_modifier {EXPAND_NORMAL = 0, EXPAND_STACK_PARM, EXPAND_SUM,\n \n #ifndef MOVE_RATIO\n #if defined (HAVE_movmemqi) || defined (HAVE_movmemhi) || defined (HAVE_movmemsi) || defined (HAVE_movmemdi) || defined (HAVE_movmemti)\n-#define MOVE_RATIO 2\n+#define MOVE_RATIO(speed) 2\n #else\n /* If we are optimizing for space (-Os), cut down the default move ratio.  */\n-#define MOVE_RATIO (optimize_size ? 3 : 15)\n+#define MOVE_RATIO(speed) ((speed) ? 15 : 3)\n #endif\n #endif\n \n@@ -78,18 +78,18 @@ enum expand_modifier {EXPAND_NORMAL = 0, EXPAND_STACK_PARM, EXPAND_SUM,\n \n #ifndef CLEAR_RATIO\n #if defined (HAVE_setmemqi) || defined (HAVE_setmemhi) || defined (HAVE_setmemsi) || defined (HAVE_setmemdi) || defined (HAVE_setmemti)\n-#define CLEAR_RATIO 2\n+#define CLEAR_RATIO(speed) 2\n #else\n /* If we are optimizing for space, cut down the default clear ratio.  */\n-#define CLEAR_RATIO (optimize_size ? 3 : 15)\n+#define CLEAR_RATIO(speed) ((speed) ? 15 :3)\n #endif\n #endif\n \n /* If a memory set (to value other than zero) operation would take\n    SET_RATIO or more simple move-instruction sequences, we will do a movmem\n    or libcall instead.  */\n #ifndef SET_RATIO\n-#define SET_RATIO MOVE_RATIO\n+#define SET_RATIO(speed) MOVE_RATIO(speed)\n #endif\n \f\n enum direction {none, upward, downward};"}, {"sha": "0515aac6198c4e963d21f538f35b6489a8b539a0", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -3595,7 +3595,8 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tif (num_type_elements < 0 && int_size_in_bytes (type) >= 0)\n \t  cleared = true;\n \t/* If there are \"lots\" of zeros, then block clear the object first.  */\n-\telse if (num_type_elements - num_nonzero_elements > CLEAR_RATIO\n+\telse if (num_type_elements - num_nonzero_elements\n+\t\t > CLEAR_RATIO (optimize_function_for_speed_p (cfun))\n \t\t && num_nonzero_elements < num_type_elements/4)\n \t  cleared = true;\n \t/* ??? This bit ought not be needed.  For any element not present"}, {"sha": "5919b2be0c2dcddb766d14de8186d41d01fa4625", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -2614,7 +2614,7 @@ estimate_move_cost (tree type)\n \n   size = int_size_in_bytes (type);\n \n-  if (size < 0 || size > MOVE_MAX_PIECES * MOVE_RATIO)\n+  if (size < 0 || size > MOVE_MAX_PIECES * MOVE_RATIO (!optimize_size))\n     /* Cost of a memcpy call, 3 arguments and the call.  */\n     return 4;\n   else"}, {"sha": "ea351ea97661baff0ce53a30a9643c60ddce2546", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04ad03daeeb2f8120bd399d54563f085035391d/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=e04ad03daeeb2f8120bd399d54563f085035391d", "patch": "@@ -1902,10 +1902,10 @@ decide_block_copy (struct sra_elt *elt)\n \t     sensible default.  */\n \t  max_size = SRA_MAX_STRUCTURE_SIZE\n \t    ? SRA_MAX_STRUCTURE_SIZE\n-\t    : MOVE_RATIO * UNITS_PER_WORD;\n+\t    : MOVE_RATIO (optimize_function_for_speed_p (cfun)) * UNITS_PER_WORD;\n \t  max_count = SRA_MAX_STRUCTURE_COUNT\n \t    ? SRA_MAX_STRUCTURE_COUNT\n-\t    : MOVE_RATIO;\n+\t    : MOVE_RATIO (optimize_function_for_speed_p (cfun));\n \n \t  full_size = tree_low_cst (size_tree, 1);\n \t  full_count = count_type_elements (elt->type, false);"}]}