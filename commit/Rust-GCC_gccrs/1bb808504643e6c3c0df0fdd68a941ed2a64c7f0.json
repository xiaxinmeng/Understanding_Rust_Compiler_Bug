{"sha": "1bb808504643e6c3c0df0fdd68a941ed2a64c7f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJiODA4NTA0NjQzZTZjM2MwZGYwZmRkNjhhOTQxZWQyYTY0YzdmMA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-05-31T19:30:10Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-05-31T19:48:09Z"}, "message": "coroutines: Avoid functions with unlowered coroutine trees [PR95087].\n\nDiagnosing bad uses of 'return' in coroutines is somewhat\ntricky, since the user can use the keyword before we know\nthat the function is a coroutine (where such returns are not\npermitted).  At present, we are just doing a check for any\nuse of 'return' and erroring on that.  However, we can't then\npass the function body on, since it will contain unlowered\ncoroutine trees.\n\nThis avoids the issue by dropping the entire function body\nunder that circumstance.  We could do better (for 11) but\nthis is intended to allow back-port of other fixes to 10.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95087\n\t* coroutines.cc (morph_fn_to_coro): If we see an\n\tearly fatal error, drop the erroneous function body.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95087\n\t* g++.dg/coroutines/co-return-syntax-08-bad-return.C:\n\tAdjust the testcase to do the compile (rather than an\n\t-fsyntax-only parse).", "tree": {"sha": "d4956b7cc16c35486c22497f2f76517b142632ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4956b7cc16c35486c22497f2f76517b142632ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bb808504643e6c3c0df0fdd68a941ed2a64c7f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb808504643e6c3c0df0fdd68a941ed2a64c7f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb808504643e6c3c0df0fdd68a941ed2a64c7f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb808504643e6c3c0df0fdd68a941ed2a64c7f0/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7248bf60a27379c5f6bf863d7935f186b351580b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7248bf60a27379c5f6bf863d7935f186b351580b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7248bf60a27379c5f6bf863d7935f186b351580b"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "0abc579e0cb7fc5f7cf8f51dc0a3dcc66dec6ec0", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb808504643e6c3c0df0fdd68a941ed2a64c7f0/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb808504643e6c3c0df0fdd68a941ed2a64c7f0/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=1bb808504643e6c3c0df0fdd68a941ed2a64c7f0", "patch": "@@ -3585,6 +3585,9 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t ramp return value, since the user cannot fix this - a 'return' is\n \t not allowed in a coroutine.  */\n       TREE_NO_WARNING (orig) = true;\n+      /* Discard the body, we can't process it further.  */\n+      pop_stmt_list (DECL_SAVED_TREE (orig));\n+      DECL_SAVED_TREE (orig) = push_stmt_list ();\n       return false;\n     }\n "}, {"sha": "9b5375487917391ef97b2ff81403e11bc21244b9", "filename": "gcc/testsuite/g++.dg/coroutines/co-return-syntax-08-bad-return.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb808504643e6c3c0df0fdd68a941ed2a64c7f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-return-syntax-08-bad-return.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb808504643e6c3c0df0fdd68a941ed2a64c7f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-return-syntax-08-bad-return.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-return-syntax-08-bad-return.C?ref=1bb808504643e6c3c0df0fdd68a941ed2a64c7f0", "patch": "@@ -1,4 +1,4 @@\n-//  { dg-additional-options \"-fsyntax-only -w\" }\n+//  { dg-additional-options \"-w\" }\n \n #include \"coro.h\"\n "}]}