{"sha": "df99018275c29e891ebb41634b8a34ad7e6bcfad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY5OTAxODI3NWMyOWU4OTFlYmI0MTYzNGI4YTM0YWQ3ZTZiY2ZhZA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-03-15T23:13:20Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-03-15T23:13:20Z"}, "message": "Implement LWG 2857, {variant,optional,any}::emplace should return the constructed value.\n\nImplement LWG 2857, {variant,optional,any}::emplace should\nreturn the constructed value.\n* include/std/any (emplace(_Args&&...)): Change the return type and\nreturn a reference to the constructed value.\n(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n* include/std/optional (emplace(_Args&&...)): Likewise.\n(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n* include/std/variant (emplace<_Tp>(_Args&&...)): Likewise.\n(emplace<_Tp>(initializer_list<_Up>, _Args&&...)): Likewise.\n(emplace<_Np>(_Args&&...)): Likewise.\n(emplace<_Np>(initializer_list<_Up>, _Args&&...)): Likewise.\n* testsuite/20_util/any/assign/emplace.cc: Add tests for\nchecking the return value of emplace.\n* testsuite/20_util/any/misc/any_cast_neg.cc: Adjust.\n* testsuite/20_util/optional/assignment/6.cc: Add tests for\nchecking the return value of emplace.\n* testsuite/20_util/variant/run.cc: Likewise.\n\nFrom-SVN: r246182", "tree": {"sha": "f3ea96ef5ad56196f35709d8914b3629291eb9a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3ea96ef5ad56196f35709d8914b3629291eb9a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df99018275c29e891ebb41634b8a34ad7e6bcfad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df99018275c29e891ebb41634b8a34ad7e6bcfad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df99018275c29e891ebb41634b8a34ad7e6bcfad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df99018275c29e891ebb41634b8a34ad7e6bcfad/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b8e41e5c236b4d878f56011c4bb68dd396e5e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8e41e5c236b4d878f56011c4bb68dd396e5e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b8e41e5c236b4d878f56011c4bb68dd396e5e9a"}], "stats": {"total": 79, "additions": 68, "deletions": 11}, "files": [{"sha": "ec09ea32053147e59ae56ffc01587253c6ded2f6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=df99018275c29e891ebb41634b8a34ad7e6bcfad", "patch": "@@ -1,3 +1,23 @@\n+2017-03-15  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement LWG 2857, {variant,optional,any}::emplace should\n+\treturn the constructed value.\n+\t* include/std/any (emplace(_Args&&...)): Change the return type and\n+\treturn a reference to the constructed value.\n+\t(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t* include/std/optional (emplace(_Args&&...)): Likewise.\n+\t(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t* include/std/variant (emplace<_Tp>(_Args&&...)): Likewise.\n+\t(emplace<_Tp>(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t(emplace<_Np>(_Args&&...)): Likewise.\n+\t(emplace<_Np>(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t* testsuite/20_util/any/assign/emplace.cc: Add tests for\n+\tchecking the return value of emplace.\n+\t* testsuite/20_util/any/misc/any_cast_neg.cc: Adjust.\n+\t* testsuite/20_util/optional/assignment/6.cc: Add tests for\n+\tchecking the return value of emplace.\n+\t* testsuite/20_util/variant/run.cc: Likewise.\n+\n 2017-03-15\u00a0\u00a0Xi Ruoyao\u00a0\u00a0<ryxi@stu.xidian.edu.cn>\n \n \tPR libstdc++/62045"}, {"sha": "1e84302f0c04b49d41e0b8e6ad237f724501c846", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=df99018275c29e891ebb41634b8a34ad7e6bcfad", "patch": "@@ -268,25 +268,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /// Emplace with an object created from @p __args as the contained object.\n     template <typename _ValueType, typename... _Args>\n-      typename __any_constructible<void,\n+      typename __any_constructible<_Decay<_ValueType>&,\n \t\t\t\t   _Decay<_ValueType>, _Args&&...>::type\n       emplace(_Args&&... __args)\n       {\n \t__do_emplace<_Decay<_ValueType>>\n \t  (std::forward<_Args>(__args)...);\n+\tany::_Arg __arg;\n+\tthis->_M_manager(any::_Op_access, this, &__arg);\n+\treturn *static_cast<_Decay<_ValueType>*>(__arg._M_obj);\n       }\n \n     /// Emplace with an object created from @p __il and @p __args as\n     /// the contained object.\n     template <typename _ValueType, typename _Up, typename... _Args>\n-      typename __any_constructible<void,\n+      typename __any_constructible<_Decay<_ValueType>&,\n \t\t\t\t   _Decay<_ValueType>,\n \t\t\t\t   initializer_list<_Up>,\n \t\t\t\t   _Args&&...>::type\n       emplace(initializer_list<_Up> __il, _Args&&... __args)\n       {\n \t__do_emplace<_Decay<_ValueType>, _Up>\n \t  (__il, std::forward<_Args>(__args)...);\n+\tany::_Arg __arg;\n+\tthis->_M_manager(any::_Op_access, this, &__arg);\n+\treturn *static_cast<_Decay<_ValueType>*>(__arg._M_obj);\n       }\n \n     // modifiers"}, {"sha": "3f540ec14b7747b0a377247c7c3d8520c7a964d4", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=df99018275c29e891ebb41634b8a34ad7e6bcfad", "patch": "@@ -592,20 +592,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         }\n \n       template<typename... _Args>\n-\tenable_if_t<is_constructible<_Tp, _Args&&...>::value>\n+\tenable_if_t<is_constructible<_Tp, _Args&&...>::value, _Tp&>\n \templace(_Args&&... __args)\n \t{\n \t  this->_M_reset();\n \t  this->_M_construct(std::forward<_Args>(__args)...);\n+\t  return this->_M_get();\n \t}\n \n       template<typename _Up, typename... _Args>\n \tenable_if_t<is_constructible<_Tp, initializer_list<_Up>&,\n-\t\t\t\t     _Args&&...>::value>\n+\t\t\t\t     _Args&&...>::value, _Tp&>\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n \t{\n \t  this->_M_reset();\n \t  this->_M_construct(__il, std::forward<_Args>(__args)...);\n+\t  return this->_M_get();\n \t}\n \n       // Destructor is implicit, implemented in _Optional_base."}, {"sha": "58bf8c7b017a48e0858656f4a6b8d7856a3bc7c0", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=df99018275c29e891ebb41634b8a34ad7e6bcfad", "patch": "@@ -1007,25 +1007,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Tp, typename... _Args>\n-\tenable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>>\n+\tenable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,\n+\t\t    _Tp&>\n \templace(_Args&&... __args)\n \t{\n-\t  this->emplace<__index_of<_Tp>>(std::forward<_Args>(__args)...);\n+\t  auto& ret =\n+\t    this->emplace<__index_of<_Tp>>(std::forward<_Args>(__args)...);\n \t  __glibcxx_assert(holds_alternative<_Tp>(*this));\n+\t  return ret;\n \t}\n \n       template<typename _Tp, typename _Up, typename... _Args>\n \tenable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>\n-\t\t    && __exactly_once<_Tp>>\n+\t\t    && __exactly_once<_Tp>,\n+\t\t    _Tp&>\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n \t{\n-\t  this->emplace<__index_of<_Tp>>(__il, std::forward<_Args>(__args)...);\n+\t  auto& ret =\n+\t    this->emplace<__index_of<_Tp>>(__il,\n+\t\t\t\t\t   std::forward<_Args>(__args)...);\n \t  __glibcxx_assert(holds_alternative<_Tp>(*this));\n+\t  return ret;\n \t}\n \n       template<size_t _Np, typename... _Args>\n \tenable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,\n-\t\t\t\t       _Args...>>\n+\t\t\t\t       _Args...>,\n+\t\t    variant_alternative_t<_Np, variant>&>\n \templace(_Args&&... __args)\n \t{\n \t  static_assert(_Np < sizeof...(_Types),\n@@ -1042,11 +1050,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      __throw_exception_again;\n \t    }\n \t  __glibcxx_assert(index() == _Np);\n+\t  return std::get<_Np>(*this);\n \t}\n \n       template<size_t _Np, typename _Up, typename... _Args>\n \tenable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,\n-\t\t\t\t       initializer_list<_Up>&, _Args...>>\n+\t\t\t\t       initializer_list<_Up>&, _Args...>,\n+\t\t    variant_alternative_t<_Np, variant>&>\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n \t{\n \t  static_assert(_Np < sizeof...(_Types),\n@@ -1063,6 +1073,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      __throw_exception_again;\n \t    }\n \t  __glibcxx_assert(index() == _Np);\n+\t  return std::get<_Np>(*this);\n \t}\n \n       constexpr bool valueless_by_exception() const noexcept"}, {"sha": "119104bf553ae8352a000a8ea51ef1013cdfd14f", "filename": "libstdc++-v3/testsuite/20_util/any/assign/emplace.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc?ref=df99018275c29e891ebb41634b8a34ad7e6bcfad", "patch": "@@ -72,4 +72,8 @@ int main()\n   std::any o10;\n   o10.emplace<char*>(nullptr);\n   VERIFY(o9.type() == o10.type());\n+  std::any o11;\n+  VERIFY(&o11.emplace<int>(42) == &std::any_cast<int&>(o11));\n+  VERIFY(&o11.emplace<std::vector<int>>({1,2,3}) ==\n+\t &std::any_cast<std::vector<int>&>(o11));\n }"}, {"sha": "2d2b3d3d14c7321c59b87e6813b2cbcfa55d79e2", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=df99018275c29e891ebb41634b8a34ad7e6bcfad", "patch": "@@ -26,5 +26,5 @@ void test01()\n   using std::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"invalid static_cast\" \"\" { target { *-*-* } } 455 }\n+  any_cast<int&>(y); // { dg-error \"invalid static_cast\" \"\" { target { *-*-* } } 461 }\n }"}, {"sha": "40a537a050754a11c556c3d29b1a85c659080804", "filename": "libstdc++-v3/testsuite/20_util/optional/assignment/6.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F6.cc?ref=df99018275c29e891ebb41634b8a34ad7e6bcfad", "patch": "@@ -76,6 +76,11 @@ int main()\n     o.emplace({ 'a' }, \"\");\n     VERIFY( o && o->state == 2 );\n   }\n+  {\n+    O o;\n+    VERIFY(&o.emplace(0) == &*o);\n+    VERIFY(&o.emplace({ 'a' }, \"\") == &*o);\n+  }\n \n   static_assert( !std::is_constructible<O, std::initializer_list<int>, int>(), \"\" );\n "}, {"sha": "c6c2bc9dc31942e64aceb6c1e1e244354247b41e", "filename": "libstdc++-v3/testsuite/20_util/variant/run.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df99018275c29e891ebb41634b8a34ad7e6bcfad/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc?ref=df99018275c29e891ebb41634b8a34ad7e6bcfad", "patch": "@@ -189,6 +189,15 @@ void emplace()\n     try { v.emplace<1>(AlwaysThrow{}); } catch (nullptr_t) { }\n     VERIFY(v.valueless_by_exception());\n   }\n+  VERIFY(&v.emplace<0>(1) == &std::get<0>(v));\n+  VERIFY(&v.emplace<int>(1) == &std::get<int>(v));\n+  VERIFY(&v.emplace<1>(\"a\") == &std::get<1>(v));\n+  VERIFY(&v.emplace<string>(\"a\") == &std::get<string>(v));\n+  {\n+    variant<vector<int>> v;\n+    VERIFY(&v.emplace<0>({1,2,3}) == &std::get<0>(v));\n+    VERIFY(&v.emplace<vector<int>>({1,2,3}) == &std::get<vector<int>>(v));\n+  }\n }\n \n void test_get()"}]}