{"sha": "b79c52841bdf69b9788387c9d835d854de09dcb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc5YzUyODQxYmRmNjliOTc4ODM4N2M5ZDgzNWQ4NTRkZTA5ZGNiNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-01T09:54:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-01T09:54:20Z"}, "message": "function.h (struct function): Remove x_function_call_count.\n\n        * function.h (struct function): Remove x_function_call_count.\n        (function_call_count): Remove.\n        * calls.c (expand_call): Don't set it.\n        * integrate.c (copy_rtx_and_substitute): Likewise.\n\n        * function.h (struct function): Remove x_cleanup_label.\n        (cleanup_label): Remove.\n        * stmt.c (expand_value_return): Don't use it.\n        * function.c (free_after_compilation): Don't set it.\n        (expand_function_start): Likewise.  Remove parms_have_cleanups arg.\n        * cfgexpand.c (tree_expand_cfg): Update call.\n        * tree.h (expand_function_start): Update decl.\n\nFrom-SVN: r83966", "tree": {"sha": "cb23537d10ab4a9a66cb83603753157467408971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb23537d10ab4a9a66cb83603753157467408971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b79c52841bdf69b9788387c9d835d854de09dcb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b79c52841bdf69b9788387c9d835d854de09dcb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b79c52841bdf69b9788387c9d835d854de09dcb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b79c52841bdf69b9788387c9d835d854de09dcb5/comments", "author": null, "committer": null, "parents": [{"sha": "ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b"}], "stats": {"total": 52, "additions": 19, "deletions": 33}, "files": [{"sha": "12144e81dbb9e01e76376d2998e685d175be4872", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b79c52841bdf69b9788387c9d835d854de09dcb5", "patch": "@@ -1,3 +1,18 @@\n+2004-07-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* function.h (struct function): Remove x_function_call_count.\n+\t(function_call_count): Remove.\n+\t* calls.c (expand_call): Don't set it.\n+\t* integrate.c (copy_rtx_and_substitute): Likewise.\n+\n+\t* function.h (struct function): Remove x_cleanup_label.\n+\t(cleanup_label): Remove.\n+\t* stmt.c (expand_value_return): Don't use it.\n+\t* function.c (free_after_compilation): Don't set it.\n+\t(expand_function_start): Likewise.  Remove parms_have_cleanups arg.\n+\t* cfgexpand.c (tree_expand_cfg): Update call.\n+\t* tree.h (expand_function_start): Update decl.\n+\n 2004-07-01  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/1027"}, {"sha": "43966a6f8cb55a4dfcd249d7e80645ae9e81b2a2", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=b79c52841bdf69b9788387c9d835d854de09dcb5", "patch": "@@ -2488,8 +2488,6 @@ expand_call (tree exp, rtx target, int ignore)\n \n   preferred_unit_stack_boundary = preferred_stack_boundary / BITS_PER_UNIT;\n \n-  function_call_count++;\n-\n   /* We want to make two insn chains; one for a sibling call, the other\n      for a normal call.  We will select one of the two chains after\n      initial RTL generation is complete.  */"}, {"sha": "ac76ca3794443ef40468d0fd6d1884c2833b9205", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=b79c52841bdf69b9788387c9d835d854de09dcb5", "patch": "@@ -419,7 +419,7 @@ tree_expand_cfg (void)\n   expand_used_vars ();\n \n   /* Set up parameters and prepare for return, for the function.  */\n-  expand_function_start (current_function_decl, 0);\n+  expand_function_start (current_function_decl);\n \n   /* If this function is `main', emit a call to `__main'\n      to run global initializers, etc.  */"}, {"sha": "aa6cdad5ace15656b61b47bc26142978cf13e406", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b79c52841bdf69b9788387c9d835d854de09dcb5", "patch": "@@ -436,7 +436,6 @@ free_after_compilation (struct function *f)\n   f->return_rtx = NULL;\n   f->internal_arg_pointer = NULL;\n   f->x_nonlocal_goto_handler_labels = NULL;\n-  f->x_cleanup_label = NULL;\n   f->x_return_label = NULL;\n   f->x_naked_return_label = NULL;\n   f->x_save_expr_regs = NULL;\n@@ -6310,7 +6309,7 @@ expand_pending_sizes (tree pending_sizes)\n    the function's parameters, which must be run at any return statement.  */\n \n void\n-expand_function_start (tree subr, int parms_have_cleanups)\n+expand_function_start (tree subr)\n {\n   /* Make sure volatile mem refs aren't considered\n      valid operands of arithmetic insns.  */\n@@ -6323,14 +6322,6 @@ expand_function_start (tree subr, int parms_have_cleanups)\n   current_function_limit_stack\n     = (stack_limit_rtx != NULL_RTX && ! DECL_NO_LIMIT_STACK (subr));\n \n-  /* If the parameters of this function need cleaning up, get a label\n-     for the beginning of the code which executes those cleanups.  This must\n-     be done before doing anything with return_label.  */\n-  if (parms_have_cleanups)\n-    cleanup_label = gen_label_rtx ();\n-  else\n-    cleanup_label = 0;\n-\n   /* Make the label for return statements to jump to.  Do not special\n      case machines with special return instructions -- they will be\n      handled later during jump, ifcvt, or epilogue creation.  */"}, {"sha": "64c02d0b9ee25ff3743364f06de3f2cf5d2ca8f7", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=b79c52841bdf69b9788387c9d835d854de09dcb5", "patch": "@@ -236,19 +236,10 @@ struct function GTY(())\n      has_hard_reg_initial_val (see integrate.[hc]).  */\n   struct initial_value_struct *hard_reg_initial_vals;\n \n-  /* Number of function calls seen so far in current function.  */\n-  int x_function_call_count;\n-\n   /* List (chain of EXPR_LIST) of labels heading the current handlers for\n      nonlocal gotos.  */\n   rtx x_nonlocal_goto_handler_labels;\n \n-  /* Label that will go on parm cleanup code, if any.\n-     Jumping to this label runs cleanup code for parameters, if\n-     such code must be run.  Following this code is the logical return\n-     label.  */\n-  rtx x_cleanup_label;\n-\n   /* Label that will go on function epilogue.\n      Jumping to this label serves as a \"return\" instruction\n      on machines which require execution of the epilogue on all returns.  */\n@@ -523,7 +514,6 @@ extern int trampolines_created;\n \n #define max_parm_reg (cfun->x_max_parm_reg)\n #define parm_reg_stack_loc (cfun->x_parm_reg_stack_loc)\n-#define cleanup_label (cfun->x_cleanup_label)\n #define return_label (cfun->x_return_label)\n #define naked_return_label (cfun->x_naked_return_label)\n #define save_expr_regs (cfun->x_save_expr_regs)\n@@ -533,7 +523,6 @@ extern int trampolines_created;\n #define tail_recursion_reentry (cfun->x_tail_recursion_reentry)\n #define arg_pointer_save_area (cfun->x_arg_pointer_save_area)\n #define rtl_expr_chain (cfun->x_rtl_expr_chain)\n-#define function_call_count (cfun->x_function_call_count)\n #define used_temp_slots (cfun->x_used_temp_slots)\n #define avail_temp_slots (cfun->x_avail_temp_slots)\n #define temp_slot_level (cfun->x_temp_slot_level)"}, {"sha": "ee2c7a7220b96b47ca5743750aaf655f02b7f4bb", "filename": "gcc/integrate.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=b79c52841bdf69b9788387c9d835d854de09dcb5", "patch": "@@ -439,13 +439,6 @@ copy_rtx_and_substitute (rtx orig, struct inline_remap *map, int for_lhs)\n \t   && ! (CODE_LABEL_NUMBER (XEXP (copy, 0)) >= get_first_label_num ()\n \t\t && CODE_LABEL_NUMBER (XEXP (copy, 0)) < max_label_num ()));\n \n-      /* If we have made a nonlocal label local, it means that this\n-\t inlined call will be referring to our nonlocal goto handler.\n-\t So make sure we create one for this block; we normally would\n-\t not since this is not otherwise considered a \"call\".  */\n-      if (LABEL_REF_NONLOCAL_P (orig) && ! LABEL_REF_NONLOCAL_P (copy))\n-\tfunction_call_count++;\n-\n       return copy;\n \n     case PC:"}, {"sha": "affeb9d5b0a136ecd9b949ff9cf353a095e7f49b", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b79c52841bdf69b9788387c9d835d854de09dcb5", "patch": "@@ -2601,7 +2601,7 @@ expand_value_return (rtx val)\n static void\n expand_null_return_1 (rtx last_insn)\n {\n-  rtx end_label = cleanup_label ? cleanup_label : return_label;\n+  rtx end_label = return_label;\n \n   clear_pending_stack_adjust ();\n   do_pending_stack_adjust ();"}, {"sha": "3912faa47491f6a0da9d88c39fc212cd8a29a4c7", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79c52841bdf69b9788387c9d835d854de09dcb5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b79c52841bdf69b9788387c9d835d854de09dcb5", "patch": "@@ -3477,7 +3477,7 @@ extern void type_hash_add (unsigned int, tree);\n extern int simple_cst_list_equal (tree, tree);\n extern void dump_tree_statistics (void);\n extern void expand_function_end (void);\n-extern void expand_function_start (tree, int);\n+extern void expand_function_start (tree);\n extern void expand_pending_sizes (tree);\n extern void recompute_tree_invarant_for_addr_expr (tree);\n extern bool needs_to_live_in_memory (tree);"}]}