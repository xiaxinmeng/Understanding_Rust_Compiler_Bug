{"sha": "9fdac7e16c940fb6264e6ddaf99c761f1a64a054", "node_id": "C_kwDOANBUbNoAKDlmZGFjN2UxNmM5NDBmYjYyNjRlNmRkYWY5OWM3NjFmMWE2NGEwNTQ", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-17T18:39:37Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-24T20:59:57Z"}, "message": "c++: ICE with template code in constexpr [PR104284]\n\nSince r9-6073 cxx_eval_store_expression preevaluates the value to\nbe stored, and that revealed a crash where a template code (here,\ncode=IMPLICIT_CONV_EXPR) leaks into cxx_eval*.\n\nIt happens because we're performing build_vec_init while processing\na template, which calls get_temp_regvar which creates an INIT_EXPR.\nThis INIT_EXPR's RHS contains an rvalue conversion so we create an\nIMPLICIT_CONV_EXPR.  Its operand is not type-dependent and the whole\nINIT_EXPR is not type-dependent.  So we call build_non_dependent_expr\nwhich, with -fchecking=2, calls fold_non_dependent_expr.  At this\npoint the expression still has an IMPLICIT_CONV_EXPR, which ought to\nbe handled in instantiate_non_dependent_expr_internal.  However,\ntsubst_copy_and_build doesn't handle INIT_EXPR; it will just call\ntsubst_copy which does nothing when args is null.  So we fail to\nreplace the IMPLICIT_CONV_EXPR and ICE.\n\nThe problem is that we call build_vec_init in a template in the\nfirst place.  We can avoid doing so by checking p_t_d before\ncalling build_aggr_init in check_initializer.\n\n\tPR c++/104284\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (check_initializer): Don't call build_aggr_init in\n\ta template.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/constexpr-104284-1.C: New test.\n\t* g++.dg/cpp1y/constexpr-104284-2.C: New test.\n\t* g++.dg/cpp1y/constexpr-104284-3.C: New test.\n\t* g++.dg/cpp1y/constexpr-104284-4.C: New test.", "tree": {"sha": "33fae8fdc94ade66fe5fc55a1204b17dfbeb4159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33fae8fdc94ade66fe5fc55a1204b17dfbeb4159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fdac7e16c940fb6264e6ddaf99c761f1a64a054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdac7e16c940fb6264e6ddaf99c761f1a64a054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdac7e16c940fb6264e6ddaf99c761f1a64a054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdac7e16c940fb6264e6ddaf99c761f1a64a054/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346ab5a54a831ad9c78afcbd8dfe98e0e07e3070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346ab5a54a831ad9c78afcbd8dfe98e0e07e3070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346ab5a54a831ad9c78afcbd8dfe98e0e07e3070"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "69f60a6dc0f1f148e27b419dacc31f01cad93d04", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdac7e16c940fb6264e6ddaf99c761f1a64a054/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdac7e16c940fb6264e6ddaf99c761f1a64a054/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=9fdac7e16c940fb6264e6ddaf99c761f1a64a054", "patch": "@@ -7332,6 +7332,10 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t   && !(init && BRACE_ENCLOSED_INITIALIZER_P (init)\n \t\t&& CP_AGGREGATE_TYPE_P (type)\n \t\t&& (CLASS_TYPE_P (type)\n+\t\t    /* The call to build_aggr_init below could end up\n+\t\t       calling build_vec_init, which may break when we\n+\t\t       are processing a template.  */\n+\t\t    || processing_template_decl\n \t\t    || !TYPE_NEEDS_CONSTRUCTING (type)\n \t\t    || type_has_extended_temps (type))))\n \t  || (DECL_DECOMPOSITION_P (decl) && TREE_CODE (type) == ARRAY_TYPE))"}, {"sha": "809c26a616146803cee1f35d87f60c805ee1ea75", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-104284-1.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdac7e16c940fb6264e6ddaf99c761f1a64a054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdac7e16c940fb6264e6ddaf99c761f1a64a054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-1.C?ref=9fdac7e16c940fb6264e6ddaf99c761f1a64a054", "patch": "@@ -0,0 +1,34 @@\n+// PR c++/104284\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-fchecking=2\" }\n+\n+struct S {\n+  char c{};\n+};\n+\n+auto x1 = [](auto) { constexpr S s[]{{}}; };\n+auto x2 = [](auto) { constexpr S s[]{{'a'}}; };\n+#if __cpp_designated_initializers >= 201707L\n+auto x3 = [](auto) { constexpr S s[]{{.c = 'a'}}; };\n+#endif\n+auto x4 = [](auto) { constexpr S s[]{'a'}; };\n+auto x5 = [](auto) { constexpr S s[]{{{}}}; };\n+\n+template<class>\n+constexpr void g ()\n+{\n+  constexpr S s1[]{{}};\n+  static_assert(s1[0].c == '\\0', \"\");\n+  constexpr S s2[]{{'a'}};\n+  static_assert(s2[0].c == 'a', \"\");\n+#if __cpp_designated_initializers >= 201707L\n+  constexpr S s3[]{{.c = 'a'}};\n+  static_assert(s3[0].c == 'a', \"\");\n+#endif\n+  constexpr S s4[]{'a'};\n+  static_assert(s4[0].c == 'a', \"\");\n+  constexpr S s5[]{{{}}};\n+  static_assert(s5[0].c == '\\0', \"\");\n+}\n+\n+static_assert ((g<int>(), true), \"\");"}, {"sha": "704d37de129bb800cd0187abf1eec898c287af5e", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-104284-2.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdac7e16c940fb6264e6ddaf99c761f1a64a054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdac7e16c940fb6264e6ddaf99c761f1a64a054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-2.C?ref=9fdac7e16c940fb6264e6ddaf99c761f1a64a054", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/104284\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-fchecking=2\" }\n+\n+struct S {\n+  char a;\n+  constexpr S() : a{'a'} { }\n+  constexpr S(char a_) : a{a_} { }\n+};\n+\n+auto x1 = [](auto) { constexpr S s[]{{}}; };\n+auto x2 = [](auto) { constexpr S s[]{{'a'}}; };\n+auto x3 = [](auto) { constexpr S s[]{'a'}; };\n+auto x4 = [](auto) { constexpr S s[]{{{}}}; };\n+\n+template<typename>\n+constexpr void g()\n+{\n+  constexpr S s1[]{{}};\n+  static_assert(s1[0].a == 'a', \"\");\n+  constexpr S s2[]{{'a'}};\n+  static_assert(s2[0].a == 'a', \"\");\n+  constexpr S s3[]{'a'};\n+  static_assert(s3[0].a == 'a', \"\");\n+  constexpr S s4[]{{{}}};\n+  static_assert(s4[0].a == '\\0', \"\");\n+}\n+\n+void\n+f ()\n+{\n+  g<int>();\n+}"}, {"sha": "6f23b255f9c02fb5c0ea7557f955c79d1453f823", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-104284-3.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdac7e16c940fb6264e6ddaf99c761f1a64a054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdac7e16c940fb6264e6ddaf99c761f1a64a054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-3.C?ref=9fdac7e16c940fb6264e6ddaf99c761f1a64a054", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/104284\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-fchecking=2\" }\n+// Like constexpr-104284.C, but the function template is not\n+// constexpr.  In that case, we were still calling build_vec_init\n+// in a template, just not crashing.\n+\n+struct S {\n+  char c{};\n+};\n+\n+template<class>\n+void g ()\n+{\n+  constexpr S s1[]{{}};\n+  static_assert(s1[0].c == '\\0', \"\");\n+  constexpr S s2[]{{'a'}};\n+  static_assert(s2[0].c == 'a', \"\");\n+#if __cpp_designated_initializers >= 201707L\n+  constexpr S s3[]{{.c = 'a'}};\n+  static_assert(s3[0].c == 'a', \"\");\n+#endif\n+  constexpr S s4[]{'a'};\n+  static_assert(s4[0].c == 'a', \"\");\n+  constexpr S s5[]{{{}}};\n+  static_assert(s5[0].c == '\\0', \"\");\n+}\n+\n+void\n+f ()\n+{\n+  g<int>();\n+}"}, {"sha": "a99d3255a4756ffddb23e2b96ab98d7dd8e5ccb8", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-104284-4.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdac7e16c940fb6264e6ddaf99c761f1a64a054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdac7e16c940fb6264e6ddaf99c761f1a64a054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-104284-4.C?ref=9fdac7e16c940fb6264e6ddaf99c761f1a64a054", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/104284\n+// { dg-do run { target c++14 } }\n+// { dg-additional-options \"-fchecking=2\" }\n+\n+struct S {\n+  char c{};\n+};\n+\n+template<class>\n+constexpr void g ()\n+{\n+  S s1[]{{}};\n+  if (s1[0].c != '\\0')\n+    __builtin_abort ();\n+  S s2[]{{'a'}};\n+  if (s2[0].c != 'a')\n+    __builtin_abort ();\n+#if __cpp_designated_initializers >= 201707L\n+  S s3[]{{.c = 'a'}};\n+  if (s3[0].c != 'a')\n+    __builtin_abort ();\n+#endif\n+  S s4[]{'a'};\n+  if (s4[0].c != 'a')\n+    __builtin_abort ();\n+  S s5[]{{{}}};\n+  if (s5[0].c != '\\0')\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  g<int>();\n+}"}]}