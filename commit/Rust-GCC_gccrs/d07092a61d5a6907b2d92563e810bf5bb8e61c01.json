{"sha": "d07092a61d5a6907b2d92563e810bf5bb8e61c01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA3MDkyYTYxZDVhNjkwN2IyZDkyNTYzZTgxMGJmNWJiOGU2MWMwMQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-04-30T15:20:42Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-07-04T19:39:10Z"}, "message": "Darwin, config : Adjust X86 biarch definitions ordering [PR100269].\n\nThis reorganises the biarch definitions to cater for the\nmacro changes and removals at r12-36.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\nPR target/100269 - [12 Regression] i686 biarch compiler fails for Darwin after r12-36.\n\n        PR target/100269\n\ngcc/ChangeLog:\n\n\tPR target/100269\n\t* config.gcc: Ensure that Darwin biarch definitions are\n\tadded before i386.h.\n\t* config/i386/darwin.h (TARGET_64BIT): Remove.\n\t(PR80556_WORKAROUND): New.\n\t(REAL_LIBGCC_SPEC): Amend to use PR80556_WORKAROUND.\n\t(DARWIN_SUBARCH_SPEC): New.\n\t* config/i386/darwin32-biarch.h (TARGET_64BIT_DEFAULT,\n\tTARGET_BI_ARCH, PR80556_WORKAROUND): New.\n\t(REAL_LIBGCC_SPEC): Remove.\n\t* config/i386/darwin64-biarch.h (TARGET_64BIT_DEFAULT,\n\tTARGET_BI_ARCH, PR80556_WORKAROUND): New.\n\t(REAL_LIBGCC_SPEC): Remove.", "tree": {"sha": "04d2a76fbe3663a5ccf73f95dd21709764c97922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04d2a76fbe3663a5ccf73f95dd21709764c97922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d07092a61d5a6907b2d92563e810bf5bb8e61c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07092a61d5a6907b2d92563e810bf5bb8e61c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d07092a61d5a6907b2d92563e810bf5bb8e61c01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07092a61d5a6907b2d92563e810bf5bb8e61c01/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6f3adc899aa9c4d925406974b446634e0db9cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f3adc899aa9c4d925406974b446634e0db9cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f3adc899aa9c4d925406974b446634e0db9cd2"}], "stats": {"total": 76, "additions": 29, "deletions": 47}, "files": [{"sha": "f3e94f7c0d8d7a92d4e237525d925b9a06eea6ef", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07092a61d5a6907b2d92563e810bf5bb8e61c01/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07092a61d5a6907b2d92563e810bf5bb8e61c01/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d07092a61d5a6907b2d92563e810bf5bb8e61c01", "patch": "@@ -591,6 +591,8 @@ i[34567]86-*-*)\n \t\texit 1\n \tfi\n \t;;\n+x86_64-*-darwin*)\n+\t;;\n x86_64-*-*)\n \tcase ${with_abi} in\n \t\"\")\n@@ -1837,25 +1839,27 @@ hppa[12]*-*-hpux11*)\n \t\tdwarf2=no\n \tfi\n \t;;\n-i[34567]86-*-darwin1[89]*)\n+i[34567]86-*-darwin1[89]* | i[34567]86-*-darwin2[0-9]*)\n \techo \"Error: 32bit target is not supported after Darwin17\" 1>&2\n \t;;\n i[34567]86-*-darwin*)\n \tneed_64bit_isa=yes\n \t# Baseline choice for a machine that allows m64 support.\n \twith_cpu=${with_cpu:-core2}\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-darwin32-biarch t-slibgcc\"\n-\ttm_file=\"${tm_file} ${cpu_type}/darwin32-biarch.h\"\n+\ttm_file=\"${cpu_type}/darwin32-biarch.h ${tm_file} \"\n \t;;\n x86_64-*-darwin1[89]* | x86_64-*-darwin2[01]*)\n \t# Only 64b from now\n+\ttm_defines=\"${tm_defines} TARGET_64BIT_DEFAULT=(OPTION_MASK_ISA_64BIT|OPTION_MASK_ABI_64)\"\n+\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=0\"\n \twith_cpu=${with_cpu:-core2}\n \ttmake_file=\"${tmake_file} t-slibgcc\"\n \t;;\n x86_64-*-darwin*)\n \twith_cpu=${with_cpu:-core2}\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-darwin64-biarch t-slibgcc\"\n-\ttm_file=\"${tm_file} ${cpu_type}/darwin64-biarch.h\"\n+\ttm_file=\"${cpu_type}/darwin64-biarch.h ${tm_file} \"\n \t;;\n i[34567]86-*-elfiamcu)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h newlib-stdint.h i386/iamcu.h\""}, {"sha": "bac32197e837cbe8003f2ef55b1027e31d118dd4", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07092a61d5a6907b2d92563e810bf5bb8e61c01/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07092a61d5a6907b2d92563e810bf5bb8e61c01/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=d07092a61d5a6907b2d92563e810bf5bb8e61c01", "patch": "@@ -25,15 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef DARWIN_X86\n #define DARWIN_X86 1\n \n-#ifdef IN_LIBGCC2\n-#undef TARGET_64BIT\n-#ifdef __x86_64__\n-#define TARGET_64BIT 1\n-#else\n-#define TARGET_64BIT 0\n-#endif\n-#endif\n-\n /* WORKAROUND pr80556:\n    For x86_64 Darwin10 and later, the unwinder is in libunwind (redirected\n    from libSystem).  This doesn't use the keymgr (see keymgr.c) and therefore\n@@ -44,11 +35,15 @@ along with GCC; see the file COPYING3.  If not see\n    even when static-libgcc is specified.  We put libSystem first so that\n    unwinder symbols are satisfied from there.\n    We default to 64b for single-arch builds, so apply this unconditionally. */\n+#ifndef PR80556_WORKAROUND\n+#define PR80556_WORKAROUND \\\n+\" %:version-compare(>= 10.6 mmacosx-version-min= -lSystem) \"\n+#endif\n #undef REAL_LIBGCC_SPEC\n #define REAL_LIBGCC_SPEC\t\t\t\t\t\t   \\\n-   \"%{static-libgcc|static: \t\t\t\t\t\t   \\\n-       %:version-compare(>= 10.6 mmacosx-version-min= -lSystem)\t\t   \\\n-       -lgcc_eh -lgcc;\t\t\t\t\t\t\t   \\\n+   \"%{static-libgcc|static: \"\t\t\t\t\t\t   \\\n+       PR80556_WORKAROUND\t\t\t\t\t\t   \\\n+      \" -lgcc_eh -lgcc;\t\t\t\t\t\t\t   \\\n       shared-libgcc|fexceptions|fgnu-runtime:\t\t\t\t   \\\n        %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_s.10.4)\t   \\\n        %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n@@ -142,8 +137,11 @@ along with GCC; see the file COPYING3.  If not see\n    %{mpc64:crtprec64.o%s} \\\n    %{mpc80:crtprec80.o%s}\" TM_DESTRUCTOR\n \n+#ifndef DARWIN_ARCH_SPEC\n /* We default to x86_64 for single-arch builds, bi-arch overrides.  */\n #define DARWIN_ARCH_SPEC \"x86_64\"\n+#define DARWIN_SUBARCH_SPEC DARWIN_ARCH_SPEC\n+#endif\n \n #undef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS                                   \\"}, {"sha": "5470edf3f8d903fe4234892a3e7cb9f19db2e3d4", "filename": "gcc/config/i386/darwin32-biarch.h", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07092a61d5a6907b2d92563e810bf5bb8e61c01/gcc%2Fconfig%2Fi386%2Fdarwin32-biarch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07092a61d5a6907b2d92563e810bf5bb8e61c01/gcc%2Fconfig%2Fi386%2Fdarwin32-biarch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin32-biarch.h?ref=d07092a61d5a6907b2d92563e810bf5bb8e61c01", "patch": "@@ -21,6 +21,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef DARWIN_ARCH_SPEC\n #define DARWIN_ARCH_SPEC \"%{m64:x86_64;:i386}\"\n \n+#define TARGET_64BIT_DEFAULT 0\n+#define TARGET_BI_ARCH 1\n+\n /* WORKAROUND pr80556:\n    For x86_64 Darwin10 and later, the unwinder is in libunwind (redirected\n    from libSystem).  This doesn't use the keymgr (see keymgr.c) and therefore\n@@ -30,22 +33,9 @@ along with GCC; see the file COPYING3.  If not see\n    Therefore, for 64b exes at least, we must use the libunwind implementation,\n    even when static-libgcc is specified.  We put libSystem first so that\n    unwinder symbols are satisfied from there. */\n-#undef REAL_LIBGCC_SPEC\n-#define REAL_LIBGCC_SPEC\t\t\t\t\t\t   \\\n-   \"%{static-libgcc|static: \t\t\t\t\t\t   \\\n-      %{m64:%:version-compare(>= 10.6 mmacosx-version-min= -lSystem)}\t   \\\n-        -lgcc_eh -lgcc;\t\t\t\t\t\t\t   \\\n-      shared-libgcc|fexceptions|fgnu-runtime:\t\t\t\t   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_s.10.4)\t   \\\n-       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n-       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n-       -lgcc ;\t\t\t\t\t\t\t\t   \\\n-      :%:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4) \\\n-       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n-       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n-       -lgcc }\"\n+#undef PR80556_WORKAROUND\n+#define PR80556_WORKAROUND \\\n+\" %{m64:%:version-compare(>= 10.6 mmacosx-version-min= -lSystem)} \"\n \n #undef  DARWIN_SUBARCH_SPEC\n #define DARWIN_SUBARCH_SPEC DARWIN_ARCH_SPEC"}, {"sha": "f5bc3d6675027e14df59125484c1eee76887d01c", "filename": "gcc/config/i386/darwin64-biarch.h", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07092a61d5a6907b2d92563e810bf5bb8e61c01/gcc%2Fconfig%2Fi386%2Fdarwin64-biarch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07092a61d5a6907b2d92563e810bf5bb8e61c01/gcc%2Fconfig%2Fi386%2Fdarwin64-biarch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin64-biarch.h?ref=d07092a61d5a6907b2d92563e810bf5bb8e61c01", "patch": "@@ -22,6 +22,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef  DARWIN_ARCH_SPEC\n #define DARWIN_ARCH_SPEC \"%{m32:i386;:x86_64}\"\n \n+#define TARGET_64BIT_DEFAULT (OPTION_MASK_ISA_64BIT | OPTION_MASK_ABI_64)\n+#define TARGET_BI_ARCH 1\n+\n /* WORKAROUND pr80556:\n    For x86_64 Darwin10 and later, the unwinder is in libunwind (redirected\n    from libSystem).  This doesn't use the keymgr (see keymgr.c) and therefore\n@@ -31,22 +34,9 @@ along with GCC; see the file COPYING3.  If not see\n    Therefore, for 64b exes at least, we must use the libunwind implementation,\n    even when static-libgcc is specified.  We put libSystem first so that\n    unwinder symbols are satisfied from there. */\n-#undef REAL_LIBGCC_SPEC\n-#define REAL_LIBGCC_SPEC\t\t\t\t\t\t   \\\n-   \"%{static-libgcc|static: \t\t\t\t\t\t   \\\n-      %{!m32:%:version-compare(>= 10.6 mmacosx-version-min= -lSystem)}\t   \\\n-        -lgcc_eh -lgcc;\t\t\t\t\t\t\t   \\\n-      shared-libgcc|fexceptions|fgnu-runtime:\t\t\t\t   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_s.10.4)\t   \\\n-       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n-       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n-       -lgcc ;\t\t\t\t\t\t\t\t   \\\n-      :%:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4) \\\n-       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n-       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n-       -lgcc }\"\n+#undef PR80556_WORKAROUND\n+#define PR80556_WORKAROUND \\\n+\" %{!m32:%:version-compare(>= 10.6 mmacosx-version-min= -lSystem)} \"\n \n #undef  DARWIN_SUBARCH_SPEC\n #define DARWIN_SUBARCH_SPEC DARWIN_ARCH_SPEC"}]}