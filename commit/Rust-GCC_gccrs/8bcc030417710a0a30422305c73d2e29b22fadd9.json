{"sha": "8bcc030417710a0a30422305c73d2e29b22fadd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjYzAzMDQxNzcxMGEwYTMwNDIyMzA1YzczZDJlMjliMjJmYWRkOQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2010-08-23T16:41:10Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2010-08-23T16:41:10Z"}, "message": "Add -mveclibabi=mass\n\nFrom-SVN: r163470", "tree": {"sha": "f35f733850bc44e58b4d44dbbd2d90f9ad828859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f35f733850bc44e58b4d44dbbd2d90f9ad828859"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bcc030417710a0a30422305c73d2e29b22fadd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcc030417710a0a30422305c73d2e29b22fadd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bcc030417710a0a30422305c73d2e29b22fadd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcc030417710a0a30422305c73d2e29b22fadd9/comments", "author": null, "committer": null, "parents": [{"sha": "a4a7e2f5f71cc1e2a4aa4c4eb51fed83ff78fa08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a7e2f5f71cc1e2a4aa4c4eb51fed83ff78fa08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4a7e2f5f71cc1e2a4aa4c4eb51fed83ff78fa08"}], "stats": {"total": 192, "additions": 191, "deletions": 1}, "files": [{"sha": "406909b2afc74a481335e9c387b8c6ff902b6cba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcc030417710a0a30422305c73d2e29b22fadd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcc030417710a0a30422305c73d2e29b22fadd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bcc030417710a0a30422305c73d2e29b22fadd9", "patch": "@@ -1,3 +1,16 @@\n+2010-08-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.opt (-mmass): New option to enable the\n+\tcompiler to autovectorize mathmetical functions for power7 using\n+\tthe Mathematical Acceleration Subsystem library.\n+\n+\t* config/rs6000/rs6000.c (rs6000_builtin_vectorized_libmass): New\n+\tfunction to handle auto vectorizing math functions that are in the\n+\tMASS library.\n+\t(rs6000_builtin_vectorized_function): Call it.\n+\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document -mmass.\n+\n 2010-08-22  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR boehm-gc/34544"}, {"sha": "fc15198f3d7a524f803af84c44b2941ae94e0b72", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcc030417710a0a30422305c73d2e29b22fadd9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcc030417710a0a30422305c73d2e29b22fadd9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8bcc030417710a0a30422305c73d2e29b22fadd9", "patch": "@@ -989,6 +989,7 @@ static rtx rs6000_emit_stack_reset (rs6000_stack_t *, rtx, rtx, int, bool);\n static rtx rs6000_make_savres_rtx (rs6000_stack_t *, rtx, int,\n \t\t\t\t   enum machine_mode, bool, bool, bool);\n static bool rs6000_reg_live_or_pic_offset_p (int);\n+static tree rs6000_builtin_vectorized_libmass (tree, tree, tree);\n static tree rs6000_builtin_vectorized_function (tree, tree, tree);\n static int rs6000_savres_strategy (rs6000_stack_t *, bool, int, int);\n static void rs6000_restore_saved_cr (rtx, int);\n@@ -3602,6 +3603,145 @@ rs6000_parse_fpu_option (const char *option)\n   return FPU_NONE;\n }\n \n+\n+/* Handler for the Mathematical Acceleration Subsystem (mass) interface to a\n+   library with vectorized intrinsics.  */\n+\n+static tree\n+rs6000_builtin_vectorized_libmass (tree fndecl, tree type_out, tree type_in)\n+{\n+  char name[32];\n+  const char *suffix = NULL;\n+  tree fntype, new_fndecl, bdecl = NULL_TREE;\n+  int n_args = 1;\n+  const char *bname;\n+  enum machine_mode el_mode, in_mode;\n+  int n, in_n;\n+\n+  /* Libmass is suitable for unsafe math only as it does not correctly support\n+     parts of IEEE with the required precision such as denormals.  Only support\n+     it if we have VSX to use the simd d2 or f4 functions.\n+     XXX: Add variable length support.  */\n+  if (!flag_unsafe_math_optimizations || !TARGET_VSX)\n+    return NULL_TREE;\n+\n+  el_mode = TYPE_MODE (TREE_TYPE (type_out));\n+  n = TYPE_VECTOR_SUBPARTS (type_out);\n+  in_mode = TYPE_MODE (TREE_TYPE (type_in));\n+  in_n = TYPE_VECTOR_SUBPARTS (type_in);\n+  if (el_mode != in_mode\n+      || n != in_n)\n+    return NULL_TREE;\n+\n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+    {\n+      enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n+      switch (fn)\n+\t{\n+\tcase BUILT_IN_ATAN2:\n+\tcase BUILT_IN_HYPOT:\n+\tcase BUILT_IN_POW:\n+\t  n_args = 2;\n+\t  /* fall through */\n+\n+\tcase BUILT_IN_ACOS:\n+\tcase BUILT_IN_ACOSH:\n+\tcase BUILT_IN_ASIN:\n+\tcase BUILT_IN_ASINH:\n+\tcase BUILT_IN_ATAN:\n+\tcase BUILT_IN_ATANH:\n+\tcase BUILT_IN_CBRT:\n+\tcase BUILT_IN_COS:\n+\tcase BUILT_IN_COSH:\n+\tcase BUILT_IN_ERF:\n+\tcase BUILT_IN_ERFC:\n+\tcase BUILT_IN_EXP2:\n+\tcase BUILT_IN_EXP:\n+\tcase BUILT_IN_EXPM1:\n+\tcase BUILT_IN_LGAMMA:\n+\tcase BUILT_IN_LOG10:\n+\tcase BUILT_IN_LOG1P:\n+\tcase BUILT_IN_LOG2:\n+\tcase BUILT_IN_LOG:\n+\tcase BUILT_IN_SIN:\n+\tcase BUILT_IN_SINH:\n+\tcase BUILT_IN_SQRT:\n+\tcase BUILT_IN_TAN:\n+\tcase BUILT_IN_TANH:\n+\t  bdecl = implicit_built_in_decls[fn];\n+\t  suffix = \"d2\";\t\t\t\t/* pow -> powd2 */\n+\t  if (el_mode != DFmode\n+\t      || n != 2)\n+\t    return NULL_TREE;\n+\t  break;\n+\n+\tcase BUILT_IN_ATAN2F:\n+\tcase BUILT_IN_HYPOTF:\n+\tcase BUILT_IN_POWF:\n+\t  n_args = 2;\n+\t  /* fall through */\n+\n+\tcase BUILT_IN_ACOSF:\n+\tcase BUILT_IN_ACOSHF:\n+\tcase BUILT_IN_ASINF:\n+\tcase BUILT_IN_ASINHF:\n+\tcase BUILT_IN_ATANF:\n+\tcase BUILT_IN_ATANHF:\n+\tcase BUILT_IN_CBRTF:\n+\tcase BUILT_IN_COSF:\n+\tcase BUILT_IN_COSHF:\n+\tcase BUILT_IN_ERFF:\n+\tcase BUILT_IN_ERFCF:\n+\tcase BUILT_IN_EXP2F:\n+\tcase BUILT_IN_EXPF:\n+\tcase BUILT_IN_EXPM1F:\n+\tcase BUILT_IN_LGAMMAF:\n+\tcase BUILT_IN_LOG10F:\n+\tcase BUILT_IN_LOG1PF:\n+\tcase BUILT_IN_LOG2F:\n+\tcase BUILT_IN_LOGF:\n+\tcase BUILT_IN_SINF:\n+\tcase BUILT_IN_SINHF:\n+\tcase BUILT_IN_SQRTF:\n+\tcase BUILT_IN_TANF:\n+\tcase BUILT_IN_TANHF:\n+\t  bdecl = implicit_built_in_decls[fn];\n+\t  suffix = \"4\";\t\t\t\t\t/* powf -> powf4 */\n+\t  if (el_mode != SFmode\n+\t      || n != 4)\n+\t    return NULL_TREE;\n+\t  break;\n+\n+\tdefault:\n+\t  return NULL_TREE;\n+\t}\n+    }\n+  else\n+    return NULL_TREE;\n+\n+  gcc_assert (suffix != NULL);\n+  bname = IDENTIFIER_POINTER (DECL_NAME (bdecl));\n+  strcpy (name, bname + sizeof (\"__builtin_\") - 1);\n+  strcat (name, suffix);\n+\n+  if (n_args == 1)\n+    fntype = build_function_type_list (type_out, type_in, NULL);\n+  else if (n_args == 2)\n+    fntype = build_function_type_list (type_out, type_in, type_in, NULL);\n+  else\n+    gcc_unreachable ();\n+\n+  /* Build a function declaration for the vectorized function.  */\n+  new_fndecl = build_decl (BUILTINS_LOCATION,\n+\t\t\t   FUNCTION_DECL, get_identifier (name), fntype);\n+  TREE_PUBLIC (new_fndecl) = 1;\n+  DECL_EXTERNAL (new_fndecl) = 1;\n+  DECL_IS_NOVOPS (new_fndecl) = 1;\n+  TREE_READONLY (new_fndecl) = 1;\n+\n+  return new_fndecl;\n+}\n+\n /* Returns a function decl for a vectorized version of the builtin function\n    with builtin function code FN and the result vector type TYPE, or NULL_TREE\n    if it is not available.  */\n@@ -3768,6 +3908,10 @@ rs6000_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n     }\n \n+  /* Generate calls to libmass if appropriate.  */\n+  if (TARGET_MASS)\n+    return rs6000_builtin_vectorized_libmass (fndecl, type_out, type_in);\n+\n   return NULL_TREE;\n }\n "}, {"sha": "dbd758027019701940ea2802c2c0550d166e595c", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcc030417710a0a30422305c73d2e29b22fadd9/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcc030417710a0a30422305c73d2e29b22fadd9/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=8bcc030417710a0a30422305c73d2e29b22fadd9", "patch": "@@ -115,6 +115,10 @@ mpopcntd\n Target Report Mask(POPCNTD)\n Use PowerPC V2.06 popcntd instruction\n \n+mmass\n+Target Report Var(TARGET_MASS) Init(0)\n+Use the Mathematical Acceleration Subsystem library high performance math libraries.\n+\n mvsx\n Target Report Mask(VSX)\n Use vector/scalar (VSX) instructions"}, {"sha": "4cdda3dcef9eef3ebde9e3c659def5b2f5391c76", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcc030417710a0a30422305c73d2e29b22fadd9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcc030417710a0a30422305c73d2e29b22fadd9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8bcc030417710a0a30422305c73d2e29b22fadd9", "patch": "@@ -786,7 +786,9 @@ See RS/6000 and PowerPC Options.\n -mprototype  -mno-prototype @gol\n -msim  -mmvme  -mads  -myellowknife  -memb  -msdata @gol\n -msdata=@var{opt}  -mvxworks  -G @var{num}  -pthread @gol\n--mrecip -mrecip=@var{opt} -mno-recip -mrecip-precision -mno-recip-precision}\n+-mrecip -mrecip=@var{opt} -mno-recip -mrecip-precision\n+-mno-recip-precision @gol\n+-mmass}\n \n @emph{RX Options}\n @gccoptlist{-m64bit-doubles  -m32bit-doubles  -fpu  -nofpu@gol\n@@ -15847,6 +15849,29 @@ automatically selects @option{-mrecip-precision}.  The double\n precision square root estimate instructions are not generated by\n default on low precision machines, since they do not provide an\n estimate that converges after three steps.\n+\n+@item -mmass\n+@itemx -mno-mass\n+@opindex mmass\n+Specifies to use IBM's Mathematical Acceleration Subsystem (MASS)\n+libraries for vectorizing intrinsics using external libraries.  GCC\n+will currently emit calls to @code{acosd2}, @code{acosf4},\n+@code{acoshd2}, @code{acoshf4}, @code{asind2}, @code{asinf4},\n+@code{asinhd2}, @code{asinhf4}, @code{atan2d2}, @code{atan2f4},\n+@code{atand2}, @code{atanf4}, @code{atanhd2}, @code{atanhf4},\n+@code{cbrtd2}, @code{cbrtf4}, @code{cosd2}, @code{cosf4},\n+@code{coshd2}, @code{coshf4}, @code{erfcd2}, @code{erfcf4},\n+@code{erfd2}, @code{erff4}, @code{exp2d2}, @code{exp2f4},\n+@code{expd2}, @code{expf4}, @code{expm1d2}, @code{expm1f4},\n+@code{hypotd2}, @code{hypotf4}, @code{lgammad2}, @code{lgammaf4},\n+@code{log10d2}, @code{log10f4}, @code{log1pd2}, @code{log1pf4},\n+@code{log2d2}, @code{log2f4}, @code{logd2}, @code{logf4},\n+@code{powd2}, @code{powf4}, @code{sind2}, @code{sinf4}, @code{sinhd2},\n+@code{sinhf4}, @code{sqrtd2}, @code{sqrtf4}, @code{tand2},\n+@code{tanf4}, @code{tanhd2}, and @code{tanhf4} when generating code\n+for power7.  Both @option{-ftree-vectorize} and\n+@option{-funsafe-math-optimizations} have to be enabled.  The MASS\n+libraries will have to be specified at link time.\n @end table\n \n @node RX Options"}, {"sha": "d705cf4ec6687bb9aac240e8623de7f46f07efd5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcc030417710a0a30422305c73d2e29b22fadd9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcc030417710a0a30422305c73d2e29b22fadd9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8bcc030417710a0a30422305c73d2e29b22fadd9", "patch": "@@ -1,3 +1,7 @@\n+2010-08-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/vsx-mass-1.c: New file, test -mmass.\n+\n 2010-08-23  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45366"}]}