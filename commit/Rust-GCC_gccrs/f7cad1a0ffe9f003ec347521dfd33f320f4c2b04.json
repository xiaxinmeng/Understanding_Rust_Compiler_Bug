{"sha": "f7cad1a0ffe9f003ec347521dfd33f320f4c2b04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdjYWQxYTBmZmU5ZjAwM2VjMzQ3NTIxZGZkMzNmMzIwZjRjMmIwNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-02T08:06:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-02T08:06:56Z"}, "message": "i386: Punt on broadcasts from TImode integers [PR101286]\n\nix86_expand_vector_init_duplicate doesn't handle TImode -> V2TImode\nor TImode -> V4TImode broadcasts, so I think we should punt on TImode\ninner mode in ix86_broadcast_from_integer_constant, otherwise we ICE\nin ix86_expand_vector_move when ix86_broadcast_from_integer_constant\nreturns non-NULL and ix86_expand_vector_init_duplicate returns false.\n\nIn theory TImode element broadcasts could be handled by some permutations,\nbut I'm not sure it is worth it.\n\n2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/101286\n\t* config/i386/i386-expand.c (ix86_broadcast_from_integer_constant):\n\tReturn nullptr for TImode inner mode.\n\n\t* gcc.target/i386/avx2-pr101286.c: New test.", "tree": {"sha": "e62ba6d6331f7d9fdcd16856b5df7fdcba78a6e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e62ba6d6331f7d9fdcd16856b5df7fdcba78a6e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7cad1a0ffe9f003ec347521dfd33f320f4c2b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7cad1a0ffe9f003ec347521dfd33f320f4c2b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7cad1a0ffe9f003ec347521dfd33f320f4c2b04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7cad1a0ffe9f003ec347521dfd33f320f4c2b04/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4804ff24401733e3b470a49b8a6c9306e6cfcfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4804ff24401733e3b470a49b8a6c9306e6cfcfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4804ff24401733e3b470a49b8a6c9306e6cfcfa"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "b37642e35eea6dd9c8c3a439e3fc9f551fe643a0", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7cad1a0ffe9f003ec347521dfd33f320f4c2b04/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7cad1a0ffe9f003ec347521dfd33f320f4c2b04/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=f7cad1a0ffe9f003ec347521dfd33f320f4c2b04", "patch": "@@ -478,6 +478,9 @@ ix86_broadcast_from_integer_constant (machine_mode mode, rtx op)\n   if (GET_MODE_INNER (mode) == DImode && !TARGET_64BIT)\n     return nullptr;\n \n+  if (GET_MODE_INNER (mode) == TImode)\n+    return nullptr;\n+\n   rtx constant = get_pool_constant (XEXP (op, 0));\n   if (GET_CODE (constant) != CONST_VECTOR)\n     return nullptr;"}, {"sha": "81917bfbc7167d49cca2724439f593a392bb967b", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr101286.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7cad1a0ffe9f003ec347521dfd33f320f4c2b04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr101286.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7cad1a0ffe9f003ec347521dfd33f320f4c2b04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr101286.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr101286.c?ref=f7cad1a0ffe9f003ec347521dfd33f320f4c2b04", "patch": "@@ -0,0 +1,11 @@\n+/* PR target/101286 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-mavx2\" } */\n+\n+typedef __attribute__((__vector_size__ (2 * sizeof (__int128)))) __int128 V;\n+\n+V\n+foo (void)\n+{\n+  return (V){(__int128) 1 << 64 | 1, (__int128) 1 << 64 | 1};\n+}"}]}