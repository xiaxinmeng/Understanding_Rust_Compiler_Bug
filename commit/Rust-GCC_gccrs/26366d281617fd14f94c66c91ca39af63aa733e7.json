{"sha": "26366d281617fd14f94c66c91ca39af63aa733e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzNjZkMjgxNjE3ZmQxNGY5NGM2NmM5MWNhMzlhZjYzYWE3MzNlNw==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-07-02T10:59:59Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-07-02T10:59:59Z"}, "message": "AArch64 Support abs standard pattern for DI mode\n\nFrom-SVN: r200596", "tree": {"sha": "9a1f13a68f58cd563d5539e55ce63625fae58384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a1f13a68f58cd563d5539e55ce63625fae58384"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26366d281617fd14f94c66c91ca39af63aa733e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26366d281617fd14f94c66c91ca39af63aa733e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26366d281617fd14f94c66c91ca39af63aa733e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26366d281617fd14f94c66c91ca39af63aa733e7/comments", "author": null, "committer": null, "parents": [{"sha": "2879bb2b1887b2b7858b9ef037cc8b446b7d002b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2879bb2b1887b2b7858b9ef037cc8b446b7d002b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2879bb2b1887b2b7858b9ef037cc8b446b7d002b"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "d1e6ea3b3aee0fda66f19fb9f2d3e74280cb315b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26366d281617fd14f94c66c91ca39af63aa733e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26366d281617fd14f94c66c91ca39af63aa733e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26366d281617fd14f94c66c91ca39af63aa733e7", "patch": "@@ -1,3 +1,8 @@\n+2013-07-02  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (absdi2): Support abs for\n+\tDI mode.\n+\n 2013-07-02  Ian Bolton  <ian.bolton@arm.com>\n \n \t* config/aarch64/aarch64.md (*extr_insv_reg<mode>): New pattern."}, {"sha": "68336db0ed5062f3a41675b3bde484cc36ba1ad9", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26366d281617fd14f94c66c91ca39af63aa733e7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26366d281617fd14f94c66c91ca39af63aa733e7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=26366d281617fd14f94c66c91ca39af63aa733e7", "patch": "@@ -2003,6 +2003,38 @@\n    (set_attr \"mode\" \"SI\")]\n )\n \n+(define_insn_and_split \"absdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,w\")\n+\t(abs:DI (match_operand:DI 1 \"register_operand\" \"r,w\")))\n+   (clobber (match_scratch:DI 2 \"=&r,X\"))]\n+  \"\"\n+  \"@\n+   #\n+   abs\\\\t%d0, %d1\"\n+  \"reload_completed\n+   && GP_REGNUM_P (REGNO (operands[0]))\n+   && GP_REGNUM_P (REGNO (operands[1]))\"\n+  [(const_int 0)]\n+  {\n+    emit_insn (gen_rtx_SET (VOIDmode, operands[2],\n+\t\t\t    gen_rtx_XOR (DImode,\n+\t\t\t\t\t gen_rtx_ASHIFTRT (DImode,\n+\t\t\t\t\t\t\t   operands[1],\n+\t\t\t\t\t\t\t   GEN_INT (63)),\n+\t\t\t\t\t operands[1])));\n+    emit_insn (gen_rtx_SET (VOIDmode,\n+\t\t\t    operands[0],\n+\t\t\t    gen_rtx_MINUS (DImode,\n+\t\t\t\t\t   operands[2],\n+\t\t\t\t\t   gen_rtx_ASHIFTRT (DImode,\n+\t\t\t\t\t\t\t     operands[1],\n+\t\t\t\t\t\t\t     GEN_INT (63)))));\n+    DONE;\n+  }\n+  [(set_attr \"v8type\" \"alu\")\n+   (set_attr \"mode\" \"DI\")]\n+)\n+\n (define_insn \"neg<mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(neg:GPI (match_operand:GPI 1 \"register_operand\" \"r\")))]"}, {"sha": "52cf0bc63c00e8c4f0b19e38974977ff5a0a4875", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26366d281617fd14f94c66c91ca39af63aa733e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26366d281617fd14f94c66c91ca39af63aa733e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26366d281617fd14f94c66c91ca39af63aa733e7", "patch": "@@ -1,3 +1,7 @@\n+2013-07-02  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc.target/aarch64/abs_1.c: New test.\n+\n 2013-07-02  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc.target/aarch64/bfxil_1.c: New test."}, {"sha": "938bc84ed9599e550e3e8207f371dbb57e7efca3", "filename": "gcc/testsuite/gcc.target/aarch64/abs_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26366d281617fd14f94c66c91ca39af63aa733e7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabs_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26366d281617fd14f94c66c91ca39af63aa733e7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabs_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabs_1.c?ref=26366d281617fd14f94c66c91ca39af63aa733e7", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-inline --save-temps\" } */\n+\n+extern long long llabs (long long);\n+extern void abort (void);\n+\n+long long\n+abs64 (long long a)\n+{\n+  /* { dg-final { scan-assembler \"eor\\t\" } } */\n+  /* { dg-final { scan-assembler \"sub\\t\" } } */\n+  return llabs (a);\n+}\n+\n+long long\n+abs64_in_dreg (long long a)\n+{\n+  /* { dg-final { scan-assembler \"abs\\td\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+  register long long x asm (\"d8\") = a;\n+  register long long y asm (\"d9\");\n+  asm volatile (\"\" : : \"w\" (x));\n+  y = llabs (x);\n+  asm volatile (\"\" : : \"w\" (y));\n+  return y;\n+}\n+\n+int\n+main (void)\n+{\n+  volatile long long ll0 = 0LL, ll1 = 1LL, llm1 = -1LL;\n+\n+  if (abs64 (ll0) != 0LL)\n+    abort ();\n+\n+  if (abs64 (ll1) != 1LL)\n+    abort ();\n+\n+  if (abs64 (llm1) != 1LL)\n+    abort ();\n+\n+  if (abs64_in_dreg (ll0) != 0LL)\n+    abort ();\n+\n+  if (abs64_in_dreg (ll1) != 1LL)\n+    abort ();\n+\n+  if (abs64_in_dreg (llm1) != 1LL)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}