{"sha": "56e6b4a2778a0c416b0040a2081b5d58dcb65e3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZlNmI0YTI3NzhhMGM0MTZiMDA0MGEyMDgxYjVkNThkY2I2NWUzYQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-08-08T12:15:42Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-08-08T12:15:42Z"}, "message": "New files from last commit.\n\nFrom-SVN: r177561", "tree": {"sha": "7fb8f06208b3b3d92de0382f9d663b4e490bc95a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fb8f06208b3b3d92de0382f9d663b4e490bc95a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56e6b4a2778a0c416b0040a2081b5d58dcb65e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e6b4a2778a0c416b0040a2081b5d58dcb65e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56e6b4a2778a0c416b0040a2081b5d58dcb65e3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e6b4a2778a0c416b0040a2081b5d58dcb65e3a/comments", "author": null, "committer": null, "parents": [{"sha": "46135ba7ad097c95922b6dfc5e81cce1c95566ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46135ba7ad097c95922b6dfc5e81cce1c95566ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46135ba7ad097c95922b6dfc5e81cce1c95566ef"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "e5b91bc2ba8c67573e93c1d6c205c1439d889fd3", "filename": "gcc/config/sparc/driver-sparc.c", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e6b4a2778a0c416b0040a2081b5d58dcb65e3a/gcc%2Fconfig%2Fsparc%2Fdriver-sparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e6b4a2778a0c416b0040a2081b5d58dcb65e3a/gcc%2Fconfig%2Fsparc%2Fdriver-sparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fdriver-sparc.c?ref=56e6b4a2778a0c416b0040a2081b5d58dcb65e3a", "patch": "@@ -0,0 +1,158 @@\n+/* Subroutines for the gcc driver.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+\n+static const struct cpu_names {\n+  const char *const name;\n+  const char *const cpu;\n+} cpu_names[] = {\n+#if defined __sun__ && defined __svr4__\n+  { \"TMS390S10\",\t\"supersparc\" },\t/* Texas Instruments microSPARC I */\n+  { \"TMS390Z50\",\t\"supersparc\" },\t/* Texas Instruments SuperSPARC I */\n+  { \"TMS390Z55\",\t\"supersparc\" },\t/* Texas Instruments\n+\t\t\t\t\t   SuperSPARC I with SuperCache */\n+  { \"MB86904\",\t\t\"supersparc\" },\t/* Fujitsu microSPARC II */\n+  { \"MB86907\",\t\t\"supersparc\" },\t/* Fujitsu TurboSPARC */\n+  { \"RT623\",\t\t\"hypersparc\" },\t/* Ross hyperSPARC */\n+  { \"RT625\",\t\t\"hypersparc\" },\n+  { \"RT626\",\t\t\"hypersparc\" },\n+  { \"UltraSPARC-I\",\t\"ultrasparc\" },\n+  { \"UltraSPARC-II\",\t\"ultrasparc\" },\n+  { \"UltraSPARC-IIe\",\t\"ultrasparc\" },\n+  { \"UltraSPARC-IIi\",\t\"ultrasparc\" },\n+  { \"SPARC64-III\",\t\"ultrasparc\" },\n+  { \"SPARC64-IV\",\t\"ultrasparc\" },\n+  { \"UltraSPARC-III\",\t\"ultrasparc3\" },\n+  { \"UltraSPARC-III+\",\t\"ultrasparc3\" },\n+  { \"UltraSPARC-IIIi\",\t\"ultrasparc3\" },\n+  { \"UltraSPARC-IIIi+\",\t\"ultrasparc3\" },\n+  { \"UltraSPARC-IV\",\t\"ultrasparc3\" },\n+  { \"UltraSPARC-IV+\",\t\"ultrasparc3\" },\n+  { \"SPARC64-V\",\t\"ultrasparc3\" },\n+  { \"SPARC64-VI\",\t\"ultrasparc3\" },\n+  { \"SPARC64-VII\",\t\"ultrasparc3\" },\n+  { \"UltraSPARC-T1\",\t\"niagara\" },\n+  { \"UltraSPARC-T2\",\t\"niagara2\" },\n+  { \"UltraSPARC-T2\",\t\"niagara2\" },\n+  { \"UltraSPARC-T2+\",\t\"niagara2\" },\n+  { \"SPARC-T3\",\t\t\"niagara2\" },\n+  { \"SPARC-T4\",\t\t\"niagara2\" },\n+#else\n+  /* FIXME: Provide Linux/SPARC values.  */\n+#endif\n+  { NULL,\tNULL }\n+  };\n+\n+#if defined __sun__ && defined __svr4__\n+#include <kstat.h>\n+#endif\n+\n+/* This will be called by the spec parser in gcc.c when it sees\n+   a %:local_cpu_detect(args) construct.  Currently it will be called\n+   with either \"cpu\" or \"tune\" as argument depending on if -mcpu=native\n+   or -mtune=native is to be substituted.\n+\n+   It returns a string containing new command line parameters to be\n+   put at the place of the above two options, depending on what CPU\n+   this is executed.  E.g. \"-mcpu=ultrasparc3\" on an UltraSPARC III for\n+   -mcpu=native.  If the routine can't detect a known processor,\n+   the -mcpu or -mtune option is discarded.\n+\n+   ARGC and ARGV are set depending on the actual arguments given\n+   in the spec.  */\n+const char *\n+host_detect_local_cpu (int argc, const char **argv)\n+{\n+  const char *cpu = NULL;\n+#if defined __sun__ && defined __svr4__\n+  char *buf = NULL;\n+  kstat_ctl_t *kc;\n+  kstat_t *ksp;\n+  kstat_named_t *brand = NULL;\n+#else\n+  char buf[128];\n+  FILE *f;\n+#endif\n+  int i;\n+\n+  if (argc < 1)\n+    return NULL;\n+\n+  if (strcmp (argv[0], \"cpu\") && strcmp (argv[0], \"tune\"))\n+    return NULL;\n+\n+#if defined __sun__ && defined __svr4__\n+  kc = kstat_open ();\n+  if (kc != NULL)\n+    {\n+      ksp = kstat_lookup (kc, CONST_CAST2 (char *, const char *, \"cpu_info\"),\n+\t\t\t  -1, NULL);\n+      if (ksp != NULL\n+\t  && kstat_read (kc, ksp, NULL) != -1\n+\t  && ksp->ks_type == KSTAT_TYPE_NAMED)\n+\tbrand = (kstat_named_t *)\n+\t  kstat_data_lookup (ksp, CONST_CAST2 (char *, const char *, \"brand\"));\n+      /* \"brand\" was only introduced in Solaris 10.  */\n+      if (brand == NULL)\n+\t  brand = (kstat_named_t *)\n+\t    kstat_data_lookup (ksp, CONST_CAST2 (char *, const char *,\n+\t\t\t\t\t\t \"implementation\"));\n+      /* KSTAT_DATA_STRING was introduced in Solaris 9.  */\n+#ifdef KSTAT_DATA_STRING\n+      if (brand != NULL && brand->data_type == KSTAT_DATA_STRING)\n+\tbuf = KSTAT_NAMED_STR_PTR (brand);\n+#else\n+      if (brand != NULL && brand->data_type == KSTAT_DATA_CHAR)\n+\tbuf = brand->value.c;\n+#endif\n+    }\n+  kstat_close (kc);\n+\n+  for (i = 0; cpu_names[i].name != NULL; i++)\n+    if (strcmp (buf, cpu_names[i].name) == 0)\n+      cpu = cpu_names[i].cpu;\n+#else\n+  f = fopen (\"/proc/cpuinfo\", \"r\");\n+  if (f == NULL)\n+    return NULL;\n+\n+  while (fgets (buf, sizeof (buf), f) != NULL)\n+    if (strncmp (buf, \"cpu model\", sizeof (\"cpu model\") - 1) == 0)\n+      {\n+        for (i = 0; cpu_names [i].name; i++)\n+          if (strstr (buf, cpu_names [i].name) != NULL)\n+\t    {\n+\t      cpu = cpu_names [i].cpu;\n+\t      break;\n+\t    }\n+\tbreak;\n+      }\n+\n+  fclose (f);\n+#endif\n+\n+  if (cpu == NULL)\n+    return NULL;\n+\n+  return concat (\"-m\", argv[0], \"=\", cpu, NULL);\n+}"}, {"sha": "693ba61d35621584490a39dda6ab2d23a3cb889c", "filename": "gcc/config/sparc/x-sparc", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e6b4a2778a0c416b0040a2081b5d58dcb65e3a/gcc%2Fconfig%2Fsparc%2Fx-sparc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e6b4a2778a0c416b0040a2081b5d58dcb65e3a/gcc%2Fconfig%2Fsparc%2Fx-sparc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fx-sparc?ref=56e6b4a2778a0c416b0040a2081b5d58dcb65e3a", "patch": "@@ -0,0 +1,3 @@\n+driver-sparc.o: $(srcdir)/config/sparc/driver-sparc.c \\\n+  $(CONFIG_H) $(SYSTEM_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}