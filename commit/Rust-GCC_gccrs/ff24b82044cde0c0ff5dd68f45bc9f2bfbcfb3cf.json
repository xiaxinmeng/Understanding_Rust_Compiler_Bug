{"sha": "ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYyNGI4MjA0NGNkZTBjMGZmNWRkNjhmNDViYzlmMmJmYmNmYjNjZg==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2004-06-06T13:56:33Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2004-06-06T13:56:33Z"}, "message": "re PR target/14457 (ICE with simple c++ source)\n\n\tPR target/14457\n\t* config/m68hc11/m68hc11.c (splitable_operand): New predicate.\n\t* config/m68hc11/m68hc11-protos.h (splitable_operand): Declare.\n\t* config/m68hc11/m68hc11.h (PREDICATE_CODES): Register it.\n\t(inhibit_libc): Must define.\n\t* config/m68hc11/m68hc11.md (\"movhi_const0\"): Use splitable_operand.\n\t(\"*andhi3_gen\", \"iorhi3\", \"*iorhi3_gen\"): Likewise.\n\t(\"xorhi3\"): Likewise.\n\nFrom-SVN: r82670", "tree": {"sha": "e21bf46155a93dd5f36c826637cc3e7c34c3494b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e21bf46155a93dd5f36c826637cc3e7c34c3494b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf/comments", "author": null, "committer": null, "parents": [{"sha": "2ddbba8007ac79d2f61fb8c02dd1a04d3c14d098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddbba8007ac79d2f61fb8c02dd1a04d3c14d098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ddbba8007ac79d2f61fb8c02dd1a04d3c14d098"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "cca009ba24f23fa6628e66619e9c64c229f75771", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf", "patch": "@@ -1,3 +1,14 @@\n+2004-06-06  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\tPR target/14457\n+\t* config/m68hc11/m68hc11.c (splitable_operand): New predicate.\n+\t* config/m68hc11/m68hc11-protos.h (splitable_operand): Declare.\n+\t* config/m68hc11/m68hc11.h (PREDICATE_CODES): Register it.\n+\t(inhibit_libc): Must define.\n+\t* config/m68hc11/m68hc11.md (\"movhi_const0\"): Use splitable_operand.\n+\t(\"*andhi3_gen\", \"iorhi3\", \"*iorhi3_gen\"): Likewise.\n+\t(\"xorhi3\"): Likewise.\n+\n 2004-06-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* cgraphunit.c (cgraph_decide_inlining): Adjust dump lines in"}, {"sha": "dbd7d87f7f446388975f9fc7ea9403bbc01c8860", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in m68hc11.c\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n This file is part of GCC.\n@@ -104,6 +104,7 @@ extern int memory_reload_operand (rtx, enum machine_mode);\n extern int stack_register_operand (rtx, enum machine_mode);\n extern int d_register_operand (rtx, enum machine_mode);\n extern int hard_addr_reg_operand (rtx, enum machine_mode);\n+extern int splitable_operand (rtx, enum machine_mode);\n extern int arith_src_operand (rtx, enum machine_mode);\n extern int m68hc11_logical_operator (rtx, enum machine_mode);\n extern int m68hc11_arith_operator (rtx, enum machine_mode);"}, {"sha": "321e1ab1633429022281f8b60c1c70b21251f793", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf", "patch": "@@ -1009,6 +1009,24 @@ non_push_operand (rtx operand, enum machine_mode mode)\n   return 1;\n }\n \n+int\n+splitable_operand (rtx operand, enum machine_mode mode)\n+{\n+  if (general_operand (operand, mode) == 0)\n+    return 0;\n+\n+  if (push_operand (operand, mode) == 1)\n+    return 0;\n+\n+  /* Reject a (MEM (MEM X)) because the patterns that use non_push_operand\n+     need to split such addresses to access the low and high part but it\n+     is not possible to express a valid address for the low part.  */\n+  if (mode != QImode && GET_CODE (operand) == MEM\n+      && GET_CODE (XEXP (operand, 0)) == MEM)\n+    return 0;\n+  return 1;\n+}\n+\n int\n reg_or_some_mem_operand (rtx operand, enum machine_mode mode)\n {"}, {"sha": "378454ca65888a84283bd1f71fa3eab63c03f530", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf", "patch": "@@ -92,7 +92,9 @@ Boston, MA 02111-1307, USA.\n   while (0)\n \n /* As an embedded target, we have no libc.  */\n-#define inhibit_libc\n+#ifndef inhibit_libc\n+#  define inhibit_libc\n+#endif\n \n /* Forward type declaration for prototypes definitions.\n    rtx_ptr is equivalent to rtx. Can't use the same name.  */\n@@ -1633,6 +1635,7 @@ do {                                                                    \\\n {\"m68hc11_shift_operator\",   {ASHIFT, ASHIFTRT, LSHIFTRT, ROTATE, ROTATERT}},\\\n {\"m68hc11_eq_compare_operator\", {EQ, NE}},                              \\\n {\"non_push_operand\",         {SUBREG, REG, MEM}},\t\t\t\\\n+{\"splitable_operand\",        {SUBREG, REG, MEM}},\t\t\t\\\n {\"reg_or_some_mem_operand\",  {SUBREG, REG, MEM}},\t\t\t\\\n {\"tst_operand\",              {SUBREG, REG, MEM}},\t\t\t\\\n {\"cmp_operand\",              {SUBREG, REG, MEM, SYMBOL_REF, LABEL_REF,\t\\"}, {"sha": "364bdbb6ff87de9ee808589b5f749f83077152d2", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=ff24b82044cde0c0ff5dd68f45bc9f2bfbcfb3cf", "patch": "@@ -885,7 +885,7 @@\n }\")\n \n (define_insn \"movhi_const0\"\n-  [(set (match_operand:HI 0 \"non_push_operand\" \"=d,A,um\")\n+  [(set (match_operand:HI 0 \"splitable_operand\" \"=d,A,um\")\n \t(const_int 0))]\n   \"\"\n   \"@\n@@ -3230,8 +3230,8 @@\n \n (define_insn \"*andhi3_gen\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d,!*A\")\n-\t(and:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"mi,!u*A,!um*A\")))]\n+\t(and:HI (match_operand:HI 1 \"splitable_operand\" \"%0,0,0\")\n+\t\t(match_operand:HI 2 \"splitable_operand\" \"mi,!u*A,!um*Ai\")))]\n   \"\"\n   \"*\n {\n@@ -3371,7 +3371,7 @@\n (define_expand \"iorhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(ior:HI (match_operand:HI 1 \"register_operand\" \"\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"\")))]\n+\t\t(match_operand:HI 2 \"splitable_operand\" \"\")))]\n   \"\"\n   \"\")\n \n@@ -3459,8 +3459,8 @@\n \n (define_insn \"*iorhi3_gen\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d,!*A\")\n-\t(ior:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"mi,!u*A,!um*A\")))]\n+\t(ior:HI (match_operand:HI 1 \"splitable_operand\" \"%0,0,0\")\n+\t\t(match_operand:HI 2 \"splitable_operand\" \"mi,!u*A,!um*Ai\")))]\n   \"\"\n   \"*\n {\n@@ -3589,8 +3589,8 @@\n \n (define_insn \"xorhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d,!*A\")\n-\t(xor:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"im,!u*A,!ium*A\")))]\n+\t(xor:HI (match_operand:HI 1 \"splitable_operand\" \"%0,0,0\")\n+\t\t(match_operand:HI 2 \"splitable_operand\" \"im,!u*A,!ium*A\")))]\n   \"\"\n   \"*\n {"}]}