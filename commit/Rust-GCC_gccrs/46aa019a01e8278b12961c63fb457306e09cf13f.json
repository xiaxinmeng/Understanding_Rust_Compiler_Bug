{"sha": "46aa019a01e8278b12961c63fb457306e09cf13f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZhYTAxOWEwMWU4Mjc4YjEyOTYxYzYzZmI0NTczMDZlMDljZjEzZg==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-09-15T02:03:51Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-09-15T02:03:51Z"}, "message": "Iterator to visit SSA\n\nIterator to visit SSA\ngcc/ChangeLog:\n\n2016-09-15  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* tree-ssanames.h (FOR_EACH_SSA_NAME): New.\n\t* cfgexpand.c (update_alias_info_with_stack_vars): Use\n\tFOR_EACH_SSA_NAME to iterate over SSA variables.\n\t(pass_expand::execute): Likewise.\n\t* omp-simd-clone.c (ipa_simd_modify_function_body): Likewise.\n\t* tree-cfg.c (dump_function_to_file): Likewise.\n\t* tree-into-ssa.c (pass_build_ssa::execute): Likewise.\n\t(update_ssa): Likewise.\n\t* tree-ssa-alias.c (dump_alias_info): Likewise.\n\t* tree-ssa-ccp.c (ccp_finalize): Likewise.\n\t* tree-ssa-coalesce.c (build_ssa_conflict_graph): Likewise.\n\t(create_outofssa_var_map): Likewise.\n\t(coalesce_ssa_name): Likewise.\n\t* tree-ssa-operands.c (dump_immediate_uses): Likewise.\n\t* tree-ssa-pre.c (compute_avail): Likewise.\n\t* tree-ssa-sccvn.c (init_scc_vn): Likewise.\n\t(scc_vn_restore_ssa_info): Likewise.\n\t(free_scc_vn): Likwise.\n\t(run_scc_vn): Likewise.\n\t* tree-ssa-structalias.c (compute_points_to_sets): Likewise.\n\t* tree-ssa-ter.c (new_temp_expr_table): Likewise.\n\t* tree-ssa-copy.c (fini_copy_prop): Likewise.\n\t* tree-ssa.c (verify_ssa): Likewise.\n\nFrom-SVN: r240152", "tree": {"sha": "39c6eda48c393bf21246adc888f27ba357e13f17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39c6eda48c393bf21246adc888f27ba357e13f17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46aa019a01e8278b12961c63fb457306e09cf13f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46aa019a01e8278b12961c63fb457306e09cf13f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46aa019a01e8278b12961c63fb457306e09cf13f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46aa019a01e8278b12961c63fb457306e09cf13f/comments", "author": null, "committer": null, "parents": [{"sha": "7332afeab41a577291ea7bc20a353bcab0bd7476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7332afeab41a577291ea7bc20a353bcab0bd7476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7332afeab41a577291ea7bc20a353bcab0bd7476"}], "stats": {"total": 268, "additions": 136, "deletions": 132}, "files": [{"sha": "45850766d71a4c53700ad56019ac33a7378a83b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -1,3 +1,29 @@\n+2016-09-15  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* tree-ssanames.h (FOR_EACH_SSA_NAME): New.\n+\t* cfgexpand.c (update_alias_info_with_stack_vars): Use\n+\tFOR_EACH_SSA_NAME to iterate over SSA variables.\n+\t(pass_expand::execute): Likewise.\n+\t* omp-simd-clone.c (ipa_simd_modify_function_body): Likewise.\n+\t* tree-cfg.c (dump_function_to_file): Likewise.\n+\t* tree-into-ssa.c (pass_build_ssa::execute): Likewise.\n+\t(update_ssa): Likewise.\n+\t* tree-ssa-alias.c (dump_alias_info): Likewise.\n+\t* tree-ssa-ccp.c (ccp_finalize): Likewise.\n+\t* tree-ssa-coalesce.c (build_ssa_conflict_graph): Likewise.\n+\t(create_outofssa_var_map): Likewise.\n+\t(coalesce_ssa_name): Likewise.\n+\t* tree-ssa-operands.c (dump_immediate_uses): Likewise.\n+\t* tree-ssa-pre.c (compute_avail): Likewise.\n+\t* tree-ssa-sccvn.c (init_scc_vn): Likewise.\n+\t(scc_vn_restore_ssa_info): Likewise.\n+\t(free_scc_vn): Likwise.\n+\t(run_scc_vn): Likewise.\n+\t* tree-ssa-structalias.c (compute_points_to_sets): Likewise.\n+\t* tree-ssa-ter.c (new_temp_expr_table): Likewise.\n+\t* tree-ssa-copy.c (fini_copy_prop): Likewise.\n+\t* tree-ssa.c (verify_ssa): Likewise.\n+\n 2016-09-14  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \t* config.gcc (mips*-mti-elf*, mips*-mti-linux*): Set mips32r2"}, {"sha": "dfa301de9cc1bad5ea97863a10d1fb714fe4039c", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -815,16 +815,15 @@ update_alias_info_with_stack_vars (void)\n   if (decls_to_partitions)\n     {\n       unsigned i;\n+      tree name;\n       hash_set<bitmap> visited;\n       bitmap temp = BITMAP_ALLOC (&stack_var_bitmap_obstack);\n \n-      for (i = 1; i < num_ssa_names; i++)\n+      FOR_EACH_SSA_NAME (i, name, cfun)\n \t{\n-\t  tree name = ssa_name (i);\n \t  struct ptr_info_def *pi;\n \n-\t  if (name\n-\t      && POINTER_TYPE_P (TREE_TYPE (name))\n+\t  if (POINTER_TYPE_P (TREE_TYPE (name))\n \t      && ((pi = SSA_NAME_PTR_INFO (name)) != NULL))\n \t    add_partitioned_vars_to_ptset (&pi->pt, decls_to_partitions,\n \t\t\t\t\t   &visited, temp);\n@@ -6270,16 +6269,15 @@ pass_expand::execute (function *fun)\n \n   /* Now propagate the RTL assignment of each partition to the\n      underlying var of each SSA_NAME.  */\n-  for (i = 1; i < num_ssa_names; i++)\n-    {\n-      tree name = ssa_name (i);\n+  tree name;\n \n-      if (!name\n-\t  /* We might have generated new SSA names in\n-\t     update_alias_info_with_stack_vars.  They will have a NULL\n-\t     defining statements, and won't be part of the partitioning,\n-\t     so ignore those.  */\n-\t  || !SSA_NAME_DEF_STMT (name))\n+  FOR_EACH_SSA_NAME (i, name, cfun)\n+    {\n+      /* We might have generated new SSA names in\n+\t update_alias_info_with_stack_vars.  They will have a NULL\n+\t defining statements, and won't be part of the partitioning,\n+\t so ignore those.  */\n+      if (!SSA_NAME_DEF_STMT (name))\n \tcontinue;\n \n       adjust_one_expanded_partition_var (name);\n@@ -6288,17 +6286,15 @@ pass_expand::execute (function *fun)\n   /* Clean up RTL of variables that straddle across multiple\n      partitions, and check that the rtl of any PARM_DECLs that are not\n      cleaned up is that of their default defs.  */\n-  for (i = 1; i < num_ssa_names; i++)\n+  FOR_EACH_SSA_NAME (i, name, cfun)\n     {\n-      tree name = ssa_name (i);\n       int part;\n \n-      if (!name\n-\t  /* We might have generated new SSA names in\n-\t     update_alias_info_with_stack_vars.  They will have a NULL\n-\t     defining statements, and won't be part of the partitioning,\n-\t     so ignore those.  */\n-\t  || !SSA_NAME_DEF_STMT (name))\n+      /* We might have generated new SSA names in\n+\t update_alias_info_with_stack_vars.  They will have a NULL\n+\t defining statements, and won't be part of the partitioning,\n+\t so ignore those.  */\n+      if (!SSA_NAME_DEF_STMT (name))\n \tcontinue;\n       part = var_to_partition (SA.map, name);\n       if (part == NO_PARTITION)"}, {"sha": "df140d40446df013d25bcde6f13af82bf00c8f47", "filename": "gcc/omp-simd-clone.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Fomp-simd-clone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Fomp-simd-clone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -931,11 +931,11 @@ ipa_simd_modify_function_body (struct cgraph_node *node,\n     }\n \n   l = adjustments.length ();\n-  for (i = 1; i < num_ssa_names; i++)\n+  tree name;\n+\n+  FOR_EACH_SSA_NAME (i, name, cfun)\n     {\n-      tree name = ssa_name (i);\n-      if (name\n-\t  && SSA_NAME_VAR (name)\n+      if (SSA_NAME_VAR (name)\n \t  && TREE_CODE (SSA_NAME_VAR (name)) == PARM_DECL)\n \t{\n \t  for (j = 0; j < l; j++)"}, {"sha": "badbd96951c933acca8eb4470aca93b6c097010b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -7581,11 +7581,13 @@ dump_function_to_file (tree fndecl, FILE *file, int flags)\n \n \t    any_var = true;\n \t  }\n+\n+      tree name;\n+\n       if (gimple_in_ssa_p (cfun))\n-\tfor (ix = 1; ix < num_ssa_names; ++ix)\n+\tFOR_EACH_SSA_NAME (ix, name, cfun)\n \t  {\n-\t    tree name = ssa_name (ix);\n-\t    if (name && !SSA_NAME_VAR (name))\n+\t    if (!SSA_NAME_VAR (name))\n \t      {\n \t\tfprintf (file, \"  \");\n \t\tprint_generic_expr (file, TREE_TYPE (name), flags);"}, {"sha": "a4ff60876c35db646ca53f0b1b168a3f64ac75f6", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -2341,7 +2341,6 @@ pass_build_ssa::execute (function *fun)\n {\n   bitmap_head *dfs;\n   basic_block bb;\n-  unsigned i;\n \n   /* Initialize operand data structures.  */\n   init_ssa_operands (fun);\n@@ -2385,13 +2384,14 @@ pass_build_ssa::execute (function *fun)\n   /* Try to get rid of all gimplifier generated temporaries by making\n      its SSA names anonymous.  This way we can garbage collect them\n      all after removing unused locals which we do in our TODO.  */\n-  for (i = 1; i < num_ssa_names; ++i)\n+  unsigned i;\n+  tree name;\n+\n+  FOR_EACH_SSA_NAME (i, name, cfun)\n     {\n-      tree decl, name = ssa_name (i);\n-      if (!name\n-\t  || SSA_NAME_IS_DEFAULT_DEF (name))\n+      if (SSA_NAME_IS_DEFAULT_DEF (name))\n \tcontinue;\n-      decl = SSA_NAME_VAR (name);\n+      tree decl = SSA_NAME_VAR (name);\n       if (decl\n \t  && TREE_CODE (decl) == VAR_DECL\n \t  && !VAR_DECL_IS_VIRTUAL_OPERAND (decl)\n@@ -3283,12 +3283,12 @@ update_ssa (unsigned update_flags)\n \t placement heuristics.  */\n       prepare_block_for_update (start_bb, insert_phi_p);\n \n+      tree name;\n+\n       if (flag_checking)\n-\tfor (i = 1; i < num_ssa_names; ++i)\n+\tFOR_EACH_SSA_NAME (i, name, cfun)\n \t  {\n-\t    tree name = ssa_name (i);\n-\t    if (!name\n-\t\t|| virtual_operand_p (name))\n+\t    if (virtual_operand_p (name))\n \t      continue;\n \n \t    /* For all but virtual operands, which do not have SSA names"}, {"sha": "30de461259891d7a761df1109c9c0d31896b631c", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -450,6 +450,7 @@ void\n dump_alias_info (FILE *file)\n {\n   unsigned i;\n+  tree ptr;\n   const char *funcname\n     = lang_hooks.decl_printable_name (current_function_decl, 2);\n   tree var;\n@@ -471,13 +472,11 @@ dump_alias_info (FILE *file)\n \n   fprintf (file, \"\\n\\nFlow-insensitive points-to information\\n\\n\");\n \n-  for (i = 1; i < num_ssa_names; i++)\n+  FOR_EACH_SSA_NAME (i, ptr, cfun)\n     {\n-      tree ptr = ssa_name (i);\n       struct ptr_info_def *pi;\n \n-      if (ptr == NULL_TREE\n-\t  || !POINTER_TYPE_P (TREE_TYPE (ptr))\n+      if (!POINTER_TYPE_P (TREE_TYPE (ptr))\n \t  || SSA_NAME_IN_FREE_LIST (ptr))\n \tcontinue;\n "}, {"sha": "d5a05608f781af46633ac74a9d16948cec4f68cc", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -898,24 +898,23 @@ ccp_finalize (bool nonzero_p)\n {\n   bool something_changed;\n   unsigned i;\n+  tree name;\n \n   do_dbg_cnt ();\n \n   /* Derive alignment and misalignment information from partially\n      constant pointers in the lattice or nonzero bits from partially\n      constant integers.  */\n-  for (i = 1; i < num_ssa_names; ++i)\n+  FOR_EACH_SSA_NAME (i, name, cfun)\n     {\n-      tree name = ssa_name (i);\n       ccp_prop_value_t *val;\n       unsigned int tem, align;\n \n-      if (!name\n-\t  || (!POINTER_TYPE_P (TREE_TYPE (name))\n-\t      && (!INTEGRAL_TYPE_P (TREE_TYPE (name))\n-\t\t  /* Don't record nonzero bits before IPA to avoid\n-\t\t     using too much memory.  */\n-\t\t  || !nonzero_p)))\n+      if (!POINTER_TYPE_P (TREE_TYPE (name))\n+\t  && (!INTEGRAL_TYPE_P (TREE_TYPE (name))\n+\t      /* Don't record nonzero bits before IPA to avoid\n+\t\t using too much memory.  */\n+\t      || !nonzero_p))\n \tcontinue;\n \n       val = get_value (name);"}, {"sha": "01f6c5f82390d808c6828585974a8cb50ee4a9f6", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -955,12 +955,11 @@ build_ssa_conflict_graph (tree_live_info_p liveinfo)\n       if (bb == entry)\n \t{\n \t  unsigned i;\n-\t  for (i = 1; i < num_ssa_names; i++)\n-\t    {\n-\t      tree var = ssa_name (i);\n+\t  tree var;\n \n-\t      if (!var\n-\t\t  || !SSA_NAME_IS_DEFAULT_DEF (var)\n+\t  FOR_EACH_SSA_NAME (i, var, cfun)\n+\t    {\n+\t      if (!SSA_NAME_IS_DEFAULT_DEF (var)\n \t\t  || !SSA_NAME_VAR (var)\n \t\t  || VAR_P (SSA_NAME_VAR (var)))\n \t\tcontinue;\n@@ -1261,10 +1260,9 @@ create_outofssa_var_map (coalesce_list *cl, bitmap used_in_copy)\n   /* Now process result decls and live on entry variables for entry into\n      the coalesce list.  */\n   first = NULL_TREE;\n-  for (i = 1; i < num_ssa_names; i++)\n+  FOR_EACH_SSA_NAME (i, var, cfun)\n     {\n-      var = ssa_name (i);\n-      if (var != NULL_TREE && !virtual_operand_p (var))\n+      if (!virtual_operand_p (var))\n         {\n \t  coalesce_with_default (var, cl, used_in_copy);\n \n@@ -1806,6 +1804,7 @@ coalesce_ssa_name (void)\n   bitmap used_in_copies = BITMAP_ALLOC (NULL);\n   var_map map;\n   unsigned int i;\n+  tree a;\n \n   cl = create_coalesce_list ();\n   map = create_outofssa_var_map (cl, used_in_copies);\n@@ -1817,12 +1816,9 @@ coalesce_ssa_name (void)\n     {\n       hash_table<ssa_name_var_hash> ssa_name_hash (10);\n \n-      for (i = 1; i < num_ssa_names; i++)\n+      FOR_EACH_SSA_NAME (i, a, cfun)\n \t{\n-\t  tree a = ssa_name (i);\n-\n-\t  if (a\n-\t      && SSA_NAME_VAR (a)\n+\t  if (SSA_NAME_VAR (a)\n \t      && !DECL_IGNORED_P (SSA_NAME_VAR (a))\n \t      && (!has_zero_uses (a) || !SSA_NAME_IS_DEFAULT_DEF (a)\n \t\t  || !VAR_P (SSA_NAME_VAR (a))))"}, {"sha": "fcf4fa9464afc44f693a9b6cf9c9942c61f0cade", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -503,14 +503,13 @@ static bool\n fini_copy_prop (void)\n {\n   unsigned i;\n+  tree var;\n \n   /* Set the final copy-of value for each variable by traversing the\n      copy-of chains.  */\n-  for (i = 1; i < num_ssa_names; i++)\n+  FOR_EACH_SSA_NAME (i, var, cfun)\n     {\n-      tree var = ssa_name (i);\n-      if (!var\n-\t  || !copy_of[i].value\n+      if (!copy_of[i].value\n \t  || copy_of[i].value == var)\n \tcontinue;\n "}, {"sha": "a5c354699a0fd8fd7273b09c211a7d24c3c7f5bf", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -1247,11 +1247,8 @@ dump_immediate_uses (FILE *file)\n   unsigned int x;\n \n   fprintf (file, \"Immediate_uses: \\n\\n\");\n-  for (x = 1; x < num_ssa_names; x++)\n+  FOR_EACH_SSA_NAME (x, var, cfun)\n     {\n-      var = ssa_name (x);\n-      if (!var)\n-        continue;\n       dump_immediate_uses_for (file, var);\n     }\n }"}, {"sha": "67a05133850ee1660fc0b03ac7d385b1cadf75e7", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -3670,15 +3670,14 @@ compute_avail (void)\n   basic_block *worklist;\n   size_t sp = 0;\n   unsigned i;\n+  tree name;\n \n   /* We pretend that default definitions are defined in the entry block.\n      This includes function arguments and the static chain decl.  */\n-  for (i = 1; i < num_ssa_names; ++i)\n+  FOR_EACH_SSA_NAME (i, name, cfun)\n     {\n-      tree name = ssa_name (i);\n       pre_expr e;\n-      if (!name\n-\t  || !SSA_NAME_IS_DEFAULT_DEF (name)\n+      if (!SSA_NAME_IS_DEFAULT_DEF (name)\n \t  || has_zero_uses (name)\n \t  || virtual_operand_p (name))\n \tcontinue;"}, {"sha": "e120b4f72dcd14931b6999b207cef0666aba39fa", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -4290,7 +4290,6 @@ free_vn_table (vn_tables_t table)\n static void\n init_scc_vn (void)\n {\n-  size_t i;\n   int j;\n   int *rpo_numbers_temp;\n \n@@ -4339,12 +4338,11 @@ init_scc_vn (void)\n \n   /* Create the VN_INFO structures, and initialize value numbers to\n      TOP or VARYING for parameters.  */\n-  for (i = 1; i < num_ssa_names; i++)\n-    {\n-      tree name = ssa_name (i);\n-      if (!name)\n-\tcontinue;\n+  size_t i;\n+  tree name;\n \n+  FOR_EACH_SSA_NAME (i, name, cfun)\n+    {\n       VN_INFO_GET (name)->valnum = VN_TOP;\n       VN_INFO (name)->needs_insertion = false;\n       VN_INFO (name)->expr = NULL;\n@@ -4402,11 +4400,12 @@ init_scc_vn (void)\n void\n scc_vn_restore_ssa_info (void)\n {\n-  for (unsigned i = 0; i < num_ssa_names; i++)\n+  unsigned i;\n+  tree name;\n+\n+  FOR_EACH_SSA_NAME (i, name, cfun)\n     {\n-      tree name = ssa_name (i);\n-      if (name\n-\t  && has_VN_INFO (name))\n+      if (has_VN_INFO (name))\n \t{\n \t  if (VN_INFO (name)->needs_insertion)\n \t    ;\n@@ -4428,6 +4427,7 @@ void\n free_scc_vn (void)\n {\n   size_t i;\n+  tree name;\n \n   delete constant_to_value_id;\n   constant_to_value_id = NULL;\n@@ -4436,11 +4436,9 @@ free_scc_vn (void)\n   shared_lookup_references.release ();\n   XDELETEVEC (rpo_numbers);\n \n-  for (i = 0; i < num_ssa_names; i++)\n+  FOR_EACH_SSA_NAME (i, name, cfun)\n     {\n-      tree name = ssa_name (i);\n-      if (name\n-\t  && has_VN_INFO (name)\n+      if (has_VN_INFO (name)\n \t  && VN_INFO (name)->needs_insertion)\n \trelease_ssa_name (name);\n     }\n@@ -4797,13 +4795,11 @@ run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n \n   /* Initialize the value ids and prune out remaining VN_TOPs\n      from dead code.  */\n-  for (i = 1; i < num_ssa_names; ++i)\n+  tree name;\n+\n+  FOR_EACH_SSA_NAME (i, name, cfun)\n     {\n-      tree name = ssa_name (i);\n-      vn_ssa_aux_t info;\n-      if (!name)\n-\tcontinue;\n-      info = VN_INFO (name);\n+      vn_ssa_aux_t info = VN_INFO (name);\n       if (!info->visited)\n \tinfo->valnum = name;\n       if (info->valnum == name\n@@ -4814,13 +4810,9 @@ run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n     }\n \n   /* Propagate.  */\n-  for (i = 1; i < num_ssa_names; ++i)\n+  FOR_EACH_SSA_NAME (i, name, cfun)\n     {\n-      tree name = ssa_name (i);\n-      vn_ssa_aux_t info;\n-      if (!name)\n-\tcontinue;\n-      info = VN_INFO (name);\n+      vn_ssa_aux_t info = VN_INFO (name);\n       if (TREE_CODE (info->valnum) == SSA_NAME\n \t  && info->valnum != name\n \t  && info->value_id != VN_INFO (info->valnum)->value_id)\n@@ -4832,11 +4824,9 @@ run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Value numbers:\\n\");\n-      for (i = 0; i < num_ssa_names; i++)\n+      FOR_EACH_SSA_NAME (i, name, cfun)\n \t{\n-\t  tree name = ssa_name (i);\n-\t  if (name\n-\t      && VN_INFO (name)->visited\n+\t  if (VN_INFO (name)->visited\n \t      && SSA_VAL (name) != name)\n \t    {\n \t      print_generic_expr (dump_file, name, 0);"}, {"sha": "cbf509befe057858a2f6cad0359e4158edef2fd1", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -7028,7 +7028,6 @@ static void\n compute_points_to_sets (void)\n {\n   basic_block bb;\n-  unsigned i;\n   varinfo_t vi;\n \n   timevar_push (TV_TREE_PTA);\n@@ -7077,11 +7076,12 @@ compute_points_to_sets (void)\n   cfun->gimple_df->escaped.escaped = 0;\n \n   /* Compute the points-to sets for pointer SSA_NAMEs.  */\n-  for (i = 0; i < num_ssa_names; ++i)\n+  unsigned i;\n+  tree ptr;\n+\n+  FOR_EACH_SSA_NAME (i, ptr, cfun)\n     {\n-      tree ptr = ssa_name (i);\n-      if (ptr\n-\t  && POINTER_TYPE_P (TREE_TYPE (ptr)))\n+      if (POINTER_TYPE_P (TREE_TYPE (ptr)))\n \tfind_what_p_points_to (cfun->decl, ptr);\n     }\n "}, {"sha": "c7d8b7eb204df40c7591bd778f0416822f3b6935", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -185,8 +185,6 @@ extern void debug_ter (FILE *, temp_expr_table *);\n static temp_expr_table *\n new_temp_expr_table (var_map map)\n {\n-  unsigned x;\n-\n   temp_expr_table *t = XNEW (struct temp_expr_table);\n   t->map = map;\n \n@@ -201,12 +199,13 @@ new_temp_expr_table (var_map map)\n \n   t->replaceable_expressions = NULL;\n   t->num_in_part = XCNEWVEC (int, num_var_partitions (map));\n-  for (x = 1; x < num_ssa_names; x++)\n+\n+  unsigned x;\n+  tree name;\n+\n+  FOR_EACH_SSA_NAME (x, name, cfun)\n     {\n       int p;\n-      tree name = ssa_name (x);\n-      if (!name)\n-        continue;\n       p = var_to_partition (map, name);\n       if (p != NO_PARTITION)\n         t->num_in_part[p]++;"}, {"sha": "d442a5f89e1cf05bc6495e2d51f9db58bd7beedb", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -1005,7 +1005,6 @@ verify_phi_args (gphi *phi, basic_block bb, basic_block *definition_block)\n DEBUG_FUNCTION void\n verify_ssa (bool check_modified_stmt, bool check_ssa_operands)\n {\n-  size_t i;\n   basic_block bb;\n   basic_block *definition_block = XCNEWVEC (basic_block, num_ssa_names);\n   ssa_op_iter iter;\n@@ -1018,24 +1017,23 @@ verify_ssa (bool check_modified_stmt, bool check_ssa_operands)\n   timevar_push (TV_TREE_SSA_VERIFY);\n \n   /* Keep track of SSA names present in the IL.  */\n-  for (i = 1; i < num_ssa_names; i++)\n+  size_t i;\n+  tree name;\n+\n+  FOR_EACH_SSA_NAME (i, name, cfun)\n     {\n-      tree name = ssa_name (i);\n-      if (name)\n-\t{\n-\t  gimple *stmt;\n-\t  TREE_VISITED (name) = 0;\n+      gimple *stmt;\n+      TREE_VISITED (name) = 0;\n \n-\t  verify_ssa_name (name, virtual_operand_p (name));\n+      verify_ssa_name (name, virtual_operand_p (name));\n \n-\t  stmt = SSA_NAME_DEF_STMT (name);\n-\t  if (!gimple_nop_p (stmt))\n-\t    {\n-\t      basic_block bb = gimple_bb (stmt);\n-\t      if (verify_def (bb, definition_block,\n-\t\t\t      name, stmt, virtual_operand_p (name)))\n-\t\tgoto err;\n-\t    }\n+      stmt = SSA_NAME_DEF_STMT (name);\n+      if (!gimple_nop_p (stmt))\n+\t{\n+\t  basic_block bb = gimple_bb (stmt);\n+\t  if (verify_def (bb, definition_block,\n+\t\t\t  name, stmt, virtual_operand_p (name)))\n+\t    goto err;\n \t}\n     }\n "}, {"sha": "4496e1d044c0af0fe92eef08bb6b62cc25a7273a", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aa019a01e8278b12961c63fb457306e09cf13f/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=46aa019a01e8278b12961c63fb457306e09cf13f", "patch": "@@ -62,6 +62,10 @@ struct GTY ((variable_size)) range_info_def {\n #define num_ssa_names (vec_safe_length (cfun->gimple_df->ssa_names))\n #define ssa_name(i) ((*cfun->gimple_df->ssa_names)[(i)])\n \n+#define FOR_EACH_SSA_NAME(I, VAR, FN)\t\t\t\t\t\\\n+  for (I = 1; SSANAMES (FN)->iterate (I, &VAR); ++I)\t\t\t\\\n+    if (VAR)\n+\n /* Sets the value range to SSA.  */\n extern void set_range_info (tree, enum value_range_type, const wide_int_ref &,\n \t\t\t    const wide_int_ref &);"}]}