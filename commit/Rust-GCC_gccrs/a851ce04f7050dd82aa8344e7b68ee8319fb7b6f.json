{"sha": "a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1MWNlMDRmNzA1MGRkODJhYTgzNDRlN2I2OGVlODMxOWZiN2I2Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-11-17T13:15:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-11-17T13:15:34Z"}, "message": "re PR fortran/83017 (DO CONCURRENT not parallelizing)\n\n2017-11-17  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/83017\n\t* tree-parloops.c (MIN_PER_THREAD): Use --param parloops-min-per-thread.\n\t(gen_parallel_loop): Properly count iterations.\n\t(parallelize_loops): Handle loop->can_be_parallel independent\n\tof flag_loop_parallelize_all.  Make static profitability test match\n\tthe runtime one.\n\t* params.def (PARAM_PARLOOPS_MIN_PER_THREAD): New.\n\t* invoke.texi (parloops-min-per-thread): Document.\n\n\t* gcc.dg/autopar/pr49960.c: Adjust.\n\nFrom-SVN: r254867", "tree": {"sha": "4a4b34f1bfe2b59fb26c4e2471c1fff2655af4f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a4b34f1bfe2b59fb26c4e2471c1fff2655af4f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e716496a557f48cfdf7adb35f5be4e0945bd66e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e716496a557f48cfdf7adb35f5be4e0945bd66e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e716496a557f48cfdf7adb35f5be4e0945bd66e8"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "030a13ca282a87509a916b45e30cc3cd416ef996", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "patch": "@@ -1,3 +1,14 @@\n+2017-11-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83017\n+\t* tree-parloops.c (MIN_PER_THREAD): Use --param parloops-min-per-thread.\n+\t(gen_parallel_loop): Properly count iterations.\n+\t(parallelize_loops): Handle loop->can_be_parallel independent\n+\tof flag_loop_parallelize_all.  Make static profitability test match\n+\tthe runtime one.\n+\t* params.def (PARAM_PARLOOPS_MIN_PER_THREAD): New.\n+\t* invoke.texi (parloops-min-per-thread): Document.\n+\n 2017-11-17  Vineet Gupta  <vgupta@synopsys.com>\n \n \t* config/arc/linux.h: GLIBC_DYNAMIC_LINKER update per glibc"}, {"sha": "e18fa545fd2053991eeb33b51105f7d22406641f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "patch": "@@ -10816,6 +10816,12 @@ is 0.\n Schedule type of omp schedule for loops parallelized by parloops (static,\n dynamic, guided, auto, runtime).  The default is static.\n \n+@item parloops-min-per-thread\n+The minimum number of iterations per thread of an innermost parallelized\n+loop for which the parallelized variant is prefered over the single threaded\n+one.  The default is 100.  Note that for a parallelized loop nest the\n+minimum number of iterations of the outermost loop per thread is two.\n+\n @item max-ssa-name-query-depth\n Maximum depth of recursion when querying properties of SSA names in things\n like fold routines.  One level of recursion corresponds to following a"}, {"sha": "89915d4fc7fcde6bc36b016a920ff6258d88ae16", "filename": "gcc/params.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "patch": "@@ -1240,6 +1240,12 @@ DEFPARAMENUM5 (PARAM_PARLOOPS_SCHEDULE,\n \t       static,\n \t       static, dynamic, guided, auto, runtime)\n \n+DEFPARAM (PARAM_PARLOOPS_MIN_PER_THREAD,\n+\t  \"parloops-min-per-thread\",\n+\t  \"Minimum number of iterations per thread of an innermost \"\n+\t  \"parallelized loop.\",\n+\t  100, 2, 0)\n+\n DEFPARAM (PARAM_MAX_SSA_NAME_QUERY_DEPTH,\n \t  \"max-ssa-name-query-depth\",\n \t  \"Maximum recursion depth allowed when querying a property of an\""}, {"sha": "2238dae00f7f2e11bc67c5a93b9efa4d070c9913", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "patch": "@@ -1,3 +1,8 @@\n+2017-11-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83017\n+\t* gcc.dg/autopar/pr49960.c: Adjust.\n+\n 2017-11-17  Sudakshina Das  <sudi.das@arm.com>\n \n \t* gcc.target/arm/armv8_2-fp16-move-1.c: Edit vmov scan-assembler"}, {"sha": "447169d991ad94c32d428c9e4ede0d7793cb7a5c", "filename": "gcc/testsuite/gcc.dg/autopar/pr49960.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr49960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr49960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr49960.c?ref=a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "patch": "@@ -7,7 +7,8 @@\n #define MA 400\n \n int T[MA][MB],A[MA][NA],B[MB][NA];\n-void MRTRBR(int MA_1, int NA_1, int MB_1)\n+void __attribute__((noinline))\n+MRTRBR(int MA_1, int NA_1, int MB_1)\n {\n   int i,j, t,k;\n \n@@ -21,7 +22,7 @@ void MRTRBR(int MA_1, int NA_1, int MB_1)\n   /* The outer most loop is not parallel because for different k's there\n      is write-write dependency for T[i][j].  */\n   \n-  /* The two inner loops don't get parallelized due to low number of \n+  /* The innermost loop doesn't get parallelized due to low number of \n      iterations.  */\n \n   for (k = 3; k < NA_1; k++)\n@@ -38,7 +39,10 @@ void main ()\n   \n   for (i = 3; i < MA; i++)\n     for (j = 3; j < MB; j++)\n-      T[i][j] = (i>j?i:j);\n+      {\n+\t__asm__ volatile (\"\" : : : \"memory\");\n+\tT[i][j] = (i>j?i:j);\n+      }\n   \n   MRTRBR (MA,NA,MB);\n   \n@@ -48,7 +52,7 @@ void main ()\n }\n \n \n-/* Check that the outer most loop doesn't get parallelized (thus no loop gets parallelized)  */\n+/* Check that the outer most loop doesn't get parallelized.  */\n \n-/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 0 \"parloops2\" } } */\n-/* { dg-final { scan-tree-dump-times \"loopfn\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops2\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_GOMP_parallel\" 1 \"optimized\" } } */"}, {"sha": "643ab5719aecc29c8df5b5a091d4569e0de33e91", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "patch": "@@ -184,7 +184,7 @@ parloop\n \n /* Minimal number of iterations of a loop that should be executed in each\n    thread.  */\n-#define MIN_PER_THREAD 100\n+#define MIN_PER_THREAD PARAM_VALUE (PARAM_PARLOOPS_MIN_PER_THREAD)\n \n /* Element of the hashtable, representing a\n    reduction in the current loop.  */\n@@ -2336,7 +2336,7 @@ gen_parallel_loop (struct loop *loop,\n       gcc_checking_assert (n_threads != 0);\n       many_iterations_cond =\n \tfold_build2 (GE_EXPR, boolean_type_node,\n-\t\t     nit, build_int_cst (type, m_p_thread * n_threads));\n+\t\t     nit, build_int_cst (type, m_p_thread * n_threads - 1));\n \n       many_iterations_cond\n \t= fold_build2 (TRUTH_AND_EXPR, boolean_type_node,\n@@ -3299,15 +3299,6 @@ parallelize_loops (bool oacc_kernels_p)\n \t  fprintf (dump_file, \"loop %d is innermost\\n\",loop->num);\n       }\n \n-      /* If we use autopar in graphite pass, we use its marked dependency\n-      checking results.  */\n-      if (flag_loop_parallelize_all && !loop->can_be_parallel)\n-      {\n-        if (dump_file && (dump_flags & TDF_DETAILS))\n-\t   fprintf (dump_file, \"loop is not parallel according to graphite\\n\");\n-\tcontinue;\n-      }\n-\n       if (!single_dom_exit (loop))\n       {\n \n@@ -3325,15 +3316,17 @@ parallelize_loops (bool oacc_kernels_p)\n \t  || loop_has_vector_phi_nodes (loop))\n \tcontinue;\n \n-      estimated = estimated_stmt_executions_int (loop);\n+      estimated = estimated_loop_iterations_int (loop);\n       if (estimated == -1)\n-\testimated = likely_max_stmt_executions_int (loop);\n+\testimated = get_likely_max_loop_iterations_int (loop);\n       /* FIXME: Bypass this check as graphite doesn't update the\n \t count and frequency correctly now.  */\n       if (!flag_loop_parallelize_all\n \t  && !oacc_kernels_p\n \t  && ((estimated != -1\n-\t       && estimated <= (HOST_WIDE_INT) n_threads * MIN_PER_THREAD)\n+\t       && (estimated\n+\t\t   < ((HOST_WIDE_INT) n_threads\n+\t\t      * (loop->inner ? 2 : MIN_PER_THREAD) - 1)))\n \t      /* Do not bother with loops in cold areas.  */\n \t      || optimize_loop_nest_for_size_p (loop)))\n \tcontinue;\n@@ -3347,7 +3340,7 @@ parallelize_loops (bool oacc_kernels_p)\n       if (loop_has_phi_with_address_arg (loop))\n \tcontinue;\n \n-      if (!flag_loop_parallelize_all\n+      if (!loop->can_be_parallel\n \t  && !loop_parallel_p (loop, &parloop_obstack))\n \tcontinue;\n "}]}