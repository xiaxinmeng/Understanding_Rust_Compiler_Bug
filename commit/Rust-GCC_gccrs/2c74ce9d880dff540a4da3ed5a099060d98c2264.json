{"sha": "2c74ce9d880dff540a4da3ed5a099060d98c2264", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM3NGNlOWQ4ODBkZmY1NDBhNGRhM2VkNWEwOTkwNjBkOThjMjI2NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-10T01:38:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-10T01:38:17Z"}, "message": "20020108-1.c: Rewrite to choose the proper type in which to perform the operation for each size.\n\n        * gcc.c-torture/execute/20020108-1.c: Rewrite to choose the proper\n        type in which to perform the operation for each size.\n\nFrom-SVN: r48706", "tree": {"sha": "2e01b040614847ea25bb8e09f336427f52918ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e01b040614847ea25bb8e09f336427f52918ad9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c74ce9d880dff540a4da3ed5a099060d98c2264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c74ce9d880dff540a4da3ed5a099060d98c2264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c74ce9d880dff540a4da3ed5a099060d98c2264", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c74ce9d880dff540a4da3ed5a099060d98c2264/comments", "author": null, "committer": null, "parents": [{"sha": "c893e4a4792fcb224dd9288219be4ee9262798ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c893e4a4792fcb224dd9288219be4ee9262798ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c893e4a4792fcb224dd9288219be4ee9262798ae"}], "stats": {"total": 232, "additions": 128, "deletions": 104}, "files": [{"sha": "1f10c6f0945cf4ed7d399b0316e8c33e45397999", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c74ce9d880dff540a4da3ed5a099060d98c2264/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c74ce9d880dff540a4da3ed5a099060d98c2264/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c74ce9d880dff540a4da3ed5a099060d98c2264", "patch": "@@ -1,3 +1,8 @@\n+2002-01-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.c-torture/execute/20020108-1.c: Rewrite to choose the proper\n+\ttype in which to perform the operation for each size.\n+\n Wed Jan  9 16:48:33 2002  Alan Matsuoka  (alanm@redhat.com)\n \n \t* gcc.c-torture/compile/20020109-2.c: New test."}, {"sha": "58f96673be35a4367735d6512b6e90ecdc008560", "filename": "gcc/testsuite/gcc.c-torture/execute/20020108-1.c", "status": "modified", "additions": 123, "deletions": 104, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c74ce9d880dff540a4da3ed5a099060d98c2264/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020108-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c74ce9d880dff540a4da3ed5a099060d98c2264/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020108-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020108-1.c?ref=2c74ce9d880dff540a4da3ed5a099060d98c2264", "patch": "@@ -1,106 +1,124 @@\n-/* This file tests shifts in QImode, HImode, and SImode.  */\n+/* This file tests shifts in various integral modes.  */\n \n-#define CAT(A, B) A ## B\n+#include <limits.h>\n \n-/* Define 8-bit shifts.  */\n+#define CAT(A, B) A ## B\n \n-#define REPEAT_8\t\t\t\t\\\n-REPEAT_FN ( 0)\t\t\t\t\t\\\n-REPEAT_FN ( 1)\t\t\t\t\t\\\n-REPEAT_FN ( 2)\t\t\t\t\t\\\n-REPEAT_FN ( 3)\t\t\t\t\t\\\n-REPEAT_FN ( 4)\t\t\t\t\t\\\n-REPEAT_FN ( 5)\t\t\t\t\t\\\n-REPEAT_FN ( 6)\t\t\t\t\t\\\n+#define REPEAT_8\t\\\n+REPEAT_FN ( 0)\t\t\\\n+REPEAT_FN ( 1)\t\t\\\n+REPEAT_FN ( 2)\t\t\\\n+REPEAT_FN ( 3)\t\t\\\n+REPEAT_FN ( 4)\t\t\\\n+REPEAT_FN ( 5)\t\t\\\n+REPEAT_FN ( 6)\t\t\\\n REPEAT_FN ( 7)\n \n-typedef unsigned char uchar;\n-typedef signed char schar;\n+#define REPEAT_16\t\\\n+REPEAT_8\t\t\\\n+REPEAT_FN ( 8)\t\t\\\n+REPEAT_FN ( 9)\t\t\\\n+REPEAT_FN (10)\t\t\\\n+REPEAT_FN (11)\t\t\\\n+REPEAT_FN (12)\t\t\\\n+REPEAT_FN (13)\t\t\\\n+REPEAT_FN (14)\t\t\\\n+REPEAT_FN (15)\n+\n+#define REPEAT_32\t\\\n+REPEAT_16\t\t\\\n+REPEAT_FN (16)\t\t\\\n+REPEAT_FN (17)\t\t\\\n+REPEAT_FN (18)\t\t\\\n+REPEAT_FN (19)\t\t\\\n+REPEAT_FN (20)\t\t\\\n+REPEAT_FN (21)\t\t\\\n+REPEAT_FN (22)\t\t\\\n+REPEAT_FN (23)\t\t\\\n+REPEAT_FN (24)\t\t\\\n+REPEAT_FN (25)\t\t\\\n+REPEAT_FN (26)\t\t\\\n+REPEAT_FN (27)\t\t\\\n+REPEAT_FN (28)\t\t\\\n+REPEAT_FN (29)\t\t\\\n+REPEAT_FN (30)\t\t\\\n+REPEAT_FN (31)\n+\n+/* Define 8-bit shifts.  */\n+#if CHAR_BIT == 8\n+typedef unsigned int u8 __attribute__((mode(QI)));\n+typedef signed int s8 __attribute__((mode(QI)));\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\t\\\n-uchar CAT (ashift_qi_, COUNT) (uchar n) { return n << COUNT; }\n+#define REPEAT_FN(COUNT) \\\n+u8 CAT (ashift_qi_, COUNT) (u8 n) { return n << COUNT; }\n REPEAT_8\n #undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n-uchar CAT (lshiftrt_qi_, COUNT) (uchar n) { return n >> COUNT; }\n+#define REPEAT_FN(COUNT) \\\n+u8 CAT (lshiftrt_qi_, COUNT) (u8 n) { return n >> COUNT; }\n REPEAT_8\n #undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n-schar CAT (ashiftrt_qi_, COUNT) (schar n) { return n >> COUNT; }\n+#define REPEAT_FN(COUNT) \\\n+s8 CAT (ashiftrt_qi_, COUNT) (s8 n) { return n >> COUNT; }\n REPEAT_8\n #undef REPEAT_FN\n+#endif /* CHAR_BIT == 8 */\n \n /* Define 16-bit shifts.  */\n-\n-#define REPEAT_16\t\t\t\t\\\n-REPEAT_8\t\t\t\t\t\\\n-REPEAT_FN ( 8)\t\t\t\t\t\\\n-REPEAT_FN ( 9)\t\t\t\t\t\\\n-REPEAT_FN (10)\t\t\t\t\t\\\n-REPEAT_FN (11)\t\t\t\t\t\\\n-REPEAT_FN (12)\t\t\t\t\t\\\n-REPEAT_FN (13)\t\t\t\t\t\\\n-REPEAT_FN (14)\t\t\t\t\t\\\n-REPEAT_FN (15)\n-\n-typedef unsigned short ushort;\n-typedef signed short sshort;\n-\n-#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n-ushort CAT (ashift_hi_, COUNT) (ushort n) { return n << COUNT; }\n+#if CHAR_BIT == 8 || CHAR_BIT == 16\n+#if CHAR_BIT == 8\n+typedef unsigned int u16 __attribute__((mode(HI)));\n+typedef signed int s16 __attribute__((mode(HI)));\n+#elif CHAR_BIT == 16\n+typedef unsigned int u16 __attribute__((mode(QI)));\n+typedef signed int s16 __attribute__((mode(QI)));\n+#endif\n+\n+#define REPEAT_FN(COUNT) \\\n+u16 CAT (ashift_hi_, COUNT) (u16 n) { return n << COUNT; }\n REPEAT_16\n #undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n-ushort CAT (lshiftrt_hi_, COUNT) (ushort n) { return n >> COUNT; }\n+#define REPEAT_FN(COUNT) \\\n+u16 CAT (lshiftrt_hi_, COUNT) (u16 n) { return n >> COUNT; }\n REPEAT_16\n #undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n-sshort CAT (ashiftrt_hi_, COUNT) (sshort n) { return n >> COUNT; }\n+#define REPEAT_FN(COUNT) \\\n+s16 CAT (ashiftrt_hi_, COUNT) (s16 n) { return n >> COUNT; }\n REPEAT_16\n #undef REPEAT_FN\n+#endif /* CHAR_BIT == 8 || CHAR_BIT == 16 */\n \n /* Define 32-bit shifts.  */\n-\n-#define REPEAT_32\t\t\t\t\\\n-REPEAT_16\t\t\t\t\t\\\n-REPEAT_FN (16)\t\t\t\t\t\\\n-REPEAT_FN (17)\t\t\t\t\t\\\n-REPEAT_FN (18)\t\t\t\t\t\\\n-REPEAT_FN (19)\t\t\t\t\t\\\n-REPEAT_FN (20)\t\t\t\t\t\\\n-REPEAT_FN (21)\t\t\t\t\t\\\n-REPEAT_FN (22)\t\t\t\t\t\\\n-REPEAT_FN (23)\t\t\t\t\t\\\n-REPEAT_FN (24)\t\t\t\t\t\\\n-REPEAT_FN (25)\t\t\t\t\t\\\n-REPEAT_FN (26)\t\t\t\t\t\\\n-REPEAT_FN (27)\t\t\t\t\t\\\n-REPEAT_FN (28)\t\t\t\t\t\\\n-REPEAT_FN (29)\t\t\t\t\t\\\n-REPEAT_FN (30)\t\t\t\t\t\\\n-REPEAT_FN (31)\n-\n-typedef unsigned long ulong;\n-typedef signed long slong;\n-\n-#define REPEAT_FN(COUNT)\t\t\t\t\t\\\n-ulong CAT (ashift_si_, COUNT) (ulong n) { return n << COUNT; }\n+#if CHAR_BIT == 8 || CHAR_BIT == 16 || CHAR_BIT == 32\n+#if CHAR_BIT == 8\n+typedef unsigned int u32 __attribute__((mode(SI)));\n+typedef signed int s32 __attribute__((mode(SI)));\n+#elif CHAR_BIT == 16\n+typedef unsigned int u32 __attribute__((mode(HI)));\n+typedef signed int s32 __attribute__((mode(HI)));\n+#elif CHAR_BIT == 32\n+typedef unsigned int u32 __attribute__((mode(QI)));\n+typedef signed int s32 __attribute__((mode(QI)));\n+#endif\n+\n+#define REPEAT_FN(COUNT) \\\n+u32 CAT (ashift_si_, COUNT) (u32 n) { return n << COUNT; }\n REPEAT_32\n #undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n-ulong CAT (lshiftrt_si_, COUNT) (ulong n) { return n >> COUNT; }\n+#define REPEAT_FN(COUNT) \\\n+u32 CAT (lshiftrt_si_, COUNT) (u32 n) { return n >> COUNT; }\n REPEAT_32\n #undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\t\t\\\n-slong CAT (ashiftrt_si_, COUNT) (slong n) { return n >> COUNT; }\n+#define REPEAT_FN(COUNT) \\\n+s32 CAT (ashiftrt_si_, COUNT) (s32 n) { return n >> COUNT; }\n REPEAT_32\n #undef REPEAT_FN\n+#endif /* CHAR_BIT == 8 || CHAR_BIT == 16 || CHAR_BIT == 32 */\n \n extern void abort (void);\n extern void exit (int);\n@@ -109,76 +127,77 @@ int\n main ()\n {\n   /* Test 8-bit shifts.  */\n-\n-#define REPEAT_FN(COUNT)\t\t\t\\\n-  if (CAT (ashift_qi_, COUNT) (0xff)\t\t\\\n-      != (uchar) (0xff << COUNT)) abort ();\n+#if CHAR_BIT == 8\n+# define REPEAT_FN(COUNT) \\\n+  if (CAT (ashift_qi_, COUNT) (0xff) != (u8) ((u8)0xff << COUNT)) abort ();\n   REPEAT_8;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\\\n-  if (CAT (lshiftrt_qi_, COUNT) (0xff)\t\\\n-      != (uchar) (0xff >> COUNT)) abort ();\n+# define REPEAT_FN(COUNT) \\\n+  if (CAT (lshiftrt_qi_, COUNT) (0xff) != (u8) ((u8)0xff >> COUNT)) abort ();\n   REPEAT_8;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\\\n+# define REPEAT_FN(COUNT) \\\n   if (CAT (ashiftrt_qi_, COUNT) (-1) != -1) abort ();\n   REPEAT_8;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\\\n+# define REPEAT_FN(COUNT) \\\n   if (CAT (ashiftrt_qi_, COUNT) (0) != 0) abort ();\n   REPEAT_8;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n+#endif /* CHAR_BIT == 8 */\n \n   /* Test 16-bit shifts.  */\n-\n-#define REPEAT_FN(COUNT)\t\t\t\\\n+#if CHAR_BIT == 8 || CHAR_BIT == 16\n+# define REPEAT_FN(COUNT)\t\t\t\\\n   if (CAT (ashift_hi_, COUNT) (0xffff)\t\t\\\n-      != (ushort) (0xffff << COUNT)) abort ();\n+      != (u16) ((u16) 0xffff << COUNT)) abort ();\n   REPEAT_16;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\\\n+# define REPEAT_FN(COUNT)\t\t\t\\\n   if (CAT (lshiftrt_hi_, COUNT) (0xffff)\t\\\n-      != (ushort) (0xffff >> COUNT)) abort ();\n+      != (u16) ((u16) 0xffff >> COUNT)) abort ();\n   REPEAT_16;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\\\n+# define REPEAT_FN(COUNT) \\\n   if (CAT (ashiftrt_hi_, COUNT) (-1) != -1) abort ();\n   REPEAT_16;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\\\n+# define REPEAT_FN(COUNT) \\\n   if (CAT (ashiftrt_hi_, COUNT) (0) != 0) abort ();\n   REPEAT_16;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n+#endif /* CHAR_BIT == 8 || CHAR_BIT == 16 */\n \n   /* Test 32-bit shifts.  */\n-\n-#define REPEAT_FN(COUNT)\t\t\t\t\\\n+#if CHAR_BIT == 8 || CHAR_BIT == 16 || CHAR_BIT == 32\n+# define REPEAT_FN(COUNT)\t\t\t\t\\\n   if (CAT (ashift_si_, COUNT) (0xffffffff)\t\t\\\n-      != (ulong) (0xffffffff << COUNT)) abort ();\n+      != (u32) ((u32) 0xffffffff << COUNT)) abort ();\n   REPEAT_32;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\\\n+# define REPEAT_FN(COUNT)\t\t\t\t\\\n   if (CAT (lshiftrt_si_, COUNT) (0xffffffff)\t\t\\\n-      != (ulong) (0xffffffff >> COUNT)) abort ();\n+      != (u32) ((u32) 0xffffffff >> COUNT)) abort ();\n   REPEAT_32;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\\\n+# define REPEAT_FN(COUNT) \\\n   if (CAT (ashiftrt_si_, COUNT) (-1) != -1) abort ();\n   REPEAT_32;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n \n-#define REPEAT_FN(COUNT)\t\t\t\t\\\n+# define REPEAT_FN(COUNT) \\\n   if (CAT (ashiftrt_si_, COUNT) (0) != 0) abort ();\n   REPEAT_32;\n-#undef REPEAT_FN\n+# undef REPEAT_FN\n+#endif /* CHAR_BIT == 8 || CHAR_BIT == 16 || CHAR_BIT == 32 */\n \n   exit (0);\n }"}]}