{"sha": "a688c284dd3848b6c4ea553035f0f9769fb4fbc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY4OGMyODRkZDM4NDhiNmM0ZWE1NTMwMzVmMGY5NzY5ZmI0ZmJjOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-01T00:44:52Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-01T00:44:52Z"}, "message": "c++: cxx_eval_array_reference and empty elem type [PR101194]\n\nHere the initializer for x is represented as an empty CONSTRUCTOR due to\nits empty element type.  So during constexpr evaluation of the ARRAY_REF\nx[0], we end up trying to value initialize the omitted element at index 0,\nwhich fails because the element type is not default constructible.\n\nThis patch makes cxx_eval_array_reference specifically handle the case\nwhere the element type is an empty type.\n\n\tPR c++/101194\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (cxx_eval_array_reference): When the element type\n\tis an empty type and the corresponding element is omitted, just\n\treturn an empty CONSTRUCTOR instead of attempting value\n\tinitialization.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-empty16.C: New test.", "tree": {"sha": "b1f5e3e737b4d9af203fe878a0f6c7652e29e775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1f5e3e737b4d9af203fe878a0f6c7652e29e775"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a688c284dd3848b6c4ea553035f0f9769fb4fbc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a688c284dd3848b6c4ea553035f0f9769fb4fbc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a688c284dd3848b6c4ea553035f0f9769fb4fbc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a688c284dd3848b6c4ea553035f0f9769fb4fbc9/comments", "author": null, "committer": null, "parents": [{"sha": "613497aa6e28ca009d8498002424019d2a8a9ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613497aa6e28ca009d8498002424019d2a8a9ca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/613497aa6e28ca009d8498002424019d2a8a9ca5"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "39787f3f5d5a45dd54272641818ff6a1bbe5b5db", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a688c284dd3848b6c4ea553035f0f9769fb4fbc9/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a688c284dd3848b6c4ea553035f0f9769fb4fbc9/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=a688c284dd3848b6c4ea553035f0f9769fb4fbc9", "patch": "@@ -3845,7 +3845,9 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n      directly for non-aggregates to avoid creating a garbage CONSTRUCTOR.  */\n   tree val;\n   constexpr_ctx new_ctx;\n-  if (CP_AGGREGATE_TYPE_P (elem_type))\n+  if (is_really_empty_class (elem_type, /*ignore_vptr*/false))\n+    return build_constructor (elem_type, NULL);\n+  else if (CP_AGGREGATE_TYPE_P (elem_type))\n     {\n       tree empty_ctor = build_constructor (init_list_type_node, NULL);\n       val = digest_init (elem_type, empty_ctor, tf_warning_or_error);"}, {"sha": "79be244a1d0748239482192a4d7409ae0150f05b", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-empty16.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a688c284dd3848b6c4ea553035f0f9769fb4fbc9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a688c284dd3848b6c4ea553035f0f9769fb4fbc9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty16.C?ref=a688c284dd3848b6c4ea553035f0f9769fb4fbc9", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/101194\n+// { dg-do compile { target c++11 } }\n+\n+struct nodefault {\n+  constexpr nodefault(int) { }\n+};\n+\n+constexpr nodefault x[1] = { nodefault{0} };\n+\n+constexpr nodefault y = x[0];"}]}