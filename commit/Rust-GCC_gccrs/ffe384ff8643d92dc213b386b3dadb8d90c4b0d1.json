{"sha": "ffe384ff8643d92dc213b386b3dadb8d90c4b0d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlMzg0ZmY4NjQzZDkyZGMyMTNiMzg2YjNkYWRiOGQ5MGM0YjBkMQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@nuts.davemloft.net", "date": "2004-07-10T01:47:48Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2004-07-10T01:47:48Z"}, "message": "sparc.c (*_costs): Scale instruction costs by COSTS_N_INSNS.\n\n2004-07-09  David S. Miller  <davem@nuts.davemloft.net>\n\n\t* config/sparc/sparc.c (*_costs): Scale instruction costs\n\tby COSTS_N_INSNS.\n\t(sparc_rtx_costs): Adjust as appropriate.\n\nFrom-SVN: r84429", "tree": {"sha": "60da6d2446da23d0f58d1bcda39e87c77dd9c006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60da6d2446da23d0f58d1bcda39e87c77dd9c006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffe384ff8643d92dc213b386b3dadb8d90c4b0d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe384ff8643d92dc213b386b3dadb8d90c4b0d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe384ff8643d92dc213b386b3dadb8d90c4b0d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe384ff8643d92dc213b386b3dadb8d90c4b0d1/comments", "author": null, "committer": null, "parents": [{"sha": "0c2a4754bc69f5642d1db07ecde1fa610404b745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2a4754bc69f5642d1db07ecde1fa610404b745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2a4754bc69f5642d1db07ecde1fa610404b745"}], "stats": {"total": 227, "additions": 117, "deletions": 110}, "files": [{"sha": "a7d6eaab1c6d12f5bd6931efc003b240aae97eca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe384ff8643d92dc213b386b3dadb8d90c4b0d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe384ff8643d92dc213b386b3dadb8d90c4b0d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffe384ff8643d92dc213b386b3dadb8d90c4b0d1", "patch": "@@ -1,3 +1,9 @@\n+2004-07-09  David S. Miller  <davem@nuts.davemloft.net>\n+\n+\t* config/sparc/sparc.c (*_costs): Scale instruction costs\n+\tby COSTS_N_INSNS.\n+\t(sparc_rtx_costs): Adjust as appropriate.\n+\n 2004-07-09  Jan Beulich  <jbeulich@novell.com>\n \n \t* config/i386/mm3dnow.h: New."}, {"sha": "e87b29e994d67cc4974390cb93d08f025e8bef39", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 111, "deletions": 110, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe384ff8643d92dc213b386b3dadb8d90c4b0d1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe384ff8643d92dc213b386b3dadb8d90c4b0d1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ffe384ff8643d92dc213b386b3dadb8d90c4b0d1", "patch": "@@ -52,145 +52,145 @@ Boston, MA 02111-1307, USA.  */\n /* Processor costs */\n static const\n struct processor_costs cypress_costs = {\n-  2, /* int load */\n-  2, /* int signed load */\n-  2, /* int zeroed load */\n-  2, /* float load */\n-  5, /* fmov, fneg, fabs */\n-  5, /* fadd, fsub */\n-  1, /* fcmp */\n-  1, /* fmov, fmovr */\n-  7, /* fmul */\n-  37, /* fdivs */\n-  37, /* fdivd */\n-  63, /* fsqrts */\n-  63, /* fsqrtd */\n-  1, /* imul */\n-  1, /* imulX */\n+  COSTS_N_INSNS (2), /* int load */\n+  COSTS_N_INSNS (2), /* int signed load */\n+  COSTS_N_INSNS (2), /* int zeroed load */\n+  COSTS_N_INSNS (2), /* float load */\n+  COSTS_N_INSNS (5), /* fmov, fneg, fabs */\n+  COSTS_N_INSNS (5), /* fadd, fsub */\n+  COSTS_N_INSNS (1), /* fcmp */\n+  COSTS_N_INSNS (1), /* fmov, fmovr */\n+  COSTS_N_INSNS (7), /* fmul */\n+  COSTS_N_INSNS (37), /* fdivs */\n+  COSTS_N_INSNS (37), /* fdivd */\n+  COSTS_N_INSNS (63), /* fsqrts */\n+  COSTS_N_INSNS (63), /* fsqrtd */\n+  COSTS_N_INSNS (1), /* imul */\n+  COSTS_N_INSNS (1), /* imulX */\n   0, /* imul bit factor */\n-  1, /* idiv */\n-  1, /* idivX */\n-  1, /* movcc/movr */\n+  COSTS_N_INSNS (1), /* idiv */\n+  COSTS_N_INSNS (1), /* idivX */\n+  COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n };\n \n static const\n struct processor_costs supersparc_costs = {\n-  1, /* int load */\n-  1, /* int signed load */\n-  1, /* int zeroed load */\n-  0, /* float load */\n-  3, /* fmov, fneg, fabs */\n-  3, /* fadd, fsub */\n-  3, /* fcmp */\n-  1, /* fmov, fmovr */\n-  3, /* fmul */\n-  6, /* fdivs */\n-  9, /* fdivd */\n-  12, /* fsqrts */\n-  12, /* fsqrtd */\n-  4, /* imul */\n-  4, /* imulX */\n+  COSTS_N_INSNS (1), /* int load */\n+  COSTS_N_INSNS (1), /* int signed load */\n+  COSTS_N_INSNS (1), /* int zeroed load */\n+  COSTS_N_INSNS (0), /* float load */\n+  COSTS_N_INSNS (3), /* fmov, fneg, fabs */\n+  COSTS_N_INSNS (3), /* fadd, fsub */\n+  COSTS_N_INSNS (3), /* fcmp */\n+  COSTS_N_INSNS (1), /* fmov, fmovr */\n+  COSTS_N_INSNS (3), /* fmul */\n+  COSTS_N_INSNS (6), /* fdivs */\n+  COSTS_N_INSNS (9), /* fdivd */\n+  COSTS_N_INSNS (12), /* fsqrts */\n+  COSTS_N_INSNS (12), /* fsqrtd */\n+  COSTS_N_INSNS (4), /* imul */\n+  COSTS_N_INSNS (4), /* imulX */\n   0, /* imul bit factor */\n-  4, /* idiv */\n-  4, /* idivX */\n-  1, /* movcc/movr */\n+  COSTS_N_INSNS (4), /* idiv */\n+  COSTS_N_INSNS (4), /* idivX */\n+  COSTS_N_INSNS (1), /* movcc/movr */\n   1, /* shift penalty */\n };\n \n static const\n struct processor_costs hypersparc_costs = {\n-  1, /* int load */\n-  1, /* int signed load */\n-  1, /* int zeroed load */\n-  1, /* float load */\n-  1, /* fmov, fneg, fabs */\n-  1, /* fadd, fsub */\n-  1, /* fcmp */\n-  1, /* fmov, fmovr */\n-  1, /* fmul */\n-  8, /* fdivs */\n-  12, /* fdivd */\n-  17, /* fsqrts */\n-  17, /* fsqrtd */\n-  17, /* imul */\n-  17, /* imulX */\n+  COSTS_N_INSNS (1), /* int load */\n+  COSTS_N_INSNS (1), /* int signed load */\n+  COSTS_N_INSNS (1), /* int zeroed load */\n+  COSTS_N_INSNS (1), /* float load */\n+  COSTS_N_INSNS (1), /* fmov, fneg, fabs */\n+  COSTS_N_INSNS (1), /* fadd, fsub */\n+  COSTS_N_INSNS (1), /* fcmp */\n+  COSTS_N_INSNS (1), /* fmov, fmovr */\n+  COSTS_N_INSNS (1), /* fmul */\n+  COSTS_N_INSNS (8), /* fdivs */\n+  COSTS_N_INSNS (12), /* fdivd */\n+  COSTS_N_INSNS (17), /* fsqrts */\n+  COSTS_N_INSNS (17), /* fsqrtd */\n+  COSTS_N_INSNS (17), /* imul */\n+  COSTS_N_INSNS (17), /* imulX */\n   0, /* imul bit factor */\n-  17, /* idiv */\n-  17, /* idivX */\n-  1, /* movcc/movr */\n+  COSTS_N_INSNS (17), /* idiv */\n+  COSTS_N_INSNS (17), /* idivX */\n+  COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n };\n \n static const\n struct processor_costs sparclet_costs = {\n-  3, /* int load */\n-  3, /* int signed load */\n-  1, /* int zeroed load */\n-  1, /* float load */\n-  1, /* fmov, fneg, fabs */\n-  1, /* fadd, fsub */\n-  1, /* fcmp */\n-  1, /* fmov, fmovr */\n-  1, /* fmul */\n-  1, /* fdivs */\n-  1, /* fdivd */\n-  1, /* fsqrts */\n-  1, /* fsqrtd */\n-  5, /* imul */\n-  5, /* imulX */\n+  COSTS_N_INSNS (3), /* int load */\n+  COSTS_N_INSNS (3), /* int signed load */\n+  COSTS_N_INSNS (1), /* int zeroed load */\n+  COSTS_N_INSNS (1), /* float load */\n+  COSTS_N_INSNS (1), /* fmov, fneg, fabs */\n+  COSTS_N_INSNS (1), /* fadd, fsub */\n+  COSTS_N_INSNS (1), /* fcmp */\n+  COSTS_N_INSNS (1), /* fmov, fmovr */\n+  COSTS_N_INSNS (1), /* fmul */\n+  COSTS_N_INSNS (1), /* fdivs */\n+  COSTS_N_INSNS (1), /* fdivd */\n+  COSTS_N_INSNS (1), /* fsqrts */\n+  COSTS_N_INSNS (1), /* fsqrtd */\n+  COSTS_N_INSNS (5), /* imul */\n+  COSTS_N_INSNS (5), /* imulX */\n   0, /* imul bit factor */\n-  5, /* idiv */\n-  5, /* idivX */\n-  1, /* movcc/movr */\n+  COSTS_N_INSNS (5), /* idiv */\n+  COSTS_N_INSNS (5), /* idivX */\n+  COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n };\n \n static const\n struct processor_costs ultrasparc_costs = {\n-  2, /* int load */\n-  3, /* int signed load */\n-  2, /* int zeroed load */\n-  2, /* float load */\n-  1, /* fmov, fneg, fabs */\n-  4, /* fadd, fsub */\n-  1, /* fcmp */\n-  2, /* fmov, fmovr */\n-  4, /* fmul */\n-  13, /* fdivs */\n-  23, /* fdivd */\n-  13, /* fsqrts */\n-  23, /* fsqrtd */\n-  4, /* imul */\n-  4, /* imulX */\n+  COSTS_N_INSNS (2), /* int load */\n+  COSTS_N_INSNS (3), /* int signed load */\n+  COSTS_N_INSNS (2), /* int zeroed load */\n+  COSTS_N_INSNS (2), /* float load */\n+  COSTS_N_INSNS (1), /* fmov, fneg, fabs */\n+  COSTS_N_INSNS (4), /* fadd, fsub */\n+  COSTS_N_INSNS (1), /* fcmp */\n+  COSTS_N_INSNS (2), /* fmov, fmovr */\n+  COSTS_N_INSNS (4), /* fmul */\n+  COSTS_N_INSNS (13), /* fdivs */\n+  COSTS_N_INSNS (23), /* fdivd */\n+  COSTS_N_INSNS (13), /* fsqrts */\n+  COSTS_N_INSNS (23), /* fsqrtd */\n+  COSTS_N_INSNS (4), /* imul */\n+  COSTS_N_INSNS (4), /* imulX */\n   2, /* imul bit factor */\n-  37, /* idiv */\n-  68, /* idivX */\n-  2, /* movcc/movr */\n+  COSTS_N_INSNS (37), /* idiv */\n+  COSTS_N_INSNS (68), /* idivX */\n+  COSTS_N_INSNS (2), /* movcc/movr */\n   2, /* shift penalty */\n };\n \n static const\n struct processor_costs ultrasparc3_costs = {\n-  2, /* int load */\n-  3, /* int signed load */\n-  3, /* int zeroed load */\n-  2, /* float load */\n-  3, /* fmov, fneg, fabs */\n-  4, /* fadd, fsub */\n-  5, /* fcmp */\n-  3, /* fmov, fmovr */\n-  4, /* fmul */\n-  17, /* fdivs */\n-  20, /* fdivd */\n-  20, /* fsqrts */\n-  29, /* fsqrtd */\n-  6, /* imul */\n-  6, /* imulX */\n+  COSTS_N_INSNS (2), /* int load */\n+  COSTS_N_INSNS (3), /* int signed load */\n+  COSTS_N_INSNS (3), /* int zeroed load */\n+  COSTS_N_INSNS (2), /* float load */\n+  COSTS_N_INSNS (3), /* fmov, fneg, fabs */\n+  COSTS_N_INSNS (4), /* fadd, fsub */\n+  COSTS_N_INSNS (5), /* fcmp */\n+  COSTS_N_INSNS (3), /* fmov, fmovr */\n+  COSTS_N_INSNS (4), /* fmul */\n+  COSTS_N_INSNS (17), /* fdivs */\n+  COSTS_N_INSNS (20), /* fdivd */\n+  COSTS_N_INSNS (20), /* fsqrts */\n+  COSTS_N_INSNS (29), /* fsqrtd */\n+  COSTS_N_INSNS (6), /* imul */\n+  COSTS_N_INSNS (6), /* imulX */\n   0, /* imul bit factor */\n-  40, /* idiv */\n-  71, /* idivX */\n-  2, /* movcc/movr */\n+  COSTS_N_INSNS (40), /* idiv */\n+  COSTS_N_INSNS (71), /* idivX */\n+  COSTS_N_INSNS (2), /* movcc/movr */\n   0, /* shift penalty */\n };\n \n@@ -8350,12 +8350,13 @@ sparc_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t      if (nbits < 3)\n \t\tnbits = 3;\n \t      bit_cost = (nbits - 3) / sparc_costs->int_mul_bit_factor;\n+\t      bit_cost = COSTS_N_INSNS (bit_cost);\n \t    }\n \n \t  if (mode == DImode)\n-\t    *total = COSTS_N_INSNS (sparc_costs->int_mulX) + bit_cost;\n+\t    *total = sparc_costs->int_mulX + bit_cost;\n \t  else\n-\t    *total = COSTS_N_INSNS (sparc_costs->int_mul) + bit_cost;\n+\t    *total = sparc_costs->int_mul + bit_cost;\n \t}\n       return false;\n "}]}