{"sha": "477946a63dee474c725243ae0d998f4cba1bfc0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3OTQ2YTYzZGVlNDc0YzcyNTI0M2FlMGQ5OThmNGNiYTFiZmMwYQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2001-10-01T18:24:54Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2001-10-01T18:24:54Z"}, "message": "FileWriter.java: Merge with Classpath.\n\n\t* java/io/FileWriter.java: Merge with Classpath.\n\t* java/io/FilterInputStream.java: Ditto.\n\t(mark): no longer synchronized\n\t(reset): Likewise\n\t* java/io/FilterOutputStream.java: Merge with Classpath.\n\t* java/io/FilterReader.java: Ditto.\n\t(mark): no longer synchronized\n\t(reset): Likewise\n\t* java/io/FilterWriter.java: Merge with Classpath.\n\t* java/io/Writer.java: Ditto.\n\t* java/lang/Compiler.java: Ditto.\n\t* java/lang/Process.java: Ditto.\n\t* java/lang/Void.java: Ditto.\n\t* java/net/ContentHandler.java: Ditto.\n\t* java/net/DatagramPacket.java: Ditto.\n\t* java/net/MulticastSocket.java: Merge comments with Classpath.\n\nFrom-SVN: r45930", "tree": {"sha": "4dda11c70f74fbaee3eeeac3ddfd3597c909ea23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dda11c70f74fbaee3eeeac3ddfd3597c909ea23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/477946a63dee474c725243ae0d998f4cba1bfc0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477946a63dee474c725243ae0d998f4cba1bfc0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477946a63dee474c725243ae0d998f4cba1bfc0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477946a63dee474c725243ae0d998f4cba1bfc0a/comments", "author": null, "committer": null, "parents": [{"sha": "be55d07d6f4666c031950dc610bdb3fe85c007b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be55d07d6f4666c031950dc610bdb3fe85c007b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be55d07d6f4666c031950dc610bdb3fe85c007b5"}], "stats": {"total": 2073, "additions": 1660, "deletions": 413}, "files": [{"sha": "c7e3a57c6a8bd846c8cd690616432d6faba445d7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,3 +1,22 @@\n+2001-10-01  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/io/FileWriter.java: Merge with Classpath.\n+\t* java/io/FilterInputStream.java: Ditto.\n+\t(mark): no longer synchronized\n+\t(reset): Likewise\n+\t* java/io/FilterOutputStream.java: Merge with Classpath.\n+\t* java/io/FilterReader.java: Ditto.\n+\t(mark): no longer synchronized\n+\t(reset): Likewise\n+\t* java/io/FilterWriter.java: Merge with Classpath.\n+\t* java/io/Writer.java: Ditto.\n+\t* java/lang/Compiler.java: Ditto.\n+\t* java/lang/Process.java: Ditto.\n+\t* java/lang/Void.java: Ditto.\n+\t* java/net/ContentHandler.java: Ditto.\n+\t* java/net/DatagramPacket.java: Ditto.\n+\t* java/net/MulticastSocket.java: Merge comments with Classpath.\n+\n 2001-09-30  Mark Wielaard  <mark@klomp.org>\n \n \t* java/io/DataInput.java:  Merge with Classpath."}, {"sha": "53e36589f699bd04319372759277570e24721f27", "filename": "libjava/java/io/FileWriter.java", "status": "modified", "additions": 112, "deletions": 30, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FFileWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FFileWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileWriter.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,44 +1,126 @@\n-// FileWriter.java - Character output to a file.\n+/* FileWriter.java -- Convenience class for writing to files.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 25, 1998 \n- */\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to version 1.1.\n  */\n \n+/**\n+  * This is a convenience class for writing to files.  It creates an\n+  * <code>FileOutputStream</code> and initializes an \n+  * <code>OutputStreamWriter</code> to write to it.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  */\n public class FileWriter extends OutputStreamWriter\n {\n-  public FileWriter (String fileName) throws IOException\n-  {\n-    super (new FileOutputStream (fileName));\n-  }\n-\n-  public FileWriter (String fileName, boolean append) throws IOException\n-  {\n-    super (new FileOutputStream (fileName, append));\n-  }\n-\n-  public FileWriter (File file) throws IOException\n-  {\n-    super (new FileOutputStream (file));\n-  }\n-\n-  public FileWriter (FileDescriptor fd)\n-  {\n-    super (new FileOutputStream (fd));\n-  }\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+ \n+/**\n+  * This method initializes a new <code>FileWriter</code> object to write\n+  * to the specified <code>File</code> object.\n+  *\n+  * @param file The <code>File</code> object to write to.\n+  *\n+  * @param SecurityException If writing to this file is forbidden by the\n+  *                          <code>SecurityManager</code>.\n+  * @param IOException If any other error occurs\n+  */\n+public \n+FileWriter(File file) throws SecurityException, IOException\n+{\n+  super(new FileOutputStream(file));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new <code>FileWriter</code> object to write\n+  * to the specified <code>FileDescriptor</code> object.\n+  *\n+  * @param fd The <code>FileDescriptor</code> object to write to\n+  *\n+  * @param SecurityException If writing to this file is forbidden by the\n+  *                          <code>SecurityManager</code>.\n+  */\n+public\n+FileWriter(FileDescriptor fd) throws SecurityException\n+{\n+  super(new FileOutputStream(fd));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method intializes a new <code>FileWriter</code> object to write to the\n+  * specified named file.\n+  *\n+  * @param name The name of the file to write to\n+  *\n+  * @param SecurityException If writing to this file is forbidden by the\n+  *                          <code>SecurityManager</code>.\n+  * @param IOException If any other error occurs\n+  */\n+public\n+FileWriter(String name) throws IOException\n+{\n+  super(new FileOutputStream(name));\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method intializes a new <code>FileWriter</code> object to write to the\n+  * specified named file.  This form of the constructor allows the caller\n+  * to determin whether data should be written starting at the beginning or\n+  * the end of the file.\n+  *\n+  * @param name The name of the file to write to\n+  * @param append <code>true</code> to start adding data at the end of the\n+  *               file, <code>false</code> otherwise.\n+  *\n+  * @param SecurityException If writing to this file is forbidden by the\n+  *                          <code>SecurityManager</code>.\n+  * @param IOException If any other error occurs\n+  */\n+public\n+FileWriter(String name, boolean append) throws IOException\n+{\n+  super(new FileOutputStream(name, append));\n+}\n+\n+} // class FileWriter\n+"}, {"sha": "5b09312184e42139edf896f865c712c55e8600c7", "filename": "libjava/java/io/FilterInputStream.java", "status": "modified", "additions": 224, "deletions": 62, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FFilterInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FFilterInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilterInputStream.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,75 +1,237 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* FilterInputStream.java -- Base class for classes that filter input\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.io;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date October 8, 1998.  \n- */\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+  * This is the common superclass of all standard classes that filter \n+  * input.  It acts as a layer on top of an underlying <code>InputStream</code>\n+  * and simply redirects calls made to it to the subordinate InputStream\n+  * instead.  Subclasses of this class perform additional filtering\n+  * functions in addition to simply redirecting the call.\n+  * <p>\n+  * This class is not abstract.  However, since it only redirects calls\n+  * to a subordinate <code>InputStream</code> without adding any functionality\n+  * on top of it, this class should not be used directly.  Instead, various\n+  * subclasses of this class should be used.  This is enforced with a\n+  * protected constructor.  Do not try to hack around it.\n+  * <p>\n+  * When creating a subclass of <code>FilterInputStream</code>, override the\n+  * appropriate methods to implement the desired filtering.  However, note\n+  * that the <code>read(byte[])</code> method does not need to be overridden\n+  * as this class redirects calls to that method to \n+  * <code>read(byte[], int, int)</code> instead of to the subordinate\n+  * <code>InputStream read(byte[])</code> method.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  */\n public class FilterInputStream extends InputStream\n {\n-  /* The input stream to be filtered. */\n-  protected InputStream in;\n-\n-  protected FilterInputStream(InputStream in)\n-  {\n-    this.in = in; \n-  }\n-\n-  public int available() throws IOException\n-  {\n-    return in.available();\n-  }\n-\n-  public void close() throws IOException\n-  {\n-    in.close();\n-  }\n-\n-  public synchronized void mark(int readlimit)\n-  {\n-    in.mark(readlimit);\n-  }\n-\n-  public boolean markSupported()\n-  {\n-    return in.markSupported();\n-  }\n-\n-  public int read() throws IOException\n-  {\n-    return in.read();\n-  }\n-\n-  public int read(byte[] b) throws IOException\n-  {\n-    return read(b, 0, b.length);\n-  }\n-\n-  public int read(byte[] b, int off, int len) throws IOException\n-  {\n-    return in.read(b, off, len);\n-  }\n-\n-  public synchronized void reset() throws IOException\n-  {\n-    in.reset();\n-  }\n-\n-  public long skip(long n) throws IOException\n-  {\n-    return in.skip(n);\n-  }\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * This is the subordinate <code>InputStream</code> to which method calls\n+  * are redirected\n+  */\n+protected InputStream in;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a <code>FilterInputStream</code> with the specified subordinate\n+  * <code>InputStream</code>.\n+  *\n+  * @param in The subordinate <code>InputStream</code>\n+  */\n+protected \n+FilterInputStream(InputStream in)\n+{\n+  this.in = in;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Calls the <code>in.mark(int)</code> method.\n+  *\n+  * @param readlimit The parameter passed to <code>in.mark(int)</code>\n+  */\n+public void\n+mark(int readlimit)\n+{\n+  in.mark(readlimit);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.markSupported()</code> method.\n+  *\n+  * @return <code>true</code> if mark/reset is supported, <code>false</code>\n+  *         otherwise\n+  */\n+public boolean\n+markSupported()\n+{\n+  return(in.markSupported());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.reset()</code> method.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+reset() throws IOException\n+{\n+  in.reset();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.available()</code> method.\n+  *\n+  * @return The value returned from <code>in.available()</code>\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public int\n+available() throws IOException\n+{\n+  return(in.available());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.skip(long)</code> method\n+  *\n+  * @param The requested number of bytes to skip. \n+  *\n+  * @return The value returned from <code>in.skip(long)</code>\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public long\n+skip(long num_bytes) throws IOException\n+{\n+  return(in.skip(num_bytes));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.read()</code> method\n+  *\n+  * @return The value returned from <code>in.read()</code>\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public int\n+read() throws IOException\n+{\n+  return(in.read());\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>read(byte[], int, int)</code> overloaded method.  Note that \n+  * this method does not redirect its call directly to a corresponding\n+  * method in <code>in</code>.  This allows subclasses to override only the\n+  * three argument version of <code>read</code>.\n+  *\n+  * @param buf The buffer to read bytes into\n+  *\n+  * @return The value retured from <code>in.read(byte[], int, int)</code>\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public int\n+read(byte[] buf) throws IOException\n+{\n+  return(read(buf, 0, buf.length));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.read(byte[], int, int)</code> method.\n+  *\n+  * @param buf The buffer to read bytes into\n+  * @param offset The index into the buffer to start storing bytes\n+  * @param len The maximum number of bytes to read.\n+  *\n+  * @return The value retured from <code>in.read(byte[], int, int)</code>\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public int\n+read(byte[] buf, int offset, int len) throws IOException\n+{\n+  return(in.read(buf, offset, len));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method closes the input stream by closing the input stream that\n+  * this object is filtering.  Future attempts to access this stream may\n+  * throw an exception.\n+  * \n+  * @exception IOException If an error occurs\n+  */\n+public void\n+close() throws IOException\n+{\n+  in.close();\n+}\n+\n+} // class FilterInputStream"}, {"sha": "53e519cbebd5a5a96ef8bc288b7fda559b1b924d", "filename": "libjava/java/io/FilterOutputStream.java", "status": "modified", "additions": 157, "deletions": 48, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FFilterOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FFilterOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilterOutputStream.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,62 +1,171 @@\n-// FilterOutputStream.java - A filtered stream\n+/* FilterOutputStream.java -- Parent class for output streams that filter\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to version 1.1.\n  */\n \n+/**\n+  * This class is the common superclass of output stream classes that \n+  * filter the output they write.  These classes typically transform the\n+  * data in some way prior to writing it out to another underlying\n+  * <code>OutputStream</code>.  This class simply overrides all the \n+  * methods in <code>OutputStream</code> to redirect them to the\n+  * underlying stream.  Subclasses provide actual filtering.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  */\n public class FilterOutputStream extends OutputStream\n {\n-  public void close () throws IOException\n-  {\n-    flush ();\n-    out.close();\n-  }\n-\n-  public FilterOutputStream (OutputStream ox)\n-  {\n-    out = ox;\n-  }\n-\n-  public void flush () throws IOException\n-  {\n-    out.flush();\n-  }\n-\n-  public void write (int b) throws IOException\n-  {\n-    out.write(b);\n-  }\n-\n-  public void write (byte[] b) throws IOException, NullPointerException\n-  {\n-    // Don't do checking here, per Java Lang Spec.\n-    write (b, 0, b.length);\n-  }\n-\n-  public void write (byte[] b, int off, int len)\n-    throws IOException, NullPointerException, IndexOutOfBoundsException\n-  {\n-    // Don't do checking here, per Java Lang Spec.\n-    for (int i=0; i < len; i++) \n-      write (b[off + i]);\n-  }\n-\n-  // The output stream.\n-  protected OutputStream out;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * This is the subordinate <code>OutputStream</code> that this class\n+  * redirects its method calls to.\n+  */\n+protected OutputStream out;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This method initializes an instance of <code>FilterOutputStream</code>\n+  * to write to the specified subordinate <code>OutputStream</code>.\n+  *\n+  * @param out The <code>OutputStream</code> to write to\n+  */\n+public\n+FilterOutputStream(OutputStream out)\n+{\n+  this.out = out;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method closes the underlying <code>OutputStream</code>.  Any\n+  * further attempts to write to this stream may throw an exception.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+close() throws IOException\n+{\n+  flush();\n+  out.close();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method attempt to flush all buffered output to be written to the\n+  * underlying output sink.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+flush() throws IOException\n+{\n+  out.flush();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a single byte of output to the underlying\n+  * <code>OutputStream</code>.\n+  *\n+  * @param b The byte to write, passed as an int.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+write(int b) throws IOException\n+{\n+  out.write(b);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes all the bytes in the specified array to the underlying\n+  * <code>OutputStream</code>.  It does this by calling the three parameter\n+  * version of this method - <code>write(byte[], int, int)</code> in this\n+  * class instead of writing to the underlying <code>OutputStream</code>\n+  * directly.  This allows most subclasses to avoid overriding this method.\n+  *\n+  * @param buf The byte array to write bytes from\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+write(byte[] buf) throws IOException\n+{\n+  // Don't do checking here, per Java Lang Spec.\n+  write(buf, 0, buf.length);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method calls the <code>write(int)</code> method <code>len</code>\n+  * times for all bytes from the array <code>buf</code> starting at index\n+  * <code>offset</code>. Subclasses should overwrite this method to get a\n+  * more efficient implementation.\n+  *\n+  * @param buf The byte array to write bytes from\n+  * @param offset The index into the array to start writing bytes from\n+  * @param len The number of bytes to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+write(byte[] buf, int offset, int len) throws IOException\n+{\n+  // Don't do checking here, per Java Lang Spec.\n+  for (int i=0; i < len; i++) \n+    write(buf[offset + i]);\n+\n+}\n+\n+} // class FilterOutputStream"}, {"sha": "a3897bcbdf01ce8163eb2314c4f4991609d8da0c", "filename": "libjava/java/io/FilterReader.java", "status": "modified", "additions": 201, "deletions": 62, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FFilterReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FFilterReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilterReader.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,75 +1,214 @@\n-/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n+/* FilterReader.java -- Base class for char stream classes that filter input\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.io;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date October 15, 1998.  \n- */\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+  * This is the common superclass of all standard classes that filter \n+  * input.  It acts as a layer on top of an underlying <code>Reader</code>\n+  * and simply redirects calls made to it to the subordinate Reader\n+  * instead.  Subclasses of this class perform additional filtering\n+  * functions in addition to simply redirecting the call.\n+  * <p>\n+  * When creating a subclass of <code>FilterReader</code>, override the\n+  * appropriate methods to implement the desired filtering.  However, note\n+  * that the <code>read(char[])</code> method does not need to be overridden\n+  * as this class redirects calls to that method to \n+  * <code>read(yte[], int, int)</code> instead of to the subordinate\n+  * <code>Reader} read(yte[])</code> method.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  */\n public abstract class FilterReader extends Reader\n {\n-  /* The input stream to be filtered. */\n-  protected Reader in;\n-\n-  protected FilterReader(Reader in)\n-  {\n-    super(in.lock);\n-    this.in = in; \n-  }\n-\n-  public void close() throws IOException\n-  {\n-    // We used to set `in = null' here.  We don't, though, because\n-    // that is the simplest way to ensure that read-after-close will\n-    // throw the appropriate exception -- we rely on the filtered\n-    // stream to do it.\n-    in.close();\n-  }\n-\n-  public synchronized void mark(int readlimit) throws IOException\n-  {\n-    in.mark(readlimit);\n-  }\n-\n-  public boolean markSupported()\n-  {\n-    return in.markSupported();\n-  }\n-\n-  public int read() throws IOException\n-  {\n-    return in.read();\n-  }\n-\n-  public int read(char[] b, int off, int len) throws IOException\n-  {\n-    return in.read(b, off, len);\n-  }\n-\n-  public boolean ready() throws IOException\n-  {\n-    return in.ready();\n-  }\n-\n-  public synchronized void reset() throws IOException\n-  {\n-    in.reset();\n-  }\n-\n-  public long skip(long n) throws IOException\n-  {\n-    return in.skip(n);\n-  }\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * This is the subordinate <code>Reader</code> to which method calls\n+  * are redirected\n+  */\n+protected Reader in;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a <code>FilterReader</code> with the specified subordinate\n+  * <code>Reader</code>.\n+  * The <code>lock</code> of the new <code>FilterReader</code> will be set\n+  * to <code>in.lock</code>.\n+  *\n+  * @param in The subordinate <code>Reader</code>\n+  */\n+protected \n+FilterReader(Reader in)\n+{\n+  super(in.lock);\n+  this.in = in;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Calls the <code>in.mark(int)</code> method.\n+  *\n+  * @param readlimit The parameter passed to <code>in.mark(int)</code>\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+mark(int readlimit) throws IOException\n+{\n+  in.mark(readlimit);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.markSupported()</code> method.\n+  *\n+  * @return <code>true</code> if mark/reset is supported, <code>false</code> otherwise\n+  */\n+public boolean\n+markSupported()\n+{\n+  return(in.markSupported());\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.reset()</code> method.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+reset() throws IOException\n+{\n+  in.reset();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.read()</code> method.\n+  *\n+  * @return The value returned from <code>in.available()</code>\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public boolean\n+ready() throws IOException\n+{\n+  return(in.ready());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.skip(long)</code> method\n+  *\n+  * @param The requested number of chars to skip. \n+  *\n+  * @return The value returned from <code>in.skip(long)</code>\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public long\n+skip(long num_chars) throws IOException\n+{\n+  return(in.skip(num_chars));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.read()</code> method\n+  *\n+  * @return The value returned from <code>in.read()</code>\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public int\n+read() throws IOException\n+{\n+  return(in.read());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Calls the <code>in.read(char[], int, int)</code> method.\n+  *\n+  * @param buf The buffer to read chars into\n+  * @param offset The index into the buffer to start storing chars\n+  * @param len The maximum number of chars to read.\n+  *\n+  * @return The value retured from <code>in.read(char[], int, int)</code>\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public int\n+read(char[] buf, int offset, int len) throws IOException\n+{\n+  return(in.read(buf, offset, len));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method closes the stream by calling the <code>close()</code> method\n+  * of the underlying stream.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+close() throws IOException\n+{\n+  in.close();\n+}\n+\n+} // class FilterReader"}, {"sha": "eaa70660e9067caccf3ead95041e65c778b23505", "filename": "libjava/java/io/FilterWriter.java", "status": "modified", "additions": 154, "deletions": 44, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FFilterWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FFilterWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilterWriter.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,58 +1,168 @@\n-// FilterWriter.java - Filtered character output stream.\n+/* FilterWriter.java -- Parent class for output streams that filter\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 25, 1998 \n- */\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to version 1.1.\n  */\n \n+/**\n+  * This class is the common superclass of output character stream classes \n+  * that filter the output they write.  These classes typically transform the\n+  * data in some way prior to writing it out to another underlying\n+  * <code>Writer</code>.  This class simply overrides all the \n+  * methods in <code>Writer</code> to redirect them to the\n+  * underlying stream.  Subclasses provide actual filtering.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  */\n public abstract class FilterWriter extends Writer\n {\n-  public void close () throws IOException\n-  {\n-    out.close();\n-  }\n-\n-  protected FilterWriter (Writer ox)\n-  {\n-    super (ox);\n-    out = ox;\n-  }\n-\n-  public void flush () throws IOException\n-  {\n-    out.flush();\n-  }\n-\n-  public void write (int oneChar) throws IOException\n-  {\n-    out.write(oneChar);\n-  }\n-\n-  public void write (char[] buffer, int offset, int count) throws IOException\n-  {\n-    out.write(buffer, offset, count);\n-  }\n-\n-  public void write (String str, int offset, int count) throws IOException\n-  {\n-    out.write(str, offset, count);\n-  }\n-\n-  // Where our writes should go.\n-  protected Writer out;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * This is the subordinate <code>Writer</code> that this class\n+  * redirects its method calls to.\n+  */\n+protected Writer out;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This method initializes an instance of <code>FilterWriter</code>\n+  * to write to the specified subordinate <code>Writer</code>.\n+  * The given <code>Writer</code> will be used as <code>lock</code> for\n+  * the newly created <code>FilterWriter</code>.\n+  *\n+  * @param out The <code>Writer</code> to write to\n+  */\n+protected\n+FilterWriter(Writer out)\n+{\n+  super(out);\n+  this.out = out;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method closes the underlying <code>Writer</code>.  Any\n+  * further attempts to write to this stream may throw an exception.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+close() throws IOException\n+{\n+  out.close();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method attempt to flush all buffered output to be written to the\n+  * underlying output sink.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+flush() throws IOException\n+{\n+  out.flush();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a single char of output to the underlying\n+  * <code>Writer</code>.\n+  *\n+  * @param b The char to write, passed as an int.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+write(int b) throws IOException\n+{\n+  out.write(b);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes <code>len</code> chars from the array <code>buf</code>\n+  * starting at index <code>offset</code> to the underlying\n+  * <code>Writer</code>.\n+  *\n+  * @param buf The char array to write chars from\n+  * @param offset The index into the array to start writing chars from\n+  * @param len The number of chars to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+write(char[] buf, int offset, int len) throws IOException\n+{\n+  out.write(buf, offset, len);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes <code>len</code> chars from the <code>String</code>\n+  * starting at position <code>offset</code>.\n+  *\n+  * @param str The <code>String</code> that is to be written\n+  * @param offset The character offset into the <code>String</code> to start writing from\n+  * @param len The number of chars to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+write(String str, int offset, int len) throws IOException\n+{\n+  out.write(str, offset, len);\n+}\n+\n+} // class FilterWriter\n+"}, {"sha": "2ce5ca3824d88733f23f0cc03b37c9dad82ccdb4", "filename": "libjava/java/io/Writer.java", "status": "modified", "additions": 197, "deletions": 53, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fio%2FWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FWriter.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,67 +1,211 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Writer.java -- Base class for character output streams\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.io;\n \n-/**\n- * @author Per Bothner <bothner@cygnus.com>\n- * @date April 17, 1998.  \n- */\n /* Written using \"Java Class Libraries\", 2nd edition, plus online\n  * API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n- * However, write(String, int, int) should be made a native method.\n  */\n \n+/**\n+  * This abstract class forms the base of the hierarchy of classes that \n+  * write output as a stream of chars.  It provides a common set of methods\n+  * for writing chars to stream.  Subclasses implement and/or extend these\n+  * methods to write chars in a particular manner or to a particular \n+  * destination such as a file on disk or network connection.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Per Bothner <bothner@cygnus.com>\n+  */\n public abstract class Writer\n {\n-  protected Object lock;\n-\n-  protected Writer ()\n-  {\n-    lock = this;\n-  }\n-\n-  protected Writer (Object lock)\n-  {\n-    this.lock = lock;\n-  }\n-\n-  abstract public void close() throws IOException;\n-\n-  abstract public void flush() throws IOException;\n-\n-  abstract public void write(char[] buf, int offset, int count)\n-     throws IOException;\n-\n-  public void write(char[] buf) throws IOException\n-  {\n-    write(buf, 0, buf.length);\n-  }\n-\n-  public void write(int ch) throws IOException\n-  {\n-    char[] buf = new char[1];\n-    buf[0] = (char) ch;\n-    write(buf, 0, 1);\n-  }\n-\n-  // FIXME - re-write using native code to not require copied buffer.\n-  public void write (String str, int offset, int count) throws IOException\n-  {\n-    char[] buf = new char[count];\n-    str.getChars(offset, offset + count, buf, 0);\n-    write(buf, 0, count);\n-  }\n-\n-  public void write (String str) throws IOException\n-  {\n-    write(str, 0, str.length());\n-  }\n \n+/*************************************************************************/\n+\n+/**\n+  * This is the object used to synchronize criticial code sections for\n+  * thread safety.  Subclasses should use this field instead of using\n+  * synchronized methods or explicity synchronizations on <code>this</code>\n+  */\n+protected Object lock;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This is the default no-argument constructor for this class.  This method\n+  * will set up the class to synchronize criticial sections on itself.\n+  */\n+protected\n+Writer()\n+{\n+  lock = this;\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a <code>Writer</code> that will synchronize\n+  * on the specified <code>Object</code>.\n+  *\n+  * @param obj The <code>Object</code> to use for synchronizing critical\n+  *            sections\n+  */\n+protected\n+Writer(Object lock)\n+{\n+  this.lock = lock;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method forces any data that may have been buffered to be written\n+  * to the underlying output device.  Please note that the host environment\n+  * might perform its own buffering unbeknowst to Java.  In that case, a\n+  * write made (for example, to a disk drive) might be cached in OS\n+  * buffers instead of actually being written to disk.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public abstract void\n+flush() throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method closes the stream.  Any internal or native resources associated\n+  * with this stream are freed.  Any subsequent attempt to access the stream\n+  * might throw an exception.\n+  * <p>\n+  * This method in this class does nothing.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public abstract void\n+close() throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a single char to the output stream. \n+  *\n+  * @param b The char to be written to the output stream, passed as an int\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+write(int b) throws IOException\n+{\n+  char[] buf = new char[1];\n+\n+  buf[0] = (char)b;\n+  write(buf, 0, buf.length);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method all the writes char from the passed array to the output stream.\n+  * This method is equivalent to <code>write(buf, 0, buf.length)</code> which\n+  * is exactly how it is implemented in this class.\n+  *\n+  * @param buf The array of char to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+write(char[] buf) throws IOException\n+{\n+  write(buf, 0, buf.length);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes <code>len</code> char from the specified array\n+  * <code>buf</code> starting at index <code>offset</code> into the array.\n+  * <p>\n+  * Subclasses must provide an implementation of this abstract method.\n+  *\n+  * @param buf The array of char to write from\n+  * @param offset The index into the array to start writing from\n+  * @param len The number of char to write\n+  * \n+  * @exception IOException If an error occurs\n+  */\n+public abstract void\n+write(char[] buf, int offset, int len) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes all the characters in a <code>String</code> to the\n+  * output.\n+  *\n+  * @param str The <code>String</code> whose chars are to be written.\n+  *\n+  * @param IOException If an error occurs\n+  */\n+public void\n+write(String str) throws IOException\n+{\n+  write(str, 0, str.length());\n+} \n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes <code>len</code> chars from the <code>String</code>\n+  * starting at position <code>offset</code>.\n+  *\n+  * @param str The <code>String</code> that is to be written\n+  * @param offset The character offset into the <code>String</code> to start\n+  *               writing from\n+  * @param len The number of chars to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public void\n+write(String str, int offset, int len) throws IOException\n+{\n+  // FIXME - for libgcj re-write using native code to not require copied buffer.\n+  char[] buf = new char[len];\n+\n+  str.getChars(offset, offset + len, buf, 0);\n+  write(buf, 0, len);\n+}\n+\n+} // class Writer"}, {"sha": "bca10313530351054707e6a61a584f0453636e55", "filename": "libjava/java/lang/Compiler.java", "status": "modified", "additions": 88, "deletions": 30, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Flang%2FCompiler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Flang%2FCompiler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCompiler.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,53 +1,111 @@\n-// Compiler.java - Control byte->machine code compiler.\n+/* Compiler.java -- Interface for implementing a method to override \n+   Object.clone()comparaing objects to obtain an ordering\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.lang;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 23, 1998.  \n- */\n+\n+package java.lang;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  */\n \n-public final class Compiler\n+/**\n+ * The <code>Compiler</code> class is a place holder for a JIT\n+ * compiler implementation does nothing unless there is such a \n+ * compiler by default.\n+ * <p>\n+ * The system property <code>java.compiler</code> may contain the name\n+ * of a library to load with <code>System.loadLibrary</code> when the\n+ * virtual machine first starts.  If so and loading the library succeeds,\n+ * then a function by the name of <code>java_lang_Compiler_start()</code> \n+ * in that library is called.\n+ *\n+ * Note that a VM might not have implemented any of this.\n+ *\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ *\n+ * @since JDK 1.0\n+ * @see System#getProperty(java.lang.String)\n+ * @see System#getProperty(java.lang.String,java.lang.String)\n+ * @see System#loadLibrary(java.lang.String)\n+ */\n+public final class Compiler \n {\n-  public static Object command (Object arg)\n+    /**\n+     * Don't allow new `Compiler's to be made.\n+     */\n+    private Compiler ()\n     {\n-      // Our implementation defines this to a no-op.\n-      return null;\n     }\n \n-  public static boolean compileClass (Class oneClass)\n+    /**\n+     * Compile the class named by <code>oneClass</code>.\n+     * \n+     * @param oneClass the class to compile\n+     * @return <code>false</code> if no compiler is available or \n+     * compilation failed and <code>true</code> if compilation succeeded.\n+     */\n+    public static boolean compileClass (Class oneClass) \n     {\n-      // Never succeed.\n-      return false;\n+ \t// Never succeed.\n+\treturn false;\n     }\n-\n-  public static boolean compileClasses (String classNames)\n+    \n+    /**\n+     * Compile the classes whose name matches <code>classNames/code>.\n+     *\n+     * @param classNames the name of classes to compile\n+     * @return <code>false</code> if no compiler is available or \n+     * compilation failed and <code>true</code> if compilation succeeded.\n+     */\n+    public static boolean compileClasses (String classNames) \n     {\n-      // Note the incredibly lame interface.  Always fail.\n-      return false;\n+\t// Note the incredibly lame interface.  Always fail.\n+\treturn false;\n     }\n \n-  public static void disable ()\n+    /**\n+     * This method examines the argument and performs an operation \n+     * according to the compilers documentation.  No specific operation\n+     * is required.\n+     */\n+    public static Object command (Object arg) \n     {\n+\t// Our implementation defines this to a no-op.\n+\treturn null;\n     }\n \n-  public static void enable ()\n-    {\n-    }\n+    /**\n+     * Calling <code>Compiler.enable()</code> will cause the compiler\n+     * to resume operation if it was previously disabled.  \n+     */\n+    public static void enable () { }\n \n-  // Don't allow new `Compiler's to be made.\n-  private Compiler ()\n-    {\n-    }\n+    /**\n+     * Calling <code>Compiler.disable()</code> will cause the compiler\n+     * to be suspended.\n+     */\n+    public static void disable () { }\n }"}, {"sha": "faeb1ed300d92cce364b00bdc51e18935cbc76c5", "filename": "libjava/java/lang/Process.java", "status": "modified", "additions": 93, "deletions": 17, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Flang%2FProcess.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Flang%2FProcess.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FProcess.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,30 +1,106 @@\n-// Process.java - Represent spawned system process.\n+/* Process.java - Represent spawned system process.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.lang;\n-import java.io.*;\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 23, 1998.  \n- */\n+import java.io.OutputStream;\n+import java.io.InputStream;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  */\n \n+/**\n+ * An instance of a subclass of <code>Process</code> is created by the\n+ * <code>Runtime.exec</code> methods.  Methods in <code>Process</code>\n+ * provide a means to send input to a process, obtain the output from a \n+ * subprocess, destroy a subprocess, obtain the exit value from a \n+ * subprocess, and wait for a subprocess to complete.\n+ * \n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ */\n public abstract class Process\n {\n-  abstract public void destroy ();\n-  abstract public int exitValue ();\n-  abstract public InputStream getErrorStream ();\n-  abstract public InputStream getInputStream ();\n-  abstract public OutputStream getOutputStream ();\n-  abstract public int waitFor () throws InterruptedException;\n+  /**\n+   * Empty constructor does nothing.\n+   */\n+  public Process() { }\n+\n+  /**\n+   * Obtain the output stream of the subprocess.  It may help to \n+   * associate this stream as the redirected STDIN file descriptor of\n+   * the subprocess.\n+   */\n+  public abstract OutputStream getOutputStream();\n+\n+  /**\n+   * Obtain the input stream of the subprocess.  It may help to \n+   * associate this stream as the redirected STDOUT file descriptor of\n+   * the subprocess.\n+   */\n+  public abstract InputStream getInputStream();\n+\n+  /**\n+   * Obtain the error input stream of the subprocess.  It may help to \n+   * associate this stream as the redirected STDERR file descriptor of\n+   * the subprocess.\n+   */\n+  public abstract InputStream getErrorStream();\n+\n+  /**\n+   * The thread calling <code>waitFor</code> will block until the subprocess\n+   * has terminated.  If the process has already terminated then the method\n+   * immediately returns with the exit value of the subprocess.\n+   * \n+   * @returns the exit value of the subprocess.  A return of <code>0</code> \n+   * denotes normal process termination by convention.\n+   *\n+   * @throws InterruptedException is thrown if another thread interrupts \n+   * the waiting thread.  The waiting thread stops waiting.\n+   */\n+  public abstract int waitFor()\n+    throws InterruptedException;\n+\n+  /**\n+   * When a process terminates there is associated with that termination\n+   * an exit value for the process to indicate why it terminated.  A return\n+   * of <code>0</code> denotes normal process termination by convention.\n+   *\n+   * @returns the exit value of the subprocess.\n+   * @throws IllegalThreadStateException is thrown if the subprocess \n+   * represented by the subclass of this class has not yet terminated.\n+   */\n+  public abstract int exitValue();\n+\n+  /**\n+   * Kills the subprocess and all of its children forcibly.\n+   */\n+  public abstract void destroy();\n+\n }"}, {"sha": "453e5fcb6cbe3c5ad3f0c5e7a03c8b3f4d341a75", "filename": "libjava/java/lang/Void.java", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Flang%2FVoid.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Flang%2FVoid.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVoid.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,30 +1,56 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* java.lang.Void\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.lang;\n \n-/**\n- * @author Per Bothner <bothner@cygnus.com>\n- * @date April 18, 1998.  \n- */\n /* Written using \"Java Class Libraries\", 2nd edition, plus online\n  * API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Complete.\n  */\n \n+/**\n+ * Void is a placeholder class so that the variable Void.TYPE can be\n+ * supported for reflection return types.\n+ *\n+ * @author Paul Fisher\n+ * @author John Keiser\n+ * @author Per Bothner <bothner@cygnus.com>\n+ * @since JDK1.1\n+ */\n public final class Void\n {\n-  // This initialization is seemingly circular, but it is accepted\n-  // by javac, and is handled specially by gcc.\n-  public final static Class TYPE = void.class;\n-\n-  // Don't allow Void objects to be made.\n-  private Void ()\n-  {\n-  }\n+  /**\n+   * The return type <code>void</code> is represented by this \n+   * <code>Class</code> object.\n+   */\n+  public static final Class TYPE = VMClassLoader.getPrimitiveClass(\"void\");\n+\n+  /**\n+   * Don't allow Void objects to be made.\n+   */\n+  private Void() { }\n }"}, {"sha": "a0ed737bd1fc33c94edfaeac7ac968c6372b262d", "filename": "libjava/java/net/ContentHandler.java", "status": "modified", "additions": 64, "deletions": 13, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fnet%2FContentHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fnet%2FContentHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FContentHandler.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,29 +1,80 @@\n-// ContentHandler.java - Superclass of classes that read from a URLConnection.\n+/* ContentHandler.java -- Abstract class for handling content from URL's\n+   Copyright (C) 1998, 1999 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.net;\n \n import java.io.IOException;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 5, 1999.\n- */\n-\n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * This is an abstract class that is the superclass for classes that read\n+  * objects from URL's.  Calling the <code>getContent()</code> method in the \n+  * <code>URL</code> class or the <code>URLConnection</code> class will cause \n+  * an instance of a subclass of <code>ContentHandler</code> to be created for \n+  * the MIME type of the object being downloaded from the URL.  Thus, this \n+  * class is seldom needed by applications/applets directly, but only \n+  * indirectly through methods in other classes.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  */\n public abstract class ContentHandler\n {\n-  public abstract Object getContent(URLConnection urlc) throws IOException;\n-}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Default, no-argument constructor.\n+  */\n+public ContentHandler() { }\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads from the <code>InputStream</code> of the passed in URL \n+  * connection and uses the data downloaded to create an <code>Object</code> \n+  * represening the content.  For example, if the URL is pointing to a GIF \n+  * file, this method might return an <code>Image</code> object.  This method \n+  * must be implemented by subclasses.\n+  *\n+  * @param urlc A <code>URLConnection</code> object to read data from.\n+  *\n+  * @return An object representing the data read\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+public abstract Object getContent(URLConnection urlc) throws IOException;\n+\n+} // class ContentHandler"}, {"sha": "3e166281e66bb8e781079fe04bc5df08ac4f3ce2", "filename": "libjava/java/net/DatagramPacket.java", "status": "modified", "additions": 172, "deletions": 17, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramPacket.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,35 +1,99 @@\n-// DatagramPacket.java - Represents packets in a connectionless protocol.\n+/* DatagramPacket.java -- Class to model a packet to be sent via UDP\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date April 28, 1999.\n- */\n+package java.net;\n \n-/**\n+/*\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * This class models a packet of data that is to be sent across the network\n+  * using a connectionless protocol such as UDP.  It contains the data\n+  * to be send, as well as the destination address and port.  Note that\n+  * datagram packets can arrive in any order and are not guaranteed to be\n+  * delivered at all.\n+  * <p>\n+  * This class can also be used for receiving data from the network.\n+  * <p>\n+  * Note that for all method below where the buffer length passed by the\n+  * caller cannot exceed the actually length of the byte array passed as\n+  * the buffer, if this condition is not true, then the method silently\n+  * reduces the length value to maximum allowable value.\n+  *\n+  * Written using on-line Java Platform 1.2 API Specification, as well\n+  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n+  * Status:  Believed complete and correct.\n+  *\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @author Aarom M. Renn (arenn@urbanophile.com) (Documentation comments)\n+  * @date April 28, 1999.\n+  */\n+\n public final class DatagramPacket\n {\n+/**\n+  * The data buffer to send\n+  */\n   private byte[] buffer;\n+\n+/**\n+  * This is the offset into the buffer to start sending from or receiving to.\n+  */\n   private int offset;\n+\n+/**\n+  * The length of the data buffer to send\n+  */\n   private int length;\n+\n+/**\n+  * The address to which the packet should be sent or from which it\n+  * was received\n+  */\n   private InetAddress address;\n+\n+/**\n+  * The port to which the packet should be sent or from which it was\n+  * was received.\n+  */\n   private int port;\n \n-  // JDK1.2\n+/**\n+  * This method initializes a new instance of <code>DatagramPacket</code>\n+  * which has the specified buffer, offset, and length.\n+  *\n+  * @param buf The buffer for holding the incoming datagram.\n+  * @param offset The offset into the buffer to start writing.\n+  * @param length The maximum number of bytes to read.\n+  *\n+  * @since Java 1.2\n+  */\n   public DatagramPacket(byte[] buf, int offset, int length)\n   {\n     if (buf == null)\n@@ -49,12 +113,30 @@ public DatagramPacket(byte[] buf, int offset, int length)\n     this.port = -1;\n   }\n \n+/**\n+  * Initializes a new instance of <code>DatagramPacket</code> for\n+  * receiving packets from the network.\n+  *\n+  * @param buf A buffer for storing the returned packet data\n+  * @param length The length of the buffer (must be <= buf.length)\n+  */\n   public DatagramPacket(byte[] buf, int length)\n   {\n     this(buf, 0, length);\n   }\n \n-  // JDK1.2\n+/**\n+  * Initializes a new instance of <code>DatagramPacket</code> for\n+  * transmitting packets across the network.\n+  *\n+  * @param buf A buffer containing the data to send\n+  * @param offset The offset into the buffer to start writing from.\n+  * @param len The length of the buffer (must be <= buf.length)\n+  * @param addr The address to send to\n+  * @param port The port to send to\n+  *\n+  * @since Java 1.2\n+  */\n   public DatagramPacket(byte[] buf, int offset, int length,\n \tInetAddress address, int port)\n   {\n@@ -79,37 +161,86 @@ public DatagramPacket(byte[] buf, int offset, int length,\n     this.port = port;\n   }\n \n+/**\n+  * Initializes a new instance of <code>DatagramPacket</code> for\n+  * transmitting packets across the network.\n+  *\n+  * @param buf A buffer containing the data to send\n+  * @param length The length of the buffer (must be <= buf.length)\n+  * @param address The address to send to\n+  * @param port The port to send to\n+  */\n   public DatagramPacket(byte[] buf, int length, InetAddress address, int port)\n   {\n     this(buf, 0, length, address, port);\n   }\n \n+/**\n+  * Returns the address that this packet is being sent to or, if it was used\n+  * to receive a packet, the address that is was received from.  If the\n+  * constructor that doesn not take an address was used to create this object\n+  * and no packet was actually read into this object, then this method\n+  * returns <code>null</code>.\n+  *\n+  * @return The address for this packet.\n+  */\n   public synchronized InetAddress getAddress()\n   {\n     return address;\n   }\n \n+/**\n+  * Returns the port number this packet is being sent to or, if it was used\n+  * to receive a packet, the port that it was received from. If the\n+  * constructor that doesn not take an address was used to create this object\n+  * and no packet was actually read into this object, then this method\n+  * will return 0.\n+  *\n+  * @return The port number for this packet\n+  */\n   public synchronized int getPort()\n   {\n     return port;\n   }\n \n+/**\n+  * Returns the data buffer for this packet\n+  *\n+  * @return This packet's data buffer\n+  */\n   public synchronized byte[] getData()\n   {\n     return buffer;\n   }\n \n-  // JDK1.2\n+/**\n+  * This method returns the current offset value into the data buffer\n+  * where data will be sent from.\n+  *\n+  * @return The buffer offset.\n+  *\n+  * @since Java 1.2\n+  */\n   public synchronized int getOffset()\n   {\n     return offset;\n   }\n \n+/**\n+  * Returns the length of the data in the buffer\n+  *\n+  * @return The length of the data\n+  */\n   public synchronized int getLength()\n   {\n     return length;\n   }\n \n+/**\n+  * This sets the address to which the data packet will be transmitted.\n+  *\n+  * @param addr The destination address\n+  */\n   public synchronized void setAddress(InetAddress iaddr)\n   {\n     if (iaddr == null)\n@@ -118,6 +249,11 @@ public synchronized void setAddress(InetAddress iaddr)\n     address = iaddr;\n   }\n \n+/**\n+  * This sets the port to which the data packet will be transmitted.\n+  *\n+  * @param port The destination port\n+  */\n   public synchronized void setPort(int iport)\n   {\n     if (iport < 0 || iport > 65535)\n@@ -126,6 +262,11 @@ public synchronized void setPort(int iport)\n     port = iport;\n   }\n \n+/**\n+  * Sets the data buffer for this packet.\n+  *\n+  * @param buf The new buffer for this packet\n+  */\n   public synchronized void setData(byte[] buf)\n   {\n     // This form of setData requires setLength to be called separately\n@@ -136,7 +277,15 @@ public synchronized void setData(byte[] buf)\n     buffer = buf;\n   }\n \n-  // JDK1.2\n+/**\n+  * This method sets the data buffer for the packet.\n+  *\n+  * @param buf The byte array containing the data for this packet.\n+  * @param offset The offset into the buffer to start reading data from.\n+  * @param length The number of bytes of data in the buffer.\n+  *\n+  * @since Java 1.2\n+  */\n   public synchronized void setData(byte[] buf, int offset, int length)\n   {\n     // This form of setData must be used if offset is to be changed.\n@@ -156,6 +305,11 @@ public synchronized void setData(byte[] buf, int offset, int length)\n     this.length = length;\n   }\n \n+/**\n+  * Sets the length of the data in the buffer. \n+  *\n+  * @param length The new length.  (Where len <= buf.length)\n+  */\n   public synchronized void setLength(int length)\n   {\n     if (length < 0)\n@@ -166,4 +320,5 @@ public synchronized void setLength(int length)\n \n     this.length = length;\n   }\n-}\n+} // class DatagramPacket\n+"}, {"sha": "a782cff1a9af2b9cd8fa1636904dc3e9614966ae", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 136, "deletions": 20, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477946a63dee474c725243ae0d998f4cba1bfc0a/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=477946a63dee474c725243ae0d998f4cba1bfc0a", "patch": "@@ -1,50 +1,108 @@\n-// MulticastSocket.java\n-\n-/* Copyright (C) 1999, 2000  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+/* MulticastSocket.java -- Class for using multicast sockets\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.net;\n-import java.io.IOException;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date May 18, 1999.\n- */\n+import java.io.IOException;\n \n-/**\n+/*\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * This class models a multicast UDP socket.  A multicast address is a\n+  * class D internet address (one whose most significant bits are 1110).  \n+  * A multicast group consists of a multicast address and a well known\n+  * port number.  All members of the group listening on that address and\n+  * port will receive all the broadcasts to the group.\n+  * <p>\n+  * Please note that applets are not allowed to use multicast sockets \n+  * \n+  * Written using on-line Java Platform 1.2 API Specification, as well\n+  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n+  * Status:  Believed complete and correct.\n+  *\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @author Aaron M. Renn (arenn@urbanophile.com) (Documentation comments)\n+  * @date May 18, 1999.\n+  */\n public class MulticastSocket extends DatagramSocket\n {\n   // FIXME: the local addr bound to the multicast socket can be reused;\n   // unlike unicast sockets.  It binds to any available network interface.\n   // See p.1159 JCL book.\n \n+/**\n+  * Create a MulticastSocket that this not bound to any address\n+  *\n+  * @exception IOException If an error occurs\n+  */\n   public MulticastSocket() throws IOException\n   {\n     super(0, ServerSocket.ANY_IF);\n   }\n \n+/**\n+  * Create a multicast socket bound to the specified port\n+  *\n+  * @param The port to bind to\n+  *\n+  * @exception IOException If an error occurs\n+  */\n   public MulticastSocket(int port) throws IOException\n   {\n     super(port, ServerSocket.ANY_IF);\n   }\n \n+/**\n+  * Returns the interface being used for multicast packets\n+  * \n+  * @return The multicast interface\n+  *\n+  * @exception SocketException If an error occurs\n+  */\n   public InetAddress getInterface() throws SocketException\n   {\n     // FIXME: Is it possible that an InetAddress wasn't returned from getOption?\n     return (InetAddress) impl.getOption(SocketOptions.IP_MULTICAST_IF);\n   }\n \n-  // Deprecated in JDK1.2\n+/**\n+  * Returns the current value of the \"Time to Live\" option.  This is the\n+  * number of hops a packet can make before it \"expires\".   This method id\n+  * deprecated.  Use <code>getTimeToLive</code> instead.\n+  * \n+  * @return The TTL value\n+  *\n+  * @exception IOException If an error occurs\n+  *\n+  * @deprecated Replaced by getTimeToLive() in Java 1.2\n+  */\n   public byte getTTL() throws IOException\n   {\n     // Use getTTL here rather than getTimeToLive in case we're using an impl\n@@ -53,18 +111,43 @@ public byte getTTL() throws IOException\n     return impl.getTTL();\n   }\n \n-  // JDK1.2\n+/**\n+  * Returns the current value of the \"Time to Live\" option.  This is the\n+  * number of hops a packet can make before it \"expires\". \n+  * \n+  * @return The TTL value\n+  *\n+  * @exception IOException If an error occurs\n+  *\n+  * @since Java 1.2\n+  */\n   public int getTimeToLive() throws IOException\n   {\n     return impl.getTimeToLive();\n   }\n \n+/**\n+  * Sets the interface to use for multicast packets.\n+  *\n+  * @param addr The new interface to use\n+  *\n+  * @exception SocketException If an error occurs\n+  */\n   public void setInterface(InetAddress inf) throws SocketException\n   {\n     impl.setOption(SocketOptions.IP_MULTICAST_IF, inf);\n   }\n \n-  // Deprecated in JDK1.2\n+/**\n+  * Sets the \"Time to Live\" value for a socket.  The value must be between\n+  * 1 and 255.\n+  *\n+  * @param ttl The new TTL value\n+  *\n+  * @exception IOException If an error occurs\n+  *\n+  * @deprecated Replaced by <code>setTimeToLive</code> in Java 1.2\n+  */\n   public void setTTL(byte ttl) throws IOException\n   {\n     // Use setTTL here rather than setTimeToLive in case we're using an impl\n@@ -73,7 +156,16 @@ public void setTTL(byte ttl) throws IOException\n     impl.setTTL(ttl);\n   }\n \n-  // JDK1.2\n+/**\n+  * Sets the \"Time to Live\" value for a socket.  The value must be between\n+  * 1 and 255.  \n+  *\n+  * @param ttl The new TTL value\n+  *\n+  * @exception IOException If an error occurs\n+  * \n+  * @since Java 1.2\n+  */\n   public void setTimeToLive(int ttl) throws IOException\n   {\n     if (ttl <= 0 || ttl > 255)\n@@ -82,6 +174,13 @@ public void setTimeToLive(int ttl) throws IOException\n     impl.setTimeToLive(ttl);\n   }\n \n+/**\n+  * Joins the specified mulitcast group.\n+  *\n+  * @param addr The address of the group to join\n+  * \n+  * @exception IOException If an error occurs\n+  */\n   public void joinGroup(InetAddress mcastaddr) throws IOException\n   {\n     if (! mcastaddr.isMulticastAddress())\n@@ -94,6 +193,13 @@ public void joinGroup(InetAddress mcastaddr) throws IOException\n     impl.join(mcastaddr);\n   }\n \n+/**\n+  * Leaves the specified multicast group\n+  *\n+  * @param addr The address of the group to leave\n+  *\n+  * @exception IOException If an error occurs\n+  */\n   public void leaveGroup(InetAddress mcastaddr) throws IOException\n   {\n     if (! mcastaddr.isMulticastAddress())\n@@ -106,6 +212,16 @@ public void leaveGroup(InetAddress mcastaddr) throws IOException\n     impl.leave(mcastaddr);\n   }\n \n+/**\n+  * Sends a packet of data to a multicast address with a TTL that is\n+  * different from the default TTL on this socket.  The default TTL for\n+  * the socket is not changed.\n+  *\n+  * @param packet The packet of data to send\n+  * @param ttl The TTL for this packet\n+  *\n+  * @exception IOException If an error occurs\n+  */\n   public synchronized void send(DatagramPacket p, byte ttl) throws IOException\n   {\n     SecurityManager s = System.getSecurityManager();\n@@ -123,4 +239,4 @@ public synchronized void send(DatagramPacket p, byte ttl) throws IOException\n     impl.send(p);\n     impl.setTimeToLive(oldttl);\n   }\n-}\n+} // class MulticastSocket"}]}