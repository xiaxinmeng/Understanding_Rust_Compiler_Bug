{"sha": "6e2dd807c2aaaba8906a36766b9f98dfbeddc27d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUyZGQ4MDdjMmFhYWJhODkwNmEzNjc2NmI5Zjk4ZGZiZWRkYzI3ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:21:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:21:23Z"}, "message": "[03/46] Remove unnecessary update of NUM_SLP_USES\n\nvect_free_slp_tree had:\n\n  gimple *stmt;\n  FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt)\n    /* After transform some stmts are removed and thus their vinfo is gone.  */\n    if (vinfo_for_stmt (stmt))\n      {\n\tgcc_assert (STMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmt)) > 0);\n\tSTMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmt))--;\n      }\n\nBut after transform this update is redundant even for statements that do\nexist, so it seems better to skip this loop for the final teardown.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (vect_free_slp_instance): Add a final_p parameter.\n\t* tree-vect-slp.c (vect_free_slp_tree): Likewise.  Don't update\n\tSTMT_VINFO_NUM_SLP_USES when it's true.\n\t(vect_free_slp_instance): Add a final_p parameter and pass it to\n\tvect_free_slp_tree.\n\t(vect_build_slp_tree_2): Update call to vect_free_slp_instance.\n\t(vect_analyze_slp_instance): Likewise.\n\t(vect_slp_analyze_operations): Likewise.\n\t(vect_slp_analyze_bb_1): Likewise.\n\t* tree-vectorizer.c (vec_info): Likewise.\n\t* tree-vect-loop.c (vect_transform_loop): Likewise.\n\nFrom-SVN: r263118", "tree": {"sha": "6760573d95c4d3ddb86bad7346fd830cd6aed104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6760573d95c4d3ddb86bad7346fd830cd6aed104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac1359be3a39f4d12342c98c2a2e77bd59a839f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1359be3a39f4d12342c98c2a2e77bd59a839f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac1359be3a39f4d12342c98c2a2e77bd59a839f4"}], "stats": {"total": 79, "additions": 51, "deletions": 28}, "files": [{"sha": "e7ff2709e3c9b93d5112fdb96d10bb8700925086", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e2dd807c2aaaba8906a36766b9f98dfbeddc27d", "patch": "@@ -1,3 +1,17 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vect_free_slp_instance): Add a final_p parameter.\n+\t* tree-vect-slp.c (vect_free_slp_tree): Likewise.  Don't update\n+\tSTMT_VINFO_NUM_SLP_USES when it's true.\n+\t(vect_free_slp_instance): Add a final_p parameter and pass it to\n+\tvect_free_slp_tree.\n+\t(vect_build_slp_tree_2): Update call to vect_free_slp_instance.\n+\t(vect_analyze_slp_instance): Likewise.\n+\t(vect_slp_analyze_operations): Likewise.\n+\t(vect_slp_analyze_bb_1): Likewise.\n+\t* tree-vectorizer.c (vec_info): Likewise.\n+\t* tree-vect-loop.c (vect_transform_loop): Likewise.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-loop.c (vectorizable_reduction): Assert that the"}, {"sha": "9be3d31dd355b55775a400de0f58c3c88af6118f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=6e2dd807c2aaaba8906a36766b9f98dfbeddc27d", "patch": "@@ -2229,7 +2229,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n   LOOP_VINFO_VECT_FACTOR (loop_vinfo) = saved_vectorization_factor;\n   /* Free the SLP instances.  */\n   FOR_EACH_VEC_ELT (LOOP_VINFO_SLP_INSTANCES (loop_vinfo), j, instance)\n-    vect_free_slp_instance (instance);\n+    vect_free_slp_instance (instance, false);\n   LOOP_VINFO_SLP_INSTANCES (loop_vinfo).release ();\n   /* Reset SLP type to loop_vect on all stmts.  */\n   for (i = 0; i < LOOP_VINFO_LOOP (loop_vinfo)->num_nodes; ++i)\n@@ -8683,7 +8683,7 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n      won't work.  */\n   slp_instance instance;\n   FOR_EACH_VEC_ELT (LOOP_VINFO_SLP_INSTANCES (loop_vinfo), i, instance)\n-    vect_free_slp_instance (instance);\n+    vect_free_slp_instance (instance, true);\n   LOOP_VINFO_SLP_INSTANCES (loop_vinfo).release ();\n   /* Clear-up safelen field since its value is invalid after vectorization\n      since vectorized loop can have loop-carried dependencies.  */"}, {"sha": "18f3a669cc0af5fd2fa97777483d4e57602b5089", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=6e2dd807c2aaaba8906a36766b9f98dfbeddc27d", "patch": "@@ -47,25 +47,32 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n \n \n-/* Recursively free the memory allocated for the SLP tree rooted at NODE.  */\n+/* Recursively free the memory allocated for the SLP tree rooted at NODE.\n+   FINAL_P is true if we have vectorized the instance or if we have\n+   made a final decision not to vectorize the statements in any way.  */\n \n static void\n-vect_free_slp_tree (slp_tree node)\n+vect_free_slp_tree (slp_tree node, bool final_p)\n {\n   int i;\n   slp_tree child;\n \n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n-    vect_free_slp_tree (child);\n+    vect_free_slp_tree (child, final_p);\n \n-  gimple *stmt;\n-  FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt)\n-    /* After transform some stmts are removed and thus their vinfo is gone.  */\n-    if (vinfo_for_stmt (stmt))\n-      {\n-\tgcc_assert (STMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmt)) > 0);\n-\tSTMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmt))--;\n-      }\n+  /* Don't update STMT_VINFO_NUM_SLP_USES if it isn't relevant.\n+     Some statements might no longer exist, after having been\n+     removed by vect_transform_stmt.  Updating the remaining\n+     statements would be redundant.  */\n+  if (!final_p)\n+    {\n+      gimple *stmt;\n+      FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt)\n+\t{\n+\t  gcc_assert (STMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmt)) > 0);\n+\t  STMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmt))--;\n+\t}\n+    }\n \n   SLP_TREE_CHILDREN (node).release ();\n   SLP_TREE_SCALAR_STMTS (node).release ();\n@@ -76,12 +83,14 @@ vect_free_slp_tree (slp_tree node)\n }\n \n \n-/* Free the memory allocated for the SLP instance.  */\n+/* Free the memory allocated for the SLP instance.  FINAL_P is true if we\n+   have vectorized the instance or if we have made a final decision not\n+   to vectorize the statements in any way.  */\n \n void\n-vect_free_slp_instance (slp_instance instance)\n+vect_free_slp_instance (slp_instance instance, bool final_p)\n {\n-  vect_free_slp_tree (SLP_INSTANCE_TREE (instance));\n+  vect_free_slp_tree (SLP_INSTANCE_TREE (instance), final_p);\n   SLP_INSTANCE_LOADS (instance).release ();\n   free (instance);\n }\n@@ -1284,7 +1293,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n       if (++this_tree_size > max_tree_size)\n \t{\n \t  FOR_EACH_VEC_ELT (children, j, child)\n-\t    vect_free_slp_tree (child);\n+\t    vect_free_slp_tree (child, false);\n \t  vect_free_oprnd_info (oprnds_info);\n \t  return NULL;\n \t}\n@@ -1315,7 +1324,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t  this_loads.truncate (old_nloads);\n \t\t  this_tree_size = old_tree_size;\n \t\t  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n-\t\t    vect_free_slp_tree (grandchild);\n+\t\t    vect_free_slp_tree (grandchild, false);\n \t\t  SLP_TREE_CHILDREN (child).truncate (0);\n \n \t\t  dump_printf_loc (MSG_NOTE, vect_location,\n@@ -1495,7 +1504,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t      this_loads.truncate (old_nloads);\n \t\t      this_tree_size = old_tree_size;\n \t\t      FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n-\t\t\tvect_free_slp_tree (grandchild);\n+\t\t\tvect_free_slp_tree (grandchild, false);\n \t\t      SLP_TREE_CHILDREN (child).truncate (0);\n \n \t\t      dump_printf_loc (MSG_NOTE, vect_location,\n@@ -1519,7 +1528,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n fail:\n       gcc_assert (child == NULL);\n       FOR_EACH_VEC_ELT (children, j, child)\n-\tvect_free_slp_tree (child);\n+\tvect_free_slp_tree (child, false);\n       vect_free_oprnd_info (oprnds_info);\n       return NULL;\n     }\n@@ -2036,13 +2045,13 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t\t\t\t \"Build SLP failed: store group \"\n \t\t\t\t \"size not a multiple of the vector size \"\n \t\t\t\t \"in basic block SLP\\n\");\n-\t      vect_free_slp_tree (node);\n+\t      vect_free_slp_tree (node, false);\n \t      loads.release ();\n \t      return false;\n \t    }\n \t  /* Fatal mismatch.  */\n \t  matches[group_size / const_max_nunits * const_max_nunits] = false;\n-\t  vect_free_slp_tree (node);\n+\t  vect_free_slp_tree (node, false);\n \t  loads.release ();\n \t}\n       else\n@@ -2102,7 +2111,7 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t\t      dump_gimple_stmt (MSG_MISSED_OPTIMIZATION,\n \t\t\t\t\tTDF_SLIM, stmt, 0);\n                 }\n-              vect_free_slp_instance (new_instance);\n+\t      vect_free_slp_instance (new_instance, false);\n               return false;\n             }\n         }\n@@ -2133,7 +2142,7 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t\t \"Built SLP cancelled: can use \"\n \t\t\t\t \"load/store-lanes\\n\");\n-\t      vect_free_slp_instance (new_instance);\n+\t      vect_free_slp_instance (new_instance, false);\n \t      return false;\n \t    }\n \t}\n@@ -2668,7 +2677,7 @@ vect_slp_analyze_operations (vec_info *vinfo)\n \t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM,\n \t\t\t    SLP_TREE_SCALAR_STMTS\n \t\t\t      (SLP_INSTANCE_TREE (instance))[0], 0);\n-\t  vect_free_slp_instance (instance);\n+\t  vect_free_slp_instance (instance, false);\n           vinfo->slp_instances.ordered_remove (i);\n \t  cost_vec.release ();\n \t}\n@@ -2947,7 +2956,7 @@ vect_slp_analyze_bb_1 (gimple_stmt_iterator region_begin,\n \t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM,\n \t\t\t    SLP_TREE_SCALAR_STMTS\n \t\t\t      (SLP_INSTANCE_TREE (instance))[0], 0);\n-\t  vect_free_slp_instance (instance);\n+\t  vect_free_slp_instance (instance, false);\n \t  BB_VINFO_SLP_INSTANCES (bb_vinfo).ordered_remove (i);\n \t  continue;\n \t}"}, {"sha": "ffd9a9c0f8a2a4a0730c3832d99249353d72c289", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=6e2dd807c2aaaba8906a36766b9f98dfbeddc27d", "patch": "@@ -466,7 +466,7 @@ vec_info::~vec_info ()\n   unsigned int i;\n \n   FOR_EACH_VEC_ELT (slp_instances, i, instance)\n-    vect_free_slp_instance (instance);\n+    vect_free_slp_instance (instance, true);\n \n   destroy_cost_data (target_cost_data);\n   free_stmt_vec_infos (&stmt_vec_infos);"}, {"sha": "f4839ef6745611149c665782e43c2e0f99d29e89", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=6e2dd807c2aaaba8906a36766b9f98dfbeddc27d", "patch": "@@ -1634,7 +1634,7 @@ extern int vect_get_known_peeling_cost (loop_vec_info, int, int *,\n extern tree cse_and_gimplify_to_preheader (loop_vec_info, tree);\n \n /* In tree-vect-slp.c.  */\n-extern void vect_free_slp_instance (slp_instance);\n+extern void vect_free_slp_instance (slp_instance, bool);\n extern bool vect_transform_slp_perm_load (slp_tree, vec<tree> ,\n \t\t\t\t\t  gimple_stmt_iterator *, poly_uint64,\n \t\t\t\t\t  slp_instance, bool, unsigned *);"}]}