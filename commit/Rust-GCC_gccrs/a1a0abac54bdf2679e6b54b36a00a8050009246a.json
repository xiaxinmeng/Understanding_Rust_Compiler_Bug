{"sha": "a1a0abac54bdf2679e6b54b36a00a8050009246a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFhMGFiYWM1NGJkZjI2NzllNmI1NGIzNmEwMGE4MDUwMDA5MjQ2YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-08-02T07:34:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-08-02T07:34:55Z"}, "message": "re PR libstdc++/58049 (libstdc++ bootstrap failure for fix to PR libstdc++/57779)\n\n2013-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/58049\n\t* include/debug/functions.h: Include <bits/move.h>; minor formatting\n\tchanges.\n\t(__foreign_iterator_aux4): Declare __l and __ge constexpr.\n\t* include/debug/safe_iterator.h (_Safe_iterator<>::operator->):\n\tUse __addressof.\n\t* include/debug/safe_local_iterator.h (_Safe_local_iterator<>::\n\toperator->): Likewise.\n\nFrom-SVN: r201424", "tree": {"sha": "9d118b91e487421949261fc3184a5e3e9d7c7ff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d118b91e487421949261fc3184a5e3e9d7c7ff4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1a0abac54bdf2679e6b54b36a00a8050009246a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a0abac54bdf2679e6b54b36a00a8050009246a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a0abac54bdf2679e6b54b36a00a8050009246a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a0abac54bdf2679e6b54b36a00a8050009246a/comments", "author": null, "committer": null, "parents": [{"sha": "fcf58e3d2f002e8b84ff557a1371388f25038aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf58e3d2f002e8b84ff557a1371388f25038aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcf58e3d2f002e8b84ff557a1371388f25038aed"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "4ec4343d3393c1aa8d56d39b8707188bee966404", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a0abac54bdf2679e6b54b36a00a8050009246a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a0abac54bdf2679e6b54b36a00a8050009246a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a1a0abac54bdf2679e6b54b36a00a8050009246a", "patch": "@@ -1,3 +1,14 @@\n+2013-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/58049\n+\t* include/debug/functions.h: Include <bits/move.h>; minor formatting\n+\tchanges.\n+\t(__foreign_iterator_aux4): Declare __l and __ge constexpr.\n+\t* include/debug/safe_iterator.h (_Safe_iterator<>::operator->):\n+\tUse __addressof.\n+\t* include/debug/safe_local_iterator.h (_Safe_local_iterator<>::\n+\toperator->): Likewise.\n+\n 2013-08-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/57779"}, {"sha": "463353e0fc43ce7b88a9205fd788504b314b485e", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a0abac54bdf2679e6b54b36a00a8050009246a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a0abac54bdf2679e6b54b36a00a8050009246a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=a1a0abac54bdf2679e6b54b36a00a8050009246a", "patch": "@@ -33,6 +33,7 @@\n #include <bits/stl_iterator_base_types.h> // for iterator_traits, categories and\n \t\t\t\t\t  // _Iter_base\n #include <bits/cpp_type_traits.h>\t  // for __is_integer\n+#include <bits/move.h>                    // for __addressof and addressof\n #if __cplusplus >= 201103L\n # include <bits/stl_function.h>\t\t  // for less and greater_equal\n # include <type_traits>\t\t\t  // for common_type\n@@ -126,8 +127,8 @@ namespace __gnu_debug\n     inline bool\n     __valid_range_aux(const _InputIterator& __first,\n \t\t      const _InputIterator& __last, std::__false_type)\n-  { return __valid_range_aux2(__first, __last,\n-\t\t\t      std::__iterator_category(__first)); }\n+    { return __valid_range_aux2(__first, __last,\n+\t\t\t\tstd::__iterator_category(__first)); }\n \n   /** Don't know what these iterators are, or if they are even\n    *  iterators (we may get an integral type for InputIterator), so\n@@ -182,15 +183,14 @@ namespace __gnu_debug\n     {\n       typedef typename std::common_type<_PointerType1,\n \t\t\t\t\t_PointerType2>::type _PointerType;\n-      std::less<_PointerType> __l;\n-      std::greater_equal<_PointerType> __ge;\n-\n-      return\n-\t__l(std::addressof(*__other),\n-\t    std::addressof(*(__it._M_get_sequence()->_M_base().begin())))\n-\t|| __ge(std::addressof(*__other),\n-\t\tstd::addressof(*(__it._M_get_sequence()->_M_base().end() - 1)) + 1);\n-      \n+      constexpr std::less<_PointerType> __l;\n+      constexpr std::greater_equal<_PointerType> __ge;\n+\n+      return (__l(std::addressof(*__other),\n+\t\t  std::addressof(*(__it._M_get_sequence()->_M_base().begin())))\n+\t      || __ge(std::addressof(*__other),\n+\t\t      std::addressof(*(__it._M_get_sequence()->_M_base().end()\n+\t\t\t\t       - 1)) + 1));\n     }\n \t\t\t  \n   template<typename _Iterator, typename _Sequence, typename _InputIterator>\n@@ -205,12 +205,13 @@ namespace __gnu_debug\n       // past-the-end iterator.\n       if (__it._M_get_sequence()->_M_base().begin()\n \t  != __it._M_get_sequence()->_M_base().end())\n-\tif (std::__addressof(*(__it._M_get_sequence()->_M_base().end() - 1))\n-\t    - std::__addressof(*(__it._M_get_sequence()->_M_base().begin()))\n+\tif (std::addressof(*(__it._M_get_sequence()->_M_base().end() - 1))\n+\t    - std::addressof(*(__it._M_get_sequence()->_M_base().begin()))\n \t    == __it._M_get_sequence()->size() - 1)\n-\t  return __foreign_iterator_aux4(__it, __other,\n-\t\t\tstd::addressof(*(__it._M_get_sequence()->_M_base().begin())),\n-\t\t\tstd::addressof(*__other));\n+\t  return (__foreign_iterator_aux4\n+\t\t  (__it, __other,\n+\t\t   std::addressof(*(__it._M_get_sequence()->_M_base().begin())),\n+\t\t   std::addressof(*__other)));\n       return true;\n     }\n \t\t\t   \n@@ -232,8 +233,8 @@ namespace __gnu_debug\n     { return __it._M_get_sequence() != __other._M_get_sequence(); }\n \t\t\t   \n #if __cplusplus >= 201103L\n-  /* This overload detects when passing pointers to the contained elements rather\n-     than using iterators.\n+  /* This overload detects when passing pointers to the contained elements\n+     rather than using iterators.\n    */\n   template<typename _Iterator, typename _Sequence, typename _InputIterator>\n     inline bool\n@@ -271,10 +272,9 @@ namespace __gnu_debug\n \t\t\t   _InputIterator __other,\n \t\t\t   std::__false_type)\n     {\n-      return\n-\t_Insert_range_from_self_is_safe<_Sequence>::__value\n-\t|| __foreign_iterator_aux2(__it, __other,\n-\t\t\t\t   std::__iterator_category(__it));\n+      return (_Insert_range_from_self_is_safe<_Sequence>::__value\n+\t      || __foreign_iterator_aux2(__it, __other,\n+\t\t\t\t\t std::__iterator_category(__it)));\n     }\n \n   template<typename _Iterator, typename _Sequence,"}, {"sha": "a1f7651b1bd329e79399057cc6216d9ed0f515bd", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a0abac54bdf2679e6b54b36a00a8050009246a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a0abac54bdf2679e6b54b36a00a8050009246a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=a1a0abac54bdf2679e6b54b36a00a8050009246a", "patch": "@@ -269,15 +269,14 @@ namespace __gnu_debug\n        *  @brief Iterator dereference.\n        *  @pre iterator is dereferenceable\n        *  @todo Make this correct w.r.t. iterators that return proxies\n-       *  @todo Use addressof() instead of & operator\n        */\n       pointer\n       operator->() const\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_dereferenceable(),\n \t\t\t      _M_message(__msg_bad_deref)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\treturn &*_M_current;\n+\treturn std::__addressof(*_M_current);\n       }\n \n       // ------ Input iterator requirements ------"}, {"sha": "82975b7072296a5c689ea5ef5d9c91457417ad63", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a0abac54bdf2679e6b54b36a00a8050009246a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a0abac54bdf2679e6b54b36a00a8050009246a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=a1a0abac54bdf2679e6b54b36a00a8050009246a", "patch": "@@ -173,15 +173,14 @@ namespace __gnu_debug\n        *  @brief Iterator dereference.\n        *  @pre iterator is dereferenceable\n        *  @todo Make this correct w.r.t. iterators that return proxies\n-       *  @todo Use addressof() instead of & operator\n        */\n       pointer\n       operator->() const\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_dereferenceable(),\n \t\t\t      _M_message(__msg_bad_deref)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\treturn &*_M_current;\n+\treturn std::__addressof(*_M_current);\n       }\n \n       // ------ Input iterator requirements ------"}]}