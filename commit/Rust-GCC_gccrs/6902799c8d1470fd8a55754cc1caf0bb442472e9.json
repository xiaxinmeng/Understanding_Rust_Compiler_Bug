{"sha": "6902799c8d1470fd8a55754cc1caf0bb442472e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkwMjc5OWM4ZDE0NzBmZDhhNTU3NTRjYzFjYWYwYmI0NDI0NzJlOQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-07-16T14:29:08Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2018-07-16T14:29:08Z"}, "message": "S/390: Add direct support for Linux kernel __fentry__ patching.\n\nOn i386, the difference between mcount and fentry is that fentry\ncomes before the prolog. On s390 mcount already comes before the\nprolog, but takes 4 instructions. This patch introduces the more\nefficient implementation (just 1 instruction) and puts it under\n-mfentry flag.\n\nThe produced code is compatible only with newer glibc versions,\nwhich provide the __fentry__ symbol and do not clobber %r0 when\nresolving lazily bound functions. Because 31-bit PLT stubs assume\n%r12 contains GOT address, which is not the case when the code runs\nbefore the prolog, -mfentry is allowed only for 64-bit code.\n\nAlso, code compiled with -mfentry cannot be used for the nested C\nfunctions, since they both use %r0. In this case instrumentation is\nnot insterted, and a new warning is issued for each affected nested\nfunction.\n\n2018-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* common.opt: Add the new warning.\n\t* config/s390/s390.c (s390_function_profiler): Emit \"brasl\n\t%r0,__fentry__\" when -mfentry is specified.\n\t(s390_option_override_internal): Disallow -mfentry for 31-bit\n\tCPUs.\n\t* config/s390/s390.opt: Add the new option.\n\n2018-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/mfentry-m64.c: New testcase.\n\nFrom-SVN: r262732", "tree": {"sha": "4737ab3fe3006a96ff3d3df645c23b717060c2b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4737ab3fe3006a96ff3d3df645c23b717060c2b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6902799c8d1470fd8a55754cc1caf0bb442472e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6902799c8d1470fd8a55754cc1caf0bb442472e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6902799c8d1470fd8a55754cc1caf0bb442472e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6902799c8d1470fd8a55754cc1caf0bb442472e9/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96e4fda582406cea5c33cecc54cb4f6d1ba8083f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e4fda582406cea5c33cecc54cb4f6d1ba8083f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e4fda582406cea5c33cecc54cb4f6d1ba8083f"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "de108a529ce7148524e71aec48e48e2eb54b30a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6902799c8d1470fd8a55754cc1caf0bb442472e9", "patch": "@@ -1,3 +1,12 @@\n+2018-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* common.opt: Add the new warning.\n+\t* config/s390/s390.c (s390_function_profiler): Emit \"brasl\n+\t%r0,__fentry__\" when -mfentry is specified.\n+\t(s390_option_override_internal): Disallow -mfentry for 31-bit\n+\tCPUs.\n+\t* config/s390/s390.opt: Add the new option.\n+\n 2018-07-16  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/86523"}, {"sha": "4d031e81b09a2d5b32aebf02e64561612dde1778", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6902799c8d1470fd8a55754cc1caf0bb442472e9", "patch": "@@ -571,6 +571,11 @@ Wattribute-alias\n Common Var(warn_attributes) Init(1) Warning\n Warn about type safety and similar errors in attribute alias and related.\n \n+Wcannot-profile\n+Common Var(warn_cannot_profile) Init(1) Warning\n+Warn when profiling instrumentation was requested, but could not be applied to\n+a certain function.\n+\n Wcast-align\n Common Var(warn_cast_align) Warning\n Warn about pointer casts which increase alignment."}, {"sha": "3a406b955a0e83a699bd8fe909f09fe033482f48", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=6902799c8d1470fd8a55754cc1caf0bb442472e9", "patch": "@@ -13144,14 +13144,22 @@ s390_function_profiler (FILE *file, int labelno)\n   op[3] = gen_rtx_SYMBOL_REF (Pmode, label);\n   SYMBOL_REF_FLAGS (op[3]) = SYMBOL_FLAG_LOCAL;\n \n-  op[4] = gen_rtx_SYMBOL_REF (Pmode, \"_mcount\");\n+  op[4] = gen_rtx_SYMBOL_REF (Pmode, flag_fentry ? \"__fentry__\" : \"_mcount\");\n   if (flag_pic)\n     {\n       op[4] = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op[4]), UNSPEC_PLT);\n       op[4] = gen_rtx_CONST (Pmode, op[4]);\n     }\n \n-  if (TARGET_64BIT)\n+  if (flag_fentry)\n+    {\n+      if (cfun->static_chain_decl)\n+        warning (OPT_Wcannot_profile, \"nested functions cannot be profiled \"\n+                 \"with -mfentry on s390\");\n+      else\n+        output_asm_insn (\"brasl\\t0,%4\", op);\n+    }\n+  else if (TARGET_64BIT)\n     {\n       output_asm_insn (\"stg\\t%0,%1\", op);\n       output_asm_insn (\"larl\\t%2,%3\", op);\n@@ -15562,6 +15570,12 @@ s390_option_override_internal (bool main_args_p,\n   /* Call target specific restore function to do post-init work.  At the moment,\n      this just sets opts->x_s390_cost_pointer.  */\n   s390_function_specific_restore (opts, NULL);\n+\n+  /* Check whether -mfentry is supported. It cannot be used in 31-bit mode,\n+     because 31-bit PLT stubs assume that %r12 contains GOT address, which is\n+     not the case when the code runs before the prolog. */\n+  if (opts->x_flag_fentry && !TARGET_64BIT)\n+    error (\"-mfentry is supported only for 64-bit CPUs\");\n }\n \n static void"}, {"sha": "59e97d031b49159a382cdfec462cc448eaa6f50e", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=6902799c8d1470fd8a55754cc1caf0bb442472e9", "patch": "@@ -293,3 +293,8 @@ locations which have been patched as part of using one of the\n -mindirect-branch* or -mfunction-return* options.  The sections\n consist of an array of 32 bit elements. Each entry holds the offset\n from the entry to the patched location.\n+\n+mfentry\n+Target Report Var(flag_fentry)\n+Emit profiling counter call at function entry before prologue. The compiled\n+code will require a 64-bit CPU and glibc 2.29 or newer to run."}, {"sha": "e0503f265ff7e46543d6dc14e39f94cca65c9609", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6902799c8d1470fd8a55754cc1caf0bb442472e9", "patch": "@@ -1,3 +1,7 @@\n+2018-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/mfentry-m64.c: New testcase.\n+\n 2018-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* gnat.dg/abstract_state1.adb, gnat.dg/abstract_state1.ads: New"}, {"sha": "aa3fc81248f2e4141a83136bb1dfbabb12c6b453", "filename": "gcc/testsuite/gcc.target/s390/mfentry-m64.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmfentry-m64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6902799c8d1470fd8a55754cc1caf0bb442472e9/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmfentry-m64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmfentry-m64.c?ref=6902799c8d1470fd8a55754cc1caf0bb442472e9", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { lp64 } } } */\n+/* { dg-options \"-pg -mfentry\" } */\n+\n+void\n+profileme (void)\n+{\n+  /* { dg-final { scan-assembler \"brasl\\t0,__fentry__\" } } */\n+}"}]}