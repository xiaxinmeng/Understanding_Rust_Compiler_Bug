{"sha": "5d4f5e87677fb8ed97770699ee46e002593cb64d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0ZjVlODc2NzdmYjhlZDk3NzcwNjk5ZWU0NmUwMDI1OTNjYjY0ZA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-09-25T01:03:13Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-09-25T01:03:13Z"}, "message": "sparc.md (*): Use GEN_INT instead of gen_rtx.\n\n\t* sparc/sparc.md (*): Use GEN_INT instead of gen_rtx.\n\t(get_pc_sp32): Use for sparc64 as well.\n\t(lo_sum_di_sp{32,64}): Fix handling on 64 bit hosts.\n\t(sethi_di_sp64_const): Likewise.\n\t(movtf_cc_sp64): Check TARGET_HARD_QUAD.\n\t(cmp_zero_extract_sp64): Use unsigned HOST_WIDE_INT in cast.\n\t(ashlsi3, ashldi3, ashrsi3, ashrdi3, lshrsi3, lshrdi3): Likewise.\n\nFrom-SVN: r15705", "tree": {"sha": "30a1a9d32fae629fe78d70552311a8ef6b2976fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30a1a9d32fae629fe78d70552311a8ef6b2976fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d4f5e87677fb8ed97770699ee46e002593cb64d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4f5e87677fb8ed97770699ee46e002593cb64d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d4f5e87677fb8ed97770699ee46e002593cb64d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4f5e87677fb8ed97770699ee46e002593cb64d/comments", "author": null, "committer": null, "parents": [{"sha": "26b551afd86642911cdd7fb5bbd5b2f5258ffc6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b551afd86642911cdd7fb5bbd5b2f5258ffc6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b551afd86642911cdd7fb5bbd5b2f5258ffc6c"}], "stats": {"total": 96, "additions": 63, "deletions": 33}, "files": [{"sha": "ef28accc355495c9311e1a191964a15a56d7599f", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 63, "deletions": 33, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4f5e87677fb8ed97770699ee46e002593cb64d/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4f5e87677fb8ed97770699ee46e002593cb64d/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=5d4f5e87677fb8ed97770699ee46e002593cb64d", "patch": "@@ -1533,14 +1533,14 @@\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"get_pc_sp32\"\n+(define_insn \"get_pc_via_call\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))\n-   (set (reg:SI 15) (label_ref (match_dup 0)))]\n-  \"! TARGET_PTR64\"\n+   (set (reg:SI 15) (label_ref (match_operand 1 \"\" \"\")))]\n+  \"\"\n   \"call %l0%#\"\n   [(set_attr \"type\" \"uncond_branch\")])\n \n-(define_insn \"get_pc_sp64\"\n+(define_insn \"get_pc_via_rdpc\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\") (pc))]\n   \"TARGET_PTR64\"\n   \"rd %%pc,%0\"\n@@ -1611,7 +1611,12 @@\n   /* Don't output a 64 bit constant, since we can't trust the assembler to\n      handle it correctly.  */\n   if (GET_CODE (operands[2]) == CONST_DOUBLE)\n-    operands[2] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (operands[2]));\n+    operands[2] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n+  else if (GET_CODE (operands[2]) == CONST_INT\n+\t   && HOST_BITS_PER_WIDE_INT > 32\n+\t   && INTVAL (operands[2]) > 0xffffffff)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 0xffffffff);\n+\n   return \\\"or %L1,%%lo(%a2),%L0\\\";\n }\"\n   ;; Need to set length for this arith insn because operand2\n@@ -1630,7 +1635,12 @@\n   /* Don't output a 64 bit constant, since we can't trust the assembler to\n      handle it correctly.  */\n   if (GET_CODE (operands[2]) == CONST_DOUBLE)\n-    operands[2] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (operands[2]));\n+    operands[2] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n+  else if (GET_CODE (operands[2]) == CONST_INT\n+\t   && HOST_BITS_PER_WIDE_INT > 32\n+\t   && INTVAL (operands[2]) > 0xffffffff)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 0xffffffff);\n+\n   /* Note that we use add here.  This is important because Medium/Anywhere\n      code model support depends on it.  */\n   return \\\"add %1,%%lo(%a2),%0\\\";\n@@ -1662,11 +1672,11 @@\n   else if (GET_CODE (op1) == CONST_DOUBLE)\n     {\n       operands[0] = operand_subword (op0, 1, 0, DImode);\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (op1));\n+      operands[1] = GEN_INT (CONST_DOUBLE_LOW (op1));\n       output_asm_insn (\\\"sethi %%hi(%a1),%0\\\", operands);\n \n       operands[0] = operand_subword (op0, 0, 0, DImode);\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_HIGH (op1));\n+      operands[1] = GEN_INT (CONST_DOUBLE_HIGH (op1));\n       return singlemove_string (operands);\n     }\n   else\n@@ -1700,6 +1710,7 @@\n   \"TARGET_ARCH64 && check_pic (1)\"\n   \"*\n {\n+#if HOST_BITS_PER_WIDE_INT == 32\n   rtx high, low;\n   \n   split_double (operands[1], &high, &low);\n@@ -1719,6 +1730,26 @@\n       if (low != const0_rtx)\n \toutput_asm_insn (\\\"sethi %%hi(%a1),%%g1; or %0,%%g1,%0\\\", operands);\n     }\n+#else\n+  rtx op = operands[1];\n+\n+  if (! SPARC_SETHI_P (INTVAL(op)))\n+    {\n+      operands[1] = GEN_INT (INTVAL (op) >> 32);\n+      output_asm_insn (singlemove_string (operands), operands);\n+\n+      output_asm_insn (\\\"sllx %0,32,%0\\\", operands);\n+      if (INTVAL (op) & 0xffffffff)\n+\t{\n+\t  operands[1] = GEN_INT (INTVAL (op) & 0xffffffff);\n+\t  output_asm_insn (\\\"sethi %%hi(%a1),%%g1; or %0,%%g1,%0\\\", operands);\n+\t}\n+    }\n+  else\n+    {\n+      output_asm_insn (\\\"sethi %%hi(%a1),%0\\\", operands);\n+    }\n+#endif\n \n   return \\\"\\\";\n }\"\n@@ -2030,8 +2061,7 @@\n \treturn \\\"sethi %%hi(%a1),%0\\\";\n       else\n \t{\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t ~ INTVAL (operands[1]));\n+\t  operands[1] = GEN_INT (~INTVAL (operands[1]));\n \t  output_asm_insn (\\\"sethi %%hi(%a1),%0\\\", operands);\n \t  /* The low 10 bits are already zero, but invert the rest.\n \t     Assemblers don't accept 0x1c00, so use -0x400 instead.  */\n@@ -2698,7 +2728,7 @@\n \t\t\t\t (const_int 0)])\n \t\t      (match_operand:TF 3 \"register_operand\" \"e,0\")\n \t\t      (match_operand:TF 4 \"register_operand\" \"0,e\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n   \"@\n    fmovq%C1 %x2,%3,%0\n    fmovq%c1 %x2,%4,%0\"\n@@ -2809,7 +2839,7 @@\n   \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n-  rtx shift_16 = gen_rtx (CONST_INT, VOIDmode, 16);\n+  rtx shift_16 = GEN_INT (16);\n   int op1_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)\n@@ -2887,7 +2917,7 @@\n   \"\n {\n   rtx temp = gen_reg_rtx (DImode);\n-  rtx shift_48 = gen_rtx (CONST_INT, VOIDmode, 48);\n+  rtx shift_48 = GEN_INT (48);\n   int op1_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)\n@@ -2981,7 +3011,7 @@\n   \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n-  rtx shift_16 = gen_rtx (CONST_INT, VOIDmode, 16);\n+  rtx shift_16 = GEN_INT (16);\n   int op1_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)\n@@ -3011,7 +3041,7 @@\n   \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n-  rtx shift_24 = gen_rtx (CONST_INT, VOIDmode, 24);\n+  rtx shift_24 = GEN_INT (24);\n   int op1_subword = 0;\n   int op0_subword = 0;\n \n@@ -3048,7 +3078,7 @@\n   \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n-  rtx shift_24 = gen_rtx (CONST_INT, VOIDmode, 24);\n+  rtx shift_24 = GEN_INT (24);\n   int op1_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)\n@@ -3078,7 +3108,7 @@\n   \"\n {\n   rtx temp = gen_reg_rtx (DImode);\n-  rtx shift_56 = gen_rtx (CONST_INT, VOIDmode, 56);\n+  rtx shift_56 = GEN_INT (56);\n   int op1_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)\n@@ -3108,7 +3138,7 @@\n   \"\n {\n   rtx temp = gen_reg_rtx (DImode);\n-  rtx shift_48 = gen_rtx (CONST_INT, VOIDmode, 48);\n+  rtx shift_48 = GEN_INT (48);\n   int op1_subword = 0;\n \n   if (GET_CODE (operand1) == SUBREG)\n@@ -3164,7 +3194,7 @@\n   int pos = 32 - INTVAL (operands[2]) - len;\n   unsigned mask = ((1 << len) - 1) << pos;\n \n-  operands[1] = gen_rtx (CONST_INT, VOIDmode, mask);\n+  operands[1] = GEN_INT (mask);\n   return \\\"andcc %0,%1,%%g0\\\";\n }\")\n \n@@ -3180,9 +3210,9 @@\n {\n   int len = INTVAL (operands[1]);\n   int pos = 64 - INTVAL (operands[2]) - len;\n-  unsigned mask = ((1 << len) - 1) << pos;\n+  unsigned HOST_WIDE_INT mask = (((unsigned HOST_WIDE_INT) 1 << len) - 1) << pos;\n \n-  operands[1] = gen_rtx (CONST_INT, VOIDmode, mask);\n+  operands[1] = GEN_INT (mask);\n   return \\\"andcc %0,%1,%%g0\\\";\n }\")\n \f\n@@ -4100,7 +4130,7 @@\n    (set (match_dup 0) (and:SI (not:SI (match_dup 3)) (match_dup 1)))]\n   \"\n {\n-  operands[4] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (operands[2]));\n+  operands[4] = GEN_INT (~INTVAL (operands[2]));\n }\")\n \n (define_insn \"*and_not_di_sp32\"\n@@ -4186,7 +4216,7 @@\n    (set (match_dup 0) (ior:SI (not:SI (match_dup 3)) (match_dup 1)))]\n   \"\n {\n-  operands[4] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (operands[2]));\n+  operands[4] = GEN_INT (~INTVAL (operands[2]));\n }\")\n \n (define_insn \"*or_not_di_sp32\"\n@@ -4272,7 +4302,7 @@\n    (set (match_dup 0) (not:SI (xor:SI (match_dup 3) (match_dup 1))))]\n   \"\n {\n-  operands[4] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (operands[2]));\n+  operands[4] = GEN_INT (~INTVAL (operands[2]));\n }\")\n \n (define_split\n@@ -4287,7 +4317,7 @@\n    (set (match_dup 0) (xor:SI (match_dup 3) (match_dup 1)))]\n   \"\n {\n-  operands[4] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (operands[2]));\n+  operands[4] = GEN_INT (~INTVAL (operands[2]));\n }\")\n \n ;; xnor patterns.  Note that (a ^ ~b) == (~a ^ b) == ~(a ^ b).\n@@ -4855,7 +4885,7 @@\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n-      && (unsigned) INTVAL (operands[2]) > 31)\n+      && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 31)\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n \n   return \\\"sll %1,%2,%0\\\";\n@@ -4870,7 +4900,7 @@\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n-      && (unsigned) INTVAL (operands[2]) > 63)\n+      && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 31)\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x3f);\n \n   return \\\"sllx %1,%2,%0\\\";\n@@ -4903,7 +4933,7 @@\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n-      && (unsigned) INTVAL (operands[2]) > 31)\n+      && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 31)\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n \n   return \\\"sra %1,%2,%0\\\";\n@@ -4918,7 +4948,7 @@\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n-      && (unsigned) INTVAL (operands[2]) > 63)\n+      && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 63)\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x3f);\n \n   return \\\"srax %1,%2,%0\\\";\n@@ -4932,7 +4962,7 @@\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n-      && (unsigned) INTVAL (operands[2]) > 31)\n+      && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 31)\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n \n   return \\\"srl %1,%2,%0\\\";\n@@ -4947,7 +4977,7 @@\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n-      && (unsigned) INTVAL (operands[2]) > 63)\n+      && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 63)\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x3f);\n \n   return \\\"srlx %1,%2,%0\\\";\n@@ -5075,9 +5105,9 @@\n      means 6 on the sparc.  */\n #if 0\n   if (operands[2])\n-    nregs_rtx = gen_rtx (CONST_INT, VOIDmode, REGNO (operands[2]) - 8);\n+    nregs_rtx = GEN_INT (REGNO (operands[2]) - 8);\n   else\n-    nregs_rtx = gen_rtx (CONST_INT, VOIDmode, 6);\n+    nregs_rtx = GEN_INT (6);\n #else\n   nregs_rtx = const0_rtx;\n #endif"}]}