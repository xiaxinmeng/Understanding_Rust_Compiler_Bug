{"sha": "6c72f1bfc3469422460d86314a081353632d4bcb", "node_id": "C_kwDOANBUbNoAKDZjNzJmMWJmYzM0Njk0MjI0NjBkODYzMTRhMDgxMzUzNjMyZDRiY2I", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-23T18:41:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-23T21:16:42Z"}, "message": "c++: designated init cleanup [PR105925]\n\nbuild_aggr_conv expects to run after reshape_init, which will usually have\nfilled out all the CONSTRUCTOR indexes; there's no reason to limit using\nthose to the case where the user gave an explicit designator.\n\n\tPR c++/105925\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (build_aggr_conv): Don't depend on\n\tCONSTRUCTOR_IS_DESIGNATED_INIT.", "tree": {"sha": "fffc5baa95a136a6c86f3591bd53988deb971dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fffc5baa95a136a6c86f3591bd53988deb971dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c72f1bfc3469422460d86314a081353632d4bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c72f1bfc3469422460d86314a081353632d4bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c72f1bfc3469422460d86314a081353632d4bcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c72f1bfc3469422460d86314a081353632d4bcb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d610ae121e8ecd738de4dc01e6ac11ecf7c2327e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d610ae121e8ecd738de4dc01e6ac11ecf7c2327e"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "f1dd837762863199e60b1e9c3d7d8eae28e92d99", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c72f1bfc3469422460d86314a081353632d4bcb/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c72f1bfc3469422460d86314a081353632d4bcb/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=6c72f1bfc3469422460d86314a081353632d4bcb", "patch": "@@ -969,7 +969,8 @@ build_aggr_conv (tree type, tree ctor, int flags, tsubst_flags_t complain)\n   tree empty_ctor = NULL_TREE;\n   hash_set<tree, true> pset;\n \n-  /* We already called reshape_init in implicit_conversion.  */\n+  /* We already called reshape_init in implicit_conversion, but it might not\n+     have done anything in the case of parenthesized aggr init.  */\n \n   /* The conversions within the init-list aren't affected by the enclosing\n      context; they're always simple copy-initialization.  */\n@@ -979,49 +980,48 @@ build_aggr_conv (tree type, tree ctor, int flags, tsubst_flags_t complain)\n      to corresponding TREE_TYPE (ce->index) and mark those FIELD_DECLs as\n      visited.  In the following loop then ignore already visited\n      FIELD_DECLs.  */\n-  if (CONSTRUCTOR_IS_DESIGNATED_INIT (ctor))\n+  tree idx, val;\n+  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), i, idx, val)\n     {\n-      tree idx, val;\n-      FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), i, idx, val)\n-\t{\n-\t  if (idx && TREE_CODE (idx) == FIELD_DECL)\n-\t    {\n-\t      tree ftype = TREE_TYPE (idx);\n-\t      bool ok;\n+      if (!idx)\n+\tbreak;\n \n-\t      if (TREE_CODE (ftype) == ARRAY_TYPE)\n-\t\tok = can_convert_array (ftype, val, flags, complain);\n-\t      else\n-\t\tok = can_convert_arg (ftype, TREE_TYPE (val), val, flags,\n-\t\t\t\t      complain);\n+      gcc_checking_assert (TREE_CODE (idx) == FIELD_DECL);\n \n-\t      if (!ok)\n-\t\treturn NULL;\n-\t      /* For unions, there should be just one initializer.  */\n-\t      if (TREE_CODE (type) == UNION_TYPE)\n-\t\t{\n-\t\t  field = NULL_TREE;\n-\t\t  i = 1;\n-\t\t  break;\n-\t\t}\n-\t      pset.add (idx);\n-\t    }\n-\t  else\n-\t    return NULL;\n+      tree ftype = TREE_TYPE (idx);\n+      bool ok;\n+\n+      if (TREE_CODE (ftype) == ARRAY_TYPE)\n+\tok = can_convert_array (ftype, val, flags, complain);\n+      else\n+\tok = can_convert_arg (ftype, TREE_TYPE (val), val, flags,\n+\t\t\t      complain);\n+\n+      if (!ok)\n+\treturn NULL;\n+\n+      /* For unions, there should be just one initializer.  */\n+      if (TREE_CODE (type) == UNION_TYPE)\n+\t{\n+\t  field = NULL_TREE;\n+\t  i = 1;\n+\t  break;\n \t}\n+      pset.add (idx);\n     }\n \n   for (; field; field = next_aggregate_field (DECL_CHAIN (field)))\n     {\n       tree ftype = TREE_TYPE (field);\n-      tree val;\n       bool ok;\n \n       if (!pset.is_empty () && field_in_pset (pset, field))\n \tcontinue;\n       if (i < CONSTRUCTOR_NELTS (ctor))\n \t{\n-\t  val = CONSTRUCTOR_ELT (ctor, i)->value;\n+\t  constructor_elt *ce = CONSTRUCTOR_ELT (ctor, i);\n+\t  gcc_checking_assert (!ce->index);\n+\t  val = ce->value;\n \t  ++i;\n \t}\n       else if (DECL_INITIAL (field))"}]}