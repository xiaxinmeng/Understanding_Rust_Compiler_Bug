{"sha": "28c5db5784e89103e979fa1ec165494ff82e53c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhjNWRiNTc4NGU4OTEwM2U5NzlmYTFlYzE2NTQ5NGZmODJlNTNjMA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-01-25T06:45:54Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2011-01-25T06:45:54Z"}, "message": "Use PIP to determine the integer feasibility of a constraint system.\n\n2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-dependences.c (new_poly_dr): Call ppl_powerset_is_empty.\n\t(build_lexicographical_constraint): Same.\n\t(dependence_polyhedron_1): Same.\n\t(graphite_legal_transform_dr): Same.\n\t(graphite_carried_dependence_level_k): Same.\n\t* graphite-ppl.c (ppl_powerset_is_empty): New.\n\t* graphite-ppl.h (ppl_powerset_is_empty): Declared.\n\t* tree-data-ref.c (dump_data_reference): Print the basic block index.\n\n\t* gcc.dg/graphite/block-0.c: Add documentation.\n\t* gcc.dg/graphite/block-4.c: Same.\n\t* gcc.dg/graphite/block-7.c: Same.\n\t* gcc.dg/graphite/block-8.c: New.\n\t* gcc.dg/graphite/interchange-1.c: Un-XFAILed.\n\t* gcc.dg/graphite/interchange-11.c: Un-XFAILed.\n\t* gcc.dg/graphite/interchange-12.c: Add documentation.\n\t* gcc.dg/graphite/interchange-13.c: New.\n\t* gcc.dg/graphite/interchange-14.c: New.\n\t* gcc.dg/graphite/interchange-15.c: New.\n\t* gcc.dg/graphite/interchange-8.c: Add documentation.\n\t* gcc.dg/graphite/interchange-mvt.c: Same.\n\nFrom-SVN: r169205", "tree": {"sha": "5ce48fdbb4456d22a075cc1e7ccfc54d01248063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ce48fdbb4456d22a075cc1e7ccfc54d01248063"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28c5db5784e89103e979fa1ec165494ff82e53c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c5db5784e89103e979fa1ec165494ff82e53c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c5db5784e89103e979fa1ec165494ff82e53c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c5db5784e89103e979fa1ec165494ff82e53c0/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5168d98f3d2f48196f3f7f33906492f5e5b22275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5168d98f3d2f48196f3f7f33906492f5e5b22275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5168d98f3d2f48196f3f7f33906492f5e5b22275"}], "stats": {"total": 394, "additions": 379, "deletions": 15}, "files": [{"sha": "567f42e1317cc6f86457e8b4d0b5dfd270f99fa4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -1,3 +1,14 @@\n+2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-dependences.c (new_poly_dr): Call ppl_powerset_is_empty.\n+\t(build_lexicographical_constraint): Same.\n+\t(dependence_polyhedron_1): Same.\n+\t(graphite_legal_transform_dr): Same.\n+\t(graphite_carried_dependence_level_k): Same.\n+\t* graphite-ppl.c (ppl_powerset_is_empty): New.\n+\t* graphite-ppl.h (ppl_powerset_is_empty): Declared.\n+\t* tree-data-ref.c (dump_data_reference): Print the basic block index.\n+\n 2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (build_pairwise_scheduling): Correctly compute"}, {"sha": "aae2041532dfa8638acc7fa430fe247e243f84c5", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -1,3 +1,27 @@\n+2011-01-15  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-dependences.c (new_poly_dr): Call ppl_powerset_is_empty.\n+\t(build_lexicographical_constraint): Same.\n+\t(dependence_polyhedron_1): Same.\n+\t(graphite_legal_transform_dr): Same.\n+\t(graphite_carried_dependence_level_k): Same.\n+\t* graphite-ppl.c (ppl_powerset_is_empty): New.\n+\t* graphite-ppl.h (ppl_powerset_is_empty): Declared.\n+\t* tree-data-ref.c (dump_data_reference): Print the basic block index.\n+\n+\t* gcc.dg/graphite/block-0.c: Add documentation.\n+\t* gcc.dg/graphite/block-4.c: Same.\n+\t* gcc.dg/graphite/block-7.c: Same.\n+\t* gcc.dg/graphite/block-8.c: New.\n+\t* gcc.dg/graphite/interchange-1.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-11.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-12.c: Add documentation.\n+\t* gcc.dg/graphite/interchange-13.c: New.\n+\t* gcc.dg/graphite/interchange-14.c: New.\n+\t* gcc.dg/graphite/interchange-15.c: New.\n+\t* gcc.dg/graphite/interchange-8.c: Add documentation.\n+\t* gcc.dg/graphite/interchange-mvt.c: Same.\n+\n 2011-01-15  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (build_pairwise_scheduling): Correctly compute"}, {"sha": "d1e7d69912ccd816f037152db08ac3be2dfcedab", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -53,7 +53,9 @@ new_poly_ddr (poly_dr_p source, poly_dr_p sink,\n   PDDR_DDP (pddr) = ddp;\n   PDDR_ORIGINAL_SCATTERING_P (pddr) = original_scattering_p;\n \n-  if (!ddp || ppl_Pointset_Powerset_C_Polyhedron_is_empty (ddp))\n+  if (!ddp\n+      || ppl_powerset_is_empty (ddp,\n+\t\t\t\tscop_nb_params (PBB_SCOP (PDR_PBB (source)))))\n     PDDR_KIND (pddr) = no_dependence;\n   else\n     PDDR_KIND (pddr) = has_dependence;\n@@ -394,13 +396,14 @@ build_pairwise_scheduling (graphite_dim_t dim,\n    the BAG polyhedron: T1|I1|T2|I2|S1|S2|G.  When DIRECTION is set to\n    1, compute the direct dependence from PDR1 to PDR2, and when\n    DIRECTION is -1, compute the reversed dependence relation, from\n-   PDR2 to PDR1.  */\n+   PDR2 to PDR1.  GDIM is the number of parameters in the scop.  */\n \n static ppl_Pointset_Powerset_C_Polyhedron_t\n build_lexicographical_constraint (ppl_Pointset_Powerset_C_Polyhedron_t bag,\n \t\t\t\t  graphite_dim_t dim,\n \t\t\t\t  graphite_dim_t tdim,\n \t\t\t\t  graphite_dim_t offset,\n+\t\t\t\t  graphite_dim_t gdim,\n \t\t\t\t  int direction)\n {\n   graphite_dim_t i;\n@@ -411,7 +414,7 @@ build_lexicographical_constraint (ppl_Pointset_Powerset_C_Polyhedron_t bag,\n   lex = build_pairwise_scheduling (dim, 0, offset, direction);\n   ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (lex, bag);\n \n-  if (!ppl_Pointset_Powerset_C_Polyhedron_is_empty (lex))\n+  if (!ppl_powerset_is_empty (lex, gdim))\n     ppl_Pointset_Powerset_C_Polyhedron_upper_bound_assign (res, lex);\n \n   ppl_delete_Pointset_Powerset_C_Polyhedron (lex);\n@@ -424,13 +427,13 @@ build_lexicographical_constraint (ppl_Pointset_Powerset_C_Polyhedron_t bag,\n       ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (bag, sceq);\n       ppl_delete_Pointset_Powerset_C_Polyhedron (sceq);\n \n-      if (ppl_Pointset_Powerset_C_Polyhedron_is_empty (bag))\n+      if (ppl_powerset_is_empty (bag, gdim))\n \tbreak;\n \n       lex = build_pairwise_scheduling (dim, i + 1, offset, direction);\n       ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (lex, bag);\n \n-      if (!ppl_Pointset_Powerset_C_Polyhedron_is_empty (lex))\n+      if (!ppl_powerset_is_empty (lex, gdim))\n \tppl_Pointset_Powerset_C_Polyhedron_upper_bound_assign (res, lex);\n \n       ppl_delete_Pointset_Powerset_C_Polyhedron (lex);\n@@ -509,11 +512,11 @@ dependence_polyhedron_1 (poly_dr_p pdr1, poly_dr_p pdr2,\n   ppl_delete_Pointset_Powerset_C_Polyhedron (idr2);\n   ppl_delete_Pointset_Powerset_C_Polyhedron (dreq);\n \n-  if (!ppl_Pointset_Powerset_C_Polyhedron_is_empty (res))\n+  if (!ppl_powerset_is_empty (res, gdim))\n     {\n       ppl_Pointset_Powerset_C_Polyhedron_t lex =\n \tbuild_lexicographical_constraint (res, dim, MIN (tdim1, tdim2),\n-\t\t\t\t\t  tdim1 + ddim1, direction);\n+\t\t\t\t\t  tdim1 + ddim1, gdim, direction);\n       ppl_delete_Pointset_Powerset_C_Polyhedron (res);\n       res = lex;\n     }\n@@ -682,7 +685,8 @@ graphite_legal_transform_dr (poly_dr_p pdr1, poly_dr_p pdr2)\n   ppl_insert_dimensions_pointset (pt, otdim1 + ttdim1 + ddim1, otdim2);\n \n   ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (po_temp, pt);\n-  is_empty_p = ppl_Pointset_Powerset_C_Polyhedron_is_empty (po_temp);\n+  is_empty_p = ppl_powerset_is_empty (po_temp,\n+\t\t\t\t      scop_nb_params (PBB_SCOP (pbb1)));\n \n   ppl_delete_Pointset_Powerset_C_Polyhedron (po_temp);\n   free_poly_ddr (tpddr);\n@@ -783,7 +787,8 @@ graphite_carried_dependence_level_k (poly_dr_p pdr1, poly_dr_p pdr2,\n   eqpp = build_pairwise_scheduling (dim, level, tdim1 + ddim1, 1);\n \n   ppl_Pointset_Powerset_C_Polyhedron_intersection_assign (eqpp, po);\n-  empty_p = ppl_Pointset_Powerset_C_Polyhedron_is_empty (eqpp);\n+  empty_p = ppl_powerset_is_empty\n+    (eqpp, scop_nb_params (PBB_SCOP (PDR_PBB (pdr1))));\n \n   ppl_delete_Pointset_Powerset_C_Polyhedron (eqpp);\n   free_poly_ddr (pddr);"}, {"sha": "d879d788738a4a5c65b47ee91abf25e99fd06b3e", "filename": "gcc/graphite-ppl.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Fgraphite-ppl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Fgraphite-ppl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-ppl.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -515,4 +515,77 @@ debug_gmp_value (mpz_t val)\n   (*gmp_free) (str, strlen (str) + 1);\n }\n \n+/* Checks for integer feasibility: returns true when the powerset\n+   polyhedron PS has no integer solutions.  NB_PARAMS is the number of\n+   dimensions used as parameters in PS.  If DIM is the dimension of\n+   PS, the parameter dimensions are in between DIM - NB_PARAMS and\n+   DIM.  */\n+\n+bool\n+ppl_powerset_is_empty (ppl_Pointset_Powerset_C_Polyhedron_t ps,\n+\t\t       int nb_params ATTRIBUTE_UNUSED)\n+{\n+#if PPL_VERSION_MAJOR == 0 && PPL_VERSION_MINOR < 11\n+  /* On PPL 0.10,\n+     ppl_Pointset_Powerset_C_Polyhedron_contains_integer_point (ps)\n+     takes too long on some cases and so we call _is_empty instead.  */\n+  return ppl_Pointset_Powerset_C_Polyhedron_is_empty (ps);\n+\n+#else\n+  /* On PPL 0.11 or later, we can check for integer feasibility using\n+     the PIP solver.  */\n+  ppl_PIP_Problem_t pip;\n+  ppl_dimension_type d;\n+  ppl_const_Constraint_System_t pcs;\n+  ppl_Constraint_System_const_iterator_t first, last;\n+  ppl_Pointset_Powerset_C_Polyhedron_iterator_t it, end;\n+  int i;\n+  bool has_integer_solutions = false;\n+  ppl_dimension_type *ds;\n+  int dim_first_parameter;\n+\n+  if (ppl_Pointset_Powerset_C_Polyhedron_is_empty (ps))\n+    return true;\n+\n+  ppl_Pointset_Powerset_C_Polyhedron_space_dimension (ps, &d);\n+  dim_first_parameter = d - nb_params;\n+  ds = (ppl_dimension_type *) XNEWVEC (ppl_dimension_type, nb_params);\n+\n+  for (i = 0; i < nb_params; i++)\n+    ds[i] = dim_first_parameter + i;\n+\n+  ppl_new_Constraint_System_const_iterator (&first);\n+  ppl_new_Constraint_System_const_iterator (&last);\n+  ppl_new_Pointset_Powerset_C_Polyhedron_iterator (&it);\n+  ppl_new_Pointset_Powerset_C_Polyhedron_iterator (&end);\n+\n+  for (ppl_Pointset_Powerset_C_Polyhedron_iterator_begin (ps, it),\n+       ppl_Pointset_Powerset_C_Polyhedron_iterator_end (ps, end);\n+       !ppl_Pointset_Powerset_C_Polyhedron_iterator_equal_test (it, end);\n+       ppl_Pointset_Powerset_C_Polyhedron_iterator_increment (it))\n+    {\n+      ppl_const_Polyhedron_t ph;\n+      ppl_Pointset_Powerset_C_Polyhedron_iterator_dereference (it, &ph);\n+\n+      ppl_Polyhedron_get_constraints (ph, &pcs);\n+      ppl_Constraint_System_begin (pcs, first);\n+      ppl_Constraint_System_end (pcs, last);\n+\n+      ppl_new_PIP_Problem_from_constraints (&pip, d, first, last, nb_params, ds);\n+      has_integer_solutions |= ppl_PIP_Problem_is_satisfiable (pip);\n+\n+      ppl_delete_PIP_Problem (pip);\n+    }\n+\n+  ppl_delete_Constraint_System_const_iterator (first);\n+  ppl_delete_Constraint_System_const_iterator (last);\n+  ppl_delete_Pointset_Powerset_C_Polyhedron_iterator (it);\n+  ppl_delete_Pointset_Powerset_C_Polyhedron_iterator (end);\n+  if (ds)\n+    free (ds);\n+\n+  return !has_integer_solutions;\n+#endif\n+}\n+\n #endif"}, {"sha": "f6c3ad39072fff2b25d7809838bd0c12e90806e7", "filename": "gcc/graphite-ppl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Fgraphite-ppl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Fgraphite-ppl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-ppl.h?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -47,6 +47,8 @@ void ppl_min_for_le_pointset (ppl_Pointset_Powerset_C_Polyhedron_t,\n ppl_Constraint_t ppl_build_relation (int, int, int, int,\n \t\t\t\t     enum ppl_enum_Constraint_Type);\n void debug_gmp_value (mpz_t);\n+bool ppl_powerset_is_empty (ppl_Pointset_Powerset_C_Polyhedron_t, int);\n+\n \n /* Assigns to RES the value of the INTEGER_CST T.  */\n "}, {"sha": "d2a2dd00d371cb6373090b2ec2cbf10bf223295c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -1,3 +1,18 @@\n+2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* gcc.dg/graphite/block-0.c: Add documentation.\n+\t* gcc.dg/graphite/block-4.c: Same.\n+\t* gcc.dg/graphite/block-7.c: Same.\n+\t* gcc.dg/graphite/block-8.c: New.\n+\t* gcc.dg/graphite/interchange-1.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-11.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-12.c: Add documentation.\n+\t* gcc.dg/graphite/interchange-13.c: New.\n+\t* gcc.dg/graphite/interchange-14.c: New.\n+\t* gcc.dg/graphite/interchange-15.c: New.\n+\t* gcc.dg/graphite/interchange-8.c: Add documentation.\n+\t* gcc.dg/graphite/interchange-mvt.c: Same.\n+\n 2011-01-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/47408"}, {"sha": "d77274395d352e63448db12470f9ab410eec518f", "filename": "gcc/testsuite/gcc.dg/graphite/block-0.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -12,6 +12,7 @@ foo (void)\n   int j;\n   int i;\n \n+  /* This should be blocked.  */\n   for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n       a[j] = a[i] + 1;"}, {"sha": "eb98f0447aad13fdf795ad36656b1228277ff2b8", "filename": "gcc/testsuite/gcc.dg/graphite/block-4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -15,11 +15,13 @@ foo (void)\n {\n   int i, j, k;\n \n+  /* This should NOT be blocked: each loop iterates only 24 times.  */\n   for (i = 0; i < 24; i++)\n     for (j = 0; j < 24; j++)\n       for (k = 0; k < 24; k++)\n         A[i][j] = B[i][k] * C[k][j];\n \n+  /* This should be blocked.  */\n   for (i = 0; i < M; i++)\n     for (j = 0; j < M; j++)\n       for (k = 0; k < M; k++)"}, {"sha": "6f3365146c2f8a3d7188e390346ace5aa5321147", "filename": "gcc/testsuite/gcc.dg/graphite/block-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -14,6 +14,7 @@ matmult (void)\n {\n   int i, j, k;\n \n+  /* This should be blocked.  */\n   for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n       {"}, {"sha": "4e7e5b5e2aebd16e9902c3eda03e58d47277ffbf", "filename": "gcc/testsuite/gcc.dg/graphite/block-8.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-8.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 200\n+\n+int A[N][N], B[N][N], C[N][N];\n+\n+static void __attribute__((noinline))\n+matmult (void)\n+{\n+  int i, j, k;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      A[i][j] = 0;\n+\n+  /* This should be blocked.  */\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < N; k++)\n+\tA[i][j] += B[i][k] * C[k][j];\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int i, j, res = 0;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      {\n+\tB[i][j] = j;\n+\tC[i][j] = i;\n+      }\n+\n+  matmult ();\n+\n+  for (i = 0; i < N; i++)\n+    res += A[i][i];\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  if (res != 529340000)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "b4559d132140f0d9c3dc3af3e5fdfc05bf247d36", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -15,6 +15,7 @@ foo (int N)\n   int i, j;\n   double sum = 0.0;\n \n+  /* These two loops should be interchanged.  */\n   for (i = 0; i < N; i++)\n     {\n       for (j = 0; j < N; j++)\n@@ -48,6 +49,5 @@ main (void)\n   return 0;\n }\n \n-\n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "491fda15c5f09c569ce94c92db3d95c365dbf438", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-11.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-11.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -13,6 +13,7 @@ foo (int N, int *res)\n   int i, j;\n   double sum = 0.0;\n \n+  /* These two loops should be interchanged.  */\n   for (i = 0; i < 1335; i++)\n     {\n       for (j = 0; j < 1335; j++)\n@@ -45,5 +46,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "f569b78fc03f246ef8c5d0faef081b5efe9f3e48", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-12.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -14,6 +14,8 @@ matmult (void)\n {\n   int i, j, k;\n \n+  /* This should be interchanged twice: (i, k) and (j, i).  The\n+     resulting nest should look like this (k, i, j).  */\n   for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n       {\n@@ -52,5 +54,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 2 \"graphite\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "a8bf23be5a1a36a556ce95af3f71b79a9d4aeb31", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-13.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-13.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+/* Formerly known as ltrans-1.c */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+double u[25];\n+\n+static int __attribute__((noinline))\n+foo (int N)\n+{\n+  int i, j;\n+  double sum = 0.0;\n+\n+  /* These two loops should be interchanged. */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+\tsum = sum + u[i + 5 * j];\n+\n+      u[6 * i] *= 2;\n+    }\n+\n+  return sum + N + u[6];\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < 25; i++)\n+    u[i] = 2;\n+\n+  res = foo (5);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  if (res != 59)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "00b7f82654db1cd1d7d042f02191d774c4bb1033", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-14.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 200\n+\n+int A[N][N], B[N][N], C[N][N];\n+\n+static void __attribute__((noinline))\n+matmult (void)\n+{\n+  int i, j, k;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      A[i][j] = 0;\n+\n+  /* This should be interchanged twice: (i, k) and (j, i).  The\n+     resulting nest should look like this (k, i, j).  */\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < N; k++)\n+\tA[i][j] += B[i][k] * C[k][j];\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int i, j, res = 0;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      {\n+\tB[i][j] = j;\n+\tC[i][j] = i;\n+      }\n+\n+  matmult ();\n+\n+  for (i = 0; i < N; i++)\n+    res += A[i][i];\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  if (res != 529340000)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 2 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "bfb8a731a201f67f089fc83e339096195992561e", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-15.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-15.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define NMAX 2000\n+\n+static int x[NMAX], a[NMAX][NMAX];\n+\n+static int __attribute__((noinline))\n+mvt (long N)\n+{\n+  int i,j;\n+\n+  /* These two loops should be interchanged.  */\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      x[i] += a[j][i];\n+\n+  return x[1];\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < NMAX; i++)\n+    for (j = 0; j < NMAX; j++)\n+      a[i][j] = j;\n+\n+  for (i = 0; i < NMAX; i++)\n+    x[i] = i;\n+\n+  res = mvt (NMAX);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  if (res != 2001)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+"}, {"sha": "e084bd8b5dd5af0695d181fe5810967afa07611a", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -11,6 +11,7 @@ foo (void)\n {\n   int i, j, k, l;\n \n+  /* Loops K and L should be interchanged.  */\n   for (l = 0; l < 4; l++)\n     {\n       for (k = 0; k < 4; k++)\n@@ -80,6 +81,5 @@ main (void)\n   return 0;\n }\n \n-/* Loops K and L should be interchanged.  */\n /* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "61e73c1df6c0641acea8faf07df5c6f0ce2bd38a", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-mvt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -19,6 +19,7 @@ mvt (long N)\n     for (j = 0; j < N; j++)\n       x1[i] = x1[i] + a[i][j] * y1[j];\n \n+  /* These two loops should be interchanged.  */\n   for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n       x2[i] = x2[i] + a[j][i] * y2[j];"}, {"sha": "ccc00914343c998840a6fc808722d92299289759", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c5db5784e89103e979fa1ec165494ff82e53c0/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=28c5db5784e89103e979fa1ec165494ff82e53c0", "patch": "@@ -193,7 +193,9 @@ dump_data_reference (FILE *outf,\n {\n   unsigned int i;\n \n-  fprintf (outf, \"#(Data Ref: \\n#  stmt: \");\n+  fprintf (outf, \"#(Data Ref: \\n\");\n+  fprintf (outf, \"#  bb: %d \\n\", gimple_bb (DR_STMT (dr))->index);\n+  fprintf (outf, \"#  stmt: \");\n   print_gimple_stmt (outf, DR_STMT (dr), 0, 0);\n   fprintf (outf, \"#  ref: \");\n   print_generic_stmt (outf, DR_REF (dr), 0);"}]}