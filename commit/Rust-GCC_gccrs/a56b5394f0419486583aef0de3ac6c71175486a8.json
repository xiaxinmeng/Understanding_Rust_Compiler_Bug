{"sha": "a56b5394f0419486583aef0de3ac6c71175486a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU2YjUzOTRmMDQxOTQ4NjU4M2FlZjBkZTNhYzZjNzExNzU0ODZhOA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2005-10-31T13:38:05Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2005-10-31T13:38:05Z"}, "message": "re PR tree-optimization/19097 (Quadratic behavior with many sets for the same register in VRP)\n\n\n2005-10-31  Andrew MacLeod  <amacleod@redhat.com>\n\t\n\tPR tree-optimization/19097\n\t* tree-ssa-operands.c (correct_use_link): Don't look for modified stmts.\n\nFrom-SVN: r106272", "tree": {"sha": "eb48c8c24f0dc632faf243992ea0ffcd3898cc42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb48c8c24f0dc632faf243992ea0ffcd3898cc42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a56b5394f0419486583aef0de3ac6c71175486a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56b5394f0419486583aef0de3ac6c71175486a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56b5394f0419486583aef0de3ac6c71175486a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56b5394f0419486583aef0de3ac6c71175486a8/comments", "author": null, "committer": null, "parents": [{"sha": "cd7ec127de787ff770410b2f7380a4acfbeae84c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7ec127de787ff770410b2f7380a4acfbeae84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd7ec127de787ff770410b2f7380a4acfbeae84c"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "2f77e79491c12da116d4eee45321f3e56b8472e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56b5394f0419486583aef0de3ac6c71175486a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56b5394f0419486583aef0de3ac6c71175486a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a56b5394f0419486583aef0de3ac6c71175486a8", "patch": "@@ -1,3 +1,8 @@\n+2005-10-31  Andrew MacLeod  <amacleod@redhat.com>\n+\t\n+\tPR tree-optimization/19097\n+\t* tree-ssa-operands.c (correct_use_link): Don't look for modified stmts.\n+\n 2005-10-31  J\"orn Rennecke <joern.rennecke@st.com>\n \n \t* optabs.c (expand_unop): Take TRULY_NOOP_TRUNCATION into account."}, {"sha": "024762961236f444df539fcfe70e338d4c4b064d", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56b5394f0419486583aef0de3ac6c71175486a8/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56b5394f0419486583aef0de3ac6c71175486a8/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=a56b5394f0419486583aef0de3ac6c71175486a8", "patch": "@@ -311,27 +311,12 @@ correct_use_link (use_operand_p ptr, tree stmt)\n   prev = ptr->prev;\n   if (prev)\n     {\n-      bool stmt_mod = true;\n-      /* Find the first element which isn't a SAFE iterator, is in a different\n-\t stmt, and is not a modified stmt.  That node is in the correct list,\n-\t see if we are too.  */\n-\n-      while (stmt_mod)\n-\t{\n-\t  while (prev->stmt == stmt || prev->stmt == NULL)\n-\t    prev = prev->prev;\n-\t  if (prev->use == NULL)\n-\t    stmt_mod = false;\n-\t  else\n-\t    if ((stmt_mod = stmt_modified_p (prev->stmt)))\n-\t      prev = prev->prev;\n-\t}\n+      /* Find the root element, making sure we skip any safe iterators.  */\n+      while (prev->use != NULL || prev->stmt == NULL)\n+\tprev = prev->prev;\n \n       /* Get the ssa_name of the list the node is in.  */\n-      if (prev->use == NULL)\n-\troot = prev->stmt;\n-      else\n-\troot = *(prev->use);\n+      root = prev->stmt;\n       /* If it's the right list, simply return.  */\n       if (root == *(ptr->use))\n \treturn;"}]}