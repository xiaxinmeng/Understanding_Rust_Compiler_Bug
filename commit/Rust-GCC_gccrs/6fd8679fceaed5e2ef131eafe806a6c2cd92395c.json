{"sha": "6fd8679fceaed5e2ef131eafe806a6c2cd92395c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZkODY3OWZjZWFlZDVlMmVmMTMxZWFmZTgwNmE2YzJjZDkyMzk1Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-10-09T17:16:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-10-09T17:16:24Z"}, "message": "re PR tree-optimization/86659 (gnat.dg/sso/q[23].adb FAIL)\n\n\tPR tree-optimization/86659\n\t* gimple-match.h (gimple_match_op constructors): Initialize reverse.\n\nFrom-SVN: r264986", "tree": {"sha": "13c091eb0f70503371272513804fc5683c19eb11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13c091eb0f70503371272513804fc5683c19eb11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fd8679fceaed5e2ef131eafe806a6c2cd92395c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd8679fceaed5e2ef131eafe806a6c2cd92395c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd8679fceaed5e2ef131eafe806a6c2cd92395c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd8679fceaed5e2ef131eafe806a6c2cd92395c/comments", "author": null, "committer": null, "parents": [{"sha": "91b01194c9d1ecdf3c29afbfe1ee2201fb265e92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b01194c9d1ecdf3c29afbfe1ee2201fb265e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91b01194c9d1ecdf3c29afbfe1ee2201fb265e92"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "b4dc11fe5feb3b94a4066e2bd228081ce0dfa9b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd8679fceaed5e2ef131eafe806a6c2cd92395c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd8679fceaed5e2ef131eafe806a6c2cd92395c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fd8679fceaed5e2ef131eafe806a6c2cd92395c", "patch": "@@ -1,3 +1,8 @@\n+2018-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/86659\n+\t* gimple-match.h (gimple_match_op constructors): Initialize reverse.\n+\n 2018-10-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63155"}, {"sha": "b6eb88880d7eaa16ba7b841826d8e58f2c344ac7", "filename": "gcc/gimple-match.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd8679fceaed5e2ef131eafe806a6c2cd92395c/gcc%2Fgimple-match.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd8679fceaed5e2ef131eafe806a6c2cd92395c/gcc%2Fgimple-match.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match.h?ref=6fd8679fceaed5e2ef131eafe806a6c2cd92395c", "patch": "@@ -131,7 +131,8 @@ struct gimple_match_op\n \n inline\n gimple_match_op::gimple_match_op ()\n-  : cond (gimple_match_cond::UNCOND), type (NULL_TREE), num_ops (0)\n+  : cond (gimple_match_cond::UNCOND), type (NULL_TREE), reverse (false),\n+    num_ops (0)\n {\n }\n \n@@ -142,7 +143,8 @@ inline\n gimple_match_op::gimple_match_op (const gimple_match_cond &cond_in,\n \t\t\t\t  code_helper code_in, tree type_in,\n \t\t\t\t  unsigned int num_ops_in)\n-  : cond (cond_in), code (code_in), type (type_in), num_ops (num_ops_in)\n+  : cond (cond_in), code (code_in), type (type_in), reverse (false),\n+    num_ops (num_ops_in)\n {\n }\n \n@@ -152,7 +154,8 @@ inline\n gimple_match_op::gimple_match_op (const gimple_match_cond &cond_in,\n \t\t\t\t  code_helper code_in, tree type_in,\n \t\t\t\t  tree op0)\n-  : cond (cond_in), code (code_in), type (type_in), num_ops (1)\n+  : cond (cond_in), code (code_in), type (type_in), reverse (false),\n+    num_ops (1)\n {\n   ops[0] = op0;\n }\n@@ -161,7 +164,8 @@ inline\n gimple_match_op::gimple_match_op (const gimple_match_cond &cond_in,\n \t\t\t\t  code_helper code_in, tree type_in,\n \t\t\t\t  tree op0, tree op1)\n-  : cond (cond_in), code (code_in), type (type_in), num_ops (2)\n+  : cond (cond_in), code (code_in), type (type_in), reverse (false), \n+    num_ops (2)\n {\n   ops[0] = op0;\n   ops[1] = op1;\n@@ -171,7 +175,8 @@ inline\n gimple_match_op::gimple_match_op (const gimple_match_cond &cond_in,\n \t\t\t\t  code_helper code_in, tree type_in,\n \t\t\t\t  tree op0, tree op1, tree op2)\n-  : cond (cond_in), code (code_in), type (type_in), num_ops (3)\n+  : cond (cond_in), code (code_in), type (type_in), reverse (false),\n+    num_ops (3)\n {\n   ops[0] = op0;\n   ops[1] = op1;\n@@ -182,7 +187,8 @@ inline\n gimple_match_op::gimple_match_op (const gimple_match_cond &cond_in,\n \t\t\t\t  code_helper code_in, tree type_in,\n \t\t\t\t  tree op0, tree op1, tree op2, tree op3)\n-  : cond (cond_in), code (code_in), type (type_in), num_ops (4)\n+  : cond (cond_in), code (code_in), type (type_in), reverse (false),\n+    num_ops (4)\n {\n   ops[0] = op0;\n   ops[1] = op1;\n@@ -195,7 +201,8 @@ gimple_match_op::gimple_match_op (const gimple_match_cond &cond_in,\n \t\t\t\t  code_helper code_in, tree type_in,\n \t\t\t\t  tree op0, tree op1, tree op2, tree op3,\n \t\t\t\t  tree op4)\n-  : cond (cond_in), code (code_in), type (type_in), num_ops (5)\n+  : cond (cond_in), code (code_in), type (type_in), reverse (false),\n+    num_ops (5)\n {\n   ops[0] = op0;\n   ops[1] = op1;"}]}