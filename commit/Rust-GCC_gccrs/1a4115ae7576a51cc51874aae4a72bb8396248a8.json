{"sha": "1a4115ae7576a51cc51874aae4a72bb8396248a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE0MTE1YWU3NTc2YTUxY2M1MTg3NGFhZTRhNzJiYjgzOTYyNDhhOA==", "commit": {"author": {"name": "Robert Suchanek", "email": "robert.suchanek@imgtec.com", "date": "2015-06-17T09:55:59Z"}, "committer": {"name": "Robert Suchanek", "email": "rts@gcc.gnu.org", "date": "2015-06-17T09:55:59Z"}, "message": "Implement TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS hook.\n\ngcc/ChangeLog:\n\n\t* config/mips/mips.c (mips_ira_change_pseudo_allocno_class): New\n\tfunction.\n\t(TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS): Define macro.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/mips/pr65862-1.c: New test.\n\t* gcc.target/mips/pr65862-2.c: Likewise.\n\nFrom-SVN: r224549", "tree": {"sha": "717760162995186419aa3562b52e7b702f735103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/717760162995186419aa3562b52e7b702f735103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a4115ae7576a51cc51874aae4a72bb8396248a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4115ae7576a51cc51874aae4a72bb8396248a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4115ae7576a51cc51874aae4a72bb8396248a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4115ae7576a51cc51874aae4a72bb8396248a8/comments", "author": null, "committer": null, "parents": [{"sha": "7adcc56b9a883368337a187c5b5da7e78e9b3f52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7adcc56b9a883368337a187c5b5da7e78e9b3f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7adcc56b9a883368337a187c5b5da7e78e9b3f52"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "1888fc2910aa40c2c2ca89c6e9a18e8417db4d6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4115ae7576a51cc51874aae4a72bb8396248a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4115ae7576a51cc51874aae4a72bb8396248a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a4115ae7576a51cc51874aae4a72bb8396248a8", "patch": "@@ -1,3 +1,9 @@\n+2015-06-17  Robert Suchanek  <robert.suchanek@imgtec.com>\n+\n+\t* config/mips/mips.c (mips_ira_change_pseudo_allocno_class): New\n+\tfunction.\n+\t(TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS): Define macro.\n+\n 2015-06-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66251"}, {"sha": "76484e280bfb539d84b249c3dda81a060c92149c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4115ae7576a51cc51874aae4a72bb8396248a8/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4115ae7576a51cc51874aae4a72bb8396248a8/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=1a4115ae7576a51cc51874aae4a72bb8396248a8", "patch": "@@ -19402,6 +19402,33 @@ mips_lra_p (void)\n {\n   return mips_lra_flag;\n }\n+\n+/* Implement TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS.  */\n+\n+static reg_class_t\n+mips_ira_change_pseudo_allocno_class (int regno, reg_class_t allocno_class)\n+{\n+  /* LRA will allocate an FPR for an integer mode pseudo instead of spilling\n+     to memory if an FPR is present in the allocno class.  It is rare that\n+     we actually need to place an integer mode value in an FPR so where\n+     possible limit the allocation to GR_REGS.  This will slightly pessimize\n+     code that involves integer to/from float conversions as these will have\n+     to reload into FPRs in LRA.  Such reloads are sometimes eliminated and\n+     sometimes only partially eliminated.  We choose to take this penalty\n+     in order to eliminate usage of FPRs in code that does not use floating\n+     point data.\n+\n+     This change has a similar effect to increasing the cost of FPR->GPR\n+     register moves for integer modes so that they are higher than the cost\n+     of memory but changing the allocno class is more reliable.\n+\n+     This is also similar to forbidding integer mode values in FPRs entirely\n+     but this would lead to an inconsistency in the integer to/from float\n+     instructions that say integer mode values must be placed in FPRs.  */\n+  if (INTEGRAL_MODE_P (PSEUDO_REGNO_MODE (regno)) && allocno_class == ALL_REGS)\n+    return GR_REGS;\n+  return allocno_class;\n+}\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -19658,6 +19685,8 @@ mips_lra_p (void)\n #define TARGET_SPILL_CLASS mips_spill_class\n #undef TARGET_LRA_P\n #define TARGET_LRA_P mips_lra_p\n+#undef TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS\n+#define TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS mips_ira_change_pseudo_allocno_class\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f"}, {"sha": "56fe81cf9352a58bf785cf3201c2a5c8cbbd98fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4115ae7576a51cc51874aae4a72bb8396248a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4115ae7576a51cc51874aae4a72bb8396248a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a4115ae7576a51cc51874aae4a72bb8396248a8", "patch": "@@ -1,3 +1,8 @@\n+2015-06-17  Robert Suchanek  <robert.suchanek@imgtec.com>\n+\n+\t* gcc.target/mips/pr65862-1.c: New test.\n+\t* gcc.target/mips/pr65862-2.c: Likewise.\n+\n 2015-06-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/pr54592.c: Remove dg-require-effective-target."}, {"sha": "0c0009214240144f35df51ede6fcd42618d6c7d9", "filename": "gcc/testsuite/gcc.target/mips/pr65862-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4115ae7576a51cc51874aae4a72bb8396248a8/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr65862-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4115ae7576a51cc51874aae4a72bb8396248a8/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr65862-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr65862-1.c?ref=1a4115ae7576a51cc51874aae4a72bb8396248a8", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$f\\[0-9\\]+\" } } */\n+int a, c;\n+int *b, *d;\n+void\n+fn1(int p1, int *p2(void *, void *), void *p3(void *, void *, int)) {\n+  int n = c;\n+  for (;;) {\n+    a = 1;\n+    for (; a < n;) {\n+      *d = p1 && p2(0, (int *) ((long)p1 + 1));\n+      p3(0, b + p1, 0);\n+    }\n+  }\n+}"}, {"sha": "c6a264199a70aeabaa6750889218744631caff77", "filename": "gcc/testsuite/gcc.target/mips/pr65862-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4115ae7576a51cc51874aae4a72bb8396248a8/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr65862-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4115ae7576a51cc51874aae4a72bb8396248a8/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr65862-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr65862-2.c?ref=1a4115ae7576a51cc51874aae4a72bb8396248a8", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$f\\[0-9\\]+\" } } */\n+int a, b, d, e, j, k, n, o;\n+unsigned c, h, i, l, m, p;\n+int *f;\n+int *g;\n+int fn1(int p1) { return p1 - a; }\n+\n+int fn2() {\n+  b = b + 1 - a;\n+  e = 1 + o + 1518500249;\n+  d = d + n;\n+  c = (int)c + g[0];\n+  b = b + m + 1;\n+  d = d + p + 1518500249;\n+  d = d + k - 1;\n+  c = fn1(c + j + 1518500249);\n+  e = fn1(e + i + 1);\n+  d = d + h + 1859775393 - a;\n+  c = fn1(c + (d ^ 1 ^ b) + g[1] + 1);\n+  b = fn1(b + m + 3);\n+  d = fn1(d + l + 1);\n+  b = b + (c ^ 1) + p + 1;\n+  e = fn1(e + (b ^ c ^ d) + n + 1);\n+  d = o;\n+  b = 0;\n+  e = e + k + 1859775393;\n+  f[0] = e;\n+  return a;\n+}"}]}