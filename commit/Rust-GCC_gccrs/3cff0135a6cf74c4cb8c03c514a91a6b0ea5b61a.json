{"sha": "3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NmZjAxMzVhNmNmNzRjNGNiOGMwM2M1MTRhOTFhNmIwZWE1YjYxYQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2017-05-03T10:11:44Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2017-05-03T10:11:44Z"}, "message": "[ARM] Set mode for success result of atomic compare and swap\n\n2017-05-03  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\ngcc/\n    * config/arm/iterators.md (CCSI): New mode iterator.\n    (arch): New mode attribute.\n    * config/arm/sync.md (atomic_compare_and_swap<mode>_1): Rename into ...\n    (atomic_compare_and_swap<CCSI:arch><NARROW:mode>_1): This and ...\n    (atomic_compare_and_swap<CCSI:arch><SIDI:mode>_1): This.  Use CCSI\n    code iterator for success result mode.\n    * config/arm/arm.c (arm_expand_compare_and_swap): Adapt code to use\n    the corresponding new insn generators.\n\nFrom-SVN: r247542", "tree": {"sha": "e215a230eacbd4c657e2c5e671a48f031714457f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e215a230eacbd4c657e2c5e671a48f031714457f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ec5af39bde53da8ce957349e3dd574c7d30a8a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec5af39bde53da8ce957349e3dd574c7d30a8a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec5af39bde53da8ce957349e3dd574c7d30a8a0"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "c884760ad98ea1db4bba086793456497cdc94a26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a", "patch": "@@ -1,3 +1,14 @@\n+2017-05-03  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/iterators.md (CCSI): New mode iterator.\n+\t(arch): New mode attribute.\n+\t* config/arm/sync.md (atomic_compare_and_swap<mode>_1): Rename into ...\n+\t(atomic_compare_and_swap<CCSI:arch><NARROW:mode>_1): This and ...\n+\t(atomic_compare_and_swap<CCSI:arch><SIDI:mode>_1): This.  Use CCSI\n+\tcode iterator for success result mode.\n+\t* config/arm/arm.c (arm_expand_compare_and_swap): Adapt code to use\n+\tthe corresponding new insn generators.\n+\n 2017-05-03  Bin Cheng  <bin.cheng@arm.com>\n \n \tRevert r247509"}, {"sha": "839149134332bd4ba2ed506d765460661ba523fd", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a", "patch": "@@ -28236,17 +28236,32 @@ arm_expand_compare_and_swap (rtx operands[])\n       gcc_unreachable ();\n     }\n \n-  switch (mode)\n+  if (TARGET_THUMB1)\n     {\n-    case QImode: gen = gen_atomic_compare_and_swapqi_1; break;\n-    case HImode: gen = gen_atomic_compare_and_swaphi_1; break;\n-    case SImode: gen = gen_atomic_compare_and_swapsi_1; break;\n-    case DImode: gen = gen_atomic_compare_and_swapdi_1; break;\n-    default:\n-      gcc_unreachable ();\n+      switch (mode)\n+\t{\n+\tcase QImode: gen = gen_atomic_compare_and_swapt1qi_1; break;\n+\tcase HImode: gen = gen_atomic_compare_and_swapt1hi_1; break;\n+\tcase SImode: gen = gen_atomic_compare_and_swapt1si_1; break;\n+\tcase DImode: gen = gen_atomic_compare_and_swapt1di_1; break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+  else\n+    {\n+      switch (mode)\n+\t{\n+\tcase QImode: gen = gen_atomic_compare_and_swap32qi_1; break;\n+\tcase HImode: gen = gen_atomic_compare_and_swap32hi_1; break;\n+\tcase SImode: gen = gen_atomic_compare_and_swap32si_1; break;\n+\tcase DImode: gen = gen_atomic_compare_and_swap32di_1; break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n     }\n \n-  bdst = TARGET_THUMB1 ? bval : gen_rtx_REG (CCmode, CC_REGNUM);\n+  bdst = TARGET_THUMB1 ? bval : gen_rtx_REG (CC_Zmode, CC_REGNUM);\n   emit_insn (gen (bdst, rval, mem, oldval, newval, is_weak, mod_s, mod_f));\n \n   if (mode == QImode || mode == HImode)"}, {"sha": "48992879a8eecc66eba913c2b9a7c5989c5c7bc6", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a", "patch": "@@ -45,6 +45,9 @@\n ;; A list of the 32bit and 64bit integer modes\n (define_mode_iterator SIDI [SI DI])\n \n+;; A list of atomic compare and swap success return modes\n+(define_mode_iterator CCSI [(CC_Z \"TARGET_32BIT\") (SI \"TARGET_THUMB1\")])\n+\n ;; A list of modes which the VFP unit can handle\n (define_mode_iterator SDF [(SF \"\") (DF \"TARGET_VFP_DOUBLE\")])\n \n@@ -411,6 +414,10 @@\n ;; Mode attributes\n ;;----------------------------------------------------------------------------\n \n+;; Determine name of atomic compare and swap from success result mode.  This\n+;; distinguishes between 16-bit Thumb and 32-bit Thumb/ARM.\n+(define_mode_attr arch [(CC_Z \"32\") (SI \"t1\")])\n+\n ;; Determine element size suffix from vector mode.\n (define_mode_attr MMX_char [(V8QI \"b\") (V4HI \"h\") (V2SI \"w\") (DI \"d\")])\n "}, {"sha": "b4b4f2e6815e7c31c9874c19af31e908107e6a62", "filename": "gcc/config/arm/sync.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a/gcc%2Fconfig%2Farm%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a/gcc%2Fconfig%2Farm%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsync.md?ref=3cff0135a6cf74c4cb8c03c514a91a6b0ea5b61a", "patch": "@@ -191,9 +191,9 @@\n \n ;; Constraints of this pattern must be at least as strict as those of the\n ;; cbranchsi operations in thumb1.md and aim to be as permissive.\n-(define_insn_and_split \"atomic_compare_and_swap<mode>_1\"\n-  [(set (match_operand 0 \"cc_register_operand\" \"=&c,&l,&l,&l\")\t\t;; bool out\n-\t(unspec_volatile:CC_Z [(const_int 0)] VUNSPEC_ATOMIC_CAS))\n+(define_insn_and_split \"atomic_compare_and_swap<CCSI:arch><NARROW:mode>_1\"\n+  [(set (match_operand:CCSI 0 \"cc_register_operand\" \"=&c,&l,&l,&l\")\t;; bool out\n+\t(unspec_volatile:CCSI [(const_int 0)] VUNSPEC_ATOMIC_CAS))\n    (set (match_operand:SI 1 \"s_register_operand\" \"=&r,&l,&0,&l*h\")\t;; val out\n \t(zero_extend:SI\n \t  (match_operand:NARROW 2 \"mem_noofs_operand\" \"+Ua,Ua,Ua,Ua\")))\t;; memory\n@@ -223,9 +223,9 @@\n \n ;; Constraints of this pattern must be at least as strict as those of the\n ;; cbranchsi operations in thumb1.md and aim to be as permissive.\n-(define_insn_and_split \"atomic_compare_and_swap<mode>_1\"\n-  [(set (match_operand 0 \"cc_register_operand\" \"=&c,&l,&l,&l\")\t\t;; bool out\n-\t(unspec_volatile:CC_Z [(const_int 0)] VUNSPEC_ATOMIC_CAS))\n+(define_insn_and_split \"atomic_compare_and_swap<CCSI:arch><SIDI:mode>_1\"\n+  [(set (match_operand:CCSI 0 \"cc_register_operand\" \"=&c,&l,&l,&l\")\t;; bool out\n+\t(unspec_volatile:CCSI [(const_int 0)] VUNSPEC_ATOMIC_CAS))\n    (set (match_operand:SIDI 1 \"s_register_operand\" \"=&r,&l,&0,&l*h\")\t;; val out\n \t(match_operand:SIDI 2 \"mem_noofs_operand\" \"+Ua,Ua,Ua,Ua\"))\t;; memory\n    (set (match_dup 2)"}]}