{"sha": "c28350ab29cf774843ebdefc3f62cd6b203e4489", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4MzUwYWIyOWNmNzc0ODQzZWJkZWZjM2Y2MmNkNmIyMDNlNDQ4OQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-09-06T16:16:07Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-09-06T16:16:07Z"}, "message": "frv.h (CLASS_LIKELY_SPILLED_P): Remove.\n\n\t* config/frv/frv.h (CLASS_LIKELY_SPILLED_P): Remove.\n\t* config/frv/frv-protos.h (frv_class_likely_spilled_p): Remove.\n\t* config/frv/frv.c (frv_class_likely_spilled_p): Make static. Change\n\targument type to reg_class_t. Change result type to bool.\n\t(TARGET_CLASS_LIKELY_SPILLED_P): Define.\n\nFrom-SVN: r163924", "tree": {"sha": "4089a2cb9cfd6a94951fc8290805d2c016dfb764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4089a2cb9cfd6a94951fc8290805d2c016dfb764"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c28350ab29cf774843ebdefc3f62cd6b203e4489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28350ab29cf774843ebdefc3f62cd6b203e4489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c28350ab29cf774843ebdefc3f62cd6b203e4489", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28350ab29cf774843ebdefc3f62cd6b203e4489/comments", "author": null, "committer": null, "parents": [{"sha": "708e07fbd3eb105fe1104b7238bd66cedbb70e62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708e07fbd3eb105fe1104b7238bd66cedbb70e62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/708e07fbd3eb105fe1104b7238bd66cedbb70e62"}], "stats": {"total": 57, "additions": 20, "deletions": 37}, "files": [{"sha": "0e182f674723696fb48d6022e82eed292bfcc96c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28350ab29cf774843ebdefc3f62cd6b203e4489/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28350ab29cf774843ebdefc3f62cd6b203e4489/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c28350ab29cf774843ebdefc3f62cd6b203e4489", "patch": "@@ -1,3 +1,11 @@\n+2010-09-06  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/frv/frv.h (CLASS_LIKELY_SPILLED_P): Remove.\n+\t* config/frv/frv-protos.h (frv_class_likely_spilled_p): Remove.\n+\t* config/frv/frv.c (frv_class_likely_spilled_p): Make static. Change\n+\targument type to reg_class_t. Change result type to bool.\n+\t(TARGET_CLASS_LIKELY_SPILLED_P): Define.\n+\n 2010-09-06  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR libobjc/19850"}, {"sha": "8ed14fa5fb400f2b144033783ea77bd0f5932146", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28350ab29cf774843ebdefc3f62cd6b203e4489/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28350ab29cf774843ebdefc3f62cd6b203e4489/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=c28350ab29cf774843ebdefc3f62cd6b203e4489", "patch": "@@ -1,5 +1,5 @@\n /* Frv prototypes.\n-   Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005, 2007, 2008, 2009\n+   Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n@@ -102,7 +102,6 @@ extern int frv_trampoline_size\t\t(void);\n extern enum reg_class frv_secondary_reload_class\n \t\t\t\t\t(enum reg_class,\n \t\t\t\t\t enum machine_mode, rtx);\n-extern int frv_class_likely_spilled_p\t(enum reg_class rclass);\n extern int frv_hard_regno_mode_ok\t(int, enum machine_mode);\n extern int frv_hard_regno_nregs\t\t(int, enum machine_mode);\n extern int frv_class_max_nregs\t\t(enum reg_class rclass,"}, {"sha": "ccb6fe9dfeae2ad1ca3495d17a2db2f5ab9dd42f", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28350ab29cf774843ebdefc3f62cd6b203e4489/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28350ab29cf774843ebdefc3f62cd6b203e4489/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=c28350ab29cf774843ebdefc3f62cd6b203e4489", "patch": "@@ -391,6 +391,7 @@ static reg_class_t frv_secondary_reload\t\t(bool, rtx, reg_class_t,\n static bool frv_frame_pointer_required\t\t(void);\n static bool frv_can_eliminate\t\t\t(const int, const int);\n static void frv_trampoline_init\t\t\t(rtx, tree, rtx);\n+static bool frv_class_likely_spilled_p \t\t(reg_class_t);\n \f\n /* Allow us to easily change the default for -malloc-cc.  */\n #ifndef DEFAULT_NO_ALLOC_CC\n@@ -481,6 +482,9 @@ static void frv_trampoline_init\t\t\t(rtx, tree, rtx);\n #define TARGET_ASM_OUTPUT_DWARF_DTPREL frv_output_dwarf_dtprel\n #endif\n \n+#undef TARGET_CLASS_LIKELY_SPILLED_P\n+#define TARGET_CLASS_LIKELY_SPILLED_P frv_class_likely_spilled_p\n+\n #undef  TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD frv_secondary_reload\n \n@@ -6533,23 +6537,10 @@ frv_secondary_reload (bool in_p, rtx x, reg_class_t reload_class_i,\n \n }\n \f\n-/* A C expression whose value is nonzero if pseudos that have been assigned to\n-   registers of class RCLASS would likely be spilled because registers of RCLASS\n-   are needed for spill registers.\n-\n-   The default value of this macro returns 1 if RCLASS has exactly one register\n-   and zero otherwise.  On most machines, this default should be used.  Only\n-   define this macro to some other expression if pseudo allocated by\n-   `local-alloc.c' end up in memory because their hard registers were needed\n-   for spill registers.  If this macro returns nonzero for those classes, those\n-   pseudos will only be allocated by `global.c', which knows how to reallocate\n-   the pseudo to another register.  If there would not be another register\n-   available for reallocation, you should not change the definition of this\n-   macro since the only effect of such a definition would be to slow down\n-   register allocation.  */\n+/* Worker function for TARGET_CLASS_LIKELY_SPILLED_P.  */\n \n-int\n-frv_class_likely_spilled_p (enum reg_class rclass)\n+static bool\n+frv_class_likely_spilled_p (reg_class_t rclass)\n {\n   switch (rclass)\n     {\n@@ -6574,10 +6565,10 @@ frv_class_likely_spilled_p (enum reg_class rclass)\n     case EVEN_ACC_REGS:\n     case ACC_REGS:\n     case ACCG_REGS:\n-      return TRUE;\n+      return true;\n     }\n \n-  return FALSE;\n+  return false;\n }\n \n \f"}, {"sha": "79ff6f39921af43b0b4b3ef668d7d5dcf244fc20", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28350ab29cf774843ebdefc3f62cd6b203e4489/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28350ab29cf774843ebdefc3f62cd6b203e4489/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=c28350ab29cf774843ebdefc3f62cd6b203e4489", "patch": "@@ -1,5 +1,6 @@\n /* Target macros for the FRV port of GCC.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009,\n+   2010\n    Free Software Foundation, Inc.\n    Contributed by Red Hat Inc.\n \n@@ -1257,22 +1258,6 @@ extern enum reg_class reg_class_from_letter[];\n #define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS, MODE, X) \\\n   frv_secondary_reload_class (CLASS, MODE, X)\n \n-/* A C expression whose value is nonzero if pseudos that have been assigned to\n-   registers of class CLASS would likely be spilled because registers of CLASS\n-   are needed for spill registers.\n-\n-   The default value of this macro returns 1 if CLASS has exactly one register\n-   and zero otherwise.  On most machines, this default should be used.  Only\n-   define this macro to some other expression if pseudo allocated by\n-   `local-alloc.c' end up in memory because their hard registers were needed\n-   for spill registers.  If this macro returns nonzero for those classes, those\n-   pseudos will only be allocated by `global.c', which knows how to reallocate\n-   the pseudo to another register.  If there would not be another register\n-   available for reallocation, you should not change the definition of this\n-   macro since the only effect of such a definition would be to slow down\n-   register allocation.  */\n-#define CLASS_LIKELY_SPILLED_P(CLASS) frv_class_likely_spilled_p (CLASS)\n-\n /* A C expression for the maximum number of consecutive registers of\n    class CLASS needed to hold a value of mode MODE.\n "}]}