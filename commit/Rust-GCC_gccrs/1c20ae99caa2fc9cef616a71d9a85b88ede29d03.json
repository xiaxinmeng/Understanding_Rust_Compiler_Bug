{"sha": "1c20ae99caa2fc9cef616a71d9a85b88ede29d03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMyMGFlOTljYWEyZmM5Y2VmNjE2YTcxZDlhODViODhlZGUyOWQwMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-06T23:44:49Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-06T23:44:49Z"}, "message": "(init_cumulative_args): Change EXPR_LIST to PARALLEL in comments.\n\n(init_cumulative_args): Change EXPR_LIST to PARALLEL\nin comments.\n(function_arg): Generate PARALLEL instead of EXPR_LIST.\n\nFrom-SVN: r12198", "tree": {"sha": "2a239b1d87ab59abe5efb1599d648fc5e9b12065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a239b1d87ab59abe5efb1599d648fc5e9b12065"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c20ae99caa2fc9cef616a71d9a85b88ede29d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c20ae99caa2fc9cef616a71d9a85b88ede29d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c20ae99caa2fc9cef616a71d9a85b88ede29d03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c20ae99caa2fc9cef616a71d9a85b88ede29d03/comments", "author": null, "committer": null, "parents": [{"sha": "bd625e2114ad9ecde1bd4c72f063b942a5f910f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd625e2114ad9ecde1bd4c72f063b942a5f910f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd625e2114ad9ecde1bd4c72f063b942a5f910f2"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "a476d1fcf518cffecf2dd57fab8dbace4ff8fb7c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c20ae99caa2fc9cef616a71d9a85b88ede29d03/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c20ae99caa2fc9cef616a71d9a85b88ede29d03/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1c20ae99caa2fc9cef616a71d9a85b88ede29d03", "patch": "@@ -1032,7 +1032,7 @@ small_data_operand (op, mode)\n    For a library call, FNTYPE is 0.\n \n    For incoming args we set the number of arguments in the prototype large\n-   so we never return an EXPR_LIST.  */\n+   so we never return a PARALLEL.  */\n \n void\n init_cumulative_args (cum, fntype, libname, incoming)\n@@ -1052,7 +1052,7 @@ init_cumulative_args (cum, fntype, libname, incoming)\n \n   if (incoming)\n     {\n-      cum->nargs_prototype = 1000;\t\t/* don't return an EXPR_LIST */\n+      cum->nargs_prototype = 1000;\t\t/* don't return a PARALLEL */\n       if (abi == ABI_V4 || abi == ABI_SOLARIS)\n \tcum->varargs_offset = RS6000_VARARGS_OFFSET;\n     }\n@@ -1201,7 +1201,7 @@ function_arg_advance (cum, mode, type, named)\n    both an FP and integer register (or possibly FP reg and stack).  Library\n    functions (when TYPE is zero) always have the proper types for args,\n    so we can pass the FP value just in one register.  emit_library_function\n-   doesn't support EXPR_LIST anyway.  */\n+   doesn't support PARALLEL anyway.  */\n \n struct rtx_def *\n function_arg (cum, mode, type, named)\n@@ -1256,11 +1256,26 @@ function_arg (cum, mode, type, named)\n \t  || !type)\n \treturn gen_rtx (REG, mode, cum->fregno);\n \n-      return gen_rtx (EXPR_LIST, VOIDmode,\n-\t\t      ((align_words < GP_ARG_NUM_REG)\n-\t\t       ? gen_rtx (REG, mode, GP_ARG_MIN_REG + align_words)\n-\t\t       : NULL_RTX),\n-\t\t      gen_rtx (REG, mode, cum->fregno));\n+      return gen_rtx (PARALLEL, mode,\n+\t\t      gen_rtvec\n+\t\t      (2,\n+\t\t       gen_rtx (EXPR_LIST, VOIDmode,\n+\t\t\t\t((align_words >= GP_ARG_NUM_REG)\n+\t\t\t\t ? NULL_RTX\n+\t\t\t\t : (align_words\n+\t\t\t\t    + RS6000_ARG_SIZE (mode, type, named)\n+\t\t\t\t    > GP_ARG_NUM_REG\n+\t\t\t\t    /* If this is partially on the stack, then\n+\t\t\t\t       we only include the portion actually\n+\t\t\t\t       in registers here.  */\n+\t\t\t\t    ? gen_rtx (REG, SImode,\n+\t\t\t\t\t       GP_ARG_MIN_REG + align_words)\n+\t\t\t\t    : gen_rtx (REG, mode,\n+\t\t\t\t\t       GP_ARG_MIN_REG + align_words))),\n+\t\t\t\tconst0_rtx),\n+\t\t       gen_rtx (EXPR_LIST, VOIDmode,\n+\t\t\t\tgen_rtx (REG, mode, cum->fregno),\n+\t\t\t\tconst0_rtx)));\n     }\n \n   /* Long longs won't be split between register and stack */"}]}