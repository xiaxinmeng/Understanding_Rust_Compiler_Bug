{"sha": "8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ3Nzk0YzBhMmFhNjY5NmFiMWE5MWVmMjA5ZThhOWZlMmRmNTZhYw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-05-29T19:36:27Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-06-04T16:56:37Z"}, "message": "[OpenACC] XFAIL behavior of over-eager 'finalize' clause\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/deep-copy-6.f90: XFAIL behavior\n\tof over-eager 'finalize' clause.\n\t* testsuite/libgomp.oacc-fortran/deep-copy-6-no_finalize.F90: New\n\tfile.\n\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-1-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-1-2.F90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-2-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-2-2.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-3-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-3-2.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-4-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-4-2.f90: Likewise.", "tree": {"sha": "9f7053aa7b0799955fb8d9a83642b58bc61922eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f7053aa7b0799955fb8d9a83642b58bc61922eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e24d457d8c97e409549848715ff046cfa9efd3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e24d457d8c97e409549848715ff046cfa9efd3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e24d457d8c97e409549848715ff046cfa9efd3d"}], "stats": {"total": 336, "additions": 336, "deletions": 0}, "files": [{"sha": "ed4f10e7a3f88f31625b805451b645362bc2585f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-6-no_finalize.F90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-6-no_finalize.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-6-no_finalize.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-6-no_finalize.F90?ref=8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do run }\n+\n+/* Nullify the 'finalize' clause, which disturbs reference counting.  */\n+#define finalize\n+#include \"deep-copy-6.f90\"\n+\n+! { dg-output \".*CheCKpOInT1(\\n|\\r\\n|\\r)\" }\n+! { dg-output \".CheCKpOInT2(\\n|\\r\\n|\\r)\" }"}, {"sha": "a7943d93d542f3e56a046676e99f3af1195930f1", "filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-6.f90", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-6.f90?ref=8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "patch": "@@ -3,6 +3,7 @@\n ! Test of attachment counters and finalize.\n \n program dtype\n+  use openacc\n   implicit none\n   integer, parameter :: n = 512\n   type mytype\n@@ -36,7 +37,22 @@ program dtype\n   end do\n !$acc end parallel loop\n \n+  if (.not. acc_is_present(var%a(5:n - 5))) stop 11\n+  if (.not. acc_is_present(var%b(5:n - 5))) stop 12\n+  if (.not. acc_is_present(var)) stop 13\n !$acc exit data copyout(var%a(5:n - 5), var%b(5:n - 5)) finalize\n+  if (acc_get_device_type() .ne. acc_device_host) then\n+     if (acc_is_present(var%a(5:n - 5))) stop 21\n+     if (acc_is_present(var%b(5:n - 5))) stop 22\n+  end if\n+  print *, \"CheCKpOInT1\"\n+  ! { dg-output \".*CheCKpOInT1(\\n|\\r\\n|\\r)\" }\n+  if (.not. acc_is_present(var)) stop 23\n+  !TODO { dg-output \"STOP 23(\\n|\\r\\n|\\r)$\" { target { ! openacc_host_selected } } } ! Scan for what we expect in the \"XFAILed\" case (without actually XFAILing).\n+  !TODO { dg-shouldfail \"XFAILed\" { ! openacc_host_selected } } ! ... instead of 'dg-xfail-run-if' so that 'dg-output' is evaluated at all.\n+  !TODO { dg-final { if { [dg-process-target { xfail { ! openacc_host_selected } }] == \"F\" } { xfail \"[testname-for-summary] really is XFAILed\" } } } ! ... so that we still get an XFAIL visible in the log.\n+  print *, \"CheCKpOInT2\"\n+  ! { dg-output \".CheCKpOInT2(\\n|\\r\\n|\\r)\" { target { openacc_host_selected } } }\n \n !$acc end data\n "}, {"sha": "449a6cf6894e70c8e19e34cc68eba7f2930721d9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/mdc-refcount-1-1-1.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-1-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-1-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-1-1.f90?ref=8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+! { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } }\n+\n+! Adapted from 'libgomp.oacc-fortran/deep-copy-6.f90'.\n+\n+program main\n+  use openacc\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+  end type mytype\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+\n+  !$acc data create(var)\n+\n+  !$acc enter data create(var%a)\n+\n+  if (.not. acc_is_present(var%a)) stop 1\n+  if (.not. acc_is_present(var)) stop 2\n+\n+  !$acc exit data delete(var%a) finalize\n+  if (acc_is_present(var%a)) stop 3\n+  print *, \"CheCKpOInT1\"\n+  ! { dg-output \".*CheCKpOInT1(\\n|\\r\\n|\\r)\" }\n+  if (.not. acc_is_present(var)) stop 4\n+  !TODO { dg-output \"STOP 4(\\n|\\r\\n|\\r)$\" { target { ! openacc_host_selected } } } ! Scan for what we expect in the \"XFAILed\" case (without actually XFAILing).\n+  !TODO { dg-shouldfail \"XFAILed\" { ! openacc_host_selected } } ! ... instead of 'dg-xfail-run-if' so that 'dg-output' is evaluated at all.\n+  !TODO { dg-final { if { [dg-process-target { xfail { ! openacc_host_selected } }] == \"F\" } { xfail \"[testname-for-summary] really is XFAILed\" } } } ! ... so that we still get an XFAIL visible in the log.\n+  print *, \"CheCKpOInT2\"\n+  ! { dg-output \".CheCKpOInT2(\\n|\\r\\n|\\r)\" { target { openacc_host_selected } } }\n+\n+  !$acc end data\n+  if (acc_is_present(var%a)) stop 5\n+  if (acc_is_present(var)) stop 6\n+\n+  deallocate(var%a)\n+\n+end program main"}, {"sha": "7b206ac20428e99e989095474d74920b36c94f11", "filename": "libgomp/testsuite/libgomp.oacc-fortran/mdc-refcount-1-1-2.F90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-1-2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-1-2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-1-2.F90?ref=8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do run }\n+! { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } }\n+\n+/* Nullify the 'finalize' clause, which disturbs reference counting.  */\n+#define finalize\n+#include \"mdc-refcount-1-1-1.f90\"\n+\n+! { dg-output \".*CheCKpOInT1(\\n|\\r\\n|\\r)\" }\n+! { dg-output \".CheCKpOInT2(\\n|\\r\\n|\\r)\" }"}, {"sha": "a7e649d3041529e9240eaada554685eb005a7dad", "filename": "libgomp/testsuite/libgomp.oacc-fortran/mdc-refcount-1-2-1.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-2-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-2-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-2-1.f90?ref=8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+! { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } }\n+\n+! Adapted from 'libgomp.oacc-fortran/mdc-refcount-1-1-1.f90'.\n+\n+program main\n+  use openacc\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+  end type mytype\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+\n+  !$acc data create(var)\n+\n+  call acc_create(var%a)\n+  ! After mapping via runtime API call, separately trigger attach action; see <https://github.com/OpenACC/openacc-spec/issues/301>.\n+  !$acc enter data attach(var%a)\n+\n+  if (.not. acc_is_present(var%a)) stop 1\n+  if (.not. acc_is_present(var)) stop 2\n+\n+  !$acc exit data delete(var%a) finalize\n+  if (acc_is_present(var%a)) stop 3\n+  print *, \"CheCKpOInT1\"\n+  ! { dg-output \".*CheCKpOInT1(\\n|\\r\\n|\\r)\" }\n+  if (.not. acc_is_present(var)) stop 4\n+  !TODO { dg-output \"STOP 4(\\n|\\r\\n|\\r)$\" { target { ! openacc_host_selected } } } ! Scan for what we expect in the \"XFAILed\" case (without actually XFAILing).\n+  !TODO { dg-shouldfail \"XFAILed\" { ! openacc_host_selected } } ! ... instead of 'dg-xfail-run-if' so that 'dg-output' is evaluated at all.\n+  !TODO { dg-final { if { [dg-process-target { xfail { ! openacc_host_selected } }] == \"F\" } { xfail \"[testname-for-summary] really is XFAILed\" } } } ! ... so that we still get an XFAIL visible in the log.\n+  print *, \"CheCKpOInT2\"\n+  ! { dg-output \".CheCKpOInT2(\\n|\\r\\n|\\r)\" { target { openacc_host_selected } } }\n+\n+  !$acc end data\n+  if (acc_is_present(var%a)) stop 5\n+  if (acc_is_present(var)) stop 6\n+\n+  deallocate(var%a)\n+\n+end program main"}, {"sha": "3402fafc7e28da136fe9a75064b265ab97fac439", "filename": "libgomp/testsuite/libgomp.oacc-fortran/mdc-refcount-1-2-2.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-2-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-2-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-2-2.f90?ref=8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+! { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } }\n+\n+! Copy of 'libgomp.oacc-fortran/mdc-refcount-1-2-1.f90', without 'finalize' clause.\n+\n+program main\n+  use openacc\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+  end type mytype\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+\n+  !$acc data create(var)\n+\n+  call acc_create(var%a)\n+  ! After mapping via runtime API call, separately trigger attach action; see <https://github.com/OpenACC/openacc-spec/issues/301>.\n+  !$acc enter data attach(var%a)\n+\n+  if (.not. acc_is_present(var%a)) stop 1\n+  if (.not. acc_is_present(var)) stop 2\n+\n+  !$acc exit data delete(var%a)\n+  if (acc_is_present(var%a)) stop 3\n+  print *, \"CheCKpOInT1\"\n+  ! { dg-output \".*CheCKpOInT1(\\n|\\r\\n|\\r)\" }\n+  if (.not. acc_is_present(var)) stop 4\n+  !TODO { dg-output \"STOP 4(\\n|\\r\\n|\\r)$\" { target { ! openacc_host_selected } } } ! Scan for what we expect in the \"XFAILed\" case (without actually XFAILing).\n+  !TODO { dg-shouldfail \"XFAILed\" { ! openacc_host_selected } } ! ... instead of 'dg-xfail-run-if' so that 'dg-output' is evaluated at all.\n+  !TODO { dg-final { if { [dg-process-target { xfail { ! openacc_host_selected } }] == \"F\" } { xfail \"[testname-for-summary] really is XFAILed\" } } } ! ... so that we still get an XFAIL visible in the log.\n+  print *, \"CheCKpOInT2\"\n+  ! { dg-output \".CheCKpOInT2(\\n|\\r\\n|\\r)\" { target { openacc_host_selected } } }\n+\n+  !$acc end data\n+  if (acc_is_present(var%a)) stop 5\n+  if (acc_is_present(var)) stop 6\n+\n+  deallocate(var%a)\n+\n+end program main"}, {"sha": "7504969d9a5629b55ce055f7c37267fa7e367c38", "filename": "libgomp/testsuite/libgomp.oacc-fortran/mdc-refcount-1-3-1.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-3-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-3-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-3-1.f90?ref=8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+! { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } }\n+\n+! Adapted from 'libgomp.oacc-fortran/mdc-refcount-1-2-1.f90'.\n+\n+program main\n+  use openacc\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+  end type mytype\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+\n+  !$acc data create(var)\n+\n+  call acc_create(var%a)\n+  ! After mapping via runtime API call, separately trigger attach action; see <https://github.com/OpenACC/openacc-spec/issues/301>.\n+  !$acc enter data attach(var%a)\n+\n+  if (.not. acc_is_present(var%a)) stop 1\n+  if (.not. acc_is_present(var)) stop 2\n+\n+  !$acc exit data detach(var%a)\n+  !$acc exit data delete(var%a) finalize\n+  if (acc_is_present(var%a)) stop 3\n+  print *, \"CheCKpOInT1\"\n+  ! { dg-output \".*CheCKpOInT1(\\n|\\r\\n|\\r)\" }\n+  if (.not. acc_is_present(var)) stop 4\n+  !TODO { dg-output \"STOP 4(\\n|\\r\\n|\\r)$\" { target { ! openacc_host_selected } } } ! Scan for what we expect in the \"XFAILed\" case (without actually XFAILing).\n+  !TODO { dg-shouldfail \"XFAILed\" { ! openacc_host_selected } } ! ... instead of 'dg-xfail-run-if' so that 'dg-output' is evaluated at all.\n+  !TODO { dg-final { if { [dg-process-target { xfail { ! openacc_host_selected } }] == \"F\" } { xfail \"[testname-for-summary] really is XFAILed\" } } } ! ... so that we still get an XFAIL visible in the log.\n+  print *, \"CheCKpOInT2\"\n+  ! { dg-output \".CheCKpOInT2(\\n|\\r\\n|\\r)\" { target { openacc_host_selected } } }\n+\n+  !$acc end data\n+  if (acc_is_present(var%a)) stop 5\n+  if (acc_is_present(var)) stop 6\n+\n+  deallocate(var%a)\n+\n+end program main"}, {"sha": "3c4bbda7f6652e61df4baf16228a5778fdaca2c2", "filename": "libgomp/testsuite/libgomp.oacc-fortran/mdc-refcount-1-3-2.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-3-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-3-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-3-2.f90?ref=8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+! { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } }\n+\n+! Copy of 'libgomp.oacc-fortran/mdc-refcount-1-3-1.f90', without 'finalize' clause.\n+\n+program main\n+  use openacc\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+  end type mytype\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+\n+  !$acc data create(var)\n+\n+  call acc_create(var%a)\n+  ! After mapping via runtime API call, separately trigger attach action; see <https://github.com/OpenACC/openacc-spec/issues/301>.\n+  !$acc enter data attach(var%a)\n+\n+  if (.not. acc_is_present(var%a)) stop 1\n+  if (.not. acc_is_present(var)) stop 2\n+\n+  !$acc exit data detach(var%a)\n+  print *, \"CheCKpOInT1\"\n+  ! { dg-output \".*CheCKpOInT1(\\n|\\r\\n|\\r)\" }\n+  !$acc exit data delete(var%a)\n+  !TODO { dg-output \"(\\n|\\r\\n|\\r)libgomp: attach count underflow(\\n|\\r\\n|\\r)$\" { target { ! openacc_host_selected } } } ! Scan for what we expect in the \"XFAILed\" case (without actually XFAILing).\n+  !TODO { dg-shouldfail \"XFAILed\" { ! openacc_host_selected } } ! ... instead of 'dg-xfail-run-if' so that 'dg-output' is evaluated at all.\n+  !TODO { dg-final { if { [dg-process-target { xfail { ! openacc_host_selected } }] == \"F\" } { xfail \"[testname-for-summary] really is XFAILed\" } } } ! ... so that we still get an XFAIL visible in the log.\n+  print *, \"CheCKpOInT2\"\n+  ! { dg-output \".CheCKpOInT2(\\n|\\r\\n|\\r)\" { target { openacc_host_selected } } }\n+  if (acc_is_present(var%a)) stop 3\n+  if (.not. acc_is_present(var)) stop 4\n+\n+  !$acc end data\n+  if (acc_is_present(var%a)) stop 5\n+  if (acc_is_present(var)) stop 6\n+\n+  deallocate(var%a)\n+\n+end program main"}, {"sha": "fedae0db054bcf90a331fe5aba927645d4b0d5f9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/mdc-refcount-1-4-1.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-4-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-4-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-4-1.f90?ref=8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+! { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } }\n+\n+! Adapted from 'libgomp.oacc-fortran/mdc-refcount-1-3-1.f90'.\n+\n+program main\n+  use openacc\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+  end type mytype\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+\n+  !$acc data create(var)\n+\n+  call acc_create(var%a)\n+  ! After mapping via runtime API call, separately trigger attach action; see <https://github.com/OpenACC/openacc-spec/issues/301>.\n+  !$acc enter data attach(var%a)\n+\n+  if (.not. acc_is_present(var%a)) stop 1\n+  if (.not. acc_is_present(var)) stop 2\n+\n+  !$acc exit data detach(var%a) finalize\n+  print *, \"CheCKpOInT1\"\n+  ! { dg-output \".*CheCKpOInT1(\\n|\\r\\n|\\r)\" }\n+  !$acc exit data delete(var%a)\n+  !TODO { dg-output \"(\\n|\\r\\n|\\r)libgomp: struct not mapped for detach operation(\\n|\\r\\n|\\r)$\" { target { ! openacc_host_selected } } } ! Scan for what we expect in the \"XFAILed\" case (without actually XFAILing).\n+  !TODO { dg-shouldfail \"XFAILed\" { ! openacc_host_selected } } ! ... instead of 'dg-xfail-run-if' so that 'dg-output' is evaluated at all.\n+  !TODO { dg-final { if { [dg-process-target { xfail { ! openacc_host_selected } }] == \"F\" } { xfail \"[testname-for-summary] really is XFAILed\" } } } ! ... so that we still get an XFAIL visible in the log.\n+  print *, \"CheCKpOInT2\"\n+  ! { dg-output \".CheCKpOInT2(\\n|\\r\\n|\\r)\" { target { openacc_host_selected } } }\n+  if (acc_is_present(var%a)) stop 3\n+  if (.not. acc_is_present(var)) stop 4\n+\n+  !$acc end data\n+  if (acc_is_present(var%a)) stop 5\n+  if (acc_is_present(var)) stop 6\n+\n+  deallocate(var%a)\n+\n+end program main"}, {"sha": "476cd5c1beea44cdc78fd6ddbe48a87713498ece", "filename": "libgomp/testsuite/libgomp.oacc-fortran/mdc-refcount-1-4-2.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-4-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-4-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmdc-refcount-1-4-2.f90?ref=8d7794c0a2aa6696ab1a91ef209e8a9fe2df56ac", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+! { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } }\n+\n+! Copy of 'libgomp.oacc-fortran/mdc-refcount-1-4-1.f90', without 'finalize' clause.\n+\n+program main\n+  use openacc\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+  end type mytype\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+\n+  !$acc data create(var)\n+\n+  call acc_create(var%a)\n+  ! After mapping via runtime API call, separately trigger attach action; see <https://github.com/OpenACC/openacc-spec/issues/301>.\n+  !$acc enter data attach(var%a)\n+\n+  if (.not. acc_is_present(var%a)) stop 1\n+  if (.not. acc_is_present(var)) stop 2\n+\n+  !$acc exit data detach(var%a)\n+  print *, \"CheCKpOInT1\"\n+  ! { dg-output \".*CheCKpOInT1(\\n|\\r\\n|\\r)\" }\n+  !$acc exit data delete(var%a)\n+  !TODO { dg-output \"(\\n|\\r\\n|\\r)libgomp: attach count underflow(\\n|\\r\\n|\\r)$\" { target { ! openacc_host_selected } } } ! Scan for what we expect in the \"XFAILed\" case (without actually XFAILing).\n+  !TODO { dg-shouldfail \"XFAILed\" { ! openacc_host_selected } } ! ... instead of 'dg-xfail-run-if' so that 'dg-output' is evaluated at all.\n+  !TODO { dg-final { if { [dg-process-target { xfail { ! openacc_host_selected } }] == \"F\" } { xfail \"[testname-for-summary] really is XFAILed\" } } } ! ... so that we still get an XFAIL visible in the log.\n+  print *, \"CheCKpOInT2\"\n+  ! { dg-output \".CheCKpOInT2(\\n|\\r\\n|\\r)\" { target { openacc_host_selected } } }\n+  if (acc_is_present(var%a)) stop 3\n+  if (.not. acc_is_present(var)) stop 4\n+\n+  !$acc end data\n+  if (acc_is_present(var%a)) stop 5\n+  if (acc_is_present(var)) stop 6\n+\n+  deallocate(var%a)\n+\n+end program main"}]}