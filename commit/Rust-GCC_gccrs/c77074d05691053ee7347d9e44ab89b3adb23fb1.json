{"sha": "c77074d05691053ee7347d9e44ab89b3adb23fb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3MDc0ZDA1NjkxMDUzZWU3MzQ3ZDllNDRhYjg5YjNhZGIyM2ZiMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-07T17:20:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-21T23:40:19Z"}, "message": "PR c++/40752 - useless -Wconversion with short +=.\n\nThis is a longstanding issue with lots of duplicates; people are not\ninterested in a -Wconversion warning about mychar += 1.  So now that warning\ndepends on -Warith-conversion; otherwise we only warn if operands of the\narithmetic have conversion issues.\n\n\t* c.opt (-Warith-conversion): New.\n\t* c-warn.c (conversion_warning): Recurse for operands of\n\toperators.  Only warn about the whole expression with\n\t-Warith-conversion.", "tree": {"sha": "589e55a7c74bb1c0ec4c46ac228f20340158909a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/589e55a7c74bb1c0ec4c46ac228f20340158909a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77074d05691053ee7347d9e44ab89b3adb23fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77074d05691053ee7347d9e44ab89b3adb23fb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77074d05691053ee7347d9e44ab89b3adb23fb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77074d05691053ee7347d9e44ab89b3adb23fb1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "731dbfc3f3b586e78f2ccdca24561ea3369c6338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/731dbfc3f3b586e78f2ccdca24561ea3369c6338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/731dbfc3f3b586e78f2ccdca24561ea3369c6338"}], "stats": {"total": 216, "additions": 207, "deletions": 9}, "files": [{"sha": "3a9ce248e656b424c04d3e0664efcda86988f9be", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c77074d05691053ee7347d9e44ab89b3adb23fb1", "patch": "@@ -1,3 +1,12 @@\n+2020-01-21  Jason Merrill  <jason@redhat.com>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/40752 - useless -Wconversion with short +=.\n+\t* c.opt (-Warith-conversion): New.\n+\t* c-warn.c (conversion_warning): Recurse for operands of\n+\toperators.  Only warn about the whole expression with\n+\t-Warith-conversion.\n+\n 2020-01-21  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (unsafe_conversion_p): Don't warn, return UNSAFE_SIGN."}, {"sha": "d8f0ad654fe8c687d15c410805e769dbe32798ff", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=c77074d05691053ee7347d9e44ab89b3adb23fb1", "patch": "@@ -1155,17 +1155,18 @@ check_main_parameter_types (tree decl)\n \t     \"%q+D declared as variadic function\", decl);\n }\n \n-/* Warns if the conversion of EXPR to TYPE may alter a value.\n+/* Warns and returns true if the conversion of EXPR to TYPE may alter a value.\n    This is a helper function for warnings_for_convert_and_check.  */\n \n-static void\n+static bool\n conversion_warning (location_t loc, tree type, tree expr, tree result)\n {\n   tree expr_type = TREE_TYPE (expr);\n   enum conversion_safety conversion_kind;\n+  bool is_arith = false;\n \n   if (!warn_conversion && !warn_sign_conversion && !warn_float_conversion)\n-    return;\n+    return false;\n \n   /* This may happen, because for LHS op= RHS we preevaluate\n      RHS and create C_MAYBE_CONST_EXPR <SAVE_EXPR <RHS>>, which\n@@ -1195,7 +1196,7 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n       if (TYPE_PRECISION (type) == 1 && !TYPE_UNSIGNED (type))\n \twarning_at (loc, OPT_Wconversion,\n \t\t    \"conversion to %qT from boolean expression\", type);\n-      return;\n+      return true;\n \n     case REAL_CST:\n     case INTEGER_CST:\n@@ -1250,21 +1251,65 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n \t  warning_at (loc, warnopt,\n \t\t      \"conversion from %qT to %qT changes the value of %qE\",\n \t\t      expr_type, type, expr);\n-\tbreak;\n+\treturn true;\n       }\n+\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+    case MULT_EXPR:\n+    case MAX_EXPR:\n+    case MIN_EXPR:\n+    case TRUNC_MOD_EXPR:\n+    case FLOOR_MOD_EXPR:\n+    case TRUNC_DIV_EXPR:\n+    case FLOOR_DIV_EXPR:\n+    case CEIL_DIV_EXPR:\n+    case EXACT_DIV_EXPR:\n+    case RDIV_EXPR:\n+      {\n+\ttree op0 = TREE_OPERAND (expr, 0);\n+\ttree op1 = TREE_OPERAND (expr, 1);\n+\tif (conversion_warning (loc, type, op0, result)\n+\t    || conversion_warning (loc, type, op1, result))\n+\t  return true;\n+\tgoto arith_op;\n+      }\n+\n+    case PREDECREMENT_EXPR:\n+    case PREINCREMENT_EXPR:\n+    case POSTDECREMENT_EXPR:\n+    case POSTINCREMENT_EXPR:\n+    case LSHIFT_EXPR:\n+    case RSHIFT_EXPR:\n+    case FIX_TRUNC_EXPR:\n+    case NON_LVALUE_EXPR:\n+    case NEGATE_EXPR:\n+    case BIT_NOT_EXPR:\n+      {\n+\t/* Unary ops or binary ops for which we only care about the lhs.  */\n+\ttree op0 = TREE_OPERAND (expr, 0);\n+\tif (conversion_warning (loc, type, op0, result))\n+\t  return true;\n+\tgoto arith_op;\n+      }\n+\n     case COND_EXPR:\n       {\n \t/* In case of COND_EXPR, we do not care about the type of\n \t   COND_EXPR, only about the conversion of each operand.  */\n \ttree op1 = TREE_OPERAND (expr, 1);\n \ttree op2 = TREE_OPERAND (expr, 2);\n \n-\tconversion_warning (loc, type, op1, result);\n-\tconversion_warning (loc, type, op2, result);\n-\treturn;\n+\treturn (conversion_warning (loc, type, op1, result)\n+\t\t|| conversion_warning (loc, type, op2, result));\n       }\n \n-    default: /* 'expr' is not a constant.  */\n+    arith_op:\n+      /* We didn't warn about the operands, we might still want to warn if\n+\t -Warith-conversion.  */\n+      is_arith = true;\n+      gcc_fallthrough ();\n+    default:\n       conversion_kind = unsafe_conversion_p (loc, type, expr, result, true);\n       {\n \tint warnopt;\n@@ -1276,6 +1321,11 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n \t  warnopt = OPT_Wconversion;\n \telse\n \t  break;\n+\tif (is_arith\n+\t    && global_dc->option_enabled (warnopt,\n+\t\t\t\t\t  global_dc->lang_mask,\n+\t\t\t\t\t  global_dc->option_state))\n+\t  warnopt = OPT_Warith_conversion;\n \tif (conversion_kind == UNSAFE_SIGN)\n \t  warning_at (loc, warnopt, \"conversion to %qT from %qT \"\n \t\t      \"may change the sign of the result\",\n@@ -1288,8 +1338,10 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n \t  warning_at (loc, warnopt,\n \t\t      \"conversion from %qT to %qT may change value\",\n \t\t      expr_type, type);\n+\treturn true;\n       }\n     }\n+  return false;\n }\n \n /* Produce warnings after a conversion. RESULT is the result of"}, {"sha": "814ed17f7c4aba80368ad8b8303c13759703bd63", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=c77074d05691053ee7347d9e44ab89b3adb23fb1", "patch": "@@ -1107,6 +1107,10 @@ Wshift-negative-value\n C ObjC C++ ObjC++ Var(warn_shift_negative_value) Init(-1) Warning\n Warn if left shifting a negative value.\n \n+Warith-conversion\n+C ObjC C++ ObjC++ Var(warn_arith_conv) Warning\n+Warn if conversion of the result of arithmetic might change the value even though converting the operands cannot.\n+\n Wsign-compare\n C ObjC C++ ObjC++ Var(warn_sign_compare) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about signed-unsigned comparisons."}, {"sha": "2cd8d7ec5ff7f0b3adf5569a8a95ab24460a12ad", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c77074d05691053ee7347d9e44ab89b3adb23fb1", "patch": "@@ -312,6 +312,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-analyzer-use-of-pointer-in-stale-stack-frame @gol\n -Wno-analyzer-use-of-uninitialized-value @gol\n -Wanalyzer-too-complex @gol\n+-Warith-conversion @gol\n -Warray-bounds  -Warray-bounds=@var{n} @gol\n -Wno-attributes  -Wattribute-alias=@var{n}  @gol\n -Wbool-compare  -Wbool-operation @gol\n@@ -6637,6 +6638,24 @@ This warning requires @option{-fanalyzer}, which enables it; use\n This diagnostic warns for paths through the code in which an uninitialized\n value is used.\n \n+@item -Warith-conversion\n+@opindex Warith-conversion\n+@opindex Wno-arith-conversion\n+Do warn about implicit conversions from arithmetic operations even\n+when conversion of the operands to the same type cannot change their\n+values.  This affects warnings from @option{-Wconversion},\n+@option{-Wfloat-conversion}, and @option{-Wsign-conversion}.\n+\n+@smallexample\n+@group\n+void f (char c, int i)\n+@{\n+  c = c + i; // warns with @option{-Wconversion}\n+  c = c + 1; // only warns with @option{-Warith-conversion}\n+@}\n+@end group\n+@end smallexample\n+\n @item -Warray-bounds\n @itemx -Warray-bounds=@var{n}\n @opindex Wno-array-bounds\n@@ -7425,6 +7444,9 @@ reference to them. Warnings about conversions between signed and\n unsigned integers are disabled by default in C++ unless\n @option{-Wsign-conversion} is explicitly enabled.\n \n+Warnings about conversion from arithmetic on a small type back to that\n+type are only given with @option{-Warith-conversion}.\n+\n @item -Wno-conversion-null @r{(C++ and Objective-C++ only)}\n @opindex Wconversion-null\n @opindex Wno-conversion-null"}, {"sha": "dc757185c751c1ddc3c9c6b3cd22086f56f7cb7e", "filename": "gcc/testsuite/c-c++-common/Wconversion-pr40752.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752.c?ref=c77074d05691053ee7347d9e44ab89b3adb23fb1", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wconversion\" } */\n+#include <limits.h>\n+void foo(char c, char c2)\n+{\n+  c >>= c2;\n+  c >>= 1;\n+  c <<= 1;\n+  c <<= c2;\n+  c += 1;\n+  c += c2;\n+  c -= 1;\n+  c -= c2;\n+  c *= 2;\n+  c *= c2;\n+  c /= 2;\n+  c /= c2;\n+  c %= 2;\n+  c %= c2;\n+  c = -c2;\n+  c = ~c2;\n+  c = c2++;\n+  c = ++c2;\n+  c = c2--;\n+  c = --c2;\n+}\n+\n+void bar(char c, int c2)\n+{\n+  c >>= c2; \n+  c >>= (int)1;\n+  c <<= (int)1;\n+  c <<= c2;\n+  c += ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c += c2; /* { dg-warning \"conversion\" } */\n+  c -= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c -= c2; /* { dg-warning \"conversion\" } */\n+  c *= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c *= c2; /* { dg-warning \"conversion\" } */\n+  c /= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c /= c2; /* { dg-warning \"conversion\" } */\n+  c %= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c %= c2; /* { dg-warning \"conversion\" } */\n+  c = ~c2; /* { dg-warning \"conversion\" } */\n+  c = c2++; /* { dg-warning \"conversion\" } */\n+  c = ++c2; /* { dg-warning \"conversion\" } */\n+  c = c2--; /* { dg-warning \"conversion\" } */\n+  c = --c2; /* { dg-warning \"conversion\" } */\n+}"}, {"sha": "7b5c9dee617f22d57b71121481b4219fed01e581", "filename": "gcc/testsuite/c-c++-common/Wconversion-pr40752a.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752a.c?ref=c77074d05691053ee7347d9e44ab89b3adb23fb1", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wconversion -Warith-conversion\" } */\n+#include <limits.h>\n+void foo(char c, char c2)\n+{\n+  c >>= c2;\t\t\t/* { dg-warning \"conversion\" } */\n+  c >>= 1;\n+  c <<= 1;\t\t\t/* { dg-warning \"conversion\" } */\n+  c <<= c2;\t\t\t/* { dg-warning \"conversion\" } */\n+  c += 1;\t\t\t/* { dg-warning \"conversion\" } */\n+  c += c2;\t\t\t/* { dg-warning \"conversion\" } */\n+  c -= 1;\t\t\t/* { dg-warning \"conversion\" } */\n+  c -= c2;\t\t\t/* { dg-warning \"conversion\" } */\n+  c *= 2;\t\t\t/* { dg-warning \"conversion\" } */\n+  c *= c2;\t\t\t/* { dg-warning \"conversion\" } */\n+  c /= 2;\n+  c /= c2;\t\t\t/* { dg-warning \"conversion\" } */\n+  c %= 2;\n+  c %= c2;\t\t\t/* { dg-warning \"conversion\" } */\n+  c = -c2;\t\t\t/* { dg-warning \"conversion\" } */\n+  c = ~c2;\t\t\t/* { dg-warning \"conversion\" } */\n+  c = c2++;\n+  c = ++c2;\n+  c = c2--;\n+  c = --c2;\n+}\n+\n+void bar(char c, int c2)\n+{\n+  c >>= c2; \t\t\t/* { dg-warning \"conversion\" } */\n+  c >>= (int)1;\n+  c <<= (int)1;\t\t\t/* { dg-warning \"conversion\" } */\n+  c <<= c2;\t\t\t/* { dg-warning \"conversion\" } */\n+  c += ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c += c2; /* { dg-warning \"conversion\" } */\n+  c -= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c -= c2; /* { dg-warning \"conversion\" } */\n+  c *= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c *= c2; /* { dg-warning \"conversion\" } */\n+  c /= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c /= c2; /* { dg-warning \"conversion\" } */\n+  c %= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c %= c2; /* { dg-warning \"conversion\" } */\n+  c = ~c2; /* { dg-warning \"conversion\" } */\n+  c = c2++; /* { dg-warning \"conversion\" } */\n+  c = ++c2; /* { dg-warning \"conversion\" } */\n+  c = c2--; /* { dg-warning \"conversion\" } */\n+  c = --c2; /* { dg-warning \"conversion\" } */\n+}"}, {"sha": "20b6e999b2fa232d8148c88d1dd76df0ce603179", "filename": "gcc/testsuite/c-c++-common/Wsign-conversion-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsign-conversion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77074d05691053ee7347d9e44ab89b3adb23fb1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsign-conversion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsign-conversion-1.c?ref=c77074d05691053ee7347d9e44ab89b3adb23fb1", "patch": "@@ -0,0 +1,13 @@\n+/* PR c++/52703 */\n+/* { dg-options -Wsign-conversion } */\n+\n+unsigned f (unsigned x) {\n+  return x;\n+}\n+\n+int main () {\n+  unsigned short a = 0;\n+  unsigned b = a + 1;\n+  f (a + 1);\n+  return 0;\n+}"}]}