{"sha": "a0d33ff828f123b1682eeb346885b2f40e2db224", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBkMzNmZjgyOGYxMjNiMTY4MmVlYjM0Njg4NWIyZjQwZTJkYjIyNA==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2008-08-06T06:22:33Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2008-08-06T06:22:33Z"}, "message": "haifa-sched.c (extend_global): Split to extend_global_data and extend_region_data.\n\n\t* haifa-sched.c (extend_global): Split to extend_global_data and\n\textend_region_data.  Update all uses.\n\t(extend_all): Rename to extend_block_data.\n\n\t* gcc.target/ia64/20080802-1.c: New test.\n\nFrom-SVN: r138758", "tree": {"sha": "cc2785ee82afbbea15ebda141c3b087cd1ac07a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc2785ee82afbbea15ebda141c3b087cd1ac07a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0d33ff828f123b1682eeb346885b2f40e2db224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d33ff828f123b1682eeb346885b2f40e2db224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d33ff828f123b1682eeb346885b2f40e2db224", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d33ff828f123b1682eeb346885b2f40e2db224/comments", "author": null, "committer": null, "parents": [{"sha": "07da1cfcf6b220900e88b457e2bb23ed9eeefac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07da1cfcf6b220900e88b457e2bb23ed9eeefac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07da1cfcf6b220900e88b457e2bb23ed9eeefac7"}], "stats": {"total": 78, "additions": 57, "deletions": 21}, "files": [{"sha": "fb238345559a3a7f82c5fd188e13be8762357ce0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d33ff828f123b1682eeb346885b2f40e2db224/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d33ff828f123b1682eeb346885b2f40e2db224/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0d33ff828f123b1682eeb346885b2f40e2db224", "patch": "@@ -1,3 +1,9 @@\n+2008-08-06  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* haifa-sched.c (extend_global): Split to extend_global_data and\n+\textend_region_data.  Update all uses.\n+\t(extend_all): Rename to extend_block_data.\n+\n 2008-08-06  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* sched-rgn.c (new_ready): Check if instruction can be"}, {"sha": "db1d66f49b84490ca9a11238a5641d4dfed97432", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d33ff828f123b1682eeb346885b2f40e2db224/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d33ff828f123b1682eeb346885b2f40e2db224/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=a0d33ff828f123b1682eeb346885b2f40e2db224", "patch": "@@ -544,8 +544,6 @@ static void change_queue_index (rtx, int);\n \n static void extend_h_i_d (void);\n static void extend_ready (int);\n-static void extend_global (rtx);\n-static void extend_all (rtx);\n static void init_h_i_d (rtx);\n static void generate_recovery_code (rtx);\n static void process_insn_forw_deps_be_in_spec (rtx, rtx, ds_t);\n@@ -3188,36 +3186,45 @@ extend_ready (int n_new_insns)\n     choice_stack[i].state = xmalloc (dfa_state_size);\n }\n \n-/* Extend global scheduler structures (those, that live across calls to\n-   schedule_block) to include information about just emitted INSN.  */\n+/* Extend global-scope scheduler data structures\n+   (those, that live within one call to schedule_insns)\n+   to include information about just emitted INSN.  */\n static void\n-extend_global (rtx insn)\n+extend_global_data (rtx insn)\n {\n   gcc_assert (INSN_P (insn));\n \n-  /* These structures have scheduler scope.  */\n-\n   /* Init h_i_d.  */\n   extend_h_i_d ();\n   init_h_i_d (insn);\n \n-  /* Init data handled in sched-deps.c.  */\n-  sd_init_insn (insn);\n-\n   /* Extend dependency caches by one element.  */\n   extend_dependency_caches (1, false);\n }\n \n-/* Extends global and local scheduler structures to include information\n-   about just emitted INSN.  */\n+/* Extend global- and region-scope scheduler data structures\n+   (those, that live within one call to schedule_region)\n+   to include information about just emitted INSN.  */\n+static void\n+extend_region_data (rtx insn)\n+{\n+  extend_global_data (insn);\n+\n+  /* Init dependency data.  */\n+  sd_init_insn (insn);\n+}\n+\n+/* Extend global-, region- and block-scope scheduler data structures\n+   (those, that live within one call to schedule_block)\n+   to include information about just emitted INSN.  */\n static void\n-extend_all (rtx insn)\n-{ \n-  extend_global (insn);\n+extend_block_data (rtx insn)\n+{\n+  extend_region_data (insn);\n \n   /* These structures have block scope.  */\n   extend_ready (1);\n-  \n+\n   (*current_sched_info->add_remove_insn) (insn, 0);\n }\n \n@@ -3391,7 +3398,7 @@ add_to_speculative_block (rtx insn)\n       rec = BLOCK_FOR_INSN (check);\n \n       twin = emit_insn_before (copy_insn (PATTERN (insn)), BB_END (rec));\n-      extend_global (twin);\n+      extend_region_data (twin);\n \n       sd_copy_back_deps (twin, insn, true);\n \n@@ -3581,7 +3588,7 @@ init_before_recovery (void)\n       x = emit_jump_insn_after (gen_jump (label), BB_END (single));\n       JUMP_LABEL (x) = label;\n       LABEL_NUSES (label)++;\n-      extend_global (x);\n+      extend_global_data (x);\n           \n       emit_barrier_after (x);\n \n@@ -3681,7 +3688,7 @@ create_check_block_twin (rtx insn, bool mutate_p)\n     check = emit_insn_before (check, insn);\n \n   /* Extend data structures.  */\n-  extend_all (check);\n+  extend_block_data (check);\n   RECOVERY_BLOCK (check) = rec;\n \n   if (sched_verbose && spec_info->dump)\n@@ -3708,7 +3715,7 @@ create_check_block_twin (rtx insn, bool mutate_p)\n \t  }\n \n       twin = emit_insn_after (ORIG_PAT (insn), BB_END (rec));\n-      extend_global (twin);\n+      extend_region_data (twin);\n \n       if (sched_verbose && spec_info->dump)\n \t/* INSN_BB (insn) isn't determined for twin insns yet.\n@@ -3761,7 +3768,7 @@ create_check_block_twin (rtx insn, bool mutate_p)\n       jump = emit_jump_insn_after (gen_jump (label), BB_END (rec));\n       JUMP_LABEL (jump) = label;\n       LABEL_NUSES (label)++;\n-      extend_global (jump);\n+      extend_region_data (jump);\n \n       if (BB_PARTITION (second_bb) != BB_PARTITION (rec))\n \t/* Partition type is the same, if it is \"unpartitioned\".  */"}, {"sha": "0a3088ba8cc6d137131e75d736055feecbef85c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d33ff828f123b1682eeb346885b2f40e2db224/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d33ff828f123b1682eeb346885b2f40e2db224/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0d33ff828f123b1682eeb346885b2f40e2db224", "patch": "@@ -1,3 +1,7 @@\n+2008-08-06  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* gcc.target/ia64/20080802-1.c: New test.\n+\n 2008-08-05  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/37024"}, {"sha": "b689a5d8d5fba1367c50fe67dd62a40d5894c26f", "filename": "gcc/testsuite/gcc.target/ia64/20080802-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0d33ff828f123b1682eeb346885b2f40e2db224/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2F20080802-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0d33ff828f123b1682eeb346885b2f40e2db224/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2F20080802-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2F20080802-1.c?ref=a0d33ff828f123b1682eeb346885b2f40e2db224", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msched-control-spec\" } */\n+\n+struct cpp_reader;\n+\n+extern const char * parse_include (struct cpp_reader *, int *m, void *);\n+extern int _cpp_compare_file_date (struct cpp_reader *, const char *, int);\n+\n+void\n+_cpp_init_internal_pragmas (struct cpp_reader *pfile)\n+{\n+  const char *fname;\n+  int angle_brackets, ordering;\n+\n+  fname = parse_include (pfile, &angle_brackets, (void *) 0);\n+  if (!fname)\n+    return;\n+  ordering = _cpp_compare_file_date (pfile, fname, angle_brackets);\n+}"}]}