{"sha": "92aed1cbf42362b47fa6db66122d33278d7a4ea3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJhZWQxY2JmNDIzNjJiNDdmYTZkYjY2MTIyZDMzMjc4ZDdhNGVhMw==", "commit": {"author": {"name": "Terry Laurenzo", "email": "tlaurenzo@gmail.com", "date": "2005-12-11T01:34:02Z"}, "committer": {"name": "Terry Laurenzo", "email": "tlaurenzo@gcc.gnu.org", "date": "2005-12-11T01:34:02Z"}, "message": "Fixes java/PR9861\n\nFrom-SVN: r108374", "tree": {"sha": "d3a6af3b149154654e7557325e0a2d26a3b83556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3a6af3b149154654e7557325e0a2d26a3b83556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92aed1cbf42362b47fa6db66122d33278d7a4ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92aed1cbf42362b47fa6db66122d33278d7a4ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92aed1cbf42362b47fa6db66122d33278d7a4ea3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92aed1cbf42362b47fa6db66122d33278d7a4ea3/comments", "author": null, "committer": null, "parents": [{"sha": "b6105bf2c397ba0aba21454a17e013974e0fe657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6105bf2c397ba0aba21454a17e013974e0fe657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6105bf2c397ba0aba21454a17e013974e0fe657"}], "stats": {"total": 157, "additions": 135, "deletions": 22}, "files": [{"sha": "13b075bb9d7280e11b23bb6548ca3711c7c4b113", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92aed1cbf42362b47fa6db66122d33278d7a4ea3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92aed1cbf42362b47fa6db66122d33278d7a4ea3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92aed1cbf42362b47fa6db66122d33278d7a4ea3", "patch": "@@ -1,3 +1,9 @@\n+2005-12-10  Terry Laurenzo  <tlaurenzo@gmail.com>\n+\n+\tPR java/9861\n+\t* mangle.c (write_bare_function_type): Mangle return type for\n+\tmethods of Java classes\n+\n 2005-12-08  Th\ufffdodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n \t\n \t* call.c (build_conditional_expr): Print types in error messages."}, {"sha": "3b844b5addf8627facffff6d552278141a160057", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92aed1cbf42362b47fa6db66122d33278d7a4ea3/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92aed1cbf42362b47fa6db66122d33278d7a4ea3/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=92aed1cbf42362b47fa6db66122d33278d7a4ea3", "patch": "@@ -1858,16 +1858,38 @@ write_function_type (const tree type)\n    is mangled before the parameter types.  If non-NULL, DECL is\n    FUNCTION_DECL for the function whose type is being emitted.\n \n-     <bare-function-type> ::= </signature/ type>+  */\n+   If DECL is a member of a Java type, then a literal 'J'\n+   is output and the return type is mangled as if INCLUDE_RETURN_TYPE\n+   were nonzero.\n+\n+     <bare-function-type> ::= [J]</signature/ type>+  */\n \n static void\n write_bare_function_type (const tree type, const int include_return_type_p,\n \t\t\t  const tree decl)\n {\n+  int java_method_p;\n+\n   MANGLE_TRACE_TREE (\"bare-function-type\", type);\n \n+  /* Detect Java methods and emit special encoding.  */\n+  if (decl != NULL\n+      && DECL_FUNCTION_MEMBER_P (decl)\n+      && TYPE_FOR_JAVA (DECL_CONTEXT (decl))\n+      && !DECL_CONSTRUCTOR_P (decl)\n+      && !DECL_DESTRUCTOR_P (decl)\n+      && !DECL_CONV_FN_P (decl))\n+    {\n+      java_method_p = 1;\n+      write_char ('J');\n+    }\n+  else\n+    {\n+      java_method_p = 0;\n+    }\n+\n   /* Mangle the return type, if requested.  */\n-  if (include_return_type_p)\n+  if (include_return_type_p || java_method_p)\n     write_type (TREE_TYPE (type));\n \n   /* Now mangle the types of the arguments.  */"}, {"sha": "43859b71bbd47e3a31a66b7527c8144b400a9839", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92aed1cbf42362b47fa6db66122d33278d7a4ea3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92aed1cbf42362b47fa6db66122d33278d7a4ea3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=92aed1cbf42362b47fa6db66122d33278d7a4ea3", "patch": "@@ -1,3 +1,11 @@\n+2005-12-10  Terry Laurenzo  <tlaurenzo@gmail.com>\n+\n+\tPR java/9861\n+\t* mangle.c (mangle_method_decl): Mangle Java methods by prepending 'J'\n+\tto bare_function_type and including the return type\n+\t* builtins.c (initialize_builtins) : Change builtin mangled name\n+\tconstants to conform to new mangling scheme\n+\n 2005-12-08  Andrew Haley  <aph@redhat.com>\n \n \tPR libgcj/25265"}, {"sha": "ff6da981a0ea80b676745a6a41ebd9dd1bd701bb", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92aed1cbf42362b47fa6db66122d33278d7a4ea3/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92aed1cbf42362b47fa6db66122d33278d7a4ea3/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=92aed1cbf42362b47fa6db66122d33278d7a4ea3", "patch": "@@ -194,43 +194,43 @@ initialize_builtins (void)\n \t\t  float_ftype_float_float, \"fmodf\", BUILTIN_CONST);\n \n   define_builtin (BUILT_IN_ACOS, \"__builtin_acos\",\n-\t\t  double_ftype_double, \"_ZN4java4lang4Math4acosEd\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math4acosEJdd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_ASIN, \"__builtin_asin\",\n-\t\t  double_ftype_double, \"_ZN4java4lang4Math4asinEd\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math4asinEJdd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_ATAN, \"__builtin_atan\",\n-\t\t  double_ftype_double, \"_ZN4java4lang4Math4atanEd\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math4atanEJdd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_ATAN2, \"__builtin_atan2\",\n-\t\t  double_ftype_double_double, \"_ZN4java4lang4Math5atan2Edd\",\n+\t\t  double_ftype_double_double, \"_ZN4java4lang4Math5atan2EJddd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_CEIL, \"__builtin_ceil\",\n-\t\t  double_ftype_double, \"_ZN4java4lang4Math4ceilEd\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math4ceilEJdd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_COS, \"__builtin_cos\",\n-\t\t  double_ftype_double, \"_ZN4java4lang4Math3cosEd\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math3cosEJdd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_EXP, \"__builtin_exp\",\n-\t\t  double_ftype_double, \"_ZN4java4lang4Math3expEd\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math3expEJdd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_FLOOR, \"__builtin_floor\",\n-\t\t  double_ftype_double, \"_ZN4java4lang4Math5floorEd\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math5floorEJdd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_LOG, \"__builtin_log\",\n-\t\t  double_ftype_double, \"_ZN4java4lang4Math3logEd\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math3logEJdd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_POW, \"__builtin_pow\",\n-\t\t  double_ftype_double_double, \"_ZN4java4lang4Math3powEdd\",\n+\t\t  double_ftype_double_double, \"_ZN4java4lang4Math3powEJddd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_SIN, \"__builtin_sin\",\n-\t\t  double_ftype_double, \"_ZN4java4lang4Math3sinEd\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math3sinEJdd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_SQRT, \"__builtin_sqrt\",\n-\t\t  double_ftype_double, \"_ZN4java4lang4Math4sqrtEd\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math4sqrtEJdd\",\n \t\t  BUILTIN_CONST);\n   define_builtin (BUILT_IN_TAN, \"__builtin_tan\",\n-\t\t  double_ftype_double, \"_ZN4java4lang4Math3tanEd\",\n+\t\t  double_ftype_double, \"_ZN4java4lang4Math3tanEJdd\",\n \t\t  BUILTIN_CONST);\n   \n   t = tree_cons (NULL_TREE, boolean_type_node, end_params_node);"}, {"sha": "372c9466c63c44ecc95f37ab57db3fe161b126e2", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92aed1cbf42362b47fa6db66122d33278d7a4ea3/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92aed1cbf42362b47fa6db66122d33278d7a4ea3/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=92aed1cbf42362b47fa6db66122d33278d7a4ea3", "patch": "@@ -188,6 +188,14 @@ mangle_method_decl (tree mdecl)\n   if (TREE_CODE (TREE_TYPE (mdecl)) == METHOD_TYPE)\n     arglist = TREE_CHAIN (arglist);\n   \n+  /* Output literal 'J' and mangle the return type IF not a \n+     constructor.  */\n+  if (!ID_INIT_P (method_name))\n+    {\n+      obstack_1grow (mangle_obstack, 'J');\n+      mangle_type(TREE_TYPE(TREE_TYPE(mdecl)));\n+    }\n+  \n   /* No arguments is easy. We shortcut it. */\n   if (arglist == end_params_node)\n     obstack_1grow (mangle_obstack, 'v');"}, {"sha": "71fe4253afa4249e98611e2b240afa9d5410b900", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92aed1cbf42362b47fa6db66122d33278d7a4ea3/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92aed1cbf42362b47fa6db66122d33278d7a4ea3/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=92aed1cbf42362b47fa6db66122d33278d7a4ea3", "patch": "@@ -1,3 +1,9 @@\n+2005-12-10  Terry Laurenzo  <tlaurenzo@gmail.com>\n+\n+\tPR java/9861\n+\t* demangle.h : Add DMGL_RET_POSTFIX define to enable alternative\n+\toutput format for return types\n+\n 2005-10-31  Mark Kettenis  <kettenis@gnu.org>\n \n \t* floatformat.h (enum floatformat_byteorders): Add"}, {"sha": "af294672736994fcb6a57c77585c48b7b58b9063", "filename": "include/demangle.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92aed1cbf42362b47fa6db66122d33278d7a4ea3/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92aed1cbf42362b47fa6db66122d33278d7a4ea3/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=92aed1cbf42362b47fa6db66122d33278d7a4ea3", "patch": "@@ -35,6 +35,8 @@ extern \"C\" {\n #define DMGL_JAVA\t (1 << 2)\t/* Demangle as Java rather than C++. */\n #define DMGL_VERBOSE\t (1 << 3)\t/* Include implementation details.  */\n #define DMGL_TYPES\t (1 << 4)\t/* Also try to demangle type encodings.  */\n+#define DMGL_RET_POSTFIX (1 << 5)       /* Print function return types (when\n+                                           present) after function signature */\n \n #define DMGL_AUTO\t (1 << 8)\n #define DMGL_GNU\t (1 << 9)"}, {"sha": "85e96bad04b3a7ff84ebe5bfb4e63f27c7f7c5ec", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92aed1cbf42362b47fa6db66122d33278d7a4ea3/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92aed1cbf42362b47fa6db66122d33278d7a4ea3/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=92aed1cbf42362b47fa6db66122d33278d7a4ea3", "patch": "@@ -1,3 +1,17 @@\n+2005-12-10  Terry Laurenzo  <tlaurenzo@gmail.com>\n+\n+\tPR java/9861\n+\t* cp-demangle.c (d_bare_function_type): Recognize new 'J' qualifer\n+\tand include return type when found.\n+\t(d_print_comp)[DEMANGLE_COMPONENT_FUNCTION_TYPE]: Add\n+\tconditional logic to change printing order of return type.when\n+\tthe DMGL_RET_POSTFIX option is present.\n+\t(java_demangle_v3): Add DMGL_RET_POSTFIX option to d_demangle\n+\tcall.\n+\t* testsuite/test-demangle.c (main): Recognize option --ret-postfix\n+\t* testsuite/demangle-expected: Test cases to verify extended encoding.\n+\tUpdated comment to document --ret-postfix option.\n+\t\n 2005-11-06  Richard Guenther  <rguenther@suse.de>\n \n \t* splay-tree.c (rotate_left): New function."}, {"sha": "109d533b524e4175f61b304caa84b1199ed3c7d9", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92aed1cbf42362b47fa6db66122d33278d7a4ea3/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92aed1cbf42362b47fa6db66122d33278d7a4ea3/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=92aed1cbf42362b47fa6db66122d33278d7a4ea3", "patch": "@@ -1939,21 +1939,30 @@ d_function_type (struct d_info *di)\n   return ret;\n }\n \n-/* <bare-function-type> ::= <type>+  */\n+/* <bare-function-type> ::= [J]<type>+  */\n \n static struct demangle_component *\n d_bare_function_type (struct d_info *di, int has_return_type)\n {\n   struct demangle_component *return_type;\n   struct demangle_component *tl;\n   struct demangle_component **ptl;\n+  char peek;\n+\n+  /* Detect special qualifier indicating that the first argument\n+     is the return type.  */\n+  peek = d_peek_char (di);\n+  if (peek == 'J')\n+    {\n+      d_advance (di, 1);\n+      has_return_type = 1;\n+    }\n \n   return_type = NULL;\n   tl = NULL;\n   ptl = &tl;\n   while (1)\n     {\n-      char peek;\n       struct demangle_component *type;\n \n       peek = d_peek_char (di);\n@@ -3025,13 +3034,16 @@ d_print_comp (struct d_print_info *dpi,\n \n     case DEMANGLE_COMPONENT_FUNCTION_TYPE:\n       {\n+\tif ((dpi->options & DMGL_RET_POSTFIX) != 0)\n+\t  d_print_function_type (dpi, dc, dpi->modifiers);\n+\n+\t/* Print return type if present */\n \tif (d_left (dc) != NULL)\n \t  {\n \t    struct d_print_mod dpm;\n \n \t    /* We must pass this type down as a modifier in order to\n \t       print it in the right location.  */\n-\n \t    dpm.next = dpi->modifiers;\n \t    dpi->modifiers = &dpm;\n \t    dpm.mod = dc;\n@@ -3045,10 +3057,14 @@ d_print_comp (struct d_print_info *dpi,\n \t    if (dpm.printed)\n \t      return;\n \n-\t    d_append_char (dpi, ' ');\n+\t    /* In standard prefix notation, there is a space between the\n+\t       return type and the function signature.  */\n+\t    if ((dpi->options & DMGL_RET_POSTFIX) == 0)\n+\t      d_append_char (dpi, ' ');\n \t  }\n \n-\td_print_function_type (dpi, dc, dpi->modifiers);\n+\tif ((dpi->options & DMGL_RET_POSTFIX) == 0) \n+\t  d_print_function_type (dpi, dc, dpi->modifiers);\n \n \treturn;\n       }\n@@ -4003,7 +4019,8 @@ java_demangle_v3 (const char* mangled)\n   char *from;\n   char *to;\n \n-  demangled = d_demangle (mangled, DMGL_JAVA | DMGL_PARAMS, &alc);\n+  demangled = d_demangle (mangled, DMGL_JAVA | DMGL_PARAMS | DMGL_RET_POSTFIX, \n+\t\t\t  &alc);\n \n   if (demangled == NULL)\n     return NULL;"}, {"sha": "fa2a2fed24586888d536e86fcbafdee892b924a5", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92aed1cbf42362b47fa6db66122d33278d7a4ea3/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92aed1cbf42362b47fa6db66122d33278d7a4ea3/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=92aed1cbf42362b47fa6db66122d33278d7a4ea3", "patch": "@@ -11,6 +11,7 @@\n #    --is-v3-ctor        Calls is_gnu_v3_mangled_ctor on input; expected\n #                        output is an integer representing ctor_kind.\n #    --is-v3-dtor        Likewise, but for dtors.\n+#    --ret-postfix       Passes the DMGL_RET_POSTFIX option\n #\n #  For compatibility, just in case it matters, the options line may be\n #  empty, to mean --format=auto.  If it doesn't start with --, then it\n@@ -3781,3 +3782,26 @@ _test_array__L_1__B23b___clean.6\n --format=java\n _ZGAN4java4lang5Class7forNameEPNS0_6StringE\n hidden alias for java.lang.Class.forName(java.lang.String)\n+#\n+# Test cases to verify encoding that determines if a return type is present\n+# Related to PR9861\n+--format=java\n+_ZN4java4lang4Math4acosEJdd\n+java.lang.Math.acos(double)double\n+#\n+--format=auto\n+_ZN4java4lang4Math4acosEJdd\n+double java::lang::Math::acos(double)\n+#\n+--format=auto\n+_ZN4java4lang4Math4acosEJvd\n+void java::lang::Math::acos(double)\n+#\n+--format=auto --ret-postfix\n+_ZN4java4lang4Math4acosEJdd\n+java::lang::Math::acos(double)double\n+#\n+--format=gnu-v3 --no-params --ret-postfix\n+_Z4makeI7FactoryiET_IT0_Ev\n+make<Factory, int>()Factory<int>\n+make<Factory, int>"}, {"sha": "93793996fe0d2d20710f77c112c49e09c53e02f4", "filename": "libiberty/testsuite/test-demangle.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92aed1cbf42362b47fa6db66122d33278d7a4ea3/libiberty%2Ftestsuite%2Ftest-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92aed1cbf42362b47fa6db66122d33278d7a4ea3/libiberty%2Ftestsuite%2Ftest-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Ftest-demangle.c?ref=92aed1cbf42362b47fa6db66122d33278d7a4ea3", "patch": "@@ -114,6 +114,7 @@ exp: %s\\n\",\n      --is-v3-ctor        Calls is_gnu_v3_mangled_ctor on input; expected\n                          output is an integer representing ctor_kind.\n      --is-v3-dtor        Likewise, but for dtors.\n+     --ret-postfix       Passes the DMGL_RET_POSTFIX option\n \n    For compatibility, just in case it matters, the options line may be\n    empty, to mean --format=auto.  If it doesn't start with --, then it\n@@ -129,6 +130,7 @@ main(argc, argv)\n   int no_params;\n   int is_v3_ctor;\n   int is_v3_dtor;\n+  int ret_postfix;\n   struct line format;\n   struct line input;\n   struct line expect;\n@@ -158,6 +160,7 @@ main(argc, argv)\n       tests++;\n \n       no_params = 0;\n+      ret_postfix = 0;\n       is_v3_ctor = 0;\n       is_v3_dtor = 0;\n       if (format.data[0] == '\\0')\n@@ -212,6 +215,8 @@ main(argc, argv)\n \t\tis_v3_ctor = 1;\n \t      else if (strcmp (opt, \"--is-v3-dtor\") == 0)\n \t\tis_v3_dtor = 1;\n+\t      else if (strcmp (opt, \"--ret-postfix\") == 0)\n+\t\tret_postfix = 1;\n \t      else\n \t\t{\n \t\t  printf (\"FAIL at line %d: unrecognized option %s\\n\",\n@@ -255,7 +260,8 @@ main(argc, argv)\n       cplus_demangle_set_style (style);\n \n       result = cplus_demangle (input.data,\n-\t\t\t       DMGL_PARAMS|DMGL_ANSI|DMGL_TYPES);\n+\t\t\t       DMGL_PARAMS|DMGL_ANSI|DMGL_TYPES\n+\t\t\t       |(ret_postfix ? DMGL_RET_POSTFIX : 0));\n \n       if (result\n \t  ? strcmp (result, expect.data)"}]}