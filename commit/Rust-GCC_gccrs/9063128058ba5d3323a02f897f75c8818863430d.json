{"sha": "9063128058ba5d3323a02f897f75c8818863430d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA2MzEyODA1OGJhNWQzMzIzYTAyZjg5N2Y3NWM4ODE4ODYzNDMwZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-11-24T09:47:36Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-11-24T09:47:36Z"}, "message": "gcse.c (hash_scan_set): Look through REG_EQUAL or REG_EQUIV notes also when doing PRE...\n\n2005-11-24  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* gcse.c (hash_scan_set): Look through REG_EQUAL or REG_EQUIV notes\n\talso when doing PRE, rather than only for global CPROP.\n\nFrom-SVN: r107456", "tree": {"sha": "3717e20b6ad857a72b3d06979afc1fdffaf8a953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3717e20b6ad857a72b3d06979afc1fdffaf8a953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9063128058ba5d3323a02f897f75c8818863430d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9063128058ba5d3323a02f897f75c8818863430d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9063128058ba5d3323a02f897f75c8818863430d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9063128058ba5d3323a02f897f75c8818863430d/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9df540a8d941d18ea691c3eba9a09d12107d5c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9df540a8d941d18ea691c3eba9a09d12107d5c3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9df540a8d941d18ea691c3eba9a09d12107d5c3e"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "361250db81231c01644f9411093dfaa9af4ae6fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9063128058ba5d3323a02f897f75c8818863430d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9063128058ba5d3323a02f897f75c8818863430d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9063128058ba5d3323a02f897f75c8818863430d", "patch": "@@ -1,3 +1,8 @@\n+2005-11-24  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcse.c (hash_scan_set): Look through REG_EQUAL or REG_EQUIV notes\n+\talso when doing PRE, rather than only for global CPROP.\n+\n 2005-11-24  Ben Elliston  <bje@au.ibm.com>\n \n \t* machmode.h (CLASS_HAS_WIDER_MODES_P): New macro."}, {"sha": "3a53d9e4d26cbc55af2c2b1b61d448a0b4389394", "filename": "gcc/gcse.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9063128058ba5d3323a02f897f75c8818863430d/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9063128058ba5d3323a02f897f75c8818863430d/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=9063128058ba5d3323a02f897f75c8818863430d", "patch": "@@ -1700,10 +1700,15 @@ hash_scan_set (rtx pat, rtx insn, struct hash_table *table)\n       unsigned int regno = REGNO (dest);\n       rtx tmp;\n \n-      /* If this is a single set and we are doing constant propagation,\n-\t see if a REG_NOTE shows this equivalent to a constant.  */\n-      if (table->set_p && (note = find_reg_equal_equiv_note (insn)) != 0\n-\t  && gcse_constant_p (XEXP (note, 0)))\n+      /* See if a REG_NOTE shows this equivalent to a simpler expression.\n+\t This allows us to do a single GCSE pass and still eliminate\n+\t redundant constants, addresses or other expressions that are\n+\t constructed with multiple instructions.  */\n+      note = find_reg_equal_equiv_note (insn);\n+      if (note != 0\n+\t  && (table->set_p\n+\t      ? gcse_constant_p (XEXP (note, 0))\n+\t      : want_to_gcse_p (XEXP (note, 0))))\n \tsrc = XEXP (note, 0), pat = gen_rtx_SET (VOIDmode, dest, src);\n \n       /* Only record sets of pseudo-regs in the hash table.  */\n@@ -1724,8 +1729,7 @@ hash_scan_set (rtx pat, rtx insn, struct hash_table *table)\n \t     REG_EQUIV notes and if the argument slot is used somewhere\n \t     explicitly, it means address of parameter has been taken,\n \t     so we should not extend the lifetime of the pseudo.  */\n-\t  && ((note = find_reg_note (insn, REG_EQUIV, NULL_RTX)) == 0\n-\t      || ! MEM_P (XEXP (note, 0))))\n+\t  && (note == NULL_RTX || ! MEM_P (XEXP (note, 0))))\n \t{\n \t  /* An expression is not anticipatable if its operands are\n \t     modified before this insn or if this is not the only SET in"}]}