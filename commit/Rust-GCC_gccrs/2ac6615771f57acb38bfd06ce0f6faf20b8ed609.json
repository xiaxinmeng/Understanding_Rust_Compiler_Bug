{"sha": "2ac6615771f57acb38bfd06ce0f6faf20b8ed609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFjNjYxNTc3MWY1N2FjYjM4YmZkMDZjZTBmNmZhZjIwYjhlZDYwOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-12-22T23:59:34Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-12-22T23:59:34Z"}, "message": "basic-block.h: Remove the prototype for commit_edge_insertions_watch_calls.\n\n\t* basic-block.h: Remove the prototype for\n\tcommit_edge_insertions_watch_calls.\n \t* cfgrtl.c (commit_edge_insertion): Drop the last argument.\n\tSimplify.\n\t(commit_edge_insertions_watch_calls): Remove.\n\t(commit_edge_insertions): Adjust the call to\n\tcommit_one_edge_insertion.\n\nFrom-SVN: r120157", "tree": {"sha": "9761139edc046ecf3a9a26482b2f01d899c53d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9761139edc046ecf3a9a26482b2f01d899c53d5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ac6615771f57acb38bfd06ce0f6faf20b8ed609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac6615771f57acb38bfd06ce0f6faf20b8ed609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ac6615771f57acb38bfd06ce0f6faf20b8ed609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac6615771f57acb38bfd06ce0f6faf20b8ed609/comments", "author": null, "committer": null, "parents": [{"sha": "6e682d7ef0a60b540cb66389abff249dfe1ab5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e682d7ef0a60b540cb66389abff249dfe1ab5fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e682d7ef0a60b540cb66389abff249dfe1ab5fd"}], "stats": {"total": 81, "additions": 13, "deletions": 68}, "files": [{"sha": "1c10a149495607b39af6351cc8708e2f8ff9b56e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac6615771f57acb38bfd06ce0f6faf20b8ed609/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac6615771f57acb38bfd06ce0f6faf20b8ed609/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ac6615771f57acb38bfd06ce0f6faf20b8ed609", "patch": "@@ -1,3 +1,13 @@\n+2006-12-22  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* basic-block.h: Remove the prototype for\n+\tcommit_edge_insertions_watch_calls.\n+ \t* cfgrtl.c (commit_edge_insertion): Drop the last argument.\n+\tSimplify.\n+\t(commit_edge_insertions_watch_calls): Remove.\n+\t(commit_edge_insertions): Adjust the call to\n+\tcommit_one_edge_insertion.\n+\n 2006-12-22  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-ssa-loop-niter.c (zero_p, nonzero_p): Removed."}, {"sha": "1621230c16eb037d8560e8b65e327b4d83a38a1c", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac6615771f57acb38bfd06ce0f6faf20b8ed609/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac6615771f57acb38bfd06ce0f6faf20b8ed609/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=2ac6615771f57acb38bfd06ce0f6faf20b8ed609", "patch": "@@ -489,7 +489,6 @@ extern void insert_insn_on_edge (rtx, edge);\n basic_block split_edge_and_insert (edge, rtx);\n \n extern void commit_edge_insertions (void);\n-extern void commit_edge_insertions_watch_calls (void);\n \n extern void remove_fake_edges (void);\n extern void remove_fake_exit_edges (void);"}, {"sha": "bb70bdf56f360f9b56df72b9589679a45471e4cf", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 3, "deletions": 67, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac6615771f57acb38bfd06ce0f6faf20b8ed609/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac6615771f57acb38bfd06ce0f6faf20b8ed609/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=2ac6615771f57acb38bfd06ce0f6faf20b8ed609", "patch": "@@ -63,7 +63,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n static int can_delete_note_p (rtx);\n static int can_delete_label_p (rtx);\n-static void commit_one_edge_insertion (edge, int);\n+static void commit_one_edge_insertion (edge);\n static basic_block rtl_split_edge (edge);\n static bool rtl_move_block_after (basic_block, basic_block);\n static int rtl_verify_flow_info (void);\n@@ -1337,7 +1337,7 @@ insert_insn_on_edge (rtx pattern, edge e)\n /* Update the CFG for the instructions queued on edge E.  */\n \n static void\n-commit_one_edge_insertion (edge e, int watch_calls)\n+commit_one_edge_insertion (edge e)\n {\n   rtx before = NULL_RTX, after = NULL_RTX, insns, tmp, last;\n   basic_block bb = NULL;\n@@ -1346,25 +1346,6 @@ commit_one_edge_insertion (edge e, int watch_calls)\n   insns = e->insns.r;\n   e->insns.r = NULL_RTX;\n \n-  /* Special case -- avoid inserting code between call and storing\n-     its return value.  */\n-  if (watch_calls && (e->flags & EDGE_FALLTHRU)\n-      && single_pred_p (e->dest)\n-      && e->src != ENTRY_BLOCK_PTR\n-      && CALL_P (BB_END (e->src)))\n-    {\n-      rtx next = next_nonnote_insn (BB_END (e->src));\n-\n-      after = BB_HEAD (e->dest);\n-      /* The first insn after the call may be a stack pop, skip it.  */\n-      while (next\n-\t     && keep_with_call_p (next))\n-\t{\n-\t  after = next;\n-\t  next = next_nonnote_insn (next);\n-\t}\n-      bb = e->dest;\n-    }\n   if (!before && !after)\n     {\n       /* Figure out where to put these things.  If the destination has\n@@ -1503,7 +1484,7 @@ commit_edge_insertions (void)\n \tif (e->insns.r)\n \t  {\n \t    changed = true;\n-\t    commit_one_edge_insertion (e, false);\n+\t    commit_one_edge_insertion (e);\n \t  }\n     }\n \n@@ -1532,51 +1513,6 @@ commit_edge_insertions (void)\n   sbitmap_free (blocks);\n }\n \f\n-/* Update the CFG for all queued instructions, taking special care of inserting\n-   code on edges between call and storing its return value.  */\n-\n-void\n-commit_edge_insertions_watch_calls (void)\n-{\n-  basic_block bb;\n-  sbitmap blocks;\n-  bool changed = false;\n-\n-#ifdef ENABLE_CHECKING\n-  verify_flow_info ();\n-#endif\n-\n-  FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, EXIT_BLOCK_PTR, next_bb)\n-    {\n-      edge e;\n-      edge_iterator ei;\n-\n-      FOR_EACH_EDGE (e, ei, bb->succs)\n-\tif (e->insns.r)\n-\t  {\n-\t    changed = true;\n-\t    commit_one_edge_insertion (e, true);\n-\t  }\n-    }\n-\n-  if (!changed)\n-    return;\n-\n-  blocks = sbitmap_alloc (last_basic_block);\n-  sbitmap_zero (blocks);\n-  FOR_EACH_BB (bb)\n-    if (bb->aux)\n-      {\n-\tSET_BIT (blocks, bb->index);\n-\t/* Check for forgotten bb->aux values before commit_edge_insertions\n-\t   call.  */\n-\tgcc_assert (bb->aux == &bb->aux);\n-\tbb->aux = NULL;\n-      }\n-  find_many_sub_basic_blocks (blocks);\n-  sbitmap_free (blocks);\n-}\n-\f\n /* Print out RTL-specific basic block information (live information\n    at start and end).  */\n "}]}