{"sha": "90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBjMWQ3NWE5YmI4ZTI1YWE5NjNkYTAyZjljOTFmNWY0MDE0M2JlMQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2005-02-23T05:08:32Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-02-23T05:08:32Z"}, "message": "re PR tree-optimization/20100 (LIM is pulling out a pure function even though there is something which can modify global memory)\n\n\n\tPR tree-optimization/20100\n\tPR tree-optimization/20115\n\t* tree-optimize.c (init_tree_optimization_passes): Remove\n\tpass_maybe_create_global_var.\n\t* tree-pass.h (pass_maybe_create_global_var): Remove.\n\t* tree-ssa-alias.c (aliases_computed_p): Declare.\n\t(struct alias_info): Add field NUM_PURE_CONST_CALLS_FOUND.\n\t(count_calls_and_maybe_create_global_var): Remove.\n\t(pass_maybe_create_global_var): Remove.\n\t(init_alias_info): Do not declare aliases_computed_p.\n\t(maybe_create_global_var): If the function contains no\n\tcall-clobbered variables and a mix of pure/const and regular\n\tfunction calls, create .GLOBAL_VAR.\n\tMark all call-clobbered variables for renaming.\n\t(merge_pointed_to_info): Update comment.\n\t(add_pointed_to_var): Likewise.\n\t(is_escape_site): Likewise.\n\tAccept struct alias_info * instead of size_t *.\n\tUpdate all users.\n\tUpdate AI->NUM_CALLS_FOUND and AI->NUM_PURE_CONST_CALLS_FOUND\n\tas necessary.\n\t* tree-ssa-operands.c (get_call_expr_operands): If\n\tALIASES_COMPUTED_P is false, do not add call-clobbering\n\toperands.\n\t* tree-ssa.c (init_tree_ssa): Set ALIASES_COMPUTED_P to false.\n\t(delete_tree_ssa): Likewise.\n\ntestsuite/ChangeLog\n\n\tPR tree-optimization/20100\n\tPR tree-optimization/20115\n\t* gcc.dg/pr20115.c: New test.\n\t* gcc.dg/pr20115-1.c: New test.\n\t* gcc.dg/pr20100.c: New test.\n\t* gcc.dg/tree-ssa/20040517-1.c: Expect virtual operands for\n\tcall-clobbered variables after alias1.\n\nFrom-SVN: r95437", "tree": {"sha": "5ae2c9a5dd60102e5ee665ad3f8aaaba2450f32e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ae2c9a5dd60102e5ee665ad3f8aaaba2450f32e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/comments", "author": null, "committer": null, "parents": [{"sha": "397763d2af80316f05484a8668c3d0dddf2c9811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397763d2af80316f05484a8668c3d0dddf2c9811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/397763d2af80316f05484a8668c3d0dddf2c9811"}], "stats": {"total": 281, "additions": 193, "deletions": 88}, "files": [{"sha": "ee37f3eeda89a47613445728c71c69fe1198a6ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "patch": "@@ -1,3 +1,32 @@\n+2005-02-22  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/20100\n+\tPR tree-optimization/20115\n+\t* tree-optimize.c (init_tree_optimization_passes): Remove\n+\tpass_maybe_create_global_var.\n+\t* tree-pass.h (pass_maybe_create_global_var): Remove.\n+\t* tree-ssa-alias.c (aliases_computed_p): Declare.\n+\t(struct alias_info): Add field NUM_PURE_CONST_CALLS_FOUND.\n+\t(count_calls_and_maybe_create_global_var): Remove.\n+\t(pass_maybe_create_global_var): Remove.\n+\t(init_alias_info): Do not declare aliases_computed_p.\n+\t(maybe_create_global_var): If the function contains no\n+\tcall-clobbered variables and a mix of pure/const and regular\n+\tfunction calls, create .GLOBAL_VAR.\n+\tMark all call-clobbered variables for renaming.\n+\t(merge_pointed_to_info): Update comment.\n+\t(add_pointed_to_var): Likewise.\n+\t(is_escape_site): Likewise.\n+\tAccept struct alias_info * instead of size_t *.\n+\tUpdate all users.\n+\tUpdate AI->NUM_CALLS_FOUND and AI->NUM_PURE_CONST_CALLS_FOUND\n+\tas necessary.\n+\t* tree-ssa-operands.c (get_call_expr_operands): If\n+\tALIASES_COMPUTED_P is false, do not add call-clobbering\n+\toperands.\n+\t* tree-ssa.c (init_tree_ssa): Set ALIASES_COMPUTED_P to false.\n+\t(delete_tree_ssa): Likewise.\n+\n 2005-02-22  James E Wilson  <wilson@specifixinc.com>\n \n \t* toplev.c (backend_init): Don't call init_adjust_machine_modes here."}, {"sha": "530d9a35e67d863b9a5af7f96385ee7ab40cc817", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "patch": "@@ -1,3 +1,13 @@\n+2005-02-22  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/20100\n+\tPR tree-optimization/20115\n+\t* gcc.dg/pr20115.c: New test.\n+\t* gcc.dg/pr20115-1.c: New test.\n+\t* gcc.dg/pr20100.c: New test.\n+\t* gcc.dg/tree-ssa/20040517-1.c: Expect virtual operands for\n+\tcall-clobbered variables after alias1.\n+\n 2005-02-22  Bud Davis  <bdavis@gfortran.org>\n \n \t* gfortran.dg/list_read_4.f90: new test."}, {"sha": "988fbda6429db437a2eb03cc2a78a9e76ca3985d", "filename": "gcc/testsuite/gcc.dg/pr20100.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20100.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20100.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20100.c?ref=90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+int func_pure (void) __attribute__ ((pure));\n+void func_other (int);\n+int global_int;\n+void abort ();\n+void func_other(int a)\n+{\n+  if (a != global_int)\n+   abort ();\n+  global_int++;\n+}\n+\n+int func_pure(void)\n+{\n+  return global_int;\n+}\n+\n+int\n+func_loop (int arg)\n+{\n+ // global_int ++;\n+  while (arg--)\n+      func_other (func_pure ());\n+}\n+\n+int main(void)\n+{\n+  func_loop(10);\n+  return 0;\n+}"}, {"sha": "d1c4066729fc9fb0a17b2963bb28cc6d077e1dfa", "filename": "gcc/testsuite/gcc.dg/pr20115-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20115-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20115-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20115-1.c?ref=90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dom1\" } */\n+\n+extern int foo (void) __attribute__((pure));\n+\n+int bar()\n+{\n+  int a = foo ();\n+  a += foo ();\n+  return a;\n+}\n+\n+/* Check that we only have one call to foo.  */\n+/* { dg-final { scan-tree-dump-times \"foo\" 1 \"dom1\" } } */"}, {"sha": "cea4b486854f239eff9bcdbbf17ec6e49997df89", "filename": "gcc/testsuite/gcc.dg/pr20115.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20115.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20115.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20115.c?ref=90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+int func_pure (void);\n+void func_other (int);\n+int global_int;\n+int func_pure (void) { return global_int; }\n+void func_other (int a)\n+{\n+  global_int = a + 1;\n+}\n+int f(void)\n+{\n+  int a;\n+  a = func_pure();\n+  func_other (a);\n+  a = func_pure (); // We were removing this function call\n+  return a;\n+}\n+void abort (void);\n+\n+int main(void)\n+{\n+  global_int = 10;\n+  if (f() != 11)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "4b09b536d133a4ad453d8da3af7b04e9ffd6b031", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040517-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c?ref=90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-ssa-vops\" } */\n+/* { dg-options \"-O1 -fdump-tree-alias1-vops\" } */\n extern void abort (void);\n int a; \n  \n@@ -17,5 +17,4 @@ void bar (void)\n    malloc functions may clobber global memory.  Only the function result\n    does not alias any other pointer.\n    Hence, we must have a VDEF for a before and after the call to foo().  */\n-/* { dg-final { scan-tree-dump-times \"V_MAY_DEF\" 1 \"ssa\"} } */\n-\n+/* { dg-final { scan-tree-dump-times \"V_MAY_DEF\" 1 \"alias1\"} } */"}, {"sha": "f4ad9669ef43c08e9dab125e23ceebd93316997d", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "patch": "@@ -347,7 +347,6 @@ init_tree_optimization_passes (void)\n \n   p = &pass_all_optimizations.sub;\n   NEXT_PASS (pass_referenced_vars);\n-  NEXT_PASS (pass_maybe_create_global_var);\n   NEXT_PASS (pass_build_ssa);\n   NEXT_PASS (pass_may_alias);\n   NEXT_PASS (pass_rename_ssa_copies);"}, {"sha": "bf818091264b345138a9df2ce97e11284935fadd", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "patch": "@@ -166,6 +166,5 @@ extern struct tree_opt_pass pass_expand;\n extern struct tree_opt_pass pass_rest_of_compilation;\n extern struct tree_opt_pass pass_fre;\n extern struct tree_opt_pass pass_linear_transform;\n-extern struct tree_opt_pass pass_maybe_create_global_var;\n \n #endif /* GCC_TREE_PASS_H */"}, {"sha": "f6cdf99baf63b5069ab66d1372b0f8d75a65f473", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 65, "deletions": 82, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "patch": "@@ -43,6 +43,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"convert.h\"\n #include \"params.h\"\n \n+/* 'true' after aliases have been computed (see compute_may_aliases).  */\n+bool aliases_computed_p;\n \n /* Structure to map a variable to its alias set and keep track of the\n    virtual operands that will be needed to represent it.  */\n@@ -94,6 +96,9 @@ struct alias_info\n   /* Number of function calls found in the program.  */\n   size_t num_calls_found;\n \n+  /* Number of const/pure function calls found in the program.  */\n+  size_t num_pure_const_calls_found;\n+\n   /* Array of counters to keep track of how many times each pointer has\n      been dereferenced in the program.  This is used by the alias grouping\n      heuristic in compute_flow_insensitive_aliasing.  */\n@@ -145,7 +150,7 @@ static void compute_points_to_and_addr_escape (struct alias_info *);\n static void compute_flow_sensitive_aliasing (struct alias_info *);\n static void setup_pointers_and_addressables (struct alias_info *);\n static bool collect_points_to_info_r (tree, tree, void *);\n-static bool is_escape_site (tree, size_t *);\n+static bool is_escape_site (tree, struct alias_info *);\n static void add_pointed_to_var (struct alias_info *, tree, tree);\n static void create_global_var (void);\n static void collect_points_to_info_for (struct alias_info *, tree);\n@@ -465,70 +470,12 @@ count_uses_and_derefs (tree ptr, tree stmt, unsigned *num_uses_p,\n }\n \n \n-/* Count the number of calls in the function and conditionally\n-   create GLOBAL_VAR.   This is performed before translation\n-   into SSA (and thus before alias analysis) to avoid compile time\n-   and memory utilization explosions in functions with many\n-   of calls and call clobbered variables.  */\n-\n-static void\n-count_calls_and_maybe_create_global_var (void)\n-{\n-  struct alias_info ai;\n-  basic_block bb;\n-  bool temp;\n-\n-  memset (&ai, 0, sizeof (struct alias_info));\n-\n-  /* First count the number of calls in the IL.  */\n-  FOR_EACH_BB (bb)\n-    {\n-      block_stmt_iterator si;\n-\n-      for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n-        {\n-          tree stmt = bsi_stmt (si);\n-\n-\t  if (get_call_expr_in (stmt) != NULL_TREE)\n-\t    ai.num_calls_found++;\n-\t}\n-    }\n-\n-  /* If there are no call clobbered variables, then maybe_create_global_var\n-     will always create a GLOBAL_VAR.  At this point we do not want that\n-     behavior.  So we turn on one bit in CALL_CLOBBERED_VARs, call\n-     maybe_create_global_var, then reset the bit to its original state.  */\n-  temp = bitmap_bit_p (call_clobbered_vars, 0);\n-  bitmap_set_bit (call_clobbered_vars, 0);\n-  maybe_create_global_var (&ai);\n-  if (!temp)\n-    bitmap_clear_bit (call_clobbered_vars, 0);\n-}\n-\n-struct tree_opt_pass pass_maybe_create_global_var = \n-{\n-  \"maybe_create_global_var\",\t\t/* name */\n-  NULL,\t\t\t\t\t/* gate */\n-  count_calls_and_maybe_create_global_var, /* execute */\n-  NULL,\t\t\t\t\t/* sub */\n-  NULL,\t\t\t\t\t/* next */\n-  0,\t\t\t\t\t/* static_pass_number */\n-  TV_TREE_MAY_ALIAS,\t\t\t/* tv_id */\n-  PROP_cfg,\t\t\t\t/* properties_required */\n-  0,\t\t\t\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n-};\n-\n /* Initialize the data structures used for alias analysis.  */\n \n static struct alias_info *\n init_alias_info (void)\n {\n   struct alias_info *ai;\n-  static bool aliases_computed_p = false;\n \n   ai = xcalloc (1, sizeof (struct alias_info));\n   ai->ssa_names_visited = sbitmap_alloc (num_ssa_names);\n@@ -695,7 +642,7 @@ compute_points_to_and_addr_escape (struct alias_info *ai)\n \t{\n \t  bitmap addr_taken;\n \t  tree stmt = bsi_stmt (si);\n-\t  bool stmt_escapes_p = is_escape_site (stmt, &ai->num_calls_found);\n+\t  bool stmt_escapes_p = is_escape_site (stmt, ai);\n \t  bitmap_iterator bi;\n \n \t  /* Mark all the variables whose address are taken by the\n@@ -1586,22 +1533,56 @@ maybe_create_global_var (struct alias_info *ai)\n \t  n_clobbered++;\n \t}\n \n-      if (ai->num_calls_found * n_clobbered >= (size_t) GLOBAL_VAR_THRESHOLD)\n+      /* If the number of virtual operands that would be needed to\n+\t model all the call-clobbered variables is larger than\n+\t GLOBAL_VAR_THRESHOLD, create .GLOBAL_VAR.\n+\n+\t Also create .GLOBAL_VAR if there are no call-clobbered\n+\t variables and the program contains a mixture of pure/const\n+\t and regular function calls.  This is to avoid the problem\n+\t described in PR 20115:\n+\n+\t      int X;\n+\t      int func_pure (void) { return X; }\n+\t      int func_non_pure (int a) { X += a; }\n+\t      int foo ()\n+\t      {\n+\t \tint a = func_pure ();\n+\t\tfunc_non_pure (a);\n+\t\ta = func_pure ();\n+\t\treturn a;\n+\t      }\n+\n+\t Since foo() has no call-clobbered variables, there is\n+\t no relationship between the calls to func_pure and\n+\t func_non_pure.  Since func_pure has no side-effects, value\n+\t numbering optimizations elide the second call to func_pure.\n+\t So, if we have some pure/const and some regular calls in the\n+\t program we create .GLOBAL_VAR to avoid missing these\n+\t relations.  */\n+      if (ai->num_calls_found * n_clobbered >= (size_t) GLOBAL_VAR_THRESHOLD\n+\t  || (n_clobbered == 0\n+\t      && ai->num_calls_found > 0\n+\t      && ai->num_pure_const_calls_found > 0\n+\t      && ai->num_calls_found > ai->num_pure_const_calls_found))\n \tcreate_global_var ();\n     }\n \n-  /* If the function has calls to clobbering functions and .GLOBAL_VAR has\n-     been created, make it an alias for all call-clobbered variables.  */\n-  if (global_var)\n-    EXECUTE_IF_SET_IN_BITMAP (call_clobbered_vars, 0, i, bi)\n-      {\n-\ttree var = referenced_var (i);\n-\tif (var != global_var)\n-\t  {\n-\t     add_may_alias (var, global_var);\n-\t     bitmap_set_bit (vars_to_rename, var_ann (var)->uid);\n-\t  }\n-      }\n+  /* Mark all call-clobbered symbols for renaming.  Since the initial\n+     rewrite into SSA ignored all call sites, we may need to rename\n+     .GLOBAL_VAR and the call-clobbered variables.  */\n+  EXECUTE_IF_SET_IN_BITMAP (call_clobbered_vars, 0, i, bi)\n+    {\n+      tree var = referenced_var (i);\n+\n+      /* If the function has calls to clobbering functions and\n+\t .GLOBAL_VAR has been created, make it an alias for all\n+\t call-clobbered variables.  */\n+      if (global_var && var != global_var)\n+\tadd_may_alias (var, global_var);\n+      \n+      bitmap_set_bit (vars_to_rename, var_ann (var)->uid);\n+    }\n }\n \n \n@@ -1762,8 +1743,8 @@ set_pt_malloc (tree ptr)\n \n \n /* Given two different pointers DEST and ORIG.  Merge the points-to\n-   information in ORIG into DEST.  AI is as in\n-   collect_points_to_info.  */\n+   information in ORIG into DEST.  AI contains all the alias\n+   information collected up to this point.  */\n \n static void\n merge_pointed_to_info (struct alias_info *ai, tree dest, tree orig)\n@@ -1908,7 +1889,7 @@ add_pointed_to_expr (struct alias_info *ai, tree ptr, tree expr)\n \n /* If VALUE is of the form &DECL, add DECL to the set of variables\n    pointed-to by PTR.  Otherwise, add VALUE as a pointed-to expression by\n-   PTR.  AI is as in collect_points_to_info.  */\n+   PTR.  AI points to the collected alias information.  */\n \n static void\n add_pointed_to_var (struct alias_info *ai, tree ptr, tree value)\n@@ -2040,16 +2021,18 @@ collect_points_to_info_r (tree var, tree stmt, void *data)\n \t3- STMT is an assignment to a non-local variable, or\n \t4- STMT is a return statement.\n \n-   If NUM_CALLS_P is not NULL, the counter is incremented if STMT contains\n-   a function call.  */\n+   AI points to the alias information collected so far.  */\n \n static bool\n-is_escape_site (tree stmt, size_t *num_calls_p)\n+is_escape_site (tree stmt, struct alias_info *ai)\n {\n-  if (get_call_expr_in (stmt) != NULL_TREE)\n+  tree call = get_call_expr_in (stmt);\n+  if (call != NULL_TREE)\n     {\n-      if (num_calls_p)\n-\t(*num_calls_p)++;\n+      ai->num_calls_found++;\n+\n+      if (!TREE_SIDE_EFFECTS (call))\n+\tai->num_pure_const_calls_found++;\n \n       return true;\n     }"}, {"sha": "3b5de9bfaac764676431f5d9e85344c8fb2a83fd", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "patch": "@@ -1460,7 +1460,17 @@ get_call_expr_operands (tree stmt, tree expr)\n   tree op;\n   int call_flags = call_expr_flags (expr);\n \n-  if (!bitmap_empty_p (call_clobbered_vars))\n+  /* If aliases have been computed already, add V_MAY_DEF or V_USE\n+     operands for all the symbols that have been found to be\n+     call-clobbered.\n+     \n+     Note that if aliases have not been computed, the global effects\n+     of calls will not be included in the SSA web. This is fine\n+     because no optimizer should run before aliases have been\n+     computed.  By not bothering with virtual operands for CALL_EXPRs\n+     we avoid adding superfluous virtual operands, which can be a\n+     significant compile time sink (See PR 15855).  */\n+  if (aliases_computed_p && !bitmap_empty_p (call_clobbered_vars))\n     {\n       /* A 'pure' or a 'const' functions never call clobber anything. \n \t A 'noreturn' function might, but since we don't return anyway "}, {"sha": "b39c260c273a5e3374007af3f633e1b91c8b5733", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c1d75a9bb8e25aa963da02f9c91f5f40143be1/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=90c1d75a9bb8e25aa963da02f9c91f5f40143be1", "patch": "@@ -723,6 +723,7 @@ init_tree_ssa (void)\n   init_ssanames ();\n   init_phinodes ();\n   global_var = NULL_TREE;\n+  aliases_computed_p = false;\n }\n \n \n@@ -767,6 +768,7 @@ delete_tree_ssa (void)\n   BITMAP_FREE (addressable_vars);\n   addressable_vars = NULL;\n   modified_noreturn_calls = NULL;\n+  aliases_computed_p = false;\n }\n \n "}]}