{"sha": "fc2ae4313b4a048f2cc8659065c963429012b3e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyYWU0MzEzYjRhMDQ4ZjJjYzg2NTkwNjVjOTYzNDI5MDEyYjNlNw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-04-23T20:06:56Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-04-23T20:06:56Z"}, "message": "linkage.m4 (GLIBCXX_CHECK_MATH_SUPPORT): Check for libmx also.\n\n2004-04-23  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * linkage.m4 (GLIBCXX_CHECK_MATH_SUPPORT): Check for libmx also.\n        * configure: Regenerate.\n\nFrom-SVN: r81103", "tree": {"sha": "7f419a496f18923f419af357181215de348ddc5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f419a496f18923f419af357181215de348ddc5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc2ae4313b4a048f2cc8659065c963429012b3e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2ae4313b4a048f2cc8659065c963429012b3e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc2ae4313b4a048f2cc8659065c963429012b3e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2ae4313b4a048f2cc8659065c963429012b3e7/comments", "author": null, "committer": null, "parents": [{"sha": "9b2d02a0d2850daeba066f970c95a82cc618a248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2d02a0d2850daeba066f970c95a82cc618a248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2d02a0d2850daeba066f970c95a82cc618a248"}], "stats": {"total": 160, "additions": 160, "deletions": 0}, "files": [{"sha": "d89141c2aaa79444a65535edd50f50660b9539a0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2ae4313b4a048f2cc8659065c963429012b3e7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2ae4313b4a048f2cc8659065c963429012b3e7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fc2ae4313b4a048f2cc8659065c963429012b3e7", "patch": "@@ -1,3 +1,8 @@\n+2004-04-23  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* linkage.m4 (GLIBCXX_CHECK_MATH_SUPPORT): Check for libmx also.\n+\t* configure: Regenerate.\n+\n 2004-04-23  Daniel Jacobowitz  <drow@mvista.com>\n \n \tPR libstdc++/15047, libstdc++/11610"}, {"sha": "7db2d2edd534215dbb4853ec61d678a3aa9aaf04", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2ae4313b4a048f2cc8659065c963429012b3e7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2ae4313b4a048f2cc8659065c963429012b3e7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=fc2ae4313b4a048f2cc8659065c963429012b3e7", "patch": "@@ -8447,6 +8447,81 @@ fi\n   ac_save_LIBS=\"$LIBS\"\n   LIBS=\"$LIBS $libm\"\n \n+    echo \"$as_me:$LINENO: checking for sqrtf in -lmx\" >&5\n+echo $ECHO_N \"checking for sqrtf in -lmx... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_mx_sqrtf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lmx  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char sqrtf ();\n+int\n+main ()\n+{\n+sqrtf ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_mx_sqrtf=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_mx_sqrtf=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_mx_sqrtf\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_mx_sqrtf\" >&6\n+if test $ac_cv_lib_mx_sqrtf = yes; then\n+  libmx=\"-lmx\"\n+fi\n+\n+    LIBS=\"$LIBS $libmx\"\n+\n \n \n   echo \"$as_me:$LINENO: checking for isinf declaration\" >&5\n@@ -31598,6 +31673,81 @@ fi\n   ac_save_LIBS=\"$LIBS\"\n   LIBS=\"$LIBS $libm\"\n \n+    echo \"$as_me:$LINENO: checking for sqrtf in -lmx\" >&5\n+echo $ECHO_N \"checking for sqrtf in -lmx... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_mx_sqrtf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lmx  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char sqrtf ();\n+int\n+main ()\n+{\n+sqrtf ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_mx_sqrtf=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_mx_sqrtf=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_mx_sqrtf\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_mx_sqrtf\" >&6\n+if test $ac_cv_lib_mx_sqrtf = yes; then\n+  libmx=\"-lmx\"\n+fi\n+\n+    LIBS=\"$LIBS $libmx\"\n+\n \n \n   echo \"$as_me:$LINENO: checking for isinf declaration\" >&5"}, {"sha": "87c64cb9b57ccf57464ffbdcf90899bb8ebf21d2", "filename": "libstdc++-v3/linkage.m4", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2ae4313b4a048f2cc8659065c963429012b3e7/libstdc%2B%2B-v3%2Flinkage.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2ae4313b4a048f2cc8659065c963429012b3e7/libstdc%2B%2B-v3%2Flinkage.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flinkage.m4?ref=fc2ae4313b4a048f2cc8659065c963429012b3e7", "patch": "@@ -404,6 +404,11 @@ AC_DEFUN([GLIBCXX_CHECK_MATH_SUPPORT], [\n   ac_save_LIBS=\"$LIBS\"\n   LIBS=\"$LIBS $libm\"\n \n+  dnl Check libmx\n+  AC_CHECK_LIB(mx, sqrtf, libmx=\"-lmx\")\n+  dnl ac_save_LIBS=\"$LIBS\"\n+  LIBS=\"$LIBS $libmx\"\n+\n   dnl Check to see if certain C math functions exist.\n   GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isinf)\n   GLIBCXX_CHECK_MATH_DECL_AND_LINKAGE_1(isnan)"}]}