{"sha": "a456b43276bbf9bd23b670ac4a334d1c926090b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ1NmI0MzI3NmJiZjliZDIzYjY3MGFjNGEzMzRkMWM5MjYwOTBiMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-16T14:45:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-16T14:45:15Z"}, "message": "builtins.c (expand_movstr): Update a call to fold_builtin_strcpy.\n\n\t* builtins.c (expand_movstr): Update a call to\n\tfold_builtin_strcpy.\n\t(expand_builtin_strncpy): Update a call to\n\tfold_builtin_strncpy.\n\t(fold_builtin_strcpy, fold_builtin_strncpy): Take decomosed\n\targuments of CALL_EXPR.\n\t(fold_builtin_1): Update calls to fold_builtin_strcpy and\n\tfold_builtin_strncpy.\n\t* tree-ssa-ccp.c (ccp_fold_builtin): Likewise.\n\t* tree.h: Update the prototypes of fold_builtin_strcpy and\n\tfold_builtin_strncpy.\n\nFrom-SVN: r96555", "tree": {"sha": "b1880a3e893b0506033714b4206841e710dcc5ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1880a3e893b0506033714b4206841e710dcc5ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a456b43276bbf9bd23b670ac4a334d1c926090b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a456b43276bbf9bd23b670ac4a334d1c926090b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a456b43276bbf9bd23b670ac4a334d1c926090b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a456b43276bbf9bd23b670ac4a334d1c926090b0/comments", "author": null, "committer": null, "parents": [{"sha": "00c714edd62e0bb54959ecde206eba8722d6735a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c714edd62e0bb54959ecde206eba8722d6735a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00c714edd62e0bb54959ecde206eba8722d6735a"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "36a5e8de52a257c347680aa40527f4667b79d602", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a456b43276bbf9bd23b670ac4a334d1c926090b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a456b43276bbf9bd23b670ac4a334d1c926090b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a456b43276bbf9bd23b670ac4a334d1c926090b0", "patch": "@@ -1,3 +1,17 @@\n+2005-03-16  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* builtins.c (expand_movstr): Update a call to\n+\tfold_builtin_strcpy.\n+\t(expand_builtin_strncpy): Update a call to\n+\tfold_builtin_strncpy.\n+\t(fold_builtin_strcpy, fold_builtin_strncpy): Take decomosed\n+\targuments of CALL_EXPR.\n+\t(fold_builtin_1): Update calls to fold_builtin_strcpy and\n+\tfold_builtin_strncpy.\n+\t* tree-ssa-ccp.c (ccp_fold_builtin): Likewise.\n+\t* tree.h: Update the prototypes of fold_builtin_strcpy and\n+\tfold_builtin_strncpy.\n+\n 2005-03-16  Steven Bosscher  <stevenb@suse.de>\n             Dorit Naishlos  <dorit@il.ibm.com>\n "}, {"sha": "43f16fc04ebe623036ba646a9dbf3b10c576ec26", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a456b43276bbf9bd23b670ac4a334d1c926090b0/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a456b43276bbf9bd23b670ac4a334d1c926090b0/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a456b43276bbf9bd23b670ac4a334d1c926090b0", "patch": "@@ -2942,10 +2942,11 @@ expand_movstr (tree dest, tree src, rtx target, int endp)\n static rtx\n expand_builtin_strcpy (tree exp, rtx target, enum machine_mode mode)\n {\n+  tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n   if (validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     {\n-      tree result = fold_builtin_strcpy (exp, 0);\n+      tree result = fold_builtin_strcpy (fndecl, arglist, 0);\n       if (result)\n \treturn expand_expr (result, target, mode, EXPAND_NORMAL);\n \n@@ -3062,13 +3063,14 @@ builtin_strncpy_read_str (void *data, HOST_WIDE_INT offset,\n static rtx\n expand_builtin_strncpy (tree exp, rtx target, enum machine_mode mode)\n {\n+  tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n   if (validate_arglist (arglist,\n \t\t\tPOINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     {\n       tree slen = c_strlen (TREE_VALUE (TREE_CHAIN (arglist)), 1);\n       tree len = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-      tree result = fold_builtin_strncpy (exp, slen);\n+      tree result = fold_builtin_strncpy (fndecl, arglist, slen);\n       \n       if (result)\n \treturn expand_expr (result, target, mode, EXPAND_NORMAL);\n@@ -7254,10 +7256,8 @@ fold_builtin_memmove (tree arglist, tree type)\n    simplification can be made.  */\n \n tree\n-fold_builtin_strcpy (tree exp, tree len)\n+fold_builtin_strcpy (tree fndecl, tree arglist, tree len)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree dest, src, fn;\n \n   if (!validate_arglist (arglist,\n@@ -7298,10 +7298,8 @@ fold_builtin_strcpy (tree exp, tree len)\n    can be made.  */\n \n tree\n-fold_builtin_strncpy (tree exp, tree slen)\n+fold_builtin_strncpy (tree fndecl, tree arglist, tree slen)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree dest, src, len, fn;\n \n   if (!validate_arglist (arglist,\n@@ -8003,10 +8001,10 @@ fold_builtin_1 (tree exp, bool ignore)\n       return fold_builtin_strrchr (arglist, type);\n \n     case BUILT_IN_STRCPY:\n-      return fold_builtin_strcpy (exp, NULL_TREE);\n+      return fold_builtin_strcpy (fndecl, arglist, NULL_TREE);\n \n     case BUILT_IN_STRNCPY:\n-      return fold_builtin_strncpy (exp, NULL_TREE);\n+      return fold_builtin_strncpy (fndecl, arglist, NULL_TREE);\n \n     case BUILT_IN_STRCMP:\n       return fold_builtin_strcmp (arglist);"}, {"sha": "a14cf7f366485f4b22c5b117e1e8a39164df27cb", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a456b43276bbf9bd23b670ac4a334d1c926090b0/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a456b43276bbf9bd23b670ac4a334d1c926090b0/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=a456b43276bbf9bd23b670ac4a334d1c926090b0", "patch": "@@ -1999,12 +1999,20 @@ ccp_fold_builtin (tree stmt, tree fn)\n \n     case BUILT_IN_STRCPY:\n       if (strlen_val[1] && is_gimple_val (strlen_val[1]))\n-        result = fold_builtin_strcpy (fn, strlen_val[1]);\n+\t{\n+\t  tree fndecl = get_callee_fndecl (fn);\n+\t  tree arglist = TREE_OPERAND (fn, 1);\n+\t  result = fold_builtin_strcpy (fndecl, arglist, strlen_val[1]);\n+\t}\n       break;\n \n     case BUILT_IN_STRNCPY:\n       if (strlen_val[1] && is_gimple_val (strlen_val[1]))\n-\tresult = fold_builtin_strncpy (fn, strlen_val[1]);\n+\t{\n+\t  tree fndecl = get_callee_fndecl (fn);\n+\t  tree arglist = TREE_OPERAND (fn, 1);\n+\t  result = fold_builtin_strncpy (fndecl, arglist, strlen_val[1]);\n+\t}\n       break;\n \n     case BUILT_IN_FPUTS:"}, {"sha": "1fd1ab6e44b6759d5ca6c29ee33ae24b5e0625b0", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a456b43276bbf9bd23b670ac4a334d1c926090b0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a456b43276bbf9bd23b670ac4a334d1c926090b0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a456b43276bbf9bd23b670ac4a334d1c926090b0", "patch": "@@ -3565,8 +3565,8 @@ extern bool ptr_difference_const (tree, tree, HOST_WIDE_INT *);\n /* In builtins.c */\n extern tree fold_builtin (tree, bool);\n extern tree fold_builtin_fputs (tree, bool, bool, tree);\n-extern tree fold_builtin_strcpy (tree, tree);\n-extern tree fold_builtin_strncpy (tree, tree);\n+extern tree fold_builtin_strcpy (tree, tree, tree);\n+extern tree fold_builtin_strncpy (tree, tree, tree);\n extern bool fold_builtin_next_arg (tree);\n extern enum built_in_function builtin_mathfn_code (tree);\n extern tree build_function_call_expr (tree, tree);"}]}