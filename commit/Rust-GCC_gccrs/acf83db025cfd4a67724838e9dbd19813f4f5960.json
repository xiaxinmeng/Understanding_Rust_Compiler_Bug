{"sha": "acf83db025cfd4a67724838e9dbd19813f4f5960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmODNkYjAyNWNmZDRhNjc3MjQ4MzhlOWRiZDE5ODEzZjRmNTk2MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-08-04T01:23:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-08-04T17:21:37Z"}, "message": "compiler: delete lowered constant strings\n\nIf we lower a constant string operation in a Binary_expression,\ndelete the strings.  This is safe because constant strings are always\nnewly allocated.\n\nThis is a hack to use much less memory when compiling the new\ntime/tzdata package, which has a file that contains the sum of over\n13,000 constant strings.  We don't do this for numeric expressions\nbecause that could cause us to delete an Iota_expression.\n\nWe should have a cleaner approach to memory usage some day.\n\nFixes PR go/96450", "tree": {"sha": "12cde63bf9a622dfefb2888799f6c411a960f8ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12cde63bf9a622dfefb2888799f6c411a960f8ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acf83db025cfd4a67724838e9dbd19813f4f5960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf83db025cfd4a67724838e9dbd19813f4f5960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf83db025cfd4a67724838e9dbd19813f4f5960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf83db025cfd4a67724838e9dbd19813f4f5960/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1790d13dc8ffb3b454f2ca5e4a6d6d482f7fa985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1790d13dc8ffb3b454f2ca5e4a6d6d482f7fa985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1790d13dc8ffb3b454f2ca5e4a6d6d482f7fa985"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "c21b6000229fa9592afbb1e73e84ee0e6acba173", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf83db025cfd4a67724838e9dbd19813f4f5960/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf83db025cfd4a67724838e9dbd19813f4f5960/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=acf83db025cfd4a67724838e9dbd19813f4f5960", "patch": "@@ -1,4 +1,4 @@\n-7f0d3834ac40cf3bcbeb9b13926ab5ccb2523537\n+f45afedf90ac9af8f03d7d4515e952cbd724953a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "7e7fb8c7313562f65f6006557063f93a0159799b", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf83db025cfd4a67724838e9dbd19813f4f5960/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf83db025cfd4a67724838e9dbd19813f4f5960/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=acf83db025cfd4a67724838e9dbd19813f4f5960", "patch": "@@ -556,7 +556,10 @@ Expression::get_backend(Translate_context* context)\n {\n   // The child may have marked this expression as having an error.\n   if (this->classification_ == EXPRESSION_ERROR)\n-    return context->backend()->error_expression();\n+    {\n+      go_assert(saw_errors());\n+      return context->backend()->error_expression();\n+    }\n \n   return this->do_get_backend(context);\n }\n@@ -6080,13 +6083,17 @@ Binary_expression::do_lower(Gogo* gogo, Named_object*,\n               Type* result_type = (left->type()->named_type() != NULL\n                                    ? left->type()\n                                    : right->type());\n+\t      delete left;\n+\t      delete right;\n               return Expression::make_string_typed(left_string + right_string,\n                                                    result_type, location);\n             }\n \t  else if (is_comparison)\n \t    {\n \t      int cmp = left_string.compare(right_string);\n \t      bool r = Binary_expression::cmp_to_bool(op, cmp);\n+\t      delete left;\n+\t      delete right;\n \t      return Expression::make_boolean(r, location);\n \t    }\n \t}"}]}