{"sha": "29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjliZDUyYzhlMmZlNWVkZTdkNGNkNWQxZjJmZDhmYzk4ZmU0MWI1Ng==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@sourceware.cygnus.com", "date": "2000-07-17T18:17:33Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2000-07-17T18:17:33Z"}, "message": "acinclude.m4: Import CHECK_GNU_MAKE from autoconf macro archive.\n\n2000-07-17  Phil Edwards  <pme@sourceware.cygnus.com>\n\n\t* acinclude.m4:  Import CHECK_GNU_MAKE from autoconf macro archive.\n\t* configure.in:  Use it.  Also print reminders one time.\n\t* aclocal.m4:  Regenerate.\n\t* configure:  Regenerate.\n\nFrom-SVN: r35097", "tree": {"sha": "da9d0a4cd1f147f087033553b72b45d2fce03a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da9d0a4cd1f147f087033553b72b45d2fce03a3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56/comments", "author": null, "committer": null, "parents": [{"sha": "947851b2c3d2b636bf396f27523dd3e644c4cbff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947851b2c3d2b636bf396f27523dd3e644c4cbff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/947851b2c3d2b636bf396f27523dd3e644c4cbff"}], "stats": {"total": 2168, "additions": 1191, "deletions": 977}, "files": [{"sha": "f342f4713d5e0391e01b0119fc46e625386b6c5c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56", "patch": "@@ -1,3 +1,10 @@\n+2000-07-17  Phil Edwards  <pme@sourceware.cygnus.com>\n+\n+\t* acinclude.m4:  Import CHECK_GNU_MAKE from autoconf macro archive.\n+\t* configure.in:  Use it.  Also print reminders one time.\n+\t* aclocal.m4:  Regenerate.\n+\t* configure:  Regenerate.\n+\n 2000-07-15  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* bits/valarray_array.h (__valarray_get_storage): New function."}, {"sha": "82522689d34e235e24f6c82b67b6fb8f9339bd0c", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56", "patch": "@@ -1453,3 +1453,70 @@ AC_DEFUN(AC_REPLACE_STRINGFUNCS,\n [AC_CHECK_FUNCS([$1], , [LIBSTRINGOBJS=\"$LIBSTRINGOBJS ${ac_func}.lo\"])\n AC_SUBST(LIBSTRINGOBJS)dnl\n ])\n+\n+\n+dnl This macro searches for a GNU version of make.  If a match is found, the\n+dnl makefile variable `ifGNUmake' is set to the empty string, otherwise it is\n+dnl set to \"#\".  This is useful for  including a special features in a Makefile,\n+dnl which cannot be handled by other versions of make.  The variable\n+dnl _cv_gnu_make_command is set to the command to invoke GNU make if it exists,\n+dnl the empty string otherwise.\n+dnl\n+dnl Here is an example of its use:\n+dnl\n+dnl Makefile.in might contain:\n+dnl\n+dnl     # A failsafe way of putting a dependency rule into a makefile\n+dnl     $(DEPEND):\n+dnl             $(CC) -MM $(srcdir)/*.c > $(DEPEND)\n+dnl\n+dnl     @ifGNUmake@ ifeq ($(DEPEND),$(wildcard $(DEPEND)))\n+dnl     @ifGNUmake@ include $(DEPEND)\n+dnl     @ifGNUmake@ endif\n+dnl\n+dnl Then configure.in would normally contain:\n+dnl\n+dnl     CHECK_GNU_MAKE()\n+dnl     AC_OUTPUT(Makefile)\n+dnl\n+dnl Then perhaps to cause gnu make to override any other make, we could do\n+dnl something like this (note that GNU make always looks for GNUmakefile first):\n+dnl\n+dnl     if  ! test x$_cv_gnu_make_command = x ; then\n+dnl             mv Makefile GNUmakefile\n+dnl             echo .DEFAULT: > Makefile ;\n+dnl             echo \\  $_cv_gnu_make_command \\$@ >> Makefile;\n+dnl     fi\n+dnl\n+dnl Then, if any (well almost any) other make is called, and GNU make also\n+dnl exists, then the other make wraps the GNU make.\n+dnl\n+dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n+dnl @version $Id: check_gnu_make.m4,v 1.1 2000/06/15 10:49:36 simons Exp $\n+dnl\n+dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n+dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the\n+dnl #### conditional's subshell (\" --version\" is not a command).\n+dnl #### -pme\n+AC_DEFUN(\n+  GLIBCPP_CHECK_GNU_MAKE, [AC_CACHE_CHECK( for GNU make,_cv_gnu_make_command,\n+          _cv_gnu_make_command='' ;\n+dnl Search all the common names for GNU make\n+          for a in \"${MAKE:-make}\" make gmake gnumake ; do\n+                  if  ( $a --version 2> /dev/null | grep  -q GNU  ) ;  then\n+                          _cv_gnu_make_command=$a ;\n+                          break;\n+                  fi\n+          done ;\n+  ) ;\n+dnl If there was a GNU version, then set @ifGNUmake@ to the empty\n+dnl string, '#' otherwise\n+  if test  \"x$_cv_gnu_make_command\" != \"x\"  ; then\n+          ifGNUmake='' ;\n+  else\n+          ifGNUmake='#' ;\n+  fi\n+  AC_SUBST(ifGNUmake)\n+])\n+\n+"}, {"sha": "e51a0a51d5ac5e70a532d270e8d109c331ca45e5", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56", "patch": "@@ -1466,6 +1466,73 @@ AC_DEFUN(AC_REPLACE_STRINGFUNCS,\n AC_SUBST(LIBSTRINGOBJS)dnl\n ])\n \n+\n+dnl This macro searches for a GNU version of make.  If a match is found, the\n+dnl makefile variable `ifGNUmake' is set to the empty string, otherwise it is\n+dnl set to \"#\".  This is useful for  including a special features in a Makefile,\n+dnl which cannot be handled by other versions of make.  The variable\n+dnl _cv_gnu_make_command is set to the command to invoke GNU make if it exists,\n+dnl the empty string otherwise.\n+dnl\n+dnl Here is an example of its use:\n+dnl\n+dnl Makefile.in might contain:\n+dnl\n+dnl     # A failsafe way of putting a dependency rule into a makefile\n+dnl     $(DEPEND):\n+dnl             $(CC) -MM $(srcdir)/*.c > $(DEPEND)\n+dnl\n+dnl     @ifGNUmake@ ifeq ($(DEPEND),$(wildcard $(DEPEND)))\n+dnl     @ifGNUmake@ include $(DEPEND)\n+dnl     @ifGNUmake@ endif\n+dnl\n+dnl Then configure.in would normally contain:\n+dnl\n+dnl     CHECK_GNU_MAKE()\n+dnl     AC_OUTPUT(Makefile)\n+dnl\n+dnl Then perhaps to cause gnu make to override any other make, we could do\n+dnl something like this (note that GNU make always looks for GNUmakefile first):\n+dnl\n+dnl     if  ! test x$_cv_gnu_make_command = x ; then\n+dnl             mv Makefile GNUmakefile\n+dnl             echo .DEFAULT: > Makefile ;\n+dnl             echo \\  $_cv_gnu_make_command \\$@ >> Makefile;\n+dnl     fi\n+dnl\n+dnl Then, if any (well almost any) other make is called, and GNU make also\n+dnl exists, then the other make wraps the GNU make.\n+dnl\n+dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n+dnl @version $Id: check_gnu_make.m4,v 1.1 2000/06/15 10:49:36 simons Exp $\n+dnl\n+dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n+dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the\n+dnl #### conditional's subshell (\" --version\" is not a command).\n+dnl #### -pme\n+AC_DEFUN(\n+  GLIBCPP_CHECK_GNU_MAKE, [AC_CACHE_CHECK( for GNU make,_cv_gnu_make_command,\n+          _cv_gnu_make_command='' ;\n+dnl Search all the common names for GNU make\n+          for a in \"${MAKE:-make}\" make gmake gnumake ; do\n+                  if  ( $a --version 2> /dev/null | grep  -q GNU  ) ;  then\n+                          _cv_gnu_make_command=$a ;\n+                          break;\n+                  fi\n+          done ;\n+  ) ;\n+dnl If there was a GNU version, then set @ifGNUmake@ to the empty\n+dnl string, '#' otherwise\n+  if test  \"x$_cv_gnu_make_command\" != \"x\"  ; then\n+          ifGNUmake='' ;\n+  else\n+          ifGNUmake='#' ;\n+  fi\n+  AC_SUBST(ifGNUmake)\n+])\n+\n+\n+\n # Do all the work for Automake.  This macro actually does too much --\n # some checks are only needed if your package does certain things.\n # But this isn't really a big deal."}, {"sha": "cfefe9c7c2e525a709e2a9b3de0d132535880b97", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1010, "deletions": 962, "changes": 1972, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56"}, {"sha": "50fae06c362a9775870075913767b94cf0130b4a", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=29bd52c8e2fe5ede7d4cd5d1f2fd8fc98fe41b56", "patch": "@@ -17,6 +17,10 @@ AC_ARG_WITH(cross-host,\n \n GLIBCPP_CONFIGURE(.)\n AC_LIBTOOL_DLOPEN\n+GLIBCPP_CHECK_GNU_MAKE\n+  if test \"x$_cv_gnu_make_command\" = \"x\"; then\n+    AC_MSG_ERROR([GNU Make not found.  Please install it or correct your path.])\n+  fi\n AM_PROG_LIBTOOL\n AM_CONFIG_HEADER(config.h)\n \n@@ -126,21 +130,6 @@ AM_CONDITIONAL(USE_LIBDIR, test -z \"$with_cross_host\")\n AC_LC_MESSAGES\n \n \n-# Sanity checking & User-visible messages.\n-# Checks down here, otherwise they get scrolled off before\n-# the user will notice.\n-if test \"$enable_namespaces\" = \"yes\" && test \"$enable_libgcc_rebuild\" = \"no\"\n-then\n-  AC_MSG_WARN([libgcc.a will not match mangled symbols unless it is rebuilt])\n-fi\n-if test \"$enable_namespaces\" = \"no\" && test \"$enable_libgcc_rebuild\" != \"no\"\n-then\n-  # Other things besides namespaces can make this true as well, but none\n-  # of them are done automatically... yet\n-  AC_MSG_WARN([no point in rebuilding libgcc.a if namespaces aren't used])\n-fi\n-\n-\n if test \"${multilib}\" = \"yes\"; then\n   multilib_arg=\"--enable-multilib\"\n else\n@@ -180,3 +169,39 @@ AC_OUTPUT_COMMANDS([$srcdir/mkc++config $blddir $srcdir])\n \n # Generate bits/std_limits.h and src/limitsMEMBERS.cc\n AC_OUTPUT_COMMANDS([$srcdir/mknumeric_limits $blddir $srcdir $xcompiling])\n+\n+\n+# Sanity checking & User-visible messages.\n+# Checks down here, otherwise they get scrolled off before\n+# the user will notice.\n+if test \"$enable_namespaces\" = \"yes\" && test \"$enable_libgcc_rebuild\" = \"no\"\n+then\n+  AC_MSG_WARN([libgcc.a will not match mangled symbols unless it is rebuilt])\n+fi\n+if test \"$enable_namespaces\" = \"no\" && test \"$enable_libgcc_rebuild\" != \"no\"\n+then\n+  # Other things besides namespaces can make this true as well, but none\n+  # of them are done automatically... yet\n+  AC_MSG_WARN([no point in rebuilding libgcc.a if namespaces aren't used])\n+fi\n+\n+# Trying to get more people to read documentation.  Possibly remove check\n+# and warn all the time.\n+if test ! -f .sanity_warned; then\n+  touch .sanity_warned\n+  # There is no \"informational\" AC_MSG_ macro, so these are going to be\n+  # printed even when --quiet/--silent is given.\n+  echo ''\n+  echo 'Please make certain that you read the installation information here:'\n+  echo \"  faster => ${srcdir}/docs/install.html\"\n+  echo '  slower => <URL:http://sources.redhat.com/libstdc++/install.html>'\n+  echo ''\n+  echo 'and the configuration information here:'\n+  echo \"  faster => ${srcdir}/docs/configopts.html\"\n+  echo '  slower => <URL:http://sources.redhat.com/libstdc++/configopts.html>'\n+  echo ''\n+  echo 'before proceeding with \"make\".'\n+  echo ''\n+fi\n+\n+"}]}