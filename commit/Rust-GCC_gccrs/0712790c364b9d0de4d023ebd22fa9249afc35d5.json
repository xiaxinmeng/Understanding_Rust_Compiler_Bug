{"sha": "0712790c364b9d0de4d023ebd22fa9249afc35d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcxMjc5MGMzNjRiOWQwZGU0ZDAyM2ViZDIyZmE5MjQ5YWZjMzVkNQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-06-06T10:28:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:28:07Z"}, "message": "exp_util.ads, [...] (Expand_Subtype_From_Expr): In Ada2005...\n\n2007-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.ads, exp_util.adb (Expand_Subtype_From_Expr): In Ada2005, an\n\tobject of a limited type can be initialized with a call to a function\n\tthat returns in place. If the limited type has unknown discriminants,\n\tand the underlying type is a constrained composite type, build an actual\n\tsubtype from the function call, as is done for private types.\n\t(Side_Effect_Free): An expression that is the renaming of an object or\n\twhose prefix is the renaming of a object, is not side-effect free\n\tbecause it may be assigned through the renaming and its value must be\n\tcaptured in a temporary.\n\t(Has_Controlled_Coextensions): New routine.\n\t(Expand_Subtype_From_Expr): Do nothing if type is a limited interface,\n\tas is done for other limited types.\n\t(Non_Limited_Designated_Type): new predicate.\n\t(Make_CW_Equivalent_Type): Modified to handle class-wide interface\n\tobjects.\n\tRemove all handling of with_type clauses.\n\n        * par-ch10.adb: Remove all handling of with_type clauses.\n\n\t* lib-load.ads, lib-load.adb (Load_Main_Source): Do not get the\n\tchecksum if the main source could not be parsed.\n\t(Loat_Unit): When processing a child unit, determine properly whether\n\tthe parent unit is a renaming when the parent is itself a child unit.\n\tRemove handling of with_type clauses.\n\n\t* sinfo.ads, sinfo.adb (Is_Static_Coextension): New function.\n\t(Set_Is_Static_Coextension): New procedure.\n\t(Has_Local_Raise): New function\n\t(Set_Has_Local_Raise): New procedure\n\t(Renaming_Exception): New field\n\t(Has_Init_Expression): New flag\n\t(Delay_Finalize_Attach): Remove because flag is obsolete.\n\t(Set_Delay_Finalize_Attach): Remove because flag is obsolete.\n\tRemove all handling of with_type clauses.\n\t(Exception_Junk): Can now be set in N_Block_Statement\n\nFrom-SVN: r125410", "tree": {"sha": "2aac9a39bc29def98b761c1e19d629191da83b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aac9a39bc29def98b761c1e19d629191da83b42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0712790c364b9d0de4d023ebd22fa9249afc35d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0712790c364b9d0de4d023ebd22fa9249afc35d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0712790c364b9d0de4d023ebd22fa9249afc35d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0712790c364b9d0de4d023ebd22fa9249afc35d5/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ed216d057acc16f81871e00f710361e1f38c6ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed216d057acc16f81871e00f710361e1f38c6ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ed216d057acc16f81871e00f710361e1f38c6ec"}], "stats": {"total": 695, "additions": 514, "deletions": 181}, "files": [{"sha": "93798b30eb23e24355674bfb7d8025d7eeb45eab", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 228, "deletions": 64, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=0712790c364b9d0de4d023ebd22fa9249afc35d5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,11 +32,9 @@ with Elists;   use Elists;\n with Errout;   use Errout;\n with Exp_Aggr; use Exp_Aggr;\n with Exp_Ch7;  use Exp_Ch7;\n-with Hostparm; use Hostparm;\n with Inline;   use Inline;\n with Itypes;   use Itypes;\n with Lib;      use Lib;\n-with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n@@ -653,7 +651,7 @@ package body Exp_Util is\n          Expr := Make_Function_Call (Loc,\n            Name => New_Occurrence_Of (Defining_Entity (Fun), Loc));\n \n-         if not In_Init_Proc then\n+         if not In_Init_Proc and then VM_Target = No_VM then\n             Set_Uses_Sec_Stack (Defining_Entity (Fun));\n          end if;\n       end if;\n@@ -1289,11 +1287,35 @@ package body Exp_Util is\n       then\n          null;\n \n-      --  Nothing to be done if the type of the expression is limited, because\n-      --  in this case the expression cannot be copied, and its use can only\n-      --  be by reference and there is no need for the actual subtype.\n+      --  In Ada95, Nothing to be done if the type of the expression is\n+      --  limited, because in this case the expression cannot be copied,\n+      --  and its use can only be by reference.\n \n-      elsif Is_Limited_Type (Exp_Typ) then\n+      --  In Ada2005, the context can be an object declaration whose expression\n+      --  is a function that returns in place. If the nominal subtype has\n+      --  unknown discriminants, the call still provides constraints on the\n+      --  object, and we have to create an actual subtype from it.\n+\n+      --  If the type is class-wide, the expression is dynamically tagged and\n+      --  we do not create an actual subtype either. Ditto for an interface.\n+\n+      elsif Is_Limited_Type (Exp_Typ)\n+        and then\n+         (Is_Class_Wide_Type (Exp_Typ)\n+           or else Is_Interface (Exp_Typ)\n+           or else not Has_Unknown_Discriminants (Exp_Typ)\n+           or else not Is_Composite_Type (Unc_Type))\n+      then\n+         null;\n+\n+      --  For limited interfaces, nothing to be done\n+\n+      --  This branch may be redundant once the limited interface issue is\n+      --  sorted out???\n+\n+      elsif Is_Interface (Exp_Typ)\n+        and then Is_Limited_Interface (Exp_Typ)\n+      then\n          null;\n \n       else\n@@ -2106,6 +2128,44 @@ package body Exp_Util is\n       end;\n    end Get_Current_Value_Condition;\n \n+   ---------------------------------\n+   -- Has_Controlled_Coextensions --\n+   ---------------------------------\n+\n+   function Has_Controlled_Coextensions (Typ : Entity_Id) return Boolean is\n+      D_Typ : Entity_Id;\n+      Discr : Entity_Id;\n+\n+   begin\n+      --  Only consider record types\n+\n+      if Ekind (Typ) /= E_Record_Type\n+        and then Ekind (Typ) /= E_Record_Subtype\n+      then\n+         return False;\n+      end if;\n+\n+      if Has_Discriminants (Typ) then\n+         Discr := First_Discriminant (Typ);\n+         while Present (Discr) loop\n+            D_Typ := Etype (Discr);\n+\n+            if Ekind (D_Typ) = E_Anonymous_Access_Type\n+              and then\n+                (Is_Controlled (Directly_Designated_Type (D_Typ))\n+                   or else\n+                 Is_Concurrent_Type (Directly_Designated_Type (D_Typ)))\n+            then\n+               return True;\n+            end if;\n+\n+            Next_Discriminant (Discr);\n+         end loop;\n+      end if;\n+\n+      return False;\n+   end Has_Controlled_Coextensions;\n+\n    --------------------\n    -- Homonym_Number --\n    --------------------\n@@ -2725,8 +2785,7 @@ package body Exp_Util is\n                N_Variant                                |\n                N_Variant_Part                           |\n                N_Validate_Unchecked_Conversion          |\n-               N_With_Clause                            |\n-               N_With_Type_Clause\n+               N_With_Clause\n             =>\n                null;\n \n@@ -2755,13 +2814,14 @@ package body Exp_Util is\n             P := Parent (N);\n          end if;\n       end loop;\n-\n    end Insert_Actions;\n \n    --  Version with check(s) suppressed\n \n    procedure Insert_Actions\n-     (Assoc_Node : Node_Id; Ins_Actions : List_Id; Suppress : Check_Id)\n+     (Assoc_Node  : Node_Id;\n+      Ins_Actions : List_Id;\n+      Suppress    : Check_Id)\n    is\n    begin\n       if Suppress = All_Checks then\n@@ -2810,7 +2870,8 @@ package body Exp_Util is\n       Aux : constant Node_Id := Aux_Decls_Node (Cunit (Main_Unit));\n \n    begin\n-      New_Scope (Cunit_Entity (Main_Unit));\n+      Push_Scope (Cunit_Entity (Main_Unit));\n+      --  ??? should this be Current_Sem_Unit instead of Main_Unit?\n \n       if No (Actions (Aux)) then\n          Set_Actions (Aux, New_List (N));\n@@ -2831,7 +2892,8 @@ package body Exp_Util is\n \n    begin\n       if Is_Non_Empty_List (L) then\n-         New_Scope (Cunit_Entity (Main_Unit));\n+         Push_Scope (Cunit_Entity (Main_Unit));\n+         --  ??? should this be Current_Sem_Unit instead of Main_Unit?\n \n          if No (Actions (Aux)) then\n             Set_Actions (Aux, L);\n@@ -3078,14 +3140,7 @@ package body Exp_Util is\n \n    function Is_Possibly_Unaligned_Slice (N : Node_Id) return Boolean is\n    begin\n-      --  ??? GCC3 will eventually handle strings with arbitrary alignments,\n-      --  but for now the following check must be disabled.\n-\n-      --  if get_gcc_version >= 3 then\n-      --     return False;\n-      --  end if;\n-\n-      --  For renaming case, go to renamed object\n+      --  Go to renamed object\n \n       if Is_Entity_Name (N)\n         and then Is_Object (Entity (N))\n@@ -3589,6 +3644,7 @@ package body Exp_Util is\n       Loc         : constant Source_Ptr := Sloc (E);\n       Root_Typ    : constant Entity_Id  := Root_Type (T);\n       List_Def    : constant List_Id    := Empty_List;\n+      Comp_List   : constant List_Id    := New_List;\n       Equiv_Type  : Entity_Id;\n       Range_Type  : Entity_Id;\n       Str_Type    : Entity_Id;\n@@ -3611,22 +3667,35 @@ package body Exp_Util is\n                  Make_Subtype_From_Expr (E, Root_Typ)));\n       end if;\n \n-      --  subtype rg__xx is Storage_Offset range\n-      --                           (Expr'size - typ'size) / Storage_Unit\n+      --  Generate the range subtype declaration\n \n       Range_Type := Make_Defining_Identifier (Loc, New_Internal_Name ('G'));\n \n-      Sizexpr :=\n-        Make_Op_Subtract (Loc,\n-          Left_Opnd =>\n-            Make_Attribute_Reference (Loc,\n-              Prefix =>\n-                OK_Convert_To (T, Duplicate_Subexpr_No_Checks (E)),\n-              Attribute_Name => Name_Size),\n-          Right_Opnd =>\n-            Make_Attribute_Reference (Loc,\n-              Prefix => New_Reference_To (Constr_Root, Loc),\n-              Attribute_Name => Name_Object_Size));\n+      if not Is_Interface (Root_Typ) then\n+         --  subtype rg__xx is\n+         --    Storage_Offset range 1 .. (Expr'size - typ'size) / Storage_Unit\n+\n+         Sizexpr :=\n+           Make_Op_Subtract (Loc,\n+             Left_Opnd =>\n+               Make_Attribute_Reference (Loc,\n+                 Prefix =>\n+                   OK_Convert_To (T, Duplicate_Subexpr_No_Checks (E)),\n+                 Attribute_Name => Name_Size),\n+             Right_Opnd =>\n+               Make_Attribute_Reference (Loc,\n+                 Prefix => New_Reference_To (Constr_Root, Loc),\n+                 Attribute_Name => Name_Object_Size));\n+      else\n+         --  subtype rg__xx is\n+         --    Storage_Offset range 1 .. Expr'size / Storage_Unit\n+\n+         Sizexpr :=\n+           Make_Attribute_Reference (Loc,\n+             Prefix =>\n+               OK_Convert_To (T, Duplicate_Subexpr_No_Checks (E)),\n+             Attribute_Name => Name_Size);\n+      end if;\n \n       Set_Paren_Count (Sizexpr, 1);\n \n@@ -3661,7 +3730,7 @@ package body Exp_Util is\n                     New_List (New_Reference_To (Range_Type, Loc))))));\n \n       --  type Equiv_T is record\n-      --    _parent : Tnn;\n+      --    [ _parent : Tnn; ]\n       --    E : Str_Type;\n       --  end Equiv_T;\n \n@@ -3682,36 +3751,41 @@ package body Exp_Util is\n       Set_Ekind (Equiv_Type, E_Record_Type);\n       Set_Parent_Subtype (Equiv_Type, Constr_Root);\n \n+      if not Is_Interface (Root_Typ) then\n+         Append_To (Comp_List,\n+           Make_Component_Declaration (Loc,\n+             Defining_Identifier =>\n+               Make_Defining_Identifier (Loc, Name_uParent),\n+             Component_Definition =>\n+               Make_Component_Definition (Loc,\n+                 Aliased_Present    => False,\n+                 Subtype_Indication => New_Reference_To (Constr_Root, Loc))));\n+      end if;\n+\n+      Append_To (Comp_List,\n+        Make_Component_Declaration (Loc,\n+          Defining_Identifier =>\n+            Make_Defining_Identifier (Loc,\n+              Chars => New_Internal_Name ('C')),\n+          Component_Definition =>\n+            Make_Component_Definition (Loc,\n+              Aliased_Present    => False,\n+              Subtype_Indication => New_Reference_To (Str_Type, Loc))));\n+\n       Append_To (List_Def,\n         Make_Full_Type_Declaration (Loc,\n           Defining_Identifier => Equiv_Type,\n-\n           Type_Definition =>\n             Make_Record_Definition (Loc,\n-              Component_List => Make_Component_List (Loc,\n-                Component_Items => New_List (\n-                  Make_Component_Declaration (Loc,\n-                    Defining_Identifier =>\n-                      Make_Defining_Identifier (Loc, Name_uParent),\n-                    Component_Definition =>\n-                      Make_Component_Definition (Loc,\n-                        Aliased_Present    => False,\n-                        Subtype_Indication =>\n-                          New_Reference_To (Constr_Root, Loc))),\n-\n-                  Make_Component_Declaration (Loc,\n-                    Defining_Identifier =>\n-                      Make_Defining_Identifier (Loc,\n-                        Chars => New_Internal_Name ('C')),\n-                    Component_Definition =>\n-                      Make_Component_Definition (Loc,\n-                        Aliased_Present    => False,\n-                        Subtype_Indication =>\n-                          New_Reference_To (Str_Type, Loc)))),\n-\n-                Variant_Part => Empty))));\n-\n-      Insert_Actions (E, List_Def);\n+              Component_List =>\n+                Make_Component_List (Loc,\n+                  Component_Items => Comp_List,\n+                  Variant_Part    => Empty))));\n+\n+      --  Suppress all checks during the analysis of the expanded code\n+      --  to avoid the generation of spurious warnings under ZFP run-time.\n+\n+      Insert_Actions (E, List_Def, Suppress => All_Checks);\n       return Equiv_Type;\n    end Make_CW_Equivalent_Type;\n \n@@ -3839,12 +3913,12 @@ package body Exp_Util is\n             EQ_Typ     : Entity_Id := Empty;\n \n          begin\n-            --  A class-wide equivalent type is not needed when Java_VM\n-            --  because the JVM back end handles the class-wide object\n+            --  A class-wide equivalent type is not needed when VM_Target\n+            --  because the VM back-ends handle the class-wide object\n             --  initialization itself (and doesn't need or want the\n             --  additional intermediate type to handle the assignment).\n \n-            if Expander_Active and then not Java_VM then\n+            if Expander_Active and then VM_Target = No_VM then\n                EQ_Typ := Make_CW_Equivalent_Type (Unc_Typ, E);\n             end if;\n \n@@ -3952,6 +4026,22 @@ package body Exp_Util is\n       return (Res);\n    end New_Class_Wide_Subtype;\n \n+   --------------------------------\n+   -- Non_Limited_Designated_Type --\n+   ---------------------------------\n+\n+   function Non_Limited_Designated_Type (T : Entity_Id) return Entity_Id is\n+      Desig : constant Entity_Id := Designated_Type (T);\n+   begin\n+      if Ekind (Desig) = E_Incomplete_Type\n+        and then Present (Non_Limited_View (Desig))\n+      then\n+         return Non_Limited_View (Desig);\n+      else\n+         return Desig;\n+      end if;\n+   end Non_Limited_Designated_Type;\n+\n    -----------------------------------\n    -- OK_To_Do_Constant_Replacement --\n    -----------------------------------\n@@ -4019,6 +4109,69 @@ package body Exp_Util is\n       end if;\n    end OK_To_Do_Constant_Replacement;\n \n+   ------------------------------------\n+   -- Possible_Bit_Aligned_Component --\n+   ------------------------------------\n+\n+   function Possible_Bit_Aligned_Component (N : Node_Id) return Boolean is\n+   begin\n+      case Nkind (N) is\n+\n+         --  Case of indexed component\n+\n+         when N_Indexed_Component =>\n+            declare\n+               P    : constant Node_Id   := Prefix (N);\n+               Ptyp : constant Entity_Id := Etype (P);\n+\n+            begin\n+               --  If we know the component size and it is less than 64, then\n+               --  we are definitely OK. The back end always does assignment\n+               --  of misaligned small objects correctly.\n+\n+               if Known_Static_Component_Size (Ptyp)\n+                 and then Component_Size (Ptyp) <= 64\n+               then\n+                  return False;\n+\n+               --  Otherwise, we need to test the prefix, to see if we are\n+               --  indexing from a possibly unaligned component.\n+\n+               else\n+                  return Possible_Bit_Aligned_Component (P);\n+               end if;\n+            end;\n+\n+         --  Case of selected component\n+\n+         when N_Selected_Component =>\n+            declare\n+               P    : constant Node_Id   := Prefix (N);\n+               Comp : constant Entity_Id := Entity (Selector_Name (N));\n+\n+            begin\n+               --  If there is no component clause, then we are in the clear\n+               --  since the back end will never misalign a large component\n+               --  unless it is forced to do so. In the clear means we need\n+               --  only the recursive test on the prefix.\n+\n+               if Component_May_Be_Bit_Aligned (Comp) then\n+                  return True;\n+               else\n+                  return Possible_Bit_Aligned_Component (P);\n+               end if;\n+            end;\n+\n+         --  If we have neither a record nor array component, it means that we\n+         --  have fallen off the top testing prefixes recursively, and we now\n+         --  have a stand alone object, where we don't have a problem.\n+\n+         when others =>\n+            return False;\n+\n+      end case;\n+   end Possible_Bit_Aligned_Component;\n+\n    -------------------------\n    -- Remove_Side_Effects --\n    -------------------------\n@@ -4171,6 +4324,17 @@ package body Exp_Util is\n \n          elsif Compile_Time_Known_Value (N) then\n             return True;\n+\n+         --  A variable renaming is not side-effet free, because the\n+         --  renaming will function like a macro in the front-end in\n+         --  some cases, and an assignment can modify the the component\n+         --  designated by N, so we need to create a temporary for it.\n+\n+         elsif Is_Entity_Name (Original_Node (N))\n+           and then Is_Renaming_Of_Object (Entity (Original_Node (N)))\n+           and then Ekind (Entity (Original_Node (N))) /= E_Constant\n+         then\n+            return False;\n          end if;\n \n          --  For other than entity names and compile time known values,"}, {"sha": "ccf67401716e691c5c45ac74340ef55fe2cb254c", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=0712790c364b9d0de4d023ebd22fa9249afc35d5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -27,6 +27,7 @@\n --  Package containing utility procedures used throughout the expander\n \n with Exp_Tss; use Exp_Tss;\n+with Namet;   use Namet;\n with Rtsfind; use Rtsfind;\n with Sinfo;   use Sinfo;\n with Types;   use Types;\n@@ -393,7 +394,7 @@ package Exp_Util is\n    --  or not known at all. In the first two cases, Get_Current_Condition will\n    --  return with Op set to the appropriate conditional operator (inverted if\n    --  the condition is known false), and Val set to the constant value. If the\n-   --  condition is not known, then Cond and Val are set for the empty case\n+   --  condition is not known, then Op and Val are set for the empty case\n    --  (N_Empty and Empty).\n    --\n    --  The check for whether the condition is true/false unknown depends\n@@ -411,6 +412,10 @@ package Exp_Util is\n    --  N_Op_Eq), or to determine the result of some other test in other cases\n    --  (e.g. no access check required if N_Op_Ne Null).\n \n+   function Has_Controlled_Coextensions (Typ : Entity_Id) return Boolean;\n+   --  Determine whether a record type has anonymous access discriminants with\n+   --  a controlled designated type.\n+\n    function Homonym_Number (Subp : Entity_Id) return Nat;\n    --  Here subp is the entity for a subprogram. This routine returns the\n    --  homonym number used to disambiguate overloaded subprograms in the same\n@@ -520,6 +525,11 @@ package Exp_Util is\n    --  caller has to check whether stack checking is actually enabled in order\n    --  to guide the expansion (typically of a function call).\n \n+   function Non_Limited_Designated_Type (T : Entity_Id) return Entity_Id;\n+   --  An anonymous access type may designate a limited view. Check whether\n+   --  non-limited view is available during expansion, to examine components\n+   --  or other characteristics of the full type.\n+\n    function OK_To_Do_Constant_Replacement (E : Entity_Id) return Boolean;\n    --  This function is used when testing whether or not to replace a reference\n    --  to entity E by a known constant value. Such replacement must be done\n@@ -532,6 +542,14 @@ package Exp_Util is\n    --  address might be captured in a way we do not detect. A value of True is\n    --  returned only if the replacement is safe.\n \n+   function Possible_Bit_Aligned_Component (N : Node_Id) return Boolean;\n+   --  This function is used in processing the assignment of a record or\n+   --  indexed component. The argument N is either the left hand or right\n+   --  hand side of an assignment, and this function determines if there\n+   --  is a record component reference where the record may be bit aligned\n+   --  in a manner that causes trouble for the back end (see description\n+   --  of Exp_Util.Component_May_Be_Bit_Aligned for further details).\n+\n    procedure Remove_Side_Effects\n      (Exp          : Node_Id;\n       Name_Req     : Boolean := False;"}, {"sha": "a4fb2085514accd220c4be4d9d17c8a3fba982f7", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 86, "deletions": 27, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=0712790c364b9d0de4d023ebd22fa9249afc35d5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,7 +30,6 @@ with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Fname;    use Fname;\n with Fname.UF; use Fname.UF;\n-with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n@@ -71,6 +70,69 @@ package body Lib.Load is\n    --  This procedure is used to generate error message info lines that\n    --  trace the current dependency chain when a load error occurs.\n \n+   ------------------------------\n+   -- Change_Main_Unit_To_Spec --\n+   ------------------------------\n+\n+   procedure Change_Main_Unit_To_Spec is\n+      U : Unit_Record renames Units.Table (Main_Unit);\n+      N : File_Name_Type;\n+      X : Source_File_Index;\n+\n+   begin\n+      --  Get name of unit body\n+\n+      Get_Name_String (U.Unit_File_Name);\n+\n+      --  Note: for the following we should really generalize and consult the\n+      --  file name pattern data, but for now we just deal with the common\n+      --  naming cases, which is probably good enough in practice ???\n+\n+      --  Change .adb to .ads\n+\n+      if Name_Len >= 5\n+        and then Name_Buffer (Name_Len - 3 .. Name_Len) = \".adb\"\n+      then\n+         Name_Buffer (Name_Len) := 's';\n+\n+      --  Change .2.ada to .1.ada (Rational convention)\n+\n+      elsif Name_Len >= 7\n+        and then Name_Buffer (Name_Len - 5 .. Name_Len) = \".2.ada\"\n+      then\n+         Name_Buffer (Name_Len - 4) := '1';\n+\n+      --  Change .ada to _.ada (DEC convention)\n+\n+      elsif Name_Len >= 5\n+        and then Name_Buffer (Name_Len - 3 .. Name_Len) = \".ada\"\n+      then\n+         Name_Buffer (Name_Len - 3 .. Name_Len + 1) := \"_.ada\";\n+         Name_Len := Name_Len + 1;\n+\n+      --  No match, don't make the change\n+\n+      else\n+         return;\n+      end if;\n+\n+      --  Try loading the spec\n+\n+      N := Name_Find;\n+      X := Load_Source_File (N);\n+\n+      --  No change if we did not find the spec\n+\n+      if X = No_Source_File then\n+         return;\n+      end if;\n+\n+      --  Otherwise modify Main_Unit entry to point to spec\n+\n+      U.Unit_File_Name := N;\n+      U.Source_Index := X;\n+   end Change_Main_Unit_To_Spec;\n+\n    -------------------------------\n    -- Create_Dummy_Package_Unit --\n    -------------------------------\n@@ -218,7 +280,8 @@ package body Lib.Load is\n    ----------------------\n \n    procedure Load_Main_Source is\n-      Fname : File_Name_Type;\n+      Fname   : File_Name_Type;\n+      Version : Word := 0;\n \n    begin\n       Load_Stack.Increment_Last;\n@@ -239,13 +302,17 @@ package body Lib.Load is\n          Main_Source_File := Load_Source_File (Fname);\n          Current_Error_Source_File := Main_Source_File;\n \n+         if Main_Source_File /= No_Source_File then\n+            Version := Source_Checksum (Main_Source_File);\n+         end if;\n+\n          Units.Table (Main_Unit) := (\n            Cunit           => Empty,\n            Cunit_Entity    => Empty,\n            Dependency_Num  => 0,\n            Dynamic_Elab    => False,\n            Error_Location  => No_Location,\n-           Expected_Unit   => No_Name,\n+           Expected_Unit   => No_Unit_Name,\n            Fatal_Error     => False,\n            Generate_Code   => False,\n            Has_RACW        => False,\n@@ -256,8 +323,8 @@ package body Lib.Load is\n            Serial_Number   => 0,\n            Source_Index    => Main_Source_File,\n            Unit_File_Name  => Fname,\n-           Unit_Name       => No_Name,\n-           Version         => Source_Checksum (Main_Source_File));\n+           Unit_Name       => No_Unit_Name,\n+           Version         => Version);\n       end if;\n    end Load_Main_Source;\n \n@@ -303,13 +370,10 @@ package body Lib.Load is\n          --  If parent is a renaming, then we use the renamed package as\n          --  the actual parent for the subsequent load operation.\n \n-         if Nkind (Parent (Cunit_Entity (Unump))) =\n-           N_Package_Renaming_Declaration\n-         then\n+         if Nkind (Unit (Cunit (Unump))) = N_Package_Renaming_Declaration then\n             Uname_Actual :=\n               New_Child\n-                (Load_Name,\n-                 Get_Unit_Name (Name (Parent (Cunit_Entity (Unump)))));\n+                (Load_Name, Get_Unit_Name (Name (Unit (Cunit (Unump)))));\n \n             --  Save the renaming entity, to establish its visibility when\n             --  installing the context. The implicit with is on this entity,\n@@ -382,7 +446,7 @@ package body Lib.Load is\n       --  Note: Unit_Name (Main_Unit) is not set if we are parsing gnat.adc.\n \n       if Present (Error_Node)\n-        and then Unit_Name (Main_Unit) /= No_Name\n+        and then Unit_Name (Main_Unit) /= No_Unit_Name\n       then\n          --  It seems like In_Extended_Main_Source_Unit (Error_Node) would\n          --  do the trick here, but that's wrong, it is much too early to\n@@ -408,9 +472,6 @@ package body Lib.Load is\n             --  If the load is called from a with_type clause, the error\n             --  node is correct.\n \n-            elsif Nkind (Parent (Error_Node)) = N_With_Type_Clause then\n-               Load_Msg_Sloc := Sloc (Error_Node);\n-\n             --  Otherwise, check for the subunit case, and if so, consider\n             --  we have a match if one name is a prefix of the other name.\n \n@@ -474,14 +535,13 @@ package body Lib.Load is\n \n                if Present (Error_Node) then\n                   if Is_Predefined_File_Name (Fname) then\n-                     Error_Msg_Name_1 := Uname_Actual;\n+                     Error_Msg_Unit_1 := Uname_Actual;\n                      Error_Msg\n-                       (\"% is not a language defined unit\", Load_Msg_Sloc);\n+                       (\"$$ is not a language defined unit\", Load_Msg_Sloc);\n                   else\n-                     Error_Msg_Name_1 := Fname;\n+                     Error_Msg_File_1 := Fname;\n                      Error_Msg_Unit_1 := Uname_Actual;\n-                     Error_Msg\n-                       (\"File{ does not contain unit$\", Load_Msg_Sloc);\n+                     Error_Msg (\"File{ does not contain unit$\", Load_Msg_Sloc);\n                   end if;\n \n                   Write_Dependency_Chain;\n@@ -604,11 +664,10 @@ package body Lib.Load is\n             if Corr_Body /= No_Unit\n               and then Spec_Is_Irrelevant (Unum, Corr_Body)\n             then\n-               Error_Msg_Name_1 := Unit_File_Name (Corr_Body);\n+               Error_Msg_File_1 := Unit_File_Name (Corr_Body);\n                Error_Msg\n-                 (\"cannot compile subprogram in file {!\",\n-                  Load_Msg_Sloc);\n-               Error_Msg_Name_1 := Unit_File_Name (Unum);\n+                 (\"cannot compile subprogram in file {!\", Load_Msg_Sloc);\n+               Error_Msg_File_1 := Unit_File_Name (Unum);\n                Error_Msg\n                  (\"\\incorrect spec in file { must be removed first!\",\n                   Load_Msg_Sloc);\n@@ -655,12 +714,12 @@ package body Lib.Load is\n \n                   Check_Restricted_Unit (Load_Name, Error_Node);\n \n-                  Error_Msg_Name_1 := Uname_Actual;\n+                  Error_Msg_Unit_1 := Uname_Actual;\n                   Error_Msg\n-                    (\"% is not a predefined library unit\", Load_Msg_Sloc);\n+                    (\"$$ is not a predefined library unit\", Load_Msg_Sloc);\n \n                else\n-                  Error_Msg_Name_1 := Fname;\n+                  Error_Msg_File_1 := Fname;\n                   Error_Msg (\"file{ not found\", Load_Msg_Sloc);\n                end if;\n "}, {"sha": "6ea1e8159405281ffe8b8aad5e6647e1e32772a8", "filename": "gcc/ada/lib-load.ads", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Flib-load.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Flib-load.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.ads?ref=0712790c364b9d0de4d023ebd22fa9249afc35d5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -153,6 +153,15 @@ package Lib.Load is\n    --  limited-with clause, or some unit in the context of X. It is used to\n    --  avoid the check on circular dependency (Ada 2005, AI-50217)\n \n+   procedure Change_Main_Unit_To_Spec;\n+   --  This procedure is called if the main unit file contains a No_Body pragma\n+   --  and no other tokens. The effect is, if possible, to change the main unit\n+   --  from the body it references now, to the corresponding spec. This has the\n+   --  effect of ignoring the body, which is what we want. If it is impossible\n+   --  to successfully make the change, then the call has no effect, and the\n+   --  file is unchanged (this will lead to an error complaining about the\n+   --  inappropriate No_Body spec).\n+\n    function Create_Dummy_Package_Unit\n      (With_Node : Node_Id;\n       Spec_Name : Unit_Name_Type) return Unit_Number_Type;"}, {"sha": "f013cf112ca6e74f84967aa2b28d8150d95d80fe", "filename": "gcc/ada/par-ch10.adb", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Fpar-ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Fpar-ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch10.adb?ref=0712790c364b9d0de4d023ebd22fa9249afc35d5", "patch": "@@ -869,22 +869,17 @@ package body Ch10 is\n \n             if Token = Tok_Type then\n \n-               --  WITH TYPE is an GNAT specific extension\n+               --  WITH TYPE is an obsolete GNAT specific extension\n \n-               if not Extensions_Allowed then\n-                  Error_Msg_SP (\"`WITH TYPE` is a 'G'N'A'T extension\");\n-                  Error_Msg_SP (\"\\unit must be compiled with -gnatX switch\");\n-               end if;\n+               Error_Msg_SP\n+                 (\"`WITH TYPE` is an obsolete 'G'N'A'T extension\");\n+               Error_Msg_SP (\"\\use Ada 2005 `LIMITED WITH` clause instead\");\n \n                Scan;  -- past TYPE\n-               With_Node := New_Node (N_With_Type_Clause, Token_Ptr);\n-               Append (With_Node, Item_List);\n-               Set_Name (With_Node, P_Qualified_Simple_Name);\n \n                T_Is;\n \n                if Token = Tok_Tagged then\n-                  Set_Tagged_Present (With_Node);\n                   Scan;\n \n                elsif Token = Tok_Access then"}, {"sha": "58ae0456f3c8d2e746d0ca0c1359cde81b2d8c8b", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 73, "deletions": 27, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=0712790c364b9d0de4d023ebd22fa9249afc35d5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -727,14 +727,6 @@ package body Sinfo is\n       return Node4 (N);\n    end Delay_Alternative;\n \n-   function Delay_Finalize_Attach\n-      (N : Node_Id) return Boolean is\n-   begin\n-      pragma Assert (False\n-        or else NT (N).Nkind = N_Object_Declaration);\n-      return Flag14 (N);\n-   end Delay_Finalize_Attach;\n-\n    function Delay_Statement\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -1101,11 +1093,12 @@ package body Sinfo is\n      (N : Node_Id) return Boolean is\n    begin\n       pragma Assert (False\n+        or else NT (N).Nkind = N_Block_Statement\n         or else NT (N).Nkind = N_Goto_Statement\n         or else NT (N).Nkind = N_Label\n         or else NT (N).Nkind = N_Object_Declaration\n         or else NT (N).Nkind = N_Subtype_Declaration);\n-      return Flag7 (N);\n+      return Flag8 (N);\n    end Exception_Junk;\n \n    function Exception_Label\n@@ -1360,6 +1353,22 @@ package body Sinfo is\n       return Flag12 (N);\n    end Has_Dynamic_Range_Check;\n \n+   function Has_Init_Expression\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Object_Declaration);\n+      return Flag14 (N);\n+   end Has_Init_Expression;\n+\n+   function Has_Local_Raise\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Exception_Handler);\n+      return Flag8 (N);\n+   end Has_Local_Raise;\n+\n    function Has_No_Elaboration_Code\n       (N : Node_Id) return Boolean is\n    begin\n@@ -1629,6 +1638,14 @@ package body Sinfo is\n       return Flag7 (N);\n    end Is_Protected_Subprogram_Body;\n \n+   function Is_Static_Coextension\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Allocator);\n+      return Flag14 (N);\n+   end Is_Static_Coextension;\n+\n    function Is_Static_Expression\n       (N : Node_Id) return Boolean is\n    begin\n@@ -1900,8 +1917,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Subprogram_Renaming_Declaration\n         or else NT (N).Nkind = N_Subunit\n         or else NT (N).Nkind = N_Variant_Part\n-        or else NT (N).Nkind = N_With_Clause\n-        or else NT (N).Nkind = N_With_Type_Clause);\n+        or else NT (N).Nkind = N_With_Clause);\n       return Node2 (N);\n    end Name;\n \n@@ -2348,6 +2364,14 @@ package body Sinfo is\n       return Flag13 (N);\n    end Redundant_Use;\n \n+   function Renaming_Exception\n+      (N : Node_Id) return Node_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Exception_Declaration);\n+      return Node2 (N);\n+   end Renaming_Exception;\n+\n    function Result_Definition\n      (N : Node_Id) return Node_Id is\n    begin\n@@ -2576,8 +2600,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Formal_Private_Type_Definition\n         or else NT (N).Nkind = N_Incomplete_Type_Declaration\n         or else NT (N).Nkind = N_Private_Type_Declaration\n-        or else NT (N).Nkind = N_Record_Definition\n-        or else NT (N).Nkind = N_With_Type_Clause);\n+        or else NT (N).Nkind = N_Record_Definition);\n       return Flag15 (N);\n    end Tagged_Present;\n \n@@ -3412,14 +3435,6 @@ package body Sinfo is\n       Set_Node4_With_Parent (N, Val);\n    end Set_Delay_Alternative;\n \n-   procedure Set_Delay_Finalize_Attach\n-      (N : Node_Id; Val : Boolean := True) is\n-   begin\n-      pragma Assert (False\n-        or else NT (N).Nkind = N_Object_Declaration);\n-      Set_Flag14 (N, Val);\n-   end Set_Delay_Finalize_Attach;\n-\n    procedure Set_Delay_Statement\n       (N : Node_Id; Val : Node_Id) is\n    begin\n@@ -3777,11 +3792,12 @@ package body Sinfo is\n      (N : Node_Id; Val : Boolean := True) is\n    begin\n       pragma Assert (False\n+        or else NT (N).Nkind = N_Block_Statement\n         or else NT (N).Nkind = N_Goto_Statement\n         or else NT (N).Nkind = N_Label\n         or else NT (N).Nkind = N_Object_Declaration\n         or else NT (N).Nkind = N_Subtype_Declaration);\n-      Set_Flag7 (N, Val);\n+      Set_Flag8 (N, Val);\n    end Set_Exception_Junk;\n \n    procedure Set_Exception_Label\n@@ -4036,6 +4052,22 @@ package body Sinfo is\n       Set_Flag12 (N, Val);\n    end Set_Has_Dynamic_Range_Check;\n \n+   procedure Set_Has_Init_Expression\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Object_Declaration);\n+      Set_Flag14 (N, Val);\n+   end Set_Has_Init_Expression;\n+\n+   procedure Set_Has_Local_Raise\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Exception_Handler);\n+      Set_Flag8 (N, Val);\n+   end Set_Has_Local_Raise;\n+\n    procedure Set_Has_No_Elaboration_Code\n       (N : Node_Id; Val : Boolean := True) is\n    begin\n@@ -4305,6 +4337,14 @@ package body Sinfo is\n       Set_Flag7 (N, Val);\n    end Set_Is_Protected_Subprogram_Body;\n \n+   procedure Set_Is_Static_Coextension\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Allocator);\n+      Set_Flag14 (N, Val);\n+   end Set_Is_Static_Coextension;\n+\n    procedure Set_Is_Static_Expression\n       (N : Node_Id; Val : Boolean := True) is\n    begin\n@@ -4576,8 +4616,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Subprogram_Renaming_Declaration\n         or else NT (N).Nkind = N_Subunit\n         or else NT (N).Nkind = N_Variant_Part\n-        or else NT (N).Nkind = N_With_Clause\n-        or else NT (N).Nkind = N_With_Type_Clause);\n+        or else NT (N).Nkind = N_With_Clause);\n       Set_Node2_With_Parent (N, Val);\n    end Set_Name;\n \n@@ -5024,6 +5063,14 @@ package body Sinfo is\n       Set_Flag13 (N, Val);\n    end Set_Redundant_Use;\n \n+   procedure Set_Renaming_Exception\n+      (N : Node_Id; Val : Node_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Exception_Declaration);\n+      Set_Node2 (N, Val);\n+   end Set_Renaming_Exception;\n+\n    procedure Set_Result_Definition\n      (N : Node_Id; Val : Node_Id) is\n    begin\n@@ -5252,8 +5299,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Formal_Private_Type_Definition\n         or else NT (N).Nkind = N_Incomplete_Type_Declaration\n         or else NT (N).Nkind = N_Private_Type_Declaration\n-        or else NT (N).Nkind = N_Record_Definition\n-        or else NT (N).Nkind = N_With_Type_Clause);\n+        or else NT (N).Nkind = N_Record_Definition);\n       Set_Flag15 (N, Val);\n    end Set_Tagged_Present;\n "}, {"sha": "ccf63ed645ec5b12c239c674c008e147b209be8e", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 93, "deletions": 51, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0712790c364b9d0de4d023ebd22fa9249afc35d5/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=0712790c364b9d0de4d023ebd22fa9249afc35d5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,6 +48,7 @@\n --  WARNING: Several files are automatically generated from this package.\n --  See below for details.\n \n+with Namet;  use Namet;\n with Types;  use Types;\n with Uintp;  use Uintp;\n with Urealp; use Urealp;\n@@ -462,10 +463,6 @@ package Sinfo is\n    --    already been analyzed, both for efficiency and functional correctness\n    --    reasons.\n \n-   --  Coextensions (Elist4-Sem)\n-   --    Present in allocators nodes. Points to list of allocators for the\n-   --    access discriminants of the allocated object,\n-\n    --  Comes_From_Source (Flag2)\n    --    This flag is on for any nodes built by the scanner or parser from the\n    --    source program, and off for any nodes built by the analyzer or\n@@ -485,7 +482,9 @@ package Sinfo is\n    --    points to a list of raise nodes, which are calls to a routine to raise\n    --    an exception. These are raise nodes which can be optimized into gotos\n    --    if the handler turns out to meet the conditions which permit this\n-   --    transformation.\n+   --    transformation. Note that this does NOT include instances of the\n+   --    N_Raise_xxx_Error nodes since the transformation of these nodes is\n+   --    handled by the back end (using the N_Push/N_Pop mechanism).\n \n    --  Has_Dynamic_Length_Check (Flag10-Sem)\n    --    This flag is present on all nodes. It is set to indicate that one of\n@@ -499,6 +498,13 @@ package Sinfo is\n    --    has been inserted at the flagged node. This is used to avoid the\n    --    generation of duplicate checks.\n \n+   --  Has_Local_Raise (Flag8-Sem)\n+   --    Present in exception handler nodes. Set if the handler can be entered\n+   --    via a local raise that gets transformed to a goto statement. This will\n+   --    always be set if Local_Raise_Statements is non-empty, but can also be\n+   --    set as a result of generation of N_Raise_xxx nodes, or flags set in\n+   --    nodes requiring generation of back end checks.\n+\n    ------------------------------------\n    -- Description of Semantic Fields --\n    ------------------------------------\n@@ -660,6 +666,10 @@ package Sinfo is\n    --    attribute definition clause is given, rather than testing this at the\n    --    freeze point.\n \n+   --  Coextensions (Elist4-Sem)\n+   --    Present in allocators nodes. Points to list of allocators for the\n+   --    access discriminants of the allocated object.\n+\n    --  Comes_From_Extended_Return_Statement (Flag18-Sem)\n    --    Present in N_Return_Statement nodes. True if this node was\n    --    constructed as part of the expansion of an\n@@ -767,14 +777,6 @@ package Sinfo is\n    --    for the default expression). Default_Expression is used for\n    --    conformance checking.\n \n-   --  Delay_Finalize_Attach (Flag14-Sem)\n-   --    This flag is present in an N_Object_Declaration node. If it is set,\n-   --    then in the case of a controlled type being declared and initialized,\n-   --    the normal code for attaching the result to the appropriate local\n-   --    finalization list is suppressed. This is used for functions that\n-   --    return controlled types without using the secondary stack, where it is\n-   --    the caller who must do the attachment.\n-\n    --  Discr_Check_Funcs_Built (Flag11-Sem)\n    --    This flag is present in N_Full_Type_Declaration nodes. It is set when\n    --    discriminant checking functions are constructed. The purpose is to\n@@ -950,7 +952,7 @@ package Sinfo is\n    --    points to an essentially arbitrary choice from the possible set of\n    --    types.\n \n-   --  Exception_Junk (Flag7-Sem)\n+   --  Exception_Junk (Flag8-Sem)\n    --    This flag is set in a various nodes appearing in a statement sequence\n    --    to indicate that the corresponding node is an artifact of the\n    --    generated code for exception handling, and should be ignored when\n@@ -1211,6 +1213,10 @@ package Sinfo is\n    --    handler to make sure that the associated protected object is unlocked\n    --    when the subprogram completes.\n \n+   --  Is_Static_Coextension (Flag14-Sem)\n+   --    Present in N_Allocator nodes. Set if the allocator is a coextension\n+   --    of an object allocated on the stack rather than the heap.\n+\n    --  Is_Static_Expression (Flag6-Sem)\n    --    Indicates that an expression is a static expression (RM 4.9). See spec\n    --    of package Sem_Eval for full details on the use of this flag.\n@@ -1482,6 +1488,14 @@ package Sinfo is\n    --    to indicate that a use is redundant (and therefore need not be undone\n    --    on scope exit).\n \n+   --  Renaming_Exception (Node2-Sem)\n+   --    Present in N_Exception_Declaration node. Used to point back to the\n+   --    exception renaming for an exception declared within a subprogram.\n+   --    What happens is that an exception declared in a subprogram is moved\n+   --    to the library level with a unique name, and the original exception\n+   --    becomes a renaming. This link from the library level exception to the\n+   --    renaming declaration allows registering of the proper exception name.\n+\n    --  Return_Statement_Entity (Node5-Sem)\n    --    Present in N_Return_Statement and N_Extended_Return_Statement.\n    --    Points to an E_Return_Statement representing the return statement.\n@@ -1967,7 +1981,7 @@ package Sinfo is\n       --  Null_Exclusion_Present (Flag11)\n       --  Subtype_Indication (Node5)\n       --  Generic_Parent_Type (Node4-Sem) (set for an actual derived type).\n-      --  Exception_Junk (Flag7-Sem)\n+      --  Exception_Junk (Flag8-Sem)\n \n       -------------------------------\n       -- 3.2.2  Subtype Indication --\n@@ -2055,6 +2069,13 @@ package Sinfo is\n       --  Prev_Ids flags to preserve the original source form as described\n       --  in the section on \"Handling of Defining Identifier Lists\".\n \n+      --  The flag Has_Init_Expression is set if an initializing expression\n+      --  is present. Normally it is set if and only if Expression contains\n+      --  a non-empty value, but there is an exception to this. When the\n+      --  initializing expression is an aggregate which requires explicit\n+      --  assignments, the Expression field gets set to Empty, but this flag\n+      --  is still set, so we don't forget we had an initializing expression.\n+\n       --  Note: if a range check is required for the initialization\n       --  expression then the Do_Range_Check flag is set in the Expression,\n       --  with the check being done against the type given by the object\n@@ -2091,9 +2112,9 @@ package Sinfo is\n       --  Prev_Ids (Flag6) (set to False if no previous identifiers in list)\n       --  No_Initialization (Flag13-Sem)\n       --  Assignment_OK (Flag15-Sem)\n-      --  Exception_Junk (Flag7-Sem)\n-      --  Delay_Finalize_Attach (Flag14-Sem)\n+      --  Exception_Junk (Flag8-Sem)\n       --  Is_Subprogram_Descriptor (Flag16-Sem)\n+      --  Has_Init_Expression (Flag14)\n \n       -------------------------------------\n       -- 3.3.1  Defining Identifier List --\n@@ -3643,6 +3664,7 @@ package Sinfo is\n       --  Procedure_To_Call (Node2-Sem)\n       --  Coextensions (Elist4-Sem)\n       --  No_Initialization (Flag13-Sem)\n+      --  Is_Static_Coextension (Flag14-Sem)\n       --  Do_Storage_Check (Flag17-Sem)\n       --  Is_Coextension (Flag18-Sem)\n       --  plus fields for expression\n@@ -3718,7 +3740,7 @@ package Sinfo is\n       --  N_Label\n       --  Sloc points to <<\n       --  Identifier (Node1) direct name of statement identifier\n-      --  Exception_Junk (Flag7-Sem)\n+      --  Exception_Junk (Flag8-Sem)\n \n       -------------------------------\n       -- 5.1  Statement Identifier --\n@@ -3921,9 +3943,12 @@ package Sinfo is\n       --  True. Blocks constructed by the expander usually have no identifier,\n       --  and no corresponding entity.\n \n-      --  Note well: the block statement created for an extended return\n-      --  statement has an entity, and this entity is an E_Return_Statement,\n-      --  rather than the usual E_Block.\n+      --  Note: the block statement created for an extended return statement\n+      --  has an entity, and this entity is an E_Return_Statement, rather than\n+      --  the usual E_Block.\n+\n+      --  Note: Exception_Junk is set for the wrapping blocks created during\n+      --  local raise optimization (Exp_Ch11.Expand_Local_Exception_Handlers).\n \n       --  N_Block_Statement\n       --  Sloc points to DECLARE or BEGIN\n@@ -3935,6 +3960,7 @@ package Sinfo is\n       --  Has_Created_Identifier (Flag15)\n       --  Is_Task_Allocation_Block (Flag6)\n       --  Is_Asynchronous_Call_Block (Flag7)\n+      --  Exception_Junk (Flag8-Sem)\n \n       -------------------------\n       -- 5.7  Exit Statement --\n@@ -3960,7 +3986,7 @@ package Sinfo is\n       --  N_Goto_Statement\n       --  Sloc points to GOTO\n       --  Name (Node2)\n-      --  Exception_Junk (Flag7-Sem)\n+      --  Exception_Junk (Flag8-Sem)\n \n       ---------------------------------\n       -- 6.1  Subprogram Declaration --\n@@ -5374,14 +5400,8 @@ package Sinfo is\n \n       --  This is a GNAT extension, used to implement mutually recursive\n       --  types declared in different packages.\n-\n-      --  WITH_TYPE_CLAUSE ::=\n-      --    with type type_NAME is access | with type type_NAME is tagged\n-\n-      --  N_With_Type_Clause\n-      --  Sloc points to first token of type name\n-      --  Name (Node2)\n-      --  Tagged_Present (Flag15)\n+      --  Note: this is now obsolete. The functionality of this construct\n+      --  is now implemented by the Ada 2005 Limited_with_Clause.\n \n       ---------------------\n       -- 10.2  Body stub --\n@@ -5475,6 +5495,7 @@ package Sinfo is\n       --  Sloc points to EXCEPTION\n       --  Defining_Identifier (Node1)\n       --  Expression (Node3-Sem)\n+      --  Renaming_Exception (Node2-Sem)\n       --  More_Ids (Flag5) (set to False if no more identifiers in list)\n       --  Prev_Ids (Flag6) (set to False if no previous identifiers in list)\n \n@@ -5565,6 +5586,7 @@ package Sinfo is\n       --  Zero_Cost_Handling (Flag5-Sem)\n       --  Local_Raise_Statements (Elist1-Sem) (set to No_Elist if not present)\n       --  Local_Raise_Not_OK (Flag7-Sem)\n+      --  Has_Local_Raise (Flag8-Sem)\n \n       ------------------------------------------\n       -- 11.2  Choice parameter specification --\n@@ -7093,13 +7115,13 @@ package Sinfo is\n       N_Formal_Abstract_Subprogram_Declaration,\n       N_Formal_Concrete_Subprogram_Declaration,\n \n-      --  N_Push_xxx_Label\n+      --  N_Push_xxx_Label, N_Push_Pop_xxx_Label\n \n       N_Push_Constraint_Error_Label,\n       N_Push_Program_Error_Label,\n       N_Push_Storage_Error_Label,\n \n-      --  N_Pop_xxx_Label\n+      --  N_Pop_xxx_Label, N_Push_Pop_xxx_Label\n \n       N_Pop_Constraint_Error_Label,\n       N_Pop_Program_Error_Label,\n@@ -7168,7 +7190,6 @@ package Sinfo is\n       N_Variant,\n       N_Variant_Part,\n       N_With_Clause,\n-      N_With_Type_Clause,\n       N_Unused_At_End);\n \n    for Node_Kind'Size use 8;\n@@ -7296,6 +7317,10 @@ package Sinfo is\n      N_Pop_Constraint_Error_Label ..\n      N_Pop_Storage_Error_Label;\n \n+   subtype N_Push_Pop_xxx_Label is Node_Kind range\n+     N_Push_Constraint_Error_Label ..\n+     N_Pop_Storage_Error_Label;\n+\n    subtype N_Raise_xxx_Error is Node_Kind range\n      N_Raise_Constraint_Error ..\n      N_Raise_Storage_Error;\n@@ -7561,9 +7586,6 @@ package Sinfo is\n    function Delay_Alternative\n      (N : Node_Id) return Node_Id;    -- Node4\n \n-   function Delay_Finalize_Attach\n-     (N : Node_Id) return Boolean;    -- Flag14\n-\n    function Delay_Statement\n      (N : Node_Id) return Node_Id;    -- Node2\n \n@@ -7685,7 +7707,7 @@ package Sinfo is\n      (N : Node_Id) return List_Id;    -- List5\n \n    function Exception_Junk\n-     (N : Node_Id) return Boolean;    -- Flag7\n+     (N : Node_Id) return Boolean;    -- Flag8\n \n    function Exception_Label\n      (N : Node_Id) return Node_Id;    -- Node5\n@@ -7765,6 +7787,12 @@ package Sinfo is\n    function Has_Dynamic_Range_Check\n      (N : Node_Id) return Boolean;    -- Flag12\n \n+   function Has_Init_Expression\n+     (N : Node_Id) return Boolean;    -- Flag14\n+\n+   function Has_Local_Raise\n+     (N : Node_Id) return Boolean;    -- Flag8\n+\n    function Has_No_Elaboration_Code\n      (N : Node_Id) return Boolean;    -- Flag17\n \n@@ -7855,6 +7883,9 @@ package Sinfo is\n    function Is_Protected_Subprogram_Body\n      (N : Node_Id) return Boolean;    -- Flag7\n \n+   function Is_Static_Coextension\n+     (N : Node_Id) return Boolean;    -- Flag14\n+\n    function Is_Static_Expression\n      (N : Node_Id) return Boolean;    -- Flag6\n \n@@ -8071,6 +8102,9 @@ package Sinfo is\n    function Redundant_Use\n      (N : Node_Id) return Boolean;    -- Flag13\n \n+   function Renaming_Exception\n+     (N : Node_Id) return Node_Id;    -- Node2\n+\n    function Result_Definition\n      (N : Node_Id) return Node_Id;    -- Node4\n \n@@ -8410,9 +8444,6 @@ package Sinfo is\n    procedure Set_Delay_Alternative\n      (N : Node_Id; Val : Node_Id);            -- Node4\n \n-   procedure Set_Delay_Finalize_Attach\n-     (N : Node_Id; Val : Boolean := True);    -- Flag14\n-\n    procedure Set_Delay_Statement\n      (N : Node_Id; Val : Node_Id);            -- Node2\n \n@@ -8531,7 +8562,7 @@ package Sinfo is\n      (N : Node_Id; Val : List_Id);            -- List5\n \n    procedure Set_Exception_Junk\n-     (N : Node_Id; Val : Boolean := True);    -- Flag7\n+     (N : Node_Id; Val : Boolean := True);    -- Flag8\n \n    procedure Set_Exception_Label\n      (N : Node_Id; Val : Node_Id);            -- Node5\n@@ -8611,6 +8642,12 @@ package Sinfo is\n    procedure Set_Has_Dynamic_Range_Check\n      (N : Node_Id; Val : Boolean := True);    -- Flag12\n \n+   procedure Set_Has_Init_Expression\n+     (N : Node_Id; Val : Boolean := True);    -- Flag14\n+\n+   procedure Set_Has_Local_Raise\n+     (N : Node_Id; Val : Boolean := True);    -- Flag8\n+\n    procedure Set_Has_No_Elaboration_Code\n      (N : Node_Id; Val : Boolean := True);    -- Flag17\n \n@@ -8701,6 +8738,9 @@ package Sinfo is\n    procedure Set_Is_Protected_Subprogram_Body\n      (N : Node_Id; Val : Boolean := True);    -- Flag7\n \n+   procedure Set_Is_Static_Coextension\n+     (N : Node_Id; Val : Boolean := True);    -- Flag14\n+\n    procedure Set_Is_Static_Expression\n      (N : Node_Id; Val : Boolean := True);    -- Flag6\n \n@@ -8917,6 +8957,9 @@ package Sinfo is\n    procedure Set_Redundant_Use\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n+   procedure Set_Renaming_Exception\n+     (N : Node_Id; Val : Node_Id);            -- Node2\n+\n    procedure Set_Result_Definition\n      (N : Node_Id; Val : Node_Id);            -- Node4\n \n@@ -10142,13 +10185,6 @@ package Sinfo is\n         4 => False,   --  Library_Unit (Node4-Sem)\n         5 => False),  --  Corresponding_Spec (Node5-Sem)\n \n-     N_With_Type_Clause =>\n-       (1 => False,   --  unused\n-        2 => True,    --  Name (Node2)\n-        3 => False,   --  unused\n-        4 => False,   --  unused\n-        5 => False),  --  unused\n-\n      N_Subprogram_Body_Stub =>\n        (1 => True,    --  Specification (Node1)\n         2 => False,   --  unused\n@@ -10683,7 +10719,6 @@ package Sinfo is\n    pragma Inline (Defining_Identifier);\n    pragma Inline (Defining_Unit_Name);\n    pragma Inline (Delay_Alternative);\n-   pragma Inline (Delay_Finalize_Attach);\n    pragma Inline (Delay_Statement);\n    pragma Inline (Delta_Expression);\n    pragma Inline (Digits_Expression);\n@@ -10751,6 +10786,8 @@ package Sinfo is\n    pragma Inline (Has_Created_Identifier);\n    pragma Inline (Has_Dynamic_Length_Check);\n    pragma Inline (Has_Dynamic_Range_Check);\n+   pragma Inline (Has_Init_Expression);\n+   pragma Inline (Has_Local_Raise);\n    pragma Inline (Has_Self_Reference);\n    pragma Inline (Has_No_Elaboration_Code);\n    pragma Inline (Has_Priority_Pragma);\n@@ -10781,6 +10818,7 @@ package Sinfo is\n    pragma Inline (Is_Overloaded);\n    pragma Inline (Is_Power_Of_2_For_Shift);\n    pragma Inline (Is_Protected_Subprogram_Body);\n+   pragma Inline (Is_Static_Coextension);\n    pragma Inline (Is_Static_Expression);\n    pragma Inline (Is_Subprogram_Descriptor);\n    pragma Inline (Is_Task_Allocation_Block);\n@@ -10853,6 +10891,7 @@ package Sinfo is\n    pragma Inline (Reason);\n    pragma Inline (Record_Extension_Part);\n    pragma Inline (Redundant_Use);\n+   pragma Inline (Renaming_Exception);\n    pragma Inline (Result_Definition);\n    pragma Inline (Return_Object_Declarations);\n    pragma Inline (Return_Statement_Entity);\n@@ -10963,7 +11002,6 @@ package Sinfo is\n    pragma Inline (Set_Defining_Identifier);\n    pragma Inline (Set_Defining_Unit_Name);\n    pragma Inline (Set_Delay_Alternative);\n-   pragma Inline (Set_Delay_Finalize_Attach);\n    pragma Inline (Set_Delay_Statement);\n    pragma Inline (Set_Delta_Expression);\n    pragma Inline (Set_Digits_Expression);\n@@ -11029,6 +11067,8 @@ package Sinfo is\n    pragma Inline (Set_Handler_List_Entry);\n    pragma Inline (Set_Has_Created_Identifier);\n    pragma Inline (Set_Has_Dynamic_Length_Check);\n+   pragma Inline (Set_Has_Init_Expression);\n+   pragma Inline (Set_Has_Local_Raise);\n    pragma Inline (Set_Has_Dynamic_Range_Check);\n    pragma Inline (Set_Has_No_Elaboration_Code);\n    pragma Inline (Set_Has_Priority_Pragma);\n@@ -11060,6 +11100,7 @@ package Sinfo is\n    pragma Inline (Set_Is_Power_Of_2_For_Shift);\n    pragma Inline (Set_Is_Protected_Subprogram_Body);\n    pragma Inline (Set_Has_Self_Reference);\n+   pragma Inline (Set_Is_Static_Coextension);\n    pragma Inline (Set_Is_Static_Expression);\n    pragma Inline (Set_Is_Subprogram_Descriptor);\n    pragma Inline (Set_Is_Task_Allocation_Block);\n@@ -11131,6 +11172,7 @@ package Sinfo is\n    pragma Inline (Set_Reason);\n    pragma Inline (Set_Record_Extension_Part);\n    pragma Inline (Set_Redundant_Use);\n+   pragma Inline (Set_Renaming_Exception);\n    pragma Inline (Set_Result_Definition);\n    pragma Inline (Set_Return_Object_Declarations);\n    pragma Inline (Set_Reverse_Present);"}]}