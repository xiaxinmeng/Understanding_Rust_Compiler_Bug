{"sha": "f871d7f9f458d833fc2c388d2756a7a82cf2be40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg3MWQ3ZjlmNDU4ZDgzM2ZjMmMzODhkMjc1NmE3YTgyY2YyYmU0MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-11-12T11:54:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-11-12T11:54:08Z"}, "message": "LWG DR 2315. weak_ptr should be movable\n\n\t* include/bits/shared_ptr.h (weak_ptr): Add move constructor and\n\tassignment.\n\t* include/bits/shared_ptr_base.h (__weak_count, __weak_ptr): Likewise.\n\tUse nullptr and injected class name.\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error.\n\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Adjust dg-error.\n\nFrom-SVN: r217413", "tree": {"sha": "ce45a32b179858152f2c04deda5517a3b88788d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce45a32b179858152f2c04deda5517a3b88788d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f871d7f9f458d833fc2c388d2756a7a82cf2be40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f871d7f9f458d833fc2c388d2756a7a82cf2be40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f871d7f9f458d833fc2c388d2756a7a82cf2be40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f871d7f9f458d833fc2c388d2756a7a82cf2be40/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "098c88fb10cb10d63dc3b64b09116af0f95a4a82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098c88fb10cb10d63dc3b64b09116af0f95a4a82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098c88fb10cb10d63dc3b64b09116af0f95a4a82"}], "stats": {"total": 121, "additions": 99, "deletions": 22}, "files": [{"sha": "30a3ba6e5aebdde62d9edc28e80907f753f4129b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f871d7f9f458d833fc2c388d2756a7a82cf2be40/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f871d7f9f458d833fc2c388d2756a7a82cf2be40/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f871d7f9f458d833fc2c388d2756a7a82cf2be40", "patch": "@@ -1,3 +1,12 @@\n+2014-11-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/shared_ptr.h (weak_ptr): Add move constructor and\n+\tassignment.\n+\t* include/bits/shared_ptr_base.h (__weak_count, __weak_ptr): Likewise.\n+\tUse nullptr and injected class name.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error.\n+\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Adjust dg-error.\n+\n 2014-11-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/33911"}, {"sha": "c2d56eb7170169e7e15f4c580647e5285bdf446d", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f871d7f9f458d833fc2c388d2756a7a82cf2be40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f871d7f9f458d833fc2c388d2756a7a82cf2be40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=f871d7f9f458d833fc2c388d2756a7a82cf2be40", "patch": "@@ -465,19 +465,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class weak_ptr : public __weak_ptr<_Tp>\n     {\n     public:\n-      constexpr weak_ptr() noexcept\n-      : __weak_ptr<_Tp>() { }\n+      constexpr weak_ptr() noexcept = default;\n \n       template<typename _Tp1, typename = typename\n \t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n-\tweak_ptr(const weak_ptr<_Tp1>& __r) noexcept\n+\tweak_ptr(const shared_ptr<_Tp1>& __r) noexcept\n \t: __weak_ptr<_Tp>(__r) { }\n \n+      weak_ptr(const weak_ptr&) noexcept = default;\n+\n       template<typename _Tp1, typename = typename\n \t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n-\tweak_ptr(const shared_ptr<_Tp1>& __r) noexcept\n+\tweak_ptr(const weak_ptr<_Tp1>& __r) noexcept\n \t: __weak_ptr<_Tp>(__r) { }\n \n+      weak_ptr(weak_ptr&&) noexcept = default;\n+\n+      template<typename _Tp1, typename = typename\n+\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+\tweak_ptr(weak_ptr<_Tp1>&& __r) noexcept\n+\t: __weak_ptr<_Tp>(std::move(__r)) { }\n+\n+      weak_ptr&\n+      operator=(const weak_ptr& __r) noexcept = default;\n+\n       template<typename _Tp1>\n \tweak_ptr&\n \toperator=(const weak_ptr<_Tp1>& __r) noexcept\n@@ -494,6 +505,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return *this;\n \t}\n \n+      weak_ptr&\n+      operator=(weak_ptr&& __r) noexcept = default;\n+\n+      template<typename _Tp1>\n+\tweak_ptr&\n+\toperator=(weak_ptr<_Tp1>&& __r) noexcept\n+\t{\n+\t  this->__weak_ptr<_Tp>::operator=(std::move(__r));\n+\t  return *this;\n+\t}\n+\n       shared_ptr<_Tp>\n       lock() const noexcept\n       { return shared_ptr<_Tp>(*this, std::nothrow); }"}, {"sha": "ea74000eb0918cfa6b504ee8fd734f2d7251b89e", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 62, "deletions": 16, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f871d7f9f458d833fc2c388d2756a7a82cf2be40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f871d7f9f458d833fc2c388d2756a7a82cf2be40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=f871d7f9f458d833fc2c388d2756a7a82cf2be40", "patch": "@@ -721,55 +721,69 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __weak_count\n     {\n     public:\n-      constexpr __weak_count() noexcept : _M_pi(0)\n+      constexpr __weak_count() noexcept : _M_pi(nullptr)\n       { }\n \n       __weak_count(const __shared_count<_Lp>& __r) noexcept\n       : _M_pi(__r._M_pi)\n       {\n-\tif (_M_pi != 0)\n+\tif (_M_pi != nullptr)\n \t  _M_pi->_M_weak_add_ref();\n       }\n \n-      __weak_count(const __weak_count<_Lp>& __r) noexcept\n+      __weak_count(const __weak_count& __r) noexcept\n       : _M_pi(__r._M_pi)\n       {\n-\tif (_M_pi != 0)\n+\tif (_M_pi != nullptr)\n \t  _M_pi->_M_weak_add_ref();\n       }\n \n+      __weak_count(__weak_count&& __r) noexcept\n+      : _M_pi(__r._M_pi)\n+      { __r._M_pi = nullptr; }\n+\n       ~__weak_count() noexcept\n       {\n-\tif (_M_pi != 0)\n+\tif (_M_pi != nullptr)\n \t  _M_pi->_M_weak_release();\n       }\n \n-      __weak_count<_Lp>&\n+      __weak_count&\n       operator=(const __shared_count<_Lp>& __r) noexcept\n       {\n \t_Sp_counted_base<_Lp>* __tmp = __r._M_pi;\n-\tif (__tmp != 0)\n+\tif (__tmp != nullptr)\n \t  __tmp->_M_weak_add_ref();\n-\tif (_M_pi != 0)\n+\tif (_M_pi != nullptr)\n \t  _M_pi->_M_weak_release();\n \t_M_pi = __tmp;\n \treturn *this;\n       }\n \n-      __weak_count<_Lp>&\n-      operator=(const __weak_count<_Lp>& __r) noexcept\n+      __weak_count&\n+      operator=(const __weak_count& __r) noexcept\n       {\n \t_Sp_counted_base<_Lp>* __tmp = __r._M_pi;\n-\tif (__tmp != 0)\n+\tif (__tmp != nullptr)\n \t  __tmp->_M_weak_add_ref();\n-\tif (_M_pi != 0)\n+\tif (_M_pi != nullptr)\n \t  _M_pi->_M_weak_release();\n \t_M_pi = __tmp;\n \treturn *this;\n       }\n \n+      __weak_count&\n+      operator=(__weak_count&& __r) noexcept\n+      {\n+\tif (_M_pi != nullptr)\n+\t  _M_pi->_M_weak_release();\n+\t_M_pi = __r._M_pi;\n+        __r._M_pi = nullptr;\n+\treturn *this;\n+      }\n+\n       void\n-      _M_swap(__weak_count<_Lp>& __r) noexcept\n+      _M_swap(__weak_count& __r) noexcept\n       {\n \t_Sp_counted_base<_Lp>* __tmp = __r._M_pi;\n \t__r._M_pi = _M_pi;\n@@ -778,7 +792,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       long\n       _M_get_use_count() const noexcept\n-      { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }\n+      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }\n \n       bool\n       _M_less(const __weak_count& __rhs) const noexcept\n@@ -1321,11 +1335,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tp element_type;\n \n       constexpr __weak_ptr() noexcept\n-      : _M_ptr(0), _M_refcount()\n+      : _M_ptr(nullptr), _M_refcount()\n       { }\n \n       __weak_ptr(const __weak_ptr&) noexcept = default;\n-      __weak_ptr& operator=(const __weak_ptr&) noexcept = default;\n+\n       ~__weak_ptr() = default;\n \n       // The \"obvious\" converting constructor implementation:\n@@ -1354,6 +1368,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)\n \t{ }\n \n+      __weak_ptr(__weak_ptr&& __r) noexcept\n+      : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount))\n+      { __r._M_ptr = nullptr; }\n+\n+      template<typename _Tp1, typename = typename\n+\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+\t__weak_ptr(__weak_ptr<_Tp1, _Lp>&& __r) noexcept\n+\t: _M_ptr(__r.lock().get()), _M_refcount(std::move(__r._M_refcount))\n+        { __r._M_ptr = nullptr; }\n+\n+      __weak_ptr&\n+      operator=(const __weak_ptr& __r) noexcept = default;\n+\n       template<typename _Tp1>\n \t__weak_ptr&\n \toperator=(const __weak_ptr<_Tp1, _Lp>& __r) noexcept\n@@ -1372,6 +1399,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return *this;\n \t}\n \n+      __weak_ptr&\n+      operator=(__weak_ptr&& __r) noexcept\n+      {\n+\t_M_ptr = __r._M_ptr;\n+\t_M_refcount = std::move(__r._M_refcount);\n+\t__r._M_ptr = nullptr;\n+\treturn *this;\n+      }\n+\n+      template<typename _Tp1>\n+\t__weak_ptr&\n+\toperator=(__weak_ptr<_Tp1, _Lp>&& __r) noexcept\n+\t{\n+\t  _M_ptr = __r.lock().get();\n+\t  _M_refcount = std::move(__r._M_refcount);\n+\t  __r._M_ptr = nullptr;\n+\t  return *this;\n+\t}\n+\n       __shared_ptr<_Tp, _Lp>\n       lock() const noexcept\n       { return __shared_ptr<element_type, _Lp>(*this, std::nothrow); }"}, {"sha": "be33279510a29c03f166c63d057b6f3b81b93791", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f871d7f9f458d833fc2c388d2756a7a82cf2be40/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f871d7f9f458d833fc2c388d2756a7a82cf2be40/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=f871d7f9f458d833fc2c388d2756a7a82cf2be40", "patch": "@@ -32,7 +32,7 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 864 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 878 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 307 }"}, {"sha": "17e036f5f44390e5cc1ed7df0de42dc2b7d81620", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/void_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f871d7f9f458d833fc2c388d2756a7a82cf2be40/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f871d7f9f458d833fc2c388d2756a7a82cf2be40/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc?ref=f871d7f9f458d833fc2c388d2756a7a82cf2be40", "patch": "@@ -25,5 +25,5 @@\n void test01()\n {\n   std::shared_ptr<void> p((void*)nullptr);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 863 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 877 }\n }"}]}