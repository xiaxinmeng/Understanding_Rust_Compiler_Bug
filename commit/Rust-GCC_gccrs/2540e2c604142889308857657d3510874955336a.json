{"sha": "2540e2c604142889308857657d3510874955336a", "node_id": "C_kwDOANBUbNoAKDI1NDBlMmM2MDQxNDI4ODkzMDg4NTc2NTdkMzUxMDg3NDk1NTMzNmE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-20T20:16:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-24T19:49:27Z"}, "message": "c++: constexpr empty base redux [PR105622]\n\nHere calling the constructor for s.__size_ had ctx->ctor for s itself\nbecause cxx_eval_store_expression doesn't create a ctor for the empty field.\nThen cxx_eval_call_expression returned the s initializer, and my empty base\noverhaul in r13-160 got confused because the type of init is not an empty\nclass.  But that's OK, we should be checking the type of the original LHS\ninstead.  We also want to use initialized_type in the condition, in case\ninit is an AGGR_INIT_EXPR.\n\nI spent quite a while working on more complex solutions before coming back\nto this simple one.\n\n\tPR c++/105622\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_store_expression): Adjust assert.\n\tUse initialized_type.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/no_unique_address14.C: New test.", "tree": {"sha": "789bb80c29cf6b4eb7eec0ccd86c2eb840f945b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/789bb80c29cf6b4eb7eec0ccd86c2eb840f945b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2540e2c604142889308857657d3510874955336a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2540e2c604142889308857657d3510874955336a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2540e2c604142889308857657d3510874955336a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2540e2c604142889308857657d3510874955336a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae8decf1d2b8329af59592b4fa78ee8dfab3ba5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8decf1d2b8329af59592b4fa78ee8dfab3ba5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae8decf1d2b8329af59592b4fa78ee8dfab3ba5e"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "0f1a43982d071843c93f608d9392f6238f5c13c0", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2540e2c604142889308857657d3510874955336a/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2540e2c604142889308857657d3510874955336a/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=2540e2c604142889308857657d3510874955336a", "patch": "@@ -5916,15 +5916,15 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n   gcc_checking_assert (!*valp || (same_type_ignoring_top_level_qualifiers_p\n \t\t\t\t  (TREE_TYPE (*valp), type)));\n   if (empty_base || !(same_type_ignoring_top_level_qualifiers_p\n-\t\t      (TREE_TYPE (init), type)))\n+\t\t      (initialized_type (init), type)))\n     {\n       /* For initialization of an empty base, the original target will be\n        *(base*)this, evaluation of which resolves to the object\n        argument, which has the derived type rather than the base type.  In\n        this situation, just evaluate the initializer and return, since\n        there's no actual data to store, and we didn't build a CONSTRUCTOR.  */\n+      gcc_assert (is_empty_class (TREE_TYPE (target)));\n       empty_base = true;\n-      gcc_assert (is_empty_class (TREE_TYPE (init)));\n       if (!*valp)\n \t{\n \t  /* But do make sure we have something in *valp.  */"}, {"sha": "d3fcd4ad354cbe111edf908aaa2b802f7b6d06a0", "filename": "gcc/testsuite/g++.dg/cpp2a/no_unique_address14.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2540e2c604142889308857657d3510874955336a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2540e2c604142889308857657d3510874955336a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address14.C?ref=2540e2c604142889308857657d3510874955336a", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/105622\n+// { dg-do compile { target c++20 } }\n+\n+struct empty {\n+  empty() = default;\n+  constexpr empty(int) { }\n+};\n+\n+struct container {\n+  empty __begin_ = {};\n+  [[no_unique_address]] empty __size_ = 0;\n+};\n+\n+constexpr bool test() {\n+  container s;\n+  return true;\n+}\n+static_assert(test());\n+"}]}