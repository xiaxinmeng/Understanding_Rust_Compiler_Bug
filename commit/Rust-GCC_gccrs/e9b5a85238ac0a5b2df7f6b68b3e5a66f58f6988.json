{"sha": "e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "node_id": "C_kwDOANBUbNoAKGU5YjVhODUyMzhhYzBhNWIyZGY3ZjZiNjhiM2U1YTY2ZjU4ZjY5ODg", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T23:40:50Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:46:25Z"}, "message": "RISC-V: Add vloxei64 C++ API intrinsic testcase\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vloxei64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei64_tumu-3.C: New test.", "tree": {"sha": "e9d7e7302be9e9a2d3c6e8d9cc43a999d47c266a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9d7e7302be9e9a2d3c6e8d9cc43a999d47c266a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5ce6efaab38d80fc32f43ca4331899a8afaea6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5ce6efaab38d80fc32f43ca4331899a8afaea6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5ce6efaab38d80fc32f43ca4331899a8afaea6a"}], "stats": {"total": 4698, "additions": 4698, "deletions": 0}, "files": [{"sha": "303a8e16ef1c66e8feb3d16e67eb1eac95c47abd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64-1.C", "status": "added", "additions": 518, "deletions": 0, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64-1.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,518 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64(const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64(const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64(const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64(const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64(const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64(const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64(const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64(const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64(const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64(const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64(const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64(const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64(const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64(const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64(const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64(const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64(const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64(const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64(const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64(const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64(const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64(const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64(const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64(const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64(const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64(const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64(const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64(const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64(const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64(const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64(const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64(const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64(const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64(const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64(const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64(const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64(const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64(const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64(const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64(const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vloxei64(vbool64_t mask,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64(vbool32_t mask,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64(vbool16_t mask,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64(vbool8_t mask,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64(vbool64_t mask,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64(vbool32_t mask,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64(vbool16_t mask,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64(vbool8_t mask,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64(vbool64_t mask,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64(vbool32_t mask,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64(vbool16_t mask,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64(vbool8_t mask,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64(vbool64_t mask,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64(vbool32_t mask,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64(vbool16_t mask,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64(vbool8_t mask,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64(vbool64_t mask,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64(vbool32_t mask,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64(vbool16_t mask,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64(vbool8_t mask,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64(vbool64_t mask,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64(vbool32_t mask,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64(vbool16_t mask,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64(vbool8_t mask,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64(vbool64_t mask,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64(vbool32_t mask,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64(vbool16_t mask,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64(vbool8_t mask,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64(vbool64_t mask,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64(vbool32_t mask,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64(vbool16_t mask,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64(vbool8_t mask,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64(vbool64_t mask,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64(vbool32_t mask,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64(vbool16_t mask,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64(vbool8_t mask,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64(vbool64_t mask,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64(vbool32_t mask,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64(vbool16_t mask,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64(vbool8_t mask,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "d70087ea9fc06b2f4bc37b444702f1fcf37a6c8c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64-2.C", "status": "added", "additions": 518, "deletions": 0, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64-2.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,518 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64(const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64(const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64(const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64(const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64(const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64(const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64(const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64(const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64(const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64(const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64(const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64(const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64(const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64(const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64(const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64(const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64(const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64(const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64(const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64(const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64(const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64(const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64(const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64(const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64(const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64(const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64(const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64(const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64(const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64(const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64(const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64(const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64(const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64(const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64(const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64(const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64(const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64(const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64(const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64(const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vloxei64(vbool64_t mask,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64(vbool32_t mask,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64(vbool16_t mask,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64(vbool8_t mask,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64(vbool64_t mask,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64(vbool32_t mask,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64(vbool16_t mask,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64(vbool8_t mask,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64(vbool64_t mask,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64(vbool32_t mask,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64(vbool16_t mask,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64(vbool8_t mask,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64(vbool64_t mask,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64(vbool32_t mask,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64(vbool16_t mask,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64(vbool8_t mask,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64(vbool64_t mask,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64(vbool32_t mask,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64(vbool16_t mask,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64(vbool8_t mask,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64(vbool64_t mask,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64(vbool32_t mask,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64(vbool16_t mask,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64(vbool8_t mask,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64(vbool64_t mask,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64(vbool32_t mask,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64(vbool16_t mask,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64(vbool8_t mask,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64(vbool64_t mask,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64(vbool32_t mask,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64(vbool16_t mask,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64(vbool8_t mask,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64(vbool64_t mask,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64(vbool32_t mask,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64(vbool16_t mask,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64(vbool8_t mask,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64(vbool64_t mask,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64(vbool32_t mask,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64(vbool16_t mask,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64(vbool8_t mask,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "a239fcc7fc9ab30329efdc95fa468f8a837c258c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64-3.C", "status": "added", "additions": 518, "deletions": 0, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64-3.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,518 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64(const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64(const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64(const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64(const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64(const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64(const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64(const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64(const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64(const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64(const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64(const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64(const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64(const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64(const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64(const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64(const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64(const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64(const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64(const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64(const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64(const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64(const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64(const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64(const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64(const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64(const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64(const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64(const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64(const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64(const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64(const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64(const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64(const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64(const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64(const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64(const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64(const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64(const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64(const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64(const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(base,bindex,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vloxei64(vbool64_t mask,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64(vbool32_t mask,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64(vbool16_t mask,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64(vbool8_t mask,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64(vbool64_t mask,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64(vbool32_t mask,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64(vbool16_t mask,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64(vbool8_t mask,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64(vbool64_t mask,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64(vbool32_t mask,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64(vbool16_t mask,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64(vbool8_t mask,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64(vbool64_t mask,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64(vbool32_t mask,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64(vbool16_t mask,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64(vbool8_t mask,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64(vbool64_t mask,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64(vbool32_t mask,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64(vbool16_t mask,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64(vbool8_t mask,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64(vbool64_t mask,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64(vbool32_t mask,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64(vbool16_t mask,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64(vbool8_t mask,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64(vbool64_t mask,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64(vbool32_t mask,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64(vbool16_t mask,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64(vbool8_t mask,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64(vbool64_t mask,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64(vbool32_t mask,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64(vbool16_t mask,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64(vbool8_t mask,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64(vbool64_t mask,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64(vbool32_t mask,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64(vbool16_t mask,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64(vbool8_t mask,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64(vbool64_t mask,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64(vbool32_t mask,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64(vbool16_t mask,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64(vbool8_t mask,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64(mask,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "445cfc1878871461f4a4459292eae7b8be7b3e60", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_mu-1.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_mu-1.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "a6146a0dc444528b75a382e93faee84e0f38149e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_mu-2.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_mu-2.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "503a07f8e0bad17dddb55d32f9fe3307cda9089b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_mu-3.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_mu-3.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "089fa9e5d480fb75dc334ac03332ef93c07923ed", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_tu-1.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tu-1.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_tu(vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_tu(vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_tu(vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_tu(vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_tu(vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_tu(vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_tu(vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_tu(vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_tu(vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_tu(vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_tu(vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_tu(vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_tu(vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_tu(vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_tu(vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_tu(vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_tu(vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_tu(vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_tu(vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_tu(vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_tu(vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_tu(vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_tu(vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_tu(vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_tu(vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_tu(vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_tu(vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_tu(vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_tu(vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_tu(vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_tu(vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_tu(vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_tu(vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_tu(vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_tu(vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_tu(vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_tu(vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_tu(vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_tu(vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_tu(vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "e8eddbee6aeed1996059593b9cc504ecec3544ed", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_tu-2.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tu-2.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_tu(vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_tu(vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_tu(vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_tu(vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_tu(vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_tu(vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_tu(vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_tu(vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_tu(vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_tu(vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_tu(vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_tu(vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_tu(vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_tu(vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_tu(vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_tu(vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_tu(vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_tu(vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_tu(vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_tu(vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_tu(vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_tu(vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_tu(vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_tu(vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_tu(vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_tu(vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_tu(vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_tu(vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_tu(vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_tu(vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_tu(vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_tu(vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_tu(vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_tu(vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_tu(vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_tu(vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_tu(vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_tu(vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_tu(vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_tu(vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "855fbfae40f385b63a868938a95cbdac0f749631", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_tu-3.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tu-3.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_tu(vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_tu(vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_tu(vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_tu(vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_tu(vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_tu(vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_tu(vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_tu(vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_tu(vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_tu(vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_tu(vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_tu(vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_tu(vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_tu(vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_tu(vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_tu(vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_tu(vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_tu(vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_tu(vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_tu(vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_tu(vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_tu(vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_tu(vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_tu(vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_tu(vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_tu(vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_tu(vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_tu(vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_tu(vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_tu(vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_tu(vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_tu(vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_tu(vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_tu(vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_tu(vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_tu(vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_tu(vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_tu(vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_tu(vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_tu(vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "323e4d415aef2bc5295bc56a4588b79bae62111b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_tum-1.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tum-1.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "13c17d7aa0b2e9b081da640360ac451e219731e6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_tum-2.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tum-2.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "ed2d5e441ef2c03a99125f9f6763a63fdfdff2f6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_tum-3.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tum-3.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "5f34be5362a91d5c03ca8b0e218abffdba80ce8a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_tumu-1.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tumu-1.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "85bbb3b2e81db3ece51470ed0c73a9a4d8e26ed3", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_tumu-2.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tumu-2.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "057af5a44bea6300ec480cb102fcf01978e81d3a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei64_tumu-3.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei64_tumu-3.C?ref=e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei64_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei64_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei64_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei64_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei64_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei64_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei64_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei64_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei64_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei64_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei64_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei64_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei64_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei64_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei64_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei64_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei64_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei64_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei64_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei64_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei64_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei64_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei64_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei64_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei64_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei64_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei64_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei64_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vloxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}]}