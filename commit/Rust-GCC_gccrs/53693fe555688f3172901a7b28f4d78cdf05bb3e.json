{"sha": "53693fe555688f3172901a7b28f4d78cdf05bb3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM2OTNmZTU1NTY4OGYzMTcyOTAxYTdiMjhmNGQ3OGNkZjA1YmIzZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-07T21:35:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-07T21:35:26Z"}, "message": "(reload_inqi): Make operand[2] be TImode and pass register number that differs to unaligned_loadqi.\n\n(reload_inqi): Make operand[2] be TImode and pass register number that\ndiffers to unaligned_loadqi.\n(reload_outqi): Change overlap in temps to unaligned_storeqi.\n\nFrom-SVN: r7672", "tree": {"sha": "b9dd581687210bfda58bd2a7a45e7cb947c0d049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9dd581687210bfda58bd2a7a45e7cb947c0d049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53693fe555688f3172901a7b28f4d78cdf05bb3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53693fe555688f3172901a7b28f4d78cdf05bb3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53693fe555688f3172901a7b28f4d78cdf05bb3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53693fe555688f3172901a7b28f4d78cdf05bb3e/comments", "author": null, "committer": null, "parents": [{"sha": "aadfb0628055fef00f3a65f8f951a51aa1d1229f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aadfb0628055fef00f3a65f8f951a51aa1d1229f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aadfb0628055fef00f3a65f8f951a51aa1d1229f"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "07b7dd31ae6dbdad1319c039ec4f8251159cfccd", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53693fe555688f3172901a7b28f4d78cdf05bb3e/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53693fe555688f3172901a7b28f4d78cdf05bb3e/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=53693fe555688f3172901a7b28f4d78cdf05bb3e", "patch": "@@ -2929,7 +2929,7 @@\n ;; For the unaligned byte case, we use code similar to that in the\n ;; Architecture book, but reordered to lower the number of registers\n ;; required.  Operand 0 is the address.  Operand 1 is the data to store.\n-;; Operands 2, 3, and 4 are DImode temporaries, where the last two may\n+;; Operands 2, 3, and 4 are DImode temporaries, where operands 2 and 4 may\n ;; be the same temporary, if desired.  If the address is in a register,\n ;; operand 2 can be that register.\n \n@@ -3193,12 +3193,18 @@\n (define_expand \"reload_inqi\"\n   [(parallel [(match_operand:QI 0 \"register_operand\" \"=r\")\n \t      (match_operand:QI 1 \"unaligned_memory_operand\" \"m\")\n-\t      (match_operand:DI 2 \"register_operand\" \"=&r\")])]\n+\t      (match_operand:TI 2 \"register_operand\" \"=&r\")])]\n   \"\"\n   \"\n { extern rtx get_unaligned_address ();\n   rtx addr = get_unaligned_address (operands[1]);\n-  rtx seq = gen_unaligned_loadqi (operands[0], addr, operands[2],\n+  /* It is possible that one of the registers we got for operands[2]\n+     might co-incide with that of operands[0] (which is why we made\n+     it TImode).  Pick the other one to use as our scratch.  */\n+  rtx scratch = gen_rtx (REG, DImode,\n+\t\t\t REGNO (operands[0]) == REGNO (operands[2]) \n+\t\t\t ? REGNO (operands[2]) + 1 : REGNO (operands[2]));\n+  rtx seq = gen_unaligned_loadqi (operands[0], addr, scratch,\n \t\t\t\t  gen_rtx (REG, DImode, REGNO (operands[0])));\n \n   alpha_set_memflags (seq, operands[1]);\n@@ -3260,7 +3266,7 @@\n \tscratch1 = addr;\n \n       seq = gen_unaligned_storeqi (addr, operands[1], scratch1,\n-\t\t\t\t   scratch2, scratch2);\n+\t\t\t\t   scratch2, scratch1);\n       alpha_set_memflags (seq, operands[0]);\n       emit_insn (seq);\n     }"}]}