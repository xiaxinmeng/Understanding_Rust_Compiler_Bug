{"sha": "3b3cc26bcc127eceeb6d257313555fc2149cf6d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IzY2MyNmJjYzEyN2VjZWViNmQyNTczMTM1NTVmYzIxNDljZjZkNA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2013-09-18T02:01:07Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2013-09-18T02:01:07Z"}, "message": "arm.c (thumb1_reorg): Search for flag setting insn before branch in same basic block.\n\n\n\t* config/arm/arm.c (thumb1_reorg): Search for flag setting insn\n\tbefore branch in same basic block.  Check both src and dest of\n\tthe move insn.\n\nFrom-SVN: r202678", "tree": {"sha": "9370908234dca1d39c9210241fe1b059ef0b395f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9370908234dca1d39c9210241fe1b059ef0b395f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b3cc26bcc127eceeb6d257313555fc2149cf6d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3cc26bcc127eceeb6d257313555fc2149cf6d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b3cc26bcc127eceeb6d257313555fc2149cf6d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3cc26bcc127eceeb6d257313555fc2149cf6d4/comments", "author": null, "committer": null, "parents": [{"sha": "b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ba3a9b55ea2462b54b5fcd14476182e3f93fe4"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "3524ca852e43ae7908777a177e475941ec963769", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3cc26bcc127eceeb6d257313555fc2149cf6d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3cc26bcc127eceeb6d257313555fc2149cf6d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b3cc26bcc127eceeb6d257313555fc2149cf6d4", "patch": "@@ -1,3 +1,9 @@\n+2013-09-18  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* config/arm/arm.c (thumb1_reorg): Search for flag setting insn\n+\tbefore branch in same basic block.  Check both src and dest of\n+\tthe move insn.\n+\n 2013-09-17  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/rl78-real.md (bf): New pattern."}, {"sha": "176f719e483225848234b75e77589b018ac119fa", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3cc26bcc127eceeb6d257313555fc2149cf6d4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3cc26bcc127eceeb6d257313555fc2149cf6d4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3b3cc26bcc127eceeb6d257313555fc2149cf6d4", "patch": "@@ -14265,9 +14265,10 @@ thumb1_reorg (void)\n \n   FOR_EACH_BB (bb)\n     {\n-      rtx set, dest, src;\n-      rtx pat, op0;\n+      rtx dest, src;\n+      rtx pat, op0, set = NULL;\n       rtx prev, insn = BB_END (bb);\n+      bool insn_clobbered = false;\n \n       while (insn != BB_HEAD (bb) && DEBUG_INSN_P (insn))\n \tinsn = PREV_INSN (insn);\n@@ -14276,13 +14277,29 @@ thumb1_reorg (void)\n       if (INSN_CODE (insn) != CODE_FOR_cbranchsi4_insn)\n \tcontinue;\n \n-      /* Find the first non-note insn before INSN in basic block BB.  */\n+      /* Get the register with which we are comparing.  */\n+      pat = PATTERN (insn);\n+      op0 = XEXP (XEXP (SET_SRC (pat), 0), 0);\n+\n+      /* Find the first flag setting insn before INSN in basic block BB.  */\n       gcc_assert (insn != BB_HEAD (bb));\n-      prev = PREV_INSN (insn);\n-      while (prev != BB_HEAD (bb) && (NOTE_P (prev) || DEBUG_INSN_P (prev)))\n-\tprev = PREV_INSN (prev);\n+      for (prev = PREV_INSN (insn);\n+\t   (!insn_clobbered\n+\t    && prev != BB_HEAD (bb)\n+\t    && (NOTE_P (prev)\n+\t\t|| DEBUG_INSN_P (prev)\n+\t\t|| ((set = single_set (prev)) != NULL\n+\t\t    && get_attr_conds (prev) == CONDS_NOCOND)));\n+\t   prev = PREV_INSN (prev))\n+\t{\n+\t  if (reg_set_p (op0, prev))\n+\t    insn_clobbered = true;\n+\t}\n+\n+      /* Skip if op0 is clobbered by insn other than prev. */\n+      if (insn_clobbered)\n+\tcontinue;\n \n-      set = single_set (prev);\n       if (!set)\n \tcontinue;\n \n@@ -14292,12 +14309,9 @@ thumb1_reorg (void)\n \t  || !low_register_operand (src, SImode))\n \tcontinue;\n \n-      pat = PATTERN (insn);\n-      op0 = XEXP (XEXP (SET_SRC (pat), 0), 0);\n       /* Rewrite move into subtract of 0 if its operand is compared with ZERO\n-\t in INSN. Don't need to check dest since cprop_hardreg pass propagates\n-\t src into INSN.  */\n-      if (REGNO (op0) == REGNO (src))\n+\t in INSN.  Both src and dest of the move insn are checked.  */\n+      if (REGNO (op0) == REGNO (src) || REGNO (op0) == REGNO (dest))\n \t{\n \t  dest = copy_rtx (dest);\n \t  src = copy_rtx (src);"}]}