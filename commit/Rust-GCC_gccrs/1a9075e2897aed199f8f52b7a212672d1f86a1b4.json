{"sha": "1a9075e2897aed199f8f52b7a212672d1f86a1b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE5MDc1ZTI4OTdhZWQxOTlmOGY1MmI3YTIxMjY3MmQxZjg2YTFiNA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2007-06-12T15:39:15Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2007-06-12T15:39:15Z"}, "message": "gcov.c: Comments updated.\n\n\t* gcov.c: Comments updated.\n\t(source_info): Add file_time field.\n\t(source_index): New variable.\n\t(mutiple_files): New variable.\n\t(generate_results): New function extracted from process_file.\n\t(process_file): Save and restore chain of functions, generate\n\tresults and free structures only if not merging results.\n\t(release_structures): File names are now freed in create_file_names\n\t(create_file_names): Free previous file names.\n\t(find_source): File date is now read here and modifications in\n\tsource files is checked here.\n\t(read_graph_file): Only reverse order of functions for the current\n\tobject file.\n\t(make_gcov_file_name): Do not generate long names if input_name is\n\tNULL.\n\t(output_lines): If merging results do not display graph, data and \n\truns informations.\n\tChecking source file modification is done in find_source.\n\n\t* doc/gcov.texi: Append an s to sourcefile.\n\nFrom-SVN: r125649", "tree": {"sha": "82141cd675d6e571f4eeb980cf675b2b4f5ecce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82141cd675d6e571f4eeb980cf675b2b4f5ecce0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a9075e2897aed199f8f52b7a212672d1f86a1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9075e2897aed199f8f52b7a212672d1f86a1b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9075e2897aed199f8f52b7a212672d1f86a1b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9075e2897aed199f8f52b7a212672d1f86a1b4/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b18e284e3c375396e2644ca74e28852b0756c468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b18e284e3c375396e2644ca74e28852b0756c468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b18e284e3c375396e2644ca74e28852b0756c468"}], "stats": {"total": 187, "additions": 132, "deletions": 55}, "files": [{"sha": "06501a81bdead9571205bd8215bef6177dd08dd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9075e2897aed199f8f52b7a212672d1f86a1b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9075e2897aed199f8f52b7a212672d1f86a1b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a9075e2897aed199f8f52b7a212672d1f86a1b4", "patch": "@@ -1,3 +1,26 @@\n+2007-06-12  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gcov.c: Comments updated.\n+\t(source_info): Add file_time field.\n+\t(source_index): New variable.\n+\t(mutiple_files): New variable.\n+\t(generate_results): New function extracted from process_file.\n+\t(process_file): Save and restore chain of functions, generate\n+\tresults and free structures only if not merging results.\n+\t(release_structures): File names are now freed in create_file_names\n+\t(create_file_names): Free previous file names.\n+\t(find_source): File date is now read here and modifications in\n+\tsource files is checked here.\n+\t(read_graph_file): Only reverse order of functions for the current\n+\tobject file.\n+\t(make_gcov_file_name): Do not generate long names if input_name is\n+\tNULL.\n+\t(output_lines): If merging results do not display graph, data and \n+\truns informations.\n+\tChecking source file modification is done in find_source.\n+\n+\t* doc/gcov.texi: Append an s to sourcefile.\n+\n 2007-06-12  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.md (UNSPEC_NOP): New constant."}, {"sha": "1f9f5e80122843b3a06fafdc4d6b73dbe783664b", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9075e2897aed199f8f52b7a212672d1f86a1b4/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9075e2897aed199f8f52b7a212672d1f86a1b4/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=1a9075e2897aed199f8f52b7a212672d1f86a1b4", "patch": "@@ -113,7 +113,7 @@ compatible with any other profiling or test coverage mechanism.\n @section Invoking @command{gcov}\n \n @smallexample\n-gcov @r{[}@var{options}@r{]} @var{sourcefile}\n+gcov @r{[}@var{options}@r{]} @var{sourcefiles}\n @end smallexample\n \n @command{gcov} accepts the following options:\n@@ -128,7 +128,7 @@ gcov [@option{-v}|@option{--version}] [@option{-h}|@option{--help}]\n      [@option{-l}|@option{--long-file-names}]\n      [@option{-p}|@option{--preserve-paths}]\n      [@option{-f}|@option{--function-summaries}]\n-     [@option{-o}|@option{--object-directory} @var{directory|file}] @var{sourcefile}\n+     [@option{-o}|@option{--object-directory} @var{directory|file}] @var{sourcefiles}\n      [@option{-u}|@option{--unconditional-branches}]\n @c man end\n @c man begin SEEALSO"}, {"sha": "b177b53cf0f7cf4e5c04050e92c6de78515eb66a", "filename": "gcc/gcov.c", "status": "modified", "additions": 107, "deletions": 53, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9075e2897aed199f8f52b7a212672d1f86a1b4/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9075e2897aed199f8f52b7a212672d1f86a1b4/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=1a9075e2897aed199f8f52b7a212672d1f86a1b4", "patch": "@@ -29,15 +29,6 @@ Boston, MA 02110-1301, USA.  */\n /* ??? Should have an option to print the number of basic blocks, and the\n    percent of them that are covered.  */\n \n-/* ??? Does not correctly handle the case where two .bb files refer to\n-   the same included source file.  For example, if one has a short\n-   file containing only inline functions, which is then included in\n-   two other files, then there will be two .bb files which refer to\n-   the include file, but there is no way to get the total execution\n-   counts for the included file, can only get execution counts for one\n-   or the other of the including files. this can be fixed by --ratios\n-   --long-file-names --preserve-paths and perl.  */\n-\n /* Need an option to show individual block counts, and show\n    probabilities of fall through arcs.  */\n \n@@ -54,7 +45,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"gcov-io.h\"\n #include \"gcov-io.c\"\n \n-/* The bbg file is generated by -ftest-coverage option. The da file is\n+/* The gcno file is generated by -ftest-coverage option. The gcda file is\n    generated by a program compiled with -fprofile-arcs. Their formats\n    are documented in gcov-io.h.  */\n \n@@ -234,6 +225,7 @@ typedef struct source_info\n   /* Name of source file.  */\n   char *name;\n   unsigned index;\n+  time_t file_time;\n \n   /* Array of line information.  */\n   line_t *lines;\n@@ -253,10 +245,15 @@ typedef struct source_info\n \n static function_t *functions;\n \n-/* This points to the head of the sourcefile structure list.  */\n+/* This points to the head of the sourcefile structure list.  New elements\n+   are always prepended.  */\n \n static source_t *sources;\n \n+/* Next index for a source file.  */\n+\n+static unsigned source_index;\n+\n /* This holds data summary information.  */\n \n static struct gcov_summary object_summary;\n@@ -281,6 +278,13 @@ static char *da_file_name;\n \n static int no_data_file;\n \n+/* If there is several input files, compute and display results after\n+   reading all data files.  This way if two or more gcda file refer to\n+   the same source file (eg inline subprograms in a .h file), the\n+   counts are added.  */\n+\n+static int multiple_files = 0;\n+\n /* Output branch probabilities.  */\n \n static int flag_branches = 0;\n@@ -330,6 +334,7 @@ static int process_args (int, char **);\n static void print_usage (int) ATTRIBUTE_NORETURN;\n static void print_version (void) ATTRIBUTE_NORETURN;\n static void process_file (const char *);\n+static void generate_results (const char *);\n static void create_file_names (const char *);\n static source_t *find_source (const char *);\n static int read_graph_file (void);\n@@ -360,12 +365,15 @@ main (int argc, char **argv)\n   if (optind == argc)\n     print_usage (true);\n \n+  if (argc - argno > 1)\n+    multiple_files = 1;\n+\n   for (; argno != argc; argno++)\n-    {\n-      release_structures ();\n+    process_file (argv[argno]);\n \n-      process_file (argv[argno]);\n-    }\n+  generate_results (multiple_files ? NULL : argv[argc - 1]);\n+\n+  release_structures ();\n \n   return 0;\n }\n@@ -389,7 +397,7 @@ print_usage (int error_p)\n   FILE *file = error_p ? stderr : stdout;\n   int status = error_p ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE;\n \n-  fnotice (file, \"Usage: gcov [OPTION]... SOURCEFILE\\n\\n\");\n+  fnotice (file, \"Usage: gcov [OPTION]... SOURCEFILE...\\n\\n\");\n   fnotice (file, \"Print code coverage information.\\n\\n\");\n   fnotice (file, \"  -h, --help                      Print this help, then exit\\n\");\n   fnotice (file, \"  -v, --version                   Print version number, then exit\\n\");\n@@ -499,8 +507,14 @@ process_args (int argc, char **argv)\n static void\n process_file (const char *file_name)\n {\n-  source_t *src;\n   function_t *fn;\n+  function_t *fn_p;\n+  function_t *old_functions;\n+\n+  /* Save and clear the list of current functions.  They will be appended\n+     later.  */\n+  old_functions = functions;\n+  functions = NULL;\n \n   create_file_names (file_name);\n   if (read_graph_file ())\n@@ -515,8 +529,19 @@ process_file (const char *file_name)\n   if (read_count_file ())\n     return;\n \n-  for (fn = functions; fn; fn = fn->next)\n+  for (fn_p = NULL, fn = functions; fn; fn_p = fn, fn = fn->next)\n     solve_flow_graph (fn);\n+\n+  if (fn_p)\n+    fn_p->next = old_functions;\n+}\n+\n+static void\n+generate_results (const char *file_name)\n+{\n+  source_t *src;\n+  function_t *fn;\n+\n   for (src = sources; src; src = src->next)\n     src->lines = XCNEWVEC (line_t, src->num_lines);\n   for (fn = functions; fn; fn = fn->next)\n@@ -569,12 +594,6 @@ release_structures (void)\n   function_t *fn;\n   source_t *src;\n \n-  free (bbg_file_name);\n-  free (da_file_name);\n-  da_file_name = bbg_file_name = NULL;\n-  bbg_file_time = 0;\n-  bbg_stamp = 0;\n-\n   while ((src = sources))\n     {\n       sources = src->next;\n@@ -620,6 +639,15 @@ create_file_names (const char *file_name)\n   int length = strlen (file_name);\n   int base;\n \n+  /* Free previous file names.  */\n+  if (bbg_file_name)\n+    free (bbg_file_name);\n+  if (da_file_name)\n+    free (da_file_name);\n+  da_file_name = bbg_file_name = NULL;\n+  bbg_file_time = 0;\n+  bbg_stamp = 0;\n+\n   if (object_directory && object_directory[0])\n     {\n       struct stat status;\n@@ -673,20 +701,42 @@ static source_t *\n find_source (const char *file_name)\n {\n   source_t *src;\n+  struct stat status;\n \n   if (!file_name)\n     file_name = \"<unknown>\";\n \n   for (src = sources; src; src = src->next)\n     if (!strcmp (file_name, src->name))\n-      return src;\n+      break;\n \n-  src = XCNEW (source_t);\n-  src->name = xstrdup (file_name);\n-  src->coverage.name = src->name;\n-  src->index = sources ? sources->index + 1 : 1;\n-  src->next = sources;\n-  sources = src;\n+  if (!src)\n+    {\n+      src = XCNEW (source_t);\n+      src->name = xstrdup (file_name);\n+      src->coverage.name = src->name;\n+      src->index = source_index++;\n+      src->next = sources;\n+      sources = src;\n+      \n+      if (!stat (file_name, &status))\n+\tsrc->file_time = status.st_mtime;\n+    }\n+\n+  if (src->file_time > bbg_file_time)\n+    {\n+      static int info_emitted;\n+\n+      fnotice (stderr, \"%s:source file is newer than graph file '%s'\\n\",\n+\t       src->name, bbg_file_name);\n+      if (!info_emitted)\n+\t{\n+\t  fnotice (stderr,\n+\t\t   \"(the message is only displayed one per source file)\\n\");\n+\t  info_emitted = 1;\n+\t}\n+      src->file_time = 0;\n+    }\n \n   return src;\n }\n@@ -699,6 +749,7 @@ read_graph_file (void)\n   unsigned version;\n   unsigned current_tag = 0;\n   struct function_info *fn = NULL;\n+  function_t *old_functions_head = functions;\n   source_t *src = NULL;\n   unsigned ix;\n   unsigned tag;\n@@ -920,7 +971,9 @@ read_graph_file (void)\n   {\n     function_t *fn, *fn_p, *fn_n;\n \n-    for (fn_p = NULL, fn = functions; fn; fn_p = fn, fn = fn_n)\n+    for (fn_p = old_functions_head, fn = functions;\n+\t fn != old_functions_head;\n+\t fn_p = fn, fn = fn_n)\n       {\n \tunsigned ix;\n \n@@ -1012,6 +1065,9 @@ read_count_file (void)\n \t  unsigned ident = gcov_read_unsigned ();\n \t  struct function_info *fn_n = functions;\n \n+\t  /* Try to find the function in the list.\n+\t     To speed up the search, first start from the last function\n+\t     found.   */\n \t  for (fn = fn ? fn->next : NULL; ; fn = fn->next)\n \t    {\n \t      if (fn)\n@@ -1424,16 +1480,22 @@ static char *\n make_gcov_file_name (const char *input_name, const char *src_name)\n {\n   char *cptr;\n-  char *name = XNEWVEC (char, strlen (src_name) + strlen (input_name) + 10);\n+  char *name;\n \n-  name[0] = 0;\n-  if (flag_long_names && strcmp (src_name, input_name))\n+  if (flag_long_names && input_name && strcmp (src_name, input_name))\n     {\n+      name = XNEWVEC (char, strlen (src_name) + strlen (input_name) + 10);\n+      name[0] = 0;\n       /* Generate the input filename part.  */\n       cptr = flag_preserve_paths ? NULL : strrchr (input_name, '/');\n       strcat (name, cptr ? cptr + 1 : input_name);\n       strcat (name, \"##\");\n     }\n+  else\n+    {\n+      name = XNEWVEC (char, strlen (src_name) + 10);\n+      name[0] = 0;\n+    }\n \n   /* Generate the source filename part.  */\n   cptr = flag_preserve_paths ? NULL : strrchr (src_name, '/');\n@@ -1787,11 +1849,14 @@ output_lines (FILE *gcov_file, const source_t *src)\n   function_t *fn = NULL;\n \n   fprintf (gcov_file, \"%9s:%5d:Source:%s\\n\", \"-\", 0, src->name);\n-  fprintf (gcov_file, \"%9s:%5d:Graph:%s\\n\", \"-\", 0, bbg_file_name);\n-  fprintf (gcov_file, \"%9s:%5d:Data:%s\\n\", \"-\", 0,\n-\t   no_data_file ? \"-\" : da_file_name);\n-  fprintf (gcov_file, \"%9s:%5d:Runs:%u\\n\", \"-\", 0,\n-\t   object_summary.ctrs[GCOV_COUNTER_ARCS].runs);\n+  if (!multiple_files)\n+    {\n+      fprintf (gcov_file, \"%9s:%5d:Graph:%s\\n\", \"-\", 0, bbg_file_name);\n+      fprintf (gcov_file, \"%9s:%5d:Data:%s\\n\", \"-\", 0,\n+\t       no_data_file ? \"-\" : da_file_name);\n+      fprintf (gcov_file, \"%9s:%5d:Runs:%u\\n\", \"-\", 0,\n+\t       object_summary.ctrs[GCOV_COUNTER_ARCS].runs);\n+    }\n   fprintf (gcov_file, \"%9s:%5d:Programs:%u\\n\", \"-\", 0, program_count);\n \n   source_file = fopen (src->name, \"r\");\n@@ -1800,19 +1865,8 @@ output_lines (FILE *gcov_file, const source_t *src)\n       fnotice (stderr, \"%s:cannot open source file\\n\", src->name);\n       retval = NULL;\n     }\n-  else\n-    {\n-      struct stat status;\n-\n-      if (!fstat (fileno (source_file), &status)\n-\t  && status.st_mtime > bbg_file_time)\n-\t{\n-\t  fnotice (stderr, \"%s:source file is newer than graph file '%s'\\n\",\n-\t\t   src->name, bbg_file_name);\n-\t  fprintf (gcov_file, \"%9s:%5d:Source is newer than graph\\n\",\n-\t\t   \"-\", 0);\n-\t}\n-    }\n+  else if (src->file_time == 0)\n+    fprintf (gcov_file, \"%9s:%5d:Source is newer than graph\\n\", \"-\", 0);\n \n   if (flag_branches)\n     fn = src->functions;"}]}