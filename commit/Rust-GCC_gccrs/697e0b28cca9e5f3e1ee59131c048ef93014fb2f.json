{"sha": "697e0b28cca9e5f3e1ee59131c048ef93014fb2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3ZTBiMjhjY2E5ZTVmM2UxZWU1OTEzMWMwNDhlZjkzMDE0ZmIyZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-05-02T09:40:09Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-05-02T09:40:09Z"}, "message": "Add a wi::to_wide helper function\n\nAs Richard says, we ought to have a convenient way of converting\nan INTEGER_CST to a wide_int of a particular precision without\nhaving to extract the sign of the INTEGER_CST's type each time.\nThis patch adds a wi::to_wide helper for that, alongside the\nexisting wi::to_offset and wi::to_widest.\n\nTested on x86_64-linux-gnu and aarch64-linux-gnu.\n\ngcc/\n\t* tree.h (wi::to_wide): New function.\n\t* expr.c (expand_expr_real_1): Use wi::to_wide.\n\t* fold-const.c (int_const_binop_1): Likewise.\n\t(extract_muldiv_1): Likewise.\n\ngcc/c-family/\n\t* c-common.c (shorten_compare): Use wi::to_wide.\n\nFrom-SVN: r235721", "tree": {"sha": "8813b12d24cde53b2b940740605d9108aa099d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8813b12d24cde53b2b940740605d9108aa099d28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/697e0b28cca9e5f3e1ee59131c048ef93014fb2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697e0b28cca9e5f3e1ee59131c048ef93014fb2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697e0b28cca9e5f3e1ee59131c048ef93014fb2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8de73453a42758af02bb23ed58f4b1e78ad11bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de73453a42758af02bb23ed58f4b1e78ad11bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de73453a42758af02bb23ed58f4b1e78ad11bc7"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "7b1c8389cadac192e15aa742ad7a1306eb354e3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=697e0b28cca9e5f3e1ee59131c048ef93014fb2f", "patch": "@@ -1,3 +1,10 @@\n+2016-05-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree.h (wi::to_wide): New function.\n+\t* expr.c (expand_expr_real_1): Use wi::to_wide.\n+\t* fold-const.c (int_const_binop_1): Likewise.\n+\t(extract_muldiv_1): Likewise.\n+\n 2016-05-02  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* wide-int.h: Update offset_int and widest_int documentation."}, {"sha": "49012e1430761e660788dbac26f226bc2a837641", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=697e0b28cca9e5f3e1ee59131c048ef93014fb2f", "patch": "@@ -1,3 +1,7 @@\n+2016-05-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-common.c (shorten_compare): Use wi::to_wide.\n+\n 2016-04-29  Cesar Philippidis  <cesar@codesourcery.com>\n \n \tPR middle-end/70626"}, {"sha": "d45bf1b67f6b1eba7cb64444fe9f108d819c0f25", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=697e0b28cca9e5f3e1ee59131c048ef93014fb2f", "patch": "@@ -4012,10 +4012,9 @@ shorten_compare (location_t loc, tree *op0_ptr, tree *op1_ptr,\n \t  /* Convert primop1 to target type, but do not introduce\n \t     additional overflow.  We know primop1 is an int_cst.  */\n \t  primop1 = force_fit_type (*restype_ptr,\n-\t\t\t\t    wide_int::from\n-\t\t\t\t      (primop1,\n-\t\t\t\t       TYPE_PRECISION (*restype_ptr),\n-\t\t\t\t       TYPE_SIGN (TREE_TYPE (primop1))),\n+\t\t\t\t    wi::to_wide\n+\t\t\t\t     (primop1,\n+\t\t\t\t      TYPE_PRECISION (*restype_ptr)),\n \t\t\t\t    0, TREE_OVERFLOW (primop1));\n \t}\n       if (type != *restype_ptr)"}, {"sha": "812c5445278dd61972fe20702232def7075e4a7c", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=697e0b28cca9e5f3e1ee59131c048ef93014fb2f", "patch": "@@ -9729,10 +9729,9 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n          GET_MODE_PRECISION (TYPE_MODE (type)), we need to extend from\n          the former to the latter according to the signedness of the\n          type. */\n-      temp = immed_wide_int_const (wide_int::from\n+      temp = immed_wide_int_const (wi::to_wide\n \t\t\t\t   (exp,\n-\t\t\t\t    GET_MODE_PRECISION (TYPE_MODE (type)),\n-\t\t\t\t    TYPE_SIGN (type)),\n+\t\t\t\t    GET_MODE_PRECISION (TYPE_MODE (type))),\n \t\t\t\t   TYPE_MODE (type));\n       return temp;\n "}, {"sha": "3c389ee446e48381a8502d48a1f2ead4743a4c34", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=697e0b28cca9e5f3e1ee59131c048ef93014fb2f", "patch": "@@ -963,8 +963,7 @@ int_const_binop_1 (enum tree_code code, const_tree arg1, const_tree parg2,\n   signop sign = TYPE_SIGN (type);\n   bool overflow = false;\n \n-  wide_int arg2 = wide_int::from (parg2, TYPE_PRECISION (type),\n-\t\t\t\t  TYPE_SIGN (TREE_TYPE (parg2)));\n+  wide_int arg2 = wi::to_wide (parg2, TYPE_PRECISION (type));\n \n   switch (code)\n     {\n@@ -6397,10 +6396,8 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t  bool overflow_mul_p;\n \t  signop sign = TYPE_SIGN (ctype);\n \t  unsigned prec = TYPE_PRECISION (ctype);\n-\t  wide_int mul = wi::mul (wide_int::from (op1, prec,\n-\t\t\t\t\t\t  TYPE_SIGN (TREE_TYPE (op1))),\n-\t\t\t\t  wide_int::from (c, prec,\n-\t\t\t\t\t\t  TYPE_SIGN (TREE_TYPE (c))),\n+\t  wide_int mul = wi::mul (wi::to_wide (op1, prec),\n+\t\t\t\t  wi::to_wide (c, prec),\n \t\t\t\t  sign, &overflow_mul_p);\n \t  overflow_p = TREE_OVERFLOW (c) | TREE_OVERFLOW (op1);\n \t  if (overflow_mul_p"}, {"sha": "6e52e3d74da56c80bc70b71748f6e8be6451f232", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697e0b28cca9e5f3e1ee59131c048ef93014fb2f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=697e0b28cca9e5f3e1ee59131c048ef93014fb2f", "patch": "@@ -5211,6 +5211,8 @@ namespace wi\n   to_widest (const_tree);\n \n   generic_wide_int <extended_tree <ADDR_MAX_PRECISION> > to_offset (const_tree);\n+\n+  wide_int to_wide (const_tree, unsigned int);\n }\n \n inline unsigned int\n@@ -5240,6 +5242,16 @@ wi::to_offset (const_tree t)\n   return t;\n }\n \n+/* Convert INTEGER_CST T to a wide_int of precision PREC, extending or\n+   truncating as necessary.  When extending, use sign extension if T's\n+   type is signed and zero extension if T's type is unsigned.  */\n+\n+inline wide_int\n+wi::to_wide (const_tree t, unsigned int prec)\n+{\n+  return wide_int::from (t, prec, TYPE_SIGN (TREE_TYPE (t)));\n+}\n+\n template <int N>\n inline wi::extended_tree <N>::extended_tree (const_tree t)\n   : m_t (t)"}]}