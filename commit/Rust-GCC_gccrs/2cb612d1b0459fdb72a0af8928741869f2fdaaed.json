{"sha": "2cb612d1b0459fdb72a0af8928741869f2fdaaed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNiNjEyZDFiMDQ1OWZkYjcyYTBhZjg5Mjg3NDE4NjlmMmZkYWFlZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-26T09:07:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-26T09:07:18Z"}, "message": "basic_string.tcc (replace(size_type, size_type, const _CharT*, size_type)): Implement optimized in-place algorithm for non-overlapping ranges.\n\n2004-01-26  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.tcc (replace(size_type,\n\tsize_type, const _CharT*, size_type)): Implement optimized\n\tin-place algorithm for non-overlapping ranges.\n\t* testsuite/21_strings/basic_string/replace/char/6.cc: New.\n\t* testsuite/21_strings/basic_string/replace/wchar_t/6.cc: New.\n\n\t* include/bits/basic_string.tcc (insert(size_type,\n\tconst _CharT*, size_type)): Tweak slightly.\n\nFrom-SVN: r76625", "tree": {"sha": "36afdfcaedf56568d0cbb4e4cfeca1d1d58a4a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36afdfcaedf56568d0cbb4e4cfeca1d1d58a4a59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cb612d1b0459fdb72a0af8928741869f2fdaaed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb612d1b0459fdb72a0af8928741869f2fdaaed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cb612d1b0459fdb72a0af8928741869f2fdaaed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb612d1b0459fdb72a0af8928741869f2fdaaed/comments", "author": null, "committer": null, "parents": [{"sha": "6865f4cd9fcc09aa8166eb1cd18e473d9378ab34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6865f4cd9fcc09aa8166eb1cd18e473d9378ab34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6865f4cd9fcc09aa8166eb1cd18e473d9378ab34"}], "stats": {"total": 143, "additions": 140, "deletions": 3}, "files": [{"sha": "2ffa536bac684d4e9f9f4c038edb5a2ffb8b59d2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb612d1b0459fdb72a0af8928741869f2fdaaed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb612d1b0459fdb72a0af8928741869f2fdaaed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2cb612d1b0459fdb72a0af8928741869f2fdaaed", "patch": "@@ -1,3 +1,14 @@\n+2004-01-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.tcc (replace(size_type,\n+\tsize_type, const _CharT*, size_type)): Implement optimized\n+\tin-place algorithm for non-overlapping ranges.\n+\t* testsuite/21_strings/basic_string/replace/char/6.cc: New.\n+\t* testsuite/21_strings/basic_string/replace/wchar_t/6.cc: New.\n+\n+\t* include/bits/basic_string.tcc (insert(size_type,\n+\tconst _CharT*, size_type)): Tweak slightly.\n+\n 2004-01-26  Andreas Schwab  <schwab@suse.de>\n \n \t* config/locale/gnu/monetary_members.cc: Restore locale before"}, {"sha": "30075f0d6a2e4035bf2a769d6e97ab3eb71c6518", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb612d1b0459fdb72a0af8928741869f2fdaaed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb612d1b0459fdb72a0af8928741869f2fdaaed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=2cb612d1b0459fdb72a0af8928741869f2fdaaed", "patch": "@@ -319,8 +319,9 @@ namespace std\n              traits_type::copy(__p, __s + __n, __n);\n            else\n              {\n-               traits_type::copy(__p, __s, __p - __s);\n-               traits_type::copy(__p + (__p-__s), __p + __n, __n - (__p-__s));\n+\t       const size_type __nleft = __p - __s;\n+               traits_type::copy(__p, __s, __nleft);\n+               traits_type::copy(__p + __nleft, __p + __n, __n - __nleft);\n              }\n            return *this;\n          }\n@@ -337,12 +338,27 @@ namespace std\n        __n1 = _M_limit(__pos, __n1);\n        if (this->max_size() - (this->size() - __n1) < __n2)\n          __throw_length_error(\"basic_string::replace\");\n+       bool __left;\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n \t   || less<const _CharT*>()(_M_data() + this->size(), __s))\n          return _M_replace_safe(__pos, __n1, __s, __n2);\n+       else if ((__left = __s + __n2 <= _M_data() + __pos)\n+\t\t|| _M_data() + __pos + __n1 <= __s)\n+\t {\n+\t   // Work in-place: non-overlapping case.\n+\t   const size_type __off = __s - _M_data();\n+\t   _M_mutate(__pos, __n1, __n2);\n+\t   if (__left)\n+\t     traits_type::copy(_M_data() + __pos,\n+\t\t\t       _M_data() + __off, __n2);\n+\t   else\n+\t     traits_type::copy(_M_data() + __pos,\n+\t\t\t       _M_data() + __off + __n2 - __n1, __n2);\n+\t   return *this;\n+\t }\n        else\n \t {\n-\t   // Todo: optimized in-place replace.\t   \n+\t   // Todo: overlapping case.\n \t   const basic_string __tmp(__s, __n2);\n \t   return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);\n \t }"}, {"sha": "23ab34e0ef7e249c933c5490bc09fa5ab60e6656", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/char/6.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb612d1b0459fdb72a0af8928741869f2fdaaed/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb612d1b0459fdb72a0af8928741869f2fdaaed/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F6.cc?ref=2cb612d1b0459fdb72a0af8928741869f2fdaaed", "patch": "@@ -0,0 +1,55 @@\n+// 2004-01-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::string str01(\"Valle Del Salto\");\n+  str01.replace(0, 5, str01.data() + 10, 5);\n+  VERIFY( str01 == \"Salto Del Salto\" );\n+  \n+  std::string str02(\"Colle di Val d'Elsa\");\n+  str02.replace(0, 9, str02.data() + 10, 0);\n+  VERIFY( str02 == \"Val d'Elsa\" );\n+\n+  std::string str03(\"Novi Ligure\");\n+  str03.replace(11, 0, str03.data() + 4, 7);\n+  VERIFY( str03 == \"Novi Ligure Ligure\");\n+\n+  std::string str04(\"Trebisacce\");\n+  str04.replace(3, 4, str04.data(), 0);\n+  VERIFY( str04 == \"Trecce\" );\n+\n+  std::string str05(\"Altopiano della Sila\");\n+  str05.replace(1, 18, str05.data() + 19, 1);\n+  VERIFY( str05 == \"Aaa\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ca16482a8f29315453e9aa7d3b96664f9e5212fb", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/wchar_t/6.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb612d1b0459fdb72a0af8928741869f2fdaaed/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb612d1b0459fdb72a0af8928741869f2fdaaed/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F6.cc?ref=2cb612d1b0459fdb72a0af8928741869f2fdaaed", "patch": "@@ -0,0 +1,55 @@\n+// 2004-01-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring str01(L\"Valle Del Salto\");\n+  str01.replace(0, 5, str01.data() + 10, 5);\n+  VERIFY( str01 == L\"Salto Del Salto\" );\n+  \n+  std::wstring str02(L\"Colle di Val d'Elsa\");\n+  str02.replace(0, 9, str02.data() + 10, 0);\n+  VERIFY( str02 == L\"Val d'Elsa\" );\n+\n+  std::wstring str03(L\"Novi Ligure\");\n+  str03.replace(11, 0, str03.data() + 4, 7);\n+  VERIFY( str03 == L\"Novi Ligure Ligure\");\n+\n+  std::wstring str04(L\"Trebisacce\");\n+  str04.replace(3, 4, str04.data(), 0);\n+  VERIFY( str04 == L\"Trecce\" );\n+\n+  std::wstring str05(L\"Altopiano della Sila\");\n+  str05.replace(1, 18, str05.data() + 19, 1);\n+  VERIFY( str05 == L\"Aaa\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}