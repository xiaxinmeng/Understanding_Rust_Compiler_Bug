{"sha": "c2a8964176acaf6c08c68c1dfa34234bd63ba5be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhODk2NDE3NmFjYWY2YzA4YzY4YzFkZmEzNDIzNGJkNjNiYTViZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-01T21:36:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-01T21:36:30Z"}, "message": "i386.md (splitters for int-float conversion): Use reg_or_subregno in splitter constraints.\n\n\t* config/i386/i386.md (splitters for int-float conversion): Use\n\treg_or_subregno in splitter constraints.\n\nFrom-SVN: r180745", "tree": {"sha": "79cbfd9b0fd30cec898d98c9c16e537cd0d0c360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79cbfd9b0fd30cec898d98c9c16e537cd0d0c360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2a8964176acaf6c08c68c1dfa34234bd63ba5be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a8964176acaf6c08c68c1dfa34234bd63ba5be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a8964176acaf6c08c68c1dfa34234bd63ba5be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a8964176acaf6c08c68c1dfa34234bd63ba5be/comments", "author": null, "committer": null, "parents": [{"sha": "6bf39801d477bd03305ac582bac8331301808da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf39801d477bd03305ac582bac8331301808da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf39801d477bd03305ac582bac8331301808da9"}], "stats": {"total": 49, "additions": 18, "deletions": 31}, "files": [{"sha": "6027b43411900dd68b9f36103f508667f1cd6b53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a8964176acaf6c08c68c1dfa34234bd63ba5be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a8964176acaf6c08c68c1dfa34234bd63ba5be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2a8964176acaf6c08c68c1dfa34234bd63ba5be", "patch": "@@ -1,16 +1,21 @@\n+2011-11-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (splitters for int-float conversion): Use\n+\treg_or_subregno in splitter constraints.\n+\n 2011-11-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386-protos.h (ix86_expand_adjust_ufix_to_sfix_si): New\n \tprototype.\n \t* config/i386/i386.c (ix86_expand_adjust_ufix_to_sfix_si): New\n \tfunction.\n-\t* config/i386/sse.md (fixuns_trunc<mode><sseintvecmodelower>2): Use\n-\tit.\n+\t* config/i386/sse.md (fixuns_trunc<mode><sseintvecmodelower>2): Use it.\n \t(ssepackfltmode): New mode attr.\n \t(vec_pack_ufix_trunc_<mode>): New expander.\n \n-2011-10-30  Uros Bizjak  <ubizjak@gmail.com>\n+2011-11-01  Uros Bizjak  <ubizjak@gmail.com>\n \n+\tPR target/50940\n \t* config/i386/i386.md (floatsi<mode>2_vector_sse_with_temp splitter):\n \tCompare <ssevecmode>mode with V4SFmode, not V4SImode.\n \n@@ -46,7 +51,7 @@\n \t* config/avr/avr.h (BRANCH_COST): Define to avr_branch_cost.\n \t* config/avr/avr.c (avr_rtx_costs_1): Adjust [U]DIV/[U]MOD costs.\n \t* config/avr/avr.md (*addqi3.lt0, *addhi3.lt0, *addsi3.lt0): New insns.\n-\t(*addhi3_zero_extend1): Remov % in constraint of operand 1.\n+\t(*addhi3_zero_extend1): Remove % in constraint of operand 1.\n \t(*addhi3.sign_extend1, *subhi3.sign_extend2): New insns.\n \n 2011-11-01  Tom de Vries  <tom@codesourcery.com>"}, {"sha": "4fae10d4aec9acb691ffc4e66942a56f791ff318", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a8964176acaf6c08c68c1dfa34234bd63ba5be/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a8964176acaf6c08c68c1dfa34234bd63ba5be/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c2a8964176acaf6c08c68c1dfa34234bd63ba5be", "patch": "@@ -4920,9 +4920,7 @@\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n    && TARGET_INTER_UNIT_CONVERSIONS\n    && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (operands[0])))\"\n+   && SSE_REGNO_P (reg_or_subregno (operands[0]))\"\n   [(set (match_dup 0) (float:MODEF (match_dup 1)))])\n \n (define_split\n@@ -4933,9 +4931,7 @@\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n    && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\n    && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (operands[0])))\"\n+   && SSE_REGNO_P (reg_or_subregno (operands[0]))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (float:MODEF (match_dup 2)))])\n \n@@ -5024,9 +5020,7 @@\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n    && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n    && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (operands[0])))\"\n+   && SSE_REGNO_P (reg_or_subregno (operands[0]))\"\n   [(const_int 0)]\n {\n   rtx op1 = operands[1];\n@@ -5067,9 +5061,7 @@\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n    && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n    && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (operands[0])))\"\n+   && SSE_REGNO_P (reg_or_subregno (operands[0]))\"\n   [(const_int 0)]\n {\n   operands[3] = simplify_gen_subreg (<ssevecmode>mode, operands[0],\n@@ -5091,9 +5083,7 @@\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n    && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n    && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (operands[0])))\"\n+   && SSE_REGNO_P (reg_or_subregno (operands[0]))\"\n   [(const_int 0)]\n {\n   rtx op1 = operands[1];\n@@ -5137,9 +5127,7 @@\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n    && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n    && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (operands[0])))\"\n+   && SSE_REGNO_P (reg_or_subregno (operands[0]))\"\n   [(const_int 0)]\n {\n   operands[3] = simplify_gen_subreg (<ssevecmode>mode, operands[0],\n@@ -5200,9 +5188,7 @@\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n    && (TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\n    && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (operands[0])))\"\n+   && SSE_REGNO_P (reg_or_subregno (operands[0]))\"\n   [(set (match_dup 0) (float:MODEF (match_dup 1)))])\n \n (define_insn \"*float<SWI48x:mode><MODEF:mode>2_sse_nointerunit\"\n@@ -5235,9 +5221,7 @@\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n    && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\n    && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (operands[0])))\"\n+   && SSE_REGNO_P (reg_or_subregno (operands[0]))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (float:MODEF (match_dup 2)))])\n \n@@ -5248,9 +5232,7 @@\n   \"(<SWI48x:MODE>mode != DImode || TARGET_64BIT)\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n    && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (operands[0])))\"\n+   && SSE_REGNO_P (reg_or_subregno (operands[0]))\"\n   [(set (match_dup 0) (float:MODEF (match_dup 1)))])\n \n (define_insn \"*float<SWI48x:mode><X87MODEF:mode>2_i387_with_temp\""}]}