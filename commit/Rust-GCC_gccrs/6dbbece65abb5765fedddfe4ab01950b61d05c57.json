{"sha": "6dbbece65abb5765fedddfe4ab01950b61d05c57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiYmVjZTY1YWJiNTc2NWZlZGRkZmU0YWIwMTk1MGI2MWQwNWM1Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-12-02T16:23:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-12-02T16:23:20Z"}, "message": "re PR tree-optimization/46723 (internal compiler error: in get_initial_def_for_induction, at tree-vect-loop.c:2431)\n\n2010-12-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/46723\n\t* tree-vect-loop.c (get_initial_def_for_induction): Strip\n\tconversions from the induction evolution and apply it to\n\tthe result instead.\n\t* tree-vect-stmts.c (vect_get_vec_def_for_operand): Handle\n\tassigns for induction defs.\n\n\t* gcc.dg/torture/pr46723.c: New testcase.\n\nFrom-SVN: r167377", "tree": {"sha": "9731011d784b5a20bbfc11e4a58be14bb690acd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9731011d784b5a20bbfc11e4a58be14bb690acd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dbbece65abb5765fedddfe4ab01950b61d05c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dbbece65abb5765fedddfe4ab01950b61d05c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dbbece65abb5765fedddfe4ab01950b61d05c57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dbbece65abb5765fedddfe4ab01950b61d05c57/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b38fb7c7dc653b91b755d8f60155f3404b70e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b38fb7c7dc653b91b755d8f60155f3404b70e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b38fb7c7dc653b91b755d8f60155f3404b70e2e"}], "stats": {"total": 92, "additions": 70, "deletions": 22}, "files": [{"sha": "bde5e915515217894f37bef75468eeec4ea07c6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbbece65abb5765fedddfe4ab01950b61d05c57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbbece65abb5765fedddfe4ab01950b61d05c57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dbbece65abb5765fedddfe4ab01950b61d05c57", "patch": "@@ -1,3 +1,12 @@\n+2010-12-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46723\n+\t* tree-vect-loop.c (get_initial_def_for_induction): Strip\n+\tconversions from the induction evolution and apply it to\n+\tthe result instead.\n+\t* tree-vect-stmts.c (vect_get_vec_def_for_operand): Handle\n+\tassigns for induction defs.\n+\n 2010-12-02  Richard Guenther  <rguenther@suse.de>\n \n \t* value-prof.c (gimple_ic): Use stmt_ends_bb_p to detect"}, {"sha": "43f1768ecd851fcb5c75bd62d1ea6ded64f22e12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbbece65abb5765fedddfe4ab01950b61d05c57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbbece65abb5765fedddfe4ab01950b61d05c57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6dbbece65abb5765fedddfe4ab01950b61d05c57", "patch": "@@ -1,3 +1,8 @@\n+2010-12-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46723\n+\t* gcc.dg/torture/pr46723.c: New testcase.\n+\n 2010-12-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/44871"}, {"sha": "40c6e8cd69015680d56763b6fc897132054fcf34", "filename": "gcc/testsuite/gcc.dg/torture/pr46723.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbbece65abb5765fedddfe4ab01950b61d05c57/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr46723.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbbece65abb5765fedddfe4ab01950b61d05c57/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr46723.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr46723.c?ref=6dbbece65abb5765fedddfe4ab01950b61d05c57", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+short *m;\n+void test()\n+{\n+  short x = 128;\n+  unsigned int i;\n+  for (i = 0; i < 128; ++i, x = (unsigned short)x + 1)\n+    m[i] = x;\n+}"}, {"sha": "7a562b124c0ae67f5bfb3ab8fe42daa32b2e7ffa", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 42, "deletions": 20, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbbece65abb5765fedddfe4ab01950b61d05c57/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbbece65abb5765fedddfe4ab01950b61d05c57/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=6dbbece65abb5765fedddfe4ab01950b61d05c57", "patch": "@@ -2594,7 +2594,7 @@ get_initial_def_for_induction (gimple iv_phi)\n   stmt_vec_info stmt_vinfo = vinfo_for_stmt (iv_phi);\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n-  tree scalar_type = TREE_TYPE (gimple_phi_result (iv_phi));\n+  tree scalar_type;\n   tree vectype;\n   int nunits;\n   edge pe = loop_preheader_edge (loop);\n@@ -2623,24 +2623,7 @@ get_initial_def_for_induction (gimple iv_phi)\n   gimple_stmt_iterator si;\n   basic_block bb = gimple_bb (iv_phi);\n   tree stepvectype;\n-\n-  vectype = get_vectype_for_scalar_type (scalar_type);\n-  gcc_assert (vectype);\n-  nunits = TYPE_VECTOR_SUBPARTS (vectype);\n-  ncopies = vf / nunits;\n-\n-  gcc_assert (phi_info);\n-  gcc_assert (ncopies >= 1);\n-\n-  /* Find the first insertion point in the BB.  */\n-  si = gsi_after_labels (bb);\n-\n-  if (INTEGRAL_TYPE_P (scalar_type))\n-    step_expr = build_int_cst (scalar_type, 0);\n-  else if (POINTER_TYPE_P (scalar_type))\n-    step_expr = size_zero_node;\n-  else\n-    step_expr = build_real (scalar_type, dconst0);\n+  tree resvectype;\n \n   /* Is phi in an inner-loop, while vectorizing an enclosing outer-loop?  */\n   if (nested_in_vect_loop_p (loop, iv_phi))\n@@ -2657,11 +2640,25 @@ get_initial_def_for_induction (gimple iv_phi)\n \n   access_fn = analyze_scalar_evolution (iv_loop, PHI_RESULT (iv_phi));\n   gcc_assert (access_fn);\n+  STRIP_NOPS (access_fn);\n   ok = vect_is_simple_iv_evolution (iv_loop->num, access_fn,\n                                     &init_expr, &step_expr);\n   gcc_assert (ok);\n   pe = loop_preheader_edge (iv_loop);\n \n+  scalar_type = TREE_TYPE (init_expr);\n+  vectype = get_vectype_for_scalar_type (scalar_type);\n+  resvectype = get_vectype_for_scalar_type (TREE_TYPE (PHI_RESULT (iv_phi)));\n+  gcc_assert (vectype);\n+  nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+  ncopies = vf / nunits;\n+\n+  gcc_assert (phi_info);\n+  gcc_assert (ncopies >= 1);\n+\n+  /* Find the first insertion point in the BB.  */\n+  si = gsi_after_labels (bb);\n+\n   /* Create the vector that holds the initial_value of the induction.  */\n   if (nested_in_vect_loop)\n     {\n@@ -2687,7 +2684,7 @@ get_initial_def_for_induction (gimple iv_phi)\n \t}\n \n       t = NULL_TREE;\n-      t = tree_cons (NULL_TREE, init_expr, t);\n+      t = tree_cons (NULL_TREE, new_name, t);\n       for (i = 1; i < nunits; i++)\n \t{\n \t  /* Create: new_name_i = new_name + step_expr  */\n@@ -2802,6 +2799,19 @@ get_initial_def_for_induction (gimple iv_phi)\n \t  gimple_assign_set_lhs (new_stmt, vec_def);\n \n \t  gsi_insert_before (&si, new_stmt, GSI_SAME_STMT);\n+\t  if (!useless_type_conversion_p (resvectype, vectype))\n+\t    {\n+\t      new_stmt = gimple_build_assign_with_ops\n+\t\t  (VIEW_CONVERT_EXPR,\n+\t\t   vect_get_new_vect_var (resvectype, vect_simple_var,\n+\t\t\t\t\t  \"vec_iv_\"),\n+\t\t   build1 (VIEW_CONVERT_EXPR, resvectype,\n+\t\t\t   gimple_assign_lhs (new_stmt)), NULL_TREE);\n+\t      gimple_assign_set_lhs (new_stmt,\n+\t\t\t\t     make_ssa_name\n+\t\t\t\t       (gimple_assign_lhs (new_stmt), new_stmt));\n+\t      gsi_insert_before (&si, new_stmt, GSI_SAME_STMT);\n+\t    }\n \t  set_vinfo_for_stmt (new_stmt,\n \t\t\t      new_stmt_vec_info (new_stmt, loop_vinfo, NULL));\n \t  STMT_VINFO_RELATED_STMT (prev_stmt_vinfo) = new_stmt;\n@@ -2849,6 +2859,18 @@ get_initial_def_for_induction (gimple iv_phi)\n     }\n \n   STMT_VINFO_VEC_STMT (phi_info) = induction_phi;\n+  if (!useless_type_conversion_p (resvectype, vectype))\n+    {\n+      new_stmt = gimple_build_assign_with_ops\n+\t (VIEW_CONVERT_EXPR,\n+\t  vect_get_new_vect_var (resvectype, vect_simple_var, \"vec_iv_\"),\n+\t  build1 (VIEW_CONVERT_EXPR, resvectype, induc_def), NULL_TREE);\n+      induc_def = make_ssa_name (gimple_assign_lhs (new_stmt), new_stmt);\n+      gimple_assign_set_lhs (new_stmt, induc_def);\n+      si = gsi_start_bb (bb);\n+      gsi_insert_before (&si, new_stmt, GSI_SAME_STMT);\n+    }\n+\n   return induc_def;\n }\n "}, {"sha": "e5bfcbe81acb2b9350fa5524bcbeb59a2ddad6dd", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dbbece65abb5765fedddfe4ab01950b61d05c57/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dbbece65abb5765fedddfe4ab01950b61d05c57/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=6dbbece65abb5765fedddfe4ab01950b61d05c57", "patch": "@@ -1102,8 +1102,10 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n         /* Get the def from the vectorized stmt.  */\n         def_stmt_info = vinfo_for_stmt (def_stmt);\n         vec_stmt = STMT_VINFO_VEC_STMT (def_stmt_info);\n-\tgcc_assert (vec_stmt && gimple_code (vec_stmt) == GIMPLE_PHI);\n-        vec_oprnd = PHI_RESULT (vec_stmt);\n+\tif (gimple_code (vec_stmt) == GIMPLE_PHI)\n+\t  vec_oprnd = PHI_RESULT (vec_stmt);\n+\telse\n+\t  vec_oprnd = gimple_get_lhs (vec_stmt);\n         return vec_oprnd;\n       }\n "}]}