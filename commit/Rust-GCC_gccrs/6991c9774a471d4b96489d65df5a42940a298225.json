{"sha": "6991c9774a471d4b96489d65df5a42940a298225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk5MWM5Nzc0YTQ3MWQ0Yjk2NDg5ZDY1ZGY1YTQyOTQwYTI5ODIyNQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2013-11-13T10:11:00Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-11-13T10:11:00Z"}, "message": "aarch64.h (FRAME_GROWS_DOWNWARD): Define to 1.\n\n2013-11-13  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* config/aarch64/aarch64.h (FRAME_GROWS_DOWNWARD): Define to 1.\n\t* config/aarch64/aarch64.c (aarch64_initial_elimination_offset):\n\tUpdate offset calculations.\n\nFrom-SVN: r204737", "tree": {"sha": "cc4939f03a8357ca1d56bce35af9ce91f99c8371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc4939f03a8357ca1d56bce35af9ce91f99c8371"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6991c9774a471d4b96489d65df5a42940a298225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6991c9774a471d4b96489d65df5a42940a298225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6991c9774a471d4b96489d65df5a42940a298225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6991c9774a471d4b96489d65df5a42940a298225/comments", "author": null, "committer": null, "parents": [{"sha": "bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "52d02b9aff0e74e3684bd587e9cb630d3ce26e46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6991c9774a471d4b96489d65df5a42940a298225/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6991c9774a471d4b96489d65df5a42940a298225/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6991c9774a471d4b96489d65df5a42940a298225", "patch": "@@ -1,3 +1,9 @@\n+2013-11-13  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/aarch64/aarch64.h (FRAME_GROWS_DOWNWARD): Define to 1.\n+\t* config/aarch64/aarch64.c (aarch64_initial_elimination_offset):\n+\tUpdate offset calculations.\n+\n 2013-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/35998"}, {"sha": "2ddab1b222f14eeabf1c3e9252cd5cf021a27500", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6991c9774a471d4b96489d65df5a42940a298225/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6991c9774a471d4b96489d65df5a42940a298225/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=6991c9774a471d4b96489d65df5a42940a298225", "patch": "@@ -2010,7 +2010,7 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT offset,\n    Establish the stack frame by decreasing the stack pointer with a\n    properly calculated size and, if necessary, create a frame record\n    filled with the values of LR and previous frame pointer.  The\n-   current FP is also set up is it is in use.  */\n+   current FP is also set up if it is in use.  */\n \n void\n aarch64_expand_prologue (void)\n@@ -4143,7 +4143,7 @@ aarch64_initial_elimination_offset (unsigned from, unsigned to)\n \t return offset - crtl->outgoing_args_size;\n \n        if (from == FRAME_POINTER_REGNUM)\n-\t return cfun->machine->frame.saved_regs_size;\n+\t return cfun->machine->frame.saved_regs_size + get_frame_size ();\n      }\n \n    if (to == STACK_POINTER_REGNUM)\n@@ -4152,6 +4152,7 @@ aarch64_initial_elimination_offset (unsigned from, unsigned to)\n          {\n            HOST_WIDE_INT elim = crtl->outgoing_args_size\n                               + cfun->machine->frame.saved_regs_size\n+                              + get_frame_size ()\n                               - cfun->machine->frame.fp_lr_offset;\n            elim = AARCH64_ROUND_UP (elim, STACK_BOUNDARY / BITS_PER_UNIT);\n            return elim;"}, {"sha": "03330690b460640084f8866c6496b52108d6dc46", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6991c9774a471d4b96489d65df5a42940a298225/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6991c9774a471d4b96489d65df5a42940a298225/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=6991c9774a471d4b96489d65df5a42940a298225", "patch": "@@ -443,7 +443,7 @@ enum reg_class\n #define INDEX_REG_CLASS\tCORE_REGS\n #define BASE_REG_CLASS  POINTER_REGS\n \n-/* Register pairs used to eliminate unneeded registers that point intoi\n+/* Register pairs used to eliminate unneeded registers that point into\n    the stack frame.  */\n #define ELIMINABLE_REGS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -484,7 +484,7 @@ extern enum aarch64_processor aarch64_tune;\n /* Stack layout; function entry, exit and calling.  */\n #define STACK_GROWS_DOWNWARD\t1\n \n-#define FRAME_GROWS_DOWNWARD\t0\n+#define FRAME_GROWS_DOWNWARD\t1\n \n #define STARTING_FRAME_OFFSET\t0\n "}]}