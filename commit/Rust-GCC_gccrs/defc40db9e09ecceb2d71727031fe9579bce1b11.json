{"sha": "defc40db9e09ecceb2d71727031fe9579bce1b11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmYzQwZGI5ZTA5ZWNjZWIyZDcxNzI3MDMxZmU5NTc5YmNlMWIxMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-25T10:22:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-25T12:18:13Z"}, "message": "middle-end/98807 - more vector_element_bits fixes\n\nThis simplifies vector_element_bits further, avoiding any mode\ndependence and instead relying on boolean vector construction\nto populate element precision accordingly.\n\n2021-01-25  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/98807\n\t* tree.c (vector_element_bits): Always use precision of\n\tthe element type for boolean vectors.\n\n\t* gcc.dg/pr98807.c: New testcase.", "tree": {"sha": "a7a28892322f7e32224d0ab1c09725d564df942a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7a28892322f7e32224d0ab1c09725d564df942a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/defc40db9e09ecceb2d71727031fe9579bce1b11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defc40db9e09ecceb2d71727031fe9579bce1b11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/defc40db9e09ecceb2d71727031fe9579bce1b11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defc40db9e09ecceb2d71727031fe9579bce1b11/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0433fc2d7d44eafd61017cd0b6c4cab1fcb16990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0433fc2d7d44eafd61017cd0b6c4cab1fcb16990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0433fc2d7d44eafd61017cd0b6c4cab1fcb16990"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "eb8a8d1c23d49ed12e91b450a24e8a0490204c17", "filename": "gcc/testsuite/gcc.dg/pr98807.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defc40db9e09ecceb2d71727031fe9579bce1b11/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98807.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defc40db9e09ecceb2d71727031fe9579bce1b11/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98807.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98807.c?ref=defc40db9e09ecceb2d71727031fe9579bce1b11", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-mno-sse2\" { target x86_64-*-* i?86-*-* } } */\n+\n+#include <stdint.h>\n+\n+typedef uint8_t u8;\n+typedef uint16_t u16;\n+typedef uint32_t u32;\n+typedef uint64_t u64;\n+typedef u64 __attribute__((__vector_size__ (16))) v128u64;\n+u16 foo0_u16_0;\n+v128u64 foo0_v64u32_0;\n+u64 foo0_u64_0;\n+v128u64 foo0_v128u64_2;\n+\n+v128u64\n+foo0 (u8 u8_0, v128u64 v128u64_0)\n+{\n+  u32 u32_1 = u8_0 || (0, 0);\n+  foo0_v128u64_2 - u8_0;\n+  foo0_u16_0 |= foo0_u64_0 && u8_0 > foo0_u64_0 <= u32_1;\n+  v128u64 v128u64_4 = v128u64_0 >= u8_0;\n+  return v128u64_4 + foo0_v64u32_0;\n+}\n+\n+int\n+main ()\n+{\n+  v128u64 x = foo0 (3, (v128u64) { 0, 12 });\n+  if (x[0] != 0) __builtin_abort();\n+  if (x[1] != 0xffffffffffffffff) __builtin_abort();\n+  return 0;\n+}"}, {"sha": "287e5001dc3b3723656a1cc352be13d635c0e4a7", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defc40db9e09ecceb2d71727031fe9579bce1b11/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defc40db9e09ecceb2d71727031fe9579bce1b11/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=defc40db9e09ecceb2d71727031fe9579bce1b11", "patch": "@@ -14027,13 +14027,7 @@ vector_element_bits (const_tree type)\n {\n   gcc_checking_assert (VECTOR_TYPE_P (type));\n   if (VECTOR_BOOLEAN_TYPE_P (type))\n-    {\n-      if (SCALAR_INT_MODE_P (TYPE_MODE (type)))\n-\treturn 1;\n-      else\n-\treturn vector_element_size (tree_to_poly_uint64 (TYPE_SIZE (type)),\n-\t\t\t\t    TYPE_VECTOR_SUBPARTS (type));\n-    }\n+    return TYPE_PRECISION (TREE_TYPE (type));\n   return tree_to_uhwi (TYPE_SIZE (TREE_TYPE (type)));\n }\n "}]}