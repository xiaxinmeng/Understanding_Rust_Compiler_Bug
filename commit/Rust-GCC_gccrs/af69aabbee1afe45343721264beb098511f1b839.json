{"sha": "af69aabbee1afe45343721264beb098511f1b839", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY2OWFhYmJlZTFhZmU0NTM0MzcyMTI2NGJlYjA5ODUxMWYxYjgzOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-30T21:10:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-30T21:10:07Z"}, "message": "pa.h (CONST_DOUBLE_OK_FOR_LETTER_P): Generalize.\n\n\t* pa.h (CONST_DOUBLE_OK_FOR_LETTER_P): Generalize.\n\t(LEGITIMATE_CONSTANT_P): Allow 0.0.\n\t(CONST_COSTS, case CONST_DOUBLE): fp0.0 is free when\n\tnot used in a SET expression.\n\nFrom-SVN: r3392", "tree": {"sha": "d5a27347ad39be279e3185d1929940c01cc7afe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5a27347ad39be279e3185d1929940c01cc7afe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af69aabbee1afe45343721264beb098511f1b839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af69aabbee1afe45343721264beb098511f1b839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af69aabbee1afe45343721264beb098511f1b839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af69aabbee1afe45343721264beb098511f1b839/comments", "author": null, "committer": null, "parents": [{"sha": "f048ca473feeb440805900e7317caf1d0bb70254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f048ca473feeb440805900e7317caf1d0bb70254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f048ca473feeb440805900e7317caf1d0bb70254"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "c9c709682ddd962dfd57ba35875b649d7cf65d99", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af69aabbee1afe45343721264beb098511f1b839/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af69aabbee1afe45343721264beb098511f1b839/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=af69aabbee1afe45343721264beb098511f1b839", "patch": "@@ -577,11 +577,15 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n    : (C) == 'P' ? and_mask_p (VALUE)\t\t\t\t\\\n    : 0)\n \n-/* Similar, but for floating constants, and defining letters G and H.\n-   Here VALUE is the CONST_DOUBLE rtx itself.  */\n+/* Similar, but for floating or large integer constants, and defining letters\n+   G and H.   Here VALUE is the CONST_DOUBLE rtx itself.\n \n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  \\\n-  ((C) == 'G' && XINT (VALUE, 0) == 0 && XINT (VALUE, 1) == 0)\n+   For PA, `G' is the floating-point constant zero.  `H' is undefined.  */\n+\n+#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  \t\t\t\\\n+  ((C) == 'G' ? (GET_MODE_CLASS (GET_MODE (VALUE)) == MODE_FLOAT\t\\\n+\t\t && (VALUE) == CONST0_RTX (GET_MODE (VALUE)))\t\t\\\n+   : 0)\n \n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n@@ -1015,11 +1019,13 @@ extern union tree_node *current_function_decl;\n \n #define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n \n-/* Nonzero if the constant value X is a legitimate general operand.\n-   It is given that X satisfies CONSTANT_P.  */\n \n-#define LEGITIMATE_CONSTANT_P(X)\t\t\\\n- (GET_CODE (X) != CONST_DOUBLE)\n+/* Include all constant integers and constant doubles, but not\n+   floating-point, except for floating-point zero.  */\n+\n+#define LEGITIMATE_CONSTANT_P(X)  \t\t\\\n+  (GET_MODE_CLASS (GET_MODE (X)) != MODE_FLOAT\t\\\n+   || (X) == CONST0_RTX (GET_MODE (X)))\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n@@ -1415,7 +1421,11 @@ while (0)\n   case SYMBOL_REF:\t\t\t\t\t\t\\\n     return 4;\t\t\t\t\t\t\t\\\n   case CONST_DOUBLE:\t\t\t\t\t\t\\\n-    return 8;\n+    if (RTX == CONST0_RTX (DFmode) || RTX == CONST0_RTX (SFmode)\\\n+\t&& OUTER_CODE != SET)\t\t\t\t\t\\\n+      return 0;\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      return 8;\n \n #define ADDRESS_COST(RTX) \\\n   (GET_CODE (RTX) == REG ? 1 : hppa_address_cost (RTX))"}]}