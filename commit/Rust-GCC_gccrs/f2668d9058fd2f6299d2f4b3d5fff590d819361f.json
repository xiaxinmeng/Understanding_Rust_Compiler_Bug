{"sha": "f2668d9058fd2f6299d2f4b3d5fff590d819361f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI2NjhkOTA1OGZkMmY2Mjk5ZDJmNGIzZDVmZmY1OTBkODE5MzYxZg==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-08-04T17:18:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-23T08:24:56Z"}, "message": "[Ada] Decorate iterated_component_association in SPARK expansion\n\ngcc/ada/\n\n\t* exp_spark.adb (Expand_SPARK_N_Aggregate,\n\tExpand_SPARK_Delta_Or_Update): Expand\n\tIterated_Component_Association occurring within delta\n\taggregates.\n\t(Expand_SPARK): Apply SPARK-specific expansion to ordinary\n\taggregates.", "tree": {"sha": "0c9e156787cc4bd47f17f005b0b20dba05159136", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c9e156787cc4bd47f17f005b0b20dba05159136"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2668d9058fd2f6299d2f4b3d5fff590d819361f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2668d9058fd2f6299d2f4b3d5fff590d819361f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2668d9058fd2f6299d2f4b3d5fff590d819361f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2668d9058fd2f6299d2f4b3d5fff590d819361f/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "955886d1a2c75d16b41df1c97d04387bd7436dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955886d1a2c75d16b41df1c97d04387bd7436dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/955886d1a2c75d16b41df1c97d04387bd7436dab"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "814268a5708b892aef908f1e8d53ac0e566c4d96", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2668d9058fd2f6299d2f4b3d5fff590d819361f/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2668d9058fd2f6299d2f4b3d5fff590d819361f/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=f2668d9058fd2f6299d2f4b3d5fff590d819361f", "patch": "@@ -36,6 +36,7 @@ with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n+with Sem_Ch8;  use Sem_Ch8;\n with Sem_Prag; use Sem_Prag;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n@@ -51,6 +52,9 @@ package body Exp_SPARK is\n    -- Local Subprograms --\n    -----------------------\n \n+   procedure Expand_SPARK_N_Aggregate (N : Node_Id);\n+   --  Perform aggregate-specific expansion\n+\n    procedure Expand_SPARK_N_Attribute_Reference (N : Node_Id);\n    --  Perform attribute-reference-specific expansion\n \n@@ -101,6 +105,9 @@ package body Exp_SPARK is\n          =>\n             Qualify_Entity_Names (N);\n \n+         when N_Aggregate =>\n+            Expand_SPARK_N_Aggregate (N);\n+\n          --  Replace occurrences of System'To_Address by calls to\n          --  System.Storage_Elements.To_Address.\n \n@@ -215,11 +222,29 @@ package body Exp_SPARK is\n                Expr      := Expression (Assoc);\n                Comp_Type := Component_Type (Typ);\n \n+               --  Analyze expression of the iterated_component_association\n+               --  with its index parameter in scope.\n+\n+               if Nkind (Assoc) = N_Iterated_Component_Association then\n+                  Push_Scope (Scope (Defining_Identifier (Assoc)));\n+                  Analyze_And_Resolve (Expression (Assoc), Comp_Type);\n+               end if;\n+\n                if Is_Scalar_Type (Comp_Type) then\n                   Apply_Scalar_Range_Check (Expr, Comp_Type);\n                end if;\n \n-               Index     := First (Choices (Assoc));\n+               --  Restore scope of the iterated_component_association\n+\n+               if Nkind (Assoc) = N_Iterated_Component_Association then\n+                  End_Scope;\n+               end if;\n+\n+               Index :=\n+                 First\n+                   (if Nkind (Assoc) = N_Iterated_Component_Association\n+                    then Discrete_Choices (Assoc)\n+                    else Choices (Assoc));\n                Index_Typ := First_Index (Typ);\n \n                while Present (Index) loop\n@@ -340,6 +365,74 @@ package body Exp_SPARK is\n       end if;\n    end Expand_SPARK_N_Freeze_Type;\n \n+   ------------------------------\n+   -- Expand_SPARK_N_Aggregate --\n+   ------------------------------\n+\n+   procedure Expand_SPARK_N_Aggregate (N : Node_Id) is\n+      Assoc : Node_Id := First (Component_Associations (N));\n+   begin\n+      --  For compilation, frontend analyses a copy of the\n+      --  iterated_component_association's expression for legality checking;\n+      --  (then the expression is copied again when expanding association into\n+      --  assignments for the individual choices). For SPARK we analyze the\n+      --  original expression and apply range checks, if required.\n+\n+      while Present (Assoc) loop\n+         if Nkind (Assoc) = N_Iterated_Component_Association then\n+            declare\n+               Typ : constant Entity_Id := Etype (N);\n+\n+               Comp_Type : constant Entity_Id := Component_Type (Typ);\n+               Expr      : constant Node_Id := Expression (Assoc);\n+               Index_Typ : constant Entity_Id := First_Index (Typ);\n+\n+               Index : Node_Id;\n+\n+            begin\n+               --  Analyze expression with index parameter in scope\n+\n+               Push_Scope (Scope (Defining_Identifier (Assoc)));\n+               Enter_Name (Defining_Identifier (Assoc));\n+               Analyze_And_Resolve (Expression (Assoc), Comp_Type);\n+\n+               if Is_Scalar_Type (Comp_Type) then\n+                  Apply_Scalar_Range_Check (Expr, Comp_Type);\n+               end if;\n+\n+               End_Scope;\n+\n+               --  Analyze discrete choices\n+\n+               Index := First (Discrete_Choices (Assoc));\n+\n+               while Present (Index) loop\n+\n+                  --  The index denotes a range of elements where range checks\n+                  --  have been already applied.\n+\n+                  if Nkind (Index) in N_Others_Choice\n+                                    | N_Range\n+                                    | N_Subtype_Indication\n+                  then\n+                     null;\n+\n+                  --  Otherwise the index denotes a single element (or a\n+                  --  subtype name which doesn't require range checks).\n+\n+                  else pragma Assert (Nkind (Index) in N_Subexpr);\n+                     Apply_Scalar_Range_Check (Index, Etype (Index_Typ));\n+                  end if;\n+\n+                  Next (Index);\n+               end loop;\n+            end;\n+         end if;\n+\n+         Next (Assoc);\n+      end loop;\n+   end Expand_SPARK_N_Aggregate;\n+\n    ----------------------------------------\n    -- Expand_SPARK_N_Attribute_Reference --\n    ----------------------------------------"}]}