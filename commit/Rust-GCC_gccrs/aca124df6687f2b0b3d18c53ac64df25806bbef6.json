{"sha": "aca124df6687f2b0b3d18c53ac64df25806bbef6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNhMTI0ZGY2Njg3ZjJiMGIzZDE4YzUzYWM2NGRmMjU4MDZiYmVmNg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-02-27T16:34:47Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-02-27T16:35:43Z"}, "message": "define NO_DOT_IN_LABEL only in vxworks6\n\nThere was a mistake in forward-porting and contributing some\nvxworks7r2 changes, that caused a conditional to be dropped around a\ncouple of preprocessor directives, needed only up to vxworks6, that\nchange the compiler's behavior WRT introducing dollars and dots in\nsymbol names.\n\nThis deviates GCC's behavior from the native system compiler, in a way\nthat appears to have ABI implications, so we'd like to correct that,\neven at this late stage in the development cycle.\n\n\nfor  gcc/ChangeLog\n\n\t* config/vx-common.h (NO_DOLLAR_IN_LABEL, NO_DOT_IN_LABEL): Leave\n\tthem alone on vx7.", "tree": {"sha": "23626bd8b9a407abaf26e23064840a41480d762c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23626bd8b9a407abaf26e23064840a41480d762c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aca124df6687f2b0b3d18c53ac64df25806bbef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca124df6687f2b0b3d18c53ac64df25806bbef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca124df6687f2b0b3d18c53ac64df25806bbef6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca124df6687f2b0b3d18c53ac64df25806bbef6/comments", "author": null, "committer": null, "parents": [{"sha": "46788c65f93c61a06764b284b4656dd9024e88d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46788c65f93c61a06764b284b4656dd9024e88d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46788c65f93c61a06764b284b4656dd9024e88d2"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "d42bfbe0c014cad3c61c2cccc0085785033c9480", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca124df6687f2b0b3d18c53ac64df25806bbef6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca124df6687f2b0b3d18c53ac64df25806bbef6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aca124df6687f2b0b3d18c53ac64df25806bbef6", "patch": "@@ -1,3 +1,8 @@\n+2020-02-27  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* config/vx-common.h (NO_DOLLAR_IN_LABEL, NO_DOT_IN_LABEL): Leave\n+\tthem alone on vx7.\n+\n 2020-02-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93508"}, {"sha": "f4a1ffdfb408160b217466bc922d6a7f5fcc9781", "filename": "gcc/config/vx-common.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca124df6687f2b0b3d18c53ac64df25806bbef6/gcc%2Fconfig%2Fvx-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca124df6687f2b0b3d18c53ac64df25806bbef6/gcc%2Fconfig%2Fvx-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvx-common.h?ref=aca124df6687f2b0b3d18c53ac64df25806bbef6", "patch": "@@ -99,12 +99,14 @@ along with GCC; see the file COPYING3.  If not see\n \n /* ------------------------ Misc configuration bits ----------------------  */\n \n-/* VxWorks cannot have dots in constructor labels, because it uses a\n-   mutant variation of collect2 that generates C code instead of\n-   assembly.  Thus each constructor label must be a legitimate C\n-   symbol.  FIXME: Have VxWorks use real collect2 instead.  */\n-#undef NO_DOLLAR_IN_LABEL\n-#define NO_DOT_IN_LABEL\n+#ifndef TARGET_VXWORKS7\n+/* VxWorks, prior to version 7, could not have dots in constructor\n+   labels, because it used a mutant variation of collect2 that\n+   generates C code instead of assembly.  Thus each constructor label\n+   had to be a legitimate C symbol.  */\n+# undef NO_DOLLAR_IN_LABEL\n+# define NO_DOT_IN_LABEL\n+#endif\n \n /* Kernel mode doesn't have ctors/dtors, but RTP mode does.  */\n #define TARGET_HAVE_CTORS_DTORS false"}]}