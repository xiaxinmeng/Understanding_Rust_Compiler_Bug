{"sha": "3d6f7931f91b0c782095f2acabd853ace1ec9d72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q2Zjc5MzFmOTFiMGM3ODIwOTVmMmFjYWJkODUzYWNlMWVjOWQ3Mg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-04-18T18:16:51Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-04-18T18:16:51Z"}, "message": "Move pragma interface support to c-pragma.h\n\nFrom-SVN: r9410", "tree": {"sha": "db6dcc9aaea350dc8e6ad9b635b41529042f0167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db6dcc9aaea350dc8e6ad9b635b41529042f0167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d6f7931f91b0c782095f2acabd853ace1ec9d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d6f7931f91b0c782095f2acabd853ace1ec9d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d6f7931f91b0c782095f2acabd853ace1ec9d72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d6f7931f91b0c782095f2acabd853ace1ec9d72/comments", "author": null, "committer": null, "parents": [{"sha": "dce58868d99177f6b266e982efd29afe53932883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce58868d99177f6b266e982efd29afe53932883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce58868d99177f6b266e982efd29afe53932883"}], "stats": {"total": 122, "additions": 67, "deletions": 55}, "files": [{"sha": "6c3f170ee46f50493e201c8b307fcb0affef90b6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3d6f7931f91b0c782095f2acabd853ace1ec9d72", "patch": "@@ -1022,10 +1022,10 @@ c-decl.o : c-decl.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h output.h\n c-typeck.o : c-typeck.c $(CONFIG_H) $(TREE_H) c-tree.h flags.h output.h\n c-lang.o : c-lang.c $(CONFIG_H) $(TREE_H)\n c-lex.o : c-lex.c $(CONFIG_H) $(TREE_H) c-lex.h c-tree.h $(srcdir)/c-parse.h \\\n-    input.h flags.h $(srcdir)/c-gperf.h\n+    input.h flags.h $(srcdir)/c-gperf.h c-pragma.h\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(TREE_H) c-tree.h flags.h\n c-convert.o : c-convert.c $(CONFIG_H) $(TREE_H) flags.h\n-c-pragma.o: c-pragma.c $(CONFIG_H) $(TREE_H)\n+c-pragma.o: c-pragma.c $(CONFIG_H) $(TREE_H) c-pragma.h\n c-iterate.o: c-iterate.c $(CONFIG_H) $(TREE_H) $(RTL_H) c-tree.h flags.h\n \n # To make a configuration always use collect2, set USE_COLLECT2 to ld.\n@@ -1101,7 +1101,7 @@ rtlanal.o : rtlanal.c $(CONFIG_H) $(RTL_H)\n toplev.o: bytecode.h bc-emit.h\n varasm.o : varasm.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h function.h \\\n    defaults.h insn-codes.h expr.h hard-reg-set.h regs.h xcoffout.h \\\n-   output.h bytecode.h \n+   output.h bytecode.h c-pragma.h\n function.o : function.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n    insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \\\n    recog.h output.h bytecode.h"}, {"sha": "2c10890ed0cb5f6a64e9c12a8a3e10444c526e4d", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=3d6f7931f91b0c782095f2acabd853ace1ec9d72", "patch": "@@ -30,6 +30,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"c-tree.h\"\n #include \"flags.h\"\n #include \"c-parse.h\"\n+#include \"c-pragma.h\"\n \n #include <ctype.h>\n "}, {"sha": "13471dbd99db83f1defb366cf8237d977d758d43", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=3d6f7931f91b0c782095f2acabd853ace1ec9d72", "patch": "@@ -22,31 +22,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"tree.h\"\n #include \"function.h\"\n #include \"defaults.h\"\n+#include \"c-pragma.h\"\n \n #ifdef HANDLE_SYSV_PRAGMA\n \n-/* Support #pragma weak by default if WEAK_ASM_OP and ASM_OUTPUT_DEF\n-   are defined.  */\n-#if !defined (HANDLE_PRAGMA_WEAK) && defined (WEAK_ASM_OP) && defined (ASM_OUTPUT_DEF)\n-#define HANDLE_PRAGMA_WEAK 1\n-#endif\n-\n-/* See varasm.c for an identical definition.  */\n-enum pragma_state\n-{\n-  ps_start,\n-  ps_done,\n-  ps_bad,\n-  ps_weak,\n-  ps_name,\n-  ps_equals,\n-  ps_value,\n-  ps_pack,\n-  ps_left,\n-  ps_align,\n-  ps_right\n-};\n-\n /* When structure field packing is in effect, this variable is the\n    number of bits to use as the maximum alignment.  When packing is not\n    in effect, this is zero. */\n@@ -82,7 +61,7 @@ handle_pragma_token (string, token)\n \t{\n #ifdef HANDLE_PRAGMA_WEAK\n \t  if (HANDLE_PRAGMA_WEAK)\n-\t    handle_pragma_weak (state, asm_out_file, name, value);\n+\t    handle_pragma_weak (state, name, value);\n \n #endif /* HANDLE_PRAMA_WEAK */\n \t}"}, {"sha": "7eaacd012db75cff21b8dbe59a9f5e8993eca194", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=3d6f7931f91b0c782095f2acabd853ace1ec9d72", "patch": "@@ -0,0 +1,48 @@\n+/* Pragma related interfaces.\n+   Copyright (C) 1995 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#ifdef HANDLE_SYSV_PRAGMA\n+\n+/* Support #pragma weak by default if WEAK_ASM_OP and ASM_OUTPUT_DEF\n+   are defined.  */\n+#if !defined (HANDLE_PRAGMA_WEAK) && defined (WEAK_ASM_OP) && defined (ASM_OUTPUT_DEF)\n+#define HANDLE_PRAGMA_WEAK 1\n+#endif\n+\n+enum pragma_state\n+{\n+  ps_start,\n+  ps_done,\n+  ps_bad,\n+  ps_weak,\n+  ps_name,\n+  ps_equals,\n+  ps_value,\n+  ps_pack,\n+  ps_left,\n+  ps_align,\n+  ps_right\n+};\n+\n+/* Output asm to handle ``#pragma weak'' */\n+extern void handle_pragma_weak PROTO((enum pragma_state, char *, char *));\n+\n+/* Handle a C style pragma */\n+extern void handle_pragma_token PROTO((char *, tree));\n+#endif /* HANDLE_SYSV_PRAGMA */"}, {"sha": "52f6186c33c4841f88fb74bc5a064629a20e7c26", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=3d6f7931f91b0c782095f2acabd853ace1ec9d72", "patch": "@@ -222,7 +222,7 @@ $(srcdir)/hash.h:\n spew.o : spew.c $(CONFIG_H) $(CXX_TREE_H) \\\n   $(PARSE_H) $(srcdir)/../flags.h lex.h\n lex.o : lex.c $(CONFIG_H) $(CXX_TREE_H) \\\n-  $(PARSE_H) input.c $(srcdir)/../flags.h hash.h lex.h\n+  $(PARSE_H) input.c $(srcdir)/../flags.h hash.h lex.h $(srcdir)/../c-pragma.h\n decl.o : decl.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   lex.h decl.h $(srcdir)/../stack.h\n decl2.o : decl2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\"}, {"sha": "fbf68e474ed834dc6c6224c4b60276a92ef6789a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=3d6f7931f91b0c782095f2acabd853ace1ec9d72", "patch": "@@ -36,6 +36,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"cp-tree.h\"\n #include \"flags.h\"\n #include \"obstack.h\"\n+#include \"c-pragma.h\"\n \n #ifdef MULTIBYTE_CHARS\n #include <stdlib.h>\n@@ -4953,10 +4954,10 @@ handle_sysv_pragma ()\n \t  handle_pragma_token (token_buffer, yylval.ttype);\n \t  break;\n \tcase END_OF_LINE:\n-\t  handle_pragma_token (0, 0);\n+\t  handle_pragma_token (NULL_PTR, NULL_TREE);\n \t  return;\n \tdefault:\n-\t  handle_pragma_token (token_buffer, 0);\n+\t  handle_pragma_token (token_buffer, NULL_TREE);\n \t}\n     }\n }"}, {"sha": "4ea82fcb5936d71630de85ef6332d81ab1a4a280", "filename": "gcc/varasm.c", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d6f7931f91b0c782095f2acabd853ace1ec9d72/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3d6f7931f91b0c782095f2acabd853ace1ec9d72", "patch": "@@ -42,6 +42,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"bytecode.h\"\n \n #include \"obstack.h\"\n+#include \"c-pragma.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\n@@ -97,7 +98,7 @@ int size_directive_output;\n tree last_assemble_variable_decl;\n \n \n-#if defined (HANDLE_PRAGMA_WEAK) || (defined (WEAK_ASM_OP) && defined (ASM_OUTPUT_DEF))\n+#ifdef HANDLE_PRAGMA_WEAK\n /* Any weak symbol declarations waiting to be emitted.  */\n \n struct weak_syms\n@@ -3926,35 +3927,12 @@ output_constructor (exp, size)\n     assemble_zeros (size - total_bytes);\n }\n \n-/* Support #pragma weak by default if WEAK_ASM_OP and ASM_OUTPUT_DEF\n-   are defined.  */\n-#if !defined (HANDLE_PRAGMA_WEAK) && defined (WEAK_ASM_OP) && defined (ASM_OUTPUT_DEF)\n-#define HANDLE_PRAGMA_WEAK 1\n-#endif\n-\n #if defined (HANDLE_SYSV_PRAGMA) && defined (HANDLE_PRAGMA_WEAK)\n \n-/* See c-pragma.c for an identical definition.  */\n-enum pragma_state\n-{\n-  ps_start,\n-  ps_done,\n-  ps_bad,\n-  ps_weak,\n-  ps_name,\n-  ps_equals,\n-  ps_value,\n-  ps_pack,\n-  ps_left,\n-  ps_align,\n-  ps_right\n-};\n-\n /* Output asm to handle ``#pragma weak'' */\n void\n-handle_pragma_weak (what, out_file, name, value)\n+handle_pragma_weak (what, name, value)\n      enum pragma_state what;\n-     FILE *out_file;\n      char *name, *value;\n {\n   if (what == ps_name || what == ps_value)\n@@ -3988,12 +3966,17 @@ void\n declare_weak (decl)\n      tree decl;\n {\n+#ifdef HANDLE_PRAGMA_WEAK\n   if (! TREE_PUBLIC (decl))\n     error_with_decl (decl, \"weak declaration of `%s' must be public\");\n   else\n-    handle_pragma_weak (ps_name, asm_out_file,\n+    handle_pragma_weak (ps_name,\n \t\t\tIDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n \t\t\tNULL_PTR);\n+\n+#else\n+  error (\"weak declarations are not supported in this configuration\");\n+#endif\n }\n \n /* Emit any pending weak declarations.  */"}]}