{"sha": "35f5add9236429ef410635f4180d6ea3f29010c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVmNWFkZDkyMzY0MjllZjQxMDYzNWY0MTgwZDZlYTNmMjkwMTBjOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-02-12T19:08:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-02-12T19:08:34Z"}, "message": "re PR bootstrap/13617 (IRIX 6.5 Ada bootstrap failure with GNU as 2.14.90)\n\n\tPR bootstrap/13617\n\t* config/mips/mips-protos.h (mips_output_aligned_decl_common): Declare.\n\t(mips_declare_object): Make variadic.\n\t* config/mips/mips.h (ASM_OUTPUT_ALIGNED_DECL_COMMON): Use\n\tmips_output_aligned_decl_common.\n\t* config/mips/mips.c (mips_output_aligned_decl_common): New function.\n\t(mips_declare_object): Make variadic.\n\nFrom-SVN: r77721", "tree": {"sha": "6093601200bca6d5f063d88800622361086adbd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6093601200bca6d5f063d88800622361086adbd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35f5add9236429ef410635f4180d6ea3f29010c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f5add9236429ef410635f4180d6ea3f29010c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35f5add9236429ef410635f4180d6ea3f29010c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f5add9236429ef410635f4180d6ea3f29010c8/comments", "author": null, "committer": null, "parents": [{"sha": "e88e9aee05d3b1ea0e5860713b5eb873130a23a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88e9aee05d3b1ea0e5860713b5eb873130a23a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e88e9aee05d3b1ea0e5860713b5eb873130a23a8"}], "stats": {"total": 92, "additions": 65, "deletions": 27}, "files": [{"sha": "3c3b8605748aad2966d26f756e77b804c2753b45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f5add9236429ef410635f4180d6ea3f29010c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f5add9236429ef410635f4180d6ea3f29010c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35f5add9236429ef410635f4180d6ea3f29010c8", "patch": "@@ -1,3 +1,13 @@\n+2004-02-12  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\tPR bootstrap/13617\n+\t* config/mips/mips-protos.h (mips_output_aligned_decl_common): Declare.\n+\t(mips_declare_object): Make variadic.\n+\t* config/mips/mips.h (ASM_OUTPUT_ALIGNED_DECL_COMMON): Use\n+\tmips_output_aligned_decl_common.\n+\t* config/mips/mips.c (mips_output_aligned_decl_common): New function.\n+\t(mips_declare_object): Make variadic.\n+\n 2004-02-12  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* emit-rtl.c (set_mem_attributes_minus_bitpos): Don't kill"}, {"sha": "a2b1d458fc361f10e67c19dea1ebc2a1fd47fb70", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f5add9236429ef410635f4180d6ea3f29010c8/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f5add9236429ef410635f4180d6ea3f29010c8/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=35f5add9236429ef410635f4180d6ea3f29010c8", "patch": "@@ -104,8 +104,11 @@ extern void mips_output_lineno (FILE *, int);\n extern void mips_output_ascii (FILE *, const char *, size_t, const char *);\n extern void mips_output_aligned_bss (FILE *, tree, const char *,\n \t\t\t\t     unsigned HOST_WIDE_INT, int);\n+extern void mips_output_aligned_decl_common (FILE *, tree, const char *,\n+\t\t\t\t\t     unsigned HOST_WIDE_INT,\n+\t\t\t\t\t     unsigned int);\n extern void mips_declare_object (FILE *, const char *, const char *,\n-\t\t\t\t const char *, int);\n+\t\t\t\t const char *, ...);\n extern void mips_declare_object_name (FILE *, const char *, tree);\n extern void mips_finish_declare_object (FILE *, tree, int, int);\n "}, {"sha": "40b80148fc020d0de04e9c381d5ee74a15807a79", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f5add9236429ef410635f4180d6ea3f29010c8/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f5add9236429ef410635f4180d6ea3f29010c8/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=35f5add9236429ef410635f4180d6ea3f29010c8", "patch": "@@ -6022,17 +6022,63 @@ mips_file_end (void)\n     }\n }\n \n+/* Implement ASM_OUTPUT_ALIGNED_DECL_COMMON.  This is usually the same as\n+   the elfos.h version, but we also need to handle -muninit-const-in-rodata\n+   and the limitations of the SGI o32 assembler.  */\n+\n+void\n+mips_output_aligned_decl_common (FILE *stream, tree decl, const char *name,\n+\t\t\t\t unsigned HOST_WIDE_INT size,\n+\t\t\t\t unsigned int align)\n+{\n+  /* If the target wants uninitialized const declarations in\n+     .rdata then don't put them in .comm.   */\n+  if (TARGET_EMBEDDED_DATA && TARGET_UNINIT_CONST_IN_RODATA\n+      && TREE_CODE (decl) == VAR_DECL && TREE_READONLY (decl)\n+      && (DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node))\n+    {\n+      if (TREE_PUBLIC (decl) && DECL_NAME (decl))\n+\ttargetm.asm_out.globalize_label (stream, name);\n+\n+      readonly_data_section ();\n+      ASM_OUTPUT_ALIGN (stream, floor_log2 (align / BITS_PER_UNIT));\n+      mips_declare_object (stream, name, \"\",\n+\t\t\t   \":\\n\\t.space\\t\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n+\t\t\t   size);\n+    }\n+  else if (TARGET_SGI_O32_AS)\n+    {\n+      /* The SGI o32 assembler doesn't accept an alignment, so round up\n+\t the size instead.  */\n+      size += (align / BITS_PER_UNIT) - 1;\n+      size -= size % (align / BITS_PER_UNIT);\n+      mips_declare_object (stream, name, \"\\n\\t.comm\\t\",\n+\t\t\t   \",\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\", size);\n+    }\n+  else\n+    mips_declare_object (stream, name, \"\\n\\t.comm\\t\",\n+\t\t\t \",\" HOST_WIDE_INT_PRINT_UNSIGNED \",%u\\n\",\n+\t\t\t size, align / BITS_PER_UNIT);\n+}\n+\n /* Emit either a label, .comm, or .lcomm directive.  When using assembler\n    macros, mark the symbol as written so that mips_file_end won't emit an\n-   .extern for it.  */\n+   .extern for it.  STREAM is the output file, NAME is the name of the\n+   symbol, INIT_STRING is the string that should be written before the\n+   symbol and FINAL_STRING is the string that shoulbe written after it.\n+   FINAL_STRING is a printf() format that consumes the remaining arguments.  */\n \n void\n mips_declare_object (FILE *stream, const char *name, const char *init_string,\n-\t\t     const char *final_string, int size)\n+\t\t     const char *final_string, ...)\n {\n-  fputs (init_string, stream);\t\t/* \"\", \"\\t.comm\\t\", or \"\\t.lcomm\\t\" */\n+  va_list ap;\n+\n+  fputs (init_string, stream);\n   assemble_name (stream, name);\n-  fprintf (stream, final_string, size);\t/* \":\\n\", \",%u\\n\", \",%u\\n\" */\n+  va_start (ap, final_string);\n+  vfprintf (stream, final_string, ap);\n+  va_end (ap);\n \n   if (!TARGET_EXPLICIT_RELOCS)\n     {"}, {"sha": "708b2e2eec0f44ba9f99a868983eb60d53bb3acf", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35f5add9236429ef410635f4180d6ea3f29010c8/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35f5add9236429ef410635f4180d6ea3f29010c8/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=35f5add9236429ef410635f4180d6ea3f29010c8", "patch": "@@ -3177,28 +3177,7 @@ while (0)\n \n /* This says how to define a global common symbol.  */\n \n-#define ASM_OUTPUT_ALIGNED_DECL_COMMON(STREAM, DECL, NAME, SIZE, ALIGN) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    /* If the target wants uninitialized const declarations in\t\t\\\n-       .rdata then don't put them in .comm */\t\t\t\t\\\n-    if (TARGET_EMBEDDED_DATA && TARGET_UNINIT_CONST_IN_RODATA\t\t\\\n-\t&& TREE_CODE (DECL) == VAR_DECL && TREE_READONLY (DECL)\t\t\\\n-\t&& (DECL_INITIAL (DECL) == 0\t\t\t\t\t\\\n-\t    || DECL_INITIAL (DECL) == error_mark_node))\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tif (TREE_PUBLIC (DECL) && DECL_NAME (DECL))\t\t\t\\\n-\t  (*targetm.asm_out.globalize_label) (STREAM, NAME);\t\t\\\n-\t    \t\t\t\t\t\t\t\t\\\n-\treadonly_data_section ();\t\t\t\t\t\\\n-\tASM_OUTPUT_ALIGN (STREAM, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n-\tmips_declare_object (STREAM, NAME, \"\", \":\\n\\t.space\\t%u\\n\",\t\\\n-\t    (SIZE));\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-\tmips_declare_object (STREAM, NAME, \"\\n\\t.comm\\t\", \",%u\\n\",\t\\\n-\t  (SIZE));\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n+#define ASM_OUTPUT_ALIGNED_DECL_COMMON mips_output_aligned_decl_common\n \n /* This says how to define a local common symbol (ie, not visible to\n    linker).  */"}]}