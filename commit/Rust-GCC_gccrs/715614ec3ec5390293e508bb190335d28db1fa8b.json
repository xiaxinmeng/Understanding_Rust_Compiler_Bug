{"sha": "715614ec3ec5390293e508bb190335d28db1fa8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1NjE0ZWMzZWM1MzkwMjkzZTUwOGJiMTkwMzM1ZDI4ZGIxZmE4Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-07T21:51:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-08T03:54:52Z"}, "message": "c++: fix modules binfo merging\n\nMy coming fix for PR91706 caused some regressions in the modules testsuite.\nThis turned out to be because the change to properly use the base subobject\nBINFO as BASELINK_BINFO hit problems with the code for merging binfos.  The\ntree reader needed a typo fix.  The duplicate_hash function was crashing on\nthe BINFO for a variadic base in <variant>.  I started fixing the hash\nfunction, but then noticed that there's no ::equal function defined;\nduplicate_hash just uses pointer equality, so we might as well also\nuse the normal pointer hash for the moment.\n\ngcc/cp/ChangeLog:\n\n\t* module.cc (duplicate_hash::hash): Comment out.\n\t(trees_in::tree_value): Adjust loop counter.", "tree": {"sha": "239d32e33207ca9818dffd81724034f6ed161bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/239d32e33207ca9818dffd81724034f6ed161bb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/715614ec3ec5390293e508bb190335d28db1fa8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715614ec3ec5390293e508bb190335d28db1fa8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715614ec3ec5390293e508bb190335d28db1fa8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715614ec3ec5390293e508bb190335d28db1fa8b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1b3484a8e6c53c8084723e3f1738d402374198e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b3484a8e6c53c8084723e3f1738d402374198e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b3484a8e6c53c8084723e3f1738d402374198e"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "f259515a4989933b0768f8eb4092f7d7dffa06f5", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715614ec3ec5390293e508bb190335d28db1fa8b/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715614ec3ec5390293e508bb190335d28db1fa8b/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=715614ec3ec5390293e508bb190335d28db1fa8b", "patch": "@@ -2820,12 +2820,16 @@ struct merge_key {\n \n struct duplicate_hash : nodel_ptr_hash<tree_node>\n {\n+#if 0\n+  /* This breaks variadic bases in the xtreme_header tests.  Since ::equal is\n+     the default pointer_hash::equal, let's use the default hash as well.  */\n   inline static hashval_t hash (value_type decl)\n   {\n     if (TREE_CODE (decl) == TREE_BINFO)\n       decl = TYPE_NAME (BINFO_TYPE (decl));\n     return hashval_t (DECL_UID (decl));\n   }\n+#endif\n };\n \n /* Hashmap of merged duplicates.  Usually decls, but can contain\n@@ -8908,7 +8912,7 @@ trees_in::tree_value ()\n \t  dump (dumper::MERGE)\n \t    && dump (\"Deduping binfo %N[%u]\", type, ix);\n \t  existing = TYPE_BINFO (type);\n-\t  while (existing && ix)\n+\t  while (existing && ix--)\n \t    existing = TREE_CHAIN (existing);\n \t  if (existing)\n \t    register_duplicate (t, existing);"}]}