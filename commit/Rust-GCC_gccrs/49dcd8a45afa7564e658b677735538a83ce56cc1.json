{"sha": "49dcd8a45afa7564e658b677735538a83ce56cc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkY2Q4YTQ1YWZhNzU2NGU2NThiNjc3NzM1NTM4YTgzY2U1NmNjMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-17T07:38:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-17T07:38:32Z"}, "message": "re PR tree-optimization/82549 (ICE at -O1 and above: verify_gimple failed)\n\n\tPR tree-optimization/82549\n\t* fold-const.c (optimize_bit_field_compare, fold_truth_andor_1):\n\tFormatting fixes.  Instead of calling make_bit_field_ref with negative\n\tbitpos return 0.\n\n\t* gcc.c-torture/compile/pr82549.c: New test.\n\nFrom-SVN: r253805", "tree": {"sha": "c17639a5c47727a55f5035bbe921afaab74f2999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c17639a5c47727a55f5035bbe921afaab74f2999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49dcd8a45afa7564e658b677735538a83ce56cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49dcd8a45afa7564e658b677735538a83ce56cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49dcd8a45afa7564e658b677735538a83ce56cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49dcd8a45afa7564e658b677735538a83ce56cc1/comments", "author": null, "committer": null, "parents": [{"sha": "7a76132c80a7a5b832c93bf1ff44e14720d54a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a76132c80a7a5b832c93bf1ff44e14720d54a33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a76132c80a7a5b832c93bf1ff44e14720d54a33"}], "stats": {"total": 77, "additions": 55, "deletions": 22}, "files": [{"sha": "63688adf67970b13763d60aacea614e5817426d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49dcd8a45afa7564e658b677735538a83ce56cc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49dcd8a45afa7564e658b677735538a83ce56cc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49dcd8a45afa7564e658b677735538a83ce56cc1", "patch": "@@ -1,4 +1,11 @@\n-17-10-2017  Olga Makhotina  <olga.makhotina@intel.com>\n+2017-10-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/82549\n+\t* fold-const.c (optimize_bit_field_compare, fold_truth_andor_1):\n+\tFormatting fixes.  Instead of calling make_bit_field_ref with negative\n+\tbitpos return 0.\n+\n+2017-10-17  Olga Makhotina  <olga.makhotina@intel.com>\n \n \t* config/i386/avx512dqintrin.h (_mm_mask_reduce_sd,\n \t_mm_maskz_reduce_sd, _mm_mask_reduce_ss,=20"}, {"sha": "d87607474eb4dcb12c7ac44617fdcc4db575c715", "filename": "gcc/fold-const.c", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49dcd8a45afa7564e658b677735538a83ce56cc1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49dcd8a45afa7564e658b677735538a83ce56cc1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=49dcd8a45afa7564e658b677735538a83ce56cc1", "patch": "@@ -4013,21 +4013,20 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n \t\t      size_int (nbitsize - lbitsize - lbitpos));\n \n   if (! const_p)\n-    /* If not comparing with constant, just rework the comparison\n-       and return.  */\n-    return fold_build2_loc (loc, code, compare_type,\n-\t\t\tfold_build2_loc (loc, BIT_AND_EXPR, unsigned_type,\n-\t\t\t\t     make_bit_field_ref (loc, linner, lhs,\n-\t\t\t\t\t\t\t unsigned_type,\n-\t\t\t\t\t\t\t nbitsize, nbitpos,\n-\t\t\t\t\t\t\t 1, lreversep),\n-\t\t\t\t     mask),\n-\t\t\tfold_build2_loc (loc, BIT_AND_EXPR, unsigned_type,\n-\t\t\t\t     make_bit_field_ref (loc, rinner, rhs,\n-\t\t\t\t\t\t\t unsigned_type,\n-\t\t\t\t\t\t\t nbitsize, nbitpos,\n-\t\t\t\t\t\t\t 1, rreversep),\n-\t\t\t\t     mask));\n+    {\n+      if (nbitpos < 0)\n+\treturn 0;\n+\n+      /* If not comparing with constant, just rework the comparison\n+\t and return.  */\n+      tree t1 = make_bit_field_ref (loc, linner, lhs, unsigned_type,\n+\t\t\t\t    nbitsize, nbitpos, 1, lreversep);\n+      t1 = fold_build2_loc (loc, BIT_AND_EXPR, unsigned_type, t1, mask);\n+      tree t2 = make_bit_field_ref (loc, rinner, rhs, unsigned_type,\n+\t\t\t\t    nbitsize, nbitpos, 1, rreversep);\n+      t2 = fold_build2_loc (loc, BIT_AND_EXPR, unsigned_type, t2, mask);\n+      return fold_build2_loc (loc, code, compare_type, t1, t2);\n+    }\n \n   /* Otherwise, we are handling the constant case.  See if the constant is too\n      big for the field.  Warn and return a tree for 0 (false) if so.  We do\n@@ -4058,6 +4057,9 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n \t}\n     }\n \n+  if (nbitpos < 0)\n+    return 0;\n+\n   /* Single-bit compares should always be against zero.  */\n   if (lbitsize == 1 && ! integer_zerop (rhs))\n     {\n@@ -5874,7 +5876,10 @@ fold_truth_andor_1 (location_t loc, enum tree_code code, tree truth_type,\n \t results.  */\n       ll_mask = const_binop (BIT_IOR_EXPR, ll_mask, rl_mask);\n       lr_mask = const_binop (BIT_IOR_EXPR, lr_mask, rr_mask);\n-      if (lnbitsize == rnbitsize && xll_bitpos == xlr_bitpos)\n+      if (lnbitsize == rnbitsize\n+\t  && xll_bitpos == xlr_bitpos\n+\t  && lnbitpos >= 0\n+\t  && rnbitpos >= 0)\n \t{\n \t  lhs = make_bit_field_ref (loc, ll_inner, ll_arg,\n \t\t\t\t    lntype, lnbitsize, lnbitpos,\n@@ -5898,10 +5903,14 @@ fold_truth_andor_1 (location_t loc, enum tree_code code, tree truth_type,\n \t Note that we still must mask the lhs/rhs expressions.  Furthermore,\n \t the mask must be shifted to account for the shift done by\n \t make_bit_field_ref.  */\n-      if ((ll_bitsize + ll_bitpos == rl_bitpos\n-\t   && lr_bitsize + lr_bitpos == rr_bitpos)\n-\t  || (ll_bitpos == rl_bitpos + rl_bitsize\n-\t      && lr_bitpos == rr_bitpos + rr_bitsize))\n+      if (((ll_bitsize + ll_bitpos == rl_bitpos\n+\t    && lr_bitsize + lr_bitpos == rr_bitpos)\n+\t   || (ll_bitpos == rl_bitpos + rl_bitsize\n+\t       && lr_bitpos == rr_bitpos + rr_bitsize))\n+\t  && ll_bitpos >= 0\n+\t  && rl_bitpos >= 0\n+\t  && lr_bitpos >= 0\n+\t  && rr_bitpos >= 0)\n \t{\n \t  tree type;\n \n@@ -5970,6 +5979,9 @@ fold_truth_andor_1 (location_t loc, enum tree_code code, tree truth_type,\n \t}\n     }\n \n+  if (lnbitpos < 0)\n+    return 0;\n+\n   /* Construct the expression we will return.  First get the component\n      reference we will make.  Unless the mask is all ones the width of\n      that field, perform the mask operation.  Then compare with the"}, {"sha": "589ff0e18dbead60497d1dea7c8a9413906f16af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49dcd8a45afa7564e658b677735538a83ce56cc1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49dcd8a45afa7564e658b677735538a83ce56cc1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49dcd8a45afa7564e658b677735538a83ce56cc1", "patch": "@@ -1,10 +1,15 @@\n+2017-10-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/82549\n+\t* gcc.c-torture/compile/pr82549.c: New test.\n+\n 2017-10-17  Martin Liska  <mliska@suse.cz>\n \n \t* lib/scanasm.exp: Print how many times a regex pattern is\n \tfound.\n \t* lib/scandump.exp: Likewise.\n \n-17-10-2017  Olga Makhotina  <olga.makhotina@intel.com>\n+2017-10-17  Olga Makhotina  <olga.makhotina@intel.com>\n \n \t* gcc.target/i386/avx512dq-vreducesd-1.c (_mm_mask_reduce_sd,\n \t_mm_maskz_reduce_sd): Test new intrinsics."}, {"sha": "11525cde0320f7fb262feedec7e96a9c01cdf584", "filename": "gcc/testsuite/gcc.c-torture/compile/pr82549.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49dcd8a45afa7564e658b677735538a83ce56cc1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82549.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49dcd8a45afa7564e658b677735538a83ce56cc1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82549.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82549.c?ref=49dcd8a45afa7564e658b677735538a83ce56cc1", "patch": "@@ -0,0 +1,9 @@\n+/* PR tree-optimization/82549 */\n+\n+int a, b[1];\n+\n+int\n+main ()\n+{\n+  return !a || b[-2] || b[-2];\n+}"}]}