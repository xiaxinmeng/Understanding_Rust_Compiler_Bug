{"sha": "a30dbb3960c4ae895266e5c46519bfa3fd3ebd26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwZGJiMzk2MGM0YWU4OTUyNjZlNWM0NjUxOWJmYTNmZDNlYmQyNg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-11-30T23:44:32Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-11-30T23:44:32Z"}, "message": "cmath.cc: Remove.\n\n\t* src/cmath.cc: Remove.\n\t* src/Makefile.am (c_base_headers): Add bits/cmath.tcc.\n\t(sources): Remove cmath.cc\n\t* src/Makefile.in: Regenerate.\n\n\t* include/c/bits/std_cmath.h (__cmath_power<>): Declare.\n\t(__cmath_abs<>): New function.\n\t(abs, fabs): Use __cmath_abs when no direct support is available.\n\t(__pow_helper<>): New function.\n\t(pow): Define here.  Use __pow_helper<>.\n\n\t* include/c/bits/cmath.tcc: New file.\n\nFrom-SVN: r37901", "tree": {"sha": "02696b9245ae1ec0420e02fd6afbd46ad318c866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02696b9245ae1ec0420e02fd6afbd46ad318c866"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26/comments", "author": null, "committer": null, "parents": [{"sha": "29ced803f03dd87aa478f44844c4405db9196651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ced803f03dd87aa478f44844c4405db9196651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ced803f03dd87aa478f44844c4405db9196651"}], "stats": {"total": 158, "additions": 82, "deletions": 76}, "files": [{"sha": "b7beba09f993495978fe02dd52ed15d187399ed9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a30dbb3960c4ae895266e5c46519bfa3fd3ebd26", "patch": "@@ -1,3 +1,18 @@\n+2000-12-01  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* src/cmath.cc: Remove.\n+\t* src/Makefile.am (c_base_headers): Add bits/cmath.tcc.\n+\t(sources): Remove cmath.cc\n+\t* src/Makefile.in: Regenerate.\n+\n+\t* include/c/bits/std_cmath.h (__cmath_power<>): Declare.\n+\t(__cmath_abs<>): New function.\n+\t(abs, fabs): Use __cmath_abs when no direct support is available.\n+\t(__pow_helper<>): New function.\n+\t(pow): Define here.  Use __pow_helper<>.\n+\n+\t* include/c/bits/cmath.tcc: New file.\n+\n 2000-11-29  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tFixes for build directories with colons, AIX build problems."}, {"sha": "c61df979bface8d5b0b257c43e51ba22a596d654", "filename": "libstdc++-v3/include/c/bits/cmath.tcc", "status": "renamed", "additions": 17, "deletions": 49, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fcmath.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fcmath.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fcmath.tcc?ref=a30dbb3960c4ae895266e5c46519bfa3fd3ebd26", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- C math library.\n \n-// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,59 +27,27 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-//\n-// ISO C++ 14882: 26.5  C library\n-// Code for signatures not found in the C library\n-//\n+// This file was written by Gabriel Dos Reis <gdr@codesourcery.com>\n \n-#include <bits/std_cmath.h>\n+#ifndef _CPP_BITS_CMATH_TCC\n+#define _CPP_BITS_CMATH_TCC 1\n \n namespace std {\n-\n-  namespace {\n-    template <typename T>\n-    inline T pow_helper(T x, unsigned int y)\n+  export template<typename _Tp>\n+    _Tp\n+    __cmath_power(_Tp __x, unsigned int __n)\n     {\n-      T z = y&1? x : 1;\n-      while(y >>= 1)\n+      _Tp __y = __n % 2 ? __x : 1;\n+\n+      while (__n >>= 1)\n         {\n-          x *= x;\n-          if(y & 1) z *= x;\n+          __x = __x * __x;\n+          if (__n % 2)\n+            __y = __y * __x;\n         }\n-      return z;\n-    }\n-  }\n-\n-  float\n-  pow(float x, int y)\n-  {\n-    if(y < 0)\n-      return 1.0f/pow_helper(x, -y);\n-    else\n-      return pow_helper(x, y);\n-  }\n-\n-  double\n-  pow(double x, int y)\n-  {\n-    if(y < 0)\n-      return 1.0/pow_helper(x, -y);\n-    else\n-      return pow_helper(x, y);\n-  }\n-\n-  long double\n-  pow(long double x, int y)\n-  {\n-    if(y < 0)\n-      return 1.0l/pow_helper(x, -y);\n-    else\n-      return pow_helper(x, y);\n-  }\n-\n-} // std\n-\n-\n-\n \n+      return __y;\n+    }\n+}\n \n+#endif", "previous_filename": "libstdc++-v3/src/cmath.cc"}, {"sha": "30999c5f28de112683fe421542e209efaaaa0e66", "filename": "libstdc++-v3/include/c/bits/std_cmath.h", "status": "modified", "additions": 45, "deletions": 21, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h?ref=a30dbb3960c4ae895266e5c46519bfa3fd3ebd26", "patch": "@@ -44,6 +44,17 @@\n \n namespace std \n {\n+  // Forward declaration of a helper function.  This really should be\n+  // an `exported' forward declaration.\n+  template<typename _Tp> _Tp __cmath_power(_Tp, unsigned int);\n+\n+  template<typename _Tp>\n+  inline _Tp\n+    __cmath_abs(_Tp __x)\n+    {\n+      return __x < _Tp() ? -__x : __x;\n+    }\n+\n   inline long \n   abs(long __i) { return ::labs(__i); }\n \n@@ -58,7 +69,7 @@ namespace std\n   abs(float __x) { return ::fabsf(__x); }\n #else\n   inline float \n-  abs(float __x) { return ::fabs(static_cast<double>(__x)); }\n+  abs(float __x) { return __cmath_abs(__x); }\n #endif\n \n #if _GLIBCPP_HAVE_ACOSF\n@@ -137,7 +148,7 @@ namespace std\n   fabs(float __x) { return ::fabsf(__x); }\n #else\n   inline float \n-  fabs(float __x) { return ::fabs(static_cast<double>(__x)); }\n+  fabs(float __x) { return __cmath_abs(__x); }\n #endif\n \n #if _GLIBCPP_HAVE_FLOORF\n@@ -204,6 +215,15 @@ namespace std\n   }\n #endif\n \n+  template<typename _Tp>\n+    inline _Tp\n+    __pow_helper(_Tp __x, int __n)\n+    {\n+      return __n < 0\n+        ? _Tp(1)/__cmath_power(__x, -__n)\n+        : __cmath_power(__x, __n);\n+    }\n+  \n #if _GLIBCPP_HAVE_POWF\n   inline float \n   pow(float __x, float __y) { return ::powf(__x, __y); }\n@@ -213,8 +233,11 @@ namespace std\n   { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-  float \n-  pow(float, int);\n+  inline float \n+  pow(float __x, int __n)\n+  {\n+    return __pow_helper(__x, __n);\n+  }\n \n #if _GLIBCPP_HAVE___BUILTIN_SINF\n   inline float \n@@ -315,8 +338,11 @@ namespace std\n \n   extern \"C\" double pow(double __x, double __y);\n \n-  double \n-  pow(double __x, int __i);\n+  inline double \n+  pow(double __x, int __i)\n+  {\n+    return __pow_helper(__x, __i);\n+  }\n \n #if _GLIBCPP_HAVE___BUILTIN_SIN\n   inline double \n@@ -347,7 +373,7 @@ namespace std\n   abs(long double __x) { return ::fabsl(__x); }\n #else\n   inline long double \n-  abs(long double __x) { return fabs(static_cast<double>(__x)); }\n+  abs(long double __x) { return __cmath_abs(__x); }\n #endif\n \n #if _GLIBCPP_HAVE_ACOSL\n@@ -426,7 +452,7 @@ namespace std\n   fabs(long double __x) { return ::fabsl(__x); }\n #else\n   inline long double \n-  fabs(long double __x) { return ::fabs(static_cast<double>(__x)); }\n+  fabs(long double __x) { return __cmath_abs(__x); }\n #endif\n \n #if _GLIBCPP_HAVE_FLOORL\n@@ -503,8 +529,11 @@ namespace std\n   { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n #endif\n \n-  long double \n-  pow(long double, int);\n+  inline long double \n+  pow(long double __x, int __n)\n+  {\n+    return __pow_helper(__x, __n);\n+  }\n \n #if _GLIBCPP_HAVE___BUILTIN_SINL\n   inline long double \n@@ -551,18 +580,13 @@ namespace std\n   inline long double \n   tanh(long double __x) { return ::tanh(static_cast<double>(__x)); }\n #endif\n-} // std\n-\n-#endif\n-\n-\n-\n-\n-\n-\n-\n-\n \n \n+} // std\n \n+#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+#  define export\n+#  include <bits/cmath.tcc>\n+#endif\n \n+#endif"}, {"sha": "3eb2e9ecf4ea9fd01d26b2e870721c244a108aa9", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=a30dbb3960c4ae895266e5c46519bfa3fd3ebd26", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.53 2000/11/29 01:09:09 gdr Exp $\n+## $Id: Makefile.am,v 1.54 2000/11/29 21:30:30 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -135,7 +135,7 @@ c_base_headers = \\\n \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n-\tbits/std_cwchar.h bits/std_cwctype.h \n+\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n \n if GLIBCPP_USE_CSHADOW\n c_shadow_headers = \\\n@@ -174,7 +174,6 @@ build_headers = \\\n \n sources = \\\n \tlimitsMEMBERS.cc \\\n-\tcmath.cc \\\n \tcomplex.cc complexf.cc complexl.cc complex_io.cc \\\n \tstdexcept.cc bitset.cc \\\n \tc++io.cc ios.cc stdstreams.cc strstream.cc \\"}, {"sha": "a748c57512bc2a8aae0c079dbf02032e0bcda63a", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30dbb3960c4ae895266e5c46519bfa3fd3ebd26/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=a30dbb3960c4ae895266e5c46519bfa3fd3ebd26", "patch": "@@ -156,7 +156,7 @@ backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tb\n ext_headers =  \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n \n \n-c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h \n+c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n \n @GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n@@ -169,7 +169,7 @@ std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios i\n build_headers =  \tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources =  \tlimitsMEMBERS.cc \tcmath.cc \tcomplex.cc complexf.cc complexl.cc complex_io.cc \tstdexcept.cc bitset.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources =  \tlimitsMEMBERS.cc \tcomplex.cc complexf.cc complexl.cc complex_io.cc \tstdexcept.cc bitset.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n wstring_sources =  \twstring-inst.cc\n@@ -254,7 +254,7 @@ libinst_string_la_OBJECTS =  libinst-string.la.lo\n libinst_wstring_la_LDFLAGS = \n libinst_wstring_la_LIBADD = \n libinst_wstring_la_OBJECTS =  wstring-inst.lo\n-libstdc___la_OBJECTS =  limitsMEMBERS.lo cmath.lo complex.lo complexf.lo \\\n+libstdc___la_OBJECTS =  limitsMEMBERS.lo complex.lo complexf.lo \\\n complexl.lo complex_io.lo stdexcept.lo bitset.lo c++io.lo ios.lo \\\n stdstreams.lo strstream.lo locale.lo localename.lo codecvt.lo \\\n locale-inst.lo stl-inst.lo misc-inst.lo valarray-inst.lo string-inst.lo"}]}