{"sha": "eb42aba984cee3983ebbd6df099ecceef8a837f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI0MmFiYTk4NGNlZTM5ODNlYmJkNmRmMDk5ZWNjZWVmOGE4MzdmMg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2015-01-27T11:37:08Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2015-01-27T11:37:08Z"}, "message": "rl78.c (rl78_expand_prologue): In G10 mode push the BC, DE and HL registers directly, not via AX.\n\n\t* config/rl78/rl78.c (rl78_expand_prologue): In G10 mode push the\n\tBC, DE and HL registers directly, not via AX.\n\tWhen decrementing the stack pointer by a large amount, transfer SP\n\tinto AX and perform the subtraction there.\n\t(rl78_expand_epilogue): Perform the inverse of the above\n\tenhancements.\n\nFrom-SVN: r220163", "tree": {"sha": "2aeda64f12a06169a583feb4a026145ea8d20aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aeda64f12a06169a583feb4a026145ea8d20aa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb42aba984cee3983ebbd6df099ecceef8a837f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb42aba984cee3983ebbd6df099ecceef8a837f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb42aba984cee3983ebbd6df099ecceef8a837f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb42aba984cee3983ebbd6df099ecceef8a837f2/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8410904a77b9238a1b65798a0fcd92f340ffe0ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8410904a77b9238a1b65798a0fcd92f340ffe0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8410904a77b9238a1b65798a0fcd92f340ffe0ca"}], "stats": {"total": 94, "additions": 67, "deletions": 27}, "files": [{"sha": "213dfe94e0d25ba0fd2cec9209f2345618023222", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb42aba984cee3983ebbd6df099ecceef8a837f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb42aba984cee3983ebbd6df099ecceef8a837f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb42aba984cee3983ebbd6df099ecceef8a837f2", "patch": "@@ -1,3 +1,12 @@\n+2015-01-27  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/rl78.c (rl78_expand_prologue): In G10 mode push the\n+\tBC, DE and HL registers directly, not via AX.\n+\tWhen decrementing the stack pointer by a large amount, transfer SP\n+\tinto AX and perform the subtraction there.\n+\t(rl78_expand_epilogue): Perform the inverse of the above\n+\tenhancements.\n+\n 2015-01-27  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/i386/sysv4.h (CRT_GET_RFIB_DATA): Remove."}, {"sha": "818f0779dbb6259076f6bf957335f7a7ffc6708a", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 58, "deletions": 27, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb42aba984cee3983ebbd6df099ecceef8a837f2/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb42aba984cee3983ebbd6df099ecceef8a837f2/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=eb42aba984cee3983ebbd6df099ecceef8a837f2", "patch": "@@ -1235,6 +1235,7 @@ rl78_expand_prologue (void)\n {\n   int i, fs;\n   rtx sp = gen_rtx_REG (HImode, STACK_POINTER_REGNUM);\n+  rtx ax = gen_rtx_REG (HImode, AX_REG);\n   int rb = 0;\n \n   if (rl78_is_naked_func ())\n@@ -1258,24 +1259,28 @@ rl78_expand_prologue (void)\n   for (i = 0; i < 16; i++)\n     if (cfun->machine->need_to_push [i])\n       {\n+\tint reg = i * 2;\n+\n \tif (TARGET_G10)\n \t  {\n-\t    if (i != 0)\n-\t      emit_move_insn (gen_rtx_REG (HImode, AX_REG), gen_rtx_REG (HImode, i * 2));\n-\t    F (emit_insn (gen_push (gen_rtx_REG (HImode, AX_REG))));\n+\t    if (reg >= 8)\n+\t      {\n+\t\temit_move_insn (ax, gen_rtx_REG (HImode, reg));\n+\t\treg = AX_REG;\n+\t      }\n \t  }\n \telse\n \t  {\n-\t    int need_bank = i / 4;\n+\t    int need_bank = i/4;\n \n \t    if (need_bank != rb)\n \t      {\n \t\temit_insn (gen_sel_rb (GEN_INT (need_bank)));\n \t\trb = need_bank;\n \t      }\n-\t    F (emit_insn (gen_push (gen_rtx_REG (HImode, i * 2))));\n-\n \t  }\n+\n+\tF (emit_insn (gen_push (gen_rtx_REG (HImode, reg))));\n       }\n \n   if (rb != 0)\n@@ -1285,23 +1290,41 @@ rl78_expand_prologue (void)\n   if (is_interrupt_func (cfun->decl) && cfun->machine->uses_es)\n     {\n       emit_insn (gen_movqi_from_es (gen_rtx_REG (QImode, A_REG)));\n-      F (emit_insn (gen_push (gen_rtx_REG (HImode, AX_REG))));\n+      F (emit_insn (gen_push (ax)));\n     }\n \n   if (frame_pointer_needed)\n     {\n-      F (emit_move_insn (gen_rtx_REG (HImode, AX_REG),\n-\t\t\t gen_rtx_REG (HImode, STACK_POINTER_REGNUM)));\n-      F (emit_move_insn (gen_rtx_REG (HImode, FRAME_POINTER_REGNUM),\n-\t\t\t gen_rtx_REG (HImode, AX_REG)));\n+      F (emit_move_insn (ax, sp));\n+      F (emit_move_insn (gen_rtx_REG (HImode, FRAME_POINTER_REGNUM), ax));\n     }\n \n   fs = cfun->machine->framesize_locals + cfun->machine->framesize_outgoing;\n-  while (fs > 0)\n+  if (fs > 0)\n     {\n-      int fs_byte = (fs > 254) ? 254 : fs;\n-      F (emit_insn (gen_subhi3 (sp, sp, GEN_INT (fs_byte))));\n-      fs -= fs_byte;\n+      /* If we need to subtract more than 254*3 then it is faster and\n+\t smaller to move SP into AX and perform the subtraction there.  */\n+      if (fs > 254 * 3)\n+\t{\n+\t  rtx insn;\n+\n+\t  emit_move_insn (ax, sp);\n+\t  emit_insn (gen_subhi3 (ax, ax, GEN_INT (fs)));\n+\t  insn = emit_move_insn (sp, ax);\n+\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n+\t\t\tgen_rtx_SET (SImode, sp,\n+\t\t\t\t     gen_rtx_PLUS (HImode, sp, GEN_INT (-fs))));\n+\t}\n+      else\n+\t{\n+\t  while (fs > 0)\n+\t    {\n+\t      int fs_byte = (fs > 254) ? 254 : fs;\n+\n+\t      F (emit_insn (gen_subhi3 (sp, sp, GEN_INT (fs_byte))));\n+\t      fs -= fs_byte;\n+\t    }\n+\t}\n     }\n }\n \n@@ -1311,27 +1334,35 @@ rl78_expand_epilogue (void)\n {\n   int i, fs;\n   rtx sp = gen_rtx_REG (HImode, STACK_POINTER_REGNUM);\n+  rtx ax = gen_rtx_REG (HImode, AX_REG);\n   int rb = 0;\n \n   if (rl78_is_naked_func ())\n     return;\n \n   if (frame_pointer_needed)\n     {\n-      emit_move_insn (gen_rtx_REG (HImode, AX_REG),\n-\t\t      gen_rtx_REG (HImode, FRAME_POINTER_REGNUM));\n-      emit_move_insn (gen_rtx_REG (HImode, STACK_POINTER_REGNUM),\n-\t\t      gen_rtx_REG (HImode, AX_REG));\n+      emit_move_insn (ax, gen_rtx_REG (HImode, FRAME_POINTER_REGNUM));\n+      emit_move_insn (sp, ax);\n     }\n   else\n     {\n       fs = cfun->machine->framesize_locals + cfun->machine->framesize_outgoing;\n-      while (fs > 0)\n+      if (fs > 254 * 3)\n+\t{\n+\t  emit_move_insn (ax, sp);\n+\t  emit_insn (gen_addhi3 (ax, ax, GEN_INT (fs)));\n+\t  emit_move_insn (sp, ax);\n+\t}\n+      else\n \t{\n-\t  int fs_byte = (fs > 254) ? 254 : fs;\n+\t  while (fs > 0)\n+\t    {\n+\t      int fs_byte = (fs > 254) ? 254 : fs;\n \n-\t  emit_insn (gen_addhi3 (sp, sp, GEN_INT (fs_byte)));\n-\t  fs -= fs_byte;\n+\t      emit_insn (gen_addhi3 (sp, sp, GEN_INT (fs_byte)));\n+\t      fs -= fs_byte;\n+\t    }\n \t}\n     }\n \n@@ -1348,11 +1379,11 @@ rl78_expand_epilogue (void)\n \n \tif (TARGET_G10)\n \t  {\n-\t    rtx ax = gen_rtx_REG (HImode, AX_REG);\n-\n-\t    emit_insn (gen_pop (ax));\n-\t    if (i != 0)\n+\t    if (i < 8)\n+\t      emit_insn (gen_pop (dest));\n+\t    else\n \t      {\n+\t\temit_insn (gen_pop (ax));\n \t\temit_move_insn (dest, ax);\n \t\t/* Generate a USE of the pop'd register so that DCE will not eliminate the move.  */\n \t\temit_insn (gen_use (dest));"}]}