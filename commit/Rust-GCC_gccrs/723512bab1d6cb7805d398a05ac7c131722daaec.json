{"sha": "723512bab1d6cb7805d398a05ac7c131722daaec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIzNTEyYmFiMWQ2Y2I3ODA1ZDM5OGEwNWFjN2MxMzE3MjJkYWFlYw==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2009-07-24T10:12:16Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2009-07-24T10:12:16Z"}, "message": "re PR libffi/40807 (libffi.call/return_sc.c)\n\n\tPR libffi/40807\n\t* src/x86/ffi.c (ffi_prep_cif_machdep): Also use sign/zero-extending\n\treturn types for X86_WIN32.\n\t* src/x86/win32.S (_ffi_call_SYSV): Handle omitted return types.\n\t(_ffi_call_STDCALL, _ffi_closure_SYSV, _ffi_closure_raw_SYSV,\n\t_ffi_closure_STDCALL): Likewise.\n\n\t* src/closures.c (is_selinux_enabled): Define to const 0 for Cygwin.\n\t(dlmmap, dlmunmap): Also use these functions on Cygwin.\n\nFrom-SVN: r150042", "tree": {"sha": "d5adfebe5e95b2f17877a51afb2d4b4208c5a479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5adfebe5e95b2f17877a51afb2d4b4208c5a479"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/723512bab1d6cb7805d398a05ac7c131722daaec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723512bab1d6cb7805d398a05ac7c131722daaec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/723512bab1d6cb7805d398a05ac7c131722daaec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723512bab1d6cb7805d398a05ac7c131722daaec/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80927a562e1ec4a38a12f4b09b86f2f3ca9f253e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80927a562e1ec4a38a12f4b09b86f2f3ca9f253e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80927a562e1ec4a38a12f4b09b86f2f3ca9f253e"}], "stats": {"total": 516, "additions": 382, "deletions": 134}, "files": [{"sha": "9af1e445e7276769131a896d18021dd341fac7d9", "filename": "libffi/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723512bab1d6cb7805d398a05ac7c131722daaec/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723512bab1d6cb7805d398a05ac7c131722daaec/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=723512bab1d6cb7805d398a05ac7c131722daaec", "patch": "@@ -1,3 +1,15 @@\n+2009-07-24  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR libffi/40807\n+\t* src/x86/ffi.c (ffi_prep_cif_machdep): Also use sign/zero-extending\n+\treturn types for X86_WIN32.\n+\t* src/x86/win32.S (_ffi_call_SYSV): Handle omitted return types.\n+\t(_ffi_call_STDCALL, _ffi_closure_SYSV, _ffi_closure_raw_SYSV,\n+\t_ffi_closure_STDCALL): Likewise.\n+\n+\t* src/closures.c (is_selinux_enabled): Define to const 0 for Cygwin.\n+\t(dlmmap, dlmunmap): Also use these functions on Cygwin.\n+\n 2009-07-11  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR testsuite/40699"}, {"sha": "f07ad06bf33b0769c77910e1a4c924bc429852f6", "filename": "libffi/src/closures.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723512bab1d6cb7805d398a05ac7c131722daaec/libffi%2Fsrc%2Fclosures.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723512bab1d6cb7805d398a05ac7c131722daaec/libffi%2Fsrc%2Fclosures.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fclosures.c?ref=723512bab1d6cb7805d398a05ac7c131722daaec", "patch": "@@ -165,7 +165,15 @@ selinux_enabled_check (void)\n \n #define is_selinux_enabled() 0\n \n-#endif\n+#endif /* !FFI_MMAP_EXEC_SELINUX */\n+\n+#elif defined (__CYGWIN__)\n+\n+#include <sys/mman.h>\n+\n+/* Cygwin is Linux-like, but not quite that Linux-like.  */\n+#define is_selinux_enabled() 0\n+\n #endif /* !defined(X86_WIN32) && !defined(X86_WIN64) */\n \n /* Declare all functions defined in dlmalloc.c as static.  */\n@@ -185,11 +193,11 @@ static int dlmalloc_trim(size_t) MAYBE_UNUSED;\n static size_t dlmalloc_usable_size(void*) MAYBE_UNUSED;\n static void dlmalloc_stats(void) MAYBE_UNUSED;\n \n-#if !defined(X86_WIN32) && !defined(X86_WIN64)\n+#if !(defined(X86_WIN32) || defined(X86_WIN64)) || defined (__CYGWIN__)\n /* Use these for mmap and munmap within dlmalloc.c.  */\n static void *dlmmap(void *, size_t, int, int, int, off_t);\n static int dlmunmap(void *, size_t);\n-#endif /* !defined(X86_WIN32) && !defined(X86_WIN64) */\n+#endif /* !(defined(X86_WIN32) || defined(X86_WIN64)) || defined (__CYGWIN__) */\n \n #define mmap dlmmap\n #define munmap dlmunmap\n@@ -199,7 +207,7 @@ static int dlmunmap(void *, size_t);\n #undef mmap\n #undef munmap\n \n-#if !defined(X86_WIN32) && !defined(X86_WIN64)\n+#if !(defined(X86_WIN32) || defined(X86_WIN64)) || defined (__CYGWIN__)\n \n /* A mutex used to synchronize access to *exec* variables in this file.  */\n static pthread_mutex_t open_temp_exec_file_mutex = PTHREAD_MUTEX_INITIALIZER;\n@@ -514,7 +522,7 @@ segment_holding_code (mstate m, char* addr)\n }\n #endif\n \n-#endif /* !defined(X86_WIN32) && !defined(X86_WIN64) */\n+#endif /* !(defined(X86_WIN32) || defined(X86_WIN64)) || defined (__CYGWIN__) */\n \n /* Allocate a chunk of memory with the given size.  Returns a pointer\n    to the writable address, and sets *CODE to the executable"}, {"sha": "a5f506db19cd864f2ff0a4be8961dcb350706771", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723512bab1d6cb7805d398a05ac7c131722daaec/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723512bab1d6cb7805d398a05ac7c131722daaec/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=723512bab1d6cb7805d398a05ac7c131722daaec", "patch": "@@ -155,7 +155,7 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n #ifdef X86\n     case FFI_TYPE_STRUCT:\n #endif\n-#if defined(X86) || defined(X86_DARWIN) || defined(X86_WIN64)\n+#if defined(X86) || defined (X86_WIN32) || defined(X86_DARWIN) || defined(X86_WIN64)\n     case FFI_TYPE_UINT8:\n     case FFI_TYPE_UINT16:\n     case FFI_TYPE_SINT8:"}, {"sha": "7489dab19c432ba3f30e639e581727aab96c6dfb", "filename": "libffi/src/x86/win32.S", "status": "modified", "additions": 356, "deletions": 128, "changes": 484, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723512bab1d6cb7805d398a05ac7c131722daaec/libffi%2Fsrc%2Fx86%2Fwin32.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723512bab1d6cb7805d398a05ac7c131722daaec/libffi%2Fsrc%2Fx86%2Fwin32.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fwin32.S?ref=723512bab1d6cb7805d398a05ac7c131722daaec", "patch": "@@ -63,86 +63,121 @@ _ffi_call_SYSV:\n \n \tcall  *28(%ebp)\n  \n-        # Remove the space we pushed for the args\n-        movl  16(%ebp),%ecx\n-        addl  %ecx,%esp\n- \n         # Load %ecx with the return type code\n         movl  20(%ebp),%ecx\n  \n         # If the return value pointer is NULL, assume no return value.\n         cmpl  $0,24(%ebp)\n-        jne   retint\n+        jne   0f\n  \n         # Even if there is no space for the return value, we are\n         # obliged to handle floating-point values.\n         cmpl  $FFI_TYPE_FLOAT,%ecx\n-        jne   noretval\n+        jne   .Lnoretval\n         fstp  %st(0)\n  \n-        jmp   epilogue\n- \n-retint:\n-        cmpl  $FFI_TYPE_INT,%ecx\n-        jne   retfloat\n+        jmp   .Lepilogue\n+\n+0:\n+\tcall\t1f\n+\t# Do not insert anything here between the call and the jump table.\n+.Lstore_table:\n+\t.long\t.Lnoretval\t\t/* FFI_TYPE_VOID */\n+\t.long\t.Lretint\t\t/* FFI_TYPE_INT */\n+\t.long\t.Lretfloat\t\t/* FFI_TYPE_FLOAT */\n+\t.long\t.Lretdouble\t\t/* FFI_TYPE_DOUBLE */\n+\t.long\t.Lretlongdouble\t\t/* FFI_TYPE_LONGDOUBLE */\n+\t.long\t.Lretuint8\t\t/* FFI_TYPE_UINT8 */\n+\t.long\t.Lretsint8\t\t/* FFI_TYPE_SINT8 */\n+\t.long\t.Lretuint16\t\t/* FFI_TYPE_UINT16 */\n+\t.long\t.Lretsint16\t\t/* FFI_TYPE_SINT16 */\n+\t.long\t.Lretint\t\t/* FFI_TYPE_UINT32 */\n+\t.long\t.Lretint\t\t/* FFI_TYPE_SINT32 */\n+\t.long\t.Lretint64\t\t/* FFI_TYPE_UINT64 */\n+\t.long\t.Lretint64\t\t/* FFI_TYPE_SINT64 */\n+\t.long\t.Lretstruct\t\t/* FFI_TYPE_STRUCT */\n+\t.long\t.Lretint\t\t/* FFI_TYPE_POINTER */\n+\t.long\t.Lretstruct1b\t\t/* FFI_TYPE_SMALL_STRUCT_1B */\n+\t.long\t.Lretstruct2b\t\t/* FFI_TYPE_SMALL_STRUCT_2B */\n+\t.long\t.Lretstruct4b\t\t/* FFI_TYPE_SMALL_STRUCT_4B */\n+1:\n+\tadd\t%ecx, %ecx\n+\tadd\t%ecx, %ecx\n+\tadd\t(%esp),%ecx\n+\tadd\t$4, %esp\n+\tjmp\t*(%ecx)\n+\n+\t/* Sign/zero extend as appropriate.  */\n+.Lretsint8:\n+\tmovsbl\t%al, %eax\n+\tjmp\t.Lretint\n+\n+.Lretsint16:\n+\tmovswl\t%ax, %eax\n+\tjmp\t.Lretint\n+\n+.Lretuint8:\n+\tmovzbl\t%al, %eax\n+\tjmp\t.Lretint\n+\n+.Lretuint16:\n+\tmovzwl\t%ax, %eax\n+\tjmp\t.Lretint\n+\n+.Lretint:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         movl  %eax,0(%ecx)\n-        jmp   epilogue\n+        jmp   .Lepilogue\n  \n-retfloat:\n-        cmpl  $FFI_TYPE_FLOAT,%ecx\n-        jne   retdouble   \n+.Lretfloat:\n          # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         fstps (%ecx)\n-        jmp   epilogue\n+        jmp   .Lepilogue\n  \n-retdouble:\n-        cmpl  $FFI_TYPE_DOUBLE,%ecx\n-        jne   retlongdouble\n+.Lretdouble:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         fstpl (%ecx)\n-        jmp   epilogue\n+        jmp   .Lepilogue\n  \n-retlongdouble:\n-        cmpl  $FFI_TYPE_LONGDOUBLE,%ecx\n-        jne   retint64\n+.Lretlongdouble:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         fstpt (%ecx)\n-        jmp   epilogue\n+        jmp   .Lepilogue\n  \n-retint64:\n-        cmpl  $FFI_TYPE_SINT64,%ecx\n-        jne   retstruct1b\n+.Lretint64:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         movl  %eax,0(%ecx)\n         movl  %edx,4(%ecx)\n- \n-retstruct1b:\n-        cmpl  $FFI_TYPE_SINT8,%ecx\n-        jne   retstruct2b\n+\tjmp   .Lepilogue\n+\n+.Lretstruct1b:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         movb  %al,0(%ecx)\n-        jmp   epilogue\n+        jmp   .Lepilogue\n  \n-retstruct2b:\n-        cmpl  $FFI_TYPE_SINT16,%ecx\n-        jne   retstruct\n+.Lretstruct2b:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         movw  %ax,0(%ecx)\n-        jmp   epilogue\n- \n-retstruct:\n+        jmp   .Lepilogue\n+\n+.Lretstruct4b:\n+        # Load %ecx with the pointer to storage for the return value\n+        movl  24(%ebp),%ecx\n+        movl  %eax,0(%ecx)\n+        jmp   .Lepilogue\n+\n+.Lretstruct:\n         # Nothing to do!\n  \n-noretval:\n-epilogue:\n+.Lnoretval:\n+.Lepilogue:\n         movl %ebp,%esp\n         popl %ebp\n         ret\n@@ -185,77 +220,117 @@ _ffi_call_STDCALL:\n \n         # If the return value pointer is NULL, assume no return value.\n         cmpl  $0,24(%ebp)\n-        jne   sc_retint\n+        jne   0f\n \n         # Even if there is no space for the return value, we are\n         # obliged to handle floating-point values.\n         cmpl  $FFI_TYPE_FLOAT,%ecx\n-        jne   sc_noretval\n+        jne   .Lsc_noretval\n         fstp  %st(0)\n \n-        jmp   sc_epilogue\n-\n-sc_retint:\n-        cmpl  $FFI_TYPE_INT,%ecx\n-        jne   sc_retfloat\n+        jmp   .Lsc_epilogue\n+\n+0:\n+\tcall\t1f\n+\t# Do not insert anything here between the call and the jump table.\n+.Lsc_store_table:\n+\t.long\t.Lsc_noretval\t\t/* FFI_TYPE_VOID */\n+\t.long\t.Lsc_retint\t\t/* FFI_TYPE_INT */\n+\t.long\t.Lsc_retfloat\t\t/* FFI_TYPE_FLOAT */\n+\t.long\t.Lsc_retdouble\t\t/* FFI_TYPE_DOUBLE */\n+\t.long\t.Lsc_retlongdouble\t/* FFI_TYPE_LONGDOUBLE */\n+\t.long\t.Lsc_retuint8\t\t/* FFI_TYPE_UINT8 */\n+\t.long\t.Lsc_retsint8\t\t/* FFI_TYPE_SINT8 */\n+\t.long\t.Lsc_retuint16\t\t/* FFI_TYPE_UINT16 */\n+\t.long\t.Lsc_retsint16\t\t/* FFI_TYPE_SINT16 */\n+\t.long\t.Lsc_retint\t\t/* FFI_TYPE_UINT32 */\n+\t.long\t.Lsc_retint\t\t/* FFI_TYPE_SINT32 */\n+\t.long\t.Lsc_retint64\t\t/* FFI_TYPE_UINT64 */\n+\t.long\t.Lsc_retint64\t\t/* FFI_TYPE_SINT64 */\n+\t.long\t.Lsc_retstruct\t\t/* FFI_TYPE_STRUCT */\n+\t.long\t.Lsc_retint\t\t/* FFI_TYPE_POINTER */\n+\t.long\t.Lsc_retstruct1b\t/* FFI_TYPE_SMALL_STRUCT_1B */\n+\t.long\t.Lsc_retstruct2b\t/* FFI_TYPE_SMALL_STRUCT_2B */\n+\t.long\t.Lsc_retstruct4b\t/* FFI_TYPE_SMALL_STRUCT_4B */\n+\n+1:\n+\tadd\t%ecx, %ecx\n+\tadd\t%ecx, %ecx\n+\tadd\t(%esp),%ecx\n+\tadd\t$4, %esp\n+\tjmp\t*(%ecx)\n+\n+\t/* Sign/zero extend as appropriate.  */\n+.Lsc_retsint8:\n+\tmovsbl\t%al, %eax\n+\tjmp\t.Lsc_retint\n+\n+.Lsc_retsint16:\n+\tmovswl\t%ax, %eax\n+\tjmp\t.Lsc_retint\n+\n+.Lsc_retuint8:\n+\tmovzbl\t%al, %eax\n+\tjmp\t.Lsc_retint\n+\n+.Lsc_retuint16:\n+\tmovzwl\t%ax, %eax\n+\tjmp\t.Lsc_retint\n+\n+.Lsc_retint:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         movl  %eax,0(%ecx)\n-        jmp   sc_epilogue\n+        jmp   .Lsc_epilogue\n \n-sc_retfloat:\n-        cmpl  $FFI_TYPE_FLOAT,%ecx\n-        jne   sc_retdouble\n+.Lsc_retfloat:\n          # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         fstps (%ecx)\n-        jmp   sc_epilogue\n+        jmp   .Lsc_epilogue\n \n-sc_retdouble:\n-        cmpl  $FFI_TYPE_DOUBLE,%ecx\n-        jne   sc_retlongdouble\n+.Lsc_retdouble:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         fstpl (%ecx)\n-        jmp   sc_epilogue\n+        jmp   .Lsc_epilogue\n \n-sc_retlongdouble:\n-        cmpl  $FFI_TYPE_LONGDOUBLE,%ecx\n-        jne   sc_retint64\n+.Lsc_retlongdouble:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         fstpt (%ecx)\n-        jmp   sc_epilogue\n+        jmp   .Lsc_epilogue\n \n-sc_retint64:\n-        cmpl  $FFI_TYPE_SINT64,%ecx\n-        jne   sc_retstruct1b\n+.Lsc_retint64:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         movl  %eax,0(%ecx)\n         movl  %edx,4(%ecx)\n+\tjmp   .Lsc_epilogue\n \n-sc_retstruct1b:\n-        cmpl  $FFI_TYPE_SINT8,%ecx\n-        jne   sc_retstruct2b\n+.Lsc_retstruct1b:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         movb  %al,0(%ecx)\n-        jmp   sc_epilogue\n+        jmp   .Lsc_epilogue\n \n-sc_retstruct2b:\n-        cmpl  $FFI_TYPE_SINT16,%ecx\n-        jne   sc_retstruct\n+.Lsc_retstruct2b:\n         # Load %ecx with the pointer to storage for the return value\n         movl  24(%ebp),%ecx\n         movw  %ax,0(%ecx)\n-        jmp   sc_epilogue\n+        jmp   .Lsc_epilogue\n+\n+.Lsc_retstruct4b:\n+        # Load %ecx with the pointer to storage for the return value\n+        movl  24(%ebp),%ecx\n+        movl  %eax,0(%ecx)\n+        jmp   .Lsc_epilogue\n \n-sc_retstruct:\n+.Lsc_retstruct:\n         # Nothing to do!\n \n-sc_noretval:\n-sc_epilogue:\n+.Lsc_noretval:\n+.Lsc_epilogue:\n         movl %ebp,%esp\n         popl %ebp\n         ret\n@@ -281,46 +356,98 @@ _ffi_closure_SYSV:\n \tmovl\t%edx, (%esp)\t/* &resp */\n \tcall\t_ffi_closure_SYSV_inner\n \tmovl\t-12(%ebp), %ecx\n-\tcmpl\t$FFI_TYPE_INT, %eax\n-\tje\t.Lcls_retint\n-\tcmpl\t$FFI_TYPE_FLOAT, %eax\n-\tje\t.Lcls_retfloat\n-\tcmpl\t$FFI_TYPE_DOUBLE, %eax\n-\tje\t.Lcls_retdouble\n-\tcmpl\t$FFI_TYPE_LONGDOUBLE, %eax\n-\tje\t.Lcls_retldouble\n-\tcmpl\t$FFI_TYPE_SINT64, %eax\n-\tje\t.Lcls_retllong\n-\tcmpl\t$FFI_TYPE_SINT8, %eax\t/* 1-byte struct */\n-\tje\t.Lcls_retstruct1\n-\tcmpl\t$FFI_TYPE_SINT16, %eax\t/* 2-bytes struct */\n-\tje\t.Lcls_retstruct2\n-.Lcls_epilogue:\n-\tmovl\t%ebp, %esp\n-\tpopl\t%ebp\n-\tret\n+\n+0:\n+\tcall\t1f\n+\t# Do not insert anything here between the call and the jump table.\n+.Lcls_store_table:\n+\t.long\t.Lcls_noretval\t\t/* FFI_TYPE_VOID */\n+\t.long\t.Lcls_retint\t\t/* FFI_TYPE_INT */\n+\t.long\t.Lcls_retfloat\t\t/* FFI_TYPE_FLOAT */\n+\t.long\t.Lcls_retdouble\t\t/* FFI_TYPE_DOUBLE */\n+\t.long\t.Lcls_retldouble\t/* FFI_TYPE_LONGDOUBLE */\n+\t.long\t.Lcls_retuint8\t\t/* FFI_TYPE_UINT8 */\n+\t.long\t.Lcls_retsint8\t\t/* FFI_TYPE_SINT8 */\n+\t.long\t.Lcls_retuint16\t\t/* FFI_TYPE_UINT16 */\n+\t.long\t.Lcls_retsint16\t\t/* FFI_TYPE_SINT16 */\n+\t.long\t.Lcls_retint\t\t/* FFI_TYPE_UINT32 */\n+\t.long\t.Lcls_retint\t\t/* FFI_TYPE_SINT32 */\n+\t.long\t.Lcls_retllong\t\t/* FFI_TYPE_UINT64 */\n+\t.long\t.Lcls_retllong\t\t/* FFI_TYPE_SINT64 */\n+\t.long\t.Lcls_retstruct\t\t/* FFI_TYPE_STRUCT */\n+\t.long\t.Lcls_retint\t\t/* FFI_TYPE_POINTER */\n+\t.long\t.Lcls_retstruct1\t/* FFI_TYPE_SMALL_STRUCT_1B */\n+\t.long\t.Lcls_retstruct2\t/* FFI_TYPE_SMALL_STRUCT_2B */\n+\t.long\t.Lcls_retstruct4\t/* FFI_TYPE_SMALL_STRUCT_4B */\n+\n+1:\n+\tadd\t%eax, %eax\n+\tadd\t%eax, %eax\n+\tadd\t(%esp),%eax\n+\tadd\t$4, %esp\n+\tjmp\t*(%eax)\n+\n+\t/* Sign/zero extend as appropriate.  */\n+.Lcls_retsint8:\n+\tmovsbl\t(%ecx), %eax\n+\tjmp\t.Lcls_epilogue\n+\n+.Lcls_retsint16:\n+\tmovswl\t(%ecx), %eax\n+\tjmp\t.Lcls_epilogue\n+\n+.Lcls_retuint8:\n+\tmovzbl\t(%ecx), %eax\n+\tjmp\t.Lcls_epilogue\n+\n+.Lcls_retuint16:\n+\tmovzwl\t(%ecx), %eax\n+\tjmp\t.Lcls_epilogue\n+\n .Lcls_retint:\n \tmovl\t(%ecx), %eax\n \tjmp\t.Lcls_epilogue\n+\n .Lcls_retfloat:\n \tflds\t(%ecx)\n \tjmp\t.Lcls_epilogue\n+\n .Lcls_retdouble:\n \tfldl\t(%ecx)\n \tjmp\t.Lcls_epilogue\n+\n .Lcls_retldouble:\n \tfldt\t(%ecx)\n \tjmp\t.Lcls_epilogue\n+\n .Lcls_retllong:\n \tmovl\t(%ecx), %eax\n \tmovl\t4(%ecx), %edx\n \tjmp\t.Lcls_epilogue\n+\n .Lcls_retstruct1:\n \tmovsbl\t(%ecx), %eax\n \tjmp\t.Lcls_epilogue\n+\n .Lcls_retstruct2:\n \tmovswl\t(%ecx), %eax\n \tjmp\t.Lcls_epilogue\n+\n+.Lcls_retstruct4:\n+\tmovl\t(%ecx), %eax\n+\tjmp\t.Lcls_epilogue\n+\n+.Lcls_retstruct:\n+        # Caller expects us to pop struct return value pointer hidden arg.\n+\tmovl\t%ebp, %esp\n+\tpopl\t%ebp\n+\tret\t$0x4\n+\n+.Lcls_noretval:\n+.Lcls_epilogue:\n+\tmovl\t%ebp, %esp\n+\tpopl\t%ebp\n+\tret\n .ffi_closure_SYSV_end:\n .LFE3:\n \n@@ -354,37 +481,94 @@ _ffi_closure_raw_SYSV:\n \tmovl\t%esi, (%esp)\t/* cif */\n \tcall\t*RAW_CLOSURE_FUN_OFFSET(%eax)\t\t /* closure->fun */\n \tmovl\tCIF_FLAGS_OFFSET(%esi), %eax\t\t /* rtype */\n-\tcmpl\t$FFI_TYPE_INT, %eax\n-\tje\t.Lrcls_retint\n-\tcmpl\t$FFI_TYPE_FLOAT, %eax\n-\tje\t.Lrcls_retfloat\n-\tcmpl\t$FFI_TYPE_DOUBLE, %eax\n-\tje\t.Lrcls_retdouble\n-\tcmpl\t$FFI_TYPE_LONGDOUBLE, %eax\n-\tje\t.Lrcls_retldouble\n-\tcmpl\t$FFI_TYPE_SINT64, %eax\n-\tje\t.Lrcls_retllong\n-.Lrcls_epilogue:\n-\taddl\t$36, %esp\n-\tpopl\t%esi\n-\tpopl\t%ebp\n-\tret\n+0:\n+\tcall\t1f\n+\t# Do not insert anything here between the call and the jump table.\n+.Lrcls_store_table:\n+\t.long\t.Lrcls_noretval\t\t/* FFI_TYPE_VOID */\n+\t.long\t.Lrcls_retint\t\t/* FFI_TYPE_INT */\n+\t.long\t.Lrcls_retfloat\t\t/* FFI_TYPE_FLOAT */\n+\t.long\t.Lrcls_retdouble\t/* FFI_TYPE_DOUBLE */\n+\t.long\t.Lrcls_retldouble\t/* FFI_TYPE_LONGDOUBLE */\n+\t.long\t.Lrcls_retuint8\t\t/* FFI_TYPE_UINT8 */\n+\t.long\t.Lrcls_retsint8\t\t/* FFI_TYPE_SINT8 */\n+\t.long\t.Lrcls_retuint16\t/* FFI_TYPE_UINT16 */\n+\t.long\t.Lrcls_retsint16\t/* FFI_TYPE_SINT16 */\n+\t.long\t.Lrcls_retint\t\t/* FFI_TYPE_UINT32 */\n+\t.long\t.Lrcls_retint\t\t/* FFI_TYPE_SINT32 */\n+\t.long\t.Lrcls_retllong\t\t/* FFI_TYPE_UINT64 */\n+\t.long\t.Lrcls_retllong\t\t/* FFI_TYPE_SINT64 */\n+\t.long\t.Lrcls_retstruct\t/* FFI_TYPE_STRUCT */\n+\t.long\t.Lrcls_retint\t\t/* FFI_TYPE_POINTER */\n+\t.long\t.Lrcls_retstruct1\t/* FFI_TYPE_SMALL_STRUCT_1B */\n+\t.long\t.Lrcls_retstruct2\t/* FFI_TYPE_SMALL_STRUCT_2B */\n+\t.long\t.Lrcls_retstruct4\t/* FFI_TYPE_SMALL_STRUCT_4B */\n+1:\n+\tadd\t%eax, %eax\n+\tadd\t%eax, %eax\n+\tadd\t(%esp),%eax\n+\tadd\t$4, %esp\n+\tjmp\t*(%eax)\n+\n+\t/* Sign/zero extend as appropriate.  */\n+.Lrcls_retsint8:\n+\tmovsbl\t-24(%ebp), %eax\n+\tjmp\t.Lrcls_epilogue\n+\n+.Lrcls_retsint16:\n+\tmovswl\t-24(%ebp), %eax\n+\tjmp\t.Lrcls_epilogue\n+\n+.Lrcls_retuint8:\n+\tmovzbl\t-24(%ebp), %eax\n+\tjmp\t.Lrcls_epilogue\n+\n+.Lrcls_retuint16:\n+\tmovzwl\t-24(%ebp), %eax\n+\tjmp\t.Lrcls_epilogue\n+\n .Lrcls_retint:\n \tmovl\t-24(%ebp), %eax\n \tjmp\t.Lrcls_epilogue\n+\n .Lrcls_retfloat:\n \tflds\t-24(%ebp)\n \tjmp\t.Lrcls_epilogue\n+\n .Lrcls_retdouble:\n \tfldl\t-24(%ebp)\n \tjmp\t.Lrcls_epilogue\n+\n .Lrcls_retldouble:\n \tfldt\t-24(%ebp)\n \tjmp\t.Lrcls_epilogue\n+\n .Lrcls_retllong:\n \tmovl\t-24(%ebp), %eax\n \tmovl\t-20(%ebp), %edx\n \tjmp\t.Lrcls_epilogue\n+\n+.Lrcls_retstruct1:\n+\tmovsbl\t-24(%ebp), %eax\n+\tjmp\t.Lrcls_epilogue\n+\n+.Lrcls_retstruct2:\n+\tmovswl\t-24(%ebp), %eax\n+\tjmp\t.Lrcls_epilogue\n+\n+.Lrcls_retstruct4:\n+\tmovl\t-24(%ebp), %eax\n+\tjmp\t.Lrcls_epilogue\n+\n+.Lrcls_retstruct:\n+\t# Nothing to do!\n+\n+.Lrcls_noretval:\n+.Lrcls_epilogue:\n+\taddl\t$36, %esp\n+\tpopl\t%esi\n+\tpopl\t%ebp\n+\tret\n .ffi_closure_raw_SYSV_end:\n .LFE4:\n \n@@ -409,49 +593,93 @@ _ffi_closure_STDCALL:\n \tmovl\t%edx, (%esp)\t/* &resp */\n \tcall\t_ffi_closure_SYSV_inner\n \tmovl\t-12(%ebp), %ecx\n-\t/* It would be nice to just share this code with the\n-\t   duplicate sequence in _ffi_closure_SYSV, if only\n-\t   there were some way to represent that in the EH info.  */\n-\tcmpl\t$FFI_TYPE_INT, %eax\n-\tje\t.Lscls_retint\n-\tcmpl\t$FFI_TYPE_FLOAT, %eax\n-\tje\t.Lscls_retfloat\n-\tcmpl\t$FFI_TYPE_DOUBLE, %eax\n-\tje\t.Lscls_retdouble\n-\tcmpl\t$FFI_TYPE_LONGDOUBLE, %eax\n-\tje\t.Lscls_retldouble\n-\tcmpl\t$FFI_TYPE_SINT64, %eax\n-\tje\t.Lscls_retllong\n-\tcmpl\t$FFI_TYPE_SINT8, %eax\t/* 1-byte struct */\n-\tje\t.Lscls_retstruct1\n-\tcmpl\t$FFI_TYPE_SINT16, %eax\t/* 2-bytes struct */\n-\tje\t.Lscls_retstruct2\n-.Lscls_epilogue:\n-\tmovl\t%ebp, %esp\n-\tpopl\t%ebp\n-\tret\n+0:\n+\tcall\t1f\n+\t# Do not insert anything here between the call and the jump table.\n+.Lscls_store_table:\n+\t.long\t.Lscls_noretval\t\t/* FFI_TYPE_VOID */\n+\t.long\t.Lscls_retint\t\t/* FFI_TYPE_INT */\n+\t.long\t.Lscls_retfloat\t\t/* FFI_TYPE_FLOAT */\n+\t.long\t.Lscls_retdouble\t/* FFI_TYPE_DOUBLE */\n+\t.long\t.Lscls_retldouble\t/* FFI_TYPE_LONGDOUBLE */\n+\t.long\t.Lscls_retuint8\t\t/* FFI_TYPE_UINT8 */\n+\t.long\t.Lscls_retsint8\t\t/* FFI_TYPE_SINT8 */\n+\t.long\t.Lscls_retuint16\t/* FFI_TYPE_UINT16 */\n+\t.long\t.Lscls_retsint16\t/* FFI_TYPE_SINT16 */\n+\t.long\t.Lscls_retint\t\t/* FFI_TYPE_UINT32 */\n+\t.long\t.Lscls_retint\t\t/* FFI_TYPE_SINT32 */\n+\t.long\t.Lscls_retllong\t\t/* FFI_TYPE_UINT64 */\n+\t.long\t.Lscls_retllong\t\t/* FFI_TYPE_SINT64 */\n+\t.long\t.Lscls_retstruct\t/* FFI_TYPE_STRUCT */\n+\t.long\t.Lscls_retint\t\t/* FFI_TYPE_POINTER */\n+\t.long\t.Lscls_retstruct1\t/* FFI_TYPE_SMALL_STRUCT_1B */\n+\t.long\t.Lscls_retstruct2\t/* FFI_TYPE_SMALL_STRUCT_2B */\n+\t.long\t.Lscls_retstruct4\t/* FFI_TYPE_SMALL_STRUCT_4B */\n+1:\n+\tadd\t%eax, %eax\n+\tadd\t%eax, %eax\n+\tadd\t(%esp),%eax\n+\tadd\t$4, %esp\n+\tjmp\t*(%eax)\n+\n+\t/* Sign/zero extend as appropriate.  */\n+.Lscls_retsint8:\n+\tmovsbl\t(%ecx), %eax\n+\tjmp\t.Lscls_epilogue\n+\n+.Lscls_retsint16:\n+\tmovswl\t(%ecx), %eax\n+\tjmp\t.Lscls_epilogue\n+\n+.Lscls_retuint8:\n+\tmovzbl\t(%ecx), %eax\n+\tjmp\t.Lscls_epilogue\n+\n+.Lscls_retuint16:\n+\tmovzwl\t(%ecx), %eax\n+\tjmp\t.Lscls_epilogue\n+\n .Lscls_retint:\n \tmovl\t(%ecx), %eax\n \tjmp\t.Lscls_epilogue\n+\n .Lscls_retfloat:\n \tflds\t(%ecx)\n \tjmp\t.Lscls_epilogue\n+\n .Lscls_retdouble:\n \tfldl\t(%ecx)\n \tjmp\t.Lscls_epilogue\n+\n .Lscls_retldouble:\n \tfldt\t(%ecx)\n \tjmp\t.Lscls_epilogue\n+\n .Lscls_retllong:\n \tmovl\t(%ecx), %eax\n \tmovl\t4(%ecx), %edx\n \tjmp\t.Lscls_epilogue\n+\n .Lscls_retstruct1:\n \tmovsbl\t(%ecx), %eax\n \tjmp\t.Lscls_epilogue\n+\n .Lscls_retstruct2:\n \tmovswl\t(%ecx), %eax\n \tjmp\t.Lscls_epilogue\n+\n+.Lscls_retstruct4:\n+\tmovl\t(%ecx), %eax\n+\tjmp\t.Lscls_epilogue\n+\n+.Lscls_retstruct:\n+\t# Nothing to do!\n+\n+.Lscls_noretval:\n+.Lscls_epilogue:\n+\tmovl\t%ebp, %esp\n+\tpopl\t%ebp\n+\tret\n .ffi_closure_STDCALL_end:\n .LFE5:\n "}]}