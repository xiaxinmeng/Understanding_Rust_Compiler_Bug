{"sha": "78c70a50f7441d909f9cc3f23c6e970a1d7f1612", "node_id": "C_kwDOANBUbNoAKDc4YzcwYTUwZjc0NDFkOTA5ZjljYzNmMjNjNmU5NzBhMWQ3ZjE2MTI", "commit": {"author": {"name": "Dave", "email": "dme2223@gmail.com", "date": "2022-11-16T23:06:44Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:51Z"}, "message": "gccrs: Remove default location. Add visibility location to create_* functions\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-item.h: Remoe default location for Visibility class.\n\t* parse/rust-parse-impl.h (Parser::parse_visibility): Pass proper location\n\twhen instantiating visibilities.", "tree": {"sha": "fb0bb901e7f3621258cac08fdd4c5e2b8a0dc2ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb0bb901e7f3621258cac08fdd4c5e2b8a0dc2ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78c70a50f7441d909f9cc3f23c6e970a1d7f1612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c70a50f7441d909f9cc3f23c6e970a1d7f1612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78c70a50f7441d909f9cc3f23c6e970a1d7f1612", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c70a50f7441d909f9cc3f23c6e970a1d7f1612/comments", "author": {"login": "dme2", "id": 22139936, "node_id": "MDQ6VXNlcjIyMTM5OTM2", "avatar_url": "https://avatars.githubusercontent.com/u/22139936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dme2", "html_url": "https://github.com/dme2", "followers_url": "https://api.github.com/users/dme2/followers", "following_url": "https://api.github.com/users/dme2/following{/other_user}", "gists_url": "https://api.github.com/users/dme2/gists{/gist_id}", "starred_url": "https://api.github.com/users/dme2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dme2/subscriptions", "organizations_url": "https://api.github.com/users/dme2/orgs", "repos_url": "https://api.github.com/users/dme2/repos", "events_url": "https://api.github.com/users/dme2/events{/privacy}", "received_events_url": "https://api.github.com/users/dme2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567494f7030b45e79b33ab38ba769826e370280e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567494f7030b45e79b33ab38ba769826e370280e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567494f7030b45e79b33ab38ba769826e370280e"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "7ea7b86562fa63b35d158e9626d3747d1ebce226", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78c70a50f7441d909f9cc3f23c6e970a1d7f1612/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78c70a50f7441d909f9cc3f23c6e970a1d7f1612/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=78c70a50f7441d909f9cc3f23c6e970a1d7f1612", "patch": "@@ -633,8 +633,7 @@ struct Visibility\n \n public:\n   // Creates a Visibility - TODO make constructor protected or private?\n-  Visibility (VisType vis_type, SimplePath in_path,\n-\t      Location locus = Location ())\n+  Visibility (VisType vis_type, SimplePath in_path, Location locus)\n     : vis_type (vis_type), in_path (std::move (in_path)), locus (locus)\n   {}\n \n@@ -654,10 +653,11 @@ struct Visibility\n \n   Location get_locus () const { return locus; }\n \n+  // empty?\n   // Creates an error visibility.\n   static Visibility create_error ()\n   {\n-    return Visibility (PUB_IN_PATH, SimplePath::create_empty ());\n+    return Visibility (PUB_IN_PATH, SimplePath::create_empty (), Location ());\n   }\n \n   // Unique pointer custom clone function\n@@ -669,45 +669,50 @@ struct Visibility\n    * is one idea but may be too resource-intensive. */\n \n   // Creates a public visibility with no further features/arguments.\n-  static Visibility create_public ()\n+  // empty?\n+  static Visibility create_public (Location pub_vis_location)\n   {\n-    return Visibility (PUB, SimplePath::create_empty ());\n+    return Visibility (PUB, SimplePath::create_empty (), pub_vis_location);\n   }\n \n   // Creates a public visibility with crate-relative paths\n-  static Visibility create_crate (Location crate_tok_location)\n+  static Visibility create_crate (Location crate_tok_location,\n+\t\t\t\t  Location crate_vis_location)\n   {\n     return Visibility (PUB_CRATE,\n \t\t       SimplePath::from_str (\"crate\", crate_tok_location),\n-\t\t       crate_tok_location);\n+\t\t       crate_vis_location);\n   }\n \n   // Creates a public visibility with self-relative paths\n-  static Visibility create_self (Location self_tok_location)\n+  static Visibility create_self (Location self_tok_location,\n+\t\t\t\t Location self_vis_location)\n   {\n     return Visibility (PUB_SELF,\n \t\t       SimplePath::from_str (\"self\", self_tok_location),\n-\t\t       self_tok_location);\n+\t\t       self_vis_location);\n   }\n \n   // Creates a public visibility with parent module-relative paths\n-  static Visibility create_super (Location super_tok_location)\n+  static Visibility create_super (Location super_tok_location,\n+\t\t\t\t  Location super_vis_location)\n   {\n     return Visibility (PUB_SUPER,\n \t\t       SimplePath::from_str (\"super\", super_tok_location),\n-\t\t       super_tok_location);\n+\t\t       super_vis_location);\n   }\n \n   // Creates a private visibility\n   static Visibility create_private ()\n   {\n-    return Visibility (PRIV, SimplePath::create_empty ());\n+    return Visibility (PRIV, SimplePath::create_empty (), Location ());\n   }\n \n   // Creates a public visibility with a given path or whatever.\n-  static Visibility create_in_path (SimplePath in_path)\n+  static Visibility create_in_path (SimplePath in_path,\n+\t\t\t\t    Location in_path_vis_location)\n   {\n-    return Visibility (PUB_IN_PATH, std::move (in_path), in_path.get_locus ());\n+    return Visibility (PUB_IN_PATH, std::move (in_path), in_path_vis_location);\n   }\n \n   std::string as_string () const;"}, {"sha": "ee0282bdab3d2df0fd26e8bffd31002c7a2171d7", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78c70a50f7441d909f9cc3f23c6e970a1d7f1612/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78c70a50f7441d909f9cc3f23c6e970a1d7f1612/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=78c70a50f7441d909f9cc3f23c6e970a1d7f1612", "patch": "@@ -2137,12 +2137,13 @@ Parser<ManagedTokenSource>::parse_visibility ()\n       return AST::Visibility::create_private ();\n     }\n \n+  auto vis_loc = lexer.peek_token ()->get_locus ();\n   lexer.skip_token ();\n \n   // create simple pub visibility if no parentheses\n   if (lexer.peek_token ()->get_id () != LEFT_PAREN)\n     {\n-      return AST::Visibility::create_public ();\n+      return AST::Visibility::create_public (vis_loc);\n       // or whatever\n     }\n \n@@ -2158,19 +2159,19 @@ Parser<ManagedTokenSource>::parse_visibility ()\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_crate (path_loc);\n+      return AST::Visibility::create_crate (path_loc, vis_loc);\n     case SELF:\n       lexer.skip_token ();\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_self (path_loc);\n+      return AST::Visibility::create_self (path_loc, vis_loc);\n     case SUPER:\n       lexer.skip_token ();\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_super (path_loc);\n+      return AST::Visibility::create_super (path_loc, vis_loc);\n       case IN: {\n \tlexer.skip_token ();\n \n@@ -2188,7 +2189,7 @@ Parser<ManagedTokenSource>::parse_visibility ()\n \n \tskip_token (RIGHT_PAREN);\n \n-\treturn AST::Visibility::create_in_path (std::move (path));\n+\treturn AST::Visibility::create_in_path (std::move (path), vis_loc);\n       }\n     default:\n       add_error (Error (t->get_locus (), \"unexpected token %qs in visibility\","}]}