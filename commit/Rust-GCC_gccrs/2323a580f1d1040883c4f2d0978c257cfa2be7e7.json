{"sha": "2323a580f1d1040883c4f2d0978c257cfa2be7e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMyM2E1ODBmMWQxMDQwODgzYzRmMmQwOTc4YzI1N2NmYTJiZTdlNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-01-12T14:29:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-01-12T14:29:12Z"}, "message": "re PR ada/59772 (floating-point constants are not correctly encoded)\n\n\tPR ada/59772\n\t* gcc-interface/cuintp.c (build_cst_from_int): Use 32-bit integer type\n\tas intermediate type.\n\t(UI_To_gnu): Likewise.\n\nFrom-SVN: r206565", "tree": {"sha": "a95d5b1225994f15ea1be01d38c5355c7c031079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a95d5b1225994f15ea1be01d38c5355c7c031079"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2323a580f1d1040883c4f2d0978c257cfa2be7e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2323a580f1d1040883c4f2d0978c257cfa2be7e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2323a580f1d1040883c4f2d0978c257cfa2be7e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2323a580f1d1040883c4f2d0978c257cfa2be7e7/comments", "author": null, "committer": null, "parents": [{"sha": "a1b80ec7e0e9cea1107b77bdd1424ab853cda5c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b80ec7e0e9cea1107b77bdd1424ab853cda5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b80ec7e0e9cea1107b77bdd1424ab853cda5c7"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "a0570a59da9de10aef4ad1acbdcb8e87d7a7fa4d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2323a580f1d1040883c4f2d0978c257cfa2be7e7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2323a580f1d1040883c4f2d0978c257cfa2be7e7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2323a580f1d1040883c4f2d0978c257cfa2be7e7", "patch": "@@ -1,3 +1,10 @@\n+2014-01-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/59772\n+\t* gcc-interface/cuintp.c (build_cst_from_int): Use 32-bit integer type\n+\tas intermediate type.\n+\t(UI_To_gnu): Likewise.\n+\n 2014-01-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnatvsn.ads (Current_Year): Bump to 2014."}, {"sha": "c5736f5ecdc2a71122609661e1854f131299a06e", "filename": "gcc/ada/gcc-interface/cuintp.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2323a580f1d1040883c4f2d0978c257cfa2be7e7/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2323a580f1d1040883c4f2d0978c257cfa2be7e7/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fcuintp.c?ref=2323a580f1d1040883c4f2d0978c257cfa2be7e7", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -55,7 +55,7 @@ static tree\n build_cst_from_int (tree type, HOST_WIDE_INT low)\n {\n   if (SCALAR_FLOAT_TYPE_P (type))\n-    return convert (type, build_int_cst (NULL_TREE, low));\n+    return convert (type, build_int_cst (gnat_type_for_size (32, 0), low));\n   else\n     return build_int_cst_type (type, low);\n }\n@@ -89,19 +89,12 @@ UI_To_gnu (Uint Input, tree type)\n       gcc_assert (Length > 0);\n \n       /* The computations we perform below always require a type at least as\n-\t large as an integer not to overflow.  REAL types are always fine, but\n+\t large as an integer not to overflow.  FP types are always fine, but\n \t INTEGER or ENUMERAL types we are handed may be too short.  We use a\n \t base integer type node for the computations in this case and will\n-\t convert the final result back to the incoming type later on.\n-\t The base integer precision must be superior than 16.  */\n-\n-      if (TREE_CODE (comp_type) != REAL_TYPE\n-\t  && TYPE_PRECISION (comp_type)\n-\t     < TYPE_PRECISION (long_integer_type_node))\n-\t{\n-\t  comp_type = long_integer_type_node;\n-\t  gcc_assert (TYPE_PRECISION (comp_type) > 16);\n-\t}\n+\t convert the final result back to the incoming type later on.  */\n+      if (!SCALAR_FLOAT_TYPE_P (comp_type) && TYPE_PRECISION (comp_type) < 32)\n+\tcomp_type = gnat_type_for_size (32, 0);\n \n       gnu_base = build_cst_from_int (comp_type, Base);\n "}]}