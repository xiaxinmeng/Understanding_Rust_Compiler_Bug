{"sha": "850e5878f8f57244571858f604f28da646be498d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUwZTU4NzhmOGY1NzI0NDU3MTg1OGY2MDRmMjhkYTY0NmJlNDk4ZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-01T21:10:35Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-01T21:10:35Z"}, "message": "aarch64: Reimplement vrshrn* intrinsics using builtins\n\nThis patch moves the vrshrn* intrinsics to builtins away from inline\nasm.\n\nIt's a bit of code, but it's very similar to the recent vsrhn*\nreimplementation except that we use an unspec rather than standard RTL\ncodes for the functionality.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (rshrn, rshrn2):\n\tDefine builtins.\n\t* config/aarch64/aarch64-simd.md (aarch64_rshrn<mode>_insn_le):\n\tDefine.\n\t(aarch64_rshrn<mode>_insn_be): Likewise.\n\t(aarch64_rshrn<mode>): Likewise.\n\t(aarch64_rshrn2<mode>_insn_le): Likewise.\n\t(aarch64_rshrn2<mode>_insn_be): Likewise.\n\t(aarch64_rshrn2<mode>): Likewise.\n\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_RSHRN.\n\t* config/aarch64/arm_neon.h (vrshrn_high_n_s16): Reimplement\n\tusing builtin.\n\t(vrshrn_high_n_s32): Likewise.\n\t(vrshrn_high_n_s64): Likewise.\n\t(vrshrn_high_n_u16): Likewise.\n\t(vrshrn_high_n_u32): Likewise.\n\t(vrshrn_high_n_u64): Likewise.\n\t(vrshrn_n_s16): Likewise.\n\t(vrshrn_n_s32): Likewise.\n\t(vrshrn_n_s64): Likewise.\n\t(vrshrn_n_u16): Likewise.\n\t(vrshrn_n_u32): Likewise.\n\t(vrshrn_n_u64): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/narrow_high-intrinsics.c: Adjust rshrn2\n\tassembly scan.", "tree": {"sha": "589a12935ec14f04135dc7b7a8160c2306125590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/589a12935ec14f04135dc7b7a8160c2306125590"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/850e5878f8f57244571858f604f28da646be498d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850e5878f8f57244571858f604f28da646be498d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/850e5878f8f57244571858f604f28da646be498d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850e5878f8f57244571858f604f28da646be498d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11d4ec5d45c02a19b8ff9d7f26800637ad563e05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d4ec5d45c02a19b8ff9d7f26800637ad563e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11d4ec5d45c02a19b8ff9d7f26800637ad563e05"}], "stats": {"total": 322, "additions": 171, "deletions": 151}, "files": [{"sha": "aa848153059a8edf20fa10395de64884b407d95e", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850e5878f8f57244571858f604f28da646be498d/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850e5878f8f57244571858f604f28da646be498d/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=850e5878f8f57244571858f604f28da646be498d", "patch": "@@ -214,6 +214,12 @@\n   /* Implemented by aarch64_shrn2<mode>.  */\n   BUILTIN_VQN (SHIFTACC, shrn2, 0, NONE)\n \n+  /* Implemented by aarch64_rshrn<mode>\".  */\n+  BUILTIN_VQN (SHIFTIMM, rshrn, 0, NONE)\n+\n+  /* Implemented by aarch64_rshrn2<mode>.  */\n+  BUILTIN_VQN (SHIFTACC, rshrn2, 0, NONE)\n+\n   /* Implemented by aarch64_<su>mlsl<mode>.  */\n   BUILTIN_VD_BHSI (TERNOP, smlsl, 0, NONE)\n   BUILTIN_VD_BHSI (TERNOPU, umlsl, 0, NONE)"}, {"sha": "992c7b8038e2938c93e3fb4ccfa75513194d07a1", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850e5878f8f57244571858f604f28da646be498d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850e5878f8f57244571858f604f28da646be498d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=850e5878f8f57244571858f604f28da646be498d", "patch": "@@ -1752,6 +1752,54 @@\n   }\n )\n \n+(define_insn \"aarch64_rshrn<mode>_insn_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (unspec:<VNARROWQ> [(match_operand:VQN 1 \"register_operand\" \"w\")\n+\t\t\t       (match_operand:VQN 2 \"aarch64_simd_rshift_imm\")\n+\t\t\t      ] UNSPEC_RSHRN)\n+\t  (match_operand:<VNARROWQ> 3 \"aarch64_simd_or_scalar_imm_zero\")))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"rshrn\\\\t%0.<Vntype>, %1.<Vtype>, %2\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_insn \"aarch64_rshrn<mode>_insn_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 3 \"aarch64_simd_or_scalar_imm_zero\")\n+\t  (unspec:<VNARROWQ> [(match_operand:VQN 1 \"register_operand\" \"w\")\n+\t\t\t       (match_operand:VQN 2 \"aarch64_simd_rshift_imm\")\n+\t\t\t      ] UNSPEC_RSHRN)))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"rshrn\\\\t%0.<Vntype>, %1.<Vtype>, %2\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_expand \"aarch64_rshrn<mode>\"\n+  [(match_operand:<VNARROWQ> 0 \"register_operand\")\n+   (match_operand:VQN 1 \"register_operand\")\n+   (match_operand:SI 2 \"aarch64_simd_shift_imm_offset_<vn_mode>\")]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[2] = aarch64_simd_gen_const_vector_dup (<MODE>mode,\n+\t\t\t\t\t\t INTVAL (operands[2]));\n+    rtx tmp = gen_reg_rtx (<VNARROWQ2>mode);\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_rshrn<mode>_insn_be (tmp, operands[1],\n+\t\t\t\toperands[2], CONST0_RTX (<VNARROWQ>mode)));\n+    else\n+      emit_insn (gen_aarch64_rshrn<mode>_insn_le (tmp, operands[1],\n+\t\t\t\toperands[2], CONST0_RTX (<VNARROWQ>mode)));\n+\n+    /* The intrinsic expects a narrow result, so emit a subreg that will get\n+       optimized away as appropriate.  */\n+    emit_move_insn (operands[0], lowpart_subreg (<VNARROWQ>mode, tmp,\n+\t\t\t\t\t\t <VNARROWQ2>mode));\n+    DONE;\n+  }\n+)\n+\n (define_insn \"aarch64_shrn2<mode>_insn_le\"\n   [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n \t(vec_concat:<VNARROWQ2>\n@@ -1795,6 +1843,46 @@\n   }\n )\n \n+(define_insn \"aarch64_rshrn2<mode>_insn_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n+\t  (unspec:<VNARROWQ> [(match_operand:VQN 2 \"register_operand\" \"w\")\n+\t\t       (match_operand:VQN 3 \"aarch64_simd_rshift_imm\")] UNSPEC_RSHRN)))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"rshrn2\\\\t%0.<V2ntype>, %2.<Vtype>, %3\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_insn \"aarch64_rshrn2<mode>_insn_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (unspec:<VNARROWQ> [(match_operand:VQN 2 \"register_operand\" \"w\")\n+\t\t       (match_operand:VQN 3 \"aarch64_simd_rshift_imm\")] UNSPEC_RSHRN)\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"rshrn2\\\\t%0.<V2ntype>, %2.<Vtype>, %3\"\n+  [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n+)\n+\n+(define_expand \"aarch64_rshrn2<mode>\"\n+  [(match_operand:<VNARROWQ2> 0 \"register_operand\")\n+   (match_operand:<VNARROWQ> 1 \"register_operand\")\n+   (match_operand:VQN 2 \"register_operand\")\n+   (match_operand:SI 3 \"aarch64_simd_shift_imm_offset_<vn_mode>\")]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[3] = aarch64_simd_gen_const_vector_dup (<MODE>mode,\n+\t\t\t\t\t\t INTVAL (operands[3]));\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_rshrn2<mode>_insn_be (operands[0], operands[1],\n+\t\t\t\t\t\t  operands[2], operands[3]));\n+    else\n+      emit_insn (gen_aarch64_rshrn2<mode>_insn_le (operands[0], operands[1],\n+\t\t\t\t\t\t  operands[2], operands[3]));\n+    DONE;\n+  }\n+)\n \n ;; For quads.\n "}, {"sha": "a482419ee64a54bd3b73172de9d7372dd7386595", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850e5878f8f57244571858f604f28da646be498d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850e5878f8f57244571858f604f28da646be498d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=850e5878f8f57244571858f604f28da646be498d", "patch": "@@ -230,6 +230,7 @@\n     UNSPEC_SSP_SYSREG\n     UNSPEC_SP_SET\n     UNSPEC_SP_TEST\n+    UNSPEC_RSHRN\n     UNSPEC_RSQRT\n     UNSPEC_RSQRTE\n     UNSPEC_RSQRTS"}, {"sha": "fa223303da393123da3ba7abc02b554ad64511b5", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 75, "deletions": 150, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850e5878f8f57244571858f604f28da646be498d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850e5878f8f57244571858f604f28da646be498d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=850e5878f8f57244571858f604f28da646be498d", "patch": "@@ -9311,167 +9311,92 @@ vqshrun_high_n_s64 (uint32x2_t __a, int64x2_t __b, const int __c)\n   return __builtin_aarch64_sqshrun2_nv2di_uuss (__a, __b, __c);\n }\n \n-#define vrshrn_high_n_s16(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x8_t b_ = (b);                                              \\\n-       int8x8_t a_ = (a);                                               \\\n-       int8x16_t result = vcombine_s8                                   \\\n-                            (a_, vcreate_s8                             \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"rshrn2 %0.16b,%1.8h,#%2\"                               \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_high_n_s16 (int8x8_t __a, int16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_rshrn2v8hi (__a, __b, __c);\n+}\n \n-#define vrshrn_high_n_s32(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t b_ = (b);                                              \\\n-       int16x4_t a_ = (a);                                              \\\n-       int16x8_t result = vcombine_s16                                  \\\n-                            (a_, vcreate_s16                            \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"rshrn2 %0.8h,%1.4s,#%2\"                                \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_high_n_s32 (int16x4_t __a, int32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_rshrn2v4si (__a, __b, __c);\n+}\n \n-#define vrshrn_high_n_s64(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int64x2_t b_ = (b);                                              \\\n-       int32x2_t a_ = (a);                                              \\\n-       int32x4_t result = vcombine_s32                                  \\\n-                            (a_, vcreate_s32                            \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"rshrn2 %0.4s,%1.2d,#%2\"                                \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_high_n_s64 (int32x2_t __a, int64x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_rshrn2v2di (__a, __b, __c);\n+}\n \n-#define vrshrn_high_n_u16(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x8_t b_ = (b);                                             \\\n-       uint8x8_t a_ = (a);                                              \\\n-       uint8x16_t result = vcombine_u8                                  \\\n-                            (a_, vcreate_u8                             \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"rshrn2 %0.16b,%1.8h,#%2\"                               \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_high_n_u16 (uint8x8_t __a, uint16x8_t __b, const int __c)\n+{\n+  return (uint8x16_t) __builtin_aarch64_rshrn2v8hi ((int8x8_t) __a,\n+\t\t\t\t\t\t    (int16x8_t) __b, __c);\n+}\n \n-#define vrshrn_high_n_u32(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x4_t b_ = (b);                                             \\\n-       uint16x4_t a_ = (a);                                             \\\n-       uint16x8_t result = vcombine_u16                                 \\\n-                            (a_, vcreate_u16                            \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"rshrn2 %0.8h,%1.4s,#%2\"                                \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_high_n_u32 (uint16x4_t __a, uint32x4_t __b, const int __c)\n+{\n+  return (uint16x8_t) __builtin_aarch64_rshrn2v4si ((int16x4_t) __a,\n+\t\t\t\t\t\t    (int32x4_t) __b, __c);\n+}\n \n-#define vrshrn_high_n_u64(a, b, c)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint64x2_t b_ = (b);                                             \\\n-       uint32x2_t a_ = (a);                                             \\\n-       uint32x4_t result = vcombine_u32                                 \\\n-                            (a_, vcreate_u32                            \\\n-                                   (__AARCH64_UINT64_C (0x0)));         \\\n-       __asm__ (\"rshrn2 %0.4s,%1.2d,#%2\"                                \\\n-                : \"+w\"(result)                                          \\\n-                : \"w\"(b_), \"i\"(c)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_high_n_u64 (uint32x2_t __a, uint64x2_t __b, const int __c)\n+{\n+  return (uint32x4_t) __builtin_aarch64_rshrn2v2di ((int32x2_t)__a,\n+\t\t\t\t\t\t    (int64x2_t)__b, __c);\n+}\n \n-#define vrshrn_n_s16(a, b)                                              \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x8_t a_ = (a);                                              \\\n-       int8x8_t result;                                                 \\\n-       __asm__ (\"rshrn %0.8b,%1.8h,%2\"                                  \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int8x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_n_s16 (int16x8_t __a, const int __b)\n+{\n+  return __builtin_aarch64_rshrnv8hi (__a, __b);\n+}\n \n-#define vrshrn_n_s32(a, b)                                              \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t a_ = (a);                                              \\\n-       int16x4_t result;                                                \\\n-       __asm__ (\"rshrn %0.4h,%1.4s,%2\"                                  \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_n_s32 (int32x4_t __a, const int __b)\n+{\n+  return __builtin_aarch64_rshrnv4si (__a, __b);\n+}\n \n-#define vrshrn_n_s64(a, b)                                              \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int64x2_t a_ = (a);                                              \\\n-       int32x2_t result;                                                \\\n-       __asm__ (\"rshrn %0.2s,%1.2d,%2\"                                  \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_n_s64 (int64x2_t __a, const int __b)\n+{\n+  return __builtin_aarch64_rshrnv2di (__a, __b);\n+}\n \n-#define vrshrn_n_u16(a, b)                                              \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x8_t a_ = (a);                                             \\\n-       uint8x8_t result;                                                \\\n-       __asm__ (\"rshrn %0.8b,%1.8h,%2\"                                  \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint8x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_n_u16 (uint16x8_t __a, const int __b)\n+{\n+  return (uint8x8_t) __builtin_aarch64_rshrnv8hi ((int16x8_t) __a, __b);\n+}\n \n-#define vrshrn_n_u32(a, b)                                              \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x4_t a_ = (a);                                             \\\n-       uint16x4_t result;                                               \\\n-       __asm__ (\"rshrn %0.4h,%1.4s,%2\"                                  \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_n_u32 (uint32x4_t __a, const int __b)\n+{\n+  return (uint16x4_t) __builtin_aarch64_rshrnv4si ((int32x4_t) __a, __b);\n+}\n \n-#define vrshrn_n_u64(a, b)                                              \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint64x2_t a_ = (a);                                             \\\n-       uint32x2_t result;                                               \\\n-       __asm__ (\"rshrn %0.2s,%1.2d,%2\"                                  \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrshrn_n_u64 (uint64x2_t __a, const int __b)\n+{\n+  return (uint32x2_t) __builtin_aarch64_rshrnv2di ((int64x2_t) __a, __b);\n+}\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))"}, {"sha": "5abcadcd5dc7dea0c0332a69f41e88bfc6fecbe9", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_high-intrinsics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850e5878f8f57244571858f604f28da646be498d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850e5878f8f57244571858f604f28da646be498d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c?ref=850e5878f8f57244571858f604f28da646be498d", "patch": "@@ -111,7 +111,7 @@ ONE (vmovn_high, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n /* { dg-final { scan-assembler-times \"\\\\taddhn2\\\\tv\" 6} }  */\n /* { dg-final { scan-assembler-times \"rsubhn2\\\\tv\" 6} }  */\n /* { dg-final { scan-assembler-times \"raddhn2\\\\tv\" 6} }  */\n-/* { dg-final { scan-assembler-times \"\\\\trshrn2 v\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\trshrn2\\\\tv\" 6} }  */\n /* { dg-final { scan-assembler-times \"\\\\tshrn2\\\\tv\" 6} }  */\n /* { dg-final { scan-assembler-times \"sqshrun2\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"sqrshrun2\\\\tv\" 3} }  */"}]}