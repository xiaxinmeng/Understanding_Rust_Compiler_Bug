{"sha": "708fb956d9b625c150aadf9fb6394651ef054b5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA4ZmI5NTZkOWI2MjVjMTUwYWFkZjlmYjYzOTQ2NTFlZjA1NGI1YQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-07-11T08:03:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-11T08:03:14Z"}, "message": "[Ada] Avoid spurious warning on assertions with Loop_Entry\n\nWhen the Loop_Entry attribute is used inside a loop invariant or another\nassertion where it is allowed, it may lead to spurious warnings on\nconditions that are detected to be always valid. Now fixed.\n\n2019-07-11  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* sem_eval.adb (Is_Same_Value): Add special case for rewritten\n\tLoop_Entry attribute.\n\ngcc/testsuite/\n\n\t* gnat.dg/loop_entry1.adb: New testcase.\n\nFrom-SVN: r273403", "tree": {"sha": "b6dff91a901a8ed27e14ee5fd4e472d06cb8de97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6dff91a901a8ed27e14ee5fd4e472d06cb8de97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/708fb956d9b625c150aadf9fb6394651ef054b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708fb956d9b625c150aadf9fb6394651ef054b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/708fb956d9b625c150aadf9fb6394651ef054b5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708fb956d9b625c150aadf9fb6394651ef054b5a/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8fa1b3d08ea4cc31f858d2add1b22e62b8db5e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8fa1b3d08ea4cc31f858d2add1b22e62b8db5e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8fa1b3d08ea4cc31f858d2add1b22e62b8db5e1"}], "stats": {"total": 71, "additions": 61, "deletions": 10}, "files": [{"sha": "15b90e379cbfb6b42921d18b98c577bcac2d18c7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708fb956d9b625c150aadf9fb6394651ef054b5a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708fb956d9b625c150aadf9fb6394651ef054b5a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=708fb956d9b625c150aadf9fb6394651ef054b5a", "patch": "@@ -1,3 +1,8 @@\n+2019-07-11  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_eval.adb (Is_Same_Value): Add special case for rewritten\n+\tLoop_Entry attribute.\n+\n 2019-07-11  Claire Dross  <dross@adacore.com>\n \n \t* gnat1drv.adb: SPARK checking rules for pointer aliasing are"}, {"sha": "734c961fe620561700dc7eaa2e8eb798d632a509", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708fb956d9b625c150aadf9fb6394651ef054b5a/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708fb956d9b625c150aadf9fb6394651ef054b5a/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=708fb956d9b625c150aadf9fb6394651ef054b5a", "patch": "@@ -986,13 +986,33 @@ package body Sem_Eval is\n          Lf : constant Node_Id := Compare_Fixup (L);\n          Rf : constant Node_Id := Compare_Fixup (R);\n \n+         function Is_Rewritten_Loop_Entry (N : Node_Id) return Boolean;\n+         --  An attribute reference to Loop_Entry may have been rewritten into\n+         --  its prefix as a way to avoid generating a constant for that\n+         --  attribute when the corresponding pragma is ignored. These nodes\n+         --  should be ignored when deciding if they can be equal to one\n+         --  another.\n+\n          function Is_Same_Subscript (L, R : List_Id) return Boolean;\n          --  L, R are the Expressions values from two attribute nodes for First\n          --  or Last attributes. Either may be set to No_List if no expressions\n          --  are present (indicating subscript 1). The result is True if both\n          --  expressions represent the same subscript (note one case is where\n          --  one subscript is missing and the other is explicitly set to 1).\n \n+         -----------------------------\n+         -- Is_Rewritten_Loop_Entry --\n+         -----------------------------\n+\n+         function Is_Rewritten_Loop_Entry (N : Node_Id) return Boolean is\n+            Orig_N : constant Node_Id := Original_Node (N);\n+         begin\n+            return Orig_N /= N\n+              and then Nkind (Orig_N) = N_Attribute_Reference\n+              and then Get_Attribute_Id (Attribute_Name (Orig_N)) =\n+                Attribute_Loop_Entry;\n+         end Is_Rewritten_Loop_Entry;\n+\n          -----------------------\n          -- Is_Same_Subscript --\n          -----------------------\n@@ -1018,23 +1038,32 @@ package body Sem_Eval is\n       --  Start of processing for Is_Same_Value\n \n       begin\n-         --  Values are the same if they refer to the same entity and the\n-         --  entity is non-volatile. This does not however apply to Float\n-         --  types, since we may have two NaN values and they should never\n-         --  compare equal.\n+         --  Loop_Entry nodes rewritten into their prefix inside ignored\n+         --  pragmas should never lead to a decision of equality.\n \n-         --  If the entity is a discriminant, the two expressions may be bounds\n-         --  of components of objects of the same discriminated type. The\n-         --  values of the discriminants are not static, and therefore the\n-         --  result is unknown.\n+         if Is_Rewritten_Loop_Entry (Lf)\n+           or else Is_Rewritten_Loop_Entry (Rf)\n+         then\n+            return False;\n \n-         --  It would be better to comment individual branches of this test ???\n+         --  Values are the same if they refer to the same entity and the\n+         --  entity is nonvolatile.\n \n-         if Nkind_In (Lf, N_Identifier, N_Expanded_Name)\n+         elsif Nkind_In (Lf, N_Identifier, N_Expanded_Name)\n            and then Nkind_In (Rf, N_Identifier, N_Expanded_Name)\n            and then Entity (Lf) = Entity (Rf)\n+\n+           --  If the entity is a discriminant, the two expressions may be\n+           --  bounds of components of objects of the same discriminated type.\n+           --  The values of the discriminants are not static, and therefore\n+           --  the result is unknown.\n+\n            and then Ekind (Entity (Lf)) /= E_Discriminant\n            and then Present (Entity (Lf))\n+\n+           --  This does not however apply to Float types, since we may have\n+           --  two NaN values and they should never compare equal.\n+\n            and then not Is_Floating_Point_Type (Etype (L))\n            and then not Is_Volatile_Reference (L)\n            and then not Is_Volatile_Reference (R)"}, {"sha": "f4a6d05f7c098746212836723ba9e92b82a45ddb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708fb956d9b625c150aadf9fb6394651ef054b5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708fb956d9b625c150aadf9fb6394651ef054b5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=708fb956d9b625c150aadf9fb6394651ef054b5a", "patch": "@@ -1,3 +1,7 @@\n+2019-07-11  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat.dg/loop_entry1.adb: New testcase.\n+\n 2019-07-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/prot8.adb, gnat.dg/prot8.ads: New testcase."}, {"sha": "39cb8d03ecbf2743989ce2c5f606a88f8d7d7430", "filename": "gcc/testsuite/gnat.dg/loop_entry1.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708fb956d9b625c150aadf9fb6394651ef054b5a/gcc%2Ftestsuite%2Fgnat.dg%2Floop_entry1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708fb956d9b625c150aadf9fb6394651ef054b5a/gcc%2Ftestsuite%2Fgnat.dg%2Floop_entry1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_entry1.adb?ref=708fb956d9b625c150aadf9fb6394651ef054b5a", "patch": "@@ -0,0 +1,13 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnatwc\" }\n+\n+procedure Loop_Entry1 (X, Y : in out Integer) is\n+begin\n+   while X < Y loop\n+      pragma Loop_Invariant\n+        (X >= X'Loop_Entry and then Y <= Y'Loop_Entry);\n+\n+      X := X + 1;\n+      Y := Y - 1;\n+   end loop;\n+end Loop_Entry1;"}]}