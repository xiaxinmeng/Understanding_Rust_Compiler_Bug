{"sha": "baf20d8df23fd33363b997a423d57bb0c3405a38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFmMjBkOGRmMjNmZDMzMzYzYjk5N2E0MjNkNTdiYjBjMzQwNWEzOA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-10-04T16:43:09Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-10-04T16:43:09Z"}, "message": "S/390: Fix mode in vector merge pattern.\n\nvec_unpacks_hi_v4sf/vec_unpacks_lo_v4sf expand vec_mergeh and vec_mergel\npatterns also for z13 with V4SF modes so the patterns should better\naccept this.  Fixed by changing the mode iterator to V_128_NOSINGLE\nwhich accepts V4SF unconditionally.\n\ngcc/ChangeLog:\n\n2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/vx-builtins.md (\"vec_mergeh<mode>\")\n\t(\"vec_mergel<mode>\"): Change mode iterator to V_128_NOSINGLE.\n\nFrom-SVN: r253420", "tree": {"sha": "cf65becb60b486530ef8d37e00a650453a0ff46d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf65becb60b486530ef8d37e00a650453a0ff46d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baf20d8df23fd33363b997a423d57bb0c3405a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf20d8df23fd33363b997a423d57bb0c3405a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baf20d8df23fd33363b997a423d57bb0c3405a38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf20d8df23fd33363b997a423d57bb0c3405a38/comments", "author": null, "committer": null, "parents": [{"sha": "748d9390b9739dadc48a775c7ea869c42b3f39a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748d9390b9739dadc48a775c7ea869c42b3f39a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/748d9390b9739dadc48a775c7ea869c42b3f39a9"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "d8a9bc1e75b0c1ec7af6c63f19c60c0cc9eea503", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf20d8df23fd33363b997a423d57bb0c3405a38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf20d8df23fd33363b997a423d57bb0c3405a38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=baf20d8df23fd33363b997a423d57bb0c3405a38", "patch": "@@ -1,3 +1,8 @@\n+2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/vx-builtins.md (\"vec_mergeh<mode>\")\n+\t(\"vec_mergel<mode>\"): Change mode iterator to V_128_NOSINGLE.\n+\n 2017-10-04  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tRevert r253399:"}, {"sha": "114935550c32c2e4b9ff81bad93bec10852ad0db", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf20d8df23fd33363b997a423d57bb0c3405a38/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf20d8df23fd33363b997a423d57bb0c3405a38/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=baf20d8df23fd33363b997a423d57bb0c3405a38", "patch": "@@ -211,19 +211,19 @@\n ; (vec_select op0) (vec_select op1)\n ; vmrhb, vmrhh, vmrhf, vmrhg\n (define_insn \"vec_mergeh<mode>\"\n-  [(set (match_operand:VEC_HW                 0 \"register_operand\" \"=v\")\n-\t(unspec:VEC_HW [(match_operand:VEC_HW 1 \"register_operand\"  \"v\")\n-\t\t\t(match_operand:VEC_HW 2 \"register_operand\"  \"v\")]\n+  [(set (match_operand:V_128_NOSINGLE                         0 \"register_operand\" \"=v\")\n+\t(unspec:V_128_NOSINGLE [(match_operand:V_128_NOSINGLE 1 \"register_operand\"  \"v\")\n+\t\t\t(match_operand:V_128_NOSINGLE         2 \"register_operand\"  \"v\")]\n \t\t       UNSPEC_VEC_MERGEH))]\n   \"TARGET_VX\"\n   \"vmrh<bhfgq>\\t%v0,%1,%2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; vmrlb, vmrlh, vmrlf, vmrlg\n (define_insn \"vec_mergel<mode>\"\n-  [(set (match_operand:VEC_HW                 0 \"register_operand\" \"=v\")\n-\t(unspec:VEC_HW [(match_operand:VEC_HW 1 \"register_operand\"  \"v\")\n-\t\t\t(match_operand:VEC_HW 2 \"register_operand\"  \"v\")]\n+  [(set (match_operand:V_128_NOSINGLE                         0 \"register_operand\" \"=v\")\n+\t(unspec:V_128_NOSINGLE [(match_operand:V_128_NOSINGLE 1 \"register_operand\"  \"v\")\n+\t\t\t(match_operand:V_128_NOSINGLE         2 \"register_operand\"  \"v\")]\n \t\t     UNSPEC_VEC_MERGEL))]\n   \"TARGET_VX\"\n   \"vmrl<bhfgq>\\t%v0,%1,%2\""}]}