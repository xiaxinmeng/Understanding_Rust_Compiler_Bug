{"sha": "638ba4aadf2251d3058ecc925bd1a4ea31de1f26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4YmE0YWFkZjIyNTFkMzA1OGVjYzkyNWJkMWE0ZWEzMWRlMWYyNg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-11-18T09:55:56Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-11-18T09:55:56Z"}, "message": "[Patch ARM Refactor Builtins 5/8] Start keeping track of qualifiers in ARM.\n\ngcc/\n\n\t* gcc/config/arm/arm-builtins.c\t(arm_type_qualifiers): New.\n\t(neon_itype): Add new types corresponding to the types used in\n\tqualifiers names.\n\t(arm_unop_qualifiers): New.\n\t(arm_bswap_qualifiers): Likewise.\n\t(arm_binop_qualifiers): Likewise.\n\t(arm_ternop_qualifiers): Likewise.\n\t(arm_getlane_qualifiers): Likewise.\n\t(arm_lanemac_qualifiers): Likewise.\n\t(arm_setlane_qualifiers): Likewise.\n\t(arm_combine_qualifiers): Likewise.\n\t(arm_load1_qualifiers): Likewise.\n\t(arm_load1_lane_qualifiers): Likewise.\n\t(arm_store1_qualifiers): Likewise.\n\t(arm_storestruct_lane_qualifiers): Likewise.\n\t(UNOP_QUALIFIERS): Likewise.\n\t(DUP_QUALIFIERS): Likewise.\n\t(SPLIT_QUALIFIERS): Likewise.\n\t(CONVERT_QUALIFIERS): Likewise.\n\t(FLOAT_WIDEN_QUALIFIERS): Likewise.\n\t(FLOAT_NARROW_QUALIFIERS): Likewise.\n\t(RINT_QUALIFIERS): Likewise.\n\t(COPYSIGNF_QUALIFIERS): Likewise.\n\t(CREATE_QUALIFIERS): Likewise.\n\t(REINTERP_QUALIFIERS): Likewise.\n\t(BSWAP_QUALIFIERS): Likewise.\n\t(BINOP_QUALIFIERS): Likewise.\n\t(FIXCONV_QUALIFIERS): Likewise.\n\t(SCALARMUL_QUALIFIERS): Likewise.\n\t(SCALARMULL_QUALIFIERS): Likewise.\n\t(SCALARMULH_QUALIFIERS): Likewise.\n\t(TERNOP_QUALIFIERS): Likewise.\n\t(SELECT_QUALIFIERS): Likewise.\n\t(VTBX_QUALIFIERS): Likewise.\n\t(GETLANE_QUALIFIERS): Likewise.\n\t(SHIFTIMM_QUALIFIERS): Likewise.\n\t(LANEMAC_QUALIFIERS): Likewise.\n\t(SCALARMAC_QUALIFIERS): Likewise.\n\t(SETLANE_QUALIFIERS): Likewise.\n\t(SHIFTINSERT_QUALIFIERS): Likewise.\n\t(SHIFTACC_QUALIFIERS): Likewise.\n\t(LANEMUL_QUALIFIERS): Likewise.\n\t(LANEMULL_QUALIFIERS): Likewise.\n\t(LANEMULH_QUALIFIERS): Likewise.\n\t(COMBINE_QUALIFIERS): Likewise.\n\t(VTBL_QUALIFIERS): Likewise.\n\t(LOAD1_QUALIFIERS): Likewise.\n\t(LOADSTRUCT_QUALIFIERS): Likewise.\n\t(LOAD1LANE_QUALIFIERS): Likewise.\n\t(LOADSTRUCTLANE_QUALIFIERS): Likewise.\n\t(STORE1_QUALIFIERS): Likewise.\n\t(STORESTRUCT_QUALIFIERS): Likewise.\n\t(STORE1LANE_QUALIFIERS): Likewise.\n\t(STORESTRUCTLANE_QUALIFIERS): Likewise.\n\t(neon_builtin_datum): Keep track of qualifiers.\n\t(VAR1): Likewise.\n\nFrom-SVN: r217697", "tree": {"sha": "e1e9fe2e0aac8290012108f1343ebd5b06263697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1e9fe2e0aac8290012108f1343ebd5b06263697"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/638ba4aadf2251d3058ecc925bd1a4ea31de1f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638ba4aadf2251d3058ecc925bd1a4ea31de1f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638ba4aadf2251d3058ecc925bd1a4ea31de1f26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638ba4aadf2251d3058ecc925bd1a4ea31de1f26/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1add35dbd54067a4ebdd344317e48701192252f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1add35dbd54067a4ebdd344317e48701192252f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1add35dbd54067a4ebdd344317e48701192252f4"}], "stats": {"total": 204, "additions": 203, "deletions": 1}, "files": [{"sha": "3104d3c657e1b7b28ec0360b2ecc9515f1482041", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638ba4aadf2251d3058ecc925bd1a4ea31de1f26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638ba4aadf2251d3058ecc925bd1a4ea31de1f26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=638ba4aadf2251d3058ecc925bd1a4ea31de1f26", "patch": "@@ -1,3 +1,62 @@\n+2014-11-18  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc/config/arm/arm-builtins.c\t(arm_type_qualifiers): New.\n+\t(neon_itype): Add new types corresponding to the types used in\n+\tqualifiers names.\n+\t(arm_unop_qualifiers): New.\n+\t(arm_bswap_qualifiers): Likewise.\n+\t(arm_binop_qualifiers): Likewise.\n+\t(arm_ternop_qualifiers): Likewise.\n+\t(arm_getlane_qualifiers): Likewise.\n+\t(arm_lanemac_qualifiers): Likewise.\n+\t(arm_setlane_qualifiers): Likewise.\n+\t(arm_combine_qualifiers): Likewise.\n+\t(arm_load1_qualifiers): Likewise.\n+\t(arm_load1_lane_qualifiers): Likewise.\n+\t(arm_store1_qualifiers): Likewise.\n+\t(arm_storestruct_lane_qualifiers): Likewise.\n+\t(UNOP_QUALIFIERS): Likewise.\n+\t(DUP_QUALIFIERS): Likewise.\n+\t(SPLIT_QUALIFIERS): Likewise.\n+\t(CONVERT_QUALIFIERS): Likewise.\n+\t(FLOAT_WIDEN_QUALIFIERS): Likewise.\n+\t(FLOAT_NARROW_QUALIFIERS): Likewise.\n+\t(RINT_QUALIFIERS): Likewise.\n+\t(COPYSIGNF_QUALIFIERS): Likewise.\n+\t(CREATE_QUALIFIERS): Likewise.\n+\t(REINTERP_QUALIFIERS): Likewise.\n+\t(BSWAP_QUALIFIERS): Likewise.\n+\t(BINOP_QUALIFIERS): Likewise.\n+\t(FIXCONV_QUALIFIERS): Likewise.\n+\t(SCALARMUL_QUALIFIERS): Likewise.\n+\t(SCALARMULL_QUALIFIERS): Likewise.\n+\t(SCALARMULH_QUALIFIERS): Likewise.\n+\t(TERNOP_QUALIFIERS): Likewise.\n+\t(SELECT_QUALIFIERS): Likewise.\n+\t(VTBX_QUALIFIERS): Likewise.\n+\t(GETLANE_QUALIFIERS): Likewise.\n+\t(SHIFTIMM_QUALIFIERS): Likewise.\n+\t(LANEMAC_QUALIFIERS): Likewise.\n+\t(SCALARMAC_QUALIFIERS): Likewise.\n+\t(SETLANE_QUALIFIERS): Likewise.\n+\t(SHIFTINSERT_QUALIFIERS): Likewise.\n+\t(SHIFTACC_QUALIFIERS): Likewise.\n+\t(LANEMUL_QUALIFIERS): Likewise.\n+\t(LANEMULL_QUALIFIERS): Likewise.\n+\t(LANEMULH_QUALIFIERS): Likewise.\n+\t(COMBINE_QUALIFIERS): Likewise.\n+\t(VTBL_QUALIFIERS): Likewise.\n+\t(LOAD1_QUALIFIERS): Likewise.\n+\t(LOADSTRUCT_QUALIFIERS): Likewise.\n+\t(LOAD1LANE_QUALIFIERS): Likewise.\n+\t(LOADSTRUCTLANE_QUALIFIERS): Likewise.\n+\t(STORE1_QUALIFIERS): Likewise.\n+\t(STORESTRUCT_QUALIFIERS): Likewise.\n+\t(STORE1LANE_QUALIFIERS): Likewise.\n+\t(STORESTRUCTLANE_QUALIFIERS): Likewise.\n+\t(neon_builtin_datum): Keep track of qualifiers.\n+\t(VAR1): Likewise.\n+\n 2014-11-18  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/arm-builtins.c (VAR1): Add a comma."}, {"sha": "4ea658117a5e095408ea0b1e06276970db3d3ae6", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 144, "deletions": 1, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638ba4aadf2251d3058ecc925bd1a4ea31de1f26/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638ba4aadf2251d3058ecc925bd1a4ea31de1f26/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=638ba4aadf2251d3058ecc925bd1a4ea31de1f26", "patch": "@@ -35,6 +35,148 @@\n #include \"ggc.h\"\n #include \"arm-protos.h\"\n \n+#define SIMD_MAX_BUILTIN_ARGS 5\n+\n+enum arm_type_qualifiers\n+{\n+  /* T foo.  */\n+  qualifier_none = 0x0,\n+  /* unsigned T foo.  */\n+  qualifier_unsigned = 0x1, /* 1 << 0  */\n+  /* const T foo.  */\n+  qualifier_const = 0x2, /* 1 << 1  */\n+  /* T *foo.  */\n+  qualifier_pointer = 0x4, /* 1 << 2  */\n+  /* Used when expanding arguments if an operand could\n+     be an immediate.  */\n+  qualifier_immediate = 0x8, /* 1 << 3  */\n+  qualifier_maybe_immediate = 0x10, /* 1 << 4  */\n+  /* void foo (...).  */\n+  qualifier_void = 0x20, /* 1 << 5  */\n+  /* Some patterns may have internal operands, this qualifier is an\n+     instruction to the initialisation code to skip this operand.  */\n+  qualifier_internal = 0x40, /* 1 << 6  */\n+  /* Some builtins should use the T_*mode* encoded in a simd_builtin_datum\n+     rather than using the type of the operand.  */\n+  qualifier_map_mode = 0x80, /* 1 << 7  */\n+  /* qualifier_pointer | qualifier_map_mode  */\n+  qualifier_pointer_map_mode = 0x84,\n+  /* qualifier_const_pointer | qualifier_map_mode  */\n+  qualifier_const_pointer_map_mode = 0x86,\n+  /* Polynomial types.  */\n+  qualifier_poly = 0x100\n+};\n+\n+/*  The qualifier_internal allows generation of a unary builtin from\n+    a pattern with a third pseudo-operand such as a match_scratch.\n+    T (T).  */\n+static enum arm_type_qualifiers\n+arm_unop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_internal };\n+#define CONVERT_QUALIFIERS (arm_unop_qualifiers)\n+#define COPYSIGNF_QUALIFIERS (arm_unop_qualifiers)\n+#define CREATE_QUALIFIERS (arm_unop_qualifiers)\n+#define DUP_QUALIFIERS (arm_unop_qualifiers)\n+#define FLOAT_WIDEN_QUALIFIERS (arm_unop_qualifiers)\n+#define FLOAT_NARROW_QUALIFIERS (arm_unop_qualifiers)\n+#define REINTERP_QUALIFIERS (arm_unop_qualifiers)\n+#define RINT_QUALIFIERS (arm_unop_qualifiers)\n+#define SPLIT_QUALIFIERS (arm_unop_qualifiers)\n+#define UNOP_QUALIFIERS (arm_unop_qualifiers)\n+\n+/* unsigned T (unsigned T).  */\n+static enum arm_type_qualifiers\n+arm_bswap_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned };\n+#define BSWAP_QUALIFIERS (arm_bswap_qualifiers)\n+\n+/* T (T, T [maybe_immediate]).  */\n+static enum arm_type_qualifiers\n+arm_binop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_maybe_immediate };\n+#define BINOP_QUALIFIERS (arm_binop_qualifiers)\n+#define FIXCONV_QUALIFIERS (arm_binop_qualifiers)\n+#define SCALARMUL_QUALIFIERS (arm_binop_qualifiers)\n+#define SCALARMULL_QUALIFIERS (arm_binop_qualifiers)\n+#define SCALARMULH_QUALIFIERS (arm_binop_qualifiers)\n+\n+/* T (T, T, T).  */\n+static enum arm_type_qualifiers\n+arm_ternop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none, qualifier_none };\n+#define TERNOP_QUALIFIERS (arm_ternop_qualifiers)\n+#define SELECT_QUALIFIERS (arm_ternop_qualifiers)\n+#define VTBX_QUALIFIERS (arm_ternop_qualifiers)\n+\n+/* T (T, immediate).  */\n+static enum arm_type_qualifiers\n+arm_getlane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_immediate };\n+#define GETLANE_QUALIFIERS (arm_getlane_qualifiers)\n+#define SHIFTIMM_QUALIFIERS (arm_getlane_qualifiers)\n+\n+/* T (T, T, T, immediate).  */\n+static enum arm_type_qualifiers\n+arm_lanemac_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none,\n+      qualifier_none, qualifier_immediate };\n+#define LANEMAC_QUALIFIERS (arm_lanemac_qualifiers)\n+#define SCALARMAC_QUALIFIERS (arm_lanemac_qualifiers)\n+\n+/* T (T, T, immediate).  */\n+static enum arm_type_qualifiers\n+arm_setlane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none, qualifier_immediate };\n+#define LANEMUL_QUALIFIERS (arm_setlane_qualifiers)\n+#define LANEMULH_QUALIFIERS (arm_setlane_qualifiers)\n+#define LANEMULL_QUALIFIERS (arm_setlane_qualifiers)\n+#define SETLANE_QUALIFIERS (arm_setlane_qualifiers)\n+#define SHIFTACC_QUALIFIERS (arm_setlane_qualifiers)\n+#define SHIFTINSERT_QUALIFIERS (arm_setlane_qualifiers)\n+\n+/* T (T, T).  */\n+static enum arm_type_qualifiers\n+arm_combine_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none };\n+#define COMBINE_QUALIFIERS (arm_combine_qualifiers)\n+#define VTBL_QUALIFIERS (arm_combine_qualifiers)\n+\n+/* T ([T element type] *).  */\n+static enum arm_type_qualifiers\n+arm_load1_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_const_pointer_map_mode };\n+#define LOAD1_QUALIFIERS (arm_load1_qualifiers)\n+#define LOADSTRUCT_QUALIFIERS (arm_load1_qualifiers)\n+\n+/* T ([T element type] *, T, immediate).  */\n+static enum arm_type_qualifiers\n+arm_load1_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_const_pointer_map_mode,\n+      qualifier_none, qualifier_immediate };\n+#define LOAD1LANE_QUALIFIERS (arm_load1_lane_qualifiers)\n+#define LOADSTRUCTLANE_QUALIFIERS (arm_load1_lane_qualifiers)\n+\n+/* The first argument (return type) of a store should be void type,\n+   which we represent with qualifier_void.  Their first operand will be\n+   a DImode pointer to the location to store to, so we must use\n+   qualifier_map_mode | qualifier_pointer to build a pointer to the\n+   element type of the vector.\n+\n+   void ([T element type] *, T).  */\n+static enum arm_type_qualifiers\n+arm_store1_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_pointer_map_mode, qualifier_none };\n+#define STORE1_QUALIFIERS (arm_store1_qualifiers)\n+#define STORESTRUCT_QUALIFIERS (arm_store1_qualifiers)\n+\n+   /* void ([T element type] *, T, immediate).  */\n+static enum arm_type_qualifiers\n+arm_storestruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_pointer_map_mode,\n+      qualifier_none, qualifier_immediate };\n+#define STORE1LANE_QUALIFIERS (arm_storestruct_lane_qualifiers)\n+#define STORESTRUCTLANE_QUALIFIERS (arm_storestruct_lane_qualifiers)\n+\n typedef enum {\n   T_V8QI,\n   T_V4HI,\n@@ -129,12 +271,13 @@ typedef struct {\n   const neon_builtin_type_mode mode;\n   const enum insn_code code;\n   unsigned int fcode;\n+  enum arm_type_qualifiers *qualifiers;\n } neon_builtin_datum;\n \n #define CF(N,X) CODE_FOR_neon_##N##X\n \n #define VAR1(T, N, A) \\\n-  {#N, NEON_##T, UP (A), CF (N, A), 0},\n+  {#N, NEON_##T, UP (A), CF (N, A), 0, T##_QUALIFIERS},\n #define VAR2(T, N, A, B) \\\n   VAR1 (T, N, A) \\\n   VAR1 (T, N, B)"}]}