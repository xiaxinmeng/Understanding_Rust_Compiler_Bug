{"sha": "fa52081d8605854c0c9eaf9cb5266fe685f4a457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE1MjA4MWQ4NjA1ODU0YzBjOWVhZjljYjUyNjZmZTY4NWY0YTQ1Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-27T10:47:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-27T10:47:27Z"}, "message": "stl_numeric.h (iota): Add in C++0x mode.\n\n2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_numeric.h (iota): Add in C++0x mode.\n\t* testsuite/util/testsuite_character.h (pod_int): Add operator++\n\tin C++0x mode.\n\t* testsuite/util/testsuite_api.h (NonDefaultConstructible): Likewise.\n\t* testsuite/26_numerics/iota/1.cc: New.\n\t* testsuite/26_numerics/iota/requirements/explicit_instantiation/\n\t2.cc: Likewise.\n\t* testsuite/26_numerics/iota/requirements/explicit_instantiation/\n\tpod.cc: Likewise.\n\n\t* include/ext/algorithm: Do not fiddle with the legacy headers.\n\n\t* testsuite/26_numerics/partial_sum/1.cc: Minor changes, comments,\n\tstyle.\n\t* testsuite/26_numerics/accumulate/1.cc: Likewise.\n\t* testsuite/26_numerics/adjacent_difference/1.cc: Likewise.\n\t* testsuite/26_numerics/inner_product/1.cc: Likewise.\n\nFrom-SVN: r137174", "tree": {"sha": "7268855da81f3e3081198a9735a8844ca3bbd850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7268855da81f3e3081198a9735a8844ca3bbd850"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa52081d8605854c0c9eaf9cb5266fe685f4a457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa52081d8605854c0c9eaf9cb5266fe685f4a457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa52081d8605854c0c9eaf9cb5266fe685f4a457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa52081d8605854c0c9eaf9cb5266fe685f4a457/comments", "author": null, "committer": null, "parents": [{"sha": "d9338c672687d1eea1aaf1a9593ba44f0ca14cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9338c672687d1eea1aaf1a9593ba44f0ca14cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9338c672687d1eea1aaf1a9593ba44f0ca14cad"}], "stats": {"total": 253, "additions": 229, "deletions": 24}, "files": [{"sha": "b5191e8385a71346991ea916fac92b2ba5b4522f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -1,3 +1,23 @@\n+2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_numeric.h (iota): Add in C++0x mode.\n+\t* testsuite/util/testsuite_character.h (pod_int): Add operator++\n+\tin C++0x mode.\n+\t* testsuite/util/testsuite_api.h (NonDefaultConstructible): Likewise.\n+\t* testsuite/26_numerics/iota/1.cc: New.\n+\t* testsuite/26_numerics/iota/requirements/explicit_instantiation/\n+\t2.cc: Likewise.\n+\t* testsuite/26_numerics/iota/requirements/explicit_instantiation/\n+\tpod.cc: Likewise.\n+\n+\t* include/ext/algorithm: Do not fiddle with the legacy headers.\n+\n+\t* testsuite/26_numerics/partial_sum/1.cc: Minor changes, comments,\n+\tstyle.\n+\t* testsuite/26_numerics/accumulate/1.cc: Likewise.\n+\t* testsuite/26_numerics/adjacent_difference/1.cc: Likewise.\n+\t* testsuite/26_numerics/inner_product/1.cc: Likewise.\n+\n 2008-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algo.h (partition_copy): Add in C++0x mode."}, {"sha": "c86122679daef72e741b4b43b9885330837f598a", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -1,6 +1,6 @@\n // Numeric functions implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -65,6 +65,43 @@\n #include <bits/concept_check.h>\n #include <debug/debug.h>\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /**\n+   *  @brief  Create a range of sequentially increasing values.\n+   *\n+   *  For each element in the range @p [first,last) assigns @p value and\n+   *  increments @p value as if by @p ++value.\n+   *\n+   *  @param  first  Start of range.\n+   *  @param  last  End of range.\n+   *  @param  value  Starting value.\n+   *  @return  Nothing.\n+   */\n+  template<typename _ForwardIterator, typename _Tp>\n+    void\n+    iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<\n+\t\t\t\t  _ForwardIterator>)\n+      __glibcxx_function_requires(_ConvertibleConcept<_Tp,\n+\t    typename iterator_traits<_ForwardIterator>::value_type>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n+      for (; __first != __last; ++__first)\n+\t{\n+\t  *__first = __value;\n+\t  ++__value;\n+\t}\n+    }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif\n+\n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n@@ -164,7 +201,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n    *  @return  The final inner product.\n    */\n   template<typename _InputIterator1, typename _InputIterator2, typename _Tp,\n-\t    typename _BinaryOperation1, typename _BinaryOperation2>\n+\t   typename _BinaryOperation1, typename _BinaryOperation2>\n     inline _Tp\n     inner_product(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t  _InputIterator2 __first2, _Tp __init,"}, {"sha": "2af2cb1cb3660e9404cf562b9cbe5107b00bbd8f", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -1,6 +1,6 @@\n // Algorithm extensions -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -428,10 +428,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t     __out_last - __out_first);\n     }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  using std::is_heap;\n-  using std::is_sorted;\n-#else\n   /**\n    *  This is an SGI extension.\n    *  @ingroup SGIextensions\n@@ -527,7 +523,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  return false;\n       return true;\n     }\n-#endif\n \n _GLIBCXX_END_NAMESPACE\n "}, {"sha": "22a67fe8feabd74cce67984726f1a58f93c5a432", "filename": "libstdc++-v3/testsuite/26_numerics/accumulate/1.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Faccumulate%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Faccumulate%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Faccumulate%2F1.cc?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,7 +49,7 @@ test02()\n int\n main()\n {\n-    test01();\n-    test02();\n-    return 0;\n+  test01();\n+  test02();\n+  return 0;\n }"}, {"sha": "e53e279cf27d41b3dc2b81bd18a654c681efe5f4", "filename": "libstdc++-v3/testsuite/26_numerics/adjacent_difference/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fadjacent_difference%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fadjacent_difference%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fadjacent_difference%2F1.cc?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -16,7 +17,6 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 26.4.3 [lib.partial.sum]\n // 26.4.4 [lib.adjacent.difference]\n \n #include <algorithm>\n@@ -41,6 +41,6 @@ test01()\n int\n main()\n {\n-    test01();\n-    return 0;\n+  test01();\n+  return 0;\n }"}, {"sha": "6c44fae3c8890812a8eac3834e71086f67f98710", "filename": "libstdc++-v3/testsuite/26_numerics/inner_product/1.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finner_product%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finner_product%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Finner_product%2F1.cc?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -50,7 +51,7 @@ test02()\n int\n main()\n {\n-    test01();\n-    test02();\n-    return 0;\n+  test01();\n+  test02();\n+  return 0;\n }"}, {"sha": "2c747c13e965c2dfbd65717b7dfecc0038825f73", "filename": "libstdc++-v3/testsuite/26_numerics/iota/1.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2F1.cc?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <numeric>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+int A[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};\n+int B[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n+int C[] = {-9, -8, -7, -6, -5, -4, -3, -2, -1};\n+const int N = sizeof(A) / sizeof(int);\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::iota(A, A + N, 1);\n+  VERIFY( std::equal(A, A + N, B) );\n+\n+  std::iota(A, A + N, -9);\n+  VERIFY( std::equal(A, A + N, C) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fd0eba869a62723421a9e6cbed873e8eca52bb0f", "filename": "libstdc++-v3/testsuite/26_numerics/iota/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <numeric>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  typedef __gnu_test::NonDefaultConstructible \tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+\n+  template void iota(iterator_type, iterator_type, value_type);\n+} "}, {"sha": "a24ac95c8941d66238c8a9635e0dacfcdfe30d5b", "filename": "libstdc++-v3/testsuite/26_numerics/iota/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fiota%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <numeric>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  typedef __gnu_test::pod_int \tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+\n+  template void iota(iterator_type, iterator_type, value_type);\n+} "}, {"sha": "c972b31651ad33cf9ffb058ef44cfca771e6c565", "filename": "libstdc++-v3/testsuite/26_numerics/partial_sum/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpartial_sum%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpartial_sum%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fpartial_sum%2F1.cc?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,7 +18,6 @@\n // USA.\n \n // 26.4.3 [lib.partial.sum]\n-// 26.4.4 [lib.adjacent.difference]\n \n #include <algorithm>\n #include <numeric>"}, {"sha": "cbb606c42a857cfecfa66e68d4ce0d7b93394e37", "filename": "libstdc++-v3/testsuite/util/testsuite_api.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -84,6 +84,13 @@ namespace __gnu_test\n   {\n     NonDefaultConstructible(int) { }\n     NonDefaultConstructible(const NonDefaultConstructible&) { }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    // For std::iota.\n+    NonDefaultConstructible&\n+    operator++()\n+    { return *this; }\n+#endif\n   };\n  \n   // See: 20.1.1 Template argument requirements."}, {"sha": "2aa0bc72e53b221a37cf685fa229010f430fcea8", "filename": "libstdc++-v3/testsuite/util/testsuite_character.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa52081d8605854c0c9eaf9cb5266fe685f4a457/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.h?ref=fa52081d8605854c0c9eaf9cb5266fe685f4a457", "patch": "@@ -3,7 +3,8 @@\n // Testing character type and state type with char_traits and codecvt\n // specializations for the C++ library testsuite.\n //\n-// Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,8 +45,18 @@ namespace __gnu_test\n   struct pod_int\n   {\n     int value;\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    // For std::iota.\n+    pod_int&\n+    operator++()\n+    {\n+      ++value;\n+      return *this;\n+    }\n+#endif\n   };\n-  \n+\n   // For 20.1 requirements for instantiable type: equality comparable\n   // and less than comparable.\n   inline bool"}]}