{"sha": "0029bafd89b2bd403d96a053acefc2d341b85788", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyOWJhZmQ4OWIyYmQ0MDNkOTZhMDUzYWNlZmMyZDM0MWI4NTc4OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-02-15T08:39:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-02-15T08:39:04Z"}, "message": "trans.c (gnat_to_gnu): If the type is tagged, mark it as used for debugging purposes.\n\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Qualified_Expression>: If the\n\ttype is tagged, mark it as used for debugging purposes.\n\t<N_Allocator>: Likewise for a qualified expression.\n\nFrom-SVN: r184258", "tree": {"sha": "da3e0cc5d7128e03e92bf08e1b69abfabef2b3dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da3e0cc5d7128e03e92bf08e1b69abfabef2b3dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0029bafd89b2bd403d96a053acefc2d341b85788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0029bafd89b2bd403d96a053acefc2d341b85788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0029bafd89b2bd403d96a053acefc2d341b85788", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0029bafd89b2bd403d96a053acefc2d341b85788/comments", "author": null, "committer": null, "parents": [{"sha": "4a582c9fda392a8218c427c60fe6378956de1831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a582c9fda392a8218c427c60fe6378956de1831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a582c9fda392a8218c427c60fe6378956de1831"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "04a66c5efd4723ec5369c6742e79b1518efab2f1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0029bafd89b2bd403d96a053acefc2d341b85788/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0029bafd89b2bd403d96a053acefc2d341b85788/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0029bafd89b2bd403d96a053acefc2d341b85788", "patch": "@@ -1,8 +1,14 @@\n+2012-02-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Qualified_Expression>: If the\n+\ttype is tagged, mark it as used for debugging purposes.\n+\t<N_Allocator>: Likewise for a qualified expression.\n+\n 2012-02-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (call_to_gnu): Create the temporary for the\n \treturn value in the by-reference return type case if this isn't the\n-\texpression of an object declaration. \ufffdTidy up.\n+\texpression of an object declaration.  Tidy up.\n \n 2012-02-09  Tristan Gingold  <gingold@adacore.com>\n "}, {"sha": "a99c967efcacd759472aa01cad4c9f9f5ac07558", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0029bafd89b2bd403d96a053acefc2d341b85788/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0029bafd89b2bd403d96a053acefc2d341b85788/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=0029bafd89b2bd403d96a053acefc2d341b85788", "patch": "@@ -5518,6 +5518,13 @@ gnat_to_gnu (Node_Id gnat_node)\n       gnu_result = gnat_to_gnu (Expression (gnat_node));\n       gnu_result_type = get_unpadded_type (Etype (gnat_node));\n \n+      /* If this is a qualified expression for a tagged type, we mark the type\n+\t as used.  Because of polymorphism, this might be the only reference to\n+\t the tagged type in the program while objects have it as dynamic type.\n+\t The debugger needs to see it to display these objects properly.  */\n+      if (kind == N_Qualified_Expression && Is_Tagged_Type (Etype (gnat_node)))\n+\tused_types_insert (gnu_result_type);\n+\n       gnu_result\n \t= convert_with_check (Etype (gnat_node), gnu_result,\n \t\t\t      Do_Overflow_Check (gnat_node),\n@@ -5865,18 +5872,19 @@ gnat_to_gnu (Node_Id gnat_node)\n \n \t    if (Is_Elementary_Type (gnat_desig_type)\n \t\t|| Is_Constrained (gnat_desig_type))\n-\t      {\n-\t\tgnu_type = gnat_to_gnu_type (gnat_desig_type);\n-\t\tgnu_init = convert (gnu_type, gnu_init);\n-\t      }\n+\t      gnu_type = gnat_to_gnu_type (gnat_desig_type);\n \t    else\n \t      {\n \t\tgnu_type = gnat_to_gnu_type (Etype (Expression (gnat_temp)));\n \t\tif (TREE_CODE (gnu_type) == UNCONSTRAINED_ARRAY_TYPE)\n \t\t  gnu_type = TREE_TYPE (gnu_init);\n-\n-\t\tgnu_init = convert (gnu_type, gnu_init);\n \t      }\n+\n+\t    /* See the N_Qualified_Expression case for the rationale.  */\n+\t    if (Is_Tagged_Type (gnat_desig_type))\n+\t      used_types_insert (gnu_type);\n+\n+\t    gnu_init = convert (gnu_type, gnu_init);\n \t  }\n \telse\n \t  gcc_unreachable ();"}]}