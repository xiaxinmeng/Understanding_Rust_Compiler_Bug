{"sha": "e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmMGQzYjlkMjEwYzc5NjJkODE4NjQwM2I4N2MwYjA4YzE5YjhmZg==", "commit": {"author": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-05-07T08:08:57Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-05-07T08:08:57Z"}, "message": "c-ubsan.c (ubsan_instrument_bounds): Don't skip instrumenting flexible member array-like members if...\n\n\t* c-ubsan.c (ubsan_instrument_bounds): Don't skip instrumenting\n\tflexible member array-like members if SANITIZE_BOUNDS_STRICT.\n\n\t* doc/invoke.texi: Document -fsanitize=bounds-strict.\n\t* flag-types.h (enum sanitize_code): Add SANITIZE_BOUNDS_STRICT, or it\n\tinto SANITIZE_NONDEFAULT.\n\t* opts.c (common_handle_option): Handle -fsanitize=bounds-strict.\n\n\t* c-c++-common/ubsan/bounds-10.c: New test.\n\nFrom-SVN: r222871", "tree": {"sha": "ef62eceb38bcfbb26bb1550dda4f456ae31db72e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef62eceb38bcfbb26bb1550dda4f456ae31db72e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/comments", "author": null, "committer": null, "parents": [{"sha": "ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "beabbcb5fa0f0f79d6879d6f9a773bfb8daf0675", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "patch": "@@ -1,3 +1,11 @@\n+2015-05-07  Marek Polacek  <polacek@redhat.com>\n+\t    Martin Uecker  <uecker@eecs.berkeley.edu>\n+\n+\t* doc/invoke.texi: Document -fsanitize=bounds-strict.\n+\t* flag-types.h (enum sanitize_code): Add SANITIZE_BOUNDS_STRICT, or it\n+\tinto SANITIZE_NONDEFAULT.\n+\t* opts.c (common_handle_option): Handle -fsanitize=bounds-strict.\n+\n 2015-05-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/66015"}, {"sha": "dd69f2584060bb9db79a9dc889efe9da2c72d868", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "patch": "@@ -1,3 +1,9 @@\n+2015-05-07  Marek Polacek  <polacek@redhat.com>\n+\t    Martin Uecker  <uecker@eecs.berkeley.edu>\n+\n+\t* c-ubsan.c (ubsan_instrument_bounds): Don't skip instrumenting\n+\tflexible member array-like members if SANITIZE_BOUNDS_STRICT.\n+\n 2015-05-05  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt (Wterminate): New.\n@@ -9,8 +15,8 @@\n \n 2015-04-29  Josh Triplett  <josh@joshtriplett.org>\n \n-        * c-common.c (handle_section_attribute): Refactor to reduce\n-        nesting and distinguish between error cases.\n+\t* c-common.c (handle_section_attribute): Refactor to reduce\n+\tnesting and distinguish between error cases.\n \n 2015-04-29  Marek Polacek  <polacek@redhat.com>\n \n@@ -30,7 +36,7 @@\n \t* c-common.c (build_va_arg): Mark va_arg ap argument as addressable.\n \n 2015-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n-            Pierre-Marie de Rodat  <derodat@adacore.com>\n+\t    Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* c-ada-spec.c (in_function): Delete.\n \t(dump_generic_ada_node): Do not change in_function and remove the"}, {"sha": "dbbdc5bf1c46b869d51dc8ba0e33ac859e4c8381", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "patch": "@@ -301,9 +301,11 @@ ubsan_instrument_bounds (location_t loc, tree array, tree *index,\n     bound = fold_build2 (PLUS_EXPR, TREE_TYPE (bound), bound,\n \t\t\t build_int_cst (TREE_TYPE (bound), 1));\n \n-  /* Detect flexible array members and suchlike.  */\n+  /* Detect flexible array members and suchlike, unless\n+     -fsanitize=bounds-strict.  */\n   tree base = get_base_address (array);\n-  if (TREE_CODE (array) == COMPONENT_REF\n+  if ((flag_sanitize & SANITIZE_BOUNDS_STRICT) == 0\n+      && TREE_CODE (array) == COMPONENT_REF\n       && base && (TREE_CODE (base) == INDIRECT_REF\n \t\t  || TREE_CODE (base) == MEM_REF))\n     {"}, {"sha": "2c58a0d76cac6ea5aaf5c03e25a2303898766771", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "patch": "@@ -5736,6 +5736,13 @@ This option enables instrumentation of array bounds.  Various out of bounds\n accesses are detected.  Flexible array members, flexible array member-like\n arrays, and initializers of variables with static storage are not instrumented.\n \n+@item -fsanitize=bounds-strict\n+@opindex fsanitize=bounds-strict\n+This option enables strict instrumentation of array bounds.  Most out of bounds\n+accesses are detected, including flexible array members and flexible array\n+member-like arrays.  Initializers of variables with static storage are not\n+instrumented.\n+\n @item -fsanitize=alignment\n @opindex fsanitize=alignment\n "}, {"sha": "2f820a5a764cb7b9bf8ee4a646117b323c31265b", "filename": "gcc/flag-types.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "patch": "@@ -238,6 +238,7 @@ enum sanitize_code {\n   SANITIZE_RETURNS_NONNULL_ATTRIBUTE = 1UL << 19,\n   SANITIZE_OBJECT_SIZE = 1UL << 20,\n   SANITIZE_VPTR = 1UL << 21,\n+  SANITIZE_BOUNDS_STRICT = 1UL << 22,\n   SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE\n \t\t       | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN\n \t\t       | SANITIZE_SI_OVERFLOW | SANITIZE_BOOL | SANITIZE_ENUM\n@@ -246,6 +247,7 @@ enum sanitize_code {\n \t\t       | SANITIZE_RETURNS_NONNULL_ATTRIBUTE\n \t\t       | SANITIZE_OBJECT_SIZE | SANITIZE_VPTR,\n   SANITIZE_NONDEFAULT = SANITIZE_FLOAT_DIVIDE | SANITIZE_FLOAT_CAST\n+\t\t\t| SANITIZE_BOUNDS_STRICT\n };\n \n /* flag_vtable_verify initialization levels. */"}, {"sha": "cf923344a11d40275d47d4da7ff738bc7c3edf50", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "patch": "@@ -1584,6 +1584,8 @@ common_handle_option (struct gcc_options *opts,\n \t      { \"float-cast-overflow\", SANITIZE_FLOAT_CAST,\n \t\tsizeof \"float-cast-overflow\" - 1 },\n \t      { \"bounds\", SANITIZE_BOUNDS, sizeof \"bounds\" - 1 },\n+\t      { \"bounds-strict\", SANITIZE_BOUNDS | SANITIZE_BOUNDS_STRICT,\n+\t\tsizeof \"bounds-strict\" - 1 },\n \t      { \"alignment\", SANITIZE_ALIGNMENT, sizeof \"alignment\" - 1 },\n \t      { \"nonnull-attribute\", SANITIZE_NONNULL_ATTRIBUTE,\n \t\tsizeof \"nonnull-attribute\" - 1 },"}, {"sha": "d4d52638150bddc48cae1bbeabdefbae37d944c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "patch": "@@ -1,3 +1,8 @@\n+2015-05-07  Marek Polacek  <polacek@redhat.com>\n+\t    Martin Uecker  <uecker@eecs.berkeley.edu>\n+\n+\t* c-c++-common/ubsan/bounds-10.c: New test.\n+\n 2015-05-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/harness.h (set_options): Wrap with"}, {"sha": "a6187b543e89bdeef2dacbce3ab9e95d018493cb", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-10.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f0d3b9d210c7962d8186403b87c0b08c19b8ff/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-10.c?ref=e0f0d3b9d210c7962d8186403b87c0b08c19b8ff", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=bounds-strict\" } */\n+\n+struct V { int l; int a[1]; };\n+\n+int\n+main (void)\n+{\n+  /* For strict, do instrument last array in a struct.  */\n+  struct V *v = (struct V *) __builtin_malloc (sizeof (struct V) + 10);\n+  v->a[1] = 1;\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"index 1 out of bounds for type 'int \\\\\\[1\\\\\\]'\" } */"}]}