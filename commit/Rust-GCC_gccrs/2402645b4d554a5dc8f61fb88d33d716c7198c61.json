{"sha": "2402645b4d554a5dc8f61fb88d33d716c7198c61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwMjY0NWI0ZDU1NGE1ZGM4ZjYxZmI4OGQzM2Q3MTZjNzE5OGM2MQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-11-29T22:41:04Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-11-29T22:41:04Z"}, "message": "cpplib.c (_cpp_test_assertion): Default *value to 0.\n\n\t* cpplib.c (_cpp_test_assertion): Default *value to 0.\n\n\t* cppexp.c (num_part_mul): Initialize result.unsignedp, to 1.\n\nFrom-SVN: r59648", "tree": {"sha": "8f162b660efca2f0a954c74272152cd23549444a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f162b660efca2f0a954c74272152cd23549444a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2402645b4d554a5dc8f61fb88d33d716c7198c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2402645b4d554a5dc8f61fb88d33d716c7198c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2402645b4d554a5dc8f61fb88d33d716c7198c61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2402645b4d554a5dc8f61fb88d33d716c7198c61/comments", "author": null, "committer": null, "parents": [{"sha": "f6a83eb0a77977814adcb11f74141b0ff175a52f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a83eb0a77977814adcb11f74141b0ff175a52f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a83eb0a77977814adcb11f74141b0ff175a52f"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "dc5a79a26d9681cc852c847925c0200608e71758", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2402645b4d554a5dc8f61fb88d33d716c7198c61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2402645b4d554a5dc8f61fb88d33d716c7198c61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2402645b4d554a5dc8f61fb88d33d716c7198c61", "patch": "@@ -1,3 +1,9 @@\n+2002-11-29  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* cpplib.c (_cpp_test_assertion): Default *value to 0.\n+\n+\t* cppexp.c (num_part_mul): Initialize result.unsignedp, to 1.\n+\n 2002-11-29  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/t-crtstuff: New target makefile fragment."}, {"sha": "7f576f211e4f87b34fd5c0cf2b0f47d868cc6a25", "filename": "gcc/cppexp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2402645b4d554a5dc8f61fb88d33d716c7198c61/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2402645b4d554a5dc8f61fb88d33d716c7198c61/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=2402645b4d554a5dc8f61fb88d33d716c7198c61", "patch": "@@ -1446,6 +1446,7 @@ num_part_mul (lhs, rhs)\n \n   result.high += HIGH_PART (middle[0]);\n   result.high += HIGH_PART (middle[1]);\n+  result.unsignedp = 1;\n \n   return result;\n }"}, {"sha": "f8a702d8c1a43743d48c5ca19f5e6b8921f8efec", "filename": "gcc/cpplib.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2402645b4d554a5dc8f61fb88d33d716c7198c61/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2402645b4d554a5dc8f61fb88d33d716c7198c61/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=2402645b4d554a5dc8f61fb88d33d716c7198c61", "patch": "@@ -1689,7 +1689,7 @@ find_answer (node, candidate)\n \n /* Test an assertion within a preprocessor conditional.  Returns\n    nonzero on failure, zero on success.  On success, the result of\n-   the test is written into VALUE.  */\n+   the test is written into VALUE, otherwise the value 0.  */\n int\n _cpp_test_assertion (pfile, value)\n      cpp_reader *pfile;\n@@ -1699,6 +1699,11 @@ _cpp_test_assertion (pfile, value)\n   cpp_hashnode *node;\n \n   node = parse_assertion (pfile, &answer, T_IF);\n+\n+  /* For recovery, an erroneous assertion expression is handled as a\n+     failing assertion.  */\n+  *value = 0;\n+\n   if (node)\n     *value = (node->type == NT_ASSERTION &&\n \t      (answer == 0 || *find_answer (node, answer) != 0));"}]}