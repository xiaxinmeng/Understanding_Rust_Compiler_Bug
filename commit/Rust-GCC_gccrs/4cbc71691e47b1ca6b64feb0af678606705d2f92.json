{"sha": "4cbc71691e47b1ca6b64feb0af678606705d2f92", "node_id": "C_kwDOANBUbNoAKDRjYmM3MTY5MWU0N2IxY2E2YjY0ZmViMGFmNjc4NjA2NzA1ZDJmOTI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-01-23T22:14:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-01-23T23:35:11Z"}, "message": "c++: TARGET_EXPR_ELIDING_P and std::move [PR107267]\n\nWith -ffold-simple-inlines, we turn calls to std::move into the static_cast\nequivalent.  In this testcase, this exposes the FindResult temporary to copy\nelision which is not specified by the standard, through an optimization in\ngimplify_modify_expr_rhs.  Since the type is not TREE_ADDRESSABLE, this is\nnot detectable by the user, so we just need to soften the assert.\n\n\tPR c++/107267\n\ngcc/cp/ChangeLog:\n\n\t* cp-gimplify.cc (cp_gimplify_init_expr): Allow unexpected elision\n\tof trivial types.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/move2.C: New test.", "tree": {"sha": "c3f5b175c0ad4ff4e3e7e7ac8574e254251e018f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3f5b175c0ad4ff4e3e7e7ac8574e254251e018f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cbc71691e47b1ca6b64feb0af678606705d2f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbc71691e47b1ca6b64feb0af678606705d2f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cbc71691e47b1ca6b64feb0af678606705d2f92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbc71691e47b1ca6b64feb0af678606705d2f92/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51767f31878a95161142254dca7119b409699670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51767f31878a95161142254dca7119b409699670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51767f31878a95161142254dca7119b409699670"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "83ba1285bfd1bf83b81fd44d0e36ea305cfdc5bd", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbc71691e47b1ca6b64feb0af678606705d2f92/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbc71691e47b1ca6b64feb0af678606705d2f92/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=4cbc71691e47b1ca6b64feb0af678606705d2f92", "patch": "@@ -250,7 +250,10 @@ cp_gimplify_init_expr (tree *expr_p)\n   if (TREE_CODE (from) == TARGET_EXPR)\n     if (tree init = TARGET_EXPR_INITIAL (from))\n       {\n-\tgcc_checking_assert (TARGET_EXPR_ELIDING_P (from));\n+\t/* Make sure that we expected to elide this temporary.  But also allow\n+\t   gimplify_modify_expr_rhs to elide temporaries of trivial type.  */\n+\tgcc_checking_assert (TARGET_EXPR_ELIDING_P (from)\n+\t\t\t     || !TREE_ADDRESSABLE (TREE_TYPE (from)));\n \tif (target_expr_needs_replace (from))\n \t  {\n \t    /* If this was changed by cp_genericize_target_expr, we need to"}, {"sha": "b8c8683c4d20909dce8d4cb46cfd0912fdecc750", "filename": "gcc/testsuite/g++.dg/cpp0x/move2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbc71691e47b1ca6b64feb0af678606705d2f92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmove2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbc71691e47b1ca6b64feb0af678606705d2f92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmove2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmove2.C?ref=4cbc71691e47b1ca6b64feb0af678606705d2f92", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/107267\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -ffold-simple-inlines }\n+\n+namespace std {\n+  template<typename _Tp> _Tp &&move(_Tp &&);\n+}\n+\n+struct FindResult {\n+  FindResult();\n+  int result;\n+};\n+\n+FindResult pop_ret = std::move(FindResult());"}]}