{"sha": "1fc1ef37ec3af1dfbd44030256f1405396188e23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZjMWVmMzdlYzNhZjFkZmJkNDQwMzAyNTZmMTQwNTM5NjE4OGUyMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-10-01T13:40:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-10-01T13:40:35Z"}, "message": "tree.h (copy_mem_ref_info): Delete.\n\n\t* tree.h (copy_mem_ref_info): Delete.\n\t* tree-ssa-address.c (copy_mem_ref_info): Likewise.\n\t(maybe_fold_tmr): Copy flags manually.\n\t* tree-ssa-loop-im.c (simple_mem_ref_in_stmt): Rewrite.\n\nFrom-SVN: r191924", "tree": {"sha": "3d1a42a39b3f8ad8f92b0f63c0dbd403f943ed08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d1a42a39b3f8ad8f92b0f63c0dbd403f943ed08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fc1ef37ec3af1dfbd44030256f1405396188e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc1ef37ec3af1dfbd44030256f1405396188e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc1ef37ec3af1dfbd44030256f1405396188e23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc1ef37ec3af1dfbd44030256f1405396188e23/comments", "author": null, "committer": null, "parents": [{"sha": "ba9144840f5b72697946060758bdde386d4a6292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9144840f5b72697946060758bdde386d4a6292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9144840f5b72697946060758bdde386d4a6292"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "020892bdf396f34f8c1b1f33aa674cb0db4c07cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc1ef37ec3af1dfbd44030256f1405396188e23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc1ef37ec3af1dfbd44030256f1405396188e23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fc1ef37ec3af1dfbd44030256f1405396188e23", "patch": "@@ -1,3 +1,10 @@\n+2012-10-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (copy_mem_ref_info): Delete.\n+\t* tree-ssa-address.c (copy_mem_ref_info): Likewise.\n+\t(maybe_fold_tmr): Copy flags manually.\n+\t* tree-ssa-loop-im.c (simple_mem_ref_in_stmt): Rewrite.\n+\n 2012-10-01  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* simplify-rtx.c (simplify_binary_operation_1) <VEC_SELECT>:"}, {"sha": "c5b8ff1056bfd572b8a699c4673d8eb9a178a884", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc1ef37ec3af1dfbd44030256f1405396188e23/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc1ef37ec3af1dfbd44030256f1405396188e23/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=1fc1ef37ec3af1dfbd44030256f1405396188e23", "patch": "@@ -821,16 +821,6 @@ get_address_description (tree op, struct mem_address *addr)\n   addr->offset = TMR_OFFSET (op);\n }\n \n-/* Copies the additional information attached to target_mem_ref FROM to TO.  */\n-\n-void\n-copy_mem_ref_info (tree to, tree from)\n-{\n-  /* And the info about the original reference.  */\n-  TREE_SIDE_EFFECTS (to) = TREE_SIDE_EFFECTS (from);\n-  TREE_THIS_VOLATILE (to) = TREE_THIS_VOLATILE (from);\n-}\n-\n /* Copies the reference information from OLD_REF to NEW_REF, where\n    NEW_REF should be either a MEM_REF or a TARGET_MEM_REF.  */\n \n@@ -901,7 +891,7 @@ maybe_fold_tmr (tree ref)\n {\n   struct mem_address addr;\n   bool changed = false;\n-  tree ret, off;\n+  tree new_ref, off;\n \n   get_address_description (ref, &addr);\n \n@@ -962,10 +952,11 @@ maybe_fold_tmr (tree ref)\n      ended up folding it, always create a new TARGET_MEM_REF regardless\n      if it is valid in this for on the target - the propagation result\n      wouldn't be anyway.  */\n-  ret = create_mem_ref_raw (TREE_TYPE (ref),\n-\t\t\t    TREE_TYPE (addr.offset), &addr, false);\n-  copy_mem_ref_info (ret, ref);\n-  return ret;\n+  new_ref = create_mem_ref_raw (TREE_TYPE (ref),\n+\t\t\t        TREE_TYPE (addr.offset), &addr, false);\n+  TREE_SIDE_EFFECTS (new_ref) = TREE_SIDE_EFFECTS (ref);\n+  TREE_THIS_VOLATILE (new_ref) = TREE_THIS_VOLATILE (ref);\n+  return new_ref;\n }\n \n /* Dump PARTS to FILE.  */"}, {"sha": "ac5353905df811a37dfb4fa076cb66e8dd77468e", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc1ef37ec3af1dfbd44030256f1405396188e23/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc1ef37ec3af1dfbd44030256f1405396188e23/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=1fc1ef37ec3af1dfbd44030256f1405396188e23", "patch": "@@ -638,29 +638,22 @@ outermost_indep_loop (struct loop *outer, struct loop *loop, mem_ref_p ref)\n static tree *\n simple_mem_ref_in_stmt (gimple stmt, bool *is_store)\n {\n-  tree *lhs;\n-  enum tree_code code;\n+  tree *lhs, *rhs;\n \n-  /* Recognize MEM = (SSA_NAME | invariant) and SSA_NAME = MEM patterns.  */\n-  if (gimple_code (stmt) != GIMPLE_ASSIGN)\n+  /* Recognize SSA_NAME = MEM and MEM = (SSA_NAME | invariant) patterns.  */\n+  if (!gimple_assign_single_p (stmt))\n     return NULL;\n \n-  code = gimple_assign_rhs_code (stmt);\n-\n   lhs = gimple_assign_lhs_ptr (stmt);\n+  rhs = gimple_assign_rhs1_ptr (stmt);\n \n-  if (TREE_CODE (*lhs) == SSA_NAME)\n+  if (TREE_CODE (*lhs) == SSA_NAME && gimple_vuse (stmt))\n     {\n-      if (get_gimple_rhs_class (code) != GIMPLE_SINGLE_RHS\n-\t  || !is_gimple_addressable (gimple_assign_rhs1 (stmt)))\n-\treturn NULL;\n-\n       *is_store = false;\n-      return gimple_assign_rhs1_ptr (stmt);\n+      return rhs;\n     }\n-  else if (code == SSA_NAME\n-\t   || (get_gimple_rhs_class (code) == GIMPLE_SINGLE_RHS\n-\t       && is_gimple_min_invariant (gimple_assign_rhs1 (stmt))))\n+  else if (gimple_vdef (stmt)\n+\t   && (TREE_CODE (*rhs) == SSA_NAME || is_gimple_min_invariant (*rhs)))\n     {\n       *is_store = true;\n       return lhs;"}, {"sha": "1217cc008dee2b4ece3b4f8db6fe7ac2891ca11e", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc1ef37ec3af1dfbd44030256f1405396188e23/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc1ef37ec3af1dfbd44030256f1405396188e23/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1fc1ef37ec3af1dfbd44030256f1405396188e23", "patch": "@@ -6266,7 +6266,6 @@ tree target_for_debug_bind (tree);\n \n /* In tree-ssa-address.c.  */\n extern tree tree_mem_ref_addr (tree, tree);\n-extern void copy_mem_ref_info (tree, tree);\n extern void copy_ref_info (tree, tree);\n \n /* In tree-vrp.c */"}]}