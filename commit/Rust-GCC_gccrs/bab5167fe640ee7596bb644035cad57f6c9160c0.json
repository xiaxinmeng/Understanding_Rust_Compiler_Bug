{"sha": "bab5167fe640ee7596bb644035cad57f6c9160c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFiNTE2N2ZlNjQwZWU3NTk2YmI2NDQwMzVjYWQ1N2Y2YzkxNjBjMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-17T02:41:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-17T02:41:22Z"}, "message": "re PR c++/54277 (Template class member referred to with implicit this inside lambda is incorrectly const-qualified)\n\n\tPR c++/54277\n\t* cp-tree.h (WILDCARD_TYPE_P): Split out from...\n\t(MAYBE_CLASS_TYPE_P): ...here.\n\t* semantics.c (lambda_capture_field_type): Only build a\n\tmagic decltype for wildcard types.\n\t(lambda_proxy_type): Likewise.\n\t(finish_non_static_data_member): Get the quals from\n\tthe object.\n\nFrom-SVN: r196747", "tree": {"sha": "4260d93a9ab8a461ec2d417499b6687d36124630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4260d93a9ab8a461ec2d417499b6687d36124630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bab5167fe640ee7596bb644035cad57f6c9160c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab5167fe640ee7596bb644035cad57f6c9160c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab5167fe640ee7596bb644035cad57f6c9160c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab5167fe640ee7596bb644035cad57f6c9160c0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d14d53ad6501853b2471ad90ead6eace803226a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14d53ad6501853b2471ad90ead6eace803226a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d14d53ad6501853b2471ad90ead6eace803226a7"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "ec7cd0f55e18d6ed43cf3690e2fcc0062f939d3b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab5167fe640ee7596bb644035cad57f6c9160c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab5167fe640ee7596bb644035cad57f6c9160c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bab5167fe640ee7596bb644035cad57f6c9160c0", "patch": "@@ -1,5 +1,14 @@\n 2013-03-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/54277\n+\t* cp-tree.h (WILDCARD_TYPE_P): Split out from...\n+\t(MAYBE_CLASS_TYPE_P): ...here.\n+\t* semantics.c (lambda_capture_field_type): Only build a\n+\tmagic decltype for wildcard types.\n+\t(lambda_proxy_type): Likewise.\n+\t(finish_non_static_data_member): Get the quals from\n+\tthe object.\n+\n \tPR c++/55931\n \t* parser.c (cp_parser_template_argument): Don't\n \tfold_non_dependent_expr."}, {"sha": "7ce1acb06d70f85ecaeb137951e049c9a4d736d4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab5167fe640ee7596bb644035cad57f6c9160c0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab5167fe640ee7596bb644035cad57f6c9160c0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bab5167fe640ee7596bb644035cad57f6c9160c0", "patch": "@@ -1220,17 +1220,20 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n /* The _DECL for this _TYPE.  */\n #define TYPE_MAIN_DECL(NODE) (TYPE_STUB_DECL (TYPE_MAIN_VARIANT (NODE)))\n \n-/* Nonzero if T is a class (or struct or union) type.  Also nonzero\n-   for template type parameters, typename types, and instantiated\n-   template template parameters.  Keep these checks in ascending code\n-   order.  */\n-#define MAYBE_CLASS_TYPE_P(T)\t\t\t\t\t\\\n+/* Nonzero if T is a type that could resolve to any kind of concrete type\n+   at instantiation time.  */\n+#define WILDCARD_TYPE_P(T)\t\t\t\t\\\n   (TREE_CODE (T) == TEMPLATE_TYPE_PARM\t\t\t\\\n    || TREE_CODE (T) == TYPENAME_TYPE\t\t\t\\\n    || TREE_CODE (T) == TYPEOF_TYPE\t\t\t\\\n    || TREE_CODE (T) == BOUND_TEMPLATE_TEMPLATE_PARM\t\\\n-   || TREE_CODE (T) == DECLTYPE_TYPE\t\t\t\\\n-   || CLASS_TYPE_P (T))\n+   || TREE_CODE (T) == DECLTYPE_TYPE)\n+\n+/* Nonzero if T is a class (or struct or union) type.  Also nonzero\n+   for template type parameters, typename types, and instantiated\n+   template template parameters.  Keep these checks in ascending code\n+   order.  */\n+#define MAYBE_CLASS_TYPE_P(T) (WILDCARD_TYPE_P (T) || CLASS_TYPE_P (T))\n \n /* Set CLASS_TYPE_P for T to VAL.  T must be a class, struct, or\n    union type.  */"}, {"sha": "5143e4bd5822b0985e1fac3087a32985f2cc8c29", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab5167fe640ee7596bb644035cad57f6c9160c0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab5167fe640ee7596bb644035cad57f6c9160c0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=bab5167fe640ee7596bb644035cad57f6c9160c0", "patch": "@@ -1574,9 +1574,7 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n       else\n \t{\n \t  /* Set the cv qualifiers.  */\n-\t  int quals = (current_class_ref\n-\t\t       ? cp_type_quals (TREE_TYPE (current_class_ref))\n-\t\t       : TYPE_UNQUALIFIED);\n+\t  int quals = cp_type_quals (TREE_TYPE (object));\n \n \t  if (DECL_MUTABLE_P (decl))\n \t    quals &= ~TYPE_QUAL_CONST;\n@@ -9056,7 +9054,7 @@ tree\n lambda_capture_field_type (tree expr)\n {\n   tree type;\n-  if (type_dependent_expression_p (expr))\n+  if (!TREE_TYPE (expr) || WILDCARD_TYPE_P (TREE_TYPE (expr)))\n     {\n       type = cxx_make_type (DECLTYPE_TYPE);\n       DECLTYPE_TYPE_EXPR (type) = expr;\n@@ -9265,7 +9263,7 @@ lambda_proxy_type (tree ref)\n   if (REFERENCE_REF_P (ref))\n     ref = TREE_OPERAND (ref, 0);\n   type = TREE_TYPE (ref);\n-  if (!dependent_type_p (type))\n+  if (type && !WILDCARD_TYPE_P (type))\n     return type;\n   type = cxx_make_type (DECLTYPE_TYPE);\n   DECLTYPE_TYPE_EXPR (type) = ref;"}, {"sha": "07ddd0863de290cb52230fca77d70c62840c78f4", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-this9.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab5167fe640ee7596bb644035cad57f6c9160c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab5167fe640ee7596bb644035cad57f6c9160c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this9.C?ref=bab5167fe640ee7596bb644035cad57f6c9160c0", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/54277\n+// { dg-do compile { target c++11 } }\n+\n+struct Used\n+{\n+  void foo() { }\n+};\n+\n+template <typename>\n+struct S\n+{\n+  Used x;\n+\n+  void bar()\n+  {\n+    auto f = [this] { x.foo(); };\n+    f();\n+  }\n+};"}]}