{"sha": "db4fd626ee2bb431adadddf5eca5fba104cea5ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0ZmQ2MjZlZTJiYjQzMWFkYWRkZGY1ZWNhNWZiYTEwNGNlYTVjYQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-12-19T16:12:17Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-12-19T16:12:17Z"}, "message": "c/c++, asm: Use nicer error for duplicate asm qualifiers\n\nAlso as suggested by Jason.\n\n\nc/\n\t* c-parser.c (c_parser_asm_statement): Keep track of the location each\n\tasm qualifier is first seen; use that to give nicer \"duplicate asm\n\tqualifier\" messages.  Delete 'quals\" variable, instead pass the\n\t\"is_volatile_ flag to build_asm_stmt directly.\n\t* c-tree.h (build_asm_stmt): Make the first arg bool instead of tree.\n\t* c-typeck.c (build_asm_stmt): Ditto; adjust.\n\ncp/\n\t* parser.c (cp_parser_asm_definition): Rewrite the loop to work without\n\t\"done\" boolean variable.\n\t* parser.c (cp_parser_asm_definition): Keep track of the location each\n\tasm qualifier is first seen; use that to give nicer \"duplicate asm\n\tqualifier\" messages.\n\nFrom-SVN: r267278", "tree": {"sha": "1a0695e86a028584e80b85b341d91e2c3755519c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a0695e86a028584e80b85b341d91e2c3755519c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db4fd626ee2bb431adadddf5eca5fba104cea5ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4fd626ee2bb431adadddf5eca5fba104cea5ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4fd626ee2bb431adadddf5eca5fba104cea5ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4fd626ee2bb431adadddf5eca5fba104cea5ca/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c9cfcbbbe659d16a216883ff9a9bcb098e243f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0"}], "stats": {"total": 125, "additions": 90, "deletions": 35}, "files": [{"sha": "52b2c65ce8157716b98c78ab53ca75c2a8b9743f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=db4fd626ee2bb431adadddf5eca5fba104cea5ca", "patch": "@@ -1,3 +1,12 @@\n+2018-12-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* c-parser.c (c_parser_asm_statement): Keep track of the location each\n+\tasm qualifier is first seen; use that to give nicer \"duplicate asm\n+\tqualifier\" messages.  Delete 'quals\" variable, instead pass the\n+\t\"is_volatile_ flag to build_asm_stmt directly.\n+\t* c-tree.h (build_asm_stmt): Make the first arg bool instead of tree.\n+\t* c-typeck.c (build_asm_stmt): Ditto; adjust.\n+\n 2018-12-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* c-parser.c (c_parser_asm_statement): Rewrite the loop to work without"}, {"sha": "652e53ca0258beb56b78b996be25ea036f863136", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=db4fd626ee2bb431adadddf5eca5fba104cea5ca", "patch": "@@ -6360,41 +6360,54 @@ c_parser_for_statement (c_parser *parser, bool ivdep, unsigned short unroll,\n static tree\n c_parser_asm_statement (c_parser *parser)\n {\n-  tree quals, str, outputs, inputs, clobbers, labels, ret;\n-  bool simple, is_volatile, is_inline, is_goto;\n+  tree str, outputs, inputs, clobbers, labels, ret;\n+  bool simple;\n   location_t asm_loc = c_parser_peek_token (parser)->location;\n   int section, nsections;\n \n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_ASM));\n   c_parser_consume_token (parser);\n \n-  quals = NULL_TREE;\n-  is_volatile = false;\n-  is_inline = false;\n-  is_goto = false;\n+  /* Handle the asm-qualifier-list.  */\n+  location_t volatile_loc = UNKNOWN_LOCATION;\n+  location_t inline_loc = UNKNOWN_LOCATION;\n+  location_t goto_loc = UNKNOWN_LOCATION;\n   for (;;)\n     {\n-      switch (c_parser_peek_token (parser)->keyword)\n+      c_token *token = c_parser_peek_token (parser);\n+      location_t loc = token->location;\n+      switch (token->keyword)\n \t{\n \tcase RID_VOLATILE:\n-\t  if (is_volatile)\n-\t    break;\n-\t  is_volatile = true;\n-\t  quals = c_parser_peek_token (parser)->value;\n+\t  if (volatile_loc)\n+\t    {\n+\t      error_at (loc, \"duplicate asm qualifier %qE\", token->value);\n+\t      inform (volatile_loc, \"first seen here\");\n+\t    }\n+\t  else\n+\t    volatile_loc = loc;\n \t  c_parser_consume_token (parser);\n \t  continue;\n \n \tcase RID_INLINE:\n-\t  if (is_inline)\n-\t    break;\n-\t  is_inline = true;\n+\t  if (inline_loc)\n+\t    {\n+\t      error_at (loc, \"duplicate asm qualifier %qE\", token->value);\n+\t      inform (inline_loc, \"first seen here\");\n+\t    }\n+\t  else\n+\t    inline_loc = loc;\n \t  c_parser_consume_token (parser);\n \t  continue;\n \n \tcase RID_GOTO:\n-\t  if (is_goto)\n-\t    break;\n-\t  is_goto = true;\n+\t  if (goto_loc)\n+\t    {\n+\t      error_at (loc, \"duplicate asm qualifier %qE\", token->value);\n+\t      inform (goto_loc, \"first seen here\");\n+\t    }\n+\t  else\n+\t    goto_loc = loc;\n \t  c_parser_consume_token (parser);\n \t  continue;\n \n@@ -6404,6 +6417,10 @@ c_parser_asm_statement (c_parser *parser)\n       break;\n     }\n \n+  bool is_volatile = (volatile_loc != UNKNOWN_LOCATION);\n+  bool is_inline = (inline_loc != UNKNOWN_LOCATION);\n+  bool is_goto = (goto_loc != UNKNOWN_LOCATION);\n+\n   /* ??? Follow the C++ parser rather than using the\n      lex_untranslated_string kludge.  */\n   parser->lex_untranslated_string = true;\n@@ -6478,9 +6495,9 @@ c_parser_asm_statement (c_parser *parser)\n   if (!c_parser_require (parser, CPP_SEMICOLON, \"expected %<;%>\"))\n     c_parser_skip_to_end_of_block_or_statement (parser);\n \n-  ret = build_asm_stmt (quals, build_asm_expr (asm_loc, str, outputs, inputs,\n-\t\t\t\t\t       clobbers, labels, simple,\n-\t\t\t\t\t       is_inline));\n+  ret = build_asm_stmt (is_volatile,\n+\t\t\tbuild_asm_expr (asm_loc, str, outputs, inputs,\n+\t\t\t\t\tclobbers, labels, simple, is_inline));\n \n  error:\n   parser->lex_untranslated_string = false;"}, {"sha": "dc9e3cd587dd28b125c38ee5df63ec36efeac08a", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=db4fd626ee2bb431adadddf5eca5fba104cea5ca", "patch": "@@ -679,7 +679,7 @@ extern tree c_start_case (location_t, location_t, tree, bool);\n extern void c_finish_case (tree, tree);\n extern tree build_asm_expr (location_t, tree, tree, tree, tree, tree, bool,\n \t\t\t    bool);\n-extern tree build_asm_stmt (tree, tree);\n+extern tree build_asm_stmt (bool, tree);\n extern int c_types_compatible_p (tree, tree);\n extern tree c_begin_compound_stmt (bool);\n extern tree c_end_compound_stmt (location_t, tree, bool);"}, {"sha": "1ae5ede81e603f61c0fbf0fad6893df1a0f0cbc4", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=db4fd626ee2bb431adadddf5eca5fba104cea5ca", "patch": "@@ -10316,9 +10316,9 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n    (guaranteed to be 'volatile' or null) and ARGS (represented using\n    an ASM_EXPR node).  */\n tree\n-build_asm_stmt (tree cv_qualifier, tree args)\n+build_asm_stmt (bool is_volatile, tree args)\n {\n-  if (!ASM_VOLATILE_P (args) && cv_qualifier)\n+  if (is_volatile)\n     ASM_VOLATILE_P (args) = 1;\n   return add_stmt (args);\n }"}, {"sha": "eb54a5250dc3575af59fd934558d57c11652eee8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db4fd626ee2bb431adadddf5eca5fba104cea5ca", "patch": "@@ -1,3 +1,11 @@\n+2018-12-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* parser.c (cp_parser_asm_definition): Rewrite the loop to work without\n+\t\"done\" boolean variable.\n+\t* parser.c (cp_parser_asm_definition): Keep track of the location each\n+\tasm qualifier is first seen; use that to give nicer \"duplicate asm\n+\tqualifier\" messages.\n+\n 2018-12-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* parser.c (cp_parser_asm_definition): Rewrite the loop to work without"}, {"sha": "b860fc4d2dc88066df8a26058fe56ee3b026c8e8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4fd626ee2bb431adadddf5eca5fba104cea5ca/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=db4fd626ee2bb431adadddf5eca5fba104cea5ca", "patch": "@@ -19680,12 +19680,9 @@ cp_parser_asm_definition (cp_parser* parser)\n   tree clobbers = NULL_TREE;\n   tree labels = NULL_TREE;\n   tree asm_stmt;\n-  bool volatile_p = false;\n   bool extended_p = false;\n   bool invalid_inputs_p = false;\n   bool invalid_outputs_p = false;\n-  bool inline_p = false;\n-  bool goto_p = false;\n   required_token missing = RT_NONE;\n \n   /* Look for the `asm' keyword.  */\n@@ -19699,29 +19696,50 @@ cp_parser_asm_definition (cp_parser* parser)\n     }\n \n   /* Handle the asm-qualifier-list.  */\n+  location_t volatile_loc = UNKNOWN_LOCATION;\n+  location_t inline_loc = UNKNOWN_LOCATION;\n+  location_t goto_loc = UNKNOWN_LOCATION;\n   if (cp_parser_allow_gnu_extensions_p (parser))\n     for (;;)\n       {\n+\tcp_token *token = cp_lexer_peek_token (parser->lexer);\n+\tlocation_t loc = token->location;\n \tswitch (cp_lexer_peek_token (parser->lexer)->keyword)\n \t  {\n \t  case RID_VOLATILE:\n-\t    if (volatile_p)\n-\t      break;\n-\t    volatile_p = true;\n+\t    if (volatile_loc)\n+\t      {\n+\t\terror_at (loc, \"duplicate asm qualifier %qT\", token->u.value);\n+\t\tinform (volatile_loc, \"first seen here\");\n+\t      }\n+\t    else\n+\t      volatile_loc = loc;\n \t    cp_lexer_consume_token (parser->lexer);\n \t    continue;\n \n \t  case RID_INLINE:\n-\t    if (inline_p || !parser->in_function_body)\n+\t    if (!parser->in_function_body)\n \t      break;\n-\t    inline_p = true;\n+\t    if (inline_loc)\n+\t      {\n+\t\terror_at (loc, \"duplicate asm qualifier %qT\", token->u.value);\n+\t\tinform (inline_loc, \"first seen here\");\n+\t      }\n+\t    else\n+\t      inline_loc = loc;\n \t    cp_lexer_consume_token (parser->lexer);\n \t    continue;\n \n \t  case RID_GOTO:\n-\t    if (goto_p || !parser->in_function_body)\n+\t    if (!parser->in_function_body)\n \t      break;\n-\t    goto_p = true;\n+\t    if (goto_loc)\n+\t      {\n+\t\terror_at (loc, \"duplicate asm qualifier %qT\", token->u.value);\n+\t\tinform (goto_loc, \"first seen here\");\n+\t      }\n+\t    else\n+\t      goto_loc = loc;\n \t    cp_lexer_consume_token (parser->lexer);\n \t    continue;\n \n@@ -19731,6 +19749,10 @@ cp_parser_asm_definition (cp_parser* parser)\n \tbreak;\n       }\n \n+  bool volatile_p = (volatile_loc != UNKNOWN_LOCATION);\n+  bool inline_p = (inline_loc != UNKNOWN_LOCATION);\n+  bool goto_p = (goto_loc != UNKNOWN_LOCATION);\n+\n   /* Look for the opening `('.  */\n   if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))\n     return;\n@@ -19822,8 +19844,7 @@ cp_parser_asm_definition (cp_parser* parser)\n \t\t\t\t\t     CPP_CLOSE_PAREN))\n \t    clobbers = cp_parser_asm_clobber_list (parser);\n \t}\n-      else if (goto_p\n-\t       && cp_lexer_next_token_is (parser->lexer, CPP_SCOPE))\n+      else if (goto_p && cp_lexer_next_token_is (parser->lexer, CPP_SCOPE))\n \t/* The labels are coming next.  */\n \tlabels_p = true;\n "}]}