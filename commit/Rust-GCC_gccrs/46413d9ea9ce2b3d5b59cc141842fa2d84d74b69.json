{"sha": "46413d9ea9ce2b3d5b59cc141842fa2d84d74b69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY0MTNkOWVhOWNlMmIzZDViNTljYzE0MTg0MmZhMmQ4NGQ3NGI2OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-30T15:02:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-30T15:02:09Z"}, "message": "[multiple changes]\n\n2015-01-30  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_attr.adb (Declared_Within_Generic_Unit):\n\tNew function to test whether an entity is declared within the\n\tdeclarative region of a given generic unit.\n\t(Resolve_Attribute): For checking legality of subprogram'Access within\n\ta generic unit, call new Boolean function Declared_Within_Generic_Unit\n\tinstead of simply comparing the results of Enclosing_Generic_Unit on\n\tthe prefix and access type.  Correct minor comment typos.\n\n2015-01-30  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb, exp_util.ads: Update comment.\n\t* exp_util.adb, exp_ch3.adb: Minor code reorganization and reformatting.\n\t* sem_util.adb: Minor: fix typo.\n\nFrom-SVN: r220283", "tree": {"sha": "e48c2b681e5c32c9404cc3ce75e263ddf4abeebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e48c2b681e5c32c9404cc3ce75e263ddf4abeebf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/comments", "author": null, "committer": null, "parents": [{"sha": "48b0da2d24cfd3c918f85007e569f69ccd4cf1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4"}], "stats": {"total": 98, "additions": 77, "deletions": 21}, "files": [{"sha": "593ea391f60a4f9e61509beea4c1402cf38a5a2a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=46413d9ea9ce2b3d5b59cc141842fa2d84d74b69", "patch": "@@ -1,3 +1,19 @@\n+2015-01-30  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_attr.adb (Declared_Within_Generic_Unit):\n+\tNew function to test whether an entity is declared within the\n+\tdeclarative region of a given generic unit.\n+\t(Resolve_Attribute): For checking legality of subprogram'Access within\n+\ta generic unit, call new Boolean function Declared_Within_Generic_Unit\n+\tinstead of simply comparing the results of Enclosing_Generic_Unit on\n+\tthe prefix and access type.  Correct minor comment typos.\n+\n+2015-01-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb, exp_util.ads: Update comment.\n+\t* exp_util.adb, exp_ch3.adb: Minor code reorganization and reformatting.\n+\t* sem_util.adb: Minor: fix typo.\n+\n 2015-01-30  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_attr.adb (Analyze_Attribute): Ensure that"}, {"sha": "f2fd707b28206c5b64e9e4c346c7e8fab5c761ca", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=46413d9ea9ce2b3d5b59cc141842fa2d84d74b69", "patch": "@@ -1138,13 +1138,12 @@ package body Exp_Ch3 is\n               or else Frontend_Layout_On_Target\n             then\n                Func_Id := Build_Dcheck_Function (Discr_Name, Variant);\n+\n                Decl :=\n                  First_Non_Pragma (Component_Items (Component_List_Node));\n-\n                while Present (Decl) loop\n                   Set_Discriminant_Checking_Func\n                     (Defining_Identifier (Decl), Func_Id);\n-\n                   Next_Non_Pragma (Decl);\n                end loop;\n \n@@ -1492,11 +1491,10 @@ package body Exp_Ch3 is\n          return Empty_List;\n       end if;\n \n-      Full_Type := Typ;\n-\n       --  Use the [underlying] full view when dealing with a private type. This\n       --  may require several steps depending on derivations.\n \n+      Full_Type := Typ;\n       loop\n          if Is_Private_Type (Full_Type) then\n             if Present (Full_View (Full_Type)) then\n@@ -1594,7 +1592,6 @@ package body Exp_Ch3 is\n \n       if Has_Discriminants (Full_Init_Type) then\n          Discr := First_Discriminant (Full_Init_Type);\n-\n          while Present (Discr) loop\n \n             --  If this is a discriminated concurrent type, the init_proc\n@@ -2395,14 +2392,16 @@ package body Exp_Ch3 is\n                      declare\n                         Parent_IP : constant Name_Id :=\n                                       Make_Init_Proc_Name (Etype (Rec_Ent));\n-                        Stmt      : Node_Id := First (Stmts);\n-                        IP_Call   : Node_Id := Empty;\n+                        Stmt      : Node_Id;\n+                        IP_Call   : Node_Id;\n                         IP_Stmts  : List_Id;\n \n                      begin\n                         --  Look for a call to the parent IP at the beginning\n                         --  of Stmts associated with the record extension\n \n+                        Stmt := First (Stmts);\n+                        IP_Call := Empty;\n                         while Present (Stmt) loop\n                            if Nkind (Stmt) = N_Procedure_Call_Statement\n                              and then Chars (Name (Stmt)) = Parent_IP\n@@ -3297,7 +3296,6 @@ package body Exp_Ch3 is\n             end if;\n \n             S := First (Constraints (C));\n-\n             while Present (S) loop\n                Number_Of_Constraints := Number_Of_Constraints + 1;\n                Next (S);\n@@ -3666,10 +3664,9 @@ package body Exp_Ch3 is\n                   Set_Itype (Ref, Etype (First_Index (Typ)));\n                   Append_Freeze_Action (Rec_Type, Ref);\n \n-                  Sub_Aggr := First (Expressions (Comp));\n-\n                   --  Recurse on nested arrays\n \n+                  Sub_Aggr := First (Expressions (Comp));\n                   while Present (Sub_Aggr) loop\n                      Collect_Itypes (Sub_Aggr);\n                      Next (Sub_Aggr);\n@@ -3810,7 +3807,7 @@ package body Exp_Ch3 is\n          Decl := First_Non_Pragma (Component_Items (Comp_List));\n          while Present (Decl) loop\n             if Nkind (Decl) = N_Component_Declaration then\n-               Id  := Defining_Identifier (Decl);\n+               Id := Defining_Identifier (Decl);\n \n                if Has_Invariants (Etype (Id))\n                  and then In_Open_Scopes (Scope (R_Type))\n@@ -6450,9 +6447,10 @@ package body Exp_Ch3 is\n       ---------------------\n \n       function Is_C_Derivation (Typ : Entity_Id) return Boolean is\n-         T : Entity_Id := Typ;\n+         T : Entity_Id;\n \n       begin\n+         T := Typ;\n          loop\n             if Is_CPP_Class (T)\n               or else Convention (T) = Convention_C\n@@ -7847,7 +7845,7 @@ package body Exp_Ch3 is\n \n             elsif Needs_Finalization (Desig_Type)\n               or else (Is_Incomplete_Type (Desig_Type)\n-                         and then No (Full_View (Desig_Type)))\n+                        and then No (Full_View (Desig_Type)))\n             then\n                Build_Finalization_Master (Def_Id);\n \n@@ -8850,7 +8848,6 @@ package body Exp_Ch3 is\n       Body_List := New_List;\n \n       Prim_Elmt := First_Elmt (Primitive_Operations (Tag_Typ));\n-\n       while Present (Prim_Elmt) loop\n          Subp := Node (Prim_Elmt);\n "}, {"sha": "ef463c28e8df5b6db1dc8ed7387af4a09364d27b", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=46413d9ea9ce2b3d5b59cc141842fa2d84d74b69", "patch": "@@ -2411,6 +2411,7 @@ package body Exp_Util is\n       if Is_Untagged_Derivation (Typ) then\n          if Is_Protected_Type (Typ) then\n             Utyp := Corresponding_Record_Type (Root_Type (Base_Type (Typ)));\n+\n          else\n             Utyp := Underlying_Type (Root_Type (Base_Type (Typ)));\n "}, {"sha": "b8c54fa5966adb9f92ab64ae97c053cdaa4575ad", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=46413d9ea9ce2b3d5b59cc141842fa2d84d74b69", "patch": "@@ -451,7 +451,8 @@ package Exp_Util is\n    --  class-wide).\n \n    function Finalize_Address (Typ : Entity_Id) return Entity_Id;\n-   --  Locate TSS primitive Finalize_Address in type Typ\n+   --  Locate TSS primitive Finalize_Address in type Typ. Return Empty if the\n+   --  subprogram is not available.\n \n    function Find_Interface_ADT\n      (T     : Entity_Id;"}, {"sha": "12154a0e75ad1b545d7c238b4ef84be628701082", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=46413d9ea9ce2b3d5b59cc141842fa2d84d74b69", "patch": "@@ -1798,6 +1798,12 @@ package body Freeze is\n             end;\n          end if;\n \n+         --  Historical note: We used to create a finalization master for an\n+         --  access type whose designated type is not controlled, but contains\n+         --  private controlled compoments. This form of post processing is no\n+         --  longer needed because the finalization master is now created when\n+         --  the access type is frozen (see Exp_Ch3.Freeze_Type).\n+\n          Next_Entity (E);\n       end loop;\n    end Freeze_All;"}, {"sha": "8ce79d80588aa88e51e696c1212f0a62bf6e6c7a", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=46413d9ea9ce2b3d5b59cc141842fa2d84d74b69", "patch": "@@ -9762,6 +9762,12 @@ package body Sem_Attr is\n       --  Error, or warning within an instance, if the static accessibility\n       --  rules of 3.10.2 are violated.\n \n+      function Declared_Within_Generic_Unit\n+        (Entity       : Entity_Id;\n+         Generic_Unit : Node_Id) return Boolean;\n+      --  Returns True if Declared_Entity is declared within the declarative\n+      --  region of Generic_Unit; otherwise returns False.\n+\n       ---------------------------\n       -- Accessibility_Message --\n       ---------------------------\n@@ -9811,6 +9817,33 @@ package body Sem_Attr is\n          end if;\n       end Accessibility_Message;\n \n+      ----------------------------------\n+      -- Declared_Within_Generic_Unit --\n+      ----------------------------------\n+\n+      function Declared_Within_Generic_Unit\n+        (Entity       : Entity_Id;\n+         Generic_Unit : Node_Id) return Boolean\n+      is\n+         Generic_Encloser : Node_Id := Enclosing_Generic_Unit (Entity);\n+\n+      begin\n+         while Present (Generic_Encloser) loop\n+            if Generic_Encloser = Generic_Unit then\n+               return True;\n+            end if;\n+\n+            --  We have to step to the scope of the generic's entity, because\n+            --  otherwise we'll just get back the same generic.\n+\n+            Generic_Encloser :=\n+              Enclosing_Generic_Unit\n+                (Scope (Defining_Entity (Generic_Encloser)));\n+         end loop;\n+\n+         return False;\n+      end Declared_Within_Generic_Unit;\n+\n    --  Start of processing for Resolve_Attribute\n \n    begin\n@@ -10058,11 +10091,11 @@ package body Sem_Attr is\n                   --  level of the actual type is not known). This restriction\n                   --  does not apply when the attribute type is an anonymous\n                   --  access-to-subprogram type. Note that this check was\n-                  --  revised by AI-229, because the originally Ada 95 rule\n+                  --  revised by AI-229, because the original Ada 95 rule\n                   --  was too lax. The original rule only applied when the\n                   --  subprogram was declared within the body of the generic,\n                   --  which allowed the possibility of dangling references).\n-                  --  The rule was also too strict in some case, in that it\n+                  --  The rule was also too strict in some cases, in that it\n                   --  didn't permit the access to be declared in the generic\n                   --  spec, whereas the revised rule does (as long as it's not\n                   --  a formal type).\n@@ -10106,13 +10139,15 @@ package body Sem_Attr is\n                   then\n                      --  The attribute type's ultimate ancestor must be\n                      --  declared within the same generic unit as the\n-                     --  subprogram is declared. The error message is\n+                     --  subprogram is declared (including within another\n+                     --  nested generic unit). The error message is\n                      --  specialized to say \"ancestor\" for the case where the\n                      --  access type is not its own ancestor, since saying\n                      --  simply \"access type\" would be very confusing.\n \n-                     if Enclosing_Generic_Unit (Entity (P)) /=\n-                          Enclosing_Generic_Unit (Root_Type (Btyp))\n+                     if not Declared_Within_Generic_Unit\n+                              (Root_Type (Btyp),\n+                               Enclosing_Generic_Unit (Entity (P)))\n                      then\n                         Error_Msg_N\n                           (\"''Access attribute not allowed in generic body\","}, {"sha": "a8767b850c3baa25769f1a1c1ba0debbea5f1dbd", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46413d9ea9ce2b3d5b59cc141842fa2d84d74b69/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=46413d9ea9ce2b3d5b59cc141842fa2d84d74b69", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}]}