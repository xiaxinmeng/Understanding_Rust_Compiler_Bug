{"sha": "ab065b4d759004950fca79cd18a9e186f74f8e0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIwNjViNGQ3NTkwMDQ5NTBmY2E3OWNkMThhOWUxODZmNzRmOGUwYQ==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-03-27T18:40:48Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-03-27T18:40:48Z"}, "message": "Classpath JDWP merge with upstream\n\nFrom-SVN: r123265", "tree": {"sha": "8f48f228a7624201f8cd8224b6b277e0d9d3305f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f48f228a7624201f8cd8224b6b277e0d9d3305f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab065b4d759004950fca79cd18a9e186f74f8e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab065b4d759004950fca79cd18a9e186f74f8e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab065b4d759004950fca79cd18a9e186f74f8e0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab065b4d759004950fca79cd18a9e186f74f8e0a/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "deb2378c1557f269b11464a9d73e0d384c4e4d79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb2378c1557f269b11464a9d73e0d384c4e4d79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb2378c1557f269b11464a9d73e0d384c4e4d79"}], "stats": {"total": 2672, "additions": 2243, "deletions": 429}, "files": [{"sha": "305ac4f2314b5f66ba40d6203b5311d12dd68e53", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,3 +1,144 @@\n+2007-03-27  Keith Seitz  <keiths@redhat.com>\n+\n+\tMerged from upstream:\n+\t2007-03-09  Kyle Galloway  <kgallowa@redhat.com>\n+\t* gnu/classpath/jdwp/exception/InvalidTagException.java: New file.\n+\t* gnu/classpath/jdwp/processor/ArrayReferenceCommandSet.java\n+\t(executeGetValues): Use Value type.\n+\t(exectureSetValues): Ditto.  \n+\t* gnu/classpath/jdwp/processor/ClassTypeCommandSet.java\n+\t(executeGetValues): Use Value type.\n+\t(executeSetValues): Ditto.\n+\t(invokeMethod): Record method return type.\n+\t* gnu/classpath/jdwp/processor/ObjectReferenceCommandSet.java\n+\t(executeGetValues): Use Value type.\n+\t(executeSetValues): Ditto.\n+\t* gnu/classpath/jdwp/processor/ReferenceTypeCommandSet.java\n+\t(executeGetValues): Use Value type.\n+\t* gnu/classpath/jdwp/processor/StackFrameCommandSet.java\n+\t(executeGetValues): Use Value type.\n+\t(executeSetValues): Ditto.\n+\t* gnu/classpath/jdwp/util/MethodResult.java: Add resType to store\n+\treturn type.\n+\t(getResultType): New Method.\n+\t(setResultType): Ditto.\n+\t* gnu/classpath/jdwp/util/Value.java: Remove.\n+\t* gnu/classpath/jdwp/value: New Package.\n+\t* gnu/classpath/jdwp/value/Value.java: New file.\n+\t* gnu/classpath/jdwp/value/BooleanValue.java: New file.\n+\t* gnu/classpath/jdwp/value/ByteValue.java: New file.\n+\t* gnu/classpath/jdwp/value/CharValue.java: New file.\n+\t* gnu/classpath/jdwp/value/DoubleValue.java: New file.\n+\t* gnu/classpath/jdwp/value/FloatValue.java: New file.\n+\t* gnu/classpath/jdwp/value/IntValue.java: New file.\n+\t* gnu/classpath/jdwp/value/LongValue.java: New file.\n+\t* gnu/classpath/jdwp/value/ObjectValue.java: New file.\n+\t* gnu/classpath/jdwp/value/ShortValue.java: New file.\n+\t* gnu/classpath/jdwp/value/StringValue.java: New file.\n+\t* gnu/classpath/jdwp/value/ValueFactory.java: New file.\n+\t* gnu/classpath/jdwp/value/VoidValue.java: New file.\n+\n+\t2007-02-28  Keith Seitz  <keiths@redhat.com>\n+\t* gnu/classpath/jdwp/processor/EventRequestCommandSet.java\n+\t(executeSet): Check if VM has capability for field access\n+\tor modification events.\n+\t* gnu/classpath/jdwp/processor/MethodCommandSet.java\n+\t(executeByteCodes): Check if VM has capability and\n+\timplement.\n+\t* gnu/classpath/jdwp/processor/ObjectReferenceCommandSet.java\n+\t(executeMonitorInfo): Likewise.\n+\t* gnu/classpath/jdwp/processor/ReferenceTypeCommandSet.java\n+\t(executeSourceDebugExtension): Likewise.\n+\t* gnu/classpath/jdwp/processor/StackFrameCommandSet.java\n+\t(executePopFrames): Likewise.\n+\t* gnu/classpath/jdwp/processor/ThreadReferenceCommandSet.java\n+\t(executeOwnedMonitors): Likewise.\n+\t(executeCurrentContendedMonitor): Likewise.\n+\t* gnu/classpath/jdwp/processor/VirtualMachineCommandSet.java\n+\t(executeCapabilities): Rewrite using new VMVirtualMachine\n+\tcapabilities.\n+\t(executeRedefineClasses): Check if VM has capability and\n+\timplement.\n+\t(executeSetDefaultStratum): Likewise.\n+\t* gnu/classpath/jdwp/util/MonitorInfo.java; New file.\n+\t* vm/reference/gnu/classpath/jdwp/VMVirtualMachine.java\n+\t(canWatchFieldModification): New class constant.\n+\t(canWatchFieldAccess): Likewise.\n+\t(canGetBytecodes): Likewise.\n+\t(canGetSyntheticAttribute): Likewise.\n+\t(canGetOwnedMonitorInfo): Likewise.\n+\t(canGetCurrentContendedMonitor): Likewise.\n+\t(canGetMonitorInfo): Likewise.\n+\t(canRedefineClasses): Likewise.\n+\t(canAddMethod): Likewise.\n+\t(canUnrestrictedlyRedefineClasses): Likewise.\n+\t(canPopFrames): Likewise.\n+\t(canUseInstanceFilters): Likewise.\n+\t(canGetSourceDebugExtension): Likewise.\n+\t(canRequestVMDeathEvent): Likewise.\n+\t(canSetDefaultStratum): Likewise.\n+\t(redefineClasses): New method.\n+\t(setDefaultStratum): Likewise.\n+\t(getSourceDebugExtension): Likewise.\n+\t(getBytecodes): Likewise.\n+\t(getMonitorInfo): Likewise.\n+\t(getOwnedMonitors): Likewise.\n+\t(getCurrentContendedMonitor): Likewise.\n+\t(popFrames): Likewise.\n+\n+\t2007-02-28  Keith Seitz  <keiths@redhat.com>\n+\t* gnu/classpath/jdwp/processor/MethodCommandSet.java\n+\t(executeLineTable): Use ReferenceTypeId instead of\n+\tClassReferenceTypeId.\n+\t(executeVariableTable): Likewise.\n+\t(executeVariableTableWithGeneric): Fix error message.\n+\t* gnu/classpath/jdwp/processor/ReferenceTypeCommandSet.java\n+\t(executeSignatureWithGeneric): Fix error message.\n+\t(executeFieldWithGeneric): Likewise.\n+\t(executeMethodsWithGeneric): Likewise.\n+\t* gnu/classpath/jdwp/processor/StackFrameCommandSet.java\n+\t(executeGetValues): Use ThreadId instead of ObjectId.\n+\t(executeSetValues): Likewise.\n+\t(executeThisObject): Likewise.\n+\n+\t2007-02-28  Kyle Galloway  <kgallowa@redhat.com>\n+\t* gnu/classpath/jdwp/id/NullObjectId.java: New class.\n+\t* gnu/classpath/jdwp/util/NullObject.java: New class.\n+\t* vm/reference/gnu/classpath/jdwp/VMIdManager.java\n+\t(getObjectId): Handle null object.\n+\t(get): Handle objectId of 0. \n+\n+\t2007-02-22  Keith Seitz  <keiths@redhat.ecom>\n+\t* vm/reference/gnu/classpath/jdwp/VMVirtualMachine.java\n+\t(getAllLoadedClassesCount): Remove.\n+\t(getAllLoadedClasses): Return a Collection.\n+\t* gnu/classpath/jdwp/processor/VirtualMachineCommandSet.java\n+\t(executeClassesBySignature): VMVirtualMachine.getAllLoadedClasses\n+\tnow returns Collection.\n+\t(executeAllClasses): Likewise.\n+\tGet size of return from Colleciton instead of calling\n+\tgetAllLoadedClassesCount.\n+\n+\t2007-02-22  Kyle Galloway  <kgallowa@redhat.com>\n+\t* gnu/classpath/jdwp/processor/StackFrameCommandSet.java \n+\t(executeGetValues): Pass a signature byte to VMFrame.getValue.\n+\t* vm/reference/gnu/classpath/jdwp/VMFrame.java (getValue): Add\n+\tsignature parameter.\n+\n+\t2007-02-02  Kyle Galloway  <kgallowa@redhat.com>\n+\t* gnu/classpath/jdwp/processor/StackFrameCommandSet.java\n+\t(executeGetValues): Changed getFrame to use a jlong to pass frameID.\n+\t(executeSetValues): Ditto.\n+\t(executeThisObject): Ditto.\n+\t* vm/reference/gnu/classpath/jdwp/VMFrame.java: Added thread field\n+\tand a constructor used to create VMFrames.\n+\t(getThread): New method.\n+\t* vm/reference/gnu/classpath/jdwp/VMVirtualMachine.java(getFrame):\n+\tChanged to take a long instead of a ByteBuffer to pass the frameID.\n+\n+\t2007-01-15  Kyle Galloway  <kgallowa@redhat.com>\n+\t* gnu/classpath/jdwp/exception/InvalidSlotException.java: New file.\n+\n 2007-03-26  Tom Tromey  <tromey@redhat.com>\n \n \t* doc/cp-tools.texinfo (gcjh Tool): Added more text."}, {"sha": "02ffa2413953a44fad8bd011e5bd2308202d0042", "filename": "libjava/classpath/gnu/classpath/jdwp/event/EventManager.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventManager.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,5 +1,5 @@\n /* EventManager.java -- event management and notification infrastructure\n-   Copyright (C) 2005, 2006 Free Software Foundation\n+   Copyright (C) 2005, 2006, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -39,6 +39,7 @@\n \n package gnu.classpath.jdwp.event;\n \n+import gnu.classpath.jdwp.Jdwp;\n import gnu.classpath.jdwp.VMVirtualMachine;\n import gnu.classpath.jdwp.exception.InvalidEventTypeException;\n import gnu.classpath.jdwp.exception.JdwpException;\n@@ -130,9 +131,10 @@ private EventManager ()\n     // only two: VM_INIT, VM_DEATH\n     try\n       {\n+\tbyte sp = (Jdwp.suspendOnStartup()\n+\t\t   ? EventRequest.SUSPEND_THREAD : EventRequest.SUSPEND_NONE);\n \trequestEvent (new EventRequest (0,\n-\t\t\t\t\tEventRequest.EVENT_VM_INIT,\n-\t\t\t\t\tEventRequest.SUSPEND_NONE));\n+\t\t\t\t\tEventRequest.EVENT_VM_INIT, sp));\n \trequestEvent (new EventRequest (0,\n \t\t\t\t\tEventRequest.EVENT_VM_DEATH,\n \t\t\t\t\tEventRequest.SUSPEND_NONE));"}, {"sha": "d18f6975ebf675520534df13de2572ee415ab078", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/StepFilter.java", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FStepFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FStepFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FStepFilter.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,5 +1,5 @@\n /* StepFilter.java -- a step filter\n-   Copyright (C) 2005 Free Software Foundation\n+   Copyright (C) 2005, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -39,6 +39,7 @@\n \n package gnu.classpath.jdwp.event.filters;\n \n+import gnu.classpath.jdwp.JdwpConstants;\n import gnu.classpath.jdwp.event.Event;\n import gnu.classpath.jdwp.exception.InvalidThreadException;\n import gnu.classpath.jdwp.id.ThreadId;\n@@ -48,6 +49,12 @@\n  * satisfy depth and size constraints. This modifier can only be used with\n  * step event kinds.\"\n  *\n+ * This \"filter\" is not really a filter. It is simply a way to communicate\n+ * stepping information in a convenient way between the JDWP backend and\n+ * the virtual machine.\n+ * \n+ * Consequently, this \"filter\" always matches.\n+ * \n  * @author Keith Seitz  (keiths@redhat.com)\n  */\n public class StepFilter\n@@ -115,7 +122,6 @@ public int getDepth ()\n    */\n   public boolean matches (Event event)\n   {\n-    // FIXME\n-    throw new RuntimeException (\"StepFilter.matches not implemented\");\n+    return true;\n   }\n }"}, {"sha": "1827edab9a629d39e48f3634097c64aa4548b512", "filename": "libjava/classpath/gnu/classpath/jdwp/exception/InvalidSlotException.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidSlotException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidSlotException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidSlotException.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,62 @@\n+/* InvalidSlotException.java -- an invalid variable slot exception\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.exception;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+/**\n+ * An exception thrown when an invalid Slot id is used by the debugger \n+ * (i.e. when trying to access a variable slot which doesn't exist).\n+ *\n+ * @author Kyle Galloway (kgallowa@redhat.com)\n+ */\n+public class InvalidSlotException\n+  extends JdwpException\n+{\n+  public InvalidSlotException(int slot)\n+  {\n+    super(JdwpConstants.Error.INVALID_SLOT, \"invalid slot: \" + slot);\n+  }\n+\n+  public InvalidSlotException(String msg)\n+  {\n+    super(JdwpConstants.Error.INVALID_SLOT, msg);\n+  }\n+}"}, {"sha": "738b5e7348bef0064fb4af03abaafeb0bd70eeb9", "filename": "libjava/classpath/gnu/classpath/jdwp/exception/InvalidTagException.java", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidTagException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidTagException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidTagException.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,57 @@\n+/* InvalidTagException.java -- an invalid type tag exception\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.exception;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+/**\n+ * An exception thrown when an invalid tag is used by\n+ * the debugger\n+ *\n+ * @author Kyle Galloway  (kgallowa@redhat.com)\n+ */\n+public class InvalidTagException\n+  extends JdwpException\n+{\n+  public InvalidTagException (byte tag)\n+  {\n+    super (JdwpConstants.Error.INVALID_TAG,\n+       \"invalid tag (\" + tag + \")\");\n+  }\n+}"}, {"sha": "c6af65223d5d0c4429f77e2b038240e5f60783af", "filename": "libjava/classpath/gnu/classpath/jdwp/exception/TypeMismatchException.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FTypeMismatchException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FTypeMismatchException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FTypeMismatchException.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,62 @@\n+/* TypeMismatchException.java -- mismatched type of local variable\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.exception;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+/**\n+ * An exception throw when attempting to access a local variable of the wrong\n+ * type.\n+ *\n+ * @author Kyle Galloway  (kgallowa@redhat.com)\n+ */\n+public class TypeMismatchException\n+  extends JdwpException\n+{\n+  public TypeMismatchException(byte tag)\n+  {\n+    super(JdwpConstants.Error.TYPE_MISMATCH, \"incorrect tag: \" + tag);\n+  }\n+\n+  public TypeMismatchException(String msg)\n+  {\n+    super(JdwpConstants.Error.TYPE_MISMATCH, msg);\n+  }\n+}"}, {"sha": "0e7b5e39cd814994154fa9b74e26d2a7b658aeb7", "filename": "libjava/classpath/gnu/classpath/jdwp/id/NullObjectId.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FNullObjectId.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FNullObjectId.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FNullObjectId.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,79 @@\n+/* NullObjectId.java -- special objectId for null values\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.id;\n+\n+import gnu.classpath.jdwp.exception.InvalidObjectException;\n+import gnu.classpath.jdwp.util.NullObject;\n+\n+import java.lang.ref.SoftReference;\n+\n+/**\n+ * This is a special case of an ObjectId.  When a varaible slot contains\n+ * null as its value, this is a valid value despite the fact that it does\n+ * not reference an object.  To represent this, this will always be the id\n+ * of the NullObject (0).\n+ *\n+ * @author Kyle Galloway  <kgallowa@redhat.com>\n+ */\n+public class NullObjectId\n+  extends ObjectId\n+{\n+  /**\n+   * The object class that this id represents\n+   */\n+  public static final Class typeClass = NullObject.class;\n+  \n+  /**\n+   * Constructs a new <code>NullObjectId</code>\n+   */\n+  public NullObjectId()\n+  {\n+    super();\n+    setId((long) 0);\n+    _reference = new SoftReference<NullObject>(new NullObject());\n+    try\n+      {\n+        disableCollection();\n+      }\n+    catch(InvalidObjectException ex)\n+      {\n+        //This will not happen\n+      }\n+  }\n+\n+}"}, {"sha": "0da0154d9d286c56c119c29a603a74139f1ec4ae", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ArrayReferenceCommandSet.java", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayReferenceCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayReferenceCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayReferenceCommandSet.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,6 +1,6 @@\n /* ArrayReferenceCommandSet.java -- class to implement the Array\n    Reference Command Set\n-   Copyright (C) 2005 Free Software Foundation\n+   Copyright (C) 2005, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -46,7 +46,8 @@\n import gnu.classpath.jdwp.exception.JdwpInternalErrorException;\n import gnu.classpath.jdwp.exception.NotImplementedException;\n import gnu.classpath.jdwp.id.ObjectId;\n-import gnu.classpath.jdwp.util.Value;\n+import gnu.classpath.jdwp.value.Value;\n+import gnu.classpath.jdwp.value.ValueFactory;\n \n import java.io.DataOutputStream;\n import java.io.IOException;\n@@ -150,11 +151,11 @@ else if (Class.class.isAssignableFrom(clazz))\n     // tagged\n     for (int i = first; i < first + length; i++)\n       {\n-        Object value = Array.get(array, i);\n+        Value val = ValueFactory.createFromObject(Array.get(array, i), clazz);\n         if (clazz.isPrimitive())\n-          Value.writeUntaggedValue(os, value);\n+          val.writeUntagged(os);\n         else\n-          Value.writeTaggedValue(os, value);\n+          val.writeTagged(os);\n       }\n   }\n \n@@ -168,7 +169,7 @@ private void executeSetValues(ByteBuffer bb, DataOutputStream os)\n     Class type = array.getClass().getComponentType();\n     for (int i = first; i < first + length; i++)\n       {\n-        Object value = Value.getUntaggedObj(bb, type);\n+        Object value = Value.getUntaggedObject(bb, type);\n         Array.set(array, i, value);\n       }\n   }"}, {"sha": "b29b5710f91e9ceea07bf3324bc70503298e52d0", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ClassTypeCommandSet.java", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,6 +1,6 @@\n /* ClassTypeCommandSet.java -- class to implement the ClassType\n    Command Set\n-   Copyright (C) 2005 Free Software Foundation\n+   Copyright (C) 2005, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -49,7 +49,8 @@\n import gnu.classpath.jdwp.id.ObjectId;\n import gnu.classpath.jdwp.id.ReferenceTypeId;\n import gnu.classpath.jdwp.util.MethodResult;\n-import gnu.classpath.jdwp.util.Value;\n+import gnu.classpath.jdwp.value.Value;\n+import gnu.classpath.jdwp.value.ValueFactory;\n \n import java.io.DataOutputStream;\n import java.io.IOException;\n@@ -128,7 +129,7 @@ private void executeSetValues(ByteBuffer bb, DataOutputStream os)\n       {\n         ObjectId fieldId = idMan.readObjectId(bb);\n         Field field = (Field) (fieldId.getObject());\n-        Object value = Value.getUntaggedObj(bb, field.getType());\n+        Object value = Value.getUntaggedObject(bb, field.getType());\n         try\n           {\n             field.setAccessible(true); // Might be a private field\n@@ -154,7 +155,8 @@ private void executeInvokeMethod(ByteBuffer bb, DataOutputStream os)\n     Exception exception = mr.getThrownException();\n     ObjectId eId = idMan.getObjectId(exception);\n \n-    Value.writeTaggedValue(os, value);\n+    Value val = ValueFactory.createFromObject(value, mr.getResultType());\n+    val.writeTagged(os);\n     eId.writeTagged(os);\n   }\n \n@@ -192,7 +194,7 @@ private MethodResult invokeMethod(ByteBuffer bb) throws JdwpException,\n \n     for (int i = 0; i < args; i++)\n       {\n-        values[i] = Value.getObj(bb);\n+        values[i] = Value.getTaggedObject(bb);\n       }\n \n     int invokeOpts = bb.getInt();\n@@ -207,6 +209,8 @@ private MethodResult invokeMethod(ByteBuffer bb) throws JdwpException,\n         MethodResult mr = VMVirtualMachine.executeMethod(null, thread,\n \t\t\t\t\t\t\t clazz, method,\n \t\t\t\t\t\t\t values, false);\n+        mr.setResultType(method.getReturnType());\n+        \n         if (suspend)\n \t  VMVirtualMachine.resumeAllThreads ();\n "}, {"sha": "d7ebbc3a358dd1d6891f3bd4d1530e75608ff767", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/EventRequestCommandSet.java", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FEventRequestCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FEventRequestCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FEventRequestCommandSet.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,6 +1,6 @@\n /* EventRequestCommandSet.java -- class to implement the EventRequest Command\n    Set\n-   Copyright (C) 2005 Free Software Foundation\n+   Copyright (C) 2005, 2007 Free Software Foundation\n  \n This file is part of GNU Classpath.\n \n@@ -40,6 +40,7 @@\n package gnu.classpath.jdwp.processor;\n \n import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.VMVirtualMachine;\n import gnu.classpath.jdwp.event.EventManager;\n import gnu.classpath.jdwp.event.EventRequest;\n import gnu.classpath.jdwp.event.filters.ClassExcludeFilter;\n@@ -113,6 +114,28 @@ private void executeSet(ByteBuffer bb, DataOutputStream os)\n     byte suspendPolicy = bb.get();\n     int modifiers = bb.getInt();\n \n+    switch (eventKind)\n+      {\n+\tcase JdwpConstants.EventKind.FIELD_ACCESS:\n+\tif (!VMVirtualMachine.canWatchFieldAccess)\n+\t  {\n+\t    String msg = \"watching field accesses is not supported\";\n+\t    throw new NotImplementedException(msg);\n+\t  }\n+\tbreak;\n+\n+\tcase JdwpConstants.EventKind.FIELD_MODIFICATION:\n+\tif (!VMVirtualMachine.canWatchFieldModification)\n+\t  {\n+\t    String msg = \"watching field modifications is not supported\";\n+\t    throw new NotImplementedException(msg);\n+\t  }\n+\tbreak;\n+\n+      default:\n+\t// okay\n+      }\n+\n     EventRequest eventReq = new EventRequest(eventKind, suspendPolicy);\n     IEventFilter filter = null;\n     ReferenceTypeId refId;"}, {"sha": "4d1bf709800564cfee7ccfa17007c22cc895ecf1", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/MethodCommandSet.java", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FMethodCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FMethodCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FMethodCommandSet.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,5 +1,5 @@\n /* MethodCommandSet.java -- class to implement the Method Command Set\n-   Copyright (C) 2005, 2006 Free Software Foundation\n+   Copyright (C) 2005, 2006, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -40,10 +40,11 @@\n \n import gnu.classpath.jdwp.JdwpConstants;\n import gnu.classpath.jdwp.VMMethod;\n+import gnu.classpath.jdwp.VMVirtualMachine;\n import gnu.classpath.jdwp.exception.JdwpException;\n import gnu.classpath.jdwp.exception.JdwpInternalErrorException;\n import gnu.classpath.jdwp.exception.NotImplementedException;\n-import gnu.classpath.jdwp.id.ClassReferenceTypeId;\n+import gnu.classpath.jdwp.id.ReferenceTypeId;\n import gnu.classpath.jdwp.util.LineTable;\n import gnu.classpath.jdwp.util.VariableTable;\n \n@@ -99,8 +100,7 @@ public boolean runCommand(ByteBuffer bb, DataOutputStream os, byte command)\n   private void executeLineTable(ByteBuffer bb, DataOutputStream os)\n       throws JdwpException, IOException\n   {\n-    ClassReferenceTypeId refId\n-      = (ClassReferenceTypeId) idMan.readReferenceTypeId(bb);\n+    ReferenceTypeId refId = idMan.readReferenceTypeId(bb);\n     Class clazz = refId.getType();\n \n     VMMethod method = VMMethod.readId(clazz, bb);\n@@ -111,8 +111,7 @@ private void executeLineTable(ByteBuffer bb, DataOutputStream os)\n   private void executeVariableTable(ByteBuffer bb, DataOutputStream os)\n       throws JdwpException, IOException\n   {\n-   ClassReferenceTypeId refId\n-     = (ClassReferenceTypeId) idMan.readReferenceTypeId(bb);\n+    ReferenceTypeId refId = idMan.readReferenceTypeId(bb);\n     Class clazz = refId.getType();\n \n     VMMethod method = VMMethod.readId(clazz, bb);\n@@ -121,11 +120,20 @@ private void executeVariableTable(ByteBuffer bb, DataOutputStream os)\n   }\n \n   private void executeByteCodes(ByteBuffer bb, DataOutputStream os)\n-      throws JdwpException\n+    throws JdwpException, IOException\n   {\n-    // This command is optional, determined by VirtualMachines CapabilitiesNew\n-    // so we'll leave it till later to implement\n-    throw new NotImplementedException(\"Command ByteCodes not implemented.\");\n+    if (!VMVirtualMachine.canGetBytecodes)\n+      {\n+\tString msg = \"getting bytecodes is unsupported\";\n+\tthrow new NotImplementedException(msg);\n+      }\n+\n+    ReferenceTypeId id = idMan.readReferenceTypeId(bb);\n+    Class klass = id.getType();\n+    VMMethod method = VMMethod.readId(klass, bb);\n+    byte[] bytecode = VMVirtualMachine.getBytecodes(method);\n+    os.writeInt(bytecode.length);\n+    os.write(bytecode);\n   }\n \n   private void executeIsObsolete(ByteBuffer bb, DataOutputStream os)\n@@ -143,7 +151,7 @@ private void executeVariableTableWithGeneric(ByteBuffer bb,\n   {\n     // We don't have generics yet\n     throw new NotImplementedException(\n-      \"Command SourceDebugExtension not implemented.\");\n+      \"Command VariableTableWithGeneric not implemented.\");\n   }\n \n }"}, {"sha": "ed83fd2f94b7c67b5c1efb33be614ed688b6d809", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ObjectReferenceCommandSet.java", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FObjectReferenceCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FObjectReferenceCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FObjectReferenceCommandSet.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,6 +1,6 @@\n /* ObjectReferenceCommandSet.java -- class to implement the ObjectReference\n    Command Set\n-   Copyright (C) 2005 Free Software Foundation\n+   Copyright (C) 2005, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -47,8 +47,10 @@\n import gnu.classpath.jdwp.exception.NotImplementedException;\n import gnu.classpath.jdwp.id.ObjectId;\n import gnu.classpath.jdwp.id.ReferenceTypeId;\n-import gnu.classpath.jdwp.util.Value;\n import gnu.classpath.jdwp.util.MethodResult;\n+import gnu.classpath.jdwp.util.MonitorInfo;\n+import gnu.classpath.jdwp.value.Value;\n+import gnu.classpath.jdwp.value.ValueFactory;\n \n import java.io.DataOutputStream;\n import java.io.IOException;\n@@ -137,7 +139,9 @@ private void executeGetValues(ByteBuffer bb, DataOutputStream os)\n           {\n             field.setAccessible(true); // Might be a private field\n             Object value = field.get(obj);\n-            Value.writeTaggedValue(os, value);\n+            Value val = ValueFactory.createFromObject(value, \n+                                                      field.getType());\n+            val.writeTagged(os);\n           }\n         catch (IllegalArgumentException ex)\n           {\n@@ -163,7 +167,7 @@ private void executeSetValues(ByteBuffer bb, DataOutputStream os)\n     for (int i = 0; i < numFields; i++)\n       {\n         Field field = (Field) idMan.readObjectId(bb).getObject();\n-        Object value = Value.getUntaggedObj(bb, field.getType());\n+        Object value = Value.getUntaggedObject(bb, field.getType());\n         try\n           {\n             field.setAccessible(true); // Might be a private field\n@@ -183,13 +187,18 @@ private void executeSetValues(ByteBuffer bb, DataOutputStream os)\n   }\n \n   private void executeMonitorInfo(ByteBuffer bb, DataOutputStream os)\n-    throws JdwpException\n+    throws JdwpException, IOException\n   {\n-    // This command is optional, determined by VirtualMachines CapabilitiesNew\n-    // so we'll leave it till later to implement\n-    throw new NotImplementedException(\n-      \"Command ExecuteMonitorInfo not implemented.\");\n+    if (!VMVirtualMachine.canGetMonitorInfo)\n+      {\n+\tString msg = \"getting monitor info not supported\";\n+\tthrow new NotImplementedException(msg);\n+      }\n \n+    ObjectId oid = idMan.readObjectId(bb);\n+    Object obj = oid.getObject();\n+    MonitorInfo info = VMVirtualMachine.getMonitorInfo(obj);\n+    info.write(os);\n   }\n \n   private void executeInvokeMethod(ByteBuffer bb, DataOutputStream os)\n@@ -212,7 +221,7 @@ private void executeInvokeMethod(ByteBuffer bb, DataOutputStream os)\n \n     for (int i = 0; i < args; i++)\n       {\n-        values[i] = Value.getObj(bb);\n+        values[i] = Value.getTaggedObject(bb);\n       }\n \n     int invokeOptions = bb.getInt();\n@@ -232,11 +241,14 @@ private void executeInvokeMethod(ByteBuffer bb, DataOutputStream os)\n     MethodResult mr = VMVirtualMachine.executeMethod(obj, thread,\n \t\t\t\t\t\t     clazz, method,\n \t\t\t\t\t\t     values, nonVirtual);\n+    mr.setResultType (method.getReturnType());\n+    \n     Object value = mr.getReturnedValue();\n     Exception exception = mr.getThrownException();\n \n     ObjectId eId = idMan.getObjectId(exception);\n-    Value.writeTaggedValue(os, value);\n+    Value val = ValueFactory.createFromObject(value, mr.getResultType());\n+    val.writeTagged(os);\n     eId.writeTagged(os);\n   }\n "}, {"sha": "8e8b74b9d438f86238e6c942333ff4e549ad2fe3", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ReferenceTypeCommandSet.java", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FReferenceTypeCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FReferenceTypeCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FReferenceTypeCommandSet.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,6 +1,6 @@\n /* ReferenceTypeCommandSet.java -- class to implement the ReferenceType\n    Command Set\n-   Copyright (C) 2005, 2006 Free Software Foundation\n+   Copyright (C) 2005, 2006, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -51,7 +51,8 @@\n import gnu.classpath.jdwp.id.ReferenceTypeId;\n import gnu.classpath.jdwp.util.JdwpString;\n import gnu.classpath.jdwp.util.Signature;\n-import gnu.classpath.jdwp.util.Value;\n+import gnu.classpath.jdwp.value.Value;\n+import gnu.classpath.jdwp.value.ValueFactory;\n \n import java.io.DataOutputStream;\n import java.io.IOException;\n@@ -220,7 +221,9 @@ private void executeGetValues(ByteBuffer bb, DataOutputStream os)\n               {\n                 field.setAccessible(true); // Might be a private field\n                 Object value = field.get(null);\n-                Value.writeTaggedValue(os, value);\n+                Value val = ValueFactory.createFromObject(value, \n+                                                          field.getType());\n+                val.writeTagged(os);\n               }\n             catch (IllegalArgumentException ex)\n               {\n@@ -303,33 +306,38 @@ private void executeClassObject(ByteBuffer bb, DataOutputStream os)\n   private void executeSourceDebugExtension(ByteBuffer bb, DataOutputStream os)\n     throws JdwpException, IOException\n   {\n-    // This command is optional, determined by VirtualMachines CapabilitiesNew\n-    // so we'll leave it till later to implement\n-    throw new NotImplementedException(\n-      \"Command SourceDebugExtension not implemented.\");\n+    if (!VMVirtualMachine.canGetSourceDebugExtension)\n+      {\n+\tString msg = \"source debug extension is not supported\";\n+\tthrow new NotImplementedException(msg);\n+      }\n+\n+    ReferenceTypeId id = idMan.readReferenceTypeId(bb);\n+    String ext = VMVirtualMachine.getSourceDebugExtension (id.getType());\n+    JdwpString.writeString(os, ext);\n   }\n \n   private void executeSignatureWithGeneric(ByteBuffer bb, DataOutputStream os)\n     throws JdwpException, IOException\n   {\n     // We don't have generics yet\n     throw new NotImplementedException(\n-      \"Command SourceDebugExtension not implemented.\");\n+      \"Command SignatureWithGeneric not implemented.\");\n   }\n \n   private void executeFieldWithGeneric(ByteBuffer bb, DataOutputStream os)\n     throws JdwpException, IOException\n   {\n     // We don't have generics yet\n     throw new NotImplementedException(\n-      \"Command SourceDebugExtension not implemented.\");\n+      \"Command executeFieldWithGeneric not implemented.\");\n   }\n \n   private void executeMethodsWithGeneric(ByteBuffer bb, DataOutputStream os)\n     throws JdwpException, IOException\n   {\n     // We don't have generics yet\n     throw new NotImplementedException(\n-      \"Command SourceDebugExtension not implemented.\");\n+      \"Command executeMethodsWithGeneric not implemented.\");\n   }\n }"}, {"sha": "2d90e8064ae56c9456a8a1a9954743f68ddd30c9", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/StackFrameCommandSet.java", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -45,8 +45,10 @@\n import gnu.classpath.jdwp.exception.JdwpException;\n import gnu.classpath.jdwp.exception.JdwpInternalErrorException;\n import gnu.classpath.jdwp.exception.NotImplementedException;\n-import gnu.classpath.jdwp.id.ObjectId;\n-import gnu.classpath.jdwp.util.Value;\n+import gnu.classpath.jdwp.id.ThreadId;\n+import gnu.classpath.jdwp.value.ObjectValue;\n+import gnu.classpath.jdwp.value.Value;\n+import gnu.classpath.jdwp.value.ValueFactory;\n \n import java.io.DataOutputStream;\n import java.io.IOException;\n@@ -98,8 +100,8 @@ public boolean runCommand(ByteBuffer bb, DataOutputStream os, byte command)\n   private void executeGetValues(ByteBuffer bb, DataOutputStream os)\n       throws JdwpException, IOException\n   {\n-    ObjectId tId = idMan.readObjectId(bb);\n-    Thread thread = (Thread) tId.getObject();\n+    ThreadId tId = (ThreadId) idMan.readObjectId(bb);\n+    Thread thread = tId.getThread();\n \n     // Although Frames look like other ids they are not. First they are not\n     // ObjectIds since they don't exist in the users code. Storing them as an\n@@ -115,16 +117,16 @@ private void executeGetValues(ByteBuffer bb, DataOutputStream os)\n       {\n         int slot = bb.getInt();\n         byte sig = bb.get();\n-        Object val = frame.getValue(slot);\n-        Value.writeTaggedValue(os, val);\n+        Value val = frame.getValue(slot, sig);\n+        val.writeTagged(os);\n       }\n   }\n \n   private void executeSetValues(ByteBuffer bb, DataOutputStream os)\n       throws JdwpException, IOException\n   {\n-    ObjectId tId = idMan.readObjectId(bb);\n-    Thread thread = (Thread) tId.getObject();\n+    ThreadId tId = (ThreadId) idMan.readObjectId(bb);\n+    Thread thread = tId.getThread();\n \n     long frameID = bb.getLong();\n     VMFrame frame = VMVirtualMachine.getFrame(thread, frameID);\n@@ -133,29 +135,36 @@ private void executeSetValues(ByteBuffer bb, DataOutputStream os)\n     for (int i = 0; i < slots; i++)\n       {\n         int slot = bb.getInt();\n-        Object value = Value.getObj(bb);\n+        Value value = ValueFactory.createFromTagged(bb);\n         frame.setValue(slot, value);\n       }\n   }\n \n   private void executeThisObject(ByteBuffer bb, DataOutputStream os)\n       throws JdwpException, IOException\n   {\n-    ObjectId tId = idMan.readObjectId(bb);\n-    Thread thread = (Thread) tId.getObject();\n+    ThreadId tId = (ThreadId) idMan.readObjectId(bb);\n+    Thread thread = tId.getThread();\n \n     long frameID = bb.getLong();\n     VMFrame frame = VMVirtualMachine.getFrame(thread, frameID);\n \n-    Object thisObject = frame.getObject();\n-    Value.writeTaggedValue(os, thisObject);\n+    ObjectValue objVal = new ObjectValue(frame.getObject());\n+    objVal.writeTagged(os);\n   }\n \n   private void executePopFrames(ByteBuffer bb, DataOutputStream os)\n-      throws JdwpException\n+    throws JdwpException, IOException\n   {\n-    // This command is optional, determined by VirtualMachines CapabilitiesNew\n-    // so we'll leave it till later to implement\n-    throw new NotImplementedException(\"Command PopFrames not implemented.\");\n+    if (!VMVirtualMachine.canPopFrames)\n+      {\n+\tString msg = \"popping frames is unsupported\";\n+\tthrow new NotImplementedException(msg);\n+      }\n+\n+    ThreadId tid = (ThreadId) idMan.readObjectId(bb);\n+    Thread thread = tid.getThread();\n+    long fid = bb.getLong();\n+    VMVirtualMachine.popFrames(thread, fid);\n   }\n }"}, {"sha": "0dd10200bf30400ee0513fb44c469f294d04ae99", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ThreadReferenceCommandSet.java", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadReferenceCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadReferenceCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadReferenceCommandSet.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,5 +1,5 @@\n /* ThreadReferenceCommandSet.java -- class to implement the ThreadReference\n-   Command Set Copyright (C) 2005 Free Software Foundation\n+   Command Set Copyright (C) 2005, 2007 Free Software Foundation\n  \n This file is part of GNU Classpath.\n \n@@ -198,22 +198,42 @@ private void executeFrameCount(ByteBuffer bb, DataOutputStream os)\n   }\n \n   private void executeOwnedMonitors(ByteBuffer bb, DataOutputStream os)\n-      throws JdwpException\n+    throws JdwpException, IOException\n   {\n-    // This command is optional, determined by VirtualMachines CapabilitiesNew\n-    // so we'll leave it till later to implement\n-    throw new NotImplementedException(\n-      \"Command OwnedMonitors not implemented.\");\n+    if (!VMVirtualMachine.canGetOwnedMonitorInfo)\n+      {\n+\tString msg = \"getting owned monitors is not supported\";\n+\tthrow new NotImplementedException(msg);\n+      }\n+\n+    ThreadId tid = (ThreadId) idMan.readObjectId(bb);\n+    Thread thread = tid.getThread();\n+    Object[] monitors = VMVirtualMachine.getOwnedMonitors(thread);\n+\n+    os.write(monitors.length);\n+    for (int i = 0; i < monitors.length; ++i)\n+      {\n+\tObjectId id = idMan.getObjectId(monitors[i]);\n+\tid.writeTagged(os);\n+      }\n   }\n \n   private void executeCurrentContendedMonitor(ByteBuffer bb,\n                                               DataOutputStream os)\n-      throws JdwpException\n+    throws JdwpException, IOException\n   {\n-    // This command is optional, determined by VirtualMachines CapabilitiesNew\n-    // so we'll leave it till later to implement\n-    throw new NotImplementedException(\n-      \"Command CurrentContentedMonitors not implemented.\");\n+    if (!VMVirtualMachine.canGetCurrentContendedMonitor)\n+      {\n+\tString msg = \"getting current contended monitor is not supported\";\n+\tthrow new NotImplementedException(msg);\n+      }\n+\n+    ThreadId tid = (ThreadId) idMan.readObjectId(bb);\n+    Thread thread = tid.getThread();\n+\n+    Object monitor = VMVirtualMachine.getCurrentContendedMonitor(thread);\n+    ObjectId id = idMan.getObjectId(monitor);\n+    id.writeTagged(os);\n   }\n \n   private void executeStop(ByteBuffer bb, DataOutputStream os)"}, {"sha": "e2703908ba24ce1879ec1aa8cdbf8766d6db5fce", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/VirtualMachineCommandSet.java", "status": "modified", "additions": 57, "deletions": 50, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FVirtualMachineCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FVirtualMachineCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FVirtualMachineCommandSet.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,6 +1,6 @@\n /* VirtualMachineCommandSet.java -- class to implement the VirtualMachine\n    Command Set\n-   Copyright (C) 2005, 2006 Free Software Foundation\n+   Copyright (C) 2005, 2006, 2007 Free Software Foundation\n  \n This file is part of GNU Classpath.\n \n@@ -54,6 +54,7 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Iterator;\n import java.util.Properties;\n \n@@ -179,7 +180,8 @@ private void executeClassesBySignature(ByteBuffer bb, DataOutputStream os)\n     ArrayList allMatchingClasses = new ArrayList();\n \n     // This will be an Iterator over all loaded Classes\n-    Iterator iter = VMVirtualMachine.getAllLoadedClasses();\n+    Collection classes = VMVirtualMachine.getAllLoadedClasses();\n+    Iterator iter = classes.iterator ();\n \n     while (iter.hasNext())\n       {\n@@ -203,22 +205,11 @@ private void executeClassesBySignature(ByteBuffer bb, DataOutputStream os)\n   private void executeAllClasses(ByteBuffer bb, DataOutputStream os)\n     throws JdwpException, IOException\n   {\n-    // Disable garbage collection while we're collecting the info on loaded\n-    // classes so we some classes don't get collected between the time we get\n-    // the count and the time we get the list\n-    //VMVirtualMachine.disableGarbageCollection();\n+    Collection classes = VMVirtualMachine.getAllLoadedClasses();\n+    os.writeInt(classes.size ());\n \n-    int classCount = VMVirtualMachine.getAllLoadedClassesCount();\n-    os.writeInt(classCount);\n-\n-    // This will be an Iterator over all loaded Classes\n-    Iterator iter = VMVirtualMachine.getAllLoadedClasses();\n-    //VMVirtualMachine.enableGarbageCollection();\n-    int count = 0;\n-\n-    // Note it's possible classes were created since out classCount so make\n-    // sure we don't write more classes than we told the debugger\n-    while (iter.hasNext() && count++ < classCount)\n+    Iterator iter = classes.iterator ();\n+    while (iter.hasNext())\n       {\n         Class clazz = (Class) iter.next();\n         ReferenceTypeId id = idMan.getReferenceTypeId(clazz);\n@@ -340,14 +331,13 @@ private void executeCreateString(ByteBuffer bb, DataOutputStream os)\n   private void executeCapabilities(ByteBuffer bb, DataOutputStream os)\n     throws JdwpException, IOException\n   {\n-    // Store these somewhere?\n-    os.writeBoolean(false); // canWatchFieldModification\n-    os.writeBoolean(false); // canWatchFieldAccess\n-    os.writeBoolean(false); // canGetBytecodes\n-    os.writeBoolean(false); // canGetSyntheticAttribute\n-    os.writeBoolean(false); // canGetOwnedMonitorInfo\n-    os.writeBoolean(false); // canGetCurrentContendedMonitor\n-    os.writeBoolean(false); // canGetMonitorInfo\n+    os.writeBoolean(VMVirtualMachine.canWatchFieldModification);\n+    os.writeBoolean(VMVirtualMachine.canWatchFieldAccess);\n+    os.writeBoolean(VMVirtualMachine.canGetBytecodes);\n+    os.writeBoolean(VMVirtualMachine.canGetSyntheticAttribute);\n+    os.writeBoolean(VMVirtualMachine.canGetOwnedMonitorInfo);\n+    os.writeBoolean(VMVirtualMachine.canGetCurrentContendedMonitor);\n+    os.writeBoolean(VMVirtualMachine.canGetMonitorInfo);\n   }\n \n   private void executeClassPaths(ByteBuffer bb, DataOutputStream os)\n@@ -401,43 +391,60 @@ private void executeReleaseEvents(ByteBuffer bb, DataOutputStream os)\n   private void executeCapabilitiesNew(ByteBuffer bb, DataOutputStream os)\n     throws JdwpException, IOException\n   {\n-    // Store these somewhere?\n     final int CAPABILITIES_NEW_SIZE = 32;\n-    os.writeBoolean(false); // canWatchFieldModification\n-    os.writeBoolean(false); // canWatchFieldAccess\n-    os.writeBoolean(false); // canGetBytecodes\n-    os.writeBoolean(false); // canGetSyntheticAttribute\n-    os.writeBoolean(false); // canGetOwnedMonitorInfo\n-    os.writeBoolean(false); // canGetCurrentContendedMonitor\n-    os.writeBoolean(false); // canGetMonitorInfo\n-    os.writeBoolean(false); // canRedefineClasses\n-    os.writeBoolean(false); // canAddMethod\n-    os.writeBoolean(false); // canUnrestrictedlyRedefineClasses\n-    os.writeBoolean(false); // canPopFrames\n-    os.writeBoolean(false); // canUseInstanceFilters\n-    os.writeBoolean(false); // canGetSourceDebugExtension\n-    os.writeBoolean(false); // canRequestVMDeathEvent\n-    os.writeBoolean(false); // canSetDefaultStratum\n+\n+    executeCapabilities(bb, os);\n+    os.writeBoolean(VMVirtualMachine.canRedefineClasses);\n+    os.writeBoolean(VMVirtualMachine.canAddMethod);\n+    os.writeBoolean(VMVirtualMachine.canUnrestrictedlyRedefineClasses);\n+    os.writeBoolean(VMVirtualMachine.canPopFrames);\n+    os.writeBoolean(VMVirtualMachine.canUseInstanceFilters);\n+    os.writeBoolean(VMVirtualMachine.canGetSourceDebugExtension);\n+    os.writeBoolean(VMVirtualMachine.canRequestVMDeathEvent);\n+    os.writeBoolean(VMVirtualMachine.canSetDefaultStratum);\n     for (int i = 15; i < CAPABILITIES_NEW_SIZE; i++)\n-      // Future capabilities\n-      // currently unused\n-      os.writeBoolean(false); // Set to false\n+      {\n+\t// Future capabilities (currently unused)\n+\tos.writeBoolean(false);\n+      }\n   }\n \n   private void executeRedefineClasses(ByteBuffer bb, DataOutputStream os)\n     throws JdwpException\n   {\n-    // Optional command, don't implement\n-    throw new NotImplementedException(\n-      \"Command VirtualMachine.RedefineClasses not implemented\");\n+    if (!VMVirtualMachine.canRedefineClasses)\n+      {\n+\tString msg = \"redefinition of classes is not supported\";\n+\tthrow new NotImplementedException(msg);\n+      }\n+\n+    int classes = bb.getInt();\n+    Class[] types = new Class[classes];\n+    byte[][] bytecodes = new byte[classes][];\n+    for (int i = 0; i < classes; ++i)\n+      {\n+\tReferenceTypeId id = idMan.readReferenceTypeId(bb);\n+\tint classfile = bb.getInt();\n+\tbyte[] bytecode = new byte[classfile];\n+\tbb.get(bytecode);\n+\ttypes[i] = id.getType();\n+\tbytecodes[i] = bytecode;\n+      }\n+\n+    VMVirtualMachine.redefineClasses (types, bytecodes);\n   }\n \n   private void executeSetDefaultStratum(ByteBuffer bb, DataOutputStream os)\n     throws JdwpException\n   {\n-    // Optional command, don't implement\n-    throw new NotImplementedException(\n-      \"Command VirtualMachine.SetDefaultStratum not implemented\");\n+    if (!VMVirtualMachine.canSetDefaultStratum)\n+      {\n+\tString msg = \"setting the default stratum is not supported\";\n+\tthrow new NotImplementedException(msg);\n+      }\n+\n+    String stratum = JdwpString.readString(bb);\n+    VMVirtualMachine.setDefaultStratum(stratum);\n   }\n \n   private void executeAllClassesWithGeneric(ByteBuffer bb, DataOutputStream os)"}, {"sha": "190511de83f40c47fb22cc927309baeb59e7c2df", "filename": "libjava/classpath/gnu/classpath/jdwp/util/MethodResult.java", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -52,6 +52,9 @@\n   \n   // Any Exception that was thrown by the executing method\n   private Exception thrownException;\n+  \n+  // The type of this result\n+  private Class resType;\n \n   public Object getReturnedValue()\n   {\n@@ -73,4 +76,14 @@ public void setThrownException(Exception thrownException)\n     this.thrownException = thrownException;\n   }\n   \n+  public Class getResultType()\n+  {\n+    return resType;\n+  }\n+  \n+  public void setResultType(Class type)\n+  {\n+    resType = type;\n+  }\n+  \n }"}, {"sha": "f28eabf834e94a352e532582377adccffada393e", "filename": "libjava/classpath/gnu/classpath/jdwp/util/MonitorInfo.java", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMonitorInfo.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMonitorInfo.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMonitorInfo.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,76 @@\n+/* MonitorInfo.java -- class used to return monitor information\n+   for JDWP.\n+\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.util;\n+\n+import gnu.classpath.jdwp.VMIdManager;\n+import gnu.classpath.jdwp.id.ObjectId;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * This class is used to pass monitor information between\n+ * the JDWP back-end and the virtual machine.\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class MonitorInfo\n+{\n+  public int entryCount;\n+  public Thread owner;\n+  public Thread[] waiters;\n+\n+  public void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    VMIdManager idm = VMIdManager.getDefault();\n+    ObjectId id = idm.getObjectId(owner);\n+    id.write(os);\n+    os.write(entryCount);\n+    os.write(waiters.length);\n+    for (int i = 0; i < waiters.length; ++i)\n+      {\n+\tid = idm.getObjectId(waiters[i]);\n+\tid.write(os);\n+      }\n+  }\n+}"}, {"sha": "ec762fc2fbf04d444f7a50d650fbf6ca6aab7550", "filename": "libjava/classpath/gnu/classpath/jdwp/util/NullObject.java", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FNullObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FNullObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FNullObject.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,50 @@\n+/* NullObject.java -- placeholder for null values\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.util;\n+\n+/**\n+ * This is a placeholder for null.  There are several places in JDWP where null\n+ * is a valid value (i.e. when geting the value of a variable slot that\n+ * contains a null reference at that time).  This class distinguishes between\n+ * these \"meaningful\" null values and invalid null pointers.\n+ *\n+ * @author Kyle Galloway  <kgallowa@redhat.com>\n+ */\n+public class NullObject\n+{\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libjava/classpath/gnu/classpath/jdwp/util/Value.java", "status": "modified", "additions": 0, "deletions": 301, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -1,301 +0,0 @@\n-/* Value.java -- class to read/write JDWP tagged and untagged values\n-   Copyright (C) 2005, 2006, Free Software Foundation\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n-02110-1301 USA.\n-\n-Linking this library statically or dynamically with other modules is\n-making a combined work based on this library.  Thus, the terms and\n-conditions of the GNU General Public License cover the whole\n-combination.\n-\n-As a special exception, the copyright holders of this library give you\n-permission to link this library with independent modules to produce an\n-executable, regardless of the license terms of these independent\n-modules, and to copy and distribute the resulting executable under\n-terms of your choice, provided that you also meet, for each linked\n-independent module, the terms and conditions of the license of that\n-module.  An independent module is a module which is not derived from\n-or based on this library.  If you modify this library, you may extend\n-this exception to your version of the library, but you are not\n-obligated to do so.  If you do not wish to do so, delete this\n-exception statement from your version. */\n-\n-\n-package gnu.classpath.jdwp.util;\n-\n-import gnu.classpath.jdwp.JdwpConstants;\n-import gnu.classpath.jdwp.VMIdManager;\n-import gnu.classpath.jdwp.exception.InvalidFieldException;\n-import gnu.classpath.jdwp.exception.JdwpException;\n-import gnu.classpath.jdwp.exception.JdwpInternalErrorException;\n-import gnu.classpath.jdwp.exception.NotImplementedException;\n-import gnu.classpath.jdwp.id.ObjectId;\n-\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n-import java.nio.ByteBuffer;\n-\n-/**\n- * A class to read/write JDWP tagged and untagged values.\n- * \n- * @author Aaron Luchko <aluchko@redhat.com>\n- */\n-public class Value\n-{\n-  /**\n-   * Will write the given object as an untagged value to the DataOutputStream.\n-   * \n-   * @param os write the value here\n-   * @param obj the Object to write\n-   * @throws IOException\n-   * @throws InvalidFieldException\n-   */  \n-  public static void writeUntaggedValue(DataOutputStream os, Object obj)\n-    throws JdwpException, IOException\n-  {\n-    writeValue(os, obj, false);\n-  }\n-  \n-  /**\n-   * Will write the given object as a tagged value to the DataOutputStream.\n-   * \n-   * @param os write the value here\n-   * @param obj the Object to write\n-   * @throws IOException\n-   * @throws InvalidFieldException\n-   */\n-  public static void writeTaggedValue(DataOutputStream os, Object obj)\n-    throws JdwpException, IOException\n-  {\n-    writeValue(os, obj, true);\n-  }\n-  \n-  /**\n-   * Will write the given object as either a value or an untagged value to the\n-   * DataOutputStream.\n-   * \n-   * @param os write the value here\n-   * @param obj the Object to write\n-   * @param tagged true if the value is tagged, false otherwise\n-   * @throws IOException\n-   * @throws InvalidFieldException\n-   */\n-  private static void writeValue(DataOutputStream os, Object obj,\n-                                boolean tagged)\n-    throws IOException, JdwpException\n-  {\n-    Class clazz = obj.getClass();\n-    if (clazz.isPrimitive())\n-      {\n-        if (clazz == byte.class)\n-          {\n-            if (tagged)\n-              os.writeByte(JdwpConstants.Tag.BYTE);\n-            os.writeByte(((Byte) obj).byteValue());\n-          }\n-        else if (clazz == char.class)\n-          {\n-            if (tagged)\n-              os.writeByte(JdwpConstants.Tag.CHAR);\n-            os.writeChar(((Character) obj).charValue());\n-          }\n-        else if (clazz == float.class)\n-          {\n-            if (tagged)\n-              os.writeByte(JdwpConstants.Tag.FLOAT);\n-            os.writeFloat(((Float) obj).floatValue());\n-          }\n-        else if (clazz == double.class)\n-          {\n-            if (tagged)\n-              os.writeByte(JdwpConstants.Tag.DOUBLE);\n-            os.writeDouble(((Double) obj).doubleValue());\n-          }\n-        else if (clazz == int.class)\n-          {\n-            if (tagged)\n-              os.writeByte(JdwpConstants.Tag.BYTE);\n-            os.writeInt(((Integer) obj).intValue());\n-          }\n-        else if (clazz == long.class)\n-          {\n-            if (tagged)\n-              os.writeByte(JdwpConstants.Tag.LONG);\n-            os.writeLong(((Long) obj).longValue());\n-          }\n-        else if (clazz == short.class)\n-          {\n-            if (tagged)\n-              os.writeByte(JdwpConstants.Tag.SHORT);\n-            os.writeInt(((Short) obj).shortValue());\n-          }\n-        else if (clazz == void.class)\n-          { // A 'void' has no data\n-            if (tagged)\n-              os.writeByte(JdwpConstants.Tag.VOID);\n-          }\n-        else if (clazz == boolean.class)\n-          {\n-            if (tagged)\n-              os.writeByte(JdwpConstants.Tag.BOOLEAN);\n-            os.writeBoolean(((Boolean) obj).booleanValue());\n-          }\n-        else\n-          { // This shouldn't be possible\n-            throw new JdwpInternalErrorException(\n-              \"Field has invalid primitive!\");\n-          }\n-      }\n-    else\n-      {\n-        // Object is an Object, not a primitive type wrapped in an object\n-        // Write the appropriate tag\n-        if (tagged)\n-          {\n-            if (clazz.isArray())\n-              os.writeByte(JdwpConstants.Tag.ARRAY);\n-            else if (obj instanceof String)\n-              os.writeByte(JdwpConstants.Tag.STRING);\n-            else if (obj instanceof Thread)\n-              os.writeByte(JdwpConstants.Tag.THREAD);\n-            else if (obj instanceof ThreadGroup)\n-              os.writeByte(JdwpConstants.Tag.THREAD_GROUP);\n-            else if (obj instanceof ClassLoader)\n-              os.writeByte(JdwpConstants.Tag.CLASS_LOADER);\n-            else if (obj instanceof Class)\n-              os.writeByte(JdwpConstants.Tag.CLASS_OBJECT);\n-            else\n-              os.writeByte(JdwpConstants.Tag.OBJECT);\n-          }\n-        ObjectId oid = VMIdManager.getDefault().getObjectId(obj);\n-        oid.write(os);\n-      }\n-  }\n-\n-  /**\n-   * Reads the appropriate object for the tagged value contained in the \n-   * ByteBuffer.\n-   * \n-   * @param bb contains the Object\n-   * @return The Object referenced by the value\n-   * @throws JdwpException\n-   * @throws IOException\n-   */\n-  public static Object getObj(ByteBuffer bb)\n-    throws JdwpException, IOException\n-  {\n-    return getUntaggedObj(bb, bb.get());\n-  }\n-\n-  /**\n-   * Reads an object of the given Class from the untagged value contained\n-   * in the ByteBuffer.\n-   * \n-   * @param bb   contains the Object\n-   * @param type corresponds to the TAG of value to be read \n-   * @return the resultant object\n-   * @throws JdwpException\n-   * @throws IOException\n-   */\n-  public static Object getUntaggedObj(ByteBuffer bb, Class type)\n-    throws JdwpException, IOException\n-  {\n-    if (type.isPrimitive())\n-      {\n-        if (type == byte.class)\n-          return new Byte(bb.get());\n-        else if (type == char.class)\n-          return new Character(bb.getChar());\n-        else if (type == float.class)\n-          return new Float(bb.getFloat());\n-        else if (type == double.class)\n-          return new Double(bb.getDouble());\n-        else if (type == int.class)\n-          return new Integer(bb.getInt());\n-        else if (type == long.class)\n-          return new Long(bb.getLong());\n-        else if (type == short.class)\n-          return new Short(bb.getShort());\n-        else if (type == boolean.class)\n-          return Boolean.valueOf(bb.get() != 0);\n-        else if (type == void.class)\n-          return new byte[0];\n-        else\n-          { // This shouldn't be possible\n-            throw new JdwpInternalErrorException(\n-              \"Field has invalid primitive!\");\n-          }\n-      }\n-    else\n-      {\n-        // Field is an object\n-        ObjectId oid = VMIdManager.getDefault().readObjectId(bb);\n-        return oid.getObject();\n-      }\n-  }\n-\n-  /**\n-   * Reads the an object of the given Class from the untagged value contained\n-   * in the ByteBuffer.\n-   * \n-   * @param bb contains the Object\n-   * @param tag TAG of the Value to be read\n-   * @return the object\n-   * @throws JdwpException\n-   * @throws IOException\n-   */\n-  public static Object getUntaggedObj(ByteBuffer bb, byte tag)\n-    throws JdwpException, IOException\n-  {\n-    switch (tag)\n-      {\n-      case JdwpConstants.Tag.BYTE:\n-        return new Byte(bb.get());\n-      case JdwpConstants.Tag.CHAR:\n-        return new Character(bb.getChar());\n-      case JdwpConstants.Tag.FLOAT:\n-        return new Float(bb.getFloat());\n-      case JdwpConstants.Tag.DOUBLE:\n-        return new Double(bb.getDouble());\n-      case JdwpConstants.Tag.INT:\n-        return new Integer(bb.getInt());\n-      case JdwpConstants.Tag.LONG:\n-        return new Long(bb.getLong());\n-      case JdwpConstants.Tag.SHORT:\n-        return new Short(bb.getShort());\n-      case JdwpConstants.Tag.VOID:\n-        return new byte[0];\n-      case JdwpConstants.Tag.BOOLEAN:\n-        return (bb.get() == 0) ? new Boolean(false) : new Boolean(true);\n-      case JdwpConstants.Tag.STRING:\n-        return JdwpString.readString(bb);\n-      case JdwpConstants.Tag.ARRAY:\n-      case JdwpConstants.Tag.THREAD:\n-      case JdwpConstants.Tag.OBJECT:\n-      case JdwpConstants.Tag.THREAD_GROUP:\n-      case JdwpConstants.Tag.CLASS_LOADER:\n-      case JdwpConstants.Tag.CLASS_OBJECT:\n-        // All these cases are ObjectIds\n-        ObjectId oid = VMIdManager.getDefault().readObjectId(bb);\n-        return oid.getObject();\n-      default:\n-        throw new NotImplementedException(\"Tag \" + tag\n-                                          + \" is not implemented.\");\n-      }\n-  }\n-}"}, {"sha": "42bb806fadb57ce238c74ba5e455ef514b9619e5", "filename": "libjava/classpath/gnu/classpath/jdwp/value/BooleanValue.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FBooleanValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FBooleanValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FBooleanValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,100 @@\n+/* BooleanValue.java -- JDWP wrapper class for a boolean value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an boolean value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public final class BooleanValue\n+    extends Value\n+{\n+  // The boolean wrapped by this class\n+  boolean _value;\n+\n+  /**\n+   * Create a new BooleanValue from an boolean\n+   * \n+   * @param value the boolean to wrap\n+   */\n+  public BooleanValue(boolean value)\n+  {\n+    super(JdwpConstants.Tag.BOOLEAN);\n+    _value = value;\n+  }\n+  \n+  /**\n+   * Get the value held in this Value\n+   * \n+   * @return the value represented by this Value object\n+   */\n+  public boolean getValue()\n+  {\n+    return _value;\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return new Boolean(_value);\n+  }\n+\n+  /**\n+   * Write the wrapped boolean to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    os.writeBoolean(_value);\n+  }\n+}\n+"}, {"sha": "204fe86b0e8f1bc12434ae13e66bf4799cc0657b", "filename": "libjava/classpath/gnu/classpath/jdwp/value/ByteValue.java", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FByteValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FByteValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FByteValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,99 @@\n+/* ByteValue.java -- JDWP wrapper class for a byte value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an byte value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public final class ByteValue\n+    extends Value\n+{\n+  // The byte wrapped by this class\n+  byte _value;\n+\n+  /**\n+   * Create a new ByteValue from an byte\n+   * \n+   * @param value the byte to wrap\n+   */\n+  public ByteValue(byte value)\n+  {\n+    super(JdwpConstants.Tag.BYTE);\n+    _value = value;\n+  }\n+  \n+  /**\n+   * Get the value held in this Value\n+   * \n+   * @return the value represented by this Value object\n+   */\n+  public byte getValue()\n+  {\n+    return _value;\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return new Byte(_value);\n+  }\n+\n+  /**\n+   * Write the wrapped byte to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    os.writeByte(_value);\n+  }\n+}"}, {"sha": "f68fc88d156f0920b4a735dbe82f8bc8e7fde4bd", "filename": "libjava/classpath/gnu/classpath/jdwp/value/CharValue.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FCharValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FCharValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FCharValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,100 @@\n+/* CharValue.java -- JDWP wrapper class for a char value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an char value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public final class CharValue\n+    extends Value\n+{\n+  // The char wrapped by this class\n+  char _value;\n+\n+  /**\n+   * Create a new CharValue from an char\n+   * \n+   * @param value the char to wrap\n+   */\n+  public CharValue(char value)\n+  {\n+    super(JdwpConstants.Tag.CHAR);\n+    _value = value;\n+  }\n+  \n+  /**\n+   * Get the value held in this Value\n+   * \n+   * @return the value represented by this Value object\n+   */\n+  public char getValue()\n+  {\n+    return _value;\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return new Character(_value);\n+  }\n+\n+  /**\n+   * Write the wrapped char to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    os.writeChar(_value);\n+  }\n+}\n+"}, {"sha": "45923c4dac4c583faa6fb4de9f8c3fe831677e28", "filename": "libjava/classpath/gnu/classpath/jdwp/value/DoubleValue.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FDoubleValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FDoubleValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FDoubleValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,100 @@\n+/* DoubleValue.java -- JDWP wrapper class for a double value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an double value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public final class DoubleValue\n+    extends Value\n+{\n+  // The double wrapped by this class\n+  double _value;\n+\n+  /**\n+   * Create a new DoubleValue from an double\n+   * \n+   * @param value the double to wrap\n+   */\n+  public DoubleValue(double value)\n+  {\n+    super(JdwpConstants.Tag.DOUBLE);\n+    _value = value;\n+  }\n+  \n+  /**\n+   * Get the value held in this Value\n+   * \n+   * @return the value represented by this Value object\n+   */\n+  public double getValue()\n+  {\n+    return _value;\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return new Double(_value);\n+  }\n+\n+  /**\n+   * Write the wrapped double to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    os.writeDouble(_value);\n+  }\n+}\n+"}, {"sha": "970f77c07b4edffc7dec1f9c89eebf52c122963c", "filename": "libjava/classpath/gnu/classpath/jdwp/value/FloatValue.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FFloatValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FFloatValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FFloatValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,100 @@\n+/* FloatValue.java -- JDWP wrapper class for a float value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+afloat with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an float value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public final class FloatValue\n+    extends Value\n+{\n+  // The float wrapped by this class\n+  float _value;\n+\n+  /**\n+   * Create a new FloatValue from an float\n+   * \n+   * @param value the float to wrap\n+   */\n+  public FloatValue(float value)\n+  {\n+    super(JdwpConstants.Tag.FLOAT);\n+    _value = value;\n+  }\n+  \n+  /**\n+   * Get the value held in this Value\n+   * \n+   * @return the value represented by this Value object\n+   */\n+  public float getValue()\n+  {\n+    return _value;\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return new Float(_value);\n+  }\n+\n+  /**\n+   * Write the wrapped float to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    os.writeFloat(_value);\n+  }\n+}\n+"}, {"sha": "27868754f7f953dce82f524b89bef8fd0c17c7d5", "filename": "libjava/classpath/gnu/classpath/jdwp/value/IntValue.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FIntValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FIntValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FIntValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,100 @@\n+/* IntValue.java -- JDWP wrapper class for an int value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an int value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public final class IntValue\n+    extends Value\n+{\n+  // The int wrapped by this class\n+  int _value;\n+\n+  /**\n+   * Create a new IntValue from an int\n+   * \n+   * @param value the int to wrap\n+   */\n+  public IntValue(int value)\n+  {\n+    super(JdwpConstants.Tag.INT);\n+    _value = value;\n+  }\n+  \n+  /**\n+   * Get the value held in this Value\n+   * \n+   * @return the value represented by this Value object\n+   */\n+  public int getValue()\n+  {\n+    return _value;\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return new Integer(_value);\n+  }\n+\n+  /**\n+   * Write the wrapped int to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    os.writeInt(_value);\n+  }\n+}\n+"}, {"sha": "0ebe0e9f98a7275b09bfe257011062377ea86a45", "filename": "libjava/classpath/gnu/classpath/jdwp/value/LongValue.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FLongValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FLongValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FLongValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,100 @@\n+/* LongValue.java -- JDWP wrapper class for a long value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an long value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public final class LongValue\n+    extends Value\n+{\n+  // The long wrapped by this class\n+  long _value;\n+\n+  /**\n+   * Create a new LongValue from an long\n+   * \n+   * @param value the long to wrap\n+   */\n+  public LongValue(long value)\n+  {\n+    super(JdwpConstants.Tag.LONG);\n+    _value = value;\n+  }\n+  \n+  /**\n+   * Get the value held in this Value\n+   * \n+   * @return the value represented by this Value object\n+   */\n+  public long getValue()\n+  {\n+    return _value;\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return new Long(_value);\n+  }\n+\n+  /**\n+   * Write the wrapped long to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    os.writeLong(_value);\n+  }\n+}\n+"}, {"sha": "7ec9beb5f93c1dacd49bdd9a2f7e809bc26d92c7", "filename": "libjava/classpath/gnu/classpath/jdwp/value/ObjectValue.java", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,92 @@\n+/* ObjectValue.java -- JDWP wrapper class for an Object value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.VMIdManager;\n+import gnu.classpath.jdwp.id.ObjectId;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an Object value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public final class ObjectValue\n+    extends Value\n+{\n+  // The Object wrapped by this class\n+  Object _value;\n+\n+  /**\n+   * Create a new ObjectValue from an Object\n+   * \n+   * @param value the Object to wrap\n+   */\n+  public ObjectValue(Object value)\n+  {\n+    super(JdwpConstants.Tag.OBJECT);\n+    _value = value;\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return _value;\n+  }\n+\n+  /**\n+   * Write the wrapped object to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    ObjectId oid = VMIdManager.getDefault().getObjectId(_value);\n+    oid.write(os);\n+  }\n+}"}, {"sha": "cbde2269e6c8348fdc0a8b8fd5222fda55143684", "filename": "libjava/classpath/gnu/classpath/jdwp/value/ShortValue.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FShortValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FShortValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FShortValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,100 @@\n+/* ShortValue.java -- JDWP wrapper class for a short value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an short value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public final class ShortValue\n+    extends Value\n+{\n+  // The short wrapped by this class\n+  short _value;\n+\n+  /**\n+   * Create a new ShortValue from a short\n+   * \n+   * @param value the short to wrap\n+   */\n+  public ShortValue(short value)\n+  {\n+    super(JdwpConstants.Tag.SHORT);\n+    _value = value;\n+  }\n+  \n+  /**\n+   * Get the value held in this Value\n+   * \n+   * @return the value represented by this Value object\n+   */\n+  public short getValue()\n+  {\n+    return _value;\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return new Short(_value);\n+  }\n+\n+  /**\n+   * Write the wrapped short to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    os.writeShort(_value);\n+  }\n+}\n+"}, {"sha": "2371547efeda043249a6fb42ae241347b3d9e496", "filename": "libjava/classpath/gnu/classpath/jdwp/value/StringValue.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FStringValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FStringValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FStringValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,100 @@\n+/* StringValue.java -- JDWP wrapper class for an String value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.util.JdwpString;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an String value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public final class StringValue\n+    extends Value\n+{\n+  // The String wrapped by this class\n+  String _value;\n+\n+  /**\n+   * Create a new StringValue from an String\n+   * \n+   * @param value the String to wrap\n+   */\n+  public StringValue(String value)\n+  {\n+    super(JdwpConstants.Tag.OBJECT);\n+    _value = value;\n+  }\n+  \n+  /**\n+   * Get the value held in this Value\n+   * \n+   * @return the value represented by this Value object\n+   */\n+  public String getValue()\n+  {\n+    return _value;\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return _value;\n+  }\n+\n+  /**\n+   * Write the wrapped object to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os)\n+    throws IOException\n+  {\n+    JdwpString.writeString(os, _value);\n+  }\n+}"}, {"sha": "4ad8bec0703740f15a998e09b8abd49212da3498", "filename": "libjava/classpath/gnu/classpath/jdwp/value/Value.java", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,155 @@\n+/* Value.java -- base class of JDWP values\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.exception.InvalidClassException;\n+import gnu.classpath.jdwp.exception.InvalidObjectException;\n+import gnu.classpath.jdwp.exception.InvalidTagException;\n+import gnu.classpath.jdwp.exception.JdwpInternalErrorException;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Superclass for all JDWP Values.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public abstract class Value\n+{\n+  // A Tag representing the type of this value\n+  private byte _tag;\n+  \n+  /**\n+   * Create a new value of type tag.\n+   * \n+   * @param tag the type of the value\n+   */ \n+  protected Value(byte tag)\n+  {\n+    _tag = tag;\n+  }\n+  \n+  /**\n+   * Get the tag for this Value\n+   * \n+   * @return the byte tag of this Value\n+   */\n+  public byte getTag()\n+  {\n+    return _tag;\n+  }\n+  \n+  /**\n+   * Calls the dervied classes writeValue method to write its value to the \n+   * DataOutputStream.\n+   * \n+   * @param os write the value here\n+   * @throws IOException\n+   */  \n+  public void writeUntagged(DataOutputStream os)\n+    throws IOException\n+  {\n+    write(os);\n+  }\n+  \n+  /**\n+   * Will write the given object as a tagged value to the DataOutputStream.\n+   * \n+   * @param os write the value here\n+   * @param obj the Object to write\n+   * @throws IOException\n+   */\n+  public void writeTagged(DataOutputStream os)\n+    throws IOException\n+  {\n+    os.write (_tag);\n+    write(os);\n+  }\n+  \n+  /**\n+   * This method must write the value to the DataOutputStream in a manner\n+   * appropriate for the type of the value.\n+   * \n+   * @param os DataOutputStream to write to\n+   * @throws IOException\n+   */\n+  protected abstract void write(DataOutputStream os)\n+    throws IOException;\n+  \n+  /**\n+   * Returns an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  protected abstract Object getObject();\n+    \n+  /**\n+   * Get an untagged object from the ByteBuffer\n+   * \n+   * @param bb the ByteBuffer to extract the value from\n+   * @param type a Class representing the type\n+   * @return an Object from the ByteBuffer of the type of the Class parameter\n+   * @throws JdwpInternalErrorException\n+   * @throws InvalidObjectException\n+   */\n+  public static Object getUntaggedObject(ByteBuffer bb, Class type)\n+    throws JdwpInternalErrorException, InvalidObjectException, InvalidClassException\n+  {\n+    Value val = ValueFactory.createFromUntagged(bb, type);\n+    return val.getObject();\n+  }\n+  \n+  /**\n+   * Get an untagged object from the ByteBuffer\n+   * \n+   * @param bb the ByteBuffer to extract the value from\n+   * @param tag a byte tag representing the type\n+   * @return an Object from the ByteBuffer of the type of the Class parameter\n+   * @throws JdwpInternalErrorException\n+   * @throws InvalidObjectException\n+   */\n+  public static Object getTaggedObject(ByteBuffer bb)\n+    throws JdwpInternalErrorException, InvalidObjectException, InvalidTagException\n+  {\n+    Value val = ValueFactory.createFromTagged(bb);\n+    return val.getObject();\n+  }\n+}"}, {"sha": "8f1a8780eeb02bd59e19e57c7320567a0eacf3e4", "filename": "libjava/classpath/gnu/classpath/jdwp/value/ValueFactory.java", "status": "added", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValueFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValueFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValueFactory.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,247 @@\n+/* ValueFactory.java -- factory to create JDWP Values\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.VMIdManager;\n+import gnu.classpath.jdwp.exception.InvalidClassException;\n+import gnu.classpath.jdwp.exception.InvalidObjectException;\n+import gnu.classpath.jdwp.exception.InvalidTagException;\n+import gnu.classpath.jdwp.exception.JdwpInternalErrorException;\n+import gnu.classpath.jdwp.id.ObjectId;\n+import gnu.classpath.jdwp.util.JdwpString;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * A factory to create JDWP Values.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public class ValueFactory\n+{\n+  /**\n+   * Creates a new Value of appropriate type for the value in the ByteBuffer\n+   * by reading the tag byte from the front of the buffer.\n+   * \n+   * @param bb contains the Object\n+   * @return A new Value of appropriate type\n+   * @throws JdwpInternalErrorException\n+   * @throws InvalidObjectException\n+   */\n+  public static Value createFromTagged(ByteBuffer bb)\n+    throws JdwpInternalErrorException, InvalidObjectException, InvalidTagException\n+  {\n+    return create(bb, bb.get());\n+  }\n+  \n+  /**\n+   * Creates a new Value of appropriate type for the value in the ByteBuffer\n+   * by checking the type of the Class passed in.\n+   * \n+   * @param bb contains the Object\n+   * @param type a Class representing the type of the value in the ByteBuffer\n+   * @return A new Value of appropriate type\n+   * @throws JdwpInternalErrorException\n+   * @throws InvalidObjectException\n+   */\n+  public static Value createFromUntagged(ByteBuffer bb, Class type)\n+  throws JdwpInternalErrorException, InvalidObjectException, InvalidClassException\n+  {\n+    byte tag = getTagForClass(type);\n+    \n+    try\n+      {\n+        return create(bb, tag);\n+      }\n+    catch (InvalidTagException ite)\n+      {\n+        throw new InvalidClassException(ite);\n+      }\n+  }\n+  \n+  /**\n+   * Creates a new Value of appropriate type for the value in the ByteBuffer.\n+   * \n+   * @param bb contains the Object\n+   * @param tag a byte representing the type of the object\n+   * @return A new Value of appropriate type\n+   * @throws JdwpInternalErrorException\n+   * @throws InvalidObjectException\n+   */\n+  private static Value create(ByteBuffer bb, byte tag)\n+    throws JdwpInternalErrorException, InvalidObjectException, InvalidTagException\n+  {\n+    Value val = null;\n+    switch(tag)\n+    {\n+      case JdwpConstants.Tag.BYTE:\n+        val = new ByteValue(bb.get());\n+        break;\n+      case JdwpConstants.Tag.BOOLEAN:\n+        val = new BooleanValue((bb.get() != 0));\n+        break;\n+      case JdwpConstants.Tag.CHAR:\n+        val = new CharValue(bb.getChar());\n+        break;\n+      case JdwpConstants.Tag.SHORT:\n+        val = new ShortValue(bb.getShort());\n+        break;\n+      case JdwpConstants.Tag.INT:\n+        val = new IntValue(bb.getInt());\n+        break;\n+      case JdwpConstants.Tag.FLOAT:\n+        val = new FloatValue(bb.getFloat());\n+        break;\n+      case JdwpConstants.Tag.LONG:\n+        val = new LongValue(bb.getLong());\n+        break;\n+      case JdwpConstants.Tag.DOUBLE:\n+        val = new DoubleValue(bb.getDouble());\n+        break;\n+      case JdwpConstants.Tag.VOID:\n+        val = new VoidValue();\n+        break;\n+      case JdwpConstants.Tag.ARRAY:\n+      case JdwpConstants.Tag.THREAD:\n+      case JdwpConstants.Tag.OBJECT:\n+      case JdwpConstants.Tag.THREAD_GROUP:\n+      case JdwpConstants.Tag.CLASS_LOADER:\n+      case JdwpConstants.Tag.CLASS_OBJECT:\n+        ObjectId oid = VMIdManager.getDefault().readObjectId(bb);\n+        val = new ObjectValue(oid.getObject());\n+        break;\n+      case JdwpConstants.Tag.STRING:\n+        val = new StringValue(JdwpString.readString(bb));\n+        break;\n+      default:\n+        throw new InvalidTagException(tag);\n+    }\n+    \n+    return val;\n+  }\n+  \n+  /**\n+   * Creates a tag for the type of the class.\n+   * \n+   * @param klass the type to get a tag for\n+   * @return a byte tag representing the class\n+   * @throws JdwpInternalErrorException\n+   * @throws InvalidObjectException\n+   */\n+  private static byte getTagForClass(Class klass)\n+    throws JdwpInternalErrorException\n+  {\n+    byte tag;\n+    \n+    if (klass.isPrimitive())\n+      {\n+        if (klass == byte.class)\n+          tag = JdwpConstants.Tag.BYTE;\n+        else if (klass == boolean.class)\n+          tag = JdwpConstants.Tag.BOOLEAN;\n+        else if (klass == char.class)\n+          tag = JdwpConstants.Tag.CHAR;\n+        else if (klass == short.class)\n+          tag = JdwpConstants.Tag.SHORT;\n+        else if (klass == int.class)\n+          tag = JdwpConstants.Tag.INT;\n+        else if (klass == float.class)\n+          tag = JdwpConstants.Tag.FLOAT;\n+        else if (klass == long.class)\n+          tag = JdwpConstants.Tag.LONG;\n+        else if (klass == double.class)\n+          tag = JdwpConstants.Tag.DOUBLE;\n+        else if (klass == void.class)\n+          tag = JdwpConstants.Tag.VOID;\n+        else\n+          throw new JdwpInternalErrorException(\"Invalid primitive class\");\n+      }\n+    else\n+      {\n+        tag = JdwpConstants.Tag.OBJECT;\n+      }\n+    \n+    return tag;\n+  }\n+  \n+  /**\n+   * Create a value type for an Object of type determined by a Class.  This is\n+   * a special case where a value needs to be created, but the value to create\n+   * it for is already in an object, not in a buffer.\n+   * \n+   * @param value the Object to convert to a Value\n+   * @param type the Class type of the object\n+   * @return a new Value representing this object\n+   */\n+  public static Value createFromObject(Object value, Class type)\n+  {\n+    Value val = null;\n+    \n+    if (type.isPrimitive())\n+      {\n+        if (type == byte.class)\n+          val = new ByteValue(((Byte) value).byteValue());\n+        else if (type == boolean.class)\n+          val = new BooleanValue(((Boolean) value).booleanValue());\n+        else if (type == char.class)\n+          val = new CharValue(((Character) value).charValue());\n+        else if (type == short.class)\n+          val = new ShortValue(((Short) value).shortValue());\n+        else if (type == int.class)\n+          val = new IntValue(((Integer) value).intValue());\n+        else if (type == float.class)\n+          val = new FloatValue(((Float) value).floatValue());\n+        else if (type == long.class)\n+          val = new LongValue(((Long) value).longValue());\n+        else if (type == double.class)\n+          val = new DoubleValue(((Double) value).doubleValue());\n+        else if (type == void.class)\n+          val = new VoidValue();\n+      }\n+    else\n+      {\n+        if (type.isAssignableFrom(String.class))\n+          val = new StringValue ((String) value);\n+        else\n+          val = new ObjectValue(value);\n+      }\n+    \n+    return val;\n+  }\n+}"}, {"sha": "82cded92903991a76a76e6fff95a6a62de4bf741", "filename": "libjava/classpath/gnu/classpath/jdwp/value/VoidValue.java", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FVoidValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FVoidValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FVoidValue.java?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a", "patch": "@@ -0,0 +1,82 @@\n+/* VoidValue.java -- JDWP wrapper class for a void value\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath.jdwp.value;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * Wrapper for an void value.\n+ * \n+ * @author Kyle Galloway <kgallowa@redhat.com>\n+ */\n+public class VoidValue\n+    extends Value\n+{\n+  /**\n+   * Create a new VoidValue.\n+   */\n+  public VoidValue ()\n+  {\n+    super(JdwpConstants.Tag.VOID);\n+  }\n+  \n+  /**\n+   * Return an object representing this type\n+   * \n+   * @return an Object represntation of this value\n+   */\n+  @Override\n+  protected Object getObject()\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Write the wrapped void to the given DataOutputStream.\n+   * \n+   * @param os the output stream to write to\n+   */\n+  @Override\n+  protected void write(DataOutputStream os) \n+    throws IOException\n+  {\n+  }\n+}"}, {"sha": "cf8f695204e4f85c4c2ba339fdff0dc28614b1b0", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/VMFrame.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "09c69bf4234e0e26c6eb555fd04f188eeaff27e1", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/VMVirtualMachine.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "4d311632060b0bd5e3d1fe0f621ce5e646846ef7", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/event/EventManager.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventManager.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventManager.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventManager.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "00c99201a97b02223610e45d3c8eb30003d890a6", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/event/filters/StepFilter.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FStepFilter.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FStepFilter.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FStepFilter.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "36b8d35b6e0e884698626dd0fdf6074c2a02b757", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/exception/InvalidSlotException.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidSlotException.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidSlotException.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidSlotException.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "43a8518448a23b0618f2ebae58faf98880bbc9be", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/exception/InvalidTagException.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidTagException.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidTagException.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidTagException.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "97b019578d62c57aebe55b8847332e023815c406", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/exception/TypeMismatchException.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FTypeMismatchException.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FTypeMismatchException.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FTypeMismatchException.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "dc57196ab484c2b6566a0add9943c443869879be", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/id/NullObjectId.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FNullObjectId.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FNullObjectId.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FNullObjectId.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "755e2996ca385aa0f926964cba4a446a9f0eeefe", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/processor/ArrayReferenceCommandSet.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayReferenceCommandSet.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayReferenceCommandSet.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayReferenceCommandSet.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "962c347734be20ac18de3652318638fb47414a21", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/processor/ClassTypeCommandSet.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "bbe0714c0206be2096f20ecf8a519593abc17322", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/processor/EventRequestCommandSet.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FEventRequestCommandSet.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FEventRequestCommandSet.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FEventRequestCommandSet.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "ebd5234ccbd4a7e6926fec613b3857cdd9bcda05", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/processor/MethodCommandSet.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FMethodCommandSet.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FMethodCommandSet.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FMethodCommandSet.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "8004557e409925938c09e4abf9785b9829f403cc", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/processor/ObjectReferenceCommandSet.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FObjectReferenceCommandSet.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FObjectReferenceCommandSet.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FObjectReferenceCommandSet.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "25ff1a94d72f7affaa854767061b3bd92acc1433", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/processor/ReferenceTypeCommandSet.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FReferenceTypeCommandSet.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FReferenceTypeCommandSet.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FReferenceTypeCommandSet.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "d47a51d77ed54c6b5c1bf074e6ec140846459df0", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/processor/StackFrameCommandSet.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "0398ff087778326a6c58c3724b4e1635a604a754", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/processor/ThreadReferenceCommandSet.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadReferenceCommandSet.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadReferenceCommandSet.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadReferenceCommandSet.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "eadc685a0b5018de08bcbea1e2f784f662549c5f", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/processor/VirtualMachineCommandSet.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FVirtualMachineCommandSet.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FVirtualMachineCommandSet.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FVirtualMachineCommandSet.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "1e077c6a48cbe4223de597b92394e12c3afc506b", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/util/MethodResult.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "e0cf74fd3b42a6a4489406d308e09a2eb43710b1", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/util/MonitorInfo.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMonitorInfo.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMonitorInfo.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMonitorInfo.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "5e093e132a5a5104468edcfd90062a850bc4a000", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/util/NullObject.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FNullObject.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FNullObject.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FNullObject.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "07a234965f729ed51536017d1ed88544fd5f691f", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/BooleanValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FBooleanValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FBooleanValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FBooleanValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "efa7108a3693a4d7710786b718ad292330e29801", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/ByteValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FByteValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FByteValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FByteValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "747967ad9fb263483b9ef730c02b874831f8c08c", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/CharValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FCharValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FCharValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FCharValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "cd3446f62f72fe7d5aa01346256c2d7c39218da6", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/DoubleValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FDoubleValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FDoubleValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FDoubleValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "8db3be61a173f58e6776f89f52e6bfc71efdef57", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/FloatValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FFloatValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FFloatValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FFloatValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "44314bcf0643a5fc8efe5c329970064541854573", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/IntValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FIntValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FIntValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FIntValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "ed3f15c591fd02f6b6ae05fc61ce7f247b75e83a", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/LongValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FLongValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FLongValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FLongValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "09f765c4338420ea2d490286fbc27cef8859d38e", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/ObjectValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "c4c9584b3da34e90ac6e6721f36747c3fd84f331", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/ShortValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FShortValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FShortValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FShortValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "32526db8bdb145afdf02d3259419b28cb97f6fe8", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/StringValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FStringValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FStringValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FStringValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "c23ace6f3af04f403a8190c41941bdb6485ba416", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/Value.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "375ad8020a4b01cd8cac02b056bfa226e8cc9f7a", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/ValueFactory.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValueFactory.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValueFactory.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValueFactory.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}, {"sha": "123fb9e1f8727e0c9e937679ee1aa19b043b3cb2", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/value/VoidValue.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FVoidValue.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab065b4d759004950fca79cd18a9e186f74f8e0a/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FVoidValue.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FVoidValue.class?ref=ab065b4d759004950fca79cd18a9e186f74f8e0a"}]}