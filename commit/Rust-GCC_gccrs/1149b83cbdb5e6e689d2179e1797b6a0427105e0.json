{"sha": "1149b83cbdb5e6e689d2179e1797b6a0427105e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0OWI4M2NiZGI1ZTZlNjg5ZDIxNzllMTc5N2I2YTA0MjcxMDVlMA==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2016-02-09T18:49:05Z"}, "committer": {"name": "Charles Baylis", "email": "cbaylis@gcc.gnu.org", "date": "2016-02-09T18:49:05Z"}, "message": "[ARM] PR68532 Fix up vzip recognition for big endian\n\ngcc/ChangeLog:\n\n2016-02-09  Charles Baylis  <charles.baylis@linaro.org>\n\n        PR target/68532\n        * config/arm/arm.c (arm_evpc_neon_vzip): Allow for big endian lane\n        order.\n        * config/arm/arm_neon.h (vzipq_s8): Adjust shuffle patterns for big\n        endian.\n        (vzipq_s16): Likewise.\n        (vzipq_s32): Likewise.\n        (vzipq_f32): Likewise.\n        (vzipq_u8): Likewise.\n        (vzipq_u16): Likewise.\n        (vzipq_u32): Likewise.\n        (vzipq_p8): Likewise.\n        (vzipq_p16): Likewise.\n\nFrom-SVN: r233252", "tree": {"sha": "3ff177af5c6aa88cf8a25bece1e4866510e8594f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ff177af5c6aa88cf8a25bece1e4866510e8594f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1149b83cbdb5e6e689d2179e1797b6a0427105e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1149b83cbdb5e6e689d2179e1797b6a0427105e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1149b83cbdb5e6e689d2179e1797b6a0427105e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1149b83cbdb5e6e689d2179e1797b6a0427105e0/comments", "author": null, "committer": null, "parents": [{"sha": "4b79ac23c679a85931a0a4b16a97314ae4fd0993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b79ac23c679a85931a0a4b16a97314ae4fd0993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b79ac23c679a85931a0a4b16a97314ae4fd0993"}], "stats": {"total": 82, "additions": 52, "deletions": 30}, "files": [{"sha": "5bc8a22de88e30ce9a2c1cf6399991fa41dc840c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1149b83cbdb5e6e689d2179e1797b6a0427105e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1149b83cbdb5e6e689d2179e1797b6a0427105e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1149b83cbdb5e6e689d2179e1797b6a0427105e0", "patch": "@@ -1,3 +1,19 @@\n+2016-02-09  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\tPR target/68532\n+\t* config/arm/arm.c (arm_evpc_neon_vzip): Allow for big endian lane\n+\torder.\n+\t* config/arm/arm_neon.h (vzipq_s8): Adjust shuffle patterns for big\n+\tendian.\n+\t(vzipq_s16): Likewise.\n+\t(vzipq_s32): Likewise.\n+\t(vzipq_f32): Likewise.\n+\t(vzipq_u8): Likewise.\n+\t(vzipq_u16): Likewise.\n+\t(vzipq_u32): Likewise.\n+\t(vzipq_p8): Likewise.\n+\t(vzipq_p16): Likewise.\n+\n 2016-02-09  Charles Baylis  <charles.baylis@linaro.org>\n \n \tPR target/68532"}, {"sha": "27aecf7d1a423848722b7c880370325f63ac1b88", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1149b83cbdb5e6e689d2179e1797b6a0427105e0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1149b83cbdb5e6e689d2179e1797b6a0427105e0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1149b83cbdb5e6e689d2179e1797b6a0427105e0", "patch": "@@ -28313,27 +28313,36 @@ arm_evpc_neon_vzip (struct expand_vec_perm_d *d)\n   unsigned int i, high, mask, nelt = d->nelt;\n   rtx out0, out1, in0, in1;\n   rtx (*gen)(rtx, rtx, rtx, rtx);\n+  int first_elem;\n+  bool is_swapped;\n \n   if (GET_MODE_UNIT_SIZE (d->vmode) >= 8)\n     return false;\n \n-  /* Note that these are little-endian tests.  Adjust for big-endian later.  */\n+  is_swapped = BYTES_BIG_ENDIAN;\n+\n+  first_elem = d->perm[neon_endian_lane_map (d->vmode, 0) ^ is_swapped];\n+\n   high = nelt / 2;\n-  if (d->perm[0] == high)\n+  if (first_elem == neon_endian_lane_map (d->vmode, high))\n     ;\n-  else if (d->perm[0] == 0)\n+  else if (first_elem == neon_endian_lane_map (d->vmode, 0))\n     high = 0;\n   else\n     return false;\n   mask = (d->one_vector_p ? nelt - 1 : 2 * nelt - 1);\n \n   for (i = 0; i < nelt / 2; i++)\n     {\n-      unsigned elt = (i + high) & mask;\n-      if (d->perm[i * 2] != elt)\n+      unsigned elt =\n+\tneon_pair_endian_lane_map (d->vmode, i + high) & mask;\n+      if (d->perm[neon_pair_endian_lane_map (d->vmode, 2 * i + is_swapped)]\n+\t  != elt)\n \treturn false;\n-      elt = (elt + nelt) & mask;\n-      if (d->perm[i * 2 + 1] != elt)\n+      elt =\n+\tneon_pair_endian_lane_map (d->vmode, i + nelt + high) & mask;\n+      if (d->perm[neon_pair_endian_lane_map (d->vmode, 2 * i + !is_swapped)]\n+\t  != elt)\n \treturn false;\n     }\n \n@@ -28357,11 +28366,8 @@ arm_evpc_neon_vzip (struct expand_vec_perm_d *d)\n \n   in0 = d->op0;\n   in1 = d->op1;\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      std::swap (in0, in1);\n-      high = !high;\n-    }\n+  if (is_swapped)\n+    std::swap (in0, in1);\n \n   out0 = d->target;\n   out1 = gen_reg_rtx (d->vmode);"}, {"sha": "94bbef56f752383d6b6cf7e1e6271651b7141d42", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1149b83cbdb5e6e689d2179e1797b6a0427105e0/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1149b83cbdb5e6e689d2179e1797b6a0427105e0/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=1149b83cbdb5e6e689d2179e1797b6a0427105e0", "patch": "@@ -8453,9 +8453,9 @@ vzipq_s8 (int8x16_t __a, int8x16_t __b)\n   int8x16x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 24, 8, 25, 9, 26, 10, 27, 11, 28, 12, 29, 13, 30, 14, 31, 15 });\n+      { 20, 4, 21, 5, 22, 6, 23, 7, 16, 0, 17, 1, 18, 2, 19, 3 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+      { 28, 12, 29, 13, 30, 14, 31, 15, 24, 8, 25, 9, 26, 10, 27, 11 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n       { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n@@ -8471,9 +8471,9 @@ vzipq_s16 (int16x8_t __a, int16x8_t __b)\n   int16x8x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 12, 4, 13, 5, 14, 6, 15, 7 });\n+      { 10, 2, 11, 3, 8, 0, 9, 1 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 8, 0, 9, 1, 10, 2, 11, 3 });\n+      { 14, 6, 15, 7, 12, 4, 13, 5 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n       { 0, 8, 1, 9, 2, 10, 3, 11 });\n@@ -8488,8 +8488,8 @@ vzipq_s32 (int32x4_t __a, int32x4_t __b)\n {\n   int32x4x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n-  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 6, 2, 7, 3 });\n-  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 0, 5, 1 });\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 1, 4, 0 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 7, 3, 6, 2 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 1, 5 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 6, 3, 7 });\n@@ -8502,8 +8502,8 @@ vzipq_f32 (float32x4_t __a, float32x4_t __b)\n {\n   float32x4x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n-  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 6, 2, 7, 3 });\n-  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 0, 5, 1 });\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 1, 4, 0 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 7, 3, 6, 2 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 1, 5 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 6, 3, 7 });\n@@ -8517,9 +8517,9 @@ vzipq_u8 (uint8x16_t __a, uint8x16_t __b)\n   uint8x16x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 24, 8, 25, 9, 26, 10, 27, 11, 28, 12, 29, 13, 30, 14, 31, 15 });\n+      { 20, 4, 21, 5, 22, 6, 23, 7, 16, 0, 17, 1, 18, 2, 19, 3 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+      { 28, 12, 29, 13, 30, 14, 31, 15, 24, 8, 25, 9, 26, 10, 27, 11 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n       { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n@@ -8535,9 +8535,9 @@ vzipq_u16 (uint16x8_t __a, uint16x8_t __b)\n   uint16x8x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 12, 4, 13, 5, 14, 6, 15, 7 });\n+      { 10, 2, 11, 3, 8, 0, 9, 1 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 8, 0, 9, 1, 10, 2, 11, 3 });\n+      { 14, 6, 15, 7, 12, 4, 13, 5 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n       { 0, 8, 1, 9, 2, 10, 3, 11 });\n@@ -8552,8 +8552,8 @@ vzipq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n   uint32x4x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n-  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 6, 2, 7, 3 });\n-  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 4, 0, 5, 1 });\n+  __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 5, 1, 4, 0 });\n+  __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 7, 3, 6, 2 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint32x4_t) { 0, 4, 1, 5 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint32x4_t) { 2, 6, 3, 7 });\n@@ -8567,9 +8567,9 @@ vzipq_p8 (poly8x16_t __a, poly8x16_t __b)\n   poly8x16x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 24, 8, 25, 9, 26, 10, 27, 11, 28, 12, 29, 13, 30, 14, 31, 15 });\n+      { 20, 4, 21, 5, 22, 6, 23, 7, 16, 0, 17, 1, 18, 2, 19, 3 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint8x16_t)\n-      { 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7 });\n+      { 28, 12, 29, 13, 30, 14, 31, 15, 24, 8, 25, 9, 26, 10, 27, 11 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint8x16_t)\n       { 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23 });\n@@ -8585,9 +8585,9 @@ vzipq_p16 (poly16x8_t __a, poly16x8_t __b)\n   poly16x8x2_t __rv;\n #ifdef __ARM_BIG_ENDIAN\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 12, 4, 13, 5, 14, 6, 15, 7 });\n+      { 10, 2, 11, 3, 8, 0, 9, 1 });\n   __rv.val[1] = __builtin_shuffle (__a, __b, (uint16x8_t)\n-      { 8, 0, 9, 1, 10, 2, 11, 3 });\n+      { 14, 6, 15, 7, 12, 4, 13, 5 });\n #else\n   __rv.val[0] = __builtin_shuffle (__a, __b, (uint16x8_t)\n       { 0, 8, 1, 9, 2, 10, 3, 11 });"}]}