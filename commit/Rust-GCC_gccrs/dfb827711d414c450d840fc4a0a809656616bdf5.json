{"sha": "dfb827711d414c450d840fc4a0a809656616bdf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiODI3NzExZDQxNGM0NTBkODQwZmM0YTBhODA5NjU2NjE2YmRmNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-29T08:18:17Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-29T08:18:17Z"}, "message": "toplev.c (flag_dummy): Remove.\n\n\t* toplev.c (flag_dummy): Remove.\n\t(f_options): Restore flag pointers.\n\nFrom-SVN: r68661", "tree": {"sha": "7e8201c31c12d2eb7629a5ccc0c43cf3a96555ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e8201c31c12d2eb7629a5ccc0c43cf3a96555ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfb827711d414c450d840fc4a0a809656616bdf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb827711d414c450d840fc4a0a809656616bdf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb827711d414c450d840fc4a0a809656616bdf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb827711d414c450d840fc4a0a809656616bdf5/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7177e7205addf77c10b628a09098d1a3d7875838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7177e7205addf77c10b628a09098d1a3d7875838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7177e7205addf77c10b628a09098d1a3d7875838"}], "stats": {"total": 244, "additions": 122, "deletions": 122}, "files": [{"sha": "f6300e7e487e8a7a5b33bd47029759b5cb7ee941", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb827711d414c450d840fc4a0a809656616bdf5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb827711d414c450d840fc4a0a809656616bdf5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfb827711d414c450d840fc4a0a809656616bdf5", "patch": "@@ -1,3 +1,8 @@\n+2003-06-29  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* toplev.c (flag_dummy): Remove.\n+\t(f_options): Restore flag pointers.\n+\n 2003-06-29  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (processor_target_table): Add 970."}, {"sha": "6e393369ebf7fc6c679438a366fb7342ccc7193e", "filename": "gcc/toplev.c", "status": "modified", "additions": 117, "deletions": 122, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb827711d414c450d840fc4a0a809656616bdf5/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb827711d414c450d840fc4a0a809656616bdf5/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=dfb827711d414c450d840fc4a0a809656616bdf5", "patch": "@@ -1043,9 +1043,6 @@ static const param_info lang_independent_params[] = {\n   { NULL, 0, NULL }\n };\n \n-/* Used for the f_options array temporarily.  */\n-static int flag_dummy;\n-\n /* Table of language-independent -f options.\n    STRING is the option name.  VARIABLE is the address of the variable.\n    ON_VALUE is the value to store in VARIABLE\n@@ -1054,239 +1051,237 @@ static int flag_dummy;\n \n static const lang_independent_options f_options[] =\n {\n-  {\"eliminate-dwarf2-dups\", &flag_dummy, 1,\n+  {\"eliminate-dwarf2-dups\", &flag_eliminate_dwarf2_dups, 1,\n    N_(\"Perform DWARF2 duplicate elimination\") },\n-  {\"eliminate-unused-debug-types\", &flag_dummy, 1,\n+  {\"eliminate-unused-debug-symbols\", &flag_debug_only_used_symbols, 1,\n    N_(\"Perform unused type elimination in debug info\") },\n-  {\"eliminate-unused-debug-symbols\", &flag_dummy, 1,\n+  {\"eliminate-unused-debug-types\", &flag_eliminate_unused_debug_types, 1,\n    N_(\"Perform unused type elimination in debug info\") },\n-  {\"float-store\", &flag_dummy, 1,\n+  {\"float-store\", &flag_float_store, 1,\n    N_(\"Do not store floats in registers\") },\n-  {\"defer-pop\", &flag_dummy, 1,\n+  {\"defer-pop\", &flag_defer_pop, 1,\n    N_(\"Defer popping functions args from stack until later\") },\n-  {\"omit-frame-pointer\", &flag_dummy, 1,\n+  {\"omit-frame-pointer\", &flag_omit_frame_pointer, 1,\n    N_(\"When possible do not generate stack frames\") },\n-  {\"optimize-sibling-calls\", &flag_dummy, 1,\n+  {\"optimize-sibling-calls\", &flag_optimize_sibling_calls, 1,\n    N_(\"Optimize sibling and tail recursive calls\") },\n-  {\"tracer\", &flag_dummy, 1,\n+  {\"tracer\", &flag_tracer, 1,\n    N_(\"Perform superblock formation via tail duplication\") },\n-  {\"unit-at-a-time\", &flag_dummy, 1,\n+  {\"unit-at-a-time\", &flag_unit_at_a_time, 1,\n    N_(\"Compile whole compilation unit at a time\") },\n-  {\"cse-follow-jumps\", &flag_dummy, 1,\n+  {\"cse-follow-jumps\", &flag_cse_follow_jumps, 1,\n    N_(\"When running CSE, follow jumps to their targets\") },\n-  {\"cse-skip-blocks\", &flag_dummy, 1,\n+  {\"cse-skip-blocks\", &flag_cse_skip_blocks, 1,\n    N_(\"When running CSE, follow conditional jumps\") },\n-  {\"expensive-optimizations\", &flag_dummy, 1,\n+  {\"expensive-optimizations\", &flag_expensive_optimizations, 1,\n    N_(\"Perform a number of minor, expensive optimizations\") },\n-  {\"thread-jumps\", &flag_dummy, 1,\n+  {\"thread-jumps\", &flag_thread_jumps, 1,\n    N_(\"Perform jump threading optimizations\") },\n-  {\"strength-reduce\", &flag_dummy, 1,\n+  {\"strength-reduce\", &flag_strength_reduce, 1,\n    N_(\"Perform strength reduction optimizations\") },\n-  {\"unroll-loops\", &flag_dummy, 1,\n+  {\"unroll-loops\", &flag_unroll_loops, 1,\n    N_(\"Perform loop unrolling when iteration count is known\") },\n-  {\"unroll-all-loops\", &flag_dummy, 1,\n+  {\"unroll-all-loops\", &flag_unroll_all_loops, 1,\n    N_(\"Perform loop unrolling for all loops\") },\n-  {\"old-unroll-loops\", &flag_dummy, 1,\n+  {\"old-unroll-loops\", &flag_old_unroll_loops, 1,\n    N_(\"Perform loop unrolling when iteration count is known\") },\n-  {\"old-unroll-all-loops\", &flag_dummy, 1,\n+  {\"old-unroll-all-loops\", &flag_old_unroll_all_loops, 1,\n    N_(\"Perform loop unrolling for all loops\") },\n-  {\"peel-loops\", &flag_dummy, 1,\n+  {\"peel-loops\", &flag_peel_loops, 1,\n    N_(\"Perform loop peeling\") },\n-  {\"unswitch-loops\", &flag_dummy, 1,\n+  {\"unswitch-loops\", &flag_unswitch_loops, 1,\n    N_(\"Perform loop unswitching\") },\n-  {\"prefetch-loop-arrays\", &flag_dummy, 1,\n+  {\"prefetch-loop-arrays\", &flag_prefetch_loop_arrays, 1,\n    N_(\"Generate prefetch instructions, if available, for arrays in loops\") },\n-  {\"move-all-movables\", &flag_dummy, 1,\n+  {\"move-all-movables\", &flag_move_all_movables, 1,\n    N_(\"Force all loop invariant computations out of loops\") },\n-  {\"reduce-all-givs\", &flag_dummy, 1,\n+  {\"reduce-all-givs\", &flag_reduce_all_givs, 1,\n    N_(\"Strength reduce all loop general induction variables\") },\n-  {\"writable-strings\", &flag_dummy, 1,\n+  {\"writable-strings\", &flag_writable_strings, 1,\n    N_(\"Store strings in writable data section\") },\n-  {\"peephole\", &flag_dummy, 0,\n+  {\"peephole\", &flag_no_peephole, 0,\n    N_(\"Enable machine specific peephole optimizations\") },\n-  {\"force-mem\", &flag_dummy, 1,\n+  {\"force-mem\", &flag_force_mem, 1,\n    N_(\"Copy memory operands into registers before using\") },\n-  {\"force-addr\", &flag_dummy, 1,\n+  {\"force-addr\", &flag_force_addr, 1,\n    N_(\"Copy memory address constants into regs before using\") },\n-  {\"function-cse\", &flag_dummy, 0,\n+  {\"function-cse\", &flag_no_function_cse, 0,\n    N_(\"Allow function addresses to be held in registers\") },\n-  {\"inline-functions\", &flag_dummy, 1,\n+  {\"inline-functions\", &flag_inline_functions, 1,\n    N_(\"Integrate simple functions into their callers\") },\n-  {\"keep-inline-functions\", &flag_dummy, 1,\n+  {\"keep-inline-functions\", &flag_keep_inline_functions, 1,\n    N_(\"Generate code for funcs even if they are fully inlined\") },\n-  {\"inline\", &flag_dummy, 0,\n+  {\"inline\", &flag_no_inline, 0,\n    N_(\"Pay attention to the 'inline' keyword\") },\n-  {\"keep-static-consts\", &flag_dummy, 1,\n+  {\"keep-static-consts\", &flag_keep_static_consts, 1,\n    N_(\"Emit static const variables even if they are not used\") },\n-  {\"syntax-only\", &flag_dummy, 1,\n+  {\"syntax-only\", &flag_syntax_only, 1,\n    N_(\"Check for syntax errors, then stop\") },\n-  {\"shared-data\", &flag_dummy, 1,\n+  {\"shared-data\", &flag_shared_data, 1,\n    N_(\"Mark data as shared rather than private\") },\n-  {\"caller-saves\", &flag_dummy, 1,\n+  {\"caller-saves\", &flag_caller_saves, 1,\n    N_(\"Enable saving registers around function calls\") },\n-  {\"pcc-struct-return\", &flag_dummy, 1,\n+  {\"pcc-struct-return\", &flag_pcc_struct_return, 1,\n    N_(\"Return 'short' aggregates in memory, not registers\") },\n-  {\"reg-struct-return\", &flag_dummy, 0,\n+  {\"reg-struct-return\", &flag_pcc_struct_return, 0,\n    N_(\"Return 'short' aggregates in registers\") },\n-  {\"delayed-branch\", &flag_dummy, 1,\n+  {\"delayed-branch\", &flag_delayed_branch, 1,\n    N_(\"Attempt to fill delay slots of branch instructions\") },\n-  {\"gcse\", &flag_dummy, 1,\n+  {\"gcse\", &flag_gcse, 1,\n    N_(\"Perform the global common subexpression elimination\") },\n-  {\"gcse-lm\", &flag_dummy, 1,\n+  {\"gcse-lm\", &flag_gcse_lm, 1,\n    N_(\"Perform enhanced load motion during global subexpression elimination\") },\n-  {\"gcse-sm\", &flag_dummy, 1,\n+  {\"gcse-sm\", &flag_gcse_sm, 1,\n    N_(\"Perform store motion after global subexpression elimination\") },\n-  {\"branch-target-load-optimize\", &flag_dummy, 1,\n+  {\"branch-target-load-optimize\", &flag_branch_target_load_optimize, 1,\n    N_(\"Perform branch target load optimization before prologue / epilogue threading\") },\n-  {\"branch-target-load-optimize2\", &flag_dummy, 1,\n+  {\"branch-target-load-optimize2\", &flag_branch_target_load_optimize2, 1,\n    N_(\"Perform branch target load optimization after prologue / epilogue threading\") },\n-  {\"loop-optimize\", &flag_dummy, 1,\n+  {\"loop-optimize\", &flag_loop_optimize, 1,\n    N_(\"Perform the loop optimizations\") },\n-  {\"crossjumping\", &flag_dummy, 1,\n+  {\"crossjumping\", &flag_crossjumping, 1,\n    N_(\"Perform cross-jumping optimization\") },\n-  {\"if-conversion\", &flag_dummy, 1,\n+  {\"if-conversion\", &flag_if_conversion, 1,\n    N_(\"Perform conversion of conditional jumps to branchless equivalents\") },\n-  {\"if-conversion2\", &flag_dummy, 1,\n+  {\"if-conversion2\", &flag_if_conversion2, 1,\n    N_(\"Perform conversion of conditional jumps to conditional execution\") },\n-  {\"rerun-cse-after-loop\", &flag_dummy, 1,\n+  {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1,\n    N_(\"Run CSE pass after loop optimizations\") },\n-  {\"rerun-loop-opt\", &flag_dummy, 1,\n+  {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1,\n    N_(\"Run the loop optimizer twice\") },\n-  {\"delete-null-pointer-checks\", &flag_dummy, 1,\n+  {\"delete-null-pointer-checks\", &flag_delete_null_pointer_checks, 1,\n    N_(\"Delete useless null pointer checks\") },\n-  {\"schedule-insns\", &flag_dummy, 1,\n+  {\"schedule-insns\", &flag_schedule_insns, 1,\n    N_(\"Reschedule instructions before register allocation\") },\n-  {\"schedule-insns2\", &flag_dummy, 1,\n+  {\"schedule-insns2\", &flag_schedule_insns_after_reload, 1,\n    N_(\"Reschedule instructions after register allocation\") },\n-  {\"sched-interblock\",&flag_dummy, 1,\n+  {\"sched-interblock\",&flag_schedule_interblock, 1,\n    N_(\"Enable scheduling across basic blocks\") },\n-  {\"sched-spec\",&flag_dummy, 1,\n+  {\"sched-spec\",&flag_schedule_speculative, 1,\n    N_(\"Allow speculative motion of non-loads\") },\n-  {\"sched-spec-load\",&flag_dummy, 1,\n+  {\"sched-spec-load\",&flag_schedule_speculative_load, 1,\n    N_(\"Allow speculative motion of some loads\") },\n-  {\"sched-spec-load-dangerous\",&flag_dummy, 1,\n+  {\"sched-spec-load-dangerous\",&flag_schedule_speculative_load_dangerous, 1,\n    N_(\"Allow speculative motion of more loads\") },\n-  {\"sched2-use-superblocks\", &flag_dummy, 1,\n+  {\"sched2-use-superblocks\", &flag_sched2_use_superblocks, 1,\n    N_(\"If scheduling post reload, do superblock scheduling\") },\n-  {\"sched2-use-traces\", &flag_dummy, 1,\n+  {\"sched2-use-traces\", &flag_sched2_use_traces, 1,\n    N_(\"If scheduling post reload, do trace scheduling\") },\n-  {\"branch-count-reg\",&flag_dummy, 1,\n+  {\"branch-count-reg\",&flag_branch_on_count_reg, 1,\n    N_(\"Replace add,compare,branch with branch on count reg\") },\n-  {\"pic\", &flag_dummy, 1,\n+  {\"pic\", &flag_pic, 1,\n    N_(\"Generate position independent code, if possible\") },\n-  {\"PIC\", &flag_dummy, 2, \"\"},\n-  {\"pie\", &flag_dummy, 1,\n+  {\"PIC\", &flag_pic, 2, \"\"},\n+  {\"pie\", &flag_pie, 1,\n    N_(\"Generate position independent code for executables, if possible\") },\n-  {\"PIE\", &flag_dummy, 2, \"\"},\n-  {\"exceptions\", &flag_dummy, 1,\n+  {\"PIE\", &flag_pie, 2, \"\"},\n+  {\"exceptions\", &flag_exceptions, 1,\n    N_(\"Enable exception handling\") },\n-  {\"unwind-tables\", &flag_dummy, 1,\n+  {\"unwind-tables\", &flag_unwind_tables, 1,\n    N_(\"Just generate unwind tables for exception handling\") },\n-  {\"asynchronous-unwind-tables\", &flag_dummy, 1,\n+  {\"asynchronous-unwind-tables\", &flag_asynchronous_unwind_tables, 1,\n    N_(\"Generate unwind tables exact at each instruction boundary\") },\n-  {\"non-call-exceptions\", &flag_dummy, 1,\n+  {\"non-call-exceptions\", &flag_non_call_exceptions, 1,\n    N_(\"Support synchronous non-call exceptions\") },\n-  {\"profile-arcs\", &flag_dummy, 1,\n+  {\"profile-arcs\", &profile_arc_flag, 1,\n    N_(\"Insert arc based program profiling code\") },\n-  {\"test-coverage\", &flag_dummy, 1,\n+  {\"test-coverage\", &flag_test_coverage, 1,\n    N_(\"Create data files needed by gcov\") },\n-  {\"branch-probabilities\", &flag_dummy, 1,\n+  {\"branch-probabilities\", &flag_branch_probabilities, 1,\n    N_(\"Use profiling information for branch probabilities\") },\n-  {\"profile-values\", &flag_profile_values, 1,\n-   N_(\"Insert code to profile values of expressions\") },\n-  {\"profile\", &flag_dummy, 1,\n+  {\"profile\", &profile_flag, 1,\n    N_(\"Enable basic program profiling code\") },\n-  {\"reorder-blocks\", &flag_dummy, 1,\n+  {\"reorder-blocks\", &flag_reorder_blocks, 1,\n    N_(\"Reorder basic blocks to improve code placement\") },\n-  {\"reorder-functions\", &flag_dummy, 1,\n+  {\"reorder-functions\", &flag_reorder_functions, 1,\n    N_(\"Reorder functions to improve code placement\") },\n-  {\"rename-registers\", &flag_dummy, 1,\n+  {\"rename-registers\", &flag_rename_registers, 1,\n    N_(\"Do the register renaming optimization pass\") },\n-  {\"cprop-registers\", &flag_dummy, 1,\n+  {\"cprop-registers\", &flag_cprop_registers, 1,\n    N_(\"Do the register copy-propagation optimization pass\") },\n-  {\"common\", &flag_dummy, 0,\n+  {\"common\", &flag_no_common, 0,\n    N_(\"Do not put uninitialized globals in the common section\") },\n-  {\"inhibit-size-directive\", &flag_dummy, 1,\n+  {\"inhibit-size-directive\", &flag_inhibit_size_directive, 1,\n    N_(\"Do not generate .size directives\") },\n-  {\"function-sections\", &flag_dummy, 1,\n+  {\"function-sections\", &flag_function_sections, 1,\n    N_(\"place each function into its own section\") },\n-  {\"data-sections\", &flag_dummy, 1,\n+  {\"data-sections\", &flag_data_sections, 1,\n    N_(\"place data items into their own section\") },\n-  {\"verbose-asm\", &flag_dummy, 1,\n+  {\"verbose-asm\", &flag_verbose_asm, 1,\n    N_(\"Add extra commentary to assembler output\") },\n-  {\"gnu-linker\", &flag_dummy, 1,\n+  {\"gnu-linker\", &flag_gnu_linker, 1,\n    N_(\"Output GNU ld formatted global initializers\") },\n-  {\"regmove\", &flag_dummy, 1,\n+  {\"regmove\", &flag_regmove, 1,\n    N_(\"Enables a register move optimization\") },\n-  {\"optimize-register-move\", &flag_dummy, 1,\n+  {\"optimize-register-move\", &flag_regmove, 1,\n    N_(\"Do the full regmove optimization pass\") },\n-  {\"pack-struct\", &flag_dummy, 1,\n+  {\"pack-struct\", &flag_pack_struct, 1,\n    N_(\"Pack structure members together without holes\") },\n-  {\"stack-check\", &flag_dummy, 1,\n+  {\"stack-check\", &flag_stack_check, 1,\n    N_(\"Insert stack checking code into the program\") },\n-  {\"argument-alias\", &flag_dummy, 0,\n+  {\"argument-alias\", &flag_argument_noalias, 0,\n    N_(\"Specify that arguments may alias each other & globals\") },\n-  {\"argument-noalias\", &flag_dummy, 1,\n+  {\"argument-noalias\", &flag_argument_noalias, 1,\n    N_(\"Assume arguments may alias globals but not each other\") },\n-  {\"argument-noalias-global\", &flag_dummy, 2,\n+  {\"argument-noalias-global\", &flag_argument_noalias, 2,\n    N_(\"Assume arguments do not alias each other or globals\") },\n-  {\"strict-aliasing\", &flag_dummy, 1,\n+  {\"strict-aliasing\", &flag_strict_aliasing, 1,\n    N_(\"Assume strict aliasing rules apply\") },\n-  {\"align-loops\", &flag_dummy, 0,\n+  {\"align-loops\", &align_loops, 0,\n    N_(\"Align the start of loops\") },\n-  {\"align-jumps\", &flag_dummy, 0,\n+  {\"align-jumps\", &align_jumps, 0,\n    N_(\"Align labels which are only reached by jumping\") },\n-  {\"align-labels\", &flag_dummy, 0,\n+  {\"align-labels\", &align_labels, 0,\n    N_(\"Align all labels\") },\n-  {\"align-functions\", &flag_dummy, 0,\n+  {\"align-functions\", &align_functions, 0,\n    N_(\"Align the start of functions\") },\n-  {\"merge-constants\", &flag_dummy, 1,\n+  {\"merge-constants\", &flag_merge_constants, 1,\n    N_(\"Attempt to merge identical constants across compilation units\") },\n-  {\"merge-all-constants\", &flag_dummy, 2,\n+  {\"merge-all-constants\", &flag_merge_constants, 2,\n    N_(\"Attempt to merge identical constants and constant variables\") },\n-  {\"dump-unnumbered\", &flag_dummy, 1,\n+  {\"dump-unnumbered\", &flag_dump_unnumbered, 1,\n    N_(\"Suppress output of instruction numbers and line number notes in debugging dumps\") },\n-  {\"instrument-functions\", &flag_dummy, 1,\n+  {\"instrument-functions\", &flag_instrument_function_entry_exit, 1,\n    N_(\"Instrument function entry/exit with profiling calls\") },\n-  {\"zero-initialized-in-bss\", &flag_dummy, 1,\n+  {\"zero-initialized-in-bss\", &flag_zero_initialized_in_bss, 1,\n    N_(\"Put zero initialized data in the bss section\") },\n-  {\"ssa\", &flag_dummy, 1,\n+  {\"ssa\", &flag_ssa, 1,\n    N_(\"Enable SSA optimizations\") },\n-  {\"ssa-ccp\", &flag_dummy, 1,\n+  {\"ssa-ccp\", &flag_ssa_ccp, 1,\n    N_(\"Enable SSA conditional constant propagation\") },\n-  {\"ssa-dce\", &flag_dummy, 1,\n+  {\"ssa-dce\", &flag_ssa_dce, 1,\n    N_(\"Enable aggressive SSA dead code elimination\") },\n-  {\"leading-underscore\", &flag_dummy, 1,\n+  {\"leading-underscore\", &flag_leading_underscore, 1,\n    N_(\"External symbols have a leading underscore\") },\n-  {\"ident\", &flag_dummy, 0,\n+  {\"ident\", &flag_no_ident, 0,\n    N_(\"Process #ident directives\") },\n-  { \"peephole2\", &flag_dummy, 1,\n+  { \"peephole2\", &flag_peephole2, 1,\n    N_(\"Enables an rtl peephole pass run before sched2\") },\n-  {\"finite-math-only\", &flag_dummy, 1,\n+  {\"finite-math-only\", &flag_finite_math_only, 1,\n    N_(\"Assume no NaNs or +-Infs are generated\") },\n-  { \"guess-branch-probability\", &flag_dummy, 1,\n+  { \"guess-branch-probability\", &flag_guess_branch_prob, 1,\n    N_(\"Enables guessing of branch probabilities\") },\n-  {\"math-errno\", &flag_dummy, 1,\n+  {\"math-errno\", &flag_errno_math, 1,\n    N_(\"Set errno after built-in math functions\") },\n-  {\"trapping-math\", &flag_dummy, 1,\n+  {\"trapping-math\", &flag_trapping_math, 1,\n    N_(\"Floating-point operations can trap\") },\n-  {\"unsafe-math-optimizations\", &flag_dummy, 1,\n+  {\"unsafe-math-optimizations\", &flag_unsafe_math_optimizations, 1,\n    N_(\"Allow math optimizations that may violate IEEE or ANSI standards\") },\n-  {\"signaling-nans\", &flag_dummy, 1,\n+  {\"signaling-nans\", &flag_signaling_nans, 1,\n    N_(\"Disable optimizations observable by IEEE signaling NaNs\") },\n-  {\"bounds-check\", &flag_dummy, 1,\n+  {\"bounds-check\", &flag_bounds_check, 1,\n    N_(\"Generate code to check bounds before indexing arrays\") },\n-  {\"single-precision-constant\", &flag_dummy, 1,\n+  {\"single-precision-constant\", &flag_single_precision_constant, 1,\n    N_(\"Convert floating point constant to single precision constant\") },\n-  {\"time-report\", &flag_dummy, 1,\n+  {\"time-report\", &time_report, 1,\n    N_(\"Report time taken by each compiler pass at end of run\") },\n-  {\"mem-report\", &flag_dummy, 1,\n+  {\"mem-report\", &mem_report, 1,\n    N_(\"Report on permanent memory allocation at end of run\") },\n-  { \"trapv\", &flag_dummy, 1,\n+  { \"trapv\", &flag_trapv, 1,\n    N_(\"Trap for signed overflow in addition / subtraction / multiplication\") },\n-  { \"wrapv\", &flag_dummy, 1,\n+  { \"wrapv\", &flag_wrapv, 1,\n    N_(\"Assume signed arithmetic overflow wraps around\") },\n-  { \"new-ra\", &flag_dummy, 1,\n+  { \"new-ra\", &flag_new_regalloc, 1,\n    N_(\"Use graph coloring register allocation.\") },\n };\n "}]}