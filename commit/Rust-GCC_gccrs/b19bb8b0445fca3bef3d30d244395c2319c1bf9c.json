{"sha": "b19bb8b0445fca3bef3d30d244395c2319c1bf9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE5YmI4YjA0NDVmY2EzYmVmM2QzMGQyNDQzOTVjMjMxOWMxYmY5Yw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2005-10-02T20:15:55Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-10-02T20:15:55Z"}, "message": "re PR tree-optimization/24142 (VRP miscompiles unzip inflate.c)\n\n\n\tPR 24142\n\t* tree-vrp.c (vrp_meet): Fix call to range_includes_zero_p in\n\tcase of anti-ranges.\n\ntestsuite/\n\n\tPR 24142\n\t* gcc.c-torture/execute/pr24142.c: New test.\n\nFrom-SVN: r104874", "tree": {"sha": "03e110a82bcb3ef30244905ac0866fc09e18c916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e110a82bcb3ef30244905ac0866fc09e18c916"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b19bb8b0445fca3bef3d30d244395c2319c1bf9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b19bb8b0445fca3bef3d30d244395c2319c1bf9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b19bb8b0445fca3bef3d30d244395c2319c1bf9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b19bb8b0445fca3bef3d30d244395c2319c1bf9c/comments", "author": null, "committer": null, "parents": [{"sha": "f13c9b2c76d81cebc647765b6e4b99c952cc594d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f13c9b2c76d81cebc647765b6e4b99c952cc594d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f13c9b2c76d81cebc647765b6e4b99c952cc594d"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "e27296ff10057b4e5c8396aa4fdade5e6dc3b2da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b19bb8b0445fca3bef3d30d244395c2319c1bf9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b19bb8b0445fca3bef3d30d244395c2319c1bf9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b19bb8b0445fca3bef3d30d244395c2319c1bf9c", "patch": "@@ -1,3 +1,9 @@\n+2005-10-02  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 24142\n+\t* tree-vrp.c (vrp_meet): Fix call to range_includes_zero_p in\n+\tcase of anti-ranges.\n+\n 2005-10-02  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/18851"}, {"sha": "98bfad4bc91a8cf00996a04f3009945f291990d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b19bb8b0445fca3bef3d30d244395c2319c1bf9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b19bb8b0445fca3bef3d30d244395c2319c1bf9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b19bb8b0445fca3bef3d30d244395c2319c1bf9c", "patch": "@@ -1,3 +1,8 @@\n+2005-10-02  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 24142\n+\t* gcc.c-torture/execute/pr24142.c: New test.\n+\n 2005-10-01  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR 24141"}, {"sha": "eed3e8bc67934079f3423ba334d7e1002661f580", "filename": "gcc/testsuite/gcc.c-torture/execute/pr24142.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b19bb8b0445fca3bef3d30d244395c2319c1bf9c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr24142.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b19bb8b0445fca3bef3d30d244395c2319c1bf9c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr24142.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr24142.c?ref=b19bb8b0445fca3bef3d30d244395c2319c1bf9c", "patch": "@@ -0,0 +1,19 @@\n+void abort (void);\n+\n+int f (int a, int b)\n+{\n+  if (a == 1)\n+    a = 0;\n+  if (b == 0)\n+    a = 1;\n+  if (a != 0)\n+    return 0;\n+  return 1;\n+}\n+\n+int main (void)\n+{\n+  if (f (1, 1) != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "7d7e0c9e9c37618a81758e0222e145a551be1ce5", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b19bb8b0445fca3bef3d30d244395c2319c1bf9c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b19bb8b0445fca3bef3d30d244395c2319c1bf9c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b19bb8b0445fca3bef3d30d244395c2319c1bf9c", "patch": "@@ -3454,11 +3454,15 @@ vrp_meet (value_range_t *vr0, value_range_t *vr1)\n no_meet:\n   /* The two range VR0 and VR1 do not meet.  Before giving up and\n      setting the result to VARYING, see if we can at least derive a\n-     useful anti-range.  */\n+     useful anti-range.  FIXME, all this nonsense about distinguishing\n+     anti-ranges from ranges is necessary because of the odd\n+     semantics of range_includes_zero_p and friends.  */\n   if (!symbolic_range_p (vr0)\n-      && !range_includes_zero_p (vr0)\n+      && ((vr0->type == VR_RANGE && !range_includes_zero_p (vr0))\n+\t  || (vr0->type == VR_ANTI_RANGE && range_includes_zero_p (vr0)))\n       && !symbolic_range_p (vr1)\n-      && !range_includes_zero_p (vr1))\n+      && ((vr1->type == VR_RANGE && !range_includes_zero_p (vr1))\n+\t  || (vr1->type == VR_ANTI_RANGE && range_includes_zero_p (vr1))))\n     {\n       set_value_range_to_nonnull (vr0, TREE_TYPE (vr0->min));\n "}]}