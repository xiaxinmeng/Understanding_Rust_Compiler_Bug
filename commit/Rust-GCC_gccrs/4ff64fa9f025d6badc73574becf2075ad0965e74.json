{"sha": "4ff64fa9f025d6badc73574becf2075ad0965e74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZmNjRmYTlmMDI1ZDZiYWRjNzM1NzRiZWNmMjA3NWFkMDk2NWU3NA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@merlin.codesourcery.com", "date": "2001-12-25T13:53:56Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-12-25T13:53:56Z"}, "message": "std_limits.h (__glibcpp_xxx_is_modulo): New macros for signed types; default value is true.\n\n\t* include/bits/std_limits.h (__glibcpp_xxx_is_modulo): New\n\tmacros for signed types; default value is true.\n\t(numeric_limits<>::is_modulo): Get value from corresponding\n\t__glibcpp_xxx_is_modulo macro.\n\nFrom-SVN: r48311", "tree": {"sha": "094bedbe05011da9b07991e33ada12acc3dfa5bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/094bedbe05011da9b07991e33ada12acc3dfa5bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ff64fa9f025d6badc73574becf2075ad0965e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff64fa9f025d6badc73574becf2075ad0965e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff64fa9f025d6badc73574becf2075ad0965e74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff64fa9f025d6badc73574becf2075ad0965e74/comments", "author": null, "committer": null, "parents": [{"sha": "cf161a952a5e65b87771c4ce4fd9465fa91a3c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf161a952a5e65b87771c4ce4fd9465fa91a3c87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf161a952a5e65b87771c4ce4fd9465fa91a3c87"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "dcbbda7860bd0fac550c6bfe889fd4f546c19db4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff64fa9f025d6badc73574becf2075ad0965e74/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff64fa9f025d6badc73574becf2075ad0965e74/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4ff64fa9f025d6badc73574becf2075ad0965e74", "patch": "@@ -1,3 +1,10 @@\n+2001-12-25  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+\n+\t* include/bits/std_limits.h (__glibcpp_xxx_is_modulo): New\n+\tmacros for signed types; default value is true.\n+\t(numeric_limits<>::is_modulo): Get value from corresponding\n+\t__glibcpp_xxx_is_modulo macro.\n+\n Sun Dec 23 18:47:24 2001  Jeffrey A Law  (law@redhat.com)\n \n \t* config/os/hpux/bits/os_defines.h: Do not include <_sys/inttypes.h>."}, {"sha": "7a6463625aed66020e330c2ba0bd85e969df172b", "filename": "libstdc++-v3/include/bits/std_limits.h", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff64fa9f025d6badc73574becf2075ad0965e74/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff64fa9f025d6badc73574becf2075ad0965e74/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h?ref=4ff64fa9f025d6badc73574becf2075ad0965e74", "patch": "@@ -245,6 +245,12 @@\n #define __glibcpp_plain_char_traps true\n #define __glibcpp_signed_char_traps true\n #define __glibcpp_unsigned_char_traps true\n+#ifndef __glibcpp_char_is_modulo\n+#define __glibcpp_char_is_modulo true\n+#endif\n+#ifndef __glibcpp_signed_char_is_modulo\n+#define __glibcpp_signed_char_is_modulo true\n+#endif\n #if __glibcpp_char_bits == 8\n #define __glibcpp_signed_char_min __glibcpp_s8_min\n #define __glibcpp_signed_char_max __glibcpp_s8_max\n@@ -301,6 +307,9 @@\n \n #define __glibcpp_signed_short_traps true\n #define __glibcpp_unsigned_short_traps true\n+#ifndef __glibcpp_signed_short_is_modulo\n+#define __glibcpp_signed_short_is_modulo true\n+#endif\n #if __glibcpp_short_bits == 8\n #define __glibcpp_signed_short_min __glibcpp_s8_min\n #define __glibcpp_signed_short_max __glibcpp_s8_max\n@@ -345,6 +354,9 @@\n \n #define __glibcpp_signed_int_traps true\n #define __glibcpp_unsigned_int_traps true\n+#ifndef __glibcpp_signed_int_is_modulo\n+#define __glibcpp_signed_int_is_modulo true\n+#endif\n #if __glibcpp_int_bits == 8\n #define __glibcpp_signed_int_min __glibcpp_s8_min\n #define __glibcpp_signed_int_max __glibcpp_s8_max\n@@ -389,6 +401,9 @@\n \n #define __glibcpp_signed_long_traps true\n #define __glibcpp_unsigned_long_traps true\n+#ifndef __glibcpp_signed_long_is_modulo\n+#define __glibcpp_signed_long_is_modulo true\n+#endif\n #if __glibcpp_long_bits == 8\n #define __glibcpp_signed_long_min __glibcpp_s8_min\n #define __glibcpp_signed_long_max __glibcpp_s8_max\n@@ -433,6 +448,9 @@\n \n #define __glibcpp_signed_long_long_traps true\n #define __glibcpp_signed_long_long_traps true\n+#ifndef __glibcpp_signed_long_long_is_modulo\n+#define __glibcpp_signed_long_long_is_modulo true\n+#endif\n #if __glibcpp_long_long_bits == 8\n #define __glibcpp_signed_long_long_min __glibcpp_s8_min\n #define __glibcpp_signed_long_long_max __glibcpp_s8_max\n@@ -478,6 +496,9 @@\n // wchar_t\n \n #define __glibcpp_wchar_t_traps true\n+#ifndef __glibcpp_wchar_t_is_modulo\n+#define __glibcpp_wchar_t_is_modulo true\n+#endif\n #if __glibcpp_wchar_t_is_signed\n #if __glibcpp_wchar_t_bits == 8\n #define __glibcpp_wchar_t_min __glibcpp_s8_min\n@@ -1121,9 +1142,9 @@ namespace std\n \n       static const bool is_iec559 = false;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = false;\n+      static const bool is_modulo = __glibcpp_char_is_modulo;\n \n-      static const bool traps = __glibcpp_signed_char_traps;\n+      static const bool traps = __glibcpp_char_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -1133,9 +1154,11 @@ namespace std\n #undef __glibcpp_char_digits\n #undef __glibcpp_char_digits10\n #undef __glibcpp_char_is_signed\n+#undef __glibcpp_char_is_modulo\n #undef __glibcpp_char_traps\n \n \n+\n   template<>\n     struct numeric_limits<signed char>\n     {\n@@ -1179,7 +1202,7 @@ namespace std\n \n       static const bool is_iec559 = false;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = false;\n+      static const bool is_modulo = __glibcpp_signed_char_is_modulo;\n \n       static const bool traps = __glibcpp_signed_char_traps;\n       static const bool tinyness_before = false;\n@@ -1190,6 +1213,7 @@ namespace std\n #undef __glibcpp_signed_char_max\n #undef __glibcpp_signed_char_digits\n #undef __glibcpp_signed_char_digits10\n+#undef __glibcpp_signed_char_is_modulo  \n #undef __glibcpp_signed_char_traps  \n \n   template<>\n@@ -1290,7 +1314,7 @@ namespace std\n \n       static const bool is_iec559 = false;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = false;\n+      static const bool is_modulo = __glibcpp_wchar_t_is_modulo;\n \n       static const bool traps = __glibcpp_wchar_t_traps;\n       static const bool tinyness_before = false;\n@@ -1302,6 +1326,7 @@ namespace std\n #undef __glibcpp_wchar_t_digits\n #undef __glibcpp_wchar_t_digits10  \n #undef __glibcpp_wchar_t_is_signed\n+#undef __glibcpp_wchar_t_is_modulo\n #undef __glibcpp_wchar_t_traps  \n   \n   template<>\n@@ -1347,7 +1372,7 @@ namespace std\n \n       static const bool is_iec559 = true;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = false;\n+      static const bool is_modulo = __glibcpp_signed_short_is_modulo;\n \n       static const bool traps = __glibcpp_signed_short_traps;\n       static const bool tinyness_before = false;\n@@ -1358,6 +1383,7 @@ namespace std\n #undef __glibcpp_signed_short_max\n #undef __glibcpp_signed_short_digits\n #undef __glibcpp_signed_short_digits10\n+#undef __glibcpp_signed_short_is_modulo\n #undef __glibcpp_signed_short_traps  \n   \n   template<>\n@@ -1458,7 +1484,7 @@ namespace std\n \n       static const bool is_iec559 = true;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = false;\n+      static const bool is_modulo = __glibcpp_signed_int_is_modulo;\n \n       static const bool traps = __glibcpp_signed_int_traps;\n       static const bool tinyness_before = false;\n@@ -1469,6 +1495,7 @@ namespace std\n #undef __glibcpp_signed_int_max\n #undef __glibcpp_signed_int_digits\n #undef __glibcpp_signed_int_digits10\n+#undef __glibcpp_signed_int_is_modulo\n #undef __glibcpp_signed_int_traps  \n   \n   template<>\n@@ -1569,7 +1596,7 @@ namespace std\n \n       static const bool is_iec559 = true;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = false;\n+      static const bool is_modulo = __glibcpp_signed_long_is_modulo;\n \n       static const bool traps = __glibcpp_signed_long_traps;\n       static const bool tinyness_before = false;\n@@ -1580,6 +1607,7 @@ namespace std\n #undef __glibcpp_signed_long_max\n #undef __glibcpp_signed_long_digits\n #undef __glibcpp_signed_long_digits10\n+#undef __glibcpp_signed_long_is_modulo\n #undef __glibcpp_signed_long_traps  \n   \n   template<>\n@@ -1680,7 +1708,7 @@ namespace std\n       \n       static const bool is_iec559 = true;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = false;\n+      static const bool is_modulo = __glibcpp_signed_long_long_is_modulo;\n \n       static const bool traps = __glibcpp_signed_long_long_traps;\n       static const bool tinyness_before = false;\n@@ -1691,6 +1719,7 @@ namespace std\n #undef __glibcpp_signed_long_long_max\n #undef __glibcpp_signed_long_long_digits\n #undef __glibcpp_signed_long_long_digits10\n+#undef __glibcpp_signed_long_long_is_modulo\n #undef __glibcpp_signed_long_long_traps  \n   \n   template<>"}]}