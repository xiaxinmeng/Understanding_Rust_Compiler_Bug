{"sha": "e966a508e03fe28bfca65a1e60e579fa90355ea6", "node_id": "C_kwDOANBUbNoAKGU5NjZhNTA4ZTAzZmUyOGJmY2E2NWExZTYwZTU3OWZhOTAzNTVlYTY", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-25T16:35:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-26T14:41:58Z"}, "message": "analyzer: fix sense in range::add_bound [PR94362]\n\nMikael Morin spotted that I got the sense wrong when discarding\nredundant constraints in\nr12-6782-gc4b8f3730a80025192fdb485ad2535c165340e41.\n\nFixed as follows, which also moves the rejection of contradictory\nconstraints in range::add_bound to earlier, so that this code can\nbe self-tested.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/94362\n\t* constraint-manager.cc (range::add_bound): Fix tests for\n\tdiscarding redundant constraints.  Perform test for rejecting\n\tunsatisfiable constraints earlier so that they don't update\n\tthe object on failure.\n\t(selftest::test_range): New.\n\t(selftest::test_constant_comparisons): Add test coverage for\n\texisting constraints becoming narrower until they are\n\tunsatisfiable.\n\t(selftest::run_constraint_manager_tests): Call test_range.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "eee404ca818d8d841e878e152b3719f636904a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eee404ca818d8d841e878e152b3719f636904a4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e966a508e03fe28bfca65a1e60e579fa90355ea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e966a508e03fe28bfca65a1e60e579fa90355ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e966a508e03fe28bfca65a1e60e579fa90355ea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e966a508e03fe28bfca65a1e60e579fa90355ea6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "192e4a9fa0880ef153631d5b0de864bc4bbb6a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192e4a9fa0880ef153631d5b0de864bc4bbb6a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192e4a9fa0880ef153631d5b0de864bc4bbb6a91"}], "stats": {"total": 93, "additions": 79, "deletions": 14}, "files": [{"sha": "88b0988513a73350337ccdcf3df9b4dd83afb8e3", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 79, "deletions": 14, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e966a508e03fe28bfca65a1e60e579fa90355ea6/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e966a508e03fe28bfca65a1e60e579fa90355ea6/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=e966a508e03fe28bfca65a1e60e579fa90355ea6", "patch": "@@ -318,35 +318,42 @@ range::add_bound (bound b, enum bound_kind bound_kind)\n       if (m_lower_bound.m_constant)\n \t{\n \t  m_lower_bound.ensure_closed (BK_LOWER);\n-\t  if (!tree_int_cst_lt (b.m_constant,\n-\t\t\t\tm_lower_bound.m_constant))\n+\t  if (tree_int_cst_le (b.m_constant,\n+\t\t\t       m_lower_bound.m_constant))\n \t    return true;\n \t}\n+      if (m_upper_bound.m_constant)\n+\t{\n+\t  m_upper_bound.ensure_closed (BK_UPPER);\n+\t  /* Reject B <= V <= UPPER when B > UPPER.  */\n+\t  if (!tree_int_cst_le (b.m_constant,\n+\t\t\t\tm_upper_bound.m_constant))\n+\t    return false;\n+\t}\n       m_lower_bound = b;\n       break;\n+\n     case BK_UPPER:\n       /* Discard redundant bounds.  */\n       if (m_upper_bound.m_constant)\n \t{\n \t  m_upper_bound.ensure_closed (BK_UPPER);\n-\t  if (tree_int_cst_le (b.m_constant,\n-\t\t\t       m_upper_bound.m_constant))\n+\t  if (!tree_int_cst_lt (b.m_constant,\n+\t\t\t\tm_upper_bound.m_constant))\n \t    return true;\n \t}\n+      if (m_lower_bound.m_constant)\n+\t{\n+\t  m_lower_bound.ensure_closed (BK_LOWER);\n+\t  /* Reject LOWER <= V <= B when LOWER > B.  */\n+\t  if (!tree_int_cst_le (m_lower_bound.m_constant,\n+\t\t\t\tb.m_constant))\n+\t    return false;\n+\t}\n       m_upper_bound = b;\n       break;\n     }\n-  if (m_lower_bound.m_constant\n-      && m_upper_bound.m_constant)\n-    {\n-      m_lower_bound.ensure_closed (BK_LOWER);\n-      m_upper_bound.ensure_closed (BK_UPPER);\n \n-      /* Reject LOWER <= V <= UPPER when LOWER > UPPER.  */\n-      if (!tree_int_cst_le (m_lower_bound.m_constant,\n-\t\t\t    m_upper_bound.m_constant))\n-\treturn false;\n-    }\n   return true;\n }\n \n@@ -3093,6 +3100,49 @@ namespace selftest {\n    These have to be written in terms of a region_model, since\n    the latter is responsible for managing svalue instances.  */\n \n+/* Verify that range::add_bound works as expected.  */\n+\n+static void\n+test_range ()\n+{\n+  tree int_0 = build_int_cst (integer_type_node, 0);\n+  tree int_1 = build_int_cst (integer_type_node, 1);\n+  tree int_2 = build_int_cst (integer_type_node, 2);\n+  tree int_5 = build_int_cst (integer_type_node, 5);\n+\n+  {\n+    range r;\n+    ASSERT_FALSE (r.constrained_to_single_element ());\n+\n+    /* (r >= 1).  */\n+    ASSERT_TRUE (r.add_bound (GE_EXPR, int_1));\n+\n+    /* Redundant.  */\n+    ASSERT_TRUE (r.add_bound (GE_EXPR, int_0));\n+    ASSERT_TRUE (r.add_bound (GT_EXPR, int_0));\n+\n+    ASSERT_FALSE (r.constrained_to_single_element ());\n+\n+    /* Contradiction.  */\n+    ASSERT_FALSE (r.add_bound (LT_EXPR, int_1));\n+\n+    /* (r < 5).  */\n+    ASSERT_TRUE (r.add_bound (LT_EXPR, int_5));\n+    ASSERT_FALSE (r.constrained_to_single_element ());\n+\n+    /* Contradiction.  */\n+    ASSERT_FALSE (r.add_bound (GE_EXPR, int_5));\n+\n+    /* (r < 2).  */\n+    ASSERT_TRUE (r.add_bound (LT_EXPR, int_2));\n+    ASSERT_TRUE (r.constrained_to_single_element ());\n+\n+    /* Redundant.  */\n+    ASSERT_TRUE (r.add_bound (LE_EXPR, int_1));\n+    ASSERT_TRUE (r.constrained_to_single_element ());\n+  }\n+}\n+\n /* Verify that setting and getting simple conditions within a region_model\n    work (thus exercising the underlying constraint_manager).  */\n \n@@ -3700,6 +3750,20 @@ test_constant_comparisons ()\n       ADD_SAT_CONSTRAINT (model, int_3, LT_EXPR, a);\n       ADD_UNSAT_CONSTRAINT (model, a, LT_EXPR, int_4);\n     }\n+    {\n+      region_model model (&mgr);\n+      ADD_SAT_CONSTRAINT (model, int_1, LT_EXPR, a);\n+      ADD_SAT_CONSTRAINT (model, int_3, LT_EXPR, a);\n+      ADD_SAT_CONSTRAINT (model, a, LT_EXPR, int_5);\n+      ADD_UNSAT_CONSTRAINT (model, a, LT_EXPR, int_4);\n+    }\n+    {\n+      region_model model (&mgr);\n+      ADD_SAT_CONSTRAINT (model, int_1, LT_EXPR, a);\n+      ADD_SAT_CONSTRAINT (model, a, LT_EXPR, int_5);\n+      ADD_SAT_CONSTRAINT (model, int_3, LT_EXPR, a);\n+      ADD_UNSAT_CONSTRAINT (model, a, LT_EXPR, int_4);\n+    }\n     {\n       region_model model (&mgr);\n       ADD_SAT_CONSTRAINT (model, a, LT_EXPR, int_4);\n@@ -4323,6 +4387,7 @@ run_constraint_manager_tests (bool transitivity)\n   int saved_flag_analyzer_transitivity = flag_analyzer_transitivity;\n   flag_analyzer_transitivity = transitivity;\n \n+  test_range ();\n   test_constraint_conditions ();\n   if (flag_analyzer_transitivity)\n     {"}]}