{"sha": "fcf6fea382f65930cd4f32f7661bc5d64d1559b4", "node_id": "C_kwDOANBUbNoAKGZjZjZmZWEzODJmNjU5MzBjZDRmMzJmNzY2MWJjNWQ2NGQxNTU5YjQ", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-29T12:59:18Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-31T09:16:59Z"}, "message": "ast: Add better assertion on AST fragments\n\nCo-authored-by: philberty <philip.herron@embecosm.com>", "tree": {"sha": "1d032370d7b397f787fc001b239550a5d7ac98d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d032370d7b397f787fc001b239550a5d7ac98d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcf6fea382f65930cd4f32f7661bc5d64d1559b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf6fea382f65930cd4f32f7661bc5d64d1559b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcf6fea382f65930cd4f32f7661bc5d64d1559b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf6fea382f65930cd4f32f7661bc5d64d1559b4/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "842829a591c39c24332c3605606f5d89ff89f7d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842829a591c39c24332c3605606f5d89ff89f7d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842829a591c39c24332c3605606f5d89ff89f7d6"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "e9e16e77f65d8175c5e05d38f6c3a342d20672cf", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf6fea382f65930cd4f32f7661bc5d64d1559b4/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf6fea382f65930cd4f32f7661bc5d64d1559b4/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=fcf6fea382f65930cd4f32f7661bc5d64d1559b4", "patch": "@@ -1819,7 +1819,7 @@ class SingleASTNode\n     return true;\n   }\n \n-  std::string as_string ()\n+  std::string as_string () const\n   {\n     switch (kind)\n       {\n@@ -1869,14 +1869,45 @@ class ASTFragment\n    */\n \n   bool is_single_fragment () const { return nodes.size () == 1; }\n-  bool is_single_fragment (SingleASTNode::NodeType expected) const\n+\n+  bool is_single_fragment_of_kind (SingleASTNode::NodeType expected) const\n   {\n     return is_single_fragment () && nodes[0].get_kind () == expected;\n   }\n \n-  bool is_single_fragment_kind (SingleASTNode::NodeType kind) const\n+  void assert_single_fragment (SingleASTNode::NodeType expected) const\n   {\n-    return is_single_fragment () && nodes[0].get_kind () == kind;\n+    static const std::map<SingleASTNode::NodeType, const char *> str_map = {\n+      {SingleASTNode::NodeType::IMPL, \"impl\"},\n+      {SingleASTNode::NodeType::ITEM, \"item\"},\n+      {SingleASTNode::NodeType::TYPE, \"type\"},\n+      {SingleASTNode::NodeType::EXPRESSION, \"expr\"},\n+      {SingleASTNode::NodeType::STMT, \"stmt\"},\n+      {SingleASTNode::NodeType::EXTERN, \"extern\"},\n+      {SingleASTNode::NodeType::TRAIT, \"trait\"},\n+      {SingleASTNode::NodeType::TRAIT_IMPL, \"trait impl\"},\n+    };\n+\n+    auto actual = nodes[0].get_kind ();\n+    auto fail = false;\n+\n+    if (!is_single_fragment ())\n+      {\n+\trust_error_at (Location (), \"fragment is not single\");\n+\tfail = true;\n+      }\n+\n+    if (actual != expected)\n+      {\n+\trust_error_at (\n+\t  Location (),\n+\t  \"invalid fragment operation: expected %qs node, got %qs node\",\n+\t  str_map.find (expected)->second,\n+\t  str_map.find (nodes[0].get_kind ())->second);\n+\tfail = true;\n+      }\n+\n+    rust_assert (!fail);\n   }\n \n public:\n@@ -1920,23 +1951,23 @@ class ASTFragment\n \n   bool is_expression_fragment () const\n   {\n-    return is_single_fragment (SingleASTNode::NodeType::EXPRESSION);\n+    return is_single_fragment_of_kind (SingleASTNode::NodeType::EXPRESSION);\n   }\n \n   bool is_type_fragment () const\n   {\n-    return is_single_fragment (SingleASTNode::NodeType::TYPE);\n+    return is_single_fragment_of_kind (SingleASTNode::NodeType::TYPE);\n   }\n \n   std::unique_ptr<Expr> take_expression_fragment ()\n   {\n-    rust_assert (is_single_fragment_kind (SingleASTNode::NodeType::EXPRESSION));\n+    assert_single_fragment (SingleASTNode::NodeType::EXPRESSION);\n     return nodes[0].take_expr ();\n   }\n \n   std::unique_ptr<Type> take_type_fragment ()\n   {\n-    rust_assert (is_single_fragment_kind (SingleASTNode::NodeType::TYPE));\n+    assert_single_fragment (SingleASTNode::NodeType::TYPE);\n     return nodes[0].take_type ();\n   }\n "}]}