{"sha": "27d79c2181523833c856dfefd204f1aef403a86f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkNzljMjE4MTUyMzgzM2M4NTZkZmVmZDIwNGYxYWVmNDAzYTg2Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-09-01T13:37:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-09-01T13:37:53Z"}, "message": "tree-ssa-pre.c (phi_translate_1): Avoid re-allocating the operands vector in most cases.\n\n2014-09-01  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (phi_translate_1): Avoid re-allocating the\n\toperands vector in most cases.  Remove redundant code.\n\nFrom-SVN: r214794", "tree": {"sha": "326bea4886133c94d38c752b93a8fffe49e2fd4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/326bea4886133c94d38c752b93a8fffe49e2fd4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d79c2181523833c856dfefd204f1aef403a86f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d79c2181523833c856dfefd204f1aef403a86f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d79c2181523833c856dfefd204f1aef403a86f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d79c2181523833c856dfefd204f1aef403a86f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3b3d993ee46b4cf17ff91af8d2b973364aff166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b3d993ee46b4cf17ff91af8d2b973364aff166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b3d993ee46b4cf17ff91af8d2b973364aff166"}], "stats": {"total": 49, "additions": 18, "deletions": 31}, "files": [{"sha": "5516577f7096130be6aafbe88007846ff5d431b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d79c2181523833c856dfefd204f1aef403a86f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d79c2181523833c856dfefd204f1aef403a86f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27d79c2181523833c856dfefd204f1aef403a86f", "patch": "@@ -1,3 +1,8 @@\n+2014-09-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (phi_translate_1): Avoid re-allocating the\n+\toperands vector in most cases.  Remove redundant code.\n+\n 2014-09-01  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/vxworksae.h (VXWORKSAE_TARGET_DIR): Rely on"}, {"sha": "399777c2d15064ab8be9c4e52d871ddfdccad3ac", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d79c2181523833c856dfefd204f1aef403a86f/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d79c2181523833c856dfefd204f1aef403a86f/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=27d79c2181523833c856dfefd204f1aef403a86f", "patch": "@@ -1536,12 +1536,11 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \ttree newvuse = vuse;\n \tvec<vn_reference_op_s> newoperands = vNULL;\n \tbool changed = false, same_valid = true;\n-\tunsigned int i, j, n;\n+\tunsigned int i, n;\n \tvn_reference_op_t operand;\n \tvn_reference_t newref;\n \n-\tfor (i = 0, j = 0;\n-\t     operands.iterate (i, &operand); i++, j++)\n+\tfor (i = 0; operands.iterate (i, &operand); i++)\n \t  {\n \t    pre_expr opresult;\n \t    pre_expr leader;\n@@ -1585,6 +1584,8 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\tnewoperands.release ();\n \t\treturn NULL;\n \t      }\n+\t    if (!changed)\n+\t      continue;\n \t    if (!newoperands.exists ())\n \t      newoperands = operands.copy ();\n \t    /* We may have changed from an SSA_NAME to a constant */\n@@ -1594,36 +1595,14 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    newop.op0 = op[0];\n \t    newop.op1 = op[1];\n \t    newop.op2 = op[2];\n-\t    /* If it transforms a non-constant ARRAY_REF into a constant\n-\t       one, adjust the constant offset.  */\n-\t    if (newop.opcode == ARRAY_REF\n-\t\t&& newop.off == -1\n-\t\t&& TREE_CODE (op[0]) == INTEGER_CST\n-\t\t&& TREE_CODE (op[1]) == INTEGER_CST\n-\t\t&& TREE_CODE (op[2]) == INTEGER_CST)\n-\t      {\n-\t\toffset_int off = ((wi::to_offset (op[0])\n-\t\t\t\t   - wi::to_offset (op[1]))\n-\t\t\t\t  * wi::to_offset (op[2]));\n-\t\tif (wi::fits_shwi_p (off))\n-\t\t  newop.off = off.to_shwi ();\n-\t      }\n-\t    newoperands[j] = newop;\n-\t    /* If it transforms from an SSA_NAME to an address, fold with\n-\t       a preceding indirect reference.  */\n-\t    if (j > 0 && op[0] && TREE_CODE (op[0]) == ADDR_EXPR\n-\t\t&& newoperands[j - 1].opcode == MEM_REF)\n-\t      vn_reference_fold_indirect (&newoperands, &j);\n-\t  }\n-\tif (i != operands.length ())\n-\t  {\n-\t    newoperands.release ();\n-\t    return NULL;\n+\t    newoperands[i] = newop;\n \t  }\n+\tgcc_checking_assert (i == operands.length ());\n \n \tif (vuse)\n \t  {\n-\t    newvuse = translate_vuse_through_block (newoperands,\n+\t    newvuse = translate_vuse_through_block (newoperands.exists ()\n+\t\t\t\t\t\t    ? newoperands : operands,\n \t\t\t\t\t\t    ref->set, ref->type,\n \t\t\t\t\t\t    vuse, phiblock, pred,\n \t\t\t\t\t\t    &same_valid);\n@@ -1641,7 +1620,8 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \n \t    tree result = vn_reference_lookup_pieces (newvuse, ref->set,\n \t\t\t\t\t\t      ref->type,\n-\t\t\t\t\t\t      newoperands,\n+\t\t\t\t\t\t      newoperands.exists ()\n+\t\t\t\t\t\t      ? newoperands : operands,\n \t\t\t\t\t\t      &newref, VN_WALK);\n \t    if (result)\n \t      newoperands.release ();\n@@ -1700,11 +1680,13 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\t  }\n \t\telse\n \t\t  new_val_id = ref->value_id;\n+\t\tif (!newoperands.exists ())\n+\t\t  newoperands = operands.copy ();\n \t\tnewref = vn_reference_insert_pieces (newvuse, ref->set,\n \t\t\t\t\t\t     ref->type,\n \t\t\t\t\t\t     newoperands,\n \t\t\t\t\t\t     result, new_val_id);\n-\t\tnewoperands.create (0);\n+\t\tnewoperands = vNULL;\n \t\tPRE_EXPR_REFERENCE (expr) = newref;\n \t\tconstant = fully_constant_expression (expr);\n \t\tif (constant != expr)"}]}