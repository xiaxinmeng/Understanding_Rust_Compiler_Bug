{"sha": "ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY0ZWIwYjVmZjRjNzYwN2UxZmY3ZTBiZTY3ZjRhMGMwOWNhYTMyNg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-06T17:38:18Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-06T17:38:18Z"}, "message": "decl.c (build_enumerator): Use add_double and int_fits_type_p instead of cp_build_binary_op...\n\ncp:\n\t* decl.c (build_enumerator): Use add_double and int_fits_type_p\n\tinstead of cp_build_binary_op, to avoid creating short-lived trees.\n\t* parser.c (cp_parse_type_specifier <RID_ENUM>): Use two-token\n\tlookahead instead of backtracking.  Move some code to avoid a\n\tconditional branch.\n\t(cp_parser_enum_specifier): Avoid duplication of effort with caller.\n\tUse cp_lexer_next_token_is/cp_lexer_next_token_is_not as appropriate.\n\t(cp_parser_enumerator_list, cp_parser_enumerator_definition):\n\tUse cp_lexer_next_token_is/cp_lexer_next_token_is_not as appropriate.\ntestsuite:\n\t* g++.old-deja/g++.other/enum2.C: Move dg-error markers to\n\treflect changed line numbering of diagnostics.\n\nFrom-SVN: r87121", "tree": {"sha": "076d3a2ac346783bfed885fdb4b84add325e5754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/076d3a2ac346783bfed885fdb4b84add325e5754"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326/comments", "author": null, "committer": null, "parents": [{"sha": "8a57cd3d5e63ab1e0ec1127ec548d535993b71c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a57cd3d5e63ab1e0ec1127ec548d535993b71c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a57cd3d5e63ab1e0ec1127ec548d535993b71c4"}], "stats": {"total": 179, "additions": 103, "deletions": 76}, "files": [{"sha": "fd9b97d66775a2f616335a5acdb750ea71d97f8c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326", "patch": "@@ -1,3 +1,15 @@\n+2004-09-06  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* decl.c (build_enumerator): Use add_double and int_fits_type_p\n+\tinstead of cp_build_binary_op, to avoid creating short-lived trees.\n+\t* parser.c (cp_parse_type_specifier <RID_ENUM>): Use two-token\n+\tlookahead instead of backtracking.  Move some code to avoid a\n+\tconditional branch.\n+\t(cp_parser_enum_specifier): Avoid duplication of effort with caller.\n+\tUse cp_lexer_next_token_is/cp_lexer_next_token_is_not as appropriate.\n+\t(cp_parser_enumerator_list, cp_parser_enumerator_definition):\n+\tUse cp_lexer_next_token_is/cp_lexer_next_token_is_not as appropriate.\n+\n 2004-09-04  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* decl.c (grok_declarator): Remove a redundant semicolon.\n@@ -17,7 +29,7 @@\n \tdefine a stub macro that expands to NULL.\n \t(cp_lexer_new_main): Only set debugging_p if ENABLE_CHECKING set.\n \t(cp_lexer_new_from_tokens): Likewise.\n-\t\n+\n 2004-09-03  Jan Hubicka  <jh@suse.cz>\n \n \t* decl.c (finish_function): Clean out pointers we no longer need.\n@@ -36,7 +48,7 @@\n \n \t* cp-tree.h (DECL_CONSTRUCTION_VTABLE_P): New macro.\n \t* class.c (build_ctor_vtbl_group): Set DECL_CONSTRUCTION_VTABLE_P.\n-\t* decl2.c (determine_visibility): Honor \n+\t* decl2.c (determine_visibility): Honor\n \tTARGET_CXX_EXPORT_CLASS_DATA.\n \n \t* class.c (key_method): Rename to ...\n@@ -76,7 +88,7 @@\n \tLANG_HOOKS_ATTRIBUTE_TABLE, LANG_HOOKS_TREE_INLINING_WALK_SUBTREES,\n \tLANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN,\n \tLANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS,\n-\tLANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P, \n+\tLANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P,\n \tLANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P,\n \tLANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P,\n \tLANG_HOOKS_TREE_DUMP_DUMP_TREE_FN,\n@@ -95,7 +107,7 @@\n \t* cp-tree.h (cp_finish_file): New prototype.\n \t* decl.c: Do not include gtype-cp.h.\n \t* decl2.c (finish_file): Rename to cp_finish_file.\n-\t\n+\n 2004-08-31  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/17221\n@@ -403,7 +415,7 @@\n \tbuild_dynamic_cast_1, ptr_initializer, ptm_initializer,\n \tget_pseudo_ti_init): Likewise.\n \t* search.c (get_dynamic_cast_base_type): Likewise.\n-\t\n+\n 2004-08-25  Zack Weinberg  <zack@codesourcery.com>\n \n \t* class.c, search.c: Remove references to DWARF_DEBUG."}, {"sha": "5cb43d2b3705d6be1c99594770a424d895eb3c02", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326", "patch": "@@ -9520,18 +9520,25 @@ build_enumerator (tree name, tree value, tree enumtype)\n       /* Default based on previous value.  */\n       if (value == NULL_TREE)\n \t{\n-\t  tree prev_value;\n-\n \t  if (TYPE_VALUES (enumtype))\n \t    {\n-\t      /* The next value is the previous value ...  */\n+\t      HOST_WIDE_INT hi;\n+\t      unsigned HOST_WIDE_INT lo;\n+\t      tree prev_value;\n+\t      bool overflowed;\n+\n+\t      /* The next value is the previous value plus one.  We can\n+\t         safely assume that the previous value is an INTEGER_CST.\n+\t\t add_double doesn't know the type of the target expression,\n+\t\t so we must check with int_fits_type_p as well.  */\n \t      prev_value = DECL_INITIAL (TREE_VALUE (TYPE_VALUES (enumtype)));\n-\t      /* ... plus one.  */\n-\t      value = cp_build_binary_op (PLUS_EXPR,\n-\t\t\t\t\t  prev_value,\n-\t\t\t\t\t  integer_one_node);\n+\t      overflowed = add_double (TREE_INT_CST_LOW (prev_value),\n+\t\t\t\t       TREE_INT_CST_HIGH (prev_value),\n+\t\t\t\t       1, 0, &lo, &hi);\n+\t      value = build_int_cst_wide (TREE_TYPE (prev_value), lo, hi);\n+\t      overflowed |= !int_fits_type_p (value, TREE_TYPE (prev_value));\n \n-\t      if (tree_int_cst_lt (value, prev_value))\n+\t      if (overflowed)\n \t\terror (\"overflow in enumeration values at `%D'\", name);\n \t    }\n \t  else"}, {"sha": "6d56f976c62b6426cbaa1e76c27bd417459ebbe9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 49, "deletions": 46, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326", "patch": "@@ -9265,21 +9265,36 @@ cp_parser_type_specifier (cp_parser* parser,\n   keyword = token->keyword;\n   switch (keyword)\n     {\n+    case RID_ENUM:\n+      /* 'enum' [identifier] '{' introduces an enum-specifier;\n+\t 'enum' <anything else> introduces an elaborated-type-specifier.  */\n+      if (cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_OPEN_BRACE\n+\t  || (cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_NAME\n+\t      && cp_lexer_peek_nth_token (parser->lexer, 3)->type\n+\t         == CPP_OPEN_BRACE))\n+\t{\n+\t  type_spec = cp_parser_enum_specifier (parser);\n+\t  if (declares_class_or_enum)\n+\t    *declares_class_or_enum = 2;\n+\t  if (decl_specs)\n+\t    cp_parser_set_decl_spec_type (decl_specs,\n+\t\t\t\t\t  type_spec,\n+\t\t\t\t\t  /*user_defined_p=*/true);\n+\t  return type_spec;\n+\t}\n+      else\n+\tgoto elaborated_type_specifier;\n+\n       /* Any of these indicate either a class-specifier, or an\n \t elaborated-type-specifier.  */\n     case RID_CLASS:\n     case RID_STRUCT:\n     case RID_UNION:\n-    case RID_ENUM:\n       /* Parse tentatively so that we can back up if we don't find a\n-\t class-specifier or enum-specifier.  */\n+\t class-specifier.  */\n       cp_parser_parse_tentatively (parser);\n-      /* Look for the class-specifier or enum-specifier.  */\n-      if (keyword == RID_ENUM)\n-\ttype_spec = cp_parser_enum_specifier (parser);\n-      else\n-\ttype_spec = cp_parser_class_specifier (parser);\n-\n+      /* Look for the class-specifier.  */\n+      type_spec = cp_parser_class_specifier (parser);\n       /* If that worked, we're done.  */\n       if (cp_parser_parse_definitely (parser))\n \t{\n@@ -9293,18 +9308,19 @@ cp_parser_type_specifier (cp_parser* parser,\n \t}\n \n       /* Fall through.  */\n+    elaborated_type_specifier:\n+      /* We're declaring (not defining) a class or enum.  */\n+      if (declares_class_or_enum)\n+\t*declares_class_or_enum = 1;\n \n+      /* Fall through.  */\n     case RID_TYPENAME:\n       /* Look for an elaborated-type-specifier.  */\n       type_spec\n \t= (cp_parser_elaborated_type_specifier\n \t   (parser,\n \t    decl_specs && decl_specs->specs[(int) ds_friend],\n \t    is_declaration));\n-      /* We're declaring a class or enum -- unless we're using\n-\t `typename'.  */\n-      if (declares_class_or_enum && keyword != RID_TYPENAME)\n-\t*declares_class_or_enum = 1;\n       if (decl_specs)\n \tcp_parser_set_decl_spec_type (decl_specs,\n \t\t\t\t      type_spec,\n@@ -9906,40 +9922,33 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n static tree\n cp_parser_enum_specifier (cp_parser* parser)\n {\n-  cp_token *token;\n-  tree identifier = NULL_TREE;\n+  tree identifier;\n   tree type;\n \n-  /* Look for the `enum' keyword.  */\n-  if (!cp_parser_require_keyword (parser, RID_ENUM, \"`enum'\"))\n-    return error_mark_node;\n-  /* Peek at the next token.  */\n-  token = cp_lexer_peek_token (parser->lexer);\n+  /* Caller guarantees that the current token is 'enum', an identifier\n+     possibly follows, and the token after that is an opening brace.\n+     If we don't have an identifier, fabricate an anonymous name for\n+     the enumeration being defined.  */\n+  cp_lexer_consume_token (parser->lexer);\n \n-  /* See if it is an identifier.  */\n-  if (token->type == CPP_NAME)\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n     identifier = cp_parser_identifier (parser);\n+  else\n+    identifier = make_anon_name ();\n \n-  /* Look for the `{'.  */\n-  if (!cp_parser_require (parser, CPP_OPEN_BRACE, \"`{'\"))\n-    return error_mark_node;\n-\n-  /* At this point, we're going ahead with the enum-specifier, even\n-     if some other problem occurs.  */\n-  cp_parser_commit_to_tentative_parse (parser);\n+  cp_lexer_consume_token (parser->lexer);\n \n   /* Issue an error message if type-definitions are forbidden here.  */\n   cp_parser_check_type_definition (parser);\n \n   /* Create the new type.  */\n-  type = start_enum (identifier ? identifier : make_anon_name ());\n+  type = start_enum (identifier);\n \n-  /* Peek at the next token.  */\n-  token = cp_lexer_peek_token (parser->lexer);\n-  /* If it's not a `}', then there are some enumerators.  */\n-  if (token->type != CPP_CLOSE_BRACE)\n+  /* If the next token is not '}', then there are some enumerators.  */\n+  if (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_BRACE))\n     cp_parser_enumerator_list (parser, type);\n-  /* Look for the `}'.  */\n+\n+  /* Consume the final '}'.  */\n   cp_parser_require (parser, CPP_CLOSE_BRACE, \"`}'\");\n \n   /* Finish up the enumeration.  */\n@@ -9960,15 +9969,12 @@ cp_parser_enumerator_list (cp_parser* parser, tree type)\n {\n   while (true)\n     {\n-      cp_token *token;\n-\n       /* Parse an enumerator-definition.  */\n       cp_parser_enumerator_definition (parser, type);\n-      /* Peek at the next token.  */\n-      token = cp_lexer_peek_token (parser->lexer);\n-      /* If it's not a `,', then we've reached the end of the\n-\t list.  */\n-      if (token->type != CPP_COMMA)\n+\n+      /* If the next token is not a ',', we've reached the end of\n+\t the list.  */\n+      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))\n \tbreak;\n       /* Otherwise, consume the `,' and keep going.  */\n       cp_lexer_consume_token (parser->lexer);\n@@ -9995,7 +10001,6 @@ cp_parser_enumerator_list (cp_parser* parser, tree type)\n static void\n cp_parser_enumerator_definition (cp_parser* parser, tree type)\n {\n-  cp_token *token;\n   tree identifier;\n   tree value;\n \n@@ -10004,10 +10009,8 @@ cp_parser_enumerator_definition (cp_parser* parser, tree type)\n   if (identifier == error_mark_node)\n     return;\n \n-  /* Peek at the next token.  */\n-  token = cp_lexer_peek_token (parser->lexer);\n-  /* If it's an `=', then there's an explicit value.  */\n-  if (token->type == CPP_EQ)\n+  /* If the next token is an '=', then there is an explicit value.  */\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))\n     {\n       /* Consume the `=' token.  */\n       cp_lexer_consume_token (parser->lexer);"}, {"sha": "5dc8128b4463d766cb7b89c086894d6217794e7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326", "patch": "@@ -1,3 +1,8 @@\n+2004-09-06  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/enum2.C: Move dg-error markers to\n+\treflect changed line numbering of diagnostics.\n+\n 2004-09-06  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.dg/edit_real_1.f90: Add new test.\n@@ -22,10 +27,10 @@\n \t* testsuite/gcc.dg/builtins-46.c: New.\n \n 2004-09-03  Devang Patel  <dpatel@apple.com>\n-\t\n+\n \t* gcc.dg/tree-ssa/ifc-20040816-1.c: New test.\n \t* gcc.dg/tree-ssa/ifc-20040816-2.c: New test.\n-\t\n+\n 2004-09-03  Jan Beulich  <jbeulich@novell.com>\n \n \t* g++.dg/abi/bitfield5.C: Use -mno-ms-bitfields.\n@@ -61,7 +66,7 @@\n 2004-09-03  Devang Patel  <dpatel@apple.com>\n \n \t* g++.dg/debug/pr15736.cc: New test.\n-\t\n+\n 2004-09-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* README.QMTEST: Fix out-of-date link.\n@@ -71,7 +76,7 @@\n \tPR fortran/16579\n \t* gfortran.fortran-torture/execute/intrinsic_i_char.f90:\n \tDelete.  Duplicate of gfortran.dg/g77/20010610.f\n-\t\n+\n 2004-09-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/abi/arm_rtti1.C: New test.\n@@ -97,7 +102,7 @@\n \t* gcc.target/mips/mips-ps-3.c: New test.\n \t* gcc.target/mips/mips-ps-4.c: New test.\n \t* gcc.target/mips/mips-ps-type.c: New test.\n-\t\n+\n 2004-09-02  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.dg/edit_real_1.f90: Add new tests.\n@@ -155,7 +160,7 @@\n \n \tPR fortran/16579\n \t* gfortran.fortran-torture/execute/intrinsic_i_char.f90: New test.\n-\t\n+\n 2004-08-31  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR libfortran/16805\n@@ -453,7 +458,7 @@\n 2004-08-19  Paul Brook  <paul@codesourcery.com>\n \n \tPR fortran/14976\n-\tPR fortran/16228 \n+\tPR fortran/16228\n \t* gfortran.dg/data_char_1.f90: New test.\n \n 2004-08-19  Erik Schnetter  <schnetter@aei.mpg.de>\n@@ -518,7 +523,7 @@\n \n \tPR c++/16965\n \t* g++.dg/parse/error17.C: New test.\n-\t\n+\n 2004-08-17  Dorit Naishlos  <dorit@il.ibm.com>\n \n \t* gcc.dg/vect: New directory for vectorizer tests.\n@@ -600,11 +605,11 @@\n 2004-08-17  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcc.dg/pr17036-1.c: New test.\n-\t\n+\n 2004-08-16  Devang Patel  <dpatel@apple.com>\n \n \t* gcc.dg/darwin-20040809-1.c: New test.\n-\t\n+\n 2004-08-16  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/funcdef-attr-1.c: New test.\n@@ -651,7 +656,7 @@\n 2004-08-12  Devang patel  <dpatel@apple.com>\n \n \t* gcc.dg/darwin-20040809-2.c: New test.\n-\t\n+\n 2004-08-12  Janis Johnson  <janis1872us.ibm.com>\n \n \t* g++.dg/ext/altivec-12.C: New test.\n@@ -718,7 +723,7 @@\n \n \t* gcc.dg/darwin-ld-20040809-1.c: New test.\n \t* gcc.dg/darwin-ld-20040809-2.c: New test.\n-\t\n+\n 2004-08-11  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/16917"}, {"sha": "40328bfc6b9cc9128d278e45cd245536ab217c59", "filename": "gcc/testsuite/g++.old-deja/g++.other/enum2.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fenum2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fenum2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fenum2.C?ref=ff4eb0b5ff4c7607e1ff7e0be67f4a0c09caa326", "patch": "@@ -3,14 +3,14 @@\n // Copyright (C) 1999 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 3 Jun 1999 <nathan@acm.org>\n \n-// We'd like the enum location to be its open brace.\n+// We'd like the enum location to be its identifier.\n \n-enum thing\n-{ // { dg-error \"\" } previous def\n+enum thing // { dg-error \"\" } previous def\n+{\n   val1\n };\n \n-enum thing\n-{ // { dg-error \"\" } multiple def\n+enum thing // { dg-error \"\" } multiple def\n+{\n   val2\n };"}]}