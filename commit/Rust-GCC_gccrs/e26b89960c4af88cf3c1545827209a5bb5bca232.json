{"sha": "e26b89960c4af88cf3c1545827209a5bb5bca232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI2Yjg5OTYwYzRhZjg4Y2YzYzE1NDU4MjcyMDlhNWJiNWJjYTIzMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-03-21T01:14:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-03-21T01:14:20Z"}, "message": "rtl.texi (COMPARE): Clarify documentation and reference section on comparisons.\n\n\t* rtl.texi (COMPARE): Clarify documentation and reference section\n\ton comparisons.\n\nFrom-SVN: r40681", "tree": {"sha": "52ec6ae0a8243a0880bc08da85897abc323a593f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52ec6ae0a8243a0880bc08da85897abc323a593f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e26b89960c4af88cf3c1545827209a5bb5bca232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26b89960c4af88cf3c1545827209a5bb5bca232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26b89960c4af88cf3c1545827209a5bb5bca232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26b89960c4af88cf3c1545827209a5bb5bca232/comments", "author": null, "committer": null, "parents": [{"sha": "ddd705d182e7ec6e1d5f39a9abb8c572eba5d0bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd705d182e7ec6e1d5f39a9abb8c572eba5d0bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd705d182e7ec6e1d5f39a9abb8c572eba5d0bf"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "3bfd0a6c5d22a11ac9ab7418aad82796f657a1fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26b89960c4af88cf3c1545827209a5bb5bca232/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26b89960c4af88cf3c1545827209a5bb5bca232/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e26b89960c4af88cf3c1545827209a5bb5bca232", "patch": "@@ -1,3 +1,8 @@\n+Tue Mar 20 20:15:06 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* rtl.texi (COMPARE): Clarify documentation and reference section\n+\ton comparisons.\n+\n 2001-03-20  Stan Shebs  <shebs@apple.com>\n \n \t* objc/objc-act.c (get_static_reference): Use NULL_TREE."}, {"sha": "cfae3a9b98734f717f1b736a003da85668314306", "filename": "gcc/rtl.texi", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26b89960c4af88cf3c1545827209a5bb5bca232/gcc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26b89960c4af88cf3c1545827209a5bb5bca232/gcc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.texi?ref=e26b89960c4af88cf3c1545827209a5bb5bca232", "patch": "@@ -1412,15 +1412,21 @@ of comparison.  The result is computed without overflow, as if with\n infinite precision.\n \n Of course, machines can't really subtract with infinite precision.\n-However, they can pretend to do so when only the sign of the\n-result will be used, which is the case when the result is stored\n-in the condition code.   And that is the only way this kind of expression\n-may validly be used: as a value to be stored in the condition codes.\n-\n-The mode @var{m} is not related to the modes of @var{x} and @var{y},\n-but instead is the mode of the condition code value.  If @code{(cc0)}\n-is used, it is @code{VOIDmode}.  Otherwise it is some mode in class\n-@code{MODE_CC}, often @code{CCmode}.  @xref{Condition Code}.\n+However, they can pretend to do so when only the sign of the result will\n+be used, which is the case when the result is stored in the condition\n+code.  And that is the @emph{only} way this kind of expression may\n+validly be used: as a value to be stored in the condition codes, either\n+@code{(cc0)} or a register. @xref{Comparisons}.\n+\n+The mode @var{m} is not related to the modes of @var{x} and @var{y}, but\n+instead is the mode of the condition code value.  If @code{(cc0)} is\n+used, it is @code{VOIDmode}.  Otherwise it is some mode in class\n+@code{MODE_CC}, often @code{CCmode}.  @xref{Condition Code}.  If @var{m}\n+is @code{VOIDmode} or @code{CCmode}, the operation returns sufficient\n+information (in an unspecified format) so that any comparison operator\n+can be applied to the result of the @code{COMPARE} operation.  For other\n+modes in class @code{MODE_CC}, the operation only returns a subset of\n+this information.\n \n Normally, @var{x} and @var{y} must have the same mode.  Otherwise,\n @code{compare} is valid only if the mode of @var{x} is in class"}]}