{"sha": "435d12725b9d75e508c5508964d4b03cdcb80cb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1ZDEyNzI1YjlkNzVlNTA4YzU1MDg5NjRkNGIwM2NkY2I4MGNiNw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:03:17Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:03:17Z"}, "message": "[arm] Move cpu and architecture option name parsing\n\n\nThis patch has no functional change.  The code used for parsing -mcpu,\n-mtune and -march options is simply moved from arm.c arm-common.c.\nThe list of FPU options is also moved.  Subsequent patches will make\nuse of this within the driver.\n\nSome small adjustments are needed as a consequence of moving the\ndefinitions of the data objects to another object file, in that we\nno-longer have direct access to the size of the object.\n\n\t* common/config/arm/arm-common.c (arm_initialize_isa): Moved here from\n\tconfig/arm/arm.c.\n\t(arm_print_hint_for_cpu_option): Likewise.\n\t(arm_print_hint_for_arch_option): Likewise.\n\t(arm_parse_cpu_option_name): Likewise.\n\t(arm_parse_arch_option_name): Likewise.\n\t* config/arm/arm.c (arm_identify_fpu_from_isa): Use the computed number\n\tof entries in the all_fpus list.\n\t* config/arm/arm-protos.h (all_architectures, all_cores): Declare.\n\t(arm_parse_cpu_option_name): Declare.\n\t(arm_parse_arch_option_name): Declare.\n\t(arm_parse_option_features): Declare.\n\t(arm_intialize_isa): Declare.\n\t* config/arm/parsecpu.awk (gen_data): Move CPU and architecture\n\tdata tables to ...\n\t(gen_comm_data): ... here.  Make definitions non-static.\n\t* config/arm/arm-cpu-data.h: Regenerated.\n\t* config/arm/arm-cpu-cdata.h: Regenerated.\n\nFrom-SVN: r249287", "tree": {"sha": "29d7712b53a17619243e53df8b57ccdbdb6a1622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29d7712b53a17619243e53df8b57ccdbdb6a1622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/435d12725b9d75e508c5508964d4b03cdcb80cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435d12725b9d75e508c5508964d4b03cdcb80cb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435d12725b9d75e508c5508964d4b03cdcb80cb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435d12725b9d75e508c5508964d4b03cdcb80cb7/comments", "author": null, "committer": null, "parents": [{"sha": "050809ed8af639d385251b95bf0d8d11fd7d3863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050809ed8af639d385251b95bf0d8d11fd7d3863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/050809ed8af639d385251b95bf0d8d11fd7d3863"}], "stats": {"total": 5600, "additions": 2840, "deletions": 2760}, "files": [{"sha": "626b6d72eea3a1c425c1969449bb422e55c2c6e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=435d12725b9d75e508c5508964d4b03cdcb80cb7", "patch": "@@ -1,3 +1,24 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* common/config/arm/arm-common.c (arm_initialize_isa): Moved here from\n+\tconfig/arm/arm.c.\n+\t(arm_print_hint_for_cpu_option): Likewise.\n+\t(arm_print_hint_for_arch_option): Likewise.\n+\t(arm_parse_cpu_option_name): Likewise.\n+\t(arm_parse_arch_option_name): Likewise.\n+\t* config/arm/arm.c (arm_identify_fpu_from_isa): Use the computed number\n+\tof entries in the all_fpus list.\n+\t* config/arm/arm-protos.h (all_architectures, all_cores): Declare.\n+\t(arm_parse_cpu_option_name): Declare.\n+\t(arm_parse_arch_option_name): Declare.\n+\t(arm_parse_option_features): Declare.\n+\t(arm_intialize_isa): Declare.\n+\t* config/arm/parsecpu.awk (gen_data): Move CPU and architecture\n+\tdata tables to ...\n+\t(gen_comm_data): ... here.  Make definitions non-static.\n+\t* config/arm/arm-cpu-data.h: Regenerated.\n+\t* config/arm/arm-cpu-cdata.h: Regenerated.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm-protos.h (arm_build_target): Remove arch_core."}, {"sha": "f44ba1f92b27d42060acafd158e6cd3041d635a5", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=435d12725b9d75e508c5508964d4b03cdcb80cb7", "patch": "@@ -27,6 +27,8 @@\n #include \"common/common-target-def.h\"\n #include \"opts.h\"\n #include \"flags.h\"\n+#include \"sbitmap.h\"\n+#include \"diagnostic.h\"\n \n /* Set default optimization options.  */\n static const struct default_options arm_option_optimization_table[] =\n@@ -187,6 +189,194 @@ arm_target_thumb_only (int argc, const char **argv)\n     return NULL;\n }\n \n+/* List the permitted CPU option names.  If TARGET is a near miss for an\n+   entry, print out the suggested alternative.  */\n+static void\n+arm_print_hint_for_cpu_option (const char *target,\n+\t\t\t       const cpu_option *list)\n+{\n+  auto_vec<const char*> candidates;\n+  for (; list->common.name != NULL; list++)\n+    candidates.safe_push (list->common.name);\n+  char *s;\n+  const char *hint = candidates_list_and_hint (target, s, candidates);\n+  if (hint)\n+    inform (input_location, \"valid arguments are: %s; did you mean %qs?\",\n+\t    s, hint);\n+  else\n+    inform (input_location, \"valid arguments are: %s\", s);\n+\n+  XDELETEVEC (s);\n+}\n+\n+/* Parse the base component of a CPU selection in LIST.  Return a\n+   pointer to the entry in the architecture table.  OPTNAME is the\n+   name of the option we are parsing and can be used if a diagnostic\n+   is needed.  */\n+const cpu_option *\n+arm_parse_cpu_option_name (const cpu_option *list, const char *optname,\n+\t\t\t   const char *target)\n+{\n+  const cpu_option *entry;\n+  const char *end  = strchr (target, '+');\n+  size_t len = end ? end - target : strlen (target);\n+\n+  for (entry = list; entry->common.name != NULL; entry++)\n+    {\n+      if (strncmp (entry->common.name, target, len) == 0\n+\t  && entry->common.name[len] == '\\0')\n+\treturn entry;\n+    }\n+\n+  error_at (input_location, \"unrecognized %s target: %s\", optname, target);\n+  arm_print_hint_for_cpu_option (target, list);\n+  return NULL;\n+}\n+\n+/* List the permitted architecture option names.  If TARGET is a near\n+   miss for an entry, print out the suggested alternative.  */\n+static void\n+arm_print_hint_for_arch_option (const char *target,\n+\t\t\t       const arch_option *list)\n+{\n+  auto_vec<const char*> candidates;\n+  for (; list->common.name != NULL; list++)\n+    candidates.safe_push (list->common.name);\n+  char *s;\n+  const char *hint = candidates_list_and_hint (target, s, candidates);\n+  if (hint)\n+    inform (input_location, \"valid arguments are: %s; did you mean %qs?\",\n+\t    s, hint);\n+  else\n+    inform (input_location, \"valid arguments are: %s\", s);\n+\n+  XDELETEVEC (s);\n+}\n+\n+/* Parse the base component of a CPU or architecture selection in\n+   LIST.  Return a pointer to the entry in the architecture table.\n+   OPTNAME is the name of the option we are parsing and can be used if\n+   a diagnostic is needed.  */\n+const arch_option *\n+arm_parse_arch_option_name (const arch_option *list, const char *optname,\n+\t\t\t    const char *target)\n+{\n+  const arch_option *entry;\n+  const char *end  = strchr (target, '+');\n+  size_t len = end ? end - target : strlen (target);\n+\n+  for (entry = list; entry->common.name != NULL; entry++)\n+    {\n+      if (strncmp (entry->common.name, target, len) == 0\n+\t  && entry->common.name[len] == '\\0')\n+\treturn entry;\n+    }\n+\n+  error_at (input_location, \"unrecognized %s target: %s\", optname, target);\n+  arm_print_hint_for_arch_option (target, list);\n+  return NULL;\n+}\n+\n+/* Convert a static initializer array of feature bits to sbitmap\n+   representation.  */\n+void\n+arm_initialize_isa (sbitmap isa, const enum isa_feature *isa_bits)\n+{\n+  bitmap_clear (isa);\n+  while (*isa_bits != isa_nobit)\n+    bitmap_set_bit (isa, *(isa_bits++));\n+}\n+\n+/* OPT isn't a recognized feature.  Print a suitable error message and\n+   suggest a possible value.  Always print the list of permitted\n+   values.  */\n+static void\n+arm_unrecognized_feature (const char *opt, size_t len,\n+\t\t\t  const cpu_arch_option *target)\n+{\n+  char *this_opt = XALLOCAVEC (char, len+1);\n+  auto_vec<const char*> candidates;\n+\n+  strncpy (this_opt, opt, len);\n+  this_opt[len] = 0;\n+\n+  error_at (input_location, \"%qs does not support feature %qs\", target->name,\n+\t    this_opt);\n+  for (const cpu_arch_extension *list = target->extensions;\n+       list->name != NULL;\n+       list++)\n+    candidates.safe_push (list->name);\n+\n+  char *s;\n+  const char *hint = candidates_list_and_hint (this_opt, s, candidates);\n+\n+  if (hint)\n+    inform (input_location, \"valid feature names are: %s; did you mean %qs?\",\n+\t    s, hint);\n+  else\n+    inform (input_location, \"valid feature names are: %s\", s);\n+\n+  XDELETEVEC (s);\n+}\n+\n+/* Parse any feature extensions to add to (or remove from) the\n+   permitted ISA selection.  */\n+void\n+arm_parse_option_features (sbitmap isa, const cpu_arch_option *target,\n+\t\t\t   const char *opts_in)\n+{\n+  const char *opts = opts_in;\n+\n+  if (!opts)\n+    return;\n+\n+  if (!target->extensions)\n+    {\n+      error_at (input_location, \"%s does not take any feature options\",\n+\t\ttarget->name);\n+      return;\n+    }\n+\n+  while (opts)\n+    {\n+      gcc_assert (*opts == '+');\n+      const struct cpu_arch_extension *entry;\n+      const char *end = strchr (++opts, '+');\n+      size_t len = end ? end - opts : strlen (opts);\n+      bool matched = false;\n+\n+      for (entry = target->extensions;\n+\t   !matched && entry->name != NULL;\n+\t   entry++)\n+\t{\n+\t  if (strncmp (entry->name, opts, len) == 0\n+\t      && entry->name[len] == '\\0')\n+\t    {\n+\t      if (isa)\n+\t\t{\n+\t\t  const enum isa_feature *f = entry->isa_bits;\n+\t\t  if (entry->remove)\n+\t\t    {\n+\t\t      while (*f != isa_nobit)\n+\t\t\tbitmap_clear_bit (isa, *(f++));\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      while (*f != isa_nobit)\n+\t\t\tbitmap_set_bit (isa, *(f++));\n+\t\t    }\n+\t\t}\n+\t      matched = true;\n+\t    }\n+\t}\n+\n+      if (!matched)\n+\tarm_unrecognized_feature (opts, len, target);\n+\n+      opts = end;\n+    }\n+}\n+\n #undef ARM_CPU_NAME_LENGTH\n \n "}, {"sha": "5329bd631ffc8cc0ba7cf9f5a9654322c2b7b388", "filename": "gcc/config/arm/arm-cpu-cdata.h", "status": "modified", "additions": 2580, "deletions": 0, "changes": 2580, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h?ref=435d12725b9d75e508c5508964d4b03cdcb80cb7", "patch": "@@ -20,6 +20,2586 @@\n    License along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+static const cpu_arch_extension cpu_opttab_arm9e[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_arm946es[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_arm966es[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_arm968es[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_arm10e[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_arm1020e[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_arm1022e[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_arm926ejs[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_arm1026ejs[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_genericv7a[] = {\n+  {\n+    \"simd\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"vfpv3\", false,\n+    { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv4\", false,\n+    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"vfpv4-d16\", false,\n+    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"neon\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv3\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-fp16\", false,\n+    { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv4\", false,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  {\n+    \"nosimd\", true,\n+    { ISA_ALL_SIMD, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa5[] = {\n+  {\n+    \"nosimd\", true,\n+    { ISA_ALL_SIMD, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa7[] = {\n+  {\n+    \"nosimd\", true,\n+    { ISA_ALL_SIMD, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa8[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa9[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  {\n+    \"nosimd\", true,\n+    { ISA_ALL_SIMD, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa12[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa15[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa17[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexr5[] = {\n+  {\n+    \"nofp.dp\", true,\n+    { ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexr7[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexr8[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexm7[] = {\n+  {\n+    \"nofp.dp\", true,\n+    { ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexm4[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa15cortexa7[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa17cortexa7[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa32[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa35[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa53[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa57[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa72[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa73[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_exynosm1[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_falkor[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_qdf24xx[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_xgene1[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa57cortexa53[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa72cortexa53[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa73cortexa35[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexa73cortexa53[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const cpu_arch_extension cpu_opttab_cortexm33[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+const cpu_option all_cores[] =\n+{\n+  {\n+    {\n+      \"arm2\",\n+      NULL,\n+      {\n+        ISA_ARMv2,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv2\n+  },\n+  {\n+    {\n+      \"arm250\",\n+      NULL,\n+      {\n+        ISA_ARMv2,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv2\n+  },\n+  {\n+    {\n+      \"arm3\",\n+      NULL,\n+      {\n+        ISA_ARMv2,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv2\n+  },\n+  {\n+    {\n+      \"arm6\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm60\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm600\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm610\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm620\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm7\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm7d\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm7di\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm70\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm700\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm700i\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm710\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm720\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm710c\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm7100\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm7500\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm7500fe\",\n+      NULL,\n+      {\n+        ISA_ARMv3,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3\n+  },\n+  {\n+    {\n+      \"arm7m\",\n+      NULL,\n+      {\n+        ISA_ARMv3m,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3m\n+  },\n+  {\n+    {\n+      \"arm7dm\",\n+      NULL,\n+      {\n+        ISA_ARMv3m,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3m\n+  },\n+  {\n+    {\n+      \"arm7dmi\",\n+      NULL,\n+      {\n+        ISA_ARMv3m,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv3m\n+  },\n+  {\n+    {\n+      \"arm8\",\n+      NULL,\n+      {\n+        ISA_ARMv4,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4\n+  },\n+  {\n+    {\n+      \"arm810\",\n+      NULL,\n+      {\n+        ISA_ARMv4,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4\n+  },\n+  {\n+    {\n+      \"strongarm\",\n+      NULL,\n+      {\n+        ISA_ARMv4,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4\n+  },\n+  {\n+    {\n+      \"strongarm110\",\n+      NULL,\n+      {\n+        ISA_ARMv4,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4\n+  },\n+  {\n+    {\n+      \"strongarm1100\",\n+      NULL,\n+      {\n+        ISA_ARMv4,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4\n+  },\n+  {\n+    {\n+      \"strongarm1110\",\n+      NULL,\n+      {\n+        ISA_ARMv4,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4\n+  },\n+  {\n+    {\n+      \"fa526\",\n+      NULL,\n+      {\n+        ISA_ARMv4,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4\n+  },\n+  {\n+    {\n+      \"fa626\",\n+      NULL,\n+      {\n+        ISA_ARMv4,isa_bit_mode26,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4\n+  },\n+  {\n+    {\n+      \"arm7tdmi\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"arm7tdmi-s\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"arm710t\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"arm720t\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"arm740t\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"arm9\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"arm9tdmi\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"arm920\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"arm920t\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"arm922t\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"arm940t\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"ep9312\",\n+      NULL,\n+      {\n+        ISA_ARMv4t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv4t\n+  },\n+  {\n+    {\n+      \"arm10tdmi\",\n+      NULL,\n+      {\n+        ISA_ARMv5t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5t\n+  },\n+  {\n+    {\n+      \"arm1020t\",\n+      NULL,\n+      {\n+        ISA_ARMv5t,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5t\n+  },\n+  {\n+    {\n+      \"arm9e\",\n+      cpu_opttab_arm9e,\n+      {\n+        ISA_ARMv5te,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"arm946e-s\",\n+      cpu_opttab_arm946es,\n+      {\n+        ISA_ARMv5te,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"arm966e-s\",\n+      cpu_opttab_arm966es,\n+      {\n+        ISA_ARMv5te,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"arm968e-s\",\n+      cpu_opttab_arm968es,\n+      {\n+        ISA_ARMv5te,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"arm10e\",\n+      cpu_opttab_arm10e,\n+      {\n+        ISA_ARMv5te,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"arm1020e\",\n+      cpu_opttab_arm1020e,\n+      {\n+        ISA_ARMv5te,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"arm1022e\",\n+      cpu_opttab_arm1022e,\n+      {\n+        ISA_ARMv5te,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"xscale\",\n+      NULL,\n+      {\n+        ISA_ARMv5te,\n+        isa_bit_xscale,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"iwmmxt\",\n+      NULL,\n+      {\n+        ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_iwmmxt\n+  },\n+  {\n+    {\n+      \"iwmmxt2\",\n+      NULL,\n+      {\n+        ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_iwmmxt2\n+  },\n+  {\n+    {\n+      \"fa606te\",\n+      NULL,\n+      {\n+        ISA_ARMv5te,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"fa626te\",\n+      NULL,\n+      {\n+        ISA_ARMv5te,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"fmp626\",\n+      NULL,\n+      {\n+        ISA_ARMv5te,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"fa726te\",\n+      NULL,\n+      {\n+        ISA_ARMv5te,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5te\n+  },\n+  {\n+    {\n+      \"arm926ej-s\",\n+      cpu_opttab_arm926ejs,\n+      {\n+        ISA_ARMv5tej,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5tej\n+  },\n+  {\n+    {\n+      \"arm1026ej-s\",\n+      cpu_opttab_arm1026ejs,\n+      {\n+        ISA_ARMv5tej,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv5tej\n+  },\n+  {\n+    {\n+      \"arm1136j-s\",\n+      NULL,\n+      {\n+        ISA_ARMv6j,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6j\n+  },\n+  {\n+    {\n+      \"arm1136jf-s\",\n+      NULL,\n+      {\n+        ISA_ARMv6j,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6j\n+  },\n+  {\n+    {\n+      \"arm1176jz-s\",\n+      NULL,\n+      {\n+        ISA_ARMv6kz,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6kz\n+  },\n+  {\n+    {\n+      \"arm1176jzf-s\",\n+      NULL,\n+      {\n+        ISA_ARMv6kz,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6kz\n+  },\n+  {\n+    {\n+      \"mpcorenovfp\",\n+      NULL,\n+      {\n+        ISA_ARMv6k,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6k\n+  },\n+  {\n+    {\n+      \"mpcore\",\n+      NULL,\n+      {\n+        ISA_ARMv6k,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6k\n+  },\n+  {\n+    {\n+      \"arm1156t2-s\",\n+      NULL,\n+      {\n+        ISA_ARMv6t2,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6t2\n+  },\n+  {\n+    {\n+      \"arm1156t2f-s\",\n+      NULL,\n+      {\n+        ISA_ARMv6t2,\n+        ISA_VFPv2,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6t2\n+  },\n+  {\n+    {\n+      \"cortex-m1\",\n+      NULL,\n+      {\n+        ISA_ARMv6m,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6_m\n+  },\n+  {\n+    {\n+      \"cortex-m0\",\n+      NULL,\n+      {\n+        ISA_ARMv6m,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6_m\n+  },\n+  {\n+    {\n+      \"cortex-m0plus\",\n+      NULL,\n+      {\n+        ISA_ARMv6m,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6_m\n+  },\n+  {\n+    {\n+      \"cortex-m1.small-multiply\",\n+      NULL,\n+      {\n+        ISA_ARMv6m,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6_m\n+  },\n+  {\n+    {\n+      \"cortex-m0.small-multiply\",\n+      NULL,\n+      {\n+        ISA_ARMv6m,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6_m\n+  },\n+  {\n+    {\n+      \"cortex-m0plus.small-multiply\",\n+      NULL,\n+      {\n+        ISA_ARMv6m,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv6_m\n+  },\n+  {\n+    {\n+      \"generic-armv7-a\",\n+      cpu_opttab_genericv7a,\n+      {\n+        ISA_ARMv7a,\n+        ISA_VFPv3,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7_a\n+  },\n+  {\n+    {\n+      \"cortex-a5\",\n+      cpu_opttab_cortexa5,\n+      {\n+        ISA_ARMv7a,\n+        ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7_a\n+  },\n+  {\n+    {\n+      \"cortex-a7\",\n+      cpu_opttab_cortexa7,\n+      {\n+        ISA_ARMv7ve,\n+        ISA_VFPv4,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7ve\n+  },\n+  {\n+    {\n+      \"cortex-a8\",\n+      cpu_opttab_cortexa8,\n+      {\n+        ISA_ARMv7a,\n+        ISA_VFPv3,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7_a\n+  },\n+  {\n+    {\n+      \"cortex-a9\",\n+      cpu_opttab_cortexa9,\n+      {\n+        ISA_ARMv7a,\n+        ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7_a\n+  },\n+  {\n+    {\n+      \"cortex-a12\",\n+      cpu_opttab_cortexa12,\n+      {\n+        ISA_ARMv7ve,\n+        ISA_VFPv4,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7ve\n+  },\n+  {\n+    {\n+      \"cortex-a15\",\n+      cpu_opttab_cortexa15,\n+      {\n+        ISA_ARMv7ve,\n+        ISA_VFPv4,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7ve\n+  },\n+  {\n+    {\n+      \"cortex-a17\",\n+      cpu_opttab_cortexa17,\n+      {\n+        ISA_ARMv7ve,\n+        ISA_VFPv4,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7ve\n+  },\n+  {\n+    {\n+      \"cortex-r4\",\n+      NULL,\n+      {\n+        ISA_ARMv7r,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7_r\n+  },\n+  {\n+    {\n+      \"cortex-r4f\",\n+      NULL,\n+      {\n+        ISA_ARMv7r,\n+        ISA_VFPv3,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7_r\n+  },\n+  {\n+    {\n+      \"cortex-r5\",\n+      cpu_opttab_cortexr5,\n+      {\n+        ISA_ARMv7r,\n+        isa_bit_adiv,\n+        ISA_VFPv3,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7_r\n+  },\n+  {\n+    {\n+      \"cortex-r7\",\n+      cpu_opttab_cortexr7,\n+      {\n+        ISA_ARMv7r,\n+        isa_bit_adiv,\n+        ISA_VFPv3,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7_r\n+  },\n+  {\n+    {\n+      \"cortex-r8\",\n+      cpu_opttab_cortexr8,\n+      {\n+        ISA_ARMv7r,\n+        isa_bit_adiv,\n+        ISA_VFPv3,ISA_FP_DBL,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7_r\n+  },\n+  {\n+    {\n+      \"cortex-m7\",\n+      cpu_opttab_cortexm7,\n+      {\n+        ISA_ARMv7em,\n+        ISA_FPv5,ISA_FP_DBL,\n+        isa_quirk_no_volatile_ce,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7e_m\n+  },\n+  {\n+    {\n+      \"cortex-m4\",\n+      cpu_opttab_cortexm4,\n+      {\n+        ISA_ARMv7em,\n+        ISA_VFPv4,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7e_m\n+  },\n+  {\n+    {\n+      \"cortex-m3\",\n+      NULL,\n+      {\n+        ISA_ARMv7m,\n+        isa_quirk_cm3_ldrd,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7_m\n+  },\n+  {\n+    {\n+      \"marvell-pj4\",\n+      NULL,\n+      {\n+        ISA_ARMv7a,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7_a\n+  },\n+  {\n+    {\n+      \"cortex-a15.cortex-a7\",\n+      cpu_opttab_cortexa15cortexa7,\n+      {\n+        ISA_ARMv7ve,\n+        ISA_VFPv4,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7ve\n+  },\n+  {\n+    {\n+      \"cortex-a17.cortex-a7\",\n+      cpu_opttab_cortexa17cortexa7,\n+      {\n+        ISA_ARMv7ve,\n+        ISA_VFPv4,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv7ve\n+  },\n+  {\n+    {\n+      \"cortex-a32\",\n+      cpu_opttab_cortexa32,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"cortex-a35\",\n+      cpu_opttab_cortexa35,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"cortex-a53\",\n+      cpu_opttab_cortexa53,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"cortex-a57\",\n+      cpu_opttab_cortexa57,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"cortex-a72\",\n+      cpu_opttab_cortexa72,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"cortex-a73\",\n+      cpu_opttab_cortexa73,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"exynos-m1\",\n+      cpu_opttab_exynosm1,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"falkor\",\n+      cpu_opttab_falkor,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"qdf24xx\",\n+      cpu_opttab_qdf24xx,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"xgene1\",\n+      cpu_opttab_xgene1,\n+      {\n+        ISA_ARMv8a,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"cortex-a57.cortex-a53\",\n+      cpu_opttab_cortexa57cortexa53,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"cortex-a72.cortex-a53\",\n+      cpu_opttab_cortexa72cortexa53,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"cortex-a73.cortex-a35\",\n+      cpu_opttab_cortexa73cortexa35,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"cortex-a73.cortex-a53\",\n+      cpu_opttab_cortexa73cortexa53,\n+      {\n+        ISA_ARMv8a,\n+        isa_bit_crc32,\n+        ISA_FP_ARMv8,ISA_NEON,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_a\n+  },\n+  {\n+    {\n+      \"cortex-m23\",\n+      NULL,\n+      {\n+        ISA_ARMv8m_base,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_m_base\n+  },\n+  {\n+    {\n+      \"cortex-m33\",\n+      cpu_opttab_cortexm33,\n+      {\n+        ISA_ARMv8m_main,\n+        isa_bit_ARMv7em,\n+        ISA_FPv5,\n+        isa_nobit\n+      }\n+    },\n+    TARGET_ARCH_armv8_m_main\n+  },\n+  {{NULL, NULL, {isa_nobit}}, TARGET_ARCH_arm_none}\n+};\n+static const struct cpu_arch_extension arch_opttab_armv5e[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv5te[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv5tej[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv6[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv6j[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv6k[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv6z[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv6kz[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv6zk[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv6t2[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv7[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv7_a[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv3\", false,\n+    { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv4-d16\", false,\n+    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv4\", false,\n+    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"simd\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv3\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-fp16\", false,\n+    { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv4\", false,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  {\n+    \"nosimd\", true,\n+    { ISA_ALL_SIMD, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv7ve[] = {\n+  {\n+    \"vfpv3-d16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv3\", false,\n+    { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv4-d16\", false,\n+    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv4\", false,\n+    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"neon\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv3\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-fp16\", false,\n+    { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"simd\", false,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv4\", false,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  {\n+    \"nosimd\", true,\n+    { ISA_ALL_SIMD, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv7_r[] = {\n+  {\n+    \"fp.sp\", false,\n+    { ISA_VFPv3, isa_nobit }\n+  },\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"idiv\", false,\n+    { isa_bit_adiv, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  {\n+    \"noidiv\", true,\n+    { isa_bit_adiv, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv7e_m[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv4, isa_nobit }\n+  },\n+  {\n+    \"fpv5\", false,\n+    { ISA_FPv5, isa_nobit }\n+  },\n+  {\n+    \"fp.dp\", false,\n+    { ISA_FPv5,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv8_a[] = {\n+  {\n+    \"crc\", false,\n+    { isa_bit_crc32, isa_nobit }\n+  },\n+  {\n+    \"simd\", false,\n+    { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  {\n+    \"nocrypto\", true,\n+    { ISA_ALL_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv8_1_a[] = {\n+  {\n+    \"simd\", false,\n+    { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  {\n+    \"nocrypto\", true,\n+    { ISA_ALL_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv8_2_a[] = {\n+  {\n+    \"simd\", false,\n+    { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"fp16\", false,\n+    { isa_bit_fp16,ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  {\n+    \"nocrypto\", true,\n+    { ISA_ALL_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_arch_extension arch_opttab_armv8_m_main[] = {\n+  {\n+    \"dsp\", false,\n+    { isa_bit_ARMv7em, isa_nobit }\n+  },\n+  {\n+    \"fp\", false,\n+    { ISA_FPv5, isa_nobit }\n+  },\n+  {\n+    \"fp.dp\", false,\n+    { ISA_FPv5,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+const arch_option all_architectures[] =\n+{\n+  {\n+    \"armv2\",\n+    NULL,\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    \"2\", BASE_ARCH_2,\n+    TARGET_CPU_arm2,\n+  },\n+  {\n+    \"armv2a\",\n+    NULL,\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    \"2\", BASE_ARCH_2,\n+    TARGET_CPU_arm2,\n+  },\n+  {\n+    \"armv3\",\n+    NULL,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    \"3\", BASE_ARCH_3,\n+    TARGET_CPU_arm6,\n+  },\n+  {\n+    \"armv3m\",\n+    NULL,\n+    {\n+      ISA_ARMv3m,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    \"3M\", BASE_ARCH_3M,\n+    TARGET_CPU_arm7m,\n+  },\n+  {\n+    \"armv4\",\n+    NULL,\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    \"4\", BASE_ARCH_4,\n+    TARGET_CPU_arm7tdmi,\n+  },\n+  {\n+    \"armv4t\",\n+    NULL,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    \"4T\", BASE_ARCH_4T,\n+    TARGET_CPU_arm7tdmi,\n+  },\n+  {\n+    \"armv5\",\n+    NULL,\n+    {\n+      ISA_ARMv5,\n+      isa_nobit\n+    },\n+    \"5\", BASE_ARCH_5,\n+    TARGET_CPU_arm10tdmi,\n+  },\n+  {\n+    \"armv5t\",\n+    NULL,\n+    {\n+      ISA_ARMv5t,\n+      isa_nobit\n+    },\n+    \"5T\", BASE_ARCH_5T,\n+    TARGET_CPU_arm10tdmi,\n+  },\n+  {\n+    \"armv5e\",\n+    arch_opttab_armv5e,\n+    {\n+      ISA_ARMv5e,\n+      isa_nobit\n+    },\n+    \"5E\", BASE_ARCH_5E,\n+    TARGET_CPU_arm1026ejs,\n+  },\n+  {\n+    \"armv5te\",\n+    arch_opttab_armv5te,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    \"5TE\", BASE_ARCH_5TE,\n+    TARGET_CPU_arm1026ejs,\n+  },\n+  {\n+    \"armv5tej\",\n+    arch_opttab_armv5tej,\n+    {\n+      ISA_ARMv5tej,\n+      isa_nobit\n+    },\n+    \"5TEJ\", BASE_ARCH_5TEJ,\n+    TARGET_CPU_arm1026ejs,\n+  },\n+  {\n+    \"armv6\",\n+    arch_opttab_armv6,\n+    {\n+      ISA_ARMv6,\n+      isa_nobit\n+    },\n+    \"6\", BASE_ARCH_6,\n+    TARGET_CPU_arm1136js,\n+  },\n+  {\n+    \"armv6j\",\n+    arch_opttab_armv6j,\n+    {\n+      ISA_ARMv6j,\n+      isa_nobit\n+    },\n+    \"6J\", BASE_ARCH_6J,\n+    TARGET_CPU_arm1136js,\n+  },\n+  {\n+    \"armv6k\",\n+    arch_opttab_armv6k,\n+    {\n+      ISA_ARMv6k,\n+      isa_nobit\n+    },\n+    \"6K\", BASE_ARCH_6K,\n+    TARGET_CPU_mpcore,\n+  },\n+  {\n+    \"armv6z\",\n+    arch_opttab_armv6z,\n+    {\n+      ISA_ARMv6z,\n+      isa_nobit\n+    },\n+    \"6Z\", BASE_ARCH_6Z,\n+    TARGET_CPU_arm1176jzs,\n+  },\n+  {\n+    \"armv6kz\",\n+    arch_opttab_armv6kz,\n+    {\n+      ISA_ARMv6kz,\n+      isa_nobit\n+    },\n+    \"6KZ\", BASE_ARCH_6KZ,\n+    TARGET_CPU_arm1176jzs,\n+  },\n+  {\n+    \"armv6zk\",\n+    arch_opttab_armv6zk,\n+    {\n+      ISA_ARMv6kz,\n+      isa_nobit\n+    },\n+    \"6KZ\", BASE_ARCH_6KZ,\n+    TARGET_CPU_arm1176jzs,\n+  },\n+  {\n+    \"armv6t2\",\n+    arch_opttab_armv6t2,\n+    {\n+      ISA_ARMv6t2,\n+      isa_nobit\n+    },\n+    \"6T2\", BASE_ARCH_6T2,\n+    TARGET_CPU_arm1156t2s,\n+  },\n+  {\n+    \"armv6-m\",\n+    NULL,\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+    \"6M\", BASE_ARCH_6M,\n+    TARGET_CPU_cortexm1,\n+  },\n+  {\n+    \"armv6s-m\",\n+    NULL,\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+    \"6M\", BASE_ARCH_6M,\n+    TARGET_CPU_cortexm1,\n+  },\n+  {\n+    \"armv7\",\n+    arch_opttab_armv7,\n+    {\n+      ISA_ARMv7,\n+      isa_nobit\n+    },\n+    \"7\", BASE_ARCH_7,\n+    TARGET_CPU_cortexa8,\n+  },\n+  {\n+    \"armv7-a\",\n+    arch_opttab_armv7_a,\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+    \"7A\", BASE_ARCH_7A,\n+    TARGET_CPU_cortexa8,\n+  },\n+  {\n+    \"armv7ve\",\n+    arch_opttab_armv7ve,\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+    \"7A\", BASE_ARCH_7A,\n+    TARGET_CPU_cortexa8,\n+  },\n+  {\n+    \"armv7-r\",\n+    arch_opttab_armv7_r,\n+    {\n+      ISA_ARMv7r,\n+      isa_nobit\n+    },\n+    \"7R\", BASE_ARCH_7R,\n+    TARGET_CPU_cortexr4,\n+  },\n+  {\n+    \"armv7-m\",\n+    NULL,\n+    {\n+      ISA_ARMv7m,\n+      isa_nobit\n+    },\n+    \"7M\", BASE_ARCH_7M,\n+    TARGET_CPU_cortexm3,\n+  },\n+  {\n+    \"armv7e-m\",\n+    arch_opttab_armv7e_m,\n+    {\n+      ISA_ARMv7em,\n+      isa_nobit\n+    },\n+    \"7EM\", BASE_ARCH_7EM,\n+    TARGET_CPU_cortexm4,\n+  },\n+  {\n+    \"armv8-a\",\n+    arch_opttab_armv8_a,\n+    {\n+      ISA_ARMv8a,\n+      isa_nobit\n+    },\n+    \"8A\", BASE_ARCH_8A,\n+    TARGET_CPU_cortexa53,\n+  },\n+  {\n+    \"armv8.1-a\",\n+    arch_opttab_armv8_1_a,\n+    {\n+      ISA_ARMv8_1a,\n+      isa_nobit\n+    },\n+    \"8A\", BASE_ARCH_8A,\n+    TARGET_CPU_cortexa53,\n+  },\n+  {\n+    \"armv8.2-a\",\n+    arch_opttab_armv8_2_a,\n+    {\n+      ISA_ARMv8_2a,\n+      isa_nobit\n+    },\n+    \"8A\", BASE_ARCH_8A,\n+    TARGET_CPU_cortexa53,\n+  },\n+  {\n+    \"armv8-m.base\",\n+    NULL,\n+    {\n+      ISA_ARMv8m_base,\n+      isa_nobit\n+    },\n+    \"8M_BASE\", BASE_ARCH_8M_BASE,\n+    TARGET_CPU_cortexm23,\n+  },\n+  {\n+    \"armv8-m.main\",\n+    arch_opttab_armv8_m_main,\n+    {\n+      ISA_ARMv8m_main,\n+      isa_nobit\n+    },\n+    \"8M_MAIN\", BASE_ARCH_8M_MAIN,\n+    TARGET_CPU_cortexm7,\n+  },\n+  {\n+    \"iwmmxt\",\n+    NULL,\n+    {\n+      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n+      isa_nobit\n+    },\n+    \"5TE\", BASE_ARCH_5TE,\n+    TARGET_CPU_iwmmxt,\n+  },\n+  {\n+    \"iwmmxt2\",\n+    NULL,\n+    {\n+      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n+      isa_nobit\n+    },\n+    \"5TE\", BASE_ARCH_5TE,\n+    TARGET_CPU_iwmmxt2,\n+  },\n+  {{NULL, NULL, {isa_nobit}},\n+   NULL, BASE_ARCH_0, TARGET_CPU_arm_none}\n+};\n+\n+const arm_fpu_desc all_fpus[] =\n+{\n+  {\n+    \"vfp\",\n+    {\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv2\",\n+    {\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3\",\n+    {\n+      ISA_VFPv3,ISA_FP_D32,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3-fp16\",\n+    {\n+      ISA_VFPv3,ISA_FP_D32,isa_bit_fp16conv,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3-d16\",\n+    {\n+      ISA_VFPv3,ISA_FP_DBL,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3-d16-fp16\",\n+    {\n+      ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3xd\",\n+    {\n+      ISA_VFPv3,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3xd-fp16\",\n+    {\n+      ISA_VFPv3,isa_bit_fp16conv,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"neon\",\n+    {\n+      ISA_VFPv3,ISA_NEON,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"neon-vfpv3\",\n+    {\n+      ISA_VFPv3,ISA_NEON,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"neon-fp16\",\n+    {\n+      ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv4\",\n+    {\n+      ISA_VFPv4,ISA_FP_D32,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"neon-vfpv4\",\n+    {\n+      ISA_VFPv4,ISA_NEON,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv4-d16\",\n+    {\n+      ISA_VFPv4,ISA_FP_DBL,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"fpv4-sp-d16\",\n+    {\n+      ISA_VFPv4,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"fpv5-sp-d16\",\n+    {\n+      ISA_FPv5,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"fpv5-d16\",\n+    {\n+      ISA_FPv5,ISA_FP_DBL,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"fp-armv8\",\n+    {\n+      ISA_FP_ARMv8,ISA_FP_D32,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"neon-fp-armv8\",\n+    {\n+      ISA_FP_ARMv8,ISA_NEON,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"crypto-neon-fp-armv8\",\n+    {\n+      ISA_FP_ARMv8,ISA_CRYPTO,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfp3\",\n+    {\n+      ISA_VFPv3,ISA_FP_D32,\n+      isa_nobit\n+    }\n+  },\n+};\n static const struct arm_arch_core_flag arm_arch_core_flags[] =\n {\n   {"}, {"sha": "d42021d15c7914bceb17081de9b0c44b31c1a8d4", "filename": "gcc/config/arm/arm-cpu-data.h", "status": "modified", "additions": 0, "deletions": 2538, "changes": 2538, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fconfig%2Farm%2Farm-cpu-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fconfig%2Farm%2Farm-cpu-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-data.h?ref=435d12725b9d75e508c5508964d4b03cdcb80cb7", "patch": "@@ -20,1634 +20,6 @@\n    License along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-static const cpu_arch_extension cpu_opttab_arm9e[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_arm946es[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_arm966es[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_arm968es[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_arm10e[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_arm1020e[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_arm1022e[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_arm926ejs[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_arm1026ejs[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_genericv7a[] = {\n-  {\n-    \"simd\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"vfpv3\", false,\n-    { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n-  },\n-  {\n-    \"vfpv3-d16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv3-fp16\", false,\n-    { ISA_VFPv3,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n-  },\n-  {\n-    \"vfpv3-d16-fp16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n-  },\n-  {\n-    \"vfpv4\", false,\n-    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n-  },\n-  {\n-    \"vfpv4-d16\", false,\n-    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"neon\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"neon-vfpv3\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"neon-fp16\", false,\n-    { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n-  },\n-  {\n-    \"neon-vfpv4\", false,\n-    { ISA_VFPv4,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  {\n-    \"nosimd\", true,\n-    { ISA_ALL_SIMD, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa5[] = {\n-  {\n-    \"nosimd\", true,\n-    { ISA_ALL_SIMD, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa7[] = {\n-  {\n-    \"nosimd\", true,\n-    { ISA_ALL_SIMD, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa8[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa9[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  {\n-    \"nosimd\", true,\n-    { ISA_ALL_SIMD, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa12[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa15[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa17[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexr5[] = {\n-  {\n-    \"nofp.dp\", true,\n-    { ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexr7[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexr8[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexm7[] = {\n-  {\n-    \"nofp.dp\", true,\n-    { ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexm4[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa15cortexa7[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa17cortexa7[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa32[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa35[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa53[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa57[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa72[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa73[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_exynosm1[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_xgene1[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa57cortexa53[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa72cortexa53[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa73cortexa35[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexa73cortexa53[] = {\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_arch_extension cpu_opttab_cortexm33[] = {\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const cpu_option all_cores[] =\n-{\n-  {\n-    {\n-      \"arm2\",\n-      NULL,\n-      {\n-        ISA_ARMv2,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv2\n-  },\n-  {\n-    {\n-      \"arm250\",\n-      NULL,\n-      {\n-        ISA_ARMv2,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv2\n-  },\n-  {\n-    {\n-      \"arm3\",\n-      NULL,\n-      {\n-        ISA_ARMv2,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv2\n-  },\n-  {\n-    {\n-      \"arm6\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm60\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm600\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm610\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm620\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm7\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm7d\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm7di\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm70\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm700\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm700i\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm710\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm720\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm710c\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm7100\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm7500\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm7500fe\",\n-      NULL,\n-      {\n-        ISA_ARMv3,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3\n-  },\n-  {\n-    {\n-      \"arm7m\",\n-      NULL,\n-      {\n-        ISA_ARMv3m,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3m\n-  },\n-  {\n-    {\n-      \"arm7dm\",\n-      NULL,\n-      {\n-        ISA_ARMv3m,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3m\n-  },\n-  {\n-    {\n-      \"arm7dmi\",\n-      NULL,\n-      {\n-        ISA_ARMv3m,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv3m\n-  },\n-  {\n-    {\n-      \"arm8\",\n-      NULL,\n-      {\n-        ISA_ARMv4,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4\n-  },\n-  {\n-    {\n-      \"arm810\",\n-      NULL,\n-      {\n-        ISA_ARMv4,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4\n-  },\n-  {\n-    {\n-      \"strongarm\",\n-      NULL,\n-      {\n-        ISA_ARMv4,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4\n-  },\n-  {\n-    {\n-      \"strongarm110\",\n-      NULL,\n-      {\n-        ISA_ARMv4,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4\n-  },\n-  {\n-    {\n-      \"strongarm1100\",\n-      NULL,\n-      {\n-        ISA_ARMv4,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4\n-  },\n-  {\n-    {\n-      \"strongarm1110\",\n-      NULL,\n-      {\n-        ISA_ARMv4,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4\n-  },\n-  {\n-    {\n-      \"fa526\",\n-      NULL,\n-      {\n-        ISA_ARMv4,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4\n-  },\n-  {\n-    {\n-      \"fa626\",\n-      NULL,\n-      {\n-        ISA_ARMv4,isa_bit_mode26,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4\n-  },\n-  {\n-    {\n-      \"arm7tdmi\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"arm7tdmi-s\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"arm710t\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"arm720t\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"arm740t\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"arm9\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"arm9tdmi\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"arm920\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"arm920t\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"arm922t\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"arm940t\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"ep9312\",\n-      NULL,\n-      {\n-        ISA_ARMv4t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv4t\n-  },\n-  {\n-    {\n-      \"arm10tdmi\",\n-      NULL,\n-      {\n-        ISA_ARMv5t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5t\n-  },\n-  {\n-    {\n-      \"arm1020t\",\n-      NULL,\n-      {\n-        ISA_ARMv5t,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5t\n-  },\n-  {\n-    {\n-      \"arm9e\",\n-      cpu_opttab_arm9e,\n-      {\n-        ISA_ARMv5te,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"arm946e-s\",\n-      cpu_opttab_arm946es,\n-      {\n-        ISA_ARMv5te,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"arm966e-s\",\n-      cpu_opttab_arm966es,\n-      {\n-        ISA_ARMv5te,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"arm968e-s\",\n-      cpu_opttab_arm968es,\n-      {\n-        ISA_ARMv5te,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"arm10e\",\n-      cpu_opttab_arm10e,\n-      {\n-        ISA_ARMv5te,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"arm1020e\",\n-      cpu_opttab_arm1020e,\n-      {\n-        ISA_ARMv5te,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"arm1022e\",\n-      cpu_opttab_arm1022e,\n-      {\n-        ISA_ARMv5te,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"xscale\",\n-      NULL,\n-      {\n-        ISA_ARMv5te,\n-        isa_bit_xscale,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"iwmmxt\",\n-      NULL,\n-      {\n-        ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_iwmmxt\n-  },\n-  {\n-    {\n-      \"iwmmxt2\",\n-      NULL,\n-      {\n-        ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_iwmmxt2\n-  },\n-  {\n-    {\n-      \"fa606te\",\n-      NULL,\n-      {\n-        ISA_ARMv5te,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"fa626te\",\n-      NULL,\n-      {\n-        ISA_ARMv5te,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"fmp626\",\n-      NULL,\n-      {\n-        ISA_ARMv5te,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"fa726te\",\n-      NULL,\n-      {\n-        ISA_ARMv5te,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5te\n-  },\n-  {\n-    {\n-      \"arm926ej-s\",\n-      cpu_opttab_arm926ejs,\n-      {\n-        ISA_ARMv5tej,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5tej\n-  },\n-  {\n-    {\n-      \"arm1026ej-s\",\n-      cpu_opttab_arm1026ejs,\n-      {\n-        ISA_ARMv5tej,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv5tej\n-  },\n-  {\n-    {\n-      \"arm1136j-s\",\n-      NULL,\n-      {\n-        ISA_ARMv6j,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6j\n-  },\n-  {\n-    {\n-      \"arm1136jf-s\",\n-      NULL,\n-      {\n-        ISA_ARMv6j,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6j\n-  },\n-  {\n-    {\n-      \"arm1176jz-s\",\n-      NULL,\n-      {\n-        ISA_ARMv6kz,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6kz\n-  },\n-  {\n-    {\n-      \"arm1176jzf-s\",\n-      NULL,\n-      {\n-        ISA_ARMv6kz,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6kz\n-  },\n-  {\n-    {\n-      \"mpcorenovfp\",\n-      NULL,\n-      {\n-        ISA_ARMv6k,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6k\n-  },\n-  {\n-    {\n-      \"mpcore\",\n-      NULL,\n-      {\n-        ISA_ARMv6k,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6k\n-  },\n-  {\n-    {\n-      \"arm1156t2-s\",\n-      NULL,\n-      {\n-        ISA_ARMv6t2,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6t2\n-  },\n-  {\n-    {\n-      \"arm1156t2f-s\",\n-      NULL,\n-      {\n-        ISA_ARMv6t2,\n-        ISA_VFPv2,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6t2\n-  },\n-  {\n-    {\n-      \"cortex-m1\",\n-      NULL,\n-      {\n-        ISA_ARMv6m,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6_m\n-  },\n-  {\n-    {\n-      \"cortex-m0\",\n-      NULL,\n-      {\n-        ISA_ARMv6m,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6_m\n-  },\n-  {\n-    {\n-      \"cortex-m0plus\",\n-      NULL,\n-      {\n-        ISA_ARMv6m,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6_m\n-  },\n-  {\n-    {\n-      \"cortex-m1.small-multiply\",\n-      NULL,\n-      {\n-        ISA_ARMv6m,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6_m\n-  },\n-  {\n-    {\n-      \"cortex-m0.small-multiply\",\n-      NULL,\n-      {\n-        ISA_ARMv6m,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6_m\n-  },\n-  {\n-    {\n-      \"cortex-m0plus.small-multiply\",\n-      NULL,\n-      {\n-        ISA_ARMv6m,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv6_m\n-  },\n-  {\n-    {\n-      \"generic-armv7-a\",\n-      cpu_opttab_genericv7a,\n-      {\n-        ISA_ARMv7a,\n-        ISA_VFPv3,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7_a\n-  },\n-  {\n-    {\n-      \"cortex-a5\",\n-      cpu_opttab_cortexa5,\n-      {\n-        ISA_ARMv7a,\n-        ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7_a\n-  },\n-  {\n-    {\n-      \"cortex-a7\",\n-      cpu_opttab_cortexa7,\n-      {\n-        ISA_ARMv7ve,\n-        ISA_VFPv4,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7ve\n-  },\n-  {\n-    {\n-      \"cortex-a8\",\n-      cpu_opttab_cortexa8,\n-      {\n-        ISA_ARMv7a,\n-        ISA_VFPv3,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7_a\n-  },\n-  {\n-    {\n-      \"cortex-a9\",\n-      cpu_opttab_cortexa9,\n-      {\n-        ISA_ARMv7a,\n-        ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7_a\n-  },\n-  {\n-    {\n-      \"cortex-a12\",\n-      cpu_opttab_cortexa12,\n-      {\n-        ISA_ARMv7ve,\n-        ISA_VFPv4,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7ve\n-  },\n-  {\n-    {\n-      \"cortex-a15\",\n-      cpu_opttab_cortexa15,\n-      {\n-        ISA_ARMv7ve,\n-        ISA_VFPv4,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7ve\n-  },\n-  {\n-    {\n-      \"cortex-a17\",\n-      cpu_opttab_cortexa17,\n-      {\n-        ISA_ARMv7ve,\n-        ISA_VFPv4,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7ve\n-  },\n-  {\n-    {\n-      \"cortex-r4\",\n-      NULL,\n-      {\n-        ISA_ARMv7r,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7_r\n-  },\n-  {\n-    {\n-      \"cortex-r4f\",\n-      NULL,\n-      {\n-        ISA_ARMv7r,\n-        ISA_VFPv3,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7_r\n-  },\n-  {\n-    {\n-      \"cortex-r5\",\n-      cpu_opttab_cortexr5,\n-      {\n-        ISA_ARMv7r,\n-        isa_bit_adiv,\n-        ISA_VFPv3,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7_r\n-  },\n-  {\n-    {\n-      \"cortex-r7\",\n-      cpu_opttab_cortexr7,\n-      {\n-        ISA_ARMv7r,\n-        isa_bit_adiv,\n-        ISA_VFPv3,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7_r\n-  },\n-  {\n-    {\n-      \"cortex-r8\",\n-      cpu_opttab_cortexr8,\n-      {\n-        ISA_ARMv7r,\n-        isa_bit_adiv,\n-        ISA_VFPv3,ISA_FP_DBL,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7_r\n-  },\n-  {\n-    {\n-      \"cortex-m7\",\n-      cpu_opttab_cortexm7,\n-      {\n-        ISA_ARMv7em,\n-        ISA_FPv5,ISA_FP_DBL,\n-        isa_quirk_no_volatile_ce,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7e_m\n-  },\n-  {\n-    {\n-      \"cortex-m4\",\n-      cpu_opttab_cortexm4,\n-      {\n-        ISA_ARMv7em,\n-        ISA_VFPv4,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7e_m\n-  },\n-  {\n-    {\n-      \"cortex-m3\",\n-      NULL,\n-      {\n-        ISA_ARMv7m,\n-        isa_quirk_cm3_ldrd,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7_m\n-  },\n-  {\n-    {\n-      \"marvell-pj4\",\n-      NULL,\n-      {\n-        ISA_ARMv7a,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7_a\n-  },\n-  {\n-    {\n-      \"cortex-a15.cortex-a7\",\n-      cpu_opttab_cortexa15cortexa7,\n-      {\n-        ISA_ARMv7ve,\n-        ISA_VFPv4,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7ve\n-  },\n-  {\n-    {\n-      \"cortex-a17.cortex-a7\",\n-      cpu_opttab_cortexa17cortexa7,\n-      {\n-        ISA_ARMv7ve,\n-        ISA_VFPv4,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv7ve\n-  },\n-  {\n-    {\n-      \"cortex-a32\",\n-      cpu_opttab_cortexa32,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"cortex-a35\",\n-      cpu_opttab_cortexa35,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"cortex-a53\",\n-      cpu_opttab_cortexa53,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"cortex-a57\",\n-      cpu_opttab_cortexa57,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"cortex-a72\",\n-      cpu_opttab_cortexa72,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"cortex-a73\",\n-      cpu_opttab_cortexa73,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"exynos-m1\",\n-      cpu_opttab_exynosm1,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"xgene1\",\n-      cpu_opttab_xgene1,\n-      {\n-        ISA_ARMv8a,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"cortex-a57.cortex-a53\",\n-      cpu_opttab_cortexa57cortexa53,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"cortex-a72.cortex-a53\",\n-      cpu_opttab_cortexa72cortexa53,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"cortex-a73.cortex-a35\",\n-      cpu_opttab_cortexa73cortexa35,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"cortex-a73.cortex-a53\",\n-      cpu_opttab_cortexa73cortexa53,\n-      {\n-        ISA_ARMv8a,\n-        isa_bit_crc32,\n-        ISA_FP_ARMv8,ISA_NEON,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_a\n-  },\n-  {\n-    {\n-      \"cortex-m23\",\n-      NULL,\n-      {\n-        ISA_ARMv8m_base,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_m_base\n-  },\n-  {\n-    {\n-      \"cortex-m33\",\n-      cpu_opttab_cortexm33,\n-      {\n-        ISA_ARMv8m_main,\n-        isa_bit_ARMv7em,\n-        ISA_FPv5,\n-        isa_nobit\n-      }\n-    },\n-    TARGET_ARCH_armv8_m_main\n-  },\n-  {{NULL, NULL, {isa_nobit}}, TARGET_ARCH_arm_none}\n-};\n static const cpu_tune all_tunes[] =\n {\n   { /* arm2.  */\n@@ -2192,913 +564,3 @@ static const cpu_tune all_tunes[] =\n   },\n   {TARGET_CPU_arm_none, 0, NULL}\n };\n-static const struct cpu_arch_extension arch_opttab_armv5e[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv5te[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv5tej[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv6[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv6j[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv6k[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv6z[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv6kz[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv6zk[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv6t2[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv2\", false,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv7[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv3-d16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv7_a[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv3-d16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv3\", false,\n-    { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n-  },\n-  {\n-    \"vfpv3-d16-fp16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n-  },\n-  {\n-    \"vfpv3-fp16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n-  },\n-  {\n-    \"vfpv4-d16\", false,\n-    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv4\", false,\n-    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n-  },\n-  {\n-    \"simd\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"neon\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"neon-vfpv3\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"neon-fp16\", false,\n-    { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n-  },\n-  {\n-    \"neon-vfpv4\", false,\n-    { ISA_VFPv4,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  {\n-    \"nosimd\", true,\n-    { ISA_ALL_SIMD, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv7ve[] = {\n-  {\n-    \"vfpv3-d16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv3\", false,\n-    { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n-  },\n-  {\n-    \"vfpv3-d16-fp16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n-  },\n-  {\n-    \"vfpv3-fp16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n-  },\n-  {\n-    \"vfpv4-d16\", false,\n-    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"vfpv4\", false,\n-    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n-  },\n-  {\n-    \"neon\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"neon-vfpv3\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"neon-fp16\", false,\n-    { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n-  },\n-  {\n-    \"simd\", false,\n-    { ISA_VFPv4,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"neon-vfpv4\", false,\n-    { ISA_VFPv4,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  {\n-    \"nosimd\", true,\n-    { ISA_ALL_SIMD, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv7_r[] = {\n-  {\n-    \"fp.sp\", false,\n-    { ISA_VFPv3, isa_nobit }\n-  },\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"idiv\", false,\n-    { isa_bit_adiv, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  {\n-    \"noidiv\", true,\n-    { isa_bit_adiv, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv7e_m[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv4, isa_nobit }\n-  },\n-  {\n-    \"fpv5\", false,\n-    { ISA_FPv5, isa_nobit }\n-  },\n-  {\n-    \"fp.dp\", false,\n-    { ISA_FPv5,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv8_a[] = {\n-  {\n-    \"crc\", false,\n-    { isa_bit_crc32, isa_nobit }\n-  },\n-  {\n-    \"simd\", false,\n-    { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  {\n-    \"nocrypto\", true,\n-    { ISA_ALL_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv8_1_a[] = {\n-  {\n-    \"simd\", false,\n-    { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  {\n-    \"nocrypto\", true,\n-    { ISA_ALL_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv8_2_a[] = {\n-  {\n-    \"simd\", false,\n-    { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"fp16\", false,\n-    { isa_bit_fp16,ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n-  },\n-  {\n-    \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  {\n-    \"nocrypto\", true,\n-    { ISA_ALL_CRYPTO, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct cpu_arch_extension arch_opttab_armv8_m_main[] = {\n-  {\n-    \"dsp\", false,\n-    { isa_bit_ARMv7em, isa_nobit }\n-  },\n-  {\n-    \"fp\", false,\n-    { ISA_FPv5, isa_nobit }\n-  },\n-  {\n-    \"fp.dp\", false,\n-    { ISA_FPv5,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"nofp\", true,\n-    { ISA_ALL_FP, isa_nobit }\n-  },\n-  { NULL, false, {isa_nobit}}\n-};\n-\n-static const struct arch_option all_architectures[] =\n-{\n-  {\n-    \"armv2\",\n-    NULL,\n-    {\n-      ISA_ARMv2,isa_bit_mode26,\n-      isa_nobit\n-    },\n-    \"2\", BASE_ARCH_2,\n-    TARGET_CPU_arm2,\n-  },\n-  {\n-    \"armv2a\",\n-    NULL,\n-    {\n-      ISA_ARMv2,isa_bit_mode26,\n-      isa_nobit\n-    },\n-    \"2\", BASE_ARCH_2,\n-    TARGET_CPU_arm2,\n-  },\n-  {\n-    \"armv3\",\n-    NULL,\n-    {\n-      ISA_ARMv3,isa_bit_mode26,\n-      isa_nobit\n-    },\n-    \"3\", BASE_ARCH_3,\n-    TARGET_CPU_arm6,\n-  },\n-  {\n-    \"armv3m\",\n-    NULL,\n-    {\n-      ISA_ARMv3m,isa_bit_mode26,\n-      isa_nobit\n-    },\n-    \"3M\", BASE_ARCH_3M,\n-    TARGET_CPU_arm7m,\n-  },\n-  {\n-    \"armv4\",\n-    NULL,\n-    {\n-      ISA_ARMv4,isa_bit_mode26,\n-      isa_nobit\n-    },\n-    \"4\", BASE_ARCH_4,\n-    TARGET_CPU_arm7tdmi,\n-  },\n-  {\n-    \"armv4t\",\n-    NULL,\n-    {\n-      ISA_ARMv4t,\n-      isa_nobit\n-    },\n-    \"4T\", BASE_ARCH_4T,\n-    TARGET_CPU_arm7tdmi,\n-  },\n-  {\n-    \"armv5\",\n-    NULL,\n-    {\n-      ISA_ARMv5,\n-      isa_nobit\n-    },\n-    \"5\", BASE_ARCH_5,\n-    TARGET_CPU_arm10tdmi,\n-  },\n-  {\n-    \"armv5t\",\n-    NULL,\n-    {\n-      ISA_ARMv5t,\n-      isa_nobit\n-    },\n-    \"5T\", BASE_ARCH_5T,\n-    TARGET_CPU_arm10tdmi,\n-  },\n-  {\n-    \"armv5e\",\n-    arch_opttab_armv5e,\n-    {\n-      ISA_ARMv5e,\n-      isa_nobit\n-    },\n-    \"5E\", BASE_ARCH_5E,\n-    TARGET_CPU_arm1026ejs,\n-  },\n-  {\n-    \"armv5te\",\n-    arch_opttab_armv5te,\n-    {\n-      ISA_ARMv5te,\n-      isa_nobit\n-    },\n-    \"5TE\", BASE_ARCH_5TE,\n-    TARGET_CPU_arm1026ejs,\n-  },\n-  {\n-    \"armv5tej\",\n-    arch_opttab_armv5tej,\n-    {\n-      ISA_ARMv5tej,\n-      isa_nobit\n-    },\n-    \"5TEJ\", BASE_ARCH_5TEJ,\n-    TARGET_CPU_arm1026ejs,\n-  },\n-  {\n-    \"armv6\",\n-    arch_opttab_armv6,\n-    {\n-      ISA_ARMv6,\n-      isa_nobit\n-    },\n-    \"6\", BASE_ARCH_6,\n-    TARGET_CPU_arm1136js,\n-  },\n-  {\n-    \"armv6j\",\n-    arch_opttab_armv6j,\n-    {\n-      ISA_ARMv6j,\n-      isa_nobit\n-    },\n-    \"6J\", BASE_ARCH_6J,\n-    TARGET_CPU_arm1136js,\n-  },\n-  {\n-    \"armv6k\",\n-    arch_opttab_armv6k,\n-    {\n-      ISA_ARMv6k,\n-      isa_nobit\n-    },\n-    \"6K\", BASE_ARCH_6K,\n-    TARGET_CPU_mpcore,\n-  },\n-  {\n-    \"armv6z\",\n-    arch_opttab_armv6z,\n-    {\n-      ISA_ARMv6z,\n-      isa_nobit\n-    },\n-    \"6Z\", BASE_ARCH_6Z,\n-    TARGET_CPU_arm1176jzs,\n-  },\n-  {\n-    \"armv6kz\",\n-    arch_opttab_armv6kz,\n-    {\n-      ISA_ARMv6kz,\n-      isa_nobit\n-    },\n-    \"6KZ\", BASE_ARCH_6KZ,\n-    TARGET_CPU_arm1176jzs,\n-  },\n-  {\n-    \"armv6zk\",\n-    arch_opttab_armv6zk,\n-    {\n-      ISA_ARMv6kz,\n-      isa_nobit\n-    },\n-    \"6KZ\", BASE_ARCH_6KZ,\n-    TARGET_CPU_arm1176jzs,\n-  },\n-  {\n-    \"armv6t2\",\n-    arch_opttab_armv6t2,\n-    {\n-      ISA_ARMv6t2,\n-      isa_nobit\n-    },\n-    \"6T2\", BASE_ARCH_6T2,\n-    TARGET_CPU_arm1156t2s,\n-  },\n-  {\n-    \"armv6-m\",\n-    NULL,\n-    {\n-      ISA_ARMv6m,\n-      isa_nobit\n-    },\n-    \"6M\", BASE_ARCH_6M,\n-    TARGET_CPU_cortexm1,\n-  },\n-  {\n-    \"armv6s-m\",\n-    NULL,\n-    {\n-      ISA_ARMv6m,\n-      isa_nobit\n-    },\n-    \"6M\", BASE_ARCH_6M,\n-    TARGET_CPU_cortexm1,\n-  },\n-  {\n-    \"armv7\",\n-    arch_opttab_armv7,\n-    {\n-      ISA_ARMv7,\n-      isa_nobit\n-    },\n-    \"7\", BASE_ARCH_7,\n-    TARGET_CPU_cortexa8,\n-  },\n-  {\n-    \"armv7-a\",\n-    arch_opttab_armv7_a,\n-    {\n-      ISA_ARMv7a,\n-      isa_nobit\n-    },\n-    \"7A\", BASE_ARCH_7A,\n-    TARGET_CPU_cortexa8,\n-  },\n-  {\n-    \"armv7ve\",\n-    arch_opttab_armv7ve,\n-    {\n-      ISA_ARMv7ve,\n-      isa_nobit\n-    },\n-    \"7A\", BASE_ARCH_7A,\n-    TARGET_CPU_cortexa8,\n-  },\n-  {\n-    \"armv7-r\",\n-    arch_opttab_armv7_r,\n-    {\n-      ISA_ARMv7r,\n-      isa_nobit\n-    },\n-    \"7R\", BASE_ARCH_7R,\n-    TARGET_CPU_cortexr4,\n-  },\n-  {\n-    \"armv7-m\",\n-    NULL,\n-    {\n-      ISA_ARMv7m,\n-      isa_nobit\n-    },\n-    \"7M\", BASE_ARCH_7M,\n-    TARGET_CPU_cortexm3,\n-  },\n-  {\n-    \"armv7e-m\",\n-    arch_opttab_armv7e_m,\n-    {\n-      ISA_ARMv7em,\n-      isa_nobit\n-    },\n-    \"7EM\", BASE_ARCH_7EM,\n-    TARGET_CPU_cortexm4,\n-  },\n-  {\n-    \"armv8-a\",\n-    arch_opttab_armv8_a,\n-    {\n-      ISA_ARMv8a,\n-      isa_nobit\n-    },\n-    \"8A\", BASE_ARCH_8A,\n-    TARGET_CPU_cortexa53,\n-  },\n-  {\n-    \"armv8.1-a\",\n-    arch_opttab_armv8_1_a,\n-    {\n-      ISA_ARMv8_1a,\n-      isa_nobit\n-    },\n-    \"8A\", BASE_ARCH_8A,\n-    TARGET_CPU_cortexa53,\n-  },\n-  {\n-    \"armv8.2-a\",\n-    arch_opttab_armv8_2_a,\n-    {\n-      ISA_ARMv8_2a,\n-      isa_nobit\n-    },\n-    \"8A\", BASE_ARCH_8A,\n-    TARGET_CPU_cortexa53,\n-  },\n-  {\n-    \"armv8-m.base\",\n-    NULL,\n-    {\n-      ISA_ARMv8m_base,\n-      isa_nobit\n-    },\n-    \"8M_BASE\", BASE_ARCH_8M_BASE,\n-    TARGET_CPU_cortexm23,\n-  },\n-  {\n-    \"armv8-m.main\",\n-    arch_opttab_armv8_m_main,\n-    {\n-      ISA_ARMv8m_main,\n-      isa_nobit\n-    },\n-    \"8M_MAIN\", BASE_ARCH_8M_MAIN,\n-    TARGET_CPU_cortexm7,\n-  },\n-  {\n-    \"iwmmxt\",\n-    NULL,\n-    {\n-      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n-      isa_nobit\n-    },\n-    \"5TE\", BASE_ARCH_5TE,\n-    TARGET_CPU_iwmmxt,\n-  },\n-  {\n-    \"iwmmxt2\",\n-    NULL,\n-    {\n-      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n-      isa_nobit\n-    },\n-    \"5TE\", BASE_ARCH_5TE,\n-    TARGET_CPU_iwmmxt2,\n-  },\n-  {{NULL, NULL, {isa_nobit}},\n-   NULL, BASE_ARCH_0, TARGET_CPU_arm_none}\n-};\n-\n-const struct arm_fpu_desc all_fpus[] =\n-{\n-  {\n-    \"vfp\",\n-    {\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"vfpv2\",\n-    {\n-      ISA_VFPv2,ISA_FP_DBL,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"vfpv3\",\n-    {\n-      ISA_VFPv3,ISA_FP_D32,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"vfpv3-fp16\",\n-    {\n-      ISA_VFPv3,ISA_FP_D32,isa_bit_fp16conv,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"vfpv3-d16\",\n-    {\n-      ISA_VFPv3,ISA_FP_DBL,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"vfpv3-d16-fp16\",\n-    {\n-      ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"vfpv3xd\",\n-    {\n-      ISA_VFPv3,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"vfpv3xd-fp16\",\n-    {\n-      ISA_VFPv3,isa_bit_fp16conv,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"neon\",\n-    {\n-      ISA_VFPv3,ISA_NEON,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"neon-vfpv3\",\n-    {\n-      ISA_VFPv3,ISA_NEON,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"neon-fp16\",\n-    {\n-      ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"vfpv4\",\n-    {\n-      ISA_VFPv4,ISA_FP_D32,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"neon-vfpv4\",\n-    {\n-      ISA_VFPv4,ISA_NEON,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"vfpv4-d16\",\n-    {\n-      ISA_VFPv4,ISA_FP_DBL,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"fpv4-sp-d16\",\n-    {\n-      ISA_VFPv4,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"fpv5-sp-d16\",\n-    {\n-      ISA_FPv5,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"fpv5-d16\",\n-    {\n-      ISA_FPv5,ISA_FP_DBL,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"fp-armv8\",\n-    {\n-      ISA_FP_ARMv8,ISA_FP_D32,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"neon-fp-armv8\",\n-    {\n-      ISA_FP_ARMv8,ISA_NEON,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"crypto-neon-fp-armv8\",\n-    {\n-      ISA_FP_ARMv8,ISA_CRYPTO,\n-      isa_nobit\n-    }\n-  },\n-  {\n-    \"vfp3\",\n-    {\n-      ISA_VFPv3,ISA_FP_D32,\n-      isa_nobit\n-    }\n-  },\n-};"}, {"sha": "f30b81ec01100140f849fdfee17b85fd145f0c47", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=435d12725b9d75e508c5508964d4b03cdcb80cb7", "patch": "@@ -513,4 +513,16 @@ struct cpu_option\n   enum arch_type arch;\n };\n \n+extern const arch_option all_architectures[];\n+extern const cpu_option all_cores[];\n+\n+const cpu_option *arm_parse_cpu_option_name (const cpu_option *, const char *,\n+\t\t\t\t\t     const char *);\n+const arch_option *arm_parse_arch_option_name (const arch_option *,\n+\t\t\t\t\t       const char *, const char *);\n+void arm_parse_option_features (sbitmap, const cpu_arch_option *,\n+\t\t\t\tconst char *);\n+\n+void arm_initialize_isa (sbitmap, const enum isa_feature *);\n+\n #endif /* ! GCC_ARM_PROTOS_H */"}, {"sha": "6df7dc9fe3c0e3f88994141efae51f6e4de2832d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 189, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=435d12725b9d75e508c5508964d4b03cdcb80cb7", "patch": "@@ -3024,194 +3024,6 @@ arm_option_override_internal (struct gcc_options *opts,\n #endif\n }\n \n-/* Convert a static initializer array of feature bits to sbitmap\n-   representation.  */\n-static void\n-arm_initialize_isa (sbitmap isa, const enum isa_feature *isa_bits)\n-{\n-  bitmap_clear (isa);\n-  while (*isa_bits != isa_nobit)\n-    bitmap_set_bit (isa, *(isa_bits++));\n-}\n-\n-/* List the permitted CPU option names.  If TARGET is a near miss for an\n-   entry, print out the suggested alternative.  */\n-static void\n-arm_print_hint_for_cpu_option (const char *target,\n-\t\t\t       const cpu_option *list)\n-{\n-  auto_vec<const char*> candidates;\n-  for (; list->common.name != NULL; list++)\n-    candidates.safe_push (list->common.name);\n-  char *s;\n-  const char *hint = candidates_list_and_hint (target, s, candidates);\n-  if (hint)\n-    inform (input_location, \"valid arguments are: %s; did you mean %qs?\",\n-\t    s, hint);\n-  else\n-    inform (input_location, \"valid arguments are: %s\", s);\n-\n-  XDELETEVEC (s);\n-}\n-\n-/* Parse the base component of a CPU selection in LIST.  Return a\n-   pointer to the entry in the architecture table.  OPTNAME is the\n-   name of the option we are parsing and can be used if a diagnostic\n-   is needed.  */\n-static const cpu_option *\n-arm_parse_cpu_option_name (const cpu_option *list, const char *optname,\n-\t\t       const char *target)\n-{\n-  const cpu_option *entry;\n-  const char *end  = strchr (target, '+');\n-  size_t len = end ? end - target : strlen (target);\n-\n-  for (entry = list; entry->common.name != NULL; entry++)\n-    {\n-      if (strncmp (entry->common.name, target, len) == 0\n-\t  && entry->common.name[len] == '\\0')\n-\treturn entry;\n-    }\n-\n-  error_at (input_location, \"unrecognized %s target: %s\", optname, target);\n-  arm_print_hint_for_cpu_option (target, list);\n-  return NULL;\n-}\n-\n-/* List the permitted architecture option names.  If TARGET is a near\n-   miss for an entry, print out the suggested alternative.  */\n-static void\n-arm_print_hint_for_arch_option (const char *target,\n-\t\t\t       const arch_option *list)\n-{\n-  auto_vec<const char*> candidates;\n-  for (; list->common.name != NULL; list++)\n-    candidates.safe_push (list->common.name);\n-  char *s;\n-  const char *hint = candidates_list_and_hint (target, s, candidates);\n-  if (hint)\n-    inform (input_location, \"valid arguments are: %s; did you mean %qs?\",\n-\t    s, hint);\n-  else\n-    inform (input_location, \"valid arguments are: %s\", s);\n-\n-  XDELETEVEC (s);\n-}\n-\n-/* Parse the base component of a CPU or architecture selection in\n-   LIST.  Return a pointer to the entry in the architecture table.\n-   OPTNAME is the name of the option we are parsing and can be used if\n-   a diagnostic is needed.  */\n-static const arch_option *\n-arm_parse_arch_option_name (const arch_option *list, const char *optname,\n-\t\t\t    const char *target)\n-{\n-  const arch_option *entry;\n-  const char *end  = strchr (target, '+');\n-  size_t len = end ? end - target : strlen (target);\n-\n-  for (entry = list; entry->common.name != NULL; entry++)\n-    {\n-      if (strncmp (entry->common.name, target, len) == 0\n-\t  && entry->common.name[len] == '\\0')\n-\treturn entry;\n-    }\n-\n-  error_at (input_location, \"unrecognized %s target: %s\", optname, target);\n-  arm_print_hint_for_arch_option (target, list);\n-  return NULL;\n-}\n-\n-/* OPT isn't a recognized feature.  Print a suitable error message and\n-   suggest a possible value.  Always print the list of permitted\n-   values.  */\n-static void\n-arm_unrecognized_feature (const char *opt, size_t len,\n-\t\t\t  const cpu_arch_option *target)\n-{\n-  char *this_opt = XALLOCAVEC (char, len+1);\n-  auto_vec<const char*> candidates;\n-\n-  strncpy (this_opt, opt, len);\n-  this_opt[len] = 0;\n-\n-  error_at (input_location, \"%qs does not support feature %qs\", target->name,\n-\t    this_opt);\n-  for (const cpu_arch_extension *list = target->extensions;\n-       list->name != NULL;\n-       list++)\n-    candidates.safe_push (list->name);\n-\n-  char *s;\n-  const char *hint = candidates_list_and_hint (this_opt, s, candidates);\n-\n-  if (hint)\n-    inform (input_location, \"valid feature names are: %s; did you mean %qs?\",\n-\t    s, hint);\n-  else\n-    inform (input_location, \"valid feature names are: %s\", s);\n-\n-  XDELETEVEC (s);\n-}\n-\n-/* Parse any feature extensions to add to (or remove from) the\n-   permitted ISA selection.  */\n-static void\n-arm_parse_option_features (sbitmap isa, const cpu_arch_option *target,\n-\t\t\t   const char *opts_in)\n-{\n-  const char *opts = opts_in;\n-\n-  if (!opts)\n-    return;\n-\n-  if (!target->extensions)\n-    {\n-      error_at (input_location, \"%s does not take any feature options\",\n-\t\ttarget->name);\n-      return;\n-    }\n-\n-  while (opts)\n-    {\n-      gcc_assert (*opts == '+');\n-      const struct cpu_arch_extension *entry;\n-      const char *end = strchr (++opts, '+');\n-      size_t len = end ? end - opts : strlen (opts);\n-      bool matched = false;\n-\n-      for (entry = target->extensions;\n-\t   !matched && entry->name != NULL;\n-\t   entry++)\n-\t{\n-\t  if (strncmp (entry->name, opts, len) == 0\n-\t      && entry->name[len] == '\\0')\n-\t    {\n-\t      if (isa)\n-\t\t{\n-\t\t  const enum isa_feature *f = entry->isa_bits;\n-\t\t  if (entry->remove)\n-\t\t    {\n-\t\t      while (*f != isa_nobit)\n-\t\t\tbitmap_clear_bit (isa, *(f++));\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      while (*f != isa_nobit)\n-\t\t\tbitmap_set_bit (isa, *(f++));\n-\t\t    }\n-\t\t}\n-\t      matched = true;\n-\t    }\n-\t}\n-\n-      if (!matched)\n-\tarm_unrecognized_feature (opts, len, target);\n-\n-      opts = end;\n-    }\n-}\n-\n static sbitmap isa_all_fpubits;\n static sbitmap isa_quirkbits;\n \n@@ -30886,7 +30698,7 @@ arm_identify_fpu_from_isa (sbitmap isa)\n   if (bitmap_empty_p (fpubits))\n     return \"softvfp\";\n \n-  for (unsigned int i = 0; i < ARRAY_SIZE (all_fpus); i++)\n+  for (unsigned int i = 0; i < TARGET_FPU_auto; i++)\n     {\n       arm_initialize_isa (cand_fpubits, all_fpus[i].isa_bits);\n       if (bitmap_equal_p (fpubits, cand_fpubits))"}, {"sha": "70b89381454596a1adaca154444b091848266f89", "filename": "gcc/config/arm/parsecpu.awk", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435d12725b9d75e508c5508964d4b03cdcb80cb7/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=435d12725b9d75e508c5508964d4b03cdcb80cb7", "patch": "@@ -128,6 +128,39 @@ function gen_headers () {\n function gen_data () {\n     boilerplate(\"C\")\n \n+    print \"static const cpu_tune all_tunes[] =\"\n+    print \"{\"\n+\n+    ncpus = split (cpu_list, cpus)\n+\n+    for (n = 1; n <= ncpus; n++) {\n+\tprint \"  { /* \" cpus[n] \".  */\"\n+\t# scheduler\n+\tif (cpus[n] in cpu_tune_for) {\n+\t    if (! (cpu_tune_for[cpus[n]] in cpu_cnames)) {\n+\t\tfatal(\"unknown \\\"tune for\\\" target \" cpu_tune_for[cpus[n]] \\\n+\t\t      \" for CPU \" cpus[n])\n+\t    }\n+\t    print \"    TARGET_CPU_\" cpu_cnames[cpu_tune_for[cpus[n]]] \",\"\n+\t} else {\n+\t    print \"    TARGET_CPU_\" cpu_cnames[cpus[n]] \",\"\n+\t}\n+\t# tune_flags\n+\tif (cpus[n] in cpu_tune_flags) {\n+\t    print \"    (\" cpu_tune_flags[cpus[n]] \"),\"\n+\t} else print \"    0,\"\n+\t# tune\n+\tprint \"    &arm_\" cpu_cost[cpus[n]] \"_tune\"\n+\tprint \"  },\"\n+    }\n+    print \"  {TARGET_CPU_arm_none, 0, NULL}\"\n+    print \"};\"\n+    \n+}\n+\n+function gen_comm_data () {\n+    boilerplate(\"C\")\n+\n     ncpus = split (cpu_list, cpus)\n \n     for (n = 1; n <= ncpus; n++) {\n@@ -147,7 +180,7 @@ function gen_data () {\n \t}\n     }\n \n-    print \"static const cpu_option all_cores[] =\"\n+    print \"const cpu_option all_cores[] =\"\n     print \"{\"\n \n     for (n = 1; n <= ncpus; n++) {\n@@ -188,32 +221,6 @@ function gen_data () {\n     print \"  {{NULL, NULL, {isa_nobit}}, TARGET_ARCH_arm_none}\"\n     print \"};\"\n \n-    print \"static const cpu_tune all_tunes[] =\"\n-    print \"{\"\n-\n-    for (n = 1; n <= ncpus; n++) {\n-\tprint \"  { /* \" cpus[n] \".  */\"\n-\t# scheduler\n-\tif (cpus[n] in cpu_tune_for) {\n-\t    if (! (cpu_tune_for[cpus[n]] in cpu_cnames)) {\n-\t\tfatal(\"unknown \\\"tune for\\\" target \" cpu_tune_for[cpus[n]] \\\n-\t\t      \" for CPU \" cpus[n])\n-\t    }\n-\t    print \"    TARGET_CPU_\" cpu_cnames[cpu_tune_for[cpus[n]]] \",\"\n-\t} else {\n-\t    print \"    TARGET_CPU_\" cpu_cnames[cpus[n]] \",\"\n-\t}\n-\t# tune_flags\n-\tif (cpus[n] in cpu_tune_flags) {\n-\t    print \"    (\" cpu_tune_flags[cpus[n]] \"),\"\n-\t} else print \"    0,\"\n-\t# tune\n-\tprint \"    &arm_\" cpu_cost[cpus[n]] \"_tune\"\n-\tprint \"  },\"\n-    }\n-    print \"  {TARGET_CPU_arm_none, 0, NULL}\"\n-    print \"};\"\n-    \n     narchs = split (arch_list, archs)\n \n     for (n = 1; n <= narchs; n++) {\n@@ -233,7 +240,7 @@ function gen_data () {\n \t}\n     }\n \n-    print \"static const struct arch_option all_architectures[] =\"\n+    print \"const arch_option all_architectures[] =\"\n     print \"{\"\n \n     for (n = 1; n <= narchs; n++) {\n@@ -265,7 +272,7 @@ function gen_data () {\n     print \"   NULL, BASE_ARCH_0, TARGET_CPU_arm_none}\"\n     print \"};\\n\"\n \n-    print \"const struct arm_fpu_desc all_fpus[] =\"\n+    print \"const arm_fpu_desc all_fpus[] =\"\n     print \"{\"\n \n     nfpus = split (fpu_list, fpus)\n@@ -281,10 +288,6 @@ function gen_data () {\n     }\n \n     print \"};\"\n-}\n-\n-function gen_comm_data () {\n-    boilerplate(\"C\")\n \n     print \"static const struct arm_arch_core_flag arm_arch_core_flags[] =\"\n     print \"{\""}]}