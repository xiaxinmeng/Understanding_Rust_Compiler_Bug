{"sha": "a8cfbbdc7413f05278fa54d4c4644ec6eb5d943b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThjZmJiZGM3NDEzZjA1Mjc4ZmE1NGQ0YzQ2NDRlYzZlYjVkOTQzYg==", "commit": {"author": {"name": "Marat Zakirov", "email": "m.zakirov@samsung.com", "date": "2014-11-07T08:15:19Z"}, "committer": {"name": "Marat Zakirov", "email": "mzakirov@gcc.gnu.org", "date": "2014-11-07T08:15:19Z"}, "message": "mklog: Always doubt in functions.\n\ncontrib/\n\n2014-11-07  Marat Zakirov  <m.zakirov@samsung.com>\n\n\t* mklog: Always doubt in functions.  \n\tAdd EOF protection.\n\nFrom-SVN: r217212", "tree": {"sha": "d7a4550afd1767a5e8e18e8e54c63c5ba8992337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7a4550afd1767a5e8e18e8e54c63c5ba8992337"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8cfbbdc7413f05278fa54d4c4644ec6eb5d943b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8cfbbdc7413f05278fa54d4c4644ec6eb5d943b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8cfbbdc7413f05278fa54d4c4644ec6eb5d943b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8cfbbdc7413f05278fa54d4c4644ec6eb5d943b/comments", "author": null, "committer": null, "parents": [{"sha": "decfc6e1135287625cfa81c3a56bfa84512c7b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decfc6e1135287625cfa81c3a56bfa84512c7b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/decfc6e1135287625cfa81c3a56bfa84512c7b5a"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "9dcc7ea3ac9c77e8b689ef9e01bc9fe3505e6037", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8cfbbdc7413f05278fa54d4c4644ec6eb5d943b/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8cfbbdc7413f05278fa54d4c4644ec6eb5d943b/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=a8cfbbdc7413f05278fa54d4c4644ec6eb5d943b", "patch": "@@ -1,3 +1,8 @@\n+2014-11-07  Marat Zakirov  <m.zakirov@samsung.com>\n+\n+\t* mklog: Always doubt in functions.  \n+\tAdd EOF protection.  \n+\n 2014-10-31  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config-list.mk: Don't build Go for certain targets."}, {"sha": "8e3c6b619ac6bc62826dbcb5dd695bdad2201d75", "filename": "contrib/mklog", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8cfbbdc7413f05278fa54d4c4644ec6eb5d943b/contrib%2Fmklog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8cfbbdc7413f05278fa54d4c4644ec6eb5d943b/contrib%2Fmklog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmklog?ref=a8cfbbdc7413f05278fa54d4c4644ec6eb5d943b", "patch": "@@ -108,10 +108,22 @@ sub remove_suffixes ($) {\n \treturn $filename;\n }\n \n+sub is_context_hunk_start {\n+\treturn @_[0] =~ /^\\*\\*\\*\\*\\*\\** ([a-zA-Z0-9_].*)/;\n+}\n+\n+sub is_unified_hunk_start {\n+\treturn @_[0] =~ /^@@ .* @@ ([a-zA-Z0-9_].*)/;\n+}\n+\n # Check if line is a top-level declaration.\n # TODO: ignore preprocessor directives except maybe #define ?\n sub is_top_level {\n \tmy ($function, $is_context_diff) = (@_);\n+\tif (is_unified_hunk_start ($function)\n+\t    || is_context_hunk_start ($function)) {\n+\t    return 1;\n+\t}\n \tif ($is_context_diff) {\n \t\t$function =~ s/^..//;\n \t} else {\n@@ -200,14 +212,10 @@ foreach (@diff_lines) {\n         $look_for_funs = 0;\n     }\n \n-    # Mark if we met doubtfully changed function.\n-    $doubtfunc = 0;\n-    if ($diff_lines[$line_idx] =~ /^@@ .* @@ ([a-zA-Z0-9_].*)/) {\n-\t    $doubtfunc = 1;\n+    if (is_unified_hunk_start ($diff_lines[$line_idx])) {\n         $is_context_diff = 0;\n     }\n-    elsif ($diff_lines[$line_idx] =~ /^\\*\\*\\*\\*\\*\\** ([a-zA-Z0-9_].*)/) {\n-\t    $doubtfunc = 1;\n+    elsif (is_context_hunk_start ($diff_lines[$line_idx])) {\n \t    $is_context_diff = 1;\n     }\n \n@@ -222,7 +230,6 @@ foreach (@diff_lines) {\n     #\n     # The third pattern looks for the starts of functions or classes\n     # within a diff block both for context and unified diff files.\n-\n     if ($look_for_funs\n         && (/^\\*\\*\\*\\*\\*\\** ([a-zA-Z0-9_].*)/\n \t|| /^@@ .* @@ ([a-zA-Z0-9_].*)/\n@@ -249,19 +256,19 @@ foreach (@diff_lines) {\n \t}\n \t# Check is function really modified\n \t$no_real_change = 0;\n-\tif ($doubtfunc) {\n-\t\t$idx = $line_idx;\n+\t$idx = $line_idx;\n \t# Skip line info in context diffs.\n-\t\twhile ($is_context_diff && $diff_lines[$idx + 1] =~ /^[-\\*]{3} [0-9]/) {\n-\t\t\t++$idx;\n-\t\t}\n+\twhile ($idx <= $#diff_lines && $is_context_diff\n+               && $diff_lines[$idx + 1] =~ /^[-\\*]{3} [0-9]/) {\n+\t\t++$idx;\n+\t}\n \t# Check all lines till the first change\n \t# for the presence of really changed function\n-\t\tdo {\n-\t\t\t++$idx;\n-\t\t\t$no_real_change = is_top_level ($diff_lines[$idx], $is_context_diff);\n-\t\t} while (!$no_real_change && ($diff_lines[$idx] !~ /^[-+!]/))\n-\t}\n+\tdo {\n+\t\t++$idx;\n+\t\t$no_real_change = $idx > $#diff_lines\n+\t\t\t\t  || is_top_level ($diff_lines[$idx], $is_context_diff);\n+\t} while (!$no_real_change && ($diff_lines[$idx] !~ /^[-+!]/));\n \tif ($fn && !$seen_names{$fn} && !$no_real_change) {\n \t    # If this is the first function in the file, we display it next\n \t    # to the filename, so we need an extra space before the opening"}]}