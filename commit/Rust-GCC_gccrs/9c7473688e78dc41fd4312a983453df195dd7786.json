{"sha": "9c7473688e78dc41fd4312a983453df195dd7786", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM3NDczNjg4ZTc4ZGM0MWZkNDMxMmE5ODM0NTNkZjE5NWRkNzc4Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-03T08:07:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-03T08:07:09Z"}, "message": "dse: Fix up hard reg conflict checking in replace_read [PR99863]\n\nSince PR37922 fix RTL DSE has hard register conflict checking\nin replace_read, so that if the replacement sequence sets (or typically just\nclobbers) some hard register (usually condition codes) we verify that\nhard register is not live.\nUnfortunately, it compares the hard reg set clobbered/set by the sequence\n(regs_set) against the currently live hard register set, but it then\nemits the insn sequence not at the current insn position, but before\nstore_insn->insn.\nSo, we should not compare against the current live hard register set,\nbut against the hard register live set at the point of the store insn.\nFortunately, we already have that remembered in store_insn->fixed_regs_live.\n\nIn addition to bootstrapping/regtesting this patch on x86_64-linux and\ni686-linux, I've also added statistics gathering and it seems the only\nplace where we end up rejecting the replace_read is the newly added\ntestcase (the PR37922 is no longer effective at that) and fixed_regs_live\nhas been always non-NULL at the if (store_insn->fixed_regs_live) spot.\nRather than having there an assert, I chose to just keep regs_set\nas is, which means in that hypothetical case where fixed_regs_live wouldn't\nbe computed for some store we'd still accept sequences that don't\nclobber/set any hard registers and just punt on those that clobber/set\nthose.\n\n2021-04-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/99863\n\t* dse.c (replace_read): Drop regs_live argument.  Instead of\n\tregs_live, use store_insn->fixed_regs_live if non-NULL,\n\totherwise punt if insns sequence clobbers or sets any hard\n\tregisters.\n\n\t* gcc.target/i386/pr99863.c: New test.", "tree": {"sha": "cdde75e4db55de93033403f3735699578a63d32e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdde75e4db55de93033403f3735699578a63d32e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c7473688e78dc41fd4312a983453df195dd7786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c7473688e78dc41fd4312a983453df195dd7786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c7473688e78dc41fd4312a983453df195dd7786", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c7473688e78dc41fd4312a983453df195dd7786/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda41ce0e8414aec59e6b9fbe645d96e6e8193e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda41ce0e8414aec59e6b9fbe645d96e6e8193e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda41ce0e8414aec59e6b9fbe645d96e6e8193e2"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "b634429449c7c5b9c2a520774f446a4ee325aea2", "filename": "gcc/dse.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7473688e78dc41fd4312a983453df195dd7786/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7473688e78dc41fd4312a983453df195dd7786/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=9c7473688e78dc41fd4312a983453df195dd7786", "patch": "@@ -1970,8 +1970,7 @@ get_stored_val (store_info *store_info, machine_mode read_mode,\n \n static bool\n replace_read (store_info *store_info, insn_info_t store_insn,\n-\t      read_info_t read_info, insn_info_t read_insn, rtx *loc,\n-\t      bitmap regs_live)\n+\t      read_info_t read_info, insn_info_t read_insn, rtx *loc)\n {\n   machine_mode store_mode = GET_MODE (store_info->mem);\n   machine_mode read_mode = GET_MODE (read_info->mem);\n@@ -2040,7 +2039,8 @@ replace_read (store_info *store_info, insn_info_t store_insn,\n \t  note_stores (this_insn, look_for_hardregs, regs_set);\n \t}\n \n-      bitmap_and_into (regs_set, regs_live);\n+      if (store_insn->fixed_regs_live)\n+\tbitmap_and_into (regs_set, store_insn->fixed_regs_live);\n       if (!bitmap_empty_p (regs_set))\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -2286,7 +2286,7 @@ check_mem_read_rtx (rtx *loc, bb_info_t bb_info)\n \t\t\t\t\t\t offset - store_info->offset,\n \t\t\t\t\t\t width)\n \t\t      && replace_read (store_info, i_ptr, read_info,\n-\t\t\t\t       insn_info, loc, bb_info->regs_live))\n+\t\t\t\t       insn_info, loc))\n \t\t    return;\n \n \t\t  /* The bases are the same, just see if the offsets\n@@ -2352,8 +2352,7 @@ check_mem_read_rtx (rtx *loc, bb_info_t bb_info)\n \t\t\t\t   store_info->width)\n \t      && all_positions_needed_p (store_info,\n \t\t\t\t\t offset - store_info->offset, width)\n-\t      && replace_read (store_info, i_ptr,  read_info, insn_info, loc,\n-\t\t\t       bb_info->regs_live))\n+\t      && replace_read (store_info, i_ptr,  read_info, insn_info, loc))\n \t    return;\n \n \t  remove = canon_true_dependence (store_info->mem,"}, {"sha": "3d9d405391ee9deb1124fd93ec1f4a6878a4924a", "filename": "gcc/testsuite/gcc.target/i386/pr99863.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7473688e78dc41fd4312a983453df195dd7786/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99863.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7473688e78dc41fd4312a983453df195dd7786/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99863.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99863.c?ref=9c7473688e78dc41fd4312a983453df195dd7786", "patch": "@@ -0,0 +1,33 @@\n+/* PR rtl-optimization/99863 */\n+/* { dg-do run } */\n+/* { dg-options \"-O -fno-tree-forwprop -mno-sse2 -Wno-psabi\" } */\n+\n+typedef unsigned char __attribute__((__vector_size__ (8))) A;\n+typedef unsigned char __attribute__((__vector_size__ (32))) B;\n+typedef unsigned char __attribute__((__vector_size__ (64))) C;\n+typedef unsigned int __attribute__((__vector_size__ (32))) D;\n+typedef unsigned int __attribute__((__vector_size__ (64))) E;\n+typedef unsigned long long F;\n+\n+D a;\n+A b;\n+\n+A\n+foo (E x, F y)\n+{\n+  D c = (y <= 0) * a;\n+  x *= (0 < y);\n+  C d = (C) x;\n+  B e = ((union { C a; B b[2];}) d).b[0] + (B) c;\n+  A f = ((union { B a; A b[4];}) e).b[0] + (A) b;\n+  return f;\n+}\n+\n+int\n+main ()\n+{\n+  F x = (F) foo ((E) { 3 }, 5);\n+  if (x != 3)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}