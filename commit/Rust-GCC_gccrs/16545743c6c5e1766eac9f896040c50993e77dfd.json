{"sha": "16545743c6c5e1766eac9f896040c50993e77dfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY1NDU3NDNjNmM1ZTE3NjZlYWM5Zjg5NjA0MGM1MDk5M2U3N2RmZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-06-01T17:23:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-06-01T17:23:41Z"}, "message": "re PR libstdc++/61374 (string_view::operator string() is buggy)\n\n\tPR libstdc++/61374\n\t* include/experimental/string_view (operator basic_string): Correct\n\torder of arguments.\n\t(to_string): Replace with member function.\n\tAdd inline specifiers. Remove unused header. Remove _S_empty_rep and\n\tallow _M_str to be null.\n\t* testsuite/experimental/string_view/cons/char/1.cc: Adjust to new\n\tdefault constructor semantics.\n\t* testsuite/experimental/string_view/cons/wchar_t/1.cc: Likewise.\n\t* testsuite/experimental/string_view/operations/copy/char/1.cc: Fix\n\tcopyright dates. Remove unused header.\n\t* testsuite/experimental/string_view/operations/copy/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/operations/data/char/1.cc:\n\tFix copyright dates. Adjust to new default constructor semantics.\n\t* testsuite/experimental/string_view/operations/data/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/operations/to_string/1.cc: New.\n\nFrom-SVN: r211113", "tree": {"sha": "4f41e7bc2578a1bc38d4d94bab70ebff13a39843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f41e7bc2578a1bc38d4d94bab70ebff13a39843"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16545743c6c5e1766eac9f896040c50993e77dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16545743c6c5e1766eac9f896040c50993e77dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16545743c6c5e1766eac9f896040c50993e77dfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16545743c6c5e1766eac9f896040c50993e77dfd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6041d142c48fc03e72d132a29439121e7978e4f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6041d142c48fc03e72d132a29439121e7978e4f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6041d142c48fc03e72d132a29439121e7978e4f3"}], "stats": {"total": 216, "additions": 129, "deletions": 87}, "files": [{"sha": "4d69c259abed8a00d0717ac93905412c67775d1d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=16545743c6c5e1766eac9f896040c50993e77dfd", "patch": "@@ -1,3 +1,24 @@\n+2014-06-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/61374\n+\t* include/experimental/string_view (operator basic_string): Correct\n+\torder of arguments.\n+\t(to_string): Replace with member function.\n+\tAdd inline specifiers. Remove unused header. Remove _S_empty_rep and\n+\tallow _M_str to be null.\n+\t* testsuite/experimental/string_view/cons/char/1.cc: Adjust to new\n+\tdefault constructor semantics.\n+\t* testsuite/experimental/string_view/cons/wchar_t/1.cc: Likewise.\n+\t* testsuite/experimental/string_view/operations/copy/char/1.cc: Fix\n+\tcopyright dates. Remove unused header.\n+\t* testsuite/experimental/string_view/operations/copy/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/operations/data/char/1.cc:\n+\tFix copyright dates. Adjust to new default constructor semantics.\n+\t* testsuite/experimental/string_view/operations/data/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/experimental/string_view/operations/to_string/1.cc: New.\n+\n 2014-05-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/lib/libstdc++.exp (libstdc++_init): Adjust regexp to"}, {"sha": "49f46af544f03f7c6762686a0d2111101738b438", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 47, "deletions": 61, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=16545743c6c5e1766eac9f896040c50993e77dfd", "patch": "@@ -39,7 +39,6 @@\n # include <bits/c++14_warning.h>\n #else\n \n-#include <debug/debug.h>\n #include <string>\n #include <limits>\n \n@@ -66,18 +65,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *    _CharT*    _M_str\n    *    size_t     _M_len\n    *  @endcode\n-   *\n-   *  A basic_string_view represents an empty string with a static constexpr\n-   *  length one string:\n-   *\n-   *  @code\n-   *    static constexpr value_type _S_empty_str[1]{0};\n-   *  @endcode\n    */\n-  template<typename _CharT, typename _Traits = char_traits<_CharT>>\n+  template<typename _CharT, typename _Traits = std::char_traits<_CharT>>\n     class basic_string_view\n     {\n-\n     public:\n \n       // types\n@@ -99,7 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr\n       basic_string_view() noexcept\n-      : _M_len{0}, _M_str{_S_empty_str}\n+      : _M_len{0}, _M_str{nullptr}\n       { }\n \n       constexpr basic_string_view(const basic_string_view&) noexcept = default;\n@@ -112,12 +103,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr basic_string_view(const _CharT* __str)\n       : _M_len{__str == nullptr ? 0 : traits_type::length(__str)},\n-\t_M_str{__str == nullptr ? _S_empty_str : __str}\n+\t_M_str{__str}\n       { }\n \n       constexpr basic_string_view(const _CharT* __str, size_type __len)\n-      : _M_len{__str == nullptr ? 0 :__len},\n-        _M_str{__str == nullptr ? _S_empty_str : __str}\n+      : _M_len{__len},\n+        _M_str{__str}\n       { }\n \n       basic_string_view&\n@@ -143,19 +134,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       const_reverse_iterator\n       rbegin() const noexcept\n-      { return std::reverse_iterator<const_iterator>(this->end()); }\n+      { return const_reverse_iterator(this->end()); }\n \n       const_reverse_iterator\n       rend() const noexcept\n-      { return std::reverse_iterator<const_iterator>(this->begin()); }\n+      { return const_reverse_iterator(this->begin()); }\n \n       const_reverse_iterator\n       crbegin() const noexcept\n-      { return std::reverse_iterator<const_iterator>(this->end()); }\n+      { return const_reverse_iterator(this->end()); }\n \n       const_reverse_iterator\n       crend() const noexcept\n-      { return std::reverse_iterator<const_iterator>(this->begin()); }\n+      { return const_reverse_iterator(this->begin()); }\n \n       // [string.view.capacity], capacity\n \n@@ -169,8 +160,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr size_type\n       max_size() const noexcept\n-      { return ((npos - sizeof(size_type) - sizeof(void*))\n-\t\t/ sizeof(value_type) / 4); }\n+      {\n+\treturn (npos - sizeof(size_type) - sizeof(void*))\n+\t\t/ sizeof(value_type) / 4;\n+      }\n \n       constexpr bool\n       empty() const noexcept\n@@ -195,7 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t     \"(which is %zu) >= this->size() \"\n \t\t\t\t\t     \"(which is %zu)\"),\n \t\t\t\t\t __pos, this->size()),\n-\t\t_S_empty_str[0]);\n+\t\t*this->_M_str);\n       }\n \n       constexpr const _CharT&\n@@ -219,11 +212,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return this->_M_str; }\n \n       // [string.view.modifiers], modifiers:\n+\n       void\n       clear() noexcept\n       {\n \tthis->_M_len = 0;\n-\tthis->_M_str = _S_empty_str;\n+\tthis->_M_str = nullptr;\n       }\n \n       void\n@@ -251,8 +245,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Allocator>\n         explicit operator basic_string<_CharT, _Traits, _Allocator>() const\n         {\n-\t  return basic_string<_CharT, _Traits, _Allocator>\n-\t\t\t\t\t(this->_M_len, this->_M_str);\n+\t  return { this->_M_str, this->_M_len };\n+\t}\n+\n+      template<typename _Allocator = std::allocator<_CharT>>\n+\tbasic_string<_CharT, _Traits, _Allocator>\n+\tto_string(const _Allocator& __alloc = _Allocator()) const\n+\t{\n+\t  return { this->_M_str, this->_M_len, __alloc };\n \t}\n \n       size_type\n@@ -431,8 +431,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t     : static_cast<int>(difference_type{__n1 - __n2});\n       }\n \n-      static constexpr value_type _S_empty_str[1]{};\n-\n       size_t\t    _M_len;\n       const _CharT* _M_str;\n     };\n@@ -456,131 +454,119 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator==(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) == 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator==(basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return __x.compare(__y) == 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator==(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) == 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator!=(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return !(__x == __y); }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator!=(basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return !(__x == __y); }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator!=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return !(__x == __y); }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator< (basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) < 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator< (basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return __x.compare(__y) < 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator< (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) < 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator> (basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) > 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator> (basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return __x.compare(__y) > 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator> (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) > 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator<=(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) <= 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator<=(basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return __x.compare(__y) <= 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator<=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) <= 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator>=(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) >= 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator>=(basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return __x.compare(__y) >= 0; }\n \n   template<typename _CharT, typename _Traits>\n-    bool\n+    inline bool\n     operator>=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) >= 0; }\n \n-  // [string.view.comparison], sufficient additional overloads of comparison functions\n-\n-  // [string.view.nonmem], other non-member basic_string_view functions\n-  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n-           typename _Allocator = allocator<_CharT>>\n-    basic_string<_CharT, _Traits, _Allocator>\n-    to_string(basic_string_view<_CharT, _Traits> __str,\n-\t      const _Allocator& __alloc = _Allocator())\n-    {\n-      return basic_string<_CharT, _Traits, _Allocator>\n-\t\t\t(__str.begin(), __str.end(), __alloc);\n-    }\n-\n+  // [string.view.io], Inserters and extractors\n   template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-      operator<<(basic_ostream<_CharT, _Traits>& __os,\n-                 basic_string_view<_CharT,_Traits> __str)\n-      { return __ostream_insert(__os, __str.data(), __str.size()); }\n+    inline basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t       basic_string_view<_CharT,_Traits> __str)\n+    { return __ostream_insert(__os, __str.data(), __str.size()); }\n \n \n   // basic_string_view typedef names"}, {"sha": "44562665abef17711488119379f5ceb103db8240", "filename": "libstdc++-v3/include/experimental/string_view.tcc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view.tcc?ref=16545743c6c5e1766eac9f896040c50993e77dfd", "patch": "@@ -46,10 +46,6 @@ namespace experimental\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  template<typename _CharT, typename _Traits>\n-    constexpr _CharT\n-    basic_string_view<_CharT, _Traits>::_S_empty_str[1];\n-\n   template<typename _CharT, typename _Traits>\n     typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::"}, {"sha": "a443b0ac7e03580beaa4a7867da143a1fd9c8bd1", "filename": "libstdc++-v3/testsuite/experimental/string_view/cons/char/1.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F1.cc?ref=16545743c6c5e1766eac9f896040c50993e77dfd", "patch": "@@ -33,7 +33,7 @@ test01()\n   // basic_string_view()\n   const std::experimental::string_view str00{};\n   VERIFY( str00.length() == 0 );\n-  VERIFY( str00.data() != nullptr );\n+  VERIFY( str00.data() == nullptr );\n \n   // basic_string_view(const char*)\n   const char str_lit01[] = \"rodeo beach, marin\";\n@@ -54,11 +54,6 @@ test01()\n   VERIFY( str05.length() == len_lit01 );\n   VERIFY( str05.data() == str_lit01 );\n \n-  //  basic_string_view(const char* s, std::size_t l)\n-  std::experimental::string_view str06{nullptr, len_lit01};\n-  VERIFY( str06.length() == 0 );\n-  VERIFY( str06.data() != nullptr );\n-\n   // basic_string_view(basic_string& s)\n   std::string istr07(10, 'z');\n   std::experimental::string_view str07{istr07};"}, {"sha": "9ba9b84a1805b042d1c95907694af56466e0da49", "filename": "libstdc++-v3/testsuite/experimental/string_view/cons/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F1.cc?ref=16545743c6c5e1766eac9f896040c50993e77dfd", "patch": "@@ -33,7 +33,7 @@ test01()\n   // basic_string_view()\n   const std::experimental::wstring_view str00{};\n   VERIFY( str00.length() == 0 );\n-  VERIFY( str00.data() != nullptr );\n+  VERIFY( str00.data() == nullptr );\n \n   // basic_string_view(const char*)\n   const wchar_t str_lit01[] = L\"rodeo beach, marin\";\n@@ -54,11 +54,6 @@ test01()\n   VERIFY( str05.length() == len_lit01 );\n   VERIFY( str05.data() == str_lit01 );\n \n-  //  basic_string_view(const wchar_t* s, std::size_t l)\n-  std::experimental::wstring_view str06{nullptr, len_lit01};\n-  VERIFY( str06.length() == 0 );\n-  VERIFY( str06.data() != nullptr );\n-\n   // basic_string_view(basic_string& s)\n   std::wstring istr07(10, L'z');\n   std::experimental::wstring_view str07{istr07};"}, {"sha": "d0f3e8d69011461351f47f45477cdc878a096614", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/copy/char/1.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fchar%2F1.cc?ref=16545743c6c5e1766eac9f896040c50993e77dfd", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++1y\" }\n \n-// Copyright (C) 2013 Free Software Foundation, Inc.\n+// Copyright (C) 2013-2014 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,7 +20,6 @@\n // basic_string_view::copy\n \n #include <experimental/string_view>\n-#include <stdexcept>\n #include <testsuite_hooks.h>\n \n bool"}, {"sha": "bf3f14b14bd27750b256319e0af9122a52a4654a", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/copy/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fwchar_t%2F1.cc?ref=16545743c6c5e1766eac9f896040c50993e77dfd", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++1y\" }\n \n-// Copyright (C) 2013 Free Software Foundation, Inc.\n+// Copyright (C) 2013-2014 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,7 +20,6 @@\n // basic_string_view::copy\n \n #include <experimental/string_view>\n-#include <stdexcept>\n #include <testsuite_hooks.h>\n \n bool"}, {"sha": "a34492606ad76efc571ed152eed810161992d628", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/data/char/1.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fchar%2F1.cc?ref=16545743c6c5e1766eac9f896040c50993e77dfd", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++1y\" }\n \n-// Copyright (C) 2013 Free Software Foundation, Inc.\n+// Copyright (C) 2013-2014 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,10 +29,9 @@ test01()\n \n   std::experimental::string_view empty;\n \n-  // data() for size == 0 is non-NULL.\n   VERIFY( empty.size() == 0 );\n   const std::experimental::string_view::value_type* p = empty.data();\n-  VERIFY( p );\n+  VERIFY( p == nullptr );\n \n   return 0;\n }"}, {"sha": "41d2d1411d92ab1aae934c7898bb277bff10be0d", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/data/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc?ref=16545743c6c5e1766eac9f896040c50993e77dfd", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++1y\" }\n \n-// Copyright (C) 2013 Free Software Foundation, Inc.\n+// Copyright (C) 2013-2014 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,10 +29,9 @@ test01()\n \n   std::experimental::wstring_view empty;\n \n-  // data() for size == 0 is non-NULL.\n   VERIFY( empty.size() == 0 );\n   const std::experimental::wstring_view::value_type* p = empty.data();\n-  VERIFY( p );\n+  VERIFY( p == nullptr );\n \n   return 0;\n }"}, {"sha": "c0a5734c6758f160d4c553a90e381a71b8ed01e8", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/to_string/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fto_string%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16545743c6c5e1766eac9f896040c50993e77dfd/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fto_string%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fto_string%2F1.cc?ref=16545743c6c5e1766eac9f896040c50993e77dfd", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::to_string\n+\n+#include <experimental/string_view>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  const char str_lit[] = \"123456789A\";\n+  const std::experimental::string_view sv(str_lit);\n+  char buffer[4] = { 0 };\n+\n+  auto s1 = sv.to_string();\n+  VERIFY( s1 == str_lit );\n+  using test_alloc = __gnu_test::tracker_allocator<char>;\n+  auto s2 = sv.to_string( test_alloc{} );\n+  static_assert( std::is_same<decltype(s2)::allocator_type, test_alloc>::value,\n+                 \"to_string() uses custom allocator\" );\n+  VERIFY( std::equal(s1.begin(), s1.end(), s2.begin(), s2.end()) );\n+  auto s3 = static_cast<std::string>(sv);\n+  VERIFY( s3 == s1 );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}