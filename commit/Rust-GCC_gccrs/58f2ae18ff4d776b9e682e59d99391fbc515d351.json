{"sha": "58f2ae18ff4d776b9e682e59d99391fbc515d351", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmMmFlMThmZjRkNzc2YjllNjgyZTU5ZDk5MzkxZmJjNTE1ZDM1MQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-07-09T02:50:07Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-07-09T02:50:07Z"}, "message": "always define SHORT_IMMEDIATES_SIGN_EXTEND\n\ngcc/ChangeLog:\n\n2015-07-08  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* combine.c (update_rsp_from_reg_equal): Don't check if\n\tSHORT_IMMEDIATES_SIGN_EXTEND is defined.\n\t(reg_nonzero_bits_for_combine): Likewise.\n\t* config/alpha/alpha.h: Define SHORT_IMMEDIATES_SIGN_EXTEND to\n\t1.\n\t* config/frv/frv.h: Likewise.\n\t* config/lm32/lm32.h: Likewise.\n\t* config/mep/mep.h: Likewise.\n\t* config/mips/mips.h: Likewise.\n\t* config/rs6000/rs6000.h: Likewise.\n\t* config/sh/sh.h: Likewise.\n\t* config/tilegx/tilegx.h (enum reg_class): Likewise.\n\t* config/tilepro/tilepro.h: Likewise.\n\t* defaults.h: Add default for SHORT_IMMEDIATES_SIGN_EXTEND.\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in: Adjust.\n\t* rtlanal.c (nonzero_bits1): Likewise.\n\nFrom-SVN: r225593", "tree": {"sha": "46c8ef20e4e8f82019d6ebb3346caa847ecb58a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46c8ef20e4e8f82019d6ebb3346caa847ecb58a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f2ae18ff4d776b9e682e59d99391fbc515d351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f2ae18ff4d776b9e682e59d99391fbc515d351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f2ae18ff4d776b9e682e59d99391fbc515d351", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f2ae18ff4d776b9e682e59d99391fbc515d351/comments", "author": null, "committer": null, "parents": [{"sha": "be1a835d86647f081c681ea8fa3e46e66f275b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1a835d86647f081c681ea8fa3e46e66f275b2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be1a835d86647f081c681ea8fa3e46e66f275b2e"}], "stats": {"total": 71, "additions": 46, "deletions": 25}, "files": [{"sha": "2275e3b6b7950232d571d50ec4a2fa99f30e04a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -1,3 +1,23 @@\n+2015-07-08  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* combine.c (update_rsp_from_reg_equal): Don't check if\n+\tSHORT_IMMEDIATES_SIGN_EXTEND is defined.\n+\t(reg_nonzero_bits_for_combine): Likewise.\n+\t* config/alpha/alpha.h: Define SHORT_IMMEDIATES_SIGN_EXTEND to\n+\t1.\n+\t* config/frv/frv.h: Likewise.\n+\t* config/lm32/lm32.h: Likewise.\n+\t* config/mep/mep.h: Likewise.\n+\t* config/mips/mips.h: Likewise.\n+\t* config/rs6000/rs6000.h: Likewise.\n+\t* config/sh/sh.h: Likewise.\n+\t* config/tilegx/tilegx.h (enum reg_class): Likewise.\n+\t* config/tilepro/tilepro.h: Likewise.\n+\t* defaults.h: Add default for SHORT_IMMEDIATES_SIGN_EXTEND.\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in: Adjust.\n+\t* rtlanal.c (nonzero_bits1): Likewise.\n+\n 2015-07-08  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* combine.c (do_SUBST_MODE): Don't check the value of HAVE_cc0"}, {"sha": "14d1468699a0750f07d826c39e205dc6995323c0", "filename": "gcc/combine.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -1624,7 +1624,6 @@ setup_incoming_promotions (rtx_insn *first)\n     }\n }\n \n-#ifdef SHORT_IMMEDIATES_SIGN_EXTEND\n /* If MODE has a precision lower than PREC and SRC is a non-negative constant\n    that would appear negative in MODE, sign-extend SRC for use in nonzero_bits\n    because some machines (maybe most) will actually do the sign-extension and\n@@ -1644,7 +1643,6 @@ sign_extend_short_imm (rtx src, machine_mode mode, unsigned int prec)\n \n   return src;\n }\n-#endif\n \n /* Update RSP for pseudo-register X from INSN's REG_EQUAL note (if one exists)\n    and SET.  */\n@@ -1661,11 +1659,12 @@ update_rsp_from_reg_equal (reg_stat_type *rsp, rtx_insn *insn, const_rtx set,\n   if (reg_equal_note)\n     reg_equal = XEXP (reg_equal_note, 0);\n \n-#ifdef SHORT_IMMEDIATES_SIGN_EXTEND\n-  src = sign_extend_short_imm (src, GET_MODE (x), BITS_PER_WORD);\n-  if (reg_equal)\n-    reg_equal = sign_extend_short_imm (reg_equal, GET_MODE (x), BITS_PER_WORD);\n-#endif\n+  if (SHORT_IMMEDIATES_SIGN_EXTEND)\n+    {\n+      src = sign_extend_short_imm (src, GET_MODE (x), BITS_PER_WORD);\n+      if (reg_equal)\n+\treg_equal = sign_extend_short_imm (reg_equal, GET_MODE (x), BITS_PER_WORD);\n+    }\n \n   /* Don't call nonzero_bits if it cannot change anything.  */\n   if (rsp->nonzero_bits != ~(unsigned HOST_WIDE_INT) 0)\n@@ -9824,10 +9823,10 @@ reg_nonzero_bits_for_combine (const_rtx x, machine_mode mode,\n \n   if (tem)\n     {\n-#ifdef SHORT_IMMEDIATES_SIGN_EXTEND\n-      tem = sign_extend_short_imm (tem, GET_MODE (x),\n-\t\t\t\t   GET_MODE_PRECISION (mode));\n-#endif\n+      if (SHORT_IMMEDIATES_SIGN_EXTEND)\n+\ttem = sign_extend_short_imm (tem, GET_MODE (x),\n+\t\t\t\t     GET_MODE_PRECISION (mode));\n+\n       return tem;\n     }\n   else if (nonzero_sign_valid && rsp->nonzero_bits)"}, {"sha": "c39f1031b0a7e05a3fddfc8436b7ff554e7cc4a5", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -897,7 +897,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n #define LOAD_EXTEND_OP(MODE) ((MODE) == SImode ? SIGN_EXTEND : ZERO_EXTEND)\n \n /* Define if loading short immediate values into registers sign extends.  */\n-#define SHORT_IMMEDIATES_SIGN_EXTEND\n+#define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */"}, {"sha": "a96f201b3572da18cd0a390f7026489ae1ccd246", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -1899,7 +1899,7 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n #define LOAD_EXTEND_OP(MODE) SIGN_EXTEND\n \n /* Define if loading short immediate values into registers sign extends.  */\n-#define SHORT_IMMEDIATES_SIGN_EXTEND\n+#define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \n /* The maximum number of bytes that a single instruction can move quickly from\n    memory to memory.  */"}, {"sha": "9872860ec62f5695101ee8e1ffac36d2156c1266", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -525,7 +525,7 @@ do {                                                            \\\n \n #define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n-#define SHORT_IMMEDIATES_SIGN_EXTEND\n+#define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \n #define MOVE_MAX        UNITS_PER_WORD\n #define MAX_MOVE_MAX    4"}, {"sha": "8fee2735a6363bb8d3a5f0281ef75df1d238fbac", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -765,7 +765,7 @@ typedef struct\n #define WORD_REGISTER_OPERATIONS\n #define LOAD_EXTEND_OP(MODE) SIGN_EXTEND\n \n-#define SHORT_IMMEDIATES_SIGN_EXTEND\n+#define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \n #define MOVE_MAX 4\n "}, {"sha": "03bbae1ad5a1a4d77920781eae9b5e346e38a417", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -1626,7 +1626,7 @@ FP_ASM_SPEC \"\\\n #define POINTERS_EXTEND_UNSIGNED false\n \n /* Define if loading short immediate values into registers sign extends.  */\n-#define SHORT_IMMEDIATES_SIGN_EXTEND\n+#define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \n /* The [d]clz instructions have the natural values at 0.  */\n "}, {"sha": "3bd2048b82ccead101e1072c91a3736d4b41bf76", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -2046,7 +2046,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n #define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n \n /* Define if loading short immediate values into registers sign extends.  */\n-#define SHORT_IMMEDIATES_SIGN_EXTEND\n+#define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \f\n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */"}, {"sha": "c4947a681790f69f46053a7c62694ea6f308c01f", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -1827,7 +1827,7 @@ struct sh_args {\n   : (MODE) != SImode ? SIGN_EXTEND : UNKNOWN)\n \n /* Define if loading short immediate values into registers sign extends.  */\n-#define SHORT_IMMEDIATES_SIGN_EXTEND\n+#define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \n /* Nonzero if access to memory by bytes is no faster than for words.  */\n #define SLOW_BYTE_ACCESS 1"}, {"sha": "7c3995abecc988fec9357aa7576d46562f21d69e", "filename": "gcc/config/tilegx/tilegx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.h?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -386,7 +386,7 @@ enum reg_class\n \n #define SHIFT_COUNT_TRUNCATED 0\n \n-#define SHORT_IMMEDIATES_SIGN_EXTEND\n+#define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \n /* We represent all SI values as sign-extended DI values in\n    registers.  */"}, {"sha": "970135a1d965674e7bebab0aa316bfc38b2e58b5", "filename": "gcc/config/tilepro/tilepro.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.h?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -346,7 +346,7 @@ enum reg_class\n \n #define SHIFT_COUNT_TRUNCATED 1\n \n-#define SHORT_IMMEDIATES_SIGN_EXTEND\n+#define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n "}, {"sha": "f0296a3e472882801c658d09623b0c5924965f56", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -1265,6 +1265,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_SUPPORTS_WIDE_INT 0\n #endif\n \n+#ifndef SHORT_IMMEDIATES_SIGN_EXTEND\n+#define SHORT_IMMEDIATES_SIGN_EXTEND 0\n+#endif\n+\n #ifdef GCC_INSN_FLAGS_H\n /* Dependent default target macro definitions\n "}, {"sha": "a67b6a1c4f351ad215ebb80389fc43dd761d2acd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -10410,7 +10410,7 @@ is larger then @var{mem_mode} but still smaller than @code{word_mode}.\n @end defmac\n \n @defmac SHORT_IMMEDIATES_SIGN_EXTEND\n-Define this macro if loading short immediate values into registers sign\n+Define this macro to 1 if loading short immediate values into registers sign\n extends.\n @end defmac\n "}, {"sha": "59aa589bec9414f4e9f5fa9c7d2588669129d3c7", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -7534,7 +7534,7 @@ is larger then @var{mem_mode} but still smaller than @code{word_mode}.\n @end defmac\n \n @defmac SHORT_IMMEDIATES_SIGN_EXTEND\n-Define this macro if loading short immediate values into registers sign\n+Define this macro to 1 if loading short immediate values into registers sign\n extends.\n @end defmac\n "}, {"sha": "e910ae7985fb2556fbb105f7a1907d893d05a570", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f2ae18ff4d776b9e682e59d99391fbc515d351/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=58f2ae18ff4d776b9e682e59d99391fbc515d351", "patch": "@@ -4327,14 +4327,12 @@ nonzero_bits1 (const_rtx x, machine_mode mode, const_rtx known_x,\n       }\n \n     case CONST_INT:\n-#ifdef SHORT_IMMEDIATES_SIGN_EXTEND\n       /* If X is negative in MODE, sign-extend the value.  */\n-      if (INTVAL (x) > 0\n+      if (SHORT_IMMEDIATES_SIGN_EXTEND && INTVAL (x) > 0\n \t  && mode_width < BITS_PER_WORD\n \t  && (UINTVAL (x) & ((unsigned HOST_WIDE_INT) 1 << (mode_width - 1)))\n \t     != 0)\n \treturn UINTVAL (x) | (HOST_WIDE_INT_M1U << mode_width);\n-#endif\n \n       return UINTVAL (x);\n "}]}