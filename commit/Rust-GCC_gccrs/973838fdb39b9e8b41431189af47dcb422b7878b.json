{"sha": "973838fdb39b9e8b41431189af47dcb422b7878b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczODM4ZmRiMzliOWU4YjQxNDMxMTg5YWY0N2RjYjQyMmI3ODc4Yg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-12-23T07:09:01Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-12-23T07:09:01Z"}, "message": "Warning fixes:\n\n        * alias.c (record_alias_subset): Remove ignored `&'.\n        (init_alias_once): Likewise.\n        * c-lex.c (UNGETC): Cast first argument of comma expression to void.\n        * config/mips/mips.c (mips_asm_file_end): Cast the result of\n        fwrite to `int' when comparing against one.\n        * config/mips/mips.h (CAN_ELIMINATE): Add parens around && within ||.\n        (INITIAL_ELIMINATION_OFFSET): Add braces to avoid ambiguous `else'.\n        * cse.c (rehash_using_reg): Change type of variable `i' to\n        unsigned int.\n        * dwarf2out.c (initial_return_save): Cast -1 to unsigned before\n        assigning it to one.\n        * except.c (duplicate_eh_handlers): Remove unused variable `tmp'.\n        * final.c (final_scan_insn): Likewise for variable `i'.\n        (output_asm_insn): Cast a char to unsigned char when used as an\n        array index.\n        * gcse.c (compute_pre_ppinout): Cast -1 to SBITMAP_ELT_TYPE when\n        assigning it to one.\n        * loop.c (strength_reduce): Remove unused variables `count' and `temp'.\n        * recog.c (preprocess_constraints): Cast a char to unsigned char\n        when used as an array index.\n        * regmove.c (find_matches): Likewise.\n        * reload1.c (calculate_needs): Add default case in switch.\n        (eliminate_regs_in_insn): Initialize variable `offset'.\n        (set_offsets_for_label): Change type of variable `i' to unsigned.\n        (reload_as_needed): Wrap variable `i' in macro check on\n        AUTO_INC_DEC || INSN_CLOBBERS_REGNO_P.\n        * scan-decls.c (scan_decls): Mark parameters `argc' and `argv'\n        with ATTRIBUTE_UNUSED.  Cast variable `start_written' to size_t\n        when comparing against one.\n        * stor-layout.c (layout_decl): Cast maximum_field_alignment to\n        unsigned when comparing against one.  Likewise for\n        GET_MODE_ALIGNMENT().\n        (layout_record): Cast record_align to int when comparing against a\n        signed value.\n        (layout_type): Cast TYPE_ALIGN() to int when comparing against a\n        signed value.\n        * tree.c (get_identifier): Cast variable `len' to unsigned when\n        comparing against one.\n        (maybe_get_identifier): Likewise\n\nFrom-SVN: r24403", "tree": {"sha": "4183e55ab6067150a8673b18a5d244e1d1a9df55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4183e55ab6067150a8673b18a5d244e1d1a9df55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/973838fdb39b9e8b41431189af47dcb422b7878b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973838fdb39b9e8b41431189af47dcb422b7878b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973838fdb39b9e8b41431189af47dcb422b7878b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973838fdb39b9e8b41431189af47dcb422b7878b/comments", "author": null, "committer": null, "parents": [{"sha": "2b4c075ca12ae31a37bbce4658a6abfa205e437d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4c075ca12ae31a37bbce4658a6abfa205e437d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4c075ca12ae31a37bbce4658a6abfa205e437d"}], "stats": {"total": 124, "additions": 92, "deletions": 32}, "files": [{"sha": "5d14e878cfdd000a500b7a66c245cd34193639de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -1,3 +1,60 @@\n+Wed Dec 23 09:51:32 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alias.c (record_alias_subset): Remove ignored `&'.\n+\t(init_alias_once): Likewise.\n+\n+\t* c-lex.c (UNGETC): Cast first argument of comma expression to void.\n+\n+\t* config/mips/mips.c (mips_asm_file_end): Cast the result of\n+\tfwrite to `int' when comparing against one.\n+\n+\t* config/mips/mips.h (CAN_ELIMINATE): Add parens around && within ||.\n+\t(INITIAL_ELIMINATION_OFFSET): Add braces to avoid ambiguous `else'.\n+\n+\t* cse.c (rehash_using_reg): Change type of variable `i' to\n+\tunsigned int.\n+\n+\t* dwarf2out.c (initial_return_save): Cast -1 to unsigned before\n+\tassigning it to one.\n+\n+\t* except.c (duplicate_eh_handlers): Remove unused variable `tmp'.\n+\n+\t* final.c (final_scan_insn): Likewise for variable `i'.\n+\t(output_asm_insn): Cast a char to unsigned char when used as an\n+\tarray index.\n+\n+\t* gcse.c (compute_pre_ppinout): Cast -1 to SBITMAP_ELT_TYPE when\n+\tassigning it to one.\n+\n+\t* loop.c (strength_reduce): Remove unused variables `count' and `temp'.\n+\n+\t* recog.c (preprocess_constraints): Cast a char to unsigned char\n+\twhen used as an array index.\n+\n+\t* regmove.c (find_matches): Likewise.\n+\n+\t* reload1.c (calculate_needs): Add default case in switch.\n+\t(eliminate_regs_in_insn): Initialize variable `offset'.\n+\t(set_offsets_for_label): Change type of variable `i' to unsigned.\n+\t(reload_as_needed): Wrap variable `i' in macro check on\n+\tAUTO_INC_DEC || INSN_CLOBBERS_REGNO_P.\n+\n+\t* scan-decls.c (scan_decls): Mark parameters `argc' and `argv'\n+\twith ATTRIBUTE_UNUSED.  Cast variable `start_written' to size_t\n+\twhen comparing against one.\n+\n+\t* stor-layout.c (layout_decl): Cast maximum_field_alignment to\n+\tunsigned when comparing against one.  Likewise for\n+\tGET_MODE_ALIGNMENT().\n+\t(layout_record): Cast record_align to int when comparing against a\n+\tsigned value. \n+\t(layout_type): Cast TYPE_ALIGN() to int when comparing against a\n+\tsigned value.\n+\n+\t* tree.c (get_identifier): Cast variable `len' to unsigned when\n+\tcomparing against one.\n+\t(maybe_get_identifier): Likewise\n+\n Wed Dec 23 00:10:01 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* toplev.c (rest_of_compilation): Do not set reload_completed."}, {"sha": "1adc8b31071eff4f8f2d0ddfcde8ea5e4779b51c", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -302,7 +302,7 @@ record_alias_subset (superset, subset)\n \t(alias_set_entry) xmalloc (sizeof (struct alias_set_entry));\n       superset_entry->alias_set = superset;\n       superset_entry->children \n-\t= splay_tree_new (&alias_set_compare, 0, 0);\n+\t= splay_tree_new (alias_set_compare, 0, 0);\n       splay_tree_insert (alias_sets, \n \t\t\t (splay_tree_key) superset,\n \t\t\t (splay_tree_value) superset_entry);\n@@ -314,7 +314,7 @@ record_alias_subset (superset, subset)\n     /* There is an entry for the subset.  Enter all of its children\n        (if they are not already present) as children of the SUPERSET.  */\n     splay_tree_foreach (subset_entry->children,\n-\t\t\t&insert_subset_children,\n+\t\t\tinsert_subset_children,\n \t\t\tsuperset_entry->children);\n \n   /* Enter the SUBSET itself as a child of the SUPERSET.  */\n@@ -1295,7 +1295,7 @@ init_alias_once ()\n \t&& HARD_REGNO_MODE_OK (i, Pmode))\n       SET_HARD_REG_BIT (argument_registers, i);\n \n-  alias_sets = splay_tree_new (&alias_set_compare, 0, 0);\n+  alias_sets = splay_tree_new (alias_set_compare, 0, 0);\n }\n \n void"}, {"sha": "1b44817dbc787e0a0606281f4cc666a586057890", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -63,7 +63,7 @@ extern unsigned char *yy_cur, *yy_lim;\n extern int yy_get_token ();\n \n #define GETC() (yy_cur < yy_lim ? *yy_cur++ : yy_get_token ())\n-#define UNGETC(c) ((c), yy_cur--)\n+#define UNGETC(c) ((void)(c), yy_cur--)\n #else\n #define GETC() getc (finput)\n #define UNGETC(c) ungetc (c, finput)"}, {"sha": "d713550f68b1f0194f4e9cc1f4d3011a2ccef42d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -5326,7 +5326,7 @@ mips_asm_file_end (file)\n \tfatal_io_error (temp_filename);\n \n       while ((len = fread (buffer, 1, sizeof (buffer), asm_out_text_file)) > 0)\n-\tif (fwrite (buffer, 1, len, file) != len)\n+\tif ((int) fwrite (buffer, 1, len, file) != len)\n \t  pfatal_with_name (asm_file_name);\n \n       if (len < 0)"}, {"sha": "c0e543846a226c2209ec65d2c9c59a2de53d3f35", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -2180,7 +2180,7 @@ extern struct mips_frame_info current_frame_info;\n \n #define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\t\\\n   (((FROM) == RETURN_ADDRESS_POINTER_REGNUM && (! leaf_function_p ()\t\\\n-   || TO == GP_REG_FIRST + 31 && leaf_function_p))   \t\t\t\\\n+   || (TO == GP_REG_FIRST + 31 && leaf_function_p)))   \t\t\t\\\n   || ((FROM) != RETURN_ADDRESS_POINTER_REGNUM\t\t\t\t\\\n    && ((TO) == HARD_FRAME_POINTER_REGNUM \t\t\t\t\\\n    || ((TO) == STACK_POINTER_REGNUM && ! frame_pointer_needed\t\t\\\n@@ -2219,11 +2219,13 @@ extern struct mips_frame_info current_frame_info;\n   /* Some ABIs store 64 bits to the stack, but Pmode is 32 bits,\t \\\n      so we must add 4 bytes to the offset to get the right value.  */\t \\\n   else if ((FROM) == RETURN_ADDRESS_POINTER_REGNUM)\t\t\t \\\n+  {\t\t\t\t\t\t\t\t\t \\\n    if (leaf_function_p ()) \t\t\t\t\t\t \\\n       (OFFSET) = 0;\t\t\t\t \t\t\t \\\n    else (OFFSET) = current_frame_info.gp_sp_offset\t\t\t \\\n \t       + ((UNITS_PER_WORD - (POINTER_SIZE / BITS_PER_UNIT))\t \\\n \t\t  * (BYTES_BIG_ENDIAN != 0));\t\t\t\t \\\n+  }\t\t\t\t\t\t\t\t\t \\\n }\n \n /* If we generate an insn to push BYTES bytes,"}, {"sha": "2ef26a5e934dcc6a9fd3a858b8da9eac7bde89d8", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -1772,7 +1772,7 @@ static void\n rehash_using_reg (x)\n      rtx x;\n {\n-  int i;\n+  unsigned int i;\n   struct table_elt *p, *next;\n   unsigned hash;\n "}, {"sha": "98f5ac935e6c0f4610944f53b560d66d84f4a005", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -1040,7 +1040,7 @@ static void\n initial_return_save (rtl)\n      register rtx rtl;\n {\n-  unsigned reg = -1;\n+  unsigned int reg = (unsigned int) -1;\n   long offset = 0;\n \n   switch (GET_CODE (rtl))"}, {"sha": "60e0d3caadff1b21f07f064582226866b088f269", "filename": "gcc/except.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -982,7 +982,6 @@ duplicate_eh_handlers (old_note_eh_region, new_note_eh_region, map)\n {\n   struct handler_info *ptr, *new_ptr;\n   int new_region, region;\n-  rtx tmp;\n \n   region = find_func_region (old_note_eh_region);\n   if (region == -1)"}, {"sha": "461f605f0b652b8bc2298d5e74e6fd585d361274", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -2035,7 +2035,6 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n      int prescan;\n      int nopeepholes;\n {\n-  register int i;\n #ifdef HAVE_cc0\n   rtx set;\n #endif\n@@ -3486,7 +3485,7 @@ output_asm_insn (template, operands)\n \t   punctuation character alone, with no operand.\n \t   The PRINT_OPERAND macro decides what is actually done.  */\n #ifdef PRINT_OPERAND_PUNCT_VALID_P\n-\telse if (PRINT_OPERAND_PUNCT_VALID_P (*p))\n+\telse if (PRINT_OPERAND_PUNCT_VALID_P ((unsigned char)*p))\n \t  output_operand (NULL_RTX, *p++);\n #endif\n \telse"}, {"sha": "7209d2b9a77aebc8c7d8367f8ef3e4c9688c58ee", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -4258,7 +4258,7 @@ compute_pre_ppinout ()\n \t    {\n \t      int_list_ptr pred;\n \t      SBITMAP_ELT_TYPE tmp = *antin & *pavin & (*antloc | (*transp & *ppout));\n-\t      SBITMAP_ELT_TYPE pred_val = -1L;\n+\t      SBITMAP_ELT_TYPE pred_val = (SBITMAP_ELT_TYPE) -1;\n \n \t      for (pred = s_preds[bb]; pred != NULL; pred = pred->next)\n \t\t{"}, {"sha": "082fc8170604dcb8c96905993ca8d893086b7c09", "filename": "gcc/loop.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -3927,10 +3927,8 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\t\t\t\t\t &add_val, &mult_val,\n \t\t\t\t\t\t &last_consec_insn))))\n \t    {\n-\t      int count;\n \t      struct induction *v\n \t\t= (struct induction *) alloca (sizeof (struct induction));\n-\t      rtx temp;\n \n \t      /* If this is a library call, increase benefit.  */\n \t      if (find_reg_note (p, REG_RETVAL, NULL_RTX))"}, {"sha": "fa8c069b46e5e89619515e95c38a02fe7ad2fa24", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -1908,7 +1908,7 @@ preprocess_constraints ()\n \t\t  break;\n \n \t\tdefault:\n-\t\t  op_alt[j].class = reg_class_subunion[(int) op_alt[j].class][(int) REG_CLASS_FROM_LETTER (c)];\n+\t\t  op_alt[j].class = reg_class_subunion[(int) op_alt[j].class][(int) REG_CLASS_FROM_LETTER ((unsigned char)c)];\n \t\t  break;\n \t\t}\n \t    }"}, {"sha": "69197a3387eaba5e03817e704e585b6116fca220", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -1471,7 +1471,7 @@ find_matches (insn, matchp)\n \t  case 'j': case 'k': case 'l': case 'p': case 'q': case 't': case 'u':\n \t  case 'v': case 'w': case 'x': case 'y': case 'z': case 'A': case 'B':\n \t  case 'C': case 'D': case 'W': case 'Y': case 'Z':\n-\t    if (CLASS_LIKELY_SPILLED_P (REG_CLASS_FROM_LETTER (c)))\n+\t    if (CLASS_LIKELY_SPILLED_P (REG_CLASS_FROM_LETTER ((unsigned char)c)))\n \t      likely_spilled[op_no] = 1;\n \t    break;\n \t  }"}, {"sha": "39da06d6135b35c4199588195357d8c03759a7f3", "filename": "gcc/reload1.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -1532,6 +1532,8 @@ calculate_needs (chain)\n \tcase RELOAD_FOR_OPADDR_ADDR:\n \t  this_needs = &insn_needs.op_addr_reload;\n \t  break;\n+\tdefault:\n+\t  abort();\n \t}\n \n       if (size > 1)\n@@ -3249,7 +3251,7 @@ eliminate_regs_in_insn (insn, replace)\n \t\t&& ep->to == HARD_FRAME_POINTER_REGNUM)\n \t      {\n \t\trtx src = SET_SRC (old_set);\n-\t\tint offset, ok = 0;\n+\t\tint offset = 0, ok = 0;\n \t\trtx prev_insn, prev_set;\n \n \t\tif (src == ep->to_rtx)\n@@ -3577,7 +3579,7 @@ static void\n set_offsets_for_label (insn)\n      rtx insn;\n {\n-  int i;\n+  unsigned int i;\n   int label_nr = CODE_LABEL_NUMBER (insn);\n   struct elim_table *ep;\n \n@@ -4153,7 +4155,9 @@ reload_as_needed (live_known)\n      int live_known;\n {\n   struct insn_chain *chain;\n+#if defined (AUTO_INC_DEC) || defined (INSN_CLOBBERS_REGNO_P)\n   register int i;\n+#endif\n   rtx x;\n \n   bzero ((char *) spill_reg_rtx, sizeof spill_reg_rtx);"}, {"sha": "2c6f12ae7b44ce3980755256ca8fe1bca58248f9", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -77,8 +77,8 @@ Here dname is the actual name being declared.\n int\n scan_decls (pfile, argc, argv)\n      cpp_reader *pfile;\n-     int argc;\n-     char **argv;\n+     int argc ATTRIBUTE_UNUSED;\n+     char **argv ATTRIBUTE_UNUSED;\n {\n   int saw_extern, saw_inline;\n   int start_written;\n@@ -169,7 +169,7 @@ scan_decls (pfile, argc, argv)\n \t    }\n \t  break;\n \tcase CPP_OTHER:\n-\t  if (CPP_WRITTEN (pfile) == start_written + 1\n+\t  if (CPP_WRITTEN (pfile) == (size_t) start_written + 1\n \t      && (CPP_PWRITTEN (pfile)[-1] == '*'\n \t\t  || CPP_PWRITTEN (pfile)[-1] == '&'))\n \t    declarator_start = start_written;"}, {"sha": "1379811cea739307555a25d39370d6f53a585bab", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -283,7 +283,8 @@ layout_decl (decl, known_align)\n     {\n       DECL_BIT_FIELD_TYPE (decl) = DECL_BIT_FIELD (decl) ? type : 0;\n       if (maximum_field_alignment != 0)\n-\tDECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), maximum_field_alignment);\n+\tDECL_ALIGN (decl) = MIN (DECL_ALIGN (decl),\n+\t\t\t\t (unsigned)maximum_field_alignment);\n       else if (DECL_PACKED (decl))\n \tDECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), BITS_PER_UNIT);\n     }\n@@ -299,7 +300,7 @@ layout_decl (decl, known_align)\n       if (xmode != BLKmode\n \t  && known_align % GET_MODE_ALIGNMENT (xmode) == 0)\n \t{\n-\t  DECL_ALIGN (decl) = MAX (GET_MODE_ALIGNMENT (xmode),\n+\t  DECL_ALIGN (decl) = MAX ((unsigned) GET_MODE_ALIGNMENT (xmode),\n \t\t\t\t   DECL_ALIGN (decl));\n \t  DECL_MODE (decl) = xmode;\n \t  DECL_SIZE (decl) = size_int (GET_MODE_BITSIZE (xmode));\n@@ -413,7 +414,7 @@ layout_record (rec)\n \t     It does, however, affect the alignment of the next field\n \t     within the structure.  */\n \t  if (! integer_zerop (DECL_SIZE (field)))\n-\t    record_align = MAX (record_align, desired_align);\n+\t    record_align = MAX ((int)record_align, desired_align);\n \t  else if (! DECL_PACKED (field))\n \t    desired_align = TYPE_ALIGN (TREE_TYPE (field));\n \t  /* A named bit field of declared type `int'\n@@ -426,11 +427,11 @@ layout_record (rec)\n \t      else if (DECL_PACKED (field))\n \t\ttype_align = MIN (type_align, BITS_PER_UNIT);\n \n-\t      record_align = MAX (record_align, type_align);\n+\t      record_align = MAX ((int)record_align, type_align);\n \t    }\n \t}\n       else\n-\trecord_align = MAX (record_align, desired_align);\n+\trecord_align = MAX ((int)record_align, desired_align);\n #endif\n \n       /* Does this field automatically have alignment it needs\n@@ -913,7 +914,7 @@ layout_type (type)\n \t\t\t       MODE_INT, 1);\n \n \t    if (STRICT_ALIGNMENT && TYPE_ALIGN (type) < BIGGEST_ALIGNMENT\n-\t\t&& TYPE_ALIGN (type) < TREE_INT_CST_LOW (TYPE_SIZE (type))\n+\t\t&& (int)TYPE_ALIGN (type) < TREE_INT_CST_LOW (TYPE_SIZE (type))\n \t\t&& TYPE_MODE (type) != BLKmode)\n \t      {\n \t\tTYPE_NO_FORCE_BLK (type) = 1;\n@@ -979,7 +980,7 @@ layout_type (type)\n \t     then stick with BLKmode.  */\n \t  if (STRICT_ALIGNMENT\n \t      && ! (TYPE_ALIGN (type) >= BIGGEST_ALIGNMENT\n-\t\t    || (TYPE_ALIGN (type)\n+\t\t    || ((int)TYPE_ALIGN (type)\n \t\t\t>= TREE_INT_CST_LOW (TYPE_SIZE (type)))))\n \t    {\n \t      if (TYPE_MODE (type) != BLKmode)\n@@ -1011,7 +1012,7 @@ layout_type (type)\n \t     then stick with BLKmode.  */\n \t  && (! STRICT_ALIGNMENT\n \t      || TYPE_ALIGN (type) >= BIGGEST_ALIGNMENT\n-\t      || TYPE_ALIGN (type) >= TREE_INT_CST_LOW (TYPE_SIZE (type))))\n+\t      || (int)TYPE_ALIGN (type) >= TREE_INT_CST_LOW (TYPE_SIZE (type))))\n \t{\n \t  tree field;\n \t  /* A union which has any BLKmode members must itself be BLKmode;"}, {"sha": "6cb386481b1853513f3c905a639763f2f401d596", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/973838fdb39b9e8b41431189af47dcb422b7878b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=973838fdb39b9e8b41431189af47dcb422b7878b", "patch": "@@ -1266,7 +1266,7 @@ get_identifier (text)\n \n   /* Decide how much of that length to hash on */\n   hash_len = len;\n-  if (warn_id_clash && len > id_clash_len)\n+  if (warn_id_clash && (unsigned)len > id_clash_len)\n     hash_len = id_clash_len;\n \n   /* Compute hash code */\n@@ -1285,7 +1285,7 @@ get_identifier (text)\n       return idp;\t\t/* <-- return if found */\n \n   /* Not found; optionally warn about a similar identifier */\n-  if (warn_id_clash && do_identifier_warnings && len >= id_clash_len)\n+  if (warn_id_clash && do_identifier_warnings && (unsigned)len >= id_clash_len)\n     for (idp = hash_table[hi]; idp; idp = TREE_CHAIN (idp))\n       if (!strncmp (IDENTIFIER_POINTER (idp), text, id_clash_len))\n \t{\n@@ -1329,7 +1329,7 @@ maybe_get_identifier (text)\n \n   /* Decide how much of that length to hash on */\n   hash_len = len;\n-  if (warn_id_clash && len > id_clash_len)\n+  if (warn_id_clash && (unsigned)len > id_clash_len)\n     hash_len = id_clash_len;\n \n   /* Compute hash code */"}]}