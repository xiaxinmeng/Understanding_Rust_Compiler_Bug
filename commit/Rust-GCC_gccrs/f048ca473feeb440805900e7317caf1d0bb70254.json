{"sha": "f048ca473feeb440805900e7317caf1d0bb70254", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA0OGNhNDczZmVlYjQ0MDgwNTkwMGU3MzE3Y2FmMWQwYmI3MDI1NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-30T21:09:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-30T21:09:51Z"}, "message": "pa.c (reg_or_0_operand): Use CONST0_RTX instead of const0_rtx.\n\n\t* pa.c (reg_or_0_operand): Use CONST0_RTX instead of\n\tconst0_rtx.\n\t(reg_or_0_or_nonsymb_mem_operand): New function.\n\t(emit_move_sequence): Copying CONST0_RTX into any\n\tregister can be done directly.  Use CONST0_RTX instead\n\tof const0_rtx.\n\t(output_fp_move_double): Handle copying a CONST0_RTX\n\tinto FP or integer registers.\n\t(print_operand): Handle \"%r0\" for DFmode and SFmode\n\tvalues too.\n\nFrom-SVN: r3391", "tree": {"sha": "7b76c6fb681ed8c4a0a6d6062215450002f76ce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b76c6fb681ed8c4a0a6d6062215450002f76ce6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f048ca473feeb440805900e7317caf1d0bb70254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f048ca473feeb440805900e7317caf1d0bb70254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f048ca473feeb440805900e7317caf1d0bb70254", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f048ca473feeb440805900e7317caf1d0bb70254/comments", "author": null, "committer": null, "parents": [{"sha": "7c57c7983db905332775ea62c5f6047cbb3d2b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c57c7983db905332775ea62c5f6047cbb3d2b64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c57c7983db905332775ea62c5f6047cbb3d2b64"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "71d1896cb64935dc1d87ea85c1888b6ede67791d", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f048ca473feeb440805900e7317caf1d0bb70254/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f048ca473feeb440805900e7317caf1d0bb70254/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f048ca473feeb440805900e7317caf1d0bb70254", "patch": "@@ -49,13 +49,13 @@ int hp_profile_labelno;\n static rtx find_addr_reg ();\n \n /* Return non-zero only if OP is a register of mode MODE,\n-   or const0_rtx.  */\n+   or CONST0_RTX.  */\n int\n reg_or_0_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  return (op == const0_rtx || register_operand (op, mode));\n+  return (op == CONST0_RTX (mode) || register_operand (op, mode));\n }\n \n int\n@@ -121,6 +121,26 @@ reg_or_nonsymb_mem_operand (op, mode)\n   return 0;\n }\n \n+/* Return 1 if the operand is either a register, zero,  or a memory operand \n+   that is not symbolic.  */\n+\n+int\n+reg_or_0_or_nonsymb_mem_operand (op, mode)\n+    register rtx op;\n+    enum machine_mode mode;\n+{\n+  if (register_operand (op, mode))\n+    return 1;\n+\n+  if (op == CONST0_RTX (mode))\n+    return 1;\n+\n+  if (memory_operand (op, mode) && ! symbolic_memory_operand (op, mode))\n+    return 1;\n+\n+  return 0;\n+}\n+\n int\n move_operand (op, mode)\n      rtx op;\n@@ -525,6 +545,7 @@ emit_move_sequence (operands, mode, scratch_reg)\n     {\n       if (register_operand (operand1, mode)\n \t  || (GET_CODE (operand1) == CONST_INT && INT_14_BITS (operand1))\n+\t  || (operand1 == CONST0_RTX (mode))\n \t  || (GET_CODE (operand1) == HIGH\n \t      && !symbolic_operand (XEXP (operand1, 0)))\n \t  /* Only `general_operands' can come here, so MEM is ok.  */\n@@ -537,7 +558,7 @@ emit_move_sequence (operands, mode, scratch_reg)\n     }\n   else if (GET_CODE (operand0) == MEM)\n     {\n-      if (register_operand (operand1, mode) || operand1 == const0_rtx)\n+      if (register_operand (operand1, mode) || operand1 == CONST0_RTX (mode))\n \t{\n \t  /* Run this case quickly.  */\n \t  emit_insn (gen_rtx (SET, VOIDmode, operand0, operand1));\n@@ -947,8 +968,9 @@ output_fp_move_double (operands)\n {\n   if (FP_REG_P (operands[0]))\n     {\n-      if (FP_REG_P (operands[1]))\n-\toutput_asm_insn (\"fcpy,dbl %1,%0\", operands);\n+      if (FP_REG_P (operands[1]) \n+\t  || operands[1] == CONST0_RTX (GET_MODE (operands[0])))\n+\toutput_asm_insn (\"fcpy,dbl %r1,%0\", operands);\n       else if (GET_CODE (operands[1]) == REG)\n \t{\n \t  rtx xoperands[3];\n@@ -977,6 +999,22 @@ output_fp_move_double (operands)\n       else\n \toutput_asm_insn (\"fstds%F0 %1,%0\", operands);\n     }\n+  else if (operands[1] == CONST0_RTX (GET_MODE (operands[0])))\n+    {\n+      if (GET_CODE (operands[0]) == REG)\n+\t{\n+\t  rtx xoperands[2];\n+\t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+\t  xoperands[0] = operands[0];\n+\t  output_asm_insn (\"copy %%r0,%0\\n\\tcopy %%r0,%1\", xoperands);\n+\t}\n+      /* This is a pain.  You have to be prepared to deal with an \n+\t arbritary address here including pre/post increment/decrement.\n+\n+\t so avoid this in the MD.  */\n+      else\n+\tabort ();\n+    }\n   else abort ();\n   return \"\";\n }\n@@ -1905,7 +1943,9 @@ print_operand (file, x, code)\n       return;\n     case 'r':\n       /* A register or zero. */\n-      if (x == const0_rtx)\n+      if (x == const0_rtx\n+\t  || (x == CONST0_RTX (DFmode))\n+\t  || (x == CONST0_RTX (SFmode)))\n \t{\n \t  fputs (\"0\", file);\n \t  return;"}]}