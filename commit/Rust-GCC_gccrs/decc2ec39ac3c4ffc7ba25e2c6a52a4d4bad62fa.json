{"sha": "decc2ec39ac3c4ffc7ba25e2c6a52a4d4bad62fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVjYzJlYzM5YWMzYzRmZmM3YmEyNWUyYzZhNTJhNGQ0YmFkNjJmYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-11-25T00:12:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-25T00:12:15Z"}, "message": "re PR c++/38256 (ICE with \"operator auto\")\n\n\tPR target/38256\n\t* config/i386/sync.md (memory_barrier_nosse): New insn\n\t(memory_barrier): Generate memory_barrier_nosse insn for !TARGET_SSE2.\n\nFrom-SVN: r142177", "tree": {"sha": "8e07a39330d1ebe644c0770206cc9d3a6ccc8002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e07a39330d1ebe644c0770206cc9d3a6ccc8002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/decc2ec39ac3c4ffc7ba25e2c6a52a4d4bad62fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decc2ec39ac3c4ffc7ba25e2c6a52a4d4bad62fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/decc2ec39ac3c4ffc7ba25e2c6a52a4d4bad62fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decc2ec39ac3c4ffc7ba25e2c6a52a4d4bad62fa/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "467a1bf1e95118b02793c3eef6422e8744245c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467a1bf1e95118b02793c3eef6422e8744245c11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467a1bf1e95118b02793c3eef6422e8744245c11"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "b90d1f974cb85d1d17036eb2b953eb80d75456a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc2ec39ac3c4ffc7ba25e2c6a52a4d4bad62fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc2ec39ac3c4ffc7ba25e2c6a52a4d4bad62fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=decc2ec39ac3c4ffc7ba25e2c6a52a4d4bad62fa", "patch": "@@ -1,3 +1,9 @@\n+2008-11-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/38256\n+\t* config/i386/sync.md (memory_barrier_nosse): New insn\n+\t(memory_barrier): Generate memory_barrier_nosse insn for !TARGET_SSE2.\n+\n 2008-11-24  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/m68k/m68k.md (cmpdi): Use (scratch) instead of pseudo."}, {"sha": "8aad0c47217c35107f847f3da63f455075d48c42", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc2ec39ac3c4ffc7ba25e2c6a52a4d4bad62fa/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc2ec39ac3c4ffc7ba25e2c6a52a4d4bad62fa/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=decc2ec39ac3c4ffc7ba25e2c6a52a4d4bad62fa", "patch": "@@ -36,19 +36,30 @@\n \t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))]\n   \"\"\n {\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+\n   if (!TARGET_SSE2)\n     {\n-      /* Emit a locked no-operation when SSE2 is not available.  */\n-      int slot = virtuals_instantiated ? SLOT_TEMP : SLOT_VIRTUAL;\n-      rtx temp = assign_386_stack_local (QImode, slot);\n-      emit_insn (gen_sync_iorqi (temp, CONST0_RTX (QImode)));\n+      emit_insn (gen_memory_barrier_nosse (operands[0]));\n       DONE;\n     }\n-\n-  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n-  MEM_VOLATILE_P (operands[0]) = 1;\n })\n \n+(define_insn \"memory_barrier_nosse\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))\n+   (clobber (reg:CC FLAGS_REG))]\n+\n+  \"!TARGET_SSE2\"\n+{\n+  if (TARGET_64BIT)\n+    return \"lock{%;| }or{q}\\t{$0, (%%rsp)|QWORD PTR [rsp], 0}\";\n+  else\n+    return \"lock{%;| }or{l}\\t{$0, (%%esp)|DWORD PTR [esp], 0}\";\n+}\n+  [(set_attr \"memory\" \"unknown\")])\n+\n ;; ??? It would be possible to use cmpxchg8b on pentium for DImode\n ;; changes.  It's complicated because the insn uses ecx:ebx as the\n ;; new value; note that the registers are reversed from the order"}]}