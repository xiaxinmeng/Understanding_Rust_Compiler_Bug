{"sha": "9ec988605d388be904e9b6f391ea67b4f456385a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVjOTg4NjA1ZDM4OGJlOTA0ZTliNmYzOTFlYTY3YjRmNDU2Mzg1YQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-03-24T14:00:43Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-03-24T14:00:43Z"}, "message": "S/390: arch12: Add support for new vector bit\n operations.\n\nThis patch adds support for the new bit operations introduced with\narch12.\n\nThe patch also renames the one complement pattern to the proper RTL\nstandard name.\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.c (s390_rtx_costs): Return low costs for the\n\tcanonical form of ~AND to make sure the new instruction will be\n\tused.\n\t* config/s390/vector.md (\"notand<mode>3\", \"ior_not<mode>3\")\n\t(\"notxor<mode>3\"): Add new pattern definitions.\n\t(\"*not<mode>\"): Rename to ...\n\t(\"one_cmpl<mode>2\"): ... this.\n\ngcc/testsuite/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/vxe/bitops-1.c: New test.\n\nFrom-SVN: r246453", "tree": {"sha": "767ecdbf2e8af8093ab303032a9c8f993c4d040d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/767ecdbf2e8af8093ab303032a9c8f993c4d040d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ec988605d388be904e9b6f391ea67b4f456385a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec988605d388be904e9b6f391ea67b4f456385a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ec988605d388be904e9b6f391ea67b4f456385a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec988605d388be904e9b6f391ea67b4f456385a/comments", "author": null, "committer": null, "parents": [{"sha": "6654e96fc870d469965eac8b35015ab9400326af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6654e96fc870d469965eac8b35015ab9400326af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6654e96fc870d469965eac8b35015ab9400326af"}], "stats": {"total": 102, "additions": 100, "deletions": 2}, "files": [{"sha": "416a15ed549dc24c68b720d918b1e93a7a2e47b2", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec988605d388be904e9b6f391ea67b4f456385a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec988605d388be904e9b6f391ea67b4f456385a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9ec988605d388be904e9b6f391ea67b4f456385a", "patch": "@@ -3373,6 +3373,21 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \t  *total = COSTS_N_INSNS (2);\n \t  return true;\n \t}\n+\n+      /* ~AND on a 128 bit mode.  This can be done using a vector\n+\t instruction.  */\n+      if (TARGET_VXE\n+\t  && GET_CODE (XEXP (x, 0)) == NOT\n+\t  && GET_CODE (XEXP (x, 1)) == NOT\n+\t  && REG_P (XEXP (XEXP (x, 0), 0))\n+\t  && REG_P (XEXP (XEXP (x, 1), 0))\n+\t  && GET_MODE_SIZE (GET_MODE (XEXP (XEXP (x, 0), 0))) == 16\n+\t  && s390_hard_regno_mode_ok (VR0_REGNUM,\n+\t\t\t\t      GET_MODE (XEXP (XEXP (x, 0), 0))))\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n       /* fallthrough */\n     case ASHIFT:\n     case ASHIFTRT:"}, {"sha": "68a8ed095a36a2a3676fc06e2aee9fd7c6685b01", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec988605d388be904e9b6f391ea67b4f456385a/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec988605d388be904e9b6f391ea67b4f456385a/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=9ec988605d388be904e9b6f391ea67b4f456385a", "patch": "@@ -655,6 +655,15 @@\n   \"vn\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+; Vector not and\n+\n+(define_insn \"notand<mode>3\"\n+  [(set (match_operand:VT                 0 \"register_operand\" \"=v\")\n+\t(ior:VT (not:VT (match_operand:VT 1 \"register_operand\" \"%v\"))\n+\t\t(not:VT\t(match_operand:VT 2 \"register_operand\"  \"v\"))))]\n+  \"TARGET_VXE\"\n+  \"vnn\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n \n ; Vector or\n \n@@ -666,6 +675,15 @@\n   \"vo\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+; Vector or with complement\n+\n+(define_insn \"ior_not<mode>3\"\n+  [(set (match_operand:VT                 0 \"register_operand\" \"=v\")\n+\t(ior:VT (not:VT (match_operand:VT 2 \"register_operand\"  \"v\"))\n+\t\t(match_operand:VT         1 \"register_operand\" \"%v\")))]\n+  \"TARGET_VXE\"\n+  \"voc\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n \n ; Vector xor\n \n@@ -677,9 +695,18 @@\n   \"vx\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+; Vector not xor\n+\n+(define_insn \"notxor<mode>3\"\n+  [(set (match_operand:VT                 0 \"register_operand\" \"=v\")\n+\t(not:VT (xor:VT (match_operand:VT 1 \"register_operand\" \"%v\")\n+\t\t\t(match_operand:VT 2 \"register_operand\"  \"v\"))))]\n+  \"TARGET_VXE\"\n+  \"vnx\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n \n-; Bitwise inversion of a vector - used for vec_cmpne\n-(define_insn \"*not<mode>\"\n+; Bitwise inversion of a vector\n+(define_insn \"one_cmpl<mode>2\"\n   [(set (match_operand:VT         0 \"register_operand\" \"=v\")\n \t(not:VT (match_operand:VT 1 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\""}, {"sha": "1a74e0dac65007378789ce6783a52524df83ac50", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec988605d388be904e9b6f391ea67b4f456385a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec988605d388be904e9b6f391ea67b4f456385a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ec988605d388be904e9b6f391ea67b4f456385a", "patch": "@@ -1,3 +1,7 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/vxe/bitops-1.c: New test.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/s390.exp: Run tests in arch12 and vxe dirs."}, {"sha": "bdf745759141b220aa127ce9f4ba8b273126baa1", "filename": "gcc/testsuite/gcc.target/s390/vxe/bitops-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec988605d388be904e9b6f391ea67b4f456385a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvxe%2Fbitops-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec988605d388be904e9b6f391ea67b4f456385a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvxe%2Fbitops-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvxe%2Fbitops-1.c?ref=9ec988605d388be904e9b6f391ea67b4f456385a", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -march=arch12 --save-temps\" } */\n+/* { dg-require-effective-target s390_vxe } */\n+\n+typedef unsigned int       uv4si __attribute__((vector_size(16)));\n+\n+uv4si __attribute__((noinline))\n+not_xor (uv4si a, uv4si b)\n+{\n+  return ~(a ^ b);\n+}\n+/* { dg-final { scan-assembler-times \"vnx\\t%v24,%v24,%v26\" 1 } } */\n+\n+uv4si __attribute__((noinline))\n+not_and (uv4si a, uv4si b)\n+{\n+  return ~(a & b);\n+}\n+/* { dg-final { scan-assembler-times \"vnn\\t%v24,%v24,%v26\" 1 } } */\n+\n+uv4si __attribute__((noinline))\n+or_not (uv4si a, uv4si b)\n+{\n+  return a | ~b;\n+}\n+/* { dg-final { scan-assembler-times \"voc\\t%v24,%v24,%v26\" 1 } } */\n+\n+\n+int\n+main ()\n+{\n+  uv4si a = (uv4si){ 42, 1, 0, 2 };\n+  uv4si b = (uv4si){ 42, 2, 0, 2 };\n+  uv4si c;\n+\n+  c = not_xor (a, b);\n+\n+  if (c[0] != ~0 || c[1] != ~3 || c[2] != ~0 || c[3] != ~0)\n+    __builtin_abort ();\n+\n+  c = not_and (a, b);\n+\n+  if (c[0] != ~42 || c[1] != ~0 || c[2] != ~0 || c[3] != ~2)\n+    __builtin_abort ();\n+\n+  c = or_not (a, b);\n+\n+  if (c[0] != ~0 || c[1] != ~2 || c[2] != ~0 || c[3] != ~0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}