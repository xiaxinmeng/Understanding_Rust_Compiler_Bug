{"sha": "7278e4dcfb3d3a55dfde95f4682a400b9a673c5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3OGU0ZGNmYjNkM2E1NWRmZGU5NWY0NjgyYTQwMGI5YTY3M2M1Yw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2008-10-31T04:45:28Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-10-31T04:45:28Z"}, "message": "re PR fortran/37930 (gfortran error and ICE at automatic type conversion with transfer intrinsic)\n\n2008-10-30  Steven G. Kargl  <kargls@comcast.net>\n\n\tPR fortran/37930\n\t* fortran/arith.c (gfc_mpfr_to_mpz):  Test for NaN and Inf values.\n\tRemove stale comment and kludge code for MPFR 2.0.1 and older.\n\t(gfc_real2int): Error on conversion of NaN or Inf.\n\t(gfc_complex2int): Ditto.\n\t* fortran/arith.h: Update mpfr_to_mpz prototype.\n\t* fortran/simplify.c (gfc_simplify_ceiling, gfc_simplify_floor,\n\tgfc_simplify_ifix, gfc_simplify_idint, simplify_nint): Update function\n\tcalls to include locus.\n\nFrom-SVN: r141488", "tree": {"sha": "c50ffbe822be02d7c44b1f0de55e15e5f92b027c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c50ffbe822be02d7c44b1f0de55e15e5f92b027c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c/comments", "author": null, "committer": null, "parents": [{"sha": "98d53624ea58e960f4ebfe26af1b242b0b09b76a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d53624ea58e960f4ebfe26af1b242b0b09b76a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d53624ea58e960f4ebfe26af1b242b0b09b76a"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "783734374590929bdbabe5d213131f59dc3c107f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7278e4dcfb3d3a55dfde95f4682a400b9a673c5c", "patch": "@@ -1,3 +1,15 @@\n+2008-10-30  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/37930\n+\t* fortran/arith.c (gfc_mpfr_to_mpz):  Test for NaN and Inf values.\n+\tRemove stale comment and kludge code for MPFR 2.0.1 and older.\n+\t(gfc_real2int): Error on conversion of NaN or Inf.\n+\t(gfc_complex2int): Ditto.\n+\t* fortran/arith.h: Update mpfr_to_mpz prototype.\n+\t* fortran/simplify.c (gfc_simplify_ceiling, gfc_simplify_floor,\n+\tgfc_simplify_ifix, gfc_simplify_idint, simplify_nint): Update function\n+\tcalls to include locus\n+\n 2008-10-30  Mikael Morin  <mikael.morin@tele2.fr>\n \n         PR fortran/37903"}, {"sha": "2ef34b14a578c2852d8b1326d71b30a48f9a94d8", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=7278e4dcfb3d3a55dfde95f4682a400b9a673c5c", "patch": "@@ -35,15 +35,19 @@ along with GCC; see the file COPYING3.  If not see\n    It's easily implemented with a few calls though.  */\n \n void\n-gfc_mpfr_to_mpz (mpz_t z, mpfr_t x)\n+gfc_mpfr_to_mpz (mpz_t z, mpfr_t x, locus *where)\n {\n   mp_exp_t e;\n \n+  if (mpfr_inf_p (x) || mpfr_nan_p (x))\n+    {\n+      gfc_error (\"Conversion of an Infinity or Not-a-Number at %L \"\n+\t\t \"to INTEGER\", where);\n+      mpz_set_ui (z, 0);\n+      return;\n+    }\n+\n   e = mpfr_get_z_exp (z, x);\n-  /* MPFR 2.0.1 (included with GMP 4.1) has a bug whereby mpfr_get_z_exp\n-     may set the sign of z incorrectly.  Work around that here.  */\n-  if (mpfr_sgn (x) != mpz_sgn (z))\n-    mpz_neg (z, z);\n \n   if (e > 0)\n     mpz_mul_2exp (z, z, e);\n@@ -2177,7 +2181,7 @@ gfc_real2int (gfc_expr *src, int kind)\n \n   result = gfc_constant_result (BT_INTEGER, kind, &src->where);\n \n-  gfc_mpfr_to_mpz (result->value.integer, src->value.real);\n+  gfc_mpfr_to_mpz (result->value.integer, src->value.real, &src->where);\n \n   if ((rc = gfc_check_integer_range (result->value.integer, kind)) != ARITH_OK)\n     {\n@@ -2263,7 +2267,7 @@ gfc_complex2int (gfc_expr *src, int kind)\n \n   result = gfc_constant_result (BT_INTEGER, kind, &src->where);\n \n-  gfc_mpfr_to_mpz (result->value.integer, src->value.complex.r);\n+  gfc_mpfr_to_mpz (result->value.integer, src->value.complex.r, &src->where);\n \n   if ((rc = gfc_check_integer_range (result->value.integer, kind)) != ARITH_OK)\n     {"}, {"sha": "344bc78d481839689e7152501b60d904f4eea093", "filename": "gcc/fortran/arith.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c/gcc%2Ffortran%2Farith.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c/gcc%2Ffortran%2Farith.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.h?ref=7278e4dcfb3d3a55dfde95f4682a400b9a673c5c", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n /* MPFR also does not have the conversion of a mpfr_t to a mpz_t, so declare\n    a function for this as well.  */\n \n-void gfc_mpfr_to_mpz (mpz_t, mpfr_t);\n+void gfc_mpfr_to_mpz (mpz_t, mpfr_t, locus *);\n void gfc_set_model_kind (int);\n void gfc_set_model (mpfr_t);\n "}, {"sha": "49a4affd3c31b8766c64ca68b947723c95e13bf0", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7278e4dcfb3d3a55dfde95f4682a400b9a673c5c/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=7278e4dcfb3d3a55dfde95f4682a400b9a673c5c", "patch": "@@ -808,7 +808,7 @@ gfc_simplify_ceiling (gfc_expr *e, gfc_expr *k)\n   ceil = gfc_copy_expr (e);\n \n   mpfr_ceil (ceil->value.real, e->value.real);\n-  gfc_mpfr_to_mpz (result->value.integer, ceil->value.real);\n+  gfc_mpfr_to_mpz (result->value.integer, ceil->value.real, &e->where);\n \n   gfc_free_expr (ceil);\n \n@@ -1341,7 +1341,7 @@ gfc_simplify_floor (gfc_expr *e, gfc_expr *k)\n   mpfr_init (floor);\n   mpfr_floor (floor, e->value.real);\n \n-  gfc_mpfr_to_mpz (result->value.integer, floor);\n+  gfc_mpfr_to_mpz (result->value.integer, floor, &e->where);\n \n   mpfr_clear (floor);\n \n@@ -1925,7 +1925,7 @@ gfc_simplify_ifix (gfc_expr *e)\n   rtrunc = gfc_copy_expr (e);\n \n   mpfr_trunc (rtrunc->value.real, e->value.real);\n-  gfc_mpfr_to_mpz (result->value.integer, rtrunc->value.real);\n+  gfc_mpfr_to_mpz (result->value.integer, rtrunc->value.real, &e->where);\n \n   gfc_free_expr (rtrunc);\n   return range_check (result, \"IFIX\");\n@@ -1946,7 +1946,7 @@ gfc_simplify_idint (gfc_expr *e)\n   rtrunc = gfc_copy_expr (e);\n \n   mpfr_trunc (rtrunc->value.real, e->value.real);\n-  gfc_mpfr_to_mpz (result->value.integer, rtrunc->value.real);\n+  gfc_mpfr_to_mpz (result->value.integer, rtrunc->value.real, &e->where);\n \n   gfc_free_expr (rtrunc);\n   return range_check (result, \"IDINT\");\n@@ -2969,7 +2969,7 @@ simplify_nint (const char *name, gfc_expr *e, gfc_expr *k)\n \n   mpfr_round (itrunc->value.real, e->value.real);\n \n-  gfc_mpfr_to_mpz (result->value.integer, itrunc->value.real);\n+  gfc_mpfr_to_mpz (result->value.integer, itrunc->value.real, &e->where);\n \n   gfc_free_expr (itrunc);\n "}]}