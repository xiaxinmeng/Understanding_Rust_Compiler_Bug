{"sha": "2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM1Y2FjOThlZTJiM2UxNTQ2ZWVlYjFlNDU4NWRkZDUwOWIxZWY3MA==", "commit": {"author": {"name": "Michael Eager", "email": "eager@eagercon.com", "date": "2009-04-15T16:46:14Z"}, "committer": {"name": "Michael Eager", "email": "eager@gcc.gnu.org", "date": "2009-04-15T16:46:14Z"}, "message": "Allows a single-precision FP register to contain a SImode value.\n\nThis is only active when TARGET_SINGLE_FPU is true (e.g., --target=powerpc-xilinx-eabi).\n\nFrom-SVN: r146130", "tree": {"sha": "280f41efdb7f619202cd50e44ab18e34aeb4857b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/280f41efdb7f619202cd50e44ab18e34aeb4857b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70/comments", "author": {"login": "eagerm", "id": 945532, "node_id": "MDQ6VXNlcjk0NTUzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/945532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eagerm", "html_url": "https://github.com/eagerm", "followers_url": "https://api.github.com/users/eagerm/followers", "following_url": "https://api.github.com/users/eagerm/following{/other_user}", "gists_url": "https://api.github.com/users/eagerm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eagerm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eagerm/subscriptions", "organizations_url": "https://api.github.com/users/eagerm/orgs", "repos_url": "https://api.github.com/users/eagerm/repos", "events_url": "https://api.github.com/users/eagerm/events{/privacy}", "received_events_url": "https://api.github.com/users/eagerm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ada39f0b23c61dd0c3acc45c73910b07c9fc03f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada39f0b23c61dd0c3acc45c73910b07c9fc03f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ada39f0b23c61dd0c3acc45c73910b07c9fc03f3"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "47f1ce6cc9e15b0f2e55f785c827f14d6022a0bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70", "patch": "@@ -1,3 +1,11 @@\n+2009-04-15  Michael Eager <eager@eagercon.com>\n+\n+\t* config/rs6000/rs6000.c: rs6000_function_value: set function return\n+\treg for single-precision FPU\n+\t* config/rs6000/rs6000.md: (movsi_internal1): only for !TARGET_SINGLE_FPU\n+\t(movsi_internal1_single): New: add pattern to move SI values to/from\n+\tsingle-precision FP regs.\n+\n 2009-04-15  Richard Guenther  <rguenther@suse.de>\n \n \t* omp-low.c (lower_rec_input_clauses): Build correct address"}, {"sha": "b99f371ae4f766f255bb5c232992266ebe54208c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70", "patch": "@@ -22600,7 +22600,8 @@ rs6000_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n   if (DECIMAL_FLOAT_MODE_P (mode) && TARGET_HARD_FLOAT && TARGET_FPRS)\n     /* _Decimal128 must use an even/odd register pair.  */\n     regno = (mode == TDmode) ? FP_ARG_RETURN + 1 : FP_ARG_RETURN;\n-  else if (SCALAR_FLOAT_TYPE_P (valtype) && TARGET_HARD_FLOAT && TARGET_FPRS)\n+  else if (SCALAR_FLOAT_TYPE_P (valtype) && TARGET_HARD_FLOAT && TARGET_FPRS\n+\t   && ((TARGET_SINGLE_FLOAT && (mode == SFmode)) || TARGET_DOUBLE_FLOAT))\n     regno = FP_ARG_RETURN;\n   else if (TREE_CODE (valtype) == COMPLEX_TYPE\n \t   && targetm.calls.split_complex_arg)"}, {"sha": "3195b67220919aa879b0d653995ea97c300b2227", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2c5cac98ee2b3e1546eeeb1e4585ddd509b1ef70", "patch": "@@ -8143,8 +8143,8 @@\n (define_insn \"*movsi_internal1\"\n   [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"=r,r,r,m,r,r,r,r,r,*q,*c*l,*h,*h\")\n \t(match_operand:SI 1 \"input_operand\" \"r,U,m,r,I,L,n,R,*h,r,r,r,0\"))]\n-  \"gpc_reg_operand (operands[0], SImode)\n-   || gpc_reg_operand (operands[1], SImode)\"\n+  \"!TARGET_SINGLE_FPU &&\n+   gpc_reg_operand (operands[0], SImode) || gpc_reg_operand (operands[1], SImode)\"\n   \"@\n    mr %0,%1\n    {cal|la} %0,%a1\n@@ -8162,6 +8162,30 @@\n   [(set_attr \"type\" \"*,*,load,store,*,*,*,*,mfjmpr,*,mtjmpr,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,4,4,4,4,4,4\")])\n \n+(define_insn \"*movsi_internal1_single\"\n+  [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"=r,r,r,m,r,r,r,r,r,*q,*c*l,*h,*h,m,*f\")\n+        (match_operand:SI 1 \"input_operand\" \"r,U,m,r,I,L,n,R,*h,r,r,r,0,f,m\"))]\n+  \"TARGET_SINGLE_FPU &&\n+   gpc_reg_operand (operands[0], SImode) || gpc_reg_operand (operands[1], SImode)\"\n+  \"@\n+   mr %0,%1\n+   {cal|la} %0,%a1\n+   {l%U1%X1|lwz%U1%X1} %0,%1\n+   {st%U0%X0|stw%U0%X0} %1,%0\n+   {lil|li} %0,%1\n+   {liu|lis} %0,%v1\n+   #\n+   {cal|la} %0,%a1\n+   mf%1 %0\n+   mt%0 %1\n+   mt%0 %1\n+   mt%0 %1\n+   {cror 0,0,0|nop}\n+   stfs%U0%X0 %1, %0\n+   lfs%U1%X1 %0, %1\"\n+  [(set_attr \"type\" \"*,*,load,store,*,*,*,*,mfjmpr,*,mtjmpr,*,*,*,*\")\n+   (set_attr \"length\" \"4,4,4,4,4,4,8,4,4,4,4,4,4,4,4\")])\n+\n ;; Split a load of a large constant into the appropriate two-insn\n ;; sequence.\n "}]}