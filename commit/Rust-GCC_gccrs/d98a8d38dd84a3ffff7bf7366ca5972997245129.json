{"sha": "d98a8d38dd84a3ffff7bf7366ca5972997245129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk4YThkMzhkZDg0YTNmZmZmN2JmNzM2NmNhNTk3Mjk5NzI0NTEyOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-06-14T21:08:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-06-14T21:08:15Z"}, "message": "conflict.c (conflict_graph_compute): Don't look for REG_INC.\n\n        * conflict.c (conflict_graph_compute): Don't look for REG_INC.\n\n        * config/ia64/ia64.c (ia64_setup_incoming_varargs): Don't emit\n        auto-inc code.\n\nFrom-SVN: r34557", "tree": {"sha": "506df69be5be1bc0449c75a509bb0a7a977153e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/506df69be5be1bc0449c75a509bb0a7a977153e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d98a8d38dd84a3ffff7bf7366ca5972997245129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98a8d38dd84a3ffff7bf7366ca5972997245129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98a8d38dd84a3ffff7bf7366ca5972997245129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98a8d38dd84a3ffff7bf7366ca5972997245129/comments", "author": null, "committer": null, "parents": [{"sha": "f6a0cc964a749ad25542911497f66a8b9b27a4ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a0cc964a749ad25542911497f66a8b9b27a4ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a0cc964a749ad25542911497f66a8b9b27a4ac"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "56ce1e5f64d8560bb00374d51ede191500d2f333", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98a8d38dd84a3ffff7bf7366ca5972997245129/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98a8d38dd84a3ffff7bf7366ca5972997245129/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d98a8d38dd84a3ffff7bf7366ca5972997245129", "patch": "@@ -1,5 +1,10 @@\n 2000-06-14  Richard Henderson  <rth@cygnus.com>\n \n+\t* conflict.c (conflict_graph_compute): Don't look for REG_INC.\n+\n+\t* config/ia64/ia64.c (ia64_setup_incoming_varargs): Don't emit\n+\tauto-inc code.\n+\n \t* print-rtl.c (print_rtx): Emit space before mem alias set.\n \n 2000-06-14  David Edelsohn  <edelsohn@gnu.org>"}, {"sha": "dca06cd1c3e784bd7575421c4b870131f0a826df", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98a8d38dd84a3ffff7bf7366ca5972997245129/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98a8d38dd84a3ffff7bf7366ca5972997245129/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d98a8d38dd84a3ffff7bf7366ca5972997245129", "patch": "@@ -1188,19 +1188,17 @@ ia64_setup_incoming_varargs (cum, int_mode, type, pretend_size, second_time)\n \t{\n \t  int i;\n \t  int first_reg = GR_ARG_FIRST + cum.words + offset;\n-\t  rtx tmp_reg = gen_rtx_REG (DImode, GR_REG (16));\n-\t  rtx tmp_post_inc = gen_rtx_POST_INC (DImode, tmp_reg);\n-\t  rtx mem = gen_rtx_MEM (DImode, tmp_post_inc);\n-\t  rtx insn;\n+\t  rtx reg1 = gen_reg_rtx (Pmode);\n+\t  rtx mem1 = gen_rtx_MEM (DImode, reg1);\n \n \t  /* We must emit st8.spill insns instead of st8 because we might\n-\t     be saving non-argument registers, and non-argument registers might\n-\t     not contain valid values.  */\n-\t  emit_move_insn (tmp_reg, virtual_incoming_args_rtx);\n+\t     be saving non-argument registers, and non-argument registers\n+\t     might not contain valid values.  */\n+\t  emit_move_insn (reg1, virtual_incoming_args_rtx);\n \t  for (i = first_reg; i < GR_ARG_FIRST + 8; i++)\n \t    {\n-\t      insn = emit_insn (gen_gr_spill (mem, gen_rtx_REG (DImode, i)));\n-\t      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, tmp_reg, 0);\n+\t      emit_insn (gen_gr_spill (mem1, gen_rtx_REG (DImode, i)));\n+\t      emit_insn (gen_adddi3 (reg1, reg1, GEN_INT (8)));\n \t    }\n \t}\n       *pretend_size = ((MAX_ARGUMENT_SLOTS - cum.words - offset)"}, {"sha": "d467ba1b87ae2a486a323a773bc42407a266b555", "filename": "gcc/conflict.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98a8d38dd84a3ffff7bf7366ca5972997245129/gcc%2Fconflict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98a8d38dd84a3ffff7bf7366ca5972997245129/gcc%2Fconflict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconflict.c?ref=d98a8d38dd84a3ffff7bf7366ca5972997245129", "patch": "@@ -483,12 +483,7 @@ conflict_graph_compute (regs, p)\n   \t         we're in SSA form, if a reg is set here it isn't set\n   \t         anywhere elso, so this insn is where the reg is born.  */\n \t      CLEAR_REG_SET (born);\n-\t      note_stores (PATTERN (insn), mark_reg, (void *) born);\n-#ifdef AUTO_INC_DEC\n-\t      for (link = REG_NOTES (insn); link; link = XEXP (link, 1))\n-\t\tif (REG_NOTE_KIND (link) == REG_INC)\n-\t\t  mark_reg (XEXP (link, 0), NULL_RTX, NULL);\n-#endif\n+\t      note_stores (PATTERN (insn), mark_reg, born);\n \t      AND_REG_SET (born, regs);\n \t  \n \t      /* Regs born here were not live before this insn.  */"}]}