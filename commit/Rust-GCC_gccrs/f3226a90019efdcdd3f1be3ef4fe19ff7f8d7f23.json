{"sha": "f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMyMjZhOTAwMTllZmRjZGQzZjFiZTNlZjRmZTE5ZmY3ZjhkN2YyMw==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-11-19T04:37:50Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-11-19T04:37:50Z"}, "message": "gcc.c (The Specs Language): Document spec functions.\n\n* gcc.c (The Specs Language): Document spec functions.\n(static_spec_functions, lookup_spec_function)\n(eval_spec_function, handle_spec_function)\n(if_exists_spec_function, alloc_args): New.\n(execute): Abort if processing_spec_function is true.\n(do_spec_1): Hand off spec to handle_spec_function if %:\nis encountered.  If processing_spec_function is true,\nend any pending argument when the end of the string is reached.\n(main): Use alloc_args to allocate the initial argument vector.\n* gcc.h (struct spec_function): New.\n(lang_specific_spec_functions): New extern.\n\n* config/netbsd-elf.h (STARTFILE_SPEC): Add if-exists(crti%O%s).\n(ENDFILE_SPEC): Add if-exists(crtn%O%s).\n* config/alpha/netbsd.h (ENDFILE_SPEC): Likewise.\n\n* doc/invoke.texi: Document spec functions.\n\n* cppspec.c (lang_specific_spec_functions): New.\n* gccspec.c: Likewise.\n\n* g++spec.c (lang_specific_spec_functions): New.\n\n* g77spec.c (lang_specific_spec_functions): New.\n\n* jvspec.c (lang_specific_spec_functions): New.\n\nFrom-SVN: r59241", "tree": {"sha": "a48e1f22c976c1cbedd74ba5fba89fa5a4479319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a48e1f22c976c1cbedd74ba5fba89fa5a4479319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/comments", "author": null, "committer": null, "parents": [{"sha": "3b312ef46fc9f3319b688174a105d5827dd122b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b312ef46fc9f3319b688174a105d5827dd122b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b312ef46fc9f3319b688174a105d5827dd122b1"}], "stats": {"total": 339, "additions": 334, "deletions": 5}, "files": [{"sha": "07ea2be266b77ff3bfcbd67bfbbb9d24ce5e39f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -1,3 +1,26 @@\n+2002-11-19  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* gcc.c (The Specs Language): Document spec functions.\n+\t(static_spec_functions, lookup_spec_function)\n+\t(eval_spec_function, handle_spec_function)\n+\t(if_exists_spec_function, alloc_args): New.\n+\t(execute): Abort if processing_spec_function is true.\n+\t(do_spec_1): Hand off spec to handle_spec_function if %:\n+\tis encountered.  If processing_spec_function is true,\n+\tend any pending argument when the end of the string is reached.\n+\t(main): Use alloc_args to allocate the initial argument vector.\n+\t* gcc.h (struct spec_function): New.\n+\t(lang_specific_spec_functions): New extern.\n+\n+\t* config/netbsd-elf.h (STARTFILE_SPEC): Add if-exists(crti%O%s).\n+\t(ENDFILE_SPEC): Add if-exists(crtn%O%s).\n+\t* config/alpha/netbsd.h (ENDFILE_SPEC): Likewise.\n+    \n+\t* doc/invoke.texi: Document spec functions.\n+\n+\t* cppspec.c (lang_specific_spec_functions): New.\n+\t* gccspec.c: Likewise.\n+\n 2002-11-18  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/hpux_longdouble.h (FIXUNS_TRUNCTFSI2_LIBCALL): New."}, {"sha": "f56f7807bed7a7576f214aac78ef7e19952a7054", "filename": "gcc/config/alpha/netbsd.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd.h?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -72,7 +72,8 @@ Boston, MA 02111-1307, USA.  */\n #undef ENDFILE_SPEC\n #define ENDFILE_SPEC\t\t\\\n   \"%{ffast-math|funsafe-math-optimizations:crtfm%O%s} \\\n-   %{!shared:crtend%O%s} %{shared:crtendS%O%s}\"\n+   %{!shared:crtend%O%s} %{shared:crtendS%O%s} \\\n+   %:if-exists(crtn%O%s)\"\n \n \n /* Attempt to enable execute permissions on the stack.  */"}, {"sha": "a35f46af18baf5bd6a9bf7cc989db60942c437f9", "filename": "gcc/config/netbsd-elf.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fconfig%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fconfig%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd-elf.h?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -53,6 +53,7 @@ Boston, MA 02111-1307, USA.  */\n      %{!pg:\t\t\t\\\n        %{p:gcrt0%O%s}\t\t\\\n        %{!p:crt0%O%s}}}\t\t\\\n+   %:if-exists(crti%O%s)\t\\\n    %{!shared:crtbegin%O%s} %{shared:crtbeginS%O%s}\"\n \n \n@@ -62,7 +63,8 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ENDFILE_SPEC\n #define ENDFILE_SPEC\t\t\\\n-  \"%{!shared:crtend%O%s} %{shared:crtendS%O%s}\"\n+  \"%{!shared:crtend%O%s} %{shared:crtendS%O%s} \\\n+   %:if-exists(crtn%O%s)\"\n \n \n /* Provide a LINK_SPEC appropriate for NetBSD ELF.  Here we provide"}, {"sha": "e3c47ab3fe7cc88a9b42a85daa7370e879bfaa5e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -1,3 +1,7 @@\n+2002-11-19  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* g++spec.c (lang_specific_spec_functions): New.\n+\n 2002-11-15  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* ChangeLog: Follow spelling conventions."}, {"sha": "d46244857b25ab712eb54aa8c24f3c57f4865cfb", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -307,3 +307,9 @@ int lang_specific_pre_link ()  /* Not used for C++.  */\n \n /* Number of extra output files that lang_specific_pre_link may generate.  */\n int lang_specific_extra_outfiles = 0;  /* Not used for C++.  */\n+\n+/* Table of language-specific spec functions.  */ \n+const struct spec_function lang_specific_spec_functions[] =\n+{\n+  { 0, 0 }\n+};"}, {"sha": "e79968ab51054565c89ce0914d4131fe62f8aaae", "filename": "gcc/cppspec.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppspec.c?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -238,3 +238,9 @@ int lang_specific_pre_link ()\n \n /* Number of extra output files that lang_specific_pre_link may generate.  */\n int lang_specific_extra_outfiles = 0;  /* Not used for cpp.  */\n+\n+/* Table of language-specific spec functions.  */\n+const struct spec_function lang_specific_spec_functions[] =\n+{\n+  { 0, 0 }\n+};"}, {"sha": "45fee6f0fbf08fcf4149b3246262bbd7710c38da", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -4967,6 +4967,27 @@ Substitute the variable part of a matched option.  See below.\n Note that each comma in the substituted string is replaced by\n a single space.\n \n+@item %:@var{function}(@var{args})\n+Call the named function @var{function}, passing it @var{args}.\n+@var{args} is first processed as a nested spec string, then split\n+into an argument vector in the usual fashion.  The function returns\n+a string which is processed as if it had appeared literally as part\n+of the current spec.\n+\n+The following built-in spec functions are provided:\n+\n+@table @code\n+@item @code{if-exists}\n+The @code{if-exists} spec function takes one argument, an absolute\n+pathname to a file.  If the file exists, @code{if-exists} returns the\n+pathname.  Here is a small example of its usage:\n+\n+@smallexample\n+*startfile:\n+crt0%O%s %:if-exists(crti%O%s) crtbegin%O%s\n+@end smallexample\n+@end table\n+\n @item %@{@code{S}@}\n Substitutes the @code{-S} switch, if that switch was given to GCC@.\n If that switch was not specified, this substitutes nothing.  Note that"}, {"sha": "4960f2f278d53917f276fe5f8daeb503b940ef99", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -1,3 +1,7 @@\n+2002-11-19  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* g77spec.c (lang_specific_spec_functions): New.\n+\n 2002-11-02  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* g77.texi: Correct documentation on generating C++ prototypes"}, {"sha": "1bf20d266b43efde6946cbdf462738e6a7e091df", "filename": "gcc/f/g77spec.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Ff%2Fg77spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Ff%2Fg77spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77spec.c?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -562,3 +562,9 @@ int lang_specific_pre_link ()  /* Not used for F77. */\n \n /* Number of extra output files that lang_specific_pre_link may generate. */\n int lang_specific_extra_outfiles = 0;  /* Not used for F77. */\n+\n+/* Table of language-specific spec functions.  */ \n+const struct spec_function lang_specific_spec_functions[] =\n+{\n+  { 0, 0 }\n+};"}, {"sha": "56cb08f8fbce96048064d9782e9d82dc96bf8556", "filename": "gcc/gcc.c", "status": "modified", "additions": 232, "deletions": 3, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -292,6 +292,9 @@ static void delete_failure_queue PARAMS ((void));\n static void clear_failure_queue PARAMS ((void));\n static int check_live_switch\tPARAMS ((int, int));\n static const char *handle_braces PARAMS ((const char *));\n+static const struct spec_function *lookup_spec_function PARAMS ((const char *));\n+static const char *eval_spec_function\tPARAMS ((const char *, const char *));\n+static const char *handle_spec_function PARAMS ((const char *));\n static char *save_string\tPARAMS ((const char *, int));\n static void set_collect_gcc_options PARAMS ((void));\n static int do_spec_1\t\tPARAMS ((const char *, int, const char *));\n@@ -317,6 +320,7 @@ static void add_assembler_option\tPARAMS ((const char *, int));\n static void add_linker_option\t\tPARAMS ((const char *, int));\n static void process_command\t\tPARAMS ((int, const char *const *));\n static int execute\t\t\tPARAMS ((void));\n+static void alloc_args\t\t\tPARAMS ((void));\n static void clear_args\t\t\tPARAMS ((void));\n static void fatal_error\t\t\tPARAMS ((int));\n #ifdef ENABLE_SHARED_LIBGCC\n@@ -327,6 +331,8 @@ static void init_gcc_specs              PARAMS ((struct obstack *,\n #if defined(HAVE_TARGET_OBJECT_SUFFIX) || defined(HAVE_TARGET_EXECUTABLE_SUFFIX)\n static const char *convert_filename\tPARAMS ((const char *, int, int));\n #endif\n+\n+static const char *if_exists_spec_function PARAMS ((int, const char **));\n \f\n /* The Specs Language\n \n@@ -450,6 +456,12 @@ or with constant text in a single argument.\n  %*\tsubstitute the variable part of a matched option.  (See below.)\n \tNote that each comma in the substituted string is replaced by\n \ta single space.\n+ %:function(args)\n+\tCall the named function FUNCTION, passing it ARGS.  ARGS is\n+\tfirst processed as a nested spec string, then split into an\n+\targument vector in the usual fashion.  The function returns\n+\ta string which is processed as if it had appeared literally\n+\tas part of the current spec.\n  %{S}   substitutes the -S switch, if that switch was given to CC.\n \tIf that switch was not specified, this substitutes nothing.\n \tHere S is a metasyntactic variable.\n@@ -1439,6 +1451,16 @@ static struct spec_list *extra_specs = (struct spec_list *) 0;\n \n static struct spec_list *specs = (struct spec_list *) 0;\n \f\n+/* List of static spec functions.  */\n+\n+static const struct spec_function static_spec_functions[] =\n+{\n+  { \"if-exists\",\t\tif_exists_spec_function },\n+  { 0, 0 }\n+};\n+\n+static int processing_spec_function;\n+\f\n /* Add appropriate libgcc specs to OBSTACK, taking into account\n    various permutations of -shared-libgcc, -shared, and such.  */\n \n@@ -1710,6 +1732,15 @@ static int signal_count;\n \n static const char *programname;\n \f\n+/* Allocate the argument vector.  */\n+\n+static void\n+alloc_args ()\n+{\n+  argbuf_length = 10;\n+  argbuf = (const char **) xmalloc (argbuf_length * sizeof (const char *));\n+}\n+\n /* Clear out the vector of arguments (after a command is executed).  */\n \n static void\n@@ -2753,6 +2784,9 @@ execute ()\n \n   struct command *commands;\t/* each command buffer with above info.  */\n \n+  if (processing_spec_function)\n+    abort ();\n+\n   /* Count # of piped commands.  */\n   for (n_commands = 1, i = 0; i < argbuf_index; i++)\n     if (strcmp (argbuf[i], \"|\") == 0)\n@@ -5118,6 +5152,12 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      return -1;\n \t    break;\n \n+\t  case ':':\n+\t    p = handle_spec_function (p);\n+\t    if (p == 0)\n+\t      return -1;\n+\t    break;\n+\n \t  case '%':\n \t    obstack_1grow (&obstack, '%');\n \t    break;\n@@ -5311,10 +5351,179 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \targ_going = 1;\n       }\n \n-  /* End of string.  */\n+  /* End of string.  If we are processing a spec function, we need to\n+     end any pending argument.  */\n+  if (processing_spec_function && arg_going)\n+    {\n+      obstack_1grow (&obstack, 0);\n+      string = obstack_finish (&obstack);\n+      if (this_is_library_file)\n+        string = find_file (string);\n+      store_arg (string, delete_this_arg, this_is_output_file);\n+      if (this_is_output_file)\n+        outfiles[input_file_number] = string;\n+      arg_going = 0;\n+    }\n+\n   return 0;\n }\n \n+/* Look up a spec function.  */\n+\n+static const struct spec_function *\n+lookup_spec_function (name)\n+     const char *name;\n+{\n+  static const struct spec_function * const spec_function_tables[] =\n+  {\n+    static_spec_functions,\n+    lang_specific_spec_functions,\n+  };\n+  const struct spec_function *sf;\n+  unsigned int i;\n+\n+  for (i = 0; i < ARRAY_SIZE (spec_function_tables); i++)\n+    {\n+      for (sf = spec_function_tables[i]; sf->name != NULL; sf++)\n+\tif (strcmp (sf->name, name) == 0)\n+\t  return sf;\n+    }\n+\n+  return NULL;\n+}\n+\n+/* Evaluate a spec function.  */\n+\n+static const char *\n+eval_spec_function (func, args)\n+     const char *func, *args;\n+{\n+  const struct spec_function *sf;\n+  const char *funcval;\n+\n+  /* Saved spec processing context.  */\n+  int save_argbuf_index;\n+  int save_argbuf_length;\n+  const char **save_argbuf;\n+\n+  int save_arg_going;\n+  int save_delete_this_arg;\n+  int save_this_is_output_file;\n+  int save_this_is_library_file;\n+  int save_input_from_pipe;\n+  const char *save_suffix_subst;\n+\n+\n+  sf = lookup_spec_function (func);\n+  if (sf == NULL)\n+    fatal (\"unknown spec function `%s'\", func);\n+\n+  /* Push the spec processing context.  */\n+  save_argbuf_index = argbuf_index;\n+  save_argbuf_length = argbuf_length;\n+  save_argbuf = argbuf;\n+\n+  save_arg_going = arg_going;\n+  save_delete_this_arg = delete_this_arg;\n+  save_this_is_output_file = this_is_output_file;\n+  save_this_is_library_file = this_is_library_file;\n+  save_input_from_pipe = input_from_pipe;\n+  save_suffix_subst = suffix_subst;\n+\n+  /* Create a new spec processing context, and build the function\n+     arguments.  */\n+\n+  alloc_args ();\n+  if (do_spec_2 (args) < 0)\n+    fatal (\"error in args to spec function `%s'\", func);\n+\n+  /* argbuf_index is an index for the next argument to be inserted, and\n+     so contains the count of the args already inserted.  */\n+\n+  funcval = (*sf->func) (argbuf_index, argbuf);\n+\n+  /* Pop the spec processing context.  */\n+  argbuf_index = save_argbuf_index;\n+  argbuf_length = save_argbuf_length;\n+  free (argbuf);\n+  argbuf = save_argbuf;\n+\n+  arg_going = save_arg_going;\n+  delete_this_arg = save_delete_this_arg;\n+  this_is_output_file = save_this_is_output_file;\n+  this_is_library_file = save_this_is_library_file;\n+  input_from_pipe = save_input_from_pipe;\n+  suffix_subst = save_suffix_subst;\n+\n+  return funcval;\n+}\n+\n+/* Handle a spec function call of the form:\n+\n+   %:function(args)\n+\n+   ARGS is processed as a spec in a separate context and split into an\n+   argument vector in the normal fashion.  The function returns a string\n+   containing a spec which we then process in the caller's context, or\n+   NULL if no processing is required.  */\n+\n+static const char *\n+handle_spec_function (p)\n+     const char *p;\n+{\n+  char *func, *args;\n+  const char *endp, *funcval;\n+  int count;\n+\n+  processing_spec_function++;\n+\n+  /* Get the function name.  */\n+  for (endp = p; *endp != '\\0'; endp++)\n+    {\n+      if (*endp == '(')\t\t/* ) */\n+        break;\n+      /* Only allow [A-Za-z0-9], -, and _ in function names.  */\n+      if (!ISALNUM (*endp) && !(*endp == '-' || *endp == '_'))\n+\tfatal (\"malformed spec function name\");\n+    }\n+  if (*endp != '(')\t\t/* ) */\n+    fatal (\"no arguments for spec function\");\n+  func = save_string (p, endp - p);\n+  p = ++endp;\n+\n+  /* Get the arguments.  */\n+  for (count = 0; *endp != '\\0'; endp++)\n+    {\n+      /* ( */\n+      if (*endp == ')')\n+\t{\n+\t  if (count == 0)\n+\t    break;\n+\t  count--;\n+\t}\n+      else if (*endp == '(')\t/* ) */\n+\tcount++;\n+    }\n+  /* ( */\n+  if (*endp != ')')\n+    fatal (\"malformed spec function arguments\");\n+  args = save_string (p, endp - p);\n+  p = ++endp;\n+\n+  /* p now points to just past the end of the spec function expression.  */\n+\n+  funcval = eval_spec_function (func, args);\n+  if (funcval != NULL && do_spec_1 (funcval, 0, NULL) < 0)\n+    p = NULL;\n+\n+  free (func);\n+  free (args);\n+\n+  processing_spec_function--;\n+\n+  return p;\n+}\n+\n /* Return 0 if we call do_spec_1 and that returns -1.  */\n \n static const char *\n@@ -5897,8 +6106,8 @@ main (argc, argv)\n   signal (SIGCHLD, SIG_DFL);\n #endif\n \n-  argbuf_length = 10;\n-  argbuf = (const char **) xmalloc (argbuf_length * sizeof (const char *));\n+  /* Allocate the argument vector.  */\n+  alloc_args ();\n \n   obstack_init (&obstack);\n \n@@ -7253,3 +7462,23 @@ print_multilib_info ()\n       ++p;\n     }\n }\n+\f\n+/* if-exists built-in spec function.\n+\n+   Checks to see if the file specified by the absolute pathname in\n+   ARGS exists.  Returns that pathname if found.\n+\n+   The usual use for this function is to check for a library file\n+   (whose name has been expanded with %s).  */\n+\n+static const char *\n+if_exists_spec_function (argc, argv)\n+     int argc;\n+     const char **argv;\n+{\n+  /* Must have only one argument.  */\n+  if (argc == 1 && IS_ABSOLUTE_PATHNAME (argv[0]) && ! access (argv[0], R_OK))\n+    return argv[0];\n+\n+  return NULL;\n+}"}, {"sha": "feab0ef07108c94ed195d927bed5d7acfbfd3a69", "filename": "gcc/gcc.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -23,6 +23,14 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"version.h\"\n \n+/* The mapping of a spec function name to the C function that\n+   implements it.  */\n+struct spec_function\n+{       \n+  const char *name;\n+  const char *(*func) PARAMS ((int, const char **));\n+};\n+\n /* These are exported by gcc.c.  */\n extern int do_spec PARAMS ((const char *));\n extern void record_temp_file PARAMS ((const char *, int, int));\n@@ -48,6 +56,9 @@ extern int n_infiles;\n /* Number of extra output files that lang_specific_pre_link may generate.  */\n extern int lang_specific_extra_outfiles;\n \n+/* Table of language-specific spec functions.  */\n+extern const struct spec_function lang_specific_spec_functions[];\n+\n /* A vector of corresponding output files is made up later.  */\n \n extern const char **outfiles;"}, {"sha": "6e538b1b744c260674c5f9db2d98d7f4cecf8958", "filename": "gcc/gccspec.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fgccspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fgccspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgccspec.c?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -101,3 +101,9 @@ lang_specific_pre_link ()\n \n /* Number of extra output files that lang_specific_pre_link may generate.  */\n int lang_specific_extra_outfiles = 0;  /* Not used for C.  */\n+\n+/* Table of language-specific spec functions.  */ \n+const struct spec_function lang_specific_spec_functions[] =\n+{\n+  { 0, 0 }\n+};"}, {"sha": "31379a17134bcf9070f64bd86428aaa24fd0c525", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -1,3 +1,7 @@\n+2002-11-19  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* jvspec.c (lang_specific_spec_functions): New.\n+\n 2002-11-18  Tom Tromey  <tromey@redhat.com>\n \n \tFix for PR java/7912:"}, {"sha": "c3efe58de3ad1319bd95e8fbe8fd9f25296b1d00", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=f3226a90019efdcdd3f1be3ef4fe19ff7f8d7f23", "patch": "@@ -632,3 +632,9 @@ lang_specific_pre_link ()\n     }\n   return err;\n }\n+\n+/* Table of language-specific spec functions.  */ \n+const struct spec_function lang_specific_spec_functions[] =\n+{\n+  { 0, 0 }\n+};"}]}