{"sha": "b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVjNjdhNDk1NzdjZTZiYzA5OGJiNWEyNTFmZjVlNTJlYzQ4ZTViOA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-08-12T12:02:21Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-08-12T12:02:21Z"}, "message": "s390.c (CONST_OK_FOR_J, [...]): New macros.\n\n2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.c (CONST_OK_FOR_J, CONST_OK_FOR_K): New macros.\n\t(s390_select_ccmode, s390_rtx_costs, legitimate_reload_constant_p,\n\ts390_init_frame_layout, s390_emit_prologue, s390_emit_epilogue,\n\ts390_output_mi_thunk): Replaced uses of CONST_OK_FOR_CONSTRAINT_P\n\twith one of the new macros.\n\nFrom-SVN: r103026", "tree": {"sha": "f0c7487020ede1aba7dbf1feb2b50a9b301915e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0c7487020ede1aba7dbf1feb2b50a9b301915e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8/comments", "author": null, "committer": null, "parents": [{"sha": "dc4477f54b2b6781232076fcfe2dc169be9a3a0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4477f54b2b6781232076fcfe2dc169be9a3a0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4477f54b2b6781232076fcfe2dc169be9a3a0f"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "1c62e46469418397ccd0062a4df34abfd94abf7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8", "patch": "@@ -1,3 +1,11 @@\n+2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.c (CONST_OK_FOR_J, CONST_OK_FOR_K): New macros.\n+\t(s390_select_ccmode, s390_rtx_costs, legitimate_reload_constant_p,\n+\ts390_init_frame_layout, s390_emit_prologue, s390_emit_epilogue,\n+\ts390_output_mi_thunk): Replaced uses of CONST_OK_FOR_CONSTRAINT_P\n+\twith one of the new macros.\n+\n 2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (s390_split_branches, s390_init_frame_layout): "}, {"sha": "3a8c3a40ad7a0467ade4e553b543a446987ad3d2", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8", "patch": "@@ -267,6 +267,12 @@ struct machine_function GTY(())\n #define GP_ARG_NUM_REG 5\n #define FP_ARG_NUM_REG (TARGET_64BIT? 4 : 2)\n \n+/* A couple of shortcuts.  */\n+#define CONST_OK_FOR_J(x) \\\n+\tCONST_OK_FOR_CONSTRAINT_P((x), 'J', \"J\")\n+#define CONST_OK_FOR_K(x) \\\n+\tCONST_OK_FOR_CONSTRAINT_P((x), 'K', \"K\")\n+\n /* Set the has_landing_pad_p flag in struct machine_function to VALUE.  */\n \n void\n@@ -446,7 +452,7 @@ s390_select_ccmode (enum rtx_code code, rtx op0, rtx op1)\n \t    && GET_MODE_CLASS (GET_MODE (op0)) == MODE_INT)\n \t  return CCAPmode;\n \tif (GET_CODE (op0) == PLUS && GET_CODE (XEXP (op0, 1)) == CONST_INT\n-\t    && CONST_OK_FOR_CONSTRAINT_P (INTVAL (XEXP (op0, 1)), 'K', \"K\"))\n+\t    && CONST_OK_FOR_K (INTVAL (XEXP (op0, 1))))\n \t  return CCAPmode;\n \tif ((GET_CODE (op0) == PLUS || GET_CODE (op0) == MINUS\n \t     || GET_CODE (op1) == NEG)\n@@ -495,7 +501,7 @@ s390_select_ccmode (enum rtx_code code, rtx op0, rtx op1)\n  \t     int a, b; if ((b = a + c) > 0)  \n  \t   with c as a constant value: c < 0 -> CCAN and c >= 0 -> CCAP  */\n \tif (GET_CODE (op0) == PLUS && GET_CODE (XEXP (op0, 1)) == CONST_INT\n-\t    && CONST_OK_FOR_CONSTRAINT_P (INTVAL (XEXP (op0, 1)), 'K', \"K\"))\n+\t    && CONST_OK_FOR_K (INTVAL (XEXP (op0, 1))))\n \t  {\n \t    if (INTVAL (XEXP((op0), 1)) < 0)\n \t      return CCANmode;\n@@ -1928,7 +1934,7 @@ s390_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t    rtx left = XEXP (x, 0);\n \t    rtx right = XEXP (x, 1);\n \t    if (GET_CODE (right) == CONST_INT\n-\t\t&& CONST_OK_FOR_CONSTRAINT_P (INTVAL (right), 'K', \"K\"))\n+\t\t&& CONST_OK_FOR_K (INTVAL (right)))\n \t      *total = s390_cost->mhi;\n \t    else if (GET_CODE (left) == SIGN_EXTEND)\n \t      *total = s390_cost->mh;\n@@ -1943,7 +1949,7 @@ s390_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t    if (TARGET_64BIT)\n \t      {\n \t\tif (GET_CODE (right) == CONST_INT\n-\t\t    && CONST_OK_FOR_CONSTRAINT_P (INTVAL (right), 'K', \"K\"))\n+\t\t    && CONST_OK_FOR_K (INTVAL (right)))\n \t\t  *total = s390_cost->mghi;\n \t\telse if (GET_CODE (left) == SIGN_EXTEND)\n \t\t  *total = s390_cost->msgf;\n@@ -2290,7 +2296,7 @@ legitimate_reload_constant_p (rtx op)\n \n   /* Accept l(g)hi operands.  */\n   if (GET_CODE (op) == CONST_INT\n-      && CONST_OK_FOR_CONSTRAINT_P (INTVAL (op), 'K', \"K\"))\n+      && CONST_OK_FOR_K (INTVAL (op)))\n     return true;\n \n   /* Accept lliXX operands.  */\n@@ -6039,7 +6045,7 @@ s390_init_frame_layout (void)\n       base_used = cfun->machine->split_branches_pending_p\n \t\t  || current_function_uses_const_pool\n \t\t  || (!DISP_IN_RANGE (-frame_size)\n-\t\t      && !CONST_OK_FOR_CONSTRAINT_P (-frame_size, 'K', \"K\"));\n+\t\t      && !CONST_OK_FOR_K (-frame_size));\n \n       /* Decide which register to use as literal pool base.  In small\n \t leaf functions, try to use an unused call-clobbered register\n@@ -6467,7 +6473,7 @@ s390_emit_prologue (void)\n \t}\n       else\n \t{\n-\t  if (!CONST_OK_FOR_CONSTRAINT_P (INTVAL (frame_off), 'K', \"K\"))\n+\t  if (!CONST_OK_FOR_K (INTVAL (frame_off)))\n \t    frame_off = force_const_mem (Pmode, frame_off);\n \n           insn = emit_insn (gen_add2_insn (stack_pointer_rtx, frame_off));\n@@ -6634,7 +6640,7 @@ s390_emit_epilogue (bool sibcall)\n \t}\n       else\n \t{\n-\t  if (!CONST_OK_FOR_CONSTRAINT_P (INTVAL (frame_off), 'K', \"K\"))\n+\t  if (!CONST_OK_FOR_K (INTVAL (frame_off)))\n \t    frame_off = force_const_mem (Pmode, frame_off);\n \n \t  insn = emit_insn (gen_add2_insn (frame_pointer, frame_off));\n@@ -7668,9 +7674,9 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n     {\n       /* Setup literal pool pointer if required.  */\n       if ((!DISP_IN_RANGE (delta)\n-\t   && !CONST_OK_FOR_CONSTRAINT_P (delta, 'K', \"K\"))\n+\t   && !CONST_OK_FOR_K (delta))\n \t  || (!DISP_IN_RANGE (vcall_offset)\n-\t      && !CONST_OK_FOR_CONSTRAINT_P (vcall_offset, 'K', \"K\")))\n+\t      && !CONST_OK_FOR_K (vcall_offset)))\n \t{\n \t  op[5] = gen_label_rtx ();\n \t  output_asm_insn (\"larl\\t%4,%5\", op);\n@@ -7679,11 +7685,11 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n       /* Add DELTA to this pointer.  */\n       if (delta)\n \t{\n-\t  if (CONST_OK_FOR_CONSTRAINT_P (delta, 'J', \"J\"))\n+\t  if (CONST_OK_FOR_J (delta))\n \t    output_asm_insn (\"la\\t%1,%2(%1)\", op);\n \t  else if (DISP_IN_RANGE (delta))\n \t    output_asm_insn (\"lay\\t%1,%2(%1)\", op);\n-\t  else if (CONST_OK_FOR_CONSTRAINT_P (delta, 'K', \"K\"))\n+\t  else if (CONST_OK_FOR_K (delta))\n \t    output_asm_insn (\"aghi\\t%1,%2\", op);\n \t  else\n \t    {\n@@ -7700,7 +7706,7 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t      output_asm_insn (\"lg\\t%4,0(%1)\", op);\n \t      output_asm_insn (\"ag\\t%1,%3(%4)\", op);\n \t    }\n-\t  else if (CONST_OK_FOR_CONSTRAINT_P (vcall_offset, 'K', \"K\"))\n+\t  else if (CONST_OK_FOR_K (vcall_offset))\n \t    {\n \t      output_asm_insn (\"lghi\\t%4,%3\", op);\n \t      output_asm_insn (\"ag\\t%4,0(%1)\", op);\n@@ -7743,9 +7749,9 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n       /* Setup base pointer if required.  */\n       if (!vcall_offset\n \t  || (!DISP_IN_RANGE (delta)\n-              && !CONST_OK_FOR_CONSTRAINT_P (delta, 'K', \"K\"))\n+              && !CONST_OK_FOR_K (delta))\n \t  || (!DISP_IN_RANGE (delta)\n-              && !CONST_OK_FOR_CONSTRAINT_P (vcall_offset, 'K', \"K\")))\n+              && !CONST_OK_FOR_K (vcall_offset)))\n \t{\n \t  op[5] = gen_label_rtx ();\n \t  output_asm_insn (\"basr\\t%4,0\", op);\n@@ -7756,11 +7762,11 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n       /* Add DELTA to this pointer.  */\n       if (delta)\n \t{\n-\t  if (CONST_OK_FOR_CONSTRAINT_P (delta, 'J', \"J\"))\n+\t  if (CONST_OK_FOR_J (delta))\n \t    output_asm_insn (\"la\\t%1,%2(%1)\", op);\n \t  else if (DISP_IN_RANGE (delta))\n \t    output_asm_insn (\"lay\\t%1,%2(%1)\", op);\n-\t  else if (CONST_OK_FOR_CONSTRAINT_P (delta, 'K', \"K\"))\n+\t  else if (CONST_OK_FOR_K (delta))\n \t    output_asm_insn (\"ahi\\t%1,%2\", op);\n \t  else\n \t    {\n@@ -7772,7 +7778,7 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n       /* Perform vcall adjustment.  */\n       if (vcall_offset)\n         {\n-\t  if (CONST_OK_FOR_CONSTRAINT_P (vcall_offset, 'J', \"J\"))\n+\t  if (CONST_OK_FOR_J (vcall_offset))\n \t    {\n \t      output_asm_insn (\"lg\\t%4,0(%1)\", op);\n \t      output_asm_insn (\"a\\t%1,%3(%4)\", op);\n@@ -7782,7 +7788,7 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t      output_asm_insn (\"lg\\t%4,0(%1)\", op);\n \t      output_asm_insn (\"ay\\t%1,%3(%4)\", op);\n \t    }\n-\t  else if (CONST_OK_FOR_CONSTRAINT_P (vcall_offset, 'K', \"K\"))\n+\t  else if (CONST_OK_FOR_K (vcall_offset))\n \t    {\n \t      output_asm_insn (\"lhi\\t%4,%3\", op);\n \t      output_asm_insn (\"a\\t%4,0(%1)\", op);"}]}