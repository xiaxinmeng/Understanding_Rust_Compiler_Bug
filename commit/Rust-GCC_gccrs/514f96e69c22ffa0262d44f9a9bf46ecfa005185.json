{"sha": "514f96e69c22ffa0262d44f9a9bf46ecfa005185", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE0Zjk2ZTY5YzIyZmZhMDI2MmQ0NGY5YTliZjQ2ZWNmYTAwNTE4NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-09-05T23:20:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-09-05T23:20:24Z"}, "message": "ia64.md (movsi and movdi patterns): Allow moves from 8-bit constants to AR registers.\n\n        * config/ia64.md (movsi and movdi patterns): Allow moves from\n        8-bit constants to AR registers.\n\nFrom-SVN: r36172", "tree": {"sha": "9007f5ae056e821b2bb34ec8dd31fa339a95ea27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9007f5ae056e821b2bb34ec8dd31fa339a95ea27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/514f96e69c22ffa0262d44f9a9bf46ecfa005185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/514f96e69c22ffa0262d44f9a9bf46ecfa005185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/514f96e69c22ffa0262d44f9a9bf46ecfa005185", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/514f96e69c22ffa0262d44f9a9bf46ecfa005185/comments", "author": null, "committer": null, "parents": [{"sha": "cf1f6ae31a15dbb3e9eaf393c05f84b0c4d6aa81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf1f6ae31a15dbb3e9eaf393c05f84b0c4d6aa81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf1f6ae31a15dbb3e9eaf393c05f84b0c4d6aa81"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "07382659190ba4b89190606adc7c064e64c4155a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/514f96e69c22ffa0262d44f9a9bf46ecfa005185/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/514f96e69c22ffa0262d44f9a9bf46ecfa005185/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=514f96e69c22ffa0262d44f9a9bf46ecfa005185", "patch": "@@ -1,3 +1,8 @@\n+2000-09-05  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64.md (movsi and movdi patterns): Allow moves from\n+\t8-bit constants to AR registers.\n+\n 2000-09-05  Richard Henderson  <rth@cygnus.com>\n \n \t* config/ia64/ia64.md (mulhi3): New."}, {"sha": "68fbbefec44f5dbadf2c0056c8174b2b7c424c7a", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/514f96e69c22ffa0262d44f9a9bf46ecfa005185/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/514f96e69c22ffa0262d44f9a9bf46ecfa005185/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=514f96e69c22ffa0262d44f9a9bf46ecfa005185", "patch": "@@ -296,7 +296,7 @@\n        [(match_operand:CC 3 \"register_operand\" \"c,c,c,c,c,c,c,c\")\n         (const_int 0)])\n      (set (match_operand:SI 0 \"register_operand\"  \"=r,r,r, r,*f,*f, r,*d\")\n-\t  (match_operand:SI 1 \"nonmemory_operand\" \"rO,J,i,*f,rO,*f,*d,rO\")))]\n+\t  (match_operand:SI 1 \"nonmemory_operand\" \"rO,J,i,*f,rO,*f,*d,rK\")))]\n   \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n    (%J2) mov %0 = %r1\n@@ -312,7 +312,7 @@\n \n (define_insn \"*movsi_internal_astep\"\n   [(set (match_operand:SI 0 \"destination_operand\" \"=r,r,r,r, m, r,*f,*f, r,*d\")\n-\t(match_operand:SI 1 \"move_operand\"        \"rO,J,i,m,rO,*f,rO,*f,*d,rO\"))]\n+\t(match_operand:SI 1 \"move_operand\"        \"rO,J,i,m,rO,*f,rO,*f,*d,rK\"))]\n   \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n   mov %0 = %r1\n@@ -330,7 +330,7 @@\n \n (define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"destination_operand\" \"=r,r,r,r, m, r,*f,*f, r,*d\")\n-\t(match_operand:SI 1 \"move_operand\"        \"rO,J,i,m,rO,*f,rO,*f,*d,rO\"))]\n+\t(match_operand:SI 1 \"move_operand\"        \"rO,J,i,m,rO,*f,rO,*f,*d,rK\"))]\n   \"! TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n   mov %0 = %r1\n@@ -380,12 +380,12 @@\n (define_insn \"\"\n   [(cond_exec\n      (match_operator 2 \"predicate_operator\"\n-       [(match_operand:CC 3 \"register_operand\" \"c,c,c,c,c,c,c,c,c,c\")\n+       [(match_operand:CC 3 \"register_operand\" \"c,c,c,c,c,c,c,c,c,c,c\")\n         (const_int 0)])\n      (set (match_operand:DI 0 \"register_operand\"\n-\t\t\t      \"=r,r,r, r,*f,*f,   r,*b*e, r,*d\")\n+\t\t\t      \"=r,r,r, r,*f,*f,   r,*b,*e, r,*d\")\n \t  (match_operand:DI 1 \"nonmemory_operand\"\n-\t\t\t      \"rO,J,i,*f,rO,*f,*b*e,  rO,*d,rO\")))]\n+\t\t\t      \"rO,J,i,*f,rO,*f,*b*e,rO,rK,*d,rK\")))]\n   \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"*\n {\n@@ -399,7 +399,8 @@\n     \\\"(%J2) mov %0 = %1\\\",\n     \\\"(%J2) mov %0 = %r1\\\",\n     \\\"(%J2) mov %0 = %1\\\",\n-    \\\"(%J2) mov %0 = %r1\\\"\n+    \\\"(%J2) mov %0 = %1\\\",\n+    \\\"(%J2) mov %0 = %1\\\"\n   };\n \n   /* We use 'i' for alternative 2 despite possible PIC problems.\n@@ -419,7 +420,7 @@\n \n   return alt[which_alternative];\n }\"\n-  [(set_attr \"type\" \"A,A,L,M,M,F,I,I,M,M\")\n+  [(set_attr \"type\" \"A,A,L,M,M,F,I,I,I,M,M\")\n    (set_attr \"predicable\" \"no\")])\n \n ;; This is used during early compilation to delay the decision on\n@@ -440,9 +441,9 @@\n \n (define_insn \"*movdi_internal_astep\"\n   [(set (match_operand:DI 0 \"destination_operand\"\n-\t\t    \"=r,r,r,r, m, r,*f,*f,*f, Q,   r,*b*e, r,*d, r,*c\")\n+\t\t    \"=r,r,r,r, m, r,*f,*f,*f, Q,   r,*b,*e, r,*d, r,*c\")\n \t(match_operand:DI 1 \"move_operand\"\n-\t\t    \"rO,J,i,m,rO,*f,rO,*f, Q,*f,*b*e,  rO,*d,rO,*c,rO\"))]\n+\t\t    \"rO,J,i,m,rO,*f,rO,*f, Q,*f,*b*e,rO,rK,*d,rK,*c,rO\"))]\n   \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"*\n {\n@@ -460,7 +461,8 @@\n     \\\"mov %0 = %1\\\",\n     \\\"mov %0 = %r1\\\",\n     \\\"mov %0 = %1\\\",\n-    \\\"mov %0 = %r1\\\",\n+    \\\"mov %0 = %1\\\",\n+    \\\"mov %0 = %1\\\",\n     \\\"mov %0 = pr\\\",\n     \\\"mov pr = %1, -1\\\"\n   };\n@@ -471,14 +473,14 @@\n \n   return alt[which_alternative];\n }\"\n-  [(set_attr \"type\" \"A,A,L,M,M,M,M,F,M,M,I,I,M,M,I,I\")\n+  [(set_attr \"type\" \"A,A,L,M,M,M,M,F,M,M,I,I,I,M,M,I,I\")\n    (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"destination_operand\"\n-\t\t    \"=r,r,r,r, m, r,*f,*f,*f, Q,   r,*b*e, r,*d, r,*c\")\n+\t\t    \"=r,r,r,r, m, r,*f,*f,*f, Q,   r,*b,*e, r,*d, r,*c\")\n \t(match_operand:DI 1 \"move_operand\"\n-\t\t    \"rO,J,i,m,rO,*f,rO,*f, Q,*f,*b*e,  rO,*d,rO,*c,rO\"))]\n+\t\t    \"rO,J,i,m,rO,*f,rO,*f, Q,*f,*b*e,rO,rK,*d,rK,*c,rO\"))]\n   \"! TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"*\n {\n@@ -496,7 +498,8 @@\n     \\\"%,mov %0 = %1\\\",\n     \\\"%,mov %0 = %r1\\\",\n     \\\"%,mov %0 = %1\\\",\n-    \\\"%,mov %0 = %r1\\\",\n+    \\\"%,mov %0 = %1\\\",\n+    \\\"%,mov %0 = %1\\\",\n     \\\"mov %0 = pr\\\",\n     \\\"mov pr = %1, -1\\\"\n   };\n@@ -507,7 +510,7 @@\n \n   return alt[which_alternative];\n }\"\n-  [(set_attr \"type\" \"A,A,L,M,M,M,M,F,M,M,I,I,M,M,I,I\")])\n+  [(set_attr \"type\" \"A,A,L,M,M,M,M,F,M,M,I,I,I,M,M,I,I\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -3034,16 +3037,16 @@\n \n (define_insn \"*cmovdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\"=r,m,*f,Q,*b*d*e,r,m,*f,Q,*b*d*e,r,m,*f,Q,*b*d*e\")\n+\t\t\"=r,m,*f,Q,*b,*d*e,r,m,*f,Q,*b,*d*e,r,m,*f,Q,*b,*d*e\")\n \t(if_then_else:DI\n \t  (match_operator:CC 4 \"predicate_operator\"\n \t    [(match_operand:CC 1 \"register_operand\"\n-\t\t\t       \"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c\")\n+\t\t\t       \"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c\")\n \t     (const_int 0)])\n \t  (match_operand:DI 2 \"general_operand\"\n-\t\t\"0,0,0,0,0,rim*f*b*d*e,rO,rOQ,*f,r,rim*f*b*d*e,rO,rOQ,*f,r\")\n+\t\t\"0,0,0,0,0,0,rim*f*b*d*e,rO,rOQ,*f,rO,rK,rim*f*b*d*e,rO,rOQ,*f,rO,rK\")\n \t  (match_operand:DI 3 \"general_operand\"\n-\t\t\"rim*f*b*d*e,rO,rOQ,*f,r,0,0,0,0,0,rim*f*b*d*e,rO,rOQ,*f,r\")))]\n+\t\t\"rim*f*b*d*e,rO,rOQ,*f,rO,rK,0,0,0,0,0,0,rim*f*b*d*e,rO,rOQ,*f,rO,rK\")))]\n   \"! TARGET_A_STEP\"\n   \"* abort ();\"\n   [(set_attr \"predicable\" \"no\")])"}]}