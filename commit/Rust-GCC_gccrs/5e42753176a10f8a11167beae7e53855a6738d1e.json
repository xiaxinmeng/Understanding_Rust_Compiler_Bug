{"sha": "5e42753176a10f8a11167beae7e53855a6738d1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU0Mjc1MzE3NmExMGY4YTExMTY3YmVhZTdlNTM4NTVhNjczOGQxZQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2001-08-20T17:40:26Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2001-08-20T17:40:26Z"}, "message": "Test of gcov branch coverage reporting.\n\nFrom-SVN: r45058", "tree": {"sha": "c84e8f028f39a7b6814467885fba4947a021274d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c84e8f028f39a7b6814467885fba4947a021274d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e42753176a10f8a11167beae7e53855a6738d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e42753176a10f8a11167beae7e53855a6738d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e42753176a10f8a11167beae7e53855a6738d1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e42753176a10f8a11167beae7e53855a6738d1e/comments", "author": null, "committer": null, "parents": [{"sha": "b235406124781f37d534a6a79b583109b3e2bf2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b235406124781f37d534a6a79b583109b3e2bf2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b235406124781f37d534a6a79b583109b3e2bf2e"}], "stats": {"total": 295, "additions": 295, "deletions": 0}, "files": [{"sha": "6bc20e0005a4dd3eaa5852147407695a6071eed2", "filename": "gcc/testsuite/gcc.misc-tests/gcov-4b.c", "status": "added", "additions": 261, "deletions": 0, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e42753176a10f8a11167beae7e53855a6738d1e/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e42753176a10f8a11167beae7e53855a6738d1e/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-4b.c?ref=5e42753176a10f8a11167beae7e53855a6738d1e", "patch": "@@ -0,0 +1,261 @@\n+/* Check that execution counts for various C constructs are reported\n+   correctly by gcov. */\n+\n+/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-do run { target native } } */\n+\n+int do_something (int i)\n+{\n+  return i;\n+}\n+\n+/* Check for loops. */\n+\n+int for_val1;\n+int for_val2;\n+int for_temp;\n+\n+int\n+test_for1 (int n)\n+{\n+  int i;\n+  for_temp = 1;\n+  for (i = 0; i < n; i++)\t\t/* branch(25) */\n+    \t\t\t\t\t/* branch(end) */\n+    for_temp++;\n+  return for_temp;\n+}\n+\n+int\n+test_for2 (int m, int n, int o)\n+{\n+  int i, j, k;\n+  for_temp = 1;\n+  for (i = 0; i < n; i++)\t\t/* branch(30) */\n+    \t\t\t\t\t/* branch(end) */\n+    for (j = 0; j < m; j++)\t\t/* branch(32) */\n+    \t\t\t\t\t/* branch(end) */\n+      for (k = 0; k < o; k++)\t\t/* branch(27) */\n+    \t\t\t\t\t/* branch(end) */\n+\tfor_temp++;\n+  return for_temp;\n+}\n+\n+int\n+call_for ()\n+{\n+  for_val1 += test_for1 (0);\n+  for_val1 += test_for1 (2);\n+  for_val1 += test_for1 (7);\n+\n+  for_val2 += test_for2 (0, 0, 0);\n+  for_val2 += test_for2 (1, 0, 0);\n+  for_val2 += test_for2 (1, 3, 0);\n+  for_val2 += test_for2 (1, 3, 1);\n+  for_val2 += test_for2 (3, 1, 5);\n+  for_val2 += test_for2 (3, 7, 3);\n+}\n+\n+/* Check the use of goto. */\n+\n+int goto_val;\n+\n+int\n+test_goto1 (int f)\n+{\n+  if (f)\t\t\t\t/* branch(50) */\n+    \t\t\t\t\t/* branch(end) */\n+    goto lab1;\n+  return 1;\n+lab1:\n+  return 2;\n+}\n+\n+int\n+test_goto2 (int f)\n+{\n+  int i;\n+  for (i = 0; i < 10; i++)\t\t/* branch(7) */\n+    \t\t\t\t\t/* branch(end) */\n+    if (i == f) goto lab2;\n+  return 4;\n+lab2:\n+  return 8;\n+}\n+\n+void\n+call_goto ()\n+{\n+  goto_val += test_goto1 (0);\n+  goto_val += test_goto1 (1);\n+  goto_val += test_goto2 (3);\n+  goto_val += test_goto2 (30);\n+}\n+\n+/* Check nested if-then-else statements. */\n+\n+int ifelse_val1;\n+int ifelse_val2;\n+int ifelse_val3;\n+\n+int\n+test_ifelse1 (int i, int j)\n+{\n+  int result = 0;\n+  if (i)\t\t\t\t/* branch(40) */\n+    \t\t\t\t\t/* branch(end) */\n+    if (j)\t\t\t\t/* branch(0) */\n+    \t\t\t\t\t/* branch(end) */\n+      result = do_something (4);\n+    else\n+      result = do_something (1024);\n+  else\n+    if (j)\t\t\t\t/* branch(50) */\n+    \t\t\t\t\t/* branch(end) */\n+      result = do_something (1);\n+    else\n+      result = do_something (2);\n+  if (i > j)\t\t\t\t/* branch(80) */\n+    \t\t\t\t\t/* branch(end) */\n+    result = do_something (result*2);\n+  if (i > 10)\t\t\t\t/* branch(80) */\n+    \t\t\t\t\t/* branch(end) */\n+    if (j > 10)\t\t\t\t/* branch(100) */\n+      result = do_something (result*4);\n+  return result;\n+}\n+\n+int\n+test_ifelse2 (int i)\n+{\n+  int result = 0;\n+  if (!i)\t\t\t\t/* branch(83) */\n+    \t\t\t\t\t/* branch(end) */\n+    result = do_something (1);\n+  if (i == 1)\t\t\t\t/* branch(100) */\n+    \t\t\t\t\t/* branch(end) */\n+    result = do_something (1024);\n+  if (i == 2)\t\t\t\t/* branch(50) */\n+    \t\t\t\t\t/* branch(end) */\n+    result = do_something (2);\n+  if (i == 3)\t\t\t\t/* branch(67) */\n+    \t\t\t\t\t/* branch(end) */\n+    return do_something (8);\n+  if (i == 4)\t\t\t\t/* branch(100) */\n+    \t\t\t\t\t/* branch(end) */\n+    return do_something (2048);\n+  return result;\n+}\n+\n+int\n+test_ifelse3 (int i, int j)\n+{\n+  int result = 1;\n+  if (i > 10 && j > i && j < 20)\t/* branch(27 50 75) */\n+    \t\t\t\t\t/* branch(end) */\n+    result = do_something (16);\n+  if (i > 20)\t\t\t\t/* branch(55) */\n+    \t\t\t\t\t/* branch(end) */\n+    if (j > i)\t\t\t\t/* branch(60) */\n+    \t\t\t\t\t/* branch(end) */\n+      if (j < 30)\t\t\t/* branch(50) */\n+    \t\t\t\t\t/* branch(end) */\n+\tresult = do_something (32);\n+  if (i == 3 || j == 47 || i == j)\t/* branch(9 10 89) */\n+    \t\t\t\t\t/* branch(end) */\n+    result = do_something (64);\n+  return result;\n+}\n+\n+void\n+call_ifelse ()\n+{\n+  ifelse_val1 += test_ifelse1 (0, 2);\n+  ifelse_val1 += test_ifelse1 (0, 0);\n+  ifelse_val1 += test_ifelse1 (1, 2);\n+  ifelse_val1 += test_ifelse1 (10, 2);\n+  ifelse_val1 += test_ifelse1 (11, 11);\n+\n+  ifelse_val2 += test_ifelse2 (0);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (2);\n+  ifelse_val2 += test_ifelse2 (3);\n+  ifelse_val2 += test_ifelse2 (3);\n+\n+  ifelse_val3 += test_ifelse3 (11, 19);\n+  ifelse_val3 += test_ifelse3 (25, 27);\n+  ifelse_val3 += test_ifelse3 (11, 22);\n+  ifelse_val3 += test_ifelse3 (11, 10);\n+  ifelse_val3 += test_ifelse3 (21, 32);\n+  ifelse_val3 += test_ifelse3 (21, 20);\n+  ifelse_val3 += test_ifelse3 (1, 2);\n+  ifelse_val3 += test_ifelse3 (32, 31);\n+  ifelse_val3 += test_ifelse3 (3, 0);\n+  ifelse_val3 += test_ifelse3 (0, 47);\n+  ifelse_val3 += test_ifelse3 (65, 65);\n+}\n+\n+/* Check switch statements. */\n+\n+int switch_val, switch_m;\n+\n+int\n+test_switch (int i, int j)\n+{\n+  int result = 0;\n+\n+  switch (i)\t\t\t\t/* branch(80 25) */\n+    \t\t\t\t\t/* branch(end) */\n+    {\n+      case 1:\n+        result = do_something (2);\n+        break;\n+      case 2:\n+        result = do_something (1024);\n+        break;\n+      case 3:\n+      case 4:\n+        if (j == 2)\t\t\t/* branch(67) */\n+    \t\t\t\t\t/* branch(end) */\n+          return do_something (4);\n+        result = do_something (8);\n+        break;\n+      default:\n+\tresult = do_something (32);\n+\tswitch_m++;\n+        break;\n+    }\n+  return result;\n+}\n+\n+void\n+call_switch ()\n+{\n+  switch_val += test_switch (1, 0);\n+  switch_val += test_switch (3, 0);\n+  switch_val += test_switch (3, 2);\n+  switch_val += test_switch (4, 0);\n+  switch_val += test_switch (16, 0);\t\n+  switch_val += switch_m;\n+}\n+\n+int\n+main()\n+{\n+  call_for ();\n+  call_goto ();\n+  call_ifelse ();\n+  call_switch ();\n+  if ((for_val1 != 12)\n+      || (for_val2 != 87)\n+      || (goto_val != 15)\n+      || (ifelse_val1 != 31)\n+      || (ifelse_val2 != 23)\n+      || (ifelse_val3 != 246)\n+      || (switch_val != 55))\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { run-gcov -b gcov-4b.c } } */"}, {"sha": "ec59e56aed46e85acd0819eb60818f7d5d295f99", "filename": "gcc/testsuite/gcc.misc-tests/gcov-5b.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e42753176a10f8a11167beae7e53855a6738d1e/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e42753176a10f8a11167beae7e53855a6738d1e/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-5b.c?ref=5e42753176a10f8a11167beae7e53855a6738d1e", "patch": "@@ -0,0 +1,34 @@\n+/* Check that branch percentages are calculated in variables\n+   that are large enough to hold the count. */\n+\n+/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-do run { target native } } */\n+\n+#define LIMIT1 7000\n+#define LIMIT2 7000\n+\n+int count;\n+\n+void incr_count ()\n+{\n+  count++;\n+}\n+\n+void doit (int i, int j)\n+{\n+  if (i > j)\n+    incr_count ();\n+}\n+\n+int main ()\n+{\n+  int i, j;\n+\n+  for (i = 0; i < LIMIT1; i++)\n+    for (j = 0; j < LIMIT2; j++)\n+      doit (i, j);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { run-gcov -b gcov-5b.c } } */"}]}