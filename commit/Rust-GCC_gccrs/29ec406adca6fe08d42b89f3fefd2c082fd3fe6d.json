{"sha": "29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjllYzQwNmFkY2E2ZmUwOGQ0MmI4OWYzZmVmZDJjMDgyZmQzZmU2ZA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@vnet.linux.ibm.com", "date": "2015-08-18T22:02:46Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2015-08-18T22:02:46Z"}, "message": "altivec.h (vec_adde): New define.\n\n[gcc]\n\n2015-08-18  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_adde): New define.\n\t(vec_addec): Likewise.\n\t(vec_double): Likewise.\n\t(vec_bperm): Likewise.\n\t(vec_gb): Likewise.\n\t* config/rs6000/rs6000-builtin.def (ADDE): New\n\tBU_ALTIVEC_OVERLOAD_3.\n\t(ADDEC): Likewise.\n\t(DOUBLE): New BU_VSX_OVERLOAD_1.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add new\n\tentries for ALTIVEC_BUILTIN_VEC_ADDC, ALTIVEC_BUILTIN_VEC_ADDE,\n\tALTIVEC_BUILTIN_VEC_ADDEC, ALTIVEC_BUILTIN_VEC_ANDC,\n\tVSX_BUILTIN_VEC_DOUBLE, ALTIVEC_BUILTIN_VEC_MERGEH,\n\tALTIVEC_BUILTIN_VEC_MERGEL, ALTIVEC_BUILTIN_VEC_NOR,\n\tALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VEC_XOR,\n\tALTIVEC_BUILTIN_VEC_PERM, ALTIVEC_BUILTIN_VEC_SEL,\n\tP8V_BUILTIN_VEC_EQV, P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_VEC_ORC,\n\tand P8V_BUILTIN_VEC_VBPERMQ.\n\n[gcc/testsuite]\n\n2015-08-18  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n\n\t* gcc.target/powerpc/altivec-35.c: New test.\n\t* gcc.target/powerpc/p8vector-builtin-8.c: New test.\n\t* gcc.target/powerpc/vsx-vector-7.c: New test.\n\nFrom-SVN: r226995", "tree": {"sha": "f570a6b9fcc9a7642d1356b2ade26f0eb569f380", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f570a6b9fcc9a7642d1356b2ade26f0eb569f380"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/comments", "author": null, "committer": null, "parents": [{"sha": "7940cae4312779b9d58c1caa54b2f56b84aca4b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7940cae4312779b9d58c1caa54b2f56b84aca4b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7940cae4312779b9d58c1caa54b2f56b84aca4b3"}], "stats": {"total": 223, "additions": 222, "deletions": 1}, "files": [{"sha": "109065636c69675a541c77e8a5c1370359b43b9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "patch": "@@ -1,3 +1,24 @@\n+2015-08-18  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_adde): New define.\n+\t(vec_addec): Likewise.\n+\t(vec_double): Likewise.\n+\t(vec_bperm): Likewise.\n+\t(vec_gb): Likewise.\n+\t* config/rs6000/rs6000-builtin.def (ADDE): New\n+\tBU_ALTIVEC_OVERLOAD_3.\n+\t(ADDEC): Likewise.\n+\t(DOUBLE): New BU_VSX_OVERLOAD_1.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add new\n+\tentries for ALTIVEC_BUILTIN_VEC_ADDC, ALTIVEC_BUILTIN_VEC_ADDE,\n+\tALTIVEC_BUILTIN_VEC_ADDEC, ALTIVEC_BUILTIN_VEC_ANDC,\n+\tVSX_BUILTIN_VEC_DOUBLE, ALTIVEC_BUILTIN_VEC_MERGEH,\n+\tALTIVEC_BUILTIN_VEC_MERGEL, ALTIVEC_BUILTIN_VEC_NOR,\n+\tALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VEC_XOR,\n+\tALTIVEC_BUILTIN_VEC_PERM, ALTIVEC_BUILTIN_VEC_SEL,\n+\tP8V_BUILTIN_VEC_EQV, P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_VEC_ORC,\n+\tand P8V_BUILTIN_VEC_VBPERMQ.\n+\n 2015-08-18  Jason Merrill  <jason@redhat.com>\n \n \t* print-tree.c (print_node): Handle TREE_BINFO."}, {"sha": "3ef6bc85ecd8551b508d72af09db66c089e736f9", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "patch": "@@ -100,6 +100,8 @@\n    typed builtins.  */\n #define vec_vaddfp __builtin_vec_vaddfp\n #define vec_addc __builtin_vec_addc\n+#define vec_adde __builtin_vec_adde\n+#define vec_addec __builtin_vec_addec\n #define vec_vaddsws __builtin_vec_vaddsws\n #define vec_vaddshs __builtin_vec_vaddshs\n #define vec_vaddsbs __builtin_vec_vaddsbs\n@@ -125,6 +127,7 @@\n #define vec_cts __builtin_vec_cts\n #define vec_ctu __builtin_vec_ctu\n #define vec_cpsgn __builtin_vec_copysign\n+#define vec_double __builtin_vec_double\n #define vec_expte __builtin_vec_expte\n #define vec_floor __builtin_vec_floor\n #define vec_loge __builtin_vec_loge\n@@ -340,6 +343,7 @@\n #define vec_vaddudm __builtin_vec_vaddudm\n #define vec_vadduqm __builtin_vec_vadduqm\n #define vec_vbpermq __builtin_vec_vbpermq\n+#define vec_bperm __builtin_vec_vbpermq\n #define vec_vclz __builtin_vec_vclz\n #define vec_cntlz __builtin_vec_vclz\n #define vec_vclzb __builtin_vec_vclzb\n@@ -351,6 +355,7 @@\n #define vec_vsubecuq __builtin_vec_vsubecuq\n #define vec_vsubeuqm __builtin_vec_vsubeuqm\n #define vec_vgbbd __builtin_vec_vgbbd\n+#define vec_gb __builtin_vec_vgbbd\n #define vec_vmaxsd __builtin_vec_vmaxsd\n #define vec_vmaxud __builtin_vec_vmaxud\n #define vec_vminsd __builtin_vec_vminsd"}, {"sha": "7beddf64d1b56b356bed11dd47d94648de8f7618", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "patch": "@@ -951,6 +951,8 @@ BU_ALTIVEC_X (VEC_EXT_V4SF,\t\"vec_ext_v4sf\",     CONST)\n    before we get to the point about classifying the builtin type.  */\n \n /* 3 argument Altivec overloaded builtins.  */\n+BU_ALTIVEC_OVERLOAD_3 (ADDE,\t   \"adde\")\n+BU_ALTIVEC_OVERLOAD_3 (ADDEC,\t   \"addec\")\n BU_ALTIVEC_OVERLOAD_3 (MADD,       \"madd\")\n BU_ALTIVEC_OVERLOAD_3 (MADDS,      \"madds\")\n BU_ALTIVEC_OVERLOAD_3 (MLADD,      \"mladd\")\n@@ -1447,6 +1449,9 @@ BU_VSX_OVERLOAD_2 (XXMRGLW,  \"xxmrglw\")\n BU_VSX_OVERLOAD_2 (XXSPLTD,  \"xxspltd\")\n BU_VSX_OVERLOAD_2 (XXSPLTW,  \"xxspltw\")\n \n+/* 1 argument VSX overloaded builtin functions.  */\n+BU_VSX_OVERLOAD_1 (DOUBLE,   \"double\")\n+\n /* VSX builtins that are handled as special cases.  */\n BU_VSX_OVERLOAD_X (LD,\t     \"ld\")\n BU_VSX_OVERLOAD_X (ST,\t     \"st\")"}, {"sha": "d45bc93b10ad269eb6674c059c785637609d528d", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "patch": "@@ -810,7 +810,25 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { ALTIVEC_BUILTIN_VEC_VADDUBM, ALTIVEC_BUILTIN_VADDUBM,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_ADDC, ALTIVEC_BUILTIN_VADDCUW,\n-    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ADDC, ALTIVEC_BUILTIN_VADDCUW,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ADDC, P8V_BUILTIN_VADDCUQ,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n+    RS6000_BTI_unsigned_V1TI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ADDC, P8V_BUILTIN_VADDCUQ,\n+    RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ADDE, P8V_BUILTIN_VADDEUQM,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI },\n+  { ALTIVEC_BUILTIN_VEC_ADDE, P8V_BUILTIN_VADDEUQM,\n+    RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI },\n+  { ALTIVEC_BUILTIN_VEC_ADDEC, P8V_BUILTIN_VADDECUQ,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI },\n+  { ALTIVEC_BUILTIN_VEC_ADDEC, P8V_BUILTIN_VADDECUQ,\n+    RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI },\n   { ALTIVEC_BUILTIN_VEC_ADDS, ALTIVEC_BUILTIN_VADDUBS,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_ADDS, ALTIVEC_BUILTIN_VADDUBS,\n@@ -979,6 +997,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n     RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_ANDC, ALTIVEC_BUILTIN_VANDC,\n@@ -1237,6 +1257,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { VSX_BUILTIN_VEC_DIV, VSX_BUILTIN_UDIV_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_DOUBLE, VSX_BUILTIN_XVCVSXDDP,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DI, 0, 0 },\n+  { VSX_BUILTIN_VEC_DOUBLE, VSX_BUILTIN_XVCVUXDDP,\n+    RS6000_BTI_V2DF, RS6000_BTI_unsigned_V2DI, 0, 0 },\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,\n@@ -1712,6 +1736,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MERGEH, VSX_BUILTIN_VEC_MERGEH_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEH, VSX_BUILTIN_VEC_MERGEH_V2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VMRGHW, ALTIVEC_BUILTIN_VMRGHW,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_VMRGHW, ALTIVEC_BUILTIN_VMRGHW,\n@@ -1770,6 +1796,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MERGEL, VSX_BUILTIN_VEC_MERGEL_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_MERGEL, VSX_BUILTIN_VEC_MERGEL_V2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VMRGLW, ALTIVEC_BUILTIN_VMRGLW,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_VMRGLW, ALTIVEC_BUILTIN_VMRGLW,\n@@ -1954,6 +1982,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_NOR, ALTIVEC_BUILTIN_VNOR,\n@@ -1996,6 +2026,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_OR, ALTIVEC_BUILTIN_VOR,\n@@ -2695,6 +2727,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n@@ -2957,6 +2991,9 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_unsigned_V16QI },\n   { ALTIVEC_BUILTIN_VEC_PERM, ALTIVEC_BUILTIN_VPERM_2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI },\n+  { ALTIVEC_BUILTIN_VEC_PERM, ALTIVEC_BUILTIN_VPERM_2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_unsigned_V16QI },\n   { ALTIVEC_BUILTIN_VEC_PERM, ALTIVEC_BUILTIN_VPERM_4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_unsigned_V16QI },\n   { ALTIVEC_BUILTIN_VEC_PERM, ALTIVEC_BUILTIN_VPERM_4SI,\n@@ -3003,6 +3040,12 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI },\n   { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_bool_V2DI },\n+  { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_unsigned_V2DI },\n   { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_bool_V4SI },\n   { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_4SF,\n@@ -3765,6 +3808,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_bool_V16QI, 0 },\n   { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n+  { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V16QI,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, 0 },\n   { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI,\n     RS6000_BTI_unsigned_V16QI, 0 },\n@@ -3780,6 +3825,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_bool_V8HI, 0 },\n   { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n+  { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V8HI,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, 0 },\n   { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_bool_V8HI,\n     RS6000_BTI_unsigned_V8HI, 0 },\n@@ -3795,6 +3842,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V4SI,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_bool_V4SI,\n     RS6000_BTI_unsigned_V4SI, 0 },\n@@ -3810,6 +3859,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { P8V_BUILTIN_VEC_EQV, P8V_BUILTIN_EQV_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_bool_V2DI,\n     RS6000_BTI_unsigned_V2DI, 0 },\n@@ -3839,6 +3890,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, 0 },\n+  { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V16QI,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, 0 },\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI, 0 },\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V8HI,\n@@ -3854,6 +3907,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n     RS6000_BTI_unsigned_V8HI, 0 },\n+  { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V8HI,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, 0 },\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI, 0 },\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V4SI,\n@@ -3869,6 +3924,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, 0 },\n+  { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V4SI,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V2DI,\n@@ -3884,6 +3941,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_unsigned_V2DI, 0 },\n+  { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { P8V_BUILTIN_VEC_NAND, P8V_BUILTIN_NAND_V2DF,\n@@ -3904,6 +3963,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, 0 },\n+  { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V16QI,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, 0 },\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI, 0 },\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V8HI,\n@@ -3919,6 +3980,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n     RS6000_BTI_unsigned_V8HI, 0 },\n+  { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V8HI,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, 0 },\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI, 0 },\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V4SI,\n@@ -3934,6 +3997,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, 0 },\n+  { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V4SI,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, 0 },\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V2DI,\n@@ -3949,6 +4014,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_unsigned_V2DI, 0 },\n+  { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { P8V_BUILTIN_VEC_ORC, P8V_BUILTIN_ORC_V2DF,\n@@ -3984,6 +4051,9 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_VBPERMQ, P8V_BUILTIN_VBPERMQ,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, 0 },\n+  { P8V_BUILTIN_VEC_VBPERMQ, P8V_BUILTIN_VBPERMQ,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V1TI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n \n   { P8V_BUILTIN_VEC_VCLZ, P8V_BUILTIN_VCLZB,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },"}, {"sha": "5ed17b92ecda0ea090af6bc165f1a40d22304910", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "patch": "@@ -1,3 +1,9 @@\n+2015-08-18  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n+\n+\t* gcc.target/powerpc/altivec-35.c: New test.\n+\t* gcc.target/powerpc/p8vector-builtin-8.c: New test.\n+\t* gcc.target/powerpc/vsx-vector-7.c: New test.\n+\n 2015-08-18  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR middle-end/36757"}, {"sha": "6217c9f966bcb56152a42a44ef734d1b86a63672", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-35.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-35.c?ref=29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -mno-vsx -mno-power8-vector -O0\" } */\n+\n+#include <altivec.h>\n+\n+/* Test Altivec built-ins added for version 1.1 of ELFv2 ABI.  */\n+\n+vector signed int vsia, vsib;\n+\n+void foo (vector signed int *vsir)\n+{\n+  *vsir++ = vec_addc (vsia, vsib);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddcuw\" 1 } } */"}, {"sha": "4554099b6a75a5c4733b3fe12b0164b9376b1940", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-8.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-8.c?ref=29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+/* Test POWER8 vector built-ins added for version 1.1 of ELFv2 ABI.  */\n+\n+vector unsigned char      vuca, vucb, vucc;\n+vector bool     char      vbca, vbcb;\n+vector bool     short     vbsa, vbsb;\n+vector bool     int       vbia, vbib;\n+vector signed   long long vsla, vslb;\n+vector unsigned long long vula, vulb, vulc;\n+vector bool     long long vbla, vblb, vblc;\n+vector signed   __int128  vsxa, vsxb, vsxc;\n+vector unsigned __int128  vuxa, vuxb, vuxc;\n+vector          double    vda,  vdb;\n+\n+void foo (vector unsigned char *vucr,\n+\t  vector bool char *vbcr,\n+\t  vector bool short *vbsr,\n+\t  vector bool int *vbir,\n+\t  vector unsigned long long *vulr,\n+\t  vector bool long long *vblr,\n+\t  vector signed __int128 *vsxr,\n+\t  vector unsigned __int128 *vuxr,\n+\t  vector double *vdr)\n+{\n+  *vsxr++ = vec_addc (vsxa, vsxb);\n+  *vuxr++ = vec_addc (vuxa, vuxb);\n+  *vsxr++ = vec_adde (vsxa, vsxb, vsxc);\n+  *vuxr++ = vec_adde (vuxa, vuxb, vuxc);\n+  *vsxr++ = vec_addec (vsxa, vsxb, vsxc);\n+  *vuxr++ = vec_addec (vuxa, vuxb, vuxc);\n+  *vulr++ = vec_bperm (vuxa, vucb);\n+  *vbcr++ = vec_eqv (vbca, vbcb);\n+  *vbir++ = vec_eqv (vbia, vbib);\n+  *vblr++ = vec_eqv (vbla, vblb);\n+  *vbsr++ = vec_eqv (vbsa, vbsb);\n+  *vucr++ = vec_gb (vuca);\n+  *vbcr++ = vec_nand (vbca, vbcb);\n+  *vbir++ = vec_nand (vbia, vbib);\n+  *vblr++ = vec_nand (vbla, vblb);\n+  *vbsr++ = vec_nand (vbsa, vbsb);\n+  *vbcr++ = vec_orc (vbca, vbcb);\n+  *vbir++ = vec_orc (vbia, vbib);\n+  *vblr++ = vec_orc (vbla, vblb);\n+  *vbsr++ = vec_orc (vbsa, vbsb);\n+  *vblr++ = vec_perm (vbla, vblb, vucc);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddcuq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vaddeuqm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vaddecuq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vbpermq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxleqv\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vgbbd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxlnand\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxlorc\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vperm\" 1 } } */\n+"}, {"sha": "66880fd4e1c96348980a58f113116fdef0a0afe0", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-7.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ec406adca6fe08d42b89f3fefd2c082fd3fe6d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-7.c?ref=29ec406adca6fe08d42b89f3fefd2c082fd3fe6d", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -mno-power8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+/* Test VSX built-ins added for version 1.1 of ELFv2 ABI.  */\n+\n+vector bool     long long vbla, vblb, vblc;\n+vector signed   long long vsla;\n+vector unsigned long long vula, vulc;\n+\n+void foo (vector bool long long *vblr,\n+\t  vector double *vdr)\n+{\n+  *vblr++ = vec_andc (vbla, vblb);\n+  *vdr++  = vec_double (vsla);\n+  *vdr++  = vec_double (vula);\n+  *vblr++ = vec_mergeh (vbla, vblb);\n+  *vblr++ = vec_mergel (vbla, vblb);\n+  *vblr++ = vec_nor (vbla, vblb);\n+  *vblr++ = vec_or (vbla, vblb);\n+  *vblr++ = vec_sel (vbla, vblb, vblc);\n+  *vblr++ = vec_sel (vbla, vblb, vulc);\n+  *vblr++ = vec_xor (vbla, vblb);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxlandc\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvcvsxddp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvcvuxddp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi .*,.*,.*,3\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi .*,.*,.*,0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxlor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxsel\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xxlxor\" 1 } } */"}]}