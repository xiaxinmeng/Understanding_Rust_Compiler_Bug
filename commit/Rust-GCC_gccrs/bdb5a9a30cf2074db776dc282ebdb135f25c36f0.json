{"sha": "bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRiNWE5YTMwY2YyMDc0ZGI3NzZkYzI4MmViZGIxMzVmMjVjMzZmMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-05-20T13:30:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-05-20T13:30:40Z"}, "message": "re PR c++/58664 ([c++11] ICE initializing array of incomplete type within union)\n\n/cp\n2014-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/58664\n\t* typeck2.c (cxx_incomplete_type_inform): New.\n\t(cxx_incomplete_type_diagnostic): Use it.\n\t* decl.c (grokdeclarator): Check the element type of an\n\tincomplete array type; call the above.\n\t* cp-tree.h (cxx_incomplete_type_inform): Declare.\n\n/testsuite\n2014-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/58664\n\t* g++.dg/cpp0x/nsdmi-union6.C: New.\n\t* g++.dg/parse/pr58664.C: Likewise.\n\t* g++.dg/cpp0x/nsdmi6.C: Tweak.\n\t* g++.dg/parse/crash31.C: Likewise.\n\t* g++.dg/template/error2.C: Likewise.\n\t* g++.dg/template/inherit8.C: Likewise.\n\t* g++.dg/template/offsetof2.C: Likewise.\n\nFrom-SVN: r210642", "tree": {"sha": "d29484697370877d0d243dce67d839ba214c6e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d29484697370877d0d243dce67d839ba214c6e9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/comments", "author": null, "committer": null, "parents": [{"sha": "e9ea51852552d10fda782a2892f735a85d183368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ea51852552d10fda782a2892f735a85d183368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ea51852552d10fda782a2892f735a85d183368"}], "stats": {"total": 193, "additions": 176, "deletions": 17}, "files": [{"sha": "b15a9c97b02eefed1b163d012f3d0da3a6dd7246", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -1,3 +1,12 @@\n+2014-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/58664\n+\t* typeck2.c (cxx_incomplete_type_inform): New.\n+\t(cxx_incomplete_type_diagnostic): Use it.\n+\t* decl.c (grokdeclarator): Check the element type of an\n+\tincomplete array type; call the above.\n+\t* cp-tree.h (cxx_incomplete_type_inform): Declare.\n+\n 2014-05-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/58761"}, {"sha": "32a8afbee6c7756cca9b481a9f84686971686894", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -6158,6 +6158,7 @@ extern void cxx_incomplete_type_diagnostic\t(const_tree, const_tree, diagnostic_t\n extern void cxx_incomplete_type_error\t\t(const_tree, const_tree);\n #define cxx_incomplete_type_error(V,T) \\\n   (cxx_incomplete_type_diagnostic ((V), (T), DK_ERROR))\n+extern void cxx_incomplete_type_inform \t        (const_tree);\n extern tree error_not_base_type\t\t\t(tree, tree);\n extern tree binfo_or_else\t\t\t(tree, tree);\n extern void cxx_readonly_error\t\t\t(tree, enum lvalue_use);"}, {"sha": "81f127315ec8de687956f4066fbb9a31aa152b39", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -10586,11 +10586,16 @@ grokdeclarator (const cp_declarator *declarator,\n \t  }\n \telse if (!staticp && !dependent_type_p (type)\n \t\t && !COMPLETE_TYPE_P (complete_type (type))\n-\t\t && (TREE_CODE (type) != ARRAY_TYPE || initialized == 0))\n+\t\t && (TREE_CODE (type) != ARRAY_TYPE\n+\t\t     || !COMPLETE_TYPE_P (TREE_TYPE (type))\n+\t\t     || initialized == 0))\n \t  {\n \t    if (unqualified_id)\n-\t      error (\"field %qD has incomplete type %qT\",\n-\t\t     unqualified_id, type);\n+\t      {\n+\t\terror (\"field %qD has incomplete type %qT\",\n+\t\t       unqualified_id, type);\n+\t\tcxx_incomplete_type_inform (strip_array_types (type));\n+\t      }\n \t    else\n \t      error (\"name %qT has incomplete type\", type);\n "}, {"sha": "72995e9f2e6173a54236a0fa9d7ad3380b3b2bd3", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -429,6 +429,25 @@ abstract_virtuals_error (abstract_class_use use, tree type)\n   return abstract_virtuals_error_sfinae (use, type, tf_warning_or_error);\n }\n \n+/* Print an inform about the declaration of the incomplete type TYPE.  */\n+\n+void\n+cxx_incomplete_type_inform (const_tree type)\n+{\n+  location_t loc = DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type));\n+  tree ptype = strip_top_quals (CONST_CAST_TREE (type));\n+\n+  if (current_class_type\n+      && TYPE_BEING_DEFINED (current_class_type)\n+      && same_type_p (ptype, current_class_type))\n+    inform (loc, \"definition of %q#T is not complete until \"\n+\t    \"the closing brace\", ptype);\n+  else if (!TYPE_TEMPLATE_INFO (ptype))\n+    inform (loc, \"forward declaration of %q#T\", ptype);\n+  else\n+    inform (loc, \"declaration of %q#T\", ptype);\n+}\n+\n /* Print an error message for invalid use of an incomplete type.\n    VALUE is the expression that was used (or 0 if that isn't known)\n    and TYPE is the type that was invalid.  DIAG_KIND indicates the\n@@ -469,14 +488,7 @@ cxx_incomplete_type_diagnostic (const_tree value, const_tree type,\n \t\t\t\t      \"invalid use of incomplete type %q#T\",\n \t\t\t\t      type);\n       if (complained)\n-\t{\n-      \t  if (!TYPE_TEMPLATE_INFO (type))\n-\t    inform (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type)),\n-\t\t    \"forward declaration of %q#T\", type);\n-\t  else\n-\t    inform (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type)),\n-\t\t    \"declaration of %q#T\", type);\n-\t}\n+\tcxx_incomplete_type_inform (type);\n       break;\n \n     case VOID_TYPE:"}, {"sha": "95ceb3927cae19497106c6f7cfd158229ca2d6e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -1,3 +1,14 @@\n+2014-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/58664\n+\t* g++.dg/cpp0x/nsdmi-union6.C: New.\n+\t* g++.dg/parse/pr58664.C: Likewise.\n+\t* g++.dg/cpp0x/nsdmi6.C: Tweak.\n+\t* g++.dg/parse/crash31.C: Likewise.\n+\t* g++.dg/template/error2.C: Likewise.\n+\t* g++.dg/template/inherit8.C: Likewise.\n+\t* g++.dg/template/offsetof2.C: Likewise.\n+\n 2014-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* c-c++-common/gomp/simd4.c: Adjust for inform."}, {"sha": "764fe21d610596d887a47e2775747bc73afad103", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-union6.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-union6.C?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -0,0 +1,56 @@\n+// PR c++/58664\n+// { dg-do compile { target c++11 } }\n+\n+struct F;          // { dg-message \"forward declaration\" }\n+\n+union U            // { dg-message \"not complete\" }\n+{\n+  U u[1] = { 0 };  // { dg-error \"incomplete type\" }\n+};\n+\n+template<typename T>\n+union UT           // { dg-message \"not complete\" }\n+{\n+  UT u[1] = { 0 }; // { dg-error \"incomplete type\" }\n+};\n+\n+template union UT<int>;\n+\n+union UF\n+{\n+  F u[1] = { 0 };  // { dg-error \"incomplete type\" }\n+};\n+\n+template<typename T>\n+union UFT\n+{\n+  F u[1] = { 0 };  // { dg-error \"incomplete type\" }\n+};\n+\n+template union UFT<int>;\n+\n+struct S           // { dg-message \"not complete\" }\n+{\n+  S s[1] = { 0 };  // { dg-error \"incomplete type\" }\n+};\n+\n+template<typename T>\n+struct ST          // { dg-message \"not complete\" }\n+{\n+  ST s[1] = { 0 }; // { dg-error \"incomplete type\" }\n+};\n+\n+template class ST<int>;\n+\n+struct SF\n+{\n+  F s[1] = { 0 };  // { dg-error \"incomplete type\" }\n+};\n+\n+template<typename T>\n+struct SFT\n+{\n+  F s[1] = { 0 };  // { dg-error \"incomplete type\" }\n+};\n+\n+template class SFT<int>;"}, {"sha": "f88a347426ad87347530058c12cd6686908e8191", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi6.C?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -4,5 +4,5 @@\n struct A\n {\n     typedef int int T; // { dg-error \"two or more data types in declaration\" }\n-    struct T x[1] = { 0 }; // { dg-error \"invalid|forward\" }\n+    struct T x[1] = { 0 }; // { dg-error \"incomplete type|forward\" }\n };"}, {"sha": "e7d6bdc146599546c1e95ba1d0a3d8325f3c0853", "filename": "gcc/testsuite/g++.dg/parse/crash31.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash31.C?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -1,4 +1,4 @@\n-struct A // { dg-message \"forward declaration\" }\n+struct A // { dg-message \"not complete\" }\n {\n   A : A; // { dg-error \"expected|incomplete\" }\n   A : B; // { dg-error \"not declared|incomplete\" }"}, {"sha": "489259a14a366eb198ec65cb317542e108ffbf7a", "filename": "gcc/testsuite/g++.dg/parse/pr58664.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr58664.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr58664.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr58664.C?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -0,0 +1,66 @@\n+// PR c++/58664\n+// { dg-do compile { target c++11 } }\n+\n+struct F;          // { dg-message \"forward declaration\" }\n+\n+union U            // { dg-message \"not complete\" }\n+{\n+  U u;             // { dg-error \"field 'u' has incomplete type 'U'\" }\n+};\n+\n+union CU           // { dg-message \"not complete\" }\n+{\n+  const CU u;      // { dg-error \"incomplete type\" }\n+};\n+\n+template<typename T>\n+union UT           // { dg-message \"not complete\" }\n+{\n+  UT u;            // { dg-error \"incomplete type\" }\n+};\n+\n+template union UT<int>;\n+\n+union UF\n+{\n+  F u;             // { dg-error \"field 'u' has incomplete type 'F'\" }\n+};\n+\n+template<typename T>\n+union UFT\n+{\n+  F u;             // { dg-error \"incomplete type\" }\n+};\n+\n+template union UFT<int>;\n+\n+struct S           // { dg-message \"not complete\" }\n+{\n+  S s;             // { dg-error \"field 's' has incomplete type 'S'\" }\n+};\n+\n+struct VS          // { dg-message \"not complete\" }\n+{\n+  volatile VS s;   // { dg-error \"incomplete type\" }\n+};\n+\n+template<typename T>\n+struct ST          // { dg-message \"not complete\" }\n+{\n+  ST s;            // { dg-error \"incomplete type\" }\n+};\n+\n+template class ST<int>;\n+\n+struct SF\n+{\n+  F s;             // { dg-error \"field 's' has incomplete type 'F'\" }\n+};\n+\n+template<typename T>\n+struct SFT\n+{\n+  F s;             // { dg-error \"incomplete type\" }\n+};\n+\n+template class SFT<int>;"}, {"sha": "a7f199e51e42c2b45f2c8b7523513c8a389d1d5a", "filename": "gcc/testsuite/g++.dg/template/error2.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -7,8 +7,7 @@\n \n template<class T> struct X\n {\n-  T m;\t// { dg-error \"void\" \"void\" }\n-\t// { dg-error \"incomplete type\" \"incomplete\" { target *-*-* } 10 }\n+  T m;\t// { dg-error \"incomplete type|invalid use\" }\n };\n \n template<class T >"}, {"sha": "62a0f1da1a99932dd1bffea1ed84f4fbd1712865", "filename": "gcc/testsuite/g++.dg/template/inherit8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit8.C?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -4,7 +4,7 @@ template <typename T>\n struct A\n {\n   template <typename U>\n-  struct B : public A <B<U> >\t// { dg-message \"declaration\" }\n+  struct B : public A <B<U> >\t// { dg-message \"not complete\" }\n   {\n     struct C : public B<U>\t// { dg-error \"incomplete\" }\n     {"}, {"sha": "3f08f9b0b8b0f59da60290cef3f18d30b12fa7f6", "filename": "gcc/testsuite/g++.dg/template/offsetof2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foffsetof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5a9a30cf2074db776dc282ebdb135f25c36f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foffsetof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foffsetof2.C?ref=bdb5a9a30cf2074db776dc282ebdb135f25c36f0", "patch": "@@ -1,7 +1,7 @@\n // PR c++/49085\n \n template <class T>\n-struct A\t\t\t// { dg-message \"declaration\" }\n+struct A\t\t\t// { dg-message \"not complete\" }\n {\n   int i, j;\n   int ar[__builtin_offsetof(A,j)]; // { dg-error \"incomplete type\" }"}]}