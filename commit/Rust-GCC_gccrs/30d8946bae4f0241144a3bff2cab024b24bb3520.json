{"sha": "30d8946bae4f0241144a3bff2cab024b24bb3520", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBkODk0NmJhZTRmMDI0MTE0NGEzYmZmMmNhYjAyNGIyNGJiMzUyMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-02-22T23:49:15Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-02-22T23:49:15Z"}, "message": "gcc.c (getenv_spec_function): New function.\n\n\t* gcc.c (getenv_spec_function): New function.\n\t(static_spec_functions): Add it.\n\t* config/vxworks.h (VXWORKS_TARGET_DIR): Remove.\n\t(VXWORKS_ADDITIONAL_CPP_SPEC): Use getenv to find the VxWorks\n\theader files.\n\nFrom-SVN: r122240", "tree": {"sha": "dcb598c670d33f19a370e00849a60a24d74c701c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcb598c670d33f19a370e00849a60a24d74c701c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30d8946bae4f0241144a3bff2cab024b24bb3520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d8946bae4f0241144a3bff2cab024b24bb3520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d8946bae4f0241144a3bff2cab024b24bb3520", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d8946bae4f0241144a3bff2cab024b24bb3520/comments", "author": null, "committer": null, "parents": [{"sha": "b69862d1ef8332ab49654ae0b83656a87964729b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b69862d1ef8332ab49654ae0b83656a87964729b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b69862d1ef8332ab49654ae0b83656a87964729b"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "f16b00580b8701373275575dc40651a08038d27d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d8946bae4f0241144a3bff2cab024b24bb3520/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d8946bae4f0241144a3bff2cab024b24bb3520/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30d8946bae4f0241144a3bff2cab024b24bb3520", "patch": "@@ -1,3 +1,11 @@\n+2007-02-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.c (getenv_spec_function): New function.\n+\t(static_spec_functions): Add it.\n+\t* config/vxworks.h (VXWORKS_TARGET_DIR): Remove.\n+\t(VXWORKS_ADDITIONAL_CPP_SPEC): Use getenv to find the VxWorks\n+\theader files.\n+\n 2007-02-22  Michael Matz  <matz@suse.de\n \n \tPR c++/29433"}, {"sha": "2d07b621969c12135ae6cc1d1cb7de40c44f9d49", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d8946bae4f0241144a3bff2cab024b24bb3520/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d8946bae4f0241144a3bff2cab024b24bb3520/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=30d8946bae4f0241144a3bff2cab024b24bb3520", "patch": "@@ -26,18 +26,21 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n    like a traditional Unix, with more external files.  Most of our specs\n    must be aware of the difference.  */\n \n-/* The directory containing the VxWorks target headers.  */\n-#define VXWORKS_TARGET_DIR  \"/home/tornado/base6/target\"\n+/* We look for the VxWorks header files using the environment\n+   variables that are set in VxWorks to indicate the location of the\n+   system header files.  We use -idirafter so that the GCC's own\n+   header-file directories (containing <stddef.h>, etc.) come before\n+   the VxWorks system header directories.  */\n \n /* Since we provide a default -isystem, expand -isystem on the command\n    line early.  */\n #undef VXWORKS_ADDITIONAL_CPP_SPEC\n #define VXWORKS_ADDITIONAL_CPP_SPEC \" \t\t\t\t\t\\\n  %{!nostdinc:%{isystem*}}\t\t\t\t\t\t\\\n  %{mrtp: -D__RTP__=1\t\t\t\t\t\t\t\\\n-\t %{!nostdinc:-isystem \" VXWORKS_TARGET_DIR \"/usr/h}}\t\t\\\n+\t %{!nostdinc:-idirafter %:getenv(WIND_USR /h)}}\t\t\t\\\n  %{!mrtp:-D_WRS_KERNEL=1\t\t\t\t\t\t\\\n-\t %{!nostdinc:-isystem \" VXWORKS_TARGET_DIR \"/h}}\"\n+ \t %{!nostdinc:-idirafter %:getenv(WIND_BASE /target/h)}}\"\n \n /* The references to __init and __fini will be satisfied by\n    libc_internal.a.  */"}, {"sha": "d2f479b22577655cfd787543369ab73d337c2c85", "filename": "gcc/gcc.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d8946bae4f0241144a3bff2cab024b24bb3520/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d8946bae4f0241144a3bff2cab024b24bb3520/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=30d8946bae4f0241144a3bff2cab024b24bb3520", "patch": "@@ -350,6 +350,7 @@ static void init_gcc_specs (struct obstack *, const char *, const char *,\n static const char *convert_filename (const char *, int, int);\n #endif\n \n+static const char *getenv_spec_function (int, const char **);\n static const char *if_exists_spec_function (int, const char **);\n static const char *if_exists_else_spec_function (int, const char **);\n static const char *replace_outfile_spec_function (int, const char **);\n@@ -1601,6 +1602,7 @@ static struct spec_list *specs = (struct spec_list *) 0;\n \n static const struct spec_function static_spec_functions[] =\n {\n+  { \"getenv\",                   getenv_spec_function },\n   { \"if-exists\",\t\tif_exists_spec_function },\n   { \"if-exists-else\",\t\tif_exists_else_spec_function },\n   { \"replace-outfile\",\t\treplace_outfile_spec_function },\n@@ -7645,6 +7647,27 @@ print_multilib_info (void)\n     }\n }\n \f\n+/* getenv built-in spec function.\n+\n+   Returns the value of the environment variable given by its first\n+   argument, concatenated with the second argument.  If the\n+   environment variable is not defined, a fatal error is issued.  */\n+\n+static const char *\n+getenv_spec_function (int argc, const char **argv)\n+{\n+  char *value;\n+\n+  if (argc != 2)\n+    return NULL;\n+\n+  value = getenv (argv[0]);\n+  if (!value)\n+    fatal (\"environment variable \\\"%s\\\" not defined\", argv[0]);\n+\n+  return concat (value, argv[1], NULL);\n+}\n+\n /* if-exists built-in spec function.\n \n    Checks to see if the file specified by the absolute pathname in"}]}