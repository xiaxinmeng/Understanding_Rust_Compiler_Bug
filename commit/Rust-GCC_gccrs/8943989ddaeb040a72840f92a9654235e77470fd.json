{"sha": "8943989ddaeb040a72840f92a9654235e77470fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0Mzk4OWRkYWViMDQwYTcyODQwZjkyYTk2NTQyMzVlNzc0NzBmZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-10-14T00:50:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-10-14T00:50:26Z"}, "message": "re PR c++/45984 (ICE: canonical types differ for identical types)\n\n\tPR c++/45984\n\t* class.c (fixup_attribute_variants): New fn.\n\t* cp-tree.h: Declare it.\n\t* pt.c (instantiate_class_template): Call it.\n\t* semantics.c (begin_class_definition): Call it.\n\nFrom-SVN: r165443", "tree": {"sha": "283b19d2c2c5d3a03c65074a0f46db161fb0c68e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/283b19d2c2c5d3a03c65074a0f46db161fb0c68e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8943989ddaeb040a72840f92a9654235e77470fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8943989ddaeb040a72840f92a9654235e77470fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8943989ddaeb040a72840f92a9654235e77470fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8943989ddaeb040a72840f92a9654235e77470fd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b477c9658b9e37d13e8c1978f2932e1821473339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b477c9658b9e37d13e8c1978f2932e1821473339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b477c9658b9e37d13e8c1978f2932e1821473339"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "ec897554a226e00079a0c96f83f26dcb9fff5dd0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8943989ddaeb040a72840f92a9654235e77470fd", "patch": "@@ -1,3 +1,11 @@\n+2010-10-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/45984\n+\t* class.c (fixup_attribute_variants): New fn.\n+\t* cp-tree.h: Declare it.\n+\t* pt.c (instantiate_class_template): Call it.\n+\t* semantics.c (begin_class_definition): Call it.\n+\n 2010-10-13  Richard Henderson  <rth@redhat.com>\n \n \t* cp-lang.c (cp_eh_personality): Update call to"}, {"sha": "f76c2bed3d8591fa5833c1d4915ce62d33863951", "filename": "gcc/cp/class.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8943989ddaeb040a72840f92a9654235e77470fd", "patch": "@@ -1515,12 +1515,31 @@ fixup_type_variants (tree t)\n       TYPE_VFIELD (variants) = TYPE_VFIELD (t);\n       TYPE_METHODS (variants) = TYPE_METHODS (t);\n       TYPE_FIELDS (variants) = TYPE_FIELDS (t);\n+    }\n+}\n+\n+/* Early variant fixups: we apply attributes at the beginning of the class\n+   definition, and we need to fix up any variants that have already been\n+   made via elaborated-type-specifier so that check_qualified_type works.  */\n+\n+void\n+fixup_attribute_variants (tree t)\n+{\n+  tree variants;\n \n-      /* All variants of a class have the same attributes.  */\n+  if (!t)\n+    return;\n+\n+  for (variants = TYPE_NEXT_VARIANT (t);\n+       variants;\n+       variants = TYPE_NEXT_VARIANT (variants))\n+    {\n+      /* These are the two fields that check_qualified_type looks at and\n+\t are affected by attributes.  */\n       TYPE_ATTRIBUTES (variants) = TYPE_ATTRIBUTES (t);\n+      TYPE_ALIGN (variants) = TYPE_ALIGN (t);\n     }\n }\n-\n \f\n /* Set memoizing fields and bits of T (and its variants) for later\n    use.  */"}, {"sha": "29a4bdb01ca71ab63ec8971d1bbaebe5f1680195", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8943989ddaeb040a72840f92a9654235e77470fd", "patch": "@@ -4711,6 +4711,7 @@ extern bool type_has_move_assign\t\t(tree);\n extern void defaulted_late_check\t\t(tree);\n extern bool defaultable_fn_check\t\t(tree);\n extern void fixup_type_variants\t\t\t(tree);\n+extern void fixup_attribute_variants\t\t(tree);\n extern tree* decl_cloned_function_p\t\t(const_tree, bool);\n extern void clone_function_decl\t\t\t(tree, int);\n extern void adjust_clone_args\t\t\t(tree);"}, {"sha": "9ddb4fd465c012b3ab1b03ee517e48dce4871a76", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8943989ddaeb040a72840f92a9654235e77470fd", "patch": "@@ -7943,6 +7943,7 @@ instantiate_class_template (tree type)\n   apply_late_template_attributes (&type, TYPE_ATTRIBUTES (pattern),\n \t\t\t\t  (int) ATTR_FLAG_TYPE_IN_PLACE,\n \t\t\t\t  args, tf_error, NULL_TREE);\n+  fixup_attribute_variants (type);\n \n   /* Now that our base classes are set up, enter the scope of the\n      class, so that name lookups into base classes, etc. will work"}, {"sha": "787c72c17fc3329675168fc5613840e04fce3d6d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8943989ddaeb040a72840f92a9654235e77470fd", "patch": "@@ -2391,6 +2391,7 @@ begin_class_definition (tree t, tree attributes)\n   TYPE_BEING_DEFINED (t) = 1;\n \n   cplus_decl_attributes (&t, attributes, (int) ATTR_FLAG_TYPE_IN_PLACE);\n+  fixup_attribute_variants (t);\n \n   if (flag_pack_struct)\n     {"}, {"sha": "e7d06f0be0b5a4321c33dc457b6f8d1bfa8c9106", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8943989ddaeb040a72840f92a9654235e77470fd", "patch": "@@ -1,3 +1,7 @@\n+2010-10-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/template/canon-type-8.C: New.\n+\n 2010-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/execute/20101013-1.c: New test."}, {"sha": "fd1fe3ce36291a5ac1f19e36f297906c2702fe31", "filename": "gcc/testsuite/g++.dg/template/canon-type-8.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8943989ddaeb040a72840f92a9654235e77470fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-8.C?ref=8943989ddaeb040a72840f92a9654235e77470fd", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/45984\n+// We were getting different canonical types for matching types because\n+// TYPE_ALIGN wasn't propagated to all the variants fast enough.\n+// { dg-options \"\" }\n+\n+typedef __SIZE_TYPE__ size_t;\n+enum { chunk_size = 16 };\n+typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+struct __attribute__((aligned((16)))) float4_t {\n+    typedef float scalar_t;\n+    typedef __m128 type_t;\n+    typedef float4_t return_type_t;\n+    type_t m;\n+    inline __attribute__((artificial, gnu_inline, always_inline)) explicit\n+    float4_t(scalar_t a) : m(((__m128) (__v4sf) { (a), (a), (a), (a) })) { }\n+    inline __attribute__((artificial, gnu_inline, always_inline, pure)) friend\n+    return_type_t operator+(float4_t lhs, float4_t rhs) { }\n+};\n+template<size_t NumChans>  class __attribute__((aligned((16)))) chunk_array_t {\n+public:\n+    typedef float4_t value_type_t;\n+    typedef value_type_t value_array_t[chunk_size/4];\n+    enum { num_scalars = chunk_size,    num_values = num_scalars/4  };\n+    const value_array_t &chan(size_t c) const { }\n+    value_type_t operator[](size_t i) const { }\n+};\n+typedef chunk_array_t<1> chunk_array_mono_t;\n+typedef chunk_array_t<2> chunk_array_stereo_t;\n+class freeverb_stereo_t {\n+    void process(const chunk_array_stereo_t & __restrict__ src,\n+                 chunk_array_stereo_t & __restrict__ dst) {\n+        enum { chunk_size = chunk_array_t<1>::num_values };\n+        chunk_array_mono_t mix;\n+        for (size_t i=0; i<chunk_size; ++i)\n+          mix[i] = src.chan(0)[i] + src.chan(1)[i];\n+    }\n+};"}]}