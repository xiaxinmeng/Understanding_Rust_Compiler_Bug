{"sha": "775192706061030d927945619d3a41c5825e455d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc1MTkyNzA2MDYxMDMwZDkyNzk0NTYxOWQzYTQxYzU4MjVlNDU1ZA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-01-11T08:51:09Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-01-11T08:51:09Z"}, "message": "[Ada] Finding proper scope when inside entry body\n\nThis patch modifies routine Find_Enclosing_Scope which obtains the scope of an\narbitrary node to return the unique defining entity of an enclosing body. This\nautomatically takes care of the following corner cases:\n\n   * The body is a subprogram body which does not complete a previous\n     declaration. In this case the proper scope is the entity of the\n     body.\n\n   * The body is an entry body. Due to a limitation in the AST, the\n     entry body does not store its correcponsing spec, but utilizes a\n     roundabout way of obtaining it. Regardless of the limitation, the\n     proper scope is the entity of the entry declaration.\n\nThe issue was discovered during the development of the GNATprove tool and\nis not visible to end users. No simple test is available because this would\nrequire a debug session.\n\n2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.adb (Find_Enclosing_Scope): Return the unique defining\n\tentity when the enclosing construct is a body.\n\nFrom-SVN: r256489", "tree": {"sha": "ead74251977d1087036b9eaa9f080a27fb8b4055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ead74251977d1087036b9eaa9f080a27fb8b4055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/775192706061030d927945619d3a41c5825e455d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/775192706061030d927945619d3a41c5825e455d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/775192706061030d927945619d3a41c5825e455d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/775192706061030d927945619d3a41c5825e455d/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a40d994753b00e453f5b97686bebed73e7de6692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40d994753b00e453f5b97686bebed73e7de6692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a40d994753b00e453f5b97686bebed73e7de6692"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "d05467d69f96d63b819f123187fa4625ca3a3600", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775192706061030d927945619d3a41c5825e455d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775192706061030d927945619d3a41c5825e455d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=775192706061030d927945619d3a41c5825e455d", "patch": "@@ -1,3 +1,8 @@\n+2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.adb (Find_Enclosing_Scope): Return the unique defining\n+\tentity when the enclosing construct is a body.\n+\n 2018-01-11  Patrick Bernardi  <bernardi@adacore.com>\n \n \t* exp_ch9.adb (Expand_N_Task_Type_Declaration): Simplified"}, {"sha": "c1e16e3037a0206d606fb123ca66e63be46650c0", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775192706061030d927945619d3a41c5825e455d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775192706061030d927945619d3a41c5825e455d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=775192706061030d927945619d3a41c5825e455d", "patch": "@@ -7847,8 +7847,7 @@ package body Sem_Util is\n    --------------------------\n \n    function Find_Enclosing_Scope (N : Node_Id) return Entity_Id is\n-      Par     : Node_Id;\n-      Spec_Id : Entity_Id;\n+      Par : Node_Id;\n \n    begin\n       --  Examine the parent chain looking for a construct which defines a\n@@ -7877,30 +7876,16 @@ package body Sem_Util is\n                return Defining_Entity (Par);\n \n             --  The construct denotes a body, the proper scope is the entity of\n-            --  the corresponding spec.\n+            --  the corresponding spec or that of the body if the body does not\n+            --  complete a previous declaration.\n \n             when N_Entry_Body\n                | N_Package_Body\n                | N_Protected_Body\n                | N_Subprogram_Body\n                | N_Task_Body\n             =>\n-               Spec_Id := Corresponding_Spec (Par);\n-\n-               --  The defining entity of a stand-alone subprogram body defines\n-               --  a scope.\n-\n-               if Nkind (Par) = N_Subprogram_Body and then No (Spec_Id) then\n-                  return Defining_Entity (Par);\n-\n-               --  Otherwise there should be corresponding spec which defines a\n-               --  scope.\n-\n-               else\n-                  pragma Assert (Present (Spec_Id));\n-\n-                  return Spec_Id;\n-               end if;\n+               return Unique_Defining_Entity (Par);\n \n             --  Special cases\n "}]}