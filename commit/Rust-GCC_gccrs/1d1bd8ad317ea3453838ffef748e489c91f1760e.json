{"sha": "1d1bd8ad317ea3453838ffef748e489c91f1760e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQxYmQ4YWQzMTdlYTM0NTM4MzhmZmVmNzQ4ZTQ4OWM5MWYxNzYwZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T13:24:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T13:24:46Z"}, "message": "[multiple changes]\n\n2009-07-22  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_tss.ads, sem_eval.adb: Minor reformatting\n\n2009-07-22  Bob Duff  <duff@adacore.com>\n\n\t* exp_dist.adb, exp_dist.ads: Update comments.\n\nFrom-SVN: r149933", "tree": {"sha": "b6ae0e33c37eba57af5dfd207859376789043227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6ae0e33c37eba57af5dfd207859376789043227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d1bd8ad317ea3453838ffef748e489c91f1760e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d1bd8ad317ea3453838ffef748e489c91f1760e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d1bd8ad317ea3453838ffef748e489c91f1760e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d1bd8ad317ea3453838ffef748e489c91f1760e/comments", "author": null, "committer": null, "parents": [{"sha": "09494c325c52f55c72ab1448371ab03d25e13c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09494c325c52f55c72ab1448371ab03d25e13c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09494c325c52f55c72ab1448371ab03d25e13c50"}], "stats": {"total": 108, "additions": 57, "deletions": 51}, "files": [{"sha": "1c0d5002f3300a54c0eee852de0294752c28b6c9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1bd8ad317ea3453838ffef748e489c91f1760e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1bd8ad317ea3453838ffef748e489c91f1760e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1d1bd8ad317ea3453838ffef748e489c91f1760e", "patch": "@@ -1,3 +1,11 @@\n+2009-07-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_tss.ads, sem_eval.adb: Minor reformatting\n+\n+2009-07-22  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_dist.adb, exp_dist.ads: Update comments.\n+\n 2009-07-22  Brett Porter  <porter@adacore.com>\n \n \t* init.c (__gnat_init_float): For SPE, set bits in SPEFSCR instead of"}, {"sha": "6a653654800f348ac986f17de2085caef07054d5", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1bd8ad317ea3453838ffef748e489c91f1760e/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1bd8ad317ea3453838ffef748e489c91f1760e/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=1d1bd8ad317ea3453838ffef748e489c91f1760e", "patch": "@@ -64,10 +64,10 @@ package body Exp_Dist is\n \n    --  is built. This type has two properties:\n \n-   --    1) Since it has the same structure than RACW_Stub_Type, it can\n+   --    1) Since it has the same structure as RACW_Stub_Type, it can\n    --       be converted to and from this type to make it suitable for\n    --       System.Partition_Interface.Get_Unique_Remote_Pointer in order\n-   --       to avoid memory leaks when the same remote object arrive on the\n+   --       to avoid memory leaks when the same remote object arrives on the\n    --       same partition through several paths;\n \n    --    2) It also has the same dispatching table as the designated type D,\n@@ -99,7 +99,7 @@ package body Exp_Dist is\n \n    function Hash (F : Name_Id) return Hash_Index;\n    --  The generation of subprogram identifiers requires an overload counter\n-   --  to be associated with each remote subprogram names. These counters are\n+   --  to be associated with each remote subprogram name. These counters are\n    --  maintained in a hash table on name ids.\n \n    type Subprogram_Identifiers is record\n@@ -170,10 +170,9 @@ package body Exp_Dist is\n    function Build_Remote_Subprogram_Proxy_Type\n      (Loc            : Source_Ptr;\n       ACR_Expression : Node_Id) return Node_Id;\n-   --  Build and return a tagged record type definition for an RCI\n-   --  subprogram proxy type.\n-   --  ACR_Expression is use as the initialization value for\n-   --  the All_Calls_Remote component.\n+   --  Build and return a tagged record type definition for an RCI subprogram\n+   --  proxy type. ACR_Expression is used as the initialization value for the\n+   --  All_Calls_Remote component.\n \n    function Build_Get_Unique_RP_Call\n      (Loc       : Source_Ptr;\n@@ -200,13 +199,13 @@ package body Exp_Dist is\n       New_Name                 : Name_Id   := No_Name) return Node_Id;\n    --  Build the calling stub for a given subprogram with the subprogram ID\n    --  being Subp_Id. If Stub_Type is given, then the \"addr\" field of\n-   --  parameters of this type will be marshalled instead of the object\n-   --  itself. It will then be converted into Stub_Type before performing\n-   --  the real call. If Dynamically_Asynchronous is True, then it will be\n-   --  computed at run time whether the call is asynchronous or not.\n-   --  Otherwise, the value of the formal Asynchronous will be used.\n-   --  If Locator is not Empty, it will be used instead of RCI_Cache. If\n-   --  New_Name is given, then it will be used instead of the original name.\n+   --  parameters of this type will be marshalled instead of the object itself.\n+   --  It will then be converted into Stub_Type before performing the real\n+   --  call. If Dynamically_Asynchronous is True, then it will be computed at\n+   --  run time whether the call is asynchronous or not. Otherwise, the value\n+   --  of the formal Asynchronous will be used. If Locator is not Empty, it\n+   --  will be used instead of RCI_Cache. If New_Name is given, then it will\n+   --  be used instead of the original name.\n \n    function Build_RPC_Receiver_Specification\n      (RPC_Receiver      : Entity_Id;\n@@ -233,7 +232,7 @@ package body Exp_Dist is\n \n    function Could_Be_Asynchronous (Spec : Node_Id) return Boolean;\n    --  Return True if nothing prevents the program whose specification is\n-   --  given to be asynchronous (i.e. no out parameter).\n+   --  given to be asynchronous (i.e. no [IN] OUT parameters).\n \n    function Pack_Entity_Into_Stream_Access\n      (Loc    : Source_Ptr;"}, {"sha": "ff1c343ec695bfb32cc1fbc91304ab3d31de1e01", "filename": "gcc/ada/exp_dist.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1bd8ad317ea3453838ffef748e489c91f1760e/gcc%2Fada%2Fexp_dist.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1bd8ad317ea3453838ffef748e489c91f1760e/gcc%2Fada%2Fexp_dist.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.ads?ref=1d1bd8ad317ea3453838ffef748e489c91f1760e", "patch": "@@ -58,7 +58,7 @@ package Exp_Dist is\n       Body_Decls      : List_Id);\n    --  Add primitive for the stub type, and the RPC receiver. The declarations\n    --  are inserted after Insertion_Node, while the bodies are appended at the\n-   --  end of Decls.\n+   --  end of Body_Decls.\n \n    procedure Remote_Types_Tagged_Full_View_Encountered\n      (Full_View : Entity_Id);\n@@ -75,13 +75,13 @@ package Exp_Dist is\n    --  at the end of the compilation unit, which is a package spec.\n \n    procedure Expand_Receiving_Stubs_Bodies (Unit_Node : Node_Id);\n-   --  Call the expansion phase for the calling stubs. The code will be added\n+   --  Call the expansion phase for the receiving stubs. The code will be added\n    --  at the end of the compilation unit, which may be either a package spec\n    --  or a package body.\n \n    procedure Expand_All_Calls_Remote_Subprogram_Call (N : Node_Id);\n    --  Rewrite a call to a subprogram located in a Remote_Call_Interface\n-   --  package on which the pragma All_Calls_Remote applies so that it\n+   --  package to which the pragma All_Calls_Remote applies so that it\n    --  goes through the PCS. N is either an N_Procedure_Call_Statement\n    --  or an N_Function_Call node.\n "}, {"sha": "07415fcf71f0d4df0350c6a79cfcdaf0f6b499bb", "filename": "gcc/ada/exp_tss.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1bd8ad317ea3453838ffef748e489c91f1760e/gcc%2Fada%2Fexp_tss.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1bd8ad317ea3453838ffef748e489c91f1760e/gcc%2Fada%2Fexp_tss.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.ads?ref=1d1bd8ad317ea3453838ffef748e489c91f1760e", "patch": "@@ -72,8 +72,8 @@ package Exp_Tss is\n \n    --  The following codes are used to denote TSSs:\n \n-   --  Note: When making additions to this list, update the list in\n-   --  snames.adb-tmpl\n+   --  Note: When making additions to this list, make the corresponding change\n+   --  to the list in snames.adb-tmpl.\n \n    type TSS_Name_Type is new String (1 .. 2);\n    subtype TNT is TSS_Name_Type;"}, {"sha": "303f66e7888ee3e7b265e8bc51358f6128c058b7", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d1bd8ad317ea3453838ffef748e489c91f1760e/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d1bd8ad317ea3453838ffef748e489c91f1760e/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=1d1bd8ad317ea3453838ffef748e489c91f1760e", "patch": "@@ -1953,11 +1953,11 @@ package body Sem_Eval is\n       T : constant Entity_Id := Etype (N);\n \n       function In_Any_Integer_Context return Boolean;\n-      --  If the literal is resolved with a specific type in a context\n-      --  where the expected type is Any_Integer, there are no range checks\n-      --  on the literal. By the time the literal is evaluated, it carries\n-      --  the type imposed by the enclosing expression, and we must recover\n-      --  the context to determine that Any_Integer is meant.\n+      --  If the literal is resolved with a specific type in a context where\n+      --  the expected type is Any_Integer, there are no range checks on the\n+      --  literal. By the time the literal is evaluated, it carries the type\n+      --  imposed by the enclosing expression, and we must recover the context\n+      --  to determine that Any_Integer is meant.\n \n       ----------------------------\n       -- In_Any_Integer_Context --\n@@ -1969,8 +1969,8 @@ package body Sem_Eval is\n \n       begin\n          --  Any_Integer also appears in digits specifications for real types,\n-         --  but those have bounds smaller that those of any integer base\n-         --  type, so we can safely ignore these cases.\n+         --  but those have bounds smaller that those of any integer base type,\n+         --  so we can safely ignore these cases.\n \n          return    K = N_Number_Declaration\n            or else K = N_Attribute_Reference\n@@ -1984,9 +1984,9 @@ package body Sem_Eval is\n    begin\n \n       --  If the literal appears in a non-expression context, then it is\n-      --  certainly appearing in a non-static context, so check it. This\n-      --  is actually a redundant check, since Check_Non_Static_Context\n-      --  would check it, but it seems worth while avoiding the call.\n+      --  certainly appearing in a non-static context, so check it. This is\n+      --  actually a redundant check, since Check_Non_Static_Context would\n+      --  check it, but it seems worth while avoiding the call.\n \n       if Nkind (Parent (N)) not in N_Subexpr\n         and then not In_Any_Integer_Context\n@@ -2089,9 +2089,9 @@ package body Sem_Eval is\n    -- Eval_Membership_Op --\n    ------------------------\n \n-   --  A membership test is potentially static if the expression is static,\n-   --  and the range is a potentially static range, or is a subtype mark\n-   --  denoting a static subtype (RM 4.9(12)).\n+   --  A membership test is potentially static if the expression is static, and\n+   --  the range is a potentially static range, or is a subtype mark denoting a\n+   --  static subtype (RM 4.9(12)).\n \n    procedure Eval_Membership_Op (N : Node_Id) is\n       Left   : constant Node_Id := Left_Opnd (N);\n@@ -2104,8 +2104,8 @@ package body Sem_Eval is\n       Fold   : Boolean;\n \n    begin\n-      --  Ignore if error in either operand, except to make sure that\n-      --  Any_Type is properly propagated to avoid junk cascaded errors.\n+      --  Ignore if error in either operand, except to make sure that Any_Type\n+      --  is properly propagated to avoid junk cascaded errors.\n \n       if Etype (Left) = Any_Type\n         or else Etype (Right) = Any_Type\n@@ -2132,8 +2132,7 @@ package body Sem_Eval is\n             return;\n          end if;\n \n-         --  For string membership tests we will check the length\n-         --  further below.\n+         --  For string membership tests we will check the length further on\n \n          if not Is_String_Type (Def_Id) then\n             Lo := Type_Low_Bound (Def_Id);\n@@ -2189,8 +2188,8 @@ package body Sem_Eval is\n             end;\n          end if;\n \n-      --  Fold the membership test. We know we have a static range and Lo\n-      --  and Hi are set to the expressions for the end points of this range.\n+      --  Fold the membership test. We know we have a static range and Lo and\n+      --  Hi are set to the expressions for the end points of this range.\n \n       elsif Is_Real_Type (Etype (Right)) then\n          declare\n@@ -2357,10 +2356,10 @@ package body Sem_Eval is\n          Typ  : constant Entity_Id := Etype (N);\n \n       begin\n-         --  Negation is equivalent to subtracting from the modulus minus\n-         --  one. For a binary modulus this is equivalent to the ones-\n-         --  component of the original value. For non-binary modulus this\n-         --  is an arbitrary but consistent definition.\n+         --  Negation is equivalent to subtracting from the modulus minus one.\n+         --  For a binary modulus this is equivalent to the ones-complement of\n+         --  the original value. For non-binary modulus this is an arbitrary\n+         --  but consistent definition.\n \n          if Is_Modular_Integer_Type (Typ) then\n             Fold_Uint (N, Modulus (Typ) - 1 - Rint, Stat);\n@@ -2390,7 +2389,7 @@ package body Sem_Eval is\n       Hex  : Boolean;\n \n    begin\n-      --  Can only fold if target is string or scalar and subtype is static\n+      --  Can only fold if target is string or scalar and subtype is static.\n       --  Also, do not fold if our parent is an allocator (this is because\n       --  the qualified expression is really part of the syntactic structure\n       --  of an allocator, and we do not want to end up with something that\n@@ -2402,8 +2401,8 @@ package body Sem_Eval is\n       then\n          Check_Non_Static_Context (Operand);\n \n-         --  If operand is known to raise constraint_error, set the\n-         --  flag on the expression so it does not get optimized away.\n+         --  If operand is known to raise constraint_error, set the flag on the\n+         --  expression so it does not get optimized away.\n \n          if Nkind (Operand) = N_Raise_Constraint_Error then\n             Set_Raises_Constraint_Error (N);\n@@ -2480,9 +2479,9 @@ package body Sem_Eval is\n       PK : constant Node_Kind := Nkind (Parent (N));\n \n    begin\n-      --  If the literal appears in a non-expression context\n-      --  and not as part of a number declaration, then it is\n-      --  appearing in a non-static context, so check it.\n+      --  If the literal appears in a non-expression context and not as part of\n+      --  a number declaration, then it is appearing in a non-static context,\n+      --  so check it.\n \n       if PK not in N_Subexpr and then PK /= N_Number_Declaration then\n          Check_Non_Static_Context (N);\n@@ -2529,8 +2528,8 @@ package body Sem_Eval is\n \n          Length_Mismatch : declare\n             procedure Get_Static_Length (Op : Node_Id; Len : out Uint);\n-            --  If Op is an expression for a constrained array with a known\n-            --  at compile time length, then Len is set to this (non-negative\n+            --  If Op is an expression for a constrained array with a known at\n+            --  compile time length, then Len is set to this (non-negative\n             --  length). Otherwise Len is set to minus 1.\n \n             -----------------------"}]}