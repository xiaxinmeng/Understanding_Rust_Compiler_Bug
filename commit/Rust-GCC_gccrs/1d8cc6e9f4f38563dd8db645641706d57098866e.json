{"sha": "1d8cc6e9f4f38563dd8db645641706d57098866e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ4Y2M2ZTlmNGYzODU2M2RkOGRiNjQ1NjQxNzA2ZDU3MDk4ODY2ZQ==", "commit": {"author": {"name": "Klaus-Georg Adams", "email": "Klaus-Georg.Adams@chemie.uni-karlsruhe.de", "date": "1998-07-10T08:03:35Z"}, "committer": {"name": "Robert Lipe", "email": "robertl@gcc.gnu.org", "date": "1998-07-10T08:03:35Z"}, "message": "singleton.C: New test.\n\n\t*  g++.other/singleton.C: New test.   Warning is under dispute.\n\tRuntime crash is not.\n\nFrom-SVN: r21050", "tree": {"sha": "3437a183b759b69f84e1627b5254793f4f438828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3437a183b759b69f84e1627b5254793f4f438828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d8cc6e9f4f38563dd8db645641706d57098866e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8cc6e9f4f38563dd8db645641706d57098866e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d8cc6e9f4f38563dd8db645641706d57098866e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8cc6e9f4f38563dd8db645641706d57098866e/comments", "author": null, "committer": null, "parents": [{"sha": "03c5634a9d1c7bf019f539770fe4a16304315402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c5634a9d1c7bf019f539770fe4a16304315402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03c5634a9d1c7bf019f539770fe4a16304315402"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "9fe92bd055f0c8d2edb93001846fa4fc3b1df969", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8cc6e9f4f38563dd8db645641706d57098866e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8cc6e9f4f38563dd8db645641706d57098866e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d8cc6e9f4f38563dd8db645641706d57098866e", "patch": "@@ -1,3 +1,8 @@\n+Fri Jul 10 10:02:03 1998  Klaus-Georg Adams <Klaus-Georg.Adams@chemie.uni-karlsruhe.de> \n+\n+\t*  g++.other/singleton.C: New test.   Warning is under dispute.\n+\tRuntime crash is not.\n+\n Thu Jul  9 23:07:45 1998  Martin von Loewis <martin@mira.isdn.cs.tu-berlin.de>\n \n \t* g++.ns/{alias2.C, alias5.C, koenig4.C, lookup3.C ns13.C, "}, {"sha": "32722c31373f02138c113cf19ea703965d94cb1a", "filename": "gcc/testsuite/g++.old-deja/g++.other/singleton.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8cc6e9f4f38563dd8db645641706d57098866e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsingleton.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8cc6e9f4f38563dd8db645641706d57098866e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsingleton.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsingleton.C?ref=1d8cc6e9f4f38563dd8db645641706d57098866e", "patch": "@@ -0,0 +1,38 @@\n+// This tests two things:\n+// 1. there is an annoying warning. singleton.C:27: warning: `class\n+// singleton' only defines private constructors and has no friends egcs\n+// fails to see that there is a public static accessor function.\n+// 2. the program crashes, because apparently the static variable s in\n+// singleton::instance() is considered constructed although the ctor\n+// exited via an exception.\n+\n+class singleton {\n+public:\n+       static singleton& instance() {\n+               static singleton s;\n+               return s;\n+       }\n+       ~singleton() { delete sigsegv; }\n+       int crash() { return *sigsegv; }\n+\n+private:\n+       singleton() : sigsegv(0) {\n+               if ( counter++ == 0 ) throw \"just for the heck of it\";\n+               sigsegv = new int(0);\n+       }\n+       singleton( const singleton& rhs );\n+       void operator=( const singleton& rhs );\n+       int* sigsegv;\n+       static int counter;\n+};\n+\n+int singleton::counter;\n+\n+int main()\n+{\n+       while (1) {\n+               try {\n+                       return singleton::instance().crash();\n+               } catch (...) { }\n+       }\n+}"}]}