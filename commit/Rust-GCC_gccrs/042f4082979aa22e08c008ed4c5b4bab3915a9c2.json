{"sha": "042f4082979aa22e08c008ed4c5b4bab3915a9c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQyZjQwODI5NzlhYTIyZTA4YzAwOGVkNGM1YjRiYWIzOTE1YTljMg==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2020-06-03T09:15:14Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2020-06-11T08:26:42Z"}, "message": "vect: Rename can_fully_mask_p to can_use_partial_vectors_p\n\nPower supports vector memory access with length (in bytes) instructions.\nLike existing fully masking for SVE, it is another approach to vectorize\nthe loop using partially-populated vectors.\n\nAs Richard Sandiford pointed out, we should extend the existing flag\ncan_fully_mask_p to be more generic, to indicate whether we have\nany chances with partial vectors for this loop.  So this patch\nis to rename this flag to can_use_partial_vectors_p to be more\nmeaningful, also rename the macro LOOP_VINFO_CAN_FULLY_MASK_P\nto LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P.\n\nBootstrapped/regtested on aarch64-linux-gnu.\n\ngcc/ChangeLog:\n\n\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Rename\n\tcan_fully_mask_p to can_use_partial_vectors_p.\n\t(vect_analyze_loop_2): Rename LOOP_VINFO_CAN_FULLY_MASK_P to\n\tLOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P.  Rename saved_can_fully_mask_p\n\tto saved_can_use_partial_vectors_p.\n\t(vectorizable_reduction): Rename LOOP_VINFO_CAN_FULLY_MASK_P to\n\tLOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P.\n\t(vectorizable_live_operation): Likewise.\n\t* tree-vect-stmts.c (permute_vec_elements): Likewise.\n\t(check_load_store_masking): Likewise.\n\t(vectorizable_operation): Likewise.\n\t(vectorizable_store): Likewise.\n\t(vectorizable_load): Likewise.\n\t(vectorizable_condition): Likewise.\n\t* tree-vectorizer.h (LOOP_VINFO_CAN_FULLY_MASK_P): Renamed to ...\n\t(LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P): ... this.\n\t(_loop_vec_info): Rename can_fully_mask_p to can_use_partial_vectors_p.", "tree": {"sha": "a5de78d0a2e113b7c07db9bd5912d66c0da75edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5de78d0a2e113b7c07db9bd5912d66c0da75edd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/042f4082979aa22e08c008ed4c5b4bab3915a9c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/042f4082979aa22e08c008ed4c5b4bab3915a9c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/042f4082979aa22e08c008ed4c5b4bab3915a9c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/042f4082979aa22e08c008ed4c5b4bab3915a9c2/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff57396d6dea4976b05902919070aa0e562354d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff57396d6dea4976b05902919070aa0e562354d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff57396d6dea4976b05902919070aa0e562354d"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "cec903de047ad8833f74487ba6795a400b057309", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042f4082979aa22e08c008ed4c5b4bab3915a9c2/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042f4082979aa22e08c008ed4c5b4bab3915a9c2/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=042f4082979aa22e08c008ed4c5b4bab3915a9c2", "patch": "@@ -814,7 +814,7 @@ _loop_vec_info::_loop_vec_info (class loop *loop_in, vec_info_shared *shared)\n     vec_outside_cost (0),\n     vec_inside_cost (0),\n     vectorizable (false),\n-    can_fully_mask_p (true),\n+    can_use_partial_vectors_p (true),\n     fully_masked_p (false),\n     peeling_for_gaps (false),\n     peeling_for_niter (false),\n@@ -2061,7 +2061,8 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n       vect_optimize_slp (loop_vinfo);\n     }\n \n-  bool saved_can_fully_mask_p = LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo);\n+  bool saved_can_use_partial_vectors_p\n+    = LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo);\n \n   /* We don't expect to have to roll back to anything other than an empty\n      set of rgroups.  */\n@@ -2146,7 +2147,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n   /* Decide whether to use a fully-masked loop for this vectorization\n      factor.  */\n   LOOP_VINFO_FULLY_MASKED_P (loop_vinfo)\n-    = (LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo)\n+    = (LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo)\n        && vect_verify_full_masking (loop_vinfo));\n   if (dump_enabled_p ())\n     {\n@@ -2383,7 +2384,8 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n   LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo) = false;\n   LOOP_VINFO_COST_MODEL_THRESHOLD (loop_vinfo) = 0;\n   LOOP_VINFO_VERSIONING_THRESHOLD (loop_vinfo) = 0;\n-  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = saved_can_fully_mask_p;\n+  LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo)\n+    = saved_can_use_partial_vectors_p;\n \n   goto start_over;\n }\n@@ -6778,7 +6780,7 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n       STMT_VINFO_DEF_TYPE (vect_orig_stmt (tem)) = vect_internal_def;\n       STMT_VINFO_DEF_TYPE (tem) = vect_internal_def;\n     }\n-  else if (loop_vinfo && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo))\n+  else if (loop_vinfo && LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo))\n     {\n       vec_loop_masks *masks = &LOOP_VINFO_MASKS (loop_vinfo);\n       internal_fn cond_fn = get_conditional_internal_fn (code);\n@@ -6793,7 +6795,7 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t     \"can't use a fully-masked loop because no\"\n \t\t\t     \" conditional operation is available.\\n\");\n-\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t  LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo) = false;\n \t}\n       else if (reduction_type == FOLD_LEFT_REDUCTION\n \t       && reduc_fn == IFN_LAST\n@@ -6805,7 +6807,7 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t     \"can't use a fully-masked loop because no\"\n \t\t\t     \" conditional operation is available.\\n\");\n-\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t  LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo) = false;\n \t}\n       else\n \tvect_record_loop_mask (loop_vinfo, masks, ncopies * vec_num,\n@@ -7876,7 +7878,7 @@ vectorizable_live_operation (loop_vec_info loop_vinfo,\n   if (!vec_stmt_p)\n     {\n       /* No transformation required.  */\n-      if (LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo))\n+      if (LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo))\n \t{\n \t  if (!direct_internal_fn_supported_p (IFN_EXTRACT_LAST, vectype,\n \t\t\t\t\t       OPTIMIZE_FOR_SPEED))\n@@ -7886,23 +7888,23 @@ vectorizable_live_operation (loop_vec_info loop_vinfo,\n \t\t\t\t \"can't use a fully-masked loop because \"\n \t\t\t\t \"the target doesn't support extract last \"\n \t\t\t\t \"reduction.\\n\");\n-\t      LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t      LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo) = false;\n \t    }\n \t  else if (slp_node)\n \t    {\n \t      if (dump_enabled_p ())\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t\t \"can't use a fully-masked loop because an \"\n \t\t\t\t \"SLP statement is live after the loop.\\n\");\n-\t      LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t      LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo) = false;\n \t    }\n \t  else if (ncopies > 1)\n \t    {\n \t      if (dump_enabled_p ())\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t\t \"can't use a fully-masked loop because\"\n \t\t\t\t \" ncopies is greater than 1.\\n\");\n-\t      LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t      LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo) = false;\n \t    }\n \t  else\n \t    {"}, {"sha": "71ee83176c59a26132439ddfc03993f755882cad", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042f4082979aa22e08c008ed4c5b4bab3915a9c2/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042f4082979aa22e08c008ed4c5b4bab3915a9c2/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=042f4082979aa22e08c008ed4c5b4bab3915a9c2", "patch": "@@ -1667,7 +1667,7 @@ static tree permute_vec_elements (vec_info *, tree, tree, tree, stmt_vec_info,\n    its arguments.  If the load or store is conditional, SCALAR_MASK is the\n    condition under which it occurs.\n \n-   Clear LOOP_VINFO_CAN_FULLY_MASK_P if a fully-masked loop is not\n+   Clear LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P if a fully-masked loop is not\n    supported, otherwise record the required mask types.  */\n \n static void\n@@ -1694,7 +1694,7 @@ check_load_store_masking (loop_vec_info loop_vinfo, tree vectype,\n \t\t\t     \"can't use a fully-masked loop because the\"\n \t\t\t     \" target doesn't have an appropriate masked\"\n \t\t\t     \" load/store-lanes instruction.\\n\");\n-\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t  LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo) = false;\n \t  return;\n \t}\n       unsigned int ncopies = vect_get_num_copies (loop_vinfo, vectype);\n@@ -1717,7 +1717,7 @@ check_load_store_masking (loop_vec_info loop_vinfo, tree vectype,\n \t\t\t     \"can't use a fully-masked loop because the\"\n \t\t\t     \" target doesn't have an appropriate masked\"\n \t\t\t     \" gather load or scatter store instruction.\\n\");\n-\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t  LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo) = false;\n \t  return;\n \t}\n       unsigned int ncopies = vect_get_num_copies (loop_vinfo, vectype);\n@@ -1734,7 +1734,7 @@ check_load_store_masking (loop_vec_info loop_vinfo, tree vectype,\n \tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t \"can't use a fully-masked loop because an access\"\n \t\t\t \" isn't contiguous.\\n\");\n-      LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+      LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo) = false;\n       return;\n     }\n \n@@ -1748,7 +1748,7 @@ check_load_store_masking (loop_vec_info loop_vinfo, tree vectype,\n \t\t\t \"can't use a fully-masked loop because the target\"\n \t\t\t \" doesn't have the appropriate masked load or\"\n \t\t\t \" store.\\n\");\n-      LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+      LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo) = false;\n       return;\n     }\n   /* We might load more scalars than we need for permuting SLP loads.\n@@ -5866,7 +5866,7 @@ vectorizable_operation (vec_info *vinfo,\n \t should only change the active lanes of the reduction chain,\n \t keeping the inactive lanes as-is.  */\n       if (loop_vinfo\n-\t  && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo)\n+\t  && LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo)\n \t  && reduc_idx >= 0)\n \t{\n \t  if (cond_fn == IFN_LAST\n@@ -5877,7 +5877,7 @@ vectorizable_operation (vec_info *vinfo,\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t\t \"can't use a fully-masked loop because no\"\n \t\t\t\t \" conditional operation is available.\\n\");\n-\t      LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t      LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo) = false;\n \t    }\n \t  else\n \t    vect_record_loop_mask (loop_vinfo, masks, ncopies * vec_num,\n@@ -7139,7 +7139,7 @@ vectorizable_store (vec_info *vinfo,\n       STMT_VINFO_MEMORY_ACCESS_TYPE (stmt_info) = memory_access_type;\n \n       if (loop_vinfo\n-\t  && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo))\n+\t  && LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo))\n \tcheck_load_store_masking (loop_vinfo, vectype, vls_type, group_size,\n \t\t\t\t  memory_access_type, &gs_info, mask);\n \n@@ -8432,7 +8432,7 @@ vectorizable_load (vec_info *vinfo,\n \tSTMT_VINFO_MEMORY_ACCESS_TYPE (stmt_info) = memory_access_type;\n \n       if (loop_vinfo\n-\t  && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo))\n+\t  && LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo))\n \tcheck_load_store_masking (loop_vinfo, vectype, VLS_LOAD, group_size,\n \t\t\t\t  memory_access_type, &gs_info, mask);\n \n@@ -9845,7 +9845,7 @@ vectorizable_condition (vec_info *vinfo,\n \t}\n \n       if (loop_vinfo\n-\t  && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo)\n+\t  && LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo)\n \t  && reduction_type == EXTRACT_LAST_REDUCTION)\n \tvect_record_loop_mask (loop_vinfo, &LOOP_VINFO_MASKS (loop_vinfo),\n \t\t\t       ncopies * vec_num, vectype, NULL);"}, {"sha": "c459280c051cd5865861764fb1fa6dadfd39b5f6", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/042f4082979aa22e08c008ed4c5b4bab3915a9c2/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/042f4082979aa22e08c008ed4c5b4bab3915a9c2/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=042f4082979aa22e08c008ed4c5b4bab3915a9c2", "patch": "@@ -631,8 +631,11 @@ typedef class _loop_vec_info : public vec_info {\n   /* Is the loop vectorizable? */\n   bool vectorizable;\n \n-  /* Records whether we still have the option of using a fully-masked loop.  */\n-  bool can_fully_mask_p;\n+  /* Records whether we still have the option of vectorizing this loop\n+     using partially-populated vectors; in other words, whether it is\n+     still possible for one iteration of the vector loop to handle\n+     fewer than VF scalars.  */\n+  bool can_use_partial_vectors_p;\n \n   /* True if have decided to use a fully-masked loop.  */\n   bool fully_masked_p;\n@@ -698,7 +701,7 @@ typedef class _loop_vec_info : public vec_info {\n #define LOOP_VINFO_COST_MODEL_THRESHOLD(L) (L)->th\n #define LOOP_VINFO_VERSIONING_THRESHOLD(L) (L)->versioning_threshold\n #define LOOP_VINFO_VECTORIZABLE_P(L)       (L)->vectorizable\n-#define LOOP_VINFO_CAN_FULLY_MASK_P(L)     (L)->can_fully_mask_p\n+#define LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P(L) (L)->can_use_partial_vectors_p\n #define LOOP_VINFO_FULLY_MASKED_P(L)       (L)->fully_masked_p\n #define LOOP_VINFO_VECT_FACTOR(L)          (L)->vectorization_factor\n #define LOOP_VINFO_MAX_VECT_FACTOR(L)      (L)->max_vectorization_factor"}]}