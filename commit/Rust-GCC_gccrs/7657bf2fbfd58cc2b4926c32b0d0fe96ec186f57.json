{"sha": "7657bf2fbfd58cc2b4926c32b0d0fe96ec186f57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1N2JmMmZiZmQ1OGNjMmI0OTI2YzMyYjBkMGZlOTZlYzE4NmY1Nw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-02-20T21:37:59Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-02-20T21:37:59Z"}, "message": "(reload): Move assign_stack_local call into main loop.\n\nFrom-SVN: r13671", "tree": {"sha": "2d54f506861fd482542224a6e3acf271572a9b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d54f506861fd482542224a6e3acf271572a9b0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7657bf2fbfd58cc2b4926c32b0d0fe96ec186f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7657bf2fbfd58cc2b4926c32b0d0fe96ec186f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7657bf2fbfd58cc2b4926c32b0d0fe96ec186f57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7657bf2fbfd58cc2b4926c32b0d0fe96ec186f57/comments", "author": null, "committer": null, "parents": [{"sha": "44cfd5120cc2a22315cef9458572ccfb3b7c560a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44cfd5120cc2a22315cef9458572ccfb3b7c560a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44cfd5120cc2a22315cef9458572ccfb3b7c560a"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "30f97c4e9cbbe1fee8757bc7e8fe779cc708cbcd", "filename": "gcc/reload1.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7657bf2fbfd58cc2b4926c32b0d0fe96ec186f57/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7657bf2fbfd58cc2b4926c32b0d0fe96ec186f57/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=7657bf2fbfd58cc2b4926c32b0d0fe96ec186f57", "patch": "@@ -747,11 +747,6 @@ reload (first, global, dumpfile)\n   for (i = LAST_VIRTUAL_REGISTER + 1; i < max_regno; i++)\n     alter_reg (i, -1);\n \n-  /* Round size of stack frame to BIGGEST_ALIGNMENT.  This must be done here\n-     because the stack size may be a part of the offset computation for\n-     register elimination.   */\n-  assign_stack_local (BLKmode, 0, 0);\n-\n   /* If we have some registers we think can be eliminated, scan all insns to\n      see if there is an insn that sets one of these registers to something\n      other than itself plus a constant.  If so, the register cannot be\n@@ -861,7 +856,7 @@ reload (first, global, dumpfile)\n       rtx max_groups_insn[N_REG_CLASSES];\n       rtx max_nongroups_insn[N_REG_CLASSES];\n       rtx x;\n-      HOST_WIDE_INT starting_frame_size = get_frame_size ();\n+      HOST_WIDE_INT starting_frame_size;\n       int previous_frame_pointer_needed = frame_pointer_needed;\n       static char *reg_class_names[] = REG_CLASS_NAMES;\n \n@@ -883,6 +878,14 @@ reload (first, global, dumpfile)\n \t changes from 0 to 1 in this pass.  */\n       new_basic_block_needs = 0;\n \n+      /* Round size of stack frame to BIGGEST_ALIGNMENT.  This must be done\n+\t here because the stack size may be a part of the offset computation\n+\t for register elimination, and there might have been new stack slots\n+\t created in the last iteration of this loop.   */\n+      assign_stack_local (BLKmode, 0, 0);\n+\n+      starting_frame_size = get_frame_size ();\n+\n       /* Reset all offsets on eliminable registers to their initial values.  */\n #ifdef ELIMINABLE_REGS\n       for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)"}]}