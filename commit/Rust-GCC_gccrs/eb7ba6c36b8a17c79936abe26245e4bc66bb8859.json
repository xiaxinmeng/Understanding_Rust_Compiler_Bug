{"sha": "eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3YmE2YzM2YjhhMTdjNzk5MzZhYmUyNjI0NWU0YmM2NmJiODg1OQ==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zhang@arm.com", "date": "2020-02-25T17:38:00Z"}, "committer": {"name": "Dennis Zhang", "email": "dennis.zhang@arm.com", "date": "2020-02-25T17:38:00Z"}, "message": "arm: ACLE intrinsics for bfloat16 dot product\n\nThis patch is part of a series adding support for Armv8.6-A features.\nIt adds intrinsics for brain half-precision float-point (BF16) dot\ninstructions with AdvSIMD support.\n\ngcc/ChangeLog:\n\n2020-02-25  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* config/arm/arm_neon.h (vbfdot_f32, vbfdotq_f32): New\n\t(vbfdot_lane_f32, vbfdotq_laneq_f32): New.\n\t(vbfdot_laneq_f32, vbfdotq_lane_f32): New.\n\t* config/arm/arm_neon_builtins.def (vbfdot): New entry.\n\t(vbfdot_lanev4bf, vbfdot_lanev8bf): Likewise.\n\t* config/arm/iterators.md (VSF2BF): New attribute.\n\t* config/arm/neon.md (neon_vbfdot<VCVTF:mode>): New entry.\n\t(neon_vbfdot_lanev4bf<VCVTF:mode>): Likewise.\n\t(neon_vbfdot_lanev8bf<VCVTF:mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-02-25  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* gcc.target/arm/simd/bf16_dot_1.c: New test.\n\t* gcc.target/arm/simd/bf16_dot_2.c: New test.\n\t* gcc.target/arm/simd/bf16_dot_3.c: New test.", "tree": {"sha": "51c0b81dd1284fcf0520468074e11e3fab6ed9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51c0b81dd1284fcf0520468074e11e3fab6ed9c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/comments", "author": null, "committer": null, "parents": [{"sha": "490350a11f82ee214aa8dd50b1222f3e7cffe630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490350a11f82ee214aa8dd50b1222f3e7cffe630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/490350a11f82ee214aa8dd50b1222f3e7cffe630"}], "stats": {"total": 290, "additions": 290, "deletions": 0}, "files": [{"sha": "bbb4a656553d3e4977a40378b2ed703dbb371266", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "patch": "@@ -1,3 +1,15 @@\n+2020-02-25  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/arm/arm_neon.h (vbfdot_f32, vbfdotq_f32): New\n+\t(vbfdot_lane_f32, vbfdotq_laneq_f32): New.\n+\t(vbfdot_laneq_f32, vbfdotq_lane_f32): New.\n+\t* config/arm/arm_neon_builtins.def (vbfdot): New entry.\n+\t(vbfdot_lanev4bf, vbfdot_lanev8bf): Likewise.\n+\t* config/arm/iterators.md (VSF2BF): New attribute.\n+\t* config/arm/neon.md (neon_vbfdot<VCVTF:mode>): New entry.\n+\t(neon_vbfdot_lanev4bf<VCVTF:mode>): Likewise.\n+\t(neon_vbfdot_lanev8bf<VCVTF:mode>): Likewise.\n+\n 2020-02-25  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* config/arm/arm.md (required_for_purecode): New attribute."}, {"sha": "d2ebee40538f59b6f674847f850c808eadab2e4d", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "patch": "@@ -18819,6 +18819,58 @@ vusmmlaq_s32 (int32x4_t __r, uint8x16_t __a, int8x16_t __b)\n \n #pragma GCC pop_options\n \n+/* AdvSIMD Brain half-precision float-point (Bfloat16) intrinsics.  */\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+bf16\")\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdot_f32 (float32x2_t __r, bfloat16x4_t __a, bfloat16x4_t __b)\n+{\n+  return __builtin_neon_vbfdotv2sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdotq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b)\n+{\n+  return __builtin_neon_vbfdotv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdot_lane_f32 (float32x2_t __r, bfloat16x4_t __a, bfloat16x4_t __b,\n+\t\t const int __index)\n+{\n+  return __builtin_neon_vbfdot_lanev4bfv2sf (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdotq_laneq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b,\n+\t\t   const int __index)\n+{\n+  return __builtin_neon_vbfdot_lanev8bfv4sf (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdot_laneq_f32 (float32x2_t __r, bfloat16x4_t __a, bfloat16x8_t __b,\n+\t\t  const int __index)\n+{\n+  return __builtin_neon_vbfdot_lanev8bfv2sf (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdotq_lane_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x4_t __b,\n+\t\t  const int __index)\n+{\n+  return __builtin_neon_vbfdot_lanev4bfv4sf (__r, __a, __b, __index);\n+}\n+\n+#pragma GCC pop_options\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "4a6f4cfc44ec4137c1f7d959252e5488e179f833", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "patch": "@@ -381,3 +381,7 @@ VAR2 (MAC_LANE_PAIR, vcmlaq_lane270, v4sf, v8hf)\n VAR1 (TERNOP, smmla, v16qi)\n VAR1 (UTERNOP, ummla, v16qi)\n VAR1 (USTERNOP, usmmla, v16qi)\n+\n+VAR2 (TERNOP, vbfdot, v2sf, v4sf)\n+VAR2 (MAC_LANE_PAIR, vbfdot_lanev4bf, v2sf, v4sf)\n+VAR2 (MAC_LANE_PAIR, vbfdot_lanev8bf, v2sf, v4sf)"}, {"sha": "b435a05d2194a09e3872ade7c7aab36ef733f28c", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "patch": "@@ -835,6 +835,8 @@\n (define_mode_attr VSI2QI [(V2SI \"V8QI\") (V4SI \"V16QI\")])\n (define_mode_attr vsi2qi [(V2SI \"v8qi\") (V4SI \"v16qi\")])\n \n+(define_mode_attr VSF2BF [(V2SF \"V4BF\") (V4SF \"V8BF\")])\n+\n ;;----------------------------------------------------------------------------\n ;; Code attributes\n ;;----------------------------------------------------------------------------"}, {"sha": "80e94de4b8442bf265cc04aa6526cd7f272047fc", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "patch": "@@ -6596,3 +6596,51 @@ if (BYTES_BIG_ENDIAN)\n   \"v<sup>mmla.<mmla_sfx>\\t%q0, %q2, %q3\"\n   [(set_attr \"type\" \"neon_mla_s_q\")]\n )\n+\n+(define_insn \"neon_vbfdot<VCVTF:mode>\"\n+  [(set (match_operand:VCVTF 0 \"register_operand\" \"=w\")\n+\t(plus:VCVTF (match_operand:VCVTF 1 \"register_operand\" \"0\")\n+\t\t    (unspec:VCVTF [\n+\t\t\t    (match_operand:<VSF2BF> 2 \"register_operand\" \"w\")\n+\t\t\t    (match_operand:<VSF2BF> 3 \"register_operand\" \"w\")]\n+\t\t     UNSPEC_DOT_S)))]\n+  \"TARGET_BF16_SIMD\"\n+  \"vdot.bf16\\\\t%<V_reg>0, %<V_reg>2, %<V_reg>3\"\n+  [(set_attr \"type\" \"neon_dot<q>\")]\n+)\n+\n+(define_insn \"neon_vbfdot_lanev4bf<VCVTF:mode>\"\n+  [(set (match_operand:VCVTF 0 \"register_operand\" \"=w\")\n+\t(plus:VCVTF (match_operand:VCVTF 1 \"register_operand\" \"0\")\n+\t\t    (unspec:VCVTF [\n+\t\t\t    (match_operand:<VSF2BF> 2 \"register_operand\" \"w\")\n+\t\t\t    (match_operand:V4BF 3 \"register_operand\" \"x\")\n+\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+\t\t     UNSPEC_DOT_S)))]\n+  \"TARGET_BF16_SIMD\"\n+  \"vdot.bf16\\\\t%<V_reg>0, %<V_reg>2, %P3[%c4]\"\n+  [(set_attr \"type\" \"neon_dot<q>\")]\n+)\n+\n+(define_insn \"neon_vbfdot_lanev8bf<VCVTF:mode>\"\n+  [(set (match_operand:VCVTF 0 \"register_operand\" \"=w\")\n+\t(plus:VCVTF (match_operand:VCVTF 1 \"register_operand\" \"0\")\n+\t\t    (unspec:VCVTF [\n+\t\t\t    (match_operand:<VSF2BF> 2 \"register_operand\" \"w\")\n+\t\t\t    (match_operand:V8BF 3 \"register_operand\" \"x\")\n+\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+\t\t     UNSPEC_DOT_S)))]\n+  \"TARGET_BF16_SIMD\"\n+  {\n+    int lane = INTVAL (operands[4]);\n+    int half = GET_MODE_NUNITS (GET_MODE (operands[3])) / 4;\n+    if (lane < half)\n+      return \"vdot.bf16\\\\t%<V_reg>0, %<V_reg>2, %e3[%c4]\";\n+    else\n+      {\n+\toperands[4] = GEN_INT (lane - half);\n+\treturn \"vdot.bf16\\\\t%<V_reg>0, %<V_reg>2, %f3[%c4]\";\n+      }\n+  }\n+  [(set_attr \"type\" \"neon_dot<q>\")]\n+)"}, {"sha": "7b24b54fac7fc1c17c77b2fe3501bfb6e1d268b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "patch": "@@ -1,3 +1,9 @@\n+2020-02-25  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/arm/simd/bf16_dot_1.c: New test.\n+\t* gcc.target/arm/simd/bf16_dot_2.c: New test.\n+\t* gcc.target/arm/simd/bf16_dot_3.c: New test.\n+\n 2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/93908"}, {"sha": "4487152d6cbbe090651a7bae87b5ac153bf0291a", "filename": "gcc/testsuite/gcc.target/arm/simd/bf16_dot_1.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_dot_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_dot_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_dot_1.c?ref=eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "patch": "@@ -0,0 +1,100 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+/* BF16 DOT without lane.  */\n+float32x2_t\n+test_vbfdot_f32 (float32x2_t r, bfloat16x4_t a, bfloat16x4_t b)\n+{\n+  /* vdot.bf16 d, d, d */\n+  return vbfdot_f32 (r, a, b);\n+}\n+\n+float32x4_t\n+test_vbfdotq_f32 (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  /* vdot.bf16 q, q, q */\n+  return vbfdotq_f32 (r, a, b);\n+}\n+\n+/* 64-bit BF16 DOT with lane.  */\n+float32x2_t\n+test_vbfdot_lane_f32_0 (float32x2_t r, bfloat16x4_t a, bfloat16x4_t b)\n+{\n+  /* vdot.bf16 d, d, d[0] */\n+  return vbfdot_lane_f32 (r, a, b, 0);\n+}\n+\n+float32x2_t\n+test_vbfdot_lane_f32_1 (float32x2_t r, bfloat16x4_t a, bfloat16x4_t b)\n+{\n+  /* vdot.bf16 d, d, d[1] */\n+  return vbfdot_lane_f32 (r, a, b, 1);\n+}\n+\n+float32x2_t\n+test_vbfdot_laneq_f32_0 (float32x2_t r, bfloat16x4_t a, bfloat16x8_t b)\n+{\n+  /* vdot.bf16 d, d, d[0] */\n+  return vbfdot_laneq_f32 (r, a, b, 0);\n+}\n+\n+float32x2_t\n+test_vbfdot_laneq_f32_1 (float32x2_t r, bfloat16x4_t a, bfloat16x8_t b)\n+{\n+  /* vdot.bf16 d, d, d[1] */\n+  return vbfdot_laneq_f32 (r, a, b, 1);\n+}\n+\n+float32x2_t\n+test_vbfdot_laneq_f32_2 (float32x2_t r, bfloat16x4_t a, bfloat16x8_t b)\n+{\n+  /* vdot.bf16 d, d, d[0] */\n+  return vbfdot_laneq_f32 (r, a, b, 2);\n+}\n+\n+float32x2_t\n+test_vbfdot_laneq_f32_3 (float32x2_t r, bfloat16x4_t a, bfloat16x8_t b)\n+{\n+  /* vdot.bf16 d, d, d[1] */\n+  return vbfdot_laneq_f32 (r, a, b, 3);\n+}\n+\n+/* 128-bit BF16 DOT with lane.  */\n+float32x4_t\n+test_vbfdotq_lane_f32_0 (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  /* vdot.bf16 q, q, d[0] */\n+  return vbfdotq_lane_f32 (r, a, b, 0);\n+}\n+\n+float32x4_t\n+test_vbfdotq_lane_f32_1 (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  /* vdot.bf16 q, q, d[1] */\n+  return vbfdotq_lane_f32 (r, a, b, 1);\n+}\n+\n+float32x4_t\n+test_vbfdotq_laneq_f32_0 (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  /* vdot.bf16 q, q, d[0] */\n+  return vbfdotq_laneq_f32 (r, a, b, 0);\n+}\n+\n+float32x4_t\n+test_vbfdotq_laneq_f32_3 (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  /* vdot.bf16 q, q, d[1] */\n+  return vbfdotq_laneq_f32 (r, a, b, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tvdot.bf16\\td[0-9]+, d[0-9]+, d[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvdot.bf16\\tq[0-9]+, q[0-9]+, q[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tvdot.bf16\\td[0-9]+, d[0-9]+, d[0-9]+\\[0\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tvdot.bf16\\td[0-9]+, d[0-9]+, d[0-9]+\\[1\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tvdot.bf16\\tq[0-9]+, q[0-9]+, d[0-9]+\\[0\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tvdot.bf16\\tq[0-9]+, q[0-9]+, d[0-9]+\\[1\\]\\n} 2 } } */"}, {"sha": "d2ef344c68bd6840b336b2702e8698b7a267317c", "filename": "gcc/testsuite/gcc.target/arm/simd/bf16_dot_2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_dot_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_dot_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_dot_2.c?ref=eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+float32x2_t\n+test_vbfdot_lane_f32_a (float32x2_t r, bfloat16x4_t a, bfloat16x4_t b)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  return vbfdot_lane_f32 (r, a, b, -1);\n+}\n+\n+float32x2_t\n+test_vbfdot_lane_f32_b (float32x2_t r, bfloat16x4_t a, bfloat16x4_t b)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  return vbfdot_lane_f32 (r, a, b, 2);\n+}\n+\n+float32x2_t\n+test_vbfdot_laneq_f32_a (float32x2_t r, bfloat16x4_t a, bfloat16x8_t b)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vbfdot_laneq_f32 (r, a, b, -1);\n+}\n+\n+float32x2_t\n+test_vbfdot_laneq_f32_b (float32x2_t r, bfloat16x4_t a, bfloat16x8_t b)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vbfdot_laneq_f32 (r, a, b, 4);\n+}"}, {"sha": "93f08f02bc74bce40b78f0901bde1f179b4fde60", "filename": "gcc/testsuite/gcc.target/arm/simd/bf16_dot_3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_dot_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7ba6c36b8a17c79936abe26245e4bc66bb8859/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_dot_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_dot_3.c?ref=eb7ba6c36b8a17c79936abe26245e4bc66bb8859", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+float32x4_t\n+test_vbfdotq_lane_f32_a (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  return vbfdotq_lane_f32 (r, a, b, -1);\n+}\n+\n+float32x4_t\n+test_vbfdotq_lane_f32_b (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" {target *-*-*} 0 } */\n+  return vbfdotq_lane_f32 (r, a, b, 2);\n+}\n+\n+float32x4_t\n+test_vbfdotq_laneq_f32_a (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vbfdotq_laneq_f32 (r, a, b, -1);\n+}\n+\n+float32x4_t\n+test_vbfdotq_laneq_f32_b (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  return vbfdotq_laneq_f32 (r, a, b, 4);\n+}"}]}