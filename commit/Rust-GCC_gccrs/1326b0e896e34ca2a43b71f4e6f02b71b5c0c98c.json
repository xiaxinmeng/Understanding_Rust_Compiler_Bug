{"sha": "1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMyNmIwZTg5NmUzNGNhMmE0M2I3MWY0ZTZmMDJiNzFiNWMwYzk4Yw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2021-02-28T02:57:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-17T14:32:10Z"}, "message": "[Ada] Removal of technical debt\n\ngcc/ada/\n\n\t* exp_ch3.adb (Check_Missing_Others): Add comment.\n\t(Build_Initialization_Call): Remove inaccurate accessibility\n\tcomment.\n\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Remove\n\ttest for Ada2012.\n\t(Analyze_Package_Instantiation): Remove speculative comment.\n\t(Inline_Instance_Body): Add comments for loops.\n\t(Build_Subprogram_Renaming): Remove comment about fix being\n\tpartial and \"ugly.\"\n\t(Instantiate_Subprogram_Body): Remove comment referencing DEC\n\trelated internal issue.\n\t(Subtypes_Match): Add comment and simplify anonymous access\n\ttest.\n\t(Is_Global): Add test for when E is an expanded name, and\n\tcalculate the scope accordingly.\n\t* sem_ch6.adb (Analyze_Function_Return): Update comment\n\tregarding accessibility, and add check for\n\tWarn_On_Ada_2012_Compatibility.\n\t(Mask_Type_Refs): Add comments.\n\t(Analyze_Subprogram_Declaration): Remove mysterious suppression\n\tof elaboration checks.\n\t* sem_ch7.adb (Preserve_Full_Attributes): Preserve Is_Atomic\n\tvalue.\n\t* sem_ch8.adb (Most_Descendant_Use_Clause): Remove comment.\n\t(Note_Redundant_Use): Fix calls to Find_First_Use to be\n\tFind_Most_Prev.\n\t(Get_Object_Name): Modify error message to be more descriptive.\n\t(Known_But_Visible): Remove mysterious special case for\n\tGNAT_Mode.\n\t(Find_First_Use): Removed.\n\t(Find_Most_Prev): Renamed from Find_First_Use.\n\t* sem_prag.adb (Check_Static_Constraint): Add comments to\n\troutine.", "tree": {"sha": "8f3aa594ef64658b1914895ca0f5e1c68fd99bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f3aa594ef64658b1914895ca0f5e1c68fd99bfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8863c3aa86c4dffd1869c04c7df7b5065751235d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8863c3aa86c4dffd1869c04c7df7b5065751235d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8863c3aa86c4dffd1869c04c7df7b5065751235d"}], "stats": {"total": 159, "additions": 75, "deletions": 84}, "files": [{"sha": "36175f72baf9657a23c7d9fd7abc84780cbb37bd", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c", "patch": "@@ -1502,7 +1502,8 @@ package body Exp_Ch3 is\n          Typ : constant Entity_Id := Etype (Discr);\n \n          procedure Check_Missing_Others (V : Node_Id);\n-         --  ???\n+         --  Check that a given variant and its nested variants have an others\n+         --  choice, and generate a constraint error raise when it does not.\n \n          --------------------------\n          -- Check_Missing_Others --\n@@ -1871,10 +1872,6 @@ package body Exp_Ch3 is\n       --  Pass the extra accessibility level parameter associated with the\n       --  level of the object being initialized when required.\n \n-      --  When no entity is present for Id_Ref it may not have been fully\n-      --  analyzed, so allow the default value of standard standard to be\n-      --  passed ???\n-\n       if Is_Entity_Name (Id_Ref)\n         and then Present (Init_Proc_Level_Formal (Proc))\n       then"}, {"sha": "2cd46895d28784c8121f64832b288563369903e8", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c", "patch": "@@ -3903,12 +3903,7 @@ package body Sem_Ch12 is\n             --  Check restriction imposed by AI05-073: a generic function\n             --  cannot return an abstract type or an access to such.\n \n-            --  This is a binding interpretation should it apply to earlier\n-            --  versions of Ada as well as Ada 2012???\n-\n-            if Is_Abstract_Type (Designated_Type (Result_Type))\n-              and then Ada_Version >= Ada_2012\n-            then\n+            if Is_Abstract_Type (Designated_Type (Result_Type)) then\n                Error_Msg_N\n                  (\"generic function cannot have an access result \"\n                   & \"that designates an abstract type\", Spec);\n@@ -4539,10 +4534,7 @@ package body Sem_Ch12 is\n                --  If the current scope is itself an instance within a child\n                --  unit, there will be duplications in the scope stack, and the\n                --  unstacking mechanism in Inline_Instance_Body will fail.\n-               --  This loses some rare cases of optimization, and might be\n-               --  improved some day, if we can find a proper abstraction for\n-               --  \"the complete compilation context\" that can be saved and\n-               --  restored. ???\n+               --  This loses some rare cases of optimization.\n \n                if Is_Generic_Instance (Current_Scope) then\n                   declare\n@@ -4987,17 +4979,20 @@ package body Sem_Ch12 is\n \n       if Gen_Comp /= Cunit_Entity (Current_Sem_Unit) then\n \n-         --  Add some comments for the following two loops ???\n+         --  Loop through enclosing scopes until we reach a generic instance,\n+         --  package body, or subprogram.\n \n          S := Current_Scope;\n          while Present (S) and then S /= Standard_Standard loop\n+\n+            --  Save use clauses from enclosing scopes into Use_Clauses\n+\n             loop\n                Num_Scopes := Num_Scopes + 1;\n \n                Use_Clauses (Num_Scopes) :=\n                  (Scope_Stack.Table\n-                    (Scope_Stack.Last - Num_Scopes + 1).\n-                       First_Use_Clause);\n+                    (Scope_Stack.Last - Num_Scopes + 1).First_Use_Clause);\n                End_Use_Clauses (Use_Clauses (Num_Scopes));\n \n                exit when Scope_Stack.Last - Num_Scopes + 1 = Scope_Stack.First\n@@ -5554,7 +5549,6 @@ package body Sem_Ch12 is\n          --  If there is a formal subprogram with the same name as the unit\n          --  itself, do not add this renaming declaration, to prevent\n          --  ambiguities when there is a call with that name in the body.\n-         --  This is a partial and ugly fix for one ACATS test. ???\n \n          Renaming_Decl := First (Renaming_List);\n          while Present (Renaming_Decl) loop\n@@ -9764,6 +9758,7 @@ package body Sem_Ch12 is\n       --  point of the current enclosing instance. Pending a better usage of\n       --  Slocs to indicate instantiation places, we determine the place of\n       --  origin of a node by finding the maximum sloc of any ancestor node.\n+\n       --  Why is this not equivalent to Top_Level_Location ???\n \n       -------------------\n@@ -12576,9 +12571,7 @@ package body Sem_Ch12 is\n       --  errors, this may be an instance whose scope is a premature instance.\n       --  In that case we must insure that the (legal) program does raise\n       --  program error if executed. We generate a subprogram body for this\n-      --  purpose. See DEC ac30vso.\n-\n-      --  Should not reference proprietary DEC tests in comments ???\n+      --  purpose.\n \n       elsif Serious_Errors_Detected = 0\n         and then Nkind (Parent (Inst_Node)) /= N_Compilation_Unit\n@@ -12705,7 +12698,7 @@ package body Sem_Ch12 is\n \n       function Subtypes_Match (Gen_T, Act_T : Entity_Id) return Boolean;\n       --  Check that base types are the same and that the subtypes match\n-      --  statically. Used in several of the above.\n+      --  statically. Used in several of the validation subprograms.\n \n       --------------------------------------------\n       --  Check_Shared_Variable_Control_Aspects --\n@@ -12840,7 +12833,9 @@ package body Sem_Ch12 is\n          T : constant Entity_Id := Get_Instance_Of (Gen_T);\n \n       begin\n-         --  Some detailed comments would be useful here ???\n+         --  Check that the base types, root types (when dealing with class\n+         --  wide types), or designated types (when dealing with anonymous\n+         --  access types) of Gen_T and Act_T are statically matching subtypes.\n \n          return ((Base_Type (T) = Act_T\n                    or else Base_Type (T) = Base_Type (Act_T))\n@@ -12852,9 +12847,7 @@ package body Sem_Ch12 is\n                                 (Get_Instance_Of (Root_Type (Gen_T)),\n                                  Root_Type (Act_T)))\n \n-           or else\n-             (Ekind (Gen_T) in E_Anonymous_Access_Subprogram_Type\n-                             | E_Anonymous_Access_Type\n+           or else (Is_Anonymous_Access_Type (Gen_T)\n                and then Ekind (Act_T) = Ekind (Gen_T)\n                and then Subtypes_Statically_Match\n                           (Designated_Type (Gen_T), Designated_Type (Act_T)));\n@@ -15626,7 +15619,8 @@ package body Sem_Ch12 is\n          elsif Nkind (E) not in N_Entity then\n             return False;\n \n-         elsif Is_Child_Unit (E)\n+         elsif Nkind (E) /= N_Expanded_Name\n+           and then Is_Child_Unit (E)\n            and then (Is_Instance_Node (Parent (N2))\n                       or else (Nkind (Parent (N2)) = N_Expanded_Name\n                                 and then N2 = Selector_Name (Parent (N2))\n@@ -15636,7 +15630,19 @@ package body Sem_Ch12 is\n             return True;\n \n          else\n-            Se := Scope (E);\n+            --  E may be an expanded name - typically an operator - in which\n+            --  case we must find its enclosing scope since expanded names\n+            --  don't have corresponding scopes.\n+\n+            if Nkind (E) = N_Expanded_Name then\n+               Se := Find_Enclosing_Scope (E);\n+\n+            --  Otherwise, E is an entity and will have Scope set\n+\n+            else\n+               Se := Scope (E);\n+            end if;\n+\n             while Se /= Gen_Scope loop\n                if Se = Standard_Standard then\n                   return True;"}, {"sha": "68e10afc7cc08cb03cab75ff5994864d6c405c96", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c", "patch": "@@ -1535,14 +1535,12 @@ package body Sem_Ch6 is\n             --  Check RM 6.5 (5.9/3)\n \n             if Has_Aliased then\n-               if Ada_Version < Ada_2012 then\n-\n-                  --  Shouldn't this test Warn_On_Ada_2012_Compatibility ???\n-                  --  Can it really happen (extended return???)\n-\n+               if Ada_Version < Ada_2012\n+                 and then Warn_On_Ada_2012_Compatibility\n+               then\n                   Error_Msg_N\n                     (\"ALIASED only allowed for limited return objects \"\n-                     & \"in Ada 2012??\", N);\n+                     & \"in Ada 2012?y?\", N);\n \n                elsif not Is_Limited_View (R_Type) then\n                   Error_Msg_N\n@@ -1674,9 +1672,9 @@ package body Sem_Ch6 is\n                Related_Nod => N);\n          end if;\n \n-         --  ??? A real run-time accessibility check is needed in cases\n-         --  involving dereferences of access parameters. For now we just\n-         --  check the static cases.\n+         --  Perform static accessibility checks for cases involving\n+         --  dereferences of access parameters. Runtime accessibility checks\n+         --  get generated elsewhere.\n \n          if (Ada_Version < Ada_2005 or else Debug_Flag_Dot_L)\n            and then Is_Limited_View (Etype (Scope_Id))\n@@ -3827,15 +3825,17 @@ package body Sem_Ch6 is\n          Result : Elist_Id := No_Elist;\n \n          function Mask_Type_Refs (Node : Node_Id) return Traverse_Result;\n-         --  Mask all types referenced in the subtree rooted at Node\n+         --  Mask all types referenced in the subtree rooted at Node as\n+         --  formally frozen.\n \n          --------------------\n          -- Mask_Type_Refs --\n          --------------------\n \n          function Mask_Type_Refs (Node : Node_Id) return Traverse_Result is\n             procedure Mask_Type (Typ : Entity_Id);\n-            --  ??? what does this do?\n+            --  Mask a given type as formally frozen when outside the current\n+            --  scope, or else freeze the type.\n \n             ---------------\n             -- Mask_Type --\n@@ -5665,17 +5665,6 @@ package body Sem_Ch6 is\n          end;\n       end if;\n \n-      --  What is the following code for, it used to be\n-\n-      --  ???   Set_Suppress_Elaboration_Checks\n-      --  ???     (Designator, Elaboration_Checks_Suppressed (Designator));\n-\n-      --  The following seems equivalent, but a bit dubious\n-\n-      if Elaboration_Checks_Suppressed (Designator) then\n-         Set_Kill_Elaboration_Checks (Designator);\n-      end if;\n-\n       --  For a compilation unit, set body required. This flag will only be\n       --  reset if a valid Import or Interface pragma is processed later on.\n "}, {"sha": "27927ebf84038b6fe32fb3fef31c4595b19e28c1", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c", "patch": "@@ -2722,6 +2722,7 @@ package body Sem_Ch7 is\n                                      (Priv, Size_Known_At_Compile_Time (Full));\n          Set_Is_Volatile             (Priv, Is_Volatile                (Full));\n          Set_Treat_As_Volatile       (Priv, Treat_As_Volatile          (Full));\n+         Set_Is_Atomic               (Priv, Is_Atomic                  (Full));\n          Set_Is_Ada_2005_Only        (Priv, Is_Ada_2005_Only           (Full));\n          Set_Is_Ada_2012_Only        (Priv, Is_Ada_2012_Only           (Full));\n          Set_Has_Pragma_Unmodified   (Priv, Has_Pragma_Unmodified      (Full));\n@@ -2733,7 +2734,6 @@ package body Sem_Ch7 is\n          if Is_Unchecked_Union (Full) then\n             Set_Is_Unchecked_Union (Base_Type (Priv));\n          end if;\n-         --  Why is atomic not copied here ???\n \n          if Referenced (Full) then\n             Set_Referenced (Priv);"}, {"sha": "1c68eed693b0fb2b8ae1c42f52bf24cede0bb81f", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c", "patch": "@@ -481,11 +481,10 @@ package body Sem_Ch8 is\n    --  legality of selector given the scope denoted by prefix, and change node\n    --  N into a expanded name with a properly set Entity field.\n \n-   function Find_Most_Prev (Use_Clause : Node_Id) return Node_Id;\n+   function Find_First_Use (Use_Clause : Node_Id) return Node_Id;\n    --  Find the most previous use clause (that is, the first one to appear in\n    --  the source) by traversing the previous clause chain that exists in both\n    --  N_Use_Package_Clause nodes and N_Use_Type_Clause nodes.\n-   --  ??? a better subprogram name is in order\n \n    function Find_Renamed_Entity\n      (N         : Node_Id;\n@@ -529,7 +528,6 @@ package body Sem_Ch8 is\n       Clause2 : Entity_Id) return Entity_Id;\n    --  Determine which use clause parameter is the most descendant in terms of\n    --  scope.\n-   --  ??? a better subprogram name is in order\n \n    procedure Premature_Usage (N : Node_Id);\n    --  Diagnose usage of an entity before it is visible\n@@ -1168,7 +1166,9 @@ package body Sem_Ch8 is\n            and then Is_Anonymous_Access_Type (Etype (Expression (Nam)))\n            and then not Is_Anonymous_Access_Type (T)\n          then\n-            Wrong_Type (Expression (Nam), T); -- Should we give better error???\n+            Error_Msg_NE\n+              (\"cannot rename anonymous access object \"\n+                & \"as a named access type\", Expression (Nam), T);\n          end if;\n \n          --  Check that a class-wide object is not being renamed as an object\n@@ -5314,16 +5314,6 @@ package body Sem_Ch8 is\n \n          elsif not Comes_From_Source (E) then\n             return False;\n-\n-         --  In gnat internal mode, we consider all entities known. The\n-         --  historical reason behind this discrepancy is not known??? But the\n-         --  only effect is to modify the error message given, so it is not\n-         --  critical. Since it only affects the exact wording of error\n-         --  messages in illegal programs, we do not mention this as an\n-         --  effect of -gnatg, since it is not a language modification.\n-\n-         elsif GNAT_Mode then\n-            return True;\n          end if;\n \n          --  Here we have an entity that is not from package Standard, and\n@@ -6989,10 +6979,10 @@ package body Sem_Ch8 is\n    end Find_Expanded_Name;\n \n    --------------------\n-   -- Find_Most_Prev --\n+   -- Find_First_Use --\n    --------------------\n \n-   function Find_Most_Prev (Use_Clause : Node_Id) return Node_Id is\n+   function Find_First_Use (Use_Clause : Node_Id) return Node_Id is\n       Curr : Node_Id;\n \n    begin\n@@ -7004,7 +6994,7 @@ package body Sem_Ch8 is\n       end loop;\n \n       return Curr;\n-   end Find_Most_Prev;\n+   end Find_First_Use;\n \n    -------------------------\n    -- Find_Renamed_Entity --\n@@ -9804,16 +9794,16 @@ package body Sem_Ch8 is\n          if Present (Redundant) and then Parent (Redundant) /= Prev_Use then\n \n             --  Make sure we are looking at most-descendant use_package_clause\n-            --  by traversing the chain with Find_Most_Prev and then verifying\n+            --  by traversing the chain with Find_First_Use and then verifying\n             --  there is no scope manipulation via Most_Descendant_Use_Clause.\n \n             if Nkind (Prev_Use) = N_Use_Package_Clause\n               and then\n                 (Nkind (Parent (Prev_Use)) /= N_Compilation_Unit\n                   or else Most_Descendant_Use_Clause\n-                            (Prev_Use, Find_Most_Prev (Prev_Use)) /= Prev_Use)\n+                            (Prev_Use, Find_First_Use (Prev_Use)) /= Prev_Use)\n             then\n-               Prev_Use := Find_Most_Prev (Prev_Use);\n+               Prev_Use := Find_First_Use (Prev_Use);\n             end if;\n \n             Error_Msg_Sloc := Sloc (Prev_Use);\n@@ -10367,7 +10357,7 @@ package body Sem_Ch8 is\n             if Present (Current_Use_Clause (T)) then\n                Use_Clause_Known : declare\n                   Clause1 : constant Node_Id :=\n-                              Find_Most_Prev (Current_Use_Clause (T));\n+                              Find_First_Use (Current_Use_Clause (T));\n                   Clause2 : constant Node_Id := Parent (Id);\n                   Ent1    : Entity_Id;\n                   Ent2    : Entity_Id;\n@@ -10507,10 +10497,10 @@ package body Sem_Ch8 is\n             --  a spurious warning - so verify there is a previous use clause.\n \n             if Current_Use_Clause (Scope (T)) /=\n-                 Find_Most_Prev (Current_Use_Clause (Scope (T)))\n+                 Find_First_Use (Current_Use_Clause (Scope (T)))\n             then\n                Error_Msg_Sloc :=\n-                 Sloc (Find_Most_Prev (Current_Use_Clause (Scope (T))));\n+                 Sloc (Find_First_Use (Current_Use_Clause (Scope (T))));\n                Error_Msg_NE -- CODEFIX\n                  (\"& is already use-visible through package use clause #??\",\n                   Id, T);"}, {"sha": "a4f8887644d903006dbd641fc6ab75608db69b5f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1326b0e896e34ca2a43b71f4e6f02b71b5c0c98c", "patch": "@@ -4083,9 +4083,9 @@ package body Sem_Prag is\n \n       procedure Check_Static_Constraint (Constr : Node_Id);\n       --  Constr is a constraint from an N_Subtype_Indication node from a\n-      --  component constraint in an Unchecked_Union type. This routine checks\n-      --  that the constraint is static as required by the restrictions for\n-      --  Unchecked_Union.\n+      --  component constraint in an Unchecked_Union type, a range, or a\n+      --  discriminant association. This routine checks that the constraint\n+      --  is static as required by the restrictions for Unchecked_Union.\n \n       procedure Check_Valid_Configuration_Pragma;\n       --  Legality checks for placement of a configuration pragma\n@@ -6458,11 +6458,6 @@ package body Sem_Prag is\n       -- Check_Static_Constraint --\n       -----------------------------\n \n-      --  Note: for convenience in writing this procedure, in addition to\n-      --  the officially (i.e. by spec) allowed argument which is always a\n-      --  constraint, it also allows ranges and discriminant associations.\n-      --  Above is not clear ???\n-\n       procedure Check_Static_Constraint (Constr : Node_Id) is\n \n          procedure Require_Static (E : Node_Id);\n@@ -6893,7 +6888,7 @@ package body Sem_Prag is\n          Proc : Entity_Id := Empty;\n \n       begin\n-         --  The body of this procedure needs some comments ???\n+         --  Perform sanity checks on Name\n \n          if not Is_Entity_Name (Name) then\n             Error_Pragma_Arg\n@@ -6909,6 +6904,9 @@ package body Sem_Prag is\n                  (\"argument of pragma% must be parameterless procedure\", Arg);\n             end if;\n \n+         --  Otherwise, search through interpretations looking for one which\n+         --  has no parameters.\n+\n          else\n             declare\n                Found : Boolean := False;\n@@ -6923,10 +6921,17 @@ package body Sem_Prag is\n                   if Ekind (Proc) = E_Procedure\n                     and then No (First_Formal (Proc))\n                   then\n+                     --  We found an interpretation, note it and continue\n+                     --  looking looking to verify it is unique.\n+\n                      if not Found then\n                         Found := True;\n                         Set_Entity (Name, Proc);\n                         Set_Is_Overloaded (Name, False);\n+\n+                     --  Two procedures with the same name, log an error\n+                     --  since the name is ambiguous.\n+\n                      else\n                         Error_Pragma_Arg\n                           (\"ambiguous handler name for pragma%\", Arg);\n@@ -6937,9 +6942,13 @@ package body Sem_Prag is\n                end loop;\n \n                if not Found then\n+                  --  Issue an error if we haven't found a suitable match for\n+                  --  Name.\n+\n                   Error_Pragma_Arg\n                     (\"argument of pragma% must be parameterless procedure\",\n                      Arg);\n+\n                else\n                   Proc := Entity (Name);\n                end if;"}]}