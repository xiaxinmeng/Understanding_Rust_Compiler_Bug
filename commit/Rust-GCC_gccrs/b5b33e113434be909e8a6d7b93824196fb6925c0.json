{"sha": "b5b33e113434be909e8a6d7b93824196fb6925c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViMzNlMTEzNDM0YmU5MDllOGE2ZDdiOTM4MjQxOTZmYjY5MjVjMA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2018-03-05T14:40:55Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2018-03-05T14:40:55Z"}, "message": "[AArch64] PR84114: Avoid reassociating FMA\n\nAs discussed in the PR, the reassociation phase runs before FMAs are formed\nand so can significantly reduce FMA opportunities.  Although reassociation\ncould be switched off, it helps in many cases, so a better alternative is to\nonly avoid reassociation of floating point additions.  This fixes the testcase\nand gives 1% speedup on SPECFP2017, fixing the performance regression.\n\n    gcc/\n\tPR tree-optimization/84114\n\t* config/aarch64/aarch64.c (aarch64_reassociation_width)\n\tAvoid reassociation of FLOAT_MODE addition.\n\nFrom-SVN: r258248", "tree": {"sha": "fa0e943425147bcc2a1bec6d4cafc2027dba79e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa0e943425147bcc2a1bec6d4cafc2027dba79e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5b33e113434be909e8a6d7b93824196fb6925c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b33e113434be909e8a6d7b93824196fb6925c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5b33e113434be909e8a6d7b93824196fb6925c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5b33e113434be909e8a6d7b93824196fb6925c0/comments", "author": null, "committer": null, "parents": [{"sha": "13b93d4b899bd7390429113d2ac98ec057a8c3d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b93d4b899bd7390429113d2ac98ec057a8c3d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b93d4b899bd7390429113d2ac98ec057a8c3d2"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "eeb36339911aaa1a4246d1b00b3d3481ae8331ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b33e113434be909e8a6d7b93824196fb6925c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b33e113434be909e8a6d7b93824196fb6925c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5b33e113434be909e8a6d7b93824196fb6925c0", "patch": "@@ -1,3 +1,9 @@\n+2018-03-05  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR tree-optimization/84114\n+\t* config/aarch64/aarch64.c (aarch64_reassociation_width)\n+\tAvoid reassociation of FLOAT_MODE addition.\n+\n 2018-03-05  Olga Makhotina  <olga.makhotina@intel.com>\n \n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA_PCONFIG_SET,"}, {"sha": "07c55b132a7a8c4ceeaf9f406ac8c3c9d7b6bb20", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5b33e113434be909e8a6d7b93824196fb6925c0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5b33e113434be909e8a6d7b93824196fb6925c0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b5b33e113434be909e8a6d7b93824196fb6925c0", "patch": "@@ -1094,15 +1094,16 @@ aarch64_min_divisions_for_recip_mul (machine_mode mode)\n   return aarch64_tune_params.min_div_recip_mul_df;\n }\n \n+/* Return the reassociation width of treeop OPC with mode MODE.  */\n static int\n-aarch64_reassociation_width (unsigned opc ATTRIBUTE_UNUSED,\n-\t\t\t     machine_mode mode)\n+aarch64_reassociation_width (unsigned opc, machine_mode mode)\n {\n   if (VECTOR_MODE_P (mode))\n     return aarch64_tune_params.vec_reassoc_width;\n   if (INTEGRAL_MODE_P (mode))\n     return aarch64_tune_params.int_reassoc_width;\n-  if (FLOAT_MODE_P (mode))\n+  /* Avoid reassociating floating point addition so we emit more FMAs.  */\n+  if (FLOAT_MODE_P (mode) && opc != PLUS_EXPR)\n     return aarch64_tune_params.fp_reassoc_width;\n   return 1;\n }"}]}