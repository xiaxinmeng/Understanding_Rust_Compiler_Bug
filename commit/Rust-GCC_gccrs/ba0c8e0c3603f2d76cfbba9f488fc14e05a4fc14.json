{"sha": "ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEwYzhlMGMzNjAzZjJkNzZjZmJiYTlmNDg4ZmMxNGUwNWE0ZmMxNA==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-07-13T14:05:28Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:19Z"}, "message": "Added RISC-V target hook (or at least provisional one)", "tree": {"sha": "5d3e88337f7a2054b6571d52466da6fb5ca41c7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d3e88337f7a2054b6571d52466da6fb5ca41c7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb2b31af2430f0759aa1f6f3bb6157bbe64715f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb2b31af2430f0759aa1f6f3bb6157bbe64715f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb2b31af2430f0759aa1f6f3bb6157bbe64715f"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "a3a1995bb9329677a125ef07e8b0040551febddb", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14", "patch": "@@ -558,6 +558,7 @@ riscv*)\n \tcpu_type=riscv\n \textra_objs=\"riscv-builtins.o riscv-c.o riscv-sr.o riscv-shorten-memrefs.o\"\n \td_target_objs=\"riscv-d.o\"\n+\trust_target_objs=\"riscv-rust.o\"\n \t;;\n rs6000*-*-*)\n \textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\""}, {"sha": "3b5cf7a39a89b65feacc95398befdf1a2ce0ae94", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14", "patch": "@@ -81,6 +81,9 @@ void riscv_cpu_cpp_builtins (cpp_reader *);\n /* Routines implemented in riscv-d.c  */\n extern void riscv_d_target_versions (void);\n \n+/* Routines implemented in riscv-rust.c  */\n+extern void riscv_rust_target_cpu_info (void);\n+\n /* Routines implemented in riscv-builtins.c.  */\n extern void riscv_atomic_assign_expand_fenv (tree *, tree *, tree *);\n extern rtx riscv_expand_builtin (tree, rtx, rtx, machine_mode, int);"}, {"sha": "f60a6effe87c045ba5c499d0616b815cbb1c4095", "filename": "gcc/config/riscv/riscv-rust.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14/gcc%2Fconfig%2Friscv%2Friscv-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14/gcc%2Fconfig%2Friscv%2Friscv-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-rust.c?ref=ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14", "patch": "@@ -0,0 +1,60 @@\n+/* Subroutines for the Rust front end for the RISC-V architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for RISC-V targets.  */\n+\n+void riscv_rust_target_cpu_info(void) {\n+    if (TARGET_64BIT)\n+        rust_add_target_info(\"target_arch\", \"riscv64\");\n+    else\n+        rust_add_target_info(\"target_arch\", \"riscv32\");\n+\n+    // names derived from rustc and llvm \n+    if (TARGET_SAVE_RESTORE) \n+        rust_add_target_info(\"target_feature\", \"save-restore\");\n+    // TODO: ensure below variable works\n+    if (riscv_mrelax)\n+        rust_add_target_info(\"target_feature\", \"relax\");\n+    if (TARGET_MUL)\n+        rust_add_target_info(\"target_feature\", \"m\");\n+    if (TARGET_ATOMIC)\n+        rust_add_target_info(\"target_feature\", \"a\");\n+    if (TARGET_HARD_FLOAT)\n+        rust_add_target_info(\"target_feature\", \"f\");\n+    if (TARGET_DOUBLE_FLOAT)\n+        rust_add_target_info(\"target_feature\", \"d\");\n+    if (TARGET_RVC)\n+        rust_add_target_info(\"target_feature\", \"c\");\n+    if (TARGET_RVE)\n+        rust_add_target_info(\"target_feature\", \"e\");\n+    // TODO: add features based on \"B\" and \"V\" extensions when gcc adds them\n+    // TODO: if gcc has it, add \"no-rvc-hints\" flag \n+    // TODO: if gcc has it, add reserve-x1 -> reserve-x31 (user reserve registers)\n+    if (TARGET_64BIT)\n+        rust_add_target_info(\"target_feature\", \"64bit\");\n+    /* TODO: maybe add gcc features with no llvm equivalent, e.g. align-data, riscv-attribute, \n+     * explicit-relocs, strict-align, cmodel, small-data-limit, branch-cost, plt, abi, \n+     * preferred-stack-boundary, fdiv, div */\n+}"}, {"sha": "8b6ea7b4797fae5debc6fbe2e207fe8abd8842fe", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14", "patch": "@@ -30,6 +30,9 @@ along with GCC; see the file COPYING3.  If not see\n /* Target CPU versions for D.  */\n #define TARGET_D_CPU_VERSIONS riscv_d_target_versions\n \n+/* Target CPU info for Rust.  */\n+#define TARGET_RUST_CPU_INFO riscv_rust_target_cpu_info\n+\n /* Default target_flags if no switches are specified  */\n \n #ifndef TARGET_DEFAULT"}, {"sha": "b1acb07323777bb1d01b7dc23cd010d420638cbf", "filename": "gcc/config/riscv/t-riscv", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14/gcc%2Fconfig%2Friscv%2Ft-riscv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14/gcc%2Fconfig%2Friscv%2Ft-riscv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Ft-riscv?ref=ba0c8e0c3603f2d76cfbba9f488fc14e05a4fc14", "patch": "@@ -19,10 +19,16 @@ riscv-d.o: $(srcdir)/config/riscv/riscv-d.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n+\n riscv-shorten-memrefs.o: $(srcdir)/config/riscv/riscv-shorten-memrefs.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n PASSES_EXTRA += $(srcdir)/config/riscv/riscv-passes.def\n \n $(common_out_file): $(srcdir)/config/riscv/riscv-cores.def\n+\n+riscv-rust.o: $(srcdir)/config/riscv/riscv-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+"}]}