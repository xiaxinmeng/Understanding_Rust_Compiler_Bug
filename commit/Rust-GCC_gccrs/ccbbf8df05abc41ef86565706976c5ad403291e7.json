{"sha": "ccbbf8df05abc41ef86565706976c5ad403291e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NiYmY4ZGYwNWFiYzQxZWY4NjU2NTcwNjk3NmM1YWQ0MDMyOTFlNw==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-10-30T14:31:04Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-10-30T14:31:04Z"}, "message": "Implement LWG 2485\n\n* include/debug/array (get(const array<_Tp, _Nm>&&)): New.\n* include/std/array (get(const array<_Tp, _Nm>&&)): Likewise.\n* include/std/tuple (get(const tuple<_Elements...>&&)): Likewise.\n(get(const tuple<_Types...>&&)): Likewise.\n* include/std/utility\n(__pair_get::__const_move_get(const std::pair<_Tp1, _Tp2>&&)):\nLikewise.\n(get(const std::pair<_Tp1, _Tp2>&&)): Likewise.\n(get(const pair<_Tp, _Up>&&)): Likewise.\n(get(const pair<_Up, _Tp>&&)): Likewise.\n* testsuite/20_util/pair/astuple/get.cc: Add tests for\nnew overloads.\n* testsuite/20_util/pair/astuple/get_by_type.cc: Likewise.\n* testsuite/20_util/tuple/element_access/get2.cc: Likewise.\n* testsuite/20_util/tuple/element_access/get2_by_type.cc: Likewise.\n* testsuite/23_containers/array/tuple_interface/get.cc: Likewise.\n* testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc:\nAdjust.\n* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\nLikewise.\n\nFrom-SVN: r254222", "tree": {"sha": "d9ab403161f04d2276aeaef0e7aa163807d1e15a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9ab403161f04d2276aeaef0e7aa163807d1e15a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccbbf8df05abc41ef86565706976c5ad403291e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccbbf8df05abc41ef86565706976c5ad403291e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccbbf8df05abc41ef86565706976c5ad403291e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccbbf8df05abc41ef86565706976c5ad403291e7/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "198a8e3cc5176e9234343060fe95de4035d23ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198a8e3cc5176e9234343060fe95de4035d23ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/198a8e3cc5176e9234343060fe95de4035d23ac3"}], "stats": {"total": 135, "additions": 133, "deletions": 2}, "files": [{"sha": "994eca814c71e2aff5a7f6268e92d3ae2b88f343", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -1,3 +1,27 @@\n+2017-10-30  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement LWG 2485\n+\t* include/debug/array (get(const array<_Tp, _Nm>&&)): New.\n+\t* include/std/array (get(const array<_Tp, _Nm>&&)): Likewise.\n+\t* include/std/tuple (get(const tuple<_Elements...>&&)): Likewise.\n+\t(get(const tuple<_Types...>&&)): Likewise.\n+\t* include/std/utility\n+\t(__pair_get::__const_move_get(const std::pair<_Tp1, _Tp2>&&)):\n+\tLikewise.\n+\t(get(const std::pair<_Tp1, _Tp2>&&)): Likewise.\n+\t(get(const pair<_Tp, _Up>&&)): Likewise.\n+\t(get(const pair<_Up, _Tp>&&)): Likewise.\n+\t* testsuite/20_util/pair/astuple/get.cc: Add tests for\n+\tnew overloads.\n+\t* testsuite/20_util/pair/astuple/get_by_type.cc: Likewise.\n+\t* testsuite/20_util/tuple/element_access/get2.cc: Likewise.\n+\t* testsuite/20_util/tuple/element_access/get2_by_type.cc: Likewise.\n+\t* testsuite/23_containers/array/tuple_interface/get.cc: Likewise.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc:\n+\tAdjust.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n+\tLikewise.\n+\n 2017-10-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/node_handle.h (_Node_insert_return::get): Avoid"}, {"sha": "95edc84f38b9e449c742d4348a62fbb3369b0868", "filename": "libstdc++-v3/include/debug/array", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -306,6 +306,14 @@ namespace __debug\n       return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n \t_S_ref(__arr._M_elems, _Int);\n     }\n+\n+  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    constexpr const _Tp&&\n+    get(const array<_Tp, _Nm>&& __arr) noexcept\n+    {\n+      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      return std::move(__debug::get<_Int>(__arr));\n+    }\n } // namespace __debug\n \n _GLIBCXX_BEGIN_NAMESPACE_VERSION"}, {"sha": "01f7100bae0b99c98eae19f30845ff9d7409a029", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -328,6 +328,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_S_ref(__arr._M_elems, _Int);\n     }\n \n+  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    constexpr const _Tp&&\n+    get(const array<_Tp, _Nm>&& __arr) noexcept\n+    {\n+      static_assert(_Int < _Nm, \"array index is within bounds\");\n+      return std::move(_GLIBCXX_STD_C::get<_Int>(__arr));\n+    }\n+\n _GLIBCXX_END_NAMESPACE_CONTAINER\n } // namespace std\n "}, {"sha": "ac03c9ec402801d79c7597065f045505a47068e9", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -1329,6 +1329,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return std::forward<__element_type&&>(std::get<__i>(__t));\n     }\n \n+  /// Return a const rvalue reference to the ith element of a const tuple rvalue.\n+  template<std::size_t __i, typename... _Elements>\n+    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&\n+    get(const tuple<_Elements...>&& __t) noexcept\n+    {\n+      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;\n+      return std::forward<const __element_type&&>(std::get<__i>(__t));\n+    }\n+\n #if __cplusplus > 201103L\n \n #define __cpp_lib_tuples_by_type 201304\n@@ -1360,6 +1369,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr const _Tp&\n     get(const tuple<_Types...>& __t) noexcept\n     { return std::__get_helper2<_Tp>(__t); }\n+\n+  /// Return a const reference to the unique element of type _Tp of\n+  /// a const tuple rvalue.\n+  template <typename _Tp, typename... _Types>\n+    constexpr const _Tp&&\n+    get(const tuple<_Types...>&& __t) noexcept\n+    { return std::forward<const _Tp&&>(std::__get_helper2<_Tp>(__t)); }\n #endif\n \n   // This class performs the comparison operations on tuples"}, {"sha": "e7386320e2a15bce6bbaf635fe1c27e8116bf342", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -184,6 +184,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         static constexpr const _Tp1&\n         __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept\n         { return __pair.first; }\n+\n+      template<typename _Tp1, typename _Tp2>\n+        static constexpr const _Tp1&&\n+        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept\n+        { return std::forward<const _Tp1>(__pair.first); }\n     };\n \n   template<>\n@@ -203,6 +208,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         static constexpr const _Tp2&\n         __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept\n         { return __pair.second; }\n+\n+      template<typename _Tp1, typename _Tp2>\n+        static constexpr const _Tp2&&\n+        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept\n+        { return std::forward<const _Tp2>(__pair.second); }\n     };\n \n   template<std::size_t _Int, class _Tp1, class _Tp2>\n@@ -220,6 +230,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(const std::pair<_Tp1, _Tp2>& __in) noexcept\n     { return __pair_get<_Int>::__const_get(__in); }\n \n+  template<std::size_t _Int, class _Tp1, class _Tp2>\n+    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&\n+    get(const std::pair<_Tp1, _Tp2>&& __in) noexcept\n+    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }\n+\n #if __cplusplus > 201103L\n \n #define __cpp_lib_tuples_by_type 201304\n@@ -239,6 +254,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(pair<_Tp, _Up>&& __p) noexcept\n     { return std::move(__p.first); }\n \n+  template <typename _Tp, typename _Up>\n+    constexpr const _Tp&&\n+    get(const pair<_Tp, _Up>&& __p) noexcept\n+    { return std::move(__p.first); }\n+\n   template <typename _Tp, typename _Up>\n     constexpr _Tp&\n     get(pair<_Up, _Tp>& __p) noexcept\n@@ -254,6 +274,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(pair<_Up, _Tp>&& __p) noexcept\n     { return std::move(__p.second); }\n \n+  template <typename _Tp, typename _Up>\n+    constexpr const _Tp&&\n+    get(const pair<_Up, _Tp>&& __p) noexcept\n+    { return std::move(__p.second); }\n+\n #define __cpp_lib_exchange_function 201304\n \n   /// Assign @p __new_val to @p __obj and return its previous value."}, {"sha": "e81af3b2f33f06d73fe6655216a5d1fc8d476c10", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/get.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget.cc?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -27,4 +27,9 @@ void test01()\n \n   float&& pfirst __attribute__((unused)) = std::get<0>(std::move(p));\n   int&&  psecond __attribute__((unused)) = std::get<1>(std::move(p));\n+\n+  const std::pair<float, int> cp;\n+\n+  const float&& cpfirst __attribute__((unused)) = std::get<0>(std::move(cp));\n+  const int&&  cpsecond __attribute__((unused)) = std::get<1>(std::move(cp));\n }"}, {"sha": "1e70fbcf43f35e84993622775599a309a738c9d7", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/get_by_type.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_by_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_by_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_by_type.cc?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -25,4 +25,11 @@ void test01()\n \n   float&& pfirst __attribute__((unused)) = std::get<float>(std::move(p));\n   int&&  psecond __attribute__((unused)) = std::get<int>(std::move(p));\n+\n+  const std::pair<float, int> cp;\n+\n+  const float&& cpfirst __attribute__((unused)) =\n+    std::get<float>(std::move(cp));\n+  const int&&  cpsecond __attribute__((unused)) =\n+    std::get<int>(std::move(cp));\n }"}, {"sha": "bc0f1bc899b19f7206b12fa1a2704738c54618a5", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get2.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2.cc?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -37,4 +37,19 @@ void test01()\n   short&&  t3one __attribute__((unused)) = std::get<0>(std::move(t3));\n   int&&    t3two __attribute__((unused)) = std::get<1>(std::move(t3));\n   double&& t3thr __attribute__((unused)) = std::get<2>(std::move(t3));\n+\n+  const std::tuple<int> ct1;\n+\n+  const int&&   ct1one __attribute__((unused)) = std::get<0>(std::move(ct1));\n+\n+  const std::tuple<float, int> ct2;\n+\n+  const float&& ct2one __attribute__((unused)) = std::get<0>(std::move(ct2));\n+  const int&&   ct2two __attribute__((unused)) = std::get<1>(std::move(ct2));\n+\n+  const std::tuple<short, int, double> ct3;\n+\n+  const short&&  ct3one __attribute__((unused)) = std::get<0>(std::move(ct3));\n+  const int&&    ct3two __attribute__((unused)) = std::get<1>(std::move(ct3));\n+  const double&& ct3thr __attribute__((unused)) = std::get<2>(std::move(ct3));\n }"}, {"sha": "cdc1030059a24593d9c26332c2c9d1ac224a60aa", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get2_by_type.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2_by_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2_by_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2_by_type.cc?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -35,4 +35,22 @@ void test01()\n   short&&  t3one __attribute__((unused)) = std::get<short>(std::move(t3));\n   int&&    t3two __attribute__((unused)) = std::get<int>(std::move(t3));\n   double&& t3thr __attribute__((unused)) = std::get<double>(std::move(t3));\n+\n+  const std::tuple<int> ct1;\n+\n+  const int&&   ct1one __attribute__((unused)) = std::get<int>(std::move(ct1));\n+\n+  const std::tuple<float, int> ct2;\n+\n+  const float&& ct2one __attribute__((unused)) = std::get<0>(std::move(ct2));\n+  const int&&   ct2two __attribute__((unused)) = std::get<int>(std::move(ct2));\n+\n+  const std::tuple<short, int, double> ct3;\n+\n+  const short&&  ct3one __attribute__((unused)) =\n+    std::get<short>(std::move(ct3));\n+  const int&&    ct3two __attribute__((unused)) =\n+    std::get<int>(std::move(ct3));\n+  const double&& ct3thr __attribute__((unused)) =\n+    std::get<double>(std::move(ct3));\n }"}, {"sha": "8bc0afb0e9c4946445de3f1648071ae2bbc87552", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget.cc?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -27,4 +27,9 @@ void test01()\n \n   int&& aone __attribute__((unused)) = std::get<0>(std::move(a));\n   int&& atwo __attribute__((unused)) = std::get<1>(std::move(a));\n+\n+  const std::array<int, 2> ca{};\n+\n+  const int&& caone __attribute__((unused)) = std::get<0>(std::move(ca));\n+  const int&& catwo __attribute__((unused)) = std::get<1>(std::move(ca));\n }"}, {"sha": "8e8ef0d756e63abd32ef2f631041fc173126ee13", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -22,4 +22,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 323 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 331 }"}, {"sha": "4e8eb3291cbd0919a8bc6ac83f8744efdddd623f", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbbf8df05abc41ef86565706976c5ad403291e7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=ccbbf8df05abc41ef86565706976c5ad403291e7", "patch": "@@ -22,4 +22,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 357 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 365 }"}]}