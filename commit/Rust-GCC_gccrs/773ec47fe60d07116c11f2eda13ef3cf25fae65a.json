{"sha": "773ec47fe60d07116c11f2eda13ef3cf25fae65a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzczZWM0N2ZlNjBkMDcxMTZjMTFmMmVkYTEzZWYzY2YyNWZhZTY1YQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-07-06T19:00:10Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-07-06T19:00:10Z"}, "message": "re PR c/6940 (taking sizeof array parameter should trigger a warning)\n\n\tPR c/6940\n\t* doc/invoke.texi: Document -Wsizeof-array-argument.\nc-family/\n\t* c.opt (Wsizeof-array-argument): New option.\nc/\n\t* c-decl.c (grokdeclarator): Set C_ARRAY_PARAMETER.\n\t* c-tree.h (C_ARRAY_PARAMETER): Define.\n\t* c-typeck.c (c_expr_sizeof_expr): Warn when using sizeof on an array\n\tfunction parameter.\ncp/\n\t* cp-tree.h (DECL_ARRAY_PARAMETER_P): Define.\n\t* decl.c (grokdeclarator): Set DECL_ARRAY_PARAMETER_P.\n\t* typeck.c (cxx_sizeof_expr): Warn when using sizeof on an array\n\tfunction parameter.\ntestsuite/\n\t* c-c++-common/Wsizeof-pointer-memaccess1.c: Use\n\t-Wno-sizeof-array-argument.\n\t* c-c++-common/Wsizeof-pointer-memaccess2.c: Likewise.\n\t* g++.dg/warn/Wsizeof-pointer-memaccess-1.C: Likewise.\n\t* gcc.dg/Wsizeof-pointer-memaccess1.c: Likewise.\n\t* g++.dg/torture/Wsizeof-pointer-memaccess1.C: Likewise.\n\t* g++.dg/torture/Wsizeof-pointer-memaccess2.C: Likewise.\n\t* gcc.dg/torture/Wsizeof-pointer-memaccess1.c: Likewise.\n\t* c-c++-common/sizeof-array-argument.c: New test.\n\t* gcc.dg/vla-5.c: Add dg-warnings.\n../libgomp/\t* testsuite/libgomp.c/appendix-a/a.29.1.c (f): Add dg-warnings.\n\nFrom-SVN: r212312", "tree": {"sha": "dbe62f51aeeeb3f4e0e71eea55e603f187e0fdbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbe62f51aeeeb3f4e0e71eea55e603f187e0fdbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/773ec47fe60d07116c11f2eda13ef3cf25fae65a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/773ec47fe60d07116c11f2eda13ef3cf25fae65a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/773ec47fe60d07116c11f2eda13ef3cf25fae65a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/773ec47fe60d07116c11f2eda13ef3cf25fae65a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc044bfb723e7c720b9111f0369d1c9165abff70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc044bfb723e7c720b9111f0369d1c9165abff70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc044bfb723e7c720b9111f0369d1c9165abff70"}], "stats": {"total": 214, "additions": 202, "deletions": 12}, "files": [{"sha": "6f8b251d0d8733e3e79233d09e785871b687aba4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,3 +1,8 @@\n+2014-07-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/6940\n+\t* doc/invoke.texi: Document -Wsizeof-array-argument.\n+\n 2014-07-05  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* wide-int.h (wide_int_storage): Change declaration from struct "}, {"sha": "5bd9c1e435ca72256f00f8b52f74587031e9ed90", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,3 +1,8 @@\n+2014-07-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/6940\n+\t* c.opt (Wsizeof-array-argument): New option.\n+\n 2014-07-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-ada-spec.c (dump_ada_nodes): Don't call qsort if "}, {"sha": "faef774e8c4c8dd4547ffecb7981158607fec97f", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -534,6 +534,10 @@ Wsizeof-pointer-memaccess\n C ObjC C++ ObjC++ Var(warn_sizeof_pointer_memaccess) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about suspicious length parameters to certain string functions if the argument uses sizeof\n \n+Wsizeof-array-argument\n+C ObjC C++ ObjC++ Var(warn_sizeof_array_argument) Warning Init(1)\n+Warn when sizeof is applied on a parameter declared as an array\n+\n Wsuggest-attribute=format\n C ObjC C++ ObjC++ Var(warn_suggest_attribute_format) Warning\n Warn about functions which might be candidates for format attributes"}, {"sha": "80ad172c5963db4ffdc04da6a19358964b3f7273", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,3 +1,11 @@\n+2014-07-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/6940\n+\t* c-decl.c (grokdeclarator): Set C_ARRAY_PARAMETER.\n+\t* c-tree.h (C_ARRAY_PARAMETER): Define.\n+\t* c-typeck.c (c_expr_sizeof_expr): Warn when using sizeof on an array\n+\tfunction parameter.\n+\n 2014-07-02  Jan Hubicka  <hubicka@ucw.cz>\n \t    Chen Gang <gang.chen.5i5j@gmail.com>\n "}, {"sha": "0ca2e0d58f4c355389ab0722bc26fe3f007f9f00", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -6103,6 +6103,7 @@ grokdeclarator (const struct c_declarator *declarator,\n     if (decl_context == PARM)\n       {\n \ttree promoted_type;\n+\tbool array_parameter_p = false;\n \n \t/* A parameter declared as an array of T is really a pointer to T.\n \t   One declared as a function is really a pointer to a function.  */\n@@ -6124,6 +6125,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t\t  \"attributes in parameter array declarator ignored\");\n \n \t    size_varies = false;\n+\t    array_parameter_p = true;\n \t  }\n \telse if (TREE_CODE (type) == FUNCTION_TYPE)\n \t  {\n@@ -6148,6 +6150,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t\t   PARM_DECL, declarator->u.id, type);\n \tif (size_varies)\n \t  C_DECL_VARIABLE_SIZE (decl) = 1;\n+\tC_ARRAY_PARAMETER (decl) = array_parameter_p;\n \n \t/* Compute the type actually passed in the parmlist,\n \t   for the case where there is no prototype."}, {"sha": "f97d0d5ba9b49daf3292f0c3494310df36e50dd0", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -66,6 +66,9 @@ along with GCC; see the file COPYING3.  If not see\n /* For a FUNCTION_DECL, nonzero if it was an implicit declaration.  */\n #define C_DECL_IMPLICIT(EXP) DECL_LANG_FLAG_2 (EXP)\n \n+/* For a PARM_DECL, nonzero if it was declared as an array.  */\n+#define C_ARRAY_PARAMETER(NODE) DECL_LANG_FLAG_0 (NODE)\n+\n /* For FUNCTION_DECLs, evaluates true if the decl is built-in but has\n    been declared.  */\n #define C_DECL_DECLARED_BUILTIN(EXP)\t\t\\"}, {"sha": "06fd565f7708f2c8c9578199dd98f36e018a2442", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -2731,6 +2731,16 @@ c_expr_sizeof_expr (location_t loc, struct c_expr expr)\n   else\n     {\n       bool expr_const_operands = true;\n+\n+      if (TREE_CODE (expr.value) == PARM_DECL\n+\t  && C_ARRAY_PARAMETER (expr.value))\n+\t{\n+\t  if (warning_at (loc, OPT_Wsizeof_array_argument,\n+\t\t\t  \"%<sizeof%> on array function parameter %qE will \"\n+\t\t\t  \"return size of %qT\", expr.value,\n+\t\t\t  expr.original_type))\n+\t    inform (DECL_SOURCE_LOCATION (expr.value), \"declared here\");\n+\t}\n       tree folded_expr = c_fully_fold (expr.value, require_constant_value,\n \t\t\t\t       &expr_const_operands);\n       ret.value = c_sizeof (loc, TREE_TYPE (folded_expr));"}, {"sha": "93b05fa7326eaef766a65a80ff626aec01fbca49", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,3 +1,11 @@\n+2014-07-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/6940\n+\t* cp-tree.h (DECL_ARRAY_PARAMETER_P): Define.\n+\t* decl.c (grokdeclarator): Set DECL_ARRAY_PARAMETER_P.\n+\t* typeck.c (cxx_sizeof_expr): Warn when using sizeof on an array\n+\tfunction parameter.\n+\n 2014-07-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* pt.c (convert_template_argument): Use inform instead of error in"}, {"sha": "4a5cb989977e8b921c7c4bb2fbc460d784b5269a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -146,6 +146,7 @@ c-common.h, not after.\n       DECL_MEMBER_TEMPLATE_P (in TEMPLATE_DECL)\n       USING_DECL_TYPENAME_P (in USING_DECL)\n       DECL_VLA_CAPTURE_P (in FIELD_DECL)\n+      DECL_ARRAY_PARAMETER_P (in PARM_DECL)\n    2: DECL_THIS_EXTERN (in VAR_DECL or FUNCTION_DECL).\n       DECL_IMPLICIT_TYPEDEF_P (in a TYPE_DECL)\n    3: DECL_IN_AGGR_P.\n@@ -3681,6 +3682,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define DECL_VLA_CAPTURE_P(NODE) \\\n   DECL_LANG_FLAG_1 (FIELD_DECL_CHECK (NODE))\n \n+/* Nonzero for PARM_DECL node means that this is an array function\n+   parameter, i.e, a[] rather than *a.  */\n+#define DECL_ARRAY_PARAMETER_P(NODE) \\\n+  DECL_LANG_FLAG_1 (PARM_DECL_CHECK (NODE))\n+\n /* Nonzero for FIELD_DECL node means that this field is a base class\n    of the parent object, as opposed to a member field.  */\n #define DECL_FIELD_IS_BASE(NODE) \\"}, {"sha": "5ab8ccd2588b08ca516d42c2563d911e2bf35c1a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -8816,6 +8816,7 @@ grokdeclarator (const cp_declarator *declarator,\n   bool typedef_p = decl_spec_seq_has_spec_p (declspecs, ds_typedef);\n   bool constexpr_p = decl_spec_seq_has_spec_p (declspecs, ds_constexpr);\n   bool late_return_type_p = false;\n+  bool array_parameter_p = false;\n   source_location saved_loc = input_location;\n   const char *errmsg;\n \n@@ -10454,6 +10455,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  /* Transfer const-ness of array into that of type pointed to.  */\n \t  type = build_pointer_type (TREE_TYPE (type));\n \t  type_quals = TYPE_UNQUALIFIED;\n+\t  array_parameter_p = true;\n \t}\n       else if (TREE_CODE (type) == FUNCTION_TYPE)\n \ttype = build_pointer_type (type);\n@@ -10474,6 +10476,7 @@ grokdeclarator (const cp_declarator *declarator,\n     if (decl_context == PARM)\n       {\n \tdecl = cp_build_parm_decl (unqualified_id, type);\n+\tDECL_ARRAY_PARAMETER_P (decl) = array_parameter_p;\n \n \tbad_specifiers (decl, BSP_PARM, virtualp,\n \t\t\tmemfn_quals != TYPE_UNQUALIFIED,"}, {"sha": "a1ca9370e56cc1506ed12f6e99c2f3b6a8afd1c4", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1614,6 +1614,15 @@ cxx_sizeof_expr (tree e, tsubst_flags_t complain)\n       && DECL_TEMPLATE_INSTANTIATION (e))\n     instantiate_decl (e, /*defer_ok*/true, /*expl_inst_mem*/false);\n \n+  if (TREE_CODE (e) == PARM_DECL\n+      && DECL_ARRAY_PARAMETER_P (e)\n+      && (complain & tf_warning))\n+    {\n+      if (warning (OPT_Wsizeof_array_argument, \"%<sizeof%> on array function \"\n+\t\t   \"parameter %qE will return size of %qT\", e, TREE_TYPE (e)))\n+\tinform (DECL_SOURCE_LOCATION (e), \"declared here\");\n+    }\n+\n   e = mark_type_use (e);\n \n   if (TREE_CODE (e) == COMPONENT_REF"}, {"sha": "111a67e60f2015012e843fa51e01d2111cfb0230", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -266,7 +266,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wredundant-decls  -Wno-return-local-addr @gol\n -Wreturn-type  -Wsequence-point  -Wshadow  -Wno-shadow-ivar @gol\n -Wsign-compare  -Wsign-conversion -Wfloat-conversion @gol\n--Wsizeof-pointer-memaccess @gol\n+-Wsizeof-pointer-memaccess  -Wsizeof-array-argument @gol\n -Wstack-protector -Wstack-usage=@var{len} -Wstrict-aliasing @gol\n -Wstrict-aliasing=n @gol -Wstrict-overflow -Wstrict-overflow=@var{n} @gol\n -Wsuggest-attribute=@r{[}pure@r{|}const@r{|}noreturn@r{|}format@r{]} @gol\n@@ -4676,6 +4676,13 @@ but a pointer, and suggests a possible fix, or about\n @code{memcpy (&foo, ptr, sizeof (&foo));}.  This warning is enabled by\n @option{-Wall}.\n \n+@item -Wsizeof-array-argument\n+@opindex Wsizeof-array-argument\n+@opindex Wno-sizeof-array-argument\n+Warn when the @code{sizeof} operator is applied to a parameter that is\n+declared as an array in a function definition.  This warning is enabled by\n+default for C and C++ programs.\n+\n @item -Waddress\n @opindex Waddress\n @opindex Wno-address"}, {"sha": "25084765568861640f5056a2f7cadef2a61b4eab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,3 +1,17 @@\n+2014-07-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/6940\n+\t* c-c++-common/Wsizeof-pointer-memaccess1.c: Use\n+\t-Wno-sizeof-array-argument.\n+\t* c-c++-common/Wsizeof-pointer-memaccess2.c: Likewise.\n+\t* g++.dg/warn/Wsizeof-pointer-memaccess-1.C: Likewise.\n+\t* gcc.dg/Wsizeof-pointer-memaccess1.c: Likewise.\n+\t* g++.dg/torture/Wsizeof-pointer-memaccess1.C: Likewise.\n+\t* g++.dg/torture/Wsizeof-pointer-memaccess2.C: Likewise.\n+\t* gcc.dg/torture/Wsizeof-pointer-memaccess1.c: Likewise.\n+\t* c-c++-common/sizeof-array-argument.c: New test.\n+\t* gcc.dg/vla-5.c: Add dg-warnings.\n+\n 2014-07-05  Jan Hubicka   <hubicka@ucw.cz>\n \n \t* g++.dg/ipa/devirt-26.C: Update testcase."}, {"sha": "8e829d61ae0b784fee319753bd916c4a3b2dbdff", "filename": "gcc/testsuite/c-c++-common/Wsizeof-pointer-memaccess1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess1.c?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,6 +1,6 @@\n /* Test -Wsizeof-pointer-memaccess warnings.  */\n /* { dg-do compile } */\n-/* { dg-options \"-Wall\" } */\n+/* { dg-options \"-Wall -Wno-sizeof-array-argument\" } */\n \n typedef __SIZE_TYPE__ size_t;\n #ifdef __cplusplus"}, {"sha": "fe17a7056abdab26e73744c95c3cc9a08f0bdfde", "filename": "gcc/testsuite/c-c++-common/Wsizeof-pointer-memaccess2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess2.c?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,6 +1,6 @@\n /* Test -Wsizeof-pointer-memaccess warnings.  */\n /* { dg-do compile } */\n-/* { dg-options \"-Wall -O2\" } */\n+/* { dg-options \"-Wall -O2 -Wno-sizeof-array-argument\" } */\n \n #define bos(ptr) __builtin_object_size (ptr, 1)\n #define bos0(ptr) __builtin_object_size (ptr, 0)"}, {"sha": "eedfceec2cfc8502e2779b414cb7888446691313", "filename": "gcc/testsuite/c-c++-common/sizeof-array-argument.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsizeof-array-argument.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsizeof-array-argument.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsizeof-array-argument.c?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -0,0 +1,100 @@\n+/* PR c/6940 */\n+/* { dg-do compile } */\n+\n+/* Test -Wsizeof-array-argument warning.  */\n+\n+typedef int T[2][2];\n+\n+int\n+fn1 (int a[])\n+{\n+  return sizeof a; /* { dg-warning \"on array function parameter\" } */\n+}\n+\n+int\n+fn2 (int x, int b[3])\n+{\n+  return x + sizeof b; /* { dg-warning \"on array function parameter\" } */\n+}\n+\n+int\n+fn3 (int *p)\n+{\n+  return sizeof p;\n+}\n+\n+int fn4 (int *p);\n+int\n+fn4 (int p[])\n+{\n+  return sizeof p; /* { dg-warning \"on array function parameter\" } */\n+}\n+\n+int fn5 (int x[]);\n+int\n+fn5 (int *x)\n+{\n+  return sizeof x;\n+}\n+\n+#ifndef __cplusplus\n+/* C++ doesn't know VLA unspec.  */\n+int fn6 (int x[*]);\n+int\n+fn6 (int x[])\n+{\n+  return sizeof x; /* { dg-warning \"on array function parameter\" \"\" { target c } } */\n+}\n+#endif\n+\n+int\n+fn7 (int x[][2])\n+{\n+  return sizeof x; /* { dg-warning \"on array function parameter\" } */\n+}\n+\n+int\n+fn8 (char *x[])\n+{\n+  return sizeof x; /* { dg-warning \"on array function parameter\" } */\n+}\n+\n+int\n+fn9 (char **x)\n+{\n+  return sizeof x;\n+}\n+\n+#ifndef __cplusplus\n+int\n+fn10 (int a, char x[static sizeof a])\n+{\n+  return sizeof x; /* { dg-warning \"on array function parameter\" \"\" { target c } } */\n+}\n+\n+int\n+fn11 (a)\n+  char a[];\n+{\n+  return sizeof a; /* { dg-warning \"on array function parameter\" \"\" { target c } } */\n+}\n+\n+int\n+fn12 (a)\n+  char *a;\n+{\n+  return sizeof a;\n+}\n+#endif\n+\n+int\n+fn13 (char (*x)[2])\n+{\n+  return sizeof x;\n+}\n+\n+int\n+fn14 (T t)\n+{\n+  return sizeof t; /* { dg-warning \"on array function parameter\" } */\n+}"}, {"sha": "8b5c33e24b3d7f6072df418bf7b58133dd16f049", "filename": "gcc/testsuite/g++.dg/torture/Wsizeof-pointer-memaccess1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2FWsizeof-pointer-memaccess1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2FWsizeof-pointer-memaccess1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2FWsizeof-pointer-memaccess1.C?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,6 +1,6 @@\n // Test -Wsizeof-pointer-memaccess warnings.\n // { dg-do compile }\n-// { dg-options \"-Wall\" }\n+// { dg-options \"-Wall -Wno-sizeof-array-argument\" }\n // Test just twice, once with -O0 non-fortified, once with -O2 fortified.\n // { dg-skip-if \"\" { *-*-* }  { \"*\" } { \"-O0\" \"-O2\" } }\n // { dg-skip-if \"\" { *-*-* }  { \"-flto\" } { \"\" } }"}, {"sha": "0e99568d3f3d26d02281f3527e94ecb98a3b9281", "filename": "gcc/testsuite/g++.dg/torture/Wsizeof-pointer-memaccess2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2FWsizeof-pointer-memaccess2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2FWsizeof-pointer-memaccess2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2FWsizeof-pointer-memaccess2.C?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,6 +1,6 @@\n // Test -Wsizeof-pointer-memaccess warnings.\n // { dg-do compile }\n-// { dg-options \"-Wall\" }\n+// { dg-options \"-Wall -Wno-sizeof-array-argument\" }\n // Test just twice, once with -O0 non-fortified, once with -O2 fortified.\n // { dg-skip-if \"\" { *-*-* }  { \"*\" } { \"-O0\" \"-O2\" } }\n // { dg-skip-if \"\" { *-*-* }  { \"-flto\" } { \"\" } }"}, {"sha": "798cb6de0440de6c479f12bc69f7fc252e4ca4aa", "filename": "gcc/testsuite/g++.dg/warn/Wsizeof-pointer-memaccess-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsizeof-pointer-memaccess-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsizeof-pointer-memaccess-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsizeof-pointer-memaccess-1.C?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,6 +1,6 @@\n // Test -Wsizeof-pointer-memaccess warnings.\n // { dg-do compile }\n-// { dg-options \"-Wall\" }\n+// { dg-options \"-Wall -Wno-sizeof-array-argument\" }\n \n typedef __SIZE_TYPE__ size_t;\n extern \"C\" void *memset (void *, int, size_t);"}, {"sha": "66be5a5c4b21929612f27cc11bf6c7d4f229a84e", "filename": "gcc/testsuite/gcc.dg/Wsizeof-pointer-memaccess1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fgcc.dg%2FWsizeof-pointer-memaccess1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fgcc.dg%2FWsizeof-pointer-memaccess1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWsizeof-pointer-memaccess1.c?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,6 +1,6 @@\n /* Test -Wsizeof-pointer-memaccess warnings.  */\n /* { dg-do compile } */\n-/* { dg-options \"-Wall\" } */\n+/* { dg-options \"-Wall -Wno-sizeof-array-argument\" } */\n \n typedef __SIZE_TYPE__ size_t;\n extern void bzero (void *, size_t);"}, {"sha": "a82f4efbdafabd1f2a7eb7c8c58de0678ae123e7", "filename": "gcc/testsuite/gcc.dg/torture/Wsizeof-pointer-memaccess1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2FWsizeof-pointer-memaccess1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2FWsizeof-pointer-memaccess1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2FWsizeof-pointer-memaccess1.c?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,6 +1,6 @@\n /* Test -Wsizeof-pointer-memaccess warnings.  */\n /* { dg-do compile } */\n-/* { dg-options \"-Wall\" } */\n+/* { dg-options \"-Wall -Wno-sizeof-array-argument\" } */\n /* Test just twice, once with -O0 non-fortified, once with -O2 fortified.  */\n /* { dg-skip-if \"\" { *-*-* }  { \"*\" } { \"-O0\" \"-O2\" } } */\n /* { dg-skip-if \"\" { *-*-* }  { \"-flto\" } { \"\" } } */"}, {"sha": "2c253b5075841a48290ade342d8e6b4101def778", "filename": "gcc/testsuite/gcc.dg/vla-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-5.c?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -13,12 +13,12 @@ void foo4(int j, int a[j]) {\n \n int foo5(int a, int b[*][*], int c[static sizeof(*b)]);\n int foo5(int a, int b[10][10], int c[400]) {\n-  return sizeof (c);\n+  return sizeof (c); /* { dg-warning \"on array function parameter\" } */\n }\n \n int foo6(int a, int b[*][*], int c[static sizeof(*b)]);\n int foo6(int a, int b[a][a], int c[sizeof(*b)]) {\n-  return sizeof (c);\n+  return sizeof (c); /* { dg-warning \"on array function parameter\" } */\n }\n \n void foo7(__typeof__ (int (*)(int o[*])) i);"}, {"sha": "dbfc03cb8155a7232de3a0a6bbec9f52612081db", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -1,3 +1,8 @@\n+2014-07-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/6940\n+\t* testsuite/libgomp.c/appendix-a/a.29.1.c (f): Add dg-warnings.\n+\n 2014-07-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/lib/libgomp.exp (libgomp_target_compile): If $source"}, {"sha": "484321207c80f82f42994e066b96c4ee11b6988c", "filename": "libgomp/testsuite/libgomp.c/appendix-a/a.29.1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/773ec47fe60d07116c11f2eda13ef3cf25fae65a/libgomp%2Ftestsuite%2Flibgomp.c%2Fappendix-a%2Fa.29.1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/773ec47fe60d07116c11f2eda13ef3cf25fae65a/libgomp%2Ftestsuite%2Flibgomp.c%2Fappendix-a%2Fa.29.1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fappendix-a%2Fa.29.1.c?ref=773ec47fe60d07116c11f2eda13ef3cf25fae65a", "patch": "@@ -11,8 +11,8 @@ f (int n, int B[n][n], int C[])\n   E[1][1] = 4;\n #pragma omp parallel firstprivate(B, C, D, E)\n   {\n-    assert (sizeof (B) == sizeof (int (*)[n]));\n-    assert (sizeof (C) == sizeof (int *));\n+    assert (sizeof (B) == sizeof (int (*)[n])); /* { dg-warning \"on array function parameter\" } */\n+    assert (sizeof (C) == sizeof (int *)); /* { dg-warning \"on array function parameter\" } */\n     assert (sizeof (D) == 4 * sizeof (int));\n     assert (sizeof (E) == n * n * sizeof (int));\n     /* Private B and C have values of original B and C. */"}]}