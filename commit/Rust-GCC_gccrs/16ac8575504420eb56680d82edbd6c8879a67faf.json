{"sha": "16ac8575504420eb56680d82edbd6c8879a67faf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZhYzg1NzU1MDQ0MjBlYjU2NjgwZDgyZWRiZDZjODg3OWE2N2ZhZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-20T22:06:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-20T22:06:40Z"}, "message": "tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Remove special casing of constant qualifiers.\n\n2008-03-20  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Remove\n\tspecial casing of constant qualifiers.\n\t* tree-ssa.c (useless_type_conversion_p_1): Instead do not\n\tcare about them in general.\n\t* tree-ssa-ccp.c (ccp_fold): Addresses are constant or not\n\tregardless of their type.\n\t(fold_stmt_r): Forcefully fold *& if we end up with that.\n\n\t* gcc.dg/tree-ssa/ssa-ccp-17.c: New testcase.\n\nFrom-SVN: r133400", "tree": {"sha": "bd5e138f1c805a2f582aec0ad63aaaa70c10283c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd5e138f1c805a2f582aec0ad63aaaa70c10283c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16ac8575504420eb56680d82edbd6c8879a67faf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ac8575504420eb56680d82edbd6c8879a67faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16ac8575504420eb56680d82edbd6c8879a67faf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ac8575504420eb56680d82edbd6c8879a67faf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44b6c5465840c7cd4737c0a0bc434c38dfa4eca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b6c5465840c7cd4737c0a0bc434c38dfa4eca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44b6c5465840c7cd4737c0a0bc434c38dfa4eca4"}], "stats": {"total": 89, "additions": 67, "deletions": 22}, "files": [{"sha": "559c1dd2c46ac040f3dc8842889091a60680280b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16ac8575504420eb56680d82edbd6c8879a67faf", "patch": "@@ -1,3 +1,13 @@\n+2008-03-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Remove\n+\tspecial casing of constant qualifiers.\n+\t* tree-ssa.c (useless_type_conversion_p_1): Instead do not\n+\tcare about them in general.\n+\t* tree-ssa-ccp.c (ccp_fold): Addresses are constant or not\n+\tregardless of their type.\n+\t(fold_stmt_r): Forcefully fold *& if we end up with that.\n+\n 2008-03-20  Paul Brook  <paul@codesourcery.com>\n \n \t* config.gcc (arm*-*-uclinux*): Remove duplicate arm/uclinux-elf.h."}, {"sha": "5eb84fe3d7c51b3071717a56fab759632062e38e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16ac8575504420eb56680d82edbd6c8879a67faf", "patch": "@@ -1,3 +1,7 @@\n+2008-03-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-ccp-17.c: New testcase.\n+\n 2008-03-20 Victor Kaplansky  <victork@gcc.gnu.org>\n \t   Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "7d769ae176a7bea5e233f95c6b05978bd9947c43", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-17.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-17.c?ref=16ac8575504420eb56680d82edbd6c8879a67faf", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+int foo(void)\n+{\n+  int i = 0;\n+  char *p = (char *)&i;\n+  return *(int *)p;\n+}\n+\n+struct Foo {\n+  int i;\n+} f;\n+\n+int bar(void)\n+{\n+  char *p = (char *)&f;\n+  return ((struct Foo *)p)->i;\n+}\n+\n+const struct Foo g;\n+\n+int foobar(void)\n+{\n+  struct Foo *p = (struct Foo *)&g;\n+  return ((const struct Foo *)p)->i;\n+}\n+\n+/* { dg-final { scan-tree-dump \"= i;\" \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump \"= f.i;\" \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump \"= g.i;\" \"ccp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "7797de12f6b7bf2b60f24031093b0c85f0646726", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=16ac8575504420eb56680d82edbd6c8879a67faf", "patch": "@@ -947,8 +947,15 @@ ccp_fold (tree stmt)\n \t    op0 = get_value (op0)->value;\n \t}\n \n+      /* Conversions are useless for CCP purposes if they are\n+\t value-preserving.  Thus the restrictions that\n+\t useless_type_conversion_p places for pointer type conversions do\n+\t not apply here.  Substitution later will only substitute to\n+\t allowed places.  */\n       if ((code == NOP_EXPR || code == CONVERT_EXPR)\n-\t  && useless_type_conversion_p (TREE_TYPE (rhs), TREE_TYPE (op0)))\n+\t  && ((POINTER_TYPE_P (TREE_TYPE (rhs))\n+\t       && POINTER_TYPE_P (TREE_TYPE (op0)))\n+\t      || useless_type_conversion_p (TREE_TYPE (rhs), TREE_TYPE (op0))))\n \treturn op0;\n       return fold_unary (code, TREE_TYPE (rhs), op0);\n     }\n@@ -2160,6 +2167,11 @@ fold_stmt_r (tree *expr_p, int *walk_subtrees, void *data)\n \n       t = maybe_fold_stmt_indirect (expr, TREE_OPERAND (expr, 0),\n \t\t\t\t    integer_zero_node);\n+      if (!t\n+\t  && TREE_CODE (TREE_OPERAND (expr, 0)) == ADDR_EXPR)\n+\t/* If we had a good reason for propagating the address here,\n+\t   make sure we end up with valid gimple.  See PR34989.  */\n+\tt = TREE_OPERAND (TREE_OPERAND (expr, 0), 0);\n       break;\n \n     case NOP_EXPR:"}, {"sha": "e6402adce55423328ce57604d338f3907a16595f", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=16ac8575504420eb56680d82edbd6c8879a67faf", "patch": "@@ -601,14 +601,8 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs, tree use_stmt,\n      propagate the ADDR_EXPR into the use of NAME and fold the result.  */\n   if (TREE_CODE (lhs) == INDIRECT_REF\n       && TREE_OPERAND (lhs, 0) == name\n-      /* This will not allow stripping const qualification from\n-\t pointers which we want to allow specifically here to clean up\n-\t the IL for initialization of constant objects.   */\n-      && (useless_type_conversion_p (TREE_TYPE (TREE_OPERAND (lhs, 0)),\n-\t\t\t\t     TREE_TYPE (def_rhs))\n-\t  /* So explicitly check for this here.  */\n-\t  || (TYPE_QUALS (TREE_TYPE (TREE_TYPE (TREE_OPERAND (lhs, 0))))\n-\t      ^ TYPE_QUALS (TREE_TYPE (TREE_TYPE (def_rhs)))) == TYPE_QUAL_CONST)\n+      && useless_type_conversion_p (TREE_TYPE (TREE_OPERAND (lhs, 0)),\n+\t\t\t\t    TREE_TYPE (def_rhs))\n       /* ???  This looks redundant, but is required for bogus types\n \t that can sometimes occur.  */\n       && useless_type_conversion_p (TREE_TYPE (lhs),\n@@ -635,13 +629,10 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs, tree use_stmt,\n      propagate the ADDR_EXPR into the use of NAME and fold the result.  */\n   if (TREE_CODE (rhs) == INDIRECT_REF\n       && TREE_OPERAND (rhs, 0) == name\n-      /* ???  This doesn't allow stripping const qualification to\n-\t streamline the IL for reads from non-constant objects.  */\n-      && (useless_type_conversion_p (TREE_TYPE (TREE_OPERAND (rhs, 0)),\n-\t\t\t\t     TREE_TYPE (def_rhs))\n-\t  /* So explicitly check for this here.  */\n-\t  || (TYPE_QUALS (TREE_TYPE (TREE_TYPE (TREE_OPERAND (rhs, 0))))\n-\t      ^ TYPE_QUALS (TREE_TYPE (TREE_TYPE (def_rhs)))) == TYPE_QUAL_CONST)\n+      && useless_type_conversion_p (TREE_TYPE (TREE_OPERAND (rhs, 0)),\n+\t\t\t\t    TREE_TYPE (def_rhs))\n+      /* ???  This looks redundant, but is required for bogus types\n+\t that can sometimes occur.  */\n       && useless_type_conversion_p (TREE_TYPE (rhs),\n \t\t\t\t    TREE_TYPE (TREE_OPERAND (def_rhs, 0))))\n     {"}, {"sha": "f7306b1833dda5b7bc8f48b6c8fc0089c65a80f4", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ac8575504420eb56680d82edbd6c8879a67faf/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=16ac8575504420eb56680d82edbd6c8879a67faf", "patch": "@@ -1117,12 +1117,8 @@ useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n \t      != get_alias_set (TREE_TYPE (outer_type))))\n \treturn false;\n \n-      /* Do not lose casts from const qualified to non-const\n-\t qualified.  */\n-      if ((TYPE_READONLY (TREE_TYPE (outer_type))\n-\t   != TYPE_READONLY (TREE_TYPE (inner_type)))\n-\t  && TYPE_READONLY (TREE_TYPE (inner_type)))\n-\treturn false;\n+      /* We do not care for const qualification of the pointed-to types\n+\t as const qualification has no semantic value to the middle-end.  */\n \n       /* Do not lose casts to restrict qualified pointers.  */\n       if ((TYPE_RESTRICT (outer_type)"}]}