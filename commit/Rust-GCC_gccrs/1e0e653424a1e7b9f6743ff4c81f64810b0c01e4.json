{"sha": "1e0e653424a1e7b9f6743ff4c81f64810b0c01e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwZTY1MzQyNGExZTdiOWY2NzQzZmY0YzgxZjY0ODEwYjBjMDFlNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T13:58:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T13:58:01Z"}, "message": "[multiple changes]\n\n2009-11-30  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb (Check_Files): Recognize documented switches that have a\n\tseparate parameter.\n\n2009-11-30  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.ads: Minor reformatting\n\t* errout.adb: Minor reformatting\n\tMinor code reorganization (use N_Subprogram_Specification to simplify)\n\t* exp_ch7.adb: Add comment.\n\nFrom-SVN: r154802", "tree": {"sha": "8365653ba4acf1a5f451aa845485ec769d8c1798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8365653ba4acf1a5f451aa845485ec769d8c1798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4/comments", "author": null, "committer": null, "parents": [{"sha": "c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ff22e7b3ffc1e45b043e1bd35bb3b0bad90817"}], "stats": {"total": 142, "additions": 86, "deletions": 56}, "files": [{"sha": "a93eedfa939b211a13e39b97156fb5bd7003030e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1e0e653424a1e7b9f6743ff4c81f64810b0c01e4", "patch": "@@ -1,3 +1,15 @@\n+2009-11-30  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (Check_Files): Recognize documented switches that have a\n+\tseparate parameter.\n+\n+2009-11-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.ads: Minor reformatting\n+\t* errout.adb: Minor reformatting\n+\tMinor code reorganization (use N_Subprogram_Specification to simplify)\n+\t* exp_ch7.adb: Add comment.\n+\n 2009-11-30  Thomas Quinot  <quinot@adacore.com>\n \n \t* put_scos.adb (Put_SCOs): Do not generate a SCO unit header for a unit"}, {"sha": "651b43d112257438d82fae232945f117c83e4991", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=1e0e653424a1e7b9f6743ff4c81f64810b0c01e4", "patch": "@@ -2851,14 +2851,12 @@ package body Errout is\n                   if Is_Itype (Ent) then\n                      declare\n                         Assoc : constant Node_Id :=\n-                          Associated_Node_For_Itype (Ent);\n+                                  Associated_Node_For_Itype (Ent);\n \n                      begin\n-                        if Nkind (Assoc) = N_Procedure_Specification\n-                          or else Nkind (Assoc) = N_Function_Specification\n-                        then\n+                        if Nkind (Assoc) in N_Subprogram_Specification then\n \n-                           --  Anonymous access to subprogram in a signature\n+                           --  Anonymous access to subprogram in a signature.\n                            --  Indicate the enclosing subprogram.\n \n                            Ent :=\n@@ -2878,6 +2876,7 @@ package body Errout is\n                else\n                   Set_Msg_Str (\"access to procedure \");\n                end if;\n+\n                exit;\n \n             --  Type is access to object, named or anonymous"}, {"sha": "db3cd20baf1e13b59b547373ad3282a523773402", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=1e0e653424a1e7b9f6743ff4c81f64810b0c01e4", "patch": "@@ -3288,9 +3288,10 @@ package body Exp_Ch7 is\n \n    begin\n       --  Class-wide types must be treated as controlled because they may\n-      --  contain an extension that has controlled components\n+      --  contain an extension that has controlled components.\n \n-      --  We can skip this if finalization is not available\n+      --  We can skip this if finalization is not available.\n+      --  or if it is a value type (because ???)\n \n       return (Is_Class_Wide_Type (T)\n                 and then not In_Finalization_Root (T)"}, {"sha": "1588d4e43a8515d5a85c3ae7ebbffecce4f0ae89", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=1e0e653424a1e7b9f6743ff4c81f64810b0c01e4", "patch": "@@ -318,8 +318,31 @@ procedure GNATCmd is\n \n       for Index in 1 .. Last_Switches.Last loop\n          if Last_Switches.Table (Index) (1) /= '-' then\n-            Add_Sources := False;\n-            exit;\n+            if Index = 1\n+              or else\n+                (The_Command = Check\n+                   and then\n+                     Last_Switches.Table (Index - 1).all /= \"-o\")\n+              or else\n+                (The_Command = Pretty\n+                   and then\n+                     Last_Switches.Table (Index - 1).all /= \"-o\"  and then\n+                     Last_Switches.Table (Index - 1).all /= \"-of\")\n+              or else\n+                (The_Command = Metric\n+                   and then\n+                     Last_Switches.Table (Index - 1).all /= \"-o\"  and then\n+                     Last_Switches.Table (Index - 1).all /= \"-og\" and then\n+                     Last_Switches.Table (Index - 1).all /= \"-ox\" and then\n+                     Last_Switches.Table (Index - 1).all /= \"-d\")\n+              or else\n+                (The_Command /= Check  and then\n+                 The_Command /= Pretty and then\n+                 The_Command /= Metric)\n+            then\n+               Add_Sources := False;\n+               exit;\n+            end if;\n          end if;\n       end loop;\n "}, {"sha": "1a11cb9f6949ae08d6b4b4d86a4bd95d1262d763", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 42, "deletions": 47, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0e653424a1e7b9f6743ff4c81f64810b0c01e4/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=1e0e653424a1e7b9f6743ff4c81f64810b0c01e4", "patch": "@@ -619,24 +619,22 @@ package Sem_Util is\n    --  corresponding private part must not.\n \n    procedure Insert_Explicit_Dereference (N : Node_Id);\n-   --  In a context that requires a composite or subprogram type and\n-   --  where a prefix is an access type, rewrite the access type node\n-   --  N (which is the prefix, e.g. of an indexed component) as an\n-   --  explicit dereference.\n+   --  In a context that requires a composite or subprogram type and where a\n+   --  prefix is an access type, rewrite the access type node N (which is the\n+   --  prefix, e.g. of an indexed component) as an explicit dereference.\n \n    procedure Inspect_Deferred_Constant_Completion (Decls : List_Id);\n    --  Examine all deferred constants in the declaration list Decls and check\n    --  whether they have been completed by a full constant declaration or an\n    --  Import pragma. Emit the error message if that is not the case.\n \n    function Is_AAMP_Float (E : Entity_Id) return Boolean;\n-   --  Defined for all type entities. Returns True only for the base type\n-   --  of float types with AAMP format. The particular format is determined\n-   --  by the Digits_Value value which is 6 for the 32-bit floating point type,\n-   --  or 9 for the 48-bit type. This is not an attribute function (like\n-   --  VAX_Float) in order to not use up an extra flag and to prevent\n-   --  the dependency of Einfo on Targparm which would be required for a\n-   --  synthesized attribute.\n+   --  Defined for all type entities. Returns True only for the base type of\n+   --  float types with AAMP format. The particular format is determined by the\n+   --  Digits_Value value which is 6 for the 32-bit floating point type, or 9\n+   --  for the 48-bit type. This is not an attribute function (like VAX_Float)\n+   --  in order to not use up an extra flag and to prevent the dependency of\n+   --  Einfo on Targparm which would be required for a synthesized attribute.\n \n    function Is_Actual_Out_Parameter (N : Node_Id) return Boolean;\n    --  Determines if N is an actual parameter of out mode in a subprogram call\n@@ -677,10 +675,10 @@ package Sem_Util is\n    --  False. The nodes passed to this function are assumed to denote objects.\n \n    function Is_Dereferenced (N : Node_Id) return Boolean;\n-   --  N is a subexpression node of an access type. This function returns\n-   --  true if N appears as the prefix of a node that does a dereference\n-   --  of the access value (selected/indexed component, explicit dereference\n-   --  or a slice), and false otherwise.\n+   --  N is a subexpression node of an access type. This function returns true\n+   --  if N appears as the prefix of a node that does a dereference of the\n+   --  access value (selected/indexed component, explicit dereference or a\n+   --  slice), and false otherwise.\n \n    function Is_Descendent_Of (T1 : Entity_Id; T2 : Entity_Id) return Boolean;\n    --  Returns True if type T1 is a descendent of type T2, and false otherwise.\n@@ -721,8 +719,8 @@ package Sem_Util is\n    --  i.e. a library unit or an entity declared in a library package.\n \n    function Is_Local_Variable_Reference (Expr : Node_Id) return Boolean;\n-   --  Determines whether Expr is a reference to a variable or IN OUT\n-   --  mode parameter of the current enclosing subprogram.\n+   --  Determines whether Expr is a reference to a variable or IN OUT mode\n+   --  parameter of the current enclosing subprogram.\n    --  Why are OUT parameters not considered here ???\n \n    function Is_Object_Reference (N : Node_Id) return Boolean;\n@@ -737,12 +735,11 @@ package Sem_Util is\n    --  target are considered view conversions and hence variables.\n \n    function Is_Partially_Initialized_Type (Typ : Entity_Id) return Boolean;\n-   --  Typ is a type entity. This function returns true if this type is\n-   --  partly initialized, meaning that an object of the type is at least\n-   --  partly initialized (in particular in the record case, that at least\n-   --  one component has an initialization expression). Note that\n-   --  initialization resulting from the use of pragma Normalized_Scalars does\n-   --  not count.\n+   --  Typ is a type entity. This function returns true if this type is partly\n+   --  initialized, meaning that an object of the type is at least partly\n+   --  initialized (in particular in the record case, that at least one\n+   --  component has an initialization expression). Note that initialization\n+   --  resulting from the use of pragma Normalized_Scalars does not count.\n \n    function Is_Potentially_Persistent_Type (T : Entity_Id) return Boolean;\n    --  Determines if type T is a potentially persistent type. A potentially\n@@ -799,37 +796,35 @@ package Sem_Util is\n \n    function Is_Value_Type (T : Entity_Id) return Boolean;\n    --  Returns true if type T represents a value type. This is only relevant to\n-   --  CIL, will always return false for other targets.\n-   --  A value type is a CIL object that is accessed directly, as opposed to\n-   --  the other CIL objects that are accessed through managed pointers.\n+   --  CIL, will always return false for other targets. A value type is a CIL\n+   --  object that is accessed directly, as opposed to the other CIL objects\n+   --  that are accessed through managed pointers.\n \n    function Is_Delegate (T : Entity_Id) return Boolean;\n    --  Returns true if type T represents a delegate. A Delegate is the CIL\n-   --  object used to represent access-to-subprogram types.\n-   --  This is only relevant to CIL, will always return false for other\n-   --  targets.\n+   --  object used to represent access-to-subprogram types. This is only\n+   --  relevant to CIL, will always return false for other targets.\n \n    function Is_Variable (N : Node_Id) return Boolean;\n-   --  Determines if the tree referenced by N represents a variable, i.e.\n-   --  can appear on the left side of an assignment. There is one situation,\n-   --  namely formal parameters, in which non-tagged type conversions are\n-   --  also considered variables, but Is_Variable returns False for such\n-   --  cases, since it has no knowledge of the context. Note that this is\n-   --  the point at which Assignment_OK is checked, and True is returned\n-   --  for any tree thus marked.\n+   --  Determines if the tree referenced by N represents a variable, i.e. can\n+   --  appear on the left side of an assignment. There is one situation (formal\n+   --  parameters) in which non-tagged type conversions are also considered\n+   --  variables, but Is_Variable returns False for such cases, since it has\n+   --  no knowledge of the context. Note that this is the point at which\n+   --  Assignment_OK is checked, and True is returned for any tree thus marked.\n \n    function Is_Visibly_Controlled (T : Entity_Id) return Boolean;\n-   --  Check whether T is derived from a visibly controlled type.\n-   --  This is true if the root type is declared in Ada.Finalization.\n-   --  If T is derived instead from a private type whose full view\n-   --  is controlled, an explicit Initialize/Adjust/Finalize subprogram\n-   --  does not override the inherited one.\n+   --  Check whether T is derived from a visibly controlled type. This is true\n+   --  if the root type is declared in Ada.Finalization. If T is derived\n+   --  instead from a private type whose full view is controlled, an explicit\n+   --  Initialize/Adjust/Finalize subprogram does not override the inherited\n+   --  one.\n \n    function Is_Volatile_Object (N : Node_Id) return Boolean;\n-   --  Determines if the given node denotes an volatile object in the sense\n-   --  of the legality checks described in RM C.6(12). Note that the test\n-   --  here is for something actually declared as volatile, not for an object\n-   --  that gets treated as volatile (see Einfo.Treat_As_Volatile).\n+   --  Determines if the given node denotes an volatile object in the sense of\n+   --  the legality checks described in RM C.6(12). Note that the test here is\n+   --  for something actually declared as volatile, not for an object that gets\n+   --  treated as volatile (see Einfo.Treat_As_Volatile).\n \n    procedure Kill_Current_Values (Last_Assignment_Only : Boolean := False);\n    --  This procedure is called to clear all constant indications from all\n@@ -867,8 +862,8 @@ package Sem_Util is\n    procedure Kill_Size_Check_Code (E : Entity_Id);\n    --  Called when an address clause or pragma Import is applied to an entity.\n    --  If the entity is a variable or a constant, and size check code is\n-   --  present, this size check code is killed, since the object will not\n-   --  be allocated by the program.\n+   --  present, this size check code is killed, since the object will not be\n+   --  allocated by the program.\n \n    function Known_To_Be_Assigned (N : Node_Id) return Boolean;\n    --  The node N is an entity reference. This function determines whether the"}]}