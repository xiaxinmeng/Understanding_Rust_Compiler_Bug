{"sha": "a6fc00da763fceeb9b7491fe07c6985949da9953", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmYzAwZGE3NjNmY2VlYjliNzQ5MWZlMDdjNjk4NTk0OWRhOTk1Mw==", "commit": {"author": {"name": "Benedikt Huber", "email": "benedikt.huber@theobroma-systems.com", "date": "2015-11-06T17:10:17Z"}, "committer": {"name": "Philipp Tomsich", "email": "ptomsich@gcc.gnu.org", "date": "2015-11-06T17:10:17Z"}, "message": "aarch64-builtins.c: Builtins for rsqrt and rsqrtf.\n\n2015-11-06  Benedikt Huber  <benedikt.huber@theobroma-systems.com>\n\t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n\n\t* config/aarch64/aarch64-builtins.c: Builtins for rsqrt and rsqrtf.\n\t* config/aarch64/aarch64-protos.h: Declare.\n\t* config/aarch64/aarch64-simd.md: Matching expressions for frsqrte and\n\tfrsqrts.\n\t* config/aarch64/aarch64-tuning-flags.def: Added recip_sqrt.\n\t* config/aarch64/aarch64.c: New functions. Emit rsqrt estimation code when\n\tapplicable.\n\t* config/aarch64/aarch64.md: Added enum entries.\n\t* config/aarch64/aarch64.opt: Added option -mlow-precision-recip-sqrt.\n\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_common.h: Common macros for\n\tassembly checks.\n\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_negative_1.c: Make sure\n\tfrsqrts and frsqrte are not emitted.\n\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_1.c: Make sure frsqrts and\n\tfrsqrte are emitted.\n\t* testsuite/gcc.target/aarch64/rsqrt_1.c: Functional tests for rsqrt.\n\nSigned-off-by: Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\n\nCo-Authored-By: Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\n\nFrom-SVN: r229866", "tree": {"sha": "b04b26d8aedd89ced8b4a670702d77564dd59a55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b04b26d8aedd89ced8b4a670702d77564dd59a55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6fc00da763fceeb9b7491fe07c6985949da9953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fc00da763fceeb9b7491fe07c6985949da9953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6fc00da763fceeb9b7491fe07c6985949da9953", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fc00da763fceeb9b7491fe07c6985949da9953/comments", "author": {"login": "benedikt-huber", "id": 9655800, "node_id": "MDQ6VXNlcjk2NTU4MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9655800?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benedikt-huber", "html_url": "https://github.com/benedikt-huber", "followers_url": "https://api.github.com/users/benedikt-huber/followers", "following_url": "https://api.github.com/users/benedikt-huber/following{/other_user}", "gists_url": "https://api.github.com/users/benedikt-huber/gists{/gist_id}", "starred_url": "https://api.github.com/users/benedikt-huber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benedikt-huber/subscriptions", "organizations_url": "https://api.github.com/users/benedikt-huber/orgs", "repos_url": "https://api.github.com/users/benedikt-huber/repos", "events_url": "https://api.github.com/users/benedikt-huber/events{/privacy}", "received_events_url": "https://api.github.com/users/benedikt-huber/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ad72a979bc0380cb05c036f008257fdcd54e77b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ad72a979bc0380cb05c036f008257fdcd54e77b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ad72a979bc0380cb05c036f008257fdcd54e77b"}], "stats": {"total": 294, "additions": 292, "deletions": 2}, "files": [{"sha": "e368c9fc0cd0fb724587b44866bd39c228657762", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6fc00da763fceeb9b7491fe07c6985949da9953", "patch": "@@ -1,3 +1,23 @@\n+2015-11-06  Benedikt Huber  <benedikt.huber@theobroma-systems.com>\n+\t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n+\n+\t* config/aarch64/aarch64-builtins.c: Builtins for rsqrt and rsqrtf.\n+\t* config/aarch64/aarch64-protos.h: Declare.\n+\t* config/aarch64/aarch64-simd.md: Matching expressions for frsqrte and\n+\tfrsqrts.\n+\t* config/aarch64/aarch64-tuning-flags.def: Added recip_sqrt.\n+\t* config/aarch64/aarch64.c: New functions. Emit rsqrt estimation code when\n+\tapplicable.\n+\t* config/aarch64/aarch64.md: Added enum entries.\n+\t* config/aarch64/aarch64.opt: Added option -mlow-precision-recip-sqrt.\n+\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_common.h: Common macros for\n+\tassembly checks.\n+\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_negative_1.c: Make sure\n+\tfrsqrts and frsqrte are not emitted.\n+\t* testsuite/gcc.target/aarch64/rsqrt_asm_check_1.c: Make sure frsqrts and\n+\tfrsqrte are emitted.\n+\t* testsuite/gcc.target/aarch64/rsqrt_1.c: Functional tests for rsqrt.\n+\n 2015-11-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/68057"}, {"sha": "6b4208ffb4c06326444eccb81a98f8c6ebce485e", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=a6fc00da763fceeb9b7491fe07c6985949da9953", "patch": "@@ -324,6 +324,11 @@ enum aarch64_builtins\n   AARCH64_BUILTIN_GET_FPSR,\n   AARCH64_BUILTIN_SET_FPSR,\n \n+  AARCH64_BUILTIN_RSQRT_DF,\n+  AARCH64_BUILTIN_RSQRT_SF,\n+  AARCH64_BUILTIN_RSQRT_V2DF,\n+  AARCH64_BUILTIN_RSQRT_V2SF,\n+  AARCH64_BUILTIN_RSQRT_V4SF,\n   AARCH64_SIMD_BUILTIN_BASE,\n   AARCH64_SIMD_BUILTIN_LANE_CHECK,\n #include \"aarch64-simd-builtins.def\"\n@@ -822,6 +827,46 @@ aarch64_init_crc32_builtins ()\n     }\n }\n \n+/* Add builtins for reciprocal square root.  */\n+\n+void\n+aarch64_init_builtin_rsqrt (void)\n+{\n+  tree fndecl = NULL;\n+  tree ftype = NULL;\n+\n+  tree V2SF_type_node = build_vector_type (float_type_node, 2);\n+  tree V2DF_type_node = build_vector_type (double_type_node, 2);\n+  tree V4SF_type_node = build_vector_type (float_type_node, 4);\n+\n+  struct builtin_decls_data\n+  {\n+    tree type_node;\n+    const char *builtin_name;\n+    int function_code;\n+  };\n+\n+  builtin_decls_data bdda[] =\n+  {\n+    { double_type_node, \"__builtin_aarch64_rsqrt_df\", AARCH64_BUILTIN_RSQRT_DF },\n+    { float_type_node, \"__builtin_aarch64_rsqrt_sf\", AARCH64_BUILTIN_RSQRT_SF },\n+    { V2DF_type_node, \"__builtin_aarch64_rsqrt_v2df\", AARCH64_BUILTIN_RSQRT_V2DF },\n+    { V2SF_type_node, \"__builtin_aarch64_rsqrt_v2sf\", AARCH64_BUILTIN_RSQRT_V2SF },\n+    { V4SF_type_node, \"__builtin_aarch64_rsqrt_v4sf\", AARCH64_BUILTIN_RSQRT_V4SF }\n+  };\n+\n+  builtin_decls_data *bdd = bdda;\n+  builtin_decls_data *bdd_end = bdd + (sizeof (bdda) / sizeof (builtin_decls_data));\n+\n+  for (; bdd < bdd_end; bdd++)\n+  {\n+    ftype = build_function_type_list (bdd->type_node, bdd->type_node, NULL_TREE);\n+    fndecl = add_builtin_function (bdd->builtin_name,\n+      ftype, bdd->function_code, BUILT_IN_MD, NULL, NULL_TREE);\n+    aarch64_builtin_decls[bdd->function_code] = fndecl;\n+  }\n+}\n+\n void\n aarch64_init_builtins (void)\n {\n@@ -853,6 +898,7 @@ aarch64_init_builtins (void)\n     aarch64_init_simd_builtins ();\n \n   aarch64_init_crc32_builtins ();\n+  aarch64_init_builtin_rsqrt ();\n }\n \n tree\n@@ -1116,6 +1162,44 @@ aarch64_crc32_expand_builtin (int fcode, tree exp, rtx target)\n   return target;\n }\n \n+/* Function to expand reciprocal square root builtins.  */\n+\n+static rtx\n+aarch64_expand_builtin_rsqrt (int fcode, tree exp, rtx target)\n+{\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  rtx op0 = expand_normal (arg0);\n+\n+  rtx (*gen) (rtx, rtx);\n+\n+  switch (fcode)\n+    {\n+      case AARCH64_BUILTIN_RSQRT_DF:\n+\tgen = gen_aarch64_rsqrt_df2;\n+\tbreak;\n+      case AARCH64_BUILTIN_RSQRT_SF:\n+\tgen = gen_aarch64_rsqrt_sf2;\n+\tbreak;\n+      case AARCH64_BUILTIN_RSQRT_V2DF:\n+\tgen = gen_aarch64_rsqrt_v2df2;\n+\tbreak;\n+      case AARCH64_BUILTIN_RSQRT_V2SF:\n+\tgen = gen_aarch64_rsqrt_v2sf2;\n+\tbreak;\n+      case AARCH64_BUILTIN_RSQRT_V4SF:\n+\tgen = gen_aarch64_rsqrt_v4sf2;\n+\tbreak;\n+      default: gcc_unreachable ();\n+    }\n+\n+  if (!target)\n+    target = gen_reg_rtx (GET_MODE (op0));\n+\n+  emit_insn (gen (target, op0));\n+\n+  return target;\n+}\n+\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient.  */\n rtx\n@@ -1163,6 +1247,13 @@ aarch64_expand_builtin (tree exp,\n   else if (fcode >= AARCH64_CRC32_BUILTIN_BASE && fcode <= AARCH64_CRC32_BUILTIN_MAX)\n     return aarch64_crc32_expand_builtin (fcode, exp, target);\n \n+  if (fcode == AARCH64_BUILTIN_RSQRT_DF\n+      || fcode == AARCH64_BUILTIN_RSQRT_SF\n+      || fcode == AARCH64_BUILTIN_RSQRT_V2DF\n+      || fcode == AARCH64_BUILTIN_RSQRT_V2SF\n+      || fcode == AARCH64_BUILTIN_RSQRT_V4SF)\n+    return aarch64_expand_builtin_rsqrt (fcode, exp, target);\n+\n   gcc_unreachable ();\n }\n \n@@ -1320,6 +1411,30 @@ aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n   return NULL_TREE;\n }\n \n+/* Return builtin for reciprocal square root.  */\n+\n+tree\n+aarch64_builtin_rsqrt (unsigned int fn, bool md_fn)\n+{\n+  if (md_fn)\n+    {\n+      if (fn == AARCH64_SIMD_BUILTIN_UNOP_sqrtv2df)\n+\treturn aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_V2DF];\n+      if (fn == AARCH64_SIMD_BUILTIN_UNOP_sqrtv2sf)\n+\treturn aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_V2SF];\n+      if (fn == AARCH64_SIMD_BUILTIN_UNOP_sqrtv4sf)\n+\treturn aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_V4SF];\n+    }\n+  else\n+    {\n+      if (fn == BUILT_IN_SQRT)\n+\treturn aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_DF];\n+      if (fn == BUILT_IN_SQRTF)\n+\treturn aarch64_builtin_decls[AARCH64_BUILTIN_RSQRT_SF];\n+    }\n+  return NULL_TREE;\n+}\n+\n #undef VAR1\n #define VAR1(T, N, MAP, A) \\\n   case AARCH64_SIMD_BUILTIN_##T##_##N##A:"}, {"sha": "0f20f604481d5d6b3b4848d0a94b7c791d0c0c91", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=a6fc00da763fceeb9b7491fe07c6985949da9953", "patch": "@@ -352,6 +352,8 @@ void aarch64_register_pragmas (void);\n void aarch64_relayout_simd_types (void);\n void aarch64_reset_previous_fndecl (void);\n \n+void aarch64_emit_swrsqrt (rtx, rtx);\n+\n /* Initialize builtins for SIMD intrinsics.  */\n void init_aarch64_simd_builtins (void);\n \n@@ -403,6 +405,8 @@ rtx aarch64_expand_builtin (tree exp,\n \t\t\t    int ignore ATTRIBUTE_UNUSED);\n tree aarch64_builtin_decl (unsigned, bool ATTRIBUTE_UNUSED);\n \n+tree aarch64_builtin_rsqrt (unsigned int, bool);\n+\n tree\n aarch64_builtin_vectorized_function (tree fndecl,\n \t\t\t\t     tree type_out,"}, {"sha": "55974e611181fcf176ad2405962e843057d82cd3", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=a6fc00da763fceeb9b7491fe07c6985949da9953", "patch": "@@ -382,6 +382,33 @@\n   [(set_attr \"type\" \"neon_fp_mul_d_scalar_q\")]\n )\n \n+(define_insn \"aarch64_rsqrte_<mode>2\"\n+  [(set (match_operand:VALLF 0 \"register_operand\" \"=w\")\n+\t(unspec:VALLF [(match_operand:VALLF 1 \"register_operand\" \"w\")]\n+\t\t     UNSPEC_RSQRTE))]\n+  \"TARGET_SIMD\"\n+  \"frsqrte\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>\"\n+  [(set_attr \"type\" \"neon_fp_rsqrte_<Vetype><q>\")])\n+\n+(define_insn \"aarch64_rsqrts_<mode>3\"\n+  [(set (match_operand:VALLF 0 \"register_operand\" \"=w\")\n+\t(unspec:VALLF [(match_operand:VALLF 1 \"register_operand\" \"w\")\n+\t       (match_operand:VALLF 2 \"register_operand\" \"w\")]\n+\t\t     UNSPEC_RSQRTS))]\n+  \"TARGET_SIMD\"\n+  \"frsqrts\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\"\n+  [(set_attr \"type\" \"neon_fp_rsqrts_<Vetype><q>\")])\n+\n+(define_expand \"aarch64_rsqrt_<mode>2\"\n+  [(set (match_operand:VALLF 0 \"register_operand\" \"=w\")\n+\t(unspec:VALLF [(match_operand:VALLF 1 \"register_operand\" \"w\")]\n+\t\t     UNSPEC_RSQRT))]\n+  \"TARGET_SIMD\"\n+{\n+  aarch64_emit_swrsqrt (operands[0], operands[1]);\n+  DONE;\n+})\n+\n (define_insn \"*aarch64_mul3_elt_to_64v2df\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=w\")\n      (mult:DF"}, {"sha": "6f7dbcec03d126726e56d708cf48e79d5e06ed60", "filename": "gcc/config/aarch64/aarch64-tuning-flags.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def?ref=a6fc00da763fceeb9b7491fe07c6985949da9953", "patch": "@@ -29,4 +29,5 @@\n      AARCH64_TUNE_ to give an enum name. */\n \n AARCH64_EXTRA_TUNING_OPTION (\"rename_fma_regs\", RENAME_FMA_REGS)\n+AARCH64_EXTRA_TUNING_OPTION (\"recip_sqrt\", RECIP_SQRT)\n "}, {"sha": "6738a4a71a8cfe932ab3cf792958a30e67a041ff", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 105, "deletions": 2, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a6fc00da763fceeb9b7491fe07c6985949da9953", "patch": "@@ -403,7 +403,8 @@ static const struct tune_params cortexa57_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_RENAME_FMA_REGS)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_RENAME_FMA_REGS\n+   | AARCH64_EXTRA_TUNE_RECIP_SQRT)\t/* tune_flags.  */\n };\n \n static const struct tune_params cortexa72_tunings =\n@@ -470,7 +471,7 @@ static const struct tune_params xgene1_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_RECIP_SQRT)\t/* tune_flags.  */\n };\n \n /* Support for fine-grained override of the tuning structures.  */\n@@ -7031,6 +7032,105 @@ aarch64_memory_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n   return aarch64_tune_params.memmov_cost;\n }\n \n+/* Function to decide when to use\n+   reciprocal square root builtins.  */\n+\n+static tree\n+aarch64_builtin_reciprocal (unsigned int fn,\n+\t\t\t    bool md_fn,\n+\t\t\t    bool)\n+{\n+  if (flag_trapping_math\n+      || !flag_unsafe_math_optimizations\n+      || optimize_size\n+      || ! (aarch64_tune_params.extra_tuning_flags\n+\t   & AARCH64_EXTRA_TUNE_RECIP_SQRT))\n+  {\n+    return NULL_TREE;\n+  }\n+\n+  return aarch64_builtin_rsqrt (fn, md_fn);\n+}\n+\n+typedef rtx (*rsqrte_type) (rtx, rtx);\n+\n+/* Select reciprocal square root initial estimate\n+   insn depending on machine mode.  */\n+\n+rsqrte_type\n+get_rsqrte_type (machine_mode mode)\n+{\n+  switch (mode)\n+  {\n+    case DFmode:   return gen_aarch64_rsqrte_df2;\n+    case SFmode:   return gen_aarch64_rsqrte_sf2;\n+    case V2DFmode: return gen_aarch64_rsqrte_v2df2;\n+    case V2SFmode: return gen_aarch64_rsqrte_v2sf2;\n+    case V4SFmode: return gen_aarch64_rsqrte_v4sf2;\n+    default: gcc_unreachable ();\n+  }\n+}\n+\n+typedef rtx (*rsqrts_type) (rtx, rtx, rtx);\n+\n+/* Select reciprocal square root Newton-Raphson step\n+   insn depending on machine mode.  */\n+\n+rsqrts_type\n+get_rsqrts_type (machine_mode mode)\n+{\n+  switch (mode)\n+  {\n+    case DFmode:   return gen_aarch64_rsqrts_df3;\n+    case SFmode:   return gen_aarch64_rsqrts_sf3;\n+    case V2DFmode: return gen_aarch64_rsqrts_v2df3;\n+    case V2SFmode: return gen_aarch64_rsqrts_v2sf3;\n+    case V4SFmode: return gen_aarch64_rsqrts_v4sf3;\n+    default: gcc_unreachable ();\n+  }\n+}\n+\n+/* Emit instruction sequence to compute\n+   reciprocal square root.  Use two Newton-Raphson steps\n+   for single precision and three for double precision.  */\n+\n+void\n+aarch64_emit_swrsqrt (rtx dst, rtx src)\n+{\n+  machine_mode mode = GET_MODE (src);\n+  gcc_assert (\n+    mode == SFmode || mode == V2SFmode || mode == V4SFmode\n+\t|| mode == DFmode || mode == V2DFmode);\n+\n+  rtx xsrc = gen_reg_rtx (mode);\n+  emit_move_insn (xsrc, src);\n+  rtx x0 = gen_reg_rtx (mode);\n+\n+  emit_insn ((*get_rsqrte_type (mode)) (x0, xsrc));\n+\n+  bool double_mode = (mode == DFmode || mode == V2DFmode);\n+\n+  int iterations = double_mode ? 3 : 2;\n+\n+  if (flag_mrecip_low_precision_sqrt)\n+    iterations--;\n+\n+  for (int i = 0; i < iterations; ++i)\n+    {\n+      rtx x1 = gen_reg_rtx (mode);\n+      rtx x2 = gen_reg_rtx (mode);\n+      rtx x3 = gen_reg_rtx (mode);\n+      emit_set_insn (x2, gen_rtx_MULT (mode, x0, x0));\n+\n+      emit_insn ((*get_rsqrts_type (mode)) (x3, xsrc, x2));\n+\n+      emit_set_insn (x1, gen_rtx_MULT (mode, x0, x3));\n+      x0 = x1;\n+    }\n+\n+  emit_move_insn (dst, x0);\n+}\n+\n /* Return the number of instructions that can be issued per cycle.  */\n static int\n aarch64_sched_issue_rate (void)\n@@ -13455,6 +13555,9 @@ aarch64_promoted_type (const_tree t)\n #undef TARGET_BUILTIN_DECL\n #define TARGET_BUILTIN_DECL aarch64_builtin_decl\n \n+#undef TARGET_BUILTIN_RECIPROCAL\n+#define TARGET_BUILTIN_RECIPROCAL aarch64_builtin_reciprocal\n+\n #undef  TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN aarch64_expand_builtin\n "}, {"sha": "6b08850e9d06311edb5be45299da5bb96390e63e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=a6fc00da763fceeb9b7491fe07c6985949da9953", "patch": "@@ -126,6 +126,9 @@\n     UNSPEC_VSTRUCTDUMMY\n     UNSPEC_SP_SET\n     UNSPEC_SP_TEST\n+    UNSPEC_RSQRT\n+    UNSPEC_RSQRTE\n+    UNSPEC_RSQRTS\n ])\n \n (define_c_enum \"unspecv\" ["}, {"sha": "a0fbfd42c090f63fb77507a62af914e85064364e", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=a6fc00da763fceeb9b7491fe07c6985949da9953", "patch": "@@ -148,3 +148,8 @@ Enum(aarch64_abi) String(lp64) Value(AARCH64_ABI_LP64)\n mpc-relative-literal-loads\n Target Report Save Var(nopcrelative_literal_loads) Init(2) Save\n PC relative literal loads.\n+\n+mlow-precision-recip-sqrt\n+Common Var(flag_mrecip_low_precision_sqrt) Optimization\n+When calculating a sqrt approximation, run fewer steps.\n+This reduces precision, but can result in faster computation."}, {"sha": "79bea2f165f9cbff7679f4e5112b0d9fc9227e1e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc00da763fceeb9b7491fe07c6985949da9953/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a6fc00da763fceeb9b7491fe07c6985949da9953", "patch": "@@ -521,6 +521,7 @@ Objective-C and Objective-C++ Dialects}.\n -mtls-size=@var{size} @gol\n -mfix-cortex-a53-835769  -mno-fix-cortex-a53-835769 @gol\n -mfix-cortex-a53-843419  -mno-fix-cortex-a53-843419 @gol\n+-mlow-precision-recip-sqrt -mno-low-precision-recip-sqrt@gol\n -march=@var{name}  -mcpu=@var{name}  -mtune=@var{name}}\n \n @emph{Adapteva Epiphany Options}\n@@ -12519,6 +12520,17 @@ Enable or disable the workaround for the ARM Cortex-A53 erratum number 843419.\n This erratum workaround is made at link time and this will only pass the\n corresponding flag to the linker.\n \n+@item -mlow-precision-recip-sqrt\n+@item -mno-low-precision-recip-sqrt\n+@opindex -mlow-precision-recip-sqrt\n+@opindex -mno-low-precision-recip-sqrt\n+The square root estimate uses two steps instead of three for double-precision,\n+and one step instead of two for single-precision.\n+Thus reducing latency and precision.\n+This is only relevant if @option{-ffast-math} activates\n+reciprocal square root estimate instructions.\n+Which in turn depends on the target processor.\n+\n @item -march=@var{name}\n @opindex march\n Specify the name of the target architecture, optionally suffixed by one or"}]}