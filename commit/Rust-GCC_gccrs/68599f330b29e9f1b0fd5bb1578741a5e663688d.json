{"sha": "68599f330b29e9f1b0fd5bb1578741a5e663688d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg1OTlmMzMwYjI5ZTlmMWIwZmQ1YmIxNTc4NzQxYTVlNjYzNjg4ZA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2009-03-27T21:44:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-03-27T21:44:21Z"}, "message": "re PR debug/37959 (g++ does not emit DW_AT_explicit)\n\n\tPR debug/37959\n\t* dwarf2out.c (dwarf_attr_name): Handle DW_AT_explicit attribute.\n\t(gen_subprogram_die): When a function is explicit, generate the\n\tDW_AT_explicit attribute.\n\t* langhooks.h (struct lang_hooks_for_decls): Add\n\tfunction_decl_explicit_p langhook.\n\t* langhooks-def.h (LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P): Define.\n\t(LANG_HOOKS_DECLS): Add LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P.\n\n\t* cp-objcp-common.h (LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P): Define.\n\t(cp_function_decl_explicit_p): New prototype.\n\t* cp-objcp-common.c (cp_function_decl_explicit_p): New function.\n\n\t* g++.dg/debug/dwarf2/explicit-constructor.C: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r145128", "tree": {"sha": "ce9a63a4cd6c9024f69411c47ca98e056f2dc06a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce9a63a4cd6c9024f69411c47ca98e056f2dc06a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68599f330b29e9f1b0fd5bb1578741a5e663688d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68599f330b29e9f1b0fd5bb1578741a5e663688d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68599f330b29e9f1b0fd5bb1578741a5e663688d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68599f330b29e9f1b0fd5bb1578741a5e663688d/comments", "author": null, "committer": null, "parents": [{"sha": "64d7685c6fa0dfda3d5be0964f8de832fe0671c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d7685c6fa0dfda3d5be0964f8de832fe0671c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64d7685c6fa0dfda3d5be0964f8de832fe0671c4"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "d7a663561cd64c14488aa43a06f5f17245801513", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68599f330b29e9f1b0fd5bb1578741a5e663688d", "patch": "@@ -1,3 +1,15 @@\n+2009-03-27  Dodji Seketeli  <dodji@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/37959\n+\t* dwarf2out.c (dwarf_attr_name): Handle DW_AT_explicit attribute.\n+\t(gen_subprogram_die): When a function is explicit, generate the\n+\tDW_AT_explicit attribute.\n+\t* langhooks.h (struct lang_hooks_for_decls): Add\n+\tfunction_decl_explicit_p langhook.\n+\t* langhooks-def.h (LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P): Define.\n+\t(LANG_HOOKS_DECLS): Add LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P.\n+\n 2009-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* builtins.c (fold_builtin_memory_op): Optimize memmove"}, {"sha": "477e84b7fcca612574a0d7c46e023a1ba67db337", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=68599f330b29e9f1b0fd5bb1578741a5e663688d", "patch": "@@ -1,3 +1,11 @@\n+2009-03-27  Dodji Seketeli  <dodji@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/37959\n+\t* cp-objcp-common.h (LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P): Define.\n+\t(cp_function_decl_explicit_p): New prototype.\n+\t* cp-objcp-common.c (cp_function_decl_explicit_p): New function.\n+\n 2009-03-27  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR c++/38638"}, {"sha": "daefa2b0d87fdb9df4caf4a90b7da73c5ca934f4", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=68599f330b29e9f1b0fd5bb1578741a5e663688d", "patch": "@@ -1,5 +1,5 @@\n /* Some code common to C++ and ObjC++ front ends.\n-   Copyright (C) 2004, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Ziemowit Laski  <zlaski@apple.com>\n \n This file is part of GCC.\n@@ -203,6 +203,16 @@ cxx_staticp (tree arg)\n   return NULL_TREE;\n }\n \n+/* Return true if DECL is explicit member function.  */\n+\n+bool\n+cp_function_decl_explicit_p (tree decl)\n+{\n+  return (decl\n+\t  && FUNCTION_FIRST_USER_PARMTYPE (decl) != void_list_node\n+\t  && DECL_NONCONVERTING_P (decl));\n+}\n+\n /* Stubs to keep c-opts.c happy.  */\n void\n push_file_scope (void)"}, {"sha": "bda23eb635b6a97b2d5d5c0c8d0556fc134544a1", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=68599f330b29e9f1b0fd5bb1578741a5e663688d", "patch": "@@ -1,5 +1,5 @@\n /* Language hooks common to C++ and ObjC++ front ends.\n-   Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Ziemowit Laski  <zlaski@apple.com>\n \n This file is part of GCC.\n@@ -26,6 +26,8 @@ along with GCC; see the file COPYING3.  If not see\n extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n \t\t\t\t\t tree, bool);\n \n+extern bool cp_function_decl_explicit_p (tree decl);\n+\n /* Lang hooks that are shared between C++ and ObjC++ are defined here.  Hooks\n    specific to C++ or ObjC++ go in cp/cp-lang.c and objcp/objcp-lang.c,\n    respectively.  */\n@@ -131,6 +133,8 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_TO_TARGET_CHARSET c_common_to_target_charset\n #undef LANG_HOOKS_GIMPLIFY_EXPR\n #define LANG_HOOKS_GIMPLIFY_EXPR cp_gimplify_expr\n+#undef LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P\n+#define LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P cp_function_decl_explicit_p\n #undef LANG_HOOKS_OMP_PREDETERMINED_SHARING\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING cxx_omp_predetermined_sharing\n #undef LANG_HOOKS_OMP_CLAUSE_DEFAULT_CTOR"}, {"sha": "1c82f9c09ff2d66963d9bf487a4b2ff69109592c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=68599f330b29e9f1b0fd5bb1578741a5e663688d", "patch": "@@ -5599,6 +5599,8 @@ dwarf_attr_name (unsigned int attr)\n       return \"DW_AT_encoding\";\n     case DW_AT_external:\n       return \"DW_AT_external\";\n+    case DW_AT_explicit:\n+      return \"DW_AT_explicit\";\n     case DW_AT_frame_base:\n       return \"DW_AT_frame_base\";\n     case DW_AT_friend:\n@@ -13611,6 +13613,11 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t{\n \t  add_AT_flag (subr_die, DW_AT_declaration, 1);\n \n+\t  /* If this is an explicit function declaration then generate\n+\t     a DW_AT_explicit attribute.  */\n+          if (lang_hooks.decls.function_decl_explicit_p (decl))\n+\t    add_AT_flag (subr_die, DW_AT_explicit, 1);\n+\n \t  /* The first time we see a member function, it is in the context of\n \t     the class to which it belongs.  We make sure of this by emitting\n \t     the class first.  The next time is the definition, which is"}, {"sha": "96c091c7f054c98d757d8f7c451be3f52b03dec4", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=68599f330b29e9f1b0fd5bb1578741a5e663688d", "patch": "@@ -189,6 +189,7 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_GLOBAL_BINDINGS_P global_bindings_p\n #define LANG_HOOKS_PUSHDECL\tpushdecl\n #define LANG_HOOKS_GETDECLS\tgetdecls\n+#define LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P hook_bool_tree_false\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n #define LANG_HOOKS_WRITE_GLOBALS write_global_declarations\n #define LANG_HOOKS_DECL_OK_FOR_SIBCALL\tlhd_decl_ok_for_sibcall\n@@ -208,6 +209,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GLOBAL_BINDINGS_P, \\\n   LANG_HOOKS_PUSHDECL, \\\n   LANG_HOOKS_GETDECLS, \\\n+  LANG_HOOKS_FUNCTION_DECL_EXPLICIT_P, \\\n   LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, \\\n   LANG_HOOKS_WRITE_GLOBALS, \\\n   LANG_HOOKS_DECL_OK_FOR_SIBCALL, \\"}, {"sha": "4069578168307e07f2a55d70b3fba37b5d23a6a9", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=68599f330b29e9f1b0fd5bb1578741a5e663688d", "patch": "@@ -159,6 +159,9 @@ struct lang_hooks_for_decls\n   /* Returns the chain of decls so far in the current scope level.  */\n   tree (*getdecls) (void);\n \n+  /* Returns true if DECL is explicit member function.  */\n+  bool (*function_decl_explicit_p) (tree);\n+\n   /* Returns true when we should warn for an unused global DECL.\n      We will already have checked that it has static binding.  */\n   bool (*warn_unused_global) (const_tree);"}, {"sha": "6898d861167c797724d1abdb8267663c21505b4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68599f330b29e9f1b0fd5bb1578741a5e663688d", "patch": "@@ -1,3 +1,9 @@\n+2009-03-27  Dodji Seketeli  <dodji@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/37959\n+\t* g++.dg/debug/dwarf2/explicit-constructor.C: New test.\n+\n 2009-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/memmove-2.c: New test."}, {"sha": "42fd26455f9f934e581548ae3b490504c883ecd4", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/explicit-constructor.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fexplicit-constructor.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68599f330b29e9f1b0fd5bb1578741a5e663688d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fexplicit-constructor.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fexplicit-constructor.C?ref=68599f330b29e9f1b0fd5bb1578741a5e663688d", "patch": "@@ -0,0 +1,19 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin: PR c++\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \"DW_AT_explicit\" 2 } }\n+\n+struct Foo\n+{\n+  Foo () {}\n+  explicit Foo (int) {}\n+  Foo (char) {}\n+  ~Foo () {};\n+};\n+\n+void\n+bar ()\n+{\n+  Foo foo;\n+}"}]}