{"sha": "2f0067f47e5531e555c61f2ea9815fe8b088e877", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYwMDY3ZjQ3ZTU1MzFlNTU1YzYxZjJlYTk4MTVmZThiMDg4ZTg3Nw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-12-17T22:17:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-02T08:58:15Z"}, "message": "[Ada] Spurious accessibility error on return aggregate in GNATprove mode\n\n2020-06-02  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch6.adb (Check_Return_Obj_Accessibility): Avoid use of\n\tparent node pointers so we are not relying on expansion done in\n\tGNATprove mode.", "tree": {"sha": "94f3d281a0677afd36906239e5e2f8204fc6ef2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94f3d281a0677afd36906239e5e2f8204fc6ef2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f0067f47e5531e555c61f2ea9815fe8b088e877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f0067f47e5531e555c61f2ea9815fe8b088e877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f0067f47e5531e555c61f2ea9815fe8b088e877", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f0067f47e5531e555c61f2ea9815fe8b088e877/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b9e98916b6b3042efdfc1f9341e25f51ecee04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b9e98916b6b3042efdfc1f9341e25f51ecee04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b9e98916b6b3042efdfc1f9341e25f51ecee04"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "c080e5706f9de742158d8bde81c9d096d18a8a2a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f0067f47e5531e555c61f2ea9815fe8b088e877/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f0067f47e5531e555c61f2ea9815fe8b088e877/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2f0067f47e5531e555c61f2ea9815fe8b088e877", "patch": "@@ -814,51 +814,48 @@ package body Sem_Ch6 is\n                   --  named access types.\n \n                   Obj := Original_Node (Prefix (Expr));\n-                  while Nkind_In (Obj, N_Indexed_Component,\n+                  while Nkind_In (Obj, N_Explicit_Dereference,\n+                                       N_Indexed_Component,\n                                        N_Selected_Component)\n                   loop\n-                     Obj := Original_Node (Prefix (Obj));\n-\n                      --  When we encounter a named access type then we can\n                      --  ignore accessibility checks on the dereference.\n \n-                     if Ekind (Etype (Obj))\n+                     if Ekind (Etype (Original_Node (Prefix (Obj))))\n                           in E_Access_Type ..\n                              E_Access_Protected_Subprogram_Type\n                      then\n-                        if Nkind (Parent (Obj)) = N_Selected_Component then\n-                           Obj := Selector_Name (Parent (Obj));\n+                        if Nkind (Obj) = N_Selected_Component then\n+                           Obj := Selector_Name (Obj);\n+                        else\n+                           Obj := Original_Node (Prefix (Obj));\n                         end if;\n                         exit;\n                      end if;\n \n-                     --  Skip over the explicit dereference\n-\n-                     if Nkind (Obj) = N_Explicit_Dereference then\n-                        Obj := Original_Node (Prefix (Obj));\n-                     end if;\n+                     Obj := Original_Node (Prefix (Obj));\n                   end loop;\n \n+                  if Nkind (Obj) = N_Selected_Component then\n+                     Obj := Selector_Name (Obj);\n+                  end if;\n+\n                   --  Do not check aliased formals or function calls. A\n                   --  run-time check may still be needed ???\n \n-                  if Is_Entity_Name (Obj)\n-                    and then Comes_From_Source (Obj)\n-                  then\n-                     --  Explicitly aliased formals are allowed\n+                  pragma Assert (Is_Entity_Name (Obj));\n \n-                     if Is_Formal (Entity (Obj))\n-                       and then Is_Aliased (Entity (Obj))\n-                     then\n-                        null;\n+                  if Is_Formal (Entity (Obj))\n+                    and then Is_Aliased (Entity (Obj))\n+                  then\n+                     null;\n \n-                     elsif Object_Access_Level (Obj) >\n-                             Scope_Depth (Scope (Scope_Id))\n-                     then\n-                        Error_Msg_N\n-                          (\"access discriminant in return aggregate would \"\n-                           & \"be a dangling reference\", Obj);\n-                     end if;\n+                  elsif Object_Access_Level (Obj) >\n+                          Scope_Depth (Scope (Scope_Id))\n+                  then\n+                     Error_Msg_N\n+                       (\"access discriminant in return aggregate would \"\n+                        & \"be a dangling reference\", Obj);\n                   end if;\n                end if;\n             end if;"}]}