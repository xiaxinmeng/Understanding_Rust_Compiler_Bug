{"sha": "2d33a2effdaf3e8405a2fa05c3bf863ce6c4f1ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQzM2EyZWZmZGFmM2U4NDA1YTJmYTA1YzNiZjg2M2NlNmM0ZjFlZQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2005-10-15T14:30:36Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-10-15T14:30:36Z"}, "message": "re PR tree-optimization/23141 (ACATS FAIL c45651a fixed point wrong code)\n\n\n\tPR 23141\n\tPR 23142\n\t* tree-vrp.c (vrp_meet): Fix the intersection of equivalence\n\tsets VR0->EQUIV and VR1->EQUIV when meeting a range and an\n\tanti-range.\n\t(vrp_visit_phi_node): Only prevent infinite iterations when\n\tthe previous result and the new result are both VR_RANGEs.\n\nFrom-SVN: r105436", "tree": {"sha": "e93d789fc90c9149fee14d5a02bbc1646291a9e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e93d789fc90c9149fee14d5a02bbc1646291a9e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d33a2effdaf3e8405a2fa05c3bf863ce6c4f1ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d33a2effdaf3e8405a2fa05c3bf863ce6c4f1ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d33a2effdaf3e8405a2fa05c3bf863ce6c4f1ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d33a2effdaf3e8405a2fa05c3bf863ce6c4f1ee/comments", "author": null, "committer": null, "parents": [{"sha": "7b71de26446ee7729f8d0440edebb80c0f26db8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b71de26446ee7729f8d0440edebb80c0f26db8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b71de26446ee7729f8d0440edebb80c0f26db8d"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "1d6eed22f9f8a1c7e50a64175f0ee791c12b5fd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33a2effdaf3e8405a2fa05c3bf863ce6c4f1ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33a2effdaf3e8405a2fa05c3bf863ce6c4f1ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d33a2effdaf3e8405a2fa05c3bf863ce6c4f1ee", "patch": "@@ -1,3 +1,13 @@\n+2005-10-15  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 23141\n+\tPR 23142\n+\t* tree-vrp.c (vrp_meet): Fix the intersection of equivalence\n+\tsets VR0->EQUIV and VR1->EQUIV when meeting a range and an\n+\tanti-range.\n+\t(vrp_visit_phi_node): Only prevent infinite iterations when\n+\tthe previous result and the new result are both VR_RANGEs.\n+\n 2005-10-15  Ranjit Mathew  <rmathew@gcc.gnu.org>\n \n \t* tree-into-ssa.c (mark_def_sites): Correct minor typo in"}, {"sha": "7642ced28631ffe031d985921ee70d95ab891480", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33a2effdaf3e8405a2fa05c3bf863ce6c4f1ee/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33a2effdaf3e8405a2fa05c3bf863ce6c4f1ee/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=2d33a2effdaf3e8405a2fa05c3bf863ce6c4f1ee", "patch": "@@ -3497,8 +3497,11 @@ vrp_meet (value_range_t *vr0, value_range_t *vr1)\n \t  && !symbolic_range_p (vr1)\n \t  && !value_ranges_intersect_p (vr0, vr1))\n \t{\n+\t  /* Copy most of VR1 into VR0.  Don't copy VR1's equivalence\n+\t     set.  We need to compute the intersection of the two\n+\t     equivalence sets.  */\n \t  if (vr1->type == VR_ANTI_RANGE)\n-\t    copy_value_range (vr0, vr1);\n+\t    set_value_range (vr0, vr1->type, vr1->min, vr1->max, vr0->equiv);\n \n \t  /* The resulting set of equivalences is the intersection of\n \t     the two sets.  */\n@@ -3609,7 +3612,7 @@ vrp_visit_phi_node (tree phi)\n   /* To prevent infinite iterations in the algorithm, derive ranges\n      when the new value is slightly bigger or smaller than the\n      previous one.  */\n-  if (lhs_vr->type == VR_RANGE)\n+  if (lhs_vr->type == VR_RANGE && vr_result.type == VR_RANGE)\n     {\n       if (!POINTER_TYPE_P (TREE_TYPE (lhs)))\n \t{"}]}