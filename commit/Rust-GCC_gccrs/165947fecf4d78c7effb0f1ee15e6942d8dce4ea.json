{"sha": "165947fecf4d78c7effb0f1ee15e6942d8dce4ea", "node_id": "C_kwDOANBUbNoAKDE2NTk0N2ZlY2Y0ZDc4YzdlZmZiMGYxZWUxNWU2OTQyZDhkY2U0ZWE", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-02-10T07:42:13Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-02-11T07:46:43Z"}, "message": "Add single_use to simplification (uncond_op + vec_cond -> cond_op).\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/104479\n\t* match.pd (uncond_op + vec_cond -> cond_op): Add single_use\n\tfor the dest of uncond_op.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr104479.c: New test.\n\t* gcc.target/i386/cond_op_shift_w-1.c: Adjust testcase.", "tree": {"sha": "f4695aa6ec10c70cf6b9f5d994e11c0eb566e21d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4695aa6ec10c70cf6b9f5d994e11c0eb566e21d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/165947fecf4d78c7effb0f1ee15e6942d8dce4ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165947fecf4d78c7effb0f1ee15e6942d8dce4ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165947fecf4d78c7effb0f1ee15e6942d8dce4ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165947fecf4d78c7effb0f1ee15e6942d8dce4ea/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cc6a8d00af8a2ca8303a2894286911b8898da83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc6a8d00af8a2ca8303a2894286911b8898da83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc6a8d00af8a2ca8303a2894286911b8898da83"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "0f326233cbb963a1c681a3aab2ad9e200c4b9a0a", "filename": "gcc/match.pd", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165947fecf4d78c7effb0f1ee15e6942d8dce4ea/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165947fecf4d78c7effb0f1ee15e6942d8dce4ea/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=165947fecf4d78c7effb0f1ee15e6942d8dce4ea", "patch": "@@ -7384,13 +7384,15 @@ and,\n   (vec_cond @0 (view_convert? (uncond_op@4 @1 @2)) @3)\n   (with { tree op_type = TREE_TYPE (@4); }\n    (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n-\t&& is_truth_type_for (op_type, TREE_TYPE (@0)))\n+\t&& is_truth_type_for (op_type, TREE_TYPE (@0))\n+\t&& single_use (@4))\n     (view_convert (cond_op @0 @1 @2 (view_convert:op_type @3))))))\n  (simplify\n   (vec_cond @0 @1 (view_convert? (uncond_op@4 @2 @3)))\n   (with { tree op_type = TREE_TYPE (@4); }\n    (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n-\t&& is_truth_type_for (op_type, TREE_TYPE (@0)))\n+\t&& is_truth_type_for (op_type, TREE_TYPE (@0))\n+\t&& single_use (@4))\n     (view_convert (cond_op (bit_not @0) @2 @3 (view_convert:op_type @1)))))))\n \n /* Same for ternary operations.  */\n@@ -7400,13 +7402,15 @@ and,\n   (vec_cond @0 (view_convert? (uncond_op@5 @1 @2 @3)) @4)\n   (with { tree op_type = TREE_TYPE (@5); }\n    (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n-\t&& is_truth_type_for (op_type, TREE_TYPE (@0)))\n+\t&& is_truth_type_for (op_type, TREE_TYPE (@0))\n+\t&& single_use (@5))\n     (view_convert (cond_op @0 @1 @2 @3 (view_convert:op_type @4))))))\n  (simplify\n   (vec_cond @0 @1 (view_convert? (uncond_op@5 @2 @3 @4)))\n   (with { tree op_type = TREE_TYPE (@5); }\n    (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n-\t&& is_truth_type_for (op_type, TREE_TYPE (@0)))\n+\t&& is_truth_type_for (op_type, TREE_TYPE (@0))\n+\t&& single_use (@5))\n     (view_convert (cond_op (bit_not @0) @2 @3 @4\n \t\t  (view_convert:op_type @1)))))))\n #endif"}, {"sha": "23ab8fa166f5b94e2c36cf7f52d5f9ed94eb883c", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_w-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165947fecf4d78c7effb0f1ee15e6942d8dce4ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165947fecf4d78c7effb0f1ee15e6942d8dce4ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_w-1.c?ref=165947fecf4d78c7effb0f1ee15e6942d8dce4ea", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -march=skylake-avx512 -fdump-tree-optimized -DTYPE=int16\" } */\n-/* { dg-final { scan-tree-dump-times \".COND_SHR\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \".COND_SHL\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\.COND_\" 4 \"optimized\" } } */\n /* { dg-final { scan-assembler-times \"vpsraw\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpsllw\"  1 } } */\n "}, {"sha": "4ca4c4825429e370ef11315bb94268ff6db572d6", "filename": "gcc/testsuite/gcc.target/i386/pr104479.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165947fecf4d78c7effb0f1ee15e6942d8dce4ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104479.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165947fecf4d78c7effb0f1ee15e6942d8dce4ea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104479.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104479.c?ref=165947fecf4d78c7effb0f1ee15e6942d8dce4ea", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=icelake-server -Ofast -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"\\.COND_SHR\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"\\.COND_FMA\" \"optimized\" } } */\n+\n+void\n+cond_shr (unsigned int* __restrict dst,\n+\t  unsigned int* __restrict src,\n+\t  unsigned int* __restrict y,\n+\t  int i_width)\n+{\n+  for(int x = 0; x < i_width; x++)\n+    {\n+      unsigned int temp = src[x] >> 3;\n+      dst[x] =  temp > 255 ? temp : y[x];\n+    }\n+}\n+\n+\n+void\n+cond_fma (float* __restrict dst,\n+\t  float* __restrict src1,\n+\t  float* __restrict src2,\n+\t  float* __restrict src3,\n+\t  unsigned int* __restrict y,\n+\t  int i_width)\n+{\n+  for(int x = 0; x < i_width; x++)\n+    {\n+      float temp = __builtin_fmaf (src1[x], src2[x], src3[x]);\n+      dst[x] = temp > 0.0f ? temp : y[x];\n+    }\n+}"}]}