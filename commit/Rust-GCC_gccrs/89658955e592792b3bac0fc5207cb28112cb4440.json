{"sha": "89658955e592792b3bac0fc5207cb28112cb4440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2NTg5NTVlNTkyNzkyYjNiYWMwZmM1MjA3Y2IyODExMmNiNDQ0MA==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2004-07-25T19:32:47Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-07-25T19:32:47Z"}, "message": "c-decl.c (groktypename, [...]): Rename variable typename to type_name.\n\n\t* c-decl.c (groktypename, groktypename_in_param_context): Rename\n\tvariable typename to type_name.\n\t* c-lex.c (interpret_float): Likewise.\n\nFrom-SVN: r85161", "tree": {"sha": "d642b60901c819286df73b834dd418c53d8bafe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d642b60901c819286df73b834dd418c53d8bafe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89658955e592792b3bac0fc5207cb28112cb4440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89658955e592792b3bac0fc5207cb28112cb4440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89658955e592792b3bac0fc5207cb28112cb4440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89658955e592792b3bac0fc5207cb28112cb4440/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3244e67d15cd8cf65da89849a2bea5161a7ed102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3244e67d15cd8cf65da89849a2bea5161a7ed102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3244e67d15cd8cf65da89849a2bea5161a7ed102"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "d3f99783cbe0d3af3bd537cf7248c7603b1c7a77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89658955e592792b3bac0fc5207cb28112cb4440/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89658955e592792b3bac0fc5207cb28112cb4440/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89658955e592792b3bac0fc5207cb28112cb4440", "patch": "@@ -1,3 +1,9 @@\n+2004-07-25  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* c-decl.c (groktypename, groktypename_in_param_context): Rename\n+\tvariable typename to type_name.\n+\t* c-lex.c (interpret_float): Likewise.\n+\n 2004-07-25  Roger Sayle  <roger@eyesopen.com>\n \n \t* convert.c (convert_to_real, convert_to_integer,"}, {"sha": "475ce6c7c8fae41548fd5f37f676f58b4539bf6f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89658955e592792b3bac0fc5207cb28112cb4440/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89658955e592792b3bac0fc5207cb28112cb4440/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=89658955e592792b3bac0fc5207cb28112cb4440", "patch": "@@ -2646,33 +2646,33 @@ set_array_declarator_type (tree decl, tree type, int abstract_p)\n /* Decode a \"typename\", such as \"int **\", returning a ..._TYPE node.  */\n \n tree\n-groktypename (tree typename)\n+groktypename (tree type_name)\n {\n   tree specs, attrs;\n \n-  if (TREE_CODE (typename) != TREE_LIST)\n-    return typename;\n+  if (TREE_CODE (type_name) != TREE_LIST)\n+    return type_name;\n \n-  split_specs_attrs (TREE_PURPOSE (typename), &specs, &attrs);\n+  split_specs_attrs (TREE_PURPOSE (type_name), &specs, &attrs);\n \n-  typename = grokdeclarator (TREE_VALUE (typename), specs, TYPENAME, 0,\n+  type_name = grokdeclarator (TREE_VALUE (type_name), specs, TYPENAME, 0,\n \t\t\t     NULL);\n \n   /* Apply attributes.  */\n-  decl_attributes (&typename, attrs, 0);\n+  decl_attributes (&type_name, attrs, 0);\n \n-  return typename;\n+  return type_name;\n }\n \n /* Return a PARM_DECL node for a given pair of specs and declarator.  */\n \n tree\n-groktypename_in_parm_context (tree typename)\n+groktypename_in_parm_context (tree type_name)\n {\n-  if (TREE_CODE (typename) != TREE_LIST)\n-    return typename;\n-  return grokdeclarator (TREE_VALUE (typename),\n-\t\t\t TREE_PURPOSE (typename),\n+  if (TREE_CODE (type_name) != TREE_LIST)\n+    return type_name;\n+  return grokdeclarator (TREE_VALUE (type_name),\n+\t\t\t TREE_PURPOSE (type_name),\n \t\t\t PARM, 0, NULL);\n }\n "}, {"sha": "c7d03fb47e4761a2ae50dea60231fbba1c938d66", "filename": "gcc/c-lex.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89658955e592792b3bac0fc5207cb28112cb4440/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89658955e592792b3bac0fc5207cb28112cb4440/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=89658955e592792b3bac0fc5207cb28112cb4440", "patch": "@@ -597,24 +597,24 @@ interpret_float (const cpp_token *token, unsigned int flags)\n   REAL_VALUE_TYPE real;\n   char *copy;\n   size_t copylen;\n-  const char *typename;\n+  const char *type_name;\n \n-  /* FIXME: make %T work in error/warning, then we don't need typename.  */\n+  /* FIXME: make %T work in error/warning, then we don't need type_name.  */\n   if ((flags & CPP_N_WIDTH) == CPP_N_LARGE)\n     {\n       type = long_double_type_node;\n-      typename = \"long double\";\n+      type_name = \"long double\";\n     }\n   else if ((flags & CPP_N_WIDTH) == CPP_N_SMALL\n \t   || flag_single_precision_constant)\n     {\n       type = float_type_node;\n-      typename = \"float\";\n+      type_name = \"float\";\n     }\n   else\n     {\n       type = double_type_node;\n-      typename = \"double\";\n+      type_name = \"double\";\n     }\n \n   /* Copy the constant to a nul-terminated buffer.  If the constant\n@@ -641,7 +641,7 @@ interpret_float (const cpp_token *token, unsigned int flags)\n      ??? That's a dubious reason... is this a mandatory diagnostic or\n      isn't it?   -- zw, 2001-08-21.  */\n   if (REAL_VALUE_ISINF (real) && pedantic)\n-    warning (\"floating constant exceeds range of \\\"%s\\\"\", typename);\n+    warning (\"floating constant exceeds range of \\\"%s\\\"\", type_name);\n \n   /* Create a node with determined type and value.  */\n   value = build_real (type, real);"}]}