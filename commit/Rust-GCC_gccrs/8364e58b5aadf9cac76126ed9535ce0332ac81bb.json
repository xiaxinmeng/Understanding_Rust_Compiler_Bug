{"sha": "8364e58b5aadf9cac76126ed9535ce0332ac81bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM2NGU1OGI1YWFkZjljYWM3NjEyNmVkOTUzNWNlMDMzMmFjODFiYg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-05-18T08:52:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-05-18T08:52:30Z"}, "message": "[AArch64] Unify vec_set patterns, support floating-point vector modes properly\n\nWe've a deficiency in our vec_set family of patterns.\nWe don't support directly loading a vector lane using LD1 for V2DImode and all the vector floating-point modes.\nWe do do it correctly for the other integer vector modes (V4SI, V8HI etc) though.\n\nThe alternatives on the relative floating-point patterns only allow a register-to-register INS instruction.\nThat means if we want to load a value into a vector lane we must first load it into a scalar register and then\nperform an INS, which is wasteful.\n\nThere is also an explicit V2DI vec_set expander dangling around for no reason that I can see. It seems to do the\nexact same things as the other vec_set expanders. This patch removes that.\nIt now unifies all vec_set expansions into a single \"vec_set<mode>\" define_expand using the catch-all VALL_F16 iterator. \n\nWith this patch we avoid loading values into scalar registers and then doing an explicit INS on them to move them into\nthe desired vector lanes. For example for:\n\ntypedef float v4sf __attribute__ ((vector_size (16)));\ntypedef long long v2di __attribute__ ((vector_size (16)));\n\nv2di\nfoo_v2di (long long *a, long long *b)\n{\n  v2di res = { *a, *b };\n  return res;\n}\n\nv4sf\nfoo_v4sf (float *a, float *b, float *c, float *d)\n{\n  v4sf res = { *a, *b, *c, *d };\n  return res;\n}\n\nwe currently generate:\n\nfoo_v2di:\n        ldr     d0, [x0]\n        ldr     x0, [x1]\n        ins     v0.d[1], x0\n        ret\n\nfoo_v4sf:\n        ldr     s0, [x0]\n        ldr     s3, [x1]\n        ldr     s2, [x2]\n        ldr     s1, [x3]\n        ins     v0.s[1], v3.s[0]\n        ins     v0.s[2], v2.s[0]\n        ins     v0.s[3], v1.s[0]\n        ret\n\nbut with this patch we generate the much cleaner:\nfoo_v2di:\n        ldr     d0, [x0]\n        ld1     {v0.d}[1], [x1]\n        ret\n\nfoo_v4sf:\n        ldr     s0, [x0]\n        ld1     {v0.s}[1], [x1]\n        ld1     {v0.s}[2], [x2]\n        ld1     {v0.s}[3], [x3]\n        ret\n\n\n\t* config/aarch64/aarch64-simd.md (vec_set<mode>): Use VALL_F16 mode\n\titerator.  Delete separate integer-mode vec_set<mode> expander.\n\t(aarch64_simd_vec_setv2di): Delete.\n\t(vec_setv2di): Delete.\n\t(aarch64_simd_vec_set<mode>): Delete all other patterns with that name.\n\tUse VALL_F16 mode iterator.  Add LD1 alternative and use vwcore for\n\tthe \"w, r\" alternative.\n\n\t* gcc.target/aarch64/vect-init-ld1.c: New test.\n\nFrom-SVN: r260351", "tree": {"sha": "504a57ed922771ceaf234ead46813afaf4087212", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/504a57ed922771ceaf234ead46813afaf4087212"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8364e58b5aadf9cac76126ed9535ce0332ac81bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8364e58b5aadf9cac76126ed9535ce0332ac81bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8364e58b5aadf9cac76126ed9535ce0332ac81bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8364e58b5aadf9cac76126ed9535ce0332ac81bb/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb63c01f65d475f7f05d1979f66c1c41faa61da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb63c01f65d475f7f05d1979f66c1c41faa61da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb63c01f65d475f7f05d1979f66c1c41faa61da9"}], "stats": {"total": 168, "additions": 92, "deletions": 76}, "files": [{"sha": "59f4508ba92d9d5be5df257e524cb74fd65dde66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8364e58b5aadf9cac76126ed9535ce0332ac81bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8364e58b5aadf9cac76126ed9535ce0332ac81bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8364e58b5aadf9cac76126ed9535ce0332ac81bb", "patch": "@@ -1,3 +1,13 @@\n+2018-05-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (vec_set<mode>): Use VALL_F16 mode\n+\titerator.  Delete separate integer-mode vec_set<mode> expander.\n+\t(aarch64_simd_vec_setv2di): Delete.\n+\t(vec_setv2di): Delete.\n+\t(aarch64_simd_vec_set<mode>): Delete all other patterns with that name.\n+\tUse VALL_F16 mode iterator.  Add LD1 alternative and use vwcore for\n+\tthe \"w, r\" alternative.\n+\n 2018-05-18  Martin Liska  <mliska@suse.cz>\n \n \t* passes.def: Add pass_lower_switch and pass_lower_switch_O0."}, {"sha": "2ebd256329c1a6a6b790d16955cbcee3feca456c", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 9, "deletions": 76, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8364e58b5aadf9cac76126ed9535ce0332ac81bb/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8364e58b5aadf9cac76126ed9535ce0332ac81bb/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8364e58b5aadf9cac76126ed9535ce0332ac81bb", "patch": "@@ -694,11 +694,11 @@\n )\n \n (define_insn \"aarch64_simd_vec_set<mode>\"\n-  [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w,w,w\")\n-        (vec_merge:VDQ_BHSI\n-\t    (vec_duplicate:VDQ_BHSI\n-\t\t(match_operand:<VEL> 1 \"aarch64_simd_general_operand\" \"r,w,Utv\"))\n-\t    (match_operand:VDQ_BHSI 3 \"register_operand\" \"0,0,0\")\n+  [(set (match_operand:VALL_F16 0 \"register_operand\" \"=w,w,w\")\n+\t(vec_merge:VALL_F16\n+\t    (vec_duplicate:VALL_F16\n+\t\t(match_operand:<VEL> 1 \"aarch64_simd_general_operand\" \"w,?r,Utv\"))\n+\t    (match_operand:VALL_F16 3 \"register_operand\" \"0,0,0\")\n \t    (match_operand:SI 2 \"immediate_operand\" \"i,i,i\")))]\n   \"TARGET_SIMD\"\n   {\n@@ -707,16 +707,16 @@\n    switch (which_alternative)\n      {\n      case 0:\n-\treturn \"ins\\\\t%0.<Vetype>[%p2], %w1\";\n-     case 1:\n \treturn \"ins\\\\t%0.<Vetype>[%p2], %1.<Vetype>[0]\";\n+     case 1:\n+\treturn \"ins\\\\t%0.<Vetype>[%p2], %<vwcore>1\";\n      case 2:\n         return \"ld1\\\\t{%0.<Vetype>}[%p2], %1\";\n      default:\n \tgcc_unreachable ();\n      }\n   }\n-  [(set_attr \"type\" \"neon_from_gp<q>, neon_ins<q>, neon_load1_one_lane<q>\")]\n+  [(set_attr \"type\" \"neon_ins<q>, neon_from_gp<q>, neon_load1_one_lane<q>\")]\n )\n \n (define_insn \"*aarch64_simd_vec_copy_lane<mode>\"\n@@ -1030,19 +1030,6 @@\n   }\n )\n \n-(define_expand \"vec_set<mode>\"\n-  [(match_operand:VDQ_BHSI 0 \"register_operand\")\n-   (match_operand:<VEL> 1 \"register_operand\")\n-   (match_operand:SI 2 \"immediate_operand\")]\n-  \"TARGET_SIMD\"\n-  {\n-    HOST_WIDE_INT elem = (HOST_WIDE_INT) 1 << INTVAL (operands[2]);\n-    emit_insn (gen_aarch64_simd_vec_set<mode> (operands[0], operands[1],\n-\t\t\t\t\t    GEN_INT (elem), operands[0]));\n-    DONE;\n-  }\n-)\n-\n ;; For 64-bit modes we use ushl/r, as this does not require a SIMD zero.\n (define_insn \"vec_shr_<mode>\"\n   [(set (match_operand:VD 0 \"register_operand\" \"=w\")\n@@ -1059,62 +1046,8 @@\n   [(set_attr \"type\" \"neon_shift_imm\")]\n )\n \n-(define_insn \"aarch64_simd_vec_setv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=w,w\")\n-        (vec_merge:V2DI\n-\t    (vec_duplicate:V2DI\n-\t\t(match_operand:DI 1 \"register_operand\" \"r,w\"))\n-\t    (match_operand:V2DI 3 \"register_operand\" \"0,0\")\n-\t    (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n-  \"TARGET_SIMD\"\n-  {\n-    int elt = ENDIAN_LANE_N (2, exact_log2 (INTVAL (operands[2])));\n-    operands[2] = GEN_INT ((HOST_WIDE_INT) 1 << elt);\n-    switch (which_alternative)\n-      {\n-      case 0:\n-\treturn \"ins\\\\t%0.d[%p2], %1\";\n-      case 1:\n-        return \"ins\\\\t%0.d[%p2], %1.d[0]\";\n-      default:\n-\tgcc_unreachable ();\n-      }\n-  }\n-  [(set_attr \"type\" \"neon_from_gp, neon_ins_q\")]\n-)\n-\n-(define_expand \"vec_setv2di\"\n-  [(match_operand:V2DI 0 \"register_operand\")\n-   (match_operand:DI 1 \"register_operand\")\n-   (match_operand:SI 2 \"immediate_operand\")]\n-  \"TARGET_SIMD\"\n-  {\n-    HOST_WIDE_INT elem = (HOST_WIDE_INT) 1 << INTVAL (operands[2]);\n-    emit_insn (gen_aarch64_simd_vec_setv2di (operands[0], operands[1],\n-\t\t\t\t\t  GEN_INT (elem), operands[0]));\n-    DONE;\n-  }\n-)\n-\n-(define_insn \"aarch64_simd_vec_set<mode>\"\n-  [(set (match_operand:VDQF_F16 0 \"register_operand\" \"=w\")\n-\t(vec_merge:VDQF_F16\n-\t    (vec_duplicate:VDQF_F16\n-\t\t(match_operand:<VEL> 1 \"register_operand\" \"w\"))\n-\t    (match_operand:VDQF_F16 3 \"register_operand\" \"0\")\n-\t    (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n-  \"TARGET_SIMD\"\n-  {\n-    int elt = ENDIAN_LANE_N (<nunits>, exact_log2 (INTVAL (operands[2])));\n-\n-    operands[2] = GEN_INT ((HOST_WIDE_INT)1 << elt);\n-    return \"ins\\t%0.<Vetype>[%p2], %1.<Vetype>[0]\";\n-  }\n-  [(set_attr \"type\" \"neon_ins<q>\")]\n-)\n-\n (define_expand \"vec_set<mode>\"\n-  [(match_operand:VDQF_F16 0 \"register_operand\" \"+w\")\n+  [(match_operand:VALL_F16 0 \"register_operand\" \"+w\")\n    (match_operand:<VEL> 1 \"register_operand\" \"w\")\n    (match_operand:SI 2 \"immediate_operand\" \"\")]\n   \"TARGET_SIMD\""}, {"sha": "840d9a0f49378966d1efa1f2ba7fd5f2031b512a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8364e58b5aadf9cac76126ed9535ce0332ac81bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8364e58b5aadf9cac76126ed9535ce0332ac81bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8364e58b5aadf9cac76126ed9535ce0332ac81bb", "patch": "@@ -1,3 +1,7 @@\n+2018-05-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/vect-init-ld1.c: New test.\n+\n 2018-05-18  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/tree-ssa/vrp104.c: Adjust dump file that is scanned."}, {"sha": "d7ff9af7d3285318be2d847ff1a4edbe072ef076", "filename": "gcc/testsuite/gcc.target/aarch64/vect-init-ld1.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8364e58b5aadf9cac76126ed9535ce0332ac81bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-ld1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8364e58b5aadf9cac76126ed9535ce0332ac81bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-ld1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-ld1.c?ref=8364e58b5aadf9cac76126ed9535ce0332ac81bb", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef char v8qi __attribute__ ((vector_size (8)));\n+typedef char v16qi __attribute__ ((vector_size (16)));\n+typedef short v4hi __attribute__ ((vector_size (8)));\n+typedef short v8hi __attribute__ ((vector_size (16)));\n+typedef int v2si __attribute__ ((vector_size (8)));\n+typedef int v4si __attribute__ ((vector_size (16)));\n+typedef long long v2di __attribute__ ((vector_size (16)));\n+\n+typedef __fp16 v4hf __attribute__ ((vector_size (8)));\n+typedef __fp16 v8hf __attribute__ ((vector_size (16)));\n+typedef float v2sf __attribute__ ((vector_size (8)));\n+typedef float v4sf __attribute__ ((vector_size (16)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n+\n+#define FUNC2(T, IT)    \\\n+T                       \\\n+foo_##T (IT *a, IT *b)  \\\n+{                       \\\n+  T res = { *a, *b };   \\\n+  return res;           \\\n+}\n+\n+FUNC2(v2di, long long)\n+FUNC2(v2si, int)\n+FUNC2(v2df, double)\n+FUNC2(v2sf, float)\n+\n+#define FUNC4(T, IT)    \\\n+T                       \\\n+foo_##T (IT *a, IT *b, IT *c, IT *d)    \\\n+{                                       \\\n+  T res = { *a, *b, *c, *d };           \\\n+  return res;                           \\\n+}\n+\n+FUNC4(v4si, int)\n+FUNC4(v4hi, short)\n+FUNC4(v4sf, float)\n+FUNC4(v4hf, __fp16)\n+\n+#define FUNC8(T, IT)    \\\n+T                       \\\n+foo_##T (IT *a, IT *b, IT *c, IT *d, IT *e, IT *f, IT *g, IT *h)        \\\n+{                                                                       \\\n+  T res = { *a, *b, *c, *d, *e, *f, *g, *h };                           \\\n+  return res;                                                           \\\n+}\n+\n+FUNC8(v8hi, short)\n+FUNC8(v8qi, char)\n+FUNC8(v8hf, __fp16)\n+\n+\n+v16qi\n+foo_v16qi (char *a, char *a1, char *a2, char *a3, char *a4, char *a5,\n+     char *a6, char *a7, char *a8, char *a9, char *a10, char *a11, char *a12,\n+     char *a13, char *a14, char *a15)\n+{\n+  v16qi res = { *a, *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10,\n+               *a11, *a12, *a13, *a14, *a15 };\n+  return res;\n+}\n+\n+/* { dg-final { scan-assembler-not \"ld1r\\t\" } } */\n+/* { dg-final { scan-assembler-not \"dup\\t\" } } */\n+/* { dg-final { scan-assembler-not \"ins\\t\" } } */"}]}