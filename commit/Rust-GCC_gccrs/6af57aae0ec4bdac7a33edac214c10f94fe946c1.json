{"sha": "6af57aae0ec4bdac7a33edac214c10f94fe946c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmNTdhYWUwZWM0YmRhYzdhMzNlZGFjMjE0YzEwZjk0ZmU5NDZjMQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@cygnus.com", "date": "1999-04-27T17:08:37Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1999-04-27T17:08:37Z"}, "message": "rtl.h (REG_EH_REGION): Update comment to indicate a value of -1 indicates no throw and no nonlocal gotos.\n\nTue Apr 27 19:50:25 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n\t* rtl.h (REG_EH_REGION): Update comment to indicate a value of -1\n\tindicates no throw and no nonlocal gotos.\n\t* optabs.c (emit_libcall_block): Emit REG_EH_REGION with a value\n\tof -1 instead of 0 to indicate a nonlocal goto won't happen either.\n\t* flow.c (count_basic_blocks, find_basic_blocks_1): Ignore libcall\n\tblocks, look for REG_EH_REGION note exclusively.\n\t(make_edges): Check for REG_EH_REGION > 0 for specified handlers.\n\nFrom-SVN: r26680", "tree": {"sha": "b3e597085cddcc62fd320d5b8095d192a0dc03ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3e597085cddcc62fd320d5b8095d192a0dc03ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6af57aae0ec4bdac7a33edac214c10f94fe946c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af57aae0ec4bdac7a33edac214c10f94fe946c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af57aae0ec4bdac7a33edac214c10f94fe946c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af57aae0ec4bdac7a33edac214c10f94fe946c1/comments", "author": null, "committer": null, "parents": [{"sha": "ceff9b144519cbd98a2ba3af247fff5d16d82123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceff9b144519cbd98a2ba3af247fff5d16d82123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceff9b144519cbd98a2ba3af247fff5d16d82123"}], "stats": {"total": 74, "additions": 40, "deletions": 34}, "files": [{"sha": "d2c81274e0c253fe063afed016056b2122e2c204", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af57aae0ec4bdac7a33edac214c10f94fe946c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af57aae0ec4bdac7a33edac214c10f94fe946c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6af57aae0ec4bdac7a33edac214c10f94fe946c1", "patch": "@@ -1,3 +1,13 @@\n+Tue Apr 27 19:50:25 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* rtl.h (REG_EH_REGION): Update comment to indicate a value of -1\n+\tindicates no throw and no nonlocal gotos.\n+\t* optabs.c (emit_libcall_block): Emit REG_EH_REGION with a value\n+\tof -1 instead of 0 to indicate a nonlocal goto won't happen either.\n+\t* flow.c (count_basic_blocks, find_basic_blocks_1): Ignore libcall\n+\tblocks, look for REG_EH_REGION note exclusively.\n+\t(make_edges): Check for REG_EH_REGION > 0 for specified handlers.\n+\n Tue Apr 27 15:33:42 1999  David Edelsohn  <edelsohn@gnu.org>\n \n \t* rs6000.h (read_only_data_section, private_data_section,\n@@ -124,7 +134,7 @@ Mon Apr 26 15:27:33 1999  Mark Mitchell  <mark@codesourcery.com>\n \t* fixinc/inclhack.tpl: Remove unnecessary character quote\n \t* fixinc/fixincl.sh, fixinc/inclhack.sh: Regenerate\n \n-Mon Apr 26 10:41:42 EDT 1999  <amacleod@cygnus.com>\n+Mon Apr 26 10:41:42 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n \n \t* alpha.md (builtin_setjmp_receiver): Use a label_ref instead of \n \ta code label."}, {"sha": "b46c87ea46ac9c7139e85ab428ca98d7c82948dd", "filename": "gcc/flow.c", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af57aae0ec4bdac7a33edac214c10f94fe946c1/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af57aae0ec4bdac7a33edac214c10f94fe946c1/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=6af57aae0ec4bdac7a33edac214c10f94fe946c1", "patch": "@@ -435,7 +435,6 @@ count_basic_blocks (f)\n   register RTX_CODE prev_code;\n   register int count = 0;\n   int eh_region = 0;\n-  int in_libcall_block = 0;\n   int call_had_abnormal_edge = 0;\n   rtx prev_call = NULL_RTX;\n \n@@ -444,11 +443,6 @@ count_basic_blocks (f)\n     {\n       register RTX_CODE code = GET_CODE (insn);\n \n-      /* Track when we are inside in LIBCALL block.  */\n-      if (GET_RTX_CLASS (code) == 'i'\n-\t  && find_reg_note (insn, REG_LIBCALL, NULL_RTX))\n-\tin_libcall_block = 1;\n-\n       if (code == CODE_LABEL\n \t  || (GET_RTX_CLASS (code) == 'i'\n \t      && (prev_code == JUMP_INSN\n@@ -473,14 +467,20 @@ count_basic_blocks (f)\n       /* Record whether this call created an edge.  */\n       if (code == CALL_INSN)\n \t{\n+\t  rtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n+\t  int region = (note ? XINT (XEXP (note, 0), 0) : 1);\n \t  prev_call = insn;\n \t  call_had_abnormal_edge = 0;\n-\t  if (nonlocal_goto_handler_labels)\n-\t    call_had_abnormal_edge = !in_libcall_block;\n-\t  else if (eh_region)\n+\n+\t  /* If there is a specified EH region, we have an edge.  */\n+\t  if (eh_region && region > 0)\n+\t    call_had_abnormal_edge = 1;\n+\t  else\n \t    {\n-\t      rtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n-\t      if (!note || XINT (XEXP (note, 0), 0) != 0)\n+\t      /* If there is a nonlocal goto label and the specified\n+\t\t region number isn't -1, we have an edge. (0 means\n+\t\t no throw, but might have a nonlocal goto).  */\n+\t      if (nonlocal_goto_handler_labels && region >= 0)\n \t\tcall_had_abnormal_edge = 1;\n \t    }\n \t}\n@@ -494,9 +494,6 @@ count_basic_blocks (f)\n       else if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_END)\n \t--eh_region;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-\t  && find_reg_note (insn, REG_RETVAL, NULL_RTX))\n-\tin_libcall_block = 0;\n     }\n \n   /* The rest of the compiler works a bit smoother when we don't have to\n@@ -527,7 +524,6 @@ find_basic_blocks_1 (f, bb_eh_end)\n      rtx *bb_eh_end;\n {\n   register rtx insn, next;\n-  int in_libcall_block = 0;\n   int call_has_abnormal_edge = 0;\n   int i = 0;\n   rtx bb_note = NULL_RTX;\n@@ -548,21 +544,22 @@ find_basic_blocks_1 (f, bb_eh_end)\n \n       next = NEXT_INSN (insn);\n \n-      /* Track when we are inside in LIBCALL block.  */\n-      if (GET_RTX_CLASS (code) == 'i'\n-\t  && find_reg_note (insn, REG_LIBCALL, NULL_RTX))\n-\tin_libcall_block = 1;\n-\n       if (code == CALL_INSN)\n \t{\n \t  /* Record whether this call created an edge.  */\n+\t  rtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n+\t  int region = (note ? XINT (XEXP (note, 0), 0) : 1);\n \t  call_has_abnormal_edge = 0;\n-\t  if (nonlocal_goto_handler_labels)\n-\t    call_has_abnormal_edge = !in_libcall_block;\n-\t  else if (eh_list)\n+\n+\t  /* If there is an EH region, we have an edge.  */\n+\t  if (eh_list && region > 0)\n+\t    call_has_abnormal_edge = 1;\n+\t  else\n \t    {\n-\t      rtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n-\t      if (!note || XINT (XEXP (note, 0), 0) != 0)\n+\t      /* If there is a nonlocal goto label and the specified\n+\t\t region number isn't -1, we have an edge. (0 means\n+\t\t no throw, but might have a nonlocal goto).  */\n+\t      if (nonlocal_goto_handler_labels && region >= 0)\n \t\tcall_has_abnormal_edge = 1;\n \t    }\n \t}\n@@ -722,9 +719,6 @@ find_basic_blocks_1 (f, bb_eh_end)\n \t\t    = gen_rtx_EXPR_LIST (VOIDmode, XEXP (note, 0),\n \t\t\t\t         label_value_list);\n \t      }\n-\n-\t  if (find_reg_note (insn, REG_RETVAL, NULL_RTX))\n-\t    in_libcall_block = 0;\n \t}\n     }\n \n@@ -996,7 +990,7 @@ make_edges (label_value_list, bb_eh_end)\n \t    x = find_reg_note (insn, REG_EH_REGION, 0);\n \t  if (x)\n \t    {\n-\t      if (XINT (XEXP (x, 0), 0) != 0)\n+\t      if (XINT (XEXP (x, 0), 0) > 0)\n \t\t{\n \t\t  ptr = get_first_handler (XINT (XEXP (x, 0), 0));\n \t\t  while (ptr)"}, {"sha": "541471e0910c04383b5c4f21375e75416711a953", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af57aae0ec4bdac7a33edac214c10f94fe946c1/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af57aae0ec4bdac7a33edac214c10f94fe946c1/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=6af57aae0ec4bdac7a33edac214c10f94fe946c1", "patch": "@@ -2604,7 +2604,7 @@ emit_libcall_block (insns, target, result, equiv)\n         {\n           rtx note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n           if (note == NULL_RTX)\n-            REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, GEN_INT (0),\n+            REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, GEN_INT (-1),\n                                                   REG_NOTES (insn));\n         }\n     }"}, {"sha": "8eba5eab5d9dfa89d713a36e8f54ad17a21e26a2", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af57aae0ec4bdac7a33edac214c10f94fe946c1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af57aae0ec4bdac7a33edac214c10f94fe946c1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6af57aae0ec4bdac7a33edac214c10f94fe946c1", "patch": "@@ -343,12 +343,14 @@ typedef struct rtvec_def{\n    but are too complex for DWARF to interpret what they imply.  The attached\n    rtx is used instead of intuition.  */\n /*   REG_EH_REGION is used to indicate what exception region an INSN\n-   belongs in. This can be used to indicate what region a call may throw\n-   to. a REGION of 0 indicates that a call cannot throw at all.\n+   belongs in.  This can be used to indicate what region a call may throw\n+   to.  A REGION of 0 indicates that a call cannot throw at all.\n+   A REGION  of -1 indicates that it cannot throw, nor will it execute\n+   a non-local goto.\n      REG_EH_RETHROW is used to indicate what that a call is actually a\n    call to rethrow, and specifies which region the rethrow is targetting.\n    This provides a way to generate the non standard flow edges required \n-   for a rethrow. */\n+   for a rethrow.  */\n    \n \n #define REG_NOTES(INSN)\t((INSN)->fld[6].rtx)"}]}