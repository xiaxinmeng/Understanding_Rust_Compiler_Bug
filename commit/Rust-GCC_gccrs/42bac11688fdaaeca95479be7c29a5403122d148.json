{"sha": "42bac11688fdaaeca95479be7c29a5403122d148", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJiYWMxMTY4OGZkYWFlY2E5NTQ3OWJlN2MyOWE1NDAzMTIyZDE0OA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2002-06-09T16:46:01Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2002-06-09T16:46:01Z"}, "message": "encoding.c (objc_layout_structure_next_member): Remove unused variable.\n\n\t* encoding.c (objc_layout_structure_next_member): Remove unused\n\tvariable.\n\nFrom-SVN: r54406", "tree": {"sha": "0870f4bc447c6af738fddcf700a7884399a07b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0870f4bc447c6af738fddcf700a7884399a07b39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42bac11688fdaaeca95479be7c29a5403122d148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42bac11688fdaaeca95479be7c29a5403122d148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42bac11688fdaaeca95479be7c29a5403122d148", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42bac11688fdaaeca95479be7c29a5403122d148/comments", "author": null, "committer": null, "parents": [{"sha": "309323c219481cda4371d5d7d301e892acdaa006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309323c219481cda4371d5d7d301e892acdaa006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/309323c219481cda4371d5d7d301e892acdaa006"}], "stats": {"total": 80, "additions": 42, "deletions": 38}, "files": [{"sha": "a43812aa3095d73177ef349cf08e59a099ee8336", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bac11688fdaaeca95479be7c29a5403122d148/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bac11688fdaaeca95479be7c29a5403122d148/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=42bac11688fdaaeca95479be7c29a5403122d148", "patch": "@@ -1,3 +1,8 @@\n+2002-06-09  Andreas Jaeger  <aj@suse.de>\n+\n+\t* encoding.c (objc_layout_structure_next_member): Remove unused\n+\tvariable.\n+\n 2002-05-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (SHELL): Set to @SHELL@.\n@@ -181,14 +186,14 @@ Wed Jan  3 00:49:10 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \tfunction. This can alleviate problems __builtin_apply() and\n \tfriends have on various platforms. (Solution suggested by Helge\n \tHess.)\n-\t\n+\n \t* objc/objc-api.h: Define __objc_msg_forward.\n \n \t* sendmsg.c: Define gen_rtx_REG.\n \n 2000-12-06      Ralf Corsepius <corsepiu@faw.uni-ulm.de>\n \n-\t* thr-rtems.c: New file. Stub to compile. \n+\t* thr-rtems.c: New file. Stub to compile.\n \n 2000-09-06  Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -230,7 +235,7 @@ Sun Aug  6 22:51:16 2000  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n Fri Jul 28 08:58:02 2000  Nicola Pero  <nicola@brainstorm.co.uk>\n \n-\t* configure.in: Added libtool support; build shared libraries \n+\t* configure.in: Added libtool support; build shared libraries\n \tif --enable-shared was passed on command line.\n \t* Makefile.in: Modified most compilation commands to use libtool.\n \t* aclocal.m4: New symbolic link to the ../libtool.m4, from the\n@@ -291,7 +296,7 @@ Tue Sep 21 07:47:10 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (gc.o, gc_gc.o): Do not pass -fgnu-runtime to\n \tthe compiler when building C code.\n-\t\n+\n Fri Aug  6 23:32:29 1999  Daniel Jacobowitz <drow@drow.them.org>\n \n \t* Makefile.in (FLAGS_TO_PASS): Include prefix, exec_prefix,\n@@ -370,7 +375,7 @@ Sat Oct 17 05:21:31 1998  Ovidiu Predescu  <ovidiu@slip.net>\n Mon Oct 11 21:25:27 1998  Ovidiu Predescu  <ovidiu@slip.net>\n \n \t* encoding.c: Redefine get_inner_array_type to get the first entry\n- \tin the structure.\n+\tin the structure.\n \n Thu Oct  8 12:21:14 1998  Richard Frith-Macdonald <richard@brainstorm.co.uk>\n \n@@ -435,4 +440,3 @@ Mon Sep 21 23:27:10 1998  Ovidiu Predescu <ovidiu@slip.net>\n 1998-09-21  Ben Elliston  <bje@cygnus.com>\n \n \t* New directory.  Moved files from ../gcc/objc.\n-"}, {"sha": "b30626f41351030027a3c0bcd18a444f79355017", "filename": "libobjc/encoding.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bac11688fdaaeca95479be7c29a5403122d148/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bac11688fdaaeca95479be7c29a5403122d148/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=42bac11688fdaaeca95479be7c29a5403122d148", "patch": "@@ -1,5 +1,6 @@\n /* Encoding of types for Objective C.\n-   Copyright (C) 1993, 1995, 1996, 1997, 1998, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 1997, 1998, 2000, 2002\n+   Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup\n    Bitfield support by Ovidiu Predescu\n \n@@ -85,15 +86,15 @@ static inline int\n atoi (const char* str)\n {\n   int res = 0;\n-  \n+\n   while (isdigit (*str))\n     res *= 10, res += (*str++ - '0');\n \n   return res;\n }\n \n /*\n-  return the size of an object specified by type \n+  return the size of an object specified by type\n */\n \n int\n@@ -122,7 +123,7 @@ objc_sizeof_type (const char* type)\n   case _C_CHR:\n     return sizeof(char);\n     break;\n-    \n+\n   case _C_UCHR:\n     return sizeof(unsigned char);\n     break;\n@@ -182,7 +183,7 @@ objc_sizeof_type (const char* type)\n       while (isdigit(*++type));\n       return len*objc_aligned_size (type);\n     }\n-    break; \n+    break;\n \n   case _C_BFLD:\n     {\n@@ -229,7 +230,7 @@ objc_sizeof_type (const char* type)\n \t}\n       return max_size;\n     }\n-    \n+\n   default:\n     {\n       objc_error(nil, OBJC_ERR_BAD_TYPE, \"unknown type %s\\n\", type);\n@@ -240,7 +241,7 @@ objc_sizeof_type (const char* type)\n \n \n /*\n-  Return the alignment of an object specified by type \n+  Return the alignment of an object specified by type\n */\n \n int\n@@ -260,15 +261,15 @@ objc_alignof_type(const char* type)\n   case _C_CLASS:\n     return __alignof__(Class);\n     break;\n-    \n+\n   case _C_SEL:\n     return __alignof__(SEL);\n     break;\n \n   case _C_CHR:\n     return __alignof__(char);\n     break;\n-    \n+\n   case _C_UCHR:\n     return __alignof__(unsigned char);\n     break;\n@@ -389,7 +390,7 @@ objc_aligned_size (const char* type)\n   to be the size of a void*.\n */\n \n-int \n+int\n objc_promoted_size (const char* type)\n {\n   int size, wordsize;\n@@ -416,9 +417,9 @@ inline const char*\n objc_skip_type_qualifiers (const char* type)\n {\n   while (*type == _C_CONST\n-\t || *type == _C_IN \n+\t || *type == _C_IN\n \t || *type == _C_INOUT\n-\t || *type == _C_OUT \n+\t || *type == _C_OUT\n \t || *type == _C_BYCOPY\n          || *type == _C_BYREF\n \t || *type == _C_ONEWAY\n@@ -429,13 +430,13 @@ objc_skip_type_qualifiers (const char* type)\n   return type;\n }\n \n-  \n+\n /*\n   Skip one typespec element.  If the typespec is prepended by type\n   qualifiers, these are skipped as well.\n */\n \n-const char* \n+const char*\n objc_skip_typespec (const char* type)\n {\n   /* Skip the variable name if any */\n@@ -446,7 +447,7 @@ objc_skip_typespec (const char* type)\n     }\n \n   type = objc_skip_type_qualifiers (type);\n-  \n+\n   switch (*type) {\n \n   case _C_ID:\n@@ -485,7 +486,7 @@ objc_skip_typespec (const char* type)\n \n   case _C_ARY_B:\n     /* skip digits, typespec and closing ']' */\n-    \n+\n     while(isdigit(*++type));\n     type = objc_skip_typespec(type);\n     if (*type == _C_ARY_E)\n@@ -504,23 +505,23 @@ objc_skip_typespec (const char* type)\n \n   case _C_STRUCT_B:\n     /* skip name, and elements until closing '}'  */\n-    \n+\n     while (*type != _C_STRUCT_E && *type++ != '=');\n     while (*type != _C_STRUCT_E) { type = objc_skip_typespec (type); }\n     return ++type;\n \n   case _C_UNION_B:\n     /* skip name, and elements until closing ')'  */\n-    \n+\n     while (*type != _C_UNION_E && *type++ != '=');\n     while (*type != _C_UNION_E) { type = objc_skip_typespec (type); }\n     return ++type;\n \n   case _C_PTR:\n     /* Just skip the following typespec */\n-    \n+\n     return objc_skip_typespec (++type);\n-    \n+\n   default:\n     {\n       objc_error(nil, OBJC_ERR_BAD_TYPE, \"unknown type %s\\n\", type);\n@@ -533,7 +534,7 @@ objc_skip_typespec (const char* type)\n   Skip an offset as part of a method encoding.  This is prepended by a\n   '+' if the argument is passed in registers.\n */\n-inline const char* \n+inline const char*\n objc_skip_offset (const char* type)\n {\n   if (*type == '+') type++;\n@@ -555,7 +556,7 @@ objc_skip_argspec (const char* type)\n /*\n   Return the number of arguments that the method MTH expects.\n   Note that all methods need two implicit arguments `self' and\n-  `_cmd'. \n+  `_cmd'.\n */\n int\n method_get_number_of_arguments (struct objc_method* mth)\n@@ -588,7 +589,7 @@ method_get_sizeof_arguments (struct objc_method* mth)\n   the last argument.  Typical use of this look like:\n \n   {\n-    char *datum, *type; \n+    char *datum, *type;\n     for (datum = method_get_first_argument (method, argframe, &type);\n          datum; datum = method_get_next_argument (argframe, &type))\n       {\n@@ -603,7 +604,7 @@ method_get_sizeof_arguments (struct objc_method* mth)\n \t  }\n       }\n   }\n-*/  \n+*/\n \n char*\n method_get_next_argument (arglist_t argframe,\n@@ -624,14 +625,14 @@ method_get_next_argument (arglist_t argframe,\n }\n \n /*\n-  Return a pointer to the value of the first argument of the method \n+  Return a pointer to the value of the first argument of the method\n   described in M with the given argumentframe ARGFRAME.  The type\n-  is returned in TYPE.  type must be passed to successive calls of \n+  is returned in TYPE.  type must be passed to successive calls of\n   method_get_next_argument.\n */\n char*\n method_get_first_argument (struct objc_method* m,\n-\t\t\t   arglist_t argframe, \n+\t\t\t   arglist_t argframe,\n \t\t\t   const char** type)\n {\n   *type = m->method_types;\n@@ -641,12 +642,12 @@ method_get_first_argument (struct objc_method* m,\n /*\n    Return a pointer to the ARGth argument of the method\n    M from the frame ARGFRAME.  The type of the argument\n-   is returned in the value-result argument TYPE \n+   is returned in the value-result argument TYPE\n */\n \n char*\n method_get_nth_argument (struct objc_method* m,\n-\t\t\t arglist_t argframe, int arg, \n+\t\t\t arglist_t argframe, int arg,\n \t\t\t const char **type)\n {\n   const char* t = objc_skip_argspec (m->method_types);\n@@ -656,7 +657,7 @@ method_get_nth_argument (struct objc_method* m,\n \n   while (arg--)\n     t = objc_skip_argspec (t);\n-  \n+\n   *type = t;\n   t = objc_skip_typespec (t);\n \n@@ -749,7 +750,6 @@ objc_layout_structure (const char *type,\n BOOL\n objc_layout_structure_next_member (struct objc_struct_layout *layout)\n {\n-  register int known_align = layout->record_size;\n   register int desired_align = 0;\n \n   /* The following are used only if the field is a bitfield */\n@@ -864,7 +864,7 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n          Bump the cumulative size to multiple of field alignment.  */\n       layout->record_size = ROUND (layout->record_size, desired_align);\n     }\n-  \n+\n   /* Jump to the next field in record. */\n \n   layout->prev_type = layout->type;"}]}