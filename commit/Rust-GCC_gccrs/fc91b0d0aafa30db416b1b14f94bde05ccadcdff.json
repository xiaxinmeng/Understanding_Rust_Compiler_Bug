{"sha": "fc91b0d0aafa30db416b1b14f94bde05ccadcdff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5MWIwZDBhYWZhMzBkYjQxNmIxYjE0Zjk0YmRlMDVjY2FkY2RmZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-14T23:15:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-14T23:15:58Z"}, "message": "(struct temp_slot): New fields base_offset, full_size.\n\n(assign_stack_temp): For !FRAME_GROWS_DOWNWARD, set p->size to size.\nSet new fields base_offset and full_size.\n(combine_temp_slots): Use new fields base_offset and full_size instead\nof slot and size.\n\nFrom-SVN: r10136", "tree": {"sha": "8858abefaa612d37e9e282580ef9d9acec294258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8858abefaa612d37e9e282580ef9d9acec294258"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc91b0d0aafa30db416b1b14f94bde05ccadcdff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc91b0d0aafa30db416b1b14f94bde05ccadcdff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc91b0d0aafa30db416b1b14f94bde05ccadcdff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc91b0d0aafa30db416b1b14f94bde05ccadcdff/comments", "author": null, "committer": null, "parents": [{"sha": "ef0e171b50823bc8d6e4b156ee6d87e732971b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0e171b50823bc8d6e4b156ee6d87e732971b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0e171b50823bc8d6e4b156ee6d87e732971b8e"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "00790b268062254ac68115cc482743f5340ccaaa", "filename": "gcc/function.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc91b0d0aafa30db416b1b14f94bde05ccadcdff/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc91b0d0aafa30db416b1b14f94bde05ccadcdff/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=fc91b0d0aafa30db416b1b14f94bde05ccadcdff", "patch": "@@ -367,6 +367,12 @@ struct temp_slot\n   int level;\n   /* Non-zero if this should survive a call to free_temp_slots.  */\n   int keep;\n+  /* The offset of the slot from the frame_pointer, including extra space\n+     for alignment.  This info is for combine_temp_slots.  */\n+  int base_offset;\n+  /* The size of the slot, including extra space for alignment.  This\n+     info is for combine_temp_slots.  */\n+  int full_size;\n };\n \n /* List of all temporaries allocated, both available and in use.  */\n@@ -870,12 +876,22 @@ assign_stack_temp (mode, size, keep)\n       /* The following slot size computation is necessary because we don't\n \t know the actual size of the temporary slot until assign_stack_local\n \t has performed all the frame alignment and size rounding for the\n-\t requested temporary.  Otherwise combine_temp_slots won't think that\n-\t adjacent slots really are adjacent.  */\n+\t requested temporary.  Note that extra space added for alignment\n+\t can be either above or below this stack slot depending on which\n+\t way the frame grows.  We include the extra space if and only if it\n+\t is above this slot.  */\n #ifdef FRAME_GROWS_DOWNWARD\n       p->size = frame_offset_old - frame_offset;\n #else\n-      p->size = frame_offset - frame_offset_old;\n+      p->size = size;\n+#endif\n+      /* Now define the fields used by combine_temp_slots.  */\n+#ifdef FRAME_GROWS_DOWNWARD\n+      p->base_offset = frame_offset;\n+      p->full_size = frame_offset_old - frame_offset;\n+#else\n+      p->base_offset = frame_offset_old;\n+      p->full_size = frame_offset - frame_offset_old;\n #endif\n       p->address = 0;\n       p->next = temp_slots;\n@@ -922,15 +938,13 @@ combine_temp_slots ()\n \t    int delete_q = 0;\n \t    if (! q->in_use && GET_MODE (q->slot) == BLKmode)\n \t      {\n-\t\tif (rtx_equal_p (plus_constant (XEXP (p->slot, 0), p->size),\n-\t\t\t\t XEXP (q->slot, 0)))\n+\t\tif (p->base_offset + p->full_size == q->base_offset)\n \t\t  {\n \t\t    /* Q comes after P; combine Q into P.  */\n \t\t    p->size += q->size;\n \t\t    delete_q = 1;\n \t\t  }\n-\t\telse if (rtx_equal_p (plus_constant (XEXP (q->slot, 0), q->size),\n-\t\t\t\t      XEXP (p->slot, 0)))\n+\t\telse if (q->base_offset + q->full_size == p->base_offset)\n \t\t  {\n \t\t    /* P comes after Q; combine P into Q.  */\n \t\t    q->size += p->size;"}]}