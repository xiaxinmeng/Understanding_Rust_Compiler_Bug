{"sha": "27631daef50f6bca3b23a6532caf570b74a28c6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc2MzFkYWVmNTBmNmJjYTNiMjNhNjUzMmNhZjU3MGI3NGEyOGM2YQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-09-29T11:53:49Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-29T11:53:49Z"}, "message": "cp-tree.h: Fix comment typos.\n\n\t* cp-tree.h: Fix comment typos.\n\t* decl.c: Likewise.\n\t* pt.c: Likewise.\n\nFrom-SVN: r57623", "tree": {"sha": "143c765ec97c1b9f687b6c466fd6a1ec6c07fe8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/143c765ec97c1b9f687b6c466fd6a1ec6c07fe8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27631daef50f6bca3b23a6532caf570b74a28c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27631daef50f6bca3b23a6532caf570b74a28c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27631daef50f6bca3b23a6532caf570b74a28c6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27631daef50f6bca3b23a6532caf570b74a28c6a/comments", "author": null, "committer": null, "parents": [{"sha": "1f3d773e3a775052b34eddcb0edbea25c4b450ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f3d773e3a775052b34eddcb0edbea25c4b450ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f3d773e3a775052b34eddcb0edbea25c4b450ae"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "e3265e4155790222b941b7ecb80e624509da798c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27631daef50f6bca3b23a6532caf570b74a28c6a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27631daef50f6bca3b23a6532caf570b74a28c6a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=27631daef50f6bca3b23a6532caf570b74a28c6a", "patch": "@@ -1,3 +1,9 @@\n+2002-09-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cp-tree.h: Fix comment typos.\n+\t* decl.c: Likewise.\n+\t* pt.c: Likewise.\n+\n 2002-09-25  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp/class.c (contains_empty_class_p): New method."}, {"sha": "7e40937bed642b7aa8f67dfbdc17dbfc17f436f5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27631daef50f6bca3b23a6532caf570b74a28c6a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27631daef50f6bca3b23a6532caf570b74a28c6a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=27631daef50f6bca3b23a6532caf570b74a28c6a", "patch": "@@ -2223,7 +2223,7 @@ struct lang_decl GTY(())\n #define TMPL_ARGS_DEPTH(NODE)\t\t\t\t\t\\\n   (TMPL_ARGS_HAVE_MULTIPLE_LEVELS (NODE) ? TREE_VEC_LENGTH (NODE) : 1)\n \n-/* The LEVELth level of the template ARGS.  The outermost level of of\n+/* The LEVELth level of the template ARGS.  The outermost level of\n    args is level 1, not level 0.  */\n #define TMPL_ARGS_LEVEL(ARGS, LEVEL)\t\t\\\n   (TMPL_ARGS_HAVE_MULTIPLE_LEVELS (ARGS)\t\\"}, {"sha": "980a38a4e3bab7fd31d56e73bfc403e214117ca0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27631daef50f6bca3b23a6532caf570b74a28c6a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27631daef50f6bca3b23a6532caf570b74a28c6a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=27631daef50f6bca3b23a6532caf570b74a28c6a", "patch": "@@ -13245,7 +13245,7 @@ finish_enum (enumtype)\n   for (pair = TYPE_VALUES (enumtype); pair; pair = TREE_CHAIN (pair))\n     TREE_TYPE (TREE_VALUE (pair)) = enumtype;\n   \n-  /* For a enum defined in a template, all further processing is\n+  /* For an enum defined in a template, all further processing is\n      postponed until the template is instantiated.  */\n   if (processing_template_decl)\n     {\n@@ -14320,7 +14320,7 @@ finish_function (flags)\n   free_after_compilation (cfun);\n   cfun = NULL;\n \n-  /* If this is a in-class inline definition, we may have to pop the\n+  /* If this is an in-class inline definition, we may have to pop the\n      bindings for the template parameters that we added in\n      maybe_begin_member_template_processing when start_function was\n      called.  */"}, {"sha": "53787d6d6c20e4d54a8c1bb02659a2971ec2fcf1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27631daef50f6bca3b23a6532caf570b74a28c6a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27631daef50f6bca3b23a6532caf570b74a28c6a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=27631daef50f6bca3b23a6532caf570b74a28c6a", "patch": "@@ -51,7 +51,7 @@ typedef int (*tree_fn_t) PARAMS ((tree, void*));\n    instantiations have been deferred, either because their definitions\n    were not yet available, or because we were putting off doing the\n    work.  The TREE_PURPOSE of each entry is a SRCLOC indicating where\n-   the instantiate request occurred; the TREE_VALUE is a either a DECL\n+   the instantiate request occurred; the TREE_VALUE is either a DECL\n    (for a function or static data member), or a TYPE (for a class)\n    indicating what we are hoping to instantiate.  */\n static GTY(()) tree pending_templates;\n@@ -5074,7 +5074,7 @@ instantiate_class_template (type)\n \n   if (t)\n     {\n-      /* This TYPE is actually a instantiation of of a partial\n+      /* This TYPE is actually an instantiation of a partial\n \t specialization.  We replace the innermost set of ARGS with\n \t the arguments appropriate for substitution.  For example,\n \t given:\n@@ -7449,7 +7449,7 @@ tsubst_expr (t, args, complain, in_decl)\n \t  }\n \n \t/* A DECL_STMT can also be used as an expression, in the condition\n-\t   clause of a if/for/while construct.  If we aren't followed by\n+\t   clause of an if/for/while construct.  If we aren't followed by\n \t   another statement, return our decl.  */\n \tif (TREE_CHAIN (t) == NULL_TREE)\n \t  return decl;"}]}