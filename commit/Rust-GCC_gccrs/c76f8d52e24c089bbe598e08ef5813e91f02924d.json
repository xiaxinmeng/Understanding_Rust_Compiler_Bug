{"sha": "c76f8d52e24c089bbe598e08ef5813e91f02924d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2ZjhkNTJlMjRjMDg5YmJlNTk4ZTA4ZWY1ODEzZTkxZjAyOTI0ZA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2011-04-15T21:48:19Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2011-04-15T21:48:19Z"}, "message": "trans-array.c (toplevel): Include gimple.h.\n\n\t* trans-array.c (toplevel): Include gimple.h.\n\t(gfc_trans_allocate_array_storage): Check flag_stack_arrays,\n\tproperly expand variable length arrays.\n\t(gfc_trans_auto_array_allocation): If flag_stack_arrays create\n\tvariable length decls and associate them with their scope.\n\t* gfortran.h (gfc_option_t): Add flag_stack_arrays member.\n\t* options.c (gfc_init_options): Handle -fstack_arrays option.\n\t* lang.opt (fstack-arrays): Add option.\n\t* invoke.texi (Code Gen Options): Document it.\n\t* Make-lang.in (trans-array.o): Depend on GIMPLE_H.\n\nFrom-SVN: r172524", "tree": {"sha": "f0232500e3e80f82cf9bf3ed6decd6681d9ccc9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0232500e3e80f82cf9bf3ed6decd6681d9ccc9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c76f8d52e24c089bbe598e08ef5813e91f02924d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76f8d52e24c089bbe598e08ef5813e91f02924d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c76f8d52e24c089bbe598e08ef5813e91f02924d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76f8d52e24c089bbe598e08ef5813e91f02924d/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5678a5a3bf407b6aa95e827ac6dd1056cdf6b415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5678a5a3bf407b6aa95e827ac6dd1056cdf6b415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5678a5a3bf407b6aa95e827ac6dd1056cdf6b415"}], "stats": {"total": 102, "additions": 88, "deletions": 14}, "files": [{"sha": "77426165b62346720a275f5789aa1c83ceaa8b6d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c76f8d52e24c089bbe598e08ef5813e91f02924d", "patch": "@@ -1,3 +1,16 @@\n+2011-04-15  Michael Matz  <matz@suse.de>\n+\n+\t* trans-array.c (toplevel): Include gimple.h.\n+\t(gfc_trans_allocate_array_storage): Check flag_stack_arrays,\n+\tproperly expand variable length arrays.\n+\t(gfc_trans_auto_array_allocation): If flag_stack_arrays create\n+\tvariable length decls and associate them with their scope.\n+\t* gfortran.h (gfc_option_t): Add flag_stack_arrays member.\n+\t* options.c (gfc_init_options): Handle -fstack_arrays option.\n+\t* lang.opt (fstack-arrays): Add option.\n+\t* invoke.texi (Code Gen Options): Document it.\n+\t* Make-lang.in (trans-array.o): Depend on GIMPLE_H.\n+\n 2011-04-15  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "753221d272c13cbf54317d0d0b1ec187176eb54c", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=c76f8d52e24c089bbe598e08ef5813e91f02924d", "patch": "@@ -353,7 +353,7 @@ fortran/trans-stmt.o: $(GFORTRAN_TRANS_DEPS) fortran/dependency.h\n fortran/trans-openmp.o: $(GFORTRAN_TRANS_DEPS)\n fortran/trans-io.o: $(GFORTRAN_TRANS_DEPS) gt-fortran-trans-io.h \\\n   fortran/ioparm.def\n-fortran/trans-array.o: $(GFORTRAN_TRANS_DEPS)\n+fortran/trans-array.o: $(GFORTRAN_TRANS_DEPS) $(GIMPLE_H)\n fortran/trans-intrinsic.o: $(GFORTRAN_TRANS_DEPS) fortran/mathbuiltins.def \\\n   gt-fortran-trans-intrinsic.h\n fortran/dependency.o: $(GFORTRAN_TRANS_DEPS) fortran/dependency.h"}, {"sha": "c2c9d0548f8e34c72b03bb02943c0dd229f6af4d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c76f8d52e24c089bbe598e08ef5813e91f02924d", "patch": "@@ -2221,6 +2221,7 @@ typedef struct\n   int flag_d_lines;\n   int gfc_flag_openmp;\n   int flag_sign_zero;\n+  int flag_stack_arrays;\n   int flag_module_private;\n   int flag_recursive;\n   int flag_init_local_zero;"}, {"sha": "57f7313f4bd8b3271c6a5b7deaa0a595cec39a5b", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=c76f8d52e24c089bbe598e08ef5813e91f02924d", "patch": "@@ -167,6 +167,7 @@ and warnings}.\n -fbounds-check -fcheck-array-temporaries  -fmax-array-constructor =@var{n} @gol\n -fcheck=@var{<all|array-temps|bounds|do|mem|pointer|recursion>} @gol\n -fcoarray=@var{<none|single|lib>} -fmax-stack-var-size=@var{n} @gol\n+-fstack-arrays @gol\n -fpack-derived  -frepack-arrays  -fshort-enums  -fexternal-blas @gol\n -fblas-matmul-limit=@var{n} -frecursive -finit-local-zero @gol\n -finit-integer=@var{n} -finit-real=@var{<zero|inf|-inf|nan|snan>} @gol\n@@ -1370,6 +1371,13 @@ Future versions of GNU Fortran may improve this behavior.\n \n The default value for @var{n} is 32768.\n \n+@item -fstack-arrays\n+@opindex @code{fstack-arrays}\n+Adding this option will make the fortran compiler put all local arrays,\n+even those of unknown size onto stack memory.  If your program uses very\n+large local arrays it's possible that you'll have to extend your runtime\n+limits for stack memory on some operating systems.\n+\n @item -fpack-derived\n @opindex @code{fpack-derived}\n @cindex structure packing"}, {"sha": "3055825047f3529e68361fd1e60b215ba7adc7ee", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=c76f8d52e24c089bbe598e08ef5813e91f02924d", "patch": "@@ -462,6 +462,10 @@ fmax-stack-var-size=\n Fortran RejectNegative Joined UInteger\n -fmax-stack-var-size=<n>\tSize in bytes of the largest array that will be put on the stack\n \n+fstack-arrays\n+Fortran\n+Put all local arrays on stack.\n+\n fmodule-private\n Fortran\n Set default accessibility of module entities to PRIVATE."}, {"sha": "5e173088d941b48b5cfe0fd2cc210b50b1cb04d4", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=c76f8d52e24c089bbe598e08ef5813e91f02924d", "patch": "@@ -124,6 +124,7 @@ gfc_init_options (unsigned int decoded_options_count,\n \n   /* Default value of flag_max_stack_var_size is set in gfc_post_options.  */\n   gfc_option.flag_max_stack_var_size = -2;\n+  gfc_option.flag_stack_arrays = 0;\n \n   gfc_option.flag_range_check = 1;\n   gfc_option.flag_pack_derived = 0;\n@@ -795,6 +796,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.flag_max_stack_var_size = value;\n       break;\n \n+    case OPT_fstack_arrays:\n+      gfc_option.flag_stack_arrays = value;\n+      break;\n+\n     case OPT_fmodule_private:\n       gfc_option.flag_module_private = value;\n       break;"}, {"sha": "638234efd698dcb767945447e1faa1c9631e55e8", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 56, "deletions": 13, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76f8d52e24c089bbe598e08ef5813e91f02924d/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=c76f8d52e24c089bbe598e08ef5813e91f02924d", "patch": "@@ -81,6 +81,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"diagnostic-core.h\"\t/* For internal_error/fatal_error.  */\n #include \"flags.h\"\n #include \"gfortran.h\"\n@@ -630,18 +631,27 @@ gfc_trans_allocate_array_storage (stmtblock_t * pre, stmtblock_t * post,\n     {\n       /* Allocate the temporary.  */\n       onstack = !dynamic && initial == NULL_TREE\n-\t\t\t && gfc_can_put_var_on_stack (size);\n+\t\t\t && (gfc_option.flag_stack_arrays\n+\t\t\t     || gfc_can_put_var_on_stack (size));\n \n       if (onstack)\n \t{\n \t  /* Make a temporary variable to hold the data.  */\n \t  tmp = fold_build2_loc (input_location, MINUS_EXPR, TREE_TYPE (nelem),\n \t\t\t\t nelem, gfc_index_one_node);\n+\t  tmp = gfc_evaluate_now (tmp, pre);\n \t  tmp = build_range_type (gfc_array_index_type, gfc_index_zero_node,\n \t\t\t\t  tmp);\n \t  tmp = build_array_type (gfc_get_element_type (TREE_TYPE (desc)),\n \t\t\t\t  tmp);\n \t  tmp = gfc_create_var (tmp, \"A\");\n+\t  /* If we're here only because of -fstack-arrays we have to\n+\t     emit a DECL_EXPR to make the gimplifier emit alloca calls.  */\n+\t  if (!gfc_can_put_var_on_stack (size))\n+\t    gfc_add_expr_to_block (pre,\n+\t\t\t\t   fold_build1_loc (input_location,\n+\t\t\t\t\t\t    DECL_EXPR, TREE_TYPE (tmp),\n+\t\t\t\t\t\t    tmp));\n \t  tmp = gfc_build_addr_expr (NULL_TREE, tmp);\n \t  gfc_conv_descriptor_data_set (pre, desc, tmp);\n \t}\n@@ -4759,9 +4769,11 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym,\n {\n   stmtblock_t init;\n   tree type;\n-  tree tmp;\n+  tree tmp = NULL_TREE;\n   tree size;\n   tree offset;\n+  tree space;\n+  tree inittree;\n   bool onstack;\n \n   gcc_assert (!(sym->attr.pointer || sym->attr.allocatable));\n@@ -4818,15 +4830,30 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym,\n       return;\n     }\n \n-  /* The size is the number of elements in the array, so multiply by the\n-     size of an element to get the total size.  */\n-  tmp = TYPE_SIZE_UNIT (gfc_get_element_type (type));\n-  size = fold_build2_loc (input_location, MULT_EXPR, gfc_array_index_type,\n-\t\t\t  size, fold_convert (gfc_array_index_type, tmp));\n+  if (gfc_option.flag_stack_arrays)\n+    {\n+      gcc_assert (TREE_CODE (TREE_TYPE (decl)) == POINTER_TYPE);\n+      space = build_decl (sym->declared_at.lb->location,\n+\t\t\t  VAR_DECL, create_tmp_var_name (\"A\"),\n+\t\t\t  TREE_TYPE (TREE_TYPE (decl)));\n+      gfc_trans_vla_type_sizes (sym, &init);\n+    }\n+  else\n+    {\n+      /* The size is the number of elements in the array, so multiply by the\n+\t size of an element to get the total size.  */\n+      tmp = TYPE_SIZE_UNIT (gfc_get_element_type (type));\n+      size = fold_build2_loc (input_location, MULT_EXPR, gfc_array_index_type,\n+\t\t\t      size, fold_convert (gfc_array_index_type, tmp));\n \n-  /* Allocate memory to hold the data.  */\n-  tmp = gfc_call_malloc (&init, TREE_TYPE (decl), size);\n-  gfc_add_modify (&init, decl, tmp);\n+      /* Allocate memory to hold the data.  */\n+      tmp = gfc_call_malloc (&init, TREE_TYPE (decl), size);\n+      gfc_add_modify (&init, decl, tmp);\n+\n+      /* Free the temporary.  */\n+      tmp = gfc_call_free (convert (pvoid_type_node, decl));\n+      space = NULL_TREE;\n+    }\n \n   /* Set offset of the array.  */\n   if (TREE_CODE (GFC_TYPE_ARRAY_OFFSET (type)) == VAR_DECL)\n@@ -4835,10 +4862,26 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym,\n   /* Automatic arrays should not have initializers.  */\n   gcc_assert (!sym->value);\n \n-  /* Free the temporary.  */\n-  tmp = gfc_call_free (convert (pvoid_type_node, decl));\n+  inittree = gfc_finish_block (&init);\n \n-  gfc_add_init_cleanup (block, gfc_finish_block (&init), tmp);\n+  if (space)\n+    {\n+      tree addr;\n+      pushdecl (space);\n+\n+      /* Don't create new scope, emit the DECL_EXPR in exactly the scope\n+         where also space is located.  */\n+      gfc_init_block (&init);\n+      tmp = fold_build1_loc (input_location, DECL_EXPR,\n+\t\t\t     TREE_TYPE (space), space);\n+      gfc_add_expr_to_block (&init, tmp);\n+      addr = fold_build1_loc (sym->declared_at.lb->location,\n+\t\t\t      ADDR_EXPR, TREE_TYPE (decl), space);\n+      gfc_add_modify (&init, decl, addr);\n+      gfc_add_init_cleanup (block, gfc_finish_block (&init), NULL_TREE);\n+      tmp = NULL_TREE;\n+    }\n+  gfc_add_init_cleanup (block, inittree, tmp);\n }\n \n "}]}