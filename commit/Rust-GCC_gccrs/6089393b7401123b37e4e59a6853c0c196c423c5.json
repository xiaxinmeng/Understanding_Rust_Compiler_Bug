{"sha": "6089393b7401123b37e4e59a6853c0c196c423c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA4OTM5M2I3NDAxMTIzYjM3ZTRlNTlhNjg1M2MwYzE5NmM0MjNjNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-12T07:23:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-12T07:23:24Z"}, "message": "re PR c++/82159 (ICE: in assign_temp, at function.c:961)\n\n\tPR c++/82159\n\t* expr.c (store_field): Don't optimize away bitsize == 0 store\n\tfrom CALL_EXPR with addressable return type.\n\n\t* g++.dg/opt/pr82159-2.C: New test.\n\nFrom-SVN: r253673", "tree": {"sha": "b7e456f1cc40bd8b1c31a95b0bc707d690c99e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7e456f1cc40bd8b1c31a95b0bc707d690c99e52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6089393b7401123b37e4e59a6853c0c196c423c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6089393b7401123b37e4e59a6853c0c196c423c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6089393b7401123b37e4e59a6853c0c196c423c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6089393b7401123b37e4e59a6853c0c196c423c5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "281ff779cc1efadd5004248e7de6ef3cfc8c30df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281ff779cc1efadd5004248e7de6ef3cfc8c30df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/281ff779cc1efadd5004248e7de6ef3cfc8c30df"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "12cf2d30475f2bf87fc3d124ff11f9c182ccdf39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6089393b7401123b37e4e59a6853c0c196c423c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6089393b7401123b37e4e59a6853c0c196c423c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6089393b7401123b37e4e59a6853c0c196c423c5", "patch": "@@ -1,3 +1,9 @@\n+2017-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/82159\n+\t* expr.c (store_field): Don't optimize away bitsize == 0 store\n+\tfrom CALL_EXPR with addressable return type.\n+\n 2017-10-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.h (TARGET_ISEL64): Delete."}, {"sha": "1bba9330cd337a184fd8cb40ea9a5364e8342a63", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6089393b7401123b37e4e59a6853c0c196c423c5/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6089393b7401123b37e4e59a6853c0c196c423c5/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6089393b7401123b37e4e59a6853c0c196c423c5", "patch": "@@ -6749,8 +6749,11 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n     return const0_rtx;\n \n   /* If we have nothing to store, do nothing unless the expression has\n-     side-effects.  */\n-  if (bitsize == 0)\n+     side-effects.  Don't do that for zero sized addressable lhs of\n+     calls.  */\n+  if (bitsize == 0\n+      && (!TREE_ADDRESSABLE (TREE_TYPE (exp))\n+\t  || TREE_CODE (exp) != CALL_EXPR))\n     return expand_expr (exp, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   if (GET_CODE (target) == CONCAT)"}, {"sha": "eaf1ce595319e8cf9b183fe6ed44533f205787db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6089393b7401123b37e4e59a6853c0c196c423c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6089393b7401123b37e4e59a6853c0c196c423c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6089393b7401123b37e4e59a6853c0c196c423c5", "patch": "@@ -1,5 +1,8 @@\n 2017-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/82159\n+\t* g++.dg/opt/pr82159-2.C: New test.\n+\n \tPR target/82353\n \t* gcc.target/i386/i386.exp (tests): Revert the '.C' extension change.\n \t* gcc.target/i386/pr82353.C: Moved to ..."}, {"sha": "f153c29ddac0ef2dde2068bc07b3b2cd4b040882", "filename": "gcc/testsuite/g++.dg/opt/pr82159-2.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6089393b7401123b37e4e59a6853c0c196c423c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr82159-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6089393b7401123b37e4e59a6853c0c196c423c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr82159-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr82159-2.C?ref=6089393b7401123b37e4e59a6853c0c196c423c5", "patch": "@@ -0,0 +1,65 @@\n+// PR c++/82159\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+template <typename T> struct D { T e; };\n+struct F : D<int[0]> {\n+  F(const F &);\n+};\n+struct G : F {\n+  template <class T> G operator-(T);\n+};\n+template <class T> struct I {\n+  typedef typename T::template J<I> ak;\n+};\n+template <class T> struct K { typename I<T>::ak an; };\n+struct H {\n+  G l;\n+};\n+struct C {\n+  ~C();\n+};\n+template <class T> struct M : T {\n+  template <typename U, typename V> M(U, V);\n+  H h;\n+  virtual void foo() { T::bar(&h); }\n+};\n+template <int, typename> class A;\n+template <class> struct B {\n+  typedef int BT;\n+  struct BC {};\n+  template <class T> struct BD {\n+    G g;\n+    BD(BT, T n) : g(n.l - 0) {}\n+  };\n+  B(BT, BC);\n+};\n+template <typename> struct O;\n+template <int T, typename U>\n+struct O<B<A<T, U> > > : public B<A<T, U> >::BC {};\n+struct L : B<A<2, double> > {\n+  struct P : C {\n+    void bar(H *x) {\n+      BT a;\n+      BD<H>(a, *x);\n+    }\n+  };\n+  template <typename U, typename V> L(U x, V n) : B(x, n) {}\n+  int ll;\n+  virtual int baz() { M<P>(this, ll); }\n+};\n+template <typename> class Q {\n+  O<B<A<2, double> > > q;\n+  virtual L baz() { L(0, q); }\n+};\n+template <template <class> class T> struct R {\n+  R() { T<int>(); }\n+};\n+struct S {\n+  template <class> class J : R<Q> {};\n+};\n+void foo() { K<S> c; }\n+\n+int main() {\n+  return 0;\n+}"}]}