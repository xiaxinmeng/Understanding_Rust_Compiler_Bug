{"sha": "131efcd8e006ff180e498a50ad47261716539346", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxZWZjZDhlMDA2ZmYxODBlNDk4YTUwYWQ0NzI2MTcxNjUzOTM0Ng==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-02-18T18:27:13Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-02-18T18:27:13Z"}, "message": "* pa.md: Correct and enhance comment.\n\nFrom-SVN: r63049", "tree": {"sha": "33dcd708f30197623100dd92b09d555a76fd6079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33dcd708f30197623100dd92b09d555a76fd6079"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/131efcd8e006ff180e498a50ad47261716539346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131efcd8e006ff180e498a50ad47261716539346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/131efcd8e006ff180e498a50ad47261716539346", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131efcd8e006ff180e498a50ad47261716539346/comments", "author": null, "committer": null, "parents": [{"sha": "dce53c70a455e6067fbe6e1b22c3afd9b2676d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce53c70a455e6067fbe6e1b22c3afd9b2676d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce53c70a455e6067fbe6e1b22c3afd9b2676d19"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "39529c2f7191546a51409a588e5cd838da0e4284", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131efcd8e006ff180e498a50ad47261716539346/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131efcd8e006ff180e498a50ad47261716539346/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=131efcd8e006ff180e498a50ad47261716539346", "patch": "@@ -1,3 +1,7 @@\n+2003-02-18  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.md: Correct and enhance comment.\n+\n 2003-02-18  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.c (validate_switches): Don't scan past closing '}'."}, {"sha": "d4f646152ea070b356e89a38becf0bc62dcb5e54", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131efcd8e006ff180e498a50ad47261716539346/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131efcd8e006ff180e498a50ad47261716539346/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=131efcd8e006ff180e498a50ad47261716539346", "patch": "@@ -6021,7 +6021,11 @@\n \t      (symbol_ref \"attr_length_save_restore_dltp (insn)\")))])\n \n ;; Split out the PIC register save and restore after reload.  This is\n-;; done if the function doesn't return.\n+;; done only if the function returns.  As the split is done after reload,\n+;; there are some situations in which we unnecessarily save and restore\n+;; %r4.  This happens when there is a single call and the PIC register\n+;; is \"dead\" after the call.  This isn't easy to fix as the usage of\n+;; the PIC register isn't completely determined until the reload pass.\n (define_split\n   [(parallel [(call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n@@ -6102,7 +6106,11 @@\n \t      (symbol_ref \"attr_length_save_restore_dltp (insn)\")))])\n \n ;; Split out the PIC register save and restore after reload.  This is\n-;; done if the function doesn't return.\n+;; done only if the function returns.  As the split is done after reload,\n+;; there are some situations in which we unnecessarily save and restore\n+;; %r4.  This happens when there is a single call and the PIC register\n+;; is \"dead\" after the call.  This isn't easy to fix as the usage of\n+;; the PIC register isn't completely determined until the reload pass.\n (define_split\n   [(parallel [(call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n@@ -6200,7 +6208,11 @@\n \t      (symbol_ref \"attr_length_save_restore_dltp (insn)\")))])\n \n ;; Split out the PIC register save and restore after reload.  This is\n-;; done if the function doesn't return.\n+;; done only if the function returns.  As the split is done after reload,\n+;; there are some situations in which we unnecessarily save and restore\n+;; %r4.  This happens when there is a single call and the PIC register\n+;; is \"dead\" after the call.  This isn't easy to fix as the usage of\n+;; the PIC register isn't completely determined until the reload pass.\n (define_split\n   [(parallel [(call (mem:SI (reg:SI 22))\n \t\t    (match_operand 0 \"\" \"\"))\n@@ -6278,7 +6290,11 @@\n \t      (symbol_ref \"attr_length_save_restore_dltp (insn)\")))])\n \n ;; Split out the PIC register save and restore after reload.  This is\n-;; done if the function doesn't return.\n+;; done only if the function returns.  As the split is done after reload,\n+;; there are some situations in which we unnecessarily save and restore\n+;; %r4.  This happens when there is a single call and the PIC register\n+;; is \"dead\" after the call.  This isn't easy to fix as the usage of\n+;; the PIC register isn't completely determined until the reload pass.\n (define_split\n   [(parallel [(call (mem:SI (match_operand 0 \"register_operand\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n@@ -6460,7 +6476,11 @@\n \t      (symbol_ref \"attr_length_save_restore_dltp (insn)\")))])\n \n ;; Split out the PIC register save and restore after reload.  This is\n-;; done if the function doesn't return.\n+;; done only if the function returns.  As the split is done after reload,\n+;; there are some situations in which we unnecessarily save and restore\n+;; %r4.  This happens when there is a single call and the PIC register\n+;; is \"dead\" after the call.  This isn't easy to fix as the usage of\n+;; the PIC register isn't completely determined until the reload pass.\n (define_split\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t      (call (mem:SI (match_operand 1 \"call_operand_address\" \"\"))\n@@ -6547,7 +6567,11 @@\n \t      (symbol_ref \"attr_length_save_restore_dltp (insn)\")))])\n \n ;; Split out the PIC register save and restore after reload.  This is\n-;; done if the function doesn't return.\n+;; done only if the function returns.  As the split is done after reload,\n+;; there are some situations in which we unnecessarily save and restore\n+;; %r4.  This happens when there is a single call and the PIC register\n+;; is \"dead\" after the call.  This isn't easy to fix as the usage of\n+;; the PIC register isn't completely determined until the reload pass.\n (define_split\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t      (call (mem:SI (match_operand 1 \"call_operand_address\" \"\"))\n@@ -6652,7 +6676,11 @@\n \t      (symbol_ref \"attr_length_save_restore_dltp (insn)\")))])\n \n ;; Split out the PIC register save and restore after reload.  This is\n-;; done if the function doesn't return.\n+;; done only if the function returns.  As the split is done after reload,\n+;; there are some situations in which we unnecessarily save and restore\n+;; %r4.  This happens when there is a single call and the PIC register\n+;; is \"dead\" after the call.  This isn't easy to fix as the usage of\n+;; the PIC register isn't completely determined until the reload pass.\n (define_split\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (mem:SI (reg:SI 22))\n@@ -6736,7 +6764,11 @@\n \t      (symbol_ref \"attr_length_save_restore_dltp (insn)\")))])\n \n ;; Split out the PIC register save and restore after reload.  This is\n-;; done if the function doesn't return.\n+;; done only if the function returns.  As the split is done after reload,\n+;; there are some situations in which we unnecessarily save and restore\n+;; %r4.  This happens when there is a single call and the PIC register\n+;; is \"dead\" after the call.  This isn't easy to fix as the usage of\n+;; the PIC register isn't completely determined until the reload pass.\n (define_split\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (mem:SI (match_operand:DI 1 \"register_operand\" \"\"))"}]}