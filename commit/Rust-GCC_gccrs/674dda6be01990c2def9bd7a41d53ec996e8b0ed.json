{"sha": "674dda6be01990c2def9bd7a41d53ec996e8b0ed", "node_id": "C_kwDOANBUbNoAKDY3NGRkYTZiZTAxOTkwYzJkZWY5YmQ3YTQxZDUzZWM5OTZlOGIwZWQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-21T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-21T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "6dd1a9e13dbf7a0eb687c8fafd745a363326fa2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dd1a9e13dbf7a0eb687c8fafd745a363326fa2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/674dda6be01990c2def9bd7a41d53ec996e8b0ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674dda6be01990c2def9bd7a41d53ec996e8b0ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/674dda6be01990c2def9bd7a41d53ec996e8b0ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674dda6be01990c2def9bd7a41d53ec996e8b0ed/comments", "author": null, "committer": null, "parents": [{"sha": "1c690164668bda556f308632eab4204f63a138d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c690164668bda556f308632eab4204f63a138d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c690164668bda556f308632eab4204f63a138d7"}], "stats": {"total": 754, "additions": 753, "deletions": 1}, "files": [{"sha": "d36e6f1bbcf7a1596b940f3341f746794dde9876", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dda6be01990c2def9bd7a41d53ec996e8b0ed/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dda6be01990c2def9bd7a41d53ec996e8b0ed/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=674dda6be01990c2def9bd7a41d53ec996e8b0ed", "patch": "@@ -1,3 +1,7 @@\n+2021-10-20  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc-changelog/git_commit.py (ignored_prefixes): Add libffi/.\n+\n 2021-10-18  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Update location of"}, {"sha": "115f32e5061449873b297e5fd2d6b8618aa71624", "filename": "gcc/ChangeLog", "status": "modified", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=674dda6be01990c2def9bd7a41d53ec996e8b0ed", "patch": "@@ -1,3 +1,201 @@\n+2021-10-20  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* calls.c (initialize_argument_information): Remove some dead\n+\tcode, remove handling for function_arg returning const_int.\n+\t* doc/tm.texi: Delete documentation for unused target hooks.\n+\t* doc/tm.texi.in: Likewise.\n+\t* target.def (load_bounds_for_arg): Delete.\n+\t(store_bounds_for_arg): Delete.\n+\t(load_returned_bounds): Delete.\n+\t(store_returned_bounds): Delete.\n+\t* targhooks.c (default_load_bounds_for_arg): Delete.\n+\t(default_store_bounds_for_arg): Delete.\n+\t(default_load_returned_bounds): Delete.\n+\t(default_store_returned_bounds): Delete.\n+\t* targhooks.h (default_load_bounds_for_arg): Delete.\n+\t(default_store_bounds_for_arg): Delete.\n+\t(default_load_returned_bounds): Delete.\n+\t(default_store_returned_bounds): Delete.\n+\n+2021-10-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/extend.texi (Basic Asm): Clarify that asm is not an\n+\textension in C++.\n+\t* doc/invoke.texi (-fno-asm): Fix description for C++.\n+\n+2021-10-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/install.texi: Remove link to old.html\n+\n+2021-10-20  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_cmtst_same_<mode>): New.\n+\n+2021-10-20  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_narrow_trunc<mode>): New.\n+\n+2021-10-20  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_ashr<mode>): Add case cmp\n+\tcase.\n+\t* config/aarch64/constraints.md (D1): New.\n+\n+2021-10-20  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(*aarch64_<srn_op>topbits_shuffle<mode>_le): New.\n+\t(*aarch64_topbits_shuffle<mode>_le): New.\n+\t(*aarch64_<srn_op>topbits_shuffle<mode>_be): New.\n+\t(*aarch64_topbits_shuffle<mode>_be): New.\n+\t* config/aarch64/predicates.md\n+\t(aarch64_simd_shift_imm_vec_exact_top): New.\n+\n+2021-10-20  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_<srn_op>shrn<mode>_vect,\n+\t*aarch64_<srn_op>shrn<mode>2_vect_le,\n+\t*aarch64_<srn_op>shrn<mode>2_vect_be): New.\n+\t* config/aarch64/iterators.md (srn_op): New.\n+\n+2021-10-20  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* omp-low.c (omp_copy_decl_2): For !ctx, use record_vars to add new copy\n+\tas local variable.\n+\t(scan_sharing_clauses): Place copy of OMP_CLAUSE_IN_REDUCTION decl in\n+\tctx->outer instead of ctx.\n+\n+2021-10-20  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2021-10-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/102374\n+\t* config/i386/i386-options.c (ix86_valid_target_attribute_inner_p): Strip whitespaces.\n+\t* system.h (strip_whilespaces): New function.\n+\n+2021-10-20  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2021-10-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/102375\n+\t* config/aarch64/aarch64.c (aarch64_process_one_target_attr):\n+\tStrip whitespaces.\n+\n+2021-10-20  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_case_values_threshold):\n+\tChange to 8 with -Os, 11 otherwise.\n+\n+2021-10-20  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (neoversev1_tunings):\n+\tEnable AARCH64_EXTRA_TUNE_CHEAP_SHIFT_EXTEND.\n+\t(neoversen2_tunings): Likewise.\n+\n+2021-10-20  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/100966\n+\t* config/aarch64/aarch64.md (frint_pattern): Update comment.\n+\t* config/aarch64/aarch64-simd-builtins.def: Change frintn to roundeven.\n+\t* config/aarch64/arm_fp16.h: Change frintn to roundeven.\n+\t* config/aarch64/arm_neon.h: Likewise.\n+\t* config/aarch64/iterators.md (frint_pattern): Use roundeven for FRINTN.\n+\n+2021-10-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/arm/arm.c (arm_unwind_emit_sequence): Do not declare\n+\talready declared global variable.\n+\t(arm_unwind_emit_set): Use out_file as function argument.\n+\t(arm_unwind_emit): Likewise.\n+\t* config/darwin.c (machopic_output_data_section_indirection): Likewise.\n+\t(machopic_output_stub_indirection): Likewise.\n+\t(machopic_output_indirection): Likewise.\n+\t(machopic_finish): Likewise.\n+\t* config/i386/i386.c (ix86_asm_output_function_label): Likewise.\n+\t* config/i386/winnt.c (i386_pe_seh_unwind_emit): Likewise.\n+\t* config/ia64/ia64.c (process_epilogue): Likewise.\n+\t(process_cfa_adjust_cfa): Likewise.\n+\t(process_cfa_register): Likewise.\n+\t(process_cfa_offset): Likewise.\n+\t(ia64_asm_unwind_emit): Likewise.\n+\t* config/s390/s390.c (s390_asm_output_function_label): Likewise.\n+\n+2021-10-20  Andre Simoes Dias Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_general_gimple_fold_builtin):\n+\tlower vld1 and vst1 variants of the neon builtins\n+\t* config/aarch64/aarch64-protos.h:\n+\t(aarch64_general_gimple_fold_builtin): Add gsi parameter.\n+\t* config/aarch64/aarch64.c (aarch64_general_gimple_fold_builtin):\n+\tLikwise.\n+\n+2021-10-20  Andre Simoes Dias Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* match.pd: Generate IFN_TRUNC.\n+\n+2021-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102853\n+\t* tree-data-ref.c (split_constant_offset_1): Bail out\n+\timmediately if the expression traps on overflow.\n+\n+2021-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (back_threader::~back_threader): Remove.\n+\n+2021-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadupdate.c (back_jt_path_registry::adjust_paths_after_duplication):\n+\tRemove superflous debugging message.\n+\t(back_jt_path_registry::duplicate_thread_path): Same.\n+\n+2021-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (back_threader_registry::back_threader_registry):\n+\tRemove.\n+\t(back_threader_registry::register_path): Remove m_threaded_paths.\n+\n+2021-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102814\n+\t* doc/invoke.texi: Document --param=max-fsm-thread-length.\n+\t* params.opt: Add --param=max-fsm-thread-length.\n+\t* tree-ssa-threadbackward.c\n+\t(back_threader_profitability::profitable_path_p): Fail on paths\n+\tlonger than max-fsm-thread-length.\n+\n+2021-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/102764\n+\t* cfgexpand.c (expand_gimple_basic_block): Disregard a final debug\n+\tstatement to reset the current location for the outgoing edges.\n+\n+2021-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-threadupdate.c (cancel_thread): Dump threading reason\n+\ton the same line as the threading cancellation.\n+\t(jt_path_registry::cancel_invalid_paths): Avoid rotating loops.\n+\tAvoid threading through loop headers where the path remains in the\n+\tloop.\n+\n+2021-10-20  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* tree-object-size.c (unknown): Make into a function.  Adjust\n+\tall uses.\n+\t(unknown_object_size): Simplify implementation.\n+\n+2021-10-20  Hongtao Liu  <hongtao.liu@intel.com>\n+\t    Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* doc/sourcebuild.texi (Effective-Target Keywords): Document\n+\tvect_slp_v2qi_store, vect_slp_v4qi_store, vect_slp_v8qi_store,\n+\tvect_slp_v16qi_store, vect_slp_v2hi_store,\n+\tvect_slp_v4hi_store, vect_slp_v2si_store, vect_slp_v4si_store.\n+\n 2021-10-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/extend.texi (Basic PowerPC Built-in Functions): Fix typo."}, {"sha": "9b3296bb7523ebbf0d55780391d35243e6981cc5", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=674dda6be01990c2def9bd7a41d53ec996e8b0ed", "patch": "@@ -1 +1 @@\n-20211020\n+20211021"}, {"sha": "13f349c3da1ee6443414f570c6e55c91e999983f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 249, "deletions": 0, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=674dda6be01990c2def9bd7a41d53ec996e8b0ed", "patch": "@@ -1,3 +1,252 @@\n+2021-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Remove unnecessary\n+\tcall to No_Uint_To_0.\n+\n+2021-10-20  Richard Kenner  <kenner@adacore.com>\n+\n+\t* exp_unst.adb (Visit_Node, when N_Subprogram_Call): Never treat\n+\tinstrinsic subprograms as nested.\n+\n+2021-10-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-widlllu.ads: Mark in SPARK.\n+\t* libgnat/s-widllu.ads: Likewise.\n+\t* libgnat/s-widuns.ads: Likewise.\n+\t* libgnat/s-widthu.adb: Add ghost code and a\n+\tpseudo-postcondition.\n+\n+2021-10-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-nbnbin__ghost.adb (Signed_Conversions,\n+\tUnsigned_Conversions): Mark subprograms as not imported.\n+\t* libgnat/a-nbnbin__ghost.ads: Provide a dummy body.\n+\n+2021-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Type_Conversion): If the target subtype is\n+\ta static floating-point subtype and the result is a real literal,\n+\tconsider its machine-rounded value to raise Constraint_Error.\n+\t(Test_In_Range): Turn local variables into constants.\n+\n+2021-10-20  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/g-io-put__vxworks.adb: Remove (unused)\n+\t* libgnat/s-parame__ae653.ads: Likewise.\n+\t* libgnat/s-thread.ads: Likewise.\n+\t* libgnat/s-thread__ae653.adb: Likewise.\n+\n+2021-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_eval.ads (Machine_Number): New inline function.\n+\t* sem_eval.adb (Machine_Number): New function body implementing\n+\tthe machine rounding operation specified by RM 4.9(38/2).\n+\t(Check_Non_Static_Context): Call Machine_Number and set the\n+\tIs_Machine_Number flag consistently on the resulting node.\n+\t* sem_attr.adb (Eval_Attribute) <Attribute_Machine>: Likewise.\n+\t* checks.adb (Apply_Float_Conversion_Check): Call Machine_Number.\n+\t(Round_Machine): Likewise.\n+\n+2021-10-20  Johannes Kliemann  <kliemann@adacore.com>\n+\n+\t* vxworks7-cert-rtp-link.spec: Add the definition of\n+\t__wrs_rtp_base.\n+\n+2021-10-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Delta_Record_Aggregate): Reject boxes in\n+\trecord delta aggregates.\n+\n+2021-10-20  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Return_Construct_Accessibility): Modify\n+\tgeneration of accessibility checks to be more consolidated and\n+\tget triggered properly in required cases.\n+\t* sem_util.adb (Accessibility_Level): Add extra check within\n+\tcondition to handle aliased formals properly in more cases.\n+\n+2021-10-20  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch7.adb (Make_Final_Call): Detect expanded protected types\n+\tand use original protected type in order to calculate\n+\tappropriate finalization routine.\n+\n+2021-10-20  Johannes Kliemann  <kliemann@adacore.com>\n+\n+\t* libgnat/a-nbnbin__ghost.ads: Add ghost package.\n+\n+2021-10-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Variant_Depth): Refine type from Integer to\n+\tNatural.\n+\n+2021-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* atree.ads: Comment improvements. How is a \"completely new\n+\tnode\" different from a \"new node\"? Document default values\n+\tcorresponding to field types.\n+\t* exp_ch7.adb (Process_Tagged_Type_Declaration): Use\n+\thigher-level Scope_Depth instead of Scope_Depth_Value.  Remove\n+\tconfusing comment: not clear what a \"true\" library level package\n+\tis.\n+\t* uintp.adb (Image_Out): Print No_Uint in a more readable way.\n+\t* gen_il-gen.adb, gen_il-gen-gen_entities.adb,\n+\tgen_il-gen-gen_nodes.adb, gen_il-types.ads: Tighten up the\n+\tsubtypes of fields whose type is Uint, where possible; use\n+\tmore-constrained subtypes such as Unat.\n+\t* einfo-utils.adb, einfo-utils.ads, exp_attr.adb,\n+\texp_ch3.adb, exp_intr.adb, exp_unst.adb, exp_util.adb,\n+\tfreeze.adb, repinfo.adb, sem.adb, sem_ch12.adb, sem_ch13.adb,\n+\tsem_ch3.adb, sem_ch8.adb, sem_util.adb, sprint.adb, treepr.adb:\n+\tNo longer use Uint_0 to indicate \"unknown\" or \"not yet known\"\n+\tfor various fields whose type is Uint. Use No_Uint for that,\n+\texcept in a small number of legacy cases that cause test\n+\tfailures. Protect many queries of such fields with calls to\n+\tKnown_... functions. Improve comments.\n+\t* exp_aggr.adb: Likewise.\n+\t(Is_OK_Aggregate): Check whether Csiz is present.\n+\t(Aggr_Assignment_OK_For_Backend): Ensure we do not access an\n+\tuninitialized size.\n+\t* exp_strm.adb (Build_Elementary_Input_Call,\n+\tBuild_Elementary_Write_Call): Check whether P_Size is present.\n+\t* cstand.adb: Leave Component_Size of Any_Composite unknown.\n+\tSimilar for RM_Size of Standard_Exception_Type.  These should\n+\tnot be used.\n+\t* einfo.ads: Comment improvements.\n+\t* exp_disp.ads: Minor.\n+\t* gen_il-internals.ads, gen_il-internals.adb: Minor.\n+\t* sinfo-utils.adb: Take advantage of full-coverage rules.\n+\t* types.h: Minor.\n+\n+2021-10-20  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.adb: Add with and use of Warnsw.\n+\t(Check_Conformance): Report a warning when subtypes or\n+\tdesignated subtypes of formal parameters or result subtypes\n+\tdenote different declarations between the spec and body of the\n+\t(Subprogram_Subtypes_Have_Same_Declaration): New function nested\n+\twithin Check_Conformance that determines whether two subtype\n+\tentities referenced in a subprogram come from the same\n+\tdeclaration. Returns True immediately if the subprogram is in a\n+\tgeneric instantiation, or the subprogram is marked Is_Internal\n+\tor is declared in an internal (GNAT library) unit, or GNAT_Mode\n+\tis enabled, otherwise compares the nonlimited views of the\n+\tentities (or their designated subtypes' nonlimited views in the\n+\tanonymous access cases).\n+\t(Nonlimited_View_Of_Subtype): New function nested within\n+\tfunction Subprogram_Subtypes_Have_Same_Declaration that returns\n+\tNon_Limited_View of a type or subtype that is an incomplete or\n+\tclass-wide type that comes from a limited of a\n+\tpackage (From_Limited_With is True for the entity), or returns\n+\tFull_View when the nonlimited view is an incomplete type.\n+\tOtherwise returns the entity passed in.\n+\t* warnsw.ads (Warn_On_Pedantic_Checks): New warning flag.\n+\t(type Warning_Record): New component Warn_On_Pedantic_Checks.\n+\t* warnsw.adb (All_Warnings): Set Warn_On_Pedantic_Checks from\n+\tparameter Setting.\n+\t(Restore_Warnings): Restore the value of the\n+\tWarn_On_Pedantic_Checks flag.\n+\t(Save_Warnings): Save the value of the Warn_On_Pedantic_Checks\n+\tflag.\n+\t(Set_Underscore_Warning_Switch): Add settings of the\n+\tWarn_On_Pedantic flag according to the switch (\"-gnatw_p\" vs.\n+\t\"-gnatw_P\").\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst: Add\n+\tdocumentation of new switches -gnatw_p and -gnatw_P (warnings\n+\tfor pedantic checks).\n+\t* gnat_ugn.texi: Regenerate.\n+\t* usage.adb: Add Warn_On_Pedantic_Checks.\n+\n+2021-10-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Guard\n+\tagainst equality of an uninitialized RM_Size field.\n+\n+2021-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Subprogram_Instantiation): Also propagate an\n+\tinterface name on an intrinsic subprogram.  Remove obsolete comment.\n+\t* libgnat/s-atopri.ads (Atomic_Load): New generic intrinsic function\n+\t(Atomic_Load_8): Rewrite into instantiation.\n+\t(Atomic_Load_16): Likewise.\n+\t(Atomic_Load_32): Likewise.\n+\t(Atomic_Load_64): Likewise.\n+\t(Sync_Compare_And_Swap): New generic intrinsic function.\n+\t(Sync_Compare_And_Swap_8): Rewrite into instantiation.\n+\t(Sync_Compare_And_Swap_16): Likewise.\n+\t(Sync_Compare_And_Swap_32): Likewise.\n+\t(Sync_Compare_And_Swap_64): Likewise.\n+\t(Lock_Free_Read): New generic inline function.\n+\t(Lock_Free_Read_8): Rewrite into instantiation.\n+\t(Lock_Free_Read_16): Likewise.\n+\t(Lock_Free_Read_32): Likewise.\n+\t(Lock_Free_Read_64): Likewise.\n+\t(Lock_Free_Try_Write): New generic inline function.\n+\t(Lock_Free_Try_Write_8): Rewrite into instantiation.\n+\t(Lock_Free_Try_Write_16): Likewise.\n+\t(Lock_Free_Try_Write_32): Likewise.\n+\t(Lock_Free_Try_Write_64): Likewise.\n+\t* libgnat/s-atopri.adb (Lock_Free_Read): New function body.\n+\t(Lock_Free_Read_8): Delete.\n+\t(Lock_Free_Read_16): Likewise.\n+\t(Lock_Free_Read_32): Likewise.\n+\t(Lock_Free_Read_64): Likewise.\n+\t(Lock_Free_Try_Write): New function body.\n+\t(Lock_Free_Try_Write_8): Delete.\n+\t(Lock_Free_Try_Write_16): Likewise.\n+\t(Lock_Free_Try_Write_32): Likewise.\n+\t(Lock_Free_Try_Write_64): Likewise.\n+\t* libgnat/s-aoinar.adb (Atomic_Fetch_And_Add): Use type-generic GCC\n+\tatomic builtin and tidy up implementation.\n+\t(Atomic_Fetch_And_Subtract): Likewise.\n+\t* libgnat/s-aomoar.adb (Atomic_Fetch_And_Add): Likewise.\n+\t(Atomic_Fetch_And_Subtract): Likewise.\n+\t* libgnat/s-atopex.adb (Atomic_Exchange): Likewise.\n+\t(Atomic_Compare_And_Exchange): Likewise.\n+\n+2021-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Subprogram_Type>:\n+\tReplace test on Convention_Intrinsic with Is_Intrinsic_Subprogram.\n+\t(gnat_to_gnu_param): Likewise.\n+\t(gnat_to_gnu_subprog_type): Likewise.\n+\t* gcc-interface/trans.c (elaborate_all_entities_for_package): Ditto.\n+\n+2021-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_eval.ads (Check_Non_Static_Context): Update documentation.\n+\t* sem_eval.adb (In_Any_Integer_Context): Change parameter type,\n+\tadjust accordingly and remove unreachable case.\n+\t(Eval_Integer_Literal): Consider the node kind throughout and\n+\ttrim down verbose condition.\n+\n+2021-10-20  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl: Remove references to system-vxworks-ppc.ads\n+\tand system-vxworks-x86.ads.\n+\t* libgnat/system-vxworks-ppc.ads: Remove.\n+\t* libgnat/system-vxworks-ppc-ravenscar.ads: Likewise.\n+\t* libgnat/system-vxworks-x86.ads: Likewise.\n+\n+2021-10-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_QUantified_Expression): Issue warning on\n+\tconjunct/disjunct sub-expression of the full expression inside a\n+\tquantified expression, when it does not reference the quantified\n+\tvariable.\n+\n+2021-10-20  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* checks.adb (Insert_Valid_Check): in case of checked type\n+\tconversion, update Typ to match Exp's type and add call to\n+\tAnalyze_And_Resolve.\n+\n+2021-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\tPR ada/100486\n+\t* sem_prag.adb (Check_Valid_Library_Unit_Pragma): Do not raise an\n+\texception as part of the bootstrap.\n+\n 2021-10-15  Richard Biener  <rguenther@suse.de>\n \n \t* gcc-interface/misc.c (gnat_post_options): Do not warn"}, {"sha": "08ba25e194debb78414ba530a15d0b089f244f5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=674dda6be01990c2def9bd7a41d53ec996e8b0ed", "patch": "@@ -1,3 +1,21 @@\n+2021-10-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.c (cp_parser_parse_and_diagnose_invalid_type_name):\n+\tPass true for declarator_p.\n+\t(cp_parser_nested_name_specifier_opt): Only look through\n+\tTYPENAME_TYPE if check_dependency_p is false.\n+\n+2021-10-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102642\n+\t* name-lookup.c (push_local_extern_decl_alias): Don't call\n+\tset_decl_tls_model on error_mark_node.\n+\t* decl.c (make_rtl_for_nonlocal_decl): Don't call\n+\tset_user_assembler_name on error_mark_node.\n+\t* parser.c (cp_parser_oacc_declare): Ignore DECL_LOCAL_DECL_ALIAS\n+\tif it is error_mark_node.\n+\t(cp_parser_omp_declare_target): Likewise.\n+\n 2021-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/102786"}, {"sha": "f75b880dabd5aafeb69828a7d7448692ec1ae179", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=674dda6be01990c2def9bd7a41d53ec996e8b0ed", "patch": "@@ -1,3 +1,13 @@\n+2021-10-20  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* openmp.c (gfc_match_omp_clause_reduction): Add 'openmp_target' default\n+\tfalse parameter. Add 'always,tofrom' map for OMP_LIST_IN_REDUCTION case.\n+\t(gfc_match_omp_clauses): Add 'openmp_target' default false parameter,\n+\tadjust call to gfc_match_omp_clause_reduction.\n+\t(match_omp): Adjust call to gfc_match_omp_clauses\n+\t* trans-openmp.c (gfc_trans_omp_taskgroup): Add call to\n+\tgfc_match_omp_clause, create and return block.\n+\n 2021-10-19  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* trans-types.c (create_fn_spec): For allocatable/pointer"}, {"sha": "602b727f1a5c4a459857e76b0c63309b512e9c8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dda6be01990c2def9bd7a41d53ec996e8b0ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=674dda6be01990c2def9bd7a41d53ec996e8b0ed", "patch": "@@ -1,3 +1,163 @@\n+2021-10-20  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/mvn-cmeq0-1.c: New test.\n+\n+2021-10-20  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_high_combine.c: Update case.\n+\t* gcc.target/aarch64/xtn-combine-1.c: New test.\n+\t* gcc.target/aarch64/xtn-combine-2.c: New test.\n+\t* gcc.target/aarch64/xtn-combine-3.c: New test.\n+\t* gcc.target/aarch64/xtn-combine-4.c: New test.\n+\t* gcc.target/aarch64/xtn-combine-5.c: New test.\n+\t* gcc.target/aarch64/xtn-combine-6.c: New test.\n+\n+2021-10-20  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/shl-combine-2.c: New test.\n+\t* gcc.target/aarch64/shl-combine-3.c: New test.\n+\t* gcc.target/aarch64/shl-combine-4.c: New test.\n+\t* gcc.target/aarch64/shl-combine-5.c: New test.\n+\n+2021-10-20  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/shrn-combine-10.c: New test.\n+\t* gcc.target/aarch64/shrn-combine-5.c: New test.\n+\t* gcc.target/aarch64/shrn-combine-6.c: New test.\n+\t* gcc.target/aarch64/shrn-combine-7.c: New test.\n+\t* gcc.target/aarch64/shrn-combine-8.c: New test.\n+\t* gcc.target/aarch64/shrn-combine-9.c: New test.\n+\n+2021-10-20  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/shrn-combine-1.c: New test.\n+\t* gcc.target/aarch64/shrn-combine-2.c: New test.\n+\t* gcc.target/aarch64/shrn-combine-3.c: New test.\n+\t* gcc.target/aarch64/shrn-combine-4.c: New test.\n+\n+2021-10-20  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/reduction4.f90: Adjust omp target in_reduction' scan\n+\tpattern.\n+\n+2021-10-20  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2021-10-20  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/102374\n+\t* gcc.target/i386/pr102374.c: New test.\n+\n+2021-10-20  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2021-10-20  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/102375\n+\t* gcc.target/aarch64/pr102375.c: New test.\n+\n+2021-10-20  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/100966\n+\t* gcc.target/aarch64/frint.x: Add roundeven tests.\n+\t* gcc.target/aarch64/frint_double.c: Likewise.\n+\t* gcc.target/aarch64/frint_float.c: Likewise.\n+\n+2021-10-20  Andre Simoes Dias Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/aarch64/fmla_intrinsic_1.c: prevent over optimization.\n+\t* gcc.target/aarch64/fmls_intrinsic_1.c: Likewise.\n+\t* gcc.target/aarch64/fmul_intrinsic_1.c: Likewise.\n+\t* gcc.target/aarch64/mla_intrinsic_1.c: Likewise.\n+\t* gcc.target/aarch64/mls_intrinsic_1.c: Likewise.\n+\t* gcc.target/aarch64/mul_intrinsic_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vmul_elem_1.c: Likewise.\n+\t* gcc.target/aarch64/vclz.c: Likewise.\n+\t* gcc.target/aarch64/vneg_s.c: Likewise.\n+\n+2021-10-20  Andre Simoes Dias Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/aarch64/merge_trunc1.c: New test.\n+\n+2021-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/pr102764.c: New test.\n+\n+2021-10-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/102815\n+\t* gfortran.dg/bind-c-contiguous-5.c (do_call, reset_var): Handle\n+\tbig andian.\n+\n+2021-10-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102642\n+\t* g++.dg/tls/pr102642.C: New test.\n+\n+2021-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/Warray-bounds-87.c: Remove xfail.\n+\t* gcc.dg/analyzer/pr94851-2.c: Remove xfail.\n+\t* gcc.dg/graphite/pr69728.c: Remove xfail.\n+\t* gcc.dg/graphite/scop-dsyr2k.c: Remove xfail.\n+\t* gcc.dg/graphite/scop-dsyrk.c: Remove xfail.\n+\t* gcc.dg/shrink-wrap-loop.c: Remove xfail.\n+\t* gcc.dg/loop-8.c: Adjust for new threading restrictions.\n+\t* gcc.dg/tree-ssa/ifc-20040816-1.c: Same.\n+\t* gcc.dg/tree-ssa/pr21559.c: Same.\n+\t* gcc.dg/tree-ssa/pr59597.c: Same.\n+\t* gcc.dg/tree-ssa/pr71437.c: Same.\n+\t* gcc.dg/tree-ssa/pr77445-2.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Same.\n+\t* gcc.dg/vect/bb-slp-16.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Remove.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-18.c: Remove.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2a.c: Remove.\n+\t* gcc.dg/tree-ssa/ssa-thread-invalid.c: New test.\n+\n+2021-10-20  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* gcc.dg/plugin/gil-1.c: Add dg-require-effective-target marker.\n+\n+2021-10-20  Hongtao Liu  <hongtao.liu@intel.com>\n+\t    Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR middle-end/102722\n+\tPR middle-end/102697\n+\tPR middle-end/102462\n+\tPR middle-end/102706\n+\tPR middle-end/102744\n+\t* c-c++-common/Wstringop-overflow-2.c: Adjust testcase with new\n+\txfail/target selector.\n+\t* gcc.dg/Warray-bounds-51.c: Ditto.\n+\t* gcc.dg/Warray-parameter-3.c: Ditto.\n+\t* gcc.dg/Wstringop-overflow-14.c: Ditto.\n+\t* gcc.dg/Wstringop-overflow-21.c: Ditto.\n+\t* gcc.dg/Wstringop-overflow-68.c: Ditto.\n+\t* gcc.dg/Wstringop-overflow-76.c: Ditto.\n+\t* gcc.dg/Warray-bounds-48.c: Ditto.\n+\t* gcc.dg/Wzero-length-array-bounds-2.c: Ditto.\n+\t* lib/target-supports.exp (check_vect_slp_aligned_store_usage):\n+\tNew function.\n+\t(check_effective_target_vect_slp_v2qi_store): Ditto.\n+\t(check_effective_target_vect_slp_v4qi_store): Ditto.\n+\t(check_effective_target_vect_slp_v8qi_store): Ditto.\n+\t(check_effective_target_vect_slp_v16qi_store): Ditto.\n+\t(check_effective_target_vect_slp_v2hi_store): Ditto.\n+\t(check_effective_target_vect_slp_v4hi_store): Ditto.\n+\t(check_effective_target_vect_slp_v2si_store): Ditto.\n+\t(check_effective_target_vect_slp_v4si_store): Ditto.\n+\t* c-c++-common/Wstringop-overflow-2-novec.c: New test.\n+\t* gcc.dg/Warray-bounds-51-novec.c: New test.\n+\t* gcc.dg/Warray-bounds-48-novec.c: New test.\n+\t* gcc.dg/Warray-parameter-3-novec.c: New test.\n+\t* gcc.dg/Wstringop-overflow-14-novec.c: New test.\n+\t* gcc.dg/Wstringop-overflow-21-novec.c: New test.\n+\t* gcc.dg/Wstringop-overflow-76-novec.c: New test.\n+\t* gcc.dg/Wzero-length-array-bounds-2-novec.c: New test.\n+\n 2021-10-19  Paul A. Clarke  <pc@us.ibm.com>\n \n \t* gcc.target/powerpc/sse4_2-pcmpgtq.c: Tighten dg constraints"}, {"sha": "e8fe0e0cba3085e10fb911d2702d50a86e0a5dd1", "filename": "libffi/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dda6be01990c2def9bd7a41d53ec996e8b0ed/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dda6be01990c2def9bd7a41d53ec996e8b0ed/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=674dda6be01990c2def9bd7a41d53ec996e8b0ed", "patch": "@@ -1,3 +1,88 @@\n+2021-10-20  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* LOCAL_PATCHES: New file.\n+\n+2021-10-20  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* testsuite/lib/libffi.exp (load_gcc_lib): Load library from GCC\n+\ttestsuite.\n+\tLoad target-supports.exp and target-supports-dg.exp.\n+\t(libffi-init): Use libraries in GCC build tree.\n+\t(libffi_target_compile): Link with -shared-libgcc -lstdc++ for\n+\tC++ sources.\n+\n+2021-10-20  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* Makefile.am (AUTOMAKE_OPTIONS): Add info-in-builddir.\n+\t(ACLOCAL_AMFLAGS): Set to -I .. -I ../config.\n+\t(SUBDIRS): Don't add doc.\n+\t(TEXINFO_TEX): New.\n+\t(MAKEINFOFLAGS): Likewise.\n+\t(info_TEXINFOS): Likewise.\n+\t(STAMP_GENINSRC): Likewise.\n+\t(STAMP_BUILD_INFO): Likewise.\n+\t(all-local): Likewise.\n+\t(stamp-geninsrc): Likewise.\n+\t(doc/libffi.info): Likewise.\n+\t(stamp-build-info:): Likewise.\n+\t(CLEANFILES): Likewise.\n+\t(MAINTAINERCLEANFILES): Likewise.\n+\t(AM_MAKEFLAGS): Likewise.\n+\t(all-recursive): Likewise.\n+\t(install-recursive): Likewise.\n+\t(mostlyclean-recursive): Likewise.\n+\t(clean-recursive): Likewise.\n+\t(distclean-recursive): Likewise.\n+\t(maintainer-clean-recursive): Likewise.\n+\t(LTLDFLAGS): Replace libtool-ldflags with ../libtool-ldflags.\n+\t(AM_CFLAGS): Add -g -fexceptions.\n+\t(libffi.map-sun): Replace make_sunver.pl with\n+\t../contrib/make_sunver.pl.\n+\t(dist-hook): Removed.\n+\tInclude $(top_srcdir)/../multilib.am.\n+\t* configure.ac: Add AM_ENABLE_MULTILIB.\n+\tRemove the frv*-elf check.\n+\t(AX_ENABLE_BUILDDIR): Removed.\n+\t(AM_INIT_AUTOMAKE): Add [no-dist].\n+\tAdd --enable-generated-files-in-srcdir.\n+\t(C_CONFIG_MACRO_DIR): Removed.\n+\t(AX_COMPILER_VENDOR): Likewise.\n+\t(AX_CC_MAXOPT): Likewise.\n+\t(AX_CFLAGS_WARN_ALL): Likewise.\n+\tRemove the GCC check.\n+\t(SYMBOL_UNDERSCORE): Removed.\n+\t(AX_CHECK_COMPILE_FLAG): Likewise.\n+\tRemove --disable-docs.\n+\t(ACX_CHECK_PROG_VER): Check makeinfo.\n+\t(BUILD_DOCS): Updated.\n+\t(exec-static-tramp): Don't enable use of static exec trampolines\n+\tby default.\n+\tRemove --disable-multi-os-directory.\n+\t(GCC_WITH_TOOLEXECLIBDIR): New.\n+\tSupport cross host.\n+\tSupport --enable-multilib.\n+\t* include/Makefile.am (nodist_include_HEADERS): Removed.\n+\t(gcc_version): New.\n+\t(toollibffidir): Likewise.\n+\t(toollibffi_HEADERS): Likewise.\n+\t* Makefile.in: Regenerate.\n+\t(GCC_BASE_VER): New.\n+\t(AC_CONFIG_FILES): Remove doc/Makefile.\n+\t(AC_CONFIG_LINKS): New.\n+\t* aclocal.m4: Likewise.\n+\t* configure: Likewise.\n+\t* fficonfig.h.in: Likewise.\n+\t* mdate-sh: Likewise.\n+\t* include/Makefile.in: Likewise.\n+\t* man/Makefile.in: Likewise.\n+\t* testsuite/Makefile.in: Likewise.\n+\n+2021-10-20  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* HOWTO_MERGE: New file.\n+\t* autogen.sh: Likewise.\n+\t* merge.sh: Likewise.\n+\n 2021-08-30  YunQiang Su  <yunqiang.su@cipunited.com>\n \n \tPR libffi/83636"}, {"sha": "50d14b32a3ce001f221636d93f2491828d95440c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dda6be01990c2def9bd7a41d53ec996e8b0ed/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dda6be01990c2def9bd7a41d53ec996e8b0ed/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=674dda6be01990c2def9bd7a41d53ec996e8b0ed", "patch": "@@ -1,3 +1,26 @@\n+2021-10-20  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/target-in-reduction-1.f90: New test.\n+\t* testsuite/libgomp.fortran/target-in-reduction-2.f90: New test.\n+\n+2021-10-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/102838\n+\t* libgomp.h (struct gomp_work_share_1st_cacheline): New type.\n+\t(struct gomp_work_share): Only use aligned(64) attribute if\n+\tGOMP_HAVE_EFFICIENT_ALIGNED_ALLOC is defined, otherwise just\n+\tadd padding before lock to ensure lock is at offset 64 bytes\n+\tinto the structure.\n+\t(gomp_workshare_struct_check1, gomp_workshare_struct_check2):\n+\tNew poor man's static assertions.\n+\t* work.c (gomp_work_share_start): Use gomp_aligned_alloc instead of\n+\tgomp_malloc if GOMP_HAVE_EFFICIENT_ALIGNED_ALLOC.\n+\n+2021-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* testsuite/libgomp.graphite/force-parallel-5.c: Remove xfail.\n+\n 2021-10-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/linux/affinity.c (gomp_affinity_init_numa_domains): Add"}, {"sha": "3aa8a53366a66e6d33bf4503fe884e835a7c1285", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dda6be01990c2def9bd7a41d53ec996e8b0ed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dda6be01990c2def9bd7a41d53ec996e8b0ed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=674dda6be01990c2def9bd7a41d53ec996e8b0ed", "patch": "@@ -1,3 +1,8 @@\n+2021-10-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/optional/monadic/transform.cc: Check that\n+\tan rvalue result is not materialized too soon.\n+\n 2021-10-19  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/ranges (iota_view::_Iterator::operator+): Adjust"}]}