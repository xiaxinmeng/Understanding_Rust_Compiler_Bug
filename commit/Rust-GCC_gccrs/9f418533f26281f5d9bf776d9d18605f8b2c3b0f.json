{"sha": "9f418533f26281f5d9bf776d9d18605f8b2c3b0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY0MTg1MzNmMjYyODFmNWQ5YmY3NzZkOWQxODYwNWY4YjJjM2IwZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-06-10T20:22:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-06-10T20:22:49Z"}, "message": "Makefile.in (READ_MD_H): Add $(HASHTAB_H).\n\ngcc/\n\t* Makefile.in (READ_MD_H): Add $(HASHTAB_H).\n\t(build/genconstants.o): Depend on $(READ_MD_H) gensupport.h.\n\t* genconstants.c: Include read-md.h.\n\t* read-rtl.c (md_constants): Move to read-md.c.\n\t(md_name): Move to read-md.h.\n\t(initialize_iterators): Use leading_string_hash instead of def_hash\n\tand leading_string_eq_p instead of def_name_eq_p.\n\t(read_name): Move to read-md.c.\n\t(def_hash, def_name_eq_p): Delete.\n\t(read_constants, traverse_md_constants): Move to read-md.c.\n\t* rtl.h (md_constant, traverse_md_constants): Move to read-md.h.\n\t* read-md.h: Include hashtab.h.\n\t(md_name): Moved from read-rtl.c.\n\t(md_constant): Moved from read-md.h.\n\t(leading_string_hash, leading_string_eq_p, read_name)\n\t(read_constants, traverse_md_constants): Declare.\n\t* read-md.c (md_constants): Moved from read-rtl.c.\n\t(leading_string_hash, leading_string_eq_p): New functions.\n\t(read_name, read_constants, traverse_md_constants): Moved from\n\tread-rtl.c.\n\nFrom-SVN: r160575", "tree": {"sha": "00b489603eacb8270197065f28c9cf9c2c4bd2d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00b489603eacb8270197065f28c9cf9c2c4bd2d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f418533f26281f5d9bf776d9d18605f8b2c3b0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f418533f26281f5d9bf776d9d18605f8b2c3b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f418533f26281f5d9bf776d9d18605f8b2c3b0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82f8e3fd2eef8bcfa1add07c7b9ee8b3c3192a89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f8e3fd2eef8bcfa1add07c7b9ee8b3c3192a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f8e3fd2eef8bcfa1add07c7b9ee8b3c3192a89"}], "stats": {"total": 380, "additions": 207, "deletions": 173}, "files": [{"sha": "c40d0a168b0a0b7e4f9319d51895b5b3c3f2ee8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f418533f26281f5d9bf776d9d18605f8b2c3b0f", "patch": "@@ -1,3 +1,26 @@\n+2010-06-10  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* Makefile.in (READ_MD_H): Add $(HASHTAB_H).\n+\t(build/genconstants.o): Depend on $(READ_MD_H) gensupport.h.\n+\t* genconstants.c: Include read-md.h.\n+\t* read-rtl.c (md_constants): Move to read-md.c.\n+\t(md_name): Move to read-md.h.\n+\t(initialize_iterators): Use leading_string_hash instead of def_hash\n+\tand leading_string_eq_p instead of def_name_eq_p.\n+\t(read_name): Move to read-md.c.\n+\t(def_hash, def_name_eq_p): Delete.\n+\t(read_constants, traverse_md_constants): Move to read-md.c.\n+\t* rtl.h (md_constant, traverse_md_constants): Move to read-md.h.\n+\t* read-md.h: Include hashtab.h.\n+\t(md_name): Moved from read-rtl.c.\n+\t(md_constant): Moved from read-md.h.\n+\t(leading_string_hash, leading_string_eq_p, read_name)\n+\t(read_constants, traverse_md_constants): Declare.\n+\t* read-md.c (md_constants): Moved from read-rtl.c.\n+\t(leading_string_hash, leading_string_eq_p): New functions.\n+\t(read_name, read_constants, traverse_md_constants): Moved from\n+\tread-rtl.c.\n+\n 2010-06-10  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* read-rtl.c (md_name): New structure."}, {"sha": "b8379d082b16384388bf588e43273a476b4c451e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9f418533f26281f5d9bf776d9d18605f8b2c3b0f", "patch": "@@ -871,7 +871,7 @@ RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H) reg-notes.def insn-notes.def \\\n   $(INPUT_H) $(REAL_H) statistics.h $(VEC_H) $(FIXED_VALUE_H) alias.h\n FIXED_VALUE_H = fixed-value.h $(MACHMODE_H) double-int.h\n RTL_H = $(RTL_BASE_H) genrtl.h vecir.h\n-READ_MD_H = $(OBSTACK_H) read-md.h\n+READ_MD_H = $(OBSTACK_H) $(HASHTAB_H) read-md.h\n PARAMS_H = params.h params.def\n BUILTINS_DEF = builtins.def sync-builtins.def omp-builtins.def\n TREE_H = tree.h all-tree.def tree.def c-family/c-common.def \\\n@@ -3814,7 +3814,7 @@ build/genconditions.o : genconditions.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n build/genconfig.o : genconfig.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h gensupport.h\n build/genconstants.o : genconstants.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h\n+  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h\n build/genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h\n build/genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H)\t\t\\"}, {"sha": "1a0182c7a59db4494daa03e1df755e539a7f220a", "filename": "gcc/genconstants.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2Fgenconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2Fgenconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconstants.c?ref=9f418533f26281f5d9bf776d9d18605f8b2c3b0f", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"errors.h\"\n+#include \"read-md.h\"\n #include \"gensupport.h\"\n \n /* Called via traverse_md_constants; emit a #define for"}, {"sha": "07882aa240d478673b21afc6b10adf740dd4203e", "filename": "gcc/read-md.c", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2Fread-md.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2Fread-md.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.c?ref=9f418533f26281f5d9bf776d9d18605f8b2c3b0f", "patch": "@@ -62,6 +62,29 @@ const char *read_md_filename;\n /* The current line number in READ_MD_FILE.  */\n int read_md_lineno;\n \n+/* A table of md_constant structures, hashed by name.  Null if no\n+   constant expansion should occur.  */\n+static htab_t md_constants;\n+\n+/* Given an object that starts with a char * name field, return a hash\n+   code for its name.  */\n+\n+hashval_t\n+leading_string_hash (const void *def)\n+{\n+  return htab_hash_string (*(const char *const *) def);\n+}\n+\n+/* Given two objects that start with char * name fields, return true if\n+   they have the same name.  */\n+\n+int\n+leading_string_eq_p (const void *def1, const void *def2)\n+{\n+  return strcmp (*(const char *const *) def1,\n+\t\t *(const char *const *) def2) == 0;\n+}\n+\n /* Return a hash value for the pointer pointed to by DEF.  */\n \n static hashval_t\n@@ -314,6 +337,63 @@ read_skip_spaces (void)\n     }\n }\n \n+/* Read an rtx code name into NAME.  It is terminated by any of the\n+   punctuation chars of rtx printed syntax.  */\n+\n+void\n+read_name (struct md_name *name)\n+{\n+  int c;\n+  size_t i;\n+\n+  c = read_skip_spaces ();\n+\n+  i = 0;\n+  while (1)\n+    {\n+      if (c == ' ' || c == '\\n' || c == '\\t' || c == '\\f' || c == '\\r'\n+\t  || c == EOF)\n+\tbreak;\n+      if (c == ':' || c == ')' || c == ']' || c == '\"' || c == '/'\n+\t  || c == '(' || c == '[')\n+\t{\n+\t  unread_char (c);\n+\t  break;\n+\t}\n+\n+      if (i == sizeof (name->buffer) - 1)\n+\tfatal_with_file_and_line (\"name too long\");\n+      name->buffer[i++] = c;\n+\n+      c = read_char ();\n+    }\n+\n+  if (i == 0)\n+    fatal_with_file_and_line (\"missing name or number\");\n+  if (c == '\\n')\n+    read_md_lineno++;\n+\n+  name->buffer[i] = 0;\n+  name->string = name->buffer;\n+\n+  if (md_constants)\n+    {\n+      /* Do constant expansion.  */\n+      struct md_constant *def;\n+\n+      do\n+\t{\n+\t  struct md_constant tmp_def;\n+\n+\t  tmp_def.name = name->string;\n+\t  def = (struct md_constant *) htab_find (md_constants, &tmp_def);\n+\t  if (def)\n+\t    name->string = def->value;\n+\t}\n+      while (def);\n+    }\n+}\n+\n /* Subroutine of the string readers.  Handles backslash escapes.\n    Caller has read the backslash, but not placed it into the obstack.  */\n \n@@ -522,6 +602,76 @@ scan_comma_elt (const char **pstr)\n   return start;\n }\n \n+/* Process a define_constants directive, starting with the optional space\n+   after the \"define_constants\".  */\n+\n+void\n+read_constants (void)\n+{\n+  int c;\n+  htab_t defs;\n+\n+  defs = md_constants;\n+  if (! defs)\n+    defs = htab_create (32, leading_string_hash,\n+\t\t\tleading_string_eq_p, (htab_del) 0);\n+\n+  c = read_skip_spaces ();\n+  if (c != '[')\n+    fatal_expected_char ('[', c);\n+\n+  /* Disable constant expansion during definition processing.  */\n+  md_constants = 0;\n+  while ( (c = read_skip_spaces ()) != ']')\n+    {\n+      struct md_name name, value;\n+      struct md_constant *def, tmp_def;\n+      void **entry_ptr;\n+\n+      if (c != '(')\n+\tfatal_expected_char ('(', c);\n+\n+      read_name (&name);\n+      read_name (&value);\n+\n+      tmp_def.name = name.string;\n+      entry_ptr = htab_find_slot (defs, &tmp_def, INSERT);\n+      if (*entry_ptr)\n+\t{\n+\t  def = (struct md_constant *) *entry_ptr;\n+\t  if (strcmp (def->value, value.string) != 0)\n+\t    fatal_with_file_and_line (\"redefinition of %s, was %s, now %s\",\n+\t\t\t\t      def->name, def->value, value.string);\n+\t}\n+      else\n+\t{\n+\t  def = XNEW (struct md_constant);\n+\t  def->name = xstrdup (name.string);\n+\t  def->value = xstrdup (value.string);\n+\t  *entry_ptr = def;\n+\t}\n+\n+      c = read_skip_spaces ();\n+      if (c != ')')\n+\tfatal_expected_char (')', c);\n+    }\n+  md_constants = defs;\n+  c = read_skip_spaces ();\n+  if (c != ')')\n+    fatal_expected_char (')', c);\n+}\n+\n+/* For every constant definition, call CALLBACK with two arguments:\n+   a pointer a pointer to the constant definition and INFO.\n+   Stop when CALLBACK returns zero.  */\n+\n+void\n+traverse_md_constants (htab_trav callback, void *info)\n+{\n+  if (md_constants)\n+    htab_traverse (md_constants, callback, info);\n+}\n+\n /* Initialize this file's static data.  */\n \n void"}, {"sha": "2edd3ce4c21d4e4ce7a8a3750320c134de2d643c", "filename": "gcc/read-md.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2Fread-md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2Fread-md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.h?ref=9f418533f26281f5d9bf776d9d18605f8b2c3b0f", "patch": "@@ -20,6 +20,26 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"obstack.h\"\n+#include \"hashtab.h\"\n+\n+/* Holds one symbol or number in the .md file.  */\n+struct md_name {\n+  /* The name as it appeared in the .md file.  Names are syntactically\n+     limited to the length of this buffer.  */\n+  char buffer[256];\n+\n+  /* The name that should actually be used by the generator programs.\n+     This is an expansion of NAME, after things like constant substitution.  */\n+  char *string;\n+};\n+\n+/* This structure represents a constant defined by define_constant.\n+   NAME is the name of the constant and VALUE is the string it\n+   expands to.  */\n+struct md_constant {\n+  char *name;\n+  char *value;\n+};\n \n extern FILE *read_md_file;\n extern int read_md_lineno;\n@@ -42,6 +62,8 @@ unread_char (int ch)\n   ungetc (ch, read_md_file);\n }\n \n+extern hashval_t leading_string_hash (const void *);\n+extern int leading_string_eq_p (const void *, const void *);\n extern void copy_md_ptr_loc (const void *, const void *);\n extern void print_md_ptr_loc (const void *);\n extern const char *join_c_conditions (const char *, const char *);\n@@ -52,8 +74,11 @@ extern void fatal_with_file_and_line (const char *, ...)\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n extern void fatal_expected_char (int, int) ATTRIBUTE_NORETURN;\n extern int read_skip_spaces (void);\n+extern void read_name (struct md_name *);\n extern char *read_quoted_string (void);\n extern char *read_string (int);\n extern int n_comma_elts (const char *);\n extern const char *scan_comma_elt (const char **);\n+extern void read_constants (void);\n+extern void traverse_md_constants (htab_trav, void *);\n extern void init_md_reader (void);"}, {"sha": "a3a9b61753c34c9bd2b889bc8aaac2176a653bf4", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 6, "deletions": 167, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=9f418533f26281f5d9bf776d9d18605f8b2c3b0f", "patch": "@@ -33,19 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"read-md.h\"\n #include \"gensupport.h\"\n \n-static htab_t md_constants;\n-\n-/* Holds one symbol or number in the .md file.  */\n-struct md_name {\n-  /* The name as it appeared in the .md file.  Names are syntactically\n-     limited to the length of this buffer.  */\n-  char buffer[256];\n-\n-  /* The name that should actually be used by the generator programs.\n-     This is an expansion of NAME, after things like constant substitution.  */\n-  char *string;\n-};\n-\n /* One element in a singly-linked list of (integer, string) pairs.  */\n struct map_value {\n   struct map_value *next;\n@@ -125,10 +112,6 @@ static struct mapping *add_mapping (struct iterator_group *, htab_t t,\n static struct map_value **add_map_value (struct map_value **,\n \t\t\t\t\t int, const char *);\n static void initialize_iterators (void);\n-static void read_name (struct md_name *);\n-static hashval_t def_hash (const void *);\n-static int def_name_eq_p (const void *, const void *);\n-static void read_constants (void);\n static void read_conditions (void);\n static void validate_const_int (const char *);\n static int find_iterator (struct iterator_group *, const char *);\n@@ -579,15 +562,17 @@ initialize_iterators (void)\n   char *copy, *p;\n   int i;\n \n-  modes.attrs = htab_create (13, def_hash, def_name_eq_p, 0);\n-  modes.iterators = htab_create (13, def_hash, def_name_eq_p, 0);\n+  modes.attrs = htab_create (13, leading_string_hash, leading_string_eq_p, 0);\n+  modes.iterators = htab_create (13, leading_string_hash,\n+\t\t\t\t leading_string_eq_p, 0);\n   modes.num_builtins = MAX_MACHINE_MODE;\n   modes.find_builtin = find_mode;\n   modes.uses_iterator_p = uses_mode_iterator_p;\n   modes.apply_iterator = apply_mode_iterator;\n \n-  codes.attrs = htab_create (13, def_hash, def_name_eq_p, 0);\n-  codes.iterators = htab_create (13, def_hash, def_name_eq_p, 0);\n+  codes.attrs = htab_create (13, leading_string_hash, leading_string_eq_p, 0);\n+  codes.iterators = htab_create (13, leading_string_hash,\n+\t\t\t\t leading_string_eq_p, 0);\n   codes.num_builtins = NUM_RTX_CODE;\n   codes.find_builtin = find_code;\n   codes.uses_iterator_p = uses_code_iterator_p;\n@@ -621,63 +606,6 @@ initialize_iterators (void)\n       upper_ptr = add_map_value (upper_ptr, i, copy);\n     }\n }\n-\n-/* Read an rtx code name into NAME.  It is terminated by any of the\n-   punctuation chars of rtx printed syntax.  */\n-\n-static void\n-read_name (struct md_name *name)\n-{\n-  int c;\n-  size_t i;\n-\n-  c = read_skip_spaces ();\n-\n-  i = 0;\n-  while (1)\n-    {\n-      if (c == ' ' || c == '\\n' || c == '\\t' || c == '\\f' || c == '\\r'\n-\t  || c == EOF)\n-\tbreak;\n-      if (c == ':' || c == ')' || c == ']' || c == '\"' || c == '/'\n-\t  || c == '(' || c == '[')\n-\t{\n-\t  unread_char (c);\n-\t  break;\n-\t}\n-\n-      if (i == sizeof (name->buffer) - 1)\n-\tfatal_with_file_and_line (\"name too long\");\n-      name->buffer[i++] = c;\n-\n-      c = read_char ();\n-    }\n-\n-  if (i == 0)\n-    fatal_with_file_and_line (\"missing name or number\");\n-  if (c == '\\n')\n-    read_md_lineno++;\n-\n-  name->buffer[i] = 0;\n-  name->string = name->buffer;\n-\n-  if (md_constants)\n-    {\n-      /* Do constant expansion.  */\n-      struct md_constant *def;\n-\n-      do\n-\t{\n-\t  struct md_constant tmp_def;\n-\n-\t  tmp_def.name = name->string;\n-\t  def = (struct md_constant *) htab_find (md_constants, &tmp_def);\n-\t  if (def)\n-\t    name->string = def->value;\n-\t}\n-      while (def);\n-    }\n-}\n \f\n /* Provide a version of a function to read a long long if the system does\n    not provide one.  */\n@@ -716,95 +644,6 @@ atoll (const char *p)\n   return tmp_wide;\n }\n #endif\n-\n-/* Given an object that starts with a char * name field, return a hash\n-   code for its name.  */\n-static hashval_t\n-def_hash (const void *def)\n-{\n-  unsigned result, i;\n-  const char *string = *(const char *const *) def;\n-\n-  for (result = i = 0; *string++ != '\\0'; i++)\n-    result += ((unsigned char) *string << (i % CHAR_BIT));\n-  return result;\n-}\n-\n-/* Given two objects that start with char * name fields, return true if\n-   they have the same name.  */\n-static int\n-def_name_eq_p (const void *def1, const void *def2)\n-{\n-  return ! strcmp (*(const char *const *) def1,\n-\t\t   *(const char *const *) def2);\n-}\n-\n-/* Process a define_constants directive, starting with the optional space\n-   after the \"define_constants\".  */\n-static void\n-read_constants (void)\n-{\n-  int c;\n-  htab_t defs;\n-\n-  c = read_skip_spaces ();\n-  if (c != '[')\n-    fatal_expected_char ('[', c);\n-\n-  defs = md_constants;\n-  if (! defs)\n-    defs = htab_create (32, def_hash, def_name_eq_p, (htab_del) 0);\n-\n-  /* Disable constant expansion during definition processing.  */\n-  md_constants = 0;\n-  while ( (c = read_skip_spaces ()) != ']')\n-    {\n-      struct md_name name, value;\n-      struct md_constant *def, tmp_def;\n-      void **entry_ptr;\n-\n-      if (c != '(')\n-\tfatal_expected_char ('(', c);\n-\n-      read_name (&name);\n-      read_name (&value);\n-\n-      tmp_def.name = name.string;\n-      entry_ptr = htab_find_slot (defs, &tmp_def, INSERT);\n-      if (*entry_ptr)\n-\t{\n-\t  def = (struct md_constant *) *entry_ptr;\n-\t  if (strcmp (def->value, value.string) != 0)\n-\t    fatal_with_file_and_line (\"redefinition of %s, was %s, now %s\",\n-\t\t\t\t      def->name, def->value, value.string);\n-\t}\n-      else\n-\t{\n-\t  def = XNEW (struct md_constant);\n-\t  def->name = xstrdup (name.string);\n-\t  def->value = xstrdup (value.string);\n-\t  *entry_ptr = def;\n-\t}\n-\n-      c = read_skip_spaces ();\n-      if (c != ')')\n-\tfatal_expected_char (')', c);\n-    }\n-  md_constants = defs;\n-  c = read_skip_spaces ();\n-  if (c != ')')\n-    fatal_expected_char (')', c);\n-}\n-\n-/* For every constant definition, call CALLBACK with two arguments:\n-   a pointer a pointer to the constant definition and INFO.\n-   Stops when CALLBACK returns zero.  */\n-void\n-traverse_md_constants (htab_trav callback, void *info)\n-{\n-  if (md_constants)\n-    htab_traverse (md_constants, callback, info);\n-}\n \f\n /* Process a define_conditions directive, starting with the optional\n    space after the \"define_conditions\".  The directive looks like this:"}, {"sha": "5826496fd891935dbc0b3aea8586d7e59e13ad9c", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f418533f26281f5d9bf776d9d18605f8b2c3b0f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9f418533f26281f5d9bf776d9d18605f8b2c3b0f", "patch": "@@ -2356,10 +2356,6 @@ extern void init_varasm_once (void);\n \n extern rtx make_debug_expr_from_rtl (const_rtx);\n \n-/* In rtl.c */\n-extern void traverse_md_constants (int (*) (void **, void *), void *);\n-struct md_constant { char *name, *value; };\n-\n /* In read-rtl.c */\n extern bool read_rtx (rtx *, int *);\n "}]}