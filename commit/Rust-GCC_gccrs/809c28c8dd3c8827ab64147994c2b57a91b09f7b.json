{"sha": "809c28c8dd3c8827ab64147994c2b57a91b09f7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA5YzI4YzhkZDNjODgyN2FiNjQxNDc5OTRjMmI1N2E5MWIwOWY3Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-03-19T20:32:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-03-19T20:32:57Z"}, "message": "PR c++/71834 - template-id with too few arguments.\n\n\t* pt.c (coerce_template_parms): Check fixed_parameter_pack_p.\n\nFrom-SVN: r258659", "tree": {"sha": "1dbece38db9d98c4c13810952efaad20a894ce3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dbece38db9d98c4c13810952efaad20a894ce3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/809c28c8dd3c8827ab64147994c2b57a91b09f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809c28c8dd3c8827ab64147994c2b57a91b09f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/809c28c8dd3c8827ab64147994c2b57a91b09f7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809c28c8dd3c8827ab64147994c2b57a91b09f7b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "058494f991ff11adee3458c6ac62fcbed28761df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058494f991ff11adee3458c6ac62fcbed28761df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058494f991ff11adee3458c6ac62fcbed28761df"}], "stats": {"total": 65, "additions": 49, "deletions": 16}, "files": [{"sha": "194b46890825d186252a063c58f72abaf7422dff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c28c8dd3c8827ab64147994c2b57a91b09f7b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c28c8dd3c8827ab64147994c2b57a91b09f7b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=809c28c8dd3c8827ab64147994c2b57a91b09f7b", "patch": "@@ -1,3 +1,8 @@\n+2018-03-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/71834 - template-id with too few arguments.\n+\t* pt.c (coerce_template_parms): Check fixed_parameter_pack_p.\n+\n 2018-03-19  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/84835"}, {"sha": "086cdc20781b7ecd173d40dbce7987a23d0ae55c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c28c8dd3c8827ab64147994c2b57a91b09f7b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c28c8dd3c8827ab64147994c2b57a91b09f7b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=809c28c8dd3c8827ab64147994c2b57a91b09f7b", "patch": "@@ -8235,6 +8235,11 @@ coerce_template_parms (tree parms,\n   int variadic_args_p = 0;\n   int post_variadic_parms = 0;\n \n+  /* Adjustment to nparms for fixed parameter packs.  */\n+  int fixed_pack_adjust = 0;\n+  int fixed_packs = 0;\n+  int missing = 0;\n+\n   /* Likewise for parameters with default arguments.  */\n   int default_p = 0;\n \n@@ -8279,6 +8284,7 @@ coerce_template_parms (tree parms,\n \t      || (TREE_VEC_ELT (parms, nargs) != error_mark_node\n                   && !TREE_PURPOSE (TREE_VEC_ELT (parms, nargs))))))\n     {\n+    bad_nargs:\n       if (complain & tf_error)\n \t{\n           if (variadic_p || default_p)\n@@ -8390,11 +8396,17 @@ coerce_template_parms (tree parms,\n \t      lost++;\n \t      /* We are done with all of the arguments.  */\n \t      arg_idx = nargs;\n+\t      break;\n \t    }\n \t  else\n \t    {\n \t      pack_adjust = TREE_VEC_LENGTH (ARGUMENT_PACK_ARGS (arg)) - 1;\n \t      arg_idx += pack_adjust;\n+\t      if (fixed_parameter_pack_p (TREE_VALUE (parm)))\n+\t\t{\n+\t\t  ++fixed_packs;\n+\t\t  fixed_pack_adjust += pack_adjust;\n+\t\t}\n \t    }\n           \n           continue;\n@@ -8452,12 +8464,18 @@ coerce_template_parms (tree parms,\n \t    error (\"template argument %d is invalid\", arg_idx + 1);\n \t}\n       else if (!arg)\n-        /* This only occurs if there was an error in the template\n-           parameter list itself (which we would already have\n-           reported) that we are trying to recover from, e.g., a class\n-           template with a parameter list such as\n-           template<typename..., typename>.  */\n-\t++lost;\n+\t{\n+\t  /* This can occur if there was an error in the template\n+\t     parameter list itself (which we would already have\n+\t     reported) that we are trying to recover from, e.g., a class\n+\t     template with a parameter list such as\n+\t     template<typename..., typename> (cpp0x/variadic150.C).  */\n+\t  ++lost;\n+\n+\t  /* This can also happen with a fixed parameter pack (71834).  */\n+\t  if (arg_idx >= nargs)\n+\t    ++missing;\n+\t}\n       else\n \targ = convert_template_argument (TREE_VALUE (parm),\n \t\t\t\t\t arg, new_args, complain, \n@@ -8470,20 +8488,20 @@ coerce_template_parms (tree parms,\n   cp_unevaluated_operand = saved_unevaluated_operand;\n   c_inhibit_evaluation_warnings = saved_inhibit_evaluation_warnings;\n \n-  if (variadic_p && arg_idx < nargs)\n+  if (missing || arg_idx < nargs - variadic_args_p)\n     {\n-      if (complain & tf_error)\n-\t{\n-\t  error (\"wrong number of template arguments \"\n-\t\t \"(%d, should be %d)\", nargs, arg_idx);\n-\t  if (in_decl)\n-\t    error (\"provided for %q+D\", in_decl);\n-\t}\n-      return error_mark_node;\n+      /* If we had fixed parameter packs, we didn't know how many arguments we\n+\t actually needed earlier; now we do.  */\n+      nparms += fixed_pack_adjust;\n+      variadic_p -= fixed_packs;\n+      goto bad_nargs;\n     }\n \n   if (lost)\n-    return error_mark_node;\n+    {\n+      gcc_assert (!(complain & tf_error) || seen_error ());\n+      return error_mark_node;\n+    }\n \n   if (CHECKING_P && !NON_DEFAULT_TEMPLATE_ARGS_COUNT (new_inner_args))\n     SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (new_inner_args,"}, {"sha": "381ff731c097d586fcd774e9d1a2b153e23b3d39", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-nested3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c28c8dd3c8827ab64147994c2b57a91b09f7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-nested3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c28c8dd3c8827ab64147994c2b57a91b09f7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-nested3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-nested3.C?ref=809c28c8dd3c8827ab64147994c2b57a91b09f7b", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/71834\n+// { dg-do compile { target c++11 } }\n+\n+template < typename ... Ts > struct A \n+{\n+  template < Ts ..., typename U > struct B {};\n+};\n+\n+// should be, e.g.: A < int >::B < 0, int > e; \n+A < int >::B < 0 > e;\t   // { dg-error \"wrong number of template arguments\" }"}]}