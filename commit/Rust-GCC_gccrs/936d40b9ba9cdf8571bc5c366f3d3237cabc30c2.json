{"sha": "936d40b9ba9cdf8571bc5c366f3d3237cabc30c2", "node_id": "C_kwDOANBUbNoAKDkzNmQ0MGI5YmE5Y2RmODU3MWJjNWMzNjZmM2QzMjM3Y2FiYzMwYzI", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2022-11-22T18:22:16Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2022-11-22T18:22:16Z"}, "message": "testsuite: Fix missing EFFECTIVE_TARGETS variable errors\n\nPermit running vector tests outside `check_vect_support_and_set_flags'\nenvironment, removing errors such as:\n\nERROR: gcc.dg/analyzer/torture/pr93350.c   -O0 : can't read \"EFFECTIVE_TARGETS\": no such variable for \" dg-require-effective-target 1 vect_int \"\n\nor:\n\nERROR: gcc.dg/bic-bitmask-13.c: error executing dg-final: can't read \"EFFECTIVE_TARGETS\": no such variable\n\nwith `mips-linux-gnu' target testing.\n\nThe EFFECTIVE_TARGETS variable has originated from commit 9b7937cf8a06\n(\"Add support to run auto-vectorization tests for multiple effective\ntargets.\"), where arrangements have been made to run vector tests run\nwithin `check_vect_support_and_set_flags' environment iteratively over\nall the vector unit variants available in the architecture using extra\ncompilation flags regardless of whether the target environment arranged\nfor a particular testsuite run has vector support enabled by default.\nSo far this has been used for the MIPS target only.\n\nVector tests have since been added though that run outside environment\nset up by `check_vect_support_and_set_flags' just using the current\ncompilation environment with no extra flags added.  This works for most\ntargets, however causes problems with the MIPS target, because outside\n`check_vect_support_and_set_flags' environment the EFFECTIVE_TARGETS\nvariable will not have been correctly set up even if it was added to\nthe particular script invoking the test in question.\n\nFix this by using just the current compilation environment whenever a\nvector feature is requested by `et-is-effective-target' in the absence\nof the EFFECTIVE_TARGETS variable.  This required some modification to\nindividual vector feature tests, which always added the compilation\nflags required for the determination of whether the given vector unit\nvariant can be verified with the current testsuite run (except for the\nLoongson MMI variant).  Now explicit flags are only passed in setting up\nEFFECTIVE_TARGETS and otherwise the current compilation environment will\ndetermine whether such a vector test is applicable.\n\nThis changes how Loongson MMI is handled in that the `-mloongson-mmi'\nflag is explicitly passed for the determination of whether this vector\nunit variant can be verified, which I gather is how it was supposed to\nbe arranged anyway because the flag is then added for testing the\nLoongson MMI variant.\n\n\tgcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_mpaired_single): Add `args' argument and\n\tpass it to `check_no_compiler_messages' replacing\n\t`-mpaired-single'.\n\t(add_options_for_mips_loongson_mmi): Add `args' argument and\n\tpass it to `check_no_compiler_messages'.\n\t(check_effective_target_mips_msa): Add `args' argument and pass\n\tit to `check_no_compiler_messages' replacing `-mmsa'.\n\t(check_effective_target_mpaired_single_runtime)\n\t(add_options_for_mpaired_single): Pass `-mpaired-single' to\n\t`check_effective_target_mpaired_single'.\n\t(check_effective_target_mips_loongson_mmi_runtime)\n\t(add_options_for_mips_loongson_mmi): Pass `-mloongson-mmi' to\n\t`check_effective_target_mips_loongson_mmi'.\n\t(check_effective_target_mips_msa_runtime)\n\t(add_options_for_mips_msa): Pass `-mmsa' to\n\t`check_effective_target_mips_msa'.\n\t(et-is-effective-target): Verify that EFFECTIVE_TARGETS exists\n\tand if not, just check if the current compilation environment\n\tsupports the target feature requested.\n\t(check_vect_support_and_set_flags): Pass `-mpaired-single',\n\t`-mloongson-mmi', and `-mmsa' to the respective target feature\n\tchecks.", "tree": {"sha": "1f9838d5fb3da49754b6ade65748d5b8ed34b165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f9838d5fb3da49754b6ade65748d5b8ed34b165"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/936d40b9ba9cdf8571bc5c366f3d3237cabc30c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936d40b9ba9cdf8571bc5c366f3d3237cabc30c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/936d40b9ba9cdf8571bc5c366f3d3237cabc30c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936d40b9ba9cdf8571bc5c366f3d3237cabc30c2/comments", "author": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55cb8c5c9abfe83c342a7b8e8b7dd4bee1791302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55cb8c5c9abfe83c342a7b8e8b7dd4bee1791302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55cb8c5c9abfe83c342a7b8e8b7dd4bee1791302"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "364e0ed8cf5c492e3f9a0be34632df3cfa0ad3e5", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936d40b9ba9cdf8571bc5c366f3d3237cabc30c2/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936d40b9ba9cdf8571bc5c366f3d3237cabc30c2/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=936d40b9ba9cdf8571bc5c366f3d3237cabc30c2", "patch": "@@ -1343,10 +1343,10 @@ proc check_effective_target_pie { } {\n \n # Return true if the target supports -mpaired-single (as used on MIPS).\n \n-proc check_effective_target_mpaired_single { } {\n+proc check_effective_target_mpaired_single { args } {\n     return [check_no_compiler_messages mpaired_single object {\n \tvoid foo (void) { }\n-    } \"-mpaired-single\"]\n+    } \"$args\"]\n }\n \n # Return true if the target has access to FPU instructions.\n@@ -2158,7 +2158,7 @@ proc check_mips_msa_hw_available { } {\n # executables, 0 otherwise.\n \n proc check_effective_target_mpaired_single_runtime { } {\n-    if { [check_effective_target_mpaired_single]\n+    if { [check_effective_target_mpaired_single \"-mpaired-single\"]\n \t && [check_mpaired_single_hw_available] } {\n \treturn 1\n     }\n@@ -2168,7 +2168,7 @@ proc check_effective_target_mpaired_single_runtime { } {\n # Return 1 if the target supports running Loongson executables, 0 otherwise.\n \n proc check_effective_target_mips_loongson_mmi_runtime { } {\n-    if { [check_effective_target_mips_loongson_mmi]\n+    if { [check_effective_target_mips_loongson_mmi \"-mloongson-mmi\"]\n \t && [check_mips_loongson_mmi_hw_available] } {\n \treturn 1\n     }\n@@ -2178,7 +2178,7 @@ proc check_effective_target_mips_loongson_mmi_runtime { } {\n # Return 1 if the target supports running MIPS MSA executables, 0 otherwise.\n \n proc check_effective_target_mips_msa_runtime { } {\n-  if { [check_effective_target_mips_msa]\n+  if { [check_effective_target_mips_msa \"-mmsa\"]\n        && [check_mips_msa_hw_available] } {\n     return 1\n   }\n@@ -6109,7 +6109,7 @@ proc check_effective_target_arm_acq_rel { } {\n # Add the options needed for MIPS Paired-Single.\n \n proc add_options_for_mpaired_single { flags } {\n-    if { ! [check_effective_target_mpaired_single] } {\n+    if { ! [check_effective_target_mpaired_single \"-mpaired-single\"] } {\n \treturn \"$flags\"\n     }\n     return \"$flags -mpaired-single\"\n@@ -6118,7 +6118,7 @@ proc add_options_for_mpaired_single { flags } {\n # Add the options needed for MIPS SIMD Architecture.\n \n proc add_options_for_mips_msa { flags } {\n-  if { ! [check_effective_target_mips_msa] } {\n+  if { ! [check_effective_target_mips_msa \"-mmsa\"] } {\n     return \"$flags\"\n   }\n   return \"$flags -mmsa\"\n@@ -6127,7 +6127,7 @@ proc add_options_for_mips_msa { flags } {\n # Add the options needed for MIPS Loongson MMI Architecture.\n \n proc add_options_for_mips_loongson_mmi { flags } {\n-  if { ! [check_effective_target_mips_loongson_mmi] } {\n+  if { ! [check_effective_target_mips_loongson_mmi \"-mloongson-mmi\"] } {\n     return \"$flags\"\n   }\n   return \"$flags -mloongson-mmi\"\n@@ -6137,15 +6137,15 @@ proc add_options_for_mips_loongson_mmi { flags } {\n # Return 1 if this a Loongson-2E or -2F target using an ABI that supports\n # the Loongson vector modes.\n \n-proc check_effective_target_mips_loongson_mmi { } {\n+proc check_effective_target_mips_loongson_mmi { args } {\n     return [check_no_compiler_messages loongson assembly {\n \t#if !defined(__mips_loongson_mmi)\n \t#error !__mips_loongson_mmi\n \t#endif\n \t#if !defined(__mips_loongson_vector_rev)\n \t#error !__mips_loongson_vector_rev\n \t#endif\n-    }]\n+    } \"$args\"]\n }\n \n # Return 1 if this is a MIPS target that supports the legacy NAN.\n@@ -6159,7 +6159,7 @@ proc check_effective_target_mips_nanlegacy { } {\n \n # Return 1 if an MSA program can be compiled to object\n \n-proc check_effective_target_mips_msa { } {\n+proc check_effective_target_mips_msa { args } {\n   if ![check_effective_target_nomips16] {\n     return 0\n   }\n@@ -6185,7 +6185,7 @@ proc check_effective_target_mips_msa { } {\n       return v[0];\n     }\n     #endif\n-  } \"-mmsa\" ]\n+  } \"$args\"]\n }\n \n # Return 1 if this is an ARM target that adheres to the ABI for the ARM\n@@ -9063,11 +9063,16 @@ proc et-is-effective-target { target } {\n     global EFFECTIVE_TARGETS\n     global et_index\n \n-    if { [llength $EFFECTIVE_TARGETS] > $et_index\n-\t && [lindex $EFFECTIVE_TARGETS $et_index] == $target } {\n+    if { [info exists EFFECTIVE_TARGETS] } {\n+\tif { [llength $EFFECTIVE_TARGETS] > $et_index\n+\t     && [lindex $EFFECTIVE_TARGETS $et_index] == $target } {\n \t    return 1\n+\t} else {\n+\t    return 0\n+\t}\n+    } else {\n+\treturn [check_effective_target_${target}]\n     }\n-    return 0\n }\n \n # Return 1 if target default to short enums\n@@ -10661,13 +10666,13 @@ proc check_vect_support_and_set_flags { } {\n         }\n     } elseif { [istarget mips*-*-*]\n \t       && [check_effective_target_nomips16] } {\n-\tif { [check_effective_target_mpaired_single] } {\n+\tif { [check_effective_target_mpaired_single \"-mpaired-single\"] } {\n \t    lappend EFFECTIVE_TARGETS mpaired_single\n \t}\n-\tif { [check_effective_target_mips_loongson_mmi] } {\n+\tif { [check_effective_target_mips_loongson_mmi \"-mloongson-mmi\"] } {\n \t    lappend EFFECTIVE_TARGETS mips_loongson_mmi\n \t}\n-\tif { [check_effective_target_mips_msa] } {\n+\tif { [check_effective_target_mips_msa \"-mmsa\"] } {\n \t    lappend EFFECTIVE_TARGETS mips_msa\n         }\n \treturn [llength $EFFECTIVE_TARGETS]"}]}