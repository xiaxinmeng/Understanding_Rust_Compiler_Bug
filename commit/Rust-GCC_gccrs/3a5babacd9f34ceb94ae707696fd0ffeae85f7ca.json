{"sha": "3a5babacd9f34ceb94ae707696fd0ffeae85f7ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E1YmFiYWNkOWYzNGNlYjk0YWU3MDc2OTZmZDBmZmVhZTg1ZjdjYQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-07-02T19:43:44Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-07-02T19:43:44Z"}, "message": "entered into RCS\n\nFrom-SVN: r1390", "tree": {"sha": "9293345326b0195c8dca887ff4e85278ef0c9812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9293345326b0195c8dca887ff4e85278ef0c9812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a5babacd9f34ceb94ae707696fd0ffeae85f7ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5babacd9f34ceb94ae707696fd0ffeae85f7ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5babacd9f34ceb94ae707696fd0ffeae85f7ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5babacd9f34ceb94ae707696fd0ffeae85f7ca/comments", "author": null, "committer": null, "parents": [{"sha": "51c2b9d10438d42cfd050b17664a6f567cfdebf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c2b9d10438d42cfd050b17664a6f567cfdebf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c2b9d10438d42cfd050b17664a6f567cfdebf8"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "0239d8694a2622d8fcb79ce310abff36e54305a5", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5babacd9f34ceb94ae707696fd0ffeae85f7ca/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5babacd9f34ceb94ae707696fd0ffeae85f7ca/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3a5babacd9f34ceb94ae707696fd0ffeae85f7ca", "patch": "@@ -315,6 +315,25 @@ arith5_operand (op, mode)\n   return register_operand (op, mode) || int5_operand (op, mode);\n }\n \n+/* True iff zdepi can be used to generate this CONST_INT.  */\n+zdepi_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  unsigned x;\n+  unsigned lbmask, t;\n+\n+  if (GET_CODE (op) != CONST_INT)\n+    return 0;\n+\n+  /* This might not be obvious, but it's at least fast.\n+     This function is critcal; we don't have the time loops would take.  */\n+  x = INTVAL (op);\n+  lbmask = x & -x;\n+  t = ((x >> 4) + lbmask) & ~(lbmask - 1);\n+  return ((t & (t - 1)) == 0);\n+}\n+\n /* Return truth value of statement that OP is a call-clobbered register.  */\n int\n clobbered_register (op, mode)\n@@ -621,6 +640,8 @@ emit_move_sequence (operands, mode)\n \t      return 1;\n \t    }\n \t}\n+      else if (zdepi_operand (operand1, VOIDmode))\n+\treturn 0;\n       else if (GET_CODE (operand1) == CONST_INT\n \t       ? (! SMALL_INT (operand1)\n \t\t  && (INTVAL (operand1) & 0x7ff) != 0) : 1)"}]}