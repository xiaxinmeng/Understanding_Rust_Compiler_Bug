{"sha": "feb3c40c8ee043cc893410c9985926439292caee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmViM2M0MGM4ZWUwNDNjYzg5MzQxMGM5OTg1OTI2NDM5MjkyY2FlZQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-12-22T08:47:22Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-12-23T16:32:52Z"}, "message": "d: Force TYPE_MODE of classes and non-POD structs as BLKmode\n\nWithout this being forced, the optimizer could still make decisions that\nrequire objects of the non-POD types to need a temporary, which would\nresult in an ICE during the expand to RTL passes.\n\ngcc/d/ChangeLog:\n\n\tPR d/98427\n\t* types.cc (TypeVisitor::visit (TypeStruct *)): Set TYPE_MODE of all\n\tnon-trivial types as BLKmode.\n\t(TypeVisitor::visit (TypeClass *)): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/98427\n\t* gdc.dg/pr98427.d: New test.", "tree": {"sha": "f01493c8c69af1fc5536d5b08c1b3f38d052e874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f01493c8c69af1fc5536d5b08c1b3f38d052e874"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feb3c40c8ee043cc893410c9985926439292caee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb3c40c8ee043cc893410c9985926439292caee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feb3c40c8ee043cc893410c9985926439292caee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb3c40c8ee043cc893410c9985926439292caee/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16929214fd139c9d092f9bfbd9d8287d5903f593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16929214fd139c9d092f9bfbd9d8287d5903f593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16929214fd139c9d092f9bfbd9d8287d5903f593"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "acb8c40952653a80ec7c7a97dc7658b95294189b", "filename": "gcc/d/types.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb3c40c8ee043cc893410c9985926439292caee/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb3c40c8ee043cc893410c9985926439292caee/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=feb3c40c8ee043cc893410c9985926439292caee", "patch": "@@ -964,7 +964,10 @@ class TypeVisitor : public Visitor\n     if (!t->sym->isPOD ())\n       {\n \tfor (tree tv = t->ctype; tv != NULL_TREE; tv = TYPE_NEXT_VARIANT (tv))\n-\t  TREE_ADDRESSABLE (tv) = 1;\n+\t  {\n+\t    TREE_ADDRESSABLE (tv) = 1;\n+\t    SET_TYPE_MODE (tv, BLKmode);\n+\t  }\n       }\n   }\n \n@@ -999,7 +1002,10 @@ class TypeVisitor : public Visitor\n \n     /* Classes only live in memory, so always set the TREE_ADDRESSABLE bit.  */\n     for (tree tv = basetype; tv != NULL_TREE; tv = TYPE_NEXT_VARIANT (tv))\n-      TREE_ADDRESSABLE (tv) = 1;\n+      {\n+\tTREE_ADDRESSABLE (tv) = 1;\n+\tSET_TYPE_MODE (tv, BLKmode);\n+      }\n \n     /* Type is final, there are no derivations.  */\n     if (t->sym->storage_class & STCfinal)"}, {"sha": "225db8b8f2f80cdd78860c8cee1ebede32a7c12b", "filename": "gcc/testsuite/gdc.dg/pr98427.d", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb3c40c8ee043cc893410c9985926439292caee/gcc%2Ftestsuite%2Fgdc.dg%2Fpr98427.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb3c40c8ee043cc893410c9985926439292caee/gcc%2Ftestsuite%2Fgdc.dg%2Fpr98427.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr98427.d?ref=feb3c40c8ee043cc893410c9985926439292caee", "patch": "@@ -0,0 +1,23 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98427\n+// { dg-do compile }\n+// { dg-options \"-O2 -fno-inline\" }\n+\n+@trusted memoizeExpr()\n+{\n+    struct CodepointSet\n+    {\n+        struct CowArray\n+        {\n+            uint *ptr;\n+        }\n+\n+        const CodepointSet binary(U)(U rhs)\n+        {\n+            return rhs;\n+        }\n+\n+        CowArray array;\n+    }\n+\n+    CodepointSet().binary(CodepointSet());\n+}"}]}