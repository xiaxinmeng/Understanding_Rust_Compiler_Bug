{"sha": "85ae54e18b9a3cbe4feda921ecd77cf275177edf", "node_id": "C_kwDOANBUbNoAKDg1YWU1NGUxOGI5YTNjYmU0ZmVkYTkyMWVjZDc3Y2YyNzUxNzdlZGY", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-12T21:30:30Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-13T12:40:02Z"}, "message": "c++: ambiguous call not diagnosed after DR2352 [PR97296]\n\nDR 2352 changed the definitions of reference-related (so that it uses\n\"similar type\" instead of \"same type\") and of reference-compatible (use\na standard conversion sequence).  That means that reference-related is\nnow more broad, which means that we will be binding more things directly.\n\nThe original patch for DR 2352 caused some problems, which were fixed in\nr276251 by creating a \"fake\" ck_qual in direct_reference_binding, so\nthat in\n\n  void f(int *); // #1\n  void f(const int * const &); // #2\n  int *x;\n  int main()\n  {\n    f(x); // call #1\n  }\n\nwe call #1.  The extra ck_qual in #2 causes compare_ics to select #1,\nwhich is a better match for \"int *\" because then we don't have to do\na qualification conversion.\n\nLet's turn to the problem in this PR.  We have\n\n  void f(const int * const &); // #1\n  void f(const int *); // #2\n  int *x;\n  int main()\n  {\n    f(x);\n  }\n\nWe arrive in compare_ics to decide which one is better. The ICS for #1\nlooks like\n\n    ck_ref_bind      <-    ck_qual         <-   ck_identity\n  const int *const &     const int *const         int *\n\nand the ICS for #2 is\n\n    ck_qual     <-  ck_rvalue   <-  ck_identity\n  const int *          int *           int *\n\nWe strip the reference and then comp_cv_qual_signature when comparing two\nck_quals sees that \"const int *\" is a proper subset of \"const int *const\"\nand we return -1.  But that's wrong; presumably the top-level \"const\"\nshould be ignored and the call should be ambiguous.  This patch adjust\nthe type of the \"fake\" ck_qual so that this problem doesn't arise.\n\n\tPR c++/97296\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (direct_reference_binding): strip_top_quals when creating\n\ta ck_qual.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/ref-bind4.C: Add dg-error.\n\t* g++.dg/cpp0x/ref-bind8.C: New test.", "tree": {"sha": "488af85e3b3d6156234fe954f3fc1561aaa6af15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/488af85e3b3d6156234fe954f3fc1561aaa6af15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85ae54e18b9a3cbe4feda921ecd77cf275177edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ae54e18b9a3cbe4feda921ecd77cf275177edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ae54e18b9a3cbe4feda921ecd77cf275177edf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ae54e18b9a3cbe4feda921ecd77cf275177edf/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9645279722233bb779cc6eca02687a732d4834e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9645279722233bb779cc6eca02687a732d4834e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9645279722233bb779cc6eca02687a732d4834e5"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "51d8f6c3fb12be4b7ffd08079a81d4171c814ba9", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ae54e18b9a3cbe4feda921ecd77cf275177edf/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ae54e18b9a3cbe4feda921ecd77cf275177edf/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=85ae54e18b9a3cbe4feda921ecd77cf275177edf", "patch": "@@ -1680,8 +1680,19 @@ direct_reference_binding (tree type, conversion *conv)\n        because the types \"int *\" and \"const int *const\" are\n        reference-related and we were binding both directly and they\n        had the same rank.  To break it up, we add a ck_qual under the\n-       ck_ref_bind so that conversion sequence ranking chooses #1.  */\n-    conv = build_conv (ck_qual, t, conv);\n+       ck_ref_bind so that conversion sequence ranking chooses #1.\n+\n+       We strip_top_quals here which is also what standard_conversion\n+       does.  Failure to do so would confuse comp_cv_qual_signature\n+       into thinking that in\n+\n+\t void f(const int * const &); // #1\n+\t void f(const int *); // #2\n+\t int *x;\n+\t f(x);\n+\n+       #2 is a better match than #1 even though they're ambiguous (97296).  */\n+    conv = build_conv (ck_qual, strip_top_quals (t), conv);\n \n   return build_conv (ck_ref_bind, type, conv);\n }"}, {"sha": "d296d7c3b725ed49c6770ee561533f883a086f52", "filename": "gcc/testsuite/g++.dg/cpp0x/ref-bind4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ae54e18b9a3cbe4feda921ecd77cf275177edf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ae54e18b9a3cbe4feda921ecd77cf275177edf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind4.C?ref=85ae54e18b9a3cbe4feda921ecd77cf275177edf", "patch": "@@ -51,6 +51,6 @@ g (int *p, const int *pc, const int **q)\n      similar  types  T1 and T2 (_conv.qual_), respectively, and the cv-\n      qualification signature of type T1 is a proper subset of  the  cv-\n      qualification signature of type T2  */\n-  f8 (q);\n+  f8 (q); // { dg-error \"call of overloaded\" }\n   f9 (q);\n }"}, {"sha": "eee78fd5e744556e1d178f4af03d2f9a8f419867", "filename": "gcc/testsuite/g++.dg/cpp0x/ref-bind8.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ae54e18b9a3cbe4feda921ecd77cf275177edf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ae54e18b9a3cbe4feda921ecd77cf275177edf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind8.C?ref=85ae54e18b9a3cbe4feda921ecd77cf275177edf", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/97296\n+// { dg-do compile }\n+\n+void f(const int * const &);\n+void f(const int *);\n+int *x;\n+int main()\n+{\n+  f(x); // { dg-error \"call of overloaded\" }\n+}"}]}