{"sha": "a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTllYzk5MDJkN2YxYTliZjdhMjc3OGMzZmI4ZmM3NWJjMmRmMmNlZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-31T09:20:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-31T09:20:39Z"}, "message": "fold-const: Avoid (cast) ((cast2) x p+ y) folding for -fsanitize=alignment [PR98206]\n\nThe following testcase is diagnosed by UBSan as invalid, even when it is\nvalid.\nWe have a derived type Base2 at offset 1 with alignment 1 and do:\n(const Derived &) ((const Base2 *) this + -1)\nbut the folder before ubsan in the FE gets a chance to instrument it\noptimizes that into:\n(const Derived &) this + -1\nand so we require that this has 8-byte alignment which Derived class needs.\n\nFixed by avoiding such an optimization when -fsanitize=alignment is in\neffect if it would affect the alignments (and guarded with !in_gimple_form\nbecause we don't really care during GIMPLE, though pointer conversions are\nuseless then and so such folding isn't needed very much during GIMPLE).\n\n2020-12-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/98206\n\t* fold-const.c: Include asan.h.\n\t(fold_unary_loc): Don't optimize (ptr_type) (((ptr_type2) x) p+ y)\n\tinto ((ptr_type) x) p+ y if sanitizing alignment in GENERIC and\n\tptr_type points to type with higher alignment than ptr_type2.\n\n\t* g++.dg/ubsan/align-4.C: New test.", "tree": {"sha": "35dfacac654745f872232ce25e0897db144a2793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35dfacac654745f872232ce25e0897db144a2793"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d96b8556e569a1ccce36ef990e167031d07a661a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96b8556e569a1ccce36ef990e167031d07a661a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96b8556e569a1ccce36ef990e167031d07a661a"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "0d7113a80256fe4bd3102cb0ee148714e29708b2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef", "patch": "@@ -82,6 +82,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"tree-vector-builder.h\"\n #include \"vec-perm-indices.h\"\n+#include \"asan.h\"\n \n /* Nonzero if we are folding constants inside an initializer; zero\n    otherwise.  */\n@@ -9392,8 +9393,17 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t  tree arg00 = TREE_OPERAND (arg0, 0);\n \t  tree arg01 = TREE_OPERAND (arg0, 1);\n \n-\t  return fold_build_pointer_plus_loc\n-\t\t   (loc, fold_convert_loc (loc, type, arg00), arg01);\n+\t  /* If -fsanitize=alignment, avoid this optimization in GENERIC\n+\t     when the pointed type needs higher alignment than\n+\t     the p+ first operand's pointed type.  */\n+\t  if (!in_gimple_form\n+\t      && sanitize_flags_p (SANITIZE_ALIGNMENT)\n+\t      && (min_align_of_type (TREE_TYPE (type))\n+\t\t  > min_align_of_type (TREE_TYPE (TREE_TYPE (arg00)))))\n+\t    return NULL_TREE;\n+\n+\t  arg00 = fold_convert_loc (loc, type, arg00);\n+\t  return fold_build_pointer_plus_loc (loc, arg00, arg01);\n \t}\n \n       /* Convert (T1)(~(T2)X) into ~(T1)X if T1 and T2 are integral types"}, {"sha": "42c091b92cf93efdc06c8cbb24d6771a1b1eecbb", "filename": "gcc/testsuite/g++.dg/ubsan/align-4.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Falign-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Falign-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Falign-4.C?ref=a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/98206\n+// { dg-do run }\n+// { dg-options \"-fsanitize=alignment -std=c++11 -fno-sanitize-recover=alignment\" }\n+\n+template <typename Derived>\n+struct Base1\n+{\n+  char c1;\n+};\n+\n+template <typename Derived>\n+struct Base2\n+{\n+  char c2;\n+  const Derived &get2 () const { return static_cast<const Derived &> (*this); }\n+};\n+\n+struct X : public Base1<X>, public Base2<X>\n+{\n+  X (const char *d) : data{d} {}\n+  const char *data;\n+};\n+\n+int\n+main ()\n+{\n+  X x = X{\"cheesecake\"};\n+  const char *p = x.get2 ().data;\n+  if (p[0] != 'c')\n+    __builtin_abort ();\n+}"}]}