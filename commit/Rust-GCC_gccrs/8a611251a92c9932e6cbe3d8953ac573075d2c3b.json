{"sha": "8a611251a92c9932e6cbe3d8953ac573075d2c3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE2MTEyNTFhOTJjOTkzMmU2Y2JlM2Q4OTUzYWM1NzMwNzVkMmMzYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-03-12T23:37:11Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-03-12T23:37:11Z"}, "message": "re PR java/5923 (gcj -C generates incorrect bytecode)\n\n\t* jcf-parse.c (get_constant) [CONSTANT_String]: String values are\n\tUTF-8, not UCS-2.  Fixes PR java/5923.\n\nFrom-SVN: r50695", "tree": {"sha": "a0843ee77080caf49bb49300e5419a2516da7f52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0843ee77080caf49bb49300e5419a2516da7f52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a611251a92c9932e6cbe3d8953ac573075d2c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a611251a92c9932e6cbe3d8953ac573075d2c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a611251a92c9932e6cbe3d8953ac573075d2c3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a611251a92c9932e6cbe3d8953ac573075d2c3b/comments", "author": null, "committer": null, "parents": [{"sha": "0ae02efa2142a5ebeae19aca5257a6c5ad165236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae02efa2142a5ebeae19aca5257a6c5ad165236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ae02efa2142a5ebeae19aca5257a6c5ad165236"}], "stats": {"total": 51, "additions": 7, "deletions": 44}, "files": [{"sha": "426720770cbd36d90ec7582d097f1c916322f42c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a611251a92c9932e6cbe3d8953ac573075d2c3b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a611251a92c9932e6cbe3d8953ac573075d2c3b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8a611251a92c9932e6cbe3d8953ac573075d2c3b", "patch": "@@ -1,5 +1,8 @@\n 2002-03-12  Tom Tromey  <tromey@redhat.com>\n \n+\t* jcf-parse.c (get_constant) [CONSTANT_String]: String values are\n+\tUTF-8, not UCS-2.  Fixes PR java/5923.\n+\n \t* parse.y (qualify_ambiguous_name): Handle case where QUAL_WFL is\n \ta call_expr wrapped in a convert.  Fixes PR java/5848.\n "}, {"sha": "b19b9e9d84db4574b6a546c699926f863ff00ca3", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 4, "deletions": 44, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a611251a92c9932e6cbe3d8953ac573075d2c3b/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a611251a92c9932e6cbe3d8953ac573075d2c3b/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=8a611251a92c9932e6cbe3d8953ac573075d2c3b", "patch": "@@ -350,13 +350,11 @@ get_constant (jcf, index)\n \tunsigned char *str_ptr;\n \tunsigned char *str;\n \tconst unsigned char *utf8;\n-\tint i, str_len;\n+\tint i;\n \n-\t/* Count the number of Unicode characters in the string,\n-\t   while checking for a malformed Utf8 string. */\n+\t/* Check for a malformed Utf8 string.  */\n \tutf8 = (const unsigned char *) utf8_ptr;\n \ti = utf8_len;\n-\tstr_len = 0;\n \twhile (i > 0)\n \t  {\n \t    int char_len = UT8_CHAR_LENGTH (*utf8);\n@@ -365,48 +363,10 @@ get_constant (jcf, index)\n \n \t    utf8 += char_len;\n \t    i -= char_len;\n-\t    str_len++;\n \t  }\n \n-\t/* Allocate a scratch buffer, convert the string to UCS2, and copy it\n-\t   into the new space.  */\n-\tstr_ptr = (unsigned char *) alloca (2 * str_len);\n-\tstr = str_ptr;\n-\tutf8 = (const unsigned char *)utf8_ptr;\n-\n-\tfor (i = 0; i < str_len; i++)\n-\t  {\n-\t    int char_value;\n-\t    int char_len = UT8_CHAR_LENGTH (*utf8);\n-\t    switch (char_len)\n-\t      {\n-\t      case 1:\n-\t\tchar_value = *utf8++;\n-\t\tbreak;\n-\t      case 2:\n-\t\tchar_value = *utf8++ & 0x1F;\n-\t\tchar_value = (char_value << 6) | (*utf8++ & 0x3F);\n-\t\tbreak;\n-\t      case 3:\n-\t\tchar_value = *utf8++ & 0x0F;\n-\t\tchar_value = (char_value << 6) | (*utf8++ & 0x3F);\n-\t\tchar_value = (char_value << 6) | (*utf8++ & 0x3F);\n-\t\tbreak;\n-\t      default:\n-\t\tgoto bad;\n-\t      }\n-\t    if (BYTES_BIG_ENDIAN)\n-\t      {\n-\t\t*str++ = char_value >> 8;\n-\t\t*str++ = char_value & 0xFF;\n-\t      }\n-\t    else\n-\t      {\n-\t\t*str++ = char_value & 0xFF;\n-\t\t*str++ = char_value >> 8;\n-\t      }\n-\t  }\n-\tvalue = build_string (str - str_ptr, str_ptr);\n+\t/* Allocate a new string value.  */\n+\tvalue = build_string (utf8_len, utf8_ptr);\n \tTREE_TYPE (value) = build_pointer_type (string_type_node);\n       }\n       break;"}]}