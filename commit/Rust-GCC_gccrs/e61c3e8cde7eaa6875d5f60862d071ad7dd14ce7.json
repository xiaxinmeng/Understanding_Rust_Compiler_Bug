{"sha": "e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYxYzNlOGNkZTdlYWE2ODc1ZDVmNjA4NjJkMDcxYWQ3ZGQxNGNlNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-01-04T04:21:42Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-01-04T04:21:42Z"}, "message": "std_cwctype.h: Include std_cwchar.h for wint_t.\n\n\n2001-01-03  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/c_std/bits/std_cwctype.h: Include std_cwchar.h for wint_t.\n\t* testsuite/17_intro/header_cwctype.cc (main): New file.\n\n\t* src/Makefile.am (base_headers): Change.\n\t* include/bits/std_string.h: And here.\n\t* include/bits/string.tcc: Tweaks, move to...\n\t* include/bits/basic_string.tcc: ...Here.\n\t* src/string-inst.cc: Simplify, just instantiate the whole class,\n\tnot member-by-member.\n\nFrom-SVN: r38679", "tree": {"sha": "fc45e0f676e408a7d52afccee088ae3290c00e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc45e0f676e408a7d52afccee088ae3290c00e82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/comments", "author": null, "committer": null, "parents": [{"sha": "584ef5fea573e2e0966c068ec8c5dd6dce493663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584ef5fea573e2e0966c068ec8c5dd6dce493663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584ef5fea573e2e0966c068ec8c5dd6dce493663"}], "stats": {"total": 229, "additions": 35, "deletions": 194}, "files": [{"sha": "7c644aff638d74b83e6e024fb251d71e14e94499", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7", "patch": "@@ -1,3 +1,15 @@\n+2001-01-03  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/c_std/bits/std_cwctype.h: Include std_cwchar.h for wint_t.\n+\t* testsuite/17_intro/header_cwctype.cc (main): New file.\n+\n+\t* src/Makefile.am (base_headers): Change.\n+\t* include/bits/std_string.h: And here.\n+\t* include/bits/string.tcc: Tweaks, move to...\n+\t* include/bits/basic_string.tcc: ...Here.\n+\t* src/string-inst.cc: Simplify, just instantiate the whole class,\n+\tnot member-by-member.\n+\n 2001-01-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_ENABLD_CSTDIO): Add in default value."}, {"sha": "a9ac2c967817a16302cc05fb8eb83dd4fcefe199", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7", "patch": "@@ -1,6 +1,6 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 2000, 1999, 1998, 1997 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,7 +42,6 @@\n \n namespace std\n {\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     const _CharT \n     basic_string<_CharT, _Traits, _Alloc>::", "previous_filename": "libstdc++-v3/include/bits/string.tcc"}, {"sha": "eb023df718e0face7748f41b497e074d4bbd317f", "filename": "libstdc++-v3/include/bits/std_string.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h?ref=e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7", "patch": "@@ -1,6 +1,6 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,7 +44,7 @@\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n # include <bits/std_algorithm.h> // for find_if\n-# include <bits/string.tcc> \n+# include <bits/basic_string.tcc> \n #endif\n \n #endif /* _CPP_STRING */"}, {"sha": "9544a824fe9ef576862eb826cdb0ccdc8bf0c8a0", "filename": "libstdc++-v3/include/c_std/bits/std_cwctype.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwctype.h?ref=e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,6 +36,8 @@\n #ifndef _CPP_CWCTYPE\n #define _CPP_CWCTYPE 1\n \n+#include <bits/std_cwchar.h>\n+\n #pragma GCC system_header\n #include <wctype.h>\n "}, {"sha": "18acebe09519c9af01cff18cb1bc09e734f4b09d", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.60 2000/12/21 01:28:57 gdr Exp $\n+## $Id: Makefile.am,v 1.61 2000/12/23 07:13:57 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -76,7 +76,7 @@ INCLUDES = \\\n \n base_headers = \\\n \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n-\tbits/basic_string.h bits/std_string.h  bits/string.tcc \\\n+\tbits/std_string.h bits/basic_string.h bits/basic_string.tcc \\\n \tbits/generic_shadow.h bits/std_utility.h \\\n \tbits/std_complex.h \\\n \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\"}, {"sha": "cdb547cebc132875f581461254d74f18d6d831e1", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7", "patch": "@@ -148,7 +148,7 @@ TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\t\n \n \n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/std_string.h bits/basic_string.h bits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n \n \n backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream"}, {"sha": "54e5f4a509187214d7eb4353dba1796b3749befd", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 14, "deletions": 186, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=e61c3e8cde7eaa6875d5f60862d071ad7dd14ce7", "patch": "@@ -1,6 +1,6 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 2000, 1999, 1998, 1997 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,217 +35,45 @@\n // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers.\n \n #include <bits/std_string.h>\n-#include <bits/std_algorithm.h>\n \n // Instantiation configuration.\n #ifndef C\n # define C char\n-# define _GLIBCPP_INSTANTIATING_CHAR 1\n #endif\n \n namespace std \n {\n   typedef basic_string<C> S;\n \n-  template C S::_Rep::_S_terminal;\n-  template const S::size_type S::npos;\n-  template S::size_type S::_Rep::_S_max_size;\n-  template S::size_type S::_S_empty_rep_storage[];\n-  template S::_Rep* S::_Rep::_S_create(size_t, S::allocator_type const&);\n-  template void S::_Rep::_M_destroy(const S::allocator_type&) throw();\n-  template void __destroy_aux(S*, S*, __false_type);\n+  template class basic_string<C>;\n \n-  template S::basic_string(S const&);\n-\n-  template \n-    S::basic_string(S::size_type, C, const S::allocator_type&);\n-\n-  template \n-    S::basic_string(const S::allocator_type&);\n-\n-  template \n-    S::basic_string(const S&, S::size_type, S::size_type);\n-\n-  template \n-    S::basic_string(const S&, S::size_type, S::size_type, \n-\t\t    const S::allocator_type&);\n-\n-  template \n-    S::basic_string(C const*, S::size_type, const S::allocator_type&);\n-\n-  template \n-    S::basic_string(C const*, S::allocator_type const&);\n-\n-  template \n-    S::basic_string(C*, C*, const allocator<C>&);\n-\n-  template \n-    S::basic_string(S::iterator, S::iterator, const allocator<C>&);\n-\n-  template\n-    void S::_M_leak_hard();\n-\n-  template\n-    void S::_M_mutate(S::size_type, S::size_type, S::size_type);\n-\n-  template\n-    C* S::_Rep::_M_clone(S::allocator_type const&, S::size_type);\n-\n-  template\n-    void S::reserve(S::size_type);\n-\n-  template\n-    void S::swap(S&);\n-\n-# ifdef _GLIBCPP_ALLOC_CONTROL\n-    template\n-      bool (* S::_Rep::_S_excess_slop)(size_t, size_t); \n-\n-    template\n-      bool S::_Rep::_S_default_excess(size_t, size_t); \n-# endif\n-\n-  template\n-    void S::resize(S::size_type, C);\n-\n-  template\n-    S& S::append(S const&);\n-\n-  template\n-    S& S::append(S const&, S::size_type, S::size_type);\n-\n-  template\n-    S& S::append(C const*, S::size_type);\n-\n-  template\n-    S& S::append(S::size_type, C);\n-\n-  template \n-    S& \n-    S::append<S::iterator>(S::iterator, S::iterator);\n-\n-  template\n-    S& \n-    S::assign(S const&);\n-\n-  template \n-    S& \n-    S::assign<S::iterator>(S::iterator, S::iterator);\n-\n-  template \n-    void\n-    S::insert<S::iterator> //c*\n-    (S::iterator, S::iterator, S::iterator); //it, c+, c+ and temptype = char*\n-\n-  template\n-    S& S::replace(S::size_type, S::size_type, S const&, \n-\t\t  S::size_type, S::size_type);\n-\n-  template \n-    S& S::replace(S::iterator, S::iterator, S::size_type, C);\n-\n-  template \n-    S&\n-    S::replace<S::iterator> // c*\n-    (S::iterator, S::iterator, S::iterator, S::iterator); //it, it, c+, c+ \n+  template S operator+(const C*, const S&);\n+  template S operator+(C, const S&);\n+  template bool operator==(const S::iterator&, const S::iterator&);\n+  template bool operator==(const S::const_iterator&, const S::const_iterator&);\n \n+  // Only one template keyword allowed here. \n+  // See core issue #46 (NAD)\n+  // http://anubis.dkuug.dk/jtc1/sc22/wg21/docs/cwg_closed.html#46\n   template \n     S& \n     S::_M_replace<S::iterator>\n     (S::iterator, S::iterator, S::iterator, S::iterator, forward_iterator_tag);\n \n-  // Only one template keyword allowed here. \n-  // See core issue #46 (NAD)\n-  // http://anubis.dkuug.dk/jtc1/sc22/wg21/docs/cwg_closed.html#46\n   template \n     S& \n     S::_M_replace<S::const_iterator>\n     (S::iterator, S::iterator, \n      S::const_iterator, S::const_iterator, forward_iterator_tag);\n \n   template \n-    S& \n-    S::_M_replace<C*>\n-    (S::iterator, S::iterator, C*, C*, forward_iterator_tag);\n+    C* \n+    S::_S_construct<S::iterator>\n+    (S::iterator, S::iterator, const allocator<C>&, forward_iterator_tag);\n \n   template \n-    S& \n-    S::_M_replace<const C*>\n-    (S::iterator, S::iterator, const C*, const C*, forward_iterator_tag);\n-\n-  template\n-    S::size_type S::copy(C*, S::size_type, S::size_type) const;\n-\n-  template \n-    C* S::_S_construct<S::iterator>(S::iterator, S::iterator, \n-\t\t\t\t    const allocator<C>&);\n-\n-  template \n-    C* S::_S_construct<S::iterator>(S::iterator, S::iterator, \n-\t\t\t\t    const allocator<C>&, forward_iterator_tag);\n-\n-  template \n-    C* S::_S_construct<C*>(C*, C*, const allocator<C>&, forward_iterator_tag);\n-\n-  template \n-    C* S::_S_construct<const C*>(const C*, const C*, const allocator<C>&, \n-\t\t\t\t forward_iterator_tag);\n-\n-  template \n-    C* S::_S_construct(S::size_type, C, S::allocator_type const&);\n-\n-  template\n-    const C* S::_S_find(const C* __beg, const C* __end, C __c);\n-\n-  template\n-    S::size_type S::find(C, S::size_type) const;\n-\n-  template\n-    S::size_type S::rfind(C const*, S::size_type, S::size_type) const;\n-\n-  template\n-    S::size_type S::rfind(C, S::size_type) const;\n-\n-  template\n-    S::size_type S::find_first_of(C const*, S::size_type, S::size_type) const;\n-\n-  template\n-    S::size_type S::find_last_of(C const*, S::size_type, S::size_type) const;\n-\n-  template\n-    S::size_type \n-    S::find_first_not_of(C const*, S::size_type, S::size_type) const;\n-\n-  template\n-    S::size_type \n-    S::find_last_not_of(C const*, S::size_type, S::size_type) const;\n-\n-  template\n-    S::size_type S::find_last_not_of(C, S::size_type) const;\n-\n-  template\n-    int S::compare(S::size_type, S::size_type, S const&) const;\n-\n-  template\n-    int S::compare(S::size_type, S::size_type, S const&, S::size_type, \n-\t\t   S::size_type) const;\n-\n-  template\n-    int S::compare(C const*) const;\n-\n-  template\n-    int S::compare(S::size_type, S::size_type, C const*, S::size_type) const;\n-\n-  template S operator+(const C*, const S&);\n-\n-  template S operator+(C, const S&);\n-\n-  template bool operator==(const S::iterator&, const S::iterator&);\n-  template bool operator==(const S::const_iterator&, const S::const_iterator&);\n-\n-  template void _S_string_copy(const S&, C*, allocator<C>::size_type);\n-\n-} // std\n+    S::basic_string(S::iterator, S::iterator, const allocator<C>&);\n+} // namespace std\n \n \n "}]}