{"sha": "bdf67bcba3ccc715da89128200d06140943f33b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmNjdiY2JhM2NjYzcxNWRhODkxMjgyMDBkMDYxNDA5NDNmMzNiNA==", "commit": {"author": {"name": "David Li", "email": "davidxl@google.com", "date": "2011-06-09T16:09:23Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2011-06-09T16:09:23Z"}, "message": "Gator cleanup\n\nFrom-SVN: r174848", "tree": {"sha": "4df88ba9bea41f8d545aabd4a90d1d88d969a1e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4df88ba9bea41f8d545aabd4a90d1d88d969a1e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdf67bcba3ccc715da89128200d06140943f33b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf67bcba3ccc715da89128200d06140943f33b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdf67bcba3ccc715da89128200d06140943f33b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf67bcba3ccc715da89128200d06140943f33b4/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d1d0dc8aa325982f4a07d79bce1a5b21e71d4ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1d0dc8aa325982f4a07d79bce1a5b21e71d4ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1d0dc8aa325982f4a07d79bce1a5b21e71d4ab"}], "stats": {"total": 88, "additions": 62, "deletions": 26}, "files": [{"sha": "6e87f93d053c1a72f214dcb5f648dc72682f7d33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdf67bcba3ccc715da89128200d06140943f33b4", "patch": "@@ -1,3 +1,18 @@\n+2011-06-09  David Li  <davidxl@google.com>\n+\n+\t* tree-complex.c (tree_lower_complex): Gate cleanup.\n+\t* tree-stdarg.c (check_all_va_list_escapes): Ditto.\n+\t(execute_optimize_stdarg): Ditto.\n+\t* tree-eh.c (execute_lower_eh_dispatch): Ditto.\n+\t(execute_cleanup_eh_1): Ditto.\n+\t(execute_cleanup_eh): Ditto.\n+\t* gcse.c (gate_rtl_pre): Ditto.\n+\t(execute_rtl_pre): Ditto.\n+\t* except.c (finish_eh_generation): Ditto.\n+\t(convert_to_eh_region_ranges): Ditto.\n+\t* cprop.c (one_cprop_pass): Ditto.\n+\n+\n 2011-06-09  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR target/48673"}, {"sha": "a81a80862ddb31164c8f2237c2ae4028c1a17250", "filename": "gcc/cprop.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=bdf67bcba3ccc715da89128200d06140943f33b4", "patch": "@@ -1843,15 +1843,17 @@ one_cprop_pass (void)\n static bool\n gate_rtl_cprop (void)\n {\n-  return optimize > 0 && flag_gcse\n-    && !cfun->calls_setjmp\n-    && dbg_cnt (cprop);\n+  return optimize > 0 && flag_gcse;\n }\n \n static unsigned int\n execute_rtl_cprop (void)\n {\n   int changed;\n+\n+  if (cfun->calls_setjmp || !dbg_cnt (cprop))\n+    return 0;\n+\n   delete_unreachable_blocks ();\n   df_set_flags (DF_LR_RUN_DCE);\n   df_analyze ();\n@@ -1882,4 +1884,3 @@ struct rtl_opt_pass pass_rtl_cprop =\n   TODO_verify_flow | TODO_ggc_collect   /* todo_flags_finish */\n  }\n };\n-"}, {"sha": "a8bb7a94d92eae2da1f6eafe49bd956ba11c6e02", "filename": "gcc/except.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=bdf67bcba3ccc715da89128200d06140943f33b4", "patch": "@@ -1440,14 +1440,17 @@ finish_eh_generation (void)\n static bool\n gate_handle_eh (void)\n {\n-  /* Nothing to do if no regions created.  */\n-  return cfun->eh->region_tree != NULL;\n+  return true;\n }\n \n /* Complete generation of exception handling code.  */\n static unsigned int\n rest_of_handle_eh (void)\n {\n+  /* Nothing to do if no regions created.  */\n+  if (cfun->eh->region_tree == NULL)\n+    return 0;\n+\n   finish_eh_generation ();\n   cleanup_cfg (CLEANUP_NO_INSN_DEL);\n   return 0;\n@@ -2392,6 +2395,9 @@ convert_to_eh_region_ranges (void)\n   int min_labelno = 0, max_labelno = 0;\n   int saved_call_site_base = call_site_base;\n \n+  if (cfun->eh->region_tree == NULL)\n+    return 0;\n+\n   crtl->eh.action_record_data = VEC_alloc (uchar, gc, 64);\n \n   ar_hash = htab_create (31, action_record_hash, action_record_eq, free);\n@@ -2643,8 +2649,6 @@ static bool\n gate_convert_to_eh_region_ranges (void)\n {\n   /* Nothing to do for SJLJ exceptions or if no regions created.  */\n-  if (cfun->eh->region_tree == NULL)\n-    return false;\n   if (targetm.except_unwind_info (&global_options) == UI_SJLJ)\n     return false;\n   return true;"}, {"sha": "fd1455f07902b0a1006cbcbeea19f90e00a3157c", "filename": "gcc/gcse.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=bdf67bcba3ccc715da89128200d06140943f33b4", "patch": "@@ -3713,15 +3713,17 @@ static bool\n gate_rtl_pre (void)\n {\n   return optimize > 0 && flag_gcse\n-    && !cfun->calls_setjmp\n-    && optimize_function_for_speed_p (cfun)\n-    && dbg_cnt (pre);\n+         && optimize_function_for_speed_p (cfun);\n }\n \n static unsigned int\n execute_rtl_pre (void)\n {\n   int changed;\n+\n+  if (cfun->calls_setjmp || !dbg_cnt (pre))\n+    return 0;\n+\n   delete_unreachable_blocks ();\n   df_analyze ();\n   changed = one_pre_gcse_pass ();\n@@ -3735,18 +3737,20 @@ static bool\n gate_rtl_hoist (void)\n {\n   return optimize > 0 && flag_gcse\n-    && !cfun->calls_setjmp\n-    /* It does not make sense to run code hoisting unless we are optimizing\n-       for code size -- it rarely makes programs faster, and can make then\n-       bigger if we did PRE (when optimizing for space, we don't run PRE).  */\n-    && optimize_function_for_size_p (cfun)\n-    && dbg_cnt (hoist);\n+        /* It does not make sense to run code hoisting unless we are optimizing\n+         for code size -- it rarely makes programs faster, and can make then\n+         bigger if we did PRE (when optimizing for space, we don't run PRE).  */\n+        && optimize_function_for_size_p (cfun);\n }\n \n static unsigned int\n execute_rtl_hoist (void)\n {\n   int changed;\n+\n+  if (cfun->calls_setjmp || !dbg_cnt (hoist))\n+      return 0;\n+\n   delete_unreachable_blocks ();\n   df_analyze ();\n   changed = one_code_hoisting_pass ();\n@@ -3799,4 +3803,3 @@ struct rtl_opt_pass pass_rtl_hoist =\n };\n \n #include \"gt-gcse.h\"\n-"}, {"sha": "34298517effc1c8f00d473d0f78384efcadc7681", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=bdf67bcba3ccc715da89128200d06140943f33b4", "patch": "@@ -1569,6 +1569,11 @@ tree_lower_complex (void)\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n \n+  /* With errors, normal optimization passes are not run.  If we don't\n+     lower complex operations at all, rtl expansion will abort.  */\n+  if (cfun->curr_properties & PROP_gimple_lcx)\n+    return 0;\n+\n   if (!init_dont_simulate_again ())\n     return 0;\n \n@@ -1634,9 +1639,7 @@ struct gimple_opt_pass pass_lower_complex =\n static bool\n gate_no_optimization (void)\n {\n-  /* With errors, normal optimization passes are not run.  If we don't\n-     lower complex operations at all, rtl expansion will abort.  */\n-  return !(cfun->curr_properties & PROP_gimple_lcx);\n+  return true;\n }\n \n struct gimple_opt_pass pass_lower_complex_O0 ="}, {"sha": "7d27e0c90a7e31c02a851a34cd490633fde25f1c", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=bdf67bcba3ccc715da89128200d06140943f33b4", "patch": "@@ -3234,6 +3234,9 @@ execute_lower_eh_dispatch (void)\n   bool any_rewritten = false;\n   bool redirected = false;\n \n+  if (cfun->eh->region_tree == NULL)\n+    return 0;\n+\n   assign_filter_values ();\n \n   FOR_EACH_BB (bb)\n@@ -3254,7 +3257,7 @@ execute_lower_eh_dispatch (void)\n static bool\n gate_lower_eh_dispatch (void)\n {\n-  return cfun->eh->region_tree != NULL;\n+  return true;\n }\n \n struct gimple_opt_pass pass_lower_eh_dispatch =\n@@ -3983,8 +3986,12 @@ execute_cleanup_eh_1 (void)\n static unsigned int\n execute_cleanup_eh (void)\n {\n-  int ret = execute_cleanup_eh_1 ();\n+  int ret;\n \n+  if (cfun->eh == NULL || cfun->eh->region_tree == NULL)\n+    return 0;\n+\n+  ret = execute_cleanup_eh_1 ();\n   /* If the function no longer needs an EH personality routine\n      clear it.  This exposes cross-language inlining opportunities\n      and avoids references to a never defined personality routine.  */\n@@ -3998,7 +4005,7 @@ execute_cleanup_eh (void)\n static bool\n gate_cleanup_eh (void)\n {\n-  return cfun->eh != NULL && cfun->eh->region_tree != NULL;\n+  return true;\n }\n \n struct gimple_opt_pass pass_cleanup_eh = {"}, {"sha": "7f16092f436dd811f1fb0f827a0879e4cb323139", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf67bcba3ccc715da89128200d06140943f33b4/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=bdf67bcba3ccc715da89128200d06140943f33b4", "patch": "@@ -627,8 +627,7 @@ check_all_va_list_escapes (struct stdarg_info *si)\n static bool\n gate_optimize_stdarg (void)\n {\n-  /* This optimization is only for stdarg functions.  */\n-  return cfun->stdarg != 0;\n+  return true;\n }\n \n \n@@ -645,6 +644,10 @@ execute_optimize_stdarg (void)\n   const char *funcname = NULL;\n   tree cfun_va_list;\n \n+  /* This optimization is only for stdarg functions.  */\n+  if (cfun->stdarg == 0)\n+    return 0;\n+\n   cfun->va_list_gpr_size = 0;\n   cfun->va_list_fpr_size = 0;\n   memset (&si, 0, sizeof (si));"}]}