{"sha": "44370687a54bf3d2cce7a719540d15dc47af84d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzNzA2ODdhNTRiZjNkMmNjZTdhNzE5NTQwZDE1ZGM0N2FmODRkNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-11-12T21:47:13Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-11-12T21:47:13Z"}, "message": "re PR c++/18389 (ICE on struct declaration in for statement)\n\n\tPR c++/18389\n\t* decl.c (start_decl): Make sure to set *pop_scope_p.  Return\n\terror_mark_node to indicate errors.\n\n\tPR c++/18429\n\t* parser.c (cp_parser_direct_declarator): Disallow non-constant\n\tarray bounds when not inside a function.\n\n\tPR c++/18436\n\t* pt.c (tsubst_copy_and_build): Do not do Koenig lookup when an\n\tunqualified name resolves to a member function.\n\n\tPR c++/18407\n\t* pt.c (tsubst_copy_and_build): Handle qualified names used from a\n\tderived class correctly.\n\n\t* decl2.c (import_export_decl): Fix typo in comment.\n\t* tree.c (pod_type_p): Likewise.\n\n\tPR c++/18389\n\t* g++.dg/parse/cond1.C: New test.\n\n\tPR c++/18429\n\t* g++.dg/template/array9.C: New test.\n\t* g++.dg/ext/vla1.C: Adjust error messages.\n\t* g++.dg/ext/vlm1.C: Likewise.\n\t* g++.dg/template/crash2.C: Likewise.\n\n\tPR c++/18436\n\t* g++.dg/template/call3.C: New test.\n\n\tPR c++/18407\n\t* g++.dg/template/ptrmem11.C: New test.\n\nFrom-SVN: r90545", "tree": {"sha": "46dcc9f50bdc840f6ed40ce6cee0a869920f4236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46dcc9f50bdc840f6ed40ce6cee0a869920f4236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44370687a54bf3d2cce7a719540d15dc47af84d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44370687a54bf3d2cce7a719540d15dc47af84d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44370687a54bf3d2cce7a719540d15dc47af84d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44370687a54bf3d2cce7a719540d15dc47af84d4/comments", "author": null, "committer": null, "parents": [{"sha": "cc69336f16a0c9c099d3c155c0e382e667d30938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc69336f16a0c9c099d3c155c0e382e667d30938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc69336f16a0c9c099d3c155c0e382e667d30938"}], "stats": {"total": 136, "additions": 123, "deletions": 13}, "files": [{"sha": "fe51d5b5b5e497fce815d340593be9aaa176d8da", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -1,3 +1,24 @@\n+2004-11-12  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18389\n+\t* decl.c (start_decl): Make sure to set *pop_scope_p.  Return\n+\terror_mark_node to indicate errors.\n+\n+\tPR c++/18429\n+\t* parser.c (cp_parser_direct_declarator): Disallow non-constant\n+\tarray bounds when not inside a function.\n+\n+\tPR c++/18436\n+\t* pt.c (tsubst_copy_and_build): Do not do Koenig lookup when an\n+\tunqualified name resolves to a member function.\n+\n+\tPR c++/18407\n+\t* pt.c (tsubst_copy_and_build): Handle qualified names used from a\n+\tderived class correctly.\n+\t\n+\t* decl2.c (import_export_decl): Fix typo in comment.\n+\t* tree.c (pod_type_p): Likewise.\n+\n 2004-11-10  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* typeck.c (cxx_mark_addressable): Add braces around the first if."}, {"sha": "472b1f92e87292db503ba56597fe91d98ee460e7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -3670,6 +3670,8 @@ start_decl (const cp_declarator *declarator,\n   tree type, tem;\n   tree context;\n \n+  *pop_scope_p = false;\n+ \n   /* This should only be done once on the top most decl.  */\n   if (have_extern_spec)\n     {\n@@ -3690,19 +3692,17 @@ start_decl (const cp_declarator *declarator,\n   deprecated_state = DEPRECATED_NORMAL;\n \n   if (decl == NULL_TREE || TREE_CODE (decl) == VOID_TYPE)\n-    return NULL_TREE;\n+    return error_mark_node;\n \n   type = TREE_TYPE (decl);\n \n   if (type == error_mark_node)\n-    return NULL_TREE;\n+    return error_mark_node;\n \n   context = DECL_CONTEXT (decl);\n \n   if (context)\n     *pop_scope_p = push_scope (context);\n-  else\n-    *pop_scope_p = false;\n   \n   /* We are only interested in class contexts, later.  */\n   if (context && TREE_CODE (context) == NAMESPACE_DECL)"}, {"sha": "d8987e27be0ce3f12668de03342a81f8a3e34668", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -1743,7 +1743,7 @@ import_export_decl (tree decl)\n      vague linkage, maybe_commonize_var is used.\n \n      Therefore, the only declarations that should be provided to this\n-     function are those with external linkage that:\n+     function are those with external linkage that are:\n \n      * implicit instantiations of function templates\n "}, {"sha": "265abdb81e42e60b38ce6b38d07d739a3496387c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -10960,6 +10960,11 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t\t\t\t\t &non_constant_p);\n \t      if (!non_constant_p)\n \t\tbounds = fold_non_dependent_expr (bounds);\n+\t      else if (!at_function_scope_p ())\n+\t\t{\n+\t\t  error (\"array bound is not an integer constant\");\n+\t\t  bounds = error_mark_node;\n+\t\t}\n \t    }\n \t  else\n \t    bounds = NULL_TREE;"}, {"sha": "54c997951edea45cdf569147075868d66c762612", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -8543,7 +8543,11 @@ tsubst_copy_and_build (tree t,\n \t   lookup finds a non-function, in accordance with the\n \t   expected resolution of DR 218.  */\n \tif (koenig_p\n-\t    && (is_overloaded_fn (function)\n+\t    && ((is_overloaded_fn (function)\n+\t\t /* If lookup found a member function, the Koenig lookup is\n+\t\t    not appropriate, even if an unqualified-name was used\n+\t\t    to denote the function.  */\n+\t\t && !DECL_FUNCTION_MEMBER_P (get_first_fn (function)))\n \t\t|| TREE_CODE (function) == IDENTIFIER_NODE))\n \t  function = perform_koenig_lookup (function, call_args);\n \n@@ -8659,9 +8663,14 @@ tsubst_copy_and_build (tree t,\n \t\t\t\t\t    /*is_type_p=*/false,\n \t\t\t\t\t    /*complain=*/false);\n \t    if (BASELINK_P (member))\n-\t      BASELINK_FUNCTIONS (member) \n-\t\t= build_nt (TEMPLATE_ID_EXPR, BASELINK_FUNCTIONS (member),\n-\t\t\t    args);\n+\t      {\n+\t\tBASELINK_FUNCTIONS (member) \n+\t\t  = build_nt (TEMPLATE_ID_EXPR, BASELINK_FUNCTIONS (member),\n+\t\t\t      args);\n+\t\tmember = (adjust_result_of_qualified_name_lookup \n+\t\t\t  (member, BINFO_TYPE (BASELINK_BINFO (member)), \n+\t\t\t   TREE_TYPE (object)));\n+\t      }\n \t    else\n \t      {\n \t\tqualified_name_lookup_error (TREE_TYPE (object), tmpl,"}, {"sha": "82aebe49550e887004b66b5e081e45da9da55848", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -1716,7 +1716,7 @@ pod_type_p (tree t)\n     return 1; /* pointer to member */\n \n   if (TREE_CODE (t) == VECTOR_TYPE)\n-    return 1; /* vectors are (small) arrays if scalars */\n+    return 1; /* vectors are (small) arrays of scalars */\n \n   if (! CLASS_TYPE_P (t))\n     return 0; /* other non-class type (reference or function) */"}, {"sha": "10bac622f8026b22b021eb5bc40c576892b16d7d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -1,3 +1,20 @@\n+2004-11-12  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18389\n+\t* g++.dg/parse/cond1.C: New test.\n+\n+\tPR c++/18429\n+\t* g++.dg/template/array9.C: New test.\n+\t* g++.dg/ext/vla1.C: Adjust error messages.\n+\t* g++.dg/ext/vlm1.C: Likewise.\n+\t* g++.dg/template/crash2.C: Likewise.\n+\n+\tPR c++/18436\n+\t* g++.dg/template/call3.C: New test.\n+\n+\tPR c++/18407\n+\t* g++.dg/template/ptrmem11.C: New test.\n+\n 2004-11-12  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR other/14264"}, {"sha": "f2238c2fdd467cdd1cd84a134a7e86f120641e0c", "filename": "gcc/testsuite/g++.dg/ext/vla1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -19,7 +19,7 @@ class B { B (int); };\n B::B (int i)\n {\n   struct S {\n-    int ar[1][i];  // { dg-error \"variable-size|variably modified\" }\n+    int ar[1][i];  // { dg-error \"array\" }\n   } s;\n \n   s.ar[0][0] = 0;  // { dg-error \"no member\" }"}, {"sha": "9cb6c38be1523c434c4adcf631844a1e88f8aa47", "filename": "gcc/testsuite/g++.dg/ext/vlm1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm1.C?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -4,7 +4,7 @@ template <class T> struct A {};\n  \n struct B {\n   static const int s;\n-  A<int[s]> a; // { dg-error \"variably modified|no type|trying to instantiate\" }\n+  A<int[s]> a; // { dg-error \"array|template\" }\n };\n  \n const int B::s=16;"}, {"sha": "69947730525d1f82eaa75af334f3fc1d63148577", "filename": "gcc/testsuite/g++.dg/parse/cond1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond1.C?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/18389\n+\n+void foo()\n+{\n+  for (; struct A {}; ); // { dg-error \"\" }\n+}"}, {"sha": "f3e8335c943fb2a102fb6b79041d69ff058e7e8f", "filename": "gcc/testsuite/g++.dg/template/array9.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray9.C?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/18429\n+\n+int subtrees = 4;\n+template< class T >\n+struct Tree {\n+  Tree* L[subtrees]; // { dg-error \"\" }\n+  Tree* R[subtrees]; // { dg-error \"\" }\n+  ~Tree()\n+  {\n+    delete [] L[0]; // { dg-error \"\" }\n+    delete [] R[0]; // { dg-error \"\" }\n+  }\n+};\n+\n+void f()\n+{\n+  Tree<int> t;\n+}"}, {"sha": "1dd2b51b3ebf634d3ba87525fcb083d9a182f3d1", "filename": "gcc/testsuite/g++.dg/template/call3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall3.C?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/18436\n+\n+void foo(int);\n+\n+struct A\n+{\n+  static void foo(A);\n+};\n+\n+template <typename T> struct B : T\n+{\n+  B() { foo(T()); }\n+};\n+\n+B<A> b;"}, {"sha": "8bf7b450df256673e4b1217defe3b8da845acd1a", "filename": "gcc/testsuite/g++.dg/template/crash2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash2.C?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -5,7 +5,7 @@ class A\n {\n public:\n   static const EnumType size = max; // { dg-error \"\" }\n-  int table[size];\n+  int table[size]; // { dg-error \"\" }\n };\n template <class EnumType>\n const EnumType A<EnumType>::size;"}, {"sha": "da2ce499fbe6d206da662ca2d3c2e3e6cc1c5fed", "filename": "gcc/testsuite/g++.dg/template/ptrmem11.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44370687a54bf3d2cce7a719540d15dc47af84d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem11.C?ref=44370687a54bf3d2cce7a719540d15dc47af84d4", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/18407\n+\n+template <typename Class>\n+struct the_base{\n+  template <void (Class::*Fn)()> void foo() { }\n+};\n+\n+template <typename T>\n+struct derivedT: the_base<derivedT<T> > {\n+  typedef the_base<derivedT<T> > parent;\n+  void ice(){\n+    this->parent::template foo< &derivedT<T>::ice>();\n+  }\n+};\n+\n+int main() {\n+  derivedT<int> dT;\n+  dT.ice();\n+}"}]}