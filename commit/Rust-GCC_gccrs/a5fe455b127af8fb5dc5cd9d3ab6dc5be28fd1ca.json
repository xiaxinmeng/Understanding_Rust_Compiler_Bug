{"sha": "a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVmZTQ1NWIxMjdhZjhmYjVkYzVjZDlkM2FiNmRjNWJlMjhmZDFjYQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-06-07T17:11:48Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-06-07T17:11:48Z"}, "message": "config.gcc (with_cpu handling): Translate sparc64 in $machine to --with-cpu=v9.\n\n\t* config.gcc (with_cpu handling): Translate sparc64 in\n\t$machine to --with-cpu=v9.\n\t* config/alpha/alpha.c\n\t(TARGET_ASM_GLOBALIZE_LABEL [TARGET_ABI_UNICOSMK]): Correct definition.\n\t(alpha_setup_incoming_varargs): #ifdef out when TARGET_ABI_UNICOSMK.\n\n\t* target.h: New hook asm_out.file_end.\n\t* target.h: Update to match.  New hook macro TARGET_ASM_FILE_END.\n\t* toplev.c (compile_file: Use targetm.asm_out.file_end.\n\t* system.h: Poison ASM_FILE_END.\n\t* varasm.c (file_end_indicate_exec_stack): New.\n\t* output.h: Prototype it.\n\t* doc/tm.texi: Document TARGET_ASM_FILE_END and\n\tfile_end_indicate_exec_stack.  Delete references to attasm.h.\n\n\t* config/darwin.h (TARGET_ASM_FILE_END): Reset to darwin_file_end.\n\t(ASM_FILE_END): Delete; move code...\n\t* config/darwin.c (darwin_file_end): Here; new function.\n\t* config/darwin-protos.h: Prototype it.\n\t* config/alpha/alpha.c (unicosmk_asm_file_end): Make static,\n\trename unicosmk_file_end.\n\t* config/arm/aof.h (ASM_FILE_END): Delete; move code...\n\t* config/arm/arm.c (aof_file_end): ... here; new static function.\n\tSet TARGET_ASM_FILE_END to aof_file_end if AOF_ASSEMBLER.\n\tMake aof_dump_imports and aof_dump_pic_table static.\n\t* config/avr/avr.c (asm_file_end): Rename avr_file_end, make static.\n\tSet TARGET_ASM_FILE_END to avr_file_end.\n\t* config/c4x/c4x.c (c4x_file_end): Make static.  Take no arguments.\n\tSet TARGET_ASM_FILE_END to c4x_file_end.\n\t* config/h8300/h8300.c (asm_file_end): Rename h8300_file_end,\n\tmake static. Take no arguments.  Set TARGET_ASM_FILE_END to\n\th8300_file_end.\n\t* config/i370/i370.h (ASM_FILE_END): Delete; move code...\n\t* config/i370/i370.c (i370_file_end): ... here; new static function.\n\tSet TARGET_ASM_FILE_END to i370_file_end.\n\t * config/i386/i386.c (ix86_asm_file_end): Rename ix86_file_end.\n\t Take no arguments.  Call file_end_indicate_exec_stack if\n\t NEED_INDICATE_EXEC_STACK; don't use SUBTARGET_FILE_END.\n\t* config/i386/i386.h: Set TARGET_ASM_FILE_END, not ASM_FILE_END.\n\tDefine NEED_INDICATE_EXEC_STACK to 0.\n\t* config/i386/linux.h, config/i386/linux64.h: Redefine\n\tNEED_INDICATE_EXEC_STACK to 1 instead of setting SUBTARGET_FILE_END.\n\t* config/i386/winnt.c (i386_pe_asm_file_end): Rename to\n\ti386_pe_file_end.  Take no arguments.  Use ix86_file_end.\n\t* config/ia64/ia64.c (ia64_hpux_asm_file_end): Rename to\n\tia64_hpux_file_end, make static.  Take no arguments.\n\t* config/ip2k/ip2k.c (asm_file_start, asm_file_end,\n\tcommands_in_prologues, commands_in_epilogues): Delete.\n\t(function_epilogue): Update to match.\n\t* config/mips/mips.c (mips_asm_file_end): Rename mips_file_end,\n\tmake static.  Take no arguments.\n\t(iris6_asm_file_end): Rename iris6_file_end, make static, use\n\tmips_file_end, take no arguments.\n\tSet TARGET_ASM_FILE_END to iris6_file_end or mips_file_end as\n\tappropriate.\n\t* config/mmix/mmix.c (mmix_asm_file_end): Rename mmix_file_end,\n\tmake static, take no arguments. Set TARGET_ASM_FILE_END to\n\tmmix_file_end.\n\t* config/pa/pa.c (output_deferred_plabels): Make static, take\n\tno arguments.  Set TARGET_ASM_FILE_END to output_deferred_plabels.\n\t* config/rs6000/xcoff.h (TARGET_ASM_FILE_END): Set it.\n\t(ASM_FILE_END): Delete; move code...\n\t* config/rs6000/rs6000.c (rs6000_xcoff_file_end): ... here;\n\tnew static function.\n\n\t* config/avr/avr.h, config/cris/cris.h, config/h8300/h8300.h\n\t* config/mmix/mmix.h, config/mips/iris6.h, config/mips/mips.h:\n\tDon't set ASM_FILE_END.\n\t* config/alpha/linux-elf.h, config/m68k/linux.h, config/rs6000/linux.h\n\t* config/rs6000/linux64.h, config/s390/linux.h, config/sparc/linux.h\n\t* config/sparc/linux64.h: Set TARGET_ASM_FILE_END to\n\tfile_end_indicate_exec_stack; don't set ASM_FILE_END.\n\t* config/alpha/unicosmk.h, config/i386/cygming.h\n\t* config/ia64/hpux.h: Set TARGET_ASM_FILE_END, not ASM_FILE_END.\n\t* config/arm/arm-protos.h, config/alpha/alpha-protos.h\n\t* config/avr/avr-protos.h, config/c4x/c4x-protos.h\n\t* config/h8300/h8300-protos.h, config/ia64/ia64-protos.h\n\t* config/ip2k/ip2k-protos.h, config/mips/mips-protos.h\n\t* config/mmix/mmix-protos.h, config/pa/pa-protos.h: Update.\n\nFrom-SVN: r67591", "tree": {"sha": "5cbfa1577846baa2ae7113e0bfe1c69f229374a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cbfa1577846baa2ae7113e0bfe1c69f229374a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/comments", "author": null, "committer": null, "parents": [{"sha": "da2d4c012ebc05c4a7805b03613e50ed4e55dbd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2d4c012ebc05c4a7805b03613e50ed4e55dbd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2d4c012ebc05c4a7805b03613e50ed4e55dbd1"}], "stats": {"total": 598, "additions": 310, "deletions": 288}, "files": [{"sha": "2b58ad4f1ee4fd8999b228a5c70c0c74cba9b85c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 87, "deletions": 5, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -1,3 +1,85 @@\n+2003-06-07  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config.gcc (with_cpu handling): Translate sparc64 in\n+\t$machine to --with-cpu=v9.\n+\t* config/alpha/alpha.c\n+\t(TARGET_ASM_GLOBALIZE_LABEL [TARGET_ABI_UNICOSMK]): Correct definition.\n+\t(alpha_setup_incoming_varargs): #ifdef out when TARGET_ABI_UNICOSMK.\n+\n+\t* target.h: New hook asm_out.file_end.\n+\t* target.h: Update to match.  New hook macro TARGET_ASM_FILE_END.\n+\t* toplev.c (compile_file: Use targetm.asm_out.file_end.\n+\t* system.h: Poison ASM_FILE_END.\n+\t* varasm.c (file_end_indicate_exec_stack): New.\n+\t* output.h: Prototype it.\n+\t* doc/tm.texi: Document TARGET_ASM_FILE_END and\n+\tfile_end_indicate_exec_stack.  Delete references to attasm.h.\n+\n+\t* config/darwin.h (TARGET_ASM_FILE_END): Reset to darwin_file_end.\n+\t(ASM_FILE_END): Delete; move code...\n+\t* config/darwin.c (darwin_file_end): Here; new function.\n+\t* config/darwin-protos.h: Prototype it.\n+\t* config/alpha/alpha.c (unicosmk_asm_file_end): Make static,\n+\trename unicosmk_file_end.\n+\t* config/arm/aof.h (ASM_FILE_END): Delete; move code...\n+\t* config/arm/arm.c (aof_file_end): ... here; new static function.\n+\tSet TARGET_ASM_FILE_END to aof_file_end if AOF_ASSEMBLER.\n+\tMake aof_dump_imports and aof_dump_pic_table static.\n+\t* config/avr/avr.c (asm_file_end): Rename avr_file_end, make static.\n+\tSet TARGET_ASM_FILE_END to avr_file_end.\n+\t* config/c4x/c4x.c (c4x_file_end): Make static.  Take no arguments.\n+\tSet TARGET_ASM_FILE_END to c4x_file_end.\n+\t* config/h8300/h8300.c (asm_file_end): Rename h8300_file_end,\n+\tmake static. Take no arguments.  Set TARGET_ASM_FILE_END to\n+\th8300_file_end.\n+\t* config/i370/i370.h (ASM_FILE_END): Delete; move code...\n+\t* config/i370/i370.c (i370_file_end): ... here; new static function.\n+\tSet TARGET_ASM_FILE_END to i370_file_end.\n+\t * config/i386/i386.c (ix86_asm_file_end): Rename ix86_file_end.\n+\t Take no arguments.  Call file_end_indicate_exec_stack if\n+\t NEED_INDICATE_EXEC_STACK; don't use SUBTARGET_FILE_END.\n+\t* config/i386/i386.h: Set TARGET_ASM_FILE_END, not ASM_FILE_END.\n+\tDefine NEED_INDICATE_EXEC_STACK to 0.\n+\t* config/i386/linux.h, config/i386/linux64.h: Redefine\n+\tNEED_INDICATE_EXEC_STACK to 1 instead of setting SUBTARGET_FILE_END.\n+\t* config/i386/winnt.c (i386_pe_asm_file_end): Rename to\n+\ti386_pe_file_end.  Take no arguments.  Use ix86_file_end.\n+\t* config/ia64/ia64.c (ia64_hpux_asm_file_end): Rename to\n+\tia64_hpux_file_end, make static.  Take no arguments.\n+\t* config/ip2k/ip2k.c (asm_file_start, asm_file_end,\n+\tcommands_in_prologues, commands_in_epilogues): Delete.\n+\t(function_epilogue): Update to match.\n+\t* config/mips/mips.c (mips_asm_file_end): Rename mips_file_end,\n+\tmake static.  Take no arguments.\n+\t(iris6_asm_file_end): Rename iris6_file_end, make static, use\n+\tmips_file_end, take no arguments.\n+\tSet TARGET_ASM_FILE_END to iris6_file_end or mips_file_end as\n+\tappropriate.\n+\t* config/mmix/mmix.c (mmix_asm_file_end): Rename mmix_file_end,\n+\tmake static, take no arguments. Set TARGET_ASM_FILE_END to\n+\tmmix_file_end.\n+\t* config/pa/pa.c (output_deferred_plabels): Make static, take\n+\tno arguments.  Set TARGET_ASM_FILE_END to output_deferred_plabels.\n+\t* config/rs6000/xcoff.h (TARGET_ASM_FILE_END): Set it.\n+\t(ASM_FILE_END): Delete; move code...\n+\t* config/rs6000/rs6000.c (rs6000_xcoff_file_end): ... here;\n+\tnew static function.\n+\n+\t* config/avr/avr.h, config/cris/cris.h, config/h8300/h8300.h\n+\t* config/mmix/mmix.h, config/mips/iris6.h, config/mips/mips.h:\n+\tDon't set ASM_FILE_END.\n+\t* config/alpha/linux-elf.h, config/m68k/linux.h, config/rs6000/linux.h\n+\t* config/rs6000/linux64.h, config/s390/linux.h, config/sparc/linux.h\n+\t* config/sparc/linux64.h: Set TARGET_ASM_FILE_END to\n+\tfile_end_indicate_exec_stack; don't set ASM_FILE_END.\n+\t* config/alpha/unicosmk.h, config/i386/cygming.h\n+\t* config/ia64/hpux.h: Set TARGET_ASM_FILE_END, not ASM_FILE_END.\n+\t* config/arm/arm-protos.h, config/alpha/alpha-protos.h\n+\t* config/avr/avr-protos.h, config/c4x/c4x-protos.h\n+\t* config/h8300/h8300-protos.h, config/ia64/ia64-protos.h\n+\t* config/ip2k/ip2k-protos.h, config/mips/mips-protos.h\n+\t* config/mmix/mmix-protos.h, config/pa/pa-protos.h: Update.\n+\n Sat Jun  7 18:32:13 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.h (OPTION_DEFAULT_SPECS): Avoid -mcpu default when -march is\n@@ -312,18 +394,18 @@ Thu Jun  5 13:23:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n 2003-06-05  Nick Clifton  <nickc@redhat.com>\n \n \t* config.gcc (m32r-elf): Revert previous delta.\n-        * config/m32r/t-m32r (crtinit.o): Fix rule to work with\n-        multilibs.  Remove m32rx specific version.\n-        (crtfini.o): Likewise.\n-        (EXTRA_MULTILIB_PARTS): Define.\n+\t* config/m32r/t-m32r (crtinit.o): Fix rule to work with\n+\tmultilibs.  Remove m32rx specific version.\n+\t(crtfini.o): Likewise.\n+\t(EXTRA_MULTILIB_PARTS): Define.\n \n 2003-06-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* doc/md.texi (Machine Constraints): Correct the meaning of\n \tconstraints related to floating-point registers on SPARC.\n \n 2003-06-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n-            Paolo Bonzini  <bonzini@gnu.org>\n+\t    Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR target/10663\n \t* configure.in (HAVE_LD_RO_RW_SECTION_MIXING): Redirect"}, {"sha": "f01209f6b11e22b224f131b4c2578de5c154771b", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -2226,6 +2226,9 @@ then\n \t\t\t;;\n \t\tsparc*-*-*)\n \t\t\twith_cpu=\"`echo $machine | sed 's/-.*$//'`\"\n+\t\t\tif [ x$with_cpu = xsparc64 ]; then\n+\t\t\t\twith_cpu=v9\n+\t\t\tfi\n \t\t\t;;\n \t\tesac\n \tfi"}, {"sha": "460207b6b5dc075dcb42e131670a46b1265ec522", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -180,6 +180,5 @@ extern void unicosmk_output_align PARAMS ((FILE *, int));\n extern char * unicosmk_text_section PARAMS ((void));\n extern char * unicosmk_data_section PARAMS ((void));\n extern void unicosmk_asm_file_start PARAMS ((FILE *));\n-extern void unicosmk_asm_file_end PARAMS ((FILE *));\n extern void unicosmk_output_common PARAMS ((FILE *, const char *, int, int));\n #endif /* TARGET_ABI_UNICOSMK */"}, {"sha": "1da140e5fc7e682220b869ee2440b2496d3c2ae6", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -269,6 +269,7 @@ static void unicosmk_output_deferred_case_vectors PARAMS ((FILE *));\n static void unicosmk_gen_dsib PARAMS ((unsigned long *imaskP));\n static void unicosmk_output_ssib PARAMS ((FILE *, const char *));\n static int unicosmk_need_dex PARAMS ((rtx));\n+static void unicosmk_file_end PARAMS ((void));\n \n /* Get the number of args of a function in one of two ways.  */\n #if TARGET_ABI_OPEN_VMS || TARGET_ABI_UNICOSMK\n@@ -309,7 +310,7 @@ static void unicosmk_unique_section PARAMS ((tree, int));\n # undef TARGET_ASM_UNIQUE_SECTION\n # define TARGET_ASM_UNIQUE_SECTION unicosmk_unique_section\n # undef TARGET_ASM_GLOBALIZE_LABEL\n-# define TARGET_ASM_GLOBALIZE_LABEL hook_FILEptr_constcharptr_void\n+# define TARGET_ASM_GLOBALIZE_LABEL hook_void_FILEptr_constcharptr\n #endif\n \n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -6398,7 +6399,7 @@ alpha_build_va_list ()\n    not the most efficient way to implement varargs with just one register\n    class, but it isn't worth doing anything more efficient in this rare\n    case.  */\n-\n+#ifndef TARGET_ABI_UNICOSMK\n void   \n alpha_setup_incoming_varargs(cum, mode, type, pretend_size, no_rtl)\n      CUMULATIVE_ARGS cum;\n@@ -6430,6 +6431,7 @@ alpha_setup_incoming_varargs(cum, mode, type, pretend_size, no_rtl)\n      }\n   *pretend_size = 12 * UNITS_PER_WORD;\n }\n+#endif\n \n void\n alpha_va_start (valist, nextarg)\n@@ -9663,24 +9665,23 @@ unicosmk_asm_file_start (file)\n /* Output text to appear at the end of an assembler file. This includes all\n    pending extern declarations and DEX expressions.  */\n \n-void\n-unicosmk_asm_file_end (file)\n-      FILE *file;\n+static void\n+unicosmk_file_end ()\n {\n-  fputs (\"\\t.endp\\n\\n\", file);\n+  fputs (\"\\t.endp\\n\\n\", asm_out_file);\n \n   /* Output all pending externs.  */\n \n-  unicosmk_output_externs (file);\n+  unicosmk_output_externs (asm_out_file);\n \n   /* Output dex definitions used for functions whose names conflict with \n      register names.  */\n \n-  unicosmk_output_dex (file);\n+  unicosmk_output_dex (asm_out_file);\n \n-  fputs (\"\\t.end\\t\", file);\n-  unicosmk_output_module_name (file);\n-  putc ('\\n', file);\n+  fputs (\"\\t.end\\t\", asm_out_file);\n+  unicosmk_output_module_name (asm_out_file);\n+  putc ('\\n', asm_out_file);\n }\n \n /* Output the definition of a common variable.  */\n@@ -9985,7 +9986,7 @@ unicosmk_ssib_name ()\n   x = XEXP (x, 0);\n   if (GET_CODE (x) != SYMBOL_REF)\n     abort ();\n-  fnname = default_name_encoding (XSTR (x, 0));\n+  fnname = XSTR (x, 0);\n \n   len = strlen (fnname);\n   if (len + SSIB_PREFIX_LEN > 255)"}, {"sha": "f3f1d6723b5c313f331d9fe9607ada87ad1054ba", "filename": "gcc/config/alpha/linux-elf.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Falpha%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Falpha%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux-elf.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -42,9 +42,4 @@ Boston, MA 02111-1307, USA.  */\n #define LIB_SPEC \\\n \"%{pthread:-lpthread} %{shared:-lc}%{!shared:%{profile:-lc_p}%{!profile:-lc}} \"\n \n-#define ASM_FILE_END(FILE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    named_section_flags (\".note.GNU-stack\",\t\t\t\t\\\n-\t\t\t SECTION_DEBUG\t\t\t\t\t\\\n-\t\t\t | (trampolines_created ? SECTION_CODE : 0));\t\\\n-  } while (0)\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack"}, {"sha": "fc0a9703d920d806fbd43e756ce9fae14049e065", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -342,8 +342,7 @@ ssib_section ()\t\t\t\\\n \n /* This outputs text to go at the end of an assembler file.  */\n \n-#undef ASM_FILE_END\n-#define ASM_FILE_END(FILE)\tunicosmk_asm_file_end (FILE)\n+#define TARGET_ASM_FILE_END\tunicosmk_file_end\n \n /* We take care of that in ASM_FILE_START.  */\n "}, {"sha": "82749ffff8107e847239920386f2844e80848e35", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -170,15 +170,6 @@ do {\t\t\t\t\t\\\n #define NAME__MAIN \"__gccmain\"\n #define SYMBOL__MAIN __gccmain\n \n-#define ASM_FILE_END(STREAM)\t\t\\\n-do\t\t\t\t\t\\\n-{\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\\\n-    aof_dump_pic_table (STREAM);\t\\\n-  aof_dump_imports (STREAM);\t\t\\\n-  fputs (\"\\tEND\\n\", (STREAM));\t\t\\\n-} while (0);\n-\n #define ASM_COMMENT_START \";\"\n \n #define ASM_APP_ON \"\""}, {"sha": "43de1d98e7b9793fb62a0631811a2d911738585f", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -158,12 +158,10 @@ extern int    arm_function_arg_pass_by_reference PARAMS ((CUMULATIVE_ARGS *,\n \n #if defined AOF_ASSEMBLER \n extern rtx    aof_pic_entry\t\tPARAMS ((rtx));\n-extern void   aof_dump_pic_table\tPARAMS ((FILE *));\n extern char * aof_text_section\t\tPARAMS ((void));\n extern char * aof_data_section\t\tPARAMS ((void));\n extern void   aof_add_import\t\tPARAMS ((const char *));\n extern void   aof_delete_import\t\tPARAMS ((const char *));\n-extern void   aof_dump_imports\t\tPARAMS ((FILE *));\n extern void   zero_init_section\t\tPARAMS ((void));\n extern void   common_section\t\tPARAMS ((void));\n #endif /* AOF_ASSEMBLER */"}, {"sha": "5b089e4b44abb6a53162a8e08d379c88c718f15b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -147,6 +147,9 @@ static void\t arm_encode_section_info\tPARAMS ((tree, rtx, int));\n #endif\n #ifdef AOF_ASSEMBLER\n static void\t aof_globalize_label\t\tPARAMS ((FILE *, Ccstar));\n+static void\t aof_dump_imports\t\tPARAMS ((FILE *));\n+static void\t aof_dump_pic_table\t\tPARAMS ((FILE *));\n+static void\t aof_file_end\t\t\tPARAMS ((void));\n #endif\n \n #undef Hint\n@@ -172,6 +175,8 @@ static void\t aof_globalize_label\t\tPARAMS ((FILE *, Ccstar));\n #define TARGET_ASM_ALIGNED_SI_OP \"\\tDCD\\t\"\n #undef TARGET_ASM_GLOBALIZE_LABEL\n #define TARGET_ASM_GLOBALIZE_LABEL aof_globalize_label\n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END aof_file_end\n #else\n #undef  TARGET_ASM_ALIGNED_SI_OP\n #define TARGET_ASM_ALIGNED_SI_OP NULL\n@@ -12080,7 +12085,7 @@ aof_delete_import (name)\n \n int arm_main_function = 0;\n \n-void\n+static void\n aof_dump_imports (f)\n      FILE * f;\n {\n@@ -12113,6 +12118,15 @@ aof_globalize_label (stream, name)\n   if (! strcmp (name, \"main\"))\n     arm_main_function = 1;\n }\n+\n+static void\n+aof_file_end ()\n+{\n+  if (flag_pic)\n+    aof_dump_pic_table (asm_out_file);\n+  aof_dump_imports (asm_out_file);\n+  fputs (\"\\tEND\\n\", asm_out_file);\n+}\n #endif /* AOF_ASSEMBLER */\n \n #ifdef OBJECT_FORMAT_ELF"}, {"sha": "f49538875718f55971ab032d0db1dd5b227a639f", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -23,7 +23,6 @@\n \n extern int    function_arg_regno_p              PARAMS ((int r));\n extern void   asm_file_start                    PARAMS ((FILE *file));\n-extern void   asm_file_end                      PARAMS ((FILE *file));\n extern void   avr_init_once                     PARAMS ((void));\n extern void   avr_override_options              PARAMS ((void));\n extern void   avr_optimization_options\t\tPARAMS ((int level, int size));"}, {"sha": "fe883f9d3f9d0a1b48fc75e34e9c54a177a64514", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -63,6 +63,7 @@ static tree   avr_handle_progmem_attribute PARAMS ((tree *, tree, tree, int, boo\n static tree   avr_handle_fndecl_attribute PARAMS ((tree *, tree, tree, int, bool *));\n const struct attribute_spec avr_attribute_table[];\n static bool   avr_assemble_integer PARAMS ((rtx, unsigned int, int));\n+static void   avr_file_end PARAMS ((void));\n static void   avr_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void   avr_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void   avr_unique_section PARAMS ((tree, int));\n@@ -218,6 +219,8 @@ int avr_case_values_threshold = 30000;\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n #undef TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER avr_assemble_integer\n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END avr_file_end\n \n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE avr_output_function_prologue\n@@ -4918,13 +4921,12 @@ asm_file_start (file)\n /* Outputs to the stdio stream FILE some\n    appropriate text to go at the end of an assembler file.  */\n \n-void\n-asm_file_end (file)\n-     FILE *file;\n+static void\n+avr_file_end ()\n {\n-  fputs (\"/* File \", file);\n-  output_quoted_string (file, main_input_filename);\n-  fprintf (file,\n+  fputs (\"/* File \", asm_out_file);\n+  output_quoted_string (asm_out_file, main_input_filename);\n+  fprintf (asm_out_file,\n \t   \": code %4d = 0x%04x (%4d), prologues %3d, epilogues %3d */\\n\",\n \t   commands_in_file,\n \t   commands_in_file,"}, {"sha": "3d09c00b9c0a739a8784d49efbbb58a3c27d924c", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -1699,17 +1699,6 @@ progmem_section ()\t\t\t\t\t\t\t      \\\n    On systems that use SDB, it is necessary to output certain\n    commands; see `attasm.h'.  */\n \n-#define ASM_FILE_END(STREAM) asm_file_end (STREAM)\n-/* A C expression which outputs to the stdio stream STREAM some\n-   appropriate text to go at the end of an assembler file.\n-\n-   If this macro is not defined, the default is to output nothing\n-   special at the end of the file.  Most systems don't require any\n-   definition.\n-\n-   On systems that use SDB, it is necessary to output certain\n-   commands; see `attasm.h'.  */\n-\n #define ASM_COMMENT_START \" ; \"\n /* A C string constant describing how to begin a comment in the target\n    assembler language.  The compiler assumes that the comment will"}, {"sha": "458019c1d7498ba165228dc57623d79b45d2af87", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -43,8 +43,6 @@ extern void c4x_global_label (const char *);\n \n extern void c4x_external_ref (const char *);\n \n-extern void c4x_file_end (FILE *);\n-\n #ifdef TREE_CODE\n extern void c4x_function_arg_advance PARAMS ((CUMULATIVE_ARGS *, \n \t\t\t\t\t      enum machine_mode, tree, int));"}, {"sha": "e708521e50967491a68a5899bf85312350a52b4a", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -186,6 +186,7 @@ static int c4x_valid_operands PARAMS ((enum rtx_code, rtx *,\n \t\t\t\t       enum machine_mode, int));\n static int c4x_arn_reg_operand PARAMS ((rtx, enum machine_mode, unsigned int));\n static int c4x_arn_mem_operand PARAMS ((rtx, enum machine_mode, unsigned int));\n+static void c4x_file_end PARAMS ((void));\n static void c4x_check_attribute PARAMS ((const char *, tree, tree, tree *));\n static int c4x_r11_set_p PARAMS ((rtx));\n static int c4x_rptb_valid_p PARAMS ((rtx, rtx));\n@@ -207,6 +208,8 @@ static int c4x_address_cost PARAMS ((rtx));\n #define TARGET_ASM_ALIGNED_HI_OP NULL\n #undef TARGET_ASM_ALIGNED_SI_OP\n #define TARGET_ASM_ALIGNED_SI_OP NULL\n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END c4x_file_end\n \n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE c4x_attribute_table\n@@ -4562,22 +4565,21 @@ c4x_external_ref (name)\n }\n \n \n-void\n-c4x_file_end (fp)\n-     FILE *fp;\n+static void\n+c4x_file_end ()\n {\n   struct name_list *p;\n   \n   /* Output all external names that are not global.  */\n   p = extern_head;\n   while (p)\n     {\n-      fprintf (fp, \"\\t.ref\\t\");\n-      assemble_name (fp, p->name);\n-      fprintf (fp, \"\\n\");\n+      fprintf (asm_out_file, \"\\t.ref\\t\");\n+      assemble_name (asm_out_file, p->name);\n+      fprintf (asm_out_file, \"\\n\");\n       p = p->next;\n     }\n-  fprintf (fp, \"\\t.end\\n\");\n+  fprintf (asm_out_file, \"\\t.end\\n\");\n }\n \n "}, {"sha": "bea00ffa1c6de0efa002f38f08d700eb1fdc82a0", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -1602,9 +1602,6 @@ c4x_external_ref (NAME)\n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN) \\\n c4x_external_ref (XSTR (FUN, 0))\n \n-#define\tASM_FILE_END(FILE) \\\n-c4x_file_end (FILE)\n-\n /* The prefix to add to user-visible assembler symbols.  */\n \n #define USER_LABEL_PREFIX \"_\""}, {"sha": "cc9d43e5980165685d8c262c13f0c9c53fb16bb6", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -1410,10 +1410,6 @@ call_ ## FUNC (void)\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Override previous definitions (elfos.h).  */\n-#undef ASM_FILE_END\n-#define ASM_FILE_END(STREAM)\n-\n /* We don't want an .ident for gcc.  To avoid that but still support\n    #ident, we override ASM_OUTPUT_IDENT and, since the gcc .ident is its\n    only use besides ASM_OUTPUT_IDENT, undef IDENT_ASM_OP from elfos.h.  */"}, {"sha": "ad8b2340ae6ebd27a8c9185892f446d9540d7bdb", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -78,6 +78,8 @@ extern void darwin_pragma_ignore PARAMS ((struct cpp_reader *));\n extern void darwin_pragma_options PARAMS ((struct cpp_reader *));\n extern void darwin_pragma_unused PARAMS ((struct cpp_reader *));\n \n+extern void darwin_file_end PARAMS ((void));\n+\n /* Expanded by EXTRA_SECTION_FUNCTIONS into varasm.o.  */\n extern void const_section PARAMS ((void));\n extern void const_data_section PARAMS ((void));"}, {"sha": "c17fc74ba087e48aa666a1dacc39728797377cb0", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -1374,5 +1374,17 @@ darwin_asm_output_dwarf_delta (file, size, lab1, lab2)\n     fprintf (file, \"\\n\\t.long L$set$%d\", darwin_dwarf_label_counter++);\n }\n \n+void\n+darwin_file_end ()\n+{\n+  machopic_finish (asm_out_file);\n+  if (strcmp (lang_hooks.name, \"GNU C++\") == 0)\n+    {\n+      constructor_section ();\n+      destructor_section ();\n+      ASM_OUTPUT_ALIGN (asm_out_file, 1);\n+    }\n+}\n+\n #include \"gt-darwin.h\"\n "}, {"sha": "eebb0ee12c62b57d1ed91ced7b3aa13d7d86dc7e", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -330,17 +330,8 @@ do { text_section ();\t\t\t\t\t\t\t\\\n #undef\tASM_FILE_START\n #define ASM_FILE_START(FILE)\n \n-#undef\tASM_FILE_END\n-#define ASM_FILE_END(FILE)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    machopic_finish (asm_out_file);                             \\\n-    if (strcmp (lang_hooks.name, \"GNU C++\") == 0)\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tconstructor_section ();\t\t\t\t\t\\\n-\tdestructor_section ();\t\t\t\t\t\\\n-\tASM_OUTPUT_ALIGN (FILE, 1);\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-  } while (0)\n+#undef  TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END darwin_file_end\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n   fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", SIZE)"}, {"sha": "025f42311318c6f75935d89579a81bbc361b2aa8", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -95,7 +95,6 @@ extern void h8300_expand_prologue PARAMS ((void));\n extern void h8300_expand_epilogue PARAMS ((void));\n extern int h8300_current_function_interrupt_function_p PARAMS ((void));\n extern void asm_file_start PARAMS ((FILE *));\n-extern void asm_file_end PARAMS ((FILE *));\n extern int h8300_initial_elimination_offset PARAMS ((int, int));\n \n struct cpp_reader;"}, {"sha": "ae01d281795609637cd81bf69bdf948a9494f443", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -63,6 +63,7 @@ static tree h8300_handle_eightbit_data_attribute PARAMS ((tree *, tree, tree, in\n static tree h8300_handle_tiny_data_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static void h8300_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void h8300_insert_attributes PARAMS ((tree, tree *));\n+static void h8300_file_end PARAMS ((void));\n #ifndef OBJECT_FORMAT_ELF\n static void h8300_asm_named_section PARAMS ((const char *, unsigned int));\n #endif\n@@ -112,6 +113,10 @@ const char *h8_push_op, *h8_pop_op, *h8_mov_op;\n \n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE h8300_output_function_epilogue\n+\n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END h8300_file_end\n+\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO h8300_encode_section_info\n \n@@ -715,11 +720,10 @@ asm_file_start (file)\n \n /* Output assembly language code for the end of file.  */\n \n-void\n-asm_file_end (file)\n-     FILE *file;\n+static void\n+h8300_file_end ()\n {\n-  fprintf (file, \"\\t.end\\n\");\n+  fputs (\"\\t.end\\n\", asm_out_file);\n }\n \f\n /* Return true if OP is a valid source operand for an integer move"}, {"sha": "e979e972ea2dc04a4dfcf78c7f95c716ef0e416e", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -1039,8 +1039,6 @@ struct cum_arg\n \n #define ASM_FILE_START(FILE) asm_file_start (FILE)\n \n-#define ASM_FILE_END(FILE) asm_file_end (FILE)\n-\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n "}, {"sha": "cbb118b1b9b0e34bd10709697a8873b5c723ea52", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -107,6 +107,8 @@ static void i370_globalize_label PARAMS ((FILE *, const char *));\n #endif\n static void i370_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void i370_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void i370_file_end PARAMS ((void));\n+\n #ifdef LONGEXTERNAL\n static int mvs_hash_alias PARAMS ((const char *));\n #endif\n@@ -318,6 +320,8 @@ static const unsigned char ebcasc[256] =\n #define TARGET_ASM_FUNCTION_PROLOGUE i370_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE i370_output_function_epilogue\n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END i370_file_end\n #undef TARGET_ASM_INTERNAL_LABEL\n #define  TARGET_ASM_INTERNAL_LABEL i370_internal_label\n #undef TARGET_RTX_COSTS\n@@ -1598,6 +1602,12 @@ i370_output_function_epilogue (file, l)\n     fprintf (file, \"\\tDC\\tA(PG%d)\\n\", i);\n }\n \n+static void\n+i370_file_end ()\n+{\n+  fputs (\"\\tEND\\n\", asm_out_file);\n+}\n+\n static void\n i370_internal_label (stream, prefix, labelno)\n      FILE *stream;"}, {"sha": "fcdde6afda76ad5fd4587c24519d8e01d3a6aa61", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -1036,7 +1036,6 @@ enum reg_class\n { fputs (\"\\tRMODE\\tANY\\n\", FILE);\t\t\t\t\t\\\n   fputs (\"\\tCSECT\\n\", FILE); }\n \n-#define ASM_FILE_END(FILE) fputs (\"\\tEND\\n\", FILE);\n #define ASM_COMMENT_START \"*\"\n #define ASM_APP_OFF \"\"\n #define ASM_APP_ON \"\""}, {"sha": "2f9b0a1920efb9abf1824fa6ab7945fffb51bb98", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -294,9 +294,8 @@ extern void i386_pe_unique_section PARAMS ((TREE, int));\n   asm_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n \n /* Output function declarations at the end of the file.  */\n-#undef ASM_FILE_END\n-#define ASM_FILE_END(FILE) \\\n-  i386_pe_asm_file_end (FILE)\n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END i386_pe_file_end\n \n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \" #\"\n@@ -332,7 +331,7 @@ extern void i386_pe_unique_section PARAMS ((TREE, int));\n extern void i386_pe_record_external_function PARAMS ((const char *));\n extern void i386_pe_declare_function_type PARAMS ((FILE *, const char *, int));\n extern void i386_pe_record_exported_symbol PARAMS ((const char *, int));\n-extern void i386_pe_asm_file_end PARAMS ((FILE *));\n+extern void i386_pe_file_end PARAMS ((void));\n extern int i386_pe_dllexport_name_p PARAMS ((const char *));\n extern int i386_pe_dllimport_name_p PARAMS ((const char *));\n "}, {"sha": "c40ce6967cedb8c7d5904a146da62bc02315dc14", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -27,7 +27,7 @@ extern int ix86_can_use_return_insn_p PARAMS ((void));\n extern int ix86_frame_pointer_required PARAMS ((void));\n extern void ix86_setup_frame_addresses PARAMS ((void));\n \n-extern void ix86_asm_file_end PARAMS ((FILE *));\n+extern void ix86_file_end PARAMS ((void));\n extern HOST_WIDE_INT ix86_initial_elimination_offset PARAMS((int, int));\n extern void ix86_expand_prologue PARAMS ((void));\n extern void ix86_expand_epilogue PARAMS ((int));"}, {"sha": "acf037e60e24c0248887dd61acda410e2f0266cd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -4705,8 +4705,7 @@ get_pc_thunk_name (name, regno)\n    the return address of the caller and then returns.  */\n \n void\n-ix86_asm_file_end (file)\n-     FILE *file;\n+ix86_file_end ()\n {\n   rtx xops[2];\n   int regno;\n@@ -4733,16 +4732,16 @@ ix86_asm_file_end (file)\n \t  (*targetm.asm_out.unique_section) (decl, 0);\n \t  named_section (decl, NULL, 0);\n \n-\t  (*targetm.asm_out.globalize_label) (file, name);\n-\t  fputs (\"\\t.hidden\\t\", file);\n-\t  assemble_name (file, name);\n-\t  fputc ('\\n', file);\n-\t  ASM_DECLARE_FUNCTION_NAME (file, name, decl);\n+\t  (*targetm.asm_out.globalize_label) (asm_out_file, name);\n+\t  fputs (\"\\t.hidden\\t\", asm_out_file);\n+\t  assemble_name (asm_out_file, name);\n+\t  fputc ('\\n', asm_out_file);\n+\t  ASM_DECLARE_FUNCTION_NAME (asm_out_file, name, decl);\n \t}\n       else\n \t{\n \t  text_section ();\n-\t  ASM_OUTPUT_LABEL (file, name);\n+\t  ASM_OUTPUT_LABEL (asm_out_file, name);\n \t}\n \n       xops[0] = gen_rtx_REG (SImode, regno);\n@@ -4751,9 +4750,8 @@ ix86_asm_file_end (file)\n       output_asm_insn (\"ret\", xops);\n     }\n \n-#ifdef SUBTARGET_FILE_END\n-  SUBTARGET_FILE_END (file);\n-#endif\n+  if (NEED_INDICATE_EXEC_STACK)\n+    file_end_indicate_exec_stack ();\n }\n \n /* Emit code for the SET_GOT patterns.  */"}, {"sha": "03d4f60d43ce302baa613c8413c0089585943758", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -1825,11 +1825,8 @@ typedef struct ix86_args {\n #define EXPAND_BUILTIN_VA_ARG(VALIST, TYPE) \\\n   ix86_va_arg ((VALIST), (TYPE))\n \n-/* This macro is invoked at the end of compilation.  It is used here to\n-   output code for -fpic that will load the return address into %ebx.  */\n-\n-#undef ASM_FILE_END\n-#define ASM_FILE_END(FILE)  ix86_asm_file_end (FILE)\n+#define TARGET_ASM_FILE_END ix86_file_end\n+#define NEED_INDICATE_EXEC_STACK 0\n \n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */"}, {"sha": "df66a58447bf4bf778f952e4a55e5e7bd06432de", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -223,12 +223,8 @@ Boston, MA 02111-1307, USA.  */\n \t   : \"=d\"(BASE))\n #endif\n \n-#define SUBTARGET_FILE_END(FILE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    named_section_flags (\".note.GNU-stack\",\t\t\t\t\\\n-\t\t\t SECTION_DEBUG\t\t\t\t\t\\\n-\t\t\t | (trampolines_created ? SECTION_CODE : 0));\t\\\n-  } while (0)\n+#undef NEED_INDICATE_EXEC_STACK\n+#define NEED_INDICATE_EXEC_STACK 1\n \n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  */"}, {"sha": "582a22bacd4f0e4f912865891ccaf5a17126042d", "filename": "gcc/config/i386/linux64.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux64.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -71,12 +71,8 @@ Boston, MA 02111-1307, USA.  */\n \n #define MULTILIB_DEFAULTS { \"m64\" }\n \n-#define SUBTARGET_FILE_END(FILE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    named_section_flags (\".note.GNU-stack\",\t\t\t\t\\\n-\t\t\t SECTION_DEBUG\t\t\t\t\t\\\n-\t\t\t | (trampolines_created ? SECTION_CODE : 0));\t\\\n-  } while (0)\n+#undef NEED_INDICATE_EXEC_STACK\n+#define NEED_INDICATE_EXEC_STACK 1\n \n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  "}, {"sha": "97cea6c58f5e293185f4fc7865f9fee97fa8e329", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -763,12 +763,11 @@ i386_pe_record_exported_symbol (name, is_data)\n    output the .drectve section.  */\n \n void\n-i386_pe_asm_file_end (file)\n-     FILE *file;\n+i386_pe_file_end ()\n {\n   struct extern_list *p;\n \n-  ix86_asm_file_end (file);\n+  ix86_file_end ();\n \n   for (p = extern_head; p != NULL; p = p->next)\n     {\n@@ -780,7 +779,8 @@ i386_pe_asm_file_end (file)\n       if (! TREE_ASM_WRITTEN (decl) && TREE_SYMBOL_REFERENCED (decl))\n \t{\n \t  TREE_ASM_WRITTEN (decl) = 1;\n-\t  i386_pe_declare_function_type (file, p->name, TREE_PUBLIC (decl));\n+\t  i386_pe_declare_function_type (asm_out_file, p->name,\n+\t\t\t  \t\t TREE_PUBLIC (decl));\n \t}\n     }\n \n@@ -790,7 +790,7 @@ i386_pe_asm_file_end (file)\n       drectve_section ();\n       for (q = export_head; q != NULL; q = q->next)\n \t{\n-\t  fprintf (file, \"\\t.ascii \\\" -export:%s%s\\\"\\n\",\n+\t  fprintf (asm_out_file, \"\\t.ascii \\\" -export:%s%s\\\"\\n\",\n \t\t   i386_pe_strip_name_encoding (q->name),\n \t\t   (q->is_data) ? \",data\" : \"\");\n \t}"}, {"sha": "60674ba49b4126672cb6e0eb30d4d1b423d2a0a5", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -136,7 +136,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n /* Put out the needed function declarations at the end.  */\n \n-#define ASM_FILE_END(STREAM) ia64_hpux_asm_file_end(STREAM)\n+#define TARGET_ASM_FILE_END ia64_hpux_file_end\n \n #undef CTORS_SECTION_ASM_OP\n #define CTORS_SECTION_ASM_OP  \"\\t.section\\t.init_array,\\t\\\"aw\\\",\\\"init_array\\\"\""}, {"sha": "e0760f3e17b760ae1bd859542da32e30e4e77ba9", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -153,4 +153,3 @@ extern enum direction ia64_hpux_function_arg_padding PARAMS ((enum machine_mode,\n #endif /* ARGS_SIZE_RTX */\n \n extern void ia64_hpux_handle_builtin_pragma PARAMS ((struct cpp_reader *));\n-extern void ia64_hpux_asm_file_end PARAMS ((FILE *));"}, {"sha": "ab49ff63328f869b44a584c4a2325f6491bc37ed", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -257,6 +257,9 @@ static unsigned int ia64_rwreloc_section_type_flags\n \n static void ia64_hpux_add_extern_decl PARAMS ((const char *name))\n      ATTRIBUTE_UNUSED;\n+static void ia64_hpux_file_end PARAMS ((void))\n+     ATTRIBUTE_UNUSED;\n+\n \f\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ia64_attribute_table[] =\n@@ -8359,9 +8362,8 @@ ia64_hpux_add_extern_decl (name)\n \n /* Print out the list of used global functions.  */\n \n-void\n-ia64_hpux_asm_file_end (file)\n-\tFILE *file;\n+static void\n+ia64_hpux_file_end ()\n {\n   while (extern_func_head)\n     {\n@@ -8376,12 +8378,13 @@ ia64_hpux_asm_file_end (file)\n         {\n \t  if (decl)\n \t    TREE_ASM_WRITTEN (decl) = 1;\n-\t  (*targetm.asm_out.globalize_label) (file, extern_func_head->name);\n-\t  fprintf (file, \"%s\", TYPE_ASM_OP);\n-\t  assemble_name (file, extern_func_head->name);\n-\t  putc (',', file);\n-\t  fprintf (file, TYPE_OPERAND_FMT, \"function\");\n-\t  putc ('\\n', file);\n+\t  (*targetm.asm_out.globalize_label) (asm_out_file,\n+\t\t\t\t\t      extern_func_head->name);\n+\t  fputs (TYPE_ASM_OP, asm_out_file);\n+\t  assemble_name (asm_out_file, extern_func_head->name);\n+\t  putc (',', asm_out_file);\n+\t  fprintf (asm_out_file, TYPE_OPERAND_FMT, \"function\");\n+\t  putc ('\\n', asm_out_file);\n         }\n       extern_func_head = extern_func_head->next;\n     }"}, {"sha": "0bc901c8462dfd9fa32723fde04bea28d26584c3", "filename": "gcc/config/ip2k/ip2k-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -18,9 +18,6 @@\n    the Free Software Foundation, 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-extern void asm_file_start PARAMS ((FILE *));\n-extern void asm_file_end PARAMS ((FILE *));\n-\n extern void function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n extern void function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n extern int find_one_set_bit_p PARAMS ((HOST_WIDE_INT));"}, {"sha": "3e165054c951ed38fc3b423e448987f473709962", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -111,12 +111,6 @@ const struct attribute_spec ip2k_attribute_table[];\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n-/* Commands in the functions prologues in the compiled file.  */\n-static int commands_in_prologues;\n-\n-/* Commands in the functions epilogues in the compiled file.  */\n-static int commands_in_epilogues;\n-\n /* Prologue/Epilogue size in words.  */\n static int prologue_size;\n static int epilogue_size;\n@@ -536,8 +530,6 @@ function_epilogue (file, size)\n     }\n   \n   fprintf (file, \"/* epilogue end (size=%d) */\\n\", epilogue_size);\n-  commands_in_prologues += prologue_size;\n-  commands_in_epilogues += epilogue_size;\n }\n \f\n /* Return the difference between the registers after the function\n@@ -3242,32 +3234,6 @@ ip2k_handle_fndecl_attribute (node, name, args, flags, no_add_attrs)\n   return NULL_TREE;\n }\n \n-/* Outputs to the stdio stream FILE some\n-   appropriate text to go at the start of an assembler file.  */\n-\n-void\n-asm_file_start (file)\n-     FILE *file;\n-{\n-  output_file_directive (file, main_input_filename);\n-  \n-  commands_in_prologues = 0;\n-  commands_in_epilogues = 0;\n-}\n-\n-/* Outputs to the stdio stream FILE some\n-   appropriate text to go at the end of an assembler file.  */\n-\n-void\n-asm_file_end (file)\n-     FILE *file;\n-{\n-  fprintf\n-    (file,\n-     \"/* File %s: prologues %3d, epilogues %3d */\\n\",\n-     main_input_filename, commands_in_prologues, commands_in_epilogues);\n-}\n-\n /* Cost functions.  */\n \n /* Compute a (partial) cost for rtx X.  Return true if the complete"}, {"sha": "073eed76196a3b7e3c9de50e561bad870d1dc285", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -335,9 +335,4 @@ do {\t\t\t\t\t\t\t\t\t\\\n      : \"%d0\", \"%d2\", \"%d3\");\t\t\t\t\t\t\\\n }\n \n-#define ASM_FILE_END(FILE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    named_section_flags (\".note.GNU-stack\",\t\t\t\t\\\n-\t\t\t SECTION_DEBUG\t\t\t\t\t\\\n-\t\t\t | (trampolines_created ? SECTION_CODE : 0));\t\\\n-  } while (0)\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack"}, {"sha": "9ba7d21d2c1a7ace813583eb776cfd00452e7aba", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -358,8 +358,6 @@ current_section_flags ()\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ALIGN iris6_asm_output_align\n #undef ASM_FILE_START\n #define ASM_FILE_START  iris6_asm_file_start\n-#undef ASM_FILE_END\n-#define ASM_FILE_END\tiris6_asm_file_end\n \n #undef MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT (32768*8)"}, {"sha": "a08cf008dd06632e2d84a00f5ac3119c320dc75c", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -28,10 +28,8 @@ Boston, MA 02111-1307, USA.  */\n \n extern HOST_WIDE_INT\tcompute_frame_size PARAMS ((HOST_WIDE_INT));\n extern int\t\tmips_initial_elimination_offset PARAMS ((int, int));\n-extern void\t\tmips_asm_file_end PARAMS ((FILE *));\n extern void\t\tmips_asm_file_start PARAMS ((FILE *));\n extern void\t\tiris6_asm_file_start PARAMS ((FILE *));\n-extern void\t\tiris6_asm_file_end PARAMS ((FILE *));\n extern void\t\tiris6_asm_output_align PARAMS ((FILE *, unsigned));\n extern const char *\tcurrent_section_name PARAMS ((void));\n extern unsigned int\tcurrent_section_flags PARAMS ((void));"}, {"sha": "af2bbf3acd81f0fa046a711aa877bc2be5dbfcca", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -272,6 +272,7 @@ static void iris6_asm_named_section\t\tPARAMS ((const char *,\n static int iris_section_align_entry_eq\t\tPARAMS ((const PTR, const PTR));\n static hashval_t iris_section_align_entry_hash\tPARAMS ((const PTR));\n static int iris6_section_align_1\t\tPARAMS ((void **, void *));\n+static void iris6_file_end\t\t\tPARAMS ((void));\n #endif\n static int mips_adjust_cost\t\t\tPARAMS ((rtx, rtx, rtx, int));\n static int mips_issue_rate\t\t\tPARAMS ((void));\n@@ -287,7 +288,7 @@ static int mips_use_dfa_pipeline_interface      PARAMS ((void));\n static bool mips_rtx_costs\t\t\tPARAMS ((rtx, int, int, int *));\n static int mips_address_cost                    PARAMS ((rtx));\n static void mips_encode_section_info            PARAMS ((tree, rtx, int));\n-\n+static void mips_file_end\t\t\tPARAMS ((void));\n \n /* Structure to be filled in by compute_frame_size with register\n    save masks, and offsets for the current function.  */\n@@ -872,6 +873,13 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG mips_reorg\n \n+#undef TARGET_ASM_FILE_END\n+#ifdef TARGET_IRIX6\n+#define TARGET_ASM_FILE_END iris6_file_end\n+#else\n+#define TARGET_ASM_FILE_END mips_file_end\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* If X is one of the constants described by mips_constant_type,\n@@ -6550,16 +6558,15 @@ mips_asm_file_start (stream)\n    warning if the data area is more than 32K and -pic because 3 instructions\n    are needed to reference the data pointers.  */\n \n-void\n-mips_asm_file_end (file)\n-     FILE *file;\n+static void\n+mips_file_end ()\n {\n   tree name_tree;\n   struct extern_list *p;\n \n   if (extern_head)\n     {\n-      fputs (\"\\n\", file);\n+      fputs (\"\\n\", asm_out_file);\n \n       for (p = extern_head; p != 0; p = p->next)\n \t{\n@@ -6571,22 +6578,22 @@ mips_asm_file_end (file)\n \t      TREE_ASM_WRITTEN (name_tree) = 1;\n #ifdef ASM_OUTPUT_UNDEF_FUNCTION\n \t      if (p->size == -1)\n-\t\tASM_OUTPUT_UNDEF_FUNCTION (file, p->name);\n+\t\tASM_OUTPUT_UNDEF_FUNCTION (asm_out_file, p->name);\n \t      else\n #endif\n \t\t{\n-\t\t  fputs (\"\\t.extern\\t\", file);\n-\t\t  assemble_name (file, p->name);\n-\t\t  fprintf (file, \", %d\\n\", p->size);\n+\t\t  fputs (\"\\t.extern\\t\", asm_out_file);\n+\t\t  assemble_name (asm_out_file, p->name);\n+\t\t  fprintf (asm_out_file, \", %d\\n\", p->size);\n \t\t}\n \t    }\n \t}\n     }\n \n   if (TARGET_FILE_SWITCHING)\n     {\n-      fprintf (file, \"\\n\\t.text\\n\");\n-      copy_file_data (file, asm_out_text_file);\n+      fputs (\"\\n\\t.text\\n\", asm_out_file);\n+      copy_file_data (asm_out_file, asm_out_text_file);\n     }\n }\n \n@@ -6612,7 +6619,7 @@ copy_file_data (to, from)\n }\n \n /* Emit either a label, .comm, or .lcomm directive, and mark that the symbol\n-   is used, so that we don't emit an .extern for it in mips_asm_file_end.  */\n+   is used, so that we don't emit an .extern for it in mips_file_end.  */\n \n void\n mips_declare_object (stream, name, init_string, final_string, size)\n@@ -10717,19 +10724,19 @@ iris6_section_align_1 (slot, data)\n   return 1;\n }\n \n-void\n-iris6_asm_file_end (stream)\n-     FILE *stream;\n+static void\n+iris6_file_end ()\n {\n   /* Emit section directives with the proper alignment at the top of the\n      real output file.  */\n+  FILE *temp = asm_out_file;\n   asm_out_file = iris_orig_asm_out_file;\n   htab_traverse (iris_section_align_htab, iris6_section_align_1, NULL);\n \n   /* Copy the data emitted to the temp file to the real output file.  */\n-  copy_file_data (asm_out_file, stream);\n+  copy_file_data (asm_out_file, temp);\n \n-  mips_asm_file_end (stream);\n+  mips_file_end ();\n }\n #endif /* TARGET_IRIX6 */\n "}, {"sha": "abc3e4fd57ee7a81d28ed43146fc442c0403d6a9", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -3930,11 +3930,6 @@ while (0)\n #define ASM_OUTPUT_EXTERNAL(STREAM,DECL,NAME) \\\n   mips_output_external(STREAM,DECL,NAME)\n \n-/* This says what to print at the end of the assembly file */\n-#undef ASM_FILE_END\n-#define ASM_FILE_END(STREAM) mips_asm_file_end(STREAM)\n-\n-\n /* Play switch file games if we're optimizing the global pointer.  */\n \n #undef TEXT_SECTION"}, {"sha": "24ba481320966ade27116f3d2ee162b272414c6f", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -34,7 +34,6 @@ extern int mmix_register_move_cost\n extern const char *mmix_text_section_asm_op PARAMS ((void));\n extern const char *mmix_data_section_asm_op PARAMS ((void));\n extern void mmix_asm_file_start PARAMS ((FILE *));\n-extern void mmix_asm_file_end PARAMS ((FILE *));\n extern void mmix_asm_output_source_filename PARAMS ((FILE *, const char *));\n extern void mmix_output_quoted_string PARAMS ((FILE *, const char *, int));\n extern void mmix_asm_output_source_line  PARAMS ((FILE *, int));"}, {"sha": "bf2a4a22f2106c654cd0f612e489126ec78a5c7c", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -135,6 +135,7 @@ static void mmix_target_asm_function_epilogue\n static void mmix_reorg PARAMS ((void));\n static void mmix_asm_output_mi_thunk\n   PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n+static void mmix_file_end PARAMS ((void));\n static bool mmix_rtx_costs\n   PARAMS ((rtx, int, int, int *));\n \n@@ -173,6 +174,8 @@ static bool mmix_rtx_costs\n #define TARGET_ASM_OUTPUT_MI_THUNK mmix_asm_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END mmix_file_end\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS mmix_rtx_costs\n@@ -1310,11 +1313,10 @@ mmix_asm_file_start (stream)\n   text_section ();\n }\n \n-/* ASM_FILE_END.  */\n+/* TARGET_ASM_FILE_END.  */\n \n-void\n-mmix_asm_file_end (stream)\n-     FILE * stream ATTRIBUTE_UNUSED;\n+static void\n+mmix_file_end ()\n {\n   /* Make sure each file ends with the data section. */\n   data_section ();"}, {"sha": "16c434f0fcb4c1fa5b784c026fe6d37a5e11d552", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -922,9 +922,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n #define ASM_FILE_START(STREAM) \\\n  mmix_asm_file_start (STREAM)\n \n-#define ASM_FILE_END(STREAM) \\\n- mmix_asm_file_end (STREAM)\n-\n /* While any other punctuation character but \";\" would do, we prefer \"%\"\n    or \"!\"; \"!\" is an unary operator and so will not be mistakenly included\n    in correctly formed expressions.  The hash character adds mass; catches"}, {"sha": "cff08c2ba1d96761145f2900e8856e074628b751", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -133,7 +133,6 @@ extern int zdepi_cint_p PARAMS ((unsigned HOST_WIDE_INT));\n \n extern struct rtx_def *hppa_builtin_saveregs PARAMS ((void));\n \n-extern void output_deferred_plabels PARAMS ((FILE *));\n extern void override_options PARAMS ((void));\n extern void output_ascii PARAMS ((FILE *, const char *, int));\n extern int compute_frame_size PARAMS ((int, int *));"}, {"sha": "3c775954d1f4b2944149c0fd89cc6ed029e34098", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -136,6 +136,7 @@ static void copy_fp_args PARAMS ((rtx)) ATTRIBUTE_UNUSED;\n static int length_fp_args PARAMS ((rtx)) ATTRIBUTE_UNUSED;\n static struct deferred_plabel *get_plabel PARAMS ((const char *))\n      ATTRIBUTE_UNUSED;\n+static void output_deferred_plabels PARAMS ((void));\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -174,6 +175,7 @@ struct deferred_plabel GTY(())\n static GTY((length (\"n_deferred_plabels\"))) struct deferred_plabel *\n   deferred_plabels;\n static size_t n_deferred_plabels = 0;\n+\n \f\n /* Initialize the GCC target structure.  */\n \n@@ -217,6 +219,9 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END output_deferred_plabels\n+\n #if !defined(USE_COLLECT2)\n #undef TARGET_ASM_CONSTRUCTOR\n #define TARGET_ASM_CONSTRUCTOR pa_asm_out_constructor\n@@ -4939,9 +4944,8 @@ get_plabel (fname)\n   return &deferred_plabels[i];\n }\n \n-void\n-output_deferred_plabels (file)\n-     FILE *file;\n+static void\n+output_deferred_plabels ()\n {\n   size_t i;\n   /* If we have deferred plabels, then we need to switch into the data\n@@ -4950,13 +4954,14 @@ output_deferred_plabels (file)\n   if (n_deferred_plabels)\n     {\n       data_section ();\n-      ASM_OUTPUT_ALIGN (file, TARGET_64BIT ? 3 : 2);\n+      ASM_OUTPUT_ALIGN (asm_out_file, TARGET_64BIT ? 3 : 2);\n     }\n \n   /* Now output the deferred plabels.  */\n   for (i = 0; i < n_deferred_plabels; i++)\n     {\n-      (*targetm.asm_out.internal_label) (file, \"L\", CODE_LABEL_NUMBER (deferred_plabels[i].internal_label));\n+      (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n+\t\t CODE_LABEL_NUMBER (deferred_plabels[i].internal_label));\n       assemble_integer (gen_rtx_SYMBOL_REF (Pmode, deferred_plabels[i].name),\n \t\t\tTARGET_64BIT ? 8 : 4, TARGET_64BIT ? 64 : 32, 1);\n     }"}, {"sha": "2d6c22e9c5ef18d93604aeb38e70dcca4c1037c8", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -1682,10 +1682,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n \n #define ASM_APP_OFF \"\"\n \n-/* Output deferred plabels at the end of the file.  */\n-\n-#define ASM_FILE_END(FILE) output_deferred_plabels (FILE)\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n "}, {"sha": "3cfe0204734b729b36159fdadc0284214c810f7e", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -86,12 +86,7 @@\n /* We don't need to generate entries in .fixup.  */\n #undef RELOCATABLE_NEEDS_FIXUP\n \n-#define ASM_FILE_END(FILE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    named_section_flags (\".note.GNU-stack\",\t\t\t\t\\\n-\t\t\t SECTION_DEBUG\t\t\t\t\t\\\n-\t\t\t | (trampolines_created ? SECTION_CODE : 0));\t\\\n-  } while (0)\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  */"}, {"sha": "a5c62e2f9044589a8903288ecead036b3d6506a3", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -515,13 +515,7 @@ while (0)\n #undef DRAFT_V4_STRUCT_RET\n #define DRAFT_V4_STRUCT_RET (!TARGET_64BIT)\n \n-#define ASM_FILE_END(FILE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (! TARGET_64BIT)\t\t\t\t\t\t\t\\\n-      named_section_flags (\".note.GNU-stack\",\t\t\t\t\\\n-\t\t\t   SECTION_DEBUG\t\t\t\t\\\n-\t\t\t   | (trampolines_created ? SECTION_CODE : 0));\t\\\n-  } while (0)\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  */"}, {"sha": "68d0e964ace23a5a9d6a94b04e69848292fa395b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -258,6 +258,7 @@ static void rs6000_xcoff_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t     unsigned HOST_WIDE_INT));\n static const char * rs6000_xcoff_strip_name_encoding PARAMS ((const char *));\n static unsigned int rs6000_xcoff_section_type_flags PARAMS ((tree, const char *, int));\n+static void rs6000_xcoff_file_end PARAMS ((void));\n #endif\n #if TARGET_MACHO\n static bool rs6000_binds_local_p PARAMS ((tree));\n@@ -14140,6 +14141,20 @@ rs6000_xcoff_section_type_flags (decl, name, reloc)\n \n   return flags | (exact_log2 (align) & SECTION_ENTSIZE);\n }\n+\n+/* Output at end of assembler file.\n+   On the RS/6000, referencing data should automatically pull in text.  */\n+\n+static void\n+rs6000_xcoff_file_end ()\n+{\n+  text_section ();\n+  fputs (\"_section_.text:\\n\", asm_out_file);\n+  data_section ();\n+  fputs (TARGET_32BIT\n+\t ? \"\\t.long _section_.text\\n\" : \"\\t.llong _section_.text\\n\",\n+\t asm_out_file);\n+}\n #endif /* TARGET_XCOFF */\n \n #if TARGET_MACHO"}, {"sha": "affe073dfa51964b8abf1827825e20ad3109825b", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -233,18 +233,7 @@ toc_section ()\t\t\t\t\t\t\\\n   rs6000_file_start (FILE, TARGET_CPU_DEFAULT);\t\t\t\\\n }\n \n-/* Output at end of assembler file.\n-\n-   On the RS/6000, referencing data should automatically pull in text.  */\n-\n-#define ASM_FILE_END(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  text_section ();\t\t\t\t\t\t\\\n-  fputs (\"_section_.text:\\n\", FILE);\t\t\t\t\\\n-  data_section ();\t\t\t\t\t\t\\\n-  fputs (TARGET_32BIT\t\t\t\t\t\t\\\n-\t ? \"\\t.long _section_.text\\n\" : \"\\t.llong _section_.text\\n\", FILE); \\\n-}\n+#define TARGET_ASM_FILE_END rs6000_xcoff_file_end\n \n /* This macro produces the initial definition of a function name.\n    On the RS/6000, we need to place an extra '.' in the function name and"}, {"sha": "83c8247e2f36a6c0fa8d6a8fdace394bebd94850", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -121,12 +121,7 @@ Boston, MA 02111-1307, USA.  */\n   { \"link_arch31\",\tLINK_ARCH31_SPEC },\t\\\n   { \"link_arch64\",\tLINK_ARCH64_SPEC },\t\\\n \n-#define ASM_FILE_END(FILE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    named_section_flags (\".note.GNU-stack\",\t\t\t\t\\\n-\t\t\t SECTION_DEBUG\t\t\t\t\t\\\n-\t\t\t | (trampolines_created ? SECTION_CODE : 0));\t\\\n-  } while (0)\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  */"}, {"sha": "f6616a77dd3d519fd78bcdff872f1bcd881d6991", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -259,12 +259,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n \n-#define ASM_FILE_END(FILE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    named_section_flags (\".note.GNU-stack\",\t\t\t\t\\\n-\t\t\t SECTION_DEBUG\t\t\t\t\t\\\n-\t\t\t | (trampolines_created ? SECTION_CODE : 0));\t\\\n-  } while (0)\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  */"}, {"sha": "d4835dd34e3e512b9284edbc4b74b3021ec9f7c8", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -324,12 +324,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n \n-#define ASM_FILE_END(FILE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    named_section_flags (\".note.GNU-stack\",\t\t\t\t\\\n-\t\t\t SECTION_DEBUG\t\t\t\t\t\\\n-\t\t\t | (trampolines_created ? SECTION_CODE : 0));\t\\\n-  } while (0)\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  */"}, {"sha": "de07785d61b36b81242ed6bd2ca4b6d7899ea195", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -6186,22 +6186,23 @@ Normally this macro is defined to output a line containing\n @samp{#NO_APP}, which is a comment that has no effect on most\n assemblers but tells the GNU assembler that it can save time by not\n checking for certain assembler constructs.\n+@end table\n \n-On systems that use SDB, it is necessary to output certain commands;\n-see @file{attasm.h}.\n-\n-@findex ASM_FILE_END\n-@item ASM_FILE_END (@var{stream})\n-A C expression which outputs to the stdio stream @var{stream}\n-some appropriate text to go at the end of an assembler file.\n-\n-If this macro is not defined, the default is to output nothing\n-special at the end of the file.  Most systems don't require any\n-definition.\n+@deftypefn {Target Hook} void TARGET_ASM_FILE_END ()\n+Output to @code{asm_out_file} any text which the assembler expects\n+to find at the end of a file.  The default is to output nothing.\n+@end deftypefn\n \n-On systems that use SDB, it is necessary to output certain commands;\n-see @file{attasm.h}.\n+@deftypefun void file_end_indicate_exec_stack ()\n+Some systems use a common convention, the @samp{.note.GNU-stack}\n+special section, to indicate whether or not an object file relies on\n+the stack being executable.  If your system uses this convention, you\n+should define @code{TARGET_ASM_FILE_END} to this function.  If you\n+need to do other things in that hook, have your hook function call\n+this function.\n+@end deftypefun\n \n+@table @code\n @findex ASM_COMMENT_START\n @item ASM_COMMENT_START\n A C string constant describing how to begin a comment in the target"}, {"sha": "2bfc64d3a6bf6a805736a36662d74218923fb1d7", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -519,6 +519,7 @@ extern bool default_binds_local_p PARAMS ((tree));\n extern bool default_binds_local_p_1 PARAMS ((tree, int));\n extern void default_globalize_label PARAMS ((FILE *, const char *));\n extern void default_internal_label PARAMS ((FILE *, const char *, unsigned long));\n+extern void file_end_indicate_exec_stack PARAMS ((void));\n extern bool default_valid_pointer_mode PARAMS ((enum machine_mode));\n \n /* Emit data for vtable gc for GNU binutils.  */"}, {"sha": "f5b52204ed823bdf1bd3fad14602a2257b351f93", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -623,7 +623,7 @@ typedef char _Bool;\n \tWCHAR_UNSIGNED UNIQUE_SECTION SELECT_SECTION SELECT_RTX_SECTION\t\\\n \tENCODE_SECTION_INFO STRIP_NAME_ENCODING ASM_GLOBALIZE_LABEL\t\\\n \tASM_OUTPUT_MI_THUNK CONST_COSTS RTX_COSTS DEFAULT_RTX_COSTS\t\\\n-\tADDRESS_COST MACHINE_DEPENDENT_REORG\n+\tADDRESS_COST MACHINE_DEPENDENT_REORG ASM_FILE_END\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "02374d08201f6fada1dd0363a30b79c4ad2d2ed8", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -150,6 +150,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_ASM_EH_FRAME_SECTION default_eh_frame_section\n #endif\n \n+#ifndef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END hook_void_void\n+#endif\n+\n #define TARGET_ASM_ALIGNED_INT_OP\t\t\t\t\\\n \t\t       {TARGET_ASM_ALIGNED_HI_OP,\t\t\\\n \t\t\tTARGET_ASM_ALIGNED_SI_OP,\t\t\\\n@@ -184,7 +188,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \t\t\tTARGET_ASM_CONSTRUCTOR,\t\t\t\\\n \t\t\tTARGET_ASM_DESTRUCTOR,                  \\\n                         TARGET_ASM_OUTPUT_MI_THUNK,             \\\n-                        TARGET_ASM_CAN_OUTPUT_MI_THUNK }\n+                        TARGET_ASM_CAN_OUTPUT_MI_THUNK,         \\\n+                        TARGET_ASM_FILE_END}\n \n /* Scheduler hooks.  All of these default to null pointers, which\n    haifa-sched.c looks for and handles.  */"}, {"sha": "ad07f86d9587a3766a3e205684ecd652d1326198", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -142,6 +142,9 @@ struct gcc_target\n \t\t\t\t          HOST_WIDE_INT delta,\n \t\t\t\t          HOST_WIDE_INT vcall_offset,\n \t\t\t\t          tree function_decl));\n+\n+    /* Output any boilerplate text needed at the end of a translation unit.  */\n+    void (*file_end) PARAMS ((void));\n   } asm_out;\n \n   /* Functions relating to instruction scheduling.  */"}, {"sha": "ea9388ca4552a0b591805b1fb8eb409b0b0935b4", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -2261,9 +2261,7 @@ compile_file (void)\n       timevar_pop (TV_DUMP);\n     }\n \n-#ifdef ASM_FILE_END\n-  ASM_FILE_END (asm_out_file);\n-#endif\n+  targetm.asm_out.file_end ();\n \n   /* Attach a special .ident directive to the end of the file to identify\n      the version of GCC which compiled this code.  The format of the .ident"}, {"sha": "b13e09cf6f4b0975297eb74bd8d9675949a69fe0", "filename": "gcc/varasm.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a5fe455b127af8fb5dc5cd9d3ab6dc5be28fd1ca", "patch": "@@ -5364,4 +5364,18 @@ default_internal_label (stream, prefix, labelno)\n   ASM_OUTPUT_LABEL (stream, buf);\n }\n \n+/* This is a generic routine suitable for use as TARGET_ASM_FILE_END\n+   which emits a special section directive used to indicate whether or\n+   not this object file needs an executable stack.  This is primarily\n+   a GNU extension to ELF but could be used on other targets.  */\n+void\n+file_end_indicate_exec_stack ()\n+{\n+  unsigned int flags = SECTION_DEBUG;\n+  if (trampolines_created)\n+    flags |= SECTION_CODE;\n+\n+  named_section_flags (\".note.GNU-stack\", flags);\n+}\n+\n #include \"gt-varasm.h\""}]}