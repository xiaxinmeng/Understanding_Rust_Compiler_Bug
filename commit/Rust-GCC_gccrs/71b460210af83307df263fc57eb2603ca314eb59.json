{"sha": "71b460210af83307df263fc57eb2603ca314eb59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFiNDYwMjEwYWY4MzMwN2RmMjYzZmM1N2ViMjYwM2NhMzE0ZWI1OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-24T13:48:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-24T13:48:11Z"}, "message": "Nathan C.\n\n2003-06-24  Paolo Carlini  <pcarlini@unitus.it>\n            Nathan C. Myers  <ncm-nospam@cantrip.org>\n\n\t* include/std/std_fstream.h (_M_filepos): Remove.\n\t(_M_reading, _M_writing): New, encode the various I/O modes:\n\t'read', 'write' and 'uncommitted'.\n\t(sync): If there is something to flush, do it, then go to\n\t'uncommitted' mode.\n\t* include/bits/fstream.tcc (_M_set_buffer): Overhaul to deal\n\twith three different cases: __off > 0 (upon underflow),\n\t__off == 0 (upon overflow), __off == -1 (upon open, setbuf,\n\tseekoff/pos).\n\t(_M_underflow): Don't call overflow, set _M_reading to true\n\ton success, tweak.\n\t(pbackfail): Set _M_reading to true on pback creation, tweak.\n\t(overflow): Don't seek, deal with overflow in 'uncommitted' mode,\n\tset _M_writing to true on success, tweak.\n\t(seekoff): Simplify, set _M_reading, _M_writing to false, call\n\t_M_set_buffer(-1) ('uncommitted').\n\t(open, close, setbuf): Set _M_reading, _M_writing to false and\n\tcall _M_set_buffer(-1), tweak.\n\t(basic_filebuf): Don't set _M_buf_unified.\n\t(_M_destroy_internal_buffer): Don't call setg and setp.\n\t* include/ext/stdio_filebuf.h (stdio_filebuf): Use _M_reading,\n\t_M_writing and _M_set_buffer(-1).\n\t* include/std/std_streambuf.h (_M_move_out_cur, _M_move_in_cur,\n\t_M_out_lim, _M_buf_unified): Remove.\n\t(basic_streambuf): Don't set _M_out_lim and _M_buf_unified.\n\t(setp): Don't set _M_out_lim.\n\t* testsuite/27_io/basic_filebuf/sbumpc/char/1-io.cc: Fix for\n\tthe new logic ('read', 'write' and 'uncommitted' modes): e.g.,\n\tupon open the mode is 'uncommitted' and therefore the put area\n\tpointers are null.\n\t* testsuite/27_io/basic_filebuf/sbumpc/char/1-out.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/seekoff/char/3-io.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/seekpos/char/3-io.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/setbuf/char/1.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sgetc/char/1-io.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sgetc/char/1-out.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sgetn/char/1-io.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sgetn/char/1-out.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/snextc/char/1-io.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/snextc/char/1-out.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-io.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-out.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sputc/char/1-io.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sputc/char/1-out.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sputc/char/9701-2.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sputn/char/1-io.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sputn/char/1-out.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sputn/char/9701-1.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sungetc/char/1-io.cc: Ditto.\n\t* testsuite/27_io/basic_filebuf/sungetc/char/1-out.cc: Ditto.\n\n\t* include/bits/fstream.tcc (showmanyc): Use only the\n\tdocumented derivation interface to basic_streambuf (gptr(),\n\tsetg(), etc.) to work right with user specializations.\n\t* include/bits/streambuf.tcc (sbumpc, sputbackc, sungetc,\n\tsputc, xsgetn, xsputn, __copy_streambufs): Likewise.\n\t* include/std/std_streambuf.h (in_avail, sgetc, uflow, stossc):\n\tLikewise.\n\t* include/std/std_fstream.h (_M_create_pback, _M_destroy_pback,\n\txsgetn): Likewise.\n\nCo-Authored-By: Nathan C. Myers <ncm-nospam@cantrip.org>\n\nFrom-SVN: r68420", "tree": {"sha": "4181362da88e74433fa135cb0546217d62cdae22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4181362da88e74433fa135cb0546217d62cdae22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71b460210af83307df263fc57eb2603ca314eb59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b460210af83307df263fc57eb2603ca314eb59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b460210af83307df263fc57eb2603ca314eb59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b460210af83307df263fc57eb2603ca314eb59/comments", "author": null, "committer": null, "parents": [{"sha": "cebebe72b1f06a31668a8efb9a5f2d6be590b20d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cebebe72b1f06a31668a8efb9a5f2d6be590b20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cebebe72b1f06a31668a8efb9a5f2d6be590b20d"}], "stats": {"total": 517, "additions": 264, "deletions": 253}, "files": [{"sha": "bf9cd5cb2ba2a2ac68c94a730bf0144f722863e9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -1,3 +1,67 @@\n+2003-06-24  Paolo Carlini  <pcarlini@unitus.it>\n+            Nathan C. Myers  <ncm-nospam@cantrip.org>\n+\n+\t* include/std/std_fstream.h (_M_filepos): Remove.\n+\t(_M_reading, _M_writing): New, encode the various I/O modes:\n+\t'read', 'write' and 'uncommitted'.\n+\t(sync): If there is something to flush, do it, then go to\n+\t'uncommitted' mode.\n+\t* include/bits/fstream.tcc (_M_set_buffer): Overhaul to deal\n+\twith three different cases: __off > 0 (upon underflow),\n+\t__off == 0 (upon overflow), __off == -1 (upon open, setbuf,\n+\tseekoff/pos).\n+\t(_M_underflow): Don't call overflow, set _M_reading to true\n+\ton success, tweak.\n+\t(pbackfail): Set _M_reading to true on pback creation, tweak.\n+\t(overflow): Don't seek, deal with overflow in 'uncommitted' mode,\n+\tset _M_writing to true on success, tweak.\n+\t(seekoff): Simplify, set _M_reading, _M_writing to false, call\n+\t_M_set_buffer(-1) ('uncommitted').\n+\t(open, close, setbuf): Set _M_reading, _M_writing to false and\n+\tcall _M_set_buffer(-1), tweak.\n+\t(basic_filebuf): Don't set _M_buf_unified.\n+\t(_M_destroy_internal_buffer): Don't call setg and setp.\n+\t* include/ext/stdio_filebuf.h (stdio_filebuf): Use _M_reading,\n+\t_M_writing and _M_set_buffer(-1).\n+\t* include/std/std_streambuf.h (_M_move_out_cur, _M_move_in_cur,\n+\t_M_out_lim, _M_buf_unified): Remove.\n+\t(basic_streambuf): Don't set _M_out_lim and _M_buf_unified.\n+\t(setp): Don't set _M_out_lim.\t\n+\t* testsuite/27_io/basic_filebuf/sbumpc/char/1-io.cc: Fix for\n+\tthe new logic ('read', 'write' and 'uncommitted' modes): e.g.,\n+\tupon open the mode is 'uncommitted' and therefore the put area\n+\tpointers are null.\n+\t* testsuite/27_io/basic_filebuf/sbumpc/char/1-out.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/3-io.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/seekpos/char/3-io.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/setbuf/char/1.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sgetc/char/1-io.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sgetc/char/1-out.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/1-io.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/1-out.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/snextc/char/1-io.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/snextc/char/1-out.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-io.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-out.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sputc/char/1-io.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sputc/char/1-out.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sputc/char/9701-2.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/1-io.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/1-out.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/9701-1.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sungetc/char/1-io.cc: Ditto.\n+\t* testsuite/27_io/basic_filebuf/sungetc/char/1-out.cc: Ditto.\n+\n+\t* include/bits/fstream.tcc (showmanyc): Use only the\n+\tdocumented derivation interface to basic_streambuf (gptr(),\n+\tsetg(), etc.) to work right with user specializations.\n+\t* include/bits/streambuf.tcc (sbumpc, sputbackc, sungetc,\n+\tsputc, xsgetn, xsputn, __copy_streambufs): Likewise.\n+\t* include/std/std_streambuf.h (in_avail, sgetc, uflow, stossc):\n+\tLikewise.\n+\t* include/std/std_fstream.h (_M_create_pback, _M_destroy_pback,\n+\txsgetn): Likewise.\n+\n 2003-06-23  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* configure.host (freebsd*): Set abi_baseline_pair."}, {"sha": "22a24dcee69776941ae28c935d56a3d03e931ada", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 79, "deletions": 81, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -63,8 +63,6 @@ namespace std\n \t  delete [] this->_M_buf;\n \t  this->_M_buf = NULL;\n \t  _M_buf_allocated = false;\n-\t  this->setg(NULL, NULL, NULL);\n-\t  this->setp(NULL, NULL);\n \t}\n     }\n \n@@ -73,10 +71,10 @@ namespace std\n     basic_filebuf() : __streambuf_type(), _M_file(&_M_lock), \n     _M_state_cur(__state_type()), _M_state_beg(__state_type()),\n     _M_buf(NULL), _M_buf_size(BUFSIZ), _M_buf_allocated(false),\n-    _M_last_overflowed(false), _M_filepos(0), _M_pback_cur_save(0), \n-    _M_pback_end_save(0), _M_pback_init(false), _M_codecvt(0)\n+    _M_reading(false), _M_writing(false), _M_last_overflowed(false),\n+    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),\n+    _M_codecvt(0)\n     { \n-      this->_M_buf_unified = true; \t  \n       if (has_facet<__codecvt_type>(this->_M_buf_locale))\n \t_M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);\n     }\n@@ -95,8 +93,10 @@ namespace std\n \t      _M_allocate_internal_buffer();\n \t      this->_M_mode = __mode;\n \n-\t      // Setup initial position of buffer.\n-\t      _M_set_buffer(0);\n+\t      // Setup initial buffer to 'uncommitted' mode.\n+\t      _M_reading = false;\n+\t      _M_writing = false;\n+\t      _M_set_buffer(-1);\n \n \t      if ((__mode & ios_base::ate) \n \t\t  && this->seekoff(0, ios_base::end, __mode) < 0)\n@@ -120,9 +120,7 @@ namespace std\n \t  bool __testfail = false;\n \t  try\n \t    {\n-\t      const bool __testput = this->_M_out_beg < this->_M_out_lim;\n-\n-\t      if (__testput \n+\t      if (this->pbase() < this->pptr()\n \t\t  && traits_type::eq_int_type(this->overflow(),\n \t\t\t\t\t      traits_type::eof()))\n \t\t__testfail = true;\n@@ -144,6 +142,9 @@ namespace std\n \t  this->_M_mode = ios_base::openmode(0);\n \t  this->_M_pback_init = false;\n \t  _M_destroy_internal_buffer();\n+\t  _M_reading = false;\n+\t  _M_writing = false;\n+\t  _M_set_buffer(-1);\n \t  \n \t  if (!_M_file.close())\n \t    __testfail = true;\n@@ -167,7 +168,7 @@ namespace std\n \t{\n \t  // For a stateful encoding (-1) the pending sequence might be just\n \t  // shift and unshift prefixes with no actual character.\n-\t  __ret = this->_M_in_end - this->_M_in_cur;\n+\t  __ret = this->egptr() - this->gptr();\n \t  if (__check_facet(_M_codecvt).encoding() >= 0)\n \t    __ret += _M_file.showmanyc() / _M_codecvt->max_length();\n \t}\n@@ -185,34 +186,29 @@ namespace std\n       const bool __testin = this->_M_mode & ios_base::in;\n       const bool __testout = this->_M_mode & ios_base::out;\n \n-      if (__testin)\n+      if (__testin && !_M_writing)\n \t{\n \t  // Check for pback madness, and if so swich back to the\n \t  // normal buffers and jet outta here before expensive\n \t  // fileops happen...\n \t  _M_destroy_pback();\n \n-\t  if (this->_M_in_cur < this->_M_in_end)\n+\t  if (this->gptr() < this->egptr())\n \t    {\n-\t      __ret = traits_type::to_int_type(*this->_M_in_cur);\n+\t      __ret = traits_type::to_int_type(*this->gptr());\n \t      if (__bump)\n-\t\t_M_move_in_cur(1);\n+\t\tthis->gbump(1);\n \t      return __ret;\n \t    }\n \n-\t  // Sync internal and external buffers.\n-\t  if (__testout && this->_M_out_beg < this->_M_out_lim\n-\t      && traits_type::eq_int_type(this->overflow(), __ret))\n-\t    return __ret;\n-\t  \n \t  // Get and convert input sequence.\n \t  const size_t __buflen = this->_M_buf_size > 1\n \t                          ? this->_M_buf_size - 1 : 1;\n \t  streamsize __elen = 0;\n \t  streamsize __ilen = 0;\n \t  if (__check_facet(_M_codecvt).always_noconv())\n \t    {\n-\t      __elen = _M_file.xsgetn(reinterpret_cast<char*>(this->_M_in_beg), __buflen);\n+\t      __elen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()), __buflen);\n \t      __ilen = __elen;\n \t    }\n \t  else\n@@ -224,13 +220,13 @@ namespace std\n \t      char_type* __iend;\n \t      codecvt_base::result __r;\n \t      __r = _M_codecvt->in(_M_state_cur, __buf, __buf + __elen, \n-\t\t\t\t   __eend, this->_M_in_beg, \n-\t\t\t\t   this->_M_in_beg + __buflen, __iend);\n+\t\t\t\t   __eend, this->eback(), \n+\t\t\t\t   this->eback() + __buflen, __iend);\n \t      if (__r == codecvt_base::ok)\n-\t\t__ilen = __iend - this->_M_in_beg;\n+\t\t__ilen = __iend - this->eback();\n \t      else if (__r == codecvt_base::noconv)\n \t\t{\n-\t\t  traits_type::copy(this->_M_in_beg,\n+\t\t  traits_type::copy(this->eback(),\n \t\t\t\t    reinterpret_cast<char_type*>(__buf), \n \t\t\t\t    __elen);\n \t\t  __ilen = __elen;\n@@ -246,9 +242,10 @@ namespace std\n \t  if (__ilen > 0)\n \t    {\n \t      _M_set_buffer(__ilen);\n-\t      __ret = traits_type::to_int_type(*this->_M_in_cur);\n+\t      _M_reading = true;\n+\t      __ret = traits_type::to_int_type(*this->gptr());\n \t      if (__bump)\n-\t\t_M_move_in_cur(1);\n+\t\tthis->gbump(1);\n \t    }\t   \t    \n \t}\n       _M_last_overflowed = false;\t\n@@ -263,18 +260,18 @@ namespace std\n       int_type __ret = traits_type::eof();\n       const bool __testin = this->_M_mode & ios_base::in;\n \n-      if (__testin)\n+      if (__testin && !_M_writing)\n \t{\n \t  // Remember whether the pback buffer is active, otherwise below\n \t  // we may try to store in it a second char (libstdc++/9761).\n \t  const bool __testpb = this->_M_pback_init;\t   \n \t  const bool __testeof = traits_type::eq_int_type(__i, __ret);\n \t  \n \t  int_type __tmp;\n-\t  if (this->_M_in_beg < this->_M_in_cur)\n+\t  if (this->eback() < this->gptr())\n \t    {\n-\t      _M_move_in_cur(-1);\n-\t      __tmp = traits_type::to_int_type(*this->_M_in_cur);\n+\t      this->gbump(-1);\n+\t      __tmp = traits_type::to_int_type(*this->gptr());\n \t    }\n \t  else if (this->seekoff(-1, ios_base::cur) >= 0)\n \t    {\n@@ -301,7 +298,8 @@ namespace std\n \t  else if (!__testpb)\n \t    {\n \t      _M_create_pback();\n-\t      *this->_M_in_cur = traits_type::to_char_type(__i); \n+\t      _M_reading = true;\n+\t      *this->gptr() = traits_type::to_char_type(__i); \n \t      __ret = __i;\n \t    }\n \t}\n@@ -318,37 +316,50 @@ namespace std\n       const bool __testeof = traits_type::eq_int_type(__c, __ret);\n       const bool __testout = this->_M_mode & ios_base::out;\n       \n-      if (__testout)\n+      if (__testout && !_M_reading)\n \t{\n-\t  if (this->_M_out_beg < this->_M_out_lim)\n+\t  if (this->pbase() < this->pptr())\n \t    {\n-\t      // Need to restore current position. The position of the\n-\t      // external byte sequence (_M_file) corresponds to\n-\t      // _M_filepos, and we need to move it to _M_out_beg for\n-\t      // the write.\n-\t      if (_M_filepos != this->_M_out_beg)\n-\t\t_M_file.seekoff(this->_M_out_beg - _M_filepos, ios_base::cur);\n-\n \t      // If appropriate, append the overflow char.\n \t      if (!__testeof)\n-\t\t*this->_M_out_lim++ = traits_type::to_char_type(__c);\n+\t\t{\n+\t\t  *this->pptr() = traits_type::to_char_type(__c);\n+\t\t  this->pbump(1);\n+\t\t}\n \t      \n \t      // Convert pending sequence to external representation,\n \t      // output.\n-\t      if (_M_convert_to_external(this->_M_out_beg,\n-\t\t\t\t\t this->_M_out_lim - this->_M_out_beg)\n+\t      if (_M_convert_to_external(this->pbase(),\n+\t\t\t\t\t this->pptr() - this->pbase())\n \t\t  && (!__testeof || (__testeof && !_M_file.sync())))\n \t\t{\n \t\t  _M_set_buffer(0);\n \t\t  __ret = traits_type::not_eof(__c);\n \t\t}\n \t    }\n+\t  else if (this->_M_buf_size > 1)\n+\t    {\n+\t      // Overflow in 'uncommitted' mode: set _M_writing, set\n+\t      // the buffer to the initial 'write' mode, and put __c\n+\t      // into the buffer.\n+\t      _M_set_buffer(0);\n+\t      _M_writing = true;\n+\t      if (!__testeof)\n+\t\t{\n+\t\t  *this->pptr() = traits_type::to_char_type(__c);\n+\t\t  this->pbump(1);\n+\t\t}\n+\t      __ret = traits_type::not_eof(__c);\n+\t    }\n \t  else\n \t    {\n \t      // Unbuffered.\n \t      char_type __conv = traits_type::to_char_type(__c);\n \t      if (__testeof || _M_convert_to_external(&__conv, 1))\n-\t\t__ret = traits_type::not_eof(__c);\n+\t\t{\t\t  \n+\t\t  _M_writing = true;\n+\t\t  __ret = traits_type::not_eof(__c);\n+\t\t}\n \t    }\n \t}\n       _M_last_overflowed = true;\t\n@@ -393,7 +404,7 @@ namespace std\n \t    }\n \t  else\n \t    {\n-\t      // Result == error .\n+\t      // Result == error.\n \t      __blen = 0;\n \t    }\n \t  \n@@ -407,7 +418,7 @@ namespace std\n \t  if (__r == codecvt_base::partial)\n \t    {\n \t      const char_type* __iresume = __iend;\n-\t      streamsize __rlen = this->_M_out_lim - __iend;\n+\t      streamsize __rlen = this->pptr() - __iend;\n \t      __r = _M_codecvt->out(_M_state_cur, __iresume,\n \t\t\t\t    __iresume + __rlen, __iend, __buf, \n \t\t\t\t    __buf + __blen, __bend);\n@@ -446,7 +457,9 @@ namespace std\n \t  // Step 2: Use the external array.\n \t  this->_M_buf = __s;\n \t  this->_M_buf_size = __n;\n-\t  _M_set_buffer(0);\n+\t  _M_reading = false;\n+\t  _M_writing = false;\n+\t  _M_set_buffer(-1);\n \t}\n       _M_last_overflowed = false;\t\n       return this; \n@@ -473,41 +486,26 @@ namespace std\n \t  // Ditch any pback buffers to avoid confusion.\n \t  _M_destroy_pback();\n \n-\t  if (__way != ios_base::cur || __off != 0)\n-\t    { \n-\t      // Sync the internal and external streams.\t      \n-\t      const bool __testget = this->_M_in_beg < this->_M_in_end;\n-\t      const bool __testput = this->_M_out_beg < this->_M_out_lim;\n-\t      off_type __computed_off = __width * __off;\n-\n-\t      if (__testput || _M_last_overflowed)\n-\t\t{\n-\t\t  // Part one: update the output sequence.\n-\t\t  this->sync();\n-\n-\t\t  // Part two: output unshift sequence.\n-\t\t  _M_output_unshift();\n-\t\t}\n-\t      else if (__testget && __way == ios_base::cur)\n-\t\t__computed_off += this->_M_in_cur - _M_filepos;\n-\n-\t      // Return pos_type(off_type(-1)) in case of failure.\n-\t      __ret = _M_file.seekoff(__computed_off, __way, __mode);\n-\t      _M_set_buffer(0);\n-\t    }\n-\t  else\n+\t  // Sync the internal and external streams.\t      \n+\t  off_type __computed_off = __width * __off;\n+\t  \n+\t  if (this->pbase() < this->pptr()\n+\t      || _M_last_overflowed)\n \t    {\n-\t      // NB: Need to do this in case _M_file in indeterminate\n-\t      // state, ie _M_file._offset == -1\n-\t      pos_type __tmp = _M_file.seekoff(__off, ios_base::cur, __mode);\n-\t      if (__tmp >= 0)\n-\t\t{\n-\t\t  // Seek successful.\n-\t\t  __ret = __tmp;\n-\t\t  __ret += std::max(this->_M_out_cur, this->_M_in_cur) \n-\t\t           - _M_filepos;\n-\t\t}\n+\t      // Part one: update the output sequence.\n+\t      this->sync();\n+\t      \n+\t      // Part two: output unshift sequence.\n+\t      _M_output_unshift();\n \t    }\n+\t  else if (_M_reading && __way == ios_base::cur)\n+\t    __computed_off += this->gptr() - this->egptr();\n+\t  \n+\t  // Return pos_type(off_type(-1)) in case of failure.\n+\t  __ret = _M_file.seekoff(__computed_off, __way, __mode);\n+\t  _M_reading = false;\n+\t  _M_writing = false;\n+\t  _M_set_buffer(-1);\n \t}\n       _M_last_overflowed = false;\t\n       return __ret;"}, {"sha": "d78d8ea45d9b6858def3e819656ebe4509be4e6d", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -45,10 +45,10 @@ namespace std\n     sbumpc()\n     {\n       int_type __ret;\n-      if (_M_in_cur < _M_in_end)\n+      if (this->gptr() < this->egptr())\n \t{\n-\t  __ret = traits_type::to_int_type(*this->_M_in_cur);\n-\t  _M_move_in_cur(1);\n+\t  __ret = traits_type::to_int_type(*this->gptr());\n+\t  this->gbump(1);\n \t}\n       else \n \t__ret = this->uflow();\n@@ -61,13 +61,13 @@ namespace std\n     sputbackc(char_type __c) \n     {\n       int_type __ret;\n-      const bool __testpos = _M_in_beg < _M_in_cur;\n-      if (!__testpos || !traits_type::eq(__c, this->_M_in_cur[-1]))\n+      const bool __testpos = this->eback() < this->gptr();\n+      if (!__testpos || !traits_type::eq(__c, this->gptr()[-1]))\n \t__ret = this->pbackfail(traits_type::to_int_type(__c));\n       else \n \t{\n-\t  _M_move_in_cur(-1);\n-\t  __ret = traits_type::to_int_type(*this->_M_in_cur);\n+\t  this->gbump(-1);\n+\t  __ret = traits_type::to_int_type(*this->gptr());\n \t}\n       return __ret;\n     }\n@@ -78,10 +78,10 @@ namespace std\n     sungetc()\n     {\n       int_type __ret;\n-      if (_M_in_beg < _M_in_cur)\n+      if (this->eback() < this->gptr())\n \t{\n-\t  _M_move_in_cur(-1);\n-\t  __ret = traits_type::to_int_type(*_M_in_cur);\n+\t  this->gbump(-1);\n+\t  __ret = traits_type::to_int_type(*this->gptr());\n \t}\n       else \n \t__ret = this->pbackfail();\n@@ -94,10 +94,10 @@ namespace std\n     sputc(char_type __c)\n     {\n       int_type __ret;\n-      if (_M_out_cur < _M_out_end)\n+      if (this->pptr() < this->epptr())\n \t{\n-\t  *_M_out_cur = __c;\n-\t  _M_move_out_cur(1);\n+\t  *this->pptr() = __c;\n+\t  this->pbump(1);\n \t  __ret = traits_type::to_int_type(__c);\n \t}\n       else\n@@ -113,15 +113,15 @@ namespace std\n       streamsize __ret = 0;\n       while (__ret < __n)\n \t{\n-\t  const size_t __buf_len = _M_in_end - _M_in_cur;\n+\t  const size_t __buf_len = this->egptr() - this->gptr();\n \t  if (__buf_len)\n \t    {\n \t      const size_t __remaining = __n - __ret;\n \t      const size_t __len = std::min(__buf_len, __remaining);\n-\t      traits_type::copy(__s, _M_in_cur, __len);\n+\t      traits_type::copy(__s, this->gptr(), __len);\n \t      __ret += __len;\n \t      __s += __len;\n-\t      _M_move_in_cur(__len);\n+\t      this->gbump(__len);\n \t    }\n \t  \n \t  if (__ret < __n)\n@@ -147,15 +147,15 @@ namespace std\n       streamsize __ret = 0;\n       while (__ret < __n)\n \t{\n-\t  const size_t __buf_len = _M_out_end - _M_out_cur;\n+\t  const size_t __buf_len = this->epptr() - this->pptr();\n \t  if (__buf_len)\n \t    {\n \t      const size_t __remaining = __n - __ret;\n \t      const size_t __len = std::min(__buf_len, __remaining);\n-\t      traits_type::copy(_M_out_cur, __s, __len);\n+\t      traits_type::copy(this->pptr(), __s, __len);\n \t      __ret += __len;\n \t      __s += __len;\n-\t      _M_move_out_cur(__len);\n+\t      this->pbump(__len);\n \t    }\n \n \t  if (__ret < __n)\n@@ -189,12 +189,12 @@ namespace std\n \t  typename _Traits::int_type __c = __sbin->sgetc();\n \t  while (!_Traits::eq_int_type(__c, _Traits::eof()))\n \t    {\n-\t      const size_t __n = __sbin->_M_in_end - __sbin->_M_in_cur;\n+\t      const size_t __n = __sbin->egptr() - __sbin->gptr();\n \t      if (__n > 1)\n \t\t{\n-\t\t  const size_t __wrote = __sbout->sputn(__sbin->_M_in_cur,\n+\t\t  const size_t __wrote = __sbout->sputn(__sbin->gptr(),\n \t\t\t\t\t\t\t__n);\n-\t\t  __sbin->_M_move_in_cur(__wrote);\n+\t\t  __sbin->gbump(__wrote);\n \t\t  __ret += __wrote;\n \t\t  if (__wrote < __n)\n \t\t    break;"}, {"sha": "574a62b816032dd215069a373bf1df95c331f318", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -127,7 +127,9 @@ namespace __gnu_cxx\n \t  this->_M_mode = __mode;\n \t  this->_M_buf_size = __size;\n \t  _M_allocate_internal_buffer();\n-\t  _M_set_buffer(0);\n+\t  this->_M_reading = false;\n+\t  this->_M_writing = false;\n+\t  _M_set_buffer(-1);\n \t}\n     }\n \n@@ -142,7 +144,9 @@ namespace __gnu_cxx\n \t  this->_M_mode = __mode;\n \t  this->_M_buf_size = __size;\n \t  _M_allocate_internal_buffer();\n-\t  _M_set_buffer(0);\n+\t  this->_M_reading = false;\n+\t  this->_M_writing = false;\n+\t  _M_set_buffer(-1);\n \t}\n     }\n } // namespace __gnu_cxx"}, {"sha": "605fad22b3e7bfcdb3c775b7d6ef6d4fad9b1c63", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -137,19 +137,18 @@ namespace std\n        *  @endif\n       */\n       bool\t\t\t_M_buf_allocated;\n-      \n+\n+      // _M_reading == false && _M_writing == false for 'uncommitted' mode;  \n+      // _M_reading == true for 'read' mode;\n+      // _M_writing == true for 'write' mode;\n+      //\n+      // NB: _M_reading == true && _M_writing == true is unused.\n+      bool                      _M_reading;\n+      bool                      _M_writing;\n+\n       // XXX Needed?\n       bool\t\t\t_M_last_overflowed;\n \n-      // The position in the buffer corresponding to the external file\n-      // pointer.\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n-      char_type*\t\t_M_filepos;\n-\n       //@{\n       /**\n        *  @if maint\n@@ -175,8 +174,8 @@ namespace std\n       {\n \tif (!_M_pback_init)\n \t  {\n-\t    _M_pback_cur_save = this->_M_in_cur;\n-\t    _M_pback_end_save = this->_M_in_end;\n+\t    _M_pback_cur_save = this->gptr();\n+\t    _M_pback_end_save = this->egptr();\n \t    this->setg(&_M_pback, &_M_pback, &_M_pback + 1);\n \t    _M_pback_init = true;\n \t  }\n@@ -191,7 +190,7 @@ namespace std\n \tif (_M_pback_init)\n \t  {\n \t    // Length _M_in_cur moved in the pback buffer.\n-\t    _M_pback_cur_save += this->_M_in_cur != this->_M_in_beg;\n+\t    _M_pback_cur_save += this->gptr() != this->eback();\n \t    this->setg(this->_M_buf, _M_pback_cur_save, _M_pback_end_save);\n \t    _M_pback_init = false;\n \t  }\n@@ -365,23 +364,23 @@ namespace std\n       sync()\n       {\n \tint __ret = 0;\n-\tconst bool __testput = this->_M_out_beg < this->_M_out_lim;\n \n \t// Make sure that the internal buffer resyncs its idea of\n \t// the file position with the external file.\n-\tif (__testput)\n+\t// NB: _M_file.sync() will be called within.\n+\tif (this->pbase() < this->pptr())\n \t  {\n-\t    // Need to restore current position after the write.\n-\t    const off_type __off = this->_M_out_cur - this->_M_out_lim;\n-\n-\t    // _M_file.sync() will be called within.\n-\t    if (traits_type::eq_int_type(this->overflow(), traits_type::eof()))\n+\t    int_type __tmp = this->overflow();\n+\t    if (traits_type::eq_int_type(__tmp, traits_type::eof()))\n \t      __ret = -1;\n-\t    else if (__off)\n-\t      _M_file.seekoff(__off, ios_base::cur);\n+\t    else\n+\t      {\n+\t\t_M_set_buffer(-1);\n+\t\t_M_reading = false;\n+\t\t_M_writing = false;\n+\t      }\n \t  }\n-\telse\n-\t  _M_file.sync();\n+\n \t_M_last_overflowed = false;\n \treturn __ret;\n       }\n@@ -398,9 +397,10 @@ namespace std\n \tstreamsize __ret = 0;\n \tif (this->_M_pback_init)\n \t  {\n-\t    if (__n && this->_M_in_cur == this->_M_in_beg)\n+\t    if (__n && this->gptr() == this->eback())\n \t      {\n-\t\t*__s++ = *this->_M_in_cur++;\n+\t\t*__s++ = *this->gptr();\n+\t\tthis->gbump(1);\n \t\t__ret = 1;\n \t      }\n \t    _M_destroy_pback();\n@@ -427,10 +427,13 @@ namespace std\n       _M_output_unshift();\n \n       // This function sets the pointers of the internal buffer, both get\n-      // and put areas. Typically, __off == _M_in_end - _M_in_beg upon\n-      // _M_underflow; __off == 0 upon overflow, seekoff, open, setbuf.\n+      // and put areas. Typically:\n+      //\n+      //  __off == egptr() - eback() upon underflow/uflow ('read' mode);\n+      //  __off == 0 upon overflow ('write' mode);\n+      //  __off == -1 upon open, setbuf, seekoff/pos ('uncommitted' mode).\n       // \n-      // NB: _M_out_end - _M_out_beg == _M_buf_size - 1, since _M_buf_size\n+      // NB: epptr() - pbase() == _M_buf_size - 1, since _M_buf_size\n       // reflects the actual allocated memory and the last cell is reserved\n       // for the overflow char of a full put area.\n       void\n@@ -439,14 +442,15 @@ namespace std\n  \tconst bool __testin = this->_M_mode & ios_base::in;\n  \tconst bool __testout = this->_M_mode & ios_base::out;\n \t\n-\tif (__testin)\n+\tif (__testin && __off > 0)\n \t  this->setg(this->_M_buf, this->_M_buf, this->_M_buf + __off);\n-\tif (__testout && this->_M_buf_size > 1)\n-\t  {\n-\t    this->setp(this->_M_buf, this->_M_buf + this->_M_buf_size - 1);\n-\t    this->_M_out_lim += __off;\n-\t  }\n-\t_M_filepos = this->_M_buf + __off;\n+\telse\n+\t  this->setg(this->_M_buf, this->_M_buf, this->_M_buf);\n+\n+\tif (__testout && __off == 0 && this->_M_buf_size > 1 )\n+\t  this->setp(this->_M_buf, this->_M_buf + this->_M_buf_size - 1);\n+\telse\n+\t  this->setp(NULL, NULL);\n       }\n     };\n "}, {"sha": "b69de0313a8a310291ad436957968c0df7047623", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 9, "deletions": 68, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -176,25 +176,6 @@ namespace std\n       char_type* \t\t_M_out_cur;    // Current put area. \n       char_type* \t\t_M_out_end;    // End of put area.\n \n-      //@{\n-      /**\n-       *  @if maint\n-       *  setp (and _M_set_buffer(0) in basic_filebuf) set it equal to\n-       *  _M_out_beg, then at each put operation it may be moved\n-       *  forward (toward _M_out_end) by _M_move_out_cur.\n-       *  @endif\n-      */      \n-      char_type*                _M_out_lim;    // End limit of used put area.\n-      //@}\n-\n-      /**\n-       *  @if maint\n-       *  True iff _M_in_* and _M_out_* buffers should always point to\n-       *  the same place.  True for fstreams, false for sstreams.\n-       *  @endif\n-      */\n-      bool \t\t\t_M_buf_unified;\t\n-\n       /**\n        *  @if maint\n        *  Place to stash in || out || in | out settings for current streambuf.\n@@ -216,50 +197,11 @@ namespace std\n       */\n       fpos<__state_type>\t_M_pos;\n \n-      // Correctly sets the _M_in_cur pointer, and bumps the\n-      // _M_out_cur pointer as well if necessary.\n-      void \n-      _M_move_in_cur(off_type __n) // argument needs to be +-\n-      {\n-\tconst bool __testout = _M_out_cur;\n-\t_M_in_cur += __n;\n-\tif (__testout && _M_buf_unified)\n-\t  _M_out_cur += __n;\n-      }\n-\n-      // Correctly sets the _M_out_cur pointer, and bumps the\n-      // appropriate _M_out_lim and _M_in_end pointers as well. Necessary\n-      // for the un-tied stringbufs, in in|out mode.\n-      // Invariant:\n-      // __n + _M_out_[cur, lim] <= _M_out_end\n-      // Assuming all _M_out_[beg, cur, lim] pointers are operating on\n-      // the same range:\n-      // _M_out_beg <= _M_*_ <= _M_out_end\n-      void \n-      _M_move_out_cur(off_type __n) // argument needs to be +-\n-      {\n-\t_M_out_cur += __n;\n-\tif (__builtin_expect(_M_buf_unified, false))\n-\t  {\n-\t    const bool __testin = _M_in_cur;\n-\t    if (__testin)\n-\t      _M_in_cur += __n;\n-\t    if (_M_out_cur > _M_out_lim)\n-\t      {\n-\t\t_M_out_lim = _M_out_cur;\n-\t\t// NB: in | out buffers drag the _M_in_end pointer along...\n-\t\tif (__testin)\n-\t\t  _M_in_end += __n;\n-\t      }\n-\t  }\n-      }\n-\n   public:\n       /// Destructor deallocates no buffer space.\n       virtual \n       ~basic_streambuf() \n       {\n-\t_M_buf_unified = false;\n \t_M_mode = ios_base::openmode(0);\n       }\n \n@@ -330,7 +272,7 @@ namespace std\n       streamsize \n       in_avail() \n       { \n-\tconst streamsize __ret = _M_in_end - _M_in_cur;\n+\tconst streamsize __ret = this->egptr() - this->gptr();\n \treturn __ret ? __ret : this->showmanyc();\n       }\n \n@@ -373,8 +315,8 @@ namespace std\n       sgetc()\n       {\n \tint_type __ret;\n-\tif (_M_in_cur < _M_in_end)\n-\t  __ret = traits_type::to_int_type(*this->_M_in_cur);\n+\tif (this->gptr() < this->egptr())\n+\t  __ret = traits_type::to_int_type(*this->gptr());\n \telse \n \t  __ret = this->underflow();\n \treturn __ret;\n@@ -461,7 +403,6 @@ namespace std\n       basic_streambuf()\n       : _M_in_beg(0), _M_in_cur(0), _M_in_end(0), \n       _M_out_beg(0), _M_out_cur(0), _M_out_end(0),\n-      _M_out_lim(0), _M_buf_unified(false), \n       _M_mode(ios_base::openmode(0)),_M_buf_locale(locale()) \n       { }\n \n@@ -553,7 +494,7 @@ namespace std\n       void \n       setp(char_type* __pbeg, char_type* __pend)\n       { \n-\t_M_out_beg = _M_out_cur = _M_out_lim = __pbeg; \n+\t_M_out_beg = _M_out_cur = __pbeg; \n \t_M_out_end = __pend;\n       }\n \n@@ -703,10 +644,10 @@ namespace std\n \tint_type __ret = traits_type::eof();\n \tconst bool __testeof = traits_type::eq_int_type(this->underflow(), \n \t\t\t\t\t\t\t__ret);\n-\tif (!__testeof && _M_in_cur < _M_in_end)\n+\tif (!__testeof && this->gptr() < this->egptr())\n \t  {\n-\t    __ret = traits_type::to_int_type(*_M_in_cur);\n-\t    ++_M_in_cur;\n+\t    __ret = traits_type::to_int_type(*this->gptr());\n+\t    this->gbump(1);\n \t  }\n \treturn __ret;    \n       }\n@@ -786,8 +727,8 @@ namespace std\n       void \n       stossc() \n       {\n-\tif (_M_in_cur < _M_in_end) \n-\t  ++_M_in_cur;\n+\tif (this->gptr() < this->egptr()) \n+\t  this->gbump(1);\n \telse \n \t  this->uflow();\n       }"}, {"sha": "451518c1f230349a1ec6c63e28294e4fe8956a72", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sbumpc/char/1-io.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-io.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -46,21 +46,21 @@ void test05()\n   {\n     constraint_filebuf fb_03; \n     fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n     int_type c5 = fb_03.sbumpc();\n     VERIFY( c5 == traits_type::eof() );\n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n   }\n \n   // in | out 2\n   {\n     constraint_filebuf fb_01; \n     fb_01.open(name_01, ios_base::in | ios_base::out);\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n \n-     int_type c1 = fb_01.sbumpc();\n+    int_type c1 = fb_01.sbumpc();\n     VERIFY( c1 == '/' );\n     int_type c3 = fb_01.sbumpc();\n     VERIFY( c3 == '/' );\n@@ -80,7 +80,7 @@ void test05()\n     VERIFY( c2 == '9' );\n     VERIFY( c3 == '0' );\n \n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( fb_01.read_position() );\n   }\n }"}, {"sha": "69559a9a69c43e7a4df195ae23d5e6481331f869", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sbumpc/char/1-out.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-out.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -45,13 +45,13 @@ void test05()\n   {\n     constraint_filebuf fb_02; \n     fb_02.open(name_02, ios_base::out | ios_base::trunc);\n-    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.write_position() );\n     VERIFY( !fb_02.read_position() );\n     int_type c2 = fb_02.sbumpc();\n     VERIFY( c2 == traits_type::eof() );\n     int_type c4 = fb_02.sbumpc();\n     VERIFY( c4 == traits_type::eof() );\n-    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.write_position() );\n     VERIFY( !fb_02.read_position() );\n   }\n }"}, {"sha": "d310d51387105fd2d09fe113ca9456e2e3ecad53", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/3-io.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-io.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -59,7 +59,7 @@ void test05()\n   {\n     constraint_filebuf fb_03;\n     fb_03.open(name_01, ios_base::out | ios_base::in);\n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n     // 27filebuf-3.txt = bd23456789:;<=>?...\n     //beg\n@@ -111,7 +111,7 @@ void test05()\n     fb_03.pubsync(); \n     c3 = fb_03.sgetc();\n     VERIFY( c1 == c3 );\n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( fb_03.read_position() );\n   }\n }"}, {"sha": "6efbb9512ae166aa52fdcbfc7c6dd7c382fa285b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/3-io.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-io.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -60,7 +60,7 @@ void test05()\n   {\n     constraint_filebuf fb_03;\n     fb_03.open(name_01, ios_base::out | ios_base::in);\n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n     pt_1 = fb_03.pubseekoff(78, ios_base::beg);\n     off_1 = pt_1;\n@@ -84,7 +84,7 @@ void test05()\n     VERIFY( off_1 > off_2 );\n     fb_03.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n     fb_03.pubsync();\n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n     fb_03.close();\n     VERIFY( !fb_03.is_open() );"}, {"sha": "25511d93ea636e6c4600e9e44e2976b6a9d2b84a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/setbuf/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsetbuf%2Fchar%2F1.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -79,7 +79,7 @@ void test05()\n     // setbuf\n     // pubsetbuf(char_type* s, streamsize n)\n     f_tmp.pubsetbuf(0, 0);\n-    VERIFY( !f_tmp.check_pointers() );\n+    VERIFY( f_tmp.check_pointers() );\n   }\n }\n "}, {"sha": "7a7547680021b83515de9eea005142c4cffc7de7", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetc/char/1-io.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-io.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -48,21 +48,21 @@ void test05()\n   {\n     constraint_filebuf fb_03; // in | out\n     fb_03.open(name_03, ios::out | ios::in | ios::trunc); \n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n     c1 = fb_03.sgetc();\n     c2 = fb_03.sbumpc();\n     VERIFY( c1 == traits_type::eof() );\n     VERIFY( c1 == c2 );\n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n   }\n \n   // in | out 2\n   {\n     constraint_filebuf fb_01; // in \n     fb_01.open(name_01, ios::in | ios::out);\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     c1 = fb_01.sgetc();\n     VERIFY( c1 == '/' );\n     c2 = fb_01.sgetc();\n@@ -74,7 +74,7 @@ void test05()\n     VERIFY( c1 == '/' );\n     VERIFY( c2 == ' ' );\n     VERIFY( c3 == ' ' );\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( fb_01.read_position() );\n   }\n }"}, {"sha": "41e18e435e4d506d8296b2928874b5204346e753", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetc/char/1-out.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-out.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -47,7 +47,7 @@ void test05()\n   {\n     constraint_filebuf fb_02; // out\n     fb_02.open(name_02, ios::out | ios::trunc);    \n-    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.write_position() );\n     VERIFY( !fb_02.read_position() );\n     c1 = fb_02.sgetc();\n     VERIFY( c1 == traits_type::eof() );\n@@ -57,7 +57,7 @@ void test05()\n     c1 = fb_02.sbumpc();\n     c2 = fb_02.sgetc();\n     VERIFY( c1 == c2 );\n-    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.write_position() );\n     VERIFY( !fb_02.read_position() );\n   }\n }"}, {"sha": "e1d9a38f75efac2d32eb31d0550f907b25254303", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/1-io.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-io.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -55,11 +55,11 @@ void test05()\n   {\n     constraint_filebuf fb_03; \n     fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n     strmsz_1 = fb_03.sgetn(carray1, 10);\n     VERIFY( strmsz_1 == 0 ); \n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n   }\n \n@@ -70,7 +70,7 @@ void test05()\n     // to trigger the same underflow situation everywhere.\n     fb_01.pubsetbuf(buffer, 8192);\n     fb_01.open(name_01, ios_base::in | ios_base::out);\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     strmsz_1 = fb_01.in_avail();\n     strmsz_2 = fb_01.sgetn(carray1, 10);\n     VERIFY( strmsz_2 == 10 );\n@@ -87,7 +87,7 @@ void test05()\n     VERIFY( strmsz_1 > 0 );\n     strmsz_2 = fb_01.sgetn(carray2, strmsz_1 + 5);\n     VERIFY( strmsz_1 == strmsz_2 ); //at the end of the actual file \n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( !fb_01.read_position() );\n   }\n }"}, {"sha": "eb710f2d056817c71ee2565211d261bc2366e473", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/1-out.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-out.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -53,7 +53,7 @@ void test05()\n   {\n     constraint_filebuf fb_02;\n     fb_02.open(name_02, ios_base::out | ios_base::trunc);\n-    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.write_position() );\n     VERIFY( !fb_02.read_position() );\n     strmsz_2 = fb_02.in_avail();\n     strmsz_2 = fb_02.sgetn(carray2, 10);\n@@ -66,7 +66,7 @@ void test05()\n     VERIFY( strmsz_2 == 0 );\n     c4 = fb_02.sgetc(); \n     VERIFY( c4 == traits_type::eof() );\n-    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.write_position() );\n     VERIFY( !fb_02.read_position() );\n   }\n }"}, {"sha": "aa5000d987a30da4aa7de5fbedc61bfb61124a9b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/snextc/char/1-io.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-io.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -48,19 +48,19 @@ void test05()\n   {\n     constraint_filebuf fb_03; \n     fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc);\n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n     c3 = fb_03.snextc();\n     VERIFY( c3 == traits_type::eof() );\n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n  }\n \n   // in | out 2\n   {  \n     constraint_filebuf fb_01; \n     fb_01.open(name_01, ios_base::in | ios_base::out);\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     int_type c4 = fb_01.sbumpc();\n     VERIFY( c4 == '/' );\n     c4 = fb_01.sbumpc();\n@@ -71,7 +71,7 @@ void test05()\n     VERIFY( c1 == '9' );\n     c4 = fb_01.sgetc();\n     VERIFY( c4 == '9' );\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( fb_01.read_position() );\n   }\n }"}, {"sha": "118383a978e4ccb895c096595c483cfe57315035", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/snextc/char/1-out.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-out.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -48,13 +48,13 @@ void test05()\n   {    \n     constraint_filebuf fb_02;\n     fb_02.open(name_02, ios_base::out | ios_base::trunc);\n-    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.write_position() );\n     VERIFY( !fb_02.read_position() );\n     c2 = fb_02.snextc();\n     VERIFY( c2 == traits_type::eof() );\n     c2 = fb_02.snextc();\n     VERIFY( c2 == traits_type::eof() );\n-    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.write_position() );\n     VERIFY( !fb_02.read_position() );\n   }\n }"}, {"sha": "f43191cc730df547ad17879daad6e353bde31dd9", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/1-io.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-io.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -50,7 +50,7 @@ void test01()\n   {\n     constraint_filebuf fb_01; \n     fb_01.open(name_01, ios_base::out | ios_base::in | ios_base::trunc);\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( !fb_01.read_position() );\n     strmsz_1 = fb_01.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n     strmsz_2 = fb_01.sputn(\", i wanna reach out and\", 10);\n@@ -90,7 +90,7 @@ void test01()\n     c3 = fb_01.sgetc();\n     VERIFY( c3 == c2 );\n     VERIFY( strmsz_1 + 1 == strmsz_2 );\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( fb_01.read_position() );\n   }\n }"}, {"sha": "83d57e2fc61e33a44cae6cdf32e596314df1e550", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/1-out.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-out.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -48,7 +48,7 @@ void test01()\n   {\n     constraint_filebuf fb_01; // out\n     fb_01.open(name_01, ios::out | ios::trunc);    \n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( !fb_01.read_position() );\n     c1 = fb_01.sgetc();\n     VERIFY( c1 == traits_type::eof() );\n@@ -58,7 +58,7 @@ void test01()\n     c1 = fb_01.sbumpc();\n     c2 = fb_01.sputbackc('a');\n     VERIFY( c1 == c2 );\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( !fb_01.read_position() );\n   }\n }"}, {"sha": "72350c0a8b8c76918f281edc3bcf5a200f44e83a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/1-io.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-io.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -52,7 +52,7 @@ void test05()\n   {\n     constraint_filebuf fb_03; \n     fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc);\n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n     c1 = fb_03.sputc('b'); \n     VERIFY( c1 == 'b' );"}, {"sha": "f4b5b73f0e79cf3a5b43e730a7a53f02803902c0", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/1-out.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-out.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -51,7 +51,7 @@ void test05()\n   {\n     constraint_filebuf fb_02; \n     fb_02.open(name_02, ios_base::out | ios_base::trunc);\n-    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.write_position() );\n     VERIFY( !fb_02.read_position() );\n     c1 = fb_02.sputc('a');\n     VERIFY( c1 == 'a' ); "}, {"sha": "1d100dd3ede01cae9cfb24d800cf3a9c111e38a1", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/9701-2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F9701-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F9701-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F9701-2.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -55,7 +55,7 @@ void test11()\n   dfbuf_01.open(name_05, std::ios_base::out);\n   over_called = false;\n   dfbuf_01.sputc('i');\n-  VERIFY( !over_called );\n+  VERIFY( over_called );\n   over_expected = dfbuf_01.pub_epptr() == dfbuf_01.pub_pptr();\n   over_called = false;\n   dfbuf_01.sputc('v');"}, {"sha": "9ec3d259ca81f2a50113465bda33e6eaad791ea9", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/1-io.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-io.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -50,7 +50,7 @@ void test05()\n   {\n     constraint_filebuf fb_03; \n     fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc);\n-    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.write_position() );\n     VERIFY( !fb_03.read_position() );\n     strmsz_1 = fb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n     VERIFY( strmsz_1 == 10 );"}, {"sha": "f98bcd745b1596ff8baa05a53a364c36b1aa6688", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/1-out.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-out.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -49,7 +49,7 @@ void test05()\n   {\n     constraint_filebuf fb_02; \n     fb_02.open(name_02, ios_base::out | ios_base::trunc);\n-    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.write_position() );\n     VERIFY( !fb_02.read_position() );\n     strmsz_1 = fb_02.sputn(\"racadabras\", 10);\n     VERIFY( strmsz_1 == 10 );  "}, {"sha": "b675d79d0bb87bf80c31494025ec0e085b9682ca", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/9701-1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F9701-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F9701-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F9701-1.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -59,7 +59,7 @@ void test11()\n   dfbuf_02.open(name_05, std::ios_base::out);\n   over_called = false;\n   dfbuf_02.sputn(\"sonne's\", 7);\n-  VERIFY( !over_called );\n+  VERIFY( over_called );\n   over_expected = dfbuf_02.pub_epptr() == dfbuf_02.pub_pptr();\n   over_called = false;\n   dfbuf_02.sputn(\" peak\", 5);"}, {"sha": "78464834bec946983943d8974cebfeab81dd6824", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sungetc/char/1-io.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-io.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -50,7 +50,7 @@ void test01()\n   {\n     constraint_filebuf fb_01; \n     fb_01.open(name_01, ios_base::out | ios_base::in | ios_base::trunc);\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( !fb_01.read_position() );\n     fb_01.sputc('u');\n     fb_01.sputc('v');\n@@ -71,7 +71,7 @@ void test01()\n     VERIFY( c1 != c2 );\n     VERIFY( strmsz_2 != strmsz_1 );\n     VERIFY( strmsz_2 == 1 );\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( fb_01.read_position() );\n   }\n }"}, {"sha": "99cf7ed383cb68152c1eee09165b50342b1de8db", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sungetc/char/1-out.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b460210af83307df263fc57eb2603ca314eb59/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsungetc%2Fchar%2F1-out.cc?ref=71b460210af83307df263fc57eb2603ca314eb59", "patch": "@@ -48,7 +48,7 @@ void test01()\n   {\n     constraint_filebuf fb_01; // out\n     fb_01.open(name_01, ios::out | ios::trunc);    \n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( !fb_01.read_position() );\n     c1 = fb_01.sgetc();\n     VERIFY( c1 == traits_type::eof() );\n@@ -58,7 +58,7 @@ void test01()\n     c1 = fb_01.sbumpc();\n     c2 = fb_01.sungetc();\n     VERIFY( c1 == c2 );\n-    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.write_position() );\n     VERIFY( !fb_01.read_position() );\n   }\n }"}]}