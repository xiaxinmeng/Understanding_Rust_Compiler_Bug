{"sha": "1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmNDQ1NWFhY2Q4YWViM2E0Y2E1OWU3MDI0Y2M4YTA4MjllNDEzNA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2015-10-16T10:54:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T10:54:13Z"}, "message": "exp_ch3.adb (Expand_N_Full_Type_Declaration): Do not capture, set and restore the Ghost mode.\n\n2015-10-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch3.adb (Expand_N_Full_Type_Declaration): Do not capture,\n\tset and restore the Ghost mode.\n\t(Expand_N_Object_Declaration): Do not capture, set and restore the\n\tGhost mode.\n\t(Freeze_Type): Redo the capture and restore of the Ghost mode.\n\t(Restore_Globals): Removed.\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): Redo the capture\n\tand restore of the Ghost mode.\n\t(Restore_Globals): Removed.\n\t* exp_ch6.adb (Expand_N_Procedure_Call_Statement):\n\tRedo the capture and restore of the Ghost mode.\n\t(Expand_N_Subprogram_Body): Redo the capture, set and restore\n\tof the Ghost mode.\n\t(Expand_N_Subprogram_Declaration): Do not\n\tcapture, set and restore the Ghost mode.\n\t(Restore_Globals): Removed.\n\t* exp_ch7.adb (Expand_N_Package_Body): Redo the capture, set\n\tand restore of the Ghost mode.\n\t(Expand_N_Package_Declaration): Do not capture, set and restore the\n\tGhost mode.\n\t* exp_ch8.adb (Expand_N_Exception_Renaming_Declaration):\n\tRedo the capture and restore of the Ghost mode.\n\t(Expand_N_Object_Renaming_Declaration): Redo\n\tthe capture and restore of the Ghost mode.\n\t(Expand_N_Package_Renaming_Declaration):\n\tRedo the capture and restore of the Ghost mode.\n\t(Expand_N_Subprogram_Renaming_Declaration): Redo the capture\n\tand restore of the Ghost mode.\n\t* exp_ch11.adb Remove with and use clauses for Ghost.\n\t(Expand_N_Exception_Declaration): Do not capture, set and restore\n\tthe Ghost mode.\n\t* exp_disp.adb (Make_DT): Redo the capture and restore of the\n\tGhost mode.\n\t(Restore_Globals): Removed.\n\t* exp_prag.adb (Expand_Pragma_Check): Do not capture, set\n\tand restore the Ghost mode.\n\t(Expand_Pragma_Contract_Cases):\n\tRedo the capture and restore of the Ghost mode.  Preserve the\n\toriginal context of contract cases by setting / resetting the\n\tIn_Assertion_Expr counter.\n\t(Expand_Pragma_Initial_Condition):\n\tRedo the capture and restore of the Ghost mode.\n\t(Expand_Pragma_Loop_Variant): Redo the capture and restore of\n\tthe Ghost mode.\n\t(Restore_Globals): Removed.\n\t* exp_util.adb (Make_Predicate_Call): Redo the capture and\n\trestore of the Ghost mode.\n\t(Restore_Globals): Removed.\n\t* freeze.adb (Freeze_Entity): Redo the capture and restore of\n\tthe Ghost mode.\n\t(Restore_Globals): Removed.\n\t* ghost.adb (Check_Ghost_Context): Remove the RM reference from\n\tthe error message.\n\t(Is_OK_Statement): Account for statements\n\tthat appear in assertion expressions.\n\t(Is_Subject_To_Ghost):\n\tMoved from spec.\n\t* ghost.ads (Is_Subject_To_Ghost): Moved to body.\n\t* rtsfind.ads (Load_RTU): Redo the capture and restore of the\n\tGhost mode.\n\t* sem.adb Add with and use clauses for Ghost.\n\t(Analyze): Redo\n\tthe capture and restore of the Ghost mode. Set the Ghost mode\n\twhen analyzing a declaration.\n\t(Do_Analyze): Redo the capture\n\tand restore of the Ghost mode.\n\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Do not capture, set\n\tand restore the Ghost mode.\n\t(Analyze_Incomplete_Type_Decl):\n\tDo not capture, set and restore the Ghost mode.\n\t(Analyze_Number_Declaration): Do not capture, set and restore the\n\tGhost mode.\n\t(Analyze_Object_Declaration): Do not capture, set and\n\trestore the Ghost mode.\n\t(Analyze_Private_Extension_Declaration):\n\tDo not capture, set and restore the Ghost mode.\n\t(Analyze_Subtype_Declaration): Do not capture, set and restore\n\tthe Ghost mode.\n\t(Restore_Globals): Removed.\n\t* sem_ch5.adb (Analyze_Assignment): Redo the capture and restore\n\tof the Ghost mode.\n\t(Restore_Globals): Removed.\n\t* sem_ch6.adb (Analyze_Abstract_Subprogram_Declaration):\n\tDo not capture, set and restore the Ghost mode.\n\t(Analyze_Procedure_Call): Redo the capture and restore of the\n\tGhost mode.\n\t(Analyze_Subprogram_Body_Helper): Redo the capture\n\tand restore of the Ghost mode.\t(Analyze_Subprogram_Declaration):\n\tDo not capture, set and restore the Ghost mode.\n\t(Restore_Globals): Removed.\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): Redo the capture and\n\trestore of the Ghost mode.\n\t(Analyze_Package_Declaration):\n\tDo not capture, set and restore the Ghost mode.\n\t(Analyze_Private_Type_Declaration): Do not capture, set and\n\trestore the Ghost mode.\n\t(Restore_Globals): Removed.\n\t* sem_ch8.adb (Analyze_Exception_Renaming): Do not capture,\n\tset and restore the Ghost mode.\n\t(Analyze_Generic_Renaming): Do not capture, set and restore the Ghost\n\tmode.\n\t(Analyze_Object_Renaming): Do not capture, set and restore the\n\tGhost mode.\n\t(Analyze_Package_Renaming): Do not capture, set and restore the Ghost\n\tmode.\n\t(Analyze_Subprogram_Renaming): Do not capture, set and restore the\n\tGhost mode.\n\t(Restore_Globals): Removed.\n\t* sem_ch11.adb (Analyze_Exception_Declaration): Do not capture,\n\tset and restore the Ghost mode.\n\t* sem_ch12.adb (Analyze_Generic_Package_Declaration):\n\tDo not capture, set and restore the Ghost mode.\n\t(Analyze_Generic_Subprogram_Declaration): Do not capture, set\n\tand restore the Ghost mode.\n\t* sem_ch13.adb (Build_Invariant_Procedure_Declaration): Redo\n\tthe capture and restore of the Ghost mode.\n\t* sem_prag.adb (Analyze_Contract_Cases_In_Decl_Part):\n\tRedo the capture and restore of the Ghost mode.\n\t(Analyze_External_Property_In_Decl_Part):\n\tRedo the capture and restore of the Ghost mode.\n\t(Analyze_Initial_Condition_In_Decl_Part): Redo the\n\tcapture and restore of the Ghost mode.\t(Analyze_Pragma):\n\tDo not capture, set and restore the Ghost mode for Assert.\n\tRedo the capture and restore of the Ghost mode for Check. Do\n\tnot capture and restore the Ghost mode for Invariant.\n\t(Analyze_Pre_Post_Condition_In_Decl_Part): Redo the capture and\n\trestore of the Ghost mode.\n\t* sem_res.adb (Resolve): Capture, set and restore the Ghost mode\n\twhen resolving a declaration.\n\t* sem_util.adb (Build_Default_Init_Cond_Procedure_Body):\n\tRedo the capture and restore of the Ghost mode.\n\t(Build_Default_Init_Cond_Procedure_Declaration): Redo the capture\n\tand restore of the Ghost mode.\n\nFrom-SVN: r228871", "tree": {"sha": "092351961339d6743fc1f4b6f5b750838d3bb3e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/092351961339d6743fc1f4b6f5b750838d3bb3e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7bad97d6316243751539113e0063cd6e5712491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7bad97d6316243751539113e0063cd6e5712491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7bad97d6316243751539113e0063cd6e5712491"}], "stats": {"total": 1387, "additions": 497, "deletions": 890}, "files": [{"sha": "050a304ea7353d73e5484d3fb4e5b356354381e4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -1,3 +1,139 @@\n+2015-10-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Full_Type_Declaration): Do not capture,\n+\tset and restore the Ghost mode.\n+\t(Expand_N_Object_Declaration): Do not capture, set and restore the\n+\tGhost mode.\n+\t(Freeze_Type): Redo the capture and restore of the Ghost mode.\n+\t(Restore_Globals): Removed.\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Redo the capture\n+\tand restore of the Ghost mode.\n+\t(Restore_Globals): Removed.\n+\t* exp_ch6.adb (Expand_N_Procedure_Call_Statement):\n+\tRedo the capture and restore of the Ghost mode.\n+\t(Expand_N_Subprogram_Body): Redo the capture, set and restore\n+\tof the Ghost mode.\n+\t(Expand_N_Subprogram_Declaration): Do not\n+\tcapture, set and restore the Ghost mode.\n+\t(Restore_Globals): Removed.\n+\t* exp_ch7.adb (Expand_N_Package_Body): Redo the capture, set\n+\tand restore of the Ghost mode.\n+\t(Expand_N_Package_Declaration): Do not capture, set and restore the\n+\tGhost mode.\n+\t* exp_ch8.adb (Expand_N_Exception_Renaming_Declaration):\n+\tRedo the capture and restore of the Ghost mode.\n+\t(Expand_N_Object_Renaming_Declaration): Redo\n+\tthe capture and restore of the Ghost mode.\n+\t(Expand_N_Package_Renaming_Declaration):\n+\tRedo the capture and restore of the Ghost mode.\n+\t(Expand_N_Subprogram_Renaming_Declaration): Redo the capture\n+\tand restore of the Ghost mode.\n+\t* exp_ch11.adb Remove with and use clauses for Ghost.\n+\t(Expand_N_Exception_Declaration): Do not capture, set and restore\n+\tthe Ghost mode.\n+\t* exp_disp.adb (Make_DT): Redo the capture and restore of the\n+\tGhost mode.\n+\t(Restore_Globals): Removed.\n+\t* exp_prag.adb (Expand_Pragma_Check): Do not capture, set\n+\tand restore the Ghost mode.\n+\t(Expand_Pragma_Contract_Cases):\n+\tRedo the capture and restore of the Ghost mode.  Preserve the\n+\toriginal context of contract cases by setting / resetting the\n+\tIn_Assertion_Expr counter.\n+\t(Expand_Pragma_Initial_Condition):\n+\tRedo the capture and restore of the Ghost mode.\n+\t(Expand_Pragma_Loop_Variant): Redo the capture and restore of\n+\tthe Ghost mode.\n+\t(Restore_Globals): Removed.\n+\t* exp_util.adb (Make_Predicate_Call): Redo the capture and\n+\trestore of the Ghost mode.\n+\t(Restore_Globals): Removed.\n+\t* freeze.adb (Freeze_Entity): Redo the capture and restore of\n+\tthe Ghost mode.\n+\t(Restore_Globals): Removed.\n+\t* ghost.adb (Check_Ghost_Context): Remove the RM reference from\n+\tthe error message.\n+\t(Is_OK_Statement): Account for statements\n+\tthat appear in assertion expressions.\n+\t(Is_Subject_To_Ghost):\n+\tMoved from spec.\n+\t* ghost.ads (Is_Subject_To_Ghost): Moved to body.\n+\t* rtsfind.ads (Load_RTU): Redo the capture and restore of the\n+\tGhost mode.\n+\t* sem.adb Add with and use clauses for Ghost.\n+\t(Analyze): Redo\n+\tthe capture and restore of the Ghost mode. Set the Ghost mode\n+\twhen analyzing a declaration.\n+\t(Do_Analyze): Redo the capture\n+\tand restore of the Ghost mode.\n+\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Do not capture, set\n+\tand restore the Ghost mode.\n+\t(Analyze_Incomplete_Type_Decl):\n+\tDo not capture, set and restore the Ghost mode.\n+\t(Analyze_Number_Declaration): Do not capture, set and restore the\n+\tGhost mode.\n+\t(Analyze_Object_Declaration): Do not capture, set and\n+\trestore the Ghost mode.\n+\t(Analyze_Private_Extension_Declaration):\n+\tDo not capture, set and restore the Ghost mode.\n+\t(Analyze_Subtype_Declaration): Do not capture, set and restore\n+\tthe Ghost mode.\n+\t(Restore_Globals): Removed.\n+\t* sem_ch5.adb (Analyze_Assignment): Redo the capture and restore\n+\tof the Ghost mode.\n+\t(Restore_Globals): Removed.\n+\t* sem_ch6.adb (Analyze_Abstract_Subprogram_Declaration):\n+\tDo not capture, set and restore the Ghost mode.\n+\t(Analyze_Procedure_Call): Redo the capture and restore of the\n+\tGhost mode.\n+\t(Analyze_Subprogram_Body_Helper): Redo the capture\n+\tand restore of the Ghost mode.\t(Analyze_Subprogram_Declaration):\n+\tDo not capture, set and restore the Ghost mode.\n+\t(Restore_Globals): Removed.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Redo the capture and\n+\trestore of the Ghost mode.\n+\t(Analyze_Package_Declaration):\n+\tDo not capture, set and restore the Ghost mode.\n+\t(Analyze_Private_Type_Declaration): Do not capture, set and\n+\trestore the Ghost mode.\n+\t(Restore_Globals): Removed.\n+\t* sem_ch8.adb (Analyze_Exception_Renaming): Do not capture,\n+\tset and restore the Ghost mode.\n+\t(Analyze_Generic_Renaming): Do not capture, set and restore the Ghost\n+\tmode.\n+\t(Analyze_Object_Renaming): Do not capture, set and restore the\n+\tGhost mode.\n+\t(Analyze_Package_Renaming): Do not capture, set and restore the Ghost\n+\tmode.\n+\t(Analyze_Subprogram_Renaming): Do not capture, set and restore the\n+\tGhost mode.\n+\t(Restore_Globals): Removed.\n+\t* sem_ch11.adb (Analyze_Exception_Declaration): Do not capture,\n+\tset and restore the Ghost mode.\n+\t* sem_ch12.adb (Analyze_Generic_Package_Declaration):\n+\tDo not capture, set and restore the Ghost mode.\n+\t(Analyze_Generic_Subprogram_Declaration): Do not capture, set\n+\tand restore the Ghost mode.\n+\t* sem_ch13.adb (Build_Invariant_Procedure_Declaration): Redo\n+\tthe capture and restore of the Ghost mode.\n+\t* sem_prag.adb (Analyze_Contract_Cases_In_Decl_Part):\n+\tRedo the capture and restore of the Ghost mode.\n+\t(Analyze_External_Property_In_Decl_Part):\n+\tRedo the capture and restore of the Ghost mode.\n+\t(Analyze_Initial_Condition_In_Decl_Part): Redo the\n+\tcapture and restore of the Ghost mode.\t(Analyze_Pragma):\n+\tDo not capture, set and restore the Ghost mode for Assert.\n+\tRedo the capture and restore of the Ghost mode for Check. Do\n+\tnot capture and restore the Ghost mode for Invariant.\n+\t(Analyze_Pre_Post_Condition_In_Decl_Part): Redo the capture and\n+\trestore of the Ghost mode.\n+\t* sem_res.adb (Resolve): Capture, set and restore the Ghost mode\n+\twhen resolving a declaration.\n+\t* sem_util.adb (Build_Default_Init_Cond_Procedure_Body):\n+\tRedo the capture and restore of the Ghost mode.\n+\t(Build_Default_Init_Cond_Procedure_Declaration): Redo the capture\n+\tand restore of the Ghost mode.\n+\n 2015-10-16  Bob Duff  <duff@adacore.com>\n \n \t* debug.adb: Document -gnatdQ switch."}, {"sha": "6ffc8a02f5068c564812cf646a772e9c41586bbc", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -31,7 +31,6 @@ with Errout;   use Errout;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_Intr; use Exp_Intr;\n with Exp_Util; use Exp_Util;\n-with Ghost;    use Ghost;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -1190,9 +1189,8 @@ package body Exp_Ch11 is\n    --     end if;\n \n    procedure Expand_N_Exception_Declaration (N : Node_Id) is\n-      GM      : constant Ghost_Mode_Type := Ghost_Mode;\n-      Id      : constant Entity_Id       := Defining_Identifier (N);\n-      Loc     : constant Source_Ptr      := Sloc (N);\n+      Id      : constant Entity_Id  := Defining_Identifier (N);\n+      Loc     : constant Source_Ptr := Sloc (N);\n       Ex_Id   : Entity_Id;\n       Flag_Id : Entity_Id;\n       L       : List_Id;\n@@ -1279,12 +1277,6 @@ package body Exp_Ch11 is\n          return;\n       end if;\n \n-      --  The exception declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       --  Definition of the external name: nam : constant String := \"A.B.NAME\";\n \n       Ex_Id :=\n@@ -1391,11 +1383,6 @@ package body Exp_Ch11 is\n             Insert_List_After_And_Analyze (N, L);\n          end if;\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Expand_N_Exception_Declaration;\n \n    ---------------------------------------------"}, {"sha": "8574ba0fd46bc60320e2de64867d201447e8a8e2", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 15, "deletions": 66, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -4786,21 +4786,14 @@ package body Exp_Ch3 is\n \n       --  Local declarations\n \n-      Def_Id : constant Entity_Id       := Defining_Identifier (N);\n-      B_Id   : constant Entity_Id       := Base_Type (Def_Id);\n-      GM     : constant Ghost_Mode_Type := Ghost_Mode;\n+      Def_Id : constant Entity_Id := Defining_Identifier (N);\n+      B_Id   : constant Entity_Id := Base_Type (Def_Id);\n       FN     : Node_Id;\n       Par_Id : Entity_Id;\n \n    --  Start of processing for Expand_N_Full_Type_Declaration\n \n    begin\n-      --  The type declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       if Is_Access_Type (Def_Id) then\n          Build_Master (Def_Id);\n \n@@ -4924,25 +4917,19 @@ package body Exp_Ch3 is\n             end if;\n          end;\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Expand_N_Full_Type_Declaration;\n \n    ---------------------------------\n    -- Expand_N_Object_Declaration --\n    ---------------------------------\n \n    procedure Expand_N_Object_Declaration (N : Node_Id) is\n-      Loc      : constant Source_Ptr      := Sloc (N);\n-      Def_Id   : constant Entity_Id       := Defining_Identifier (N);\n-      Expr     : constant Node_Id         := Expression (N);\n-      GM       : constant Ghost_Mode_Type := Ghost_Mode;\n-      Obj_Def  : constant Node_Id         := Object_Definition (N);\n-      Typ      : constant Entity_Id       := Etype (Def_Id);\n-      Base_Typ : constant Entity_Id       := Base_Type (Typ);\n+      Loc      : constant Source_Ptr := Sloc (N);\n+      Def_Id   : constant Entity_Id  := Defining_Identifier (N);\n+      Expr     : constant Node_Id    := Expression (N);\n+      Obj_Def  : constant Node_Id    := Object_Definition (N);\n+      Typ      : constant Entity_Id  := Etype (Def_Id);\n+      Base_Typ : constant Entity_Id  := Base_Type (Typ);\n       Expr_Q   : Node_Id;\n \n       function Build_Equivalent_Aggregate return Boolean;\n@@ -4954,9 +4941,6 @@ package body Exp_Ch3 is\n       --  Generate all default initialization actions for object Def_Id. Any\n       --  new code is inserted after node After.\n \n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n       function Rewrite_As_Renaming return Boolean;\n       --  Indicate whether to rewrite a declaration with initialization into an\n       --  object renaming declaration (see below).\n@@ -5387,15 +5371,6 @@ package body Exp_Ch3 is\n          end if;\n       end Default_Initialize_Object;\n \n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n       -------------------------\n       -- Rewrite_As_Renaming --\n       -------------------------\n@@ -5439,12 +5414,6 @@ package body Exp_Ch3 is\n          return;\n       end if;\n \n-      --  The object declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       --  First we do special processing for objects of a tagged type where\n       --  this is the point at which the type is frozen. The creation of the\n       --  dispatch table and the initialization procedure have to be deferred\n@@ -5613,7 +5582,6 @@ package body Exp_Ch3 is\n            and then Is_Build_In_Place_Function_Call (Expr_Q)\n          then\n             Make_Build_In_Place_Call_In_Object_Declaration (N, Expr_Q);\n-            Restore_Globals;\n \n             --  The previous call expands the expression initializing the\n             --  built-in-place object into further code that will be analyzed\n@@ -5858,7 +5826,6 @@ package body Exp_Ch3 is\n                end;\n             end if;\n \n-            Restore_Globals;\n             return;\n \n          --  Common case of explicit object initialization\n@@ -5974,7 +5941,6 @@ package body Exp_Ch3 is\n                --  to avoid its management in the backend\n \n                Set_Expression (N, Empty);\n-               Restore_Globals;\n                return;\n \n             --  Handle initialization of limited tagged types\n@@ -6196,13 +6162,10 @@ package body Exp_Ch3 is\n          end;\n       end if;\n \n-      Restore_Globals;\n-\n    --  Exception on library entity not available\n \n    exception\n       when RE_Not_Available =>\n-         Restore_Globals;\n          return;\n    end Expand_N_Object_Declaration;\n \n@@ -7523,10 +7486,6 @@ package body Exp_Ch3 is\n    --  node using Append_Freeze_Actions.\n \n    function Freeze_Type (N : Node_Id) return Boolean is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the current Ghost mode in effect in case the type being frozen\n-      --  sets a different mode.\n-\n       procedure Process_RACW_Types (Typ : Entity_Id);\n       --  Validate and generate stubs for all RACW types associated with type\n       --  Typ.\n@@ -7535,9 +7494,6 @@ package body Exp_Ch3 is\n       --  Associate type Typ's Finalize_Address primitive with the finalization\n       --  masters of pending access-to-Typ types.\n \n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n       ------------------------\n       -- Process_RACW_Types --\n       ------------------------\n@@ -7618,26 +7574,19 @@ package body Exp_Ch3 is\n          end if;\n       end Process_Pending_Access_Types;\n \n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n       --  Local variables\n \n       Def_Id : constant Entity_Id := Entity (N);\n       Result : Boolean := False;\n \n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n    --  Start of processing for Freeze_Type\n \n    begin\n-      --  The type being frozen may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  freezing are properly flagged as ignored Ghost.\n+      --  The type being frozen may be subject to pragma Ghost. Set the mode\n+      --  now to ensure that any nodes generated during freezing are properly\n+      --  marked as Ghost.\n \n       Set_Ghost_Mode (N, Def_Id);\n \n@@ -7954,12 +7903,12 @@ package body Exp_Ch3 is\n       Process_Pending_Access_Types (Def_Id);\n       Freeze_Stream_Operations (N, Def_Id);\n \n-      Restore_Globals;\n+      Ghost_Mode := Save_Ghost_Mode;\n       return Result;\n \n    exception\n       when RE_Not_Available =>\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return False;\n    end Freeze_Type;\n "}, {"sha": "3584202a6dcd3e597d6a727599b956bd51064757", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -1627,35 +1627,19 @@ package body Exp_Ch5 is\n    --  cannot just be passed on to the back end in untransformed state.\n \n    procedure Expand_N_Assignment_Statement (N : Node_Id) is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-\n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n-      --  Local variables\n-\n       Crep : constant Boolean    := Change_Of_Representation (N);\n       Lhs  : constant Node_Id    := Name (N);\n       Loc  : constant Source_Ptr := Sloc (N);\n       Rhs  : constant Node_Id    := Expression (N);\n       Typ  : constant Entity_Id  := Underlying_Type (Etype (Lhs));\n       Exp  : Node_Id;\n \n-   --  Start of processing for Expand_N_Assignment_Statement\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    begin\n-      --  The assignment statement may be Ghost if the left hand side is Ghost.\n+      --  The assignment statement is Ghost when the left hand side is Ghost.\n       --  Set the mode now to ensure that any nodes generated during expansion\n-      --  are properly flagged as ignored Ghost.\n+      --  are properly marked as Ghost.\n \n       Set_Ghost_Mode (N);\n \n@@ -1668,7 +1652,7 @@ package body Exp_Ch5 is\n \n       if Componentwise_Assignment (N) then\n          Expand_Assign_Record (N);\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n       end if;\n \n@@ -1763,7 +1747,7 @@ package body Exp_Ch5 is\n                Rewrite (N, Call);\n                Analyze (N);\n \n-               Restore_Globals;\n+               Ghost_Mode := Save_Ghost_Mode;\n                return;\n             end if;\n          end;\n@@ -1914,7 +1898,7 @@ package body Exp_Ch5 is\n          Rewrite (N, Make_Null_Statement (Loc));\n          Analyze (N);\n \n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n       end if;\n \n@@ -2134,7 +2118,7 @@ package body Exp_Ch5 is\n \n          if not Crep then\n             Expand_Bit_Packed_Element_Set (N);\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n \n          --  Change of representation case\n@@ -2186,7 +2170,7 @@ package body Exp_Ch5 is\n          --  Nothing to do for valuetypes\n          --  ??? Set_Scope_Is_Transient (False);\n \n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n \n       elsif Is_Tagged_Type (Typ)\n@@ -2242,7 +2226,7 @@ package body Exp_Ch5 is\n                   --  expansion, since they would be missed in -gnatc mode ???\n \n                   Error_Msg_N (\"assignment not available on limited type\", N);\n-                  Restore_Globals;\n+                  Ghost_Mode := Save_Ghost_Mode;\n                   return;\n                end if;\n \n@@ -2413,7 +2397,7 @@ package body Exp_Ch5 is\n             --  it with all checks suppressed.\n \n             Analyze (N, Suppress => All_Checks);\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n          end Tagged_Case;\n \n@@ -2431,15 +2415,15 @@ package body Exp_Ch5 is\n             end loop;\n \n             Expand_Assign_Array (N, Actual_Rhs);\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n          end;\n \n       --  Record types\n \n       elsif Is_Record_Type (Typ) then\n          Expand_Assign_Record (N);\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n \n       --  Scalar types. This is where we perform the processing related to the\n@@ -2552,11 +2536,11 @@ package body Exp_Ch5 is\n          end if;\n       end if;\n \n-      Restore_Globals;\n+      Ghost_Mode := Save_Ghost_Mode;\n \n    exception\n       when RE_Not_Available =>\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n    end Expand_N_Assignment_Statement;\n "}, {"sha": "e6efc3ab80f013e0e3664159b747b95773d595fa", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 27, "deletions": 54, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -4917,20 +4917,17 @@ package body Exp_Ch6 is\n    ---------------------------------------\n \n    procedure Expand_N_Procedure_Call_Statement (N : Node_Id) is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    begin\n-      --  The procedure call may be Ghost if the name is Ghost. Set the mode\n-      --  now to ensure that any nodes generated during expansion are properly\n-      --  flagged as ignored Ghost.\n+      --  The procedure call is Ghost when the name is Ghost. Set the mode now\n+      --  to ensure that any nodes generated during expansion are properly set\n+      --  as Ghost.\n \n       Set_Ghost_Mode (N);\n-      Expand_Call (N);\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n \n-      Ghost_Mode := GM;\n+      Expand_Call (N);\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_N_Procedure_Call_Statement;\n \n    --------------------------------------\n@@ -5005,10 +5002,9 @@ package body Exp_Ch6 is\n    --  Wrap thread body\n \n    procedure Expand_N_Subprogram_Body (N : Node_Id) is\n-      GM       : constant Ghost_Mode_Type := Ghost_Mode;\n-      Loc      : constant Source_Ptr      := Sloc (N);\n-      HSS      : constant Node_Id         := Handled_Statement_Sequence (N);\n-      Body_Id  : Entity_Id;\n+      Body_Id  : constant Entity_Id  := Defining_Entity (N);\n+      HSS      : constant Node_Id    := Handled_Statement_Sequence (N);\n+      Loc      : constant Source_Ptr := Sloc (N);\n       Except_H : Node_Id;\n       L        : List_Id;\n       Spec_Id  : Entity_Id;\n@@ -5019,9 +5015,6 @@ package body Exp_Ch6 is\n       --  the latter test is not critical, it does not matter if we add a few\n       --  extra returns, since they get eliminated anyway later on.\n \n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n       ----------------\n       -- Add_Return --\n       ----------------\n@@ -5094,23 +5087,25 @@ package body Exp_Ch6 is\n          end if;\n       end Add_Return;\n \n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n+      --  Local varaibles\n \n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    --  Start of processing for Expand_N_Subprogram_Body\n \n    begin\n-      --  The subprogram body may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  expansion are flagged as ignored Ghost.\n+      if Present (Corresponding_Spec (N)) then\n+         Spec_Id := Corresponding_Spec (N);\n+      else\n+         Spec_Id := Body_Id;\n+      end if;\n \n-      Set_Ghost_Mode (N);\n+      --  The subprogram body is Ghost when it is stand alone and subject to\n+      --  pragma Ghost or the corresponding spec is Ghost. To accomodate both\n+      --  cases, set the mode now to ensure that any nodes generated during\n+      --  expansion are marked as Ghost.\n+\n+      Set_Ghost_Mode (N, Spec_Id);\n \n       --  Set L to either the list of declarations if present, or to the list\n       --  of statements if no declarations are present. This is used to insert\n@@ -5164,16 +5159,6 @@ package body Exp_Ch6 is\n          end;\n       end if;\n \n-      --  Find entity for subprogram\n-\n-      Body_Id := Defining_Entity (N);\n-\n-      if Present (Corresponding_Spec (N)) then\n-         Spec_Id := Corresponding_Spec (N);\n-      else\n-         Spec_Id := Body_Id;\n-      end if;\n-\n       --  Need poll on entry to subprogram if polling enabled. We only do this\n       --  for non-empty subprograms, since it does not seem necessary to poll\n       --  for a dummy null subprogram.\n@@ -5288,7 +5273,7 @@ package body Exp_Ch6 is\n               Make_Handled_Sequence_Of_Statements (Loc,\n                 Statements => New_List (Make_Null_Statement (Loc))));\n \n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n          end if;\n       end if;\n@@ -5424,7 +5409,7 @@ package body Exp_Ch6 is\n          Unest_Bodies.Append ((Spec_Id, N));\n       end if;\n \n-      Restore_Globals;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_N_Subprogram_Body;\n \n    -----------------------------------\n@@ -5451,21 +5436,14 @@ package body Exp_Ch6 is\n    --  If the declaration is for a null procedure, emit null body\n \n    procedure Expand_N_Subprogram_Declaration (N : Node_Id) is\n-      Loc       : constant Source_Ptr      := Sloc (N);\n-      GM        : constant Ghost_Mode_Type := Ghost_Mode;\n-      Subp      : constant Entity_Id       := Defining_Entity (N);\n-      Scop      : constant Entity_Id       := Scope (Subp);\n+      Loc       : constant Source_Ptr := Sloc (N);\n+      Subp      : constant Entity_Id  := Defining_Entity (N);\n+      Scop      : constant Entity_Id  := Scope (Subp);\n       Prot_Bod  : Node_Id;\n       Prot_Decl : Node_Id;\n       Prot_Id   : Entity_Id;\n \n    begin\n-      --  The subprogram declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  expansion are flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       --  In SPARK, subprogram declarations are only allowed in package\n       --  specifications.\n \n@@ -5566,11 +5544,6 @@ package body Exp_Ch6 is\n             Set_Is_Inlined (Subp, False);\n          end;\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Expand_N_Subprogram_Declaration;\n \n    --------------------------------"}, {"sha": "a45b911d1ae17279220abae499f82d6b01eef078", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -4177,26 +4177,27 @@ package body Exp_Ch7 is\n    --  Encode entity names in package body\n \n    procedure Expand_N_Package_Body (N : Node_Id) is\n-      GM       : constant Ghost_Mode_Type := Ghost_Mode;\n-      Spec_Ent : constant Entity_Id := Corresponding_Spec (N);\n-      Fin_Id   : Entity_Id;\n+      Spec_Id : constant Entity_Id := Corresponding_Spec (N);\n+      Fin_Id  : Entity_Id;\n+\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    begin\n-      --  The package body may be subject to pragma Ghost with policy Ignore.\n-      --  Set the mode now to ensure that any nodes generated during expansion\n-      --  are properly flagged as ignored Ghost.\n+      --  The package body is Ghost when the corresponding spec is Ghost. Set\n+      --  the mode now to ensure that any nodes generated during expansion are\n+      --  properly marked as Ghost.\n \n-      Set_Ghost_Mode (N);\n+      Set_Ghost_Mode (N, Spec_Id);\n \n       --  This is done only for non-generic packages\n \n-      if Ekind (Spec_Ent) = E_Package then\n+      if Ekind (Spec_Id) = E_Package then\n          Push_Scope (Corresponding_Spec (N));\n \n          --  Build dispatch tables of library level tagged types\n \n          if Tagged_Type_Expansion\n-           and then Is_Library_Level_Entity (Spec_Ent)\n+           and then Is_Library_Level_Entity (Spec_Id)\n          then\n             Build_Static_Dispatch_Tables (N);\n          end if;\n@@ -4207,21 +4208,21 @@ package body Exp_Ch7 is\n          --  assertion expression must be verified at the end of the body\n          --  statements.\n \n-         if Present (Get_Pragma (Spec_Ent, Pragma_Initial_Condition)) then\n+         if Present (Get_Pragma (Spec_Id, Pragma_Initial_Condition)) then\n             Expand_Pragma_Initial_Condition (N);\n          end if;\n \n          Pop_Scope;\n       end if;\n \n       Set_Elaboration_Flag (N, Corresponding_Spec (N));\n-      Set_In_Package_Body (Spec_Ent, False);\n+      Set_In_Package_Body (Spec_Id, False);\n \n       --  Set to encode entity names in package body before gigi is called\n \n       Qualify_Entity_Names (N);\n \n-      if Ekind (Spec_Ent) /= E_Generic_Package then\n+      if Ekind (Spec_Id) /= E_Generic_Package then\n          Build_Finalizer\n            (N           => N,\n             Clean_Stmts => No_List,\n@@ -4244,10 +4245,7 @@ package body Exp_Ch7 is\n          end if;\n       end if;\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_N_Package_Body;\n \n    ----------------------------------\n@@ -4260,7 +4258,6 @@ package body Exp_Ch7 is\n    --  appear.\n \n    procedure Expand_N_Package_Declaration (N : Node_Id) is\n-      GM     : constant Ghost_Mode_Type := Ghost_Mode;\n       Id     : constant Entity_Id := Defining_Entity (N);\n       Spec   : constant Node_Id   := Specification (N);\n       Decls  : List_Id;\n@@ -4304,12 +4301,6 @@ package body Exp_Ch7 is\n          return;\n       end if;\n \n-      --  The package declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       --  For a package declaration that implies no associated body, generate\n       --  task activation call and RACW supporting bodies now (since we won't\n       --  have a specific separate compilation unit for that).\n@@ -4383,11 +4374,6 @@ package body Exp_Ch7 is\n \n          Set_Finalizer (Id, Fin_Id);\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Expand_N_Package_Declaration;\n \n    -----------------------------"}, {"sha": "dfd1796ac77a6453ef34dae7fe70b553e74c62d7", "filename": "gcc/ada/exp_ch8.adb", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch8.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -50,13 +50,15 @@ package body Exp_Ch8 is\n    ---------------------------------------------\n \n    procedure Expand_N_Exception_Renaming_Declaration (N : Node_Id) is\n-      GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n       Decl : Node_Id;\n \n    begin\n-      --  The exception renaming declaration may be subject to pragma Ghost\n-      --  with policy Ignore. Set the mode now to ensure that any nodes\n-      --  generated during expansion are properly flagged as ignored Ghost.\n+      --  The exception renaming declaration is Ghost when it is subject to\n+      --  pragma Ghost or renames a Ghost entity. To accomodate both cases, set\n+      --  the mode now to ensure that any nodes generated during expansion are\n+      --  properly marked as Ghost.\n \n       Set_Ghost_Mode (N);\n \n@@ -66,10 +68,7 @@ package body Exp_Ch8 is\n          Insert_Action (N, Decl);\n       end if;\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_N_Exception_Renaming_Declaration;\n \n    ------------------------------------------\n@@ -159,14 +158,15 @@ package body Exp_Ch8 is\n \n       --  Local variables\n \n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    --  Start of processing for Expand_N_Object_Renaming_Declaration\n \n    begin\n-      --  The object renaming declaration may be subject to pragma Ghost with\n-      --  policy Ignore. Set the mode now to ensure that any nodes generated\n-      --  during expansion are properly flagged as ignored Ghost.\n+      --  The object renaming declaration is Ghost when it is subject to pragma\n+      --  Ghost or renames a Ghost entity. To accomodate both cases, set the\n+      --  mode now to ensure that any nodes generated during expansion are\n+      --  properly marked as Ghost.\n \n       Set_Ghost_Mode (N);\n \n@@ -213,24 +213,23 @@ package body Exp_Ch8 is\n          Insert_Action (N, Decl);\n       end if;\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_N_Object_Renaming_Declaration;\n \n    -------------------------------------------\n    -- Expand_N_Package_Renaming_Declaration --\n    -------------------------------------------\n \n    procedure Expand_N_Package_Renaming_Declaration (N : Node_Id) is\n-      GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n       Decl : Node_Id;\n \n    begin\n-      --  The package renaming declaration may be subject to pragma Ghost with\n-      --  policy Ignore. Set the mode now to ensure that any nodes generated\n-      --  during expansion are properly flagged as ignored Ghost.\n+      --  The package renaming declaration is Ghost when it is subject to\n+      --  pragma Ghost or renames a Ghost entity. To accomodate both cases,\n+      --  set the mode now to ensure that any nodes generated during expansion\n+      --  are properly marked as Ghost.\n \n       Set_Ghost_Mode (N);\n \n@@ -273,10 +272,7 @@ package body Exp_Ch8 is\n          end if;\n       end if;\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_N_Package_Renaming_Declaration;\n \n    ----------------------------------------------\n@@ -326,15 +322,16 @@ package body Exp_Ch8 is\n \n       --  Local variables\n \n-      GM  : constant Ghost_Mode_Type := Ghost_Mode;\n-      Nam : constant Node_Id := Name (N);\n+      Nam             : constant Node_Id         := Name (N);\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    --  Start of processing for Expand_N_Subprogram_Renaming_Declaration\n \n    begin\n-      --  The subprogram renaming declaration may be subject to pragma Ghost\n-      --  with policy Ignore. Set the mode now to ensure that any nodes created\n-      --  during expansion are properly flagged as ignored Ghost.\n+      --  The subprogram renaming declaration is Ghost when it is subject to\n+      --  pragma Ghost or renames a Ghost entity. To accomodate both cases, set\n+      --  the mode now to ensure that any nodes created during expansion are\n+      --  properly flagged as ignored Ghost.\n \n       Set_Ghost_Mode (N);\n \n@@ -402,10 +399,7 @@ package body Exp_Ch8 is\n          end;\n       end if;\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_N_Subprogram_Renaming_Declaration;\n \n end Exp_Ch8;"}, {"sha": "88965c71f260c1133f0d8b1234da5ec352b53d37", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -3645,10 +3645,6 @@ package body Exp_Disp is\n    --     end;\n \n    function Make_DT (Typ : Entity_Id; N : Node_Id := Empty) return List_Id is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the current Ghost mode in effect in case the tagged type sets a\n-      --  different mode.\n-\n       Loc : constant Source_Ptr := Sloc (Typ);\n \n       Max_Predef_Prims : constant Int :=\n@@ -3711,9 +3707,6 @@ package body Exp_Disp is\n       --  this secondary dispatch table by Make_Tags when its unique external\n       --  name was generated.\n \n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n       ------------------------------\n       -- Check_Premature_Freezing --\n       ------------------------------\n@@ -4398,15 +4391,6 @@ package body Exp_Disp is\n          Append_Elmt (Iface_DT, DT_Decl);\n       end Make_Secondary_DT;\n \n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n       --  Local variables\n \n       Elab_Code          : constant List_Id := New_List;\n@@ -4436,6 +4420,8 @@ package body Exp_Disp is\n       TSD_Aggr_List      : List_Id;\n       TSD_Tags_List      : List_Id;\n \n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n       --  The following name entries are used by Make_DT to generate a number\n       --  of entities related to a tagged type. These entities may be generated\n       --  in a scope other than that of the tagged type declaration, and if\n@@ -4477,9 +4463,9 @@ package body Exp_Disp is\n    begin\n       pragma Assert (Is_Frozen (Typ));\n \n-      --  The tagged type being processed may be subject to pragma Ghost with\n-      --  policy Ignore. Set the mode now to ensure that any nodes generated\n-      --  during dispatch table creation are properly flagged as ignored Ghost.\n+      --  The tagged type being processed may be subject to pragma Ghost. Set\n+      --  the mode now to ensure that any nodes generated during dispatch table\n+      --  creation are properly marked as Ghost.\n \n       Set_Ghost_Mode (Declaration_Node (Typ), Typ);\n \n@@ -4491,12 +4477,12 @@ package body Exp_Disp is\n         or else Convention (Typ) = Convention_CIL\n         or else Convention (Typ) = Convention_Java\n       then\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return Result;\n \n       elsif No_Run_Time_Mode then\n          Error_Msg_CRT (\"tagged types\", Typ);\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return Result;\n \n       elsif not RTE_Available (RE_Tag) then\n@@ -4512,7 +4498,7 @@ package body Exp_Disp is\n \n          Analyze_List (Result, Suppress => All_Checks);\n          Error_Msg_CRT (\"tagged types\", Typ);\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return Result;\n       end if;\n \n@@ -4523,14 +4509,14 @@ package body Exp_Disp is\n       if RTE_Available (RE_Interface_Data) then\n          if Max_Predef_Prims /= 15 then\n             Error_Msg_N (\"run-time library configuration error\", Typ);\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return Result;\n          end if;\n       else\n          if Max_Predef_Prims /= 9 then\n             Error_Msg_N (\"run-time library configuration error\", Typ);\n             Error_Msg_CRT (\"tagged types\", Typ);\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return Result;\n          end if;\n       end if;\n@@ -6264,7 +6250,7 @@ package body Exp_Disp is\n \n       Register_CG_Node (Typ);\n \n-      Restore_Globals;\n+      Ghost_Mode := Save_Ghost_Mode;\n       return Result;\n    end Make_DT;\n "}, {"sha": "e80b5b90ecd1287fad33abedfb14ac6c44e9a997", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 28, "deletions": 56, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -303,9 +303,8 @@ package body Exp_Prag is\n    --------------------------\n \n    procedure Expand_Pragma_Check (N : Node_Id) is\n-      GM   : constant Ghost_Mode_Type := Ghost_Mode;\n-      Cond : constant Node_Id         := Arg2 (N);\n-      Nam  : constant Name_Id         := Chars (Arg1 (N));\n+      Cond : constant Node_Id := Arg2 (N);\n+      Nam  : constant Name_Id := Chars (Arg1 (N));\n       Msg  : Node_Id;\n \n       Loc : constant Source_Ptr := Sloc (First_Node (Cond));\n@@ -329,16 +328,6 @@ package body Exp_Prag is\n          return;\n       end if;\n \n-      --  Set the Ghost mode in effect from the pragma. In general both the\n-      --  assertion policy and the Ghost policy of pragma Check must agree,\n-      --  but there are cases where this can be circumvented. For instance,\n-      --  a living subtype with an ignored predicate may be declared in one\n-      --  packade, an ignored Ghost object in another and the compilation may\n-      --  use -gnata to enable assertions.\n-      --  ??? Ghost predicates are under redesign\n-\n-      Set_Ghost_Mode (N);\n-\n       --  Since this check is active, we rewrite the pragma into a\n       --  corresponding if statement, and then analyze the statement.\n \n@@ -502,11 +491,6 @@ package body Exp_Prag is\n             Error_Msg_N (\"?A?check will fail at run time\", N);\n          end if;\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Expand_Pragma_Check;\n \n    ---------------------------------\n@@ -992,7 +976,8 @@ package body Exp_Prag is\n \n       Aggr : constant Node_Id :=\n                Expression (First (Pragma_Argument_Associations (CCs)));\n-      GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n       Case_Guard    : Node_Id;\n       CG_Checks     : Node_Id;\n@@ -1027,12 +1012,20 @@ package body Exp_Prag is\n          return;\n       end if;\n \n-      --  The contract cases may be subject to pragma Ghost with policy Ignore.\n-      --  Set the mode now to ensure that any nodes generated during expansion\n-      --  are properly flagged as ignored Ghost.\n+      --  The contract cases is Ghost when it applies to a Ghost entity. Set\n+      --  the mode now to ensure that any nodes generated during expansion are\n+      --  properly flagged as Ghost.\n \n       Set_Ghost_Mode (CCs);\n \n+      --  The expansion of contract cases is quite distributed as it produces\n+      --  various statements to evaluate the case guards and consequences. To\n+      --  preserve the original context, set the Is_Assertion_Expr flag. This\n+      --  aids the Ghost legality checks when verifying the placement of a\n+      --  reference to a Ghost entity.\n+\n+      In_Assertion_Expr := In_Assertion_Expr + 1;\n+\n       Multiple_PCs := List_Length (Component_Associations (Aggr)) > 1;\n \n       --  Create the counter which tracks the number of case guards that\n@@ -1258,10 +1251,8 @@ package body Exp_Prag is\n \n       Append_To (Stmts, Conseq_Checks);\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      In_Assertion_Expr := In_Assertion_Expr - 1;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_Pragma_Contract_Cases;\n \n    ---------------------------------------\n@@ -1361,30 +1352,14 @@ package body Exp_Prag is\n    -------------------------------------\n \n    procedure Expand_Pragma_Initial_Condition (Spec_Or_Body : Node_Id) is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-\n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n-      --  Local variables\n-\n       Loc       : constant Source_Ptr := Sloc (Spec_Or_Body);\n       Check     : Node_Id;\n       Expr      : Node_Id;\n       Init_Cond : Node_Id;\n       List      : List_Id;\n       Pack_Id   : Entity_Id;\n \n-   --  Start of processing for Expand_Pragma_Initial_Condition\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    begin\n       if Nkind (Spec_Or_Body) = N_Package_Body then\n@@ -1424,9 +1399,9 @@ package body Exp_Prag is\n \n       Init_Cond := Get_Pragma (Pack_Id, Pragma_Initial_Condition);\n \n-      --  The initial condition be subject to pragma Ghost with policy Ignore.\n-      --  Set the mode now to ensure that any nodes generated during expansion\n-      --  are properly flagged as ignored Ghost.\n+      --  The initial condition is Ghost when it applies to a Ghost entity. Set\n+      --  the mode now to ensure that any nodes generated during expansion are\n+      --  properly flagged as Ghost.\n \n       Set_Ghost_Mode (Init_Cond);\n \n@@ -1442,7 +1417,7 @@ package body Exp_Prag is\n       --  runtime check as it will repeat the illegality.\n \n       if Error_Posted (Init_Cond) or else Error_Posted (Expr) then\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n       end if;\n \n@@ -1461,7 +1436,7 @@ package body Exp_Prag is\n       Append_To (List, Check);\n       Analyze (Check);\n \n-      Restore_Globals;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_Pragma_Initial_Condition;\n \n    ------------------------------------\n@@ -1811,7 +1786,7 @@ package body Exp_Prag is\n \n       --  Local variables\n \n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    --  Start of processing for Expand_Pragma_Loop_Variant\n \n@@ -1825,9 +1800,9 @@ package body Exp_Prag is\n          return;\n       end if;\n \n-      --  The loop variant may be subject to pragma Ghost with policy Ignore.\n-      --  Set the mode now to ensure that any nodes generated during expansion\n-      --  are properly flagged as ignored Ghost.\n+      --  The loop variant is Ghost when it applies to a Ghost entity. Set\n+      --  the mode now to ensure that any nodes generated during expansion\n+      --  are properly flagged as Ghost.\n \n       Set_Ghost_Mode (N);\n \n@@ -1892,10 +1867,7 @@ package body Exp_Prag is\n       --  corresponding declarations and statements. We leave it in the tree\n       --  for documentation purposes. It will be ignored by the backend.\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_Pragma_Loop_Variant;\n \n    --------------------------------"}, {"sha": "4cbb20bcf0255f802b878dc1670078128a5ed023", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -6424,34 +6424,17 @@ package body Exp_Util is\n       Expr : Node_Id;\n       Mem  : Boolean := False) return Node_Id\n    is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-\n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n-      --  Local variables\n-\n       Loc  : constant Source_Ptr := Sloc (Expr);\n       Call : Node_Id;\n       PFM  : Entity_Id;\n \n-   --  Start of processing for Make_Predicate_Call\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    begin\n       pragma Assert (Present (Predicate_Function (Typ)));\n \n-      --  The related type may be subject to pragma Ghost with policy Ignore.\n-      --  Set the mode now to ensure that the call is properly flagged as\n-      --  ignored Ghost.\n+      --  The related type may be subject to pragma Ghost. Set the mode now to\n+      --  ensure that the call is properly marked as Ghost.\n \n       Set_Ghost_Mode_From_Entity (Typ);\n \n@@ -6466,7 +6449,7 @@ package body Exp_Util is\n                 Name                   => New_Occurrence_Of (PFM, Loc),\n                 Parameter_Associations => New_List (Relocate_Node (Expr)));\n \n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return Call;\n          end if;\n       end if;\n@@ -6479,7 +6462,7 @@ package body Exp_Util is\n             New_Occurrence_Of (Predicate_Function (Typ), Loc),\n           Parameter_Associations => New_List (Relocate_Node (Expr)));\n \n-      Restore_Globals;\n+      Ghost_Mode := Save_Ghost_Mode;\n       return Call;\n    end Make_Predicate_Call;\n "}, {"sha": "b2705672cd12d3f887c7a1700cb65e5db33a72e2", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 25, "deletions": 37, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -1870,10 +1870,6 @@ package body Freeze is\n    -------------------\n \n    function Freeze_Entity (E : Entity_Id; N : Node_Id) return List_Id is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the current Ghost mode in effect in case the entity being frozen\n-      --  sets a different mode.\n-\n       Loc    : constant Source_Ptr := Sloc (N);\n       Atype  : Entity_Id;\n       Comp   : Entity_Id;\n@@ -1945,9 +1941,6 @@ package body Freeze is\n       --  call, but rather must go in the package holding the function, so that\n       --  the backend can process it in the proper context.\n \n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n       procedure Wrap_Imported_Subprogram (E : Entity_Id);\n       --  If E is an entity for an imported subprogram with pre/post-conditions\n       --  then this procedure will create a wrapper to ensure that proper run-\n@@ -4492,15 +4485,6 @@ package body Freeze is\n          Append_List (Result, Decls);\n       end Late_Freeze_Subprogram;\n \n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n       ------------------------------\n       -- Wrap_Imported_Subprogram --\n       ------------------------------\n@@ -4644,12 +4628,16 @@ package body Freeze is\n          end if;\n       end Wrap_Imported_Subprogram;\n \n+      --  Local variables\n+\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n    --  Start of processing for Freeze_Entity\n \n    begin\n-      --  The entity being frozen may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  freezing are properly flagged as ignored Ghost.\n+      --  The entity being frozen may be subject to pragma Ghost. Set the mode\n+      --  now to ensure that any nodes generated during freezing are properly\n+      --  flagged as Ghost.\n \n       Set_Ghost_Mode_From_Entity (E);\n \n@@ -4668,7 +4656,7 @@ package body Freeze is\n       --  Do not freeze if already frozen since we only need one freeze node\n \n       if Is_Frozen (E) then\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return No_List;\n \n       --  It is improper to freeze an external entity within a generic because\n@@ -4683,7 +4671,7 @@ package body Freeze is\n             Analyze_Aspects_At_Freeze_Point (E);\n          end if;\n \n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return No_List;\n \n       --  AI05-0213: A formal incomplete type does not freeze the actual. In\n@@ -4694,19 +4682,19 @@ package body Freeze is\n         and then No (Full_View (Base_Type (E)))\n         and then Ada_Version >= Ada_2012\n       then\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return No_List;\n \n       --  Formal subprograms are never frozen\n \n       elsif Is_Formal_Subprogram (E) then\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return No_List;\n \n       --  Generic types are never frozen as they lack delayed semantic checks\n \n       elsif Is_Generic_Type (E) then\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return No_List;\n \n       --  Do not freeze a global entity within an inner scope created during\n@@ -4740,7 +4728,7 @@ package body Freeze is\n                   then\n                      exit;\n                   else\n-                     Restore_Globals;\n+                     Ghost_Mode := Save_Ghost_Mode;\n                      return No_List;\n                   end if;\n                end if;\n@@ -4776,15 +4764,15 @@ package body Freeze is\n             end loop;\n \n             if No (S) then\n-               Restore_Globals;\n+               Ghost_Mode := Save_Ghost_Mode;\n                return No_List;\n             end if;\n          end;\n \n       elsif Ekind (E) = E_Generic_Package then\n          Result := Freeze_Generic_Entities (E);\n \n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return Result;\n       end if;\n \n@@ -4867,7 +4855,7 @@ package body Freeze is\n \n             if not Is_Internal (E) then\n                if not Freeze_Profile (E) then\n-                  Restore_Globals;\n+                  Ghost_Mode := Save_Ghost_Mode;\n                   return Result;\n                end if;\n             end if;\n@@ -4892,7 +4880,7 @@ package body Freeze is\n \n             if Late_Freezing then\n                Late_Freeze_Subprogram (E);\n-               Restore_Globals;\n+               Ghost_Mode := Save_Ghost_Mode;\n                return No_List;\n             end if;\n \n@@ -5055,7 +5043,7 @@ package body Freeze is\n                and then not Has_Delayed_Freeze (E))\n          then\n             Check_Compile_Time_Size (E);\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return No_List;\n          end if;\n \n@@ -5330,7 +5318,7 @@ package body Freeze is\n \n             if not Is_Frozen (Root_Type (E)) then\n                Set_Is_Frozen (E, False);\n-               Restore_Globals;\n+               Ghost_Mode := Save_Ghost_Mode;\n                return Result;\n             end if;\n \n@@ -5466,7 +5454,7 @@ package body Freeze is\n               and then not Present (Full_View (E))\n             then\n                Set_Is_Frozen (E, False);\n-               Restore_Globals;\n+               Ghost_Mode := Save_Ghost_Mode;\n                return Result;\n \n             --  Case of full view present\n@@ -5558,7 +5546,7 @@ package body Freeze is\n                   Set_RM_Size   (E, RM_Size (Full_View (E)));\n                end if;\n \n-               Restore_Globals;\n+               Ghost_Mode := Save_Ghost_Mode;\n                return Result;\n \n             --  Case of underlying full view present\n@@ -5588,7 +5576,7 @@ package body Freeze is\n \n                Check_Debug_Info_Needed (E);\n \n-               Restore_Globals;\n+               Ghost_Mode := Save_Ghost_Mode;\n                return Result;\n \n             --  Case of no full view present. If entity is derived or subtype,\n@@ -5602,7 +5590,7 @@ package body Freeze is\n \n             else\n                Set_Is_Frozen (E, False);\n-               Restore_Globals;\n+               Ghost_Mode := Save_Ghost_Mode;\n                return No_List;\n             end if;\n \n@@ -5651,7 +5639,7 @@ package body Freeze is\n          --  generic processing), so we never need freeze nodes for them.\n \n          if Is_Generic_Type (E) then\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return Result;\n          end if;\n \n@@ -6267,7 +6255,7 @@ package body Freeze is\n          end if;\n       end if;\n \n-      Restore_Globals;\n+      Ghost_Mode := Save_Ghost_Mode;\n       return Result;\n    end Freeze_Entity;\n "}, {"sha": "7380d9a90576757f6c0aeef7fa70727a315d9ffb", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -67,6 +67,12 @@ package body Ghost is\n    --  Subsidiary to Check_Ghost_Context and Set_Ghost_Mode. Find the entity of\n    --  a reference to a Ghost entity. Return Empty if there is no such entity.\n \n+   function Is_Subject_To_Ghost (N : Node_Id) return Boolean;\n+   --  Subsidiary to routines Is_OK_xxx and Set_Ghost_Mode. Determine whether\n+   --  declaration or body N is subject to aspect or pragma Ghost. Use this\n+   --  routine in cases where [source] pragma Ghost has not been analyzed yet,\n+   --  but the context needs to establish the \"ghostness\" of N.\n+\n    procedure Propagate_Ignored_Ghost_Code (N : Node_Id);\n    --  Subsidiary to routines Mark_xxx_As_Ghost and Set_Ghost_Mode_From_xxx.\n    --  Signal all enclosing scopes that they now contain ignored Ghost code.\n@@ -407,15 +413,27 @@ package body Ghost is\n \n             --  Special cases\n \n-            --  An if statement is a suitable context for a Ghost entity if it\n-            --  is the byproduct of assertion expression expansion.\n+            elsif Nkind (Stmt) = N_If_Statement then\n \n-            elsif Nkind (Stmt) = N_If_Statement\n-              and then Nkind (Original_Node (Stmt)) = N_Pragma\n-              and then Assertion_Expression_Pragma\n-                         (Get_Pragma_Id (Original_Node (Stmt)))\n-            then\n-               return True;\n+               --  An if statement is a suitable context for a Ghost entity if\n+               --  it is the byproduct of assertion expression expansion. Note\n+               --  that the assertion expression may not be related to a Ghost\n+               --  entity, but it may still contain references to Ghost\n+               --  entities.\n+\n+               if Nkind (Original_Node (Stmt)) = N_Pragma\n+                 and then Assertion_Expression_Pragma\n+                            (Get_Pragma_Id (Original_Node (Stmt)))\n+               then\n+                  return True;\n+\n+               --  The expansion of pragma Contract_Cases produces various if\n+               --  statements to evaluate all case guards. This is a suitable\n+               --  context as Contract_Cases is an assertion expression.\n+\n+               elsif In_Assertion_Expr > 0 then\n+                  return True;\n+               end if;\n             end if;\n \n             return False;\n@@ -517,12 +535,10 @@ package body Ghost is\n          Check_Ghost_Policy (Ghost_Id, Ghost_Ref);\n \n       --  Otherwise the Ghost entity appears in a non-Ghost context and affects\n-      --  its behavior or value.\n+      --  its behavior or value (SPARK RM 6.9(11,12)).\n \n       else\n-         Error_Msg_N\n-           (\"ghost entity cannot appear in this context (SPARK RM 6.9(11))\",\n-            Ghost_Ref);\n+         Error_Msg_N (\"ghost entity cannot appear in this context\", Ghost_Ref);\n       end if;\n    end Check_Ghost_Context;\n \n@@ -701,8 +717,8 @@ package body Ghost is\n             Expr := Get_Pragma_Arg (Expr);\n          end if;\n \n-         --  Determine whether the expression of the aspect is static and\n-         --  denotes True.\n+         --  Determine whether the expression of the aspect or pragma is static\n+         --  and denotes True.\n \n          if Present (Expr) then\n             Preanalyze_And_Resolve (Expr);"}, {"sha": "c854629ba82684cf7eddb38567807f76d617a63c", "filename": "gcc/ada/ghost.ads", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fghost.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fghost.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.ads?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -66,12 +66,6 @@ package Ghost is\n    --  Determine whether entity Id is Ghost. To qualify as such, the entity\n    --  must be subject to pragma Ghost.\n \n-   function Is_Subject_To_Ghost (N : Node_Id) return Boolean;\n-   --  Determine whether declarative node N is subject to aspect or pragma\n-   --  Ghost. Use this routine in cases where [source] pragma Ghost has not\n-   --  been analyzed yet, but the context needs to establish the \"ghostness\"\n-   --  of N.\n-\n    procedure Lock;\n    --  Lock internal tables before calling backend\n "}, {"sha": "d6da171961209c0273d16bbe0087723efa37dda4", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -925,9 +925,7 @@ package body Rtsfind is\n \n       --  Local variables\n \n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the current Ghost mode in effect to ensure a clean environment\n-      --  when analyzing the unit.\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    --  Start of processing for Load_RTU\n \n@@ -1043,9 +1041,7 @@ package body Rtsfind is\n          Set_Is_Potentially_Use_Visible (U.Entity, True);\n       end if;\n \n-      --  Restore the original Ghost mode now that analysis has taken place\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Load_RTU;\n \n    --------------------"}, {"sha": "a6f1be13b3b448128ded25662414b9eb699cc2be", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -29,6 +29,7 @@ with Debug_A;  use Debug_A;\n with Elists;   use Elists;\n with Expander; use Expander;\n with Fname;    use Fname;\n+with Ghost;    use Ghost;\n with Lib;      use Lib;\n with Lib.Load; use Lib.Load;\n with Nlists;   use Nlists;\n@@ -95,9 +96,7 @@ package body Sem is\n    -------------\n \n    procedure Analyze (N : Node_Id) is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      --  Save the current Ghost mode in effect in case the construct sets a\n-      --  different mode.\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    begin\n       Debug_A_Entry (\"analyzing  \", N);\n@@ -109,6 +108,14 @@ package body Sem is\n          return;\n       end if;\n \n+      --  A declaration may be subject to pragma Ghost. Set the mode now to\n+      --  ensure that any nodes generated during analysis and expansion are\n+      --  marked as Ghost.\n+\n+      if Is_Declaration (N) then\n+         Set_Ghost_Mode (N);\n+      end if;\n+\n       --  Otherwise processing depends on the node kind\n \n       case Nkind (N) is\n@@ -720,10 +727,7 @@ package body Sem is\n          Expand (N);\n       end if;\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Analyze;\n \n    --  Version with check(s) suppressed\n@@ -1310,9 +1314,7 @@ package body Sem is\n       ----------------\n \n       procedure Do_Analyze is\n-         GM : constant Ghost_Mode_Type := Ghost_Mode;\n-         --  Save the current Ghost mode in effect in case the compilation unit\n-         --  is withed from a unit with a different Ghost mode.\n+         Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n          List : Elist_Id;\n \n@@ -1343,7 +1345,7 @@ package body Sem is\n \n          Pop_Scope;\n          Restore_Scope_Stack (List);\n-         Ghost_Mode := GM;\n+         Ghost_Mode := Save_Ghost_Mode;\n       end Do_Analyze;\n \n       --  Local variables"}, {"sha": "86285ee018bdb2f97d9213bdaf8061efd78bcb62", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -55,17 +55,10 @@ package body Sem_Ch11 is\n    -----------------------------------\n \n    procedure Analyze_Exception_Declaration (N : Node_Id) is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      Id : constant Entity_Id       := Defining_Identifier (N);\n-      PF : constant Boolean         := Is_Pure (Current_Scope);\n+      Id : constant Entity_Id := Defining_Identifier (N);\n+      PF : constant Boolean   := Is_Pure (Current_Scope);\n \n    begin\n-      --  The exception declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       Generate_Definition         (Id);\n       Enter_Name                  (Id);\n       Set_Ekind                   (Id, E_Exception);\n@@ -83,11 +76,6 @@ package body Sem_Ch11 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Id);\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Exception_Declaration;\n \n    --------------------------------"}, {"sha": "e848307fdb8687e11f3bf9003d46a3b8c4a4bbd2", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -3135,7 +3135,6 @@ package body Sem_Ch12 is\n    ------------------------------------------\n \n    procedure Analyze_Generic_Package_Declaration (N : Node_Id) is\n-      GM          : constant Ghost_Mode_Type := Ghost_Mode;\n       Loc         : constant Source_Ptr := Sloc (N);\n       Decls       : constant List_Id :=\n                       Visible_Declarations (Specification (N));\n@@ -3146,11 +3145,6 @@ package body Sem_Ch12 is\n       Save_Parent : Node_Id;\n \n    begin\n-      --  The generic package declaration may be subject to pragma Ghost with\n-      --  policy Ignore. Set the mode now to ensure that any nodes generated\n-      --  during analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n       Check_SPARK_05_Restriction (\"generic is not allowed\", N);\n \n       --  We introduce a renaming of the enclosing package, to have a usable\n@@ -3302,19 +3296,13 @@ package body Sem_Ch12 is\n             end if;\n          end;\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Generic_Package_Declaration;\n \n    --------------------------------------------\n    -- Analyze_Generic_Subprogram_Declaration --\n    --------------------------------------------\n \n    procedure Analyze_Generic_Subprogram_Declaration (N : Node_Id) is\n-      GM          : constant Ghost_Mode_Type := Ghost_Mode;\n       Formals     : List_Id;\n       Id          : Entity_Id;\n       New_N       : Node_Id;\n@@ -3324,12 +3312,6 @@ package body Sem_Ch12 is\n       Typ         : Entity_Id;\n \n    begin\n-      --  The generic subprogram declaration may be subject to pragma Ghost\n-      --  with policy Ignore. Set the mode now to ensure that any nodes\n-      --  generated during analysis and expansion are properly flagged as\n-      --  ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n       Check_SPARK_05_Restriction (\"generic is not allowed\", N);\n \n       --  Create copy of generic unit, and save for instantiation. If the unit\n@@ -3478,11 +3460,6 @@ package body Sem_Ch12 is\n       Generate_Reference_To_Formals (Id);\n \n       List_Inherited_Pre_Post_Aspects (Id);\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Generic_Subprogram_Declaration;\n \n    -----------------------------------"}, {"sha": "f05ad7fdb79c83f524a81ed04c7dfd23d032dbdf", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -7763,22 +7763,22 @@ package body Sem_Ch13 is\n    function Build_Invariant_Procedure_Declaration\n      (Typ : Entity_Id) return Node_Id\n    is\n-      Loc    : constant Source_Ptr      := Sloc (Typ);\n-      GM     : constant Ghost_Mode_Type := Ghost_Mode;\n+      Loc    : constant Source_Ptr := Sloc (Typ);\n       Decl   : Node_Id;\n       Obj_Id : Entity_Id;\n       SId    : Entity_Id;\n \n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n    begin\n       --  Check for duplicate definitions\n \n       if Has_Invariants (Typ) and then Present (Invariant_Procedure (Typ)) then\n          return Empty;\n       end if;\n \n-      --  The related type may be subject to pragma Ghost with policy Ignore.\n-      --  Set the mode now to ensure that the predicate functions are properly\n-      --  flagged as ignored Ghost.\n+      --  The related type may be subject to pragma Ghost. Set the mode now to\n+      --  ensure that the predicate functions are properly marked as Ghost.\n \n       Set_Ghost_Mode_From_Entity (Typ);\n \n@@ -7810,10 +7810,7 @@ package body Sem_Ch13 is\n                 Defining_Identifier => Obj_Id,\n                 Parameter_Type      => New_Occurrence_Of (Typ, Loc)))));\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n \n       return Decl;\n    end Build_Invariant_Procedure_Declaration;\n@@ -8563,7 +8560,7 @@ package body Sem_Ch13 is\n \n       --  Local variables\n \n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    --  Start of processing for Build_Predicate_Functions\n \n@@ -8576,9 +8573,8 @@ package body Sem_Ch13 is\n          return;\n       end if;\n \n-      --  The related type may be subject to pragma Ghost with policy Ignore.\n-      --  Set the mode now to ensure that the predicate functions are properly\n-      --  flagged as ignored Ghost.\n+      --  The related type may be subject to pragma Ghost. Set the mode now to\n+      --  ensure that the predicate functions are properly marked as Ghost.\n \n       Set_Ghost_Mode_From_Entity (Typ);\n \n@@ -8927,10 +8923,7 @@ package body Sem_Ch13 is\n          end;\n       end if;\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Build_Predicate_Functions;\n \n    -----------------------------------------"}, {"sha": "9fec59564bfa51b7cdfe0ff20b4488adf9a96f8e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 17, "deletions": 112, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -2556,9 +2556,8 @@ package body Sem_Ch3 is\n    -----------------------------------\n \n    procedure Analyze_Full_Type_Declaration (N : Node_Id) is\n-      Def    : constant Node_Id         := Type_Definition (N);\n-      Def_Id : constant Entity_Id       := Defining_Identifier (N);\n-      GM     : constant Ghost_Mode_Type := Ghost_Mode;\n+      Def    : constant Node_Id   := Type_Definition (N);\n+      Def_Id : constant Entity_Id := Defining_Identifier (N);\n       T      : Entity_Id;\n       Prev   : Entity_Id;\n \n@@ -2576,9 +2575,6 @@ package body Sem_Ch3 is\n       --  list later in Sem_Disp.Check_Operation_From_Incomplete_Type (which\n       --  is called from Process_Incomplete_Dependents).\n \n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n       ------------------------------------\n       -- Check_Ops_From_Incomplete_Type --\n       ------------------------------------\n@@ -2616,26 +2612,11 @@ package body Sem_Ch3 is\n          end if;\n       end Check_Ops_From_Incomplete_Type;\n \n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n    --  Start of processing for Analyze_Full_Type_Declaration\n \n    begin\n       Prev := Find_Type_Name (N);\n \n-      --  The type declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N, Prev);\n-\n       --  The full view, if present, now points to the current type. If there\n       --  is an incomplete partial view, set a link to it, to simplify the\n       --  retrieval of primitive operations of the type.\n@@ -2773,7 +2754,6 @@ package body Sem_Ch3 is\n       end if;\n \n       if Etype (T) = Any_Type then\n-         Restore_Globals;\n          return;\n       end if;\n \n@@ -2914,27 +2894,19 @@ package body Sem_Ch3 is\n             Analyze_Aspect_Specifications (N, Def_Id);\n          end if;\n       end if;\n-\n-      Restore_Globals;\n    end Analyze_Full_Type_Declaration;\n \n    ----------------------------------\n    -- Analyze_Incomplete_Type_Decl --\n    ----------------------------------\n \n    procedure Analyze_Incomplete_Type_Decl (N : Node_Id) is\n-      F  : constant Boolean         := Is_Pure (Current_Scope);\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-      T  : Entity_Id;\n+      F : constant Boolean := Is_Pure (Current_Scope);\n+      T : Entity_Id;\n \n    begin\n       Check_SPARK_05_Restriction (\"incomplete type is not allowed\", N);\n \n-      --  The incomplete type declaration may be subject to pragma Ghost with\n-      --  policy Ignore. Set the mode now to ensure that any nodes generated\n-      --  during analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n       Generate_Definition (Defining_Identifier (N));\n \n       --  Process an incomplete declaration. The identifier must not have been\n@@ -2984,11 +2956,6 @@ package body Sem_Ch3 is\n \n       Set_Private_Dependents (T, New_Elmt_List);\n       Set_Is_Pure            (T, F);\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Incomplete_Type_Decl;\n \n    -----------------------------------\n@@ -3063,37 +3030,13 @@ package body Sem_Ch3 is\n    --------------------------------\n \n    procedure Analyze_Number_Declaration (N : Node_Id) is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-\n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n-      --  Local variables\n-\n       E     : constant Node_Id   := Expression (N);\n       Id    : constant Entity_Id := Defining_Identifier (N);\n       Index : Interp_Index;\n       It    : Interp;\n       T     : Entity_Id;\n \n-   --  Start of processing for Analyze_Number_Declaration\n-\n    begin\n-      --  The number declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       Generate_Definition (Id);\n       Enter_Name (Id);\n \n@@ -3113,8 +3056,6 @@ package body Sem_Ch3 is\n          Set_Etype     (Id, Universal_Integer);\n          Set_Ekind     (Id, E_Named_Integer);\n          Set_Is_Frozen (Id, True);\n-\n-         Restore_Globals;\n          return;\n       end if;\n \n@@ -3216,8 +3157,6 @@ package body Sem_Ch3 is\n          Set_Ekind               (Id, E_Constant);\n          Set_Never_Set_In_Source (Id, True);\n          Set_Is_True_Constant    (Id, True);\n-\n-         Restore_Globals;\n          return;\n       end if;\n \n@@ -3231,8 +3170,6 @@ package body Sem_Ch3 is\n          Rewrite (E, Make_Integer_Literal (Sloc (N), 1));\n          Set_Etype (E, Any_Type);\n       end if;\n-\n-      Restore_Globals;\n    end Analyze_Number_Declaration;\n \n    -----------------------------\n@@ -3406,9 +3343,8 @@ package body Sem_Ch3 is\n    --------------------------------\n \n    procedure Analyze_Object_Declaration (N : Node_Id) is\n-      Loc   : constant Source_Ptr      := Sloc (N);\n-      GM    : constant Ghost_Mode_Type := Ghost_Mode;\n-      Id    : constant Entity_Id       := Defining_Identifier (N);\n+      Loc   : constant Source_Ptr := Sloc (N);\n+      Id    : constant Entity_Id  := Defining_Identifier (N);\n       Act_T : Entity_Id;\n       T     : Entity_Id;\n \n@@ -3437,9 +3373,6 @@ package body Sem_Ch3 is\n \n       --  Any other relevant delayed aspects on object declarations ???\n \n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n       -----------------\n       -- Count_Tasks --\n       -----------------\n@@ -3518,14 +3451,9 @@ package body Sem_Ch3 is\n          return False;\n       end Delayed_Aspect_Present;\n \n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n+      --  Local variables\n \n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    --  Start of processing for Analyze_Object_Declaration\n \n@@ -3580,9 +3508,10 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n-      --  The object declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  analysis and expansion are properly flagged as ignored Ghost.\n+      --  The object declaration is Ghost when it is subject to pragma Ghost or\n+      --  completes a deferred Ghost constant. Set the mode now to ensure that\n+      --  any nodes generated during analysis and expansion are properly marked\n+      --  as Ghost.\n \n       Set_Ghost_Mode (N, Prev_Entity);\n \n@@ -3866,7 +3795,7 @@ package body Sem_Ch3 is\n            and then Analyzed (N)\n            and then No (Expression (N))\n          then\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n          end if;\n \n@@ -4139,7 +4068,7 @@ package body Sem_Ch3 is\n                Freeze_Before (N, T);\n                Set_Is_Frozen (Id);\n \n-               Restore_Globals;\n+               Ghost_Mode := Save_Ghost_Mode;\n                return;\n \n             else\n@@ -4522,7 +4451,7 @@ package body Sem_Ch3 is\n          Check_No_Hidden_State (Id);\n       end if;\n \n-      Restore_Globals;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Analyze_Object_Declaration;\n \n    ---------------------------\n@@ -4543,19 +4472,12 @@ package body Sem_Ch3 is\n    -------------------------------------------\n \n    procedure Analyze_Private_Extension_Declaration (N : Node_Id) is\n-      GM          : constant Ghost_Mode_Type := Ghost_Mode;\n-      Indic       : constant Node_Id         := Subtype_Indication (N);\n-      T           : constant Entity_Id       := Defining_Identifier (N);\n+      Indic       : constant Node_Id   := Subtype_Indication (N);\n+      T           : constant Entity_Id := Defining_Identifier (N);\n       Parent_Base : Entity_Id;\n       Parent_Type : Entity_Id;\n \n    begin\n-      --  The private extension declaration may be subject to pragma Ghost with\n-      --  policy Ignore. Set the mode now to ensure that any nodes generated\n-      --  during analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       --  Ada 2005 (AI-251): Decorate all names in list of ancestor interfaces\n \n       if Is_Non_Empty_List (Interface_List (N)) then\n@@ -4769,11 +4691,6 @@ package body Sem_Ch3 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, T);\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Private_Extension_Declaration;\n \n    ---------------------------------\n@@ -4784,18 +4701,11 @@ package body Sem_Ch3 is\n      (N    : Node_Id;\n       Skip : Boolean := False)\n    is\n-      GM       : constant Ghost_Mode_Type := Ghost_Mode;\n       Id       : constant Entity_Id := Defining_Identifier (N);\n       R_Checks : Check_Result;\n       T        : Entity_Id;\n \n    begin\n-      --  The subtype declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       Generate_Definition (Id);\n       Set_Is_Pure (Id, Is_Pure (Current_Scope));\n       Init_Size_Align (Id);\n@@ -5393,11 +5303,6 @@ package body Sem_Ch3 is\n       end if;\n \n       Analyze_Dimension (N);\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Subtype_Declaration;\n \n    --------------------------------"}, {"sha": "aaa1fcd1453d2581ffe51a27e646a7bd3ac2118f", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -90,9 +90,8 @@ package body Sem_Ch5 is\n    ------------------------\n \n    procedure Analyze_Assignment (N : Node_Id) is\n-      GM   : constant Ghost_Mode_Type := Ghost_Mode;\n-      Lhs  : constant Node_Id         := Name (N);\n-      Rhs  : constant Node_Id         := Expression (N);\n+      Lhs  : constant Node_Id := Name (N);\n+      Rhs  : constant Node_Id := Expression (N);\n       T1   : Entity_Id;\n       T2   : Entity_Id;\n       Decl : Node_Id;\n@@ -107,9 +106,6 @@ package body Sem_Ch5 is\n       --  the assignment, and at the end of processing before setting any new\n       --  current values in place.\n \n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n       procedure Set_Assignment_Type\n         (Opnd      : Node_Id;\n          Opnd_Type : in out Entity_Id);\n@@ -215,15 +211,6 @@ package body Sem_Ch5 is\n          end if;\n       end Kill_Lhs;\n \n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n       -------------------------\n       -- Set_Assignment_Type --\n       -------------------------\n@@ -282,6 +269,10 @@ package body Sem_Ch5 is\n          end if;\n       end Set_Assignment_Type;\n \n+      --  Local variables\n+\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n    --  Start of processing for Analyze_Assignment\n \n    begin\n@@ -293,10 +284,9 @@ package body Sem_Ch5 is\n \n       Analyze (Lhs);\n \n-      --  The left hand side of an assignment may reference an entity subject\n-      --  to pragma Ghost with policy Ignore. Set the mode now to ensure that\n-      --  any nodes generated during analysis and expansion are properly\n-      --  flagged as ignored Ghost.\n+      --  An assignment statement is Ghost when the left hand side denotes a\n+      --  Ghost entity. Set the mode now to ensure that any nodes generated\n+      --  during analysis and expansion are properly marked as Ghost.\n \n       Set_Ghost_Mode (N);\n       Analyze (Rhs);\n@@ -391,7 +381,7 @@ package body Sem_Ch5 is\n             Error_Msg_N\n               (\"no valid types for left-hand side for assignment\", Lhs);\n             Kill_Lhs;\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n          end if;\n       end if;\n@@ -467,14 +457,14 @@ package body Sem_Ch5 is\n                                   \"specified??\", Lhs);\n                   end if;\n \n-                  Restore_Globals;\n+                  Ghost_Mode := Save_Ghost_Mode;\n                   return;\n                end if;\n             end if;\n          end;\n \n          Diagnose_Non_Variable_Lhs (Lhs);\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n \n       --  Error of assigning to limited type. We do however allow this in\n@@ -495,7 +485,7 @@ package body Sem_Ch5 is\n             Explain_Limited_Type (T1, Lhs);\n          end if;\n \n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n \n       --  Enforce RM 3.9.3 (8): the target of an assignment operation cannot be\n@@ -534,7 +524,7 @@ package body Sem_Ch5 is\n       then\n          Error_Msg_N (\"invalid use of incomplete type\", Lhs);\n          Kill_Lhs;\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n       end if;\n \n@@ -552,7 +542,7 @@ package body Sem_Ch5 is\n \n       if Rhs = Error then\n          Kill_Lhs;\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n       end if;\n \n@@ -561,7 +551,7 @@ package body Sem_Ch5 is\n       if not Covers (T1, T2) then\n          Wrong_Type (Rhs, Etype (Lhs));\n          Kill_Lhs;\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n       end if;\n \n@@ -589,7 +579,7 @@ package body Sem_Ch5 is\n \n       if T1 = Any_Type or else T2 = Any_Type then\n          Kill_Lhs;\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n       end if;\n \n@@ -682,7 +672,7 @@ package body Sem_Ch5 is\n             --  to reset Is_True_Constant, and desirable for xref purposes.\n \n             Note_Possible_Modification (Lhs, Sure => True);\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n \n          --  If we know the right hand side is non-null, then we convert to the\n@@ -889,7 +879,7 @@ package body Sem_Ch5 is\n       end;\n \n       Analyze_Dimension (N);\n-      Restore_Globals;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Analyze_Assignment;\n \n    -----------------------------"}, {"sha": "4ae437ec76d316a32e22f61e46ccae17cf4fa299", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 37, "deletions": 98, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -209,18 +209,11 @@ package body Sem_Ch6 is\n    ---------------------------------------------\n \n    procedure Analyze_Abstract_Subprogram_Declaration (N : Node_Id) is\n-      GM      : constant Ghost_Mode_Type := Ghost_Mode;\n-      Scop    : constant Entity_Id       := Current_Scope;\n-      Subp_Id : constant Entity_Id       :=\n+      Scop    : constant Entity_Id := Current_Scope;\n+      Subp_Id : constant Entity_Id :=\n                   Analyze_Subprogram_Specification (Specification (N));\n \n    begin\n-      --  The abstract subprogram declaration may be subject to pragma Ghost\n-      --  with policy Ignore. Set the mode now to ensure that any nodes\n-      --  generated during analysis and expansion are properly flagged as\n-      --  ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n       Check_SPARK_05_Restriction (\"abstract subprogram is not allowed\", N);\n \n       Generate_Definition (Subp_Id);\n@@ -261,11 +254,6 @@ package body Sem_Ch6 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Subp_Id);\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Abstract_Subprogram_Declaration;\n \n    ---------------------------------\n@@ -1547,15 +1535,10 @@ package body Sem_Ch6 is\n    ----------------------------\n \n    procedure Analyze_Procedure_Call (N : Node_Id) is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-\n       procedure Analyze_Call_And_Resolve;\n       --  Do Analyze and Resolve calls for procedure call\n       --  At end, check illegal order dependence.\n \n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n       ------------------------------\n       -- Analyze_Call_And_Resolve --\n       ------------------------------\n@@ -1570,15 +1553,6 @@ package body Sem_Ch6 is\n          end if;\n       end Analyze_Call_And_Resolve;\n \n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n       --  Local variables\n \n       Actuals : constant List_Id    := Parameter_Associations (N);\n@@ -1587,6 +1561,8 @@ package body Sem_Ch6 is\n       Actual  : Node_Id;\n       New_N   : Node_Id;\n \n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n    --  Start of processing for Analyze_Procedure_Call\n \n    begin\n@@ -1618,10 +1594,9 @@ package body Sem_Ch6 is\n          return;\n       end if;\n \n-      --  The name of the procedure call may reference an entity subject to\n-      --  pragma Ghost with policy Ignore. Set the mode now to ensure that any\n-      --  nodes generated during analysis and expansion are properly flagged as\n-      --  ignored Ghost.\n+      --  A procedure call is Ghost when its name denotes a Ghost procedure.\n+      --  Set the mode now to ensure that any nodes generated during analysis\n+      --  and expansion are properly marked as Ghost.\n \n       Set_Ghost_Mode (N);\n \n@@ -1657,7 +1632,7 @@ package body Sem_Ch6 is\n         and then Is_Record_Type (Etype (Entity (P)))\n         and then Remote_AST_I_Dereference (P)\n       then\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n \n       elsif Is_Entity_Name (P)\n@@ -1794,7 +1769,7 @@ package body Sem_Ch6 is\n          Error_Msg_N (\"invalid procedure or entry call\", N);\n       end if;\n \n-      Restore_Globals;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Analyze_Procedure_Call;\n \n    ------------------------------\n@@ -2275,7 +2250,6 @@ package body Sem_Ch6 is\n    --  the subprogram, or to perform conformance checks.\n \n    procedure Analyze_Subprogram_Body_Helper (N : Node_Id) is\n-      GM           : constant Ghost_Mode_Type := Ghost_Mode;\n       Loc          : constant Source_Ptr := Sloc (N);\n       Body_Spec    : Node_Id             := Specification (N);\n       Body_Id      : Entity_Id           := Defining_Entity (Body_Spec);\n@@ -2351,9 +2325,6 @@ package body Sem_Ch6 is\n       --  Determine whether subprogram Subp_Id is a primitive of a concurrent\n       --  type that implements an interface and has a private view.\n \n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n       procedure Set_Trivial_Subprogram (N : Node_Id);\n       --  Sets the Is_Trivial_Subprogram flag in both spec and body of the\n       --  subprogram whose body is being analyzed. N is the statement node\n@@ -2930,15 +2901,6 @@ package body Sem_Ch6 is\n          return False;\n       end Is_Private_Concurrent_Primitive;\n \n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n       ----------------------------\n       -- Set_Trivial_Subprogram --\n       ----------------------------\n@@ -3046,6 +3008,10 @@ package body Sem_Ch6 is\n          end if;\n       end Verify_Overriding_Indicator;\n \n+      --  Local variables\n+\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n    --  Start of processing for Analyze_Subprogram_Body_Helper\n \n    begin\n@@ -3065,10 +3031,10 @@ package body Sem_Ch6 is\n          if Is_Generic_Subprogram (Prev_Id) then\n             Spec_Id := Prev_Id;\n \n-            --  The corresponding spec may be subject to pragma Ghost with\n-            --  policy Ignore. Set the mode now to ensure that any nodes\n-            --  generated during analysis and expansion are properly flagged\n-            --  as ignored Ghost.\n+            --  A subprogram body is Ghost when it is stand alone and subject\n+            --  to pragma Ghost or when the corresponding spec is Ghost. Set\n+            --  the mode now to ensure that any nodes generated during analysis\n+            --  and expansion are properly marked as Ghost.\n \n             Set_Ghost_Mode          (N, Spec_Id);\n             Set_Is_Compilation_Unit (Body_Id, Is_Compilation_Unit (Spec_Id));\n@@ -3081,15 +3047,15 @@ package body Sem_Ch6 is\n                Check_Missing_Return;\n             end if;\n \n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n \n          else\n             --  Previous entity conflicts with subprogram name. Attempting to\n             --  enter name will post error.\n \n             Enter_Name (Body_Id);\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n          end if;\n \n@@ -3100,7 +3066,7 @@ package body Sem_Ch6 is\n       --  analysis.\n \n       elsif Prev_Id = Body_Id and then Has_Completion (Body_Id) then\n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n \n       else\n@@ -3112,20 +3078,20 @@ package body Sem_Ch6 is\n             if Is_Private_Concurrent_Primitive (Body_Id) then\n                Spec_Id := Disambiguate_Spec;\n \n-               --  The corresponding spec may be subject to pragma Ghost with\n-               --  policy Ignore. Set the mode now to ensure that any nodes\n-               --  generated during analysis and expansion are properly flagged\n-               --  as ignored Ghost.\n+               --  A subprogram body is Ghost when it is stand alone and\n+               --  subject to pragma Ghost or when the corresponding spec is\n+               --  Ghost. Set the mode now to ensure that any nodes generated\n+               --  during analysis and expansion are properly marked as Ghost.\n \n                Set_Ghost_Mode (N, Spec_Id);\n \n             else\n                Spec_Id := Find_Corresponding_Spec (N);\n \n-               --  The corresponding spec may be subject to pragma Ghost with\n-               --  policy Ignore. Set the mode now to ensure that any nodes\n-               --  generated during analysis and expansion are properly flagged\n-               --  as ignored Ghost.\n+               --  A subprogram body is Ghost when it is stand alone and\n+               --  subject to pragma Ghost or when the corresponding spec is\n+               --  Ghost. Set the mode now to ensure that any nodes generated\n+               --  during analysis and expansion are properly marked as Ghost.\n \n                Set_Ghost_Mode (N, Spec_Id);\n \n@@ -3179,7 +3145,7 @@ package body Sem_Ch6 is\n             --  If this is a duplicate body, no point in analyzing it\n \n             if Error_Posted (N) then\n-               Restore_Globals;\n+               Ghost_Mode := Save_Ghost_Mode;\n                return;\n             end if;\n \n@@ -3212,10 +3178,10 @@ package body Sem_Ch6 is\n          else\n             Spec_Id := Corresponding_Spec (N);\n \n-            --  The corresponding spec may be subject to pragma Ghost with\n-            --  policy Ignore. Set the mode now to ensure that any nodes\n-            --  generated during analysis and expansion are properly flagged\n-            --  as ignored Ghost.\n+            --  A subprogram body is Ghost when it is stand alone and subject\n+            --  to pragma Ghost or when the corresponding spec is Ghost. Set\n+            --  the mode now to ensure that any nodes generated during analysis\n+            --  and expansion are properly marked as Ghost.\n \n             Set_Ghost_Mode (N, Spec_Id);\n          end if;\n@@ -3292,7 +3258,7 @@ package body Sem_Ch6 is\n \n          if Is_Abstract_Subprogram (Spec_Id) then\n             Error_Msg_N (\"an abstract subprogram cannot have a body\", N);\n-            Restore_Globals;\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n \n          else\n@@ -3362,7 +3328,7 @@ package body Sem_Ch6 is\n             if not Conformant\n               and then not Mode_Conformant (Body_Id, Spec_Id)\n             then\n-               Restore_Globals;\n+               Ghost_Mode := Save_Ghost_Mode;\n                return;\n             end if;\n          end if;\n@@ -3569,7 +3535,7 @@ package body Sem_Ch6 is\n             Analyze_Aspect_Specifications_On_Body_Or_Stub (N);\n          end if;\n \n-         Restore_Globals;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n       end if;\n \n@@ -4034,7 +4000,7 @@ package body Sem_Ch6 is\n          end if;\n       end;\n \n-      Restore_Globals;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Analyze_Subprogram_Body_Helper;\n \n    ---------------------------------\n@@ -4139,37 +4105,13 @@ package body Sem_Ch6 is\n    ------------------------------------\n \n    procedure Analyze_Subprogram_Declaration (N : Node_Id) is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-\n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n-      --  Local variables\n-\n       Scop       : constant Entity_Id := Current_Scope;\n       Designator : Entity_Id;\n \n       Is_Completion : Boolean;\n       --  Indicates whether a null procedure declaration is a completion\n \n-   --  Start of processing for Analyze_Subprogram_Declaration\n-\n    begin\n-      --  The subprogram declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       --  Null procedures are not allowed in SPARK\n \n       if Nkind (Specification (N)) = N_Procedure_Specification\n@@ -4191,7 +4133,6 @@ package body Sem_Ch6 is\n          --  The null procedure acts as a body, nothing further is needed\n \n          if Is_Completion then\n-            Restore_Globals;\n             return;\n          end if;\n       end if;\n@@ -4372,8 +4313,6 @@ package body Sem_Ch6 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Designator);\n       end if;\n-\n-      Restore_Globals;\n    end Analyze_Subprogram_Declaration;\n \n    --------------------------------------"}, {"sha": "00efbe0ea68b8c2e311ce499cb504ad3c7a12467", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 5, "deletions": 48, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -571,7 +571,7 @@ package body Sem_Ch7 is\n \n       --  Local variables\n \n-      GM               : constant Ghost_Mode_Type := Ghost_Mode;\n+      Save_Ghost_Mode  : constant Ghost_Mode_Type := Ghost_Mode;\n       Body_Id          : Entity_Id;\n       HSS              : Node_Id;\n       Last_Spec_Entity : Entity_Id;\n@@ -637,10 +637,9 @@ package body Sem_Ch7 is\n          end if;\n       end if;\n \n-      --  The corresponding spec of the package body may be subject to pragma\n-      --  Ghost with policy Ignore. Set the mode now to ensure that any nodes\n-      --  generated during analysis and expansion are properly flagged as\n-      --  ignored Ghost.\n+      --  A package body is Ghost when the corresponding spec is Ghost. Set\n+      --  the mode now to ensure that any nodes generated during analysis and\n+      --  expansion are properly flagged as ignored Ghost.\n \n       Set_Ghost_Mode (N, Spec_Id);\n \n@@ -942,10 +941,7 @@ package body Sem_Ch7 is\n          end if;\n       end if;\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Analyze_Package_Body_Helper;\n \n    ------------------------------\n@@ -1021,22 +1017,6 @@ package body Sem_Ch7 is\n    ---------------------------------\n \n    procedure Analyze_Package_Declaration (N : Node_Id) is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-\n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n-      --  Local variables\n-\n       Id : constant Node_Id := Defining_Entity (N);\n \n       Body_Required : Boolean;\n@@ -1048,8 +1028,6 @@ package body Sem_Ch7 is\n       PF : Boolean;\n       --  True when in the context of a declared pure library unit\n \n-   --  Start of processing for Analyze_Package_Declaration\n-\n    begin\n       if Debug_Flag_C then\n          Write_Str (\"==> package spec \");\n@@ -1060,12 +1038,6 @@ package body Sem_Ch7 is\n          Indent;\n       end if;\n \n-      --  The package declaration may be subject to pragma Ghost with policy\n-      --  Ignore. Set the mode now to ensure that any nodes generated during\n-      --  analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       Generate_Definition (Id);\n       Enter_Name (Id);\n       Set_Ekind  (Id, E_Package);\n@@ -1102,7 +1074,6 @@ package body Sem_Ch7 is\n       --     package Pkg is ...\n \n       if From_Limited_With (Id) then\n-         Restore_Globals;\n          return;\n       end if;\n \n@@ -1163,8 +1134,6 @@ package body Sem_Ch7 is\n          Write_Location (Sloc (N));\n          Write_Eol;\n       end if;\n-\n-      Restore_Globals;\n    end Analyze_Package_Declaration;\n \n    -----------------------------------\n@@ -1851,17 +1820,10 @@ package body Sem_Ch7 is\n    --------------------------------------\n \n    procedure Analyze_Private_Type_Declaration (N : Node_Id) is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n       Id : constant Entity_Id := Defining_Identifier (N);\n       PF : constant Boolean   := Is_Pure (Enclosing_Lib_Unit_Entity);\n \n    begin\n-      --  The private type declaration may be subject to pragma Ghost with\n-      --  policy Ignore. Set the mode now to ensure that any nodes generated\n-      --  during analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       Generate_Definition (Id);\n       Set_Is_Pure         (Id, PF);\n       Init_Size_Align     (Id);\n@@ -1885,11 +1847,6 @@ package body Sem_Ch7 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Id);\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Private_Type_Declaration;\n \n    ----------------------------------"}, {"sha": "a12649e0cf165a85af5da649de0781a050c24c5d", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 4, "deletions": 81, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -550,17 +550,10 @@ package body Sem_Ch8 is\n    --  there is more than one element in the list.\n \n    procedure Analyze_Exception_Renaming (N : Node_Id) is\n-      GM  : constant Ghost_Mode_Type := Ghost_Mode;\n-      Id  : constant Entity_Id       := Defining_Entity (N);\n-      Nam : constant Node_Id         := Name (N);\n+      Id  : constant Entity_Id := Defining_Entity (N);\n+      Nam : constant Node_Id   := Name (N);\n \n    begin\n-      --  The exception renaming declaration may be subject to pragma Ghost\n-      --  with policy Ignore. Set the mode now to ensure that any nodes\n-      --  generated during analysis and expansion are properly flagged as\n-      --  ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n       Check_SPARK_05_Restriction (\"exception renaming is not allowed\", N);\n \n       Enter_Name (Id);\n@@ -595,11 +588,6 @@ package body Sem_Ch8 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Id);\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Exception_Renaming;\n \n    ---------------------------\n@@ -669,8 +657,7 @@ package body Sem_Ch8 is\n      (N : Node_Id;\n       K : Entity_Kind)\n    is\n-      GM    : constant Ghost_Mode_Type := Ghost_Mode;\n-      New_P : constant Entity_Id       := Defining_Entity (N);\n+      New_P : constant Entity_Id := Defining_Entity (N);\n       Old_P : Entity_Id;\n \n       Inst  : Boolean := False;\n@@ -681,11 +668,6 @@ package body Sem_Ch8 is\n          return;\n       end if;\n \n-      --  The generic renaming declaration may be subject to pragma Ghost with\n-      --  policy Ignore. Set the mode now to ensure that any nodes generated\n-      --  during analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n       Check_SPARK_05_Restriction (\"generic renaming is not allowed\", N);\n \n       Generate_Definition (New_P);\n@@ -756,11 +738,6 @@ package body Sem_Ch8 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, New_P);\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Generic_Renaming;\n \n    -----------------------------\n@@ -867,22 +844,13 @@ package body Sem_Ch8 is\n          return False;\n       end In_Generic_Scope;\n \n-      --  Local variables\n-\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-\n    --  Start of processing for Analyze_Object_Renaming\n \n    begin\n       if Nam = Error then\n          return;\n       end if;\n \n-      --  The object renaming declaration may be subject to pragma Ghost with\n-      --  policy Ignore. Set the mode now to ensure that any nodes generated\n-      --  during analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n       Check_SPARK_05_Restriction (\"object renaming is not allowed\", N);\n \n       Set_Is_Pure (Id, Is_Pure (Current_Scope));\n@@ -1394,51 +1362,22 @@ package body Sem_Ch8 is\n       --  Deal with dimensions\n \n       Analyze_Dimension (N);\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Object_Renaming;\n \n    ------------------------------\n    -- Analyze_Package_Renaming --\n    ------------------------------\n \n    procedure Analyze_Package_Renaming (N : Node_Id) is\n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-\n-      procedure Restore_Globals;\n-      --  Restore the values of all saved global variables\n-\n-      ---------------------\n-      -- Restore_Globals --\n-      ---------------------\n-\n-      procedure Restore_Globals is\n-      begin\n-         Ghost_Mode := GM;\n-      end Restore_Globals;\n-\n-      --  Local variables\n-\n       New_P : constant Entity_Id := Defining_Entity (N);\n       Old_P : Entity_Id;\n       Spec  : Node_Id;\n \n-   --  Start of processing for Analyze_Package_Renaming\n-\n    begin\n       if Name (N) = Error then\n          return;\n       end if;\n \n-      --  The package renaming declaration may be subject to pragma Ghost with\n-      --  policy Ignore. Set the mode now to ensure that any nodes generated\n-      --  during analysis and expansion are properly flagged as ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       --  Check for Text_IO special unit (we may be renaming a Text_IO child)\n \n       Check_Text_IO_Special_Unit (Name (N));\n@@ -1538,7 +1477,6 @@ package body Sem_Ch8 is\n          --  subtypes again, so they are compatible with types in their class.\n \n          if not Is_Generic_Instance (Old_P) then\n-            Restore_Globals;\n             return;\n          else\n             Spec := Specification (Unit_Declaration_Node (Old_P));\n@@ -1580,8 +1518,6 @@ package body Sem_Ch8 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, New_P);\n       end if;\n-\n-      Restore_Globals;\n    end Analyze_Package_Renaming;\n \n    -------------------------------\n@@ -2628,20 +2564,12 @@ package body Sem_Ch8 is\n       --  defaulted formal subprogram when the actual for a related formal\n       --  type is class-wide.\n \n-      GM        : constant Ghost_Mode_Type := Ghost_Mode;\n-      Inst_Node : Node_Id                  := Empty;\n+      Inst_Node : Node_Id := Empty;\n       New_S     : Entity_Id;\n \n    --  Start of processing for Analyze_Subprogram_Renaming\n \n    begin\n-      --  The subprogram renaming declaration may be subject to pragma Ghost\n-      --  with policy Ignore. Set the mode now to ensure that any nodes\n-      --  generated during analysis and expansion are properly flagged as\n-      --  ignored Ghost.\n-\n-      Set_Ghost_Mode (N);\n-\n       --  We must test for the attribute renaming case before the Analyze\n       --  call because otherwise Sem_Attr will complain that the attribute\n       --  is missing an argument when it is analyzed.\n@@ -3559,11 +3487,6 @@ package body Sem_Ch8 is\n             Analyze (N);\n          end if;\n       end if;\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n    end Analyze_Subprogram_Renaming;\n \n    -------------------------"}, {"sha": "04a160b9f1a7178e69dc170c61624f62a2a0821a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 19, "deletions": 48, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -390,12 +390,12 @@ package body Sem_Prag is\n \n       --  Local variables\n \n-      GM : constant Ghost_Mode_Type := Ghost_Mode;\n-\n       Subp_Decl : constant Node_Id   := Find_Related_Subprogram_Or_Body (N);\n       Spec_Id   : constant Entity_Id := Corresponding_Spec_Of (Subp_Decl);\n       CCases    : constant Node_Id   := Expression (Get_Argument (N, Spec_Id));\n \n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n       CCase         : Node_Id;\n       Restore_Scope : Boolean := False;\n \n@@ -454,10 +454,7 @@ package body Sem_Prag is\n          Error_Msg_N (\"wrong syntax for constract cases\", N);\n       end if;\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Analyze_Contract_Cases_In_Decl_Part;\n \n    ----------------------------------\n@@ -1715,10 +1712,11 @@ package body Sem_Prag is\n      (N        : Node_Id;\n       Expr_Val : out Boolean)\n    is\n-      GM     : constant Ghost_Mode_Type := Ghost_Mode;\n       Arg1   : constant Node_Id   := First (Pragma_Argument_Associations (N));\n-      Obj_Id : constant Entity_Id := Entity (Get_Pragma_Arg (Arg1));\n       Expr   : constant Node_Id   := Get_Pragma_Arg (Next (Arg1));\n+      Obj_Id : constant Entity_Id := Entity (Get_Pragma_Arg (Arg1));\n+\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n    begin\n       --  Set the Ghost mode in effect from the pragma. Due to the delayed\n@@ -1758,10 +1756,7 @@ package body Sem_Prag is\n          end if;\n       end if;\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Analyze_External_Property_In_Decl_Part;\n \n    ---------------------------------\n@@ -2264,11 +2259,12 @@ package body Sem_Prag is\n    --------------------------------------------\n \n    procedure Analyze_Initial_Condition_In_Decl_Part (N : Node_Id) is\n-      GM        : constant Ghost_Mode_Type := Ghost_Mode;\n       Pack_Decl : constant Node_Id   := Find_Related_Package_Or_Body (N);\n       Pack_Id   : constant Entity_Id := Defining_Entity (Pack_Decl);\n       Expr      : constant Node_Id   := Expression (Get_Argument (N, Pack_Id));\n \n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n    begin\n       --  Set the Ghost mode in effect from the pragma. Due to the delayed\n       --  analysis of the pragma, the Ghost mode at point of declaration and\n@@ -2283,11 +2279,7 @@ package body Sem_Prag is\n       --  is not desired at this point.\n \n       Preanalyze_Assert_Expression (Expr, Standard_Boolean);\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Analyze_Initial_Condition_In_Decl_Part;\n \n    --------------------------------------\n@@ -10808,18 +10800,12 @@ package body Sem_Prag is\n \n             --  Local variables\n \n-            GM       : constant Ghost_Mode_Type := Ghost_Mode;\n             Expr     : Node_Id;\n             New_Args : List_Id;\n \n          --  Start of processing for Assert\n \n          begin\n-            --  Ensure that analysis and expansion produce Ghost nodes if the\n-            --  pragma itself is Ghost.\n-\n-            Set_Ghost_Mode (N);\n-\n             --  Assert is an Ada 2005 RM-defined pragma\n \n             if Prag_Id = Pragma_Assert then\n@@ -10892,11 +10878,6 @@ package body Sem_Prag is\n                 Pragma_Argument_Associations => New_Args));\n \n             Analyze (N);\n-\n-            --  Restore the original Ghost mode once analysis and expansion\n-            --  have taken place.\n-\n-            Ghost_Mode := GM;\n          end Assert;\n \n          ----------------------\n@@ -11551,15 +11532,17 @@ package body Sem_Prag is\n          --  allowed, since they have special meaning for Check_Policy.\n \n          when Pragma_Check => Check : declare\n-            GM    : constant Ghost_Mode_Type := Ghost_Mode;\n             Cname : Name_Id;\n             Eloc  : Source_Ptr;\n             Expr  : Node_Id;\n             Str   : Node_Id;\n \n+            Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n          begin\n-            --  Ensure that analysis and expansion produce Ghost nodes if the\n-            --  pragma itself is Ghost.\n+            --  Pragma Check is Ghost when it applies to a Ghost entity. Set\n+            --  the mode now to ensure that any nodes generated during analysis\n+            --  and expansion are marked as Ghost.\n \n             Set_Ghost_Mode (N);\n \n@@ -11758,10 +11741,7 @@ package body Sem_Prag is\n                In_Assertion_Expr := In_Assertion_Expr - 1;\n             end if;\n \n-            --  Restore the original Ghost mode once analysis and expansion\n-            --  have taken place.\n-\n-            Ghost_Mode := GM;\n+            Ghost_Mode := Save_Ghost_Mode;\n          end Check;\n \n          --------------------------\n@@ -15699,7 +15679,6 @@ package body Sem_Prag is\n          --     [,[Message =>] String_Expression]);\n \n          when Pragma_Invariant => Invariant : declare\n-            GM      : constant Ghost_Mode_Type := Ghost_Mode;\n             Discard : Boolean;\n             Typ     : Entity_Id;\n             Type_Id : Node_Id;\n@@ -15793,11 +15772,6 @@ package body Sem_Prag is\n             if Class_Present (N) then\n                Set_Has_Inheritable_Invariants (Typ);\n             end if;\n-\n-            --  Restore the original Ghost mode once analysis and expansion\n-            --  have taken place.\n-\n-            Ghost_Mode := GM;\n          end Invariant;\n \n          ----------------------\n@@ -22450,11 +22424,12 @@ package body Sem_Prag is\n \n       --  Local variables\n \n-      GM        : constant Ghost_Mode_Type := Ghost_Mode;\n       Subp_Decl : constant Node_Id   := Find_Related_Subprogram_Or_Body (N);\n       Spec_Id   : constant Entity_Id := Corresponding_Spec_Of (Subp_Decl);\n       Expr      : constant Node_Id   := Expression (Get_Argument (N, Spec_Id));\n \n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n       Restore_Scope : Boolean := False;\n \n    --  Start of processing for Analyze_Pre_Post_Condition_In_Decl_Part\n@@ -22500,11 +22475,7 @@ package body Sem_Prag is\n       --  subprogram subject to pragma Inline_Always.\n \n       Check_Postcondition_Use_In_Inlined_Subprogram (N, Spec_Id);\n-\n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Analyze_Pre_Post_Condition_In_Decl_Part;\n \n    ------------------------------------------"}, {"sha": "01b912f459d8ccabf2e6dc1ed2523b73361137ed", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -1990,13 +1990,25 @@ package body Sem_Res is\n          return;\n       end Resolution_Failed;\n \n+      --  Local variables\n+\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n    --  Start of processing for Resolve\n \n    begin\n       if N = Error then\n          return;\n       end if;\n \n+      --  A declaration may be subject to pragma Ghost. Set the mode now to\n+      --  ensure that any nodes generated during analysis and expansion are\n+      --  marked as Ghost.\n+\n+      if Is_Declaration (N) then\n+         Set_Ghost_Mode (N);\n+      end if;\n+\n       --  Access attribute on remote subprogram cannot be used for a non-remote\n       --  access-to-subprogram type.\n \n@@ -2112,13 +2124,15 @@ package body Sem_Res is\n       if Analyzed (N) then\n          Debug_A_Exit (\"resolving  \", N, \"  (done, already analyzed)\");\n          Analyze_Dimension (N);\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n \n       --  Any case of Any_Type as the Etype value means that we had a\n       --  previous error.\n \n       elsif Etype (N) = Any_Type then\n          Debug_A_Exit (\"resolving  \", N, \"  (done, Etype = Any_Type)\");\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n       end if;\n \n@@ -2550,6 +2564,7 @@ package body Sem_Res is\n             then\n                Resolve (N, Full_View (Typ));\n                Set_Etype (N, Typ);\n+               Ghost_Mode := Save_Ghost_Mode;\n                return;\n \n             --  Check for an aggregate. Sometimes we can get bogus aggregates\n@@ -2658,6 +2673,7 @@ package body Sem_Res is\n             if Address_Integer_Convert_OK (Typ, Etype (N)) then\n                Rewrite (N, Unchecked_Convert_To (Typ, Relocate_Node (N)));\n                Analyze_And_Resolve (N, Typ);\n+               Ghost_Mode := Save_Ghost_Mode;\n                return;\n             end if;\n \n@@ -2720,12 +2736,14 @@ package body Sem_Res is\n          end if;\n \n          Resolution_Failed;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n \n       --  Test if we have more than one interpretation for the context\n \n       elsif Ambiguous then\n          Resolution_Failed;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n \n       --  Only one intepretation\n@@ -2813,6 +2831,7 @@ package body Sem_Res is\n                --  Rewrite_Renamed_Operator.\n \n                if Analyzed (N) then\n+                  Ghost_Mode := Save_Ghost_Mode;\n                   return;\n                end if;\n             end if;\n@@ -2962,6 +2981,7 @@ package body Sem_Res is\n          if Nkind (N) not in N_Subexpr then\n             Debug_A_Exit (\"resolving  \", N, \"  (done)\");\n             Expand (N);\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n          end if;\n \n@@ -2996,6 +3016,8 @@ package body Sem_Res is\n \n          Expand (N);\n       end if;\n+\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Resolve;\n \n    -------------"}, {"sha": "2e7064b0ef0be4a238dc52646f379062cdecd152", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4455aacd8aeb3a4ca59e7024cc8a0829e4134/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1af4455aacd8aeb3a4ca59e7024cc8a0829e4134", "patch": "@@ -1314,7 +1314,6 @@ package body Sem_Util is\n \n          --  Local variables\n \n-         GM        : constant Ghost_Mode_Type := Ghost_Mode;\n          Loc       : constant Source_Ptr := Sloc (Typ);\n          Prag      : constant Node_Id    :=\n                        Get_Pragma (Typ, Pragma_Default_Initial_Condition);\n@@ -1324,6 +1323,8 @@ package body Sem_Util is\n          Expr      : Node_Id;\n          Stmt      : Node_Id;\n \n+         Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n       --  Start of processing for Build_Default_Init_Cond_Procedure_Body\n \n       begin\n@@ -1341,8 +1342,8 @@ package body Sem_Util is\n             return;\n          end if;\n \n-         --  Ensure that the analysis and expansion produce Ghost nodes if the\n-         --  type itself is Ghost.\n+         --  The related type may be subject to pragma Ghost. Set the mode now\n+         --  to ensure that the analysis and expansion produce Ghost nodes.\n \n          Set_Ghost_Mode_From_Entity (Typ);\n \n@@ -1412,11 +1413,7 @@ package body Sem_Util is\n          Set_Corresponding_Spec (Body_Decl, Proc_Id);\n \n          Insert_After_And_Analyze (Declaration_Node (Typ), Body_Decl);\n-\n-         --  Restore the original Ghost mode once analysis and expansion have\n-         --  taken place.\n-\n-         Ghost_Mode := GM;\n+         Ghost_Mode := Save_Ghost_Mode;\n       end Build_Default_Init_Cond_Procedure_Body;\n \n       --  Local variables\n@@ -1465,10 +1462,12 @@ package body Sem_Util is\n    ---------------------------------------------------\n \n    procedure Build_Default_Init_Cond_Procedure_Declaration (Typ : Entity_Id) is\n-      GM      : constant Ghost_Mode_Type := Ghost_Mode;\n-      Loc     : constant Source_Ptr := Sloc (Typ);\n-      Prag    : constant Node_Id    :=\n+      Loc  : constant Source_Ptr := Sloc (Typ);\n+      Prag : constant Node_Id    :=\n                   Get_Pragma (Typ, Pragma_Default_Initial_Condition);\n+\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n       Proc_Id : Entity_Id;\n \n    begin\n@@ -1485,8 +1484,8 @@ package body Sem_Util is\n          return;\n       end if;\n \n-      --  Ensure that the analysis and expansion produce Ghost nodes if the\n-      --  type itself is Ghost.\n+      --  The related type may be subject to pragma Ghost. Set the mode now to\n+      --  ensure that the analysis and expansion produce Ghost nodes.\n \n       Set_Ghost_Mode_From_Entity (Typ);\n \n@@ -1520,10 +1519,7 @@ package body Sem_Util is\n                   Defining_Identifier => Make_Temporary (Loc, 'I'),\n                   Parameter_Type      => New_Occurrence_Of (Typ, Loc))))));\n \n-      --  Restore the original Ghost mode once analysis and expansion have\n-      --  taken place.\n-\n-      Ghost_Mode := GM;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Build_Default_Init_Cond_Procedure_Declaration;\n \n    ---------------------------"}]}