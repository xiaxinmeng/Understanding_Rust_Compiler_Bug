{"sha": "e89b312ed39af831f4e88534326ca723e8eed271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5YjMxMmVkMzlhZjgzMWY0ZTg4NTM0MzI2Y2E3MjNlOGVlZDI3MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:22:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:22:24Z"}, "message": "cse.c: Include rtl-iter.h.\n\ngcc/\n\t* cse.c: Include rtl-iter.h.\n\t(approx_reg_cost_1): Delete.\n\t(approx_reg_cost): Use FOR_EACH_SUBRTX instead of for_each_rtx.\n\tDon't handle null rtxes.\n\nFrom-SVN: r214627", "tree": {"sha": "77adca755e3ada6f2d469869e072ae4de7638191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77adca755e3ada6f2d469869e072ae4de7638191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e89b312ed39af831f4e88534326ca723e8eed271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89b312ed39af831f4e88534326ca723e8eed271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89b312ed39af831f4e88534326ca723e8eed271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89b312ed39af831f4e88534326ca723e8eed271/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2250fe993264183c9742431bd518bfcdb7fca67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2250fe993264183c9742431bd518bfcdb7fca67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2250fe993264183c9742431bd518bfcdb7fca67"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "1d318096038ef1fac59de11c11cca89bfca7b1ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89b312ed39af831f4e88534326ca723e8eed271/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89b312ed39af831f4e88534326ca723e8eed271/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e89b312ed39af831f4e88534326ca723e8eed271", "patch": "@@ -1,3 +1,10 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* cse.c: Include rtl-iter.h.\n+\t(approx_reg_cost_1): Delete.\n+\t(approx_reg_cost): Use FOR_EACH_SUBRTX instead of for_each_rtx.\n+\tDon't handle null rtxes.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* cfgcleanup.c: Include rtl-iter.h."}, {"sha": "4b9a961e0d16d65d82a7301841157415a03a2607", "filename": "gcc/cse.c", "status": "modified", "additions": 21, "deletions": 34, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89b312ed39af831f4e88534326ca723e8eed271/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89b312ed39af831f4e88534326ca723e8eed271/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=e89b312ed39af831f4e88534326ca723e8eed271", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"dbgcnt.h\"\n #include \"hash-set.h\"\n+#include \"rtl-iter.h\"\n \n /* The basic idea of common subexpression elimination is to go\n    through the code, keeping a record of expressions that would\n@@ -550,8 +551,6 @@ static sbitmap cse_visited_basic_blocks;\n \n static bool fixed_base_plus_p (rtx x);\n static int notreg_cost (rtx, enum rtx_code, int);\n-static int approx_reg_cost_1 (rtx *, void *);\n-static int approx_reg_cost (rtx);\n static int preferable (int, int, int, int);\n static void new_basic_block (void);\n static void make_new_qty (unsigned int, enum machine_mode);\n@@ -660,47 +659,35 @@ dump_class (struct table_elt *classp)\n     }\n }\n \n-/* Subroutine of approx_reg_cost; called through for_each_rtx.  */\n+/* Return an estimate of the cost of the registers used in an rtx.\n+   This is mostly the number of different REG expressions in the rtx;\n+   however for some exceptions like fixed registers we use a cost of\n+   0.  If any other hard register reference occurs, return MAX_COST.  */\n \n static int\n-approx_reg_cost_1 (rtx *xp, void *data)\n+approx_reg_cost (const_rtx x)\n {\n-  rtx x = *xp;\n-  int *cost_p = (int *) data;\n-\n-  if (x && REG_P (x))\n+  int cost = 0;\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, x, NONCONST)\n     {\n-      unsigned int regno = REGNO (x);\n-\n-      if (! CHEAP_REGNO (regno))\n+      const_rtx x = *iter;\n+      if (REG_P (x))\n \t{\n-\t  if (regno < FIRST_PSEUDO_REGISTER)\n+\t  unsigned int regno = REGNO (x);\n+\t  if (!CHEAP_REGNO (regno))\n \t    {\n-\t      if (targetm.small_register_classes_for_mode_p (GET_MODE (x)))\n-\t\treturn 1;\n-\t      *cost_p += 2;\n+\t      if (regno < FIRST_PSEUDO_REGISTER)\n+\t\t{\n+\t\t  if (targetm.small_register_classes_for_mode_p (GET_MODE (x)))\n+\t\t    return MAX_COST;\n+\t\t  cost += 2;\n+\t\t}\n+\t      else\n+\t\tcost += 1;\n \t    }\n-\t  else\n-\t    *cost_p += 1;\n \t}\n     }\n-\n-  return 0;\n-}\n-\n-/* Return an estimate of the cost of the registers used in an rtx.\n-   This is mostly the number of different REG expressions in the rtx;\n-   however for some exceptions like fixed registers we use a cost of\n-   0.  If any other hard register reference occurs, return MAX_COST.  */\n-\n-static int\n-approx_reg_cost (rtx x)\n-{\n-  int cost = 0;\n-\n-  if (for_each_rtx (&x, approx_reg_cost_1, (void *) &cost))\n-    return MAX_COST;\n-\n   return cost;\n }\n "}]}