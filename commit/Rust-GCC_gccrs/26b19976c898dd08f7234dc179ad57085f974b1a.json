{"sha": "26b19976c898dd08f7234dc179ad57085f974b1a", "node_id": "C_kwDOANBUbNoAKDI2YjE5OTc2Yzg5OGRkMDhmNzIzNGRjMTc5YWQ1NzA4NWY5NzRiMWE", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-01T16:45:51Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-02T16:36:57Z"}, "message": "parser: Fix while let expr parsing\n\nWhile let expr return unit but are valid construct in rust, they should\ntherefore be included in the parsing code. Also add a new test to check\nparsing of while let expressions.\n\ngcc/rust/ChangeLog:\n\n\t* parse/rust-parse-impl.h (Parser::parse_while_let_loop_expr):\n\tPrevent hard error on token skip.\n\t(Parser::null_denotation): Fix parser for while let expressions.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/while_let_expr.rs: New test.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "461eef6201341e93d9d5c44ba4d4206216f79116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/461eef6201341e93d9d5c44ba4d4206216f79116"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26b19976c898dd08f7234dc179ad57085f974b1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b19976c898dd08f7234dc179ad57085f974b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b19976c898dd08f7234dc179ad57085f974b1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b19976c898dd08f7234dc179ad57085f974b1a/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32a9736ef6ea85993a95cd038cf1712378172fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a9736ef6ea85993a95cd038cf1712378172fb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32a9736ef6ea85993a95cd038cf1712378172fb8"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "46704111f37602873c7595295299ab60f767630b", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b19976c898dd08f7234dc179ad57085f974b1a/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b19976c898dd08f7234dc179ad57085f974b1a/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=26b19976c898dd08f7234dc179ad57085f974b1a", "patch": "@@ -8372,7 +8372,7 @@ Parser<ManagedTokenSource>::parse_while_let_loop_expr (AST::AttrVec outer_attrs,\n     locus = lexer.peek_token ()->get_locus ();\n   else\n     locus = label.get_locus ();\n-  skip_token (WHILE);\n+  maybe_skip_token (WHILE);\n \n   /* check for possible accidental recognition of a while loop as a while let\n    * loop */\n@@ -13114,9 +13114,16 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n       return parse_loop_expr (std::move (outer_attrs), AST::LoopLabel::error (),\n \t\t\t      tok->get_locus ());\n     case WHILE:\n-      return parse_while_loop_expr (std::move (outer_attrs),\n-\t\t\t\t    AST::LoopLabel::error (),\n-\t\t\t\t    tok->get_locus ());\n+      if (lexer.peek_token ()->get_id () == LET)\n+\t{\n+\t  return parse_while_let_loop_expr (std::move (outer_attrs));\n+\t}\n+      else\n+\t{\n+\t  return parse_while_loop_expr (std::move (outer_attrs),\n+\t\t\t\t\tAST::LoopLabel::error (),\n+\t\t\t\t\ttok->get_locus ());\n+\t}\n     case MATCH_TOK:\n       // also an expression with block\n       return parse_match_expr (std::move (outer_attrs), tok->get_locus ());"}, {"sha": "113ad743cc2beff654e90469005216fc0c373589", "filename": "gcc/testsuite/rust/compile/while_let_expr.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b19976c898dd08f7234dc179ad57085f974b1a/gcc%2Ftestsuite%2Frust%2Fcompile%2Fwhile_let_expr.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b19976c898dd08f7234dc179ad57085f974b1a/gcc%2Ftestsuite%2Frust%2Fcompile%2Fwhile_let_expr.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fwhile_let_expr.rs?ref=26b19976c898dd08f7234dc179ad57085f974b1a", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-fsyntax-only\" }\n+\n+pub enum Option<T> {\n+    None,\n+    Some(T),\n+}\n+\n+fn main() {\n+    let mut x = Option::Some(3);\n+    let a = while let Option::Some(1) = x {\n+        x = Option::None;\n+    };\n+}"}]}