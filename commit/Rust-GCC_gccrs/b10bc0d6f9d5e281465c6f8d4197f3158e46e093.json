{"sha": "b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEwYmMwZDZmOWQ1ZTI4MTQ2NWM2ZjhkNDE5N2YzMTU4ZTQ2ZTA5Mw==", "commit": {"author": {"name": "Olga Makhotina", "email": "olga.makhotina@intel.com", "date": "2018-02-12T05:44:29Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2018-02-12T05:44:29Z"}, "message": "Add missing intrinsics for _mm_mask[z]_sqrt_round_[sd,ss]\n\ngcc/\n\t* config/i386/avx512fintrin.h (_mm_mask_sqrt_round_sd)\n\t(_mm_maskz_sqrt_round_sd, _mm_mask_sqrt_round_ss)\n\t(_mm_maskz_sqrt_round_ss): New intrinsics.\n\t(__builtin_ia32_sqrtsd_round, __builtin_ia32_sqrtss_round): Remove.\n\t(__builtin_ia32_sqrtsd_mask_round)\n\t(__builtin_ia32_sqrtss_mask_round): New builtins.\n\t* config/i386/i386-builtin.def (__builtin_ia32_sqrtsd_round)\n\t(__builtin_ia32_sqrtss_round): Remove.\n\t(__builtin_ia32_sqrtsd_mask_round)\n\t(__builtin_ia32_sqrtss_mask_round): New builtins.\n\t* config/i386/sse.md (vmsqrt<mode>2<round_name>): Renamed to ...\n\t(vmsqrt<mode>2<mask_scalar_name><round_scalar_name>): ... this.\n\t((match_operand:VF_128 1 \"vector_operand\"\n\t\"xBm,<round_constraint>\")): Changed to ...\n\t((match_operand:VF_128 1 \"vector_operand\"\n\t\"xBm,<round_scalar_constraint>\")): ... this.\n\t(vsqrt<ssescalarmodesuffix>\\t{<round_op3>%1, %2, %0|\n\t%0, %2, %<iptr>1<round_op3>}): Changed to ...\n\t(vsqrt<ssescalarmodesuffix>\\t{<round_scalar_mask_op3>%1, %2,\n\t%0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %2,\n\t%<iptr>1<round_scalar_mask_op3>}): ... this.\n\t((set_attr \"prefix\" \"<round_prefix>\")): Changed to ...\n\t((set_attr \"prefix\" \"<round_scalar_prefix>\")): ... this.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-vsqrtsd-1.c (_mm_mask_sqrt_round_sd)\n\t(_mm_maskz_sqrt_round_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vsqrtsd-2.c (_mm_sqrt_round_sd)\n\t(_mm_mask_sqrt_round_sd, _mm_maskz_sqrt_round_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vsqrtss-1.c (_mm_mask_sqrt_round_ss)\n\t(_mm_maskz_sqrt_round_ss): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vsqrtss-2.c (_mm_sqrt_round_ss)\n\t(_mm_mask_sqrt_round_ss,\u00a0\u00a0\u00a0\u00a0\u00a0 _mm_maskz_sqrt_round_ss): Test new\n\tintrinsics.\n\t* gcc.target/i386/avx-1.c (__builtin_ia32_sqrtsd_round)\n\t(__builtin_ia32_sqrtss_round): Remove builtins.\n\t(__builtin_ia32_sqrtsd_mask_round)\n\t(__builtin_ia32_sqrtss_mask_round): Test new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\nFrom-SVN: r257576", "tree": {"sha": "0efee7d338b75b46196e6f36de4a416538b57dbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0efee7d338b75b46196e6f36de4a416538b57dbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/comments", "author": {"login": "Djilka", "id": 6038217, "node_id": "MDQ6VXNlcjYwMzgyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6038217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Djilka", "html_url": "https://github.com/Djilka", "followers_url": "https://api.github.com/users/Djilka/followers", "following_url": "https://api.github.com/users/Djilka/following{/other_user}", "gists_url": "https://api.github.com/users/Djilka/gists{/gist_id}", "starred_url": "https://api.github.com/users/Djilka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Djilka/subscriptions", "organizations_url": "https://api.github.com/users/Djilka/orgs", "repos_url": "https://api.github.com/users/Djilka/repos", "events_url": "https://api.github.com/users/Djilka/events{/privacy}", "received_events_url": "https://api.github.com/users/Djilka/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc58fa9f3142097bbcf2d60212041d08ab16cd8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc58fa9f3142097bbcf2d60212041d08ab16cd8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc58fa9f3142097bbcf2d60212041d08ab16cd8e"}], "stats": {"total": 262, "additions": 240, "deletions": 22}, "files": [{"sha": "ffbb1d9c14cb2aecfe3148b9c65d43f96a6c09ba", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 74, "deletions": 10, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "patch": "@@ -1955,18 +1955,66 @@ extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sqrt_round_sd (__m128d __A, __m128d __B, const int __R)\n {\n-  return (__m128d) __builtin_ia32_sqrtsd_round ((__v2df) __B,\n-\t\t\t\t\t\t(__v2df) __A,\n-\t\t\t\t\t\t__R);\n+  return (__m128d) __builtin_ia32_sqrtsd_mask_round ((__v2df) __B,\n+\t\t\t\t\t\t     (__v2df) __A,\n+\t\t\t\t\t\t     (__v2df)\n+\t\t\t\t\t\t     _mm_setzero_pd (),\n+\t\t\t\t\t\t     (__mmask8) -1, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sqrt_round_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\tconst int __R)\n+{\n+  return (__m128d) __builtin_ia32_sqrtsd_mask_round ((__v2df) __B,\n+\t\t\t\t\t\t     (__v2df) __A,\n+\t\t\t\t\t\t     (__v2df) __W,\n+\t\t\t\t\t\t     (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sqrt_round_sd (__mmask8 __U, __m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_sqrtsd_mask_round ((__v2df) __B,\n+\t\t\t\t\t\t     (__v2df) __A,\n+\t\t\t\t\t\t     (__v2df)\n+\t\t\t\t\t\t     _mm_setzero_pd (),\n+\t\t\t\t\t\t     (__mmask8) __U, __R);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sqrt_round_ss (__m128 __A, __m128 __B, const int __R)\n {\n-  return (__m128) __builtin_ia32_sqrtss_round ((__v4sf) __B,\n-\t\t\t\t\t       (__v4sf) __A,\n-\t\t\t\t\t       __R);\n+  return (__m128) __builtin_ia32_sqrtss_mask_round ((__v4sf) __B,\n+\t\t\t\t\t\t    (__v4sf) __A,\n+\t\t\t\t\t\t    (__v4sf)\n+\t\t\t\t\t\t    _mm_setzero_ps (),\n+\t\t\t\t\t\t    (__mmask8) -1, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sqrt_round_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\tconst int __R)\n+{\n+  return (__m128) __builtin_ia32_sqrtss_mask_round ((__v4sf) __B,\n+\t\t\t\t\t\t    (__v4sf) __A,\n+\t\t\t\t\t\t    (__v4sf) __W,\n+\t\t\t\t\t\t    (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sqrt_round_ss (__mmask8 __U, __m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_sqrtss_mask_round ((__v4sf) __B,\n+\t\t\t\t\t\t    (__v4sf) __A,\n+\t\t\t\t\t\t    (__v4sf)\n+\t\t\t\t\t\t    _mm_setzero_ps (),\n+\t\t\t\t\t\t    (__mmask8) __U, __R);\n }\n #else\n #define _mm512_sqrt_round_pd(A, C)            \\\n@@ -1987,11 +2035,27 @@ _mm_sqrt_round_ss (__m128 __A, __m128 __B, const int __R)\n #define _mm512_maskz_sqrt_round_ps(U, A, C)   \\\n     (__m512)__builtin_ia32_sqrtps512_mask(A, (__v16sf)_mm512_setzero_ps(), U, C)\n \n-#define _mm_sqrt_round_sd(A, B, C)            \\\n-    (__m128d)__builtin_ia32_sqrtsd_round(A, B, C)\n+#define _mm_sqrt_round_sd(A, B, C)\t      \\\n+    (__m128d)__builtin_ia32_sqrtsd_mask_round (B, A, \\\n+\t(__v2df) _mm_setzero_pd (), -1, C)\n+\n+#define _mm_mask_sqrt_round_sd(W, U, A, B, C) \\\n+    (__m128d)__builtin_ia32_sqrtsd_mask_round (B, A, W, U, C)\n+\n+#define _mm_maskz_sqrt_round_sd(U, A, B, C)   \\\n+    (__m128d)__builtin_ia32_sqrtsd_mask_round (B, A, \\\n+\t(__v2df) _mm_setzero_pd (), U, C)\n+\n+#define _mm_sqrt_round_ss(A, B, C)\t      \\\n+    (__m128)__builtin_ia32_sqrtss_mask_round (B, A, \\\n+\t(__v4sf) _mm_setzero_ps (), -1, C)\n+\n+#define _mm_mask_sqrt_round_ss(W, U, A, B, C) \\\n+    (__m128)__builtin_ia32_sqrtss_mask_round (B, A, W, U, C)\n \n-#define _mm_sqrt_round_ss(A, B, C)            \\\n-    (__m128)__builtin_ia32_sqrtss_round(A, B, C)\n+#define _mm_maskz_sqrt_round_ss(U, A, B, C)   \\\n+    (__m128)__builtin_ia32_sqrtss_mask_round (B, A, \\\n+\t(__v4sf) _mm_setzero_ps (), U, C)\n #endif\n \n extern __inline __m512i"}, {"sha": "506104221e762fee83f9fa5158fcc6d2dccfc6b8", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "patch": "@@ -2722,8 +2722,8 @@ BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vmscalefv2df_round, \"__builtin_\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vmscalefv4sf_round, \"__builtin_ia32_scalefss_round\", IX86_BUILTIN_SCALEFSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sqrtv8df2_mask_round, \"__builtin_ia32_sqrtpd512_mask\", IX86_BUILTIN_SQRTPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sqrtv16sf2_mask_round, \"__builtin_ia32_sqrtps512_mask\", IX86_BUILTIN_SQRTPS512_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsqrtv2df2_round, \"__builtin_ia32_sqrtsd_round\", IX86_BUILTIN_SQRTSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsqrtv4sf2_round, \"__builtin_ia32_sqrtss_round\", IX86_BUILTIN_SQRTSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsqrtv2df2_mask_round, \"__builtin_ia32_sqrtsd_mask_round\", IX86_BUILTIN_SQRTSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsqrtv4sf2_mask_round, \"__builtin_ia32_sqrtss_mask_round\", IX86_BUILTIN_SQRTSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_subv8df3_mask_round, \"__builtin_ia32_subpd512_mask\", IX86_BUILTIN_SUBPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_subv16sf3_mask_round, \"__builtin_ia32_subps512_mask\", IX86_BUILTIN_SUBPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsubv2df3_round, \"__builtin_ia32_subsd_round\", IX86_BUILTIN_SUBSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)"}, {"sha": "47687a614fb2a398e9f7dbd07fb49bed45b22a8e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "patch": "@@ -1881,21 +1881,21 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vmsqrt<mode>2<round_name>\"\n+(define_insn \"<sse>_vmsqrt<mode>2<mask_scalar_name><round_scalar_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (sqrt:VF_128\n-\t    (match_operand:VF_128 1 \"vector_operand\" \"xBm,<round_constraint>\"))\n+\t    (match_operand:VF_128 1 \"vector_operand\" \"xBm,<round_scalar_constraint>\"))\n \t  (match_operand:VF_128 2 \"register_operand\" \"0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n    sqrt<ssescalarmodesuffix>\\t{%1, %0|%0, %<iptr>1}\n-   vsqrt<ssescalarmodesuffix>\\t{<round_op3>%1, %2, %0|%0, %2, %<iptr>1<round_op3>}\"\n+   vsqrt<ssescalarmodesuffix>\\t{<round_scalar_mask_op3>%1, %2, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %2, %<iptr>1<round_scalar_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"sqrt\")\n-   (set_attr \"prefix\" \"<round_prefix>\")\n+   (set_attr \"prefix\" \"<round_scalar_prefix>\")\n    (set_attr \"btver2_sse_attr\" \"sqrt\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n "}, {"sha": "9c53f99d3fdc3aba40b1b2330a7743fe8e5565cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "patch": "@@ -1,3 +1,21 @@\n+2018-02-12  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vsqrtsd-1.c (_mm_mask_sqrt_round_sd)\n+\t(_mm_maskz_sqrt_round_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vsqrtsd-2.c (_mm_sqrt_round_sd)\n+\t(_mm_mask_sqrt_round_sd, _mm_maskz_sqrt_round_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vsqrtss-1.c (_mm_mask_sqrt_round_ss)\n+\t(_mm_maskz_sqrt_round_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vsqrtss-2.c (_mm_sqrt_round_ss)\n+\t(_mm_mask_sqrt_round_ss,\u00a0\u00a0\u00a0\u00a0\u00a0 _mm_maskz_sqrt_round_ss): Test new\n+\tintrinsics.\n+\t* gcc.target/i386/avx-1.c (__builtin_ia32_sqrtsd_round)\n+\t(__builtin_ia32_sqrtss_round): Remove builtins.\n+\t(__builtin_ia32_sqrtsd_mask_round)\n+\t(__builtin_ia32_sqrtss_mask_round): Test new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\n 2018-02-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/35299"}, {"sha": "acfc85bfaa4c66ccf06fb77d47dd3dc2c0211e9f", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "patch": "@@ -305,8 +305,8 @@\n #define __builtin_ia32_shufps512_mask(A, B, F, D, E) __builtin_ia32_shufps512_mask(A, B, 1, D, E)\n #define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 8)\n #define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 8)\n-#define __builtin_ia32_sqrtss_round(A, B, C) __builtin_ia32_sqrtss_round(A, B, 8)\n-#define __builtin_ia32_sqrtsd_round(A, B, C) __builtin_ia32_sqrtsd_round(A, B, 8)\n+#define __builtin_ia32_sqrtss_mask_round(A, B, C, D, E) __builtin_ia32_sqrtss_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_sqrtsd_mask_round(A, B, C, D, E) __builtin_ia32_sqrtsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 8)"}, {"sha": "a7d7af9b81b7bd66be031c7700ce3c59c4fac8fd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtsd-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c?ref=b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "patch": "@@ -1,13 +1,18 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vsqrtsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128d x1, x2;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x1 = _mm_sqrt_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_sqrt_round_sd (x1, m, x1, x2, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_sqrt_round_sd (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "49ca7eea39fe949740aca41c6ef8e2dba3d87214", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtsd-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-2.c?ref=b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+compute_sqrtsd (double *s1, double *s2, double *r)\n+{\n+  r[0] = sqrt(s2[0]);\n+  r[1] = s1[1];\n+}\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128d res1, res2, res3;\n+  union128d s1, s2;\n+  double res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 11.5 * (i + 1);\n+      s2.a[i] = 10.5 * (i + 1);\n+      res_ref[i] = 9.5 * (i + 1);\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm_sqrt_round_sd (s1.x, s2.x, \n+                _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res2.x = _mm_mask_sqrt_round_sd (s1.x, mask, s1.x, s2.x,\n+\t\t_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res3.x = _mm_maskz_sqrt_round_sd (mask, s1.x, s2.x,\n+\t\t_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+\n+  compute_sqrtsd (s1.a, s2.a, res_ref);\n+\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+}\n+\n+\n+\n+"}, {"sha": "103ff30e560967d322e1cd670552392f436fc3f9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtss-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c?ref=b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "patch": "@@ -1,13 +1,19 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vsqrtss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtss\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n \n #include <immintrin.h>\n \n volatile __m128 x1, x2;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   x1 = _mm_sqrt_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_sqrt_round_ss (x1, m, x1, x2, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm_maskz_sqrt_round_ss (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "90f88bef904effd7c4d7498967f69f1d4267c47a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtss-2.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-2.c?ref=b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+compute_sqrtss (float *s1, float *s2, float *r)\n+{\n+  r[0] = sqrt(s2[0]);\n+  int i;\n+  for (i = 1; i < SIZE; i++)\n+    {\n+      r[i] = s1[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128 res1, res2, res3;\n+  union128 s1, s2;\n+  float res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 11.5 * (i + 1);\n+      s2.a[i] = 10.5 * (i + 1);\n+      res_ref[i] = 9.5 * (i + 1);\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = _mm_sqrt_round_ss (s1.x, s2.x,\n+                _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res2.x = _mm_mask_sqrt_round_ss (s1.x, mask, s1.x, s2.x,\n+                _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res3.x = _mm_maskz_sqrt_round_ss (mask, s1.x, s2.x,\n+                _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+\n+  compute_sqrtss (s1.a, s2.a, res_ref);\n+\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+}\n+"}, {"sha": "7b031998387a971adaf34e9a9d1c1a91b0253947", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "patch": "@@ -322,8 +322,8 @@\n #define __builtin_ia32_shufps512_mask(A, B, F, D, E) __builtin_ia32_shufps512_mask(A, B, 1, D, E)\n #define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 8)\n #define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 8)\n-#define __builtin_ia32_sqrtss_round(A, B, C) __builtin_ia32_sqrtss_round(A, B, 8)\n-#define __builtin_ia32_sqrtsd_round(A, B, C) __builtin_ia32_sqrtsd_round(A, B, 8)\n+#define __builtin_ia32_sqrtss_mask_round(A, B, C, D, E) __builtin_ia32_sqrtss_mask_round(A, B, C, E, 8)\n+#define __builtin_ia32_sqrtsd_mask_round(A, B, C, D, E) __builtin_ia32_sqrtsd_mask_round(A, B, C, E, 8)\n #define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 8)"}, {"sha": "0b18eecf6b9c1507bfddfa664c8786a701ae35f1", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10bc0d6f9d5e281465c6f8d4197f3158e46e093/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=b10bc0d6f9d5e281465c6f8d4197f3158e46e093", "patch": "@@ -323,8 +323,8 @@\n #define __builtin_ia32_shufps512_mask(A, B, F, D, E) __builtin_ia32_shufps512_mask(A, B, 1, D, E)\n #define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 8)\n #define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 8)\n-#define __builtin_ia32_sqrtss_round(A, B, C) __builtin_ia32_sqrtss_round(A, B, 8)\n-#define __builtin_ia32_sqrtsd_round(A, B, C) __builtin_ia32_sqrtsd_round(A, B, 8)\n+#define __builtin_ia32_sqrtss_mask_round(A, B, C, D, E) __builtin_ia32_sqrtss_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_sqrtsd_mask_round(A, B, C, D, E) __builtin_ia32_sqrtsd_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 8)"}]}