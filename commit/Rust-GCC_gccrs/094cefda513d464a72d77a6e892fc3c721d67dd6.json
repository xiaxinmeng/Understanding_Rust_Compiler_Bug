{"sha": "094cefda513d464a72d77a6e892fc3c721d67dd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk0Y2VmZGE1MTNkNDY0YTcyZDc3YTZlODkyZmMzYzcyMWQ2N2RkNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-08T10:32:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-08T10:32:07Z"}, "message": "[multiple changes]\n\n2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Array_Aggregate): If the expression in an\n\tothers choice is a literal analyze it now to enable later optimizations.\n\t* exp_aggr.adb (Expand_Record_Aggregate): An aggregate with static size\n\tand components can be handled by the backend even if it is of a limited\n\ttype.\n\n2010-10-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-rttiev.adb (task Timer): Since this package may be elaborated\n\tbefore System.Interrupt, we need to call Setup_Interrupt_Mask\n\texplicitly to ensure that this task has the proper signal mask.\n\n2010-10-08  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb (Freeze_Entity): For array case, move some processing for\n\tpragma Pack, Component_Size clause and atomic/volatile components here\n\tinstead of trying to do the job in Sem_Ch13 and Freeze.\n\t* layout.adb: Use new Addressable function\n\t* sem_ch13.adb (Analyze_Attribute_Representation_Clause, case\n\tComponent_Size): Move some handling to freeze point in\n\tFreeze.Freeze_Entity.\n\t* sem_prag.adb (Analyze_pragma, case Pack): Move some handling to\n\tfreeze point in Freese.Freeze_Entity.\n\t* sem_util.ads, sem_util.adb (Addressable): New function.\n\nFrom-SVN: r165159", "tree": {"sha": "c604f48cd1d2146c097de1c9ebfebfdbcf9457ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c604f48cd1d2146c097de1c9ebfebfdbcf9457ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/094cefda513d464a72d77a6e892fc3c721d67dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094cefda513d464a72d77a6e892fc3c721d67dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/094cefda513d464a72d77a6e892fc3c721d67dd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094cefda513d464a72d77a6e892fc3c721d67dd6/comments", "author": null, "committer": null, "parents": [{"sha": "0ac2a660757afcfe00a3e81973ac4c00555dde40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac2a660757afcfe00a3e81973ac4c00555dde40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ac2a660757afcfe00a3e81973ac4c00555dde40"}], "stats": {"total": 436, "additions": 268, "deletions": 168}, "files": [{"sha": "a61e3067d0dad5d49a188c8449855e84f54517aa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=094cefda513d464a72d77a6e892fc3c721d67dd6", "patch": "@@ -1,3 +1,30 @@\n+2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): If the expression in an\n+\tothers choice is a literal analyze it now to enable later optimizations.\n+\t* exp_aggr.adb (Expand_Record_Aggregate): An aggregate with static size\n+\tand components can be handled by the backend even if it is of a limited\n+\ttype.\n+\n+2010-10-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-rttiev.adb (task Timer): Since this package may be elaborated\n+\tbefore System.Interrupt, we need to call Setup_Interrupt_Mask\n+\texplicitly to ensure that this task has the proper signal mask.\n+\n+2010-10-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): For array case, move some processing for\n+\tpragma Pack, Component_Size clause and atomic/volatile components here\n+\tinstead of trying to do the job in Sem_Ch13 and Freeze.\n+\t* layout.adb: Use new Addressable function\n+\t* sem_ch13.adb (Analyze_Attribute_Representation_Clause, case\n+\tComponent_Size): Move some handling to freeze point in\n+\tFreeze.Freeze_Entity.\n+\t* sem_prag.adb (Analyze_pragma, case Pack): Move some handling to\n+\tfreeze point in Freese.Freeze_Entity.\n+\t* sem_util.ads, sem_util.adb (Addressable): New function.\n+\n 2010-10-08  Robert Dewar  <dewar@adacore.com>\n \n \t* sprint.adb: Minor reformatting."}, {"sha": "1c1fe859dd5ff66420aa885a5092cb2d079890c8", "filename": "gcc/ada/a-rttiev.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fa-rttiev.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fa-rttiev.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-rttiev.adb?ref=094cefda513d464a72d77a6e892fc3c721d67dd6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2005-2009, Free Software Foundation, Inc.        --\n+--           Copyright (C) 2005-2010, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,6 +32,7 @@\n with System.Task_Primitives.Operations;\n with System.Tasking.Utilities;\n with System.Soft_Links;\n+with System.Interrupt_Management.Operations;\n \n with Ada.Containers.Doubly_Linked_Lists;\n pragma Elaborate_All (Ada.Containers.Doubly_Linked_Lists);\n@@ -98,6 +99,12 @@ package body Ada.Real_Time.Timing_Events is\n    begin\n       System.Tasking.Utilities.Make_Independent;\n \n+      --  Since this package may be elaborated before System.Interrupt,\n+      --  we need to call Setup_Interrupt_Mask explicitly to ensure that\n+      --  this task has the proper signal mask.\n+\n+      System.Interrupt_Management.Operations.Setup_Interrupt_Mask;\n+\n       --  We await the call to Start to ensure that Event_Queue_Lock has been\n       --  initialized by the package executable part prior to accessing it in\n       --  the loop. The task is activated before the first statement of the"}, {"sha": "ba3d5deda277983683108464e79f212a7fc37a3c", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=094cefda513d464a72d77a6e892fc3c721d67dd6", "patch": "@@ -3773,6 +3773,13 @@ package body Exp_Aggr is\n                then\n                   null;\n \n+               elsif Is_Entity_Name (Expression (Expr))\n+                 and then Present (Entity (Expression (Expr)))\n+                 and then Ekind (Entity (Expression (Expr))) =\n+                   E_Enumeration_Literal\n+               then\n+                  null;\n+\n                elsif Nkind (Expression (Expr)) /= N_Aggregate\n                  or else not Compile_Time_Known_Aggregate (Expression (Expr))\n                  or else Expansion_Delayed (Expression (Expr))\n@@ -5491,6 +5498,14 @@ package body Exp_Aggr is\n \n          C := First (Comps);\n          while Present (C) loop\n+\n+            --  If the component has box initialization, expansion is needed\n+            --  and component is not ready for backend.\n+\n+            if Box_Present (C) then\n+               return True;\n+            end if;\n+\n             if Nkind (Expression (C)) = N_Qualified_Expression then\n                Expr_Q := Expression (Expression (C));\n             else\n@@ -5576,13 +5591,32 @@ package body Exp_Aggr is\n       end if;\n \n       --  Ada 2005 (AI-318-2): We need to convert to assignments if components\n-      --  are build-in-place function calls. This test could be more specific,\n-      --  but doing it for all inherently limited aggregates seems harmless.\n-      --  The assignments will turn into build-in-place function calls (see\n-      --  Make_Build_In_Place_Call_In_Assignment).\n+      --  are build-in-place function calls. The assignments will each turn\n+      --  into a build-in-place function call.  If components are all static,\n+      --  we can pass the aggregate to the backend regardless of limitedness.\n+\n+      --  Extension aggregates, aggregates in extended return statements, and\n+      --  aggregates for C++ imported types must be expanded.\n \n       if Ada_Version >= Ada_05 and then Is_Inherently_Limited_Type (Typ) then\n-         Convert_To_Assignments (N, Typ);\n+         if Nkind (Parent (N)) /= N_Object_Declaration then\n+            Convert_To_Assignments (N, Typ);\n+\n+         elsif Nkind (N) = N_Extension_Aggregate\n+           or else Convention (Typ) = Convention_CPP\n+         then\n+            Convert_To_Assignments (N, Typ);\n+\n+         elsif not Size_Known_At_Compile_Time (Typ)\n+           or else Component_Not_OK_For_Backend\n+           or else not Static_Components\n+         then\n+            Convert_To_Assignments (N, Typ);\n+\n+         else\n+            Set_Compile_Time_Known_Aggregate (N);\n+            Set_Expansion_Delayed (N, False);\n+         end if;\n \n       --  Gigi doesn't handle properly temporaries of variable size\n       --  so we generate it in the front-end"}, {"sha": "91def2d6769d889e765a29fad865d7f9a2b747e1", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 123, "deletions": 12, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=094cefda513d464a72d77a6e892fc3c721d67dd6", "patch": "@@ -3097,7 +3097,9 @@ package body Freeze is\n \n          if Is_Array_Type (E) then\n             declare\n-               Ctyp : constant Entity_Id := Component_Type (E);\n+               FS     : constant Entity_Id := First_Subtype (E);\n+               Ctyp   : constant Entity_Id := Component_Type (E);\n+               Clause : Entity_Id;\n \n                Non_Standard_Enum : Boolean := False;\n                --  Set true if any of the index types is an enumeration type\n@@ -3150,8 +3152,8 @@ package body Freeze is\n \n                   begin\n                      if (Is_Packed (E) or else Has_Pragma_Pack (E))\n-                       and then not Has_Atomic_Components (E)\n                        and then Known_Static_RM_Size (Ctyp)\n+                       and then not Has_Component_Size_Clause (E)\n                      then\n                         Csiz := UI_Max (RM_Size (Ctyp), 1);\n \n@@ -3213,6 +3215,7 @@ package body Freeze is\n \n                            if Present (Comp_Size_C)\n                              and then Has_Pragma_Pack (Ent)\n+                             and then Warn_On_Redundant_Constructs\n                            then\n                               Error_Msg_Sloc := Sloc (Comp_Size_C);\n                               Error_Msg_NE\n@@ -3221,6 +3224,8 @@ package body Freeze is\n                               Error_Msg_N\n                                 (\"\\?explicit component size given#!\",\n                                  Pack_Pragma);\n+                              Set_Is_Packed (Base_Type (Ent), False);\n+                              Set_Is_Bit_Packed_Array (Base_Type (Ent), False);\n                            end if;\n \n                            --  Set component size if not already set by a\n@@ -3277,19 +3282,129 @@ package body Freeze is\n                               --  a representation characteristic, and this\n                               --  request may be ignored.\n \n-                              Set_Is_Packed (Base_Type (E), False);\n+                              Set_Is_Packed           (Base_Type (E), False);\n+                              Set_Is_Bit_Packed_Array (Base_Type (E), False);\n \n-                              --  In all other cases, packing is indeed needed\n+                              if Known_Static_Esize (Component_Type (E))\n+                                and then Esize (Component_Type (E)) = Csiz\n+                              then\n+                                 Set_Has_Non_Standard_Rep\n+                                   (Base_Type (E), False);\n+                              end if;\n+\n+                           --  In all other cases, packing is indeed needed\n \n                            else\n-                              Set_Has_Non_Standard_Rep (Base_Type (E));\n-                              Set_Is_Bit_Packed_Array  (Base_Type (E));\n-                              Set_Is_Packed            (Base_Type (E));\n+                              Set_Has_Non_Standard_Rep (Base_Type (E), True);\n+                              Set_Is_Bit_Packed_Array  (Base_Type (E), True);\n+                              Set_Is_Packed            (Base_Type (E), True);\n                            end if;\n                         end;\n                      end if;\n                   end;\n \n+                  --  Check for Atomic_Components or Aliased with unsuitable\n+                  --  packing or explicit component size clause given.\n+\n+                  if (Has_Atomic_Components (E)\n+                       or else Has_Aliased_Components (E))\n+                    and then (Has_Component_Size_Clause (E)\n+                               or else Is_Packed (E))\n+                  then\n+                     Alias_Atomic_Check : declare\n+\n+                        procedure Complain_CS (T : String);\n+                        --  Outputs error messages for incorrect CS clause or\n+                        --  pragma Pack for aliased or atomic components (T is\n+                        --  \"aliased\" or \"atomic\");\n+\n+                        -----------------\n+                        -- Complain_CS --\n+                        -----------------\n+\n+                        procedure Complain_CS (T : String) is\n+                        begin\n+                           if Has_Component_Size_Clause (E) then\n+                              Clause :=\n+                                Get_Attribute_Definition_Clause\n+                                  (FS, Attribute_Component_Size);\n+\n+                              if Known_Static_Esize (Ctyp) then\n+                                 Error_Msg_N\n+                                   (\"incorrect component size for \"\n+                                    & T & \" components\", Clause);\n+                                 Error_Msg_Uint_1 := Esize (Ctyp);\n+                                 Error_Msg_N\n+                                   (\"\\only allowed value is^\", Clause);\n+\n+                              else\n+                                 Error_Msg_N\n+                                   (\"component size cannot be given for \"\n+                                    & T & \" components\", Clause);\n+                              end if;\n+\n+                           else\n+                              Error_Msg_N\n+                                (\"cannot pack \" & T & \" components\",\n+                                 Get_Rep_Pragma (FS, Name_Pack));\n+                           end if;\n+\n+                           return;\n+                        end Complain_CS;\n+\n+                     --  Start of processing for Alias_Atomic_Check\n+\n+                     begin\n+                        --  Case where component size has no effect\n+\n+                        if Known_Static_Esize (Ctyp)\n+                          and then Known_Static_RM_Size (Ctyp)\n+                          and then Esize (Ctyp) = RM_Size (Ctyp)\n+                          and then Esize (Ctyp) mod 8 = 0\n+                        then\n+                           null;\n+\n+                        elsif Has_Aliased_Components (E)\n+                          or else Is_Aliased (Ctyp)\n+                        then\n+                           Complain_CS (\"aliased\");\n+\n+                        elsif Has_Atomic_Components (E)\n+                          or else Is_Atomic (Ctyp)\n+                        then\n+                           Complain_CS (\"atomic\");\n+                        end if;\n+                     end Alias_Atomic_Check;\n+                  end if;\n+\n+                  --  Warn for case of atomic type\n+\n+                  Clause := Get_Rep_Pragma (FS, Name_Atomic);\n+\n+                  if Present (Clause)\n+                    and then not Addressable (Component_Size (FS))\n+                  then\n+                     Error_Msg_NE\n+                       (\"non-atomic components of type& may not be \"\n+                        & \"accessible by separate tasks?\", Clause, E);\n+\n+                     if Has_Component_Size_Clause (E) then\n+                        Error_Msg_Sloc :=\n+                          Sloc\n+                            (Get_Attribute_Definition_Clause\n+                                 (FS, Attribute_Component_Size));\n+                        Error_Msg_N\n+                          (\"\\because of component size clause#?\",\n+                           Clause);\n+\n+                     elsif Has_Pragma_Pack (E) then\n+                        Error_Msg_Sloc :=\n+                          Sloc (Get_Rep_Pragma (FS, Name_Pack));\n+                        Error_Msg_N\n+                          (\"\\because of pragma Pack#?\", Clause);\n+                     end if;\n+                  end if;\n+\n                --  Processing that is done only for subtypes\n \n                else\n@@ -4749,11 +4864,7 @@ package body Freeze is\n                --  natural boundary of size.\n \n                elsif Size_Incl_EP /= Size_Excl_EP\n-                 and then\n-                    (Size_Excl_EP = 8  or else\n-                     Size_Excl_EP = 16 or else\n-                     Size_Excl_EP = 32 or else\n-                     Size_Excl_EP = 64)\n+                 and then Addressable (Size_Excl_EP)\n                then\n                   Actual_Size := Size_Excl_EP;\n                   Actual_Lo   := Loval_Excl_EP;"}, {"sha": "ec685b9b93fa4bdebea308bc6a5f3476140a1304", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=094cefda513d464a72d77a6e892fc3c721d67dd6", "patch": "@@ -2568,14 +2568,9 @@ package body Layout is\n                then\n                   declare\n                      S : constant Uint := Esize (CT);\n-\n                   begin\n-                     if S = 8  or else\n-                        S = 16 or else\n-                        S = 32 or else\n-                        S = 64\n-                     then\n-                        Set_Component_Size (E, Esize (CT));\n+                     if Addressable (S) then\n+                        Set_Component_Size (E, S);\n                      end if;\n                   end;\n                end if;"}, {"sha": "b910ac7c24a9fb2118ea0084fd5eb5cae371ba39", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=094cefda513d464a72d77a6e892fc3c721d67dd6", "patch": "@@ -1795,6 +1795,19 @@ package body Sem_Aggr is\n                      Expander_Mode_Save_And_Set (False);\n                      Full_Analysis := False;\n                      Analyze (Expr);\n+\n+                     --  If the expression is a literal, propagate this info\n+                     --  to the expression in the association, to enable some\n+                     --  optimizations downstream.\n+\n+                     if Is_Entity_Name (Expr)\n+                       and then Present (Entity (Expr))\n+                       and then Ekind (Entity (Expr)) = E_Enumeration_Literal\n+                     then\n+                        Analyze_And_Resolve\n+                          (Expression (Assoc), Component_Typ);\n+                     end if;\n+\n                      Full_Analysis := Save_Analysis;\n                      Expander_Mode_Restore;\n "}, {"sha": "b0752a5cb54f9512a60d7c72136f957c25c20250", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 64, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=094cefda513d464a72d77a6e892fc3c721d67dd6", "patch": "@@ -1298,34 +1298,6 @@ package body Sem_Ch13 is\n             Biased   : Boolean;\n             New_Ctyp : Entity_Id;\n             Decl     : Node_Id;\n-            Ignore   : Boolean := False;\n-\n-            procedure Complain_CS (T : String);\n-            --  Outputs error messages for incorrect CS clause for aliased or\n-            --  atomic components (T is \"aliased\" or \"atomic\");\n-\n-            -----------------\n-            -- Complain_CS --\n-            -----------------\n-\n-            procedure Complain_CS (T : String) is\n-            begin\n-               if Known_Static_Esize (Ctyp) then\n-                  Error_Msg_N\n-                    (\"incorrect component size for \" & T & \" components\", N);\n-                  Error_Msg_Uint_1 := Esize (Ctyp);\n-                  Error_Msg_N (\"\\only allowed value is^\", N);\n-\n-               else\n-                  Error_Msg_N\n-                    (\"component size cannot be given for \" & T & \" components\",\n-                     N);\n-               end if;\n-\n-               return;\n-            end Complain_CS;\n-\n-         --  Start of processing for Component_Size_Case\n \n          begin\n             if not Is_Array_Type (U_Ent) then\n@@ -1340,41 +1312,12 @@ package body Sem_Ch13 is\n                Error_Msg_N\n                  (\"component size clause for& previously given\", Nam);\n \n+            elsif Rep_Item_Too_Early (Btype, N) then\n+               null;\n+\n             elsif Csize /= No_Uint then\n                Check_Size (Expr, Ctyp, Csize, Biased);\n \n-               --  Case where component size has no effect\n-\n-               if Known_Static_Esize (Ctyp)\n-                 and then Known_Static_RM_Size (Ctyp)\n-                 and then Esize (Ctyp) = RM_Size (Ctyp)\n-                 and then (Esize (Ctyp) = 8  or else\n-                           Esize (Ctyp) = 16 or else\n-                           Esize (Ctyp) = 32 or else\n-                           Esize (Ctyp) = 64)\n-               then\n-                  Ignore := True;\n-\n-               --  Cannot give component size for aliased/atomic components\n-\n-               elsif Has_Aliased_Components (Btype)\n-                 or else Is_Aliased (Ctyp)\n-               then\n-                  Complain_CS (\"aliased\");\n-\n-               elsif Has_Atomic_Components (Btype)\n-                  or else Is_Atomic (Ctyp)\n-               then\n-                  Complain_CS (\"atomic\");\n-\n-               --  Warn for case of atomic type\n-\n-               elsif Is_Atomic (Btype) then\n-                  Error_Msg_NE\n-                    (\"non-atomic components of type& may not be accessible \"\n-                     & \"by separate tasks?\", N, Btype);\n-               end if;\n-\n                --  For the biased case, build a declaration for a subtype\n                --  that will be used to represent the biased subtype that\n                --  reflects the biased representation of components. We need\n@@ -1435,10 +1378,7 @@ package body Sem_Ch13 is\n                end if;\n \n                Set_Has_Component_Size_Clause (Btype, True);\n-\n-               if not Ignore then\n-                  Set_Has_Non_Standard_Rep (Btype, True);\n-               end if;\n+               Set_Has_Non_Standard_Rep (Btype, True);\n             end if;\n          end Component_Size_Case;\n "}, {"sha": "62e7568d691872c641a54cb378ef4a734047f7b5", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 24, "deletions": 79, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=094cefda513d464a72d77a6e892fc3c721d67dd6", "patch": "@@ -5928,7 +5928,6 @@ package body Sem_Prag is\n             E    : Entity_Id;\n             D    : Node_Id;\n             K    : Node_Kind;\n-            Ctyp : Entity_Id;\n \n          begin\n             Check_Ada_83_Warning;\n@@ -5970,24 +5969,6 @@ package body Sem_Prag is\n \n                if Prag_Id = Pragma_Atomic_Components then\n                   Set_Has_Atomic_Components (E);\n-\n-                  if Is_Packed (E) then\n-                     Set_Is_Packed (E, False);\n-\n-                     if Is_Array_Type (E) then\n-                        Ctyp := Component_Type (E);\n-                     else\n-                        Ctyp := Component_Type (Etype (E));\n-                     end if;\n-\n-                     if not (Known_Static_Esize (Ctyp)\n-                              and then Known_Static_RM_Size (Ctyp)\n-                              and then Esize (Ctyp) = RM_Size (Ctyp))\n-                     then\n-                        Error_Pragma_Arg\n-                          (\"cannot pack atomic components\", Arg1);\n-                     end if;\n-                  end if;\n                end if;\n \n             else\n@@ -8091,9 +8072,9 @@ package body Sem_Prag is\n             Record_Rep_Item (Proc_Id, N);\n          end Implemented;\n \n-         -----------------------\n+         ----------------------\n          -- Implicit_Packing --\n-         -----------------------\n+         ----------------------\n \n          --  pragma Implicit_Packing;\n \n@@ -9991,76 +9972,40 @@ package body Sem_Prag is\n                if Known_Static_Esize (Ctyp)\n                  and then Known_Static_RM_Size (Ctyp)\n                  and then Esize (Ctyp) = RM_Size (Ctyp)\n-                 and then (Esize (Ctyp) = 8  or else\n-                           Esize (Ctyp) = 16 or else\n-                           Esize (Ctyp) = 32 or else\n-                           Esize (Ctyp) = 64)\n+                 and then Addressable (Esize (Ctyp))\n                then\n                   Ignore := True;\n-\n-               --  Pack not allowed for aliased/atomic components\n-\n-               elsif Has_Aliased_Components (Base_Type (Typ)) then\n-                  Error_Pragma (\"cannot pack aliased components\");\n-\n-               elsif Has_Atomic_Components (Typ)\n-                 or else Is_Atomic (Component_Type (Typ))\n-               then\n-                  Error_Pragma (\"cannot pack atomic components\");\n-\n-               --  Warn for cases of packing non-atomic components of atomic\n-\n-               elsif Is_Atomic (Typ) then\n-                  Error_Msg_NE\n-                    (\"non-atomic components of type& may not be accessible \"\n-                     & \"by separate tasks?\", N, Typ);\n                end if;\n \n-               --  If we had an explicit component size given, then we do not\n-               --  let Pack override this given size. We also give a warning\n-               --  that Pack is being ignored unless we can tell for sure that\n-               --  the Pack would not have had any effect anyway.\n-\n-               if Has_Component_Size_Clause (Typ) then\n-                  if Known_Static_RM_Size (Component_Type (Typ))\n-                    and then\n-                      RM_Size (Component_Type (Typ)) = Component_Size (Typ)\n-                  then\n-                     null;\n-                  else\n-                     Error_Pragma\n-                       (\"?pragma% ignored, explicit component size given\");\n-                  end if;\n-\n-               --  If no prior array component size given, Pack is effective\n+               --  Process OK pragma Pack. Note that if there is a separate\n+               --  component clause present, the Pack will be cancelled. This\n+               --  processing is in Freeze.\n \n-               else\n-                  if not Rep_Item_Too_Late (Typ, N) then\n+               if not Rep_Item_Too_Late (Typ, N) then\n \n-                     --  In the context of static code analysis, we do not need\n-                     --  complex front-end expansions related to pragma Pack,\n-                     --  so disable handling of pragma Pack in this case.\n+                  --  In the context of static code analysis, we do not need\n+                  --  complex front-end expansions related to pragma Pack,\n+                  --  so disable handling of pragma Pack in this case.\n \n-                     if CodePeer_Mode then\n-                        null;\n+                  if CodePeer_Mode then\n+                     null;\n \n-                     --  For normal non-VM target, do the packing\n+                  --  For normal non-VM target, do the packing\n \n-                     elsif VM_Target = No_VM then\n-                        if not Ignore then\n-                           Set_Is_Packed            (Base_Type (Typ));\n-                           Set_Has_Non_Standard_Rep (Base_Type (Typ));\n-                        end if;\n+                  elsif VM_Target = No_VM then\n+                     if not Ignore then\n+                        Set_Is_Packed            (Base_Type (Typ));\n+                        Set_Has_Non_Standard_Rep (Base_Type (Typ));\n+                     end if;\n \n-                        Set_Has_Pragma_Pack      (Base_Type (Typ));\n+                     Set_Has_Pragma_Pack (Base_Type (Typ));\n \n-                     --  If we ignore the pack for VM_Targets, then warn about\n-                     --  this, except suppress the warning in GNAT mode.\n+                  --  If we ignore the pack for VM_Targets, then warn about\n+                  --  this, except suppress the warning in GNAT mode.\n \n-                     elsif not GNAT_Mode then\n-                        Error_Pragma\n-                          (\"?pragma% ignored in this configuration\");\n-                     end if;\n+                  elsif not GNAT_Mode then\n+                     Error_Pragma\n+                       (\"?pragma% ignored in this configuration\");\n                   end if;\n                end if;\n "}, {"sha": "1550a475435c96f1ba8c4e9306283059639bbd50", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=094cefda513d464a72d77a6e892fc3c721d67dd6", "patch": "@@ -245,6 +245,28 @@ package body Sem_Util is\n       Analyze (N);\n    end Add_Global_Declaration;\n \n+   -----------------\n+   -- Addressable --\n+   -----------------\n+\n+   --  For now, just 8/16/32/64. but analyze later if AAMP is special???\n+\n+   function Addressable (V : Uint) return Boolean is\n+   begin\n+      return V = Uint_8  or else\n+             V = Uint_16 or else\n+             V = Uint_32 or else\n+             V = Uint_64;\n+   end Addressable;\n+\n+   function Addressable (V : Int) return Boolean is\n+   begin\n+      return V = 8  or else\n+             V = 16 or else\n+             V = 32 or else\n+             V = 64;\n+   end Addressable;\n+\n    -----------------------\n    -- Alignment_In_Bits --\n    -----------------------"}, {"sha": "9c8bdd1fe1c5f2fcac1797719f38223d7eab8224", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094cefda513d464a72d77a6e892fc3c721d67dd6/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=094cefda513d464a72d77a6e892fc3c721d67dd6", "patch": "@@ -51,6 +51,12 @@ package Sem_Util is\n    --  for the current unit. The declarations are added in the current scope,\n    --  so the caller should push a new scope as required before the call.\n \n+   function Addressable (V : Uint) return Boolean;\n+   function Addressable (V : Int)  return Boolean;\n+   pragma Inline (Addressable);\n+   --  Returns True if the value of V is the word size of an addressable\n+   --  factor of the word size (typically 8, 16, 32 or 64).\n+\n    function Alignment_In_Bits (E : Entity_Id) return Uint;\n    --  If the alignment of the type or object E is currently known to the\n    --  compiler, then this function returns the alignment value in bits."}]}