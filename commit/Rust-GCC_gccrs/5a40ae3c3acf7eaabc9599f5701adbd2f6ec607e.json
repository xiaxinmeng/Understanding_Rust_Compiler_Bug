{"sha": "5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE0MGFlM2MzYWNmN2VhYWJjOTU5OWY1NzAxYWRiZDJmNmVjNjA3ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-12-07T13:21:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-12-07T13:21:51Z"}, "message": "re PR tree-optimization/83296 (missing -Wstringop-overflow due to missing range info for MAX_EXPR)\n\n2017-12-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/83296\n\tPR tree-optimization/67769\n\t* tree-ssa-phiopt.c (conditional_replacement): Do not reset\n\tflow sensitive info in an unrelated BB.\n\t(value_replacement): Use reset_flow_sensitive_info.\n\t(minmax_replacement): Reset flow sensitive info on the def\n\twe move.  Do not reset flow sensitive info in the whole BB\n\twe move the stmt to.\n\t(abs_replacement): Likewise.\n\n\t* g++.dg/warn/Wstringop-overflow-1.C: New testcase.\n\nFrom-SVN: r255466", "tree": {"sha": "123746bec470ee8bada54b15b044d6fccb91166a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/123746bec470ee8bada54b15b044d6fccb91166a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d78d986bfa059f3ad53c0be027ff8d3200404fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78d986bfa059f3ad53c0be027ff8d3200404fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d78d986bfa059f3ad53c0be027ff8d3200404fec"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "3f6fbaa35b5ed60a19921097e1a03460134e943d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e", "patch": "@@ -1,3 +1,15 @@\n+2017-12-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83296\n+\tPR tree-optimization/67769\n+\t* tree-ssa-phiopt.c (conditional_replacement): Do not reset\n+\tflow sensitive info in an unrelated BB.\n+\t(value_replacement): Use reset_flow_sensitive_info.\n+\t(minmax_replacement): Reset flow sensitive info on the def\n+\twe move.  Do not reset flow sensitive info in the whole BB\n+\twe move the stmt to.\n+\t(abs_replacement): Likewise.\n+\n 2017-12-07  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/43871"}, {"sha": "bb44c700dc29927283871710f649c4a65806fef8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e", "patch": "@@ -1,3 +1,9 @@\n+2017-12-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83296\n+\tPR tree-optimization/67769\n+\t* g++.dg/warn/Wstringop-overflow-1.C: New testcase.\n+\n 2017-12-07  Julia Koval  <julia.koval@intel.com>\n \n \t* gcc.target/i386/avx512-check.h: Handle bit_VAES."}, {"sha": "ce5157bfe20a51b00490665c8fec2f81652a309c", "filename": "gcc/testsuite/g++.dg/warn/Wstringop-overflow-1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-1.C?ref=5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-O2 -Wstringop-overflow=2\" }\n+\n+struct S {\n+    char a[5];\n+    void (*pf)(void);\n+};\n+\n+void f (struct S *s, int n)\n+{\n+  if (n < sizeof s->a + 1)\n+    n = sizeof s->a + 1;\n+\n+  __builtin_strncpy (s->a, \"123456\", n);   // { dg-warning \"writing 6\" }\n+}"}, {"sha": "85f51a479e245576dbf565f3992593eb779a0b74", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=5a40ae3c3acf7eaabc9599f5701adbd2f6ec607e", "patch": "@@ -672,7 +672,6 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n     }\n \n   replace_phi_edge_with_variable (cond_bb, e1, phi, new_var);\n-  reset_flow_sensitive_info_in_bb (cond_bb);\n \n   /* Note that we optimized this PHI.  */\n   return true;\n@@ -1138,22 +1137,22 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\t\t\t\t      cond_rhs, false, rhs2))))))\n     {\n       gsi = gsi_for_stmt (cond);\n+      /* Moving ASSIGN might change VR of lhs, e.g. when moving u_6\n+\t def-stmt in:\n+\t   if (n_5 != 0)\n+\t     goto <bb 3>;\n+\t   else\n+\t     goto <bb 4>;\n+\n+\t   <bb 3>:\n+\t   # RANGE [0, 4294967294]\n+\t   u_6 = n_5 + 4294967295;\n+\n+\t   <bb 4>:\n+\t   # u_3 = PHI <u_6(3), 4294967295(2)>  */\n+      reset_flow_sensitive_info (lhs);\n       if (INTEGRAL_TYPE_P (TREE_TYPE (lhs)))\n \t{\n-\t  /* Moving ASSIGN might change VR of lhs, e.g. when moving u_6\n-\t     def-stmt in:\n-\t     if (n_5 != 0)\n-\t       goto <bb 3>;\n-\t     else\n-\t       goto <bb 4>;\n-\n-\t     <bb 3>:\n-\t     # RANGE [0, 4294967294]\n-\t     u_6 = n_5 + 4294967295;\n-\n-\t     <bb 4>:\n-\t     # u_3 = PHI <u_6(3), 4294967295(2)>  */\n-\t  SSA_NAME_RANGE_INFO (lhs) = NULL;\n \t  /* If available, we can use VR of phi result at least.  */\n \t  tree phires = gimple_phi_result (phi);\n \t  struct range_info_def *phires_range_info\n@@ -1166,7 +1165,7 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n       for (int i = prep_cnt - 1; i >= 0; --i)\n \t{\n \t  tree plhs = gimple_assign_lhs (prep_stmt[i]);\n-\t  SSA_NAME_RANGE_INFO (plhs) = NULL;\n+\t  reset_flow_sensitive_info (plhs);\n \t  gsi_from = gsi_for_stmt (prep_stmt[i]);\n \t  gsi_move_before (&gsi_from, &gsi);\n \t}\n@@ -1490,6 +1489,8 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n       /* Move the statement from the middle block.  */\n       gsi = gsi_last_bb (cond_bb);\n       gsi_from = gsi_last_nondebug_bb (middle_bb);\n+      reset_flow_sensitive_info (SINGLE_SSA_TREE_OPERAND (gsi_stmt (gsi_from),\n+\t\t\t\t\t\t\t  SSA_OP_DEF));\n       gsi_move_before (&gsi_from, &gsi);\n     }\n \n@@ -1508,7 +1509,6 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n   gsi_insert_before (&gsi, new_stmt, GSI_NEW_STMT);\n \n   replace_phi_edge_with_variable (cond_bb, e1, phi, result);\n-  reset_flow_sensitive_info_in_bb (cond_bb);\n \n   return true;\n }\n@@ -1636,7 +1636,6 @@ abs_replacement (basic_block cond_bb, basic_block middle_bb,\n     }\n \n   replace_phi_edge_with_variable (cond_bb, e1, phi, result);\n-  reset_flow_sensitive_info_in_bb (cond_bb);\n \n   /* Note that we optimized this PHI.  */\n   return true;"}]}