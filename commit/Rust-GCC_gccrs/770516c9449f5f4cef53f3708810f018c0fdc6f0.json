{"sha": "770516c9449f5f4cef53f3708810f018c0fdc6f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwNTE2Yzk0NDlmNWY0Y2VmNTNmMzcwODgxMGYwMThjMGZkYzZmMA==", "commit": {"author": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2014-01-27T08:39:49Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2014-01-27T08:39:49Z"}, "message": "sh-mem.cc (sh_expand_cmpnstr): Fix remaining bytes after words comparisons.\n\n2014-01-27  Christian Bruel  <christian.bruel@st.com>\n\n\t* config/sh/sh-mem.cc (sh_expand_cmpnstr): Fix remaining bytes after\n\twords comparisons.\n\nFrom-SVN: r207126", "tree": {"sha": "33100fc88a5ea7c0c6a84f0928ded1e8ecf8f552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33100fc88a5ea7c0c6a84f0928ded1e8ecf8f552"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/770516c9449f5f4cef53f3708810f018c0fdc6f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770516c9449f5f4cef53f3708810f018c0fdc6f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770516c9449f5f4cef53f3708810f018c0fdc6f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770516c9449f5f4cef53f3708810f018c0fdc6f0/comments", "author": null, "committer": null, "parents": [{"sha": "ba3ca09806356ed27fd4fbd9f395c239034df342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3ca09806356ed27fd4fbd9f395c239034df342", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba3ca09806356ed27fd4fbd9f395c239034df342"}], "stats": {"total": 85, "additions": 71, "deletions": 14}, "files": [{"sha": "7e50d078516afa44b50e7b886854f8a75fc99a2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770516c9449f5f4cef53f3708810f018c0fdc6f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770516c9449f5f4cef53f3708810f018c0fdc6f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=770516c9449f5f4cef53f3708810f018c0fdc6f0", "patch": "@@ -1,3 +1,8 @@\n+2014-01-27  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* config/sh/sh-mem.cc (sh_expand_cmpnstr): Fix remaining bytes after\n+\twords comparisons.\n+\n 2014-01-26  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.md (call): Generate indirect long calls to non-local\n@@ -17,9 +22,9 @@\n \n 2014-01-25  Walter Lee  <walt@tilera.com>\n \n-\t* config/tilegx/tilegx-c.c (tilegx_cpu_cpp_builtins): \n+\t* config/tilegx/tilegx-c.c (tilegx_cpu_cpp_builtins):\n \tDefine __GCC_HAVE_SYNC_COMPARE_AND_SWAP_{1,2}.\n-\t* config/tilegx/tilepro-c.c (tilepro_cpu_cpp_builtins): \n+\t* config/tilegx/tilepro-c.c (tilepro_cpu_cpp_builtins):\n \tDefine __GCC_HAVE_SYNC_COMPARE_AND_SWAP_{1,2,4,8}.\n \n 2014-01-25  Walter Lee  <walt@tilera.com>\n@@ -46,7 +51,7 @@\n \t* config/tilepro/tilepro.c (tilepro_expand_builtin): Ditto.\n \n 2014-01-25  Richard Sandiford  <rdsandiford@googlemail.com>\n-\t\n+\n \t* config/mips/constraints.md (kl): Delete.\n \t* config/mips/mips.md (divmod<mode>4, udivmod<mode>4): Turn into\n \tdefine expands, using..."}, {"sha": "45af23acb48d124c1fad261ca6d09df40c3edead", "filename": "gcc/config/sh/sh-mem.cc", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770516c9449f5f4cef53f3708810f018c0fdc6f0/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770516c9449f5f4cef53f3708810f018c0fdc6f0/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-mem.cc?ref=770516c9449f5f4cef53f3708810f018c0fdc6f0", "patch": "@@ -344,7 +344,6 @@ sh_expand_cmpnstr (rtx *operands)\n \n       rtx L_loop_long = gen_label_rtx ();\n       rtx L_end_loop_long = gen_label_rtx ();\n-      rtx L_small = gen_label_rtx ();\n \n       int align = INTVAL (operands[4]);\n       int bytes = INTVAL (operands[3]);\n@@ -403,33 +402,59 @@ sh_expand_cmpnstr (rtx *operands)\n           jump = emit_jump_insn (gen_branch_false (L_loop_long));\n           add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n \n+         int sbytes = bytes % 4;\n+\n           /* end loop.  Reached max iterations.  */\n-          if (bytes % 4 == 0)\n+          if (! sbytes)\n             {\n-              /* Done.  */\n               jump = emit_jump_insn (gen_jump_compact (L_return));\n               emit_barrier_after (jump);\n             }\n           else\n             {\n-              /* Remaining bytes to read.   */\n-              jump = emit_jump_insn (gen_jump_compact (L_small));\n+              /* Remaining bytes to check.  */\n+\n+              addr1 = adjust_automodify_address (addr1, QImode, s1_addr, 0);\n+              addr2 = adjust_automodify_address (addr2, QImode, s2_addr, 0);\n+\n+              while (sbytes--)\n+                {\n+                  emit_insn (gen_extendqisi2 (tmp1, addr1));\n+                  emit_insn (gen_extendqisi2 (tmp2, addr2));\n+\n+                  emit_insn (gen_cmpeqsi_t (tmp2, const0_rtx));\n+                  jump = emit_jump_insn (gen_branch_true (L_end_loop_byte));\n+                  add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n+\n+                  emit_insn (gen_cmpeqsi_t (tmp1, tmp2));\n+                  if (flag_delayed_branch)\n+                    emit_insn (gen_zero_extendqisi2 (tmp2,\n+                                                     gen_lowpart (QImode,\n+                                                                  tmp2)));\n+                  jump = emit_jump_insn (gen_branch_false (L_end_loop_byte));\n+                  add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n+\n+                  addr1 = adjust_address (addr1, QImode,\n+                                          GET_MODE_SIZE (QImode));\n+                  addr2 = adjust_address (addr2, QImode,\n+                                          GET_MODE_SIZE (QImode));\n+                }\n+\n+              jump = emit_jump_insn (gen_jump_compact( L_end_loop_byte));\n               emit_barrier_after (jump);\n             }\n \n           emit_label (L_end_loop_long);\n \n           /* Found last word.  Restart it byte per byte. */\n-          bytes =  4;\n+\n           emit_move_insn (s1_addr, plus_constant (Pmode, s1_addr,\n                                                   -GET_MODE_SIZE (SImode)));\n           emit_move_insn (s2_addr, plus_constant (Pmode, s2_addr,\n                                                   -GET_MODE_SIZE (SImode)));\n-        }\n \n-      emit_label (L_small);\n-\n-      gcc_assert (bytes <= 7);\n+          /* fall thru.  */\n+        }\n \n       addr1 = adjust_automodify_address (addr1, QImode, s1_addr, 0);\n       addr2 = adjust_automodify_address (addr2, QImode, s2_addr, 0);\n@@ -445,7 +470,8 @@ sh_expand_cmpnstr (rtx *operands)\n \n           emit_insn (gen_cmpeqsi_t (tmp1, tmp2));\n           if (flag_delayed_branch)\n-            emit_insn (gen_zero_extendqisi2 (tmp2, gen_lowpart (QImode, tmp2)));\n+            emit_insn (gen_zero_extendqisi2 (tmp2,\n+                                             gen_lowpart (QImode, tmp2)));\n           jump = emit_jump_insn (gen_branch_false (L_end_loop_byte));\n           add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n "}, {"sha": "fa61d5c9874a0cfd1625171d9deea9bf6f3e9511", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770516c9449f5f4cef53f3708810f018c0fdc6f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770516c9449f5f4cef53f3708810f018c0fdc6f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=770516c9449f5f4cef53f3708810f018c0fdc6f0", "patch": "@@ -1,3 +1,7 @@\n+2014-01-27  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* gcc.target/sh/torture/strncmp.c: New tests.\n+\n 2014-01-25  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.dg/unroll_1.c: Add -fenable-rtl-loop2."}, {"sha": "cd50f5c05a7ec23d877454848e1571bece08ed8d", "filename": "gcc/testsuite/gcc.target/sh/torture/strncmp.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770516c9449f5f4cef53f3708810f018c0fdc6f0/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fstrncmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770516c9449f5f4cef53f3708810f018c0fdc6f0/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fstrncmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fstrncmp.c?ref=770516c9449f5f4cef53f3708810f018c0fdc6f0", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+const char *s=\"astc\";\n+const char *s1=\"-----BEGIN RSA PRIVATE KEY-----\";\n+const char *s2=\"atextaac\";\n+\n+main()\n+{\n+  if (! __builtin_strncmp (\"astb\", s, 4))\n+    abort();\n+\n+  if (__builtin_strncmp(s1, \"-----BEGIN \", 11))\n+    abort();\n+\n+  if (! __builtin_strncmp (\"atextaacb\", s2, 9))\n+    abort();\n+\n+  return 0;\n+}\n+"}]}