{"sha": "210cae9d510bffe5f4103ea82afe07f9b31418db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEwY2FlOWQ1MTBiZmZlNWY0MTAzZWE4MmFmZTA3ZjliMzE0MThkYg==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2020-12-17T08:56:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-29T08:00:48Z"}, "message": "[Ada] Add colors to GNATprove messages output to a terminal\n\ngcc/ada/\n\n\t* errout.adb (Output_Messages): Insert SGR strings where needed.\n\t* erroutc.adb (Output_Message_Txt): Insert SGR strings where\n\tneeded in the text of the message itself.\n\t(Output_Msg_Text): Allow for style message not to start\n\twith (style).\n\t* erroutc.ads: Add new constants and functions to control colors\n\tin messages output to the terminal. Add variable Use_SGR_Control\n\tthat should be set to True for using SGR color control strings.", "tree": {"sha": "5bc33ccc9fd3e0d8bc561d44534db209a662b553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bc33ccc9fd3e0d8bc561d44534db209a662b553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/210cae9d510bffe5f4103ea82afe07f9b31418db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210cae9d510bffe5f4103ea82afe07f9b31418db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210cae9d510bffe5f4103ea82afe07f9b31418db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210cae9d510bffe5f4103ea82afe07f9b31418db/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b626569a56c5b35e4c5a10ba7f0abd5d8b4fd0e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b626569a56c5b35e4c5a10ba7f0abd5d8b4fd0e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b626569a56c5b35e4c5a10ba7f0abd5d8b4fd0e7"}], "stats": {"total": 159, "additions": 146, "deletions": 13}, "files": [{"sha": "f7eb8cd712f16856d568f3ce5757bc0dd17d21c9", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210cae9d510bffe5f4103ea82afe07f9b31418db/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210cae9d510bffe5f4103ea82afe07f9b31418db/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=210cae9d510bffe5f4103ea82afe07f9b31418db", "patch": "@@ -2071,7 +2071,9 @@ package body Errout is\n       procedure Write_Max_Errors;\n       --  Write message if max errors reached\n \n-      procedure Write_Source_Code_Lines (Span : Source_Span);\n+      procedure Write_Source_Code_Lines\n+        (Span     : Source_Span;\n+         SGR_Span : String);\n       --  Write the source code line corresponding to Span, as follows when\n       --  Span in on one line:\n       --\n@@ -2095,6 +2097,9 @@ package body Errout is\n       --       |                             ^ here\n       --\n       --  where the caret on the line points to location Span.Ptr\n+      --\n+      --  SGR_Span is the SGR string to start the section of code in the span,\n+      --  that should be closed with SGR_Reset.\n \n       -------------------------\n       -- Write_Error_Summary --\n@@ -2290,8 +2295,10 @@ package body Errout is\n       -- Write_Source_Code_Lines --\n       -----------------------------\n \n-      procedure Write_Source_Code_Lines (Span : Source_Span) is\n-\n+      procedure Write_Source_Code_Lines\n+        (Span     : Source_Span;\n+         SGR_Span : String)\n+      is\n          function Get_Line_End\n            (Buf : Source_Buffer_Ptr;\n             Loc : Source_Ptr) return Source_Ptr;\n@@ -2490,6 +2497,15 @@ package body Errout is\n             --  the gap with first/last lines, otherwise use ... to denote\n             --  intermediate lines.\n \n+            --  If the span is on one line and not a simple source location,\n+            --  color it appropriately.\n+\n+            if Line_Fst = Line_Lst\n+              and then Col_Fst /= Col_Lst\n+            then\n+               Write_Str (SGR_Span);\n+            end if;\n+\n             declare\n                function Do_Write_Line (Cur_Line : Pos) return Boolean is\n                   (Cur_Line in Line_Fst | Line | Line_Lst\n@@ -2499,7 +2515,7 @@ package body Errout is\n                    (Cur_Line = Line + 1 and then Cur_Line = Line_Lst - 1));\n             begin\n                while Cur_Loc <= Buf'Last\n-                 and then Cur_Loc < Lst\n+                 and then Cur_Loc <= Lst\n                loop\n                   if Do_Write_Line (Cur_Line) then\n                      Write_Buffer_Char (Buf, Cur_Loc);\n@@ -2535,6 +2551,12 @@ package body Errout is\n                end loop;\n             end;\n \n+            if Line_Fst = Line_Lst\n+              and then Col_Fst /= Col_Lst\n+            then\n+               Write_Str (SGR_Reset);\n+            end if;\n+\n             --  Output the rest of the last line of the span\n \n             Write_Buffer (Buf, Cur_Loc, Get_Line_End (Buf, Cur_Loc));\n@@ -2546,6 +2568,9 @@ package body Errout is\n                Write_Str (String'(1 .. Width => ' '));\n                Write_Str (\" |\");\n                Write_Str (String'(1 .. Col_Fst - 1 => ' '));\n+\n+               Write_Str (SGR_Span);\n+\n                Write_Str (String'(Col_Fst .. Col - 1 => '~'));\n                Write_Str (\"^\");\n                Write_Str (String'(Col + 1 .. Col_Lst => '~'));\n@@ -2557,6 +2582,8 @@ package body Errout is\n                   Write_Str (\" here\");\n                end if;\n \n+               Write_Str (SGR_Reset);\n+\n                Write_Eol;\n             end if;\n          end if;\n@@ -2615,6 +2642,8 @@ package body Errout is\n                end if;\n \n                if Use_Prefix then\n+                  Write_Str (SGR_Locus);\n+\n                   if Full_Path_Name_For_Brief_Errors then\n                      Write_Name (Full_Ref_Name (Errors.Table (E).Sfile));\n                   else\n@@ -2633,6 +2662,8 @@ package body Errout is\n \n                   Write_Int (Int (Errors.Table (E).Col));\n                   Write_Str (\": \");\n+\n+                  Write_Str (SGR_Reset);\n                end if;\n \n                Output_Msg_Text (E);\n@@ -2652,12 +2683,23 @@ package body Errout is\n                           Errors.Table (E).Insertion_Sloc;\n                      begin\n                         if Loc /= No_Location then\n-                           Write_Source_Code_Lines (To_Span (Loc));\n+                           Write_Source_Code_Lines\n+                             (To_Span (Loc), SGR_Span => SGR_Note);\n                         end if;\n                      end;\n \n                   else\n-                     Write_Source_Code_Lines (Errors.Table (E).Sptr);\n+                     declare\n+                        SGR_Span : constant String :=\n+                          (if Errors.Table (E).Info then SGR_Note\n+                           elsif Errors.Table (E).Warn\n+                             and then not Errors.Table (E).Warn_Err\n+                           then SGR_Warning\n+                           else SGR_Error);\n+                     begin\n+                        Write_Source_Code_Lines\n+                          (Errors.Table (E).Sptr, SGR_Span);\n+                     end;\n                   end if;\n                end if;\n             end if;"}, {"sha": "faef53ae1966781131f3ad1325a399252bdea3ba", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210cae9d510bffe5f4103ea82afe07f9b31418db/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210cae9d510bffe5f4103ea82afe07f9b31418db/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=210cae9d510bffe5f4103ea82afe07f9b31418db", "patch": "@@ -699,7 +699,7 @@ package body Erroutc is\n       --  For info messages, prefix message with \"info: \"\n \n       elsif E_Msg.Info then\n-         Txt := new String'(\"info: \" & Txt.all);\n+         Txt := new String'(SGR_Note & \"info: \" & SGR_Reset & Txt.all);\n \n       --  Warning treated as error\n \n@@ -709,27 +709,58 @@ package body Erroutc is\n       --  [warning-as-error] at the end.\n \n          Warnings_Treated_As_Errors := Warnings_Treated_As_Errors + 1;\n-         Txt := new String'(\"error: \" & Txt.all & \" [warning-as-error]\");\n+         Txt := new String'(SGR_Error & \"error: \" & SGR_Reset\n+                            & Txt.all & \" [warning-as-error]\");\n \n       --  Normal warning, prefix with \"warning: \"\n \n       elsif E_Msg.Warn then\n-         Txt := new String'(\"warning: \" & Txt.all);\n+         Txt := new String'(SGR_Warning & \"warning: \" & SGR_Reset & Txt.all);\n \n-      --  No prefix needed for style message, \"(style)\" is there already\n+      --  No prefix needed for style message, \"(style)\" is there already,\n+      --  although not necessarily in first position if -gnatdJ is used.\n \n       elsif E_Msg.Style then\n-         null;\n+         if Txt (Txt'First .. Txt'First + 6) = \"(style)\" then\n+            Txt := new String'(SGR_Warning & \"(style)\" & SGR_Reset\n+                               & Txt (Txt'First + 7 .. Txt'Last));\n+         end if;\n \n       --  No prefix needed for check message, severity is there already\n \n       elsif E_Msg.Check then\n-         null;\n+\n+         --  The message format is \"severity: ...\"\n+         --\n+         --  Enclose the severity with an SGR control string if requested\n+\n+         if Use_SGR_Control then\n+            declare\n+               Msg   : String renames Text.all;\n+               Colon : Natural := 0;\n+            begin\n+               --  Find first colon\n+\n+               for J in Msg'Range loop\n+                  if Msg (J) = ':' then\n+                     Colon := J;\n+                     exit;\n+                  end if;\n+               end loop;\n+\n+               pragma Assert (Colon > 0);\n+\n+               Txt := new String'(SGR_Error\n+                                  & Msg (Msg'First .. Colon)\n+                                  & SGR_Reset\n+                                  & Msg (Colon + 1 .. Msg'Last));\n+            end;\n+         end if;\n \n       --  All other cases, add \"error: \" if unique error tag set\n \n       elsif Opt.Unique_Error_Tag then\n-         Txt := new String'(\"error: \" & Txt.all);\n+         Txt := new String'(SGR_Error & \"error: \" & SGR_Reset & Txt.all);\n       end if;\n \n       --  Set error message line length and length of message"}, {"sha": "62ce0d68586e337f4181bb50d279c6474af8085c", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210cae9d510bffe5f4103ea82afe07f9b31418db/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210cae9d510bffe5f4103ea82afe07f9b31418db/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=210cae9d510bffe5f4103ea82afe07f9b31418db", "patch": "@@ -390,6 +390,66 @@ package Erroutc is\n    --  find such an On entry, we cancel the indication of it being the\n    --  configuration case. This seems to handle all cases we run into ok.\n \n+   -------------------\n+   -- Color Control --\n+   -------------------\n+\n+   Use_SGR_Control : Boolean := False;\n+   --  Set to True for enabling colored output. This should only be done when\n+   --  outputting messages to a terminal that supports it.\n+\n+   --  Colors in messages output to a terminal are controlled using SGR\n+   --  (Select Graphic Rendition).\n+\n+   Color_Separator  : constant String := \";\";\n+   Color_None       : constant String := \"00\";\n+   Color_Bold       : constant String := \"01\";\n+   Color_Underscore : constant String := \"04\";\n+   Color_Blink      : constant String := \"05\";\n+   Color_Reverse    : constant String := \"07\";\n+   Color_Fg_Black   : constant String := \"30\";\n+   Color_Fg_Red     : constant String := \"31\";\n+   Color_Fg_Green   : constant String := \"32\";\n+   Color_Fg_Yellow  : constant String := \"33\";\n+   Color_Fg_Blue    : constant String := \"34\";\n+   Color_Fg_Magenta : constant String := \"35\";\n+   Color_Fg_Cyan    : constant String := \"36\";\n+   Color_Fg_White   : constant String := \"37\";\n+   Color_Bg_Black   : constant String := \"40\";\n+   Color_Bg_Red     : constant String := \"41\";\n+   Color_Bg_Green   : constant String := \"42\";\n+   Color_Bg_Yellow  : constant String := \"43\";\n+   Color_Bg_Blue    : constant String := \"44\";\n+   Color_Bg_Magenta : constant String := \"45\";\n+   Color_Bg_Cyan    : constant String := \"46\";\n+   Color_Bg_White   : constant String := \"47\";\n+\n+   SGR_Start        : constant String := ASCII.ESC & \"[\";\n+   SGR_End          : constant String := \"m\" & ASCII.ESC & \"[K\";\n+\n+   function SGR_Seq (Str : String) return String is\n+     (if Use_SGR_Control then SGR_Start & Str & SGR_End else \"\");\n+   --  Return the SGR control string for the commands in Str. It returns the\n+   --  empty string if Use_SGR_Control is False, so that we can insert this\n+   --  string unconditionally.\n+\n+   function SGR_Reset return String is (SGR_Seq (\"\"));\n+   --  This ends the current section of colored output\n+\n+   --  We're using the same colors as gcc/g++ for errors/warnings/notes/locus.\n+   --  More colors are defined in gcc/g++ for other features of diagnostic\n+   --  messages (e.g. inline types, fixit) and could be used in GNAT in the\n+   --  future. The following functions start a section of colored output.\n+\n+   function SGR_Error return String is\n+     (SGR_Seq (Color_Bold & Color_Separator & Color_Fg_Red));\n+   function SGR_Warning return String is\n+     (SGR_Seq (Color_Bold & Color_Separator & Color_Fg_Magenta));\n+   function SGR_Note return String is\n+     (SGR_Seq (Color_Bold & Color_Separator & Color_Fg_Cyan));\n+   function SGR_Locus return String is\n+     (SGR_Seq (Color_Bold));\n+\n    -----------------\n    -- Subprograms --\n    -----------------"}]}