{"sha": "82e974d406df50ed795223e0dc5308c0c9ed7744", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJlOTc0ZDQwNmRmNTBlZDc5NTIyM2UwZGM1MzA4YzBjOWVkNzc0NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-12T12:17:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-12T12:17:56Z"}, "message": "(toe64):  Use Intel bit pattern for little-endian XFmode Inf.\n\n(e64toe): Likewise; also check the exponent field properly.\n\nFrom-SVN: r8734", "tree": {"sha": "5706bdcb4af60d63f8569a96c549f1edca0c1b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5706bdcb4af60d63f8569a96c549f1edca0c1b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82e974d406df50ed795223e0dc5308c0c9ed7744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e974d406df50ed795223e0dc5308c0c9ed7744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e974d406df50ed795223e0dc5308c0c9ed7744", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e974d406df50ed795223e0dc5308c0c9ed7744/comments", "author": null, "committer": null, "parents": [{"sha": "5ee38d52b40b29556c946ded546b61d9eb355d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee38d52b40b29556c946ded546b61d9eb355d01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee38d52b40b29556c946ded546b61d9eb355d01"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "31b60cf7bd71682a30126b4d32e60273406c33c7", "filename": "gcc/real.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e974d406df50ed795223e0dc5308c0c9ed7744/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e974d406df50ed795223e0dc5308c0c9ed7744/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=82e974d406df50ed795223e0dc5308c0c9ed7744", "patch": "@@ -1,6 +1,6 @@\n /* real.c - implementation of REAL_ARITHMETIC, REAL_VALUE_ATOF,\n    and support for XFmode IEEE extended real floating point arithmetic.\n-   Copyright (C) 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1995 Free Software Foundation, Inc.\n    Contributed by Stephen L. Moshier (moshier@world.std.com).\n \n This file is part of GNU CC.\n@@ -2957,17 +2957,19 @@ e64toe (pe, y)\n \t*p-- = *e++;\n     }\n #endif\n-  p = yy;\n-  q = y;\n #ifdef INFINITY\n+  /* Point to the exponent field and check max exponent cases.  */\n+  p = &yy[NE - 1];\n   if (*p == 0x7fff)\n     {\n #ifdef NANS\n       if (! FLOAT_WORDS_BIG_ENDIAN)\n \t{\n \t  for (i = 0; i < 4; i++)\n \t    {\n-\t      if (pe[i] != 0)\n+\t      if ((i != 3 && pe[i] != 0)\n+\t\t  /* Anything but 0x8000 here, including 0, is a NaN.  */\n+\t\t  || (i == 3 && pe[i] != 0x8000))\n \t\t{\n \t\t  enan (y, (*p & 0x8000) != 0);\n \t\t  return;\n@@ -2993,6 +2995,8 @@ e64toe (pe, y)\n       return;\n     }\n #endif  /* INFINITY */\n+  p = yy;\n+  q = y;\n   for (i = 0; i < NE; i++)\n     *q++ = *p++;\n }\n@@ -3385,6 +3389,17 @@ toe64 (a, b)\n     }\n   else\n     {\n+#ifdef INFINITY\n+      if (eiisinf (a))\n+\t{\n+\t  /* Intel long double infinity significand.  */\n+\t  *q-- = 0x8000;\n+\t  *q-- = 0;\n+\t  *q-- = 0;\n+\t  *q = 0;\n+\t  return;\n+\t}\n+#endif\n       for (i = 0; i < 4; i++)\n \t*q-- = *p++;\n     }"}]}