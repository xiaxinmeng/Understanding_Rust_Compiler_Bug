{"sha": "3c5ad1ffc64ba4e4f05290d131a4f5d10d51a787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1YWQxZmZjNjRiYTRlNGYwNTI5MGQxMzFhNGY1ZDEwZDUxYTc4Nw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-10-17T09:40:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-17T09:40:21Z"}, "message": "Makefile.in (print-rtl.o): Depend on TREE_H.\n\n\t* Makefile.in (print-rtl.o): Depend on TREE_H.\n\t* alias.c (get_alias_set): Make two passes over objects to first\n\tsee if inner object is access via restricted pointer.\n\tDefer allocating alias set for restricted pointer until here.\n\tCall find_placeholder with second arg nonzero.\n\tMinor cleanups.\n\t* c-common.c (c_apply_type_quals_to_decl): Defer getting alias\n\tset for restricted pointer types.\n\t* emit-rtl.c (set_mem_attributes): Set more attributes.\n\t(set_mem_align, change_address, adjust_address_1): New functions.\n\t(change_address_1): Now static.\n\t(adjust_address, adjust_address_nv): Deleted.\n\t(replace_equiv_address): Call change_address_1.\n\t* expr.c (get_inner_reference): Handle PLACEHOLDER_EXPR.\n\t(find_placeholder): Get starting point from PLIST arg.\n\t(expand_expr, case PLACEHOLDER_EXPR): Initialize find_placeholder arg.\n\t* expr.h (set_mem_align, change_address, adjust_address_1): New decls.\n\t(adjust_address, adjust_address_nv): New macros.\n\t* print-rtl.c (tree.h): New include.\n\t(print_rtx, case MEM): Print all memory attributes.\n\nFrom-SVN: r46314", "tree": {"sha": "25ac03515e469bad58b3fc6c46d4fa8bd7ea4ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25ac03515e469bad58b3fc6c46d4fa8bd7ea4ca0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c5ad1ffc64ba4e4f05290d131a4f5d10d51a787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5ad1ffc64ba4e4f05290d131a4f5d10d51a787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5ad1ffc64ba4e4f05290d131a4f5d10d51a787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5ad1ffc64ba4e4f05290d131a4f5d10d51a787/comments", "author": null, "committer": null, "parents": [{"sha": "738cc472453eb61b6d18e223877e5380d7adb0dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/738cc472453eb61b6d18e223877e5380d7adb0dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/738cc472453eb61b6d18e223877e5380d7adb0dd"}], "stats": {"total": 28, "additions": 6, "deletions": 22}, "files": [{"sha": "809c20879a0857612cf71900a877a5d754ef68c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5ad1ffc64ba4e4f05290d131a4f5d10d51a787/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5ad1ffc64ba4e4f05290d131a4f5d10d51a787/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c5ad1ffc64ba4e4f05290d131a4f5d10d51a787", "patch": "@@ -6,6 +6,8 @@ Wed Oct 17 05:26:39 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tDefer allocating alias set for restricted pointer until here.\n \tCall find_placeholder with second arg nonzero.\n \tMinor cleanups.\n+\t* c-common.c (c_apply_type_quals_to_decl): Defer getting alias\n+\tset for restricted pointer types.\n \t* emit-rtl.c (set_mem_attributes): Set more attributes.\n \t(set_mem_align, change_address, adjust_address_1): New functions.\n \t(change_address_1): Now static."}, {"sha": "6a4e1af48fc1e39cb152ca1b4e541745cb056c3c", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5ad1ffc64ba4e4f05290d131a4f5d10d51a787/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5ad1ffc64ba4e4f05290d131a4f5d10d51a787/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3c5ad1ffc64ba4e4f05290d131a4f5d10d51a787", "patch": "@@ -2131,28 +2131,10 @@ c_apply_type_quals_to_decl (type_quals, decl)\n \t  || !C_TYPE_OBJECT_OR_INCOMPLETE_P (TREE_TYPE (TREE_TYPE (decl))))\n \terror (\"invalid use of `restrict'\");\n       else if (flag_strict_aliasing)\n-\t{\n-\t  /* No two restricted pointers can point at the same thing.\n-\t     However, a restricted pointer can point at the same thing\n-\t     as an unrestricted pointer, if that unrestricted pointer\n-\t     is based on the restricted pointer.  So, we make the\n-\t     alias set for the restricted pointer a subset of the\n-\t     alias set for the type pointed to by the type of the\n-\t     decl.  */\n-\n-\t  HOST_WIDE_INT pointed_to_alias_set\n-\t    = get_alias_set (TREE_TYPE (TREE_TYPE (decl)));\n-\n-\t  if (pointed_to_alias_set == 0)\n-\t    /* It's not legal to make a subset of alias set zero.  */\n-\t    ;\n-\t  else\n-\t    {\n-\t      DECL_POINTER_ALIAS_SET (decl) = new_alias_set ();\n-\t      record_alias_subset  (pointed_to_alias_set,\n-\t\t\t\t    DECL_POINTER_ALIAS_SET (decl));\n-\t    }\n-\t}\n+\t/* Indicate we need to make a unique alias set for this pointer.\n+\t   We can't do it here because it might be pointing to an\n+\t   incomplete type.  */\n+\tDECL_POINTER_ALIAS_SET (decl) = -2;\n     }\n }\n "}]}