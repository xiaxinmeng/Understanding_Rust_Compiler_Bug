{"sha": "6fe00fb72a2618c00909c794b1a1a792a2fdaf68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZlMDBmYjcyYTI2MThjMDA5MDljNzk0YjFhMWE3OTJhMmZkYWY2OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-13T11:02:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-13T11:02:05Z"}, "message": "2017-10-13  Richard Biener  <rguenther@suse.de>\n\n\t* graphite-isl-ast-to-gimple.c\n\t(translate_isl_ast_to_gimple::get_rename_from_scev): Remove unused\n\tparameters and dominance check.\n\t(translate_isl_ast_to_gimple::graphite_copy_stmts_from_block): Adjust.\n\t(translate_isl_ast_to_gimple::copy_bb_and_scalar_dependences): Likewise.\n\t(translate_isl_ast_to_gimple::graphite_regenerate_ast_isl):\n\tDo not update SSA form here or do intermediate IL verification.\n\t* graphite.c: Include tree-ssa.h and tree-into-ssa.h.\n\t(graphite_initialize): Remove check on the number of loops in\n\tthe function and inline into graphite_transform_loops.\n\t(graphite_finalize): Inline into graphite_transform_loops.\n\t(graphite_transform_loops): Perform SSA update and IL verification\n\there.\n\t* params.def (PARAM_GRAPHITE_MIN_LOOPS_PER_FUNCTION): Remove.\n\n\t* gcc.dg/graphite/pr35356-3.c: XFAIL again.\n\t* gcc.dg/graphite/pr81373-2.c: Copy from gcc.dg/graphite/pr81373.c\n\twith alternate flags.\n\nFrom-SVN: r253720", "tree": {"sha": "f699d44ad82bb3e0fb7147cf79828619b321a23d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f699d44ad82bb3e0fb7147cf79828619b321a23d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fe00fb72a2618c00909c794b1a1a792a2fdaf68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fe00fb72a2618c00909c794b1a1a792a2fdaf68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fe00fb72a2618c00909c794b1a1a792a2fdaf68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a8821c54a5ff570e5d6005924ab9a165090d1cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8821c54a5ff570e5d6005924ab9a165090d1cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a8821c54a5ff570e5d6005924ab9a165090d1cd"}], "stats": {"total": 159, "additions": 56, "deletions": 103}, "files": [{"sha": "649e2e8a3032dc2771362fe02b3656c244e99482", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fe00fb72a2618c00909c794b1a1a792a2fdaf68", "patch": "@@ -1,3 +1,20 @@\n+2017-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite-isl-ast-to-gimple.c\n+\t(translate_isl_ast_to_gimple::get_rename_from_scev): Remove unused\n+\tparameters and dominance check.\n+\t(translate_isl_ast_to_gimple::graphite_copy_stmts_from_block): Adjust.\n+\t(translate_isl_ast_to_gimple::copy_bb_and_scalar_dependences): Likewise.\n+\t(translate_isl_ast_to_gimple::graphite_regenerate_ast_isl):\n+\tDo not update SSA form here or do intermediate IL verification.\n+\t* graphite.c: Include tree-ssa.h and tree-into-ssa.h.\n+\t(graphite_initialize): Remove check on the number of loops in\n+\tthe function and inline into graphite_transform_loops.\n+\t(graphite_finalize): Inline into graphite_transform_loops.\n+\t(graphite_transform_loops): Perform SSA update and IL verification\n+\there.\n+\t* params.def (PARAM_GRAPHITE_MIN_LOOPS_PER_FUNCTION): Remove.\n+\n 2017-10-13  Richard Biener  <rguenther@suse.de>\n \n \t* graphite-isl-ast-to-gimple.c (max_mode_int_precision,"}, {"sha": "2a583aba63bd5ebdb25fec324325dd92fc8d7ee3", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 7, "deletions": 32, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=6fe00fb72a2618c00909c794b1a1a792a2fdaf68", "patch": "@@ -189,7 +189,6 @@ class translate_isl_ast_to_gimple\n   __isl_give isl_ast_node * scop_to_isl_ast (scop_p scop);\n \n   tree get_rename_from_scev (tree old_name, gimple_seq *stmts, loop_p loop,\n-\t\t\t     basic_block new_bb, basic_block old_bb,\n \t\t\t     vec<tree> iv_map);\n   bool graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n \t\t\t\t       vec<tree> iv_map);\n@@ -1084,7 +1083,6 @@ gsi_insert_earliest (gimple_seq seq)\n \n tree translate_isl_ast_to_gimple::\n get_rename_from_scev (tree old_name, gimple_seq *stmts, loop_p loop,\n-\t\t      basic_block new_bb, basic_block,\n \t\t      vec<tree> iv_map)\n {\n   tree scev = scalar_evolution_in_region (region->region, loop, old_name);\n@@ -1113,16 +1111,6 @@ get_rename_from_scev (tree old_name, gimple_seq *stmts, loop_p loop,\n       return build_zero_cst (TREE_TYPE (old_name));\n     }\n \n-  if (TREE_CODE (new_expr) == SSA_NAME)\n-    {\n-      basic_block bb = gimple_bb (SSA_NAME_DEF_STMT (new_expr));\n-      if (bb && !dominated_by_p (CDI_DOMINATORS, new_bb, bb))\n-\t{\n-\t  set_codegen_error ();\n-\t  return build_zero_cst (TREE_TYPE (old_name));\n-\t}\n-    }\n-\n   /* Replace the old_name with the new_expr.  */\n   return force_gimple_operand (unshare_expr (new_expr), stmts,\n \t\t\t       true, NULL_TREE);\n@@ -1245,8 +1233,7 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n \t      {\n \t\tgimple_seq stmts = NULL;\n \t\tnew_name = get_rename_from_scev (old_name, &stmts,\n-\t\t\t\t\t\t bb->loop_father,\n-\t\t\t\t\t\t new_bb, bb, iv_map);\n+\t\t\t\t\t\t bb->loop_father, iv_map);\n \t\tif (! codegen_error_p ())\n \t\t  gsi_insert_earliest (stmts);\n \t\tnew_expr = &new_name;\n@@ -1361,7 +1348,7 @@ copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n \t\t  gimple_seq stmts = NULL;\n \t\t  tree new_name = get_rename_from_scev (arg, &stmts,\n \t\t\t\t\t\t\tbb->loop_father,\n-\t\t\t\t\t\t\tnew_bb, bb, iv_map);\n+\t\t\t\t\t\t\tiv_map);\n \t\t  if (! codegen_error_p ())\n \t\t    gsi_insert_earliest (stmts);\n \t\t  arg = new_name;\n@@ -1567,17 +1554,6 @@ graphite_regenerate_ast_isl (scop_p scop)\n \t\t\t\t     if_region->true_region->region.exit);\n       if (dump_file)\n \tfprintf (dump_file, \"[codegen] isl AST to Gimple succeeded.\\n\");\n-\n-      mark_virtual_operands_for_renaming (cfun);\n-      update_ssa (TODO_update_ssa);\n-      checking_verify_ssa (true, true);\n-      rewrite_into_loop_closed_ssa (NULL, 0);\n-      /* We analyzed evolutions of all SCOPs during SCOP detection\n-         which cached evolutions.  Now we've introduced PHIs for\n-\t liveouts which causes those cached solutions to be invalid\n-\t for code-generation purposes given we'd insert references\n-\t to SSA names not dominating their new use.  */\n-      scev_reset ();\n     }\n \n   if (t.codegen_error_p ())\n@@ -1587,9 +1563,6 @@ graphite_regenerate_ast_isl (scop_p scop)\n \t\t \"reverting back to the original code.\\n\");\n       set_ifsese_condition (if_region, integer_zero_node);\n \n-      /* We registered new names, scrap that.  */\n-      if (need_ssa_update_p (cfun))\n-\tdelete_update_ssa ();\n       /* Remove the unreachable region.  */\n       remove_edge_and_dominated_blocks (if_region->true_region->region.entry);\n       basic_block ifb = if_region->false_region->region.entry->src;\n@@ -1605,9 +1578,11 @@ graphite_regenerate_ast_isl (scop_p scop)\n \t  delete_loop (loop);\n     }\n \n-  /* Verifies properties that GRAPHITE should maintain during translation.  */\n-  checking_verify_loop_structure ();\n-  checking_verify_loop_closed_ssa (true);\n+  /* We are delaying SSA update to after code-generating all SCOPs.\n+     This is because we analyzed DRs and parameters on the unmodified\n+     IL and thus rely on SSA update to pick up new dominating definitions\n+     from for example SESE liveout PHIs.  This is also for efficiency\n+     as SSA update does work depending on the size of the function.  */\n \n   free (if_region->true_region);\n   free (if_region->region);"}, {"sha": "d11de71a9b87d4b9382819ccf02576fce531b8f5", "filename": "gcc/graphite.c", "status": "modified", "additions": 24, "deletions": 63, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=6fe00fb72a2618c00909c794b1a1a792a2fdaf68", "patch": "@@ -55,6 +55,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-cfgcleanup.h\"\n #include \"tree-vectorizer.h\"\n #include \"tree-ssa-loop-manip.h\"\n+#include \"tree-ssa.h\"\n+#include \"tree-into-ssa.h\"\n #include \"graphite.h\"\n \n /* Print global statistics to FILE.  */\n@@ -212,64 +214,6 @@ print_graphite_statistics (FILE* file, vec<scop_p> scops)\n   print_loops (file, 3);\n }\n \n-/* Initialize graphite: when there are no loops returns false.  */\n-\n-static bool\n-graphite_initialize (void)\n-{\n-  int min_loops = PARAM_VALUE (PARAM_GRAPHITE_MIN_LOOPS_PER_FUNCTION);\n-  int nloops = number_of_loops (cfun);\n-\n-  if (nloops <= min_loops)\n-    {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  if (nloops <= min_loops)\n-\t    fprintf (dump_file, \"\\nFunction does not have enough loops: \"\n-\t\t     \"PARAM_GRAPHITE_MIN_LOOPS_PER_FUNCTION = %d.\\n\",\n-\t\t     min_loops);\n-\n-\t  fprintf (dump_file, \"\\nnumber of SCoPs: 0\\n\");\n-\t  print_global_statistics (dump_file);\n-\t}\n-\n-      return false;\n-    }\n-\n-  calculate_dominance_info (CDI_DOMINATORS);\n-  initialize_original_copy_tables ();\n-\n-  if (dump_file && dump_flags)\n-    {\n-      dump_function_to_file (current_function_decl, dump_file, dump_flags);\n-      print_loops (dump_file, 3);\n-    }\n-\n-  return true;\n-}\n-\n-/* Finalize graphite: perform CFG cleanup when NEED_CFG_CLEANUP_P is\n-   true.  */\n-\n-static void\n-graphite_finalize (bool need_cfg_cleanup_p)\n-{\n-  if (need_cfg_cleanup_p)\n-    {\n-      free_dominance_info (CDI_DOMINATORS);\n-      scev_reset ();\n-      cleanup_tree_cfg ();\n-      profile_status_for_fn (cfun) = PROFILE_ABSENT;\n-      release_recorded_exits (cfun);\n-      tree_estimate_probability (false);\n-    }\n-\n-  free_original_copy_tables ();\n-\n-  if (dump_file && dump_flags)\n-    print_loops (dump_file, 3);\n-}\n-\n /* Deletes all scops in SCOPS.  */\n \n static void\n@@ -396,7 +340,7 @@ graphite_transform_loops (void)\n {\n   int i;\n   scop_p scop;\n-  bool need_cfg_cleanup_p = false;\n+  bool changed = false;\n   vec<scop_p> scops = vNULL;\n   isl_ctx *ctx;\n \n@@ -405,8 +349,7 @@ graphite_transform_loops (void)\n   if (parallelized_function_p (cfun->decl))\n     return;\n \n-  if (!graphite_initialize ())\n-    return;\n+  calculate_dominance_info (CDI_DOMINATORS);\n \n   ctx = isl_ctx_alloc ();\n   isl_options_set_on_error (ctx, ISL_ON_ERROR_ABORT);\n@@ -438,7 +381,7 @@ graphite_transform_loops (void)\n \tlocation_t loc = find_loop_location\n \t  (scops[i]->scop_info->region.entry->dest->loop_father);\n \n-\tneed_cfg_cleanup_p = true;\n+\tchanged = true;\n \tif (!graphite_regenerate_ast_isl (scop))\n \t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n \t\t\t   \"loop nest not optimized, code generation error\\n\");\n@@ -447,6 +390,16 @@ graphite_transform_loops (void)\n \t\t\t   \"loop nest optimized\\n\");\n       }\n \n+  if (changed)\n+    {\n+      mark_virtual_operands_for_renaming (cfun);\n+      update_ssa (TODO_update_ssa);\n+      checking_verify_ssa (true, true);\n+      rewrite_into_loop_closed_ssa (NULL, 0);\n+      scev_reset ();\n+      checking_verify_loop_structure ();\n+    }\n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       loop_p loop;\n@@ -461,9 +414,17 @@ graphite_transform_loops (void)\n     }\n \n   free_scops (scops);\n-  graphite_finalize (need_cfg_cleanup_p);\n   the_isl_ctx = NULL;\n   isl_ctx_free (ctx);\n+\n+  if (changed)\n+    {\n+      cleanup_tree_cfg ();\n+      profile_status_for_fn (cfun) = PROFILE_ABSENT;\n+      release_recorded_exits (cfun);\n+      tree_estimate_probability (false);\n+    }\n+\n }\n \n #else /* If isl is not available: #ifndef HAVE_isl.  */"}, {"sha": "8881f4c403a0731b065283274f67435575bc8d59", "filename": "gcc/params.def", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=6fe00fb72a2618c00909c794b1a1a792a2fdaf68", "patch": "@@ -882,13 +882,6 @@ DEFPARAM (PARAM_GRAPHITE_MAX_ARRAYS_PER_SCOP,\n \t  \"maximum number of arrays per scop.\",\n \t  100, 0, 0)\n \n-/* Maximal number of basic blocks in the functions analyzed by Graphite.  */\n-\n-DEFPARAM (PARAM_GRAPHITE_MIN_LOOPS_PER_FUNCTION,\n-\t  \"graphite-min-loops-per-function\",\n-\t  \"minimal number of loops per function to be analyzed by Graphite.\",\n-\t  2, 0, 0)\n-\n DEFPARAM (PARAM_MAX_ISL_OPERATIONS,\n \t  \"max-isl-operations\",\n \t  \"maximum number of isl operations, 0 means unlimited\","}, {"sha": "90a7f722111aa4e0028846bfc2138d1b078eb49a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6fe00fb72a2618c00909c794b1a1a792a2fdaf68", "patch": "@@ -1,3 +1,9 @@\n+2017-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/graphite/pr35356-3.c: XFAIL again.\n+\t* gcc.dg/graphite/pr81373-2.c: Copy from gcc.dg/graphite/pr81373.c\n+\twith alternate flags.\n+\n 2017-10-13  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/graphite/scop-10.c: Enlarge array to avoid undefined"}, {"sha": "8db042ffc6f6ee2c0b4c8bf0055c08bbaaa24561", "filename": "gcc/testsuite/gcc.dg/graphite/pr35356-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe00fb72a2618c00909c794b1a1a792a2fdaf68/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-3.c?ref=6fe00fb72a2618c00909c794b1a1a792a2fdaf68", "patch": "@@ -36,4 +36,5 @@ match (void)\n    \"Y[winner].y > 0\".  This could be fixed when we will use predicates\n    for such cases.  */\n \n-/* { dg-final { scan-tree-dump-times \"loop_1\" 0 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loop_1\" 0 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"number of SCoPs: 0\" \"graphite\" } } */"}]}