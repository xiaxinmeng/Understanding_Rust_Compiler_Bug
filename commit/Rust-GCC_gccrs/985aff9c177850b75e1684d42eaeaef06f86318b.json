{"sha": "985aff9c177850b75e1684d42eaeaef06f86318b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg1YWZmOWMxNzc4NTBiNzVlMTY4NGQ0MmVhZWFlZjA2Zjg2MzE4Yg==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2005-01-29T17:46:34Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-01-29T17:46:34Z"}, "message": "re PR fortran/18565 (gfortran: CONJG: false error message about standard violation)\n\n2005-01-29  Paul Brook  <paul@codesourcery.com>\n\n\tPR fortran/18565\n\t* check.c (real_or_complex_check): New function.\n\t(gfc_check_fn_c, gfc_check_fn_r, gfc_check_fn_rc): New functions.\n\t* intrinsic.c (add_functions): Use new check functions.\n\t* intrinsic.h (gfc_check_fn_c, gfc_check_fn_r, gfc_check_fn_rc):\n\tAdd prototypes.\ntestsuite/\n\t* gfortran.dg/double_complex_1.f90: New test.\n\nFrom-SVN: r94412", "tree": {"sha": "4e5cd3273822f358db1e26f4e1b1abfde7234436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e5cd3273822f358db1e26f4e1b1abfde7234436"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/985aff9c177850b75e1684d42eaeaef06f86318b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985aff9c177850b75e1684d42eaeaef06f86318b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985aff9c177850b75e1684d42eaeaef06f86318b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985aff9c177850b75e1684d42eaeaef06f86318b/comments", "author": null, "committer": null, "parents": [{"sha": "46df282378908dff9219749cd4cd576c155b2971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46df282378908dff9219749cd4cd576c155b2971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46df282378908dff9219749cd4cd576c155b2971"}], "stats": {"total": 122, "additions": 106, "deletions": 16}, "files": [{"sha": "94a163941a1c347d6cc937812eca07e4cc7a00df", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=985aff9c177850b75e1684d42eaeaef06f86318b", "patch": "@@ -1,3 +1,12 @@\n+2005-01-29  Paul Brook  <paul@codesourcery.com>\n+\n+\tPR fortran/18565\n+\t* check.c (real_or_complex_check): New function.\n+\t(gfc_check_fn_c, gfc_check_fn_r, gfc_check_fn_rc): New functions.\n+\t* intrinsic.c (add_functions): Use new check functions.\n+\t* intrinsic.h (gfc_check_fn_c, gfc_check_fn_r, gfc_check_fn_rc):\n+\tAdd prototypes.\n+\n 2005-01-29  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/19589"}, {"sha": "a63112bd81efac75b173beca6c0849fd50f362ff", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=985aff9c177850b75e1684d42eaeaef06f86318b", "patch": "@@ -88,6 +88,21 @@ int_or_real_check (gfc_expr * e, int n)\n }\n \n \n+/* Check that an expression is real or complex.  */\n+\n+static try\n+real_or_complex_check (gfc_expr * e, int n)\n+{\n+  if (e->ts.type != BT_REAL && e->ts.type != BT_COMPLEX)\n+    {\n+      must_be (e, n, \"REAL or COMPLEX\");\n+      return FAILURE;\n+    }\n+\n+  return SUCCESS;\n+}\n+\n+\n /* Check that the expression is an optional constant integer\n    and that it specifies a valid kind for that type.  */\n \n@@ -718,6 +733,42 @@ gfc_check_eoshift (gfc_expr * array, gfc_expr * shift, gfc_expr * boundary,\n }\n \n \n+/* A single complex argument.  */\n+\n+try\n+gfc_check_fn_c (gfc_expr * a)\n+{\n+  if (type_check (a, 0, BT_COMPLEX) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+/* A single real argument.  */\n+\n+try\n+gfc_check_fn_r (gfc_expr * a)\n+{\n+  if (type_check (a, 0, BT_REAL) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+/* A single real or complex argument.  */\n+\n+try\n+gfc_check_fn_rc (gfc_expr * a)\n+{\n+  if (real_or_complex_check (a, 0) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_fnum (gfc_expr * unit)\n {"}, {"sha": "03d443f3c520c2a8875dd452d80a05ab325c3ef4", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=985aff9c177850b75e1684d42eaeaef06f86318b", "patch": "@@ -900,7 +900,7 @@ add_functions (void)\n   make_generic (\"achar\", GFC_ISYM_ACHAR, GFC_STD_F95);\n \n   add_sym_1 (\"acos\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_acos, gfc_resolve_acos,\n+\t     gfc_check_fn_r, gfc_simplify_acos, gfc_resolve_acos,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dacos\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n@@ -922,7 +922,7 @@ add_functions (void)\n   make_generic (\"adjustr\", GFC_ISYM_ADJUSTR, GFC_STD_F95);\n \n   add_sym_1 (\"aimag\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_aimag, gfc_resolve_aimag,\n+\t     gfc_check_fn_c, gfc_simplify_aimag, gfc_resolve_aimag,\n \t     z, BT_COMPLEX, dz, REQUIRED);\n \n   add_sym_1 (\"dimag\", 1, 1, BT_REAL, dd, GFC_STD_GNU, \n@@ -970,7 +970,7 @@ add_functions (void)\n   make_generic (\"any\", GFC_ISYM_ANY, GFC_STD_F95);\n \n   add_sym_1 (\"asin\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_asin, gfc_resolve_asin,\n+\t     gfc_check_fn_r, gfc_simplify_asin, gfc_resolve_asin,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dasin\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n@@ -986,7 +986,7 @@ add_functions (void)\n   make_generic (\"associated\", GFC_ISYM_ASSOCIATED, GFC_STD_F95);\n \n   add_sym_1 (\"atan\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_atan, gfc_resolve_atan,\n+\t     gfc_check_fn_r, gfc_simplify_atan, gfc_resolve_atan,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"datan\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n@@ -1107,7 +1107,7 @@ add_functions (void)\n   make_generic (\"dcmplx\", GFC_ISYM_CMPLX, GFC_STD_GNU);\n \n   add_sym_1 (\"conjg\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n-\t     NULL, gfc_simplify_conjg, gfc_resolve_conjg,\n+\t     gfc_check_fn_c, gfc_simplify_conjg, gfc_resolve_conjg,\n \t     z, BT_COMPLEX, dz, REQUIRED);\n \n   add_sym_1 (\"dconjg\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n@@ -1117,11 +1117,11 @@ add_functions (void)\n   make_generic (\"conjg\", GFC_ISYM_CONJG, GFC_STD_F77);\n \n   add_sym_1 (\"cos\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_cos, gfc_resolve_cos,\n+\t     gfc_check_fn_rc, gfc_simplify_cos, gfc_resolve_cos,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dcos\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_cos, gfc_resolve_cos,\n+\t     gfc_check_fn_rc, gfc_simplify_cos, gfc_resolve_cos,\n \t     x, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"ccos\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n@@ -1137,7 +1137,7 @@ add_functions (void)\n   make_generic (\"cos\", GFC_ISYM_COS, GFC_STD_F77);\n \n   add_sym_1 (\"cosh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_cosh, gfc_resolve_cosh,\n+\t     gfc_check_fn_r, gfc_simplify_cosh, gfc_resolve_cosh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dcosh\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n@@ -1249,7 +1249,7 @@ add_functions (void)\n   make_generic (\"etime\", GFC_ISYM_ETIME, GFC_STD_GNU);\n \n   add_sym_1 (\"exp\", 1, 1, BT_REAL, dr,  GFC_STD_F77,\n-\t     NULL, gfc_simplify_exp, gfc_resolve_exp,\n+\t     gfc_check_fn_rc, gfc_simplify_exp, gfc_resolve_exp,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dexp\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n@@ -1477,7 +1477,7 @@ add_functions (void)\n   make_generic (\"llt\", GFC_ISYM_LLT, GFC_STD_F77);\n \n   add_sym_1 (\"log\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_log, gfc_resolve_log,\n+\t     gfc_check_fn_rc, gfc_simplify_log, gfc_resolve_log,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"alog\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n@@ -1501,7 +1501,7 @@ add_functions (void)\n   make_generic (\"log\", GFC_ISYM_LOG, GFC_STD_F77);\n \n   add_sym_1 (\"log10\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_log10, gfc_resolve_log10,\n+\t     gfc_check_fn_r, gfc_simplify_log10, gfc_resolve_log10,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"alog10\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n@@ -1821,7 +1821,7 @@ add_functions (void)\n   make_generic (\"sign\", GFC_ISYM_SIGN, GFC_STD_F77);\n \n   add_sym_1 (\"sin\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_sin, gfc_resolve_sin,\n+\t     gfc_check_fn_rc, gfc_simplify_sin, gfc_resolve_sin,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dsin\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n@@ -1841,7 +1841,7 @@ add_functions (void)\n   make_generic (\"sin\", GFC_ISYM_SIN, GFC_STD_F77);\n \n   add_sym_1 (\"sinh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_sinh, gfc_resolve_sinh,\n+\t     gfc_check_fn_r, gfc_simplify_sinh, gfc_resolve_sinh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dsinh\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n@@ -1870,7 +1870,7 @@ add_functions (void)\n   make_generic (\"spread\", GFC_ISYM_SPREAD, GFC_STD_F95);\n \n   add_sym_1 (\"sqrt\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n+\t     gfc_check_fn_rc, gfc_simplify_sqrt, gfc_resolve_sqrt,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dsqrt\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n@@ -1909,7 +1909,7 @@ add_functions (void)\n   make_generic (\"system\", GFC_ISYM_SYSTEM, GFC_STD_GNU);\n \n   add_sym_1 (\"tan\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_tan, gfc_resolve_tan,\n+\t     gfc_check_fn_r, gfc_simplify_tan, gfc_resolve_tan,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dtan\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n@@ -1919,7 +1919,7 @@ add_functions (void)\n   make_generic (\"tan\", GFC_ISYM_TAN, GFC_STD_F77);\n \n   add_sym_1 (\"tanh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_tanh, gfc_resolve_tanh,\n+\t     gfc_check_fn_r, gfc_simplify_tanh, gfc_resolve_tanh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dtanh\", 1, 1, BT_REAL, dd, GFC_STD_F77,"}, {"sha": "41593efe9c1f984b9033225c599a1b6b75e8700c", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=985aff9c177850b75e1684d42eaeaef06f86318b", "patch": "@@ -48,6 +48,9 @@ try gfc_check_dot_product (gfc_expr *, gfc_expr *);\n try gfc_check_eoshift (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_etime (gfc_expr *);\n try gfc_check_fstat (gfc_expr *, gfc_expr *);\n+try gfc_check_fn_c (gfc_expr *);\n+try gfc_check_fn_r (gfc_expr *);\n+try gfc_check_fn_rc (gfc_expr *);\n try gfc_check_fnum (gfc_expr *);\n try gfc_check_g77_math1 (gfc_expr *);\n try gfc_check_huge (gfc_expr *);"}, {"sha": "7f6149c7d978ab385f0d434297cf37182c16ecf4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=985aff9c177850b75e1684d42eaeaef06f86318b", "patch": "@@ -1,3 +1,12 @@\n+2005-01-29  Paul Brook  <paul@codesourcery.com>\n+\n+\tPR fortran/18565\n+\t* check.c (real_or_complex_check): New function.\n+\t(gfc_check_fn_c, gfc_check_fn_r, gfc_check_fn_rc): New functions.\n+\t* intrinsic.c (add_functions): Use new check functions.\n+\t* intrinsic.h (gfc_check_fn_c, gfc_check_fn_r, gfc_check_fn_rc):\n+\tAdd prototypes.\n+\n 2005-01-29  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/Wwrite-strings-1.c, gcc.dg/array-quals-2.c,"}, {"sha": "fc925a4f99a21d39b85f2139a9df81cfe58d0b25", "filename": "gcc/testsuite/gfortran.dg/double_complex_1.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdouble_complex_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985aff9c177850b75e1684d42eaeaef06f86318b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdouble_complex_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdouble_complex_1.f90?ref=985aff9c177850b75e1684d42eaeaef06f86318b", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"--std=f95\" }\n+! PR18565\n+! As we provide \"double complex\" versions of certain intrinsics an extension.\n+! However --std=f95 was also breaking the generic versions, which should work\n+! on any type kind.\n+program prog\n+  complex(kind=kind(0d0)) :: c\n+  print *, abs(c)\n+  print *, aimag(c)\n+  print *, conjg(c)\n+  print *, cos(c)\n+  print *, exp(c)\n+  print *, log(c)\n+  print *, sin(c)\n+  print *, sqrt(c)\n+end program\n+"}]}