{"sha": "8b5d71cd61ecf0793cab732aad7232d6da4620fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1ZDcxY2Q2MWVjZjA3OTNjYWI3MzJhYWQ3MjMyZDZkYTQ2MjBmYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-07-19T18:09:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-07-19T18:09:39Z"}, "message": "predict.c (propagate_unlikely_bbs_forward): Break out from ...\n\n\n\t* predict.c (propagate_unlikely_bbs_forward): Break out from ...\n\t(determine_unlikely_bbs): ... here.\n\t* predict.h (propagate_unlikely_bbs_forward): Declare.\n\t* cfgexpand.c (pass_expand::execute): Use it.\n\t* bb-reorder.c (sanitize_hot_paths): Do not consider known to be\n\tunlikely edges.\n\t(find_rarely_executed_basic_blocks_and_crossing_edges): Use\n\tpropagate_unlikely_bbs_forward.\n\nFrom-SVN: r250360", "tree": {"sha": "67f93353f64100487da1968df36ba48d260db79d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67f93353f64100487da1968df36ba48d260db79d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b5d71cd61ecf0793cab732aad7232d6da4620fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5d71cd61ecf0793cab732aad7232d6da4620fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5d71cd61ecf0793cab732aad7232d6da4620fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5d71cd61ecf0793cab732aad7232d6da4620fc/comments", "author": null, "committer": null, "parents": [{"sha": "95a60a5c8c5620da65d588b6b8c71f8145a31993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a60a5c8c5620da65d588b6b8c71f8145a31993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95a60a5c8c5620da65d588b6b8c71f8145a31993"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "17a1ea3ed8d8057e52d4f245869b84875a9e0b96", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5d71cd61ecf0793cab732aad7232d6da4620fc/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5d71cd61ecf0793cab732aad7232d6da4620fc/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=8b5d71cd61ecf0793cab732aad7232d6da4620fc", "patch": "@@ -1525,6 +1525,11 @@ sanitize_hot_paths (bool walk_up, unsigned int cold_bb_count,\n           if (e->flags & EDGE_DFS_BACK)\n             continue;\n \n+\t  /* Do not expect profile insanities when profile was not adjusted.  */\n+\t  if (e->probability == profile_probability::never ()\n+\t      || e->count == profile_count::zero ())\n+\t    continue;\n+\n           if (BB_PARTITION (reach_bb) != BB_COLD_PARTITION)\n           {\n             found = true;\n@@ -1555,6 +1560,10 @@ sanitize_hot_paths (bool walk_up, unsigned int cold_bb_count,\n         {\n           if (e->flags & EDGE_DFS_BACK)\n             continue;\n+\t  /* Do not expect profile insanities when profile was not adjusted.  */\n+\t  if (e->probability == profile_probability::never ()\n+\t      || e->count == profile_count::zero ())\n+\t    continue;\n           /* Select the hottest edge using the edge count, if it is non-zero,\n              then fallback to the edge frequency and finally the edge\n              probability.  */\n@@ -1576,6 +1585,10 @@ sanitize_hot_paths (bool walk_up, unsigned int cold_bb_count,\n           /* We have a hot bb with an immediate dominator that is cold.\n              The dominator needs to be re-marked hot.  */\n           BB_SET_PARTITION (reach_bb, BB_HOT_PARTITION);\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"Promoting bb %i to hot partition to sanitize \"\n+\t\t     \"profile of bb %i in %s walk\\n\", reach_bb->index,\n+\t\t     bb->index, walk_up ? \"backward\" : \"forward\");\n           cold_bb_count--;\n \n           /* Now we need to examine newly-hot reach_bb to see if it is also\n@@ -1603,6 +1616,8 @@ find_rarely_executed_basic_blocks_and_crossing_edges (void)\n   unsigned int cold_bb_count = 0;\n   auto_vec<basic_block> bbs_in_hot_partition;\n \n+  propagate_unlikely_bbs_forward ();\n+\n   /* Mark which partition (hot/cold) each basic block belongs in.  */\n   FOR_EACH_BB_FN (bb, cfun)\n     {"}, {"sha": "c9d8118ed4526d9a307d5d3c25883b1c6cb60620", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5d71cd61ecf0793cab732aad7232d6da4620fc/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5d71cd61ecf0793cab732aad7232d6da4620fc/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=8b5d71cd61ecf0793cab732aad7232d6da4620fc", "patch": "@@ -6480,6 +6480,11 @@ pass_expand::execute (function *fun)\n   if (fun->eh->region_tree != NULL)\n     finish_eh_generation ();\n \n+  /* BB subdivision may have created basic blocks that are are only reachable\n+     from unlikely bbs but not marked as such in the profile.  */\n+  if (optimize)\n+    propagate_unlikely_bbs_forward ();\n+\n   /* Remove unreachable blocks, otherwise we cannot compute dominators\n      which are needed for loop state verification.  As a side-effect\n      this also compacts blocks."}, {"sha": "9b8b14022e389444b0bc7a5278387a9c147bf74e", "filename": "gcc/predict.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5d71cd61ecf0793cab732aad7232d6da4620fc/gcc%2Fpredict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5d71cd61ecf0793cab732aad7232d6da4620fc/gcc%2Fpredict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.h?ref=8b5d71cd61ecf0793cab732aad7232d6da4620fc", "patch": "@@ -98,6 +98,7 @@ extern const char *predictor_name (enum br_predictor);\n extern void rebuild_frequencies (void);\n extern void report_predictor_hitrates (void);\n extern void force_edge_cold (edge, bool);\n+extern void propagate_unlikely_bbs_forward (void);\n \n extern void add_reg_br_prob_note (rtx_insn *, profile_probability);\n "}]}