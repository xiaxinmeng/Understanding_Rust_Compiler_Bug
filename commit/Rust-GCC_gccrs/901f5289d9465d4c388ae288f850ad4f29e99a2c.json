{"sha": "901f5289d9465d4c388ae288f850ad4f29e99a2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAxZjUyODlkOTQ2NWQ0YzM4OGFlMjg4Zjg1MGFkNGYyOWU5OWEyYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-23T14:45:43Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-23T14:45:43Z"}, "message": "vect: Fix comparisons between invariant booleans [PR94727]\n\nThis PR was caused by mismatched expectations between\nvectorizable_comparison and SLP.  We had a \"<\" comparison\nbetween two booleans that were leaves of the SLP tree, so\nvectorizable_comparison fell back on:\n\n  /* Invariant comparison.  */\n  if (!vectype)\n    {\n      vectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (rhs1),\n                                             slp_node);\n      if (maybe_ne (TYPE_VECTOR_SUBPARTS (vectype), nunits))\n        return false;\n    }\n\nrhs1 and rhs2 were *unsigned* boolean types, so we got back a vector\nof unsigned integers.  This in itself was OK, and meant that \"<\"\nworked as expected without the need for the boolean fix-ups:\n\n  /* Boolean values may have another representation in vectors\n     and therefore we prefer bit operations over comparison for\n     them (which also works for scalar masks).  We store opcodes\n     to use in bitop1 and bitop2.  Statement is vectorized as\n       BITOP2 (rhs1 BITOP1 rhs2) or\n       rhs1 BITOP2 (BITOP1 rhs2)\n     depending on bitop1 and bitop2 arity.  */\n  bool swap_p = false;\n  if (VECTOR_BOOLEAN_TYPE_P (vectype))\n    {\n\nHowever, vectorizable_comparison then used vect_get_slp_defs to get\nthe actual operands.  The request went to vect_get_constant_vectors,\nwhich also has logic to calculate the vector type.  The problem was\nthat this type was different from the one chosen above:\n\n  if (VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (op))\n      && vect_mask_constant_operand_p (stmt_vinfo))\n    vector_type = truth_type_for (stmt_vectype);\n  else\n    vector_type = get_vectype_for_scalar_type (vinfo, TREE_TYPE (op), op_node);\n\nSo the function gave back a vector of mask types, which here are vectors\nof *signed* booleans.  This meant that \"<\" gave:\n\n  true (-1) < false (0)\n\nand so the boolean fixup above was needed after all.\n\nFixed by making vectorizable_comparison also pick a mask type in\nthis case.\n\n2020-04-23  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/94727\n\t* tree-vect-stmts.c (vectorizable_comparison): Use mask_type when\n\tcomparing invariant scalar booleans.\n\ngcc/testsuite/\n\tPR tree-optimization/94727\n\t* gcc.dg/vect/pr94727.c: New test.", "tree": {"sha": "328b47dedcb13f4a994dc4705f3779e6eefb5572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/328b47dedcb13f4a994dc4705f3779e6eefb5572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/901f5289d9465d4c388ae288f850ad4f29e99a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901f5289d9465d4c388ae288f850ad4f29e99a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901f5289d9465d4c388ae288f850ad4f29e99a2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901f5289d9465d4c388ae288f850ad4f29e99a2c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73a32d6d47ec7c5fb5a5fe7eb896c0e1258ea68"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "041894e83326b4476b4d862f63fddf5bb4a0cc5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901f5289d9465d4c388ae288f850ad4f29e99a2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901f5289d9465d4c388ae288f850ad4f29e99a2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=901f5289d9465d4c388ae288f850ad4f29e99a2c", "patch": "@@ -1,3 +1,9 @@\n+2020-04-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/94727\n+\t* tree-vect-stmts.c (vectorizable_comparison): Use mask_type when\n+\tcomparing invariant scalar booleans.\n+\n 2020-04-23  Matthew Malcomson  <matthew.malcomson@arm.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "2b282721319f0d12e3c9087e314499e296c78b55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901f5289d9465d4c388ae288f850ad4f29e99a2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901f5289d9465d4c388ae288f850ad4f29e99a2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=901f5289d9465d4c388ae288f850ad4f29e99a2c", "patch": "@@ -1,3 +1,8 @@\n+2020-04-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/94727\n+\t* gcc.dg/vect/pr94727.c: New test.\n+\n 2020-04-23  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \tPR target/94514"}, {"sha": "38408711345b033168973bfb08c34104e7dba9d6", "filename": "gcc/testsuite/gcc.dg/vect/pr94727.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901f5289d9465d4c388ae288f850ad4f29e99a2c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr94727.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901f5289d9465d4c388ae288f850ad4f29e99a2c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr94727.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr94727.c?ref=901f5289d9465d4c388ae288f850ad4f29e99a2c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-additional-options \"-O3\" } */\n+\n+unsigned char a[16][32];\n+long b[16][32];\n+unsigned long c;\n+_Bool d;\n+\n+void __attribute__((noipa))\n+foo (void)\n+{\n+  for (int j = 0; j < 8; j++)\n+    for (int i = 0; i < 17; ++i)\n+      b[j][i] = (a[j][i] < c) > d;\n+}\n+\n+int\n+main (void)\n+{\n+  c = 1;\n+  foo ();\n+  if (!b[0][0])\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "88a1e2c51d203118a9c79aa4b743e47b87a151a5", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901f5289d9465d4c388ae288f850ad4f29e99a2c/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901f5289d9465d4c388ae288f850ad4f29e99a2c/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=901f5289d9465d4c388ae288f850ad4f29e99a2c", "patch": "@@ -10566,8 +10566,11 @@ vectorizable_comparison (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   /* Invariant comparison.  */\n   if (!vectype)\n     {\n-      vectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (rhs1),\n-\t\t\t\t\t     slp_node);\n+      if (VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (rhs1)))\n+\tvectype = mask_type;\n+      else\n+\tvectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (rhs1),\n+\t\t\t\t\t       slp_node);\n       if (!vectype || maybe_ne (TYPE_VECTOR_SUBPARTS (vectype), nunits))\n \treturn false;\n     }"}]}