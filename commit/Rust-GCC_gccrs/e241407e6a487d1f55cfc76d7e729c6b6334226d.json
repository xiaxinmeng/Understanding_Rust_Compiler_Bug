{"sha": "e241407e6a487d1f55cfc76d7e729c6b6334226d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0MTQwN2U2YTQ4N2QxZjU1Y2ZjNzZkN2U3MjljNmI2MzM0MjI2ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-06T21:38:47Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-06T21:38:47Z"}, "message": "entered into RCS\n\nFrom-SVN: r1175", "tree": {"sha": "75c859c169ea3e6b7bbfff0e2153a64d0cba08f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75c859c169ea3e6b7bbfff0e2153a64d0cba08f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e241407e6a487d1f55cfc76d7e729c6b6334226d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e241407e6a487d1f55cfc76d7e729c6b6334226d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e241407e6a487d1f55cfc76d7e729c6b6334226d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e241407e6a487d1f55cfc76d7e729c6b6334226d/comments", "author": null, "committer": null, "parents": [{"sha": "c34122d0fe0b65ef6387088d73f1f0f901dcd987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34122d0fe0b65ef6387088d73f1f0f901dcd987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34122d0fe0b65ef6387088d73f1f0f901dcd987"}], "stats": {"total": 98, "additions": 93, "deletions": 5}, "files": [{"sha": "f69ef4fd7fbef539c3aaa1af0e67086ede5e474d", "filename": "gcc/config/i860/fx2800.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e241407e6a487d1f55cfc76d7e729c6b6334226d/gcc%2Fconfig%2Fi860%2Ffx2800.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e241407e6a487d1f55cfc76d7e729c6b6334226d/gcc%2Fconfig%2Fi860%2Ffx2800.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Ffx2800.h?ref=e241407e6a487d1f55cfc76d7e729c6b6334226d", "patch": "@@ -21,6 +21,8 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n+#define OUTPUT_TDESC\n+\n #include \"i860v4.h\"\n \n /* The Alliant fx2800 running Concentrix 2.x is weird.  This is basically\n@@ -279,6 +281,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef ASM_FILE_START\n #define ASM_FILE_START(FILE)\n #undef ASM_OUTPUT_FUNCTION_PREFIX\n+#define ASM_OUTPUT_FUNCTION_PREFIX(FILE,NAME) \\\n+  fputs(\"\\tnop\\n\", (FILE));\t\t\t\\\n+  current_function_original_name = (NAME)\n #undef ASM_OUTPUT_PROLOGUE_SUFFIX\n \n /* Overrides for svr4.h begin here */"}, {"sha": "5fcf7a248dab8f771a71c6143c09ee78e9dd67f4", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 88, "deletions": 5, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e241407e6a487d1f55cfc76d7e729c6b6334226d/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e241407e6a487d1f55cfc76d7e729c6b6334226d/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=e241407e6a487d1f55cfc76d7e729c6b6334226d", "patch": "@@ -2039,15 +2039,49 @@ function_prologue (asm_file, local_bytes)\n    instruction, so what the hell.\n */\n \n+/* This corresponds to a version 4 TDESC structure. Lower numbered\n+   versions successively omit the last word of the structure. We\n+   don't try to handle version 5 here. */\n+\n+typedef struct TDESC_flags {\n+\tint version:4;\n+\tint reg_packing:1;\n+\tint callable_block:1;\n+\tint reserved:4;\n+\tint fregs:6;\t/* fp regs 2-7 */\n+\tint iregs:16;\t/* regs 0-15 */\n+} TDESC_flags;\n+\n+typedef struct TDESC {\n+\tTDESC_flags flags;\n+\tint integer_reg_offset;\t\t/* same as must_preserve_bytes */\n+\tint floating_point_reg_offset;\n+\tunsigned int positive_frame_size;\t/* same as frame_upper_bytes */\n+\tunsigned int negative_frame_size;\t/* same as frame_lower_bytes */\n+} TDESC;\n+\n void\n function_epilogue (asm_file, local_bytes)\n      register FILE *asm_file;\n      register unsigned local_bytes;\n {\n   register unsigned frame_upper_bytes;\n+  register unsigned frame_lower_bytes;\n   register unsigned preserved_reg_bytes = 0;\n   register unsigned i;\n   register unsigned restored_so_far = 0;\n+  register unsigned int_restored;\n+  register unsigned mask;\n+  unsigned intflags=0;\n+  register TDESC_flags *flags = (TDESC_flags *) &intflags;\n+\n+  flags->version = 4;\n+  flags->reg_packing = 1;\n+  flags->iregs = 8;\t/* old fp always gets saved */\n+\n+  /* Round-up the frame_lower_bytes so that it's a multiple of 16. */\n+\n+  frame_lower_bytes = (local_bytes + STACK_ALIGNMENT - 1) & -STACK_ALIGNMENT;\n \n   /* Count the number of registers that were preserved in the prologue.\n      Ignore r0.  It is never preserved.  */\n@@ -2071,17 +2105,31 @@ function_epilogue (asm_file, local_bytes)\n \n   /* Restore all of the \"preserved\" registers that need restoring.  */\n \n-  for (i = 1; i < 32; i++)\n-    if (regs_ever_live[i] && ! call_used_regs[i])\n+  mask = 2;\n+\n+  for (i = 1; i < 32; i++, mask<<=1)\n+    if (regs_ever_live[i] && ! call_used_regs[i]) {\n       fprintf (asm_file, \"\\tld.l %d(%sfp),%s%s\\n\",\n \tmust_preserve_bytes + (4 * restored_so_far++),\n \ti860_reg_prefix, i860_reg_prefix, reg_names[i]);\n+      if (i > 3 && i < 16)\n+\tflags->iregs |= mask;\n+    }\n+\n+  int_restored = restored_so_far;\n+  mask = 1;\n \n-  for (i = 32; i < 64; i++)\n-    if (regs_ever_live[i] && ! call_used_regs[i])\n+  for (i = 32; i < 64; i++) {\n+    if (regs_ever_live[i] && ! call_used_regs[i]) {\n       fprintf (asm_file, \"\\tfld.l %d(%sfp),%s%s\\n\",\n \tmust_preserve_bytes + (4 * restored_so_far++),\n \ti860_reg_prefix, i860_reg_prefix, reg_names[i]);\n+      if (i > 33 & i < 40)\n+\tflags->fregs |= mask;\n+    }\n+    if (i > 33 && i < 40)\n+      mask<<=1;\n+  }\n \n   /* Get the value we plan to use to restore the stack pointer into r31.  */\n \n@@ -2090,9 +2138,11 @@ function_epilogue (asm_file, local_bytes)\n \n   /* Restore the return address and the old frame pointer.  */\n \n-  if (must_preserve_r1)\n+  if (must_preserve_r1) {\n     fprintf (asm_file, \"\\tld.l 4(%sfp),%sr1\\n\",\n       i860_reg_prefix, i860_reg_prefix);\n+    flags->iregs |= 2;\n+  }\n \n   fprintf (asm_file, \"\\tld.l 0(%sfp),%sfp\\n\",\n     i860_reg_prefix, i860_reg_prefix);\n@@ -2101,4 +2151,37 @@ function_epilogue (asm_file, local_bytes)\n \n   fprintf (asm_file, \"\\tbri %sr1\\n\\tmov %sr31,%ssp\\n\",\n     i860_reg_prefix, i860_reg_prefix, i860_reg_prefix);\n+\n+#ifdef\tOUTPUT_TDESC\t/* Output an ABI-compliant TDESC entry */\n+  if (! frame_lower_bytes) {\n+    flags->version--;\n+    if (! frame_upper_bytes) {\n+      flags->version--;\n+      if (restored_so_far == int_restored)\t/* No FP saves */\n+\tflags->version--;\n+    }\n+  }\n+  assemble_name(asm_file,current_function_original_name);\n+  fputs(\".TDESC:\\n\", asm_file);\n+  fprintf(asm_file, \"%s 0x%0x\\n\", ASM_LONG, intflags);\n+  fprintf(asm_file, \"%s %d\\n\", ASM_LONG,\n+\tint_restored ? must_preserve_bytes : 0);\n+  if (flags->version > 1) {\n+    fprintf(asm_file, \"%s %d\\n\", ASM_LONG,\n+\t(restored_so_far == int_restored) ? 0 : must_preserve_bytes +\n+\t  (4 * int_restored));\n+    if (flags->version > 2) {\n+      fprintf(asm_file, \"%s %d\\n\", ASM_LONG, frame_upper_bytes);\n+      if (flags->version > 3)\n+\tfprintf(asm_file, \"%s %d\\n\", ASM_LONG, frame_lower_bytes);\n+    }\n+  }\n+  tdesc_section();\n+  fprintf(asm_file, \"%s \", ASM_LONG);\n+  assemble_name(asm_file, current_function_original_name);\n+  fprintf(asm_file, \"\\n%s \", ASM_LONG);\n+  assemble_name(asm_file, current_function_original_name);\n+  fputs(\".TDESC\\n\", asm_file);\n+  text_section();\n+#endif\n }"}]}