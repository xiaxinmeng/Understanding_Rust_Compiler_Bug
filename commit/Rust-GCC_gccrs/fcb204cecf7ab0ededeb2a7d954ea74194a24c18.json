{"sha": "fcb204cecf7ab0ededeb2a7d954ea74194a24c18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNiMjA0Y2VjZjdhYjBlZGVkZWIyYTdkOTU0ZWE3NDE5NGEyNGMxOA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2002-11-28T20:53:45Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2002-11-28T20:53:45Z"}, "message": "* doc/passes.texi: Mention the other register allocator.\n\nFrom-SVN: r59615", "tree": {"sha": "bbff78f46f17565993b624d5311290ba957ba69f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbff78f46f17565993b624d5311290ba957ba69f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcb204cecf7ab0ededeb2a7d954ea74194a24c18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb204cecf7ab0ededeb2a7d954ea74194a24c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcb204cecf7ab0ededeb2a7d954ea74194a24c18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb204cecf7ab0ededeb2a7d954ea74194a24c18/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "743f054e79ae80a5a3c7f4bc116ac49f30b25361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743f054e79ae80a5a3c7f4bc116ac49f30b25361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/743f054e79ae80a5a3c7f4bc116ac49f30b25361"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "fd1fe2f26c35ab19073044e1620f11598ce1107a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb204cecf7ab0ededeb2a7d954ea74194a24c18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb204cecf7ab0ededeb2a7d954ea74194a24c18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcb204cecf7ab0ededeb2a7d954ea74194a24c18", "patch": "@@ -1,3 +1,7 @@\n+2002-11-28  Michael Matz  <matz@suse.de>\n+\n+\t* doc/passes.texi: Mention the other register allocator.\n+\n 2002-11-28  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (6 new peephole2 patterns): New."}, {"sha": "423434d3c52e10ccd6753bdf12003e2b7e873e25", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb204cecf7ab0ededeb2a7d954ea74194a24c18/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb204cecf7ab0ededeb2a7d954ea74194a24c18/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=fcb204cecf7ab0ededeb2a7d954ea74194a24c18", "patch": "@@ -459,13 +459,20 @@ The option @option{-dS} causes a debugging dump of the RTL code after this\n pass is run for the first time.  The dump file's name is made by\n appending @samp{.sched} to the input file name.\n \n+@cindex register allocation\n+@item\n+Register allocation.  These passes make sure that all occurences of pseudo\n+registers are eliminated, either by allocating them to a hard register,\n+replacing them by an equivalent expression (e.g.@: a constant) or by placing\n+them on the stack.  This is done in several subpasses:\n+\n+@itemize @bullet\n @cindex register class preference pass\n @item\n Register class preferencing.  The RTL code is scanned to find out\n which register class is best for each pseudo register.  The source\n file is @file{regclass.c}.\n \n-@cindex register allocation\n @cindex local register allocation\n @item\n Local register allocation (@file{local-alloc.c}).  This pass allocates\n@@ -484,6 +491,17 @@ Global register allocation (@file{global.c}).  This pass\n allocates hard registers for the remaining pseudo registers (those\n whose life spans are not contained in one basic block).\n \n+@cindex graph coloring register allocation\n+@opindex fnew-ra\n+@opindex dl\n+@item\n+Graph coloring register allocator.  The files @file{ra.c}, @file{ra-build.c},\n+@file{ra-colorize.c}, @file{ra-debug.c}, @file{ra-rewrite.c} together with\n+the header @file{ra.h} contain another register allocator, which is used\n+when the option @option{-fnew-ra} is given.  In that case it is run instead\n+of the above mentioned local and global register allocation passes, and the\n+option @option{-dl} causes a debugging dump of its work.\n+\n @cindex reloading\n @item\n Reloading.  This pass renumbers pseudo registers with the hardware\n@@ -505,6 +523,7 @@ Source files are @file{reload.c} and @file{reload1.c}, plus the header\n The option @option{-dg} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.greg} to\n the input file name.\n+@end itemize\n \n @cindex instruction scheduling\n @cindex scheduling, instruction"}]}