{"sha": "92053f386a9561363151ae55fe3432c91366e1f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIwNTNmMzg2YTk1NjEzNjMxNTFhZTU1ZmUzNDMyYzkxMzY2ZTFmNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-09-03T00:02:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-09-03T00:02:53Z"}, "message": "configure.ac (gcc_cv_as_cfi_advance_working): Use objdump instead of readelf in the test.\n\n\t* configure.ac (gcc_cv_as_cfi_advance_working): Use objdump\n\tinstead of readelf in the test.\n\t(gcc_cv_as_cfi_sections_directive): Check for correct relocation\n\tin the .debug_frame section for coff targets.\n\t* configure: Rebuild.\n\nFrom-SVN: r163793", "tree": {"sha": "95dd2cc73ee9ca3c75943b817385d49ae016490c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95dd2cc73ee9ca3c75943b817385d49ae016490c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92053f386a9561363151ae55fe3432c91366e1f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92053f386a9561363151ae55fe3432c91366e1f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92053f386a9561363151ae55fe3432c91366e1f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92053f386a9561363151ae55fe3432c91366e1f4/comments", "author": null, "committer": null, "parents": [{"sha": "36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "44c1da8e25b8e41e1e968dc53452601c1a6ce790", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92053f386a9561363151ae55fe3432c91366e1f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92053f386a9561363151ae55fe3432c91366e1f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92053f386a9561363151ae55fe3432c91366e1f4", "patch": "@@ -1,3 +1,11 @@\n+2010-09-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* configure.ac (gcc_cv_as_cfi_advance_working): Use objdump\n+\tinstead of readelf in the test.\n+\t(gcc_cv_as_cfi_sections_directive): Check for correct relocation\n+\tin the .debug_frame section for coff targets.\n+\t* configure: Rebuild.\n+\n 2010-09-02  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/m32c/m32c.h (CLASS_LIKELY_SPILLED_P): Remove."}, {"sha": "f6230e45d02818872253e44e76ed53cd22df6ea9", "filename": "gcc/configure", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92053f386a9561363151ae55fe3432c91366e1f4/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92053f386a9561363151ae55fe3432c91366e1f4/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=92053f386a9561363151ae55fe3432c91366e1f4", "patch": "@@ -21585,7 +21585,7 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_cfi_directive\" >&5\n $as_echo \"$gcc_cv_as_cfi_directive\" >&6; }\n \n-if test $gcc_cv_as_cfi_directive = yes && test x$gcc_cv_readelf != x; then\n+if test $gcc_cv_as_cfi_directive = yes && test x$gcc_cv_objdump != x; then\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for working cfi advance\" >&5\n $as_echo_n \"checking assembler for working cfi advance... \" >&6; }\n if test \"${gcc_cv_as_cfi_advance_working+set}\" = set; then :\n@@ -21607,7 +21607,7 @@ else\n   test $ac_status = 0; }; }\n     then\n \n-if $gcc_cv_readelf -wf conftest.o 2>/dev/null \\\n+if $gcc_cv_objdump -Wf conftest.o 2>/dev/null \\\n     | grep 'DW_CFA_advance_loc[24]:[ \t][ \t]*75040[ \t]' >/dev/null; then\n    gcc_cv_as_cfi_advance_working=yes\n fi\n@@ -21623,7 +21623,7 @@ fi\n $as_echo \"$gcc_cv_as_cfi_advance_working\" >&6; }\n \n else\n-  # no readelf, err on the side of caution\n+  # no objdump, err on the side of caution\n   gcc_cv_as_cfi_advance_working=no\n fi\n \n@@ -21687,7 +21687,22 @@ else\n   $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n   test $ac_status = 0; }; }\n     then\n-\tgcc_cv_as_cfi_sections_directive=yes\n+\tcase $target_os in\n+  win32 | pe | cygwin* | mingw32* | uwin*)\n+    # Need to check that we generated the correct relocation for the\n+    # .debug_frame section.  This was fixed for binutils 2.21.\n+    gcc_cv_as_cfi_sections_directive=no\n+    if test \"x$gcc_cv_objdump\" != x; then\n+     if $gcc_cv_objdump -j .debug_frame -r conftest.o 2>/dev/null | \\\n+\tgrep secrel > /dev/null; then\n+      gcc_cv_as_cfi_sections_directive=yes\n+     fi\n+    fi\n+    ;;\n+  *)\n+    gcc_cv_as_cfi_sections_directive=yes\n+    ;;\n+esac\n     else\n       echo \"configure: failed program was\" >&5\n       cat conftest.s >&5"}, {"sha": "33086671d80546bf90257a54d14cabddaab69d87", "filename": "gcc/configure.ac", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92053f386a9561363151ae55fe3432c91366e1f4/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92053f386a9561363151ae55fe3432c91366e1f4/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=92053f386a9561363151ae55fe3432c91366e1f4", "patch": "@@ -2405,7 +2405,7 @@ gcc_GAS_CHECK_FEATURE([cfi directives], gcc_cv_as_cfi_directive,\n     gcc_cv_as_cfi_directive=yes\n     ;;\n esac])\n-if test $gcc_cv_as_cfi_directive = yes && test x$gcc_cv_readelf != x; then\n+if test $gcc_cv_as_cfi_directive = yes && test x$gcc_cv_objdump != x; then\n gcc_GAS_CHECK_FEATURE([working cfi advance], gcc_cv_as_cfi_advance_working,\n   ,,\n [\t.text\n@@ -2415,13 +2415,13 @@ gcc_GAS_CHECK_FEATURE([working cfi advance], gcc_cv_as_cfi_advance_working,\n \t.cfi_adjust_cfa_offset 128\n \t.cfi_endproc],\n [[\n-if $gcc_cv_readelf -wf conftest.o 2>/dev/null \\\n+if $gcc_cv_objdump -Wf conftest.o 2>/dev/null \\\n     | grep 'DW_CFA_advance_loc[24]:[ \t][ \t]*75040[ \t]' >/dev/null; then\n    gcc_cv_as_cfi_advance_working=yes\n fi\n ]])\n else\n-  # no readelf, err on the side of caution\n+  # no objdump, err on the side of caution\n   gcc_cv_as_cfi_advance_working=no\n fi\n AC_DEFINE_UNQUOTED(HAVE_GAS_CFI_DIRECTIVE,\n@@ -2445,7 +2445,23 @@ gcc_GAS_CHECK_FEATURE([cfi sections directive],\n [\t.text\n \t.cfi_sections .debug_frame, .eh_frame\n \t.cfi_startproc\n-\t.cfi_endproc])\n+\t.cfi_endproc],\n+[case $target_os in\n+  win32 | pe | cygwin* | mingw32* | uwin*)\n+    # Need to check that we generated the correct relocation for the\n+    # .debug_frame section.  This was fixed for binutils 2.21.\n+    gcc_cv_as_cfi_sections_directive=no\n+    if test \"x$gcc_cv_objdump\" != x; then\n+     if $gcc_cv_objdump -j .debug_frame -r conftest.o 2>/dev/null | \\\n+\tgrep secrel > /dev/null; then\n+      gcc_cv_as_cfi_sections_directive=yes\n+     fi\n+    fi\n+    ;;\n+  *)\n+    gcc_cv_as_cfi_sections_directive=yes\n+    ;;\n+esac])\n AC_DEFINE_UNQUOTED(HAVE_GAS_CFI_SECTIONS_DIRECTIVE,\n   [`if test $gcc_cv_as_cfi_sections_directive = yes;\n     then echo 1; else echo 0; fi`],"}]}