{"sha": "04fd40b9d15b6374d3508259c86ed88d773bd988", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRmZDQwYjlkMTViNjM3NGQzNTA4MjU5Yzg2ZWQ4OGQ3NzNiZDk4OA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2000-12-13T19:47:04Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-12-13T19:47:04Z"}, "message": "Tests by Zack Weinberg <zackw@stanford.edu>.\n\n\t* gcc.dg/cpp/defined.c: Update.\n\t* gcc.dg/cpp/defined_trad.c: New tests.\n\nFrom-SVN: r38229", "tree": {"sha": "a1ac67bfdd95123716676b3574f9c36b696889b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1ac67bfdd95123716676b3574f9c36b696889b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04fd40b9d15b6374d3508259c86ed88d773bd988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04fd40b9d15b6374d3508259c86ed88d773bd988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04fd40b9d15b6374d3508259c86ed88d773bd988", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04fd40b9d15b6374d3508259c86ed88d773bd988/comments", "author": null, "committer": null, "parents": [{"sha": "a65fd88acf37bf473a7ac7bc8dce419730d8d9ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65fd88acf37bf473a7ac7bc8dce419730d8d9ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a65fd88acf37bf473a7ac7bc8dce419730d8d9ea"}], "stats": {"total": 120, "additions": 115, "deletions": 5}, "files": [{"sha": "d903cc938fdd19140bd63dcbccf68de8de03e20f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fd40b9d15b6374d3508259c86ed88d773bd988/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fd40b9d15b6374d3508259c86ed88d773bd988/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04fd40b9d15b6374d3508259c86ed88d773bd988", "patch": "@@ -1,3 +1,10 @@\n+2000-12-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\tTests by Zack Weinberg <zackw@stanford.edu>.\n+\n+\t* gcc.dg/cpp/defined.c: Update.\n+\t* gcc.dg/cpp/defined_trad.c: New tests.\n+\n 2000-12-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/trad-direct.c: Update."}, {"sha": "de1ef2993bc52eb5b8d27e6af517e2eeb911e886", "filename": "gcc/testsuite/gcc.dg/cpp/defined.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fd40b9d15b6374d3508259c86ed88d773bd988/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fd40b9d15b6374d3508259c86ed88d773bd988/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined.c?ref=04fd40b9d15b6374d3508259c86ed88d773bd988", "patch": "@@ -4,24 +4,65 @@\n \n /* Tests behaviour of the defined operator.  */\n \n-/*  Source: Neil Booth, 29 Oct 2000.  */\n+/*  Source: Neil Booth, 29 Oct 2000, Zack Weinberg 11 Dec 2000.  */\n+\n+#define defined\t\t\t/* { dg-error \"defined\" } */\n \n /* No diagnostics, though you could argue there should be.  */\n #if defined defined\n #error defined is defined!\n #endif\n \n-#define defined\t\t\t/* { dg-error \"defined\" } */\n-\n #define is_Z_defined defined Z\n \n+#if defined Z\n+#error Z is not defined\n+#endif\n+\n+/* The behaviour of \"defined\" when it comes from a macro expansion is\n+   now documented.  */\n+#if is_Z_defined\t\t/* { dg-warning \"macro expansion\" } */\n+#error Macro expanding into defined operator test 1\n+#endif\n+\n+#define Z\n+\n+#if !defined Z\n+#error Z is defined\n+#endif\n+\n+#if !is_Z_defined\t\t/* { dg-warning \"macro expansion\" } */\n+#error Macro expanding into defined operator test 2\n+#endif\n+\n+#undef is_Z_defined\n+#undef Z\n+\n+/* Do all the tests over again with the () form of defined.  */\n+\n+/* No diagnostics, though you could argue there should be.  */\n+#if defined(defined)\n+#error defined is defined!\n+#endif\n+\n+#define is_Z_defined defined ( Z )\n+\n+#if defined(Z)\n+#error Z is not defined\n+#endif\n+\n /* The behaviour of \"defined\" when it comes from a macro expansion is\n    now documented.  */\n #if is_Z_defined\t\t/* { dg-warning \"macro expansion\" } */\n #error Macro expanding into defined operator test 1\n #endif\n \n #define Z\n+\n+#if !defined(Z)\n+#error Z is defined\n+#endif\n+\n #if !is_Z_defined\t\t/* { dg-warning \"macro expansion\" } */\n #error Macro expanding into defined operator test 2\n #endif"}, {"sha": "666fd712f5adf71c4a1a1936e57cfb54fc6f8184", "filename": "gcc/testsuite/gcc.dg/cpp/defined_trad.c", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fd40b9d15b6374d3508259c86ed88d773bd988/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined_trad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fd40b9d15b6374d3508259c86ed88d773bd988/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined_trad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined_trad.c?ref=04fd40b9d15b6374d3508259c86ed88d773bd988", "patch": "@@ -3,9 +3,10 @@\n /* { dg-do preprocess } */\n /* { dg-options \"-traditional\" } */\n \n-/* Tests tradcpp0 with defined.  */\n+/* Tests tradcpp0 with defined.  The defined operator in traditional C\n+   works just the same as the defined operator in Standard C.  */\n \n-/* Source: Glibc, 11 Dec 2000.  */\n+/* Source: Zack Weinberg, glibc, Neil Booth 11 Dec 2000.  */\n \n #if defined REGPARMS\n #error REGPARMS should not be defined\n@@ -15,3 +16,64 @@\n #if !defined REGPARMS\n #error REGPARMS should be defined\n #endif\n+\n+#define defined\t\t\t/* { dg-error \"defined\" } */\n+\n+/* No diagnostics, though you could argue there should be.  */\n+#if defined defined\n+#error defined is defined!\n+#endif\n+\n+#define is_Z_defined defined Z\n+\n+#if defined Z\n+#error Z is not defined\n+#endif\n+\n+/* The behaviour of \"defined\" when it comes from a macro expansion is\n+   now documented.  */\n+#if is_Z_defined\n+#error Macro expanding into defined operator test 1\n+#endif\n+\n+#define Z\n+\n+#if !defined Z\n+#error Z is defined\n+#endif\n+\n+#if !is_Z_defined\n+#error Macro expanding into defined operator test 2\n+#endif\n+\n+#undef is_Z_defined\n+#undef Z\n+\n+/* Do all the tests over again with the () form of defined.  */\n+\n+/* No diagnostics, though you could argue there should be.  */\n+#if defined(defined)\n+#error defined is defined!\n+#endif\n+\n+#define is_Z_defined defined ( Z )\n+\n+#if defined(Z)\n+#error Z is not defined\n+#endif\n+\n+/* The behaviour of \"defined\" when it comes from a macro expansion is\n+   now documented.  */\n+#if is_Z_defined\n+#error Macro expanding into defined operator test 1\n+#endif\n+\n+#define Z\n+\n+#if !defined(Z)\n+#error Z is defined\n+#endif\n+\n+#if !is_Z_defined\n+#error Macro expanding into defined operator test 2\n+#endif"}]}