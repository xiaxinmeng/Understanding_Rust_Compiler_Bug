{"sha": "9838be08d03228cd05701542dfdd2297f816a834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgzOGJlMDhkMDMyMjhjZDA1NzAxNTQyZGZkZDIyOTdmODE2YTgzNA==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2006-12-07T23:40:46Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-12-07T23:40:46Z"}, "message": "spu-c.c (spu_build_overload_builtin): Delete.\n\n2006-12-07  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * config/spu/spu-c.c (spu_build_overload_builtin): Delete.\n        (spu_resolve_overloaded_builtin): Check for non scalar instead\n        of vector type and check the function call argument type also for non scalar.\n        Call build_function_call instead of spu_build_overload_builtin.\n\n2006-12-07  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * gcc.target/spu: New directory.\n        * gcc.target/spu/spu.exp: New file.\n        * gcc.target/spu/intrinsics-1.c: New test.\n\nFrom-SVN: r119637", "tree": {"sha": "b3ffe28627015610778123f9b24441be20a6d670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3ffe28627015610778123f9b24441be20a6d670"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9838be08d03228cd05701542dfdd2297f816a834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9838be08d03228cd05701542dfdd2297f816a834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9838be08d03228cd05701542dfdd2297f816a834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9838be08d03228cd05701542dfdd2297f816a834/comments", "author": null, "committer": null, "parents": [{"sha": "9dc5f9bad9be09c039a68047121d80a2d53caa63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc5f9bad9be09c039a68047121d80a2d53caa63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dc5f9bad9be09c039a68047121d80a2d53caa63"}], "stats": {"total": 107, "additions": 79, "deletions": 28}, "files": [{"sha": "25a1e7c001f373549cf2973ff7aab2c048ecce59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9838be08d03228cd05701542dfdd2297f816a834/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9838be08d03228cd05701542dfdd2297f816a834/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9838be08d03228cd05701542dfdd2297f816a834", "patch": "@@ -1,3 +1,10 @@\n+2006-12-07  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* config/spu/spu-c.c (spu_build_overload_builtin): Delete.\n+\t(spu_resolve_overloaded_builtin): Check for non scalar instead\n+\tof vector type and check the function call argument type also for non scalar.\n+\tCall build_function_call instead of spu_build_overload_builtin.\n+\n 2006-12-07  Trevor Smigiel  <trevor_smigiel@playstation.sony.com>\n \n \t* config/spu/spu.c (array_to_constant): Correct the order of arguments"}, {"sha": "d52d5242c7ff2d6b573c478266d0f29e46f0304c", "filename": "gcc/config/spu/spu-c.c", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9838be08d03228cd05701542dfdd2297f816a834/gcc%2Fconfig%2Fspu%2Fspu-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9838be08d03228cd05701542dfdd2297f816a834/gcc%2Fconfig%2Fspu%2Fspu-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-c.c?ref=9838be08d03228cd05701542dfdd2297f816a834", "patch": "@@ -36,37 +36,14 @@\n #include \"spu-builtins.h\"\n \f\n \n-/* Helper for spu_resolve_overloaded_builtin.  */\n-static tree\n-spu_build_overload_builtin (tree fndecl, tree fnargs)\n-{\n-  tree param, param_type;\n-  tree ret_type = TREE_TYPE (TREE_TYPE (fndecl));\n-  tree arg, arglist = NULL_TREE;\n-  tree val;\n-\n-  for (param = TYPE_ARG_TYPES (TREE_TYPE (fndecl)), arg = fnargs;\n-       param != void_list_node;\n-       param = TREE_CHAIN (param), arg = TREE_CHAIN (arg))\n-    {\n-      gcc_assert (arg != NULL_TREE);\n-      param_type = TREE_VALUE (param);\n-      val = default_conversion (TREE_VALUE (arg));\n-      val = fold_convert (param_type, val);\n-\n-      arglist = tree_cons (NULL_TREE, val, arglist);\n-    }\n-  gcc_assert (arg == NULL_TREE);\n-  arglist = nreverse (arglist);\n-\n-  return fold_convert (ret_type, build_function_call_expr (fndecl, arglist));\n-}\n-\n /* target hook for resolve_overloaded_builtin(). Returns a function call\n    RTX if we can resolve the overloaded builtin */\n tree\n spu_resolve_overloaded_builtin (tree fndecl, tree fnargs)\n {\n+#define SCALAR_TYPE_P(t) (INTEGRAL_TYPE_P (t) \\\n+\t\t\t  || SCALAR_FLOAT_TYPE_P (t) \\\n+\t\t\t  || POINTER_TYPE_P (t))\n   spu_function_code new_fcode, fcode =\n     DECL_FUNCTION_CODE (fndecl) - END_BUILTINS;\n   struct spu_builtin_description *desc;\n@@ -119,7 +96,8 @@ spu_resolve_overloaded_builtin (tree fndecl, tree fnargs)\n \t     checking/promotions for scalar arguments, except for the\n \t     first argument of intrinsics which don't have a vector\n \t     parameter. */\n-\t  if ((TREE_CODE (param_type) == VECTOR_TYPE\n+\t  if ((!SCALAR_TYPE_P (param_type)\n+\t       || !SCALAR_TYPE_P (arg_type)\n \t       || ((fcode == SPU_SPLATS || fcode == SPU_PROMOTE\n \t\t    || fcode == SPU_HCMPEQ || fcode == SPU_HCMPGT\n \t\t    || fcode == SPU_MASKB || fcode == SPU_MASKH\n@@ -149,7 +127,8 @@ spu_resolve_overloaded_builtin (tree fndecl, tree fnargs)\n       return error_mark_node;\n     }\n \n-  return spu_build_overload_builtin (match, fnargs);\n+  return build_function_call (match, fnargs);\n+#undef SCALAR_TYPE_P\n }\n \n "}, {"sha": "c5ab9b52fa7b09b7b52f15263fe2cbb7b27f37d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9838be08d03228cd05701542dfdd2297f816a834/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9838be08d03228cd05701542dfdd2297f816a834/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9838be08d03228cd05701542dfdd2297f816a834", "patch": "@@ -1,3 +1,9 @@\n+2006-12-07  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* gcc.target/spu: New directory.\n+\t* gcc.target/spu/spu.exp: New file.\n+\t* gcc.target/spu/intrinsics-1.c: New test.\n+\n 2006-12-07  Lee Millward  <lee.millward@codesourcery.com>\n \n         PR c++/29980"}, {"sha": "08458a5219cedc358e63a4b01ccd0b93ef3078a7", "filename": "gcc/testsuite/gcc.target/spu/intrinsics-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9838be08d03228cd05701542dfdd2297f816a834/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fintrinsics-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9838be08d03228cd05701542dfdd2297f816a834/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fintrinsics-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fintrinsics-1.c?ref=9838be08d03228cd05701542dfdd2297f816a834", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+#include <spu_intrinsics.h>\n+/* With this intrinsics section, we used to ICE as we would try\n+   to convert from an vector to an integer type.  */\n+void f(void)\n+{\n+  vec_uint4 gt, N;\n+  vec_int4 a;\n+  int *a1;\n+  _Complex double b;\n+  gt = spu_cmpgt(a, N); /* { dg-error \"parameter list\" } */\n+  gt = spu_cmpgt(a, a1); /* { dg-error \"integer from pointer without a cast\" } */\n+  gt = spu_cmpgt(a, b); /* { dg-error \"parameter list\" } */\n+  gt = spu_cmpgt(a, a);\n+  /* Remove this xfail once, we reject implict conversions between vector types.  */\n+  a = spu_cmpgt(a, a); /* { dg-error \"\" \"\" { xfail *-*-* } } */\n+}"}, {"sha": "b766986947273305b50412bba302e2abbc08ebba", "filename": "gcc/testsuite/gcc.target/spu/spu.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9838be08d03228cd05701542dfdd2297f816a834/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fspu.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9838be08d03228cd05701542dfdd2297f816a834/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fspu.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fspu.exp?ref=9838be08d03228cd05701542dfdd2297f816a834", "patch": "@@ -0,0 +1,41 @@\n+#   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  \n+\n+# GCC testsuite that uses the 'dg.exp' driver.\n+\n+# Exit immediately if this isn't a SPU target.\n+if { ![istarget spu-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize 'dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}]}