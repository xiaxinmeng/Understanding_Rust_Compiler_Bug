{"sha": "bc9c18c3193347c70989e21c036cc5c298021569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM5YzE4YzMxOTMzNDdjNzA5ODllMjFjMDM2Y2M1YzI5ODAyMTU2OQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-06-07T23:50:31Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-06-07T23:50:31Z"}, "message": "simplify-rtx.c (simplify_gen_relational): Simplify RTL of the form (ne (comp x y) 0) into (comp x y) where comp is a...\n\n\n\t* simplify-rtx.c (simplify_gen_relational): Simplify RTL of the form\n\t(ne (comp x y) 0) into (comp x y) where comp is a comparison code.\n\tSimplify (eq (comp x y) 0) into (revcomp x y) if the sense of the\n\tcomparison code comp can be reversed.\n\nFrom-SVN: r54357", "tree": {"sha": "5f3c718932f00c23a8fca6901ef2f8a9bc17139e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f3c718932f00c23a8fca6901ef2f8a9bc17139e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc9c18c3193347c70989e21c036cc5c298021569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9c18c3193347c70989e21c036cc5c298021569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc9c18c3193347c70989e21c036cc5c298021569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9c18c3193347c70989e21c036cc5c298021569/comments", "author": null, "committer": null, "parents": [{"sha": "437f1df1afacb10132608f3cf27f4289c1bdbe1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437f1df1afacb10132608f3cf27f4289c1bdbe1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437f1df1afacb10132608f3cf27f4289c1bdbe1c"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "f07f710d1c496a5890f45ed69d8aaf8d6e850a1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc9c18c3193347c70989e21c036cc5c298021569/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc9c18c3193347c70989e21c036cc5c298021569/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc9c18c3193347c70989e21c036cc5c298021569", "patch": "@@ -1,3 +1,10 @@\n+2002-06-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_gen_relational): Simplify RTL of the form\n+\t(ne (comp x y) 0) into (comp x y) where comp is a comparison code.\n+\tSimplify (eq (comp x y) 0) into (revcomp x y) if the sense of the\n+\tcomparison code comp can be reversed.\n+\n 2002-06-07  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold) [EQ_EXPR]:  Place both integer and real"}, {"sha": "5db501eccfcad155f076e45bb7582fe5771448ac", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc9c18c3193347c70989e21c036cc5c298021569/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc9c18c3193347c70989e21c036cc5c298021569/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=bc9c18c3193347c70989e21c036cc5c298021569", "patch": "@@ -232,10 +232,31 @@ simplify_gen_relational (code, mode, cmp_mode, op0, op1)\n   if ((tem = simplify_relational_operation (code, cmp_mode, op0, op1)) != 0)\n     return tem;\n \n+  /* For the following tests, ensure const0_rtx is op1.  */\n+  if (op0 == const0_rtx && swap_commutative_operands_p (op0, op1))\n+    tem = op0, op0 = op1, op1 = tem, code = swap_condition (code);\n+\n   /* If op0 is a compare, extract the comparison arguments from it.  */\n   if (GET_CODE (op0) == COMPARE && op1 == const0_rtx)\n     op1 = XEXP (op0, 1), op0 = XEXP (op0, 0);\n \n+  /* If op0 is a comparison, extract the comparison arguments form it.  */\n+  if (code == NE && op1 == const0_rtx\n+      && GET_RTX_CLASS (GET_CODE (op0)) == '<')\n+    return op0;\n+  else if (code == EQ && op1 == const0_rtx)\n+    {\n+      /* The following tests GET_RTX_CLASS (GET_CODE (op0)) == '<'.  */\n+      enum rtx_code new = reversed_comparison_code (op0, NULL_RTX);\n+      if (new != UNKNOWN)\n+        {\n+\t  code = new;\n+\t  mode = cmp_mode;\n+\t  op1 = XEXP (op0, 1);\n+\t  op0 = XEXP (op0, 0);\n+        }\n+    }\n+\n   /* Put complex operands first and constants second.  */\n   if (swap_commutative_operands_p (op0, op1))\n     tem = op0, op0 = op1, op1 = tem, code = swap_condition (code);"}]}