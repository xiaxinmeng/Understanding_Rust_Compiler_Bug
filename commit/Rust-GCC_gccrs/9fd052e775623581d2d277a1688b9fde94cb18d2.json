{"sha": "9fd052e775623581d2d277a1688b9fde94cb18d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZkMDUyZTc3NTYyMzU4MWQyZDI3N2ExNjg4YjlmZGU5NGNiMThkMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2019-11-22T14:37:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-22T14:37:37Z"}, "message": "Release memory-block-pool memory back to malloc.\n\n\t* ggc-page.c (ggc_collect): Call memory_block_pool::trim.\n\t* memory-block.cc (memory_block_pool::clear_free_list): Rename to ...\n\t(memory_block_pool::reduce_free_list): ... this one.\n\t(memory_block_pool::trim): New static function.\n\t* memory-block.h (memory_block_pool::freelist_size): New constant\n\t(memory_block_pool::clear_free_list): Rename to ...\n\t(memory_block_pool::reduce_free_list): ... this one.\n\t(memory_block_pool::trim): Declare.\n\t\n\t* lto.c (lto_wpa_write_files): Call memory_block_pool::trim.\n\nFrom-SVN: r278616", "tree": {"sha": "7f4801c5d1bcb5f9fda27cdbfe254577322eeec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f4801c5d1bcb5f9fda27cdbfe254577322eeec0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fd052e775623581d2d277a1688b9fde94cb18d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd052e775623581d2d277a1688b9fde94cb18d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd052e775623581d2d277a1688b9fde94cb18d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd052e775623581d2d277a1688b9fde94cb18d2/comments", "author": null, "committer": null, "parents": [{"sha": "f2f3dbc67b85af0f1b6c6feb529a67baf011939c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f3dbc67b85af0f1b6c6feb529a67baf011939c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f3dbc67b85af0f1b6c6feb529a67baf011939c"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "62ddef2dd31af7b2ac463e3fe41448c99d251763", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fd052e775623581d2d277a1688b9fde94cb18d2", "patch": "@@ -1,3 +1,14 @@\n+2019-11-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ggc-page.c (ggc_collect): Call memory_block_pool::trim.\n+\t* memory-block.cc (memory_block_pool::clear_free_list): Rename to ...\n+\t(memory_block_pool::reduce_free_list): ... this one.\n+\t(memory_block_pool::trim): New static function.\n+\t* memory-block.h (memory_block_pool::freelist_size): New constant\n+\t(memory_block_pool::clear_free_list): Rename to ...\n+\t(memory_block_pool::reduce_free_list): ... this one.\n+\t(memory_block_pool::trim): Declare.\n+\n 2019-11-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-stmts.c (vect_model_simple_cost): Take an optional"}, {"sha": "4a6a7c9598ed98b1102642e3f0c5a0787a268b8d", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=9fd052e775623581d2d277a1688b9fde94cb18d2", "patch": "@@ -2186,6 +2186,9 @@ ggc_collect (void)\n   float allocated_last_gc =\n     MAX (G.allocated_last_gc, (size_t)param_ggc_min_heapsize * 1024);\n \n+  /* It is also good time to get memory block pool into limits.  */\n+  memory_block_pool::trim ();\n+\n   float min_expand = allocated_last_gc * param_ggc_min_expand / 100;\n   if (G.allocated < allocated_last_gc + min_expand && !ggc_force_collect)\n     return;"}, {"sha": "cdf6964fbb7995972a66ab26fe86c0c356b38ed0", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=9fd052e775623581d2d277a1688b9fde94cb18d2", "patch": "@@ -1,3 +1,7 @@\n+2019-11-22  Jan Hubicka  <jh@suse.cz>\n+\t\n+\t* lto.c (lto_wpa_write_files): Call memory_block_pool::trim.\n+\n 2019-11-14  Martin Liska  <mliska@suse.cz>\n \n \t* Make-lang.in: Remove wrong dependency"}, {"sha": "c9e0fcd8a8e77bc87ba826dedfb5a4c29d13d40c", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=9fd052e775623581d2d277a1688b9fde94cb18d2", "patch": "@@ -387,6 +387,7 @@ lto_wpa_write_files (void)\n       temp_priority.safe_push (part->insns);\n       temp_filenames.safe_push (xstrdup (temp_filename));\n     }\n+  memory_block_pool::trim (0);\n \n   for (int set = 0; set < MAX (lto_parallelism, 1); set++)\n     {"}, {"sha": "ebf8cdd1e534064ef00ee557466bee39de5da555", "filename": "gcc/memory-block.cc", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2Fmemory-block.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2Fmemory-block.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmemory-block.cc?ref=9fd052e775623581d2d277a1688b9fde94cb18d2", "patch": "@@ -28,15 +28,30 @@ memory_block_pool memory_block_pool::instance;\n \n memory_block_pool::memory_block_pool () : m_blocks (NULL) {}\n \n-/* Return all blocks from free list to the OS.  */\n+/* Reduce free list to NUM blocks and return remaining to malloc.  */\n void\n-memory_block_pool::clear_free_list ()\n+memory_block_pool::reduce_free_list (int num)\n {\n-  while (m_blocks)\n+  block_list **blocks = &m_blocks;\n+\n+  /* First skip NUM blocks.  */\n+\n+  for (;num > 0 && *blocks; num--)\n+    blocks = &(*blocks)->m_next;\n+\n+  if (!*blocks)\n+    return;\n+\n+  /* And free the remainder of them.  */\n+\n+  block_list *to_free = *blocks;\n+  *blocks = NULL;\n+\n+  while (to_free)\n     {\n-      block_list *next = m_blocks->m_next;\n-      XDELETEVEC (m_blocks);\n-      m_blocks = next;\n+      block_list *next = to_free->m_next;\n+      XDELETEVEC (to_free);\n+      to_free = next;\n     }\n }\n \n@@ -62,3 +77,10 @@ mempool_obstack_chunk_free (void *chunk)\n   else\n     XDELETEVEC (chunk);\n }\n+\n+/* Return allocated memory back to malloc (and to system).  */\n+void\n+memory_block_pool::trim (int num)\n+{\n+  instance.reduce_free_list (num);\n+}"}, {"sha": "a11465b20d6ef6107669b9afc4b69df66debda02", "filename": "gcc/memory-block.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2Fmemory-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd052e775623581d2d277a1688b9fde94cb18d2/gcc%2Fmemory-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmemory-block.h?ref=9fd052e775623581d2d277a1688b9fde94cb18d2", "patch": "@@ -28,12 +28,15 @@ class memory_block_pool\n public:\n   /* Blocks have fixed size.  This is necessary for sharing.  */\n   static const size_t block_size = 64 * 1024;\n+  /* Number of blocks we keep in the freelists.  */\n+  static const size_t freelist_size = 1024 * 1024 / block_size;\n \n   memory_block_pool ();\n \n   static inline void *allocate () ATTRIBUTE_MALLOC;\n   static inline void release (void *);\n-  void clear_free_list ();\n+  static void trim (int nblocks = freelist_size);\n+  void reduce_free_list (int);\n \n private:\n   /* memory_block_pool singleton instance, defined in memory-block.cc.  */"}]}