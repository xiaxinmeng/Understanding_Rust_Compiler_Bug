{"sha": "adc81ec81db382128869cd62ca4e48bd87d1d880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRjODFlYzgxZGIzODIxMjg4NjljZDYyY2E0ZTQ4YmQ4N2QxZDg4MA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-07-05T07:02:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-05T07:02:37Z"}, "message": "[Ada] Crash on exported build-in-place function\n\nThis patch fixes a bug where if a function is build-in-place, and is\nexported, and contains an extended_return_statement whose object is\ninitialized with another build-in-place function call, then the compiler\nwill crash.\n\n2019-07-05  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (Is_Build_In_Place_Function): Narrow the check for\n\tHas_Foreign_Convention to the imported case only.  If a\n\tbuild-in-place function is exported, and called from Ada code,\n\tbuild-in-place protocols should be used.\n\ngcc/testsuite/\n\n\t* gnat.dg/bip_export.adb, gnat.dg/bip_export.ads: New testcase.\n\nFrom-SVN: r273113", "tree": {"sha": "5c8f54e936d85b4dc0ac2d46852173e695fa850b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c8f54e936d85b4dc0ac2d46852173e695fa850b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adc81ec81db382128869cd62ca4e48bd87d1d880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc81ec81db382128869cd62ca4e48bd87d1d880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adc81ec81db382128869cd62ca4e48bd87d1d880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc81ec81db382128869cd62ca4e48bd87d1d880/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7145d799a347800ea6ef5c5e3114db11469137a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7145d799a347800ea6ef5c5e3114db11469137a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7145d799a347800ea6ef5c5e3114db11469137a8"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "880f2610bf44d358ae1cfdde942ae775d9606b7e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adc81ec81db382128869cd62ca4e48bd87d1d880/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adc81ec81db382128869cd62ca4e48bd87d1d880/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=adc81ec81db382128869cd62ca4e48bd87d1d880", "patch": "@@ -1,3 +1,10 @@\n+2019-07-05  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Build_In_Place_Function): Narrow the check for\n+\tHas_Foreign_Convention to the imported case only.  If a\n+\tbuild-in-place function is exported, and called from Ada code,\n+\tbuild-in-place protocols should be used.\n+\n 2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.adb (Encloing_Subprogram): If Enclosing_Dynamic_Scope"}, {"sha": "db9484f57f53a15c37ce5a7e0425f1c0eeb1841f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adc81ec81db382128869cd62ca4e48bd87d1d880/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adc81ec81db382128869cd62ca4e48bd87d1d880/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=adc81ec81db382128869cd62ca4e48bd87d1d880", "patch": "@@ -7765,22 +7765,20 @@ package body Exp_Ch6 is\n \n       --  For now we test whether E denotes a function or access-to-function\n       --  type whose result subtype is inherently limited. Later this test\n-      --  may be revised to allow composite nonlimited types. Functions with\n-      --  a foreign convention or whose result type has a foreign convention\n-      --  never qualify.\n+      --  may be revised to allow composite nonlimited types.\n \n       if Ekind_In (E, E_Function, E_Generic_Function)\n         or else (Ekind (E) = E_Subprogram_Type\n                   and then Etype (E) /= Standard_Void_Type)\n       then\n-         --  Note: If the function has a foreign convention, it cannot build\n-         --  its result in place, so you're on your own. On the other hand,\n-         --  if only the return type has a foreign convention, its layout is\n-         --  intended to be compatible with the other language, but the build-\n-         --  in place machinery can ensure that the object is not copied.\n+         --  If the function is imported from a foreign language, we don't do\n+         --  build-in-place. Note that Import (Ada) functions can do\n+         --  build-in-place. Note that it is OK for a build-in-place function\n+         --  to return a type with a foreign convention; the build-in-place\n+         --  machinery will ensure there is no copying.\n \n          return Is_Build_In_Place_Result_Type (Etype (E))\n-           and then not Has_Foreign_Convention (E)\n+           and then not (Has_Foreign_Convention (E) and then Is_Imported (E))\n            and then not Debug_Flag_Dot_L;\n       else\n          return False;"}, {"sha": "3bd1aab71955904f991db475805652c8d4b3d5e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adc81ec81db382128869cd62ca4e48bd87d1d880/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adc81ec81db382128869cd62ca4e48bd87d1d880/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=adc81ec81db382128869cd62ca4e48bd87d1d880", "patch": "@@ -1,3 +1,7 @@\n+2019-07-05  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat.dg/bip_export.adb, gnat.dg/bip_export.ads: New testcase.\n+\n 2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/aggr25.adb, gnat.dg/aggr25.ads: New testcase."}, {"sha": "2935a84424de231b0a91a5804e719202e1792e2d", "filename": "gcc/testsuite/gnat.dg/bip_export.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adc81ec81db382128869cd62ca4e48bd87d1d880/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_export.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adc81ec81db382128869cd62ca4e48bd87d1d880/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_export.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_export.adb?ref=adc81ec81db382128869cd62ca4e48bd87d1d880", "patch": "@@ -0,0 +1,15 @@\n+--  { dg-do compile }\n+\n+package body Bip_Export is\n+   function F return T is\n+   begin\n+      return Result : constant T := G do\n+         null;\n+      end return;\n+   end F;\n+\n+   function G return T is\n+   begin\n+      return (null record);\n+   end G;\n+end Bip_Export;"}, {"sha": "dbbecf5ae804abd26acf8c0215a3ecfe74341085", "filename": "gcc/testsuite/gnat.dg/bip_export.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adc81ec81db382128869cd62ca4e48bd87d1d880/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_export.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adc81ec81db382128869cd62ca4e48bd87d1d880/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_export.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_export.ads?ref=adc81ec81db382128869cd62ca4e48bd87d1d880", "patch": "@@ -0,0 +1,6 @@\n+package Bip_Export is\n+   type T is limited null record;\n+   function F return T;\n+   pragma Export (C, F);\n+   function G return T;\n+end Bip_Export;"}]}