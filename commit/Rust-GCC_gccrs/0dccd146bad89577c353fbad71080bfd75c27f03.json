{"sha": "0dccd146bad89577c353fbad71080bfd75c27f03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRjY2QxNDZiYWQ4OTU3N2MzNTNmYmFkNzEwODBiZmQ3NWMyN2YwMw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2002-04-07T12:18:58Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-04-07T12:18:58Z"}, "message": "Hashtable.java (contains): Remove NullPointer check.\n\n        * java/util/Hashtable.java (contains): Remove NullPointer check.\n        (containsValue): Add NullPointer check.\n        (remove): Always throw NullPointerException when key is null.\n\nFrom-SVN: r51994", "tree": {"sha": "77f4884bfef9be9087d59584f2556870d7992287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77f4884bfef9be9087d59584f2556870d7992287"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dccd146bad89577c353fbad71080bfd75c27f03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dccd146bad89577c353fbad71080bfd75c27f03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dccd146bad89577c353fbad71080bfd75c27f03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dccd146bad89577c353fbad71080bfd75c27f03/comments", "author": null, "committer": null, "parents": [{"sha": "3b1d8b3be386714dde69b94379162954cbfeaed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b1d8b3be386714dde69b94379162954cbfeaed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b1d8b3be386714dde69b94379162954cbfeaed7"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "a06b98ac5d7750f524dfe64813cb3b2765defc73", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dccd146bad89577c353fbad71080bfd75c27f03/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dccd146bad89577c353fbad71080bfd75c27f03/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0dccd146bad89577c353fbad71080bfd75c27f03", "patch": "@@ -1,3 +1,10 @@\n+2002-04-07  Mark Wielaard <mark@klomp.org>\n+\n+\t* java/util/Hashtable.java (contains): Remove NullPointer check.\n+\t(containsValue): Add NullPointer check.\n+\t(remove): Always throw NullPointerException when key\n+\tis null.\n+\n 2002-04-07  Adam King <aking@dreammechanics.com>\n \n \t* java/lang/natSystem.cc (init_properties): Call new function\n@@ -25,7 +32,7 @@\n \n 2002-04-05  Mark Wielaard <mark@klomp.org>\n \n-\t* java/util/ArrayList.jva (removeRange): If toIndex == fromIndex do\n+\t* java/util/ArrayList.java (removeRange): If toIndex == fromIndex do\n \tnothing, if toIndex < fromIndex throw IndexOutIfBoundsException.\n \n 2002-04-05  Adam Megacz <adam@xwt.org>"}, {"sha": "71ec4b809c7951a0c83a0e3c1e9881668711a711", "filename": "libjava/java/util/Hashtable.java", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dccd146bad89577c353fbad71080bfd75c27f03/libjava%2Fjava%2Futil%2FHashtable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dccd146bad89577c353fbad71080bfd75c27f03/libjava%2Fjava%2Futil%2FHashtable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FHashtable.java?ref=0dccd146bad89577c353fbad71080bfd75c27f03", "patch": "@@ -322,10 +322,6 @@ public Enumeration elements()\n    * <code>containsValue()</code>, and is O(n).\n    * <p>\n    *\n-   * Note: this is one of the <i>old</i> Hashtable methods which does\n-   * not like null values; it throws NullPointerException if the\n-   * supplied parameter is null.\n-   *\n    * @param value the value to search for in this Hashtable\n    * @return true if at least one key maps to the value\n    * @throws NullPointerException if <code>value</code> is null\n@@ -334,19 +330,17 @@ public Enumeration elements()\n    */\n   public synchronized boolean contains(Object value)\n   {\n-    // Check if value is null.\n-    if (value == null)\n-      throw new NullPointerException();\n     return containsValue(value);\n   }\n \n   /**\n    * Returns true if this Hashtable contains a value <code>o</code>, such that\n    * <code>o.equals(value)</code>. This is the new API for the old\n-   * <code>contains()</code>, except that it is forgiving of null.\n+   * <code>contains()</code>.\n    *\n    * @param value the value to search for in this Hashtable\n    * @return true if at least one key maps to the value\n+   * @throws NullPointerException if <code>value</code> is null\n    * @see #contains(Object)\n    * @see #containsKey(Object)\n    * @since 1.2\n@@ -358,11 +352,16 @@ public boolean containsValue(Object value)\n         HashEntry e = buckets[i];\n         while (e != null)\n           {\n-            if (AbstractCollection.equals(value, e.value))\n+            if (value.equals(e.value))\n               return true;\n             e = e.next;\n           }\n       }\n+\n+    // Must throw on null argument even if the table is empty\n+    if (value == null)\n+      throw new NullPointerException();\n+\n     return false;\n   }\n \n@@ -468,17 +467,12 @@ public synchronized Object put(Object key, Object value)\n    * Removes from the table and returns the value which is mapped by the\n    * supplied key. If the key maps to nothing, then the table remains\n    * unchanged, and <code>null</code> is returned.\n-   * <b>NOTE:</b>Map.remove and Dictionary.remove disagree whether null\n-   * is a valid parameter; at the moment, this implementation obeys Map.remove,\n-   * and silently ignores null.\n    *\n    * @param key the key used to locate the value to remove\n    * @return whatever the key mapped to, if present\n    */\n   public synchronized Object remove(Object key)\n   {\n-    if (key == null)\n-      return null;\n     int idx = hash(key);\n     HashEntry e = buckets[idx];\n     HashEntry last = null;"}]}