{"sha": "8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5M2E5YzgwYzkzMTRjYmQ2NmQ0NWRlOTA4YzQ1ZWE4ZWQ1ZGJjMQ==", "commit": {"author": {"name": "Sergei Dyshel", "email": "sergeid@il.ibm.com", "date": "2009-06-18T16:08:00Z"}, "committer": {"name": "Razya Ladelsky", "email": "razya@gcc.gnu.org", "date": "2009-06-18T16:08:00Z"}, "message": "see removal\n\nFrom-SVN: r148664", "tree": {"sha": "5e1a70e3d3702b6c52be6f7254ee4c1d5086632d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e1a70e3d3702b6c52be6f7254ee4c1d5086632d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/comments", "author": null, "committer": null, "parents": [{"sha": "2a45675fd08dd485d1766008982995d23c6a3e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a45675fd08dd485d1766008982995d23c6a3e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a45675fd08dd485d1766008982995d23c6a3e85"}], "stats": {"total": 3943, "additions": 4, "deletions": 3939}, "files": [{"sha": "e58f0666416ce247a09313560fdb7c3f863d2703", "filename": "gcc/Makefile.in", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "patch": "@@ -1215,7 +1215,6 @@ OBJS-common = \\\n \tsched-rgn.o \\\n \tsched-vis.o \\\n \tsdbout.o \\\n-\tsee.o \\\n \tsel-sched-ir.o \\\n \tsel-sched-dump.o \\\n \tsel-sched.o \\\n@@ -2734,10 +2733,6 @@ fwprop.o : fwprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n web.o : web.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\\n    $(DF_H) $(OBSTACK_H) $(TIMEVAR_H) $(TREE_PASS_H)\n-see.o : see.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h \\\n-   $(DF_H) $(OBSTACK_H) $(TIMEVAR_H) $(TREE_PASS_H) $(RECOG_H) $(EXPR_H) \\\n-   $(SPLAY_TREE_H) $(HASHTAB_H) $(REGS_H) dce.h\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) $(REAL_H) insn-config.h $(GGC_H) \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\"}, {"sha": "e33bc4c61165a729ae65d284ce3c5e5e81ec0064", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "patch": "@@ -1061,8 +1061,8 @@ Common Report Var(flag_section_anchors) Optimization\n Access data in the same section from shared anchor points\n \n fsee\n-Common Report Var(flag_see) Init(0)\n-Eliminate redundant sign extensions using LCM.\n+Common\n+Does nothing.  Preserved for backward compatibility.\n \n fshow-column\n Common C ObjC C++ ObjC++ Report Var(flag_show_column) Init(1)"}, {"sha": "155ceeecf42537ae85afdf02f9eed5f7cc181a5d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "patch": "@@ -364,7 +364,7 @@ Objective-C and Objective-C++ Dialects}.\n -frounding-math -fsched2-use-superblocks @gol\n -fsched2-use-traces -fsched-spec-load -fsched-spec-load-dangerous @gol\n -fsched-stalled-insns-dep[=@var{n}] -fsched-stalled-insns[=@var{n}] @gol\n--fschedule-insns -fschedule-insns2 -fsection-anchors -fsee @gol\n+-fschedule-insns -fschedule-insns2 -fsection-anchors @gol\n -fselective-scheduling -fselective-scheduling2 @gol\n -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops @gol\n -fsignaling-nans -fsingle-precision-constant -fsplit-ivs-in-unroller @gol\n@@ -6221,11 +6221,6 @@ match the reality and hurt the performance.  This only makes\n sense when scheduling after register allocation, i.e.@: with\n @option{-fschedule-insns2} or at @option{-O2} or higher.\n \n-@item -fsee\n-@opindex fsee\n-Eliminate redundant sign extension instructions and move the non-redundant\n-ones to optimal placement using lazy code motion (LCM).\n-\n @item -freschedule-modulo-scheduled-loops\n @opindex freschedule-modulo-scheduled-loops\n The modulo scheduling comes before the traditional scheduling, if a loop"}, {"sha": "94e70ba9676570dab74c215c257cb3f09939ebdb", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "patch": "@@ -2067,6 +2067,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n       flag_pedantic_errors = pedantic = 1;\n       break;\n \n+    case OPT_fsee:\n     case OPT_fcse_skip_blocks:\n     case OPT_floop_optimize:\n     case OPT_frerun_loop_opt:"}, {"sha": "36ffd22213563f89d9781bf3da4462017c140b97", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "patch": "@@ -768,7 +768,6 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_df_initialize_no_opt);\n       NEXT_PASS (pass_stack_ptr_mod);\n       NEXT_PASS (pass_mode_switching);\n-      NEXT_PASS (pass_see);\n       NEXT_PASS (pass_match_asm_constraints);\n       NEXT_PASS (pass_sms);\n       NEXT_PASS (pass_sched);"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/see.c", "status": "modified", "additions": 0, "deletions": 3894, "changes": 3894, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Fsee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Fsee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsee.c?ref=8393a9c80c9314cbd66d45de908c45ea8ed5dbc1"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gcc.dg/20080522-1.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Ftestsuite%2Fgcc.dg%2F20080522-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Ftestsuite%2Fgcc.dg%2F20080522-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20080522-1.c?ref=8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "patch": "@@ -1,20 +0,0 @@\n-/* { dg-do compile }\n-/* { dg-options \"-O2 -fsee\" } */\n-\n-int f(const char* ptr, int bar) {\n-  return (((const char *)0 - ptr ) & (bar - 1)) == 0;\n-}\n-\n-\n-int g(const char* ptr, const char *test, int N, int bar)  {\n-  if (N == 0) {\n-  }\n-  else if (N > 0) {\n-    int count = 0;\n-    while ( count < N) {\n-      if (!f(ptr, bar))\n-        count++;\n-    }\n-  }\n-  return f(test, bar) ;\n-}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gcc.dg/20080528-1.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Ftestsuite%2Fgcc.dg%2F20080528-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Ftestsuite%2Fgcc.dg%2F20080528-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20080528-1.c?ref=8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "patch": "@@ -1,9 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fsee\" } */\n-\n-unsigned long g(int a, int b) {\n-  return a / b;\n-}\n-unsigned long f(long int a) {\n-  return g(a, 1<<13);\n-}"}, {"sha": "9d727639db660aff7e0b6486831d135dd928d3cc", "filename": "gcc/timevar.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "patch": "@@ -167,7 +167,6 @@ DEFTIMEVAR (TV_BRANCH_PROB           , \"branch prediction\")\n DEFTIMEVAR (TV_VPT                   , \"value profile opts\")\n DEFTIMEVAR (TV_COMBINE               , \"combiner\")\n DEFTIMEVAR (TV_IFCVT\t\t     , \"if-conversion\")\n-DEFTIMEVAR (TV_SEE                   , \"see\")\n DEFTIMEVAR (TV_REGMOVE               , \"regmove\")\n DEFTIMEVAR (TV_MODE_SWITCH           , \"mode switching\")\n DEFTIMEVAR (TV_SMS\t\t     , \"sms modulo scheduling\")"}, {"sha": "e919909d090f0981063b79806c296d2d139ef0e1", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8393a9c80c9314cbd66d45de908c45ea8ed5dbc1/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=8393a9c80c9314cbd66d45de908c45ea8ed5dbc1", "patch": "@@ -479,7 +479,6 @@ extern struct rtl_opt_pass pass_split_all_insns;\n extern struct rtl_opt_pass pass_fast_rtl_byte_dce;\n extern struct rtl_opt_pass pass_lower_subreg2;\n extern struct rtl_opt_pass pass_mode_switching;\n-extern struct rtl_opt_pass pass_see;\n extern struct rtl_opt_pass pass_sms;\n extern struct rtl_opt_pass pass_sched;\n extern struct rtl_opt_pass pass_ira;"}]}