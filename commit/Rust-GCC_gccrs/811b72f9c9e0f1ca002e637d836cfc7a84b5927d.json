{"sha": "811b72f9c9e0f1ca002e637d836cfc7a84b5927d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODExYjcyZjljOWUwZjFjYTAwMmU2MzdkODM2Y2ZjN2E4NGI1OTI3ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-04-15T08:28:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-04-15T08:28:41Z"}, "message": "re PR target/56890 (invalid fdtox instruction in 64-bit mode with -O2)\n\n\tPR target/56890\n\t* config/sparc/sparc.c (enum sparc_mode_class): Add H_MODE value.\n\t(S_MODES): Set H_MODE bit.\n\t(SF_MODES): Set only S_MODE and SF_MODE bits.\n\t(DF_MODES): Set SF_MODES and only D_MODE and DF_MODE bits.\n\t(sparc_init_modes) <MODE_INT>: Set H_MODE bit for sub-word modes.\n\t<MODE_VECTOR_INT>: Do not set SF_MODE for sub-word modes.\n\t<MODE_FLOAT>: Likewise.\n\nFrom-SVN: r197958", "tree": {"sha": "c70b9bc96937be8d98c08a7025672557dbb64964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c70b9bc96937be8d98c08a7025672557dbb64964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/811b72f9c9e0f1ca002e637d836cfc7a84b5927d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811b72f9c9e0f1ca002e637d836cfc7a84b5927d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/811b72f9c9e0f1ca002e637d836cfc7a84b5927d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811b72f9c9e0f1ca002e637d836cfc7a84b5927d/comments", "author": null, "committer": null, "parents": [{"sha": "5529fdd6b9e08fd5dd7cf9d8560f6cbde267cd26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5529fdd6b9e08fd5dd7cf9d8560f6cbde267cd26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5529fdd6b9e08fd5dd7cf9d8560f6cbde267cd26"}], "stats": {"total": 77, "additions": 65, "deletions": 12}, "files": [{"sha": "06d603dfb0eb720ee501deb4e9aaa339fcd45dc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b72f9c9e0f1ca002e637d836cfc7a84b5927d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b72f9c9e0f1ca002e637d836cfc7a84b5927d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=811b72f9c9e0f1ca002e637d836cfc7a84b5927d", "patch": "@@ -1,3 +1,14 @@\n+2013-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/56890\n+\t* config/sparc/sparc.c (enum sparc_mode_class): Add H_MODE value.\n+\t(S_MODES): Set H_MODE bit.\n+\t(SF_MODES): Set only S_MODE and SF_MODE bits.\n+\t(DF_MODES): Set SF_MODES and only D_MODE and DF_MODE bits.\n+\t(sparc_init_modes) <MODE_INT>: Set H_MODE bit for sub-word modes.\n+\t<MODE_VECTOR_INT>: Do not set SF_MODE for sub-word modes.\n+\t<MODE_FLOAT>: Likewise.\n+\n 2013-04-15  Joey Ye  <joey.ye@arm.com>\n \n \t* config/arm/arm.c (thumb_far_jump_used_p): Fix typo in comments."}, {"sha": "1dc4e3600a8f437137a7b3a722eab3a37ffe5740", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b72f9c9e0f1ca002e637d836cfc7a84b5927d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b72f9c9e0f1ca002e637d836cfc7a84b5927d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=811b72f9c9e0f1ca002e637d836cfc7a84b5927d", "patch": "@@ -4467,13 +4467,14 @@ mem_min_alignment (rtx mem, int desired)\n    mapped into one sparc_mode_class mode.  */\n \n enum sparc_mode_class {\n-  S_MODE, D_MODE, T_MODE, O_MODE,\n+  H_MODE, S_MODE, D_MODE, T_MODE, O_MODE,\n   SF_MODE, DF_MODE, TF_MODE, OF_MODE,\n   CC_MODE, CCFP_MODE\n };\n \n /* Modes for single-word and smaller quantities.  */\n-#define S_MODES ((1 << (int) S_MODE) | (1 << (int) SF_MODE))\n+#define S_MODES \\\n+  ((1 << (int) H_MODE) | (1 << (int) S_MODE) | (1 << (int) SF_MODE))\n \n /* Modes for double-word and smaller quantities.  */\n #define D_MODES (S_MODES | (1 << (int) D_MODE) | (1 << DF_MODE))\n@@ -4484,13 +4485,11 @@ enum sparc_mode_class {\n /* Modes for 8-word and smaller quantities.  */\n #define O_MODES (T_MODES | (1 << (int) O_MODE) | (1 << (int) OF_MODE))\n \n-/* Modes for single-float quantities.  We must allow any single word or\n-   smaller quantity.  This is because the fix/float conversion instructions\n-   take integer inputs/outputs from the float registers.  */\n-#define SF_MODES (S_MODES)\n+/* Modes for single-float quantities.  */\n+#define SF_MODES ((1 << (int) S_MODE) | (1 << (int) SF_MODE))\n \n /* Modes for double-float and smaller quantities.  */\n-#define DF_MODES (D_MODES)\n+#define DF_MODES (SF_MODES | (1 << (int) D_MODE) | (1 << DF_MODE))\n \n /* Modes for quad-float and smaller quantities.  */\n #define TF_MODES (DF_MODES | (1 << (int) TF_MODE))\n@@ -4586,7 +4585,9 @@ sparc_init_modes (void)\n \tcase MODE_INT:\n \tcase MODE_PARTIAL_INT:\n \tcase MODE_COMPLEX_INT:\n-\t  if (GET_MODE_SIZE (i) <= 4)\n+\t  if (GET_MODE_SIZE (i) < 4)\n+\t    sparc_mode_class[i] = 1 << (int) H_MODE;\n+\t  else if (GET_MODE_SIZE (i) == 4)\n \t    sparc_mode_class[i] = 1 << (int) S_MODE;\n \t  else if (GET_MODE_SIZE (i) == 8)\n \t    sparc_mode_class[i] = 1 << (int) D_MODE;\n@@ -4598,14 +4599,16 @@ sparc_init_modes (void)\n \t    sparc_mode_class[i] = 0;\n \t  break;\n \tcase MODE_VECTOR_INT:\n-\t  if (GET_MODE_SIZE (i) <= 4)\n-\t    sparc_mode_class[i] = 1 << (int)SF_MODE;\n+\t  if (GET_MODE_SIZE (i) == 4)\n+\t    sparc_mode_class[i] = 1 << (int) SF_MODE;\n \t  else if (GET_MODE_SIZE (i) == 8)\n-\t    sparc_mode_class[i] = 1 << (int)DF_MODE;\n+\t    sparc_mode_class[i] = 1 << (int) DF_MODE;\n+\t  else\n+\t    sparc_mode_class[i] = 0;\n \t  break;\n \tcase MODE_FLOAT:\n \tcase MODE_COMPLEX_FLOAT:\n-\t  if (GET_MODE_SIZE (i) <= 4)\n+\t  if (GET_MODE_SIZE (i) == 4)\n \t    sparc_mode_class[i] = 1 << (int) SF_MODE;\n \t  else if (GET_MODE_SIZE (i) == 8)\n \t    sparc_mode_class[i] = 1 << (int) DF_MODE;"}, {"sha": "98a2decdd05bdee6bffac5170fe0e0ad238e5d14", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b72f9c9e0f1ca002e637d836cfc7a84b5927d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b72f9c9e0f1ca002e637d836cfc7a84b5927d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=811b72f9c9e0f1ca002e637d836cfc7a84b5927d", "patch": "@@ -1,3 +1,8 @@\n+2013-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/pr56890-1.c: New test.\n+\t* gcc.dg/pr56890-2.c: Likewise.\n+\n 2013-04-15  Joey Ye  <joey.ye@arm.com>\n \n \t* gcc.target/arm/thumb1-far-jump-1.c: New test."}, {"sha": "93b2134e594428422c38e4d6a862f234fe96be95", "filename": "gcc/testsuite/gcc.dg/pr56890-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b72f9c9e0f1ca002e637d836cfc7a84b5927d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56890-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b72f9c9e0f1ca002e637d836cfc7a84b5927d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56890-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56890-1.c?ref=811b72f9c9e0f1ca002e637d836cfc7a84b5927d", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/56890 */\n+/* Reported by Rainer Jung <rainer.jung@kippdata.de> */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int buggy(unsigned int min, unsigned int max)\n+{\n+    if (max < 16384) {\n+        unsigned short num16 = 0;\n+        num16 = min + (long) ((double) (max - min + 1.0) * (num16 / (65535 + 1.0)));\n+        return num16;\n+    }\n+    return 0;\n+}"}, {"sha": "474327e9d032584aaddbf20373a08d988a11068f", "filename": "gcc/testsuite/gcc.dg/pr56890-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b72f9c9e0f1ca002e637d836cfc7a84b5927d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56890-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b72f9c9e0f1ca002e637d836cfc7a84b5927d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56890-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56890-2.c?ref=811b72f9c9e0f1ca002e637d836cfc7a84b5927d", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/56890 */\n+/* Reported by Rainer Jung <rainer.jung@kippdata.de> */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-O\" } */\n+\n+unsigned int buggy(unsigned int min, unsigned int max)\n+{\n+    unsigned int number;\n+    if (max < 16384) {\n+        unsigned short num16;\n+        num16 = min + (long) ((double) (max - min + 1.0) * (num16 / (65535 + 1.0)));\n+        return num16;\n+    }\n+    else {\n+        (number) = min + (long) ((double) (max - min + 1.0) * (number / (4294967295U + 1.0)));\n+    }\n+    return number;\n+}"}]}