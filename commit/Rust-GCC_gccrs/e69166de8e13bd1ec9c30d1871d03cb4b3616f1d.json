{"sha": "e69166de8e13bd1ec9c30d1871d03cb4b3616f1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY5MTY2ZGU4ZTEzYmQxZWM5YzMwZDE4NzFkMDNjYjRiMzYxNmYxZA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-10-14T22:55:36Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-10-14T22:55:36Z"}, "message": "s390-protos.h (s390_alc_comparison): Add prototype.\n\n\t* config/s390/s390-protos.h (s390_alc_comparison): Add prototype.\n\t(s390_slb_comparison): Likewise.\n\t* config/s390/s390.c (s390_alc_comparison, s390_slb_comparison):\n\tNew functions.\n\t* config/s390/s390.h (PREDICATE_CODES): Add s390_alc_comparison\n\tand s390_slb_comparison.\n\t* config/s390/s390.md (\"*adddi3_31\", \"*subdi3_31\"): Do not use on\n\tzSeries machines.\n\t(\"*adddi3_31z\", \"*subdi3_31z\"): New insns.\n\t(\"*adddi3_alc_cc\", \"*adddi3_alc\", \"*subdi3_slb_cc\", \"*subdi3_slb\",\n\t\"*addsi3_alc_cc\", \"*addsi3_alc\", \"*subsi3_slb_cc\", \"*subsi3_slb\"):\n\tNew insns.\n\nFrom-SVN: r72505", "tree": {"sha": "23b9501ea321a423f08d0d2971a3f6a84cc84f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23b9501ea321a423f08d0d2971a3f6a84cc84f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d/comments", "author": null, "committer": null, "parents": [{"sha": "7903cebc8d5da0ff4b9b21942e44563e400290b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7903cebc8d5da0ff4b9b21942e44563e400290b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7903cebc8d5da0ff4b9b21942e44563e400290b5"}], "stats": {"total": 280, "additions": 277, "deletions": 3}, "files": [{"sha": "7302097021b7ad7fa2ffc1058ca07d746cf0c02a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e69166de8e13bd1ec9c30d1871d03cb4b3616f1d", "patch": "@@ -1,3 +1,18 @@\n+2003-10-14  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_alc_comparison): Add prototype.\n+\t(s390_slb_comparison): Likewise.\n+\t* config/s390/s390.c (s390_alc_comparison, s390_slb_comparison):\n+\tNew functions.\n+\t* config/s390/s390.h (PREDICATE_CODES): Add s390_alc_comparison\n+\tand s390_slb_comparison.\n+\t* config/s390/s390.md (\"*adddi3_31\", \"*subdi3_31\"): Do not use on \n+\tzSeries machines.\n+\t(\"*adddi3_31z\", \"*subdi3_31z\"): New insns.\n+\t(\"*adddi3_alc_cc\", \"*adddi3_alc\", \"*subdi3_slb_cc\", \"*subdi3_slb\",\n+\t\"*addsi3_alc_cc\", \"*addsi3_alc\", \"*subsi3_slb_cc\", \"*subsi3_slb\"):\n+\tNew insns.\n+\t\n 2003-10-14  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* configure.in: Clean up some feedback echoes."}, {"sha": "76ceccdc5127c1ca0023927019dd75fb5452f3df", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=e69166de8e13bd1ec9c30d1871d03cb4b3616f1d", "patch": "@@ -49,6 +49,8 @@ extern int tls_symbolic_operand (rtx);\n extern int s390_match_ccmode (rtx, enum machine_mode);\n extern enum machine_mode s390_tm_ccmode (rtx, rtx, int);\n extern enum machine_mode s390_select_ccmode (enum rtx_code, rtx, rtx);\n+extern int s390_alc_comparison (rtx op, enum machine_mode mode);\n+extern int s390_slb_comparison (rtx op, enum machine_mode mode);\n extern int symbolic_reference_mentioned_p (rtx);\n extern int tls_symbolic_reference_mentioned_p (rtx);\n extern rtx s390_tls_get_offset (void);"}, {"sha": "6d56b0278b15a7b4ee26ade329b024833a056e62", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=e69166de8e13bd1ec9c30d1871d03cb4b3616f1d", "patch": "@@ -447,6 +447,90 @@ s390_select_ccmode (enum rtx_code code, rtx op0, rtx op1)\n     }\n }\n \n+/* Return nonzero if OP is a valid comparison operator\n+   for an ALC condition in mode MODE.  */\n+\n+int\n+s390_alc_comparison (rtx op, enum machine_mode mode)\n+{\n+  if (mode != VOIDmode && mode != GET_MODE (op))\n+    return 0;\n+\n+  if (GET_RTX_CLASS (GET_CODE (op)) != '<')\n+    return 0;\n+\n+  if (GET_CODE (XEXP (op, 0)) != REG\n+      || REGNO (XEXP (op, 0)) != CC_REGNUM\n+      || XEXP (op, 1) != const0_rtx)\n+    return 0;\n+\n+  switch (GET_MODE (XEXP (op, 0)))\n+    {\n+    case CCL1mode:\n+      return GET_CODE (op) == LTU;\n+\n+    case CCL2mode:\n+      return GET_CODE (op) == LEU;\n+\n+    case CCUmode:\n+      return GET_CODE (op) == GTU;\n+\n+    case CCURmode:\n+      return GET_CODE (op) == LTU;\n+\n+    case CCSmode:\n+      return GET_CODE (op) == UNGT;\n+\n+    case CCSRmode:\n+      return GET_CODE (op) == UNLT;\n+\n+    default:\n+      return 0;\n+    }\n+}\n+\n+/* Return nonzero if OP is a valid comparison operator\n+   for an SLB condition in mode MODE.  */\n+\n+int\n+s390_slb_comparison (rtx op, enum machine_mode mode)\n+{\n+  if (mode != VOIDmode && mode != GET_MODE (op))\n+    return 0;\n+\n+  if (GET_RTX_CLASS (GET_CODE (op)) != '<')\n+    return 0;\n+\n+  if (GET_CODE (XEXP (op, 0)) != REG\n+      || REGNO (XEXP (op, 0)) != CC_REGNUM\n+      || XEXP (op, 1) != const0_rtx)\n+    return 0;\n+\n+  switch (GET_MODE (XEXP (op, 0)))\n+    {\n+    case CCL1mode:\n+      return GET_CODE (op) == GEU;\n+\n+    case CCL2mode:\n+      return GET_CODE (op) == GTU;\n+\n+    case CCUmode:\n+      return GET_CODE (op) == LEU;\n+\n+    case CCURmode:\n+      return GET_CODE (op) == GEU;\n+\n+    case CCSmode:\n+      return GET_CODE (op) == LE;\n+\n+    case CCSRmode:\n+      return GET_CODE (op) == GE;\n+\n+    default:\n+      return 0;\n+    }\n+}\n+\n /* Return branch condition mask to implement a branch\n    specified by CODE.  */\n "}, {"sha": "1c3241c63e3b708c3ff0ffe02fe7635a093488e7", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=e69166de8e13bd1ec9c30d1871d03cb4b3616f1d", "patch": "@@ -1030,7 +1030,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"const0_operand\",  { CONST_INT, CONST_DOUBLE }},\t\t\t\\\n   {\"consttable_operand\", { SYMBOL_REF, LABEL_REF, CONST, \t\t\\\n \t\t\t   CONST_INT, CONST_DOUBLE }},\t\t\t\\\n-  {\"s390_plus_operand\", { PLUS }},\n+  {\"s390_plus_operand\", { PLUS }},\t\t\t\t\t\\\n+  {\"s390_alc_comparison\", { LTU, GTU, LEU, GEU }},\t\t\t\\\n+  {\"s390_slb_comparison\", { LTU, GTU, LEU, GEU }},\n \n /* Specify the machine mode that this machine uses for the index in the\n    tablejump instruction.  */"}, {"sha": "5f49e6ab1d138f8b64483eb2221464a6ab754dbc", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 173, "deletions": 2, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69166de8e13bd1ec9c30d1871d03cb4b3616f1d/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=e69166de8e13bd1ec9c30d1871d03cb4b3616f1d", "patch": "@@ -3254,12 +3254,37 @@\n    ag\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RI,RXY\")])\n \n+(define_insn_and_split \"*adddi3_31z\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n+        (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n+                 (match_operand:DI 2 \"general_operand\" \"do\") ) )\n+   (clobber (reg:CC 33))]\n+  \"!TARGET_64BIT && TARGET_CPU_ZARCH\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+    [(set (reg:CCL1 33)\n+          (compare:CCL1 (plus:SI (match_dup 7) (match_dup 8))\n+                        (match_dup 7)))\n+     (set (match_dup 6) (plus:SI (match_dup 7) (match_dup 8)))])\n+   (parallel\n+    [(set (match_dup 3) (plus:SI (plus:SI (match_dup 4) (match_dup 5))\n+                                 (ltu:SI (reg:CCL1 33) (const_int 0))))\n+     (clobber (reg:CC 33))])]\n+  \"operands[3] = operand_subword (operands[0], 0, 0, DImode);\n+   operands[4] = operand_subword (operands[1], 0, 0, DImode);\n+   operands[5] = operand_subword (operands[2], 0, 0, DImode);\n+   operands[6] = operand_subword (operands[0], 1, 0, DImode);\n+   operands[7] = operand_subword (operands[1], 1, 0, DImode);\n+   operands[8] = operand_subword (operands[2], 1, 0, DImode);\"\n+  [(set_attr \"op_type\"  \"NN\")])\n+\n (define_insn_and_split \"*adddi3_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n         (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n                  (match_operand:DI 2 \"general_operand\" \"do\") ) )\n    (clobber (reg:CC 33))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_CPU_ZARCH\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel\n@@ -3804,12 +3829,37 @@\n    sg\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RRE\")])\n \n+(define_insn_and_split \"*subdi3_31z\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n+        (minus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                  (match_operand:DI 2 \"general_operand\" \"do\") ) )\n+   (clobber (reg:CC 33))]\n+  \"!TARGET_64BIT && TARGET_CPU_ZARCH\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+    [(set (reg:CCL2 33)\n+          (compare:CCL2 (minus:SI (match_dup 7) (match_dup 8))\n+                        (match_dup 7)))\n+     (set (match_dup 6) (minus:SI (match_dup 7) (match_dup 8)))])\n+   (parallel\n+    [(set (match_dup 3) (minus:SI (minus:SI (match_dup 4) (match_dup 5))\n+                                  (gtu:SI (reg:CCL2 33) (const_int 0))))\n+     (clobber (reg:CC 33))])]\n+  \"operands[3] = operand_subword (operands[0], 0, 0, DImode);\n+   operands[4] = operand_subword (operands[1], 0, 0, DImode);\n+   operands[5] = operand_subword (operands[2], 0, 0, DImode);\n+   operands[6] = operand_subword (operands[0], 1, 0, DImode);\n+   operands[7] = operand_subword (operands[1], 1, 0, DImode);\n+   operands[8] = operand_subword (operands[2], 1, 0, DImode);\"\n+  [(set_attr \"op_type\"  \"NN\")])\n+\n (define_insn_and_split \"*subdi3_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n         (minus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n                   (match_operand:DI 2 \"general_operand\" \"do\") ) )\n    (clobber (reg:CC 33))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_CPU_ZARCH\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel\n@@ -4057,6 +4107,127 @@\n    (set_attr \"type\"     \"fsimps,fsimps\")])\n \n \n+;;\n+;;- Conditional add/subtract instructions.\n+;;\n+\n+;\n+; adddicc instruction pattern(s).\n+;\n+\n+(define_insn \"*adddi3_alc_cc\"\n+  [(set (reg 33) \n+        (compare\n+          (plus:DI (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n+                            (match_operand:DI 2 \"general_operand\" \"d,m\"))\n+                   (match_operand:DI 3 \"s390_alc_comparison\" \"\"))\n+          (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (plus:DI (plus:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\" \n+  \"@\n+   alcgr\\\\t%0,%2\n+   alcg\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+\n+(define_insn \"*adddi3_alc\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (plus:DI (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n+                          (match_operand:DI 2 \"general_operand\" \"d,m\"))\n+                 (match_operand:DI 3 \"s390_alc_comparison\" \"\")))\n+   (clobber (reg:CC 33))] \n+  \"TARGET_64BIT\" \n+  \"@\n+   alcgr\\\\t%0,%2\n+   alcg\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+\n+(define_insn \"*subdi3_slb_cc\"\n+  [(set (reg 33) \n+        (compare\n+          (minus:DI (minus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n+                              (match_operand:DI 2 \"general_operand\" \"d,m\"))\n+                    (match_operand:DI 3 \"s390_slb_comparison\" \"\"))\n+          (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (minus:DI (minus:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\" \n+  \"@\n+   slbgr\\\\t%0,%2\n+   slbg\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+\n+(define_insn \"*subdi3_slb\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (minus:DI (minus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n+                            (match_operand:DI 2 \"general_operand\" \"d,m\"))\n+                  (match_operand:DI 3 \"s390_slb_comparison\" \"\")))\n+   (clobber (reg:CC 33))] \n+  \"TARGET_64BIT\" \n+  \"@\n+   slbgr\\\\t%0,%2\n+   slbg\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+\n+;\n+; addsicc instruction pattern(s).\n+;\n+\n+(define_insn \"*addsi3_alc_cc\"\n+  [(set (reg 33) \n+        (compare\n+          (plus:SI (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n+                            (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                   (match_operand:SI 3 \"s390_alc_comparison\" \"\"))\n+          (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+        (plus:SI (plus:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_CPU_ZARCH\" \n+  \"@\n+   alcr\\\\t%0,%2\n+   alc\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+\n+(define_insn \"*addsi3_alc\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+        (plus:SI (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n+                          (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                 (match_operand:SI 3 \"s390_alc_comparison\" \"\")))\n+   (clobber (reg:CC 33))]\n+  \"TARGET_CPU_ZARCH\" \n+  \"@\n+   alcr\\\\t%0,%2\n+   alc\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+\n+(define_insn \"*subsi3_slb_cc\"\n+  [(set (reg 33) \n+        (compare\n+          (minus:SI (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n+                              (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                    (match_operand:SI 3 \"s390_slb_comparison\" \"\"))\n+          (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+        (minus:SI (minus:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_CPU_ZARCH\" \n+  \"@\n+   slbr\\\\t%0,%2\n+   slb\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+\n+(define_insn \"*subsi3_slb\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+        (minus:SI (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n+                            (match_operand:SI 2 \"general_operand\" \"d,m\"))\n+                  (match_operand:SI 3 \"s390_slb_comparison\" \"\")))\n+   (clobber (reg:CC 33))] \n+  \"TARGET_CPU_ZARCH\" \n+  \"@\n+   slbr\\\\t%0,%2\n+   slb\\\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+\n+\n ;;\n ;;- Multiply instructions.\n ;;"}]}